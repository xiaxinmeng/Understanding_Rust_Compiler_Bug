{"sha": "e287080d1cb1d53066778275b8b0f43a7548e804", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI4NzA4MGQxY2IxZDUzMDY2Nzc4Mjc1YjhiMGY0M2E3NTQ4ZTgwNA==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2017-03-01T04:31:28Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2017-03-01T04:31:28Z"}, "message": "invoke.texi (ARC Options): Copy-edit to fix punctuation, markup, and similar issues.\n\n2017-02-28  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/invoke.texi (ARC Options): Copy-edit to fix punctuation,\n\tmarkup, and similar issues.  Remove @opindex entries for things\n\tthat aren't options.  Add missing -mmpy-option entries.\n\nFrom-SVN: r245800", "tree": {"sha": "f90791a409a3a75d0785348010b6480ff8c5096f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f90791a409a3a75d0785348010b6480ff8c5096f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e287080d1cb1d53066778275b8b0f43a7548e804", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e287080d1cb1d53066778275b8b0f43a7548e804", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e287080d1cb1d53066778275b8b0f43a7548e804", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e287080d1cb1d53066778275b8b0f43a7548e804/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "da1a9ced782949368f9b8dd48593a9f1cd4015d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da1a9ced782949368f9b8dd48593a9f1cd4015d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da1a9ced782949368f9b8dd48593a9f1cd4015d4"}], "stats": {"total": 306, "additions": 155, "deletions": 151}, "files": [{"sha": "32dbf1cc635c7a19925ff988e1c1a54bf3987ba2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e287080d1cb1d53066778275b8b0f43a7548e804/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e287080d1cb1d53066778275b8b0f43a7548e804/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e287080d1cb1d53066778275b8b0f43a7548e804", "patch": "@@ -1,3 +1,9 @@\n+2017-02-28  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/invoke.texi (ARC Options): Copy-edit to fix punctuation,\n+\tmarkup, and similar issues.  Remove @opindex entries for things\n+\tthat aren't options.  Add missing -mmpy-option entries.\n+\n 2017-02-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/79737"}, {"sha": "2942556a9c0ef2cb155a040e5836863b1806e27c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 149, "deletions": 151, "changes": 300, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e287080d1cb1d53066778275b8b0f43a7548e804/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e287080d1cb1d53066778275b8b0f43a7548e804/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e287080d1cb1d53066778275b8b0f43a7548e804", "patch": "@@ -14248,70 +14248,58 @@ Compile for ARC EM.\n Compile for ARC HS.\n \n @item em\n-@opindex em\n-Compile for ARC EM cpu with no hardware extension.\n+Compile for ARC EM CPU with no hardware extensions.\n \n @item em4\n-@opindex em4\n-Compile for ARC EM4 cpu.\n+Compile for ARC EM4 CPU.\n \n @item em4_dmips\n-@opindex em4_dmips\n-Compile for ARC EM4 DMIPS cpu.\n+Compile for ARC EM4 DMIPS CPU.\n \n @item em4_fpus\n-@opindex em4_fpus\n-Compile for ARC EM4 DMIPS cpu with single precision floating point\n+Compile for ARC EM4 DMIPS CPU with the single-precision floating-point\n extension.\n \n @item em4_fpuda\n-@opindex em4_fpuda\n-Compile for ARC EM4 DMIPS cpu with single precision floating point and\n-double assists instructions.\n+Compile for ARC EM4 DMIPS CPU with single-precision floating-point and\n+double assist instructions.\n \n @item hs\n-@opindex hs\n-Compile for ARC HS cpu with no hardware extension, except the atomic\n+Compile for ARC HS CPU with no hardware extensions except the atomic\n instructions.\n \n @item hs34\n-@opindex hs34\n-Compile for ARC HS34 cpu.\n+Compile for ARC HS34 CPU.\n \n @item hs38\n-@opindex hs38\n-Compile for ARC HS38 cpu.\n+Compile for ARC HS38 CPU.\n \n @item hs38_linux\n-@opindex hs38_linux\n-Compile for ARC HS38 cpu with all hardware extensions on.\n+Compile for ARC HS38 CPU with all hardware extensions on.\n \n @item arc600_norm\n-@opindex arc600_norm\n-Compile for ARC 600 cpu with norm instruction enabled.\n+Compile for ARC 600 CPU with @code{norm} instructions enabled.\n \n @item arc600_mul32x16\n-@opindex arc600_mul32x16\n-Compile for ARC 600 cpu with norm and mul32x16 instructions enabled.\n+Compile for ARC 600 CPU with @code{norm} and 32x16-bit multiply \n+instructions enabled.\n \n @item arc600_mul64\n-@opindex arc600_mul64\n-Compile for ARC 600 cpu with norm and mul64 instructions enabled.\n+Compile for ARC 600 CPU with @code{norm} and @code{mul64}-family \n+instructions enabled.\n \n @item arc601_norm\n-@opindex arc601_norm\n-Compile for ARC 601 cpu with norm instruction enabled.\n+Compile for ARC 601 CPU with @code{norm} instructions enabled.\n \n @item arc601_mul32x16\n-@opindex arc601_mul32x16\n-Compile for ARC 601 cpu with norm and mul32x16 instructions enabled.\n+Compile for ARC 601 CPU with @code{norm} and 32x16-bit multiply\n+instructions enabled.\n \n @item arc601_mul64\n-@opindex arc601_mul64\n-Compile for ARC 601 cpu with norm and mul64 instructions enabled.\n+Compile for ARC 601 CPU with @code{norm} and @code{mul64}-family\n+instructions enabled.\n \n @item nps400\n-@opindex nps400\n Compile for ARC 700 on NPS400 chip.\n \n @end table\n@@ -14320,52 +14308,54 @@ Compile for ARC 700 on NPS400 chip.\n @opindex mdpfp\n @itemx -mdpfp-compact\n @opindex mdpfp-compact\n-FPX: Generate Double Precision FPX instructions, tuned for the compact\n+Generate double-precision FPX instructions, tuned for the compact\n implementation.\n \n @item -mdpfp-fast\n @opindex mdpfp-fast\n-FPX: Generate Double Precision FPX instructions, tuned for the fast\n+Generate double-precision FPX instructions, tuned for the fast\n implementation.\n \n @item -mno-dpfp-lrsr\n @opindex mno-dpfp-lrsr\n-Disable LR and SR instructions from using FPX extension aux registers.\n+Disable @code{lr} and @code{sr} instructions from using FPX extension\n+aux registers.\n \n @item -mea\n @opindex mea\n-Generate Extended arithmetic instructions.  Currently only\n+Generate extended arithmetic instructions.  Currently only\n @code{divaw}, @code{adds}, @code{subs}, and @code{sat16} are\n supported.  This is always enabled for @option{-mcpu=ARC700}.\n \n @item -mno-mpy\n @opindex mno-mpy\n-Do not generate mpy instructions for ARC700.  This instruction is\n+Do not generate @code{mpy}-family instructions for ARC700.  This option is\n deprecated.\n \n @item -mmul32x16\n @opindex mmul32x16\n-Generate 32x16 bit multiply and mac instructions.\n+Generate 32x16-bit multiply and multiply-accumulate instructions.\n \n @item -mmul64\n @opindex mmul64\n-Generate mul64 and mulu64 instructions.  Only valid for @option{-mcpu=ARC600}.\n+Generate @code{mul64} and @code{mulu64} instructions.  \n+Only valid for @option{-mcpu=ARC600}.\n \n @item -mnorm\n @opindex mnorm\n-Generate norm instruction.  This is the default if @option{-mcpu=ARC700}\n+Generate @code{norm} instructions.  This is the default if @option{-mcpu=ARC700}\n is in effect.\n \n @item -mspfp\n @opindex mspfp\n @itemx -mspfp-compact\n @opindex mspfp-compact\n-FPX: Generate Single Precision FPX instructions, tuned for the compact\n+Generate single-precision FPX instructions, tuned for the compact\n implementation.\n \n @item -mspfp-fast\n @opindex mspfp-fast\n-FPX: Generate Single Precision FPX instructions, tuned for the fast\n+Generate single-precision FPX instructions, tuned for the fast\n implementation.\n \n @item -msimd\n@@ -14376,28 +14366,29 @@ builtins.  Only valid for @option{-mcpu=ARC700}.\n @item -msoft-float\n @opindex msoft-float\n This option ignored; it is provided for compatibility purposes only.\n-Software floating point code is emitted by default, and this default\n-can overridden by FPX options; @samp{mspfp}, @samp{mspfp-compact}, or\n-@samp{mspfp-fast} for single precision, and @samp{mdpfp},\n-@samp{mdpfp-compact}, or @samp{mdpfp-fast} for double precision.\n+Software floating-point code is emitted by default, and this default\n+can overridden by FPX options; @option{-mspfp}, @option{-mspfp-compact}, or\n+@option{-mspfp-fast} for single precision, and @option{-mdpfp},\n+@option{-mdpfp-compact}, or @option{-mdpfp-fast} for double precision.\n \n @item -mswap\n @opindex mswap\n-Generate swap instructions.\n+Generate @code{swap} instructions.\n \n @item -matomic\n @opindex matomic\n-This enables Locked Load/Store Conditional extension to implement\n-atomic memopry built-in functions.  Not available for ARC 6xx or ARC\n+This enables use of the locked load/store conditional extension to implement\n+atomic memory built-in functions.  Not available for ARC 6xx or ARC\n EM cores.\n \n @item -mdiv-rem\n @opindex mdiv-rem\n-Enable DIV/REM instructions for ARCv2 cores.\n+Enable @code{div} and @code{rem} instructions for ARCv2 cores.\n \n @item -mcode-density\n @opindex mcode-density\n-Enable code density instructions for ARC EM, default on for ARC HS.\n+Enable code density instructions for ARC EM.  \n+This option is on by default for ARC HS.\n \n @item -mll64\n @opindex mll64\n@@ -14409,130 +14400,132 @@ Specify thread pointer register number.\n \n @item -mmpy-option=@var{multo}\n @opindex mmpy-option\n-Compile ARCv2 code with a multiplier design option.  @samp{wlh1} is\n-the default value.  The recognized values for @var{multo} are:\n+Compile ARCv2 code with a multiplier design option.  You can specify \n+the option using either a string or numeric value for @var{multo}.  \n+@samp{wlh1} is the default value.  The recognized values are:\n \n @table @samp\n @item 0\n+@itemx none\n No multiplier available.\n \n @item 1\n-@opindex w\n-The multiply option is set to w: 16x16 multiplier, fully pipelined.\n-The following instructions are enabled: MPYW, and MPYUW.\n+@itemx w\n+16x16 multiplier, fully pipelined.\n+The following instructions are enabled: @code{mpyw} and @code{mpyuw}.\n \n @item 2\n-@opindex wlh1\n-The multiply option is set to wlh1: 32x32 multiplier, fully\n+@itemx wlh1\n+32x32 multiplier, fully\n pipelined (1 stage).  The following instructions are additionally\n-enabled: MPY, MPYU, MPYM, MPYMU, and MPY_S.\n+enabled: @code{mpy}, @code{mpyu}, @code{mpym}, @code{mpymu}, and @code{mpy_s}.\n \n @item 3\n-@opindex wlh2\n-The multiply option is set to wlh2: 32x32 multiplier, fully pipelined\n-(2 stages).  The following instructions are additionally enabled: MPY,\n-MPYU, MPYM, MPYMU, and MPY_S.\n+@itemx wlh2\n+32x32 multiplier, fully pipelined\n+(2 stages).  The following instructions are additionally enabled: @code{mpy},\n+@code{mpyu}, @code{mpym}, @code{mpymu}, and @code{mpy_s}.\n \n @item 4\n-@opindex wlh3\n-The multiply option is set to wlh3: Two 16x16 multiplier, blocking,\n-sequential.  The following instructions are additionally enabled: MPY,\n-MPYU, MPYM, MPYMU, and MPY_S.\n+@itemx wlh3\n+Two 16x16 multipliers, blocking,\n+sequential.  The following instructions are additionally enabled: @code{mpy},\n+@code{mpyu}, @code{mpym}, @code{mpymu}, and @code{mpy_s}.\n \n @item 5\n-@opindex wlh4\n-The multiply option is set to wlh4: One 16x16 multiplier, blocking,\n-sequential.  The following instructions are additionally enabled: MPY,\n-MPYU, MPYM, MPYMU, and MPY_S.\n+@itemx wlh4\n+One 16x16 multiplier, blocking,\n+sequential.  The following instructions are additionally enabled: @code{mpy},\n+@code{mpyu}, @code{mpym}, @code{mpymu}, and @code{mpy_s}.\n \n @item 6\n-@opindex wlh5\n-The multiply option is set to wlh5: One 32x4 multiplier, blocking,\n-sequential.  The following instructions are additionally enabled: MPY,\n-MPYU, MPYM, MPYMU, and MPY_S.\n+@itemx wlh5\n+One 32x4 multiplier, blocking,\n+sequential.  The following instructions are additionally enabled: @code{mpy},\n+@code{mpyu}, @code{mpym}, @code{mpymu}, and @code{mpy_s}.\n+\n+@item 7\n+@itemx plus_dmpy\n+ARC HS SIMD support.\n+\n+@item 8\n+@itemx plus_macd\n+ARC HS SIMD support.\n+\n+@item 9\n+@itemx plus_qmacw\n+ARC HS SIMD support.\n \n @end table\n \n This option is only available for ARCv2 cores@.\n \n @item -mfpu=@var{fpu}\n @opindex mfpu\n-Enables specific floating-point hardware extension for ARCv2\n-core.  Supported values for @var{fpu} are:\n+Enables support for specific floating-point hardware extensions for ARCv2\n+cores.  Supported values for @var{fpu} are:\n \n @table @samp\n \n @item fpus\n-@opindex fpus\n-Enables support for single precision floating point hardware\n+Enables support for single-precision floating-point hardware\n extensions@.\n \n @item fpud\n-@opindex fpud\n-Enables support for double precision floating point hardware\n-extensions.  The single precision floating point extension is also\n+Enables support for double-precision floating-point hardware\n+extensions.  The single-precision floating-point extension is also\n enabled.  Not available for ARC EM@.\n \n @item fpuda\n-@opindex fpuda\n-Enables support for double precision floating point hardware\n-extensions using double precision assist instructions.  The single\n-precision floating point extension is also enabled.  This option is\n+Enables support for double-precision floating-point hardware\n+extensions using double-precision assist instructions.  The single-precision\n+floating-point extension is also enabled.  This option is\n only available for ARC EM@.\n \n @item fpuda_div\n-@opindex fpuda_div\n-Enables support for double precision floating point hardware\n-extensions using double precision assist instructions, and simple\n-precision square-root and divide hardware extensions.  The single\n-precision floating point extension is also enabled.  This option is\n+Enables support for double-precision floating-point hardware\n+extensions using double-precision assist instructions.\n+The single-precision floating-point, square-root, and divide \n+extensions are also enabled.  This option is\n only available for ARC EM@.\n \n @item fpuda_fma\n-@opindex fpuda_fma\n-Enables support for double precision floating point hardware\n-extensions using double precision assist instructions, and simple\n-precision fused multiple and add hardware extension.  The single\n-precision floating point extension is also enabled.  This option is\n+Enables support for double-precision floating-point hardware\n+extensions using double-precision assist instructions.\n+The single-precision floating-point and fused multiply and add \n+hardware extensions are also enabled.  This option is\n only available for ARC EM@.\n \n @item fpuda_all\n-@opindex fpuda_all\n-Enables support for double precision floating point hardware\n-extensions using double precision assist instructions, and all simple\n-precision hardware extensions.  The single precision floating point\n-extension is also enabled.  This option is only available for ARC EM@.\n+Enables support for double-precision floating-point hardware\n+extensions using double-precision assist instructions.\n+All single-precision floating-point hardware extensions are also\n+enabled.  This option is only available for ARC EM@.\n \n @item fpus_div\n-@opindex fpus_div\n-Enables support for single precision floating point, and single\n-precision square-root and divide hardware extensions@.\n+Enables support for single-precision floating-point, square-root and divide \n+hardware extensions@.\n \n @item fpud_div\n-@opindex fpud_div\n-Enables support for double precision floating point, and double\n-precision square-root and divide hardware extensions.  This option\n+Enables support for double-precision floating-point, square-root and divide \n+hardware extensions.  This option\n includes option @samp{fpus_div}. Not available for ARC EM@.\n \n @item fpus_fma\n-@opindex fpus_fma\n-Enables support for single precision floating point, and single\n-precision fused multiple and add hardware extensions@.\n+Enables support for single-precision floating-point and \n+fused multiply and add hardware extensions@.\n \n @item fpud_fma\n-@opindex fpud_fma\n-Enables support for double precision floating point, and double\n-precision fused multiple and add hardware extensions.  This option\n+Enables support for double-precision floating-point and \n+fused multiply and add hardware extensions.  This option\n includes option @samp{fpus_fma}.  Not available for ARC EM@.\n \n @item fpus_all\n-@opindex fpus_all\n-Enables support for all single precision floating point hardware\n+Enables support for all single-precision floating-point hardware\n extensions@.\n \n @item fpud_all\n-@opindex fpud_all\n-Enables support for all single and double precision floating point\n+Enables support for all single- and double-precision floating-point\n hardware extensions.  Not available for ARC EM@.\n \n @end table\n@@ -14553,15 +14546,15 @@ deprecated.\n \n @item -mdvbf\n @opindex mdvbf\n-Passed down to the assembler to enable the dual viterbi butterfly\n+Passed down to the assembler to enable the dual Viterbi butterfly\n extension.  Also sets the preprocessor symbol @code{__Xdvbf}.  This\n option is deprecated.\n \n @c ARC700 4.10 extension instruction\n @item -mlock\n @opindex mlock\n-Passed down to the assembler to enable the Locked Load/Store\n-Conditional extension.  Also sets the preprocessor symbol\n+Passed down to the assembler to enable the locked load/store\n+conditional extension.  Also sets the preprocessor symbol\n @code{__Xlock}.\n \n @item -mmac-d16\n@@ -14577,7 +14570,7 @@ Passed down to the assembler.  Also sets the preprocessor symbol\n @c ARC700 4.10 extension instruction\n @item -mrtsc\n @opindex mrtsc\n-Passed down to the assembler to enable the 64-bit Time-Stamp Counter\n+Passed down to the assembler to enable the 64-bit time-stamp counter\n extension instruction.  Also sets the preprocessor symbol\n @code{__Xrtsc}.  This option is deprecated.\n \n@@ -14590,13 +14583,13 @@ extension instruction.  Also sets the preprocessor symbol\n \n @item -mtelephony\n @opindex mtelephony\n-Passed down to the assembler to enable dual and single operand\n+Passed down to the assembler to enable dual- and single-operand\n instructions for telephony.  Also sets the preprocessor symbol\n @code{__Xtelephony}.  This option is deprecated.\n \n @item -mxy\n @opindex mxy\n-Passed down to the assembler to enable the XY Memory extension.  Also\n+Passed down to the assembler to enable the XY memory extension.  Also\n sets the preprocessor symbol @code{__Xxy}.\n \n @end table\n@@ -14642,12 +14635,12 @@ The following options control the semantics of generated code:\n @table @gcctabopt\n @item -mlong-calls\n @opindex mlong-calls\n-Generate call insns as register indirect calls, thus providing access\n+Generate calls as register indirect calls, thus providing access\n to the full 32-bit address range.\n \n @item -mmedium-calls\n @opindex mmedium-calls\n-Don't use less than 25 bit addressing range for calls, which is the\n+Don't use less than 25-bit addressing range for calls, which is the\n offset available for an unconditional branch-and-link\n instruction.  Conditional execution of function calls is suppressed, to\n allow use of the 25-bit range, rather than the 21-bit range with\n@@ -14689,27 +14682,30 @@ Enable bbit peephole2.\n @item -mno-brcc\n @opindex mno-brcc\n This option disables a target-specific pass in @file{arc_reorg} to\n-generate @code{BRcc} instructions.  It has no effect on @code{BRcc}\n-generation driven by the combiner pass.\n+generate compare-and-branch (@code{br@var{cc}}) instructions.  \n+It has no effect on\n+generation of these instructions driven by the combiner pass.\n \n @item -mcase-vector-pcrel\n @opindex mcase-vector-pcrel\n-Use pc-relative switch case tables - this enables case table shortening.\n+Use PC-relative switch case tables to enable case table shortening.\n This is the default for @option{-Os}.\n \n @item -mcompact-casesi\n @opindex mcompact-casesi\n-Enable compact casesi pattern.  This is the default for @option{-Os},\n+Enable compact @code{casesi} pattern.  This is the default for @option{-Os},\n and only available for ARCv1 cores.\n \n @item -mno-cond-exec\n @opindex mno-cond-exec\n-Disable ARCompact specific pass to generate conditional execution instructions.\n+Disable the ARCompact-specific pass to generate conditional \n+execution instructions.\n+\n Due to delay slot scheduling and interactions between operand numbers,\n literal sizes, instruction lengths, and the support for conditional execution,\n the target-independent pass to generate conditional execution is often lacking,\n so the ARC port has kept a special pass around that tries to find more\n-conditional execution generating opportunities after register allocation,\n+conditional execution generation opportunities after register allocation,\n branch shortening, and delay slot scheduling have been done.  This pass\n generally, but not always, improves performance and code size, at the cost of\n extra compilation time, which is why there is an option to switch it off.\n@@ -14719,11 +14715,11 @@ offset range because they are conditionalized, you should consider using\n \n @item -mearly-cbranchsi\n @opindex mearly-cbranchsi\n-Enable pre-reload use of the cbranchsi pattern.\n+Enable pre-reload use of the @code{cbranchsi} pattern.\n \n @item -mexpand-adddi\n @opindex mexpand-adddi\n-Expand @code{adddi3} and @code{subdi3} at rtl generation time into\n+Expand @code{adddi3} and @code{subdi3} at RTL generation time into\n @code{add.f}, @code{adc} etc.\n \n @item -mindexed-loads\n@@ -14767,17 +14763,19 @@ while increasing the instruction count.\n \n @item -mq-class\n @opindex mq-class\n-Enable 'q' instruction alternatives.\n+Enable @samp{q} instruction alternatives.\n This is the default for @option{-Os}.\n \n @item -mRcq\n @opindex mRcq\n-Enable Rcq constraint handling - most short code generation depends on this.\n+Enable @samp{Rcq} constraint handling.  \n+Most short code generation depends on this.\n This is the default.\n \n @item -mRcw\n @opindex mRcw\n-Enable Rcw constraint handling - ccfsm condexec mostly depends on this.\n+Enable @samp{Rcw} constraint handling.  \n+Most ccfsm condexec mostly depends on this.\n This is the default.\n \n @item -msize-level=@var{level}\n@@ -14811,22 +14809,22 @@ Supported values for @var{cpu} are\n \n @table @samp\n @item ARC600\n-Tune for ARC600 cpu.\n+Tune for ARC600 CPU.\n \n @item ARC601\n-Tune for ARC601 cpu.\n+Tune for ARC601 CPU.\n \n @item ARC700\n-Tune for ARC700 cpu with standard multiplier block.\n+Tune for ARC700 CPU with standard multiplier block.\n \n @item ARC700-xmac\n-Tune for ARC700 cpu with XMAC block.\n+Tune for ARC700 CPU with XMAC block.\n \n @item ARC725D\n-Tune for ARC725D cpu.\n+Tune for ARC725D CPU.\n \n @item ARC750D\n-Tune for ARC750D cpu.\n+Tune for ARC750D CPU.\n \n @end table\n \n@@ -14860,19 +14858,19 @@ Obsolete FPX.\n @opindex mbig-endian\n @itemx -EB\n @opindex EB\n-Compile code for big endian targets.  Use of these options is now\n-deprecated.  Users wanting big-endian code, should use the\n-@w{@code{arceb-elf32}} and @w{@code{arceb-linux-uclibc}} targets when\n-building the tool chain, for which big-endian is the default.\n+Compile code for big-endian targets.  Use of these options is now\n+deprecated.  Big-endian code is supported by configuring GCC to build\n+@w{@code{arceb-elf32}} and @w{@code{arceb-linux-uclibc}} targets,\n+for which big endian is the default.\n \n @item -mlittle-endian\n @opindex mlittle-endian\n @itemx -EL\n @opindex EL\n-Compile code for little endian targets.  Use of these options is now\n-deprecated.  Users wanting little-endian code should use the\n-@w{@code{arc-elf32}} and @w{@code{arc-linux-uclibc}} targets when\n-building the tool chain, for which little-endian is the default.\n+Compile code for little-endian targets.  Use of these options is now\n+deprecated.  Little-endian code is supported by configuring GCC to build \n+@w{@code{arc-elf32}} and @w{@code{arc-linux-uclibc}} targets,\n+for which little endian is the default.\n \n @item -mbarrel_shifter\n @opindex mbarrel_shifter\n@@ -14914,7 +14912,7 @@ Replaced by @option{-mspfp-fast}.\n @opindex mtune\n Values @samp{arc600}, @samp{arc601}, @samp{arc700} and\n @samp{arc700-xmac} for @var{cpu} are replaced by @samp{ARC600},\n-@samp{ARC601}, @samp{ARC700} and @samp{ARC700-xmac} respectively\n+@samp{ARC601}, @samp{ARC700} and @samp{ARC700-xmac} respectively.\n \n @item -multcost=@var{num}\n @opindex multcost"}]}