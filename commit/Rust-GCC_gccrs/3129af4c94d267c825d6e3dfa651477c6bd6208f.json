{"sha": "3129af4c94d267c825d6e3dfa651477c6bd6208f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEyOWFmNGM5NGQyNjdjODI1ZDZlM2RmYTY1MTQ3N2M2YmQ2MjA4Zg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2002-07-03T21:00:23Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2002-07-03T21:00:23Z"}, "message": "combine.c (struct_undo): Change types of recorded substitutions to be either \"int\" or \"rtx\"...\n\n\n\t* combine.c (struct_undo): Change types of recorded substitutions\n\tto be either \"int\" or \"rtx\", instead of \"unsigned int\" and \"rtx\".\n\t(do_SUBST_INT): Change types of the substitution from unsigned int\n\tto int, to avoid compilation warning from SUBST_INT's only caller.\n\n\t(make_extraction): Add cast to avoid compilation warning.\n\t(force_to_mode): Remove cast to avoid compilation warning.\n\nFrom-SVN: r55221", "tree": {"sha": "bed15451c157820985b41f07f0c788e0a6ecba32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bed15451c157820985b41f07f0c788e0a6ecba32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3129af4c94d267c825d6e3dfa651477c6bd6208f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3129af4c94d267c825d6e3dfa651477c6bd6208f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3129af4c94d267c825d6e3dfa651477c6bd6208f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3129af4c94d267c825d6e3dfa651477c6bd6208f/comments", "author": null, "committer": null, "parents": [{"sha": "fcad420e8ff702f5c03de5ce8017f5d471bba0c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcad420e8ff702f5c03de5ce8017f5d471bba0c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcad420e8ff702f5c03de5ce8017f5d471bba0c2"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "6f8b48be9458fcfbbb471dc186222aab0188bc72", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3129af4c94d267c825d6e3dfa651477c6bd6208f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3129af4c94d267c825d6e3dfa651477c6bd6208f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3129af4c94d267c825d6e3dfa651477c6bd6208f", "patch": "@@ -1,3 +1,13 @@\n+2002-07-03  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* combine.c (struct_undo): Change types of recorded substitutions\n+\tto be either \"int\" or \"rtx\", instead of \"unsigned int\" and \"rtx\".\n+\t(do_SUBST_INT): Change types of the substitution from unsigned int\n+\tto int, to avoid compilation warning from SUBST_INT's only caller.\n+\n+\t(make_extraction): Add cast to avoid compilation warning.\n+\t(force_to_mode): Remove cast to avoid compilation warning.\n+\n 2002-07-03  Eric Botcazou  <ebotcazou@multimania.com>\n \t    Jeff Law  <law@redhat.com>\n "}, {"sha": "70ca44582b9e21046fb0d094e45689c1dd01815c", "filename": "gcc/combine.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3129af4c94d267c825d6e3dfa651477c6bd6208f/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3129af4c94d267c825d6e3dfa651477c6bd6208f/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=3129af4c94d267c825d6e3dfa651477c6bd6208f", "patch": "@@ -314,8 +314,8 @@ struct undo\n {\n   struct undo *next;\n   int is_int;\n-  union {rtx r; unsigned int i;} old_contents;\n-  union {rtx *r; unsigned int *i;} where;\n+  union {rtx r; int i;} old_contents;\n+  union {rtx *r; int *i;} where;\n };\n \n /* Record a bunch of changes to be undone, up to MAX_UNDO of them.\n@@ -339,8 +339,7 @@ static struct undobuf undobuf;\n static int n_occurrences;\n \n static void do_SUBST\t\t\tPARAMS ((rtx *, rtx));\n-static void do_SUBST_INT\t\tPARAMS ((unsigned int *,\n-\t\t\t\t\t\t unsigned int));\n+static void do_SUBST_INT\t\tPARAMS ((int *, int));\n static void init_reg_last_arrays\tPARAMS ((void));\n static void setup_incoming_promotions   PARAMS ((void));\n static void set_nonzero_bits_and_sign_copies  PARAMS ((rtx, rtx, void *));\n@@ -472,10 +471,10 @@ do_SUBST (into, newval)\n \n static void\n do_SUBST_INT (into, newval)\n-     unsigned int *into, newval;\n+     int *into, newval;\n {\n   struct undo *buf;\n-  unsigned int oldval = *into;\n+  int oldval = *into;\n \n   if (oldval == newval)\n     return;\n@@ -5971,7 +5970,7 @@ make_extraction (mode, inner, pos, pos_rtx, len,\n   else if (GET_CODE (inner) == ASHIFT\n \t   && GET_CODE (XEXP (inner, 1)) == CONST_INT\n \t   && pos_rtx == 0 && pos == 0\n-\t   && len > INTVAL (XEXP (inner, 1)))\n+\t   && len > (unsigned HOST_WIDE_INT) INTVAL (XEXP (inner, 1)))\n     {\n       /* We're extracting the least significant bits of an rtx\n \t (ashift X (const_int C)), where LEN > C.  Extract the\n@@ -6814,7 +6813,7 @@ force_to_mode (x, mode, mask, reg, just_select)\n \n \t  if (GET_CODE (x) == AND && GET_CODE (XEXP (x, 1)) == CONST_INT\n \t      && ((INTVAL (XEXP (x, 1)) & GET_MODE_MASK (GET_MODE (x)))\n-\t\t  == (HOST_WIDE_INT) mask))\n+\t\t  == mask))\n \t    x = XEXP (x, 0);\n \n \t  /* If it remains an AND, try making another AND with the bits"}]}