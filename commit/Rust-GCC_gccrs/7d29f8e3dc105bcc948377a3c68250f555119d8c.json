{"sha": "7d29f8e3dc105bcc948377a3c68250f555119d8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QyOWY4ZTNkYzEwNWJjYzk0ODM3N2EzYzY4MjUwZjU1NTExOWQ4Yw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-11-03T15:24:22Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-11-03T15:24:22Z"}, "message": "Make direct emission of time profiler counter\n\n\t* libgcov-profiler.c (__gcov_time_profiler): Remove.\n\t(__gcov_time_profiler_atomic): Likewise.\n\t* profile.c (instrument_values): Fix coding style.\n\t(branch_prob): Use renamed function.\n\t* tree-profile.c (init_ic_make_global_vars): Likewise.\n\t(gimple_init_edge_profiler): Rename to\n\tgimple_init_gcov_profiler.\n\ttree_time_profiler_counter variable declaration.\n\t(gimple_gen_time_profiler): Rewrite to do a direct gimple code\n\temission.\n\t* value-prof.h: Remove an argument.\n\t* gcc.dg/no_profile_instrument_function-attr-1.c: Update scanned\n\toutput.\n\t* gcc.dg/tree-prof/time-profiler-3.c: New test.\n\nFrom-SVN: r241821", "tree": {"sha": "c52598610873862306ffb6e9daafae7f170aa0f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c52598610873862306ffb6e9daafae7f170aa0f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d29f8e3dc105bcc948377a3c68250f555119d8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d29f8e3dc105bcc948377a3c68250f555119d8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d29f8e3dc105bcc948377a3c68250f555119d8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d29f8e3dc105bcc948377a3c68250f555119d8c/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5de3e2d862e02f7b0c8efe8fbec2c15592302ba9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5de3e2d862e02f7b0c8efe8fbec2c15592302ba9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5de3e2d862e02f7b0c8efe8fbec2c15592302ba9"}], "stats": {"total": 195, "additions": 134, "deletions": 61}, "files": [{"sha": "3a63255668009675d9ea5dbed5a44b8f4465f2da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d29f8e3dc105bcc948377a3c68250f555119d8c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d29f8e3dc105bcc948377a3c68250f555119d8c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d29f8e3dc105bcc948377a3c68250f555119d8c", "patch": "@@ -1,3 +1,15 @@\n+2016-11-03  Martin Liska  <mliska@suse.cz>\n+\n+\t* profile.c (instrument_values): Fix coding style.\n+\t(branch_prob): Use renamed function.\n+\t* tree-profile.c (init_ic_make_global_vars): Likewise.\n+\t(gimple_init_edge_profiler): Rename to\n+\tgimple_init_gcov_profiler.\n+\ttree_time_profiler_counter variable declaration.\n+\t(gimple_gen_time_profiler): Rewrite to do a direct gimple code\n+\temission.\n+\t* value-prof.h: Remove an argument.\n+\n 2016-11-03  Richard Biener  <rguenther@suse.de>\n \n \t* config/rs6000/rs6000.c (rs6000_xcoff_declare_object_name): Use"}, {"sha": "ef38f988a3414e40b064e2866f1201a54b854f50", "filename": "gcc/profile.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d29f8e3dc105bcc948377a3c68250f555119d8c/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d29f8e3dc105bcc948377a3c68250f555119d8c/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=7d29f8e3dc105bcc948377a3c68250f555119d8c", "patch": "@@ -192,15 +192,9 @@ instrument_values (histogram_values values)\n \t  gimple_gen_ior_profiler (hist, t, 0);\n \t  break;\n \n-  case HIST_TYPE_TIME_PROFILE:\n-    {\n-      basic_block bb =\n-     split_edge (single_succ_edge (ENTRY_BLOCK_PTR_FOR_FN (cfun)));\n-      gimple_stmt_iterator gsi = gsi_start_bb (bb);\n-\n-      gimple_gen_time_profiler (t, 0, gsi);\n-      break;\n-    }\n+\tcase HIST_TYPE_TIME_PROFILE:\n+\t  gimple_gen_time_profiler (t, 0);\n+\t  break;\n \n \tdefault:\n \t  gcc_unreachable ();\n@@ -1305,7 +1299,7 @@ branch_prob (void)\n     {\n       unsigned n_instrumented;\n \n-      gimple_init_edge_profiler ();\n+      gimple_init_gcov_profiler ();\n \n       n_instrumented = instrument_edges (el);\n "}, {"sha": "5a0467fadaa735061a96395d0dd6af1760aa9530", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d29f8e3dc105bcc948377a3c68250f555119d8c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d29f8e3dc105bcc948377a3c68250f555119d8c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d29f8e3dc105bcc948377a3c68250f555119d8c", "patch": "@@ -1,3 +1,9 @@\n+2016-11-03  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/no_profile_instrument_function-attr-1.c: Update scanned\n+\toutput.\n+\t* gcc.dg/tree-prof/time-profiler-3.c: New test.\n+\n 2016-11-03  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR libgcc/78067"}, {"sha": "e0c2600b400c8612062fb0a18f3646d64e2e64a9", "filename": "gcc/testsuite/gcc.dg/no_profile_instrument_function-attr-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d29f8e3dc105bcc948377a3c68250f555119d8c/gcc%2Ftestsuite%2Fgcc.dg%2Fno_profile_instrument_function-attr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d29f8e3dc105bcc948377a3c68250f555119d8c/gcc%2Ftestsuite%2Fgcc.dg%2Fno_profile_instrument_function-attr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fno_profile_instrument_function-attr-1.c?ref=7d29f8e3dc105bcc948377a3c68250f555119d8c", "patch": "@@ -19,5 +19,5 @@ int main ()\n \n /* { dg-final { scan-tree-dump-times \"__gcov0\\\\.main.* = PROF_edge_counter\" 1 \"optimized\"} } */\n /* { dg-final { scan-tree-dump-times \"__gcov_indirect_call_profiler_v2\" 1 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-times \"__gcov_time_profiler\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__gcov_time_profiler_counter = \" 1 \"optimized\" } } */\n /* { dg-final { scan-tree-dump-times \"__gcov_init\" 1 \"optimized\" } } */"}, {"sha": "69ce026082851cfea723c80be463517e9f93498a", "filename": "gcc/testsuite/gcc.dg/tree-prof/time-profiler-3.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d29f8e3dc105bcc948377a3c68250f555119d8c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Ftime-profiler-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d29f8e3dc105bcc948377a3c68250f555119d8c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Ftime-profiler-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Ftime-profiler-3.c?ref=7d29f8e3dc105bcc948377a3c68250f555119d8c", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-options \"-O2 -fdump-ipa-profile -fprofile-update=atomic\" } */\n+/* { dg-require-effective-target profile_update_atomic } */\n+\n+__attribute__ ((noinline))\n+int foo()\n+{\n+  return 0;\n+}\n+\n+__attribute__ ((noinline))\n+int bar()\n+{\n+  return 1;\n+}\n+\n+int main ()\n+{\n+  return foo ();\n+}\n+/* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Read tp_first_run: 0\" 1 \"profile\"} } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Read tp_first_run: 1\" 1 \"profile\"} } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Read tp_first_run: 2\" 1 \"profile\"} } */"}, {"sha": "09a702f8bb0d2738cb9b5e0ea71e9e44506f5bae", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 81, "deletions": 25, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d29f8e3dc105bcc948377a3c68250f555119d8c/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d29f8e3dc105bcc948377a3c68250f555119d8c/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=7d29f8e3dc105bcc948377a3c68250f555119d8c", "patch": "@@ -56,9 +56,9 @@ static GTY(()) tree tree_interval_profiler_fn;\n static GTY(()) tree tree_pow2_profiler_fn;\n static GTY(()) tree tree_one_value_profiler_fn;\n static GTY(()) tree tree_indirect_call_profiler_fn;\n-static GTY(()) tree tree_time_profiler_fn;\n static GTY(()) tree tree_average_profiler_fn;\n static GTY(()) tree tree_ior_profiler_fn;\n+static GTY(()) tree tree_time_profiler_counter;\n \n \n static GTY(()) tree ic_void_ptr_var;\n@@ -75,7 +75,7 @@ static GTY(()) tree ptr_void;\n static void\n init_ic_make_global_vars (void)\n {\n-  tree  gcov_type_ptr;\n+  tree gcov_type_ptr;\n \n   ptr_void = build_pointer_type (void_type_node);\n \n@@ -119,15 +119,14 @@ init_ic_make_global_vars (void)\n /* Create the type and function decls for the interface with gcov.  */\n \n void\n-gimple_init_edge_profiler (void)\n+gimple_init_gcov_profiler (void)\n {\n   tree interval_profiler_fn_type;\n   tree pow2_profiler_fn_type;\n   tree one_value_profiler_fn_type;\n   tree gcov_type_ptr;\n   tree ic_profiler_fn_type;\n   tree average_profiler_fn_type;\n-  tree time_profiler_fn_type;\n   const char *profiler_fn_name;\n   const char *fn_name;\n \n@@ -201,17 +200,17 @@ gimple_init_edge_profiler (void)\n \t= tree_cons (get_identifier (\"leaf\"), NULL,\n \t\t     DECL_ATTRIBUTES (tree_indirect_call_profiler_fn));\n \n-      /* void (*) (gcov_type *, gcov_type, void *)  */\n-      time_profiler_fn_type\n-\t       = build_function_type_list (void_type_node,\n-\t\t\t\t\t  gcov_type_ptr, NULL_TREE);\n-      fn_name = concat (\"__gcov_time_profiler\", fn_suffix, NULL);\n-      tree_time_profiler_fn = build_fn_decl (fn_name, time_profiler_fn_type);\n-      free (CONST_CAST (char *, fn_name));\n-      TREE_NOTHROW (tree_time_profiler_fn) = 1;\n-      DECL_ATTRIBUTES (tree_time_profiler_fn)\n-\t= tree_cons (get_identifier (\"leaf\"), NULL,\n-\t\t     DECL_ATTRIBUTES (tree_time_profiler_fn));\n+      tree_time_profiler_counter\n+\t= build_decl (UNKNOWN_LOCATION, VAR_DECL,\n+\t\t      get_identifier (\"__gcov_time_profiler_counter\"),\n+\t\t      get_gcov_type ());\n+      TREE_PUBLIC (tree_time_profiler_counter) = 1;\n+      DECL_EXTERNAL (tree_time_profiler_counter) = 1;\n+      TREE_STATIC (tree_time_profiler_counter) = 1;\n+      DECL_ARTIFICIAL (tree_time_profiler_counter) = 1;\n+      DECL_INITIAL (tree_time_profiler_counter) = NULL;\n+\n+      varpool_node::finalize_decl (tree_time_profiler_counter);\n \n       /* void (*) (gcov_type *, gcov_type)  */\n       average_profiler_fn_type\n@@ -239,7 +238,6 @@ gimple_init_edge_profiler (void)\n       DECL_ASSEMBLER_NAME (tree_pow2_profiler_fn);\n       DECL_ASSEMBLER_NAME (tree_one_value_profiler_fn);\n       DECL_ASSEMBLER_NAME (tree_indirect_call_profiler_fn);\n-      DECL_ASSEMBLER_NAME (tree_time_profiler_fn);\n       DECL_ASSEMBLER_NAME (tree_average_profiler_fn);\n       DECL_ASSEMBLER_NAME (tree_ior_profiler_fn);\n     }\n@@ -426,7 +424,7 @@ gimple_gen_ic_func_profiler (void)\n   if (c_node->only_called_directly_p ())\n     return;\n \n-  gimple_init_edge_profiler ();\n+  gimple_init_gcov_profiler ();\n \n   /* Insert code:\n \n@@ -460,16 +458,74 @@ gimple_gen_ic_func_profiler (void)\n    counter position and GSI is the iterator we place the counter.  */\n \n void\n-gimple_gen_time_profiler (unsigned tag, unsigned base,\n-                          gimple_stmt_iterator &gsi)\n+gimple_gen_time_profiler (unsigned tag, unsigned base)\n {\n-  tree ref_ptr = tree_coverage_counter_addr (tag, base);\n-  gcall *call;\n+  tree type = get_gcov_type ();\n+  basic_block cond_bb\n+    = split_edge (single_succ_edge (ENTRY_BLOCK_PTR_FOR_FN (cfun)));\n+\n+  basic_block update_bb = split_edge (single_succ_edge (cond_bb));\n+\n+  edge true_edge = single_succ_edge (cond_bb);\n+  true_edge->flags = EDGE_TRUE_VALUE;\n+  true_edge->probability = PROB_VERY_UNLIKELY;\n+  edge e\n+    = make_edge (cond_bb, single_succ_edge (update_bb)->dest, EDGE_FALSE_VALUE);\n+  e->probability = REG_BR_PROB_BASE - true_edge->probability;\n+\n+  gimple_stmt_iterator gsi = gsi_start_bb (cond_bb);\n+  tree original_ref = tree_coverage_counter_ref (tag, base);\n+  tree ref = force_gimple_operand_gsi (&gsi, original_ref, true, NULL_TREE,\n+\t\t\t\t       true, GSI_SAME_STMT);\n+  tree one = build_int_cst (type, 1);\n \n-  ref_ptr = force_gimple_operand_gsi (&gsi, ref_ptr,\n-\t\t\t\t      true, NULL_TREE, true, GSI_SAME_STMT);\n-  call = gimple_build_call (tree_time_profiler_fn, 1, ref_ptr);\n-  gsi_insert_before (&gsi, call, GSI_NEW_STMT);\n+  /* Emit: if (counters[0] != 0).  */\n+  gcond *cond = gimple_build_cond (EQ_EXPR, ref, build_int_cst (type, 0),\n+\t\t\t\t   NULL, NULL);\n+  gsi_insert_before (&gsi, cond, GSI_NEW_STMT);\n+\n+  gsi = gsi_start_bb (update_bb);\n+\n+  /* Emit: counters[0] = ++__gcov_time_profiler_counter.  */\n+  if (flag_profile_update == PROFILE_UPDATE_ATOMIC)\n+    {\n+      tree ptr = make_temp_ssa_name (type, NULL, \"time_profiler_counter_ptr\");\n+      tree addr = build1 (ADDR_EXPR, build_pointer_type (type),\n+\t\t\t  tree_time_profiler_counter);\n+      gassign *assign = gimple_build_assign (ptr, NOP_EXPR, addr);\n+      gsi_insert_before (&gsi, assign, GSI_NEW_STMT);\n+      tree f = builtin_decl_explicit (LONG_LONG_TYPE_SIZE > 32\n+\t\t\t\t      ? BUILT_IN_ATOMIC_ADD_FETCH_8:\n+\t\t\t\t      BUILT_IN_ATOMIC_ADD_FETCH_4);\n+      gcall *stmt = gimple_build_call (f, 3, ptr, one,\n+\t\t\t\t       build_int_cst (integer_type_node,\n+\t\t\t\t\t\t      MEMMODEL_RELAXED));\n+      tree result_type = TREE_TYPE (TREE_TYPE (f));\n+      tree tmp = make_temp_ssa_name (result_type, NULL, \"time_profile\");\n+      gimple_set_lhs (stmt, tmp);\n+      gsi_insert_after (&gsi, stmt, GSI_NEW_STMT);\n+      tmp = make_temp_ssa_name (type, NULL, \"time_profile\");\n+      assign = gimple_build_assign (tmp, NOP_EXPR,\n+\t\t\t\t    gimple_call_lhs (stmt));\n+      gsi_insert_after (&gsi, assign, GSI_NEW_STMT);\n+      assign = gimple_build_assign (original_ref, tmp);\n+      gsi_insert_after (&gsi, assign, GSI_NEW_STMT);\n+    }\n+  else\n+    {\n+      tree tmp = make_temp_ssa_name (type, NULL, \"time_profile\");\n+      gassign *assign = gimple_build_assign (tmp, tree_time_profiler_counter);\n+      gsi_insert_before (&gsi, assign, GSI_NEW_STMT);\n+\n+      tmp = make_temp_ssa_name (type, NULL, \"time_profile\");\n+      assign = gimple_build_assign (tmp, PLUS_EXPR, gimple_assign_lhs (assign),\n+\t\t\t\t    one);\n+      gsi_insert_after (&gsi, assign, GSI_NEW_STMT);\n+      assign = gimple_build_assign (original_ref, tmp);\n+      gsi_insert_after (&gsi, assign, GSI_NEW_STMT);\n+      assign = gimple_build_assign (tree_time_profiler_counter, tmp);\n+      gsi_insert_after (&gsi, assign, GSI_NEW_STMT);\n+    }\n }\n \n /* Output instructions as GIMPLE trees to increment the average histogram"}, {"sha": "02220acb206ea68a5d41e1d4cf2eb728ec69970e", "filename": "gcc/value-prof.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d29f8e3dc105bcc948377a3c68250f555119d8c/gcc%2Fvalue-prof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d29f8e3dc105bcc948377a3c68250f555119d8c/gcc%2Fvalue-prof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.h?ref=7d29f8e3dc105bcc948377a3c68250f555119d8c", "patch": "@@ -96,15 +96,14 @@ bool check_ic_target (gcall *, struct cgraph_node *);\n \n \n /* In tree-profile.c.  */\n-extern void gimple_init_edge_profiler (void);\n+extern void gimple_init_gcov_profiler (void);\n extern void gimple_gen_edge_profiler (int, edge);\n extern void gimple_gen_interval_profiler (histogram_value, unsigned, unsigned);\n extern void gimple_gen_pow2_profiler (histogram_value, unsigned, unsigned);\n extern void gimple_gen_one_value_profiler (histogram_value, unsigned, unsigned);\n extern void gimple_gen_ic_profiler (histogram_value, unsigned, unsigned);\n extern void gimple_gen_ic_func_profiler (void);\n-extern void gimple_gen_time_profiler (unsigned, unsigned,\n-                                      gimple_stmt_iterator &);\n+extern void gimple_gen_time_profiler (unsigned, unsigned);\n extern void gimple_gen_average_profiler (histogram_value, unsigned, unsigned);\n extern void gimple_gen_ior_profiler (histogram_value, unsigned, unsigned);\n extern void stream_out_histogram_value (struct output_block *, histogram_value);"}, {"sha": "e3a81f6b0261249149ba6cf75acb421a6dfdc891", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d29f8e3dc105bcc948377a3c68250f555119d8c/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d29f8e3dc105bcc948377a3c68250f555119d8c/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=7d29f8e3dc105bcc948377a3c68250f555119d8c", "patch": "@@ -1,3 +1,8 @@\n+2016-11-03  Martin Liska  <mliska@suse.cz>\n+\n+\t* libgcov-profiler.c (__gcov_time_profiler): Remove.\n+\t(__gcov_time_profiler_atomic): Likewise.\n+\n 2016-11-03  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR libgcc/78067"}, {"sha": "4f0a40675a26778c39a878b2f4199124f89cb49d", "filename": "libgcc/libgcov-profiler.c", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d29f8e3dc105bcc948377a3c68250f555119d8c/libgcc%2Flibgcov-profiler.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d29f8e3dc105bcc948377a3c68250f555119d8c/libgcc%2Flibgcov-profiler.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-profiler.c?ref=7d29f8e3dc105bcc948377a3c68250f555119d8c", "patch": "@@ -342,30 +342,9 @@ __gcov_indirect_call_profiler_v2 (gcov_type value, void* cur_func)\n #ifdef L_gcov_time_profiler\n \n /* Counter for first visit of each function.  */\n-static gcov_type function_counter;\n+gcov_type __gcov_time_profiler_counter ATTRIBUTE_HIDDEN;\n \n-/* Sets corresponding COUNTERS if there is no value.  */\n-\n-void\n-__gcov_time_profiler (gcov_type* counters)\n-{\n-  if (!counters[0])\n-    counters[0] = ++function_counter;\n-}\n-\n-#if GCOV_SUPPORTS_ATOMIC\n-/* Sets corresponding COUNTERS if there is no value.\n-   Function is thread-safe.  */\n-\n-void\n-__gcov_time_profiler_atomic (gcov_type* counters)\n-{\n-  if (!counters[0])\n-    counters[0] = __atomic_add_fetch (&function_counter, 1, __ATOMIC_RELAXED);\n-}\n #endif\n-#endif\n-\n \n #ifdef L_gcov_average_profiler\n /* Increase corresponding COUNTER by VALUE.  FIXME: Perhaps we want"}]}