{"sha": "a566d0500260adef9bbf1a11a4995cd55602d480", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU2NmQwNTAwMjYwYWRlZjliYmYxYTExYTQ5OTVjZDU1NjAyZDQ4MA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2007-03-07T13:04:15Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2007-03-07T13:04:15Z"}, "message": "libunwind.S: Add .arch/.object_arch for armv4 builds.\n\ngcc:\n2007-03-07  Paul Brook  <paul@codesourcery.com>\n\n\t* config/arm/libunwind.S: Add .arch/.object_arch for armv4 builds.\n\ngcc:\n2007-03-07  Joseph Myers  <joseph@codesourcery.com>\n\n\t* config/arm/unwind-arm.c (struct wmmxd_regs, struct wmmxc_regs):\n\tNew.\n\t(phase1_vrs): Use them.\n\t(DEMAND_SAVE_WMMXD, DEMAND_SAVE_WMMXC): New.\n\t(__gnu_Unwind_Save_WMMXD, __gnu_Unwind_Restore_WMMXD,\n\t__gnu_Unwind_Save_WMMXC, __gnu_Unwind_Restore_WMMXC): Declare.\n\t(restore_non_core_regs): Call __gnu_Unwind_Restore_WMMXD and\n\t__gnu_Unwind_Restore_WMMXC if required.\n\t(_Unwind_VRS_Pop): Implement iWMMXt support.\n\t* config/arm/libunwind.S (gnu_Unwind_Restore_WMMXD,\n\tgnu_Unwind_Save_WMMXD, gnu_Unwind_Restore_WMMXC,\n\tgnu_Unwind_Save_WMMXC): Define.\n\ngcc/testsuite:\n2007-03-07  Joseph Myers  <joseph@codesourcery.com>\n\n\t* g++.dg/eh/arm-iwmmxt-unwind.C: New test.\n\nFrom-SVN: r122658", "tree": {"sha": "519234808030de5a62518b53c312f9e9c19e836a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/519234808030de5a62518b53c312f9e9c19e836a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a566d0500260adef9bbf1a11a4995cd55602d480", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a566d0500260adef9bbf1a11a4995cd55602d480", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a566d0500260adef9bbf1a11a4995cd55602d480", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a566d0500260adef9bbf1a11a4995cd55602d480/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef6727554227774efb21cf1053472f6d419d3ace", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef6727554227774efb21cf1053472f6d419d3ace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef6727554227774efb21cf1053472f6d419d3ace"}], "stats": {"total": 240, "additions": 239, "deletions": 1}, "files": [{"sha": "4f61c9464b92c4055467987b02ed43f3bdca385d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a566d0500260adef9bbf1a11a4995cd55602d480/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a566d0500260adef9bbf1a11a4995cd55602d480/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a566d0500260adef9bbf1a11a4995cd55602d480", "patch": "@@ -1,3 +1,22 @@\n+2007-03-07  Paul Brook  <paul@codesourcery.com>\n+\n+\t* config/arm/libunwind.S: Add .arch/.object_arch for armv4 builds.\n+\n+2007-03-07  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/arm/unwind-arm.c (struct wmmxd_regs, struct wmmxc_regs):\n+\tNew.\n+\t(phase1_vrs): Use them.\n+\t(DEMAND_SAVE_WMMXD, DEMAND_SAVE_WMMXC): New.\n+\t(__gnu_Unwind_Save_WMMXD, __gnu_Unwind_Restore_WMMXD,\n+\t__gnu_Unwind_Save_WMMXC, __gnu_Unwind_Restore_WMMXC): Declare.\n+\t(restore_non_core_regs): Call __gnu_Unwind_Restore_WMMXD and\n+\t__gnu_Unwind_Restore_WMMXC if required.\n+\t(_Unwind_VRS_Pop): Implement iWMMXt support.\n+\t* config/arm/libunwind.S (gnu_Unwind_Restore_WMMXD,\n+\tgnu_Unwind_Save_WMMXD, gnu_Unwind_Restore_WMMXC,\n+\tgnu_Unwind_Save_WMMXC): Define.\n+\n 2007-03-07  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config/vxworks.h (vxworks_override_options): Declare."}, {"sha": "232847104670dbe2e3bbd6911ee59551950b37f0", "filename": "gcc/config/arm/libunwind.S", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a566d0500260adef9bbf1a11a4995cd55602d480/gcc%2Fconfig%2Farm%2Flibunwind.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a566d0500260adef9bbf1a11a4995cd55602d480/gcc%2Fconfig%2Farm%2Flibunwind.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flibunwind.S?ref=a566d0500260adef9bbf1a11a4995cd55602d480", "patch": "@@ -41,6 +41,18 @@\n \tEQUIV SYM (\\name), SYM (__\\name)\n .endm\n \n+#if (__ARM_ARCH__ == 4)\n+/* Some coprocessors require armv5.  We know this code will never be run on\n+   other cpus.  Tell gas to allow armv5, but only mark the objects as armv4.\n+ */\n+.arch armv5t\n+#ifdef __ARM_ARCH_4T__\n+.object_arch armv4t\n+#else\n+.object_arch armv4\n+#endif\n+#endif\n+\n /* r0 points to a 16-word block.  Upload these values to the actual core\n    state.  */\n ARM_FUNC_START restore_core_regs\n@@ -119,6 +131,66 @@ ARM_FUNC_START gnu_Unwind_Save_VFP_D_16_to_31\n \tstcl  p11,cr0,[r0],{0x20} /* vstm r0, {d16-d31} */\n \tRET\n \n+ARM_FUNC_START gnu_Unwind_Restore_WMMXD\n+\t/* Use the generic coprocessor form so that gas doesn't complain\n+\t   on non-iWMMXt targets.  */\n+\tldcl  p1, cr0, [r0], #8 /* wldrd wr0, [r0], #8 */\n+\tldcl  p1, cr1, [r0], #8 /* wldrd wr1, [r0], #8 */\n+\tldcl  p1, cr2, [r0], #8 /* wldrd wr2, [r0], #8 */\n+\tldcl  p1, cr3, [r0], #8 /* wldrd wr3, [r0], #8 */\n+\tldcl  p1, cr4, [r0], #8 /* wldrd wr4, [r0], #8 */\n+\tldcl  p1, cr5, [r0], #8 /* wldrd wr5, [r0], #8 */\n+\tldcl  p1, cr6, [r0], #8 /* wldrd wr6, [r0], #8 */\n+\tldcl  p1, cr7, [r0], #8 /* wldrd wr7, [r0], #8 */\n+\tldcl  p1, cr8, [r0], #8 /* wldrd wr8, [r0], #8 */\n+\tldcl  p1, cr9, [r0], #8 /* wldrd wr9, [r0], #8 */\n+\tldcl  p1, cr10, [r0], #8 /* wldrd wr10, [r0], #8 */\n+\tldcl  p1, cr11, [r0], #8 /* wldrd wr11, [r0], #8 */\n+\tldcl  p1, cr12, [r0], #8 /* wldrd wr12, [r0], #8 */\n+\tldcl  p1, cr13, [r0], #8 /* wldrd wr13, [r0], #8 */\n+\tldcl  p1, cr14, [r0], #8 /* wldrd wr14, [r0], #8 */\n+\tldcl  p1, cr15, [r0], #8 /* wldrd wr15, [r0], #8 */\n+\tRET\n+\n+ARM_FUNC_START gnu_Unwind_Save_WMMXD\n+\t/* Use the generic coprocessor form so that gas doesn't complain\n+\t   on non-iWMMXt targets.  */\n+\tstcl  p1, cr0, [r0], #8 /* wstrd wr0, [r0], #8 */\n+\tstcl  p1, cr1, [r0], #8 /* wstrd wr1, [r0], #8 */\n+\tstcl  p1, cr2, [r0], #8 /* wstrd wr2, [r0], #8 */\n+\tstcl  p1, cr3, [r0], #8 /* wstrd wr3, [r0], #8 */\n+\tstcl  p1, cr4, [r0], #8 /* wstrd wr4, [r0], #8 */\n+\tstcl  p1, cr5, [r0], #8 /* wstrd wr5, [r0], #8 */\n+\tstcl  p1, cr6, [r0], #8 /* wstrd wr6, [r0], #8 */\n+\tstcl  p1, cr7, [r0], #8 /* wstrd wr7, [r0], #8 */\n+\tstcl  p1, cr8, [r0], #8 /* wstrd wr8, [r0], #8 */\n+\tstcl  p1, cr9, [r0], #8 /* wstrd wr9, [r0], #8 */\n+\tstcl  p1, cr10, [r0], #8 /* wstrd wr10, [r0], #8 */\n+\tstcl  p1, cr11, [r0], #8 /* wstrd wr11, [r0], #8 */\n+\tstcl  p1, cr12, [r0], #8 /* wstrd wr12, [r0], #8 */\n+\tstcl  p1, cr13, [r0], #8 /* wstrd wr13, [r0], #8 */\n+\tstcl  p1, cr14, [r0], #8 /* wstrd wr14, [r0], #8 */\n+\tstcl  p1, cr15, [r0], #8 /* wstrd wr15, [r0], #8 */\n+\tRET\n+\n+ARM_FUNC_START gnu_Unwind_Restore_WMMXC\n+\t/* Use the generic coprocessor form so that gas doesn't complain\n+\t   on non-iWMMXt targets.  */\n+\tldc2  p1, cr8, [r0], #4 /* wldrw wcgr0, [r0], #4 */\n+\tldc2  p1, cr9, [r0], #4 /* wldrw wcgr1, [r0], #4 */\n+\tldc2  p1, cr10, [r0], #4 /* wldrw wcgr2, [r0], #4 */\n+\tldc2  p1, cr11, [r0], #4 /* wldrw wcgr3, [r0], #4 */\n+\tRET\n+\n+ARM_FUNC_START gnu_Unwind_Save_WMMXC\n+\t/* Use the generic coprocessor form so that gas doesn't complain\n+\t   on non-iWMMXt targets.  */\n+\tstc2  p1, cr8, [r0], #4 /* wstrw wcgr0, [r0], #4 */\n+\tstc2  p1, cr9, [r0], #4 /* wstrw wcgr1, [r0], #4 */\n+\tstc2  p1, cr10, [r0], #4 /* wstrw wcgr2, [r0], #4 */\n+\tstc2  p1, cr11, [r0], #4 /* wstrw wcgr3, [r0], #4 */\n+\tRET\n+\n /* Wrappers to save core registers, then call the real routine.   */\n \n .macro  UNWIND_WRAPPER name nargs"}, {"sha": "60f61d526f46c3a7c06524f0406851c6ef18426c", "filename": "gcc/config/arm/unwind-arm.c", "status": "modified", "additions": 97, "deletions": 1, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a566d0500260adef9bbf1a11a4995cd55602d480/gcc%2Fconfig%2Farm%2Funwind-arm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a566d0500260adef9bbf1a11a4995cd55602d480/gcc%2Fconfig%2Farm%2Funwind-arm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funwind-arm.c?ref=a566d0500260adef9bbf1a11a4995cd55602d480", "patch": "@@ -91,6 +91,16 @@ struct fpa_regs\n   struct fpa_reg f[8];\n };\n \n+struct wmmxd_regs\n+{\n+  _uw64 wd[16];\n+};\n+\n+struct wmmxc_regs\n+{\n+  _uw wc[4];\n+};\n+\n /* Unwind descriptors.  */\n \n typedef struct\n@@ -123,12 +133,18 @@ typedef struct\n   struct vfp_regs vfp;\n   struct vfpv3_regs vfp_regs_16_to_31;\n   struct fpa_regs fpa;\n+  struct wmmxd_regs wmmxd;\n+  struct wmmxc_regs wmmxc;\n } phase1_vrs;\n \n #define DEMAND_SAVE_VFP 1\t/* VFP state has been saved if not set */\n #define DEMAND_SAVE_VFP_D 2\t/* VFP state is for FLDMD/FSTMD if set */\n #define DEMAND_SAVE_VFP_V3 4    /* VFPv3 state for regs 16 .. 31 has\n                                    been saved if not set */\n+#define DEMAND_SAVE_WMMXD 8\t/* iWMMXt data registers have been\n+\t\t\t\t   saved if not set.  */\n+#define DEMAND_SAVE_WMMXC 16\t/* iWMMXt control registers have been\n+\t\t\t\t   saved if not set.  */\n \n /* This must match the structure created by the assembly wrappers.  */\n typedef struct\n@@ -157,6 +173,10 @@ void __attribute__((noreturn)) restore_core_regs (struct core_regs *);\n /* Routines for FLDMX/FSTMX format...  */\n void __gnu_Unwind_Save_VFP (struct vfp_regs * p);\n void __gnu_Unwind_Restore_VFP (struct vfp_regs * p);\n+void __gnu_Unwind_Save_WMMXD (struct wmmxd_regs * p);\n+void __gnu_Unwind_Restore_WMMXD (struct wmmxd_regs * p);\n+void __gnu_Unwind_Save_WMMXC (struct wmmxc_regs * p);\n+void __gnu_Unwind_Restore_WMMXC (struct wmmxc_regs * p);\n \n /* ...and those for FLDMD/FSTMD format...  */\n void __gnu_Unwind_Save_VFP_D (struct vfp_regs * p);\n@@ -181,6 +201,11 @@ restore_non_core_regs (phase1_vrs * vrs)\n \n   if ((vrs->demand_save_flags & DEMAND_SAVE_VFP_V3) == 0)\n     __gnu_Unwind_Restore_VFP_D_16_to_31 (&vrs->vfp_regs_16_to_31);\n+\n+  if ((vrs->demand_save_flags & DEMAND_SAVE_WMMXD) == 0)\n+    __gnu_Unwind_Restore_WMMXD (&vrs->wmmxd);\n+  if ((vrs->demand_save_flags & DEMAND_SAVE_WMMXC) == 0)\n+    __gnu_Unwind_Restore_WMMXC (&vrs->wmmxc);\n }\n \n /* A better way to do this would probably be to compare the absolute address\n@@ -421,9 +446,80 @@ _Unwind_VRS_Result _Unwind_VRS_Pop (_Unwind_Context *context,\n       return _UVRSR_OK;\n \n     case _UVRSC_FPA:\n+      return _UVRSR_NOT_IMPLEMENTED;\n+\n     case _UVRSC_WMMXD:\n+      {\n+\t_uw start = discriminator >> 16;\n+\t_uw count = discriminator & 0xffff;\n+\tstruct wmmxd_regs tmp;\n+\t_uw *sp;\n+\t_uw *dest;\n+\n+\tif ((representation != _UVRSD_UINT64) || start + count > 16)\n+\t  return _UVRSR_FAILED;\n+\n+\tif (vrs->demand_save_flags & DEMAND_SAVE_WMMXD)\n+\t  {\n+\t    /* Demand-save resisters for stage1.  */\n+\t    vrs->demand_save_flags &= ~DEMAND_SAVE_WMMXD;\n+\t    __gnu_Unwind_Save_WMMXD (&vrs->wmmxd);\n+\t  }\n+\n+\t/* Restore the registers from the stack.  Do this by saving the\n+\t   current WMMXD registers to a memory area, moving the in-memory\n+\t   values into that area, and restoring from the whole area.  */\n+\t__gnu_Unwind_Save_WMMXD (&tmp);\n+\n+\t/* The stack address is only guaranteed to be word aligned, so\n+\t   we can't use doubleword copies.  */\n+\tsp = (_uw *) vrs->core.r[R_SP];\n+\tdest = (_uw *) &tmp.wd[start];\n+\tcount *= 2;\n+\twhile (count--)\n+\t  *(dest++) = *(sp++);\n+\n+\t/* Set the new stack pointer.  */\n+\tvrs->core.r[R_SP] = (_uw) sp;\n+\n+\t/* Reload the registers.  */\n+\t__gnu_Unwind_Restore_WMMXD (&tmp);\n+      }\n+      return _UVRSR_OK;\n+\n     case _UVRSC_WMMXC:\n-      return _UVRSR_NOT_IMPLEMENTED;\n+      {\n+\tint i;\n+\tstruct wmmxc_regs tmp;\n+\t_uw *sp;\n+\n+\tif ((representation != _UVRSD_UINT32) || discriminator > 16)\n+\t  return _UVRSR_FAILED;\n+\n+\tif (vrs->demand_save_flags & DEMAND_SAVE_WMMXC)\n+\t  {\n+\t    /* Demand-save resisters for stage1.  */\n+\t    vrs->demand_save_flags &= ~DEMAND_SAVE_WMMXC;\n+\t    __gnu_Unwind_Save_WMMXC (&vrs->wmmxc);\n+\t  }\n+\n+\t/* Restore the registers from the stack.  Do this by saving the\n+\t   current WMMXC registers to a memory area, moving the in-memory\n+\t   values into that area, and restoring from the whole area.  */\n+\t__gnu_Unwind_Save_WMMXC (&tmp);\n+\n+\tsp = (_uw *) vrs->core.r[R_SP];\n+\tfor (i = 0; i < 4; i++)\n+\t  if (discriminator & (1 << i))\n+\t    tmp.wc[i] = *(sp++);\n+\n+\t/* Set the new stack pointer.  */\n+\tvrs->core.r[R_SP] = (_uw) sp;\n+\n+\t/* Reload the registers.  */\n+\t__gnu_Unwind_Restore_WMMXC (&tmp);\n+      }\n+      return _UVRSR_OK;\n \n     default:\n       return _UVRSR_FAILED;"}, {"sha": "7d2b3235c1d81901f8297048cd75c638f6fea3f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a566d0500260adef9bbf1a11a4995cd55602d480/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a566d0500260adef9bbf1a11a4995cd55602d480/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a566d0500260adef9bbf1a11a4995cd55602d480", "patch": "@@ -1,3 +1,7 @@\n+2007-03-07  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* g++.dg/eh/arm-iwmmxt-unwind.C: New test.\n+\n 2007-03-07  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* gcc.dg/var-expand1.c: Add newline at end of file."}, {"sha": "109837cd820d060cc974c02abc03147f044bf97c", "filename": "gcc/testsuite/g++.dg/eh/arm-iwmmxt-unwind.C", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a566d0500260adef9bbf1a11a4995cd55602d480/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Farm-iwmmxt-unwind.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a566d0500260adef9bbf1a11a4995cd55602d480/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Farm-iwmmxt-unwind.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Farm-iwmmxt-unwind.C?ref=a566d0500260adef9bbf1a11a4995cd55602d480", "patch": "@@ -0,0 +1,47 @@\n+/* Test unwinding of iWMMXt register saves.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm32 } */\n+\n+#ifdef __IWMMXT__\n+extern \"C\" void abort (void);\n+extern \"C\" void exit (int);\n+\n+void\n+foo (void)\n+{\n+  register long long wr10 asm(\"wr10\") = 0;\n+  register long long wr11 asm(\"wr11\") = 1;\n+  register long long wr12 asm(\"wr12\") = 2;\n+  register long long wr14 asm(\"wr14\") = 4;\n+  register long long wr15 asm(\"wr15\") = 5;\n+  asm volatile (\"\" : \"+y\" (wr10), \"+y\" (wr11), \"+y\" (wr12), \"+y\" (wr14), \"+y\" (wr15));\n+  throw \"\";\n+}\n+\n+int\n+main (void)\n+{\n+  register long long wr10 asm(\"wr10\") = 10;\n+  register long long wr11 asm(\"wr11\") = 11;\n+  register long long wr12 asm(\"wr12\") = 12;\n+  register long long wr13 asm(\"wr13\") = 13;\n+  register long long wr14 asm(\"wr14\") = 14;\n+  register long long wr15 asm(\"wr15\") = 15;\n+  asm volatile (\"\" : \"+y\" (wr10), \"+y\" (wr11), \"+y\" (wr12), \"+y\" (wr13), \"+y\" (wr14), \"+y\" (wr15));\n+  try {\n+    foo ();\n+  } catch (...) {\n+    asm volatile (\"\" : \"+y\" (wr10), \"+y\" (wr11), \"+y\" (wr12), \"+y\" (wr13), \"+y\" (wr14), \"+y\" (wr15));\n+    if (wr10 != 10 || wr11 != 11 || wr12 != 12 || wr13 != 13 || wr14 != 14 || wr15 != 15)\n+      abort ();\n+  }\n+  exit (0);\n+}\n+#else\n+int\n+main (void)\n+{\n+}\n+#endif"}]}