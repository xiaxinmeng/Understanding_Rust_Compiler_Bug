{"sha": "bafa9791ac3a741aae72a6efd998b7d36d2c2e62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFmYTk3OTFhYzNhNzQxYWFlNzJhNmVmZDk5OGI3ZDM2ZDJjMmU2Mg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-09-22T12:04:08Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-09-22T12:04:08Z"}, "message": "typeindex: New.\n\n2010-09-22  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/typeindex: New.\n\t* include/Makefile.am: Add.\n\t* include/Makefile.in: Regenerate.\n\t* include/precompiled/stdc++.h: Add.\n\t* testsuite/20_util/typeindex/comparison_operators.cc: New.\n\t* testsuite/20_util/typeindex/hash.cc: Likewise.\n\t* testsuite/20_util/typeindex/hash_code.cc: Likewise.\n\t* testsuite/20_util/typeindex/name.cc: Likewise.\n\n\t* testsuite/18_support/type_info/hash_code.cc: Tweak.\n\nFrom-SVN: r164521", "tree": {"sha": "039fc7a24feb042c41c821e590759db90dae4c61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/039fc7a24feb042c41c821e590759db90dae4c61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bafa9791ac3a741aae72a6efd998b7d36d2c2e62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bafa9791ac3a741aae72a6efd998b7d36d2c2e62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bafa9791ac3a741aae72a6efd998b7d36d2c2e62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bafa9791ac3a741aae72a6efd998b7d36d2c2e62/comments", "author": null, "committer": null, "parents": [{"sha": "7d0255bd9fe6fd991573e3f6737c60db0978c1be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d0255bd9fe6fd991573e3f6737c60db0978c1be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d0255bd9fe6fd991573e3f6737c60db0978c1be"}], "stats": {"total": 464, "additions": 442, "deletions": 22}, "files": [{"sha": "58171dce3dd93b65df94cf25d244123728dc90b5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bafa9791ac3a741aae72a6efd998b7d36d2c2e62/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bafa9791ac3a741aae72a6efd998b7d36d2c2e62/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bafa9791ac3a741aae72a6efd998b7d36d2c2e62", "patch": "@@ -1,3 +1,16 @@\n+2010-09-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/typeindex: New.\n+\t* include/Makefile.am: Add.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/precompiled/stdc++.h: Add.\n+\t* testsuite/20_util/typeindex/comparison_operators.cc: New.\n+\t* testsuite/20_util/typeindex/hash.cc: Likewise.\n+\t* testsuite/20_util/typeindex/hash_code.cc: Likewise.\n+\t* testsuite/20_util/typeindex/name.cc: Likewise.\n+\n+\t* testsuite/18_support/type_info/hash_code.cc: Tweak.\n+\n 2010-09-22  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* src/hash_bytes.cc: Move..."}, {"sha": "2fb3fd5c5c263651457de4e83df3a7a9c6ca06a2", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bafa9791ac3a741aae72a6efd998b7d36d2c2e62/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bafa9791ac3a741aae72a6efd998b7d36d2c2e62/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=bafa9791ac3a741aae72a6efd998b7d36d2c2e62", "patch": "@@ -66,6 +66,7 @@ std_headers = \\\n \t${std_srcdir}/system_error \\\n \t${std_srcdir}/thread \\\n \t${std_srcdir}/tuple \\\n+\t${std_srcdir}/typeindex \\\n \t${std_srcdir}/type_traits \\\n \t${std_srcdir}/unordered_map \\\n \t${std_srcdir}/unordered_set \\"}, {"sha": "d3adde5bf9a460cb4377616251ac1000a53a297e", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bafa9791ac3a741aae72a6efd998b7d36d2c2e62/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bafa9791ac3a741aae72a6efd998b7d36d2c2e62/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=bafa9791ac3a741aae72a6efd998b7d36d2c2e62", "patch": "@@ -308,6 +308,7 @@ std_headers = \\\n \t${std_srcdir}/system_error \\\n \t${std_srcdir}/thread \\\n \t${std_srcdir}/tuple \\\n+\t${std_srcdir}/typeindex \\\n \t${std_srcdir}/type_traits \\\n \t${std_srcdir}/unordered_map \\\n \t${std_srcdir}/unordered_set \\"}, {"sha": "510a6552f52d9fd0d52715d7f76c4e0ffabef219", "filename": "libstdc++-v3/include/precompiled/stdc++.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bafa9791ac3a741aae72a6efd998b7d36d2c2e62/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bafa9791ac3a741aae72a6efd998b7d36d2c2e62/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h?ref=bafa9791ac3a741aae72a6efd998b7d36d2c2e62", "patch": "@@ -1,6 +1,6 @@\n // C++ includes used for precompiling -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -109,6 +109,7 @@\n #include <system_error>\n #include <thread>\n #include <tuple>\n+#include <typeindex>\n #include <type_traits>\n #include <unordered_map>\n #include <unordered_set>"}, {"sha": "a5d37666e78cfe21b98247960d71f382014d4f00", "filename": "libstdc++-v3/include/std/typeindex", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bafa9791ac3a741aae72a6efd998b7d36d2c2e62/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftypeindex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bafa9791ac3a741aae72a6efd998b7d36d2c2e62/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftypeindex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftypeindex?ref=bafa9791ac3a741aae72a6efd998b7d36d2c2e62", "patch": "@@ -0,0 +1,105 @@\n+// C++0x typeindex -*- C++ -*-\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file include/typeindex\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_TYPEINDEX\n+#define _GLIBCXX_TYPEINDEX 1\n+\n+#pragma GCC system_header\n+\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+# include <bits/c++0x_warning.h>\n+#else\n+\n+#include <bits/c++config.h>\n+#include <typeinfo>\n+#include <bits/stl_function.h> // For unary_function\n+\n+namespace std\n+{\n+  /**\n+     @brief The class type_index provides a simple wrapper for type_info\n+     which can be used as an index type in associative containers (23.6)\n+     and in unordered associative containers (23.7).\n+   */\n+  struct type_index\n+  {\n+    type_index(const type_info& __rhs)\n+    : _M_target(&__rhs) { }\n+\n+    bool\n+    operator==(const type_index& __rhs) const\n+    { return *_M_target == *__rhs._M_target; }\n+\n+    bool\n+    operator!=(const type_index& __rhs) const\n+    { return *_M_target != *__rhs._M_target; }\n+\n+    bool\n+    operator<(const type_index& __rhs) const\n+    { return _M_target->before(*__rhs._M_target); }\n+\n+    bool\n+    operator<=(const type_index& __rhs) const\n+    { return !__rhs._M_target->before(*_M_target); }\n+\n+    bool\n+    operator>(const type_index& __rhs) const\n+    { return __rhs._M_target->before(*_M_target); }\n+\n+    bool\n+    operator>=(const type_index& __rhs) const\n+    { return !_M_target->before(*__rhs._M_target); }\n+\n+    size_t\n+    hash_code() const\n+    { return _M_target->hash_code(); }\n+\n+    const char*\n+    name() const\n+    { return _M_target->name(); }\n+\n+  private:\n+    const type_info* _M_target;\n+  };\n+\n+  template<typename _Tp> struct hash;\n+\n+  /// std::hash specialization for type_index.\n+  template<>\n+    struct hash<type_index>\n+    : public std::unary_function<type_index, size_t>\n+    {\n+      size_t\n+      operator()(const type_index& __ti) const\n+      { return __ti.hash_code(); }\n+    };\n+}\n+\n+#endif  // __GXX_EXPERIMENTAL_CXX0X__\n+\n+#endif  // _GLIBCXX_TYPEINDEX"}, {"sha": "2d4c65bc5935ca73f049a20c9c95bf16344cbef9", "filename": "libstdc++-v3/testsuite/18_support/type_info/hash_code.cc", "status": "modified", "additions": 38, "deletions": 21, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bafa9791ac3a741aae72a6efd998b7d36d2c2e62/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Ftype_info%2Fhash_code.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bafa9791ac3a741aae72a6efd998b7d36d2c2e62/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Ftype_info%2Fhash_code.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Ftype_info%2Fhash_code.cc?ref=bafa9791ac3a741aae72a6efd998b7d36d2c2e62", "patch": "@@ -22,37 +22,54 @@\n #include <typeinfo>\n #include <testsuite_hooks.h>\n \n-class Abraca { };\n-Abraca a1, a2_;\n-const Abraca a2 = a2_;\n-\n-class Dabra { };\n-Dabra d1;\n-\n void test01()\n {\n   bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  class Abraca { };\n+  Abraca a1, a2_;\n+\n+  typedef const Abraca cAbraca;\n+  cAbraca a2 = a2_;\n+\n+  class Dabra { };\n+  Dabra d1;\n \n-  VERIFY( typeid(int) != typeid(double) );\n-  VERIFY( typeid(int).hash_code() != typeid(double).hash_code() );\n+  const type_info& to01 = typeid(int);\n+  const type_info& to02 = typeid(double);\n+  VERIFY( to01 != to02 );\n+  VERIFY( to01.hash_code() != to02.hash_code() );\n \n-  VERIFY( typeid(a1) == typeid(a2) );\n-  VERIFY( typeid(a1).hash_code() == typeid(a2).hash_code() );\n+  const type_info& to03 = typeid(a1);\n+  const type_info& to04 = typeid(a2);\n+  VERIFY( to03 == to04 );\n+  VERIFY( to03.hash_code() == to04.hash_code() );\n \n-  VERIFY( typeid(Abraca) == typeid(const Abraca) );\n-  VERIFY( typeid(Abraca).hash_code() == typeid(const Abraca).hash_code() );\n+  const type_info& to05 = typeid(Abraca);\n+  const type_info& to06 = typeid(cAbraca);\n+  VERIFY( to05 == to06 );\n+  VERIFY( to05.hash_code() == to06.hash_code() );\n \n-  VERIFY( typeid(Abraca) == typeid(a2) );\n-  VERIFY( typeid(Abraca).hash_code() == typeid(a2).hash_code() );\n+  const type_info& to07 = typeid(Abraca);\n+  const type_info& to08 = typeid(a2);\n+  VERIFY( to07 == to08 );\n+  VERIFY( to07.hash_code() == to08.hash_code() );\n \n-  VERIFY( typeid(Abraca) == typeid(const Abraca&) );\n-  VERIFY( typeid(Abraca).hash_code() == typeid(const Abraca&).hash_code() );\n+  const type_info& to09 = typeid(Abraca);\n+  const type_info& to10 = typeid(const Abraca&);\n+  VERIFY( to09 == to10 );\n+  VERIFY( to09.hash_code() == to10.hash_code() );\n \n-  VERIFY( typeid(Abraca) != typeid(Dabra) );\n-  VERIFY( typeid(Abraca).hash_code() != typeid(Dabra).hash_code() );\n+  const type_info& to11 = typeid(Abraca);\n+  const type_info& to12 = typeid(Dabra);\n+  VERIFY( to11 != to12 );\n+  VERIFY( to11.hash_code() != to12.hash_code() );\n \n-  VERIFY( typeid(a1) != typeid(d1) );\n-  VERIFY( typeid(a1).hash_code() != typeid(d1).hash_code() );\n+  const type_info& to13 = typeid(a1);\n+  const type_info& to14 = typeid(d1);\n+  VERIFY( to13 != to14 );\n+  VERIFY( to13.hash_code() != to14.hash_code() );\n }\n \n int main()"}, {"sha": "5ca53967d4da80fad4f26512a98c7eef5c595f0f", "filename": "libstdc++-v3/testsuite/20_util/typeindex/comparison_operators.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bafa9791ac3a741aae72a6efd998b7d36d2c2e62/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fcomparison_operators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bafa9791ac3a741aae72a6efd998b7d36d2c2e62/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fcomparison_operators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fcomparison_operators.cc?ref=bafa9791ac3a741aae72a6efd998b7d36d2c2e62", "patch": "@@ -0,0 +1,88 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2010-09-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <typeindex>\n+#include <testsuite_hooks.h>\n+\n+#define TEST3(TI1, TI2, TO1, TO2)               \\\n+  VERIFY( (TI1 == TI2) == (TO1 == TO2) );       \\\n+  VERIFY( (TI1 != TI2) == (TO1 != TO2) );\t\\\n+  VERIFY( (TI1 < TI2) == (TO1.before(TO2)) );   \\\n+  VERIFY( (TI1 <= TI2) == (!TO2.before(TO1)) ); \\\n+  VERIFY( (TI1 > TI2) == (TO2.before(TO1)) );\t\\\n+  VERIFY( (TI1 >= TI2) == (!TO1.before(TO2)) );\n+\n+#define TEST2(TI, TO)\t  \\\n+  TEST3(TI, ti1, TO, to1) \\\n+  TEST3(TI, ti2, TO, to2) \\\n+  TEST3(TI, ti3, TO, to3) \\\n+  TEST3(TI, ti4, TO, to4) \\\n+  TEST3(TI, ti5, TO, to5) \\\n+  TEST3(TI, ti6, TO, to6) \\\n+  TEST3(TI, ti7, TO, to7)\n+\n+#define TEST      \\\n+  TEST2(ti1, to1) \\\n+  TEST2(ti2, to2) \\\n+  TEST2(ti3, to3) \\\n+  TEST2(ti4, to4) \\\n+  TEST2(ti5, to5) \\\n+  TEST2(ti6, to6) \\\n+  TEST2(ti7, to7)\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  class Abraca { };\n+  Abraca a1, a2_;\n+  const Abraca a2 = a2_;\n+\n+  const type_info& to1 = typeid(int);\n+  const type_index ti1(to1);\n+\n+  const type_info& to2 = typeid(double);\n+  const type_index ti2(to2);\n+\n+  const type_info& to3 = typeid(Abraca);\n+  const type_index ti3(to3);\n+\n+  const type_info& to4 = typeid(const Abraca);\n+  const type_index ti4(to4);\n+\n+  const type_info& to5 = typeid(const Abraca&);\n+  const type_index ti5(to5);\n+\n+  const type_info& to6 = typeid(a1);\n+  const type_index ti6(to6);\n+\n+  const type_info& to7 = typeid(a2);\n+  const type_index ti7(to7);\n+\n+  TEST\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2468ea6933eab037f04f3b1f5780458342ae5aa9", "filename": "libstdc++-v3/testsuite/20_util/typeindex/hash.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bafa9791ac3a741aae72a6efd998b7d36d2c2e62/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fhash.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bafa9791ac3a741aae72a6efd998b7d36d2c2e62/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fhash.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fhash.cc?ref=bafa9791ac3a741aae72a6efd998b7d36d2c2e62", "patch": "@@ -0,0 +1,60 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2010-09-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <typeindex>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  class Abraca { };\n+  Abraca a1, a2_;\n+  const Abraca a2 = a2_;\n+\n+  const type_index ti1(typeid(int));\n+  VERIFY( hash<type_index>()(ti1) == ti1.hash_code() );\n+\n+  const type_index ti2(typeid(double));\n+  VERIFY( hash<type_index>()(ti2) == ti2.hash_code() );\n+\n+  const type_index ti3(typeid(Abraca));\n+  VERIFY( hash<type_index>()(ti3) == ti3.hash_code() );\n+\n+  const type_index ti4(typeid(const Abraca));\n+  VERIFY( hash<type_index>()(ti4) == ti4.hash_code() );\n+\n+  const type_index ti5(typeid(const Abraca&));\n+  VERIFY( hash<type_index>()(ti5) == ti5.hash_code() );\n+\n+  const type_index ti6(typeid(a1));\n+  VERIFY( hash<type_index>()(ti6) == ti6.hash_code() );\n+\n+  const type_index ti7(typeid(a2));\n+  VERIFY( hash<type_index>()(ti7) == ti7.hash_code() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f12b6cbb943ce3194d891cd44db36856307f9392", "filename": "libstdc++-v3/testsuite/20_util/typeindex/hash_code.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bafa9791ac3a741aae72a6efd998b7d36d2c2e62/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fhash_code.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bafa9791ac3a741aae72a6efd998b7d36d2c2e62/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fhash_code.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fhash_code.cc?ref=bafa9791ac3a741aae72a6efd998b7d36d2c2e62", "patch": "@@ -0,0 +1,67 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2010-09-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <typeindex>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  class Abraca { };\n+  Abraca a1, a2_;\n+  const Abraca a2 = a2_;\n+\n+  const type_info& to1 = typeid(int);\n+  const type_index ti1(to1);\n+  VERIFY( ti1.hash_code() == to1.hash_code() );\n+\n+  const type_info& to2 = typeid(double);\n+  const type_index ti2(to2);\n+  VERIFY( ti2.hash_code() == to2.hash_code() );\n+\n+  const type_info& to3 = typeid(Abraca);\n+  const type_index ti3(to3);\n+  VERIFY( ti3.hash_code() == to3.hash_code() );\n+\n+  const type_info& to4 = typeid(const Abraca);\n+  const type_index ti4(to4);\n+  VERIFY( ti4.hash_code() == to4.hash_code() );\n+\n+  const type_info& to5 = typeid(const Abraca&);\n+  const type_index ti5(to5);\n+  VERIFY( ti5.hash_code() == to5.hash_code() );\n+\n+  const type_info& to6 = typeid(a1);\n+  const type_index ti6(to6);\n+  VERIFY( ti6.hash_code() == to6.hash_code() );\n+\n+  const type_info& to7 = typeid(a2);\n+  const type_index ti7(to7);\n+  VERIFY( ti7.hash_code() == to7.hash_code() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fa6e6945cebdb1f1c25dafe3c84adeda96f19cab", "filename": "libstdc++-v3/testsuite/20_util/typeindex/name.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bafa9791ac3a741aae72a6efd998b7d36d2c2e62/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fname.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bafa9791ac3a741aae72a6efd998b7d36d2c2e62/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fname.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fname.cc?ref=bafa9791ac3a741aae72a6efd998b7d36d2c2e62", "patch": "@@ -0,0 +1,67 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2010-09-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <typeindex>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  class Abraca { };\n+  Abraca a1, a2_;\n+  const Abraca a2 = a2_;\n+\n+  const type_info& to1 = typeid(int);\n+  const type_index ti1(to1);\n+  VERIFY( ti1.name() == to1.name() );\n+\n+  const type_info& to2 = typeid(double);\n+  const type_index ti2(to2);\n+  VERIFY( ti2.name() == to2.name() );\n+\n+  const type_info& to3 = typeid(Abraca);\n+  const type_index ti3(to3);\n+  VERIFY( ti3.name() == to3.name() );\n+\n+  const type_info& to4 = typeid(const Abraca);\n+  const type_index ti4(to4);\n+  VERIFY( ti4.name() == to4.name() );\n+\n+  const type_info& to5 = typeid(const Abraca&);\n+  const type_index ti5(to5);\n+  VERIFY( ti5.name() == to5.name() );\n+\n+  const type_info& to6 = typeid(a1);\n+  const type_index ti6(to6);\n+  VERIFY( ti6.name() == to6.name() );\n+\n+  const type_info& to7 = typeid(a2);\n+  const type_index ti7(to7);\n+  VERIFY( ti7.name() == to7.name() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}