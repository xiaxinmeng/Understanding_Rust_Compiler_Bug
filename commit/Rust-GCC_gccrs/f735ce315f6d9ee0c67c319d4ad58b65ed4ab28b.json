{"sha": "f735ce315f6d9ee0c67c319d4ad58b65ed4ab28b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjczNWNlMzE1ZjZkOWVlMGM2N2MzMTlkNGFkNThiNjVlZDRhYjI4Yg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-07-24T16:53:17Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-07-24T16:53:17Z"}, "message": "net: Only use GNU/Linux unix socket abstract paths on GNU/Linux.\n\nFrom-SVN: r201217", "tree": {"sha": "ed13d57ba29d665908e53c726aa0dfdabc4d40d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed13d57ba29d665908e53c726aa0dfdabc4d40d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f735ce315f6d9ee0c67c319d4ad58b65ed4ab28b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f735ce315f6d9ee0c67c319d4ad58b65ed4ab28b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f735ce315f6d9ee0c67c319d4ad58b65ed4ab28b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f735ce315f6d9ee0c67c319d4ad58b65ed4ab28b/comments", "author": null, "committer": null, "parents": [{"sha": "821f6f1b318ce6b5e5aad7941593324b20217c32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/821f6f1b318ce6b5e5aad7941593324b20217c32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/821f6f1b318ce6b5e5aad7941593324b20217c32"}], "stats": {"total": 96, "additions": 49, "deletions": 47}, "files": [{"sha": "cc98d6b79fd57dc94d327bc9735e2ddca4d9f43b", "filename": "libgo/go/syscall/socket.go", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f735ce315f6d9ee0c67c319d4ad58b65ed4ab28b/libgo%2Fgo%2Fsyscall%2Fsocket.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f735ce315f6d9ee0c67c319d4ad58b65ed4ab28b/libgo%2Fgo%2Fsyscall%2Fsocket.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsocket.go?ref=f735ce315f6d9ee0c67c319d4ad58b65ed4ab28b", "patch": "@@ -92,11 +92,7 @@ func (sa *SockaddrUnix) sockaddr() (*RawSockaddrAny, Socklen_t, error) {\n \tif n > 0 {\n \t\tsl += Socklen_t(n) + 1\n \t}\n-\tif sa.raw.Path[0] == '@' {\n-\t\tsa.raw.Path[0] = 0\n-\t\t// Don't count trailing NUL for abstract address.\n-\t\tsl--\n-\t}\n+\tsl = sa.raw.adjustAbstract(sl)\n \n \t// length is family (uint16), name, NUL.\n \treturn (*RawSockaddrAny)(unsafe.Pointer(&sa.raw)), sl, nil"}, {"sha": "72d7180b6ed03a2191e6f0d4719e0952e6783916", "filename": "libgo/go/syscall/socket_bsd.go", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f735ce315f6d9ee0c67c319d4ad58b65ed4ab28b/libgo%2Fgo%2Fsyscall%2Fsocket_bsd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f735ce315f6d9ee0c67c319d4ad58b65ed4ab28b/libgo%2Fgo%2Fsyscall%2Fsocket_bsd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsocket_bsd.go?ref=f735ce315f6d9ee0c67c319d4ad58b65ed4ab28b", "patch": "@@ -11,11 +11,11 @@ const SizeofSockaddrInet6 = 28\n const SizeofSockaddrUnix = 110\n \n type RawSockaddrInet4 struct {\n-\tLen uint8;\n-\tFamily uint8;\n-\tPort uint16;\n-\tAddr [4]byte /* in_addr */;\n-\tZero [8]uint8;\n+\tLen    uint8\n+\tFamily uint8\n+\tPort   uint16\n+\tAddr   [4]byte /* in_addr */\n+\tZero   [8]uint8\n }\n \n func (sa *RawSockaddrInet4) setLen() Socklen_t {\n@@ -24,12 +24,12 @@ func (sa *RawSockaddrInet4) setLen() Socklen_t {\n }\n \n type RawSockaddrInet6 struct {\n-\tLen uint8;\n-\tFamily uint8;\n-\tPort uint16;\n-\tFlowinfo uint32;\n-\tAddr [16]byte /* in6_addr */;\n-\tScope_id uint32;\n+\tLen      uint8\n+\tFamily   uint8\n+\tPort     uint16\n+\tFlowinfo uint32\n+\tAddr     [16]byte /* in6_addr */\n+\tScope_id uint32\n }\n \n func (sa *RawSockaddrInet6) setLen() Socklen_t {\n@@ -38,9 +38,9 @@ func (sa *RawSockaddrInet6) setLen() Socklen_t {\n }\n \n type RawSockaddrUnix struct {\n-\tLen uint8;\n-\tFamily uint8;\n-\tPath [108]int8;\n+\tLen    uint8\n+\tFamily uint8\n+\tPath   [108]int8\n }\n \n func (sa *RawSockaddrUnix) setLen(n int) {\n@@ -62,10 +62,14 @@ func (sa *RawSockaddrUnix) getLen() (int, error) {\n \treturn n, nil\n }\n \n+func (sa *RawSockaddrUnix) adjustAbstract(sl Socklen_t) Socklen_t {\n+\treturn sl\n+}\n+\n type RawSockaddr struct {\n-\tLen uint8;\n-\tFamily uint8;\n-\tData [14]int8;\n+\tLen    uint8\n+\tFamily uint8\n+\tData   [14]int8\n }\n \n // BindToDevice binds the socket associated with fd to device."}, {"sha": "bcd1781d570e5f7f61530527491ac6f3efde3d5d", "filename": "libgo/go/syscall/socket_irix.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f735ce315f6d9ee0c67c319d4ad58b65ed4ab28b/libgo%2Fgo%2Fsyscall%2Fsocket_irix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f735ce315f6d9ee0c67c319d4ad58b65ed4ab28b/libgo%2Fgo%2Fsyscall%2Fsocket_irix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsocket_irix.go?ref=f735ce315f6d9ee0c67c319d4ad58b65ed4ab28b", "patch": "@@ -64,6 +64,10 @@ func (sa *RawSockaddrUnix) getLen() (int, error) {\n \treturn n, nil\n }\n \n+func (sa *RawSockaddrUnix) adjustAbstract(sl Socklen_t) Socklen_t {\n+\treturn sl\n+}\n+\n type RawSockaddr struct {\n \tFamily uint16\n \tData   [14]int8"}, {"sha": "8546abc3e062d23949e9066aa469b1adeb4b6a94", "filename": "libgo/go/syscall/socket_linux.go", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f735ce315f6d9ee0c67c319d4ad58b65ed4ab28b/libgo%2Fgo%2Fsyscall%2Fsocket_linux.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f735ce315f6d9ee0c67c319d4ad58b65ed4ab28b/libgo%2Fgo%2Fsyscall%2Fsocket_linux.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsocket_linux.go?ref=f735ce315f6d9ee0c67c319d4ad58b65ed4ab28b", "patch": "@@ -110,6 +110,15 @@ func (sa *RawSockaddrUnix) getLen() (int, error) {\n \treturn n, nil\n }\n \n+func (sa *RawSockaddrUnix) adjustAbstract(sl Socklen_t) Socklen_t {\n+\tif sa.Path[0] == '@' {\n+\t\tsa.Path[0] = 0\n+\t\t// Don't count trailing NUL for abstract address.\n+\t\tsl--\n+\t}\n+\treturn sl\n+}\n+\n type RawSockaddrLinklayer struct {\n \tFamily   uint16\n \tProtocol uint16"}, {"sha": "39588892f2b5825509a4408fba238e89b51470f9", "filename": "libgo/go/syscall/socket_solaris.go", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f735ce315f6d9ee0c67c319d4ad58b65ed4ab28b/libgo%2Fgo%2Fsyscall%2Fsocket_solaris.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f735ce315f6d9ee0c67c319d4ad58b65ed4ab28b/libgo%2Fgo%2Fsyscall%2Fsocket_solaris.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsocket_solaris.go?ref=f735ce315f6d9ee0c67c319d4ad58b65ed4ab28b", "patch": "@@ -12,22 +12,22 @@ const SizeofSockaddrUnix = 110\n \n type RawSockaddrInet4 struct {\n \tFamily uint16\n-\tPort uint16\n-\tAddr [4]byte /* in_addr */\n-\tZero [8]uint8\n+\tPort   uint16\n+\tAddr   [4]byte /* in_addr */\n+\tZero   [8]uint8\n }\n \n func (sa *RawSockaddrInet4) setLen() Socklen_t {\n \treturn SizeofSockaddrInet4\n }\n \n type RawSockaddrInet6 struct {\n-\tFamily uint16\n-\tPort uint16\n+\tFamily   uint16\n+\tPort     uint16\n \tFlowinfo uint32\n-\tAddr [16]byte /* in6_addr */\n+\tAddr     [16]byte /* in6_addr */\n \tScope_id uint32\n-\tSrc_id uint32\n+\tSrc_id   uint32\n }\n \n func (sa *RawSockaddrInet6) setLen() Socklen_t {\n@@ -36,38 +36,27 @@ func (sa *RawSockaddrInet6) setLen() Socklen_t {\n \n type RawSockaddrUnix struct {\n \tFamily uint16\n-\tPath [108]int8\n+\tPath   [108]int8\n }\n \n func (sa *RawSockaddrUnix) setLen(int) {\n }\n \n func (sa *RawSockaddrUnix) getLen() (int, error) {\n-\tif sa.Path[0] == 0 {\n-\t\t// \"Abstract\" Unix domain socket.\n-\t\t// Rewrite leading NUL as @ for textual display.\n-\t\t// (This is the standard convention.)\n-\t\t// Not friendly to overwrite in place,\n-\t\t// but the callers below don't care.\n-\t\tsa.Path[0] = '@'\n-\t}\n-\n-\t// Assume path ends at NUL.\n-\t// This is not technically the GNU/Linux semantics for\n-\t// abstract Unix domain sockets--they are supposed\n-\t// to be uninterpreted fixed-size binary blobs--but\n-\t// everyone uses this convention.\n \tn := 0\n-\tfor n < len(sa.Path) - 3 && sa.Path[n] != 0 {\n+\tfor n < len(sa.Path) && sa.Path[n] != 0 {\n \t\tn++\n \t}\n-\n \treturn n, nil\n }\n \n+func (sa *RawSockaddrUnix) adjustAbstract(sl Socklen_t) Socklen_t {\n+\treturn sl\n+}\n+\n type RawSockaddr struct {\n \tFamily uint16\n-\tData [14]int8\n+\tData   [14]int8\n }\n \n // BindToDevice binds the socket associated with fd to device."}]}