{"sha": "a6f0cb16c658263c398773c27387adc6b10b236c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZmMGNiMTZjNjU4MjYzYzM5ODc3M2MyNzM4N2FkYzZiMTBiMjM2Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-09T13:04:59Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-09T13:04:59Z"}, "message": "[multiple changes]\n\n2012-07-09  Tristan Gingold  <gingold@adacore.com>\n\n\t* a-exexpr-gcc.adb (CleanupUnwind_Handler): Now imported from\n\traise-gcc.c\n\t* raise-gcc.c (__gnat_cleanupunwind_handler): Defined.\n\tStrictly follow the ABI convention on ia64.\n\n2012-07-09  Gary Dismukes  <dismukes@adacore.com>\n\n\t* a-ststio.ads: Add pragma Preelaborate, per AI05-0283.\n\t* i-cstrea.ads (max_path_len): Change from variable to deferred\n\tconstant to allow it to be used as a bound in string component\n\tin type System.File_IO.Temp_File_Record.\n\t* s-os_lib.ads, s-commun.ads, s-ficobl.ads, s-fileio.ads: Add pragma\n\tPreelaborate.\n\t* s-fileio.adb (Get_Case_Sensitive): Move function inside\n\tprocedure Open.\n\t(File_Names_Case_Sensitive): Move variable inside\n\tprocedure Open, to avoid violation of Preelaborate restriction\n\t(due to call to Get_Case_Sensitive).\n\n2012-07-09  Ed Schonberg  <schonberg@adacore.com>\n\n\t* layout.adb (Set_Elem_Alignment): Protect against meaningless\n\tsize clause, to prevent overflow in internal computation of\n\talignment.\n\nFrom-SVN: r189375", "tree": {"sha": "fb77b7b5b44c1f6a19636abaad55d26ba365a9ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb77b7b5b44c1f6a19636abaad55d26ba365a9ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6f0cb16c658263c398773c27387adc6b10b236c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6f0cb16c658263c398773c27387adc6b10b236c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6f0cb16c658263c398773c27387adc6b10b236c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6f0cb16c658263c398773c27387adc6b10b236c/comments", "author": null, "committer": null, "parents": [{"sha": "02663f24a578d0ada1aa44220f545b4e0fe09c29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02663f24a578d0ada1aa44220f545b4e0fe09c29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02663f24a578d0ada1aa44220f545b4e0fe09c29"}], "stats": {"total": 157, "additions": 105, "deletions": 52}, "files": [{"sha": "71e653167dbfaebcd48fde773ff0454d8d074ffb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f0cb16c658263c398773c27387adc6b10b236c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f0cb16c658263c398773c27387adc6b10b236c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a6f0cb16c658263c398773c27387adc6b10b236c", "patch": "@@ -1,3 +1,30 @@\n+2012-07-09  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* a-exexpr-gcc.adb (CleanupUnwind_Handler): Now imported from\n+\traise-gcc.c\n+\t* raise-gcc.c (__gnat_cleanupunwind_handler): Defined.\n+\tStrictly follow the ABI convention on ia64.\n+\n+2012-07-09  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* a-ststio.ads: Add pragma Preelaborate, per AI05-0283.\n+\t* i-cstrea.ads (max_path_len): Change from variable to deferred\n+\tconstant to allow it to be used as a bound in string component\n+\tin type System.File_IO.Temp_File_Record.\n+\t* s-os_lib.ads, s-commun.ads, s-ficobl.ads, s-fileio.ads: Add pragma\n+\tPreelaborate.\n+\t* s-fileio.adb (Get_Case_Sensitive): Move function inside\n+\tprocedure Open.\n+\t(File_Names_Case_Sensitive): Move variable inside\n+\tprocedure Open, to avoid violation of Preelaborate restriction\n+\t(due to call to Get_Case_Sensitive).\n+\n+2012-07-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* layout.adb (Set_Elem_Alignment): Protect against meaningless\n+\tsize clause, to prevent overflow in internal computation of\n+\talignment.\n+\n 2012-07-09  Robert Dewar  <dewar@adacore.com>\n \n \t* freeze.adb, prj-util.adb, prj-util.ads, sem_ch13.adb: Minor"}, {"sha": "bf241da61272ca8142fe297ed03639180fec9700", "filename": "gcc/ada/a-exexpr-gcc.adb", "status": "modified", "additions": 8, "deletions": 34, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f0cb16c658263c398773c27387adc6b10b236c/gcc%2Fada%2Fa-exexpr-gcc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f0cb16c658263c398773c27387adc6b10b236c/gcc%2Fada%2Fa-exexpr-gcc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexpr-gcc.adb?ref=a6f0cb16c658263c398773c27387adc6b10b236c", "patch": "@@ -44,9 +44,7 @@ package body Exception_Propagation is\n    ------------------------------------------------\n \n    --  These come from \"C++ ABI for Itanium: Exception handling\", which is\n-   --  the reference for GCC. They are used only when we are relying on\n-   --  back-end tables for exception propagation, which in turn is currently\n-   --  only the case for Zero_Cost_Exceptions in GNAT5.\n+   --  the reference for GCC.\n \n    --  Return codes from the GCC runtime functions used to propagate\n    --  an exception.\n@@ -63,7 +61,8 @@ package body Exception_Propagation is\n       URC_CONTINUE_UNWIND);\n \n    pragma Unreferenced\n-     (URC_FOREIGN_EXCEPTION_CAUGHT,\n+     (URC_NO_REASON,\n+      URC_FOREIGN_EXCEPTION_CAUGHT,\n       URC_PHASE2_ERROR,\n       URC_PHASE1_ERROR,\n       URC_NORMAL_STOP,\n@@ -83,13 +82,14 @@ package body Exception_Propagation is\n    UA_CLEANUP_PHASE : constant Unwind_Action := 2;\n    UA_HANDLER_FRAME : constant Unwind_Action := 4;\n    UA_FORCE_UNWIND  : constant Unwind_Action := 8;\n-   UA_END_OF_STACK  : constant Unwind_Action := 16;  --  GCC extension ?\n+   UA_END_OF_STACK  : constant Unwind_Action := 16;  --  GCC extension\n \n    pragma Unreferenced\n      (UA_SEARCH_PHASE,\n       UA_CLEANUP_PHASE,\n       UA_HANDLER_FRAME,\n-      UA_FORCE_UNWIND);\n+      UA_FORCE_UNWIND,\n+      UA_END_OF_STACK);\n \n    --  Mandatory common header for any exception object handled by the\n    --  GCC unwinding runtime.\n@@ -221,6 +221,8 @@ package body Exception_Propagation is\n       UW_Exception : not null GCC_Exception_Access;\n       UW_Context   : System.Address;\n       UW_Argument  : System.Address) return Unwind_Reason_Code;\n+   pragma Import (C, CleanupUnwind_Handler,\n+                  \"__gnat_cleanupunwind_handler\");\n    --  Hook called at each step of the forced unwinding we perform to\n    --  trigger cleanups found during the propagation of an unhandled\n    --  exception.\n@@ -316,34 +318,6 @@ package body Exception_Propagation is\n       Free (Copy);\n    end GNAT_GCC_Exception_Cleanup;\n \n-   ---------------------------\n-   -- CleanupUnwind_Handler --\n-   ---------------------------\n-\n-   function CleanupUnwind_Handler\n-     (UW_Version   : Integer;\n-      UW_Phases    : Unwind_Action;\n-      UW_Eclass    : Exception_Class;\n-      UW_Exception : not null GCC_Exception_Access;\n-      UW_Context   : System.Address;\n-      UW_Argument  : System.Address) return Unwind_Reason_Code\n-   is\n-      pragma Unreferenced (UW_Version, UW_Eclass, UW_Context, UW_Argument);\n-\n-   begin\n-      --  Terminate when the end of the stack is reached\n-\n-      if UW_Phases >= UA_END_OF_STACK then\n-         Unhandled_Except_Handler (UW_Exception);\n-      end if;\n-\n-      --  We know there is at least one cleanup further up. Return so that it\n-      --  is searched and entered, after which Unwind_Resume will be called\n-      --  and this hook will gain control again.\n-\n-      return URC_NO_REASON;\n-   end CleanupUnwind_Handler;\n-\n    -------------------------\n    -- Setup_Current_Excep --\n    -------------------------"}, {"sha": "35891b67035c264c17e2e223ee603fb7d7355dec", "filename": "gcc/ada/a-ststio.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f0cb16c658263c398773c27387adc6b10b236c/gcc%2Fada%2Fa-ststio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f0cb16c658263c398773c27387adc6b10b236c/gcc%2Fada%2Fa-ststio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ststio.ads?ref=a6f0cb16c658263c398773c27387adc6b10b236c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -38,6 +38,8 @@ with System.File_Control_Block;\n \n package Ada.Streams.Stream_IO is\n \n+   pragma Preelaborate;\n+\n    type Stream_Access is access all Root_Stream_Type'Class;\n \n    type File_Type is limited private;"}, {"sha": "da29765abb51fc53320bbc5dbfc5d3914ced192e", "filename": "gcc/ada/i-cstrea.ads", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f0cb16c658263c398773c27387adc6b10b236c/gcc%2Fada%2Fi-cstrea.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f0cb16c658263c398773c27387adc6b10b236c/gcc%2Fada%2Fi-cstrea.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-cstrea.ads?ref=a6f0cb16c658263c398773c27387adc6b10b236c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1995-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -228,9 +228,11 @@ package Interfaces.C_Streams is\n    --  pass an actual parameter for buffer that is big enough for any full\n    --  path name. Use max_path_len given below as the size of buffer.\n \n-   max_path_len : Integer;\n-   --  Maximum length of an allowable full path name on the system,\n-   --  including a terminating NUL character.\n+   max_path_len : constant Integer;\n+   --  max_path_len : Integer;\n+   --  Maximum length of an allowable full path name on the system,including a\n+   --  terminating NUL character. Declared as a constant to allow references\n+   --  from other preelaborated GNAT library packages.\n \n private\n    --  The following functions are specialized in the body depending on the"}, {"sha": "c026dfeac490cdb4a58c488330a1a93d6f154637", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f0cb16c658263c398773c27387adc6b10b236c/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f0cb16c658263c398773c27387adc6b10b236c/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=a6f0cb16c658263c398773c27387adc6b10b236c", "patch": "@@ -3103,11 +3103,22 @@ package body Layout is\n       --  the type, or the maximum allowed alignment.\n \n       declare\n-         S             : constant Int := UI_To_Int (Esize (E)) / SSU;\n+         S             : Int;\n+\n          A             : Nat;\n          Max_Alignment : Nat;\n \n       begin\n+         --  The given esize may be larger that int'last because of a previous\n+         --  error, and the call to UI_To_Int will fail, so use default.\n+\n+         if Esize (E) / SSU > Ttypes.Maximum_Alignment then\n+            S := Ttypes.Maximum_Alignment;\n+\n+         else\n+            S := UI_To_Int (Esize (E)) / SSU;\n+         end if;\n+\n          --  If the default alignment of \"double\" floating-point types is\n          --  specifically capped, enforce the cap.\n "}, {"sha": "b0f83a9bde59de5791788956f9fcf610dc271251", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f0cb16c658263c398773c27387adc6b10b236c/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f0cb16c658263c398773c27387adc6b10b236c/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=a6f0cb16c658263c398773c27387adc6b10b236c", "patch": "@@ -58,6 +58,7 @@ typedef char bool;\n #if defined (__hpux__) && defined (USE_LIBUNWIND_EXCEPTIONS)\n /* HP-UX B.11.31 ia64 libunwind doesn't have _Unwind_GetIPInfo. */\n #undef HAVE_GETIPINFO\n+#define _UA_END_OF_STACK 0\n #endif\n \n /* The names of a couple of \"standard\" routines for unwinding/propagation\n@@ -77,6 +78,7 @@ _Unwind_Reason_Code\n __gnat_Unwind_ForcedUnwind (_Unwind_Exception *, void *, void *);\n \n extern void __gnat_setup_current_excep (_Unwind_Exception *);\n+extern void __gnat_unhandled_except_handler (_Unwind_Exception *);\n \n #include \"dwarf2.h\"\n #include \"unwind-dw2-fde.h\"\n@@ -1139,6 +1141,30 @@ PERSONALITY_FUNCTION (version_arg_t version_arg,\n   return _URC_INSTALL_CONTEXT;\n }\n \n+_Unwind_Reason_Code\n+__gnat_cleanupunwind_handler (int version,\n+\t\t\t      _Unwind_Action phases,\n+\t\t\t      _Unwind_Exception_Class eclass,\n+\t\t\t      struct _Unwind_Exception *exception,\n+\t\t\t      struct _Unwind_Context *context,\n+\t\t\t      void *arg)\n+{\n+  /* Terminate when the end of the stack is reached.  */\n+  if ((phases & _UA_END_OF_STACK) != 0\n+#ifdef __ia64__\n+      /* Strictely follow the ia64 ABI: when end of stack is reached,\n+\t the callback will be called with a NULL stack pointer.  */\n+      || _Unwind_GetREG (context, 12) == 0\n+#endif\n+      )\n+    __gnat_unhandled_except_handler (exception);\n+\n+  /* We know there is at least one cleanup further up. Return so that it\n+     is searched and entered, after which Unwind_Resume will be called\n+     and this hook will gain control again.  */\n+  return _URC_NO_REASON;\n+}\n+\n /* Define the consistently named wrappers imported by Propagate_Exception.  */\n \n #ifdef __USING_SJLJ_EXCEPTIONS__"}, {"sha": "139a83be6df49a3f4a6a0a1c3507e81cccbd3308", "filename": "gcc/ada/s-commun.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f0cb16c658263c398773c27387adc6b10b236c/gcc%2Fada%2Fs-commun.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f0cb16c658263c398773c27387adc6b10b236c/gcc%2Fada%2Fs-commun.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-commun.ads?ref=a6f0cb16c658263c398773c27387adc6b10b236c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2009, AdaCore                     --\n+--                     Copyright (C) 2001-2012, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,6 +36,8 @@ with System.CRTL;\n \n package System.Communication is\n \n+   pragma Preelaborate;\n+\n    function Last_Index\n      (First : Ada.Streams.Stream_Element_Offset;\n       Count : CRTL.size_t) return Ada.Streams.Stream_Element_Offset;"}, {"sha": "ae48ffcd9492ada5daa6072c33f15cd09273b1a6", "filename": "gcc/ada/s-ficobl.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f0cb16c658263c398773c27387adc6b10b236c/gcc%2Fada%2Fs-ficobl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f0cb16c658263c398773c27387adc6b10b236c/gcc%2Fada%2Fs-ficobl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-ficobl.ads?ref=a6f0cb16c658263c398773c27387adc6b10b236c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---            Copyright (C) 1992-2011, Free Software Foundation, Inc.       --\n+--            Copyright (C) 1992-2012, Free Software Foundation, Inc.       --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -41,6 +41,8 @@ with System.CRTL;\n \n package System.File_Control_Block is\n \n+   pragma Preelaborate;\n+\n    ----------------------------\n    -- Ada File Control Block --\n    ----------------------------"}, {"sha": "4fc72cfd9b5c8ae670354a62b8ad823af09f12f5", "filename": "gcc/ada/s-fileio.adb", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f0cb16c658263c398773c27387adc6b10b236c/gcc%2Fada%2Fs-fileio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f0cb16c658263c398773c27387adc6b10b236c/gcc%2Fada%2Fs-fileio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fileio.adb?ref=a6f0cb16c658263c398773c27387adc6b10b236c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -98,14 +98,6 @@ package body System.File_IO is\n      (C, text_translation_required, \"__gnat_text_translation_required\");\n    --  If true, add appropriate suffix to control string for Open\n \n-   function Get_Case_Sensitive return Integer;\n-   pragma Import (C, Get_Case_Sensitive,\n-                  \"__gnat_get_file_names_case_sensitive\");\n-   File_Names_Case_Sensitive : constant Boolean := Get_Case_Sensitive /= 0;\n-   --  Set to indicate whether the operating system convention is for file\n-   --  names to be case sensitive (e.g., in Unix, set True), or non case\n-   --  sensitive (e.g., in Windows, set False).\n-\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n@@ -757,6 +749,17 @@ package body System.File_IO is\n       pragma Import (C, Tmp_Name, \"__gnat_tmp_name\");\n       --  Set buffer (a String address) with a temporary filename\n \n+      function Get_Case_Sensitive return Integer;\n+      pragma Import (C, Get_Case_Sensitive,\n+                     \"__gnat_get_file_names_case_sensitive\");\n+\n+      File_Names_Case_Sensitive : constant Boolean := Get_Case_Sensitive /= 0;\n+      --  Set to indicate whether the operating system convention is for file\n+      --  names to be case sensitive (e.g., in Unix, set True), or not case\n+      --  sensitive (e.g., in Windows, set False). Declared locally to avoid\n+      --  breaking the Preelaborate rule that disallows function calls at the\n+      --  library level.\n+\n       Stream : FILEs := C_Stream;\n       --  Stream which we open in response to this request\n "}, {"sha": "d0ecaa9c1a9604202d9be957b4f943277784f964", "filename": "gcc/ada/s-fileio.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f0cb16c658263c398773c27387adc6b10b236c/gcc%2Fada%2Fs-fileio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f0cb16c658263c398773c27387adc6b10b236c/gcc%2Fada%2Fs-fileio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fileio.ads?ref=a6f0cb16c658263c398773c27387adc6b10b236c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,6 +38,8 @@ with System.File_Control_Block;\n \n package System.File_IO is\n \n+   pragma Preelaborate;\n+\n    package FCB renames System.File_Control_Block;\n    package ICS renames Interfaces.C_Streams;\n "}, {"sha": "df8ad9b329cdbd3f19a1ac9625a51eda8fbd48bc", "filename": "gcc/ada/s-os_lib.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f0cb16c658263c398773c27387adc6b10b236c/gcc%2Fada%2Fs-os_lib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f0cb16c658263c398773c27387adc6b10b236c/gcc%2Fada%2Fs-os_lib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.ads?ref=a6f0cb16c658263c398773c27387adc6b10b236c", "patch": "@@ -56,6 +56,8 @@ with System.Strings;\n package System.OS_Lib is\n    pragma Elaborate_Body (OS_Lib);\n \n+   pragma Preelaborate;\n+\n    -----------------------\n    -- String Operations --\n    -----------------------"}]}