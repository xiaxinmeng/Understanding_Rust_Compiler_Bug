{"sha": "0d48657d7378a4b1cb25ed181bca8020eae520f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ0ODY1N2Q3Mzc4YTRiMWNiMjVlZDE4MWJjYTgwMjBlYWU1MjBmMQ==", "commit": {"author": {"name": "Simon Baldwin", "email": "simonb@google.com", "date": "2008-07-28T11:55:11Z"}, "committer": {"name": "Simon Baldwin", "email": "simonb@gcc.gnu.org", "date": "2008-07-28T11:55:11Z"}, "message": "c-pragma.c (handle_pragma_message): New function.\n\n\n\t* c-pragma.c (handle_pragma_message): New function.\n\t(init_pragma): Register handle_pragma_message.\n\t* doc/extend.texi (Diagnostic Pragmas): Added #pragma message\n\tdocumentation.\n\n\t* gcc.dg/pragma-message.c: New.\n\nFrom-SVN: r138206", "tree": {"sha": "33aa42b4f5b37d44f904ae5deec152d79f68e2e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33aa42b4f5b37d44f904ae5deec152d79f68e2e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d48657d7378a4b1cb25ed181bca8020eae520f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d48657d7378a4b1cb25ed181bca8020eae520f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d48657d7378a4b1cb25ed181bca8020eae520f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d48657d7378a4b1cb25ed181bca8020eae520f1/comments", "author": null, "committer": null, "parents": [{"sha": "17df49a3e95d79d33e62e33ef83159d1c7d4e4a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17df49a3e95d79d33e62e33ef83159d1c7d4e4a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17df49a3e95d79d33e62e33ef83159d1c7d4e4a1"}], "stats": {"total": 128, "additions": 128, "deletions": 0}, "files": [{"sha": "545f7112090ce7a265955782c3517553097ddab7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d48657d7378a4b1cb25ed181bca8020eae520f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d48657d7378a4b1cb25ed181bca8020eae520f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d48657d7378a4b1cb25ed181bca8020eae520f1", "patch": "@@ -1,3 +1,10 @@\n+2008-07-28  Simon Baldwin  <simonb@google.com>\n+\n+\t* c-pragma.c (handle_pragma_message): New function.\n+\t(init_pragma): Register handle_pragma_message.\n+\t* doc/extend.texi (Diagnostic Pragmas): Added #pragma message\n+\tdocumentation.\n+\n 2008-07-27  Victor Kaplansky  <victork@il.ibm.com>\n \n \tPR tree-optimization/35252"}, {"sha": "b2bbfae827672f8f2f66f25b8a5d8d8ae57a32d2", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d48657d7378a4b1cb25ed181bca8020eae520f1/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d48657d7378a4b1cb25ed181bca8020eae520f1/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=0d48657d7378a4b1cb25ed181bca8020eae520f1", "patch": "@@ -1173,6 +1173,39 @@ handle_pragma_optimize(cpp_reader *ARG_UNUSED(dummy))\n     }\n }\n \n+/* Print a plain user-specified message.  */\n+\n+static void\n+handle_pragma_message (cpp_reader *ARG_UNUSED(dummy))\n+{\n+  enum cpp_ttype token;\n+  tree x, message = 0;\n+\n+  token = pragma_lex (&x);\n+  if (token == CPP_OPEN_PAREN)\n+    {\n+      token = pragma_lex (&x);\n+      if (token == CPP_STRING)\n+        message = x;\n+      else\n+        GCC_BAD (\"expected a string after %<#pragma message%>\");\n+      if (pragma_lex (&x) != CPP_CLOSE_PAREN)\n+        GCC_BAD (\"malformed %<#pragma message%>, ignored\");\n+    }\n+  else if (token == CPP_STRING)\n+    message = x;\n+  else\n+    GCC_BAD (\"expected a string after %<#pragma message%>\");\n+\n+  gcc_assert (message);\n+\n+  if (pragma_lex (&x) != CPP_EOF)\n+    warning (OPT_Wpragmas, \"junk at end of %<#pragma message%>\");\n+\n+  if (TREE_STRING_LENGTH (message) > 1)\n+    inform (\"#pragma message: %s\", TREE_STRING_POINTER (message));\n+}\n+\n /* A vector of registered pragma callbacks.  */\n \n DEF_VEC_O (pragma_handler);\n@@ -1341,6 +1374,8 @@ init_pragma (void)\n   c_register_pragma_with_expansion (0, \"redefine_extname\", handle_pragma_redefine_extname);\n   c_register_pragma (0, \"extern_prefix\", handle_pragma_extern_prefix);\n \n+  c_register_pragma_with_expansion (0, \"message\", handle_pragma_message);\n+\n #ifdef REGISTER_TARGET_PRAGMAS\n   REGISTER_TARGET_PRAGMAS ();\n #endif"}, {"sha": "4c82dc60f2c6eda4bd814b95e8960b397fcc2885", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d48657d7378a4b1cb25ed181bca8020eae520f1/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d48657d7378a4b1cb25ed181bca8020eae520f1/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=0d48657d7378a4b1cb25ed181bca8020eae520f1", "patch": "@@ -11616,6 +11616,35 @@ strict control over project policies.\n \n @end table\n \n+GCC also offers a simple mechanism for printing messages during\n+compilation.\n+\n+@table @code\n+@item #pragma message @var{string}\n+@cindex pragma, diagnostic\n+\n+Prints @var{string} as a compiler message on compilation.  The message\n+is informational only, and is neither a compilation warning nor an error.\n+\n+@smallexample\n+#pragma message \"Compiling \" __FILE__ \"...\"\n+@end smallexample\n+\n+@var{string} may be parenthesized, and is printed with location\n+information.  For example,\n+\n+@smallexample\n+#define DO_PRAGMA(x) _Pragma (#x)\n+#define TODO(x) DO_PRAGMA(message (\"TODO - \" #x))\n+\n+TODO(Remember to fix this)\n+@end smallexample\n+\n+prints @samp{/tmp/file.c:4: note: #pragma message:\n+TODO - Remember to fix this}.\n+\n+@end table\n+\n @node Visibility Pragmas\n @subsection Visibility Pragmas\n "}, {"sha": "66d321255334a6a42f436b05e3c3d248916e1fae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d48657d7378a4b1cb25ed181bca8020eae520f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d48657d7378a4b1cb25ed181bca8020eae520f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0d48657d7378a4b1cb25ed181bca8020eae520f1", "patch": "@@ -1,3 +1,7 @@\n+2008-07-28  Simon Baldwin  <simonb@google.com>\n+\n+\t* gcc.dg/pragma-message.c: New.\n+\n 2008-07-27  Victor Kaplansky  <victork@il.ibm.com>\n \n \tPR tree-optimization/35252"}, {"sha": "0f9c6bf447b03722997dbc957bbf87c2052b2fcf", "filename": "gcc/testsuite/gcc.dg/pragma-message.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d48657d7378a4b1cb25ed181bca8020eae520f1/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-message.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d48657d7378a4b1cb25ed181bca8020eae520f1/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-message.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-message.c?ref=0d48657d7378a4b1cb25ed181bca8020eae520f1", "patch": "@@ -0,0 +1,53 @@\n+/* Test that #pragma message \"...\" writes compiler messages. */\n+\n+#pragma message                  /* { dg-warning \"expected a string\" } */\n+#pragma message 0                /* { dg-warning \"expected a string\" } */\n+#pragma message id               /* { dg-warning \"expected a string\" } */\n+#pragma message (                /* { dg-warning \"expected a string\" } */\n+#pragma message (0               /* { dg-warning \"expected a string\" } */\n+#pragma message (id              /* { dg-warning \"expected a string\" } */\n+#pragma message ()               /* { dg-warning \"expected a string\" } */\n+#pragma message (0)              /* { dg-warning \"expected a string\" } */\n+#pragma message (id)             /* { dg-warning \"expected a string\" } */\n+\n+/* gcc prefixes '#pragma message ...' output with filename and line number,\n+   then 'note: #pragma message: ', allowing dg-message to check output.\n+   If unexpected pragma messages are printed (anything not caught by a\n+   matching dg-message), dejagnu will report these as excess errors.  */\n+\n+#pragma message \"\n+/* { dg-error \"missing terminating\" \"\" { target *-*-* } 18 } */\n+/* { dg-warning \"expected a string\" \"\" { target *-*-* } 18 } */\n+#pragma message \"Bad 1\n+/* { dg-error \"missing terminating\" \"\" { target *-*-* } 21 } */\n+/* { dg-warning \"expected a string\" \"\" { target *-*-* } 21 } */\n+#pragma message (\"Bad 2\n+/* { dg-error \"missing terminating\" \"\" { target *-*-* } 24 } */\n+/* { dg-warning \"expected a string\" \"\" { target *-*-* } 24 } */\n+#pragma message (\"Bad 3\"\n+/* { dg-warning \"malformed '#pragma message\" \"\" { target *-*-* } 27 } */\n+\n+#pragma message \"\" junk\n+/* { dg-warning \"junk at end of '#pragma message'\" \"\" { target *-*-* } 30 } */\n+\n+#pragma message (\"\") junk\n+/* { dg-warning \"junk at end of '#pragma message'\" \"\" { target *-*-* } 33 } */\n+\n+#pragma message \"\"               /* No output expected for empty messages.  */\n+#pragma message (\"\")\n+\n+#pragma message \"Okay 1\"         /* { dg-message \"Okay 1\" } */\n+#pragma message (\"Okay 2\")       /* { dg-message \"Okay 2\" } */\n+#define THREE \"3\"\n+#pragma message (\"Okay \" THREE)  /* { dg-message \"Okay 3\" } */\n+\n+/* Create a TODO() that prints a message on compilation.  */\n+#define DO_PRAGMA(x) _Pragma (#x)\n+#define TODO(x) DO_PRAGMA(message (\"TODO - \" #x))\n+TODO(Okay 4)                     /* { dg-message \"TODO - Okay 4\" } */\n+\n+#if 0\n+#pragma message (\"Not printed\")\n+#endif\n+\n+int unused;  /* Silence `ISO C forbids an empty translation unit' warning.  */"}]}