{"sha": "9ce71c6fbd07e2d71d9e921e40b53d944f1f64d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNlNzFjNmZiZDA3ZTJkNzFkOWU5MjFlNDBiNTNkOTQ0ZjFmNjRkNA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@cygnus.co.uk", "date": "1999-10-19T16:47:23Z"}, "committer": {"name": "Bernd Schmidt", "email": "crux@gcc.gnu.org", "date": "1999-10-19T16:47:23Z"}, "message": "arm.c: Verify modes on operands in predicates\n\nFrom-SVN: r30088", "tree": {"sha": "cfb703ae6f1009de22feda8cb2b2c903799b6ca5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfb703ae6f1009de22feda8cb2b2c903799b6ca5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ce71c6fbd07e2d71d9e921e40b53d944f1f64d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ce71c6fbd07e2d71d9e921e40b53d944f1f64d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ce71c6fbd07e2d71d9e921e40b53d944f1f64d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ce71c6fbd07e2d71d9e921e40b53d944f1f64d4/comments", "author": null, "committer": null, "parents": [{"sha": "3a2ea2588f030d5d810f454248616d69f10968d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2ea2588f030d5d810f454248616d69f10968d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a2ea2588f030d5d810f454248616d69f10968d2"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "dcc0393c8e6dcf60e6af4de3864d3495ae8ad2b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce71c6fbd07e2d71d9e921e40b53d944f1f64d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce71c6fbd07e2d71d9e921e40b53d944f1f64d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ce71c6fbd07e2d71d9e921e40b53d944f1f64d4", "patch": "@@ -1,3 +1,10 @@\n+Tue Oct 19 18:42:58 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n+\n+\t* arm.c (fpu_rhs_operand): Verify modes.\n+\t(fpu_add_operand): Likewise.\n+\t(di_operand): Likewise.\n+\t(soft_df_operand): Likewise.\n+\n Tue Oct 19 15:26:11 1999  Richard Earnshaw  (rearnsha@arm.com)\n \n \t* arm.c (arm_return_in_memory): APCS rules state that the elements"}, {"sha": "27fc21d939a7436839700af05cca187071bf77ed", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce71c6fbd07e2d71d9e921e40b53d944f1f64d4/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce71c6fbd07e2d71d9e921e40b53d944f1f64d4/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9ce71c6fbd07e2d71d9e921e40b53d944f1f64d4", "patch": "@@ -2213,8 +2213,12 @@ fpu_rhs_operand (op, mode)\n {\n   if (s_register_operand (op, mode))\n     return TRUE;\n-  else if (GET_CODE (op) == CONST_DOUBLE)\n-    return (const_double_rtx_ok_for_fpu (op));\n+\n+  if (GET_MODE (op) != mode && mode != VOIDmode)\n+    return FALSE;\n+\n+  if (GET_CODE (op) == CONST_DOUBLE)\n+    return const_double_rtx_ok_for_fpu (op);\n \n   return FALSE;\n }\n@@ -2226,7 +2230,11 @@ fpu_add_operand (op, mode)\n {\n   if (s_register_operand (op, mode))\n     return TRUE;\n-  else if (GET_CODE (op) == CONST_DOUBLE)\n+\n+  if (GET_MODE (op) != mode && mode != VOIDmode)\n+    return FALSE;\n+\n+  if (GET_CODE (op) == CONST_DOUBLE)\n     return (const_double_rtx_ok_for_fpu (op) \n \t    || neg_const_double_rtx_ok_for_fpu (op));\n \n@@ -2261,6 +2269,9 @@ di_operand (op, mode)\n   if (s_register_operand (op, mode))\n     return TRUE;\n \n+  if (mode != VOIDmode && GET_MODE (op) != VOIDmode && GET_MODE (op) != DImode)\n+    return FALSE;\n+\n   if (GET_CODE (op) == SUBREG)\n     op = SUBREG_REG (op);\n \n@@ -2291,9 +2302,12 @@ soft_df_operand (op, mode)\n   if (s_register_operand (op, mode))\n     return TRUE;\n \n+  if (mode != VOIDmode && GET_MODE (op) != mode)\n+    return FALSE;\n+\n   if (GET_CODE (op) == SUBREG)\n     op = SUBREG_REG (op);\n-\n+  \n   switch (GET_CODE (op))\n     {\n     case CONST_DOUBLE:"}]}