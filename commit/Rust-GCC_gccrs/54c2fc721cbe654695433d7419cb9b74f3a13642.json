{"sha": "54c2fc721cbe654695433d7419cb9b74f3a13642", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRjMmZjNzIxY2JlNjU0Njk1NDMzZDc0MTljYjliNzRmM2ExMzY0Mg==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@tuliptree.org", "date": "2003-06-13T22:13:07Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-06-13T22:13:07Z"}, "message": "re PR bootstrap/10983 ([SPARC64] ICE in verify_wide_reg, at flow.c:551, while compiling libjava)\n\n\tPR bootstrap/10983\n\t* combine.c (make_extraction): Use gen_lowpart_for_combine\n\twhen extracting from a REG and not in the destination of a SET.\n\nCo-Authored-By: Eric Botcazou <ebotcazou@libertysurf.fr>\n\nFrom-SVN: r67916", "tree": {"sha": "2f6993a5122c450524b49fbe107c8f433c414d67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f6993a5122c450524b49fbe107c8f433c414d67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54c2fc721cbe654695433d7419cb9b74f3a13642", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54c2fc721cbe654695433d7419cb9b74f3a13642", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54c2fc721cbe654695433d7419cb9b74f3a13642", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54c2fc721cbe654695433d7419cb9b74f3a13642/comments", "author": {"login": "jim-wilson", "id": 11654017, "node_id": "MDQ6VXNlcjExNjU0MDE3", "avatar_url": "https://avatars.githubusercontent.com/u/11654017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jim-wilson", "html_url": "https://github.com/jim-wilson", "followers_url": "https://api.github.com/users/jim-wilson/followers", "following_url": "https://api.github.com/users/jim-wilson/following{/other_user}", "gists_url": "https://api.github.com/users/jim-wilson/gists{/gist_id}", "starred_url": "https://api.github.com/users/jim-wilson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jim-wilson/subscriptions", "organizations_url": "https://api.github.com/users/jim-wilson/orgs", "repos_url": "https://api.github.com/users/jim-wilson/repos", "events_url": "https://api.github.com/users/jim-wilson/events{/privacy}", "received_events_url": "https://api.github.com/users/jim-wilson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7e7de68b893876ebc06e378fcd3a7090fddd0865", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e7de68b893876ebc06e378fcd3a7090fddd0865", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e7de68b893876ebc06e378fcd3a7090fddd0865"}], "stats": {"total": 56, "additions": 34, "deletions": 22}, "files": [{"sha": "9a5424692e3dd806b1116b27af10ac6e59884d6e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c2fc721cbe654695433d7419cb9b74f3a13642/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c2fc721cbe654695433d7419cb9b74f3a13642/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54c2fc721cbe654695433d7419cb9b74f3a13642", "patch": "@@ -1,3 +1,10 @@\n+2003-06-13  Jim Wilson  <wilson@tuliptree.org>\n+            Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR bootstrap/10983\n+\t* combine.c (make_extraction): Use gen_lowpart_for_combine\n+\twhen extracting from a REG and not in the destination of a SET.\n+\n 2003-06-13  Doug Evans  <dje@sebabeach.org>\n \n \t* tsystem.h (abort): Declare in inhibit_libc case to remove build"}, {"sha": "16385767e66a1ff2055d09066667574b27281183", "filename": "gcc/combine.c", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c2fc721cbe654695433d7419cb9b74f3a13642/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c2fc721cbe654695433d7419cb9b74f3a13642/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=54c2fc721cbe654695433d7419cb9b74f3a13642", "patch": "@@ -6139,30 +6139,35 @@ make_extraction (enum machine_mode mode, rtx inner, HOST_WIDE_INT pos,\n \t}\n       else if (GET_CODE (inner) == REG)\n \t{\n-\t  /* We can't call gen_lowpart_for_combine here since we always want\n-\t     a SUBREG and it would sometimes return a new hard register.  */\n \t  if (tmode != inner_mode)\n \t    {\n-\t      HOST_WIDE_INT final_word = pos / BITS_PER_WORD;\n-\n-\t      if (WORDS_BIG_ENDIAN\n-\t\t  && GET_MODE_SIZE (inner_mode) > UNITS_PER_WORD)\n-\t\tfinal_word = ((GET_MODE_SIZE (inner_mode)\n-\t\t\t       - GET_MODE_SIZE (tmode))\n-\t\t\t      / UNITS_PER_WORD) - final_word;\n-\n-\t      final_word *= UNITS_PER_WORD;\n-\t      if (BYTES_BIG_ENDIAN &&\n-\t\t  GET_MODE_SIZE (inner_mode) > GET_MODE_SIZE (tmode))\n-\t\tfinal_word += (GET_MODE_SIZE (inner_mode)\n-\t\t\t       - GET_MODE_SIZE (tmode)) % UNITS_PER_WORD;\n-\n-\t      /* Avoid creating invalid subregs, for example when\n-\t\t simplifying (x>>32)&255.  */\n-\t      if (final_word >= GET_MODE_SIZE (inner_mode))\n-\t\treturn NULL_RTX;\n-\n-\t      new = gen_rtx_SUBREG (tmode, inner, final_word);\n+\t      if (in_dest)\n+\t\t{\n+\t\t  /* We can't call gen_lowpart_for_combine here since we always want\n+\t\t     a SUBREG and it would sometimes return a new hard register.  */\n+\t\t  HOST_WIDE_INT final_word = pos / BITS_PER_WORD;\n+\n+\t\t  if (WORDS_BIG_ENDIAN\n+\t\t      && GET_MODE_SIZE (inner_mode) > UNITS_PER_WORD)\n+\t\t    final_word = ((GET_MODE_SIZE (inner_mode)\n+\t\t\t\t   - GET_MODE_SIZE (tmode))\n+\t\t\t\t  / UNITS_PER_WORD) - final_word;\n+\n+\t\t  final_word *= UNITS_PER_WORD;\n+\t\t  if (BYTES_BIG_ENDIAN &&\n+\t\t      GET_MODE_SIZE (inner_mode) > GET_MODE_SIZE (tmode))\n+\t\t    final_word += (GET_MODE_SIZE (inner_mode)\n+\t\t\t\t   - GET_MODE_SIZE (tmode)) % UNITS_PER_WORD;\n+\n+\t\t  /* Avoid creating invalid subregs, for example when\n+\t\t     simplifying (x>>32)&255.  */\n+\t\t  if (final_word >= GET_MODE_SIZE (inner_mode))\n+\t\t    return NULL_RTX;\n+\n+\t\t  new = gen_rtx_SUBREG (tmode, inner, final_word);\n+\t\t}\n+\t      else\n+\t\tnew = gen_lowpart_for_combine (tmode, inner);\n \t    }\n \t  else\n \t    new = inner;"}]}