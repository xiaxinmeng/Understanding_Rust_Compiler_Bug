{"sha": "2591db658c39d384b250273edf597d1d6344c8f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU5MWRiNjU4YzM5ZDM4NGIyNTAyNzNlZGY1OTdkMWQ2MzQ0YzhmOA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2005-08-20T10:31:42Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2005-08-20T10:31:42Z"}, "message": "arm.h (arm_stack_offsets): Add locals_base field.\n\n\t* arm.h (arm_stack_offsets): Add locals_base field.\n\t* arm.c (arm_get_frame_offsets): Compute it.\n\t(thumb_compute_initial_elimination offset): Make the Thumb frame\n\tpointer point to the base of the local variables.\n\t(thumb_expand_prologue): Update accordingly.\n\t(thumb_expand_epilogue): Likewise.\n\n\t* arm.md (thumb_movhi_clobber): Make this insn a define_expand.  Change\n\tmode of clobbered scratch to DImode.  Handle a case that's known to\n\tneed this.\n\nFrom-SVN: r103301", "tree": {"sha": "604eb1e500ff62801c72486adca54f29901c087e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/604eb1e500ff62801c72486adca54f29901c087e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2591db658c39d384b250273edf597d1d6344c8f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2591db658c39d384b250273edf597d1d6344c8f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2591db658c39d384b250273edf597d1d6344c8f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2591db658c39d384b250273edf597d1d6344c8f8/comments", "author": null, "committer": null, "parents": [{"sha": "fc437ce97f748ab58c9acbf32483c268ac97e320", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc437ce97f748ab58c9acbf32483c268ac97e320", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc437ce97f748ab58c9acbf32483c268ac97e320"}], "stats": {"total": 103, "additions": 73, "deletions": 30}, "files": [{"sha": "795baf1f3048ec3a7d9ed79038540bb7afa84dcc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2591db658c39d384b250273edf597d1d6344c8f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2591db658c39d384b250273edf597d1d6344c8f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2591db658c39d384b250273edf597d1d6344c8f8", "patch": "@@ -1,3 +1,16 @@\n+2005-08-20  Richard Earnshaw  <richard.earnshaw@arm.com>\n+\n+\t* arm.h (arm_stack_offsets): Add locals_base field.\n+\t* arm.c (arm_get_frame_offsets): Compute it.\n+\t(thumb_compute_initial_elimination offset): Make the Thumb frame\n+\tpointer point to the base of the local variables.\n+\t(thumb_expand_prologue): Update accordingly.\n+\t(thumb_expand_epilogue): Likewise.\n+\n+\t* arm.md (thumb_movhi_clobber): Make this insn a define_expand.  Change\n+\tmode of clobbered scratch to DImode.  Handle a case that's known to\n+\tneed this.\n+\n 2005-08-19  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.md (gt0<mode>): Delete."}, {"sha": "9037838d8cb9735ee69b70686bd99c43d8f5892d", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 45, "deletions": 24, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2591db658c39d384b250273edf597d1d6344c8f8/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2591db658c39d384b250273edf597d1d6344c8f8/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=2591db658c39d384b250273edf597d1d6344c8f8", "patch": "@@ -9992,7 +9992,7 @@ thumb_force_lr_save (void)\n                             |    | \\\n                             |    |   local\n                             |    |   variables\n-                            |    | /\n+     locals base pointer -> |    | /\n                               --\n                             |    | \\\n                             |    |   outgoing\n@@ -10109,8 +10109,9 @@ arm_get_frame_offsets (void)\n       && (offsets->soft_frame & 7))\n     offsets->soft_frame += 4;\n \n-  offsets->outgoing_args = offsets->soft_frame + frame_size\n-\t\t\t   + current_function_outgoing_args_size;\n+  offsets->locals_base = offsets->soft_frame + frame_size;\n+  offsets->outgoing_args = (offsets->locals_base\n+\t\t\t    + current_function_outgoing_args_size);\n \n   if (ARM_DOUBLEWORD_ALIGN)\n     {\n@@ -13158,8 +13159,10 @@ arm_init_expanders (void)\n }\n \n \n-/* Like arm_compute_initial_elimination offset.  Simpler because\n-   THUMB_HARD_FRAME_POINTER isn't actually the ABI specified frame pointer.  */\n+/* Like arm_compute_initial_elimination offset.  Simpler because there\n+   isn't an ABI specified frame pointer for Thumb.  Instead, we set it\n+   to point at the base of the local variables after static stack\n+   space for a function has been allocated.  */\n \n HOST_WIDE_INT\n thumb_compute_initial_elimination_offset (unsigned int from, unsigned int to)\n@@ -13179,10 +13182,12 @@ thumb_compute_initial_elimination_offset (unsigned int from, unsigned int to)\n \tcase FRAME_POINTER_REGNUM:\n \t  return offsets->soft_frame - offsets->saved_args;\n \n-\tcase THUMB_HARD_FRAME_POINTER_REGNUM:\n \tcase ARM_HARD_FRAME_POINTER_REGNUM:\n \t  return offsets->saved_regs - offsets->saved_args;\n \n+\tcase THUMB_HARD_FRAME_POINTER_REGNUM:\n+\t  return offsets->locals_base - offsets->saved_args;\n+\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n@@ -13194,10 +13199,12 @@ thumb_compute_initial_elimination_offset (unsigned int from, unsigned int to)\n \tcase STACK_POINTER_REGNUM:\n \t  return offsets->outgoing_args - offsets->soft_frame;\n \n-\tcase THUMB_HARD_FRAME_POINTER_REGNUM:\n \tcase ARM_HARD_FRAME_POINTER_REGNUM:\n \t  return offsets->saved_regs - offsets->soft_frame;\n \n+\tcase THUMB_HARD_FRAME_POINTER_REGNUM:\n+\t  return offsets->locals_base - offsets->soft_frame;\n+\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n@@ -13239,18 +13246,11 @@ thumb_expand_prologue (void)\n   if (flag_pic)\n     arm_load_pic_register (live_regs_mask);\n \n-  offsets = arm_get_frame_offsets ();\n-\n-  if (frame_pointer_needed)\n-    {\n-      insn = emit_insn (gen_movsi (hard_frame_pointer_rtx,\n-\t\t\t\t   stack_pointer_rtx));\n-      RTX_FRAME_RELATED_P (insn) = 1;\n-    }\n-  else if (CALLER_INTERWORKING_SLOT_SIZE > 0)\n+  if (!frame_pointer_needed && CALLER_INTERWORKING_SLOT_SIZE > 0)\n     emit_move_insn (gen_rtx_REG (Pmode, ARM_HARD_FRAME_POINTER_REGNUM),\n \t\t    stack_pointer_rtx);\n \n+  offsets = arm_get_frame_offsets ();\n   amount = offsets->outgoing_args - offsets->saved_regs;\n   if (amount)\n     {\n@@ -13336,12 +13336,29 @@ thumb_expand_prologue (void)\n \t\t\t\t     REG_NOTES (insn));\n \t    }\n \t}\n-      /* If the frame pointer is needed, emit a special barrier that\n-\t will prevent the scheduler from moving stores to the frame\n-\t before the stack adjustment.  */\n-      if (frame_pointer_needed)\n-\temit_insn (gen_stack_tie (stack_pointer_rtx,\n-\t\t\t\t  hard_frame_pointer_rtx));\n+    }\n+\n+  if (frame_pointer_needed)\n+    {\n+      amount = offsets->outgoing_args - offsets->locals_base;\n+      \n+      if (amount < 1024)\n+\tinsn = emit_insn (gen_addsi3 (hard_frame_pointer_rtx,\n+\t\t\t\t      stack_pointer_rtx, GEN_INT (amount)));\n+      else\n+\t{\n+\t  emit_insn (gen_movsi (hard_frame_pointer_rtx, GEN_INT (amount)));\n+\t  insn = emit_insn (gen_addsi3 (hard_frame_pointer_rtx,\n+\t\t\t\t\thard_frame_pointer_rtx,\n+\t\t\t\t\tstack_pointer_rtx));\n+\t  dwarf = gen_rtx_SET (SImode, hard_frame_pointer_rtx,\n+\t\t\t       plus_constant (stack_pointer_rtx, amount));\n+\t  RTX_FRAME_RELATED_P (dwarf) = 1;\n+\t  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR, dwarf,\n+\t\t\t\t\t\tREG_NOTES (insn));\n+\t}\n+\n+      RTX_FRAME_RELATED_P (insn) = 1;\n     }\n \n   if (current_function_profile || !TARGET_SCHED_PROLOG)\n@@ -13373,8 +13390,12 @@ thumb_expand_epilogue (void)\n   amount = offsets->outgoing_args - offsets->saved_regs;\n \n   if (frame_pointer_needed)\n-    emit_insn (gen_movsi (stack_pointer_rtx, hard_frame_pointer_rtx));\n-  else if (amount)\n+    {\n+      emit_insn (gen_movsi (stack_pointer_rtx, hard_frame_pointer_rtx));\n+      amount = offsets->locals_base - offsets->saved_regs;\n+    }\n+  \n+  if (amount)\n     {\n       if (amount < 512)\n \temit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,"}, {"sha": "64b5e373d3c3d2dc6b4bee0540c526301e71d7a4", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2591db658c39d384b250273edf597d1d6344c8f8/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2591db658c39d384b250273edf597d1d6344c8f8/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=2591db658c39d384b250273edf597d1d6344c8f8", "patch": "@@ -1476,6 +1476,7 @@ typedef struct arm_stack_offsets GTY(())\n   int frame;\t\t/* ARM_HARD_FRAME_POINTER_REGNUM.  */\n   int saved_regs;\n   int soft_frame;\t/* FRAME_POINTER_REGNUM.  */\n+  int locals_base;\t/* THUMB_HARD_FRAME_POINTER_REGNUM.  */\n   int outgoing_args;\t/* STACK_POINTER_REGNUM.  */\n }\n arm_stack_offsets;"}, {"sha": "3bc62de65e9825dedd5ad99fa4f17f8544142c30", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2591db658c39d384b250273edf597d1d6344c8f8/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2591db658c39d384b250273edf597d1d6344c8f8/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=2591db658c39d384b250273edf597d1d6344c8f8", "patch": "@@ -4951,13 +4951,21 @@\n   [(set_attr \"predicable\" \"yes\")]\n )\n \n-(define_insn \"thumb_movhi_clobber\"\n-  [(set (match_operand:HI     0 \"memory_operand\"   \"=m\")\n-\t(match_operand:HI     1 \"register_operand\" \"l\"))\n-   (clobber (match_operand:SI 2 \"register_operand\" \"=&l\"))]\n+(define_expand \"thumb_movhi_clobber\"\n+  [(set (match_operand:HI     0 \"memory_operand\"   \"\")\n+\t(match_operand:HI     1 \"register_operand\" \"\"))\n+   (clobber (match_operand:DI 2 \"register_operand\" \"\"))]\n   \"TARGET_THUMB\"\n-  \"*\n-  gcc_unreachable ();\"\n+  \"\n+  if (strict_memory_address_p (HImode, XEXP (operands[0], 0))\n+      && REGNO (operands[1]) <= LAST_LO_REGNUM)\n+    {\n+      emit_insn (gen_movhi (operands[0], operands[1]));\n+      DONE;\n+    }\n+  /* XXX Fixme, need to handle other cases here as well.  */\n+  gcc_unreachable ();\n+  \"\n )\n \t\n ;; We use a DImode scratch because we may occasionally need an additional"}]}