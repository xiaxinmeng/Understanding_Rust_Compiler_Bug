{"sha": "8dc35712198be33bcd9c89f8718dbbf108ff8fb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRjMzU3MTIxOThiZTMzYmNkOWM4OWY4NzE4ZGJiZjEwOGZmOGZiMQ==", "commit": {"author": {"name": "Alan Hayward", "email": "alan.hayward@arm.com", "date": "2016-06-15T15:45:47Z"}, "committer": {"name": "Alan Hayward", "email": "alahay01@gcc.gnu.org", "date": "2016-06-15T15:45:47Z"}, "message": "re PR tree-optimization/71483 (g++ ICE at -O3 on valid code on x86_64-linux-gnu with \u201cFloating point exception\u201d)\n\n2016-06-15  Alan Hayward  <alan.hayward@arm.com>\n\ngcc/\n\tPR tree-optimization/71483\n\t* tree-vect-loop.c (vectorizable_live_operation): Pick correct index\n\tfor slp\n\ntestsuite/\n\tPR tree-optimization/71483\n\t* g++.dg/vect/pr71483.c: New\n\nFrom-SVN: r237483", "tree": {"sha": "e3c64e29055216e3e44e08a56e4b3c0218fd2dbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3c64e29055216e3e44e08a56e4b3c0218fd2dbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8dc35712198be33bcd9c89f8718dbbf108ff8fb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dc35712198be33bcd9c89f8718dbbf108ff8fb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dc35712198be33bcd9c89f8718dbbf108ff8fb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dc35712198be33bcd9c89f8718dbbf108ff8fb1/comments", "author": {"login": "a74nh", "id": 4146708, "node_id": "MDQ6VXNlcjQxNDY3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a74nh", "html_url": "https://github.com/a74nh", "followers_url": "https://api.github.com/users/a74nh/followers", "following_url": "https://api.github.com/users/a74nh/following{/other_user}", "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}", "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions", "organizations_url": "https://api.github.com/users/a74nh/orgs", "repos_url": "https://api.github.com/users/a74nh/repos", "events_url": "https://api.github.com/users/a74nh/events{/privacy}", "received_events_url": "https://api.github.com/users/a74nh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b8911cb870585c08881d3c424cb1e508e99b9ace", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8911cb870585c08881d3c424cb1e508e99b9ace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8911cb870585c08881d3c424cb1e508e99b9ace"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "88c1e0f253b6fc9c99923cf05ec80f84f6e4cd84", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc35712198be33bcd9c89f8718dbbf108ff8fb1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc35712198be33bcd9c89f8718dbbf108ff8fb1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8dc35712198be33bcd9c89f8718dbbf108ff8fb1", "patch": "@@ -1,3 +1,9 @@\n+2016-06-15  Alan Hayward  <alan.hayward@arm.com>\n+\n+\tPR tree-optimization/71483\n+\t* tree-vect-loop.c (vectorizable_live_operation): Pick correct index\n+\tfor slp\n+\n 2016-06-15  Martin Liska  <mliska@suse.cz>\n \n \t* predict.c (tree_predict_by_opcode): Call predict_edge_def"}, {"sha": "60c3192c90bd827d1ec91ace1bad0abac0bce608", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc35712198be33bcd9c89f8718dbbf108ff8fb1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc35712198be33bcd9c89f8718dbbf108ff8fb1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8dc35712198be33bcd9c89f8718dbbf108ff8fb1", "patch": "@@ -1,3 +1,8 @@\n+2016-06-15  Alan Hayward  <alan.hayward@arm.com>\n+\n+\tPR tree-optimization/71483\n+\t* g++.dg/vect/pr71483.c: New\n+\n 2016-06-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/70202"}, {"sha": "77f879c9a89b8b41ef9dde3c3435918572dc8d01", "filename": "gcc/testsuite/g++.dg/vect/pr71483.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc35712198be33bcd9c89f8718dbbf108ff8fb1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr71483.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc35712198be33bcd9c89f8718dbbf108ff8fb1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr71483.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr71483.c?ref=8dc35712198be33bcd9c89f8718dbbf108ff8fb1", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+int b, c, d;\n+short *e;\n+void fn1() {\n+  for (; b; b--) {\n+    d = *e >> 2;\n+    *e++ = d;\n+    c = *e;\n+    *e++ = d;\n+  }\n+}"}, {"sha": "a2413bf9c678d11cc2ffd22bc7d984e911831804", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc35712198be33bcd9c89f8718dbbf108ff8fb1/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc35712198be33bcd9c89f8718dbbf108ff8fb1/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=8dc35712198be33bcd9c89f8718dbbf108ff8fb1", "patch": "@@ -6368,24 +6368,20 @@ vectorizable_live_operation (gimple *stmt,\n \n       int num_scalar = SLP_TREE_SCALAR_STMTS (slp_node).length ();\n       int num_vec = SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node);\n-      int scalar_per_vec = num_scalar / num_vec;\n \n-      /* There are three possibilites here:\n-\t 1: All scalar stmts fit in a single vector.\n-\t 2: All scalar stmts fit multiple times into a single vector.\n-\t    We must choose the last occurence of stmt in the vector.\n-\t 3: Scalar stmts are split across multiple vectors.\n-\t    We must choose the correct vector and mod the lane accordingly.  */\n+      /* Get the last occurrence of the scalar index from the concatenation of\n+\t all the slp vectors. Calculate which slp vector it is and the index\n+\t within.  */\n+      int pos = (num_vec * nunits) - num_scalar + slp_index;\n+      int vec_entry = pos / nunits;\n+      int vec_index = pos % nunits;\n \n       /* Get the correct slp vectorized stmt.  */\n-      int vec_entry = slp_index / scalar_per_vec;\n       vec_lhs = gimple_get_lhs (SLP_TREE_VEC_STMTS (slp_node)[vec_entry]);\n \n       /* Get entry to use.  */\n-      bitstart = build_int_cst (unsigned_type_node,\n-\t\t\t\tscalar_per_vec - (slp_index % scalar_per_vec));\n+      bitstart = build_int_cst (unsigned_type_node, vec_index);\n       bitstart = int_const_binop (MULT_EXPR, bitsize, bitstart);\n-      bitstart = int_const_binop (MINUS_EXPR, vec_bitsize, bitstart);\n     }\n   else\n     {"}]}