{"sha": "e4dc9904bad9c0ce64b984f5fe895ff66e6f8d9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRkYzk5MDRiYWQ5YzBjZTY0Yjk4NGY1ZmU4OTVmZjY2ZTZmOGQ5ZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-30T11:12:35Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:12:35Z"}, "message": "[30/77] Use scalar_int_mode for doubleword splits\n\nThis patch uses is_a <scalar_int_mode> in a couple of places that\nwere splitting doubleword integer operations into word_mode\noperations.  It also uses scalar_int_mode in the expand_expr_real_2\nhandling of doubleword shifts.\n\n2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* expr.c (expand_expr_real_2): Use scalar_int_mode for the\n\tdouble-word mode.\n\t* lower-subreg.c (resolve_shift_zext): Use is_a <scalar_int_mode>.\n\t* optabs.c (expand_unop): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251482", "tree": {"sha": "72b84173a5e96965bcb967fd5f57b8cbd8945e9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72b84173a5e96965bcb967fd5f57b8cbd8945e9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4dc9904bad9c0ce64b984f5fe895ff66e6f8d9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4dc9904bad9c0ce64b984f5fe895ff66e6f8d9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4dc9904bad9c0ce64b984f5fe895ff66e6f8d9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4dc9904bad9c0ce64b984f5fe895ff66e6f8d9d/comments", "author": null, "committer": null, "parents": [{"sha": "99767219d617a30394777086fa9ca776390d7098", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99767219d617a30394777086fa9ca776390d7098", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99767219d617a30394777086fa9ca776390d7098"}], "stats": {"total": 47, "additions": 31, "deletions": 16}, "files": [{"sha": "5beaf455fe7bef662c5dd44e03fd1366ee2de67e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4dc9904bad9c0ce64b984f5fe895ff66e6f8d9d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4dc9904bad9c0ce64b984f5fe895ff66e6f8d9d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4dc9904bad9c0ce64b984f5fe895ff66e6f8d9d", "patch": "@@ -1,3 +1,12 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* expr.c (expand_expr_real_2): Use scalar_int_mode for the\n+\tdouble-word mode.\n+\t* lower-subreg.c (resolve_shift_zext): Use is_a <scalar_int_mode>.\n+\t* optabs.c (expand_unop): Likewise.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "ea1a6d4a9cd00c94f01d1716f222266d48c6416f", "filename": "gcc/expr.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4dc9904bad9c0ce64b984f5fe895ff66e6f8d9d/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4dc9904bad9c0ce64b984f5fe895ff66e6f8d9d/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e4dc9904bad9c0ce64b984f5fe895ff66e6f8d9d", "patch": "@@ -8208,6 +8208,7 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n   tree type;\n   int unsignedp;\n   machine_mode mode;\n+  scalar_int_mode int_mode;\n   enum tree_code code = ops->code;\n   optab this_optab;\n   rtx subtarget, original_target;\n@@ -9171,8 +9172,8 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \tif (code == LSHIFT_EXPR\n \t    && target\n \t    && REG_P (target)\n-\t    && mode == GET_MODE_WIDER_MODE (word_mode).else_void ()\n-\t    && GET_MODE_SIZE (mode) == 2 * GET_MODE_SIZE (word_mode)\n+\t    && GET_MODE_2XWIDER_MODE (word_mode).exists (&int_mode)\n+\t    && mode == int_mode\n \t    && TREE_CONSTANT (treeop1)\n \t    && TREE_CODE (treeop0) == SSA_NAME)\n \t  {\n@@ -9183,20 +9184,20 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \t\tmachine_mode rmode = TYPE_MODE\n \t\t  (TREE_TYPE (gimple_assign_rhs1 (def)));\n \n-\t\tif (GET_MODE_SIZE (rmode) < GET_MODE_SIZE (mode)\n+\t\tif (GET_MODE_SIZE (rmode) < GET_MODE_SIZE (int_mode)\n \t\t    && TREE_INT_CST_LOW (treeop1) < GET_MODE_BITSIZE (word_mode)\n \t\t    && ((TREE_INT_CST_LOW (treeop1) + GET_MODE_BITSIZE (rmode))\n \t\t\t>= GET_MODE_BITSIZE (word_mode)))\n \t\t  {\n \t\t    rtx_insn *seq, *seq_old;\n \t\t    unsigned int high_off = subreg_highpart_offset (word_mode,\n-\t\t\t\t\t\t\t\t    mode);\n+\t\t\t\t\t\t\t\t    int_mode);\n \t\t    bool extend_unsigned\n \t\t      = TYPE_UNSIGNED (TREE_TYPE (gimple_assign_rhs1 (def)));\n-\t\t    rtx low = lowpart_subreg (word_mode, op0, mode);\n-\t\t    rtx dest_low = lowpart_subreg (word_mode, target, mode);\n+\t\t    rtx low = lowpart_subreg (word_mode, op0, int_mode);\n+\t\t    rtx dest_low = lowpart_subreg (word_mode, target, int_mode);\n \t\t    rtx dest_high = simplify_gen_subreg (word_mode, target,\n-\t\t\t\t\t\t\t mode, high_off);\n+\t\t\t\t\t\t\t int_mode, high_off);\n \t\t    HOST_WIDE_INT ramount = (BITS_PER_WORD\n \t\t\t\t\t     - TREE_INT_CST_LOW (treeop1));\n \t\t    tree rshift = build_int_cst (TREE_TYPE (treeop1), ramount);\n@@ -9219,12 +9220,13 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \t\t    end_sequence ();\n \t\t    temp = target ;\n \n-\t\t    if (have_insn_for (ASHIFT, mode))\n+\t\t    if (have_insn_for (ASHIFT, int_mode))\n \t\t      {\n \t\t\tbool speed_p = optimize_insn_for_speed_p ();\n \t\t\tstart_sequence ();\n-\t\t\trtx ret_old = expand_variable_shift (code, mode, op0,\n-\t\t\t\t\t\t\t     treeop1, target,\n+\t\t\trtx ret_old = expand_variable_shift (code, int_mode,\n+\t\t\t\t\t\t\t     op0, treeop1,\n+\t\t\t\t\t\t\t     target,\n \t\t\t\t\t\t\t     unsignedp);\n \n \t\t\tseq_old = get_insns ();"}, {"sha": "99ad2532b644959b77d7b0d13104238f76d8ba6a", "filename": "gcc/lower-subreg.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4dc9904bad9c0ce64b984f5fe895ff66e6f8d9d/gcc%2Flower-subreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4dc9904bad9c0ce64b984f5fe895ff66e6f8d9d/gcc%2Flower-subreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.c?ref=e4dc9904bad9c0ce64b984f5fe895ff66e6f8d9d", "patch": "@@ -1214,6 +1214,7 @@ resolve_shift_zext (rtx_insn *insn)\n   rtx_insn *insns;\n   rtx src_reg, dest_reg, dest_upper, upper_src = NULL_RTX;\n   int src_reg_num, dest_reg_num, offset1, offset2, src_offset;\n+  scalar_int_mode inner_mode;\n \n   set = single_set (insn);\n   if (!set)\n@@ -1227,6 +1228,8 @@ resolve_shift_zext (rtx_insn *insn)\n     return NULL;\n \n   op_operand = XEXP (op, 0);\n+  if (!is_a <scalar_int_mode> (GET_MODE (op_operand), &inner_mode))\n+    return NULL;\n \n   /* We can tear this operation apart only if the regs were already\n      torn apart.  */\n@@ -1239,8 +1242,7 @@ resolve_shift_zext (rtx_insn *insn)\n   src_reg_num = (GET_CODE (op) == LSHIFTRT || GET_CODE (op) == ASHIFTRT)\n \t\t? 1 : 0;\n \n-  if (WORDS_BIG_ENDIAN\n-      && GET_MODE_SIZE (GET_MODE (op_operand)) > UNITS_PER_WORD)\n+  if (WORDS_BIG_ENDIAN && GET_MODE_SIZE (inner_mode) > UNITS_PER_WORD)\n     src_reg_num = 1 - src_reg_num;\n \n   if (GET_CODE (op) == ZERO_EXTEND)"}, {"sha": "d9609ffc18ccd5ffdc54c06885ff249921bed5c3", "filename": "gcc/optabs.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4dc9904bad9c0ce64b984f5fe895ff66e6f8d9d/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4dc9904bad9c0ce64b984f5fe895ff66e6f8d9d/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=e4dc9904bad9c0ce64b984f5fe895ff66e6f8d9d", "patch": "@@ -2737,22 +2737,24 @@ expand_unop (machine_mode mode, optab unoptab, rtx op0, rtx target,\n     }\n \n   if (unoptab == popcount_optab\n-      && GET_MODE_SIZE (mode) == 2 * UNITS_PER_WORD\n+      && is_a <scalar_int_mode> (mode, &int_mode)\n+      && GET_MODE_SIZE (int_mode) == 2 * UNITS_PER_WORD\n       && optab_handler (unoptab, word_mode) != CODE_FOR_nothing\n       && optimize_insn_for_speed_p ())\n     {\n-      temp = expand_doubleword_popcount (mode, op0, target);\n+      temp = expand_doubleword_popcount (int_mode, op0, target);\n       if (temp)\n \treturn temp;\n     }\n \n   if (unoptab == parity_optab\n-      && GET_MODE_SIZE (mode) == 2 * UNITS_PER_WORD\n+      && is_a <scalar_int_mode> (mode, &int_mode)\n+      && GET_MODE_SIZE (int_mode) == 2 * UNITS_PER_WORD\n       && (optab_handler (unoptab, word_mode) != CODE_FOR_nothing\n \t  || optab_handler (popcount_optab, word_mode) != CODE_FOR_nothing)\n       && optimize_insn_for_speed_p ())\n     {\n-      temp = expand_doubleword_parity (mode, op0, target);\n+      temp = expand_doubleword_parity (int_mode, op0, target);\n       if (temp)\n \treturn temp;\n     }"}]}