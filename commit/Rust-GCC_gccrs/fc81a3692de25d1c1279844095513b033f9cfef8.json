{"sha": "fc81a3692de25d1c1279844095513b033f9cfef8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM4MWEzNjkyZGUyNWQxYzEyNzk4NDQwOTU1MTNiMDMzZjljZmVmOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-12-02T22:35:21Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-12-02T22:35:21Z"}, "message": "re PR tree-optimization/42215 (internal compiler error: verify_stmts failed with -O2 -ftree-loop-distribution)\n\n        PR tree-opt/42215\n        * tree-loop-distribution.c (build_size_arg_loc): Tidy.\n        (generate_memset_zero): Convert to sizetype properly.  Tidy.\n\nFrom-SVN: r154925", "tree": {"sha": "2cf5d2d90768ce8b05a81ef517bf0aef4c3de08b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cf5d2d90768ce8b05a81ef517bf0aef4c3de08b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc81a3692de25d1c1279844095513b033f9cfef8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc81a3692de25d1c1279844095513b033f9cfef8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc81a3692de25d1c1279844095513b033f9cfef8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc81a3692de25d1c1279844095513b033f9cfef8/comments", "author": null, "committer": null, "parents": [{"sha": "cdd0c4d3ff6939367e73ec68570b55a6257eea91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd0c4d3ff6939367e73ec68570b55a6257eea91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdd0c4d3ff6939367e73ec68570b55a6257eea91"}], "stats": {"total": 93, "additions": 54, "deletions": 39}, "files": [{"sha": "493f1f5a4f4961237a876e861296a86ae1be01ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc81a3692de25d1c1279844095513b033f9cfef8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc81a3692de25d1c1279844095513b033f9cfef8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc81a3692de25d1c1279844095513b033f9cfef8", "patch": "@@ -1,3 +1,9 @@\n+2009-12-02  Richard Henderson  <rth@redhat.com>\n+\n+\tPR tree-opt/42215\n+\t* tree-loop-distribution.c (build_size_arg_loc): Tidy.\n+\t(generate_memset_zero): Convert to sizetype properly.  Tidy.\n+\n 2009-12-02  Richard Guenther  <rguenther@suse.de>\n \n \t* lto-streamer-out.c (pack_ts_decl_common_value_fields):"}, {"sha": "e5a75bd3055caa9cf39d4da2ee3a65a6ec0878e3", "filename": "gcc/testsuite/gcc.dg/pr42215.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc81a3692de25d1c1279844095513b033f9cfef8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr42215.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc81a3692de25d1c1279844095513b033f9cfef8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr42215.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr42215.c?ref=fc81a3692de25d1c1279844095513b033f9cfef8", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-loop-distribution\" } */\n+\n+extern int A[];\n+extern int B[];\n+\n+void f(int i)\n+{\n+   while (i-- > 0) {\n+     A[i] = 0;\n+     B[i] = 0;\n+   }\n+}"}, {"sha": "ea3005e2531418b45b8af6f46f49d127cd3addaf", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 35, "deletions": 39, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc81a3692de25d1c1279844095513b033f9cfef8/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc81a3692de25d1c1279844095513b033f9cfef8/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=fc81a3692de25d1c1279844095513b033f9cfef8", "patch": "@@ -222,19 +222,20 @@ generate_loops_for_partition (struct loop *loop, bitmap partition, bool copy_p)\n /* Build the size argument for a memset call.  */\n \n static inline tree\n-build_size_arg_loc (location_t loc, tree nb_iter, tree op, gimple_seq* stmt_list)\n+build_size_arg_loc (location_t loc, tree nb_iter, tree op,\n+\t\t    gimple_seq *stmt_list)\n {\n-    tree nb_bytes;\n-    gimple_seq stmts = NULL;\n+  gimple_seq stmts;\n+  tree x;\n \n-    nb_bytes = fold_build2_loc (loc, MULT_EXPR, size_type_node,\n-\t\t\t    fold_convert_loc (loc, size_type_node, nb_iter),\n-\t\t\t    fold_convert_loc (loc, size_type_node,\n-\t\t\t\t\t      TYPE_SIZE_UNIT (TREE_TYPE (op))));\n-    nb_bytes = force_gimple_operand (nb_bytes, &stmts, true, NULL);\n-    gimple_seq_add_seq (stmt_list, stmts);\n+  x = fold_build2_loc (loc, MULT_EXPR, size_type_node,\n+\t\t       fold_convert_loc (loc, size_type_node, nb_iter),\n+\t\t       fold_convert_loc (loc, size_type_node,\n+\t\t\t\t\t TYPE_SIZE_UNIT (TREE_TYPE (op))));\n+  x = force_gimple_operand (x, &stmts, true, NULL);\n+  gimple_seq_add_seq (stmt_list, stmts);\n \n-    return nb_bytes;\n+  return x;\n }\n \n /* Generate a call to memset.  Return true when the operation succeeded.  */\n@@ -243,12 +244,11 @@ static bool\n generate_memset_zero (gimple stmt, tree op0, tree nb_iter,\n \t\t      gimple_stmt_iterator bsi)\n {\n-  tree addr_base;\n-  tree nb_bytes = NULL;\n+  tree addr_base, nb_bytes;\n   bool res = false;\n-  gimple_seq stmts = NULL, stmt_list = NULL;\n+  gimple_seq stmt_list = NULL, stmts;\n   gimple fn_call;\n-  tree mem, fndecl, fntype, fn;\n+  tree mem, fn;\n   gimple_stmt_iterator i;\n   struct data_reference *dr = XCNEW (struct data_reference);\n   location_t loc = gimple_location (stmt);\n@@ -259,47 +259,43 @@ generate_memset_zero (gimple stmt, tree op0, tree nb_iter,\n     goto end;\n \n   /* Test for a positive stride, iterating over every element.  */\n-  if (integer_zerop (fold_build2_loc (loc,\n-\t\t\t\t  MINUS_EXPR, integer_type_node, DR_STEP (dr),\n-\t\t\t\t  TYPE_SIZE_UNIT (TREE_TYPE (op0)))))\n+  if (integer_zerop (size_binop (MINUS_EXPR,\n+\t\t\t\t fold_convert (sizetype, DR_STEP (dr)),\n+\t\t\t\t TYPE_SIZE_UNIT (TREE_TYPE (op0)))))\n     {\n-      tree offset = fold_convert_loc (loc, sizetype,\n-\t\t\t\t      size_binop_loc (loc, PLUS_EXPR,\n-\t\t\t\t\t\t      DR_OFFSET (dr),\n-\t\t\t\t\t\t      DR_INIT (dr)));\n+      addr_base = fold_convert_loc (loc, sizetype,\n+\t\t\t\t    size_binop_loc (loc, PLUS_EXPR,\n+\t\t\t\t\t\t    DR_OFFSET (dr),\n+\t\t\t\t\t\t    DR_INIT (dr)));\n       addr_base = fold_build2_loc (loc, POINTER_PLUS_EXPR,\n-\t\t\t       TREE_TYPE (DR_BASE_ADDRESS (dr)),\n-\t\t\t       DR_BASE_ADDRESS (dr), offset);\n+\t\t\t\t   TREE_TYPE (DR_BASE_ADDRESS (dr)),\n+\t\t\t\t   DR_BASE_ADDRESS (dr), addr_base);\n+\n+      nb_bytes = build_size_arg_loc (loc, nb_iter, op0, &stmt_list);\n     }\n \n   /* Test for a negative stride, iterating over every element.  */\n-  else if (integer_zerop (fold_build2_loc (loc, PLUS_EXPR, integer_type_node,\n-\t\t\t\t       TYPE_SIZE_UNIT (TREE_TYPE (op0)),\n-\t\t\t\t       DR_STEP (dr))))\n+  else if (integer_zerop (size_binop (PLUS_EXPR,\n+\t\t\t\t      TYPE_SIZE_UNIT (TREE_TYPE (op0)),\n+\t\t\t\t      fold_convert (sizetype, DR_STEP (dr)))))\n     {\n       nb_bytes = build_size_arg_loc (loc, nb_iter, op0, &stmt_list);\n-      addr_base = size_binop_loc (loc, PLUS_EXPR, DR_OFFSET (dr), DR_INIT (dr));\n-      addr_base = fold_build2_loc (loc, MINUS_EXPR, sizetype, addr_base,\n-\t\t\t       fold_convert_loc (loc, sizetype, nb_bytes));\n-      addr_base = force_gimple_operand (addr_base, &stmts, true, NULL);\n-      gimple_seq_add_seq (&stmt_list, stmts);\n \n+      addr_base = size_binop_loc (loc, PLUS_EXPR, DR_OFFSET (dr), DR_INIT (dr));\n+      addr_base = fold_convert_loc (loc, sizetype, addr_base);\n+      addr_base = size_binop_loc (loc, MINUS_EXPR, addr_base,\n+\t\t\t\t  fold_convert_loc (loc, sizetype, nb_bytes));\n       addr_base = fold_build2_loc (loc, POINTER_PLUS_EXPR,\n-\t\t\t       TREE_TYPE (DR_BASE_ADDRESS (dr)),\n-\t\t\t       DR_BASE_ADDRESS (dr), addr_base);\n+\t\t\t\t   TREE_TYPE (DR_BASE_ADDRESS (dr)),\n+\t\t\t\t   DR_BASE_ADDRESS (dr), addr_base);\n     }\n   else\n     goto end;\n \n   mem = force_gimple_operand (addr_base, &stmts, true, NULL);\n   gimple_seq_add_seq (&stmt_list, stmts);\n \n-  fndecl = implicit_built_in_decls [BUILT_IN_MEMSET];\n-  fntype = TREE_TYPE (fndecl);\n-  fn = build1 (ADDR_EXPR, build_pointer_type (fntype), fndecl);\n-\n-  if (!nb_bytes)\n-    nb_bytes = build_size_arg_loc (loc, nb_iter, op0, &stmt_list);\n+  fn = build_fold_addr_expr (implicit_built_in_decls [BUILT_IN_MEMSET]);\n   fn_call = gimple_build_call (fn, 3, mem, integer_zero_node, nb_bytes);\n   gimple_seq_add_stmt (&stmt_list, fn_call);\n "}]}