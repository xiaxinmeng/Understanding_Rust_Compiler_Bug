{"sha": "506f93badbb17e744622fc38b5045226ac74dcfc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA2ZjkzYmFkYmIxN2U3NDQ2MjJmYzM4YjUwNDUyMjZhYzc0ZGNmYw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2007-10-02T16:07:01Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-10-02T16:07:01Z"}, "message": "2.cc: Split into...\n\n2007-10-02  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/25_algorithms/binary_search/2.cc: Split into...\n\t* testsuite/25_algorithms/upper_bound/2.cc: ... this.\n\t* testsuite/25_algorithms/lower_bound/2.cc: ... this.\n\t* testsuite/25_algorithms/equal_range/2.cc: ... and this.\n\t* testsuite/25_algorithms/sort/vectorbool.cc: Add from\n\tlibstdcxx_so_7-branch.\n\nFrom-SVN: r128958", "tree": {"sha": "e5ef4d3ab1c5809a34dddff45f060f29a597b0ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5ef4d3ab1c5809a34dddff45f060f29a597b0ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/506f93badbb17e744622fc38b5045226ac74dcfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/506f93badbb17e744622fc38b5045226ac74dcfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/506f93badbb17e744622fc38b5045226ac74dcfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/506f93badbb17e744622fc38b5045226ac74dcfc/comments", "author": null, "committer": null, "parents": [{"sha": "ba49cb7bffa4826391d9e7e7e90dc3189be0bf50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba49cb7bffa4826391d9e7e7e90dc3189be0bf50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba49cb7bffa4826391d9e7e7e90dc3189be0bf50"}], "stats": {"total": 427, "additions": 307, "deletions": 120}, "files": [{"sha": "2022ff85a0c29344db5f51368453eae4beb5b36c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506f93badbb17e744622fc38b5045226ac74dcfc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506f93badbb17e744622fc38b5045226ac74dcfc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=506f93badbb17e744622fc38b5045226ac74dcfc", "patch": "@@ -1,3 +1,12 @@\n+2007-10-02  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/25_algorithms/binary_search/2.cc: Split into...\n+\t* testsuite/25_algorithms/upper_bound/2.cc: ... this.\n+\t* testsuite/25_algorithms/lower_bound/2.cc: ... this.\n+\t* testsuite/25_algorithms/equal_range/2.cc: ... and this.\n+\t* testsuite/25_algorithms/sort/vectorbool.cc: Add from\n+\tlibstdcxx_so_7-branch.\n+\n 2007-09-30  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* src/valarray-inst.cc, include/ext/atomicity.h,"}, {"sha": "24c1d876245bf04007cc966042f2ccd48425e854", "filename": "libstdc++-v3/testsuite/25_algorithms/binary_search/2.cc", "status": "modified", "additions": 2, "deletions": 120, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506f93badbb17e744622fc38b5045226ac74dcfc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506f93badbb17e744622fc38b5045226ac74dcfc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2F2.cc?ref=506f93badbb17e744622fc38b5045226ac74dcfc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,120 +36,6 @@ struct gt\n     { return x > y; }\n };\n \n-// Each test performs general-case, bookend, not-found condition,\n-// and predicate functional checks.\n-\n-// 25.3.3.1 lower_bound, with and without comparison predicate\n-void\n-test01()\n-{\n-    using std::lower_bound;\n-\n-    const int first = A[0];\n-    const int last = A[N - 1];\n-\n-    const int* p = lower_bound(A, A + N, 3);\n-    VERIFY(p == A + 2);\n-\n-    const int* q = lower_bound(A, A + N, first);\n-    VERIFY(q == A + 0);\n-\n-    const int* r = lower_bound(A, A + N, last);\n-    VERIFY(r == A + N - 1);\n-\n-    const int* s = lower_bound(A, A + N, 4);\n-    VERIFY(s == A + 5);\n-\n-    const int* t = lower_bound(C, C + N, 3, gt());\n-    VERIFY(t == C + 2);\n-\n-    const int* u = lower_bound(C, C + N, first, gt());\n-    VERIFY(u == C + N - 1);\n-\n-    const int* v = lower_bound(C, C + N, last, gt());\n-    VERIFY(v == C + 0);\n-\n-    const int* w = lower_bound(C, C + N, 4, gt());\n-    VERIFY(w == C + 2);\n-}\n-\n-// 25.3.3.2 upper_bound, with and without comparison predicate\n-void\n-test02()\n-{\n-    using std::upper_bound;\n-\n-    const int first = A[0];\n-    const int last = A[N - 1];\n-\n-    const int* p = upper_bound(A, A + N, 3);\n-    VERIFY(p == A + 5);\n-\n-    const int* q = upper_bound(A, A + N, first);\n-    VERIFY(q == A + 1);\n-\n-    const int* r = upper_bound(A, A + N, last);\n-    VERIFY(r == A + N);\n-\n-    const int* s = upper_bound(A, A + N, 4);\n-    VERIFY(s == A + 5);\n-\n-    const int* t = upper_bound(C, C + N, 3, gt());\n-    VERIFY(t == C + 5);\n-\n-    const int* u = upper_bound(C, C + N, first, gt());\n-    VERIFY(u == C + N);\n-\n-    const int* v = upper_bound(C, C + N, last, gt());\n-    VERIFY(v == C + 1);\n-\n-    const int* w = upper_bound(C, C + N, 4, gt());\n-    VERIFY(w == C + 2);\n-}\n-\n-// 25.3.3.3 equal_range, with and without comparison predicate\n-void\n-test03()\n-{\n-    using std::equal_range;\n-    typedef std::pair<const int*, const int*> Ipair;\n-    \n-    const int first = A[0];\n-    const int last = A[N - 1];\n-\n-    Ipair p = equal_range(A, A + N, 3);\n-    VERIFY(p.first == A + 2);\n-    VERIFY(p.second == A + 5);\n-    \n-    Ipair q = equal_range(A, A + N, first);\n-    VERIFY(q.first == A + 0);\n-    VERIFY(q.second == A + 1);\n-    \n-    Ipair r = equal_range(A, A + N, last);\n-    VERIFY(r.first == A + N - 1);\n-    VERIFY(r.second == A + N);\n-    \n-    Ipair s = equal_range(A, A + N, 4);\n-    VERIFY(s.first == A + 5);\n-    VERIFY(s.second == A + 5);\n-    \n-    Ipair t = equal_range(C, C + N, 3, gt());\n-    VERIFY(t.first == C + 2);\n-    VERIFY(t.second == C + 5);\n-    \n-    Ipair u = equal_range(C, C + N, first, gt());\n-    VERIFY(u.first == C + N - 1);\n-    VERIFY(u.second == C + N);\n-    \n-    Ipair v = equal_range(C, C + N, last, gt());\n-    VERIFY(v.first == C + 0);\n-    VERIFY(v.second == C + 1);\n-    \n-    Ipair w = equal_range(C, C + N, 4, gt());\n-    VERIFY(w.first == C + 2);\n-    VERIFY(w.second == C + 2);\n-}\n-\n // 25.3.3.4 binary_search, with and without comparison predicate\n void\n test04()\n@@ -173,10 +59,6 @@ test04()\n int\n main()\n {\n-  test01();\n-  test02();\n-  test03();\n-  test04();\n-  \n+  test04();  \n   return 0;\n }"}, {"sha": "12f2b4e499b405773bd4ef2e1bf6809abafcbc50", "filename": "libstdc++-v3/testsuite/25_algorithms/equal_range/2.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506f93badbb17e744622fc38b5045226ac74dcfc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal_range%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506f93badbb17e744622fc38b5045226ac74dcfc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal_range%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal_range%2F2.cc?ref=506f93badbb17e744622fc38b5045226ac74dcfc", "patch": "@@ -0,0 +1,90 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 25.3.3 [lib.alg.binary.search] Binary search algorithms.\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+bool test __attribute__((unused)) = true;\n+\n+const int A[] = {1, 2, 3, 3, 3, 5, 8};\n+const int C[] = {8, 5, 3, 3, 3, 2, 1};\n+const int N = sizeof(A) / sizeof(int);\n+\n+// A comparison, equalivalent to std::greater<int> without the\n+// dependency on <functional>.\n+struct gt\n+{\n+    bool\n+    operator()(const int& x, const int& y) const\n+    { return x > y; }\n+};\n+\n+// Each test performs general-case, bookend, not-found condition,\n+// and predicate functional checks.\n+\n+// 25.3.3.3 equal_range, with and without comparison predicate\n+void\n+test03()\n+{\n+    using std::equal_range;\n+    typedef std::pair<const int*, const int*> Ipair;\n+    \n+    const int first = A[0];\n+    const int last = A[N - 1];\n+\n+    Ipair p = equal_range(A, A + N, 3);\n+    VERIFY(p.first == A + 2);\n+    VERIFY(p.second == A + 5);\n+    \n+    Ipair q = equal_range(A, A + N, first);\n+    VERIFY(q.first == A + 0);\n+    VERIFY(q.second == A + 1);\n+    \n+    Ipair r = equal_range(A, A + N, last);\n+    VERIFY(r.first == A + N - 1);\n+    VERIFY(r.second == A + N);\n+    \n+    Ipair s = equal_range(A, A + N, 4);\n+    VERIFY(s.first == A + 5);\n+    VERIFY(s.second == A + 5);\n+    \n+    Ipair t = equal_range(C, C + N, 3, gt());\n+    VERIFY(t.first == C + 2);\n+    VERIFY(t.second == C + 5);\n+    \n+    Ipair u = equal_range(C, C + N, first, gt());\n+    VERIFY(u.first == C + N - 1);\n+    VERIFY(u.second == C + N);\n+    \n+    Ipair v = equal_range(C, C + N, last, gt());\n+    VERIFY(v.first == C + 0);\n+    VERIFY(v.second == C + 1);\n+    \n+    Ipair w = equal_range(C, C + N, 4, gt());\n+    VERIFY(w.first == C + 2);\n+    VERIFY(w.second == C + 2);\n+}\n+\n+int\n+main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "2d1c911d472b14cf2e08d98458ac8af4ac7bba25", "filename": "libstdc++-v3/testsuite/25_algorithms/lower_bound/2.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506f93badbb17e744622fc38b5045226ac74dcfc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506f93badbb17e744622fc38b5045226ac74dcfc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2F2.cc?ref=506f93badbb17e744622fc38b5045226ac74dcfc", "patch": "@@ -0,0 +1,81 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 25.3.3 [lib.alg.binary.search] Binary search algorithms.\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+bool test __attribute__((unused)) = true;\n+\n+const int A[] = {1, 2, 3, 3, 3, 5, 8};\n+const int C[] = {8, 5, 3, 3, 3, 2, 1};\n+const int N = sizeof(A) / sizeof(int);\n+\n+// A comparison, equalivalent to std::greater<int> without the\n+// dependency on <functional>.\n+struct gt\n+{\n+    bool\n+    operator()(const int& x, const int& y) const\n+    { return x > y; }\n+};\n+\n+// Each test performs general-case, bookend, not-found condition,\n+// and predicate functional checks.\n+\n+// 25.3.3.1 lower_bound, with and without comparison predicate\n+void\n+test01()\n+{\n+    using std::lower_bound;\n+\n+    const int first = A[0];\n+    const int last = A[N - 1];\n+\n+    const int* p = lower_bound(A, A + N, 3);\n+    VERIFY(p == A + 2);\n+\n+    const int* q = lower_bound(A, A + N, first);\n+    VERIFY(q == A + 0);\n+\n+    const int* r = lower_bound(A, A + N, last);\n+    VERIFY(r == A + N - 1);\n+\n+    const int* s = lower_bound(A, A + N, 4);\n+    VERIFY(s == A + 5);\n+\n+    const int* t = lower_bound(C, C + N, 3, gt());\n+    VERIFY(t == C + 2);\n+\n+    const int* u = lower_bound(C, C + N, first, gt());\n+    VERIFY(u == C + N - 1);\n+\n+    const int* v = lower_bound(C, C + N, last, gt());\n+    VERIFY(v == C + 0);\n+\n+    const int* w = lower_bound(C, C + N, 4, gt());\n+    VERIFY(w == C + 2);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "04d69f02f3e221b1587b67345a79eb3f81c0b6dc", "filename": "libstdc++-v3/testsuite/25_algorithms/sort/vectorbool.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506f93badbb17e744622fc38b5045226ac74dcfc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Fvectorbool.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506f93badbb17e744622fc38b5045226ac74dcfc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Fvectorbool.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2Fvectorbool.cc?ref=506f93badbb17e744622fc38b5045226ac74dcfc", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.1 algorithms, sort()\n+\n+#include <algorithm>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::vector<bool> b;\n+  b.push_back(false);\n+  b.push_back(true);\n+  b.push_back(false);\n+  b.push_back(true);\n+  std::sort(b.begin(), b.end());\n+  VERIFY( b[0] == false && b[1] == false && b[2] == true && b[3] == true );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1fac53cd73073b925364df846d2f4b9c0060e172", "filename": "libstdc++-v3/testsuite/25_algorithms/upper_bound/2.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506f93badbb17e744622fc38b5045226ac74dcfc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506f93badbb17e744622fc38b5045226ac74dcfc/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2F2.cc?ref=506f93badbb17e744622fc38b5045226ac74dcfc", "patch": "@@ -0,0 +1,81 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 25.3.3 [lib.alg.binary.search] Binary search algorithms.\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+bool test __attribute__((unused)) = true;\n+\n+const int A[] = {1, 2, 3, 3, 3, 5, 8};\n+const int C[] = {8, 5, 3, 3, 3, 2, 1};\n+const int N = sizeof(A) / sizeof(int);\n+\n+// A comparison, equalivalent to std::greater<int> without the\n+// dependency on <functional>.\n+struct gt\n+{\n+    bool\n+    operator()(const int& x, const int& y) const\n+    { return x > y; }\n+};\n+\n+// Each test performs general-case, bookend, not-found condition,\n+// and predicate functional checks.\n+\n+// 25.3.3.2 upper_bound, with and without comparison predicate\n+void\n+test02()\n+{\n+    using std::upper_bound;\n+\n+    const int first = A[0];\n+    const int last = A[N - 1];\n+\n+    const int* p = upper_bound(A, A + N, 3);\n+    VERIFY(p == A + 5);\n+\n+    const int* q = upper_bound(A, A + N, first);\n+    VERIFY(q == A + 1);\n+\n+    const int* r = upper_bound(A, A + N, last);\n+    VERIFY(r == A + N);\n+\n+    const int* s = upper_bound(A, A + N, 4);\n+    VERIFY(s == A + 5);\n+\n+    const int* t = upper_bound(C, C + N, 3, gt());\n+    VERIFY(t == C + 5);\n+\n+    const int* u = upper_bound(C, C + N, first, gt());\n+    VERIFY(u == C + N);\n+\n+    const int* v = upper_bound(C, C + N, last, gt());\n+    VERIFY(v == C + 1);\n+\n+    const int* w = upper_bound(C, C + N, 4, gt());\n+    VERIFY(w == C + 2);\n+}\n+\n+int\n+main()\n+{\n+  test02();\n+  return 0;\n+}"}]}