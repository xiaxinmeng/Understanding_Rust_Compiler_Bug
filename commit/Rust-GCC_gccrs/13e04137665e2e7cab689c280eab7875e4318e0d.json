{"sha": "13e04137665e2e7cab689c280eab7875e4318e0d", "node_id": "C_kwDOANBUbNoAKDEzZTA0MTM3NjY1ZTJlN2NhYjY4OWMyODBlYWI3ODc1ZTQzMThlMGQ", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-12-18T21:25:20Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-01-07T16:24:11Z"}, "message": "[Ada] Fix a couple of issues with pragma Inspection_Point\n\ngcc/ada/\n\n\t* exp_prag.adb (Expand_Pragma_Inspection_Point): Do a single pass\n\tover the arguments of the pragma.  Set the Address_Taken flag on\n\tthem and use the Has_Delayed_Freeze flag to spot those which have\n\ttheir elaboration delayed.  Reuse the location variable Loc.", "tree": {"sha": "1bb075d7889e8fe06eda19842bd6abc8d99260e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bb075d7889e8fe06eda19842bd6abc8d99260e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13e04137665e2e7cab689c280eab7875e4318e0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13e04137665e2e7cab689c280eab7875e4318e0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13e04137665e2e7cab689c280eab7875e4318e0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13e04137665e2e7cab689c280eab7875e4318e0d/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1e0b1be622e2beb55babe892691cc56ea20263d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1e0b1be622e2beb55babe892691cc56ea20263d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1e0b1be622e2beb55babe892691cc56ea20263d"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "267657fed0f087dc4aa70f0e8cb28e5f4f078035", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e04137665e2e7cab689c280eab7875e4318e0d/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e04137665e2e7cab689c280eab7875e4318e0d/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=13e04137665e2e7cab689c280eab7875e4318e0d", "patch": "@@ -2354,12 +2354,13 @@ package body Exp_Prag is\n \n    procedure Expand_Pragma_Inspection_Point (N : Node_Id) is\n       Loc : constant Source_Ptr := Sloc (N);\n+\n       A     : List_Id;\n       Assoc : Node_Id;\n-      S     : Entity_Id;\n       E     : Entity_Id;\n+      Rip   : Boolean;\n+      S     : Entity_Id;\n \n-      Remove_Inspection_Point : Boolean := False;\n    begin\n       if No (Pragma_Argument_Associations (N)) then\n          A := New_List;\n@@ -2389,45 +2390,47 @@ package body Exp_Prag is\n          Set_Pragma_Argument_Associations (N, A);\n       end if;\n \n-      --  Expand the arguments of the pragma. Expanding an entity reference\n-      --  is a noop, except in a protected operation, where a reference may\n-      --  have to be transformed into a reference to the corresponding prival.\n-      --  Are there other pragmas that may require this ???\n+      --  Process the arguments of the pragma and expand them. Expanding an\n+      --  entity reference is a noop, except in a protected operation, where\n+      --  a reference may have to be transformed into a reference to the\n+      --  corresponding prival. Are there other pragmas that require this ???\n \n+      Rip := False;\n       Assoc := First (Pragma_Argument_Associations (N));\n       while Present (Assoc) loop\n-         Expand (Expression (Assoc));\n-         Next (Assoc);\n-      end loop;\n+         --  The back end may need to take the address of the object\n \n-      --  If any of the references have a freeze node, it must appear before\n-      --  pragma Inspection_Point, otherwise the entity won't be available when\n-      --  Gigi processes Inspection_Point.\n-      --  When this requirement isn't met, turn the pragma into a no-op.\n+         Set_Address_Taken (Entity (Expression (Assoc)));\n \n-      Assoc := First (Pragma_Argument_Associations (N));\n-      while Present (Assoc) loop\n+         Expand (Expression (Assoc));\n+\n+         --  If any of the objects have a freeze node, it must appear before\n+         --  pragma Inspection_Point, otherwise the entity won't be elaborated\n+         --  when Gigi processes the pragma.\n \n-         if Present (Freeze_Node (Entity (Expression (Assoc)))) and then\n-           not Is_Frozen (Entity (Expression (Assoc)))\n+         if Has_Delayed_Freeze (Entity (Expression (Assoc)))\n+           and then not Is_Frozen (Entity (Expression (Assoc)))\n          then\n-            Error_Msg_NE (\"??inspection point references unfrozen object &\",\n-              Assoc,\n-              Entity (Expression (Assoc)));\n-            Remove_Inspection_Point := True;\n+            Error_Msg_NE\n+              (\"??inspection point references unfrozen object &\",\n+               Assoc,\n+               Entity (Expression (Assoc)));\n+            Rip := True;\n          end if;\n \n          Next (Assoc);\n       end loop;\n \n-      if Remove_Inspection_Point then\n+      --  When the above requirement isn't met, turn the pragma into a no-op\n+\n+      if Rip then\n          Error_Msg_N (\"\\pragma will be ignored\", N);\n \n          --  We can't just remove the pragma from the tree as it might be\n          --  iterated over by the caller. Turn it into a null statement\n          --  instead.\n \n-         Rewrite (N, Make_Null_Statement (Sloc (N)));\n+         Rewrite (N, Make_Null_Statement (Loc));\n       end if;\n    end Expand_Pragma_Inspection_Point;\n "}]}