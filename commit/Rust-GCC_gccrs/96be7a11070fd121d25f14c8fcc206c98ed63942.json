{"sha": "96be7a11070fd121d25f14c8fcc206c98ed63942", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZiZTdhMTEwNzBmZDEyMWQyNWYxNGM4ZmNjMjA2Yzk4ZWQ2Mzk0Mg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2009-06-25T19:17:07Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2009-06-25T19:17:07Z"}, "message": "g++spec.c (SKIPOPT): define.\n\ncp/:\n\t* g++spec.c (SKIPOPT): define.\n\t(lang_specific_driver): Handle -static-libstdc++.  Only add\n\tLIBSTDCXX_STATIC if we add LIBSTDCXX.\n./:\t* doc/invoke.texi (Option Summary): Mention -static-libstdc++.\n\t(Link Options): Document -static-libstdc++.\n\nFrom-SVN: r148951", "tree": {"sha": "9df30fa0de0c0a4779b8bf43637a65d6ccac3e32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9df30fa0de0c0a4779b8bf43637a65d6ccac3e32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96be7a11070fd121d25f14c8fcc206c98ed63942", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96be7a11070fd121d25f14c8fcc206c98ed63942", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96be7a11070fd121d25f14c8fcc206c98ed63942", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96be7a11070fd121d25f14c8fcc206c98ed63942/comments", "author": null, "committer": null, "parents": [{"sha": "0dae2d924dac1c080e85b92b1f71031dc67f606a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dae2d924dac1c080e85b92b1f71031dc67f606a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dae2d924dac1c080e85b92b1f71031dc67f606a"}], "stats": {"total": 87, "additions": 70, "deletions": 17}, "files": [{"sha": "3ed6355e1e2329e4bc2e46f7169f730c6a1967c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96be7a11070fd121d25f14c8fcc206c98ed63942/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96be7a11070fd121d25f14c8fcc206c98ed63942/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96be7a11070fd121d25f14c8fcc206c98ed63942", "patch": "@@ -1,3 +1,8 @@\n+2009-06-25  Ian Lance Taylor  <iant@google.com>\n+\n+\t* doc/invoke.texi (Option Summary): Mention -static-libstdc++.\n+\t(Link Options): Document -static-libstdc++.\n+\n 2009-06-25  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR target/38731\n@@ -757,7 +762,7 @@\n \t32 bits.\n \t* config/arm/arm.md: Likewise.\n \n-2009-06-19  Ian Lance Taylor  <ian@airs.com>\n+2009-06-19  Ian Lance Taylor  <iant@google.com>\n \n \t* tree-cfg.c (gimple_redirect_edge_and_branch): Change ERROR_MARK\n \tto GIMPLE_ERROR_MARK."}, {"sha": "dcb35e6ed70a06fdb448e22416ed729d1c00179c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96be7a11070fd121d25f14c8fcc206c98ed63942/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96be7a11070fd121d25f14c8fcc206c98ed63942/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=96be7a11070fd121d25f14c8fcc206c98ed63942", "patch": "@@ -1,3 +1,9 @@\n+2009-06-25  Ian Lance Taylor  <iant@google.com>\n+\n+\t* g++spec.c (SKIPOPT): define.\n+\t(lang_specific_driver): Handle -static-libstdc++.  Only add\n+\tLIBSTDCXX_STATIC if we add LIBSTDCXX.\n+\n 2009-06-25  Ian Lance Taylor  <iant@google.com>\n \n \t* cvt.c (convert_to_void): Only warn about COND_EXPR if neither"}, {"sha": "ab50f57842590ba864f85dd28db8b692de59add9", "filename": "gcc/cp/g++spec.c", "status": "modified", "additions": 44, "deletions": 15, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96be7a11070fd121d25f14c8fcc206c98ed63942/gcc%2Fcp%2Fg%2B%2Bspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96be7a11070fd121d25f14c8fcc206c98ed63942/gcc%2Fcp%2Fg%2B%2Bspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fg%2B%2Bspec.c?ref=96be7a11070fd121d25f14c8fcc206c98ed63942", "patch": "@@ -1,6 +1,6 @@\n /* Specific flags and argument handling of the C++ front end.\n    Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2007, 2008  Free Software Foundation, Inc.\n+   2007, 2008, 2009 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -30,6 +30,8 @@ along with GCC; see the file COPYING3.  If not see\n #define MATHLIB\t\t(1<<2)\n /* This bit is set if they did `-lc'.  */\n #define WITHLIBC\t(1<<3)\n+/* Skip this option.  */\n+#define SKIPOPT\t\t(1<<4)\n \n #ifndef MATH_LIBRARY\n #define MATH_LIBRARY \"-lm\"\n@@ -60,10 +62,11 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n   /* If nonzero, the user gave us the `-v' flag.  */\n   int saw_verbose_flag = 0;\n \n-  /* This is a tristate:\n+  /* What do with libstdc++:\n      -1 means we should not link in libstdc++\n      0  means we should link in libstdc++ if it is needed\n-     1  means libstdc++ is needed and should be linked in.  */\n+     1  means libstdc++ is needed and should be linked in.\n+     2  means libstdc++ is needed and should be linked statically.  */\n   int library = 0;\n \n   /* The number of arguments being added to what's in argv, other than\n@@ -96,6 +99,9 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n   /* By default, we throw on the math library if we have one.  */\n   int need_math = (MATH_LIBRARY[0] != '\\0');\n \n+  /* True if we saw -static.  */\n+  int static_link = 0;\n+\n   /* True if we should add -shared-libgcc to the command-line.  */\n   int shared_libgcc = 1;\n \n@@ -200,9 +206,15 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n \t\t cause a warning.  */\n \t      library = -1;\n \t    }\n-\t  else if (strcmp (argv[i], \"-static-libgcc\") == 0\n-\t\t   || strcmp (argv[i], \"-static\") == 0)\n+\t  else if (strcmp (argv[i], \"-static\") == 0)\n+\t    static_link = 1;\n+\t  else if (strcmp (argv[i], \"-static-libgcc\") == 0)\n \t    shared_libgcc = 0;\n+\t  else if (strcmp (argv[i], \"-static-libstdc++\") == 0)\n+\t    {\n+\t      library = library >= 0 ? 2 : library;\n+\t      args[i] |= SKIPOPT;\n+\t    }\n \t  else if (DEFAULT_WORD_SWITCH_TAKES_ARG (&argv[i][1]))\n \t    i++;\n \t  else\n@@ -261,7 +273,7 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n \n   /* Make sure to have room for the trailing NULL argument.\n      Add one for shared_libgcc or extra static library.  */\n-  num_args = argc + added + need_math + (library > 0) + 2;\n+  num_args = argc + added + need_math + (library > 0) * 4 + 1;\n   arglist = XNEWVEC (const char *, num_args);\n \n   i = 0;\n@@ -312,25 +324,42 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n \t  arglist[j] = \"-xnone\";\n \t}\n \n+      if ((args[i] & SKIPOPT) != 0)\n+\t--j;\n+\n       i++;\n       j++;\n     }\n \n   /* Add `-lstdc++' if we haven't already done so.  */\n   if (library > 0)\n     {\n+#ifdef HAVE_LD_STATIC_DYNAMIC\n+      if (library > 1 && !static_link)\n+\t{\n+\t  arglist[j] = \"-Wl,-Bstatic\";\n+\t  j++;\n+\t}\n+#endif\n       arglist[j] = saw_profile_flag ? LIBSTDCXX_PROFILE : LIBSTDCXX;\n       if (arglist[j][0] != '-' || arglist[j][1] == 'l')\n \tadded_libraries++;\n       j++;\n-    }\n-  /* Add target-dependent static library, if necessary.  */\n-  if (shared_libgcc == 0 && LIBSTDCXX_STATIC != NULL)\n-    {\n-      arglist[j] = LIBSTDCXX_STATIC;\n-      if (arglist[j][0] != '-' || arglist[j][1] == 'l')\n-\tadded_libraries++;\n-      j++;\n+      /* Add target-dependent static library, if necessary.  */\n+      if ((static_link || library > 1) && LIBSTDCXX_STATIC != NULL)\n+\t{\n+\t  arglist[j] = LIBSTDCXX_STATIC;\n+\t  if (arglist[j][0] != '-' || arglist[j][1] == 'l')\n+\t    added_libraries++;\n+\t  j++;\n+\t}\n+#ifdef HAVE_LD_STATIC_DYNAMIC\n+      if (library > 1 && !static_link)\n+\t{\n+\t  arglist[j] = \"-Wl,-Bdynamic\";\n+\t  j++;\n+\t}\n+#endif\n     }\n   if (saw_math)\n     arglist[j++] = saw_math;\n@@ -343,7 +372,7 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n     }\n   if (saw_libc)\n     arglist[j++] = saw_libc;\n-  if (shared_libgcc)\n+  if (shared_libgcc && !static_link)\n     arglist[j++] = \"-shared-libgcc\";\n \n   arglist[j] = NULL;"}, {"sha": "244441a691a6a7d81275bddd778b0bb8bbcffe69", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96be7a11070fd121d25f14c8fcc206c98ed63942/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96be7a11070fd121d25f14c8fcc206c98ed63942/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=96be7a11070fd121d25f14c8fcc206c98ed63942", "patch": "@@ -409,7 +409,8 @@ Objective-C and Objective-C++ Dialects}.\n @xref{Link Options,,Options for Linking}.\n @gccoptlist{@var{object-file-name}  -l@var{library} @gol\n -nostartfiles  -nodefaultlibs  -nostdlib -pie -rdynamic @gol\n--s  -static  -static-libgcc  -shared  -shared-libgcc  -symbolic @gol\n+-s  -static  -static-libgcc  -static-libstdc++ -shared  @gol\n+-shared-libgcc  -symbolic @gol\n -T @var{script}  -Wl,@var{option}  -Xlinker @var{option} @gol\n -u @var{symbol}}\n \n@@ -8246,6 +8247,18 @@ for the languages used in the program, or using the option\n @option{-shared-libgcc}, such that it is linked with the shared\n @file{libgcc}.\n \n+@item -static-libstdc++\n+When the @command{g++} program is used to link a C++ program, it will\n+normally automatically link against @option{libstdc++}.  If\n+@file{libstdc++} is available as a shared library, and the\n+@option{-static} option is not used, then this will link against the\n+shared version of @file{libstdc++}.  That is normally fine.  However, it\n+is sometimes useful to freeze the version of @file{libstdc++} used by\n+the program without going all the way to a fully static link.  The\n+@option{-static-libstdc++} option directs the @command{g++} driver to\n+link @file{libstdc++} statically, without necessarily linking other\n+libraries statically.\n+\n @item -symbolic\n @opindex symbolic\n Bind references to global symbols when building a shared object.  Warn"}]}