{"sha": "33c1d53aecbdcd9b36fdfda48a19d6801185b694", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNjMWQ1M2FlY2JkY2Q5YjM2ZmRmZGE0OGExOWQ2ODAxMTg1YjY5NA==", "commit": {"author": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1997-03-18T22:01:28Z"}, "committer": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1997-03-18T22:01:28Z"}, "message": "(STACK_BOUNDARY): Determine according to TARGET_ALIGN_DOUBLE\n\nFrom-SVN: r13738", "tree": {"sha": "0170696172a95e1d0f857c8cb76dae2bf81886b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0170696172a95e1d0f857c8cb76dae2bf81886b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33c1d53aecbdcd9b36fdfda48a19d6801185b694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33c1d53aecbdcd9b36fdfda48a19d6801185b694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33c1d53aecbdcd9b36fdfda48a19d6801185b694", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33c1d53aecbdcd9b36fdfda48a19d6801185b694/comments", "author": null, "committer": null, "parents": [{"sha": "03fc1620778b40e35e05a487bf208fd10e885cf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03fc1620778b40e35e05a487bf208fd10e885cf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03fc1620778b40e35e05a487bf208fd10e885cf0"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "6ee0d694d726f41a46e66e337467ab432f8e9c88", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33c1d53aecbdcd9b36fdfda48a19d6801185b694/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33c1d53aecbdcd9b36fdfda48a19d6801185b694/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=33c1d53aecbdcd9b36fdfda48a19d6801185b694", "patch": "@@ -79,8 +79,8 @@ extern int target_flags;\n \n /* Masks for the -m switches */\n #define MASK_80387\t\t000000000001\t/* Hardware floating point */\n-#define MASK_486\t\t000000000002\t/* 80486 specific */\n-#define MASK_NOTUSED1\t\t000000000004\t/* bit not currently used */\n+#define MASK_NOTUSED1\t\t000000000002\t/* bit not currently used */\n+#define MASK_NOTUSED2\t\t000000000004\t/* bit not currently used */\n #define MASK_RTD\t\t000000000010\t/* Use ret that pops args */\n #define MASK_ALIGN_DOUBLE\t000000000020\t/* align doubles to 2 word boundary */\n #define MASK_SVR3_SHLIB\t\t000000000040\t/* Uninit locals into bss */\n@@ -303,12 +303,31 @@ extern int ix86_arch;\n #endif\n \f\n #ifndef CPP_CPU_SPEC\n+#ifdef __STDC__\n+#if TARGET_CPU_DEFAULT == 0\n+#define CPP_CPU_DEFAULT \"\"\n+#elif TARGET_CPU_DEFAULT == 1\n+#define CPP_CPU_DEFAULT \"-Di486\"\n+#elif TARGET_CPU_DEFAULT == 2\n+#define CPP_CPU_DEFAULT \"-Di586\"\n+#elif TARGET_CPU_DEFAULT == 3\n+#define CPP_CPU_DEFAULT \"-Di686\"\n+#endif /* TARGET_CPU_DEFAULT */\n+\n+#define CPP_CPU_SPEC \"\\\n+-Di386 \" CPP_CPU_DEFAULT \" -Asystem(unix) -Acpu(i386) -Amachine(i386) \\\n+%{mcpu=i486:-Di486} %{m486:-Di486} \\\n+%{mpentium:-Dpentium -Di586} %{mcpu=pentium:-Dpentium -Di586} \\\n+%{mpentiumpro:-Dpentiumpro -Di686} %{mcpu=pentiumpro:-Dpentiumpro -Di686}\"\n+\n+#else\n #define CPP_CPU_SPEC \"\\\n -Di386 -Asystem(unix) -Acpu(i386) -Amachine(i386) \\\n %{mcpu=i486:-Di486} %{m486:-Di486} \\\n %{mpentium:-Dpentium -Di586} %{mcpu=pentium:-Dpentium -Di586} \\\n %{mpentiumpro:-Dpentiumpro -Di686} %{mcpu=pentiumpro:-Dpentiumpro -Di686}\"\n-#endif\n+#endif /* __STDC__ */\n+#endif /* CPP_CPU_SPEC */\n \n /* This macro defines names of additional specifications to put in the specs\n    that can be used in various specifications like CC1_SPEC.  Its definition\n@@ -373,7 +392,7 @@ extern int ix86_arch;\n #define PARM_BOUNDARY 32\n \n /* Boundary (in *bits*) on which stack pointer should be aligned.  */\n-#define STACK_BOUNDARY 32\n+#define STACK_BOUNDARY (TARGET_ALIGN_DOUBLE ? 64 : 32)\n \n /* Allocation boundary (in *bits*) for the code of a function.\n    For i486, we get better performance by aligning to a cache"}]}