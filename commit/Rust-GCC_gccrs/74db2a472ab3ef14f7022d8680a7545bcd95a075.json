{"sha": "74db2a472ab3ef14f7022d8680a7545bcd95a075", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRkYjJhNDcyYWIzZWYxNGY3MDIyZDg2ODBhNzU0NWJjZDk1YTA3NQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2010-07-16T14:16:04Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2010-07-16T14:16:04Z"}, "message": "re PR fortran/37077 (Implement Internal Unit I/O for character KIND=4)\n\n2010-07-16  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libfortran/37077\n\t* io/read.c (read_default_char4): Add support for reading into a\n\tkind-4 character variable from a character(kind=4) internal unit.\n\t* io/io.h (read_block_form4): Add prototype.\n\t* io/unit.c (get_internal_unit): Add call to fbuf_init.\n\t(free_internal_unit): Add call to fbuf_destroy. (get_unit): Fix\n\twhitespace.\n\t* io/transfer.c (read_sf_internal): Use fbuf_alloc to allocate a string\n\tto recieve the wide characters translated to single byte chracters.\n\t(read_block_form): Fix whitespace. (read_block_form4): New function to\n\tread from a character(kind=4) internal unit into a character(kind=4)\n\tvariable. (read_block_direct): Fix whitespace. (write_block): Fix\n\twhitespace. (formatted_transfer_scalar_read): Likewise.\n\t(formatted_transfer_scalar_write): Likewise.\n\t* io/write.c (write_character): Add support for list directed write of\n\ta kind=1 character string to a character(kind=4) internal unit.\n\nFrom-SVN: r162260", "tree": {"sha": "7dc23731407b69d629e46fa7bdb5a23547025068", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7dc23731407b69d629e46fa7bdb5a23547025068"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74db2a472ab3ef14f7022d8680a7545bcd95a075", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74db2a472ab3ef14f7022d8680a7545bcd95a075", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74db2a472ab3ef14f7022d8680a7545bcd95a075", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74db2a472ab3ef14f7022d8680a7545bcd95a075/comments", "author": null, "committer": null, "parents": [{"sha": "4b1b0ac1cf1d231766ae3906d3e67f63f612f703", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b1b0ac1cf1d231766ae3906d3e67f63f612f703", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b1b0ac1cf1d231766ae3906d3e67f63f612f703"}], "stats": {"total": 189, "additions": 160, "deletions": 29}, "files": [{"sha": "3f8fddd862b5b09c89fc1815760d073923ca0d3e", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74db2a472ab3ef14f7022d8680a7545bcd95a075/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74db2a472ab3ef14f7022d8680a7545bcd95a075/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=74db2a472ab3ef14f7022d8680a7545bcd95a075", "patch": "@@ -1,3 +1,22 @@\n+2010-07-16  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libfortran/37077\n+\t* io/read.c (read_default_char4): Add support for reading into a\n+\tkind-4 character variable from a character(kind=4) internal unit.\n+\t* io/io.h (read_block_form4): Add prototype.\n+\t* io/unit.c (get_internal_unit): Add call to fbuf_init.\n+\t(free_internal_unit): Add call to fbuf_destroy. (get_unit): Fix\n+\twhitespace.\n+\t* io/transfer.c (read_sf_internal): Use fbuf_alloc to allocate a string\n+\tto recieve the wide characters translated to single byte chracters.\n+\t(read_block_form): Fix whitespace. (read_block_form4): New function to\n+\tread from a character(kind=4) internal unit into a character(kind=4)\n+\tvariable. (read_block_direct): Fix whitespace. (write_block): Fix\n+\twhitespace. (formatted_transfer_scalar_read): Likewise.\n+\t(formatted_transfer_scalar_write): Likewise.\n+\t* io/write.c (write_character): Add support for list directed write of\n+\ta kind=1 character string to a character(kind=4) internal unit.\n+\n 2010-07-14  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/44934"}, {"sha": "99553486f8b46b461bb3b8ab875b559439e68dd8", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74db2a472ab3ef14f7022d8680a7545bcd95a075/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74db2a472ab3ef14f7022d8680a7545bcd95a075/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=74db2a472ab3ef14f7022d8680a7545bcd95a075", "patch": "@@ -644,6 +644,9 @@ internal_proto(type_name);\n extern void * read_block_form (st_parameter_dt *, int *);\n internal_proto(read_block_form);\n \n+extern void * read_block_form4 (st_parameter_dt *, int *);\n+internal_proto(read_block_form4);\n+\n extern void *write_block (st_parameter_dt *, int);\n internal_proto(write_block);\n "}, {"sha": "357ee9f1e6a3b188c0ba91d8334892cc906cb517", "filename": "libgfortran/io/read.c", "status": "modified", "additions": 41, "deletions": 16, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74db2a472ab3ef14f7022d8680a7545bcd95a075/libgfortran%2Fio%2Fread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74db2a472ab3ef14f7022d8680a7545bcd95a075/libgfortran%2Fio%2Fread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fread.c?ref=74db2a472ab3ef14f7022d8680a7545bcd95a075", "patch": "@@ -383,26 +383,51 @@ read_utf8_char4 (st_parameter_dt *dtp, void *p, int len, int width)\n static void\n read_default_char4 (st_parameter_dt *dtp, char *p, int len, int width)\n {\n-  char *s;\n-  gfc_char4_t *dest;\n   int m, n;\n+  gfc_char4_t *dest;\n \n-  s = read_block_form (dtp, &width);\n-  \n-  if (s == NULL)\n-    return;\n-  if (width > len)\n-     s += (width - len);\n+  if (is_char4_unit(dtp))\n+    {\n+      gfc_char4_t *s4;\n \n-  m = ((int) width > len) ? len : (int) width;\n-  \n-  dest = (gfc_char4_t *) p;\n-  \n-  for (n = 0; n < m; n++, dest++, s++)\n-    *dest = (unsigned char ) *s;\n+      s4 = (gfc_char4_t *) read_block_form4 (dtp, &width);\n+\n+      if (s4 == NULL)\n+\treturn;\n+      if (width > len)\n+\t s4 += (width - len);\n \n-  for (n = 0; n < len - (int) width; n++, dest++)\n-    *dest = (unsigned char) ' ';\n+      m = ((int) width > len) ? len : (int) width;\n+\n+      dest = (gfc_char4_t *) p;\n+\n+      for (n = 0; n < m; n++)\n+\t*dest++ = *s4++;\n+\n+      for (n = 0; n < len - (int) width; n++)\n+\t*dest++ = (gfc_char4_t) ' ';\n+    }\n+  else\n+    {\n+      char *s;\n+\n+      s = read_block_form (dtp, &width);\n+\n+      if (s == NULL)\n+\treturn;\n+      if (width > len)\n+\t s += (width - len);\n+\n+      m = ((int) width > len) ? len : (int) width;\n+\n+      dest = (gfc_char4_t *) p;\n+\n+      for (n = 0; n < m; n++, dest++, s++)\n+\t*dest = (unsigned char ) *s;\n+\n+      for (n = 0; n < len - (int) width; n++, dest++)\n+\t*dest = (unsigned char) ' ';\n+    }\n }\n \n "}, {"sha": "bab1c932502df91bc6ec6dd0ee1b2d2cda3caec0", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 65, "deletions": 10, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74db2a472ab3ef14f7022d8680a7545bcd95a075/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74db2a472ab3ef14f7022d8680a7545bcd95a075/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=74db2a472ab3ef14f7022d8680a7545bcd95a075", "patch": "@@ -202,7 +202,17 @@ read_sf_internal (st_parameter_dt *dtp, int * length)\n     }\n \n   lorig = *length;\n-  base = mem_alloc_r (dtp->u.p.current_unit->s, length);\n+  if (is_char4_unit(dtp))\n+    {\n+      int i;\n+      gfc_char4_t *p = (gfc_char4_t *) mem_alloc_r4 (dtp->u.p.current_unit->s,\n+\t\t\tlength);\n+      base = fbuf_alloc (dtp->u.p.current_unit, lorig);\n+      for (i = 0; i < *length; i++, p++)\n+\tbase[i] = *p > 255 ? '?' : (unsigned char) *p;\n+    }\n+  else\n+    base = mem_alloc_r (dtp->u.p.current_unit->s, length);\n \n   if (unlikely (lorig > *length))\n     {\n@@ -430,7 +440,7 @@ read_block_form (st_parameter_dt *dtp, int * nbytes)\n     dtp->u.p.size_used += (GFC_IO_INT) *nbytes;\n \n   if (norig != *nbytes)\n-    {\t\t\t\t\n+    {\n       /* Short read, this shouldn't happen.  */\n       if (!dtp->u.p.current_unit->pad_status == PAD_YES)\n \t{\n@@ -445,6 +455,52 @@ read_block_form (st_parameter_dt *dtp, int * nbytes)\n }\n \n \n+/* Read a block from a character(kind=4) internal unit, to be transferred into\n+   a character(kind=4) variable.  Note: Portions of this code borrowed from\n+   read_sf_internal.  */\n+void *\n+read_block_form4 (st_parameter_dt *dtp, int * nbytes)\n+{\n+  static gfc_char4_t *empty_string[0];\n+  gfc_char4_t *source;\n+  int lorig;\n+\n+  if (dtp->u.p.current_unit->bytes_left < (gfc_offset) *nbytes)\n+    *nbytes = dtp->u.p.current_unit->bytes_left;\n+\n+  /* Zero size array gives internal unit len of 0.  Nothing to read. */\n+  if (dtp->internal_unit_len == 0\n+      && dtp->u.p.current_unit->pad_status == PAD_NO)\n+    hit_eof (dtp);\n+\n+  /* If we have seen an eor previously, return a length of 0.  The\n+     caller is responsible for correctly padding the input field.  */\n+  if (dtp->u.p.sf_seen_eor)\n+    {\n+      *nbytes = 0;\n+      /* Just return something that isn't a NULL pointer, otherwise the\n+         caller thinks an error occured.  */\n+      return empty_string;\n+    }\n+\n+  lorig = *nbytes;\n+  source = (gfc_char4_t *) mem_alloc_r4 (dtp->u.p.current_unit->s, nbytes);\n+\n+  if (unlikely (lorig > *nbytes))\n+    {\n+      hit_eof (dtp);\n+      return NULL;\n+    }\n+\n+  dtp->u.p.current_unit->bytes_left -= *nbytes;\n+\n+  if ((dtp->common.flags & IOPARM_DT_HAS_SIZE) != 0)\n+    dtp->u.p.size_used += (GFC_IO_INT) *nbytes;\n+\n+  return source;\n+}\n+\n+\n /* Reads a block directly into application data space.  This is for\n    unformatted files.  */\n \n@@ -561,7 +617,6 @@ read_block_direct (st_parameter_dt *dtp, void *buf, size_t nbytes)\n       have_read_record += have_read_subrecord;\n \n       if (unlikely (to_read_subrecord != have_read_subrecord))\n-\t\t\t\n \t{\n \t  /* Short read, e.g. if we hit EOF.  This means the record\n \t     structure has been corrupted, or the trailing record\n@@ -640,7 +695,7 @@ write_block (st_parameter_dt *dtp, int length)\n \n   if (is_internal_unit (dtp))\n     {\n-      if (dtp->common.unit) /* char4 internal unit.  */\n+      if (dtp->common.unit) /* char4 internel unit.  */\n \tdest = mem_alloc_w4 (dtp->u.p.current_unit->s, &length);\n       else\n \tdest = mem_alloc_w (dtp->u.p.current_unit->s, &length);\n@@ -658,10 +713,10 @@ write_block (st_parameter_dt *dtp, int length)\n     {\n       dest = fbuf_alloc (dtp->u.p.current_unit, length);\n       if (dest == NULL)\n-        {\n-          generate_error (&dtp->common, LIBERROR_OS, NULL);\n-          return NULL;\n-        }\n+\t{\n+\t  generate_error (&dtp->common, LIBERROR_OS, NULL);\n+\t  return NULL;\n+\t}\n     }\n     \n   if ((dtp->common.flags & IOPARM_DT_HAS_SIZE) != 0)\n@@ -1258,7 +1313,7 @@ formatted_transfer_scalar_read (st_parameter_dt *dtp, bt type, void *p, int kind\n \t  consume_data_flag = 0;\n \t  dtp->u.p.current_unit->decimal_status = DECIMAL_POINT;\n \t  break;\n-\t\n+\n \tcase FMT_RC:\n \t  consume_data_flag = 0;\n \t  dtp->u.p.current_unit->round_status = ROUND_COMPATIBLE;\n@@ -1539,7 +1594,7 @@ formatted_transfer_scalar_write (st_parameter_dt *dtp, bt type, void *p, int kin\n \t\twrite_i (dtp, f, p, kind);\n \t\tbreak;\n \t      case BT_LOGICAL:\n-\t\twrite_l (dtp, f, p, kind);\t\n+\t\twrite_l (dtp, f, p, kind);\n \t\tbreak;\n \t      case BT_CHARACTER:\n \t\tif (kind == 4)"}, {"sha": "a0018dbb4f7280fc95df24329cf8d53f168a2146", "filename": "libgfortran/io/unit.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74db2a472ab3ef14f7022d8680a7545bcd95a075/libgfortran%2Fio%2Funit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74db2a472ab3ef14f7022d8680a7545bcd95a075/libgfortran%2Fio%2Funit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funit.c?ref=74db2a472ab3ef14f7022d8680a7545bcd95a075", "patch": "@@ -424,8 +424,11 @@ get_internal_unit (st_parameter_dt *dtp)\n \n   /* Set initial values for unit parameters.  */\n   if (dtp->common.unit)\n-    iunit->s = open_internal4 (dtp->internal_unit - start_record,\n-\t\t\t       dtp->internal_unit_len, -start_record);\n+    {\n+      iunit->s = open_internal4 (dtp->internal_unit - start_record,\n+\t\t\t\t dtp->internal_unit_len, -start_record);\n+      fbuf_init (iunit, 256);\n+    }\n   else\n     iunit->s = open_internal (dtp->internal_unit - start_record,\n \t\t\t      dtp->internal_unit_len, -start_record);\n@@ -475,6 +478,9 @@ free_internal_unit (st_parameter_dt *dtp)\n   if (!is_internal_unit (dtp))\n     return;\n \n+  if (unlikely (is_char4_unit (dtp)))\n+    fbuf_destroy (dtp->u.p.current_unit);\n+\n   if (dtp->u.p.current_unit != NULL)\n     {\n       if (dtp->u.p.current_unit->ls != NULL)\n@@ -497,7 +503,7 @@ get_unit (st_parameter_dt *dtp, int do_create)\n {\n \n   if ((dtp->common.flags & IOPARM_DT_HAS_INTERNAL_UNIT) != 0)\n-    return get_internal_unit(dtp);\n+    return get_internal_unit (dtp);\n \n   /* Has to be an external unit.  */\n "}, {"sha": "fe6134798bfbf5bf648d379635a2032799eff715", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74db2a472ab3ef14f7022d8680a7545bcd95a075/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74db2a472ab3ef14f7022d8680a7545bcd95a075/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=74db2a472ab3ef14f7022d8680a7545bcd95a075", "patch": "@@ -1340,6 +1340,29 @@ write_character (st_parameter_dt *dtp, const char *source, int kind, int length)\n       if (p == NULL)\n \treturn;\n \n+      if (unlikely (is_char4_unit (dtp)))\n+\t{\n+\t  gfc_char4_t d4 = (gfc_char4_t) d;\n+\t  gfc_char4_t *p4 = (gfc_char4_t *) p;\n+\n+\t  if (d4 == ' ')\n+\t    memcpy4 (p4, 0, source, length);\n+\t  else\n+\t    {\n+\t      *p4++ = d4;\n+\n+\t      for (i = 0; i < length; i++)\n+\t\t{\n+\t\t  *p4++ = (gfc_char4_t) source[i];\n+\t\t  if (source[i] == d)\n+\t\t    *p4++ = d4;\n+\t\t}\n+\n+\t      *p4 = d4;\n+\t    }\n+\t  return;\n+\t}\n+\n       if (d == ' ')\n \tmemcpy (p, source, length);\n       else"}]}