{"sha": "ad32f0675e6596552ec670ef4afc71f0803be2fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQzMmYwNjc1ZTY1OTY1NTJlYzY3MGVmNGFmYzcxZjA4MDNiZTJmYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-04-21T08:58:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-04-21T08:58:39Z"}, "message": "tree.h (build_qualified_type): Annotate with CXX_MEM_STAT_INFO.\n\n2017-04-21  Richard Biener  <rguenther@suse.de>\n\n\t* tree.h (build_qualified_type): Annotate with CXX_MEM_STAT_INFO.\n\t(build_distinct_type_copy): Likewise.\n\t(build_variant_type_copy): Likewise.\n\t* tree.c (build_qualified_type): Pass down mem-stat info.\n\t(build_distinct_type_copy): Likewise.\n\t(build_variant_type_copy): Likewise.\n\n\tcp/\n\t* cp-tree.h (copy_decl): Annotate with CXX_MEM_STAT_INFO.\n\t(copy_type): Likewise.\n\t* lex.c (copy_decl): Pass down mem-stat info.\n\t(copy_type): Likewise.\n\nFrom-SVN: r247053", "tree": {"sha": "1685c097faa80ff182dbc65cdb58d72fd5b911a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1685c097faa80ff182dbc65cdb58d72fd5b911a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad32f0675e6596552ec670ef4afc71f0803be2fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad32f0675e6596552ec670ef4afc71f0803be2fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad32f0675e6596552ec670ef4afc71f0803be2fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad32f0675e6596552ec670ef4afc71f0803be2fa/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "666f7903e0334ef65669277383e4028a4fe9ef0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/666f7903e0334ef65669277383e4028a4fe9ef0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/666f7903e0334ef65669277383e4028a4fe9ef0c"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "370d0b4d1b1cc8160605ce49083eb2d15e8b2dba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad32f0675e6596552ec670ef4afc71f0803be2fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad32f0675e6596552ec670ef4afc71f0803be2fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad32f0675e6596552ec670ef4afc71f0803be2fa", "patch": "@@ -1,3 +1,12 @@\n+2017-04-21  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree.h (build_qualified_type): Annotate with CXX_MEM_STAT_INFO.\n+\t(build_distinct_type_copy): Likewise.\n+\t(build_variant_type_copy): Likewise.\n+\t* tree.c (build_qualified_type): Pass down mem-stat info.\n+\t(build_distinct_type_copy): Likewise.\n+\t(build_variant_type_copy): Likewise.\n+\n 2017-04-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/80237"}, {"sha": "dad7a0a2520f31c06c004a94241522816428d60b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad32f0675e6596552ec670ef4afc71f0803be2fa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad32f0675e6596552ec670ef4afc71f0803be2fa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ad32f0675e6596552ec670ef4afc71f0803be2fa", "patch": "@@ -1,3 +1,10 @@\n+2017-04-21  Richard Biener  <rguenther@suse.de>\n+\n+\t* cp-tree.h (copy_decl): Annotate with CXX_MEM_STAT_INFO.\n+\t(copy_type): Likewise.\n+\t* lex.c (copy_decl): Pass down mem-stat info.\n+\t(copy_type): Likewise.\n+\n 2017-04-20  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR c++/80473"}, {"sha": "1d53e69b24101366e09a40a5b1983e069785e977", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad32f0675e6596552ec670ef4afc71f0803be2fa/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad32f0675e6596552ec670ef4afc71f0803be2fa/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ad32f0675e6596552ec670ef4afc71f0803be2fa", "patch": "@@ -6081,8 +6081,8 @@ extern tree unqualified_fn_lookup_error\t\t(cp_expr);\n extern tree build_lang_decl\t\t\t(enum tree_code, tree, tree);\n extern tree build_lang_decl_loc\t\t\t(location_t, enum tree_code, tree, tree);\n extern void retrofit_lang_decl\t\t\t(tree);\n-extern tree copy_decl\t\t\t\t(tree);\n-extern tree copy_type\t\t\t\t(tree);\n+extern tree copy_decl\t\t\t\t(tree CXX_MEM_STAT_INFO);\n+extern tree copy_type\t\t\t\t(tree CXX_MEM_STAT_INFO);\n extern tree cxx_make_type\t\t\t(enum tree_code);\n extern tree make_class_type\t\t\t(enum tree_code);\n extern bool cxx_init\t\t\t\t(void);"}, {"sha": "0f8a269dce4dc8aa707e837fc9ab01fe43bba002", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad32f0675e6596552ec670ef4afc71f0803be2fa/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad32f0675e6596552ec670ef4afc71f0803be2fa/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=ad32f0675e6596552ec670ef4afc71f0803be2fa", "patch": "@@ -607,11 +607,11 @@ cxx_dup_lang_specific_decl (tree node)\n /* Copy DECL, including any language-specific parts.  */\n \n tree\n-copy_decl (tree decl)\n+copy_decl (tree decl MEM_STAT_DECL)\n {\n   tree copy;\n \n-  copy = copy_node (decl);\n+  copy = copy_node_stat (decl PASS_MEM_STAT);\n   cxx_dup_lang_specific_decl (copy);\n   return copy;\n }\n@@ -645,11 +645,11 @@ copy_lang_type (tree node)\n /* Copy TYPE, including any language-specific parts.  */\n \n tree\n-copy_type (tree type)\n+copy_type (tree type MEM_STAT_DECL)\n {\n   tree copy;\n \n-  copy = copy_node (type);\n+  copy = copy_node_stat (type PASS_MEM_STAT);\n   copy_lang_type (copy);\n   return copy;\n }"}, {"sha": "f6516d15ff07c10deac410451d6190312f8cedaf", "filename": "gcc/tree.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad32f0675e6596552ec670ef4afc71f0803be2fa/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad32f0675e6596552ec670ef4afc71f0803be2fa/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ad32f0675e6596552ec670ef4afc71f0803be2fa", "patch": "@@ -6622,7 +6622,7 @@ get_qualified_type (tree type, int type_quals)\n    exist.  This function never returns NULL_TREE.  */\n \n tree\n-build_qualified_type (tree type, int type_quals)\n+build_qualified_type (tree type, int type_quals MEM_STAT_DECL)\n {\n   tree t;\n \n@@ -6632,7 +6632,7 @@ build_qualified_type (tree type, int type_quals)\n   /* If not, build it.  */\n   if (!t)\n     {\n-      t = build_variant_type_copy (type);\n+      t = build_variant_type_copy (type PASS_MEM_STAT);\n       set_type_quals (t, type_quals);\n \n       if (((type_quals & TYPE_QUAL_ATOMIC) == TYPE_QUAL_ATOMIC))\n@@ -6695,9 +6695,9 @@ build_aligned_type (tree type, unsigned int align)\n    TYPE_CANONICAL points to itself. */\n \n tree\n-build_distinct_type_copy (tree type)\n+build_distinct_type_copy (tree type MEM_STAT_DECL)\n {\n-  tree t = copy_node (type);\n+  tree t = copy_node_stat (type PASS_MEM_STAT);\n \n   TYPE_POINTER_TO (t) = 0;\n   TYPE_REFERENCE_TO (t) = 0;\n@@ -6733,11 +6733,11 @@ build_distinct_type_copy (tree type)\n    require structural equality checks). */\n \n tree\n-build_variant_type_copy (tree type)\n+build_variant_type_copy (tree type MEM_STAT_DECL)\n {\n   tree t, m = TYPE_MAIN_VARIANT (type);\n \n-  t = build_distinct_type_copy (type);\n+  t = build_distinct_type_copy (type PASS_MEM_STAT);\n \n   /* Since we're building a variant, assume that it is a non-semantic\n      variant. This also propagates TYPE_STRUCTURAL_EQUALITY_P. */"}, {"sha": "599d34fb3a59f387f6e1fd4669233322d720091e", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad32f0675e6596552ec670ef4afc71f0803be2fa/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad32f0675e6596552ec670ef4afc71f0803be2fa/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ad32f0675e6596552ec670ef4afc71f0803be2fa", "patch": "@@ -4265,7 +4265,7 @@ extern tree get_qualified_type (tree, int);\n /* Like get_qualified_type, but creates the type if it does not\n    exist.  This function never returns NULL_TREE.  */\n \n-extern tree build_qualified_type (tree, int);\n+extern tree build_qualified_type (tree, int CXX_MEM_STAT_INFO);\n \n /* Create a variant of type T with alignment ALIGN.  */\n \n@@ -4283,8 +4283,8 @@ extern tree build_aligned_type (tree, unsigned int);\n \n /* Make a copy of a type node.  */\n \n-extern tree build_distinct_type_copy (tree);\n-extern tree build_variant_type_copy (tree);\n+extern tree build_distinct_type_copy (tree CXX_MEM_STAT_INFO);\n+extern tree build_variant_type_copy (tree CXX_MEM_STAT_INFO);\n \n /* Given a hashcode and a ..._TYPE node (for which the hashcode was made),\n    return a canonicalized ..._TYPE node, so that duplicates are not made."}]}