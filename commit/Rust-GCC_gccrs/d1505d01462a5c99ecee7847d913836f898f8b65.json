{"sha": "d1505d01462a5c99ecee7847d913836f898f8b65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE1MDVkMDE0NjJhNWM5OWVjZWU3ODQ3ZDkxMzgzNmY4OThmOGI2NQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-12-12T14:35:55Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-12-12T14:35:55Z"}, "message": "libstdc++: Simplify std::common_comparison_category\n\n\t* libsupc++/compare (common_comparison_category): Define without using\n\tconcepts and optimise for compilation time.\n\t(__detail::__cmp_cat_ids): Remove.\n\t(__detail::__common_cmp_cat): Replace class template and\n\tspecializations with constexpr function.\n\nFrom-SVN: r279307", "tree": {"sha": "e8e8bdb449652308695c8d755bd931b73c87c8dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8e8bdb449652308695c8d755bd931b73c87c8dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1505d01462a5c99ecee7847d913836f898f8b65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1505d01462a5c99ecee7847d913836f898f8b65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1505d01462a5c99ecee7847d913836f898f8b65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1505d01462a5c99ecee7847d913836f898f8b65/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fb1d6d65474998f9359203af9785f8613f3b622", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fb1d6d65474998f9359203af9785f8613f3b622", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fb1d6d65474998f9359203af9785f8613f3b622"}], "stats": {"total": 61, "additions": 30, "deletions": 31}, "files": [{"sha": "91d60d0bff4b604133ae89f34131e34ce3ae84f6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1505d01462a5c99ecee7847d913836f898f8b65/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1505d01462a5c99ecee7847d913836f898f8b65/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d1505d01462a5c99ecee7847d913836f898f8b65", "patch": "@@ -1,3 +1,11 @@\n+2019-12-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* libsupc++/compare (common_comparison_category): Define without using\n+\tconcepts and optimise for compilation time.\n+\t(__detail::__cmp_cat_ids): Remove.\n+\t(__detail::__common_cmp_cat): Replace class template and\n+\tspecializations with constexpr function.\n+\n 2019-12-12  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/tr1/cctype: Add _GLIBCXX_BEGIN_VERSION_NAMESPACE and"}, {"sha": "f77b7d71e04e979be5c90e47a645b4681ff330e5", "filename": "libstdc++-v3/libsupc++/compare", "status": "modified", "additions": 22, "deletions": 31, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1505d01462a5c99ecee7847d913836f898f8b65/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1505d01462a5c99ecee7847d913836f898f8b65/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare?ref=d1505d01462a5c99ecee7847d913836f898f8b65", "patch": "@@ -385,53 +385,43 @@ namespace std\n   is_gteq(partial_ordering __cmp) noexcept\n   { return __cmp >= 0; }\n \n-#if __cpp_lib_concepts\n   namespace __detail\n   {\n     template<typename _Tp>\n       inline constexpr unsigned __cmp_cat_id = 1;\n     template<>\n-      inline constexpr unsigned __cmp_cat_id<strong_ordering> = 2;\n+      inline constexpr unsigned __cmp_cat_id<partial_ordering> = 2;\n     template<>\n       inline constexpr unsigned __cmp_cat_id<weak_ordering> = 4;\n     template<>\n-      inline constexpr unsigned __cmp_cat_id<partial_ordering> = 8;\n+      inline constexpr unsigned __cmp_cat_id<strong_ordering> = 8;\n \n     template<typename... _Ts>\n-      constexpr unsigned __cmp_cat_ids()\n-      { return (__cmp_cat_id<_Ts> | ...); }\n-\n-    template<unsigned>\n-      struct __common_cmp_cat;\n-\n-    // If any Ti is not a comparison category type, U is void.\n-    template<unsigned _Bits>\n-      requires ((_Bits & 1) == 1)\n-      struct __common_cmp_cat<_Bits> { using type = void; };\n-\n-    // Otherwise, if at least one Ti is std::partial_ordering,\n-    // U is std::partial_ordering.\n-    template<unsigned _Bits>\n-      requires ((_Bits & 0b1001) == 0b1000)\n-      struct __common_cmp_cat<_Bits> { using type = partial_ordering; };\n-\n-    // Otherwise, if at least one Ti is std::weak_ordering,\n-    // U is std::weak_ordering.\n-    template<unsigned _Bits>\n-      requires ((_Bits & 0b1101) == 0b0100)\n-      struct __common_cmp_cat<_Bits> { using type = weak_ordering; };\n-\n-    // Otherwise, U is std::strong_ordering.\n-    template<>\n-      struct __common_cmp_cat<0b0010> { using type = strong_ordering; };\n+      constexpr auto __common_cmp_cat()\n+      {\n+\tconstexpr unsigned __cats = (__cmp_cat_id<_Ts> | ...);\n+\t// If any Ti is not a comparison category type, U is void.\n+\tif constexpr (__cats & 1)\n+\t  return;\n+\t// Otherwise, if at least one Ti is std::partial_ordering,\n+\t// U is std::partial_ordering.\n+\telse if constexpr (bool(__cats & __cmp_cat_id<partial_ordering>))\n+\t  return partial_ordering::equivalent;\n+\t// Otherwise, if at least one Ti is std::weak_ordering,\n+\t// U is std::weak_ordering.\n+\telse if constexpr (bool(__cats & __cmp_cat_id<weak_ordering>))\n+\t  return weak_ordering::equivalent;\n+\t// Otherwise, U is std::strong_ordering.\n+\telse\n+\t  return strong_ordering::equivalent;\n+      }\n   } // namespace __detail\n \n   // [cmp.common], common comparison category type\n   template<typename... _Ts>\n     struct common_comparison_category\n     {\n-      using type\n-\t= __detail::__common_cmp_cat<__detail::__cmp_cat_ids<_Ts...>()>::type;\n+      using type = decltype(__detail::__common_cmp_cat<_Ts...>());\n     };\n \n   // Partial specializations for one and zero argument cases.\n@@ -460,6 +450,7 @@ namespace std\n     using common_comparison_category_t\n       = typename common_comparison_category<_Ts...>::type;\n \n+#if __cpp_lib_concepts\n   namespace __detail\n   {\n     template<typename _Tp, typename _Cat>"}]}