{"sha": "e11b776b63c214d3e0792fa49ca2153df64d11d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTExYjc3NmI2M2MyMTRkM2UwNzkyZmE0OWNhMjE1M2RmNjRkMTFkOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-06T11:06:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-06T11:06:24Z"}, "message": "[multiple changes]\n\n2017-01-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Loop_Statement): If the loop includes an\n\titerator specification with a serious syntactic error, transform\n\tconstruct into an infinite loop in order to continue analysis\n\tand prevent a compiler abort.\n\n2017-01-06  Tristan Gingold  <gingold@adacore.com>\n\n\t* exp_ch9.adb (Expand_N_Protected_Type_Declaration): Do not generate\n\tmax_queue_lengths_array if unused.\n\n2017-01-06  Bob Duff  <duff@adacore.com>\n\n\t* errout.adb (Set_Msg_Text): Protect against out-of-bounds\n\tarray access, in case \"\\\" is at the end of Text.\n\t* stylesw.adb (Set_Style_Check_Options): Don't include input\n\tcharacters in the error message template, because they could\n\tbe control characters such as \"\\\", which Errout will try to\n\tinterpret.\n\n2017-01-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Find_Indexing_Operations, Inspect_Declarations):\n\tFor a private type examine the visible declarations that follow\n\tthe partial view, not just the private declarations that follow\n\tthe full view.\n\n2017-01-06  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch5.adb, sem_ch3.adb, checks.adb: Minor reformatting and\n\tcode cleanup.\n\nFrom-SVN: r244133", "tree": {"sha": "a248ffec6c718d983b67ac49dc29fbd18854a775", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a248ffec6c718d983b67ac49dc29fbd18854a775"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e11b776b63c214d3e0792fa49ca2153df64d11d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e11b776b63c214d3e0792fa49ca2153df64d11d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e11b776b63c214d3e0792fa49ca2153df64d11d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e11b776b63c214d3e0792fa49ca2153df64d11d9/comments", "author": null, "committer": null, "parents": [{"sha": "6eca51ce090586d67fe01897c848bb224142549f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eca51ce090586d67fe01897c848bb224142549f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eca51ce090586d67fe01897c848bb224142549f"}], "stats": {"total": 88, "additions": 74, "deletions": 14}, "files": [{"sha": "ac0d8b20365128a748d8bbaff9842c092b2773a8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11b776b63c214d3e0792fa49ca2153df64d11d9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11b776b63c214d3e0792fa49ca2153df64d11d9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e11b776b63c214d3e0792fa49ca2153df64d11d9", "patch": "@@ -1,3 +1,36 @@\n+2017-01-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Loop_Statement): If the loop includes an\n+\titerator specification with a serious syntactic error, transform\n+\tconstruct into an infinite loop in order to continue analysis\n+\tand prevent a compiler abort.\n+\n+2017-01-06  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* exp_ch9.adb (Expand_N_Protected_Type_Declaration): Do not generate\n+\tmax_queue_lengths_array if unused.\n+\n+2017-01-06  Bob Duff  <duff@adacore.com>\n+\n+\t* errout.adb (Set_Msg_Text): Protect against out-of-bounds\n+\tarray access, in case \"\\\" is at the end of Text.\n+\t* stylesw.adb (Set_Style_Check_Options): Don't include input\n+\tcharacters in the error message template, because they could\n+\tbe control characters such as \"\\\", which Errout will try to\n+\tinterpret.\n+\n+2017-01-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Find_Indexing_Operations, Inspect_Declarations):\n+\tFor a private type examine the visible declarations that follow\n+\tthe partial view, not just the private declarations that follow\n+\tthe full view.\n+\n+2017-01-06  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch5.adb, sem_ch3.adb, checks.adb: Minor reformatting and\n+\tcode cleanup.\n+\n 2017-01-06  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch5.adb (Get_Default_Iterator): For a derived type, the"}, {"sha": "efb36840185d590a4e579bed0aeed0bba9b37573", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11b776b63c214d3e0792fa49ca2153df64d11d9/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11b776b63c214d3e0792fa49ca2153df64d11d9/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=e11b776b63c214d3e0792fa49ca2153df64d11d9", "patch": "@@ -2638,14 +2638,14 @@ package body Checks is\n \n          elsif Present (S) and then S = Predicate_Function (Typ) then\n             Error_Msg_NE\n-              (\"predicate check includes a call to& that \"\n-               & \"requires a predicate check??\", Parent (N), Fun);\n+              (\"predicate check includes a call to& that requires a \"\n+               & \"predicate check??\", Parent (N), Fun);\n             Error_Msg_N\n               (\"\\this will result in infinite recursion??\", Parent (N));\n \n             if Is_First_Subtype (Typ) then\n                Error_Msg_NE\n-               (\"\\use an explicit subtype of& to carry the predicate\",\n+                 (\"\\use an explicit subtype of& to carry the predicate\",\n                   Parent (N), Typ);\n             end if;\n "}, {"sha": "49aa2a7765f2fdce47ab1aa22ebab97e42a79e8a", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11b776b63c214d3e0792fa49ca2153df64d11d9/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11b776b63c214d3e0792fa49ca2153df64d11d9/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=e11b776b63c214d3e0792fa49ca2153df64d11d9", "patch": "@@ -2992,7 +2992,7 @@ package body Errout is\n             when '\\' =>\n                Continuation := True;\n \n-               if Text (P) = '\\' then\n+               if P <= Text'Last and then Text (P) = '\\' then\n                   Continuation_New_Line := True;\n                   P := P + 1;\n                end if;"}, {"sha": "dff953b404d699bfaf21b1a7971afc0cfbc5b76c", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11b776b63c214d3e0792fa49ca2153df64d11d9/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11b776b63c214d3e0792fa49ca2153df64d11d9/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=e11b776b63c214d3e0792fa49ca2153df64d11d9", "patch": "@@ -3777,9 +3777,10 @@ package body Exp_Ch5 is\n                      Op := Node (Prim);\n \n                      if Alias (Op) = Iter\n-                       or else (Chars (Op) = Chars (Iter)\n-                         and then Present (DTC_Entity (Op))\n-                         and then DT_Position (Op) = DT_Position (Iter))\n+                       or else\n+                         (Chars (Op) = Chars (Iter)\n+                           and then Present (DTC_Entity (Op))\n+                           and then DT_Position (Op) = DT_Position (Iter))\n                      then\n                         return Op;\n                      end if;"}, {"sha": "b2e821ca11975b58832dd8b640a68c7b04a6755c", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11b776b63c214d3e0792fa49ca2153df64d11d9/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11b776b63c214d3e0792fa49ca2153df64d11d9/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=e11b776b63c214d3e0792fa49ca2153df64d11d9", "patch": "@@ -9767,7 +9767,10 @@ package body Exp_Ch9 is\n       --  type. This object is later passed to the appropriate protected object\n       --  initialization routine.\n \n-      if Has_Entries (Prot_Typ) then\n+      if Has_Entries (Prot_Typ)\n+        and then Corresponding_Runtime_Package (Prot_Typ) =\n+                    System_Tasking_Protected_Objects_Entries\n+      then\n          declare\n             Count      : Int;\n             Item       : Entity_Id;"}, {"sha": "92d3003999d11a7bff5507d2ab373751ce33ba9e", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11b776b63c214d3e0792fa49ca2153df64d11d9/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11b776b63c214d3e0792fa49ca2153df64d11d9/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=e11b776b63c214d3e0792fa49ca2153df64d11d9", "patch": "@@ -11960,7 +11960,7 @@ package body Sem_Ch3 is\n          if (No (Item)\n               or else Nkind (Item) /= N_Aspect_Specification\n               or else Entity (Item) = Full_Base)\n-             and then Present (First_Rep_Item (Priv))\n+           and then Present (First_Rep_Item (Priv))\n          then\n             Set_First_Rep_Item (Full, Priv_Item);\n \n@@ -14182,7 +14182,8 @@ package body Sem_Ch3 is\n            Governed_By   => Assoc_List,\n            Into          => Comp_List,\n            Report_Errors => Errors);\n-         pragma Assert (not Errors);\n+         pragma Assert (not Errors\n+           or else Serious_Errors_Detected > 0);\n \n          Create_All_Components;\n "}, {"sha": "253a12dabbb4bc066ae4ebc922917c3e9cd1b14b", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11b776b63c214d3e0792fa49ca2153df64d11d9/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11b776b63c214d3e0792fa49ca2153df64d11d9/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=e11b776b63c214d3e0792fa49ca2153df64d11d9", "patch": "@@ -7798,7 +7798,16 @@ package body Sem_Ch4 is\n          Ref := Empty;\n          Typ := Underlying_Type (Base_Type (Typ));\n \n-         Inspect_Primitives   (Typ, Ref);\n+         Inspect_Primitives (Typ, Ref);\n+\n+         --  Now look for explicit declarations of an indexing operation.\n+         --  If the type is private the operation may be declared in the\n+         --  visible part that contains the partial view.\n+\n+         if Is_Private_Type (T) then\n+            Inspect_Declarations (T, Ref);\n+         end if;\n+\n          Inspect_Declarations (Typ, Ref);\n \n          return Ref;"}, {"sha": "fefdbc31b2abc68dc032680c9ff590208b665e96", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11b776b63c214d3e0792fa49ca2153df64d11d9/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11b776b63c214d3e0792fa49ca2153df64d11d9/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=e11b776b63c214d3e0792fa49ca2153df64d11d9", "patch": "@@ -3273,6 +3273,19 @@ package body Sem_Ch5 is\n          Set_Has_Created_Identifier (N);\n       end if;\n \n+      --  If the iterator specification has a syntactic error, transform\n+      --  construct into an infinite loop to prevent a crash and perform\n+      --  some analysis.\n+\n+      if Present (Iter)\n+        and then Present (Iterator_Specification (Iter))\n+        and then Error_Posted (Iterator_Specification (Iter))\n+      then\n+         Set_Iteration_Scheme (N, Empty);\n+         Analyze (N);\n+         return;\n+      end if;\n+\n       --  Iteration over a container in Ada 2012 involves the creation of a\n       --  controlled iterator object. Wrap the loop in a block to ensure the\n       --  timely finalization of the iterator and release of container locks."}, {"sha": "8ff3ce6db5424fa72b17ae81f9e48d23d2d71657", "filename": "gcc/ada/stylesw.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11b776b63c214d3e0792fa49ca2153df64d11d9/gcc%2Fada%2Fstylesw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11b776b63c214d3e0792fa49ca2153df64d11d9/gcc%2Fada%2Fstylesw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstylesw.adb?ref=e11b776b63c214d3e0792fa49ca2153df64d11d9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -471,7 +471,7 @@ package body Stylesw is\n                   Write_Line (\"unrecognized switch -gnaty\" & C & \" ignored\");\n                else\n                   Err_Col := Err_Col - 1;\n-                  Bad_Style_Switch (\"invalid style switch: \" & C);\n+                  Bad_Style_Switch (\"invalid style switch\");\n                   return;\n                end if;\n             end case;\n@@ -580,7 +580,7 @@ package body Stylesw is\n                   Write_Line (\"unrecognized switch -gnaty-\" & C & \" ignored\");\n                else\n                   Err_Col := Err_Col - 1;\n-                  Bad_Style_Switch (\"invalid style switch: \" & C);\n+                  Bad_Style_Switch (\"invalid style switch\");\n                   return;\n                end if;\n             end case;"}]}