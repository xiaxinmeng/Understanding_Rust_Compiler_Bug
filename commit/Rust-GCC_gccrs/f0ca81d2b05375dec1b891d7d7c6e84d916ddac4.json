{"sha": "f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBjYTgxZDJiMDUzNzVkZWMxYjg5MWQ3ZDdjNmU4NGQ5MTZkZGFjNA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2000-09-25T13:03:20Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2000-09-25T13:03:20Z"}, "message": "Change callers in config/[h-l]*/ to match:\n\nChanges add TABs on either or both sides, covering start of line,\nup to any operand for all .*ASM.*_OP definitions.\n\nFrom-SVN: r36619", "tree": {"sha": "457c93d2e660e4af8032f8d4f333fc2d67a3d3f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/457c93d2e660e4af8032f8d4f333fc2d67a3d3f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/comments", "author": null, "committer": null, "parents": [{"sha": "614cd6b03fb00ebfbec121b6fead9902a5b3c17e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/614cd6b03fb00ebfbec121b6fead9902a5b3c17e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/614cd6b03fb00ebfbec121b6fead9902a5b3c17e"}], "stats": {"total": 126, "additions": 63, "deletions": 63}, "files": [{"sha": "8b5d64d2c0337a979c701323aabe591654a164ba", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "patch": "@@ -1145,11 +1145,11 @@ readonly_data () \t\t\t\t\t\t\\\n \n #define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\\\n   do { ctors_section();\t\t\t\t\\\n-       fprintf(FILE, \"\\t%s\\t_%s\\n\", ASM_WORD_OP, NAME); } while (0)\n+       fprintf(FILE, \"%s_%s\\n\", ASM_WORD_OP, NAME); } while (0)\n \n #define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)\t\\\n   do { dtors_section();\t\t\t\t\\\n-       fprintf(FILE, \"\\t%s\\t_%s\\n\", ASM_WORD_OP, NAME); } while (0)\n+       fprintf(FILE, \"%s_%s\\n\", ASM_WORD_OP, NAME); } while (0)\n \n #undef DO_GLOBAL_CTORS_BODY\n #define DO_GLOBAL_CTORS_BODY\t\t\t\\\n@@ -1335,12 +1335,12 @@ do { char dstr[30];\t\t\t\t\t\\\n /* This is how to output an element of a case-vector that is absolute.  */\n \n #define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE) \\\n-  asm_fprintf (FILE, \"\\t%s .L%d\\n\", ASM_WORD_OP, VALUE)\n+  asm_fprintf (FILE, \"%s.L%d\\n\", ASM_WORD_OP, VALUE)\n \n /* This is how to output an element of a case-vector that is relative.  */\n \n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-  fprintf (FILE, \"\\t%s .L%d-.L%d\\n\", ASM_WORD_OP, VALUE, REL)\n+  fprintf (FILE, \"%s.L%d-.L%d\\n\", ASM_WORD_OP, VALUE, REL)\n \n /* This is how to output an assembler line\n    that says to advance the location counter\n@@ -1354,7 +1354,7 @@ do { char dstr[30];\t\t\t\t\t\\\n    that says to advance the location counter by SIZE bytes.  */\n \n #define ASM_OUTPUT_IDENT(FILE, NAME)\t\t\t\\\n-  fprintf(FILE, \"%s\\t \\\"%s\\\"\\n\", IDENT_ASM_OP, NAME)\n+  fprintf(FILE, \"%s\\\"%s\\\"\\n\", IDENT_ASM_OP, NAME)\n \n #define ASM_OUTPUT_SKIP(FILE, SIZE) \\\n   fprintf (FILE, \"\\t.space %d\\n\", (SIZE))"}, {"sha": "8967d0b6de6dec9b573642ed484fa8d8011674a7", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "patch": "@@ -2048,13 +2048,13 @@ abort(); \\\n \n \n #define ASM_OUTPUT_CHAR(FILE,VALUE)  \\\n-( fprintf (FILE, \"%s \", ASM_BYTE_OP),           \\\n+( fprintf (FILE, \"%s\", ASM_BYTE_OP),            \\\n   output_addr_const (FILE, (VALUE)),            \\\n   putc ('\\n', FILE))\n \n /* This is how to output an assembler line for a numeric constant byte.  */\n #define ASM_OUTPUT_BYTE(FILE,VALUE)  \\\n-  fprintf ((FILE), \"%s 0x%x\\n\", ASM_BYTE_OP, (VALUE))\n+  fprintf ((FILE), \"%s0x%x\\n\", ASM_BYTE_OP, (VALUE))\n  \n /* This is how to output the definition of a user-level label named NAME,\n    such as the label on a static function or variable NAME.  */"}, {"sha": "773c0f0afae097d1937d092608b2f72a5ed7ae11", "filename": "gcc/config/i386/att.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Fatt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Fatt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fatt.h?ref=f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for AT&T assembler syntax for the Intel 80386.\n-   Copyright (C) 1988, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1996, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -42,7 +42,7 @@ do\t\t\t\t\t\t\t\t\\\n { int i = 0; \t\t\t\t\t\t\t\\\n   while (i < (size))\t\t\t\t\t\t\\\n     { if (i%10 == 0) { if (i!=0) fprintf ((FILE), \"\\n\");\t\\\n-\t\t       fprintf ((FILE), \"%s \", ASM_BYTE_OP); }\t\\\n+\t\t       fprintf ((FILE), \"%s\", ASM_BYTE_OP); }\t\\\n       else fprintf ((FILE), \",\");\t\t\t\t\\\n \tfprintf ((FILE), \"0x%x\", ((p)[i++] & 0377)) ;}\t\t\\\n       fprintf ((FILE), \"\\n\");\t\t\t\t\t\\"}, {"sha": "60e36b44dd68bc07d3f428817e289081c33cf093", "filename": "gcc/config/i386/dgux.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Fdgux.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Fdgux.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdgux.c?ref=f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "patch": "@@ -134,7 +134,7 @@ output_file_start (file, f_options, f_len, W_options, W_len)\n       char indent[256];\n \n       time_t now = time ((time_t *)0);\n-      sprintf (indent, \"]\\\"\\n\\t%s\\t \\\"@(#)%s [\", IDENT_ASM_OP, main_input_filename);\n+      sprintf (indent, \"]\\\"\\n%s\\\"@(#)%s [\", IDENT_ASM_OP, main_input_filename);\n       fprintf (file, indent+3);\n       pos = fprintf (file, \"gcc %s, %.24s,\", VERSION_STRING, ctime (&now));\n       output_options (file, f_options, f_len, W_options, W_len,"}, {"sha": "55b49cfac39a67f1b2f3a55d5ca7d3022502a2be", "filename": "gcc/config/i386/freebsd.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd.h?ref=f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "patch": "@@ -160,7 +160,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n     putc (',', FILE);\t\t\t\t\t\t\t\\\n     fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n@@ -173,7 +173,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n     putc (',', FILE);\t\t\t\t\t\t\t\\\n     fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\t\\\n@@ -182,7 +182,7 @@ Boston, MA 02111-1307, USA.  */\n     if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n         size_directive_output = 1;\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t\t\\\n+\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n \tassemble_name (FILE, NAME);\t\t\t\t\t\\\n \tfprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n@@ -203,7 +203,7 @@ do {                                                                    \\\n          && DECL_INITIAL (DECL) == error_mark_node                      \\\n          && !size_directive_output)                                     \\\n        {                                                                \\\n-         fprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);                        \\\n+         fprintf (FILE, \"%s\", SIZE_ASM_OP);                             \\\n \t assemble_name (FILE, name);                                    \\\n \t fprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\\\n \t}\t\t\t\t\t\t\t\t\\\n@@ -221,7 +221,7 @@ do {                                                                    \\\n \tlabelno++;\t\t\t\t\t\t\t\\\n \tASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\t\\\n \tASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\t\\\n-\tfprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t\t\\\n+\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n \tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n         fprintf (FILE, \",\");\t\t\t\t\t\t\\\n \tassemble_name (FILE, label);\t\t\t\t\t\\"}, {"sha": "e2e5ed700ef3daecc99f0dba1db4a09c42ab19e2", "filename": "gcc/config/i386/i386-coff.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Fi386-coff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Fi386-coff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-coff.h?ref=f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "patch": "@@ -84,7 +84,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     ctors_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n   } while (0)\n@@ -94,7 +94,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     dtors_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);              \t\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n   } while (0)"}, {"sha": "667183c3bd3874f4d6e5f72acd5a74f30f5ca2f3", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "patch": "@@ -155,7 +155,7 @@ Boston, MA 02111-1307, USA.  */\n       register const unsigned char *_limited_str =\t\t\t\\\n         (const unsigned char *) (STR);\t\t\t\t\t\\\n       register unsigned ch;\t\t\t\t\t\t\\\n-      fprintf ((FILE), \"\\t%s\\t\\\"\", STRING_ASM_OP);\t\t\t\\\n+      fprintf ((FILE), \"%s\\\"\", STRING_ASM_OP);\t\t\t\t\\\n       for (; (ch = *_limited_str); _limited_str++)\t\t\t\\\n         {\t\t\t\t\t\t\t\t\\\n \t  register int escape = ESCAPES[ch];\t\t\t\t\\\n@@ -373,7 +373,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     ctors_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n   } while (0)\n@@ -383,7 +383,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     dtors_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);              \t\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n   } while (0)\n@@ -397,7 +397,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_DEF(FILE,LABEL1,LABEL2)\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-    fprintf ((FILE), \"\\t%s\\t\", SET_ASM_OP);\t\t\t\t\\\n+    fprintf ((FILE), \"%s\", SET_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, LABEL1);\t\t\t\t\t\\\n     fprintf (FILE, \",\");\t\t\t\t\t\t\\\n     assemble_name (FILE, LABEL2);\t\t\t\t\t\\"}, {"sha": "9782ca9329ccce221c16d91992ecf1c52295f4f8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "patch": "@@ -3055,7 +3055,7 @@ i386_dwarf_output_addr_const (file, x)\n      FILE *file;\n      rtx x;\n {\n-  fprintf (file, \"\\t%s\\t\", INT_ASM_OP);\n+  fprintf (file, \"%s\", INT_ASM_OP);\n   if (flag_pic)\n     output_pic_addr_const (file, x, '\\0');\n   else"}, {"sha": "c2b580cef61e2f281e3c19022ab026f0e34082f9", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "patch": "@@ -2645,14 +2645,14 @@ do { long l;\t\t\t\t\t\t\\\n   putc('\\n',FILE))\n \n #define ASM_OUTPUT_CHAR(FILE,VALUE)  \\\n-( fprintf (FILE, \"%s\\t\", ASM_BYTE_OP),\t\t\\\n+( fprintf (FILE, \"%s\", ASM_BYTE_OP),\t\t\\\n   output_addr_const (FILE, (VALUE)),\t\t\\\n   putc ('\\n', FILE))\n \n /* This is how to output an assembler line for a numeric constant byte.  */\n \n #define ASM_OUTPUT_BYTE(FILE,VALUE)  \\\n-  asm_fprintf ((FILE), \"%s\\t0x%x\\n\", ASM_BYTE_OP, (VALUE))\n+  asm_fprintf ((FILE), \"%s0x%x\\n\", ASM_BYTE_OP, (VALUE))\n \n /* This is how to output an insn to push a register on the stack.\n    It need not be very fast code.  */"}, {"sha": "bf119aaeb10f1dc9135f79c45a82ed69ade06802", "filename": "gcc/config/i386/osfrose.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfrose.h?ref=f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "patch": "@@ -394,7 +394,7 @@ while (0)\n #define ASM_OUTPUT_DEF(FILE,LABEL1,LABEL2)\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-    fprintf ((FILE), \"\\t%s\\t\", SET_ASM_OP);\t\t\t\t\\\n+    fprintf ((FILE), \"%s\", SET_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, LABEL1);\t\t\t\t\t\\\n     fprintf (FILE, \",\");\t\t\t\t\t\t\\\n     assemble_name (FILE, LABEL2);\t\t\t\t\t\\\n@@ -651,7 +651,7 @@ do\t\t\t\t\t\t\t\t\t     \\\n    HALF_PIC_DECLARE (NAME);\t\t\t\t\t\t     \\\n    if (TARGET_ELF)\t\t\t\t\t\t\t     \\\n      {\t\t\t\t\t\t\t\t\t     \\\n-       fprintf (STREAM, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t     \\\n+       fprintf (STREAM, \"%s\", TYPE_ASM_OP);\t\t\t \t    \\\n        assemble_name (STREAM, NAME);\t\t\t\t\t     \\\n        putc (',', STREAM);\t\t\t\t\t\t     \\\n        fprintf (STREAM, TYPE_OPERAND_FMT, \"object\");\t\t\t     \\\n@@ -660,7 +660,7 @@ do\t\t\t\t\t\t\t\t\t     \\\n        if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t     \\\n \t {\t\t\t\t\t\t\t\t     \\\n            size_directive_output = 1;\t\t\t\t\t     \\\n-\t   fprintf (STREAM, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t     \\\n+\t   fprintf (STREAM, \"%s\", SIZE_ASM_OP);\t\t\t\t     \\\n \t   assemble_name (STREAM, NAME);\t\t\t\t     \\\n \t   fprintf (STREAM, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL))); \\\n \t }\t\t\t\t\t\t\t\t     \\\n@@ -683,7 +683,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n \t && DECL_INITIAL (DECL) == error_mark_node\t\t\t \\\n \t && !size_directive_output)\t\t\t\t\t \\\n        {\t\t\t\t\t\t\t\t \\\n-\t fprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t \\\n+\t fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t \\\n \t assemble_name (FILE, name);\t\t\t\t\t \\\n \t fprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL))); \\\n        }\t\t\t\t\t\t\t\t \\\n@@ -699,7 +699,7 @@ do\t\t\t\t\t\t\t\t\t\\\n    HALF_PIC_DECLARE (NAME);\t\t\t\t\t\t\\\n    if (TARGET_ELF)\t\t\t\t\t\t\t\\\n      {\t\t\t\t\t\t\t\t\t\\\n-       fprintf (STREAM, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\\\n+       fprintf (STREAM, \"%s\", TYPE_ASM_OP);\t\t\t\t\\\n        assemble_name (STREAM, NAME);\t\t\t\t\t\\\n        putc (',', STREAM);\t\t\t\t\t\t\\\n        fprintf (STREAM, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n@@ -729,7 +729,7 @@ do\t\t\t\t\t\t\t\t\t\\\n \tlabelno++;\t\t\t\t\t\t\t\\\n \tASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\t\\\n \tASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\t\\\n-\tfprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t\t\\\n+\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n \tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n         fprintf (FILE, \",\");\t\t\t\t\t\t\\\n \tassemble_name (FILE, label);\t\t\t\t\t\\\n@@ -773,7 +773,7 @@ do\t\t\t\t\t\t\t\t\t\\\n \tif (*fname == '/')\t\t\t\t\t\t\\\n \t  fname++;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-\tfprintf ((STREAM), \"\\t%s\\t\\\"GCC: (GNU) %s %s -O%d\",\t\t\\\n+\tfprintf ((STREAM), \"%s\\\"GCC: (GNU) %s %s -O%d\",\t\t\t\\\n \t\t IDENT_ASM_OP, version_string, fname, optimize);\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tif (write_symbols == PREFERRED_DEBUGGING_TYPE)\t\t\t\\"}, {"sha": "80d28fadf29b44f3af4d33bbd3a13a42b9b3ab62", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "patch": "@@ -154,7 +154,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (TARGET_ELF) {\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n+      fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\\\n       assemble_name (FILE, NAME);\t\t\t\t\t\\\n       putc (',', FILE);\t\t\t\t\t\t\t\\\n       fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n@@ -170,7 +170,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (TARGET_ELF) { if (!flag_inhibit_size_directive)\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"%s\\t \", SIZE_ASM_OP);\t\t\t\t\\\n+\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n \tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n         fprintf (FILE, \",.-\");\t\t\t\t\t\t\\\n \tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n@@ -182,7 +182,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (TARGET_ELF) {\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n+      fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\\\n       assemble_name (FILE, NAME);\t\t\t\t\t\\\n       putc (',', FILE);\t\t\t\t\t\t\t\\\n       fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\\\n@@ -191,7 +191,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n       if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\\\n         {\t\t\t\t\t\t\t\t\\\n   \tsize_directive_output = 1;\t\t\t\t\t\\\n-\tfprintf (FILE, \"%s\\t \", SIZE_ASM_OP);\t\t\t\t\\\n+\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n \tassemble_name (FILE, NAME);\t\t\t\t\t\\\n \tfprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n         }\t\t\t\t\t\t\t\t\\\n@@ -214,7 +214,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_FILE_END(FILE)\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n      if (!flag_no_ident)\t\t\t\t\t\t\\\n-\tfprintf ((FILE), \"%s\\t\\\"GCC: (GNU) %s\\\"\\n\",\t\t\t\\\n+\tfprintf ((FILE), \"%s\\\"GCC: (GNU) %s\\\"\\n\",\t\t\t\\\n \t\t IDENT_ASM_OP, version_string);\t\t\t\t\\\n } while (0)\n \n@@ -229,7 +229,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n \t && !size_directive_output)\t\t\t\t\t \\\n        {\t\t\t\t\t\t\t\t \\\n \t size_directive_output = 1;\t\t\t\t\t \\\n-\t fprintf (FILE, \"%s\\t \", SIZE_ASM_OP);\t\t\t \t \\\n+\t fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t \t \\\n \t assemble_name (FILE, name);\t\t\t\t\t \\\n \t fprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL))); \\\n        }\t\t\t\t\t\t\t\t \\\n@@ -257,7 +257,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef ASM_OUTPUT_ALIGNED_COMMON\n #define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  fprintf ((FILE), \"%s\\t\", COMMON_ASM_OP);\t\t\t\t\\\n+  fprintf ((FILE), \"%s\", COMMON_ASM_OP);\t\t\t\t\\\n   assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n   if (TARGET_ELF)\t\t\t\t\t\t\t\\\n     fprintf ((FILE), \",%u,%u\\n\", (SIZE), (ALIGN) / BITS_PER_UNIT);\t\\\n@@ -269,7 +269,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_ELF) {\t\t\t\t\t\t\t\\\n-    fprintf ((FILE), \"%s\\t\", LOCAL_ASM_OP);\t\t\t\t\\\n+    fprintf ((FILE), \"%s\", LOCAL_ASM_OP);\t\t\t\t\\\n     assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n     fprintf ((FILE), \"\\n\");\t\t\t\t\t\t\\\n     ASM_OUTPUT_ALIGNED_COMMON (FILE, NAME, SIZE, ALIGN);\t\t\\\n@@ -316,7 +316,7 @@ asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)\n       register const unsigned char *_limited_str =\t\t\t\\\n         (const unsigned char *) (STR);\t\t\t\t\t\\\n       register unsigned ch;\t\t\t\t\t\t\\\n-      fprintf ((FILE), \"%s\\t\\\"\", STRING_ASM_OP);\t\t\t\\\n+      fprintf ((FILE), \"%s\\\"\", STRING_ASM_OP);\t\t\t\t\\\n       for (; (ch = *_limited_str); _limited_str++)\t\t\t\\\n         {\t\t\t\t\t\t\t\t\\\n \t  register int escape;\t\t\t\t\t\t\\\n@@ -369,7 +369,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      if (bytes_in_chunk == 0)\t\t\t\t\t\\\n-\t\tfprintf ((FILE), \"%s\\t\", ASM_BYTE_OP);\t\t\t\\\n+\t\tfprintf ((FILE), \"%s\", ASM_BYTE_OP);\t\t\t\\\n \t      else\t\t\t\t\t\t\t\\\n \t\tfputc (',', (FILE));\t\t\t\t\t\\\n \t      fprintf ((FILE), \"0x%02x\", *_ascii_bytes);\t\t\\\n@@ -407,7 +407,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_ELF) {\t\t\t\t\t\t\t\\\n      ctors_section ();\t\t\t\t\t\t\t\\\n-     fprintf (FILE, \"%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+     fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n      assemble_name (FILE, NAME);\t\t\t\t\t\\\n      fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n   } else {\t\t\t\t\t\t\t\t\\\n@@ -422,7 +422,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_ELF) {\t\t\t\t\t\t\t\\\n     dtors_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);              \t\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n   } else {\t\t\t\t\t\t\t\t\\\n@@ -435,11 +435,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #undef ASM_OUTPUT_IDENT\n #define ASM_OUTPUT_IDENT(FILE, NAME) \\\n-  fprintf (FILE, \"%s\\t\\\"%s\\\"\\n\", IDENT_ASM_OP, NAME);\n+  fprintf (FILE, \"%s\\\"%s\\\"\\n\", IDENT_ASM_OP, NAME);\n \n #undef ASM_GLOBALIZE_LABEL\n #define ASM_GLOBALIZE_LABEL(FILE,NAME)\t\\\n-  (fprintf ((FILE), \"%s \", GLOBAL_ASM_OP), assemble_name (FILE, NAME), fputs (\"\\n\", FILE))\n+  (fprintf ((FILE), \"%s\", GLOBAL_ASM_OP), assemble_name (FILE, NAME), fputs (\"\\n\", FILE))\n \n #undef ASM_OUTPUT_EXTERNAL_LIBCALL\n #define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, FUN)\t\t\t\t\\\n@@ -510,9 +510,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_SKIP(FILE,SIZE) \\\n do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_ELF)\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\\t%u\\n\", SKIP_ASM_OP, (SIZE));\t\t\t\\\n+    fprintf (FILE, \"%s%u\\n\", SKIP_ASM_OP, (SIZE));\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n-    fprintf ((FILE), \"%s\\t.,.+%u\\n\", SET_ASM_OP, (SIZE));\t\t\\\n+    fprintf ((FILE), \"%s.,.+%u\\n\", SET_ASM_OP, (SIZE));\t\t\\\n } while (0)\n \n "}, {"sha": "8708756d32539af1784cd27dcb2f9f52f33a52d9", "filename": "gcc/config/i386/sequent.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Fsequent.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Fsequent.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsequent.h?ref=f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "patch": "@@ -73,13 +73,13 @@ Boston, MA 02111-1307, USA.  */\n    fix trouble in dbx.  */\n #undef DBX_OUTPUT_LBRAC\n #define DBX_OUTPUT_LBRAC(file,name)\t\\\n-\t      fprintf (asmfile, \"%s %d,0,%d,\", ASM_STABN_OP, N_LBRAC, depth); \\\n+\t      fprintf (asmfile, \"%s%d,0,%d,\", ASM_STABN_OP, N_LBRAC, depth); \\\n \t      assemble_name (asmfile, buf); \\\n \t      fprintf (asmfile, \"\\n\");\n \n #undef DBX_OUTPUT_RBRAC\n #define DBX_OUTPUT_RBRAC(file,name)\t\\\n-\t      fprintf (asmfile, \"%s %d,0,%d,\", ASM_STABN_OP, N_RBRAC, depth); \\\n+\t      fprintf (asmfile, \"%s%d,0,%d,\", ASM_STABN_OP, N_RBRAC, depth); \\\n \t      assemble_name (asmfile, buf); \\\n \t      fprintf (asmfile, \"\\n\");\n "}, {"sha": "0c61d48fc71421b9870f3d4a63ee8e11da5dafe2", "filename": "gcc/config/i386/sol2.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2.h?ref=f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "patch": "@@ -58,7 +58,7 @@ Boston, MA 02111-1307, USA.  */\n    executed.  This macro forces the assembler to do the padding, since\n    it knows what it is doing. */\n \n-#define FORCE_INIT_SECTION_ALIGN asm (ALIGN_ASM_OP ## \" 16\")\n+#define FORCE_INIT_SECTION_ALIGN asm (ALIGN_ASM_OP ## \"16\")\n #define FORCE_FINI_SECTION_ALIGN FORCE_INIT_SECTION_ALIGN\n \n /* Add \"sun\" to the list of symbols defined for SVR4.  */"}, {"sha": "67349e19ac1c7f2da29bc0c8254c349c6e41341b", "filename": "gcc/config/i386/sun386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Fsun386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Fsun386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsun386.h?ref=f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "patch": "@@ -45,7 +45,7 @@ do\t\t\t\t\t\t\t\t\\\n { int i = 0; \t\t\t\t\t\t\t\\\n   while (i < (size))\t\t\t\t\t\t\\\n     { if (i%10 == 0) { if (i!=0) fprintf ((FILE), \"\\n\");\t\\\n-\t\t       fprintf ((FILE), \"%s \", ASM_BYTE_OP); }\t\\\n+\t\t       fprintf ((FILE), \"%s\", ASM_BYTE_OP); }\t\\\n       else fprintf ((FILE), \",\");\t\t\t\t\\\n       fprintf ((FILE), \"0x%x\", ((p)[i++] & 0377)) ;}\t\t\\\n       fprintf ((FILE), \"\\n\");\t\t\t\t\t\\"}, {"sha": "d196008f829f21429cc2cd40335ed89d08c2aac6", "filename": "gcc/config/i386/svr3gas.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Fsvr3gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi386%2Fsvr3gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsvr3gas.h?ref=f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "patch": "@@ -156,7 +156,7 @@ init_section ()\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   if (in_section != in_init)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"\\t%s\\n\", INIT_SECTION_ASM_OP);\t\\\n+      fprintf (asm_out_file, \"%s\\n\", INIT_SECTION_ASM_OP);\t\\\n       in_section = in_init;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n@@ -167,7 +167,7 @@ fini_section ()\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   if (in_section != in_fini)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"\\t%s\\n\", FINI_SECTION_ASM_OP);\t\\\n+      fprintf (asm_out_file, \"%s\\n\", FINI_SECTION_ASM_OP);\t\\\n       in_section = in_fini;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }"}, {"sha": "0fd57efced408f68b3b11703c800c91415d59fd6", "filename": "gcc/config/i860/bsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi860%2Fbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi860%2Fbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fbsd.h?ref=f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "patch": "@@ -18,7 +18,7 @@ do { register unsigned i;\t\t\\\n \tputc('\\n', (f));\t\t\\\n \tinside = FALSE;\t\t\t\\\n       }\t\t\t\t\t\\\n-      fprintf((f), \"\\t%s \", ASCII_DATA_ASM_OP);\t\\\n+      fprintf((f), \"%s\", ASCII_DATA_ASM_OP);\t\\\n     }\t\t\t\t\t\\\n     if ((p)[i] < 32 || (p)[i] == '\\\\' || (p)[i] == '\"' || (p)[i] >= 127) {\t\\\n       if (inside) {\t\t\t\\"}, {"sha": "f71e271473ceda0390bd3f48e2b0731ec1a00383", "filename": "gcc/config/i860/paragon.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi860%2Fparagon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi860%2Fparagon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fparagon.h?ref=f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "patch": "@@ -135,7 +135,7 @@ Boston, MA 02111-1307, USA.  */\n \t          fprintf ((FILE), \"\\\"\\n\");\t\t\t\\\n \t          bytes_in_chunk = 0;\t\t\t\t\\\n \t        }\t\t\t\t\t\t\\\n-\t      fprintf ((FILE), \"\\t%s\\t%d\\n\", ASM_BYTE_OP, ch);\t\\\n+\t      fprintf ((FILE), \"%s%d\\n\", ASM_BYTE_OP, ch);\t\\\n \t    }\t\t\t\t\t\t\t\\\n           else\t\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\\\n@@ -145,7 +145,7 @@ Boston, MA 02111-1307, USA.  */\n \t          bytes_in_chunk = 0;\t\t\t\t\\\n \t        }\t\t\t\t\t\t\\\n \t      if (bytes_in_chunk == 0)\t\t\t\t\\\n-\t        fprintf ((FILE), \"\\t%s\\t\\\"\", ASCII_DATA_ASM_OP);\\\n+\t        fprintf ((FILE), \"%s\\\"\", ASCII_DATA_ASM_OP);\t\\\n \t      putc (ch, (FILE));\t\t\t\t\\\n \t      bytes_in_chunk++;\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\\"}, {"sha": "c07db217047fc7ba6966fd3ff430e1c72856806c", "filename": "gcc/config/i860/sysv3.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi860%2Fsysv3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi860%2Fsysv3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fsysv3.h?ref=f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "patch": "@@ -117,7 +117,7 @@ extern char *current_function_original_name;\n \t          fprintf ((FILE), \"\\\"\\n\");\t\t\t\t\\\n \t          bytes_in_chunk = 0;\t\t\t\t\t\\\n \t        }\t\t\t\t\t\t\t\\\n-\t      fprintf ((FILE), \"\\t%s\\t%d\\n\", ASM_BYTE_OP, ch);\t\t\\\n+\t      fprintf ((FILE), \"%s%d\\n\", ASM_BYTE_OP, ch);\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n           else\t\t\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n@@ -127,7 +127,7 @@ extern char *current_function_original_name;\n \t          bytes_in_chunk = 0;\t\t\t\t\t\\\n \t        }\t\t\t\t\t\t\t\\\n \t      if (bytes_in_chunk == 0)\t\t\t\t\t\\\n-\t        fprintf ((FILE), \"\\t%s\\t\\\"\", ASCII_DATA_ASM_OP);\t\\\n+\t        fprintf ((FILE), \"%s\\\"\", ASCII_DATA_ASM_OP);\t\t\\\n \t      putc (ch, (FILE));\t\t\t\t\t\\\n \t      bytes_in_chunk++;\t\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\"}, {"sha": "b1fed12d6156ff9e54d52cdacc42742e428a51ba", "filename": "gcc/config/i960/i960-coff.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi960%2Fi960-coff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fi960%2Fi960-coff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960-coff.h?ref=f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "patch": "@@ -83,7 +83,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     ctors_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n   } while (0)\n@@ -93,7 +93,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     dtors_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);              \t\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n   } while (0)"}, {"sha": "fe74c72d08e65d222cde1c2771081a59499bfad3", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "patch": "@@ -3511,7 +3511,7 @@ ia64_asm_output_external (file, decl, name)\n   save_referenced = TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl));\n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     {\n-      fprintf (file, \"\\t%s\\t \", TYPE_ASM_OP);\n+      fprintf (file, \"%s\", TYPE_ASM_OP);\n       assemble_name (file, name);\n       putc (',', file);\n       fprintf (file, TYPE_OPERAND_FMT, \"function\");"}, {"sha": "68fa3fb6ae6f9c12dfc620fed0f7a71459889ff5", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "patch": "@@ -2054,7 +2054,7 @@ do {\t\t\t\t\t\t\t\t\\\n \n #define ASM_OUTPUT_CHAR(FILE, VALUE)\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\t%s\\t\", ASM_BYTE_OP);\t\t\t\t\\\n+  fprintf (FILE, \"%s\", ASM_BYTE_OP);\t\t\t\t\t\\\n   output_addr_const (FILE, (VALUE));\t\t\t\t\t\\\n   fprintf (FILE, \"\\n\");\t\t\t\t\t\t\t\\\n } while (0)\n@@ -2163,7 +2163,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    to assemble a single byte containing the number VALUE.  */\n \n #define ASM_OUTPUT_BYTE(STREAM, VALUE) \\\n-  fprintf (STREAM, \"\\t%s\\t0x%x\\n\", ASM_BYTE_OP, (int)(VALUE) & 0xff)\n+  fprintf (STREAM, \"%s0x%x\\n\", ASM_BYTE_OP, (int)(VALUE) & 0xff)\n \n /* These macros are defined as C string constant, describing the syntax in the\n    assembler for grouping arithmetic expressions.  */"}]}