{"sha": "35ea1c5ac88fc328743f3cd370bfe1d834fc51be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVlYTFjNWFjODhmYzMyODc0M2YzY2QzNzBiZmUxZDgzNGZjNTFiZQ==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2010-07-22T16:25:17Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2010-07-22T16:25:17Z"}, "message": "re PR debug/45024 (wrong nesting for inner template class)\n\nFix PR debug/45024\n\ngcc/ChangeLog:\n\tPR debug/45024\n\t* dwarf2out.c (scope_die_for): Don't fall back to the compilation\n\tunit DIE if we can find the scope DIE.\n\ngcc/testsuite/ChangeLog:\n\tPR debug/45024\n\t* g++.dg/debug/dwarf2/nested-2.C: New test case.\n\nFrom-SVN: r162420", "tree": {"sha": "4aceab85a0b196e0ed32687ec59376296d1556a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4aceab85a0b196e0ed32687ec59376296d1556a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35ea1c5ac88fc328743f3cd370bfe1d834fc51be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35ea1c5ac88fc328743f3cd370bfe1d834fc51be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35ea1c5ac88fc328743f3cd370bfe1d834fc51be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35ea1c5ac88fc328743f3cd370bfe1d834fc51be/comments", "author": null, "committer": null, "parents": [{"sha": "ac0ab4f718b5c85c999dc3cdf1745bca627e3c69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac0ab4f718b5c85c999dc3cdf1745bca627e3c69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac0ab4f718b5c85c999dc3cdf1745bca627e3c69"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "ada7a16a1e1e592acd91ef8e0a51d32855fbf6f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35ea1c5ac88fc328743f3cd370bfe1d834fc51be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35ea1c5ac88fc328743f3cd370bfe1d834fc51be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35ea1c5ac88fc328743f3cd370bfe1d834fc51be", "patch": "@@ -1,3 +1,9 @@\n+2010-07-22  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR debug/45024\n+\t* dwarf2out.c (scope_die_for): Don't fall back to the compilation\n+\tunit DIE if we can find the scope DIE.\n+\n 2010-07-22  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* ira-build.c (ira_create_object): New arg SUBWORD; all callers changed."}, {"sha": "183bbd38a2b87c2cde52989f3437b08780fb274c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35ea1c5ac88fc328743f3cd370bfe1d834fc51be/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35ea1c5ac88fc328743f3cd370bfe1d834fc51be/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=35ea1c5ac88fc328743f3cd370bfe1d834fc51be", "patch": "@@ -17585,9 +17585,13 @@ scope_die_for (tree t, dw_die_ref context_die)\n \t{\n \t  gcc_assert (debug_info_level <= DINFO_LEVEL_TERSE\n \t\t      || TREE_ASM_WRITTEN (containing_scope));\n+\t  /*We are not in the middle of emitting the type\n+\t    CONTAINING_SCOPE. Let's see if it's emitted already.  */\n+\t  scope_die = lookup_type_die (containing_scope);\n \n \t  /* If none of the current dies are suitable, we get file scope.  */\n-\t  scope_die = comp_unit_die;\n+\t  if (scope_die == NULL)\n+\t    scope_die = comp_unit_die;\n \t}\n       else\n \tscope_die = lookup_type_die (containing_scope);"}, {"sha": "79e3b60cbf3328dbc08773107d28c2cf8918803c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35ea1c5ac88fc328743f3cd370bfe1d834fc51be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35ea1c5ac88fc328743f3cd370bfe1d834fc51be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=35ea1c5ac88fc328743f3cd370bfe1d834fc51be", "patch": "@@ -1,3 +1,8 @@\n+2010-07-22  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR debug/45024\n+\t* g++.dg/debug/dwarf2/nested-2.C: New test case.\n+\n 2010-07-22  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.dg/lto/20100722-1_0.c: Replace dg-require-lto-plugin"}, {"sha": "2386baaacb9cb36574d9170cbdaeec49af662cee", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/nested-2.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35ea1c5ac88fc328743f3cd370bfe1d834fc51be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fnested-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35ea1c5ac88fc328743f3cd370bfe1d834fc51be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fnested-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fnested-2.C?ref=35ea1c5ac88fc328743f3cd370bfe1d834fc51be", "patch": "@@ -0,0 +1,37 @@\n+/*\n+  Origin: PR debug/45024\n+  { dg-options \"-g -dA -fno-merge-debug-strings\" }\n+  { dg-do compile }\n+*/\n+\n+struct S {\n+  template<typename Z> struct T { };\n+};\n+\n+S::T<int> tval;\n+\n+/*\n+We want to express that the DIE of S::T<int> must be a child of the DIE of S, like in assembly this output:\n+\n+\t.uleb128 0x2\t# (DIE (0x9e) DW_TAG_structure_type)\n+\t.ascii \"S\\0\"\t# DW_AT_name\n+\t.byte\t0x1\t# DW_AT_byte_size\n+\t.byte\t0x1\t# DW_AT_decl_file (../../prtests/test-PR45024.cc)\n+\t.byte\t0x1\t# DW_AT_decl_line\n+\t.long\t0xbc\t# DW_AT_sibling\n+\t.uleb128 0x3\t# (DIE (0xa8) DW_TAG_structure_type)\n+\t.ascii \"T<int>\\0\"\t# DW_AT_name\n+\t.byte\t0x1\t# DW_AT_byte_size\n+\t.byte\t0x1\t# DW_AT_decl_file (../../prtests/test-PR45024.cc)\n+\t.byte\t0x2\t# DW_AT_decl_line\n+\t.uleb128 0x4\t# (DIE (0xb3) DW_TAG_template_type_param)\n+\t.ascii \"Z\\0\"\t# DW_AT_name\n+\t.long\t0xbc\t# DW_AT_type\n+\t.byte\t0\t# end of children of DIE 0xa8\n+\t.byte\t0\t# end of children of DIE 0x9e\n+\n+Hence the slightly odd regexp:\n+\n+  { dg-final { scan-assembler \"\\[^\\n\\r\\]*\\\\(DIE\\[^\\n\\r\\]*DW_TAG_structure_type\\\\)\\[\\n\\r\\]+\\[^\\n\\r\\]*\\\"S\\\\\\\\0\\\"\\[ \\t\\]+#\\[ \\t\\]+DW_AT_name\\[\\n\\r\\]+\\(.*\\)?\\\\(DIE\\[^\\n\\r\\]*DW_TAG_structure_type\\\\)\\[\\n\\r\\]+\\[^\\n\\r\\]*\\\"T<int>\\\\\\\\0\\\"\\[ \\t\\]+\\(.*\\)?\\\\(DIE\\[^\\n\\r\\]*DW_TAG_template_type_param\\\\)\\[\\n\\r\\]+\\[^\\n\\r\\]*\\[\\n\\r\\]+\\[^\\n\\r\\]*\\[\\n\\r\\]+\\[^\\n\\r\\]*#\\[ \\t\\]+end of children of DIE\\[^\\n\\r\\]*\\[\\n\\r\\]+\\[^\\n\\r\\]*end of children of DIE\\[^\\n\\r\\]*\" } }\n+\n+ */"}]}