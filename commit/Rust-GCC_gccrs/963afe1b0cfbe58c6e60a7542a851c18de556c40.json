{"sha": "963afe1b0cfbe58c6e60a7542a851c18de556c40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYzYWZlMWIwY2ZiZTU4YzZlNjBhNzU0MmE4NTFjMThkZTU1NmM0MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-03-25T20:35:43Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-03-25T20:35:43Z"}, "message": "re PR c++/52014 ([c++0x] Segfault When `decltype` Used in Nested Lambda Function Defined in Class Member Function)\n\n\tPR c++/52014\n\t* semantics.c (lambda_expr_this_capture): Don't capture 'this' in\n\tunevaluated context.\n\nFrom-SVN: r197063", "tree": {"sha": "11fa50c2e406b26e6db7008b142f48219574175d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11fa50c2e406b26e6db7008b142f48219574175d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/963afe1b0cfbe58c6e60a7542a851c18de556c40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/963afe1b0cfbe58c6e60a7542a851c18de556c40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/963afe1b0cfbe58c6e60a7542a851c18de556c40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/963afe1b0cfbe58c6e60a7542a851c18de556c40/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bbce8a8a36ed1f3809ae785313cce483f4b044fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbce8a8a36ed1f3809ae785313cce483f4b044fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbce8a8a36ed1f3809ae785313cce483f4b044fa"}], "stats": {"total": 65, "additions": 60, "deletions": 5}, "files": [{"sha": "bac484498300ab3a99b36da7038ba9ce344e132c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/963afe1b0cfbe58c6e60a7542a851c18de556c40/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/963afe1b0cfbe58c6e60a7542a851c18de556c40/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=963afe1b0cfbe58c6e60a7542a851c18de556c40", "patch": "@@ -1,3 +1,9 @@\n+2013-03-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/52014\n+\t* semantics.c (lambda_expr_this_capture): Don't capture 'this' in\n+\tunevaluated context.\n+\n 2013-03-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/56722"}, {"sha": "fb38e8d70118110dd21db402212c61cf92915af6", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/963afe1b0cfbe58c6e60a7542a851c18de556c40/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/963afe1b0cfbe58c6e60a7542a851c18de556c40/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=963afe1b0cfbe58c6e60a7542a851c18de556c40", "patch": "@@ -9454,6 +9454,11 @@ lambda_expr_this_capture (tree lambda)\n \n   tree this_capture = LAMBDA_EXPR_THIS_CAPTURE (lambda);\n \n+  /* In unevaluated context this isn't an odr-use, so just return the\n+     nearest 'this'.  */\n+  if (cp_unevaluated_operand)\n+    return lookup_name (this_identifier);\n+\n   /* Try to default capture 'this' if we can.  */\n   if (!this_capture\n       && LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (lambda) != CPLD_NONE)\n@@ -9523,11 +9528,6 @@ lambda_expr_this_capture (tree lambda)\n \n   if (!this_capture)\n     {\n-      /* In unevaluated context this isn't an odr-use, so just return the\n-\t nearest 'this'.  */\n-      if (cp_unevaluated_operand)\n-\treturn lookup_name (this_identifier);\n-\n       error (\"%<this%> was not captured for this lambda function\");\n       result = error_mark_node;\n     }"}, {"sha": "9834bfdb308ba22c1a7e28f8324052999a73c29e", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-this14.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/963afe1b0cfbe58c6e60a7542a851c18de556c40/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/963afe1b0cfbe58c6e60a7542a851c18de556c40/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this14.C?ref=963afe1b0cfbe58c6e60a7542a851c18de556c40", "patch": "@@ -0,0 +1,49 @@\n+// PR c++/52014\n+// { dg-require-effective-target c++11 }\n+\n+template <class Iterator, class Func>\n+void for_each(const Iterator first, const Iterator last, Func func)\n+{\n+  for (Iterator it = first; it != last; ++it) {\n+    func(*it);\n+  }\n+}\n+\n+template <class T>\n+struct helper\n+{\n+  typedef typename T::size_type type;\n+};\n+\n+template <class T>\n+struct helper<T&>\n+{\n+  typedef typename T::size_type type;\n+};\n+\n+template <class T>\n+struct helper<T*>\n+{\n+  typedef typename T::size_type type;\n+};\n+\n+struct bar\n+{\n+  struct foo\n+  {\n+    typedef int size_type;\n+  } foo_;\n+\n+  void test()\n+  {\n+    int arr[] = { 1, 2, 3 };\n+    for_each(arr, arr + 3, [&](helper<foo>::type i) {\n+\tfor_each(arr, arr + 3, [&](helper<decltype(foo_)>::type j) { });\n+      });\n+  }\n+};\n+\n+int main()\n+{\n+  return 0;\n+}"}]}