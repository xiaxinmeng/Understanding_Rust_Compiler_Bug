{"sha": "fa5b060f90061ebf9d1f112d6a46f7759c1a0f66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE1YjA2MGY5MDA2MWViZjlkMWYxMTJkNmE0NmY3NzU5YzFhMGY2Ng==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2003-07-03T17:03:21Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2003-07-03T17:03:21Z"}, "message": "rtl.h (ECF_*, [...]): Move from here...\n\n2003-07-03  Steven Bosscher  <steven@gcc.gnu.org>\n\n\t* rtl.h (ECF_*, flags_from_decl_or_type): Move from here...\n\t* tree.h: ...to here.\n\nFrom-SVN: r68890", "tree": {"sha": "c3b5f586f21434bfdbb5e12561940838515dbf80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3b5f586f21434bfdbb5e12561940838515dbf80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa5b060f90061ebf9d1f112d6a46f7759c1a0f66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa5b060f90061ebf9d1f112d6a46f7759c1a0f66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa5b060f90061ebf9d1f112d6a46f7759c1a0f66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa5b060f90061ebf9d1f112d6a46f7759c1a0f66/comments", "author": null, "committer": null, "parents": [{"sha": "fae778eb67bb0f679f8dd35b8d1dd27ab453b1ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fae778eb67bb0f679f8dd35b8d1dd27ab453b1ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fae778eb67bb0f679f8dd35b8d1dd27ab453b1ef"}], "stats": {"total": 69, "additions": 36, "deletions": 33}, "files": [{"sha": "2d7867ab21eea06c58e33aab1e0cd6c6b625853e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5b060f90061ebf9d1f112d6a46f7759c1a0f66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5b060f90061ebf9d1f112d6a46f7759c1a0f66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa5b060f90061ebf9d1f112d6a46f7759c1a0f66", "patch": "@@ -1,3 +1,8 @@\n+2003-07-03  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* rtl.h (ECF_*, flags_from_decl_or_type): Move from here...\n+\t* tree.h: ...to here.\n+\n 2003-07-03  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/s390/2064.md: Fix comment typos."}, {"sha": "827b178d58ba630c0325a7bd9ab78b7ede956a0c", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5b060f90061ebf9d1f112d6a46f7759c1a0f66/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5b060f90061ebf9d1f112d6a46f7759c1a0f66/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=fa5b060f90061ebf9d1f112d6a46f7759c1a0f66", "patch": "@@ -2332,37 +2332,4 @@ extern bool expensive_function_p\tPARAMS ((int));\n /* In tracer.c */\n extern void tracer\t\t\tPARAMS ((void));\n \n-/* In calls.c */\n-\n-/* Nonzero if this is a call to a `const' function.  */\n-#define ECF_CONST\t\t1\n-/* Nonzero if this is a call to a `volatile' function.  */\n-#define ECF_NORETURN\t\t2\n-/* Nonzero if this is a call to malloc or a related function.  */\n-#define ECF_MALLOC\t\t4\n-/* Nonzero if it is plausible that this is a call to alloca.  */\n-#define ECF_MAY_BE_ALLOCA\t8\n-/* Nonzero if this is a call to a function that won't throw an exception.  */\n-#define ECF_NOTHROW\t\t16\n-/* Nonzero if this is a call to setjmp or a related function.  */\n-#define ECF_RETURNS_TWICE\t32\n-/* Nonzero if this is a call to `longjmp'.  */\n-#define ECF_LONGJMP\t\t64\n-/* Nonzero if this is a syscall that makes a new process in the image of\n-   the current one.  */\n-#define ECF_FORK_OR_EXEC\t128\n-#define ECF_SIBCALL\t\t256\n-/* Nonzero if this is a call to \"pure\" function (like const function,\n-   but may read memory.  */\n-#define ECF_PURE\t\t512\n-/* Nonzero if this is a call to a function that returns with the stack\n-   pointer depressed.  */\n-#define ECF_SP_DEPRESSED\t1024\n-/* Nonzero if this call is known to always return.  */\n-#define ECF_ALWAYS_RETURN\t2048\n-/* Create libcall block around the call.  */\n-#define ECF_LIBCALL_BLOCK\t4096\n-\n-extern int flags_from_decl_or_type\t\tPARAMS ((tree));\n-\n #endif /* ! GCC_RTL_H */"}, {"sha": "6f8b97ee0b460354c56c0480c2297abed7696a53", "filename": "gcc/tree.h", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa5b060f90061ebf9d1f112d6a46f7759c1a0f66/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa5b060f90061ebf9d1f112d6a46f7759c1a0f66/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=fa5b060f90061ebf9d1f112d6a46f7759c1a0f66", "patch": "@@ -2877,6 +2877,37 @@ extern rtx emit_line_note\t\tPARAMS ((const char *, int));\n \n /* In calls.c */\n \n+/* Nonzero if this is a call to a `const' function.  */\n+#define ECF_CONST\t\t1\n+/* Nonzero if this is a call to a `volatile' function.  */\n+#define ECF_NORETURN\t\t2\n+/* Nonzero if this is a call to malloc or a related function.  */\n+#define ECF_MALLOC\t\t4\n+/* Nonzero if it is plausible that this is a call to alloca.  */\n+#define ECF_MAY_BE_ALLOCA\t8\n+/* Nonzero if this is a call to a function that won't throw an exception.  */\n+#define ECF_NOTHROW\t\t16\n+/* Nonzero if this is a call to setjmp or a related function.  */\n+#define ECF_RETURNS_TWICE\t32\n+/* Nonzero if this is a call to `longjmp'.  */\n+#define ECF_LONGJMP\t\t64\n+/* Nonzero if this is a syscall that makes a new process in the image of\n+   the current one.  */\n+#define ECF_FORK_OR_EXEC\t128\n+#define ECF_SIBCALL\t\t256\n+/* Nonzero if this is a call to \"pure\" function (like const function,\n+   but may read memory.  */\n+#define ECF_PURE\t\t512\n+/* Nonzero if this is a call to a function that returns with the stack\n+   pointer depressed.  */\n+#define ECF_SP_DEPRESSED\t1024\n+/* Nonzero if this call is known to always return.  */\n+#define ECF_ALWAYS_RETURN\t2048\n+/* Create libcall block around the call.  */\n+#define ECF_LIBCALL_BLOCK\t4096\n+\n+extern int flags_from_decl_or_type\tPARAMS ((tree));\n+\n extern int setjmp_call_p\t\tPARAMS ((tree));\n extern bool alloca_call_p\t\tPARAMS ((tree));\n "}]}