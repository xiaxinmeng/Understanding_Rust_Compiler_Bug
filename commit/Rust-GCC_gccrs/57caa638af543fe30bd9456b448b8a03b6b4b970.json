{"sha": "57caa638af543fe30bd9456b448b8a03b6b4b970", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdjYWE2MzhhZjU0M2ZlMzBiZDk0NTZiNDQ4YjhhMDNiNmI0Yjk3MA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-14T14:33:07Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-14T14:33:07Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r2119", "tree": {"sha": "2cc64c3803cbfe17d44d9489f2f07bb6b0cf9d8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cc64c3803cbfe17d44d9489f2f07bb6b0cf9d8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57caa638af543fe30bd9456b448b8a03b6b4b970", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57caa638af543fe30bd9456b448b8a03b6b4b970", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57caa638af543fe30bd9456b448b8a03b6b4b970", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57caa638af543fe30bd9456b448b8a03b6b4b970/comments", "author": null, "committer": null, "parents": [{"sha": "4cf8de9f3eb5c333a2d73fa813e2cf0769b12b02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cf8de9f3eb5c333a2d73fa813e2cf0769b12b02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cf8de9f3eb5c333a2d73fa813e2cf0769b12b02"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "6f972f43b37d773640aabe3549b7bb9424a5e21a", "filename": "gcc/reload1.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57caa638af543fe30bd9456b448b8a03b6b4b970/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57caa638af543fe30bd9456b448b8a03b6b4b970/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=57caa638af543fe30bd9456b448b8a03b6b4b970", "patch": "@@ -364,13 +364,20 @@ init_reload ()\n \n   /* See if reg+reg is a valid (and offsettable) address.  */\n \n-  tem = gen_rtx (PLUS, Pmode,\n-\t\t gen_rtx (REG, Pmode, FRAME_POINTER_REGNUM),\n-\t\t gen_rtx (REG, Pmode, FRAME_POINTER_REGNUM));\n-  /* This way, we make sure that reg+reg is an offsettable address.  */\n-  tem = plus_constant (tem, 4);\n+  for (i = 0; i < FIRST_PSEUDO_REGSTER; i++)\n+    {\n+      tem = gen_rtx (PLUS, Pmode,\n+\t\t     gen_rtx (REG, Pmode, FRAME_POINTER_REGNUM),\n+\t\t     gen_rtx (REG, Pmode, i));\n+      /* This way, we make sure that reg+reg is an offsettable address.  */\n+      tem = plus_constant (tem, 4);\n \n-  double_reg_address_ok = memory_address_p (QImode, tem);\n+      if (memory_address_p (QImode, tem))\n+\t{\n+\t  double_reg_address_ok = 1;\n+\t  break;\n+\t}\n+    }\n \n   /* Initialize obstack for our rtl allocation. */\n   gcc_obstack_init (&reload_obstack);"}]}