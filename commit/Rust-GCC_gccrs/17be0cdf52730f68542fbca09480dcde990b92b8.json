{"sha": "17be0cdf52730f68542fbca09480dcde990b92b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdiZTBjZGY1MjczMGY2ODU0MmZiY2EwOTQ4MGRjZGU5OTBiOTJiOA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonber@gnat.com", "date": "2001-10-26T00:34:46Z"}, "committer": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-10-26T00:34:46Z"}, "message": "sem_res.adb (Resolve): special-case resolution of Null in an instance or an inlined body to avoid view...\n\n\t* sem_res.adb (Resolve): special-case resolution of Null in an\n         instance or an inlined body to avoid view conflicts.\n\n\t* sem_ch12.adb (Copy_Generic_Node): for allocators, check for view\n         compatibility by retrieving the access type of the generic copy.\n\nFrom-SVN: r46509", "tree": {"sha": "ece202a9d2d39ebad763843d7eb54dc6622b6425", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ece202a9d2d39ebad763843d7eb54dc6622b6425"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17be0cdf52730f68542fbca09480dcde990b92b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17be0cdf52730f68542fbca09480dcde990b92b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17be0cdf52730f68542fbca09480dcde990b92b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17be0cdf52730f68542fbca09480dcde990b92b8/comments", "author": null, "committer": null, "parents": [{"sha": "ce9e9122644b82b8a0b91be47ffc6a849bb12f4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce9e9122644b82b8a0b91be47ffc6a849bb12f4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce9e9122644b82b8a0b91be47ffc6a849bb12f4b"}], "stats": {"total": 88, "additions": 71, "deletions": 17}, "files": [{"sha": "b6d490904820382274b49d1d332e84d5a3ac8984", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17be0cdf52730f68542fbca09480dcde990b92b8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17be0cdf52730f68542fbca09480dcde990b92b8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=17be0cdf52730f68542fbca09480dcde990b92b8", "patch": "@@ -1,3 +1,11 @@\n+2001-10-25  Ed Schonberg <schonber@gnat.com>\n+\n+\t* sem_res.adb (Resolve): special-case resolution of Null in an \n+         instance or an inlined body to avoid view conflicts.\n+\t\n+\t* sem_ch12.adb (Copy_Generic_Node): for allocators, check for view \n+         compatibility by retrieving the access type of the generic copy.\n+\n 2001-10-25  Robert Dewar <dewar@gnat.com>\n \n \t* sem_ch3.adb:"}, {"sha": "8c868b26b3557b0e6ff8c62565a47a3a222734e6", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 50, "deletions": 16, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17be0cdf52730f68542fbca09480dcde990b92b8/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17be0cdf52730f68542fbca09480dcde990b92b8/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=17be0cdf52730f68542fbca09480dcde990b92b8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.776 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1992-2001, Free Software Foundation, Inc.         --\n --                                                                          --\n@@ -4197,6 +4197,9 @@ package body Sem_Ch12 is\n       --  field may hold a Node_Id, a List_Id, or an Elist_Id, or a plain\n       --  value (Sloc, Uint, Char) in which case it need not be copied.\n \n+      procedure Copy_Descendants;\n+      --  Common utility for various nodes.\n+\n       function Copy_Generic_Elist (E : Elist_Id) return Elist_Id;\n       --  Make copy of element list.\n \n@@ -4206,6 +4209,19 @@ package body Sem_Ch12 is\n          return      List_Id;\n       --  Apply Copy_Node recursively to the members of a node list.\n \n+      -----------------------\n+      --  Copy_Descendants --\n+      -----------------------\n+\n+      procedure Copy_Descendants is\n+      begin\n+         Set_Field1 (New_N, Copy_Generic_Descendant (Field1 (N)));\n+         Set_Field2 (New_N, Copy_Generic_Descendant (Field2 (N)));\n+         Set_Field3 (New_N, Copy_Generic_Descendant (Field3 (N)));\n+         Set_Field4 (New_N, Copy_Generic_Descendant (Field4 (N)));\n+         Set_Field5 (New_N, Copy_Generic_Descendant (Field5 (N)));\n+      end Copy_Descendants;\n+\n       -----------------------------\n       -- Copy_Generic_Descendant --\n       -----------------------------\n@@ -4606,11 +4622,41 @@ package body Sem_Ch12 is\n             end if;\n          end if;\n \n+         --  Do not copy the associated node, which points to\n+         --  the generic copy of the aggregate.\n+\n          Set_Field1 (New_N, Copy_Generic_Descendant (Field1 (N)));\n          Set_Field2 (New_N, Copy_Generic_Descendant (Field2 (N)));\n          Set_Field3 (New_N, Copy_Generic_Descendant (Field3 (N)));\n          Set_Field5 (New_N, Copy_Generic_Descendant (Field5 (N)));\n \n+      --  Allocators do not have an identifier denoting the access type,\n+      --  so we must locate it through the expression to check whether\n+      --  the views are consistent.\n+\n+      elsif Nkind (N) = N_Allocator\n+        and then Nkind (Expression (N)) = N_Qualified_Expression\n+        and then Instantiating\n+      then\n+         declare\n+            T : Node_Id := Associated_Node (Subtype_Mark (Expression (N)));\n+            Acc_T : Entity_Id;\n+\n+         begin\n+            if Present (T) then\n+               --  Retrieve the allocator node in the generic copy.\n+\n+               Acc_T := Etype (Parent (Parent (T)));\n+               if Present (Acc_T)\n+                 and then Is_Private_Type (Acc_T)\n+               then\n+                  Switch_View (Acc_T);\n+               end if;\n+            end if;\n+\n+            Copy_Descendants;\n+         end;\n+\n       --  For a proper body, we must catch the case of a proper body that\n       --  replaces a stub. This represents the point at which a separate\n       --  compilation unit, and hence template file, may be referenced, so\n@@ -4632,11 +4678,7 @@ package body Sem_Ch12 is\n             --  Now copy the fields of the proper body, using the new\n             --  adjustment factor if one was needed as per test above.\n \n-            Set_Field1 (New_N, Copy_Generic_Descendant (Field1 (N)));\n-            Set_Field2 (New_N, Copy_Generic_Descendant (Field2 (N)));\n-            Set_Field3 (New_N, Copy_Generic_Descendant (Field3 (N)));\n-            Set_Field4 (New_N, Copy_Generic_Descendant (Field4 (N)));\n-            Set_Field5 (New_N, Copy_Generic_Descendant (Field5 (N)));\n+            Copy_Descendants;\n \n             --  Restore the original adjustment factor in case changed\n \n@@ -4659,22 +4701,14 @@ package body Sem_Ch12 is\n                New_N := Make_Null_Statement (Sloc (N));\n \n             else\n-               Set_Field1 (New_N, Copy_Generic_Descendant (Field1 (N)));\n-               Set_Field2 (New_N, Copy_Generic_Descendant (Field2 (N)));\n-               Set_Field3 (New_N, Copy_Generic_Descendant (Field3 (N)));\n-               Set_Field4 (New_N, Copy_Generic_Descendant (Field4 (N)));\n-               Set_Field5 (New_N, Copy_Generic_Descendant (Field5 (N)));\n+               Copy_Descendants;\n             end if;\n          end;\n \n       --  For the remaining nodes, copy recursively their descendants.\n \n       else\n-         Set_Field1 (New_N, Copy_Generic_Descendant (Field1 (N)));\n-         Set_Field2 (New_N, Copy_Generic_Descendant (Field2 (N)));\n-         Set_Field3 (New_N, Copy_Generic_Descendant (Field3 (N)));\n-         Set_Field4 (New_N, Copy_Generic_Descendant (Field4 (N)));\n-         Set_Field5 (New_N, Copy_Generic_Descendant (Field5 (N)));\n+         Copy_Descendants;\n \n          if Instantiating\n            and then Nkind (N) = N_Subprogram_Body"}, {"sha": "ef4ca9e346c25d7e4159fedf4af093b5d69a0315", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17be0cdf52730f68542fbca09480dcde990b92b8/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17be0cdf52730f68542fbca09480dcde990b92b8/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=17be0cdf52730f68542fbca09480dcde990b92b8", "patch": "@@ -1670,6 +1670,18 @@ package body Sem_Res is\n                Wrong_Type (Expression (N), Designated_Type (Typ));\n                Found := True;\n \n+            --  Check for view mismatch on Null in instances, for\n+            --  which the view-swapping mechanism has no identifier.\n+\n+            elsif (In_Instance or else In_Inlined_Body)\n+              and then (Nkind (N) = N_Null)\n+              and then Is_Private_Type (Typ)\n+              and then Is_Access_Type (Full_View (Typ))\n+            then\n+               Resolve (N, Full_View (Typ));\n+               Set_Etype (N, Typ);\n+               return;\n+\n             --  Check for an aggregate. Sometimes we can get bogus\n             --  aggregates from misuse of parentheses, and we are\n             --  about to complain about the aggregate without even\n@@ -4522,7 +4534,7 @@ package body Sem_Res is\n    begin\n       --  For now allow circumvention of the restriction against\n       --  anonymous null access values via a debug switch to allow\n-      --  for easier trasition.\n+      --  for easier transition.\n \n       if not Debug_Flag_J\n         and then Ekind (Typ) = E_Anonymous_Access_Type"}]}