{"sha": "1c140cfbfa4b465a29ef26f1fdfef04c671e3c9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMxNDBjZmJmYTRiNDY1YTI5ZWYyNmYxZmRmZWYwNGM2NzFlM2M5Yw==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-06-11T16:01:57Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-06-11T18:27:17Z"}, "message": "coroutines: Handle lambda closure pointers like 'this'.\n\nIt was agreed amongst the implementors that the correct\ninterpretation of the standard is that lambda closure pointers\nshould be treated in the same manner as class object pointers.\n\ngcc/cp/ChangeLog:\n\n\t* coroutines.cc (instantiate_coro_traits): Pass a reference\n\tto lambda closure objects to traits instantiation.\n\t(morph_fn_to_coro): Likewise for promise parameter\n\tpreview and allocator lookup.", "tree": {"sha": "a5c3210a32cd3780251af930292f7adb751f9133", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5c3210a32cd3780251af930292f7adb751f9133"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c140cfbfa4b465a29ef26f1fdfef04c671e3c9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c140cfbfa4b465a29ef26f1fdfef04c671e3c9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c140cfbfa4b465a29ef26f1fdfef04c671e3c9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c140cfbfa4b465a29ef26f1fdfef04c671e3c9c/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b32eea9c0c25a03e77170675abc4e4bcab6d2b3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b32eea9c0c25a03e77170675abc4e4bcab6d2b3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b32eea9c0c25a03e77170675abc4e4bcab6d2b3b"}], "stats": {"total": 23, "additions": 5, "deletions": 18}, "files": [{"sha": "11fca9954ac28f4b36bb0fb0b2289aab57d2bfb6", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c140cfbfa4b465a29ef26f1fdfef04c671e3c9c/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c140cfbfa4b465a29ef26f1fdfef04c671e3c9c/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=1c140cfbfa4b465a29ef26f1fdfef04c671e3c9c", "patch": "@@ -297,15 +297,14 @@ instantiate_coro_traits (tree fndecl, location_t kw)\n \n   tree functyp = TREE_TYPE (fndecl);\n   tree arg = DECL_ARGUMENTS (fndecl);\n-  bool lambda_p = LAMBDA_FUNCTION_P (fndecl);\n   tree arg_node = TYPE_ARG_TYPES (functyp);\n   tree argtypes = make_tree_vec (list_length (arg_node)-1);\n   unsigned p = 0;\n \n   while (arg_node != NULL_TREE && !VOID_TYPE_P (TREE_VALUE (arg_node)))\n     {\n-      /* See PR94807, as to why we must exclude lambda here.  */\n-      if (is_this_parameter (arg) && !lambda_p)\n+      if (is_this_parameter (arg)\n+\t  || DECL_NAME (arg) == closure_identifier)\n \t{\n \t  /* We pass a reference to *this to the param preview.  */\n \t  tree ct = TREE_TYPE (TREE_TYPE (arg));\n@@ -3802,15 +3801,7 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n \t  parm.frame_type = actual_type;\n \n \t  parm.this_ptr = is_this_parameter (arg);\n-\t  /* See PR94807.  When a lambda is in a template instantiation, the\n-\t     closure object is named 'this' instead of '__closure'.  */\n-\t  if (lambda_p)\n-\t    {\n-\t      parm.lambda_cobj = DECL_NAME (arg) == closure_identifier;\n-\t      gcc_checking_assert (!parm.this_ptr);\n-\t    }\n-\t  else\n-\t    parm.lambda_cobj = false;\n+\t  parm.lambda_cobj = lambda_p && DECL_NAME (arg) == closure_identifier;\n \n \t  parm.trivial_dtor = TYPE_HAS_TRIVIAL_DESTRUCTOR (parm.frame_type);\n \t  char *buf;\n@@ -3960,9 +3951,7 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n \t{\n \t  param_info *parm_i = param_uses->get (arg);\n \t  gcc_checking_assert (parm_i);\n-\t  if (parm_i->lambda_cobj)\n-\t    vec_safe_push (args, arg);\n-\t  else if (parm_i->this_ptr)\n+\t  if (parm_i->this_ptr || parm_i->lambda_cobj)\n \t    {\n \t      /* We pass a reference to *this to the allocator lookup.  */\n \t      tree tt = TREE_TYPE (TREE_TYPE (arg));\n@@ -4166,9 +4155,7 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n \n \t  /* Add this to the promise CTOR arguments list, accounting for\n \t     refs and special handling for method this ptr.  */\n-\t  if (parm.lambda_cobj)\n-\t    vec_safe_push (promise_args, arg);\n-\t  else if (parm.this_ptr)\n+\t  if (parm.this_ptr || parm.lambda_cobj)\n \t    {\n \t      /* We pass a reference to *this to the param preview.  */\n \t      tree tt = TREE_TYPE (arg);"}]}