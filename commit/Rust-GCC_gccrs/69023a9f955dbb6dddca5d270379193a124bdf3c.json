{"sha": "69023a9f955dbb6dddca5d270379193a124bdf3c", "node_id": "C_kwDOANBUbNoAKDY5MDIzYTlmOTU1ZGJiNmRkZGNhNWQyNzAzNzkxOTNhMTI0YmRmM2M", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-09T00:19:55Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-09T00:19:55Z"}, "message": "Daily bump.", "tree": {"sha": "4cb7ea8047fc4d0b1a09314b3e6c5cf5c2313ee1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cb7ea8047fc4d0b1a09314b3e6c5cf5c2313ee1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69023a9f955dbb6dddca5d270379193a124bdf3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69023a9f955dbb6dddca5d270379193a124bdf3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69023a9f955dbb6dddca5d270379193a124bdf3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69023a9f955dbb6dddca5d270379193a124bdf3c/comments", "author": null, "committer": null, "parents": [{"sha": "9bbcee450deb0f561b096924a3f148369333e54c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bbcee450deb0f561b096924a3f148369333e54c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bbcee450deb0f561b096924a3f148369333e54c"}], "stats": {"total": 698, "additions": 697, "deletions": 1}, "files": [{"sha": "15e997785a42ed25e2091f91dc15602eb339402f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69023a9f955dbb6dddca5d270379193a124bdf3c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69023a9f955dbb6dddca5d270379193a124bdf3c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69023a9f955dbb6dddca5d270379193a124bdf3c", "patch": "@@ -1,3 +1,156 @@\n+2022-11-08  David Faust  <david.faust@oracle.com>\n+\n+\t* config/bpf/bpf.cc (struct core_walk_data): Add field `which'...\n+\t(bpf_resolve_overloaded_builtin): ... set it here. Use values of enum\n+\tbpf_builtins for error checks.\n+\t(bpf_core_walk): Use values of enum bpf_builtins.\n+\t(bpf_core_newdecl): Likewise.\n+\t(bpf_expand_builtin): Likewise.\n+\n+2022-11-08  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/24021\n+\t* range-op-float.cc (propagate_nans): New.\n+\t(frange_nextafter): New.\n+\t(frange_arithmetic): New.\n+\t(class foperator_plus): New.\n+\t(floating_op_table::floating_op_table): Add PLUS_EXPR entry.\n+\n+2022-11-08  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* real.cc (real_isdenormal): New.\n+\t(encode_ieee_single): Call real_isdenormal.\n+\t(encode_ieee_double): Same.\n+\t(encode_ieee_extended): Same.\n+\t(encode_ieee_quad): Same.\n+\t(encode_ieee_half): Same.\n+\t(encode_arm_bfloat_half): Same.\n+\t* real.h (real_isdenormal): Add mode argument.  Rewrite for\n+\tnormalized values.\n+\t* value-range.cc (frange::flush_denormals_to_zero): Pass mode to\n+\treal_isdenormal.\n+\n+2022-11-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107389\n+\t* gimple-low.cc (lower_builtin_assume_aligned): New.\n+\t(lower_stmt): Call it.\n+\n+2022-11-08  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op.cc (operator_div::fold_range): Call\n+\tupdate_known_bitmask.\n+\t* tree-ssa-ccp.cc (bit_value_binop): Handle divisions by powers of\n+\t2 as a right shift.\n+\n+2022-11-08  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* config/gcn/gcn.cc (gcn_expand_builtin_1): Expand first argument\n+\tof GCN_BUILTIN_LDEXPV to V64DFmode.\n+\n+2022-11-08  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* config/gcn/gcn-builtins.def (FABSV, FLOORVF, FLOORV): New builtins.\n+\t* config/gcn/gcn.cc (gcn_expand_builtin_1): Expand GCN_BUILTIN_FABSV,\n+\tGCN_BUILTIN_FLOORVF and GCN_BUILTIN_FLOORV.\n+\n+2022-11-08  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op.cc (irange_to_masked_value): New.\n+\t(update_known_bitmask): New.\n+\t(operator_mult::fold_range): Call update_known_bitmask.\n+\n+2022-11-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/107547\n+\t* tree-call-cdce.cc (get_no_error_domain): Handle CASE_FLT_FN_FLOATN_NX\n+\tof BUILT_IN_{ACOS,ASIN,ACOSH,ATANH,LOG,LOG2,LOG10,LOG1P}.  Handle\n+\tBUILT_IN_{COSH,SINH,EXP,EXPM1,EXP2}F{16,32,64,128}.\n+\n+2022-11-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/107546\n+\t* config/i386/predicates.md (vector_or_const_vector_operand): New\n+\tpredicate.\n+\t* config/i386/sse.md (vec_cmp<mode><sseintvecmodelower>,\n+\tvec_cmpv2div2di, vec_cmpu<mode><sseintvecmodelower>,\n+\tvec_cmpuv2div2di): Use nonimmediate_or_const_vector_operand\n+\tpredicate instead of nonimmediate_operand and\n+\tvector_or_const_vector_operand instead of vector_operand.\n+\t* config/i386/i386-expand.cc (ix86_expand_int_sse_cmp): For\n+\tLE/LEU or GE/GEU with CONST_VECTOR cop1 try to transform those\n+\tinto LE/LEU or GT/GTU with larger or smaller by one cop1 if\n+\tthere is no wrap-around.  Force CONST_VECTOR cop0 or cop1 into\n+\tREG.  Formatting fix.\n+\n+2022-11-08  Max Filippov  <jcmvbkbc@gmail.com>\n+\n+\tPR rtl-optimization/107482\n+\t* ira-color.cc (assign_hard_reg): Only call\n+\tupdate_costs_from_copies when retry_p is false.\n+\n+2022-11-08  konglin1  <lingling.kong@intel.com>\n+\n+\tRevert:\n+\t2022-11-07  konglin1  <lingling.kong@intel.com>\n+\n+\t* config/i386/i386.opt:Add -mprefer-remote-atomic.\n+\t* config/i386/sync.md (atomic_<plus_logic><mode>):\n+\tNew define_expand.\n+\t(atomic_add<mode>): Rename to below one.\n+\t(atomic_add<mode>_1): To this.\n+\t(atomic_<logic><mode>): Ditto.\n+\t(atomic_<logic><mode>_1): Ditto.\n+\t* doc/invoke.texi: Add -mprefer-remote-atomic.\n+\n+2022-11-08  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\t* config/i386/i386-options.cc (m_CORE_ATOM): New.\n+\t* config/i386/x86-tune.def\n+\t(X86_TUNE_SCHEDULE): Initial tune for CORE_ATOM.\n+\t(X86_TUNE_PARTIAL_REG_DEPENDENCY): Ditto.\n+\t(X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY): Ditto.\n+\t(X86_TUNE_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY): Ditto.\n+\t(X86_TUNE_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY): Ditto.\n+\t(X86_TUNE_DEST_FALSE_DEP_FOR_GLC): Ditto.\n+\t(X86_TUNE_MEMORY_MISMATCH_STALL): Ditto.\n+\t(X86_TUNE_USE_LEAVE): Ditto.\n+\t(X86_TUNE_PUSH_MEMORY): Ditto.\n+\t(X86_TUNE_USE_INCDEC): Ditto.\n+\t(X86_TUNE_INTEGER_DFMODE_MOVES): Ditto.\n+\t(X86_TUNE_PREFER_KNOWN_REP_MOVSB_STOSB): Ditto.\n+\t(X86_TUNE_MISALIGNED_MOVE_STRING_PRO_EPILOGUES): Ditto.\n+\t(X86_TUNE_USE_SAHF): Ditto.\n+\t(X86_TUNE_USE_BT): Ditto.\n+\t(X86_TUNE_AVOID_FALSE_DEP_FOR_BMI): Ditto.\n+\t(X86_TUNE_ONE_IF_CONV_INSN): Ditto.\n+\t(X86_TUNE_AVOID_MFENCE): Ditto.\n+\t(X86_TUNE_USE_SIMODE_FIOP): Ditto.\n+\t(X86_TUNE_EXT_80387_CONSTANTS): Ditto.\n+\t(X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL): Ditto.\n+\t(X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL): Ditto.\n+\t(X86_TUNE_SSE_TYPELESS_STORES): Ditto.\n+\t(X86_TUNE_SSE_LOAD0_BY_PXOR): Ditto.\n+\t(X86_TUNE_AVOID_4BYTE_PREFIXES): Ditto.\n+\t(X86_TUNE_USE_GATHER_2PARTS): Ditto.\n+\t(X86_TUNE_USE_GATHER_4PARTS): Ditto.\n+\t(X86_TUNE_USE_GATHER): Ditto.\n+\n+2022-11-08  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/104530\n+\t* gimple-range-cache.cc (ranger_cache::register_inferred_value):\n+\tNew.  Split from:\n+\t(ranger_cache::apply_inferred_ranges): Move setting cache to\n+\tseparate function.\n+\t* gimple-range-cache.h (register_inferred_value): New prototype.\n+\t* gimple-range-infer.cc (infer_range_manager::has_range_p): New.\n+\t* gimple-range-infer.h (has_range_p): New prototype.\n+\t* gimple-range.cc (register_transitive_inferred_ranges): New.\n+\t* gimple-range.h (register_transitive_inferred_ranges): New proto.\n+\t* tree-vrp.cc (rvrp_folder::fold_stmt): Check for transitive inferred\n+\tranges at the end of the block before folding final stmt.\n+\n 2022-11-07  David Faust  <david.faust@oracle.com>\n \n \t* config/bpf/bpf.cc (handle_attr_preserve): Use maybe_make_core_relo()."}, {"sha": "c240fbb06ebf12562635b9248b1582c28853042a", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69023a9f955dbb6dddca5d270379193a124bdf3c/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69023a9f955dbb6dddca5d270379193a124bdf3c/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=69023a9f955dbb6dddca5d270379193a124bdf3c", "patch": "@@ -1 +1 @@\n-20221108\n+20221109"}, {"sha": "ca24c2fa668fe5d5a3dbd7837532391c3816a461", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 296, "deletions": 0, "changes": 296, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69023a9f955dbb6dddca5d270379193a124bdf3c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69023a9f955dbb6dddca5d270379193a124bdf3c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=69023a9f955dbb6dddca5d270379193a124bdf3c", "patch": "@@ -1,3 +1,299 @@\n+2022-11-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils2.cc (build_allocator): For unconstrained\n+\tarray types with a storage model and an initializing expression,\n+\tcopy the initialization expression separately from the bounds. In\n+\tall cases with a storage model, pass the locally computed size for\n+\tthe store.\n+\n+2022-11-08  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_attr.adb\n+\t(Eval_Attribute): Don't simplify 'Image call if Put_Image has been\n+\tspecified.\n+\n+2022-11-08  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch6.adb, exp_put_image.adb, sem_aggr.adb, sem_attr.adb,\n+\tsem_ch5.adb, sem_type.adb, sem_util.adb: Replace\n+\t\"Present (Find_Aspect (...))\" with \"Has_Aspect\".\n+\n+2022-11-08  Ronan Desplanques  <desplanques@adacore.com>\n+\n+\t* contracts.adb\n+\t(Preanalyze_Class_Conditions): New procedure.\n+\t(Preanalyze_Condition): Moved out from Merge_Class_Conditions in\n+\torder to be spec-visible.\n+\t* contracts.ads\n+\t(Preanalyze_Class_Conditions): New procedure.\n+\t* sem_prag.adb\n+\t(Analyze_Pre_Post_Condition_In_Decl_Part): Call\n+\tPreanalyze_Class_Conditions when necessary.\n+\n+2022-11-08  Johannes Kliemann  <kliemann@adacore.com>\n+\n+\t* libgnat/system-vxworks7-aarch64-rtp-smp.ads: Set\n+\tSupport_Atomic_Primitives to True.\n+\t* libgnat/system-vxworks7-aarch64.ads: Set\n+\tSupport_Atomic_Primitives to True.\n+\t* libgnat/system-vxworks7-arm-rtp-smp.ads: Set\n+\tSupport_Atomic_Primitives to True.\n+\t* libgnat/system-vxworks7-arm.ads: Set Support_Atomic_Primitives\n+\tto True.\n+\t* libgnat/system-vxworks7-ppc-kernel.ads: Set\n+\tSupport_Atomic_Primitives to False.\n+\t* libgnat/system-vxworks7-ppc-rtp-smp.ads: Set\n+\tSupport_Atomic_Primitives to False.\n+\t* libgnat/system-vxworks7-ppc64-kernel.ads: Set\n+\tSupport_Atomic_Primitives to True.\n+\t* libgnat/system-vxworks7-ppc64-rtp-smp.ads: Set\n+\tSupport_Atomic_Primitives to True.\n+\t* libgnat/system-vxworks7-x86-kernel.ads: Set\n+\tSupport_Atomic_Primitives to True.\n+\t* libgnat/system-vxworks7-x86-rtp-smp.ads: Set\n+\tSupport_Atomic_Primitives to True.\n+\t* libgnat/system-vxworks7-x86_64-kernel.ads: Set\n+\tSupport_Atomic_Primitives to True.\n+\t* libgnat/system-vxworks7-x86_64-rtp-smp.ads: Set\n+\tSupport_Atomic_Primitives to True.\n+\n+2022-11-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* fe.h (Get_Warn_On_Questionable_Layout): Add void parameter.\n+\n+2022-11-08  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch12.adb (Instantiate_Formal_Subprogram): Copy aspect Ghost\n+\tfrom formal subprogram declaration to the internally generated\n+\tprocedure.\n+\n+2022-11-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Case_Expression): Compute the\n+\tinterpretations of the expression only at the end of the analysis,\n+\tbut skip doing it if it is the operand of a type conversion.\n+\t(Analyze_If_Expression): Likewise.\n+\t* sem_res.adb (Resolve): Deal specially with conditional\n+\texpression that is the operand of a type conversion.\n+\t(Resolve_Dependent_Expression): New procedure.\n+\t(Resolve_Case_Expression): Call Resolve_Dependent_Expression.\n+\t(Resolve_If_Expression): Likewise.\n+\t(Resolve_If_Expression.Apply_Check): Take result type as\n+\tparameter.\n+\t(Resolve_Type_Conversion): Do not warn about a redundant\n+\tconversion when the operand is a conditional expression.\n+\n+2022-11-08  Javier Miranda  <miranda@adacore.com>\n+\n+\t* debug.adb\n+\t(Debug_Flag_Underscore_XX): Switch -gnatd_X used temporarily to allow\n+\tdisabling extra formal checks.\n+\t* exp_attr.adb\n+\t(Expand_N_Attribute_Reference [access types]): Add extra formals\n+\tto the subprogram referenced in the prefix of 'Unchecked_Access,\n+\t'Unrestricted_Access or 'Access; required to check that its extra\n+\tformals match the extra formals of the corresponding subprogram type.\n+\t* exp_ch3.adb\n+\t(Stream_Operation_OK): Declaration moved to the public part of the\n+\tpackage.\n+\t(Validate_Tagged_Type_Extra_Formals): New subprogram.\n+\t(Expand_Freeze_Record_Type): Improve the code that takes care of\n+\tadding the extra formals of dispatching primitives; extended to\n+\tadd also the extra formals to renamings of dispatching primitives.\n+\t* exp_ch3.ads\n+\t(Stream_Operation_OK): Declaration moved from the package body.\n+\t* exp_ch6.adb\n+\t(Check_BIP_Actuals): Complete documentation.\n+\t(Has_BIP_Extra_Formal): Subprogram declaration moved to the public\n+\tpart of the package. In addition, a parameter has been added to\n+\tdisable an assertion that requires its use with frozen entities.\n+\t(Duplicate_Params_Without_Extra_Actuals): New subprogram.\n+\t(Check_Subprogram_Variant): Emit the call without duplicating the\n+\textra formals since they will be added when the call is analyzed.\n+\t(Expand_Call_Helper): Ensure that the called subprogram has all its\n+\textra formals, enforce assertion checking extra formals on thunks,\n+\tand mark calls from thunks as processed-BIP-calls to avoid adding\n+\ttheir extra formals twice.\n+\t(Is_Build_In_Place_Function): Return False for entities with foreign\n+\tconvention.\n+\t(Is_Build_In_Place_Function_Call): Return True also for not BIP functions\n+\tthat have BIP formals since the extra actuals are required.\n+\t(Make_Build_In_Place_Call_In_Object_Declaration): Occurrences of\n+\tIs_Return_Object replaced by the local variable Is_OK_Return_Object\n+\tthat evaluates to False for scopes with foreign convention.\n+\t(Might_Have_Tasks): Fix check of class-wide limited record types.\n+\t(Needs_BIP_Task_Actuals): Remove assertion to allow calling this\n+\tfunction in more contexts; in addition it returns False for functions\n+\treturning objects with foreign convention.\n+\t(Needs_BIP_Finalization_Master): Likewise.\n+\t(Needs_BIP_Alloc_Form): Likewise.\n+\t(Validate_Subprogram_Calls): Check that the number of actuals (including\n+\textra actuals) of calls in the subtree N match their corresponding\n+\tformals.\n+\t* exp_ch6.ads\n+\t(Has_BIP_Extra_Formal): Subprogram declaration moved to the public\n+\tpart of the package. In addition, a parameter has been added to\n+\tdisable an assertion that requires its use with frozen entities.\n+\t(Is_Build_In_Place_Function_Call): Complete documentation.\n+\t(Validate_Subprogram_Calls): Check that the number of actuals (including\n+\textra actuals) of calls in the subtree N match their corresponding\n+\tformals.\n+\t* freeze.adb\n+\t(Check_Itype): Add extra formals to anonymous access subprogram itypes.\n+\t(Freeze_Expression): Improve code that disables the addition of extra\n+\tformals to functions with foreign convention.\n+\t(Check_Extra_Formals): Moved to package Sem_Ch6 as Extra_Formals_OK.\n+\t(Freeze_Subprogram): Add extra formals to non-dispatching subprograms.\n+\t* frontend.adb\n+\t(Frontend): Validate all the subprogram calls; it can be disabled using\n+\tswitch -gnatd_X\n+\t* sem_ch3.adb\n+\t(Access_Subprogram_Declaration): Defer the addition of extra formals to\n+\tthe freezing point so that we know the convention.\n+\t(Check_Anonymous_Access_Component): Likewise.\n+\t(Derive_Subprogram): Fix documentation.\n+\t* sem_ch6.adb\n+\t(Has_Reliable_Extra_Formals): New subprogram.\n+\t(Check_Anonymous_Return): Fix check of access to class-wide limited\n+\trecord types.\n+\t(Check_Untagged_Equality): Placed in alphabetical order.\n+\t(Extra_Formals_OK): Subprogram moved from freeze.adb.\n+\t(Extra_Formals_Match_OK): New subprogram.\n+\t(Has_BIP_Formals): New subprogram.\n+\t(Has_Extra_Formals): New subprograms.\n+\t(Needs_Accessibility_Check_Extra): New subprogram.\n+\t(Parent_Subprogram): New subprogram.\n+\t(Add_Extra_Formal): Minor code cleanup.\n+\t(Create_Extra_Formals): Enforce matching extra formals on overridden\n+\tand aliased entities.\n+\t* sem_ch6.ads\n+\t(Extra_Formals_Match_OK): New subprogram.\n+\t(Extra_Formals_OK): Subprogram moved from freeze.adb.\n+\t* sem_eval.adb\n+\t(Compile_Time_Known_Value): Improve predicate to avoid assertion\n+\tfailure; found working on this ticket; this change does not\n+\taffect the behavior of the compiler because this subprogram\n+\thas an exception handler that returns False when the assertion\n+\tfails.\n+\t* sem_util.adb\n+\t(Needs_Result_Accessibility_Level): Do not return False for dispatching\n+\toperations compiled with Ada_Version < 2012 since they they may be\n+\toverridden by primitives compiled with Ada_Version >= Ada_2012.\n+\n+2022-11-08  Bob Duff  <duff@adacore.com>\n+\n+\t* warnsw.ads, warnsw.adb, fe.h, err_vars.ads, errout.ads: Move\n+\tWarning_Doc_Switch from Err_Vars to Warnsw. Access\n+\tWarn_On_Questionable_Layout on the C side via a function rather\n+\tthan a variable, because we plan to turn the variables into\n+\trenamings, and you can't Export renamings.\n+\t* erroutc.adb, switch-c.adb, errout.adb: Likewise.\n+\t* gcc-interface/decl.cc: Use Get_Warn_On_Questionable_Layout\n+\tinstead of Warn_On_Questionable_Layout.\n+\t* gcc-interface/Makefile.in (GNATMAKE_OBJS): Add warnsw.o, because\n+\tit is indirectly imported via Errout.\n+\t* gcc-interface/Make-lang.in (GNATBIND_OBJS): Likewise and remove\n+\trestrict.o (not needed).\n+\n+2022-11-08  Ronan Desplanques  <desplanques@adacore.com>\n+\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst\n+\t(-gnatwc): Fix flag documentation.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2022-11-08  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_ch3.adb\n+\t(Analyze_Object_Declaration): Do not perform expansion actions if\n+\tIn_Spec_Expression is true.\n+\n+2022-11-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Qualified_Expression): Analyze the\n+\texpression only after setting the type.\n+\t(Analyze_Unchecked_Type_Conversion): Likewise.\n+\t(Analyze_Short_Circuit): Likewise for the operands.\n+\t(Analyze_Type_Conversion): Minor tweaks.\n+\t(Analyze_Unchecked_Expression): Likewise.\n+\n+2022-11-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Qualified_Expression): Remove redundant\n+\tline.\n+\n+2022-11-08  Ronan Desplanques  <desplanques@adacore.com>\n+\n+\t* contracts.adb (Preanalyze_Condition): Use\n+\tPreanalyze_Spec_Expression.\n+\n+2022-11-08  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_imgv.adb\n+\t(Expand_Wide_Image_Attribute): Handle just like attribute Image.\n+\t(Expand_Wide_Wide_Image_Attribute): Likewise.\n+\t* exp_put_image.adb\n+\t(Build_Image_Call): Adapt to also work for Wide and Wide_Wide\n+\tattributes.\n+\t* exp_put_image.ads\n+\t(Build_Image_Call): Update comment.\n+\t* rtsfind.ads\n+\t(RE_Id): Support wide variants of Get.\n+\t(RE_Unit_Table): Likewise.\n+\n+2022-11-08  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnat/a-ngcoar.ads, libgnat/a-ngcoar.adb: Remove extra spaces.\n+\n+2022-11-08  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch12.adb (Validate_Formal_Type_Default): Remove call to\n+\tCollect_Interfaces, which had no effect apart from populating a\n+\tlist that was not used; fix style.\n+\n+2022-11-08  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_spark.adb (SPARK_Freeze_Type): Refine type of a local\n+\tobject.\n+\t* sem_ch3.adb (Derive_Subprograms): Remove initial value for\n+\tNew_Subp, which is in only written as an out parameter and never\n+\tread.\n+\n+2022-11-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_res.adb (Resolve_If_Expression): Remove obsolete special\n+\tcase.\n+\n+2022-11-08  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Delta_Aggregate): Implement rules related\n+\tto limited objects appearing as the base expression.\n+\n+2022-11-08  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.adb (OK_For_Limited_Init_In_05): Handle delta aggregates\n+\tjust like other aggregates.\n+\n+2022-11-08  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Delta_Record_Aggregate): Reject\n+\texpressions of a limited types.\n+\n+2022-11-08  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch9.adb\n+\t(Build_Master_Entity): Handle missing case: when the context of\n+\tthe master is a BIP function whose result type has tasks.\n+\n+2022-11-08  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnat/a-tags.adb\n+\t(Interface_Ancestor_Tags): Raise Tag_Error on No_Tag.\n+\t(Is_Descendant_At_Same_Level): Likewise.\n+\n+2022-11-08  Bob Duff  <duff@adacore.com>\n+\n+\t* usage.adb: Add -gnatw_q and -gnatw_Q.\n+\n 2022-11-07  Cedric Landet  <landet@adacore.com>\n \n \t* doc/gnat_ugn/gnat_and_program_execution.rst: Mention the needed"}, {"sha": "d206bc350289624c5cd4c224815323d0cb7344be", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69023a9f955dbb6dddca5d270379193a124bdf3c/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69023a9f955dbb6dddca5d270379193a124bdf3c/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=69023a9f955dbb6dddca5d270379193a124bdf3c", "patch": "@@ -1,3 +1,69 @@\n+2022-11-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/101962\n+\t* region-model-impl-calls.cc: Update comment.\n+\t* region-model.cc (region_model::check_symbolic_bounds): Fix\n+\tlayout of \"void\" return.  Replace usage of\n+\teval_condition_without_cm with eval_condition.\n+\t(region_model::eval_condition): Take over body of...\n+\t(region_model::eval_condition_without_cm): ...this subroutine,\n+\tdropping the latter.  Eliminating this distinction avoids issues\n+\twhere constraints were not considered when recursing.\n+\t(region_model::compare_initial_and_pointer): Update comment.\n+\t(region_model::symbolic_greater_than): Replace usage of\n+\teval_condition_without_cm with eval_condition.\n+\t* region-model.h\n+\t(region_model::eval_condition_without_cm): Delete decl.\n+\n+2022-11-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region-model-impl-calls.cc\n+\t(region_model::impl_call_errno_location): New.\n+\t* region-model-manager.cc\n+\t(region_model_manager::region_model_manager): Initialize\n+\tm_thread_local_region and m_errno_region.\n+\t* region-model-manager.h (region_model_manager::get_errno_region):\n+\tNew accessor.\n+\t(region_model_manager::m_thread_local_region): New.\n+\t(region_model_manager::m_errno_region): New.\n+\t* region-model.cc (region_model::on_call_pre): Special-case\n+\t\"__errno_location\".\n+\t(region_model::set_errno): New.\n+\t* region-model.h (impl_call_errno_location): New decl.\n+\t(region_model::set_errno): New decl.\n+\t* region.cc (thread_local_region::dump_to_pp): New.\n+\t(errno_region::dump_to_pp): New.\n+\t* region.h (enum memory_space): Add MEMSPACE_THREAD_LOCAL.\n+\t(enum region_kind): Add RK_THREAD_LOCAL and RK_ERRNO.\n+\t(class thread_local_region): New.\n+\t(is_a_helper <const thread_local_region *>::test): New.\n+\t(class errno_region): New.\n+\t(is_a_helper <const errno_region *>::test): New.\n+\t* store.cc (binding_cluster::escaped_p): New.\n+\t(store::escaped_p): Treat errno as always having escaped.\n+\t(store::replay_call_summary_cluster): Handle RK_THREAD_LOCAL and\n+\tRK_ERRNO.\n+\t* store.h (binding_cluster::escaped_p): Remove definition.\n+\n+2022-11-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* call-info.cc (success_call_info::get_desc): Delete.\n+\t(failed_call_info::get_desc): Likewise.\n+\t(succeed_or_fail_call_info::get_desc): New.\n+\t* call-info.h (class succeed_or_fail_call_info): New.\n+\t(class success_call_info): Convert to a subclass of\n+\tsucceed_or_fail_call_info.\n+\t(class failed_call_info): Likewise.\n+\n+2022-11-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region-model-impl-calls.cc (region_model::impl_call_strchr):\n+\tMove to on_call_post.  Handle both outcomes using bifurcation,\n+\trather than just the \"not found\" case.\n+\t* region-model.cc (region_model::on_call_pre): Move\n+\tBUILT_IN_STRCHR and \"strchr\" to...\n+\t(region_model::on_call_post): ...here.\n+\n 2022-11-03  David Malcolm  <dmalcolm@redhat.com>\n \n \t* analyzer.h: Use std::unique_ptr for state machines from plugins."}, {"sha": "9458657292cd1cf27d22e9194dd76a595a5da94e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69023a9f955dbb6dddca5d270379193a124bdf3c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69023a9f955dbb6dddca5d270379193a124bdf3c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=69023a9f955dbb6dddca5d270379193a124bdf3c", "patch": "@@ -1,3 +1,16 @@\n+2022-11-08  Jason Merrill  <jason@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cp-tree.h (fns_correspond): Declare.\n+\t* decl.cc (fns_correspond): New.\n+\t* call.cc (add_candidates): Look for op!= matching op==.\n+\t(joust): Complain about non-standard reversed tiebreaker.\n+\t(tourney): Fix champ_compared_to_predecessor logic.\n+\t(build_new_op): Don't complain about error_mark_node not having\n+\t'bool' type.\n+\t* pt.cc (tsubst_copy_and_build): Don't try to be permissive\n+\twhen seen_error().\n+\n 2022-11-06  Patrick Palka  <ppalka@redhat.com>\n \n \t* tree.cc (cxx_attribute_table): Include init_priority entry"}, {"sha": "bdc0ef5b7ce80430c396ba4586ff235ee446b290", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69023a9f955dbb6dddca5d270379193a124bdf3c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69023a9f955dbb6dddca5d270379193a124bdf3c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=69023a9f955dbb6dddca5d270379193a124bdf3c", "patch": "@@ -1,3 +1,70 @@\n+2022-11-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/101962\n+\t* gcc.dg/analyzer/data-model-23.c (test_3): New test.\n+\n+2022-11-08  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/24021\n+\t* gcc.dg/tree-ssa/vrp-float-plus.c: New test.\n+\n+2022-11-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107389\n+\t* gcc.dg/pr107389.c: New testcase.\n+\n+2022-11-08  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* gcc.target/gcn/math-builtins-1.c: New test.\n+\n+2022-11-08  Surya Kumari Jangala  <jskumari@linux.ibm.com>\n+\n+\tPR testsuite/107171\n+\t* gcc.target/powerpc/pr105586.c: Guard against unsupported\n+\t__int128.\n+\n+2022-11-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/107547\n+\t* gcc.dg/pr107547.c: New test.\n+\n+2022-11-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/107546\n+\t* gcc.target/i386/pr107546.c: New test.\n+\n+2022-11-08  konglin1  <lingling.kong@intel.com>\n+\n+\tRevert:\n+\t2022-11-08  konglin1  <lingling.kong@intel.com>\n+\n+\t* gcc.target/i386/raoint-atomic-fetch.c: New test.\n+\n+2022-11-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/errno-1.c: New test.\n+\n+2022-11-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/strchr-1.c (test_literal): Detect writing to a\n+\tstring literal.  Verify that we emit the \"when '__builtin_strchr'\n+\treturns non-NULL\" message.\n+\n+2022-11-08  Jason Merrill  <jason@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/cpp2a/spaceship-eq15.C: New test.\n+\t* g++.dg/cpp0x/defaulted3.C: Add const.\n+\t* g++.dg/cpp2a/bit-cast7.C: Add const.\n+\t* g++.dg/cpp2a/spaceship-rewrite1.C: Expect error.\n+\t* g++.dg/cpp2a/spaceship-rewrite5.C: Expect error.\n+\t* g++.old-deja/g++.jason/byval2.C: Expect error.\n+\t* g++.old-deja/g++.other/overload13.C: Add const.\n+\n+2022-11-08  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr104530.c: New.\n+\n 2022-11-07  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR tree-optimization/55157"}, {"sha": "23a2ca5c79a6f10442e0f4b54e21b49001622a56", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69023a9f955dbb6dddca5d270379193a124bdf3c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69023a9f955dbb6dddca5d270379193a124bdf3c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=69023a9f955dbb6dddca5d270379193a124bdf3c", "patch": "@@ -1,3 +1,104 @@\n+2022-11-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/18_support/new_nothrow.cc: Add missing noexcept\n+\tto operator delete replacements.\n+\t* testsuite/20_util/any/cons/92156.cc: Disable\n+\t-Winit-list-lifetime warnings from instantiating invalid\n+\tspecialization of manager function.\n+\t* testsuite/20_util/any/modifiers/92156.cc: Likewise.\n+\t* testsuite/20_util/default_delete/void_neg.cc: Prune additional\n+\tdiagnostics.\n+\t* testsuite/20_util/headers/memory/synopsis.cc: Add missing\n+\tnoexcept.\n+\t* testsuite/20_util/shared_ptr/cons/void_neg.cc: Prune\n+\tadditional diagnostic.\n+\t* testsuite/20_util/unique_ptr/creation/for_overwrite.cc: Add\n+\tmissing noexcept to operator delete replacements.\n+\t* testsuite/21_strings/basic_string/cons/char/103919.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/map/modifiers/emplace/92300.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/map/modifiers/insert/92300.cc:\n+\tLikewise.\n+\t* testsuite/24_iterators/headers/iterator/range_access_c++11.cc:\n+\tAdd missing noexcept to synopsis declarations.\n+\t* testsuite/24_iterators/headers/iterator/range_access_c++14.cc:\n+\tLikewise.\n+\t* testsuite/24_iterators/headers/iterator/range_access_c++17.cc:\n+\tLikewise.\n+\n+2022-11-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_tempbuf.h (_Temporary_buffer): Disable\n+\twarnings about get_temporary_buffer being deprecated.\n+\t* include/ext/functional (mem_fun1, mem_fun1_ref): Disable\n+\twarnings about mem_fun1_t, const_mem_fun1_t, mem_fun1_ref_t and\n+\tconst_mem_fun1_ref_t being deprecated.\n+\t* include/std/array (__array_traits<T, 0>): Remove artificial\n+\tattributes which give warnings about being ignored.\n+\t* include/std/spanstream (basic_spanbuf::setbuf): Add assertion\n+\tand adjust to avoid narrowing warning.\n+\t* libsupc++/exception_ptr.h [!__cpp_rtti && !__cpp_exceptions]\n+\t(make_exception_ptr): Add missing inline specifier.\n+\n+2022-11-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/alloc_traits.h (allocator_traits): Add\n+\talways_inline attribute to all member functions.\n+\t(__do_alloc_on_copy, __alloc_on_copy, __do_alloc_on_move)\n+\t(__alloc_on_move, __do_alloc_on_swap, __alloc_on_swap)\n+\t(_Destroy(FwdIter, FwdIter, allocator<T>&)): : Add\n+\talways_inline attribute.\n+\t* include/bits/allocator.h (allocator): Add always_inline\n+\tattribute to all member functions and equality operators.\n+\t* include/bits/new_allocator.h (__new_allocator): Likewise.\n+\t* include/ext/alloc_traits.h (__gnu_cxx::__alloc_traits):\n+\tLikewise.\n+\n+2022-11-08  Charles-Fran\u00e7ois Natali  <cf.natali@gmail.com>\n+\n+\tPR libstdc++/63746\n+\t* include/bits/fstream.tcc (basic_filbuf::xsputn): Remove\n+\t1024-byte chunking that bypasses the buffer for large writes.\n+\t* testsuite/27_io/basic_filebuf/sputn/char/63746.cc: New test.\n+\n+2022-11-08  Will Hawkins  <whh8b@obs.cr>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/basic_string.h (__str_cat): Add common function\n+\tthat performs single-allocation string concatenation.\n+\t(operator+): Use __str_cat.\n+\t* include/bits/basic_string.tcc (operator+): Move to .h and\n+\tdefine inline using __str_cat.\n+\n+2022-11-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/20_util/to_chars/float128_c++23.cc (test): Uncomment\n+\tdenorm_min test.\n+\n+2022-11-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/authors.xml: Update the blurb listing my doc\n+\tcontributions.\n+\n+2022-11-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/authors.xml: Remove empty author element.\n+\t* doc/xml/manual/spine.xml: Likewise.\n+\t* doc/html/manual/index.html: Regenerate.\n+\n+2022-11-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR libstdc++/107562\n+\t* src/c++17/floating_from_chars.cc (from_chars_impl): Fix syntax\n+\terror.\n+\n+2022-11-08  Jason Merrill  <jason@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/18_support/comparisons/algorithms/fallback.cc: Adjust\n+\tasserts.\n+\n 2022-11-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libstdc++/107562"}]}