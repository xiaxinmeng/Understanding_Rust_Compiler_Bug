{"sha": "593a083530a21d54d39929706ffdef2d98df8ae6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkzYTA4MzUzMGEyMWQ1NGQzOTkyOTcwNmZmZGVmMmQ5OGRmOGFlNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-04-02T00:13:30Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-04-02T00:13:30Z"}, "message": "re PR c++/50043 ([C++0x] Implement core/1123)\n\n/cp\n2012-04-01  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/50043\n\t* class.c (deduce_noexcept_on_destructor,\n\tdeduce_noexcept_on_destructors): New.\n\t(check_bases_and_members): Call the latter.\n\t* decl.c (grokfndecl): Call the former.\n\t* method.c (implicitly_declare_fn): Not static.\n\t* cp-tree.h (deduce_noexcept_on_destructor, implicitly_declare_fn):\n\tDeclare\n\n/testsuite\n2012-04-01  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/50043\n\t* g++.dg/cpp0x/noexcept17.C: New.\n\t* g++.old-deja/g++.eh/cleanup1.C: Adjust.\n\t* g++.dg/tree-ssa/ehcleanup-1.C: Likewise.\n\t* g++.dg/cpp0x/noexcept01.C: Likewise.\n\t* g++.dg/eh/init-temp1.C: Likewise.\n\t* g++.dg/eh/ctor1.C: Likwise.\n\nFrom-SVN: r186058", "tree": {"sha": "112b4c506f1ca661eef5e95c7ff36c47d3577d8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/112b4c506f1ca661eef5e95c7ff36c47d3577d8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/593a083530a21d54d39929706ffdef2d98df8ae6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/593a083530a21d54d39929706ffdef2d98df8ae6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/593a083530a21d54d39929706ffdef2d98df8ae6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/593a083530a21d54d39929706ffdef2d98df8ae6/comments", "author": null, "committer": null, "parents": [{"sha": "ea2c1a6d673c443effb1adbc652143c2b3934a5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea2c1a6d673c443effb1adbc652143c2b3934a5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea2c1a6d673c443effb1adbc652143c2b3934a5d"}], "stats": {"total": 163, "additions": 156, "deletions": 7}, "files": [{"sha": "89ea02d1935d5a2c0110745f6597e28bd51c33f9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593a083530a21d54d39929706ffdef2d98df8ae6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593a083530a21d54d39929706ffdef2d98df8ae6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=593a083530a21d54d39929706ffdef2d98df8ae6", "patch": "@@ -1,3 +1,14 @@\n+2012-04-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/50043\n+\t* class.c (deduce_noexcept_on_destructor,\n+\tdeduce_noexcept_on_destructors): New.\n+\t(check_bases_and_members): Call the latter.\n+\t* decl.c (grokfndecl): Call the former.\n+\t* method.c (implicitly_declare_fn): Not static.\n+\t* cp-tree.h (deduce_noexcept_on_destructor, implicitly_declare_fn):\n+\tDeclare\n+\n 2012-03-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/52718"}, {"sha": "7b6559c4231ca1e03063af0f20880d8c6163ab57", "filename": "gcc/cp/class.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593a083530a21d54d39929706ffdef2d98df8ae6/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593a083530a21d54d39929706ffdef2d98df8ae6/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=593a083530a21d54d39929706ffdef2d98df8ae6", "patch": "@@ -4321,6 +4321,41 @@ clone_constructors_and_destructors (tree t)\n     clone_function_decl (OVL_CURRENT (fns), /*update_method_vec_p=*/1);\n }\n \n+/* Deduce noexcept for a destructor DTOR.  */\n+\n+void\n+deduce_noexcept_on_destructor (tree dtor)\n+{\n+  if (!TYPE_RAISES_EXCEPTIONS (TREE_TYPE (dtor)))\n+    {\n+      tree ctx = DECL_CONTEXT (dtor);\n+      tree implicit_fn = implicitly_declare_fn (sfk_destructor, ctx,\n+\t\t\t\t\t\t/*const_p=*/false);\n+      tree eh_spec = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (implicit_fn));\n+      TREE_TYPE (dtor) = build_exception_variant (TREE_TYPE (dtor), eh_spec);\n+    }\n+}\n+\n+/* For each destructor in T, deduce noexcept:\n+\n+   12.4/3: A declaration of a destructor that does not have an\n+   exception-specification is implicitly considered to have the\n+   same exception-specification as an implicit declaration (15.4).  */\n+\n+static void\n+deduce_noexcept_on_destructors (tree t)\n+{\n+  tree fns;\n+\n+  /* If for some reason we don't have a CLASSTYPE_METHOD_VEC, we bail\n+     out now.  */\n+  if (!CLASSTYPE_METHOD_VEC (t))\n+    return;\n+\n+  for (fns = CLASSTYPE_DESTRUCTORS (t); fns; fns = OVL_NEXT (fns))\n+    deduce_noexcept_on_destructor (OVL_CURRENT (fns));\n+}\n+\n /* Subroutine of set_one_vmethod_tm_attributes.  Search base classes\n    of TYPE for virtual functions which FNDECL overrides.  Return a\n    mask of the tm attributes found therein.  */\n@@ -4994,6 +5029,10 @@ check_bases_and_members (tree t)\n   cant_have_const_ctor = 0;\n   no_const_asn_ref = 0;\n \n+  /* Deduce noexcept on destructors.  */\n+  if (cxx_dialect >= cxx0x)\n+    deduce_noexcept_on_destructors (t);\n+\n   /* Check all the base-classes.  */\n   check_bases (t, &cant_have_const_ctor,\n \t       &no_const_asn_ref);"}, {"sha": "8bca1fa0b634dbf16f6a4b6b1e68a3e444dc4072", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593a083530a21d54d39929706ffdef2d98df8ae6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593a083530a21d54d39929706ffdef2d98df8ae6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=593a083530a21d54d39929706ffdef2d98df8ae6", "patch": "@@ -4978,6 +4978,7 @@ extern void fixup_attribute_variants\t\t(tree);\n extern tree* decl_cloned_function_p\t\t(const_tree, bool);\n extern void clone_function_decl\t\t\t(tree, int);\n extern void adjust_clone_args\t\t\t(tree);\n+extern void deduce_noexcept_on_destructor       (tree);\n \n /* in cvt.c */\n extern tree convert_to_reference\t\t(tree, tree, int, int, tree);\n@@ -5264,6 +5265,8 @@ extern tree get_copy_assign\t\t\t(tree);\n extern tree get_default_ctor\t\t\t(tree);\n extern tree get_dtor\t\t\t\t(tree, tsubst_flags_t);\n extern tree locate_ctor\t\t\t\t(tree);\n+extern tree implicitly_declare_fn               (special_function_kind, tree,\n+\t\t\t\t\t\t bool);\n \n /* In optimize.c */\n extern bool maybe_clone_body\t\t\t(tree);"}, {"sha": "d210f199a2dc55a00f26f014b91a06e4a3f4002d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593a083530a21d54d39929706ffdef2d98df8ae6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593a083530a21d54d39929706ffdef2d98df8ae6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=593a083530a21d54d39929706ffdef2d98df8ae6", "patch": "@@ -7448,6 +7448,13 @@ grokfndecl (tree ctype,\n   if (ctype != NULL_TREE)\n     grokclassfn (ctype, decl, flags);\n \n+  /* 12.4/3  */\n+  if (cxx_dialect >= cxx0x\n+      && DECL_DESTRUCTOR_P (decl)\n+      && !TYPE_BEING_DEFINED (DECL_CONTEXT (decl))\n+      && !processing_template_decl)\n+    deduce_noexcept_on_destructor (decl);\n+\n   decl = check_explicit_specialization (orig_declarator, decl,\n \t\t\t\t\ttemplate_count,\n \t\t\t\t\t2 * funcdef_flag +"}, {"sha": "79bed4a053fd90e214cca52f4f755c57f758a622", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593a083530a21d54d39929706ffdef2d98df8ae6/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593a083530a21d54d39929706ffdef2d98df8ae6/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=593a083530a21d54d39929706ffdef2d98df8ae6", "patch": "@@ -1444,7 +1444,7 @@ explain_implicit_non_constexpr (tree decl)\n    reference argument or a non-const reference.  Returns the\n    FUNCTION_DECL for the implicitly declared function.  */\n \n-static tree\n+tree\n implicitly_declare_fn (special_function_kind kind, tree type, bool const_p)\n {\n   tree fn;"}, {"sha": "73f22f3ab4f7d41097909ff44911ce8ee1e8c32d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593a083530a21d54d39929706ffdef2d98df8ae6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593a083530a21d54d39929706ffdef2d98df8ae6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=593a083530a21d54d39929706ffdef2d98df8ae6", "patch": "@@ -1,3 +1,13 @@\n+2012-04-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/50043\n+\t* g++.dg/cpp0x/noexcept17.C: New.\n+\t* g++.old-deja/g++.eh/cleanup1.C: Adjust.\n+\t* g++.dg/tree-ssa/ehcleanup-1.C: Likewise.\n+\t* g++.dg/cpp0x/noexcept01.C: Likewise.\n+\t* g++.dg/eh/init-temp1.C: Likewise.\n+\t* g++.dg/eh/ctor1.C: Likwise.\n+\n 2012-03-31  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/controlled6.adb: New test."}, {"sha": "b6be1ef7a3f3f71e87fa77ddaeedd51794e1ef52", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept01.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593a083530a21d54d39929706ffdef2d98df8ae6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept01.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593a083530a21d54d39929706ffdef2d98df8ae6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept01.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept01.C?ref=593a083530a21d54d39929706ffdef2d98df8ae6", "patch": "@@ -50,7 +50,7 @@ struct E\n   ~E();\n };\n \n-SA (!noexcept (E()));\n+SA (noexcept (E()));\n \n struct F\n {\n@@ -74,7 +74,7 @@ void tf()\n }\n \n template void tf<int,true>();\n-template void tf<E, false>();\n+template void tf<E, true>();\n \n // Make sure that noexcept uses the declared exception-specification, not\n // any knowledge we might have about whether or not the function really"}, {"sha": "82cd844c067df89b9a10cb0fa3e33535509664af", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept17.C", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593a083530a21d54d39929706ffdef2d98df8ae6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593a083530a21d54d39929706ffdef2d98df8ae6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept17.C?ref=593a083530a21d54d39929706ffdef2d98df8ae6", "patch": "@@ -0,0 +1,54 @@\n+// PR c++/50043\n+// { dg-options -std=c++11 }\n+\n+struct True1 {};\n+struct True2 { ~True2(); };\n+struct True3 { ~True3(){ throw 0; } };\n+struct False { ~False() noexcept(false); };\n+\n+template <typename Base>\n+struct A : Base\n+{\n+};\n+\n+template <typename Member>\n+struct B\n+{\n+    Member mem;\n+};\n+\n+template <typename Base, typename Member>\n+struct C : Base\n+{\n+    Member mem;\n+};\n+\n+#define SA(X) static_assert(X, #X)\n+\n+SA( noexcept(True1()));\n+SA( noexcept(True2()));\n+SA( noexcept(True3()));\n+SA(!noexcept(False()));\n+\n+SA( noexcept(A<True1>()));\n+SA( noexcept(A<True2>()));\n+SA( noexcept(A<True3>()));\n+SA(!noexcept(A<False>()));\n+\n+SA( noexcept(B<True1>()));\n+SA( noexcept(B<True2>()));\n+SA( noexcept(B<True3>()));\n+SA(!noexcept(B<False>()));\n+\n+SA( noexcept(C<True1, True2>()));\n+SA( noexcept(C<True1, True3>()));\n+SA( noexcept(C<True2, True3>()));\n+SA( noexcept(C<True2, True1>()));\n+SA( noexcept(C<True3, True1>()));\n+SA( noexcept(C<True3, True2>()));\n+SA(!noexcept(C<False, True1>()));\n+SA(!noexcept(C<False, True2>()));\n+SA(!noexcept(C<False, True3>()));\n+SA(!noexcept(C<True1, False>()));\n+SA(!noexcept(C<True2, False>()));\n+SA(!noexcept(C<True3, False>()));"}, {"sha": "b959d1c5620878108ebb20e86bff645bf3ce5ea3", "filename": "gcc/testsuite/g++.dg/eh/ctor1.C", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593a083530a21d54d39929706ffdef2d98df8ae6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fctor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593a083530a21d54d39929706ffdef2d98df8ae6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fctor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fctor1.C?ref=593a083530a21d54d39929706ffdef2d98df8ae6", "patch": "@@ -5,6 +5,12 @@\n \n // PR 411\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#define NOEXCEPT_FALSE noexcept (false)\n+#else\n+#define NOEXCEPT_FALSE\n+#endif\n+\n bool was_f_in_Bar_destroyed=false;\n \n struct Foo\n@@ -17,7 +23,7 @@ struct Foo\n \n struct Bar\n {\n-  ~Bar()\n+  ~Bar() NOEXCEPT_FALSE\n   {\n     throw 1;\n   }"}, {"sha": "4996cea230ff5791620b031eaa35847fb005f5cf", "filename": "gcc/testsuite/g++.dg/eh/init-temp1.C", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593a083530a21d54d39929706ffdef2d98df8ae6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Finit-temp1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593a083530a21d54d39929706ffdef2d98df8ae6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Finit-temp1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Finit-temp1.C?ref=593a083530a21d54d39929706ffdef2d98df8ae6", "patch": "@@ -1,14 +1,20 @@\n // PR c++/15764\n // { dg-do run }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#define NOEXCEPT_FALSE noexcept (false)\n+#else\n+#define NOEXCEPT_FALSE\n+#endif\n+\n extern \"C\" void abort (); \n  \n int thrown; \n \n int as;\n struct a {\n   a () { ++as; }\n-  ~a () { --as; if (thrown++ == 0) throw 42; }\n+  ~a () NOEXCEPT_FALSE { --as; if (thrown++ == 0) throw 42; }\n }; \n  \n int f (a const&) { return 1; } "}, {"sha": "0a29ce9cb4f3860013af6afa7e33e7122e7799e1", "filename": "gcc/testsuite/g++.dg/tree-ssa/ehcleanup-1.C", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593a083530a21d54d39929706ffdef2d98df8ae6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fehcleanup-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593a083530a21d54d39929706ffdef2d98df8ae6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fehcleanup-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fehcleanup-1.C?ref=593a083530a21d54d39929706ffdef2d98df8ae6", "patch": "@@ -1,9 +1,16 @@\n // { dg-options \"-O2 -fdump-tree-ehcleanup1-details\" }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#define NOEXCEPT_FALSE noexcept (false)\n+#else\n+#define NOEXCEPT_FALSE\n+#endif\n+\n extern void can_throw ();\n class a\n {\n public:\n-  ~a ()\n+  ~a () NOEXCEPT_FALSE\n   {\n     if (0)\n       can_throw ();"}, {"sha": "12f1ec7a0811e70ea210988458bd868b40938bc7", "filename": "gcc/testsuite/g++.old-deja/g++.eh/cleanup1.C", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593a083530a21d54d39929706ffdef2d98df8ae6/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcleanup1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593a083530a21d54d39929706ffdef2d98df8ae6/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcleanup1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcleanup1.C?ref=593a083530a21d54d39929706ffdef2d98df8ae6", "patch": "@@ -2,14 +2,20 @@\n // Bug: obj gets destroyed twice because the fixups for the return are\n // inside its cleanup region.\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#define NOEXCEPT_FALSE noexcept (false)\n+#else\n+#define NOEXCEPT_FALSE\n+#endif\n+\n extern \"C\" int printf (const char *, ...);\n \n int d;\n \n struct myExc { };\n \n struct myExcRaiser {\n-  ~myExcRaiser() { throw myExc(); }\n+  ~myExcRaiser() NOEXCEPT_FALSE { throw myExc(); }\n };\n \n struct stackObj {"}]}