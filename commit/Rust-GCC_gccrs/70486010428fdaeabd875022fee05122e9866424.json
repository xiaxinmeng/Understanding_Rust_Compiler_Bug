{"sha": "70486010428fdaeabd875022fee05122e9866424", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA0ODYwMTA0MjhmZGFlYWJkODc1MDIyZmVlMDUxMjJlOTg2NjQyNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-11-16T19:36:37Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-11-16T19:36:37Z"}, "message": "passes.c (execute_one_pass): Do not apply all transforms prior every simple IPA pass.\n\n\n\t* passes.c (execute_one_pass): Do not apply all transforms prior\n\tevery simple IPA pass.\n\t* cgraphunit.c: Do not include fibheap.h\n\t(expand_thunk): Use get_untransformed_body.\n\t(cgraph_node::expand): Likewise.\n\t* tree-ssa-structalias.c (ipa_pta_execute): Skip inline clones.\n\t* cgraph.c (release_function_body): Do not push cfun when CFG is not there.\n\t(cgraph_node::get_untransformed_body): Break out from ...\n\t(cgraph_node::get_body): ... here; add code to apply all transforms.\n\t* cgraph.h (cgraph_node): Add get_untransformed_body.\n\t* ipa-icf.c (sem_function::init): Use get_untransformed_body.\n\t* cgraphclones.c (duplicate_thunk_for_node): Likewise.\n\t* tree-inline.c (expand_call_inline): LIkewise.\n\t* i386.c (ix86_reset_to_default_globals): Break out from ...\n\t(ix86_set_current_function): ... here;\n\t(ix86_reset_previous_fndecl): Use it.\n\t(ix86_simd_clone_adjust): Use ix86_reset_previous_fndecl.\n\nFrom-SVN: r217633", "tree": {"sha": "764c758c25d54ae7dff3cb061662445a47d38b28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/764c758c25d54ae7dff3cb061662445a47d38b28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70486010428fdaeabd875022fee05122e9866424", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70486010428fdaeabd875022fee05122e9866424", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70486010428fdaeabd875022fee05122e9866424", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70486010428fdaeabd875022fee05122e9866424/comments", "author": null, "committer": null, "parents": [{"sha": "9ff2f666aa330107eb6767c246b9d302247359c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ff2f666aa330107eb6767c246b9d302247359c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ff2f666aa330107eb6767c246b9d302247359c9"}], "stats": {"total": 200, "additions": 125, "deletions": 75}, "files": [{"sha": "d035fe15e2012cce44eaac6afd2c4c22da5017d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70486010428fdaeabd875022fee05122e9866424/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70486010428fdaeabd875022fee05122e9866424/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70486010428fdaeabd875022fee05122e9866424", "patch": "@@ -1,3 +1,23 @@\n+2014-11-16  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* passes.c (execute_one_pass): Do not apply all transforms prior\n+\tevery simple IPA pass.\n+\t* cgraphunit.c: Do not include fibheap.h\n+\t(expand_thunk): Use get_untransformed_body.\n+\t(cgraph_node::expand): Likewise.\n+\t* tree-ssa-structalias.c (ipa_pta_execute): Skip inline clones.\n+\t* cgraph.c (release_function_body): Do not push cfun when CFG is not there.\n+\t(cgraph_node::get_untransformed_body): Break out from ...\n+\t(cgraph_node::get_body): ... here; add code to apply all transforms.\n+\t* cgraph.h (cgraph_node): Add get_untransformed_body.\n+\t* ipa-icf.c (sem_function::init): Use get_untransformed_body.\n+\t* cgraphclones.c (duplicate_thunk_for_node): Likewise.\n+\t* tree-inline.c (expand_call_inline): LIkewise.\n+\t* i386.c (ix86_reset_to_default_globals): Break out from ...\n+\t(ix86_set_current_function): ... here;\n+\t(ix86_reset_previous_fndecl): Use it.\n+\t(ix86_simd_clone_adjust): Use ix86_reset_previous_fndecl.\n+\n 2014-11-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* doc/tm.texi.in (TARGET_FLAGS_REGNUM): Move around."}, {"sha": "ad181b062c858f189c886b8c37a7e3cb08b6c77e", "filename": "gcc/cgraph.c", "status": "modified", "additions": 64, "deletions": 22, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70486010428fdaeabd875022fee05122e9866424/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70486010428fdaeabd875022fee05122e9866424/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=70486010428fdaeabd875022fee05122e9866424", "patch": "@@ -1664,29 +1664,33 @@ release_function_body (tree decl)\n {\n   if (DECL_STRUCT_FUNCTION (decl))\n     {\n-      push_cfun (DECL_STRUCT_FUNCTION (decl));\n-      if (cfun->cfg\n-\t  && current_loops)\n-\t{\n-\t  cfun->curr_properties &= ~PROP_loops;\n-\t  loop_optimizer_finalize ();\n-\t}\n-      if (cfun->gimple_df)\n+      if (DECL_STRUCT_FUNCTION (decl)->cfg\n+\t  || DECL_STRUCT_FUNCTION (decl)->gimple_df)\n \t{\n-\t  delete_tree_ssa ();\n-\t  delete_tree_cfg_annotations ();\n-\t  cfun->eh = NULL;\n-\t}\n-      if (cfun->cfg)\n-\t{\n-\t  gcc_assert (!dom_info_available_p (CDI_DOMINATORS));\n-\t  gcc_assert (!dom_info_available_p (CDI_POST_DOMINATORS));\n-\t  clear_edges ();\n-\t  cfun->cfg = NULL;\n+\t  push_cfun (DECL_STRUCT_FUNCTION (decl));\n+\t  if (cfun->cfg\n+\t      && current_loops)\n+\t    {\n+\t      cfun->curr_properties &= ~PROP_loops;\n+\t      loop_optimizer_finalize ();\n+\t    }\n+\t  if (cfun->gimple_df)\n+\t    {\n+\t      delete_tree_ssa ();\n+\t      delete_tree_cfg_annotations ();\n+\t      cfun->eh = NULL;\n+\t    }\n+\t  if (cfun->cfg)\n+\t    {\n+\t      gcc_assert (!dom_info_available_p (CDI_DOMINATORS));\n+\t      gcc_assert (!dom_info_available_p (CDI_POST_DOMINATORS));\n+\t      clear_edges ();\n+\t      cfun->cfg = NULL;\n+\t    }\n+\t  if (cfun->value_histograms)\n+\t    free_histograms ();\n+\t  pop_cfun ();\n \t}\n-      if (cfun->value_histograms)\n-\tfree_histograms ();\n-      pop_cfun ();\n       gimple_set_body (decl, NULL);\n       /* Struct function hangs a lot of data that would leak if we didn't\n          removed all pointers to it.   */\n@@ -3138,7 +3142,7 @@ cgraph_node::function_symbol (enum availability *availability)\n    present.  */\n \n bool\n-cgraph_node::get_body (void)\n+cgraph_node::get_untransformed_body (void)\n {\n   lto_file_decl_data *file_data;\n   const char *data, *name;\n@@ -3178,6 +3182,44 @@ cgraph_node::get_body (void)\n   return true;\n }\n \n+/* Prepare function body.  When doing LTO, read cgraph_node's body from disk \n+   if it is not already present.  When some IPA transformations are scheduled,\n+   apply them.  */\n+\n+bool\n+cgraph_node::get_body (void)\n+{\n+  bool updated;\n+\n+  updated = get_untransformed_body ();\n+\n+  /* Getting transformed body makes no sense for inline clones;\n+     we should never use this on real clones becuase they are materialized\n+     early.\n+     TODO: Materializing clones here will likely lead to smaller LTRANS\n+     footprint. */\n+  gcc_assert (!global.inlined_to && !clone_of);\n+  if (ipa_transforms_to_apply.exists ())\n+    {\n+      opt_pass *saved_current_pass = current_pass;\n+      FILE *saved_dump_file = dump_file;\n+      int saved_dump_flags = dump_flags;\n+\n+      push_cfun (DECL_STRUCT_FUNCTION (decl));\n+      execute_all_ipa_transforms ();\n+      cgraph_edge::rebuild_edges ();\n+      free_dominance_info (CDI_DOMINATORS);\n+      free_dominance_info (CDI_POST_DOMINATORS);\n+      pop_cfun ();\n+      updated = true;\n+\n+      current_pass = saved_current_pass;\n+      dump_file = saved_dump_file;\n+      dump_flags = saved_dump_flags;\n+    }\n+  return updated;\n+}\n+\n /* Return the DECL_STRUCT_FUNCTION of the function.  */\n \n struct function *"}, {"sha": "77c2a6058e768ff1c782ec532ac3507d509b1770", "filename": "gcc/cgraph.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70486010428fdaeabd875022fee05122e9866424/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70486010428fdaeabd875022fee05122e9866424/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=70486010428fdaeabd875022fee05122e9866424", "patch": "@@ -933,6 +933,11 @@ struct GTY((tag (\"SYMTAB_FUNCTION\"))) cgraph_node : public symtab_node {\n \n   /* When doing LTO, read cgraph_node's body from disk if it is not already\n      present.  */\n+  bool get_untransformed_body (void);\n+\n+  /* Prepare function body.  When doing LTO, read cgraph_node's body from disk \n+     if it is not already present.  When some IPA transformations are scheduled,\n+     apply them.  */\n   bool get_body (void);\n \n   /* Release memory used to represent body of function."}, {"sha": "7dc96f1d5ba8e1b613e418048fa1e6713b7b0cca", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70486010428fdaeabd875022fee05122e9866424/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70486010428fdaeabd875022fee05122e9866424/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=70486010428fdaeabd875022fee05122e9866424", "patch": "@@ -307,7 +307,7 @@ duplicate_thunk_for_node (cgraph_node *thunk, cgraph_node *node)\n     node = duplicate_thunk_for_node (thunk_of, node);\n \n   if (!DECL_ARGUMENTS (thunk->decl))\n-    thunk->get_body ();\n+    thunk->get_untransformed_body ();\n \n   cgraph_edge *cs;\n   for (cs = node->callers; cs; cs = cs->next_caller)\n@@ -1067,7 +1067,7 @@ symbol_table::materialize_all_clones (void)\n \t      && !gimple_has_body_p (node->decl))\n \t    {\n \t      if (!node->clone_of->clone_of)\n-\t\tnode->clone_of->get_body ();\n+\t\tnode->clone_of->get_untransformed_body ();\n \t      if (gimple_has_body_p (node->clone_of->decl))\n \t        {\n \t\t  if (symtab->dump_file)"}, {"sha": "4fba9ff59ce4bccc2bd420121057d26b47589c52", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70486010428fdaeabd875022fee05122e9866424/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70486010428fdaeabd875022fee05122e9866424/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=70486010428fdaeabd875022fee05122e9866424", "patch": "@@ -197,7 +197,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"diagnostic.h\"\n #include \"params.h\"\n-#include \"fibheap.h\"\n #include \"intl.h\"\n #include \"hash-map.h\"\n #include \"plugin-api.h\"\n@@ -1469,7 +1468,7 @@ cgraph_node::expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)\n \t}\n \n       if (in_lto_p)\n-\tget_body ();\n+\tget_untransformed_body ();\n       a = DECL_ARGUMENTS (thunk_fndecl);\n       \n       current_function_decl = thunk_fndecl;\n@@ -1522,7 +1521,7 @@ cgraph_node::expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)\n       gimple ret;\n \n       if (in_lto_p)\n-\tget_body ();\n+\tget_untransformed_body ();\n       a = DECL_ARGUMENTS (thunk_fndecl);\n \n       current_function_decl = thunk_fndecl;\n@@ -1744,7 +1743,7 @@ cgraph_node::expand (void)\n   announce_function (decl);\n   process = 0;\n   gcc_assert (lowered);\n-  get_body ();\n+  get_untransformed_body ();\n \n   /* Generate RTL for the body of DECL.  */\n "}, {"sha": "7942cec4595dbdaa85e674ef64c23eff81f782bb", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70486010428fdaeabd875022fee05122e9866424/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70486010428fdaeabd875022fee05122e9866424/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=70486010428fdaeabd875022fee05122e9866424", "patch": "@@ -5029,10 +5029,35 @@ ix86_can_inline_p (tree caller, tree callee)\n /* Remember the last target of ix86_set_current_function.  */\n static GTY(()) tree ix86_previous_fndecl;\n \n+/* Set target globals to default.  */\n+\n+static void\n+ix86_reset_to_default_globals (void)\n+{\n+  tree old_tree = (ix86_previous_fndecl\n+\t\t   ? DECL_FUNCTION_SPECIFIC_TARGET (ix86_previous_fndecl)\n+\t\t   : NULL_TREE);\n+\n+  if (old_tree)\n+    {\n+      tree new_tree = target_option_current_node;\n+      cl_target_option_restore (&global_options,\n+\t\t\t\tTREE_TARGET_OPTION (new_tree));\n+      if (TREE_TARGET_GLOBALS (new_tree))\n+\trestore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n+      else if (new_tree == target_option_default_node)\n+\trestore_target_globals (&default_target_globals);\n+      else\n+\tTREE_TARGET_GLOBALS (new_tree)\n+\t  = save_target_globals_default_opts ();\n+    }\n+}\n+\n /* Invalidate ix86_previous_fndecl cache.  */\n void\n ix86_reset_previous_fndecl (void)\n {\n+  ix86_reset_to_default_globals ();\n   ix86_previous_fndecl = NULL_TREE;\n }\n \n@@ -5055,7 +5080,6 @@ ix86_set_current_function (tree fndecl)\n \t\t       ? DECL_FUNCTION_SPECIFIC_TARGET (fndecl)\n \t\t       : NULL_TREE);\n \n-      ix86_previous_fndecl = fndecl;\n       if (old_tree == new_tree)\n \t;\n \n@@ -5071,18 +5095,8 @@ ix86_set_current_function (tree fndecl)\n \t}\n \n       else if (old_tree)\n-\t{\n-\t  new_tree = target_option_current_node;\n-\t  cl_target_option_restore (&global_options,\n-\t\t\t\t    TREE_TARGET_OPTION (new_tree));\n-\t  if (TREE_TARGET_GLOBALS (new_tree))\n-\t    restore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n-\t  else if (new_tree == target_option_default_node)\n-\t    restore_target_globals (&default_target_globals);\n-\t  else\n-\t    TREE_TARGET_GLOBALS (new_tree)\n-\t      = save_target_globals_default_opts ();\n-\t}\n+\tix86_reset_to_default_globals ();\n+      ix86_previous_fndecl = fndecl;\n     }\n }\n \n@@ -50972,7 +50986,7 @@ ix86_simd_clone_adjust (struct cgraph_node *node)\n   bool ok = ix86_valid_target_attribute_p (node->decl, NULL, args, 0);\n   gcc_assert (ok);\n   pop_cfun ();\n-  ix86_previous_fndecl = NULL_TREE;\n+  ix86_reset_previous_fndecl ();\n   ix86_set_current_function (node->decl);\n }\n "}, {"sha": "2d5fcf56b425e9477e7440375935e386a48a6d70", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70486010428fdaeabd875022fee05122e9866424/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70486010428fdaeabd875022fee05122e9866424/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=70486010428fdaeabd875022fee05122e9866424", "patch": "@@ -706,7 +706,7 @@ void\n sem_function::init (void)\n {\n   if (in_lto_p)\n-    get_node ()->get_body ();\n+    get_node ()->get_untransformed_body ();\n \n   tree fndecl = node->decl;\n   function *func = DECL_STRUCT_FUNCTION (fndecl);"}, {"sha": "c818d8ad9191650d15e304c801ccf2e23c568c10", "filename": "gcc/passes.c", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70486010428fdaeabd875022fee05122e9866424/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70486010428fdaeabd875022fee05122e9866424/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=70486010428fdaeabd875022fee05122e9866424", "patch": "@@ -2214,36 +2214,6 @@ execute_one_pass (opt_pass *pass)\n      executed.  */\n   invoke_plugin_callbacks (PLUGIN_PASS_EXECUTION, pass);\n \n-  /* SIPLE IPA passes do not handle callgraphs with IPA transforms in it.\n-     Apply all trnasforms first.  */\n-  if (pass->type == SIMPLE_IPA_PASS)\n-    {\n-      struct cgraph_node *node;\n-      bool applied = false;\n-      FOR_EACH_DEFINED_FUNCTION (node)\n-\tif (node->analyzed\n-\t    && node->has_gimple_body_p ()\n-\t    && (!node->clone_of || node->decl != node->clone_of->decl))\n-\t  {\n-\t    if (!node->global.inlined_to\n-\t\t&& node->ipa_transforms_to_apply.exists ())\n-\t      {\n-\t\tnode->get_body ();\n-\t\tpush_cfun (DECL_STRUCT_FUNCTION (node->decl));\n-\t\texecute_all_ipa_transforms ();\n-\t\tcgraph_edge::rebuild_edges ();\n-\t\tfree_dominance_info (CDI_DOMINATORS);\n-\t\tfree_dominance_info (CDI_POST_DOMINATORS);\n-\t\tpop_cfun ();\n-\t\tapplied = true;\n-\t      }\n-\t  }\n-      if (applied)\n-\tsymtab->remove_unreachable_nodes (false, dump_file);\n-      /* Restore current_pass.  */\n-      current_pass = pass;\n-    }\n-\n   if (!quiet_flag && !cfun)\n     fprintf (stderr, \" <%s>\", pass->name ? pass->name : \"\");\n "}, {"sha": "510b53ee41654c069e579d5a029b27b1d0541fe7", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70486010428fdaeabd875022fee05122e9866424/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70486010428fdaeabd875022fee05122e9866424/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=70486010428fdaeabd875022fee05122e9866424", "patch": "@@ -4338,7 +4338,7 @@ expand_call_inline (basic_block bb, gimple stmt, copy_body_data *id)\n       goto egress;\n     }\n   fn = cg_edge->callee->decl;\n-  cg_edge->callee->get_body ();\n+  cg_edge->callee->get_untransformed_body ();\n \n #ifdef ENABLE_CHECKING\n   if (cg_edge->callee->decl != id->dst_node->decl)"}, {"sha": "7157693e5d019b0c17725318631259c1ef74331c", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70486010428fdaeabd875022fee05122e9866424/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70486010428fdaeabd875022fee05122e9866424/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=70486010428fdaeabd875022fee05122e9866424", "patch": "@@ -7086,7 +7086,7 @@ ipa_pta_execute (void)\n       /* Nodes without a body are not interesting.  Especially do not\n          visit clones at this point for now - we get duplicate decls\n \t there for inline clones at least.  */\n-      if (!node->has_gimple_body_p () || node->clone_of)\n+      if (!node->has_gimple_body_p () || node->global.inlined_to)\n \tcontinue;\n       node->get_body ();\n "}]}