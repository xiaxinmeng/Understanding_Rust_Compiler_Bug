{"sha": "ca6c441841e8ca9d915dd771f111685dc2155d79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E2YzQ0MTg0MWU4Y2E5ZDkxNWRkNzcxZjExMTY4NWRjMjE1NWQ3OQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-11-10T17:48:15Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-11-10T17:48:15Z"}, "message": "* include/bits/cpp_type_traits.h: Fix typos.  Adjust formatting.\n\nFrom-SVN: r37373", "tree": {"sha": "556beed93ac51a5cc1d7600891461c166294817f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/556beed93ac51a5cc1d7600891461c166294817f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca6c441841e8ca9d915dd771f111685dc2155d79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca6c441841e8ca9d915dd771f111685dc2155d79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca6c441841e8ca9d915dd771f111685dc2155d79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca6c441841e8ca9d915dd771f111685dc2155d79/comments", "author": null, "committer": null, "parents": [{"sha": "982b8443e8886112b2e3743c6882e60ff0847785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/982b8443e8886112b2e3743c6882e60ff0847785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/982b8443e8886112b2e3743c6882e60ff0847785"}], "stats": {"total": 52, "additions": 25, "deletions": 27}, "files": [{"sha": "7f754db5dd03e9c5364952b9ef831b759c7fc756", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6c441841e8ca9d915dd771f111685dc2155d79/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6c441841e8ca9d915dd771f111685dc2155d79/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ca6c441841e8ca9d915dd771f111685dc2155d79", "patch": "@@ -1,3 +1,7 @@\n+2000-11-10  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* include/bits/cpp_type_traits.h: Fix typos.  Adjust formatting.\n+\n 2000-11-10  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* include/bits/localefwd.h (_Count_ones<>::_S_halfcount,"}, {"sha": "ae232ad095b3db21a2d339b72be6379bf9571dee", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6c441841e8ca9d915dd771f111685dc2155d79/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6c441841e8ca9d915dd771f111685dc2155d79/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=ca6c441841e8ca9d915dd771f111685dc2155d79", "patch": "@@ -34,47 +34,48 @@\n \n //\n // This file provides some compile-time information about various types.\n-// These informations were designed, on purpose, to be constant-expressions\n+// These representations were designed, on purpose, to be constant-expressions\n // and not types as found in <stl/bits/type_traits.h>.  In particular, they\n // can be used in control structures and the optimizer hopefully will do\n // the obvious thing.\n //\n // Why integral expressions, and not functions nor types?\n-// Firstly, these compile-time information entities are used as\n-// template-arguments so function return values won't work.  We\n-// need compile-time entities.  We're left with types and constant\n-// integral expressions.\n-// Secondly, from the point of view of ease of use type-based compile-time\n+// Firstly, these compile-time entities are used as template-arguments\n+// so function return values won't work:  We need compile-time entities.\n+// We're left with types and constant  integral expressions.\n+// Secondly, from the point of view of ease of use, type-based compile-time\n // information is -not- *that* convenient.  On has to write lots of\n // overloaded functions and to hope that the compiler will select the right\n // one. As a net effect, the overall structure isn't very clear at first\n // glance.\n-// Thirdly, partial ordering and overload resolution (of template functions)\n-// is very costly in terms of compiler-resource.  It is a Good Thing to\n+// Thirdly, partial ordering and overload resolution (of function templates)\n+// is highly costly in terms of compiler-resource.  It is a Good Thing to\n // keep these resource consumption as least as possible.\n //\n+// See valarray_array.h for a case use.\n+//\n // -- Gaby (dosreis@cmla.ens-cachan.fr) 2000-03-06.\n //\n \n-namespace std {\n-\n+namespace std\n+{\n   template<typename _Tp>\n-  struct __is_void\n-  {\n-    enum\n+    struct __is_void\n     {\n-      _M_type = 0\n+      enum\n+      {\n+        _M_type = 0\n+      };\n     };\n-  };\n \n   template<>\n-  struct __is_void<void>\n-  {\n-    enum\n+    struct __is_void<void>\n     {\n-      _M_type = 1\n+      enum\n+      {\n+        _M_type = 1\n+      };\n     };\n-  };\n \n   //\n   // Integer types\n@@ -292,10 +293,3 @@ namespace std {\n \n \n #endif //_CPP_BITS_CPP_TYPE_TRAITS_H\n-\n-\n-\n-\n-\n-\n-"}]}