{"sha": "aea86742ce3963750a6becb4b45d3dd2fa11ecc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVhODY3NDJjZTM5NjM3NTBhNmJlY2I0YjQ1ZDNkZDJmYTExZWNjNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-11-08T10:52:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-11-08T10:52:50Z"}, "message": "re PR middle-end/92384 (Empty class instances have different equal testing result among GCC versions)\n\n\tPR c++/92384\n\t* function.c (assign_parm_setup_block, assign_parm_setup_stack): Don't\n\tcopy TYPE_EMPTY_P arguments from data->entry_parm to data->stack_parm\n\tslot.\n\t(assign_parms): For TREE_ADDRESSABLE parms with TYPE_EMPTY_P type\n\tforce creation of a unique data.stack_parm slot.\n\n\t* g++.dg/torture/pr92384.C: New test.\n\nFrom-SVN: r277962", "tree": {"sha": "16216c7b938f360a23b5b8c14c508f3029da2f5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16216c7b938f360a23b5b8c14c508f3029da2f5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aea86742ce3963750a6becb4b45d3dd2fa11ecc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aea86742ce3963750a6becb4b45d3dd2fa11ecc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aea86742ce3963750a6becb4b45d3dd2fa11ecc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aea86742ce3963750a6becb4b45d3dd2fa11ecc4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8a4ce12d6681091b22baa8c0321c20f66213557", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8a4ce12d6681091b22baa8c0321c20f66213557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8a4ce12d6681091b22baa8c0321c20f66213557"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "3649706d319ef87604313bcb89eade0db217860c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea86742ce3963750a6becb4b45d3dd2fa11ecc4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea86742ce3963750a6becb4b45d3dd2fa11ecc4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aea86742ce3963750a6becb4b45d3dd2fa11ecc4", "patch": "@@ -1,3 +1,12 @@\n+2019-11-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/92384\n+\t* function.c (assign_parm_setup_block, assign_parm_setup_stack): Don't\n+\tcopy TYPE_EMPTY_P arguments from data->entry_parm to data->stack_parm\n+\tslot.\n+\t(assign_parms): For TREE_ADDRESSABLE parms with TYPE_EMPTY_P type\n+\tforce creation of a unique data.stack_parm slot.\n+\n 2019-11-08  Richard Biener  <rguenther@suse.de>\n \n \t* genmatch.c (expr::gen_transform): Use the resimplify"}, {"sha": "1fe956bd1a5382eeb93c885bac57c6867979ddde", "filename": "gcc/function.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea86742ce3963750a6becb4b45d3dd2fa11ecc4/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea86742ce3963750a6becb4b45d3dd2fa11ecc4/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=aea86742ce3963750a6becb4b45d3dd2fa11ecc4", "patch": "@@ -3087,7 +3087,7 @@ assign_parm_setup_block (struct assign_parm_data_all *all,\n \tmove_block_from_reg (REGNO (entry_parm), mem,\n \t\t\t     size_stored / UNITS_PER_WORD);\n     }\n-  else if (data->stack_parm == 0)\n+  else if (data->stack_parm == 0 && !TYPE_EMPTY_P (data->arg.type))\n     {\n       push_to_sequence2 (all->first_conversion_insn, all->last_conversion_insn);\n       emit_block_move (stack_parm, data->entry_parm, GEN_INT (size),\n@@ -3488,7 +3488,9 @@ assign_parm_setup_stack (struct assign_parm_data_all *all, tree parm,\n       dest = validize_mem (copy_rtx (data->stack_parm));\n       src = validize_mem (copy_rtx (data->entry_parm));\n \n-      if (MEM_P (src))\n+      if (TYPE_EMPTY_P (data->arg.type))\n+\t/* Empty types don't really need to be copied.  */;\n+      else if (MEM_P (src))\n \t{\n \t  /* Use a block move to handle potentially misaligned entry_parm.  */\n \t  if (!to_conversion)\n@@ -3643,6 +3645,16 @@ assign_parms (tree fndecl)\n \t{\n \t  assign_parm_find_stack_rtl (parm, &data);\n \t  assign_parm_adjust_entry_rtl (&data);\n+\t  /* For arguments that occupy no space in the parameter\n+\t     passing area, have non-zero size and have address taken,\n+\t     force creation of a stack slot so that they have distinct\n+\t     address from other parameters.  */\n+\t  if (TYPE_EMPTY_P (data.arg.type)\n+\t      && TREE_ADDRESSABLE (parm)\n+\t      && data.entry_parm == data.stack_parm\n+\t      && MEM_P (data.entry_parm)\n+\t      && int_size_in_bytes (data.arg.type))\n+\t    data.stack_parm = NULL_RTX;\n \t}\n       /* Record permanently how this parm was passed.  */\n       if (data.arg.pass_by_reference)"}, {"sha": "6e3027ff046f1e04953d5368517958522d56c3cf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea86742ce3963750a6becb4b45d3dd2fa11ecc4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea86742ce3963750a6becb4b45d3dd2fa11ecc4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aea86742ce3963750a6becb4b45d3dd2fa11ecc4", "patch": "@@ -1,3 +1,8 @@\n+2019-11-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/92384\n+\t* g++.dg/torture/pr92384.C: New test.\n+\n 2019-11-08  Martin Liska  <mliska@suse.cz>\n \n \t* g++.dg/pr92339.C: Rename identifiers to something"}, {"sha": "049a45a0154c43c12faa037fe75f0d0d6e2cdd04", "filename": "gcc/testsuite/g++.dg/torture/pr92384.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea86742ce3963750a6becb4b45d3dd2fa11ecc4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr92384.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea86742ce3963750a6becb4b45d3dd2fa11ecc4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr92384.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr92384.C?ref=aea86742ce3963750a6becb4b45d3dd2fa11ecc4", "patch": "@@ -0,0 +1,38 @@\n+// PR c++/92384\n+// { dg-do run }\n+\n+struct S {};\n+struct T : public S { S a, b, c, d, e, f, g, h, i, j, k, l, m; };\n+struct U { long long a, b, c; };\n+\n+U\n+foo (S, S, S, T, T, T, U g)\n+{\n+  return g;\n+}\n+\n+__attribute__((noipa)) bool\n+bar (S a, S b, S c, T d, T e, T f, U g, void **h)\n+{\n+  h[0] = (void *) &a;\n+  h[1] = (void *) &b;\n+  h[2] = (void *) &c;\n+  h[3] = (void *) &d;\n+  h[4] = (void *) &e;\n+  h[5] = (void *) &f;\n+  h[6] = (void *) &g;\n+  asm volatile (\"\" : : \"r\" (h) : \"memory\");\n+  return (h[0] != h[1] && h[1] != h[2] && h[2] != h[3]\n+\t  && h[3] != h[4] && h[4] != h[5] && h[5] != h[6]);\n+}\n+\n+int\n+main ()\n+{\n+  S a;\n+  T b;\n+  U c = { 1, 2, 3 };\n+  void *d[7];\n+  if (!bar (a, a, a, b, b, b, c, d))\n+    __builtin_abort ();\n+}"}]}