{"sha": "a51a76e59415f391ed277429cd1af023ef6e534c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUxYTc2ZTU5NDE1ZjM5MWVkMjc3NDI5Y2QxYWYwMjNlZjZlNTM0Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-06-21T07:01:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-06-21T07:01:34Z"}, "message": "re PR gcov-profile/81080 (target libgcov not built with large file support)\n\n2017-06-21  Richard Biener  <rguenther@suse.de>\n\n\tPR gcov-profile/81080\n\t* configure.ac: Add AC_SYS_LARGEFILE.\n\t* libgcov.h: Include auto-target.h before tsystem.h to pick\n\tup _FILE_OFFSET_BITS which might differ for multilibs.\n\t* config.in: Regenerate.\n\t* configure: Likewise.\n\nFrom-SVN: r249435", "tree": {"sha": "d7fa5d12f58d313edd0d0d3073238be3974fa5f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7fa5d12f58d313edd0d0d3073238be3974fa5f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a51a76e59415f391ed277429cd1af023ef6e534c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51a76e59415f391ed277429cd1af023ef6e534c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a51a76e59415f391ed277429cd1af023ef6e534c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51a76e59415f391ed277429cd1af023ef6e534c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e2bb0ed087b7e0a4c14f90968e84e59f55e2de12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2bb0ed087b7e0a4c14f90968e84e59f55e2de12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2bb0ed087b7e0a4c14f90968e84e59f55e2de12"}], "stats": {"total": 219, "additions": 219, "deletions": 0}, "files": [{"sha": "0fc1d60fb91dfd4ca31aa02689ad55da9a39bba9", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51a76e59415f391ed277429cd1af023ef6e534c/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51a76e59415f391ed277429cd1af023ef6e534c/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=a51a76e59415f391ed277429cd1af023ef6e534c", "patch": "@@ -1,3 +1,12 @@\n+2017-06-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR gcov-profile/81080\n+\t* configure.ac: Add AC_SYS_LARGEFILE.\n+\t* libgcov.h: Include auto-target.h before tsystem.h to pick\n+\tup _FILE_OFFSET_BITS which might differ for multilibs.\n+\t* config.in: Regenerate.\n+\t* configure: Likewise.\n+\n 2017-06-16  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/cmse_nonsecure_call.S: Explicitly set the FPU."}, {"sha": "7de22ee0a7250e9d7e5e3366b397787527dee812", "filename": "libgcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51a76e59415f391ed277429cd1af023ef6e534c/libgcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51a76e59415f391ed277429cd1af023ef6e534c/libgcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.in?ref=a51a76e59415f391ed277429cd1af023ef6e534c", "patch": "@@ -71,3 +71,9 @@\n \n /* Define to 1 if the target use emutls for thread-local storage. */\n #undef USE_EMUTLS\n+\n+/* Number of bits in a file offset, on hosts where this is settable. */\n+#undef _FILE_OFFSET_BITS\n+\n+/* Define for large files, on AIX-style hosts. */\n+#undef _LARGE_FILES"}, {"sha": "42dda7fbeec23f2f0e26c725f131118c3bb38777", "filename": "libgcc/configure", "status": "modified", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51a76e59415f391ed277429cd1af023ef6e534c/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51a76e59415f391ed277429cd1af023ef6e534c/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=a51a76e59415f391ed277429cd1af023ef6e534c", "patch": "@@ -672,6 +672,7 @@ enable_version_specific_runtime_libs\n with_slibdir\n enable_maintainer_mode\n with_build_libsubdir\n+enable_largefile\n enable_decimal_float\n with_system_libunwind\n enable_explicit_exception_frame_registration\n@@ -1308,6 +1309,7 @@ Optional Features:\n   --enable-maintainer-mode\n                           enable make rules and dependencies not useful (and\n                           sometimes confusing) to the casual installer\n+  --disable-largefile     omit support for large files\n   --enable-decimal-float={no,yes,bid,dpd}\n \t\t\tenable decimal float extension to C.  Selecting 'bid'\n \t\t\tor 'dpd' choses which decimal floating point format\n@@ -4061,6 +4063,205 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n ac_c_preproc_warn_flag=yes\n \n \n+# Check whether --enable-largefile was given.\n+if test \"${enable_largefile+set}\" = set; then :\n+  enableval=$enable_largefile;\n+fi\n+\n+if test \"$enable_largefile\" != no; then\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for special C compiler options needed for large files\" >&5\n+$as_echo_n \"checking for special C compiler options needed for large files... \" >&6; }\n+if test \"${ac_cv_sys_largefile_CC+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_cv_sys_largefile_CC=no\n+     if test \"$GCC\" != yes; then\n+       ac_save_CC=$CC\n+       while :; do\n+\t # IRIX 6.2 and later do not support large files by default,\n+\t # so use the C compiler's -n32 option if that helps.\n+\t cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <sys/types.h>\n+ /* Check that off_t can represent 2**63 - 1 correctly.\n+    We can't simply define LARGE_OFF_T to be 9223372036854775807,\n+    since some C++ compilers masquerading as C compilers\n+    incorrectly reject 9223372036854775807.  */\n+#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))\n+  int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721\n+\t\t       && LARGE_OFF_T % 2147483647 == 1)\n+\t\t      ? 1 : -1];\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+\t if ac_fn_c_try_compile \"$LINENO\"; then :\n+  break\n+fi\n+rm -f core conftest.err conftest.$ac_objext\n+\t CC=\"$CC -n32\"\n+\t if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_cv_sys_largefile_CC=' -n32'; break\n+fi\n+rm -f core conftest.err conftest.$ac_objext\n+\t break\n+       done\n+       CC=$ac_save_CC\n+       rm -f conftest.$ac_ext\n+    fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_sys_largefile_CC\" >&5\n+$as_echo \"$ac_cv_sys_largefile_CC\" >&6; }\n+  if test \"$ac_cv_sys_largefile_CC\" != no; then\n+    CC=$CC$ac_cv_sys_largefile_CC\n+  fi\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for _FILE_OFFSET_BITS value needed for large files\" >&5\n+$as_echo_n \"checking for _FILE_OFFSET_BITS value needed for large files... \" >&6; }\n+if test \"${ac_cv_sys_file_offset_bits+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  while :; do\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <sys/types.h>\n+ /* Check that off_t can represent 2**63 - 1 correctly.\n+    We can't simply define LARGE_OFF_T to be 9223372036854775807,\n+    since some C++ compilers masquerading as C compilers\n+    incorrectly reject 9223372036854775807.  */\n+#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))\n+  int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721\n+\t\t       && LARGE_OFF_T % 2147483647 == 1)\n+\t\t      ? 1 : -1];\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_cv_sys_file_offset_bits=no; break\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#define _FILE_OFFSET_BITS 64\n+#include <sys/types.h>\n+ /* Check that off_t can represent 2**63 - 1 correctly.\n+    We can't simply define LARGE_OFF_T to be 9223372036854775807,\n+    since some C++ compilers masquerading as C compilers\n+    incorrectly reject 9223372036854775807.  */\n+#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))\n+  int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721\n+\t\t       && LARGE_OFF_T % 2147483647 == 1)\n+\t\t      ? 1 : -1];\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_cv_sys_file_offset_bits=64; break\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  ac_cv_sys_file_offset_bits=unknown\n+  break\n+done\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_sys_file_offset_bits\" >&5\n+$as_echo \"$ac_cv_sys_file_offset_bits\" >&6; }\n+case $ac_cv_sys_file_offset_bits in #(\n+  no | unknown) ;;\n+  *)\n+cat >>confdefs.h <<_ACEOF\n+#define _FILE_OFFSET_BITS $ac_cv_sys_file_offset_bits\n+_ACEOF\n+;;\n+esac\n+rm -rf conftest*\n+  if test $ac_cv_sys_file_offset_bits = unknown; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for _LARGE_FILES value needed for large files\" >&5\n+$as_echo_n \"checking for _LARGE_FILES value needed for large files... \" >&6; }\n+if test \"${ac_cv_sys_large_files+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  while :; do\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <sys/types.h>\n+ /* Check that off_t can represent 2**63 - 1 correctly.\n+    We can't simply define LARGE_OFF_T to be 9223372036854775807,\n+    since some C++ compilers masquerading as C compilers\n+    incorrectly reject 9223372036854775807.  */\n+#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))\n+  int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721\n+\t\t       && LARGE_OFF_T % 2147483647 == 1)\n+\t\t      ? 1 : -1];\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_cv_sys_large_files=no; break\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#define _LARGE_FILES 1\n+#include <sys/types.h>\n+ /* Check that off_t can represent 2**63 - 1 correctly.\n+    We can't simply define LARGE_OFF_T to be 9223372036854775807,\n+    since some C++ compilers masquerading as C compilers\n+    incorrectly reject 9223372036854775807.  */\n+#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))\n+  int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721\n+\t\t       && LARGE_OFF_T % 2147483647 == 1)\n+\t\t      ? 1 : -1];\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_cv_sys_large_files=1; break\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  ac_cv_sys_large_files=unknown\n+  break\n+done\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_sys_large_files\" >&5\n+$as_echo \"$ac_cv_sys_large_files\" >&6; }\n+case $ac_cv_sys_large_files in #(\n+  no | unknown) ;;\n+  *)\n+cat >>confdefs.h <<_ACEOF\n+#define _LARGE_FILES $ac_cv_sys_large_files\n+_ACEOF\n+;;\n+esac\n+rm -rf conftest*\n+  fi\n+fi\n+\n+\n \n # The cast to long int works around a bug in the HP C Compiler\n # version HP92453-01 B.11.11.23709.GP, which incorrectly rejects"}, {"sha": "6bcaad651ffd7c84d91ae0e106c83900707aa36d", "filename": "libgcc/configure.ac", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51a76e59415f391ed277429cd1af023ef6e534c/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51a76e59415f391ed277429cd1af023ef6e534c/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=a51a76e59415f391ed277429cd1af023ef6e534c", "patch": "@@ -191,6 +191,8 @@ GCC_NO_EXECUTABLES\n AC_PROG_CC\n AC_PROG_CPP_WERROR\n \n+AC_SYS_LARGEFILE\n+\n AC_CHECK_SIZEOF([double])\n AC_CHECK_SIZEOF([long double])\n AS_VAR_ARITH([double_type_size], [$ac_cv_sizeof_double \\* 8])"}, {"sha": "eb5a9147bef4fd8ef35e58ecbb8cf8de12aa3295", "filename": "libgcc/libgcov.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51a76e59415f391ed277429cd1af023ef6e534c/libgcc%2Flibgcov.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51a76e59415f391ed277429cd1af023ef6e534c/libgcc%2Flibgcov.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov.h?ref=a51a76e59415f391ed277429cd1af023ef6e534c", "patch": "@@ -38,6 +38,7 @@\n /* This path will be used by libgcov runtime.  */\n \n #include \"tconfig.h\"\n+#include \"auto-target.h\"\n #include \"tsystem.h\"\n #include \"coretypes.h\"\n #include \"tm.h\""}]}