{"sha": "9e34db2e031f28f7cc622b6955c241b47bbc081e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUzNGRiMmUwMzFmMjhmN2NjNjIyYjY5NTVjMjQxYjQ3YmJjMDgxZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-07-11T14:39:14Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-07-11T14:39:14Z"}, "message": "Support running the selftests under valgrind\n\ngcc/ChangeLog:\n\t* Makefile.in (selftest-valgrind): New phony target.\n\t* function-tests.c (selftest::build_cfg): Delete pass instances\n\tcreated by the test.\n\t(selftest::convert_to_ssa): Likewise.\n\t(selftest::test_expansion_to_rtl): Likewise.\n\t* tree-cfg.c (selftest::test_linear_chain): Release dominator\n\tvectors.\n\t(selftest::test_diamond): Likewise.\n\nFrom-SVN: r238209", "tree": {"sha": "21b739dd274b2a95675872c3a30088a41bbab009", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21b739dd274b2a95675872c3a30088a41bbab009"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e34db2e031f28f7cc622b6955c241b47bbc081e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e34db2e031f28f7cc622b6955c241b47bbc081e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e34db2e031f28f7cc622b6955c241b47bbc081e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e34db2e031f28f7cc622b6955c241b47bbc081e/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f51606c71ab31d906d499108b1a2b8d8e45d9e06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f51606c71ab31d906d499108b1a2b8d8e45d9e06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f51606c71ab31d906d499108b1a2b8d8e45d9e06"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "1abee42bb9bd10d772a3e20b5059dedf9482dae9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e34db2e031f28f7cc622b6955c241b47bbc081e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e34db2e031f28f7cc622b6955c241b47bbc081e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e34db2e031f28f7cc622b6955c241b47bbc081e", "patch": "@@ -1,3 +1,14 @@\n+2016-07-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* Makefile.in (selftest-valgrind): New phony target.\n+\t* function-tests.c (selftest::build_cfg): Delete pass instances\n+\tcreated by the test.\n+\t(selftest::convert_to_ssa): Likewise.\n+\t(selftest::test_expansion_to_rtl): Likewise.\n+\t* tree-cfg.c (selftest::test_linear_chain): Release dominator\n+\tvectors.\n+\t(selftest::test_diamond): Likewise.\n+\n 2016-07-11  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/71816"}, {"sha": "1a4b5d7f476f54b543dabe77ccd574e04948ed2f", "filename": "gcc/Makefile.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e34db2e031f28f7cc622b6955c241b47bbc081e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e34db2e031f28f7cc622b6955c241b47bbc081e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=9e34db2e031f28f7cc622b6955c241b47bbc081e", "patch": "@@ -1869,6 +1869,12 @@ s-selftest: $(GCC_PASSES) cc1$(exeext) stmp-int-hdrs\n selftest-gdb: $(GCC_PASSES) cc1$(exeext) stmp-int-hdrs\n \t$(GCC_FOR_TARGET) -xc -S -c /dev/null -fself-test -wrapper gdb,--args\n \n+# Convenience method for running selftests under valgrind:\n+.PHONY: selftest-valgrind\n+selftest-valgrind: $(GCC_PASSES) cc1$(exeext) stmp-int-hdrs\n+\t$(GCC_FOR_TARGET) -xc -S -c /dev/null -fself-test \\\n+\t  -wrapper valgrind,--leak-check=full\n+\n # Recompile all the language-independent object files.\n # This is used only if the user explicitly asks for it.\n compilations: $(BACKEND)"}, {"sha": "edd355fa15338a23454af5d59ff37dba29ff44a0", "filename": "gcc/function-tests.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e34db2e031f28f7cc622b6955c241b47bbc081e/gcc%2Ffunction-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e34db2e031f28f7cc622b6955c241b47bbc081e/gcc%2Ffunction-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction-tests.c?ref=9e34db2e031f28f7cc622b6955c241b47bbc081e", "patch": "@@ -296,6 +296,7 @@ build_cfg (tree fndecl)\n   push_cfun (fun);\n   lower_cf_pass->execute (fun);\n   pop_cfun ();\n+  delete lower_cf_pass;\n \n   /* We can now convert to CFG form; for our trivial test function this\n      gives us:\n@@ -310,6 +311,7 @@ build_cfg (tree fndecl)\n   push_cfun (fun);\n   build_cfg_pass->execute (fun);\n   pop_cfun ();\n+  delete build_cfg_pass;\n }\n \n /* Convert a gimple+CFG function to SSA form.  */\n@@ -325,6 +327,7 @@ convert_to_ssa (tree fndecl)\n   push_cfun (fun);\n   build_ssa_pass->execute (fun);\n   pop_cfun ();\n+  delete build_ssa_pass;\n }\n \n /* Assuming we have a simple 3-block CFG like this:\n@@ -594,6 +597,7 @@ test_expansion_to_rtl ()\n   init_function_start (fndecl);\n   expand_pass->execute (fun);\n   pop_cfun ();\n+  delete expand_pass;\n \n   /* On x86_64, I get this:\n        (note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)"}, {"sha": "6d6943503fe911a7e43ae9ab86776cf7a23b4f2c", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e34db2e031f28f7cc622b6955c241b47bbc081e/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e34db2e031f28f7cc622b6955c241b47bbc081e/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=9e34db2e031f28f7cc622b6955c241b47bbc081e", "patch": "@@ -9276,6 +9276,7 @@ test_linear_chain ()\n   ASSERT_EQ (1, dom_by_b.length ());\n   ASSERT_EQ (bb_c, dom_by_b[0]);\n   free_dominance_info (CDI_DOMINATORS);\n+  dom_by_b.release ();\n \n   /* Similarly for post-dominance: each BB in our chain is post-dominated\n      by the one after it.  */\n@@ -9286,6 +9287,7 @@ test_linear_chain ()\n   ASSERT_EQ (1, postdom_by_b.length ());\n   ASSERT_EQ (bb_a, postdom_by_b[0]);\n   free_dominance_info (CDI_POST_DOMINATORS);\n+  postdom_by_b.release ();\n \n   pop_cfun ();\n }\n@@ -9346,8 +9348,10 @@ test_diamond ()\n   ASSERT_EQ (bb_a, get_immediate_dominator (CDI_DOMINATORS, bb_d));\n   vec<basic_block> dom_by_a = get_dominated_by (CDI_DOMINATORS, bb_a);\n   ASSERT_EQ (3, dom_by_a.length ()); /* B, C, D, in some order.  */\n+  dom_by_a.release ();\n   vec<basic_block> dom_by_b = get_dominated_by (CDI_DOMINATORS, bb_b);\n   ASSERT_EQ (0, dom_by_b.length ());\n+  dom_by_b.release ();\n   free_dominance_info (CDI_DOMINATORS);\n \n   /* Similarly for post-dominance.  */\n@@ -9357,8 +9361,10 @@ test_diamond ()\n   ASSERT_EQ (bb_d, get_immediate_dominator (CDI_POST_DOMINATORS, bb_c));\n   vec<basic_block> postdom_by_d = get_dominated_by (CDI_POST_DOMINATORS, bb_d);\n   ASSERT_EQ (3, postdom_by_d.length ()); /* A, B, C in some order.  */\n+  postdom_by_d.release ();\n   vec<basic_block> postdom_by_b = get_dominated_by (CDI_POST_DOMINATORS, bb_b);\n   ASSERT_EQ (0, postdom_by_b.length ());\n+  postdom_by_b.release ();\n   free_dominance_info (CDI_POST_DOMINATORS);\n \n   pop_cfun ();"}]}