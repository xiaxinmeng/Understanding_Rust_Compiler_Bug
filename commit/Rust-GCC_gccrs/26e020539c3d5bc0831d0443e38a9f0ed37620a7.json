{"sha": "26e020539c3d5bc0831d0443e38a9f0ed37620a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZlMDIwNTM5YzNkNWJjMDgzMWQwNDQzZTM4YTlmMGVkMzc2MjBhNw==", "commit": {"author": {"name": "Johannes Singler", "email": "singler@kit.edu", "date": "2010-03-30T14:50:56Z"}, "committer": {"name": "Johannes Singler", "email": "singler@gcc.gnu.org", "date": "2010-03-30T14:50:56Z"}, "message": "random_shuffle.h (__parallel_random_shuffle_drs): Take as many threads as possible, i.\n\n2010-03-30  Johannes Singler  <singler@kit.edu>\n\n        * include/parallel/random_shuffle.h\n        (__parallel_random_shuffle_drs) : Take as many threads as\n        possible, i. e. favor parallelism over cache efficiency.\n        Use own PRNG also for the 1 thread case.\n\nFrom-SVN: r157826", "tree": {"sha": "a4438b4b1a29693fbd4bfedff53479ce7bd8cc2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4438b4b1a29693fbd4bfedff53479ce7bd8cc2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26e020539c3d5bc0831d0443e38a9f0ed37620a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26e020539c3d5bc0831d0443e38a9f0ed37620a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26e020539c3d5bc0831d0443e38a9f0ed37620a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26e020539c3d5bc0831d0443e38a9f0ed37620a7/comments", "author": null, "committer": null, "parents": [{"sha": "a3e7e012bf455a184a521162aa9ec8856a1e3622", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3e7e012bf455a184a521162aa9ec8856a1e3622", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3e7e012bf455a184a521162aa9ec8856a1e3622"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "adf53ceac76c5fe2b71a6f75730c6013ca69a0b2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e020539c3d5bc0831d0443e38a9f0ed37620a7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e020539c3d5bc0831d0443e38a9f0ed37620a7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=26e020539c3d5bc0831d0443e38a9f0ed37620a7", "patch": "@@ -1,3 +1,10 @@\n+2010-03-30  Johannes Singler  <singler@kit.edu>\n+\n+        * include/parallel/random_shuffle.h\n+        (__parallel_random_shuffle_drs) : Take as many threads as\n+        possible, i. e. favor parallelism over cache efficiency.\n+        Use own PRNG also for the 1 thread case.\n+\n 2010-03-30  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/debug/unordered_map: Clean-up includes and guards."}, {"sha": "baad24d4f66451bcf9d4f9520577a04266a114c5", "filename": "libstdc++-v3/include/parallel/random_shuffle.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e020539c3d5bc0831d0443e38a9f0ed37620a7/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e020539c3d5bc0831d0443e38a9f0ed37620a7/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h?ref=26e020539c3d5bc0831d0443e38a9f0ed37620a7", "patch": "@@ -322,10 +322,16 @@ namespace __gnu_parallel\n \t}\n #endif\n \n-      __num_threads = std::min<_BinIndex>(__num_threads, __num_bins);\n+      __num_bins = __round_up_to_pow2(\n+                        std::max<_BinIndex>(__num_threads, __num_bins));\n \n       if (__num_threads <= 1)\n-\treturn __sequential_random_shuffle(__begin, __end, __rng);\n+      {\n+        _RandomNumber __derived_rng(\n+                            __rng(std::numeric_limits<uint32_t>::max()));\n+\t__sequential_random_shuffle(__begin, __end, __derived_rng);\n+        return;\n+      }\n \n       _DRandomShufflingGlobalData<_RAIter> __sd(__begin);\n       _DRSSorterPU<_RAIter, _RandomNumber >* __pus;"}]}