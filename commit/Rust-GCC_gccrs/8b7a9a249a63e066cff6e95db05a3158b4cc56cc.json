{"sha": "8b7a9a249a63e066cff6e95db05a3158b4cc56cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI3YTlhMjQ5YTYzZTA2NmNmZjZlOTVkYjA1YTMxNThiNGNjNTZjYw==", "commit": {"author": {"name": "Martin Uecker", "email": "muecker@gwdg.de", "date": "2020-11-06T23:48:33Z"}, "committer": {"name": "Martin Uecker", "email": "muecker@gwdg.de", "date": "2020-11-07T08:13:49Z"}, "message": "C Parser: Implement mixing of labels and code.\n\nImplement mixing of labels and code as adopted for C2X\nand process some std-attributes on labels.\n\n2020-11-06  Martin Uecker  <muecker@gwdg.de>\n\ngcc/\n\t* doc/extend.texi: Document mixing labels and code.\n\t* doc/invoke.texi: Likewise.\n\ngcc/c/\n\t* c-parser.c (c_parser_label): Implement mixing of labels and code.\n\t(c_parser_all_labels): Likewise.\n\ngcc/testsuite/\n\t* c-c++-common/attr-fallthrough-2.c: Update compiler flags.\n\t* c-c++-common/Wimplicit-fallthrough-20.c: Adapt test.\n\t* gcc.dg/20031223-1.c: Update compiler flags and adapt test.\n\t* gcc.dg/c11-labels-1.c: New test.\n\t* gcc.dg/c11-labels-2.c: New test.\n\t* gcc.dg/c11-labels-3.c: New test.\n\t* gcc.dg/c2x-attr-syntax-3.c: Adapt test.\n\t* gcc.dg/c2x-labels-1.c: New test.\n\t* gcc.dg/c2x-labels-2.c: New test.\n\t* gcc.dg/c2x-labels-3.c: New test.\n\t* gcc.dg/decl-9.c: Update compiler flags and add error.\n\t* gcc.dg/gomp/barrier-2.c: Update compiler flags and add warning.\n\t* gcc.dg/gomp/declare-simd-5.c: Update compiler flags and adapt test.\n\t* gcc.dg/gomp/declare-variant-2.c: Update compiler flags and add error.\n\t* gcc.dg/label-compound-stmt-1.c: Update compiler flags.\n\t* gcc.dg/parse-decl-after-label.c: Update compiler flags.", "tree": {"sha": "ed7e18eaa5f43740b7693c50928401d0a7c58fa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed7e18eaa5f43740b7693c50928401d0a7c58fa2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b7a9a249a63e066cff6e95db05a3158b4cc56cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b7a9a249a63e066cff6e95db05a3158b4cc56cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b7a9a249a63e066cff6e95db05a3158b4cc56cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/comments", "author": {"login": "uecker", "id": 2036635, "node_id": "MDQ6VXNlcjIwMzY2MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/2036635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uecker", "html_url": "https://github.com/uecker", "followers_url": "https://api.github.com/users/uecker/followers", "following_url": "https://api.github.com/users/uecker/following{/other_user}", "gists_url": "https://api.github.com/users/uecker/gists{/gist_id}", "starred_url": "https://api.github.com/users/uecker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uecker/subscriptions", "organizations_url": "https://api.github.com/users/uecker/orgs", "repos_url": "https://api.github.com/users/uecker/repos", "events_url": "https://api.github.com/users/uecker/events{/privacy}", "received_events_url": "https://api.github.com/users/uecker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "uecker", "id": 2036635, "node_id": "MDQ6VXNlcjIwMzY2MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/2036635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uecker", "html_url": "https://github.com/uecker", "followers_url": "https://api.github.com/users/uecker/followers", "following_url": "https://api.github.com/users/uecker/following{/other_user}", "gists_url": "https://api.github.com/users/uecker/gists{/gist_id}", "starred_url": "https://api.github.com/users/uecker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uecker/subscriptions", "organizations_url": "https://api.github.com/users/uecker/orgs", "repos_url": "https://api.github.com/users/uecker/repos", "events_url": "https://api.github.com/users/uecker/events{/privacy}", "received_events_url": "https://api.github.com/users/uecker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fc0f78c3f43af1967cb7b1ee8f4947f3b890aa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fc0f78c3f43af1967cb7b1ee8f4947f3b890aa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fc0f78c3f43af1967cb7b1ee8f4947f3b890aa2"}], "stats": {"total": 278, "additions": 188, "deletions": 90}, "files": [{"sha": "ecc3d2119fa9f351af5d14be620efd0a2657032b", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 37, "deletions": 68, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=8b7a9a249a63e066cff6e95db05a3158b4cc56cc", "patch": "@@ -1521,7 +1521,7 @@ static void c_parser_initval (c_parser *, struct c_expr *,\n \t\t\t      struct obstack *);\n static tree c_parser_compound_statement (c_parser *, location_t * = NULL);\n static location_t c_parser_compound_statement_nostart (c_parser *);\n-static void c_parser_label (c_parser *);\n+static void c_parser_label (c_parser *, tree);\n static void c_parser_statement (c_parser *, bool *, location_t * = NULL);\n static void c_parser_statement_after_labels (c_parser *, bool *,\n \t\t\t\t\t     vec<tree> * = NULL);\n@@ -5523,7 +5523,7 @@ c_parser_initval (c_parser *parser, struct c_expr *after,\n }\n \n /* Parse a compound statement (possibly a function body) (C90 6.6.2,\n-   C99 6.8.2, C11 6.8.2).\n+   C99 6.8.2, C11 6.8.2, C2X 6.8.2).\n \n    compound-statement:\n      { block-item-list[opt] }\n@@ -5534,6 +5534,7 @@ c_parser_initval (c_parser *parser, struct c_expr *after,\n      block-item-list block-item\n \n    block-item:\n+     label\n      nested-declaration\n      statement\n \n@@ -5674,7 +5675,7 @@ c_parser_compound_statement_nostart (c_parser *parser)\n     {\n       location_t loc = c_parser_peek_token (parser)->location;\n       loc = expansion_point_location_if_in_system_header (loc);\n-      /* Standard attributes may start a statement or a declaration.  */\n+      /* Standard attributes may start a label, statement or declaration.  */\n       bool have_std_attrs\n \t= c_parser_nth_token_starts_std_attributes (parser, 1);\n       tree std_attrs = NULL_TREE;\n@@ -5685,35 +5686,38 @@ c_parser_compound_statement_nostart (c_parser *parser)\n \t  || (c_parser_next_token_is (parser, CPP_NAME)\n \t      && c_parser_peek_2nd_token (parser)->type == CPP_COLON))\n \t{\n-\t  c_warn_unused_attributes (std_attrs);\n \t  if (c_parser_next_token_is_keyword (parser, RID_CASE))\n \t    label_loc = c_parser_peek_2nd_token (parser)->location;\n \t  else\n \t    label_loc = c_parser_peek_token (parser)->location;\n \t  last_label = true;\n \t  last_stmt = false;\n \t  mark_valid_location_for_stdc_pragma (false);\n-\t  c_parser_label (parser);\n+\t  c_parser_label (parser, std_attrs);\n \t}\n-      else if (!last_label\n-\t       && (c_parser_next_tokens_start_declaration (parser)\n-\t\t   || (have_std_attrs\n-\t\t       && c_parser_next_token_is (parser, CPP_SEMICOLON))))\n+      else if (c_parser_next_tokens_start_declaration (parser)\n+\t       || (have_std_attrs\n+\t\t   && c_parser_next_token_is (parser, CPP_SEMICOLON)))\n \t{\n-\t  last_label = false;\n+\t  if (last_label)\n+\t    pedwarn_c11 (c_parser_peek_token (parser)->location, OPT_Wpedantic,\n+\t\t\t \"a label can only be part of a statement and \"\n+\t\t\t \"a declaration is not a statement\");\n+\n \t  mark_valid_location_for_stdc_pragma (false);\n \t  bool fallthru_attr_p = false;\n \t  c_parser_declaration_or_fndef (parser, true, !have_std_attrs,\n \t\t\t\t\t true, true, true, NULL,\n \t\t\t\t\t vNULL, have_std_attrs, std_attrs,\n \t\t\t\t\t NULL, &fallthru_attr_p);\n+\n \t  if (last_stmt && !fallthru_attr_p)\n \t    pedwarn_c90 (loc, OPT_Wdeclaration_after_statement,\n \t\t\t \"ISO C90 forbids mixed declarations and code\");\n \t  last_stmt = fallthru_attr_p;\n+\t  last_label = false;\n \t}\n-      else if (!last_label\n-\t       && c_parser_next_token_is_keyword (parser, RID_EXTENSION))\n+      else if (c_parser_next_token_is_keyword (parser, RID_EXTENSION))\n \t{\n \t  /* __extension__ can start a declaration, but is also an\n \t     unary operator that can start an expression.  Consume all\n@@ -5796,7 +5800,7 @@ c_parser_compound_statement_nostart (c_parser *parser)\n       parser->error = false;\n     }\n   if (last_label)\n-    error_at (label_loc, \"label at end of compound statement\");\n+    pedwarn_c11 (label_loc, OPT_Wpedantic, \"label at end of compound statement\");\n   location_t endloc = c_parser_peek_token (parser)->location;\n   c_parser_consume_token (parser);\n   /* Restore the value we started with.  */\n@@ -5812,19 +5816,29 @@ c_parser_compound_statement_nostart (c_parser *parser)\n static void\n c_parser_all_labels (c_parser *parser)\n {\n+  tree std_attrs = NULL;\n   if (c_parser_nth_token_starts_std_attributes (parser, 1))\n     {\n-      tree std_attrs = c_parser_std_attribute_specifier_sequence (parser);\n+      std_attrs = c_parser_std_attribute_specifier_sequence (parser);\n       if (c_parser_next_token_is (parser, CPP_SEMICOLON))\n \tc_parser_error (parser, \"expected statement\");\n-      else\n-\tc_warn_unused_attributes (std_attrs);\n     }\n   while (c_parser_next_token_is_keyword (parser, RID_CASE)\n \t || c_parser_next_token_is_keyword (parser, RID_DEFAULT)\n \t || (c_parser_next_token_is (parser, CPP_NAME)\n \t     && c_parser_peek_2nd_token (parser)->type == CPP_COLON))\n-    c_parser_label (parser);\n+    {\n+      c_parser_label (parser, std_attrs);\n+      std_attrs = NULL;\n+      if (c_parser_nth_token_starts_std_attributes (parser, 1))\n+\t{\n+\t  std_attrs = c_parser_std_attribute_specifier_sequence (parser);\n+\t  if (c_parser_next_token_is (parser, CPP_SEMICOLON))\n+\t    c_parser_error (parser, \"expected statement\");\n+\t}\n+    }\n+   if (std_attrs)\n+     c_warn_unused_attributes (std_attrs);\n }\n \n /* Parse a label (C90 6.6.1, C99 6.8.1, C11 6.8.1).\n@@ -5846,9 +5860,8 @@ c_parser_all_labels (c_parser *parser)\n    in the caller, to distinguish statements from declarations.  Any\n    attribute-specifier-sequence after the label is parsed in this\n    function.  */\n-\n static void\n-c_parser_label (c_parser *parser)\n+c_parser_label (c_parser *parser, tree std_attrs)\n {\n   location_t loc1 = c_parser_peek_token (parser)->location;\n   tree label = NULL_TREE;\n@@ -5898,64 +5911,20 @@ c_parser_label (c_parser *parser)\n       if (tlab)\n \t{\n \t  decl_attributes (&tlab, attrs, 0);\n+\t  decl_attributes (&tlab, std_attrs, 0);\n \t  label = add_stmt (build_stmt (loc1, LABEL_EXPR, tlab));\n \t}\n+      if (attrs\n+\t  && c_parser_next_tokens_start_declaration (parser))\n+\t  warning_at (loc2, OPT_Wattributes, \"GNU-style attribute between\"\n+\t\t      \" label and declaration appertains to the label\");\n     }\n   if (label)\n     {\n       if (TREE_CODE (label) == LABEL_EXPR)\n \tFALLTHROUGH_LABEL_P (LABEL_EXPR_LABEL (label)) = fallthrough_p;\n       else\n \tFALLTHROUGH_LABEL_P (CASE_LABEL (label)) = fallthrough_p;\n-\n-      /* Standard attributes are only allowed here if they start a\n-\t statement, not a declaration (including the case of an\n-\t attribute-declaration with only attributes).  */\n-      bool have_std_attrs\n-\t= c_parser_nth_token_starts_std_attributes (parser, 1);\n-      tree std_attrs = NULL_TREE;\n-      if (have_std_attrs)\n-\tstd_attrs = c_parser_std_attribute_specifier_sequence (parser);\n-\n-      /* Allow '__attribute__((fallthrough));'.  */\n-      if (!have_std_attrs\n-\t  && c_parser_next_token_is_keyword (parser, RID_ATTRIBUTE))\n-\t{\n-\t  location_t loc = c_parser_peek_token (parser)->location;\n-\t  tree attrs = c_parser_gnu_attributes (parser);\n-\t  if (attribute_fallthrough_p (attrs))\n-\t    {\n-\t      if (c_parser_next_token_is (parser, CPP_SEMICOLON))\n-\t\t{\n-\t\t  tree fn = build_call_expr_internal_loc (loc,\n-\t\t\t\t\t\t\t  IFN_FALLTHROUGH,\n-\t\t\t\t\t\t\t  void_type_node, 0);\n-\t\t  add_stmt (fn);\n-\t\t}\n-\t      else\n-\t\twarning_at (loc, OPT_Wattributes, \"%<fallthrough%> attribute \"\n-\t\t\t    \"not followed by %<;%>\");\n-\t    }\n-\t  else if (attrs != NULL_TREE)\n-\t    warning_at (loc, OPT_Wattributes, \"only attribute %<fallthrough%>\"\n-\t\t\t\" can be applied to a null statement\");\n-\t}\n-      if (c_parser_next_tokens_start_declaration (parser)\n-\t  || (have_std_attrs\n-\t      && c_parser_next_token_is (parser, CPP_SEMICOLON)))\n-\t{\n-\t  error_at (c_parser_peek_token (parser)->location,\n-\t\t    \"a label can only be part of a statement and \"\n-\t\t    \"a declaration is not a statement\");\n-\t  c_parser_declaration_or_fndef (parser, /*fndef_ok*/ false,\n-\t\t\t\t\t /*static_assert_ok*/ true,\n-\t\t\t\t\t /*empty_ok*/ true, /*nested*/ true,\n-\t\t\t\t\t /*start_attr_ok*/ true, NULL,\n-\t\t\t\t\t vNULL, have_std_attrs, std_attrs);\n-\t}\n-      else if (std_attrs)\n-\t/* Nonempty attributes on the following statement are ignored.  */\n-\tc_warn_unused_attributes (std_attrs);\n     }\n }\n "}, {"sha": "5f1e3bf8a2e6a1b0f014548e831c6ed6196bac64", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=8b7a9a249a63e066cff6e95db05a3158b4cc56cc", "patch": "@@ -55,7 +55,7 @@ extensions, accepted by GCC in C90 mode and in C++.\n * Designated Inits::    Labeling elements of initializers.\n * Case Ranges::         `case 1 ... 9' and such.\n * Cast to Union::       Casting to union type from any member of the union.\n-* Mixed Declarations::  Mixing declarations and code.\n+* Mixed Labels and Declarations::  Mixing declarations, labels and code.\n * Function Attributes:: Declaring that functions have no side effects,\n                         or that they can never return.\n * Variable Attributes:: Specifying attributes of variables.\n@@ -2353,15 +2353,17 @@ void hack (union foo);\n hack ((union foo) x);\n @end smallexample\n \n-@node Mixed Declarations\n-@section Mixed Declarations and Code\n+@node Mixed Labels and Declarations\n+@section Mixed Declarations, Labels and Code\n @cindex mixed declarations and code\n @cindex declarations, mixed with code\n @cindex code, mixed with declarations\n \n ISO C99 and ISO C++ allow declarations and code to be freely mixed\n-within compound statements.  As an extension, GNU C also allows this in\n-C90 mode.  For example, you could do:\n+within compound statements.  ISO C2X allows labels to be\n+placed before declarations and at the end of a compound statement.\n+As an extension, GNU C also allows all this in C90 mode.  For example,\n+you could do:\n \n @smallexample\n int i;\n@@ -8630,7 +8632,8 @@ details of the exact syntax for using attributes.  Other attributes are\n available for functions (@pxref{Function Attributes}), variables \n (@pxref{Variable Attributes}), enumerators (@pxref{Enumerator Attributes}),\n statements (@pxref{Statement Attributes}), and for types\n-(@pxref{Type Attributes}).\n+(@pxref{Type Attributes}). A label attribute followed\n+by a declaration appertains to the label and not the declaration.\n \n This example uses the @code{cold} label attribute to indicate the \n @code{ErrorHandling} branch is unlikely to be taken and that the"}, {"sha": "d2a188d7c7566b3c8880bcd5a48f23b7bd507571", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8b7a9a249a63e066cff6e95db05a3158b4cc56cc", "patch": "@@ -7630,7 +7630,7 @@ except when the same as the default promotion.\n @opindex Wno-declaration-after-statement\n Warn when a declaration is found after a statement in a block.  This\n construct, known from C++, was introduced with ISO C99 and is by default\n-allowed in GCC@.  It is not supported by ISO C90.  @xref{Mixed Declarations}.\n+allowed in GCC@.  It is not supported by ISO C90.  @xref{Mixed Labels and Declarations}.\n \n @item -Wshadow\n @opindex Wshadow"}, {"sha": "810c331b19a4b7083467eaa1495854a5add7dd7e", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-20.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-20.c?ref=8b7a9a249a63e066cff6e95db05a3158b4cc56cc", "patch": "@@ -27,13 +27,13 @@ g (int i)\n   switch (i)\n     {\n     case -1:\n-      __attribute__((used)); /* { dg-warning \"ignored|only attribute\" } */\n+      __attribute__((used)); /* { dg-warning \"empty declaration\" } */\n     default:\n-      __attribute__((used)); /* { dg-warning \"ignored|only attribute\" } */\n+      __attribute__((used)); /* { dg-warning \"empty declaration\" } */\n     case 1:\n       return 6;\n     case 2 ... 4:\n-      __attribute__((used)); /* { dg-warning \"ignored|only attribute\" } */\n+      __attribute__((used)); /* { dg-warning \"empty declaration\" } */\n     case 5:\n       return 7;\n     }"}, {"sha": "be61d5e666698ecd3dfe9a70d6f1cf04ca7866fc", "filename": "gcc/testsuite/c-c++-common/attr-fallthrough-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-fallthrough-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-fallthrough-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-fallthrough-2.c?ref=8b7a9a249a63e066cff6e95db05a3158b4cc56cc", "patch": "@@ -1,6 +1,6 @@\n /* PR c/7652 */\n /* { dg-do compile } */\n-/* { dg-options \"-Wall -Wextra -Wpedantic -Wno-unused -Wno-implicit-fallthrough\" } */\n+/* { dg-options \"-Wall -Wextra -Wno-unused -Wno-implicit-fallthrough\" } */\n \n extern void bar (int);\n void"}, {"sha": "c529739e7ec046304f65b96105980e7bafbd1bdf", "filename": "gcc/testsuite/gcc.dg/20031223-1.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2F20031223-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2F20031223-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20031223-1.c?ref=8b7a9a249a63e066cff6e95db05a3158b4cc56cc", "patch": "@@ -3,11 +3,10 @@\n    because GCC was trying to expand the trees to rtl.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"\" } */\n+/* { dg-options \"-std=c17 -pedantic-errors\" } */\n \n void f ()\n {\n  l: int; /* { dg-error \"a label can only be part of a statement and a declaration is not a statement\" \"not stmt\" } */\n- /* { dg-warning \"useless type name in empty declaration\" \"type name\" { target *-*-* } .-1 } */\n- /* { dg-error \"label at end of compound statement\" \"label\" { target *-*-* } .-2 } */\n+ /* { dg-error \"useless type name in empty declaration\" \"type name\" { target *-*-* } .-1 } */\n }"}, {"sha": "6350403bf3880d03eb70bf41d9af0dbde7cd978a", "filename": "gcc/testsuite/gcc.dg/c11-labels-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-labels-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-labels-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-labels-1.c?ref=8b7a9a249a63e066cff6e95db05a3158b4cc56cc", "patch": "@@ -0,0 +1,15 @@\n+/* Tests for labels before declarations and at ends of compound statements.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11\" } */\n+\n+int f(int x) \n+{ \n+\tgoto b;\n+\ta: int i = 2 * x;\n+           goto c;\n+\tb: goto a;\n+\t{ i *= 3; c: }\n+\treturn i;\n+        d:\n+}\n+"}, {"sha": "e9b492446b5ff5aaf2a94a83fd0e258f2151c619", "filename": "gcc/testsuite/gcc.dg/c11-labels-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-labels-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-labels-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-labels-2.c?ref=8b7a9a249a63e066cff6e95db05a3158b4cc56cc", "patch": "@@ -0,0 +1,15 @@\n+/* Tests for labels before declarations and at ends of compound statements.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic\" } */\n+\n+int f(int x) \n+{ \n+\tgoto b;\n+\ta: int i = 2 * x; \t/* { dg-warning \"a label can only be part of a statement and a declaration is not a statement\" } */\n+           goto c;\n+\tb: goto a;\n+\t{ i *= 3; c: }\t\t/* { dg-warning \"label at end of compound statement\" } */\n+\treturn i;\n+        d:\t\t\t/* { dg-warning \"label at end of compound statement\" } */\n+}\n+"}, {"sha": "1e4be63af69d43834fefc5ee59366abfcb5a4631", "filename": "gcc/testsuite/gcc.dg/c11-labels-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-labels-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-labels-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-labels-3.c?ref=8b7a9a249a63e066cff6e95db05a3158b4cc56cc", "patch": "@@ -0,0 +1,15 @@\n+/* Tests for labels before declarations and at ends of compound statements.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+int f(int x) \n+{ \n+\tgoto b;\n+\ta: int i = 2 * x;\t/* { dg-error \"a label can only be part of a statement and a declaration is not a statement\" } */\n+           goto c;\n+\tb: goto a;\n+\t{ i *= 3; c: }\t\t/* { dg-error \"label at end of compound statement\" } */\n+\treturn i;\n+        d:\t\t\t/* { dg-error \"label at end of compound statement\" } */\n+}\n+"}, {"sha": "2f0d9f60cc00bb063ed473c5b4a421a4a5837048", "filename": "gcc/testsuite/gcc.dg/c2x-attr-syntax-3.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-syntax-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-syntax-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-attr-syntax-3.c?ref=8b7a9a249a63e066cff6e95db05a3158b4cc56cc", "patch": "@@ -25,13 +25,14 @@ f2 (void)\n }\n \n /* Declarations, including attribute declarations, cannot appear after\n-   labels.  */\n+   labels when a statement is expected.  */\n \n void\n f3 (void)\n {\n- x: [[]];; /* { dg-error \"can only be part of a statement\" } */\n-}\n+  if (1)\n+    x: [[]]; /* { dg-error \"expected\" } */\n+} \n \n /* Prefix attributes cannot appear on type names.  */\n "}, {"sha": "439cf7834eeba622ace8ed23374554a408d51e19", "filename": "gcc/testsuite/gcc.dg/c2x-labels-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-labels-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-labels-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-labels-1.c?ref=8b7a9a249a63e066cff6e95db05a3158b4cc56cc", "patch": "@@ -0,0 +1,23 @@\n+/* Tests for labels before declarations and at ends of compound statements.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+int f(int x) \n+{ \n+\tgoto b;\n+\ta: int i = 2 * x;\n+\taa: int u = 0; int v = 0;\n+           goto c;\n+\tb: goto a;\n+\t{ i *= 3; c: }\n+\treturn i + u + v;\n+        d:\n+}\n+\n+int main(void)\n+{\n+\tif (2 != f(1))\n+\t\t__builtin_abort();\n+\n+\treturn 0;\n+}"}, {"sha": "bd010e9ecfb9593166e735aeb7ea2d7aec88c912", "filename": "gcc/testsuite/gcc.dg/c2x-labels-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-labels-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-labels-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-labels-2.c?ref=8b7a9a249a63e066cff6e95db05a3158b4cc56cc", "patch": "@@ -0,0 +1,15 @@\n+/* Tests for labels before declarations and at ends of compound statements.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -Wc11-c2x-compat\" } */\n+\n+int f(int x) \n+{ \n+\tgoto b;\n+\ta: int i = 2 * x;\t/* { dg-warning \"a label can only be part of a statement and a declaration is not a statement\" } */\n+           goto c;\n+\tb: goto a;\n+\t{ i *= 3; c: }\t\t/* { dg-warning \"label at end of compound statement\" } */\n+\treturn i;\n+        d:\t\t\t/* { dg-warning \"label at end of compound statement\" } */\n+}\n+"}, {"sha": "159116db1863abce0a8215d80321b70559a3fb0f", "filename": "gcc/testsuite/gcc.dg/c2x-labels-3.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-labels-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-labels-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-labels-3.c?ref=8b7a9a249a63e066cff6e95db05a3158b4cc56cc", "patch": "@@ -0,0 +1,38 @@\n+/* Tests for labels before declarations and at ends of compound statements\n+ * in combination with attributes. */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -Wall\" } */\n+\n+int f(void) \n+{ \n+\tgoto b;\n+\ta: int i = 0;\n+\taa: __attribute__((unused)) int u = 0; int v = 0;\t/* { dg-warning \"GNU-style attribute between label and declaration appertains to the label\" } */\n+           goto c;\n+\t{ c: }\n+\tb: goto a;\n+\treturn i + u + v;\n+        d: __attribute__((unused)) (void)0;\n+        e: __attribute__((unused))\n+}\n+\n+int g(void) \n+{ \n+\tgoto b;\n+\ta: int i = 0;\n+\t[[maybe_unused]] aa: int u = 0; int v = 0;\n+           goto c;\n+\t{ c: }\n+\tb: goto a;\n+\treturn i + u + v;\n+        [[maybe_unused]] d: (void)0;\n+        [[maybe_unused]] e:\n+}\n+\n+void h(void)\n+{\n+\t[[maybe_unused]] a: [[maybe_unused]] b: [[maybe_unused]] int x;\n+\n+\tif (1)\n+\t\t[[maybe_unused]] c: [[maybe_unused]] d: (void)0;\n+}"}, {"sha": "9bb15609d836ab5eac491468102c96d49545580f", "filename": "gcc/testsuite/gcc.dg/decl-9.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-9.c?ref=8b7a9a249a63e066cff6e95db05a3158b4cc56cc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu89\" } */\n+/* { dg-options \"-std=gnu89 -pedantic-errors\" } */\n \n w *x; /* { dg-error \"unknown type name 'w'\" } */\n \n@@ -12,6 +12,7 @@ int f1()\n   int d, e;\n   d * e; /* { dg-bogus \"unknown type name 'd'\" } */\n   g * h; /* { dg-error \"unknown type name 'g'\" } */\n+  /* { dg-error \"mixed declarations\" \"\" { target *-*-* } .-1 } */\n   g i;   /* { dg-error \"unknown type name 'g'\" } */\n }\n "}, {"sha": "c0d62f572bba02f18c86547bcc028c515dc3ac0d", "filename": "gcc/testsuite/gcc.dg/gomp/barrier-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fbarrier-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fbarrier-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fbarrier-2.c?ref=8b7a9a249a63e066cff6e95db05a3158b4cc56cc", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile } */\n+/* { dg-options \"-Wall -std=c17 -fopenmp -pedantic-errors\" } */\n \n void f1(void)\n {\n@@ -16,6 +17,7 @@ void f1(void)\n void f2(void)\n {\n   label:       /* { dg-error \"label at end of compound statement\" } */\n+    /* { dg-warning \"defined but not used\" \"\" { target *-*-* } .-1 } */\n     #pragma omp barrier\t\t/* { dg-error \"may only be used in compound statements\" } */\n }\n "}, {"sha": "b9a4161c0c957ca9e8161b0a2c9910ed74097252", "filename": "gcc/testsuite/gcc.dg/gomp/declare-simd-5.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fdeclare-simd-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fdeclare-simd-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fdeclare-simd-5.c?ref=8b7a9a249a63e066cff6e95db05a3158b4cc56cc", "patch": "@@ -1,5 +1,6 @@\n /* Test parsing of #pragma omp declare simd */\n /* { dg-do compile } */\n+/* { dg-options \"-std=c17 -fopenmp -pedantic-errors\" } */\n \n int\n f1 (int x)\n@@ -14,7 +15,7 @@ f1 (int x)\n lab:\n     #pragma omp declare simd simdlen (8) aligned (b : 8 * sizeof (int))\n     extern int f5 (int a, int *b, int c);\t/* { dg-error \"must be followed by function declaration or definition\" } */\n-    x++;\t\t\t\t\t/* { dg-error \"expected expression before\" \"\" { target *-*-* } .-1 } */\n+    x++;\t\t\t\t\t/* { dg-error \"a label can only be part of a statement and a declaration is not a statement\" \"\" { target *-*-* } .-1 } */\n   }\n   return x;\n }"}, {"sha": "39c2c1d40ee11d086f94971d8350a00d93aeb06a", "filename": "gcc/testsuite/gcc.dg/gomp/declare-variant-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fdeclare-variant-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fdeclare-variant-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fdeclare-variant-2.c?ref=8b7a9a249a63e066cff6e95db05a3158b4cc56cc", "patch": "@@ -1,5 +1,6 @@\n /* Test parsing of #pragma omp declare variant */\n /* { dg-do compile } */\n+/* { dg-options \"-std=c17 -fopenmp -pedantic-errors\" } */\n \n int f0 (int, int *, int);\n \n@@ -16,7 +17,7 @@ f1 (int x)\n lab:\n     #pragma omp declare variant (fn0) match (user={condition(0)})\n     extern int f5 (int a, int *b, int c);\t/* { dg-error \"must be followed by function declaration or definition\" } */\n-    x++;\t\t\t\t\t/* { dg-error \"expected expression before\" \"\" { target *-*-* } .-1 } */\n+    x++;\t\t\t\t\t/* { dg-error \"a label can only be part of a statement and a declaration is not a statement\" \"\" { target *-*-* } .-1 } */\n   }\n   return x;\n }"}, {"sha": "2ae2b82ef1c8c8b7e2eab812a2f980893f71ef4a", "filename": "gcc/testsuite/gcc.dg/label-compound-stmt-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-compound-stmt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-compound-stmt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-compound-stmt-1.c?ref=8b7a9a249a63e066cff6e95db05a3158b4cc56cc", "patch": "@@ -1,7 +1,7 @@\n /* Test that labels at ends of compound statements are hard errors.  */\n /* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n /* { dg-do compile } */\n-/* { dg-options \"\" } */\n+/* { dg-options \"-std=c17 -pedantic-errors\" } */\n \n void f(void) { g: } /* { dg-bogus \"warning\" \"warning in place of error\" } */\n /* { dg-error \"label|parse|syntax\" \"label at end of compound statement\" { target *-*-* } .-1 } */"}, {"sha": "6e2a047eb2e3df0bfb0857218297443eb5128807", "filename": "gcc/testsuite/gcc.dg/parse-decl-after-label.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Fparse-decl-after-label.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a9a249a63e066cff6e95db05a3158b4cc56cc/gcc%2Ftestsuite%2Fgcc.dg%2Fparse-decl-after-label.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fparse-decl-after-label.c?ref=8b7a9a249a63e066cff6e95db05a3158b4cc56cc", "patch": "@@ -1,6 +1,6 @@\n /* PR 29062 \n { dg-do compile }\n-{ dg-options \"-fsyntax-only\" }\n+{ dg-options \"-std=c17 -pedantic-errors -fsyntax-only\" }\n */\n \n int f(int x)"}]}