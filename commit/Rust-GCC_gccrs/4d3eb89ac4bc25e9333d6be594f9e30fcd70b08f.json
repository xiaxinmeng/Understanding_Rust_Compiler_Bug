{"sha": "4d3eb89ac4bc25e9333d6be594f9e30fcd70b08f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQzZWI4OWFjNGJjMjVlOTMzM2Q2YmU1OTRmOWUzMGZjZDcwYjA4Zg==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2003-04-18T01:29:19Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2003-04-18T01:29:19Z"}, "message": "gcse.c (compute_ld_motion_mems): For MEM destinations...\n\n\t* gcse.c (compute_ld_motion_mems): For MEM destinations, only\n\tconsider those to be movable where the source matches\n\twant_to_gcse_p.\n\t(update_ld_motion_stores): In comment, refer to\n\tcompute_ld_motion_mems for validity of replacement.\n\nFrom-SVN: r65766", "tree": {"sha": "ba6dc32d068ba59b61380790c314c6c8efb852f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba6dc32d068ba59b61380790c314c6c8efb852f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d3eb89ac4bc25e9333d6be594f9e30fcd70b08f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d3eb89ac4bc25e9333d6be594f9e30fcd70b08f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d3eb89ac4bc25e9333d6be594f9e30fcd70b08f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d3eb89ac4bc25e9333d6be594f9e30fcd70b08f/comments", "author": null, "committer": null, "parents": [{"sha": "dc93be8dce94babcd3f159154e6bc773ef8bdf15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc93be8dce94babcd3f159154e6bc773ef8bdf15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc93be8dce94babcd3f159154e6bc773ef8bdf15"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "abbec33da066af879d601485eecbde693ecbc37a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3eb89ac4bc25e9333d6be594f9e30fcd70b08f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3eb89ac4bc25e9333d6be594f9e30fcd70b08f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d3eb89ac4bc25e9333d6be594f9e30fcd70b08f", "patch": "@@ -1,3 +1,11 @@\n+2003-04-18  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* gcse.c (compute_ld_motion_mems): For MEM destinations, only\n+\tconsider those to be movable where the source matches\n+\twant_to_gcse_p.\n+\t(update_ld_motion_stores): In comment, refer to\n+\tcompute_ld_motion_mems for validity of replacement.\n+\n Fri Apr 18 01:28:51 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* gcov-dump.c (tag_summary): Remove max_sum"}, {"sha": "528aaca9980b20aeead00468af21c1d34c9bde93", "filename": "gcc/gcse.c", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3eb89ac4bc25e9333d6be594f9e30fcd70b08f/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3eb89ac4bc25e9333d6be594f9e30fcd70b08f/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=4d3eb89ac4bc25e9333d6be594f9e30fcd70b08f", "patch": "@@ -6771,11 +6771,13 @@ invalidate_any_buried_refs (x)\n     }\n }\n \n-/* Find all the 'simple' MEMs which are used in LOADs and STORES. Simple\n-   being defined as MEM loads and stores to symbols, with no\n-   side effects and no registers in the expression. If there are any\n-   uses/defs which don't match this criteria, it is invalidated and\n-   trimmed out later.  */\n+/* Find all the 'simple' MEMs which are used in LOADs and STORES.  Simple\n+   being defined as MEM loads and stores to symbols, with no side effects\n+   and no registers in the expression.  For a MEM destination, we also\n+   check that the insn is still valid if we replace the destination with a\n+   REG, as is done in update_ld_motion_stores.  If there are any uses/defs\n+   which don't match this criteria, they are invalidated and trimmed out\n+   later.  */\n \n static void\n compute_ld_motion_mems ()\n@@ -6823,7 +6825,10 @@ compute_ld_motion_mems ()\n \t\t      ptr = ldst_entry (dest);\n \n \t\t      if (GET_CODE (src) != MEM\n-\t\t\t  && GET_CODE (src) != ASM_OPERANDS)\n+\t\t\t  && GET_CODE (src) != ASM_OPERANDS\n+\t\t\t  /* Check for REG manually since want_to_gcse_p\n+\t\t\t     returns 0 for all REGs.  */\n+\t\t\t  && (REG_P (src) || want_to_gcse_p (src)))\n \t\t\tptr->stores = alloc_INSN_LIST (insn, ptr->stores);\n \t\t      else\n \t\t\tptr->invalid = 1;\n@@ -6918,10 +6923,10 @@ update_ld_motion_stores (expr)\n \t matter to set the reaching reg everywhere...  some might be\n \t dead and should be eliminated later.  */\n \n-      /* We replace  SET mem = expr   with\n-\t   SET reg = expr\n-\t   SET mem = reg , where reg is the\n-\t   reaching reg used in the load.  */\n+      /* We replace (set mem expr) with (set reg expr) (set mem reg)\n+\t where reg is the reaching reg used in the load.  We checked in\n+\t compute_ld_motion_mems that we can replace (set mem expr) with\n+\t (set reg expr) in that insn.  */\n       rtx list = mem_ptr->stores;\n \n       for ( ; list != NULL_RTX; list = XEXP (list, 1))"}]}