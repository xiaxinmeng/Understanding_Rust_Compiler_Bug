{"sha": "45f366abae43ce0df9e3ef7eae7b8eee96f506ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVmMzY2YWJhZTQzY2UwZGY5ZTNlZjdlYWU3YjhlZWU5NmY1MDZhYg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-09-01T07:44:54Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-09-01T07:44:54Z"}, "message": "Makefile.tpl (sorry): Remove.\n\n2004-09-01  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* Makefile.tpl (sorry): Remove.\n\t(clean-stage[+id+], clean-stage[+id+]-module): New targets.\n\t(cleanstrap targets): Depend on distclean, not distclean-stage1.\n\t(do-clean): Clean per-stage directories too.\n\t(do-distclean): Run distclean-stage1 too.\n\t(.NOTPARALLEL): Enable during toplevel bootstrap.\n\t(stage[+id+]-bubble): Enable parallel execution during\n\tthe recursive invocation.\n\t* Makefile.in: Regenerate.\n\n\tFix previous checkin:\n\n\t* Makefile.tpl: Move BOOT_CFLAGS above host makefile fragment\n\tinclude.\n\t* configure.in: Fix indentation.\n\t* configure: Regenerate.\n\nFrom-SVN: r86878", "tree": {"sha": "516d65f5702a8e046b397b8e080665f08c76662a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/516d65f5702a8e046b397b8e080665f08c76662a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45f366abae43ce0df9e3ef7eae7b8eee96f506ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45f366abae43ce0df9e3ef7eae7b8eee96f506ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45f366abae43ce0df9e3ef7eae7b8eee96f506ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45f366abae43ce0df9e3ef7eae7b8eee96f506ab/comments", "author": null, "committer": null, "parents": [{"sha": "727c24076a2be2246189da357ad97b5ec8df8d9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/727c24076a2be2246189da357ad97b5ec8df8d9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/727c24076a2be2246189da357ad97b5ec8df8d9d"}], "stats": {"total": 1099, "additions": 1031, "deletions": 68}, "files": [{"sha": "67219a0243a9d23ff7261207448aa0a30f436314", "filename": "ChangeLog", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f366abae43ce0df9e3ef7eae7b8eee96f506ab/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f366abae43ce0df9e3ef7eae7b8eee96f506ab/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=45f366abae43ce0df9e3ef7eae7b8eee96f506ab", "patch": "@@ -1,10 +1,29 @@\n+2004-09-01  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* Makefile.tpl (sorry): Remove.\n+\t(clean-stage[+id+], clean-stage[+id+]-module): New targets.\n+\t(cleanstrap targets): Depend on distclean, not distclean-stage1.\n+\t(do-clean): Clean per-stage directories too.\n+\t(do-distclean): Run distclean-stage1 too.\n+\t(.NOTPARALLEL): Enable during toplevel bootstrap.\n+\t(stage[+id+]-bubble): Enable parallel execution during\n+\tthe recursive invocation.\n+\t* Makefile.in: Regenerate.\n+\n+\tFix previous checkin:\n+\n+\t* Makefile.tpl: Move BOOT_CFLAGS above host makefile fragment\n+\tinclude.\n+\t* configure.in: Fix indentation.\n+\t* configure: Regenerate.\n+\n 2004-08-31  Robert Bowdidge <bowdidge@apple.com>\n \n-       * Makefile.in: Move BOOT_CFLAGS above host makefile fragment include.\n-       * configure.in: add test for powerpc-*-darwin* to specify makefile frag\n-       * configure: regenerate\n-       * config/mh-ppc-darwin: create file, override BOOT_CFLAGS for \n-         -mdynamic-no-pic\n+\t* Makefile.in: Move BOOT_CFLAGS above host makefile fragment include.\n+\t* configure.in: add test for powerpc-*-darwin* to specify makefile frag\n+\t* configure: regenerate\n+\t* config/mh-ppc-darwin: create file, override BOOT_CFLAGS for \n+        -mdynamic-no-pic\n \n \n 2004-08-31  Paolo Bonzini  <bonzini@gnu.org>"}, {"sha": "be99c5bdfbc4d8785ade30ffb41952dd474a884c", "filename": "Makefile.in", "status": "modified", "additions": 969, "deletions": 45, "changes": 1014, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f366abae43ce0df9e3ef7eae7b8eee96f506ab/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f366abae43ce0df9e3ef7eae7b8eee96f506ab/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=45f366abae43ce0df9e3ef7eae7b8eee96f506ab", "patch": "@@ -245,6 +245,10 @@ CXX_FOR_BUILD = $(CXX)\n BUILD_PREFIX = @BUILD_PREFIX@\n BUILD_PREFIX_1 = @BUILD_PREFIX_1@\n \n+# Flags to pass to stage2 and later makes.  They are defined\n+# here so that they can be overridden by Makefile fragments.\n+BOOT_CFLAGS= -g -O2\n+\n CONFIGURED_BISON = @CONFIGURED_BISON@\n BISON = `if [ -f $$r/$(BUILD_SUBDIR)/bison/tests/bison ] ; then \\\n \t    echo $$r/$(BUILD_SUBDIR)/bison/tests/bison ; \\\n@@ -478,19 +482,6 @@ PICFLAG_FOR_TARGET =\n # Miscellaneous targets and flag lists\n # ------------------------------------\n \n-@if gcc-bootstrap\n-# Let's leave this as the first rule in the file until toplevel\n-# bootstrap is fleshed out completely.\n-sorry:\n-\t@echo Toplevel bootstrap temporarily out of commission.\n-\t@echo Please reconfigure without --enable-bootstrap\n-@endif gcc-bootstrap\n-\n-# Flags to pass to stage2 and later makes. -- define here so fragments can\n-# override them.\n-BOOT_CFLAGS= -g -O2\n-\n-\n # The first rule in the file had better be this one.  Don't put any above it.\n # This lives here to allow makefile fragments to contain dependencies.\n @default_target@:\n@@ -28190,7 +28181,9 @@ stage:\n # (both in a combined tree, or separately).  This however requires some\n # change to the gcc driver, again in order to avoid comparison failures.\n \n-# Bugs: This is almost certainly not parallel-make safe.\n+# Bugs: This is crippled when doing parallel make, the `make all-host'\n+# and `make all-target' phases can be parallelized.\n+\n \n # 'touch' doesn't work right on some platforms.\n STAMP = echo timestamp > \n@@ -28319,10 +28312,10 @@ stage1-bubble::\n \t@if test -f stage1-lean  ; then \\\n \t  echo Skipping rebuild of stage1 ; \\\n \telse \\\n-\t  $(MAKE) $(RECURSE_FLAGS_TO_PASS) all-stage1; \\\n+\t  $(MAKE) $(RECURSE_FLAGS_TO_PASS) NOTPARALLEL= all-stage1; \\\n \tfi\n \n-.PHONY: all-stage1\n+.PHONY: all-stage1 clean-stage1\n all-stage1:     \\\n   maybe-all-stage1-bfd \\\n   maybe-all-stage1-opcodes \\\n@@ -28336,12 +28329,28 @@ all-stage1:     \\\n   maybe-all-stage1-libiberty                        \\\n   maybe-all-stage1-zlib       \n \n+do-clean: clean-stage1\n+clean-stage1:     \\\n+  maybe-clean-stage1-bfd \\\n+  maybe-clean-stage1-opcodes \\\n+  maybe-clean-stage1-binutils             \\\n+  maybe-clean-stage1-gas \\\n+  maybe-clean-stage1-gcc        \\\n+  maybe-clean-stage1-intl   \\\n+  maybe-clean-stage1-ld \\\n+  maybe-clean-stage1-libcpp  \\\n+  maybe-clean-stage1-libbanshee \\\n+  maybe-clean-stage1-libiberty                        \\\n+  maybe-clean-stage1-zlib       \n+\n \n .PHONY: configure-stage1-bfd maybe-configure-stage1-bfd\n .PHONY: all-stage1-bfd maybe-all-stage1-bfd\n+.PHONY: clean-stage1-bfd maybe-clean-stage1-bfd\n \n maybe-configure-stage1-bfd:\n maybe-all-stage1-bfd:\n+maybe-clean-stage1-bfd:\n \n @if bfd-bootstrap\n maybe-configure-stage1-bfd: configure-stage1-bfd\n@@ -28377,13 +28386,25 @@ all-stage1-bfd: configure-stage1-bfd\n \tcd bfd && \\\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(STAGE1_CFLAGS)\" \n+\n+maybe-clean-stage1-bfd: clean-stage1-bfd\n+clean-stage1-bfd:\n+\t@[ -f bfd/Makefile ] || [ -f stage1-bfd/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f bfd/Makefile ] || $(MAKE) stage1-start ; \\\n+\tcd bfd && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(STAGE1_CFLAGS)\"  clean\n @endif bfd-bootstrap\n \n+\n .PHONY: configure-stage1-opcodes maybe-configure-stage1-opcodes\n .PHONY: all-stage1-opcodes maybe-all-stage1-opcodes\n+.PHONY: clean-stage1-opcodes maybe-clean-stage1-opcodes\n \n maybe-configure-stage1-opcodes:\n maybe-all-stage1-opcodes:\n+maybe-clean-stage1-opcodes:\n \n @if opcodes-bootstrap\n maybe-configure-stage1-opcodes: configure-stage1-opcodes\n@@ -28419,13 +28440,25 @@ all-stage1-opcodes: configure-stage1-opcodes\n \tcd opcodes && \\\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(STAGE1_CFLAGS)\" \n+\n+maybe-clean-stage1-opcodes: clean-stage1-opcodes\n+clean-stage1-opcodes:\n+\t@[ -f opcodes/Makefile ] || [ -f stage1-opcodes/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f opcodes/Makefile ] || $(MAKE) stage1-start ; \\\n+\tcd opcodes && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(STAGE1_CFLAGS)\"  clean\n @endif opcodes-bootstrap\n \n+\n .PHONY: configure-stage1-binutils maybe-configure-stage1-binutils\n .PHONY: all-stage1-binutils maybe-all-stage1-binutils\n+.PHONY: clean-stage1-binutils maybe-clean-stage1-binutils\n \n maybe-configure-stage1-binutils:\n maybe-all-stage1-binutils:\n+maybe-clean-stage1-binutils:\n \n @if binutils-bootstrap\n maybe-configure-stage1-binutils: configure-stage1-binutils\n@@ -28461,13 +28494,25 @@ all-stage1-binutils: configure-stage1-binutils\n \tcd binutils && \\\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(STAGE1_CFLAGS)\" \n+\n+maybe-clean-stage1-binutils: clean-stage1-binutils\n+clean-stage1-binutils:\n+\t@[ -f binutils/Makefile ] || [ -f stage1-binutils/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f binutils/Makefile ] || $(MAKE) stage1-start ; \\\n+\tcd binutils && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(STAGE1_CFLAGS)\"  clean\n @endif binutils-bootstrap\n \n+\n .PHONY: configure-stage1-gas maybe-configure-stage1-gas\n .PHONY: all-stage1-gas maybe-all-stage1-gas\n+.PHONY: clean-stage1-gas maybe-clean-stage1-gas\n \n maybe-configure-stage1-gas:\n maybe-all-stage1-gas:\n+maybe-clean-stage1-gas:\n \n @if gas-bootstrap\n maybe-configure-stage1-gas: configure-stage1-gas\n@@ -28503,13 +28548,25 @@ all-stage1-gas: configure-stage1-gas\n \tcd gas && \\\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(STAGE1_CFLAGS)\" \n+\n+maybe-clean-stage1-gas: clean-stage1-gas\n+clean-stage1-gas:\n+\t@[ -f gas/Makefile ] || [ -f stage1-gas/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f gas/Makefile ] || $(MAKE) stage1-start ; \\\n+\tcd gas && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(STAGE1_CFLAGS)\"  clean\n @endif gas-bootstrap\n \n+\n .PHONY: configure-stage1-gcc maybe-configure-stage1-gcc\n .PHONY: all-stage1-gcc maybe-all-stage1-gcc\n+.PHONY: clean-stage1-gcc maybe-clean-stage1-gcc\n \n maybe-configure-stage1-gcc:\n maybe-all-stage1-gcc:\n+maybe-clean-stage1-gcc:\n \n @if gcc-bootstrap\n maybe-configure-stage1-gcc: configure-stage1-gcc\n@@ -28545,13 +28602,25 @@ all-stage1-gcc: configure-stage1-gcc\n \tcd gcc && \\\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(STAGE1_CFLAGS)\" $(EXTRA_GCC_FLAGS)\n+\n+maybe-clean-stage1-gcc: clean-stage1-gcc\n+clean-stage1-gcc:\n+\t@[ -f gcc/Makefile ] || [ -f stage1-gcc/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f gcc/Makefile ] || $(MAKE) stage1-start ; \\\n+\tcd gcc && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(STAGE1_CFLAGS)\" $(EXTRA_GCC_FLAGS) clean\n @endif gcc-bootstrap\n \n+\n .PHONY: configure-stage1-intl maybe-configure-stage1-intl\n .PHONY: all-stage1-intl maybe-all-stage1-intl\n+.PHONY: clean-stage1-intl maybe-clean-stage1-intl\n \n maybe-configure-stage1-intl:\n maybe-all-stage1-intl:\n+maybe-clean-stage1-intl:\n \n @if intl-bootstrap\n maybe-configure-stage1-intl: configure-stage1-intl\n@@ -28587,13 +28656,25 @@ all-stage1-intl: configure-stage1-intl\n \tcd intl && \\\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(STAGE1_CFLAGS)\" \n+\n+maybe-clean-stage1-intl: clean-stage1-intl\n+clean-stage1-intl:\n+\t@[ -f intl/Makefile ] || [ -f stage1-intl/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f intl/Makefile ] || $(MAKE) stage1-start ; \\\n+\tcd intl && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(STAGE1_CFLAGS)\"  clean\n @endif intl-bootstrap\n \n+\n .PHONY: configure-stage1-ld maybe-configure-stage1-ld\n .PHONY: all-stage1-ld maybe-all-stage1-ld\n+.PHONY: clean-stage1-ld maybe-clean-stage1-ld\n \n maybe-configure-stage1-ld:\n maybe-all-stage1-ld:\n+maybe-clean-stage1-ld:\n \n @if ld-bootstrap\n maybe-configure-stage1-ld: configure-stage1-ld\n@@ -28629,13 +28710,25 @@ all-stage1-ld: configure-stage1-ld\n \tcd ld && \\\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(STAGE1_CFLAGS)\" \n+\n+maybe-clean-stage1-ld: clean-stage1-ld\n+clean-stage1-ld:\n+\t@[ -f ld/Makefile ] || [ -f stage1-ld/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f ld/Makefile ] || $(MAKE) stage1-start ; \\\n+\tcd ld && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(STAGE1_CFLAGS)\"  clean\n @endif ld-bootstrap\n \n+\n .PHONY: configure-stage1-libcpp maybe-configure-stage1-libcpp\n .PHONY: all-stage1-libcpp maybe-all-stage1-libcpp\n+.PHONY: clean-stage1-libcpp maybe-clean-stage1-libcpp\n \n maybe-configure-stage1-libcpp:\n maybe-all-stage1-libcpp:\n+maybe-clean-stage1-libcpp:\n \n @if libcpp-bootstrap\n maybe-configure-stage1-libcpp: configure-stage1-libcpp\n@@ -28671,13 +28764,25 @@ all-stage1-libcpp: configure-stage1-libcpp\n \tcd libcpp && \\\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(STAGE1_CFLAGS)\" \n+\n+maybe-clean-stage1-libcpp: clean-stage1-libcpp\n+clean-stage1-libcpp:\n+\t@[ -f libcpp/Makefile ] || [ -f stage1-libcpp/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f libcpp/Makefile ] || $(MAKE) stage1-start ; \\\n+\tcd libcpp && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(STAGE1_CFLAGS)\"  clean\n @endif libcpp-bootstrap\n \n+\n .PHONY: configure-stage1-libbanshee maybe-configure-stage1-libbanshee\n .PHONY: all-stage1-libbanshee maybe-all-stage1-libbanshee\n+.PHONY: clean-stage1-libbanshee maybe-clean-stage1-libbanshee\n \n maybe-configure-stage1-libbanshee:\n maybe-all-stage1-libbanshee:\n+maybe-clean-stage1-libbanshee:\n \n @if libbanshee-bootstrap\n maybe-configure-stage1-libbanshee: configure-stage1-libbanshee\n@@ -28713,13 +28818,25 @@ all-stage1-libbanshee: configure-stage1-libbanshee\n \tcd libbanshee && \\\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(STAGE1_CFLAGS)\" \n+\n+maybe-clean-stage1-libbanshee: clean-stage1-libbanshee\n+clean-stage1-libbanshee:\n+\t@[ -f libbanshee/Makefile ] || [ -f stage1-libbanshee/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f libbanshee/Makefile ] || $(MAKE) stage1-start ; \\\n+\tcd libbanshee && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(STAGE1_CFLAGS)\"  clean\n @endif libbanshee-bootstrap\n \n+\n .PHONY: configure-stage1-libiberty maybe-configure-stage1-libiberty\n .PHONY: all-stage1-libiberty maybe-all-stage1-libiberty\n+.PHONY: clean-stage1-libiberty maybe-clean-stage1-libiberty\n \n maybe-configure-stage1-libiberty:\n maybe-all-stage1-libiberty:\n+maybe-clean-stage1-libiberty:\n \n @if libiberty-bootstrap\n maybe-configure-stage1-libiberty: configure-stage1-libiberty\n@@ -28755,13 +28872,25 @@ all-stage1-libiberty: configure-stage1-libiberty\n \tcd libiberty && \\\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(STAGE1_CFLAGS)\" \n+\n+maybe-clean-stage1-libiberty: clean-stage1-libiberty\n+clean-stage1-libiberty:\n+\t@[ -f libiberty/Makefile ] || [ -f stage1-libiberty/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f libiberty/Makefile ] || $(MAKE) stage1-start ; \\\n+\tcd libiberty && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(STAGE1_CFLAGS)\"  clean\n @endif libiberty-bootstrap\n \n+\n .PHONY: configure-stage1-zlib maybe-configure-stage1-zlib\n .PHONY: all-stage1-zlib maybe-all-stage1-zlib\n+.PHONY: clean-stage1-zlib maybe-clean-stage1-zlib\n \n maybe-configure-stage1-zlib:\n maybe-all-stage1-zlib:\n+maybe-clean-stage1-zlib:\n \n @if zlib-bootstrap\n maybe-configure-stage1-zlib: configure-stage1-zlib\n@@ -28797,20 +28926,29 @@ all-stage1-zlib: configure-stage1-zlib\n \tcd zlib && \\\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(STAGE1_CFLAGS)\" \n+\n+maybe-clean-stage1-zlib: clean-stage1-zlib\n+clean-stage1-zlib:\n+\t@[ -f zlib/Makefile ] || [ -f stage1-zlib/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f zlib/Makefile ] || $(MAKE) stage1-start ; \\\n+\tcd zlib && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(STAGE1_CFLAGS)\"  clean\n @endif zlib-bootstrap\n \n \n+\n # FIXME: Will not need to be conditional when toplevel bootstrap is the\n # only possibility, but now it conflicts with no-bootstrap rules\n @if gcc-bootstrap\n \n \n \n \n-.PHONY: distclean-stage1\n-\n-# Rules to wipe a stage and all the following ones, used for cleanstrap\n+# Rules to wipe a stage and all the following ones, also used for cleanstrap\n \n+.PHONY: distclean-stage1\n distclean-stage1::\n \t[ -f stage_current ] && $(MAKE) `cat stage_current`-end || :\n \trm -rf stage1-* \n@@ -28936,10 +29074,10 @@ stage2-bubble:: stage1-bubble\n \t@if test -f stage2-lean || test -f stage1-lean  ; then \\\n \t  echo Skipping rebuild of stage2 ; \\\n \telse \\\n-\t  $(MAKE) $(RECURSE_FLAGS_TO_PASS) all-stage2; \\\n+\t  $(MAKE) $(RECURSE_FLAGS_TO_PASS) NOTPARALLEL= all-stage2; \\\n \tfi\n \n-.PHONY: all-stage2\n+.PHONY: all-stage2 clean-stage2\n all-stage2:     \\\n   maybe-all-stage2-bfd \\\n   maybe-all-stage2-opcodes \\\n@@ -28953,12 +29091,28 @@ all-stage2:     \\\n   maybe-all-stage2-libiberty                        \\\n   maybe-all-stage2-zlib       \n \n+do-clean: clean-stage2\n+clean-stage2:     \\\n+  maybe-clean-stage2-bfd \\\n+  maybe-clean-stage2-opcodes \\\n+  maybe-clean-stage2-binutils             \\\n+  maybe-clean-stage2-gas \\\n+  maybe-clean-stage2-gcc        \\\n+  maybe-clean-stage2-intl   \\\n+  maybe-clean-stage2-ld \\\n+  maybe-clean-stage2-libcpp  \\\n+  maybe-clean-stage2-libbanshee \\\n+  maybe-clean-stage2-libiberty                        \\\n+  maybe-clean-stage2-zlib       \n+\n \n .PHONY: configure-stage2-bfd maybe-configure-stage2-bfd\n .PHONY: all-stage2-bfd maybe-all-stage2-bfd\n+.PHONY: clean-stage2-bfd maybe-clean-stage2-bfd\n \n maybe-configure-stage2-bfd:\n maybe-all-stage2-bfd:\n+maybe-clean-stage2-bfd:\n \n @if bfd-bootstrap\n maybe-configure-stage2-bfd: configure-stage2-bfd\n@@ -28995,13 +29149,26 @@ all-stage2-bfd: configure-stage2-bfd\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage2-bfd: clean-stage2-bfd\n+clean-stage2-bfd:\n+\t@[ -f bfd/Makefile ] || [ -f stage2-bfd/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f bfd/Makefile ] || $(MAKE) stage2-start ; \\\n+\tcd bfd && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif bfd-bootstrap\n \n+\n .PHONY: configure-stage2-opcodes maybe-configure-stage2-opcodes\n .PHONY: all-stage2-opcodes maybe-all-stage2-opcodes\n+.PHONY: clean-stage2-opcodes maybe-clean-stage2-opcodes\n \n maybe-configure-stage2-opcodes:\n maybe-all-stage2-opcodes:\n+maybe-clean-stage2-opcodes:\n \n @if opcodes-bootstrap\n maybe-configure-stage2-opcodes: configure-stage2-opcodes\n@@ -29038,13 +29205,26 @@ all-stage2-opcodes: configure-stage2-opcodes\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage2-opcodes: clean-stage2-opcodes\n+clean-stage2-opcodes:\n+\t@[ -f opcodes/Makefile ] || [ -f stage2-opcodes/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f opcodes/Makefile ] || $(MAKE) stage2-start ; \\\n+\tcd opcodes && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif opcodes-bootstrap\n \n+\n .PHONY: configure-stage2-binutils maybe-configure-stage2-binutils\n .PHONY: all-stage2-binutils maybe-all-stage2-binutils\n+.PHONY: clean-stage2-binutils maybe-clean-stage2-binutils\n \n maybe-configure-stage2-binutils:\n maybe-all-stage2-binutils:\n+maybe-clean-stage2-binutils:\n \n @if binutils-bootstrap\n maybe-configure-stage2-binutils: configure-stage2-binutils\n@@ -29081,13 +29261,26 @@ all-stage2-binutils: configure-stage2-binutils\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage2-binutils: clean-stage2-binutils\n+clean-stage2-binutils:\n+\t@[ -f binutils/Makefile ] || [ -f stage2-binutils/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f binutils/Makefile ] || $(MAKE) stage2-start ; \\\n+\tcd binutils && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif binutils-bootstrap\n \n+\n .PHONY: configure-stage2-gas maybe-configure-stage2-gas\n .PHONY: all-stage2-gas maybe-all-stage2-gas\n+.PHONY: clean-stage2-gas maybe-clean-stage2-gas\n \n maybe-configure-stage2-gas:\n maybe-all-stage2-gas:\n+maybe-clean-stage2-gas:\n \n @if gas-bootstrap\n maybe-configure-stage2-gas: configure-stage2-gas\n@@ -29124,13 +29317,26 @@ all-stage2-gas: configure-stage2-gas\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage2-gas: clean-stage2-gas\n+clean-stage2-gas:\n+\t@[ -f gas/Makefile ] || [ -f stage2-gas/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f gas/Makefile ] || $(MAKE) stage2-start ; \\\n+\tcd gas && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif gas-bootstrap\n \n+\n .PHONY: configure-stage2-gcc maybe-configure-stage2-gcc\n .PHONY: all-stage2-gcc maybe-all-stage2-gcc\n+.PHONY: clean-stage2-gcc maybe-clean-stage2-gcc\n \n maybe-configure-stage2-gcc:\n maybe-all-stage2-gcc:\n+maybe-clean-stage2-gcc:\n \n @if gcc-bootstrap\n maybe-configure-stage2-gcc: configure-stage2-gcc\n@@ -29167,13 +29373,26 @@ all-stage2-gcc: configure-stage2-gcc\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t $(EXTRA_GCC_FLAGS)\n+\n+maybe-clean-stage2-gcc: clean-stage2-gcc\n+clean-stage2-gcc:\n+\t@[ -f gcc/Makefile ] || [ -f stage2-gcc/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f gcc/Makefile ] || $(MAKE) stage2-start ; \\\n+\tcd gcc && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t $(EXTRA_GCC_FLAGS) clean\n @endif gcc-bootstrap\n \n+\n .PHONY: configure-stage2-intl maybe-configure-stage2-intl\n .PHONY: all-stage2-intl maybe-all-stage2-intl\n+.PHONY: clean-stage2-intl maybe-clean-stage2-intl\n \n maybe-configure-stage2-intl:\n maybe-all-stage2-intl:\n+maybe-clean-stage2-intl:\n \n @if intl-bootstrap\n maybe-configure-stage2-intl: configure-stage2-intl\n@@ -29210,13 +29429,26 @@ all-stage2-intl: configure-stage2-intl\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage2-intl: clean-stage2-intl\n+clean-stage2-intl:\n+\t@[ -f intl/Makefile ] || [ -f stage2-intl/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f intl/Makefile ] || $(MAKE) stage2-start ; \\\n+\tcd intl && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif intl-bootstrap\n \n+\n .PHONY: configure-stage2-ld maybe-configure-stage2-ld\n .PHONY: all-stage2-ld maybe-all-stage2-ld\n+.PHONY: clean-stage2-ld maybe-clean-stage2-ld\n \n maybe-configure-stage2-ld:\n maybe-all-stage2-ld:\n+maybe-clean-stage2-ld:\n \n @if ld-bootstrap\n maybe-configure-stage2-ld: configure-stage2-ld\n@@ -29253,13 +29485,26 @@ all-stage2-ld: configure-stage2-ld\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage2-ld: clean-stage2-ld\n+clean-stage2-ld:\n+\t@[ -f ld/Makefile ] || [ -f stage2-ld/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f ld/Makefile ] || $(MAKE) stage2-start ; \\\n+\tcd ld && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif ld-bootstrap\n \n+\n .PHONY: configure-stage2-libcpp maybe-configure-stage2-libcpp\n .PHONY: all-stage2-libcpp maybe-all-stage2-libcpp\n+.PHONY: clean-stage2-libcpp maybe-clean-stage2-libcpp\n \n maybe-configure-stage2-libcpp:\n maybe-all-stage2-libcpp:\n+maybe-clean-stage2-libcpp:\n \n @if libcpp-bootstrap\n maybe-configure-stage2-libcpp: configure-stage2-libcpp\n@@ -29296,13 +29541,26 @@ all-stage2-libcpp: configure-stage2-libcpp\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage2-libcpp: clean-stage2-libcpp\n+clean-stage2-libcpp:\n+\t@[ -f libcpp/Makefile ] || [ -f stage2-libcpp/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f libcpp/Makefile ] || $(MAKE) stage2-start ; \\\n+\tcd libcpp && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif libcpp-bootstrap\n \n+\n .PHONY: configure-stage2-libbanshee maybe-configure-stage2-libbanshee\n .PHONY: all-stage2-libbanshee maybe-all-stage2-libbanshee\n+.PHONY: clean-stage2-libbanshee maybe-clean-stage2-libbanshee\n \n maybe-configure-stage2-libbanshee:\n maybe-all-stage2-libbanshee:\n+maybe-clean-stage2-libbanshee:\n \n @if libbanshee-bootstrap\n maybe-configure-stage2-libbanshee: configure-stage2-libbanshee\n@@ -29339,13 +29597,26 @@ all-stage2-libbanshee: configure-stage2-libbanshee\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage2-libbanshee: clean-stage2-libbanshee\n+clean-stage2-libbanshee:\n+\t@[ -f libbanshee/Makefile ] || [ -f stage2-libbanshee/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f libbanshee/Makefile ] || $(MAKE) stage2-start ; \\\n+\tcd libbanshee && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif libbanshee-bootstrap\n \n+\n .PHONY: configure-stage2-libiberty maybe-configure-stage2-libiberty\n .PHONY: all-stage2-libiberty maybe-all-stage2-libiberty\n+.PHONY: clean-stage2-libiberty maybe-clean-stage2-libiberty\n \n maybe-configure-stage2-libiberty:\n maybe-all-stage2-libiberty:\n+maybe-clean-stage2-libiberty:\n \n @if libiberty-bootstrap\n maybe-configure-stage2-libiberty: configure-stage2-libiberty\n@@ -29382,13 +29653,26 @@ all-stage2-libiberty: configure-stage2-libiberty\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage2-libiberty: clean-stage2-libiberty\n+clean-stage2-libiberty:\n+\t@[ -f libiberty/Makefile ] || [ -f stage2-libiberty/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f libiberty/Makefile ] || $(MAKE) stage2-start ; \\\n+\tcd libiberty && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif libiberty-bootstrap\n \n+\n .PHONY: configure-stage2-zlib maybe-configure-stage2-zlib\n .PHONY: all-stage2-zlib maybe-all-stage2-zlib\n+.PHONY: clean-stage2-zlib maybe-clean-stage2-zlib\n \n maybe-configure-stage2-zlib:\n maybe-all-stage2-zlib:\n+maybe-clean-stage2-zlib:\n \n @if zlib-bootstrap\n maybe-configure-stage2-zlib: configure-stage2-zlib\n@@ -29425,9 +29709,20 @@ all-stage2-zlib: configure-stage2-zlib\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage2-zlib: clean-stage2-zlib\n+clean-stage2-zlib:\n+\t@[ -f zlib/Makefile ] || [ -f stage2-zlib/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f zlib/Makefile ] || $(MAKE) stage2-start ; \\\n+\tcd zlib && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif zlib-bootstrap\n \n \n+\n # FIXME: Will not need to be conditional when toplevel bootstrap is the\n # only possibility, but now it conflicts with no-bootstrap rules\n @if gcc-bootstrap\n@@ -29438,10 +29733,9 @@ all-stage2-zlib: configure-stage2-zlib\n bootstrap2: stage2-bubble  all\n \n \n-.PHONY: distclean-stage2\n-\n-# Rules to wipe a stage and all the following ones, used for cleanstrap\n+# Rules to wipe a stage and all the following ones, also used for cleanstrap\n distclean-stage1:: distclean-stage2 \n+.PHONY: distclean-stage2\n distclean-stage2::\n \t[ -f stage_current ] && $(MAKE) `cat stage_current`-end || :\n \trm -rf stage2-* \n@@ -29568,10 +29862,10 @@ stage3-bubble:: stage2-bubble\n \t@if test -f stage3-lean || test -f stage2-lean  ; then \\\n \t  echo Skipping rebuild of stage3 ; \\\n \telse \\\n-\t  $(MAKE) $(RECURSE_FLAGS_TO_PASS) all-stage3; \\\n+\t  $(MAKE) $(RECURSE_FLAGS_TO_PASS) NOTPARALLEL= all-stage3; \\\n \tfi\n \n-.PHONY: all-stage3\n+.PHONY: all-stage3 clean-stage3\n all-stage3:     \\\n   maybe-all-stage3-bfd \\\n   maybe-all-stage3-opcodes \\\n@@ -29585,12 +29879,28 @@ all-stage3:     \\\n   maybe-all-stage3-libiberty                        \\\n   maybe-all-stage3-zlib       \n \n+do-clean: clean-stage3\n+clean-stage3:     \\\n+  maybe-clean-stage3-bfd \\\n+  maybe-clean-stage3-opcodes \\\n+  maybe-clean-stage3-binutils             \\\n+  maybe-clean-stage3-gas \\\n+  maybe-clean-stage3-gcc        \\\n+  maybe-clean-stage3-intl   \\\n+  maybe-clean-stage3-ld \\\n+  maybe-clean-stage3-libcpp  \\\n+  maybe-clean-stage3-libbanshee \\\n+  maybe-clean-stage3-libiberty                        \\\n+  maybe-clean-stage3-zlib       \n+\n \n .PHONY: configure-stage3-bfd maybe-configure-stage3-bfd\n .PHONY: all-stage3-bfd maybe-all-stage3-bfd\n+.PHONY: clean-stage3-bfd maybe-clean-stage3-bfd\n \n maybe-configure-stage3-bfd:\n maybe-all-stage3-bfd:\n+maybe-clean-stage3-bfd:\n \n @if bfd-bootstrap\n maybe-configure-stage3-bfd: configure-stage3-bfd\n@@ -29627,13 +29937,26 @@ all-stage3-bfd: configure-stage3-bfd\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage3-bfd: clean-stage3-bfd\n+clean-stage3-bfd:\n+\t@[ -f bfd/Makefile ] || [ -f stage3-bfd/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f bfd/Makefile ] || $(MAKE) stage3-start ; \\\n+\tcd bfd && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif bfd-bootstrap\n \n+\n .PHONY: configure-stage3-opcodes maybe-configure-stage3-opcodes\n .PHONY: all-stage3-opcodes maybe-all-stage3-opcodes\n+.PHONY: clean-stage3-opcodes maybe-clean-stage3-opcodes\n \n maybe-configure-stage3-opcodes:\n maybe-all-stage3-opcodes:\n+maybe-clean-stage3-opcodes:\n \n @if opcodes-bootstrap\n maybe-configure-stage3-opcodes: configure-stage3-opcodes\n@@ -29670,13 +29993,26 @@ all-stage3-opcodes: configure-stage3-opcodes\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage3-opcodes: clean-stage3-opcodes\n+clean-stage3-opcodes:\n+\t@[ -f opcodes/Makefile ] || [ -f stage3-opcodes/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f opcodes/Makefile ] || $(MAKE) stage3-start ; \\\n+\tcd opcodes && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif opcodes-bootstrap\n \n+\n .PHONY: configure-stage3-binutils maybe-configure-stage3-binutils\n .PHONY: all-stage3-binutils maybe-all-stage3-binutils\n+.PHONY: clean-stage3-binutils maybe-clean-stage3-binutils\n \n maybe-configure-stage3-binutils:\n maybe-all-stage3-binutils:\n+maybe-clean-stage3-binutils:\n \n @if binutils-bootstrap\n maybe-configure-stage3-binutils: configure-stage3-binutils\n@@ -29713,13 +30049,26 @@ all-stage3-binutils: configure-stage3-binutils\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage3-binutils: clean-stage3-binutils\n+clean-stage3-binutils:\n+\t@[ -f binutils/Makefile ] || [ -f stage3-binutils/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f binutils/Makefile ] || $(MAKE) stage3-start ; \\\n+\tcd binutils && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif binutils-bootstrap\n \n+\n .PHONY: configure-stage3-gas maybe-configure-stage3-gas\n .PHONY: all-stage3-gas maybe-all-stage3-gas\n+.PHONY: clean-stage3-gas maybe-clean-stage3-gas\n \n maybe-configure-stage3-gas:\n maybe-all-stage3-gas:\n+maybe-clean-stage3-gas:\n \n @if gas-bootstrap\n maybe-configure-stage3-gas: configure-stage3-gas\n@@ -29756,13 +30105,26 @@ all-stage3-gas: configure-stage3-gas\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage3-gas: clean-stage3-gas\n+clean-stage3-gas:\n+\t@[ -f gas/Makefile ] || [ -f stage3-gas/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f gas/Makefile ] || $(MAKE) stage3-start ; \\\n+\tcd gas && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif gas-bootstrap\n \n+\n .PHONY: configure-stage3-gcc maybe-configure-stage3-gcc\n .PHONY: all-stage3-gcc maybe-all-stage3-gcc\n+.PHONY: clean-stage3-gcc maybe-clean-stage3-gcc\n \n maybe-configure-stage3-gcc:\n maybe-all-stage3-gcc:\n+maybe-clean-stage3-gcc:\n \n @if gcc-bootstrap\n maybe-configure-stage3-gcc: configure-stage3-gcc\n@@ -29799,13 +30161,26 @@ all-stage3-gcc: configure-stage3-gcc\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t $(EXTRA_GCC_FLAGS)\n+\n+maybe-clean-stage3-gcc: clean-stage3-gcc\n+clean-stage3-gcc:\n+\t@[ -f gcc/Makefile ] || [ -f stage3-gcc/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f gcc/Makefile ] || $(MAKE) stage3-start ; \\\n+\tcd gcc && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t $(EXTRA_GCC_FLAGS) clean\n @endif gcc-bootstrap\n \n+\n .PHONY: configure-stage3-intl maybe-configure-stage3-intl\n .PHONY: all-stage3-intl maybe-all-stage3-intl\n+.PHONY: clean-stage3-intl maybe-clean-stage3-intl\n \n maybe-configure-stage3-intl:\n maybe-all-stage3-intl:\n+maybe-clean-stage3-intl:\n \n @if intl-bootstrap\n maybe-configure-stage3-intl: configure-stage3-intl\n@@ -29842,13 +30217,26 @@ all-stage3-intl: configure-stage3-intl\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage3-intl: clean-stage3-intl\n+clean-stage3-intl:\n+\t@[ -f intl/Makefile ] || [ -f stage3-intl/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f intl/Makefile ] || $(MAKE) stage3-start ; \\\n+\tcd intl && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif intl-bootstrap\n \n+\n .PHONY: configure-stage3-ld maybe-configure-stage3-ld\n .PHONY: all-stage3-ld maybe-all-stage3-ld\n+.PHONY: clean-stage3-ld maybe-clean-stage3-ld\n \n maybe-configure-stage3-ld:\n maybe-all-stage3-ld:\n+maybe-clean-stage3-ld:\n \n @if ld-bootstrap\n maybe-configure-stage3-ld: configure-stage3-ld\n@@ -29885,13 +30273,26 @@ all-stage3-ld: configure-stage3-ld\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage3-ld: clean-stage3-ld\n+clean-stage3-ld:\n+\t@[ -f ld/Makefile ] || [ -f stage3-ld/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f ld/Makefile ] || $(MAKE) stage3-start ; \\\n+\tcd ld && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif ld-bootstrap\n \n+\n .PHONY: configure-stage3-libcpp maybe-configure-stage3-libcpp\n .PHONY: all-stage3-libcpp maybe-all-stage3-libcpp\n+.PHONY: clean-stage3-libcpp maybe-clean-stage3-libcpp\n \n maybe-configure-stage3-libcpp:\n maybe-all-stage3-libcpp:\n+maybe-clean-stage3-libcpp:\n \n @if libcpp-bootstrap\n maybe-configure-stage3-libcpp: configure-stage3-libcpp\n@@ -29928,13 +30329,26 @@ all-stage3-libcpp: configure-stage3-libcpp\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage3-libcpp: clean-stage3-libcpp\n+clean-stage3-libcpp:\n+\t@[ -f libcpp/Makefile ] || [ -f stage3-libcpp/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f libcpp/Makefile ] || $(MAKE) stage3-start ; \\\n+\tcd libcpp && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif libcpp-bootstrap\n \n+\n .PHONY: configure-stage3-libbanshee maybe-configure-stage3-libbanshee\n .PHONY: all-stage3-libbanshee maybe-all-stage3-libbanshee\n+.PHONY: clean-stage3-libbanshee maybe-clean-stage3-libbanshee\n \n maybe-configure-stage3-libbanshee:\n maybe-all-stage3-libbanshee:\n+maybe-clean-stage3-libbanshee:\n \n @if libbanshee-bootstrap\n maybe-configure-stage3-libbanshee: configure-stage3-libbanshee\n@@ -29971,13 +30385,26 @@ all-stage3-libbanshee: configure-stage3-libbanshee\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage3-libbanshee: clean-stage3-libbanshee\n+clean-stage3-libbanshee:\n+\t@[ -f libbanshee/Makefile ] || [ -f stage3-libbanshee/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f libbanshee/Makefile ] || $(MAKE) stage3-start ; \\\n+\tcd libbanshee && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif libbanshee-bootstrap\n \n+\n .PHONY: configure-stage3-libiberty maybe-configure-stage3-libiberty\n .PHONY: all-stage3-libiberty maybe-all-stage3-libiberty\n+.PHONY: clean-stage3-libiberty maybe-clean-stage3-libiberty\n \n maybe-configure-stage3-libiberty:\n maybe-all-stage3-libiberty:\n+maybe-clean-stage3-libiberty:\n \n @if libiberty-bootstrap\n maybe-configure-stage3-libiberty: configure-stage3-libiberty\n@@ -30014,13 +30441,26 @@ all-stage3-libiberty: configure-stage3-libiberty\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage3-libiberty: clean-stage3-libiberty\n+clean-stage3-libiberty:\n+\t@[ -f libiberty/Makefile ] || [ -f stage3-libiberty/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f libiberty/Makefile ] || $(MAKE) stage3-start ; \\\n+\tcd libiberty && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif libiberty-bootstrap\n \n+\n .PHONY: configure-stage3-zlib maybe-configure-stage3-zlib\n .PHONY: all-stage3-zlib maybe-all-stage3-zlib\n+.PHONY: clean-stage3-zlib maybe-clean-stage3-zlib\n \n maybe-configure-stage3-zlib:\n maybe-all-stage3-zlib:\n+maybe-clean-stage3-zlib:\n \n @if zlib-bootstrap\n maybe-configure-stage3-zlib: configure-stage3-zlib\n@@ -30057,9 +30497,20 @@ all-stage3-zlib: configure-stage3-zlib\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage3-zlib: clean-stage3-zlib\n+clean-stage3-zlib:\n+\t@[ -f zlib/Makefile ] || [ -f stage3-zlib/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f zlib/Makefile ] || $(MAKE) stage3-start ; \\\n+\tcd zlib && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif zlib-bootstrap\n \n \n+\n # FIXME: Will not need to be conditional when toplevel bootstrap is the\n # only possibility, but now it conflicts with no-bootstrap rules\n @if gcc-bootstrap\n@@ -30097,17 +30548,16 @@ compare:\n bootstrap: stage3-bubble compare all\n \n \n-.PHONY: distclean-stage3\n-\n-# Rules to wipe a stage and all the following ones, used for cleanstrap\n+# Rules to wipe a stage and all the following ones, also used for cleanstrap\n distclean-stage2:: distclean-stage3 \n+.PHONY: distclean-stage3\n distclean-stage3::\n \t[ -f stage_current ] && $(MAKE) `cat stage_current`-end || :\n \trm -rf stage3-* compare \n \n \n .PHONY: cleanstrap\n-cleanstrap: distclean-stage1 bootstrap\n+cleanstrap: distclean bootstrap\n \n @endif gcc-bootstrap\n \n@@ -30230,10 +30680,10 @@ stage4-bubble:: stage3-bubble\n \t@if test -f stage4-lean || test -f stage3-lean  ; then \\\n \t  echo Skipping rebuild of stage4 ; \\\n \telse \\\n-\t  $(MAKE) $(RECURSE_FLAGS_TO_PASS) all-stage4; \\\n+\t  $(MAKE) $(RECURSE_FLAGS_TO_PASS) NOTPARALLEL= all-stage4; \\\n \tfi\n \n-.PHONY: all-stage4\n+.PHONY: all-stage4 clean-stage4\n all-stage4:     \\\n   maybe-all-stage4-bfd \\\n   maybe-all-stage4-opcodes \\\n@@ -30247,12 +30697,28 @@ all-stage4:     \\\n   maybe-all-stage4-libiberty                        \\\n   maybe-all-stage4-zlib       \n \n+do-clean: clean-stage4\n+clean-stage4:     \\\n+  maybe-clean-stage4-bfd \\\n+  maybe-clean-stage4-opcodes \\\n+  maybe-clean-stage4-binutils             \\\n+  maybe-clean-stage4-gas \\\n+  maybe-clean-stage4-gcc        \\\n+  maybe-clean-stage4-intl   \\\n+  maybe-clean-stage4-ld \\\n+  maybe-clean-stage4-libcpp  \\\n+  maybe-clean-stage4-libbanshee \\\n+  maybe-clean-stage4-libiberty                        \\\n+  maybe-clean-stage4-zlib       \n+\n \n .PHONY: configure-stage4-bfd maybe-configure-stage4-bfd\n .PHONY: all-stage4-bfd maybe-all-stage4-bfd\n+.PHONY: clean-stage4-bfd maybe-clean-stage4-bfd\n \n maybe-configure-stage4-bfd:\n maybe-all-stage4-bfd:\n+maybe-clean-stage4-bfd:\n \n @if bfd-bootstrap\n maybe-configure-stage4-bfd: configure-stage4-bfd\n@@ -30289,13 +30755,26 @@ all-stage4-bfd: configure-stage4-bfd\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage4-bfd: clean-stage4-bfd\n+clean-stage4-bfd:\n+\t@[ -f bfd/Makefile ] || [ -f stage4-bfd/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f bfd/Makefile ] || $(MAKE) stage4-start ; \\\n+\tcd bfd && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif bfd-bootstrap\n \n+\n .PHONY: configure-stage4-opcodes maybe-configure-stage4-opcodes\n .PHONY: all-stage4-opcodes maybe-all-stage4-opcodes\n+.PHONY: clean-stage4-opcodes maybe-clean-stage4-opcodes\n \n maybe-configure-stage4-opcodes:\n maybe-all-stage4-opcodes:\n+maybe-clean-stage4-opcodes:\n \n @if opcodes-bootstrap\n maybe-configure-stage4-opcodes: configure-stage4-opcodes\n@@ -30332,13 +30811,26 @@ all-stage4-opcodes: configure-stage4-opcodes\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage4-opcodes: clean-stage4-opcodes\n+clean-stage4-opcodes:\n+\t@[ -f opcodes/Makefile ] || [ -f stage4-opcodes/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f opcodes/Makefile ] || $(MAKE) stage4-start ; \\\n+\tcd opcodes && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif opcodes-bootstrap\n \n+\n .PHONY: configure-stage4-binutils maybe-configure-stage4-binutils\n .PHONY: all-stage4-binutils maybe-all-stage4-binutils\n+.PHONY: clean-stage4-binutils maybe-clean-stage4-binutils\n \n maybe-configure-stage4-binutils:\n maybe-all-stage4-binutils:\n+maybe-clean-stage4-binutils:\n \n @if binutils-bootstrap\n maybe-configure-stage4-binutils: configure-stage4-binutils\n@@ -30375,13 +30867,26 @@ all-stage4-binutils: configure-stage4-binutils\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage4-binutils: clean-stage4-binutils\n+clean-stage4-binutils:\n+\t@[ -f binutils/Makefile ] || [ -f stage4-binutils/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f binutils/Makefile ] || $(MAKE) stage4-start ; \\\n+\tcd binutils && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif binutils-bootstrap\n \n+\n .PHONY: configure-stage4-gas maybe-configure-stage4-gas\n .PHONY: all-stage4-gas maybe-all-stage4-gas\n+.PHONY: clean-stage4-gas maybe-clean-stage4-gas\n \n maybe-configure-stage4-gas:\n maybe-all-stage4-gas:\n+maybe-clean-stage4-gas:\n \n @if gas-bootstrap\n maybe-configure-stage4-gas: configure-stage4-gas\n@@ -30418,13 +30923,26 @@ all-stage4-gas: configure-stage4-gas\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage4-gas: clean-stage4-gas\n+clean-stage4-gas:\n+\t@[ -f gas/Makefile ] || [ -f stage4-gas/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f gas/Makefile ] || $(MAKE) stage4-start ; \\\n+\tcd gas && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif gas-bootstrap\n \n+\n .PHONY: configure-stage4-gcc maybe-configure-stage4-gcc\n .PHONY: all-stage4-gcc maybe-all-stage4-gcc\n+.PHONY: clean-stage4-gcc maybe-clean-stage4-gcc\n \n maybe-configure-stage4-gcc:\n maybe-all-stage4-gcc:\n+maybe-clean-stage4-gcc:\n \n @if gcc-bootstrap\n maybe-configure-stage4-gcc: configure-stage4-gcc\n@@ -30461,13 +30979,26 @@ all-stage4-gcc: configure-stage4-gcc\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t $(EXTRA_GCC_FLAGS)\n+\n+maybe-clean-stage4-gcc: clean-stage4-gcc\n+clean-stage4-gcc:\n+\t@[ -f gcc/Makefile ] || [ -f stage4-gcc/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f gcc/Makefile ] || $(MAKE) stage4-start ; \\\n+\tcd gcc && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t $(EXTRA_GCC_FLAGS) clean\n @endif gcc-bootstrap\n \n+\n .PHONY: configure-stage4-intl maybe-configure-stage4-intl\n .PHONY: all-stage4-intl maybe-all-stage4-intl\n+.PHONY: clean-stage4-intl maybe-clean-stage4-intl\n \n maybe-configure-stage4-intl:\n maybe-all-stage4-intl:\n+maybe-clean-stage4-intl:\n \n @if intl-bootstrap\n maybe-configure-stage4-intl: configure-stage4-intl\n@@ -30504,13 +31035,26 @@ all-stage4-intl: configure-stage4-intl\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage4-intl: clean-stage4-intl\n+clean-stage4-intl:\n+\t@[ -f intl/Makefile ] || [ -f stage4-intl/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f intl/Makefile ] || $(MAKE) stage4-start ; \\\n+\tcd intl && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif intl-bootstrap\n \n+\n .PHONY: configure-stage4-ld maybe-configure-stage4-ld\n .PHONY: all-stage4-ld maybe-all-stage4-ld\n+.PHONY: clean-stage4-ld maybe-clean-stage4-ld\n \n maybe-configure-stage4-ld:\n maybe-all-stage4-ld:\n+maybe-clean-stage4-ld:\n \n @if ld-bootstrap\n maybe-configure-stage4-ld: configure-stage4-ld\n@@ -30547,13 +31091,26 @@ all-stage4-ld: configure-stage4-ld\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage4-ld: clean-stage4-ld\n+clean-stage4-ld:\n+\t@[ -f ld/Makefile ] || [ -f stage4-ld/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f ld/Makefile ] || $(MAKE) stage4-start ; \\\n+\tcd ld && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif ld-bootstrap\n \n+\n .PHONY: configure-stage4-libcpp maybe-configure-stage4-libcpp\n .PHONY: all-stage4-libcpp maybe-all-stage4-libcpp\n+.PHONY: clean-stage4-libcpp maybe-clean-stage4-libcpp\n \n maybe-configure-stage4-libcpp:\n maybe-all-stage4-libcpp:\n+maybe-clean-stage4-libcpp:\n \n @if libcpp-bootstrap\n maybe-configure-stage4-libcpp: configure-stage4-libcpp\n@@ -30590,13 +31147,26 @@ all-stage4-libcpp: configure-stage4-libcpp\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage4-libcpp: clean-stage4-libcpp\n+clean-stage4-libcpp:\n+\t@[ -f libcpp/Makefile ] || [ -f stage4-libcpp/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f libcpp/Makefile ] || $(MAKE) stage4-start ; \\\n+\tcd libcpp && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif libcpp-bootstrap\n \n+\n .PHONY: configure-stage4-libbanshee maybe-configure-stage4-libbanshee\n .PHONY: all-stage4-libbanshee maybe-all-stage4-libbanshee\n+.PHONY: clean-stage4-libbanshee maybe-clean-stage4-libbanshee\n \n maybe-configure-stage4-libbanshee:\n maybe-all-stage4-libbanshee:\n+maybe-clean-stage4-libbanshee:\n \n @if libbanshee-bootstrap\n maybe-configure-stage4-libbanshee: configure-stage4-libbanshee\n@@ -30633,13 +31203,26 @@ all-stage4-libbanshee: configure-stage4-libbanshee\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage4-libbanshee: clean-stage4-libbanshee\n+clean-stage4-libbanshee:\n+\t@[ -f libbanshee/Makefile ] || [ -f stage4-libbanshee/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f libbanshee/Makefile ] || $(MAKE) stage4-start ; \\\n+\tcd libbanshee && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif libbanshee-bootstrap\n \n+\n .PHONY: configure-stage4-libiberty maybe-configure-stage4-libiberty\n .PHONY: all-stage4-libiberty maybe-all-stage4-libiberty\n+.PHONY: clean-stage4-libiberty maybe-clean-stage4-libiberty\n \n maybe-configure-stage4-libiberty:\n maybe-all-stage4-libiberty:\n+maybe-clean-stage4-libiberty:\n \n @if libiberty-bootstrap\n maybe-configure-stage4-libiberty: configure-stage4-libiberty\n@@ -30676,13 +31259,26 @@ all-stage4-libiberty: configure-stage4-libiberty\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage4-libiberty: clean-stage4-libiberty\n+clean-stage4-libiberty:\n+\t@[ -f libiberty/Makefile ] || [ -f stage4-libiberty/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f libiberty/Makefile ] || $(MAKE) stage4-start ; \\\n+\tcd libiberty && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif libiberty-bootstrap\n \n+\n .PHONY: configure-stage4-zlib maybe-configure-stage4-zlib\n .PHONY: all-stage4-zlib maybe-all-stage4-zlib\n+.PHONY: clean-stage4-zlib maybe-clean-stage4-zlib\n \n maybe-configure-stage4-zlib:\n maybe-all-stage4-zlib:\n+maybe-clean-stage4-zlib:\n \n @if zlib-bootstrap\n maybe-configure-stage4-zlib: configure-stage4-zlib\n@@ -30719,9 +31315,20 @@ all-stage4-zlib: configure-stage4-zlib\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\t \n+\n+maybe-clean-stage4-zlib: clean-stage4-zlib\n+clean-stage4-zlib:\n+\t@[ -f zlib/Makefile ] || [ -f stage4-zlib/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f zlib/Makefile ] || $(MAKE) stage4-start ; \\\n+\tcd zlib && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\t  clean\n @endif zlib-bootstrap\n \n \n+\n # FIXME: Will not need to be conditional when toplevel bootstrap is the\n # only possibility, but now it conflicts with no-bootstrap rules\n @if gcc-bootstrap\n@@ -30759,10 +31366,9 @@ compare3:\n bootstrap4: stage4-bubble compare3 all\n \n \n-.PHONY: distclean-stage4\n-\n-# Rules to wipe a stage and all the following ones, used for cleanstrap\n+# Rules to wipe a stage and all the following ones, also used for cleanstrap\n distclean-stage3:: distclean-stage4 \n+.PHONY: distclean-stage4\n distclean-stage4::\n \t[ -f stage_current ] && $(MAKE) `cat stage_current`-end || :\n \trm -rf stage4-* compare3 \n@@ -30888,10 +31494,10 @@ stageprofile-bubble:: stage1-bubble\n \t@if test -f stageprofile-lean || test -f stage1-lean  ; then \\\n \t  echo Skipping rebuild of stageprofile ; \\\n \telse \\\n-\t  $(MAKE) $(RECURSE_FLAGS_TO_PASS) all-stageprofile; \\\n+\t  $(MAKE) $(RECURSE_FLAGS_TO_PASS) NOTPARALLEL= all-stageprofile; \\\n \tfi\n \n-.PHONY: all-stageprofile\n+.PHONY: all-stageprofile clean-stageprofile\n all-stageprofile:     \\\n   maybe-all-stageprofile-bfd \\\n   maybe-all-stageprofile-opcodes \\\n@@ -30905,12 +31511,28 @@ all-stageprofile:     \\\n   maybe-all-stageprofile-libiberty                        \\\n   maybe-all-stageprofile-zlib       \n \n+do-clean: clean-stageprofile\n+clean-stageprofile:     \\\n+  maybe-clean-stageprofile-bfd \\\n+  maybe-clean-stageprofile-opcodes \\\n+  maybe-clean-stageprofile-binutils             \\\n+  maybe-clean-stageprofile-gas \\\n+  maybe-clean-stageprofile-gcc        \\\n+  maybe-clean-stageprofile-intl   \\\n+  maybe-clean-stageprofile-ld \\\n+  maybe-clean-stageprofile-libcpp  \\\n+  maybe-clean-stageprofile-libbanshee \\\n+  maybe-clean-stageprofile-libiberty                        \\\n+  maybe-clean-stageprofile-zlib       \n+\n \n .PHONY: configure-stageprofile-bfd maybe-configure-stageprofile-bfd\n .PHONY: all-stageprofile-bfd maybe-all-stageprofile-bfd\n+.PHONY: clean-stageprofile-bfd maybe-clean-stageprofile-bfd\n \n maybe-configure-stageprofile-bfd:\n maybe-all-stageprofile-bfd:\n+maybe-clean-stageprofile-bfd:\n \n @if bfd-bootstrap\n maybe-configure-stageprofile-bfd: configure-stageprofile-bfd\n@@ -30947,13 +31569,26 @@ all-stageprofile-bfd: configure-stageprofile-bfd\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-generate\" \n+\n+maybe-clean-stageprofile-bfd: clean-stageprofile-bfd\n+clean-stageprofile-bfd:\n+\t@[ -f bfd/Makefile ] || [ -f stageprofile-bfd/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f bfd/Makefile ] || $(MAKE) stageprofile-start ; \\\n+\tcd bfd && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-generate\"  clean\n @endif bfd-bootstrap\n \n+\n .PHONY: configure-stageprofile-opcodes maybe-configure-stageprofile-opcodes\n .PHONY: all-stageprofile-opcodes maybe-all-stageprofile-opcodes\n+.PHONY: clean-stageprofile-opcodes maybe-clean-stageprofile-opcodes\n \n maybe-configure-stageprofile-opcodes:\n maybe-all-stageprofile-opcodes:\n+maybe-clean-stageprofile-opcodes:\n \n @if opcodes-bootstrap\n maybe-configure-stageprofile-opcodes: configure-stageprofile-opcodes\n@@ -30990,13 +31625,26 @@ all-stageprofile-opcodes: configure-stageprofile-opcodes\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-generate\" \n+\n+maybe-clean-stageprofile-opcodes: clean-stageprofile-opcodes\n+clean-stageprofile-opcodes:\n+\t@[ -f opcodes/Makefile ] || [ -f stageprofile-opcodes/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f opcodes/Makefile ] || $(MAKE) stageprofile-start ; \\\n+\tcd opcodes && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-generate\"  clean\n @endif opcodes-bootstrap\n \n+\n .PHONY: configure-stageprofile-binutils maybe-configure-stageprofile-binutils\n .PHONY: all-stageprofile-binutils maybe-all-stageprofile-binutils\n+.PHONY: clean-stageprofile-binutils maybe-clean-stageprofile-binutils\n \n maybe-configure-stageprofile-binutils:\n maybe-all-stageprofile-binutils:\n+maybe-clean-stageprofile-binutils:\n \n @if binutils-bootstrap\n maybe-configure-stageprofile-binutils: configure-stageprofile-binutils\n@@ -31033,13 +31681,26 @@ all-stageprofile-binutils: configure-stageprofile-binutils\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-generate\" \n+\n+maybe-clean-stageprofile-binutils: clean-stageprofile-binutils\n+clean-stageprofile-binutils:\n+\t@[ -f binutils/Makefile ] || [ -f stageprofile-binutils/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f binutils/Makefile ] || $(MAKE) stageprofile-start ; \\\n+\tcd binutils && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-generate\"  clean\n @endif binutils-bootstrap\n \n+\n .PHONY: configure-stageprofile-gas maybe-configure-stageprofile-gas\n .PHONY: all-stageprofile-gas maybe-all-stageprofile-gas\n+.PHONY: clean-stageprofile-gas maybe-clean-stageprofile-gas\n \n maybe-configure-stageprofile-gas:\n maybe-all-stageprofile-gas:\n+maybe-clean-stageprofile-gas:\n \n @if gas-bootstrap\n maybe-configure-stageprofile-gas: configure-stageprofile-gas\n@@ -31076,13 +31737,26 @@ all-stageprofile-gas: configure-stageprofile-gas\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-generate\" \n+\n+maybe-clean-stageprofile-gas: clean-stageprofile-gas\n+clean-stageprofile-gas:\n+\t@[ -f gas/Makefile ] || [ -f stageprofile-gas/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f gas/Makefile ] || $(MAKE) stageprofile-start ; \\\n+\tcd gas && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-generate\"  clean\n @endif gas-bootstrap\n \n+\n .PHONY: configure-stageprofile-gcc maybe-configure-stageprofile-gcc\n .PHONY: all-stageprofile-gcc maybe-all-stageprofile-gcc\n+.PHONY: clean-stageprofile-gcc maybe-clean-stageprofile-gcc\n \n maybe-configure-stageprofile-gcc:\n maybe-all-stageprofile-gcc:\n+maybe-clean-stageprofile-gcc:\n \n @if gcc-bootstrap\n maybe-configure-stageprofile-gcc: configure-stageprofile-gcc\n@@ -31119,13 +31793,26 @@ all-stageprofile-gcc: configure-stageprofile-gcc\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-generate\" $(EXTRA_GCC_FLAGS)\n+\n+maybe-clean-stageprofile-gcc: clean-stageprofile-gcc\n+clean-stageprofile-gcc:\n+\t@[ -f gcc/Makefile ] || [ -f stageprofile-gcc/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f gcc/Makefile ] || $(MAKE) stageprofile-start ; \\\n+\tcd gcc && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-generate\" $(EXTRA_GCC_FLAGS) clean\n @endif gcc-bootstrap\n \n+\n .PHONY: configure-stageprofile-intl maybe-configure-stageprofile-intl\n .PHONY: all-stageprofile-intl maybe-all-stageprofile-intl\n+.PHONY: clean-stageprofile-intl maybe-clean-stageprofile-intl\n \n maybe-configure-stageprofile-intl:\n maybe-all-stageprofile-intl:\n+maybe-clean-stageprofile-intl:\n \n @if intl-bootstrap\n maybe-configure-stageprofile-intl: configure-stageprofile-intl\n@@ -31162,13 +31849,26 @@ all-stageprofile-intl: configure-stageprofile-intl\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-generate\" \n+\n+maybe-clean-stageprofile-intl: clean-stageprofile-intl\n+clean-stageprofile-intl:\n+\t@[ -f intl/Makefile ] || [ -f stageprofile-intl/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f intl/Makefile ] || $(MAKE) stageprofile-start ; \\\n+\tcd intl && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-generate\"  clean\n @endif intl-bootstrap\n \n+\n .PHONY: configure-stageprofile-ld maybe-configure-stageprofile-ld\n .PHONY: all-stageprofile-ld maybe-all-stageprofile-ld\n+.PHONY: clean-stageprofile-ld maybe-clean-stageprofile-ld\n \n maybe-configure-stageprofile-ld:\n maybe-all-stageprofile-ld:\n+maybe-clean-stageprofile-ld:\n \n @if ld-bootstrap\n maybe-configure-stageprofile-ld: configure-stageprofile-ld\n@@ -31205,13 +31905,26 @@ all-stageprofile-ld: configure-stageprofile-ld\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-generate\" \n+\n+maybe-clean-stageprofile-ld: clean-stageprofile-ld\n+clean-stageprofile-ld:\n+\t@[ -f ld/Makefile ] || [ -f stageprofile-ld/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f ld/Makefile ] || $(MAKE) stageprofile-start ; \\\n+\tcd ld && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-generate\"  clean\n @endif ld-bootstrap\n \n+\n .PHONY: configure-stageprofile-libcpp maybe-configure-stageprofile-libcpp\n .PHONY: all-stageprofile-libcpp maybe-all-stageprofile-libcpp\n+.PHONY: clean-stageprofile-libcpp maybe-clean-stageprofile-libcpp\n \n maybe-configure-stageprofile-libcpp:\n maybe-all-stageprofile-libcpp:\n+maybe-clean-stageprofile-libcpp:\n \n @if libcpp-bootstrap\n maybe-configure-stageprofile-libcpp: configure-stageprofile-libcpp\n@@ -31248,13 +31961,26 @@ all-stageprofile-libcpp: configure-stageprofile-libcpp\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-generate\" \n+\n+maybe-clean-stageprofile-libcpp: clean-stageprofile-libcpp\n+clean-stageprofile-libcpp:\n+\t@[ -f libcpp/Makefile ] || [ -f stageprofile-libcpp/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f libcpp/Makefile ] || $(MAKE) stageprofile-start ; \\\n+\tcd libcpp && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-generate\"  clean\n @endif libcpp-bootstrap\n \n+\n .PHONY: configure-stageprofile-libbanshee maybe-configure-stageprofile-libbanshee\n .PHONY: all-stageprofile-libbanshee maybe-all-stageprofile-libbanshee\n+.PHONY: clean-stageprofile-libbanshee maybe-clean-stageprofile-libbanshee\n \n maybe-configure-stageprofile-libbanshee:\n maybe-all-stageprofile-libbanshee:\n+maybe-clean-stageprofile-libbanshee:\n \n @if libbanshee-bootstrap\n maybe-configure-stageprofile-libbanshee: configure-stageprofile-libbanshee\n@@ -31291,13 +32017,26 @@ all-stageprofile-libbanshee: configure-stageprofile-libbanshee\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-generate\" \n+\n+maybe-clean-stageprofile-libbanshee: clean-stageprofile-libbanshee\n+clean-stageprofile-libbanshee:\n+\t@[ -f libbanshee/Makefile ] || [ -f stageprofile-libbanshee/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f libbanshee/Makefile ] || $(MAKE) stageprofile-start ; \\\n+\tcd libbanshee && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-generate\"  clean\n @endif libbanshee-bootstrap\n \n+\n .PHONY: configure-stageprofile-libiberty maybe-configure-stageprofile-libiberty\n .PHONY: all-stageprofile-libiberty maybe-all-stageprofile-libiberty\n+.PHONY: clean-stageprofile-libiberty maybe-clean-stageprofile-libiberty\n \n maybe-configure-stageprofile-libiberty:\n maybe-all-stageprofile-libiberty:\n+maybe-clean-stageprofile-libiberty:\n \n @if libiberty-bootstrap\n maybe-configure-stageprofile-libiberty: configure-stageprofile-libiberty\n@@ -31334,13 +32073,26 @@ all-stageprofile-libiberty: configure-stageprofile-libiberty\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-generate\" \n+\n+maybe-clean-stageprofile-libiberty: clean-stageprofile-libiberty\n+clean-stageprofile-libiberty:\n+\t@[ -f libiberty/Makefile ] || [ -f stageprofile-libiberty/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f libiberty/Makefile ] || $(MAKE) stageprofile-start ; \\\n+\tcd libiberty && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-generate\"  clean\n @endif libiberty-bootstrap\n \n+\n .PHONY: configure-stageprofile-zlib maybe-configure-stageprofile-zlib\n .PHONY: all-stageprofile-zlib maybe-all-stageprofile-zlib\n+.PHONY: clean-stageprofile-zlib maybe-clean-stageprofile-zlib\n \n maybe-configure-stageprofile-zlib:\n maybe-all-stageprofile-zlib:\n+maybe-clean-stageprofile-zlib:\n \n @if zlib-bootstrap\n maybe-configure-stageprofile-zlib: configure-stageprofile-zlib\n@@ -31377,20 +32129,30 @@ all-stageprofile-zlib: configure-stageprofile-zlib\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-generate\" \n+\n+maybe-clean-stageprofile-zlib: clean-stageprofile-zlib\n+clean-stageprofile-zlib:\n+\t@[ -f zlib/Makefile ] || [ -f stageprofile-zlib/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f zlib/Makefile ] || $(MAKE) stageprofile-start ; \\\n+\tcd zlib && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-generate\"  clean\n @endif zlib-bootstrap\n \n \n+\n # FIXME: Will not need to be conditional when toplevel bootstrap is the\n # only possibility, but now it conflicts with no-bootstrap rules\n @if gcc-bootstrap\n \n \n \n \n-.PHONY: distclean-stageprofile\n-\n-# Rules to wipe a stage and all the following ones, used for cleanstrap\n+# Rules to wipe a stage and all the following ones, also used for cleanstrap\n distclean-stage1:: distclean-stageprofile \n+.PHONY: distclean-stageprofile\n distclean-stageprofile::\n \t[ -f stage_current ] && $(MAKE) `cat stage_current`-end || :\n \trm -rf stageprofile-* \n@@ -31516,10 +32278,10 @@ stagefeedback-bubble:: stage1-bubble\n \t@if test -f stagefeedback-lean || test -f stage1-lean  ; then \\\n \t  echo Skipping rebuild of stagefeedback ; \\\n \telse \\\n-\t  $(MAKE) $(RECURSE_FLAGS_TO_PASS) all-stagefeedback; \\\n+\t  $(MAKE) $(RECURSE_FLAGS_TO_PASS) NOTPARALLEL= all-stagefeedback; \\\n \tfi\n \n-.PHONY: all-stagefeedback\n+.PHONY: all-stagefeedback clean-stagefeedback\n all-stagefeedback:     \\\n   maybe-all-stagefeedback-bfd \\\n   maybe-all-stagefeedback-opcodes \\\n@@ -31533,12 +32295,28 @@ all-stagefeedback:     \\\n   maybe-all-stagefeedback-libiberty                        \\\n   maybe-all-stagefeedback-zlib       \n \n+do-clean: clean-stagefeedback\n+clean-stagefeedback:     \\\n+  maybe-clean-stagefeedback-bfd \\\n+  maybe-clean-stagefeedback-opcodes \\\n+  maybe-clean-stagefeedback-binutils             \\\n+  maybe-clean-stagefeedback-gas \\\n+  maybe-clean-stagefeedback-gcc        \\\n+  maybe-clean-stagefeedback-intl   \\\n+  maybe-clean-stagefeedback-ld \\\n+  maybe-clean-stagefeedback-libcpp  \\\n+  maybe-clean-stagefeedback-libbanshee \\\n+  maybe-clean-stagefeedback-libiberty                        \\\n+  maybe-clean-stagefeedback-zlib       \n+\n \n .PHONY: configure-stagefeedback-bfd maybe-configure-stagefeedback-bfd\n .PHONY: all-stagefeedback-bfd maybe-all-stagefeedback-bfd\n+.PHONY: clean-stagefeedback-bfd maybe-clean-stagefeedback-bfd\n \n maybe-configure-stagefeedback-bfd:\n maybe-all-stagefeedback-bfd:\n+maybe-clean-stagefeedback-bfd:\n \n @if bfd-bootstrap\n maybe-configure-stagefeedback-bfd: configure-stagefeedback-bfd\n@@ -31575,13 +32353,26 @@ all-stagefeedback-bfd: configure-stagefeedback-bfd\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-use\" \n+\n+maybe-clean-stagefeedback-bfd: clean-stagefeedback-bfd\n+clean-stagefeedback-bfd:\n+\t@[ -f bfd/Makefile ] || [ -f stagefeedback-bfd/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f bfd/Makefile ] || $(MAKE) stagefeedback-start ; \\\n+\tcd bfd && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-use\"  clean\n @endif bfd-bootstrap\n \n+\n .PHONY: configure-stagefeedback-opcodes maybe-configure-stagefeedback-opcodes\n .PHONY: all-stagefeedback-opcodes maybe-all-stagefeedback-opcodes\n+.PHONY: clean-stagefeedback-opcodes maybe-clean-stagefeedback-opcodes\n \n maybe-configure-stagefeedback-opcodes:\n maybe-all-stagefeedback-opcodes:\n+maybe-clean-stagefeedback-opcodes:\n \n @if opcodes-bootstrap\n maybe-configure-stagefeedback-opcodes: configure-stagefeedback-opcodes\n@@ -31618,13 +32409,26 @@ all-stagefeedback-opcodes: configure-stagefeedback-opcodes\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-use\" \n+\n+maybe-clean-stagefeedback-opcodes: clean-stagefeedback-opcodes\n+clean-stagefeedback-opcodes:\n+\t@[ -f opcodes/Makefile ] || [ -f stagefeedback-opcodes/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f opcodes/Makefile ] || $(MAKE) stagefeedback-start ; \\\n+\tcd opcodes && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-use\"  clean\n @endif opcodes-bootstrap\n \n+\n .PHONY: configure-stagefeedback-binutils maybe-configure-stagefeedback-binutils\n .PHONY: all-stagefeedback-binutils maybe-all-stagefeedback-binutils\n+.PHONY: clean-stagefeedback-binutils maybe-clean-stagefeedback-binutils\n \n maybe-configure-stagefeedback-binutils:\n maybe-all-stagefeedback-binutils:\n+maybe-clean-stagefeedback-binutils:\n \n @if binutils-bootstrap\n maybe-configure-stagefeedback-binutils: configure-stagefeedback-binutils\n@@ -31661,13 +32465,26 @@ all-stagefeedback-binutils: configure-stagefeedback-binutils\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-use\" \n+\n+maybe-clean-stagefeedback-binutils: clean-stagefeedback-binutils\n+clean-stagefeedback-binutils:\n+\t@[ -f binutils/Makefile ] || [ -f stagefeedback-binutils/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f binutils/Makefile ] || $(MAKE) stagefeedback-start ; \\\n+\tcd binutils && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-use\"  clean\n @endif binutils-bootstrap\n \n+\n .PHONY: configure-stagefeedback-gas maybe-configure-stagefeedback-gas\n .PHONY: all-stagefeedback-gas maybe-all-stagefeedback-gas\n+.PHONY: clean-stagefeedback-gas maybe-clean-stagefeedback-gas\n \n maybe-configure-stagefeedback-gas:\n maybe-all-stagefeedback-gas:\n+maybe-clean-stagefeedback-gas:\n \n @if gas-bootstrap\n maybe-configure-stagefeedback-gas: configure-stagefeedback-gas\n@@ -31704,13 +32521,26 @@ all-stagefeedback-gas: configure-stagefeedback-gas\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-use\" \n+\n+maybe-clean-stagefeedback-gas: clean-stagefeedback-gas\n+clean-stagefeedback-gas:\n+\t@[ -f gas/Makefile ] || [ -f stagefeedback-gas/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f gas/Makefile ] || $(MAKE) stagefeedback-start ; \\\n+\tcd gas && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-use\"  clean\n @endif gas-bootstrap\n \n+\n .PHONY: configure-stagefeedback-gcc maybe-configure-stagefeedback-gcc\n .PHONY: all-stagefeedback-gcc maybe-all-stagefeedback-gcc\n+.PHONY: clean-stagefeedback-gcc maybe-clean-stagefeedback-gcc\n \n maybe-configure-stagefeedback-gcc:\n maybe-all-stagefeedback-gcc:\n+maybe-clean-stagefeedback-gcc:\n \n @if gcc-bootstrap\n maybe-configure-stagefeedback-gcc: configure-stagefeedback-gcc\n@@ -31747,13 +32577,26 @@ all-stagefeedback-gcc: configure-stagefeedback-gcc\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-use\" $(EXTRA_GCC_FLAGS)\n+\n+maybe-clean-stagefeedback-gcc: clean-stagefeedback-gcc\n+clean-stagefeedback-gcc:\n+\t@[ -f gcc/Makefile ] || [ -f stagefeedback-gcc/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f gcc/Makefile ] || $(MAKE) stagefeedback-start ; \\\n+\tcd gcc && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-use\" $(EXTRA_GCC_FLAGS) clean\n @endif gcc-bootstrap\n \n+\n .PHONY: configure-stagefeedback-intl maybe-configure-stagefeedback-intl\n .PHONY: all-stagefeedback-intl maybe-all-stagefeedback-intl\n+.PHONY: clean-stagefeedback-intl maybe-clean-stagefeedback-intl\n \n maybe-configure-stagefeedback-intl:\n maybe-all-stagefeedback-intl:\n+maybe-clean-stagefeedback-intl:\n \n @if intl-bootstrap\n maybe-configure-stagefeedback-intl: configure-stagefeedback-intl\n@@ -31790,13 +32633,26 @@ all-stagefeedback-intl: configure-stagefeedback-intl\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-use\" \n+\n+maybe-clean-stagefeedback-intl: clean-stagefeedback-intl\n+clean-stagefeedback-intl:\n+\t@[ -f intl/Makefile ] || [ -f stagefeedback-intl/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f intl/Makefile ] || $(MAKE) stagefeedback-start ; \\\n+\tcd intl && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-use\"  clean\n @endif intl-bootstrap\n \n+\n .PHONY: configure-stagefeedback-ld maybe-configure-stagefeedback-ld\n .PHONY: all-stagefeedback-ld maybe-all-stagefeedback-ld\n+.PHONY: clean-stagefeedback-ld maybe-clean-stagefeedback-ld\n \n maybe-configure-stagefeedback-ld:\n maybe-all-stagefeedback-ld:\n+maybe-clean-stagefeedback-ld:\n \n @if ld-bootstrap\n maybe-configure-stagefeedback-ld: configure-stagefeedback-ld\n@@ -31833,13 +32689,26 @@ all-stagefeedback-ld: configure-stagefeedback-ld\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-use\" \n+\n+maybe-clean-stagefeedback-ld: clean-stagefeedback-ld\n+clean-stagefeedback-ld:\n+\t@[ -f ld/Makefile ] || [ -f stagefeedback-ld/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f ld/Makefile ] || $(MAKE) stagefeedback-start ; \\\n+\tcd ld && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-use\"  clean\n @endif ld-bootstrap\n \n+\n .PHONY: configure-stagefeedback-libcpp maybe-configure-stagefeedback-libcpp\n .PHONY: all-stagefeedback-libcpp maybe-all-stagefeedback-libcpp\n+.PHONY: clean-stagefeedback-libcpp maybe-clean-stagefeedback-libcpp\n \n maybe-configure-stagefeedback-libcpp:\n maybe-all-stagefeedback-libcpp:\n+maybe-clean-stagefeedback-libcpp:\n \n @if libcpp-bootstrap\n maybe-configure-stagefeedback-libcpp: configure-stagefeedback-libcpp\n@@ -31876,13 +32745,26 @@ all-stagefeedback-libcpp: configure-stagefeedback-libcpp\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-use\" \n+\n+maybe-clean-stagefeedback-libcpp: clean-stagefeedback-libcpp\n+clean-stagefeedback-libcpp:\n+\t@[ -f libcpp/Makefile ] || [ -f stagefeedback-libcpp/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f libcpp/Makefile ] || $(MAKE) stagefeedback-start ; \\\n+\tcd libcpp && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-use\"  clean\n @endif libcpp-bootstrap\n \n+\n .PHONY: configure-stagefeedback-libbanshee maybe-configure-stagefeedback-libbanshee\n .PHONY: all-stagefeedback-libbanshee maybe-all-stagefeedback-libbanshee\n+.PHONY: clean-stagefeedback-libbanshee maybe-clean-stagefeedback-libbanshee\n \n maybe-configure-stagefeedback-libbanshee:\n maybe-all-stagefeedback-libbanshee:\n+maybe-clean-stagefeedback-libbanshee:\n \n @if libbanshee-bootstrap\n maybe-configure-stagefeedback-libbanshee: configure-stagefeedback-libbanshee\n@@ -31919,13 +32801,26 @@ all-stagefeedback-libbanshee: configure-stagefeedback-libbanshee\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-use\" \n+\n+maybe-clean-stagefeedback-libbanshee: clean-stagefeedback-libbanshee\n+clean-stagefeedback-libbanshee:\n+\t@[ -f libbanshee/Makefile ] || [ -f stagefeedback-libbanshee/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f libbanshee/Makefile ] || $(MAKE) stagefeedback-start ; \\\n+\tcd libbanshee && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-use\"  clean\n @endif libbanshee-bootstrap\n \n+\n .PHONY: configure-stagefeedback-libiberty maybe-configure-stagefeedback-libiberty\n .PHONY: all-stagefeedback-libiberty maybe-all-stagefeedback-libiberty\n+.PHONY: clean-stagefeedback-libiberty maybe-clean-stagefeedback-libiberty\n \n maybe-configure-stagefeedback-libiberty:\n maybe-all-stagefeedback-libiberty:\n+maybe-clean-stagefeedback-libiberty:\n \n @if libiberty-bootstrap\n maybe-configure-stagefeedback-libiberty: configure-stagefeedback-libiberty\n@@ -31962,13 +32857,26 @@ all-stagefeedback-libiberty: configure-stagefeedback-libiberty\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-use\" \n+\n+maybe-clean-stagefeedback-libiberty: clean-stagefeedback-libiberty\n+clean-stagefeedback-libiberty:\n+\t@[ -f libiberty/Makefile ] || [ -f stagefeedback-libiberty/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f libiberty/Makefile ] || $(MAKE) stagefeedback-start ; \\\n+\tcd libiberty && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-use\"  clean\n @endif libiberty-bootstrap\n \n+\n .PHONY: configure-stagefeedback-zlib maybe-configure-stagefeedback-zlib\n .PHONY: all-stagefeedback-zlib maybe-all-stagefeedback-zlib\n+.PHONY: clean-stagefeedback-zlib maybe-clean-stagefeedback-zlib\n \n maybe-configure-stagefeedback-zlib:\n maybe-all-stagefeedback-zlib:\n+maybe-clean-stagefeedback-zlib:\n \n @if zlib-bootstrap\n maybe-configure-stagefeedback-zlib: configure-stagefeedback-zlib\n@@ -32005,20 +32913,30 @@ all-stagefeedback-zlib: configure-stagefeedback-zlib\n \t$(MAKE) $(FLAGS_TO_PASS)  \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n \t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-use\" \n+\n+maybe-clean-stagefeedback-zlib: clean-stagefeedback-zlib\n+clean-stagefeedback-zlib:\n+\t@[ -f zlib/Makefile ] || [ -f stagefeedback-zlib/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f zlib/Makefile ] || $(MAKE) stagefeedback-start ; \\\n+\tcd zlib && \\\n+\t$(MAKE) $(FLAGS_TO_PASS)  \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-use\"  clean\n @endif zlib-bootstrap\n \n \n+\n # FIXME: Will not need to be conditional when toplevel bootstrap is the\n # only possibility, but now it conflicts with no-bootstrap rules\n @if gcc-bootstrap\n \n \n \n \n-.PHONY: distclean-stagefeedback\n-\n-# Rules to wipe a stage and all the following ones, used for cleanstrap\n+# Rules to wipe a stage and all the following ones, also used for cleanstrap\n distclean-stage1:: distclean-stagefeedback \n+.PHONY: distclean-stagefeedback\n distclean-stagefeedback::\n \t[ -f stage_current ] && $(MAKE) `cat stage_current`-end || :\n \trm -rf stagefeedback-* \n@@ -32058,6 +32976,12 @@ profiledbootstrap:\n \t$(MAKE) stagefeedback-bubble stagefeedback-end\n @endif gcc-bootstrap\n \n+@if gcc-bootstrap\n+NOTPARALLEL = .NOTPARALLEL\n+$(NOTPARALLEL):\n+do-distclean: distclean-stage1\n+@endif gcc-bootstrap\n+\n # --------------------------------------\n # Dependencies between different modules\n # --------------------------------------"}, {"sha": "8dbf237f102fc77dc230f17ac6e522c71fc97bd2", "filename": "Makefile.tpl", "status": "modified", "additions": 36, "deletions": 16, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f366abae43ce0df9e3ef7eae7b8eee96f506ab/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f366abae43ce0df9e3ef7eae7b8eee96f506ab/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=45f366abae43ce0df9e3ef7eae7b8eee96f506ab", "patch": "@@ -248,6 +248,10 @@ CXX_FOR_BUILD = $(CXX)\n BUILD_PREFIX = @BUILD_PREFIX@\n BUILD_PREFIX_1 = @BUILD_PREFIX_1@\n \n+# Flags to pass to stage2 and later makes.  They are defined\n+# here so that they can be overridden by Makefile fragments.\n+BOOT_CFLAGS= -g -O2\n+\n CONFIGURED_BISON = @CONFIGURED_BISON@\n BISON = `if [ -f $$r/$(BUILD_SUBDIR)/bison/tests/bison ] ; then \\\n \t    echo $$r/$(BUILD_SUBDIR)/bison/tests/bison ; \\\n@@ -481,14 +485,6 @@ PICFLAG_FOR_TARGET =\n # Miscellaneous targets and flag lists\n # ------------------------------------\n \n-@if gcc-bootstrap\n-# Let's leave this as the first rule in the file until toplevel\n-# bootstrap is fleshed out completely.\n-sorry:\n-\t@echo Toplevel bootstrap temporarily out of commission.\n-\t@echo Please reconfigure without --enable-bootstrap\n-@endif gcc-bootstrap\n-\n # The first rule in the file had better be this one.  Don't put any above it.\n # This lives here to allow makefile fragments to contain dependencies.\n @default_target@:\n@@ -1338,7 +1334,9 @@ stage:\n # (both in a combined tree, or separately).  This however requires some\n # change to the gcc driver, again in order to avoid comparison failures.\n \n-# Bugs: This is almost certainly not parallel-make safe.\n+# Bugs: This is crippled when doing parallel make, the `make all-host'\n+# and `make all-target' phases can be parallelized.\n+\n \n # 'touch' doesn't work right on some platforms.\n STAMP = echo timestamp > \n@@ -1356,7 +1354,6 @@ STAGE1_LANGUAGES=@stage1_languages@\n objext = .o\n \n # Flags to pass to stage2 and later makes.\n-BOOT_CFLAGS= -g -O2\n POSTSTAGE1_FLAGS_TO_PASS = \\\n \tCC=\"$${CC}\" CC_FOR_BUILD=\"$${CC_FOR_BUILD}\" \\\n \tSTAGE_PREFIX=$$r/stage[+prev+]-gcc/ \\\n@@ -1402,20 +1399,27 @@ stage[+id+]-bubble:: [+ IF prev +]stage[+prev+]-bubble[+ ENDIF +][+IF lean +]\n \t  IF prev +]|| test -f stage[+prev+]-lean [+ ENDIF prev +] ; then \\\n \t  echo Skipping rebuild of stage[+id+] ; \\\n \telse \\\n-\t  $(MAKE) $(RECURSE_FLAGS_TO_PASS) all-stage[+id+]; \\\n+\t  $(MAKE) $(RECURSE_FLAGS_TO_PASS) NOTPARALLEL= all-stage[+id+]; \\\n \tfi\n \n-.PHONY: all-stage[+id+]\n+.PHONY: all-stage[+id+] clean-stage[+id+]\n all-stage[+id+]: [+ FOR host_modules +][+ IF bootstrap +]\\\n   maybe-all-stage[+id+]-[+module+][+\n ENDIF bootstrap+] [+ ENDFOR host_modules +]\n \n+do-clean: clean-stage[+id+]\n+clean-stage[+id+]: [+ FOR host_modules +][+ IF bootstrap +]\\\n+  maybe-clean-stage[+id+]-[+module+][+\n+ENDIF bootstrap+] [+ ENDFOR host_modules +]\n+\n [+ FOR host_modules +][+ IF bootstrap +]\n .PHONY: configure-stage[+id+]-[+module+] maybe-configure-stage[+id+]-[+module+]\n .PHONY: all-stage[+id+]-[+module+] maybe-all-stage[+id+]-[+module+]\n+.PHONY: clean-stage[+id+]-[+module+] maybe-clean-stage[+id+]-[+module+]\n \n maybe-configure-stage[+id+]-[+module+]:\n maybe-all-stage[+id+]-[+module+]:\n+maybe-clean-stage[+id+]-[+module+]:\n \n @if [+module+]-bootstrap\n maybe-configure-stage[+id+]-[+module+]: configure-stage[+id+]-[+module+]\n@@ -1454,7 +1458,18 @@ all-stage[+id+]-[+module+]: configure-stage[+id+]-[+module+]\n \t$(MAKE) $(FLAGS_TO_PASS) [+ IF prev +] \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS) [+ ENDIF prev +] \\\n \t\t[+stage_make_flags+] [+extra_make_flags+]\n+\n+maybe-clean-stage[+id+]-[+module+]: clean-stage[+id+]-[+module+]\n+clean-stage[+id+]-[+module+]:\n+\t@[ -f [+module+]/Makefile ] || [ -f stage[+id+]-[+module+]/Makefile ] \\\n+\t  || exit 0 ; \\\n+\t[ -f [+module+]/Makefile ] || $(MAKE) stage[+id+]-start ; \\\n+\tcd [+module+] && \\\n+\t$(MAKE) $(FLAGS_TO_PASS) [+ IF prev +] \\\n+\t\t$(POSTSTAGE1_FLAGS_TO_PASS) [+ ENDIF prev +] \\\n+\t\t[+stage_make_flags+] [+extra_make_flags+] clean\n @endif [+module+]-bootstrap\n+\n [+ ENDIF bootstrap +][+ ENDFOR host_modules +]\n \n # FIXME: Will not need to be conditional when toplevel bootstrap is the\n@@ -1494,18 +1509,17 @@ all-stage[+id+]-[+module+]: configure-stage[+id+]-[+module+]\n [+bootstrap-target+]: stage[+id+]-bubble [+compare-target+] all\n [+ ENDIF bootstrap-target +]\n \n-.PHONY: distclean-stage[+id+]\n-\n-# Rules to wipe a stage and all the following ones, used for cleanstrap\n+# Rules to wipe a stage and all the following ones, also used for cleanstrap\n [+ IF prev +]distclean-stage[+prev+]:: distclean-stage[+id+] [+ ENDIF prev +]\n+.PHONY: distclean-stage[+id+]\n distclean-stage[+id+]::\n \t[ -f stage_current ] && $(MAKE) `cat stage_current`-end || :\n \trm -rf stage[+id+]-* [+\n \t  IF compare-target +][+compare-target+] [+ ENDIF compare-target +]\n \n [+ IF cleanstrap-target +]\n .PHONY: [+cleanstrap-target+]\n-[+cleanstrap-target+]: distclean-stage1 [+bootstrap-target+]\n+[+cleanstrap-target+]: distclean [+bootstrap-target+]\n [+ ENDIF cleanstrap-target +]\n @endif gcc-bootstrap\n \n@@ -1541,6 +1555,12 @@ profiledbootstrap:\n \t$(MAKE) stagefeedback-bubble stagefeedback-end\n @endif gcc-bootstrap\n \n+@if gcc-bootstrap\n+NOTPARALLEL = .NOTPARALLEL\n+$(NOTPARALLEL):\n+do-distclean: distclean-stage1\n+@endif gcc-bootstrap\n+\n # --------------------------------------\n # Dependencies between different modules\n # --------------------------------------"}, {"sha": "c021b71b241489658b1633e74efb9d06e26f88a2", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f366abae43ce0df9e3ef7eae7b8eee96f506ab/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f366abae43ce0df9e3ef7eae7b8eee96f506ab/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=45f366abae43ce0df9e3ef7eae7b8eee96f506ab", "patch": "@@ -1723,7 +1723,7 @@ case \"${host}\" in\n     tentative_cc=\"/usr/cygnus/progressive/bin/gcc\"\n     host_makefile_frag=\"config/mh-lynxrs6k\"\n     ;;\n-    powerpc-*-darwin*)\n+  powerpc-*-darwin*)\n     host_makefile_frag=\"config/mh-ppc-darwin\"\n     ;;\n   *-*-lynxos*)"}, {"sha": "546879ac0a56a496bc3b0b895cb6c91b0dbcf29f", "filename": "configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f366abae43ce0df9e3ef7eae7b8eee96f506ab/configure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f366abae43ce0df9e3ef7eae7b8eee96f506ab/configure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.in?ref=45f366abae43ce0df9e3ef7eae7b8eee96f506ab", "patch": "@@ -939,7 +939,7 @@ case \"${host}\" in\n     tentative_cc=\"/usr/cygnus/progressive/bin/gcc\"\n     host_makefile_frag=\"config/mh-lynxrs6k\"\n     ;;\n-    powerpc-*-darwin*)\n+  powerpc-*-darwin*)\n     host_makefile_frag=\"config/mh-ppc-darwin\"\n     ;;\n   *-*-lynxos*)"}]}