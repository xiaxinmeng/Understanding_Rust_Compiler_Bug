{"sha": "c29e2982e4e8fe39db44ac1e9b06367e209b4f76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI5ZTI5ODJlNGU4ZmUzOWRiNDRhYzFlOWIwNjM2N2UyMDliNGY3Ng==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2010-08-16T10:25:28Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-08-16T10:25:28Z"}, "message": "thumb2.md (thumb2_notsi_shiftsi, [...]): Delete.\n\n\t* config/arm/thumb2.md (thumb2_notsi_shiftsi,\n\tthumbsi_notsi_shiftsi_compare0, thumb2_not_shiftsi_compare0_scratch,\n\tthumb2_cmpsi_shiftsi, thumb2_cmpsi_shiftsi_swp, thumb2_arith_shiftsi,\n\tthumb2_arith_shiftsi splitter, thumb2_arith_shiftsi_compare0,\n\tthumb2_arith_shiftsi_compare0_scratch, thumb2_sub_shiftsi,\n\tthumb2_sub_shiftsi_compare0, thumb2_sub_shiftsi_compare0_scratch,\n\tthumb2_iorsi3): Delete.\n\t(orsi_notsi_si): No longer a named pattern.\n\t(orsi_not_shiftsi_si): Renamed from thumb_orsi_not_shiftsi_si.\n\t* config/arm/predicates.md (shift_amount_operand): New.\n\t(mult_operator): New.\n\t* config/arm/arm.md (attr arch, attr arch_enabled, attr insn_enabled,\n\tattr enabled): New.\n\t(iorsi3_insn): Renamed from arm_iorsi3.  Handle a new alternative if\n\tarch matches t2.\n\t(not_shiftsi): Renamed from arm_notsi_shiftsi.  Handle Thumb2 variant.\n\t(not_shiftsi_compare0): Likewise, renamed from\n\tarm_notsi_shiftsi_compare0.\n\t(not_shiftsi_compare0_scratch): Likweise, renamed from\n\tarm_notsi_shiftsi_compare0_scratch.\n\t(cmpsi_shiftsi): Likewise, renamed from arm_cmpsi_shiftsi.\n\t(cmpsi_shiftsi_swp): Likewise, renamed from arm_cmpsi_shiftsi_swp.\n\t(arith_shiftsi): Handle Thumb2 variant.  Set insn_enabled attribute\n\tso that the register alternative is disabled when the shift_operator\n\tis MULT.  Use \"M\" as the constraint for constants.\n\t(arith_shiftsi splitter): Enable for TARGET_32BIT.\n\t(arith_shiftsi_compare0): Handle Thumb2 variant.  Use \"M\" as the\n\tconstraint for constants.\n\t(arith_shiftsi_compare0_scratch): Likewise.\n\t(sub_shiftsi, sub_shiftsi_compare0, sub_shiftsi_compare0_scratch):\n\tHandle Thumb2 alternative.\n\nFrom-SVN: r163281", "tree": {"sha": "4605e56b142665c2ebcb67e4d4f49f45ad1e273b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4605e56b142665c2ebcb67e4d4f49f45ad1e273b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c29e2982e4e8fe39db44ac1e9b06367e209b4f76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c29e2982e4e8fe39db44ac1e9b06367e209b4f76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c29e2982e4e8fe39db44ac1e9b06367e209b4f76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c29e2982e4e8fe39db44ac1e9b06367e209b4f76/comments", "author": null, "committer": null, "parents": [{"sha": "c878765bbf32e3c3505417771f94015da69a33b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c878765bbf32e3c3505417771f94015da69a33b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c878765bbf32e3c3505417771f94015da69a33b8"}], "stats": {"total": 549, "additions": 216, "deletions": 333}, "files": [{"sha": "a070f06d1429bc0866d9b2e9a4b648693f56c9f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29e2982e4e8fe39db44ac1e9b06367e209b4f76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29e2982e4e8fe39db44ac1e9b06367e209b4f76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c29e2982e4e8fe39db44ac1e9b06367e209b4f76", "patch": "@@ -1,3 +1,37 @@\n+2010-08-16  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* config/arm/thumb2.md (thumb2_notsi_shiftsi,\n+\tthumbsi_notsi_shiftsi_compare0, thumb2_not_shiftsi_compare0_scratch,\n+\tthumb2_cmpsi_shiftsi, thumb2_cmpsi_shiftsi_swp, thumb2_arith_shiftsi,\n+\tthumb2_arith_shiftsi splitter, thumb2_arith_shiftsi_compare0,\n+\tthumb2_arith_shiftsi_compare0_scratch, thumb2_sub_shiftsi,\n+\tthumb2_sub_shiftsi_compare0, thumb2_sub_shiftsi_compare0_scratch,\n+\tthumb2_iorsi3): Delete.\n+\t(orsi_notsi_si): No longer a named pattern.\n+\t(orsi_not_shiftsi_si): Renamed from thumb_orsi_not_shiftsi_si.\n+\t* config/arm/predicates.md (shift_amount_operand): New.\n+\t(mult_operator): New.\n+\t* config/arm/arm.md (attr arch, attr arch_enabled, attr insn_enabled,\n+\tattr enabled): New.\n+\t(iorsi3_insn): Renamed from arm_iorsi3.  Handle a new alternative if\n+\tarch matches t2.\n+\t(not_shiftsi): Renamed from arm_notsi_shiftsi.  Handle Thumb2 variant.\n+\t(not_shiftsi_compare0): Likewise, renamed from\n+\tarm_notsi_shiftsi_compare0.\n+\t(not_shiftsi_compare0_scratch): Likweise, renamed from\n+\tarm_notsi_shiftsi_compare0_scratch.\n+\t(cmpsi_shiftsi): Likewise, renamed from arm_cmpsi_shiftsi.\n+\t(cmpsi_shiftsi_swp): Likewise, renamed from arm_cmpsi_shiftsi_swp.\n+\t(arith_shiftsi): Handle Thumb2 variant.  Set insn_enabled attribute\n+\tso that the register alternative is disabled when the shift_operator\n+\tis MULT.  Use \"M\" as the constraint for constants.\n+\t(arith_shiftsi splitter): Enable for TARGET_32BIT.\n+\t(arith_shiftsi_compare0): Handle Thumb2 variant.  Use \"M\" as the\n+\tconstraint for constants.\n+\t(arith_shiftsi_compare0_scratch): Likewise.\n+\t(sub_shiftsi, sub_shiftsi_compare0, sub_shiftsi_compare0_scratch):\n+\tHandle Thumb2 alternative.\n+\n 2010-08-16  Joseph Myers  <joseph@codesourcery.com>\n \n \t* doc/options.texi (NoDriverArg): Document."}, {"sha": "9da71010a12971ec55d0420bd5413e9a466bff7c", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 171, "deletions": 125, "changes": 296, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29e2982e4e8fe39db44ac1e9b06367e209b4f76/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29e2982e4e8fe39db44ac1e9b06367e209b4f76/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=c29e2982e4e8fe39db44ac1e9b06367e209b4f76", "patch": "@@ -167,6 +167,59 @@\n ; LENGTH of an instruction (in bytes)\n (define_attr \"length\" \"\" (const_int 4))\n \n+; The architecture which supports the instruction (or alternative).\n+; This can be \"a\" for ARM, \"t\" for either of the Thumbs, \"32\" for\n+; TARGET_32BIT, \"t1\" or \"t2\" to specify a specific Thumb mode.  \"v6\"\n+; for ARM or Thumb-2 with arm_arch6, and nov6 for ARM without\n+; arm_arch6.  This attribute is used to compute attribute \"enabled\",\n+; use type \"any\" to enable an alternative in all cases.\n+(define_attr \"arch\" \"any,a,t,32,t1,t2,v6,nov6\"\n+  (const_string \"any\"))\n+\n+(define_attr \"arch_enabled\" \"no,yes\"\n+  (cond [(eq_attr \"arch\" \"any\")\n+\t (const_string \"yes\")\n+\n+\t (and (eq_attr \"arch\" \"a\")\n+\t      (ne (symbol_ref \"TARGET_ARM\") (const_int 0)))\n+\t (const_string \"yes\")\n+\n+\t (and (eq_attr \"arch\" \"t\")\n+\t      (ne (symbol_ref \"TARGET_THUMB\") (const_int 0)))\n+\t (const_string \"yes\")\n+\n+\t (and (eq_attr \"arch\" \"t1\")\n+\t      (ne (symbol_ref \"TARGET_THUMB1\") (const_int 0)))\n+\t (const_string \"yes\")\n+\n+\t (and (eq_attr \"arch\" \"t2\")\n+\t      (ne (symbol_ref \"TARGET_THUMB2\") (const_int 0)))\n+\t (const_string \"yes\")\n+\n+\t (and (eq_attr \"arch\" \"32\")\n+\t      (ne (symbol_ref \"TARGET_32BIT\") (const_int 0)))\n+\t (const_string \"yes\")\n+\n+\t (and (eq_attr \"arch\" \"v6\")\n+\t      (ne (symbol_ref \"(TARGET_32BIT && arm_arch6)\") (const_int 0)))\n+\t (const_string \"yes\")\n+\n+\t (and (eq_attr \"arch\" \"nov6\")\n+\t      (ne (symbol_ref \"(TARGET_32BIT && !arm_arch6)\") (const_int 0)))\n+\t (const_string \"yes\")]\n+\t(const_string \"no\")))\n+\n+; Allows an insn to disable certain alternatives for reasons other than\n+; arch support.\n+(define_attr \"insn_enabled\" \"no,yes\"\n+  (const_string \"yes\"))\n+\n+; Enable all alternatives that are both arch_enabled and insn_enabled.\n+(define_attr \"enabled\" \"no,yes\"\n+  (if_then_else (eq_attr \"insn_enabled\" \"yes\")\n+\t\t(attr \"arch_enabled\")\n+\t\t(const_string \"no\")))\n+\n ; POOL_RANGE is how far away from a constant pool entry that this insn\n ; can be placed.  If the distance is zero, then this insn will never\n ; reference the pool.\n@@ -2697,26 +2750,28 @@\n   \"\n )\n \n-(define_insn_and_split \"*arm_iorsi3\"\n-  [(set (match_operand:SI         0 \"s_register_operand\" \"=r,r\")\n-\t(ior:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n-\t\t(match_operand:SI 2 \"reg_or_int_operand\" \"rI,?n\")))]\n-  \"TARGET_ARM\"\n+(define_insn_and_split \"*iorsi3_insn\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n+\t(ior:SI (match_operand:SI 1 \"s_register_operand\" \"%r,r,r\")\n+\t\t(match_operand:SI 2 \"reg_or_int_operand\" \"rI,K,?n\")))]\n+  \"TARGET_32BIT\"\n   \"@\n    orr%?\\\\t%0, %1, %2\n+   orn%?\\\\t%0, %1, #%B2\n    #\"\n-  \"TARGET_ARM\n+  \"TARGET_32BIT\n    && GET_CODE (operands[2]) == CONST_INT\n-   && !const_ok_for_arm (INTVAL (operands[2]))\"\n+   && !(const_ok_for_arm (INTVAL (operands[2]))\n+        || (TARGET_THUMB2 && const_ok_for_arm (~INTVAL (operands[2]))))\"\n   [(clobber (const_int 0))]\n-  \"\n+{\n   arm_split_constant (IOR, SImode, curr_insn, \n                       INTVAL (operands[2]), operands[0], operands[1], 0);\n   DONE;\n-  \"\n-  [(set_attr \"length\" \"4,16\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n+}\n+  [(set_attr \"length\" \"4,4,16\")\n+   (set_attr \"arch\" \"32,t2,32\")\n+   (set_attr \"predicable\" \"yes\")])\n \n (define_insn \"*thumb1_iorsi3_insn\"\n   [(set (match_operand:SI         0 \"register_operand\" \"=l\")\n@@ -3484,52 +3539,48 @@\n    (set_attr \"shift\" \"1\")]\n )\n \n-(define_insn \"*arm_notsi_shiftsi\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+(define_insn \"*not_shiftsi\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(not:SI (match_operator:SI 3 \"shift_operator\"\n-\t\t [(match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t  (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")])))]\n-  \"TARGET_ARM\"\n+\t\t [(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t\t  (match_operand:SI 2 \"shift_amount_operand\" \"M,rM\")])))]\n+  \"TARGET_32BIT\"\n   \"mvn%?\\\\t%0, %1%S3\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"shift\" \"1\")\n-   (set (attr \"type\") (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n-)\n+   (set_attr \"arch\" \"32,a\")\n+   (set_attr \"type\" \"alu_shift,alu_shift_reg\")])\n \n-(define_insn \"*arm_notsi_shiftsi_compare0\"\n+(define_insn \"*not_shiftsi_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (not:SI (match_operator:SI 3 \"shift_operator\"\n-\t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")]))\n-\t\t\t (const_int 0)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(compare:CC_NOOV\n+\t (not:SI (match_operator:SI 3 \"shift_operator\"\n+\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t\t   (match_operand:SI 2 \"shift_amount_operand\" \"M,rM\")]))\n+\t (const_int 0)))\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(not:SI (match_op_dup 3 [(match_dup 1) (match_dup 2)])))]\n-  \"TARGET_ARM\"\n+  \"TARGET_32BIT\"\n   \"mvn%.\\\\t%0, %1%S3\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"1\")\n-   (set (attr \"type\") (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n-)\n+   (set_attr \"arch\" \"32,a\")\n+   (set_attr \"type\" \"alu_shift,alu_shift_reg\")])\n \n-(define_insn \"*arm_not_shiftsi_compare0_scratch\"\n+(define_insn \"*not_shiftsi_compare0_scratch\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (not:SI (match_operator:SI 3 \"shift_operator\"\n-\t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")]))\n-\t\t\t (const_int 0)))\n-   (clobber (match_scratch:SI 0 \"=r\"))]\n-  \"TARGET_ARM\"\n+\t(compare:CC_NOOV\n+\t (not:SI (match_operator:SI 3 \"shift_operator\"\n+\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t\t   (match_operand:SI 2 \"shift_amount_operand\" \"M,rM\")]))\n+\t (const_int 0)))\n+   (clobber (match_scratch:SI 0 \"=r,r\"))]\n+  \"TARGET_32BIT\"\n   \"mvn%.\\\\t%0, %1%S3\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"1\")\n-   (set (attr \"type\") (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n-)\n+   (set_attr \"arch\" \"32,a\")\n+   (set_attr \"type\" \"alu_shift,alu_shift_reg\")])\n \n ;; We don't really have extzv, but defining this using shifts helps\n ;; to reduce register pressure later on.\n@@ -7025,35 +7076,31 @@\n   [(set_attr \"conds\" \"set\")]\n )\n \n-(define_insn \"*arm_cmpsi_shiftsi\"\n+(define_insn \"*cmpsi_shiftsi\"\n   [(set (reg:CC CC_REGNUM)\n-\t(compare:CC (match_operand:SI   0 \"s_register_operand\" \"r\")\n+\t(compare:CC (match_operand:SI   0 \"s_register_operand\" \"r,r\")\n \t\t    (match_operator:SI  3 \"shift_operator\"\n-\t\t     [(match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t      (match_operand:SI 2 \"arm_rhs_operand\"    \"rM\")])))]\n-  \"TARGET_ARM\"\n+\t\t     [(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t\t      (match_operand:SI 2 \"shift_amount_operand\" \"M,rM\")])))]\n+  \"TARGET_32BIT\"\n   \"cmp%?\\\\t%0, %1%S3\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"1\")\n-   (set (attr \"type\") (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n-)\n+   (set_attr \"arch\" \"32,a\")\n+   (set_attr \"type\" \"alu_shift,alu_shift_reg\")])\n \n-(define_insn \"*arm_cmpsi_shiftsi_swp\"\n+(define_insn \"*cmpsi_shiftsi_swp\"\n   [(set (reg:CC_SWP CC_REGNUM)\n \t(compare:CC_SWP (match_operator:SI 3 \"shift_operator\"\n-\t\t\t [(match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t\t  (match_operand:SI 2 \"reg_or_int_operand\" \"rM\")])\n-\t\t\t(match_operand:SI 0 \"s_register_operand\" \"r\")))]\n-  \"TARGET_ARM\"\n+\t\t\t [(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t\t\t  (match_operand:SI 2 \"shift_amount_operand\" \"M,rM\")])\n+\t\t\t(match_operand:SI 0 \"s_register_operand\" \"r,r\")))]\n+  \"TARGET_32BIT\"\n   \"cmp%?\\\\t%0, %1%S3\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"1\")\n-   (set (attr \"type\") (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n-)\n+   (set_attr \"arch\" \"32,a\")\n+   (set_attr \"type\" \"alu_shift,alu_shift_reg\")])\n \n (define_insn \"*arm_cmpsi_negshiftsi_si\"\n   [(set (reg:CC_Z CC_REGNUM)\n@@ -8405,20 +8452,28 @@\n ;; Patterns to allow combination of arithmetic, cond code and shifts\n \n (define_insn \"*arith_shiftsi\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n         (match_operator:SI 1 \"shiftable_operator\"\n           [(match_operator:SI 3 \"shift_operator\"\n-             [(match_operand:SI 4 \"s_register_operand\" \"r\")\n-              (match_operand:SI 5 \"reg_or_int_operand\" \"rI\")])\n-           (match_operand:SI 2 \"s_register_operand\" \"rk\")]))]\n-  \"TARGET_ARM\"\n+             [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n+              (match_operand:SI 5 \"shift_amount_operand\" \"M,r\")])\n+           (match_operand:SI 2 \"s_register_operand\" \"rk,rk\")]))]\n+  \"TARGET_32BIT\"\n   \"%i1%?\\\\t%0, %2, %4%S3\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"shift\" \"4\")\n-   (set (attr \"type\") (if_then_else (match_operand 5 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n-)\n+   (set_attr \"arch\" \"32,a\")\n+   ;; We have to make sure to disable the second alternative if\n+   ;; the shift_operator is MULT, since otherwise the insn will\n+   ;; also match a multiply_accumulate pattern and validate_change\n+   ;; will allow a replacement of the constant with a register\n+   ;; despite the checks done in shift_operator.\n+   (set_attr_alternative \"insn_enabled\"\n+\t\t\t [(const_string \"yes\")\n+\t\t\t  (if_then_else\n+\t\t\t   (match_operand:SI 3 \"mult_operator\" \"\")\n+\t\t\t   (const_string \"no\") (const_string \"yes\"))])\n+   (set_attr \"type\" \"alu_shift,alu_shift_reg\")])\n \n (define_split\n   [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n@@ -8430,7 +8485,7 @@\n \t    (match_operand:SI 6 \"s_register_operand\" \"\")])\n \t  (match_operand:SI 7 \"arm_rhs_operand\" \"\")]))\n    (clobber (match_operand:SI 8 \"s_register_operand\" \"\"))]\n-  \"TARGET_ARM\"\n+  \"TARGET_32BIT\"\n   [(set (match_dup 8)\n \t(match_op_dup 2 [(match_op_dup 3 [(match_dup 4) (match_dup 5)])\n \t\t\t (match_dup 6)]))\n@@ -8440,95 +8495,86 @@\n \n (define_insn \"*arith_shiftsi_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n-        (compare:CC_NOOV (match_operator:SI 1 \"shiftable_operator\"\n-\t\t          [(match_operator:SI 3 \"shift_operator\"\n-\t\t            [(match_operand:SI 4 \"s_register_operand\" \"r\")\n-\t\t             (match_operand:SI 5 \"reg_or_int_operand\" \"rI\")])\n-\t\t           (match_operand:SI 2 \"s_register_operand\" \"r\")])\n-\t\t\t (const_int 0)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+        (compare:CC_NOOV\n+\t (match_operator:SI 1 \"shiftable_operator\"\n+\t  [(match_operator:SI 3 \"shift_operator\"\n+\t    [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n+\t     (match_operand:SI 5 \"shift_amount_operand\" \"M,r\")])\n+\t   (match_operand:SI 2 \"s_register_operand\" \"r,r\")])\n+\t (const_int 0)))\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(match_op_dup 1 [(match_op_dup 3 [(match_dup 4) (match_dup 5)])\n \t\t\t (match_dup 2)]))]\n-  \"TARGET_ARM\"\n+  \"TARGET_32BIT\"\n   \"%i1%.\\\\t%0, %2, %4%S3\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"4\")\n-   (set (attr \"type\") (if_then_else (match_operand 5 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n-)\n+   (set_attr \"arch\" \"32,a\")\n+   (set_attr \"type\" \"alu_shift,alu_shift_reg\")])\n \n (define_insn \"*arith_shiftsi_compare0_scratch\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n-        (compare:CC_NOOV (match_operator:SI 1 \"shiftable_operator\"\n-\t\t          [(match_operator:SI 3 \"shift_operator\"\n-\t\t            [(match_operand:SI 4 \"s_register_operand\" \"r\")\n-\t\t             (match_operand:SI 5 \"reg_or_int_operand\" \"rI\")])\n-\t\t           (match_operand:SI 2 \"s_register_operand\" \"r\")])\n-\t\t\t (const_int 0)))\n-   (clobber (match_scratch:SI 0 \"=r\"))]\n-  \"TARGET_ARM\"\n+        (compare:CC_NOOV\n+\t (match_operator:SI 1 \"shiftable_operator\"\n+\t  [(match_operator:SI 3 \"shift_operator\"\n+\t    [(match_operand:SI 4 \"s_register_operand\" \"r,r\")\n+\t     (match_operand:SI 5 \"shift_amount_operand\" \"M,r\")])\n+\t   (match_operand:SI 2 \"s_register_operand\" \"r,r\")])\n+\t (const_int 0)))\n+   (clobber (match_scratch:SI 0 \"=r,r\"))]\n+  \"TARGET_32BIT\"\n   \"%i1%.\\\\t%0, %2, %4%S3\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"4\")\n-   (set (attr \"type\") (if_then_else (match_operand 5 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n-)\n+   (set_attr \"arch\" \"32,a\")\n+   (set_attr \"type\" \"alu_shift,alu_shift_reg\")])\n \n (define_insn \"*sub_shiftsi\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(minus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+\t(minus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n \t\t  (match_operator:SI 2 \"shift_operator\"\n-\t\t   [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t    (match_operand:SI 4 \"reg_or_int_operand\" \"rM\")])))]\n-  \"TARGET_ARM\"\n+\t\t   [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n+\t\t    (match_operand:SI 4 \"shift_amount_operand\" \"M,r\")])))]\n+  \"TARGET_32BIT\"\n   \"sub%?\\\\t%0, %1, %3%S2\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"shift\" \"3\")\n-   (set (attr \"type\") (if_then_else (match_operand 4 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n-)\n+   (set_attr \"arch\" \"32,a\")\n+   (set_attr \"type\" \"alu_shift,alu_shift_reg\")])\n \n (define_insn \"*sub_shiftsi_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV\n-\t (minus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t (minus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n \t\t   (match_operator:SI 2 \"shift_operator\"\n-\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t     (match_operand:SI 4 \"reg_or_int_operand\" \"rM\")]))\n+\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n+\t\t     (match_operand:SI 4 \"shift_amount_operand\" \"M,rM\")]))\n \t (const_int 0)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(minus:SI (match_dup 1) (match_op_dup 2 [(match_dup 3)\n-\t\t\t\t\t\t (match_dup 4)])))]\n-  \"TARGET_ARM\"\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+\t(minus:SI (match_dup 1)\n+\t\t  (match_op_dup 2 [(match_dup 3) (match_dup 4)])))]\n+  \"TARGET_32BIT\"\n   \"sub%.\\\\t%0, %1, %3%S2\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"3\")\n-   (set (attr \"type\") (if_then_else (match_operand 4 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n-)\n+   (set_attr \"arch\" \"32,a\")\n+   (set_attr \"type\" \"alu_shift,alu_shift_reg\")])\n \n (define_insn \"*sub_shiftsi_compare0_scratch\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV\n-\t (minus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t (minus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n \t\t   (match_operator:SI 2 \"shift_operator\"\n-\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t     (match_operand:SI 4 \"reg_or_int_operand\" \"rM\")]))\n+\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n+\t\t     (match_operand:SI 4 \"shift_amount_operand\" \"M,rM\")]))\n \t (const_int 0)))\n-   (clobber (match_scratch:SI 0 \"=r\"))]\n-  \"TARGET_ARM\"\n+   (clobber (match_scratch:SI 0 \"=r,r\"))]\n+  \"TARGET_32BIT\"\n   \"sub%.\\\\t%0, %1, %3%S2\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"3\")\n-   (set (attr \"type\") (if_then_else (match_operand 4 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n-)\n-\n+   (set_attr \"arch\" \"32,a\")\n+   (set_attr \"type\" \"alu_shift,alu_shift_reg\")])\n \f\n \n (define_insn \"*and_scc\""}, {"sha": "da3b6dcd4fd1bf5badcb727e3ec13bc35f078590", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29e2982e4e8fe39db44ac1e9b06367e209b4f76/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29e2982e4e8fe39db44ac1e9b06367e209b4f76/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=c29e2982e4e8fe39db44ac1e9b06367e209b4f76", "patch": "@@ -128,6 +128,11 @@\n   (ior (match_operand 0 \"arm_rhs_operand\")\n        (match_operand 0 \"memory_operand\")))\n \n+(define_predicate \"shift_amount_operand\"\n+  (ior (and (match_test \"TARGET_ARM\")\n+\t    (match_operand 0 \"s_register_operand\"))\n+       (match_operand 0 \"const_int_operand\")))\n+\n (define_predicate \"arm_add_operand\"\n   (ior (match_operand 0 \"arm_rhs_operand\")\n        (match_operand 0 \"arm_neg_immediate_operand\")))\n@@ -221,6 +226,10 @@\n \t    (match_code \"ashift,ashiftrt,lshiftrt,rotatert\"))\n        (match_test \"mode == GET_MODE (op)\")))\n \n+;; True for MULT, to identify which variant of shift_operator is in use.\n+(define_special_predicate \"mult_operator\"\n+  (match_code \"mult\"))\n+\n ;; True for operators that have 16-bit thumb variants.  */\n (define_special_predicate \"thumb_16bit_operator\"\n   (match_code \"plus,minus,and,ior,xor\"))"}, {"sha": "f6865a7db0027b1d029c6a68a56da0ef75536027", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 2, "deletions": 208, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29e2982e4e8fe39db44ac1e9b06367e209b4f76/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29e2982e4e8fe39db44ac1e9b06367e209b4f76/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=c29e2982e4e8fe39db44ac1e9b06367e209b4f76", "patch": "@@ -120,47 +120,6 @@\n    (set_attr \"length\" \"10,10,14\")]\n )\n \n-(define_insn \"*thumb2_notsi_shiftsi\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(not:SI (match_operator:SI 3 \"shift_operator\"\n-\t\t [(match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t  (match_operand:SI 2 \"const_int_operand\"  \"M\")])))]\n-  \"TARGET_THUMB2\"\n-  \"mvn%?\\\\t%0, %1%S3\"\n-  [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"shift\" \"1\")\n-   (set_attr \"type\" \"alu_shift\")]\n-)\n-\n-(define_insn \"*thumb2_notsi_shiftsi_compare0\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (not:SI (match_operator:SI 3 \"shift_operator\"\n-\t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 2 \"const_int_operand\"  \"M\")]))\n-\t\t\t (const_int 0)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(not:SI (match_op_dup 3 [(match_dup 1) (match_dup 2)])))]\n-  \"TARGET_THUMB2\"\n-  \"mvn%.\\\\t%0, %1%S3\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"shift\" \"1\")\n-   (set_attr \"type\" \"alu_shift\")]\n-)\n-\n-(define_insn \"*thumb2_not_shiftsi_compare0_scratch\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV (not:SI (match_operator:SI 3 \"shift_operator\"\n-\t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 2 \"const_int_operand\"  \"M\")]))\n-\t\t\t (const_int 0)))\n-   (clobber (match_scratch:SI 0 \"=r\"))]\n-  \"TARGET_THUMB2\"\n-  \"mvn%.\\\\t%0, %1%S3\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"shift\" \"1\")\n-   (set_attr \"type\" \"alu_shift\")]\n-)\n-\n ;; Thumb-2 does not have rsc, so use a clever trick with shifter operands.\n (define_insn \"*thumb2_negdi2\"\n   [(set (match_operand:DI         0 \"s_register_operand\" \"=&r,r\")\n@@ -260,32 +219,6 @@\n    (set_attr \"neg_pool_range\" \"*,*,*,250\")]\n )\n \n-(define_insn \"*thumb2_cmpsi_shiftsi\"\n-  [(set (reg:CC CC_REGNUM)\n-\t(compare:CC (match_operand:SI   0 \"s_register_operand\" \"r\")\n-\t\t    (match_operator:SI  3 \"shift_operator\"\n-\t\t     [(match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t      (match_operand:SI 2 \"const_int_operand\"  \"M\")])))]\n-  \"TARGET_THUMB2\"\n-  \"cmp%?\\\\t%0, %1%S3\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"shift\" \"1\")\n-   (set_attr \"type\" \"alu_shift\")]\n-)\n-\n-(define_insn \"*thumb2_cmpsi_shiftsi_swp\"\n-  [(set (reg:CC_SWP CC_REGNUM)\n-\t(compare:CC_SWP (match_operator:SI 3 \"shift_operator\"\n-\t\t\t [(match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t\t  (match_operand:SI 2 \"const_int_operand\" \"M\")])\n-\t\t\t(match_operand:SI 0 \"s_register_operand\" \"r\")))]\n-  \"TARGET_THUMB2\"\n-  \"cmp%?\\\\t%0, %1%S3\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"shift\" \"1\")\n-   (set_attr \"type\" \"alu_shift\")]\n-)\n-\n (define_insn \"*thumb2_cmpsi_neg_shiftsi\"\n   [(set (reg:CC CC_REGNUM)\n \t(compare:CC (match_operand:SI 0 \"s_register_operand\" \"r\")\n@@ -396,122 +329,6 @@\n ;; addresses will have the thumb bit set correctly. \n \n \n-;; Patterns to allow combination of arithmetic, cond code and shifts\n-\n-(define_insn \"*thumb2_arith_shiftsi\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-        (match_operator:SI 1 \"shiftable_operator\"\n-          [(match_operator:SI 3 \"shift_operator\"\n-             [(match_operand:SI 4 \"s_register_operand\" \"r\")\n-              (match_operand:SI 5 \"const_int_operand\" \"M\")])\n-           (match_operand:SI 2 \"s_register_operand\" \"rk\")]))]\n-  \"TARGET_THUMB2\"\n-  \"%i1%?\\\\t%0, %2, %4%S3\"\n-  [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"shift\" \"4\")\n-   (set_attr \"type\" \"alu_shift\")]\n-)\n-\n-;; ??? What does this splitter do?  Copied from the ARM version\n-(define_split\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t(match_operator:SI 1 \"shiftable_operator\"\n-\t [(match_operator:SI 2 \"shiftable_operator\"\n-\t   [(match_operator:SI 3 \"shift_operator\"\n-\t     [(match_operand:SI 4 \"s_register_operand\" \"\")\n-\t      (match_operand:SI 5 \"const_int_operand\" \"\")])\n-\t    (match_operand:SI 6 \"s_register_operand\" \"\")])\n-\t  (match_operand:SI 7 \"arm_rhs_operand\" \"\")]))\n-   (clobber (match_operand:SI 8 \"s_register_operand\" \"\"))]\n-  \"TARGET_32BIT\"\n-  [(set (match_dup 8)\n-\t(match_op_dup 2 [(match_op_dup 3 [(match_dup 4) (match_dup 5)])\n-\t\t\t (match_dup 6)]))\n-   (set (match_dup 0)\n-\t(match_op_dup 1 [(match_dup 8) (match_dup 7)]))]\n-  \"\")\n-\n-(define_insn \"*thumb2_arith_shiftsi_compare0\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-        (compare:CC_NOOV (match_operator:SI 1 \"shiftable_operator\"\n-\t\t          [(match_operator:SI 3 \"shift_operator\"\n-\t\t            [(match_operand:SI 4 \"s_register_operand\" \"r\")\n-\t\t             (match_operand:SI 5 \"const_int_operand\" \"M\")])\n-\t\t           (match_operand:SI 2 \"s_register_operand\" \"r\")])\n-\t\t\t (const_int 0)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(match_op_dup 1 [(match_op_dup 3 [(match_dup 4) (match_dup 5)])\n-\t\t\t (match_dup 2)]))]\n-  \"TARGET_32BIT\"\n-  \"%i1%.\\\\t%0, %2, %4%S3\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"shift\" \"4\")\n-   (set_attr \"type\" \"alu_shift\")]\n-)\n-\n-(define_insn \"*thumb2_arith_shiftsi_compare0_scratch\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-        (compare:CC_NOOV (match_operator:SI 1 \"shiftable_operator\"\n-\t\t          [(match_operator:SI 3 \"shift_operator\"\n-\t\t            [(match_operand:SI 4 \"s_register_operand\" \"r\")\n-\t\t             (match_operand:SI 5 \"const_int_operand\" \"M\")])\n-\t\t           (match_operand:SI 2 \"s_register_operand\" \"r\")])\n-\t\t\t (const_int 0)))\n-   (clobber (match_scratch:SI 0 \"=r\"))]\n-  \"TARGET_THUMB2\"\n-  \"%i1%.\\\\t%0, %2, %4%S3\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"shift\" \"4\")\n-   (set_attr \"type\" \"alu_shift\")]\n-)\n-\n-(define_insn \"*thumb2_sub_shiftsi\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(minus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t  (match_operator:SI 2 \"shift_operator\"\n-\t\t   [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t    (match_operand:SI 4 \"const_int_operand\" \"M\")])))]\n-  \"TARGET_THUMB2\"\n-  \"sub%?\\\\t%0, %1, %3%S2\"\n-  [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"shift\" \"3\")\n-   (set_attr \"type\" \"alu_shift\")]\n-)\n-\n-(define_insn \"*thumb2_sub_shiftsi_compare0\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV\n-\t (minus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t   (match_operator:SI 2 \"shift_operator\"\n-\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t     (match_operand:SI 4 \"const_int_operand\" \"M\")]))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(minus:SI (match_dup 1) (match_op_dup 2 [(match_dup 3)\n-\t\t\t\t\t\t (match_dup 4)])))]\n-  \"TARGET_THUMB2\"\n-  \"sub%.\\\\t%0, %1, %3%S2\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"shift\" \"3\")\n-   (set_attr \"type\" \"alu_shift\")]\n-)\n-\n-(define_insn \"*thumb2_sub_shiftsi_compare0_scratch\"\n-  [(set (reg:CC_NOOV CC_REGNUM)\n-\t(compare:CC_NOOV\n-\t (minus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t   (match_operator:SI 2 \"shift_operator\"\n-\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t     (match_operand:SI 4 \"const_int_operand\" \"M\")]))\n-\t (const_int 0)))\n-   (clobber (match_scratch:SI 0 \"=r\"))]\n-  \"TARGET_THUMB2\"\n-  \"sub%.\\\\t%0, %1, %3%S2\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"shift\" \"3\")\n-   (set_attr \"type\" \"alu_shift\")]\n-)\n-\n (define_insn \"*thumb2_and_scc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(and:SI (match_operator:SI 1 \"arm_comparison_operator\"\n@@ -1365,7 +1182,7 @@\n    (set_attr \"length\" \"2\")]\n )\n \n-(define_insn \"orsi_notsi_si\"\n+(define_insn \"*orsi_notsi_si\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(ior:SI (not:SI (match_operand:SI 2 \"s_register_operand\" \"r\"))\n \t\t(match_operand:SI 1 \"s_register_operand\" \"r\")))]\n@@ -1374,7 +1191,7 @@\n   [(set_attr \"predicable\" \"yes\")]\n )\n \n-(define_insn \"*thumb_orsi_not_shiftsi_si\"\n+(define_insn \"*orsi_not_shiftsi_si\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(ior:SI (not:SI (match_operator:SI 4 \"shift_operator\"\n \t\t\t [(match_operand:SI 2 \"s_register_operand\" \"r\")\n@@ -1387,29 +1204,6 @@\n    (set_attr \"type\" \"alu_shift\")]\n )\n \n-(define_insn_and_split \"*thumb2_iorsi3\"\n-  [(set (match_operand:SI         0 \"s_register_operand\" \"=r,r,r\")\n-\t(ior:SI (match_operand:SI 1 \"s_register_operand\" \"r,r,r\")\n-\t\t(match_operand:SI 2 \"reg_or_int_operand\" \"rI,K,?n\")))]\n-  \"TARGET_THUMB2\"\n-  \"@\n-   orr%?\\\\t%0, %1, %2\n-   orn%?\\\\t%0, %1, #%B2\n-   #\"\n-  \"TARGET_THUMB2\n-   && GET_CODE (operands[2]) == CONST_INT\n-   && !(const_ok_for_arm (INTVAL (operands[2]))\n-\t|| const_ok_for_arm (~INTVAL (operands[2])))\"\n-  [(clobber (const_int 0))]\n-  \"\n-  arm_split_constant  (IOR, SImode, curr_insn, \n-\t               INTVAL (operands[2]), operands[0], operands[1], 0);\n-  DONE;\n-  \"\n-  [(set_attr \"length\" \"4,4,16\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n (define_peephole2\n   [(set (match_operand:CC_NOOV 0 \"cc_register\" \"\")\n \t(compare:CC_NOOV (zero_extract:SI"}]}