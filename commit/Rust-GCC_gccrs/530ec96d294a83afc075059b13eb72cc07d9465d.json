{"sha": "530ec96d294a83afc075059b13eb72cc07d9465d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTMwZWM5NmQyOTRhODNhZmMwNzUwNTliMTNlYjcyY2MwN2Q5NDY1ZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-04-13T21:16:42Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-04-13T21:16:42Z"}, "message": "cp-tree.h (DELTA2_FROM_PTRMEMFUNC): Remove.\n\n\t* cp-tree.h (DELTA2_FROM_PTRMEMFUNC): Remove.\n\t(expand_ptremfunc_cst): Change prototype.\n\t(delta2_from_ptrmemfunc): Remove.\n\t* expr.c (cplus_expand_constant): Adjust call to\n\texpand_ptrmemfunc_cst.\n\t* typeck.c (build_ptrmemfunc1): Simplify.\n\t(build_ptrmemfunc): Make sure that casting a PTRMEM_CST still\n\tresults in a constant.\n\t(expand_ptrmemfunc_cst): Remove idx and delta2 parameters.\n\t(delta2_from_ptrmemfunc): Remove.\n\t(pfn_from_ptrmemfunc): Adjust call to expand_ptrmemfunc_cst.\n\nFrom-SVN: r41341", "tree": {"sha": "c3d1036d74074e85d94f2d2cea5f24ae690d935a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3d1036d74074e85d94f2d2cea5f24ae690d935a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/530ec96d294a83afc075059b13eb72cc07d9465d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/530ec96d294a83afc075059b13eb72cc07d9465d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/530ec96d294a83afc075059b13eb72cc07d9465d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/530ec96d294a83afc075059b13eb72cc07d9465d/comments", "author": null, "committer": null, "parents": [{"sha": "2840aebf0851ea62baa82d4c45742e08d861acaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2840aebf0851ea62baa82d4c45742e08d861acaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2840aebf0851ea62baa82d4c45742e08d861acaa"}], "stats": {"total": 123, "additions": 38, "deletions": 85}, "files": [{"sha": "53616a3341ca1e0ff7d3f578acce86f2d837b8d7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530ec96d294a83afc075059b13eb72cc07d9465d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530ec96d294a83afc075059b13eb72cc07d9465d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=530ec96d294a83afc075059b13eb72cc07d9465d", "patch": "@@ -1,3 +1,17 @@\n+2001-04-13  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (DELTA2_FROM_PTRMEMFUNC): Remove.\n+\t(expand_ptremfunc_cst): Change prototype.\n+\t(delta2_from_ptrmemfunc): Remove.\n+\t* expr.c (cplus_expand_constant): Adjust call to\n+\texpand_ptrmemfunc_cst.\n+\t* typeck.c (build_ptrmemfunc1): Simplify.\n+\t(build_ptrmemfunc): Make sure that casting a PTRMEM_CST still\n+\tresults in a constant.\n+\t(expand_ptrmemfunc_cst): Remove idx and delta2 parameters.\n+\t(delta2_from_ptrmemfunc): Remove.\n+\t(pfn_from_ptrmemfunc): Adjust call to expand_ptrmemfunc_cst.\n+\t\n 2001-04-12  Jason Merrill  <jason_merrill@redhat.com>\n \n \t* cp-tree.h (decl_namespace_list): New macro."}, {"sha": "de82fa6981c50cc15da6ce04c5cb0a0a26f8ab37", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530ec96d294a83afc075059b13eb72cc07d9465d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530ec96d294a83afc075059b13eb72cc07d9465d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=530ec96d294a83afc075059b13eb72cc07d9465d", "patch": "@@ -2688,8 +2688,7 @@ extern int flag_new_for_scope;\n    hashed POINTER_TYPE, and can only be used on the POINTER_TYPE.  */\n #define TYPE_GET_PTRMEMFUNC_TYPE(NODE) ((tree)TYPE_LANG_SPECIFIC(NODE))\n #define TYPE_SET_PTRMEMFUNC_TYPE(NODE, VALUE) (TYPE_LANG_SPECIFIC(NODE) = ((struct lang_type *)(void*)(VALUE)))\n-/* These are to get the delta2 and pfn fields from a TYPE_PTRMEMFUNC_P.  */\n-#define DELTA2_FROM_PTRMEMFUNC(NODE) delta2_from_ptrmemfunc ((NODE))\n+/* Returns the pfn field from a TYPE_PTRMEMFUNC_P.  */\n #define PFN_FROM_PTRMEMFUNC(NODE) pfn_from_ptrmemfunc ((NODE))\n \n /* For a pointer-to-member type of the form `T X::*', this is `X'.  */\n@@ -4461,8 +4460,7 @@ extern int cp_has_mutable_p                     PARAMS ((tree));\n extern int at_least_as_qualified_p              PARAMS ((tree, tree));\n extern int more_qualified_p                     PARAMS ((tree, tree));\n extern tree build_ptrmemfunc1                   PARAMS ((tree, tree, tree));\n-extern void expand_ptrmemfunc_cst               PARAMS ((tree, tree *, tree *, tree *, tree *));\n-extern tree delta2_from_ptrmemfunc              PARAMS ((tree));\n+extern void expand_ptrmemfunc_cst               PARAMS ((tree, tree *, tree *));\n extern tree pfn_from_ptrmemfunc                 PARAMS ((tree));\n extern tree type_after_usual_arithmetic_conversions PARAMS ((tree, tree));\n extern tree composite_pointer_type              PARAMS ((tree, tree, tree, tree,"}, {"sha": "6855160fc19070c66b8a7352f8b759c838ff6abc", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530ec96d294a83afc075059b13eb72cc07d9465d/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530ec96d294a83afc075059b13eb72cc07d9465d/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=530ec96d294a83afc075059b13eb72cc07d9465d", "patch": "@@ -60,9 +60,10 @@ cplus_expand_constant (cst)\n \t  }\n \telse\n \t  {\n-\t    tree delta, idx, pfn, delta2;\n+\t    tree delta;\n+\t    tree pfn;\n \n-\t    expand_ptrmemfunc_cst (cst, &delta, &idx, &pfn, &delta2);\n+\t    expand_ptrmemfunc_cst (cst, &delta, &pfn);\n \t    cst = build_ptrmemfunc1 (type, delta, pfn);\n \t  }\n       }"}, {"sha": "5371c0e99779b4884f9f8eea98f859c6154c7068", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 19, "deletions": 79, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530ec96d294a83afc075059b13eb72cc07d9465d/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530ec96d294a83afc075059b13eb72cc07d9465d/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=530ec96d294a83afc075059b13eb72cc07d9465d", "patch": "@@ -6000,51 +6000,25 @@ build_ptrmemfunc1 (type, delta, pfn)\n {\n   tree u = NULL_TREE;\n   tree delta_field;\n-  tree idx_field;\n-  tree pfn_or_delta2_field;\n   tree pfn_field;\n-  tree delta2_field;\n-  tree subtype;\n-  int allconstant, allsimple;\n \n   /* Pull the FIELD_DECLs out of the type.  */\n   pfn_field = TYPE_FIELDS (type);\n   delta_field = TREE_CHAIN (pfn_field);\n-  idx_field = NULL_TREE;\n-  pfn_or_delta2_field = NULL_TREE;\n-  delta2_field = NULL_TREE;\n-  subtype = NULL_TREE;\n \n   /* Make sure DELTA has the type we want.  */\n   delta = convert_and_check (delta_type_node, delta);\n \n-  /* Keep track of whether the initializer is a) constant, and b) can\n-     be done statically.  */\n-  allconstant = TREE_CONSTANT (delta);\n-  allsimple = (initializer_constant_valid_p (delta, TREE_TYPE (delta)) \n-\t       != NULL_TREE);\n-\n-  if (pfn)\n-    {\n-      /* A non-virtual function.  */\n-      allconstant &= TREE_CONSTANT (pfn);\n-      allsimple &= (initializer_constant_valid_p (pfn, TREE_TYPE (pfn)) \n-\t\t    != NULL_TREE);\n-    }\n-  else\n-    {\n-      /* A virtual function.  */\n-      allconstant &= TREE_CONSTANT (pfn);\n-      allsimple &= (initializer_constant_valid_p (pfn, TREE_TYPE (pfn)) \n-\t\t    != NULL_TREE);\n-    }\n-\n   /* Finish creating the initializer.  */\n   u = tree_cons (pfn_field, pfn,\n \t\t build_tree_list (delta_field, delta));\n   u = build (CONSTRUCTOR, type, NULL_TREE, u);\n-  TREE_CONSTANT (u) = allconstant;\n-  TREE_STATIC (u) = allconstant && allsimple;\n+  TREE_CONSTANT (u) = TREE_CONSTANT (pfn) && TREE_CONSTANT (delta);\n+  TREE_STATIC (u) = (TREE_CONSTANT (u)\n+\t\t     && (initializer_constant_valid_p (pfn, TREE_TYPE (pfn))\n+\t\t\t != NULL_TREE)\n+\t\t     && (initializer_constant_valid_p (delta, TREE_TYPE (delta)) \n+\t\t\t != NULL_TREE));\n   return u;\n }\n \n@@ -6071,7 +6045,7 @@ build_ptrmemfunc (type, pfn, force)\n   /* Handle multiple conversions of pointer to member functions.  */\n   if (TYPE_PTRMEMFUNC_P (TREE_TYPE (pfn)))\n     {\n-      tree delta = integer_zero_node;\n+      tree delta = NULL_TREE;\n       tree npfn = NULL_TREE;\n       tree n;\n \n@@ -6099,10 +6073,17 @@ build_ptrmemfunc (type, pfn, force)\n       if (TREE_SIDE_EFFECTS (pfn))\n \tpfn = save_expr (pfn);\n \n+      /* Obtain the function pointer and the current DELTA.  */\n+      if (TREE_CODE (pfn) == PTRMEM_CST)\n+\texpand_ptrmemfunc_cst (pfn, &delta, &npfn);\n+      else\n+\t{\n+\t  npfn = build_component_ref (pfn, pfn_identifier, NULL_TREE, 0);\n+\t  delta = build_component_ref (pfn, delta_identifier, NULL_TREE, 0);\n+\t}\n+\n       /* Under the new ABI, the conversion is easy.  Just adjust\n \t the DELTA field.  */\n-      npfn = build_component_ref (pfn, pfn_identifier, NULL_TREE, 0);\n-      delta = build_component_ref (pfn, delta_identifier, NULL_TREE, 0);\n       delta = cp_convert (ptrdiff_type_node, delta);\n       delta = cp_build_binary_op (PLUS_EXPR, delta, n);\n       return build_ptrmemfunc1 (to_type, delta, npfn);\n@@ -6133,12 +6114,10 @@ build_ptrmemfunc (type, pfn, force)\n    integer_type_node.  */\n \n void\n-expand_ptrmemfunc_cst (cst, delta, idx, pfn, delta2)\n+expand_ptrmemfunc_cst (cst, delta, pfn)\n      tree cst;\n      tree *delta;\n-     tree *idx;\n      tree *pfn;\n-     tree *delta2;\n {\n   tree type = TREE_TYPE (cst);\n   tree fn = PTRMEM_CST_MEMBER (cst);\n@@ -6156,11 +6135,7 @@ expand_ptrmemfunc_cst (cst, delta, idx, pfn, delta2)\n   *delta = get_delta_difference (fn_class, ptr_class, /*force=*/0);\n \n   if (!DECL_VIRTUAL_P (fn))\n-    {\n-      *idx = NULL_TREE;\n-      *pfn = convert (TYPE_PTRMEMFUNC_FN_TYPE (type), build_addr_func (fn));\n-      *delta2 = NULL_TREE;\n-    }\n+    *pfn = convert (TYPE_PTRMEMFUNC_FN_TYPE (type), build_addr_func (fn));\n   else\n     {\n       /* If we're dealing with a virtual function, we have to adjust 'this'\n@@ -6173,49 +6148,16 @@ expand_ptrmemfunc_cst (cst, delta, idx, pfn, delta2)\n \n       /* Under the new ABI, we set PFN to the vtable offset, plus\n \t one, at which the function can be found.  */\n-      *idx = NULL_TREE;\n       *pfn = fold (build (MULT_EXPR, integer_type_node,\n \t\t\t  DECL_VINDEX (fn), \n \t\t\t  TYPE_SIZE_UNIT (vtable_entry_type)));\n       *pfn = fold (build (PLUS_EXPR, integer_type_node, *pfn,\n \t\t\t  integer_one_node));\n       *pfn = fold (build1 (NOP_EXPR, TYPE_PTRMEMFUNC_FN_TYPE (type),\n \t\t\t   *pfn));\n-\n-      /* Offset from an object of PTR_CLASS to the vptr for ORIG_CLASS.  */\n-      *delta2 = fold (build (PLUS_EXPR, integer_type_node, *delta,\n-\t\t\t     get_vfield_offset (TYPE_BINFO (orig_class))));\n     }\n }\n \n-/* Return an expression for DELTA2 from the pointer-to-member function\n-   given by T.  */\n-\n-tree\n-delta2_from_ptrmemfunc (t)\n-     tree t;\n-{\n-  my_friendly_assert (0, 20000221);\n-\n-  if (TREE_CODE (t) == PTRMEM_CST)\n-    {\n-      tree delta;\n-      tree idx;\n-      tree pfn;\n-      tree delta2;\n-      \n-      expand_ptrmemfunc_cst (t, &delta, &idx, &pfn, &delta2);\n-      if (delta2)\n-\treturn delta2;\n-    }\n-\n-  return (build_component_ref \n-\t  (build_component_ref (t,\n-\t\t\t\tpfn_or_delta2_identifier, NULL_TREE,\n-\t\t\t\t0), \n-\t   delta2_identifier, NULL_TREE, 0)); \n-}\n-\n /* Return an expression for PFN from the pointer-to-member function\n    given by T.  */\n \n@@ -6226,11 +6168,9 @@ pfn_from_ptrmemfunc (t)\n   if (TREE_CODE (t) == PTRMEM_CST)\n     {\n       tree delta;\n-      tree idx;\n       tree pfn;\n-      tree delta2;\n       \n-      expand_ptrmemfunc_cst (t, &delta, &idx, &pfn, &delta2);\n+      expand_ptrmemfunc_cst (t, &delta, &pfn);\n       if (pfn)\n \treturn pfn;\n     }"}]}