{"sha": "157be8f67b0ff8906b93ca4b7ee178f2e44fa725", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU3YmU4ZjY3YjBmZjg5MDZiOTNjYTRiN2VlMTc4ZjJlNDRmYTcyNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2010-07-19T14:42:50Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2010-07-19T14:42:50Z"}, "message": "Reliably change cgraph_state to SSA form.\n\nFrom-SVN: r162306", "tree": {"sha": "87cca400d98eb86595a987dbae508b5c25a54f20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87cca400d98eb86595a987dbae508b5c25a54f20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/157be8f67b0ff8906b93ca4b7ee178f2e44fa725", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/157be8f67b0ff8906b93ca4b7ee178f2e44fa725", "html_url": "https://github.com/Rust-GCC/gccrs/commit/157be8f67b0ff8906b93ca4b7ee178f2e44fa725", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/157be8f67b0ff8906b93ca4b7ee178f2e44fa725/comments", "author": null, "committer": null, "parents": [{"sha": "ca90e7f6c12ddcf9f7ac890d07e168b0f2f21f1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca90e7f6c12ddcf9f7ac890d07e168b0f2f21f1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca90e7f6c12ddcf9f7ac890d07e168b0f2f21f1a"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "118ada7e3e7019502396b2f270a5c022e2e7c0df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157be8f67b0ff8906b93ca4b7ee178f2e44fa725/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157be8f67b0ff8906b93ca4b7ee178f2e44fa725/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=157be8f67b0ff8906b93ca4b7ee178f2e44fa725", "patch": "@@ -1,3 +1,10 @@\n+2010-07-19  Richard Henderson  <rth@redhat.com>\n+\n+\t* tree-optimize.c (execute_all_early_local_passes): New.  Change\n+\tcgraph_state here ...\n+\t(execute_early_local_optimizations): ... not here.  Remove.\n+\t(pass_early_local_passes, pass_all_early_optimizations): Update.\n+\n 2010-07-19  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* postreload.c (reload_combine_closest_single_use): Ignore the\n@@ -11,6 +18,7 @@\n \t(reload_combine): Use control_flow_insn_p rather than JUMP_P.\n \n 2010-07-19  Bingfeng Mei  <bmei@broadcom.com>\n+\n \t* ddg.c (create_ddg): Exclude nodes of debug_insn in counting nodes\n         of a loop.\n         * loop-doloop.c (doloop_condition_get): Skip possible debug_insn."}, {"sha": "5df3fdb75cf5b4421135ec58cec9a1d03ffb6032", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157be8f67b0ff8906b93ca4b7ee178f2e44fa725/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157be8f67b0ff8906b93ca4b7ee178f2e44fa725/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=157be8f67b0ff8906b93ca4b7ee178f2e44fa725", "patch": "@@ -87,13 +87,27 @@ gate_all_early_local_passes (void)\n   return (!seen_error () && !in_lto_p);\n }\n \n+static unsigned int\n+execute_all_early_local_passes (void)\n+{\n+  /* Once this pass (and its sub-passes) are complete, all functions\n+     will be in SSA form.  Technically this state change is happening\n+     a tad early, since the sub-passes have not yet run, but since\n+     none of the sub-passes are IPA passes and do not create new\n+     functions, this is ok.  We're setting this value for the benefit\n+     of IPA passes that follow.  */\n+  if (cgraph_state < CGRAPH_STATE_IPA_SSA)\n+    cgraph_state = CGRAPH_STATE_IPA_SSA;\n+  return 0;\n+}\n+\n struct simple_ipa_opt_pass pass_early_local_passes =\n {\n  {\n   SIMPLE_IPA_PASS,\n   \"early_local_cleanups\",\t\t/* name */\n   gate_all_early_local_passes,\t\t/* gate */\n-  NULL,\t\t\t\t\t/* execute */\n+  execute_all_early_local_passes,\t/* execute */\n   NULL,\t\t\t\t\t/* sub */\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n@@ -106,18 +120,6 @@ struct simple_ipa_opt_pass pass_early_local_passes =\n  }\n };\n \n-static unsigned int\n-execute_early_local_optimizations (void)\n-{\n-  /* First time we start with early optimization we need to advance\n-     cgraph state so newly inserted functions are also early optimized.\n-     However we execute early local optimizations for lately inserted\n-     functions, in that case don't reset cgraph state back to IPA_SSA.  */\n-  if (cgraph_state < CGRAPH_STATE_IPA_SSA)\n-    cgraph_state = CGRAPH_STATE_IPA_SSA;\n-  return 0;\n-}\n-\n /* Gate: execute, or not, all of the non-trivial optimizations.  */\n \n static bool\n@@ -134,7 +136,7 @@ struct gimple_opt_pass pass_all_early_optimizations =\n   GIMPLE_PASS,\n   \"early_optimizations\",\t\t/* name */\n   gate_all_early_optimizations,\t\t/* gate */\n-  execute_early_local_optimizations,\t/* execute */\n+  NULL,\t\t\t\t\t/* execute */\n   NULL,\t\t\t\t\t/* sub */\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */"}]}