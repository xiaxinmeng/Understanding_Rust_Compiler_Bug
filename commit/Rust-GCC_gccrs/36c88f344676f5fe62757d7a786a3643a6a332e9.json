{"sha": "36c88f344676f5fe62757d7a786a3643a6a332e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZjODhmMzQ0Njc2ZjVmZTYyNzU3ZDdhNzg2YTM2NDNhNmEzMzJlOQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-01-03T06:30:13Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-01-03T06:30:13Z"}, "message": "tree-ssa-propagate.c (cfg_blocks): Change the type to VEC(basic_block,heap) *.\n\n\t* tree-ssa-propagate.c (cfg_blocks): Change the type to\n\tVEC(basic_block,heap) *.\n\t(cfg_blocks_add, cfg_blocks_get, ssa_prop_init,\n\tssa_prop_fini): Adjust the uses of cfg_blocks.\n\nFrom-SVN: r109266", "tree": {"sha": "637b478b7c588dc16981bd6e753ad1a23ceffc35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/637b478b7c588dc16981bd6e753ad1a23ceffc35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36c88f344676f5fe62757d7a786a3643a6a332e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36c88f344676f5fe62757d7a786a3643a6a332e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36c88f344676f5fe62757d7a786a3643a6a332e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36c88f344676f5fe62757d7a786a3643a6a332e9/comments", "author": null, "committer": null, "parents": [{"sha": "e597f337e43e79b0427afe8bce99af767da17d53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e597f337e43e79b0427afe8bce99af767da17d53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e597f337e43e79b0427afe8bce99af767da17d53"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "68f4e38ab4068c9a3fb608529160347d5581b49a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36c88f344676f5fe62757d7a786a3643a6a332e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36c88f344676f5fe62757d7a786a3643a6a332e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36c88f344676f5fe62757d7a786a3643a6a332e9", "patch": "@@ -5,6 +5,11 @@\n \t* tree-cfg.c (init_empty_tree_cfg, label_to_block_fn,\n \tset_bb_for_stmt): Adjust the uses of x_label_to_block_map.\n \n+\t* tree-ssa-propagate.c (cfg_blocks): Change the type to\n+\tVEC(basic_block,heap) *.\n+\t(cfg_blocks_add, cfg_blocks_get, ssa_prop_init,\n+\tssa_prop_fini): Adjust the uses of cfg_blocks.\n+\n 2006-01-03  Steven Bosscher  <stevenb.gcc@gmail.com>\n \n \t* fold-const.c (operand_equal_p): Accept a NULL operand 0 for"}, {"sha": "d8ba253b9d50900331fd481749e776c139786f54", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36c88f344676f5fe62757d7a786a3643a6a332e9/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36c88f344676f5fe62757d7a786a3643a6a332e9/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=36c88f344676f5fe62757d7a786a3643a6a332e9", "patch": "@@ -130,7 +130,7 @@ static ssa_prop_visit_phi_fn ssa_prop_visit_phi;\n static sbitmap executable_blocks;\n \n /* Array of control flow edges on the worklist.  */\n-static GTY(()) varray_type cfg_blocks = NULL;\n+static VEC(basic_block,heap) *cfg_blocks;\n \n static unsigned int cfg_blocks_num = 0;\n static int cfg_blocks_tail;\n@@ -187,19 +187,23 @@ cfg_blocks_add (basic_block bb)\n   else\n     {\n       cfg_blocks_num++;\n-      if (cfg_blocks_num > VARRAY_SIZE (cfg_blocks))\n+      if (cfg_blocks_num > VEC_length (basic_block, cfg_blocks))\n \t{\n-\t  /* We have to grow the array now.  Adjust to queue to occupy the\n-\t     full space of the original array.  */\n-\t  cfg_blocks_tail = VARRAY_SIZE (cfg_blocks);\n+\t  /* We have to grow the array now.  Adjust to queue to occupy\n+\t     the full space of the original array.  We do not need to\n+\t     initialize the newly allocated portion of the array\n+\t     because we keep track of CFG_BLOCKS_HEAD and\n+\t     CFG_BLOCKS_HEAD.  */\n+\t  cfg_blocks_tail = VEC_length (basic_block, cfg_blocks);\n \t  cfg_blocks_head = 0;\n-\t  VARRAY_GROW (cfg_blocks, 2 * VARRAY_SIZE (cfg_blocks));\n+\t  VEC_safe_grow (basic_block, heap, cfg_blocks, 2 * cfg_blocks_tail);\n \t}\n       else\n-\tcfg_blocks_tail = (cfg_blocks_tail + 1) % VARRAY_SIZE (cfg_blocks);\n+\tcfg_blocks_tail = ((cfg_blocks_tail + 1)\n+\t\t\t   % VEC_length (basic_block, cfg_blocks));\n     }\n \n-  VARRAY_BB (cfg_blocks, cfg_blocks_tail) = bb;\n+  VEC_replace (basic_block, cfg_blocks, cfg_blocks_tail, bb);\n   SET_BIT (bb_in_list, bb->index);\n }\n \n@@ -211,12 +215,13 @@ cfg_blocks_get (void)\n {\n   basic_block bb;\n \n-  bb = VARRAY_BB (cfg_blocks, cfg_blocks_head);\n+  bb = VEC_index (basic_block, cfg_blocks, cfg_blocks_head);\n \n   gcc_assert (!cfg_blocks_empty_p ());\n   gcc_assert (bb);\n \n-  cfg_blocks_head = (cfg_blocks_head + 1) % VARRAY_SIZE (cfg_blocks);\n+  cfg_blocks_head = ((cfg_blocks_head + 1)\n+\t\t     % VEC_length (basic_block, cfg_blocks));\n   --cfg_blocks_num;\n   RESET_BIT (bb_in_list, bb->index);\n \n@@ -473,7 +478,8 @@ ssa_prop_init (void)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     dump_immediate_uses (dump_file);\n \n-  VARRAY_BB_INIT (cfg_blocks, 20, \"cfg_blocks\");\n+  cfg_blocks = VEC_alloc (basic_block, heap, 20);\n+  VEC_safe_grow (basic_block, heap, cfg_blocks, 20);\n \n   /* Initialize the values for every SSA_NAME.  */\n   for (i = 1; i < num_ssa_names; i++)\n@@ -507,6 +513,7 @@ ssa_prop_fini (void)\n {\n   VEC_free (tree, gc, interesting_ssa_edges);\n   VEC_free (tree, gc, varying_ssa_edges);\n+  VEC_free (basic_block, heap, cfg_blocks);\n   cfg_blocks = NULL;\n   sbitmap_free (bb_in_list);\n   sbitmap_free (executable_blocks);"}]}