{"sha": "2c9f4db73acfb821ad776df950e908daac642530", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM5ZjRkYjczYWNmYjgyMWFkNzc2ZGY5NTBlOTA4ZGFhYzY0MjUzMA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-09-10T21:28:21Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-09-10T21:28:21Z"}, "message": "splay-tree.h (splay_tree_predecessor): Declare.\n\n\t* splay-tree.h (splay_tree_predecessor): Declare.\n\n\t* splay-tree.c (splay_tree_predecessor): New function.\n\t(splay_tree_successor): Likewise.\n\nFrom-SVN: r36304", "tree": {"sha": "1e8723081c38db164b19ba96fc74d4c49fb08d3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e8723081c38db164b19ba96fc74d4c49fb08d3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c9f4db73acfb821ad776df950e908daac642530", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c9f4db73acfb821ad776df950e908daac642530", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c9f4db73acfb821ad776df950e908daac642530", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c9f4db73acfb821ad776df950e908daac642530/comments", "author": null, "committer": null, "parents": [{"sha": "aac02f4e6b42c5cdbeeb49c99aace5e07df47303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac02f4e6b42c5cdbeeb49c99aace5e07df47303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aac02f4e6b42c5cdbeeb49c99aace5e07df47303"}], "stats": {"total": 85, "additions": 83, "deletions": 2}, "files": [{"sha": "30f281e11a706875b06f94599a36aadb6467ed67", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c9f4db73acfb821ad776df950e908daac642530/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c9f4db73acfb821ad776df950e908daac642530/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=2c9f4db73acfb821ad776df950e908daac642530", "patch": "@@ -1,3 +1,7 @@\n+2000-09-10  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* splay-tree.h (splay_tree_predecessor): Declare.\n+\n 2000-09-05  John David Anglin <dave@hiauly1.hia.nrc.ca>\n \n \t* md5.h (md5_uint32): Choose via INT_MAX instead of UINT_MAX."}, {"sha": "f53f855767b526bb6ec5d44c336ca9df62f4580d", "filename": "include/splay-tree.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c9f4db73acfb821ad776df950e908daac642530/include%2Fsplay-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c9f4db73acfb821ad776df950e908daac642530/include%2Fsplay-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fsplay-tree.h?ref=2c9f4db73acfb821ad776df950e908daac642530", "patch": "@@ -1,5 +1,5 @@\n /* A splay-tree datatype.  \n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2000 Free Software Foundation, Inc.\n    Contributed by Mark Mitchell (mark@markmitchell.com).\n \n This file is part of GNU CC.\n@@ -104,6 +104,12 @@ extern void splay_tree_remove\t\tPARAMS((splay_tree,\n extern splay_tree_node splay_tree_lookup   \n                                         PARAMS((splay_tree,\n \t\t\t\t\t        splay_tree_key));\n+extern splay_tree_node splay_tree_predecessor\n+                                        PARAMS((splay_tree,\n+\t\t\t\t\t\tsplay_tree_key));\n+extern splay_tree_node splay_tree_successor\n+                                        PARAMS((splay_tree,\n+\t\t\t\t\t\tsplay_tree_key));\n extern int splay_tree_foreach           PARAMS((splay_tree,\n \t\t\t\t\t        splay_tree_foreach_fn,\n \t\t\t\t\t        void*));"}, {"sha": "ee879c4ca8b25da3eb9c996c65ae2312c2b77d54", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c9f4db73acfb821ad776df950e908daac642530/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c9f4db73acfb821ad776df950e908daac642530/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=2c9f4db73acfb821ad776df950e908daac642530", "patch": "@@ -1,3 +1,8 @@\n+2000-09-10  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* splay-tree.c (splay_tree_predecessor): New function.\n+\t(splay_tree_successor): Likewise.\n+\n 2000-09-10  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* testsuite/demangle-expected: Add four tests for type_info"}, {"sha": "9a684899d4a18f55e16a98e71303a70c6ddb115f", "filename": "libiberty/splay-tree.c", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c9f4db73acfb821ad776df950e908daac642530/libiberty%2Fsplay-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c9f4db73acfb821ad776df950e908daac642530/libiberty%2Fsplay-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fsplay-tree.c?ref=2c9f4db73acfb821ad776df950e908daac642530", "patch": "@@ -1,5 +1,5 @@\n /* A splay-tree datatype.  \n-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Mark Mitchell (mark@markmitchell.com).\n \n This file is part of GNU CC.\n@@ -366,6 +366,72 @@ splay_tree_lookup (sp, key)\n     return 0;\n }\n \n+/* Return the immediate predecessor KEY, or NULL if there is no\n+   predecessor.  KEY need not be present in the tree.  */\n+\n+splay_tree_node\n+splay_tree_predecessor (sp, key)\n+     splay_tree sp;\n+     splay_tree_key key;\n+{\n+  int comparison;\n+  splay_tree_node node;\n+\n+  /* If the tree is empty, there is certainly no predecessor.  */\n+  if (!sp->root)\n+    return NULL;\n+\n+  /* Splay the tree around KEY.  That will leave either the KEY\n+     itself, its predecessor, or its successor at the root.  */\n+  splay_tree_splay (sp, key);\n+  comparison = (*sp->comp)(sp->root->key, key);\n+\n+  /* If the predecessor is at the root, just return it.  */\n+  if (comparison < 0)\n+    return sp->root;\n+\n+  /* Otherwise, find the rightmost element of the left subtree.  */\n+  node = sp->root->left;\n+  if (node)\n+    while (node->right)\n+      node = node->right;\n+\n+  return node;\n+}\n+\n+/* Return the immediate successor KEY, or NULL if there is no\n+   predecessor.  KEY need not be present in the tree.  */\n+\n+splay_tree_node\n+splay_tree_successor (sp, key)\n+     splay_tree sp;\n+     splay_tree_key key;\n+{\n+  int comparison;\n+  splay_tree_node node;\n+\n+  /* If the tree is empty, there is certainly no predecessor.  */\n+  if (!sp->root)\n+    return NULL;\n+\n+  /* Splay the tree around KEY.  That will leave either the KEY\n+     itself, its predecessor, or its successor at the root.  */\n+  splay_tree_splay (sp, key);\n+  comparison = (*sp->comp)(sp->root->key, key);\n+\n+  /* If the successor is at the root, just return it.  */\n+  if (comparison > 0)\n+    return sp->root;\n+\n+  /* Otherwise, find the rightmost element of the left subtree.  */\n+  node = sp->root->right;\n+  if (node)\n+    while (node->left)\n+      node = node->left;\n+\n+  return node;\n+}\n+\n /* Call FN, passing it the DATA, for every node in SP, following an\n    in-order traversal.  If FN every returns a non-zero value, the\n    iteration ceases immediately, and the value is returned."}]}