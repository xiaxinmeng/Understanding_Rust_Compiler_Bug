{"sha": "7b8b9722a4c9b7789d3d1bfcc12f23d49eb0b1bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I4Yjk3MjJhNGM5Yjc3ODlkM2QxYmZjYzEyZjIzZDQ5ZWIwYjFiZg==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-05-06T18:07:22Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-05-06T18:07:22Z"}, "message": "expr.c (expand_increment): Add third parameter to know when to ignore the result value.\n\n        * expr.c (expand_increment): Add third parameter to know when to\n        ignore the result value.\n        (store_constructor): Ditto.\n        (expand_expr, case PREINCREMENT_EXPR): Ditto.\n        (expand_expr, case PREDECREMENT_EXPR): Ditto.\n        (expand_expr, case POSTINCREMENT_EXPR): Ditto.\n        (expand_expr, case POSTDECREMENT_EXPR): Ditto.\n        * tree.c (stabilize_reference): Always ignore the first operand of\n        COMPOUND_EXPRs.\n\nFrom-SVN: r11939", "tree": {"sha": "b02b475ce4ade84a787e519042726486a6b36068", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b02b475ce4ade84a787e519042726486a6b36068"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b8b9722a4c9b7789d3d1bfcc12f23d49eb0b1bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b8b9722a4c9b7789d3d1bfcc12f23d49eb0b1bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b8b9722a4c9b7789d3d1bfcc12f23d49eb0b1bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b8b9722a4c9b7789d3d1bfcc12f23d49eb0b1bf/comments", "author": null, "committer": null, "parents": [{"sha": "405f0da64e8d6ca359de9ea35e56c6f0149a15e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/405f0da64e8d6ca359de9ea35e56c6f0149a15e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/405f0da64e8d6ca359de9ea35e56c6f0149a15e2"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "6678d307f83245f1849de91061c3fd0ccb5cac32", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8b9722a4c9b7789d3d1bfcc12f23d49eb0b1bf/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8b9722a4c9b7789d3d1bfcc12f23d49eb0b1bf/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=7b8b9722a4c9b7789d3d1bfcc12f23d49eb0b1bf", "patch": "@@ -187,7 +187,7 @@ static rtx result_vector\tPROTO((int, rtx));\n static rtx expand_builtin_apply_args PROTO((void));\n static rtx expand_builtin_apply\tPROTO((rtx, rtx, rtx));\n static void expand_builtin_return PROTO((rtx));\n-static rtx expand_increment\tPROTO((tree, int));\n+static rtx expand_increment\tPROTO((tree, int, int));\n void bc_expand_increment\tPROTO((struct increment_operator *, tree));\n tree bc_runtime_type_code \tPROTO((tree));\n rtx bc_allocate_local\t\tPROTO((int, int));\n@@ -3601,7 +3601,7 @@ store_constructor (exp, target, cleared)\n \n \t\t  expand_increment (build (PREINCREMENT_EXPR,\n \t\t\t\t\t   TREE_TYPE (index),\n-\t\t\t\t\t   index, integer_one_node), 0);\n+\t\t\t\t\t   index, integer_one_node), 0, 0);\n \t\t  expand_end_loop ();\n \t\t  emit_label (loop_end);\n \n@@ -6763,12 +6763,12 @@ expand_expr (exp, target, tmode, modifier)\n \n     case PREINCREMENT_EXPR:\n     case PREDECREMENT_EXPR:\n-      return expand_increment (exp, 0);\n+      return expand_increment (exp, 0, ignore);\n \n     case POSTINCREMENT_EXPR:\n     case POSTDECREMENT_EXPR:\n       /* Faster to treat as pre-increment if result is not used.  */\n-      return expand_increment (exp, ! ignore);\n+      return expand_increment (exp, ! ignore, ignore);\n \n     case ADDR_EXPR:\n       /* If nonzero, TEMP will be set to the address of something that might\n@@ -9210,9 +9210,9 @@ expand_builtin_return (result)\n    POST is 1 for postinc/decrements and 0 for preinc/decrements.  */\n \n static rtx\n-expand_increment (exp, post)\n+expand_increment (exp, post, ignore)\n      register tree exp;\n-     int post;\n+     int post, ignore;\n {\n   register rtx op0, op1;\n   register rtx temp, value;\n@@ -9343,7 +9343,7 @@ expand_increment (exp, post)\n \t  incremented = TREE_OPERAND (incremented, 0);\n \t}\n \n-      temp = expand_assignment (incremented, newexp, ! post, 0);\n+      temp = expand_assignment (incremented, newexp, ! post && ! ignore , 0);\n       return post ? op0 : temp;\n     }\n "}, {"sha": "7aa6c7736b1eded4e6dcb8f901f6ade862f8e993", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8b9722a4c9b7789d3d1bfcc12f23d49eb0b1bf/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8b9722a4c9b7789d3d1bfcc12f23d49eb0b1bf/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=7b8b9722a4c9b7789d3d1bfcc12f23d49eb0b1bf", "patch": "@@ -2412,10 +2412,10 @@ stabilize_reference (ref)\n       break;\n \n     case COMPOUND_EXPR:\n-      result = build_nt (COMPOUND_EXPR,\n-\t\t\t stabilize_reference_1 (TREE_OPERAND (ref, 0)),\n-\t\t\t stabilize_reference (TREE_OPERAND (ref, 1)));\n-      break;\n+      /* We cannot wrap the first expression in a SAVE_EXPR, as then\n+\t it wouldn't be ignored.  This matters when dealing with\n+\t volatiles.  */\n+      return stabilize_reference_1 (ref);\n \n     case RTL_EXPR:\n       result = build1 (INDIRECT_REF, TREE_TYPE (ref),"}]}