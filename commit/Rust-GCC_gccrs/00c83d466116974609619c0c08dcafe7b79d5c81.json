{"sha": "00c83d466116974609619c0c08dcafe7b79d5c81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBjODNkNDY2MTE2OTc0NjA5NjE5YzBjMDhkY2FmZTdiNzlkNWM4MQ==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-10-29T11:49:09Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-10-29T11:49:09Z"}, "message": "macro4.c, macro5.c: New tests.\n\n        * gcc.dg/cpp/macro4.c, macro5.c: New tests.\n        * mi1.c, mi1c.h: Add null directives to multiple-include test.\n        * mi5.c: Test multiple includes work with -C.\n        * trigraphs.c: Test ^= version.\n\nFrom-SVN: r37124", "tree": {"sha": "5a90721df34f0fbd284e9ba209cdb168101d88b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a90721df34f0fbd284e9ba209cdb168101d88b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00c83d466116974609619c0c08dcafe7b79d5c81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00c83d466116974609619c0c08dcafe7b79d5c81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00c83d466116974609619c0c08dcafe7b79d5c81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00c83d466116974609619c0c08dcafe7b79d5c81/comments", "author": null, "committer": null, "parents": [{"sha": "44ed91a1d664478bb2f6f2e277988908ce3675a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44ed91a1d664478bb2f6f2e277988908ce3675a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44ed91a1d664478bb2f6f2e277988908ce3675a5"}], "stats": {"total": 87, "additions": 81, "deletions": 6}, "files": [{"sha": "f6838e88a5bae7109bcea47d7e53e96ae5ac3b39", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c83d466116974609619c0c08dcafe7b79d5c81/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c83d466116974609619c0c08dcafe7b79d5c81/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=00c83d466116974609619c0c08dcafe7b79d5c81", "patch": "@@ -1,3 +1,10 @@\n+2000-10-29  Neil Booth  <neilb@earthling.net>\n+\n+        * gcc.dg/cpp/macro4.c, macro5.c: New tests.\n+\t* mi1.c, mi1c.h: Add null directives to multiple-include test.\n+\t* mi5.c: Test multiple includes work with -C.\n+\t* trigraphs.c: Test ^= version.\n+\n 2000-10-28  Neil Booth  <neilb@earthling.net>\n \n \tNew tests and test updates for new macro expander."}, {"sha": "c0dfe414b8fa661d83d7984322bb8b6a21014411", "filename": "gcc/testsuite/gcc.dg/cpp/macro4.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c83d466116974609619c0c08dcafe7b79d5c81/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacro4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c83d466116974609619c0c08dcafe7b79d5c81/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacro4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacro4.c?ref=00c83d466116974609619c0c08dcafe7b79d5c81", "patch": "@@ -0,0 +1,24 @@\n+/* Copyright (C) 2000 Free Software Foundation, Inc.  */\n+\n+/* { dg-do run } */\n+\n+/* Test source Neil Booth.  GCC <= 2.96 don't get this right.  */\n+\n+extern void abort (void);\n+\n+int glue (int x, int y)\n+{\n+  return x + y;\n+}\n+\n+#define glue(x, y) x ## y\n+#define xglue(x, y) glue (x, y)\n+\n+int main ()\n+{\n+  /* Should expand to glue (1, 2) as the second \"glue\" is nested.  */\n+  if (glue (xgl, ue) (1, 2) != 3)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "9e226b871fa07a9a2743306dee1126e71214e270", "filename": "gcc/testsuite/gcc.dg/cpp/macro5.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c83d466116974609619c0c08dcafe7b79d5c81/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacro5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c83d466116974609619c0c08dcafe7b79d5c81/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacro5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacro5.c?ref=00c83d466116974609619c0c08dcafe7b79d5c81", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do preprocess } */\n+\n+/* Test source Robert Lipe, with minor modifications for the testsuite\n+   by Neil Booth.  29 Oct 2000.  */\n+\n+#define _VA_ARGS_0() 42\n+#define _L_0()                      (\n+#define _R_0()                      )\n+\n+#define __VA_ARGLIST(argc,list) \\\n+                _VA_ARGS_##argc list\n+\n+#define _CAT_LIST(argc,list1,list2) \\\n+                _L_##argc list1 _R_##argc list2\n+\n+#define _VA_ARGLIST(argc,list1,list2) \\\n+                __VA_ARGLIST(argc, \\\n+                        _CAT_LIST(argc, list1, list2))\n+\n+#define BLAH(a) _VA_ARGLIST(a, (), ())\n+\n+#if BLAH (0) != 42\n+#error Simulated varargs macros\n+#endif"}, {"sha": "4aa66d6aa9465f886b6eb6e07202725254bc9fd3", "filename": "gcc/testsuite/gcc.dg/cpp/mi1.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c83d466116974609619c0c08dcafe7b79d5c81/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmi1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c83d466116974609619c0c08dcafe7b79d5c81/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmi1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmi1.c?ref=00c83d466116974609619c0c08dcafe7b79d5c81", "patch": "@@ -1,9 +1,10 @@\n /* Test \"ignore redundant include\" facility.\n-   We must test with C and C++ comments outside the guard conditional;\n-   also, we test guarding with #ifndef and #if !defined.\n-   -H is used because cpp mi1ght confuse the issue by optimizing out\n-   #line markers.  This test only passes if each of the headers is\n-   read exactly once.\n+\n+   We must test with C and C++ comments, and null directives, outside\n+   the guard conditional; also, we test guarding with #ifndef and #if\n+   !defined.  -H is used because cpp might confuse the issue by\n+   optimizing out #line markers.  This test only passes if each of the\n+   headers is read exactly once.\n \n    The disgusting regexp in the dg-error line, when stuck into\n    dg.exp's compiler-output regexp, matches the correct -H output and"}, {"sha": "2956286eb22275bbcae03c24a2b3c91fc8b1f8f6", "filename": "gcc/testsuite/gcc.dg/cpp/mi1c.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c83d466116974609619c0c08dcafe7b79d5c81/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmi1c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c83d466116974609619c0c08dcafe7b79d5c81/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmi1c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmi1c.h?ref=00c83d466116974609619c0c08dcafe7b79d5c81", "patch": "@@ -1,4 +1,5 @@\n /* Redundant header include test with C comments at top.  */\n+# /* And a null directive at the top.  */\n \n #ifndef CPP_MIC_H\n #define CPP_MIC_H\n@@ -7,4 +8,5 @@ int a;\n \n #endif\n \n+# /* And at the end, too!  */\n /* And at the end too!  */"}, {"sha": "a6fdee23db3ef5c5ab9a2e5be9fb27f7e8b1324c", "filename": "gcc/testsuite/gcc.dg/cpp/mi5.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c83d466116974609619c0c08dcafe7b79d5c81/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmi5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c83d466116974609619c0c08dcafe7b79d5c81/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmi5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmi5.c?ref=00c83d466116974609619c0c08dcafe7b79d5c81", "patch": "@@ -0,0 +1,13 @@\n+/* Test \"ignore redundant include\" facility, with -C on.\n+\n+   The disgusting regexp in the dg-error line, when stuck into\n+   dg.exp's compiler-output regexp, matches the correct -H output and\n+   only the correct -H output.  It has to be all on one line because\n+   otherwise it will not be interpreted all in one unit.  */\n+\n+/* { dg-do preprocess }\n+   { dg-options \"-H -C\" }\n+   { dg-error \"mi1c\\.h\" \"redundant include check with -C\" { target *-*-* } 0 } */\n+\n+#include \"mi1c.h\"\n+#include \"mi1c.h\""}, {"sha": "3ec5ed7213567c80fca9246004e30e894e498cae", "filename": "gcc/testsuite/gcc.dg/cpp/trigraphs.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c83d466116974609619c0c08dcafe7b79d5c81/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrigraphs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c83d466116974609619c0c08dcafe7b79d5c81/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrigraphs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrigraphs.c?ref=00c83d466116974609619c0c08dcafe7b79d5c81", "patch": "@@ -17,10 +17,14 @@ static const char str??(??) = \"0123456789??/n\";\n int\n main(void)\n ??<\n+  unsigned char x = 5;\n+\n   if (sizeof str != TWELVE)\n     abort ();\n \n-  if ((5 ??' 3) != 6)\n+  /* Test ^=, the only multi-character token to come from trigraphs.  */\n+  x ??'= 3;\n+  if (x != 6)\n     abort ();\n \n   if ((5 ??! 3) != 7)"}]}