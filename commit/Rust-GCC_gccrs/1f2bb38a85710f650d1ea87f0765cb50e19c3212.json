{"sha": "1f2bb38a85710f650d1ea87f0765cb50e19c3212", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYyYmIzOGE4NTcxMGY2NTBkMWVhODdmMDc2NWNiNTBlMTljMzIxMg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-06-29T14:03:36Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-06-29T14:03:36Z"}, "message": "When using -fprofile-generate=/some/path mangle absolute path of file (PR lto/85759).\n\n2018-06-29  Martin Liska  <mliska@suse.cz>\n\n\tPR lto/85759\n\t* coverage.c (coverage_init): Mangle full path name.\n\t* doc/invoke.texi: Document the change.\n\t* gcov-io.c (mangle_path): New.\n\t* gcov-io.h (mangle_path): Likewise.\n\t* gcov.c (mangle_name): Use mangle_path for path mangling.\n\nFrom-SVN: r262251", "tree": {"sha": "a4cb15221ae4ad1a6c3e227f6bbb07e6328aa6fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4cb15221ae4ad1a6c3e227f6bbb07e6328aa6fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f2bb38a85710f650d1ea87f0765cb50e19c3212", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f2bb38a85710f650d1ea87f0765cb50e19c3212", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f2bb38a85710f650d1ea87f0765cb50e19c3212", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f2bb38a85710f650d1ea87f0765cb50e19c3212/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "52057dc4ac5295caebf83147f688d769c93cbc8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52057dc4ac5295caebf83147f688d769c93cbc8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52057dc4ac5295caebf83147f688d769c93cbc8d"}], "stats": {"total": 119, "additions": 81, "deletions": 38}, "files": [{"sha": "a0da66e69324210c02b401d1952004bb5b55a747", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f2bb38a85710f650d1ea87f0765cb50e19c3212/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f2bb38a85710f650d1ea87f0765cb50e19c3212/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f2bb38a85710f650d1ea87f0765cb50e19c3212", "patch": "@@ -1,3 +1,12 @@\n+2018-06-29  Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/85759\n+\t* coverage.c (coverage_init): Mangle full path name.\n+\t* doc/invoke.texi: Document the change.\n+\t* gcov-io.c (mangle_path): New.\n+\t* gcov-io.h (mangle_path): Likewise.\n+\t* gcov.c (mangle_name): Use mangle_path for path mangling.\n+\n 2018-06-29  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm.c (output_move_double): Don't allow STRD instructions"}, {"sha": "9c9d3dbd39e96554f7cdecf281f3b59f703ea2db", "filename": "gcc/coverage.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f2bb38a85710f650d1ea87f0765cb50e19c3212/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f2bb38a85710f650d1ea87f0765cb50e19c3212/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=1f2bb38a85710f650d1ea87f0765cb50e19c3212", "patch": "@@ -1220,8 +1220,24 @@ coverage_init (const char *filename)\n     g->get_passes ()->get_pass_profile ()->static_pass_number;\n   g->get_dumps ()->dump_start (profile_pass_num, NULL);\n \n-  if (!profile_data_prefix && !IS_ABSOLUTE_PATH (filename))\n-    profile_data_prefix = getpwd ();\n+  if (!IS_ABSOLUTE_PATH (filename))\n+    {\n+      /* When a profile_data_prefix is provided, then mangle full path\n+\t of filename in order to prevent file path clashing.  */\n+      if (profile_data_prefix)\n+\t{\n+#if HAVE_DOS_BASED_FILE_SYSTEM\n+\t  const char separator = \"\\\\\";\n+#else\n+\t  const char *separator = \"/\";\n+#endif\n+\t  filename = concat (getpwd (), separator, filename, NULL);\n+\t  filename = mangle_path (filename);\n+\t  len = strlen (filename);\n+\t}\n+      else\n+\tprofile_data_prefix = getpwd ();\n+    }\n \n   if (profile_data_prefix)\n     prefix_len = strlen (profile_data_prefix);"}, {"sha": "0180bec183e5586a48f520f6a0003df7e2ccbef5", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f2bb38a85710f650d1ea87f0765cb50e19c3212/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f2bb38a85710f650d1ea87f0765cb50e19c3212/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1f2bb38a85710f650d1ea87f0765cb50e19c3212", "patch": "@@ -11352,6 +11352,9 @@ and used by @option{-fprofile-use} and @option{-fbranch-probabilities}\n and its related options.  Both absolute and relative paths can be used.\n By default, GCC uses the current directory as @var{path}, thus the\n profile data file appears in the same directory as the object file.\n+In order to prevent filename clashing, if object file name is not an absolute\n+path, we mangle absolute path of @file{@var{sourcename}.gcda} file and\n+use it as file name of a @file{.gcda} file.\n \n When an executable is run in a massive parallel environment, it is recommended\n to save profile to different folders.  That can be done with variables"}, {"sha": "311e4d014bf4ac339f0608c4e001f91e46ed74c9", "filename": "gcc/gcov-io.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f2bb38a85710f650d1ea87f0765cb50e19c3212/gcc%2Fgcov-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f2bb38a85710f650d1ea87f0765cb50e19c3212/gcc%2Fgcov-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.c?ref=1f2bb38a85710f650d1ea87f0765cb50e19c3212", "patch": "@@ -566,6 +566,55 @@ gcov_read_counter (void)\n   return value;\n }\n \n+/* Mangle filename path of BASE and output new allocated pointer with\n+   mangled path.  */\n+\n+char *\n+mangle_path (char const *base)\n+{\n+  /* Convert '/' to '#', convert '..' to '^',\n+     convert ':' to '~' on DOS based file system.  */\n+  const char *probe;\n+  char *buffer = (char *)xmalloc (strlen (base) + 10);\n+  char *ptr = buffer;\n+\n+#if HAVE_DOS_BASED_FILE_SYSTEM\n+  if (base[0] && base[1] == ':')\n+    {\n+      ptr[0] = base[0];\n+      ptr[1] = '~';\n+      ptr += 2;\n+      base += 2;\n+    }\n+#endif\n+  for (; *base; base = probe)\n+    {\n+      size_t len;\n+\n+      for (probe = base; *probe; probe++)\n+\tif (*probe == '/')\n+\t  break;\n+      len = probe - base;\n+      if (len == 2 && base[0] == '.' && base[1] == '.')\n+\t*ptr++ = '^';\n+      else\n+\t{\n+\t  memcpy (ptr, base, len);\n+\t  ptr += len;\n+\t}\n+      if (*probe)\n+\t{\n+\t  *ptr++ = '#';\n+\t  probe++;\n+\t}\n+    }\n+\n+  /* Terminate the string.  */\n+  *ptr = '\\0';\n+\n+  return buffer;\n+}\n+\n /* We need to expose the below function when compiling for gcov-tool.  */\n \n #if !IN_LIBGCOV || defined (IN_GCOV_TOOL)"}, {"sha": "7a11f0aec7f00cf0a92d887c8d802cf430cbc04c", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f2bb38a85710f650d1ea87f0765cb50e19c3212/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f2bb38a85710f650d1ea87f0765cb50e19c3212/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=1f2bb38a85710f650d1ea87f0765cb50e19c3212", "patch": "@@ -371,6 +371,7 @@ GCOV_LINKAGE void gcov_read_summary (struct gcov_summary *) ATTRIBUTE_HIDDEN;\n GCOV_LINKAGE const char *gcov_read_string (void);\n GCOV_LINKAGE void gcov_sync (gcov_position_t /*base*/,\n \t\t\t     gcov_unsigned_t /*length */);\n+char *mangle_path (char const *base);\n \n #if !IN_GCOV\n /* Available outside gcov */"}, {"sha": "ad2de4d5b22206a439d1a1671e776e7fe36b15e5", "filename": "gcc/gcov.c", "status": "modified", "additions": 1, "deletions": 36, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f2bb38a85710f650d1ea87f0765cb50e19c3212/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f2bb38a85710f650d1ea87f0765cb50e19c3212/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=1f2bb38a85710f650d1ea87f0765cb50e19c3212", "patch": "@@ -2461,42 +2461,7 @@ mangle_name (char const *base, char *ptr)\n       ptr += len;\n     }\n   else\n-    {\n-      /* Convert '/' to '#', convert '..' to '^',\n-\t convert ':' to '~' on DOS based file system.  */\n-      const char *probe;\n-\n-#if HAVE_DOS_BASED_FILE_SYSTEM\n-      if (base[0] && base[1] == ':')\n-\t{\n-\t  ptr[0] = base[0];\n-\t  ptr[1] = '~';\n-\t  ptr += 2;\n-\t  base += 2;\n-\t}\n-#endif\n-      for (; *base; base = probe)\n-\t{\n-\t  size_t len;\n-\n-\t  for (probe = base; *probe; probe++)\n-\t    if (*probe == '/')\n-\t      break;\n-\t  len = probe - base;\n-\t  if (len == 2 && base[0] == '.' && base[1] == '.')\n-\t    *ptr++ = '^';\n-\t  else\n-\t    {\n-\t      memcpy (ptr, base, len);\n-\t      ptr += len;\n-\t    }\n-\t  if (*probe)\n-\t    {\n-\t      *ptr++ = '#';\n-\t      probe++;\n-\t    }\n-\t}\n-    }\n+    ptr = mangle_path (base);\n \n   return ptr;\n }"}]}