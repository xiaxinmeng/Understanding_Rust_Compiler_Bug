{"sha": "f0de5d83eecd4902e4a0447bfa4863014b6b2eaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBkZTVkODNlZWNkNDkwMmU0YTA0NDdiZmE0ODYzMDE0YjZiMmVhZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-12T17:54:53Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-12T17:54:53Z"}, "message": "Fix throw specifiers on interface.\n\nI discovered that libitm:\n(a) declares __cxa_allocate_exception and friends directly,\n(b) doesn't mark them as 'throw()'\n(c) doesn't mark the replacment fns _ITM_$foo as nothrow either\n\nWe happen to get away with it because of code in the compiler that,\nalthough it checks the parameter types, doesn't check the exception\nspecification.  (One reason being they used to not be part of the\nlanguage's type system, but now they are.)  I suspect this can lead us\nto generate pessimal code later, if we've seen one of these decls\nearlier.  Anyway, with modules it becomes trickier[*], so I'm trying\nto clean it up and not be a problem.  I see Jakub fixed part of the\nproblem\n(https://gcc.gnu.org/pipermail/gcc-patches/2018-December/513302.html)\nAFAICT, he did fix libitm's decls, but left the lax parm-type checking\nin the compiler.\n\nlibitm.h is not very informative about specification:\n  in version 1 of http://www.intel.com/some/path/here.pdf.  */\n\nAnyway, it was too fiddly to have libitm pick up the declarations from\nlibsupc++.  Besides it makes them weak declarations, and then provides\ndefinitions for non-elf systems.  So this patch adds the expected\n'throw()'\n\n\t* libitm/libitm.h (_ITM_NOTHROW): Define.\n\t(_ITM_cxa_allocate_exception, _ITM_cxa_free_exception)\n\t(_ITM_cxa_begin_catch): Use it.\n\t* eh_cpp.cc: Add throw() to __cxa_allocate_exception,\n\t__cxa_free_exception, __cxa_begin_catch, __cxa_tm_cleanup,\n\t__cxa_get_globals.\n\t(_ITM_cxa_allocate_exception, _ITM_cxa_free_exception)\n\t(_ITM_cxa_begin_catch): Likewise.", "tree": {"sha": "944f7e1b231934e27192db86841d55d6d8429f16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/944f7e1b231934e27192db86841d55d6d8429f16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0de5d83eecd4902e4a0447bfa4863014b6b2eaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0de5d83eecd4902e4a0447bfa4863014b6b2eaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0de5d83eecd4902e4a0447bfa4863014b6b2eaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0de5d83eecd4902e4a0447bfa4863014b6b2eaf/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d17cdc17c90ce77cb90c569322c1f241d3530cec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d17cdc17c90ce77cb90c569322c1f241d3530cec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d17cdc17c90ce77cb90c569322c1f241d3530cec"}], "stats": {"total": 55, "additions": 38, "deletions": 17}, "files": [{"sha": "295fb9440678973fe8954bb40a73c93b99fefe03", "filename": "libitm/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0de5d83eecd4902e4a0447bfa4863014b6b2eaf/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0de5d83eecd4902e4a0447bfa4863014b6b2eaf/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=f0de5d83eecd4902e4a0447bfa4863014b6b2eaf", "patch": "@@ -1,3 +1,15 @@\n+2020-05-12  Nathan Sidwell  <nathan@acm.org>\n+\n+\tFix throw specifiers on interface.\n+\t* libitm/libitm.h (_ITM_NOTHROW): Define.\n+\t(_ITM_cxa_allocate_exception, _ITM_cxa_free_exception)\n+\t(_ITM_cxa_begin_catch): Use it.\n+\t* eh_cpp.cc: Add throw() to __cxa_allocate_exception,\n+\t__cxa_free_exception, __cxa_begin_catch, __cxa_tm_cleanup,\n+\t__cxa_get_globals.\n+\t(_ITM_cxa_allocate_exception, _ITM_cxa_free_exception)\n+\t(_ITM_cxa_begin_catch): Likewise.\n+\n 2020-05-05  Nathan Sidwell  <nathan@acm.org>\n \n \t* testsuite/lib/libitm.exp (libitm_init): Add"}, {"sha": "6c9da2d06e4c53b4cd7ffe73034e7d0ebb7e2a52", "filename": "libitm/eh_cpp.cc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0de5d83eecd4902e4a0447bfa4863014b6b2eaf/libitm%2Feh_cpp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0de5d83eecd4902e4a0447bfa4863014b6b2eaf/libitm%2Feh_cpp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Feh_cpp.cc?ref=f0de5d83eecd4902e4a0447bfa4863014b6b2eaf", "patch": "@@ -87,23 +87,23 @@ struct __cxa_eh_globals\n   unsigned int\tuncaughtExceptions;\n };\n \n-extern void *__cxa_allocate_exception (size_t) WEAK;\n-extern void __cxa_free_exception (void *) WEAK;\n+extern void *__cxa_allocate_exception (size_t) _ITM_NOTHROW WEAK;\n+extern void __cxa_free_exception (void *) _ITM_NOTHROW WEAK;\n extern void __cxa_throw (void *, void *, void (*) (void *)) WEAK;\n-extern void *__cxa_begin_catch (void *) WEAK;\n+extern void *__cxa_begin_catch (void *) _ITM_NOTHROW WEAK;\n extern void __cxa_end_catch (void) WEAK;\n-extern void __cxa_tm_cleanup (void *, void *, unsigned int) WEAK;\n-extern __cxa_eh_globals *__cxa_get_globals (void) WEAK;\n+extern void __cxa_tm_cleanup (void *, void *, unsigned int) throw () WEAK;\n+extern __cxa_eh_globals *__cxa_get_globals (void) _ITM_NOTHROW WEAK;\n \n #if !defined (HAVE_ELF_STYLE_WEAKREF) \n-void *__cxa_allocate_exception (size_t) { return NULL; }\n-void __cxa_free_exception (void *) { return; }\n+void *__cxa_allocate_exception (size_t) _ITM_NOTHROW { return NULL; }\n+void __cxa_free_exception (void *) _ITM_NOTHROW { return; }\n void __cxa_throw (void *, void *, void (*) (void *)) { return; }\n-void *__cxa_begin_catch (void *) { return NULL; }\n+void *__cxa_begin_catch (void *) _ITM_NOTHROW { return NULL; }\n void __cxa_end_catch (void) { return; }\n-void __cxa_tm_cleanup (void *, void *, unsigned int) { return; }\n+void __cxa_tm_cleanup (void *, void *, unsigned int) throw () { return; }\n void _Unwind_DeleteException (_Unwind_Exception *) { return; }\n-__cxa_eh_globals *__cxa_get_globals (void) { return NULL; }\n+__cxa_eh_globals *__cxa_get_globals (void) _ITM_NOTHROW { return NULL; }\n #endif /* HAVE_ELF_STYLE_WEAKREF */\n \n }\n@@ -117,15 +117,15 @@ free_any_exception (void *exc_ptr)\n }\n \n void *\n-_ITM_cxa_allocate_exception (size_t size)\n+_ITM_cxa_allocate_exception (size_t size) _ITM_NOTHROW\n {\n   void *r = __cxa_allocate_exception (size);\n   gtm_thr()->record_allocation (r, free_any_exception);\n   return r;\n }\n \n void\n-_ITM_cxa_free_exception (void *exc_ptr)\n+_ITM_cxa_free_exception (void *exc_ptr) _ITM_NOTHROW\n {\n   // __cxa_free_exception can be called from user code directly if\n   // construction of an exception object throws another exception, in which\n@@ -143,7 +143,7 @@ _ITM_cxa_throw (void *obj, void *tinfo, void (*dest) (void *))\n }\n \n void *\n-_ITM_cxa_begin_catch (void *exc_ptr)\n+_ITM_cxa_begin_catch (void *exc_ptr) _ITM_NOTHROW\n {\n   // If this exception object has been allocated by this transaction, we\n   // discard the undo log entry for the allocation; we are entering phase (3)"}, {"sha": "4f8051bdfb7883a220dfd4e5074cb98d97099395", "filename": "libitm/libitm.h", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0de5d83eecd4902e4a0447bfa4863014b6b2eaf/libitm%2Flibitm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0de5d83eecd4902e4a0447bfa4863014b6b2eaf/libitm%2Flibitm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Flibitm.h?ref=f0de5d83eecd4902e4a0447bfa4863014b6b2eaf", "patch": "@@ -45,6 +45,15 @@ extern \"C\" {\n \n #define ITM_NORETURN\t__attribute__((noreturn))\n #define ITM_PURE __attribute__((transaction_pure))\n+#ifdef _GLIBCXX_NOTHROW\n+# define _ITM_NOTHROW _GLIBCXX_NOTHROW\n+#elif !defined (__cplusplus)\n+# define _ITM_NOTHROW __attribute__((__nothrow__))\n+#elif __cplusplus < 201103L\n+# define _ITM_NOTHROW throw ()\n+#else\n+# define _ITM_NOTHROW noexcept\n+#endif  \n \n /* The following are externally visible definitions and functions, though\n    only very few of these should be called by user code.  */\n@@ -282,11 +291,11 @@ extern void *_ITM_getTMCloneSafe (void *) ITM_REGPARM;\n extern void _ITM_registerTMCloneTable (void *, size_t);\n extern void _ITM_deregisterTMCloneTable (void *);\n \n-extern void *_ITM_cxa_allocate_exception (size_t);\n-extern void _ITM_cxa_free_exception (void *exc_ptr);\n+extern void *_ITM_cxa_allocate_exception (size_t) _ITM_NOTHROW;\n+extern void _ITM_cxa_free_exception (void *exc_ptr) _ITM_NOTHROW;\n extern void _ITM_cxa_throw (void *obj, void *tinfo, void (*dest) (void *));\n-extern void *_ITM_cxa_begin_catch (void *exc_ptr);\n-extern void _ITM_cxa_end_catch (void);\n+extern void *_ITM_cxa_begin_catch (void *exc_ptr) _ITM_NOTHROW;\n+extern void _ITM_cxa_end_catch (void); /* This can throw.  */\n extern void _ITM_commitTransactionEH(void *exc_ptr) ITM_REGPARM;\n \n #ifdef __cplusplus"}]}