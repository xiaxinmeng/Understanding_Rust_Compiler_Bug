{"sha": "934f135b967c7501be6e2e10a2c3c03c54a198d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM0ZjEzNWI5NjdjNzUwMWJlNmUyZTEwYTJjM2MwM2M1NGExOThkMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-21T17:41:16Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-21T17:41:16Z"}, "message": "Add missing VECTOR_MODE_P checks (PR 92595)\n\nThis patch fixes some cases in which we weren't checking whether we had\na vector mode before calling related_vector_mode or before making vector\noptab queries.\n\n2019-11-21  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR tree-optimization/92595\n\t* tree-vect-stmts.c (get_group_load_store_type): Add a VECTOR_MODE_P\n\tcheck.\n\t(vectorizable_store, vectorizable_load): Likewise.\n\ngcc/testsuite/\n\tPR tree-optimization/92595\n\t* g++.dg/vect/pr92595.cc: New test.\n\nFrom-SVN: r278590", "tree": {"sha": "947dab70457f5282f7b8ededd8cd06d8b5493013", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/947dab70457f5282f7b8ededd8cd06d8b5493013"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/934f135b967c7501be6e2e10a2c3c03c54a198d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/934f135b967c7501be6e2e10a2c3c03c54a198d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/934f135b967c7501be6e2e10a2c3c03c54a198d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/934f135b967c7501be6e2e10a2c3c03c54a198d3/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8239933547870e66ffcc7a664c271a960e3f791a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8239933547870e66ffcc7a664c271a960e3f791a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8239933547870e66ffcc7a664c271a960e3f791a"}], "stats": {"total": 57, "additions": 53, "deletions": 4}, "files": [{"sha": "859dd7136c7eca4cfe6664e8f03b07d25060b2e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934f135b967c7501be6e2e10a2c3c03c54a198d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934f135b967c7501be6e2e10a2c3c03c54a198d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=934f135b967c7501be6e2e10a2c3c03c54a198d3", "patch": "@@ -1,3 +1,10 @@\n+2019-11-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/92595\n+\t* tree-vect-stmts.c (get_group_load_store_type): Add a VECTOR_MODE_P\n+\tcheck.\n+\t(vectorizable_store, vectorizable_load): Likewise.\n+\n 2019-11-21  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-inline.c (update_callee_keys): Add parameter UPDATE_SINCE."}, {"sha": "1f69d52fd1e8ee62f5ecf9afe9aeb3ba70e12639", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934f135b967c7501be6e2e10a2c3c03c54a198d3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934f135b967c7501be6e2e10a2c3c03c54a198d3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=934f135b967c7501be6e2e10a2c3c03c54a198d3", "patch": "@@ -1,3 +1,8 @@\n+2019-11-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/92595\n+\t* g++.dg/vect/pr92595.cc: New test.\n+\n 2019-11-21  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \t* gcc.target/arm/acle/crc_hf_1.c: Modify the compiler options directive"}, {"sha": "3d0b517036daf0a85c3d4b1e788d45189f194a9a", "filename": "gcc/testsuite/g++.dg/vect/pr92595.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934f135b967c7501be6e2e10a2c3c03c54a198d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr92595.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934f135b967c7501be6e2e10a2c3c03c54a198d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr92595.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr92595.cc?ref=934f135b967c7501be6e2e10a2c3c03c54a198d3", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile }\n+// { dg-require-effective-target c++11 }\n+// { dg-additional-options \"-O3\" }\n+// { dg-additional-options \"-O3 -m32 -mno-sse\" { target { i?86-*-* x86_64-*-* } } }\n+\n+void *operator new(__SIZE_TYPE__, void *a) { return a; }\n+class b {\n+public:\n+  using c = int *;\n+  c e();\n+  c h();\n+};\n+template <typename d> class j : b {\n+public:\n+  void l() {\n+    for (auto f = h(), g = e(); f != g; ++f)\n+      new (f) d();\n+  }\n+};\n+class m {\n+public:\n+  enum i {};\n+  struct C {\n+    i : 8;\n+    i k : 8;\n+  };\n+};\n+class o {\n+  j<m::C> n;\n+  o();\n+};\n+o::o() { n.l(); }"}, {"sha": "65c649d66f765bd4559a8f4e8c0729b680e37ef6", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934f135b967c7501be6e2e10a2c3c03c54a198d3/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934f135b967c7501be6e2e10a2c3c03c54a198d3/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=934f135b967c7501be6e2e10a2c3c03c54a198d3", "patch": "@@ -2308,6 +2308,7 @@ get_group_load_store_type (stmt_vec_info stmt_info, tree vectype, bool slp,\n \t\t  || alignment_support_scheme == dr_unaligned_supported)\n \t      && known_eq (nunits, (group_size - gap) * 2)\n \t      && known_eq (nunits, group_size)\n+\t      && VECTOR_MODE_P (TYPE_MODE (vectype))\n \t      && related_vector_mode (TYPE_MODE (vectype), elmode,\n \t\t\t\t      group_size - gap).exists (&vmode)\n \t      && (convert_optab_handler (vec_init_optab,\n@@ -7822,8 +7823,9 @@ vectorizable_store (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t\t of vector elts directly.  */\n \t      scalar_mode elmode = SCALAR_TYPE_MODE (elem_type);\n \t      machine_mode vmode;\n-\t      if (!related_vector_mode (TYPE_MODE (vectype), elmode,\n-\t\t\t\t\tgroup_size).exists (&vmode)\n+\t      if (!VECTOR_MODE_P (TYPE_MODE (vectype))\n+\t\t  || !related_vector_mode (TYPE_MODE (vectype), elmode,\n+\t\t\t\t\t   group_size).exists (&vmode)\n \t\t  || (convert_optab_handler (vec_extract_optab,\n \t\t\t\t\t     TYPE_MODE (vectype), vmode)\n \t\t      == CODE_FOR_nothing))\n@@ -7840,6 +7842,7 @@ vectorizable_store (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t\t     element extracts from the original vector type and\n \t\t     element size stores.  */\n \t\t  if (int_mode_for_size (lsize, 0).exists (&elmode)\n+\t\t      && VECTOR_MODE_P (TYPE_MODE (vectype))\n \t\t      && related_vector_mode (TYPE_MODE (vectype), elmode,\n \t\t\t\t\t      lnunits).exists (&vmode)\n \t\t      && (convert_optab_handler (vec_extract_optab,\n@@ -8922,8 +8925,9 @@ vectorizable_load (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t\t vector elts directly.  */\n \t      scalar_mode elmode = SCALAR_TYPE_MODE (TREE_TYPE (vectype));\n \t      machine_mode vmode;\n-\t      if (related_vector_mode (TYPE_MODE (vectype), elmode,\n-\t\t\t\t       group_size).exists (&vmode)\n+\t      if (VECTOR_MODE_P (TYPE_MODE (vectype))\n+\t\t  && related_vector_mode (TYPE_MODE (vectype), elmode,\n+\t\t\t\t\t  group_size).exists (&vmode)\n \t\t  && (convert_optab_handler (vec_init_optab,\n \t\t\t\t\t     TYPE_MODE (vectype), vmode)\n \t\t      != CODE_FOR_nothing))\n@@ -8947,6 +8951,7 @@ vectorizable_load (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t\t  /* If we can't construct such a vector fall back to\n \t\t     element loads of the original vector type.  */\n \t\t  if (int_mode_for_size (lsize, 0).exists (&elmode)\n+\t\t      && VECTOR_MODE_P (TYPE_MODE (vectype))\n \t\t      && related_vector_mode (TYPE_MODE (vectype), elmode,\n \t\t\t\t\t      lnunits).exists (&vmode)\n \t\t      && (convert_optab_handler (vec_init_optab, vmode, elmode)"}]}