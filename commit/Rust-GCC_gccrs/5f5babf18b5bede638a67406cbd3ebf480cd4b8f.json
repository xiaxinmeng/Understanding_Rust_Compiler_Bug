{"sha": "5f5babf18b5bede638a67406cbd3ebf480cd4b8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY1YmFiZjE4YjViZWRlNjM4YTY3NDA2Y2JkM2ViZjQ4MGNkNGI4Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-09-18T21:25:10Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-09-18T21:25:10Z"}, "message": "c.opt: Add -fno-deduce-init-list.\n\n\t* c.opt: Add -fno-deduce-init-list.\n\t* pt.c (get_pattern_parm): New.\n\t(listify): Split out from...\n\t(listify_autos): ...here.\n\t(unify): Deduce std::initializer_list for T.\n\t* call.c (build_over_call): Warn about it.\n\nFrom-SVN: r151867", "tree": {"sha": "6aa179508e77386b7ac3dfbb8cfab78bd7ff3486", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6aa179508e77386b7ac3dfbb8cfab78bd7ff3486"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f5babf18b5bede638a67406cbd3ebf480cd4b8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f5babf18b5bede638a67406cbd3ebf480cd4b8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f5babf18b5bede638a67406cbd3ebf480cd4b8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f5babf18b5bede638a67406cbd3ebf480cd4b8f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "172d0c86838196561037b8766f231da85c7bd45c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/172d0c86838196561037b8766f231da85c7bd45c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/172d0c86838196561037b8766f231da85c7bd45c"}], "stats": {"total": 161, "additions": 153, "deletions": 8}, "files": [{"sha": "16ee1d69a1f5ab812e4683b35ae6a29490cf904e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5babf18b5bede638a67406cbd3ebf480cd4b8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5babf18b5bede638a67406cbd3ebf480cd4b8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f5babf18b5bede638a67406cbd3ebf480cd4b8f", "patch": "@@ -1,3 +1,7 @@\n+2009-09-18  Jason Merrill  <jason@redhat.com>\n+\n+\t* c.opt: Add -fno-deduce-init-list.\n+\n 2009-09-18  Neil Vachharajani  <nvachhar@google.com>\n \n \t* value-prof.c (interesting_stringop_to_profile_p): Added output"}, {"sha": "21f7ab7124694cb2374041fe0d81565c5a2fe720", "filename": "gcc/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5babf18b5bede638a67406cbd3ebf480cd4b8f/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5babf18b5bede638a67406cbd3ebf480cd4b8f/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=5f5babf18b5bede638a67406cbd3ebf480cd4b8f", "patch": "@@ -558,6 +558,10 @@ fconstant-string-class=\n ObjC ObjC++ Joined\n -fconst-string-class=<name>\tUse class <name> for constant strings\n \n+fdeduce-init-list\n+C++ ObjC++ Var(flag_deduce_init_list) Init(1)\n+-fno-deduce-init-list\tdisable deduction of std::initializer_list for a template type parameter from a brace-enclosed initializer-list\n+\n fdefault-inline\n C++ ObjC++\n Inline member functions by default"}, {"sha": "350aa3ee8cd62270fd7d38fba4c138ac736fdc77", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5babf18b5bede638a67406cbd3ebf480cd4b8f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5babf18b5bede638a67406cbd3ebf480cd4b8f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5f5babf18b5bede638a67406cbd3ebf480cd4b8f", "patch": "@@ -1,3 +1,11 @@\n+2009-09-18  Jason Merrill  <jason@redhat.com>\n+\n+\t* pt.c (get_pattern_parm): New.\n+\t(listify): Split out from...\n+\t(listify_autos): ...here.\n+\t(unify): Deduce std::initializer_list for T.\n+\t* call.c (build_over_call): Warn about it.\n+\n 2009-09-17  Andrew Pinski  <pinskia@gcc.gnu.org>\n \n \tPR c++/39365\n@@ -67,7 +75,7 @@\n \t* decl.c (build_init_list_var_init): Check return value of\n \tperform_implicit_conversion.\n \n-2009-09-03  Jason Merrill  <jason@redhat.com>\n+2009-09-08  Jason Merrill  <jason@redhat.com>\n \n \t* class.c (currently_open_class): Make sure we're dealing with the\n \tmain variant."}, {"sha": "8c1bb0edd47dc43c2e8d68d94b776ba8e2e91f6a", "filename": "gcc/cp/call.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5babf18b5bede638a67406cbd3ebf480cd4b8f/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5babf18b5bede638a67406cbd3ebf480cd4b8f/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=5f5babf18b5bede638a67406cbd3ebf480cd4b8f", "patch": "@@ -5568,6 +5568,28 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t  && !TREE_ADDRESSABLE (type))\n \tconv = conv->u.next;\n \n+      /* Warn about initializer_list deduction that isn't currently in the\n+\t working draft.  */\n+      if (cxx_dialect > cxx98\n+\t  && flag_deduce_init_list\n+\t  && cand->template_decl\n+\t  && is_std_init_list (non_reference (type)))\n+\t{\n+\t  tree tmpl = TI_TEMPLATE (cand->template_decl);\n+\t  tree realparm = chain_index (j, DECL_ARGUMENTS (cand->fn));\n+\t  tree patparm = get_pattern_parm (realparm, tmpl);\n+\n+\t  if (!is_std_init_list (non_reference (TREE_TYPE (patparm))))\n+\t    {\n+\t      pedwarn (input_location, 0, \"deducing %qT as %qT\",\n+\t\t       non_reference (TREE_TYPE (patparm)),\n+\t\t       non_reference (type));\n+\t      pedwarn (input_location, 0, \"  in call to %q+D\", cand->fn);\n+\t      pedwarn (input_location, 0,\n+\t\t       \"  (you can disable this with -fno-deduce-init-list)\");\n+\t    }\n+\t}\n+\n       val = convert_like_with_context\n \t(conv, VEC_index (tree, args, arg_index), fn, i - is_method,\n \t complain);"}, {"sha": "7801f987e5105bf03ae8f4dc3561df6027c2d0fd", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5babf18b5bede638a67406cbd3ebf480cd4b8f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5babf18b5bede638a67406cbd3ebf480cd4b8f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5f5babf18b5bede638a67406cbd3ebf480cd4b8f", "patch": "@@ -4646,6 +4646,7 @@ extern tree get_types_needing_access_check\t(tree);\n extern int template_class_depth\t\t\t(tree);\n extern int is_specialization_of\t\t\t(tree, tree);\n extern bool is_specialization_of_friend\t\t(tree, tree);\n+extern tree get_pattern_parm\t\t\t(tree, tree);\n extern int comp_template_args\t\t\t(tree, tree);\n extern tree maybe_process_partial_specialization (tree);\n extern tree most_specialized_instantiation\t(tree);"}, {"sha": "7e3a54540ec0ec7968d939812d6a0bebf6dd4610", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 62, "deletions": 7, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5babf18b5bede638a67406cbd3ebf480cd4b8f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5babf18b5bede638a67406cbd3ebf480cd4b8f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5f5babf18b5bede638a67406cbd3ebf480cd4b8f", "patch": "@@ -192,6 +192,8 @@ static void perform_typedefs_access_check (tree tmpl, tree targs);\n static void append_type_to_template_for_access_check_1 (tree, tree, tree);\n static hashval_t iterative_hash_template_arg (tree arg, hashval_t val);\n static bool primary_template_instantiation_p (const_tree);\n+static tree listify (tree);\n+static tree listify_autos (tree, tree);\n \n /* Make the current scope suitable for access checking when we are\n    processing T.  T can be FUNCTION_DECL for instantiated function\n@@ -8033,6 +8035,36 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n   return result;\n }\n \n+/* Given PARM_DECL PARM, find the corresponding PARM_DECL in the template\n+   TMPL.  We do this using DECL_PARM_INDEX, which should work even with\n+   parameter packs; all parms generated from a function parameter pack will\n+   have the same DECL_PARM_INDEX.  */\n+\n+tree\n+get_pattern_parm (tree parm, tree tmpl)\n+{\n+  tree pattern = DECL_TEMPLATE_RESULT (tmpl);\n+  tree patparm;\n+\n+  if (DECL_ARTIFICIAL (parm))\n+    {\n+      for (patparm = DECL_ARGUMENTS (pattern);\n+\t   patparm; patparm = TREE_CHAIN (patparm))\n+\tif (DECL_ARTIFICIAL (patparm)\n+\t    && DECL_NAME (parm) == DECL_NAME (patparm))\n+\t  break;\n+    }\n+  else\n+    {\n+      patparm = FUNCTION_FIRST_USER_PARM (DECL_TEMPLATE_RESULT (tmpl));\n+      patparm = chain_index (DECL_PARM_INDEX (parm)-1, patparm);\n+      gcc_assert (DECL_PARM_INDEX (patparm)\n+\t\t  == DECL_PARM_INDEX (parm));\n+    }\n+\n+  return patparm;\n+}\n+\n /* Substitute ARGS into the vector or list of template arguments T.  */\n \n static tree\n@@ -13727,6 +13759,12 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict)\n     {\n       tree elt, elttype;\n       unsigned i;\n+      tree orig_parm = parm;\n+\n+      /* Replace T with std::initializer_list<T> for deduction.  */\n+      if (TREE_CODE (parm) == TEMPLATE_TYPE_PARM\n+\t  && flag_deduce_init_list)\n+\tparm = listify (parm);\n \n       if (!is_std_init_list (parm))\n \t/* We can only deduce from an initializer list argument if the\n@@ -13752,6 +13790,16 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict)\n \t  if (unify (tparms, targs, elttype, elt, elt_strict))\n \t    return 1;\n \t}\n+\n+      /* If the std::initializer_list<T> deduction worked, replace the\n+\t deduced A with std::initializer_list<A>.  */\n+      if (orig_parm != parm)\n+\t{\n+\t  idx = TEMPLATE_TYPE_IDX (orig_parm);\n+\t  targ = TREE_VEC_ELT (INNERMOST_TEMPLATE_ARGS (targs), idx);\n+\t  targ = listify (targ);\n+\t  TREE_VEC_ELT (INNERMOST_TEMPLATE_ARGS (targs), idx) = targ;\n+\t}\n       return 0;\n     }\n \n@@ -17446,26 +17494,33 @@ make_auto (void)\n   return au;\n }\n \n-/* Replace auto in TYPE with std::initializer_list<auto>.  */\n+/* Given type ARG, return std::initializer_list<ARG>.  */\n \n static tree\n-listify_autos (tree type, tree auto_node)\n+listify (tree arg)\n {\n   tree std_init_list = namespace_binding\n     (get_identifier (\"initializer_list\"), std_node);\n   tree argvec;\n-  tree init_auto;\n   if (!std_init_list || !DECL_CLASS_TEMPLATE_P (std_init_list))\n     {    \n-      error (\"deducing auto from brace-enclosed initializer list requires \"\n+      error (\"deducing from brace-enclosed initializer list requires \"\n \t     \"#include <initializer_list>\");\n       return error_mark_node;\n     }\n   argvec = make_tree_vec (1);\n-  TREE_VEC_ELT (argvec, 0) = auto_node;\n-  init_auto = lookup_template_class (std_init_list, argvec, NULL_TREE,\n-\t\t\t\t     NULL_TREE, 0, tf_warning_or_error);\n+  TREE_VEC_ELT (argvec, 0) = arg;\n+  return lookup_template_class (std_init_list, argvec, NULL_TREE,\n+\t\t\t\tNULL_TREE, 0, tf_warning_or_error);\n+}\n+\n+/* Replace auto in TYPE with std::initializer_list<auto>.  */\n \n+static tree\n+listify_autos (tree type, tree auto_node)\n+{\n+  tree init_auto = listify (auto_node);\n+  tree argvec = make_tree_vec (1);\n   TREE_VEC_ELT (argvec, 0) = init_auto;\n   if (processing_template_decl)\n     argvec = add_to_template_args (current_template_args (), argvec);"}, {"sha": "ad8e51cfe974c987b0f360974bedff69929c32f9", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5babf18b5bede638a67406cbd3ebf480cd4b8f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5babf18b5bede638a67406cbd3ebf480cd4b8f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5f5babf18b5bede638a67406cbd3ebf480cd4b8f", "patch": "@@ -1785,6 +1785,27 @@ two definitions were merged.\n This option is no longer useful on most targets, now that support has\n been added for putting variables into BSS without making them common.\n \n+@item -fno-deduce-init-list\n+@opindex fno-deduce-init-list\n+Disable deduction of a template type parameter as\n+std::initializer_list from a brace-enclosed initializer list, i.e.\n+\n+@smallexample\n+template <class T> auto forward(T t) -> decltype (realfn (t))\n+@{\n+  return realfn (t);\n+@}\n+\n+void f()\n+@{\n+  forward(@{1,2@}); // call forward<std::initializer_list<int>>\n+@}\n+@end smallexample\n+\n+This option is present because this deduction is an extension to the\n+current specification in the C++0x working draft, and there was\n+some concern about potential overload resolution problems.\n+\n @item -ffriend-injection\n @opindex ffriend-injection\n Inject friend functions into the enclosing namespace, so that they are"}, {"sha": "43f42b5e5fecf64114bf5b42118c92cf455094d6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5babf18b5bede638a67406cbd3ebf480cd4b8f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5babf18b5bede638a67406cbd3ebf480cd4b8f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5f5babf18b5bede638a67406cbd3ebf480cd4b8f", "patch": "@@ -1,3 +1,7 @@\n+2009-09-18  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/initlist-deduce.C: New.\n+\n 2009-09-18  Janis Johnson  <janis187@us.ibm.com>\n \n \t* gcc.dg/dfp/dfp.exp: Also run tests in c-c++-common/dfp."}, {"sha": "e422132afc39977dffc94e8896ffb4c50fd3bee6", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist-deduce.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f5babf18b5bede638a67406cbd3ebf480cd4b8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-deduce.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f5babf18b5bede638a67406cbd3ebf480cd4b8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-deduce.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-deduce.C?ref=5f5babf18b5bede638a67406cbd3ebf480cd4b8f", "patch": "@@ -0,0 +1,26 @@\n+// Test for deduction of T as std::initializer_list.  This isn't currently\n+// supported by the working draft, but is necessary for perfect forwarding\n+// of initializer-lists to things that can take a std::initializer_list.\n+\n+// { dg-options -std=c++0x }\n+// { dg-do run }\n+\n+#include <initializer_list>\n+\n+struct A\n+{\n+  A(std::initializer_list<int>) { }\n+};\n+\n+void f (A a) { }\n+\n+template <class T>\n+auto g (T&& t) -> decltype (f(t)) // { dg-warning \"call\" }\n+{\n+  return f(t);\n+}\n+\n+int main()\n+{\n+  g({1});\t\t\t// { dg-warning \"deduc\" }\n+}"}]}