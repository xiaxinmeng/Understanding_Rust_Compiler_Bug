{"sha": "3431f196c04ff06ff8fef740e46612c176fb73eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQzMWYxOTZjMDRmZjA2ZmY4ZmVmNzQwZTQ2NjEyYzE3NmZiNzNlYg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "2000-02-26T05:32:24Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2000-02-26T05:32:24Z"}, "message": "Fix 3 ia64 g++ testsuite failures, and groff miscompilation.\n\n\t* optimize.c (expand_call_inline): Emit the return label before\n\tevaluating the return value.\n\nFrom-SVN: r32169", "tree": {"sha": "b8babba7ab35efed2b8a2b8c15216c0c034665f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8babba7ab35efed2b8a2b8c15216c0c034665f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3431f196c04ff06ff8fef740e46612c176fb73eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3431f196c04ff06ff8fef740e46612c176fb73eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3431f196c04ff06ff8fef740e46612c176fb73eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3431f196c04ff06ff8fef740e46612c176fb73eb/comments", "author": null, "committer": null, "parents": [{"sha": "0268c5010749bc52f40c599be83108607c4bbbe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0268c5010749bc52f40c599be83108607c4bbbe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0268c5010749bc52f40c599be83108607c4bbbe2"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "d4828755eaa4ada0ca0165f815271a123bf9fbaa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3431f196c04ff06ff8fef740e46612c176fb73eb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3431f196c04ff06ff8fef740e46612c176fb73eb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3431f196c04ff06ff8fef740e46612c176fb73eb", "patch": "@@ -1,3 +1,8 @@\n+Fri Feb 25 14:52:33 2000  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* optimize.c (expand_call_inline): Emit the return label before\n+\tevaluating the return value.\n+\n 2000-02-24  Mark Mitchell  <mark@codesourcery.com>\n \n \t* lex.c (check_newline): Use push_srcloc and pop_srcloc, rather"}, {"sha": "f5db6a100823e13f6500d4dfd3cb1052c4c52f29", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3431f196c04ff06ff8fef740e46612c176fb73eb/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3431f196c04ff06ff8fef740e46612c176fb73eb/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=3431f196c04ff06ff8fef740e46612c176fb73eb", "patch": "@@ -39,11 +39,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n      are not needed.\n      \n    o Provide heuristics to clamp inlining of recursive template\n-     calls?  \n+     calls?  */\n \n-   o It looks like the return label is not being placed in the optimal\n-     place.  Shouldn't it come before the returned value?  */\n-   \n /* Data required for function inlining.  */\n \n typedef struct inline_data\n@@ -644,6 +641,13 @@ expand_call_inline (tp, walk_subtrees, data)\n   STMT_EXPR_STMT (expr)\n     = chainon (STMT_EXPR_STMT (expr), scope_stmt);\n \n+  /* After the body of the function comes the RET_LABEL.  This must come\n+     before we evaluate the returned value below, because that evalulation\n+     may cause RTL to be generated.  */\n+  STMT_EXPR_STMT (expr)\n+    = chainon (STMT_EXPR_STMT (expr), \n+\t       build_min_nt (LABEL_STMT, id->ret_label));\n+\n   /* Finally, mention the returned value so that the value of the\n      statement-expression is the returned value of the function.  */\n   STMT_EXPR_STMT (expr) = chainon (STMT_EXPR_STMT (expr), use_stmt);\n@@ -652,11 +656,6 @@ expand_call_inline (tp, walk_subtrees, data)\n   splay_tree_delete (id->decl_map);\n   id->decl_map = st;\n \n-  /* After the body of the function comes the RET_LABEL.  */\n-  STMT_EXPR_STMT (expr)\n-    = chainon (STMT_EXPR_STMT (expr), \n-\t       build_min_nt (LABEL_STMT, id->ret_label));\n-\n   /* The new expression has side-effects if the old one did.  */\n   TREE_SIDE_EFFECTS (expr) = TREE_SIDE_EFFECTS (t);\n "}]}