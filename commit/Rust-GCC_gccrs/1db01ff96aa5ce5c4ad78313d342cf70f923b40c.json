{"sha": "1db01ff96aa5ce5c4ad78313d342cf70f923b40c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRiMDFmZjk2YWE1Y2U1YzRhZDc4MzEzZDM0MmNmNzBmOTIzYjQwYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-03-08T10:46:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-03-08T10:46:39Z"}, "message": "re PR tree-optimization/89550 (Spurious array-bounds warning when using __PRETTY_FUNCTION__ as a string_view)\n\n\tPR tree-optimization/89550\n\t* builtins.c (c_strlen): Only set TREE_NO_WARNING if warning_at\n\treturned true.  Formatting fixes.\n\t(expand_builtin_strnlen): Formatting fixes.\n\t* tree-vrp.c (vrp_prop::check_mem_ref): Only set TREE_NO_WARNING\n\tif warning_at returned true.\n\t* tree-cfg.c (pass_warn_function_return::execute): Likewise.\nc-family/\n\t* c-common.c (c_common_truthvalue_conversion): Only set\n\tTREE_NO_WARNING if warning_at returned true.\n\t* c-warn.c (overflow_warning, warn_logical_operator): Likewise.\nc/\n\t* c-decl.c (finish_function): Only set TREE_NO_WARNING if warning_at\n\treturned true.\n\t(c_write_global_declarations_1): Only set TREE_NO_WARNING if pedwarn\n\tor warning returned true.\ncp/\n\t* semantics.c (maybe_convert_cond): Only set TREE_NO_WARNING if\n\twarning_at returned true.\n\t* decl2.c (c_parse_final_cleanups): Likewise.\n\t* typeck.c (convert_for_assignment): Likewise.\n\t* decl.c (finish_function): Likewise.\n\nFrom-SVN: r269485", "tree": {"sha": "fae09df731b30ee508d5a37f95a71ca30d15912d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fae09df731b30ee508d5a37f95a71ca30d15912d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1db01ff96aa5ce5c4ad78313d342cf70f923b40c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1db01ff96aa5ce5c4ad78313d342cf70f923b40c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1db01ff96aa5ce5c4ad78313d342cf70f923b40c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "94ec37a909697bbf29db73278c77621ccdf60693", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ec37a909697bbf29db73278c77621ccdf60693", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94ec37a909697bbf29db73278c77621ccdf60693"}], "stats": {"total": 172, "additions": 102, "deletions": 70}, "files": [{"sha": "5ce59076868177b8cf88bcc51b5c1cf1b15a6deb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1db01ff96aa5ce5c4ad78313d342cf70f923b40c", "patch": "@@ -1,3 +1,13 @@\n+2019-03-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/89550\n+\t* builtins.c (c_strlen): Only set TREE_NO_WARNING if warning_at\n+\treturned true.  Formatting fixes.\n+\t(expand_builtin_strnlen): Formatting fixes.\n+\t* tree-vrp.c (vrp_prop::check_mem_ref): Only set TREE_NO_WARNING\n+\tif warning_at returned true.\n+\t* tree-cfg.c (pass_warn_function_return::execute): Likewise.\n+\n 2019-03-08  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/89578"}, {"sha": "0910c725ecbdd108408b57bd062b0737affe3f60", "filename": "gcc/builtins.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=1db01ff96aa5ce5c4ad78313d342cf70f923b40c", "patch": "@@ -760,15 +760,13 @@ c_strlen (tree src, int only_value, c_strlen_data *data, unsigned eltsize)\n      runtime.  */\n   if (eltoff < 0 || eltoff >= maxelts)\n     {\n-     /* Suppress multiple warnings for propagated constant strings.  */\n+      /* Suppress multiple warnings for propagated constant strings.  */\n       if (only_value != 2\n-\t  && !TREE_NO_WARNING (src))\n-        {\n-\t  warning_at (loc, OPT_Warray_bounds,\n-\t\t      \"offset %qwi outside bounds of constant string\",\n-\t\t      eltoff);\n-          TREE_NO_WARNING (src) = 1;\n-        }\n+\t  && !TREE_NO_WARNING (src)\n+\t  && warning_at (loc, OPT_Warray_bounds,\n+\t\t\t \"offset %qwi outside bounds of constant string\",\n+\t\t\t eltoff))\n+\tTREE_NO_WARNING (src) = 1;\n       return NULL_TREE;\n     }\n \n@@ -3099,7 +3097,7 @@ expand_builtin_strnlen (tree exp, rtx target, machine_mode target_mode)\n \t\t\t \"%K%qD specified bound %E \"\n \t\t\t \"exceeds maximum object size %E\",\n \t\t\t exp, func, bound, maxobjsize))\n-\t  TREE_NO_WARNING (exp) = true;\n+\tTREE_NO_WARNING (exp) = true;\n \n       bool exact = true;\n       if (!len || TREE_CODE (len) != INTEGER_CST)\n@@ -3158,7 +3156,7 @@ expand_builtin_strnlen (tree exp, rtx target, machine_mode target_mode)\n \t\t     \"%K%qD specified bound [%wu, %wu] \"\n \t\t     \"exceeds maximum object size %E\",\n \t\t     exp, func, min.to_uhwi (), max.to_uhwi (), maxobjsize))\n-      TREE_NO_WARNING (exp) = true;\n+    TREE_NO_WARNING (exp) = true;\n \n   bool exact = true;\n   if (!len || TREE_CODE (len) != INTEGER_CST)"}, {"sha": "55006e68bc6897ae2169e5612d501339b24e9f6a", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=1db01ff96aa5ce5c4ad78313d342cf70f923b40c", "patch": "@@ -1,3 +1,10 @@\n+2019-03-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/89550\n+\t* c-common.c (c_common_truthvalue_conversion): Only set\n+\tTREE_NO_WARNING if warning_at returned true.\n+\t* c-warn.c (overflow_warning, warn_logical_operator): Likewise.\n+\n 2019-02-25  Sandra Loosemore  <sandra@codesourcery.com>\n \t    Martin Sebor  <msebor@gmail.com>\n "}, {"sha": "e5a19ccb8fe378234d37fe9e72c414e4f063598f", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=1db01ff96aa5ce5c4ad78313d342cf70f923b40c", "patch": "@@ -3546,13 +3546,11 @@ c_common_truthvalue_conversion (location_t location, tree expr)\n \n     case MODIFY_EXPR:\n       if (!TREE_NO_WARNING (expr)\n-\t  && warn_parentheses)\n-\t{\n-\t  warning_at (location, OPT_Wparentheses,\n-\t\t      \"suggest parentheses around assignment used as \"\n-\t\t      \"truth value\");\n-\t  TREE_NO_WARNING (expr) = 1;\n-\t}\n+\t  && warn_parentheses\n+\t  && warning_at (location, OPT_Wparentheses,\n+\t\t\t \"suggest parentheses around assignment used as \"\n+\t\t\t \"truth value\"))\n+\tTREE_NO_WARNING (expr) = 1;\n       break;\n \n     case CONST_DECL:"}, {"sha": "d775ff80b452327af52326a7161487bd68e1a217", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=1db01ff96aa5ce5c4ad78313d342cf70f923b40c", "patch": "@@ -143,12 +143,16 @@ overflow_warning (location_t loc, tree value, tree expr)\n       return;\n     }\n \n+  bool warned;\n   if (expr)\n-    warning_at (loc, OPT_Woverflow, warnfmt, expr, TREE_TYPE (expr), value);\n+    warned = warning_at (loc, OPT_Woverflow, warnfmt, expr, TREE_TYPE (expr),\n+\t\t\t value);\n   else\n-    warning_at (loc, OPT_Woverflow, warnfmt, TREE_TYPE (value), value);\n+    warned = warning_at (loc, OPT_Woverflow, warnfmt, TREE_TYPE (value),\n+\t\t\t value);\n \n-  TREE_NO_WARNING (value) = 1;\n+  if (warned)\n+    TREE_NO_WARNING (value) = 1;\n }\n \n /* Helper function for walk_tree.  Unwrap C_MAYBE_CONST_EXPRs in an expression\n@@ -216,13 +220,17 @@ warn_logical_operator (location_t location, enum tree_code code, tree type,\n \t  && !integer_zerop (folded_op_right)\n \t  && !integer_onep (folded_op_right))\n \t{\n+\t  bool warned;\n \t  if (or_op)\n-\t    warning_at (location, OPT_Wlogical_op, \"logical %<or%>\"\n-\t\t\t\" applied to non-boolean constant\");\n+\t    warned\n+\t      = warning_at (location, OPT_Wlogical_op,\n+\t\t\t    \"logical %<or%> applied to non-boolean constant\");\n \t  else\n-\t    warning_at (location, OPT_Wlogical_op, \"logical %<and%>\"\n-\t\t\t\" applied to non-boolean constant\");\n-\t  TREE_NO_WARNING (op_left) = true;\n+\t    warned\n+\t      = warning_at (location, OPT_Wlogical_op,\n+\t\t\t    \"logical %<and%> applied to non-boolean constant\");\n+\t  if (warned)\n+\t    TREE_NO_WARNING (op_left) = true;\n \t  return;\n \t}\n     }"}, {"sha": "b59be5e062ab9ace17e566921506f9b685877d12", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=1db01ff96aa5ce5c4ad78313d342cf70f923b40c", "patch": "@@ -1,3 +1,11 @@\n+2019-03-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/89550\n+\t* c-decl.c (finish_function): Only set TREE_NO_WARNING if warning_at\n+\treturned true.\n+\t(c_write_global_declarations_1): Only set TREE_NO_WARNING if pedwarn\n+\tor warning returned true.\n+\n 2019-02-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/89525"}, {"sha": "32ec183336c45c3a3bd23688e7304d41eb07cc35", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=1db01ff96aa5ce5c4ad78313d342cf70f923b40c", "patch": "@@ -9664,12 +9664,10 @@ finish_function (void)\n       && !C_FUNCTION_IMPLICIT_INT (fndecl)\n       /* Normally, with -Wreturn-type, flow will complain, but we might\n          optimize out static functions.  */\n-      && !TREE_PUBLIC (fndecl))\n-    {\n-      warning (OPT_Wreturn_type,\n-\t       \"no return statement in function returning non-void\");\n-      TREE_NO_WARNING (fndecl) = 1;\n-    }\n+      && !TREE_PUBLIC (fndecl)\n+      && warning (OPT_Wreturn_type,\n+\t\t  \"no return statement in function returning non-void\"))\n+    TREE_NO_WARNING (fndecl) = 1;\n \n   /* Complain about parameters that are only set, but never otherwise used.  */\n   if (warn_unused_but_set_parameter)\n@@ -11486,17 +11484,19 @@ c_write_global_declarations_1 (tree globals)\n \t{\n \t  if (C_DECL_USED (decl))\n \t    {\n-\t      pedwarn (input_location, 0, \"%q+F used but never defined\", decl);\n-\t      TREE_NO_WARNING (decl) = 1;\n+\t      if (pedwarn (input_location, 0, \"%q+F used but never defined\",\n+\t\t\t   decl))\n+\t\tTREE_NO_WARNING (decl) = 1;\n \t    }\n \t  /* For -Wunused-function warn about unused static prototypes.  */\n \t  else if (warn_unused_function\n \t\t   && ! DECL_ARTIFICIAL (decl)\n \t\t   && ! TREE_NO_WARNING (decl))\n \t    {\n-\t      warning (OPT_Wunused_function,\n-\t\t       \"%q+F declared %<static%> but never defined\", decl);\n-\t      TREE_NO_WARNING (decl) = 1;\n+\t      if (warning (OPT_Wunused_function,\n+\t\t\t   \"%q+F declared %<static%> but never defined\",\n+\t\t\t   decl))\n+\t\tTREE_NO_WARNING (decl) = 1;\n \t    }\n \t}\n "}, {"sha": "43184b08cd3719b2bf1a2a50d8837bd494e48591", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1db01ff96aa5ce5c4ad78313d342cf70f923b40c", "patch": "@@ -1,5 +1,12 @@\n 2019-03-08  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/89550\n+\t* semantics.c (maybe_convert_cond): Only set TREE_NO_WARNING if\n+\twarning_at returned true.\n+\t* decl2.c (c_parse_final_cleanups): Likewise.\n+\t* typeck.c (convert_for_assignment): Likewise.\n+\t* decl.c (finish_function): Likewise.\n+\n \tPR c++/89585\n \t* parser.c (cp_parser_asm_definition): Just warn instead of error\n \ton volatile qualifier outside of function body."}, {"sha": "081f37cd26a0544c9ab76811d5015632af3db2e8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1db01ff96aa5ce5c4ad78313d342cf70f923b40c", "patch": "@@ -16171,9 +16171,9 @@ finish_function (bool inline_p)\n \t\t\t\t\t    global_dc->option_state))\n \t    add_return_star_this_fixit (&richloc, fndecl);\n \t}\n-      warning_at (&richloc, OPT_Wreturn_type,\n-\t\t  \"no return statement in function returning non-void\");\n-      TREE_NO_WARNING (fndecl) = 1;\n+      if (warning_at (&richloc, OPT_Wreturn_type,\n+\t  \"no return statement in function returning non-void\"))\n+\tTREE_NO_WARNING (fndecl) = 1;\n     }\n \n   /* Store the end of the function, so that we get good line number"}, {"sha": "4e4746e2ca0ce1b0bcfbdb0c63dc29832ce1fcbb", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=1db01ff96aa5ce5c4ad78313d342cf70f923b40c", "patch": "@@ -5022,13 +5022,11 @@ c_parse_final_cleanups (void)\n \t  /* Don't complain if the template was defined.  */\n \t  && !(DECL_TEMPLATE_INSTANTIATION (decl)\n \t       && DECL_INITIAL (DECL_TEMPLATE_RESULT\n-\t\t\t\t(template_for_substitution (decl)))))\n-\t{\n-\t  warning_at (DECL_SOURCE_LOCATION (decl), 0,\n-\t\t      \"inline function %qD used but never defined\", decl);\n-\t  /* Avoid a duplicate warning from check_global_declaration.  */\n-\t  TREE_NO_WARNING (decl) = 1;\n-\t}\n+\t\t\t\t(template_for_substitution (decl))))\n+\t  && warning_at (DECL_SOURCE_LOCATION (decl), 0,\n+\t\t\t \"inline function %qD used but never defined\", decl))\n+\t/* Avoid a duplicate warning from check_global_declaration.  */\n+\tTREE_NO_WARNING (decl) = 1;\n     }\n \n   /* So must decls that use a type with no linkage.  */"}, {"sha": "798a2b3bb30f70d8ad830904cfd4c50908b5244b", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=1db01ff96aa5ce5c4ad78313d342cf70f923b40c", "patch": "@@ -657,12 +657,11 @@ maybe_convert_cond (tree cond)\n \n   if (TREE_CODE (cond) == MODIFY_EXPR\n       && !TREE_NO_WARNING (cond)\n-      && warn_parentheses)\n-    {\n-      warning_at (cp_expr_loc_or_loc (cond, input_location), OPT_Wparentheses,\n-\t\t  \"suggest parentheses around assignment used as truth value\");\n-      TREE_NO_WARNING (cond) = 1;\n-    }\n+      && warn_parentheses\n+      && warning_at (cp_expr_loc_or_loc (cond, input_location),\n+\t\t     OPT_Wparentheses, \"suggest parentheses around \"\n+\t\t\t\t       \"assignment used as truth value\"))\n+    TREE_NO_WARNING (cond) = 1;\n \n   return condition_conversion (cond);\n }"}, {"sha": "51f47814acd98bf1d8131924e6291e1b3cd7b56d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=1db01ff96aa5ce5c4ad78313d342cf70f923b40c", "patch": "@@ -9071,12 +9071,11 @@ convert_for_assignment (tree type, tree rhs,\n       && TREE_CODE (rhs) == MODIFY_EXPR\n       && !TREE_NO_WARNING (rhs)\n       && TREE_CODE (TREE_TYPE (rhs)) != BOOLEAN_TYPE\n-      && (complain & tf_warning))\n-    {\n-      warning_at (rhs_loc, OPT_Wparentheses,\n-\t\t  \"suggest parentheses around assignment used as truth value\");\n-      TREE_NO_WARNING (rhs) = 1;\n-    }\n+      && (complain & tf_warning)\n+      && warning_at (rhs_loc, OPT_Wparentheses,\n+\t\t     \"suggest parentheses around assignment used as \"\n+\t\t     \"truth value\"))\n+    TREE_NO_WARNING (rhs) = 1;\n \n   if (complain & tf_warning)\n     warn_for_address_or_pointer_of_packed_member (type, rhs);"}, {"sha": "71966147880c83017f36ee46df38e35d0581da9a", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=1db01ff96aa5ce5c4ad78313d342cf70f923b40c", "patch": "@@ -9329,9 +9329,9 @@ pass_warn_function_return::execute (function *fun)\n \t      location = gimple_location (last);\n \t      if (LOCATION_LOCUS (location) == UNKNOWN_LOCATION)\n \t\tlocation = fun->function_end_locus;\n-\t      warning_at (location, OPT_Wreturn_type,\n-\t\t\t  \"control reaches end of non-void function\");\n-\t      TREE_NO_WARNING (fun->decl) = 1;\n+\t      if (warning_at (location, OPT_Wreturn_type,\n+\t\t\t      \"control reaches end of non-void function\"))\n+\t\tTREE_NO_WARNING (fun->decl) = 1;\n \t      break;\n \t    }\n \t}\n@@ -9361,9 +9361,9 @@ pass_warn_function_return::execute (function *fun)\n \t\t    location = gimple_location (prev);\n \t\t  if (LOCATION_LOCUS (location) == UNKNOWN_LOCATION)\n \t\t    location = fun->function_end_locus;\n-\t\t  warning_at (location, OPT_Wreturn_type,\n-\t\t\t      \"control reaches end of non-void function\");\n-\t\t  TREE_NO_WARNING (fun->decl) = 1;\n+\t\t  if (warning_at (location, OPT_Wreturn_type,\n+\t\t\t\t  \"control reaches end of non-void function\"))\n+\t\t    TREE_NO_WARNING (fun->decl) = 1;\n \t\t  break;\n \t\t}\n \t    }"}, {"sha": "bf1d947fbf7e80edd2195aee42f9236255e565f9", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db01ff96aa5ce5c4ad78313d342cf70f923b40c/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=1db01ff96aa5ce5c4ad78313d342cf70f923b40c", "patch": "@@ -4749,7 +4749,8 @@ vrp_prop::check_mem_ref (location_t location, tree ref,\n       if (warned && DECL_P (arg))\n \tinform (DECL_SOURCE_LOCATION (arg), \"while referencing %qD\", arg);\n \n-      TREE_NO_WARNING (ref) = 1;\n+      if (warned)\n+\tTREE_NO_WARNING (ref) = 1;\n       return;\n     }\n \n@@ -4762,11 +4763,10 @@ vrp_prop::check_mem_ref (location_t location, tree ref,\n     {\n       HOST_WIDE_INT tmpidx = extrema[i].to_shwi () / eltsize.to_shwi ();\n \n-      warning_at (location, OPT_Warray_bounds,\n-\t\t  \"intermediate array offset %wi is outside array bounds \"\n-\t\t  \"of %qT\",\n-\t\t  tmpidx,  reftype);\n-      TREE_NO_WARNING (ref) = 1;\n+      if (warning_at (location, OPT_Warray_bounds,\n+\t\t      \"intermediate array offset %wi is outside array bounds \"\n+\t\t      \"of %qT\", tmpidx, reftype))\n+\tTREE_NO_WARNING (ref) = 1;\n     }\n }\n "}]}