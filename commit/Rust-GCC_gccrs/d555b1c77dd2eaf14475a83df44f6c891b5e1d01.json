{"sha": "d555b1c77dd2eaf14475a83df44f6c891b5e1d01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU1NWIxYzc3ZGQyZWFmMTQ0NzVhODNkZjQ0ZjZjODkxYjVlMWQwMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-07-19T10:27:58Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-07-19T10:27:58Z"}, "message": "re PR c++/44969 ([C++0x] <type_traits> std::is_constructible broken for fundamental types.)\n\n/cp\n2010-07-19  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/44969\n\t* typeck.c (build_x_compound_expr_from_list): Add tsubst_flags_t\n\tparameter.\n\t* cp-tree.h: Adjust declaration.\n\t* init.c (perform_member_init): Adjust caller.\n\t* decl.c (grok_reference_init, cp_finish_decl): Likewise.\n\t* typeck2.c (store_init_value): Likewise.\n\t(build_functional_cast): Pass complain argument to\n\tbuild_x_compound_expr_from_list.\n\n/testsuite\n2010-07-19  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/44969\n\t* g++.dg/template/sfinae23.C: New.\n\nFrom-SVN: r162303", "tree": {"sha": "dfc9020e9a37f633dc174a838d204287f5e7b22e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfc9020e9a37f633dc174a838d204287f5e7b22e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d555b1c77dd2eaf14475a83df44f6c891b5e1d01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d555b1c77dd2eaf14475a83df44f6c891b5e1d01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d555b1c77dd2eaf14475a83df44f6c891b5e1d01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d555b1c77dd2eaf14475a83df44f6c891b5e1d01/comments", "author": null, "committer": null, "parents": [{"sha": "b1d5eee8c13a952f8c3f46f1abbe8da8c12040a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d5eee8c13a952f8c3f46f1abbe8da8c12040a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1d5eee8c13a952f8c3f46f1abbe8da8c12040a8"}], "stats": {"total": 69, "additions": 58, "deletions": 11}, "files": [{"sha": "63d24a2ac1214065a63bf97438b8bdc6a6bef661", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555b1c77dd2eaf14475a83df44f6c891b5e1d01/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555b1c77dd2eaf14475a83df44f6c891b5e1d01/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d555b1c77dd2eaf14475a83df44f6c891b5e1d01", "patch": "@@ -1,3 +1,15 @@\n+2010-07-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/44969\n+\t* typeck.c (build_x_compound_expr_from_list): Add tsubst_flags_t\n+\tparameter.\n+\t* cp-tree.h: Adjust declaration.\n+\t* init.c (perform_member_init): Adjust caller.\n+\t* decl.c (grok_reference_init, cp_finish_decl): Likewise.\n+\t* typeck2.c (store_init_value): Likewise.\n+\t(build_functional_cast): Pass complain argument to\n+\tbuild_x_compound_expr_from_list.\n+\n 2010-07-16  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/32505"}, {"sha": "155db4ce4a824eabdff5490ae6f4d3548513a271", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555b1c77dd2eaf14475a83df44f6c891b5e1d01/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555b1c77dd2eaf14475a83df44f6c891b5e1d01/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d555b1c77dd2eaf14475a83df44f6c891b5e1d01", "patch": "@@ -5462,7 +5462,8 @@ extern tree cp_build_unary_op                   (enum tree_code, tree, int,\n extern tree unary_complex_lvalue\t\t(enum tree_code, tree);\n extern tree build_x_conditional_expr\t\t(tree, tree, tree, \n                                                  tsubst_flags_t);\n-extern tree build_x_compound_expr_from_list\t(tree, expr_list_kind);\n+extern tree build_x_compound_expr_from_list\t(tree, expr_list_kind,\n+\t\t\t\t\t\t tsubst_flags_t);\n extern tree build_x_compound_expr_from_vec\t(VEC(tree,gc) *, const char *);\n extern tree build_x_compound_expr\t\t(tree, tree, tsubst_flags_t);\n extern tree build_compound_expr                 (location_t, tree, tree);"}, {"sha": "3aaa20c0ed3823d778cdbcfead1f7b33b2031744", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555b1c77dd2eaf14475a83df44f6c891b5e1d01/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555b1c77dd2eaf14475a83df44f6c891b5e1d01/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d555b1c77dd2eaf14475a83df44f6c891b5e1d01", "patch": "@@ -4462,7 +4462,8 @@ grok_reference_init (tree decl, tree type, tree init, tree *cleanup)\n     }\n \n   if (TREE_CODE (init) == TREE_LIST)\n-    init = build_x_compound_expr_from_list (init, ELK_INIT);\n+    init = build_x_compound_expr_from_list (init, ELK_INIT,\n+\t\t\t\t\t    tf_warning_or_error);\n \n   if (TREE_CODE (TREE_TYPE (type)) != ARRAY_TYPE\n       && TREE_CODE (TREE_TYPE (init)) == ARRAY_TYPE)\n@@ -5683,7 +5684,8 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \t  return;\n \t}\n       if (TREE_CODE (init) == TREE_LIST)\n-\tinit = build_x_compound_expr_from_list (init, ELK_INIT);\n+\tinit = build_x_compound_expr_from_list (init, ELK_INIT,\n+\t\t\t\t\t\ttf_warning_or_error);\n       if (describable_type (init))\n \t{\n \t  type = TREE_TYPE (decl) = do_auto_deduction (type, init, auto_node);"}, {"sha": "d796fd0822c00843be465085af2d404979d66c07", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555b1c77dd2eaf14475a83df44f6c891b5e1d01/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555b1c77dd2eaf14475a83df44f6c891b5e1d01/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=d555b1c77dd2eaf14475a83df44f6c891b5e1d01", "patch": "@@ -525,7 +525,8 @@ perform_member_init (tree member, tree init)\n       else if (TREE_CODE (init) == TREE_LIST)\n \t/* There was an explicit member initialization.  Do some work\n \t   in that case.  */\n-\tinit = build_x_compound_expr_from_list (init, ELK_MEM_INIT);\n+\tinit = build_x_compound_expr_from_list (init, ELK_MEM_INIT,\n+\t\t\t\t\t\ttf_warning_or_error);\n \n       if (init)\n \tfinish_expr_stmt (cp_build_modify_expr (decl, INIT_EXPR, init,"}, {"sha": "484d299f4626d76479d1dca08307dee1bbda240a", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555b1c77dd2eaf14475a83df44f6c891b5e1d01/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555b1c77dd2eaf14475a83df44f6c891b5e1d01/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=d555b1c77dd2eaf14475a83df44f6c891b5e1d01", "patch": "@@ -5502,14 +5502,16 @@ build_x_conditional_expr (tree ifexp, tree op1, tree op2,\n    that performs them all and returns the value of the last of them.  */\n \n tree\n-build_x_compound_expr_from_list (tree list, expr_list_kind exp)\n+build_x_compound_expr_from_list (tree list, expr_list_kind exp,\n+\t\t\t\t tsubst_flags_t complain)\n {\n   tree expr = TREE_VALUE (list);\n \n   if (TREE_CHAIN (list))\n     {\n-      switch (exp)\n-\t{\n+      if (complain & tf_error)\n+\tswitch (exp)\n+\t  {\n \t  case ELK_INIT:\n \t    permerror (input_location, \"expression list treated as compound \"\n \t\t\t\t       \"expression in initializer\");\n@@ -5524,11 +5526,11 @@ build_x_compound_expr_from_list (tree list, expr_list_kind exp)\n \t    break;\n \t  default:\n \t    gcc_unreachable ();\n-\t}\n+\t  }\n \n       for (list = TREE_CHAIN (list); list; list = TREE_CHAIN (list))\n \texpr = build_x_compound_expr (expr, TREE_VALUE (list), \n-                                      tf_warning_or_error);\n+                                      complain);\n     }\n \n   return expr;"}, {"sha": "ce83d7c40b726c2bde52f73d82dfb3e63c575f2c", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555b1c77dd2eaf14475a83df44f6c891b5e1d01/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555b1c77dd2eaf14475a83df44f6c891b5e1d01/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=d555b1c77dd2eaf14475a83df44f6c891b5e1d01", "patch": "@@ -737,7 +737,8 @@ store_init_value (tree decl, tree init, int flags)\n \t}\n       else\n \t/* We get here with code like `int a (2);' */\n-\tinit = build_x_compound_expr_from_list (init, ELK_INIT);\n+\tinit = build_x_compound_expr_from_list (init, ELK_INIT,\n+\t\t\t\t\t\ttf_warning_or_error);\n     }\n \n   /* End of special C++ code.  */\n@@ -1594,7 +1595,7 @@ build_functional_cast (tree exp, tree parms, tsubst_flags_t complain)\n \treturn cp_convert (type, integer_zero_node);\n \n       /* This must build a C cast.  */\n-      parms = build_x_compound_expr_from_list (parms, ELK_FUNC_CAST);\n+      parms = build_x_compound_expr_from_list (parms, ELK_FUNC_CAST, complain);\n       return cp_build_c_cast (type, parms, complain);\n     }\n "}, {"sha": "c898a9eea1bf1df73d15d96253be0e2ce6485544", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555b1c77dd2eaf14475a83df44f6c891b5e1d01/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555b1c77dd2eaf14475a83df44f6c891b5e1d01/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d555b1c77dd2eaf14475a83df44f6c891b5e1d01", "patch": "@@ -1,3 +1,8 @@\n+2010-07-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/44969\n+\t* g++.dg/template/sfinae23.C: New.\n+\n 2010-07-19  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* lib/target-supports.exp (check_sse_os_support_available): New"}, {"sha": "9e0197a705038ccc21fa41b7a5efb2cd7c53a7dd", "filename": "gcc/testsuite/g++.dg/template/sfinae23.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555b1c77dd2eaf14475a83df44f6c891b5e1d01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555b1c77dd2eaf14475a83df44f6c891b5e1d01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae23.C?ref=d555b1c77dd2eaf14475a83df44f6c891b5e1d01", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/44969\n+// { dg-options \"-std=c++0x\" }\n+\n+template<typename Tp, typename... Args>\n+  class mini_is_constructible\n+  {\n+    typedef char one;\n+    typedef struct { char arr[2]; } two;\n+\n+    template<typename Tp1, typename... Args1>\n+      static decltype(Tp1(Args1()...), one())\n+      test(int);\n+\n+    template<typename, typename...>\n+      static two test(...);\n+\n+  public:\n+    static const bool value = sizeof(test<Tp, Args...>(0)) == 1;\n+  };\n+\n+class A { };\n+\n+int Test[mini_is_constructible<int, A, A>::value ? -1 : 1];"}]}