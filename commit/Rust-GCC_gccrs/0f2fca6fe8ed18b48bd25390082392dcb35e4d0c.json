{"sha": "0f2fca6fe8ed18b48bd25390082392dcb35e4d0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYyZmNhNmZlOGVkMThiNDhiZDI1MzkwMDgyMzkyZGNiMzVlNGQwYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-03-02T07:57:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-03-02T07:57:26Z"}, "message": "re PR inline-asm/84625 (ICE with empty constraint and vector constant)\n\n\tPR inline-asm/84625\n\t* config/i386/i386.c (ix86_print_operand): Use conditional\n\toutput_operand_lossage instead of gcc_assert if CONST_VECTOR is not\n\tzero vector.\n\n\t* gcc.target/i386/pr84625.c: New test.\n\nFrom-SVN: r258125", "tree": {"sha": "3ed32cf95d193adc2f00e0f70ddfdf153a981c61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ed32cf95d193adc2f00e0f70ddfdf153a981c61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f2fca6fe8ed18b48bd25390082392dcb35e4d0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f2fca6fe8ed18b48bd25390082392dcb35e4d0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f2fca6fe8ed18b48bd25390082392dcb35e4d0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f2fca6fe8ed18b48bd25390082392dcb35e4d0c/comments", "author": null, "committer": null, "parents": [{"sha": "e8b3f7a4dc1d954341475a5f13e4a8d939ddcfb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8b3f7a4dc1d954341475a5f13e4a8d939ddcfb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8b3f7a4dc1d954341475a5f13e4a8d939ddcfb1"}], "stats": {"total": 81, "additions": 53, "deletions": 28}, "files": [{"sha": "bb32cf440e2016216a14f76516c4bf9fffe3fe0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2fca6fe8ed18b48bd25390082392dcb35e4d0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2fca6fe8ed18b48bd25390082392dcb35e4d0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f2fca6fe8ed18b48bd25390082392dcb35e4d0c", "patch": "@@ -1,3 +1,10 @@\n+2018-03-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR inline-asm/84625\n+\t* config/i386/i386.c (ix86_print_operand): Use conditional\n+\toutput_operand_lossage instead of gcc_assert if CONST_VECTOR is not\n+\tzero vector.\n+\n 2018-03-02  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/84427\n@@ -117,7 +124,7 @@\n \tthey act more like predicates and should be subject to\n \t\"lost tail\" side-effect preserving.\n \n-2018-02-28  Alexandre Oliva <aoliva@redhat.com>\n+2018-02-28  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR rtl-optimization/81611\n \t* auto-inc-dec.c (attempt_change): Move dead note from\n@@ -170,7 +177,7 @@\n \t'ggc' suffixes.  Change first column width.\n \t(timer::print): Fix formatting of the column.\n \n-2018-02-27  Alexandre Oliva <aoliva@redhat.com>\n+2018-02-27  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* tree-ssa-live.c (remove_unused_scope_block_p): Do not\n \tpreserve inline entry blocks for the sake of debug inline\n@@ -895,7 +902,7 @@\n \t(*bitset_in_memory, *bitinvert_in_memory, *bitclr_in_memory): Convert\n \tto named insn, correct maximum insn length.\n \n-2018-02-14  Jozef Lawrynowicz <jozefl.gcc@gmail.com>\n+2018-02-14  Jozef Lawrynowicz  <jozefl.gcc@gmail.com>\n \n \tPR target/79242\n \t* machmode.def: Define a complex mode for PARTIAL_INT.\n@@ -939,7 +946,7 @@\n \t* config/rl78/rl78.c (rl78_handle_func_attribute): Mark\n \tARGS as unused.\n \n-2018-02-13  Alexandre Oliva <aoliva@redhat.com>\n+2018-02-13  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/84342\n \tPR debug/84319\n@@ -986,7 +993,7 @@\n \thandling.  Also check whether the anti-range contains any values\n \tthat satisfy the mask; switch to a VR_RANGE if not.\n \n-2018-02-13  Paolo Bonzini <bonzini@gnu.org>\n+2018-02-13  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR sanitizer/84340\n \t* internal-fn.def (ASAN_CHECK, ASAN_MARK): Revert changes to fnspec.\n@@ -1082,7 +1089,7 @@\n \t(vectorizable_condition): Likewise.\n \t(vectorizable_comparison): Likewise.\n \n-2018-02-12  Paolo Bonzini <bonzini@gnu.org>\n+2018-02-12  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR sanitizer/84307\n \t* internal-fn.def (ASAN_CHECK): Fix fnspec to account for return value.\n@@ -1162,7 +1169,7 @@\n \t* config/rs6000/mmintrin.h (_mm_cmpgt_pi32 [_ARCH_PWR9]):\n \tCast vec_cmpgt result to correct type.\n \n-2018-02-11  Alexandre Oliva <aoliva@redhat.com>\n+2018-02-11  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* final.c (final_scan_insn_1): Renamed from...\n \t(final_scan_insn): ... this.  New wrapper, to recover\n@@ -1263,7 +1270,7 @@\n \t* config/s390/s390.c (s390_set_current_function): Invoke\n \ts390_indirect_branch_settings also if fndecl didn't change.\n \n-2018-02-09  Alexandre Oliva <aoliva@redhat.com>\n+2018-02-09  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/rs6000/rs6000.md (blockage): Set length to zero.\n \n@@ -1297,7 +1304,7 @@\n \tFormatting fixes.  Verify first that tree_fits_poly_int64_p (op01).\n \tSync some changes from cxx_fold_indirect_ref.\n \n-2018-02-09  Alexandre Oliva <aoliva@redhat.com>\n+2018-02-09  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* cfgexpand.c (expand_gimple_basic_block): Handle inline entry\n \tmarkers.\n@@ -2146,7 +2153,7 @@\n \tdependence against last_pending_memory_flush in addition to\n \tpending_jump_insns.\n \n-2018-01-30  Alexandre Oliva <aoliva@redhat.com>\n+2018-01-30  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR tree-optimization/81611\n \t* tree-ssa-dom.c (simple_iv_increment_p): Skip intervening\n@@ -2223,15 +2230,15 @@\n \tTurning off pre increment/decrement/modify allows IVOPTS to\n \toptimize DF/SF loops where the index is an int.\n \n-2018-01-29  Richard Biener <rguenther@suse.de>\n+2018-01-29  Richard Biener  <rguenther@suse.de>\n \t    Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \tPR bootstrap/80867\n \t* tree-vect-stmts.c (vectorizable_call): Don't call\n \ttargetm.vectorize_builtin_md_vectorized_function if callee is\n \tNULL.\n \n-2018-01-22 Carl Love <cel@us.ibm.com>\n+2018-01-22  Carl Love  <cel@us.ibm.com>\n \n \t* doc/extend.tex: Fix typo in second arg in\n \t__builtin_bcdadd_{lt|eq|gt|ov} and __builtin_bcdsub_{lt|eq|gt|ov}.\n@@ -2368,7 +2375,7 @@\n \t* config/arc/constraints.md (Csc): New constraint.\n \n 2018-01-26  Claudiu Zissulescu  <claziss@synopsys.com>\n-\t    John Eric Martin <John.Martin@emmicro-us.com>\n+\t    John Eric Martin  <John.Martin@emmicro-us.com>\n \n \t* config/arc/arc-protos.h: Add arc_is_jli_call_p proto.\n \t* config/arc/arc.c (_arc_jli_section): New struct.\n@@ -2810,7 +2817,7 @@\n \n \t* config/rl78/rl78.md (smaxdi3): New define_expand.\n \n-2018-01-22 Carl Love <cel@us.ibm.com>\n+2018-01-22  Carl Love  <cel@us.ibm.com>\n \n \t* config/rs6000/rs6000-builtin.def (ST_ELEMREV_V1TI, LD_ELEMREV_V1TI,\n \tLVX_V1TI): Add macro expansion.\n@@ -2855,7 +2862,7 @@\n \tMove TARGET_PORTABLE_RUNTIME check after TARGET_64BIT check.\n \n 2018-01-21  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n-\t    David Edelsohn <dje.gcc@gmail.com>\n+\t    David Edelsohn  <dje.gcc@gmail.com>\n \n \tPR target/83946\n \t* config/rs6000/rs6000.md (*call_indirect_nonlocal_sysv<mode>):"}, {"sha": "1843e5d3377bc855207d5771b7f970cb41f6e282", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2fca6fe8ed18b48bd25390082392dcb35e4d0c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2fca6fe8ed18b48bd25390082392dcb35e4d0c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0f2fca6fe8ed18b48bd25390082392dcb35e4d0c", "patch": "@@ -18743,7 +18743,8 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t since we can in fact encode that into an immediate.  */\n       if (GET_CODE (x) == CONST_VECTOR)\n \t{\n-\t  gcc_assert (x == CONST0_RTX (GET_MODE (x)));\n+\t  if (x != CONST0_RTX (GET_MODE (x)))\n+\t    output_operand_lossage (\"invalid vector immediate\");\n \t  x = const0_rtx;\n \t}\n "}, {"sha": "b035c357dbe57b92e3ebb199af0fa3d58cb78fbf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2fca6fe8ed18b48bd25390082392dcb35e4d0c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2fca6fe8ed18b48bd25390082392dcb35e4d0c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f2fca6fe8ed18b48bd25390082392dcb35e4d0c", "patch": "@@ -1,3 +1,8 @@\n+2018-03-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR inline-asm/84625\n+\t* gcc.target/i386/pr84625.c: New test.\n+\n 2018-03-02  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/84427\n@@ -374,7 +379,7 @@\n \t* g++.dg/gomp/pr84556.C: New test.\n \t* g++.dg/vect/pr84556.cc: New test.\n \n-2018-02-26  Dominique d'Humieres <dominiq@gcc.gnu.org>\n+2018-02-26  Dominique d'Humieres  <dominiq@gcc.gnu.org>\n \n \tPR fortran/32957\n \t* gfortran.dg/c_f_pointer_shape_tests_2.f03: Use explicit KIND c_int.\n@@ -420,7 +425,7 @@\n \tPR fortran/78238\n \t* gfortran.dg/select_type_40.f90: New test.\n \n-2018-02-24  Steven G. Kargl <kargl@gcc.gnu.org>\n+2018-02-24  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/30792\n \t* gfortran.dg/data_substring.f90: New test.\n@@ -3410,7 +3415,7 @@\n \tPR target/83831\n \t* gcc.target/rx/pr83831.c: New tests.\n \n-2018-02-14  Jozef Lawrynowicz <jozefl.gcc@gmail.com>\n+2018-02-14  Jozef Lawrynowicz  <jozefl.gcc@gmail.com>\n \n \tPR target/79242\n \t* gcc.target/msp430/pr79242.c: New test.\n@@ -3912,7 +3917,7 @@\n \tPR c++/71662\n \t* g++.dg/cpp0x/scoped_enum7.C: New.\n \n-2018-02-07  Christophe Lyon <christophe.lyon@linaro.org>\n+2018-02-07  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \tPR tree-optimization/83008\n \t* gcc.dg/cse_recip.c: Add -fno-tree-slp-vectorize.\n@@ -4040,7 +4045,7 @@\n \tPR middle-end/79966\n \t* gfortran.dg/pr79966.f90: New testcase\n \n-2018-02-04  Dominique d'Humieres <dominiq@gcc.gnu.org>\n+2018-02-04  Dominique d'Humieres  <dominiq@gcc.gnu.org>\n \n \tPR fortran/84094\n \t* gfortran.dg/associate_23.f90: Fix invalid code.\n@@ -4883,7 +4888,7 @@\n \tPR c++/81933\n \t* g++.dg/cpp1y/constexpr-empty4.C: New test.\n \n-2018-01-22  Will Schmidt <will_schmidt@vnet.ibm.com>\n+2018-01-22  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* gcc.target/powerpc/fold-vec-abs-short-fwrap.c: Add xxspltib to\n \tscan-asembler valid instructions list.\n@@ -4927,7 +4932,7 @@\n \t* gcc.dg/pr83666.c: Likewise.\n \n 2018-01-21  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n-\t    David Edelsohn <dje.gcc@gmail.com>\n+\t    David Edelsohn  <dje.gcc@gmail.com>\n \n \tPR target/83946\n \t* gcc.target/powerpc/safe-indirect-jump-1.c: Change expected\n@@ -5044,7 +5049,7 @@\n \tPR c++/81013\n \t* g++.dg/inherit/union3.C: New.\n \n-2018-01-18  Christophe Lyon <christophe.lyon@linaro.org>\n+2018-01-18  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.dg/rtl/arm/stl-cond.c: Enable on arm*.\n \n@@ -5053,7 +5058,7 @@\n \tPR ipa/83619\n \t* g++.dg/torture/pr83619.C: New testcase.\n \n-2018-01-18  Christophe Lyon <christophe.lyon@linaro.org>\n+2018-01-18  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* lib/target-supports.exp (check_effective_target_arm_arch_FUNC_ok):\n \tAdd function body to force error messages in some configurations.\n@@ -6625,7 +6630,7 @@\n \tPR target/83330\n \t* gcc.target/i386/pr83330.c: New test.\n \n-2018-01-11  Steven G. Kargl <kargl@gcc.gnu.org>\n+2018-01-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/79383\n \t* gfortran.dg/dtio_31.f03: New test.\n@@ -6987,7 +6992,7 @@\n \tPR fortran/83741\n \t* gfortran.dg/allocate_assumed_charlen_3.f90: New test.\n \n-2018-01-08  Chih-Mao Chen <pkmx.tw@gmail.com>\n+2018-01-08  Chih-Mao Chen  <pkmx.tw@gmail.com>\n \t    Monk Chiang  <sh.chiang04@gmail.com>\n \n \t* gcc.target/riscv/save-restore-1.c: New.\n@@ -7003,7 +7008,7 @@\n \t* g++.dg/pr81308-1.C: New test.\n \t* g++.dg/pr81308-2.C: New test.\n \n-2018-01-08  Vidya Praveen <vidyapraveen@arm.com>\n+2018-01-08  Vidya Praveen  <vidyapraveen@arm.com>\n \n \tPR target/83663 - Revert r255946\n \t* gcc.target/aarch64/vect-slp-dup.c: New."}, {"sha": "600a6f15a9a67ef023b2d9c1aa5129710c780336", "filename": "gcc/testsuite/gcc.target/i386/pr84625.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2fca6fe8ed18b48bd25390082392dcb35e4d0c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84625.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2fca6fe8ed18b48bd25390082392dcb35e4d0c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84625.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84625.c?ref=0f2fca6fe8ed18b48bd25390082392dcb35e4d0c", "patch": "@@ -0,0 +1,12 @@\n+/* PR inline-asm/84625 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef int V __attribute__((vector_size (16)));\n+\n+void\n+foo (void)\n+{\n+  asm volatile (\"# %0\" : : \"X\" ((V) { 1, 2, 3, 4 }));\t// { dg-error \"invalid vector immediate\" }\n+  asm volatile (\"# %0\" : : \"\" ((V) { 2, 3, 4, 5 }));\t// { dg-error \"invalid vector immediate\" }\n+}"}]}