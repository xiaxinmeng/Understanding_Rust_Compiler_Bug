{"sha": "63694b5ed20fd7c3bb05d1e42fc9d6e96770dbfc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM2OTRiNWVkMjBmZDdjM2JiMDVkMWU0MmZjOWQ2ZTk2NzcwZGJmYw==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2004-06-14T12:11:06Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-06-14T12:11:06Z"}, "message": "s390.c: Include \"tree-gimple.h\".\n\n\t* config/s390/s390.c: Include \"tree-gimple.h\".\n\t(s390_gimplify_va_arg): New function.\n\t(TARGET_GIMPLIFY_VA_ARG_EXPR): Define.\n\t(s390_va_arg): Remove.\n\t* config/s390/s390-protos.h (s390_va_arg): Remove.\n\t* config/s390/s390.h (EXPAND_BUILTIN_VA_ARG): Call abort ().\n\nFrom-SVN: r83090", "tree": {"sha": "fb5782b9e53eb1cbf56660f092fd4acb2fe1853e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb5782b9e53eb1cbf56660f092fd4acb2fe1853e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63694b5ed20fd7c3bb05d1e42fc9d6e96770dbfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63694b5ed20fd7c3bb05d1e42fc9d6e96770dbfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63694b5ed20fd7c3bb05d1e42fc9d6e96770dbfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63694b5ed20fd7c3bb05d1e42fc9d6e96770dbfc/comments", "author": null, "committer": null, "parents": [{"sha": "623a66fa858ef308693b61e33f2c7ba6686d3151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/623a66fa858ef308693b61e33f2c7ba6686d3151", "html_url": "https://github.com/Rust-GCC/gccrs/commit/623a66fa858ef308693b61e33f2c7ba6686d3151"}], "stats": {"total": 115, "additions": 62, "deletions": 53}, "files": [{"sha": "3cb4f7220f477279c48443a9cc877b577858cb39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63694b5ed20fd7c3bb05d1e42fc9d6e96770dbfc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63694b5ed20fd7c3bb05d1e42fc9d6e96770dbfc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63694b5ed20fd7c3bb05d1e42fc9d6e96770dbfc", "patch": "@@ -1,3 +1,12 @@\n+2004-06-14  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390.c: Include \"tree-gimple.h\".\n+\t(s390_gimplify_va_arg): New function.\n+\t(TARGET_GIMPLIFY_VA_ARG_EXPR): Define.\n+\t(s390_va_arg): Remove.\n+\t* config/s390/s390-protos.h (s390_va_arg): Remove.\n+\t* config/s390/s390.h (EXPAND_BUILTIN_VA_ARG): Call abort ().\n+\n 2004-06-14  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* basic-block.h (could_fall_through): Declare."}, {"sha": "90e4de61ac3039d516f24249a9d6c15c3695c20c", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63694b5ed20fd7c3bb05d1e42fc9d6e96770dbfc/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63694b5ed20fd7c3bb05d1e42fc9d6e96770dbfc/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=63694b5ed20fd7c3bb05d1e42fc9d6e96770dbfc", "patch": "@@ -100,6 +100,5 @@ extern void s390_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n extern rtx s390_function_arg (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n extern rtx s390_function_value (tree, enum machine_mode);\n extern void s390_va_start (tree, rtx);\n-extern rtx s390_va_arg (tree, tree);\n #endif /* RTX_CODE */\n #endif /* TREE_CODE */"}, {"sha": "2e6b2ca570792092a64aabb19b1da0ef4cf63feb", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 52, "deletions": 51, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63694b5ed20fd7c3bb05d1e42fc9d6e96770dbfc/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63694b5ed20fd7c3bb05d1e42fc9d6e96770dbfc/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=63694b5ed20fd7c3bb05d1e42fc9d6e96770dbfc", "patch": "@@ -50,6 +50,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"debug.h\"\n #include \"langhooks.h\"\n #include \"optabs.h\"\n+#include \"tree-gimple.h\"\n \n /* Machine-specific symbol_ref flags.  */\n #define SYMBOL_FLAG_ALIGN1\t(SYMBOL_FLAG_MACH_DEP << 0)\n@@ -78,6 +79,7 @@ static int s390_address_cost (rtx);\n static void s390_reorg (void);\n static bool s390_valid_pointer_mode (enum machine_mode);\n static tree s390_build_builtin_va_list (void);\n+static tree s390_gimplify_va_arg (tree, tree, tree *, tree *);\n static bool s390_function_ok_for_sibcall (tree, tree);\n static bool s390_call_saved_register_used (tree);\n \n@@ -147,6 +149,8 @@ static bool s390_call_saved_register_used (tree);\n \n #undef TARGET_BUILD_BUILTIN_VA_LIST\n #define TARGET_BUILD_BUILTIN_VA_LIST s390_build_builtin_va_list\n+#undef TARGET_GIMPLIFY_VA_ARG_EXPR\n+#define TARGET_GIMPLIFY_VA_ARG_EXPR s390_gimplify_va_arg\n \n #undef TARGET_PROMOTE_FUNCTION_ARGS\n #define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n@@ -6306,13 +6310,14 @@ s390_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n        ret = **args.overflow_arg_area++;\n    } */\n \n-rtx\n-s390_va_arg (tree valist, tree type)\n+tree\n+s390_gimplify_va_arg (tree valist, tree type, tree *pre_p, \n+\t\t      tree *post_p ATTRIBUTE_UNUSED)\n {\n   tree f_gpr, f_fpr, f_ovf, f_sav;\n   tree gpr, fpr, ovf, sav, reg, t, u;\n   int indirect_p, size, n_reg, sav_ofs, sav_scale, max_reg;\n-  rtx lab_false, lab_over, addr_rtx, r;\n+  tree lab_false, lab_over, addr;\n \n   f_gpr = TYPE_FIELDS (TREE_TYPE (va_list_type_node));\n   f_fpr = TREE_CHAIN (f_gpr);\n@@ -6387,79 +6392,75 @@ s390_va_arg (tree valist, tree type)\n \n   /* Pull the value out of the saved registers ...  */\n \n-  lab_false = gen_label_rtx ();\n-  lab_over = gen_label_rtx ();\n-  addr_rtx = gen_reg_rtx (Pmode);\n+  lab_false = create_artificial_label ();\n+  lab_over = create_artificial_label ();\n+  addr = create_tmp_var (ptr_type_node, \"addr\");\n \n-  emit_cmp_and_jump_insns (expand_expr (reg, NULL_RTX, Pmode, EXPAND_NORMAL),\n-\t\t\t   GEN_INT (max_reg),\n-\t\t\t   GT, const1_rtx, Pmode, 0, lab_false);\n+  t = build_int_2 (max_reg, 0);\n+  TREE_TYPE (t) = TREE_TYPE (reg);\n+  t = build2 (GT_EXPR, boolean_type_node, reg, t);\n+  u = build1 (GOTO_EXPR, void_type_node, lab_false);\n+  t = build3 (COND_EXPR, void_type_node, t, u, NULL_TREE);\n+  gimplify_and_add (t, pre_p);\n \n   if (sav_ofs)\n-    t = build (PLUS_EXPR, ptr_type_node, sav, build_int_2 (sav_ofs, 0));\n+    t = build2 (PLUS_EXPR, ptr_type_node, sav, build_int_2 (sav_ofs, 0));\n   else\n     t = sav;\n \n-  u = build (MULT_EXPR, long_integer_type_node,\n-\t     reg, build_int_2 (sav_scale, 0));\n-  TREE_SIDE_EFFECTS (u) = 1;\n+  u = build2 (MULT_EXPR, long_integer_type_node,\n+\t      reg, build_int_2 (sav_scale, 0));\n+  t = build2 (PLUS_EXPR, ptr_type_node, t, u);\n \n-  t = build (PLUS_EXPR, ptr_type_node, t, u);\n-  TREE_SIDE_EFFECTS (t) = 1;\n+  t = build2 (MODIFY_EXPR, void_type_node, addr, t);\n+  gimplify_and_add (t, pre_p);\n \n-  r = expand_expr (t, addr_rtx, Pmode, EXPAND_NORMAL);\n-  if (r != addr_rtx)\n-    emit_move_insn (addr_rtx, r);\n+  t = build1 (GOTO_EXPR, void_type_node, lab_over);\n+  gimplify_and_add (t, pre_p);\n \n+  t = build1 (LABEL_EXPR, void_type_node, lab_false);\n+  append_to_statement_list (t, pre_p);\n \n-  emit_jump_insn (gen_jump (lab_over));\n-  emit_barrier ();\n-  emit_label (lab_false);\n \n   /* ... Otherwise out of the overflow area.  */\n \n-  t = save_expr (ovf);\n-\n-\n-  /* In 64 BIT for each argument on stack, a full 64 bit slot is allocated.  */\n+  t = ovf;\n   if (size < UNITS_PER_WORD)\n-    {\n-      t = build (PLUS_EXPR, TREE_TYPE (t), t, build_int_2 (UNITS_PER_WORD-size, 0));\n-      t = build (MODIFY_EXPR, TREE_TYPE (ovf), ovf, t);\n-      TREE_SIDE_EFFECTS (t) = 1;\n-      expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+    t = build2 (PLUS_EXPR, TREE_TYPE (t), t, \n+\t\tbuild_int_2 (UNITS_PER_WORD - size, 0));\n \n-      t = save_expr (ovf);\n-    }\n+  gimplify_expr (&t, pre_p, NULL, is_gimple_val, fb_rvalue);\n \n-  r = expand_expr (t, addr_rtx, Pmode, EXPAND_NORMAL);\n-  if (r != addr_rtx)\n-    emit_move_insn (addr_rtx, r);\n+  u = build2 (MODIFY_EXPR, void_type_node, addr, t);\n+  gimplify_and_add (u, pre_p);\n \n-  t = build (PLUS_EXPR, TREE_TYPE (t), t, build_int_2 (size, 0));\n-  t = build (MODIFY_EXPR, TREE_TYPE (ovf), ovf, t);\n-  TREE_SIDE_EFFECTS (t) = 1;\n-  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+  t = build2 (PLUS_EXPR, TREE_TYPE (t), t, build_int_2 (size, 0));\n+  t = build2 (MODIFY_EXPR, TREE_TYPE (ovf), ovf, t);\n+  gimplify_and_add (t, pre_p);\n \n-  emit_label (lab_over);\n+  t = build1 (LABEL_EXPR, void_type_node, lab_over);\n+  append_to_statement_list (t, pre_p);\n \n-  /* If less than max_regs a registers are retrieved out\n-     of register save area, increment.  */\n \n-  u = build (PREINCREMENT_EXPR, TREE_TYPE (reg), reg,\n-\t     build_int_2 (n_reg, 0));\n-  TREE_SIDE_EFFECTS (u) = 1;\n-  expand_expr (u, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+  /* Increment register save count.  */\n+\n+  u = build2 (PREINCREMENT_EXPR, TREE_TYPE (reg), reg,\n+\t      build_int_2 (n_reg, 0));\n+  gimplify_and_add (u, pre_p);\n \n   if (indirect_p)\n     {\n-      r = gen_rtx_MEM (Pmode, addr_rtx);\n-      set_mem_alias_set (r, get_varargs_alias_set ());\n-      emit_move_insn (addr_rtx, r);\n+      t = build_pointer_type (build_pointer_type (type));\n+      addr = fold_convert (t, addr);\n+      addr = build_fold_indirect_ref (addr);\n+    }\n+  else\n+    {\n+      t = build_pointer_type (type);\n+      addr = fold_convert (t, addr);\n     }\n \n-\n-  return addr_rtx;\n+  return build_fold_indirect_ref (addr);\n }\n \n "}, {"sha": "368acfd6a234d7ee588fdd195c03607306b43fb9", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63694b5ed20fd7c3bb05d1e42fc9d6e96770dbfc/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63694b5ed20fd7c3bb05d1e42fc9d6e96770dbfc/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=63694b5ed20fd7c3bb05d1e42fc9d6e96770dbfc", "patch": "@@ -708,7 +708,7 @@ CUMULATIVE_ARGS;\n   s390_va_start (valist, nextarg)\n \n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n-  s390_va_arg (valist, type)\n+  (abort (), NULL_RTX)\n \n \n /* Trampolines for nested functions.  */"}]}