{"sha": "5cab70136913d6b6ab56de94620f0d62497c0460", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNhYjcwMTM2OTEzZDZiNmFiNTZkZTk0NjIwZjBkNjI0OTdjMDQ2MA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-10-15T01:16:53Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-10-15T01:16:53Z"}, "message": "basic_string.h (operator+=(initializer_list<>), [...]): Forward to the append overload taking a const CharT* pointer and a size...\n\n2009-10-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/basic_string.h (operator+=(initializer_list<>),\n\tappend(initializer_list<>)): Forward to the append overload taking\n\ta const CharT* pointer and a size, thus avoiding instantiating\n\tunnecessarily in the built library the overload taking a pair of\n\titerators.\n\t(operator=(initializer_list<>), assign(initializer_list<>)): Likewise\n\tfor assign.\n\t(insert(iterator, initializer_list<>): Likewise for insert.\n\nFrom-SVN: r152794", "tree": {"sha": "89c751b3933349161a98cf0bf17cf9ef1e723b7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89c751b3933349161a98cf0bf17cf9ef1e723b7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cab70136913d6b6ab56de94620f0d62497c0460", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cab70136913d6b6ab56de94620f0d62497c0460", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cab70136913d6b6ab56de94620f0d62497c0460", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cab70136913d6b6ab56de94620f0d62497c0460/comments", "author": null, "committer": null, "parents": [{"sha": "b2b5d6e34da7c08896ebde074652729c847238fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2b5d6e34da7c08896ebde074652729c847238fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2b5d6e34da7c08896ebde074652729c847238fc"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "31bbb59b5f3867d16f1f354a2a5f84c2234062c9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cab70136913d6b6ab56de94620f0d62497c0460/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cab70136913d6b6ab56de94620f0d62497c0460/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5cab70136913d6b6ab56de94620f0d62497c0460", "patch": "@@ -1,3 +1,14 @@\n+2009-10-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/basic_string.h (operator+=(initializer_list<>),\n+\tappend(initializer_list<>)): Forward to the append overload taking\n+\ta const CharT* pointer and a size, thus avoiding instantiating\n+\tunnecessarily in the built library the overload taking a pair of\n+\titerators.\n+\t(operator=(initializer_list<>), assign(initializer_list<>)): Likewise\n+\tfor assign.\n+\t(insert(iterator, initializer_list<>): Likewise for insert.\n+\n 2009-10-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/c++config: Do not disable extern templates for string"}, {"sha": "9d44dc4fdfc92b5debf85df83b1810463bfceac1", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cab70136913d6b6ab56de94620f0d62497c0460/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cab70136913d6b6ab56de94620f0d62497c0460/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=5cab70136913d6b6ab56de94620f0d62497c0460", "patch": "@@ -540,7 +540,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       basic_string&\n       operator=(initializer_list<_CharT> __l)\n       {\n-\tthis->assign (__l.begin(), __l.end());\n+\tthis->assign(__l.begin(), __l.size());\n \treturn *this;\n       }\n #endif // __GXX_EXPERIMENTAL_CXX0X__\n@@ -860,7 +860,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        */\n       basic_string&\n       operator+=(initializer_list<_CharT> __l)\n-      { return this->append(__l.begin(), __l.end()); }\n+      { return this->append(__l.begin(), __l.size()); }\n #endif // __GXX_EXPERIMENTAL_CXX0X__\n \n       /**\n@@ -926,7 +926,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        */\n       basic_string&\n       append(initializer_list<_CharT> __l)\n-      { return this->append(__l.begin(), __l.end()); }\n+      { return this->append(__l.begin(), __l.size()); }\n #endif // __GXX_EXPERIMENTAL_CXX0X__\n \n       /**\n@@ -1045,7 +1045,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        */\n       basic_string&\n       assign(initializer_list<_CharT> __l)\n-      { return this->assign(__l.begin(), __l.end()); }\n+      { return this->assign(__l.begin(), __l.size()); }\n #endif // __GXX_EXPERIMENTAL_CXX0X__\n \n       /**\n@@ -1089,7 +1089,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        */\n       void\n       insert(iterator __p, initializer_list<_CharT> __l)\n-      { this->insert(__p, __l.begin(), __l.end()); }\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());\n+\tthis->insert(__p - _M_ibegin(), __l.begin(), __l.size());\n+      }\n #endif // __GXX_EXPERIMENTAL_CXX0X__\n \n       /**"}]}