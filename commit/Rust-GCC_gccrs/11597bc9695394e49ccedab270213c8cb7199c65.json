{"sha": "11597bc9695394e49ccedab270213c8cb7199c65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE1OTdiYzk2OTUzOTRlNDljY2VkYWIyNzAyMTNjOGNiNzE5OWM2NQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-07-09T00:38:40Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-07-09T00:38:40Z"}, "message": "genattrtab.h: Add new macros for attr `special' flags.\n\n\t* genattrtab.h: Add new macros for attr `special' flags.\n\t* genattrtab.c (attr_desc): Reorder/resize fields better.\n\tUse attr `special' macros in all calls to make_internal_attr.\n\t* genautomata.c: Likewise.\n\nFrom-SVN: r69114", "tree": {"sha": "778fb1f5ca53c06e06d21c3bcbc8816da07409c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/778fb1f5ca53c06e06d21c3bcbc8816da07409c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11597bc9695394e49ccedab270213c8cb7199c65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11597bc9695394e49ccedab270213c8cb7199c65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11597bc9695394e49ccedab270213c8cb7199c65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11597bc9695394e49ccedab270213c8cb7199c65/comments", "author": null, "committer": null, "parents": [{"sha": "084c1779088967df7cde7aef1ac91587d68ab3bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/084c1779088967df7cde7aef1ac91587d68ab3bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/084c1779088967df7cde7aef1ac91587d68ab3bb"}], "stats": {"total": 64, "additions": 40, "deletions": 24}, "files": [{"sha": "0eea6e2fdd405cad7edb169584a7d7d33dd29b1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11597bc9695394e49ccedab270213c8cb7199c65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11597bc9695394e49ccedab270213c8cb7199c65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11597bc9695394e49ccedab270213c8cb7199c65", "patch": "@@ -1,3 +1,10 @@\n+2003-07-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* genattrtab.h: Add new macros for attr `special' flags.\n+\t* genattrtab.c (attr_desc): Reorder/resize fields better.\n+\tUse attr `special' macros in all calls to make_internal_attr.\n+\t* genautomata.c: Likewise.\n+\n Wed Jul  9 02:25:39 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* c-common.c (c_estimate_num_insns_1): New static function."}, {"sha": "c3cadc8af45a0bc5a6b09190a16666a24b83b0ed", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11597bc9695394e49ccedab270213c8cb7199c65/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11597bc9695394e49ccedab270213c8cb7199c65/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=11597bc9695394e49ccedab270213c8cb7199c65", "patch": "@@ -175,16 +175,16 @@ struct attr_desc\n {\n   char *name;\t\t\t/* Name of attribute.  */\n   struct attr_desc *next;\t/* Next attribute.  */\n+  struct attr_value *first_value; /* First value of this attribute.  */\n+  struct attr_value *default_val; /* Default value for this attribute.  */\n+  int lineno : 24;\t\t/* Line number.  */\n   unsigned is_numeric\t: 1;\t/* Values of this attribute are numeric.  */\n   unsigned negative_ok\t: 1;\t/* Allow negative numeric values.  */\n   unsigned unsigned_p\t: 1;\t/* Make the output function unsigned int.  */\n   unsigned is_const\t: 1;\t/* Attribute value constant for each run.  */\n   unsigned is_special\t: 1;\t/* Don't call `write_attr_set'.  */\n   unsigned func_units_p\t: 1;\t/* this is the function_units attribute */\n   unsigned blockage_p\t: 1;\t/* this is the blockage range function */\n-  struct attr_value *first_value; /* First value of this attribute.  */\n-  struct attr_value *default_val; /* Default value for this attribute.  */\n-  int lineno;\t\t\t/* Line number.  */\n };\n \n #define NULL_ATTR (struct attr_desc *) NULL\n@@ -1505,7 +1505,7 @@ expand_delays (void)\n \t= make_numeric_value (XVECLEN (delay->def, 1) / 3);\n     }\n \n-  make_internal_attr (\"*num_delay_slots\", condexp, 0);\n+  make_internal_attr (\"*num_delay_slots\", condexp, ATTR_NONE);\n \n   /* If more than one delay type, do the same for computing the delay type.  */\n   if (num_delays > 1)\n@@ -1520,7 +1520,7 @@ expand_delays (void)\n \t  XVECEXP (condexp, 0, i + 1) = make_numeric_value (delay->num);\n \t}\n \n-      make_internal_attr (\"*delay_type\", condexp, 1);\n+      make_internal_attr (\"*delay_type\", condexp, ATTR_SPECIAL);\n     }\n \n   /* For each delay possibility and delay slot, compute an eligibility\n@@ -1538,7 +1538,7 @@ expand_delays (void)\n \n \t  p = attr_printf (sizeof \"*delay__\" + MAX_DIGITS * 2,\n \t\t\t   \"*delay_%d_%d\", delay->num, i / 3);\n-\t  make_internal_attr (p, newexp, 1);\n+\t  make_internal_attr (p, newexp, ATTR_SPECIAL);\n \n \t  if (have_annul_true)\n \t    {\n@@ -1549,7 +1549,7 @@ expand_delays (void)\n \t\t\t\t make_numeric_value (0));\n \t      p = attr_printf (sizeof \"*annul_true__\" + MAX_DIGITS * 2,\n \t\t\t       \"*annul_true_%d_%d\", delay->num, i / 3);\n-\t      make_internal_attr (p, newexp, 1);\n+\t      make_internal_attr (p, newexp, ATTR_SPECIAL);\n \t    }\n \n \t  if (have_annul_false)\n@@ -1561,7 +1561,7 @@ expand_delays (void)\n \t\t\t\t make_numeric_value (0));\n \t      p = attr_printf (sizeof \"*annul_false__\" + MAX_DIGITS * 2,\n \t\t\t       \"*annul_false_%d_%d\", delay->num, i / 3);\n-\t      make_internal_attr (p, newexp, 1);\n+\t      make_internal_attr (p, newexp, ATTR_SPECIAL);\n \t    }\n \t}\n     }\n@@ -1813,7 +1813,7 @@ expand_units (void)\n \t      str = attr_printf ((strlen (unit->name) + sizeof \"*_cost_\"\n \t\t\t\t  + MAX_DIGITS),\n \t\t\t\t \"*%s_cost_%d\", unit->name, op->num);\n-\t      make_internal_attr (str, issue_exp, 1);\n+\t      make_internal_attr (str, issue_exp, ATTR_SPECIAL);\n \t    }\n \n \t  /* Validate the condition.  */\n@@ -1869,7 +1869,8 @@ expand_units (void)\n       unitsmask = attr_rtx (FFS, unitsmask);\n     }\n \n-  make_internal_attr (\"*function_units_used\", unitsmask, 10);\n+  make_internal_attr (\"*function_units_used\", unitsmask,\n+\t\t      (ATTR_NEGATIVE_OK | ATTR_FUNC_UNITS));\n \n   /* Create an array of ops for each unit.  Add an extra unit for the\n      result_ready_cost function that has the ops of all other units.  */\n@@ -2043,7 +2044,7 @@ expand_units (void)\n \t      str = attr_printf ((strlen (unit->name) + sizeof \"*_block_\"\n \t\t\t\t  + MAX_DIGITS),\n \t\t\t\t \"*%s_block_%d\", unit->name, op->num);\n-\t      make_internal_attr (str, blockage, 1);\n+\t      make_internal_attr (str, blockage, ATTR_SPECIAL);\n \t    }\n \n \t  /* Record MAX (BLOCKAGE (*,*)).  */\n@@ -2077,7 +2078,7 @@ expand_units (void)\n \t      str = attr_printf ((strlen (unit->name)\n \t\t\t\t  + sizeof \"*_unit_blockage_range\"),\n \t\t\t\t \"*%s_unit_blockage_range\", unit->name);\n-\t      make_internal_attr (str, newexp, 20);\n+\t      make_internal_attr (str, newexp, (ATTR_BLOCKAGE|ATTR_UNSIGNED));\n \t    }\n \n \t  str = attr_printf (strlen (unit->name) + sizeof \"*_unit_ready_cost\",\n@@ -2088,7 +2089,7 @@ expand_units (void)\n \n       /* Make an attribute for the ready_cost function.  Simplifying\n \t further with simplify_by_exploding doesn't win.  */\n-      make_internal_attr (str, readycost, 0);\n+      make_internal_attr (str, readycost, ATTR_NONE);\n     }\n \n   /* For each unit that requires a conflict cost function, make an attribute\n@@ -2124,7 +2125,7 @@ expand_units (void)\n       /* Simplifying caseexp with simplify_by_exploding doesn't win.  */\n       str = attr_printf (strlen (unit->name) + sizeof \"*_cases\",\n \t\t\t \"*%s_cases\", unit->name);\n-      make_internal_attr (str, caseexp, 1);\n+      make_internal_attr (str, caseexp, ATTR_SPECIAL);\n     }\n }\n \n@@ -2366,7 +2367,7 @@ make_length_attrs (void)\n       make_internal_attr (new_names[i],\n \t\t\t  substitute_address (length_attr->default_val->value,\n \t\t\t\t\t      no_address_fn[i], address_fn[i]),\n-\t\t\t  0);\n+\t\t\t  ATTR_NONE);\n       new_attr = find_attr (new_names[i], 0);\n       for (av = length_attr->first_value; av; av = av->next)\n \tfor (ie = av->first_insn; ie; ie = ie->next)\n@@ -5612,11 +5613,11 @@ make_internal_attr (const char *name, rtx value, int special)\n \n   attr->is_numeric = 1;\n   attr->is_const = 0;\n-  attr->is_special = (special & 1) != 0;\n-  attr->negative_ok = (special & 2) != 0;\n-  attr->unsigned_p = (special & 4) != 0;\n-  attr->func_units_p = (special & 8) != 0;\n-  attr->blockage_p = (special & 16) != 0;\n+  attr->is_special = (special & ATTR_SPECIAL) != 0;\n+  attr->negative_ok = (special & ATTR_NEGATIVE_OK) != 0;\n+  attr->unsigned_p = (special & ATTR_UNSIGNED) != 0;\n+  attr->func_units_p = (special & ATTR_FUNC_UNITS) != 0;\n+  attr->blockage_p = (special & ATTR_BLOCKAGE) != 0;\n   attr->default_val = get_attr_value (value, attr, -2);\n }\n "}, {"sha": "d5c04005753870fce92bb9ac227d0fa07b018029", "filename": "gcc/genattrtab.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11597bc9695394e49ccedab270213c8cb7199c65/gcc%2Fgenattrtab.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11597bc9695394e49ccedab270213c8cb7199c65/gcc%2Fgenattrtab.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.h?ref=11597bc9695394e49ccedab270213c8cb7199c65", "patch": "@@ -47,3 +47,11 @@ extern void gen_insn_reserv (rtx);\n extern void initiate_automaton_gen (int, char **);\n extern void expand_automata (void);\n extern void write_automata (void);\n+\n+/* Flags for make_internal_attr's `special' parameter.  */\n+#define ATTR_NONE\t\t0\n+#define ATTR_SPECIAL\t\t(1 << 0)\n+#define ATTR_NEGATIVE_OK\t(1 << 1)\n+#define ATTR_UNSIGNED\t\t(1 << 2)\n+#define ATTR_FUNC_UNITS\t\t(1 << 3)\n+#define ATTR_BLOCKAGE\t\t(1 << 4)"}, {"sha": "635d362799102c0297dad22d98989bba314e1109", "filename": "gcc/genautomata.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11597bc9695394e49ccedab270213c8cb7199c65/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11597bc9695394e49ccedab270213c8cb7199c65/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=11597bc9695394e49ccedab270213c8cb7199c65", "patch": "@@ -9437,7 +9437,7 @@ make_insn_alts_attr (void)\n   make_internal_attr (attr_printf (sizeof (\"*\")\n \t\t\t\t   + strlen (INSN_ALTS_FUNC_NAME) + 1,\n \t\t\t\t   \"*%s\", INSN_ALTS_FUNC_NAME),\n-\t\t      condexp, 0);\n+\t\t      condexp, ATTR_NONE);\n }\n \n \f\n@@ -9474,7 +9474,7 @@ make_internal_dfa_insn_code_attr (void)\n     (attr_printf (sizeof (\"*\")\n \t\t  + strlen (INTERNAL_DFA_INSN_CODE_FUNC_NAME) + 1,\n \t\t  \"*%s\", INTERNAL_DFA_INSN_CODE_FUNC_NAME),\n-     condexp, 0);\n+     condexp, ATTR_NONE);\n }\n \n \f\n@@ -9508,7 +9508,7 @@ make_default_insn_latency_attr (void)\n   make_internal_attr (attr_printf (sizeof (\"*\")\n \t\t\t\t   + strlen (INSN_DEFAULT_LATENCY_FUNC_NAME)\n \t\t\t\t   + 1, \"*%s\", INSN_DEFAULT_LATENCY_FUNC_NAME),\n-\t\t      condexp, 0);\n+\t\t      condexp, ATTR_NONE);\n }\n \n \f\n@@ -9557,7 +9557,7 @@ make_bypass_attr (void)\n   make_internal_attr (attr_printf (sizeof (\"*\")\n \t\t\t\t   + strlen (BYPASS_P_FUNC_NAME) + 1,\n \t\t\t\t   \"*%s\", BYPASS_P_FUNC_NAME),\n-\t\t      result_rtx, 0);\n+\t\t      result_rtx, ATTR_NONE);\n }\n \n \f"}]}