{"sha": "65c5f2a63f2dc1a81f717581918c9e09f19044d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVjNWYyYTYzZjJkYzFhODFmNzE3NTgxOTE4YzllMDlmMTkwNDRkOQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2008-07-02T18:01:18Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2008-07-02T18:01:18Z"}, "message": "rtlanal.c (add_reg_note): New function.\n\n\t* rtlanal.c (add_reg_note): New function.\n\t* rtl.h (add_reg_note): Declare.\n\t* auto-inc-dec.c (attempt_change): Use add_reg_note.\n\t* bb-reorder.c (add_reg_crossing_jump_notes): Likewise.\n\t* builtins.c (expand_builtin_longjmp): Likewise.\n\t(expand_builtin_nonlocal_goto): Likewise.\n\t* calls.c (emit_call_1, expand_call): Likewise.\n\t* cfgexpand.c (add_reg_br_prob_note): Likewise.\n\t* cfglayout.c (fixup_reorder_chain): Likewise.\n\t* cfgrtl.c (force_nonfallthru_and_redirect): Likewise.\n\t(commit_one_edge_insertion): Likewise.\n\t* combine.c (move_deaths, distribute_notes): Likewise.\n\t* df-problems.c (df_set_note): Likewise.\n\t* emit-rtl.c (link_cc0_insns, try_split): Likewise.\n\t(set_unique_reg_note): Likewise.\n\t(emit_copy_of_insn_after): Likewise.\n\t* expr.c (expand_expr_real): Likewise.\n\t* gcse.c (add_label_notes): Likewise.\n\t* haifa-sched.c (create_check_block_twin): Likewise.\n\t* jump.c (mark_jump_label_1): Likewise.\n\t* loop-doloop.c (add_test, doloop_modify): Likewise.\n\t* loop-unswitch.c (compare_and_jump_seq): Likewise.\n\t* lower-subreg.c (move_eh_region_note): Likewise.\n\t* optabs.c (emit_libcall_block): Likewise.\n\t* predict.c (predict_insn): Likewise.\n\t(combine_predictions_for_insn): Likewise.\n\t* recog.c (peephole2_optimize): Likewise.\n\t* regmove.c (try_auto_increment): Likewise.\n\t* reg-stack.c (emit_pop_insn, move_for_stack_reg): Likewise.\n\t* reload.c (find_reloads): Likewise.\n\t* reload1.c (fixup_eh_region_note): Likewise.\n\t(reload_as_needed, add_auto_inc_notes, copy_eh_notes): Likewise.\n\t* reorg.c (delete_prior_computation): Likewise.\n\t(delete_computation, dbr_schedule): Likewise.\n\t* config/pa/pa.c (legitimize_pic_address): Likewise.\n\t* config/sh/sh.c (sh_reorg): Likewise.\n\nFrom-SVN: r137374", "tree": {"sha": "fb50da4819a8e8a71c5d1bc4aa7a80c441cac4f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb50da4819a8e8a71c5d1bc4aa7a80c441cac4f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65c5f2a63f2dc1a81f717581918c9e09f19044d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65c5f2a63f2dc1a81f717581918c9e09f19044d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65c5f2a63f2dc1a81f717581918c9e09f19044d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65c5f2a63f2dc1a81f717581918c9e09f19044d9/comments", "author": null, "committer": null, "parents": [{"sha": "ff473280054c876499089772cea1a5fc56970d64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff473280054c876499089772cea1a5fc56970d64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff473280054c876499089772cea1a5fc56970d64"}], "stats": {"total": 297, "additions": 137, "deletions": 160}, "files": [{"sha": "06314eaed0093e032513763fc5e86f8bdc4e8411", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -1,3 +1,42 @@\n+2008-07-02  Ian Lance Taylor  <iant@google.com>\n+\n+\t* rtlanal.c (add_reg_note): New function.\n+\t* rtl.h (add_reg_note): Declare.\n+\t* auto-inc-dec.c (attempt_change): Use add_reg_note.\n+\t* bb-reorder.c (add_reg_crossing_jump_notes): Likewise.\n+\t* builtins.c (expand_builtin_longjmp): Likewise.\n+\t(expand_builtin_nonlocal_goto): Likewise.\n+\t* calls.c (emit_call_1, expand_call): Likewise.\n+\t* cfgexpand.c (add_reg_br_prob_note): Likewise.\n+\t* cfglayout.c (fixup_reorder_chain): Likewise.\n+\t* cfgrtl.c (force_nonfallthru_and_redirect): Likewise.\n+\t(commit_one_edge_insertion): Likewise.\n+\t* combine.c (move_deaths, distribute_notes): Likewise.\n+\t* df-problems.c (df_set_note): Likewise.\n+\t* emit-rtl.c (link_cc0_insns, try_split): Likewise.\n+\t(set_unique_reg_note): Likewise.\n+\t(emit_copy_of_insn_after): Likewise.\n+\t* expr.c (expand_expr_real): Likewise.\n+\t* gcse.c (add_label_notes): Likewise.\n+\t* haifa-sched.c (create_check_block_twin): Likewise.\n+\t* jump.c (mark_jump_label_1): Likewise.\n+\t* loop-doloop.c (add_test, doloop_modify): Likewise.\n+\t* loop-unswitch.c (compare_and_jump_seq): Likewise.\n+\t* lower-subreg.c (move_eh_region_note): Likewise.\n+\t* optabs.c (emit_libcall_block): Likewise.\n+\t* predict.c (predict_insn): Likewise.\n+\t(combine_predictions_for_insn): Likewise.\n+\t* recog.c (peephole2_optimize): Likewise.\n+\t* regmove.c (try_auto_increment): Likewise.\n+\t* reg-stack.c (emit_pop_insn, move_for_stack_reg): Likewise.\n+\t* reload.c (find_reloads): Likewise.\n+\t* reload1.c (fixup_eh_region_note): Likewise.\n+\t(reload_as_needed, add_auto_inc_notes, copy_eh_notes): Likewise.\n+\t* reorg.c (delete_prior_computation): Likewise.\n+\t(delete_computation, dbr_schedule): Likewise.\n+\t* config/pa/pa.c (legitimize_pic_address): Likewise.\n+\t* config/sh/sh.c (sh_reorg): Likewise.\n+\n 2008-07-02  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/36669"}, {"sha": "35d6c87a6965ff065ff495bfe863ff8d784d44cd", "filename": "gcc/auto-inc-dec.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fauto-inc-dec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fauto-inc-dec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fauto-inc-dec.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -621,8 +621,7 @@ attempt_change (rtx new_addr, rtx inc_reg)\n     }\n \n   /* Record that this insn has an implicit side effect.  */\n-  REG_NOTES (mem_insn.insn) \n-    = alloc_EXPR_LIST (REG_INC, inc_reg, REG_NOTES (mem_insn.insn));\n+  add_reg_note (mem_insn.insn, REG_INC, inc_reg);\n \n   if (dump_file)\n     {"}, {"sha": "ae24c0c3245c7c9b086d58aa0397e10eb50daa9d", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -1785,10 +1785,7 @@ add_reg_crossing_jump_notes (void)\n     FOR_EACH_EDGE (e, ei, bb->succs)\n       if ((e->flags & EDGE_CROSSING)\n \t  && JUMP_P (BB_END (e->src)))\n-\tREG_NOTES (BB_END (e->src)) = gen_rtx_EXPR_LIST (REG_CROSSING_JUMP,\n-\t\t\t\t\t\t\t NULL_RTX,\n-\t\t\t\t\t\t\t REG_NOTES (BB_END\n-\t\t\t\t\t\t\t\t  (e->src)));\n+\tadd_reg_note (BB_END (e->src), REG_CROSSING_JUMP, NULL_RTX);\n }\n \n /* Hot and cold basic blocks are partitioned and put in separate"}, {"sha": "731955b5699f38e9e1dd87a6c5671dd3eebfee5f", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -845,8 +845,7 @@ expand_builtin_longjmp (rtx buf_addr, rtx value)\n \n       if (JUMP_P (insn))\n \t{\n-\t  REG_NOTES (insn) = alloc_EXPR_LIST (REG_NON_LOCAL_GOTO, const0_rtx,\n-\t\t\t\t\t      REG_NOTES (insn));\n+\t  add_reg_note (insn, REG_NON_LOCAL_GOTO, const0_rtx);\n \t  break;\n \t}\n       else if (CALL_P (insn))\n@@ -929,8 +928,7 @@ expand_builtin_nonlocal_goto (tree exp)\n     {\n       if (JUMP_P (insn))\n \t{\n-\t  REG_NOTES (insn) = alloc_EXPR_LIST (REG_NON_LOCAL_GOTO,\n-\t\t\t\t\t      const0_rtx, REG_NOTES (insn));\n+\t  add_reg_note (insn, REG_NON_LOCAL_GOTO, const0_rtx);\n \t  break;\n \t}\n       else if (CALL_P (insn))"}, {"sha": "a4470fa14775e418a0decd420893eb14645691a6", "filename": "gcc/calls.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -377,27 +377,23 @@ emit_call_1 (rtx funexp, tree fntree, tree fndecl ATTRIBUTE_UNUSED,\n   /* If this call can't throw, attach a REG_EH_REGION reg note to that\n      effect.  */\n   if (ecf_flags & ECF_NOTHROW)\n-    REG_NOTES (call_insn) = gen_rtx_EXPR_LIST (REG_EH_REGION, const0_rtx,\n-\t\t\t\t\t       REG_NOTES (call_insn));\n+    add_reg_note (call_insn, REG_EH_REGION, const0_rtx);\n   else\n     {\n       int rn = lookup_stmt_eh_region (fntree);\n \n       /* If rn < 0, then either (1) tree-ssa not used or (2) doesn't\n \t throw, which we already took care of.  */\n       if (rn > 0)\n-\tREG_NOTES (call_insn) = gen_rtx_EXPR_LIST (REG_EH_REGION, GEN_INT (rn),\n-\t\t\t\t\t\t   REG_NOTES (call_insn));\n+\tadd_reg_note (call_insn, REG_EH_REGION, GEN_INT (rn));\n     }\n \n   if (ecf_flags & ECF_NORETURN)\n-    REG_NOTES (call_insn) = gen_rtx_EXPR_LIST (REG_NORETURN, const0_rtx,\n-\t\t\t\t\t       REG_NOTES (call_insn));\n+    add_reg_note (call_insn, REG_NORETURN, const0_rtx);\n \n   if (ecf_flags & ECF_RETURNS_TWICE)\n     {\n-      REG_NOTES (call_insn) = gen_rtx_EXPR_LIST (REG_SETJMP, const0_rtx,\n-\t\t\t\t\t\t REG_NOTES (call_insn));\n+      add_reg_note (call_insn, REG_SETJMP, const0_rtx);\n       cfun->calls_setjmp = 1;\n     }\n \n@@ -2814,8 +2810,7 @@ expand_call (tree exp, rtx target, int ignore)\n \t  /* The return value from a malloc-like function can not alias\n \t     anything else.  */\n \t  last = get_last_insn ();\n-\t  REG_NOTES (last) =\n-\t    gen_rtx_EXPR_LIST (REG_NOALIAS, temp, REG_NOTES (last));\n+\t  add_reg_note (last, REG_NOALIAS, temp);\n \n \t  /* Write out the sequence.  */\n \t  insns = get_insns ();"}, {"sha": "6a48e1632d7f0f3e3fa88b04ced059333d988357", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -67,18 +67,14 @@ add_reg_br_prob_note (rtx last, int probability)\n \t    || NEXT_INSN (NEXT_INSN (NEXT_INSN (NEXT_INSN (last)))))\n \t  goto failed;\n \tgcc_assert (!find_reg_note (last, REG_BR_PROB, 0));\n-\tREG_NOTES (last)\n-\t  = gen_rtx_EXPR_LIST (REG_BR_PROB,\n-\t\t\t       GEN_INT (REG_BR_PROB_BASE - probability),\n-\t\t\t       REG_NOTES (last));\n+\tadd_reg_note (last, REG_BR_PROB,\n+\t\t      GEN_INT (REG_BR_PROB_BASE - probability));\n \treturn;\n       }\n   if (!last || !JUMP_P (last) || !any_condjump_p (last))\n     goto failed;\n   gcc_assert (!find_reg_note (last, REG_BR_PROB, 0));\n-  REG_NOTES (last)\n-    = gen_rtx_EXPR_LIST (REG_BR_PROB,\n-\t\t\t GEN_INT (probability), REG_NOTES (last));\n+  add_reg_note (last, REG_BR_PROB, GEN_INT (probability));\n   return;\n failed:\n   if (dump_file)"}, {"sha": "e4049d66465419c1df64873ef4b7c6e534900d58", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -855,8 +855,7 @@ fixup_reorder_chain (void)\n \t      && JUMP_P (BB_END (bb))\n \t      && !any_condjump_p (BB_END (bb))\n \t      && (EDGE_SUCC (bb, 0)->flags & EDGE_CROSSING))\n-\t    REG_NOTES (BB_END (bb)) = gen_rtx_EXPR_LIST\n-\t      (REG_CROSSING_JUMP, NULL_RTX, REG_NOTES (BB_END (bb)));\n+\t    add_reg_note (BB_END (bb), REG_CROSSING_JUMP, NULL_RTX);\n \t}\n     }\n "}, {"sha": "240455bca9d84d16d202627da4ea38f371bc4f28", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -1111,11 +1111,7 @@ force_nonfallthru_and_redirect (edge e, basic_block target)\n \t  && JUMP_P (BB_END (jump_block))\n \t  && !any_condjump_p (BB_END (jump_block))\n \t  && (EDGE_SUCC (jump_block, 0)->flags & EDGE_CROSSING))\n-\tREG_NOTES (BB_END (jump_block)) = gen_rtx_EXPR_LIST (REG_CROSSING_JUMP,\n-\t\t\t\t\t\t\t     NULL_RTX,\n-\t\t\t\t\t\t\t     REG_NOTES\n-\t\t\t\t\t\t\t     (BB_END\n-\t\t\t\t\t\t\t      (jump_block)));\n+\tadd_reg_note (BB_END (jump_block), REG_CROSSING_JUMP, NULL_RTX);\n \n       /* Wire edge in.  */\n       new_edge = make_edge (e->src, jump_block, EDGE_FALLTHRU);\n@@ -1418,8 +1414,7 @@ commit_one_edge_insertion (edge e)\n \t      if (JUMP_P (BB_END (bb))\n \t\t  && !any_condjump_p (BB_END (bb))\n \t\t  && (single_succ_edge (bb)->flags & EDGE_CROSSING))\n-\t\tREG_NOTES (BB_END (bb)) = gen_rtx_EXPR_LIST\n-\t\t  (REG_CROSSING_JUMP, NULL_RTX, REG_NOTES (BB_END (bb)));\n+\t\tadd_reg_note (BB_END (bb), REG_CROSSING_JUMP, NULL_RTX);\n \t    }\n \t}\n     }"}, {"sha": "a6cff36480f392d5a5374ef27d3369c23508b8b2", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -12149,10 +12149,7 @@ move_deaths (rtx x, rtx maybe_kill_insn, int from_luid, rtx to_insn,\n \n \t      for (i = deadregno; i < deadend; i++)\n \t\tif (i < regno || i >= ourend)\n-\t\t  REG_NOTES (where_dead)\n-\t\t    = gen_rtx_EXPR_LIST (REG_DEAD,\n-\t\t\t\t\t regno_reg_rtx[i],\n-\t\t\t\t\t REG_NOTES (where_dead));\n+\t\t  add_reg_note (where_dead, REG_DEAD, regno_reg_rtx[i]);\n \t    }\n \n \t  /* If we didn't find any note, or if we found a REG_DEAD note that\n@@ -12774,9 +12771,7 @@ distribute_notes (rtx notes, rtx from_insn, rtx i3, rtx i2, rtx elim_i2,\n \t\t\t\t    || reg_bitfield_target_p (piece,\n \t\t\t\t\t\t\t      PATTERN (tem)))\n \t\t\t\t  {\n-\t\t\t\t    REG_NOTES (tem)\n-\t\t\t\t      = gen_rtx_EXPR_LIST (REG_UNUSED, piece,\n-\t\t\t\t\t\t\t   REG_NOTES (tem));\n+\t\t\t\t    add_reg_note (tem, REG_UNUSED, piece);\n \t\t\t\t    break;\n \t\t\t\t  }\n \t\t\t      }"}, {"sha": "238d35276e446bafd143dd2bf1a7ec95159dc75f", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -694,8 +694,7 @@ legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t    orig = XEXP (XEXP (orig, 0), 0);\n \t  /* Extract CODE_LABEL.  */\n \t  orig = XEXP (orig, 0);\n-\t  REG_NOTES (insn) = gen_rtx_INSN_LIST (REG_LABEL_OPERAND, orig,\n-\t\t\t\t\t\tREG_NOTES (insn));\n+\t  add_reg_note (insn, REG_LABEL_OPERAND, orig);\n \t  LABEL_NUSES (orig)++;\n \t}\n       crtl->uses_pic_offset_table = 1;"}, {"sha": "380705104eea78feba52d784b7d1432362b538cb", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -4983,10 +4983,8 @@ sh_reorg (void)\n              or pseudo-op.  */\n \n \t  label = gen_label_rtx ();\n-\t  REG_NOTES (link) = gen_rtx_INSN_LIST (REG_LABEL_OPERAND, label,\n-\t\t\t\t\t\tREG_NOTES (link));\n-\t  REG_NOTES (insn) = gen_rtx_INSN_LIST (REG_LABEL_OPERAND, label,\n-\t\t\t\t\t\tREG_NOTES (insn));\n+\t  add_reg_note (link, REG_LABEL_OPERAND, label);\n+\t  add_reg_note (insn, REG_LABEL_OPERAND, label);\n \t  if (rescan)\n \t    {\n \t      scan = link;\n@@ -5000,9 +4998,7 @@ sh_reorg (void)\n \t\t\t   && reg_mentioned_p (reg, scan))\n \t\t\t  || ((reg2 = sfunc_uses_reg (scan))\n \t\t\t      && REGNO (reg2) == REGNO (reg))))\n-\t\t    REG_NOTES (scan)\n-\t\t      = gen_rtx_INSN_LIST (REG_LABEL_OPERAND, label,\n-\t\t\t\t\t   REG_NOTES (scan));\n+\t\t    add_reg_note (scan, REG_LABEL_OPERAND, label);\n \t\t}\n \t      while (scan != dies);\n \t    }"}, {"sha": "0c46bdaa496239cd992ead080827111c629ab1d3", "filename": "gcc/df-problems.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -3191,7 +3191,7 @@ df_set_note (enum reg_note note_type, rtx insn, rtx old, rtx reg)\n       }\n   \n   /* Did not find the note.  */\n-  REG_NOTES (insn) = alloc_EXPR_LIST (note_type, reg, REG_NOTES (insn));\n+  add_reg_note (insn, note_type, reg);\n   return old;\n }\n "}, {"sha": "22c7979a7736140b17576a74396c790b511c701f", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 11, "deletions": 30, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -3044,9 +3044,8 @@ link_cc0_insns (rtx insn)\n   if (NONJUMP_INSN_P (user) && GET_CODE (PATTERN (user)) == SEQUENCE)\n     user = XVECEXP (PATTERN (user), 0, 0);\n \n-  REG_NOTES (user) = gen_rtx_INSN_LIST (REG_CC_SETTER, insn,\n-\t\t\t\t\tREG_NOTES (user));\n-  REG_NOTES (insn) = gen_rtx_INSN_LIST (REG_CC_USER, user, REG_NOTES (insn));\n+  add_reg_note (user, REG_CC_SETTER, insn);\n+  add_reg_note (insn, REG_CC_USER, user);\n }\n \n /* Return the next insn that uses CC0 after INSN, which is assumed to\n@@ -3223,10 +3222,7 @@ try_split (rtx pat, rtx trial, int last)\n \t\t is responsible for this step using\n \t\t split_branch_probability variable.  */\n \t      gcc_assert (njumps == 1);\n-\t      REG_NOTES (insn)\n-\t\t= gen_rtx_EXPR_LIST (REG_BR_PROB,\n-\t\t\t\t     GEN_INT (probability),\n-\t\t\t\t     REG_NOTES (insn));\n+\t      add_reg_note (insn, REG_BR_PROB, GEN_INT (probability));\n \t    }\n \t}\n     }\n@@ -3257,10 +3253,7 @@ try_split (rtx pat, rtx trial, int last)\n \t      if (CALL_P (insn)\n \t\t  || (flag_non_call_exceptions && INSN_P (insn)\n \t\t      && may_trap_p (PATTERN (insn))))\n-\t\tREG_NOTES (insn)\n-\t\t  = gen_rtx_EXPR_LIST (REG_EH_REGION,\n-\t\t\t\t       XEXP (note, 0),\n-\t\t\t\t       REG_NOTES (insn));\n+\t\tadd_reg_note (insn, REG_EH_REGION, XEXP (note, 0));\n \t    }\n \t  break;\n \n@@ -3269,21 +3262,15 @@ try_split (rtx pat, rtx trial, int last)\n \t  for (insn = insn_last; insn != NULL_RTX; insn = PREV_INSN (insn))\n \t    {\n \t      if (CALL_P (insn))\n-\t\tREG_NOTES (insn)\n-\t\t  = gen_rtx_EXPR_LIST (REG_NOTE_KIND (note),\n-\t\t\t\t       XEXP (note, 0),\n-\t\t\t\t       REG_NOTES (insn));\n+\t\tadd_reg_note (insn, REG_NOTE_KIND (note), XEXP (note, 0));\n \t    }\n \t  break;\n \n \tcase REG_NON_LOCAL_GOTO:\n \t  for (insn = insn_last; insn != NULL_RTX; insn = PREV_INSN (insn))\n \t    {\n \t      if (JUMP_P (insn))\n-\t\tREG_NOTES (insn)\n-\t\t  = gen_rtx_EXPR_LIST (REG_NOTE_KIND (note),\n-\t\t\t\t       XEXP (note, 0),\n-\t\t\t\t       REG_NOTES (insn));\n+\t\tadd_reg_note (insn, REG_NOTE_KIND (note), XEXP (note, 0));\n \t    }\n \t  break;\n \n@@ -3294,8 +3281,7 @@ try_split (rtx pat, rtx trial, int last)\n \t      rtx reg = XEXP (note, 0);\n \t      if (!FIND_REG_INC_NOTE (insn, reg)\n \t\t  && for_each_rtx (&PATTERN (insn), find_auto_inc, reg) > 0)\n-\t\tREG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC, reg,\n-\t\t\t\t\t\t      REG_NOTES (insn));\n+\t\tadd_reg_note (insn, REG_INC, reg);\n \t    }\n \t  break;\n #endif\n@@ -4600,7 +4586,6 @@ rtx\n set_unique_reg_note (rtx insn, enum reg_note kind, rtx datum)\n {\n   rtx note = find_reg_note (insn, kind, NULL_RTX);\n-  rtx new_note = NULL;\n \n   switch (kind)\n     {\n@@ -4638,8 +4623,7 @@ set_unique_reg_note (rtx insn, enum reg_note kind, rtx datum)\n       break;\n     }\n \n-  new_note = gen_rtx_EXPR_LIST (kind, datum, REG_NOTES (insn));\n-  REG_NOTES (insn) = new_note;\n+  add_reg_note (insn, kind, datum);\n \n   switch (kind)\n     {\n@@ -5525,13 +5509,10 @@ emit_copy_of_insn_after (rtx insn, rtx after)\n     if (REG_NOTE_KIND (link) != REG_LABEL_OPERAND)\n       {\n \tif (GET_CODE (link) == EXPR_LIST)\n-\t  REG_NOTES (new)\n-\t\t= gen_rtx_EXPR_LIST (REG_NOTE_KIND (link),\n-\t\t  copy_insn_1 (XEXP (link, 0)),  REG_NOTES (new));\n+\t  add_reg_note (new, REG_NOTE_KIND (link),\n+\t\t\tcopy_insn_1 (XEXP (link, 0)));\n \telse\n-\t  REG_NOTES (new)\n-\t       = gen_rtx_INSN_LIST (REG_NOTE_KIND (link),\n-\t\t XEXP (link, 0),  REG_NOTES (new));\n+\t  add_reg_note (new, REG_NOTE_KIND (link), XEXP (link, 0));\n       }\n \n   INSN_CODE (new) = INSN_CODE (insn);"}, {"sha": "33616d6900ef4b8e0d297fcbfbdb8712d4d106b7", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -7102,10 +7102,7 @@ expand_expr_real (tree exp, rtx target, enum machine_mode tmode,\n \t      && GET_CODE (PATTERN (insn)) != CLOBBER\n \t      && GET_CODE (PATTERN (insn)) != USE\n \t      && (CALL_P (insn) || may_trap_p (PATTERN (insn))))\n-\t    {\n-\t      REG_NOTES (insn) = alloc_EXPR_LIST (REG_EH_REGION, GEN_INT (rn),\n-\t\t\t\t\t\t  REG_NOTES (insn));\n-\t    }\n+\t    add_reg_note (insn, REG_EH_REGION, GEN_INT (rn));\n \t}\n     }\n "}, {"sha": "0955744855c9389146d0ce64590f4c04d63c09b1", "filename": "gcc/gcse.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -4562,9 +4562,8 @@ add_label_notes (rtx x, rtx insn)\n \t such a LABEL_REF, so we don't have to handle REG_LABEL_TARGET\n \t notes.  */\n       gcc_assert (!JUMP_P (insn));\n-      REG_NOTES (insn)\n-\t= gen_rtx_INSN_LIST (REG_LABEL_OPERAND, XEXP (x, 0),\n-\t\t\t     REG_NOTES (insn));\n+      add_reg_note (insn, REG_LABEL_OPERAND, XEXP (x, 0));\n+\n       if (LABEL_P (XEXP (x, 0)))\n \tLABEL_NUSES (XEXP (x, 0))++;\n "}, {"sha": "d614986b49c616b3388b9e258f8671eece9b83fb", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -3773,11 +3773,7 @@ create_check_block_twin (rtx insn, bool mutate_p)\n \t    /* any_condjump_p (jump) == false.\n \t       We don't need the same note for the check because\n \t       any_condjump_p (check) == true.  */\n-\t    {\n-\t      REG_NOTES (jump) = gen_rtx_EXPR_LIST (REG_CROSSING_JUMP,\n-\t\t\t\t\t\t    NULL_RTX,\n-\t\t\t\t\t\t    REG_NOTES (jump));\n-\t    }\n+\t    add_reg_note (jump, REG_CROSSING_JUMP, NULL_RTX);\n \t  edge_flags = EDGE_CROSSING;\n \t}\n       else"}, {"sha": "595363b1adbc2556b7f72aa04918ab3925622aba", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -1068,8 +1068,7 @@ mark_jump_label_1 (rtx x, rtx insn, bool in_mem, bool is_target)\n \t\t   a label, except for the primary target of a jump,\n \t\t   must have such a note.  */\n \t\tif (! find_reg_note (insn, kind, label))\n-\t\t  REG_NOTES (insn)\n-\t\t    = gen_rtx_INSN_LIST (kind, label, REG_NOTES (insn));\n+\t\t  add_reg_note (insn, kind, label);\n \t      }\n \t  }\n \treturn;"}, {"sha": "293b3ae3776d7ea9f7ecdacbd24123e5b7b6520d", "filename": "gcc/loop-doloop.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Floop-doloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Floop-doloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-doloop.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -321,9 +321,8 @@ add_test (rtx cond, edge *e, basic_block dest)\n   JUMP_LABEL (jump) = label;\n \n   /* The jump is supposed to handle an unlikely special case.  */\n-  REG_NOTES (jump)\n-\t  = gen_rtx_EXPR_LIST (REG_BR_PROB,\n-\t\t\t       const0_rtx, REG_NOTES (jump));\n+  add_reg_note (jump, REG_BR_PROB, const0_rtx);\n+\n   LABEL_NUSES (label)++;\n \n   make_edge (bb, dest, (*e)->flags & ~EDGE_FALLTHRU);\n@@ -518,18 +517,14 @@ doloop_modify (struct loop *loop, struct niter_desc *desc,\n   /* Add a REG_NONNEG note if the actual or estimated maximum number\n      of iterations is non-negative.  */\n   if (nonneg)\n-    {\n-      REG_NOTES (jump_insn)\n-\t= gen_rtx_EXPR_LIST (REG_NONNEG, NULL_RTX, REG_NOTES (jump_insn));\n-    }\n+    add_reg_note (jump_insn, REG_NONNEG, NULL_RTX);\n+\n   /* Update the REG_BR_PROB note.  */\n   if (true_prob_val)\n     {\n       /* Seems safer to use the branch probability.  */\n-      REG_NOTES (jump_insn) =\n-        gen_rtx_EXPR_LIST (REG_BR_PROB,\n-                           GEN_INT (desc->in_edge->probability),\n-                           REG_NOTES (jump_insn));\n+      add_reg_note (jump_insn, REG_BR_PROB, \n+\t\t    GEN_INT (desc->in_edge->probability));\n     }\n }\n "}, {"sha": "9d66d41db6eb250052d433cf019ced1f81e7a3b5", "filename": "gcc/loop-unswitch.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Floop-unswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Floop-unswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unswitch.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -125,8 +125,8 @@ compare_and_jump_seq (rtx op0, rtx op1, enum rtx_code comp, rtx label, int prob,\n       JUMP_LABEL (jump) = label;\n       LABEL_NUSES (label)++;\n     }\n-  REG_NOTES (jump) = gen_rtx_EXPR_LIST (REG_BR_PROB, GEN_INT (prob),\n-\t\t\t\t\tREG_NOTES (jump));\n+  add_reg_note (jump, REG_BR_PROB, GEN_INT (prob));\n+\n   seq = get_insns ();\n   end_sequence ();\n "}, {"sha": "57205b51e6192c097a350ae35ec65e9772699421", "filename": "gcc/lower-subreg.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Flower-subreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Flower-subreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -551,8 +551,7 @@ move_eh_region_note (rtx insn, rtx insns)\n \t  || (flag_non_call_exceptions\n \t      && INSN_P (p)\n \t      && may_trap_p (PATTERN (p))))\n-\tREG_NOTES (p) = gen_rtx_EXPR_LIST (REG_EH_REGION, XEXP (note, 0),\n-\t\t\t\t\t   REG_NOTES (p));\n+\tadd_reg_note (p, REG_EH_REGION, XEXP (note, 0));\n     }\n }\n "}, {"sha": "6e8c6cf3d21354b0cd44fe4b63086c29b0d595f7", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -3879,8 +3879,7 @@ emit_libcall_block (rtx insns, rtx target, rtx result, rtx equiv)\n \t  if (note != 0)\n \t    XEXP (note, 0) = constm1_rtx;\n \t  else\n-\t    REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EH_REGION, constm1_rtx,\n-\t\t\t\t\t\t  REG_NOTES (insn));\n+\t    add_reg_note (insn, REG_EH_REGION, constm1_rtx);\n \t}\n \n   /* First emit all insns that set pseudos.  Remove them from the list as"}, {"sha": "ad5e8eae23206ff79e1fa85a0f2ca163d41c4134", "filename": "gcc/predict.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -263,12 +263,10 @@ predict_insn (rtx insn, enum br_predictor predictor, int probability)\n   if (!flag_guess_branch_prob)\n     return;\n \n-  REG_NOTES (insn)\n-    = gen_rtx_EXPR_LIST (REG_BR_PRED,\n-\t\t\t gen_rtx_CONCAT (VOIDmode,\n-\t\t\t\t\t GEN_INT ((int) predictor),\n-\t\t\t\t\t GEN_INT ((int) probability)),\n-\t\t\t REG_NOTES (insn));\n+  add_reg_note (insn, REG_BR_PRED,\n+\t\tgen_rtx_CONCAT (VOIDmode,\n+\t\t\t\tGEN_INT ((int) predictor),\n+\t\t\t\tGEN_INT ((int) probability)));\n }\n \n /* Predict insn by given predictor.  */\n@@ -561,9 +559,7 @@ combine_predictions_for_insn (rtx insn, basic_block bb)\n \n   if (!prob_note)\n     {\n-      REG_NOTES (insn)\n-\t= gen_rtx_EXPR_LIST (REG_BR_PROB,\n-\t\t\t     GEN_INT (combined_probability), REG_NOTES (insn));\n+      add_reg_note (insn, REG_BR_PROB, GEN_INT (combined_probability));\n \n       /* Save the prediction into CFG in case we are seeing non-degenerated\n \t conditional jump.  */"}, {"sha": "3ddfd86c63585246dafc4b4ff32a90a7b23071fd", "filename": "gcc/recog.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -3045,10 +3045,9 @@ peephole2_optimize (void)\n \t\t\t  {\n \t\t\t  case REG_NORETURN:\n \t\t\t  case REG_SETJMP:\n-\t\t\t    REG_NOTES (new_insn)\n-\t\t\t      = gen_rtx_EXPR_LIST (REG_NOTE_KIND (note),\n-\t\t\t\t\t\t   XEXP (note, 0),\n-\t\t\t\t\t\t   REG_NOTES (new_insn));\n+\t\t\t    add_reg_note (new_insn, REG_NOTE_KIND (note),\n+\t\t\t\t\t  XEXP (note, 0));\n+\t\t\t    break;\n \t\t\t  default:\n \t\t\t    /* Discard all other reg notes.  */\n \t\t\t    break;\n@@ -3096,10 +3095,7 @@ peephole2_optimize (void)\n \t\t\t\t&& !find_reg_note (x, REG_EH_REGION, NULL)))\n \t\t\t  {\n \t\t\t    if (note)\n-\t\t\t      REG_NOTES (x)\n-\t\t\t        = gen_rtx_EXPR_LIST (REG_EH_REGION,\n-\t\t\t\t\t\t     XEXP (note, 0),\n-\t\t\t\t\t\t     REG_NOTES (x));\n+\t\t\t      add_reg_note (x, REG_EH_REGION, XEXP (note, 0));\n \n \t\t\t    if (x != BB_END (bb) && eh_edge)\n \t\t\t      {"}, {"sha": "4b5e422e207daa93de378e0dec63b18f0035ffb4", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -788,9 +788,7 @@ emit_pop_insn (rtx insn, stack regstack, rtx reg, enum emit_where where)\n   else\n     pop_insn = emit_insn_before (pop_rtx, insn);\n \n-  REG_NOTES (pop_insn)\n-    = gen_rtx_EXPR_LIST (REG_DEAD, FP_MODE_REG (FIRST_STACK_REG, DFmode),\n-\t\t\t REG_NOTES (pop_insn));\n+  add_reg_note (pop_insn, REG_DEAD, FP_MODE_REG (FIRST_STACK_REG, DFmode));\n \n   regstack->reg[regstack->top - (hard_regno - FIRST_STACK_REG)]\n     = regstack->reg[regstack->top];\n@@ -1064,8 +1062,7 @@ move_for_stack_reg (rtx insn, stack regstack, rtx pat)\n \n \t  push_rtx = gen_movxf (top_stack_reg, top_stack_reg);\n \t  emit_insn_before (push_rtx, insn);\n-\t  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_DEAD, top_stack_reg,\n-\t\t\t\t\t\tREG_NOTES (insn));\n+\t  add_reg_note (insn, REG_DEAD, top_stack_reg);\n \t}\n \n       replace_reg (psrc, FIRST_STACK_REG);"}, {"sha": "7de8d0d5b988f176deac582d41b459543e793ca4", "filename": "gcc/regmove.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -200,9 +200,8 @@ try_auto_increment (rtx insn, rtx inc_insn, rtx inc_insn_set, rtx reg,\n \t\t  if (note)\n \t\t    PUT_MODE (note, REG_UNUSED);\n \n-\t\t  REG_NOTES (insn)\n-\t\t    = gen_rtx_EXPR_LIST (REG_INC,\n-\t\t\t\t\t reg, REG_NOTES (insn));\n+\t\t  add_reg_note (insn, REG_INC, reg);\n+\n \t\t  if (! inc_insn_set)\n \t\t    delete_insn (inc_insn);\n \t\t  return 1;"}, {"sha": "e426d3634f652df18a48d246daf391817f2c9524", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -4145,9 +4145,7 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n \t      && (!JUMP_P (insn)\n \t\t  || !label_is_jump_target_p (XEXP (substitution, 0),\n \t\t\t\t\t      insn)))\n-\t    REG_NOTES (insn) = gen_rtx_INSN_LIST (REG_LABEL_OPERAND,\n-\t\t\t\t\t\t  XEXP (substitution, 0),\n-\t\t\t\t\t\t  REG_NOTES (insn));\n+\t    add_reg_note (insn, REG_LABEL_OPERAND, XEXP (substitution, 0));\n \t}\n       else\n \tretval |= (substed_operand[i] != *recog_data.operand_loc[i]);"}, {"sha": "f449ffa9c32836c09d042f15cfe050045d4b918a", "filename": "gcc/reload1.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -4000,8 +4000,7 @@ fixup_eh_region_note (rtx insn, rtx prev, rtx next)\n     if (INSN_P (i) && i != insn && may_trap_p (PATTERN (i)))\n       {\n \ttrap_count++;\n-\tREG_NOTES (i)\n-\t  = gen_rtx_EXPR_LIST (REG_EH_REGION, XEXP (note, 0), REG_NOTES (i));\n+\tadd_reg_note (i, REG_EH_REGION, XEXP (note, 0));\n       }\n }\n \n@@ -4235,9 +4234,7 @@ reload_as_needed (int live_known)\n \t\t\t}\n \t\t      if (n == 1)\n \t\t\t{\n-\t\t\t  REG_NOTES (p)\n-\t\t\t    = gen_rtx_EXPR_LIST (REG_INC, reload_reg,\n-\t\t\t\t\t\t REG_NOTES (p));\n+\t\t\t  add_reg_note (p, REG_INC, reload_reg);\n \t\t\t  /* Mark this as having an output reload so that the\n \t\t\t     REG_INC processing code below won't invalidate\n \t\t\t     the reload for inheritance.  */\n@@ -8535,8 +8532,7 @@ add_auto_inc_notes (rtx insn, rtx x)\n \n   if (code == MEM && auto_inc_p (XEXP (x, 0)))\n     {\n-      REG_NOTES (insn)\n-\t= gen_rtx_EXPR_LIST (REG_INC, XEXP (XEXP (x, 0), 0), REG_NOTES (insn));\n+      add_reg_note (insn, REG_INC, XEXP (XEXP (x, 0), 0));\n       return;\n     }\n \n@@ -8563,9 +8559,7 @@ copy_eh_notes (rtx insn, rtx x)\n       for (; x != 0; x = NEXT_INSN (x))\n \t{\n \t  if (may_trap_p (PATTERN (x)))\n-\t    REG_NOTES (x)\n-\t      = gen_rtx_EXPR_LIST (REG_EH_REGION, XEXP (eh_note, 0),\n-\t\t\t\t   REG_NOTES (x));\n+\t    add_reg_note (x, REG_EH_REGION, XEXP (eh_note, 0));\n \t}\n     }\n }"}, {"sha": "25f410aad2da3369c53199197d76223e132f2900", "filename": "gcc/reorg.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -3217,9 +3217,7 @@ delete_prior_computation (rtx note, rtx insn)\n \t\t{\n \t\t  int i;\n \n-\t\t  REG_NOTES (our_prev)\n-\t\t    = gen_rtx_EXPR_LIST (REG_UNUSED, reg,\n-\t\t\t\t\t REG_NOTES (our_prev));\n+\t\t  add_reg_note (our_prev, REG_UNUSED, reg);\n \n \t\t  for (i = dest_regno; i < dest_endregno; i++)\n \t\t    if (! find_regno_note (our_prev, REG_UNUSED, i))\n@@ -3281,8 +3279,7 @@ delete_computation (rtx insn)\n \t    delete_computation (prev);\n \t  else\n \t    /* Otherwise, show that cc0 won't be used.  */\n-\t    REG_NOTES (prev) = gen_rtx_EXPR_LIST (REG_UNUSED,\n-\t\t\t\t\t\t  cc0_rtx, REG_NOTES (prev));\n+\t    add_reg_note (prev, REG_UNUSED, cc0_rtx);\n \t}\n     }\n #endif\n@@ -4024,9 +4021,7 @@ dbr_schedule (rtx first)\n \tcontinue;\n \n       pred_flags = get_jump_flags (insn, JUMP_LABEL (insn));\n-      REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_BR_PRED,\n-\t\t\t\t\t    GEN_INT (pred_flags),\n-\t\t\t\t\t    REG_NOTES (insn));\n+      add_reg_note (insn, REG_BR_PRED, GEN_INT (pred_flags));\n     }\n   free_resource_info ();\n   free (uid_to_ruid);"}, {"sha": "b2b561c3421acaaeac4494cd02f754ae1ed2c8c9", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -1755,6 +1755,7 @@ extern rtx find_reg_equal_equiv_note (const_rtx);\n extern rtx find_constant_src (const_rtx);\n extern int find_reg_fusage (const_rtx, enum rtx_code, const_rtx);\n extern int find_regno_fusage (const_rtx, enum rtx_code, unsigned int);\n+extern void add_reg_note (rtx, enum reg_note, rtx);\n extern void remove_note (rtx, const_rtx);\n extern void remove_reg_equal_equiv_notes (rtx);\n extern int side_effects_p (const_rtx);"}, {"sha": "d569ff04b2b29da337087d108f5831ac588c8e3d", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c5f2a63f2dc1a81f717581918c9e09f19044d9/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=65c5f2a63f2dc1a81f717581918c9e09f19044d9", "patch": "@@ -1842,6 +1842,34 @@ find_regno_fusage (const_rtx insn, enum rtx_code code, unsigned int regno)\n }\n \n \f\n+/* Add register note with kind KIND and datum DATUM to INSN.  */\n+\n+void\n+add_reg_note (rtx insn, enum reg_note kind, rtx datum)\n+{\n+  rtx note;\n+\n+  switch (kind)\n+    {\n+    case REG_CC_SETTER:\n+    case REG_CC_USER:\n+    case REG_LABEL_TARGET:\n+    case REG_LABEL_OPERAND:\n+      /* These types of register notes use an INSN_LIST rather than an\n+\t EXPR_LIST, so that copying is done right and dumps look\n+\t better.  */\n+      note = alloc_INSN_LIST (datum, REG_NOTES (insn));\n+      PUT_REG_NOTE_KIND (note, kind);\n+      break;\n+\n+    default:\n+      note = alloc_EXPR_LIST (kind, datum, REG_NOTES (insn));\n+      break;\n+    }\n+\n+  REG_NOTES (insn) = note;\n+}\n+\n /* Remove register note NOTE from the REG_NOTES of INSN.  */\n \n void"}]}