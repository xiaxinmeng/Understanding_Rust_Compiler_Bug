{"sha": "615158e2e8f0ce069628c2d76840ca33f2386be3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE1MTU4ZTJlOGYwY2UwNjk2MjhjMmQ3Njg0MGNhMzNmMjM4NmJlMw==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2003-04-14T22:54:35Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2003-04-14T22:54:35Z"}, "message": "rs6000.md (define_constants): Define constants for all UNSPEC usage, including new values for TLS support.\n\n2003-04-14  Janis Johnson  <janis187@us.ibm.com>\n\n\t* config/rs6000/rs6000.md (define_constants): Define constants for\n\tall UNSPEC usage, including new values for TLS support.\n\t(aux_truncdfsf2, fctiwz, movsi_got, movsi_got_internal,\n\tload_toc_aix_si, load_toc_aix_di, load_toc_v4_pic_si,\n\tload_toc_v4_PIC_1, load_toc_v4_PIC_1b, load_macho_picbase,\n\tmacho_correct_pic, blockage, move_from_CR_ov_bit, movesi_from_cr,\n\tstack_tie, movsi_to_cr_one, movsi_to_cr, mtcrfsi, eh_set_lr_si,\n\teh_set_lr_di): Use them.\n\t* rs6000.c: (mtcrf_operation, uses_TOC, rs6000_emit_prologue,\n\trs6000_emit_epilogue) Use them.\n\nFrom-SVN: r65604", "tree": {"sha": "6fdd0807b6101eb45a89353f6af461be2a41f370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fdd0807b6101eb45a89353f6af461be2a41f370"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/615158e2e8f0ce069628c2d76840ca33f2386be3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/615158e2e8f0ce069628c2d76840ca33f2386be3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/615158e2e8f0ce069628c2d76840ca33f2386be3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/615158e2e8f0ce069628c2d76840ca33f2386be3/comments", "author": null, "committer": null, "parents": [{"sha": "21a1d2c493e2d81e2adb0165bfeccfdaa963bd3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21a1d2c493e2d81e2adb0165bfeccfdaa963bd3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21a1d2c493e2d81e2adb0165bfeccfdaa963bd3f"}], "stats": {"total": 136, "additions": 90, "deletions": 46}, "files": [{"sha": "1b40e3afd18dad6582994a3fe6ca6ada867bd3de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/615158e2e8f0ce069628c2d76840ca33f2386be3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/615158e2e8f0ce069628c2d76840ca33f2386be3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=615158e2e8f0ce069628c2d76840ca33f2386be3", "patch": "@@ -1,5 +1,16 @@\n 2003-04-14  Janis Johnson  <janis287@us.ibm.com>\n \n+\t* config/rs6000/rs6000.md (define_constants): Define constants for\n+\tall UNSPEC usage, including new values for TLS support.\n+\t(aux_truncdfsf2, fctiwz, movsi_got, movsi_got_internal,\n+\tload_toc_aix_si, load_toc_aix_di, load_toc_v4_pic_si,\n+\tload_toc_v4_PIC_1, load_toc_v4_PIC_1b, load_macho_picbase,\n+\tmacho_correct_pic, blockage, move_from_CR_ov_bit, movesi_from_cr,\n+\tstack_tie, movsi_to_cr_one, movsi_to_cr, mtcrfsi, eh_set_lr_si,\n+\teh_set_lr_di): Use them.\n+\t* rs6000.c: (mtcrf_operation, uses_TOC, rs6000_emit_prologue,\n+\trs6000_emit_epilogue) Use them.\n+\n \t* rtl.h (SYMBOL_REF_TLS_MODEL): Fix mask value.\n \n 2003-04-14  Neil Booth  <neil@daikokuya.co.uk>"}, {"sha": "242b48026227394e7ed4b421cc11f37f2b686513", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/615158e2e8f0ce069628c2d76840ca33f2386be3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/615158e2e8f0ce069628c2d76840ca33f2386be3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=615158e2e8f0ce069628c2d76840ca33f2386be3", "patch": "@@ -6789,7 +6789,7 @@ mtcrf_operation (op, mode)\n       maskval = 1 << (MAX_CR_REGNO - REGNO (SET_DEST (exp)));\n       \n       if (GET_CODE (unspec) != UNSPEC\n-\t  || XINT (unspec, 1) != 20\n+\t  || XINT (unspec, 1) != UNSPEC_MOVESI_TO_CR\n \t  || XVECLEN (unspec, 0) != 2\n \t  || XVECEXP (unspec, 0, 0) != src_reg\n \t  || GET_CODE (XVECEXP (unspec, 0, 1)) != CONST_INT\n@@ -10026,8 +10026,8 @@ get_TOC_alias_set ()\n }   \n \n /* This retuns nonzero if the current function uses the TOC.  This is\n-   determined by the presence of (unspec ... 7), which is generated by\n-   the various load_toc_* patterns.  */\n+   determined by the presence of (unspec ... UNSPEC_TOC), which is\n+   generated by the various load_toc_* patterns.  */\n \n int\n uses_TOC () \n@@ -10043,7 +10043,7 @@ uses_TOC ()\n \t  if (GET_CODE (pat) == PARALLEL) \n \t    for (i = 0; i < XVECLEN (PATTERN (insn), 0); i++)\n \t      if (GET_CODE (XVECEXP (PATTERN (insn), 0, i)) == UNSPEC \n-\t\t && XINT (XVECEXP (PATTERN (insn), 0, i), 1) == 7)\n+\t\t && XINT (XVECEXP (PATTERN (insn), 0, i), 1) == UNSPEC_TOC)\n \t\t  return 1;\n \t}\n     return 0;\n@@ -10884,9 +10884,9 @@ rs6000_emit_prologue ()\n       insn = emit_move_insn (mem, cr_save_rtx);\n \n       /* Now, there's no way that dwarf2out_frame_debug_expr is going\n-\t to understand '(unspec:SI [(reg:CC 68) ...] 19)'.  But that's\n-\t OK.  All we have to do is specify that _one_ condition code\n-\t register is saved in this stack slot.  The thrower's epilogue\n+\t to understand '(unspec:SI [(reg:CC 68) ...] UNSPEC_MOVESI_FROM_CR)'.\n+\t But that's OK.  All we have to do is specify that _one_ condition\n+\t code register is saved in this stack slot.  The thrower's epilogue\n \t will then restore all the call-saved registers.\n \t We use CR2_REGNO (70) to be compatible with gcc-2.95 on Linux.  */\n       rs6000_frame_related (insn, frame_ptr_rtx, info->total_size, \n@@ -11287,7 +11287,7 @@ rs6000_emit_epilogue (sibcall)\n \t\tRTVEC_ELT (r, 1) = GEN_INT (1 << (7-i));\n \t\tRTVEC_ELT (p, ndx) =\n \t\t  gen_rtx_SET (VOIDmode, gen_rtx_REG (CCmode, CR0_REGNO+i), \n-\t\t\t       gen_rtx_UNSPEC (CCmode, r, 20));\n+\t\t\t       gen_rtx_UNSPEC (CCmode, r, UNSPEC_MOVESI_TO_CR));\n \t\tndx++;\n \t      }\n \t  emit_insn (gen_rtx_PARALLEL (VOIDmode, p));"}, {"sha": "5be993b4796bf29d06b7140abb74a9ea7a2f7286", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 71, "deletions": 38, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/615158e2e8f0ce069628c2d76840ca33f2386be3/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/615158e2e8f0ce069628c2d76840ca33f2386be3/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=615158e2e8f0ce069628c2d76840ca33f2386be3", "patch": "@@ -22,20 +22,43 @@\n \n ;;- See file \"rtl.def\" for documentation on define_insn, match_*, et. al.\n \n-;; `unspec' values used in rs6000.md:\n-;; Number\tUse\n-;; 0\t\tfrsp for POWER machines\n-;; 0/v\t\tblockage\n-;; 5\t\tused to tie the stack contents and the stack pointer\n-;; 6\t\taddress of a word pointing to the TOC\n-;; 7\t\taddress of the TOC (more-or-less)\n-;; 8\t\tmovsi_got\n-;; 9/v\t\teh_reg_restore\n-;; 10\t\tfctiwz\n-;; 15\t\tload_macho_picbase\n-;; 16\t\tmacho_correct_pic\n-;; 19\t\tmovesi_from_cr\n-;; 20\t\tmovsi_to_cr\n+;;\n+;; UNSPEC usage\n+;;\n+\n+(define_constants\n+  [(UNSPEC_FRSP\t\t\t0)\t; frsp for POWER machines\n+   (UNSPEC_TIE\t\t\t5)\t; tie stack contents and stack pointer\n+   (UNSPEC_TOCPTR\t\t6)\t; address of a word pointing to the TOC\n+   (UNSPEC_TOC\t\t\t7)\t; address of the TOC (more-or-less)\n+   (UNSPEC_MOVSI_GOT\t\t8)\n+   (UNSPEC_MV_CR_OV\t\t9)\t; move_from_CR_ov_bit\n+   (UNSPEC_FCTIWZ\t\t10)\n+   (UNSPEC_LD_MPIC\t\t15)\t; load_macho_picbase\n+   (UNSPEC_MPIC_CORRECT\t\t16)\t; macho_correct_pic\n+   (UNSPEC_TLSGD\t\t17)\n+   (UNSPEC_TLSLD\t\t18)\n+   (UNSPEC_MOVESI_FROM_CR\t19)\n+   (UNSPEC_MOVESI_TO_CR\t\t20)\n+   (UNSPEC_TLSDTPREL\t\t21)\n+   (UNSPEC_TLSDTPRELHA\t\t22)\n+   (UNSPEC_TLSDTPRELLO\t\t23)\n+   (UNSPEC_TLSGOTDTPREL\t\t24)\n+   (UNSPEC_TLSTPREL\t\t25)\n+   (UNSPEC_TLSTPRELHA\t\t26)\n+   (UNSPEC_TLSTPRELLO\t\t27)\n+   (UNSPEC_TLSGOTTPREL\t\t28)\n+   (UNSPEC_TLSTLS\t\t29)\n+  ])\n+\n+;;\n+;; UNSPEC_VOLATILE usage\n+;;\n+\n+(define_constants\n+  [(UNSPECV_BLOCK\t\t0)\n+   (UNSPECV_EH_RR\t\t9)\t; eh_reg_restore\n+  ])\n \f\n ;; Define an insn type attribute.  This is used in function unit delay\n ;; computations.\n@@ -4362,7 +4385,7 @@\n \n (define_insn \"aux_truncdfsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")] 0))]\n+\t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRSP))]\n   \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"frsp %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n@@ -5148,13 +5171,14 @@\n   DONE;\n }\")\n \n-; Here, we use (set (reg) (unspec:DI [(fix:SI ...)] 10))\n+; Here, we use (set (reg) (unspec:DI [(fix:SI ...)] UNSPEC_FCTIWZ))\n ; rather than (set (subreg:SI (reg)) (fix:SI ...))\n ; because the first makes it clear that operand 0 is not live\n ; before the instruction.\n (define_insn \"fctiwz\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=*f\")\n-\t(unspec:DI [(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"f\"))] 10))]\n+\t(unspec:DI [(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"f\"))]\n+\t\t   UNSPEC_FCTIWZ))]\n   \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"{fcirz|fctiwz} %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n@@ -7497,7 +7521,7 @@\n (define_expand \"movsi_got\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(unspec:SI [(match_operand:SI 1 \"got_operand\" \"\")\n-\t\t    (match_dup 2)] 8))]\n+\t\t    (match_dup 2)] UNSPEC_MOVSI_GOT))]\n   \"DEFAULT_ABI == ABI_V4 && flag_pic == 1\"\n   \"\n {\n@@ -7523,7 +7547,8 @@\n (define_insn \"*movsi_got_internal\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(unspec:SI [(match_operand:SI 1 \"got_no_const_operand\" \"\")\n-\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"b\")] 8))]\n+\t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"b\")]\n+\t\t   UNSPEC_MOVSI_GOT))]\n   \"DEFAULT_ABI == ABI_V4 && flag_pic == 1\"\n   \"{l|lwz} %0,%a1@got(%2)\"\n   [(set_attr \"type\" \"load\")])\n@@ -7533,12 +7558,14 @@\n (define_split \n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(unspec:SI [(match_operand:SI 1 \"got_no_const_operand\" \"\")\n-\t\t    (match_operand:SI 2 \"memory_operand\" \"\")] 8))]\n+\t\t    (match_operand:SI 2 \"memory_operand\" \"\")]\n+\t\t   UNSPEC_MOVSI_GOT))]\n   \"DEFAULT_ABI == ABI_V4\n     && flag_pic == 1\n     && (reload_in_progress || reload_completed)\"\n   [(set (match_dup 0) (match_dup 2))\n-   (set (match_dup 0) (unspec:SI [(match_dup 1)(match_dup 0)] 8))]\n+   (set (match_dup 0) (unspec:SI [(match_dup 1)(match_dup 0)]\n+\t\t\t\t UNSPEC_MOVSI_GOT))]\n   \"\")\n \n ;; For SI, we special-case integers that can't be loaded in one insn.  We\n@@ -9820,7 +9847,7 @@\n \n (define_insn \"load_toc_aix_si\"\n   [(parallel [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t\t   (unspec:SI [(const_int 0)] 7))\n+\t\t   (unspec:SI [(const_int 0)] UNSPEC_TOC))\n \t      (use (reg:SI 2))])]\n   \"DEFAULT_ABI == ABI_AIX && TARGET_32BIT\"\n   \"*\n@@ -9835,7 +9862,7 @@\n \n (define_insn \"load_toc_aix_di\"\n   [(parallel [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t\t   (unspec:DI [(const_int 0)] 7))\n+\t\t   (unspec:DI [(const_int 0)] UNSPEC_TOC))\n \t      (use (reg:DI 2))])]\n   \"DEFAULT_ABI == ABI_AIX && TARGET_64BIT\"\n   \"*\n@@ -9857,7 +9884,7 @@\n \n (define_insn \"load_toc_v4_pic_si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=l\")\n-\t(unspec:SI [(const_int 0)] 7))]\n+\t(unspec:SI [(const_int 0)] UNSPEC_TOC))]\n   \"DEFAULT_ABI == ABI_V4 && flag_pic == 1 && TARGET_32BIT\"\n   \"bl _GLOBAL_OFFSET_TABLE_@local-4\"\n   [(set_attr \"type\" \"branch\")\n@@ -9866,7 +9893,7 @@\n (define_insn \"load_toc_v4_PIC_1\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=l\")\n \t(match_operand:SI 1 \"immediate_operand\" \"s\"))\n-   (unspec [(match_dup 1)] 7)]\n+   (unspec [(match_dup 1)] UNSPEC_TOC)]\n   \"TARGET_ELF && DEFAULT_ABI != ABI_AIX && flag_pic == 2\"\n   \"bcl 20,31,%1\\\\n%1:\"\n   [(set_attr \"type\" \"branch\")\n@@ -9875,7 +9902,8 @@\n (define_insn \"load_toc_v4_PIC_1b\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=l\")\n \t(match_operand:SI 1 \"immediate_operand\" \"s\"))\n-   (unspec [(match_dup 1) (match_operand 2 \"immediate_operand\" \"s\")] 6)]\n+   (unspec [(match_dup 1) (match_operand 2 \"immediate_operand\" \"s\")]\n+   \t   UNSPEC_TOCPTR)]\n   \"TARGET_ELF && DEFAULT_ABI != ABI_AIX && flag_pic == 2\"\n   \"bcl 20,31,%1\\\\n\\\\t.long %2-%1+4\\\\n%1:\"\n   [(set_attr \"type\" \"branch\")\n@@ -9892,7 +9920,8 @@\n \n (define_insn \"load_macho_picbase\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=l\")\n-\t(unspec:SI [(match_operand:SI 1 \"immediate_operand\" \"s\")] 15))]\n+\t(unspec:SI [(match_operand:SI 1 \"immediate_operand\" \"s\")]\n+\t\t   UNSPEC_LD_MPIC))]\n   \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic\"\n   \"bcl 20,31,%1\\\\n%1:\"\n   [(set_attr \"type\" \"branch\")\n@@ -9903,7 +9932,7 @@\n \t(plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t (unspec:SI [(match_operand:SI 2 \"immediate_operand\" \"s\")\n \t\t\t     (match_operand:SI 3 \"immediate_operand\" \"s\")]\n-\t\t\t    16)))]\n+\t\t\t    UNSPEC_MPIC_CORRECT)))]\n   \"DEFAULT_ABI == ABI_DARWIN\"\n   \"addis %0,%1,ha16(%2-%3)\\n\\taddi %0,%0,lo16(%2-%3)\"\n   [(set_attr \"length\" \"8\")])\n@@ -10689,7 +10718,7 @@\n ;; all of memory.  This blocks insns from being moved across this point.\n \n (define_insn \"blockage\"\n-  [(unspec_volatile [(const_int 0)] 0)]\n+  [(unspec_volatile [(const_int 0)] UNSPECV_BLOCK)]\n   \"\"\n   \"\")\n \f\n@@ -11115,7 +11144,7 @@\n ;; Same as above, but get the OV/ORDERED bit.\n (define_insn \"move_from_CR_ov_bit\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:SI [(match_operand 1 \"cc_reg_operand\" \"y\")] 724))]\n+\t(unspec:SI [(match_operand 1 \"cc_reg_operand\" \"y\")] UNSPEC_MV_CR_OV))]\n   \"TARGET_ISEL\"\n   \"%D1mfcr %0\\;{rlinm|rlwinm} %0,%0,%t1,1\"\n   [(set_attr \"type\" \"mfcr\")\n@@ -14177,7 +14206,8 @@\n (define_insn \"movesi_from_cr\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n         (unspec:SI [(reg:CC 68) (reg:CC 69) (reg:CC 70) (reg:CC 71) \n-\t\t    (reg:CC 72)\t(reg:CC 73) (reg:CC 74) (reg:CC 75)] 19))]\n+\t\t    (reg:CC 72)\t(reg:CC 73) (reg:CC 74) (reg:CC 75)]\n+\t\t   UNSPEC_MOVESI_FROM_CR))]\n   \"\"\n   \"mfcr %0\"\n   [(set_attr \"type\" \"mfcr\")])\n@@ -14211,7 +14241,7 @@\n ; not be moved over stores to stack memory.\n (define_insn \"stack_tie\"\n   [(set (match_operand:BLK 0 \"memory_operand\" \"+m\")\n-        (unspec:BLK [(match_dup 0)] 5))]\n+        (unspec:BLK [(match_dup 0)] UNSPEC_TIE))]\n   \"\"\n   \"\"\n   [(set_attr \"length\" \"0\")])\n@@ -14233,7 +14263,7 @@\n (define_expand \"movsi_to_cr_one\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n         (unspec:CC [(match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t    (match_dup 2)] 20))]\n+\t\t    (match_dup 2)] UNSPEC_MOVESI_TO_CR))]\n   \"\"\n   \"operands[2] = GEN_INT (1 << (75 - REGNO (operands[0])));\")\n \n@@ -14242,7 +14272,7 @@\n \t\t   [(set (match_operand:CC 1 \"cc_reg_operand\" \"=y\")\n \t\t\t (unspec:CC [(match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n \t\t\t\t     (match_operand 3 \"immediate_operand\" \"n\")]\n-\t\t\t 20))])]\n+\t\t\t\t    UNSPEC_MOVESI_TO_CR))])]\n  \"\"\n  \"*\n {\n@@ -14258,7 +14288,8 @@\n (define_insn \"*mtcrfsi\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n         (unspec:CC [(match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t    (match_operand 2 \"immediate_operand\" \"n\")] 20))]\n+\t\t    (match_operand 2 \"immediate_operand\" \"n\")]\n+\t\t   UNSPEC_MOVESI_TO_CR))]\n   \"GET_CODE (operands[0]) == REG \n    && CR_REGNO_P (REGNO (operands[0]))\n    && GET_CODE (operands[2]) == CONST_INT\n@@ -14334,19 +14365,21 @@\n \n ; We can't expand this before we know where the link register is stored.\n (define_insn \"eh_set_lr_si\"\n-  [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"r\")] 9)\n+  [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"r\")]\n+  \t\t    UNSPECV_EH_RR)\n    (clobber (match_scratch:SI 1 \"=&b\"))]\n   \"TARGET_32BIT\"\n   \"#\")\n \n (define_insn \"eh_set_lr_di\"\n-  [(unspec_volatile [(match_operand:DI 0 \"register_operand\" \"r\")] 9)\n+  [(unspec_volatile [(match_operand:DI 0 \"register_operand\" \"r\")]\n+  \t\t    UNSPECV_EH_RR)\n    (clobber (match_scratch:DI 1 \"=&b\"))]\n   \"TARGET_64BIT\"\n   \"#\")\n \n (define_split\n-  [(unspec_volatile [(match_operand 0 \"register_operand\" \"\")] 9)\n+  [(unspec_volatile [(match_operand 0 \"register_operand\" \"\")] UNSPECV_EH_RR)\n    (clobber (match_scratch 1 \"\"))]\n   \"reload_completed\"\n   [(const_int 0)]"}]}