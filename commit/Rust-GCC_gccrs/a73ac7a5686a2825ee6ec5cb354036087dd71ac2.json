{"sha": "a73ac7a5686a2825ee6ec5cb354036087dd71ac2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTczYWM3YTU2ODZhMjgyNWVlNmVjNWNiMzU0MDM2MDg3ZGQ3MWFjMg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-01-30T18:09:07Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-01-30T18:09:07Z"}, "message": "cppfiles.c (find_position): Drop 'colp' argument, return the new line base.\n\n\t* cppfiles.c (find_position): Drop 'colp' argument, return the\n\tnew line base.\n\t(read_and_prescan): Adjust to match.  Don't ever manipulate\n\tline or line_base except via find_position.\n\nFrom-SVN: r31700", "tree": {"sha": "93b0942480e54c7d362a06f1e69935e1f0bb89dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93b0942480e54c7d362a06f1e69935e1f0bb89dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a73ac7a5686a2825ee6ec5cb354036087dd71ac2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73ac7a5686a2825ee6ec5cb354036087dd71ac2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a73ac7a5686a2825ee6ec5cb354036087dd71ac2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73ac7a5686a2825ee6ec5cb354036087dd71ac2/comments", "author": null, "committer": null, "parents": [{"sha": "bb4cd7083065ce5d003659b786383ab75a2cfb94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb4cd7083065ce5d003659b786383ab75a2cfb94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb4cd7083065ce5d003659b786383ab75a2cfb94"}], "stats": {"total": 82, "additions": 53, "deletions": 29}, "files": [{"sha": "d041bea3a6bf5f26b7aeaa13db535c067443da1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73ac7a5686a2825ee6ec5cb354036087dd71ac2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73ac7a5686a2825ee6ec5cb354036087dd71ac2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a73ac7a5686a2825ee6ec5cb354036087dd71ac2", "patch": "@@ -1,3 +1,10 @@\n+2000-01-30  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cppfiles.c (find_position): Drop 'colp' argument, return the\n+\tnew line base.\n+\t(read_and_prescan): Adjust to match.  Don't ever manipulate\n+\tline or line_base except via find_position.\n+\n 2000-01-29  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* c-parse.in: Apply Ulrich's changes from c-parse.y."}, {"sha": "a89a0cafc04bd32d31a6669a5f7c309c213e10d8", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73ac7a5686a2825ee6ec5cb354036087dd71ac2/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73ac7a5686a2825ee6ec5cb354036087dd71ac2/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=a73ac7a5686a2825ee6ec5cb354036087dd71ac2", "patch": "@@ -34,23 +34,22 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n static struct include_hash *redundant_include_p\n \t\t\t\t\tPARAMS ((cpp_reader *,\n-\t\t\t\t\t\tstruct include_hash *,\n-\t\t\t\t\t\tstruct file_name_list *));\n-static struct file_name_map *read_name_map\tPARAMS ((cpp_reader *,\n-\t\t\t\t\t\t\tconst char *));\n+\t\t\t\t\t\t struct include_hash *,\n+\t\t\t\t\t\t struct file_name_list *));\n+static struct file_name_map *read_name_map\n+\t\t\t\t\tPARAMS ((cpp_reader *, const char *));\n static char *read_filename_string\tPARAMS ((int, FILE *));\n static char *remap_filename \t\tPARAMS ((cpp_reader *, char *,\n-\t\t\t\t\t\tstruct file_name_list *));\n+\t\t\t\t\t\t struct file_name_list *));\n static long read_and_prescan\t\tPARAMS ((cpp_reader *, cpp_buffer *,\n-\t\t\t\t\t\tint, size_t));\n-static struct file_name_list *actual_directory PARAMS ((cpp_reader *,\n-\t\t\t\t\t\t       const char *));\n+\t\t\t\t\t\t int, size_t));\n+static struct file_name_list *actual_directory\n+\t\t\t\t\tPARAMS ((cpp_reader *, const char *));\n static void initialize_input_buffer\tPARAMS ((cpp_reader *, int,\n-\t\t\t\t\t\tstruct stat *));\n+\t\t\t\t\t\t struct stat *));\n static int file_cleanup\t\t\tPARAMS ((cpp_buffer *, cpp_reader *));\n-static void find_position\t\tPARAMS ((U_CHAR *, U_CHAR *,\n-\t\t\t\t\t\tunsigned long *,\n-\t\t\t\t\t\tunsigned long *));\n+static U_CHAR *find_position\t\tPARAMS ((U_CHAR *, U_CHAR *,\n+\t\t\t\t\t\t unsigned long *));\n \n #if 0\n static void hack_vms_include_specification PARAMS ((char *));\n@@ -772,23 +771,25 @@ actual_directory (pfile, fname)\n }\n \n /* Determine the current line and column.  Used only by read_and_prescan. */\n-static void\n-find_position (start, limit, linep, colp)\n+static U_CHAR *\n+find_position (start, limit, linep)\n      U_CHAR *start;\n      U_CHAR *limit;\n      unsigned long *linep;\n-     unsigned long *colp;\n {\n-  unsigned long line = *linep, col = 0;\n+  unsigned long line = *linep;\n+  U_CHAR *lbase = start;\n   while (start < limit)\n     {\n       U_CHAR ch = *start++;\n       if (ch == '\\n' || ch == '\\r')\n-\tline++, col = 1;\n-      else\n-\tcol++;\n+\t{\n+\t  line++;\n+\t  lbase = start;\n+\t}\n     }\n-  *linep = line, *colp = col;\n+  *linep = line;\n+  return lbase;\n }\n \n /* Read the entire contents of file DESC into buffer BUF.  LEN is how\n@@ -950,8 +951,6 @@ read_and_prescan (pfile, fp, desc, len)\n \t\t    *op++ = '\\r';\n \t\t  else\n \t\t    deferred_newlines++;\n-\t\t  line++;\n-\t\t  line_base = op;\n \t\t}\n \t      else if (*ip == '\\r')\n \t\t{\n@@ -967,8 +966,6 @@ read_and_prescan (pfile, fp, desc, len)\n \t\t    *op++ = '\\r';\n \t\t  else\n \t\t    deferred_newlines++;\n-\t\t  line++;\n-\t\t  line_base = op;\n \t\t}\n \t      else\n \t\t*op++ = '\\\\';\n@@ -1023,10 +1020,14 @@ read_and_prescan (pfile, fp, desc, len)\n \t\tif (CPP_OPTIONS (pfile)->warn_trigraphs)\n \t\t  {\n \t\t    unsigned long col;\n-\t\t    find_position (line_base, op, &line, &col);\n-\t\t    line_base = op - col;\n-\t\t    cpp_warning_with_line (pfile, line, col,\n-\t\t\t\t\t   \"trigraph ??%c encountered\", d);\n+\t\t    line_base = find_position (line_base, op, &line);\n+\t\t    col = op - line_base + 1;\n+\t\t    if (CPP_OPTIONS (pfile)->trigraphs)\n+\t\t      cpp_warning_with_line (pfile, line, col,\n+\t\t\t     \"trigraph ??%c converted to %c\", d, t);\n+\t\t    else\n+\t\t      cpp_warning_with_line (pfile, line, col,\n+\t\t\t     \"trigraph ??%c ignored\", d);\n \t\t  }\n \t\tif (CPP_OPTIONS (pfile)->trigraphs)\n \t\t  {\n@@ -1075,7 +1076,8 @@ read_and_prescan (pfile, fp, desc, len)\n   if (op[-1] != '\\n')\n     {\n       unsigned long col;\n-      find_position (line_base, op, &line, &col);\n+      line_base = find_position (line_base, op, &line);\n+      col = op - line_base + 1;\n       cpp_warning_with_line (pfile, line, col, \"no newline at end of file\\n\");\n       if (offset + 1 > len)\n \t{"}, {"sha": "878002beeb9520894c3f47954eb96761bd87ffc9", "filename": "gcc/testsuite/gcc.dg/20000129-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73ac7a5686a2825ee6ec5cb354036087dd71ac2/gcc%2Ftestsuite%2Fgcc.dg%2F20000129-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73ac7a5686a2825ee6ec5cb354036087dd71ac2/gcc%2Ftestsuite%2Fgcc.dg%2F20000129-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20000129-1.c?ref=a73ac7a5686a2825ee6ec5cb354036087dd71ac2", "patch": "@@ -0,0 +1,15 @@\n+/* Regression test for trigraph warnings.  Under certain conditions we\n+   got the line numbers wrong.\n+   Originally exposed by XEmacs and reported by Martin Buchholz\n+   <martin@xemacs.org>; this test case is synthetic.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options -Wall } */\n+\n+#define some_macro \\\n+\tblah\t\\\n+\tblah\t\\\n+\tblah\t\\\n+\tblah\n+\n+??>\t/* { dg-warning \"trigraph ...\" \"trigraph encountered\" } */"}]}