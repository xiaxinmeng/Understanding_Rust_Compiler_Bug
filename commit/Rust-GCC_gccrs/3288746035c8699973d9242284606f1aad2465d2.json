{"sha": "3288746035c8699973d9242284606f1aad2465d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI4ODc0NjAzNWM4Njk5OTczZDkyNDIyODQ2MDZmMWFhZDI0NjVkMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-01-30T18:04:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-01-30T18:04:34Z"}, "message": "re PR c++/55742 (__attribute__ in class function declaration cause \"prototype does not match\" errors.)\n\n\tPR c++/55742\n\t* config/i386/i386.c (ix86_valid_target_attribute_inner_p): Diagnose\n\tinvalid args instead of ICEing on it.\n\t(ix86_valid_target_attribute_tree): Return error_mark_node if\n\tix86_valid_target_attribute_inner_p failed.\n\t(ix86_valid_target_attribute_p): Return false only if\n\tix86_valid_target_attribute_tree returned error_mark_node.  Allow\n\ttarget(\"default\") attribute.\n\t(sorted_attr_string): Change argument from const char * to tree,\n\tmerge in all target attribute arguments rather than just one.\n\tFormatting fix.  Use XNEWVEC instead of xmalloc and XDELETEVEC\n\tinstead of free.  Avoid using strcat.\n\t(ix86_mangle_function_version_assembler_name): Mangle\n\ttarget(\"default\") as if no target attribute is present.  Adjust\n\tsorted_attr_string caller.  Avoid leaking memory.  Use XNEWVEC\n\tinstead of xmalloc and XDELETEVEC instead of free.\n\t(ix86_function_versions): Don't return true if one of the decls\n\tdoesn't have target attribute.  If they don't and one of the decls\n\tis DECL_FUNCTION_VERSIONED, report an error.  Adjust\n\tsorted_attr_string caller.  Use XDELETEVEC instead of free.\n\t(ix86_supports_function_versions): Remove.\n\t(make_name): Fix up formatting.\n\t(make_dispatcher_decl): Remove resolver_name and its initialization.\n\tAvoid leaking memory.\n\t(is_function_default_version): Return true if there is\n\ttarget(\"default\") attribute rather than no target attribute at all.\n\t(make_resolver_func): Avoid leaking memory.\n\t(ix86_generate_version_dispatcher_body): Likewise.\n\t(TARGET_OPTION_SUPPORTS_FUNCTION_VERSIONS): Remove.\n\t* target.def (supports_function_versions): Remove.\n\t* doc/tm.texi.in (SUPPORTS_FUNCTION_VERSIONS): Remove.\n\t* doc/tm.texi: Regenerated.\n\n\t* c-common.c (handle_target_attribute): Revert 2012-12-26 change.\n\n\t* g++.dg/mv1.C: Moved to...\n\t* g++.dg/ext/mv1.C: ... here.  Adjust test.\n\t* g++.dg/mv2.C: Moved to...\n\t* g++.dg/ext/mv2.C: ... here.  Adjust test.\n\t* g++.dg/mv3.C: Moved to...\n\t* g++.dg/ext/mv3.C: ... here.\n\t* g++.dg/mv4.C: Moved to...\n\t* g++.dg/ext/mv4.C: ... here.\n\t* g++.dg/mv5.C: Moved to...\n\t* g++.dg/ext/mv5.C: ... here.  Adjust test.\n\t* g++.dg/mv6.C: Moved to...\n\t* g++.dg/ext/mv6.C: ... here.  Adjust test.\n\t* g++.dg/ext/mv7.C: New test.\n\t* g++.dg/ext/mv8.C: New test.\n\t* g++.dg/ext/mv9.C: New test.\n\t* g++.dg/ext/mv10.C: New test.\n\t* g++.dg/ext/mv11.C: New test.\n\nFrom-SVN: r195584", "tree": {"sha": "dff73a706673434faab62ca52bcda06d693674b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dff73a706673434faab62ca52bcda06d693674b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3288746035c8699973d9242284606f1aad2465d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3288746035c8699973d9242284606f1aad2465d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3288746035c8699973d9242284606f1aad2465d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3288746035c8699973d9242284606f1aad2465d2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73cca0cc94027192b06c8b7897fe5fbe20de566e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73cca0cc94027192b06c8b7897fe5fbe20de566e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73cca0cc94027192b06c8b7897fe5fbe20de566e"}], "stats": {"total": 326, "additions": 240, "deletions": 86}, "files": [{"sha": "dd0b294a469a617e0e2180d075e48b90b35e967d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3288746035c8699973d9242284606f1aad2465d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3288746035c8699973d9242284606f1aad2465d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3288746035c8699973d9242284606f1aad2465d2", "patch": "@@ -1,3 +1,38 @@\n+2013-01-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/55742\n+\t* config/i386/i386.c (ix86_valid_target_attribute_inner_p): Diagnose\n+\tinvalid args instead of ICEing on it.\n+\t(ix86_valid_target_attribute_tree): Return error_mark_node if\n+\tix86_valid_target_attribute_inner_p failed.\n+\t(ix86_valid_target_attribute_p): Return false only if\n+\tix86_valid_target_attribute_tree returned error_mark_node.  Allow\n+\ttarget(\"default\") attribute.\n+\t(sorted_attr_string): Change argument from const char * to tree,\n+\tmerge in all target attribute arguments rather than just one.\n+\tFormatting fix.  Use XNEWVEC instead of xmalloc and XDELETEVEC\n+\tinstead of free.  Avoid using strcat.\n+\t(ix86_mangle_function_version_assembler_name): Mangle\n+\ttarget(\"default\") as if no target attribute is present.  Adjust\n+\tsorted_attr_string caller.  Avoid leaking memory.  Use XNEWVEC\n+\tinstead of xmalloc and XDELETEVEC instead of free.\n+\t(ix86_function_versions): Don't return true if one of the decls\n+\tdoesn't have target attribute.  If they don't and one of the decls\n+\tis DECL_FUNCTION_VERSIONED, report an error.  Adjust\n+\tsorted_attr_string caller.  Use XDELETEVEC instead of free.\n+\t(ix86_supports_function_versions): Remove.\n+\t(make_name): Fix up formatting.\n+\t(make_dispatcher_decl): Remove resolver_name and its initialization.\n+\tAvoid leaking memory.\n+\t(is_function_default_version): Return true if there is\n+\ttarget(\"default\") attribute rather than no target attribute at all.\n+\t(make_resolver_func): Avoid leaking memory.\n+\t(ix86_generate_version_dispatcher_body): Likewise.\n+\t(TARGET_OPTION_SUPPORTS_FUNCTION_VERSIONS): Remove.\n+\t* target.def (supports_function_versions): Remove.\n+\t* doc/tm.texi.in (SUPPORTS_FUNCTION_VERSIONS): Remove.\n+\t* doc/tm.texi: Regenerated.\n+\n 2013-01-30  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/56144"}, {"sha": "2fbc8f49b70bf45b10ac4d820b0daa001bb6fc19", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3288746035c8699973d9242284606f1aad2465d2/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3288746035c8699973d9242284606f1aad2465d2/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=3288746035c8699973d9242284606f1aad2465d2", "patch": "@@ -1,3 +1,8 @@\n+2013-01-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/55742\n+\t* c-common.c (handle_target_attribute): Revert 2012-12-26 change.\n+\n 2013-01-18  Jason Merrill  <jason@redhat.com>\n \n \tPR target/54908"}, {"sha": "b3699dc086b40b447b9a35cbbd53215bad5cdde4", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3288746035c8699973d9242284606f1aad2465d2/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3288746035c8699973d9242284606f1aad2465d2/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=3288746035c8699973d9242284606f1aad2465d2", "patch": "@@ -8759,12 +8759,8 @@ handle_target_attribute (tree *node, tree name, tree args, int flags,\n       warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n-  /* Do not strip invalid target attributes for targets which support function\n-     multiversioning as the target string is used to determine versioned\n-     functions.  */\n   else if (! targetm.target_option.valid_attribute_p (*node, name, args,\n-\t\t\t\t\t\t      flags)\n-\t   && ! targetm.target_option.supports_function_versions ())\n+\t\t\t\t\t\t      flags))\n     *no_add_attrs = true;\n \n   return NULL_TREE;"}, {"sha": "acdfa6c7b8832202b22bb1c1510190c9aba20029", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 107, "deletions": 58, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3288746035c8699973d9242284606f1aad2465d2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3288746035c8699973d9242284606f1aad2465d2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3288746035c8699973d9242284606f1aad2465d2", "patch": "@@ -4225,7 +4225,10 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     }\n \n   else if (TREE_CODE (args) != STRING_CST)\n-    gcc_unreachable ();\n+    {\n+      error (\"attribute %<target%> argument not a string\");\n+      return false;\n+    }\n \n   /* Handle multiple arguments separated by commas.  */\n   next_optstr = ASTRDUP (TREE_STRING_POINTER (args));\n@@ -4370,7 +4373,7 @@ ix86_valid_target_attribute_tree (tree args)\n   /* Process each of the options on the chain.  */\n   if (! ix86_valid_target_attribute_inner_p (args, option_strings,\n \t\t\t\t\t     &enum_opts_set))\n-    return NULL_TREE;\n+    return error_mark_node;\n \n   /* If the changed options are different from the default, rerun\n      ix86_option_override_internal, and then save the options away.\n@@ -4435,6 +4438,15 @@ ix86_valid_target_attribute_p (tree fndecl,\n {\n   struct cl_target_option cur_target;\n   bool ret = true;\n+\n+  /* attribute((target(\"default\"))) does nothing, beyond\n+     affecting multi-versioning.  */\n+  if (TREE_VALUE (args)\n+      && TREE_CODE (TREE_VALUE (args)) == STRING_CST\n+      && TREE_CHAIN (args) == NULL_TREE\n+      && strcmp (TREE_STRING_POINTER (TREE_VALUE (args)), \"default\") == 0)\n+    return true;\n+\n   tree old_optimize = build_optimization_node ();\n   tree new_target, new_optimize;\n   tree func_optimize = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (fndecl);\n@@ -4451,10 +4463,10 @@ ix86_valid_target_attribute_p (tree fndecl,\n   new_target = ix86_valid_target_attribute_tree (args);\n   new_optimize = build_optimization_node ();\n \n-  if (!new_target)\n+  if (new_target == error_mark_node)\n     ret = false;\n \n-  else if (fndecl)\n+  else if (fndecl && new_target)\n     {\n       DECL_FUNCTION_SPECIFIC_TARGET (fndecl) = new_target;\n \n@@ -28948,26 +28960,44 @@ attr_strcmp (const void *v1, const void *v2)\n   return strcmp (c1, c2);\n }\n \n-/* STR is the argument to target attribute.  This function tokenizes\n+/* ARGLIST is the argument to target attribute.  This function tokenizes\n    the comma separated arguments, sorts them and returns a string which\n    is a unique identifier for the comma separated arguments.   It also\n    replaces non-identifier characters \"=,-\" with \"_\".  */\n \n static char *\n-sorted_attr_string (const char *str)\n+sorted_attr_string (tree arglist)\n {\n+  tree arg;\n+  size_t str_len_sum = 0;\n   char **args = NULL;\n   char *attr_str, *ret_str;\n   char *attr = NULL;\n   unsigned int argnum = 1;\n   unsigned int i;\n \n-  for (i = 0; i < strlen (str); i++)\n-    if (str[i] == ',')\n-      argnum++;\n+  for (arg = arglist; arg; arg = TREE_CHAIN (arg))\n+    {\n+      const char *str = TREE_STRING_POINTER (TREE_VALUE (arg));\n+      size_t len = strlen (str);\n+      str_len_sum += len + 1;\n+      if (arg != arglist)\n+\targnum++;\n+      for (i = 0; i < strlen (str); i++)\n+\tif (str[i] == ',')\n+\t  argnum++;\n+    }\n \n-  attr_str = (char *)xmalloc (strlen (str) + 1);\n-  strcpy (attr_str, str);\n+  attr_str = XNEWVEC (char, str_len_sum);\n+  str_len_sum = 0;\n+  for (arg = arglist; arg; arg = TREE_CHAIN (arg))\n+    {\n+      const char *str = TREE_STRING_POINTER (TREE_VALUE (arg));\n+      size_t len = strlen (str);\n+      memcpy (attr_str + str_len_sum, str, len);\n+      attr_str[str_len_sum + len] = TREE_CHAIN (arg) ? ',' : '\\0';\n+      str_len_sum += len + 1;\n+    }\n \n   /* Replace \"=,-\" with \"_\".  */\n   for (i = 0; i < strlen (attr_str); i++)\n@@ -28988,18 +29018,20 @@ sorted_attr_string (const char *str)\n       attr = strtok (NULL, \",\");\n     }\n \n-  qsort (args, argnum, sizeof (char*), attr_strcmp);\n+  qsort (args, argnum, sizeof (char *), attr_strcmp);\n \n-  ret_str = (char *)xmalloc (strlen (str) + 1);\n-  strcpy (ret_str, args[0]);\n-  for (i = 1; i < argnum; i++)\n+  ret_str = XNEWVEC (char, str_len_sum);\n+  str_len_sum = 0;\n+  for (i = 0; i < argnum; i++)\n     {\n-      strcat (ret_str, \"_\");\n-      strcat (ret_str, args[i]);\n+      size_t len = strlen (args[i]);\n+      memcpy (ret_str + str_len_sum, args[i], len);\n+      ret_str[str_len_sum + len] = i < argnum - 1 ? '_' : '\\0';\n+      str_len_sum += len + 1;\n     }\n \n-  free (args);\n-  free (attr_str);\n+  XDELETEVEC (args);\n+  XDELETEVEC (attr_str);\n   return ret_str;\n }\n \n@@ -29011,8 +29043,8 @@ static tree\n ix86_mangle_function_version_assembler_name (tree decl, tree id)\n {\n   tree version_attr;\n-  const char *orig_name, *version_string, *attr_str;\n-  char *assembler_name;\n+  const char *orig_name, *version_string;\n+  char *attr_str, *assembler_name;\n \n   if (DECL_DECLARED_INLINE_P (decl)\n       && lookup_attribute (\"gnu_inline\",\n@@ -29036,17 +29068,22 @@ ix86_mangle_function_version_assembler_name (tree decl, tree id)\n   version_string\n     = TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (version_attr)));\n \n-  attr_str = sorted_attr_string (version_string);\n-  assembler_name = (char *) xmalloc (strlen (orig_name)\n-\t\t\t\t     + strlen (attr_str) + 2);\n+  if (strcmp (version_string, \"default\") == 0)\n+    return id;\n+\n+  attr_str = sorted_attr_string (TREE_VALUE (version_attr));\n+  assembler_name = XNEWVEC (char, strlen (orig_name) + strlen (attr_str) + 2);\n \n   sprintf (assembler_name, \"%s.%s\", orig_name, attr_str);\n \n   /* Allow assembler name to be modified if already set.  */\n   if (DECL_ASSEMBLER_NAME_SET_P (decl))\n     SET_DECL_RTL (decl, NULL);\n \n-  return get_identifier (assembler_name);\n+  tree ret = get_identifier (assembler_name);\n+  XDELETEVEC (attr_str);\n+  XDELETEVEC (assembler_name);\n+  return ret;\n }\n \n /* This function returns true if FN1 and FN2 are versions of the same function,\n@@ -29057,10 +29094,9 @@ static bool\n ix86_function_versions (tree fn1, tree fn2)\n {\n   tree attr1, attr2;\n-  const char *attr_str1, *attr_str2;\n   char *target1, *target2;\n   bool result;\n-  \n+\n   if (TREE_CODE (fn1) != FUNCTION_DECL\n       || TREE_CODE (fn2) != FUNCTION_DECL)\n     return false;\n@@ -29072,15 +29108,35 @@ ix86_function_versions (tree fn1, tree fn2)\n   if (attr1 == NULL_TREE && attr2 == NULL_TREE)\n     return false;\n \n-  /* If one function does not have a target attribute, these are versions.  */\n+  /* Diagnose missing target attribute if one of the decls is already\n+     multi-versioned.  */\n   if (attr1 == NULL_TREE || attr2 == NULL_TREE)\n-    return true;\n-\n-  attr_str1 =  TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr1)));\n-  attr_str2 =  TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr2)));\n+    {\n+      if (DECL_FUNCTION_VERSIONED (fn1) || DECL_FUNCTION_VERSIONED (fn2))\n+\t{\n+\t  if (attr2 != NULL_TREE)\n+\t    {\n+\t      tree tem = fn1;\n+\t      fn1 = fn2;\n+\t      fn2 = tem;\n+\t      attr1 = attr2;\n+\t    }\n+\t  error_at (DECL_SOURCE_LOCATION (fn2),\n+\t\t    \"missing %<target%> attribute for multi-versioned %D\",\n+\t\t    fn2);\n+\t  error_at (DECL_SOURCE_LOCATION (fn1),\n+\t\t    \"previous declaration of %D\", fn1);\n+\t  /* Prevent diagnosing of the same error multiple times.  */\n+\t  DECL_ATTRIBUTES (fn2)\n+\t    = tree_cons (get_identifier (\"target\"),\n+\t\t\t copy_node (TREE_VALUE (attr1)),\n+\t\t\t DECL_ATTRIBUTES (fn2));\n+\t}\n+      return false;\n+    }\n \n-  target1 = sorted_attr_string (attr_str1);\n-  target2 = sorted_attr_string (attr_str2);\n+  target1 = sorted_attr_string (TREE_VALUE (attr1));\n+  target2 = sorted_attr_string (TREE_VALUE (attr2));\n \n   /* The sorted target strings must be different for fn1 and fn2\n      to be versions.  */\n@@ -29089,20 +29145,12 @@ ix86_function_versions (tree fn1, tree fn2)\n   else\n     result = true;\n \n-  free (target1);\n-  free (target2); \n+  XDELETEVEC (target1);\n+  XDELETEVEC (target2); \n   \n   return result;\n }\n \n-/* This target supports function multiversioning.  */\n-\n-static bool\n-ix86_supports_function_versions (void)\n-{\n-  return true;\n-}\n-\n static tree \n ix86_mangle_decl_assembler_name (tree decl, tree id)\n {\n@@ -29143,10 +29191,10 @@ make_name (tree decl, const char *suffix, bool make_unique)\n \n   /* Use '.' to concatenate names as it is demangler friendly.  */\n   if (make_unique)\n-      snprintf (global_var_name, name_len, \"%s.%s.%s\", name,\n-\t\tunique_name, suffix);\n+    snprintf (global_var_name, name_len, \"%s.%s.%s\", name, unique_name,\n+\t      suffix);\n   else\n-      snprintf (global_var_name, name_len, \"%s.%s\", name, suffix);\n+    snprintf (global_var_name, name_len, \"%s.%s\", name, suffix);\n \n   return global_var_name;\n }\n@@ -29161,22 +29209,21 @@ static tree\n make_dispatcher_decl (const tree decl)\n {\n   tree func_decl;\n-  char *func_name, *resolver_name;\n+  char *func_name;\n   tree fn_type, func_type;\n   bool is_uniq = false;\n \n   if (TREE_PUBLIC (decl) == 0)\n     is_uniq = true;\n \n   func_name = make_name (decl, \"ifunc\", is_uniq);\n-  resolver_name = make_name (decl, \"resolver\", is_uniq);\n-  gcc_assert (resolver_name);\n \n   fn_type = TREE_TYPE (decl);\n   func_type = build_function_type (TREE_TYPE (fn_type),\n \t\t\t\t   TYPE_ARG_TYPES (fn_type));\n   \n   func_decl = build_fn_decl (func_name, func_type);\n+  XDELETEVEC (func_name);\n   TREE_USED (func_decl) = 1;\n   DECL_CONTEXT (func_decl) = NULL_TREE;\n   DECL_INITIAL (func_decl) = error_mark_node;\n@@ -29198,9 +29245,14 @@ make_dispatcher_decl (const tree decl)\n static bool\n is_function_default_version (const tree decl)\n {\n-  return (TREE_CODE (decl) == FUNCTION_DECL\n-\t  && DECL_FUNCTION_VERSIONED (decl)\n-\t  && lookup_attribute (\"target\", DECL_ATTRIBUTES (decl)) == NULL_TREE);\n+  if (TREE_CODE (decl) != FUNCTION_DECL\n+      || !DECL_FUNCTION_VERSIONED (decl))\n+    return false;\n+  tree attr = lookup_attribute (\"target\", DECL_ATTRIBUTES (decl));\n+  gcc_assert (attr);\n+  attr = TREE_VALUE (TREE_VALUE (attr));\n+  return (TREE_CODE (attr) == STRING_CST\n+\t  && strcmp (TREE_STRING_POINTER (attr), \"default\") == 0);\n }\n \n /* Make a dispatcher declaration for the multi-versioned function DECL.\n@@ -29394,6 +29446,7 @@ make_resolver_func (const tree default_decl,\n   /* Create the alias for dispatch to resolver here.  */\n   /*cgraph_create_function_alias (dispatch_decl, decl);*/\n   cgraph_same_body_alias (NULL, dispatch_decl, decl);\n+  XDELETEVEC (resolver_name);\n   return decl;\n }\n \n@@ -29455,7 +29508,7 @@ ix86_generate_version_dispatcher_body (void *node_p)\n     }\n \n   dispatch_function_versions (resolver_decl, &fn_ver_vec, &empty_bb);\n-\n+  fn_ver_vec.release ();\n   rebuild_cgraph_edges (); \n   pop_cfun ();\n   return resolver_decl;\n@@ -42443,10 +42496,6 @@ ix86_memmodel_check (unsigned HOST_WIDE_INT val)\n #undef TARGET_OPTION_FUNCTION_VERSIONS\n #define TARGET_OPTION_FUNCTION_VERSIONS ix86_function_versions\n \n-#undef TARGET_OPTION_SUPPORTS_FUNCTION_VERSIONS\n-#define TARGET_OPTION_SUPPORTS_FUNCTION_VERSIONS \\\n-  ix86_supports_function_versions\n-\n #undef TARGET_CAN_INLINE_P\n #define TARGET_CAN_INLINE_P ix86_can_inline_p\n "}, {"sha": "ce2b44d854520f5b8af6d989139767c7a7a245f6", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3288746035c8699973d9242284606f1aad2465d2/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3288746035c8699973d9242284606f1aad2465d2/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=3288746035c8699973d9242284606f1aad2465d2", "patch": "@@ -9907,11 +9907,6 @@ different target specific attributes, that is, they are compiled for\n different target machines.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_OPTION_SUPPORTS_FUNCTION_VERSIONS (void)\n-This target hook returns @code{true} if the target supports function\n-multiversioning.\n-@end deftypefn\n-\n @deftypefn {Target Hook} bool TARGET_CAN_INLINE_P (tree @var{caller}, tree @var{callee})\n This target hook returns @code{false} if the @var{caller} function\n cannot inline @var{callee}, based on target specific information.  By"}, {"sha": "d6e7ce79f9dc3ee9325d00c656c1e1214265a7a8", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3288746035c8699973d9242284606f1aad2465d2/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3288746035c8699973d9242284606f1aad2465d2/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=3288746035c8699973d9242284606f1aad2465d2", "patch": "@@ -9768,11 +9768,6 @@ different target specific attributes, that is, they are compiled for\n different target machines.\n @end deftypefn\n \n-@hook TARGET_OPTION_SUPPORTS_FUNCTION_VERSIONS\n-This target hook returns @code{true} if the target supports function\n-multiversioning.\n-@end deftypefn\n-\n @hook TARGET_CAN_INLINE_P\n This target hook returns @code{false} if the @var{caller} function\n cannot inline @var{callee}, based on target specific information.  By"}, {"sha": "63ba55e98d0857be3f17fade7e49974ef9a01470", "filename": "gcc/target.def", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=3288746035c8699973d9242284606f1aad2465d2", "patch": "@@ -2831,14 +2831,6 @@ DEFHOOK\n  bool, (tree decl1, tree decl2),\n  hook_bool_tree_tree_false)\n \n-/* This function returns true if the target supports function\n-   multiversioning.  */\n-DEFHOOK\n-(supports_function_versions,\n- \"\",\n- bool, (void),\n- hook_bool_void_false)\n-\n /* Function to determine if one function can inline another function.  */\n #undef HOOK_PREFIX\n #define HOOK_PREFIX \"TARGET_\""}, {"sha": "215ab43d2526a49afa07560857358276138747ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3288746035c8699973d9242284606f1aad2465d2", "patch": "@@ -1,3 +1,24 @@\n+2013-01-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/55742\n+\t* g++.dg/mv1.C: Moved to...\n+\t* g++.dg/ext/mv1.C: ... here.  Adjust test.\n+\t* g++.dg/mv2.C: Moved to...\n+\t* g++.dg/ext/mv2.C: ... here.  Adjust test.\n+\t* g++.dg/mv3.C: Moved to...\n+\t* g++.dg/ext/mv3.C: ... here.\n+\t* g++.dg/mv4.C: Moved to...\n+\t* g++.dg/ext/mv4.C: ... here.\n+\t* g++.dg/mv5.C: Moved to...\n+\t* g++.dg/ext/mv5.C: ... here.  Adjust test.\n+\t* g++.dg/mv6.C: Moved to...\n+\t* g++.dg/ext/mv6.C: ... here.  Adjust test.\n+\t* g++.dg/ext/mv7.C: New test.\n+\t* g++.dg/ext/mv8.C: New test.\n+\t* g++.dg/ext/mv9.C: New test.\n+\t* g++.dg/ext/mv10.C: New test.\n+\t* g++.dg/ext/mv11.C: New test.\n+\n 2013-01-30  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/56144"}, {"sha": "4eedbff7b234f1076b6db1896408c83677d73bb0", "filename": "gcc/testsuite/g++.dg/ext/mv1.C", "status": "renamed", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv1.C?ref=3288746035c8699973d9242284606f1aad2465d2", "patch": "@@ -6,7 +6,8 @@\n #include <assert.h>\n \n /* Default version.  */\n-int foo ();\n+int foo (); // Extra declaration that is merged with the second one.\n+int foo () __attribute__ ((target(\"default\")));\n /* The other versions of foo.  Mix up the ordering and \n    check if the dispatching does it in the order of priority. */\n /* Check combination of target attributes.  */\n@@ -65,7 +66,8 @@ int main ()\n   return 0;\n }\n \n-int foo ()\n+int __attribute__ ((target(\"default\")))\n+foo ()\n {\n   return 0;\n }", "previous_filename": "gcc/testsuite/g++.dg/mv1.C"}, {"sha": "5dfe36372cb42136f44d2ae724eb0d9cdbf48494", "filename": "gcc/testsuite/g++.dg/ext/mv10.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv10.C?ref=3288746035c8699973d9242284606f1aad2465d2", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do assemble { target i?86-*-* x86_64-*-* } }\n+// { dg-options \"\" }\n+\n+__attribute__((target (\"popcnt\"), used))\n+void foo (void)\n+{\n+}\n+\n+__attribute__((target (\"popcnt\",\"avx\"), used))\n+void foo (void)\n+{\n+}"}, {"sha": "1f5c576f0a7c7f1378436ef1ecee2519e162e4d8", "filename": "gcc/testsuite/g++.dg/ext/mv11.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv11.C?ref=3288746035c8699973d9242284606f1aad2465d2", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile { target i?86-*-* x86_64-*-* } }\n+// { dg-options \"-msse2\" }\n+\n+int foo () __attribute__ ((target(\"default\")));\n+int foo () __attribute__ ((target(\"sse2\")));\n+\n+int\n+main ()\n+{\n+  return foo ();\n+}\n+\n+int  __attribute__ ((target(\"default\")))\n+foo ()\n+{\n+  return 0;\n+}\n+\n+int __attribute__ ((target(\"sse2\")))\n+foo ()\n+{\n+  return 0;\n+}"}, {"sha": "869e99b4faea8ee28a7c4af3a062b3584a7b3b19", "filename": "gcc/testsuite/g++.dg/ext/mv2.C", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv2.C?ref=3288746035c8699973d9242284606f1aad2465d2", "patch": "@@ -7,7 +7,7 @@\n #include <assert.h>\n \n /* Default version.  */\n-int foo ();\n+int foo () __attribute__ ((target (\"default\")));\n /* The dispatch checks should be in the exact reverse order of the\n    declarations below.  */\n int foo () __attribute__ ((target (\"mmx\")));\n@@ -51,7 +51,7 @@ int main ()\n   return 0;\n }\n \n-int\n+int __attribute__ ((target(\"default\")))\n foo ()\n {\n   return 0;", "previous_filename": "gcc/testsuite/g++.dg/mv2.C"}, {"sha": "ec2aa1ffec234646d927b4b4b4fe9eb4f5f9ef4e", "filename": "gcc/testsuite/g++.dg/ext/mv3.C", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv3.C?ref=3288746035c8699973d9242284606f1aad2465d2", "previous_filename": "gcc/testsuite/g++.dg/mv3.C"}, {"sha": "ff1cc2f63f43bfe03eb0975e9bac57ecb533f92e", "filename": "gcc/testsuite/g++.dg/ext/mv4.C", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv4.C?ref=3288746035c8699973d9242284606f1aad2465d2", "previous_filename": "gcc/testsuite/g++.dg/mv4.C"}, {"sha": "fd62eee015592c8a1b1bde8dff4b23a9160a747b", "filename": "gcc/testsuite/g++.dg/ext/mv5.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv5.C?ref=3288746035c8699973d9242284606f1aad2465d2", "patch": "@@ -7,7 +7,7 @@\n \n \n /* Default version.  */\n-inline int\n+inline int __attribute__ ((target (\"default\")))\n foo ()\n {\n   return 0;", "previous_filename": "gcc/testsuite/g++.dg/mv5.C"}, {"sha": "2273065996b849e13c7dbe164cad3d0a5f2f90ec", "filename": "gcc/testsuite/g++.dg/ext/mv6.C", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv6.C?ref=3288746035c8699973d9242284606f1aad2465d2", "patch": "@@ -8,6 +8,7 @@ class Foo\n {\n  public:\n   /* Default version of foo.  */\n+  __attribute__ ((target(\"default\")))\n   int foo ()\n   {\n     return 0;", "previous_filename": "gcc/testsuite/g++.dg/mv6.C"}, {"sha": "d378402e779481fcd7fd36746d66c8ae4aca33de", "filename": "gcc/testsuite/g++.dg/ext/mv7.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv7.C?ref=3288746035c8699973d9242284606f1aad2465d2", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile { target i?86-*-* x86_64-*-* } }\n+// { dg-options \"\" }\n+\n+__attribute__((target (\"default\")))\n+void foo (void)\t// { dg-error \"previously defined here\" }\n+{\n+}\n+\n+__attribute__((target (128)))\n+void foo (void) // { dg-error \"(not a string|redefinition)\" }\n+{\n+}"}, {"sha": "2e98dd7ad85efa6903bce38f554130e5510af8c8", "filename": "gcc/testsuite/g++.dg/ext/mv8.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv8.C?ref=3288746035c8699973d9242284606f1aad2465d2", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile { target i?86-*-* x86_64-*-* } }\n+// { dg-options \"\" }\n+\n+__attribute__((target (11,12)))\n+void foo (void) // { dg-error \"not a string\" }\n+{\n+}"}, {"sha": "53ee995027a76002ec53eca289a9b7727da55e26", "filename": "gcc/testsuite/g++.dg/ext/mv9.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3288746035c8699973d9242284606f1aad2465d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv9.C?ref=3288746035c8699973d9242284606f1aad2465d2", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile { target i?86-*-* x86_64-*-* } }    \n+// { dg-options \"\" }   \n+\n+void foo ();\n+void foo () __attribute__((target (\"sse4\")));\n+void foo () __attribute__((target (\"default\"))); // { dg-error \"previous declaration\" }\n+void foo ()\t// { dg-error \"attribute for multi-versioned\" }\n+{\n+}"}]}