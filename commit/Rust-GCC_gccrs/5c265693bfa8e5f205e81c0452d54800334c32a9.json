{"sha": "5c265693bfa8e5f205e81c0452d54800334c32a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMyNjU2OTNiZmE4ZTVmMjA1ZTgxYzA0NTJkNTQ4MDAzMzRjMzJhOQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-19T00:16:23Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-19T00:16:23Z"}, "message": "Daily bump.", "tree": {"sha": "669e202cfd57d4f0710b5fd32eb4d197dd2663a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/669e202cfd57d4f0710b5fd32eb4d197dd2663a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c265693bfa8e5f205e81c0452d54800334c32a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c265693bfa8e5f205e81c0452d54800334c32a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c265693bfa8e5f205e81c0452d54800334c32a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c265693bfa8e5f205e81c0452d54800334c32a9/comments", "author": null, "committer": null, "parents": [{"sha": "ea2722934fc8238e4a9eb41586ca106448faa940", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea2722934fc8238e4a9eb41586ca106448faa940", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea2722934fc8238e4a9eb41586ca106448faa940"}], "stats": {"total": 246, "additions": 245, "deletions": 1}, "files": [{"sha": "e95ec61ce4861ad178cb34176de667c929e7d516", "filename": "gcc/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c265693bfa8e5f205e81c0452d54800334c32a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c265693bfa8e5f205e81c0452d54800334c32a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c265693bfa8e5f205e81c0452d54800334c32a9", "patch": "@@ -1,3 +1,71 @@\n+2020-08-18  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtin.def (BU_VSX_1): Rename xvcvbf16sp to\n+\txvcvbf16spn.\n+\t* config/rs6000/rs6000-call.c (builtin_function_type): Likewise.\n+\t* config/rs6000/vsx.md: Likewise.\n+\t* doc/extend.texi: Likewise.\n+\n+2020-08-18  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-string.c (gen_lxvl_stxvl_move):\n+\tHelper function.\n+\t(expand_block_move): Add lxvl/stxvl, vector pair, and\n+\tunaligned VSX.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal):\n+\tDefault value for -mblock-ops-vector-pair.\n+\t* config/rs6000/rs6000.opt: Add -mblock-ops-vector-pair.\n+\n+2020-08-18  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* vr-values.c (check_for_binary_op_overflow): Change type of store\n+\tto range_query.\n+\t(vr_values::adjust_range_with_scev): Abstract most of the code...\n+\t(range_of_var_in_loop): ...here.  Remove value_range_equiv uses.\n+\t(simplify_using_ranges::simplify_using_ranges): Change type of store\n+\tto range_query.\n+\t* vr-values.h (class range_query): New.\n+\t(class simplify_using_ranges): Use range_query.\n+\t(class vr_values): Add OVERRIDE to get_value_range.\n+\t(range_of_var_in_loop): New.\n+\n+2020-08-18  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/96665\n+\tPR middle-end/78257\n+\t* expr.c (convert_to_bytes): Replace statically allocated buffer with\n+\ta dynamically allocated one of sufficient size.\n+\n+2020-08-18  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/96670\n+\tPR middle-end/78257\n+\t* gimple-fold.c (gimple_fold_builtin_memchr): Call byte_representation\n+\tto get it, not string_constant.\n+\n+2020-08-18  Hu Jiangping  <hujiangping@cn.fujitsu.com>\n+\n+\t* doc/gimple.texi (gimple_debug_begin_stmt_p): Add return type.\n+\t(gimple_debug_inline_entry_p, gimple_debug_nonbind_marker_p): Likewise.\n+\n+2020-08-18  Martin Sebor  <msebor@redhat.com>\n+\n+\t* fold-const.c (native_encode_expr): Update comment.\n+\n+2020-08-18  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/96536\n+\t* config/i386/i386.md (restore_stack_nonlocal): Add missing compare\n+\tRTX.  Rewrite expander to use high-level functions in RTL construction.\n+\n+2020-08-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/96562\n+\tPR target/93897\n+\t* config/i386/i386-expand.c (ix86_expand_pinsr): Don't use\n+\tpinsr for TImode.\n+\t(ix86_expand_pextr): Don't use pextr for TImode.\n+\n 2020-08-17  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386-builtin.def (__builtin_ia32_bextri_u32)"}, {"sha": "a8098fbd6e30bb5c104d49835c4936298a58c342", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c265693bfa8e5f205e81c0452d54800334c32a9/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c265693bfa8e5f205e81c0452d54800334c32a9/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=5c265693bfa8e5f205e81c0452d54800334c32a9", "patch": "@@ -1 +1 @@\n-20200818\n+20200819"}, {"sha": "557b0264450eb7bf0be8218f998f7916efd4e1e5", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c265693bfa8e5f205e81c0452d54800334c32a9/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c265693bfa8e5f205e81c0452d54800334c32a9/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=5c265693bfa8e5f205e81c0452d54800334c32a9", "patch": "@@ -1,3 +1,22 @@\n+2020-08-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region-model.cc (region_model::get_rvalue_1): Fix name of local.\n+\n+2020-08-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96641\n+\t* region-model.cc (region_model::get_rvalue_1): Handle\n+\tunrecognized tree codes by returning \"UNKNOWN.\n+\n+2020-08-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96640\n+\t* region-model.cc (region_model::get_gassign_result): Handle various\n+\tVEC_* tree codes by returning UNKNOWN.\n+\t(region_model::on_assignment): Handle unrecognized tree codes by\n+\tsetting lhs to an unknown value, rather than issuing a \"sorry\" and\n+\tasserting.\n+\n 2020-08-17  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/96644"}, {"sha": "7839b9b6e0189db79aaf6e23e0d11052a33bdc5e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c265693bfa8e5f205e81c0452d54800334c32a9/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c265693bfa8e5f205e81c0452d54800334c32a9/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=5c265693bfa8e5f205e81c0452d54800334c32a9", "patch": "@@ -1,3 +1,10 @@\n+2020-08-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/96571\n+\t* c-parser.c (c_parser_generic_selection): Change match_found from bool\n+\tto int, holding index of the match.  Call mark_exp_read on the selector\n+\texpression and on expressions other than the selected one.\n+\n 2020-08-01  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR c/96377"}, {"sha": "217c040301f0f5c867d9e5740784548e0e6708ac", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c265693bfa8e5f205e81c0452d54800334c32a9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c265693bfa8e5f205e81c0452d54800334c32a9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5c265693bfa8e5f205e81c0452d54800334c32a9", "patch": "@@ -1,3 +1,32 @@\n+2020-08-18  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (SET_TYPE_TEMPLTE_INFO): Do not deal with ALIAS templates.\n+\t* pt.c (lookup_template_class_1): Special-case alias template\n+\ttemplate_info setting.\n+\n+2020-08-18  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/96199\n+\t* pt.c (tsubst_aggr_type): Rewrite in C++17, too.\n+\t(maybe_dependent_member_ref): Likewise.\n+\t(build_deduction_guide): Re-substitute template parms.\n+\t* cp-tree.h (struct push_nested_class_guard): New.\n+\t* constraint.cc (get_normalized_constraints_from_decl): Use it.\n+\n+2020-08-18  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/96199\n+\t* pt.c (maybe_dependent_member_ref): New.\n+\t(tsubst_copy) [CONST_DECL]: Use it.\n+\t[VAR_DECL]: Likewise.\n+\t(tsubst_aggr_type): Handle nested type.\n+\n+2020-08-18  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* name-lookup.c (qualify_lookup): Drop lambda checking here.\n+\tReorder namespace & type checking.\n+\t(lookup_name_1): Do hidden lambda checking here.\n+\n 2020-08-14  Nathan Sidwell  <nathan@acm.org>\n \n \t* name-lookup.h (lookup_name_real, lookup_name_nonclass): Rename"}, {"sha": "3910e0f6fbead831ec2eab88bced6fd89d2f0e42", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c265693bfa8e5f205e81c0452d54800334c32a9/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c265693bfa8e5f205e81c0452d54800334c32a9/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=5c265693bfa8e5f205e81c0452d54800334c32a9", "patch": "@@ -1,3 +1,9 @@\n+2020-08-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/96301\n+\t* decl.cc (DeclVisitor::visit (FuncDeclaration *)): Only return\n+\tnon-trivial structs by invisible reference.\n+\n 2020-08-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/96153"}, {"sha": "1febec31e9dfefe8fcb0bcd7744ac5cd294e4f06", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c265693bfa8e5f205e81c0452d54800334c32a9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c265693bfa8e5f205e81c0452d54800334c32a9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5c265693bfa8e5f205e81c0452d54800334c32a9", "patch": "@@ -1,3 +1,12 @@\n+2020-08-18  Harald Anlauf  <anlauf@gmx.de>\n+\n+\t* check.c (check_rest): Reject MIN/MAX character arguments of\n+\tdifferent kind.\n+\t* simplify.c (min_max_choose): The simplification result shall\n+\thave the highest kind value of the arguments.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_minmax): Choose type and\n+\tkind of intermediate by looking at all arguments, not the result.\n+\n 2020-08-17  Martin Liska  <mliska@suse.cz>\n \n \t* openmp.c (resolve_omp_clauses): Add static assert"}, {"sha": "a390182bf36365f9853ba83329d3c5af1971a355", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c265693bfa8e5f205e81c0452d54800334c32a9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c265693bfa8e5f205e81c0452d54800334c32a9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c265693bfa8e5f205e81c0452d54800334c32a9", "patch": "@@ -1,3 +1,68 @@\n+2020-08-18  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/mma-builtin-3.c: Rename xvcvbf16sp to xvcvbf16spn.\n+\n+2020-08-18  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/96199\n+\t* g++.dg/cpp1z/class-deduction-spec1.C: New test.\n+\n+2020-08-18  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/96199\n+\t* g++.dg/cpp2a/class-deduction-alias4.C: New test.\n+\n+2020-08-18  Harald Anlauf  <anlauf@gmx.de>\n+\n+\t* gfortran.dg/minmax_char_3.f90: New test.\n+\t* gfortran.dg/min_max_kind.f90: New test.\n+\t* gfortran.dg/pr96613.f90: New test.\n+\n+2020-08-18  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/96665\n+\tPR middle-end/78257\n+\t* gcc.dg/memcmp-5.c: New test.\n+\n+2020-08-18  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/96670\n+\t* gcc.dg/memchr-2.c: New test.\n+\t* gcc.dg/memcmp-6.c: New test.\n+\n+2020-08-18  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Zdenek Sojka  <zsojka@seznam.cz>\n+\n+\tPR rtl-optimization/96298\n+\t* gcc.dg/pr96298.c: New test.\n+\t* gcc.target/i386/pr96298.c: New test.\n+\n+2020-08-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/96301\n+\t* gdc.dg/pr96301a.d: New test.\n+\t* gdc.dg/pr96301b.d: New test.\n+\t* gdc.dg/pr96301c.d: New test.\n+\n+2020-08-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr96562-1.c: New test.\n+\n+2020-08-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/96571\n+\t* gcc.dg/Wunused-var-4.c: New test.\n+\n+2020-08-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/96574\n+\t* gcc.target/i386/pr92865-1.c: Adjust testcase.\n+\n+2020-08-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96641\n+\t* g++.dg/analyzer/pr96641.C: New test.\n+\n 2020-08-17  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/96644"}, {"sha": "3f74cbe0380ea050a208eee2a50b9d64b3d2c8ef", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c265693bfa8e5f205e81c0452d54800334c32a9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c265693bfa8e5f205e81c0452d54800334c32a9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5c265693bfa8e5f205e81c0452d54800334c32a9", "patch": "@@ -1,3 +1,44 @@\n+2020-08-18  David Edelsohn  <dje.gcc@gmail.com>\n+\t    Clement Chigot  <clement.chigot@atos.net>\n+\n+\t* config/os/aix/t-aix: Add complementary mode object files to\n+\tlibsupc++.a\n+\n+2020-08-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/17_intro/headers/c++1998/all_attributes.cc: Check\n+\t\"cold\" isn't used in the library. Also check <cxxabi.h>.\n+\t* testsuite/17_intro/headers/c++2011/all_attributes.cc:\n+\tLikewise.\n+\t* testsuite/17_intro/headers/c++2014/all_attributes.cc:\n+\tLikewise.\n+\t* testsuite/17_intro/headers/c++2017/all_attributes.cc:\n+\tLikewise.\n+\t* testsuite/17_intro/headers/c++2020/all_attributes.cc:\n+\tLikewise.\n+\n+2020-08-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/69724\n+\t* include/std/future (__future_base::_S_make_deferred_state)\n+\t(__future_base::_S_make_async_state): Remove.\n+\t(__future_base::_Deferred_state): Change constructor to accept a\n+\tparameter pack of arguments and forward them to the call\n+\twrapper.\n+\t(__future_base::_Async_state_impl): Likewise. Replace lambda\n+\texpression with a named member function.\n+\t(async): Construct state object directly from the arguments,\n+\tinstead of using thread::__make_invoker, _S_make_deferred_state\n+\tand _S_make_async_state. Move shared state into the returned\n+\tfuture.\n+\t* include/std/thread (thread::_Call_wrapper): New alias\n+\ttemplate for use by constructor and std::async.\n+\t(thread::thread(Callable&&, Args&&...)): Create state object\n+\tdirectly instead of using _S_make_state.\n+\t(thread::__make_invoker, thread::__decayed_tuple)\n+\t(thread::_S_make_state): Remove.\n+\t* testsuite/30_threads/async/69724.cc: New test.\n+\n 2020-08-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/55713"}]}