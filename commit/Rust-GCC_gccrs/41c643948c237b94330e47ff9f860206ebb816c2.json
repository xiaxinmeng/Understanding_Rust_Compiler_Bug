{"sha": "41c643948c237b94330e47ff9f860206ebb816c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFjNjQzOTQ4YzIzN2I5NDMzMGU0N2ZmOWY4NjAyMDZlYmI4MTZjMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-22T22:51:48Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-22T22:51:48Z"}, "message": "c-pragma.c (maybe_apply_renaming_pragma): New.\n\n        * c-pragma.c (maybe_apply_renaming_pragma): New.\n        (handle_pragma_redefine_extname, pending_redefine_extname): New.\n        (handle_pragma_extern_prefix, pragma_extern_prefix): New.\n        (init_pragma): Register them.\n        * c-pragma.h (maybe_apply_renaming_pragma): Declare.\n        * c-decl.c (finish_decl): Call it.\n        * cp/decl.c (cp_finish_decl): Likewise.\n        * doc/extend.texi: Document the new pragmas.\n\n        * config/alpha/osf.h (CPP_SUBTARGET_SPEC): Add __EXTERN_PREFIX.\n        (HANDLE_PRAGMA_EXTERN_PREFIX): New.\n\n        * config/i386/sol2.h (CPP_PREDEFINES): Add __PRAGMA_REDEFINE_EXTNAME.\n        (HANDLE_PRAGMA_REDEFINE_EXTNAME): New.\n        * config/sparc/sol2.h: Likewise.\n\n        * g++.dg/other/pragma-re-1.C: New.\n        * g++.dg/other/pragma-ep-1.C: New.\n        * gcc.dg/pragma-re-1.c, gcc.dg/pragma-re-2.c: New.\n        * gcc.dg/pragma-ep-1.c, gcc.dg/pragma-ep-2.c: New.\n        * gcc.dg/pragma-ep-3.c: New.\n\nFrom-SVN: r51200", "tree": {"sha": "ef58fdf21cd2d5af8fcc1fdca3da41897a87502f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef58fdf21cd2d5af8fcc1fdca3da41897a87502f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41c643948c237b94330e47ff9f860206ebb816c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41c643948c237b94330e47ff9f860206ebb816c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41c643948c237b94330e47ff9f860206ebb816c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41c643948c237b94330e47ff9f860206ebb816c2/comments", "author": null, "committer": null, "parents": [{"sha": "661fff62a918df093c952e14a1656f0e151c137a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/661fff62a918df093c952e14a1656f0e151c137a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/661fff62a918df093c952e14a1656f0e151c137a"}], "stats": {"total": 306, "additions": 302, "deletions": 4}, "files": [{"sha": "4e0dccd4b0ab07397eae0bd12166400533a6af12", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=41c643948c237b94330e47ff9f860206ebb816c2", "patch": "@@ -3453,6 +3453,8 @@ finish_decl (decl, init, asmspec_tree)\n   const char *asmspec = 0;\n \n   /* If a name was specified, get the string.  */\n+  if (current_binding_level == global_binding_level)\n+    asmspec_tree = maybe_apply_renaming_pragma (decl, asmspec_tree);\n   if (asmspec_tree)\n     asmspec = TREE_STRING_POINTER (asmspec_tree);\n "}, {"sha": "4bf7ce205ac21214a8ad9916201bba80473191b9", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=41c643948c237b94330e47ff9f860206ebb816c2", "patch": "@@ -351,6 +351,135 @@ maybe_apply_pragma_weak (decl)\n }\n #endif /* HANDLE_PRAGMA_WEAK */\n \n+#ifdef HANDLE_PRAGMA_REDEFINE_EXTNAME\n+static void handle_pragma_redefine_extname PARAMS ((cpp_reader *));\n+\n+static tree pending_redefine_extname;\n+\n+/* #pragma redefined_extname oldname newname */\n+static void\n+handle_pragma_redefine_extname (dummy)\n+     cpp_reader *dummy ATTRIBUTE_UNUSED;\n+{\n+  tree oldname, newname, decl, x;\n+  enum cpp_ttype t;\n+\n+  if (c_lex (&oldname) != CPP_NAME)\n+    {\n+      warning (\"malformed #pragma redefine_extname, ignored\");\n+      return;\n+    }\n+  if (c_lex (&newname) != CPP_NAME)\n+    {\n+      warning (\"malformed #pragma redefine_extname, ignored\");\n+      return;\n+    }\n+  t = c_lex (&x);\n+  if (t != CPP_EOF)\n+    warning (\"junk at end of #pragma redefine_extname\");\n+\n+  decl = identifier_global_value (oldname);\n+  if (decl && TREE_CODE_CLASS (TREE_CODE (decl)) == 'd')\n+    {\n+      if (DECL_ASSEMBLER_NAME_SET_P (decl)\n+\t  && DECL_ASSEMBLER_NAME (decl) != newname)\n+        warning (\"#pragma redefine_extname conflicts with declaration\");\n+      SET_DECL_ASSEMBLER_NAME (decl, newname);\n+    }\n+  else\n+    pending_redefine_extname\n+      = tree_cons (oldname, newname, pending_redefine_extname);\n+}\n+#endif\n+\n+#ifdef HANDLE_PRAGMA_EXTERN_PREFIX\n+static void handle_pragma_extern_prefix PARAMS ((cpp_reader *));\n+\n+static tree pragma_extern_prefix;\n+\n+/* #pragma extern_prefix \"prefix\" */\n+static void\n+handle_pragma_extern_prefix (dummy)\n+     cpp_reader *dummy ATTRIBUTE_UNUSED;\n+{\n+  tree prefix, x;\n+  enum cpp_ttype t;\n+\n+  if (c_lex (&prefix) != CPP_STRING)\n+    {\n+      warning (\"malformed #pragma extern_prefix, ignored\");\n+      return;\n+    }\n+  t = c_lex (&x);\n+  if (t != CPP_EOF)\n+    warning (\"junk at end of #pragma extern_prefix\");\n+\n+  /* Note that the length includes the null terminator.  */\n+  pragma_extern_prefix = (TREE_STRING_LENGTH (prefix) > 1 ? prefix : NULL);\n+}\n+#endif\n+\n+/* Hook from the front ends to apply the results of one of the preceeding\n+   pragmas that rename variables.  */\n+\n+tree\n+maybe_apply_renaming_pragma (decl, asmname)\n+     tree decl, asmname;\n+{\n+  tree oldname;\n+\n+  /* Copied from the check in set_decl_assembler_name.  */\n+  if (TREE_CODE (decl) == FUNCTION_DECL\n+      || (TREE_CODE (decl) == VAR_DECL \n+          && (TREE_STATIC (decl) \n+              || DECL_EXTERNAL (decl) \n+              || TREE_PUBLIC (decl))))\n+    oldname = DECL_ASSEMBLER_NAME (decl);\n+  else\n+    return asmname;\n+\n+  /* If the name begins with a *, that's a sign of an asmname attached to\n+     a previous declaration.  */\n+  if (IDENTIFIER_POINTER (oldname)[0] == '*')\n+    {\n+      const char *oldasmname = IDENTIFIER_POINTER (oldname) + 1;\n+      if (asmname && strcmp (TREE_STRING_POINTER (asmname), oldasmname) != 0)\n+\twarning (\"asm declaration conficts with previous rename\");\n+      asmname = build_string (strlen (oldasmname), oldasmname);\n+    }\n+\n+#ifdef HANDLE_PRAGMA_REDEFINE_EXTNAME\n+  {\n+    tree *p, t;\n+\n+    for (p = &pending_redefine_extname; (t = *p) ; p = &TREE_CHAIN (t))\n+      if (oldname == TREE_PURPOSE (t))\n+\t{\n+\t  const char *newname = IDENTIFIER_POINTER (TREE_VALUE (t));\n+\n+\t  if (asmname && strcmp (TREE_STRING_POINTER (asmname), newname) != 0)\n+            warning (\"#pragma redefine_extname conflicts with declaration\");\n+\t  *p = TREE_CHAIN (t);\n+\n+\t  return build_string (strlen (newname), newname);\n+\t}\n+  }\n+#endif\n+\n+#ifdef HANDLE_PRAGMA_EXTERN_PREFIX\n+  if (pragma_extern_prefix && !asmname)\n+    {\n+      char *x = concat (TREE_STRING_POINTER (pragma_extern_prefix),\n+\t\t\tIDENTIFIER_POINTER (oldname), NULL);\n+      asmname = build_string (strlen (x), x);\n+      free (x);\n+      return asmname;\n+    }\n+#endif\n+\n+  return asmname;\n+}\n+\n void\n init_pragma ()\n {\n@@ -361,6 +490,17 @@ init_pragma ()\n   cpp_register_pragma (parse_in, 0, \"weak\", handle_pragma_weak);\n   ggc_add_tree_root (&pending_weaks, 1);\n #endif\n+#ifdef HANDLE_PRAGMA_REDEFINE_EXTNAME\n+  cpp_register_pragma (parse_in, 0, \"redefine_extname\",\n+\t\t       handle_pragma_redefine_extname);\n+  ggc_add_tree_root (&pending_redefine_extname, 1);\n+#endif\n+#ifdef HANDLE_PRAGMA_EXTERN_PREFIX\n+  cpp_register_pragma (parse_in, 0, \"extern_prefix\",\n+\t\t       handle_pragma_extern_prefix);\n+  ggc_add_tree_root (&pragma_extern_prefix, 1);\n+#endif\n+\n #ifdef REGISTER_TARGET_PRAGMAS\n   REGISTER_TARGET_PRAGMAS (parse_in);\n #endif"}, {"sha": "22e4f7a174dfe3cb0509001e5362df46891b8f9c", "filename": "gcc/c-pragma.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.h?ref=41c643948c237b94330e47ff9f860206ebb816c2", "patch": "@@ -54,5 +54,6 @@ extern void cpp_register_pragma PARAMS ((cpp_reader *,\n #endif\n \n extern void maybe_apply_pragma_weak PARAMS ((tree));\n+extern tree maybe_apply_renaming_pragma PARAMS ((tree, tree));\n \n #endif /* GCC_C_PRAGMA_H */"}, {"sha": "1123e06bf68efb5f04e5a3cbef6111a55b404f09", "filename": "gcc/config/alpha/osf.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Fconfig%2Falpha%2Fosf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Fconfig%2Falpha%2Fosf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fosf.h?ref=41c643948c237b94330e47ff9f860206ebb816c2", "patch": "@@ -47,7 +47,8 @@ Boston, MA 02111-1307, USA.  */\n \n #undef CPP_SUBTARGET_SPEC\n #define CPP_SUBTARGET_SPEC \\\n-\"%{pthread|threads:-D_REENTRANT} %{threads:-D_PTHREAD_USE_D4} %(cpp_xfloat)\"\n+\"%{pthread|threads:-D_REENTRANT} %{threads:-D_PTHREAD_USE_D4} %(cpp_xfloat) \\\n+-D__EXTERN_PREFIX\"\n \n /* Under OSF4, -p and -pg require -lprof1, and -lprof1 requires -lpdf.  */\n \n@@ -209,3 +210,7 @@ __enable_execute_stack (addr)\t\t\t\t\t\t\\\n /* Handle #pragma weak and #pragma pack.  */\n #undef HANDLE_SYSV_PRAGMA\n #define HANDLE_SYSV_PRAGMA 1\n+\n+/* Handle #pragma extern_prefix.  Technically only needed for Tru64 5.x,\n+   but easier to manipulate preprocessor bits from here.  */\n+#define HANDLE_PRAGMA_EXTERN_PREFIX 1"}, {"sha": "fedfa55e20be9db7a2e1c2d08c77443bf99a2813", "filename": "gcc/config/i386/sol2.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Fconfig%2Fi386%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Fconfig%2Fi386%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2.h?ref=41c643948c237b94330e47ff9f860206ebb816c2", "patch": "@@ -75,10 +75,11 @@ Boston, MA 02111-1307, USA.  */\n #undef\tWINT_TYPE_SIZE\n #define\tWINT_TYPE_SIZE BITS_PER_WORD\n \n-/* Add \"sun\" to the list of symbols defined for SVR4.  */\n+#define HANDLE_PRAGMA_REDEFINE_EXTNAME 1\n+\n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \\\n-  \"-Dunix -D__svr4__ -D__SVR4 -Dsun -Asystem=svr4\"\n+  \"-Dunix -D__svr4__ -D__SVR4 -Dsun -D__PRAGMA_REDEFINE_EXTNAME -Asystem=svr4\"\n \n /* Solaris 2/Intel as chokes on #line directives.  */\n #undef CPP_SPEC"}, {"sha": "68efafe8ce516b5edcd903e8b4c5d81b2ade7c3c", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=41c643948c237b94330e47ff9f860206ebb816c2", "patch": "@@ -31,9 +31,11 @@ Boston, MA 02111-1307, USA.  */\n #undef\tWINT_TYPE_SIZE\n #define\tWINT_TYPE_SIZE BITS_PER_WORD\n \n+#define HANDLE_PRAGMA_REDEFINE_EXTNAME 1\n+\n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \\\n-\"-Dsparc -Dsun -Dunix -D__svr4__ -D__SVR4 \\\n+\"-Dsparc -Dsun -Dunix -D__svr4__ -D__SVR4 -D__PRAGMA_REDEFINE_EXTNAME \\\n -Asystem=unix -Asystem=svr4\"\n \n #undef CPP_SUBTARGET_SPEC"}, {"sha": "06c82ab232a66cc79a961ef96d197ccf26d02006", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=41c643948c237b94330e47ff9f860206ebb816c2", "patch": "@@ -8071,6 +8071,8 @@ cp_finish_decl (decl, init, asmspec_tree, flags)\n     }\n \n   /* If a name was specified, get the string.  */\n+  if (current_binding_level == global_binding_level)\n+    asmspec_tree = maybe_apply_renaming_pragma (decl, asmspec_tree);\n   if (asmspec_tree)\n     asmspec = TREE_STRING_POINTER (asmspec_tree);\n "}, {"sha": "f1f499d8b576f6d5296526f0f477ad1d5d85a1e4", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=41c643948c237b94330e47ff9f860206ebb816c2", "patch": "@@ -5998,6 +5998,8 @@ for further explanation.\n @menu\n * ARM Pragmas::\n * Darwin Pragmas::\n+* Solaris Pragmas::\n+* Tru64 Pragmas::\n @end menu\n \n @node ARM Pragmas\n@@ -6062,6 +6064,44 @@ that of the @code{unused} attribute, except that this pragma may appear\n anywhere within the variables' scopes.\n @end table\n \n+@node Solaris Pragmas\n+@subsection Solaris Pragmas\n+\n+For compatibility with the SunPRO compiler, the following pragma\n+is supported.\n+\n+@table @code\n+@item redefine_extname @var{oldname} @var{newname}\n+@cindex pragma, redefine_extname\n+\n+This pragma gives the C function @var{oldname} the assembler label\n+@var{newname}.  The pragma must appear before the function declaration.\n+This pragma is equivalent to the asm labels extension (@pxref{Asm\n+Labels}).  The preprocessor defines @code{__PRAGMA_REDEFINE_EXTNAME}\n+if the pragma is available.\n+@end table\n+\n+@node Tru64 Pragmas\n+@subsection Tru64 Pragmas\n+\n+For compatibility with the Compaq C compiler, the following pragma\n+is supported.\n+\n+@table @code\n+@item extern_prefix @var{string}\n+@cindex pragma, extern_prefix\n+\n+This pragma renames all subsequent function and variable declarations\n+such that @var{string} is prepended to the name.  This effect may be\n+terminated by using another @code{extern_prefix} pragma with the \n+empty string.\n+\n+This pragma is similar in intent to to the asm labels extension\n+(@pxref{Asm Labels}) in that the system programmer wants to change\n+the assembly-level ABI without changing the source-level API.  The\n+preprocessor defines @code{__EXTERN_PREFIX} if the pragma is available.\n+@end table\n+\n @node Unnamed Fields\n @section Unnamed struct/union fields within structs/unions.\n @cindex struct"}, {"sha": "99450cd79e4855adeedfd4378c0e394f157bfafb", "filename": "gcc/testsuite/g++.dg/other/pragma-ep-1.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpragma-ep-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpragma-ep-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpragma-ep-1.C?ref=41c643948c237b94330e47ff9f860206ebb816c2", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile { target *-*-osf5* } } */\n+/* { dg-final { scan-assembler \"xyzzy_one\" } } */\n+/* { dg-final { scan-assembler \"xyzzy_two\" } } */\n+/* { dg-final { scan-assembler \"xyzzz_three\" } } */\n+/* { dg-final { scan-assembler \"four\" } } */\n+/* { dg-final { scan-assembler-not \"_four\" } } */\n+\n+#ifndef __EXTERN_PREFIX\n+#error\n+#endif\n+\n+#pragma extern_prefix \"xyzzy_\"\n+\n+extern \"C\" int one(void);\n+extern \"C\" int two(void);\n+\n+#pragma extern_prefix \"xyzzz_\"\n+\n+extern \"C\" int three(void);\n+\n+#pragma extern_prefix \"\"\n+\n+extern \"C\" int four(void);\n+\n+void *p[] = {\n+  (void *) one, (void *) two, (void *) three, (void *) four\n+};"}, {"sha": "ec567f934604145b59d07b3517deaff76fa6187e", "filename": "gcc/testsuite/g++.dg/other/pragma-re-1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpragma-re-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpragma-re-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpragma-re-1.C?ref=41c643948c237b94330e47ff9f860206ebb816c2", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target *-*-solaris* } } */\n+/* { dg-final { scan-assembler \"bar\" } } */\n+/* { dg-final { scan-assembler-not \"foo\" } } */\n+/* { dg-final { scan-assembler \"_Z3bazv\" } } */\n+/* { dg-final { scan-assembler-not \"baq\" } } */\n+\n+#ifndef __PRAGMA_REDEFINE_EXTNAME\n+#error \n+#endif\n+\n+#pragma redefine_extname foo bar\n+extern \"C\" int foo(void);\n+void *p = (void *)foo;\n+\n+#pragma redefine_extname baz baq\n+extern int baz(void);\n+void *q = (void *)baz;"}, {"sha": "91ec640ca5bc10c1516c711a5b79f9391ab9bbc2", "filename": "gcc/testsuite/gcc.dg/pragma-ep-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-ep-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-ep-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-ep-1.c?ref=41c643948c237b94330e47ff9f860206ebb816c2", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile { target *-*-osf5* } } */\n+/* { dg-final { scan-assembler \"xyzzy_one\" } } */\n+/* { dg-final { scan-assembler \"xyzzy_two\" } } */\n+/* { dg-final { scan-assembler \"xyzzz_three\" } } */\n+/* { dg-final { scan-assembler \"four\" } } */\n+/* { dg-final { scan-assembler-not \"_four\" } } */\n+\n+#ifndef __EXTERN_PREFIX\n+#error\n+#endif\n+\n+#pragma extern_prefix \"xyzzy_\"\n+\n+extern int one(void);\n+extern int two(void);\n+\n+#pragma extern_prefix \"xyzzz_\"\n+\n+extern int three(void);\n+\n+#pragma extern_prefix \"\"\n+\n+extern int four(void);\n+\n+int (*p[]) (void) = {\n+  one, two, three, four\n+};"}, {"sha": "6e5c46704c93ca4da3da17415442cad68e1c9c6e", "filename": "gcc/testsuite/gcc.dg/pragma-ep-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-ep-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-ep-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-ep-2.c?ref=41c643948c237b94330e47ff9f860206ebb816c2", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target *-*-osf5* } } */\n+\n+#pragma extern_prefix\t\t\t/* { dg-warning \"malformed\" } */\n+#pragma extern_prefix foo\t\t/* { dg-warning \"malformed\" } */\n+#pragma extern_prefix \"foo\" 1\t\t/* { dg-warning \"junk\" } */\n+\n+int bar; /* silence `ISO C forbids an empty source file' warning */"}, {"sha": "95b38bc584bc4f370a6960bc80a92a3ee02e2ba7", "filename": "gcc/testsuite/gcc.dg/pragma-ep-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-ep-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-ep-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-ep-3.c?ref=41c643948c237b94330e47ff9f860206ebb816c2", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target alpha*-*-osf5* } */\n+/* { dg-final { scan-assembler \",Xfoo\" } } */\n+\n+#pragma extern_prefix \"X\"\n+void foo(void) __attribute__((noreturn));\n+void foo(void) __attribute__((noreturn));\n+void bar()\n+{\n+  foo();\n+}"}, {"sha": "80b1d3731f234dcb748a9efb22ef6828a152fd3b", "filename": "gcc/testsuite/gcc.dg/pragma-re-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-re-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-re-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-re-1.c?ref=41c643948c237b94330e47ff9f860206ebb816c2", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target *-*-solaris* } } */\n+/* { dg-final { scan-assembler \"bar\" } } */\n+/* { dg-final { scan-assembler-not \"foo\" } } */\n+\n+#ifndef __PRAGMA_REDEFINE_EXTNAME\n+#error \n+#endif\n+\n+#pragma redefine_extname foo bar\n+extern int foo(void);\n+void *p = (void *)foo;"}, {"sha": "351cbfbe4d93955b5a85171ab64424433fa45ad2", "filename": "gcc/testsuite/gcc.dg/pragma-re-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-re-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c643948c237b94330e47ff9f860206ebb816c2/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-re-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-re-2.c?ref=41c643948c237b94330e47ff9f860206ebb816c2", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile { target *-*-solaris* } } */\n+\n+#pragma redefine_extname\t\t/* { dg-warning \"malformed\" } */\n+#pragma redefine_extname foo\t\t/* { dg-warning \"malformed\" } */\n+#pragma redefine_extname foo 1\t\t/* { dg-warning \"malformed\" } */\n+#pragma redefine_extname foo bar 2\t/* { dg-warning \"junk\" } */"}]}