{"sha": "8f4f98f617c117919ccf0abc324eb2e431e8e0b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY0Zjk4ZjYxN2MxMTc5MTljY2YwYWJjMzI0ZWIyZTQzMWU4ZTBiMA==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2019-10-24T09:00:41Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@gcc.gnu.org", "date": "2019-10-24T09:00:41Z"}, "message": "S/390: Use UNSPEC_GET_TP for thread pointer loads\n\ngcc/ChangeLog:\n\n2019-10-24  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* config/s390/s390.c (s390_get_thread_pointer): Use\n\tgen_get_thread_pointer.\n\t(s390_expand_split_stack_prologue): Likewise.\n\t* config/s390/s390.md (UNSPEC_GET_TP): New UNSPEC.\n\t(*get_tp_31): New 31-bit splitter for UNSPEC_GET_TP.\n\t(*get_tp_64): New 64-bit splitter for UNSPEC_GET_TP.\n\t(get_thread_pointer<mode>): Use UNSPEC_GET_TP, use\n\tparameterized name.\n\ngcc/testsuite/ChangeLog:\n\n2019-10-24  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* gcc.target/s390/load-thread-pointer-once-2.c: New test.\n\nFrom-SVN: r277368", "tree": {"sha": "64b72db40707a01c1e287c0ece7f7ba2c7e84cd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64b72db40707a01c1e287c0ece7f7ba2c7e84cd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f4f98f617c117919ccf0abc324eb2e431e8e0b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f4f98f617c117919ccf0abc324eb2e431e8e0b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f4f98f617c117919ccf0abc324eb2e431e8e0b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f4f98f617c117919ccf0abc324eb2e431e8e0b0/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d136595df77f75bc6e5132e26f09cad031f38c71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d136595df77f75bc6e5132e26f09cad031f38c71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d136595df77f75bc6e5132e26f09cad031f38c71"}], "stats": {"total": 72, "additions": 58, "deletions": 14}, "files": [{"sha": "e0c4c1759cd3ea506f6aa7f02b7dd34232554c61", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4f98f617c117919ccf0abc324eb2e431e8e0b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4f98f617c117919ccf0abc324eb2e431e8e0b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f4f98f617c117919ccf0abc324eb2e431e8e0b0", "patch": "@@ -1,3 +1,14 @@\n+2019-10-24  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* config/s390/s390.c (s390_get_thread_pointer): Use\n+\tgen_get_thread_pointer.\n+\t(s390_expand_split_stack_prologue): Likewise.\n+\t* config/s390/s390.md (UNSPEC_GET_TP): New UNSPEC.\n+\t(*get_tp_31): New 31-bit splitter for UNSPEC_GET_TP.\n+\t(*get_tp_64): New 64-bit splitter for UNSPEC_GET_TP.\n+\t(get_thread_pointer<mode>): Use UNSPEC_GET_TP, use\n+\tparameterized name.\n+\n 2019-10-24  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-slp.c (vect_analyze_slp): When reduction group"}, {"sha": "151b80da0b38358bd336069bb1272688f24f934f", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4f98f617c117919ccf0abc324eb2e431e8e0b0/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4f98f617c117919ccf0abc324eb2e431e8e0b0/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=8f4f98f617c117919ccf0abc324eb2e431e8e0b0", "patch": "@@ -5106,7 +5106,8 @@ s390_get_thread_pointer (void)\n {\n   rtx tp = gen_reg_rtx (Pmode);\n \n-  emit_move_insn (tp, gen_rtx_REG (Pmode, TP_REGNUM));\n+  emit_insn (gen_get_thread_pointer (Pmode, tp));\n+\n   mark_reg_pointer (tp, BITS_PER_WORD);\n \n   return tp;\n@@ -11711,7 +11712,7 @@ s390_expand_split_stack_prologue (void)\n       /* Get thread pointer.  r1 is the only register we can always destroy - r0\n \t could contain a static chain (and cannot be used to address memory\n \t anyway), r2-r6 can contain parameters, and r6-r15 are callee-saved.  */\n-      emit_move_insn (r1, gen_rtx_REG (Pmode, TP_REGNUM));\n+      emit_insn (gen_get_thread_pointer (Pmode, r1));\n       /* Aim at __private_ss.  */\n       guard = gen_rtx_MEM (Pmode, plus_constant (Pmode, r1, psso));\n "}, {"sha": "e3881d07f2b65c177625609c2c4f8e886994939b", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4f98f617c117919ccf0abc324eb2e431e8e0b0/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4f98f617c117919ccf0abc324eb2e431e8e0b0/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=8f4f98f617c117919ccf0abc324eb2e431e8e0b0", "patch": "@@ -105,6 +105,7 @@\n    ; TLS support\n    UNSPEC_TLSLDM_NTPOFF\n    UNSPEC_TLS_LOAD\n+   UNSPEC_GET_TP\n \n    ; String Functions\n    UNSPEC_SRST\n@@ -1860,23 +1861,35 @@\n                               *,*,yes\")\n ])\n \n-; Splitters for loading/storing TLS pointers from/to %a0:DI.\n-; Do this only during split2, which runs after reload. At the point when split1\n-; runs, some of %a0:DI occurrences might be nested inside other rtxes and thus\n-; not matched. As a result, only some occurrences will be split, which will\n-; prevent CSE. At the point when split2 runs, reload will have ensured that no\n-; nested references exist.\n+; Splitters for loading TLS pointer from UNSPEC_GET_TP.\n+; UNSPEC_GET_TP is used instead of %a0:P, since the latter is a hard register,\n+; and those are not handled by Partial Redundancy Elimination (gcse.c), which\n+; results in generation of redundant thread pointer loads.\n \n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (match_operand:DI 1 \"register_operand\" \"\"))]\n-  \"TARGET_ZARCH && ACCESS_REG_P (operands[1]) && reload_completed\"\n+(define_insn_and_split \"*get_tp_31\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"t\")]\n+\t\t   UNSPEC_GET_TP))]\n+  \"\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (match_dup 1))])\n+\n+(define_insn_and_split \"*get_tp_64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"t\")]\n+\t\t   UNSPEC_GET_TP))]\n+  \"TARGET_ZARCH\"\n+  \"#\"\n+  \"&& reload_completed\"\n   [(set (match_dup 2) (match_dup 3))\n    (set (match_dup 0) (ashift:DI (match_dup 0) (const_int 32)))\n    (set (strict_low_part (match_dup 2)) (match_dup 4))]\n   \"operands[2] = gen_lowpart (SImode, operands[0]);\n    s390_split_access_reg (operands[1], &operands[4], &operands[3]);\")\n \n+; Splitters for storing TLS pointer to %a0:DI.\n+\n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n         (match_operand:DI 1 \"register_operand\" \"\"))]\n@@ -10520,8 +10533,9 @@\n ;;- Thread-local storage support.\n ;;\n \n-(define_expand \"get_thread_pointer<mode>\"\n-  [(set (match_operand:P 0 \"nonimmediate_operand\" \"\") (reg:P TP_REGNUM))]\n+(define_expand \"@get_thread_pointer<mode>\"\n+  [(set (match_operand:P 0 \"nonimmediate_operand\" \"\")\n+\t(unspec:P [(reg:P TP_REGNUM)] UNSPEC_GET_TP))]\n   \"\"\n   \"\")\n "}, {"sha": "337002bf3e5c62128170365ecd04da8f64043abb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4f98f617c117919ccf0abc324eb2e431e8e0b0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4f98f617c117919ccf0abc324eb2e431e8e0b0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f4f98f617c117919ccf0abc324eb2e431e8e0b0", "patch": "@@ -1,3 +1,7 @@\n+2019-10-24  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* gcc.target/s390/load-thread-pointer-once-2.c: New test.\n+\n 2019-10-24  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/vect/slp-reduc-9.c: New testcase."}, {"sha": "36b1ed8800f15db4adf95d701ae97bb1f3bdd4b8", "filename": "gcc/testsuite/gcc.target/s390/load-thread-pointer-once-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4f98f617c117919ccf0abc324eb2e431e8e0b0/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fload-thread-pointer-once-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4f98f617c117919ccf0abc324eb2e431e8e0b0/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fload-thread-pointer-once-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fload-thread-pointer-once-2.c?ref=8f4f98f617c117919ccf0abc324eb2e431e8e0b0", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+extern void c(void *);\n+\n+void a(void)\n+{\n+  void *b = __builtin_thread_pointer();\n+  if (b)\n+    c(b);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tear\\t} 2 { target { lp64 } } } } */\n+/* { dg-final { scan-assembler-times {\\n\\tear\\t} 1 { target { ! lp64 } } } } */"}]}