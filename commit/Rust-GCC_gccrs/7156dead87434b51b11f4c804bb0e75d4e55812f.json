{"sha": "7156dead87434b51b11f4c804bb0e75d4e55812f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE1NmRlYWQ4NzQzNGI1MWIxMWY0YzgwNGJiMGU3NWQ0ZTU1ODEyZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-04-10T11:46:08Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-04-10T11:46:08Z"}, "message": "expr.c (get_inner_reference): Correct some WITH_RECORD_EXPR cases.\n\n\t* expr.c (get_inner_reference): Correct some WITH_RECORD_EXPR cases.\n\t(expand_expr, case CONVERT_EXPR): Pass proper alignment to store_field.\n\nFrom-SVN: r33056", "tree": {"sha": "6bb3acc9b648c0bd2d7216ca18cbe88dfb25d8ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bb3acc9b648c0bd2d7216ca18cbe88dfb25d8ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7156dead87434b51b11f4c804bb0e75d4e55812f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7156dead87434b51b11f4c804bb0e75d4e55812f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7156dead87434b51b11f4c804bb0e75d4e55812f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7156dead87434b51b11f4c804bb0e75d4e55812f/comments", "author": null, "committer": null, "parents": [{"sha": "231a222692985f53295d9d4f6123de60494f9545", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/231a222692985f53295d9d4f6123de60494f9545", "html_url": "https://github.com/Rust-GCC/gccrs/commit/231a222692985f53295d9d4f6123de60494f9545"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "30c264a121165e407bb1db836e6df0c75942e570", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7156dead87434b51b11f4c804bb0e75d4e55812f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7156dead87434b51b11f4c804bb0e75d4e55812f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7156dead87434b51b11f4c804bb0e75d4e55812f", "patch": "@@ -1,5 +1,8 @@\n Mon Apr 10 07:21:13 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* expr.c (get_inner_reference): Correct some WITH_RECORD_EXPR cases.\n+\t(expand_expr, case CONVERT_EXPR): Pass proper alignment to store_field.\n+\n \t* gcse.c (expr_hash_table_size): Now unsigned.\n \t(compute_ae_gen): Local variable `i' now unsigned.\n \t(compute_ae_kill, pre_insert_copies, pre_delete, pre_gcse): Likewise."}, {"sha": "98a2628cf1648bd33eb81ce9ea81c4171e28fc9f", "filename": "gcc/expr.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7156dead87434b51b11f4c804bb0e75d4e55812f/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7156dead87434b51b11f4c804bb0e75d4e55812f/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=7156dead87434b51b11f4c804bb0e75d4e55812f", "patch": "@@ -5022,18 +5022,20 @@ get_inner_reference (exp, pbitsize, pbitpos, poffset, pmode,\n \t\t   && contains_placeholder_p (this_offset))\n \t    this_offset = build (WITH_RECORD_EXPR, sizetype, this_offset, exp);\n \n-\t  offset = size_binop (PLUS_EXPR, offset, DECL_FIELD_OFFSET (field));\n+\t  offset = size_binop (PLUS_EXPR, offset, this_offset);\n \t  bit_offset = size_binop (PLUS_EXPR, bit_offset,\n \t\t\t\t   DECL_FIELD_BIT_OFFSET (field));\n \n \t  if (! host_integerp (offset, 0))\n \t    alignment = MIN (alignment, DECL_OFFSET_ALIGN (field));\n \t}\n+\n       else if (TREE_CODE (exp) == ARRAY_REF)\n \t{\n \t  tree index = TREE_OPERAND (exp, 1);\n \t  tree domain = TYPE_DOMAIN (TREE_TYPE (TREE_OPERAND (exp, 0)));\n \t  tree low_bound = (domain ? TYPE_MIN_VALUE (domain) : 0);\n+\t  tree unit_size = TYPE_SIZE_UNIT (TREE_TYPE (exp));\n \n \t  /* We assume all arrays have sizes that are a multiple of a byte.\n \t     First subtract the lower bound, if any, in the type of the\n@@ -5043,15 +5045,23 @@ get_inner_reference (exp, pbitsize, pbitpos, poffset, pmode,\n \t    index = fold (build (MINUS_EXPR, TREE_TYPE (index),\n \t\t\t\t index, low_bound));\n \n+\t  /* If the index has a self-referential type, pass it to a\n+\t     WITH_RECORD_EXPR; if the component size is, pass our\n+\t     component to one.  */\n \t  if (! TREE_CONSTANT (index)\n \t      && contains_placeholder_p (index))\n \t    index = build (WITH_RECORD_EXPR, TREE_TYPE (index), index, exp);\n+\t  if (! TREE_CONSTANT (unit_size)\n+\t      && contains_placeholder_p (unit_size))\n+\t    unit_size = build (WITH_RECORD_EXPR, sizetype, unit_size,\n+\t\t\t       TREE_OPERAND (exp, 0));\n \n \t  offset = size_binop (PLUS_EXPR, offset,\n \t\t\t       size_binop (MULT_EXPR,\n \t\t\t\t\t   convert (sizetype, index),\n-\t\t\t\t\t   TYPE_SIZE_UNIT (TREE_TYPE (exp))));\n+\t\t\t\t\t   unit_size));\n \t}\n+\n       else if (TREE_CODE (exp) != NON_LVALUE_EXPR\n \t       && ! ((TREE_CODE (exp) == NOP_EXPR\n \t\t      || TREE_CODE (exp) == CONVERT_EXPR)\n@@ -7060,7 +7070,8 @@ expand_expr (exp, target, tmode, modifier)\n \t\t\t       * BITS_PER_UNIT),\n \t\t\t      GET_MODE_BITSIZE (mode)),\n \t\t\t 0, TYPE_MODE (valtype), TREE_OPERAND (exp, 0),\n-\t\t\t VOIDmode, 0, 1, int_size_in_bytes (type), 0);\n+\t\t\t VOIDmode, 0, BITS_PER_UNIT,\n+\t\t\t int_size_in_bytes (type), 0);\n \t  else\n \t    abort ();\n "}]}