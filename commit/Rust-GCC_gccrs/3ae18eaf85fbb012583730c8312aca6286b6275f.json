{"sha": "3ae18eaf85fbb012583730c8312aca6286b6275f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FlMThlYWY4NWZiYjAxMjU4MzczMGM4MzEyYWNhNjI4NmI2Mjc1Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@casey.soma.redhat.com", "date": "2000-06-06T00:12:40Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-06-06T00:12:40Z"}, "message": "search.c (maybe_suppress_debug_info): Don't check CLASSTYPE_INTERFACE_ONLY if CLASSTYPE_INTERFACE_KNOWN isn't set.\n\n        * search.c (maybe_suppress_debug_info): Don't check\n        CLASSTYPE_INTERFACE_ONLY if CLASSTYPE_INTERFACE_KNOWN isn't set.\n\n        * pt.c (mark_decl_instantiated): Do SET_DECL_EXPLICIT_INSTANTIATION\n        here if extern_p.\n\n        Remember instantiation context in deferred instantiations.\n        * cp-tree.h (struct tinst_level): Remove.\n        (TINST_DECL, TINST_LINE, TINST_FILE): New macros.\n        * pt.c (current_tinst_level): Now a tree.\n        (print_template_context, push_tinst_level, pop_tinst_level,\n        tinst_for_decl): Adjust.\n        (reopen_tinst_level): New fn.\n        (init_pt): Register current_tinst_level as a root.\n        (add_pending_template): Put current_tinst_level in TREE_PURPOSE\n        of the pending templates list.\n        (instantiate_pending_templates): Adjust.  Call reopen_tinst_level.\n        * lex.c (extract_interface_info): Adjust.\n        * decl2.c (warn_if_unknown_interface): Adjust.\n\nFrom-SVN: r34415", "tree": {"sha": "c13a7bead4572d9b4e30158249769ecc0ba47404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c13a7bead4572d9b4e30158249769ecc0ba47404"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ae18eaf85fbb012583730c8312aca6286b6275f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ae18eaf85fbb012583730c8312aca6286b6275f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ae18eaf85fbb012583730c8312aca6286b6275f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ae18eaf85fbb012583730c8312aca6286b6275f/comments", "author": null, "committer": null, "parents": [{"sha": "ef0b4ef8d64f6a2ec333acbfc2ae9fcb207d51a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef0b4ef8d64f6a2ec333acbfc2ae9fcb207d51a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef0b4ef8d64f6a2ec333acbfc2ae9fcb207d51a0"}], "stats": {"total": 180, "additions": 120, "deletions": 60}, "files": [{"sha": "949f4c8cf0d4cd64f584db13f0849efdaed52ffe", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae18eaf85fbb012583730c8312aca6286b6275f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae18eaf85fbb012583730c8312aca6286b6275f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3ae18eaf85fbb012583730c8312aca6286b6275f", "patch": "@@ -1,3 +1,25 @@\n+2000-06-05  Jason Merrill  <jason@casey.soma.redhat.com>\n+\n+\t* search.c (maybe_suppress_debug_info): Don't check\n+\tCLASSTYPE_INTERFACE_ONLY if CLASSTYPE_INTERFACE_KNOWN isn't set.\n+\n+\t* pt.c (mark_decl_instantiated): Do SET_DECL_EXPLICIT_INSTANTIATION\n+\there if extern_p.\n+\n+\tRemember instantiation context in deferred instantiations.\n+\t* cp-tree.h (struct tinst_level): Remove.\n+\t(TINST_DECL, TINST_LINE, TINST_FILE): New macros.\n+\t* pt.c (current_tinst_level): Now a tree.\n+\t(print_template_context, push_tinst_level, pop_tinst_level,\n+\ttinst_for_decl): Adjust.\n+\t(reopen_tinst_level): New fn.\n+\t(init_pt): Register current_tinst_level as a root.\n+\t(add_pending_template): Put current_tinst_level in TREE_PURPOSE\n+\tof the pending templates list.\n+\t(instantiate_pending_templates): Adjust.  Call reopen_tinst_level.\n+\t* lex.c (extract_interface_info): Adjust.\n+\t* decl2.c (warn_if_unknown_interface): Adjust.\n+\n 2000-06-05  Mark Mitchell  <mark@codesourcery.com>\n \n \t* class.c (indirect_primary_base_p): New function."}, {"sha": "1b65b6a55a4d1dbd7642e630dd70993f535b3a27", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae18eaf85fbb012583730c8312aca6286b6275f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae18eaf85fbb012583730c8312aca6286b6275f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3ae18eaf85fbb012583730c8312aca6286b6275f", "patch": "@@ -3392,15 +3392,12 @@ typedef enum unification_kind_t {\n   DEDUCE_EXACT\n } unification_kind_t;\n \n-/* The template currently being instantiated, and where the instantiation\n-   was triggered.  */\n-struct tinst_level\n-{\n-  tree decl;\n-  int line;\n-  const char *file;\n-  struct tinst_level *next;\n-};\n+/* Macros for operating on a template instantation level node, represented\n+   by an EXPR_WITH_FILE_LOCATION.  */\n+\n+#define TINST_DECL(NODE) EXPR_WFL_NODE (NODE)\n+#define TINST_LINE(NODE) EXPR_WFL_LINENO (NODE)\n+#define TINST_FILE(NODE) EXPR_WFL_FILENAME (NODE)\n \n extern void maybe_print_template_context\tPARAMS ((void));\n \n@@ -4349,7 +4346,7 @@ extern tree instantiate_class_template\t\tPARAMS ((tree));\n extern tree instantiate_template\t\tPARAMS ((tree, tree));\n extern void overload_template_name\t\tPARAMS ((tree));\n extern int fn_type_unification                  PARAMS ((tree, tree, tree, tree, tree, unification_kind_t));\n-struct tinst_level *tinst_for_decl\t\tPARAMS ((void));\n+extern tree tinst_for_decl\t\t\tPARAMS ((void));\n extern void mark_decl_instantiated\t\tPARAMS ((tree, int));\n extern int more_specialized\t\t\tPARAMS ((tree, tree, tree));\n extern void mark_class_instantiated\t\tPARAMS ((tree, int));"}, {"sha": "f132478be5f96393193cf8738a31f6bfdfc9897e", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae18eaf85fbb012583730c8312aca6286b6275f/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae18eaf85fbb012583730c8312aca6286b6275f/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=3ae18eaf85fbb012583730c8312aca6286b6275f", "patch": "@@ -911,14 +911,14 @@ warn_if_unknown_interface (decl)\n \n   if (flag_alt_external_templates)\n     {\n-      struct tinst_level *til = tinst_for_decl ();\n+      tree til = tinst_for_decl ();\n       int sl = lineno;\n       const char *sf = input_filename;\n \n       if (til)\n \t{\n-\t  lineno = til->line;\n-\t  input_filename = til->file;\n+\t  lineno = TINST_LINE (til);\n+\t  input_filename = TINST_FILE (til);\n \t}\n       cp_warning (\"template `%#D' instantiated in file without #pragma interface\",\n \t\t  decl);"}, {"sha": "839f34f9661eaaf781cd2300c65c7d200d681f1e", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae18eaf85fbb012583730c8312aca6286b6275f/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae18eaf85fbb012583730c8312aca6286b6275f/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=3ae18eaf85fbb012583730c8312aca6286b6275f", "patch": "@@ -933,10 +933,10 @@ extract_interface_info ()\n \n   if (flag_alt_external_templates)\n     {\n-      struct tinst_level *til = tinst_for_decl ();\n+      tree til = tinst_for_decl ();\n   \n       if (til)\n-\tfileinfo = get_time_identifier (til->file);\n+\tfileinfo = get_time_identifier (TINST_FILE (til));\n     }\n   if (!fileinfo)\n     fileinfo = get_time_identifier (input_filename);"}, {"sha": "9908c541b37cf91b2d943f4a82bce31094b65209", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 80, "deletions": 41, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae18eaf85fbb012583730c8312aca6286b6275f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae18eaf85fbb012583730c8312aca6286b6275f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3ae18eaf85fbb012583730c8312aca6286b6275f", "patch": "@@ -71,6 +71,8 @@ static tree saved_trees;\n static varray_type inline_parm_levels;\n static size_t inline_parm_levels_used;\n \n+tree current_tinst_level;\n+\n /* A map from local variable declarations in the body of the template\n    presently being instantiated to the corresponding instantiated\n    local variables.  */\n@@ -98,6 +100,7 @@ static int try_one_overload PARAMS ((tree, tree, tree, tree, tree,\n static int unify PARAMS ((tree, tree, tree, tree, int));\n static void add_pending_template PARAMS ((tree));\n static int push_tinst_level PARAMS ((tree));\n+static void reopen_tinst_level PARAMS ((tree));\n static tree classtype_mangled_name PARAMS ((tree));\n static char *mangle_class_name_for_template PARAMS ((char *, tree, tree));\n static tree tsubst_expr_values PARAMS ((tree, tree));\n@@ -172,6 +175,7 @@ init_pt ()\n   ggc_add_tree_root (&pending_templates, 1);\n   ggc_add_tree_root (&maybe_templates, 1);\n   ggc_add_tree_root (&saved_trees, 1);\n+  ggc_add_tree_root (&current_tinst_level, 1);\n }\n \n /* Do any processing required when DECL (a member template declaration\n@@ -3619,14 +3623,28 @@ static void\n add_pending_template (d)\n      tree d;\n {\n-  tree ti = (TYPE_P (d)) ? CLASSTYPE_TEMPLATE_INFO (d) : DECL_TEMPLATE_INFO (d);\n+  tree ti = (TYPE_P (d)\n+\t     ? CLASSTYPE_TEMPLATE_INFO (d)\n+\t     : DECL_TEMPLATE_INFO (d));\n+  int level;\n \n   if (TI_PENDING_TEMPLATE_FLAG (ti))\n     return;\n \n-  *template_tail = tree_cons (build_srcloc_here (), d, NULL_TREE);\n+  /* We are called both from instantiate_decl, where we've already had a\n+     tinst_level pushed, and instantiate_template, where we haven't.\n+     Compensate.  */\n+  level = !(current_tinst_level && TINST_DECL (current_tinst_level) == d);\n+\n+  if (level)\n+    push_tinst_level (d);\n+\n+  *template_tail = tree_cons (current_tinst_level, d, NULL_TREE);\n   template_tail = &TREE_CHAIN (*template_tail);\n   TI_PENDING_TEMPLATE_FLAG (ti) = 1;\n+\n+  if (level)\n+    pop_tinst_level ();\n }\n \n \n@@ -4268,8 +4286,6 @@ uses_template_parms (t)\n   return for_each_template_parm (t, 0, 0);\n }\n \n-static struct tinst_level *current_tinst_level;\n-static struct tinst_level *free_tinst_level;\n static int tinst_depth;\n extern int max_tinst_depth;\n #ifdef GATHER_STATISTICS\n@@ -4286,38 +4302,40 @@ static void\n print_template_context (err)\n      int err;\n {\n-  struct tinst_level *p = current_tinst_level;\n+  tree p = current_tinst_level;\n   int line = lineno;\n   const char *file = input_filename;\n \n   if (err && p)\n     {\n-      if (current_function_decl != p->decl\n+      if (current_function_decl != TINST_DECL (p)\n \t  && current_function_decl != NULL_TREE)\n \t/* We can get here during the processing of some synthesized\n-\t   method.  Then, p->decl will be the function that's causing\n+\t   method.  Then, TINST_DECL (p) will be the function that's causing\n \t   the synthesis.  */\n \t;\n       else\n \t{\n-\t  if (current_function_decl == p->decl)\n+\t  if (current_function_decl == TINST_DECL (p))\n \t    /* Avoid redundancy with the the \"In function\" line.  */;\n \t  else \n \t    fprintf (stderr, \"%s: In instantiation of `%s':\\n\",\n-\t\t     file, decl_as_string (p->decl, TS_DECL_TYPE | TS_FUNC_NORETURN));\n+\t\t     file, decl_as_string (TINST_DECL (p),\n+\t\t\t\t\t   TS_DECL_TYPE | TS_FUNC_NORETURN));\n \t  \n-\t  line = p->line;\n-\t  file = p->file;\n-\t  p = p->next;\n+\t  line = TINST_LINE (p);\n+\t  file = TINST_FILE (p);\n+\t  p = TREE_CHAIN (p);\n \t}\n     }\n \n-  for (; p; p = p->next)\n+  for (; p; p = TREE_CHAIN (p))\n     {\n       fprintf (stderr, \"%s:%d:   instantiated from `%s'\\n\", file, line,\n-\t       decl_as_string (p->decl, TS_DECL_TYPE | TS_FUNC_NORETURN));\n-      line = p->line;\n-      file = p->file;\n+\t       decl_as_string (TINST_DECL (p),\n+\t\t\t       TS_DECL_TYPE | TS_FUNC_NORETURN));\n+      line = TINST_LINE (p);\n+      file = TINST_FILE (p);\n     }\n   fprintf (stderr, \"%s:%d:   instantiated from here\\n\", file, line);\n }\n@@ -4335,11 +4353,14 @@ maybe_print_template_context ()\n   print_template_context (1);\n }\n \n+/* We're starting to instantiate D; record the template instantiation context\n+   for diagnostics and to restore it later.  */\n+\n static int\n push_tinst_level (d)\n      tree d;\n {\n-  struct tinst_level *new;\n+  tree new;\n \n   if (tinst_depth >= max_tinst_depth)\n     {\n@@ -4358,18 +4379,8 @@ push_tinst_level (d)\n       return 0;\n     }\n \n-  if (free_tinst_level)\n-    {\n-      new = free_tinst_level;\n-      free_tinst_level = new->next;\n-    }\n-  else\n-    new = (struct tinst_level *) xmalloc (sizeof (struct tinst_level));\n-\n-  new->decl = d;\n-  new->line = lineno;\n-  new->file = input_filename;\n-  new->next = current_tinst_level;\n+  new = build_expr_wfl (d, input_filename, lineno, 0);\n+  TREE_CHAIN (new) = current_tinst_level;\n   current_tinst_level = new;\n \n   ++tinst_depth;\n@@ -4382,31 +4393,53 @@ push_tinst_level (d)\n   return 1;\n }\n \n+/* We're done instantiating this template; return to the instantiation\n+   context.  */\n+\n void\n pop_tinst_level ()\n {\n-  struct tinst_level *old = current_tinst_level;\n+  tree old = current_tinst_level;\n \n   /* Restore the filename and line number stashed away when we started\n      this instantiation.  */\n-  lineno = old->line;\n-  input_filename = old->file;\n+  lineno = TINST_LINE (old);\n+  input_filename = TINST_FILE (old);\n   extract_interface_info ();\n   \n-  current_tinst_level = old->next;\n-  old->next = free_tinst_level;\n-  free_tinst_level = old;\n+  current_tinst_level = TREE_CHAIN (old);\n   --tinst_depth;\n   ++tinst_level_tick;\n }\n \n-struct tinst_level *\n+/* We're instantiating a deferred template; restore the template\n+   instantiation context in which the instantiation was requested, which\n+   is one step out from LEVEL.  */\n+\n+static void\n+reopen_tinst_level (level)\n+     tree level;\n+{\n+  tree t;\n+\n+  tinst_depth = 0;\n+  for (t = level; t; t = TREE_CHAIN (t))\n+    ++tinst_depth;\n+\n+  current_tinst_level = level;\n+  pop_tinst_level ();\n+}\n+\n+/* Return the outermost template instantiation context, for use with\n+   -falt-external-templates.  */\n+\n+tree\n tinst_for_decl ()\n {\n-  struct tinst_level *p = current_tinst_level;\n+  tree p = current_tinst_level;\n \n   if (p)\n-    for (; p->next ; p = p->next )\n+    for (; TREE_CHAIN (p) ; p = TREE_CHAIN (p))\n       ;\n   return p;\n }\n@@ -8761,6 +8794,14 @@ mark_decl_instantiated (result, extern_p)\n        set correctly by tsubst.  */\n     TREE_PUBLIC (result) = 1;\n \n+  /* We used to set this unconditionally; we moved that to\n+     do_decl_instantiation so it wouldn't get set on members of\n+     explicit class template instantiations.  But we still need to set\n+     it here for the 'extern template' case in order to suppress\n+     implicit instantiations.  */\n+  if (extern_p)\n+    SET_DECL_EXPLICIT_INSTANTIATION (result);\n+\n   if (! extern_p)\n     {\n       DECL_INTERFACE_KNOWN (result) = 1;\n@@ -9753,11 +9794,9 @@ instantiate_pending_templates ()\n       t = &pending_templates;\n       while (*t)\n \t{\n-\t  tree srcloc = TREE_PURPOSE (*t);\n \t  tree instantiation = TREE_VALUE (*t);\n \n-\t  input_filename = SRCLOC_FILE (srcloc);\n-\t  lineno = SRCLOC_LINE (srcloc);\n+\t  reopen_tinst_level (TREE_PURPOSE (*t));\n \n \t  if (TYPE_P (instantiation))\n \t    {"}, {"sha": "efb8e6a53d9d8d04938dd50a1d965d7bbec45302", "filename": "gcc/cp/search.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae18eaf85fbb012583730c8312aca6286b6275f/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae18eaf85fbb012583730c8312aca6286b6275f/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=3ae18eaf85fbb012583730c8312aca6286b6275f", "patch": "@@ -2945,10 +2945,12 @@ maybe_suppress_debug_info (t)\n \n   /* If we already know how we're handling this class, handle debug info\n      the same way.  */\n-  if (CLASSTYPE_INTERFACE_ONLY (t))\n-    TYPE_DECL_SUPPRESS_DEBUG (TYPE_MAIN_DECL (t)) = 1;\n-  else if (CLASSTYPE_INTERFACE_KNOWN (t))\n-    /* Don't set it.  */;\n+  if (CLASSTYPE_INTERFACE_KNOWN (t))\n+    {\n+      if (CLASSTYPE_INTERFACE_ONLY (t))\n+\tTYPE_DECL_SUPPRESS_DEBUG (TYPE_MAIN_DECL (t)) = 1;\n+      /* else don't set it.  */\n+    }\n   /* If the class has a vtable, write out the debug info along with\n      the vtable.  */\n   else if (TYPE_CONTAINS_VPTR_P (t))"}]}