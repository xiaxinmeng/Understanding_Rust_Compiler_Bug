{"sha": "1b3254e4bbe82245421a55324bc8fe34a99c6e3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIzMjU0ZTRiYmU4MjI0NTQyMWE1NTMyNGJjOGZlMzRhOTljNmUzYw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-01-17T22:02:42Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-01-17T22:02:42Z"}, "message": "-mstack-protector-guard and friends (PR78875)\n\nCurrently, on PowerPC, code compiled with -fstack-protector will load\nthe canary from -0x7010(13) (for -m64) or from -0x7008(2) (for -m32)\nif GCC was compiled against GNU libc 2.4 or newer or some other libc\nthat supports -fstack-protector, and from the global variable\n__stack_chk_guard otherwise.\n\nThis does not work well for Linux and other OS kernels and similar.\nFor such non-standard applications, this patch creates a few new\ncommand-line options.  The relevant new use cases are:\n\n-mstack-protector-guard=global\nUse the __stack_chk_guard variable, no matter how this GCC was\nconfigured.\n\n-mstack-protector-guard=tls\nUse the canary from TLS.  This will error out if this GCC was built\nwith a C library that does not support it.\n\n-mstack-protector-guard=tls -mstack-protector-register=<reg>\n-mstack-protector-offset=<offset>\nLoad the canary from offset <off> from base register <reg>.\n\n\n\tPR target/78875\n\t* config/rs6000/rs6000-opts.h (stack_protector_guard): New enum.\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Handle\n\tthe new options.\n\t* config/rs6000/rs6000.md (stack_protect_set): Handle the new more\n\tflexible settings.\n\t(stack_protect_test): Ditto.\n\t* config/rs6000/rs6000.opt (mstack-protector-guard=,\n\tmstack-protector-guard-reg=, mstack-protector-guard-offset=): New\n\toptions.\n\t* doc/invoke.texi (Option Summary) [RS/6000 and PowerPC Options]:\n\tAdd -mstack-protector-guard=, -mstack-protector-guard-reg=, and\n\t-mstack-protector-guard-offset=.\n\t(RS/6000 and PowerPC Options): Ditto.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/ssp-1.c: New testcase.\n\t* gcc.target/powerpc/ssp-2.c: New testcase.\n\nFrom-SVN: r244556", "tree": {"sha": "d62c5d81ea1e4aeabc83bba0c79cda21639f4836", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d62c5d81ea1e4aeabc83bba0c79cda21639f4836"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b3254e4bbe82245421a55324bc8fe34a99c6e3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3254e4bbe82245421a55324bc8fe34a99c6e3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b3254e4bbe82245421a55324bc8fe34a99c6e3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3254e4bbe82245421a55324bc8fe34a99c6e3c/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ed04e93c2c9a8266be6a1cb6b11858add8aad70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ed04e93c2c9a8266be6a1cb6b11858add8aad70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ed04e93c2c9a8266be6a1cb6b11858add8aad70"}], "stats": {"total": 173, "additions": 153, "deletions": 20}, "files": [{"sha": "e2ea014ca28db8246f02c97997b03694d8c94ce8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3254e4bbe82245421a55324bc8fe34a99c6e3c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3254e4bbe82245421a55324bc8fe34a99c6e3c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b3254e4bbe82245421a55324bc8fe34a99c6e3c", "patch": "@@ -1,3 +1,20 @@\n+2017-01-17  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/78875\n+\t* config/rs6000/rs6000-opts.h (stack_protector_guard): New enum.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Handle\n+\tthe new options.\n+\t* config/rs6000/rs6000.md (stack_protect_set): Handle the new more\n+\tflexible settings.\n+\t(stack_protect_test): Ditto.\n+\t* config/rs6000/rs6000.opt (mstack-protector-guard=,\n+\tmstack-protector-guard-reg=, mstack-protector-guard-offset=): New\n+\toptions.\n+\t* doc/invoke.texi (Option Summary) [RS/6000 and PowerPC Options]:\n+\tAdd -mstack-protector-guard=, -mstack-protector-guard-reg=, and\n+\t-mstack-protector-guard-offset=.\n+\t(RS/6000 and PowerPC Options): Ditto.\n+\n 2017-01-17  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.h (MASK_CLASS_P): New define."}, {"sha": "086217a37f741086221e76e005d309ee64b085f4", "filename": "gcc/config/rs6000/rs6000-opts.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3254e4bbe82245421a55324bc8fe34a99c6e3c/gcc%2Fconfig%2Frs6000%2Frs6000-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3254e4bbe82245421a55324bc8fe34a99c6e3c/gcc%2Fconfig%2Frs6000%2Frs6000-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-opts.h?ref=1b3254e4bbe82245421a55324bc8fe34a99c6e3c", "patch": "@@ -154,6 +154,12 @@ enum rs6000_vector {\n   VECTOR_OTHER\t\t\t/* Some other vector unit */\n };\n \n+/* Where to get the canary for the stack protector.  */\n+enum stack_protector_guard {\n+  SSP_TLS,\t\t\t/* per-thread canary in TLS block */\n+  SSP_GLOBAL\t\t\t/* global canary */\n+};\n+\n /* No enumeration is defined to index the -mcpu= values (entries in\n    processor_target_table), with the type int being used instead, but\n    we need to distinguish the special \"native\" value.  */"}, {"sha": "72ef8e1e4336408acd12755c385cb0330a4f902f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3254e4bbe82245421a55324bc8fe34a99c6e3c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3254e4bbe82245421a55324bc8fe34a99c6e3c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=1b3254e4bbe82245421a55324bc8fe34a99c6e3c", "patch": "@@ -4942,6 +4942,54 @@ rs6000_option_override_internal (bool global_init_p)\n \t\t\t\t    atoi (rs6000_sched_insert_nops_str));\n     }\n \n+  /* Handle stack protector */\n+  if (!global_options_set.x_rs6000_stack_protector_guard)\n+#ifdef TARGET_THREAD_SSP_OFFSET\n+    rs6000_stack_protector_guard = SSP_TLS;\n+#else\n+    rs6000_stack_protector_guard = SSP_GLOBAL;\n+#endif\n+\n+#ifdef TARGET_THREAD_SSP_OFFSET\n+  rs6000_stack_protector_guard_offset = TARGET_THREAD_SSP_OFFSET;\n+  rs6000_stack_protector_guard_reg = TARGET_64BIT ? 13 : 2;\n+#endif\n+\n+  if (global_options_set.x_rs6000_stack_protector_guard_offset_str)\n+    {\n+      char *endp;\n+      const char *str = rs6000_stack_protector_guard_offset_str;\n+\n+      errno = 0;\n+      long offset = strtol (str, &endp, 0);\n+      if (!*str || *endp || errno)\n+\terror (\"%qs is not a valid number \"\n+\t       \"in -mstack-protector-guard-offset=\", str);\n+\n+      if (!IN_RANGE (offset, -0x8000, 0x7fff)\n+\t  || (TARGET_64BIT && (offset & 3)))\n+\terror (\"%qs is not a valid offset \"\n+\t       \"in -mstack-protector-guard-offset=\", str);\n+\n+      rs6000_stack_protector_guard_offset = offset;\n+    }\n+\n+  if (global_options_set.x_rs6000_stack_protector_guard_reg_str)\n+    {\n+      const char *str = rs6000_stack_protector_guard_reg_str;\n+      int reg = decode_reg_name (str);\n+\n+      if (!IN_RANGE (reg, 1, 31))\n+\terror (\"%qs is not a valid base register \"\n+\t       \"in -mstack-protector-guard-reg=\", str);\n+\n+      rs6000_stack_protector_guard_reg = reg;\n+    }\n+\n+  if (rs6000_stack_protector_guard == SSP_TLS\n+      && !IN_RANGE (rs6000_stack_protector_guard_reg, 1, 31))\n+    error (\"-mstack-protector-guard=tls needs a valid base register\");\n+\n   if (global_init_p)\n     {\n #ifdef TARGET_REGNAMES"}, {"sha": "ff602fa2f933b196c1fc5a981f7310d4a907a222", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3254e4bbe82245421a55324bc8fe34a99c6e3c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3254e4bbe82245421a55324bc8fe34a99c6e3c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=1b3254e4bbe82245421a55324bc8fe34a99c6e3c", "patch": "@@ -11681,19 +11681,23 @@\n \n \n (define_expand \"stack_protect_set\"\n-  [(match_operand 0 \"memory_operand\" \"\")\n-   (match_operand 1 \"memory_operand\" \"\")]\n+  [(match_operand 0 \"memory_operand\")\n+   (match_operand 1 \"memory_operand\")]\n   \"\"\n {\n-#ifdef TARGET_THREAD_SSP_OFFSET\n-  rtx tlsreg = gen_rtx_REG (Pmode, TARGET_64BIT ? 13 : 2);\n-  rtx addr = gen_rtx_PLUS (Pmode, tlsreg, GEN_INT (TARGET_THREAD_SSP_OFFSET));\n-  operands[1] = gen_rtx_MEM (Pmode, addr);\n-#endif\n+  if (rs6000_stack_protector_guard == SSP_TLS)\n+    {\n+      rtx reg = gen_rtx_REG (Pmode, rs6000_stack_protector_guard_reg);\n+      rtx offset = GEN_INT (rs6000_stack_protector_guard_offset);\n+      rtx addr = gen_rtx_PLUS (Pmode, reg, offset);\n+      operands[1] = gen_rtx_MEM (Pmode, addr);\n+    }\n+\n   if (TARGET_64BIT)\n     emit_insn (gen_stack_protect_setdi (operands[0], operands[1]));\n   else\n     emit_insn (gen_stack_protect_setsi (operands[0], operands[1]));\n+\n   DONE;\n })\n \n@@ -11716,21 +11720,26 @@\n    (set_attr \"length\" \"12\")])\n \n (define_expand \"stack_protect_test\"\n-  [(match_operand 0 \"memory_operand\" \"\")\n-   (match_operand 1 \"memory_operand\" \"\")\n-   (match_operand 2 \"\" \"\")]\n+  [(match_operand 0 \"memory_operand\")\n+   (match_operand 1 \"memory_operand\")\n+   (match_operand 2 \"\")]\n   \"\"\n {\n-  rtx test, op0, op1;\n-#ifdef TARGET_THREAD_SSP_OFFSET\n-  rtx tlsreg = gen_rtx_REG (Pmode, TARGET_64BIT ? 13 : 2);\n-  rtx addr = gen_rtx_PLUS (Pmode, tlsreg, GEN_INT (TARGET_THREAD_SSP_OFFSET));\n-  operands[1] = gen_rtx_MEM (Pmode, addr);\n-#endif\n-  op0 = operands[0];\n-  op1 = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, operands[1]), UNSPEC_SP_TEST);\n-  test = gen_rtx_EQ (VOIDmode, op0, op1);\n-  emit_jump_insn (gen_cbranchsi4 (test, op0, op1, operands[2]));\n+  rtx guard = operands[1];\n+\n+  if (rs6000_stack_protector_guard == SSP_TLS)\n+    {\n+      rtx reg = gen_rtx_REG (Pmode, rs6000_stack_protector_guard_reg);\n+      rtx offset = GEN_INT (rs6000_stack_protector_guard_offset);\n+      rtx addr = gen_rtx_PLUS (Pmode, reg, offset);\n+      guard = gen_rtx_MEM (Pmode, addr);\n+    }\n+\n+  operands[1] = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, guard), UNSPEC_SP_TEST);\n+  rtx test = gen_rtx_EQ (VOIDmode, operands[0], operands[1]);\n+  rtx jump = gen_cbranchsi4 (test, operands[0], operands[1], operands[2]);\n+  emit_jump_insn (jump);\n+\n   DONE;\n })\n "}, {"sha": "803753e627fd7e3939af60acb801013fac3dfb5e", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3254e4bbe82245421a55324bc8fe34a99c6e3c/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3254e4bbe82245421a55324bc8fe34a99c6e3c/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=1b3254e4bbe82245421a55324bc8fe34a99c6e3c", "patch": "@@ -672,3 +672,31 @@ Enable default conversions between __float128 & long double.\n mvsx-small-integer\n Target Report Mask(VSX_SMALL_INTEGER) Var(rs6000_isa_flags)\n Enable small integers to be in VSX registers.\n+\n+mstack-protector-guard=\n+Target RejectNegative Joined Enum(stack_protector_guard) Var(rs6000_stack_protector_guard) Init(SSP_TLS)\n+Use given stack-protector guard.\n+\n+Enum\n+Name(stack_protector_guard) Type(enum stack_protector_guard)\n+Valid arguments to -mstack-protector-guard=:\n+\n+EnumValue\n+Enum(stack_protector_guard) String(tls) Value(SSP_TLS)\n+\n+EnumValue\n+Enum(stack_protector_guard) String(global) Value(SSP_GLOBAL)\n+\n+mstack-protector-guard-reg=\n+Target RejectNegative Joined Var(rs6000_stack_protector_guard_reg_str)\n+Use the given base register for addressing the stack-protector guard.\n+\n+TargetVariable\n+int rs6000_stack_protector_guard_reg = 0\n+\n+mstack-protector-guard-offset=\n+Target RejectNegative Joined Integer Var(rs6000_stack_protector_guard_offset_str)\n+Use the given offset for addressing the stack-protector guard.\n+\n+TargetVariable\n+long rs6000_stack_protector_guard_offset = 0"}, {"sha": "cac3d8bc65e98e21ee92cddf9819f04e0c066d6d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3254e4bbe82245421a55324bc8fe34a99c6e3c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3254e4bbe82245421a55324bc8fe34a99c6e3c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1b3254e4bbe82245421a55324bc8fe34a99c6e3c", "patch": "@@ -1041,6 +1041,8 @@ See RS/6000 and PowerPC Options.\n -mupper-regs  -mno-upper-regs @gol\n -mfloat128  -mno-float128  -mfloat128-hardware  -mno-float128-hardware @gol\n -mgnu-attribute  -mno-gnu-attribute @gol\n+-mstack-protector-guard=@var{guard} -mstack-protector-guard-reg=@var{reg} @gol\n+-mstack-protector-guard-offset=@var{offset} @gol\n -mlra  -mno-lra}\n \n @emph{RX Options}\n@@ -22202,6 +22204,23 @@ that is compatible with functions compiled with older versions of\n GCC.\n \n The @option{-mno-compat-align-parm} option is the default.\n+\n+@item -mstack-protector-guard=@var{guard}\n+@itemx -mstack-protector-guard-reg=@var{reg}\n+@itemx -mstack-protector-guard-offset=@var{offset}\n+@opindex mstack-protector-guard\n+@opindex mstack-protector-guard-reg\n+@opindex mstack-protector-guard-offset\n+Generate stack protection code using canary at @var{guard}.  Supported\n+locations are @samp{global} for global canary or @samp{tls} for per-thread\n+canary in the TLS block (the default with GNU libc version 2.4 or later).\n+\n+With the latter choice the options\n+@option{-mstack-protector-guard-reg=@var{reg}} and\n+@option{-mstack-protector-guard-offset=@var{offset}} furthermore specify\n+which register to use as base register for reading the canary, and from what\n+offset from that base register. The default for those is as specified in the\n+relevant ABI.\n @end table\n \n @node RX Options"}, {"sha": "ea74ebd2e0321a8d5e916484e0cfe61748f6f77e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3254e4bbe82245421a55324bc8fe34a99c6e3c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3254e4bbe82245421a55324bc8fe34a99c6e3c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1b3254e4bbe82245421a55324bc8fe34a99c6e3c", "patch": "@@ -1,3 +1,9 @@\n+2017-01-17  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/78875\n+\t* gcc.target/powerpc/ssp-1.c: New testcase.\n+\t* gcc.target/powerpc/ssp-2.c: New testcase.\n+\n 2017-01-17  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* gcc.target/aarch64/eh_return.c: New test."}]}