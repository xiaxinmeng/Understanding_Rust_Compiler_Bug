{"sha": "c5e04c908b580a3e1174e289358904382b8f3ad4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVlMDRjOTA4YjU4MGEzZTExNzRlMjg5MzU4OTA0MzgyYjhmM2FkNA==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@verizon.net", "date": "2005-09-14T20:25:56Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2005-09-14T20:25:56Z"}, "message": "PR fortran/21875 Internal Unit Array I/O, NIST\n\n2005-09-14  Jerry DeLisle  <jvdelisle@verizon.net>\n\n\tPR fortran/21875 Internal Unit Array I/O, NIST\n\t* gfortran.dg/arrayio_1.f90: New test.\n\t* gfortran.dg/arrayio_1.f90: New test.\n\t* gfortran.dg/arrayio_1.f90: New test.\n\t* gfortran.dg/arrayio_1.f90: New test.\n\t* gfortran.dg/arrayio_1.f90: New test.\n\nFrom-SVN: r104278", "tree": {"sha": "0dc3e23d0ab7e131490e94d0af223eeaf43669ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dc3e23d0ab7e131490e94d0af223eeaf43669ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5e04c908b580a3e1174e289358904382b8f3ad4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5e04c908b580a3e1174e289358904382b8f3ad4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5e04c908b580a3e1174e289358904382b8f3ad4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5e04c908b580a3e1174e289358904382b8f3ad4/comments", "author": null, "committer": null, "parents": [{"sha": "109b0ac2a8dac47845898079cf7823937fdaff9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/109b0ac2a8dac47845898079cf7823937fdaff9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/109b0ac2a8dac47845898079cf7823937fdaff9d"}], "stats": {"total": 119, "additions": 119, "deletions": 0}, "files": [{"sha": "94ae3be0914225c6d7343a9575b816b384d4f3c0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e04c908b580a3e1174e289358904382b8f3ad4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e04c908b580a3e1174e289358904382b8f3ad4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c5e04c908b580a3e1174e289358904382b8f3ad4", "patch": "@@ -1,3 +1,12 @@\n+2005-09-14  Jerry DeLisle  <jvdelisle@verizon.net>\n+\n+\tPR fortran/21875 Internal Unit Array I/O, NIST\n+\t* gfortran.dg/arrayio_1.f90: New test.\n+\t* gfortran.dg/arrayio_1.f90: New test.\n+\t* gfortran.dg/arrayio_1.f90: New test.\n+\t* gfortran.dg/arrayio_1.f90: New test.\n+\t* gfortran.dg/arrayio_1.f90: New test.\n+\n 2005-09-14  Uros Bizjak  <uros@kss-loka.si>\n \n \tPR middle-end/22480"}, {"sha": "1941b45c23293e803bdc1204f98cf8af340e4277", "filename": "gcc/testsuite/gfortran.dg/arrayio_1.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e04c908b580a3e1174e289358904382b8f3ad4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e04c908b580a3e1174e289358904382b8f3ad4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_1.f90?ref=c5e04c908b580a3e1174e289358904382b8f3ad4", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do run }\n+! PR 21875 : Test formatted input/output to/from character arrays.\n+      program arrayio_1\n+      implicit none\n+      integer         :: i(6),j,k\n+      character(12)  :: r(12,2) = '0123456789AB'\n+ \n+! Write to and read from a whole character array\n+\n+      i = (/(j,j=1,6)/)\n+      write(r,'(3(2x,i4/)/3(3x,i6/))') i\n+      i = 0\n+      read(r,'(3(2x,i4/)/3(3x,i6/))') i\n+      if (any(i.ne.(/(j,j=1,6)/))) call abort()\n+      do j=1,12\n+\tdo k=1,2\n+\t  if ((j.gt.8.and.k.eq.1).or.(k.eq.2)) then\n+\t    if (r(j,k).ne.'0123456789AB') call abort()\n+\t  end if\n+\tend do\n+      end do\n+\n+ ! Write to a portion of a character array      \n+      r = '0123456789AB'\n+      write(r(3:9,1),'(6(i12/))') i\n+      if (r(2,1).ne.'0123456789AB') call abort()\n+      do j=3,8\n+        if (iachar(trim(adjustl(r(j,1))))-46.ne.j) call abort()\n+      end do\n+      if (r(9,1).ne.'            ') call abort()\n+      end program arrayio_1"}, {"sha": "934f65ccc064153be6bb25de807486e35f3bdb50", "filename": "gcc/testsuite/gfortran.dg/arrayio_2.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e04c908b580a3e1174e289358904382b8f3ad4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e04c908b580a3e1174e289358904382b8f3ad4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_2.f90?ref=c5e04c908b580a3e1174e289358904382b8f3ad4", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\n+! PR 21875 : Test formatted input/output to/from character arrays.\n+! This test ckecks proper positioning and padding with trailing blanks\n+! after write operations\n+     program arrayio_2\n+     implicit none\n+     integer :: i=2\n+     character(len=12), dimension(4,2)  :: r = \"0123456789ab\"\n+     character(len=80)                  :: f\n+\n+     f = '(\"hello\"/\"world\")'\n+\n+     write(r(1:4,i-1), f)\n+\n+     f = '(\"hello\",t1,\"HELLO\",1x,\"!\"/\"world\",tl12,\"WORLD\")'\n+\n+     write(r((i-1):(i+1),i), f)\n+\n+     if ( r(1,1).ne.'hello       ' .or. &\n+\t  r(2,1).ne.'world       ' .or. &\n+\t  r(3,1).ne.'0123456789ab' .or. &\n+\t  r(4,1).ne.'0123456789ab' .or. &\n+\t  r(1,2).ne.'HELLO !     ' .or. &\n+\t  r(2,2).ne.'WORLD       ' .or. &\n+\t  r(3,2).ne.'0123456789ab' .or. &\n+\t  r(4,2).ne.'0123456789ab') call abort()\n+\n+     end program arrayio_2 "}, {"sha": "a3164ac506e9cd1d81c7b1b3dd49d0984a883f3d", "filename": "gcc/testsuite/gfortran.dg/arrayio_3.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e04c908b580a3e1174e289358904382b8f3ad4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e04c908b580a3e1174e289358904382b8f3ad4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_3.f90?ref=c5e04c908b580a3e1174e289358904382b8f3ad4", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do run }\n+! PR 21875 : Test formatted input/output to/from character arrays.\n+! This test deliberately exceeds the record length in a write and\n+! verifies the error message.\n+      program arrayio_3\n+      implicit none\n+      integer        :: i(6),j,ierr\n+      character(12)  :: r(4,2) = '0123456789AB'\n+ \n+! Write using a format string that defines a record greater than \n+! the length of an element in the character array.\n+\n+      i = (/(j,j=1,6)/)\n+      write(r,'(3(2x,i4/)/3(4x,i9/))', iostat=ierr) i\n+      if (ierr.ne.-2) call abort()\n+      end program arrayio_3"}, {"sha": "3b4e53572890b5f8509a102976844b5ae9bd301b", "filename": "gcc/testsuite/gfortran.dg/arrayio_4.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e04c908b580a3e1174e289358904382b8f3ad4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e04c908b580a3e1174e289358904382b8f3ad4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_4.f90?ref=c5e04c908b580a3e1174e289358904382b8f3ad4", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do run }\n+! PR 21875 : Test formatted input/output to/from character arrays.\n+! This test checks the error checking for non-contiguous character\n+! arrays which are not allowed by standard.  Error 13 is\n+! ERROR_ARRAY_STRIDE in libgfortran.h\n+program arrayio_4\n+  implicit none\n+  integer        :: ierr\n+  character(12)  :: r(2,3,4) = '0123456789AB'\n+   \n+  write(r(::2,:,::1),'(i5)', iostat=ierr) 1,2,3,4,5\n+  if (ierr.ne.13) call abort()\n+\n+  write(r(:,:,::2),'(i5)', iostat=ierr) 1,2,3,4,5\n+  if (ierr.ne.13) call abort()\n+\n+  write(r(::1,::2,::1),'(i5)', iostat=ierr) 1,2,3,4,5\n+  if (ierr.ne.13) call abort()\n+\n+  write(r(::1,::1,::1),'(i5)', iostat=ierr) 1,2,3,4,5\n+  if (ierr.ne.0) call abort()\n+end program arrayio_4\n+"}, {"sha": "edaa915bb7689bf24f579ca08b6bab53bc4851d2", "filename": "gcc/testsuite/gfortran.dg/arrayio_5.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e04c908b580a3e1174e289358904382b8f3ad4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e04c908b580a3e1174e289358904382b8f3ad4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_5.f90?ref=c5e04c908b580a3e1174e289358904382b8f3ad4", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do run }\n+! PR 21875 : Test formatted input/output to/from character arrays.\n+! This test checks the error checking for end of file condition.\n+program arrayio_5\n+  implicit none\n+  integer        :: i,ierr\n+  character(12)  :: r(10) = '0123456789AB'\n+\n+  write(r,'(i12)',iostat=ierr) 1,2,3,4,5,6,7,8,9,10,11\n+  if (ierr.ne.-1) call abort()\n+ end program arrayio_5\n+"}]}