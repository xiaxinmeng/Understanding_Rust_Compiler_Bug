{"sha": "7e9c5bb0fd22fb4573d270de241d9b56de17f7f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U5YzViYjBmZDIyZmI0NTczZDI3MGRlMjQxZDliNTZkZTE3ZjdmNQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-05-12T16:14:52Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-05-12T16:14:52Z"}, "message": "gcc: Enable Intel CET on Intel CET enabled host for jit\n\nSince on Intel CET enabled host, dlopen in Intel CET enabled applications\nfails on shared libraries which aren't Intel CET enabled, compile with\n-fcf-protection on Intel CET enabled host when jit is enabled to enable\nIntel CET on libgccjit.\n\n\t* Makefile.in (CET_HOST_FLAGS): New.\n\t(COMPILER): Add $(CET_HOST_FLAGS).\n\t* configure.ac: Add GCC_CET_HOST_FLAGS(CET_HOST_FLAGS) and\n\tAC_SUBST(CET_HOST_FLAGS).  Clear CET_HOST_FLAGS if jit isn't\n\tenabled.\n\t* aclocal.m4: Regenerated.\n\t* configure: Likewise.", "tree": {"sha": "41e2ea871bc671a84d0f8309b86aa229bdf01d59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41e2ea871bc671a84d0f8309b86aa229bdf01d59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e9c5bb0fd22fb4573d270de241d9b56de17f7f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e9c5bb0fd22fb4573d270de241d9b56de17f7f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e9c5bb0fd22fb4573d270de241d9b56de17f7f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e9c5bb0fd22fb4573d270de241d9b56de17f7f5/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af3bef0ea257f53e79319bc25086b8293bb27323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af3bef0ea257f53e79319bc25086b8293bb27323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af3bef0ea257f53e79319bc25086b8293bb27323"}], "stats": {"total": 209, "additions": 207, "deletions": 2}, "files": [{"sha": "ba8e731b35d4975a5fea8666663e61c5e2a7b0cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e9c5bb0fd22fb4573d270de241d9b56de17f7f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e9c5bb0fd22fb4573d270de241d9b56de17f7f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e9c5bb0fd22fb4573d270de241d9b56de17f7f5", "patch": "@@ -1,3 +1,13 @@\n+2020-05-12  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* Makefile.in (CET_HOST_FLAGS): New.\n+\t(COMPILER): Add $(CET_HOST_FLAGS).\n+\t* configure.ac: Add GCC_CET_HOST_FLAGS(CET_HOST_FLAGS) and\n+\tAC_SUBST(CET_HOST_FLAGS).  Clear CET_HOST_FLAGS if jit isn't\n+\tenabled.\n+\t* aclocal.m4: Regenerated.\n+\t* configure: Likewise.\n+\n 2020-05-12  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/95046"}, {"sha": "b49d6b0d31ffcfdce94abe3e78d575b26bb9dffd", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e9c5bb0fd22fb4573d270de241d9b56de17f7f5/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e9c5bb0fd22fb4573d270de241d9b56de17f7f5/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7e9c5bb0fd22fb4573d270de241d9b56de17f7f5", "patch": "@@ -262,6 +262,10 @@ LINKER = $(CC)\n LINKER_FLAGS = $(CFLAGS)\n endif\n \n+# Enable Intel CET on Intel CET enabled host if needed.\n+CET_HOST_FLAGS = @CET_HOST_FLAGS@\n+COMPILER += $(CET_HOST_FLAGS)\n+\n NO_PIE_CFLAGS = @NO_PIE_CFLAGS@\n NO_PIE_FLAG = @NO_PIE_FLAG@\n "}, {"sha": "1737d59d1cb5469c4c68ea4cd71a2cce0252041c", "filename": "gcc/aclocal.m4", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e9c5bb0fd22fb4573d270de241d9b56de17f7f5/gcc%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e9c5bb0fd22fb4573d270de241d9b56de17f7f5/gcc%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Faclocal.m4?ref=7e9c5bb0fd22fb4573d270de241d9b56de17f7f5", "patch": "@@ -18,9 +18,11 @@ m4_include([../ltsugar.m4])\n m4_include([../ltversion.m4])\n m4_include([../lt~obsolete.m4])\n m4_include([../config/acx.m4])\n+m4_include([../config/cet.m4])\n m4_include([../config/codeset.m4])\n m4_include([../config/depstand.m4])\n m4_include([../config/dfp.m4])\n+m4_include([../config/enable.m4])\n m4_include([../config/gcc-plugin.m4])\n m4_include([../config/gettext-sister.m4])\n m4_include([../config/iconv.m4])"}, {"sha": "3156db7821e5ae8e5351dbc0acd84be920da0cdb", "filename": "gcc/configure", "status": "modified", "additions": 180, "deletions": 2, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e9c5bb0fd22fb4573d270de241d9b56de17f7f5/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e9c5bb0fd22fb4573d270de241d9b56de17f7f5/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=7e9c5bb0fd22fb4573d270de241d9b56de17f7f5", "patch": "@@ -631,6 +631,7 @@ ac_includes_default=\"\\\n \n ac_subst_vars='LTLIBOBJS\n LIBOBJS\n+CET_HOST_FLAGS\n NO_PIE_FLAG\n NO_PIE_CFLAGS\n enable_default_pie\n@@ -1017,6 +1018,7 @@ with_linker_hash_style\n with_diagnostics_color\n with_diagnostics_urls\n enable_default_pie\n+enable_cet\n '\n       ac_precious_vars='build_alias\n host_alias\n@@ -1771,6 +1773,7 @@ Optional Features:\n   --disable-libquadmath-support\n                           disable libquadmath support for Fortran\n   --enable-default-pie    enable Position Independent Executable as default\n+  --enable-cet            enable Intel CET in host libraries [default=auto]\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -19015,7 +19018,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19018 \"configure\"\n+#line 19021 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19121,7 +19124,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19124 \"configure\"\n+#line 19127 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -30730,6 +30733,181 @@ if test \"$gcc_cv_no_pie\" = \"yes\"; then\n fi\n \n \n+# Enable Intel CET on Intel CET enabled host if jit is enabled.\n+ # Check whether --enable-cet was given.\n+if test \"${enable_cet+set}\" = set; then :\n+  enableval=$enable_cet;\n+      case \"$enableval\" in\n+       yes|no|auto) ;;\n+       *) as_fn_error $? \"Unknown argument to enable/disable cet\" \"$LINENO\" 5 ;;\n+                          esac\n+\n+else\n+  enable_cet=auto\n+fi\n+\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for CET support\" >&5\n+$as_echo_n \"checking for CET support... \" >&6; }\n+\n+case \"$host\" in\n+  i[34567]86-*-linux* | x86_64-*-linux*)\n+    may_have_cet=yes\n+    save_CFLAGS=\"$CFLAGS\"\n+    CFLAGS=\"$CFLAGS -fcf-protection\"\n+    case \"$enable_cet\" in\n+      auto)\n+\t# Check if target supports multi-byte NOPs\n+\t# and if assembler supports CET insn.\n+\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+\n+#if !defined(__SSE2__)\n+#error target does not support multi-byte NOPs\n+#else\n+asm (\"setssbsy\");\n+#endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  enable_cet=yes\n+else\n+  enable_cet=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\t;;\n+      yes)\n+\t# Check if assembler supports CET.\n+\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+asm (\"setssbsy\");\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+\n+else\n+  as_fn_error $? \"assembler with CET support is required for --enable-cet\" \"$LINENO\" 5\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\t;;\n+    esac\n+    CFLAGS=\"$save_CFLAGS\"\n+    ;;\n+  *)\n+    may_have_cet=no\n+    enable_cet=no\n+    ;;\n+esac\n+\n+save_CFLAGS=\"$CFLAGS\"\n+CFLAGS=\"$CFLAGS -fcf-protection=none\"\n+save_LDFLAGS=\"$LDFLAGS\"\n+LDFLAGS=\"$LDFLAGS -Wl,-z,ibt,-z,shstk\"\n+if test x$may_have_cet = xyes; then\n+  # Check whether -fcf-protection=none -Wl,-z,ibt,-z,shstk work.\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+return 0;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  may_have_cet=yes\n+else\n+  may_have_cet=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+\n+if test x$may_have_cet = xyes; then\n+  if test \"$cross_compiling\" = yes; then :\n+  { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error $? \"cannot run test program while cross compiling\n+See \\`config.log' for more details\" \"$LINENO\" 5; }\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+static void\n+foo (void)\n+{\n+}\n+\n+static void\n+__attribute__ ((noinline, noclone))\n+xxx (void (*f) (void))\n+{\n+  f ();\n+}\n+\n+static void\n+__attribute__ ((noinline, noclone))\n+bar (void)\n+{\n+  xxx (foo);\n+}\n+\n+int\n+main ()\n+{\n+  bar ();\n+  return 0;\n+}\n+\n+_ACEOF\n+if ac_fn_cxx_try_run \"$LINENO\"; then :\n+  have_cet=no\n+else\n+  have_cet=yes\n+fi\n+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n+  conftest.$ac_objext conftest.beam conftest.$ac_ext\n+fi\n+\n+  if test x$enable_cet = xno -a x$have_cet = xyes; then\n+    as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n+  fi\n+fi\n+if test x$enable_cet = xyes; then\n+  CET_HOST_FLAGS=\"-fcf-protection\"\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes\" >&5\n+$as_echo \"yes\" >&6; }\n+else\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n+$as_echo \"no\" >&6; }\n+fi\n+CFLAGS=\"$save_CFLAGS\"\n+LDFLAGS=\"$save_LDFLAGS\"\n+\n+case x$enable_languages in\n+*jit*)\n+  ;;\n+*)\n+  CET_HOST_FLAGS=\n+  ;;\n+esac\n+\n+\n # Check linker supports '-z bndplt'\n ld_bndplt_support=no\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking linker -z bndplt option\" >&5"}, {"sha": "953b464cedfee993c76c6f40fb2431e05cc84b50", "filename": "gcc/configure.ac", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e9c5bb0fd22fb4573d270de241d9b56de17f7f5/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e9c5bb0fd22fb4573d270de241d9b56de17f7f5/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=7e9c5bb0fd22fb4573d270de241d9b56de17f7f5", "patch": "@@ -6846,6 +6846,17 @@ if test \"$gcc_cv_no_pie\" = \"yes\"; then\n fi\n AC_SUBST([NO_PIE_FLAG])\n \n+# Enable Intel CET on Intel CET enabled host if jit is enabled.\n+GCC_CET_HOST_FLAGS(CET_HOST_FLAGS)\n+case x$enable_languages in\n+*jit*)\n+  ;;\n+*)\n+  CET_HOST_FLAGS=\n+  ;;\n+esac\n+AC_SUBST(CET_HOST_FLAGS)\n+\n # Check linker supports '-z bndplt'\n ld_bndplt_support=no\n AC_MSG_CHECKING(linker -z bndplt option)"}]}