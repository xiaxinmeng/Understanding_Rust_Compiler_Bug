{"sha": "fbcedacca60fefc99ffcc94d8711edc12dcc70e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJjZWRhY2NhNjBmZWZjOTlmZmNjOTRkODcxMWVkYzEyZGNjNzBlNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2010-03-17T00:22:56Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2010-03-17T00:22:56Z"}, "message": "re PR libstdc++/43397 (std::function can't forward rvalue reference for pointer to member function)\n\n2010-03-17  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\tPR libstdc++/43397\n\t* include/std/functional (_Mem_fn): Use perfect forwarding.\n\t* testsuite/20_util/function/43397.cc: New.\n\nFrom-SVN: r157504", "tree": {"sha": "d15d75a76303490fe60ec5382bad26617d266c59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d15d75a76303490fe60ec5382bad26617d266c59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbcedacca60fefc99ffcc94d8711edc12dcc70e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbcedacca60fefc99ffcc94d8711edc12dcc70e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbcedacca60fefc99ffcc94d8711edc12dcc70e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbcedacca60fefc99ffcc94d8711edc12dcc70e5/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b193f945692fea59bc970cc9ca21ef75742c808", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b193f945692fea59bc970cc9ca21ef75742c808", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b193f945692fea59bc970cc9ca21ef75742c808"}], "stats": {"total": 136, "additions": 116, "deletions": 20}, "files": [{"sha": "92512f52c55116c51a9a61dd194798f5cc4623bb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbcedacca60fefc99ffcc94d8711edc12dcc70e5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbcedacca60fefc99ffcc94d8711edc12dcc70e5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fbcedacca60fefc99ffcc94d8711edc12dcc70e5", "patch": "@@ -1,3 +1,9 @@\n+2010-03-17  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/43397\n+\t* include/std/functional (_Mem_fn): Use perfect forwarding.\n+\t* testsuite/20_util/function/43397.cc: New.\n+\n 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/43394"}, {"sha": "2ba7243837ae47bb3384bef6586b2601a403e8c7", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbcedacca60fefc99ffcc94d8711edc12dcc70e5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbcedacca60fefc99ffcc94d8711edc12dcc70e5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=fbcedacca60fefc99ffcc94d8711edc12dcc70e5", "patch": "@@ -500,12 +500,12 @@ namespace std\n         _Res\n         _M_call(_Tp& __object, const volatile _Class *, \n                 _ArgTypes... __args) const\n-        { return (__object.*__pmf)(__args...); }\n+        { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }\n \n       template<typename _Tp>\n         _Res\n         _M_call(_Tp& __ptr, const volatile void *, _ArgTypes... __args) const\n-        { return ((*__ptr).*__pmf)(__args...); }\n+        { return ((*__ptr).*__pmf)(std::forward<_ArgTypes>(__args)...); }\n \n     public:\n       typedef _Res result_type;\n@@ -515,18 +515,21 @@ namespace std\n       // Handle objects\n       _Res\n       operator()(_Class& __object, _ArgTypes... __args) const\n-      { return (__object.*__pmf)(__args...); }\n+      { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }\n \n       // Handle pointers\n       _Res\n       operator()(_Class* __object, _ArgTypes... __args) const\n-      { return (__object->*__pmf)(__args...); }\n+      { return (__object->*__pmf)(std::forward<_ArgTypes>(__args)...); }\n \n       // Handle smart pointers, references and pointers to derived\n       template<typename _Tp>\n         _Res\n \toperator()(_Tp& __object, _ArgTypes... __args) const\n-        { return _M_call(__object, &__object, __args...); }\n+        {\n+          return _M_call(__object, &__object,\n+              std::forward<_ArgTypes>(__args)...);\n+        }\n \n     private:\n       _Functor __pmf;\n@@ -544,12 +547,12 @@ namespace std\n         _Res\n         _M_call(_Tp& __object, const volatile _Class *, \n                 _ArgTypes... __args) const\n-        { return (__object.*__pmf)(__args...); }\n+        { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }\n \n       template<typename _Tp>\n         _Res\n         _M_call(_Tp& __ptr, const volatile void *, _ArgTypes... __args) const\n-        { return ((*__ptr).*__pmf)(__args...); }\n+        { return ((*__ptr).*__pmf)(std::forward<_ArgTypes>(__args)...); }\n \n     public:\n       typedef _Res result_type;\n@@ -559,17 +562,20 @@ namespace std\n       // Handle objects\n       _Res\n       operator()(const _Class& __object, _ArgTypes... __args) const\n-      { return (__object.*__pmf)(__args...); }\n+      { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }\n \n       // Handle pointers\n       _Res\n       operator()(const _Class* __object, _ArgTypes... __args) const\n-      { return (__object->*__pmf)(__args...); }\n+      { return (__object->*__pmf)(std::forward<_ArgTypes>(__args)...); }\n \n       // Handle smart pointers, references and pointers to derived\n       template<typename _Tp>\n         _Res operator()(_Tp& __object, _ArgTypes... __args) const\n-        { return _M_call(__object, &__object, __args...); }\n+        {\n+          return _M_call(__object, &__object,\n+              std::forward<_ArgTypes>(__args)...);\n+        }\n \n     private:\n       _Functor __pmf;\n@@ -587,12 +593,12 @@ namespace std\n         _Res\n         _M_call(_Tp& __object, const volatile _Class *, \n                 _ArgTypes... __args) const\n-        { return (__object.*__pmf)(__args...); }\n+        { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }\n \n       template<typename _Tp>\n         _Res\n         _M_call(_Tp& __ptr, const volatile void *, _ArgTypes... __args) const\n-        { return ((*__ptr).*__pmf)(__args...); }\n+        { return ((*__ptr).*__pmf)(std::forward<_ArgTypes>(__args)...); }\n \n     public:\n       typedef _Res result_type;\n@@ -602,18 +608,21 @@ namespace std\n       // Handle objects\n       _Res\n       operator()(volatile _Class& __object, _ArgTypes... __args) const\n-      { return (__object.*__pmf)(__args...); }\n+      { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }\n \n       // Handle pointers\n       _Res\n       operator()(volatile _Class* __object, _ArgTypes... __args) const\n-      { return (__object->*__pmf)(__args...); }\n+      { return (__object->*__pmf)(std::forward<_ArgTypes>(__args)...); }\n \n       // Handle smart pointers, references and pointers to derived\n       template<typename _Tp>\n         _Res\n \toperator()(_Tp& __object, _ArgTypes... __args) const\n-        { return _M_call(__object, &__object, __args...); }\n+        {\n+          return _M_call(__object, &__object,\n+              std::forward<_ArgTypes>(__args)...);\n+        }\n \n     private:\n       _Functor __pmf;\n@@ -631,12 +640,12 @@ namespace std\n         _Res\n         _M_call(_Tp& __object, const volatile _Class *, \n                 _ArgTypes... __args) const\n-        { return (__object.*__pmf)(__args...); }\n+        { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }\n \n       template<typename _Tp>\n         _Res\n         _M_call(_Tp& __ptr, const volatile void *, _ArgTypes... __args) const\n-        { return ((*__ptr).*__pmf)(__args...); }\n+        { return ((*__ptr).*__pmf)(std::forward<_ArgTypes>(__args)...); }\n \n     public:\n       typedef _Res result_type;\n@@ -646,17 +655,20 @@ namespace std\n       // Handle objects\n       _Res \n       operator()(const volatile _Class& __object, _ArgTypes... __args) const\n-      { return (__object.*__pmf)(__args...); }\n+      { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }\n \n       // Handle pointers\n       _Res \n       operator()(const volatile _Class* __object, _ArgTypes... __args) const\n-      { return (__object->*__pmf)(__args...); }\n+      { return (__object->*__pmf)(std::forward<_ArgTypes>(__args)...); }\n \n       // Handle smart pointers, references and pointers to derived\n       template<typename _Tp>\n         _Res operator()(_Tp& __object, _ArgTypes... __args) const\n-        { return _M_call(__object, &__object, __args...); }\n+        {\n+          return _M_call(__object, &__object,\n+              std::forward<_ArgTypes>(__args)...);\n+        }\n \n     private:\n       _Functor __pmf;"}, {"sha": "d76a27f340498d9853cd552063ac5e8a432c2e70", "filename": "libstdc++-v3/testsuite/20_util/function/43397.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbcedacca60fefc99ffcc94d8711edc12dcc70e5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F43397.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbcedacca60fefc99ffcc94d8711edc12dcc70e5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F43397.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F43397.cc?ref=fbcedacca60fefc99ffcc94d8711edc12dcc70e5", "patch": "@@ -0,0 +1,78 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.8.15 polymorphic function object wrapper\n+\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+struct Foo\n+{\n+  Foo() { }\n+  short operator() ( int && ) { return 1; }\n+  short operator() ( int && ) const { return 2; }\n+  short operator() ( int && ) volatile { return 3; }\n+  short operator() ( int && ) const volatile { return 4; }\n+  short func( int && ) { return 5; }\n+  short func_c( int && ) const { return 6; }\n+  short func_v( int && ) volatile { return 7; }\n+  short func_cv( int && ) const volatile { return 8; }\n+};\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  using std::function;\n+  using std::ref;\n+\n+  Foo foo;\n+  Foo const foo_c;\n+  Foo volatile foo_v;\n+  Foo const volatile foo_cv;\n+\n+  std::function< int ( int && ) > f1( ref(foo) );\n+  VERIFY( f1(0) == 1 );\n+\n+  std::function< int ( int && ) > f2( ref(foo_c) );\n+  VERIFY( f2(0) == 2 );\n+\n+  std::function< int ( int && ) > f3( ref(foo_v) );\n+  VERIFY( f3(0) == 3 );\n+\n+  std::function< int ( int && ) > f4( ref(foo_cv) );\n+  VERIFY( f4(0) == 4 );\n+\n+  std::function< int ( Foo &, int && ) > f5( &Foo::func ) ;\n+  VERIFY( f5(foo, 0) == 5 );\n+\n+  std::function< int ( Foo const &, int && ) > f6( &Foo::func_c ) ;\n+  VERIFY( f6(foo_c, 0) == 6 );\n+\n+  std::function< int ( Foo volatile &, int && ) > f7( &Foo::func_v ) ;\n+  VERIFY( f7(foo_v, 0) == 7 );\n+\n+  std::function< int ( Foo const volatile &, int && ) > f8( &Foo::func_cv ) ;\n+  VERIFY( f8(foo_cv, 0) == 8 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}