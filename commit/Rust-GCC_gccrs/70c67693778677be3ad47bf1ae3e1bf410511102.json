{"sha": "70c67693778677be3ad47bf1ae3e1bf410511102", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBjNjc2OTM3Nzg2NzdiZTNhZDQ3YmYxYWUzZTFiZjQxMDUxMTEwMg==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-01-18T16:34:10Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-01-18T16:34:10Z"}, "message": "[AArch64] Fix unordered comparisons to floating-point vcond.\n\ngcc/\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_vcond_internal<mode>): Handle unordered cases.\n\t* config/aarch64/iterators.md (v_cmp_result): New.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/vect-fcm-gt-f.c: Change expected output.\n\t* gcc.target/aarch64/vect-fcm-gt-d.c: Likewise.\n\t* gcc.target/aarch64/vect-fcm-ge-f.c: Likewise.\n\t* gcc.target/aarch64/vect-fcm-ge-d.c: Likewise.\n\t* gcc.target/aarch64/vect-fcm-eq-f.c: Likewise.\n\nFrom-SVN: r195297", "tree": {"sha": "2fec41411d96caec7cab31d47b212cdbfd604398", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fec41411d96caec7cab31d47b212cdbfd604398"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70c67693778677be3ad47bf1ae3e1bf410511102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70c67693778677be3ad47bf1ae3e1bf410511102", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70c67693778677be3ad47bf1ae3e1bf410511102", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70c67693778677be3ad47bf1ae3e1bf410511102/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f5ce60b6a244bbcb76395f5691c1d40f536a3fcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5ce60b6a244bbcb76395f5691c1d40f536a3fcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5ce60b6a244bbcb76395f5691c1d40f536a3fcc"}], "stats": {"total": 155, "additions": 134, "deletions": 21}, "files": [{"sha": "8174a4b346b2acfebb19544ef185bd74b4e68a4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c67693778677be3ad47bf1ae3e1bf410511102/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c67693778677be3ad47bf1ae3e1bf410511102/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70c67693778677be3ad47bf1ae3e1bf410511102", "patch": "@@ -1,3 +1,9 @@\n+2013-01-18  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_vcond_internal<mode>): Handle unordered cases.\n+\t* config/aarch64/iterators.md (v_cmp_result): New.\n+\n 2013-01-18  Yi-Hsiu Hsu  <ahsu@marvell.com>\n \t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n "}, {"sha": "19cc87d230c9c22348fc113351934fc8b8fbcb44", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 100, "deletions": 9, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c67693778677be3ad47bf1ae3e1bf410511102/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c67693778677be3ad47bf1ae3e1bf410511102/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=70c67693778677be3ad47bf1ae3e1bf410511102", "patch": "@@ -1586,37 +1586,128 @@\n   \"TARGET_SIMD\"\n {\n   int inverse = 0;\n+  int swap_bsl_operands = 0;\n   rtx mask = gen_reg_rtx (<V_cmp_result>mode);\n+  rtx tmp = gen_reg_rtx (<V_cmp_result>mode);\n \n-  if (!REG_P (operands[5])\n-      && (operands[5] != CONST0_RTX (<MODE>mode)))\n-    operands[5] = force_reg (<MODE>mode, operands[5]);\n+  rtx (*base_comparison) (rtx, rtx, rtx);\n+  rtx (*complimentary_comparison) (rtx, rtx, rtx);\n+\n+  switch (GET_CODE (operands[3]))\n+    {\n+    case GE:\n+    case LE:\n+    case EQ:\n+      if (!REG_P (operands[5])\n+\t  && (operands[5] != CONST0_RTX (<MODE>mode)))\n+\toperands[5] = force_reg (<MODE>mode, operands[5]);\n+      break;\n+    default:\n+      if (!REG_P (operands[5]))\n+\toperands[5] = force_reg (<MODE>mode, operands[5]);\n+    }\n \n   switch (GET_CODE (operands[3]))\n     {\n     case LT:\n+    case UNLT:\n       inverse = 1;\n       /* Fall through.  */\n     case GE:\n-      emit_insn (gen_aarch64_cmge<mode> (mask, operands[4], operands[5]));\n+    case UNGE:\n+    case ORDERED:\n+    case UNORDERED:\n+      base_comparison = gen_aarch64_cmge<mode>;\n+      complimentary_comparison = gen_aarch64_cmgt<mode>;\n       break;\n     case LE:\n+    case UNLE:\n       inverse = 1;\n       /* Fall through.  */\n     case GT:\n-      emit_insn (gen_aarch64_cmgt<mode> (mask, operands[4], operands[5]));\n+    case UNGT:\n+      base_comparison = gen_aarch64_cmgt<mode>;\n+      complimentary_comparison = gen_aarch64_cmge<mode>;\n       break;\n+    case EQ:\n     case NE:\n-      inverse = 1;\n-      /* Fall through.  */\n+    case UNEQ:\n+      base_comparison = gen_aarch64_cmeq<mode>;\n+      complimentary_comparison = gen_aarch64_cmeq<mode>;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  switch (GET_CODE (operands[3]))\n+    {\n+    case LT:\n+    case LE:\n+    case GT:\n+    case GE:\n     case EQ:\n-      emit_insn (gen_aarch64_cmeq<mode> (mask, operands[4], operands[5]));\n+      /* The easy case.  Here we emit one of FCMGE, FCMGT or FCMEQ.\n+\t As a LT b <=> b GE a && a LE b <=> b GT a.  Our transformations are:\n+\t a GE b -> a GE b\n+\t a GT b -> a GT b\n+\t a LE b -> b GE a\n+\t a LT b -> b GT a\n+\t a EQ b -> a EQ b  */\n+\n+      if (!inverse)\n+\temit_insn (base_comparison (mask, operands[4], operands[5]));\n+      else\n+\temit_insn (complimentary_comparison (mask, operands[5], operands[4]));\n+      break;\n+    case UNLT:\n+    case UNLE:\n+    case UNGT:\n+    case UNGE:\n+    case NE:\n+      /* FCM returns false for lanes which are unordered, so if we use\n+\t the inverse of the comparison we actually want to emit, then\n+\t swap the operands to BSL, we will end up with the correct result.\n+\t Note that a NE NaN and NaN NE b are true for all a, b.\n+\n+\t Our transformations are:\n+\t a GE b -> !(b GT a)\n+\t a GT b -> !(b GE a)\n+\t a LE b -> !(a GT b)\n+\t a LT b -> !(a GE b)\n+\t a NE b -> !(a EQ b)  */\n+\n+      if (inverse)\n+\temit_insn (base_comparison (mask, operands[4], operands[5]));\n+      else\n+\temit_insn (complimentary_comparison (mask, operands[5], operands[4]));\n+\n+      swap_bsl_operands = 1;\n+      break;\n+    case UNEQ:\n+      /* We check (a > b ||  b > a).  combining these comparisons give us\n+\t true iff !(a != b && a ORDERED b), swapping the operands to BSL\n+\t will then give us (a == b ||  a UNORDERED b) as intended.  */\n+\n+      emit_insn (gen_aarch64_cmgt<mode> (mask, operands[4], operands[5]));\n+      emit_insn (gen_aarch64_cmgt<mode> (tmp, operands[5], operands[4]));\n+      emit_insn (gen_ior<v_cmp_result>3 (mask, mask, tmp));\n+      swap_bsl_operands = 1;\n+      break;\n+    case UNORDERED:\n+       /* Operands are ORDERED iff (a > b || b >= a).\n+\t Swapping the operands to BSL will give the UNORDERED case.  */\n+     swap_bsl_operands = 1;\n+     /* Fall through.  */\n+    case ORDERED:\n+      emit_insn (gen_aarch64_cmgt<mode> (tmp, operands[4], operands[5]));\n+      emit_insn (gen_aarch64_cmge<mode> (mask, operands[5], operands[4]));\n+      emit_insn (gen_ior<v_cmp_result>3 (mask, mask, tmp));\n       break;\n     default:\n       gcc_unreachable ();\n     }\n \n-  if (inverse)\n+  if (swap_bsl_operands)\n     emit_insn (gen_aarch64_simd_bsl<mode> (operands[0], mask, operands[2],\n \t\t\t\t    operands[1]));\n   else"}, {"sha": "b66418e30023bea611d76b8d679a34ba077ed054", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c67693778677be3ad47bf1ae3e1bf410511102/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c67693778677be3ad47bf1ae3e1bf410511102/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=70c67693778677be3ad47bf1ae3e1bf410511102", "patch": "@@ -430,6 +430,14 @@\n \t\t\t\t(V2SF \"V2SI\") (V4SF  \"V4SI\")\n \t\t\t\t(V2DF \"V2DI\")])\n \n+;; Lower case mode of results of comparison operations.\n+(define_mode_attr v_cmp_result [(V8QI \"v8qi\") (V16QI \"v16qi\")\n+\t\t\t\t(V4HI \"v4hi\") (V8HI  \"v8hi\")\n+\t\t\t\t(V2SI \"v2si\") (V4SI  \"v4si\")\n+\t\t\t\t(DI   \"di\")   (V2DI  \"v2di\")\n+\t\t\t\t(V2SF \"v2si\") (V4SF  \"v4si\")\n+\t\t\t\t(V2DF \"v2di\")])\n+\n ;; Vm for lane instructions is restricted to FP_LO_REGS.\n (define_mode_attr vwx [(V4HI \"x\") (V8HI \"x\") (HI \"x\")\n \t\t       (V2SI \"w\") (V4SI \"w\") (SI \"w\")])"}, {"sha": "543f480c0f32b9e0791c47583ed8bccc75dbac5c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c67693778677be3ad47bf1ae3e1bf410511102/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c67693778677be3ad47bf1ae3e1bf410511102/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=70c67693778677be3ad47bf1ae3e1bf410511102", "patch": "@@ -1,3 +1,11 @@\n+2013-01-18  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc.target/aarch64/vect-fcm-gt-f.c: Change expected output.\n+\t* gcc.target/aarch64/vect-fcm-gt-d.c: Likewise.\n+\t* gcc.target/aarch64/vect-fcm-ge-f.c: Likewise.\n+\t* gcc.target/aarch64/vect-fcm-ge-d.c: Likewise.\n+\t* gcc.target/aarch64/vect-fcm-eq-f.c: Likewise.\n+\n 2013-01-17  Jeff Law  <law@redhat.com>\n \n \t* gcc.dg/pr52573.c: Move to..."}, {"sha": "b6fb5ae8798849970a723e52edf2c55b5aaf1480", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-eq-d.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c67693778677be3ad47bf1ae3e1bf410511102/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c67693778677be3ad47bf1ae3e1bf410511102/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-d.c?ref=70c67693778677be3ad47bf1ae3e1bf410511102", "patch": "@@ -8,7 +8,7 @@\n #include \"vect-fcm.x\"\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" } } */\n-/* { dg-final { scan-assembler-times \"fcmeq\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" 2 } } */\n-/* { dg-final { scan-assembler-times \"fcmeq\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, 0\" 1 } } */\n+/* { dg-final { scan-assembler \"fcmeq\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" } } */\n+/* { dg-final { scan-assembler \"fcmeq\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, 0\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "283d34fb80a234495bea5bbb987b358a5757e9ff", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-eq-f.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c67693778677be3ad47bf1ae3e1bf410511102/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c67693778677be3ad47bf1ae3e1bf410511102/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-f.c?ref=70c67693778677be3ad47bf1ae3e1bf410511102", "patch": "@@ -8,7 +8,7 @@\n #include \"vect-fcm.x\"\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" } } */\n-/* { dg-final { scan-assembler-times \"fcmeq\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s\" 2 } } */\n-/* { dg-final { scan-assembler-times \"fcmeq\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, 0\" 1 } } */\n+/* { dg-final { scan-assembler \"fcmeq\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s\" } } */\n+/* { dg-final { scan-assembler \"fcmeq\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, 0\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "868e1f8e60d6cdda497766da3ff116b487bc3638", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-ge-d.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c67693778677be3ad47bf1ae3e1bf410511102/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c67693778677be3ad47bf1ae3e1bf410511102/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-d.c?ref=70c67693778677be3ad47bf1ae3e1bf410511102", "patch": "@@ -8,7 +8,7 @@\n #include \"vect-fcm.x\"\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" } } */\n-/* { dg-final { scan-assembler-times \"fcmge\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" 2 } } */\n-/* { dg-final { scan-assembler-times \"fcmge\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, 0\" 1 } } */\n+/* { dg-final { scan-assembler \"fcmge\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" } } */\n+/* { dg-final { scan-assembler \"fcmge\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, 0\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "e3258f3641ebfd7679ccb9826648d6424dfba40a", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-ge-f.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c67693778677be3ad47bf1ae3e1bf410511102/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c67693778677be3ad47bf1ae3e1bf410511102/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-f.c?ref=70c67693778677be3ad47bf1ae3e1bf410511102", "patch": "@@ -8,7 +8,7 @@\n #include \"vect-fcm.x\"\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" } } */\n-/* { dg-final { scan-assembler-times \"fcmge\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s\" 2 } } */\n-/* { dg-final { scan-assembler-times \"fcmge\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, 0\" 1 } } */\n+/* { dg-final { scan-assembler \"fcmge\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s\" } } */\n+/* { dg-final { scan-assembler \"fcmge\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, 0\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "ed8b452159146c8ce54980afd2b0a09992aff0d5", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-gt-d.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c67693778677be3ad47bf1ae3e1bf410511102/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c67693778677be3ad47bf1ae3e1bf410511102/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-d.c?ref=70c67693778677be3ad47bf1ae3e1bf410511102", "patch": "@@ -8,7 +8,7 @@\n #include \"vect-fcm.x\"\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" } } */\n-/* { dg-final { scan-assembler-times \"fcmgt\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" 2 } } */\n-/* { dg-final { scan-assembler-times \"fcmgt\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, 0\" 1 } } */\n+/* { dg-final { scan-assembler \"fcmgt\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" } } */\n+/* { dg-final { scan-assembler \"fcmgt\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, 0\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "e90a87581d3c7f94a070bef6bf2d1d16e83d1881", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-gt-f.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c67693778677be3ad47bf1ae3e1bf410511102/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c67693778677be3ad47bf1ae3e1bf410511102/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-f.c?ref=70c67693778677be3ad47bf1ae3e1bf410511102", "patch": "@@ -8,7 +8,7 @@\n #include \"vect-fcm.x\"\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" } } */\n-/* { dg-final { scan-assembler-times \"fcmgt\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s\" 2 } } */\n-/* { dg-final { scan-assembler-times \"fcmgt\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, 0\" 1 } } */\n+/* { dg-final { scan-assembler \"fcmgt\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s\" } } */\n+/* { dg-final { scan-assembler \"fcmgt\\\\tv\\[0-9\\]+\\.\\[24\\]s, v\\[0-9\\]+\\.\\[24\\]s, 0\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}]}