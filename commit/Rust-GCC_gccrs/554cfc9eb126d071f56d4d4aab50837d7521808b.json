{"sha": "554cfc9eb126d071f56d4d4aab50837d7521808b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU0Y2ZjOWViMTI2ZDA3MWY1NmQ0ZDRhYWI1MDgzN2Q3NTIxODA4Yg==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2016-06-20T11:01:13Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2016-06-20T11:01:13Z"}, "message": "re PR target/71103 (avr-gcc crashes with unrecognizable insn error)\n\ngcc/\n\tPR target/71103\n\t* config/avr/avr.md (movqi): Handle loading subreg:qi (const).\n\ngcc/testsuite/\n\tPR target/71103\n\t* gcc.target/avr/torture/pr71103-2.c: New test.\n\nFrom-SVN: r237589", "tree": {"sha": "4c3a3af841da295d3f4fb905197d8fc23e0599e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c3a3af841da295d3f4fb905197d8fc23e0599e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/554cfc9eb126d071f56d4d4aab50837d7521808b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/554cfc9eb126d071f56d4d4aab50837d7521808b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/554cfc9eb126d071f56d4d4aab50837d7521808b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/554cfc9eb126d071f56d4d4aab50837d7521808b/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4f26c06c413e70013e4aee2aa45c2ddee83d82a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4f26c06c413e70013e4aee2aa45c2ddee83d82a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4f26c06c413e70013e4aee2aa45c2ddee83d82a"}], "stats": {"total": 150, "additions": 143, "deletions": 7}, "files": [{"sha": "2edfda0c7ea90621047326d7f7e9424398040143", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554cfc9eb126d071f56d4d4aab50837d7521808b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554cfc9eb126d071f56d4d4aab50837d7521808b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=554cfc9eb126d071f56d4d4aab50837d7521808b", "patch": "@@ -1,3 +1,8 @@\n+2016-06-20  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/71103\n+\t* config/avr/avr.md (movqi): Handle loading subreg:qi (const).\n+\n 2016-06-20  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr.c (avr_print_operand): Fix \"format not a string"}, {"sha": "aac830154f0623cd4c75a653cb5354b7309f9f27", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554cfc9eb126d071f56d4d4aab50837d7521808b/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554cfc9eb126d071f56d4d4aab50837d7521808b/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=554cfc9eb126d071f56d4d4aab50837d7521808b", "patch": "@@ -638,16 +638,24 @@\n     rtx dest = operands[0];\n     rtx src  = avr_eval_addr_attrib (operands[1]);\n \n-    if (SUBREG_P(src) && (GET_CODE(XEXP(src,0)) == SYMBOL_REF) &&\n-        can_create_pseudo_p())\n-      {\n-        rtx symbol_ref = XEXP(src, 0);\n-        XEXP (src, 0) = copy_to_mode_reg (GET_MODE(symbol_ref), symbol_ref);\n-      }\n-\n     if (avr_mem_flash_p (dest))\n       DONE;\n \n+    if (QImode == <MODE>mode\n+        && SUBREG_P (src)\n+        && CONSTANT_ADDRESS_P (SUBREG_REG (src)))\n+    {\n+        // store_bitfield may want to store a SYMBOL_REF or CONST in a\n+        // structure that's represented as PSImode.  As the upper 16 bits\n+        // of PSImode cannot be expressed as an HImode subreg, the rhs is\n+        // decomposed into QImode (word_mode) subregs of SYMBOL_REF,\n+        // CONST or LABEL_REF; cf. PR71103.\n+\n+        rtx const_addr = SUBREG_REG (src);\n+        operands[1] = src = copy_rtx (src);\n+        SUBREG_REG (src) = copy_to_mode_reg (GET_MODE (const_addr), const_addr);\n+      }\n+\n     /* One of the operands has to be in a register.  */\n     if (!register_operand (dest, <MODE>mode)\n         && !reg_or_0_operand (src, <MODE>mode))"}, {"sha": "970dda1d72e8eafe06cd2a824fa821e4ed3958ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554cfc9eb126d071f56d4d4aab50837d7521808b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554cfc9eb126d071f56d4d4aab50837d7521808b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=554cfc9eb126d071f56d4d4aab50837d7521808b", "patch": "@@ -1,3 +1,8 @@\n+2016-06-20  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/71103\n+\t* gcc.target/avr/torture/pr71103-2.c: New test.\n+\n 2016-06-19 Martin Sebor  <msebor@redhat.com>\n \n \tPR c/69507"}, {"sha": "480ad05acab3f84aa0bedd794b01357d5327f553", "filename": "gcc/testsuite/gcc.target/avr/torture/pr71103-2.c", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554cfc9eb126d071f56d4d4aab50837d7521808b/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fpr71103-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554cfc9eb126d071f56d4d4aab50837d7521808b/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fpr71103-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fpr71103-2.c?ref=554cfc9eb126d071f56d4d4aab50837d7521808b", "patch": "@@ -0,0 +1,118 @@\n+/* Use -g0 so that this test case doesn't just fail because\n+   of PR52472.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -g0\" } */\n+\n+struct S12\n+{\n+  char c;\n+  const char *p;\n+};\n+\n+struct S12f\n+{\n+  char c;\n+  struct S12f (*f)(void);\n+};\n+\n+struct S12labl\n+{\n+  char c;\n+  void **labl;\n+};\n+\n+struct S121\n+{\n+  char c;\n+  const char *p;\n+  char d;\n+};\n+\n+const char str[5] = \"abcd\";\n+\n+struct S12 test_S12_0 (void)\n+{\n+  struct S12 s;\n+  s.c = 'A';\n+  s.p = str;\n+  return s;\n+}\n+\n+struct S12 test_S12_4 (void)\n+{\n+  struct S12 s;\n+  s.c = 'A';\n+  s.p = str + 4;\n+  return s;\n+}\n+\n+struct S12f test_S12f (void)\n+{\n+  struct S12f s;\n+  s.c = 'A';\n+  s.f = test_S12f;\n+  return s;\n+}\n+\n+struct S121 test_S121 (void)\n+{\n+  struct S121 s;\n+  s.c = 'c';\n+  s.p = str + 4;\n+  s.d = 'd';\n+  return s;\n+}\n+\n+extern void use_S12lab (struct S12labl*);\n+\n+struct S12labl test_S12lab (void)\n+{\n+  struct S12labl s;\n+labl:;\n+  s.c = 'A';\n+  s.labl = &&labl;\n+  return s;\n+}\n+\n+#ifdef __MEMX\n+\n+struct S13\n+{\n+  char c;\n+  const __memx char *p;\n+};\n+\n+const __memx char str_x[] = \"abcd\";\n+\n+struct S13 test_S13_0 (void)\n+{\n+  struct S13 s;\n+  s.c = 'A';\n+  s.p = str_x;\n+  return s;\n+}\n+\n+struct S13 test_S13_4a (void)\n+{\n+  struct S13 s;\n+  s.c = 'A';\n+  s.p = str_x + 4;\n+  return s;\n+}\n+\n+#ifdef __FLASH1\n+\n+const __flash1 char str_1[] = \"abcd\";\n+\n+struct S13 test_13_4b (void)\n+{\n+  struct S13 s;\n+  s.c = 'A';\n+  s.p = str_1 + 4;\n+  return s;\n+}\n+\n+#endif /* have __flash1 */\n+#endif /* have __memx */\n+"}]}