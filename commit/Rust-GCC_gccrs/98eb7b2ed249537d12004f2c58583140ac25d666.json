{"sha": "98eb7b2ed249537d12004f2c58583140ac25d666", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThlYjdiMmVkMjQ5NTM3ZDEyMDA0ZjJjNTg1ODMxNDBhYzI1ZDY2Ng==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-03-21T10:38:59Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-03-21T15:52:21Z"}, "message": "d: Fix ICE in add_symbol_to_partition_1, at lto/lto-partition.c:215\n\nThis patch addresses two problems with TypeInfo initializer generation.\n\n1. D array fields pointing to compiler generated data are referencing\npublic symbols with no unique prefix, which can lead to duplicate\ndefinition errors in some hard to reduce cases.  To avoid name clashes,\nall symbols that are generated for TypeInfo initializers now use the\nassembler name of the TypeInfo decl as a prefix.\n\n2. An ICE would occur during LTO pass because these same decls are\nconsidered to be part of the same comdat group as the TypeInfo decl that\nit's referred by, despite itself being neither marked public nor comdat.\nThis resulted in decls being added to the LTRANS partition out of order,\ntriggering an assert when add_symbol_to_partition_1 attempted to add\nthem again.  To remedy, TREE_PUBLIC and DECL_COMDAT are now set on all\ngenerated symbols.\n\ngcc/d/ChangeLog:\n\n2020-03-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n\n\tPR d/94290\n\t* typeinfo.cc (class TypeInfoVisitor): Replace type_ field with decl_.\n\t(TypeInfoVisitor::TypeInfoVisitor): Set decl_.\n\t(TypeInfoVisitor::result): Update.\n\t(TypeInfoVisitor::internal_reference): New function.\n\t(TypeInfoVisitor::layout_string): Use internal_reference.\n\t(TypeInfoVisitor::visit (TypeInfoTupleDeclaration *)): Likewise.\n\t(layout_typeinfo): Construct TypeInfoVisitor with typeinfo decl.\n\t(layout_classinfo): Likewise.", "tree": {"sha": "2b48c2306f01fa03aaf4ccf902606683744666e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b48c2306f01fa03aaf4ccf902606683744666e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98eb7b2ed249537d12004f2c58583140ac25d666", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98eb7b2ed249537d12004f2c58583140ac25d666", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98eb7b2ed249537d12004f2c58583140ac25d666", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98eb7b2ed249537d12004f2c58583140ac25d666/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b599bf9d6d1e180d350b71e51e08a66a1bb1546a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b599bf9d6d1e180d350b71e51e08a66a1bb1546a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b599bf9d6d1e180d350b71e51e08a66a1bb1546a"}], "stats": {"total": 59, "additions": 40, "deletions": 19}, "files": [{"sha": "0d1dcabc4ebc3f28bd0f4bc4e4027c030e28ff87", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98eb7b2ed249537d12004f2c58583140ac25d666/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98eb7b2ed249537d12004f2c58583140ac25d666/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=98eb7b2ed249537d12004f2c58583140ac25d666", "patch": "@@ -1,3 +1,15 @@\n+2020-03-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/94290\n+\t* typeinfo.cc (class TypeInfoVisitor): Replace type_ field with decl_.\n+\t(TypeInfoVisitor::TypeInfoVisitor): Set decl_.\n+\t(TypeInfoVisitor::result): Update.\n+\t(TypeInfoVisitor::internal_reference): New function.\n+\t(TypeInfoVisitor::layout_string): Use internal_reference.\n+\t(TypeInfoVisitor::visit (TypeInfoTupleDeclaration *)): Likewise.\n+\t(layout_typeinfo): Construct TypeInfoVisitor with typeinfo decl.\n+\t(layout_classinfo): Likewise.\n+\n 2020-03-20  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR lto/91027"}, {"sha": "07011deaf6f951f2e4dc5b028ccf1fc17ef88dde", "filename": "gcc/d/typeinfo.cc", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98eb7b2ed249537d12004f2c58583140ac25d666/gcc%2Fd%2Ftypeinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98eb7b2ed249537d12004f2c58583140ac25d666/gcc%2Fd%2Ftypeinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypeinfo.cc?ref=98eb7b2ed249537d12004f2c58583140ac25d666", "patch": "@@ -341,9 +341,29 @@ class TypeInfoVisitor : public Visitor\n {\n   using Visitor::visit;\n \n-  tree type_;\n+  tree decl_;\n   vec<constructor_elt, va_gc> *init_;\n \n+  /* Build an internal comdat symbol for the manifest constant VALUE, so that\n+     its address can be taken.  */\n+\n+  tree internal_reference (tree value)\n+  {\n+    /* Use the typeinfo decl name as a prefix for the internal symbol.  */\n+    const char *prefix = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (this->decl_));\n+    tree decl = build_artificial_decl (TREE_TYPE (value), value, prefix);\n+\n+    /* The internal pointer reference should be public, but not visible outside\n+       the compilation unit.  */\n+    DECL_EXTERNAL (decl) = 0;\n+    TREE_PUBLIC (decl) = 1;\n+    DECL_VISIBILITY (decl) = VISIBILITY_INTERNAL;\n+    DECL_COMDAT (decl) = 1;\n+    d_pushdecl (decl);\n+\n+    return decl;\n+  }\n+\n   /* Add VALUE to the constructor values list.  */\n \n   void layout_field (tree value)\n@@ -364,10 +384,8 @@ class TypeInfoVisitor : public Visitor\n     TREE_STATIC (value) = 1;\n \n     /* Taking the address, so assign the literal to a static var.  */\n-    tree decl = build_artificial_decl (TREE_TYPE (value), value);\n+    tree decl = this->internal_reference (value);\n     TREE_READONLY (decl) = 1;\n-    DECL_EXTERNAL (decl) = 0;\n-    d_pushdecl (decl);\n \n     value = d_array_value (build_ctype (Type::tchar->arrayOf ()),\n \t\t\t   size_int (len), build_address (decl));\n@@ -500,17 +518,17 @@ class TypeInfoVisitor : public Visitor\n \n \n public:\n-  TypeInfoVisitor (tree type)\n+  TypeInfoVisitor (tree decl)\n   {\n-    this->type_ = type;\n+    this->decl_ = decl;\n     this->init_ = NULL;\n   }\n \n   /* Return the completed constructor for the TypeInfo record.  */\n \n   tree result (void)\n   {\n-    return build_struct_literal (this->type_, this->init_);\n+    return build_struct_literal (TREE_TYPE (this->decl_), this->init_);\n   }\n \n   /* Layout of TypeInfo is:\n@@ -1125,19 +1143,12 @@ class TypeInfoVisitor : public Visitor\n \t\t\t\tbuild_typeinfo (d->loc, arg->type));\n       }\n     tree ctor = build_constructor (build_ctype (satype), elms);\n-    tree decl = build_artificial_decl (TREE_TYPE (ctor), ctor);\n-\n-    /* The internal pointer reference should be public, but not visible outside\n-       the compilation unit, as it's referencing COMDAT decls.  */\n-    TREE_PUBLIC (decl) = 1;\n-    DECL_VISIBILITY (decl) = VISIBILITY_INTERNAL;\n-    DECL_COMDAT (decl) = 1;\n+    tree decl = this->internal_reference (ctor);\n \n     tree length = size_int (ti->arguments->dim);\n     tree ptr = build_address (decl);\n     this->layout_field (d_array_value (array_type_node, length, ptr));\n \n-    d_pushdecl (decl);\n     rest_of_decl_compilation (decl, 1, 0);\n   }\n };\n@@ -1152,8 +1163,7 @@ layout_typeinfo (TypeInfoDeclaration *d)\n   if (!Type::dtypeinfo)\n     create_frontend_tinfo_types ();\n \n-  tree type = TREE_TYPE (get_typeinfo_decl (d));\n-  TypeInfoVisitor v = TypeInfoVisitor (type);\n+  TypeInfoVisitor v = TypeInfoVisitor (get_typeinfo_decl (d));\n   d->accept (&v);\n   return v.result ();\n }\n@@ -1168,8 +1178,7 @@ layout_classinfo (ClassDeclaration *cd)\n     create_frontend_tinfo_types ();\n \n   TypeInfoClassDeclaration *d = TypeInfoClassDeclaration::create (cd->type);\n-  tree type = TREE_TYPE (get_classinfo_decl (cd));\n-  TypeInfoVisitor v = TypeInfoVisitor (type);\n+  TypeInfoVisitor v = TypeInfoVisitor (get_classinfo_decl (cd));\n   d->accept (&v);\n   return v.result ();\n }"}]}