{"sha": "1c280337076ea8ca822821ea96469fee81dd5f97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMyODAzMzcwNzZlYThjYTgyMjgyMWVhOTY0NjlmZWU4MWRkNWY5Nw==", "commit": {"author": {"name": "Devang Patel", "email": "dpatel@apple.com", "date": "2005-04-21T17:03:23Z"}, "committer": {"name": "Devang Patel", "email": "dpatel@gcc.gnu.org", "date": "2005-04-21T17:03:23Z"}, "message": "tree-if-conv.c (find_phi_replacement_condition): Avoid generating x = !(a == b) : p : q;.\n\n  * tree-if-conv.c (find_phi_replacement_condition): Avoid\n  generating x = !(a == b) : p : q;.\n  (pass_if_conversion): Verify stmts and flow.\n\n  * gcc.dg/tree-ssa/ifc-3.c: New test.\n\nFrom-SVN: r98514", "tree": {"sha": "7eeb771e582fffc15dda8ca8902f128ec68c8b8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7eeb771e582fffc15dda8ca8902f128ec68c8b8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c280337076ea8ca822821ea96469fee81dd5f97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c280337076ea8ca822821ea96469fee81dd5f97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c280337076ea8ca822821ea96469fee81dd5f97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c280337076ea8ca822821ea96469fee81dd5f97/comments", "author": null, "committer": null, "parents": [{"sha": "de3eb46f1fe6b6c08001a4183e29a5816741a7af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de3eb46f1fe6b6c08001a4183e29a5816741a7af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de3eb46f1fe6b6c08001a4183e29a5816741a7af"}], "stats": {"total": 109, "additions": 76, "deletions": 33}, "files": [{"sha": "b4c34975168fada090096540aa3757cc5dd9527d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c280337076ea8ca822821ea96469fee81dd5f97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c280337076ea8ca822821ea96469fee81dd5f97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c280337076ea8ca822821ea96469fee81dd5f97", "patch": "@@ -1,3 +1,10 @@\n+2005-04-21  Devang Patel  <dpatel@apple.com>\n+\n+\tPR optimization/20994\n+\t* tree-if-conv.c (find_phi_replacement_condition): Avoid generating\n+\tx = !(a == b) : p , q;.\n+\t(pass_if_conversion): Verify stmts and flow.\n+\t\n 2005-04-21  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* optabs.c (gen_conditional_trap): Restore #define."}, {"sha": "179b8bfe67385b9d3d5a375fc4b1b38105814688", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c280337076ea8ca822821ea96469fee81dd5f97/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c280337076ea8ca822821ea96469fee81dd5f97/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c280337076ea8ca822821ea96469fee81dd5f97", "patch": "@@ -1,3 +1,8 @@\n+2005-04-21  Devang Patel  <dpatel@apple.com>\n+\n+\tPR optimization/20994\n+\t* gcc.dg/tree-ssa/ifc-3.c: New test.\n+\t\n 2005-04-20  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c/12913"}, {"sha": "e853ec4df9bc8b2adf331be46db1196dfc7858a7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ifc-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c280337076ea8ca822821ea96469fee81dd5f97/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c280337076ea8ca822821ea96469fee81dd5f97/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-3.c?ref=1c280337076ea8ca822821ea96469fee81dd5f97", "patch": "@@ -0,0 +1,12 @@\n+/* PR 20994 */\n+/* { dg-do compile } */\n+int foo(double* p, double* q)\n+{\n+    int i=0;\n+\n+    for (; q!=p; ++q)\n+        if (*q)\n+            ++i;\n+\n+    return i;\n+}"}, {"sha": "4eb5a26e6c9b2e1a178d6235fc66c57ca7eddba9", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 52, "deletions": 33, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c280337076ea8ca822821ea96469fee81dd5f97/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c280337076ea8ca822821ea96469fee81dd5f97/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=1c280337076ea8ca822821ea96469fee81dd5f97", "patch": "@@ -665,46 +665,64 @@ find_phi_replacement_condition (struct loop *loop,\n \t\t\t\tbasic_block bb, tree *cond,\n                                 block_stmt_iterator *bsi)\n {\n-  edge e;\n-  basic_block p1 = NULL;\n-  basic_block p2 = NULL;\n-  basic_block true_bb = NULL; \n+  basic_block first_bb = NULL;\n+  basic_block second_bb = NULL;\n   tree tmp_cond;\n-  edge_iterator ei;\n \n-  FOR_EACH_EDGE (e, ei, bb->preds)\n-    {\n-      if (p1 == NULL)\n-\tp1 = e->src;\n-      else \n-\t{\n-\t  gcc_assert (!p2);\n-\t  p2 = e->src;\n-\t}\n-    }\n+  gcc_assert (EDGE_COUNT (bb->preds) == 2);\n+  first_bb = (EDGE_PRED (bb, 0))->src;\n+  second_bb = (EDGE_PRED (bb, 1))->src;\n \n-  /* Use condition that is not TRUTH_NOT_EXPR in conditional modify expr.  */\n-  tmp_cond = p1->aux;\n+  /* Use condition based on following criteria:\n+     1)\n+       S1: x = !c ? a : b;\n+\n+       S2: x = c ? b : a;\n+\n+       S2 is preferred over S1. Make 'b' first_bb and use its condition.\n+\n+     2) Do not make loop header first_bb.\n+\n+     3)\n+       S1: x = !(c == d)? a : b;\n+\n+       S21: t1 = c == d;\n+       S22: x = t1 ? b : a;\n+\n+       S3: x = (c == d) ? b : a;\n+\n+       S3 is preferred over S1 and S2*, Make 'b' first_bb and use \n+       its condition.  */\n+\n+  /* Select condition that is not TRUTH_NOT_EXPR.  */\n+  tmp_cond = first_bb->aux;\n   if (TREE_CODE (tmp_cond) == TRUTH_NOT_EXPR)\n     {\n-      /* If p2 is loop->header than its aux field does not have useful\n-\t info. Instead use !(cond) where cond is p1's aux field.  */\n-      if (p2 == loop->header)\n-\t*cond = invert_truthvalue (unshare_expr (p1->aux));\n-      else\n-\t*cond  = p2->aux;\n-      true_bb = p2;\n+      basic_block tmp_bb;\n+      tmp_bb = first_bb;\n+      first_bb = second_bb;\n+      second_bb = first_bb;\n     }\n-  else\n+\n+  /* Check if FIRST_BB is loop header or not.  */\n+  if (first_bb == loop->header) \n     {\n-      /* If p1 is loop->header than its aux field does not have useful\n-\t info. Instead use !(cond) where cond is p2's aux field.  */\n-      if (p1 == loop->header)\n-\t*cond = invert_truthvalue (unshare_expr (p2->aux));\n+      tmp_cond = second_bb->aux;\n+      if (TREE_CODE (tmp_cond) == TRUTH_NOT_EXPR)\n+\t{\n+\t  /* Select non loop header condition but do not switch basic blocks.  */\n+\t  *cond = invert_truthvalue (unshare_expr (tmp_cond));\n+\t}\n       else\n-\t*cond  = p1->aux;\n-      true_bb = p1;\n+\t{\n+\t  /* Select non loop header condition.  */\n+\t  first_bb = second_bb;\n+\t  *cond = first_bb->aux;\n+\t}\n     }\n+  else\n+    /* FIRST_BB is not loop header */\n+    *cond = first_bb->aux;\n \n   /* Create temp. for the condition. Vectorizer prefers to have gimple\n      value as condition. Various targets use different means to communicate\n@@ -722,7 +740,7 @@ find_phi_replacement_condition (struct loop *loop,\n \n   gcc_assert (*cond);\n \n-  return true_bb;\n+  return first_bb;\n }\n \n \n@@ -1119,6 +1137,7 @@ struct tree_opt_pass pass_if_conversion =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_loops,\t/* todo_flags_finish */\n+  TODO_dump_func | TODO_verify_loops | TODO_verify_stmts | TODO_verify_flow,\t\n+                                        /* todo_flags_finish */\n   0\t\t\t\t\t/* letter */\n };"}]}