{"sha": "706cd57f714fcb3572f97ded0bfbfcfe090181bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA2Y2Q1N2Y3MTRmY2IzNTcyZjk3ZGVkMGJmYmZjZmUwOTAxODFiYw==", "commit": {"author": {"name": "Roberto Lublinerman", "email": "rluble@gmail.com", "date": "2011-08-24T19:22:44Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-08-24T19:22:44Z"}, "message": "gccgo...\n\ngccgo: \tfixes to ast-dump, refactoring of export and ast-dump\n        to implement a common interface for writing basic\n        type literals and added flags for optimization.\n\n\t* lang.opt: Add fgo-optimize-.\n\t* go-lang.c (go_langhook_handle_option): Handle OPT_fgo_optimize.\n\t* go-c.h (go_enable_optimize): Declare.\n\t* Make-lang.in (GO_OBJS): Add go/go-optimize.o.\n\t(GO_EXPORT_H): Define.\n\t(GO_IMPORT_H): Add $(GO_EXPORT_H).\n\t(GO_AST_DUMP_H): Define.\n\t(go/ast-dump.o, go/statements.o): Use GO_AST_DUMP_H.\n\t(go/export.o, go/gogo.o, go/import.o): Use GO_EXPORT_H.\n\t(go/types.o): Likewise.\n\t(go/expressions.o): Use GO_AST_DUMP_H and GO_EXPORT_H.\n\t(go/go-optimize.o): New target.\n\nFrom-SVN: r178046", "tree": {"sha": "b321299877c5f4c075b0bf489c636f9c0c8dc1f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b321299877c5f4c075b0bf489c636f9c0c8dc1f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/706cd57f714fcb3572f97ded0bfbfcfe090181bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/706cd57f714fcb3572f97ded0bfbfcfe090181bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/706cd57f714fcb3572f97ded0bfbfcfe090181bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/706cd57f714fcb3572f97ded0bfbfcfe090181bc/comments", "author": {"login": "rluble", "id": 4175508, "node_id": "MDQ6VXNlcjQxNzU1MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/4175508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rluble", "html_url": "https://github.com/rluble", "followers_url": "https://api.github.com/users/rluble/followers", "following_url": "https://api.github.com/users/rluble/following{/other_user}", "gists_url": "https://api.github.com/users/rluble/gists{/gist_id}", "starred_url": "https://api.github.com/users/rluble/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rluble/subscriptions", "organizations_url": "https://api.github.com/users/rluble/orgs", "repos_url": "https://api.github.com/users/rluble/repos", "events_url": "https://api.github.com/users/rluble/events{/privacy}", "received_events_url": "https://api.github.com/users/rluble/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8020d73e39fbeef5c52455b8d935569b004fb031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8020d73e39fbeef5c52455b8d935569b004fb031", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8020d73e39fbeef5c52455b8d935569b004fb031"}], "stats": {"total": 661, "additions": 448, "deletions": 213}, "files": [{"sha": "3802fa8e46336da4ad62a1f474d4e9fced973cdb", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=706cd57f714fcb3572f97ded0bfbfcfe090181bc", "patch": "@@ -1,3 +1,18 @@\n+2011-08-24  Roberto Lublinerman  <rluble@gmail.com>\n+\n+\t* lang.opt: Add fgo-optimize-.\n+\t* go-lang.c (go_langhook_handle_option): Handle OPT_fgo_optimize.\n+\t* go-c.h (go_enable_optimize): Declare.\n+\t* Make-lang.in (GO_OBJS): Add go/go-optimize.o.\n+\t(GO_EXPORT_H): Define.\n+\t(GO_IMPORT_H): Add $(GO_EXPORT_H).\n+\t(GO_AST_DUMP_H): Define.\n+\t(go/ast-dump.o, go/statements.o): Use GO_AST_DUMP_H.\n+\t(go/export.o, go/gogo.o, go/import.o): Use GO_EXPORT_H.\n+\t(go/types.o): Likewise.\n+\t(go/expressions.o): Use GO_AST_DUMP_H and GO_EXPORT_H.\n+\t(go/go-optimize.o): New target.\n+\n 2011-08-24  Joseph Myers  <joseph@codesourcery.com>\n \n \t* Make-lang.in (CFLAGS-go/go-lang.o): New."}, {"sha": "d7ae7aee6fbebf9830bcdbeb5d324b3b4e7e700e", "filename": "gcc/go/Make-lang.in", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FMake-lang.in?ref=706cd57f714fcb3572f97ded0bfbfcfe090181bc", "patch": "@@ -54,6 +54,7 @@ GO_OBJS = \\\n \tgo/go-dump.o \\\n \tgo/go-gcc.o \\\n \tgo/go-lang.o \\\n+\tgo/go-optimize.o \\\n \tgo/go.o \\\n \tgo/gogo-tree.o \\\n \tgo/gogo.o \\\n@@ -222,8 +223,10 @@ GO_GOGO_H = go/gofrontend/gogo.h\n GO_TYPES_H = go/gofrontend/types.h\n GO_STATEMENTS_H = go/gofrontend/statements.h go/gofrontend/operator.h\n GO_EXPRESSIONS_H = go/gofrontend/expressions.h go/gofrontend/operator.h\n-GO_IMPORT_H = go/gofrontend/import.h go/gofrontend/export.h\n+GO_EXPORT_H = go/gofrontend/export.h go/gofrontend/string-dump.h\n+GO_IMPORT_H = go/gofrontend/import.h $(GO_EXPORT_H)\n GO_RUNTIME_H = go/gofrontend/runtime.h go/gofrontend/runtime.def\n+GO_AST_DUMP_H = go/gofrontend/ast-dump.h go/gofrontend/string-dump.h\n \n go/go-backend.o: go/go-backend.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(TM_H) $(RTL_H) $(TREE_H) $(TM_P_H) output.h $(TARGET_H) \\\n@@ -249,22 +252,24 @@ go/%.o: go/gofrontend/%.cc\n \n go/ast-dump.o: go/gofrontend/ast-dump.cc $(GO_SYSTME_H) $(GO_GOGO_H) \\\n \t$(GO_EXPRESSIONS_H) $(GO_STATEMENTS_H) $(GO_TYPES_H) \\\n-\tgo/gofrontend/ast-dump.h $(GO_C_H) go/gofrontend/go-dump.h\n+\t$(GO_AST_DUMP_H) $(GO_C_H) go/gofrontend/go-dump.h\n go/dataflow.o: go/gofrontend/dataflow.cc $(GO_SYSTEM_H) $(GO_GOGO_H) \\\n \t$(GO_EXPRESSIONS_H) $(GO_STATEMENTS_H) go/gofrontend/dataflow.h\n go/export.o: go/gofrontend/export.cc $(GO_SYSTEM_H) \\\n \t$(srcdir)/../include/sha1.h $(GO_C_H) $(GO_GOGO_H) $(GO_TYPES_H) \\\n-\t$(GO_STATEMENTS_H) go/gofrontend/export.h\n+\t$(GO_STATEMENTS_H) $(GO_EXPORT_H)\n go/expressions.o: go/gofrontend/expressions.cc $(GO_SYSTEM_H) $(TOPLEV_H) \\\n \tintl.h $(TREE_H) $(GIMPLE_H) tree-iterator.h convert.h $(REAL_H) \\\n \trealmpfr.h $(GO_C_H) $(GO_GOGO_H) $(GO_TYPES_H) \\\n-\tgo/gofrontend/export.h $(GO_IMPORT_H) $(GO_STATEMENTS_H) $(GO_LEX_H) \\\n+\t$(GO_EXPORT_H) $(GO_IMPORT_H) $(GO_STATEMENTS_H) $(GO_LEX_H) \\\n \t$(GO_RUNTIME_H) go/gofrontend/backend.h $(GO_EXPRESSIONS_H) \\\n-\tgo/gofrontend/ast-dump.h\n+\t$(GO_AST_DUMP_H)\n go/go.o: go/gofrontend/go.cc $(GO_SYSTEM_H) $(GO_C_H) $(GO_LEX_H) \\\n \t$(GO_PARSE_H) go/gofrontend/backend.h $(GO_GOGO_H)\n go/go-dump.o: go/gofrontend/go-dump.cc $(GO_SYSTEM_H) $(GO_C_H) \\\n \tgo/gofrontend/go-dump.h\n+go/go-optimize.o: go/gofrontend/go-optimize.cc $(GO_SYSTEM_H) $(GO_C_H) \\\n+\tgo/gofrontend/go-optimize.h\n go/gogo-tree.o: go/gofrontend/gogo-tree.cc $(GO_SYSTEM_H) $(TOPLEV_H) \\\n \t$(TREE_H) $(GIMPLE_H) tree-iterator.h $(CGRAPH_H) langhooks.h \\\n \tconvert.h output.h $(DIAGNOSTIC_H) $(GO_TYPES_H) \\\n@@ -273,12 +278,10 @@ go/gogo-tree.o: go/gofrontend/gogo-tree.cc $(GO_SYSTEM_H) $(TOPLEV_H) \\\n go/gogo.o: go/gofrontend/gogo.cc $(GO_SYSTEM_H) $(GO_C_H) \\\n \tgo/gofrontend/go-dump.h $(GO_LEX_H) $(GO_TYPES_H) $(GO_STATEMENTS_H) \\\n \t$(GO_EXPRESSIONS_H) go/gofrontend/dataflow.h $(GO_RUNTIME_H) \\\n-\t$(GO_IMPORT_H) go/gofrontend/export.h go/gofrontend/backend.h \\\n-\t$(GO_GOGO_H)\n+\t$(GO_IMPORT_H) $(GO_EXPORT_H) go/gofrontend/backend.h $(GO_GOGO_H)\n go/import.o: go/gofrontend/import.cc $(GO_SYSTEM_H) \\\n \t$(srcdir)/../include/filenames.h $(srcdir)/../include/simple-object.h \\\n-\t$(GO_C_H) $(GO_GOGO_H) $(GO_TYPES_H) go/gofrontend/export.h \\\n-\t$(GO_IMPORT_H)\n+\t$(GO_C_H) $(GO_GOGO_H) $(GO_TYPES_H) $(GO_EXPORT_H) $(GO_IMPORT_H)\n go/import-archive.o: go/gofrontend/import-archive.cc $(GO_SYSTEM_H) \\\n \t$(GO_IMPORT_H)\n go/lex.o: go/gofrontend/lex.cc $(GO_LEX_H) $(GO_SYSTEM_H)\n@@ -290,11 +293,10 @@ go/runtime.o: go/gofrontend/runtime.cc $(GO_SYSTEM_H) $(GO_GOGO_H) \\\n go/statements.o: go/gofrontend/statements.cc $(GO_SYSTEM_H) \\\n \t$(GO_C_H) $(GO_TYPES_H) $(GO_EXPRESSIONS_H) $(GO_GOGO_H) \\\n \t$(GO_RUNTIME_H) go/gofrontend/backend.h $(GO_STATEMENTS_H) \\\n-\tgo/gofrontend/ast-dump.h\n+\t$(GO_AST_DUMP_H)\n go/types.o: go/gofrontend/types.cc $(GO_SYSTEM_H) $(TOPLEV_H) intl.h $(TREE_H) \\\n \t$(GIMPLE_H) $(REAL_H) convert.h $(GO_C_H) $(GO_GOGO_H) \\\n \tgo/gofrontend/operator.h $(GO_EXPRESSIONS_H) $(GO_STATEMENTS_H) \\\n-\tgo/gofrontend/export.h $(GO_IMPORT_H) go/gofrontend/backend.h \\\n-\t$(GO_TYPES_H)\n+\t$(GO_EXPORT_H) $(GO_IMPORT_H) go/gofrontend/backend.h $(GO_TYPES_H)\n go/unsafe.o: go/gofrontend/unsafe.cc $(GO_SYSTEM_H) $(GO_C_H) $(GO_TYPES_H) \\\n \t$(GO_GOGO_H)"}, {"sha": "f5ecbebace381eb641d154c036a5c23b116b4162", "filename": "gcc/go/go-c.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2Fgo-c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2Fgo-c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-c.h?ref=706cd57f714fcb3572f97ded0bfbfcfe090181bc", "patch": "@@ -37,6 +37,7 @@ extern \"C\"\n    interface.  */\n \n extern int go_enable_dump (const char*);\n+extern int go_enable_optimize (const char*);\n extern void go_set_prefix (const char*);\n \n extern void go_add_search_path (const char*);"}, {"sha": "7d2de4417d5b6b658c2c6b1dee6e0686e8f8794c", "filename": "gcc/go/go-lang.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2Fgo-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2Fgo-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-lang.c?ref=706cd57f714fcb3572f97ded0bfbfcfe090181bc", "patch": "@@ -223,6 +223,10 @@ go_langhook_handle_option (\n       ret = go_enable_dump (arg) ? true : false;\n       break;\n \n+    case OPT_fgo_optimize_:\n+      ret = go_enable_optimize (arg) ? true : false;\n+      break;\n+\n     case OPT_fgo_prefix_:\n       go_set_prefix (arg);\n       break;"}, {"sha": "850e31a81e5329569c9804eca11149bc8d77cff7", "filename": "gcc/go/gofrontend/ast-dump.cc", "status": "modified", "additions": 82, "deletions": 36, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2Fgofrontend%2Fast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2Fgofrontend%2Fast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fast-dump.cc?ref=706cd57f714fcb3572f97ded0bfbfcfe090181bc", "patch": "@@ -19,9 +19,9 @@\n \n // The -fgo-dump-ast flag to activate AST dumps.\n \n-Go_dump ast_dump_context_flag(\"ast\");\n+Go_dump ast_dump_flag(\"ast\");\n \n-// This class is used to traverse the tree to look for blocks and \n+// This class is used to traverse the tree to look for blocks and\n // function headers.\n \n class Ast_dump_traverse_blocks_and_functions : public Traverse\n@@ -33,9 +33,9 @@ class Ast_dump_traverse_blocks_and_functions : public Traverse\n   { }\n \n  protected:\n-  int \n+  int\n   block(Block*);\n- \n+\n   int\n   function(Named_object*);\n \n@@ -79,15 +79,15 @@ int Ast_dump_traverse_blocks_and_functions::block(Block * block)\n \n   return TRAVERSE_SKIP_COMPONENTS;\n }\n- \n+\n // Dump each traversed statement.\n \n int\n Ast_dump_traverse_statements::statement(Block* block, size_t* pindex,\n                                         Statement* statement)\n {\n   statement->dump_statement(this->ast_dump_context_);\n- \n+\n   if (statement->is_block_statement())\n     {\n       Ast_dump_traverse_blocks_and_functions adtbf(this->ast_dump_context_);\n@@ -103,49 +103,51 @@ int\n Ast_dump_traverse_blocks_and_functions::function(Named_object* no)\n {\n   this->ast_dump_context_->ostream() << no->name();\n- \n+\n   go_assert(no->is_function());\n   Function* func = no->func_value();\n-  \n-  this->ast_dump_context_->ostream() << \"(\"; \n+\n+  this->ast_dump_context_->ostream() << \"(\";\n   this->ast_dump_context_->dump_typed_identifier_list(\n                               func->type()->parameters());\n-  \n-  this->ast_dump_context_->ostream() << \")\"; \n-  \n+\n+  this->ast_dump_context_->ostream() << \")\";\n+\n   Function::Results* res = func->result_variables();\n   if (res != NULL && !res->empty())\n-    {  \n-      this->ast_dump_context_->ostream() << \" (\"; \n-      \n-      for (Function::Results::const_iterator it = res->begin(); \n-          it != res->end(); \n+    {\n+      this->ast_dump_context_->ostream() << \" (\";\n+\n+      for (Function::Results::const_iterator it = res->begin();\n+          it != res->end();\n           it++)\n         {\n           if (it != res->begin())\n             this->ast_dump_context_->ostream() << \",\";\n           Named_object* no = (*it);\n-          \n+\n           this->ast_dump_context_->ostream() << no->name() << \" \";\n           go_assert(no->is_result_variable());\n           Result_variable* resvar = no->result_var_value();\n-          \n+\n           this->ast_dump_context_->dump_type(resvar->type());\n-        \n+\n         }\n       this->ast_dump_context_->ostream() << \")\";\n     }\n-    \n+\n   this->ast_dump_context_->ostream() << \" : \";\n   this->ast_dump_context_->dump_type(func->type());\n   this->ast_dump_context_->ostream() << std::endl;\n-  \n+\n   return TRAVERSE_CONTINUE;\n }\n \n // Class Ast_dump_context.\n \n-Ast_dump_context::Ast_dump_context() : ostream_(NULL)\n+Ast_dump_context::Ast_dump_context(std::ostream* out /* = NULL */,\n+\t\t\t\t   bool dump_subblocks /* = true */)\n+  :  indent_(0), dump_subblocks_(dump_subblocks), ostream_(out), gogo_(NULL)\n {\n }\n \n@@ -168,8 +170,7 @@ Ast_dump_context::dump(Gogo* gogo, const char* basename)\n       error(\"cannot open %s:%m, -fgo-dump-ast ignored\", dumpname.c_str());\n       return;\n     }\n-  \n-  this->indent_ = 0;\n+\n   this->gogo_ = gogo;\n   this->ostream_ = out;\n \n@@ -188,9 +189,10 @@ Ast_dump_context::dump_type(const Type* t)\n   if (t == NULL)\n     this->ostream() << \"(nil type)\";\n   else\n-    // FIXME: write a type pretty printer instead of \n+    // FIXME: write a type pretty printer instead of\n     // using mangled names.\n-    this->ostream() << \"(\" << t->mangled_name(this->gogo_) <<  \")\"; \n+    if (this->gogo_ != NULL)\n+      this->ostream() << \"(\" << t->mangled_name(this->gogo_) <<  \")\";\n }\n \n // Dump a textual representation of a block to the\n@@ -216,18 +218,28 @@ Ast_dump_context::dump_expression(const Expression* e)\n // the dump file.\n \n void\n-Ast_dump_context::dump_expression_list(const Expression_list* el)\n+Ast_dump_context::dump_expression_list(const Expression_list* el,\n+\t\t\t\t       bool as_pairs /* = false */)\n {\n   if (el == NULL)\n     return;\n-  \n-  for (std::vector<Expression*>::const_iterator it = el->begin(); \n+\n+  for (std::vector<Expression*>::const_iterator it = el->begin();\n        it != el->end();\n        it++)\n     {\n       if ( it != el->begin())\n         this->ostream() << \",\";\n-      (*it)->dump_expression(this);\n+      if (*it != NULL)\n+\t(*it)->dump_expression(this);\n+      else\n+        this->ostream() << \"NULL\";\n+      if (as_pairs)\n+        {\n+\t  this->ostream() << \":\";\n+\t  ++it;\n+\t  (*it)->dump_expression(this);\n+        }\n     }\n }\n \n@@ -246,13 +258,13 @@ Ast_dump_context::dump_typed_identifier(const Typed_identifier* ti)\n \n void\n Ast_dump_context::dump_typed_identifier_list(\n-    const Typed_identifier_list* ti_list)         \n+    const Typed_identifier_list* ti_list)\n {\n   if (ti_list == NULL)\n     return;\n-  \n-  for (Typed_identifier_list::const_iterator it = ti_list->begin(); \n-       it != ti_list->end(); \n+\n+  for (Typed_identifier_list::const_iterator it = ti_list->begin();\n+       it != ti_list->end();\n        it++)\n     {\n       if (it != ti_list->begin())\n@@ -300,6 +312,8 @@ op_string(Operator op)\n       return \"!\";\n     case OPERATOR_XOR:\n       return \"^\";\n+    case OPERATOR_OR:\n+      return \"|\";\n     case OPERATOR_AND:\n       return \"&\";\n     case OPERATOR_MULT:\n@@ -415,9 +429,41 @@ Ast_dump_context::print_indent()\n \n void Gogo::dump_ast(const char* basename)\n {\n-  if (ast_dump_context_flag.is_enabled())\n+  if (::ast_dump_flag.is_enabled())\n     {\n       Ast_dump_context adc;\n       adc.dump(this, basename);\n     }\n }\n+\n+// Implementation of String_dump interface.\n+\n+void\n+Ast_dump_context::write_c_string(const char* s)\n+{\n+  this->ostream() << s;\n+}\n+\n+void\n+Ast_dump_context::write_string(const std::string& s)\n+{\n+  this->ostream() << s;\n+}\n+\n+// Dump statment to stream.\n+\n+void\n+Ast_dump_context::dump_to_stream(const Statement* stm, std::ostream* out)\n+{\n+  Ast_dump_context adc(out, false);\n+  stm->dump_statement(&adc);\n+}\n+\n+// Dump expression to stream.\n+\n+void\n+Ast_dump_context::dump_to_stream(const Expression* expr, std::ostream* out)\n+{\n+  Ast_dump_context adc(out, false);\n+  expr->dump_expression(&adc);\n+}\n\\ No newline at end of file"}, {"sha": "55c93693fe9131e1d0de9ece0d592571d0d22b6e", "filename": "gcc/go/gofrontend/ast-dump.h", "status": "modified", "additions": 46, "deletions": 20, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2Fgofrontend%2Fast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2Fgofrontend%2Fast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fast-dump.h?ref=706cd57f714fcb3572f97ded0bfbfcfe090181bc", "patch": "@@ -7,6 +7,8 @@\n #ifndef GO_AST_DUMP_H\n #define GO_AST_DUMP_H\n \n+#include \"string-dump.h\"\n+\n class Expression;\n class Expression_list;\n class Named_object;\n@@ -16,10 +18,10 @@ class Gogo;\n // This class implements fgo-dump-ast. the\n // Abstract syntax tree dump of the Go program.\n \n-class Ast_dump_context \n+class Ast_dump_context : public String_dump\n {\n  public:\n-  Ast_dump_context();\n+  Ast_dump_context(std::ostream* out = NULL, bool dump_subblocks = true);\n \n   // Initialize the dump context.\n   void\n@@ -28,46 +30,51 @@ class Ast_dump_context\n   // Dump spaces to dumpfile as indentation.\n   void\n   print_indent();\n-  \n+\n   // Increase current indentation for print_indent().\n   void\n-  indent() \n+  indent()\n   { ++this->indent_;}\n \n   // Decrease current indentation for print_indent().\n   void\n-  unindent() \n+  unindent()\n   { --this->indent_;}\n \n+  // Whether subblocks should be dumped or not.\n+  bool\n+  dump_subblocks()\n+  { return this->dump_subblocks_; }\n+\n   // Get dump output stream.\n-  std::ostream& \n-  ostream() \n+  std::ostream&\n+  ostream()\n   { return *this->ostream_;}\n \n   // Dump a Block to dump file.\n-  void \n+  void\n   dump_block(Block*);\n-  \n+\n   // Dump a type to dump file.\n-  void \n+  void\n   dump_type(const Type*);\n-  \n+\n   // Dump an expression to dump file.\n-  void \n+  void\n   dump_expression(const Expression*);\n \n   // Dump an expression list to dump file.\n-  void \n-  dump_expression_list(const Expression_list*);\n-  \n+  void\n+  dump_expression_list(const Expression_list*, bool as_pairs = false);\n+\n   // Dump a typed identifier to dump file.\n   void\n   dump_typed_identifier(const  Typed_identifier*);\n \n   // Dump a typed identifier list to dump file.\n   void\n   dump_typed_identifier_list(const Typed_identifier_list*);\n-  \n+\n   // Dump temporary variable name to dump file.\n   void\n   dump_temp_variable_name(const Statement*);\n@@ -79,17 +86,36 @@ class Ast_dump_context\n   // Dump operator symbol to dump file.\n   void\n   dump_operator(Operator);\n-    \n+\n+  // Implementation of String_dump interface.\n+  void\n+  write_c_string(const char*);\n+\n+  // Implements the String_dump interface.\n+  void\n+  write_string(const std::string& s);\n+\n+  // Dump statement to stream.\n+  static void\n+  dump_to_stream(const Statement*, std::ostream*);\n+\n+  // Dump expression to stream.\n+  static void\n+  dump_to_stream(const Expression* expr, std::ostream* out);\n+\n  private:\n    // Current indent level.\n   int indent_;\n-  \n+\n   // Indentation offset.\n   static const int offset_;\n-  \n+\n+  // Whether subblocks of composite statements should be dumped or not.\n+  bool dump_subblocks_;\n+\n   // Stream on output dump file.\n   std::ostream* ostream_;\n-    \n+\n   Gogo* gogo_;\n };\n "}, {"sha": "1f8278f419a10b96543b78def23bd29709996574", "filename": "gcc/go/gofrontend/export.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2Fgofrontend%2Fexport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2Fgofrontend%2Fexport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.h?ref=706cd57f714fcb3572f97ded0bfbfcfe090181bc", "patch": "@@ -7,6 +7,8 @@\n #ifndef GO_EXPORT_H\n #define GO_EXPORT_H\n \n+#include \"string-dump.h\"\n+\n struct sha1_ctx;\n class Gogo;\n class Import_init;\n@@ -45,7 +47,7 @@ enum Builtin_code\n // loop of exporting.  A pointer to this class is also passed to the\n // various specific export implementations.\n \n-class Export\n+class Export : public String_dump\n {\n  public:\n   // The Stream class is an interface used to output the exported\n@@ -57,12 +59,12 @@ class Export\n     Stream();\n     virtual ~Stream();\n \n-    // Write a string.\n+    // Write a string. Implements the String_dump interface.\n     void\n     write_string(const std::string& s)\n     { this->write_and_sum_bytes(s.data(), s.length()); }\n \n-    // Write a nul terminated string.\n+    // Write a nul terminated string. Implements the String_dump interface.\n     void\n     write_c_string(const char* s)\n     { this->write_and_sum_bytes(s, strlen(s)); }"}, {"sha": "a082012ce41f2aefeadf54b0287712fcc3e703c5", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 66, "deletions": 82, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=706cd57f714fcb3572f97ded0bfbfcfe090181bc", "patch": "@@ -1345,7 +1345,13 @@ Func_expression::do_get_tree(Translate_context* context)\n void\n Func_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n {\n-  ast_dump_context->ostream() << this->function_->name() ;\n+  ast_dump_context->ostream() << this->function_->name();\n+  if (this->closure_ != NULL)\n+    {\n+      ast_dump_context->ostream() << \" {closure =  \";\n+      this->closure_->dump_expression(ast_dump_context);\n+      ast_dump_context->ostream() << \"}\";\n+    }\n }\n \n // Make a reference to a function in an expression.\n@@ -1423,7 +1429,6 @@ Unknown_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n {\n   ast_dump_context->ostream() << \"_Unknown_(\" << this->named_object_->name()\n \t\t\t      << \")\";\n-   \n }\n \n // Make a reference to an unknown name.\n@@ -1563,16 +1568,17 @@ String_expression::do_get_tree(Translate_context* context)\n   return context->gogo()->go_string_constant_tree(this->val_);\n }\n \n-// Export a string expression.\n+ // Write string literal to string dump.\n \n void\n-String_expression::do_export(Export* exp) const\n+String_expression::export_string(String_dump* exp,\n+\t\t\t\t const String_expression* str)\n {\n   std::string s;\n-  s.reserve(this->val_.length() * 4 + 2);\n+  s.reserve(str->val_.length() * 4 + 2);\n   s += '\"';\n-  for (std::string::const_iterator p = this->val_.begin();\n-       p != this->val_.end();\n+  for (std::string::const_iterator p = str->val_.begin();\n+       p != str->val_.end();\n        ++p)\n     {\n       if (*p == '\\\\' || *p == '\"')\n@@ -1600,6 +1606,14 @@ String_expression::do_export(Export* exp) const\n   exp->write_string(s);\n }\n \n+// Export a string expression.\n+\n+void\n+String_expression::do_export(Export* exp) const\n+{\n+  String_expression::export_string(exp, this);\n+}\n+\n // Import a string expression.\n \n Expression*\n@@ -1647,8 +1661,7 @@ String_expression::do_import(Import* imp)\n void\n String_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n {\n-  // FIXME: Do proper backshlash quoting for this->val_\n-  ast_dump_context->ostream() << \"\\\"\" << this->val_ << \"\\\"\";\n+  String_expression::export_string(ast_dump_context, this);\n }\n \n // Make a string expression.\n@@ -1676,9 +1689,9 @@ class Integer_expression : public Expression\n   static bool\n   check_constant(mpz_t val, Type*, source_location);\n \n-  // Write VAL to export data.\n+  // Write VAL to string dump.\n   static void\n-  export_integer(Export* exp, const mpz_t val);\n+  export_integer(String_dump* exp, const mpz_t val);\n \n   // Write VAL to dump context.\n   static void\n@@ -1861,7 +1874,7 @@ Integer_expression::do_get_tree(Translate_context* context)\n // Write VAL to export data.\n \n void\n-Integer_expression::export_integer(Export* exp, const mpz_t val)\n+Integer_expression::export_integer(String_dump* exp, const mpz_t val)\n {\n   char* s = mpz_get_str(NULL, 10, val);\n   exp->write_c_string(s);\n@@ -1962,27 +1975,12 @@ Integer_expression::do_import(Import* imp)\n       return ret;\n     }\n }\n-\n-// Write integer to dump context.\n-\n-void\n-Integer_expression::dump_integer(Ast_dump_context* ast_dump_context, \n-                                 const mpz_t val)\n-{\n-  // FIXME: refactor this code so that is used both by dump and export. Extract\n-  // a common interface for Ast_dump_context and Export.\n-  char* s = mpz_get_str(NULL, 10, val);\n-  ast_dump_context->ostream() << s ;\n-  free(s);\n-}\n-\n-\n // Ast dump for integer expression.\n \n void\n Integer_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n {\n-  Integer_expression::dump_integer(ast_dump_context, this->val_);\n+  Integer_expression::export_integer(ast_dump_context, this->val_);\n }\n \n // Build a new integer value.\n@@ -2016,8 +2014,8 @@ class Float_expression : public Expression\n \n   // Write VAL to export data.\n   static void\n-  export_float(Export* exp, const mpfr_t val);\n-  \n+  export_float(String_dump* exp, const mpfr_t val);\n+\n   // Write VAL to dump file.\n   static void\n   dump_float(Ast_dump_context* ast_dump_context, const mpfr_t val);\n@@ -2203,10 +2201,10 @@ Float_expression::do_get_tree(Translate_context* context)\n   return Expression::float_constant_tree(this->val_, type);\n }\n \n-// Write a floating point number to export data.\n+// Write a floating point number to a string dump.\n \n void\n-Float_expression::export_float(Export *exp, const mpfr_t val)\n+Float_expression::export_float(String_dump *exp, const mpfr_t val)\n {\n   mp_exp_t exponent;\n   char* s = mpfr_get_str(NULL, &exponent, 10, 0, val, GMP_RNDN);\n@@ -2230,33 +2228,12 @@ Float_expression::do_export(Export* exp) const\n   exp->write_c_string(\" \");\n }\n \n-// Write  a floating point number to a dump context.\n-\n-void\n-Float_expression::dump_float(Ast_dump_context* ast_dump_context, \n-                                  const mpfr_t val)\n-{\n-  // FIXME: this code should be refactored so that the same code is used here\n-  // and in export_float.\n-\n-  mp_exp_t exponent;\n-  char* s = mpfr_get_str(NULL, &exponent, 10, 0, val, GMP_RNDN);\n-  if (*s == '-')\n-    ast_dump_context->ostream() << \"-\";\n-  ast_dump_context->ostream() << \"0.\";\n-  ast_dump_context->ostream() << (*s == '-' ? s + 1 : s);\n-  mpfr_free_str(s);\n-  char buf[30];\n-  snprintf(buf, sizeof buf, \"E%ld\", exponent);\n-  ast_dump_context->ostream()  << buf;\n-}\n-\n // Dump a floating point number to the dump file.\n \n void\n Float_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n {\n-  Float_expression::dump_float(ast_dump_context, this->val_);\n+  Float_expression::export_float(ast_dump_context, this->val_);\n }\n \n // Make a float expression.\n@@ -2289,9 +2266,9 @@ class Complex_expression : public Expression\n   static bool\n   check_constant(mpfr_t real, mpfr_t imag, Type*, source_location);\n \n-  // Write REAL/IMAG to export data.\n+  // Write REAL/IMAG to string dump.\n   static void\n-  export_complex(Export* exp, const mpfr_t real, const mpfr_t val);\n+  export_complex(String_dump* exp, const mpfr_t real, const mpfr_t val);\n \n   // Write REAL/IMAG to dump context.\n   static void\n@@ -2477,7 +2454,7 @@ Complex_expression::do_get_tree(Translate_context* context)\n // Write REAL/IMAG to export data.\n \n void\n-Complex_expression::export_complex(Export* exp, const mpfr_t real,\n+Complex_expression::export_complex(String_dump* exp, const mpfr_t real,\n \t\t\t\t   const mpfr_t imag)\n {\n   if (!mpfr_zero_p(real))\n@@ -2500,30 +2477,12 @@ Complex_expression::do_export(Export* exp) const\n   exp->write_c_string(\" \");\n }\n \n-// Write a complex number to a dump context.\n-\n-void\n-Complex_expression::dump_complex(Ast_dump_context* ast_dump_context,\n-                                    const mpfr_t real, const mpfr_t imag) \n-{\n-  // FIXME: this code should be refactored so that it is used both here\n-  // and by export _complex\n-  if (!mpfr_zero_p(real))\n-    {\n-      Float_expression::dump_float(ast_dump_context, real);\n-      if (mpfr_sgn(imag) > 0)\n-        ast_dump_context->ostream() << \"+\";\n-    }\n-  Float_expression::dump_float(ast_dump_context, imag);\n-  ast_dump_context->ostream() << \"i\";\n-}\n-\n // Dump a complex expression to the dump file.\n \n void\n Complex_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n {\n-  Complex_expression::dump_complex(ast_dump_context, \n+  Complex_expression::export_complex(ast_dump_context,\n                                       this->real_,\n                                       this->imag_);\n }\n@@ -11622,7 +11581,6 @@ void\n Struct_construction_expression::do_dump_expression(\n     Ast_dump_context* ast_dump_context) const\n {\n-\n   ast_dump_context->dump_type(this->type_);\n   ast_dump_context->ostream() << \"{\";\n   ast_dump_context->dump_expression_list(this->vals_);\n@@ -11875,6 +11833,15 @@ void\n Array_construction_expression::do_dump_expression(\n     Ast_dump_context* ast_dump_context) const\n {\n+  Expression* length = this->type_->array_type() != NULL ?\n+\t\t\t this->type_->array_type()->length() : NULL;\n+\n+  ast_dump_context->ostream() << \"[\" ;\n+  if (length != NULL)\n+    {\n+      ast_dump_context->dump_expression(length);\n+    }\n+  ast_dump_context->ostream() << \"]\" ;\n   ast_dump_context->dump_type(this->type_);\n   ast_dump_context->ostream() << \"{\" ;\n   ast_dump_context->dump_expression_list(this->vals_);\n@@ -11910,6 +11877,9 @@ class Fixed_array_construction_expression :\n \n   tree\n   do_get_tree(Translate_context*);\n+\n+  void\n+  do_dump_expression(Ast_dump_context*);\n };\n \n // Return a tree for constructing a fixed array.\n@@ -11922,6 +11892,22 @@ Fixed_array_construction_expression::do_get_tree(Translate_context* context)\n   return this->get_constructor_tree(context, type_to_tree(btype));\n }\n \n+// Dump ast representation of an array construction expressin.\n+\n+void\n+Fixed_array_construction_expression::do_dump_expression(\n+    Ast_dump_context* ast_dump_context)\n+{\n+\n+  ast_dump_context->ostream() << \"[\";\n+  ast_dump_context->dump_expression (this->type()->array_type()->length());\n+  ast_dump_context->ostream() << \"]\";\n+  ast_dump_context->dump_type(this->type());\n+  ast_dump_context->ostream() << \"{\";\n+  ast_dump_context->dump_expression_list(this->vals());\n+  ast_dump_context->ostream() << \"}\";\n+\n+}\n // Construct an open array.\n \n class Open_array_construction_expression : public Array_construction_expression\n@@ -12410,9 +12396,8 @@ void\n Map_construction_expression::do_dump_expression(\n     Ast_dump_context* ast_dump_context) const\n {\n-  // FIXME: We should print key:value pairs here.\n   ast_dump_context->ostream() << \"{\" ;\n-  ast_dump_context->dump_expression_list(this->vals_);\n+  ast_dump_context->dump_expression_list(this->vals_, true);\n   ast_dump_context->ostream() << \"}\";\n }\n \n@@ -12866,11 +12851,10 @@ void\n Composite_literal_expression::do_dump_expression(\n                                Ast_dump_context* ast_dump_context) const\n {\n-  // FIXME: We should print colons if this->has_keys_ is true\n-  ast_dump_context->ostream() << \"composite_literal(\" ;\n+  ast_dump_context->ostream() << \"composite(\";\n   ast_dump_context->dump_type(this->type_);\n   ast_dump_context->ostream() << \", {\";\n-  ast_dump_context->dump_expression_list(this->vals_);\n+  ast_dump_context->dump_expression_list(this->vals_, this->has_keys_);\n   ast_dump_context->ostream() << \"})\";\n }\n "}, {"sha": "ec59846f2f0ca40d4f7c9b4dd85bb5d3d654cb48", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=706cd57f714fcb3572f97ded0bfbfcfe090181bc", "patch": "@@ -43,6 +43,7 @@ class Import;\n class Temporary_statement;\n class Label;\n class Ast_dump_context;\n+class String_dump;\n \n // The base class for all expressions.\n \n@@ -1043,6 +1044,10 @@ class String_expression : public Expression\n   tree\n   do_get_tree(Translate_context*);\n \n+  // Write string literal to a string dump.\n+  static void\n+  export_string(String_dump* exp, const String_expression* str);\n+\n   void\n   do_export(Export*) const;\n "}, {"sha": "6da934f4d13a4e846f841a57fd5776f7a281e0b4", "filename": "gcc/go/gofrontend/go-optimize.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2Fgofrontend%2Fgo-optimize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2Fgofrontend%2Fgo-optimize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgo-optimize.cc?ref=706cd57f714fcb3572f97ded0bfbfcfe090181bc", "patch": "@@ -0,0 +1,53 @@\n+// go-optimize.cc -- Go frontend optimizer flags.\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+#include \"go-system.h\"\n+\n+#include \"go-c.h\"\n+#include \"go-optimize.h\"\n+\n+namespace {\n+\n+// The list of optimizations.\n+\n+Go_optimize* optimizations;\n+\n+} // End empty namespace.\n+\n+// Create a new optimization.\n+\n+Go_optimize::Go_optimize(const char* name)\n+  : next_(optimizations), name_(name), is_enabled_(false)\n+{\n+  optimizations = this;\n+}\n+\n+// Enable an optimization by name.\n+\n+bool\n+Go_optimize::enable_by_name(const char* name)\n+{\n+  bool is_all = strcmp(name, \"all\") == 0;\n+  bool found = false;\n+  for (Go_optimize* p = optimizations; p != NULL; p = p->next_)\n+    {\n+      if (is_all || strcmp(name, p->name_) == 0)\n+\t{\n+\t  p->is_enabled_ = true;\n+\t  found = true;\n+\t}\n+    }\n+  return found;\n+}\n+\n+// Enable an optimization.  Return 1 if this is a real name, 0 if not.\n+\n+GO_EXTERN_C\n+int\n+go_enable_optimize(const char* name)\n+{\n+  return Go_optimize::enable_by_name(name) ? 1 : 0;\n+}"}, {"sha": "8638498e18ffca357398efed0aaafeed26540789", "filename": "gcc/go/gofrontend/go-optimize.h", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2Fgofrontend%2Fgo-optimize.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2Fgofrontend%2Fgo-optimize.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgo-optimize.h?ref=706cd57f714fcb3572f97ded0bfbfcfe090181bc", "patch": "@@ -0,0 +1,38 @@\n+// go-optimize.h -- Go frontend optimizer flags.    -*- C++ -*-\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+#ifndef GO_OPTIMIZE_H\n+#define GO_OPTIMIZE_H\n+\n+// This class manages different arguments to -fgo-optimize-XXX.  If you\n+// want to create a new optimization, create a variable of this type with the\n+// name to use for XXX.  You can then use is_enabled to see whether\n+// the -fgo-optimize-XXX option was used on the command line.\n+\n+class Go_optimize\n+{\n+ public:\n+  Go_optimize(const char* name);\n+\n+  // Whether this optimizaiton was enabled.\n+  bool\n+  is_enabled() const\n+  { return this->is_enabled_; }\n+\n+  // Enable an optimization by name.  Return true if found.\n+  static bool\n+  enable_by_name(const char*);\n+\n+ private:\n+  // The next optimize flag.  These are not in any order.\n+  Go_optimize* next_;\n+  // The name of this optimization pass.\n+  const char* name_;\n+  // Whether this dump was enabled.\n+  bool is_enabled_;\n+};\n+\n+#endif // !defined(GO_OPTIMIZE_H)"}, {"sha": "f653ef6fdb63c068fa0f8736ff4888c5076582c9", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 89, "deletions": 59, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=706cd57f714fcb3572f97ded0bfbfcfe090181bc", "patch": "@@ -308,11 +308,11 @@ Variable_declaration_statement::do_dump_statement(\n     Ast_dump_context* ast_dump_context) const\n {\n   ast_dump_context->print_indent();\n-  \n+\n   go_assert(var_->is_variable());\n   ast_dump_context->ostream() << \"var \" << this->var_->name() <<  \" \";\n   Variable* var = this->var_->var_value();\n-  if (var->has_type()) \n+  if (var->has_type())\n     {\n       ast_dump_context->dump_type(var->type());\n       ast_dump_context->ostream() << \" \";\n@@ -478,7 +478,6 @@ Temporary_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n     {\n       ast_dump_context->ostream() << \" \";\n       ast_dump_context->dump_type(this->type_);\n-      \n     }\n   if (this->init_ != NULL)\n     {\n@@ -797,7 +796,7 @@ Assignment_operation_statement::do_dump_statement(\n {\n   ast_dump_context->print_indent();\n   ast_dump_context->dump_expression(this->lhs_);\n-  ast_dump_context->dump_operator(this->op_); \n+  ast_dump_context->dump_operator(this->op_);\n   ast_dump_context->dump_expression(this->rhs_);\n   ast_dump_context->ostream() << std::endl;\n }\n@@ -1548,7 +1547,7 @@ Tuple_type_guard_assignment_statement::lower_to_object_type(\n \n // Dump the AST representation for a tuple type guard statement.\n \n-void \n+void\n Tuple_type_guard_assignment_statement::do_dump_statement(\n     Ast_dump_context* ast_dump_context) const\n {\n@@ -1652,7 +1651,7 @@ Expression_statement::do_get_backend(Translate_context* context)\n \n // Dump the AST representation for an expression statement\n \n-void \n+void\n Expression_statement::do_dump_statement(Ast_dump_context* ast_dump_context)\n     const\n {\n@@ -2269,7 +2268,7 @@ Thunk_statement::build_thunk(Gogo* gogo, const std::string& thunk_name,\n \n   // For a defer statement, start with a call to\n   // __go_set_defer_retaddr.  */\n-  Label* retaddr_label = NULL; \n+  Label* retaddr_label = NULL;\n   if (may_call_recover)\n     {\n       retaddr_label = gogo->add_label_reference(\"retaddr\");\n@@ -2757,12 +2756,12 @@ Bc_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n {\n   ast_dump_context->print_indent();\n   ast_dump_context->ostream() << (this->is_break_ ? \"break\" : \"continue\");\n-  if (this->label_ != NULL) \n+  if (this->label_ != NULL)\n     {\n-      ast_dump_context->ostream() << \" \"; \n+      ast_dump_context->ostream() << \" \";\n       ast_dump_context->dump_label_name(this->label_);\n     }\n-  ast_dump_context->ostream() << std::endl; \n+  ast_dump_context->ostream() << std::endl;\n }\n \n // Make a break statement.\n@@ -3098,12 +3097,15 @@ If_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n   ast_dump_context->ostream() << \"if \";\n   ast_dump_context->dump_expression(this->cond_);\n   ast_dump_context->ostream() << std::endl;\n-  ast_dump_context->dump_block(this->then_block_);\n-  if (this->else_block_ != NULL) \n+  if (ast_dump_context->dump_subblocks())\n     {\n-      ast_dump_context->print_indent();\n-      ast_dump_context->ostream() << \"else\" << std::endl;\n-      ast_dump_context->dump_block(this->else_block_);\n+      ast_dump_context->dump_block(this->then_block_);\n+      if (this->else_block_ != NULL)\n+\t{\n+\t  ast_dump_context->print_indent();\n+\t  ast_dump_context->ostream() << \"else\" << std::endl;\n+\t  ast_dump_context->dump_block(this->else_block_);\n+\t}\n     }\n }\n \n@@ -3401,7 +3403,7 @@ Case_clauses::Case_clause::get_backend(Translate_context* context,\n // Dump the AST representation for a case clause\n \n void\n-Case_clauses::Case_clause::dump_clause(Ast_dump_context* ast_dump_context) \n+Case_clauses::Case_clause::dump_clause(Ast_dump_context* ast_dump_context)\n     const\n {\n   ast_dump_context->print_indent();\n@@ -3508,7 +3510,6 @@ Case_clauses::lower(Block* b, Temporary_statement* val_temp,\n   if (default_case != NULL)\n     default_case->lower(b, val_temp, default_start_label,\n \t\t\tdefault_finish_label);\n-      \n }\n \n // Determine types.\n@@ -3592,7 +3593,7 @@ Case_clauses::dump_clauses(Ast_dump_context* ast_dump_context) const\n {\n   for (Clauses::const_iterator p = this->clauses_.begin();\n        p != this->clauses_.end();\n-       ++p)    \n+       ++p)\n     p->dump_clause(ast_dump_context);\n }\n \n@@ -3716,9 +3717,15 @@ Constant_switch_statement::do_dump_statement(Ast_dump_context* ast_dump_context)\n   ast_dump_context->print_indent();\n   ast_dump_context->ostream() << \"switch \";\n   ast_dump_context->dump_expression(this->val_);\n-  ast_dump_context->ostream() << \" {\" << std::endl;\n-  this->clauses_->dump_clauses(ast_dump_context);\n-  ast_dump_context->ostream() << \"}\" << std::endl;\n+\n+  if (ast_dump_context->dump_subblocks())\n+    {\n+      ast_dump_context->ostream() << \" {\" << std::endl;\n+      this->clauses_->dump_clauses(ast_dump_context);\n+      ast_dump_context->ostream() << \"}\";\n+    }\n+\n+   ast_dump_context->ostream() << std::endl;\n }\n \n // Class Switch_statement.\n@@ -3806,12 +3813,15 @@ Switch_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n   if (this->val_ != NULL)\n     {\n       ast_dump_context->dump_expression(this->val_);\n-      ast_dump_context->ostream() << \" \";\n     }\n-  ast_dump_context->ostream() << \"{\" << std::endl;\n-  this->clauses_->dump_clauses(ast_dump_context);\n-  ast_dump_context->print_indent();\n-  ast_dump_context->ostream() << \"}\" << std::endl;\n+  if (ast_dump_context->dump_subblocks())\n+    {\n+      ast_dump_context->ostream() << \" {\" << std::endl;\n+      this->clauses_->dump_clauses(ast_dump_context);\n+      ast_dump_context->print_indent();\n+      ast_dump_context->ostream() << \"}\";\n+    }\n+  ast_dump_context->ostream() << std::endl;\n }\n \n // Make a switch statement.\n@@ -3951,7 +3961,7 @@ Type_case_clauses::Type_case_clause::dump_clause(\n     }\n   else\n     {\n-      ast_dump_context->ostream() << \"case \"; \n+      ast_dump_context->ostream() << \"case \";\n       ast_dump_context->dump_type(this->type_);\n       ast_dump_context->ostream() << \":\" ;\n     }\n@@ -4040,7 +4050,7 @@ Type_case_clauses::dump_clauses(Ast_dump_context* ast_dump_context) const\n {\n   for (Type_clauses::const_iterator p = this->clauses_.begin();\n        p != this->clauses_.end();\n-       ++p)    \n+       ++p)\n     p->dump_clause(ast_dump_context);\n }\n \n@@ -4150,15 +4160,20 @@ Type_switch_statement::break_label()\n // Dump the AST representation for a type switch statement\n \n void\n-Type_switch_statement::do_dump_statement(Ast_dump_context* ast_dump_context) \n+Type_switch_statement::do_dump_statement(Ast_dump_context* ast_dump_context)\n     const\n {\n   ast_dump_context->print_indent();\n   ast_dump_context->ostream() << \"switch \" << this->var_->name() << \" = \";\n   ast_dump_context->dump_expression(this->expr_);\n-  ast_dump_context->ostream() << \" .(type) {\" << std::endl;\n-  this->clauses_->dump_clauses(ast_dump_context);\n-  ast_dump_context->ostream() << \"}\" << std::endl;\n+  ast_dump_context->ostream() << \" .(type)\";\n+  if (ast_dump_context->dump_subblocks())\n+    {\n+      ast_dump_context->ostream() << \" {\" << std::endl;\n+      this->clauses_->dump_clauses(ast_dump_context);\n+      ast_dump_context->ostream() << \"}\";\n+    }\n+  ast_dump_context->ostream() << std::endl;\n }\n \n // Make a type switch statement.\n@@ -4554,7 +4569,7 @@ Select_clauses::Select_clause::dump_clause(\n           ast_dump_context->ostream() << \" <- \" ;\n           ast_dump_context->dump_expression(this->val_);\n         }\n-      else \n+      else\n         {\n \t  if (this->val_ != NULL)\n \t    ast_dump_context->dump_expression(this->val_);\n@@ -4567,7 +4582,7 @@ Select_clauses::Select_clause::dump_clause(\n           if (this->closedvar_ != NULL ||\n               this->var_ != NULL)\n             ast_dump_context->ostream() << \" := \" ;\n-            \n+\n           ast_dump_context->ostream() << \" <- \" ;\n           ast_dump_context->dump_expression(this->channel_);\n         }\n@@ -4842,7 +4857,7 @@ Select_clauses::add_clause_backend(\n \t\t\t  ? clause->location()\n \t\t\t  : clause->statements()->end_location());\n   Bstatement* g = bottom_label->get_goto(context, gloc);\n-\t\t\t\t\n+\n   if (s == NULL)\n     (*clauses)[index] = g;\n   else\n@@ -4856,7 +4871,7 @@ Select_clauses::dump_clauses(Ast_dump_context* ast_dump_context) const\n {\n   for (Clauses::const_iterator p = this->clauses_.begin();\n        p != this->clauses_.end();\n-       ++p)    \n+       ++p)\n     p->dump_clause(ast_dump_context);\n }\n \n@@ -4902,13 +4917,18 @@ Select_statement::do_get_backend(Translate_context* context)\n \n // Dump the AST representation for a select statement.\n \n-void \n+void\n Select_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n {\n   ast_dump_context->print_indent();\n-  ast_dump_context->ostream() << \"select {\" << std::endl;\n-  this->clauses_->dump_clauses(ast_dump_context);\n-  ast_dump_context->ostream() << \"}\" << std::endl;\n+  ast_dump_context->ostream() << \"select\";\n+  if (ast_dump_context->dump_subblocks())\n+    {\n+      ast_dump_context->ostream() << \" {\" << std::endl;\n+      this->clauses_->dump_clauses(ast_dump_context);\n+      ast_dump_context->ostream() << \"}\";\n+    }\n+  ast_dump_context->ostream() << std::endl;\n }\n \n // Make a select statement.\n@@ -5051,7 +5071,7 @@ For_statement::set_break_continue_labels(Unnamed_label* break_label,\n void\n For_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n {\n-  if (this->init_ != NULL)\n+  if (this->init_ != NULL && ast_dump_context->dump_subblocks())\n     {\n       ast_dump_context->print_indent();\n       ast_dump_context->indent();\n@@ -5063,19 +5083,24 @@ For_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n   ast_dump_context->ostream() << \"for \";\n   if (this->cond_ != NULL)\n     ast_dump_context->dump_expression(this->cond_);\n-  ast_dump_context->ostream() << \" {\" << std::endl;\n-  ast_dump_context->indent();\n \n-  ast_dump_context->dump_block(this->statements_);\n-  if (this->init_ != NULL)\n+  if (ast_dump_context->dump_subblocks())\n     {\n+      ast_dump_context->ostream() << \" {\" << std::endl;\n+      ast_dump_context->dump_block(this->statements_);\n+      if (this->init_ != NULL)\n+\t{\n+\t  ast_dump_context->print_indent();\n+\t  ast_dump_context->ostream() << \"// POST \" << std::endl;\n+\t  ast_dump_context->dump_block(this->post_);\n+\t}\n+      ast_dump_context->unindent();\n+\n       ast_dump_context->print_indent();\n-      ast_dump_context->ostream() << \"// POST \" << std::endl;\n-      ast_dump_context->dump_block(this->post_);\n+      ast_dump_context->ostream() << \"}\";\n     }\n-  ast_dump_context->unindent();\n-  ast_dump_context->print_indent();\n-  ast_dump_context->ostream() << \"}\" << std::endl;\n+\n+  ast_dump_context->ostream() << std::endl;\n }\n \n // Make a for statement.\n@@ -5701,7 +5726,7 @@ For_range_statement::continue_label()\n void\n For_range_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n {\n-  \n+\n   ast_dump_context->print_indent();\n   ast_dump_context->ostream() << \"for \";\n   ast_dump_context->dump_expression(this->index_var_);\n@@ -5710,17 +5735,22 @@ For_range_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n       ast_dump_context->ostream() << \", \";\n       ast_dump_context->dump_expression(this->value_var_);\n     }\n-    \n-  ast_dump_context->ostream() << \" = range \";      \n+\n+  ast_dump_context->ostream() << \" = range \";\n   ast_dump_context->dump_expression(this->range_);\n-  ast_dump_context->ostream() << \" {\" << std::endl;\n-  ast_dump_context->indent();\n+  if (ast_dump_context->dump_subblocks())\n+    {\n+      ast_dump_context->ostream() << \" {\" << std::endl;\n \n-  ast_dump_context->dump_block(this->statements_);\n+      ast_dump_context->indent();\n \n-  ast_dump_context->unindent();\n-  ast_dump_context->print_indent();\n-  ast_dump_context->ostream() << \"}\" << std::endl;\n+      ast_dump_context->dump_block(this->statements_);\n+\n+      ast_dump_context->unindent();\n+      ast_dump_context->print_indent();\n+      ast_dump_context->ostream() << \"}\";\n+    }\n+  ast_dump_context->ostream() << std::endl;\n }\n \n // Make a for statement with a range clause."}, {"sha": "fe4807d16201eaa99df5834d53564a9ffe7fa967", "filename": "gcc/go/gofrontend/string-dump.h", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2Fgofrontend%2Fstring-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2Fgofrontend%2Fstring-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstring-dump.h?ref=706cd57f714fcb3572f97ded0bfbfcfe090181bc", "patch": "@@ -0,0 +1,25 @@\n+// string-dump.h -- Abstract base class for dumping strings.    -*- C++ -*-\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+#ifndef GO_STRING_DUMP_H\n+#define GO_STRING_DUMP_H\n+\n+// This abstract class provides an interface strings for whatever purpose.\n+// Used for example for exporting and dumping objects.\n+\n+class String_dump \n+{\n+ public:\n+  // Write a string. Implements the String_dump interface.\n+  virtual void\n+  write_string(const std::string& s) = 0;\n+\n+  // Implementors should override this member, to dump a formatted c string.\n+  virtual void\n+  write_c_string(const char*) = 0;\n+};\n+\n+#endif  // GO_STRING_DUMP_H"}, {"sha": "96c8d739f851f28017287fe2839957f811143fe4", "filename": "gcc/go/lang.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/706cd57f714fcb3572f97ded0bfbfcfe090181bc/gcc%2Fgo%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Flang.opt?ref=706cd57f714fcb3572f97ded0bfbfcfe090181bc", "patch": "@@ -1,6 +1,6 @@\n ; lang.opt -- Options for the gcc Go front end.\n \n-; Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n+; Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -41,6 +41,10 @@ fgo-dump-\n Go Joined RejectNegative\n -fgo-dump-<type>\tDump Go frontend internal information\n \n+fgo-optimize-\n+Go Joined RejectNegative\n+-fgo-optimize-<type>\tTurn on optimization passes in the frontend\n+\n fgo-prefix=\n Go Joined RejectNegative\n -fgo-prefix=<string>\tSet package-specific prefix for exported Go names"}]}