{"sha": "6e672b1801f9443916a8b5033d9e3bf88baa3f5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU2NzJiMTgwMWY5NDQzOTE2YThiNTAzM2Q5ZTNiZjg4YmFhM2Y1ZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-09-02T11:31:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-09-02T11:31:25Z"}, "message": "Minor simplifications for std::to_chars implementation\n\n\t* include/std/charconv (__detail::__to_chars_2_len): Use std::log2p1.\n\t(__detail::__to_chars_8_len): Remove.\n\t(__detail::__to_chars_8): Inline length calculation here.\n\t(__detail::__from_chars_binary): Use numeric_limits instead of\n\tCHAR_BIT.\n\nFrom-SVN: r275313", "tree": {"sha": "6efe7614d3c1006adc3c0e663ed36224068dfdbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6efe7614d3c1006adc3c0e663ed36224068dfdbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e672b1801f9443916a8b5033d9e3bf88baa3f5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e672b1801f9443916a8b5033d9e3bf88baa3f5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e672b1801f9443916a8b5033d9e3bf88baa3f5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e672b1801f9443916a8b5033d9e3bf88baa3f5d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "000a5f8d23c04cc52f265519fccf37c81b5a0bad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/000a5f8d23c04cc52f265519fccf37c81b5a0bad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/000a5f8d23c04cc52f265519fccf37c81b5a0bad"}], "stats": {"total": 66, "additions": 25, "deletions": 41}, "files": [{"sha": "876e7ff49f6a810811e8d2bb5c39cbd940f27510", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e672b1801f9443916a8b5033d9e3bf88baa3f5d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e672b1801f9443916a8b5033d9e3bf88baa3f5d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6e672b1801f9443916a8b5033d9e3bf88baa3f5d", "patch": "@@ -1,3 +1,11 @@\n+2019-09-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/charconv (__detail::__to_chars_2_len): Use std::log2p1.\n+\t(__detail::__to_chars_8_len): Remove.\n+\t(__detail::__to_chars_8): Inline length calculation here.\n+\t(__detail::__from_chars_binary): Use numeric_limits instead of\n+\tCHAR_BIT.\n+\n 2019-09-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/abi/post/i386-solaris/baseline_symbols.txt: Regenerate."}, {"sha": "ceefa3b6778124768abe082dce18328a7f678945", "filename": "libstdc++-v3/include/std/charconv", "status": "modified", "additions": 17, "deletions": 41, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e672b1801f9443916a8b5033d9e3bf88baa3f5d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e672b1801f9443916a8b5033d9e3bf88baa3f5d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv?ref=6e672b1801f9443916a8b5033d9e3bf88baa3f5d", "patch": "@@ -35,8 +35,9 @@\n \n #include <type_traits>\n #include <limits>\n-#include <cctype>\n-#include <bits/charconv.h> // for __to_chars_len, __to_chars_10_impl\n+#include <bit>\t\t\t// for __log2p1\n+#include <cctype>\t\t// for isdigit\n+#include <bits/charconv.h>\t// for __to_chars_len, __to_chars_10_impl\n #include <bits/error_constants.h> // for std::errc\n \n // Define when floating point is supported: #define __cpp_lib_to_chars 201611L\n@@ -96,43 +97,7 @@ namespace __detail\n   template<typename _Tp>\n     constexpr unsigned\n     __to_chars_len_2(_Tp __value) noexcept\n-    {\n-      static_assert(is_integral<_Tp>::value, \"implementation bug\");\n-      static_assert(is_unsigned<_Tp>::value, \"implementation bug\");\n-\n-      constexpr size_t __nbits = __CHAR_BIT__ * sizeof(_Tp);\n-\n-      // N.B. __builtin_clzll is undefined if __value == 0, but std::to_chars\n-      // handles zero values directly.\n-\n-      // For sizeof(_Tp) > 1 this is an order of magnitude faster than\n-      // the generic __to_chars_len.\n-      return __nbits\n-\t- (__builtin_clzll(__value)\n-\t    - ((__CHAR_BIT__ * sizeof(long long)) - __nbits));\n-    }\n-\n-  template<typename _Tp>\n-    constexpr unsigned\n-    __to_chars_len_8(_Tp __value) noexcept\n-    {\n-      static_assert(is_integral<_Tp>::value, \"implementation bug\");\n-      static_assert(is_unsigned<_Tp>::value, \"implementation bug\");\n-\n-      constexpr size_t __nbits = __CHAR_BIT__ * sizeof(_Tp);\n-\n-      if _GLIBCXX17_CONSTEXPR (__nbits <= 16)\n-\t{\n-\t  return __value > 077777u ? 6u\n-\t    : __value > 07777u ? 5u\n-\t    : __value > 0777u ? 4u\n-\t    : __value > 077u ? 3u\n-\t    : __value > 07u ? 2u\n-\t    : 1u;\n-\t}\n-      else\n-\treturn (__to_chars_len_2(__value) + 2) / 3;\n-    }\n+    { return std::__log2p1(__value); }\n \n   // Generic implementation for arbitrary bases.\n   template<typename _Tp>\n@@ -255,8 +220,19 @@ namespace __detail\n       static_assert(is_unsigned<_Tp>::value, \"implementation bug\");\n \n       to_chars_result __res;\n+      unsigned __len;\n \n-      const unsigned __len = __to_chars_len_8(__val);\n+      if _GLIBCXX17_CONSTEXPR (numeric_limits<_Tp>::digits <= 16)\n+\t{\n+\t  __len = __val > 077777u ? 6u\n+\t    : __val > 07777u ? 5u\n+\t    : __val > 0777u ? 4u\n+\t    : __val > 077u ? 3u\n+\t    : __val > 07u ? 2u\n+\t    : 1u;\n+\t}\n+      else\n+\t__len = (__to_chars_len_2(__val) + 2) / 3;\n \n       if (__builtin_expect((__last - __first) < __len, 0))\n \t{\n@@ -397,7 +373,7 @@ namespace __detail\n \t  __i++;\n \t}\n       __first += __i;\n-      return __i <= (sizeof(_Tp) * __CHAR_BIT__);\n+      return __i <= numeric_limits<_Tp>::digits;\n     }\n \n   /// std::from_chars implementation for integers in bases 3 to 10."}]}