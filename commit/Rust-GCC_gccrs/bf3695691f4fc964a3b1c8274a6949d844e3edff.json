{"sha": "bf3695691f4fc964a3b1c8274a6949d844e3edff", "node_id": "C_kwDOANBUbNoAKGJmMzY5NTY5MWY0ZmM5NjRhM2IxYzgyNzRhNjk0OWQ4NDRlM2VkZmY", "commit": {"author": {"name": "Haochen Jiang", "email": "haochen.jiang@intel.com", "date": "2022-07-05T06:12:18Z"}, "committer": {"name": "Haochen Jiang", "email": "haochen.jiang@intel.com", "date": "2022-07-08T04:17:43Z"}, "message": "i386: Handle memory operand for direct call to cvtps2pd in unpack\n\ngcc/ChangeLog:\n\n\tPR target/106180\n\t* config/i386/sse.md (sse2_cvtps2pd<mask_name>_1):\n\tRename from *sse2_cvtps2pd<mask_name>_1.\n\t(vec_unpacks_lo_v4sf): Add handler for memory operand.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/106180\n\t* g++.target/i386/pr106180-1.C: New test.", "tree": {"sha": "c9e9edec3063c4f429924f556e827d658829f1c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9e9edec3063c4f429924f556e827d658829f1c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf3695691f4fc964a3b1c8274a6949d844e3edff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3695691f4fc964a3b1c8274a6949d844e3edff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf3695691f4fc964a3b1c8274a6949d844e3edff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3695691f4fc964a3b1c8274a6949d844e3edff/comments", "author": {"login": "jianghc724", "id": 10798680, "node_id": "MDQ6VXNlcjEwNzk4Njgw", "avatar_url": "https://avatars.githubusercontent.com/u/10798680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jianghc724", "html_url": "https://github.com/jianghc724", "followers_url": "https://api.github.com/users/jianghc724/followers", "following_url": "https://api.github.com/users/jianghc724/following{/other_user}", "gists_url": "https://api.github.com/users/jianghc724/gists{/gist_id}", "starred_url": "https://api.github.com/users/jianghc724/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jianghc724/subscriptions", "organizations_url": "https://api.github.com/users/jianghc724/orgs", "repos_url": "https://api.github.com/users/jianghc724/repos", "events_url": "https://api.github.com/users/jianghc724/events{/privacy}", "received_events_url": "https://api.github.com/users/jianghc724/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jianghc724", "id": 10798680, "node_id": "MDQ6VXNlcjEwNzk4Njgw", "avatar_url": "https://avatars.githubusercontent.com/u/10798680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jianghc724", "html_url": "https://github.com/jianghc724", "followers_url": "https://api.github.com/users/jianghc724/followers", "following_url": "https://api.github.com/users/jianghc724/following{/other_user}", "gists_url": "https://api.github.com/users/jianghc724/gists{/gist_id}", "starred_url": "https://api.github.com/users/jianghc724/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jianghc724/subscriptions", "organizations_url": "https://api.github.com/users/jianghc724/orgs", "repos_url": "https://api.github.com/users/jianghc724/repos", "events_url": "https://api.github.com/users/jianghc724/events{/privacy}", "received_events_url": "https://api.github.com/users/jianghc724/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa8fd7f65683ef9c3b6d2e9306bea2f28b5cadf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa8fd7f65683ef9c3b6d2e9306bea2f28b5cadf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa8fd7f65683ef9c3b6d2e9306bea2f28b5cadf7"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "a755d72eeed071d1a284045022f8427dc42f7eda", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3695691f4fc964a3b1c8274a6949d844e3edff/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3695691f4fc964a3b1c8274a6949d844e3edff/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=bf3695691f4fc964a3b1c8274a6949d844e3edff", "patch": "@@ -9204,7 +9204,7 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"V2DF\")])\n \n-(define_insn \"*sse2_cvtps2pd<mask_name>_1\"\n+(define_insn \"sse2_cvtps2pd<mask_name>_1\"\n   [(set (match_operand:V2DF 0 \"register_operand\" \"=v\")\n \t(float_extend:V2DF\n \t  (match_operand:V2SF 1 \"memory_operand\" \"m\")))]\n@@ -9266,7 +9266,15 @@\n \t  (vec_select:V2SF\n \t    (match_operand:V4SF 1 \"vector_operand\")\n \t    (parallel [(const_int 0) (const_int 1)]))))]\n-  \"TARGET_SSE2\")\n+  \"TARGET_SSE2\"\n+{\n+  if (MEM_P (operands[1]))\n+    {\n+      operands[1] = adjust_address_nv (operands[1], V2SFmode, 0);\n+      emit_insn (gen_sse2_cvtps2pd_1 (operands[0], operands[1]));\n+      DONE;\n+    }\n+})\n \n (define_expand \"vec_unpacks_lo_v8sf\"\n   [(set (match_operand:V4DF 0 \"register_operand\")"}, {"sha": "7f734536001ae1c5937f0db2e3f41ffa6e0f4ec1", "filename": "gcc/testsuite/g++.target/i386/pr106180-1.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3695691f4fc964a3b1c8274a6949d844e3edff/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr106180-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3695691f4fc964a3b1c8274a6949d844e3edff/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr106180-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr106180-1.C?ref=bf3695691f4fc964a3b1c8274a6949d844e3edff", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -c -ffloat-store  -std=c++11\" } */\n+\n+struct PointT \n+{\n+  double x, y;\n+};\n+using PointF = PointT;\n+\n+template <int _Nm> struct __array_traits { typedef PointT _Type[_Nm]; };\n+template <int _Nm> struct array\n+{\n+  typename __array_traits<_Nm>::_Type _M_elems;\n+};\n+\n+float SampleGrid_low, SampleGrid_high;\n+using QuadrilateralF = array<4>;\n+struct PerspectiveTransform\n+{\n+  PerspectiveTransform (QuadrilateralF, QuadrilateralF);\n+};\n+\n+void SampleGrid()\n+{\n+  PerspectiveTransform\n+  {\n+    { PointF {SampleGrid_high, SampleGrid_low},\n+      SampleGrid_low, SampleGrid_high },\n+    {}\n+  };\n+}"}]}