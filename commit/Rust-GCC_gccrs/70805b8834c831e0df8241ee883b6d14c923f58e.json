{"sha": "70805b8834c831e0df8241ee883b6d14c923f58e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA4MDViODgzNGM4MzFlMGRmODI0MWVlODgzYjZkMTRjOTIzZjU4ZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-16T13:00:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-16T13:00:24Z"}, "message": "[multiple changes]\n\n2012-07-16  Robert Dewar  <dewar@adacore.com>\n\n\t* a-exexpr.adb, freeze.adb, a-exexpr-gcc.adb, a-except-2005.adb,\n\tsem_eval.adb, s-fileio.adb: Minor reformatting.\n\n2012-07-16  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma): Remove support for obsolescent\n\tpragma CPP_Class.\n\t* sem_ch13.adb (Analyze_Freeze_Entity): Add missing error on Ada\n\tderivations of CPP types.  Found updating the tests affected by\n\tthe removal of pragma CPP_Class.\n\n2012-07-16  Thomas Quinot  <quinot@adacore.com>\n\n\t* back_end.adb: Minor reformatting.\n\n2012-07-16  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_ch9.adb (Expand_N_Selective_Accept.Process_Accept_Alternative):\n\tRemove junk test that was always true. For the case of no statements\n\tfollowing the ACCEPT, jump directly to End_Lab instead of\n\tintroducing an intermediate jump.\n\t(Expand_N_Selective_Accept.Process_Delay_Alternative): Fix\n\tpredicate testing for presence of statements following the DELAY.\n\tthat was always true. For the case of no statements following\n\tthe ACCEPT, jump directly to End_Lab instead of introducing an\n\tintermediate jump.\n\t(Expand_N_Selective_Accept): Fix incorrect insertion point for\n\tend label.\n\nFrom-SVN: r189534", "tree": {"sha": "b1c2bad6ede6a3472694bcb21d99b8631498961b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1c2bad6ede6a3472694bcb21d99b8631498961b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70805b8834c831e0df8241ee883b6d14c923f58e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70805b8834c831e0df8241ee883b6d14c923f58e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70805b8834c831e0df8241ee883b6d14c923f58e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70805b8834c831e0df8241ee883b6d14c923f58e/comments", "author": null, "committer": null, "parents": [{"sha": "be93c386585920cf9f235075a4b7fba74c0585ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be93c386585920cf9f235075a4b7fba74c0585ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be93c386585920cf9f235075a4b7fba74c0585ca"}], "stats": {"total": 650, "additions": 284, "deletions": 366}, "files": [{"sha": "35223c878886e61bab87b8100482aeff4efc583e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70805b8834c831e0df8241ee883b6d14c923f58e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70805b8834c831e0df8241ee883b6d14c923f58e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=70805b8834c831e0df8241ee883b6d14c923f58e", "patch": "@@ -1,3 +1,34 @@\n+2012-07-16  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-exexpr.adb, freeze.adb, a-exexpr-gcc.adb, a-except-2005.adb,\n+\tsem_eval.adb, s-fileio.adb: Minor reformatting.\n+\n+2012-07-16  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Remove support for obsolescent\n+\tpragma CPP_Class.\n+\t* sem_ch13.adb (Analyze_Freeze_Entity): Add missing error on Ada\n+\tderivations of CPP types.  Found updating the tests affected by\n+\tthe removal of pragma CPP_Class.\n+\n+2012-07-16  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* back_end.adb: Minor reformatting.\n+\n+2012-07-16  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_ch9.adb (Expand_N_Selective_Accept.Process_Accept_Alternative):\n+\tRemove junk test that was always true. For the case of no statements\n+\tfollowing the ACCEPT, jump directly to End_Lab instead of\n+\tintroducing an intermediate jump.\n+\t(Expand_N_Selective_Accept.Process_Delay_Alternative): Fix\n+\tpredicate testing for presence of statements following the DELAY.\n+\tthat was always true. For the case of no statements following\n+\tthe ACCEPT, jump directly to End_Lab instead of introducing an\n+\tintermediate jump.\n+\t(Expand_N_Selective_Accept): Fix incorrect insertion point for\n+\tend label.\n+\n 2012-07-16  Thomas Quinot  <quinot@adacore.com>\n \n \t* gnat_rm.texi: Minor documentation improvements."}, {"sha": "4c5f6662985e952a96ac42da24f4a31dc9eba54b", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70805b8834c831e0df8241ee883b6d14c923f58e/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70805b8834c831e0df8241ee883b6d14c923f58e/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=70805b8834c831e0df8241ee883b6d14c923f58e", "patch": "@@ -274,22 +274,21 @@ package body Ada.Exceptions is\n \n    function Create_Occurrence_From_Signal_Handler\n      (E : Exception_Id;\n-      M : System.Address)\n-     return EOA;\n+      M : System.Address) return EOA;\n    --  Create and build an exception occurrence using exception id E and\n    --  nul-terminated message M.\n \n    function Create_Machine_Occurrence_From_Signal_Handler\n      (E : Exception_Id;\n-      M : System.Address)\n-     return System.Address;\n+      M : System.Address) return System.Address;\n    pragma Export (C, Create_Machine_Occurrence_From_Signal_Handler,\n                   \"__gnat_create_machine_occurrence_from_signal_handler\");\n    --  Create and build an exception occurrence using exception id E and\n    --  nul-terminated message M. Return the machine occurrence.\n \n    procedure Raise_Exception_No_Defer\n-      (E : Exception_Id; Message : String := \"\");\n+     (E       : Exception_Id;\n+      Message : String := \"\");\n    pragma Export\n     (Ada, Raise_Exception_No_Defer,\n      \"ada__exceptions__raise_exception_no_defer\");\n@@ -1051,10 +1050,10 @@ package body Ada.Exceptions is\n \n    function Create_Occurrence_From_Signal_Handler\n      (E : Exception_Id;\n-      M : System.Address)\n-     return EOA\n+      M : System.Address) return EOA\n    is\n       X : constant EOA := Exception_Propagation.Allocate_Occurrence;\n+\n    begin\n       Exception_Data.Set_Exception_C_Msg (X, E, M);\n \n@@ -1072,8 +1071,7 @@ package body Ada.Exceptions is\n \n    function Create_Machine_Occurrence_From_Signal_Handler\n      (E : Exception_Id;\n-      M : System.Address)\n-     return System.Address\n+      M : System.Address) return System.Address\n    is\n    begin\n       return Create_Occurrence_From_Signal_Handler (E, M).Machine_Occurrence;"}, {"sha": "e62ffd2ef9366fb2e711ff52b6dd5e6180b8ca97", "filename": "gcc/ada/a-exexpr-gcc.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70805b8834c831e0df8241ee883b6d14c923f58e/gcc%2Fada%2Fa-exexpr-gcc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70805b8834c831e0df8241ee883b6d14c923f58e/gcc%2Fada%2Fa-exexpr-gcc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexpr-gcc.adb?ref=70805b8834c831e0df8241ee883b6d14c923f58e", "patch": "@@ -203,8 +203,7 @@ package body Exception_Propagation is\n    --  directly from gigi.\n \n    function Setup_Current_Excep\n-     (GCC_Exception : not null GCC_Exception_Access)\n-     return EOA;\n+     (GCC_Exception : not null GCC_Exception_Access) return EOA;\n    pragma Export (C, Setup_Current_Excep, \"__gnat_setup_current_excep\");\n    --  Write Get_Current_Excep.all from GCC_Exception\n \n@@ -344,8 +343,7 @@ package body Exception_Propagation is\n    -------------------------\n \n    function Setup_Current_Excep\n-     (GCC_Exception : not null GCC_Exception_Access)\n-     return EOA\n+     (GCC_Exception : not null GCC_Exception_Access) return EOA\n    is\n       Excep : constant EOA := Get_Current_Excep.all;\n \n@@ -427,6 +425,7 @@ package body Exception_Propagation is\n      (GCC_Exception : not null GCC_Exception_Access)\n    is\n       Excep : EOA;\n+\n    begin\n       --  Perform a standard raise first. If a regular handler is found, it\n       --  will be entered after all the intermediate cleanups have run. If"}, {"sha": "e2fd7d70e1e8612728860d98541d63a85c8c1fe8", "filename": "gcc/ada/a-exexpr.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70805b8834c831e0df8241ee883b6d14c923f58e/gcc%2Fada%2Fa-exexpr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70805b8834c831e0df8241ee883b6d14c923f58e/gcc%2Fada%2Fa-exexpr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexpr.adb?ref=70805b8834c831e0df8241ee883b6d14c923f58e", "patch": "@@ -65,6 +65,7 @@ package body Exception_Propagation is\n \n    procedure Propagate_Exception (Excep : EOA) is\n       Jumpbuf_Ptr : constant Address := Get_Jmpbuf_Address.all;\n+\n    begin\n       --  If the jump buffer pointer is non-null, transfer control using\n       --  it. Otherwise announce an unhandled exception (note that this"}, {"sha": "fa7c54d2f196a9c35033b5ace780bac8453e6ba8", "filename": "gcc/ada/back_end.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70805b8834c831e0df8241ee883b6d14c923f58e/gcc%2Fada%2Fback_end.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70805b8834c831e0df8241ee883b6d14c923f58e/gcc%2Fada%2Fback_end.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.adb?ref=70805b8834c831e0df8241ee883b6d14c923f58e", "patch": "@@ -237,7 +237,7 @@ package body Back_End is\n             elsif Switch_Chars (First .. Last) = \"fpreserve-control-flow\" then\n                Opt.Suppress_Control_Flow_Optimizations := True;\n \n-            --  Back end switcg -fdump-scos, which exists primarily for C, is\n+            --  Back end switch -fdump-scos, which exists primarily for C, is\n             --  also accepted for Ada as a synonym of -gnateS.\n \n             elsif Switch_Chars (First .. Last) = \"fdump-scos\" then"}, {"sha": "863c38e6e3e0c6648d14cc965c5d22321d1f2016", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 176, "deletions": 245, "changes": 421, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70805b8834c831e0df8241ee883b6d14c923f58e/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70805b8834c831e0df8241ee883b6d14c923f58e/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=70805b8834c831e0df8241ee883b6d14c923f58e", "patch": "@@ -3165,7 +3165,6 @@ package body Exp_Ch9 is\n                   end if;\n \n                   --  Generate:\n-\n                   --    if System.Atomic_Primitives.Lock_Free_Try_Write_N\n                   --         (_Object.Comp'Address,\n                   --          Interfaces.Unsigned_N (Expected_Comp),\n@@ -3177,7 +3176,7 @@ package body Exp_Ch9 is\n                   --    end if;\n \n                   Rewrite (Stmt,\n-                    Make_If_Statement (Loc,\n+                    Make_Implicit_If_Statement (N,\n                       Condition =>\n                         Make_Function_Call (Loc,\n                           Name                   =>\n@@ -3294,7 +3293,6 @@ package body Exp_Ch9 is\n             end case;\n \n             --  Generate:\n-\n             --  Expected_Comp : constant Comp_Type :=\n             --                    Comp_Type\n             --                      (System.Atomic_Primitives.Lock_Free_Read_N\n@@ -3381,7 +3379,6 @@ package body Exp_Ch9 is\n             Process_Stmts (Stmts);\n \n             --  Generate:\n-\n             --    exit when System.Atomic_Primitives.Lock_Free_Try_Write_N\n             --                (_Object.Comp'Address,\n             --                 Interfaces.Unsigned_N (Expected_Comp),\n@@ -3428,7 +3425,6 @@ package body Exp_Ch9 is\n             end if;\n \n             --  Generate:\n-\n             --    loop\n             --       declare\n             --          <Decls>\n@@ -4788,7 +4784,7 @@ package body Exp_Ch9 is\n \n          Rewrite (N,\n            Make_Block_Statement (Loc,\n-             Declarations => Decls,\n+             Declarations               => Decls,\n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc,\n                  Statements => Stats)));\n@@ -4838,7 +4834,7 @@ package body Exp_Ch9 is\n              Name => Name,\n              Parameter_Associations =>\n                New_List (Make_Attribute_Reference (Loc,\n-                 Prefix => New_Occurrence_Of (Chain, Loc),\n+                 Prefix         => New_Occurrence_Of (Chain, Loc),\n                  Attribute_Name => Name_Unchecked_Access)));\n \n          if Nkind (N) = N_Package_Declaration then\n@@ -4954,7 +4950,7 @@ package body Exp_Ch9 is\n                   Name => New_Reference_To (RTE (RE_Activate_Tasks), Loc),\n                   Parameter_Associations => New_List (\n                     Make_Attribute_Reference (Loc,\n-                      Prefix => New_Reference_To (Chain, Loc),\n+                      Prefix         => New_Reference_To (Chain, Loc),\n                       Attribute_Name => Name_Unchecked_Access))))),\n \n           Has_Created_Identifier => True,\n@@ -4991,7 +4987,7 @@ package body Exp_Ch9 is\n           Name => New_Reference_To (RTE (RE_Activate_Tasks), Loc),\n           Parameter_Associations => New_List (\n             Make_Attribute_Reference (Loc,\n-              Prefix => New_Reference_To (Chain, Loc),\n+              Prefix         => New_Reference_To (Chain, Loc),\n               Attribute_Name => Name_Unchecked_Access))));\n \n       Block :=\n@@ -5229,8 +5225,8 @@ package body Exp_Ch9 is\n       Formal   : Entity_Id;\n \n    begin\n-      --  If the result type is an access_to_subprogram, we must create\n-      --  new entities for its spec.\n+      --  If the result type is an access_to_subprogram, we must create new\n+      --  entities for its spec.\n \n       if Nkind (New_Res) = N_Access_Definition\n         and then Present (Access_To_Subprogram_Definition (New_Res))\n@@ -5354,9 +5350,7 @@ package body Exp_Ch9 is\n                  Make_Explicit_Dereference (Loc, N)),\n              Selector_Name => Make_Identifier (Loc, Sel));\n \n-      elsif Is_Entity_Name (N)\n-        and then Is_Concurrent_Type (Entity (N))\n-      then\n+      elsif Is_Entity_Name (N) and then Is_Concurrent_Type (Entity (N)) then\n          if Is_Task_Type (Entity (N)) then\n \n             if Is_Current_Task (Entity (N)) then\n@@ -5442,9 +5436,7 @@ package body Exp_Ch9 is\n \n    begin\n       Decl := First (Decls);\n-      while Present (Decl)\n-        and then not Comes_From_Source (Decl)\n-      loop\n+      while Present (Decl) and then not Comes_From_Source (Decl) loop\n          --  Declaration for concurrent entity _object and its access type,\n          --  along with the entry index subtype:\n          --    type prot_typVP is access prot_typV;\n@@ -5536,8 +5528,8 @@ package body Exp_Ch9 is\n                  Sloc,\n                  Make_Attribute_Reference (Sloc,\n                    Attribute_Name => Name_Pos,\n-                   Prefix => New_Reference_To (Base_Type (S), Sloc),\n-                   Expressions => New_List (Relocate_Node (Index))),\n+                   Prefix         => New_Reference_To (Base_Type (S), Sloc),\n+                   Expressions    => New_List (Relocate_Node (Index))),\n                  Type_Low_Bound (S),\n                  Ttyp,\n                  False));\n@@ -5659,7 +5651,6 @@ package body Exp_Ch9 is\n       Stats  : constant Node_Id    := Handled_Statement_Sequence (N);\n       Ann    : Entity_Id           := Empty;\n       Adecl  : Node_Id;\n-      Lab_Id : Node_Id;\n       Lab    : Node_Id;\n       Ldecl  : Node_Id;\n       Ldecl2 : Node_Id;\n@@ -5692,17 +5683,15 @@ package body Exp_Ch9 is\n \n             begin\n                Ent := Make_Temporary (Loc, 'L');\n-               Lab_Id := New_Reference_To (Ent, Loc);\n-               Lab := Make_Label (Loc, Lab_Id);\n+               Lab := Make_Label (Loc, New_Reference_To (Ent, Loc));\n                Ldecl :=\n                  Make_Implicit_Label_Declaration (Loc,\n                    Defining_Identifier  => Ent,\n                    Label_Construct      => Lab);\n                Append (Lab, Statements (Handled_Statement_Sequence (N)));\n \n                Ent := Make_Temporary (Loc, 'L');\n-               Lab_Id := New_Reference_To (Ent, Loc);\n-               Lab := Make_Label (Loc, Lab_Id);\n+               Lab := Make_Label (Loc, New_Reference_To (Ent, Loc));\n                Ldecl2 :=\n                  Make_Implicit_Label_Declaration (Loc,\n                    Defining_Identifier  => Ent,\n@@ -5711,7 +5700,7 @@ package body Exp_Ch9 is\n             end;\n \n          else\n-            Ldecl := Empty;\n+            Ldecl  := Empty;\n             Ldecl2 := Empty;\n          end if;\n \n@@ -5725,17 +5714,12 @@ package body Exp_Ch9 is\n                Adecl :=\n                  Make_Object_Declaration (Loc,\n                    Defining_Identifier => Ann,\n-                   Object_Definition =>\n+                   Object_Definition   =>\n                      New_Reference_To (RTE (RE_Address), Loc));\n \n-               Insert_Before (N, Adecl);\n-               Analyze (Adecl);\n-\n-               Insert_Before (N, Ldecl);\n-               Analyze (Ldecl);\n-\n-               Insert_Before (N, Ldecl2);\n-               Analyze (Ldecl2);\n+               Insert_Before_And_Analyze (N, Adecl);\n+               Insert_Before_And_Analyze (N, Ldecl);\n+               Insert_Before_And_Analyze (N, Ldecl2);\n             end if;\n \n          --  Case of accept statement which is in an accept alternative\n@@ -5781,11 +5765,10 @@ package body Exp_Ch9 is\n                   Adecl :=\n                     Make_Object_Declaration (Loc,\n                       Defining_Identifier => Ann,\n-                      Object_Definition =>\n+                      Object_Definition   =>\n                         New_Reference_To (RTE (RE_Address), Loc));\n \n-                  Insert_Before (Sel_Acc, Adecl);\n-                  Analyze (Adecl);\n+                  Insert_Before_And_Analyze (Sel_Acc, Adecl);\n \n                --  If we are not the first accept statement, then find the Ann\n                --  variable allocated by the first accept and use it.\n@@ -5830,8 +5813,7 @@ package body Exp_Ch9 is\n \n                while Present (Formal) loop\n                   Comp  := Entry_Component (Formal);\n-                  New_F :=\n-                    Make_Defining_Identifier (Loc, Chars (Formal));\n+                  New_F := Make_Defining_Identifier (Loc, Chars (Formal));\n \n                   Set_Etype (New_F, Etype (Formal));\n                   Set_Scope (New_F, Ent);\n@@ -5915,10 +5897,9 @@ package body Exp_Ch9 is\n       Decl1 :=\n         Make_Full_Type_Declaration (Loc,\n           Defining_Identifier => D_T2,\n-          Type_Definition => Def1);\n+          Type_Definition     => Def1);\n \n-      Insert_After (N, Decl1);\n-      Analyze (Decl1);\n+      Insert_After_And_Analyze (N, Decl1);\n \n       --  Associate the access to subprogram with its original access to\n       --  protected subprogram type. Needed by the backend to know that this\n@@ -5934,7 +5915,7 @@ package body Exp_Ch9 is\n           Defining_Identifier  => Make_Temporary (Loc, 'P'),\n           Component_Definition =>\n             Make_Component_Definition (Loc,\n-              Aliased_Present => False,\n+              Aliased_Present    => False,\n               Subtype_Indication =>\n                 New_Occurrence_Of (RTE (RE_Address), Loc))),\n \n@@ -5953,8 +5934,7 @@ package body Exp_Ch9 is\n               Component_List =>\n                 Make_Component_List (Loc, Component_Items => Comps)));\n \n-      Insert_After (Decl1, Decl2);\n-      Analyze (Decl2);\n+      Insert_After_And_Analyze (Decl1, Decl2);\n       Set_Equivalent_Type (T, E_T);\n    end Expand_Access_Protected_Subprogram_Type;\n \n@@ -6024,9 +6004,7 @@ package body Exp_Ch9 is\n          --  condition does not reference any of the generated renamings\n          --  within the function.\n \n-         if Full_Expander_Active\n-           and then Scope (Entity (Cond)) /= Func\n-         then\n+         if Full_Expander_Active and then Scope (Entity (Cond)) /= Func then\n             Set_Declarations (B_F, Empty_List);\n          end if;\n \n@@ -6094,16 +6072,15 @@ package body Exp_Ch9 is\n          then\n             Append_To (Component_Associations (Aggr),\n               Make_Component_Association (Loc,\n-                Choices => New_List (\n-                  Make_Integer_Literal (Loc, Count)),\n+                Choices    => New_List (Make_Integer_Literal (Loc, Count)),\n                 Expression =>\n \n                   --  Task_Id (Tasknm._disp_get_task_id)\n \n                   Make_Unchecked_Type_Conversion (Loc,\n                     Subtype_Mark =>\n                       New_Reference_To (RTE (RO_ST_Task_Id), Loc),\n-                    Expression =>\n+                    Expression   =>\n                       Make_Selected_Component (Loc,\n                         Prefix        => New_Copy_Tree (Tasknm),\n                         Selector_Name =>\n@@ -6112,8 +6089,7 @@ package body Exp_Ch9 is\n          else\n             Append_To (Component_Associations (Aggr),\n               Make_Component_Association (Loc,\n-                Choices => New_List (\n-                  Make_Integer_Literal (Loc, Count)),\n+                Choices    => New_List (Make_Integer_Literal (Loc, Count)),\n                 Expression => Concurrent_Ref (Tasknm)));\n          end if;\n \n@@ -6126,7 +6102,7 @@ package body Exp_Ch9 is\n           Parameter_Associations => New_List (\n             Make_Qualified_Expression (Loc,\n               Subtype_Mark => New_Reference_To (RTE (RE_Task_List), Loc),\n-              Expression => Aggr))));\n+              Expression   => Aggr))));\n \n       Analyze (N);\n    end Expand_N_Abort_Statement;\n@@ -6204,11 +6180,9 @@ package body Exp_Ch9 is\n       Call    : Node_Id;\n       Block   : Node_Id;\n \n-   --  Start of processing for Expand_N_Accept_Statement\n-\n    begin\n-      --  If accept statement is not part of a list, then its parent must be\n-      --  an accept alternative, and, as described above, we do not do any\n+      --  If the accept statement is not part of a list, then its parent must\n+      --  be an accept alternative, and, as described above, we do not do any\n       --  expansion for such accept statements at this level.\n \n       if not Is_List_Member (N) then\n@@ -6300,9 +6274,7 @@ package body Exp_Ch9 is\n          if Parent (Stats) = N then\n             Prepend (Call, Statements (Stats));\n          else\n-            Set_Declarations\n-              (Parent (Stats),\n-                New_List (Call));\n+            Set_Declarations (Parent (Stats), New_List (Call));\n          end if;\n \n          Analyze (Call);\n@@ -6797,10 +6769,8 @@ package body Exp_Ch9 is\n                     New_Copy_Tree (Obj),             --  <object>\n                     New_Reference_To (S, Loc),       --  S\n                     Make_Attribute_Reference (Loc,   --  P'Address\n-                      Prefix =>\n-                        New_Reference_To (P, Loc),\n-                      Attribute_Name =>\n-                        Name_Address),\n+                      Prefix         => New_Reference_To (P, Loc),\n+                      Attribute_Name => Name_Address),\n                     Make_Identifier (Loc, Name_uD),  --  D\n                     New_Reference_To (B, Loc))));    --  B\n \n@@ -6810,14 +6780,13 @@ package body Exp_Ch9 is\n             --    end if;\n \n             Append_To (Cleanup_Stmts,\n-              Make_If_Statement (Loc,\n+              Make_Implicit_If_Statement (N,\n                 Condition =>\n                   Make_Function_Call (Loc,\n                     Name =>\n                       New_Reference_To (RTE (RE_Enqueued), Loc),\n                     Parameter_Associations =>\n-                      New_List (\n-                        New_Reference_To (Bnn, Loc))),\n+                      New_List (New_Reference_To (Bnn, Loc))),\n \n                 Then_Statements =>\n                   New_Copy_List_Tree (Astats)));\n@@ -6856,8 +6825,7 @@ package body Exp_Ch9 is\n             ProtE_Stmts :=\n               New_List (\n                 Make_Implicit_Label_Declaration (Loc,\n-                  Defining_Identifier =>\n-                    Abort_Block_Ent),\n+                  Defining_Identifier => Abort_Block_Ent),\n \n                 Build_Abort_Block\n                   (Loc, Abort_Block_Ent, Cleanup_Block_Ent, Cleanup_Block));\n@@ -6868,16 +6836,15 @@ package body Exp_Ch9 is\n             --    end if;\n \n             Append_To (ProtE_Stmts,\n-              Make_If_Statement (Loc,\n+              Make_Implicit_If_Statement (N,\n                 Condition =>\n                   Make_Op_Not (Loc,\n                     Right_Opnd =>\n                       Make_Function_Call (Loc,\n                         Name =>\n                           New_Reference_To (RTE (RE_Cancelled), Loc),\n                         Parameter_Associations =>\n-                          New_List (\n-                            New_Reference_To (Bnn, Loc)))),\n+                          New_List (New_Reference_To (Bnn, Loc)))),\n \n                 Then_Statements =>\n                   New_Copy_List_Tree (Tstats)));\n@@ -6916,15 +6883,14 @@ package body Exp_Ch9 is\n                     Find_Prim_Op (Etype (Etype (Obj)),\n                       Name_uDisp_Asynchronous_Select),\n                     Loc),\n+\n                 Parameter_Associations =>\n                   New_List (\n                     New_Copy_Tree (Obj),             --  <object>\n                     New_Reference_To (S, Loc),       --  S\n                     Make_Attribute_Reference (Loc,   --  P'Address\n-                      Prefix =>\n-                        New_Reference_To (P, Loc),\n-                      Attribute_Name =>\n-                        Name_Address),\n+                      Prefix         => New_Reference_To (P, Loc),\n+                      Attribute_Name => Name_Address),\n                     Make_Identifier (Loc, Name_uD),  --  D\n                     New_Reference_To (B, Loc))));    --  B\n \n@@ -6933,10 +6899,8 @@ package body Exp_Ch9 is\n \n             Prepend_To (TaskE_Stmts,\n               Make_Procedure_Call_Statement (Loc,\n-                Name =>\n-                  New_Reference_To (RTE (RE_Abort_Defer), Loc),\n-                Parameter_Associations =>\n-                  No_List));\n+                Name => New_Reference_To (RTE (RE_Abort_Defer), Loc),\n+                Parameter_Associations => No_List));\n \n             --  Generate:\n             --    Abort_Undefer;\n@@ -6946,10 +6910,8 @@ package body Exp_Ch9 is\n \n             Prepend_To (Cleanup_Stmts,\n               Make_Procedure_Call_Statement (Loc,\n-                Name =>\n-                  New_Reference_To (RTE (RE_Abort_Undefer), Loc),\n-                Parameter_Associations =>\n-                  No_List));\n+                Name => New_Reference_To (RTE (RE_Abort_Undefer), Loc),\n+                Parameter_Associations => No_List));\n \n             --  Wrap the statements in a block. Exp_Ch7.Expand_Cleanup_Actions\n             --  will generate a _clean for the additional status flag.\n@@ -6995,11 +6957,9 @@ package body Exp_Ch9 is\n             --    end if;\n \n             Append_To (TaskE_Stmts,\n-              Make_If_Statement (Loc,\n+              Make_Implicit_If_Statement (N,\n                 Condition =>\n-                  Make_Op_Not (Loc,\n-                    Right_Opnd =>\n-                      New_Reference_To (T, Loc)),\n+                  Make_Op_Not (Loc, Right_Opnd => New_Reference_To (T, Loc)),\n \n                 Then_Statements =>\n                   New_Copy_List_Tree (Tstats)));\n@@ -7048,10 +7008,10 @@ package body Exp_Ch9 is\n             --    end if;\n \n             Append_To (Conc_Typ_Stmts,\n-              Make_If_Statement (Loc,\n+              Make_Implicit_If_Statement (N,\n                 Condition =>\n                   Make_Op_Eq (Loc,\n-                    Left_Opnd =>\n+                    Left_Opnd  =>\n                       New_Reference_To (C, Loc),\n                     Right_Opnd =>\n                       New_Reference_To (RTE (RE_POK_Protected_Entry), Loc)),\n@@ -7064,7 +7024,7 @@ package body Exp_Ch9 is\n                     Make_Elsif_Part (Loc,\n                       Condition =>\n                         Make_Op_Eq (Loc,\n-                          Left_Opnd =>\n+                          Left_Opnd  =>\n                             New_Reference_To (C, Loc),\n                           Right_Opnd =>\n                             New_Reference_To (RTE (RE_POK_Task_Entry), Loc)),\n@@ -7090,10 +7050,10 @@ package body Exp_Ch9 is\n             --    end if;\n \n             Append_To (Stmts,\n-              Make_If_Statement (Loc,\n+              Make_Implicit_If_Statement (N,\n                 Condition =>\n                    Make_Op_Eq (Loc,\n-                     Left_Opnd =>\n+                     Left_Opnd  =>\n                        New_Reference_To (K, Loc),\n                      Right_Opnd =>\n                        New_Reference_To (RTE (RE_TK_Limited_Tagged), Loc)),\n@@ -7138,7 +7098,7 @@ package body Exp_Ch9 is\n \n             Append_To (Parameter_Associations (Ecall),\n               Make_Attribute_Reference (Loc,\n-                Prefix => New_Reference_To (Dblock_Ent, Loc),\n+                Prefix         => New_Reference_To (Dblock_Ent, Loc),\n                 Attribute_Name => Name_Unchecked_Access));\n \n             --  Create the inner block to protect the abortable part\n@@ -7162,9 +7122,10 @@ package body Exp_Ch9 is\n \n             Rewrite (Ecall,\n               Make_Implicit_If_Statement (N,\n-                Condition => Make_Function_Call (Loc,\n-                  Name => Enqueue_Call,\n-                  Parameter_Associations => Parameter_Associations (Ecall)),\n+                Condition =>\n+                  Make_Function_Call (Loc,\n+                    Name => Enqueue_Call,\n+                    Parameter_Associations => Parameter_Associations (Ecall)),\n                 Then_Statements =>\n                   New_List (Make_Block_Statement (Loc,\n                     Handled_Statement_Sequence =>\n@@ -7182,13 +7143,14 @@ package body Exp_Ch9 is\n \n             Append_To (Stmts,\n               Make_Implicit_If_Statement (N,\n-                Condition => Make_Function_Call (Loc,\n-                  Name => New_Reference_To (\n-                    RTE (RE_Timed_Out), Loc),\n-                  Parameter_Associations => New_List (\n-                    Make_Attribute_Reference (Loc,\n-                      Prefix => New_Reference_To (Dblock_Ent, Loc),\n-                      Attribute_Name => Name_Unchecked_Access))),\n+                Condition =>\n+                  Make_Function_Call (Loc,\n+                    Name => New_Reference_To (\n+                      RTE (RE_Timed_Out), Loc),\n+                    Parameter_Associations => New_List (\n+                      Make_Attribute_Reference (Loc,\n+                        Prefix         => New_Reference_To (Dblock_Ent, Loc),\n+                        Attribute_Name => Name_Unchecked_Access))),\n                 Then_Statements => Tstats));\n \n             --  The result is the new block\n@@ -7200,8 +7162,8 @@ package body Exp_Ch9 is\n                 Declarations => New_List (\n                   Make_Object_Declaration (Loc,\n                     Defining_Identifier => Dblock_Ent,\n-                    Aliased_Present => True,\n-                    Object_Definition => New_Reference_To (\n+                    Aliased_Present     => True,\n+                    Object_Definition   => New_Reference_To (\n                       RTE (RE_Delay_Block), Loc))),\n \n                 Handled_Statement_Sequence =>\n@@ -7278,18 +7240,18 @@ package body Exp_Ch9 is\n \n          Append_To (Stmts,\n            Make_Implicit_If_Statement (N,\n-             Condition => Make_Function_Call (Loc,\n-               Name => New_Reference_To (RTE (RE_Enqueued), Loc),\n-               Parameter_Associations => New_List (\n-                 New_Reference_To (Cancel_Param, Loc))),\n+             Condition =>\n+               Make_Function_Call (Loc,\n+                 Name => New_Reference_To (RTE (RE_Enqueued), Loc),\n+                 Parameter_Associations => New_List (\n+                   New_Reference_To (Cancel_Param, Loc))),\n              Then_Statements => Astats));\n \n          Abortable_Block :=\n            Make_Block_Statement (Loc,\n              Identifier => New_Reference_To (Blk_Ent, Loc),\n              Handled_Statement_Sequence =>\n-               Make_Handled_Sequence_Of_Statements (Loc,\n-                 Statements => Stmts),\n+               Make_Handled_Sequence_Of_Statements (Loc, Statements => Stmts),\n              Has_Created_Identifier => True,\n              Is_Asynchronous_Call_Block => True);\n \n@@ -7367,7 +7329,7 @@ package body Exp_Ch9 is\n          Prepend_To (Decls,\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => B,\n-             Object_Definition => New_Reference_To (Standard_Boolean, Loc)));\n+             Object_Definition   => New_Reference_To (Standard_Boolean, Loc)));\n \n          Cancel_Param := Make_Defining_Identifier (Loc, Name_uC);\n \n@@ -7376,7 +7338,7 @@ package body Exp_Ch9 is\n          Prepend_To (Decls,\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Cancel_Param,\n-             Object_Definition => New_Reference_To (Standard_Boolean, Loc)));\n+             Object_Definition   => New_Reference_To (Standard_Boolean, Loc)));\n \n          --  Remove and save the call to Call_Simple\n \n@@ -7402,11 +7364,10 @@ package body Exp_Ch9 is\n \n          Abortable_Block :=\n            Make_Block_Statement (Loc,\n-             Identifier => New_Reference_To (Blk_Ent, Loc),\n+             Identifier                 => New_Reference_To (Blk_Ent, Loc),\n              Handled_Statement_Sequence =>\n-               Make_Handled_Sequence_Of_Statements (Loc,\n-                 Statements => Astats),\n-             Has_Created_Identifier => True,\n+               Make_Handled_Sequence_Of_Statements (Loc, Statements => Astats),\n+             Has_Created_Identifier     => True,\n              Is_Asynchronous_Call_Block => True);\n \n          Insert_After (Call,\n@@ -7415,10 +7376,8 @@ package body Exp_Ch9 is\n                Make_Handled_Sequence_Of_Statements (Loc,\n                  Statements => New_List (\n                    Make_Implicit_Label_Declaration (Loc,\n-                     Defining_Identifier =>\n-                       Blk_Ent,\n-                     Label_Construct =>\n-                       Abortable_Block),\n+                     Defining_Identifier => Blk_Ent,\n+                     Label_Construct     => Abortable_Block),\n                    Abortable_Block),\n                  Exception_Handlers => Hdle)));\n \n@@ -7428,22 +7387,19 @@ package body Exp_Ch9 is\n \n          Append_To (Params,\n            New_Reference_To (RTE (RE_Asynchronous_Call), Loc));\n-         Append_To (Params,\n-           New_Reference_To (B, Loc));\n+         Append_To (Params, New_Reference_To (B, Loc));\n \n          Rewrite (Call,\n            Make_Procedure_Call_Statement (Loc,\n-             Name =>\n-               New_Reference_To (RTE (RE_Task_Entry_Call), Loc),\n+             Name => New_Reference_To (RTE (RE_Task_Entry_Call), Loc),\n              Parameter_Associations => Params));\n \n          --  Construct statement sequence for new block\n \n          Append_To (Stmts,\n            Make_Implicit_If_Statement (N,\n              Condition =>\n-               Make_Op_Not (Loc,\n-                 New_Reference_To (Cancel_Param, Loc)),\n+               Make_Op_Not (Loc, New_Reference_To (Cancel_Param, Loc)),\n              Then_Statements => Tstats));\n \n          --  Protected the call against abort\n@@ -7671,10 +7627,8 @@ package body Exp_Ch9 is\n                  New_Copy_Tree (Obj),            --  <object>\n                  New_Reference_To (S, Loc),      --  S\n                  Make_Attribute_Reference (Loc,  --  P'Address\n-                   Prefix =>\n-                     New_Reference_To (P, Loc),\n-                   Attribute_Name =>\n-                     Name_Address),\n+                   Prefix         => New_Reference_To (P, Loc),\n+                   Attribute_Name => Name_Address),\n                  New_Reference_To (C, Loc),      --  C\n                  New_Reference_To (B, Loc))));   --  B\n \n@@ -7694,7 +7648,7 @@ package body Exp_Ch9 is\n \n          if Present (Unpack) then\n             Append_To (Conc_Typ_Stmts,\n-              Make_If_Statement (Loc,\n+              Make_Implicit_If_Statement (N,\n \n                 Condition =>\n                   Make_Or_Else (Loc,\n@@ -7732,7 +7686,7 @@ package body Exp_Ch9 is\n          N_Stats := New_Copy_List_Tree (Statements (Alt));\n \n          Prepend_To (N_Stats,\n-           Make_If_Statement (Loc,\n+           Make_Implicit_If_Statement (N,\n              Condition =>\n                Make_Or_Else (Loc,\n                  Left_Opnd =>\n@@ -7764,8 +7718,8 @@ package body Exp_Ch9 is\n                New_List (Blk)));\n \n          Append_To (Conc_Typ_Stmts,\n-           Make_If_Statement (Loc,\n-             Condition => New_Reference_To (B, Loc),\n+           Make_Implicit_If_Statement (N,\n+             Condition       => New_Reference_To (B, Loc),\n              Then_Statements => N_Stats,\n              Else_Statements => Else_Statements (N)));\n \n@@ -7784,7 +7738,7 @@ package body Exp_Ch9 is\n          --    end if;\n \n          Append_To (Stmts,\n-           Make_If_Statement (Loc,\n+           Make_Implicit_If_Statement (N,\n              Condition =>\n                Make_Op_Eq (Loc,\n                  Left_Opnd =>\n@@ -7805,7 +7759,7 @@ package body Exp_Ch9 is\n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc, Stmts)));\n \n-      --  As described above, The entry alternative is transformed into a\n+      --  As described above, the entry alternative is transformed into a\n       --  block that contains the gnulli call, and possibly assignment\n       --  statements for in-out parameters. The gnulli call may itself be\n       --  rewritten into a transient block if some unconstrained parameters\n@@ -7882,7 +7836,7 @@ package body Exp_Ch9 is\n             Prepend_To (Declarations (Blk),\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => B,\n-                Object_Definition =>\n+                Object_Definition   =>\n                   New_Reference_To (Standard_Boolean, Loc)));\n \n             --  Create new call statement\n@@ -7900,7 +7854,7 @@ package body Exp_Ch9 is\n \n             Append_To (Stmts,\n               Make_Implicit_If_Statement (N,\n-                Condition => New_Reference_To (B, Loc),\n+                Condition       => New_Reference_To (B, Loc),\n                 Then_Statements => Statements (Alt),\n                 Else_Statements => Else_Statements (N)));\n          end if;\n@@ -9714,7 +9668,7 @@ package body Exp_Ch9 is\n             --    or else C = POK_Task_Entry\n             --  then\n \n-           Make_If_Statement (Loc,\n+           Make_Implicit_If_Statement (N,\n              Condition =>\n                Make_Op_Or (Loc,\n                  Left_Opnd =>\n@@ -10022,8 +9976,8 @@ package body Exp_Ch9 is\n       Alts           : constant List_Id    := Select_Alternatives (N);\n \n       --  Note: in the below declarations a lot of new lists are allocated\n-      --  unconditionally which may well not end up being used. That's\n-      --  not a good idea since it wastes space gratuitously ???\n+      --  unconditionally which may well not end up being used. That's not\n+      --  a good idea since it wastes space gratuitously ???\n \n       Accept_Case    : List_Id;\n       Accept_List    : constant List_Id := New_List;\n@@ -10033,7 +9987,6 @@ package body Exp_Ch9 is\n       Alt_Stats      : List_Id;\n       Ann            : Entity_Id := Empty;\n \n-      Block          : Node_Id;\n       Check_Guard    : Boolean := True;\n \n       Decls          : constant List_Id := New_List;\n@@ -10066,9 +10019,7 @@ package body Exp_Ch9 is\n       Num_Alts       : Int;\n       Num_Accept     : Nat := 0;\n       Proc           : Node_Id;\n-      Q              : Node_Id;\n       Time_Type      : Entity_Id;\n-      X              : Node_Id;\n       Select_Call    : Node_Id;\n \n       Qnam : constant Entity_Id :=\n@@ -10152,25 +10103,24 @@ package body Exp_Ch9 is\n \n          Stats := New_List (\n            Make_Implicit_Loop_Statement (N,\n-             Identifier => Empty,\n              Iteration_Scheme =>\n                Make_Iteration_Scheme (Loc,\n                  Loop_Parameter_Specification =>\n                    Make_Loop_Parameter_Specification (Loc,\n-                     Defining_Identifier => J,\n+                     Defining_Identifier         => J,\n                      Discrete_Subtype_Definition =>\n                        Make_Attribute_Reference (Loc,\n-                         Prefix => New_Reference_To (Qnam, Loc),\n+                         Prefix         => New_Reference_To (Qnam, Loc),\n                          Attribute_Name => Name_Range,\n-                         Expressions => New_List (\n+                         Expressions    => New_List (\n                            Make_Integer_Literal (Loc, 1))))),\n \n-             Statements => New_List (\n+             Statements       => New_List (\n                Make_Implicit_If_Statement (N,\n-                 Condition =>  Cond,\n+                 Condition       =>  Cond,\n                  Then_Statements => New_List (\n                    Make_Select_Call (\n-                    New_Reference_To (RTE (RE_Simple_Mode), Loc)),\n+                     New_Reference_To (RTE (RE_Simple_Mode), Loc)),\n                    Make_Exit_Statement (Loc))))));\n \n          Append_To (Stats,\n@@ -10238,12 +10188,12 @@ package body Exp_Ch9 is\n \n             Proc_Body :=\n               Make_Subprogram_Body (Eloc,\n-                Specification =>\n+                Specification              =>\n                   Make_Procedure_Specification (Eloc,\n                     Defining_Unit_Name => PB_Ent),\n-               Declarations => Declarations (Acc_Stm),\n-               Handled_Statement_Sequence =>\n-                 Build_Accept_Body (Accept_Statement (Alt)));\n+                Declarations               => Declarations (Acc_Stm),\n+                Handled_Statement_Sequence =>\n+                  Build_Accept_Body (Accept_Statement (Alt)));\n \n             --  During the analysis of the body of the accept statement, any\n             --  zero cost exception handler records were collected in the\n@@ -10287,7 +10237,7 @@ package body Exp_Ch9 is\n            Make_Implicit_Label_Declaration (Loc,\n              Defining_Identifier  =>\n                Make_Defining_Identifier (Loc, Chars (Lab_Id)),\n-             Label_Construct => Lab));\n+             Label_Construct      => Lab));\n \n          return Lab;\n       end Make_And_Declare_Label;\n@@ -10302,11 +10252,11 @@ package body Exp_Ch9 is\n       begin\n          Append (\n            Make_Attribute_Reference (Loc,\n-             Prefix => New_Reference_To (Qnam, Loc),\n+             Prefix         => New_Reference_To (Qnam, Loc),\n              Attribute_Name => Name_Unchecked_Access),\n            Params);\n-         Append (Select_Mode, Params);\n-         Append (New_Reference_To (Ann, Loc), Params);\n+         Append (Select_Mode,                  Params);\n+         Append (New_Reference_To (Ann, Loc),  Params);\n          Append (New_Reference_To (Xnam, Loc), Params);\n \n          return\n@@ -10325,13 +10275,14 @@ package body Exp_Ch9 is\n          Proc  : Node_Id)\n       is\n          Choices   : List_Id := No_List;\n+         Astmt     : constant Node_Id := Accept_Statement (Alt);\n          Alt_Stats : List_Id;\n \n       begin\n          Adjust_Condition (Condition (Alt));\n          Alt_Stats := No_List;\n \n-         if Present (Handled_Statement_Sequence (Accept_Statement (Alt))) then\n+         if Present (Handled_Statement_Sequence (Astmt)) then\n             Choices := New_List (\n               Make_Integer_Literal (Loc, Index));\n \n@@ -10341,43 +10292,37 @@ package body Exp_Ch9 is\n                   Defining_Unit_Name (Specification (Proc)), Sloc (Proc))));\n          end if;\n \n-         if Statements (Alt) /= Empty_List then\n+         if No (Alt_Stats) then\n \n-            if No (Alt_Stats) then\n+            --  Accept with no body, followed by trailing statements\n \n-               --  Accept with no body, followed by trailing statements\n+            Choices := New_List (Make_Integer_Literal (Loc, Index));\n \n-               Choices := New_List (\n-                 Make_Integer_Literal (Loc, Index));\n-\n-               Alt_Stats := New_List;\n-            end if;\n+            Alt_Stats := New_List;\n+         end if;\n \n-            --  After the call, if any, branch to trailing statements. We\n-            --  create a label for each, as well as the corresponding label\n-            --  declaration.\n+         --  After the call, if any, branch to trailing statements, if any.\n+         --  We create a label for each, as well as the corresponding label\n+         --  declaration.\n \n+         if not Is_Empty_List (Statements (Alt)) then\n             Lab := Make_And_Declare_Label (Index);\n-            Append_To (Alt_Stats,\n-              Make_Goto_Statement (Loc,\n-                Name => New_Copy (Identifier (Lab))));\n-\n             Append (Lab, Trailing_List);\n             Append_List (Statements (Alt), Trailing_List);\n             Append_To (Trailing_List,\n               Make_Goto_Statement (Loc,\n                 Name => New_Copy (Identifier (End_Lab))));\n+         else\n+            Lab := End_Lab;\n          end if;\n \n-         if Present (Alt_Stats) then\n-\n-            --  Procedure call. and/or trailing statements\n+         Append_To (Alt_Stats,\n+           Make_Goto_Statement (Loc, Name => New_Copy (Identifier (Lab))));\n \n-            Append_To (Alt_List,\n-              Make_Case_Statement_Alternative (Loc,\n-                Discrete_Choices => Choices,\n-                Statements => Alt_Stats));\n-         end if;\n+         Append_To (Alt_List,\n+           Make_Case_Statement_Alternative (Loc,\n+             Discrete_Choices => Choices,\n+             Statements       => Alt_Stats));\n       end Process_Accept_Alternative;\n \n       -------------------------------\n@@ -10409,14 +10354,12 @@ package body Exp_Ch9 is\n \n          --  The enclosing if-statement is omitted if there is no guard\n \n-         if Delay_Count = 1\n-           or else First_Delay\n-         then\n+         if Delay_Count = 1 or else First_Delay then\n             First_Delay := False;\n \n             Delay_Alt := New_List (\n               Make_Assignment_Statement (Loc,\n-                Name => New_Reference_To (Delay_Min, Loc),\n+                Name       => New_Reference_To (Delay_Min, Loc),\n                 Expression => Expression (Delay_Statement (Alt))));\n \n             if Delay_Count > 1 then\n@@ -10429,7 +10372,7 @@ package body Exp_Ch9 is\n          else\n             Delay_Alt := New_List (\n               Make_Assignment_Statement (Loc,\n-                Name => New_Reference_To (Delay_Val, Loc),\n+                Name       => New_Reference_To (Delay_Val, Loc),\n                 Expression => Expression (Delay_Statement (Alt))));\n \n             if Time_Type = Standard_Duration then\n@@ -10447,10 +10390,11 @@ package body Exp_Ch9 is\n                Cond :=\n                  Make_Function_Call (Loc,\n                    Name => Make_Selected_Component (Loc,\n-                     Prefix => New_Reference_To (Scope (Time_Type), Loc),\n+                     Prefix        =>\n+                       New_Reference_To (Scope (Time_Type), Loc),\n                      Selector_Name =>\n                        Make_Operator_Symbol (Loc,\n-                         Chars => Name_Op_Lt,\n+                         Chars  => Name_Op_Lt,\n                          Strval => No_String)),\n                     Parameter_Associations =>\n                       New_List (\n@@ -10476,14 +10420,14 @@ package body Exp_Ch9 is\n          if Check_Guard then\n             Append_To (Delay_Alt,\n               Make_Assignment_Statement (Loc,\n-                Name => New_Reference_To (Guard_Open, Loc),\n+                Name       => New_Reference_To (Guard_Open, Loc),\n                 Expression => New_Reference_To (Standard_True, Loc)));\n          end if;\n \n          if Present (Condition (Alt)) then\n             Delay_Alt := New_List (\n               Make_Implicit_If_Statement (N,\n-                Condition => Condition (Alt),\n+                Condition       => Condition (Alt),\n                 Then_Statements => Delay_Alt));\n          end if;\n \n@@ -10492,19 +10436,18 @@ package body Exp_Ch9 is\n          --  If the delay alternative has a statement part, add choice to the\n          --  case statements for delays.\n \n-         if Present (Statements (Alt)) then\n+         if not Is_Empty_List (Statements (Alt)) then\n \n             if Delay_Count = 1 then\n                Append_List (Statements (Alt), Delay_Alt_List);\n \n             else\n-               Choices := New_List (\n-                 Make_Integer_Literal (Loc, Index));\n+               Choices := New_List (Make_Integer_Literal (Loc, Index));\n \n                Append_To (Delay_Alt_List,\n                  Make_Case_Statement_Alternative (Loc,\n                    Discrete_Choices => Choices,\n-                   Statements => Statements (Alt)));\n+                   Statements       => Statements (Alt)));\n             end if;\n \n          elsif Delay_Count = 1 then\n@@ -10609,36 +10552,30 @@ package body Exp_Ch9 is\n       --  If a guard is statically known to be false, the entry can simply\n       --  be omitted from the accept list.\n \n-      Q :=\n+      Append_To (Decls,\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Qnam,\n-          Object_Definition =>\n-            New_Reference_To (RTE (RE_Accept_List), Loc),\n-          Aliased_Present => True,\n-\n-          Expression =>\n+          Object_Definition   => New_Reference_To (RTE (RE_Accept_List), Loc),\n+          Aliased_Present     => True,\n+          Expression          =>\n              Make_Qualified_Expression (Loc,\n                Subtype_Mark =>\n                  New_Reference_To (RTE (RE_Accept_List), Loc),\n-               Expression =>\n-                 Make_Aggregate (Loc, Expressions => Accept_List)));\n-\n-      Append (Q, Decls);\n+               Expression   =>\n+                 Make_Aggregate (Loc, Expressions => Accept_List))));\n \n       --  Then we declare the variable that holds the index for the accept\n       --  that will be selected for service:\n \n       --    Xnn : Select_Index;\n \n-      X :=\n+      Append_To (Decls,\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Xnam,\n           Object_Definition =>\n             New_Reference_To (RTE (RE_Select_Index), Loc),\n           Expression =>\n-            New_Reference_To (RTE (RE_No_Rendezvous), Loc));\n-\n-      Append (X, Decls);\n+            New_Reference_To (RTE (RE_No_Rendezvous), Loc)));\n \n       --  After this follow procedure declarations for each accept body\n \n@@ -10744,7 +10681,7 @@ package body Exp_Ch9 is\n             Append_To (Decls,\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => D,\n-                Object_Definition =>\n+                Object_Definition   =>\n                   New_Reference_To (Standard_Duration, Loc)));\n \n             Append_To (Decls,\n@@ -10860,7 +10797,7 @@ package body Exp_Ch9 is\n       Append_To (Alt_List,\n         Make_Case_Statement_Alternative (Loc,\n           Discrete_Choices => Choices,\n-          Statements => Alt_Stats));\n+          Statements       => Alt_Stats));\n \n       --  We make use of the fact that Accept_Index is an integer type, and\n       --  generate successive literals for entries for each accept. Only those\n@@ -10905,7 +10842,6 @@ package body Exp_Ch9 is\n           Alternatives => Alt_List));\n \n       Append_List (Trailing_List, Accept_Case);\n-      Append (End_Lab, Accept_Case);\n       Append_List (Body_List, Decls);\n \n       --  Construct case statement for trailing statements of delay\n@@ -10978,17 +10914,15 @@ package body Exp_Ch9 is\n             end if;\n \n             Stmt := Make_Assignment_Statement (Loc,\n-              Name => New_Reference_To (D, Loc),\n+              Name       => New_Reference_To (D, Loc),\n               Expression => Conv);\n \n             --  Change the value for Accept_Modes. (Else_Mode -> Delay_Mode)\n \n             Parms := Parameter_Associations (Select_Call);\n             Parm := First (Parms);\n \n-            while Present (Parm)\n-              and then Parm /= Select_Mode\n-            loop\n+            while Present (Parm) and then Parm /= Select_Mode loop\n                Next (Parm);\n             end loop;\n \n@@ -11018,10 +10952,10 @@ package body Exp_Ch9 is\n             if Check_Guard then\n                Stmt :=\n                  Make_Implicit_If_Statement (N,\n-                   Condition => New_Reference_To (Guard_Open, Loc),\n-                   Then_Statements =>\n-                     New_List (New_Copy_Tree (Stmt),\n-                       New_Copy_Tree (Select_Call)),\n+                   Condition       => New_Reference_To (Guard_Open, Loc),\n+                   Then_Statements => New_List (\n+                     New_Copy_Tree (Stmt),\n+                     New_Copy_Tree (Select_Call)),\n                    Else_Statements => Accept_Or_Raise);\n                Rewrite (Select_Call, Stmt);\n             else\n@@ -11041,17 +10975,15 @@ package body Exp_Ch9 is\n             Append (Cases, Stats);\n          end;\n       end if;\n+      Append (End_Lab, Stats);\n \n       --  Replace accept statement with appropriate block\n \n-      Block :=\n+      Rewrite (N,\n         Make_Block_Statement (Loc,\n-          Declarations => Decls,\n+          Declarations               => Decls,\n           Handled_Statement_Sequence =>\n-            Make_Handled_Sequence_Of_Statements (Loc,\n-              Statements => Stats));\n-\n-      Rewrite (N, Block);\n+            Make_Handled_Sequence_Of_Statements (Loc, Statements => Stats)));\n       Analyze (N);\n \n       --  Note: have to worry more about abort deferral in above code ???\n@@ -11804,11 +11736,11 @@ package body Exp_Ch9 is\n    --        T.E;\n    --        S1;\n    --     or\n-   --        Delay D;\n+   --        delay D;\n    --        S2;\n    --     end select;\n \n-   --  is expanded as follow:\n+   --  is expanded as follows:\n \n    --  1) When T.E is a task entry_call;\n \n@@ -11909,14 +11841,16 @@ package body Exp_Ch9 is\n       Call_Ent       : Entity_Id;\n       Conc_Typ_Stmts : List_Id;\n       Concval        : Node_Id;\n+      D_Alt          : constant Node_Id := Delay_Alternative (N);\n       D_Conv         : Node_Id;\n       D_Disc         : Node_Id;\n-      D_Stat         : Node_Id;\n+      D_Stat         : Node_Id := Delay_Statement (D_Alt);\n       D_Stats        : List_Id;\n       D_Type         : Entity_Id;\n       Decls          : List_Id;\n       Dummy          : Node_Id;\n-      E_Call         : Node_Id;\n+      E_Alt          : constant Node_Id := Entry_Call_Alternative (N);\n+      E_Call         : Node_Id := Entry_Call_Statement (E_Alt);\n       E_Stats        : List_Id;\n       Ename          : Node_Id;\n       Formals        : List_Id;\n@@ -11947,17 +11881,14 @@ package body Exp_Ch9 is\n          return;\n       end if;\n \n-      E_Call := Entry_Call_Statement (Entry_Call_Alternative (N));\n-      D_Stat := Delay_Statement (Delay_Alternative (N));\n-\n-      Process_Statements_For_Controlled_Objects (Entry_Call_Alternative (N));\n-      Process_Statements_For_Controlled_Objects (Delay_Alternative (N));\n+      Process_Statements_For_Controlled_Objects (E_Alt);\n+      Process_Statements_For_Controlled_Objects (D_Alt);\n \n       --  Retrieve E_Stats and D_Stats now because the finalization machinery\n       --  may wrap them in blocks.\n \n-      E_Stats := Statements (Entry_Call_Alternative (N));\n-      D_Stats := Statements (Delay_Alternative (N));\n+      E_Stats := Statements (E_Alt);\n+      D_Stats := Statements (D_Alt);\n \n       --  The arguments in the call may require dynamic allocation, and the\n       --  call statement may have been transformed into a block. The block\n@@ -12155,7 +12086,7 @@ package body Exp_Ch9 is\n \n          if Present (Unpack) then\n             Append_To (Conc_Typ_Stmts,\n-              Make_If_Statement (Loc,\n+              Make_Implicit_If_Statement (N,\n \n                 Condition       =>\n                   Make_Or_Else (Loc,\n@@ -12192,7 +12123,7 @@ package body Exp_Ch9 is\n          N_Stats := Copy_Separate_List (E_Stats);\n \n          Prepend_To (N_Stats,\n-           Make_If_Statement (Loc,\n+           Make_Implicit_If_Statement (N,\n \n              Condition =>\n                Make_Or_Else (Loc,\n@@ -12220,7 +12151,7 @@ package body Exp_Ch9 is\n              Then_Statements => New_List (E_Call)));\n \n          Append_To (Conc_Typ_Stmts,\n-           Make_If_Statement (Loc,\n+           Make_Implicit_If_Statement (N,\n              Condition       => New_Reference_To (B, Loc),\n              Then_Statements => N_Stats,\n              Else_Statements => D_Stats));\n@@ -12240,7 +12171,7 @@ package body Exp_Ch9 is\n          --    end if;\n \n          Append_To (Stmts,\n-           Make_If_Statement (Loc,\n+           Make_Implicit_If_Statement (N,\n              Condition       =>\n                Make_Op_Eq (Loc,\n                  Left_Opnd  => New_Reference_To (K, Loc),"}, {"sha": "a25ba1c8026d58442ade7defb944e4132d02660d", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70805b8834c831e0df8241ee883b6d14c923f58e/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70805b8834c831e0df8241ee883b6d14c923f58e/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=70805b8834c831e0df8241ee883b6d14c923f58e", "patch": "@@ -1041,8 +1041,9 @@ package body Freeze is\n          Comp_Type := Etype (Comp);\n          Comp_Def  := Component_Definition (Parent (Comp));\n \n-         Comp_Byte_Aligned := Present (Component_Clause (Comp))\n-           and then Normalized_First_Bit (Comp) mod System_Storage_Unit = 0;\n+         Comp_Byte_Aligned :=\n+           Present (Component_Clause (Comp))\n+             and then Normalized_First_Bit (Comp) mod System_Storage_Unit = 0;\n \n       --  Array case\n "}, {"sha": "88bad49f76ec7f56a175d66228d75eca827afeca", "filename": "gcc/ada/s-fileio.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70805b8834c831e0df8241ee883b6d14c923f58e/gcc%2Fada%2Fs-fileio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70805b8834c831e0df8241ee883b6d14c923f58e/gcc%2Fada%2Fs-fileio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fileio.adb?ref=70805b8834c831e0df8241ee883b6d14c923f58e", "patch": "@@ -626,7 +626,6 @@ package body System.File_IO is\n          then\n             Start := J + 1;\n             Stop := Start - 1;\n-\n             while Form (Stop + 1) /= ASCII.NUL\n               and then Form (Stop + 1) /= ','\n             loop"}, {"sha": "d68eeaffe8685eefeb34ae469fc1b46fdc5af8a3", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70805b8834c831e0df8241ee883b6d14c923f58e/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70805b8834c831e0df8241ee883b6d14c923f58e/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=70805b8834c831e0df8241ee883b6d14c923f58e", "patch": "@@ -48,6 +48,7 @@ with Sem_Ch6;  use Sem_Ch6;\n with Sem_Ch8;  use Sem_Ch8;\n with Sem_Ch9;  use Sem_Ch9;\n with Sem_Dim;  use Sem_Dim;\n+with Sem_Disp; use Sem_Disp;\n with Sem_Eval; use Sem_Eval;\n with Sem_Res;  use Sem_Res;\n with Sem_Type; use Sem_Type;\n@@ -4322,6 +4323,46 @@ package body Sem_Ch13 is\n          end;\n       end if;\n \n+      --  Check Ada derivation of CPP type\n+\n+      if Expander_Active\n+        and then Tagged_Type_Expansion\n+        and then Ekind (E) = E_Record_Type\n+        and then Etype (E) /= E\n+        and then Is_CPP_Class (Etype (E))\n+        and then CPP_Num_Prims (Etype (E)) > 0\n+        and then not Is_CPP_Class (E)\n+        and then not Has_CPP_Constructors (Etype (E))\n+      then\n+         --  If the parent has C++ primitives but it has no constructor then\n+         --  check that all the primitives are overridden in this derivation;\n+         --  otherwise the constructor of the parent is needed to build the\n+         --  dispatch table.\n+\n+         declare\n+            Elmt : Elmt_Id;\n+            Prim : Node_Id;\n+\n+         begin\n+            Elmt := First_Elmt (Primitive_Operations (E));\n+            while Present (Elmt) loop\n+               Prim := Node (Elmt);\n+\n+               if not Is_Abstract_Subprogram (Prim)\n+                 and then No (Interface_Alias (Prim))\n+                 and then Find_Dispatching_Type (Ultimate_Alias (Prim)) /= E\n+               then\n+                  Error_Msg_Name_1 := Chars (Etype (E));\n+                  Error_Msg_N\n+                    (\"'C'P'P constructor required for parent type %\", E);\n+                  exit;\n+               end if;\n+\n+               Next_Elmt (Elmt);\n+            end loop;\n+         end;\n+      end if;\n+\n       Inside_Freezing_Actions := Inside_Freezing_Actions - 1;\n \n       --  If we have a type with predicates, build predicate function"}, {"sha": "32ac44acffdb97494361c98001654153fa586f2f", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70805b8834c831e0df8241ee883b6d14c923f58e/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70805b8834c831e0df8241ee883b6d14c923f58e/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=70805b8834c831e0df8241ee883b6d14c923f58e", "patch": "@@ -218,12 +218,12 @@ package body Sem_Eval is\n    --  If Fold and Stat are both set to False then this routine performs also\n    --  the following extra actions:\n    --\n-   --    * If either operand is Any_Type then propagate it to result to\n-   --      prevent cascaded errors.\n+   --    If either operand is Any_Type then propagate it to result to\n+   --    prevent cascaded errors.\n    --\n-   --    * If some operand raises constraint error, then replace the node N\n-   --      with the raise constraint error node. This replacement inherits the\n-   --      Is_Static_Expression flag from the operands.\n+   --    If some operand raises constraint error, then replace the node N\n+   --    with the raise constraint error node. This replacement inherits the\n+   --    Is_Static_Expression flag from the operands.\n \n    procedure Test_Expression_Is_Foldable\n      (N    : Node_Id;"}, {"sha": "dc0ae4ed9f7e75828ce06b2ce309562af521c60b", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 16, "deletions": 99, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70805b8834c831e0df8241ee883b6d14c923f58e/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70805b8834c831e0df8241ee883b6d14c923f58e/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=70805b8834c831e0df8241ee883b6d14c923f58e", "patch": "@@ -4690,6 +4690,12 @@ package body Sem_Prag is\n                   Get_Pragma_Arg (Arg2));\n             end if;\n \n+            if Etype (Def_Id) /= Def_Id\n+              and then not Is_CPP_Class (Root_Type (Def_Id))\n+            then\n+               Error_Msg_N (\"root type must be a 'C'P'P type\", Arg1);\n+            end if;\n+\n             Set_Is_CPP_Class (Def_Id);\n \n             --  Imported CPP types must not have discriminants (because C++\n@@ -7651,108 +7657,13 @@ package body Sem_Prag is\n          --  pragma CPP_Class ([Entity =>] local_NAME)\n \n          when Pragma_CPP_Class => CPP_Class : declare\n-            Arg : Node_Id;\n-            Typ : Entity_Id;\n-\n          begin\n-            if Warn_On_Obsolescent_Feature then\n-               Error_Msg_N\n-                 (\"'G'N'A'T pragma cpp'_class is now obsolete; replace it\" &\n-                  \" by pragma import?\", N);\n-            end if;\n-\n             GNAT_Pragma;\n-            Check_Arg_Count (1);\n-            Check_Optional_Identifier (Arg1, Name_Entity);\n-            Check_Arg_Is_Local_Name (Arg1);\n-\n-            Arg := Get_Pragma_Arg (Arg1);\n-            Analyze (Arg);\n-\n-            if Etype (Arg) = Any_Type then\n-               return;\n-            end if;\n-\n-            if not Is_Entity_Name (Arg)\n-              or else not Is_Type (Entity (Arg))\n-            then\n-               Error_Pragma_Arg (\"pragma% requires a type mark\", Arg1);\n-            end if;\n-\n-            Typ := Entity (Arg);\n-\n-            if not Is_Tagged_Type (Typ) then\n-               Error_Pragma_Arg (\"pragma% applicable to tagged types \", Arg1);\n-            end if;\n-\n-            --  Types treated as CPP classes must be declared limited (note:\n-            --  this used to be a warning but there is no real benefit to it\n-            --  since we did effectively intend to treat the type as limited\n-            --  anyway).\n \n-            if not Is_Limited_Type (Typ) then\n-               Error_Msg_N\n-                 (\"imported 'C'P'P type must be limited\",\n-                  Get_Pragma_Arg (Arg1));\n-            end if;\n-\n-            Set_Is_CPP_Class (Typ);\n-            Set_Convention (Typ, Convention_CPP);\n-\n-            --  Imported CPP types must not have discriminants (because C++\n-            --  classes do not have discriminants).\n-\n-            if Has_Discriminants (Typ) then\n+            if Warn_On_Obsolescent_Feature then\n                Error_Msg_N\n-                 (\"imported 'C'P'P type cannot have discriminants\",\n-                  First (Discriminant_Specifications\n-                          (Declaration_Node (Typ))));\n-            end if;\n-\n-            --  Components of imported CPP types must not have default\n-            --  expressions because the constructor (if any) is in the\n-            --  C++ side.\n-\n-            if Is_Incomplete_Or_Private_Type (Typ)\n-              and then No (Underlying_Type (Typ))\n-            then\n-               --  It should be an error to apply pragma CPP to a private\n-               --  type if the underlying type is not visible (as it is\n-               --  for any representation item). For now, for backward\n-               --  compatibility we do nothing but we cannot check components\n-               --  because they are not available at this stage. All this code\n-               --  will be removed when we cleanup this obsolete GNAT pragma???\n-\n-               null;\n-\n-            else\n-               declare\n-                  Tdef  : constant Node_Id :=\n-                            Type_Definition (Declaration_Node (Typ));\n-                  Clist : Node_Id;\n-                  Comp  : Node_Id;\n-\n-               begin\n-                  if Nkind (Tdef) = N_Record_Definition then\n-                     Clist := Component_List (Tdef);\n-                  else\n-                     pragma Assert (Nkind (Tdef) = N_Derived_Type_Definition);\n-                     Clist := Component_List (Record_Extension_Part (Tdef));\n-                  end if;\n-\n-                  if Present (Clist) then\n-                     Comp := First (Component_Items (Clist));\n-                     while Present (Comp) loop\n-                        if Present (Expression (Comp)) then\n-                           Error_Msg_N\n-                             (\"component of imported 'C'P'P type cannot have\" &\n-                              \" default expression\", Expression (Comp));\n-                        end if;\n-\n-                        Next (Comp);\n-                     end loop;\n-                  end if;\n-               end;\n+                 (\"'G'N'A'T pragma cpp'_class is now obsolete and has no \" &\n+                  \"effect; replace it by pragma import?\", N);\n             end if;\n          end CPP_Class;\n \n@@ -7802,6 +7713,12 @@ package body Sem_Prag is\n                                    and then\n                                   Is_CPP_Class (Root_Type (Etype (Def_Id)))))\n             then\n+               if Scope (Def_Id) /= Scope (Etype (Def_Id)) then\n+                  Error_Msg_N\n+                    (\"'C'P'P constructor must be defined in the scope of \" &\n+                     \"its returned type\", Arg1);\n+               end if;\n+\n                if Arg_Count >= 2 then\n                   Set_Imported (Def_Id);\n                   Set_Is_Public (Def_Id);\n@@ -7822,8 +7739,8 @@ package body Sem_Prag is\n \n                if Is_Tagged_Type (Etype (Def_Id))\n                  and then not Is_Class_Wide_Type (Etype (Def_Id))\n+                 and then Is_Dispatching_Operation (Def_Id)\n                then\n-                  pragma Assert (Is_Dispatching_Operation (Def_Id));\n                   Tag_Typ := Etype (Def_Id);\n \n                   Elmt := First_Elmt (Primitive_Operations (Tag_Typ));"}]}