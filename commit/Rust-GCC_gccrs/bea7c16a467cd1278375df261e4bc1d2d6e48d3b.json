{"sha": "bea7c16a467cd1278375df261e4bc1d2d6e48d3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVhN2MxNmE0NjdjZDEyNzgzNzVkZjI2MWU0YmMxZDJkNmU0OGQzYg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-02T00:16:47Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-02T00:16:47Z"}, "message": "Daily bump.", "tree": {"sha": "1d9fe0195f9ab7c7e56598ac9958bcf88b4bb9c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d9fe0195f9ab7c7e56598ac9958bcf88b4bb9c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bea7c16a467cd1278375df261e4bc1d2d6e48d3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea7c16a467cd1278375df261e4bc1d2d6e48d3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bea7c16a467cd1278375df261e4bc1d2d6e48d3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea7c16a467cd1278375df261e4bc1d2d6e48d3b/comments", "author": null, "committer": null, "parents": [{"sha": "1a4b2224b8a13c999b99cbf1e452db1fb3d6662e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a4b2224b8a13c999b99cbf1e452db1fb3d6662e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a4b2224b8a13c999b99cbf1e452db1fb3d6662e"}], "stats": {"total": 393, "additions": 392, "deletions": 1}, "files": [{"sha": "5fb0b87be34d4bf566058e158edea34bf42870f0", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea7c16a467cd1278375df261e4bc1d2d6e48d3b/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea7c16a467cd1278375df261e4bc1d2d6e48d3b/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=bea7c16a467cd1278375df261e4bc1d2d6e48d3b", "patch": "@@ -1,3 +1,7 @@\n+2021-07-01  Ankur Saini  <arsenic@sourceware.org>\n+\n+\t* MAINTAINERS: Add myself for write after approval.\n+\n 2021-06-30  Xi Ruoyao  <xry111@mengyan1223.wang>\n \n \t* MAINTAINERS (Write After Approval): Add myself."}, {"sha": "b514c21d4834ff31deac493d1c64482a87ef3dfd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 217, "deletions": 0, "changes": 217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea7c16a467cd1278375df261e4bc1d2d6e48d3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea7c16a467cd1278375df261e4bc1d2d6e48d3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bea7c16a467cd1278375df261e4bc1d2d6e48d3b", "patch": "@@ -1,3 +1,220 @@\n+2021-07-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic.h (diagnostic_context::m_file_cache): New field.\n+\t* input.c (class fcache): Rename to...\n+\t(class file_cache_slot): ...this, making most members private and\n+\tprefixing fields with \"m_\".\n+\t(file_cache_slot::get_file_path): New accessor.\n+\t(file_cache_slot::get_use_count): New accessor.\n+\t(file_cache_slot::missing_trailing_newline_p): New accessor.\n+\t(file_cache_slot::inc_use_count): New.\n+\t(fcache_buffer_size): Move to...\n+\t(file_cache_slot::buffer_size): ...here.\n+\t(fcache_line_record_size): Move to...\n+\t(file_cache_slot::line_record_size): ...here.\n+\t(fcache_tab): Delete, in favor of global_dc->m_file_cache.\n+\t(fcache_tab_size): Move to file_cache::num_file_slots.\n+\t(diagnostic_file_cache_init): Update for move of fcache_tab\n+\tto global_dc->m_file_cache.\n+\t(diagnostic_file_cache_fini): Likewise.\n+\t(lookup_file_in_cache_tab): Convert to...\n+\t(file_cache::lookup_file): ...this.\n+\t(diagnostics_file_cache_forcibly_evict_file): Update for move of\n+\tfcache_tab to global_dc->m_file_cache, moving most of\n+\timplementation to...\n+\t(file_cache::forcibly_evict_file): ...this new function and...\n+\t(file_cache_slot::evict): ...this new function.\n+\t(evicted_cache_tab_entry): Convert to...\n+\t(file_cache::evicted_cache_tab_entry): ...this.\n+\t(add_file_to_cache_tab): Convert to...\n+\t(file_cache::add_file): ...this, moving bulk of implementation\n+\tto...\n+\t(file_cache_slot::create): ..this new function.\n+\t(file_cache::file_cache): New.\n+\t(file_cache::~file_cache): New.\n+\t(lookup_or_add_file_to_cache_tab): Convert to...\n+\t(file_cache::lookup_or_add_file): ..this new function.\n+\t(fcache::fcache): Rename to...\n+\t(file_cache_slot::file_cache_slot): ...this, adding \"m_\" prefixes\n+\tto fields.\n+\t(fcache::~fcache): Rename to...\n+\t(file_cache_slot::~file_cache_slot): ...this, adding \"m_\" prefixes\n+\tto fields.\n+\t(needs_read): Convert to...\n+\t(file_cache_slot::needs_read_p): ...this.\n+\t(needs_grow): Convert to...\n+\t(file_cache_slot::needs_grow_p): ...this.\n+\t(maybe_grow): Convert to...\n+\t(file_cache_slot::maybe_grow): ...this.\n+\t(read_data): Convert to...\n+\t(file_cache_slot::read_data): ...this.\n+\t(maybe_read_data): Convert to...\n+\t(file_cache_slot::maybe_read_data): ...this.\n+\t(get_next_line): Convert to...\n+\t(file_cache_slot::get_next_line): ...this.\n+\t(goto_next_line): Convert to...\n+\t(file_cache_slot::goto_next_line): ...this.\n+\t(read_line_num): Convert to...\n+\t(file_cache_slot::read_line_num): ...this.\n+\t(location_get_source_line): Update for moving of globals to\n+\tglobal_dc->m_file_cache.\n+\t(location_missing_trailing_newline): Likewise.\n+\t* input.h (class file_cache_slot): New forward decl.\n+\t(class file_cache): New.\n+\n+2021-07-01  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_maybe_emit_fp_cmove): Add IEEE\n+\t128-bit floating point conditional move support.\n+\t(have_compare_and_set_mask): Add IEEE 128-bit floating point\n+\ttypes.\n+\t* config/rs6000/rs6000.md (mov<mode>cc, IEEE128 iterator): New insn.\n+\t(mov<mode>cc_p10, IEEE128 iterator): New insn.\n+\t(mov<mode>cc_invert_p10, IEEE128 iterator): New insn.\n+\t(fpmask<mode>, IEEE128 iterator): New insn.\n+\t(xxsel<mode>, IEEE128 iterator): New insn.\n+\n+2021-07-01  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR debug/101283\n+\t* config/darwin.h (CTF_INFO_SECTION_NAME): New.\n+\n+2021-07-01  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* config/i386/i386-expand.c (ix86_expand_vector_init_duplicate):\n+\tMake it global.\n+\t* config/i386/i386-protos.h (ix86_expand_vector_init_duplicate):\n+\tNew prototype.\n+\t* config/i386/sse.md (INT_BROADCAST_MODE): New mode iterator.\n+\t(vec_duplicate<mode>): New expander.\n+\n+2021-07-01  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/100865\n+\t* config/i386/i386-expand.c (ix86_expand_vector_init_duplicate):\n+\tNew prototype.\n+\t(ix86_byte_broadcast): New function.\n+\t(ix86_convert_const_wide_int_to_broadcast): Likewise.\n+\t(ix86_expand_move): Convert CONST_WIDE_INT to broadcast if mode\n+\tsize is 16 bytes or bigger.\n+\t(ix86_broadcast_from_integer_constant): New function.\n+\t(ix86_expand_vector_move): Convert CONST_WIDE_INT and CONST_VECTOR\n+\tto broadcast if mode size is 16 bytes or bigger.\n+\t* config/i386/i386-protos.h (ix86_gen_scratch_sse_rtx): New\n+\tprototype.\n+\t* config/i386/i386.c (ix86_gen_scratch_sse_rtx): New function.\n+\n+2021-07-01  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/predicates.md (ix86_endbr_immediate_operand):\n+\tReturn true/false instead of 1/0.\n+\t(movq_parallel): Ditto.\n+\n+2021-07-01  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* recog.c (general_operand): Return true/false instead of 1/0.\n+\t(register_operand): Ditto.\n+\t(immediate_operand): Ditto.\n+\t(const_int_operand): Ditto.\n+\t(const_scalar_int_operand): Ditto.\n+\t(const_double_operand): Ditto.\n+\t(push_operand): Ditto.\n+\t(pop_operand): Ditto.\n+\t(memory_operand): Ditto.\n+\t(indirect_operand): Ditto.\n+\n+2021-07-01  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* genpreds.c (write_predicate_subfunction):\n+\tChange the type of written subfunction to bool.\n+\t(write_one_predicate_function):\n+\tChange the type of written function to bool.\n+\t(write_tm_preds_h): Ditto.\n+\t* recog.h (*insn_operand_predicate_fn): Change the type to bool.\n+\t* recog.c (general_operand): Change the type to bool.\n+\t(address_operand): Ditto.\n+\t(register_operand): Ditto.\n+\t(pmode_register_operand): Ditto.\n+\t(scratch_operand): Ditto.\n+\t(immediate_operand): Ditto.\n+\t(const_int_operand): Ditto.\n+\t(const_scalar_int_operand): Ditto.\n+\t(const_double_operand): Ditto.\n+\t(nonimmediate_operand): Ditto.\n+\t(nonmemory_operand): Ditto.\n+\t(push_operand): Ditto.\n+\t(pop_operand): Ditto.\n+\t(memory_operand): Ditto.\n+\t(indirect_operand): Ditto.\n+\t(ordered_comparison_operator): Ditto.\n+\t(comparison_operator): Ditto.\n+\t* config/i386/i386-expand.c (ix86_expand_sse_cmp):\n+\tChange the type of indirect predicate function to bool.\n+\t* config/rs6000/rs6000.c (easy_vector_constant):\n+\tChange the type to bool.\n+\t* config/mips/mips-protos.h (m16_based_address_p):\n+\tChange the type of operand 3 to bool.\n+\n+2021-07-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101280\n+\tPR tree-optimization/101173\n+\t* gimple-loop-interchange.cc\n+\t(tree_loop_interchange::valid_data_dependences): Revert\n+\tprevious change and instead correctly handle DDR_REVERSED_P\n+\tdependence.\n+\n+2021-07-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101278\n+\t* tree-ssa-dse.c (dse_classify_store): First check for\n+\tuses, then ignore stmt for chaining purposes.\n+\n+2021-07-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100778\n+\t* tree-vect-slp.c (vect_schedule_slp_node): Do not place trapping\n+\tvectorized ops ahead of their scalar BB.\n+\n+2021-07-01  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/101044\n+\t* config/i386/i386.md (*nabs<dwi>2_doubleword):\n+\tNew insn_and_split pattern.\n+\t(*nabs<dwi>2_1): Ditto.\n+\t* config/i386/i386-features.c\n+\t(general_scalar_chain::compute_convert_gain):\n+\tHandle (NEG (ABS (...))) RTX.  Rewrite src code\n+\tscanner as switch statement.\n+\t(general_scalar_chain::convert_insn):\n+\tHandle (NEG (ABS (...))) RTX.\n+\t(general_scalar_to_vector_candidate_p):\n+\tDetect  (NEG (ABS (...))) RTX.  Reorder case statements\n+\tfor (AND (NOT (...) ...)) fallthrough.\n+\n+2021-07-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101178\n+\t* tree-vect-slp.c (slpg_vertex::materialize): Remove.\n+\t(slpg::perm_in): Add.\n+\t(slpg::get_perm_in): Remove.\n+\t(slpg::get_perm_materialized): Add.\n+\t(vect_optimize_slp): Handle VEC_PERM nodes more optimally\n+\tduring permute propagation and materialization.\n+\n+2021-07-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/101266\n+\t* dwarf2out.c (loc_list_from_tree_1): Handle COMPOUND_LITERAL_EXPR.\n+\n+2021-07-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/94366\n+\t* omp-low.c (lower_rec_input_clauses): Rename is_fp_and_or to\n+\tis_truth_op, set it for TRUTH_*IF_EXPR regardless of new_var's type,\n+\tuse boolean_type_node instead of integer_type_node as NE_EXPR type.\n+\t(lower_reduction_clauses): Likewise.\n+\n 2021-06-30  Hafiz Abid Qadeer  <abidh@codesourcery.com>\n \n \t* config/gcn/gcn.c: Include dwarf2.h."}, {"sha": "7369508a556ad132485eee8ce22f695d57bb82ac", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea7c16a467cd1278375df261e4bc1d2d6e48d3b/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea7c16a467cd1278375df261e4bc1d2d6e48d3b/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=bea7c16a467cd1278375df261e4bc1d2d6e48d3b", "patch": "@@ -1 +1 @@\n-20210701\n+20210702"}, {"sha": "923c8a6fcf5f2f897e09691d8cb254bbe26302ee", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea7c16a467cd1278375df261e4bc1d2d6e48d3b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea7c16a467cd1278375df261e4bc1d2d6e48d3b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bea7c16a467cd1278375df261e4bc1d2d6e48d3b", "patch": "@@ -1,3 +1,9 @@\n+2021-07-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/101094\n+\t* exp_attr.adb (Get_Integer_Type): Return an integer type with the\n+\tsame signedness as the input type.\n+\n 2021-06-29  Richard Kenner  <kenner@adacore.com>\n \n \t* sem_util.adb (Visit_Node): Add handling for N_Block_Statement"}, {"sha": "ae7cafc7a9d70e4dbcf5f2935cc5484f36fd6800", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea7c16a467cd1278375df261e4bc1d2d6e48d3b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea7c16a467cd1278375df261e4bc1d2d6e48d3b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=bea7c16a467cd1278375df261e4bc1d2d6e48d3b", "patch": "@@ -1,3 +1,18 @@\n+2021-07-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-ada-spec.c (packed_layout): New global variable.\n+\t(dump_ada_declaration): Set it upon seeing a packed record type.\n+\tDo not put the \"aliased\" keyword if it is set.\n+\t(dump_ada_structure): Add Pack aspect if it is set and clear it.\n+\n+2021-07-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-ada-spec.c (check_name): Rename into...\n+\t(check_type_name_conflict): ...this.  Minor tweak.\n+\t(dump_ada_function_declaration): Adjust to above renaming.\n+\t(dump_ada_array_domains): Fix oversight.\n+\t(dump_ada_declaration): Call check_type_name_conflict for variables.\n+\n 2021-06-25  Martin Sebor  <msebor@redhat.com>\n \n \t* c-common.c (c_wrap_maybe_const): Remove TREE_NO_WARNING."}, {"sha": "13b009eac58ee295f30f1d2e7e69b955a7cbfbb6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea7c16a467cd1278375df261e4bc1d2d6e48d3b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea7c16a467cd1278375df261e4bc1d2d6e48d3b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bea7c16a467cd1278375df261e4bc1d2d6e48d3b", "patch": "@@ -1,3 +1,28 @@\n+2021-07-01  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101194\n+\t* constexpr.c (cxx_eval_array_reference): When the element type\n+\tis an empty type and the corresponding element is omitted, just\n+\treturn an empty CONSTRUCTOR instead of attempting value\n+\tinitialization.\n+\n+2021-07-01  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/96204\n+\t* pt.c (finish_template_variable): Pass the partially\n+\tinstantiated template and its args to instantiate_template.\n+\t(instantiate_class_template_1): No need to call\n+\tpush_nested_class and pop_nested_class around the call to\n+\tmost_specialized_partial_spec.\n+\t(instantiate_template_1): Pass the partially instantiated\n+\ttemplate to lookup_template_variable.\n+\t(most_specialized_partial_spec):  Use push_access_scope_guard\n+\tto set the access scope appropriately.  Use\n+\tdeferring_access_check_sentinel to force access to get checked\n+\timmediately.\n+\t(instantiate_decl): Just pass the VAR_DECL to\n+\tmost_specialized_partial_spec.\n+\n 2021-06-30  Patrick Palka  <ppalka@redhat.com>\n \n \t* constraint.cc (get_normalized_constraints_from_decl): Use"}, {"sha": "fd699df77031446a514d0dd515f8db605d825e4a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea7c16a467cd1278375df261e4bc1d2d6e48d3b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea7c16a467cd1278375df261e4bc1d2d6e48d3b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bea7c16a467cd1278375df261e4bc1d2d6e48d3b", "patch": "@@ -1,3 +1,94 @@\n+2021-07-01  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/float128-cmove.c: New test.\n+\t* gcc.target/powerpc/float128-minmax-3.c: New test.\n+\n+2021-07-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-c++-common/dump-ada-spec-14.c: Adjust dg-warning directive.\n+\n+2021-07-01  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/100865\n+\t* gcc.target/i386/avx512f-broadcast-pr87767-1.c: Expect integer\n+\tbroadcast.\n+\t* gcc.target/i386/avx512f-broadcast-pr87767-5.c: Likewise.\n+\t* gcc.target/i386/avx512vl-broadcast-pr87767-1.c: Likewise.\n+\t* gcc.target/i386/avx512vl-broadcast-pr87767-5.c: Likewise.\n+\t* gcc.target/i386/avx512f_cond_move.c: Also pass\n+\t-mprefer-vector-width=512 and expect integer broadcast.\n+\t* gcc.target/i386/pr100865-1.c: New test.\n+\t* gcc.target/i386/pr100865-2.c: Likewise.\n+\t* gcc.target/i386/pr100865-3.c: Likewise.\n+\t* gcc.target/i386/pr100865-4a.c: Likewise.\n+\t* gcc.target/i386/pr100865-4b.c: Likewise.\n+\t* gcc.target/i386/pr100865-5a.c: Likewise.\n+\t* gcc.target/i386/pr100865-5b.c: Likewise.\n+\t* gcc.target/i386/pr100865-6a.c: Likewise.\n+\t* gcc.target/i386/pr100865-6b.c: Likewise.\n+\t* gcc.target/i386/pr100865-6c.c: Likewise.\n+\t* gcc.target/i386/pr100865-7a.c: Likewise.\n+\t* gcc.target/i386/pr100865-7b.c: Likewise.\n+\t* gcc.target/i386/pr100865-7c.c: Likewise.\n+\t* gcc.target/i386/pr100865-8a.c: Likewise.\n+\t* gcc.target/i386/pr100865-8b.c: Likewise.\n+\t* gcc.target/i386/pr100865-8c.c: Likewise.\n+\t* gcc.target/i386/pr100865-9a.c: Likewise.\n+\t* gcc.target/i386/pr100865-9b.c: Likewise.\n+\t* gcc.target/i386/pr100865-9c.c: Likewise.\n+\t* gcc.target/i386/pr100865-10a.c: Likewise.\n+\t* gcc.target/i386/pr100865-10b.c: Likewise.\n+\t* gcc.target/i386/pr100865-11a.c: Likewise.\n+\t* gcc.target/i386/pr100865-11b.c: Likewise.\n+\t* gcc.target/i386/pr100865-11c.c: Likewise.\n+\t* gcc.target/i386/pr100865-12a.c: Likewise.\n+\t* gcc.target/i386/pr100865-12b.c: Likewise.\n+\t* gcc.target/i386/pr100865-12c.c: Likewise.\n+\n+2021-07-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101280\n+\tPR tree-optimization/101173\n+\t* gcc.dg/tree-ssa/loop-interchange-16.c: New testcase.\n+\n+2021-07-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101278\n+\t* gcc.dg/torture/pr101278.c: New testcase.\n+\n+2021-07-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100778\n+\t* gcc.dg/torture/pr100778.c: New testcase.\n+\n+2021-07-01  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/101044\n+\t* gcc.target/i386/pr101044.c: New test.\n+\n+2021-07-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101178\n+\t* gcc.dg/vect/bb-slp-72.c: New testcase.\n+\t* gcc.dg/vect/bb-slp-73.c: Likewise.\n+\t* gcc.dg/vect/bb-slp-74.c: Likewise.\n+\n+2021-07-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/101266\n+\t* gcc.dg/pr101266.c: New test.\n+\n+2021-07-01  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101194\n+\t* g++.dg/cpp0x/constexpr-empty16.C: New test.\n+\n+2021-07-01  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/96204\n+\t* g++.dg/template/access41.C: New test.\n+\t* g++.dg/template/access41a.C: New test.\n+\n 2021-06-30  Indu Bhagat  <indu.bhagat@oracle.com>\n \n \t* gcc.dg/debug/ctf/ctf-skip-types-4.c: Add dg-add-options float64 and"}, {"sha": "91874c83a1d767db864d35a12201719e44f70980", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea7c16a467cd1278375df261e4bc1d2d6e48d3b/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea7c16a467cd1278375df261e4bc1d2d6e48d3b/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=bea7c16a467cd1278375df261e4bc1d2d6e48d3b", "patch": "@@ -1,3 +1,8 @@\n+2021-07-01  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* soft-fp/extendhfxf2.c: New file.\n+\t* soft-fp/truncxfhf2.c: Likewise.\n+\n 2021-06-29  Julian Brown  <julian@codesourcery.com>\n \n \t* config/gcn/lib2-bswapti2.c: New file."}, {"sha": "8f084e2cbead584f4badff1722d5082c80a83709", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea7c16a467cd1278375df261e4bc1d2d6e48d3b/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea7c16a467cd1278375df261e4bc1d2d6e48d3b/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=bea7c16a467cd1278375df261e4bc1d2d6e48d3b", "patch": "@@ -1,3 +1,10 @@\n+2021-07-01  Tobias Burnus  <tobias@codesourcery.com>\n+\t    Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* runtime/ISO_Fortran_binding.c (cfi_desc_to_gfc_desc):\n+\tInitialize version field to 0.\n+\t(gfc_desc_to_cfi_desc): Initialize version field to CFI_VERSION.\n+\n 2021-06-29  Julian Brown  <julian@codesourcery.com>\n \n \tPR target/96306"}, {"sha": "df7fb1791addb3a5fe164236b44b59b4fbed0507", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea7c16a467cd1278375df261e4bc1d2d6e48d3b/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea7c16a467cd1278375df261e4bc1d2d6e48d3b/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=bea7c16a467cd1278375df261e4bc1d2d6e48d3b", "patch": "@@ -1,3 +1,8 @@\n+2021-07-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/94366\n+\t* testsuite/libgomp.c-c++-common/pr94366.c: New test.\n+\n 2021-06-29  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR other/67300"}, {"sha": "92582b56b8eef85f5b68950dc6cc8cd87d7027c5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea7c16a467cd1278375df261e4bc1d2d6e48d3b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea7c16a467cd1278375df261e4bc1d2d6e48d3b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bea7c16a467cd1278375df261e4bc1d2d6e48d3b", "patch": "@@ -1,3 +1,19 @@\n+2021-07-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/doxygen/doxygroups.cc: Fix docs for std::literals.\n+\t* doc/doxygen/user.cfg.in: Exclude the Networking TS header.\n+\tAdd some more predefined macros.\n+\t* include/bits/fs_fwd.h: Move @addtogroup commands inside\n+\tnamespaces. Add better documentation.\n+\t* include/bits/fs_path.h: Likewise.\n+\t* include/experimental/bits/fs_fwd.h: Likewise.\n+\t* include/experimental/bits/fs_path.h: Likewise.\n+\t* include/ext/throw_allocator.h: Fix typo and improve docs.\n+\t* include/std/chrono: Move @addtogroup commands.\n+\t* include/std/system_error: Move @addtogroup commands.\n+\t* libsupc++/exception: Improve documentation.\n+\t* libsupc++/exception.h: Add @since documentation.\n+\n 2021-06-30  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/101258"}]}