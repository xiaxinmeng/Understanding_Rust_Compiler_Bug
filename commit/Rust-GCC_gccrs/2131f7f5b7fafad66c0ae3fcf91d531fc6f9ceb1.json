{"sha": "2131f7f5b7fafad66c0ae3fcf91d531fc6f9ceb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEzMWY3ZjViN2ZhZmFkNjZjMGFlM2ZjZjkxZDUzMWZjNmY5Y2ViMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-11-22T13:58:57Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-11-22T13:58:57Z"}, "message": "PR82547: Undetected overflow for UNSIGNED wide_ints\n\nwi::add_large and wi::sub_large weren't setting the overflow bit\ncorrectly for unsigned operations if the result needed fewer HWIs\nthan the precision.\n\n2017-11-22  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\tPR middle-end/82547\n\t* wide-int.cc (wi::add_large, wi::sub_large): Fix overflow detection\n\tfor unsigned values with fewer HWIs than the precision.\n\t(test_overflow): New function.\n\t(wide_int_cc_tests): Call it.\n\nFrom-SVN: r255059", "tree": {"sha": "dde1145642e089c705eba8a6de288f81437c2a6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dde1145642e089c705eba8a6de288f81437c2a6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2131f7f5b7fafad66c0ae3fcf91d531fc6f9ceb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2131f7f5b7fafad66c0ae3fcf91d531fc6f9ceb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2131f7f5b7fafad66c0ae3fcf91d531fc6f9ceb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2131f7f5b7fafad66c0ae3fcf91d531fc6f9ceb1/comments", "author": null, "committer": null, "parents": [{"sha": "a76ef9c5a8447bf3e90ed832ef1286cda205e115", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a76ef9c5a8447bf3e90ed832ef1286cda205e115", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a76ef9c5a8447bf3e90ed832ef1286cda205e115"}], "stats": {"total": 58, "additions": 53, "deletions": 5}, "files": [{"sha": "e4efc762016ebdf763f544c52eb56696a400a15e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2131f7f5b7fafad66c0ae3fcf91d531fc6f9ceb1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2131f7f5b7fafad66c0ae3fcf91d531fc6f9ceb1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2131f7f5b7fafad66c0ae3fcf91d531fc6f9ceb1", "patch": "@@ -1,3 +1,11 @@\n+2017-11-22  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR middle-end/82547\n+\t* wide-int.cc (wi::add_large, wi::sub_large): Fix overflow detection\n+\tfor unsigned values with fewer HWIs than the precision.\n+\t(test_overflow): New function.\n+\t(wide_int_cc_tests): Call it.\n+\n 2017-11-22  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* emit-rtl.c (init_derived_machine_modes): Make sure ptr_mode"}, {"sha": "ec4d1f36a3ce53892674c61ba5269776dac70b2c", "filename": "gcc/wide-int.cc", "status": "modified", "additions": 45, "deletions": 5, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2131f7f5b7fafad66c0ae3fcf91d531fc6f9ceb1/gcc%2Fwide-int.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2131f7f5b7fafad66c0ae3fcf91d531fc6f9ceb1/gcc%2Fwide-int.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int.cc?ref=2131f7f5b7fafad66c0ae3fcf91d531fc6f9ceb1", "patch": "@@ -1158,7 +1158,7 @@ wi::add_large (HOST_WIDE_INT *val, const HOST_WIDE_INT *op0,\n       val[len] = mask0 + mask1 + carry;\n       len++;\n       if (overflow)\n-\t*overflow = false;\n+\t*overflow = (sgn == UNSIGNED && carry);\n     }\n   else if (overflow)\n     {\n@@ -1552,7 +1552,7 @@ wi::sub_large (HOST_WIDE_INT *val, const HOST_WIDE_INT *op0,\n       val[len] = mask0 - mask1 - borrow;\n       len++;\n       if (overflow)\n-\t*overflow = false;\n+\t*overflow = (sgn == UNSIGNED && borrow);\n     }\n   else if (overflow)\n     {\n@@ -2345,14 +2345,54 @@ static void run_all_wide_int_tests ()\n   test_comparisons <VALUE_TYPE> ();\n }\n \n+/* Test overflow conditions.  */\n+\n+static void\n+test_overflow ()\n+{\n+  static int precs[] = { 31, 32, 33, 63, 64, 65, 127, 128 };\n+  static int offsets[] = { 16, 1, 0 };\n+  for (unsigned int i = 0; i < ARRAY_SIZE (precs); ++i)\n+    for (unsigned int j = 0; j < ARRAY_SIZE (offsets); ++j)\n+      {\n+\tint prec = precs[i];\n+\tint offset = offsets[j];\n+\tbool overflow;\n+\twide_int sum, diff;\n+\n+\tsum = wi::add (wi::max_value (prec, UNSIGNED) - offset, 1,\n+\t\t       UNSIGNED, &overflow);\n+\tASSERT_EQ (sum, -offset);\n+\tASSERT_EQ (overflow, offset == 0);\n+\n+\tsum = wi::add (1, wi::max_value (prec, UNSIGNED) - offset,\n+\t\t       UNSIGNED, &overflow);\n+\tASSERT_EQ (sum, -offset);\n+\tASSERT_EQ (overflow, offset == 0);\n+\n+\tdiff = wi::sub (wi::max_value (prec, UNSIGNED) - offset,\n+\t\t\twi::max_value (prec, UNSIGNED),\n+\t\t\tUNSIGNED, &overflow);\n+\tASSERT_EQ (diff, -offset);\n+\tASSERT_EQ (overflow, offset != 0);\n+\n+\tdiff = wi::sub (wi::max_value (prec, UNSIGNED) - offset,\n+\t\t\twi::max_value (prec, UNSIGNED) - 1,\n+\t\t\tUNSIGNED, &overflow);\n+\tASSERT_EQ (diff, 1 - offset);\n+\tASSERT_EQ (overflow, offset > 1);\n+    }\n+}\n+\n /* Run all of the selftests within this file, for all value types.  */\n \n void\n wide_int_cc_tests ()\n {\n- run_all_wide_int_tests <wide_int> ();\n- run_all_wide_int_tests <offset_int> ();\n- run_all_wide_int_tests <widest_int> ();\n+  run_all_wide_int_tests <wide_int> ();\n+  run_all_wide_int_tests <offset_int> ();\n+  run_all_wide_int_tests <widest_int> ();\n+  test_overflow ();\n }\n \n } // namespace selftest"}]}