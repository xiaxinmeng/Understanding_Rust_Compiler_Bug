{"sha": "c85b032aca5712eb2f82db0aaff8195c2e3a200d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg1YjAzMmFjYTU3MTJlYjJmODJkYjBhYWZmODE5NWMyZTNhMjAwZA==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2005-02-02T19:15:07Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2005-02-02T19:15:07Z"}, "message": "libstdc++.exp: Revert Geoffrey Keating's patch from 2005-01-28.\n\n\t* testsuite/lib/libstdc++.exp: Revert Geoffrey Keating's patch\n\tfrom 2005-01-28.\n\t* testsuite/Makefile.am: Likewise.\n\t* testsuite/Makefile.in: Likewise.\n\nFrom-SVN: r94601", "tree": {"sha": "d1114fce4273567e6753f8cc5d468a8d5df009d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1114fce4273567e6753f8cc5d468a8d5df009d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c85b032aca5712eb2f82db0aaff8195c2e3a200d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c85b032aca5712eb2f82db0aaff8195c2e3a200d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c85b032aca5712eb2f82db0aaff8195c2e3a200d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c85b032aca5712eb2f82db0aaff8195c2e3a200d/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b919490c9c2c91331dc0edc468f663f300f42f82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b919490c9c2c91331dc0edc468f663f300f42f82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b919490c9c2c91331dc0edc468f663f300f42f82"}], "stats": {"total": 121, "additions": 49, "deletions": 72}, "files": [{"sha": "0ce60d399c0d9b0b2b0dffd12867b529fd478cd7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85b032aca5712eb2f82db0aaff8195c2e3a200d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85b032aca5712eb2f82db0aaff8195c2e3a200d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c85b032aca5712eb2f82db0aaff8195c2e3a200d", "patch": "@@ -1,3 +1,10 @@\n+2005-02-02  Andreas Jaeger  <aj@suse.de>\n+\n+\t* testsuite/lib/libstdc++.exp: Revert Geoffrey Keating's patch\n+\tfrom 2005-01-28.\n+\t* testsuite/Makefile.am: Likewise.\n+\t* testsuite/Makefile.in: Likewise.\n+\n 2005-02-01  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/cpp_type_traits.h: Rename _M_type fields to"}, {"sha": "1baeb826c4bbe5d592ecc5f1b76a98a6fe2a7bc1", "filename": "libstdc++-v3/testsuite/Makefile.am", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85b032aca5712eb2f82db0aaff8195c2e3a200d/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85b032aca5712eb2f82db0aaff8195c2e3a200d/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am?ref=c85b032aca5712eb2f82db0aaff8195c2e3a200d", "patch": "@@ -62,21 +62,17 @@ all-local: stamp_wchar stamp_thread testsuite_files\n \n # Enable wchar_t tests if capable.\n if GLIBCXX_TEST_WCHAR_T\n-IGNORE_WCHAR_T = \n stamp_wchar:\n \ttouch testsuite_wchar_t\n else\n-IGNORE_WCHAR_T = *wchar_t*\n stamp_wchar:\n endif\n \n # Enable thread tests if capable.\n if GLIBCXX_TEST_THREAD\n-IGNORE_THREAD = \n stamp_thread:\n \ttouch testsuite_thread\n else\n-IGNORE_THREAD = *thread*\n stamp_thread:\n endif\n \n@@ -87,7 +83,6 @@ lists_of_files = \\\n    testsuite_files_interactive \\\n    testsuite_files_performance\n \n-TESTS_TO_IGNORE = $(IGNORE_WCHAR_T) $(IGNORE_THREAD)\n \n # We need more things in site.exp, but automake completely controls the\n # creation of that file; there's no way to append to it without messing up\n@@ -108,8 +103,6 @@ site.exp: Makefile\n \t@echo 'set target_triplet $(target_triplet)' >>site.tmp\n \t@echo 'set target_triplet $(target_triplet)' >>site.tmp\n \t@echo 'set libiconv \"$(LIBICONV)\"' >>site.tmp\n-\t@echo 'set tests_to_ignore [list $(TESTS_TO_IGNORE)]' >> site.tmp\n-\t@echo 'set cxxflags { $(AM_CXXFLAGS) }' >> site.tmp\n \t@echo '## All variables above are generated by configure. Do Not Edit ##' >>site.tmp\n \t@test ! -f site.exp || \\\n \t  sed '1,/^## All variables above are.*##/ d' site.exp >> site.tmp"}, {"sha": "4201ab9256de539fc991c2c279a15ae3a047825d", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85b032aca5712eb2f82db0aaff8195c2e3a200d/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85b032aca5712eb2f82db0aaff8195c2e3a200d/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=c85b032aca5712eb2f82db0aaff8195c2e3a200d", "patch": "@@ -286,14 +286,6 @@ libv3test_a_SOURCES = \\\n \n abi_check_SOURCES = abi_check.cc\n abi_check_DEPENDENCIES = libv3test.a\n-@GLIBCXX_TEST_WCHAR_T_FALSE@IGNORE_WCHAR_T = *wchar_t*\n-\n-# Enable wchar_t tests if capable.\n-@GLIBCXX_TEST_WCHAR_T_TRUE@IGNORE_WCHAR_T = \n-@GLIBCXX_TEST_THREAD_FALSE@IGNORE_THREAD = *thread*\n-\n-# Enable thread tests if capable.\n-@GLIBCXX_TEST_THREAD_TRUE@IGNORE_THREAD = \n \n # Generated lists of files to run.  All of these names are valid make\n # targets, if you wish to generate a list manually.\n@@ -302,7 +294,6 @@ lists_of_files = \\\n    testsuite_files_interactive \\\n    testsuite_files_performance\n \n-TESTS_TO_IGNORE = $(IGNORE_WCHAR_T) $(IGNORE_THREAD)\n baseline_file = ${baseline_dir}/baseline_symbols.txt\n extract_symvers = $(glibcxx_srcdir)/scripts/extract_symvers\n \n@@ -590,9 +581,13 @@ uninstall-am: uninstall-info-am\n \n \n all-local: stamp_wchar stamp_thread testsuite_files\n+\n+# Enable wchar_t tests if capable.\n @GLIBCXX_TEST_WCHAR_T_TRUE@stamp_wchar:\n @GLIBCXX_TEST_WCHAR_T_TRUE@\ttouch testsuite_wchar_t\n @GLIBCXX_TEST_WCHAR_T_FALSE@stamp_wchar:\n+\n+# Enable thread tests if capable.\n @GLIBCXX_TEST_THREAD_TRUE@stamp_thread:\n @GLIBCXX_TEST_THREAD_TRUE@\ttouch testsuite_thread\n @GLIBCXX_TEST_THREAD_FALSE@stamp_thread:\n@@ -616,8 +611,6 @@ site.exp: Makefile\n \t@echo 'set target_triplet $(target_triplet)' >>site.tmp\n \t@echo 'set target_triplet $(target_triplet)' >>site.tmp\n \t@echo 'set libiconv \"$(LIBICONV)\"' >>site.tmp\n-\t@echo 'set tests_to_ignore [list $(TESTS_TO_IGNORE)]' >> site.tmp\n-\t@echo 'set cxxflags { $(AM_CXXFLAGS) }' >> site.tmp\n \t@echo '## All variables above are generated by configure. Do Not Edit ##' >>site.tmp\n \t@test ! -f site.exp || \\\n \t  sed '1,/^## All variables above are.*##/ d' site.exp >> site.tmp"}, {"sha": "d2996855584d991bc0232244e7215b948ba2b06c", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 38, "deletions": 54, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85b032aca5712eb2f82db0aaff8195c2e3a200d/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85b032aca5712eb2f82db0aaff8195c2e3a200d/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=c85b032aca5712eb2f82db0aaff8195c2e3a200d", "patch": "@@ -79,7 +79,7 @@ proc v3-copy-files {srcfiles} {\n proc libstdc++_init { testfile } {\n     global env\n     global srcdir blddir objdir tool_root_dir\n-    global cxx\n+    global cxx cxxflags\n     global includes\n     global gluefile wrap_flags\n     global ld_library_path\n@@ -137,17 +137,17 @@ proc libstdc++_init { testfile } {\n     append ld_library_path \":${gccdir}\"\n     set compiler ${gccdir}/g++\n     if { [is_remote host] == 0 && [which $compiler] != 0 } {\n-\tforeach i \"[exec [which $compiler] --print-multi-lib]\" {\n-\t    set mldir \"\"\n-\t    regexp -- \"\\[a-z0-9=/\\.-\\]*;\" $i mldir\n-\t    set mldir [string trimright $mldir \"\\;@\"]\n-\t    if { \"$mldir\" == \".\" } {\n-\t\tcontinue\n-\t    }\n-\t    if { [llength [glob -nocomplain ${gccdir}/${mldir}/libgcc_s*.so.*]] >= 1 } {\n-\t\tappend ld_library_path \":${gccdir}/${mldir}\"\n-\t    }\n-\t}\n+      foreach i \"[exec $compiler --print-multi-lib]\" {\n+        set mldir \"\"\n+        regexp -- \"\\[a-z0-9=/\\.-\\]*;\" $i mldir\n+        set mldir [string trimright $mldir \"\\;@\"]\n+        if { \"$mldir\" == \".\" } {\n+          continue\n+        }\n+        if { [llength [glob -nocomplain ${gccdir}/${mldir}/libgcc_s*.so.*]] >= 1 } {\n+          append ld_library_path \":${gccdir}/${mldir}\"\n+        }\n+      }\n     }\n     append ld_library_path \":${blddir}/src/.libs\"\n \n@@ -165,14 +165,17 @@ proc libstdc++_init { testfile } {\n             return \"untested\"\n         }\n       set cxx [transform \"g++\"]\n+      set cxxflags \"-ggdb3\"\n       set includes \"-I./\"\n     } else {\n         # If we find a testsuite_flags file, we're testing in the build dir.\n         if { [file exists $flags_file] } {\n             set cxx [exec sh $flags_file --build-cxx]\n+            set cxxflags [exec sh $flags_file --cxxflags]\n             set includes [exec sh $flags_file --build-includes]\n         } else {\n             set cxx [transform \"g++\"]\n+            set cxxflags \"-ggdb3\"\n             set includes \"-I${srcdir}\"\n         }\n     }\n@@ -246,7 +249,7 @@ proc v3_target_compile { source dest type options } {\n     global cxx\n     global cxxflags\n     global includes\n-    global objdir\n+    global blddir\n \n     if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n         lappend options \"libs=${gluefile}\"\n@@ -263,56 +266,37 @@ proc v3_target_compile { source dest type options } {\n \n     # Picks up the freshly-built testsuite library corresponding to the\n     # multilib under test.\n-    lappend options \"ldflags=-L${objdir}\"\n+    lappend options \"ldflags=-L${blddir}/testsuite\"\n     lappend options \"libs=-lv3test\"\n \n     return [target_compile $source $dest $type $options]\n }\n \n \n-# This is the equivalent of the Tcl 8.4 \"lsearch -all -inline\" except\n-# slower\n-proc lsearch_all_inline {listData pattern} {\n-    set result [list]\n-    foreach item $listData {\n-        if {[string match $pattern $item]} {\n-            lappend result $item\n-        }\n-    }\n-    return $result\n-}\n-\n-# This is the equivalent of the Tcl 8.4 \"lsearch -all -inline -not\"\n-# except slower\n-proc lsearch_all_inline_not {listData pattern} {\n-    set result [list]\n-    foreach item $listData {\n-        if {! [string match $pattern $item]} {\n-            lappend result $item\n-        }\n-    }\n-    return $result\n-}\n-\n # Called once, from libstdc++/normal.exp.\n proc v3-list-tests { filename } {\n-    global srcdir tests_to_ignore\n-\n-    set sfiles [lsort [ find $srcdir \"*.cc\"] ]\n-    set sfiles [ lsearch_all_inline $sfiles \"$srcdir/*/*.cc\" ]\n-    foreach pattern $tests_to_ignore {\n-\tset sfiles [ lsearch_all_inline_not $sfiles $pattern ]\n-    }\n-    if { $filename == \"testsuite_files\" } {\n-\tset sfiles [ lsearch_all_inline_not $sfiles *_xin* ]\n-\tset sfiles [ lsearch_all_inline_not $sfiles *performance* ]\n-    } elseif { $filename == \"testsuite_files_interactive\" } {\n-\tset sfiles [ lsearch_all_inline $sfiles *_xin* ]\n-    } elseif { $filename == \"testsuite_files_performance\" } {\n-\tset sfiles [ lsearch_all_inline $sfiles *performance* ]\n+    global srcdir\n+    global blddir\n+\n+    set tests_file \"${blddir}/testsuite/${filename}\"\n+    set sfiles \"\"\n+\n+    verbose -log \"In v3-list-tests\"\n+    verbose -log \"blddir = ${blddir}\"\n+    verbose -log \"tests_file = $tests_file\"\n+\n+    # If there is a testsuite_file, use it. \n+    if { [file exists $tests_file] } {\n+        set f [open $tests_file]\n+        while { ! [eof $f] } {\n+            set t [gets $f]\n+            if { [string length \"$t\"] != 0 } {\n+                lappend sfiles  ${srcdir}/${t}\n+            }\n+        } \n+        close $f\n     } else {\n-        verbose \"cannot compute list of tests named $filename\"\n-\tset sfiles [list]\n+        verbose \"cannot open $tests_file\"\n     }\n     return $sfiles\n }"}]}