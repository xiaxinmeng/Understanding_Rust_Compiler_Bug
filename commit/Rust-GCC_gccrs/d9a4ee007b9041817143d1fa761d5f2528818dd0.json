{"sha": "d9a4ee007b9041817143d1fa761d5f2528818dd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlhNGVlMDA3YjkwNDE4MTcxNDNkMWZhNzYxZDVmMjUyODgxOGRkMA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1997-12-24T22:31:54Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-12-24T22:31:54Z"}, "message": "* expr.h (MUST_PASS_IN_STACK): Allow target port to override.\n\nFrom-SVN: r17230", "tree": {"sha": "445d6cc7b1e2c6973fb18054e37e65d6c5eb44ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/445d6cc7b1e2c6973fb18054e37e65d6c5eb44ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9a4ee007b9041817143d1fa761d5f2528818dd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9a4ee007b9041817143d1fa761d5f2528818dd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9a4ee007b9041817143d1fa761d5f2528818dd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9a4ee007b9041817143d1fa761d5f2528818dd0/comments", "author": null, "committer": null, "parents": [{"sha": "04bd620d207354e517075a6abc32db18986180a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04bd620d207354e517075a6abc32db18986180a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04bd620d207354e517075a6abc32db18986180a7"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "575f9a569a1fec511a36999e8b1aaab8aee0a05b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a4ee007b9041817143d1fa761d5f2528818dd0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a4ee007b9041817143d1fa761d5f2528818dd0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9a4ee007b9041817143d1fa761d5f2528818dd0", "patch": "@@ -1,3 +1,7 @@\n+Wed Dec 24 23:33:17 1997  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* expr.h (MUST_PASS_IN_STACK): Allow target port to override.\n+\n Wed Dec 24 23:12:14 1997  Jim Wilson  <wilson@cygnus.com>\n \n \t* abi64.h (LONG_MAX_SPEC): Check MIPS_ABI_DEFAULT and TARGET_DEFAULT,"}, {"sha": "62909c3c9464005299d009ffc9f0ff7ba35adafd", "filename": "gcc/expr.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a4ee007b9041817143d1fa761d5f2528818dd0/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a4ee007b9041817143d1fa761d5f2528818dd0/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=d9a4ee007b9041817143d1fa761d5f2528818dd0", "patch": "@@ -216,6 +216,7 @@ enum direction {none, upward, downward};  /* Value has this type.  */\n    So a value padded in memory at the upper end can't go in a register.\n    For a little-endian machine, the reverse is true.  */\n \n+#ifndef MUST_PASS_IN_STACK\n #define MUST_PASS_IN_STACK(MODE,TYPE)\t\t\t\\\n   ((TYPE) != 0\t\t\t\t\t\t\\\n    && (TREE_CODE (TYPE_SIZE (TYPE)) != INTEGER_CST\t\\\n@@ -226,6 +227,7 @@ enum direction {none, upward, downward};  /* Value has this type.  */\n \t\t\t  % (PARM_BOUNDARY / BITS_PER_UNIT))) \\\n \t   && (FUNCTION_ARG_PADDING (MODE, TYPE)\t\\\n \t       == (BYTES_BIG_ENDIAN ? upward : downward)))))\n+#endif\n \n /* Nonzero if type TYPE should be returned in memory.\n    Most machines can use the following default definition.  */"}, {"sha": "3a9b3108636b2aa23949f578bc30a4164b6f4773", "filename": "gcc/tm.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a4ee007b9041817143d1fa761d5f2528818dd0/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a4ee007b9041817143d1fa761d5f2528818dd0/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=d9a4ee007b9041817143d1fa761d5f2528818dd0", "patch": "@@ -2696,6 +2696,13 @@ argument, the compiler will abort.  If @code{REG_PARM_STACK_SPACE} is\n defined, the argument will be computed in the stack and then loaded into\n a register.\n \n+@findex MUST_PASS_IN_STACK\n+@item MUST_PASS_IN_STACK (@var{mode}, @var{type})\n+Define as a C expression that evaluates to nonzero if we do not know how\n+to pass TYPE solely in registers.  The file @file{expr.h} defines a\n+definition that is usually appropriate, refer to @file{expr.h} for additional\n+documentation.\n+\n @findex FUNCTION_INCOMING_ARG\n @item FUNCTION_INCOMING_ARG (@var{cum}, @var{mode}, @var{type}, @var{named})\n Define this macro if the target machine has ``register windows'', so"}]}