{"sha": "c6f044f7664a1659618e0585c703036f472a1caa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZmMDQ0Zjc2NjRhMTY1OTYxOGUwNTg1YzcwMzAzNmY0NzJhMWNhYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-04-24T19:11:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-04-24T19:11:45Z"}, "message": "re PR c++/50800 (Internal compiler error in finish_member_declarations, possibly related to may_alias attribute)\n\n\tPR c++/50800\ngcc/\n\t* tree.c (build_reference_type_for_mode): Don't pass can_alias_all\n\tdown when building TYPE_CANONICAL.\n\t(build_pointer_type_for_mode): Likewise.\ngcc/cp/\n\t* typeck.c (structural_comptypes): Don't check TYPE_REF_CAN_ALIAS_ALL.\n\nFrom-SVN: r222419", "tree": {"sha": "fcec492840a88dd43e1c97bfb438cc31723cd5fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcec492840a88dd43e1c97bfb438cc31723cd5fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6f044f7664a1659618e0585c703036f472a1caa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6f044f7664a1659618e0585c703036f472a1caa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6f044f7664a1659618e0585c703036f472a1caa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6f044f7664a1659618e0585c703036f472a1caa/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6f96dcebb22a03fd4df64a18c13c5bbc1cee8a76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f96dcebb22a03fd4df64a18c13c5bbc1cee8a76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f96dcebb22a03fd4df64a18c13c5bbc1cee8a76"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "b4b0490303f8f3f536eec3e254765197a166f064", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f044f7664a1659618e0585c703036f472a1caa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f044f7664a1659618e0585c703036f472a1caa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6f044f7664a1659618e0585c703036f472a1caa", "patch": "@@ -1,3 +1,10 @@\n+2015-04-24  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/50800\n+\t* tree.c (build_reference_type_for_mode): Don't pass can_alias_all\n+\tdown when building TYPE_CANONICAL.\n+\t(build_pointer_type_for_mode): Likewise.\n+\n 2015-04-24  Chen Gang  <gang.chen.5i5j@gmail.com>\n \n \t* genrecog.c (validate_pattern): Check matching constraint refers"}, {"sha": "7c7ec095c3843ea5f1511b6eedd66db3bb82e7d4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f044f7664a1659618e0585c703036f472a1caa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f044f7664a1659618e0585c703036f472a1caa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c6f044f7664a1659618e0585c703036f472a1caa", "patch": "@@ -1,5 +1,8 @@\n 2015-04-24  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/50800\n+\t* typeck.c (structural_comptypes): Don't check TYPE_REF_CAN_ALIAS_ALL.\n+\n \t* constexpr.c (potential_constant_expression_1) [MINUS_EXPR]:\n \tRemove obsolete code.\n \t[NE_EXPR]: Likewise."}, {"sha": "91db32a7da91643ea200921798d35b08a1f972bf", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f044f7664a1659618e0585c703036f472a1caa/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f044f7664a1659618e0585c703036f472a1caa/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=c6f044f7664a1659618e0585c703036f472a1caa", "patch": "@@ -1310,7 +1310,6 @@ structural_comptypes (tree t1, tree t2, int strict)\n \n     case POINTER_TYPE:\n       if (TYPE_MODE (t1) != TYPE_MODE (t2)\n-\t  || TYPE_REF_CAN_ALIAS_ALL (t1) != TYPE_REF_CAN_ALIAS_ALL (t2)\n \t  || !same_type_p (TREE_TYPE (t1), TREE_TYPE (t2)))\n \treturn false;\n       break;"}, {"sha": "daf0292127f46a676e734e5655343b0773969344", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f044f7664a1659618e0585c703036f472a1caa/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f044f7664a1659618e0585c703036f472a1caa/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=c6f044f7664a1659618e0585c703036f472a1caa", "patch": "@@ -7706,7 +7706,7 @@ build_pointer_type_for_mode (tree to_type, machine_mode mode,\n   else if (TYPE_CANONICAL (to_type) != to_type)\n     TYPE_CANONICAL (t)\n       = build_pointer_type_for_mode (TYPE_CANONICAL (to_type),\n-\t\t\t\t     mode, can_alias_all);\n+\t\t\t\t     mode, false);\n \n   /* Lay out the type.  This function has many callers that are concerned\n      with expression-construction, and this simplifies them all.  */\n@@ -7773,7 +7773,7 @@ build_reference_type_for_mode (tree to_type, machine_mode mode,\n   else if (TYPE_CANONICAL (to_type) != to_type)\n     TYPE_CANONICAL (t)\n       = build_reference_type_for_mode (TYPE_CANONICAL (to_type),\n-\t\t\t\t       mode, can_alias_all);\n+\t\t\t\t       mode, false);\n \n   layout_type (t);\n "}]}