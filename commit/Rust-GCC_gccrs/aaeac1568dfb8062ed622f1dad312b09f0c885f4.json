{"sha": "aaeac1568dfb8062ed622f1dad312b09f0c885f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFlYWMxNTY4ZGZiODA2MmVkNjIyZjFkYWQzMTJiMDlmMGM4ODVmNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-01-11T23:41:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-01-11T23:41:11Z"}, "message": "P0357R3 reference_wrapper for incomplete types\n\nThis patch implements the C++2a proposal to allow incomplete types in\nstd::reference_wrapper, which was previously undefined.\n\nThe change cannot be implemented for earlier standards, because prior to\nC++2a std::reference_wrapper has a weak result type, so must inspect the\ntemplate argument to see if it defines a nested result_type member. That\nis deprecated (but still required) in C++17, and removed from C++2a.\n\nThe removal of the base class from reference_wrapper is a potential ABI\nchange, as it could alter the layout of a type which derives from\nreference_wrapper<T> and from an empty type with _Weak_result_type<T> as\na base class.  Previously the repeated _Weak_result_type<T> base class\nwould have prevented the empty base-class optimization, but if\nreference_wrapper<T> no longer derives from it, the empty class could be\nplaced at the same address as the reference_wrapper<T> base.  In\npractice, the only types which derive from _Weak_result_type or from\n_Reference_wrapper_base_memfun or any of its base classes are non-empty\ntypes defined in libstdc++: std::reference_wrapper, std::function, and\nstd::_Bind. As they are non-empty types, they are not eligible for EBO\nanyway.\n\n\t* include/bits/refwrap.h [__cplusplus > 201703L]\n\t(_Refwrap_base_arg1, _Refwrap_base_arg2, _Reference_wrapper_base)\n\t(_Reference_wrapper_base_memfun): Do not define for C++2a.\n\t(reference_wrapper): Do not derive from _Reference_wrapper_base_memfun\n\tfor C++2a.\n\t(reference_wrapper::operator()): Add static assertion.\n\t* testsuite/20_util/reference_wrapper/incomplete.cc: New test.\n\nFrom-SVN: r267866", "tree": {"sha": "110481d49087c9adfb538e4018d5c8dd8e514526", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/110481d49087c9adfb538e4018d5c8dd8e514526"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aaeac1568dfb8062ed622f1dad312b09f0c885f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaeac1568dfb8062ed622f1dad312b09f0c885f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaeac1568dfb8062ed622f1dad312b09f0c885f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaeac1568dfb8062ed622f1dad312b09f0c885f4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e9aed14dcb5c984186f8b1e042bde9f3aaafa5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e9aed14dcb5c984186f8b1e042bde9f3aaafa5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e9aed14dcb5c984186f8b1e042bde9f3aaafa5e"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "9ae1fced094ad9235eae5b2e6173eb57372cf7e9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaeac1568dfb8062ed622f1dad312b09f0c885f4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaeac1568dfb8062ed622f1dad312b09f0c885f4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=aaeac1568dfb8062ed622f1dad312b09f0c885f4", "patch": "@@ -1,5 +1,13 @@\n 2019-01-11  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/refwrap.h [__cplusplus > 201703L]\n+\t(_Refwrap_base_arg1, _Refwrap_base_arg2, _Reference_wrapper_base)\n+\t(_Reference_wrapper_base_memfun): Do not define for C++2a.\n+\t(reference_wrapper): Do not derive from _Reference_wrapper_base_memfun\n+\tfor C++2a.\n+\t(reference_wrapper::operator()): Add static assertion.\n+\t* testsuite/20_util/reference_wrapper/incomplete.cc: New test.\n+\n \t* include/std/chrono (duration_values::zero(), duration_values::min())\n \t(duration_values::max()): Add noexcept.\n \t(duration::zero(), duration::min(), duration::max()): Likewise."}, {"sha": "6b4335a22ac688de8e751636bf4944fef68986a6", "filename": "libstdc++-v3/include/bits/refwrap.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaeac1568dfb8062ed622f1dad312b09f0c885f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frefwrap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaeac1568dfb8062ed622f1dad312b09f0c885f4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frefwrap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frefwrap.h?ref=aaeac1568dfb8062ed622f1dad312b09f0c885f4", "patch": "@@ -175,6 +175,7 @@ _GLIBCXX_MEM_FN_TRAITS(&& noexcept, false_type, true_type)\n     : _Weak_result_type_memfun<typename remove_cv<_Functor>::type>\n     { };\n \n+#if __cplusplus <= 201703L\n   // Detect nested argument_type.\n   template<typename _Tp, typename = __void_t<>>\n     struct _Refwrap_base_arg1\n@@ -279,6 +280,7 @@ _GLIBCXX_MEM_FN_TRAITS(&& noexcept, false_type, true_type)\n     {\n       using result_type = typename _Mem_fn_traits<_MemFunPtr>::__result_type;\n     };\n+#endif // ! C++20\n \n   /**\n    *  @brief Primary class template for reference_wrapper.\n@@ -287,7 +289,11 @@ _GLIBCXX_MEM_FN_TRAITS(&& noexcept, false_type, true_type)\n    */\n   template<typename _Tp>\n     class reference_wrapper\n+#if __cplusplus <= 201703L\n+    // In C++20 std::reference_wrapper<T> allows T to be incomplete,\n+    // so checking for nested types could result in ODR violations.\n     : public _Reference_wrapper_base_memfun<typename remove_cv<_Tp>::type>\n+#endif\n     {\n       _Tp* _M_data;\n \n@@ -327,6 +333,9 @@ _GLIBCXX_MEM_FN_TRAITS(&& noexcept, false_type, true_type)\n \ttypename result_of<_Tp&(_Args&&...)>::type\n \toperator()(_Args&&... __args) const\n \t{\n+#if __cplusplus > 201703L\n+\t  static_assert(sizeof(type), \"type must be complete\");\n+#endif\n \t  return std::__invoke(get(), std::forward<_Args>(__args)...);\n \t}\n     };"}, {"sha": "6fce8d9e3045220605ac49f3b9b3d90a5853c699", "filename": "libstdc++-v3/testsuite/20_util/reference_wrapper/incomplete.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaeac1568dfb8062ed622f1dad312b09f0c885f4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2Fincomplete.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaeac1568dfb8062ed622f1dad312b09f0c885f4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2Fincomplete.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2Fincomplete.cc?ref=aaeac1568dfb8062ed622f1dad312b09f0c885f4", "patch": "@@ -0,0 +1,36 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// P0357R3 reference_wrapper for incomplete types\n+\n+#include <functional>\n+\n+struct Incomplete;\n+\n+template class std::reference_wrapper<Incomplete>;\n+\n+Incomplete& f();\n+\n+std::reference_wrapper<Incomplete> r = f();\n+static_assert( std::is_same_v<decltype(r)::type, Incomplete> );\n+static_assert( std::is_same_v<decltype(r.get()), Incomplete&> );\n+\n+std::reference_wrapper r2 = f();\n+static_assert( std::is_same_v<decltype(r), decltype(r2)> );"}]}