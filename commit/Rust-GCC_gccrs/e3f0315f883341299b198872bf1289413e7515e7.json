{"sha": "e3f0315f883341299b198872bf1289413e7515e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNmMDMxNWY4ODMzNDEyOTliMTk4ODcyYmYxMjg5NDEzZTc1MTVlNw==", "commit": {"author": {"name": "Teresa Johnson", "email": "tejohnson@google.com", "date": "2014-05-22T14:06:08Z"}, "committer": {"name": "Teresa Johnson", "email": "tejohnson@gcc.gnu.org", "date": "2014-05-22T14:06:08Z"}, "message": "gcov-io.c (gcov_position): Use gcov_nonruntime_assert.\n\n2014-05-22  Teresa Johnson  <tejohnson@google.com>\n\n\t* gcov-io.c (gcov_position): Use gcov_nonruntime_assert.\n\t(gcov_is_error): Remove gcc_assert from IN_LIBGCOV code.\n\t(gcov_rewrite): Use gcov_nonruntime_assert.\n\t(gcov_open): Ditto.\n\t(gcov_write_words): Ditto.\n\t(gcov_write_length): Ditto.\n\t(gcov_read_words): Use gcov_nonruntime_assert, and remove\n\tgcc_assert from IN_LIBGCOV code.\n\t(gcov_read_summary): Use gcov_error to flag profile corruption.\n\t(gcov_sync): Use gcov_nonruntime_assert.\n\t(gcov_seek): Remove gcc_assert from IN_LIBGCOV code.\n\t(gcov_histo_index): Use gcov_nonruntime_assert.\n\t(static void gcov_histogram_merge): Ditto.\n\t(compute_working_sets): Ditto.\n\t* gcov-io.h (gcov_nonruntime_assert): Define.\n\t(gcov_error): Define for !IN_LIBGCOV\n\n\n\t* libgcov-driver.c (gcov_error): Move declaration before gcov-io.c\n\tinclude.\n\nFrom-SVN: r210805", "tree": {"sha": "c6ba216b23b093c7937d812160fcf3dfafedbe7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6ba216b23b093c7937d812160fcf3dfafedbe7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3f0315f883341299b198872bf1289413e7515e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3f0315f883341299b198872bf1289413e7515e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3f0315f883341299b198872bf1289413e7515e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3f0315f883341299b198872bf1289413e7515e7/comments", "author": {"login": "teresajohnson", "id": 20446403, "node_id": "MDQ6VXNlcjIwNDQ2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/20446403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teresajohnson", "html_url": "https://github.com/teresajohnson", "followers_url": "https://api.github.com/users/teresajohnson/followers", "following_url": "https://api.github.com/users/teresajohnson/following{/other_user}", "gists_url": "https://api.github.com/users/teresajohnson/gists{/gist_id}", "starred_url": "https://api.github.com/users/teresajohnson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teresajohnson/subscriptions", "organizations_url": "https://api.github.com/users/teresajohnson/orgs", "repos_url": "https://api.github.com/users/teresajohnson/repos", "events_url": "https://api.github.com/users/teresajohnson/events{/privacy}", "received_events_url": "https://api.github.com/users/teresajohnson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8000f037857a297c0cd900794fd53477f65e765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8000f037857a297c0cd900794fd53477f65e765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8000f037857a297c0cd900794fd53477f65e765"}], "stats": {"total": 79, "additions": 55, "deletions": 24}, "files": [{"sha": "d2dbcbd838ff9610d702a585494ce5bafa31ac33", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f0315f883341299b198872bf1289413e7515e7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f0315f883341299b198872bf1289413e7515e7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3f0315f883341299b198872bf1289413e7515e7", "patch": "@@ -1,3 +1,22 @@\n+2014-05-22  Teresa Johnson  <tejohnson@google.com>\n+\n+\t* gcov-io.c (gcov_position): Use gcov_nonruntime_assert.\n+\t(gcov_is_error): Remove gcc_assert from IN_LIBGCOV code.\n+\t(gcov_rewrite): Use gcov_nonruntime_assert.\n+\t(gcov_open): Ditto.\n+\t(gcov_write_words): Ditto.\n+\t(gcov_write_length): Ditto.\n+\t(gcov_read_words): Use gcov_nonruntime_assert, and remove\n+\tgcc_assert from IN_LIBGCOV code.\n+\t(gcov_read_summary): Use gcov_error to flag profile corruption.\n+\t(gcov_sync): Use gcov_nonruntime_assert.\n+\t(gcov_seek): Remove gcc_assert from IN_LIBGCOV code.\n+\t(gcov_histo_index): Use gcov_nonruntime_assert.\n+\t(static void gcov_histogram_merge): Ditto.\n+\t(compute_working_sets): Ditto.\n+\t* gcov-io.h (gcov_nonruntime_assert): Define.\n+\t(gcov_error): Define for !IN_LIBGCOV\n+\n 2014-05-22  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-alias.c (ref_maybe_used_by_call_p_1): Handle"}, {"sha": "cb88cdca4727bfe567036a7819544f770f989454", "filename": "gcc/gcov-io.c", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f0315f883341299b198872bf1289413e7515e7/gcc%2Fgcov-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f0315f883341299b198872bf1289413e7515e7/gcc%2Fgcov-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.c?ref=e3f0315f883341299b198872bf1289413e7515e7", "patch": "@@ -67,7 +67,7 @@ GCOV_LINKAGE struct gcov_var\n static inline gcov_position_t\n gcov_position (void)\n {\n-  gcc_assert (gcov_var.mode > 0); \n+  gcov_nonruntime_assert (gcov_var.mode > 0); \n   return gcov_var.start + gcov_var.offset;\n }\n \n@@ -83,7 +83,6 @@ gcov_is_error (void)\n GCOV_LINKAGE inline void\n gcov_rewrite (void)\n {\n-  gcc_assert (gcov_var.mode > 0); \n   gcov_var.mode = -1; \n   gcov_var.start = 0;\n   gcov_var.offset = 0;\n@@ -133,7 +132,7 @@ gcov_open (const char *name, int mode)\n   s_flock.l_pid = getpid ();\n #endif\n \n-  gcc_assert (!gcov_var.file);\n+  gcov_nonruntime_assert (!gcov_var.file);\n   gcov_var.start = 0;\n   gcov_var.offset = gcov_var.length = 0;\n   gcov_var.overread = -1u;\n@@ -297,14 +296,13 @@ gcov_write_words (unsigned words)\n {\n   gcov_unsigned_t *result;\n \n-  gcc_assert (gcov_var.mode < 0);\n+  gcov_nonruntime_assert (gcov_var.mode < 0);\n #if IN_LIBGCOV\n   if (gcov_var.offset >= GCOV_BLOCK_SIZE)\n     {\n       gcov_write_block (GCOV_BLOCK_SIZE);\n       if (gcov_var.offset)\n \t{\n-\t  gcc_assert (gcov_var.offset == 1);\n \t  memcpy (gcov_var.buffer, gcov_var.buffer + GCOV_BLOCK_SIZE, 4);\n \t}\n     }\n@@ -399,9 +397,9 @@ gcov_write_length (gcov_position_t position)\n   gcov_unsigned_t length;\n   gcov_unsigned_t *buffer;\n \n-  gcc_assert (gcov_var.mode < 0);\n-  gcc_assert (position + 2 <= gcov_var.start + gcov_var.offset);\n-  gcc_assert (position >= gcov_var.start);\n+  gcov_nonruntime_assert (gcov_var.mode < 0);\n+  gcov_nonruntime_assert (position + 2 <= gcov_var.start + gcov_var.offset);\n+  gcov_nonruntime_assert (position >= gcov_var.start);\n   offset = position - gcov_var.start;\n   length = gcov_var.offset - offset - 2;\n   buffer = (gcov_unsigned_t *) &gcov_var.buffer[offset];\n@@ -487,14 +485,13 @@ gcov_read_words (unsigned words)\n   const gcov_unsigned_t *result;\n   unsigned excess = gcov_var.length - gcov_var.offset;\n \n-  gcc_assert (gcov_var.mode > 0);\n+  gcov_nonruntime_assert (gcov_var.mode > 0);\n   if (excess < words)\n     {\n       gcov_var.start += gcov_var.offset;\n #if IN_LIBGCOV\n       if (excess)\n \t{\n-\t  gcc_assert (excess == 1);\n \t  memcpy (gcov_var.buffer, gcov_var.buffer + gcov_var.offset, 4);\n \t}\n #else\n@@ -503,7 +500,6 @@ gcov_read_words (unsigned words)\n       gcov_var.offset = 0;\n       gcov_var.length = excess;\n #if IN_LIBGCOV\n-      gcc_assert (!gcov_var.length || gcov_var.length == 1);\n       excess = GCOV_BLOCK_SIZE;\n #else\n       if (gcov_var.length + words > gcov_var.alloc)\n@@ -620,15 +616,19 @@ gcov_read_summary (struct gcov_summary *summary)\n           while (!cur_bitvector)\n             {\n               h_ix = bv_ix * 32;\n-              gcc_assert (bv_ix < GCOV_HISTOGRAM_BITVECTOR_SIZE);\n+              if (bv_ix >= GCOV_HISTOGRAM_BITVECTOR_SIZE)\n+                gcov_error (\"corrupted profile info: summary histogram \"\n+                            \"bitvector is corrupt\");\n               cur_bitvector = histo_bitvector[bv_ix++];\n             }\n           while (!(cur_bitvector & 0x1))\n             {\n               h_ix++;\n               cur_bitvector >>= 1;\n             }\n-          gcc_assert (h_ix < GCOV_HISTOGRAM_SIZE);\n+          if (h_ix >= GCOV_HISTOGRAM_SIZE)\n+            gcov_error (\"corrupted profile info: summary histogram \"\n+                        \"index is corrupt\");\n \n           csum->histogram[h_ix].num_counters = gcov_read_unsigned ();\n           csum->histogram[h_ix].min_value = gcov_read_counter ();\n@@ -648,7 +648,7 @@ gcov_read_summary (struct gcov_summary *summary)\n GCOV_LINKAGE void\n gcov_sync (gcov_position_t base, gcov_unsigned_t length)\n {\n-  gcc_assert (gcov_var.mode > 0);\n+  gcov_nonruntime_assert (gcov_var.mode > 0);\n   base += length;\n   if (base - gcov_var.start <= gcov_var.length)\n     gcov_var.offset = base - gcov_var.start;\n@@ -667,7 +667,6 @@ gcov_sync (gcov_position_t base, gcov_unsigned_t length)\n GCOV_LINKAGE void\n gcov_seek (gcov_position_t base)\n {\n-  gcc_assert (gcov_var.mode < 0);\n   if (gcov_var.offset)\n     gcov_write_block (gcov_var.offset);\n   fseek (gcov_var.file, base << 2, SEEK_SET);\n@@ -742,7 +741,7 @@ gcov_histo_index (gcov_type value)\n   if (r < 2)\n     return (unsigned)value;\n \n-  gcc_assert (r < 64);\n+  gcov_nonruntime_assert (r < 64);\n \n   /* Find the two next most significant bits to determine which\n      of the four linear sub-buckets to select.  */\n@@ -859,7 +858,7 @@ static void gcov_histogram_merge (gcov_bucket_type *tgt_histo,\n           /* The merged counters get placed in the new merged histogram\n              at the entry for the merged min_value.  */\n           tmp_i = gcov_histo_index (merge_min);\n-          gcc_assert (tmp_i < GCOV_HISTOGRAM_SIZE);\n+          gcov_nonruntime_assert (tmp_i < GCOV_HISTOGRAM_SIZE);\n           tmp_histo[tmp_i].num_counters += merge_num;\n           tmp_histo[tmp_i].cum_value += merge_cum;\n           if (!tmp_histo[tmp_i].min_value ||\n@@ -873,7 +872,7 @@ static void gcov_histogram_merge (gcov_bucket_type *tgt_histo,\n         }\n     }\n \n-  gcc_assert (tgt_i < 0);\n+  gcov_nonruntime_assert (tgt_i < 0);\n \n   /* In the case where there were more counters in the source histogram,\n      accumulate the remaining unmerged cumulative counter values. Add\n@@ -890,8 +889,8 @@ static void gcov_histogram_merge (gcov_bucket_type *tgt_histo,\n     }\n   /* At this point, tmp_i should be the smallest non-zero entry in the\n      tmp_histo.  */\n-  gcc_assert (tmp_i >= 0 && tmp_i < GCOV_HISTOGRAM_SIZE\n-\t      && tmp_histo[tmp_i].num_counters > 0);\n+  gcov_nonruntime_assert (tmp_i >= 0 && tmp_i < GCOV_HISTOGRAM_SIZE\n+                          && tmp_histo[tmp_i].num_counters > 0);\n   tmp_histo[tmp_i].cum_value += src_cum;\n \n   /* Finally, copy the merged histogram into tgt_histo.  */\n@@ -1003,6 +1002,6 @@ compute_working_sets (const struct gcov_ctr_summary *summary,\n          using a temporary above.  */\n       cum += histo_bucket->cum_value;\n     }\n-  gcc_assert (ws_ix == NUM_GCOV_WORKING_SETS);\n+  gcov_nonruntime_assert (ws_ix == NUM_GCOV_WORKING_SETS);\n }\n #endif /* IN_GCOV <= 0 && !IN_LIBGCOV */"}, {"sha": "1a9f07694e8f006caf45cffb322200a5ab1a0a1f", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f0315f883341299b198872bf1289413e7515e7/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f0315f883341299b198872bf1289413e7515e7/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=e3f0315f883341299b198872bf1289413e7515e7", "patch": "@@ -195,6 +195,13 @@ typedef unsigned HOST_WIDEST_INT gcov_type_unsigned;\n #define GCOV_LINKAGE extern\n #endif\n \n+#if IN_LIBGCOV\n+#define gcov_nonruntime_assert(EXPR) ((void)(0 && (EXPR)))\n+#else\n+#define gcov_nonruntime_assert(EXPR) gcc_assert (EXPR)\n+#define gcov_error(...) fatal_error (__VA_ARGS__)\n+#endif\n+\n /* File suffixes.  */\n #define GCOV_DATA_SUFFIX \".gcda\"\n #define GCOV_NOTE_SUFFIX \".gcno\""}, {"sha": "345472c4a29d91f4e30229feb9fcdee3d6bac9e7", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f0315f883341299b198872bf1289413e7515e7/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f0315f883341299b198872bf1289413e7515e7/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=e3f0315f883341299b198872bf1289413e7515e7", "patch": "@@ -1,3 +1,8 @@\n+2014-05-22  Teresa Johnson  <tejohnson@google.com>\n+\n+\t* libgcov-driver.c (gcov_error): Move declaration before gcov-io.c\n+\tinclude.\n+\n 2014-05-20  John Marino  <gnugcc@marino.st>\n \n \t* config.host (*-*-dragonfly*): New target."}, {"sha": "ef0505e617e03876f7234c44209ebee4ab6c957d", "filename": "libgcc/libgcov-driver.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f0315f883341299b198872bf1289413e7515e7/libgcc%2Flibgcov-driver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f0315f883341299b198872bf1289413e7515e7/libgcc%2Flibgcov-driver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-driver.c?ref=e3f0315f883341299b198872bf1289413e7515e7", "patch": "@@ -42,6 +42,10 @@ void __gcov_init (struct gcov_info *p __attribute__ ((unused))) {}\n #endif\n \n #ifdef L_gcov\n+\n+/* A utility function for outputing errors.  */\n+static int gcov_error (const char *, ...);\n+\n #include \"gcov-io.c\"\n \n /* The following functions can be called from outside of this file.  */\n@@ -108,9 +112,6 @@ reset_gcov_dump_complete (void)\n   gcov_dump_complete = 0;\n }\n \n-/* A utility function for outputing errors.  */\n-static int gcov_error (const char *, ...);\n-\n static struct gcov_fn_buffer *\n free_fn_data (const struct gcov_info *gi_ptr, struct gcov_fn_buffer *buffer,\n               unsigned limit)"}]}