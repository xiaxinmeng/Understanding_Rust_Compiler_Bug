{"sha": "3e65f25191da23215ba847ed49d10af5cf207490", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U2NWYyNTE5MWRhMjMyMTViYTg0N2VkNDlkMTBhZjVjZjIwNzQ5MA==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2010-04-09T08:58:00Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2010-04-09T08:58:00Z"}, "message": "cygming.h (TARGET_OS_CPP_BUILTINS): Add __thiscall and _thiscall as predefined macros.\n\n2010-04-09  Kai Tietz  <kai.tietz@onevision.com>\n\n        * config/i386/cygming.h (TARGET_OS_CPP_BUILTINS): Add\n        __thiscall and _thiscall as predefined macros.\n        * config/i386/i386.c (ix86_handle_cconv_attribute): Add\n        thiscall attribute handling.\n        (ix86_comp_type_attributes): Likewise.\n        (ix86_function_regparm): Likewise.\n        (ix86_return_pops_args): Likewise.\n        (init_cumulative_args): Likewise.\n        (find_drap_reg): Likewise.\n        (ix86_static_chain): Likewise.\n        (x86_this_parameter): Likewise.\n        (x86_output_mi_thunk): Likewise.\n        (ix86_attribute_table): Add description for thiscall attribute.\n        * config/i386/i386.h (ix86_args): Adjust comment for member\n        fastcall.\n        * doc/extend.texi: Add documentation for thiscall.\n\nFrom-SVN: r158155", "tree": {"sha": "f27eae49df0a1d17560380b81541562295afd47c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f27eae49df0a1d17560380b81541562295afd47c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e65f25191da23215ba847ed49d10af5cf207490", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e65f25191da23215ba847ed49d10af5cf207490", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e65f25191da23215ba847ed49d10af5cf207490", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e65f25191da23215ba847ed49d10af5cf207490/comments", "author": null, "committer": null, "parents": [{"sha": "c688a8b0d72f822e1bb6541bd97814ee6e88614a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c688a8b0d72f822e1bb6541bd97814ee6e88614a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c688a8b0d72f822e1bb6541bd97814ee6e88614a"}], "stats": {"total": 113, "additions": 107, "deletions": 6}, "files": [{"sha": "37e496bc799857847be1a8467871d4c4572dd01c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e65f25191da23215ba847ed49d10af5cf207490/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e65f25191da23215ba847ed49d10af5cf207490/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e65f25191da23215ba847ed49d10af5cf207490", "patch": "@@ -1,3 +1,22 @@\n+2010-04-09  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\t* config/i386/cygming.h (TARGET_OS_CPP_BUILTINS): Add\n+\t__thiscall and _thiscall as predefined macros.\n+\t* config/i386/i386.c (ix86_handle_cconv_attribute): Add\n+\tthiscall attribute handling.\n+\t(ix86_comp_type_attributes): Likewise.\n+\t(ix86_function_regparm): Likewise.\n+\t(ix86_return_pops_args): Likewise.\n+\t(init_cumulative_args): Likewise.\n+\t(find_drap_reg): Likewise.\n+\t(ix86_static_chain): Likewise.\n+\t(x86_this_parameter): Likewise.\n+\t(x86_output_mi_thunk): Likewise.\n+\t(ix86_attribute_table): Add description for thiscall attribute.\n+\t* config/i386/i386.h (ix86_args): Adjust comment for member\n+\tfastcall.\n+\t* doc/extend.texi: Add documentation for thiscall.\n+\t\n 2010-04-09  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c++/28584"}, {"sha": "a726bb4455e9891759f07a968240d7ea566a7cea", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e65f25191da23215ba847ed49d10af5cf207490/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e65f25191da23215ba847ed49d10af5cf207490/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=3e65f25191da23215ba847ed49d10af5cf207490", "patch": "@@ -79,11 +79,13 @@ along with GCC; see the file COPYING3.  If not see\n \tbuiltin_assert (\"system=winnt\");\t\t\t\t\\\n \tbuiltin_define (\"__stdcall=__attribute__((__stdcall__))\");\t\\\n \tbuiltin_define (\"__fastcall=__attribute__((__fastcall__))\");\t\\\n+\tbuiltin_define (\"__thiscall=__attribute__((__thiscall__))\");\t\\\n \tbuiltin_define (\"__cdecl=__attribute__((__cdecl__))\");\t\t\\\n \tif (!flag_iso)\t\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n \t    builtin_define (\"_stdcall=__attribute__((__stdcall__))\");\t\\\n \t    builtin_define (\"_fastcall=__attribute__((__fastcall__))\");\t\\\n+\t    builtin_define (\"_thiscall=__attribute__((__thiscall__))\");\t\\\n \t    builtin_define (\"_cdecl=__attribute__((__cdecl__))\");\t\\\n \t  }\t\t\t\t\t\t\t\t\\\n \t/* Even though linkonce works with static libs, this is needed \t\\"}, {"sha": "f65220c29112341f6f05b859e3d9d9cc36cd31eb", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 72, "deletions": 5, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e65f25191da23215ba847ed49d10af5cf207490/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e65f25191da23215ba847ed49d10af5cf207490/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3e65f25191da23215ba847ed49d10af5cf207490", "patch": "@@ -4395,8 +4395,8 @@ ix86_function_ok_for_sibcall (tree decl, tree exp)\n   return true;\n }\n \n-/* Handle \"cdecl\", \"stdcall\", \"fastcall\", \"regparm\" and \"sseregparm\"\n-   calling convention attributes;\n+/* Handle \"cdecl\", \"stdcall\", \"fastcall\", \"regparm\", \"thiscall\",\n+   and \"sseregparm\" calling convention attributes;\n    arguments as in struct attribute_spec.handler.  */\n \n static tree\n@@ -4426,6 +4426,11 @@ ix86_handle_cconv_attribute (tree *node, tree name,\n \t  error (\"fastcall and regparm attributes are not compatible\");\n \t}\n \n+      if (lookup_attribute (\"thiscall\", TYPE_ATTRIBUTES (*node)))\n+\t{\n+\t  error (\"regparam and thiscall attributes are not compatible\");\n+\t}\n+\n       cst = TREE_VALUE (args);\n       if (TREE_CODE (cst) != INTEGER_CST)\n \t{\n@@ -4471,6 +4476,10 @@ ix86_handle_cconv_attribute (tree *node, tree name,\n         {\n \t  error (\"fastcall and regparm attributes are not compatible\");\n \t}\n+      if (lookup_attribute (\"thiscall\", TYPE_ATTRIBUTES (*node)))\n+\t{\n+\t  error (\"fastcall and thiscall attributes are not compatible\");\n+\t}\n     }\n \n   /* Can combine stdcall with fastcall (redundant), regparm and\n@@ -4485,6 +4494,10 @@ ix86_handle_cconv_attribute (tree *node, tree name,\n         {\n \t  error (\"stdcall and fastcall attributes are not compatible\");\n \t}\n+      if (lookup_attribute (\"thiscall\", TYPE_ATTRIBUTES (*node)))\n+\t{\n+\t  error (\"stdcall and thiscall attributes are not compatible\");\n+\t}\n     }\n \n   /* Can combine cdecl with regparm and sseregparm.  */\n@@ -4498,6 +4511,28 @@ ix86_handle_cconv_attribute (tree *node, tree name,\n         {\n \t  error (\"fastcall and cdecl attributes are not compatible\");\n \t}\n+      if (lookup_attribute (\"thiscall\", TYPE_ATTRIBUTES (*node)))\n+\t{\n+\t  error (\"cdecl and thiscall attributes are not compatible\");\n+\t}\n+    }\n+  else if (is_attribute_p (\"thiscall\", name))\n+    {\n+      if (TREE_CODE (*node) != METHOD_TYPE && pedantic)\n+\twarning (OPT_Wattributes, \"%qE attribute is used for none class-method\",\n+\t         name);\n+      if (lookup_attribute (\"stdcall\", TYPE_ATTRIBUTES (*node)))\n+\t{\n+\t  error (\"stdcall and thiscall attributes are not compatible\");\n+\t}\n+      if (lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (*node)))\n+\t{\n+\t  error (\"fastcall and thiscall attributes are not compatible\");\n+\t}\n+      if (lookup_attribute (\"cdecl\", TYPE_ATTRIBUTES (*node)))\n+\t{\n+\t  error (\"cdecl and thiscall attributes are not compatible\");\n+\t}\n     }\n \n   /* Can combine sseregparm with all attributes.  */\n@@ -4531,6 +4566,11 @@ ix86_comp_type_attributes (const_tree type1, const_tree type2)\n       != !lookup_attribute (\"sseregparm\", TYPE_ATTRIBUTES (type2)))\n     return 0;\n \n+  /* Check for mismatched thiscall types.  */\n+  if (!lookup_attribute (\"thiscall\", TYPE_ATTRIBUTES (type1))\n+      != !lookup_attribute (\"thiscall\", TYPE_ATTRIBUTES (type2)))\n+    return 0;\n+\n   /* Check for mismatched return types (cdecl vs stdcall).  */\n   if (!lookup_attribute (rtdstr, TYPE_ATTRIBUTES (type1))\n       != !lookup_attribute (rtdstr, TYPE_ATTRIBUTES (type2)))\n@@ -4564,6 +4604,9 @@ ix86_function_regparm (const_tree type, const_tree decl)\n   if (lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (type)))\n     return 2;\n \n+  if (lookup_attribute (\"thiscall\", TYPE_ATTRIBUTES (type)))\n+    return 1;\n+\n   /* Use register calling convention for local functions when possible.  */\n   if (decl\n       && TREE_CODE (decl) == FUNCTION_DECL\n@@ -4701,7 +4744,8 @@ ix86_return_pops_args (tree fundecl, tree funtype, int size)\n       /* Stdcall and fastcall functions will pop the stack if not\n          variable args.  */\n       if (lookup_attribute (\"stdcall\", TYPE_ATTRIBUTES (funtype))\n-          || lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (funtype)))\n+\t  || lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (funtype))\n+          || lookup_attribute (\"thiscall\", TYPE_ATTRIBUTES (funtype)))\n \trtd = 1;\n \n       if (rtd && ! stdarg_p (funtype))\n@@ -4964,7 +5008,12 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n \t else look for regparm information.  */\n       if (fntype)\n \t{\n-\t  if (lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (fntype)))\n+\t  if (lookup_attribute (\"thiscall\", TYPE_ATTRIBUTES (fntype)))\n+\t    {\n+\t      cum->nregs = 1;\n+\t      cum->fastcall = 1; /* Same first register as in fastcall.  */\n+\t    }\n+\t  else if (lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (fntype)))\n \t    {\n \t      cum->nregs = 2;\n \t      cum->fastcall = 1;\n@@ -8303,6 +8352,8 @@ find_drap_reg (void)\n          passing.  */\n       if (ix86_function_regparm (TREE_TYPE (decl), decl) <= 2\n \t  && !lookup_attribute (\"fastcall\",\n+    \t\t\t\tTYPE_ATTRIBUTES (TREE_TYPE (decl)))\n+\t  && !lookup_attribute (\"thiscall\",\n     \t\t\t\tTYPE_ATTRIBUTES (TREE_TYPE (decl))))\n \treturn CX_REG;\n       else\n@@ -20157,6 +20208,12 @@ ix86_static_chain (const_tree fndecl, bool incoming_p)\n \t     us with EAX for the static chain.  */\n \t  regno = AX_REG;\n \t}\n+      else if (lookup_attribute (\"thiscall\", TYPE_ATTRIBUTES (fntype)))\n+\t{\n+\t  /* Thiscall functions use ecx for arguments, which leaves\n+\t     us with EAX for the static chain.  */\n+\t  regno = AX_REG;\n+\t}\n       else if (ix86_function_regparm (fntype, fndecl) == 3)\n \t{\n \t  /* For regparm 3, we have no free call-clobbered registers in\n@@ -26124,6 +26181,11 @@ x86_this_parameter (tree function)\n \n       if (lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (type)))\n \tregno = aggr ? DX_REG : CX_REG;\n+      /* ???: To be verified. It is not absolutely clear how aggregates\n+         have to be treated for thiscall.  We assume that they are\n+\t identical to fastcall.  */\n+      else if (lookup_attribute (\"thiscall\", TYPE_ATTRIBUTES (type)))\n+\tregno = aggr ? DX_REG : CX_REG;\n       else\n         {\n \t  regno = AX_REG;\n@@ -26235,7 +26297,9 @@ x86_output_mi_thunk (FILE *file,\n \t{\n \t  int tmp_regno = CX_REG;\n \t  if (lookup_attribute (\"fastcall\",\n-\t\t\t\tTYPE_ATTRIBUTES (TREE_TYPE (function))))\n+\t\t\t\tTYPE_ATTRIBUTES (TREE_TYPE (function)))\n+\t      || lookup_attribute (\"thiscall\",\n+\t\t\t\t   TYPE_ATTRIBUTES (TREE_TYPE (function))))\n \t    tmp_regno = AX_REG;\n \t  tmp = gen_rtx_REG (SImode, tmp_regno);\n \t}\n@@ -28975,6 +29039,9 @@ static const struct attribute_spec ix86_attribute_table[] =\n   /* Fastcall attribute says callee is responsible for popping arguments\n      if they are not variable.  */\n   { \"fastcall\",  0, 0, false, true,  true,  ix86_handle_cconv_attribute },\n+  /* Thiscall attribute says callee is responsible for popping arguments\n+     if they are not variable.  */\n+  { \"thiscall\",  0, 0, false, true,  true,  ix86_handle_cconv_attribute },\n   /* Cdecl attribute says the callee is a normal C declaration */\n   { \"cdecl\",     0, 0, false, true,  true,  ix86_handle_cconv_attribute },\n   /* Regparm attribute specifies how many integer arguments are to be"}, {"sha": "4b83370c9a614919705a5193644342606e7041da", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e65f25191da23215ba847ed49d10af5cf207490/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e65f25191da23215ba847ed49d10af5cf207490/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=3e65f25191da23215ba847ed49d10af5cf207490", "patch": "@@ -1580,7 +1580,8 @@ typedef struct ix86_args {\n   int words;\t\t\t/* # words passed so far */\n   int nregs;\t\t\t/* # registers available for passing */\n   int regno;\t\t\t/* next available register number */\n-  int fastcall;\t\t\t/* fastcall calling convention is used */\n+  int fastcall;\t\t\t/* fastcall or thiscall calling convention\n+\t\t\t\t   is used */\n   int sse_words;\t\t/* # sse words passed so far */\n   int sse_nregs;\t\t/* # sse registers available for passing */\n   int warn_avx;\t\t\t/* True when we want to warn about AVX ABI.  */"}, {"sha": "0e499ccd1367afab836b75d4d7b52d1b26be94c9", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e65f25191da23215ba847ed49d10af5cf207490/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e65f25191da23215ba847ed49d10af5cf207490/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=3e65f25191da23215ba847ed49d10af5cf207490", "patch": "@@ -2323,6 +2323,18 @@ and other typed arguments are passed on the stack.  The called function will\n pop the arguments off the stack.  If the number of arguments is variable all\n arguments are pushed on the stack.\n \n+@item thiscall\n+@cindex functions that pop the argument stack on the 386\n+On the Intel 386, the @code{thiscall} attribute causes the compiler to\n+pass the first argument (if of integral type) in the register ECX.\n+Subsequent and other typed arguments are passed on the stack. The called\n+function will pop the arguments off the stack.\n+If the number of arguments is variable all arguments are pushed on the\n+stack.\n+The @code{thiscall} attribute is intended for C++ non-static member functions.\n+As gcc extension this calling convention can be used for C-functions\n+and for static member methods.\n+\n @item format (@var{archetype}, @var{string-index}, @var{first-to-check})\n @cindex @code{format} function attribute\n @opindex Wformat"}]}