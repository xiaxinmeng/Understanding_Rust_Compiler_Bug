{"sha": "c878c6586dee353e685364910e02ad1a611d4634", "node_id": "C_kwDOANBUbNoAKGM4NzhjNjU4NmRlZTM1M2U2ODUzNjQ5MTBlMDJhZDFhNjExZDQ2MzQ", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-20T06:54:45Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-22T12:51:21Z"}, "message": "RISC-V: Add RVV reduction C/C++ intrinsics support\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-vector-builtins-bases.cc (class reducop): New class.\n\t(class widen_reducop): Ditto.\n\t(class freducop): Ditto.\n\t(class widen_freducop): Ditto.\n\t(BASE): Ditto.\n\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n\t* config/riscv/riscv-vector-builtins-functions.def (vredsum): Add reduction support.\n\t(vredmaxu): Ditto.\n\t(vredmax): Ditto.\n\t(vredminu): Ditto.\n\t(vredmin): Ditto.\n\t(vredand): Ditto.\n\t(vredor): Ditto.\n\t(vredxor): Ditto.\n\t(vwredsum): Ditto.\n\t(vwredsumu): Ditto.\n\t(vfredusum): Ditto.\n\t(vfredosum): Ditto.\n\t(vfredmax): Ditto.\n\t(vfredmin): Ditto.\n\t(vfwredosum): Ditto.\n\t(vfwredusum): Ditto.\n\t* config/riscv/riscv-vector-builtins-shapes.cc (struct reduc_alu_def): Ditto.\n\t(SHAPE): Ditto.\n\t* config/riscv/riscv-vector-builtins-shapes.h: Ditto.\n\t* config/riscv/riscv-vector-builtins-types.def (DEF_RVV_WI_OPS): New macro.\n\t(DEF_RVV_WU_OPS): Ditto.\n\t(DEF_RVV_WF_OPS): Ditto.\n\t(vint8mf8_t): Ditto.\n\t(vint8mf4_t): Ditto.\n\t(vint8mf2_t): Ditto.\n\t(vint8m1_t): Ditto.\n\t(vint8m2_t): Ditto.\n\t(vint8m4_t): Ditto.\n\t(vint8m8_t): Ditto.\n\t(vint16mf4_t): Ditto.\n\t(vint16mf2_t): Ditto.\n\t(vint16m1_t): Ditto.\n\t(vint16m2_t): Ditto.\n\t(vint16m4_t): Ditto.\n\t(vint16m8_t): Ditto.\n\t(vint32mf2_t): Ditto.\n\t(vint32m1_t): Ditto.\n\t(vint32m2_t): Ditto.\n\t(vint32m4_t): Ditto.\n\t(vint32m8_t): Ditto.\n\t(vuint8mf8_t): Ditto.\n\t(vuint8mf4_t): Ditto.\n\t(vuint8mf2_t): Ditto.\n\t(vuint8m1_t): Ditto.\n\t(vuint8m2_t): Ditto.\n\t(vuint8m4_t): Ditto.\n\t(vuint8m8_t): Ditto.\n\t(vuint16mf4_t): Ditto.\n\t(vuint16mf2_t): Ditto.\n\t(vuint16m1_t): Ditto.\n\t(vuint16m2_t): Ditto.\n\t(vuint16m4_t): Ditto.\n\t(vuint16m8_t): Ditto.\n\t(vuint32mf2_t): Ditto.\n\t(vuint32m1_t): Ditto.\n\t(vuint32m2_t): Ditto.\n\t(vuint32m4_t): Ditto.\n\t(vuint32m8_t): Ditto.\n\t(vfloat32mf2_t): Ditto.\n\t(vfloat32m1_t): Ditto.\n\t(vfloat32m2_t): Ditto.\n\t(vfloat32m4_t): Ditto.\n\t(vfloat32m8_t): Ditto.\n\t* config/riscv/riscv-vector-builtins.cc (DEF_RVV_WI_OPS): Ditto.\n\t(DEF_RVV_WU_OPS): Ditto.\n\t(DEF_RVV_WF_OPS): Ditto.\n\t(required_extensions_p): Add reduction support.\n\t(rvv_arg_type_info::get_base_vector_type): Ditto.\n\t(rvv_arg_type_info::get_tree_type): Ditto.\n\t* config/riscv/riscv-vector-builtins.h (enum rvv_base_type): Ditto.\n\t* config/riscv/riscv.md: Ditto.\n\t* config/riscv/vector-iterators.md (minu): Ditto.\n\t* config/riscv/vector.md (@pred_reduc_<reduc><mode><vlmul1>): New patern.\n\t(@pred_reduc_<reduc><mode><vlmul1_zve32>): Ditto.\n\t(@pred_widen_reduc_plus<v_su><mode><vwlmul1>): Ditto.\n\t(@pred_widen_reduc_plus<v_su><mode><vwlmul1_zve32>):Ditto.\n\t(@pred_reduc_plus<order><mode><vlmul1>): Ditto.\n\t(@pred_reduc_plus<order><mode><vlmul1_zve32>): Ditto.\n\t(@pred_widen_reduc_plus<order><mode><vwlmul1>): Ditto.", "tree": {"sha": "e78e2820be653b966d4dcb1f041ada2d8215a223", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e78e2820be653b966d4dcb1f041ada2d8215a223"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c878c6586dee353e685364910e02ad1a611d4634", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c878c6586dee353e685364910e02ad1a611d4634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c878c6586dee353e685364910e02ad1a611d4634", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c878c6586dee353e685364910e02ad1a611d4634/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc244cdc05a0cc4a7c40c5c5027c12cc1dc6e4d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc244cdc05a0cc4a7c40c5c5027c12cc1dc6e4d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc244cdc05a0cc4a7c40c5c5027c12cc1dc6e4d3"}], "stats": {"total": 682, "additions": 668, "deletions": 14}, "files": [{"sha": "f6ed2e53453b0b7643f02ca759d0bbd556d55576", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.cc", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c878c6586dee353e685364910e02ad1a611d4634/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c878c6586dee353e685364910e02ad1a611d4634/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc?ref=c878c6586dee353e685364910e02ad1a611d4634", "patch": "@@ -1283,6 +1283,64 @@ class vfncvt_rod_f : public function_base\n   }\n };\n \n+/* Implements reduction instructions.  */\n+template<rtx_code CODE>\n+class reducop : public function_base\n+{\n+public:\n+  bool apply_mask_policy_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (\n+      code_for_pred_reduc (CODE, e.vector_mode (), e.vector_mode ()));\n+  }\n+};\n+\n+/* Implements widen reduction instructions.  */\n+template<int UNSPEC>\n+class widen_reducop : public function_base\n+{\n+public:\n+  bool apply_mask_policy_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (code_for_pred_widen_reduc_plus (UNSPEC,\n+\t\t\t\t\t\t\t     e.vector_mode (),\n+\t\t\t\t\t\t\t     e.vector_mode ()));\n+  }\n+};\n+\n+/* Implements floating-point reduction instructions.  */\n+template<int UNSPEC>\n+class freducop : public function_base\n+{\n+public:\n+  bool apply_mask_policy_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (\n+      code_for_pred_reduc_plus (UNSPEC, e.vector_mode (), e.vector_mode ()));\n+  }\n+};\n+\n+/* Implements widening floating-point reduction instructions.  */\n+template<int UNSPEC>\n+class widen_freducop : public function_base\n+{\n+public:\n+  bool apply_mask_policy_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (code_for_pred_widen_reduc_plus (UNSPEC,\n+\t\t\t\t\t\t\t     e.vector_mode (),\n+\t\t\t\t\t\t\t     e.vector_mode ()));\n+  }\n+};\n+\n static CONSTEXPR const vsetvl<false> vsetvl_obj;\n static CONSTEXPR const vsetvl<true> vsetvlmax_obj;\n static CONSTEXPR const loadstore<false, LST_UNIT_STRIDE, false> vle_obj;\n@@ -1456,6 +1514,22 @@ static CONSTEXPR const vfncvt_rtz_x<FIX> vfncvt_rtz_x_obj;\n static CONSTEXPR const vfncvt_rtz_x<UNSIGNED_FIX> vfncvt_rtz_xu_obj;\n static CONSTEXPR const vfncvt_f vfncvt_f_obj;\n static CONSTEXPR const vfncvt_rod_f vfncvt_rod_f_obj;\n+static CONSTEXPR const reducop<PLUS> vredsum_obj;\n+static CONSTEXPR const reducop<UMAX> vredmaxu_obj;\n+static CONSTEXPR const reducop<SMAX> vredmax_obj;\n+static CONSTEXPR const reducop<UMIN> vredminu_obj;\n+static CONSTEXPR const reducop<SMIN> vredmin_obj;\n+static CONSTEXPR const reducop<AND> vredand_obj;\n+static CONSTEXPR const reducop<IOR> vredor_obj;\n+static CONSTEXPR const reducop<XOR> vredxor_obj;\n+static CONSTEXPR const widen_reducop<UNSPEC_WREDUC_SUM> vwredsum_obj;\n+static CONSTEXPR const widen_reducop<UNSPEC_WREDUC_USUM> vwredsumu_obj;\n+static CONSTEXPR const freducop<UNSPEC_UNORDERED> vfredusum_obj;\n+static CONSTEXPR const freducop<UNSPEC_ORDERED> vfredosum_obj;\n+static CONSTEXPR const reducop<SMAX> vfredmax_obj;\n+static CONSTEXPR const reducop<SMIN> vfredmin_obj;\n+static CONSTEXPR const widen_freducop<UNSPEC_UNORDERED> vfwredusum_obj;\n+static CONSTEXPR const widen_freducop<UNSPEC_ORDERED> vfwredosum_obj;\n \n /* Declare the function base NAME, pointing it to an instance\n    of class <NAME>_obj.  */\n@@ -1635,5 +1709,21 @@ BASE (vfncvt_rtz_x)\n BASE (vfncvt_rtz_xu)\n BASE (vfncvt_f)\n BASE (vfncvt_rod_f)\n+BASE (vredsum)\n+BASE (vredmaxu)\n+BASE (vredmax)\n+BASE (vredminu)\n+BASE (vredmin)\n+BASE (vredand)\n+BASE (vredor)\n+BASE (vredxor)\n+BASE (vwredsum)\n+BASE (vwredsumu)\n+BASE (vfredusum)\n+BASE (vfredosum)\n+BASE (vfredmax)\n+BASE (vfredmin)\n+BASE (vfwredosum)\n+BASE (vfwredusum)\n \n } // end namespace riscv_vector"}, {"sha": "9f0e4675f81aed9620f2324b2b86c0048cd0d8a5", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c878c6586dee353e685364910e02ad1a611d4634/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c878c6586dee353e685364910e02ad1a611d4634/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h?ref=c878c6586dee353e685364910e02ad1a611d4634", "patch": "@@ -203,6 +203,22 @@ extern const function_base *const vfncvt_rtz_x;\n extern const function_base *const vfncvt_rtz_xu;\n extern const function_base *const vfncvt_f;\n extern const function_base *const vfncvt_rod_f;\n+extern const function_base *const vredsum;\n+extern const function_base *const vredmaxu;\n+extern const function_base *const vredmax;\n+extern const function_base *const vredminu;\n+extern const function_base *const vredmin;\n+extern const function_base *const vredand;\n+extern const function_base *const vredor;\n+extern const function_base *const vredxor;\n+extern const function_base *const vwredsum;\n+extern const function_base *const vwredsumu;\n+extern const function_base *const vfredusum;\n+extern const function_base *const vfredosum;\n+extern const function_base *const vfredmax;\n+extern const function_base *const vfredmin;\n+extern const function_base *const vfwredosum;\n+extern const function_base *const vfwredusum;\n }\n \n } // end namespace riscv_vector"}, {"sha": "230b76cd0f24ad8154c9a50bb34cd24fbe74d845", "filename": "gcc/config/riscv/riscv-vector-builtins-functions.def", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c878c6586dee353e685364910e02ad1a611d4634/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c878c6586dee353e685364910e02ad1a611d4634/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def?ref=c878c6586dee353e685364910e02ad1a611d4634", "patch": "@@ -408,7 +408,31 @@ DEF_RVV_FUNCTION (vfncvt_f, narrow_alu, full_preds, u_to_nf_xu_w_ops)\n DEF_RVV_FUNCTION (vfncvt_f, narrow_alu, full_preds, f_to_nf_f_w_ops)\n DEF_RVV_FUNCTION (vfncvt_rod_f, narrow_alu, full_preds, f_to_nf_f_w_ops)\n \n-/* TODO: 14. Vector Reduction Operations.  */\n+/* 14. Vector Reduction Operations.  */\n+\n+// 14.1. Vector Single-Width Integer Reduction Instructions\n+DEF_RVV_FUNCTION (vredsum, reduc_alu, no_mu_preds, iu_vs_ops)\n+DEF_RVV_FUNCTION (vredmaxu, reduc_alu, no_mu_preds, iu_vs_ops)\n+DEF_RVV_FUNCTION (vredmax, reduc_alu, no_mu_preds, iu_vs_ops)\n+DEF_RVV_FUNCTION (vredminu, reduc_alu, no_mu_preds, iu_vs_ops)\n+DEF_RVV_FUNCTION (vredmin, reduc_alu, no_mu_preds, iu_vs_ops)\n+DEF_RVV_FUNCTION (vredand, reduc_alu, no_mu_preds, iu_vs_ops)\n+DEF_RVV_FUNCTION (vredor, reduc_alu, no_mu_preds, iu_vs_ops)\n+DEF_RVV_FUNCTION (vredxor, reduc_alu, no_mu_preds, iu_vs_ops)\n+\n+// 14.2. Vector Widening Integer Reduction Instructions\n+DEF_RVV_FUNCTION (vwredsum, reduc_alu, no_mu_preds, wi_vs_ops)\n+DEF_RVV_FUNCTION (vwredsumu, reduc_alu, no_mu_preds, wu_vs_ops)\n+\n+// 14.3. Vector Single-Width Floating-Point Reduction Instructions\n+DEF_RVV_FUNCTION (vfredusum, reduc_alu, no_mu_preds, f_vs_ops)\n+DEF_RVV_FUNCTION (vfredosum, reduc_alu, no_mu_preds, f_vs_ops)\n+DEF_RVV_FUNCTION (vfredmax, reduc_alu, no_mu_preds, f_vs_ops)\n+DEF_RVV_FUNCTION (vfredmin, reduc_alu, no_mu_preds, f_vs_ops)\n+\n+// 14.4. Vector Widening Floating-Point Reduction Instructions\n+DEF_RVV_FUNCTION (vfwredosum, reduc_alu, no_mu_preds, wf_vs_ops)\n+DEF_RVV_FUNCTION (vfwredusum, reduc_alu, no_mu_preds, wf_vs_ops)\n \n /* 15. Vector Mask Instructions.  */\n "}, {"sha": "b3f5951087d7fe4733ac272b0ada5d71f9b6e11d", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.cc", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c878c6586dee353e685364910e02ad1a611d4634/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c878c6586dee353e685364910e02ad1a611d4634/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc?ref=c878c6586dee353e685364910e02ad1a611d4634", "patch": "@@ -374,6 +374,34 @@ struct mask_alu_def : public build_base\n   }\n };\n \n+/* reduc_alu_def class.  */\n+struct reduc_alu_def : public build_base\n+{\n+  char *get_name (function_builder &b, const function_instance &instance,\n+\t\t  bool overloaded_p) const override\n+  {\n+    b.append_base_name (instance.base_name);\n+\n+    /* vop_<op> --> vop<sew>_<op>_<type>.  */\n+    if (!overloaded_p)\n+      {\n+\tb.append_name (operand_suffixes[instance.op_info->op]);\n+\tb.append_name (type_suffixes[instance.type.index].vector);\n+\tvector_type_index ret_type_idx\n+\t  = instance.op_info->ret.get_base_vector_type (\n+\t    builtin_types[instance.type.index].vector);\n+\tb.append_name (type_suffixes[ret_type_idx].vector);\n+      }\n+\n+    /* According to rvv-intrinsic-doc, it does not add \"_m\" suffix\n+       for vop_m C++ overloaded API.  */\n+    if (overloaded_p && instance.pred == PRED_TYPE_m)\n+      return b.finish_name ();\n+    b.append_name (predication_suffixes[instance.pred]);\n+    return b.finish_name ();\n+  }\n+};\n+\n SHAPE(vsetvl, vsetvl)\n SHAPE(vsetvl, vsetvlmax)\n SHAPE(loadstore, loadstore)\n@@ -385,5 +413,6 @@ SHAPE(return_mask, return_mask)\n SHAPE(narrow_alu, narrow_alu)\n SHAPE(move, move)\n SHAPE(mask_alu, mask_alu)\n+SHAPE(reduc_alu, reduc_alu)\n \n } // end namespace riscv_vector"}, {"sha": "85769ea024ab224eecd10871edcc051f22d16cac", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c878c6586dee353e685364910e02ad1a611d4634/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c878c6586dee353e685364910e02ad1a611d4634/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h?ref=c878c6586dee353e685364910e02ad1a611d4634", "patch": "@@ -35,6 +35,7 @@ extern const function_shape *const return_mask;\n extern const function_shape *const narrow_alu;\n extern const function_shape *const move;\n extern const function_shape *const mask_alu;\n+extern const function_shape *const reduc_alu;\n }\n \n } // end namespace riscv_vector"}, {"sha": "a15e54c15720fad9452b690d6fd78a7cdc104f32", "filename": "gcc/config/riscv/riscv-vector-builtins-types.def", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c878c6586dee353e685364910e02ad1a611d4634/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c878c6586dee353e685364910e02ad1a611d4634/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-types.def?ref=c878c6586dee353e685364910e02ad1a611d4634", "patch": "@@ -133,6 +133,24 @@ along with GCC; see the file COPYING3. If not see\n #define DEF_RVV_WCONVERT_F_OPS(TYPE, REQUIRE)\n #endif\n \n+/* Use \"DEF_RVV_WI_OPS\" macro include all signed integer can be widened which\n+   will be iterated and registered as intrinsic functions.  */\n+#ifndef DEF_RVV_WI_OPS\n+#define DEF_RVV_WI_OPS(TYPE, REQUIRE)\n+#endif\n+\n+/* Use \"DEF_RVV_WU_OPS\" macro include all unsigned integer can be widened which\n+   will be iterated and registered as intrinsic functions.  */\n+#ifndef DEF_RVV_WU_OPS\n+#define DEF_RVV_WU_OPS(TYPE, REQUIRE)\n+#endif\n+\n+/* Use \"DEF_RVV_WF_OPS\" macro include all floating-point can be widened which\n+   will be iterated and registered as intrinsic functions.  */\n+#ifndef DEF_RVV_WF_OPS\n+#define DEF_RVV_WF_OPS(TYPE, REQUIRE)\n+#endif\n+\n DEF_RVV_I_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n DEF_RVV_I_OPS (vint8mf4_t, 0)\n DEF_RVV_I_OPS (vint8mf2_t, 0)\n@@ -345,6 +363,50 @@ DEF_RVV_WCONVERT_F_OPS (vfloat64m2_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_WCONVERT_F_OPS (vfloat64m4_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_WCONVERT_F_OPS (vfloat64m8_t, RVV_REQUIRE_ELEN_FP_64)\n \n+DEF_RVV_WI_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WI_OPS (vint8mf4_t, 0)\n+DEF_RVV_WI_OPS (vint8mf2_t, 0)\n+DEF_RVV_WI_OPS (vint8m1_t, 0)\n+DEF_RVV_WI_OPS (vint8m2_t, 0)\n+DEF_RVV_WI_OPS (vint8m4_t, 0)\n+DEF_RVV_WI_OPS (vint8m8_t, 0)\n+DEF_RVV_WI_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WI_OPS (vint16mf2_t, 0)\n+DEF_RVV_WI_OPS (vint16m1_t, 0)\n+DEF_RVV_WI_OPS (vint16m2_t, 0)\n+DEF_RVV_WI_OPS (vint16m4_t, 0)\n+DEF_RVV_WI_OPS (vint16m8_t, 0)\n+DEF_RVV_WI_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WI_OPS (vint32m1_t, 0)\n+DEF_RVV_WI_OPS (vint32m2_t, 0)\n+DEF_RVV_WI_OPS (vint32m4_t, 0)\n+DEF_RVV_WI_OPS (vint32m8_t, 0)\n+\n+DEF_RVV_WU_OPS (vuint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WU_OPS (vuint8mf4_t, 0)\n+DEF_RVV_WU_OPS (vuint8mf2_t, 0)\n+DEF_RVV_WU_OPS (vuint8m1_t, 0)\n+DEF_RVV_WU_OPS (vuint8m2_t, 0)\n+DEF_RVV_WU_OPS (vuint8m4_t, 0)\n+DEF_RVV_WU_OPS (vuint8m8_t, 0)\n+DEF_RVV_WU_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WU_OPS (vuint16mf2_t, 0)\n+DEF_RVV_WU_OPS (vuint16m1_t, 0)\n+DEF_RVV_WU_OPS (vuint16m2_t, 0)\n+DEF_RVV_WU_OPS (vuint16m4_t, 0)\n+DEF_RVV_WU_OPS (vuint16m8_t, 0)\n+DEF_RVV_WU_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WU_OPS (vuint32m1_t, 0)\n+DEF_RVV_WU_OPS (vuint32m2_t, 0)\n+DEF_RVV_WU_OPS (vuint32m4_t, 0)\n+DEF_RVV_WU_OPS (vuint32m8_t, 0)\n+\n+DEF_RVV_WF_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_WF_OPS (vfloat32m1_t, RVV_REQUIRE_ELEN_FP_32)\n+DEF_RVV_WF_OPS (vfloat32m2_t, RVV_REQUIRE_ELEN_FP_32)\n+DEF_RVV_WF_OPS (vfloat32m4_t, RVV_REQUIRE_ELEN_FP_32)\n+DEF_RVV_WF_OPS (vfloat32m8_t, RVV_REQUIRE_ELEN_FP_32)\n+\n #undef DEF_RVV_I_OPS\n #undef DEF_RVV_U_OPS\n #undef DEF_RVV_F_OPS\n@@ -363,3 +425,6 @@ DEF_RVV_WCONVERT_F_OPS (vfloat64m8_t, RVV_REQUIRE_ELEN_FP_64)\n #undef DEF_RVV_WCONVERT_I_OPS\n #undef DEF_RVV_WCONVERT_U_OPS\n #undef DEF_RVV_WCONVERT_F_OPS\n+#undef DEF_RVV_WI_OPS\n+#undef DEF_RVV_WU_OPS\n+#undef DEF_RVV_WF_OPS"}, {"sha": "2e92ece3b645f1535bcedb8d280ec11d9baac80c", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 91, "deletions": 1, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c878c6586dee353e685364910e02ad1a611d4634/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c878c6586dee353e685364910e02ad1a611d4634/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=c878c6586dee353e685364910e02ad1a611d4634", "patch": "@@ -133,6 +133,27 @@ static const rvv_type_info i_ops[] = {\n #include \"riscv-vector-builtins-types.def\"\n   {NUM_VECTOR_TYPES, 0}};\n \n+/* A list of all signed integer can be widened will be registered for intrinsic\n+ * functions.  */\n+static const rvv_type_info wi_ops[] = {\n+#define DEF_RVV_WI_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n+/* A list of all unsigned integer can be widened will be registered for\n+ * intrinsic functions.  */\n+static const rvv_type_info wu_ops[] = {\n+#define DEF_RVV_WU_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n+/* A list of all floating-point can be widened will be registered for intrinsic\n+ * functions.  */\n+static const rvv_type_info wf_ops[] = {\n+#define DEF_RVV_WF_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n /* A list of all signed integer that SEW = 64 require full 'V' extension will be\n    registered for intrinsic functions.  */\n static const rvv_type_info full_v_i_ops[] = {\n@@ -418,6 +439,17 @@ static CONSTEXPR const rvv_arg_type_info shift_wv_args[]\n static CONSTEXPR const rvv_arg_type_info v_args[]\n   = {rvv_arg_type_info (RVV_BASE_vector), rvv_arg_type_info_end};\n \n+/* A list of args for vector_type func (vector_type, lmul1_type) function.  */\n+static CONSTEXPR const rvv_arg_type_info vs_args[]\n+  = {rvv_arg_type_info (RVV_BASE_vector),\n+     rvv_arg_type_info (RVV_BASE_lmul1_vector), rvv_arg_type_info_end};\n+\n+/* A list of args for vector_type func (vector_type, widen_lmul1_type) function.\n+ */\n+static CONSTEXPR const rvv_arg_type_info wvs_args[]\n+  = {rvv_arg_type_info (RVV_BASE_vector),\n+     rvv_arg_type_info (RVV_BASE_widen_lmul1_vector), rvv_arg_type_info_end};\n+\n /* A list of args for vector_type func (vector_type) function.  */\n static CONSTEXPR const rvv_arg_type_info f_v_args[]\n   = {rvv_arg_type_info (RVV_BASE_float_vector), rvv_arg_type_info_end};\n@@ -562,6 +594,10 @@ static CONSTEXPR const predication_type_index full_preds[]\n   = {PRED_TYPE_none, PRED_TYPE_m,  PRED_TYPE_tu,  PRED_TYPE_tum,\n      PRED_TYPE_tumu, PRED_TYPE_mu, NUM_PRED_TYPES};\n \n+/* vop/vop_m/vop_tu/vop_tum/ will be registered.  */\n+static CONSTEXPR const predication_type_index no_mu_preds[]\n+  = {PRED_TYPE_none, PRED_TYPE_m, PRED_TYPE_tu, PRED_TYPE_tum, NUM_PRED_TYPES};\n+\n /* vop/vop_tu will be registered.  */\n static CONSTEXPR const predication_type_index none_tu_preds[]\n   = {PRED_TYPE_none, PRED_TYPE_tu, NUM_PRED_TYPES};\n@@ -1070,6 +1106,46 @@ static CONSTEXPR const rvv_op_info iu_v_ops\n      rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n      v_args /* Args */};\n \n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info iu_vs_ops\n+  = {iu_ops,\t\t\t\t\t/* Types */\n+     OP_TYPE_vs,\t\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_lmul1_vector), /* Return type */\n+     vs_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info f_vs_ops\n+  = {f_ops,\t\t\t\t\t/* Types */\n+     OP_TYPE_vs,\t\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_lmul1_vector), /* Return type */\n+     vs_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info wi_vs_ops\n+  = {wi_ops,\t\t\t\t\t      /* Types */\n+     OP_TYPE_vs,\t\t\t\t      /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_widen_lmul1_vector), /* Return type */\n+     wvs_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info wu_vs_ops\n+  = {wu_ops,\t\t\t\t\t      /* Types */\n+     OP_TYPE_vs,\t\t\t\t      /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_widen_lmul1_vector), /* Return type */\n+     wvs_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info wf_vs_ops\n+  = {wf_ops,\t\t\t\t\t      /* Types */\n+     OP_TYPE_vs,\t\t\t\t      /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_widen_lmul1_vector), /* Return type */\n+     wvs_args /* Args */};\n+\n /* A static operand information for vector_type func (vector_type)\n  * function registration. */\n static CONSTEXPR const rvv_op_info f_v_ops\n@@ -1707,7 +1783,8 @@ required_extensions_p (enum rvv_base_type type)\n \t || type == RVV_BASE_uint32_index || type == RVV_BASE_uint64_index\n \t || type == RVV_BASE_float_vector\n \t || type == RVV_BASE_double_trunc_float_vector\n-\t || type == RVV_BASE_double_trunc_vector;\n+\t || type == RVV_BASE_double_trunc_vector\n+\t || type == RVV_BASE_widen_lmul1_vector;\n }\n \n /* Check whether all the RVV_REQUIRE_* values in REQUIRED_EXTENSIONS are\n@@ -1822,6 +1899,7 @@ rvv_arg_type_info::get_base_vector_type (tree type) const\n   poly_int64 nunits = GET_MODE_NUNITS (TYPE_MODE (type));\n   machine_mode inner_mode = GET_MODE_INNER (TYPE_MODE (type));\n   poly_int64 bitsize = GET_MODE_BITSIZE (inner_mode);\n+  poly_int64 bytesize = GET_MODE_SIZE (inner_mode);\n \n   bool unsigned_p = TYPE_UNSIGNED (type);\n   if (unsigned_base_type_p (base_type))\n@@ -1875,6 +1953,16 @@ rvv_arg_type_info::get_base_vector_type (tree type) const\n     case RVV_BASE_unsigned_vector:\n       inner_mode = int_mode_for_mode (inner_mode).require ();\n       break;\n+    case RVV_BASE_lmul1_vector:\n+      nunits = exact_div (BYTES_PER_RISCV_VECTOR, bytesize);\n+      break;\n+    case RVV_BASE_widen_lmul1_vector:\n+      inner_mode\n+\t= get_mode_for_bitsize (bitsize * 2, FLOAT_MODE_P (inner_mode));\n+      if (BYTES_PER_RISCV_VECTOR.coeffs[0] < (bytesize * 2).coeffs[0])\n+\treturn NUM_VECTOR_TYPES;\n+      nunits = exact_div (BYTES_PER_RISCV_VECTOR, bytesize * 2);\n+      break;\n     default:\n       return NUM_VECTOR_TYPES;\n     }\n@@ -1963,6 +2051,8 @@ rvv_arg_type_info::get_tree_type (vector_type_index type_idx) const\n     case RVV_BASE_double_trunc_float_vector:\n     case RVV_BASE_signed_vector:\n     case RVV_BASE_unsigned_vector:\n+    case RVV_BASE_lmul1_vector:\n+    case RVV_BASE_widen_lmul1_vector:\n       if (get_base_vector_type (builtin_types[type_idx].vector)\n \t  != NUM_VECTOR_TYPES)\n \treturn builtin_types[get_base_vector_type ("}, {"sha": "ede08c6a4805d6c29172a75b6a67e60839acb3bc", "filename": "gcc/config/riscv/riscv-vector-builtins.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c878c6586dee353e685364910e02ad1a611d4634/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c878c6586dee353e685364910e02ad1a611d4634/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h?ref=c878c6586dee353e685364910e02ad1a611d4634", "patch": "@@ -164,8 +164,10 @@ enum rvv_base_type\n   RVV_BASE_double_trunc_signed_vector,\n   RVV_BASE_double_trunc_unsigned_vector,\n   RVV_BASE_double_trunc_unsigned_scalar,\n-  RVV_BASE_float_vector,\n   RVV_BASE_double_trunc_float_vector,\n+  RVV_BASE_float_vector,\n+  RVV_BASE_lmul1_vector,\n+  RVV_BASE_widen_lmul1_vector,\n   NUM_BASE_TYPES\n };\n "}, {"sha": "05924e9bbf109c9f0278e2ca6c033f52d5a2f726", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c878c6586dee353e685364910e02ad1a611d4634/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c878c6586dee353e685364910e02ad1a611d4634/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=c878c6586dee353e685364910e02ad1a611d4634", "patch": "@@ -309,9 +309,9 @@\n ;; 14. Vector reduction operations\n ;; vired       vector single-width integer reduction instructions\n ;; viwred      vector widening integer reduction instructions\n-;; vfred       vector single-width floating-point un-ordered reduction instruction\n+;; vfredu      vector single-width floating-point un-ordered reduction instruction\n ;; vfredo      vector single-width floating-point ordered reduction instruction\n-;; vfwred      vector widening floating-point un-ordered reduction instruction\n+;; vfwredu      vector widening floating-point un-ordered reduction instruction\n ;; vfwredo     vector widening floating-point ordered reduction instruction\n ;; 15. Vector mask instructions\n ;; vmalu       vector mask-register logical instructions\n@@ -344,7 +344,7 @@\n    vfcmp,vfminmax,vfsgnj,vfclass,vfmerge,vfmov,\n    vfcvtitof,vfcvtftoi,vfwcvtitof,vfwcvtftoi,\n    vfwcvtftof,vfncvtitof,vfncvtftoi,vfncvtftof,\n-   vired,viwred,vfred,vfredo,vfwred,vfwredo,\n+   vired,viwred,vfredu,vfredo,vfwredu,vfwredo,\n    vmalu,vmpop,vmffs,vmsfs,vmiota,vmidx,vimovvx,vimovxv,vfmovvf,vfmovfv,\n    vislide,vislide1,vfslide1,vgather,vcompress,vmov\"\n   (cond [(eq_attr \"got\" \"load\") (const_string \"load\")"}, {"sha": "cb817abcfdec0e1a78a0b0386554e14029fb3a59", "filename": "gcc/config/riscv/vector-iterators.md", "status": "modified", "additions": 129, "deletions": 1, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c878c6586dee353e685364910e02ad1a611d4634/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c878c6586dee353e685364910e02ad1a611d4634/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector-iterators.md?ref=c878c6586dee353e685364910e02ad1a611d4634", "patch": "@@ -66,6 +66,10 @@\n   UNSPEC_VFCVT\n   UNSPEC_UNSIGNED_VFCVT\n   UNSPEC_ROD\n+\n+  UNSPEC_REDUC\n+  UNSPEC_WREDUC_SUM\n+  UNSPEC_WREDUC_USUM\n ])\n \n (define_mode_iterator V [\n@@ -93,6 +97,23 @@\n   (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n ])\n \n+(define_mode_iterator VI_ZVE32 [\n+  VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI VNx32QI\n+  VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI\n+  VNx1SI VNx2SI VNx4SI VNx8SI\n+])\n+\n+(define_mode_iterator VWI [\n+  VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI VNx32QI (VNx64QI \"TARGET_MIN_VLEN > 32\")\n+  VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n+  VNx1SI VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n+])\n+\n+(define_mode_iterator VWI_ZVE32 [\n+  VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI VNx32QI\n+  VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI\n+])\n+\n (define_mode_iterator VF [\n   (VNx1SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n@@ -105,6 +126,17 @@\n   (VNx8DF \"TARGET_VECTOR_ELEN_FP_64\")\n ])\n \n+(define_mode_iterator VF_ZVE32 [\n+  (VNx1SF \"TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx4SF \"TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx8SF \"TARGET_VECTOR_ELEN_FP_32\")\n+])\n+\n+(define_mode_iterator VWF [\n+  VNx1SF VNx2SF VNx4SF VNx8SF (VNx16SF \"TARGET_MIN_VLEN > 32\")\n+])\n+\n (define_mode_iterator VFULLI [\n   VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI VNx32QI (VNx64QI \"TARGET_MIN_VLEN > 32\")\n   VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n@@ -334,6 +366,96 @@\n   (VNx1DF \"VNx1SI\") (VNx2DF \"VNx2SI\") (VNx4DF \"VNx4SI\") (VNx8DF \"VNx8SI\")\n ])\n \n+(define_mode_attr VLMUL1 [\n+  (VNx1QI \"VNx8QI\") (VNx2QI \"VNx8QI\") (VNx4QI \"VNx8QI\") \n+  (VNx8QI \"VNx8QI\") (VNx16QI \"VNx8QI\") (VNx32QI \"VNx8QI\") (VNx64QI \"VNx8QI\")\n+  (VNx1HI \"VNx4HI\") (VNx2HI \"VNx4HI\") (VNx4HI \"VNx4HI\") \n+  (VNx8HI \"VNx4HI\") (VNx16HI \"VNx4HI\") (VNx32HI \"VNx4HI\")\n+  (VNx1SI \"VNx2SI\") (VNx2SI \"VNx2SI\") (VNx4SI \"VNx2SI\") \n+  (VNx8SI \"VNx2SI\") (VNx16SI \"VNx2SI\")\n+  (VNx1DI \"VNx1DI\") (VNx2DI \"VNx1DI\")\n+  (VNx4DI \"VNx1DI\") (VNx8DI \"VNx1DI\")\n+  (VNx1SF \"VNx2SF\") (VNx2SF \"VNx2SF\")\n+  (VNx4SF \"VNx2SF\") (VNx8SF \"VNx2SF\") (VNx16SF \"VNx2SF\")\n+  (VNx1DF \"VNx1DF\") (VNx2DF \"VNx1DF\")\n+  (VNx4DF \"VNx1DF\") (VNx8DF \"VNx1DF\")\n+])\n+\n+(define_mode_attr VLMUL1_ZVE32 [\n+  (VNx1QI \"VNx4QI\") (VNx2QI \"VNx4QI\") (VNx4QI \"VNx4QI\") \n+  (VNx8QI \"VNx4QI\") (VNx16QI \"VNx4QI\") (VNx32QI \"VNx4QI\")\n+  (VNx1HI \"VNx2HI\") (VNx2HI \"VNx2HI\") (VNx4HI \"VNx2HI\") \n+  (VNx8HI \"VNx2HI\") (VNx16HI \"VNx2HI\")\n+  (VNx1SI \"VNx1SI\") (VNx2SI \"VNx1SI\") (VNx4SI \"VNx1SI\") \n+  (VNx8SI \"VNx1SI\")\n+  (VNx1SF \"VNx2SF\") (VNx2SF \"VNx2SF\")\n+  (VNx4SF \"VNx2SF\") (VNx8SF \"VNx2SF\")\n+])\n+\n+(define_mode_attr VWLMUL1 [\n+  (VNx1QI \"VNx4HI\") (VNx2QI \"VNx4HI\") (VNx4QI \"VNx4HI\") \n+  (VNx8QI \"VNx4HI\") (VNx16QI \"VNx4HI\") (VNx32QI \"VNx4HI\") (VNx64QI \"VNx4HI\")\n+  (VNx1HI \"VNx2SI\") (VNx2HI \"VNx2SI\") (VNx4HI \"VNx2SI\") \n+  (VNx8HI \"VNx2SI\") (VNx16HI \"VNx2SI\") (VNx32HI \"VNx2SI\")\n+  (VNx1SI \"VNx1DI\") (VNx2SI \"VNx1DI\") (VNx4SI \"VNx1DI\") \n+  (VNx8SI \"VNx1DI\") (VNx16SI \"VNx1DI\")\n+  (VNx1SF \"VNx1DF\") (VNx2SF \"VNx1DF\")\n+  (VNx4SF \"VNx1DF\") (VNx8SF \"VNx1DF\") (VNx16SF \"VNx1DF\")\n+])\n+\n+(define_mode_attr VWLMUL1_ZVE32 [\n+  (VNx1QI \"VNx2HI\") (VNx2QI \"VNx2HI\") (VNx4QI \"VNx2HI\") \n+  (VNx8QI \"VNx2HI\") (VNx16QI \"VNx2HI\") (VNx32QI \"VNx2HI\")\n+  (VNx1HI \"VNx1SI\") (VNx2HI \"VNx1SI\") (VNx4HI \"VNx1SI\") \n+  (VNx8HI \"VNx1SI\") (VNx16HI \"VNx1SI\")\n+])\n+\n+(define_mode_attr vlmul1 [\n+  (VNx1QI \"vnx8qi\") (VNx2QI \"vnx8qi\") (VNx4QI \"vnx8qi\") \n+  (VNx8QI \"vnx8qi\") (VNx16QI \"vnx8qi\") (VNx32QI \"vnx8qi\") (VNx64QI \"vnx8qi\")\n+  (VNx1HI \"vnx4hi\") (VNx2HI \"vnx4hi\") (VNx4HI \"vnx4hi\") \n+  (VNx8HI \"vnx4hi\") (VNx16HI \"vnx4hi\") (VNx32HI \"vnx4hi\")\n+  (VNx1SI \"vnx2si\") (VNx2SI \"vnx2si\") (VNx4SI \"vnx2si\") \n+  (VNx8SI \"vnx2si\") (VNx16SI \"vnx2si\")\n+  (VNx1DI \"vnx1DI\") (VNx2DI \"vnx1DI\")\n+  (VNx4DI \"vnx1DI\") (VNx8DI \"vnx1DI\")\n+  (VNx1SF \"vnx2sf\") (VNx2SF \"vnx2sf\")\n+  (VNx4SF \"vnx2sf\") (VNx8SF \"vnx2sf\") (VNx16SF \"vnx2sf\")\n+  (VNx1DF \"vnx1df\") (VNx2DF \"vnx1df\")\n+  (VNx4DF \"vnx1df\") (VNx8DF \"vnx1df\")\n+])\n+\n+(define_mode_attr vlmul1_zve32 [\n+  (VNx1QI \"vnx4qi\") (VNx2QI \"vnx4qi\") (VNx4QI \"vnx4qi\") \n+  (VNx8QI \"vnx4qi\") (VNx16QI \"vnx4qi\") (VNx32QI \"vnx4qi\")\n+  (VNx1HI \"vnx2hi\") (VNx2HI \"vnx2hi\") (VNx4HI \"vnx2hi\") \n+  (VNx8HI \"vnx2hi\") (VNx16HI \"vnx2hi\")\n+  (VNx1SI \"vnx1si\") (VNx2SI \"vnx1si\") (VNx4SI \"vnx1si\") \n+  (VNx8SI \"vnx1si\")\n+  (VNx1SF \"vnx1sf\") (VNx2SF \"vnx1sf\")\n+  (VNx4SF \"vnx1sf\") (VNx8SF \"vnx1sf\")\n+])\n+\n+(define_mode_attr vwlmul1 [\n+  (VNx1QI \"vnx4hi\") (VNx2QI \"vnx4hi\") (VNx4QI \"vnx4hi\") \n+  (VNx8QI \"vnx4hi\") (VNx16QI \"vnx4hi\") (VNx32QI \"vnx4hi\") (VNx64QI \"vnx4hi\")\n+  (VNx1HI \"vnx2si\") (VNx2HI \"vnx2si\") (VNx4HI \"vnx2si\") \n+  (VNx8HI \"vnx2si\") (VNx16HI \"vnx2si\") (VNx32HI \"vnx2SI\")\n+  (VNx1SI \"vnx2di\") (VNx2SI \"vnx2di\") (VNx4SI \"vnx2di\") \n+  (VNx8SI \"vnx2di\") (VNx16SI \"vnx2di\")\n+  (VNx1SF \"vnx1df\") (VNx2SF \"vnx1df\")\n+  (VNx4SF \"vnx1df\") (VNx8SF \"vnx1df\") (VNx16SF \"vnx1df\")\n+])\n+\n+(define_mode_attr vwlmul1_zve32 [\n+  (VNx1QI \"vnx2hi\") (VNx2QI \"vnx2hi\") (VNx4QI \"vnx2hi\") \n+  (VNx8QI \"vnx2hi\") (VNx16QI \"vnx2hi\") (VNx32QI \"vnx2hi\")\n+  (VNx1HI \"vnx1si\") (VNx2HI \"vnx1si\") (VNx4HI \"vnx1si\") \n+  (VNx8HI \"vnx1si\") (VNx16HI \"vnx1SI\")\n+])\n+\n+(define_int_iterator WREDUC [UNSPEC_WREDUC_SUM UNSPEC_WREDUC_USUM])\n+\n (define_int_iterator ORDER [UNSPEC_ORDERED UNSPEC_UNORDERED])\n \n (define_int_iterator VMULH [UNSPEC_VMULHS UNSPEC_VMULHU UNSPEC_VMULHSU])\n@@ -360,7 +482,8 @@\n \n (define_int_attr v_su [(UNSPEC_VMULHS \"\") (UNSPEC_VMULHU \"u\") (UNSPEC_VMULHSU \"su\")\n \t\t       (UNSPEC_VNCLIP \"\") (UNSPEC_VNCLIPU \"u\")\n-\t\t       (UNSPEC_VFCVT \"\") (UNSPEC_UNSIGNED_VFCVT \"u\")])\n+\t\t       (UNSPEC_VFCVT \"\") (UNSPEC_UNSIGNED_VFCVT \"u\")\n+\t\t       (UNSPEC_WREDUC_SUM \"\") (UNSPEC_WREDUC_USUM \"u\")])\n (define_int_attr sat_op [(UNSPEC_VAADDU \"aaddu\") (UNSPEC_VAADD \"aadd\")\n \t\t\t (UNSPEC_VASUBU \"asubu\") (UNSPEC_VASUB \"asub\")\n \t\t\t (UNSPEC_VSMUL \"smul\") (UNSPEC_VSSRL \"ssrl\")\n@@ -418,6 +541,11 @@\n \n (define_code_iterator any_fix [fix unsigned_fix])\n (define_code_iterator any_float [float unsigned_float])\n+(define_code_iterator any_reduc [plus umax smax umin smin and ior xor])\n+(define_code_iterator any_freduc [smax smin])\n+(define_code_attr reduc [(plus \"sum\") (umax \"maxu\") (smax \"max\") (umin \"minu\")\n+\t\t\t (smin \"min\") (and \"and\") (ior \"or\") (xor \"xor\")])\n+\n (define_code_attr fix_cvt [(fix \"fix_trunc\") (unsigned_fix \"fixuns_trunc\")])\n (define_code_attr float_cvt [(float \"float\") (unsigned_float \"floatuns\")])\n "}, {"sha": "69b7cafbf17de199a38b4f6516230874da438f70", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 216, "deletions": 7, "changes": 223, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c878c6586dee353e685364910e02ad1a611d4634/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c878c6586dee353e685364910e02ad1a611d4634/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=c878c6586dee353e685364910e02ad1a611d4634", "patch": "@@ -48,7 +48,7 @@\n \t\t\t  vfcmp,vfminmax,vfsgnj,vfclass,vfmerge,vfmov,\\\n \t\t\t  vfcvtitof,vfcvtftoi,vfwcvtitof,vfwcvtftoi,\\\n \t\t\t  vfwcvtftof,vfncvtitof,vfncvtftoi,vfncvtftof,\\\n-\t\t\t  vired,viwred,vfred,vfredo,vfwred,vfwredo,\\\n+\t\t\t  vired,viwred,vfredu,vfredo,vfwredu,vfwredo,\\\n \t\t\t  vmalu,vmpop,vmffs,vmsfs,vmiota,vmidx,vimovvx,vimovxv,vfmovvf,vfmovfv,\\\n \t\t\t  vislide,vislide1,vfslide1,vgather,vcompress\")\n \t (const_string \"true\")]\n@@ -68,7 +68,7 @@\n \t\t\t  vfcmp,vfminmax,vfsgnj,vfclass,vfmerge,vfmov,\\\n \t\t\t  vfcvtitof,vfcvtftoi,vfwcvtitof,vfwcvtftoi,\\\n \t\t\t  vfwcvtftof,vfncvtitof,vfncvtftoi,vfncvtftof,\\\n-\t\t\t  vired,viwred,vfred,vfredo,vfwred,vfwredo,\\\n+\t\t\t  vired,viwred,vfredu,vfredo,vfwredu,vfwredo,\\\n \t\t\t  vmalu,vmpop,vmffs,vmsfs,vmiota,vmidx,vimovxv,vfmovfv,\\\n \t\t\t  vislide,vislide1,vfslide1,vgather,vcompress\")\n \t (const_string \"true\")]\n@@ -151,7 +151,8 @@\n \t\t\t  vfwalu,vfwmul,vfsqrt,vfrecp,vfsgnj,vfcmp,\\\n \t\t\t  vfmerge,vfcvtitof,vfcvtftoi,vfwcvtitof,\\\n \t\t\t  vfwcvtftoi,vfwcvtftof,vfncvtitof,vfncvtftoi,\\\n-\t\t\t  vfncvtftof,vfmuladd,vfwmuladd,vfclass\")\n+\t\t\t  vfncvtftof,vfmuladd,vfwmuladd,vfclass,vired,\n+\t\t\t  viwred,vfredu,vfredo,vfwredu,vfwredo\")\n \t   (const_int INVALID_ATTRIBUTE)\n \t (eq_attr \"mode\" \"VNx1QI,VNx1BI\")\n \t   (symbol_ref \"riscv_vector::get_ratio(E_VNx1QImode)\")\n@@ -206,7 +207,8 @@\n \t\t\t\tviwmul,vnshift,vaalu,vsmul,vsshift,vnclip,vmsfs,\\\n \t\t\t\tvmiota,vmidx,vfalu,vfmul,vfminmax,vfdiv,vfwalu,vfwmul,\\\n \t\t\t\tvfsqrt,vfrecp,vfsgnj,vfcmp,vfcvtitof,vfcvtftoi,vfwcvtitof,\\\n-\t\t\t\tvfwcvtftoi,vfwcvtftof,vfncvtitof,vfncvtftoi,vfncvtftof,vfclass\")\n+\t\t\t\tvfwcvtftoi,vfwcvtftof,vfncvtitof,vfncvtftoi,vfncvtftof,vfclass,\\\n+\t\t\t\tvired,viwred,vfredu,vfredo,vfwredu,vfwredo\")\n \t       (const_int 2)\n \n \t       (eq_attr \"type\" \"vimerge,vfmerge\")\n@@ -234,7 +236,7 @@\n \t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,viminmax,vimul,vidiv,vsalu,\\\n \t\t\t  viwalu,viwmul,vnshift,vimerge,vaalu,vsmul,\\\n \t\t\t  vsshift,vnclip,vfalu,vfmul,vfminmax,vfdiv,vfwalu,vfwmul,\\\n-\t\t\t  vfsgnj,vfmerge\")\n+\t\t\t  vfsgnj,vfmerge,vired,viwred,vfredu,vfredo,vfwredu,vfwredo\")\n \t   (const_int 5)\n \n \t (eq_attr \"type\" \"vicmp,vimuladd,viwmuladd,vfcmp,vfmuladd,vfwmuladd\")\n@@ -261,7 +263,8 @@\n \t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,viminmax,vimul,vidiv,vsalu,\\\n \t\t\t  viwalu,viwmul,vnshift,vimerge,vaalu,vsmul,\\\n \t\t\t  vsshift,vnclip,vfalu,vfmul,vfminmax,vfdiv,\\\n-\t\t\t  vfwalu,vfwmul,vfsgnj,vfmerge\")\n+\t\t\t  vfwalu,vfwmul,vfsgnj,vfmerge,vired,viwred,vfredu,\\\n+\t\t\t  vfredo,vfwredu,vfwredo\")\n \t   (symbol_ref \"riscv_vector::get_ta(operands[6])\")\n \n \t (eq_attr \"type\" \"vimuladd,viwmuladd,vfmuladd,vfwmuladd\")\n@@ -302,7 +305,8 @@\n (define_attr \"avl_type\" \"\"\n   (cond [(eq_attr \"type\" \"vlde,vlde,vste,vimov,vimov,vimov,vfmov,vext,vimerge,\\\n \t\t\t  vfsqrt,vfrecp,vfmerge,vfcvtitof,vfcvtftoi,vfwcvtitof,\\\n-\t\t\t  vfwcvtftoi,vfwcvtftof,vfncvtitof,vfncvtftoi,vfncvtftof,vfclass\")\n+\t\t\t  vfwcvtftoi,vfwcvtftof,vfncvtitof,vfncvtftoi,vfncvtftof,\\\n+\t\t\t  vfclass,vired,viwred,vfredu,vfredo,vfwredu,vfwredo\")\n \t   (symbol_ref \"INTVAL (operands[7])\")\n \t (eq_attr \"type\" \"vldm,vstm,vimov,vmalu,vmalu\")\n \t   (symbol_ref \"INTVAL (operands[5])\")\n@@ -6181,3 +6185,208 @@\n   \"vfncvt.rod.f.f.w\\t%0,%3%p1\"\n   [(set_attr \"type\" \"vfncvtftof\")\n    (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n+\n+;; -------------------------------------------------------------------------------\n+;; ---- Predicated reduction operations\n+;; -------------------------------------------------------------------------------\n+;; Includes:\n+;; - 14.1 Vector Single-Width Integer Reduction Instructions\n+;; - 14.2 Vector Widening Integer Reduction Instructions\n+;; - 14.3 Vector Single-Width Floating-Point Reduction Instructions\n+;; - 14.4 Vector Widening Floating-Point Reduction Instructions\n+;; -------------------------------------------------------------------------------\n+\n+;; For reduction operations, we should have seperate patterns for\n+;; TARGET_MIN_VLEN == 32 and TARGET_MIN_VLEN > 32.\n+;; Since reduction need LMUL = 1 scalar operand as the input operand\n+;; and they are different.\n+;; For example, The LMUL = 1 corresponding mode of VNx16QImode is VNx4QImode\n+;; for -march=rv*zve32* wheras VNx8QImode for -march=rv*zve64*\n+(define_insn \"@pred_reduc_<reduc><mode><vlmul1>\"\n+  [(set (match_operand:<VLMUL1> 0 \"register_operand\"          \"=vd, vr\")\n+\t(unspec:<VLMUL1>\n+\t  [(unspec:<VM>\n+\t     [(match_operand:<VM> 1 \"vector_mask_operand\"     \" vm,Wc1\")\n+\t      (match_operand 5 \"vector_length_operand\"        \" rK, rK\")\n+\t      (match_operand 6 \"const_int_operand\"            \"  i,  i\")\n+\t      (match_operand 7 \"const_int_operand\"            \"  i,  i\")\n+\t      (reg:SI VL_REGNUM)\n+\t      (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t   (any_reduc:VI\n+\t     (vec_duplicate:VI\n+\t       (vec_select:<VEL>\n+\t         (match_operand:<VLMUL1> 4 \"register_operand\" \" vr, vr\")\n+\t         (parallel [(const_int 0)])))\n+\t     (match_operand:VI 3 \"register_operand\"           \" vr, vr\"))\n+\t   (match_operand:<VLMUL1> 2 \"vector_merge_operand\"   \"0vu,0vu\")] UNSPEC_REDUC))]\n+  \"TARGET_VECTOR && TARGET_MIN_VLEN > 32\"\n+  \"vred<reduc>.vs\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vired\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_reduc_<reduc><mode><vlmul1_zve32>\"\n+  [(set (match_operand:<VLMUL1_ZVE32> 0 \"register_operand\"          \"=vd, vr\")\n+\t(unspec:<VLMUL1_ZVE32>\n+\t  [(unspec:<VM>\n+\t     [(match_operand:<VM> 1 \"vector_mask_operand\"           \" vm,Wc1\")\n+\t      (match_operand 5 \"vector_length_operand\"              \" rK, rK\")\n+\t      (match_operand 6 \"const_int_operand\"                  \"  i,  i\")\n+\t      (match_operand 7 \"const_int_operand\"                  \"  i,  i\")\n+\t      (reg:SI VL_REGNUM)\n+\t      (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t   (any_reduc:VI_ZVE32\n+\t     (vec_duplicate:VI_ZVE32\n+\t       (vec_select:<VEL>\n+\t         (match_operand:<VLMUL1_ZVE32> 4 \"register_operand\" \" vr, vr\")\n+\t         (parallel [(const_int 0)])))\n+\t     (match_operand:VI_ZVE32 3 \"register_operand\"           \" vr, vr\"))\n+\t   (match_operand:<VLMUL1_ZVE32> 2 \"vector_merge_operand\"   \"0vu,0vu\")] UNSPEC_REDUC))]\n+  \"TARGET_VECTOR && TARGET_MIN_VLEN == 32\"\n+  \"vred<reduc>.vs\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vired\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_widen_reduc_plus<v_su><mode><vwlmul1>\"\n+  [(set (match_operand:<VWLMUL1> 0 \"register_operand\"           \"=&vr\")\n+\t(unspec:<VWLMUL1>\n+\t  [(unspec:<VM>\n+\t     [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n+\t      (match_operand 5 \"vector_length_operand\"         \"   rK\")\n+\t      (match_operand 6 \"const_int_operand\"             \"    i\")\n+\t      (match_operand 7 \"const_int_operand\"             \"    i\")\n+\t      (reg:SI VL_REGNUM)\n+\t      (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t   (match_operand:VWI 3 \"register_operand\"             \"   vr\")\n+\t   (match_operand:<VWLMUL1> 4 \"register_operand\"       \"   vr\")\n+\t   (match_operand:<VWLMUL1> 2 \"vector_merge_operand\"   \"  0vu\")] WREDUC))]\n+  \"TARGET_VECTOR && TARGET_MIN_VLEN > 32\"\n+  \"vwredsum<v_su>.vs\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"viwred\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_widen_reduc_plus<v_su><mode><vwlmul1_zve32>\"\n+  [(set (match_operand:<VWLMUL1_ZVE32> 0 \"register_operand\"           \"=&vr\")\n+\t(unspec:<VWLMUL1_ZVE32>\n+\t  [(unspec:<VM>\n+\t     [(match_operand:<VM> 1 \"vector_mask_operand\"            \"vmWc1\")\n+\t      (match_operand 5 \"vector_length_operand\"               \"   rK\")\n+\t      (match_operand 6 \"const_int_operand\"                   \"    i\")\n+\t      (match_operand 7 \"const_int_operand\"                   \"    i\")\n+\t      (reg:SI VL_REGNUM)\n+\t      (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t   (match_operand:VWI_ZVE32 3 \"register_operand\"             \"   vr\")\n+\t   (match_operand:<VWLMUL1_ZVE32> 4 \"register_operand\"       \"   vr\")\n+\t   (match_operand:<VWLMUL1_ZVE32> 2 \"vector_merge_operand\"   \"  0vu\")] WREDUC))]\n+  \"TARGET_VECTOR && TARGET_MIN_VLEN == 32\"\n+  \"vwredsum<v_su>.vs\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"viwred\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_reduc_<reduc><mode><vlmul1>\"\n+  [(set (match_operand:<VLMUL1> 0 \"register_operand\"          \"=vd, vr\")\n+\t(unspec:<VLMUL1>\n+\t  [(unspec:<VM>\n+\t     [(match_operand:<VM> 1 \"vector_mask_operand\"      \" vm,Wc1\")\n+\t      (match_operand 5 \"vector_length_operand\"         \" rK, rK\")\n+\t      (match_operand 6 \"const_int_operand\"             \"  i,  i\")\n+\t      (match_operand 7 \"const_int_operand\"             \"  i,  i\")\n+\t      (reg:SI VL_REGNUM)\n+\t      (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t   (any_freduc:VF\n+\t     (vec_duplicate:VF\n+\t       (vec_select:<VEL>\n+\t         (match_operand:<VLMUL1> 4 \"register_operand\" \" vr, vr\")\n+\t         (parallel [(const_int 0)])))\n+\t     (match_operand:VF 3 \"register_operand\"           \" vr, vr\"))\n+\t   (match_operand:<VLMUL1> 2 \"vector_merge_operand\"   \"0vu,0vu\")] UNSPEC_REDUC))]\n+  \"TARGET_VECTOR && TARGET_MIN_VLEN > 32\"\n+  \"vfred<reduc>.vs\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vfredu\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_reduc_<reduc><mode><vlmul1_zve32>\"\n+  [(set (match_operand:<VLMUL1_ZVE32> 0 \"register_operand\"          \"=vd, vr\")\n+\t(unspec:<VLMUL1_ZVE32>\n+\t  [(unspec:<VM>\n+\t     [(match_operand:<VM> 1 \"vector_mask_operand\"           \" vm,Wc1\")\n+\t      (match_operand 5 \"vector_length_operand\"              \" rK, rK\")\n+\t      (match_operand 6 \"const_int_operand\"                  \"  i,  i\")\n+\t      (match_operand 7 \"const_int_operand\"                  \"  i,  i\")\n+\t      (reg:SI VL_REGNUM)\n+\t      (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t   (any_freduc:VF_ZVE32\n+\t     (vec_duplicate:VF_ZVE32\n+\t       (vec_select:<VEL>\n+\t         (match_operand:<VLMUL1_ZVE32> 4 \"register_operand\" \" vr, vr\")\n+\t         (parallel [(const_int 0)])))\n+\t     (match_operand:VF_ZVE32 3 \"register_operand\"           \" vr, vr\"))\n+\t   (match_operand:<VLMUL1_ZVE32> 2 \"vector_merge_operand\"   \"0vu,0vu\")] UNSPEC_REDUC))]\n+  \"TARGET_VECTOR && TARGET_MIN_VLEN == 32\"\n+  \"vfred<reduc>.vs\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vfredu\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_reduc_plus<order><mode><vlmul1>\"\n+  [(set (match_operand:<VLMUL1> 0 \"register_operand\"          \"=vd, vr\")\n+\t(unspec:<VLMUL1>\n+\t  [(unspec:<VLMUL1>\n+\t    [(unspec:<VM>\n+\t       [(match_operand:<VM> 1 \"vector_mask_operand\"      \" vm,Wc1\")\n+\t        (match_operand 5 \"vector_length_operand\"         \" rK, rK\")\n+\t        (match_operand 6 \"const_int_operand\"             \"  i,  i\")\n+\t        (match_operand 7 \"const_int_operand\"             \"  i,  i\")\n+\t        (reg:SI VL_REGNUM)\n+\t        (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t     (plus:VF\n+\t       (vec_duplicate:VF\n+\t         (vec_select:<VEL>\n+\t           (match_operand:<VLMUL1> 4 \"register_operand\" \" vr, vr\")\n+\t           (parallel [(const_int 0)])))\n+\t       (match_operand:VF 3 \"register_operand\"           \" vr, vr\"))\n+\t     (match_operand:<VLMUL1> 2 \"vector_merge_operand\"   \"0vu,0vu\")] UNSPEC_REDUC)] ORDER))]\n+  \"TARGET_VECTOR && TARGET_MIN_VLEN > 32\"\n+  \"vfred<order>sum.vs\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vfred<order>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_reduc_plus<order><mode><vlmul1_zve32>\"\n+  [(set (match_operand:<VLMUL1_ZVE32> 0 \"register_operand\"          \"=vd, vr\")\n+\t(unspec:<VLMUL1_ZVE32>\n+\t  [(unspec:<VLMUL1_ZVE32>\n+\t    [(unspec:<VM>\n+\t       [(match_operand:<VM> 1 \"vector_mask_operand\"           \" vm,Wc1\")\n+\t        (match_operand 5 \"vector_length_operand\"              \" rK, rK\")\n+\t        (match_operand 6 \"const_int_operand\"                  \"  i,  i\")\n+\t        (match_operand 7 \"const_int_operand\"                  \"  i,  i\")\n+\t        (reg:SI VL_REGNUM)\n+\t        (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t     (plus:VF_ZVE32\n+\t       (vec_duplicate:VF_ZVE32\n+\t         (vec_select:<VEL>\n+\t           (match_operand:<VLMUL1_ZVE32> 4 \"register_operand\" \" vr, vr\")\n+\t           (parallel [(const_int 0)])))\n+\t       (match_operand:VF_ZVE32 3 \"register_operand\"           \" vr, vr\"))\n+\t     (match_operand:<VLMUL1_ZVE32> 2 \"vector_merge_operand\"   \"0vu,0vu\")] UNSPEC_REDUC)] ORDER))]\n+  \"TARGET_VECTOR && TARGET_MIN_VLEN == 32\"\n+  \"vfred<order>sum.vs\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vfred<order>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_widen_reduc_plus<order><mode><vwlmul1>\"\n+  [(set (match_operand:<VWLMUL1> 0 \"register_operand\"             \"=&vr\")\n+\t(unspec:<VWLMUL1>\n+\t  [(unspec:<VWLMUL1>\n+\t    [(unspec:<VM>\n+\t       [(match_operand:<VM> 1 \"vector_mask_operand\"      \"vmWc1\")\n+\t        (match_operand 5 \"vector_length_operand\"         \"   rK\")\n+\t        (match_operand 6 \"const_int_operand\"             \"    i\")\n+\t        (match_operand 7 \"const_int_operand\"             \"    i\")\n+\t        (reg:SI VL_REGNUM)\n+\t        (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t     (match_operand:VWF 3 \"register_operand\"             \"   vr\")\n+\t     (match_operand:<VWLMUL1> 4 \"register_operand\"       \"   vr\")\n+\t     (match_operand:<VWLMUL1> 2 \"vector_merge_operand\"   \"  0vu\")] UNSPEC_WREDUC_SUM)] ORDER))]\n+  \"TARGET_VECTOR && TARGET_MIN_VLEN > 32\"\n+  \"vfwred<order>sum.vs\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vfwred<order>\")\n+   (set_attr \"mode\" \"<MODE>\")])"}]}