{"sha": "b9479ddc7a28fb672ca67304a67d66524d8200a4", "node_id": "C_kwDOANBUbNoAKGI5NDc5ZGRjN2EyOGZiNjcyY2E2NzMwNGE2N2Q2NjUyNGQ4MjAwYTQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-05T16:23:51Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-06T11:52:01Z"}, "message": "libstdc++: Fix deadlock in debug iterator increment [PR108288]\n\nWith -fno-elide-constructors the debug iterator post-increment and\npost-decrement operators are susceptible to deadlock. They take a mutex\nlock and then return a temporary, which also attempts to take a lock to\nattach itself to the sequence. If the return value and *this happen to\ncollide and use the same mutex from the pool, then you get a deadlock\ntrying to lock a mutex that is already held by the current thread.\n\nThe solution is to construct the return value before taking the lock.\nThe copy constructor and pre-inc/pre-dec operators already manage locks\ncorrectly, without deadlock, so just implement post-inc/post-dec in the\nconventional way, taking a copy then modifying *this, then returning the\ncopy.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/108288\n\t* include/debug/safe_iterator.h (_Safe_iterator::operator++(int))\n\t(_Safe_iterator::operator--(int)): Do not hold lock around\n\tconstruction of return value.", "tree": {"sha": "af4a0762773b8393f3666b120317bb3338b02578", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af4a0762773b8393f3666b120317bb3338b02578"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9479ddc7a28fb672ca67304a67d66524d8200a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9479ddc7a28fb672ca67304a67d66524d8200a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9479ddc7a28fb672ca67304a67d66524d8200a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9479ddc7a28fb672ca67304a67d66524d8200a4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b990e80e39b41ec028d018eac7d2d040a537b681", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b990e80e39b41ec028d018eac7d2d040a537b681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b990e80e39b41ec028d018eac7d2d040a537b681"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "f9068eaf8d6e17c9d9a24cf3beb51c67a4097bd7", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9479ddc7a28fb672ca67304a67d66524d8200a4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9479ddc7a28fb672ca67304a67d66524d8200a4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=b9479ddc7a28fb672ca67304a67d66524d8200a4", "patch": "@@ -761,12 +761,9 @@ namespace __gnu_debug\n       _Safe_iterator\n       operator++(int) _GLIBCXX_NOEXCEPT\n       {\n-\t_GLIBCXX_DEBUG_VERIFY(this->_M_incrementable(),\n-\t\t\t      _M_message(__msg_bad_inc)\n-\t\t\t      ._M_iterator(*this, \"this\"));\n-\t__gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n-\treturn _Safe_iterator(this->base()++, this->_M_sequence,\n-\t\t\t      _Attach_single());\n+\t_Safe_iterator __ret = *this;\n+\t++*this;\n+\treturn __ret;\n       }\n \n       // ------ Bidirectional iterator requirements ------\n@@ -788,12 +785,9 @@ namespace __gnu_debug\n       _Safe_iterator\n       operator--(int) _GLIBCXX_NOEXCEPT\n       {\n-\t_GLIBCXX_DEBUG_VERIFY(this->_M_decrementable(),\n-\t\t\t      _M_message(__msg_bad_dec)\n-\t\t\t      ._M_iterator(*this, \"this\"));\n-\t__gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n-\treturn _Safe_iterator(this->base()--, this->_M_sequence,\n-\t\t\t      _Attach_single());\n+\t_Safe_iterator __ret = *this;\n+\t--*this;\n+\treturn __ret;\n       }\n \n       // ------ Random access iterator requirements ------"}]}