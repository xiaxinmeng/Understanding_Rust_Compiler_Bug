{"sha": "f75e07bc36958220ca7f48b916f50b758d593c38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc1ZTA3YmMzNjk1ODIyMGNhN2Y0OGI5MTZmNTBiNzU4ZDU5M2MzOA==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2015-01-23T16:32:34Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2015-01-23T16:32:34Z"}, "message": "re PR target/50928 (m32c ICE building RTEMS)\n\n2015-01-23  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR target/50928\n        * config/m32c/m32c.c (encode_pattern_1): Removed gcc_unreachable here.\n        (DEBUG_RELOAD): Removed define.\n        (m32c_limit_reload_class): Enable traces with if DEBUG0.\n        (m32c_function_arg): Added a type cast.\n        (m32c_legitimize_reload_address): Push A_REGS reload with PSImode.\n        * config/m32c/addsub.md (addsi3_1): Specify the mode of all arguments.\n        * config/m32c/bitops.md (andqi3_16): Likewise.\n        * config/m32c/mov.md (m32c_immd_dbl_mov): Likewise.\n        (push_a01_l): Likewise.\n\nFrom-SVN: r220048", "tree": {"sha": "534a4e2c323ec63f408c88583586d8b5461a5654", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/534a4e2c323ec63f408c88583586d8b5461a5654"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f75e07bc36958220ca7f48b916f50b758d593c38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f75e07bc36958220ca7f48b916f50b758d593c38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f75e07bc36958220ca7f48b916f50b758d593c38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f75e07bc36958220ca7f48b916f50b758d593c38/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa4e8db234d50c36a3b410cccf4f10253f0ab1bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa4e8db234d50c36a3b410cccf4f10253f0ab1bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa4e8db234d50c36a3b410cccf4f10253f0ab1bd"}], "stats": {"total": 47, "additions": 33, "deletions": 14}, "files": [{"sha": "e4a4cf0641f314826e66a838202e3e97d82cc085", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75e07bc36958220ca7f48b916f50b758d593c38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75e07bc36958220ca7f48b916f50b758d593c38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f75e07bc36958220ca7f48b916f50b758d593c38", "patch": "@@ -1,3 +1,16 @@\n+2015-01-23  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR target/50928\n+\t* config/m32c/m32c.c (encode_pattern_1): Removed gcc_unreachable here.\n+\t(DEBUG_RELOAD): Removed define.\n+\t(m32c_limit_reload_class): Enable traces with if DEBUG0.\n+\t(m32c_function_arg): Added a type cast.\n+\t(m32c_legitimize_reload_address): Push A_REGS reload with PSImode.\n+\t* config/m32c/addsub.md (addsi3_1): Specify the mode of all arguments.\n+\t* config/m32c/bitops.md (andqi3_16): Likewise.\n+\t* config/m32c/mov.md (m32c_immd_dbl_mov): Likewise.\n+\t(push_a01_l): Likewise.\n+\n 2015-01-23  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/64721"}, {"sha": "74cbd3b7cbd6f265eac32d2de72452c4e3c1c937", "filename": "gcc/config/m32c/addsub.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75e07bc36958220ca7f48b916f50b758d593c38/gcc%2Fconfig%2Fm32c%2Faddsub.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75e07bc36958220ca7f48b916f50b758d593c38/gcc%2Fconfig%2Fm32c%2Faddsub.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Faddsub.md?ref=f75e07bc36958220ca7f48b916f50b758d593c38", "patch": "@@ -81,7 +81,7 @@\n (define_insn \"addsi3_1\"\n   [(set (match_operand:SI 0 \"mra_operand\" \"=RsiSd,??Rmm,RsiSd,RsiSd,??Rmm,??Rmm,??Rmm,RsiSd\")\n         (plus:SI (match_operand:SI 1 \"mra_operand\" \"%0,0,0,0,0,0,0,0\")\n-                 (match_operand 2 \"mrai_operand\" \"IU2,IU2,i,?Rmm,i,RsiSd,?Rmm,RsiSd\")))]\n+                 (match_operand:SI 2 \"mrai_operand\" \"IU2,IU2,i,?Rmm,i,RsiSd,?Rmm,RsiSd\")))]\n   \"TARGET_A16\"\n   \"*\n   "}, {"sha": "e75e6712dde362433236b5e2cb75528f1ded4d3c", "filename": "gcc/config/m32c/bitops.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75e07bc36958220ca7f48b916f50b758d593c38/gcc%2Fconfig%2Fm32c%2Fbitops.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75e07bc36958220ca7f48b916f50b758d593c38/gcc%2Fconfig%2Fm32c%2Fbitops.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fbitops.md?ref=f75e07bc36958220ca7f48b916f50b758d593c38", "patch": "@@ -82,7 +82,7 @@\n (define_insn \"andqi3_16\"\n   [(set (match_operand:QI 0 \"mra_operand\" \"=Sp,Rqi,RhlSd,RhlSd,??Rmm,??Rmm\")\n \t(and:QI (match_operand:QI 1 \"mra_operand\" \"%0,0,0,0,0,0\")\n-\t\t(match_operand 2 \"mrai_operand\" \"Imb,Imb,iRhlSd,?Rmm,iRhlSd,?Rmm\")))]\n+\t\t(match_operand:QI 2 \"mrai_operand\" \"Imb,Imb,iRhlSd,?Rmm,iRhlSd,?Rmm\")))]\n   \"TARGET_A16\"\n   \"@\n    bclr\\t%B2,%0\n@@ -178,7 +178,7 @@\n (define_insn \"andqi3_24\"\n   [(set (match_operand:QI 0 \"mra_operand\" \"=Sd,Rqi,RhlSd,RhlSd,??Rmm,??Rmm\")\n \t(and:QI (match_operand:QI 1 \"mra_operand\" \"%0,0,0,0,0,0\")\n-\t\t(match_operand 2 \"mrai_operand\" \"Imb,Imb,iRhlSd,?Rmm,iRhlSd,?Rmm\")))]\n+\t\t(match_operand:QI 2 \"mrai_operand\" \"Imb,Imb,iRhlSd,?Rmm,iRhlSd,?Rmm\")))]\n   \"TARGET_A24\"\n   \"@\n    bclr\\t%B2,%0"}, {"sha": "5e295655598461329ee13f349aee0deae514a8a8", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75e07bc36958220ca7f48b916f50b758d593c38/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75e07bc36958220ca7f48b916f50b758d593c38/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=f75e07bc36958220ca7f48b916f50b758d593c38", "patch": "@@ -144,6 +144,7 @@ static bool m32c_get_pragma_address (const char *varname, unsigned *addr);\n #define DEBUG1 1\n \n #if DEBUG0\n+#include \"print-tree.h\"\n /* This is needed by some of the commented-out debug statements\n    below.  */\n static char const *class_names[LIM_REG_CLASSES] = REG_CLASS_NAMES;\n@@ -290,7 +291,6 @@ encode_pattern_1 (rtx x)\n       fprintf (stderr, \"can't encode pattern %s\\n\",\n \t       GET_RTX_NAME (GET_CODE (x)));\n       debug_rtx (x);\n-      gcc_unreachable ();\n #endif\n       break;\n     }\n@@ -682,8 +682,6 @@ m32c_regno_ok_for_base_p (int regno)\n   return 0;\n }\n \n-#define DEBUG_RELOAD 0\n-\n /* Implements TARGET_PREFERRED_RELOAD_CLASS.  In general, prefer general\n    registers of the appropriate size.  */\n \n@@ -695,7 +693,7 @@ m32c_preferred_reload_class (rtx x, reg_class_t rclass)\n {\n   reg_class_t newclass = rclass;\n \n-#if DEBUG_RELOAD\n+#if DEBUG0\n   fprintf (stderr, \"\\npreferred_reload_class for %s is \",\n \t   class_names[rclass]);\n #endif\n@@ -726,7 +724,7 @@ m32c_preferred_reload_class (rtx x, reg_class_t rclass)\n   if (GET_MODE (x) == QImode)\n     rclass = reduce_class (rclass, HL_REGS, rclass);\n \n-#if DEBUG_RELOAD\n+#if DEBUG0\n   fprintf (stderr, \"%s\\n\", class_names[rclass]);\n   debug_rtx (x);\n \n@@ -755,7 +753,7 @@ m32c_preferred_output_reload_class (rtx x, reg_class_t rclass)\n int\n m32c_limit_reload_class (machine_mode mode, int rclass)\n {\n-#if DEBUG_RELOAD\n+#if DEBUG0\n   fprintf (stderr, \"limit_reload_class for %s: %s ->\",\n \t   mode_name[mode], class_names[rclass]);\n #endif\n@@ -770,7 +768,7 @@ m32c_limit_reload_class (machine_mode mode, int rclass)\n   if (rclass != A_REGS)\n     rclass = reduce_class (rclass, DI_REGS, rclass);\n \n-#if DEBUG_RELOAD\n+#if DEBUG0\n   fprintf (stderr, \" %s\\n\", class_names[rclass]);\n #endif\n   return rclass;\n@@ -1368,7 +1366,7 @@ m32c_function_arg (cumulative_args_t ca_v,\n #if DEBUG0\n   fprintf (stderr, \"func_arg %d (%s, %d)\\n\",\n \t   ca->parm_num, mode_name[mode], named);\n-  debug_tree (type);\n+  debug_tree ((tree)type);\n #endif\n \n   if (mode == VOIDmode)\n@@ -1954,6 +1952,14 @@ m32c_legitimize_reload_address (rtx * x,\n       return 1;\n     }\n \n+  if (TARGET_A24 && GET_MODE (*x) == PSImode)\n+    {\n+      push_reload (*x, NULL_RTX, x, NULL,\n+\t\t   A_REGS, PSImode, VOIDmode, 0, 0, opnum,\n+\t\t   (enum reload_type) type);\n+      return 1;\n+    }\n+\n   return 0;\n }\n "}, {"sha": "356963add88be9c0df864745c1951f755768830f", "filename": "gcc/config/m32c/mov.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75e07bc36958220ca7f48b916f50b758d593c38/gcc%2Fconfig%2Fm32c%2Fmov.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75e07bc36958220ca7f48b916f50b758d593c38/gcc%2Fconfig%2Fm32c%2Fmov.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fmov.md?ref=f75e07bc36958220ca7f48b916f50b758d593c38", "patch": "@@ -162,9 +162,9 @@\n ; immediate double data to a memory location.\n (define_peephole2\n   [(set (match_operand:HI 0 \"memory_operand\" \"\")\n-        (match_operand 1 \"const_int_operand\" \"\"))\n+        (match_operand:HI 1 \"const_int_operand\" \"\"))\n    (set (match_operand:HI 2 \"memory_operand\" \"\")\n-        (match_operand 3 \"const_int_operand\" \"\"))]\n+        (match_operand:HI 3 \"const_int_operand\" \"\"))]\n    \"TARGET_A24 && m32c_immd_dbl_mov (operands, HImode)\"\n    [(set (match_dup 4) (match_dup 5))]\n    \"\"\n@@ -213,7 +213,7 @@\n ; don't match.\n (define_insn \"push_a01_l\"\n   [(set (mem:SI (pre_dec:PSI (reg:PSI SP_REGNO)))\n-\t(match_operand 0 \"a_operand\" \"Raa\"))]\n+\t(match_operand:SI 0 \"a_operand\" \"Raa\"))]\n   \"\"\n   \"push.l\\t%0\"\n   [(set_attr \"flags\" \"n\")]"}]}