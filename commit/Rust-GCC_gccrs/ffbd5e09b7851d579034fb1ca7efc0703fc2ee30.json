{"sha": "ffbd5e09b7851d579034fb1ca7efc0703fc2ee30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZiZDVlMDliNzg1MWQ1NzkwMzRmYjFjYTdlZmMwNzAzZmMyZWUzMA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2015-10-22T23:48:17Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2015-10-22T23:48:17Z"}, "message": "re PR driver/68043 (many undocumented options, missing punctuation)\n\ngcc/ChangeLog:\n\n2015-10-22  Martin Sebor  <msebor@redhat.com>\n\n\tPR driver/68043\n\t* config/i386/i386.opt: Add missing periods to the ends of sentences.\n\t* config/msp430/msp430.opt: Same.\n\ngcc/testsuite/ChangeLog:\n\n2015-10-22  Martin Sebor  <msebor@redhat.com>\n\n\tPR driver/68043\n\t* gcc.misc-tests/help.exp: Verify that option descriptions\n\tend in periods.\n\t* lib/options.exp (check_for_options): Use the regexp --line option.\n\tPrint unexpected match on failure.\n\nFrom-SVN: r229205", "tree": {"sha": "18c7f34de19378ea3c4eab48ff6052b83bd035f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18c7f34de19378ea3c4eab48ff6052b83bd035f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffbd5e09b7851d579034fb1ca7efc0703fc2ee30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffbd5e09b7851d579034fb1ca7efc0703fc2ee30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffbd5e09b7851d579034fb1ca7efc0703fc2ee30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffbd5e09b7851d579034fb1ca7efc0703fc2ee30/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "efee9dc4863288a7959873237ddf05935e2c60b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efee9dc4863288a7959873237ddf05935e2c60b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efee9dc4863288a7959873237ddf05935e2c60b7"}], "stats": {"total": 87, "additions": 67, "deletions": 20}, "files": [{"sha": "cdc9bfdb439b6285558dfc3a674ab90b33dca371", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffbd5e09b7851d579034fb1ca7efc0703fc2ee30/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffbd5e09b7851d579034fb1ca7efc0703fc2ee30/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ffbd5e09b7851d579034fb1ca7efc0703fc2ee30", "patch": "@@ -1,3 +1,9 @@\n+2015-10-22  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR driver/68043\n+\t* config/i386/i386.opt: Add missing periods to the ends of sentences.\n+\t* config/msp430/msp430.opt: Same.\n+\n 2015-10-21  David Wohlferd  <dw@LimeGreenSocks.com>\n \n \t* doc/extend.exp (Global Register Variables): Rewrite."}, {"sha": "82de21f788104ef9f1177bfa54d6d87fa007a22e", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffbd5e09b7851d579034fb1ca7efc0703fc2ee30/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffbd5e09b7851d579034fb1ca7efc0703fc2ee30/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=ffbd5e09b7851d579034fb1ca7efc0703fc2ee30", "patch": "@@ -104,15 +104,15 @@ enum asm_dialect x_ix86_asm_dialect\n TargetSave\n int x_ix86_branch_cost\n \n-;; -mdump-tune-features= \n+;; -mdump-tune-features=\n TargetSave\n int x_ix86_dump_tunes\n \n ;; -mstackrealign=\n TargetSave\n int x_ix86_force_align_arg_pointer\n \n-;; -mforce-drap= \n+;; -mforce-drap=\n TargetSave\n int x_ix86_force_drap\n \n@@ -124,7 +124,7 @@ int x_ix86_incoming_stack_boundary_arg\n TargetSave\n enum pmode x_ix86_pmode\n \n-;; -mpreferred-stack-boundary= \n+;; -mpreferred-stack-boundary=\n TargetSave\n int x_ix86_preferred_stack_boundary_arg\n \n@@ -701,15 +701,15 @@ Support MMX, SSE, SSE2, SSE3 and SSE4A built-in functions and code generation.\n \n mfma4\n Target Report Mask(ISA_FMA4) Var(ix86_isa_flags) Save\n-Support FMA4 built-in functions and code generation \n+Support FMA4 built-in functions and code generation.\n \n mxop\n Target Report Mask(ISA_XOP) Var(ix86_isa_flags) Save\n-Support XOP built-in functions and code generation \n+Support XOP built-in functions and code generation.\n \n mlwp\n Target Report Mask(ISA_LWP) Var(ix86_isa_flags) Save\n-Support LWP built-in functions and code generation \n+Support LWP built-in functions and code generation.\n \n mabm\n Target Report Mask(ISA_ABM) Var(ix86_isa_flags) Save"}, {"sha": "108c2ec724da15e6ab13a7b552a361d765bf1f3f", "filename": "gcc/config/msp430/msp430.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffbd5e09b7851d579034fb1ca7efc0703fc2ee30/gcc%2Fconfig%2Fmsp430%2Fmsp430.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffbd5e09b7851d579034fb1ca7efc0703fc2ee30/gcc%2Fconfig%2Fmsp430%2Fmsp430.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.opt?ref=ffbd5e09b7851d579034fb1ca7efc0703fc2ee30", "patch": "@@ -83,8 +83,8 @@ Enum(msp430_regions) String(upper) Value(UPPER)\n \n msilicon-errata=\n Target Joined RejectNegative Report ToLower\n-Passes on a request to the assembler to enable fixes for various silicon errata\n+Passes on a request to the assembler to enable fixes for various silicon errata.\n \n msilicon-errata-warn=\n Target Joined RejectNegative Report ToLower\n-Passes on a request to the assembler to warn about various silicon errata\n+Passes on a request to the assembler to warn about various silicon errata."}, {"sha": "761029da5e0f7b729b68ab37a861219da4291127", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffbd5e09b7851d579034fb1ca7efc0703fc2ee30/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffbd5e09b7851d579034fb1ca7efc0703fc2ee30/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ffbd5e09b7851d579034fb1ca7efc0703fc2ee30", "patch": "@@ -1,3 +1,11 @@\n+2015-10-22  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR driver/68043\n+\t* gcc.misc-tests/help.exp: Verify that option descriptions\n+\tend in periods.\n+\t* lib/options.exp (check_for_options): Use the regexp --line option.\n+\tPrint unexpected match on failure.\n+\n 2015-10-22  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/pr67985-3.c (dg-options): Add -mfpmath=sse."}, {"sha": "df85fd0c3989db9358025185a9509ffb016bee77", "filename": "gcc/testsuite/gcc.misc-tests/help.exp", "status": "modified", "additions": 40, "deletions": 9, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffbd5e09b7851d579034fb1ca7efc0703fc2ee30/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fhelp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffbd5e09b7851d579034fb1ca7efc0703fc2ee30/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fhelp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fhelp.exp?ref=ffbd5e09b7851d579034fb1ca7efc0703fc2ee30", "patch": "@@ -29,6 +29,18 @@ if ![gcc_parallel_test_run_p help] {\n }\n gcc_parallel_test_enable 0\n \n+# GCC breaks up --help output into lines at most $COLUMNS characters\n+# wide (or 80 when COLUMNS is not defined), set the COLUMNS environment\n+# variable to a value large enough to prevent this (and restore it when\n+# done).\n+global env\n+\n+if [ info exists env(COLUMNS) ] {\n+    set prev_columns $env(COLUMNS)\n+}\n+\n+set env(COLUMNS) 1024\n+\n # Document --version.  Ideally, there should be no undocumented switches\n # in --help.\n check_for_options c \"--help\" \"--version\" \"This option lacks documentation\" \"\"\n@@ -81,25 +93,44 @@ maximum number of\n # Specify patterns (arguments 3 and later) that match option names\n # at the beginning of the line and not when they are referenced by\n # some other options later on.\n-# The (?w) Tcl embedded option tells the Tcl regexp  parser to treat\n-# the '^' character as an anchor.\n check_for_options c \"--help=joined\" \\\n-    \"(?w)^ *-Wformat=\" \"(?w)^ *-fstrict-prototype\" \"\"\n+    \"^ +-Wformat=\" \"^ +-fstrict-prototype\" \"\"\n check_for_options c \"--help=separate\" \\\n-    \"(?w)^ *-MF\" \"(?w)^ *-fstrict-prototype\" \"\"\n+    \"^ +-MF\" \"^ +-fstrict-prototype\" \"\"\n check_for_options c \"--help=warnings,joined\" \\\n-    \"(?w)^ *-Wformat=\" \"(?w)^ *-Wtrigraphs\" \"\"\n+    \"^ +-Wformat=\" \"^ +-Wtrigraphs\" \"\"\n check_for_options c \"--help=warnings,^joined\" \\\n-    \"(?w)^ *-Wtrigraphs\" \"(?w)^ *-Wformat=\" \"\"\n+    \"^ +-Wtrigraphs\" \"^ +-Wformat=\" \"\"\n check_for_options c \"--help=joined,separate\" \\\n-    \"(?w)^ *-I\" \"\" \"\"\n+    \"^ +-I\" \"\" \"\"\n check_for_options c \"--help=^joined,separate\" \\\n-    \"(?w)^ *--param \" \"\" \"\"\n+    \"^ +--param \" \"\" \"\"\n check_for_options c \"--help=joined,^separate\" \\\n-    \"(?w)^ *--help=\" \"\" \"\"\n+    \"^ +--help=\" \"\" \"\"\n check_for_options c \"--help=joined,undocumented\" \"\" \"\" \"\"\n \n+# Check to make sure the description for every option is a complete\n+# sentence ending in a period.  This matters not just for consistency\n+# but also because other sentences may be appended to it by the help\n+# subsystem.  Do this one help class at a time to make it easier to\n+# find the source a failure.\n+\n+foreach cls { \"ada\" \"c\" \"c++\" \"fortran\" \"go\" \\\n+\t\t    \"optimizers\" \"param\" \"target\" \"warnings\" } {\n+\n+    check_for_options c \"--help=$cls\" \"\" \"^ +-.*\\[^:.\\]$\" \"\"\n+}\n+\n # Listing only excludes gives empty results.\n check_for_options c \"--help=^joined,^separate\" \"\" \"\" \"\"\n \n+if [ info exists prev_columns ] {\n+    # Reset the enviroment variable to its oriuginal value.\n+    set env(COLUMNS) $prev_columns\n+} else {\n+    # Remove the variable from the environment if it didn't exist\n+    # to begin with to avoid affecting subsequent tests.\n+    array unset env COLUMNS\n+}\n+\n gcc_parallel_test_enable 1"}, {"sha": "a78c11967bb7c6bbd1fe57c941b7260a659a6c0c", "filename": "gcc/testsuite/lib/options.exp", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffbd5e09b7851d579034fb1ca7efc0703fc2ee30/gcc%2Ftestsuite%2Flib%2Foptions.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffbd5e09b7851d579034fb1ca7efc0703fc2ee30/gcc%2Ftestsuite%2Flib%2Foptions.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Foptions.exp?ref=ffbd5e09b7851d579034fb1ca7efc0703fc2ee30", "patch": "@@ -50,7 +50,7 @@ proc check_for_options {language gcc_options compiler_patterns compiler_non_patt\n     # Verify that COMPILER_PATTERRNS appear in gcc output.\n     foreach pattern [split $compiler_patterns \"\\n\"] {\n \tif {$pattern != \"\"} {\n-\t    if {[regexp -- \"$pattern\" $gcc_output]} {\n+\t    if {[regexp -line -- \"$pattern\" $gcc_output]} {\n \t\tpass \"$test $pattern\"\n \t    } else {\n \t\tif {$expected_failure != \"\"} {\n@@ -65,13 +65,15 @@ proc check_for_options {language gcc_options compiler_patterns compiler_non_patt\n     # Verify that COMPILER_NON_PATTERRNS do not appear in gcc output.\n     foreach pattern [split $compiler_non_patterns \"\\n\"] {\n \tif {$pattern != \"\"} {\n-\t    if {![regexp -- \"$pattern\" $gcc_output]} {\n+\t    if {![regexp -line -- \"$pattern\" $gcc_output result]} {\n \t\tpass \"$test $pattern\"\n \t    } else {\n \t\tif {$expected_failure != \"\"} {\n \t\t    xfail \"$test \\\"$pattern\\\" absent from output\"\n \t\t} else {\n-\t\t    fail \"$test \\\"$pattern\\\" absent from output\"\n+\t\t    # Print the unexpected line that caused the failure\n+\t\t    # to make it easier to find in the multiline output.\n+\t\t    fail \"$test \\\"$pattern\\\" absent from output: \\\"$result\\\"\"\n \t\t}\n \t    }\n \t}"}]}