{"sha": "6ddf9843628ab87261d2ec8dc3d14ac057e76014", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRkZjk4NDM2MjhhYjg3MjYxZDJlYzhkYzNkMTRhYzA1N2U3NjAxNA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-03-26T09:55:04Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-03-26T09:55:04Z"}, "message": "gigi.h (finalize_from_with_types): Adjust comment.\n\n\t* gcc-interface/gigi.h (finalize_from_with_types): Adjust comment.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Access_Type>: Defer\n\tunconditionally to the end of the unit when the designated type is\n\tlimited_with'ed.\n\t<all>: Rename local variable.  Attempt to un-defer types only and do it\n\tfor limited_with'ed types as well.\n\t(finalize_from_with_types): Adjust comment.  Rename variable and tidy.\n\t* gcc-interface/trans.c (Compilation_Unit_to_gnu): Use GNAT_UNIT\n\tconsistently and remove redundant call to finalize_from_with_types.\n\nFrom-SVN: r171552", "tree": {"sha": "5cbb5738edf0877a3943e13174915c10a0e0e71c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cbb5738edf0877a3943e13174915c10a0e0e71c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ddf9843628ab87261d2ec8dc3d14ac057e76014", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ddf9843628ab87261d2ec8dc3d14ac057e76014", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ddf9843628ab87261d2ec8dc3d14ac057e76014", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ddf9843628ab87261d2ec8dc3d14ac057e76014/comments", "author": null, "committer": null, "parents": [{"sha": "5daed84a544a8e2bd3017ad77975abd9831953b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5daed84a544a8e2bd3017ad77975abd9831953b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5daed84a544a8e2bd3017ad77975abd9831953b7"}], "stats": {"total": 156, "additions": 106, "deletions": 50}, "files": [{"sha": "a4d45a5670450d08a744234e5238f6269baa30e5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ddf9843628ab87261d2ec8dc3d14ac057e76014/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ddf9843628ab87261d2ec8dc3d14ac057e76014/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6ddf9843628ab87261d2ec8dc3d14ac057e76014", "patch": "@@ -1,3 +1,15 @@\n+2011-03-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h (finalize_from_with_types): Adjust comment.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Access_Type>: Defer\n+\tunconditionally to the end of the unit when the designated type is\n+\tlimited_with'ed.\n+\t<all>: Rename local variable.  Attempt to un-defer types only and do it\n+\tfor limited_with'ed types as well.\n+\t(finalize_from_with_types): Adjust comment.  Rename variable and tidy.\n+\t* gcc-interface/trans.c (Compilation_Unit_to_gnu): Use GNAT_UNIT\n+\tconsistently and remove redundant call to finalize_from_with_types.\n+\n 2011-03-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* inline.adb (Back_End_Cannot_Inline): Lift restriction on calls to"}, {"sha": "d3d2b9635877c91b72dfcbeb1befd4fc4a887511", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 39, "deletions": 37, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ddf9843628ab87261d2ec8dc3d14ac057e76014/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ddf9843628ab87261d2ec8dc3d14ac057e76014/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=6ddf9843628ab87261d2ec8dc3d14ac057e76014", "patch": "@@ -3723,15 +3723,10 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t   save our current definition, evaluate the actual type, and replace\n \t   the tentative type we made with the actual one.  If we are to defer\n \t   actually looking up the actual type, make an entry in the deferred\n-\t   list.  If this is from a limited with, we have to defer to the end\n-\t   of the current spec in two cases: first if the designated type is\n-\t   in the current unit and second if the access type itself is.  */\n+\t   list.  If this is from a limited with, we may have to defer to the\n+\t   end of the current unit.  */\n \tif ((!in_main_unit || is_from_limited_with) && made_dummy)\n \t  {\n-\t    bool is_from_limited_with_in_main_unit\n-\t      = (is_from_limited_with\n-\t\t && (in_main_unit\n-\t\t     || In_Extended_Main_Code_Unit (gnat_entity)));\n \t    tree gnu_old_desig_type\n \t      = TYPE_IS_FAT_POINTER_P (gnu_type)\n \t\t? TYPE_UNCONSTRAINED_ARRAY (gnu_type) : TREE_TYPE (gnu_type);\n@@ -3762,15 +3757,14 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t       Besides, variants of this non-dummy type might have been created\n \t       along the way.  update_pointer_to is expected to properly take\n \t       care of those situations.  */\n-\t    if (defer_incomplete_level == 0\n-\t\t&& !is_from_limited_with_in_main_unit)\n+\t    if (defer_incomplete_level == 0 && !is_from_limited_with)\n \t      update_pointer_to (TYPE_MAIN_VARIANT (gnu_old_desig_type),\n \t\t\t\t gnat_to_gnu_type (gnat_desig_equiv));\n \t    else\n \t      {\n \t\tstruct incomplete *p = XNEW (struct incomplete);\n \t\tstruct incomplete **head\n-\t\t  = (is_from_limited_with_in_main_unit\n+\t\t  = (is_from_limited_with\n \t\t     ? &defer_limited_with : &defer_incomplete_list);\n \t\tp->old_type = gnu_old_desig_type;\n \t\tp->full_type = gnat_desig_equiv;\n@@ -4968,27 +4962,27 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n     {\n       if (defer_incomplete_list)\n \t{\n-\t  struct incomplete *incp, *next;\n+\t  struct incomplete *p, *next;\n \n \t  /* We are back to level 0 for the deferring of incomplete types.\n \t     But processing these incomplete types below may itself require\n \t     deferring, so preserve what we have and restart from scratch.  */\n-\t  incp = defer_incomplete_list;\n+\t  p = defer_incomplete_list;\n \t  defer_incomplete_list = NULL;\n \n \t  /* For finalization, however, all types must be complete so we\n \t     cannot do the same because deferred incomplete types may end up\n \t     referencing each other.  Process them all recursively first.  */\n \t  defer_finalize_level++;\n \n-\t  for (; incp; incp = next)\n+\t  for (; p; p = next)\n \t    {\n-\t      next = incp->next;\n+\t      next = p->next;\n \n-\t      if (incp->old_type)\n-\t\tupdate_pointer_to (TYPE_MAIN_VARIANT (incp->old_type),\n-\t\t\t\t   gnat_to_gnu_type (incp->full_type));\n-\t      free (incp);\n+\t      if (p->old_type)\n+\t\tupdate_pointer_to (TYPE_MAIN_VARIANT (p->old_type),\n+\t\t\t\t   gnat_to_gnu_type (p->full_type));\n+\t      free (p);\n \t    }\n \n \t  defer_finalize_level--;\n@@ -5008,18 +5002,26 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t}\n     }\n \n-  /* If we are not defining this type, see if it's in the incomplete list.\n-     If so, handle that list entry now.  */\n-  else if (!definition)\n+  /* If we are not defining this type, see if it's on one of the lists of\n+     incomplete types.  If so, handle the list entry now.  */\n+  if (is_type && !definition)\n     {\n-      struct incomplete *incp;\n+      struct incomplete *p;\n \n-      for (incp = defer_incomplete_list; incp; incp = incp->next)\n-\tif (incp->old_type && incp->full_type == gnat_entity)\n+      for (p = defer_incomplete_list; p; p = p->next)\n+\tif (p->old_type && p->full_type == gnat_entity)\n \t  {\n-\t    update_pointer_to (TYPE_MAIN_VARIANT (incp->old_type),\n+\t    update_pointer_to (TYPE_MAIN_VARIANT (p->old_type),\n \t\t\t       TREE_TYPE (gnu_decl));\n-\t    incp->old_type = NULL_TREE;\n+\t    p->old_type = NULL_TREE;\n+\t  }\n+\n+      for (p = defer_limited_with; p; p = p->next)\n+\tif (p->old_type && Non_Limited_View (p->full_type) == gnat_entity)\n+\t  {\n+\t    update_pointer_to (TYPE_MAIN_VARIANT (p->old_type),\n+\t\t\t       TREE_TYPE (gnu_decl));\n+\t    p->old_type = NULL_TREE;\n \t  }\n     }\n \n@@ -5144,24 +5146,24 @@ finish_fat_pointer_type (tree record_type, tree field_list)\n   TYPE_CONTAINS_PLACEHOLDER_INTERNAL (record_type) = 2;\n }\n \n-/* Finalize any From_With_Type incomplete types.  We do this after processing\n-   our compilation unit and after processing its spec, if this is a body.  */\n+/* Finalize the processing of From_With_Type incomplete types.  */\n \n void\n finalize_from_with_types (void)\n {\n-  struct incomplete *incp = defer_limited_with;\n-  struct incomplete *next;\n+  struct incomplete *p, *next;\n+\n+  p = defer_limited_with;\n+  defer_limited_with = NULL;\n \n-  defer_limited_with = 0;\n-  for (; incp; incp = next)\n+  for (; p; p = next)\n     {\n-      next = incp->next;\n+      next = p->next;\n \n-      if (incp->old_type != 0)\n-\tupdate_pointer_to (TYPE_MAIN_VARIANT (incp->old_type),\n-\t\t\t   gnat_to_gnu_type (incp->full_type));\n-      free (incp);\n+      if (p->old_type)\n+\tupdate_pointer_to (TYPE_MAIN_VARIANT (p->old_type),\n+\t\t\t   gnat_to_gnu_type (p->full_type));\n+      free (p);\n     }\n }\n "}, {"sha": "a50010cb6e3bc9a1ff11726614e0b1ab9da7be98", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ddf9843628ab87261d2ec8dc3d14ac057e76014/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ddf9843628ab87261d2ec8dc3d14ac057e76014/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=6ddf9843628ab87261d2ec8dc3d14ac057e76014", "patch": "@@ -96,8 +96,7 @@ do {\t\t\t\t\t\\\n     mark_visited (EXP);\t\t\t\\\n } while (0)\n \n-/* Finalize any From_With_Type incomplete types.  We do this after processing\n-   our compilation unit and after processing its spec, if this is a body.  */\n+/* Finalize the processing of From_With_Type incomplete types.  */\n extern void finalize_from_with_types (void);\n \n /* Return the equivalent type to be used for GNAT_ENTITY, if it's a"}, {"sha": "332f715f4570e1861a655b2a2f6466eaa4a0af09", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ddf9843628ab87261d2ec8dc3d14ac057e76014/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ddf9843628ab87261d2ec8dc3d14ac057e76014/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=6ddf9843628ab87261d2ec8dc3d14ac057e76014", "patch": "@@ -3785,27 +3785,23 @@ Compilation_Unit_to_gnu (Node_Id gnat_node)\n   gnat_pushlevel ();\n \n   /* For a body, first process the spec if there is one.  */\n-  if (Nkind (Unit (gnat_node)) == N_Package_Body\n-      || (Nkind (Unit (gnat_node)) == N_Subprogram_Body\n-\t      && !Acts_As_Spec (gnat_node)))\n-    {\n-      add_stmt (gnat_to_gnu (Library_Unit (gnat_node)));\n-      finalize_from_with_types ();\n-    }\n+  if (Nkind (gnat_unit) == N_Package_Body\n+      || (Nkind (gnat_unit) == N_Subprogram_Body && !Acts_As_Spec (gnat_node)))\n+    add_stmt (gnat_to_gnu (Library_Unit (gnat_node)));\n \n   if (type_annotate_only && gnat_node == Cunit (Main_Unit))\n     {\n       elaborate_all_entities (gnat_node);\n \n-      if (Nkind (Unit (gnat_node)) == N_Subprogram_Declaration\n-\t  || Nkind (Unit (gnat_node)) == N_Generic_Package_Declaration\n-\t  || Nkind (Unit (gnat_node)) == N_Generic_Subprogram_Declaration)\n+      if (Nkind (gnat_unit) == N_Subprogram_Declaration\n+\t  || Nkind (gnat_unit) == N_Generic_Package_Declaration\n+\t  || Nkind (gnat_unit) == N_Generic_Subprogram_Declaration)\n \treturn;\n     }\n \n   process_decls (Declarations (Aux_Decls_Node (gnat_node)), Empty, Empty,\n \t\t true, true);\n-  add_stmt (gnat_to_gnu (Unit (gnat_node)));\n+  add_stmt (gnat_to_gnu (gnat_unit));\n \n   /* If we can inline, generate code for all the inlined subprograms.  */\n   if (optimize)"}, {"sha": "4f1fa8a5f61386fa66c2c663c19fc7bab67ecec8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ddf9843628ab87261d2ec8dc3d14ac057e76014/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ddf9843628ab87261d2ec8dc3d14ac057e76014/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6ddf9843628ab87261d2ec8dc3d14ac057e76014", "patch": "@@ -1,3 +1,9 @@\n+2011-03-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/limited_with2.ad[sb]: New test.\n+\t* gnat.dg/limited_with2_pkg1.ads: New helper.\n+\t* gnat.dg/imited_with2_pkg2.ads: Likewise.\n+\n 2011-03-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/opt15.adb: New test."}, {"sha": "b9c5417a627b7f1503ed5b7117194dade14732b0", "filename": "gcc/testsuite/gnat.dg/limited_with2.adb", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ddf9843628ab87261d2ec8dc3d14ac057e76014/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ddf9843628ab87261d2ec8dc3d14ac057e76014/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with2.adb?ref=6ddf9843628ab87261d2ec8dc3d14ac057e76014", "patch": "@@ -0,0 +1,12 @@\n+-- { dg-do compile }\n+\n+with Limited_With2_Pkg2;\n+\n+package body Limited_With2 is\n+\n+   function Func (Val : Rec1) return Limited_With2_Pkg1.Rec2 is\n+   begin\n+      return Val.F;\n+   end;\n+\n+end Limited_With2;"}, {"sha": "4f076d4b8ec2655edcebaebddbcb474c2c5c4c7d", "filename": "gcc/testsuite/gnat.dg/limited_with2.ads", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ddf9843628ab87261d2ec8dc3d14ac057e76014/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ddf9843628ab87261d2ec8dc3d14ac057e76014/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with2.ads?ref=6ddf9843628ab87261d2ec8dc3d14ac057e76014", "patch": "@@ -0,0 +1,11 @@\n+with Limited_With2_Pkg1;\n+\n+package Limited_With2 is\n+\n+   type Rec1 is record\n+     F : Limited_With2_Pkg1.Rec2;\n+   end record;\n+\n+   function Func (Val : Rec1) return Limited_With2_Pkg1.Rec2;\n+\n+end Limited_With2;"}, {"sha": "d821fa3a6d64e606034d2cb525dd275fa0283354", "filename": "gcc/testsuite/gnat.dg/limited_with2_pkg1.ads", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ddf9843628ab87261d2ec8dc3d14ac057e76014/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with2_pkg1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ddf9843628ab87261d2ec8dc3d14ac057e76014/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with2_pkg1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with2_pkg1.ads?ref=6ddf9843628ab87261d2ec8dc3d14ac057e76014", "patch": "@@ -0,0 +1,9 @@\n+limited with Limited_With2_Pkg2;\n+\n+package Limited_With2_Pkg1 is\n+\n+   type Rec2 is record\n+      F : access Limited_With2_Pkg2.Rec3;\n+   end record;\n+\n+end Limited_With2_Pkg1;"}, {"sha": "c2d1012e3ab1d9f7bed4eed7cdf1727360cf22b5", "filename": "gcc/testsuite/gnat.dg/limited_with2_pkg2.ads", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ddf9843628ab87261d2ec8dc3d14ac057e76014/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with2_pkg2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ddf9843628ab87261d2ec8dc3d14ac057e76014/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with2_pkg2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with2_pkg2.ads?ref=6ddf9843628ab87261d2ec8dc3d14ac057e76014", "patch": "@@ -0,0 +1,9 @@\n+with Limited_With2;\n+\n+package Limited_With2_Pkg2 is\n+\n+   type Rec3 is record\n+      F : Limited_With2.Rec1;\n+   end record;\n+\n+end Limited_With2_Pkg2;"}]}