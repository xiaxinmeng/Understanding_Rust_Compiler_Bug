{"sha": "957952ce64e067c56e58df5ee36bbb004eecffa1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU3OTUyY2U2NGUwNjdjNTZlNThkZjVlZTM2YmJiMDA0ZWVjZmZhMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-07-21T06:50:20Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-07-21T06:50:20Z"}, "message": "unroll: Run VN on unrolled-and-jammed loops\n\nUnroll and jam can sometimes leave redundancies.  E.g. for:\n\n  for (int j = 0; j < 100; ++j)\n    for (int i = 0; i < 100; ++i)\n      x[i] += y[i] * z[j][i];\n\nthe new loop will do the equivalent of:\n\n  for (int j = 0; j < 100; j += 2)\n    for (int i = 0; i < 100; ++i)\n      {\n        x[i] += y[i] * z[j][i];\n        x[i] += y[i] * z[j + 1][i];\n      }\n\nwith two reads of y[i] and with a round trip through memory for x[i].\n\nAt the moment these redundancies survive till vectorisation, so if\nvectorisation succeeds, we're reliant on being able to remove the\nredundancies from the vector form.  This can be hard to do if\na vector loop uses predication.  E.g. on SVE we end up with:\n\n.L3:\n        ld1w    z3.s, p0/z, [x3, x0, lsl 2]\n        ld1w    z0.s, p0/z, [x5, x0, lsl 2]\n        ld1w    z1.s, p0/z, [x2, x0, lsl 2]\n        mad     z1.s, p1/m, z0.s, z3.s\n        ld1w    z2.s, p0/z, [x4, x0, lsl 2]\n        st1w    z1.s, p0, [x3, x0, lsl 2]    // store to x[i]\n        ld1w    z1.s, p0/z, [x3, x0, lsl 2]  // load back from x[i]\n        mad     z0.s, p1/m, z2.s, z1.s\n        st1w    z0.s, p0, [x3, x0, lsl 2]\n        add     x0, x0, x6\n        whilelo p0.s, w0, w1\n        b.any   .L3\n\nThis patch runs a value-numbering pass on loops after a successful\nunroll-and-jam, which gets rid of the unnecessary load and gives\na more accurate idea of vector costs.  Unfortunately the redundant\nstore still persists without a pre-vect DSE, but that feels like\na separate issue.\n\nNote that the pass requires the loop to have a single exit,\nhence the simple calculation of exit_bbs.\n\ngcc/\n\t* gimple-loop-jam.c: Include tree-ssa-sccvn.h.\n\t(tree_loop_unroll_and_jam): Run value-numbering on a loop that\n\thas been successfully unrolled.\n\ngcc/testsuite/\n\t* gcc.dg/unroll-10.c: New test.", "tree": {"sha": "c8bd8c976b9c5821d706f166eef3808691337a42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8bd8c976b9c5821d706f166eef3808691337a42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/957952ce64e067c56e58df5ee36bbb004eecffa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/957952ce64e067c56e58df5ee36bbb004eecffa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/957952ce64e067c56e58df5ee36bbb004eecffa1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/957952ce64e067c56e58df5ee36bbb004eecffa1/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62acc72a957b561462a436fcb2d6caac5b363190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62acc72a957b561462a436fcb2d6caac5b363190", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62acc72a957b561462a436fcb2d6caac5b363190"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "544ad779dd6dde9b0c665ca5c67a02920ebec029", "filename": "gcc/gimple-loop-jam.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957952ce64e067c56e58df5ee36bbb004eecffa1/gcc%2Fgimple-loop-jam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957952ce64e067c56e58df5ee36bbb004eecffa1/gcc%2Fgimple-loop-jam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-loop-jam.c?ref=957952ce64e067c56e58df5ee36bbb004eecffa1", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-data-ref.h\"\n #include \"tree-ssa-loop-ivopts.h\"\n #include \"tree-vectorizer.h\"\n+#include \"tree-ssa-sccvn.h\"\n \n /* Unroll and Jam transformation\n    \n@@ -487,7 +488,7 @@ static unsigned int\n tree_loop_unroll_and_jam (void)\n {\n   class loop *loop;\n-  bool changed = false;\n+  unsigned int todo = 0;\n \n   gcc_assert (scev_initialized_p ());\n \n@@ -591,21 +592,24 @@ tree_loop_unroll_and_jam (void)\n \t\t\t    &desc);\n \t  free_original_copy_tables ();\n \t  fuse_loops (outer->inner);\n-\t  changed = true;\n+\t  todo |= TODO_cleanup_cfg;\n+\n+\t  auto_bitmap exit_bbs;\n+\t  bitmap_set_bit (exit_bbs, single_dom_exit (outer)->dest->index);\n+\t  todo |= do_rpo_vn (cfun, loop_preheader_edge (outer), exit_bbs);\n \t}\n \n       loop_nest.release ();\n       free_dependence_relations (dependences);\n       free_data_refs (datarefs);\n     }\n \n-  if (changed)\n+  if (todo)\n     {\n       scev_reset ();\n       free_dominance_info (CDI_DOMINATORS);\n-      return TODO_cleanup_cfg;\n     }\n-  return 0;\n+  return todo;\n }\n \n /* Pass boilerplate */"}, {"sha": "0559915f2fc91a4dbeb2d71837a6c5c1123c1497", "filename": "gcc/testsuite/gcc.dg/unroll-10.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957952ce64e067c56e58df5ee36bbb004eecffa1/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957952ce64e067c56e58df5ee36bbb004eecffa1/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-10.c?ref=957952ce64e067c56e58df5ee36bbb004eecffa1", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-options \"-O3 -fdump-tree-unrolljam\" } */\n+\n+void\n+f (int *restrict x, int *restrict y, int z[restrict 100][100])\n+{\n+  for (int j = 0; j < 100; ++j)\n+    for (int i = 0; i < 100; ++i)\n+      x[i] += y[i] * z[j][i];\n+}\n+\n+/* The loop should be unrolled 2 times, leaving one load from x,\n+   one load from y and 2 loads from z.  */\n+/* { dg-final { scan-tree-dump-times { = \\(*\\*} 4 \"unrolljam\" } } */"}]}