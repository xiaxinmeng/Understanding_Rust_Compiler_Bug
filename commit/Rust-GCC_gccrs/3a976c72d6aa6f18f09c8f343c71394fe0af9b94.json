{"sha": "3a976c72d6aa6f18f09c8f343c71394fe0af9b94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E5NzZjNzJkNmFhNmYxOGYwOWM4ZjM0M2M3MTM5NGZlMGFmOWI5NA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-12-20T15:38:28Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-12-20T15:38:28Z"}, "message": "class.c: Remove uses of \"register\" specifier in declarations of arguments and local...\n\n\t* class.c: Remove uses of \"register\" specifier in\n\tdeclarations of arguments and local variables.\n\t* decl.c: Likewise.\n\t* expr.c: Likewise.\n\t* gjavah.c: Likewise.\n\t* jcf-dump.c: Likewise.\n\t* jcf-io.c: Likewise.\n\t* jcf-parse.c: Likewise.\n\t* jcf-write.c: Likewise.\n\t* keyword.h: Likewise.\n\t* parse.y: Likewise.\n\t* typeck.c: Likewise.\n\t* verify.c: Likewise.\n\nFrom-SVN: r74882", "tree": {"sha": "eec8d602036fe17dcf6d53ec4d030d1345cf301a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eec8d602036fe17dcf6d53ec4d030d1345cf301a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a976c72d6aa6f18f09c8f343c71394fe0af9b94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a976c72d6aa6f18f09c8f343c71394fe0af9b94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a976c72d6aa6f18f09c8f343c71394fe0af9b94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/comments", "author": null, "committer": null, "parents": [{"sha": "aed8bfdc7ee77b96bc15ef4b21414f6b41645e24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aed8bfdc7ee77b96bc15ef4b21414f6b41645e24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aed8bfdc7ee77b96bc15ef4b21414f6b41645e24"}], "stats": {"total": 100, "additions": 58, "deletions": 42}, "files": [{"sha": "68086ee9245bb7e7784d2b51e336c95312bd186f", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=3a976c72d6aa6f18f09c8f343c71394fe0af9b94", "patch": "@@ -1,3 +1,19 @@\n+2003-12-20  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* class.c: Remove uses of \"register\" specifier in\n+\tdeclarations of arguments and local variables.\n+\t* decl.c: Likewise.\n+\t* expr.c: Likewise.\n+\t* gjavah.c: Likewise.\n+\t* jcf-dump.c: Likewise.\n+\t* jcf-io.c: Likewise.\n+\t* jcf-parse.c: Likewise.\n+\t* jcf-write.c: Likewise.\n+\t* keyword.h: Likewise.\n+\t* parse.y: Likewise.\n+\t* typeck.c: Likewise.\n+\t* verify.c: Likewise.\n+\n 2003-12-06  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* Make-lang.in (GCJ_CROSS_NAME): Delete."}, {"sha": "6c772e0a8081b5cfab60963f609497a49a64cdb3", "filename": "gcc/java/class.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=3a976c72d6aa6f18f09c8f343c71394fe0af9b94", "patch": "@@ -723,8 +723,8 @@ strLengthUtf8 (char *str, int len)\n static int32\n hashUtf8String (const char *str, int len)\n {\n-  register const unsigned char* ptr = (const unsigned char*) str;\n-  register const unsigned char *limit = ptr + len;\n+  const unsigned char* ptr = (const unsigned char*) str;\n+  const unsigned char *limit = ptr + len;\n   int32 hash = 0;\n   for (; ptr < limit;)\n     {"}, {"sha": "46bb2248b6dd7f5fb38b0d49ff0168cb20453e8c", "filename": "gcc/java/decl.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=3a976c72d6aa6f18f09c8f343c71394fe0af9b94", "patch": "@@ -94,7 +94,7 @@ int current_pc;\n void\n indent (void)\n {\n-  register unsigned i;\n+  unsigned i;\n \n   for (i = 0; i < binding_depth*2; i++)\n     putc (' ', stderr);\n@@ -392,7 +392,7 @@ create_primitive_vtable (const char *name)\n void\n java_init_decl_processing (void)\n {\n-  register tree endlink;\n+  tree endlink;\n   tree field = NULL_TREE;\n   tree t;\n \n@@ -966,7 +966,7 @@ java_init_decl_processing (void)\n tree\n lookup_name (tree name)\n {\n-  register tree val;\n+  tree val;\n   if (current_binding_level != global_binding_level\n       && IDENTIFIER_LOCAL_VALUE (name))\n     val = IDENTIFIER_LOCAL_VALUE (name);\n@@ -981,7 +981,7 @@ lookup_name (tree name)\n static tree\n lookup_name_current_level (tree name)\n {\n-  register tree t;\n+  tree t;\n \n   if (current_binding_level == global_binding_level)\n     return IDENTIFIER_GLOBAL_VALUE (name);\n@@ -1001,8 +1001,8 @@ lookup_name_current_level (tree name)\n void\n push_labeled_block (tree lb)\n {\n-  register tree name = DECL_NAME (LABELED_BLOCK_LABEL (lb));\n-  register struct binding_level *b = current_binding_level;\n+  tree name = DECL_NAME (LABELED_BLOCK_LABEL (lb));\n+  struct binding_level *b = current_binding_level;\n   tree oldlocal = IDENTIFIER_LOCAL_VALUE (name);\n   if (oldlocal != 0)\n       b->shadowed = tree_cons (name, oldlocal, b->shadowed);\n@@ -1042,9 +1042,9 @@ pop_labeled_block (void)\n tree\n pushdecl (tree x)\n {\n-  register tree t;\n-  register tree name = DECL_NAME (x);\n-  register struct binding_level *b = current_binding_level;\n+  tree t;\n+  tree name = DECL_NAME (x);\n+  struct binding_level *b = current_binding_level;\n   \n   if (TREE_CODE (x) != TYPE_DECL)\n     DECL_CONTEXT (x) = current_function_decl;\n@@ -1159,8 +1159,8 @@ pushdecl_force_head (tree x)\n tree\n pushdecl_top_level (tree x)\n {\n-  register tree t;\n-  register struct binding_level *b = current_binding_level;\n+  tree t;\n+  struct binding_level *b = current_binding_level;\n \n   current_binding_level = global_binding_level;\n   t = pushdecl (x);\n@@ -1199,7 +1199,7 @@ make_binding_level (void)\n void\n pushlevel (int unused ATTRIBUTE_UNUSED)\n {\n-  register struct binding_level *newlevel = NULL_BINDING_LEVEL;\n+  struct binding_level *newlevel = NULL_BINDING_LEVEL;\n \n #if 0\n   /* If this is the top level of a function,\n@@ -1255,7 +1255,7 @@ pushlevel (int unused ATTRIBUTE_UNUSED)\n tree\n poplevel (int keep, int reverse, int functionbody)\n {\n-  register tree link;\n+  tree link;\n   /* The chain of decls was accumulated in reverse order.\n      Put it into forward order, just for cleanliness.  */\n   tree decls;\n@@ -1394,7 +1394,7 @@ poplevel (int keep, int reverse, int functionbody)\n #if 0\n       for (link = named_labels; link; link = TREE_CHAIN (link))\n \t{\n-\t  register tree label = TREE_VALUE (link);\n+\t  tree label = TREE_VALUE (link);\n \n \t  if (DECL_INITIAL (label) == 0)\n \t    {\n@@ -1417,7 +1417,7 @@ poplevel (int keep, int reverse, int functionbody)\n   /* Pop the current level, and free the structure for reuse.  */\n \n   {\n-    register struct binding_level *level = current_binding_level;\n+    struct binding_level *level = current_binding_level;\n     current_binding_level = current_binding_level->level_chain;\n \n     level->level_chain = free_binding_level;"}, {"sha": "533b88c39b35549a41c0058fafbeb059c8435e03", "filename": "gcc/java/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=3a976c72d6aa6f18f09c8f343c71394fe0af9b94", "patch": "@@ -206,7 +206,7 @@ static void\n flush_quick_stack (void)\n {\n   int stack_index = stack_pointer;\n-  register tree prev, cur, next;\n+  tree prev, cur, next;\n \n   /* First reverse the quick_stack, and count the number of slots it has. */\n   for (cur = quick_stack, prev = NULL_TREE; cur != NULL_TREE; cur = next)"}, {"sha": "b9a34e3bbdb9179d5807469b2706e1daa91c8c6e", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=3a976c72d6aa6f18f09c8f343c71394fe0af9b94", "patch": "@@ -1370,7 +1370,7 @@ print_c_decl (FILE* stream, JCF* jcf, int name_index, int signature_index,\n     {\n       int length = JPOOL_UTF_LENGTH (jcf, signature_index);\n       const unsigned char *str0 = JPOOL_UTF_DATA (jcf, signature_index);\n-      register const  unsigned char *str = str0;\n+      const unsigned char *str = str0;\n       const unsigned char *limit = str + length;\n       int need_space = 0;\n       int is_method = str[0] == '(';\n@@ -1430,7 +1430,7 @@ print_full_cxx_name (FILE* stream, JCF* jcf, int name_index,\n {\n   int length = JPOOL_UTF_LENGTH (jcf, signature_index);\n   const unsigned char *str0 = JPOOL_UTF_DATA (jcf, signature_index);\n-  register const unsigned char *str = str0;\n+  const unsigned char *str = str0;\n   const unsigned char *limit = str + length;\n   int need_space = 0;\n   int is_method = str[0] == '(';\n@@ -1541,7 +1541,7 @@ print_stub_or_jni (FILE* stream, JCF* jcf, int name_index,\n     {\n       int length = JPOOL_UTF_LENGTH (jcf, signature_index);\n       const unsigned char *str0 = JPOOL_UTF_DATA (jcf, signature_index);\n-      register const unsigned char *str = str0;\n+      const unsigned char *str = str0;\n       const unsigned char *limit = str + length;\n       int need_space = 0;\n       int is_method = str[0] == '(';"}, {"sha": "a95f122ac19a8edea56acc03aeae5a52749f9698", "filename": "gcc/java/jcf-dump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2Fjcf-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2Fjcf-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-dump.c?ref=3a976c72d6aa6f18f09c8f343c71394fe0af9b94", "patch": "@@ -615,7 +615,7 @@ print_constant (FILE *out, JCF *jcf, int index, int verbosity)\n       break;\n     case CONSTANT_Utf8:\n       {\n-\tregister const unsigned char *str = JPOOL_UTF_DATA (jcf, index);\n+\tconst unsigned char *str = JPOOL_UTF_DATA (jcf, index);\n \tint length = JPOOL_UTF_LENGTH (jcf, index);\n \tif (verbosity > 0)\n \t  { /* Print as 8-bit bytes. */"}, {"sha": "101be8ee1d3a389c54dd76f321ebd610c5a8adbc", "filename": "gcc/java/jcf-io.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2Fjcf-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2Fjcf-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-io.c?ref=3a976c72d6aa6f18f09c8f343c71394fe0af9b94", "patch": "@@ -619,7 +619,7 @@ jcf_print_char (FILE *stream, int ch)\n /* Print UTF8 string at STR of length LENGTH bytes to STREAM. */\n \n void\n-jcf_print_utf8 (FILE *stream, register const unsigned char *str, int length)\n+jcf_print_utf8 (FILE *stream, const unsigned char *str, int length)\n {\n   const unsigned char * limit = str + length;\n   while (str < limit)\n@@ -713,7 +713,7 @@ format_uint (char *buffer, uint64 value, int base)\n {\n #define WRITE_BUF_SIZE (4 + sizeof(uint64) * 8)\n   char buf[WRITE_BUF_SIZE];\n-  register char *buf_ptr = buf+WRITE_BUF_SIZE; /* End of buf. */\n+  char *buf_ptr = buf+WRITE_BUF_SIZE; /* End of buf. */\n   int chars_written;\n   int i;\n "}, {"sha": "a3fa2124f8200e08fbab2a37816bc2e73b6039a3", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=3a976c72d6aa6f18f09c8f343c71394fe0af9b94", "patch": "@@ -753,8 +753,8 @@ parse_class_file (void)\n       input_line = 0;\n       if (DECL_LINENUMBERS_OFFSET (method))\n \t{\n-\t  register int i;\n-\t  register unsigned char *ptr;\n+\t  int i;\n+\t  unsigned char *ptr;\n \t  JCF_SEEK (jcf, DECL_LINENUMBERS_OFFSET (method));\n \t  linenumber_count = i = JCF_readu2 (jcf);\n \t  linenumber_table = ptr = jcf->read_ptr;"}, {"sha": "74ebc1aa886ade3c7d0d570b2f94fc60ec4ef2cf", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=3a976c72d6aa6f18f09c8f343c71394fe0af9b94", "patch": "@@ -559,9 +559,9 @@ localvar_alloc (tree decl, struct jcf_partial *state)\n   struct jcf_block *start_label = get_jcf_label_here (state);\n   int wide = TYPE_IS_WIDE (TREE_TYPE (decl));\n   int index;\n-  register struct localvar_info *info;\n-  register struct localvar_info **ptr = localvar_buffer;\n-  register struct localvar_info **limit\n+  struct localvar_info *info;\n+  struct localvar_info **ptr = localvar_buffer;\n+  struct localvar_info **limit\n     = (struct localvar_info**) state->localvars.ptr;\n   for (index = 0;  ptr < limit;  index++, ptr++)\n     {\n@@ -602,8 +602,8 @@ maybe_free_localvar (tree decl, struct jcf_partial *state, int really)\n {\n   struct jcf_block *end_label = get_jcf_label_here (state);\n   int index = DECL_LOCAL_INDEX (decl);\n-  register struct localvar_info **ptr = &localvar_buffer [index];\n-  register struct localvar_info *info = *ptr;\n+  struct localvar_info **ptr = &localvar_buffer [index];\n+  struct localvar_info *info = *ptr;\n   int wide = TYPE_IS_WIDE (TREE_TYPE (decl));\n \n   info->end_label = end_label;"}, {"sha": "49eda19f4515023e31ce19348d6868daaf349a83", "filename": "gcc/java/keyword.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2Fkeyword.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2Fkeyword.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fkeyword.h?ref=3a976c72d6aa6f18f09c8f343c71394fe0af9b94", "patch": "@@ -51,7 +51,7 @@ inline\n #endif\n #endif\n static unsigned int\n-hash (register const char *str, register unsigned int len)\n+hash (const char *str, unsigned int len)\n {\n   static const unsigned char asso_values[] =\n     {\n@@ -82,7 +82,7 @@ hash (register const char *str, register unsigned int len)\n       86, 86, 86, 86, 86, 86, 86, 86, 86, 86,\n       86, 86, 86, 86, 86, 86\n     };\n-  register int hval = len;\n+  int hval = len;\n \n   switch (hval)\n     {\n@@ -102,7 +102,7 @@ hash (register const char *str, register unsigned int len)\n __inline\n #endif\n const struct java_keyword *\n-java_keyword (register const char *str, register unsigned int len)\n+java_keyword (const char *str, unsigned int len)\n {\n   static const struct java_keyword wordlist[] =\n     {\n@@ -175,11 +175,11 @@ java_keyword (register const char *str, register unsigned int len)\n \n   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)\n     {\n-      register int key = hash (str, len);\n+      int key = hash (str, len);\n \n       if (key <= MAX_HASH_VALUE && key >= 0)\n         {\n-          register const char *s = wordlist[key].name;\n+          const char *s = wordlist[key].name;\n \n           if (*str == *s && !strcmp (str + 1, s + 1))\n             return &wordlist[key];"}, {"sha": "02b445b8b606e6513b7b2bfda17f43ebfdb7bd7d", "filename": "gcc/java/parse.y", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=3a976c72d6aa6f18f09c8f343c71394fe0af9b94", "patch": "@@ -5114,7 +5114,7 @@ create_jdep_list (struct parser_ctxt *ctxp)\n static jdeplist *\n reverse_jdep_list (struct parser_ctxt *ctxp)\n {\n-  register jdeplist *prev = NULL, *current, *next;\n+  jdeplist *prev = NULL, *current, *next;\n   for (current = ctxp->classd_list; current; current = next)\n     {\n       next = current->next;\n@@ -11242,7 +11242,7 @@ static GTY(()) tree m2_arg_cache;\n static int\n argument_types_convertible (tree m1, tree m2_or_arglist)\n {\n-  register tree m1_arg, m2_arg;\n+  tree m1_arg, m2_arg;\n \n   SKIP_THIS_AND_ARTIFICIAL_PARMS (m1_arg, m1)\n "}, {"sha": "ddee2ba198b2ae5b225d8e19af3d91bc3b5c2a9e", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=3a976c72d6aa6f18f09c8f343c71394fe0af9b94", "patch": "@@ -112,7 +112,7 @@ convert_ieee_real_to_integer (tree type, tree expr)\n tree\n convert (tree type, tree expr)\n {\n-  register enum tree_code code = TREE_CODE (type);\n+  enum tree_code code = TREE_CODE (type);\n \n   if (!expr)\n    return error_mark_node;\n@@ -244,7 +244,7 @@ java_unsigned_type (tree type)\n bool\n java_mark_addressable (tree exp)\n {\n-  register tree x = exp;\n+  tree x = exp;\n   while (1)\n     switch (TREE_CODE (x))\n       {\n@@ -480,7 +480,7 @@ parse_signature_type (const unsigned char **ptr, const unsigned char *limit)\n     case 'L':\n       {\n \tconst unsigned char *start = ++(*ptr);\n-\tregister const unsigned char *str = start;\n+\tconst unsigned char *str = start;\n \tfor ( ; ; str++)\n \t  {\n \t    if (str >= limit)"}, {"sha": "abcdac8c4d84259f21006d917c153a1e6206428a", "filename": "gcc/java/verify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2Fverify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a976c72d6aa6f18f09c8f343c71394fe0af9b94/gcc%2Fjava%2Fverify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify.c?ref=3a976c72d6aa6f18f09c8f343c71394fe0af9b94", "patch": "@@ -423,7 +423,7 @@ verify_jvm_instructions (JCF* jcf, const unsigned char *byte_ops, long length)\n   char *pmessage;\n   int i;\n   int index;\n-  register unsigned char *p;\n+  unsigned char *p;\n   struct eh_range *prev_eh_ranges = NULL_EH_RANGE;\n   struct eh_range *eh_ranges;\n   tree return_type = TREE_TYPE (TREE_TYPE (current_function_decl));"}]}