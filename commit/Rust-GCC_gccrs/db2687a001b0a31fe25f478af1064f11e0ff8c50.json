{"sha": "db2687a001b0a31fe25f478af1064f11e0ff8c50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIyNjg3YTAwMWIwYTMxZmUyNWY0NzhhZjEwNjRmMTFlMGZmOGM1MA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-05-18T07:17:06Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-05-18T07:17:06Z"}, "message": "extend.texi (Size of an asm): Really move node to its position.\n\n\t* doc/extend.texi (Size of an asm): Really move node to its position.\n\nFrom-SVN: r210577", "tree": {"sha": "229c6054245da65e9054f7d6f5a907bdc951c4fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/229c6054245da65e9054f7d6f5a907bdc951c4fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db2687a001b0a31fe25f478af1064f11e0ff8c50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db2687a001b0a31fe25f478af1064f11e0ff8c50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db2687a001b0a31fe25f478af1064f11e0ff8c50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db2687a001b0a31fe25f478af1064f11e0ff8c50/comments", "author": null, "committer": null, "parents": [{"sha": "d6145916208456cb6015a7e5404cb73b99d1dac7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6145916208456cb6015a7e5404cb73b99d1dac7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6145916208456cb6015a7e5404cb73b99d1dac7"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "2009c7543517d530f45082c98bd33180061356d5", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db2687a001b0a31fe25f478af1064f11e0ff8c50/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db2687a001b0a31fe25f478af1064f11e0ff8c50/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=db2687a001b0a31fe25f478af1064f11e0ff8c50", "patch": "@@ -7267,28 +7267,6 @@ output of the assembler instruction directly into a particular register.\n specified for that operand in the @code{asm}.)\n @end itemize\n \n-@node Size of an asm\n-@subsection Size of an @code{asm}\n-\n-Some targets require that GCC track the size of each instruction used\n-in order to generate correct code.  Because the final length of the\n-code produced by an @code{asm} statement is only known by the\n-assembler, GCC must make an estimate as to how big it will be.  It\n-does this by counting the number of instructions in the pattern of the\n-@code{asm} and multiplying that by the length of the longest\n-instruction supported by that processor.  (When working out the number\n-of instructions, it assumes that any occurrence of a newline or of\n-whatever statement separator character is supported by the assembler --\n-typically @samp{;} --- indicates the end of an instruction.)\n-\n-Normally, GCC's estimate is adequate to ensure that correct\n-code is generated, but it is possible to confuse the compiler if you use\n-pseudo instructions or assembler macros that expand into multiple real\n-instructions, or if you use assembler directives that expand to more\n-space in the object file than is needed for a single instruction.\n-If this happens then the assembler may produce a diagnostic saying that\n-a label is unreachable.\n-\n @menu\n * Global Reg Vars::\n * Local Reg Vars::\n@@ -7467,6 +7445,28 @@ register int *result asm (\"r0\");\n asm (\"sysint\" : \"=r\" (result) : \"0\" (p1), \"r\" (p2));\n @end smallexample\n \n+@node Size of an asm\n+@subsection Size of an @code{asm}\n+\n+Some targets require that GCC track the size of each instruction used\n+in order to generate correct code.  Because the final length of the\n+code produced by an @code{asm} statement is only known by the\n+assembler, GCC must make an estimate as to how big it will be.  It\n+does this by counting the number of instructions in the pattern of the\n+@code{asm} and multiplying that by the length of the longest\n+instruction supported by that processor.  (When working out the number\n+of instructions, it assumes that any occurrence of a newline or of\n+whatever statement separator character is supported by the assembler --\n+typically @samp{;} --- indicates the end of an instruction.)\n+\n+Normally, GCC's estimate is adequate to ensure that correct\n+code is generated, but it is possible to confuse the compiler if you use\n+pseudo instructions or assembler macros that expand into multiple real\n+instructions, or if you use assembler directives that expand to more\n+space in the object file than is needed for a single instruction.\n+If this happens then the assembler may produce a diagnostic saying that\n+a label is unreachable.\n+\n @node Alternate Keywords\n @section Alternate Keywords\n @cindex alternate keywords"}]}