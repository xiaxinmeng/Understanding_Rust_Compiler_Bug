{"sha": "ef12e74ce7b1b00cce13d27e1273656926a4a25d", "node_id": "C_kwDOANBUbNoAKGVmMTJlNzRjZTdiMWIwMGNjZTEzZDI3ZTEyNzM2NTY5MjZhNGEyNWQ", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-08-16T15:54:59Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-09-06T07:14:23Z"}, "message": "[Ada] Fix internal error on double renaming of private constant\n\nThe first renaming uses the type of the full view of the constant but not\nthe second, which introduces problematic view conversions downstream.\n\ngcc/ada/\n\n\t* gcc-interface/trans.cc (Full_View_Of_Private_Constant): New\n\tfunction returning the Full_View of a private constant, after\n\tlooking through a chain of renamings, if any.\n\t(Identifier_to_gnu): Call it on the entity.  Small cleanup.", "tree": {"sha": "183ec421e996f3b726fd5d286355b121a0fa5703", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/183ec421e996f3b726fd5d286355b121a0fa5703"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef12e74ce7b1b00cce13d27e1273656926a4a25d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef12e74ce7b1b00cce13d27e1273656926a4a25d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef12e74ce7b1b00cce13d27e1273656926a4a25d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef12e74ce7b1b00cce13d27e1273656926a4a25d/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2909e105d26a13b860d071f7491923f318f999c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2909e105d26a13b860d071f7491923f318f999c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2909e105d26a13b860d071f7491923f318f999c"}], "stats": {"total": 68, "additions": 43, "deletions": 25}, "files": [{"sha": "b6c42f5c17e09dc443cc678f2bc70167b77ad674", "filename": "gcc/ada/gcc-interface/trans.cc", "status": "modified", "additions": 43, "deletions": 25, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef12e74ce7b1b00cce13d27e1273656926a4a25d/gcc%2Fada%2Fgcc-interface%2Ftrans.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef12e74ce7b1b00cce13d27e1273656926a4a25d/gcc%2Fada%2Fgcc-interface%2Ftrans.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.cc?ref=ef12e74ce7b1b00cce13d27e1273656926a4a25d", "patch": "@@ -1088,28 +1088,48 @@ Gigi_Types_Compatible (Entity_Id type, Entity_Id def_type)\n   return false;\n }\n \n+/* Return the full view of a private constant E, or of a renaming thereof, if\n+   its type has discriminants, and Empty otherwise.  */\n+\n+static Entity_Id\n+Full_View_Of_Private_Constant (Entity_Id E)\n+{\n+  while (Present (Renamed_Object (E)) && Is_Entity_Name (Renamed_Object (E)))\n+    E = Entity (Renamed_Object (E));\n+\n+  if (Ekind (E) != E_Constant || No (Full_View (E)))\n+    return Empty;\n+\n+  const Entity_Id T = Etype (E);\n+\n+  if (Is_Private_Type (T)\n+      && (Has_Unknown_Discriminants (T)\n+\t  || (Present (Full_View (T)) && Has_Discriminants (Full_View (T)))))\n+    return Full_View (E);\n+\n+  return Empty;\n+}\n+\n /* Subroutine of gnat_to_gnu to translate GNAT_NODE, an N_Identifier, to a GCC\n    tree, which is returned.  GNU_RESULT_TYPE_P is a pointer to where we should\n    place the result type.  */\n \n static tree\n Identifier_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n {\n-  /* The entity of GNAT_NODE and its type.  */\n-  Node_Id gnat_entity = (Nkind (gnat_node) == N_Defining_Identifier\n-\t\t\t || Nkind (gnat_node) == N_Defining_Operator_Symbol)\n-\t\t\t? gnat_node : Entity (gnat_node);\n-  Node_Id gnat_entity_type = Etype (gnat_entity);\n+  Entity_Id gnat_entity = (Nkind (gnat_node) == N_Defining_Identifier\n+\t\t\t   || Nkind (gnat_node) == N_Defining_Operator_Symbol)\n+\t\t\t  ? gnat_node : Entity (gnat_node);\n+  Entity_Id gnat_result_type;\n+  tree gnu_result, gnu_result_type;\n   /* If GNAT_NODE is a constant, whether we should use the initialization\n      value instead of the constant entity, typically for scalars with an\n      address clause when the parent doesn't require an lvalue.  */\n-  bool use_constant_initializer = false;\n+  bool use_constant_initializer;\n   /* Whether we should require an lvalue for GNAT_NODE.  Needed in\n      specific circumstances only, so evaluated lazily.  < 0 means\n      unknown, > 0 means known true, 0 means known false.  */\n-  int require_lvalue = -1;\n-  Entity_Id gnat_result_type;\n-  tree gnu_result, gnu_result_type;\n+  int require_lvalue;\n \n   /* If the Etype of this node is not the same as that of the Entity, then\n      something went wrong, probably in generic instantiation.  However, this\n@@ -1118,25 +1138,17 @@ Identifier_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n      may have been changed to a subtype by Exp_Ch3.Adjust_Discriminants.  */\n   gcc_assert (!Is_Object (gnat_entity)\n \t      || Ekind (gnat_entity) == E_Discriminant\n-\t      || Etype (gnat_node) == gnat_entity_type\n-\t      || Gigi_Types_Compatible (Etype (gnat_node), gnat_entity_type));\n+\t      || Etype (gnat_node) == Etype (gnat_entity)\n+\t      || Gigi_Types_Compatible (Etype (gnat_node),\n+\t\t\t\t\tEtype (gnat_entity)));\n \n-  /* If this is a reference to a deferred constant whose partial view is an\n+  /* If this is a reference to a deferred constant whose partial view is of\n      unconstrained private type, the proper type is on the full view of the\n-     constant, not on the full view of the type, which may be unconstrained.\n-\n-     This may be a reference to a type, for example in the prefix of the\n-     attribute Position, generated for dispatching code (see Make_DT in\n-     exp_disp,adb). In that case we need the type itself, not is parent,\n-     in particular if it is a derived type  */\n-  if (Ekind (gnat_entity) == E_Constant\n-      && Is_Private_Type (gnat_entity_type)\n-      && (Has_Unknown_Discriminants (gnat_entity_type)\n-\t  || (Present (Full_View (gnat_entity_type))\n- \t      && Has_Discriminants (Full_View (gnat_entity_type))))\n-      && Present (Full_View (gnat_entity)))\n+     constant, not on the full view of the type which may be unconstrained.  */\n+  const Entity_Id gnat_full_view = Full_View_Of_Private_Constant (gnat_entity);\n+  if (Present (gnat_full_view))\n     {\n-      gnat_entity = Full_View (gnat_entity);\n+      gnat_entity = gnat_full_view;\n       gnat_result_type = Etype (gnat_entity);\n     }\n   else\n@@ -1184,7 +1196,13 @@ Identifier_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n \t= lvalue_required_p (gnat_node, gnu_result_type, true, false);\n       use_constant_initializer = !require_lvalue;\n     }\n+  else\n+    {\n+      require_lvalue = -1;\n+      use_constant_initializer = false;\n+    }\n \n+  /* Fetch the initialization value of a constant if requested.  */\n   if (use_constant_initializer)\n     {\n       /* If this is a deferred constant, the initializer is attached to"}]}