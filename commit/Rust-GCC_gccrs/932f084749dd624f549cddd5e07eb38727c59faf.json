{"sha": "932f084749dd624f549cddd5e07eb38727c59faf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMyZjA4NDc0OWRkNjI0ZjU0OWNkZGQ1ZTA3ZWIzODcyN2M1OWZhZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-06-08T19:52:06Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-06-08T19:52:06Z"}, "message": "function.c (diddle_return_value): Kill code to determine return value before expand_function_end.\n\n\t* function.c (diddle_return_value): Kill code to determine\n\treturn value before expand_function_end.\n\t(expand_function_end): Delay call to clobber_return_register\n\tafter fucntion return value is computed.\n\n\tRe-install temporary reverted patch:\n\t* toplev.c (rest_of_compilation): Call split_all_insns\n\tbefore reg-stack and shorten-branches. Do shorten-branches\n\tafter reg-stack.\n\t* final.c (shorten_branches): Remove insn splitting code.\n\nFrom-SVN: r43044", "tree": {"sha": "b07fd69ba2ffb8acd24dffe5735fd98425a31181", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b07fd69ba2ffb8acd24dffe5735fd98425a31181"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/932f084749dd624f549cddd5e07eb38727c59faf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/932f084749dd624f549cddd5e07eb38727c59faf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/932f084749dd624f549cddd5e07eb38727c59faf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/932f084749dd624f549cddd5e07eb38727c59faf/comments", "author": null, "committer": null, "parents": [{"sha": "cd3bb27790771150d4ab39e5b3b0094bafe0cd19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd3bb27790771150d4ab39e5b3b0094bafe0cd19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd3bb27790771150d4ab39e5b3b0094bafe0cd19"}], "stats": {"total": 119, "additions": 49, "deletions": 70}, "files": [{"sha": "653ecc3156da61835924ab8d6ef4b35eade719f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/932f084749dd624f549cddd5e07eb38727c59faf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/932f084749dd624f549cddd5e07eb38727c59faf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=932f084749dd624f549cddd5e07eb38727c59faf", "patch": "@@ -1,3 +1,16 @@\n+Fri Jun  8 21:34:54 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* function.c (diddle_return_value): Kill code to determine\n+\treturn value before expand_function_end.\n+\t(expand_function_end): Delay call to clobber_return_register\n+\tafter fucntion return value is computed.\n+\n+\tRe-install temporary reverted patch:\n+\t* toplev.c (rest_of_compilation): Call split_all_insns\n+\tbefore reg-stack and shorten-branches. Do shorten-branches\n+\tafter reg-stack.\n+\t* final.c (shorten_branches): Remove insn splitting code.\n+\n 2001-06-08  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* doc/gcc.texi, doc/invoke.texi: Add index of command line"}, {"sha": "a3fe70d61cbf28d5b0e1143aada970b17b9addf5", "filename": "gcc/final.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/932f084749dd624f549cddd5e07eb38727c59faf/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/932f084749dd624f549cddd5e07eb38727c59faf/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=932f084749dd624f549cddd5e07eb38727c59faf", "patch": "@@ -960,26 +960,6 @@ shorten_branches (first)\n   int uid;\n   rtx align_tab[MAX_CODE_ALIGN];\n \n-  /* In order to make sure that all instructions have valid length info,\n-     we must split them before we compute the address/length info.  */\n-\n-  for (insn = NEXT_INSN (first); insn; insn = NEXT_INSN (insn))\n-    if (INSN_P (insn))\n-      {\n-\trtx old = insn;\n-\t/* Don't split the insn if it has been deleted.  */\n-\tif (! INSN_DELETED_P (old))\n-\t  insn = try_split (PATTERN (old), old, 1);\n-\t/* When not optimizing, the old insn will be still left around\n-\t   with only the 'deleted' bit set.  Transform it into a note\n-\t   to avoid confusion of subsequent processing.  */\n-\tif (INSN_DELETED_P (old))\n-\t  {\n-\t    PUT_CODE (old, NOTE);\n-\t    NOTE_LINE_NUMBER (old) = NOTE_INSN_DELETED;\n-\t    NOTE_SOURCE_FILE (old) = 0;\n-\t  }\n-      }\n #endif\n \n   /* We must do some computations even when not actually shortening, in"}, {"sha": "cdfe697b784b2851403d2b22c9d921851f839e46", "filename": "gcc/function.c", "status": "modified", "additions": 21, "deletions": 38, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/932f084749dd624f549cddd5e07eb38727c59faf/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/932f084749dd624f549cddd5e07eb38727c59faf/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=932f084749dd624f549cddd5e07eb38727c59faf", "patch": "@@ -6542,37 +6542,10 @@ diddle_return_value (doit, arg)\n      void *arg;\n {\n   rtx outgoing = current_function_return_rtx;\n-  int pcc;\n \n   if (! outgoing)\n     return;\n \n-  pcc = (current_function_returns_struct\n-\t || current_function_returns_pcc_struct);\n-\n-  if ((GET_CODE (outgoing) == REG\n-       && REGNO (outgoing) >= FIRST_PSEUDO_REGISTER)\n-      || pcc)\n-    {\n-      tree type = TREE_TYPE (DECL_RESULT (current_function_decl));\n-\n-      /* A PCC-style return returns a pointer to the memory in which\n-\t the structure is stored.  */\n-      if (pcc)\n-\ttype = build_pointer_type (type);\n-\n-#ifdef FUNCTION_OUTGOING_VALUE\n-      outgoing = FUNCTION_OUTGOING_VALUE (type, current_function_decl);\n-#else\n-      outgoing = FUNCTION_VALUE (type, current_function_decl);\n-#endif\n-      /* If this is a BLKmode structure being returned in registers, then use\n-\t the mode computed in expand_return.  */\n-      if (GET_MODE (outgoing) == BLKmode)\n-\tPUT_MODE (outgoing, GET_MODE (current_function_return_rtx));\n-      REG_FUNCTION_VALUE_P (outgoing) = 1;\n-    }\n-\n   if (GET_CODE (outgoing) == REG)\n     (*doit) (outgoing, arg);\n   else if (GET_CODE (outgoing) == PARALLEL)\n@@ -6641,6 +6614,7 @@ expand_function_end (filename, line, end_bindings)\n      int end_bindings;\n {\n   tree link;\n+  rtx clobber_after;\n \n #ifdef TRAMPOLINE_TEMPLATE\n   static rtx initial_trampoline;\n@@ -6787,17 +6761,11 @@ expand_function_end (filename, line, end_bindings)\n      registers so that they are not propogated live to the rest of\n      the function.  This can only happen with functions that drop\n      through; if there had been a return statement, there would\n-     have either been a return rtx, or a jump to the return label.  */\n-  {\n-    rtx before, after;\n-    \n-    before = get_last_insn ();\n-    clobber_return_register ();\n-    after = get_last_insn ();\n-    \n-    if (before != after)\n-      cfun->x_clobber_return_insn = after;\n-  }\n+     have either been a return rtx, or a jump to the return label.\n+\n+     We delay actual code generation after the current_function_value_rtx\n+     is computed.  */\n+  clobber_after = get_last_insn ();\n \n   /* Output the label for the actual return from the function,\n      if one is expected.  This happens either because a function epilogue\n@@ -6946,6 +6914,21 @@ expand_function_end (filename, line, end_bindings)\n      communicate between __builtin_eh_return and the epilogue.  */\n   expand_eh_return ();\n \n+  /* Emit the actual code to clobber return register.  */\n+  {\n+    rtx seq, after;\n+    \n+    start_sequence ();\n+    clobber_return_register ();\n+    seq = gen_sequence ();\n+    end_sequence ();\n+\n+    after = emit_insn_after (seq, clobber_after);\n+    \n+    if (clobber_after != after)\n+      cfun->x_clobber_return_insn = after;\n+  }\n+\n   /* ??? This should no longer be necessary since stupid is no longer with\n      us, but there are some parts of the compiler (eg reload_combine, and\n      sh mach_dep_reorg) that still try and compute their own lifetime info"}, {"sha": "0e197cc2581de7ef80fa7d43947acaad50810ed5", "filename": "gcc/toplev.c", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/932f084749dd624f549cddd5e07eb38727c59faf/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/932f084749dd624f549cddd5e07eb38727c59faf/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=932f084749dd624f549cddd5e07eb38727c59faf", "patch": "@@ -3685,18 +3685,16 @@ rest_of_compilation (decl)\n     }\n #endif\n \n-#ifndef STACK_REGS\n-  /* ??? Do this before shorten branches so that we aren't creating\n-     insns too late and fail sanity checks in final. */\n-  convert_to_eh_region_ranges ();\n-#endif\n-\n-  /* Shorten branches.\n-\n-     Note this must run before reg-stack because of death note (ab)use\n-     in the ia32 backend.  */\n   timevar_push (TV_SHORTEN_BRANCH);\n-  shorten_branches (get_insns ());\n+  if (0\n+#ifdef HAVE_ATTR_length\n+      || 1\n+#endif\n+#ifdef STACK_REGS\n+      || 1\n+#endif\n+      )\n+    split_all_insns (0);\n   timevar_pop (TV_SHORTEN_BRANCH);\n \n #ifdef STACK_REGS\n@@ -3709,9 +3707,14 @@ rest_of_compilation (decl)\n   timevar_pop (TV_REG_STACK);\n \n   ggc_collect ();\n+#endif\n \n   convert_to_eh_region_ranges ();\n-#endif\n+\n+  /* Shorten branches.  */\n+  timevar_push (TV_SHORTEN_BRANCH);\n+  shorten_branches (get_insns ());\n+  timevar_pop (TV_SHORTEN_BRANCH);\n \n   current_function_nothrow = nothrow_function_p ();\n   if (current_function_nothrow)"}]}