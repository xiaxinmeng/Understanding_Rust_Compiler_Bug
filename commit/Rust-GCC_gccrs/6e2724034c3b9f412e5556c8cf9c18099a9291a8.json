{"sha": "6e2724034c3b9f412e5556c8cf9c18099a9291a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUyNzI0MDM0YzNiOWY0MTJlNTU1NmM4Y2Y5YzE4MDk5YTkyOTFhOA==", "commit": {"author": {"name": "Paul Eggert", "email": "eggert@gnu.org", "date": "1997-03-26T20:35:20Z"}, "committer": {"name": "Paul Eggert", "email": "eggert@gnu.org", "date": "1997-03-26T20:35:20Z"}, "message": "Formerly cpp.texi.~29~\n\nFrom-SVN: r13806", "tree": {"sha": "435f78ffa6c5f06dad0eb37e799b3f98ccff9a47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/435f78ffa6c5f06dad0eb37e799b3f98ccff9a47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e2724034c3b9f412e5556c8cf9c18099a9291a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e2724034c3b9f412e5556c8cf9c18099a9291a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e2724034c3b9f412e5556c8cf9c18099a9291a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e2724034c3b9f412e5556c8cf9c18099a9291a8/comments", "author": null, "committer": null, "parents": [{"sha": "2a9fb5489fc58447f5a69fa7a607d08dd263ac4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a9fb5489fc58447f5a69fa7a607d08dd263ac4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a9fb5489fc58447f5a69fa7a607d08dd263ac4a"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "c3164b97b02e062955efc9d575981be96c561584", "filename": "gcc/cpp.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2724034c3b9f412e5556c8cf9c18099a9291a8/gcc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2724034c3b9f412e5556c8cf9c18099a9291a8/gcc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.texi?ref=6e2724034c3b9f412e5556c8cf9c18099a9291a8", "patch": "@@ -963,9 +963,9 @@ execute with the same effect regardless.\n @findex __CHAR_UNSIGNED__\n This macro is defined if and only if the data type @code{char} is\n unsigned on the target machine.  It exists to cause the standard\n-header file @file{limit.h} to work correctly.  It is bad practice\n+header file @file{limits.h} to work correctly.  It is bad practice\n to refer to this macro yourself; instead, refer to the standard\n-macros defined in @file{limit.h}.  The preprocessor uses\n+macros defined in @file{limits.h}.  The preprocessor uses\n this macro to determine whether or not to sign-extend large character\n constants written in octal; see @ref{#if Directive,,The @samp{#if} Directive}.\n "}]}