{"sha": "851ee5f43c954f1831ae23ec45347ce5441ebab5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUxZWU1ZjQzYzk1NGYxODMxYWUyM2VjNDUzNDdjZTU0NDFlYmFiNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-05-26T11:01:42Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-05-26T11:01:42Z"}, "message": "gensupport.h (compute_test_codes): Declare.\n\ngcc/\n\t* gensupport.h (compute_test_codes): Declare.\n\t* gensupport.c (compute_predicate_codes): Rename to...\n\t(compute_test_codes): ...this.  Generalize error message.\n\t(process_define_predicate): Update accordingly.\n\t* genpreds.c (compute_maybe_allows): Delete.\n\t(add_constraint): Use compute_test_codes to determine whether\n\tsomething can accept a SUBREG, REG or MEM.\n\nFrom-SVN: r223687", "tree": {"sha": "fbc57b19f37c4860b50243a95bee808045aad0b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbc57b19f37c4860b50243a95bee808045aad0b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/851ee5f43c954f1831ae23ec45347ce5441ebab5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/851ee5f43c954f1831ae23ec45347ce5441ebab5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/851ee5f43c954f1831ae23ec45347ce5441ebab5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/851ee5f43c954f1831ae23ec45347ce5441ebab5/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3a37ecec8934dc378bfce06d9ea2325a98159f43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a37ecec8934dc378bfce06d9ea2325a98159f43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a37ecec8934dc378bfce06d9ea2325a98159f43"}], "stats": {"total": 78, "additions": 33, "deletions": 45}, "files": [{"sha": "c5f8f5e4dde939dfb48f0749aef0e705cb8e99cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/851ee5f43c954f1831ae23ec45347ce5441ebab5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/851ee5f43c954f1831ae23ec45347ce5441ebab5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=851ee5f43c954f1831ae23ec45347ce5441ebab5", "patch": "@@ -1,3 +1,13 @@\n+2015-05-26  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gensupport.h (compute_test_codes): Declare.\n+\t* gensupport.c (compute_predicate_codes): Rename to...\n+\t(compute_test_codes): ...this.  Generalize error message.\n+\t(process_define_predicate): Update accordingly.\n+\t* genpreds.c (compute_maybe_allows): Delete.\n+\t(add_constraint): Use compute_test_codes to determine whether\n+\tsomething can accept a SUBREG, REG or MEM.\n+\n 2015-05-26  Torvald Riegel  <triegel@redhat.com>\n \n \t* doc/extend.texi (__atomic Builtins): Use 'memory order' instead of"}, {"sha": "dd14e20449aeae58dad87a2e8e259f3cd3f92877", "filename": "gcc/genpreds.c", "status": "modified", "additions": 10, "deletions": 33, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/851ee5f43c954f1831ae23ec45347ce5441ebab5/gcc%2Fgenpreds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/851ee5f43c954f1831ae23ec45347ce5441ebab5/gcc%2Fgenpreds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpreds.c?ref=851ee5f43c954f1831ae23ec45347ce5441ebab5", "patch": "@@ -716,34 +716,6 @@ mangle (const char *name)\n   return XOBFINISH (rtl_obstack, const char *);\n }\n \n-/* Return a bitmask, bit 1 if EXP maybe allows a REG/SUBREG, 2 if EXP\n-   maybe allows a MEM.  Bits should be clear only when we are sure it\n-   will not allow a REG/SUBREG or a MEM.  */\n-static int\n-compute_maybe_allows (rtx exp)\n-{\n-  switch (GET_CODE (exp))\n-    {\n-    case IF_THEN_ELSE:\n-      /* Conservative answer is like IOR, of the THEN and ELSE branches.  */\n-      return compute_maybe_allows (XEXP (exp, 1))\n-\t     | compute_maybe_allows (XEXP (exp, 2));\n-    case AND:\n-      return compute_maybe_allows (XEXP (exp, 0))\n-\t     & compute_maybe_allows (XEXP (exp, 1));\n-    case IOR:\n-      return compute_maybe_allows (XEXP (exp, 0))\n-\t     | compute_maybe_allows (XEXP (exp, 1));\n-    case MATCH_CODE:\n-      if (*XSTR (exp, 1) == '\\0')\n-\treturn (strstr (XSTR (exp, 0), \"reg\") != NULL ? 1 : 0)\n-\t       | (strstr (XSTR (exp, 0), \"mem\") != NULL ? 2 : 0);\n-      /* FALLTHRU */\n-    default:\n-      return 3;\n-    }\n-}\n-\n /* Add one constraint, of any sort, to the tables.  NAME is its name;\n    REGCLASS is the register class, if any; EXP is the expression to\n    test, if any;  IS_MEMORY and IS_ADDRESS indicate memory and address\n@@ -899,12 +871,17 @@ add_constraint (const char *name, const char *regclass,\n   c->is_extra = !(regclass || is_const_int || is_const_dbl);\n   c->is_memory = is_memory;\n   c->is_address = is_address;\n-  int maybe_allows = 3;\n+  c->maybe_allows_reg = true;\n+  c->maybe_allows_mem = true;\n   if (exp)\n-    maybe_allows = compute_maybe_allows (exp);\n-  c->maybe_allows_reg = (maybe_allows & 1) != 0;\n-  c->maybe_allows_mem = (maybe_allows & 2) != 0;\n-\n+    {\n+      char codes[NUM_RTX_CODE];\n+      compute_test_codes (exp, lineno, codes);\n+      if (!codes[REG] && !codes[SUBREG])\n+\tc->maybe_allows_reg = false;\n+      if (!codes[MEM])\n+\tc->maybe_allows_mem = false;\n+    }\n   c->next_this_letter = *slot;\n   *slot = c;\n "}, {"sha": "d828051eb2bb4ac576e39397af79a94f278289bb", "filename": "gcc/gensupport.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/851ee5f43c954f1831ae23ec45347ce5441ebab5/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/851ee5f43c954f1831ae23ec45347ce5441ebab5/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=851ee5f43c954f1831ae23ec45347ce5441ebab5", "patch": "@@ -204,8 +204,8 @@ static char did_you_mean_codes[NUM_RTX_CODE];\n    predicate expression EXP, writing the result to CODES.  LINENO is\n    the line number on which the directive containing EXP appeared.  */\n \n-static void\n-compute_predicate_codes (rtx exp, int lineno, char codes[NUM_RTX_CODE])\n+void\n+compute_test_codes (rtx exp, int lineno, char *codes)\n {\n   char op0_codes[NUM_RTX_CODE];\n   char op1_codes[NUM_RTX_CODE];\n@@ -215,29 +215,29 @@ compute_predicate_codes (rtx exp, int lineno, char codes[NUM_RTX_CODE])\n   switch (GET_CODE (exp))\n     {\n     case AND:\n-      compute_predicate_codes (XEXP (exp, 0), lineno, op0_codes);\n-      compute_predicate_codes (XEXP (exp, 1), lineno, op1_codes);\n+      compute_test_codes (XEXP (exp, 0), lineno, op0_codes);\n+      compute_test_codes (XEXP (exp, 1), lineno, op1_codes);\n       for (i = 0; i < NUM_RTX_CODE; i++)\n \tcodes[i] = TRISTATE_AND (op0_codes[i], op1_codes[i]);\n       break;\n \n     case IOR:\n-      compute_predicate_codes (XEXP (exp, 0), lineno, op0_codes);\n-      compute_predicate_codes (XEXP (exp, 1), lineno, op1_codes);\n+      compute_test_codes (XEXP (exp, 0), lineno, op0_codes);\n+      compute_test_codes (XEXP (exp, 1), lineno, op1_codes);\n       for (i = 0; i < NUM_RTX_CODE; i++)\n \tcodes[i] = TRISTATE_OR (op0_codes[i], op1_codes[i]);\n       break;\n     case NOT:\n-      compute_predicate_codes (XEXP (exp, 0), lineno, op0_codes);\n+      compute_test_codes (XEXP (exp, 0), lineno, op0_codes);\n       for (i = 0; i < NUM_RTX_CODE; i++)\n \tcodes[i] = TRISTATE_NOT (op0_codes[i]);\n       break;\n \n     case IF_THEN_ELSE:\n       /* a ? b : c  accepts the same codes as (a & b) | (!a & c).  */\n-      compute_predicate_codes (XEXP (exp, 0), lineno, op0_codes);\n-      compute_predicate_codes (XEXP (exp, 1), lineno, op1_codes);\n-      compute_predicate_codes (XEXP (exp, 2), lineno, op2_codes);\n+      compute_test_codes (XEXP (exp, 0), lineno, op0_codes);\n+      compute_test_codes (XEXP (exp, 1), lineno, op1_codes);\n+      compute_test_codes (XEXP (exp, 2), lineno, op2_codes);\n       for (i = 0; i < NUM_RTX_CODE; i++)\n \tcodes[i] = TRISTATE_OR (TRISTATE_AND (op0_codes[i], op1_codes[i]),\n \t\t\t\tTRISTATE_AND (TRISTATE_NOT (op0_codes[i]),\n@@ -321,7 +321,7 @@ compute_predicate_codes (rtx exp, int lineno, char codes[NUM_RTX_CODE])\n \n     default:\n       error_with_line (lineno,\n-\t\t       \"'%s' cannot be used in a define_predicate expression\",\n+\t\t       \"'%s' cannot be used in predicates or constraints\",\n \t\t       GET_RTX_NAME (GET_CODE (exp)));\n       memset (codes, I, NUM_RTX_CODE);\n       break;\n@@ -373,7 +373,7 @@ process_define_predicate (rtx desc, int lineno)\n   if (GET_CODE (desc) == DEFINE_SPECIAL_PREDICATE)\n     pred->special = true;\n \n-  compute_predicate_codes (XEXP (desc, 1), lineno, codes);\n+  compute_test_codes (XEXP (desc, 1), lineno, codes);\n \n   for (i = 0; i < NUM_RTX_CODE; i++)\n     if (codes[i] != N)"}, {"sha": "0f3f2eff0313c2cac50c074dd7ab3c6af26165bf", "filename": "gcc/gensupport.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/851ee5f43c954f1831ae23ec45347ce5441ebab5/gcc%2Fgensupport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/851ee5f43c954f1831ae23ec45347ce5441ebab5/gcc%2Fgensupport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.h?ref=851ee5f43c954f1831ae23ec45347ce5441ebab5", "patch": "@@ -109,5 +109,6 @@ struct pattern_stats\n };\n \n extern void get_pattern_stats (struct pattern_stats *ranges, rtvec vec);\n+extern void compute_test_codes (rtx, int, char *);\n \n #endif /* GCC_GENSUPPORT_H */"}]}