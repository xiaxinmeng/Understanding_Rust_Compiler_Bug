{"sha": "44cab2d8fd777450953ee1c1dfeba6f67db13869", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRjYWIyZDhmZDc3NzQ1MDk1M2VlMWMxZGZlYmE2ZjY3ZGIxMzg2OQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-07T00:16:39Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-07T00:16:39Z"}, "message": "Daily bump.", "tree": {"sha": "469844211e5522b7059c363941b1353d21e8bb60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/469844211e5522b7059c363941b1353d21e8bb60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44cab2d8fd777450953ee1c1dfeba6f67db13869", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44cab2d8fd777450953ee1c1dfeba6f67db13869", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44cab2d8fd777450953ee1c1dfeba6f67db13869", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44cab2d8fd777450953ee1c1dfeba6f67db13869/comments", "author": null, "committer": null, "parents": [{"sha": "1a0f964e4d100a39eb388ea68b71d870f5de2049", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a0f964e4d100a39eb388ea68b71d870f5de2049", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a0f964e4d100a39eb388ea68b71d870f5de2049"}], "stats": {"total": 649, "additions": 648, "deletions": 1}, "files": [{"sha": "8a8325d5a70e3a59d94dcaa7df27e9cbcf343bbe", "filename": "ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cab2d8fd777450953ee1c1dfeba6f67db13869/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cab2d8fd777450953ee1c1dfeba6f67db13869/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=44cab2d8fd777450953ee1c1dfeba6f67db13869", "patch": "@@ -1,3 +1,11 @@\n+2020-11-06  Martin Uecker  <muecker@gwdg.de>\n+\n+\t* MAINTAINERS: Update my email address.\n+\n+2020-11-06  Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\t* MAINTAINERS (Write After Approval): Add myself.\n+\n 2020-10-06  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR target/97302"}, {"sha": "dbdf5a405125ecda725dcb852962800f5e999961", "filename": "contrib/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cab2d8fd777450953ee1c1dfeba6f67db13869/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cab2d8fd777450953ee1c1dfeba6f67db13869/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=44cab2d8fd777450953ee1c1dfeba6f67db13869", "patch": "@@ -1,3 +1,9 @@\n+2020-11-06  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Add new check.\n+\t* gcc-changelog/test_email.py: Test it.\n+\t* gcc-changelog/test_patches.txt: Add new patch.\n+\n 2020-11-04  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_repository.py: Set strict=True"}, {"sha": "7cd090a7ec191cb21ad5d8fed9ccb372a64ce101", "filename": "gcc/ChangeLog", "status": "modified", "additions": 313, "deletions": 0, "changes": 313, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cab2d8fd777450953ee1c1dfeba6f67db13869/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cab2d8fd777450953ee1c1dfeba6f67db13869/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44cab2d8fd777450953ee1c1dfeba6f67db13869", "patch": "@@ -1,3 +1,316 @@\n+2020-11-06  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.md (@tablejump<mode>_normal): Don't abuse\n+\toperands[].\n+\t(@tablejump<mode>_nospec): Ditto.\n+\n+2020-11-06  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.h (BIGGEST_ALIGNMENT): Revert previous commit\n+\tso as not to break the ABI.\n+\t* config/rs6000/rs6000-call.c (rs6000_init_builtins): Set the ABI\n+\tmandated alignment for __vector_pair and __vector_quad types.\n+\n+2020-11-06  Jeff Law  <law@torsion.usersys.redhat.com>\n+\n+\tPR target/91489\n+\t* config/i386/i386.md (simple_return): Also check\n+\tfor ms_hook_prologue function attribute.\n+\t* config/i386/i386.c (ix86_can_use_return_insn_p):\n+\tAlso check for ms_hook_prologue function attribute.\n+\t* config/i386/i386-protos.h (ix86_function_ms_hook_prologue): Declare.\n+\n+2020-11-06  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/96933\n+\t* config/rs6000/rs6000.c (rs6000_expand_vector_init): Use\n+\tTARGET_POWERPC64 instead of TARGET_64BIT.\n+\n+2020-11-06  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* builtins.def (BUILT_IN_NANSD32, BUILT_IN_NANSD64)\n+\t(BUILT_IN_NANSD128): New built-in functions.\n+\t* fold-const-call.c (fold_const_call): Handle the new built-in\n+\tfunctions.\n+\t* doc/extend.texi (__builtin_nansd32, __builtin_nansd64)\n+\t(__builtin_nansd128): Document.\n+\t* doc/sourcebuild.texi (Effective-Target Keywords): Document\n+\tfenv_exceptions_dfp.\n+\n+2020-11-06  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\n+\t* tree-ssa-uninit.c (find_var_cmp_const): New function.\n+\t(use_pred_not_overlap_with_undef_path_pred): Call above.\n+\n+2020-11-06  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/darwin-c.c: Allow for Darwin20 to correspond to macOS 11.\n+\t* config/darwin-driver.c: Likewise.\n+\n+2020-11-06  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-pre.c (expr_pred_trans_d): Modify so elements\n+\tare embedded rather than allocated.  Remove hashval member,\n+\tmake all members integers.\n+\t(phi_trans_add): Adjust accordingly.\n+\t(phi_translate): Likewise.  Deal with re-allocation\n+\tof the table.\n+\n+2020-11-06  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/97737\n+\tPR tree-optimization/97741\n+\t* gimple-range.cc: (gimple_ranger::range_of_stmt): Intersect newly\n+\tcalculated ranges with the existing known global range.\n+\n+2020-11-06  Darius Galis  <darius.galis@cyberthorstudios.com>\n+\n+\t* config/rx/rx.md (CTRLREG_PC): Add.\n+\t* config/rx/rx.c (CTRLREG_PC): Add\n+\t(rx_expand_builtin_mvtc): Add warning: PC register cannot\n+\tbe used as dest.\n+\n+2020-11-06  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* tree.h (DECL_IS_BUILTIN): Rename to ...\n+\t(DECL_IS_UNDECLARED_BUILTIN): ... here.  No need to use SOURCE_LOCUS.\n+\t* calls.c (maybe_warn_alloc_args_overflow): Adjust for rename.\n+\t* cfgexpand.c (pass_expand::execute): Likewise.\n+\t* dwarf2out.c (base_type_die, is_naming_typedef_decl): Likewise.\n+\t* godump.c (go_decl, go_type_decl): Likewise.\n+\t* print-tree.c (print_decl_identifier): Likewise.\n+\t* tree-pretty-print.c (dump_generic_node): Likewise.\n+\t* tree-ssa-ccp.c (pass_post_ipa_warn::execute): Likewise.\n+\t* xcoffout.c (xcoff_assign_fundamental_type_number): Likewise.\n+\n+2020-11-06  David Candler  <david.candler@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c\n+\t(TYPES_SHIFT2IMM): Add define.\n+\t(TYPES_SHIFT2IMM_UUSS): Add define.\n+\t(TYPES_USHIFT2IMM): Add define.\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_<sur>q<r>shr<u>n2_n<mode>): Add new insn for upper saturating shift right.\n+\t* config/aarch64/aarch64-simd-builtins.def: Add intrinsics.\n+\t* config/aarch64/arm_neon.h:\n+\t(vqrshrn_high_n_s16): Expand using intrinsic rather than inline asm.\n+\t(vqrshrn_high_n_s32): Likewise.\n+\t(vqrshrn_high_n_s64): Likewise.\n+\t(vqrshrn_high_n_u16): Likewise.\n+\t(vqrshrn_high_n_u32): Likewise.\n+\t(vqrshrn_high_n_u64): Likewise.\n+\t(vqrshrun_high_n_s16): Likewise.\n+\t(vqrshrun_high_n_s32): Likewise.\n+\t(vqrshrun_high_n_s64): Likewise.\n+\t(vqshrn_high_n_s16): Likewise.\n+\t(vqshrn_high_n_s32): Likewise.\n+\t(vqshrn_high_n_s64): Likewise.\n+\t(vqshrn_high_n_u16): Likewise.\n+\t(vqshrn_high_n_u32): Likewise.\n+\t(vqshrn_high_n_u64): Likewise.\n+\t(vqshrun_high_n_s16): Likewise.\n+\t(vqshrun_high_n_s32): Likewise.\n+\t(vqshrun_high_n_s64): Likewise.\n+\n+2020-11-06  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-modes.def (VNx2BF, VNx4BF): Adjust nunits\n+\tand alignment based on the current VG.\n+\t* config/aarch64/iterators.md (SVE_ALL, SVE_24, SVE_2, SVE_4): Add\n+\tpartial SVE BF modes.\n+\t(UNSPEC_REVBHW): New unspec.\n+\t(Vetype, Vesize, Vctype, VEL, Vel, vwcore, V_INT_CONTAINER)\n+\t(v_int_container, VPRED, vpred): Handle partial SVE BF modes.\n+\t(container_bits, Vcwtype): New mode attributes.\n+\t* config/aarch64/aarch64-sve.md\n+\t(@aarch64_sve_revbhw_<SVE_ALL:mode><PRED_HSD:mode>): New pattern.\n+\t(@aarch64_sve_dup_lane<mode>): Extended from SVE_FULL to SVE_ALL.\n+\t(@aarch64_sve_rev<mode>, @aarch64_sve_<perm_insn><mode>): Likewise.\n+\t(@aarch64_sve_ext<mode>): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_classify_vector_mode): Handle\n+\tE_VNx2BFmode and E_VNx4BFmode.\n+\t(aarch64_evpc_rev_local): Base the analysis on the container size\n+\tinstead of the element size.  Use the new aarch64_sve_revbhw\n+\tpatterns for SVE.\n+\t(aarch64_evpc_dup): Handle partial SVE data modes.  Use the\n+\tcontainer size instead of the element size when applying the\n+\tSVE immediate limit.  Fix a previously incorrect bounds check.\n+\t(aarch64_expand_vec_perm_const_1): Handle partial SVE data modes.\n+\n+2020-11-06  Martin Liska  <mliska@suse.cz>\n+\n+\t* common.opt: Add new -fbit-tests option.\n+\t* doc/invoke.texi: Document the option.\n+\t* tree-switch-conversion.c (bit_test_cluster::find_bit_tests):\n+\tUse the option.\n+\t* tree-switch-conversion.h (is_enabled): New function.\n+\n+2020-11-06  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.h (get_max_constant_value_id): Declare.\n+\t(get_next_constant_value_id): Likewise.\n+\t(value_id_constant_p): Inline and simplify.\n+\t* tree-ssa-sccvn.c (constant_value_ids): Remove.\n+\t(next_constant_value_id): Add.\n+\t(get_or_alloc_constant_value_id): Adjust.\n+\t(value_id_constant_p): Remove definition.\n+\t(get_max_constant_value_id): Define.\n+\t(get_next_value_id): Add assert for overflow.\n+\t(get_next_constant_value_id): Define.\n+\t(run_rpo_vn): Adjust.\n+\t(free_rpo_vn): Likewise.\n+\t(do_rpo_vn): Initialize next_constant_value_id.\n+\t* tree-ssa-pre.c (constant_value_expressions): New.\n+\t(add_to_value): Split into constant/non-constant value\n+\thandling.  Avoid exact re-allocation.\n+\t(vn_valnum_from_value_id): Adjust.\n+\t(phi_translate_1): Remove spurious exact re-allocation.\n+\t(bitmap_find_leader): Adjust.  Make sure we return\n+\ta CONSTANT value for a constant value id.\n+\t(do_pre_regular_insertion): Use 2 auto-elements for avail.\n+\t(do_pre_partial_partial_insertion): Likewise.\n+\t(init_pre): Allocate constant_value_expressions.\n+\t(fini_pre): Release constant_value_expressions.\n+\n+2020-11-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97706\n+\t* tree-vect-patterns.c (possible_vector_mask_operation_p):\n+\tPHIs are possible mask operations.\n+\t(vect_determine_mask_precision): Handle PHIs.\n+\t(vect_determine_precisions): Walk PHIs in BB analysis.\n+\n+2020-11-06  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_analyze_slp): Pass down the\n+\tSLP graph entry kind.\n+\t(vect_analyze_slp_instance): Simplify.\n+\t(vect_build_slp_instance): Adjust.\n+\t(vect_slp_check_for_constructors): Perform more\n+\teligibility checks here.\n+\n+2020-11-06  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-ref.h (enum ipa_ref_use): Remove GTY marker.\n+\t(struct ipa_ref): Remove GTY marker; reorder for better packing.\n+\t(struct ipa_ref_list): Remove GTY marker; turn references\n+\tnad referring to va_heap, vl_ptr vectors; update accesors.\n+\t* cgraph.h (symtab_node::iterate_reference): Update.\n+\t* ipa-ref.c (ipa_ref::remove_reference): Update.\n+\t* symtab.c (symtab_node::create_reference): Update.\n+\t(symtab_node::remove_all_references): Update.\n+\t(symtab_node::resolve_alias): Update.\n+\n+2020-11-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* ipa-modref-tree.h: Fix comment typos.\n+\t* ipa-modref.c: Likewise.\n+\n+2020-11-06  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/s390.c (s390_option_override_internal): Remove\n+\toverride of inline params.\n+\n+2020-11-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97706\n+\t* tree-vect-patterns.c (vect_determine_mask_precision):\n+\tRemove worklist operation.\n+\t(vect_determine_stmt_precisions): Do not call\n+\tvect_determine_mask_precision here.\n+\t(vect_determine_precisions): Compute mask precision\n+\tin a forward walk.\n+\n+2020-11-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97732\n+\t* tree-vect-loop.c (vectorizable_induction): Convert the\n+\tinit elements to the vector component type.\n+\t* gimple-fold.c (gimple_build_vector): Use CONSTANT_CLASS_P\n+\trather than TREE_CONSTANT to determine if elements are\n+\teligible for VECTOR_CSTs.\n+\n+2020-11-06  Jan Hubicka  <jh@suse.cz>\n+\n+\t* attr-fnspec.h (attr_fnspec::get_str): New accessor\n+\t* ipa-fnsummary.c (read_ipa_call_summary): Store also parm info\n+\tfor builtins.\n+\t* ipa-modref.c (class fnspec_summary): New type.\n+\t(class fnspec_summaries_t): New type.\n+\t(modref_summary::modref_summary): Initialize writes_errno.\n+\t(struct modref_summary_lto): Add writes_errno.\n+\t(modref_summary_lto::modref_summary_lto): Initialize writes_errno.\n+\t(modref_summary::dump): Check for NULL pointers.\n+\t(modref_summary_lto::dump): Dump writes_errno.\n+\t(collapse_loads): Move up in source file.\n+\t(collapse_stores): New function.\n+\t(process_fnspec): Handle also internal calls.\n+\t(analyze_call): Likewise.\n+\t(analyze_stmt): Store fnspec string if needed.\n+\t(analyze_function): Initialize fnspec_sumarries.\n+\t(modref_summaries_lto::duplicate): Copy writes_errno.\n+\t(modref_write): Store writes_errno and fnspec summaries.\n+\t(read_section): Read writes_errno and fnspec summaries.\n+\t(modref_read): Initialize fnspec summaries.\n+\t(update_signature): Fix formating.\n+\t(compute_parm_map): Return true if sucessful.\n+\t(get_parm_type): New function.\n+\t(get_access_for_fnspec): New function.\n+\t(propagate_unknown_call): New function.\n+\t(modref_propagate_in_scc): Use it.\n+\t(pass_ipa_modref::execute): Delete fnspec_summaries.\n+\t(ipa_modref_c_finalize): Delete fnspec_summaries.\n+\t* ipa-prop.c: Include attr-fnspec.h.\n+\t(ipa_compute_jump_functions_for_bb):  Also compute jump functions\n+\tfor functions with fnspecs.\n+\t(ipa_read_edge_info): Read jump functions for builtins.\n+\n+2020-11-06  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-fnsummary.h (class size_time_entry): Do not GTY annotate.\n+\t(class ipa_fnsummary): Turn size_time_table to auto_vec and\n+\tcall_size_time_table to effecient vec; update constructors.\n+\t* ipa-fnsummary.c (ipa_fn_summary::account_size_time): Update.\n+\t(ipa_fn_summary::~ipa_fn_summary): Update.\n+\t(ipa_fn_summary_t::duplicate): Update.\n+\t(ipa_dump_fn_summary): Update.\n+\t(set_switch_stmt_execution_predicate): Update.\n+\t(analyze_function_body): Update.\n+\t(estimate_calls_size_and_time): Update.\n+\t(ipa_call_context::estimate_size_and_time): Update.\n+\t(ipa_merge_fn_summary_after_inlining): Update.\n+\t(ipa_update_overall_fn_summary): Update.\n+\t(inline_read_section): Update.\n+\t(ipa_fn_summary_write): Update.\n+\n+2020-11-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97733\n+\t* tree-vect-slp.c (vect_analyze_slp_instance): If less\n+\tthan two reductions were relevant or live do nothing.\n+\n+2020-11-06  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/97223\n+\t* match.pd (overflow detection and optimization): Handle conversions.\n+\n+2020-11-06  Eugene Rozenfeld  <erozen@microsoft.com>\n+\n+\t* match.pd (x >> x): New pattern.\n+\n+2020-11-06  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* common/config/riscv/riscv-common.c (riscv_implied_info):\n+\tAdd static and const.\n+\t(riscv_subset_list::handle_implied_ext): Add const due to\n+\triscv_implied_info changed to const.\n+\n+2020-11-06  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\tPR target/96307\n+\t* toplev.c (process_options): Remove param_asan_stack checking for kasan\n+\toption checking.\n+\n 2020-11-05  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/97675"}, {"sha": "55bedf8dcf4fc5e844c095c888662836dd7e533b", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cab2d8fd777450953ee1c1dfeba6f67db13869/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cab2d8fd777450953ee1c1dfeba6f67db13869/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=44cab2d8fd777450953ee1c1dfeba6f67db13869", "patch": "@@ -1 +1 @@\n-20201106\n+20201107"}, {"sha": "bfe0ccc990674813e412d6c644d9f9c169cc6afe", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cab2d8fd777450953ee1c1dfeba6f67db13869/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cab2d8fd777450953ee1c1dfeba6f67db13869/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=44cab2d8fd777450953ee1c1dfeba6f67db13869", "patch": "@@ -1,3 +1,30 @@\n+2020-11-06  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* c-objc.h (enum objc_property_attribute_group): New\n+\t(enum objc_property_attribute_kind): New.\n+\t(OBJC_PROPATTR_GROUP_MASK): New.\n+\t(struct property_attribute_info): Small class encapsulating\n+\tparser output from property attributes.\n+\t(objc_prop_attr_kind_for_rid): New\n+\t(objc_add_property_declaration): Simplify interface.\n+\t* stub-objc.c (enum rid): Dummy type.\n+\t(objc_add_property_declaration): Simplify interface.\n+\t(objc_prop_attr_kind_for_rid): New.\n+\n+2020-11-06  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-ada-spec.c (collect_ada_nodes): Rename\n+\tDECL_IS_BUILTIN->DECL_IS_UNDECLARED_BUILTIN.\n+\t(collect_ada_node): Likewise.\n+\t(dump_forward_type): Likewise.\n+\t* c-common.c (set_underlying_type): Rename\n+\tDECL_IS_BUILTIN->DECL_IS_UNDECLARED_BUILTIN.\n+\t(user_facing_original_type, c_common_finalize_early_debug): Likewise.\n+\n+2020-11-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-common.c (verify_sequence_points): Remove DEBUG_FUNCTION.\n+\n 2020-11-05  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/97675"}, {"sha": "933b343eed93b871cb61a8bf8bbe6b9b7564c86c", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cab2d8fd777450953ee1c1dfeba6f67db13869/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cab2d8fd777450953ee1c1dfeba6f67db13869/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=44cab2d8fd777450953ee1c1dfeba6f67db13869", "patch": "@@ -1,3 +1,25 @@\n+2020-11-06  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* c-parser.c (c_parser_objc_at_property_declaration):\n+\tImprove parsing fidelity. Associate better location info\n+\twith @property attributes.  Clean up the interface to\n+\tobjc_add_property_declaration ().\n+\n+2020-11-06  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-decl.c (diagnose_mismatched_decls): Rename\n+\tDECL_IS_BUILTIN->DECL_IS_UNDECLARED_BUILTIN.\n+\t(warn_if_shadowing, implicitly_declare, names_builtin_p)\n+\t(collect_source_refs): Likewise.\n+\t* c-typeck.c (inform_declaration, inform_for_arg)\n+\t(convert_for_assignment): Likewise.\n+\n+2020-11-06  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* c-parser.c (c_parser_omp_atomic): Add openacc parameter and update\n+\tOpenACC matching.\n+\t(c_parser_omp_construct): Update call.\n+\n 2020-11-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/97670"}, {"sha": "22fcaffb48783019de86c26a82c5c4610332d01e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cab2d8fd777450953ee1c1dfeba6f67db13869/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cab2d8fd777450953ee1c1dfeba6f67db13869/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=44cab2d8fd777450953ee1c1dfeba6f67db13869", "patch": "@@ -1,3 +1,51 @@\n+2020-11-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/81660\n+\t* except.c (can_convert_eh): Change the return type to bool.  If\n+\tthe type TO and FROM are the same, return true.\n+\n+2020-11-06  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* parser.c (cp_parser_objc_at_property_declaration):\n+\tImprove parsing fidelity. Associate better location info\n+\twith @property attributes.  Clean up the interface to\n+\tobjc_add_property_declaration ().\n+\n+2020-11-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/67453\n+\t* decl.c (duplicate_decls): Propagate DECL_ATTRIBUTES and\n+\tDECL_PRESERVE_P from olddecl to its clones if any.\n+\n+2020-11-06  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (DECL_UNDECLARED_BUILTIN_P): Delete.\n+\t* cp-objcp-common.c (names_bultin_p): Rename\n+\tDECL_IS_BUILTIN->DECL_IS_UNDECLARED_BUILTIN.\n+\t* decl.c (decls_match): Likewise.  Replace\n+\tDECL_UNDECLARED_BUILTIN_P with DECL_IS_UNDECLARED_BUILTIN.\n+\t(duplicate_decls): Likewise.\n+\t* decl2.c (collect_source_refs): Likewise.\n+\t* name-lookup.c (anticipated_builtin_p, print_binding_level)\n+\t(do_nonmember_using_decl): Likewise.\n+\t* pt.c (builtin_pack_fn_p): Likewise.\n+\t* typeck.c (error_args_num): Likewise.\n+\n+2020-11-06  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* parser.c (cp_parser_template_declaration): Adjust 'export' warning.\n+\t(cp_parser_explicit_specialization): Remove unneeded bool setting.\n+\n+2020-11-06  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree.c (cp_fix_function_decl_p): Do not access ipa_ref_list dirrectly.\n+\n+2020-11-06  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* parser.c (cp_parser_omp_atomic): Add openacc parameter and update\n+\tOpenACC matching.\n+\t(cp_parser_omp_construct): Update call.\n+\n 2020-11-05  Marek Polacek  <polacek@redhat.com>\n \n \t* except.c (check_handlers_1): Add auto_diagnostic_group."}, {"sha": "fa1e6114c177140db9ff63b90b18de1457717da1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cab2d8fd777450953ee1c1dfeba6f67db13869/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cab2d8fd777450953ee1c1dfeba6f67db13869/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=44cab2d8fd777450953ee1c1dfeba6f67db13869", "patch": "@@ -1,3 +1,18 @@\n+2020-11-06  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* openmp.c (oacc_is_parallel, resolve_oacc_params_in_parallel):\n+\tRemove.\n+\t(resolve_oacc_loop_blocks): Don't call the former.\n+\n+2020-11-06  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* openmp.c (gfc_match_oacc_atomic): No longer accept 'update capture'.\n+\n+2020-11-06  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/97652\n+\t* module.c (mio_symbol): Fix symbol name for pdt_type.\n+\n 2020-11-03  Nathan Sidwell  <nathan@acm.org>\n \n \t* cpp.c (gfc_cpp_add_dep): Only add dependency if we're recording"}, {"sha": "42294883607c6ee278e533dac16095fb0f7d045a", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cab2d8fd777450953ee1c1dfeba6f67db13869/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cab2d8fd777450953ee1c1dfeba6f67db13869/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=44cab2d8fd777450953ee1c1dfeba6f67db13869", "patch": "@@ -1,3 +1,8 @@\n+2020-11-06  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* go-gcc.cc (Gcc_backend::call_expression): Rename\n+\tDECL_IS_BUILTIN->DECL_IS_UNDECLARED_BUILTIN.\n+\n 2020-11-04  Ian Lance Taylor  <iant@golang.org>\n \n \t* go-lang.c (go_langhook_post_options): Disable"}, {"sha": "d33607422ea0fcdafada32c8dcc5013c32a64622", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cab2d8fd777450953ee1c1dfeba6f67db13869/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cab2d8fd777450953ee1c1dfeba6f67db13869/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=44cab2d8fd777450953ee1c1dfeba6f67db13869", "patch": "@@ -1,3 +1,8 @@\n+2020-11-06  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* lto-symtab.c (lto_symtab_merge_decls_1): Rename\n+\tDECL_IS_BUILTIN->DECL_IS_UNDECLARED_BUILTIN.\n+\n 2020-10-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR lto/96680"}, {"sha": "3fc841467c04063099efed721eddbb5c703183aa", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cab2d8fd777450953ee1c1dfeba6f67db13869/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cab2d8fd777450953ee1c1dfeba6f67db13869/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=44cab2d8fd777450953ee1c1dfeba6f67db13869", "patch": "@@ -1,3 +1,14 @@\n+2020-11-06  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* objc-act.c (start_class): Accept visibility attributes\n+\twithout warning.\n+\n+2020-11-06  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* objc-act.c (objc_prop_attr_kind_for_rid): New.\n+\t(objc_add_property_declaration): Adjust to consume the\n+\tparser output using a vector of parsed attributes.\n+\n 2020-11-04  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* objc-act.c (objc_non_constant_expr_p): New."}, {"sha": "c98f54eec7e8a96103ee87d0e1238284f99b0596", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cab2d8fd777450953ee1c1dfeba6f67db13869/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cab2d8fd777450953ee1c1dfeba6f67db13869/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=44cab2d8fd777450953ee1c1dfeba6f67db13869", "patch": "@@ -1,3 +1,168 @@\n+2020-11-06  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/pr64505.c: Run everywhere.  Use correct minimized\n+\ttest case.\n+\n+2020-11-06  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/mma-alignment.c: New test.\n+\n+2020-11-06  Jeff Law  <law@torsion.usersys.redhat.com>\n+\n+\tPR target/91489\n+\t* gcc.target/i386/ms_hook_prologue.c: Expand testcase\n+\tto reproduce PR target/91489 issue.\n+\n+2020-11-06  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_fenv_exceptions_dfp): New.\n+\t* gcc.dg/dfp/builtin-snan-1.c, gcc.dg/dfp/builtin-snan-2.c: New\n+\ttests.\n+\n+2020-11-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/81660\n+\t* g++.dg/warn/Wexceptions3.C: New test.\n+\t* g++.dg/eh/pr42859.C: Add dg-warning.\n+\t* g++.dg/torture/pr81659.C: Likewise.\n+\n+2020-11-06  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* obj-c++.dg/property/at-property-1.mm: Adjust expected\n+\tdiagnostics.\n+\t* obj-c++.dg/property/at-property-29.mm: Likewise.\n+\t* obj-c++.dg/property/at-property-4.mm: Likewise.\n+\t* obj-c++.dg/property/property-neg-2.mm: Likewise.\n+\t* objc.dg/property/at-property-1.m: Likewise.\n+\t* objc.dg/property/at-property-29.m: Likewise.\n+\t* objc.dg/property/at-property-4.m: Likewise.\n+\t* objc.dg/property/at-property-5.m: Likewise.\n+\t* objc.dg/property/property-neg-2.m: Likewise.\n+\n+2020-11-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/67453\n+\t* g++.dg/ext/attr-used-2.C: New test.\n+\n+2020-11-06  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* gcc.dg/darwin-minversion-link.c: Allow for Darwin19 (macOS 10.15)\n+\tand Darwin20 (macOS 11.0).\n+\n+2020-11-06  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr97737.c: New.\n+\t* gcc.dg/pr97741.c: New.\n+\n+2020-11-06  David Candler  <david.candler@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqrshrn_high_n.c: New testcase.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqrshrun_high_n.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqshrn_high_n.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqshrun_high_n.c: Likewise.\n+\t* gcc.target/aarch64/narrow_high-intrinsics.c: Update expected assembler\n+\tfor sqshrun2, sqrshrun2, sqshrn2, uqshrn2, sqrshrn2 and uqrshrn2.\n+\n+2020-11-06  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/dup_lane_2.c: New test.\n+\t* gcc.target/aarch64/sve/dup_lane_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/ext_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/rev_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/revhw_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/revhw_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/slp_perm_8.c: Likewise.\n+\t* gcc.target/aarch64/sve/trn1_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/trn2_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/uzp1_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/uzp2_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/zip1_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/zip2_2.c: Likewise.\n+\n+2020-11-06  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/tree-ssa/switch-4.c: New test.\n+\n+2020-11-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97706\n+\t* gcc.dg/vect/bb-slp-pr97706.c: New testcase.\n+\n+2020-11-06  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR gcov-profile/97461\n+\t* gcc.dg/tree-prof/pr97461.c: Return aligned memory.\n+\n+2020-11-06  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/loop-2-parallel-3.f95: Adjust.\n+\n+2020-11-06  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/loop-6.f95: Remove.\n+\n+2020-11-06  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/loop-5.f95: Remove.\n+\n+2020-11-06  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/goacc-gomp/goacc-gomp.exp: New.\n+\t* gfortran.dg/goacc-gomp/atomic.f90: New test.\n+\t* gfortran.dg/goacc/atomic.f90: New test.\n+\n+2020-11-06  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* c-c++-common/goacc-gomp/atomic.c: New test.\n+\t* c-c++-common/goacc/atomic.c: New test.\n+\n+2020-11-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97732\n+\t* gcc.dg/vect/bb-slp-pr97732.c: New testcase.\n+\n+2020-11-06  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gcc.target/i386/fentryname1.c: Add dg-require-profiling.\n+\t* gcc.target/i386/fentryname2.c: Likewise.\n+\t* gcc.target/i386/fentryname3.c: Likewise.\n+\t* gcc.target/i386/returninst1.c: Likewise.\n+\t* gcc.target/i386/returninst2.c: Likewise.\n+\t* gcc.target/i386/returninst3.c: Likewise.\n+\n+2020-11-06  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* g++.dg/pr57878.C: Add dg-require-effective-target fpic.\n+\t* g++.dg/pr65032.C: Likewise.\n+\t* g++.dg/pr84279.C: Likewise.\n+\t* g++.dg/inherit/thunk8.C: Likewise.\n+\t* g++.dg/opt/pr64411.C: Likewise.\n+\n+2020-11-06  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/ipa/modref-2.c: New test.\n+\t* gcc.dg/lto/modref-2_0.c: New test.\n+\n+2020-11-06  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.dg/no-strict-overflow-4.c: Adjust expected output.\n+\n+2020-11-06  Eugene Rozenfeld  <erozen@microsoft.com>\n+\n+\t* gcc.dg/self-right-shift.c: New test.\n+\n+2020-11-06  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\tPR target/96307\n+\t* gcc.dg/pr96307.c: New.\n+\t* gcc.target/riscv/pr96260.c: Move this test case from here to ...\n+\t* gcc.dg/pr96260.c: ... here.\n+\t* gcc.target/riscv/pr91441.c: Move this test case from here to ...\n+\t* gcc.dg/pr91441.c: ... here.\n+\t* lib/target-supports.exp (check_effective_target_no_fsanitize_address):\n+\tNew proc.\n+\n 2020-11-05  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/78209"}, {"sha": "696635eaeeb6ea8bb149dfac3f454bbe535d0281", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cab2d8fd777450953ee1c1dfeba6f67db13869/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cab2d8fd777450953ee1c1dfeba6f67db13869/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=44cab2d8fd777450953ee1c1dfeba6f67db13869", "patch": "@@ -1,3 +1,9 @@\n+2020-11-06  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* libcc1plugin.cc (address_rewriter): Rename\n+\tDECL_IS_BUILTIN->DECL_IS_UNDECLARED_BUILTIN.\n+\t* libcp1plugin.cc (supplement_binding): Likewise.\n+\n 2020-10-14  Nathan Sidwell  <nathan@acm.org>\n \n \t* libcp1plugin.cc (plugin_add_friend): Set DECL_UNIQUE_FRIEND_P."}, {"sha": "4c603c2de8c7a6bdafa7cfb1c4ebd6f0ea54cd5b", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cab2d8fd777450953ee1c1dfeba6f67db13869/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cab2d8fd777450953ee1c1dfeba6f67db13869/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=44cab2d8fd777450953ee1c1dfeba6f67db13869", "patch": "@@ -1,3 +1,14 @@\n+2020-11-06  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* include/cpplib.h (enum class CPP_time_kind): New.\n+\t(cpp_get_date): Declare.\n+\t* internal.h (struct cpp_reader): Replace source_date_epoch with\n+\ttime_stamp and time_stamp_kind.\n+\t* init.c (cpp_create_reader): Initialize them.\n+\t* macro.c (_cpp_builtin_macro_text): Use cpp_get_date.\n+\t(cpp_get_date): Broken out from _cpp_builtin_macro_text and\n+\tgenericized.\n+\n 2020-11-03  Nathan Sidwell  <nathan@acm.org>\n \n \t* lex.c (cpp_peek_token): Do not peek past CPP_PRAGMA."}, {"sha": "712a5a00647275cf3fe0427ea06856c106bf3456", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44cab2d8fd777450953ee1c1dfeba6f67db13869/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44cab2d8fd777450953ee1c1dfeba6f67db13869/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=44cab2d8fd777450953ee1c1dfeba6f67db13869", "patch": "@@ -1,3 +1,8 @@\n+2020-11-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.21): Tighten up patterns\n+\tfor basic_stringbuf that refer to __xfer_bufptrs.\n+\n 2020-11-05  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/25814"}]}