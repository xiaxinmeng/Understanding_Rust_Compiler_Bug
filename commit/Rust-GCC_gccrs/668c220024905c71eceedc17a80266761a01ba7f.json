{"sha": "668c220024905c71eceedc17a80266761a01ba7f", "node_id": "C_kwDOANBUbNoAKDY2OGMyMjAwMjQ5MDVjNzFlY2VlZGMxN2E4MDI2Njc2MWEwMWJhN2Y", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-05-11T10:35:18Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-05-17T16:13:45Z"}, "message": "libproc_macro: Remove has_suffix attribute\n\nThis variable was redundant with the empty string representation and\nmay have lead to desync between both.\n\nChangeLog:\n\n\t* libgrust/libproc_macro/literal.h: Remove has_suffix member\n\tattribute from Literal.\n\t* libgrust/libproc_macro/literal.cc: Update constructors.\n\t* libgrust/libproc_macro/rust/bridge/literal.rs: Remove\n\thas_suffix attribute from Literal.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "188c49e441e1bd765daff2453b388c69dbbfe4d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/188c49e441e1bd765daff2453b388c69dbbfe4d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/668c220024905c71eceedc17a80266761a01ba7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/668c220024905c71eceedc17a80266761a01ba7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/668c220024905c71eceedc17a80266761a01ba7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/668c220024905c71eceedc17a80266761a01ba7f/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8202b68bc67f7804755def780a3755e27bebec1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8202b68bc67f7804755def780a3755e27bebec1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8202b68bc67f7804755def780a3755e27bebec1"}], "stats": {"total": 52, "additions": 19, "deletions": 33}, "files": [{"sha": "af1632b72901afc85a951b1756056b29dbce55e4", "filename": "libgrust/libproc_macro/literal.cc", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/668c220024905c71eceedc17a80266761a01ba7f/libgrust%2Flibproc_macro%2Fliteral.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/668c220024905c71eceedc17a80266761a01ba7f/libgrust%2Flibproc_macro%2Fliteral.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Fliteral.cc?ref=668c220024905c71eceedc17a80266761a01ba7f", "patch": "@@ -46,8 +46,7 @@ Literal::drop (Literal *lit)\n Literal\n Literal::clone () const\n {\n-  return {this->kind, this->text.clone (), this->has_suffix,\n-\t  this->suffix.clone ()};\n+  return {this->kind, this->text.clone (), this->suffix.clone ()};\n }\n \n Literal\n@@ -56,79 +55,79 @@ Literal::make_literal (LitKind kind, const std::string &text,\n {\n   auto ffi_text = FFIString::make_ffistring (text);\n   auto ffi_suffix = FFIString::make_ffistring (suffix);\n-  return {kind, ffi_text, suffix != \"\", ffi_suffix};\n+  return {kind, ffi_text, ffi_suffix};\n }\n \n Literal\n Literal::make_u8 (std::uint8_t value, bool suffixed)\n {\n   auto text = FFIString::make_ffistring (std::to_string (value));\n   auto suffix = FFIString::make_ffistring (suffixed ? \"u8\" : \"\");\n-  return {LitKind::make_integer (), text, suffixed, suffix};\n+  return {LitKind::make_integer (), text, suffix};\n }\n \n Literal\n Literal::make_u16 (std::uint16_t value, bool suffixed)\n {\n   auto text = FFIString::make_ffistring (std::to_string (value));\n   auto suffix = FFIString::make_ffistring (suffixed ? \"u16\" : \"\");\n-  return {LitKind::make_integer (), text, suffixed, suffix};\n+  return {LitKind::make_integer (), text, suffix};\n }\n \n Literal\n Literal::make_u32 (std::uint32_t value, bool suffixed)\n {\n   auto text = FFIString::make_ffistring (std::to_string (value));\n   auto suffix = FFIString::make_ffistring (suffixed ? \"u32\" : \"\");\n-  return {LitKind::make_integer (), text, suffixed, suffix};\n+  return {LitKind::make_integer (), text, suffix};\n }\n \n Literal\n Literal::make_u64 (std::uint64_t value, bool suffixed)\n {\n   auto text = FFIString::make_ffistring (std::to_string (value));\n   auto suffix = FFIString::make_ffistring (suffixed ? \"u64\" : \"\");\n-  return {LitKind::make_integer (), text, suffixed, suffix};\n+  return {LitKind::make_integer (), text, suffix};\n }\n \n Literal\n Literal::make_i8 (std::int8_t value, bool suffixed)\n {\n   auto text = FFIString::make_ffistring (std::to_string (value));\n   auto suffix = FFIString::make_ffistring (suffixed ? \"i8\" : \"\");\n-  return {LitKind::make_integer (), text, suffixed, suffix};\n+  return {LitKind::make_integer (), text, suffix};\n }\n \n Literal\n Literal::make_i16 (std::int16_t value, bool suffixed)\n {\n   auto text = FFIString::make_ffistring (std::to_string (value));\n   auto suffix = FFIString::make_ffistring (suffixed ? \"i16\" : \"\");\n-  return {LitKind::make_integer (), text, suffixed, suffix};\n+  return {LitKind::make_integer (), text, suffix};\n }\n \n Literal\n Literal::make_i32 (std::int32_t value, bool suffixed)\n {\n   auto text = FFIString::make_ffistring (std::to_string (value));\n   auto suffix = FFIString::make_ffistring (suffixed ? \"i32\" : \"\");\n-  return {LitKind::make_integer (), text, suffixed, suffix};\n+  return {LitKind::make_integer (), text, suffix};\n }\n \n Literal\n Literal::make_i64 (std::int64_t value, bool suffixed)\n {\n   auto text = FFIString::make_ffistring (std::to_string (value));\n   auto suffix = FFIString::make_ffistring (suffixed ? \"i64\" : \"\");\n-  return {LitKind::make_integer (), text, suffixed, suffix};\n+  return {LitKind::make_integer (), text, suffix};\n }\n \n Literal\n Literal::make_string (const std::string &str)\n {\n   auto text = FFIString::make_ffistring (str);\n   auto suffix = FFIString::make_ffistring (\"\");\n-  return {LitKind::make_str (), text, false, suffix};\n+  return {LitKind::make_str (), text, suffix};\n }\n \n Literal\n@@ -137,47 +136,47 @@ Literal::make_byte_string (const std::vector<std::uint8_t> &vec)\n   auto text\n     = FFIString::make_ffistring (std::string (vec.cbegin (), vec.cend ()));\n   auto suffix = FFIString::make_ffistring (\"\");\n-  return {LitKind::make_byte_str (), text, false, suffix};\n+  return {LitKind::make_byte_str (), text, suffix};\n }\n \n Literal\n Literal::make_f32 (float value, bool suffixed)\n {\n   auto text = FFIString::make_ffistring (std::to_string (value));\n   auto suffix = FFIString::make_ffistring (suffixed ? \"f32\" : \"\");\n-  return {LitKind::make_float (), text, suffixed, suffix};\n+  return {LitKind::make_float (), text, suffix};\n }\n \n Literal\n Literal::make_f64 (double value, bool suffixed)\n {\n   auto text = FFIString::make_ffistring (std::to_string (value));\n   auto suffix = FFIString::make_ffistring (suffixed ? \"f64\" : \"\");\n-  return {LitKind::make_float (), text, suffixed, suffix};\n+  return {LitKind::make_float (), text, suffix};\n }\n \n Literal\n Literal::make_char (std::uint32_t ch)\n {\n   auto text = FFIString::make_ffistring (std::to_string ((char) ch));\n   auto suffix = FFIString::make_ffistring (\"\");\n-  return {LitKind::make_char (), text, false, suffix};\n+  return {LitKind::make_char (), text, suffix};\n }\n \n Literal\n Literal::make_usize (std::uint64_t value, bool suffixed)\n {\n   auto text = FFIString::make_ffistring (std::to_string (value));\n   auto suffix = FFIString::make_ffistring (suffixed ? \"usize\" : \"\");\n-  return {LitKind::make_integer (), text, suffixed, suffix};\n+  return {LitKind::make_integer (), text, suffix};\n }\n \n Literal\n Literal::make_isize (std::int64_t value, bool suffixed)\n {\n   auto text = FFIString::make_ffistring (std::to_string (value));\n   auto suffix = FFIString::make_ffistring (suffixed ? \"isize\" : \"\");\n-  return {LitKind::make_integer (), text, suffixed, suffix};\n+  return {LitKind::make_integer (), text, suffix};\n }\n \n LitKind"}, {"sha": "86b1a17548741529313b0dd3d735887e60339ae6", "filename": "libgrust/libproc_macro/literal.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/668c220024905c71eceedc17a80266761a01ba7f/libgrust%2Flibproc_macro%2Fliteral.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/668c220024905c71eceedc17a80266761a01ba7f/libgrust%2Flibproc_macro%2Fliteral.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Fliteral.h?ref=668c220024905c71eceedc17a80266761a01ba7f", "patch": "@@ -69,12 +69,12 @@ struct Literal\n {\n   LitKind kind;\n   FFIString text;\n-  bool has_suffix;\n   FFIString suffix;\n   // TODO: Add span once done in rust interface\n \n public:\n   Literal clone () const;\n+  bool has_suffix () const { return suffix.len != 0; };\n \n   static Literal make_literal (const LitKind kind, const std::string &text,\n \t\t\t       const std::string &suffix = \"\");"}, {"sha": "1e15012c4a712f62a6a108a0de21dd437a605928", "filename": "libgrust/libproc_macro/rust/bridge/literal.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/668c220024905c71eceedc17a80266761a01ba7f/libgrust%2Flibproc_macro%2Frust%2Fbridge%2Fliteral.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/668c220024905c71eceedc17a80266761a01ba7f/libgrust%2Flibproc_macro%2Frust%2Fbridge%2Fliteral.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Frust%2Fbridge%2Fliteral.rs?ref=668c220024905c71eceedc17a80266761a01ba7f", "patch": "@@ -28,7 +28,6 @@ pub enum LitKind {\n pub struct Literal {\n     kind: LitKind,\n     text: FFIString,\n-    has_suffix: bool,\n     suffix: FFIString,\n     // FIXME: Add span, cannot add whilst Span remain an empty type\n }\n@@ -39,7 +38,6 @@ macro_rules! suffixed_int_literals {\n             Literal {\n                 kind : LitKind::Integer,\n                 text: FFIString::new(&n.to_string()),\n-                has_suffix : true,\n                 suffix: FFIString::new(stringify!($kind))\n             }\n         }\n@@ -52,7 +50,6 @@ macro_rules! unsuffixed_int_literals {\n             Literal {\n                 kind : LitKind::Integer,\n                 text: FFIString::new(&n.to_string()),\n-                has_suffix : false,\n                 suffix: FFIString::new(\"\")\n             }\n         }\n@@ -99,7 +96,6 @@ impl Literal {\n         Literal {\n             kind: LitKind::Float,\n             text: FFIString::new(&repr),\n-            has_suffix: false,\n             suffix: FFIString::new(\"\"),\n         }\n     }\n@@ -108,7 +104,6 @@ impl Literal {\n         Literal {\n             kind: LitKind::Float,\n             text: FFIString::new(&n.to_string()),\n-            has_suffix: true,\n             suffix: FFIString::new(\"f32\"),\n         }\n     }\n@@ -122,7 +117,6 @@ impl Literal {\n         Literal {\n             kind: LitKind::Float,\n             text: FFIString::new(&repr),\n-            has_suffix: false,\n             suffix: FFIString::new(\"\"),\n         }\n     }\n@@ -131,7 +125,6 @@ impl Literal {\n         Literal {\n             kind: LitKind::Float,\n             text: FFIString::new(&n.to_string()),\n-            has_suffix: true,\n             suffix: FFIString::new(\"f64\"),\n         }\n     }\n@@ -140,7 +133,6 @@ impl Literal {\n         Literal {\n             kind: LitKind::Str,\n             text: FFIString::new(string),\n-            has_suffix: false,\n             suffix: FFIString::new(\"\"),\n         }\n     }\n@@ -149,7 +141,6 @@ impl Literal {\n         Literal {\n             kind: LitKind::Char,\n             text: FFIString::new(&c.to_string()),\n-            has_suffix: false,\n             suffix: FFIString::new(\"\"),\n         }\n     }\n@@ -158,7 +149,6 @@ impl Literal {\n         Literal {\n             kind: LitKind::ByteStr,\n             text: FFIString::new(&bytes.escape_ascii().to_string()),\n-            has_suffix: false,\n             suffix: FFIString::new(\"\"),\n         }\n     }\n@@ -217,9 +207,7 @@ impl fmt::Display for Literal {\n             _ => f.write_str(text)?,\n         }\n \n-        if self.has_suffix {\n-            f.write_str(&self.suffix.to_string())?;\n-        }\n+        f.write_str(&self.suffix.to_string())?;\n         Ok(())\n     }\n }\n@@ -232,7 +220,6 @@ impl FromStr for Literal {\n         let mut lit = Literal {\n             kind: LitKind::Err,\n             text: FFIString::new(\"\"),\n-            has_suffix: false,\n             suffix: FFIString::new(\"\"),\n         };\n         // TODO: We might want to pass a LexError by reference to retrieve"}]}