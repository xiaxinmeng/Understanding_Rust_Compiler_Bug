{"sha": "bd14cdceb9c6f4800e25a9fbca635a1d4c06fd32", "node_id": "C_kwDOANBUbNoAKGJkMTRjZGNlYjljNmY0ODAwZTI1YTlmYmNhNjM1YTFkNGMwNmZkMzI", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-02-04T11:03:49Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-02-04T11:10:05Z"}, "message": "Disable new 1/X optimization with -fnon-call-exceptions\n\nThe trapping behavior of the operation needs to be preserved when the\n-fnon-call-exceptions switch is in effect.  This also adds the same\nguards to similar optimizations.\n\ngcc/\n\tPR tree-optimization/104356\n\t* match.pd (X / bool_range_Y is X): Add guard.\n\t(X / X is one): Likewise.\n\t(X / abs (X) is X < 0 ? -1 : 1): Likewise.\n\t(X / -X is -1): Likewise.\n\t(1 / X -> X == 1): Likewise.", "tree": {"sha": "f095dd4c180fc306e7fba96b4025132bd4d12adf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f095dd4c180fc306e7fba96b4025132bd4d12adf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd14cdceb9c6f4800e25a9fbca635a1d4c06fd32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd14cdceb9c6f4800e25a9fbca635a1d4c06fd32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd14cdceb9c6f4800e25a9fbca635a1d4c06fd32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd14cdceb9c6f4800e25a9fbca635a1d4c06fd32/comments", "author": null, "committer": null, "parents": [{"sha": "876e70d4681332a600492173af0c7259e5a438c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/876e70d4681332a600492173af0c7259e5a438c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/876e70d4681332a600492173af0c7259e5a438c6"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "10ff867e8543df7509af93fbe059eca609a23d2b", "filename": "gcc/match.pd", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd14cdceb9c6f4800e25a9fbca635a1d4c06fd32/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd14cdceb9c6f4800e25a9fbca635a1d4c06fd32/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=bd14cdceb9c6f4800e25a9fbca635a1d4c06fd32", "patch": "@@ -401,27 +401,35 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  /* X / bool_range_Y is X.  */ \n  (simplify\n   (div @0 SSA_NAME@1)\n-  (if (INTEGRAL_TYPE_P (type) && ssa_name_has_boolean_range (@1))\n+  (if (INTEGRAL_TYPE_P (type)\n+       && ssa_name_has_boolean_range (@1)\n+       && !flag_non_call_exceptions)\n    @0))\n  /* X / X is one.  */\n  (simplify\n   (div @0 @0)\n   /* But not for 0 / 0 so that we can get the proper warnings and errors.\n      And not for _Fract types where we can't build 1.  */\n-  (if (!integer_zerop (@0) && !ALL_FRACT_MODE_P (TYPE_MODE (type)))\n+  (if (!ALL_FRACT_MODE_P (TYPE_MODE (type))\n+       && !integer_zerop (@0)\n+       && (!flag_non_call_exceptions || tree_expr_nonzero_p (@0)))\n    { build_one_cst (type); }))\n  /* X / abs (X) is X < 0 ? -1 : 1.  */\n  (simplify\n    (div:C @0 (abs @0))\n    (if (INTEGRAL_TYPE_P (type)\n-\t&& TYPE_OVERFLOW_UNDEFINED (type))\n+\t&& TYPE_OVERFLOW_UNDEFINED (type)\n+\t&& !integer_zerop (@0)\n+\t&& (!flag_non_call_exceptions || tree_expr_nonzero_p (@0)))\n     (cond (lt @0 { build_zero_cst (type); })\n           { build_minus_one_cst (type); } { build_one_cst (type); })))\n  /* X / -X is -1.  */\n  (simplify\n    (div:C @0 (negate @0))\n    (if ((INTEGRAL_TYPE_P (type) || VECTOR_INTEGER_TYPE_P (type))\n-\t&& TYPE_OVERFLOW_UNDEFINED (type))\n+\t&& TYPE_OVERFLOW_UNDEFINED (type)\n+\t&& !integer_zerop (@0)\n+\t&& (!flag_non_call_exceptions || tree_expr_nonzero_p (@0)))\n     { build_minus_one_cst (type); })))\n \n /* For unsigned integral types, FLOOR_DIV_EXPR is the same as\n@@ -443,8 +451,9 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n (simplify\n  (trunc_div integer_onep@0 @1)\n  (if (INTEGRAL_TYPE_P (type)\n+      && TYPE_PRECISION (type) > 1\n       && !integer_zerop (@1)\n-      && TYPE_PRECISION (type) > 1)\n+      && (!flag_non_call_exceptions || tree_expr_nonzero_p (@1)))\n   (if (TYPE_UNSIGNED (type))\n    (convert (eq:boolean_type_node @1 { build_one_cst (type); }))\n    (with { tree utype = unsigned_type_for (type); }"}]}