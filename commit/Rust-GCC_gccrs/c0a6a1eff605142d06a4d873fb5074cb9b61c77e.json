{"sha": "c0a6a1eff605142d06a4d873fb5074cb9b61c77e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBhNmExZWZmNjA1MTQyZDA2YTRkODczZmI1MDc0Y2I5YjYxYzc3ZQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2011-07-08T16:21:58Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2011-07-08T16:21:58Z"}, "message": "defaults.h (REG_WORDS_BIG_ENDIAN): Provide a default.\n\n\t* defaults.h (REG_WORDS_BIG_ENDIAN): Provide a default.\n\t* doc/tm.texi.in (WORDS_BIG_ENDIAN): Mention REG_WORDS_BIG_ENDIAN.\n\t(REG_WORDS_BIG_ENDIAN): Document.\n\t* doc/tm.texi: Regenerate.\n\t* reload.c (operands_match_p): Take it into account.\n\t(reload_adjust_reg_for_mode): Likewise.\n\t* rtlanal.c (subreg_get_info): Likewise.\n\nFrom-SVN: r176048", "tree": {"sha": "663775dd7f56c1e0bd6ec666857472c3fb3c2d24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/663775dd7f56c1e0bd6ec666857472c3fb3c2d24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0a6a1eff605142d06a4d873fb5074cb9b61c77e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0a6a1eff605142d06a4d873fb5074cb9b61c77e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0a6a1eff605142d06a4d873fb5074cb9b61c77e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0a6a1eff605142d06a4d873fb5074cb9b61c77e/comments", "author": null, "committer": null, "parents": [{"sha": "9ae601015839cc1835b55134bc9899c475ef77c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ae601015839cc1835b55134bc9899c475ef77c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ae601015839cc1835b55134bc9899c475ef77c2"}], "stats": {"total": 53, "additions": 44, "deletions": 9}, "files": [{"sha": "60cc66d6f08b2aa0f3bf07d47f011e9e947ad227", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a6a1eff605142d06a4d873fb5074cb9b61c77e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a6a1eff605142d06a4d873fb5074cb9b61c77e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0a6a1eff605142d06a4d873fb5074cb9b61c77e", "patch": "@@ -4,6 +4,14 @@\n \tin terms of another.\n \t(write_attr_value): Write a cast if necessary.\n \n+\t* defaults.h (REG_WORDS_BIG_ENDIAN): Provide a default.\n+\t* doc/tm.texi.in (WORDS_BIG_ENDIAN): Mention REG_WORDS_BIG_ENDIAN.\n+\t(REG_WORDS_BIG_ENDIAN): Document.\n+\t* doc/tm.texi: Regenerate.\n+\t* reload.c (operands_match_p): Take it into account.\n+\t(reload_adjust_reg_for_mode): Likewise.\n+\t* rtlanal.c (subreg_get_info): Likewise.\n+\n 2011-07-08  Richard Guenther  <rguenther@suse.de>\n \n \t* fold-const.c (fold_binary_loc): Remove index +p PTR -> PTR +p index"}, {"sha": "5f83b1860f0ab3fcbf7868190952689caaedad19", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a6a1eff605142d06a4d873fb5074cb9b61c77e/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a6a1eff605142d06a4d873fb5074cb9b61c77e/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=c0a6a1eff605142d06a4d873fb5074cb9b61c77e", "patch": "@@ -882,6 +882,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define FLOAT_WORDS_BIG_ENDIAN WORDS_BIG_ENDIAN\n #endif\n \n+#ifndef REG_WORDS_BIG_ENDIAN\n+#define REG_WORDS_BIG_ENDIAN WORDS_BIG_ENDIAN\n+#endif\n+\n #ifdef TARGET_FLT_EVAL_METHOD\n #define TARGET_FLT_EVAL_METHOD_NON_DEFAULT 1\n #else"}, {"sha": "c0648a5657cc2cae6701c7ddf30688f6ca209895", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a6a1eff605142d06a4d873fb5074cb9b61c77e/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a6a1eff605142d06a4d873fb5074cb9b61c77e/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c0a6a1eff605142d06a4d873fb5074cb9b61c77e", "patch": "@@ -870,11 +870,18 @@ word has the lowest number.  This macro need not be a constant.\n @defmac WORDS_BIG_ENDIAN\n Define this macro to have the value 1 if, in a multiword object, the\n most significant word has the lowest number.  This applies to both\n-memory locations and registers; GCC fundamentally assumes that the\n-order of words in memory is the same as the order in registers.  This\n+memory locations and registers; see @code{REG_WORDS_BIG_ENDIAN} if the\n+order of words in memory is not the same as the order in registers.  This\n macro need not be a constant.\n @end defmac\n \n+@defmac REG_WORDS_BIG_ENDIAN\n+On some machines, the order of words in a multiword object differs between\n+registers in memory.  In such a situation, define this macro to describe\n+the order of words in a register.  The macro @code{WORDS_BIG_ENDIAN} controls\n+the order of words in memory.\n+@end defmac\n+\n @defmac FLOAT_WORDS_BIG_ENDIAN\n Define this macro to have the value 1 if @code{DFmode}, @code{XFmode} or\n @code{TFmode} floating point numbers are stored in memory with the word"}, {"sha": "3660d36d7b56de9fb18176e312654bfdd6a73720", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a6a1eff605142d06a4d873fb5074cb9b61c77e/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a6a1eff605142d06a4d873fb5074cb9b61c77e/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=c0a6a1eff605142d06a4d873fb5074cb9b61c77e", "patch": "@@ -858,11 +858,18 @@ word has the lowest number.  This macro need not be a constant.\n @defmac WORDS_BIG_ENDIAN\n Define this macro to have the value 1 if, in a multiword object, the\n most significant word has the lowest number.  This applies to both\n-memory locations and registers; GCC fundamentally assumes that the\n-order of words in memory is the same as the order in registers.  This\n+memory locations and registers; see @code{REG_WORDS_BIG_ENDIAN} if the\n+order of words in memory is not the same as the order in registers.  This\n macro need not be a constant.\n @end defmac\n \n+@defmac REG_WORDS_BIG_ENDIAN\n+On some machines, the order of words in a multiword object differs between\n+registers in memory.  In such a situation, define this macro to describe\n+the order of words in a register.  The macro @code{WORDS_BIG_ENDIAN} controls\n+the order of words in memory.\n+@end defmac\n+\n @defmac FLOAT_WORDS_BIG_ENDIAN\n Define this macro to have the value 1 if @code{DFmode}, @code{XFmode} or\n @code{TFmode} floating point numbers are stored in memory with the word"}, {"sha": "735fa6edce4bd7784e3667c9acaac67c25c85c60", "filename": "gcc/reload.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a6a1eff605142d06a4d873fb5074cb9b61c77e/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a6a1eff605142d06a4d873fb5074cb9b61c77e/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=c0a6a1eff605142d06a4d873fb5074cb9b61c77e", "patch": "@@ -2218,15 +2218,15 @@ operands_match_p (rtx x, rtx y)\n       else\n \tj = REGNO (y);\n \n-      /* On a WORDS_BIG_ENDIAN machine, point to the last register of a\n+      /* On a REG_WORDS_BIG_ENDIAN machine, point to the last register of a\n \t multiple hard register group of scalar integer registers, so that\n \t for example (reg:DI 0) and (reg:SI 1) will be considered the same\n \t register.  */\n-      if (WORDS_BIG_ENDIAN && GET_MODE_SIZE (GET_MODE (x)) > UNITS_PER_WORD\n+      if (REG_WORDS_BIG_ENDIAN && GET_MODE_SIZE (GET_MODE (x)) > UNITS_PER_WORD\n \t  && SCALAR_INT_MODE_P (GET_MODE (x))\n \t  && i < FIRST_PSEUDO_REGISTER)\n \ti += hard_regno_nregs[i][GET_MODE (x)] - 1;\n-      if (WORDS_BIG_ENDIAN && GET_MODE_SIZE (GET_MODE (y)) > UNITS_PER_WORD\n+      if (REG_WORDS_BIG_ENDIAN && GET_MODE_SIZE (GET_MODE (y)) > UNITS_PER_WORD\n \t  && SCALAR_INT_MODE_P (GET_MODE (y))\n \t  && j < FIRST_PSEUDO_REGISTER)\n \tj += hard_regno_nregs[j][GET_MODE (y)] - 1;\n@@ -7251,7 +7251,7 @@ reload_adjust_reg_for_mode (rtx reloadreg, enum machine_mode mode)\n \n   regno = REGNO (reloadreg);\n \n-  if (WORDS_BIG_ENDIAN)\n+  if (REG_WORDS_BIG_ENDIAN)\n     regno += (int) hard_regno_nregs[regno][GET_MODE (reloadreg)]\n       - (int) hard_regno_nregs[regno][mode];\n "}, {"sha": "c3cdd31b6d035076115a503bff158f637f52a607", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a6a1eff605142d06a4d873fb5074cb9b61c77e/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a6a1eff605142d06a4d873fb5074cb9b61c77e/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=c0a6a1eff605142d06a4d873fb5074cb9b61c77e", "patch": "@@ -3289,7 +3289,7 @@ subreg_get_info (unsigned int xregno, enum machine_mode xmode,\n \t return a negative offset so that we find the proper highpart\n \t of the register.  */\n       if (GET_MODE_SIZE (ymode) > UNITS_PER_WORD\n-\t  ? WORDS_BIG_ENDIAN : BYTES_BIG_ENDIAN)\n+\t  ? REG_WORDS_BIG_ENDIAN : BYTES_BIG_ENDIAN)\n \tinfo->offset = nregs_xmode - nregs_ymode;\n       else\n \tinfo->offset = 0;\n@@ -3344,6 +3344,15 @@ subreg_get_info (unsigned int xregno, enum machine_mode xmode,\n   gcc_assert ((GET_MODE_SIZE (xmode) % GET_MODE_SIZE (ymode)) == 0);\n   gcc_assert ((nregs_xmode % nregs_ymode) == 0);\n \n+  if (WORDS_BIG_ENDIAN != REG_WORDS_BIG_ENDIAN\n+      && GET_MODE_SIZE (xmode) > UNITS_PER_WORD)\n+    {\n+      HOST_WIDE_INT xsize = GET_MODE_SIZE (xmode);\n+      HOST_WIDE_INT ysize = GET_MODE_SIZE (ymode);\n+      HOST_WIDE_INT off_low = offset & (ysize - 1);\n+      HOST_WIDE_INT off_high = offset & ~(ysize - 1);\n+      offset = (xsize - ysize - off_high) | off_low;\n+    }\n   /* The XMODE value can be seen as a vector of NREGS_XMODE\n      values.  The subreg must represent a lowpart of given field.\n      Compute what field it is.  */"}]}