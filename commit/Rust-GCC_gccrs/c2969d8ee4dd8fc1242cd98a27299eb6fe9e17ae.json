{"sha": "c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI5NjlkOGVlNGRkOGZjMTI0MmNkOThhMjcyOTllYjZmZTllMTdhZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-03-16T08:40:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-03-16T08:40:07Z"}, "message": "emit-rtl.c (try_split): Don't call copy_call_info debug hook.\n\n\t* emit-rtl.c (try_split): Don't call copy_call_info debug hook.\n\t* calls.c: Remove debug.h include.\n\t(emit_call_1): Don't call virtual_call_token debug hook.\n\t* dwarf2out.c (debug_dcall_section, debug_vcall_section,\n\tdcall_entry, vcall_entry, dcall_table, vcall_table, vcall_insn,\n\tvcall_insn_table, DEBUG_DCALL_SECTION, DEBUG_VCALL_SECTION,\n\tsize_of_dcall_table, output_dcall_table, size_of_vcall_table,\n\toutput_vcall_table, dwarf2out_direct_call, vcall_insn_table_hash,\n\tvcall_insn_table_eq, store_vcall_insn, lookup_vcall_insn,\n\tdwarf2out_virtual_call_token, dwarf2out_copy_call_info,\n\tdwarf2out_virtual_call): Remove.\n\t(dwarf2_debug_hooks): Remove direct_call, virtual_call_token,\n\tcopy_call_info and virtual_call hooks.\n\t(dwarf2out_init): Don't initialize vcall_insn_table,\n\tdebug_dcall_section and debug_vcall_section.\n\t(prune_unused_types): Don't mark nodes from dcall_table.\n\t(dwarf2out_finish): Don't output dcall or vcall tables.\n\t* final.c (final_scan_insn): Don't call direct_call or\n\tvirtual_call debug hooks.\n\t* debug.h (struct gcc_debug_hooks): Remove direct_call,\n\tvirtual_call_token, copy_call_info and virtual_call hooks.\n\t(debug_nothing_uid): Remove prototype.\n\t* sdbout.c (sdb_debug_hooks): Remove direct_call, virtual_call_token,\n\tcopy_call_info and virtual_call hooks.\n\t* vmsdbgout.c (vmsdbg_debug_hooks): Likewise.\n\t* dbxout.c (dbx_debug_hooks, xcoff_debug_hooks): Likewise.\n\t* debug.c (do_nothing_debug_hooks): Likewise.\n\t(debug_nothing_uid): Remove.\n\t* doc/invoke.texi (-fenable-icf-debug): Remove.\n\t* common.opt (-fenable-icf-debug): Likewise.\n\n\t* g++.dg/debug/dwarf2/icf.C: Adjust for -fenable-icf-debug removal.\n\nFrom-SVN: r171037", "tree": {"sha": "137b6efb27dfed2c62c3bca8d4a8e763427f6af8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/137b6efb27dfed2c62c3bca8d4a8e763427f6af8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "325f5379f113d8ee0a709dc51394ba959245b2a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/325f5379f113d8ee0a709dc51394ba959245b2a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/325f5379f113d8ee0a709dc51394ba959245b2a6"}], "stats": {"total": 481, "additions": 41, "deletions": 440}, "files": [{"sha": "5ee08364dc0839699865390198e4778b12f1698a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae", "patch": "@@ -1,5 +1,36 @@\n 2011-03-16  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* emit-rtl.c (try_split): Don't call copy_call_info debug hook.\n+\t* calls.c: Remove debug.h include.\n+\t(emit_call_1): Don't call virtual_call_token debug hook.\n+\t* dwarf2out.c (debug_dcall_section, debug_vcall_section,\n+\tdcall_entry, vcall_entry, dcall_table, vcall_table, vcall_insn,\n+\tvcall_insn_table, DEBUG_DCALL_SECTION, DEBUG_VCALL_SECTION,\n+\tsize_of_dcall_table, output_dcall_table, size_of_vcall_table,\n+\toutput_vcall_table, dwarf2out_direct_call, vcall_insn_table_hash,\n+\tvcall_insn_table_eq, store_vcall_insn, lookup_vcall_insn,\n+\tdwarf2out_virtual_call_token, dwarf2out_copy_call_info,\n+\tdwarf2out_virtual_call): Remove.\n+\t(dwarf2_debug_hooks): Remove direct_call, virtual_call_token,\n+\tcopy_call_info and virtual_call hooks.\n+\t(dwarf2out_init): Don't initialize vcall_insn_table,\n+\tdebug_dcall_section and debug_vcall_section.\n+\t(prune_unused_types): Don't mark nodes from dcall_table.\n+\t(dwarf2out_finish): Don't output dcall or vcall tables.\n+\t* final.c (final_scan_insn): Don't call direct_call or\n+\tvirtual_call debug hooks.\n+\t* debug.h (struct gcc_debug_hooks): Remove direct_call,\n+\tvirtual_call_token, copy_call_info and virtual_call hooks.\n+\t(debug_nothing_uid): Remove prototype.\n+\t* sdbout.c (sdb_debug_hooks): Remove direct_call, virtual_call_token,\n+\tcopy_call_info and virtual_call hooks.\n+\t* vmsdbgout.c (vmsdbg_debug_hooks): Likewise.\n+\t* dbxout.c (dbx_debug_hooks, xcoff_debug_hooks): Likewise.\n+\t* debug.c (do_nothing_debug_hooks): Likewise.\n+\t(debug_nothing_uid): Remove.\n+\t* doc/invoke.texi (-fenable-icf-debug): Remove.\n+\t* common.opt (-fenable-icf-debug): Likewise.\n+\n \t* calls.c (emit_call_1): Set MEM_EXPR on call's MEM.\n \t* var-tracking.c (prepare_call_arguments): Use MEM_EXPR on\n \tcall's MEM.  Handle functions returning aggregate through a hidden"}, {"sha": "2e7977720e1b0785f32f35d8fefd104458d867cd", "filename": "gcc/calls.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae", "patch": "@@ -39,7 +39,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"sbitmap.h\"\n #include \"langhooks.h\"\n #include \"target.h\"\n-#include \"debug.h\"\n #include \"cgraph.h\"\n #include \"except.h\"\n #include \"dbgcnt.h\"\n@@ -407,11 +406,6 @@ emit_call_1 (rtx funexp, tree fntree ATTRIBUTE_UNUSED, tree fndecl ATTRIBUTE_UNU\n \n   SIBLING_CALL_P (call_insn) = ((ecf_flags & ECF_SIBCALL) != 0);\n \n-  /* Record debug information for virtual calls.  */\n-  if (flag_enable_icf_debug && fndecl == NULL)\n-    (*debug_hooks->virtual_call_token) (CALL_EXPR_FN (fntree),\n-                                        INSN_UID (call_insn));\n-\n   /* Restore this now, so that we do defer pops for this call's args\n      if the context of the call as a whole permits.  */\n   inhibit_defer_pop = old_inhibit_defer_pop;"}, {"sha": "8cc35d1d8a6d909e47aeaa75a6418540dc581b2c", "filename": "gcc/common.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae", "patch": "@@ -1012,10 +1012,6 @@ femit-class-debug-always\n Common Report Var(flag_emit_class_debug_always) Init(0)\n Do not suppress C++ class debug information.\n \n-fenable-icf-debug\n-Common Report Var(flag_enable_icf_debug)\n-Generate debug information to support Identical Code Folding (ICF)\n-\n fexceptions\n Common Report Var(flag_exceptions) Optimization\n Enable exception handling"}, {"sha": "89d52a1cfd1dc1b84e2411e67dff8f40a7de0008", "filename": "gcc/dbxout.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae", "patch": "@@ -1,7 +1,7 @@\n /* Output dbx-format symbol table information from GNU compiler.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-   Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+   2011 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -379,10 +379,6 @@ const struct gcc_debug_hooks dbx_debug_hooks =\n   dbxout_handle_pch,\t\t         /* handle_pch */\n   debug_nothing_rtx,\t\t         /* var_location */\n   debug_nothing_void,                    /* switch_text_section */\n-  debug_nothing_tree,\t\t         /* direct_call */\n-  debug_nothing_tree_int,\t\t /* virtual_call_token */\n-  debug_nothing_rtx_rtx,\t         /* copy_call_info */\n-  debug_nothing_uid,\t\t         /* virtual_call */\n   debug_nothing_tree_tree,\t\t /* set_name */\n   0,                                     /* start_end_main_source_file */\n   TYPE_SYMTAB_IS_ADDRESS                 /* tree_type_symtab_field */\n@@ -419,10 +415,6 @@ const struct gcc_debug_hooks xcoff_debug_hooks =\n   dbxout_handle_pch,\t\t         /* handle_pch */\n   debug_nothing_rtx,\t\t         /* var_location */\n   debug_nothing_void,                    /* switch_text_section */\n-  debug_nothing_tree,\t\t         /* direct_call */\n-  debug_nothing_tree_int,\t\t /* virtual_call_token */\n-  debug_nothing_rtx_rtx,\t         /* copy_call_info */\n-  debug_nothing_uid,\t\t         /* virtual_call */\n   debug_nothing_tree_tree,\t         /* set_name */\n   0,                                     /* start_end_main_source_file */\n   TYPE_SYMTAB_IS_ADDRESS                 /* tree_type_symtab_field */"}, {"sha": "641b93fdd9d6864f6dcde1fb6065e2a1b1000057", "filename": "gcc/debug.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Fdebug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Fdebug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.c?ref=c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae", "patch": "@@ -1,5 +1,5 @@\n /* Do-nothing debug hooks for GCC.\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2010\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2010, 2011\n    Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify it\n@@ -53,10 +53,6 @@ const struct gcc_debug_hooks do_nothing_debug_hooks =\n   debug_nothing_int,\t\t         /* handle_pch */\n   debug_nothing_rtx,\t\t         /* var_location */\n   debug_nothing_void,                    /* switch_text_section */\n-  debug_nothing_tree,\t\t         /* direct_call */\n-  debug_nothing_tree_int,\t         /* virtual_call_token */\n-  debug_nothing_rtx_rtx,\t         /* copy_call_info */\n-  debug_nothing_uid,\t\t         /* virtual_call */\n   debug_nothing_tree_tree,\t\t /* set_name */\n   0,                                     /* start_end_main_source_file */\n   TYPE_SYMTAB_IS_ADDRESS                 /* tree_type_symtab_field */\n@@ -141,8 +137,3 @@ debug_nothing_tree_int (tree decl ATTRIBUTE_UNUSED,\n \t\t\tint local ATTRIBUTE_UNUSED)\n {\n }\n-\n-void\n-debug_nothing_uid (int uid ATTRIBUTE_UNUSED)\n-{\n-}"}, {"sha": "ffdca5454b10bd337f57ac78a495723bd79e0237", "filename": "gcc/debug.h", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae", "patch": "@@ -1,5 +1,5 @@\n /* Debug hooks for GCC.\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2010\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2010, 2011\n    Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify it\n@@ -133,31 +133,6 @@ struct gcc_debug_hooks\n      text sections.  */\n   void (* switch_text_section) (void);\n \n-  /* Records a direct call to the function DECL, noting the point of call\n-     and the debug info for the function.  Called from final_scan_insn\n-     when ICF debugging is enabled.  */\n-  void (* direct_call) (tree decl);\n-\n-  /* Records the OBJ_TYPE_REF_TOKEN for a virtual call through ADDR, which\n-     for C++ is the vtable slot index, noting the INSN_UID for the call\n-     instruction.  Called from calls.c:emit_call_1 when ICF debugging is\n-     enabled.  It's necessary to do this during lowering because the\n-     call instruction and the OBJ_TYPE_REF become separated after that\n-     point.  */\n-  void (* virtual_call_token) (tree addr, int insn_uid);\n-\n-  /* Copies the OBJ_TYPE_REF_TOKEN for a virtual call from OLD_INSN to\n-     NEW_INSN.  Called from emit-rtl.c:try_split when a CALL_INSN is\n-     split, so that the vtable slot index remains associated with the\n-     new CALL_INSN.  */\n-  void (* copy_call_info) (rtx old_insn, rtx new_insn);\n-\n-  /* Records a virtual call given INSN_UID, which is the UID of the call\n-     instruction.  The UID is then mapped to the vtable slot index noted\n-     during the lowering phase.  Called from final_scan_insn when ICF\n-     debugging is enabled.  */\n-  void (* virtual_call) (int insn_uid);\n-\n   /* Called from grokdeclarator.  Replaces the anonymous name with the\n      type name.  */\n   void (* set_name) (tree, tree);\n@@ -188,7 +163,6 @@ extern void debug_nothing_tree_tree_tree_bool (tree, tree, tree, bool);\n extern bool debug_true_const_tree (const_tree);\n extern void debug_nothing_rtx (rtx);\n extern void debug_nothing_rtx_rtx (rtx, rtx);\n-extern void debug_nothing_uid (int);\n \n /* Hooks for various debug formats.  */\n extern const struct gcc_debug_hooks do_nothing_debug_hooks;"}, {"sha": "af2fe2633899b0db015881652cf9fa149a5fa962", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae", "patch": "@@ -313,7 +313,6 @@ Objective-C and Objective-C++ Dialects}.\n -fcompare-debug@r{[}=@var{opts}@r{]}  -fcompare-debug-second @gol\n -feliminate-dwarf2-dups -feliminate-unused-debug-types @gol\n -feliminate-unused-debug-symbols -femit-class-debug-always @gol\n--fenable-icf-debug @gol\n -fmem-report -fpre-ipa-mem-report -fpost-ipa-mem-report -fprofile-arcs @gol\n -frandom-seed=@var{string} -fsched-verbose=@var{n} @gol\n -fsel-sched-verbose -fsel-sched-dump-cfg -fsel-sched-pipelining-verbose @gol\n@@ -4817,11 +4816,6 @@ The default is @samp{-femit-struct-debug-detailed=all}.\n \n This option works only with DWARF 2.\n \n-@item -fenable-icf-debug\n-@opindex fenable-icf-debug\n-Generate additional debug information to support identical code folding (ICF).\n-This option only works with DWARF version 2 or higher.\n-\n @item -fno-merge-debug-strings\n @opindex fmerge-debug-strings\n @opindex fno-merge-debug-strings"}, {"sha": "733c849396d4e2cf9df5f8aa618b3428cbb84d0b", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 0, "deletions": 329, "changes": 329, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae", "patch": "@@ -228,8 +228,6 @@ static GTY(()) section *debug_line_section;\n static GTY(()) section *debug_loc_section;\n static GTY(()) section *debug_pubnames_section;\n static GTY(()) section *debug_pubtypes_section;\n-static GTY(()) section *debug_dcall_section;\n-static GTY(()) section *debug_vcall_section;\n static GTY(()) section *debug_str_section;\n static GTY(()) section *debug_ranges_section;\n static GTY(()) section *debug_frame_section;\n@@ -5774,10 +5772,6 @@ static void dwarf2out_imported_module_or_decl_1 (tree, tree, tree,\n \t\t\t\t\t\t dw_die_ref);\n static void dwarf2out_abstract_function (tree);\n static void dwarf2out_var_location (rtx);\n-static void dwarf2out_direct_call (tree);\n-static void dwarf2out_virtual_call_token (tree, int);\n-static void dwarf2out_copy_call_info (rtx, rtx);\n-static void dwarf2out_virtual_call (int);\n static void dwarf2out_begin_function (tree);\n static void dwarf2out_set_name (tree, tree);\n \n@@ -5820,10 +5814,6 @@ const struct gcc_debug_hooks dwarf2_debug_hooks =\n   debug_nothing_int,\t\t/* handle_pch */\n   dwarf2out_var_location,\n   dwarf2out_switch_text_section,\n-  dwarf2out_direct_call,\n-  dwarf2out_virtual_call_token,\n-  dwarf2out_copy_call_info,\n-  dwarf2out_virtual_call,\n   dwarf2out_set_name,\n   1,                            /* start_end_main_source_file */\n   TYPE_SYMTAB_IS_DIE            /* tree_type_symtab_field */\n@@ -6263,42 +6253,6 @@ static GTY(()) unsigned int loclabel_num;\n /* Unique label counter for point-of-call tables.  */\n static GTY(()) unsigned int poc_label_num;\n \n-/* The direct call table structure.  */\n-\n-typedef struct GTY(()) dcall_struct {\n-  unsigned int poc_label_num;\n-  tree poc_decl;\n-  dw_die_ref targ_die;\n-}\n-dcall_entry;\n-\n-DEF_VEC_O(dcall_entry);\n-DEF_VEC_ALLOC_O(dcall_entry, gc);\n-\n-/* The virtual call table structure.  */\n-\n-typedef struct GTY(()) vcall_struct {\n-  unsigned int poc_label_num;\n-  unsigned int vtable_slot;\n-}\n-vcall_entry;\n-\n-DEF_VEC_O(vcall_entry);\n-DEF_VEC_ALLOC_O(vcall_entry, gc);\n-\n-/* Pointers to the direct and virtual call tables.  */\n-static GTY (()) VEC (dcall_entry, gc) * dcall_table = NULL;\n-static GTY (()) VEC (vcall_entry, gc) * vcall_table = NULL;\n-\n-/* A hash table to map INSN_UIDs to vtable slot indexes.  */\n-\n-struct GTY (()) vcall_insn {\n-  int insn_uid;\n-  unsigned int vtable_slot;\n-};\n-\n-static GTY ((param_is (struct vcall_insn))) htab_t vcall_insn_table;\n-\n /* Record whether the function being analyzed contains inlined functions.  */\n static int current_function_has_inlines;\n \n@@ -6642,12 +6596,6 @@ static void gen_scheduled_generic_parms_dies (void);\n #ifndef DEBUG_PUBTYPES_SECTION\n #define DEBUG_PUBTYPES_SECTION\t\".debug_pubtypes\"\n #endif\n-#ifndef DEBUG_DCALL_SECTION\n-#define DEBUG_DCALL_SECTION\t\".debug_dcall\"\n-#endif\n-#ifndef DEBUG_VCALL_SECTION\n-#define DEBUG_VCALL_SECTION\t\".debug_vcall\"\n-#endif\n #ifndef DEBUG_STR_SECTION\n #define DEBUG_STR_SECTION\t\".debug_str\"\n #endif\n@@ -12656,129 +12604,6 @@ output_line_info (void)\n   /* Output the marker for the end of the line number info.  */\n   ASM_OUTPUT_LABEL (asm_out_file, l2);\n }\n-\n-/* Return the size of the .debug_dcall table for the compilation unit.  */\n-\n-static unsigned long\n-size_of_dcall_table (void)\n-{\n-  unsigned long size;\n-  unsigned int i;\n-  dcall_entry *p;\n-  tree last_poc_decl = NULL;\n-\n-  /* Header:  version + debug info section pointer + pointer size.  */\n-  size = 2 + DWARF_OFFSET_SIZE + 1;\n-\n-  /* Each entry:  code label + DIE offset.  */\n-  FOR_EACH_VEC_ELT (dcall_entry, dcall_table, i, p)\n-    {\n-      gcc_assert (p->targ_die != NULL);\n-      /* Insert a \"from\" entry when the point-of-call DIE offset changes.  */\n-      if (p->poc_decl != last_poc_decl)\n-        {\n-          dw_die_ref poc_die = lookup_decl_die (p->poc_decl);\n-          gcc_assert (poc_die);\n-          last_poc_decl = p->poc_decl;\n-          if (poc_die)\n-            size += (DWARF_OFFSET_SIZE\n-                     + size_of_uleb128 (poc_die->die_offset));\n-        }\n-      size += DWARF_OFFSET_SIZE + size_of_uleb128 (p->targ_die->die_offset);\n-    }\n-\n-  return size;\n-}\n-\n-/* Output the direct call table used to disambiguate PC values when\n-   identical function have been merged.  */\n-\n-static void\n-output_dcall_table (void)\n-{\n-  unsigned i;\n-  unsigned long dcall_length = size_of_dcall_table ();\n-  dcall_entry *p;\n-  char poc_label[MAX_ARTIFICIAL_LABEL_BYTES];\n-  tree last_poc_decl = NULL;\n-\n-  if (DWARF_INITIAL_LENGTH_SIZE - DWARF_OFFSET_SIZE == 4)\n-    dw2_asm_output_data (4, 0xffffffff,\n-      \"Initial length escape value indicating 64-bit DWARF extension\");\n-  dw2_asm_output_data (DWARF_OFFSET_SIZE, dcall_length,\n-\t\t       \"Length of Direct Call Table\");\n-  dw2_asm_output_data (2, 4, \"Version number\");\n-  dw2_asm_output_offset (DWARF_OFFSET_SIZE, debug_info_section_label,\n-\t\t\t debug_info_section,\n-\t\t\t \"Offset of Compilation Unit Info\");\n-  dw2_asm_output_data (1, DWARF2_ADDR_SIZE, \"Pointer Size (in bytes)\");\n-\n-  FOR_EACH_VEC_ELT (dcall_entry, dcall_table, i, p)\n-    {\n-      /* Insert a \"from\" entry when the point-of-call DIE offset changes.  */\n-      if (p->poc_decl != last_poc_decl)\n-        {\n-          dw_die_ref poc_die = lookup_decl_die (p->poc_decl);\n-          last_poc_decl = p->poc_decl;\n-          if (poc_die)\n-            {\n-              dw2_asm_output_data (DWARF_OFFSET_SIZE, 0, \"New caller\");\n-              dw2_asm_output_data_uleb128 (poc_die->die_offset,\n-                                           \"Caller DIE offset\");\n-            }\n-        }\n-      ASM_GENERATE_INTERNAL_LABEL (poc_label, \"LPOC\", p->poc_label_num);\n-      dw2_asm_output_addr (DWARF_OFFSET_SIZE, poc_label, \"Point of call\");\n-      dw2_asm_output_data_uleb128 (p->targ_die->die_offset,\n-                                   \"Callee DIE offset\");\n-    }\n-}\n-\f\n-/* Return the size of the .debug_vcall table for the compilation unit.  */\n-\n-static unsigned long\n-size_of_vcall_table (void)\n-{\n-  unsigned long size;\n-  unsigned int i;\n-  vcall_entry *p;\n-\n-  /* Header:  version + pointer size.  */\n-  size = 2 + 1;\n-\n-  /* Each entry:  code label + vtable slot index.  */\n-  FOR_EACH_VEC_ELT (vcall_entry, vcall_table, i, p)\n-    size += DWARF_OFFSET_SIZE + size_of_uleb128 (p->vtable_slot);\n-\n-  return size;\n-}\n-\n-/* Output the virtual call table used to disambiguate PC values when\n-   identical function have been merged.  */\n-\n-static void\n-output_vcall_table (void)\n-{\n-  unsigned i;\n-  unsigned long vcall_length = size_of_vcall_table ();\n-  vcall_entry *p;\n-  char poc_label[MAX_ARTIFICIAL_LABEL_BYTES];\n-\n-  if (DWARF_INITIAL_LENGTH_SIZE - DWARF_OFFSET_SIZE == 4)\n-    dw2_asm_output_data (4, 0xffffffff,\n-      \"Initial length escape value indicating 64-bit DWARF extension\");\n-  dw2_asm_output_data (DWARF_OFFSET_SIZE, vcall_length,\n-\t\t       \"Length of Virtual Call Table\");\n-  dw2_asm_output_data (2, 4, \"Version number\");\n-  dw2_asm_output_data (1, DWARF2_ADDR_SIZE, \"Pointer Size (in bytes)\");\n-\n-  FOR_EACH_VEC_ELT (vcall_entry, vcall_table, i, p)\n-    {\n-      ASM_GENERATE_INTERNAL_LABEL (poc_label, \"LPOC\", p->poc_label_num);\n-      dw2_asm_output_addr (DWARF_OFFSET_SIZE, poc_label, \"Point of call\");\n-      dw2_asm_output_data_uleb128 (p->vtable_slot, \"Vtable slot\");\n-    }\n-}\n \f\n /* Given a pointer to a tree node for some base type, return a pointer to\n    a DIE that describes the given type.\n@@ -22025,135 +21850,6 @@ dwarf2out_set_name (tree decl, tree name)\n     add_name_attribute (die, dname);\n }\n \n-/* Called by the final INSN scan whenever we see a direct function call.\n-   Make an entry into the direct call table, recording the point of call\n-   and a reference to the target function's debug entry.  */\n-\n-static void\n-dwarf2out_direct_call (tree targ)\n-{\n-  dcall_entry e;\n-  tree origin = decl_ultimate_origin (targ);\n-\n-  /* If this is a clone, use the abstract origin as the target.  */\n-  if (origin)\n-    targ = origin;\n-\n-  e.poc_label_num = poc_label_num++;\n-  e.poc_decl = current_function_decl;\n-  e.targ_die = force_decl_die (targ);\n-  VEC_safe_push (dcall_entry, gc, dcall_table, &e);\n-\n-  /* Drop a label at the return point to mark the point of call.  */\n-  ASM_OUTPUT_DEBUG_LABEL (asm_out_file, \"LPOC\", e.poc_label_num);\n-}\n-\n-/* Returns a hash value for X (which really is a struct vcall_insn).  */\n-\n-static hashval_t\n-vcall_insn_table_hash (const void *x)\n-{\n-  return (hashval_t) ((const struct vcall_insn *) x)->insn_uid;\n-}\n-\n-/* Return nonzero if insn_uid of struct vcall_insn *X is the same as\n-   insnd_uid of *Y.  */\n-\n-static int\n-vcall_insn_table_eq (const void *x, const void *y)\n-{\n-  return (((const struct vcall_insn *) x)->insn_uid\n-          == ((const struct vcall_insn *) y)->insn_uid);\n-}\n-\n-/* Associate VTABLE_SLOT with INSN_UID in the VCALL_INSN_TABLE.  */\n-\n-static void\n-store_vcall_insn (unsigned int vtable_slot, int insn_uid)\n-{\n-  struct vcall_insn *item = ggc_alloc_vcall_insn ();\n-  struct vcall_insn **slot;\n-\n-  gcc_assert (item);\n-  item->insn_uid = insn_uid;\n-  item->vtable_slot = vtable_slot;\n-  slot = (struct vcall_insn **)\n-      htab_find_slot_with_hash (vcall_insn_table, &item,\n-\t\t\t\t(hashval_t) insn_uid, INSERT);\n-  *slot = item;\n-}\n-\n-/* Return the VTABLE_SLOT associated with INSN_UID.  */\n-\n-static unsigned int\n-lookup_vcall_insn (unsigned int insn_uid)\n-{\n-  struct vcall_insn item;\n-  struct vcall_insn *p;\n-\n-  item.insn_uid = insn_uid;\n-  item.vtable_slot = 0;\n-  p = (struct vcall_insn *) htab_find_with_hash (vcall_insn_table,\n-                                                 (void *) &item,\n-                                                 (hashval_t) insn_uid);\n-  if (p == NULL)\n-    return (unsigned int) -1;\n-  return p->vtable_slot;\n-}\n-\n-\n-/* Called when lowering indirect calls to RTL.  We make a note of INSN_UID\n-   and the OBJ_TYPE_REF_TOKEN from ADDR.  For C++ virtual calls, the token\n-   is the vtable slot index that we will need to put in the virtual call\n-   table later.  */\n-\n-static void\n-dwarf2out_virtual_call_token (tree addr, int insn_uid)\n-{\n-  if (is_cxx() && TREE_CODE (addr) == OBJ_TYPE_REF)\n-    {\n-      tree token = OBJ_TYPE_REF_TOKEN (addr);\n-      if (TREE_CODE (token) == INTEGER_CST)\n-        store_vcall_insn (TREE_INT_CST_LOW (token), insn_uid);\n-    }\n-}\n-\n-/* Called when scheduling RTL, when a CALL_INSN is split.  Copies the\n-   OBJ_TYPE_REF_TOKEN previously associated with OLD_INSN and associates it\n-   with NEW_INSN.  */\n-\n-static void\n-dwarf2out_copy_call_info (rtx old_insn, rtx new_insn)\n-{\n-  unsigned int vtable_slot = lookup_vcall_insn (INSN_UID (old_insn));\n-\n-  if (vtable_slot != (unsigned int) -1)\n-    store_vcall_insn (vtable_slot, INSN_UID (new_insn));\n-}\n-\n-/* Called by the final INSN scan whenever we see a virtual function call.\n-   Make an entry into the virtual call table, recording the point of call\n-   and the slot index of the vtable entry used to call the virtual member\n-   function.  The slot index was associated with the INSN_UID during the\n-   lowering to RTL.  */\n-\n-static void\n-dwarf2out_virtual_call (int insn_uid)\n-{\n-  unsigned int vtable_slot = lookup_vcall_insn (insn_uid);\n-  vcall_entry e;\n-\n-  if (vtable_slot == (unsigned int) -1)\n-    return;\n-\n-  e.poc_label_num = poc_label_num++;\n-  e.vtable_slot = vtable_slot;\n-  VEC_safe_push (vcall_entry, gc, vcall_table, &e);\n-\n-  /* Drop a label at the return point to mark the point of call.  */\n-  ASM_OUTPUT_DEBUG_LABEL (asm_out_file, \"LPOC\", e.poc_label_num);\n-}\n-\n /* Called by the final INSN scan whenever we see a var location.  We\n    use it to drop labels in the right places, and throw the location in\n    our lookup table.  */\n@@ -22569,10 +22265,6 @@ dwarf2out_init (const char *filename ATTRIBUTE_UNUSED)\n   pubname_table = VEC_alloc (pubname_entry, gc, 32);\n   pubtype_table = VEC_alloc (pubname_entry, gc, 32);\n \n-  /* Allocate the table that maps insn UIDs to vtable slot indexes.  */\n-  vcall_insn_table = htab_create_ggc (10, vcall_insn_table_hash,\n-                                      vcall_insn_table_eq, NULL);\n-\n   incomplete_types = VEC_alloc (tree, gc, 64);\n \n   used_rtx_array = VEC_alloc (rtx, gc, 32);\n@@ -22593,10 +22285,6 @@ dwarf2out_init (const char *filename ATTRIBUTE_UNUSED)\n \t\t\t\t\tSECTION_DEBUG, NULL);\n   debug_pubtypes_section = get_section (DEBUG_PUBTYPES_SECTION,\n \t\t\t\t\tSECTION_DEBUG, NULL);\n-  debug_dcall_section = get_section (DEBUG_DCALL_SECTION,\n-\t\t\t             SECTION_DEBUG, NULL);\n-  debug_vcall_section = get_section (DEBUG_VCALL_SECTION,\n-\t\t\t\t     SECTION_DEBUG, NULL);\n   debug_str_section = get_section (DEBUG_STR_SECTION,\n \t\t\t\t   DEBUG_STR_SECTION_FLAGS, NULL);\n   debug_ranges_section = get_section (DEBUG_RANGES_SECTION,\n@@ -22990,7 +22678,6 @@ prune_unused_types (void)\n   limbo_die_node *node;\n   comdat_type_node *ctnode;\n   pubname_ref pub;\n-  dcall_entry *dcall;\n \n #if ENABLE_ASSERT_CHECKING\n   /* All the marks should already be clear.  */\n@@ -23021,10 +22708,6 @@ prune_unused_types (void)\n   for (i = 0; i < arange_table_in_use; i++)\n     prune_unused_types_mark (arange_table[i], 1);\n \n-  /* Mark nodes referenced from the direct call table.  */\n-  FOR_EACH_VEC_ELT (dcall_entry, dcall_table, i, dcall)\n-    prune_unused_types_mark (dcall->targ_die, 1);\n-\n   /* Get rid of nodes that aren't marked; and update the string counts.  */\n   if (debug_str_hash && debug_str_hash_forced)\n     htab_traverse (debug_str_hash, prune_indirect_string, NULL);\n@@ -23944,18 +23627,6 @@ dwarf2out_finish (const char *filename)\n \t}\n     }\n \n-  /* Output direct and virtual call tables if necessary.  */\n-  if (!VEC_empty (dcall_entry, dcall_table))\n-    {\n-      switch_to_section (debug_dcall_section);\n-      output_dcall_table ();\n-    }\n-  if (!VEC_empty (vcall_entry, vcall_table))\n-    {\n-      switch_to_section (debug_vcall_section);\n-      output_vcall_table ();\n-    }\n-\n   /* Output the address range information.  We only put functions in the arange\n      table, so don't write it out if we don't have any.  */\n   if (arange_table_in_use)"}, {"sha": "0924a50e51a035d34c950117be1217eb3454dd39", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae", "patch": "@@ -1,7 +1,7 @@\n /* Emit RTL for the GCC expander.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n    1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n-   2010\n+   2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -3477,10 +3477,6 @@ try_split (rtx pat, rtx trial, int last)\n \t      p = &XEXP (*p, 1);\n \t    *p = CALL_INSN_FUNCTION_USAGE (trial);\n \t    SIBLING_CALL_P (insn) = SIBLING_CALL_P (trial);\n-\n-\t    /* Update the debug information for the CALL_INSN.  */\n-\t    if (flag_enable_icf_debug)\n-\t      (*debug_hooks->copy_call_info) (trial, insn);\n \t  }\n     }\n "}, {"sha": "8296169968add54211e93557414c539291ef3954", "filename": "gcc/final.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae", "patch": "@@ -2680,26 +2680,6 @@ final_scan_insn (rtx insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \t/* Output assembler code from the template.  */\n \toutput_asm_insn (templ, recog_data.operand);\n \n-\t/* Record point-of-call information for ICF debugging.  */\n-\tif (flag_enable_icf_debug && CALL_P (insn))\n-\t  {\n-\t    rtx x = call_from_call_insn (insn);\n-\t    x = XEXP (x, 0);\n-\t    if (x && MEM_P (x))\n-\t      {\n-\t        if (GET_CODE (XEXP (x, 0)) == SYMBOL_REF)\n-\t          {\n-\t\t    tree t;\n-\t\t    x = XEXP (x, 0);\n-\t\t    t = SYMBOL_REF_DECL (x);\n-\t\t    if (t)\n-\t\t      (*debug_hooks->direct_call) (t);\n-\t          }\n-\t        else\n-\t          (*debug_hooks->virtual_call) (INSN_UID (insn));\n-\t      }\n-\t  }\n-\n \t/* Some target machines need to postscan each insn after\n \t   it is output.  */\n \tif (targetm.asm_out.final_postscan_insn)"}, {"sha": "255c68e7b048397a41d6119319568bab09822e4f", "filename": "gcc/sdbout.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae", "patch": "@@ -1,6 +1,6 @@\n /* Output sdb-format symbol table information from GNU compiler.\n    Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n+   2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -339,10 +339,6 @@ const struct gcc_debug_hooks sdb_debug_hooks =\n   debug_nothing_int,\t\t         /* handle_pch */\n   debug_nothing_rtx,\t\t         /* var_location */\n   debug_nothing_void,                    /* switch_text_section */\n-  debug_nothing_tree,\t\t         /* direct_call */\n-  debug_nothing_tree_int,\t\t /* virtual_call_token */\n-  debug_nothing_rtx_rtx,\t         /* copy_call_info */\n-  debug_nothing_uid,\t\t         /* virtual_call */\n   debug_nothing_tree_tree,\t\t /* set_name */\n   0,                                     /* start_end_main_source_file */\n   TYPE_SYMTAB_IS_POINTER                 /* tree_type_symtab_field */"}, {"sha": "ddbc2324a560b4b3cdc8aef9376401c5e210e4be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae", "patch": "@@ -1,5 +1,7 @@\n 2011-03-16  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* g++.dg/debug/dwarf2/icf.C: Adjust for -fenable-icf-debug removal.\n+\n \tPR debug/45882\n \t* gcc.dg/guality/pr45882.c: New test.\n "}, {"sha": "ca73ab72479515fa7b1d3d9a9fabaf1ffc983b4f", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/icf.C", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ficf.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ficf.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ficf.C?ref=c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae", "patch": "@@ -1,6 +1,5 @@\n-// Test support for ICF debugging. \n // { dg-do compile }\n-// { dg-options \"-O0 -gdwarf-2 -fenable-icf-debug -dA\" }\n+// { dg-options \"-O1 -gdwarf-2 -gno-strict-dwarf -fno-inline -dA\" }\n \n class A\n {\n@@ -37,14 +36,3 @@ test2(A* a)\n       b.work(a);\n     }\n }\n-\n-// Verify that we get .debug_dcall and .debug_vcall tables generated\n-// and that we see entries for both virtual calls. \n-// { dg-final { scan-assembler \"\\\\.section.*\\.debug_dcall\" } }\n-// { dg-final { scan-assembler \"\\\\.section.*\\.debug_vcall\" } }\n-// { dg-final { scan-assembler \"New caller\" } }\n-// { dg-final { scan-assembler \"Caller DIE offset\" } }\n-// { dg-final { scan-assembler \"Point of call\" } }\n-// { dg-final { scan-assembler \"Callee DIE offset\" } }\n-// { dg-final { scan-assembler \"0\\[ \\t\\]+.*Vtable slot\" } }\n-// { dg-final { scan-assembler \"0x1\\[ \\t\\]+.*Vtable slot\" } }"}, {"sha": "01191001ac238a04d583f5f2ccc1f514e22f3569", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae", "patch": "@@ -1,6 +1,6 @@\n /* Output VMS debug format symbol table information from GCC.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Douglas B. Rupp (rupp@gnat.com).\n    Updated by Bernard W. Giroud (bgiroud@users.sourceforge.net).\n@@ -205,10 +205,6 @@ const struct gcc_debug_hooks vmsdbg_debug_hooks\n    debug_nothing_int,\t\t  /* handle_pch */\n    debug_nothing_rtx,\t\t  /* var_location */\n    debug_nothing_void,            /* switch_text_section */\n-   debug_nothing_tree,\t\t  /* direct_call */\n-   debug_nothing_tree_int,\t  /* virtual_call_token */\n-   debug_nothing_rtx_rtx,\t  /* copy_call_info */\n-   debug_nothing_uid,\t\t  /* virtual_call */\n    debug_nothing_tree_tree,\t  /* set_name */\n    0,                             /* start_end_main_source_file */\n    TYPE_SYMTAB_IS_ADDRESS         /* tree_type_symtab_field */"}]}