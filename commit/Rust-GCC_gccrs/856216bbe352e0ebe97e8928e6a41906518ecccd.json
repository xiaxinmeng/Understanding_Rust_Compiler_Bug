{"sha": "856216bbe352e0ebe97e8928e6a41906518ecccd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU2MjE2YmJlMzUyZTBlYmU5N2U4OTI4ZTZhNDE5MDY1MThlY2NjZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-05-17T16:07:39Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-05-17T16:07:39Z"}, "message": "cp-tree.def (TEMPLATE_ID_EXPR): Update documentation.\n\n\t* cp-tree.def (TEMPLATE_ID_EXPR): Update documentation.\n\t* decl.c (grokfndecl): Don't allow inline declarations of friend\n\ttemplate specializations, or friend template specializations with\n\tdefault arguments.\n\t* pt.c (tsubst): Handle substitution into array types that does\n\tnot yield a fixed upper bound, even when not processing a\n\ttemplate.\n\t(tsubst_copy): Deal with the fact that the second operand to a\n\tTEMPLATE_ID_EXPR may be NULL_TREE, a TREE_LIST, or a TREE_VEC.\n\t* search.c (marked_pushdecls_p): Don't descend into\n\tTEMPLATE_TYPE_PARMs and the like.\n\t(unmarked_pushdecls_p): Likewise.\n\nFrom-SVN: r26975", "tree": {"sha": "1dce4b63bb4ce7fc0e23c2ea0df51506b7b87f22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dce4b63bb4ce7fc0e23c2ea0df51506b7b87f22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/856216bbe352e0ebe97e8928e6a41906518ecccd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/856216bbe352e0ebe97e8928e6a41906518ecccd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/856216bbe352e0ebe97e8928e6a41906518ecccd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/856216bbe352e0ebe97e8928e6a41906518ecccd/comments", "author": null, "committer": null, "parents": [{"sha": "a1b7f572ce36fbb9e05c1c3614c4132b28f18a85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b7f572ce36fbb9e05c1c3614c4132b28f18a85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1b7f572ce36fbb9e05c1c3614c4132b28f18a85"}], "stats": {"total": 77, "additions": 63, "deletions": 14}, "files": [{"sha": "bd03f2c6e5bc35d2d5af96ba6504ac1bf1ff75a4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856216bbe352e0ebe97e8928e6a41906518ecccd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856216bbe352e0ebe97e8928e6a41906518ecccd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=856216bbe352e0ebe97e8928e6a41906518ecccd", "patch": "@@ -1,5 +1,18 @@\n 1999-05-17  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* cp-tree.def (TEMPLATE_ID_EXPR): Update documentation.\n+\t* decl.c (grokfndecl): Don't allow inline declarations of friend\n+\ttemplate specializations, or friend template specializations with\n+\tdefault arguments.\n+\t* pt.c (tsubst): Handle substitution into array types that does\n+\tnot yield a fixed upper bound, even when not processing a\n+\ttemplate.\n+\t(tsubst_copy): Deal with the fact that the second operand to a\n+\tTEMPLATE_ID_EXPR may be NULL_TREE, a TREE_LIST, or a TREE_VEC.\n+\t* search.c (marked_pushdecls_p): Don't descend into\n+\tTEMPLATE_TYPE_PARMs and the like.\n+\t(unmarked_pushdecls_p): Likewise.\n+\t\n \t* call.c (build_over_call): Don't throw away\n \tinitializations/copies of empty classes; use MODIFY_EXPR and\n \tINIT_EXPR as for non-empty classes."}, {"sha": "70801fc9563c083ab811f836a171fbb1f35e1dd1", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856216bbe352e0ebe97e8928e6a41906518ecccd/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856216bbe352e0ebe97e8928e6a41906518ecccd/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=856216bbe352e0ebe97e8928e6a41906518ecccd", "patch": "@@ -173,10 +173,10 @@ DEFTREECODE (USING_DECL, \"using_decl\", 'd', 0)\n DEFTREECODE (DEFAULT_ARG, \"default_arg\", 'c', 2)\n \n /* A template-id, like foo<int>.  The first operand is the template.\n-   The second is the list of explicitly specified arguments.  The\n-   template will be a FUNCTION_DECL, TEMPLATE_DECL, or an OVERLOAD.\n-   If the template-id refers to a member template, the template may be\n-   an IDENTIFIER_NODE.  */\n+   The second is the TREE_LIST or TREE_VEC of explicitly specified\n+   arguments.  The template will be a FUNCTION_DECL, TEMPLATE_DECL, or\n+   an OVERLOAD.  If the template-id refers to a member template, the\n+   template may be an IDENTIFIER_NODE.  */\n DEFTREECODE (TEMPLATE_ID_EXPR, \"template_id_expr\", 'e', 2)\n \n /* An association between name and entity. Parameters are the scope"}, {"sha": "05a0340b0d4dbc02d032e14ef929f4eb3d25c235", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856216bbe352e0ebe97e8928e6a41906518ecccd/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856216bbe352e0ebe97e8928e6a41906518ecccd/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=856216bbe352e0ebe97e8928e6a41906518ecccd", "patch": "@@ -8710,6 +8710,7 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n {\n   tree cname, decl;\n   int staticp = ctype && TREE_CODE (type) == FUNCTION_TYPE;\n+  int has_default_arg = 0;\n   tree t;\n \n   if (ctype)\n@@ -8826,7 +8827,7 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n     if (TREE_PURPOSE (t)\n \t&& TREE_CODE (TREE_PURPOSE (t)) == DEFAULT_ARG)\n       {\n-\tadd_defarg_fn (decl);\n+\thas_default_arg = 1;\n \tbreak;\n       }\n \n@@ -8847,16 +8848,34 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n \t      return NULL_TREE;\n \t    }\n \n+\n \t  /* A friend declaration of the form friend void f<>().  Record\n \t     the information in the TEMPLATE_ID_EXPR.  */\n \t  SET_DECL_IMPLICIT_INSTANTIATION (decl);\n \t  DECL_TEMPLATE_INFO (decl)\n \t    = perm_tree_cons (TREE_OPERAND (orig_declarator, 0),\n \t\t\t      TREE_OPERAND (orig_declarator, 1),\n \t\t\t      NULL_TREE);\n+\n+\t  if (has_default_arg)\n+\t    {\n+\t      cp_error (\"default arguments are not allowed in declaration of friend template specialization `%D'\",\n+\t\t\tdecl);\n+\t      return NULL_TREE;\n+\t    }\n+\n+\t  if (inlinep)\n+\t    {\n+\t      cp_error (\"`inline' is not allowed in declaration of friend template specialization `%D'\", \n+\t\t\tdecl);\n+\t      return NULL_TREE;\n+\t    }\n \t}\n     }\n \n+  if (has_default_arg)\n+    add_defarg_fn (decl);\n+\n   /* Plain overloading: will not be grok'd by grokclassfn.  */\n   if (! ctype && ! processing_template_decl\n       && DECL_LANGUAGE (decl) != lang_c"}, {"sha": "59543ca0dfa7a6572d2435d782defcbf15a6e842", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856216bbe352e0ebe97e8928e6a41906518ecccd/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856216bbe352e0ebe97e8928e6a41906518ecccd/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=856216bbe352e0ebe97e8928e6a41906518ecccd", "patch": "@@ -6128,7 +6128,12 @@ tsubst (t, args, complain, in_decl)\n \tif (max == error_mark_node)\n \t  return error_mark_node;\n \n-\tif (processing_template_decl)\n+\tif (processing_template_decl \n+\t    /* When providing explicit arguments to a template\n+\t       function, but leaving some arguments for subsequent\n+\t       deduction, MAX may be template-dependent even if we're\n+\t       not PROCESSING_TEMPLATE_DECL.  */\n+\t    || TREE_CODE (max) != INTEGER_CST)\n \t  {\n \t    tree itype = make_node (INTEGER_TYPE);\n \t    TYPE_MIN_VALUE (itype) = size_zero_node;\n@@ -6908,9 +6913,20 @@ tsubst_copy (t, args, complain, in_decl)\n         /* Substituted template arguments */\n \ttree targs = tsubst_copy (TREE_OPERAND (t, 1), args, complain,\n \t\t\t\t  in_decl);\n-\ttree chain;\n-\tfor (chain = targs; chain; chain = TREE_CHAIN (chain))\n-\t  TREE_VALUE (chain) = maybe_fold_nontype_arg (TREE_VALUE (chain));\n+\n+\tif (targs && TREE_CODE (targs) == TREE_LIST)\n+\t  {\n+\t    tree chain;\n+\t    for (chain = targs; chain; chain = TREE_CHAIN (chain))\n+\t      TREE_VALUE (chain) = maybe_fold_nontype_arg (TREE_VALUE (chain));\n+\t  }\n+\telse if (targs)\n+\t  {\n+\t    int i;\n+\t    for (i = 0; i < TREE_VEC_LENGTH (targs); ++i)\n+\t      TREE_VEC_ELT (targs, i) \n+\t\t= maybe_fold_nontype_arg (TREE_VEC_ELT (targs, i));\n+\t  }\n \n \treturn lookup_template_function\n \t  (tsubst_copy (TREE_OPERAND (t, 0), args, complain, in_decl), targs);"}, {"sha": "121335898710042fbfe686b8e680372e804c0fba", "filename": "gcc/cp/search.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856216bbe352e0ebe97e8928e6a41906518ecccd/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856216bbe352e0ebe97e8928e6a41906518ecccd/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=856216bbe352e0ebe97e8928e6a41906518ecccd", "patch": "@@ -2122,15 +2122,17 @@ marked_pushdecls_p (binfo, data)\n      tree binfo;\n      void *data ATTRIBUTE_UNUSED;\n {\n-  return BINFO_PUSHDECLS_MARKED (binfo) ? binfo : NULL_TREE; \n+  return (CLASS_TYPE_P (BINFO_TYPE (binfo))\n+\t  && BINFO_PUSHDECLS_MARKED (binfo)) ? binfo : NULL_TREE; \n }\n \n static tree\n unmarked_pushdecls_p (binfo, data) \n      tree binfo;\n      void *data ATTRIBUTE_UNUSED;\n { \n-  return !BINFO_PUSHDECLS_MARKED (binfo) ? binfo : NULL_TREE;\n+  return (CLASS_TYPE_P (BINFO_TYPE (binfo))\n+\t  && !BINFO_PUSHDECLS_MARKED (binfo)) ? binfo : NULL_TREE;\n }\n \n #if 0"}, {"sha": "c3ee4c7aaefc9336ce7167bcd667f1098e938cbf", "filename": "gcc/testsuite/g++.old-deja/g++.pt/friend37.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856216bbe352e0ebe97e8928e6a41906518ecccd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856216bbe352e0ebe97e8928e6a41906518ecccd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend37.C?ref=856216bbe352e0ebe97e8928e6a41906518ecccd", "patch": "@@ -1,8 +1,7 @@\n // Build don't link:\n // Simplified from report by Volker Dobler <volker@hugo.physik.uni-konstanz.de>\n \n-// crash test - XFAIL *-*-*\n-\n template <class T> class A {\n-  friend int ice<>( int k=0 ); // ERROR - undeclared\n+  friend int ice<>( int k=0 ); // ERROR - default argument\n+  friend inline int f<>(double); // ERROR - inline\n };"}]}