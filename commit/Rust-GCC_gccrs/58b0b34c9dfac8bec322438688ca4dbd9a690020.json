{"sha": "58b0b34c9dfac8bec322438688ca4dbd9a690020", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThiMGIzNGM5ZGZhYzhiZWMzMjI0Mzg2ODhjYTRkYmQ5YTY5MDAyMA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-04-14T17:17:05Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-04-14T17:17:05Z"}, "message": "i386.h (LEGACY_INT_REG_P): New define.\n\n\t* config/i386/i386.h (LEGACY_INT_REG_P): New define.\n\t(LEGACY_INT_REGNO_P): Ditto.\n\t(GENERAL_REGNO_P): Use LEGACY_INT_REGNO_P.\n\t(ANY_MASK_REG_P): Remove.\n\t(BND_REG_P): Rename from ANY_BND_REG_P.\n\t* config/i386/i386.c (print_reg): Use LEGACY_INT_REG_P to print\n\tlegacy integer registers.  Do not handle MMX_REG_P in a special way.\n\tMerge 64byte and 32byte SSE handling.\n\nFrom-SVN: r222100", "tree": {"sha": "78161e05da424ef458cd716fd0fd664041ee5cb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78161e05da424ef458cd716fd0fd664041ee5cb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58b0b34c9dfac8bec322438688ca4dbd9a690020", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58b0b34c9dfac8bec322438688ca4dbd9a690020", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58b0b34c9dfac8bec322438688ca4dbd9a690020", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58b0b34c9dfac8bec322438688ca4dbd9a690020/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7701939727594d16b3f41ae07ab11e1f0eec14d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7701939727594d16b3f41ae07ab11e1f0eec14d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7701939727594d16b3f41ae07ab11e1f0eec14d3"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "6e1f1450971c39e86be9dc69877b20d24a437c05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58b0b34c9dfac8bec322438688ca4dbd9a690020/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58b0b34c9dfac8bec322438688ca4dbd9a690020/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58b0b34c9dfac8bec322438688ca4dbd9a690020", "patch": "@@ -1,3 +1,14 @@\n+2015-04-14  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (LEGACY_INT_REG_P): New define.\n+\t(LEGACY_INT_REGNO_P): Ditto.\n+\t(GENERAL_REGNO_P): Use LEGACY_INT_REGNO_P.\n+\t(ANY_MASK_REG_P): Remove.\n+\t(BND_REG_P): Rename from ANY_BND_REG_P.\n+\t* config/i386/i386.c (print_reg): Use LEGACY_INT_REG_P to print\n+\tlegacy integer registers.  Do not handle MMX_REG_P in a special way.\n+\tMerge 64byte and 32byte SSE handling.\n+\n 2015-04-14  Nick Clifton  <nickc@redhat.com>\n \n \t* expr.c (expand_assignment): Force an address offset computation"}, {"sha": "a607ef441ff9e60025f66bfbed27254029aeaa45", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58b0b34c9dfac8bec322438688ca4dbd9a690020/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58b0b34c9dfac8bec322438688ca4dbd9a690020/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=58b0b34c9dfac8bec322438688ca4dbd9a690020", "patch": "@@ -15211,7 +15211,7 @@ print_reg (rtx x, int code, FILE *file)\n \t      && regno != FPSR_REG\n \t      && regno != FPCR_REG);\n \n-  if (code == 'w' || MMX_REG_P (x))\n+  if (code == 'w')\n     code = 2;\n   else if (code == 'b')\n     code = 1;\n@@ -15276,7 +15276,7 @@ print_reg (rtx x, int code, FILE *file)\n     case 8:\n     case 4:\n     case 12:\n-      if (! ANY_FP_REG_P (x) && ! ANY_MASK_REG_P (x) && ! ANY_BND_REG_P (x))\n+      if (LEGACY_INT_REG_P (x))\n \tputc (code == 8 && TARGET_64BIT ? 'r' : 'e', file);\n       /* FALLTHRU */\n     case 16:\n@@ -15295,21 +15295,14 @@ print_reg (rtx x, int code, FILE *file)\n       reg = qi_high_reg_name[regno];\n       break;\n     case 32:\n+    case 64:\n       if (SSE_REG_P (x))\n \t{\n \t  gcc_assert (!duplicated);\n-\t  putc ('y', file);\n+\t  putc (code == 32 ? 'y' : 'z', file);\n \t  fputs (hi_reg_name[regno] + 1, file);\n \t  return;\n \t}\n-    case 64:\n-      if (SSE_REG_P (x))\n-        {\n-          gcc_assert (!duplicated);\n-          putc ('z', file);\n-          fputs (hi_reg_name[REGNO (x)] + 1, file);\n-          return;\n-        }\n       break;\n     default:\n       gcc_unreachable ();"}, {"sha": "0dbe7b4561a4b02dfe1277941ecd95adc25932ca", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58b0b34c9dfac8bec322438688ca4dbd9a690020/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58b0b34c9dfac8bec322438688ca4dbd9a690020/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=58b0b34c9dfac8bec322438688ca4dbd9a690020", "patch": "@@ -1446,15 +1446,17 @@ enum reg_class\n #define QI_REG_P(X) (REG_P (X) && QI_REGNO_P (REGNO (X)))\n #define QI_REGNO_P(N) IN_RANGE ((N), AX_REG, BX_REG)\n \n-#define GENERAL_REG_P(X) \\\n-  (REG_P (X) && GENERAL_REGNO_P (REGNO (X)))\n+#define GENERAL_REG_P(X) (REG_P (X) && GENERAL_REGNO_P (REGNO (X)))\n #define GENERAL_REGNO_P(N) \\\n-  (IN_RANGE ((N), AX_REG, SP_REG) || REX_INT_REGNO_P (N))\n+  (LEGACY_INT_REGNO_P (N) || REX_INT_REGNO_P (N))\n \n #define ANY_QI_REG_P(X) (REG_P (X) && ANY_QI_REGNO_P (REGNO (X)))\n #define ANY_QI_REGNO_P(N) \\\n   (TARGET_64BIT ? GENERAL_REGNO_P (N) : QI_REGNO_P (N))\n \n+#define LEGACY_INT_REG_P(X) (REG_P (X) && LEGACY_INT_REGNO_P (REGNO (X)))\n+#define LEGACY_INT_REGNO_P(N) (IN_RANGE ((N), AX_REG, SP_REG))\n+\n #define REX_INT_REG_P(X) (REG_P (X) && REX_INT_REGNO_P (REGNO (X)))\n #define REX_INT_REGNO_P(N) \\\n   IN_RANGE ((N), FIRST_REX_INT_REG, LAST_REX_INT_REG)\n@@ -1487,7 +1489,6 @@ enum reg_class\n \n #define MASK_REG_P(X) (REG_P (X) && MASK_REGNO_P (REGNO (X)))\n #define MASK_REGNO_P(N) IN_RANGE ((N), FIRST_MASK_REG, LAST_MASK_REG)\n-#define ANY_MASK_REG_P(X) (REG_P (X) && MASK_REGNO_P (REGNO (X)))\n \n #define SSE_FLOAT_MODE_P(MODE) \\\n   ((TARGET_SSE && (MODE) == SFmode) || (TARGET_SSE2 && (MODE) == DFmode))\n@@ -1504,8 +1505,8 @@ enum reg_class\n #define CC_REG_P(X) (REG_P (X) && CC_REGNO_P (REGNO (X)))\n #define CC_REGNO_P(X) ((X) == FLAGS_REG || (X) == FPSR_REG)\n \n+#define BND_REG_P(X) (REG_P (X) && BND_REGNO_P (REGNO (X)))\n #define BND_REGNO_P(N) IN_RANGE ((N), FIRST_BND_REG, LAST_BND_REG)\n-#define ANY_BND_REG_P(X) (REG_P (X) && BND_REGNO_P (REGNO (X)))\n \n /* The class value for index registers, and the one for base regs.  */\n "}]}