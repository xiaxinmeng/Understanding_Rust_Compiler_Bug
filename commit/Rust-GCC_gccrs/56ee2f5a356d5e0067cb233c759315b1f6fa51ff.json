{"sha": "56ee2f5a356d5e0067cb233c759315b1f6fa51ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZlZTJmNWEzNTZkNWUwMDY3Y2IyMzNjNzU5MzE1YjFmNmZhNTFmZg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-02-18T21:35:44Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-02-18T21:35:44Z"}, "message": "2011-02-18  Tobias Burnus\n\n        PR fortran/47775\n        * trans-expr.c (arrayfunc_assign_needs_temporary): Use\n        esym to check whether the specific procedure returns an\n        allocatable or pointer.\n\n2011-02-18  Tobias Burnus\n\n        PR fortran/47775\n        * gfortran.dg/func_result_6.f90: New.\n\nFrom-SVN: r170289", "tree": {"sha": "a6d48e0ab40d9ca539dea5cc470f0c583f2f348d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6d48e0ab40d9ca539dea5cc470f0c583f2f348d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56ee2f5a356d5e0067cb233c759315b1f6fa51ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56ee2f5a356d5e0067cb233c759315b1f6fa51ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56ee2f5a356d5e0067cb233c759315b1f6fa51ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56ee2f5a356d5e0067cb233c759315b1f6fa51ff/comments", "author": null, "committer": null, "parents": [{"sha": "eddabc80ca0e2fcdcf45fc55a9604145a46b857a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eddabc80ca0e2fcdcf45fc55a9604145a46b857a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eddabc80ca0e2fcdcf45fc55a9604145a46b857a"}], "stats": {"total": 95, "additions": 92, "deletions": 3}, "files": [{"sha": "2e9fc8c4948525ad28252c637e2ac5cf6cf1333b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ee2f5a356d5e0067cb233c759315b1f6fa51ff/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ee2f5a356d5e0067cb233c759315b1f6fa51ff/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=56ee2f5a356d5e0067cb233c759315b1f6fa51ff", "patch": "@@ -1,3 +1,10 @@\n+2011-02-18  Tobias Burnus\n+\n+\tPR fortran/47775\n+\t* trans-expr.c (arrayfunc_assign_needs_temporary): Use\n+\tesym to check whether the specific procedure returns an\n+\tallocatable or pointer.\n+\n 2011-02-18  Michael Matz  <matz@suse.de>\n \n \tPR fortran/45586"}, {"sha": "d6c1f9f5a170bf96f2c294d32d12af72de040dfa", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ee2f5a356d5e0067cb233c759315b1f6fa51ff/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ee2f5a356d5e0067cb233c759315b1f6fa51ff/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=56ee2f5a356d5e0067cb233c759315b1f6fa51ff", "patch": "@@ -5392,9 +5392,13 @@ arrayfunc_assign_needs_temporary (gfc_expr * expr1, gfc_expr * expr2)\n   if (gfc_ref_needs_temporary_p (expr1->ref))\n     return true;\n \n-  /* Functions returning pointers need temporaries.  */\n-  if (expr2->symtree->n.sym->attr.pointer \n-      || expr2->symtree->n.sym->attr.allocatable)\n+  /* Functions returning pointers or allocatables need temporaries.  */\n+  c = expr2->value.function.esym\n+      ? (expr2->value.function.esym->attr.pointer \n+\t || expr2->value.function.esym->attr.allocatable)\n+      : (expr2->symtree->n.sym->attr.pointer\n+\t || expr2->symtree->n.sym->attr.allocatable);\n+  if (c)\n     return true;\n \n   /* Character array functions need temporaries unless the"}, {"sha": "f023a37e5b0cba676a559554b2560e3aea6ed02e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ee2f5a356d5e0067cb233c759315b1f6fa51ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ee2f5a356d5e0067cb233c759315b1f6fa51ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=56ee2f5a356d5e0067cb233c759315b1f6fa51ff", "patch": "@@ -1,3 +1,8 @@\n+2011-02-18  Tobias Burnus\n+\n+\tPR fortran/47775\n+\t* gfortran.dg/func_result_6.f90: New.\n+\n 2011-02-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/47795"}, {"sha": "e64a2ef7abc83262b826ade5c4e5f7f50da55984", "filename": "gcc/testsuite/gfortran.dg/func_result_6.f90", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ee2f5a356d5e0067cb233c759315b1f6fa51ff/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_result_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ee2f5a356d5e0067cb233c759315b1f6fa51ff/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_result_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_result_6.f90?ref=56ee2f5a356d5e0067cb233c759315b1f6fa51ff", "patch": "@@ -0,0 +1,73 @@\n+! { dg-do run }\n+!\n+! PR fortran/47775\n+!\n+! Contributed by Fran Martinez Fadrique\n+!\n+! Before, a temporary was missing for generic procedured (cf. test())\n+! as the allocatable attribute was ignored for the check whether a\n+! temporary is required\n+!\n+module m\n+type t\n+contains\n+  procedure, NOPASS :: foo => foo\n+  generic :: gen => foo\n+end type t\n+contains\n+  function foo(i)\n+    integer, allocatable :: foo(:)\n+    integer :: i\n+    allocate(foo(2))\n+    foo(1) = i\n+    foo(2) = i + 10\n+  end function foo\n+end module m\n+\n+use m\n+type(t) :: x\n+integer, pointer :: ptr1, ptr2\n+integer, target              :: bar1(2)\n+integer, target, allocatable :: bar2(:)\n+\n+allocate(bar2(2))\n+ptr1 => bar1(2)\n+ptr2 => bar2(2)\n+\n+bar1 = x%gen(1)\n+if (ptr1 /= 11) call abort()\n+bar1 = x%foo(2)\n+if (ptr1 /= 12) call abort()\n+bar2 = x%gen(3)\n+if (ptr2 /= 13) call abort()\n+bar2 = x%foo(4)\n+if (ptr2 /= 14) call abort()\n+bar2(:) = x%gen(5)\n+if (ptr2 /= 15) call abort()\n+bar2(:) = x%foo(6)\n+if (ptr2 /= 16) call abort()\n+\n+call test()\n+end\n+\n+subroutine test\n+interface gen\n+  procedure foo\n+end interface gen\n+\n+integer, target :: bar(2)\n+integer, pointer :: ptr\n+bar = [1,2]\n+ptr => bar(2)\n+if (ptr /= 2) call abort()\n+bar = gen()\n+if (ptr /= 77) call abort()\n+contains\n+  function foo()\n+    integer, allocatable :: foo(:)\n+    allocate(foo(2))\n+    foo = [33, 77]\n+  end function foo\n+end subroutine test\n+\n+! { dg-final { cleanup-modules \"m\" } }"}]}