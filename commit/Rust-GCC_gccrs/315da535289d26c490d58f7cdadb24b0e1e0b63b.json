{"sha": "315da535289d26c490d58f7cdadb24b0e1e0b63b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE1ZGE1MzUyODlkMjZjNDkwZDU4ZjdjZGFkYjI0YjBlMWUwYjYzYg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-01-02T00:44:24Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-01-02T00:44:24Z"}, "message": "(build_binary_op): Add 'right' and 'left' to shift\ncount warnings to distinguish them from each other.\n\nFrom-SVN: r3048", "tree": {"sha": "bf6f5fd557134040a6a9b98282fbdda996c71e72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf6f5fd557134040a6a9b98282fbdda996c71e72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/315da535289d26c490d58f7cdadb24b0e1e0b63b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/315da535289d26c490d58f7cdadb24b0e1e0b63b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/315da535289d26c490d58f7cdadb24b0e1e0b63b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/315da535289d26c490d58f7cdadb24b0e1e0b63b/comments", "author": null, "committer": null, "parents": [{"sha": "77121feee43d5dd0f08d2d1b37f0363a39cba7ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77121feee43d5dd0f08d2d1b37f0363a39cba7ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77121feee43d5dd0f08d2d1b37f0363a39cba7ec"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "756b610e382bb8b51395803cac56f6ab33d8a778", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315da535289d26c490d58f7cdadb24b0e1e0b63b/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315da535289d26c490d58f7cdadb24b0e1e0b63b/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=315da535289d26c490d58f7cdadb24b0e1e0b63b", "patch": "@@ -2373,15 +2373,15 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t  if (TREE_CODE (op1) == INTEGER_CST)\n \t    {\n \t      if (tree_int_cst_lt (op1, integer_zero_node))\n-\t\twarning (\"shift count is negative\");\n+\t\twarning (\"right shift count is negative\");\n \t      else\n \t\t{\n \t\t  if (TREE_INT_CST_LOW (op1) | TREE_INT_CST_HIGH (op1))\n \t\t    short_shift = 1;\n \t\t  if (TREE_INT_CST_HIGH (op1) != 0\n \t\t      || ((unsigned HOST_WIDE_INT) TREE_INT_CST_LOW (op1)\n \t\t\t  >= TYPE_PRECISION (type0)))\n-\t\t    warning (\"shift count >= width of type\");\n+\t\t    warning (\"right shift count >= width of type\");\n \t\t}\n \t    }\n \t  /* Use the type of the value to be shifted.\n@@ -2405,11 +2405,11 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t  if (TREE_CODE (op1) == INTEGER_CST)\n \t    {\n \t      if (tree_int_cst_lt (op1, integer_zero_node))\n-\t\twarning (\"shift count is negative\");\n+\t\twarning (\"left shift count is negative\");\n \t      else if (TREE_INT_CST_HIGH (op1) != 0\n \t\t       || ((unsigned HOST_WIDE_INT) TREE_INT_CST_LOW (op1)\n \t\t\t   >= TYPE_PRECISION (type0)))\n-\t\twarning (\"shift count >= width of type\");\n+\t\twarning (\"left shift count >= width of type\");\n \t    }\n \t  /* Use the type of the value to be shifted.\n \t     This is what most traditional C compilers do.  */"}]}