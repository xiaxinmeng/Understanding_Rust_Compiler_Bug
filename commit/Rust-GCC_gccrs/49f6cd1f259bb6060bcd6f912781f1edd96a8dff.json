{"sha": "49f6cd1f259bb6060bcd6f912781f1edd96a8dff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDlmNmNkMWYyNTliYjYwNjBiY2Q2ZjkxMjc4MWYxZWRkOTZhOGRmZg==", "commit": {"author": {"name": "Dan Witte", "email": "dwitte@mozilla.com", "date": "2010-08-06T12:36:26Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2010-08-06T12:36:26Z"}, "message": "Add OS/2 Support\n\nCo-Authored-By: Walter Meinl <wuno@lsvw.de>\n\nFrom-SVN: r162946", "tree": {"sha": "02af6ec2048061606bff1bfc6d433e5b59af24a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02af6ec2048061606bff1bfc6d433e5b59af24a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49f6cd1f259bb6060bcd6f912781f1edd96a8dff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49f6cd1f259bb6060bcd6f912781f1edd96a8dff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49f6cd1f259bb6060bcd6f912781f1edd96a8dff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49f6cd1f259bb6060bcd6f912781f1edd96a8dff/comments", "author": null, "committer": null, "parents": [{"sha": "3d420bdf4deea364fde519d56be32731a83a6ad4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d420bdf4deea364fde519d56be32731a83a6ad4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d420bdf4deea364fde519d56be32731a83a6ad4"}], "stats": {"total": 99, "additions": 89, "deletions": 10}, "files": [{"sha": "7421806dc8b2213dadcd8e627116763fa6369517", "filename": "libffi/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49f6cd1f259bb6060bcd6f912781f1edd96a8dff/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49f6cd1f259bb6060bcd6f912781f1edd96a8dff/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=49f6cd1f259bb6060bcd6f912781f1edd96a8dff", "patch": "@@ -36,6 +36,15 @@\n \t* configure.ac: Ditto.\n \t* configure: Rebuilt.\n \n+2010-04-12  Dan Witte  <dwitte@mozilla.com>\n+\t    Walter Meinl <wuno@lsvw.de>\n+\n+\t* configure.ac: Add OS/2 support.\n+\t* configure: Rebuilt.\n+\t* src/closures.c: Ditto.\n+\t* src/dlmalloc.c: Ditto.\n+\t* src/x86/win32.S: Ditto.\n+\n 2010-04-07  Jakub Jelinek  <jakub@redhat.com>\n \n \t* regex.c (byte_re_match_2_internal): Avoid set but not used"}, {"sha": "3e3ab3fc950a3ef44a8d5badf8ddecb611c9c0b1", "filename": "libffi/README", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49f6cd1f259bb6060bcd6f912781f1edd96a8dff/libffi%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49f6cd1f259bb6060bcd6f912781f1edd96a8dff/libffi%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FREADME?ref=49f6cd1f259bb6060bcd6f912781f1edd96a8dff", "patch": "@@ -77,6 +77,7 @@ tested:\n | X86          | Linux            |\n | X86          | Mac OSX          |\n | X86          | OpenBSD          |\n+| X86          | OS/2             |\n | X86          | Solaris          |\n | X86          | Windows/Cygwin   |\n | X86          | Windows/MingW    |"}, {"sha": "860bddd69eb7ce2c156f7645dc901af914758e0c", "filename": "libffi/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49f6cd1f259bb6060bcd6f912781f1edd96a8dff/libffi%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49f6cd1f259bb6060bcd6f912781f1edd96a8dff/libffi%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure?ref=49f6cd1f259bb6060bcd6f912781f1edd96a8dff", "patch": "@@ -11357,7 +11357,7 @@ case \"$host\" in\n   i?86-*-freebsd* | i?86-*-openbsd*)\n \tTARGET=X86_FREEBSD; TARGETDIR=x86\n \t;;\n-  i?86-win32* | i?86-*-cygwin* | i?86-*-mingw*)\n+  i?86-win32* | i?86-*-cygwin* | i?86-*-mingw* | i?86-*-os2*)\n \tTARGET=X86_WIN32; TARGETDIR=x86\n \t# All mingw/cygwin/win32 builds require this for sharedlib\n \tAM_LTLDFLAGS=\"-no-undefined\""}, {"sha": "64e80e2e7f7ca4c27e044455acd987dc8fcd6b55", "filename": "libffi/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49f6cd1f259bb6060bcd6f912781f1edd96a8dff/libffi%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49f6cd1f259bb6060bcd6f912781f1edd96a8dff/libffi%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure.ac?ref=49f6cd1f259bb6060bcd6f912781f1edd96a8dff", "patch": "@@ -80,7 +80,7 @@ case \"$host\" in\n   i?86-*-freebsd* | i?86-*-openbsd*)\n \tTARGET=X86_FREEBSD; TARGETDIR=x86\n \t;;\n-  i?86-win32* | i?86-*-cygwin* | i?86-*-mingw*)\n+  i?86-win32* | i?86-*-cygwin* | i?86-*-mingw* | i?86-*-os2*)\n \tTARGET=X86_WIN32; TARGETDIR=x86\n \t# All mingw/cygwin/win32 builds require this for sharedlib\n \tAM_LTLDFLAGS=\"-no-undefined\""}, {"sha": "8f295dddc3c286cae949274aa08c9d55bfa44972", "filename": "libffi/src/closures.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49f6cd1f259bb6060bcd6f912781f1edd96a8dff/libffi%2Fsrc%2Fclosures.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49f6cd1f259bb6060bcd6f912781f1edd96a8dff/libffi%2Fsrc%2Fclosures.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fclosures.c?ref=49f6cd1f259bb6060bcd6f912781f1edd96a8dff", "patch": "@@ -44,7 +44,7 @@\n #  define FFI_MMAP_EXEC_WRIT 1\n #  define HAVE_MNTENT 1\n # endif\n-# if defined(X86_WIN32) || defined(X86_WIN64)\n+# if defined(X86_WIN32) || defined(X86_WIN64) || defined(__OS2__)\n /* Windows systems may have Data Execution Protection (DEP) enabled, \n    which requires the use of VirtualMalloc/VirtualFree to alloc/free\n    executable memory. */\n@@ -193,11 +193,11 @@ static int dlmalloc_trim(size_t) MAYBE_UNUSED;\n static size_t dlmalloc_usable_size(void*) MAYBE_UNUSED;\n static void dlmalloc_stats(void) MAYBE_UNUSED;\n \n-#if !(defined(X86_WIN32) || defined(X86_WIN64)) || defined (__CYGWIN__)\n+#if !(defined(X86_WIN32) || defined(X86_WIN64) || defined(__OS2__)) || defined (__CYGWIN__)\n /* Use these for mmap and munmap within dlmalloc.c.  */\n static void *dlmmap(void *, size_t, int, int, int, off_t);\n static int dlmunmap(void *, size_t);\n-#endif /* !(defined(X86_WIN32) || defined(X86_WIN64)) || defined (__CYGWIN__) */\n+#endif /* !(defined(X86_WIN32) || defined(X86_WIN64) || defined(__OS2__)) || defined (__CYGWIN__) */\n \n #define mmap dlmmap\n #define munmap dlmunmap\n@@ -207,7 +207,7 @@ static int dlmunmap(void *, size_t);\n #undef mmap\n #undef munmap\n \n-#if !(defined(X86_WIN32) || defined(X86_WIN64)) || defined (__CYGWIN__)\n+#if !(defined(X86_WIN32) || defined(X86_WIN64) || defined(__OS2__)) || defined (__CYGWIN__)\n \n /* A mutex used to synchronize access to *exec* variables in this file.  */\n static pthread_mutex_t open_temp_exec_file_mutex = PTHREAD_MUTEX_INITIALIZER;\n@@ -522,7 +522,7 @@ segment_holding_code (mstate m, char* addr)\n }\n #endif\n \n-#endif /* !(defined(X86_WIN32) || defined(X86_WIN64)) || defined (__CYGWIN__) */\n+#endif /* !(defined(X86_WIN32) || defined(X86_WIN64) || defined(__OS2__)) || defined (__CYGWIN__) */\n \n /* Allocate a chunk of memory with the given size.  Returns a pointer\n    to the writable address, and sets *CODE to the executable"}, {"sha": "0fa235af22e360555aef95300fdc649878197aff", "filename": "libffi/src/dlmalloc.c", "status": "modified", "additions": 62, "deletions": 3, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49f6cd1f259bb6060bcd6f912781f1edd96a8dff/libffi%2Fsrc%2Fdlmalloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49f6cd1f259bb6060bcd6f912781f1edd96a8dff/libffi%2Fsrc%2Fdlmalloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fdlmalloc.c?ref=49f6cd1f259bb6060bcd6f912781f1edd96a8dff", "patch": "@@ -459,6 +459,14 @@ DEFAULT_MMAP_THRESHOLD       default: 256K\n #define MMAP_CLEARS 0 /* WINCE and some others apparently don't clear */\n #endif  /* WIN32 */\n \n+#ifdef __OS2__\n+#define INCL_DOS\n+#include <os2.h>\n+#define HAVE_MMAP 1\n+#define HAVE_MORECORE 0\n+#define LACKS_SYS_MMAN_H\n+#endif  /* __OS2__ */\n+\n #if defined(DARWIN) || defined(_DARWIN)\n /* Mac OSX docs advise not to use sbrk; it seems better to use mmap */\n #ifndef HAVE_MORECORE\n@@ -1288,7 +1296,7 @@ extern void*     sbrk(ptrdiff_t);\n #define IS_MMAPPED_BIT       (SIZE_T_ONE)\n #define USE_MMAP_BIT         (SIZE_T_ONE)\n \n-#ifndef WIN32\n+#if !defined(WIN32) && !defined (__OS2__)\n #define CALL_MUNMAP(a, s)    munmap((a), (s))\n #define MMAP_PROT            (PROT_READ|PROT_WRITE)\n #if !defined(MAP_ANONYMOUS) && defined(MAP_ANON)\n@@ -1311,6 +1319,42 @@ static int dev_zero_fd = -1; /* Cached file descriptor for /dev/zero. */\n #endif /* MAP_ANONYMOUS */\n \n #define DIRECT_MMAP(s)       CALL_MMAP(s)\n+\n+#elif defined(__OS2__)\n+\n+/* OS/2 MMAP via DosAllocMem */\n+static void* os2mmap(size_t size) {\n+  void* ptr;\n+  if (DosAllocMem(&ptr, size, OBJ_ANY|PAG_COMMIT|PAG_READ|PAG_WRITE) &&\n+      DosAllocMem(&ptr, size, PAG_COMMIT|PAG_READ|PAG_WRITE))\n+    return MFAIL;\n+  return ptr;\n+}\n+\n+#define os2direct_mmap(n)     os2mmap(n)\n+\n+/* This function supports releasing coalesed segments */\n+static int os2munmap(void* ptr, size_t size) {\n+  while (size) {\n+    ULONG ulSize = size;\n+    ULONG ulFlags = 0;\n+    if (DosQueryMem(ptr, &ulSize, &ulFlags) != 0)\n+      return -1;\n+    if ((ulFlags & PAG_BASE) == 0 ||(ulFlags & PAG_COMMIT) == 0 ||\n+        ulSize > size)\n+      return -1;\n+    if (DosFreeMem(ptr) != 0)\n+      return -1;\n+    ptr = ( void * ) ( ( char * ) ptr + ulSize );\n+    size -= ulSize;\n+  }\n+  return 0;\n+}\n+\n+#define CALL_MMAP(s)         os2mmap(s)\n+#define CALL_MUNMAP(a, s)    os2munmap((a), (s))\n+#define DIRECT_MMAP(s)       os2direct_mmap(s)\n+\n #else /* WIN32 */\n \n /* Win32 MMAP via VirtualAlloc */\n@@ -1387,7 +1431,7 @@ static int win32munmap(void* ptr, size_t size) {\n     unique mparams values are initialized only once.\n */\n \n-#ifndef WIN32\n+#if !defined(WIN32) && !defined(__OS2__)\n /* By default use posix locks */\n #include <pthread.h>\n #define MLOCK_T pthread_mutex_t\n@@ -1401,6 +1445,16 @@ static MLOCK_T morecore_mutex = PTHREAD_MUTEX_INITIALIZER;\n \n static MLOCK_T magic_init_mutex = PTHREAD_MUTEX_INITIALIZER;\n \n+#elif defined(__OS2__)\n+#define MLOCK_T HMTX\n+#define INITIAL_LOCK(l)      DosCreateMutexSem(0, l, 0, FALSE)\n+#define ACQUIRE_LOCK(l)      DosRequestMutexSem(*l, SEM_INDEFINITE_WAIT)\n+#define RELEASE_LOCK(l)      DosReleaseMutexSem(*l)\n+#if HAVE_MORECORE\n+static MLOCK_T morecore_mutex;\n+#endif /* HAVE_MORECORE */\n+static MLOCK_T magic_init_mutex;\n+\n #else /* WIN32 */\n /*\n    Because lock-protected regions have bounded times, and there\n@@ -2492,10 +2546,15 @@ static int init_mparams(void) {\n     }\n     RELEASE_MAGIC_INIT_LOCK();\n \n-#ifndef WIN32\n+#if !defined(WIN32) && !defined(__OS2__)\n     mparams.page_size = malloc_getpagesize;\n     mparams.granularity = ((DEFAULT_GRANULARITY != 0)?\n                            DEFAULT_GRANULARITY : mparams.page_size);\n+#elif defined (__OS2__)\n+ /* if low-memory is used, os2munmap() would break\n+    if it were anything other than 64k */\n+    mparams.page_size = 4096u;\n+    mparams.granularity = 65536u;\n #else /* WIN32 */\n     {\n       SYSTEM_INFO system_info;"}, {"sha": "34ec0fd82becf08e0b38eca394c17b25ad609dc0", "filename": "libffi/src/x86/win32.S", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49f6cd1f259bb6060bcd6f912781f1edd96a8dff/libffi%2Fsrc%2Fx86%2Fwin32.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49f6cd1f259bb6060bcd6f912781f1edd96a8dff/libffi%2Fsrc%2Fx86%2Fwin32.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fwin32.S?ref=49f6cd1f259bb6060bcd6f912781f1edd96a8dff", "patch": "@@ -395,7 +395,9 @@ END\n         # This assumes we are using gas.\n         .balign 16\n \t.globl\t_ffi_call_win32\n+#ifndef __OS2__\n \t.def\t_ffi_call_win32;\t.scl\t2;\t.type\t32;\t.endef\n+#endif\n _ffi_call_win32:\n .LFB1:\n         pushl %ebp\n@@ -547,7 +549,9 @@ _ffi_call_win32:\n         # This assumes we are using gas.\n         .balign 16\n \t.globl\t_ffi_closure_SYSV\n+#ifndef __OS2__\n \t.def\t_ffi_closure_SYSV;\t.scl\t2;\t.type\t32;\t.endef\n+#endif\n _ffi_closure_SYSV:\n .LFB3:\n \tpushl\t%ebp\n@@ -668,7 +672,9 @@ _ffi_closure_SYSV:\n         # This assumes we are using gas.\n         .balign 16\n \t.globl\t_ffi_closure_raw_SYSV\n+#ifndef __OS2__\n \t.def\t_ffi_closure_raw_SYSV;\t.scl\t2;\t.type\t32;\t.endef\n+#endif\n _ffi_closure_raw_SYSV:\n .LFB4:\n \tpushl\t%ebp\n@@ -784,7 +790,9 @@ _ffi_closure_raw_SYSV:\n         # This assumes we are using gas.\n \t.balign\t16\n \t.globl\t_ffi_closure_STDCALL\n+#ifndef __OS2__\n \t.def\t_ffi_closure_STDCALL;\t.scl\t2;\t.type\t32;\t.endef\n+#endif\n _ffi_closure_STDCALL:\n .LFB5:\n \tpushl\t%ebp\n@@ -890,7 +898,9 @@ _ffi_closure_STDCALL:\n .ffi_closure_STDCALL_end:\n .LFE5:\n \n+#ifndef __OS2__\n \t.section\t.eh_frame,\"w\"\n+#endif\n .Lframe1:\n .LSCIE1:\n \t.long\t.LECIE1-.LASCIE1  /* Length of Common Information Entry */"}]}