{"sha": "4089df8ef4a63126b0774c39b6638845244c20d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA4OWRmOGVmNGE2MzEyNmIwNzc0YzM5YjY2Mzg4NDUyNDRjMjBkMg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-06-09T11:03:55Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-06-09T12:35:43Z"}, "message": "sanitizer: do not inline no-sanitize into sanitizer fn\n\ngcc/ChangeLog:\n\n\t* cif-code.def (ATTRIBUTE_MISMATCH): Rename to...\n\t(SANITIZE_ATTRIBUTE_MISMATCH): ...this.\n\t* ipa-inline.c (sanitize_attrs_match_for_inline_p):\n\tHandle all sanitizer options.\n\t(can_inline_edge_p): Use renamed CIF_* enum value.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/asan/inline.c: New test.\n\t* c-c++-common/asan/inline-kernel.c: New test.\n\t* c-c++-common/tsan/inline.c: New test.\n\t* c-c++-common/ubsan/inline.c: New test.", "tree": {"sha": "37e0c330769dc4cfd24d1f1477b48f588e36f1dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37e0c330769dc4cfd24d1f1477b48f588e36f1dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4089df8ef4a63126b0774c39b6638845244c20d2", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl7fgh8ACgkQTcGC3A+n\nN4Ut9wgAw7quNLJaL4B4RWfgb0EYf7o+GLp15Pi2oBSP8yfvdB9oA8F4nRmayTNi\n28Yqm7/nbSTy6LGkurHEnFCUgniIc60bT2BmOLg95FtxmMCPRTkTnRNeQ/UjF84j\n23McrQroKhVa604k7rxkK4Xevwt1qBahpy+nf2k2co/V9wvnbrLTqAI+ldU1YSZ4\nvwVYBF+Kim/CsueeGr3uqKSrll/FDQb2miQ+h+5cHcANerIFFZyN/4+dPHLboeZm\ntQvuLwQtfB4PqgnIWFbYhP9stP3vvZkX1Zl6q9zodRHagKbeTV52Z7q8uvL6Onsv\nxjNd95Qm7V7ujJ8XFLm2/t756cTi4Q==\n=aV0f\n-----END PGP SIGNATURE-----", "payload": "tree 37e0c330769dc4cfd24d1f1477b48f588e36f1dd\nparent bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6\nauthor Martin Liska <mliska@suse.cz> 1591700635 +0200\ncommitter Martin Liska <mliska@suse.cz> 1591706143 +0200\n\nsanitizer: do not inline no-sanitize into sanitizer fn\n\ngcc/ChangeLog:\n\n\t* cif-code.def (ATTRIBUTE_MISMATCH): Rename to...\n\t(SANITIZE_ATTRIBUTE_MISMATCH): ...this.\n\t* ipa-inline.c (sanitize_attrs_match_for_inline_p):\n\tHandle all sanitizer options.\n\t(can_inline_edge_p): Use renamed CIF_* enum value.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/asan/inline.c: New test.\n\t* c-c++-common/asan/inline-kernel.c: New test.\n\t* c-c++-common/tsan/inline.c: New test.\n\t* c-c++-common/ubsan/inline.c: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4089df8ef4a63126b0774c39b6638845244c20d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4089df8ef4a63126b0774c39b6638845244c20d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4089df8ef4a63126b0774c39b6638845244c20d2/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb3ab62a8b4a108f01ea2eddfe31e9f733bd9cb6"}], "stats": {"total": 117, "additions": 103, "deletions": 14}, "files": [{"sha": "c65b2477203a48b1145820d1ac8216ff389ef492", "filename": "gcc/cif-code.def", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4089df8ef4a63126b0774c39b6638845244c20d2/gcc%2Fcif-code.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4089df8ef4a63126b0774c39b6638845244c20d2/gcc%2Fcif-code.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcif-code.def?ref=4089df8ef4a63126b0774c39b6638845244c20d2", "patch": "@@ -128,9 +128,10 @@ DEFCIFCODE(OPTIMIZATION_MISMATCH, CIF_FINAL_ERROR,\n DEFCIFCODE(USES_COMDAT_LOCAL, CIF_FINAL_ERROR,\n \t   N_(\"callee refers to comdat-local symbols\"))\n \n-/* We can't inline because of mismatched caller/callee attributes.  */\n-DEFCIFCODE(ATTRIBUTE_MISMATCH, CIF_FINAL_ERROR,\n-\t   N_(\"function attribute mismatch\"))\n+/* We can't inline because of mismatched caller/callee\n+   sanitizer attributes.  */\n+DEFCIFCODE(SANITIZE_ATTRIBUTE_MISMATCH, CIF_FINAL_ERROR,\n+\t   N_(\"sanitizer function attribute mismatch\"))\n \n /* We can't inline because the user requests only static functions\n    but the function has external linkage for live patching purpose.  */"}, {"sha": "c667de2a97cfb748ffce6cf6e778d6da25717b03", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4089df8ef4a63126b0774c39b6638845244c20d2/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4089df8ef4a63126b0774c39b6638845244c20d2/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=4089df8ef4a63126b0774c39b6638845244c20d2", "patch": "@@ -264,18 +264,26 @@ sanitize_attrs_match_for_inline_p (const_tree caller, const_tree callee)\n   if (!caller || !callee)\n     return true;\n \n-  /* Allow inlining always_inline functions into no_sanitize_address\n-     functions.  */\n-  if (!sanitize_flags_p (SANITIZE_ADDRESS, caller)\n-      && lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (callee)))\n+  /* Follow clang and allow inlining for always_inline functions.  */\n+  if (lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (callee)))\n     return true;\n \n-  return ((sanitize_flags_p (SANITIZE_ADDRESS, caller)\n-\t   == sanitize_flags_p (SANITIZE_ADDRESS, callee))\n-\t  && (sanitize_flags_p (SANITIZE_POINTER_COMPARE, caller)\n-\t      == sanitize_flags_p (SANITIZE_POINTER_COMPARE, callee))\n-\t  && (sanitize_flags_p (SANITIZE_POINTER_SUBTRACT, caller)\n-\t      == sanitize_flags_p (SANITIZE_POINTER_SUBTRACT, callee)));\n+  const sanitize_code codes[] =\n+    {\n+      SANITIZE_ADDRESS,\n+      SANITIZE_THREAD,\n+      SANITIZE_UNDEFINED,\n+      SANITIZE_UNDEFINED_NONDEFAULT,\n+      SANITIZE_POINTER_COMPARE,\n+      SANITIZE_POINTER_SUBTRACT\n+    };\n+\n+  for (unsigned i = 0; i < sizeof (codes) / sizeof (codes[0]); i++)\n+    if (sanitize_flags_p (codes[i], caller)\n+\t!= sanitize_flags_p (codes[i], callee))\n+      return false;\n+\n+  return true;\n }\n \n /* Used for flags where it is safe to inline when caller's value is\n@@ -382,7 +390,7 @@ can_inline_edge_p (struct cgraph_edge *e, bool report,\n   /* Don't inline a function with mismatched sanitization attributes. */\n   else if (!sanitize_attrs_match_for_inline_p (caller->decl, callee->decl))\n     {\n-      e->inline_failed = CIF_ATTRIBUTE_MISMATCH;\n+      e->inline_failed = CIF_SANITIZE_ATTRIBUTE_MISMATCH;\n       inlinable = false;\n     }\n   if (!inlinable && report)"}, {"sha": "4ca739b5d04e9ca15a63e219a9d95b773247dc9b", "filename": "gcc/testsuite/c-c++-common/asan/inline-kernel.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4089df8ef4a63126b0774c39b6638845244c20d2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finline-kernel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4089df8ef4a63126b0774c39b6638845244c20d2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finline-kernel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finline-kernel.c?ref=4089df8ef4a63126b0774c39b6638845244c20d2", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize=kernel-address -c -O3 -fdump-tree-optimized\" } */\n+\n+int x;\n+\n+static inline\n+__attribute__((no_sanitize(\"kernel-address\")))\n+void do_not_sanitize(void)\n+{\n+  x++;\n+}\n+\n+void\n+sanitize_this(void)\n+{\n+  x++;\n+  do_not_sanitize();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Function do_not_sanitize\" 1 \"optimized\" } } */"}, {"sha": "7c36702cf9e5979e91b972a427c61f30bdf0d00d", "filename": "gcc/testsuite/c-c++-common/asan/inline.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4089df8ef4a63126b0774c39b6638845244c20d2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4089df8ef4a63126b0774c39b6638845244c20d2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finline.c?ref=4089df8ef4a63126b0774c39b6638845244c20d2", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize=address -c -O3 -fdump-tree-optimized\" } */\n+\n+int x;\n+\n+static inline\n+__attribute__((no_sanitize(\"address\")))\n+void do_not_sanitize(void)\n+{\n+  x++;\n+}\n+\n+void\n+sanitize_this(void)\n+{\n+  x++;\n+  do_not_sanitize();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Function do_not_sanitize\" 1 \"optimized\" } } */"}, {"sha": "7fb3e576f54ee65c3a53d2469b4507b168fbf2d2", "filename": "gcc/testsuite/c-c++-common/tsan/inline.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4089df8ef4a63126b0774c39b6638845244c20d2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Finline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4089df8ef4a63126b0774c39b6638845244c20d2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Finline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Finline.c?ref=4089df8ef4a63126b0774c39b6638845244c20d2", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize=thread -c -O3 -fdump-tree-optimized\" } */\n+\n+int x;\n+\n+static inline\n+__attribute__((no_sanitize(\"thread\")))\n+void do_not_sanitize(void)\n+{\n+  x++;\n+}\n+\n+void\n+sanitize_this(void)\n+{\n+  x++;\n+  do_not_sanitize();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Function do_not_sanitize\" 1 \"optimized\" } } */"}, {"sha": "de9660427f67d8a8fb2a96e311ac6b21b6b3c575", "filename": "gcc/testsuite/c-c++-common/ubsan/inline.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4089df8ef4a63126b0774c39b6638845244c20d2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Finline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4089df8ef4a63126b0774c39b6638845244c20d2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Finline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Finline.c?ref=4089df8ef4a63126b0774c39b6638845244c20d2", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize=vla-bound -c -O3 -fdump-tree-optimized\" } */\n+\n+int x;\n+\n+static inline\n+__attribute__((no_sanitize(\"undefined\")))\n+void do_not_sanitize(void)\n+{\n+  x++;\n+}\n+\n+void\n+sanitize_this(void)\n+{\n+  x++;\n+  do_not_sanitize();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Function do_not_sanitize\" 1 \"optimized\" } } */"}]}