{"sha": "ec8ec09f9414be871e322fecf4ebf53e3687bd22", "node_id": "C_kwDOANBUbNoAKGVjOGVjMDlmOTQxNGJlODcxZTMyMmZlY2Y0ZWJmNTNlMzY4N2JkMjI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-21T09:28:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-21T09:28:27Z"}, "message": "i386: Uglify some local identifiers in *intrin.h [PR107748]\n\nWhile reporting PR107748 (where is a problem with non-uglified names,\nbut I've left it out because it needs fixing anyway), I've noticed\nvarious spots where identifiers in *intrin.h headers weren't uglified.\nThe following patch fixed those that are related to unions (I've grepped\nfor [a-zA-Z]\\.[a-zA-Z] spots).\nThe reason we need those to be uglified is the same as why the arguments\nof the inlines are __ prefixed and most of automatic vars in the inlines\n- say a, v or u aren't part of implementation namespace and so users could\n #define u whatever->something\n #include <x86intrin.h>\nand it should still work, as long as u is not e.g. one of the names\nof the functions/macros the header provides (_mm* etc.).\n\n2022-11-21  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/107748\n\t* config/i386/avx512fp16intrin.h (_mm512_castph512_ph128,\n\t_mm512_castph512_ph256, _mm512_castph128_ph512,\n\t_mm512_castph256_ph512, _mm512_set1_pch): Uglify names of local\n\tvariables and union members.\n\t* config/i386/avx512fp16vlintrin.h (_mm256_castph256_ph128,\n\t_mm256_castph128_ph256, _mm256_set1_pch, _mm_set1_pch): Likewise.\n\t* config/i386/smmintrin.h (_mm_extract_ps): Likewise.", "tree": {"sha": "79e72f3897f93dd3ed8937cae6d30e40abcdb6c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79e72f3897f93dd3ed8937cae6d30e40abcdb6c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec8ec09f9414be871e322fecf4ebf53e3687bd22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec8ec09f9414be871e322fecf4ebf53e3687bd22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec8ec09f9414be871e322fecf4ebf53e3687bd22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec8ec09f9414be871e322fecf4ebf53e3687bd22/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0d3b6e384a68f8b58bc750f240a15cad92600cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0d3b6e384a68f8b58bc750f240a15cad92600cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0d3b6e384a68f8b58bc750f240a15cad92600cd"}], "stats": {"total": 91, "additions": 46, "deletions": 45}, "files": [{"sha": "70f2f2b0d7f5deb46b8658ba6e6b7a0372ae0424", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec8ec09f9414be871e322fecf4ebf53e3687bd22/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec8ec09f9414be871e322fecf4ebf53e3687bd22/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=ec8ec09f9414be871e322fecf4ebf53e3687bd22", "patch": "@@ -272,10 +272,10 @@ _mm512_castph512_ph128 (__m512h __A)\n {\n   union\n   {\n-    __m128h a[4];\n-    __m512h v;\n-  } u = { .v = __A };\n-  return u.a[0];\n+    __m128h __a[4];\n+    __m512h __v;\n+  } __u = { .__v = __A };\n+  return __u.__a[0];\n }\n \n extern __inline __m256h\n@@ -284,10 +284,10 @@ _mm512_castph512_ph256 (__m512h __A)\n {\n   union\n   {\n-    __m256h a[2];\n-    __m512h v;\n-  } u = { .v = __A };\n-  return u.a[0];\n+    __m256h __a[2];\n+    __m512h __v;\n+  } __u = { .__v = __A };\n+  return __u.__a[0];\n }\n \n extern __inline __m512h\n@@ -296,11 +296,11 @@ _mm512_castph128_ph512 (__m128h __A)\n {\n   union\n   {\n-    __m128h a[4];\n-    __m512h v;\n-  } u;\n-  u.a[0] = __A;\n-  return u.v;\n+    __m128h __a[4];\n+    __m512h __v;\n+  } __u;\n+  __u.__a[0] = __A;\n+  return __u.__v;\n }\n \n extern __inline __m512h\n@@ -309,11 +309,11 @@ _mm512_castph256_ph512 (__m256h __A)\n {\n   union\n   {\n-    __m256h a[2];\n-    __m512h v;\n-  } u;\n-  u.a[0] = __A;\n-  return u.v;\n+    __m256h __a[2];\n+    __m512h __v;\n+  } __u;\n+  __u.__a[0] = __A;\n+  return __u.__v;\n }\n \n extern __inline __m512h\n@@ -7156,11 +7156,11 @@ _mm512_set1_pch (_Float16 _Complex __A)\n {\n   union\n   {\n-    _Float16 _Complex a;\n-    float b;\n-  } u = { .a = __A};\n+    _Float16 _Complex __a;\n+    float __b;\n+  } __u = { .__a = __A};\n \n-  return (__m512h) _mm512_set1_ps (u.b);\n+  return (__m512h) _mm512_set1_ps (__u.__b);\n }\n \n // intrinsics below are alias for f*mul_*ch"}, {"sha": "2783971accb76135752a833a570e722c58d9013d", "filename": "gcc/config/i386/avx512fp16vlintrin.h", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec8ec09f9414be871e322fecf4ebf53e3687bd22/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec8ec09f9414be871e322fecf4ebf53e3687bd22/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h?ref=ec8ec09f9414be871e322fecf4ebf53e3687bd22", "patch": "@@ -124,10 +124,10 @@ _mm256_castph256_ph128 (__m256h __A)\n {\n   union\n   {\n-    __m128h a[2];\n-    __m256h v;\n-  } u = { .v = __A };\n-  return u.a[0];\n+    __m128h __a[2];\n+    __m256h __v;\n+  } __u = { .__v = __A };\n+  return __u.__a[0];\n }\n \n extern __inline __m256h\n@@ -136,11 +136,11 @@ _mm256_castph128_ph256 (__m128h __A)\n {\n   union\n   {\n-    __m128h a[2];\n-    __m256h v;\n-  } u;\n-  u.a[0] = __A;\n-  return u.v;\n+    __m128h __a[2];\n+    __m256h __v;\n+  } __u;\n+  __u.__a[0] = __A;\n+  return __u.__v;\n }\n \n extern __inline __m256h\n@@ -3317,11 +3317,11 @@ _mm256_set1_pch (_Float16 _Complex __A)\n {\n   union\n   {\n-    _Float16 _Complex a;\n-    float b;\n-  } u = { .a = __A };\n+    _Float16 _Complex __a;\n+    float __b;\n+  } __u = { .__a = __A };\n \n-  return (__m256h) _mm256_set1_ps (u.b);\n+  return (__m256h) _mm256_set1_ps (__u.__b);\n }\n \n extern __inline __m128h\n@@ -3330,11 +3330,11 @@ _mm_set1_pch (_Float16 _Complex __A)\n {\n   union\n   {\n-    _Float16 _Complex a;\n-    float b;\n-  } u = { .a = __A };\n+    _Float16 _Complex __a;\n+    float __b;\n+  } __u = { .__a = __A };\n \n-  return (__m128h) _mm_set1_ps (u.b);\n+  return (__m128h) _mm_set1_ps (__u.__b);\n }\n \n // intrinsics below are alias for f*mul_*ch"}, {"sha": "47fd9b8a2c6a7283d400e27e205a6d64142153e7", "filename": "gcc/config/i386/smmintrin.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec8ec09f9414be871e322fecf4ebf53e3687bd22/gcc%2Fconfig%2Fi386%2Fsmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec8ec09f9414be871e322fecf4ebf53e3687bd22/gcc%2Fconfig%2Fi386%2Fsmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsmmintrin.h?ref=ec8ec09f9414be871e322fecf4ebf53e3687bd22", "patch": "@@ -365,17 +365,18 @@ _mm_insert_ps (__m128 __D, __m128 __S, const int __N)\n extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_extract_ps (__m128 __X, const int __N)\n {\n-  union { int i; float f; } __tmp;\n-  __tmp.f = __builtin_ia32_vec_ext_v4sf ((__v4sf)__X, __N);\n-  return __tmp.i;\n+  union { int __i; float __f; } __tmp;\n+  __tmp.__f = __builtin_ia32_vec_ext_v4sf ((__v4sf)__X, __N);\n+  return __tmp.__i;\n }\n #else\n #define _mm_extract_ps(X, N)\t\t\t\t\t\t\\\n   (__extension__\t\t\t\t\t\t\t\\\n    ({\t\t\t\t\t\t\t\t\t\\\n-     union { int i; float f; } __tmp;\t\t\t\t\t\\\n-     __tmp.f = __builtin_ia32_vec_ext_v4sf ((__v4sf)(__m128)(X), (int)(N)); \\\n-     __tmp.i;\t\t\t\t\t\t\t\t\\\n+     union { int __i; float __f; } __tmp;\t\t\t\t\\\n+     __tmp.__f = __builtin_ia32_vec_ext_v4sf ((__v4sf)(__m128)(X),\t\\\n+\t\t\t\t\t      (int)(N));\t\t\\\n+     __tmp.__i;\t\t\t\t\t\t\t\t\\\n    }))\n #endif\n "}]}