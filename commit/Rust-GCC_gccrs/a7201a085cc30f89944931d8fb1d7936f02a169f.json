{"sha": "a7201a085cc30f89944931d8fb1d7936f02a169f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcyMDFhMDg1Y2MzMGY4OTk0NDkzMWQ4ZmIxZDc5MzZmMDJhMTY5Zg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-29T13:04:58Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-29T13:06:24Z"}, "message": "c++: Nondeterministic concepts diagnostics [PR94830]\n\nThis patch makes the order in which template parameters appear in the\nTREE_LIST returned by find_template_parameters deterministic between\nruns.\n\nThe current nondeterminism is semantically harmless, but it has the\nundesirable effect of causing some concepts diagnostics which print a\nconstraint's parameter mapping via pp_cxx_parameter_mapping to also be\nnondeterministic, as in the testcases below.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/94830\n\t* pt.c (find_template_parameter_info::parm_list): New field.\n\t(keep_template_parm): Use the new field to build up the\n\tparameter list here instead of ...\n\t(find_template_parameters): ... here.  Return ftpi.parm_list.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/94830\n\t* g++.dg/concepts/diagnostics12.C: Clarify the dg-message now\n\tthat the corresponding diagnostic is deterministic.\n\t* g++.dg/concepts/diagnostics13.C: New test.", "tree": {"sha": "9750ea9e5fb0d2340797252b21442d7029fc973a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9750ea9e5fb0d2340797252b21442d7029fc973a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7201a085cc30f89944931d8fb1d7936f02a169f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7201a085cc30f89944931d8fb1d7936f02a169f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7201a085cc30f89944931d8fb1d7936f02a169f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7201a085cc30f89944931d8fb1d7936f02a169f/comments", "author": null, "committer": null, "parents": [{"sha": "3bce790414afaaba10e03f7bb41e4aa3279694f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bce790414afaaba10e03f7bb41e4aa3279694f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bce790414afaaba10e03f7bb41e4aa3279694f5"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "cbedbabe3a64efba9a4cf4256bafbc1b8349e50c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7201a085cc30f89944931d8fb1d7936f02a169f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7201a085cc30f89944931d8fb1d7936f02a169f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a7201a085cc30f89944931d8fb1d7936f02a169f", "patch": "@@ -1,3 +1,11 @@\n+2020-04-29  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/94830\n+\t* pt.c (find_template_parameter_info::parm_list): New field.\n+\t(keep_template_parm): Use the new field to build up the\n+\tparameter list here instead of ...\n+\t(find_template_parameters): ... here.  Return ftpi.parm_list.\n+\n 2020-04-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/94707"}, {"sha": "d28585efd17a73a4882bebb7dc3535c1ea00e962", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7201a085cc30f89944931d8fb1d7936f02a169f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7201a085cc30f89944931d8fb1d7936f02a169f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a7201a085cc30f89944931d8fb1d7936f02a169f", "patch": "@@ -10439,12 +10439,14 @@ for_each_template_parm (tree t, tree_fn_t fn, void* data,\n struct find_template_parameter_info\n {\n   explicit find_template_parameter_info (tree ctx_parms)\n-    : ctx_parms (ctx_parms),\n+    : parm_list (NULL_TREE),\n+      ctx_parms (ctx_parms),\n       max_depth (TMPL_PARMS_DEPTH (ctx_parms))\n   {}\n \n   hash_set<tree> visited;\n   hash_set<tree> parms;\n+  tree parm_list;\n   tree ctx_parms;\n   int max_depth;\n };\n@@ -10476,7 +10478,8 @@ keep_template_parm (tree t, void* data)\n      T and const T. Adjust types to their unqualified versions.  */\n   if (TYPE_P (t))\n     t = TYPE_MAIN_VARIANT (t);\n-  ftpi->parms.add (t);\n+  if (!ftpi->parms.add (t))\n+    ftpi->parm_list = tree_cons (NULL_TREE, t, ftpi->parm_list);\n \n   return 0;\n }\n@@ -10587,11 +10590,7 @@ find_template_parameters (tree t, tree ctx_parms)\n   find_template_parameter_info ftpi (ctx_parms);\n   for_each_template_parm (t, keep_template_parm, &ftpi, &ftpi.visited,\n \t\t\t  /*include_nondeduced*/true, any_template_parm_r);\n-  tree list = NULL_TREE;\n-  for (hash_set<tree>::iterator iter = ftpi.parms.begin();\n-       iter != ftpi.parms.end(); ++iter)\n-    list = tree_cons (NULL_TREE, *iter, list);\n-  return list;\n+  return ftpi.parm_list;\n }\n \n /* Returns true if T depends on any template parameter.  */"}, {"sha": "0fce8fba0a41f09cea58294b982e450e6aa82ea5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7201a085cc30f89944931d8fb1d7936f02a169f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7201a085cc30f89944931d8fb1d7936f02a169f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a7201a085cc30f89944931d8fb1d7936f02a169f", "patch": "@@ -1,3 +1,10 @@\n+2020-04-29  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/94830\n+\t* g++.dg/concepts/diagnostics12.C: Clarify the dg-message now\n+\tthat the corresponding diagnostic is deterministic.\n+\t* g++.dg/concepts/diagnostics13.C: New test.\n+\n 2020-04-29  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/93654"}, {"sha": "548ba9c1b3d0f92c2b1e89e3387237d83ea31370", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7201a085cc30f89944931d8fb1d7936f02a169f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7201a085cc30f89944931d8fb1d7936f02a169f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic12.C?ref=a7201a085cc30f89944931d8fb1d7936f02a169f", "patch": "@@ -3,7 +3,7 @@\n \n template<typename T, typename... Args>\n   concept c1 = requires (T t, Args... args) { *t; };\n-// { dg-message \"in requirements with .T t., .Args ... args. .with.* Args = \\{\\}\" \"\" { target *-*-* } .-1 }\n+// { dg-message \"in requirements with .T t., .Args ... args. .with Args = \\{\\}; T = int\" \"\" { target *-*-* } .-1 }\n \n static_assert(c1<int>); // { dg-error \"failed\" }\n "}, {"sha": "accd8a6d2bdbd779be61e4383ae1973e8d6c92ee", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic13.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7201a085cc30f89944931d8fb1d7936f02a169f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7201a085cc30f89944931d8fb1d7936f02a169f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic13.C?ref=a7201a085cc30f89944931d8fb1d7936f02a169f", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/94830\n+// { dg-do compile { target concepts } }\n+\n+template<typename T, typename R>\n+  concept c = __is_same(T, R); // { dg-message \"with T = int; R = char\" }\n+\n+template<typename T, typename R>\n+  requires c<T,R>\n+void foo() { }\n+\n+void bar()\n+{\n+  foo<int, char>(); // { dg-error \"unsatisfied constraints\" }\n+}"}]}