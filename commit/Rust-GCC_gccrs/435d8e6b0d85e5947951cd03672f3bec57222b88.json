{"sha": "435d8e6b0d85e5947951cd03672f3bec57222b88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM1ZDhlNmIwZDg1ZTU5NDc5NTFjZDAzNjcyZjNiZWM1NzIyMmI4OA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2005-09-05T07:54:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-09-05T07:54:01Z"}, "message": "exp_intr.adb (Expand_Source_Name): For Enclosing_Entity...\n\n2005-09-01  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_intr.adb (Expand_Source_Name): For Enclosing_Entity, generate\n\tfully qualified name, to distinguish instances with the same local name.\n\n\t* g-souinf.ads (Enclosing_Entity): Document that entity name is now\n\tfully qualified.\n\nFrom-SVN: r103864", "tree": {"sha": "4186df50e247e4460884b7910aa40c6b4465464f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4186df50e247e4460884b7910aa40c6b4465464f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/435d8e6b0d85e5947951cd03672f3bec57222b88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435d8e6b0d85e5947951cd03672f3bec57222b88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/435d8e6b0d85e5947951cd03672f3bec57222b88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435d8e6b0d85e5947951cd03672f3bec57222b88/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3eb8fddca96f1e6999a6c1e1d53e045f0221510d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eb8fddca96f1e6999a6c1e1d53e045f0221510d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eb8fddca96f1e6999a6c1e1d53e045f0221510d"}], "stats": {"total": 93, "additions": 68, "deletions": 25}, "files": [{"sha": "5a402fdeaadb923b9a8dd0cba64d066d0168f2fb", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 58, "deletions": 17, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435d8e6b0d85e5947951cd03672f3bec57222b88/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435d8e6b0d85e5947951cd03672f3bec57222b88/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=435d8e6b0d85e5947951cd03672f3bec57222b88", "patch": "@@ -490,6 +490,61 @@ package body Exp_Intr is\n       Loc : constant Source_Ptr := Sloc (N);\n       Ent : Entity_Id;\n \n+      procedure Write_Entity_Name (E : Entity_Id);\n+      --  Recursive procedure to construct string for qualified name of\n+      --  enclosing program unit. The qualification stops at an enclosing\n+      --  scope has no source name (block or loop). If entity is a subprogram\n+      --  instance, skip enclosing wrapper package.\n+\n+      -----------------------\n+      -- Write_Entity_Name --\n+      -----------------------\n+\n+      procedure Write_Entity_Name (E : Entity_Id) is\n+         SDef : Source_Ptr;\n+         TDef : constant Source_Buffer_Ptr :=\n+                  Source_Text (Get_Source_File_Index (Sloc (E)));\n+\n+      begin\n+         --  Nothing to do if at outer level\n+\n+         if Scope (E) = Standard_Standard then\n+            null;\n+\n+         --  If scope comes from source, write its name\n+\n+         elsif Comes_From_Source (Scope (E)) then\n+            Write_Entity_Name (Scope (E));\n+            Add_Char_To_Name_Buffer ('.');\n+\n+         --  If in wrapper package skip past it\n+\n+         elsif Is_Wrapper_Package (Scope (E)) then\n+            Write_Entity_Name (Scope (Scope (E)));\n+            Add_Char_To_Name_Buffer ('.');\n+\n+         --  Otherwise nothing to output (happens in unnamed block statements)\n+\n+         else\n+            null;\n+         end if;\n+\n+         --  Loop to output the name\n+\n+         --  is this right wrt wide char encodings ??? (no!)\n+\n+         SDef := Sloc (E);\n+         while TDef (SDef) in '0' .. '9'\n+           or else TDef (SDef) >= 'A'\n+           or else TDef (SDef) = ASCII.ESC\n+         loop\n+            Add_Char_To_Name_Buffer (TDef (SDef));\n+            SDef := SDef + 1;\n+         end loop;\n+      end Write_Entity_Name;\n+\n+   --  Start of processing for Expand_Source_Info\n+\n    begin\n       --  Integer cases\n \n@@ -515,7 +570,7 @@ package body Exp_Intr is\n \n                Ent := Current_Scope;\n \n-               --  Skip enclosing blocks to reach enclosing unit.\n+               --  Skip enclosing blocks to reach enclosing unit\n \n                while Present (Ent) loop\n                   exit when Ekind (Ent) /= E_Block\n@@ -525,22 +580,8 @@ package body Exp_Intr is\n \n                --  Ent now points to the relevant defining entity\n \n-               declare\n-                  SDef : Source_Ptr := Sloc (Ent);\n-                  TDef : Source_Buffer_Ptr;\n-\n-               begin\n-                  TDef := Source_Text (Get_Source_File_Index (SDef));\n-                  Name_Len := 0;\n-\n-                  while TDef (SDef) in '0' .. '9'\n-                    or else TDef (SDef) >= 'A'\n-                    or else TDef (SDef) = ASCII.ESC\n-                  loop\n-                     Add_Char_To_Name_Buffer (TDef (SDef));\n-                     SDef := SDef + 1;\n-                  end loop;\n-               end;\n+               Name_Len := 0;\n+               Write_Entity_Name (Ent);\n \n             when others =>\n                raise Program_Error;"}, {"sha": "b49fa807b4c9df0e48de0b258f33263be6e8e071", "filename": "gcc/ada/g-souinf.ads", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435d8e6b0d85e5947951cd03672f3bec57222b88/gcc%2Fada%2Fg-souinf.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435d8e6b0d85e5947951cd03672f3bec57222b88/gcc%2Fada%2Fg-souinf.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-souinf.ads?ref=435d8e6b0d85e5947951cd03672f3bec57222b88", "patch": "@@ -39,15 +39,15 @@\n --  the name of the source file in which the exception is handled.\n \n package GNAT.Source_Info is\n-pragma Pure (Source_Info);\n+   pragma Pure;\n \n    function File return String;\n    --  Return the name of the current file, not including the path information.\n    --  The result is considered to be a static string constant.\n \n    function Line return Positive;\n-   --  Return the current input line number. The result is considered\n-   --  to be a static expression.\n+   --  Return the current input line number. The result is considered to be a\n+   --  static expression.\n \n    function Source_Location return String;\n    --  Return a string literal of the form \"name:line\", where name is the\n@@ -61,12 +61,14 @@ pragma Pure (Source_Info);\n    --  Return the name of the current subprogram, package, task, entry or\n    --  protected subprogram. The string is in exactly the form used for the\n    --  declaration of the entity (casing and encoding conventions), and is\n-   --  considered to be a static string constant.\n+   --  considered to be a static string constant. The name is fully qualified\n+   --  using periods where possible (this is not always possible, notably in\n+   --  the case of entities appearing in unnamed block statements.)\n    --\n-   --  Note: if this function is used at the outer level of a generic\n-   --  package, the string returned will be the name of the instance,\n-   --  not the generic package itself. This is useful in identifying\n-   --  and logging information from within generic templates.\n+   --  Note: if this function is used at the outer level of a generic package,\n+   --  the string returned will be the name of the instance, not the generic\n+   --  package itself. This is useful in identifying and logging information\n+   --  from within generic templates.\n \n private\n    pragma Import (Intrinsic, File);"}]}