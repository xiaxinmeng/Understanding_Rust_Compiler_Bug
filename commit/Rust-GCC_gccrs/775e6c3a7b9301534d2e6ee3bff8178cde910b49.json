{"sha": "775e6c3a7b9301534d2e6ee3bff8178cde910b49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc1ZTZjM2E3YjkzMDE1MzRkMmU2ZWUzYmZmODE3OGNkZTkxMGI0OQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2006-11-07T13:27:53Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2006-11-07T13:27:53Z"}, "message": "re PR fortran/29601 (VOLATILE attribute and statement)\n\nfortran/\n2006-11-06  Tobias Burnus  <burnus@net-b.de>\n\n    PR fortran/29601\n    * symbol.c (check_conflict, gfc_add_volatile): Add volatile support.\n    * decl.c (match_attr_spec, gfc_match_volatile): Add volatile support.\n    * gfortran.h (symbol_attribute): Add volatile_ to struct.\n    * resolve.c (was_declared): Add volatile support.\n    * trans-decl.c (gfc_finish_var_decl): Add volatile support.\n    * match.h: Declare gfc_match_volatile.\n    * parse.c (decode_statement): Recognize volatile.\n    * modules.c (ab_attribute, attr_bits, mio_symbol_attribute):\n      Add volatile support.\n    * dump-parse-tree.c (gfc_show_attr): Add volatile support.\n\n\ntestsuite/\n2006-11-06  Tobias Burnus  <burnus@net-b.de>\n\n    PR fortran/29601\n    * gfortran.dg/volatile.f90: Add.\n    * gfortran.dg/volatile2.f90: Add.\n    * gfortran.dg/volatile3.f90: Add.\n    * gfortran.dg/volatile4.f90: Add.\n    * gfortran.dg/volatile5.f90: Add.\n    * gfortran.dg/volatile6.f90: Add.\n    * gfortran.dg/volatile7.f90: Add.\n\nFrom-SVN: r118545", "tree": {"sha": "c63b26fdfe160e12fa7a62ffabe00e56d67e1b2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c63b26fdfe160e12fa7a62ffabe00e56d67e1b2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/775e6c3a7b9301534d2e6ee3bff8178cde910b49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/775e6c3a7b9301534d2e6ee3bff8178cde910b49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/775e6c3a7b9301534d2e6ee3bff8178cde910b49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/775e6c3a7b9301534d2e6ee3bff8178cde910b49/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c927b11c7832ba293da24201305efa7c3dd64cb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c927b11c7832ba293da24201305efa7c3dd64cb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c927b11c7832ba293da24201305efa7c3dd64cb0"}], "stats": {"total": 313, "additions": 305, "deletions": 8}, "files": [{"sha": "d31bb140bbdce07ad94948111c4889e9c8f96e61", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=775e6c3a7b9301534d2e6ee3bff8178cde910b49", "patch": "@@ -1,3 +1,17 @@\n+2006-11-07  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/29601\n+\t* symbol.c (check_conflict, gfc_add_volatile): Add volatile support.\n+\t* decl.c (match_attr_spec, gfc_match_volatile): Add volatile support.\n+\t* gfortran.h (symbol_attribute): Add volatile_ to struct.\n+\t* resolve.c (was_declared): Add volatile support.\n+\t* trans-decl.c (gfc_finish_var_decl): Add volatile support.\n+\t* match.h: Declare gfc_match_volatile.\n+\t* parse.c (decode_statement): Recognize volatile.\n+\t* modules.c (ab_attribute, attr_bits, mio_symbol_attribute):\n+\t  Add volatile support.\n+\t* dump-parse-tree.c (gfc_show_attr): Add volatile support.\n+\n 2006-11-06  Tobias Burnus  <burnus@net-b.de>\n \n \t* decl.c (match_attr_spec, gfc_match_enum): Unify gfc_notify_std"}, {"sha": "a476c64bf8127911e117f3994d189568e800fa64", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=775e6c3a7b9301534d2e6ee3bff8178cde910b49", "patch": "@@ -2025,7 +2025,7 @@ match_attr_spec (void)\n     DECL_ALLOCATABLE = GFC_DECL_BEGIN, DECL_DIMENSION, DECL_EXTERNAL,\n     DECL_IN, DECL_OUT, DECL_INOUT, DECL_INTRINSIC, DECL_OPTIONAL,\n     DECL_PARAMETER, DECL_POINTER, DECL_PRIVATE, DECL_PUBLIC, DECL_SAVE,\n-    DECL_TARGET, DECL_COLON, DECL_NONE,\n+    DECL_TARGET, DECL_VOLATILE, DECL_COLON, DECL_NONE,\n     GFC_DECL_END /* Sentinel */\n   }\n   decl_types;\n@@ -2048,6 +2048,7 @@ match_attr_spec (void)\n     minit (\", public\", DECL_PUBLIC),\n     minit (\", save\", DECL_SAVE),\n     minit (\", target\", DECL_TARGET),\n+    minit (\", volatile\", DECL_VOLATILE),\n     minit (\"::\", DECL_COLON),\n     minit (NULL, DECL_NONE)\n   };\n@@ -2168,6 +2169,9 @@ match_attr_spec (void)\n \t  case DECL_TARGET:\n \t    attr = \"TARGET\";\n \t    break;\n+\t  case DECL_VOLATILE:\n+\t    attr = \"VOLATILE\";\n+\t    break;\n \t  default:\n \t    attr = NULL;\t/* This shouldn't happen */\n \t  }\n@@ -2282,6 +2286,15 @@ match_attr_spec (void)\n \t  t = gfc_add_target (&current_attr, &seen_at[d]);\n \t  break;\n \n+\tcase DECL_VOLATILE:\n+\t  if (gfc_notify_std (GFC_STD_F2003,\n+                              \"Fortran 2003: VOLATILE attribute at %C\")\n+\t      == FAILURE)\n+\t    t = FAILURE;\n+\t  else\n+\t    t = gfc_add_volatile (&current_attr, NULL, &seen_at[d]);\n+\t  break;\n+\n \tdefault:\n \t  gfc_internal_error (\"match_attr_spec(): Bad attribute\");\n \t}\n@@ -3944,6 +3957,59 @@ gfc_match_save (void)\n }\n \n \n+match\n+gfc_match_volatile (void)\n+{\n+  gfc_symbol *sym;\n+  match m;\n+\n+  if (gfc_notify_std (GFC_STD_F2003, \n+\t\t      \"Fortran 2003: VOLATILE statement at %C\")\n+      == FAILURE)\n+    return MATCH_ERROR;\n+\n+  if (gfc_match (\" ::\") == MATCH_NO && gfc_match_space () == MATCH_NO)\n+    {\n+      return MATCH_ERROR;\n+    }\n+\n+  if (gfc_match_eos () == MATCH_YES)\n+    goto syntax;\n+\n+  for(;;)\n+    {\n+      m = gfc_match_symbol (&sym, 0);\n+      switch (m)\n+\t{\n+\tcase MATCH_YES:\n+\t  if (gfc_add_volatile (&sym->attr, sym->name,\n+  \t\t\t        &gfc_current_locus) == FAILURE)\n+\t    return MATCH_ERROR;\n+\t  goto next_item;\n+\n+\tcase MATCH_NO:\n+\t  break;\n+\n+\tcase MATCH_ERROR:\n+\t  return MATCH_ERROR;\n+\t}\n+\n+    next_item:\n+      if (gfc_match_eos () == MATCH_YES)\n+\tbreak;\n+      if (gfc_match_char (',') != MATCH_YES)\n+\tgoto syntax;\n+    }\n+\n+  return MATCH_YES;\n+\n+syntax:\n+  gfc_error (\"Syntax error in VOLATILE statement at %C\");\n+  return MATCH_ERROR;\n+}\n+\n+\n+\n /* Match a module procedure statement.  Note that we have to modify\n    symbols in the parent's namespace because the current one was there\n    to receive symbols that are in an interface's formal argument list.  */"}, {"sha": "dd08d1fc64de6a65df7e26c944e54e44433b4314", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=775e6c3a7b9301534d2e6ee3bff8178cde910b49", "patch": "@@ -552,6 +552,8 @@ gfc_show_attr (symbol_attribute * attr)\n     gfc_status (\" POINTER\");\n   if (attr->save)\n     gfc_status (\" SAVE\");\n+  if (attr->volatile_)\n+    gfc_status (\" VOLATILE\");\n   if (attr->threadprivate)\n     gfc_status (\" THREADPRIVATE\");\n   if (attr->target)"}, {"sha": "05590549070939d37edcb4d8faefa3c2247b5e3e", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=775e6c3a7b9301534d2e6ee3bff8178cde910b49", "patch": "@@ -477,7 +477,7 @@ typedef struct\n {\n   /* Variable attributes.  */\n   unsigned allocatable:1, dimension:1, external:1, intrinsic:1,\n-    optional:1, pointer:1, save:1, target:1,\n+    optional:1, pointer:1, save:1, target:1, volatile_:1,\n     dummy:1, result:1, assign:1, threadprivate:1;\n \n   unsigned data:1,\t\t/* Symbol is named in a DATA statement.  */\n@@ -1866,6 +1866,7 @@ try gfc_add_pure (symbol_attribute *, locus *);\n try gfc_add_recursive (symbol_attribute *, locus *);\n try gfc_add_function (symbol_attribute *, const char *, locus *);\n try gfc_add_subroutine (symbol_attribute *, const char *, locus *);\n+try gfc_add_volatile (symbol_attribute *, const char *, locus *);\n \n try gfc_add_access (symbol_attribute *, gfc_access, const char *, locus *);\n try gfc_add_flavor (symbol_attribute *, sym_flavor, const char *, locus *);"}, {"sha": "db4f1b852e193848247f96eb875aef8ba0e776a9", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=775e6c3a7b9301534d2e6ee3bff8178cde910b49", "patch": "@@ -146,6 +146,7 @@ match gfc_match_public (gfc_statement *);\n match gfc_match_save (void);\n match gfc_match_modproc (void);\n match gfc_match_target (void);\n+match gfc_match_volatile (void);\n \n /* primary.c */\n match gfc_match_structure_constructor (gfc_symbol *, gfc_expr **);"}, {"sha": "77ac0e90d81c86dabaf17dd48dbac0974076567b", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=775e6c3a7b9301534d2e6ee3bff8178cde910b49", "patch": "@@ -1435,7 +1435,7 @@ typedef enum\n   AB_DATA, AB_IN_NAMELIST, AB_IN_COMMON, \n   AB_FUNCTION, AB_SUBROUTINE, AB_SEQUENCE, AB_ELEMENTAL, AB_PURE,\n   AB_RECURSIVE, AB_GENERIC, AB_ALWAYS_EXPLICIT, AB_CRAY_POINTER,\n-  AB_CRAY_POINTEE, AB_THREADPRIVATE, AB_ALLOC_COMP\n+  AB_CRAY_POINTEE, AB_THREADPRIVATE, AB_ALLOC_COMP, AB_VOLATILE\n }\n ab_attribute;\n \n@@ -1448,6 +1448,7 @@ static const mstring attr_bits[] =\n     minit (\"OPTIONAL\", AB_OPTIONAL),\n     minit (\"POINTER\", AB_POINTER),\n     minit (\"SAVE\", AB_SAVE),\n+    minit (\"VOLATILE\", AB_VOLATILE),\n     minit (\"TARGET\", AB_TARGET),\n     minit (\"THREADPRIVATE\", AB_THREADPRIVATE),\n     minit (\"DUMMY\", AB_DUMMY),\n@@ -1518,6 +1519,8 @@ mio_symbol_attribute (symbol_attribute * attr)\n \tMIO_NAME(ab_attribute) (AB_POINTER, attr_bits);\n       if (attr->save)\n \tMIO_NAME(ab_attribute) (AB_SAVE, attr_bits);\n+      if (attr->volatile_)\n+\tMIO_NAME(ab_attribute) (AB_VOLATILE, attr_bits);\n       if (attr->target)\n \tMIO_NAME(ab_attribute) (AB_TARGET, attr_bits);\n       if (attr->threadprivate)\n@@ -1596,6 +1599,9 @@ mio_symbol_attribute (symbol_attribute * attr)\n \t    case AB_SAVE:\n \t      attr->save = 1;\n \t      break;\n+\t    case AB_VOLATILE:\n+\t      attr->volatile_ = 1;\n+\t      break;\n \t    case AB_TARGET:\n \t      attr->target = 1;\n \t      break;"}, {"sha": "aedf292acd6ffd770a10e33ab7d0a1138705ad42", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=775e6c3a7b9301534d2e6ee3bff8178cde910b49", "patch": "@@ -282,6 +282,10 @@ decode_statement (void)\n       match (\"use% \", gfc_match_use, ST_USE);\n       break;\n \n+    case 'v':\n+      match (\"volatile\", gfc_match_volatile, ST_ATTR_DECL);\n+      break;\n+\n     case 'w':\n       match (\"write\", gfc_match_write, ST_WRITE);\n       break;"}, {"sha": "8cf967808c606fa5784a60a12d12a200f03e221b", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=775e6c3a7b9301534d2e6ee3bff8178cde910b49", "patch": "@@ -677,7 +677,7 @@ was_declared (gfc_symbol * sym)\n     return 1;\n \n   if (a.allocatable || a.dimension || a.dummy || a.external || a.intrinsic\n-      || a.optional || a.pointer || a.save || a.target\n+      || a.optional || a.pointer || a.save || a.target || a.volatile_\n       || a.access != ACCESS_UNKNOWN || a.intent != INTENT_UNKNOWN)\n     return 1;\n "}, {"sha": "07bf2650ad29f8cbb633b68e1ece50f4f5dd91bb", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=775e6c3a7b9301534d2e6ee3bff8178cde910b49", "patch": "@@ -265,14 +265,15 @@ check_conflict (symbol_attribute * attr, const char * name, locus * where)\n {\n   static const char *dummy = \"DUMMY\", *save = \"SAVE\", *pointer = \"POINTER\",\n     *target = \"TARGET\", *external = \"EXTERNAL\", *intent = \"INTENT\",\n-    *intrinsic = \"INTRINSIC\", *allocatable = \"ALLOCATABLE\",\n-    *elemental = \"ELEMENTAL\", *private = \"PRIVATE\", *recursive = \"RECURSIVE\",\n+    *intent_in = \"INTENT(IN)\", *intrinsic = \"INTRINSIC\",\n+    *allocatable = \"ALLOCATABLE\", *elemental = \"ELEMENTAL\",\n+    *private = \"PRIVATE\", *recursive = \"RECURSIVE\",\n     *in_common = \"COMMON\", *result = \"RESULT\", *in_namelist = \"NAMELIST\",\n     *public = \"PUBLIC\", *optional = \"OPTIONAL\", *entry = \"ENTRY\",\n     *function = \"FUNCTION\", *subroutine = \"SUBROUTINE\",\n     *dimension = \"DIMENSION\", *in_equivalence = \"EQUIVALENCE\",\n     *use_assoc = \"USE ASSOCIATED\", *cray_pointer = \"CRAY POINTER\",\n-    *cray_pointee = \"CRAY POINTEE\", *data = \"DATA\";\n+    *cray_pointee = \"CRAY POINTEE\", *data = \"DATA\", *volatile_ = \"VOLATILE\";\n   static const char *threadprivate = \"THREADPRIVATE\";\n \n   const char *a1, *a2;\n@@ -399,6 +400,16 @@ check_conflict (symbol_attribute * attr, const char * name, locus * where)\n   conf (data, allocatable);\n   conf (data, use_assoc);\n \n+  conf (volatile_, intrinsic)\n+  conf (volatile_, external)\n+\n+  if (attr->volatile_ && attr->intent == INTENT_IN)\n+    {\n+      a1 = volatile_;\n+      a2 = intent_in;\n+      goto conflict;\n+    }\n+\n   a1 = gfc_code2string (flavors, attr->flavor);\n \n   if (attr->in_namelist\n@@ -508,6 +519,7 @@ check_conflict (symbol_attribute * attr, const char * name, locus * where)\n       conf2 (dummy);\n       conf2 (in_common);\n       conf2 (save);\n+      conf2 (volatile_);\n       conf2 (threadprivate);\n       break;\n \n@@ -812,6 +824,26 @@ gfc_add_save (symbol_attribute * attr, const char *name, locus * where)\n   return check_conflict (attr, name, where);\n }\n \n+try\n+gfc_add_volatile (symbol_attribute * attr, const char *name, locus * where)\n+{\n+\n+  if (check_used (attr, name, where))\n+    return FAILURE;\n+\n+  if (attr->volatile_)\n+    {\n+\tif (gfc_notify_std (GFC_STD_LEGACY, \n+\t\t\t    \"Duplicate VOLATILE attribute specified at %L\",\n+\t\t\t    where) \n+\t    == FAILURE)\n+\t  return FAILURE;\n+    }\n+\n+  attr->volatile_ = 1;\n+  return check_conflict (attr, name, where);\n+}\n+\n \n try\n gfc_add_threadprivate (symbol_attribute * attr, const char *name, locus * where)\n@@ -1249,6 +1281,8 @@ gfc_copy_attr (symbol_attribute * dest, symbol_attribute * src, locus * where)\n     goto fail;\n   if (src->save && gfc_add_save (dest, NULL, where) == FAILURE)\n     goto fail;\n+  if (src->volatile_ && gfc_add_volatile (dest, NULL, where) == FAILURE)\n+    goto fail;\n   if (src->threadprivate && gfc_add_threadprivate (dest, NULL, where) == FAILURE)\n     goto fail;\n   if (src->target && gfc_add_target (dest, where) == FAILURE)"}, {"sha": "262c1a03e42a42d2bbb43aef5cb408949b12034b", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=775e6c3a7b9301534d2e6ee3bff8178cde910b49", "patch": "@@ -513,7 +513,15 @@ gfc_finish_var_decl (tree decl, gfc_symbol * sym)\n   if ((sym->attr.save || sym->attr.data || sym->value)\n       && !sym->attr.use_assoc)\n     TREE_STATIC (decl) = 1;\n-  \n+\n+  if (sym->attr.volatile_)\n+    {\n+      tree new;\n+      TREE_THIS_VOLATILE (decl) = 1;\n+      new = build_qualified_type (TREE_TYPE (decl), TYPE_QUAL_VOLATILE);\n+      TREE_TYPE (decl) = new;\n+    } \n+\n   /* Keep variables larger than max-stack-var-size off stack.  */\n   if (!sym->ns->proc_name->attr.recursive\n       && INTEGER_CST_P (DECL_SIZE_UNIT (decl))"}, {"sha": "e3cb936b84f72eb1a03cfcdebba7b66657c985f1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=775e6c3a7b9301534d2e6ee3bff8178cde910b49", "patch": "@@ -1,3 +1,14 @@\n+2006-11-07  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/29601\n+\t* gfortran.dg/volatile.f90: Add.\n+\t* gfortran.dg/volatile2.f90: Add.\n+\t* gfortran.dg/volatile3.f90: Add.\n+\t* gfortran.dg/volatile4.f90: Add.\n+\t* gfortran.dg/volatile5.f90: Add.\n+\t* gfortran.dg/volatile6.f90: Add.\n+\t* gfortran.dg/volatile7.f90: Add.\n+\n 2006-11-06  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.dg/io_constraints_2.f90: Adjust pattern"}, {"sha": "73184250cbe9c6b97b29b3e464c8d9f2964fad41", "filename": "gcc/testsuite/gfortran.dg/volatile.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile.f90?ref=775e6c3a7b9301534d2e6ee3bff8178cde910b49", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do run }\n+! Test whether volatile statements and attributes are accepted\n+! PR fortran/29601\n+program volatile_test\n+  implicit none\n+  real :: l,m\n+  real, volatile :: r = 3.\n+  volatile :: l\n+  l = 4.0\n+  m = 3.0\n+end program volatile_test"}, {"sha": "60655df427c90dea98daec8248bd1f8d8d815af2", "filename": "gcc/testsuite/gfortran.dg/volatile2.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile2.f90?ref=775e6c3a7b9301534d2e6ee3bff8178cde910b49", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile }\n+! { dg-shouldfail \"VOLATILE not part of F95\" }\n+! { dg-options \"-std=f95\" }\n+! Test whether volatile statements and attributes are rejected\n+! with -std=f95.\n+! PR fortran/29601\n+program volatile_test\n+  implicit none\n+  real, volatile :: foo ! { dg-error \"VOLATILE attribute\" }\n+  real :: l\n+  volatile :: l         ! { dg-error \"VOLATILE statement\" }\n+  l   = 4.0\n+  foo = 3.0             ! { dg-error \"no IMPLICIT type\" }   \n+end program volatile_test"}, {"sha": "46619eb6bcec91d0488b6c494ccb3596dcd24008", "filename": "gcc/testsuite/gfortran.dg/volatile3.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile3.f90?ref=775e6c3a7b9301534d2e6ee3bff8178cde910b49", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do compile }\n+! { dg-shouldfail \"Invalid use of VOLATILE\" }\n+! Test whether volatile statements and attributes are\n+! properly error checked.\n+! PR fortran/29601\n+program volatile_test\n+  implicit none\n+  real, external,  volatile :: foo ! { dg-error \"VOLATILE attribute conflicts with EXTERNAL attribute\" }\n+  real, intrinsic, volatile :: sin ! { dg-error \"VOLATILE attribute conflicts with INTRINSIC attribute\" }\n+  real, parameter, volatile :: r = 5.5 ! { dg-error \"PARAMETER attribute conflicts with VOLATILE attribute\" }\n+  real :: l,m\n+  real,volatile :: n\n+  real, volatile,volatile :: r = 3. ! { dg-error \"Duplicate VOLATILE attribute\" }\n+  volatile :: l,n ! { dg-error \"Duplicate VOLATILE attribute\" }\n+  volatile ! { dg-error \"Syntax error in VOLATILE statement\" }\n+  l = 4.0\n+  m = 3.0\n+contains\n+  subroutine foo(a) ! { dg-error \"has no IMPLICIT type\" } ! due to error below\n+    integer, intent(in), volatile :: a ! { dg-error \"VOLATILE attribute conflicts with INTENT\\\\(IN\\\\)\" }\n+  end subroutine\n+end program volatile_test"}, {"sha": "f58a873dfb47accb9c45e5a8a9b25fdf3173fd0c", "filename": "gcc/testsuite/gfortran.dg/volatile4.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile4.f90?ref=775e6c3a7b9301534d2e6ee3bff8178cde910b49", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fdump-tree-optimized\" }\n+! Tests whether volatile really works\n+! PR fortran/29601\n+logical, volatile :: t1\n+logical :: t2\n+integer :: i\n+\n+t2 = .false.\n+t1 = .false.\n+do i = 1, 2\n+  if(t1) print *, 'VolatileNotOptimizedAway'\n+  if(t2) print *, 'NonVolatileNotOptimizedAway'\n+end do\n+end\n+! { dg-final { scan-tree-dump \"VolatileNotOptimizedAway\" \"optimized\" } } */\n+! { dg-final { scan-tree-dump-not \"NonVolatileNotOptimizedAway\" \"optimized\" } } */\n+! { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "42607a1e63edad87a9d7d3f909955dc87f8c0aea", "filename": "gcc/testsuite/gfortran.dg/volatile5.f90", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile5.f90?ref=775e6c3a7b9301534d2e6ee3bff8178cde910b49", "patch": "@@ -0,0 +1,43 @@\n+! { dg-do compile }\n+! { dg-options \"-O3 -fdump-tree-optimized\" }\n+! Tests whether volatile really works with modules\n+! PR fortran/29601\n+module volmod\n+  implicit none\n+  integer, volatile :: a\n+  logical :: b,c\n+  volatile :: b\n+contains\n+  subroutine sample\n+    a = 33.\n+    if(a /= 432) print *,'aPresent'\n+\n+    b = .false.\n+    if(b) print *,'bPresent'\n+\n+    c = .false.\n+    if(c) print *,'cPresent'\n+  end subroutine sample\n+end module volmod\n+\n+program main\n+  use volmod\n+  implicit none\n+\n+  a = 432\n+  if(a /= 432) print *,'aStillPresent'\n+\n+  b = .false.\n+  if(b)        print *,'bStillPresent'\n+\n+  c = .false.\n+  if(c)        print *,'cStillPresent'\n+end program main\n+! { dg-final { scan-tree-dump \"aPresent\" \"optimized\" } }\n+! { dg-final { scan-tree-dump \"bPresent\" \"optimized\" } }\n+! { dg-final { scan-tree-dump \"aStillPresent\" \"optimized\" } }\n+! { dg-final { scan-tree-dump \"bStillPresent\" \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"cPresent\" \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"cStillPresent\" \"optimized\" } }\n+! { dg-final { cleanup-tree-dump \"optimized\" } }\n+! { dg-final { cleanup-modules \"volmod\" } }"}, {"sha": "e42e3de3acbb1ab36b9e7b4178d533991eaadeb8", "filename": "gcc/testsuite/gfortran.dg/volatile6.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile6.f90?ref=775e6c3a7b9301534d2e6ee3bff8178cde910b49", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fdump-tree-optimized\" }\n+! Tests whether volatile really works for arrays\n+! PR fortran/29601\n+logical, allocatable, volatile :: t1(:)\n+logical, allocatable :: t2(:)\n+integer :: i\n+\n+allocate(t1(1),t2(1))\n+t1 = .false.\n+t2 = .false.\n+do i = 1, 2\n+  if(ubound(t1,1) /= 1) print *, 'VolatileNotOptimizedAway1'\n+  if(ubound(t2,1) /= 1) print *, 'NonVolatileNotOptimizedAway1'\n+end do\n+\n+t1 = .false.\n+if(t1(1)) print *, 'VolatileNotOptimizedAway2'\n+t2 = .false.\n+if(t2(1)) print *, 'NonVolatileNotOptimizedAway2'\n+end\n+! { dg-final { scan-tree-dump \"VolatileNotOptimizedAway1\" \"optimized\" } }\n+! { dg-final { scan-tree-dump \"VolatileNotOptimizedAway2\" \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"NonVolatileNotOptimizedAway1\" \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"NonVolatileNotOptimizedAway2\" \"optimized\" } }\n+! { dg-final { cleanup-tree-dump \"optimized\" } }"}, {"sha": "237a08c07a175f223961b8a7c8c59f9fd358399d", "filename": "gcc/testsuite/gfortran.dg/volatile7.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/775e6c3a7b9301534d2e6ee3bff8178cde910b49/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvolatile7.f90?ref=775e6c3a7b9301534d2e6ee3bff8178cde910b49", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fdump-tree-optimized\" }\n+! Tests whether volatile really works for pointers\n+! PR fortran/29601\n+logical, pointer, volatile :: t1\n+logical, pointer :: t2\n+integer :: i\n+\n+t1 => NULL(t1)\n+if(associated(t1)) print *, 'VolatileNotOptimizedAway'\n+t2 => NULL(t2)\n+if(associated(t2)) print *, 'NonVolatileNotOptimizedAway'\n+end\n+! { dg-final { scan-tree-dump \"VolatileNotOptimizedAway\" \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"NonVolatileNotOptimizedAway\" \"optimized\" } } \n+! { dg-final { cleanup-tree-dump \"optimized\" } } "}]}