{"sha": "f52c723967006d4c135e46bb3e2974e54657a5d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUyYzcyMzk2NzAwNmQ0YzEzNWU0NmJiM2UyOTc0ZTU0NjU3YTVkOA==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "2000-09-07T12:09:41Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-09-07T12:09:41Z"}, "message": "Makefile.am (Thread.h): Don't be friends with native threads functions.\n\n2000-09-07  Bryce McKinlay  <bryce@albatross.co.nz>\n\n\t* Makefile.am (Thread.h): Don't be friends with native threads\n\tfunctions.\n\t* Makefile.in: Rebuilt.\n\t* java/lang/Thread.java (interrupt_flag): Make package-private.\n\nFrom-SVN: r36234", "tree": {"sha": "2aff7df92e2b4fd1538b01d40b2af2d2e8d7730e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2aff7df92e2b4fd1538b01d40b2af2d2e8d7730e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f52c723967006d4c135e46bb3e2974e54657a5d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f52c723967006d4c135e46bb3e2974e54657a5d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f52c723967006d4c135e46bb3e2974e54657a5d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f52c723967006d4c135e46bb3e2974e54657a5d8/comments", "author": null, "committer": null, "parents": [{"sha": "8441bc30354967518401cd47ff5355cc2e3abbfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8441bc30354967518401cd47ff5355cc2e3abbfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8441bc30354967518401cd47ff5355cc2e3abbfe"}], "stats": {"total": 81, "additions": 31, "deletions": 50}, "files": [{"sha": "01ab720d1a694cd85c8f1ba1978b5b4f6edce6c3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f52c723967006d4c135e46bb3e2974e54657a5d8/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f52c723967006d4c135e46bb3e2974e54657a5d8/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f52c723967006d4c135e46bb3e2974e54657a5d8", "patch": "@@ -1,3 +1,10 @@\n+2000-09-07  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\t* Makefile.am (Thread.h): Don't be friends with native threads \n+\tfunctions.\n+\t* Makefile.in: Rebuilt.\n+\t* java/lang/Thread.java (interrupt_flag): Make package-private.\n+\n 2000-09-06  Jeff Sturm  <jeff.sturm@appnet.com>\n \n \t* include/jvm.h (_Jv_HashCode): Cast object ptr to `unsigned long'"}, {"sha": "3b4ff9315015bfe792a150e65c02f7df8b3b77bc", "filename": "libjava/Makefile.am", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f52c723967006d4c135e46bb3e2974e54657a5d8/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f52c723967006d4c135e46bb3e2974e54657a5d8/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=f52c723967006d4c135e46bb3e2974e54657a5d8", "patch": "@@ -246,9 +246,6 @@ java/lang/Thread.h: java/lang/Thread.class libgcj.zip\n \t\t-friend '_Jv_JNIEnv * _Jv_GetCurrentJNIEnv ();' \\\n \t\t-friend 'void _Jv_SetCurrentJNIEnv (_Jv_JNIEnv *env);' \\\n \t\t-friend 'class gnu::gcj::jni::NativeThread;' \\\n-\t\t-friend 'int _Jv_CondWait (_Jv_ConditionVariable_t *cv, _Jv_Mutex_t *mu, jlong millis, jint nanos);' \\\n-\t\t-friend 'int _Jv_CondNotify (_Jv_ConditionVariable_t *cv, _Jv_Mutex_t *mu);' \\\n-\t\t-friend 'void _Jv_ThreadInterrupt (_Jv_Thread_t *data);' \\\n \t\t$(basename $<)\n \n java/lang/String.h: java/lang/String.class libgcj.zip"}, {"sha": "bdd6080d4f1f38398de98cbfa88125580999e265", "filename": "libjava/Makefile.in", "status": "modified", "additions": 21, "deletions": 44, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f52c723967006d4c135e46bb3e2974e54657a5d8/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f52c723967006d4c135e46bb3e2974e54657a5d8/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=f52c723967006d4c135e46bb3e2974e54657a5d8", "patch": "@@ -115,48 +115,31 @@ here = @here@\n libgcj_basedir = @libgcj_basedir@\n \n AUTOMAKE_OPTIONS = foreign no-installinfo\n-@TESTSUBDIR_TRUE@SUBDIRS = \\\n-@TESTSUBDIR_TRUE@$(DIRLTDL) testsuite gcj include\n-@TESTSUBDIR_FALSE@SUBDIRS = \\\n-@TESTSUBDIR_FALSE@$(DIRLTDL) gcj include\n-@USE_LIBDIR_TRUE@toolexeclibdir = \\\n-@USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = \\\n-@USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexecdir = \\\n-@USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n+@TESTSUBDIR_TRUE@SUBDIRS = @TESTSUBDIR_TRUE@$(DIRLTDL) testsuite gcj include\n+@TESTSUBDIR_FALSE@SUBDIRS = @TESTSUBDIR_FALSE@$(DIRLTDL) gcj include\n+@USE_LIBDIR_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n \n toolexeclib_LTLIBRARIES = libgcj.la\n toolexeclib_DATA = libgcj.spec\n data_DATA = libgcj.zip\n \n-@NEEDS_DATA_START_TRUE@toolexeclib_LIBRARIES = \\\n-@NEEDS_DATA_START_TRUE@libgcjdata.a\n-@NEEDS_DATA_START_TRUE@libgcjdata_a_SOURCES = \\\n-@NEEDS_DATA_START_TRUE@libgcjdata.c\n+@NEEDS_DATA_START_TRUE@toolexeclib_LIBRARIES = @NEEDS_DATA_START_TRUE@libgcjdata.a\n+@NEEDS_DATA_START_TRUE@libgcjdata_a_SOURCES = @NEEDS_DATA_START_TRUE@libgcjdata.c\n \n-@NATIVE_TRUE@bin_PROGRAMS = \\\n-@NATIVE_TRUE@jv-convert gij\n+@NATIVE_TRUE@bin_PROGRAMS = @NATIVE_TRUE@jv-convert gij\n \n bin_SCRIPTS = addr2name.awk\n-@CANADIAN_TRUE@@NULL_TARGET_TRUE@GCJ = \\\n-@CANADIAN_TRUE@@NULL_TARGET_TRUE@gcj\n-@CANADIAN_TRUE@@NULL_TARGET_FALSE@GCJ = \\\n-@CANADIAN_TRUE@@NULL_TARGET_FALSE@$(target_alias)-gcj\n-@CANADIAN_FALSE@GCJ = \\\n-@CANADIAN_FALSE@$(expanded)/gcj$(EXEEXT) -B$(expanded)/\n-@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = \\\n-@CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/zip/zip$(EXEEXT)\n-@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = \\\n-@CANADIAN_TRUE@@NULL_TARGET_FALSE@zip\n-@CANADIAN_FALSE@ZIP = \\\n-@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/zip/zip$(EXEEXT)\n-@CANADIAN_TRUE@GCJH = \\\n-@CANADIAN_TRUE@gcjh\n-@CANADIAN_FALSE@GCJH = \\\n-@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n-@CANADIAN_FALSE@expanded = \\\n-@CANADIAN_FALSE@`cd $(MULTIBUILDTOP)../$(COMPPATH)/gcc && pwd`\n+@CANADIAN_TRUE@@NULL_TARGET_TRUE@GCJ = @CANADIAN_TRUE@@NULL_TARGET_TRUE@gcj\n+@CANADIAN_TRUE@@NULL_TARGET_FALSE@GCJ = @CANADIAN_TRUE@@NULL_TARGET_FALSE@$(target_alias)-gcj\n+@CANADIAN_FALSE@GCJ = @CANADIAN_FALSE@$(expanded)/gcj$(EXEEXT) -B$(expanded)/\n+@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = @CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/zip/zip$(EXEEXT)\n+@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = @CANADIAN_TRUE@@NULL_TARGET_FALSE@zip\n+@CANADIAN_FALSE@ZIP = @CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/zip/zip$(EXEEXT)\n+@CANADIAN_TRUE@GCJH = @CANADIAN_TRUE@gcjh\n+@CANADIAN_FALSE@GCJH = @CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n+@CANADIAN_FALSE@expanded = @CANADIAN_FALSE@`cd $(MULTIBUILDTOP)../$(COMPPATH)/gcc && pwd`\n \n GCJCOMPILE = $(LIBTOOL) --mode=compile $(GCJ) -fassume-compiled -fclasspath=$(here) -L$(here) $(JC1FLAGS) -c\n GCJLINK = $(LIBTOOL) --mode=link $(GCJ) -L$(here) $(JC1FLAGS) $(LDFLAGS) -o $@\n@@ -171,10 +154,8 @@ AM_CXXFLAGS = -fno-rtti -fvtable-thunks -fasynchronous-exceptions \\\n \t-fdollars-in-identifiers \\\n \t@LIBGCJ_CXXFLAGS@ @EXCEPTIONSPEC@ $(WARNINGS) -D_GNU_SOURCE\n \n-@USING_GCC_TRUE@AM_CFLAGS = \\\n-@USING_GCC_TRUE@@LIBGCJ_CFLAGS@ $(WARNINGS)\n-@USING_GCC_FALSE@AM_CFLAGS = \\\n-@USING_GCC_FALSE@@LIBGCJ_CFLAGS@\n+@USING_GCC_TRUE@AM_CFLAGS = @USING_GCC_TRUE@@LIBGCJ_CFLAGS@ $(WARNINGS)\n+@USING_GCC_FALSE@AM_CFLAGS = @USING_GCC_FALSE@@LIBGCJ_CFLAGS@\n \n JCFLAGS = -g\n JC1FLAGS = -g @LIBGCJ_JAVAFLAGS@\n@@ -226,8 +207,7 @@ extra_headers = java/lang/Object.h java/lang/Class.h\n \n NM = nm\n \n-@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = \\\n-@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@gen-from-JIS\n+@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = @NATIVE_TRUE@@MAINTAINER_MODE_TRUE@gen-from-JIS\n \n CONVERT_DIR = gnu/gcj/convert\n \n@@ -1868,7 +1848,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  d=$(srcdir); \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\\n@@ -2120,9 +2100,6 @@ java/lang/Thread.h: java/lang/Thread.class libgcj.zip\n \t\t-friend '_Jv_JNIEnv * _Jv_GetCurrentJNIEnv ();' \\\n \t\t-friend 'void _Jv_SetCurrentJNIEnv (_Jv_JNIEnv *env);' \\\n \t\t-friend 'class gnu::gcj::jni::NativeThread;' \\\n-\t\t-friend 'int _Jv_CondWait (_Jv_ConditionVariable_t *cv, _Jv_Mutex_t *mu, jlong millis, jint nanos);' \\\n-\t\t-friend 'int _Jv_CondNotify (_Jv_ConditionVariable_t *cv, _Jv_Mutex_t *mu);' \\\n-\t\t-friend 'void _Jv_ThreadInterrupt (_Jv_Thread_t *data);' \\\n \t\t$(basename $<)\n \n java/lang/String.h: java/lang/String.class libgcj.zip"}, {"sha": "3ee03093ac5c66f33a09af728970d199b81a4e57", "filename": "libjava/java/lang/Thread.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f52c723967006d4c135e46bb3e2974e54657a5d8/libjava%2Fjava%2Flang%2FThread.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f52c723967006d4c135e46bb3e2974e54657a5d8/libjava%2Fjava%2Flang%2FThread.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThread.java?ref=f52c723967006d4c135e46bb3e2974e54657a5d8", "patch": "@@ -288,7 +288,7 @@ public String toString ()\n   private Runnable runnable;\n   private int priority;\n   private boolean daemon_flag;\n-  private boolean interrupt_flag;\n+  boolean interrupt_flag;\n   private boolean alive_flag;\n   private boolean startable_flag;\n "}, {"sha": "e5a1668dac8579bc714ba79f11e2543c383d749d", "filename": "libjava/posix-threads.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f52c723967006d4c135e46bb3e2974e54657a5d8/libjava%2Fposix-threads.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f52c723967006d4c135e46bb3e2974e54657a5d8/libjava%2Fposix-threads.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fposix-threads.cc?ref=f52c723967006d4c135e46bb3e2974e54657a5d8", "patch": "@@ -214,8 +214,8 @@ _Jv_CondNotify (_Jv_ConditionVariable_t *cv, _Jv_Mutex_t *mu)\n       pthread_cond_signal (&target->wait_cond);\n       pthread_mutex_unlock (&target->wait_mutex);\n \n-      // Two successive notify() calls should not be delivered to the same \n-      // thread, so we remove the target thread from the cv wait list now.\n+      // Two concurrent notify() calls must not be delivered to the same \n+      // thread, so remove the target thread from the cv wait list now.\n       if (prev == NULL)\n \tcv->first = target->next;\n       else"}]}