{"sha": "585334d41d1a255f612d6470ba9b7bd383cdd5e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg1MzM0ZDQxZDFhMjU1ZjYxMmQ2NDcwYmE5YjdiZDM4M2NkZDVlNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-06-14T07:26:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-06-14T07:26:52Z"}, "message": "re PR middle-end/71310 (Bitfields cause load hit store with smaller store and larger load)\n\n2016-06-14  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/71310\n\tPR bootstrap/71510\n\t* expr.h (get_bit_range): Declare.\n\t* expr.c (get_bit_range): Export.\n\t* fold-const.c (optimize_bit_field_compare): Use get_bit_range and\n\tword_mode again to constrain the bitfield access.\n\nFrom-SVN: r237426", "tree": {"sha": "e7a306bcc65b98f0ce32db3ed56a02f801a9cc08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7a306bcc65b98f0ce32db3ed56a02f801a9cc08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/585334d41d1a255f612d6470ba9b7bd383cdd5e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/585334d41d1a255f612d6470ba9b7bd383cdd5e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/585334d41d1a255f612d6470ba9b7bd383cdd5e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/585334d41d1a255f612d6470ba9b7bd383cdd5e4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "90b72e84c427d4e735ae98dc06fe84fc1ec8139b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b72e84c427d4e735ae98dc06fe84fc1ec8139b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90b72e84c427d4e735ae98dc06fe84fc1ec8139b"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "40e60a3db344d652b74e8d58125939a9f470e078", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585334d41d1a255f612d6470ba9b7bd383cdd5e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585334d41d1a255f612d6470ba9b7bd383cdd5e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=585334d41d1a255f612d6470ba9b7bd383cdd5e4", "patch": "@@ -1,3 +1,12 @@\n+2016-06-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/71310\n+\tPR bootstrap/71510\n+\t* expr.h (get_bit_range): Declare.\n+\t* expr.c (get_bit_range): Export.\n+\t* fold-const.c (optimize_bit_field_compare): Use get_bit_range and\n+\tword_mode again to constrain the bitfield access.\n+\n 2016-06-14  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/71521"}, {"sha": "6547be1c377c77aae8aa89a1366a707f666bd30d", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585334d41d1a255f612d6470ba9b7bd383cdd5e4/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585334d41d1a255f612d6470ba9b7bd383cdd5e4/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=585334d41d1a255f612d6470ba9b7bd383cdd5e4", "patch": "@@ -4795,7 +4795,7 @@ optimize_bitfield_assignment_op (unsigned HOST_WIDE_INT bitsize,\n    If the access does not need to be restricted, 0 is returned in both\n    *BITSTART and *BITEND.  */\n \n-static void\n+void\n get_bit_range (unsigned HOST_WIDE_INT *bitstart,\n \t       unsigned HOST_WIDE_INT *bitend,\n \t       tree exp,"}, {"sha": "a77f6e53cd345b11d825f4ee832c683f37ce87c1", "filename": "gcc/expr.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585334d41d1a255f612d6470ba9b7bd383cdd5e4/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585334d41d1a255f612d6470ba9b7bd383cdd5e4/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=585334d41d1a255f612d6470ba9b7bd383cdd5e4", "patch": "@@ -242,6 +242,10 @@ extern rtx push_block (rtx, int, int);\n extern bool emit_push_insn (rtx, machine_mode, tree, rtx, unsigned int,\n \t\t\t    int, rtx, int, rtx, rtx, int, rtx, bool);\n \n+/* Extract the accessible bit-range from a COMPONENT_REF.  */\n+extern void get_bit_range (unsigned HOST_WIDE_INT *, unsigned HOST_WIDE_INT *,\n+\t\t\t   tree, HOST_WIDE_INT *, tree *);\n+\n /* Expand an assignment that stores the value of FROM into TO.  */\n extern void expand_assignment (tree, tree, bool);\n "}, {"sha": "3b9500dafe65a79cffc1a7c64c941b86c4e568c0", "filename": "gcc/fold-const.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585334d41d1a255f612d6470ba9b7bd383cdd5e4/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585334d41d1a255f612d6470ba9b7bd383cdd5e4/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=585334d41d1a255f612d6470ba9b7bd383cdd5e4", "patch": "@@ -3902,24 +3902,23 @@ optimize_bit_field_compare (location_t loc, enum tree_code code,\n        return 0;\n    }\n \n-  /* Don't use a larger mode for reading the bit field than we will\n-     use in other places accessing the bit field.  */\n-  machine_mode largest_mode = word_mode;\n+  /* Honor the C++ memory model and mimic what RTL expansion does.  */\n+  unsigned HOST_WIDE_INT bitstart = 0;\n+  unsigned HOST_WIDE_INT bitend = 0;\n   if (TREE_CODE (lhs) == COMPONENT_REF)\n     {\n-      tree field = TREE_OPERAND (lhs, 1);\n-      tree repr = DECL_BIT_FIELD_REPRESENTATIVE (field);\n-      if (repr)\n-\tlargest_mode = DECL_MODE (repr);\n+      get_bit_range (&bitstart, &bitend, lhs, &lbitpos, &offset);\n+      if (offset != NULL_TREE)\n+\treturn 0;\n     }\n \n   /* See if we can find a mode to refer to this field.  We should be able to,\n      but fail if we can't.  */\n-  nmode = get_best_mode (lbitsize, lbitpos, 0, 0,\n+  nmode = get_best_mode (lbitsize, lbitpos, bitstart, bitend,\n \t\t\t const_p ? TYPE_ALIGN (TREE_TYPE (linner))\n \t\t\t : MIN (TYPE_ALIGN (TREE_TYPE (linner)),\n \t\t\t\tTYPE_ALIGN (TREE_TYPE (rinner))),\n-\t\t\t largest_mode, false);\n+\t\t\t word_mode, false);\n   if (nmode == VOIDmode)\n     return 0;\n "}]}