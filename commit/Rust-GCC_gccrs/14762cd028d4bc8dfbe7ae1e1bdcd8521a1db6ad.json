{"sha": "14762cd028d4bc8dfbe7ae1e1bdcd8521a1db6ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ3NjJjZDAyOGQ0YmM4ZGZiZTdhZTFlMWJkY2Q4NTIxYTFkYjZhZA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-10-22T12:04:16Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-10-22T12:04:16Z"}, "message": "Simplify comparison of attrs in IPA ICF.\n\n2018-10-22  Martin Liska  <mliska@suse.cz>\n\n\t* ipa-icf.c (sem_item::compare_attributes): Remove.\n\t(sem_item::compare_referenced_symbol_properties): Use\n\tattribute_list_equal instead.\n\t(sem_function::equals_wpa): Likewise.\n\t* ipa-icf.h: Remove compare_attributes.\n\nFrom-SVN: r265386", "tree": {"sha": "f5ec3914833f763375f491a4dc40eed6598f4595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5ec3914833f763375f491a4dc40eed6598f4595"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14762cd028d4bc8dfbe7ae1e1bdcd8521a1db6ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14762cd028d4bc8dfbe7ae1e1bdcd8521a1db6ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14762cd028d4bc8dfbe7ae1e1bdcd8521a1db6ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14762cd028d4bc8dfbe7ae1e1bdcd8521a1db6ad/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f79de13a061f1c819af45dbc309ac7e52e5a0c0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f79de13a061f1c819af45dbc309ac7e52e5a0c0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f79de13a061f1c819af45dbc309ac7e52e5a0c0a"}], "stats": {"total": 70, "additions": 12, "deletions": 58}, "files": [{"sha": "736904fb679b85d350f5387e29ff0367cad68d4d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14762cd028d4bc8dfbe7ae1e1bdcd8521a1db6ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14762cd028d4bc8dfbe7ae1e1bdcd8521a1db6ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14762cd028d4bc8dfbe7ae1e1bdcd8521a1db6ad", "patch": "@@ -1,3 +1,11 @@\n+2018-10-22  Martin Liska  <mliska@suse.cz>\n+\n+\t* ipa-icf.c (sem_item::compare_attributes): Remove.\n+\t(sem_item::compare_referenced_symbol_properties): Use\n+\tattribute_list_equal instead.\n+\t(sem_function::equals_wpa): Likewise.\n+\t* ipa-icf.h: Remove compare_attributes.\n+\n 2018-10-22  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/87682"}, {"sha": "ff313197f64978f2a676e1724a2473fb737c5664", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 4, "deletions": 55, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14762cd028d4bc8dfbe7ae1e1bdcd8521a1db6ad/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14762cd028d4bc8dfbe7ae1e1bdcd8521a1db6ad/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=14762cd028d4bc8dfbe7ae1e1bdcd8521a1db6ad", "patch": "@@ -305,57 +305,6 @@ sem_function::get_hash (void)\n   return m_hash;\n }\n \n-/* Return ture if A1 and A2 represent equivalent function attribute lists.\n-   Based on comp_type_attributes.  */\n-\n-bool\n-sem_item::compare_attributes (const_tree a1, const_tree a2)\n-{\n-  const_tree a;\n-  if (a1 == a2)\n-    return true;\n-  for (a = a1; a != NULL_TREE; a = TREE_CHAIN (a))\n-    {\n-      const struct attribute_spec *as;\n-      const_tree attr;\n-\n-      as = lookup_attribute_spec (get_attribute_name (a));\n-      /* TODO: We can introduce as->affects_decl_identity\n-\t and as->affects_decl_reference_identity if attribute mismatch\n-\t gets a common reason to give up on merging.  It may not be worth\n-\t the effort.\n-\t For example returns_nonnull affects only references, while\n-\t optimize attribute can be ignored because it is already lowered\n-\t into flags representation and compared separately.  */\n-      if (!as)\n-        continue;\n-\n-      attr = lookup_attribute (as->name, CONST_CAST_TREE (a2));\n-      if (!attr || !attribute_value_equal (a, attr))\n-        break;\n-    }\n-  if (!a)\n-    {\n-      for (a = a2; a != NULL_TREE; a = TREE_CHAIN (a))\n-\t{\n-\t  const struct attribute_spec *as;\n-\n-\t  as = lookup_attribute_spec (get_attribute_name (a));\n-\t  if (!as)\n-\t    continue;\n-\n-\t  if (!lookup_attribute (as->name, CONST_CAST_TREE (a1)))\n-\t    break;\n-\t  /* We don't need to compare trees again, as we did this\n-\t     already in first loop.  */\n-\t}\n-      if (!a)\n-        return true;\n-    }\n-  /* TODO: As in comp_type_attributes we may want to introduce target hook.  */\n-  return false;\n-}\n-\n /* Compare properties of symbols N1 and N2 that does not affect semantics of\n    symbol itself but affects semantics of its references from USED_BY (which\n    may be NULL if it is unknown).  If comparsion is false, symbols\n@@ -429,8 +378,8 @@ sem_item::compare_referenced_symbol_properties (symtab_node *used_by,\n \t variables just compare attributes for references - the codegen\n \t for constructors is affected only by those attributes that we lower\n \t to explicit representation (such as DECL_ALIGN or DECL_SECTION).  */\n-      if (!compare_attributes (DECL_ATTRIBUTES (n1->decl),\n-\t\t\t       DECL_ATTRIBUTES (n2->decl)))\n+      if (!attribute_list_equal (DECL_ATTRIBUTES (n1->decl),\n+\t\t\t\t DECL_ATTRIBUTES (n2->decl)))\n \treturn return_false_with_msg (\"different var decl attributes\");\n       if (comp_type_attributes (TREE_TYPE (n1->decl),\n \t\t\t\tTREE_TYPE (n2->decl)) != 1)\n@@ -716,8 +665,8 @@ sem_function::equals_wpa (sem_item *item,\n   if (comp_type_attributes (TREE_TYPE (decl),\n \t\t\t    TREE_TYPE (item->decl)) != 1)\n     return return_false_with_msg (\"different type attributes\");\n-  if (!compare_attributes (DECL_ATTRIBUTES (decl),\n-\t\t\t   DECL_ATTRIBUTES (item->decl)))\n+  if (!attribute_list_equal (DECL_ATTRIBUTES (decl),\n+\t\t\t     DECL_ATTRIBUTES (item->decl)))\n     return return_false_with_msg (\"different decl attributes\");\n \n   /* The type of THIS pointer type memory location for"}, {"sha": "0359653d2f88fe5c94c1664544a8a52a5830182a", "filename": "gcc/ipa-icf.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14762cd028d4bc8dfbe7ae1e1bdcd8521a1db6ad/gcc%2Fipa-icf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14762cd028d4bc8dfbe7ae1e1bdcd8521a1db6ad/gcc%2Fipa-icf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.h?ref=14762cd028d4bc8dfbe7ae1e1bdcd8521a1db6ad", "patch": "@@ -255,9 +255,6 @@ class sem_item\n \t\t\t\t\t            symtab_node *n2,\n \t\t\t\t\t            bool address);\n \n-  /* Compare two attribute lists.  */\n-  static bool compare_attributes (const_tree list1, const_tree list2);\n-\n   /* Hash properties compared by compare_referenced_symbol_properties.  */\n   void hash_referenced_symbol_properties (symtab_node *ref,\n \t\t\t\t\t  inchash::hash &hstate,"}]}