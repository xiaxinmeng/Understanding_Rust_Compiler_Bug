{"sha": "6836e0240ee7235a72c236ed8fa688759ec15e47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgzNmUwMjQwZWU3MjM1YTcyYzIzNmVkOGZhNjg4NzU5ZWMxNWU0Nw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-02-14T20:38:33Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-02-14T20:38:33Z"}, "message": "regclass.c (init_reg_sets_1): Reinstall the optimization of move_cost together with Matt Kraai's fix.\n\n\n\t* regclass.c (init_reg_sets_1): Reinstall the optimization of\n\tmove_cost together with Matt Kraai's fix.\n\nFrom-SVN: r39688", "tree": {"sha": "94e1a57b5815232c6de54e8235efc55de18b8921", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94e1a57b5815232c6de54e8235efc55de18b8921"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6836e0240ee7235a72c236ed8fa688759ec15e47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6836e0240ee7235a72c236ed8fa688759ec15e47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6836e0240ee7235a72c236ed8fa688759ec15e47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6836e0240ee7235a72c236ed8fa688759ec15e47/comments", "author": null, "committer": null, "parents": [{"sha": "d3fb92b8257eb4669add750848ced425ab49ac1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3fb92b8257eb4669add750848ced425ab49ac1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3fb92b8257eb4669add750848ced425ab49ac1d"}], "stats": {"total": 102, "additions": 70, "deletions": 32}, "files": [{"sha": "732e24a0d62cefa63d739fdfa7986817985aab12", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6836e0240ee7235a72c236ed8fa688759ec15e47/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6836e0240ee7235a72c236ed8fa688759ec15e47/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6836e0240ee7235a72c236ed8fa688759ec15e47", "patch": "@@ -1,3 +1,8 @@\n+Wed Feb 14 10:08:26 CET 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* regclass.c (init_reg_sets_1): Reinstall the optimization of\n+\tmove_cost together with Matt Kraai's fix.\n+\n 2001-02-14  Jeffrey Oldham  <oldham@codesourcery.com>\n \n \t* Makefile.in (OBJS): Add params.o."}, {"sha": "3b07c13f870896dc5fff70d03957c7e86f57feb8", "filename": "gcc/regclass.c", "status": "modified", "additions": 65, "deletions": 32, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6836e0240ee7235a72c236ed8fa688759ec15e47/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6836e0240ee7235a72c236ed8fa688759ec15e47/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=6836e0240ee7235a72c236ed8fa688759ec15e47", "patch": "@@ -288,6 +288,8 @@ init_reg_sets_1 ()\n {\n   register unsigned int i, j;\n   register unsigned int /* enum machine_mode */ m;\n+  char contains_reg_of_mode [N_REG_CLASSES] [MAX_MACHINE_MODE];\n+  char allocatable_regs_of_mode [MAX_MACHINE_MODE];\n \n   /* This macro allows the fixed or call-used registers\n      and the register classes to depend on target flags.  */\n@@ -423,44 +425,75 @@ init_reg_sets_1 ()\n       if (CLASS_LIKELY_SPILLED_P (REGNO_REG_CLASS (i)))\n \tSET_HARD_REG_BIT (losing_caller_save_reg_set, i);\n     }\n+  memset (contains_reg_of_mode, 0, sizeof (contains_reg_of_mode));\n+  memset (allocatable_regs_of_mode, 0, sizeof (allocatable_regs_of_mode));\n+  for (m = 0; m < MAX_MACHINE_MODE; m++)\n+    for (i = 0; i < N_REG_CLASSES; i++)\n+      for (j = 0; j < FIRST_PSEUDO_REGISTER; j++)\n+\tif (!fixed_regs [j] && TEST_HARD_REG_BIT (reg_class_contents[i], j)\n+\t    && HARD_REGNO_MODE_OK (j, m))\n+\t   {\n+\t     contains_reg_of_mode [i][m] = 1;\n+\t     allocatable_regs_of_mode [m] = 1;\n+\t     break;\n+\t   }\n \n   /* Initialize the move cost table.  Find every subset of each class\n      and take the maximum cost of moving any subset to any other.  */\n \n   for (m = 0; m < MAX_MACHINE_MODE; m++)\n-    for (i = 0; i < N_REG_CLASSES; i++)\n-      for (j = 0; j < N_REG_CLASSES; j++)\n-\t{\n-\t  int cost = i == j ? 2 : REGISTER_MOVE_COST (m, i, j);\n-\t  enum reg_class *p1, *p2;\n-\n-\t  for (p2 = &reg_class_subclasses[j][0]; *p2 != LIM_REG_CLASSES; p2++)\n-\t    if (*p2 != i)\n-\t      cost = MAX (cost, REGISTER_MOVE_COST (m, i, *p2));\n-\n-\t  for (p1 = &reg_class_subclasses[i][0]; *p1 != LIM_REG_CLASSES; p1++)\n-\t    {\n-\t      if (*p1 != j)\n-\t\tcost = MAX (cost, REGISTER_MOVE_COST (m, *p1, j));\n-\n-\t      for (p2 = &reg_class_subclasses[j][0];\n-\t\t   *p2 != LIM_REG_CLASSES; p2++)\n-\t\tif (*p1 != *p2)\n-\t\t  cost = MAX (cost, REGISTER_MOVE_COST (m, *p1, *p2));\n-\t    }\n-\n-\t  move_cost[m][i][j] = cost;\n-\n-\t  if (reg_class_subset_p (i, j))\n-\t    may_move_in_cost[m][i][j] = 0;\n-\t  else\n-\t    may_move_in_cost[m][i][j] = cost;\n-\n-\t  if (reg_class_subset_p (j, i))\n-\t    may_move_out_cost[m][i][j] = 0;\n+    if (allocatable_regs_of_mode [m])\n+      {\n+\tfor (i = 0; i < N_REG_CLASSES; i++)\n+\t  if (contains_reg_of_mode [i][m])\n+\t    for (j = 0; j < N_REG_CLASSES; j++)\n+\t      {\n+\t\tint cost;\n+\t\tenum reg_class *p1, *p2;\n+\n+\t\tif (!contains_reg_of_mode [j][m])\n+\t\t  {\n+\t\t    move_cost[m][i][j] = 65536;\n+\t\t    may_move_in_cost[m][i][j] = 65536;\n+\t\t    may_move_out_cost[m][i][j] = 65536;\n+\t\t  }\n+\t\telse\n+\t\t  {\n+\t\t    cost = i == j ? 2 : REGISTER_MOVE_COST (m, i, j);\n+\n+\t\t    for (p2 = &reg_class_subclasses[j][0];\n+\t\t\t *p2 != LIM_REG_CLASSES;\n+\t\t\t p2++)\n+\t\t      if (*p2 != i && contains_reg_of_mode [*p2][m])\n+\t\t\tcost = MAX (cost, move_cost [m][i][*p2]);\n+\n+\t\t    for (p1 = &reg_class_subclasses[i][0];\n+\t\t\t *p1 != LIM_REG_CLASSES;\n+\t\t\t p1++)\n+\t\t      if (*p1 != j && contains_reg_of_mode [*p1][m])\n+\t\t\tcost = MAX (cost, move_cost [m][*p1][j]);\n+\n+\t\t    move_cost[m][i][j] = cost;\n+\n+\t\t    if (reg_class_subset_p (i, j))\n+\t\t      may_move_in_cost[m][i][j] = 0;\n+\t\t    else\n+\t\t      may_move_in_cost[m][i][j] = cost;\n+\n+\t\t    if (reg_class_subset_p (j, i))\n+\t\t      may_move_out_cost[m][i][j] = 0;\n+\t\t    else\n+\t\t      may_move_out_cost[m][i][j] = cost;\n+\t\t  }\n+\t      }\n \t  else\n-\t    may_move_out_cost[m][i][j] = cost;\n-\t}\n+\t    for (j = 0; j < N_REG_CLASSES; j++)\n+\t      {\n+\t\tmove_cost[m][i][j] = 65536;\n+\t\tmay_move_in_cost[m][i][j] = 65536;\n+\t\tmay_move_out_cost[m][i][j] = 65536;\n+\t      }\n+      }\n \n #ifdef CLASS_CANNOT_CHANGE_MODE\n   {"}]}