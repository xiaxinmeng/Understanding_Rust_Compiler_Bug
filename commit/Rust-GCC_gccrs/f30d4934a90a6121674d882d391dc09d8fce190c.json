{"sha": "f30d4934a90a6121674d882d391dc09d8fce190c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMwZDQ5MzRhOTBhNjEyMTY3NGQ4ODJkMzkxZGMwOWQ4ZmNlMTkwYw==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@linux.alibaba.com", "date": "2019-03-26T11:12:37Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-03-26T11:12:37Z"}, "message": "re PR tree-optimization/81740 (wrong code at -O3 in both 32-bit and 64-bit modes on x86_64-linux-gnu)\n\n2019-03-26  Bin Cheng  <bin.cheng@linux.alibaba.com>\n\n\tPR tree-optimization/81740\n\t* tree-vect-data-refs.c (vect_analyze_data_ref_dependence):\n\tIn case of outer loop vectorization, check for backward dependence\n\tat the inner loop if outer loop dependence is reversed.\n\n\t* gcc.dg/vect/pr81740-1.c: New testcase.\n\t* gcc.dg/vect/pr81740-2.c: Likewise.\n\nFrom-SVN: r269938", "tree": {"sha": "dceaf13c79931e68028dfe72926292485c514420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dceaf13c79931e68028dfe72926292485c514420"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f30d4934a90a6121674d882d391dc09d8fce190c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f30d4934a90a6121674d882d391dc09d8fce190c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f30d4934a90a6121674d882d391dc09d8fce190c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f30d4934a90a6121674d882d391dc09d8fce190c/comments", "author": null, "committer": null, "parents": [{"sha": "a235c72e64a2ec26d63d614e3d1ce12a7e061201", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a235c72e64a2ec26d63d614e3d1ce12a7e061201", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a235c72e64a2ec26d63d614e3d1ce12a7e061201"}], "stats": {"total": 77, "additions": 75, "deletions": 2}, "files": [{"sha": "2801b392057a4e8e95daaddb812ac7760fd3a746", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f30d4934a90a6121674d882d391dc09d8fce190c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f30d4934a90a6121674d882d391dc09d8fce190c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f30d4934a90a6121674d882d391dc09d8fce190c", "patch": "@@ -1,3 +1,10 @@\n+2019-03-26  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\n+\tPR tree-optimization/81740\n+\t* tree-vect-data-refs.c (vect_analyze_data_ref_dependence):\n+\tIn case of outer loop vectorization, check for backward dependence\n+\tat the inner loop if outer loop dependence is reversed.\n+\n 2019-03-26  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000.c (rs6000_init_hard_regno_mode_ok): Correct"}, {"sha": "39fb94476a922f1e89dd4fd7b81f1bef117549b1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f30d4934a90a6121674d882d391dc09d8fce190c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f30d4934a90a6121674d882d391dc09d8fce190c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f30d4934a90a6121674d882d391dc09d8fce190c", "patch": "@@ -1,3 +1,9 @@\n+2019-03-26  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\n+\tPR tree-optimization/81740\n+\t* gcc.dg/vect/pr81740-1.c: New testcase.\n+\t* gcc.dg/vect/pr81740-2.c: Likewise.\n+\n 2019-03-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* gdc.test/gdc-test.exp (gdc-do-test): Sort and remove duplicate"}, {"sha": "d2226fcdbeeb105a777822ecf0c99f6578a935a2", "filename": "gcc/testsuite/gcc.dg/vect/pr81740-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f30d4934a90a6121674d882d391dc09d8fce190c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81740-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f30d4934a90a6121674d882d391dc09d8fce190c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81740-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81740-1.c?ref=f30d4934a90a6121674d882d391dc09d8fce190c", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target vect_int } */\n+\n+#include \"tree-vect.h\"\n+\n+int a[8][10] = { [2][5] = 4 }, c;\n+\n+int\n+main ()\n+{\n+  short b;\n+  int i, d;\n+  check_vect ();\n+  for (b = 4; b >= 0; b--)\n+    for (c = 0; c <= 6; c++)\n+      a[c + 1][b + 2] = a[c][b + 1];\n+  for (i = 0; i < 8; i++)\n+    for (d = 0; d < 10; d++)\n+      if (a[i][d] != (i == 3 && d == 6) * 4)\n+\t__builtin_abort ();\n+  return 0;\n+}"}, {"sha": "76637ad0f816b09722cb9790883dd101302e59b9", "filename": "gcc/testsuite/gcc.dg/vect/pr81740-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f30d4934a90a6121674d882d391dc09d8fce190c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81740-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f30d4934a90a6121674d882d391dc09d8fce190c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81740-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81740-2.c?ref=f30d4934a90a6121674d882d391dc09d8fce190c", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target vect_int } */\n+\n+#include \"tree-vect.h\"\n+\n+int a[8][10] = { [2][5] = 4 }, c;\n+\n+int\n+main ()\n+{\n+  short b;\n+  int i, d;\n+  check_vect ();\n+  for (b = 4; b >= 0; b--)\n+    for (c = 6; c >= 0; c--)\n+      a[c + 1][b + 2] = a[c][b + 1];\n+  for (i = 0; i < 8; i++)\n+    for (d = 0; d < 10; d++)\n+      if (a[i][d] != (i == 3 && d == 6) * 4)\n+\t__builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"OUTER LOOP VECTORIZED\" \"vect\" } } */"}, {"sha": "1380088af6a4c7ab0ef66d39276caef6682df5e9", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f30d4934a90a6121674d882d391dc09d8fce190c/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f30d4934a90a6121674d882d391dc09d8fce190c/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=f30d4934a90a6121674d882d391dc09d8fce190c", "patch": "@@ -473,8 +473,22 @@ vect_analyze_data_ref_dependence (struct data_dependence_relation *ddr,\n \t     reversed (to make distance vector positive), and the actual\n \t     distance is negative.  */\n \t  if (dump_enabled_p ())\n-\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t    dump_printf_loc (MSG_NOTE, vect_location,\n \t                     \"dependence distance negative.\\n\");\n+\t  /* When doing outer loop vectorization, we need to check if there is\n+\t     a backward dependence at the inner loop level if the dependence\n+\t     at the outer loop is reversed.  See PR81740.  */\n+\t  if (nested_in_vect_loop_p (loop, stmtinfo_a)\n+\t      || nested_in_vect_loop_p (loop, stmtinfo_b))\n+\t    {\n+\t      unsigned inner_depth = index_in_loop_nest (loop->inner->num,\n+\t\t\t\t\t\t\t DDR_LOOP_NEST (ddr));\n+\t      if (dist_v[inner_depth] < 0)\n+\t\treturn opt_result::failure_at (stmtinfo_a->stmt,\n+\t\t\t\t\t       \"not vectorized, dependence \"\n+\t\t\t\t\t       \"between data-refs %T and %T\\n\",\n+\t\t\t\t\t       DR_REF (dra), DR_REF (drb));\n+\t    }\n \t  /* Record a negative dependence distance to later limit the\n \t     amount of stmt copying / unrolling we can perform.\n \t     Only need to handle read-after-write dependence.  */\n@@ -490,7 +504,7 @@ vect_analyze_data_ref_dependence (struct data_dependence_relation *ddr,\n \t{\n \t  /* The dependence distance requires reduction of the maximal\n \t     vectorization factor.  */\n-\t  *max_vf = abs (dist);\n+\t  *max_vf = abs_dist;\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_NOTE, vect_location,\n \t                     \"adjusting maximal vectorization factor to %i\\n\","}]}