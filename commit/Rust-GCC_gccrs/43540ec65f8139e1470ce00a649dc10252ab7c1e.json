{"sha": "43540ec65f8139e1470ce00a649dc10252ab7c1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM1NDBlYzY1ZjgxMzllMTQ3MGNlMDBhNjQ5ZGMxMDI1MmFiN2MxZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-05T13:42:47Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-05T13:42:47Z"}, "message": "adaint.c, [...]: Add support for the readable attribute.\n\n2008-08-05  Pascal Obry  <obry@adacore.com>\n\n\t* adaint.c, adaint.h, s-os_lib.adb, s-os_lib.ads: Add support for the\n\treadable attribute.\n\nFrom-SVN: r138709", "tree": {"sha": "4e86e711b7bdbc2a81cc940dffd1219d6013d0f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e86e711b7bdbc2a81cc940dffd1219d6013d0f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43540ec65f8139e1470ce00a649dc10252ab7c1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43540ec65f8139e1470ce00a649dc10252ab7c1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43540ec65f8139e1470ce00a649dc10252ab7c1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43540ec65f8139e1470ce00a649dc10252ab7c1e/comments", "author": null, "committer": null, "parents": [{"sha": "486fd7f5d7da98d37a02887cfbb2d178ee6191bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/486fd7f5d7da98d37a02887cfbb2d178ee6191bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/486fd7f5d7da98d37a02887cfbb2d178ee6191bb"}], "stats": {"total": 161, "additions": 120, "deletions": 41}, "files": [{"sha": "d83538f0415c83e53126960bd56212c80ad3b205", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43540ec65f8139e1470ce00a649dc10252ab7c1e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43540ec65f8139e1470ce00a649dc10252ab7c1e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=43540ec65f8139e1470ce00a649dc10252ab7c1e", "patch": "@@ -1,3 +1,19 @@\n+2008-08-05  Pascal Obry  <obry@adacore.com>\n+\n+\t* adaint.c, adaint.h, s-os_lib.adb, s-os_lib.ads: Add support for the\n+\treadable attribute.\n+\n+2008-08-05  Vincent Celier  <celier@adacore.com>\n+\n+\t* s-wchwts.adb:\n+\t(Wide_String_To_String): Returns a String with the same 'First as its\n+\tparameter S.\n+\t(Wide_Wide_String_To_String): Ditto\n+\t\n+\t* s-wchwts.ads:\n+\t(Wide_String_To_String): Document that the lowest index of the returned\n+\tString is equal to S'First.\n+\n 2008-08-05  Thomas Quinot  <quinot@adacore.com>\n \n \t* xoscons.adb, xutil.ads, xutil.adb, s-oscons-tmplt.c: New files."}, {"sha": "242b82bd9c2066d15a4de84f759a358e84498f7b", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 51, "deletions": 27, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43540ec65f8139e1470ce00a649dc10252ab7c1e/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43540ec65f8139e1470ce00a649dc10252ab7c1e/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=43540ec65f8139e1470ce00a649dc10252ab7c1e", "patch": "@@ -1760,33 +1760,20 @@ __gnat_set_OWNER_ACL\n   TCHAR username [100];\n   DWORD unsize = 100;\n \n-  HANDLE file = CreateFile\n-    (wname, READ_CONTROL | WRITE_DAC, 0, NULL,\n-     OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS, NULL);\n-\n-  if (file == INVALID_HANDLE_VALUE)\n-    return;\n-\n   /*  Get current user, he will act as the owner */\n \n   if (!GetUserName (username, &unsize))\n     return;\n \n-  if (GetSecurityInfo\n-      (file,\n+  if (GetNamedSecurityInfo\n+      (wname,\n        SE_FILE_OBJECT,\n        DACL_SECURITY_INFORMATION,\n        NULL, NULL, &pOldDACL, NULL, &pSD) != ERROR_SUCCESS)\n     return;\n \n-  ZeroMemory (&ea, sizeof (EXPLICIT_ACCESS));\n-\n-  ea.grfAccessMode = AccessMode;\n-  ea.grfAccessPermissions = AccessPermissions;\n-  ea.grfInheritance = CONTAINER_INHERIT_ACE | OBJECT_INHERIT_ACE;\n-  ea.Trustee.TrusteeForm = TRUSTEE_IS_NAME;\n-  ea.Trustee.TrusteeType = TRUSTEE_IS_USER;\n-  ea.Trustee.ptstrName = username;\n+  BuildExplicitAccessWithName\n+    (&ea, username, AccessPermissions, AccessMode, NO_INHERITANCE);\n \n   if (AccessMode == SET_ACCESS)\n     {\n@@ -1799,14 +1786,13 @@ __gnat_set_OWNER_ACL\n     if (SetEntriesInAcl (1, &ea, pOldDACL, &pNewDACL) != ERROR_SUCCESS)\n       return;\n \n-  if (SetSecurityInfo\n-      (file, SE_FILE_OBJECT,\n+  if (SetNamedSecurityInfo\n+      (wname, SE_FILE_OBJECT,\n        DACL_SECURITY_INFORMATION, NULL, NULL, pNewDACL, NULL) != ERROR_SUCCESS)\n     return;\n \n   LocalFree (pSD);\n   LocalFree (pNewDACL);\n-  CloseHandle (file);\n }\n #endif /* defined (_WIN32) && !defined (RTX) */\n \n@@ -1892,7 +1878,7 @@ __gnat_set_writable (char *name)\n \n   S2WSU (wname, name, GNAT_MAX_PATH_LEN + 2);\n \n-  __gnat_set_OWNER_ACL (wname, GRANT_ACCESS, GENERIC_WRITE);\n+  __gnat_set_OWNER_ACL (wname, GRANT_ACCESS, FILE_GENERIC_WRITE);\n   SetFileAttributes\n     (wname, GetFileAttributes (wname) & ~FILE_ATTRIBUTE_READONLY);\n #elif ! defined (__vxworks) && ! defined(__nucleus__)\n@@ -1914,7 +1900,7 @@ __gnat_set_executable (char *name)\n \n   S2WSU (wname, name, GNAT_MAX_PATH_LEN + 2);\n \n-  __gnat_set_OWNER_ACL (wname, GRANT_ACCESS, GENERIC_EXECUTE);\n+  __gnat_set_OWNER_ACL (wname, GRANT_ACCESS, FILE_GENERIC_EXECUTE);\n #elif ! defined (__vxworks) && ! defined(__nucleus__)\n   struct stat statbuf;\n \n@@ -1934,17 +1920,55 @@ __gnat_set_non_writable (char *name)\n \n   S2WSU (wname, name, GNAT_MAX_PATH_LEN + 2);\n \n-  __gnat_set_OWNER_ACL (wname, REVOKE_ACCESS, GENERIC_WRITE);\n+  __gnat_set_OWNER_ACL (wname, DENY_ACCESS, FILE_GENERIC_WRITE);\n   SetFileAttributes\n     (wname, GetFileAttributes (wname) | FILE_ATTRIBUTE_READONLY);\n #elif ! defined (__vxworks) && ! defined(__nucleus__)\n   struct stat statbuf;\n \n   if (stat (name, &statbuf) == 0)\n-  {\n-    statbuf.st_mode = statbuf.st_mode & 07577;\n-    chmod (name, statbuf.st_mode);\n-  }\n+    {\n+      statbuf.st_mode = statbuf.st_mode & 07577;\n+      chmod (name, statbuf.st_mode);\n+    }\n+#endif\n+}\n+\n+void\n+__gnat_set_readable (char *name)\n+{\n+#if defined (_WIN32) && !defined (RTX)\n+  TCHAR wname [GNAT_MAX_PATH_LEN + 2];\n+\n+  S2WSU (wname, name, GNAT_MAX_PATH_LEN + 2);\n+\n+  __gnat_set_OWNER_ACL (wname, GRANT_ACCESS, FILE_GENERIC_READ);\n+#else\n+  struct stat statbuf;\n+\n+  if (stat (name, &statbuf) == 0)\n+    {\n+      chmod (name, statbuf.st_mode | S_IREAD);\n+    }\n+#endif\n+}\n+\n+void\n+__gnat_set_non_readable (char *name)\n+{\n+#if defined (_WIN32) && !defined (RTX)\n+  TCHAR wname [GNAT_MAX_PATH_LEN + 2];\n+\n+  S2WSU (wname, name, GNAT_MAX_PATH_LEN + 2);\n+\n+  __gnat_set_OWNER_ACL (wname, DENY_ACCESS, FILE_GENERIC_READ);\n+#else\n+  struct stat statbuf;\n+\n+  if (stat (name, &statbuf) == 0)\n+    {\n+      chmod (name, statbuf.st_mode & (~S_IREAD));\n+    }\n #endif\n }\n "}, {"sha": "3c8abc54979ae5ad6d0ab9701e84549fbcf79ff3", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43540ec65f8139e1470ce00a649dc10252ab7c1e/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43540ec65f8139e1470ce00a649dc10252ab7c1e/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=43540ec65f8139e1470ce00a649dc10252ab7c1e", "patch": "@@ -105,6 +105,8 @@ extern int    __gnat_is_executable_file            (char *name);\n extern void   __gnat_set_non_writable              (char *name);\n extern void   __gnat_set_writable                  (char *name);\n extern void   __gnat_set_executable                (char *name);\n+extern void   __gnat_set_readable                  (char *name);\n+extern void   __gnat_set_non_readable              (char *name);\n extern int    __gnat_is_symbolic_link\t\t   (char *name);\n extern int    __gnat_portable_spawn                (char *[]);\n extern int    __gnat_portable_no_block_spawn       (char *[]);"}, {"sha": "0e1c6c756b895db10e51620b8903e90884cdd5ac", "filename": "gcc/ada/s-os_lib.adb", "status": "modified", "additions": 42, "deletions": 14, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43540ec65f8139e1470ce00a649dc10252ab7c1e/gcc%2Fada%2Fs-os_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43540ec65f8139e1470ce00a649dc10252ab7c1e/gcc%2Fada%2Fs-os_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.adb?ref=43540ec65f8139e1470ce00a649dc10252ab7c1e", "patch": "@@ -2268,20 +2268,6 @@ package body System.OS_Lib is\n       Rename_File (C_Old_Name'Address, C_New_Name'Address, Success);\n    end Rename_File;\n \n-   ----------------------\n-   -- Set_Non_Writable --\n-   ----------------------\n-\n-   procedure Set_Non_Writable (Name : String) is\n-      procedure C_Set_Non_Writable (Name : C_File_Name);\n-      pragma Import (C, C_Set_Non_Writable, \"__gnat_set_non_writable\");\n-      C_Name : aliased String (Name'First .. Name'Last + 1);\n-   begin\n-      C_Name (Name'Range)  := Name;\n-      C_Name (C_Name'Last) := ASCII.NUL;\n-      C_Set_Non_Writable (C_Name (C_Name'First)'Address);\n-   end Set_Non_Writable;\n-\n    -----------------------\n    -- Set_Close_On_Exec --\n    -----------------------\n@@ -2313,6 +2299,48 @@ package body System.OS_Lib is\n       C_Set_Executable (C_Name (C_Name'First)'Address);\n    end Set_Executable;\n \n+   ----------------------\n+   -- Set_Non_Readable --\n+   ----------------------\n+\n+   procedure Set_Non_Readable (Name : String) is\n+      procedure C_Set_Non_Readable (Name : C_File_Name);\n+      pragma Import (C, C_Set_Non_Readable, \"__gnat_set_non_readable\");\n+      C_Name : aliased String (Name'First .. Name'Last + 1);\n+   begin\n+      C_Name (Name'Range)  := Name;\n+      C_Name (C_Name'Last) := ASCII.NUL;\n+      C_Set_Non_Readable (C_Name (C_Name'First)'Address);\n+   end Set_Non_Readable;\n+\n+   ----------------------\n+   -- Set_Non_Writable --\n+   ----------------------\n+\n+   procedure Set_Non_Writable (Name : String) is\n+      procedure C_Set_Non_Writable (Name : C_File_Name);\n+      pragma Import (C, C_Set_Non_Writable, \"__gnat_set_non_writable\");\n+      C_Name : aliased String (Name'First .. Name'Last + 1);\n+   begin\n+      C_Name (Name'Range)  := Name;\n+      C_Name (C_Name'Last) := ASCII.NUL;\n+      C_Set_Non_Writable (C_Name (C_Name'First)'Address);\n+   end Set_Non_Writable;\n+\n+   ------------------\n+   -- Set_Readable --\n+   ------------------\n+\n+   procedure Set_Readable (Name : String) is\n+      procedure C_Set_Readable (Name : C_File_Name);\n+      pragma Import (C, C_Set_Readable, \"__gnat_set_readable\");\n+      C_Name : aliased String (Name'First .. Name'Last + 1);\n+   begin\n+      C_Name (Name'Range)  := Name;\n+      C_Name (C_Name'Last) := ASCII.NUL;\n+      C_Set_Readable (C_Name (C_Name'First)'Address);\n+   end Set_Readable;\n+\n    --------------------\n    -- Set_Writable --\n    --------------------"}, {"sha": "8364d16076e825aa1abde5a2cef64027e080f8e0", "filename": "gcc/ada/s-os_lib.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43540ec65f8139e1470ce00a649dc10252ab7c1e/gcc%2Fada%2Fs-os_lib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43540ec65f8139e1470ce00a649dc10252ab7c1e/gcc%2Fada%2Fs-os_lib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.ads?ref=43540ec65f8139e1470ce00a649dc10252ab7c1e", "patch": "@@ -511,6 +511,15 @@ package System.OS_Lib is\n    procedure Set_Executable (Name : String);\n    --  Change permissions on the named file to make it executable for its owner\n \n+   procedure Set_Readable (Name : String);\n+   --  Change permissions on the named file to make it readable for its\n+   --  owner.\n+\n+   procedure Set_Non_Readable (Name : String);\n+   --  Change permissions on the named file to make it non-readable for\n+   --  its owner. The writable and executable permissions are not\n+   --  modified.\n+\n    function Locate_Exec_On_Path\n      (Exec_Name : String) return String_Access;\n    --  Try to locate an executable whose name is given by Exec_Name in the"}]}