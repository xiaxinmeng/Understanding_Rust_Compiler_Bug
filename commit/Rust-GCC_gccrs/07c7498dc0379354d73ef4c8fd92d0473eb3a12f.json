{"sha": "07c7498dc0379354d73ef4c8fd92d0473eb3a12f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdjNzQ5OGRjMDM3OTM1NGQ3M2VmNGM4ZmQ5MmQwNDczZWIzYTEyZg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-10-03T19:49:53Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-10-11T19:52:09Z"}, "message": "Objective-C, Darwin : Make protocols private extern and weak.\n\nNewer linkers want protocols to be private-extern and weak.\nThis is conditional on the runtime version.\n\ngcc/objc/ChangeLog:\n\n\t* objc-next-runtime-abi-02.c\n\t(create_global_decl): Update to allow the caller to\n\tspecify declaration or definition.\n\t(create_hidden_decl): Likewise.\n\t(next_runtime_abi_02_protocol_decl): Make the symbol\n\tweak and hidden for later OS runtime versions.\n\t(build_v2_protocol_list_address_table): Likewise.", "tree": {"sha": "c4fb1091f6fb91a90d42cf574b3be60b97c06d4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4fb1091f6fb91a90d42cf574b3be60b97c06d4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07c7498dc0379354d73ef4c8fd92d0473eb3a12f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c7498dc0379354d73ef4c8fd92d0473eb3a12f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07c7498dc0379354d73ef4c8fd92d0473eb3a12f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c7498dc0379354d73ef4c8fd92d0473eb3a12f/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcd9800fcd42489034c0774247eb898d79b1ea2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcd9800fcd42489034c0774247eb898d79b1ea2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcd9800fcd42489034c0774247eb898d79b1ea2d"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "d7812ffc98115e98fb90a4d87ba0e321a3bcbe94", "filename": "gcc/objc/objc-next-runtime-abi-02.c", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c7498dc0379354d73ef4c8fd92d0473eb3a12f/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c7498dc0379354d73ef4c8fd92d0473eb3a12f/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c?ref=07c7498dc0379354d73ef4c8fd92d0473eb3a12f", "patch": "@@ -920,33 +920,39 @@ create_extern_decl (tree type, const char *name)\n \n /* Create a globally visible definition for variable NAME of a given TYPE. The\n    finish_var_decl() routine will need to be called on it afterwards.  */\n+static tree\n+create_global_decl (tree type, const char *name, bool is_def = false);\n \n static tree\n-create_global_decl (tree type, const char *name)\n+create_global_decl (tree type, const char *name, bool is_def)\n {\n   tree id = get_identifier (name);\n   tree var = hash_name_lookup (extern_names, id);\n   if (var)\n-    {\n-      DECL_EXTERNAL (var) = 0;\n-      TREE_STATIC (var) = 1;\n-    }\n+    is_def = true;\n   else\n     {\n       var = start_var_decl (type, name);\n       hash_name_enter (extern_names, var);\n     }\n+  if (is_def)\n+    {\n+      DECL_EXTERNAL (var) = 0;\n+      TREE_STATIC (var) = 1;\n+    }\n   TREE_PUBLIC (var) = 1;\n   return var;\n }\n \n /* Create a symbol with __attribute__ ((visibility (\"hidden\")))\n    attribute (private extern).  */\n+static tree\n+create_hidden_decl (tree type, const char *name, bool is_def = false);\n \n static tree\n-create_hidden_decl (tree type, const char *name)\n+create_hidden_decl (tree type, const char *name, bool is_def)\n {\n-    tree decl = create_global_decl (type, name);\n+    tree decl = create_global_decl (type, name, is_def);\n     DECL_VISIBILITY (decl) = VISIBILITY_HIDDEN;\n     DECL_VISIBILITY_SPECIFIED (decl) = 1;\n     return decl;\n@@ -1014,7 +1020,13 @@ next_runtime_abi_02_protocol_decl (tree p)\n   /* static struct _objc_protocol _OBJC_Protocol_<mumble>; */\n   snprintf (buf, BUFSIZE, \"_OBJC_Protocol_%s\",\n \t    IDENTIFIER_POINTER (PROTOCOL_NAME (p)));\n-  decl = start_var_decl (objc_v2_protocol_template, buf);\n+  if (flag_next_runtime >= USE_FIXUP_BEFORE)\n+    {\n+      decl = create_hidden_decl (objc_v2_protocol_template, buf);\n+      DECL_WEAK (decl) = true;\n+    }\n+  else\n+    decl = start_var_decl (objc_v2_protocol_template, buf);\n   OBJCMETA (decl, objc_meta, meta_protocol);\n   return decl;\n }\n@@ -2295,7 +2307,13 @@ build_v2_protocol_list_address_table (void)\n       gcc_assert (ref->id && TREE_CODE (ref->id) == PROTOCOL_INTERFACE_TYPE);\n       snprintf (buf, BUFSIZE, \"_OBJC_LabelProtocol_%s\",\n \t\tIDENTIFIER_POINTER (PROTOCOL_NAME (ref->id)));\n-      decl = create_global_decl (objc_protocol_type, buf);\n+      if (flag_next_runtime >= USE_FIXUP_BEFORE)\n+\t{\n+\t  decl = create_hidden_decl (objc_protocol_type, buf, /*is def=*/true);\n+\t  DECL_WEAK (decl) = true;\n+\t}\n+      else\n+\tdecl = create_global_decl (objc_protocol_type, buf, /*is def=*/true);\n       expr = convert (objc_protocol_type, build_fold_addr_expr (ref->refdecl));\n       OBJCMETA (decl, objc_meta, meta_label_protocollist);\n       finish_var_decl (decl, expr);"}]}