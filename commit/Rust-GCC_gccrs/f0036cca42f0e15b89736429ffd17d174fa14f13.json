{"sha": "f0036cca42f0e15b89736429ffd17d174fa14f13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjAwMzZjY2E0MmYwZTE1Yjg5NzM2NDI5ZmZkMTdkMTc0ZmExNGYxMw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-09-29T14:51:52Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-09-29T14:51:52Z"}, "message": "options.texi (Variable, Var, Init): Update documentation without reference to VarExists.\n\n\t* doc/options.texi (Variable, Var, Init): Update documentation\n\twithout reference to VarExists.\n\t(VarExists): Remove.\n\t* common.opt, config/i386/i386.opt, config/linux.opt,\n\tconfig/rs6000/rs6000.opt, config/sh/sh.opt, config/spu/spu.opt:\n\tDon't use VarExists.\n\nc-family:\n\t* c.opt: Don't use VarExists.\n\nfortran:\n\t* lang.opt: Don't use VarExists.\n\njava:\n\t* lang.opt: Don't use VarExists.\n\nFrom-SVN: r164724", "tree": {"sha": "fee6c1797bd6ab1c8734c2276369a229a63e075c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fee6c1797bd6ab1c8734c2276369a229a63e075c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0036cca42f0e15b89736429ffd17d174fa14f13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0036cca42f0e15b89736429ffd17d174fa14f13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0036cca42f0e15b89736429ffd17d174fa14f13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0036cca42f0e15b89736429ffd17d174fa14f13/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3339d0f3328e3bae21e460dde81ba4bdcfcd959", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3339d0f3328e3bae21e460dde81ba4bdcfcd959"}], "stats": {"total": 155, "additions": 85, "deletions": 70}, "files": [{"sha": "50d67de1e775533dc2a156b46aff5df70f3e87c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0036cca42f0e15b89736429ffd17d174fa14f13", "patch": "@@ -1,3 +1,12 @@\n+2010-09-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* doc/options.texi (Variable, Var, Init): Update documentation\n+\twithout reference to VarExists.\n+\t(VarExists): Remove.\n+\t* common.opt, config/i386/i386.opt, config/linux.opt,\n+\tconfig/rs6000/rs6000.opt, config/sh/sh.opt, config/spu/spu.opt:\n+\tDon't use VarExists.\n+\n 2010-09-29  Joseph Myers  <joseph@codesourcery.com>\n \n \t* optc-gen.awk: Generate global_options initializer instead of"}, {"sha": "d51728bc6de480b6bb0e74ecbd0f4789d65e1a63", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f0036cca42f0e15b89736429ffd17d174fa14f13", "patch": "@@ -1,3 +1,7 @@\n+2010-09-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c.opt: Don't use VarExists.\n+\n 2010-09-29  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-common.c (c_cpp_error): Update names of diagnostic_context"}, {"sha": "a7ef3ea9956324c1de1a35887759ec8dad63c592", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=f0036cca42f0e15b89736429ffd17d174fa14f13", "patch": "@@ -966,11 +966,11 @@ C++ ObjC++ Optimization Var(flag_threadsafe_statics) Init(1)\n -fno-threadsafe-statics\tDo not generate thread-safe code for initializing local statics\n \n funsigned-bitfields\n-C ObjC C++ ObjC++ Var(flag_signed_bitfields, 0) VarExists\n+C ObjC C++ ObjC++ Var(flag_signed_bitfields, 0)\n When \\\"signed\\\" or \\\"unsigned\\\" is not given make the bitfield unsigned\n \n funsigned-char\n-C ObjC C++ ObjC++ LTO Var(flag_signed_char, 0) VarExists\n+C ObjC C++ ObjC++ LTO Var(flag_signed_char, 0)\n Make \\\"char\\\" unsigned by default\n \n fuse-cxa-atexit"}, {"sha": "37c43fd89558cc812870f0d59be15854189c5471", "filename": "gcc/common.opt", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=f0036cca42f0e15b89736429ffd17d174fa14f13", "patch": "@@ -1064,7 +1064,7 @@ Common Report Var(flag_merge_constants,2) Init(1) Optimization\n Attempt to merge identical constants and constant variables\n \n fmerge-constants\n-Common Report Var(flag_merge_constants,1) VarExists Optimization\n+Common Report Var(flag_merge_constants,1) Optimization\n Attempt to merge identical constants across compilation units\n \n fmerge-debug-strings\n@@ -1092,7 +1092,7 @@ Common RejectNegative Report Var(flag_mudflap)\n Add mudflap bounds-checking instrumentation for single-threaded program\n \n fmudflapth\n-Common RejectNegative Report VarExists Var(flag_mudflap,2)\n+Common RejectNegative Report Var(flag_mudflap,2)\n Add mudflap bounds-checking instrumentation for multi-threaded program\n \n fmudflapir\n@@ -1172,11 +1172,11 @@ Common Report Var(flag_pie,2)\n Generate position-independent code for executables if possible (large mode)\n \n fpic\n-Common Report Var(flag_pic,1) VarExists\n+Common Report Var(flag_pic,1)\n Generate position-independent code if possible (small mode)\n \n fpie\n-Common Report Var(flag_pie,1) VarExists\n+Common Report Var(flag_pie,1)\n Generate position-independent code for executables if possible (small mode)\n \n fplugin=\n@@ -1250,7 +1250,7 @@ Common Report Var(flag_record_gcc_switches)\n Record gcc command line switches in the object file.\n \n freg-struct-return\n-Common Report Var(flag_pcc_struct_return,0) VarExists Optimization\n+Common Report Var(flag_pcc_struct_return,0) Optimization\n Return small aggregates in registers\n \n fregmove\n@@ -1462,7 +1462,7 @@ Common Report Var(flag_stack_protect, 1)\n Use propolice as a stack protection method\n \n fstack-protector-all\n-Common Report RejectNegative Var(flag_stack_protect, 2) VarExists\n+Common Report RejectNegative Var(flag_stack_protect, 2)\n Use a stack protection method for every function\n \n fstack-usage\n@@ -1822,7 +1822,7 @@ Common RejectNegative Var(dwarf_strict,0) Init(-1)\n Emit DWARF additions beyond selected version\n \n gstrict-dwarf\n-Common Report RejectNegative Var(dwarf_strict,1) VarExists\n+Common Report RejectNegative Var(dwarf_strict,1)\n Don't emit DWARF additions beyond selected version\n \n gtoggle"}, {"sha": "68509447cf089baa0834ca7c4509375e17c43d57", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=f0036cca42f0e15b89736429ffd17d174fa14f13", "patch": "@@ -270,127 +270,127 @@ is selected.\n ;; ISA support\n \n m32\n-Target RejectNegative Negative(m64) Report InverseMask(ISA_64BIT) Var(ix86_isa_flags) VarExists Save\n+Target RejectNegative Negative(m64) Report InverseMask(ISA_64BIT) Var(ix86_isa_flags) Save\n Generate 32bit i386 code\n \n m64\n-Target RejectNegative Negative(m32) Report Mask(ISA_64BIT) Var(ix86_isa_flags) VarExists Save\n+Target RejectNegative Negative(m32) Report Mask(ISA_64BIT) Var(ix86_isa_flags) Save\n Generate 64bit x86-64 code\n \n mmmx\n-Target Report Mask(ISA_MMX) Var(ix86_isa_flags) VarExists Save\n+Target Report Mask(ISA_MMX) Var(ix86_isa_flags) Save\n Support MMX built-in functions\n \n m3dnow\n-Target Report Mask(ISA_3DNOW) Var(ix86_isa_flags) VarExists Save\n+Target Report Mask(ISA_3DNOW) Var(ix86_isa_flags) Save\n Support 3DNow! built-in functions\n \n m3dnowa\n-Target Undocumented Mask(ISA_3DNOW_A) Var(ix86_isa_flags) VarExists Save\n+Target Undocumented Mask(ISA_3DNOW_A) Var(ix86_isa_flags) Save\n Support Athlon 3Dnow! built-in functions\n \n msse\n-Target Report Mask(ISA_SSE) Var(ix86_isa_flags) VarExists Save\n+Target Report Mask(ISA_SSE) Var(ix86_isa_flags) Save\n Support MMX and SSE built-in functions and code generation\n \n msse2\n-Target Report Mask(ISA_SSE2) Var(ix86_isa_flags) VarExists Save\n+Target Report Mask(ISA_SSE2) Var(ix86_isa_flags) Save\n Support MMX, SSE and SSE2 built-in functions and code generation\n \n msse3\n-Target Report Mask(ISA_SSE3) Var(ix86_isa_flags) VarExists Save\n+Target Report Mask(ISA_SSE3) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2 and SSE3 built-in functions and code generation\n \n mssse3\n-Target Report Mask(ISA_SSSE3) Var(ix86_isa_flags) VarExists Save\n+Target Report Mask(ISA_SSSE3) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3 and SSSE3 built-in functions and code generation\n \n msse4.1\n-Target Report Mask(ISA_SSE4_1) Var(ix86_isa_flags) VarExists Save\n+Target Report Mask(ISA_SSE4_1) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3 and SSE4.1 built-in functions and code generation\n \n msse4.2\n-Target Report Mask(ISA_SSE4_2) Var(ix86_isa_flags) VarExists Save\n+Target Report Mask(ISA_SSE4_2) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1 and SSE4.2 built-in functions and code generation\n \n msse4\n-Target RejectNegative Report Mask(ISA_SSE4_2) MaskExists Var(ix86_isa_flags) VarExists Save\n+Target RejectNegative Report Mask(ISA_SSE4_2) MaskExists Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1 and SSE4.2 built-in functions and code generation\n \n mno-sse4\n-Target RejectNegative Report InverseMask(ISA_SSE4_1) MaskExists Var(ix86_isa_flags) VarExists Save\n+Target RejectNegative Report InverseMask(ISA_SSE4_1) MaskExists Var(ix86_isa_flags) Save\n Do not support SSE4.1 and SSE4.2 built-in functions and code generation\n \n mavx\n-Target Report Mask(ISA_AVX) Var(ix86_isa_flags) VarExists\n+Target Report Mask(ISA_AVX) Var(ix86_isa_flags)\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2 and AVX built-in functions and code generation\n \n mfma\n-Target Report Mask(ISA_FMA) Var(ix86_isa_flags) VarExists\n+Target Report Mask(ISA_FMA) Var(ix86_isa_flags)\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX and FMA built-in functions and code generation\n \n msse4a\n-Target Report Mask(ISA_SSE4A) Var(ix86_isa_flags) VarExists Save\n+Target Report Mask(ISA_SSE4A) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3 and SSE4A built-in functions and code generation\n \n mfma4\n-Target Report Mask(ISA_FMA4) Var(ix86_isa_flags) VarExists Save\n+Target Report Mask(ISA_FMA4) Var(ix86_isa_flags) Save\n Support FMA4 built-in functions and code generation \n \n mxop\n-Target Report Mask(ISA_XOP) Var(ix86_isa_flags) VarExists Save\n+Target Report Mask(ISA_XOP) Var(ix86_isa_flags) Save\n Support XOP built-in functions and code generation \n \n mlwp\n-Target Report Mask(ISA_LWP) Var(ix86_isa_flags) VarExists Save\n+Target Report Mask(ISA_LWP) Var(ix86_isa_flags) Save\n Support LWP built-in functions and code generation \n \n mabm\n-Target Report Mask(ISA_ABM) Var(ix86_isa_flags) VarExists Save\n+Target Report Mask(ISA_ABM) Var(ix86_isa_flags) Save\n Support code generation of Advanced Bit Manipulation (ABM) instructions.\n \n mpopcnt\n-Target Report Mask(ISA_POPCNT) Var(ix86_isa_flags) VarExists Save\n+Target Report Mask(ISA_POPCNT) Var(ix86_isa_flags) Save\n Support code generation of popcnt instruction.\n \n mcx16\n-Target Report Mask(ISA_CX16) Var(ix86_isa_flags) VarExists Save\n+Target Report Mask(ISA_CX16) Var(ix86_isa_flags) Save\n Support code generation of cmpxchg16b instruction.\n \n msahf\n-Target Report Mask(ISA_SAHF) Var(ix86_isa_flags) VarExists Save\n+Target Report Mask(ISA_SAHF) Var(ix86_isa_flags) Save\n Support code generation of sahf instruction in 64bit x86-64 code.\n \n mmovbe\n-Target Report Mask(ISA_MOVBE) Var(ix86_isa_flags) VarExists Save\n+Target Report Mask(ISA_MOVBE) Var(ix86_isa_flags) Save\n Support code generation of movbe instruction.\n \n mcrc32\n-Target Report Mask(ISA_CRC32) Var(ix86_isa_flags) VarExists Save\n+Target Report Mask(ISA_CRC32) Var(ix86_isa_flags) Save\n Support code generation of crc32 instruction.\n \n maes\n-Target Report Mask(ISA_AES) Var(ix86_isa_flags) VarExists Save\n+Target Report Mask(ISA_AES) Var(ix86_isa_flags) Save\n Support AES built-in functions and code generation\n \n mpclmul\n-Target Report Mask(ISA_PCLMUL) Var(ix86_isa_flags) VarExists Save\n+Target Report Mask(ISA_PCLMUL) Var(ix86_isa_flags) Save\n Support PCLMUL built-in functions and code generation\n \n msse2avx\n Target Report Var(ix86_sse2avx)\n Encode SSE instructions with VEX prefix\n \n mfsgsbase\n-Target Report Mask(ISA_FSGSBASE) Var(ix86_isa_flags) VarExists Save\n+Target Report Mask(ISA_FSGSBASE) Var(ix86_isa_flags) Save\n Support FSGSBASE built-in functions and code generation\n \n mrdrnd\n-Target Report Mask(ISA_RDRND) Var(ix86_isa_flags) VarExists Save\n+Target Report Mask(ISA_RDRND) Var(ix86_isa_flags) Save\n Support RDRND built-in functions and code generation\n \n mf16c\n-Target Report Mask(ISA_F16C) Var(ix86_isa_flags) VarExists Save\n+Target Report Mask(ISA_F16C) Var(ix86_isa_flags) Save\n Support F16C built-in functions and code generation\n \n mfentry"}, {"sha": "ba6b9f83e6d12c12db46b5d258b18895e3e831ee", "filename": "gcc/config/linux.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Fconfig%2Flinux.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Fconfig%2Flinux.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.opt?ref=f0036cca42f0e15b89736429ffd17d174fa14f13", "patch": "@@ -24,9 +24,9 @@ Target Report RejectNegative Var(linux_libc,LIBC_BIONIC) Init(DEFAULT_LIBC) Nega\n Use Bionic C library\n \n mglibc\n-Target Report RejectNegative Var(linux_libc,LIBC_GLIBC) VarExists Negative(muclibc)\n+Target Report RejectNegative Var(linux_libc,LIBC_GLIBC) Negative(muclibc)\n Use GNU C library\n \n muclibc\n-Target Report RejectNegative Var(linux_libc,LIBC_UCLIBC) VarExists Negative(mbionic)\n+Target Report RejectNegative Var(linux_libc,LIBC_UCLIBC) Negative(mbionic)\n Use uClibc C library"}, {"sha": "bdfbf782c4518b588c816b47b52a52c60a2314d7", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=f0036cca42f0e15b89736429ffd17d174fa14f13", "patch": "@@ -188,15 +188,15 @@ msched-epilog\n Target Undocumented Var(TARGET_SCHED_PROLOG) Init(1)\n \n msched-prolog\n-Target Report Var(TARGET_SCHED_PROLOG) VarExists\n+Target Report Var(TARGET_SCHED_PROLOG)\n Schedule the start and end of the procedure\n \n maix-struct-return\n Target Report RejectNegative Var(aix_struct_return)\n Return all structures in memory (AIX default)\n \n msvr4-struct-return\n-Target Report RejectNegative Var(aix_struct_return,0) VarExists\n+Target Report RejectNegative Var(aix_struct_return,0)\n Return small structures in registers (SVR4 default)\n \n mxl-compat\n@@ -228,7 +228,7 @@ Target RejectNegative Var(TARGET_NO_SUM_IN_TOC)\n Do not place symbol+offset constants in TOC\n \n msum-in-toc\n-Target RejectNegative Var(TARGET_NO_SUM_IN_TOC,0) VarExists\n+Target RejectNegative Var(TARGET_NO_SUM_IN_TOC,0)\n Place symbol+offset constants in TOC\n \n ;  Output only one TOC entry per module.  Normally linking fails if"}, {"sha": "f10408fb02b272cac1a86760a0029d475b95d584", "filename": "gcc/config/sh/sh.opt", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Fconfig%2Fsh%2Fsh.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Fconfig%2Fsh%2Fsh.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.opt?ref=f0036cca42f0e15b89736429ffd17d174fa14f13", "patch": "@@ -1,6 +1,7 @@\n ; Options for the SH port of the compiler.\n \n-; Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+; Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+; Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -106,11 +107,11 @@ Target RejectNegative Condition(SUPPORT_SH4_NOFPU)\n Generate SH4-200 FPU-less code\n \n m4-300-nofpu\n-Target RejectNegative Condition(SUPPORT_SH4_NOFPU) Var(TARGET_SH4_300) VarExists\n+Target RejectNegative Condition(SUPPORT_SH4_NOFPU) Var(TARGET_SH4_300)\n Generate SH4-300 FPU-less code\n \n m4-340\n-Target RejectNegative Condition(SUPPORT_SH4_NOFPU) Var(TARGET_SH4_300) VarExists\n+Target RejectNegative Condition(SUPPORT_SH4_NOFPU) Var(TARGET_SH4_300)\n Generate code for SH4 340 series (MMU/FPU-less)\n ;; passes -isa=sh4-nommu-nofpu to the assembler.\n \n@@ -137,7 +138,7 @@ Target RejectNegative Condition(SUPPORT_SH4_SINGLE)\n Generate default single-precision SH4-200 code\n \n m4-300-single\n-Target RejectNegative Condition(SUPPORT_SH4_SINGLE) Var(TARGET_SH4_300) VarExists\n+Target RejectNegative Condition(SUPPORT_SH4_SINGLE) Var(TARGET_SH4_300)\n Generate default single-precision SH4-300 code\n \n m4-single-only\n@@ -153,7 +154,7 @@ Target RejectNegative Condition(SUPPORT_SH4_SINGLE_ONLY)\n Generate only single-precision SH4-200 code\n \n m4-300-single-only\n-Target RejectNegative Condition(SUPPORT_SH4_SINGLE_ONLY) Var(TARGET_SH4_300) VarExists\n+Target RejectNegative Condition(SUPPORT_SH4_SINGLE_ONLY) Var(TARGET_SH4_300)\n Generate only single-precision SH4-300 code\n \n m4a"}, {"sha": "75cf8c3fd39a007c15ebf33e116f7cb824e2c062", "filename": "gcc/config/spu/spu.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Fconfig%2Fspu%2Fspu.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Fconfig%2Fspu%2Fspu.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.opt?ref=f0036cca42f0e15b89736429ffd17d174fa14f13", "patch": "@@ -1,5 +1,5 @@\n ; Options for the SPU port of the compiler\n-; Copyright (C) 2006, 2007, 2008 Free Software Foundation, Inc.\n+; Copyright (C) 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n \n ; This file is free software; you can redistribute it and/or modify it under\n ; the terms of the GNU General Public License as published by the Free\n@@ -88,7 +88,7 @@ Target Report RejectNegative Var(spu_ea_model,32) Init(32)\n Access variables in 32-bit PPU objects (default)\n \n mea64\n-Target Report RejectNegative Var(spu_ea_model,64) VarExists\n+Target Report RejectNegative Var(spu_ea_model,64)\n Access variables in 64-bit PPU objects\n \n maddress-space-conversion"}, {"sha": "d774b36d563eefc362920214ba5cd339e92dc7ec", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=f0036cca42f0e15b89736429ffd17d174fa14f13", "patch": "@@ -46,10 +46,10 @@ information.  These records have two fields: the string\n @samp{Variable}, and a declaration of the type and name of the\n variable, optionally with an initializer (but without any trailing\n @samp{;}).  These records may be used for variables used for many\n-options where declaring the variable and its initializer by omitting\n-@code{VarExists} from a single option definition record would be\n-inappropriate, or for variables set in option handlers rather than\n-referenced by @code{Var} properties.\n+options where declaring the initializer in a single option definition\n+record, or duplicating it in many records, would be inappropriate, or\n+for variables set in option handlers rather than referenced by\n+@code{Var} properties.\n \n @item\n An option definition record.  These records have the following fields:\n@@ -177,7 +177,8 @@ compatibility with existing options that are used both directly and\n via @option{-Wp,}; new options should not have this property.\n \n @item Var(@var{var})\n-The state of this option should be stored in variable @var{var}.\n+The state of this option should be stored in variable @var{var}\n+(actually a macro for @code{global_options.x_@var{var}}).\n The way that the state is stored depends on the type of option:\n \n @itemize @bullet\n@@ -201,9 +202,8 @@ the argument string.  The pointer will be null if the argument is optional\n and wasn't given.\n @end itemize\n \n-The option-processing script will usually declare @var{var} in\n-@file{options.c} and leave it to be zero-initialized at start-up time.\n-You can modify this behavior using @code{VarExists} and @code{Init}.\n+The option-processing script will usually zero-initialize @var{var}.\n+You can modify this behavior using @code{Init}.\n \n @item Var(@var{var}, @var{set})\n The option controls an integer variable @var{var} and is active when\n@@ -214,17 +214,10 @@ when the ``no-'' form is used.\n @var{var} is declared in the same way as for the single-argument form\n described above.\n \n-@item VarExists\n-The variable specified by the @code{Var} property already exists.\n-No definition should be added to @file{options.c} in response to\n-this option record.\n-\n-You should use this property only if the variable is declared outside\n-@file{options.c}.\n-\n @item Init(@var{value})\n The variable specified by the @code{Var} property should be statically\n-initialized to @var{value}.\n+initialized to @var{value}.  If more than one option using the same\n+variable specifies @code{Init}, all must specify the same initializer.\n \n @item Mask(@var{name})\n The option is associated with a bit in the @code{target_flags}"}, {"sha": "cb7e4e9ae7da97ef06e9ee977e3c9a28eeabcda7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f0036cca42f0e15b89736429ffd17d174fa14f13", "patch": "@@ -1,3 +1,7 @@\n+2010-09-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* lang.opt: Don't use VarExists.\n+\n 2010-09-29  Joseph Myers  <joseph@codesourcery.com>\n \n \t* cpp.c (cpp_define_builtins): Update names of gfc_option_t"}, {"sha": "f60eaabea8b2c38aac0ef102a63cdb2c039abc93", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=f0036cca42f0e15b89736429ffd17d174fa14f13", "patch": "@@ -499,7 +499,7 @@ Fortran\n Append a second underscore if the name already contains an underscore\n \n fshort-enums\n-Fortran Var(flag_short_enums) VarExists\n+Fortran Var(flag_short_enums)\n ; Documented in C\n \n fsign-zero"}, {"sha": "4dab15077d74b86e6b1048cfd3ac3e4b30aeb1c9", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=f0036cca42f0e15b89736429ffd17d174fa14f13", "patch": "@@ -1,3 +1,7 @@\n+2010-09-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* lang.opt: Don't use VarExists.\n+\n 2010-09-29  Joseph Myers  <joseph@codesourcery.com>\n \n \t* java-tree.h (flag_filelist_file, flag_assert, flag_jni,"}, {"sha": "4e888b754517f7a0d2fdafcb48072eecdec336b8", "filename": "gcc/java/lang.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Fjava%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0036cca42f0e15b89736429ffd17d174fa14f13/gcc%2Fjava%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.opt?ref=f0036cca42f0e15b89736429ffd17d174fa14f13", "patch": "@@ -114,7 +114,7 @@ Java\n ; Documented for C\n \n Wdeprecated\n-Java Var(warn_deprecated) VarExists\n+Java Var(warn_deprecated)\n ; Documented for C\n \n Wextraneous-semicolon"}]}