{"sha": "c1203a704d375608c84ec0f1f4af250025374e85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEyMDNhNzA0ZDM3NTYwOGM4NGVjMGYxZjRhZjI1MDAyNTM3NGU4NQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-03-24T19:11:24Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-03-24T19:11:24Z"}, "message": "re PR fortran/34813 (ICE on incorrect nested type constructor (fold-const.c (fold_convert):2629))\n\n2008-03-24  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/34813\n\t* resolve.c (resolve_structure_cons): It is an error to assign\n\tNULL to anything other than a pointer or allocatable component.\n\n\tPR fortran/33295\n\t* resolve.c (resolve_symbol): If the symbol is a derived type,\n\tresolve the derived type.  If the symbol is a derived type\n\tfunction, ensure that the derived type is visible in the same\n\tnamespace as the function.\n\n2008-03-24  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/34813\n\t* gfortran.dg/null_3.f90 : New test\n\n\tPR fortran/33295\n\t* gfortran.dg/module_function_type_1.f90 : New test\n\nFrom-SVN: r133488", "tree": {"sha": "c592d85b7b3c57a66640b4f761c2ec48e47be498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c592d85b7b3c57a66640b4f761c2ec48e47be498"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1203a704d375608c84ec0f1f4af250025374e85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1203a704d375608c84ec0f1f4af250025374e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1203a704d375608c84ec0f1f4af250025374e85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1203a704d375608c84ec0f1f4af250025374e85/comments", "author": null, "committer": null, "parents": [{"sha": "50c91950d46fd5715ffd198227c50c7bce35f915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50c91950d46fd5715ffd198227c50c7bce35f915", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50c91950d46fd5715ffd198227c50c7bce35f915"}], "stats": {"total": 104, "additions": 104, "deletions": 0}, "files": [{"sha": "54a8fcbadb77a0ace3ee6bc46ba4f11ce2d51d1d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1203a704d375608c84ec0f1f4af250025374e85/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1203a704d375608c84ec0f1f4af250025374e85/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c1203a704d375608c84ec0f1f4af250025374e85", "patch": "@@ -1,3 +1,15 @@\n+2008-03-24  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/34813\n+\t* resolve.c (resolve_structure_cons): It is an error to assign\n+\tNULL to anything other than a pointer or allocatable component.\n+\n+\tPR fortran/33295\n+\t* resolve.c (resolve_symbol): If the symbol is a derived type,\n+\tresolve the derived type.  If the symbol is a derived type\n+\tfunction, ensure that the derived type is visible in the same\n+\tnamespace as the function.\n+\n 2008-03-23  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n \n \t* trans.h: Use fold_build in build1_v, build2_v and build3_v"}, {"sha": "0d39b2df8496aa2505307634be28f8935349b795", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1203a704d375608c84ec0f1f4af250025374e85/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1203a704d375608c84ec0f1f4af250025374e85/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=c1203a704d375608c84ec0f1f4af250025374e85", "patch": "@@ -834,6 +834,16 @@ resolve_structure_cons (gfc_expr *expr)\n \t    t = gfc_convert_type (cons->expr, &comp->ts, 1);\n \t}\n \n+      if (cons->expr->expr_type == EXPR_NULL\n+\t    && !(comp->pointer || comp->allocatable))\n+\t{\n+\t  t = FAILURE;\n+\t  gfc_error (\"The NULL in the derived type constructor at %L is \"\n+\t\t     \"being applied to component '%s', which is neither \"\n+\t\t     \"a POINTER nor ALLOCATABLE\", &cons->expr->where,\n+\t\t     comp->name);\n+\t}\n+\n       if (!comp->pointer || cons->expr->expr_type == EXPR_NULL)\n \tcontinue;\n \n@@ -7973,6 +7983,29 @@ resolve_symbol (gfc_symbol *sym)\n       return;\n     }\n \n+  /* Make sure that the derived type has been resolved and that the\n+     derived type is visible in the symbol's namespace, if it is a\n+     module function and is not PRIVATE.  */\n+  if (sym->ts.type == BT_DERIVED\n+\t&& sym->ts.derived->attr.use_assoc\n+\t&& sym->ns->proc_name->attr.flavor == FL_MODULE)\n+    {\n+      gfc_symbol *ds;\n+\n+      if (resolve_fl_derived (sym->ts.derived) == FAILURE)\n+\treturn;\n+\n+      gfc_find_symbol (sym->ts.derived->name, sym->ns, 1, &ds);\n+      if (!ds && sym->attr.function\n+\t    && gfc_check_access (sym->attr.access, sym->ns->default_access))\n+\t{\n+\t  symtree = gfc_new_symtree (&sym->ns->sym_root,\n+\t\t\t\t     sym->ts.derived->name);\n+\t  symtree->n.sym = sym->ts.derived;\n+\t  sym->ts.derived->refs++;\n+\t}\n+    }\n+\n   /* Unless the derived-type declaration is use associated, Fortran 95\n      does not allow public entries of private derived types.\n      See 4.4.1 (F95) and 4.5.1.1 (F2003); and related interpretation"}, {"sha": "4ce37ec18d0626a69b5ae2d433193e1fc5b8dda5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1203a704d375608c84ec0f1f4af250025374e85/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1203a704d375608c84ec0f1f4af250025374e85/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c1203a704d375608c84ec0f1f4af250025374e85", "patch": "@@ -1,3 +1,11 @@\n+2008-03-24  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/34813\n+\t* gfortran.dg/null_3.f90 : New test\n+\n+\tPR fortran/33295\n+\t* gfortran.dg/module_function_type_1.f90 : New test\n+\n 2007-03-23  Thomas Koenig  <tkoenig@gcc.gnu.org\n \n \tPR libfortran/32972"}, {"sha": "b0a40488c90bb93348f545a11ce105d497c8bf70", "filename": "gcc/testsuite/gfortran.dg/module_function_type_1.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1203a704d375608c84ec0f1f4af250025374e85/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_function_type_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1203a704d375608c84ec0f1f4af250025374e85/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_function_type_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_function_type_1.f90?ref=c1203a704d375608c84ec0f1f4af250025374e85", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do compile }\n+! This checks the fix for PR33295 in which the A_type in initA was\n+! not promoted to module level and so not recognised as being the\n+! same as that emanating directly from module a. \n+!\n+! Contributed by Janus Weil <jaydub66@gmail.com>\n+!\n+module A\n+  type A_type\n+    real comp\n+  end type\n+end module A\n+\n+module B\n+contains\n+  function initA()\n+    use A\n+    implicit none\n+    type(A_type):: initA\n+    initA%comp=1.0\n+  end function\n+end module B\n+\n+program C\n+  use B\n+  use A\n+  implicit none\n+  type(A_type):: A_var\n+  A_var = initA()\n+end program C\n+\n+! { dg-final { cleanup-modules \"A B\" } }\n+"}, {"sha": "141af1f5bcbbc7757fad3dd45ce86d2690336a3c", "filename": "gcc/testsuite/gfortran.dg/null_3.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1203a704d375608c84ec0f1f4af250025374e85/gcc%2Ftestsuite%2Fgfortran.dg%2Fnull_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1203a704d375608c84ec0f1f4af250025374e85/gcc%2Ftestsuite%2Fgfortran.dg%2Fnull_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnull_3.f90?ref=c1203a704d375608c84ec0f1f4af250025374e85", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+! This checks the fix for PR34813 in which the error at line 17\n+! was not detected.\n+!\n+! Contributed by Daniel Franke <dfranke@gcc.gnu.org>\n+!\n+SUBROUTINE kd_tree_init_default()\n+  TYPE :: kd_tree_node\n+    INTEGER :: dummy\n+  END TYPE\n+\n+  TYPE :: kd_tree\n+    TYPE(kd_tree_node) :: root\n+  END TYPE\n+\n+  TYPE(kd_tree)  :: tree\n+  tree = kd_tree(null()) ! { dg-error \"neither a POINTER nor ALLOCATABLE\" }\n+END SUBROUTINE"}]}