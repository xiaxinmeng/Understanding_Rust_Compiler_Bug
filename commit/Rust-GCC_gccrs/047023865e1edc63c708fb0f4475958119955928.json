{"sha": "047023865e1edc63c708fb0f4475958119955928", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ3MDIzODY1ZTFlZGM2M2M3MDhmYjBmNDQ3NTk1ODExOTk1NTkyOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-03-05T17:53:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-03-05T17:53:21Z"}, "message": "parser.c (cp_parser_mem_initializer): Set input_location properly for init-list warning.\n\n\t* parser.c (cp_parser_mem_initializer): Set input_location\n\tproperly for init-list warning.\n\t(cp_parser_postfix_open_square_expression): Likewise.\n\t(cp_parser_parenthesized_expression_list): Likewise.\n\t(cp_parser_new_initializer): Likewise.\n\t(cp_parser_jump_statement): Likewise.\n\t(cp_parser_initializer): Likewise.\n\t(cp_parser_functional_cast): Likewise.\n\nFrom-SVN: r208350", "tree": {"sha": "2c340d4c26e754e8bfcf2544411486bab87f7651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c340d4c26e754e8bfcf2544411486bab87f7651"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/047023865e1edc63c708fb0f4475958119955928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/047023865e1edc63c708fb0f4475958119955928", "html_url": "https://github.com/Rust-GCC/gccrs/commit/047023865e1edc63c708fb0f4475958119955928", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/047023865e1edc63c708fb0f4475958119955928/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "487125e75bf98e4e866cef265693cbb59b6cdf64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/487125e75bf98e4e866cef265693cbb59b6cdf64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/487125e75bf98e4e866cef265693cbb59b6cdf64"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "379ac736ed17209cd938390cb1eeeeda83af9def", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047023865e1edc63c708fb0f4475958119955928/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047023865e1edc63c708fb0f4475958119955928/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=047023865e1edc63c708fb0f4475958119955928", "patch": "@@ -1,3 +1,14 @@\n+2014-03-05  Jason Merrill  <jason@redhat.com>\n+\n+\t* parser.c (cp_parser_mem_initializer): Set input_location\n+\tproperly for init-list warning.\n+\t(cp_parser_postfix_open_square_expression): Likewise.\n+\t(cp_parser_parenthesized_expression_list): Likewise.\n+\t(cp_parser_new_initializer): Likewise.\n+\t(cp_parser_jump_statement): Likewise.\n+\t(cp_parser_initializer): Likewise.\n+\t(cp_parser_functional_cast): Likewise.\n+\n 2014-03-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/60417"}, {"sha": "5b3e48951acfd75a448399363f212b7f407560e4", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047023865e1edc63c708fb0f4475958119955928/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047023865e1edc63c708fb0f4475958119955928/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=047023865e1edc63c708fb0f4475958119955928", "patch": "@@ -6359,6 +6359,8 @@ cp_parser_postfix_open_square_expression (cp_parser *parser,\n       if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n \t{\n \t  bool expr_nonconst_p;\n+\t  cp_token *token = cp_lexer_peek_token (parser->lexer);\n+\t  cp_lexer_set_source_position_from_token (token);\n \t  maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n \t  index = cp_parser_braced_list (parser, &expr_nonconst_p);\n \t  if (flag_cilkplus\n@@ -6671,6 +6673,8 @@ cp_parser_parenthesized_expression_list (cp_parser* parser,\n \t    if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n \t      {\n \t\t/* A braced-init-list.  */\n+\t\tcp_token *token = cp_lexer_peek_token (parser->lexer);\n+\t\tcp_lexer_set_source_position_from_token (token);\n \t\tmaybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n \t\texpr = cp_parser_braced_list (parser, &expr_non_constant_p);\n \t\tif (non_constant_p && expr_non_constant_p)\n@@ -7519,6 +7523,8 @@ cp_parser_new_initializer (cp_parser* parser)\n     {\n       tree t;\n       bool expr_non_constant_p;\n+      cp_token *token = cp_lexer_peek_token (parser->lexer);\n+      cp_lexer_set_source_position_from_token (token);\n       maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n       t = cp_parser_braced_list (parser, &expr_non_constant_p);\n       CONSTRUCTOR_IS_DIRECT_INIT (t) = 1;\n@@ -10675,6 +10681,8 @@ cp_parser_jump_statement (cp_parser* parser)\n \n \tif (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n \t  {\n+\t    cp_token *token = cp_lexer_peek_token (parser->lexer);\n+\t    cp_lexer_set_source_position_from_token (token);\n \t    maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n \t    expr = cp_parser_braced_list (parser, &expr_non_constant_p);\n \t  }\n@@ -12353,6 +12361,8 @@ cp_parser_mem_initializer (cp_parser* parser)\n   if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n     {\n       bool expr_non_constant_p;\n+      cp_token *token = cp_lexer_peek_token (parser->lexer);\n+      cp_lexer_set_source_position_from_token (token);\n       maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n       expression_list = cp_parser_braced_list (parser, &expr_non_constant_p);\n       CONSTRUCTOR_IS_DIRECT_INIT (expression_list) = 1;\n@@ -18801,6 +18811,8 @@ cp_parser_initializer (cp_parser* parser, bool* is_direct_init,\n     }\n   else if (token->type == CPP_OPEN_BRACE)\n     {\n+      cp_token *token = cp_lexer_peek_token (parser->lexer);\n+      cp_lexer_set_source_position_from_token (token);\n       maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n       init = cp_parser_braced_list (parser, non_constant_p);\n       CONSTRUCTOR_IS_DIRECT_INIT (init) = 1;\n@@ -23236,6 +23248,8 @@ cp_parser_functional_cast (cp_parser* parser, tree type)\n \n   if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n     {\n+      cp_token *token = cp_lexer_peek_token (parser->lexer);\n+      cp_lexer_set_source_position_from_token (token);\n       maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n       expression_list = cp_parser_braced_list (parser, &nonconst_p);\n       CONSTRUCTOR_IS_DIRECT_INIT (expression_list) = 1;"}, {"sha": "4cfc40822a864857af38cec1793f3a1aa577fbab", "filename": "gcc/testsuite/g++.dg/template/crash90.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047023865e1edc63c708fb0f4475958119955928/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash90.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047023865e1edc63c708fb0f4475958119955928/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash90.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash90.C?ref=047023865e1edc63c708fb0f4475958119955928", "patch": "@@ -4,5 +4,4 @@ template < unsigned >\n struct A ;\n template < typename >\n struct B ;\n-template < typename T , A < B < T > // { dg-error \"initializer|parse error|valid type|expected\" }\n-{ }\n+template < typename T , A < B < T > {}// { dg-error \"initializer|parse error|type|expected\" }"}]}