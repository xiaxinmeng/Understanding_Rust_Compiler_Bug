{"sha": "557430f1699f0ad881815957f35fdc9b11a09608", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU3NDMwZjE2OTlmMGFkODgxODE1OTU3ZjM1ZmRjOWIxMWEwOTYwOA==", "commit": {"author": {"name": "Chung-Ju Wu", "email": "jasonwucj@gmail.com", "date": "2014-09-03T10:09:14Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2014-09-03T10:09:14Z"}, "message": "[NDS32] Emit stack push instructions for varargs at prologue stage and emit...\n\n[NDS32]  Emit stack push instructions for varargs at prologue stage and\n         emit stack adjustment instructions for varargs at epilogue stage.\n\n  -- Note that we do not need to handle it in v3push/v3pop prologue/epilogue\n     expanding because we do not apply v3push/v3pop for variadic function.\n\n\t* config/nds32/nds32.c (nds32_expand_prologue): Emit stack push\n\tinstructions for varargs implementation.\n\t(nds32_expand_epilogue): Emit stack adjustment instructions for\n\tvarargs implementation.\n\nFrom-SVN: r214867", "tree": {"sha": "3b4e9ae67fd1e063070cf66b91e128dfb9764157", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b4e9ae67fd1e063070cf66b91e128dfb9764157"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/557430f1699f0ad881815957f35fdc9b11a09608", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/557430f1699f0ad881815957f35fdc9b11a09608", "html_url": "https://github.com/Rust-GCC/gccrs/commit/557430f1699f0ad881815957f35fdc9b11a09608", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/557430f1699f0ad881815957f35fdc9b11a09608/comments", "author": {"login": "jasonwucj", "id": 5520732, "node_id": "MDQ6VXNlcjU1MjA3MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5520732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonwucj", "html_url": "https://github.com/jasonwucj", "followers_url": "https://api.github.com/users/jasonwucj/followers", "following_url": "https://api.github.com/users/jasonwucj/following{/other_user}", "gists_url": "https://api.github.com/users/jasonwucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonwucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonwucj/subscriptions", "organizations_url": "https://api.github.com/users/jasonwucj/orgs", "repos_url": "https://api.github.com/users/jasonwucj/repos", "events_url": "https://api.github.com/users/jasonwucj/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonwucj/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "99575d60c881fccdc0e5c1f433d63d9d9d2ca86d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99575d60c881fccdc0e5c1f433d63d9d9d2ca86d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99575d60c881fccdc0e5c1f433d63d9d9d2ca86d"}], "stats": {"total": 88, "additions": 87, "deletions": 1}, "files": [{"sha": "26e89f6762b39b98162e1901adfc2a0dcc6fcdea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557430f1699f0ad881815957f35fdc9b11a09608/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557430f1699f0ad881815957f35fdc9b11a09608/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=557430f1699f0ad881815957f35fdc9b11a09608", "patch": "@@ -1,3 +1,10 @@\n+2014-09-03  Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config/nds32/nds32.c (nds32_expand_prologue): Emit stack push\n+\tinstructions for varargs implementation.\n+\t(nds32_expand_epilogue): Emit stack adjustment instructions for\n+\tvarargs implementation.\n+\n 2014-09-03  Chung-Ju Wu  <jasonwucj@gmail.com>\n \n \t* config/nds32/nds32.c (nds32_expand_prologue): Suppress fp-as-gp"}, {"sha": "d2890dc3d275bd974da18f9ed99f17a8ebea3fd1", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 80, "deletions": 1, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/557430f1699f0ad881815957f35fdc9b11a09608/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/557430f1699f0ad881815957f35fdc9b11a09608/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=557430f1699f0ad881815957f35fdc9b11a09608", "patch": "@@ -2788,6 +2788,35 @@ nds32_expand_prologue (void)\n      The result will be in cfun->machine.  */\n   nds32_compute_stack_frame ();\n \n+  /* If this is a variadic function, first we need to push argument\n+     registers that hold the unnamed argument value.  */\n+  if (cfun->machine->va_args_size != 0)\n+    {\n+      Rb = gen_rtx_REG (SImode, cfun->machine->va_args_first_regno);\n+      Re = gen_rtx_REG (SImode, cfun->machine->va_args_last_regno);\n+      /* No need to push $fp, $gp, or $lp, so use GEN_INT(0).  */\n+      nds32_emit_stack_push_multiple (Rb, Re, GEN_INT (0));\n+\n+      /* We may also need to adjust stack pointer for padding bytes\n+         because varargs may cause $sp not 8-byte aligned.  */\n+      if (cfun->machine->va_args_area_padding_bytes)\n+\t{\n+\t  /* Generate sp adjustment instruction.  */\n+\t  sp_adjust = cfun->machine->va_args_area_padding_bytes;\n+\t  sp_adjust_insn = gen_addsi3 (stack_pointer_rtx,\n+\t\t\t\t       stack_pointer_rtx,\n+\t\t\t\t       GEN_INT (-1 * sp_adjust));\n+\n+\t  /* Emit rtx into instructions list and receive INSN rtx form.  */\n+\t  sp_adjust_insn = emit_insn (sp_adjust_insn);\n+\n+\t  /* The insn rtx 'sp_adjust_insn' will change frame layout.\n+\t     We need to use RTX_FRAME_RELATED_P so that GCC is able to\n+\t     generate CFI (Call Frame Information) stuff.  */\n+\t  RTX_FRAME_RELATED_P (sp_adjust_insn) = 1;\n+\t}\n+    }\n+\n   /* If the function is 'naked',\n      we do not have to generate prologue code fragment.  */\n   if (cfun->machine->naked_p)\n@@ -2887,9 +2916,32 @@ nds32_expand_epilogue (void)\n   emit_insn (gen_blockage ());\n \n   /* If the function is 'naked', we do not have to generate\n-     epilogue code fragment BUT 'ret' instruction.  */\n+     epilogue code fragment BUT 'ret' instruction.\n+     However, if this function is also a variadic function,\n+     we need to create adjust stack pointer before 'ret' instruction.  */\n   if (cfun->machine->naked_p)\n     {\n+      /* If this is a variadic function, we do not have to restore argument\n+         registers but need to adjust stack pointer back to previous stack\n+         frame location before return.  */\n+      if (cfun->machine->va_args_size != 0)\n+\t{\n+\t  /* Generate sp adjustment instruction.\n+\t     We  need to consider padding bytes here.  */\n+\t  sp_adjust = cfun->machine->va_args_size\n+\t\t      + cfun->machine->va_args_area_padding_bytes;\n+\t  sp_adjust_insn = gen_addsi3 (stack_pointer_rtx,\n+\t\t\t\t       stack_pointer_rtx,\n+\t\t\t\t       GEN_INT (sp_adjust));\n+\t  /* Emit rtx into instructions list and receive INSN rtx form.  */\n+\t  sp_adjust_insn = emit_insn (sp_adjust_insn);\n+\n+\t  /* The insn rtx 'sp_adjust_insn' will change frame layout.\n+\t     We need to use RTX_FRAME_RELATED_P so that GCC is able to\n+\t     generate CFI (Call Frame Information) stuff.  */\n+\t  RTX_FRAME_RELATED_P (sp_adjust_insn) = 1;\n+\t}\n+\n       /* Generate return instruction by using\n          unspec_volatile_func_return pattern.\n          Make sure this instruction is after gen_blockage().\n@@ -2916,6 +2968,9 @@ nds32_expand_epilogue (void)\n \t\t\t\t   GEN_INT (-1 * sp_adjust));\n       /* Emit rtx into instructions list and receive INSN rtx form.  */\n       sp_adjust_insn = emit_insn (sp_adjust_insn);\n+\n+      /* The insn rtx 'sp_adjust_insn' will change frame layout.  */\n+      RTX_FRAME_RELATED_P (sp_adjust_insn) = 1;\n     }\n   else\n     {\n@@ -2944,6 +2999,9 @@ nds32_expand_epilogue (void)\n \t\t\t\t       GEN_INT (sp_adjust));\n \t  /* Emit rtx into instructions list and receive INSN rtx form.  */\n \t  sp_adjust_insn = emit_insn (sp_adjust_insn);\n+\n+\t  /* The insn rtx 'sp_adjust_insn' will change frame layout.  */\n+\t  RTX_FRAME_RELATED_P (sp_adjust_insn) = 1;\n \t}\n     }\n \n@@ -2972,6 +3030,27 @@ nds32_expand_epilogue (void)\n       nds32_emit_stack_pop_multiple (Rb, Re, GEN_INT (en4_const));\n     }\n \n+  /* If this is a variadic function, we do not have to restore argument\n+     registers but need to adjust stack pointer back to previous stack\n+     frame location before return.  */\n+  if (cfun->machine->va_args_size != 0)\n+    {\n+      /* Generate sp adjustment instruction.\n+         We  need to consider padding bytes here.  */\n+      sp_adjust = cfun->machine->va_args_size\n+\t\t  + cfun->machine->va_args_area_padding_bytes;\n+      sp_adjust_insn = gen_addsi3 (stack_pointer_rtx,\n+\t\t\t\t   stack_pointer_rtx,\n+\t\t\t\t   GEN_INT (sp_adjust));\n+      /* Emit rtx into instructions list and receive INSN rtx form.  */\n+      sp_adjust_insn = emit_insn (sp_adjust_insn);\n+\n+      /* The insn rtx 'sp_adjust_insn' will change frame layout.\n+         We need to use RTX_FRAME_RELATED_P so that GCC is able to\n+         generate CFI (Call Frame Information) stuff.  */\n+      RTX_FRAME_RELATED_P (sp_adjust_insn) = 1;\n+    }\n+\n   /* Generate return instruction by using\n      unspec_volatile_func_return pattern.  */\n   emit_insn (gen_unspec_volatile_func_return ());"}]}