{"sha": "efc150d58bb9eaa7998a13cae6a9d65ac0d7c4d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZjMTUwZDU4YmI5ZWFhNzk5OGExM2NhZTZhOWQ2NWFjMGQ3YzRkMA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-04-22T17:01:18Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-04-22T17:01:18Z"}, "message": "Makefile.in: Rebuilt.\n\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (awt_java_source_files): Added Line2D.java.\n\t* java/awt/geom/Line2D.java: Wrote.\n\n\t* java/awt/Menu.java (addNotify): Wrote.\n\n\t* java/awt/PopupMenu.java (addNotify): Implemented.\n\t(show): Likewise.\n\n\t* java/awt/Scrollbar.java (addNotify): Call super.addNotify.\n\t* java/awt/List.java (addNotify): Call super.addNotify.\n\t* java/awt/Label.java (addNotify): Call super.addNotify.\n\t* java/awt/FileDialog.java (addNotify): Call super.addNotify.\n\t* java/awt/Dialog.java (addNotify): Call super.addNotify.\n\t* java/awt/Choice.java (addNotify): Call super.addNotify.\n\t* java/awt/CheckboxMenuItem.java (addNotify): Call super.addNotify.\n\t* java/awt/Checkbox.java (addNotify): Call super.addNotify.\n\n\t* java/awt/List.java (replaceItem): Notify peer.\n\n\t* java/awt/geom/Rectangle2D.java\n\t(Float.setRect(float,float,float,float)): New method.\n\n\t* java/awt/event/ContainerEvent.java (getContainer): Now returns\n\tContainer.\n\n\t* java/awt/RenderingHints.java (Key): Class now public.\n\n\t* java/awt/Rectangle.java (Rectangle): Now implements\n\tSerializable.\n\t(getPathIterator): Removed.\n\n\t* java/awt/GraphicsConfiguration.java (GraphicsConfiguration): New\n\tconstructor.\n\n\t* java/awt/FileDialog.java: Wrote.\n\n\t* java/awt/EventQueue.java (isDispatchThread): Now public.\n\t(invokeLater): Likewise.\n\n\t* java/awt/Component.java (setCursor): Update peer.\n\t(getFontMetrics): Use peer.\n\n\t* java/awt/ComponentOrientation.java (ComponentOrientation): Class\n\tnow final.\n\nFrom-SVN: r41492", "tree": {"sha": "1a955914ab30288f0441cb650fc33b181ab60802", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a955914ab30288f0441cb650fc33b181ab60802"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efc150d58bb9eaa7998a13cae6a9d65ac0d7c4d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc150d58bb9eaa7998a13cae6a9d65ac0d7c4d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efc150d58bb9eaa7998a13cae6a9d65ac0d7c4d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc150d58bb9eaa7998a13cae6a9d65ac0d7c4d0/comments", "author": null, "committer": null, "parents": [{"sha": "ecd85e80936e6dbd20f8ecd78c3981f8060bee3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecd85e80936e6dbd20f8ecd78c3981f8060bee3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecd85e80936e6dbd20f8ecd78c3981f8060bee3d"}], "stats": {"total": 537, "additions": 537, "deletions": 0}, "files": [{"sha": "309fc5ca8b4f766180d402df1cbfc97d77268f04", "filename": "libjava/java/awt/geom/Line2D.java", "status": "added", "additions": 537, "deletions": 0, "changes": 537, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc150d58bb9eaa7998a13cae6a9d65ac0d7c4d0/libjava%2Fjava%2Fawt%2Fgeom%2FLine2D.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc150d58bb9eaa7998a13cae6a9d65ac0d7c4d0/libjava%2Fjava%2Fawt%2Fgeom%2FLine2D.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FLine2D.java?ref=efc150d58bb9eaa7998a13cae6a9d65ac0d7c4d0", "patch": "@@ -0,0 +1,537 @@\n+/* Copyright (C) 2000, 2001  Free Software Foundation\n+\n+   This file is part of libjava.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n+details.  */\n+\n+package java.awt.geom;\n+\n+import java.awt.Rectangle;\n+import java.awt.Shape;\n+\n+/**\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date April 21, 2001\n+ */\n+\n+public abstract class Line2D implements Shape, Cloneable\n+{\n+  protected Line2D ()\n+  {\n+  }\n+\n+  public Object clone ()\n+  {\n+    return super.clone ();\n+  }\n+\n+  public boolean contains (double x, double y)\n+  {\n+    double x1 = getX1 ();\n+    double t1 = (x - x1) / (getX2 () - x1);\n+    if (t1 < 0 || t1 > 1)\n+      return false;\n+    double y1 = getY1 ();\n+    double t2 = (y - y1) / (getY2 () - y1);\n+    // FIXME: use of == here is bogus\n+    return t2 >= 0 && t2 <= 1 && t1 == t2;\n+  }\n+\n+  public boolean contains (double x, double y, double w, double h)\n+  {\n+    return false;\n+  }\n+\n+  public boolean contains (Point2D p)\n+  {\n+    return contains (p.getX (), p.getY ());\n+  }\n+\n+  public boolean contains (Rectangle2D r)\n+  {\n+    return false;\n+  }\n+\n+  public Rectangle getBounds ()\n+  {\n+    double x1 = getX1 ();\n+    double y1 = getY1 ();\n+    double x2 = getX2 ();\n+    double y2 = getY2 ();\n+\n+    double x = Math.min (x1, x2);\n+    double y = Math.min (y1, y2);\n+    double w = Math.abs (x1 - x2);\n+    double h = Math.abs (y1 - y2);\n+\n+    return new Rectangle ((int) x, (int) y, (int) w, (int) h);\n+  }\n+\n+  public abstract Point2D getP1 ();\n+  public abstract Point2D getP2 ();\n+\n+  public PathIterator getPathIterator (AffineTransform at)\n+  {\n+    return getPathIterator (at, 0);\n+  }\n+\n+  public PathIterator getPathIterator (AffineTransform at, double flatness)\n+  {\n+    return at.new Iterator (new Iterator ());\n+  }\n+\n+  public abstract double getX1 ();\n+  public abstract double getY1 ();\n+  public abstract double getX2 ();\n+  public abstract double getY2 ();\n+\n+  public boolean intersects (double x, double y, double w, double h)\n+  {\n+    double x1 = getX1 ();\n+    double y1 = getY1 ();\n+    double x2 = getX2 ();\n+    double y2 = getY2 ();\n+\n+    if (x1 >= x && x1 <= x + w && y1 >= y && y1 <= y +h)\n+      return true;\n+    if (x2 >= x && x2 <= x + w && y2 >= y && y2 <= y +h)\n+      return true;\n+\n+    double x3 = x + w;\n+    double y3 = y + h;\n+\n+    return (linesIntersect (x1, y1, x2, y2, x, y, x, y3)\n+\t    || linesIntersect (x1, y1, x2, y2, x, y3, x3, y3)\n+\t    || linesIntersect (x1, y1, x2, y2, x3, y3, x3, y)\n+\t    || linesIntersect (x1, y1, x2, y2, x3, y, x, y));\n+  }\n+\n+  public boolean intersects (Rectangle2D r)\n+  {\n+    return intersects (r.getX (), r.getY (), r.getWidth (), r.getHeight ());\n+  }\n+\n+  public boolean intersectsLine (double x1, double y1, double x2, double y2)\n+  {\n+    return linesIntersect (getX1 (), getY1 (), getX2 (), getY2(),\n+\t\t\t   x1, y1, x2, y2);\n+  }\n+\n+  public boolean intersectsLine (Line2D l)\n+  {\n+    return linesIntersect (getX1 (), getY1 (), getX2 (), getY2(),\n+\t\t\t   l.getX1 (), l.getY1 (), l.getX2 (), l.getY2 ());\n+  }\n+\n+  public static boolean linesIntersect (double x1, double y1,\n+\t\t\t\t\tdouble x2, double y2,\n+\t\t\t\t\tdouble x3,double y3,\n+\t\t\t\t\tdouble x4, double y4)\n+  {\n+    double beta = (((y1 - y3) * (x4 - x3) + (x1 - x3) * (y4 - y3))\n+\t\t   / ((y2 - y1) * (x4 - x3) + (x2 - x1) * (y4 - y3)));\n+    if (beta < 0.0 || beta > 1.0)\n+      return false;\n+    double alpha = (x1 + beta * (x2 - x1) - x3) / (x4 - x3);\n+    return alpha >= 0.0 && alpha <= 1.0;\n+  }\n+\n+  public double ptLineDist (double px, double py)\n+  {\n+    return ptLineDist (getX1 (), getY1 (), getX2 (), getY2 (),\n+\t\t       px, py);\n+  }\n+\n+  public static double ptLineDist (double x1, double y1,\n+\t\t\t\t   double x2, double y2,\n+\t\t\t\t   double px, double py)\n+  {\n+    return Math.sqrt (ptLineDistSq (x1, y1, x2, y2, px, py));\n+  }\n+\n+  public double ptLineDist (Point2D p)\n+  {\n+    return ptLineDist (getX1 (), getY1 (), getX2 (), getY2 (),\n+\t\t       p.getX (), p.getY ());\n+  }\n+\n+  public double ptLineDistSq (double px, double py)\n+  {\n+    return ptLineDistSq (getX1 (), getY1 (), getX2 (), getY2 (),\n+\t\t\t px, py);\n+  }\n+\n+  public static double ptLineDistSq (double x1, double y1,\n+\t\t\t\t     double x2, double y2,\n+\t\t\t\t     double px, double py)\n+  {\n+    double pd2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n+\n+    double x, y;\n+    if (pd2 == 0)\n+      {\n+\t// Points are coincident.\n+\tx = x1;\n+\ty = y2;\n+      }\n+    else\n+      {\n+\tdouble u = ((px - x1) * (x2 - x1) + (py - y1) * (y2 - y1)) / pd2;\n+\tx = x1 + u * (x2 - x1);\n+\ty = y1 + u * (y2 - y1);\n+      }\n+\n+    return (x - px) * (x - px) + (y - py) * (y - py);\n+  }\n+\n+  public double ptLineDistSq (Point2D p)\n+  {\n+    return ptLineDistSq (getX1 (), getY1 (), getX2 (), getY2 (),\n+\t\t\t p.getX (), p.getY ());\n+  }\n+\n+  public double ptSegDist (double px, double py)\n+  {\n+    return ptSegDist (getX1 (), getY1 (), getX2 (), getY2 (),\n+\t\t      px, py);\n+  }\n+\n+  public static double ptSegDist (double x1, double y1,\n+\t\t\t\t   double x2, double y2,\n+\t\t\t\t   double px, double py)\n+  {\n+    return Math.sqrt (ptSegDistSq (x1, y1, x2, y2, px, py));\n+  }\n+\n+  public double ptSegDist (Point2D p)\n+  {\n+    return ptSegDist (getX1 (), getY1 (), getX2 (), getY2 (),\n+\t\t      p.getX (), p.getY ());\n+  }\n+\n+  public double ptSegDistSq (double px, double py)\n+  {\n+    return ptSegDistSq (getX1 (), getY1 (), getX2 (), getY2 (),\n+\t\t\tpx, py);\n+  }\n+\n+  public static double ptSegDistSq (double x1, double y1,\n+\t\t\t\t     double x2, double y2,\n+\t\t\t\t     double px, double py)\n+  {\n+    double pd2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n+\n+    double x, y;\n+    if (pd2 == 0)\n+      {\n+\t// Points are coincident.\n+\tx = x1;\n+\ty = y2;\n+      }\n+    else\n+      {\n+\tdouble u = ((px - x1) * (x2 - x1) + (py - y1) * (y2 - y1)) / pd2;\n+\n+\tif (u < 0)\n+\t  {\n+\t    // \"Off the end\"\n+\t    x = x1;\n+\t    y = y1;\n+\t  }\n+\telse if (u > 1.0)\n+\t  {\n+\t    x = x2;\n+\t    y = y2;\n+\t  }\n+\telse\n+\t  {\n+\t    x = x1 + u * (x2 - x1);\n+\t    y = y1 + u * (y2 - y1);\n+\t  }\n+      }\n+\n+    return (x - px) * (x - px) + (y - py) * (y - py);\n+  }\n+\n+  public double ptSegDistSq (Point2D p)\n+  {\n+    return ptSegDistSq (getX1 (), getY1 (), getX2 (), getY2 (),\n+\t\t\tp.getX (), p.getY ());\n+  }\n+\n+  public int relativeCCW (double px, double py)\n+  {\n+    return relativeCCW (getX1 (), getY1 (),\n+\t\t\tgetX2 (), getY2 (),\n+\t\t\tpx, py);\n+  }\n+\n+  public static int relativeCCW (double x1, double y1,\n+\t\t\t\t double x2, double y2,\n+\t\t\t\t double px, double py)\n+  {\n+    // This is a somewhat silly way to compute this.\n+    // Please write a better one.\n+    double a1 = Math.atan2 (y2 - y1, x2 - x1);\n+    double a2 = Math.atan2 (py - y1, px - x1);\n+\n+    double a = (a1 - a2) % (2 * Math.PI);\n+    if (a == 0 || a == Math.PI)\n+      {\n+\tdouble u = ((px - x1) * (x2 - x1) + (py - y1) * (y2 - y1));\n+\tif (u < 0.0)\n+\t  return 1;\n+\telse if (u > 1.0)\n+\t  return -1;\n+\telse\n+\t  return 0;\n+      }\n+\n+    return (a > 0 && a < Math.PI) ? 1 : -1;\n+  }\n+\n+  public int relativeCCW (Point2D p)\n+  {\n+    return relativeCCW (getX1 (), getY1 (),\n+\t\t\tgetX2 (), getY2 (),\n+\t\t\tp.getX (), p.getY ());\n+  }\n+\n+  public abstract void setLine (double x1, double y1, double x2, double y2);\n+\n+  public void setLine (Line2D l)\n+  {\n+    setLine (l.getX1 (), l.getY1 (), l.getX2 (), l.getY2 ());\n+  }\n+\n+  public void setLine (Point2D p1, Point2D p2)\n+  {\n+    setLine (p1.getX (), p1.getY (), p2.getX (), p2.getY ());\n+  }\t\t\t\t\t     \n+\n+  public static class Float extends Line2D\n+  {\n+    float x1, y1, x2, y2;\n+\n+    public Float ()\n+    {\n+      this (0.0F, 0.0F, 0.0F, 0.0F);\n+    }\n+\n+    public Float (float x1, float y1, float x2, float y2)\n+    {\n+      this.x1 = x1;\n+      this.y1 = y1;\n+      this.x2 = x2;\n+      this.y2 = y2;\n+    }\n+\n+    public Float (Point2D p1, Point2D p2)\n+    {\n+      this.x1 = (float) p1.getX ();\n+      this.y1 = (float) p1.getY ();\n+      this.x2 = (float) p2.getX ();\n+      this.y2 = (float) p2.getY ();\n+    }\n+\n+    public Rectangle2D getBounds2D ()\n+    {\n+      float x = Math.min (x1, x2);\n+      float w = Math.abs (x1 - x2);\n+      float y = Math.min (y1, y2);\n+      float h = Math.abs (y1 - y2);\n+      return new Rectangle2D.Float (x, y, w, h);\n+    }\n+\n+    public Point2D getP1 ()\n+    {\n+      return new Point2D.Float (x1, y1);\n+    }\n+\n+    public Point2D getP2 ()\n+    {\n+      return new Point2D.Float (x2, y2);\n+    }\n+\n+    public double getX1 ()\n+    {\n+      return x1;\n+    }\n+\n+    public double getY1 ()\n+    {\n+      return y1;\n+    }\n+\n+    public double getX2 ()\n+    {\n+      return x2;\n+    }\n+\n+    public double getY2 ()\n+    {\n+      return y2;\n+    }\n+\n+    public void setLine (double x1, double y1, double x2, double y2)\n+    {\n+      this.x1 = (float) x1;\n+      this.y1 = (float) y1;\n+      this.x2 = (float) x2;\n+      this.y2 = (float) y2;\n+    }\n+\n+    public void setLine (float x1, float y1, float x2, float y2)\n+    {\n+      this.x1 = x1;\n+      this.y1 = y1;\n+      this.x2 = x2;\n+      this.y2 = y2;\n+    }\n+  }\n+\n+  public static class Double extends Line2D\n+  {\n+    double x1, y1, x2, y2;\n+\n+    public Double ()\n+    {\n+      this (0.0, 0.0, 0.0, 0.0);\n+    }\n+\n+    public Double (double x1, double y1, double x2, double y2)\n+    {\n+      this.x1 = x1;\n+      this.y1 = y1;\n+      this.x2 = x2;\n+      this.y2 = y2;\n+    }\n+\n+    public Double (Point2D p1, Point2D p2)\n+    {\n+      this.x1 = (double) p1.getX ();\n+      this.y1 = p1.getY ();\n+      this.x2 = p2.getX ();\n+      this.y2 = p2.getY ();\n+    }\n+\n+    public Rectangle2D getBounds2D ()\n+    {\n+      double x = Math.min (x1, x2);\n+      double w = Math.abs (x1 - x2);\n+      double y = Math.min (y1, y2);\n+      double h = Math.abs (y1 - y2);\n+      return new Rectangle2D.Double (x, y, w, h);\n+    }\n+\n+    public Point2D getP1 ()\n+    {\n+      return new Point2D.Double (x1, y1);\n+    }\n+\n+    public Point2D getP2 ()\n+    {\n+      return new Point2D.Double (x2, y2);\n+    }\n+\n+    public double getX1 ()\n+    {\n+      return x1;\n+    }\n+\n+    public double getY1 ()\n+    {\n+      return y1;\n+    }\n+\n+    public double getX2 ()\n+    {\n+      return x2;\n+    }\n+\n+    public double getY2 ()\n+    {\n+      return y2;\n+    }\n+\n+    public void setLine (double x1, double y1, double x2, double y2)\n+    {\n+      this.x1 = x1;\n+      this.y1 = y1;\n+      this.x2 = x2;\n+      this.y2 = y2;\n+    }\n+  }\n+\n+  // This implements the PathIterator for all line objects that don't\n+  // override getPathIterator.\n+  private class Iterator implements PathIterator\n+  {\n+    // Current coordinate.\n+    private int coord;\n+\n+    private static final int START = 0;\n+    private static final int END_PLUS_ONE = 2;\n+\n+    public Iterator ()\n+    {\n+      coord = START;\n+    }\n+\n+    public int currentSegment (double[] coords)\n+    {\n+      int r = SEG_MOVETO;\n+      if (coord == 0)\n+\t{\n+\t  coords[0] = getX1 ();\n+\t  coords[1] = getY1 ();\n+\t}\n+      else if (coord == 1)\n+\t{\n+\t  coords[0] = getX2 ();\n+\t  coords[1] = getY2 ();\n+\t}\n+      else\n+\tr = SEG_CLOSE;\n+\n+      return r;\n+    }\n+\n+    public int currentSegment (float[] coords)\n+    {\n+      int r = SEG_MOVETO;\n+      if (coord == 0)\n+\t{\n+\t  coords[0] = (float) getX1 ();\n+\t  coords[1] = (float) getY1 ();\n+\t}\n+      else if (coord == 1)\n+\t{\n+\t  coords[0] = (float) getX2 ();\n+\t  coords[1] = (float) getY2 ();\n+\t}\n+      else\n+\tr = SEG_CLOSE;\n+\n+      return r;\n+    }\n+\n+    public int getWindingRule ()\n+    {\n+      return WIND_NON_ZERO;\n+    }\n+\n+    public boolean isDone ()\n+    {\n+      return coord == END_PLUS_ONE;\n+    }\n+\n+    public void next ()\n+    {\n+      if (coord < END_PLUS_ONE)\n+\t++coord;\n+    }\n+  }\n+}"}]}