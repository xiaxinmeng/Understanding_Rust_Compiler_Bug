{"sha": "b78868459fda4de0417e52e1d46388ca75a4e74d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc4ODY4NDU5ZmRhNGRlMDQxN2U1MmUxZDQ2Mzg4Y2E3NWE0ZTc0ZA==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-03-26T20:58:51Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-04-23T21:03:56Z"}, "message": "amdgcn: Swap mov<mode>_exec operands\n\nEvery other *_exec insn has the exec operand last.  This being the other way\naround is a cause of bugs, and prevents use in macro templates.\n\n2020-04-23  Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\t* config/gcn/gcn-valu.md (mov<mode>_exec): Swap the numbers on operands\n\t2 and 3.\n\t(mov<mode>_exec): Likewise.\n\t(trunc<vndi><mode>2_exec): Swap parameters to gen_mov<mode>_exec.\n\t(<convop><mode><vndi>2_exec): Likewise.", "tree": {"sha": "6bd40f218a35f04324a93427102e326b1ce95660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bd40f218a35f04324a93427102e326b1ce95660"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b78868459fda4de0417e52e1d46388ca75a4e74d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b78868459fda4de0417e52e1d46388ca75a4e74d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b78868459fda4de0417e52e1d46388ca75a4e74d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b78868459fda4de0417e52e1d46388ca75a4e74d/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c9d69bafc8fc1f31f6cb50dffab106641d086d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c9d69bafc8fc1f31f6cb50dffab106641d086d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c9d69bafc8fc1f31f6cb50dffab106641d086d0"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "5f27a8a08aedfb1def38216f6cd107ecd51028bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b78868459fda4de0417e52e1d46388ca75a4e74d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b78868459fda4de0417e52e1d46388ca75a4e74d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b78868459fda4de0417e52e1d46388ca75a4e74d", "patch": "@@ -1,3 +1,11 @@\n+2020-04-23  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-valu.md (mov<mode>_exec): Swap the numbers on operands\n+\t2 and 3.\n+\t(mov<mode>_exec): Likewise.\n+\t(trunc<vndi><mode>2_exec): Swap parameters to gen_mov<mode>_exec.\n+\t(<convop><mode><vndi>2_exec): Likewise.\n+\n 2019-04-23  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR tree-optimization/94717"}, {"sha": "0422e153cf33b674cdc9e89105ed0f2e78f72e19", "filename": "gcc/config/gcn/gcn-valu.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b78868459fda4de0417e52e1d46388ca75a4e74d/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b78868459fda4de0417e52e1d46388ca75a4e74d/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md?ref=b78868459fda4de0417e52e1d46388ca75a4e74d", "patch": "@@ -232,16 +232,16 @@\n   [(set (match_operand:V_1REG 0 \"nonimmediate_operand\"\t \"=v, v, v, v, v, m\")\n \t(vec_merge:V_1REG\n \t  (match_operand:V_1REG 1 \"general_operand\"\t \"vA, B, v,vA, m, v\")\n-\t  (match_operand:V_1REG 3 \"gcn_alu_or_unspec_operand\"\n+\t  (match_operand:V_1REG 2 \"gcn_alu_or_unspec_operand\"\n \t\t\t\t\t\t\t \"U0,U0,vA,vA,U0,U0\")\n-\t  (match_operand:DI 2 \"register_operand\"\t \" e, e,cV,Sv, e, e\")))\n+\t  (match_operand:DI 3 \"register_operand\"\t \" e, e,cV,Sv, e, e\")))\n    (clobber (match_scratch:<VnDI> 4\t\t\t \"=X, X, X, X,&v,&v\"))]\n   \"!MEM_P (operands[0]) || REG_P (operands[1])\"\n   \"@\n    v_mov_b32\\t%0, %1\n    v_mov_b32\\t%0, %1\n-   v_cndmask_b32\\t%0, %3, %1, vcc\n-   v_cndmask_b32\\t%0, %3, %1, %2\n+   v_cndmask_b32\\t%0, %2, %1, vcc\n+   v_cndmask_b32\\t%0, %2, %1, %3\n    #\n    #\"\n   [(set_attr \"type\" \"vop1,vop1,vop2,vop3a,*,*\")\n@@ -283,9 +283,9 @@\n   [(set (match_operand:V_2REG 0 \"nonimmediate_operand\" \"= v,   v,   v, v, m\")\n \t(vec_merge:V_2REG\n \t  (match_operand:V_2REG 1 \"general_operand\"    \"vDB,  v0,  v0, m, v\")\n-\t  (match_operand:V_2REG 3 \"gcn_alu_or_unspec_operand\"\n+\t  (match_operand:V_2REG 2 \"gcn_alu_or_unspec_operand\"\n \t\t\t\t\t\t       \" U0,vDA0,vDA0,U0,U0\")\n-\t  (match_operand:DI 2 \"register_operand\"       \"  e,  cV,  Sv, e, e\")))\n+\t  (match_operand:DI 3 \"register_operand\"       \"  e,  cV,  Sv, e, e\")))\n    (clobber (match_scratch:<VnDI> 4\t\t       \"= X,   X,   X,&v,&v\"))]\n   \"!MEM_P (operands[0]) || REG_P (operands[1])\"\n   {\n@@ -295,23 +295,23 @@\n \tcase 0:\n \t  return \"v_mov_b32\\t%L0, %L1\\;v_mov_b32\\t%H0, %H1\";\n \tcase 1:\n-\t  return \"v_cndmask_b32\\t%L0, %L3, %L1, vcc\\;\"\n-\t\t \"v_cndmask_b32\\t%H0, %H3, %H1, vcc\";\n+\t  return \"v_cndmask_b32\\t%L0, %L2, %L1, vcc\\;\"\n+\t\t \"v_cndmask_b32\\t%H0, %H2, %H1, vcc\";\n \tcase 2:\n-\t  return \"v_cndmask_b32\\t%L0, %L3, %L1, %2\\;\"\n-\t\t \"v_cndmask_b32\\t%H0, %H3, %H1, %2\";\n+\t  return \"v_cndmask_b32\\t%L0, %L2, %L1, %3\\;\"\n+\t\t \"v_cndmask_b32\\t%H0, %H2, %H1, %3\";\n \t}\n     else\n       switch (which_alternative)\n \t{\n \tcase 0:\n \t  return \"v_mov_b32\\t%H0, %H1\\;v_mov_b32\\t%L0, %L1\";\n \tcase 1:\n-\t  return \"v_cndmask_b32\\t%H0, %H3, %H1, vcc\\;\"\n-\t\t \"v_cndmask_b32\\t%L0, %L3, %L1, vcc\";\n+\t  return \"v_cndmask_b32\\t%H0, %H2, %H1, vcc\\;\"\n+\t\t \"v_cndmask_b32\\t%L0, %L2, %L1, vcc\";\n \tcase 2:\n-\t  return \"v_cndmask_b32\\t%H0, %H3, %H1, %2\\;\"\n-\t\t \"v_cndmask_b32\\t%L0, %L3, %L1, %2\";\n+\t  return \"v_cndmask_b32\\t%H0, %H2, %H1, %3\\;\"\n+\t\t \"v_cndmask_b32\\t%L0, %L2, %L1, %3\";\n \t}\n \n     return \"#\";\n@@ -2487,7 +2487,7 @@\n     if (<MODE>mode != <VnSI>mode)\n       emit_insn (gen_trunc<vnsi><mode>2_exec (out, inlo, merge, exec));\n     else\n-      emit_insn (gen_mov<mode>_exec (out, inlo, exec, merge));\n+      emit_insn (gen_mov<mode>_exec (out, inlo, merge, exec));\n   }\n   [(set_attr \"type\" \"vop2\")\n    (set_attr \"length\" \"4\")])\n@@ -2539,7 +2539,7 @@\n     if (<MODE>mode != <VnSI>mode)\n       emit_insn (gen_<convop><mode><vnsi>2_exec (outlo, in, mergelo, exec));\n     else\n-      emit_insn (gen_mov<mode>_exec (outlo, in, exec, mergelo));\n+      emit_insn (gen_mov<mode>_exec (outlo, in, mergelo, exec));\n     if ('<su>' == 's')\n       emit_insn (gen_ashr<vnsi>3_exec (outhi, outlo, GEN_INT (31), mergehi,\n \t\t\t\t       exec));"}]}