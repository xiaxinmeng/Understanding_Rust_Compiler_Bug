{"sha": "abc088aad79d47b40da8a26e87815db09ab2d6eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJjMDg4YWFkNzlkNDdiNDBkYThhMjZlODc4MTVkYjA5YWIyZDZlYg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-11-19T02:25:55Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-11-19T02:25:55Z"}, "message": "re PR c++/8355 (befriending a template specialization in another namespace)\n\n\tPR c++/8355\n\t* decl.c (grokfndecl): Set up DECL_TEMPLATE_INFO before calling\n\tset_decl_namespace.\n\t* name-lookup.c (set_decl_namespace): \n\tPR c++/8355\n\t* g++.dg/template/friend39.C: New test.\n\nFrom-SVN: r107207", "tree": {"sha": "8bd4a3b77c67b5c91f1aed77d26b1a55d7c5ba5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bd4a3b77c67b5c91f1aed77d26b1a55d7c5ba5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abc088aad79d47b40da8a26e87815db09ab2d6eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abc088aad79d47b40da8a26e87815db09ab2d6eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abc088aad79d47b40da8a26e87815db09ab2d6eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abc088aad79d47b40da8a26e87815db09ab2d6eb/comments", "author": null, "committer": null, "parents": [{"sha": "817f9ef2e52bbe4568264487acfa86c5bb2882d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/817f9ef2e52bbe4568264487acfa86c5bb2882d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/817f9ef2e52bbe4568264487acfa86c5bb2882d4"}], "stats": {"total": 155, "additions": 87, "deletions": 68}, "files": [{"sha": "bd711f3aac12a875396788eadbc4beeed56d26f4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc088aad79d47b40da8a26e87815db09ab2d6eb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc088aad79d47b40da8a26e87815db09ab2d6eb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=abc088aad79d47b40da8a26e87815db09ab2d6eb", "patch": "@@ -1,3 +1,10 @@\n+2005-11-18  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/8355\n+\t* decl.c (grokfndecl): Set up DECL_TEMPLATE_INFO before calling\n+\tset_decl_namespace.\n+\t* name-lookup.c (set_decl_namespace): \n+\n 2005-11-18  Mike Stump  <mrs@apple.com>\n \n \t* cp-objcp-common.h (LANG_HOOKS_LOOKUP_NAME): Add."}, {"sha": "55e26b97ff65c2c6cb8a0e95f460e12093462257", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 61, "deletions": 68, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc088aad79d47b40da8a26e87815db09ab2d6eb/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc088aad79d47b40da8a26e87815db09ab2d6eb/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=abc088aad79d47b40da8a26e87815db09ab2d6eb", "patch": "@@ -5696,7 +5696,6 @@ grokfndecl (tree ctype,\n {\n   tree decl;\n   int staticp = ctype && TREE_CODE (type) == FUNCTION_TYPE;\n-  int has_default_arg = 0;\n   tree t;\n \n   if (raises)\n@@ -5708,6 +5707,67 @@ grokfndecl (tree ctype,\n   if (TYPE_VOLATILE (type))\n     TREE_THIS_VOLATILE (decl) = 1;\n \n+  if (friendp\n+      && TREE_CODE (orig_declarator) == TEMPLATE_ID_EXPR)\n+    {\n+      if (funcdef_flag)\n+\terror\n+\t  (\"defining explicit specialization %qD in friend declaration\",\n+\t   orig_declarator);\n+      else\n+\t{\n+\t  tree fns = TREE_OPERAND (orig_declarator, 0);\n+\t  tree args = TREE_OPERAND (orig_declarator, 1);\n+\n+\t  if (PROCESSING_REAL_TEMPLATE_DECL_P ())\n+\t    {\n+\t      /* Something like `template <class T> friend void f<T>()'.  */\n+\t      error (\"invalid use of template-id %qD in declaration \"\n+\t\t     \"of primary template\",\n+\t\t     orig_declarator);\n+\t      return NULL_TREE;\n+\t    }\n+\n+\n+\t  /* A friend declaration of the form friend void f<>().  Record\n+\t     the information in the TEMPLATE_ID_EXPR.  */\n+\t  SET_DECL_IMPLICIT_INSTANTIATION (decl);\n+\n+\t  if (TREE_CODE (fns) == COMPONENT_REF)\n+\t    {\n+\t      /* Due to bison parser ickiness, we will have already looked\n+\t\t up an operator_name or PFUNCNAME within the current class\n+\t\t (see template_id in parse.y). If the current class contains\n+\t\t such a name, we'll get a COMPONENT_REF here. Undo that.  */\n+\n+\t      gcc_assert (TREE_TYPE (TREE_OPERAND (fns, 0))\n+\t\t\t  == current_class_type);\n+\t      fns = TREE_OPERAND (fns, 1);\n+\t    }\n+\t  gcc_assert (TREE_CODE (fns) == IDENTIFIER_NODE\n+\t\t      || TREE_CODE (fns) == OVERLOAD);\n+\t  DECL_TEMPLATE_INFO (decl) = tree_cons (fns, args, NULL_TREE);\n+\n+\t  for (t = TYPE_ARG_TYPES (TREE_TYPE (decl)); t; t = TREE_CHAIN (t))\n+\t    if (TREE_PURPOSE (t)\n+\t\t&& TREE_CODE (TREE_PURPOSE (t)) == DEFAULT_ARG)\n+\t    {\n+\t      error (\"default arguments are not allowed in declaration \"\n+\t\t     \"of friend template specialization %qD\",\n+\t\t     decl);\n+\t      return NULL_TREE;\n+\t    }\n+\n+\t  if (inlinep)\n+\t    {\n+\t      error (\"%<inline%> is not allowed in declaration of friend \"\n+\t\t     \"template specialization %qD\",\n+\t\t     decl);\n+\t      return NULL_TREE;\n+\t    }\n+\t}\n+    }\n+\n   /* If this decl has namespace scope, set that up.  */\n   if (in_namespace)\n     set_decl_namespace (decl, in_namespace, friendp);\n@@ -5828,73 +5888,6 @@ grokfndecl (tree ctype,\n   if (ctype && decl_function_context (decl))\n     DECL_NO_STATIC_CHAIN (decl) = 1;\n \n-  for (t = TYPE_ARG_TYPES (TREE_TYPE (decl)); t; t = TREE_CHAIN (t))\n-    if (TREE_PURPOSE (t)\n-\t&& TREE_CODE (TREE_PURPOSE (t)) == DEFAULT_ARG)\n-      {\n-\thas_default_arg = 1;\n-\tbreak;\n-      }\n-\n-  if (friendp\n-      && TREE_CODE (orig_declarator) == TEMPLATE_ID_EXPR)\n-    {\n-      if (funcdef_flag)\n-\terror\n-\t  (\"defining explicit specialization %qD in friend declaration\",\n-\t   orig_declarator);\n-      else\n-\t{\n-\t  tree fns = TREE_OPERAND (orig_declarator, 0);\n-\t  tree args = TREE_OPERAND (orig_declarator, 1);\n-\n-\t  if (PROCESSING_REAL_TEMPLATE_DECL_P ())\n-\t    {\n-\t      /* Something like `template <class T> friend void f<T>()'.  */\n-\t      error (\"invalid use of template-id %qD in declaration \"\n-\t\t     \"of primary template\",\n-\t\t     orig_declarator);\n-\t      return NULL_TREE;\n-\t    }\n-\n-\n-\t  /* A friend declaration of the form friend void f<>().  Record\n-\t     the information in the TEMPLATE_ID_EXPR.  */\n-\t  SET_DECL_IMPLICIT_INSTANTIATION (decl);\n-\n-\t  if (TREE_CODE (fns) == COMPONENT_REF)\n-\t    {\n-\t      /* Due to bison parser ickiness, we will have already looked\n-\t\t up an operator_name or PFUNCNAME within the current class\n-\t\t (see template_id in parse.y). If the current class contains\n-\t\t such a name, we'll get a COMPONENT_REF here. Undo that.  */\n-\n-\t      gcc_assert (TREE_TYPE (TREE_OPERAND (fns, 0))\n-\t\t\t  == current_class_type);\n-\t      fns = TREE_OPERAND (fns, 1);\n-\t    }\n-\t  gcc_assert (TREE_CODE (fns) == IDENTIFIER_NODE\n-\t\t      || TREE_CODE (fns) == OVERLOAD);\n-\t  DECL_TEMPLATE_INFO (decl) = tree_cons (fns, args, NULL_TREE);\n-\n-\t  if (has_default_arg)\n-\t    {\n-\t      error (\"default arguments are not allowed in declaration \"\n-\t\t     \"of friend template specialization %qD\",\n-\t\t     decl);\n-\t      return NULL_TREE;\n-\t    }\n-\n-\t  if (inlinep)\n-\t    {\n-\t      error (\"%<inline%> is not allowed in declaration of friend \"\n-\t\t     \"template specialization %qD\",\n-\t\t     decl);\n-\t      return NULL_TREE;\n-\t    }\n-\t}\n-    }\n-\n   if (funcdef_flag)\n     /* Make the init_value nonzero so pushdecl knows this is not\n        tentative.  error_mark_node is replaced later with the BLOCK.  */"}, {"sha": "382a8a3a3ea432510f12ccf0450df6e509b7f49a", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc088aad79d47b40da8a26e87815db09ab2d6eb/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc088aad79d47b40da8a26e87815db09ab2d6eb/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=abc088aad79d47b40da8a26e87815db09ab2d6eb", "patch": "@@ -2880,6 +2880,10 @@ set_decl_namespace (tree decl, tree scope, bool friendp)\n        match.  But, we'll check later, when we construct the\n        template.  */\n     return;\n+  /* Instantiations or specializations of templates may be declared as\n+     friends in any namespace.  */\n+  if (friendp && DECL_USE_TEMPLATE (decl))\n+    return;\n   if (is_overloaded_fn (old))\n     {\n       for (; old; old = OVL_NEXT (old))"}, {"sha": "9ca78fe1036769add553158aaea793433b0df613", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc088aad79d47b40da8a26e87815db09ab2d6eb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc088aad79d47b40da8a26e87815db09ab2d6eb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=abc088aad79d47b40da8a26e87815db09ab2d6eb", "patch": "@@ -1,7 +1,15 @@\n+<<<<<<< .mine\n+2005-11-18  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/8355\n+\t* g++.dg/template/friend39.C: New test.\n+\n+=======\n 2005-11-18  James E Wilson  <wilson@specifix.com>\n \n \t* gcc.dg/builtin-strstr.c: New.\n \n+>>>>>>> .r107206\n 2005-11-18  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.target/ia64/20010423-1.c, gcc.target/ia64/20020313-1.c,"}, {"sha": "9ebe226eb6fb1756e2f99a90cf367e49400e5602", "filename": "gcc/testsuite/g++.dg/template/friend39.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc088aad79d47b40da8a26e87815db09ab2d6eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc088aad79d47b40da8a26e87815db09ab2d6eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend39.C?ref=abc088aad79d47b40da8a26e87815db09ab2d6eb", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/8355\n+\n+namespace Foo { template <typename T> void foo();}\n+struct Bar\n+{\n+  friend void Foo::foo<int>();\n+};"}]}