{"sha": "bcaf576b83e0c2332c2f78acb5ec7d060fdbab46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNhZjU3NmI4M2UwYzIzMzJjMmY3OGFjYjVlYzdkMDYwZmRiYWI0Ng==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-12-03T14:20:56Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-12-03T14:20:56Z"}, "message": "re PR libstdc++/42261 (infinite recursion from string(string::size_type(6), string::size_type('f')))\n\n2009-12-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/42261\n\t* include/bits/basic_string.h (_S_construct_aux(_Integer, _Integer,\n\tconst _Alloc&, __true_type)): Cast the second argument to value_type.\n\t* include/ext/sso_string_base.h (_M_construct_aux(_Integer, _Integer,\n\tstd::__true_type)): Likewise.\n\t* include/ext/rc_string_base.h (_S_construct_aux(_Integer, _Integer,\n\tconst _Alloc&, std::__true_type)): Likewise.\n\t* testsuite/21_strings/basic_string/cons/char/42261.cc: New.\n\t* testsuite/21_strings/basic_string/cons/wchar_t/42261.cc: Likewise.\n\nFrom-SVN: r154948", "tree": {"sha": "9d3617a39d3b1d4730536b70b1be7b55faa58744", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d3617a39d3b1d4730536b70b1be7b55faa58744"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcaf576b83e0c2332c2f78acb5ec7d060fdbab46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcaf576b83e0c2332c2f78acb5ec7d060fdbab46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcaf576b83e0c2332c2f78acb5ec7d060fdbab46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcaf576b83e0c2332c2f78acb5ec7d060fdbab46/comments", "author": null, "committer": null, "parents": [{"sha": "ddf6c18784cd437dd96ed606aec21ff60ae604b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddf6c18784cd437dd96ed606aec21ff60ae604b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddf6c18784cd437dd96ed606aec21ff60ae604b1"}], "stats": {"total": 91, "additions": 88, "deletions": 3}, "files": [{"sha": "3bdd2c830a77f14b57d6f5f8eb9be817151c8494", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcaf576b83e0c2332c2f78acb5ec7d060fdbab46/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcaf576b83e0c2332c2f78acb5ec7d060fdbab46/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bcaf576b83e0c2332c2f78acb5ec7d060fdbab46", "patch": "@@ -1,3 +1,15 @@\n+2009-12-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/42261\n+\t* include/bits/basic_string.h (_S_construct_aux(_Integer, _Integer,\n+\tconst _Alloc&, __true_type)): Cast the second argument to value_type.\n+\t* include/ext/sso_string_base.h (_M_construct_aux(_Integer, _Integer,\n+\tstd::__true_type)): Likewise.\n+\t* include/ext/rc_string_base.h (_S_construct_aux(_Integer, _Integer,\n+\tconst _Alloc&, std::__true_type)): Likewise.\n+\t* testsuite/21_strings/basic_string/cons/char/42261.cc: New.\n+\t* testsuite/21_strings/basic_string/cons/wchar_t/42261.cc: Likewise.\n+\n 2009-12-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/20_util/bind/ref.cc: Add."}, {"sha": "a574bf62f8789490d5090116d0a9d200e6ee5e76", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcaf576b83e0c2332c2f78acb5ec7d060fdbab46/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcaf576b83e0c2332c2f78acb5ec7d060fdbab46/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=bcaf576b83e0c2332c2f78acb5ec7d060fdbab46", "patch": "@@ -1588,7 +1588,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         static _CharT*\n         _S_construct_aux(_Integer __beg, _Integer __end,\n \t\t\t const _Alloc& __a, __true_type)\n-        { return _S_construct(static_cast<size_type>(__beg), __end, __a); }\n+        { return _S_construct(static_cast<size_type>(__beg),\n+\t\t\t      static_cast<value_type>(__end), __a); }\n \n       template<class _InIterator>\n         static _CharT*"}, {"sha": "c9fdb25317d38ea2d963d57873e960ad9b2b5be8", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcaf576b83e0c2332c2f78acb5ec7d060fdbab46/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcaf576b83e0c2332c2f78acb5ec7d060fdbab46/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=bcaf576b83e0c2332c2f78acb5ec7d060fdbab46", "patch": "@@ -231,7 +231,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n         static _CharT*\n         _S_construct_aux(_Integer __beg, _Integer __end,\n \t\t\t const _Alloc& __a, std::__true_type)\n-\t{ return _S_construct(static_cast<size_type>(__beg), __end, __a); }\n+\t{ return _S_construct(static_cast<size_type>(__beg),\n+\t\t\t      static_cast<value_type>(__end), __a); }\n \n       template<typename _InIterator>\n         static _CharT*"}, {"sha": "264e862e96ae9a3953c37b2b61229526e170992e", "filename": "libstdc++-v3/include/ext/sso_string_base.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcaf576b83e0c2332c2f78acb5ec7d060fdbab46/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcaf576b83e0c2332c2f78acb5ec7d060fdbab46/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h?ref=bcaf576b83e0c2332c2f78acb5ec7d060fdbab46", "patch": "@@ -106,7 +106,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       template<typename _Integer>\n         void\n         _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)\n-\t{ _M_construct(static_cast<size_type>(__beg), __end); }\n+      { _M_construct(static_cast<size_type>(__beg),\n+\t\t     static_cast<value_type>(__end)); }\n \n       template<typename _InIterator>\n         void"}, {"sha": "a83b74ac73599631c7f4923db9fa737b43c3963b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/42261.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcaf576b83e0c2332c2f78acb5ec7d060fdbab46/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F42261.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcaf576b83e0c2332c2f78acb5ec7d060fdbab46/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F42261.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F42261.cc?ref=bcaf576b83e0c2332c2f78acb5ec7d060fdbab46", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/42261\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  const string s(string::size_type(6), string::size_type('f'));\n+  VERIFY( s == \"ffffff\" );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8782e8cafe90db7de10d8ddf2a6156a6c6ec01a6", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/wchar_t/42261.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcaf576b83e0c2332c2f78acb5ec7d060fdbab46/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F42261.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcaf576b83e0c2332c2f78acb5ec7d060fdbab46/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F42261.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F42261.cc?ref=bcaf576b83e0c2332c2f78acb5ec7d060fdbab46", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/42261\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  const wstring s(wstring::size_type(6), wstring::size_type(L'f'));\n+  VERIFY( s == L\"ffffff\" );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}