{"sha": "51e7f3770c99afc09afc9e9837aad4c8505fbbf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFlN2YzNzcwYzk5YWZjMDlhZmM5ZTk4MzdhYWQ0Yzg1MDVmYmJmOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2011-05-09T17:31:48Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-09T17:31:48Z"}, "message": "predicates.md (const_pow2_1_to_2_operand): Remove.\n\n2011-05-09  Uros Bizjak  <ubizjak@gmail.com>\n\n\t* config/i386/predicates.md (const_pow2_1_to_2_operand): Remove.\n\t(const_pow2_1_to_8_operand): Ditto.\n\t(const_pow2_1_to_128_operand): Ditto.\n\t(const_pow2_1_to_32768_operand): Ditto.\n\t* config/i386/mmx.md (*mmx_pinsrw): Use const_int_operand instead of\n\tconst_pow2_1_to_8_operand for operand 3 predicate.  Use exact_log2\n\tin insn constraint to check integer value of operand 3.\n\t* config/i386/sse.md (*vec_setv4sf_sse4_1): Ditto.\n\n\t(PINSR_MODE): New mode iterator.\n\t(sse2p4_1): New mode attribute.\n\t(<sse2p4_1>_pinsr<ssemodesuffix>): Merge insn from sse4_1_pinsrb,\n\tsse2_pinsrw, sse4_1_pinsrd and sse4_1_pinsrq using PINSR_MODE mode\n\titerator.  Use const_int_operand instead of\n\tconst_pow2_1_to_{2,8,128,32768}_operand for operand 3 predicate.  Use\n\texact_log2 in insn constraint to check integer value of operand 3.\n\n2011-05-09  Uros Bizjak  <ubizjak@gmail.com>\n\n\t* config/i386/sse.md (blendbits): Remove mode attribute.\n\t(<sse4_1>_blend<ssemodesuffix><avxsizesuffix>): Use const_int_operand\n\tinstead of const_0_to_<blendbits>_operand for operand 3 predicate.\n\tCheck integer value of operand 3 in insn constraint.\n\nFrom-SVN: r173580", "tree": {"sha": "f14a02f985dc4168fa44ea0e3ca0ba29a34e31ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f14a02f985dc4168fa44ea0e3ca0ba29a34e31ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51e7f3770c99afc09afc9e9837aad4c8505fbbf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e7f3770c99afc09afc9e9837aad4c8505fbbf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51e7f3770c99afc09afc9e9837aad4c8505fbbf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e7f3770c99afc09afc9e9837aad4c8505fbbf8/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0ca8de87c419963448108ba0fde0d818bd18df79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ca8de87c419963448108ba0fde0d818bd18df79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ca8de87c419963448108ba0fde0d818bd18df79"}], "stats": {"total": 230, "additions": 85, "deletions": 145}, "files": [{"sha": "18790b8051126138c5c668df1488c5a576c8c6d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e7f3770c99afc09afc9e9837aad4c8505fbbf8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e7f3770c99afc09afc9e9837aad4c8505fbbf8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51e7f3770c99afc09afc9e9837aad4c8505fbbf8", "patch": "@@ -1,3 +1,29 @@\n+2011-05-09  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/predicates.md (const_pow2_1_to_2_operand): Remove.\n+\t(const_pow2_1_to_8_operand): Ditto.\n+\t(const_pow2_1_to_128_operand): Ditto.\n+\t(const_pow2_1_to_32768_operand): Ditto.\n+\t* config/i386/mmx.md (*mmx_pinsrw): Use const_int_operand instead of\n+\tconst_pow2_1_to_8_operand for operand 3 predicate.  Use exact_log2\n+\tin insn constraint to check integer value of operand 3.\n+\t* config/i386/sse.md (*vec_setv4sf_sse4_1): Ditto.\n+\n+\t(PINSR_MODE): New mode iterator.\n+\t(sse2p4_1): New mode attribute.\n+\t(<sse2p4_1>_pinsr<ssemodesuffix>): Merge insn from sse4_1_pinsrb,\n+\tsse2_pinsrw, sse4_1_pinsrd and sse4_1_pinsrq using PINSR_MODE mode\n+\titerator.  Use const_int_operand instead of\n+\tconst_pow2_1_to_{2,8,128,32768}_operand for operand 3 predicate.  Use\n+\texact_log2 in insn constraint to check integer value of operand 3.\n+\n+2011-05-09  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (blendbits): Remove mode attribute.\n+\t(<sse4_1>_blend<ssemodesuffix><avxsizesuffix>): Use const_int_operand\n+\tinstead of const_0_to_<blendbits>_operand for operand 3 predicate.\n+\tCheck integer value of operand 3 in insn constraint.\n+\n 2011-05-09  Richard Guenther  <rguenther@suse.de>\n \n \t* lto-symtab.c (lto_cgraph_replace_node): Use types_compatible_p"}, {"sha": "f56fb227b1a2904183a30e34562f179762d44a5b", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e7f3770c99afc09afc9e9837aad4c8505fbbf8/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e7f3770c99afc09afc9e9837aad4c8505fbbf8/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=51e7f3770c99afc09afc9e9837aad4c8505fbbf8", "patch": "@@ -1197,8 +1197,10 @@\n           (vec_duplicate:V4HI\n             (match_operand:HI 2 \"nonimmediate_operand\" \"rm\"))\n \t  (match_operand:V4HI 1 \"register_operand\" \"0\")\n-          (match_operand:SI 3 \"const_pow2_1_to_8_operand\" \"n\")))]\n-  \"TARGET_SSE || TARGET_3DNOW_A\"\n+          (match_operand:SI 3 \"const_int_operand\" \"\")))]\n+  \"(TARGET_SSE || TARGET_3DNOW_A)\n+   && ((unsigned) exact_log2 (INTVAL (operands[3]))\n+       < GET_MODE_NUNITS (V4HImode))\"\n {\n   operands[3] = GEN_INT (exact_log2 (INTVAL (operands[3])));\n   if (MEM_P (operands[2]))"}, {"sha": "8a89f70c33378015105b2b75bc462de56223d336", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e7f3770c99afc09afc9e9837aad4c8505fbbf8/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e7f3770c99afc09afc9e9837aad4c8505fbbf8/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=51e7f3770c99afc09afc9e9837aad4c8505fbbf8", "patch": "@@ -688,36 +688,6 @@\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE (INTVAL (op), 12, 15)\")))\n \n-;; Match exactly one bit in 2-bit mask.\n-(define_predicate \"const_pow2_1_to_2_operand\"\n-  (and (match_code \"const_int\")\n-       (ior (match_test \"op == const1_rtx\")\n-\t    (match_test \"op == const2_rtx\"))))\n-\n-;; Match exactly one bit in 4-bit mask.\n-(define_predicate \"const_pow2_1_to_8_operand\"\n-  (match_code \"const_int\")\n-{\n-  unsigned int log = exact_log2 (INTVAL (op));\n-  return log <= 3;\n-})\n-\n-;; Match exactly one bit in 8-bit mask.\n-(define_predicate \"const_pow2_1_to_128_operand\"\n-  (match_code \"const_int\")\n-{\n-  unsigned int log = exact_log2 (INTVAL (op));\n-  return log <= 7;\n-})\n-\n-;; Match exactly one bit in 16-bit mask.\n-(define_predicate \"const_pow2_1_to_32768_operand\"\n-  (match_code \"const_int\")\n-{\n-  unsigned int log = exact_log2 (INTVAL (op));\n-  return log <= 15;\n-})\n-\n ;; True if this is a constant appropriate for an increment or decrement.\n (define_predicate \"incdec_operand\"\n   (match_code \"const_int\")"}, {"sha": "291bffb636e8cae448850f14b84b51e1fd6b48a3", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 55, "deletions": 113, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e7f3770c99afc09afc9e9837aad4c8505fbbf8/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e7f3770c99afc09afc9e9837aad4c8505fbbf8/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=51e7f3770c99afc09afc9e9837aad4c8505fbbf8", "patch": "@@ -178,10 +178,6 @@\n (define_mode_attr sserotatemax\n   [(V16QI \"7\") (V8HI \"15\") (V4SI \"31\") (V2DI \"63\")])\n \n-;; Mapping of immediate bits for blend instructions\n-(define_mode_attr blendbits\n-  [(V8SF \"255\") (V4SF \"15\") (V4DF \"15\") (V2DF \"3\")])\n-\n ;; Instruction suffix for sign and zero extensions.\n (define_code_attr extsuffix [(sign_extend \"sx\") (zero_extend \"zx\")])\n \n@@ -3337,7 +3333,7 @@\n   [(set_attr \"type\" \"sselog,ssemov,mmxcvt,mmxmov\")\n    (set_attr \"mode\" \"V4SF,SF,DI,DI\")])\n \n-(define_insn \"*vec_concatv4sf_sse\"\n+(define_insn \"*vec_concatv4sf\"\n   [(set (match_operand:V4SF 0 \"register_operand\"       \"=x,x,x,x\")\n \t(vec_concat:V4SF\n \t  (match_operand:V2SF 1 \"register_operand\"     \" 0,x,0,x\")\n@@ -3445,8 +3441,10 @@\n \t  (vec_duplicate:V4SF\n \t    (match_operand:SF 2 \"nonimmediate_operand\" \"xm,xm\"))\n \t  (match_operand:V4SF 1 \"register_operand\" \"0,x\")\n-\t  (match_operand:SI 3 \"const_pow2_1_to_8_operand\" \"n,n\")))]\n-  \"TARGET_SSE4_1\"\n+\t  (match_operand:SI 3 \"const_int_operand\" \"\")))]\n+  \"TARGET_SSE4_1\n+   && ((unsigned) exact_log2 (INTVAL (operands[3]))\n+       < GET_MODE_NUNITS (V4SFmode))\"\n {\n   operands[3] = GEN_INT (exact_log2 (INTVAL (operands[3])) << 4);\n   switch (which_alternative)\n@@ -6055,129 +6053,72 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse4_1_pinsrb\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=x,x,x,x\")\n-\t(vec_merge:V16QI\n-\t  (vec_duplicate:V16QI\n-\t    (match_operand:QI 2 \"nonimmediate_operand\" \"r,m,r,m\"))\n-\t  (match_operand:V16QI 1 \"register_operand\" \"0,0,x,x\")\n-\t  (match_operand:SI 3 \"const_pow2_1_to_32768_operand\" \"n,n,n,n\")))]\n-  \"TARGET_SSE4_1\"\n-{\n-  operands[3] = GEN_INT (exact_log2 (INTVAL (operands[3])));\n-\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \"pinsrb\\t{%3, %k2, %0|%0, %k2, %3}\";\n-    case 1:\n-      return \"pinsrb\\t{%3, %2, %0|%0, %2, %3}\";\n-    case 2:\n-      return \"vpinsrb\\t{%3, %k2, %1, %0|%0, %1, %k2, %3}\";\n-    case 3:\n-      return \"vpinsrb\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-  [(set_attr \"isa\" \"noavx,noavx,avx,avx\")\n-   (set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"orig,orig,vex,vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse2_pinsrw\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x,x,x\")\n-\t(vec_merge:V8HI\n-\t  (vec_duplicate:V8HI\n-\t    (match_operand:HI 2 \"nonimmediate_operand\" \"r,m,r,m\"))\n-\t  (match_operand:V8HI 1 \"register_operand\" \"0,0,x,x\")\n-\t  (match_operand:SI 3 \"const_pow2_1_to_128_operand\" \"n,n,n,n\")))]\n-  \"TARGET_SSE2\"\n+;; Modes handled by pinsr patterns.\n+(define_mode_iterator PINSR_MODE\n+  [(V16QI \"TARGET_SSE4_1\") V8HI\n+   (V4SI \"TARGET_SSE4_1\")\n+   (V2DI \"TARGET_SSE4_1 && TARGET_64BIT\")])\n+\n+(define_mode_attr sse2p4_1\n+  [(V16QI \"sse4_1\") (V8HI \"sse2\")\n+   (V4SI \"sse4_1\") (V2DI \"sse4_1\")])\n+\n+;; sse4_1_pinsrd must come before sse2_loadld since it is preferred.\n+(define_insn \"<sse2p4_1>_pinsr<ssemodesuffix>\"\n+  [(set (match_operand:PINSR_MODE 0 \"register_operand\" \"=x,x,x,x\")\n+\t(vec_merge:PINSR_MODE\n+\t  (vec_duplicate:PINSR_MODE\n+\t    (match_operand:<ssescalarmode> 2 \"nonimmediate_operand\" \"r,m,r,m\"))\n+\t  (match_operand:PINSR_MODE 1 \"register_operand\" \"0,0,x,x\")\n+\t  (match_operand:SI 3 \"const_int_operand\" \"\")))]\n+  \"TARGET_SSE2\n+   && ((unsigned) exact_log2 (INTVAL (operands[3]))\n+       < GET_MODE_NUNITS (<MODE>mode))\"\n {\n   operands[3] = GEN_INT (exact_log2 (INTVAL (operands[3])));\n \n   switch (which_alternative)\n     {\n     case 0:\n-      return \"pinsrw\\t{%3, %k2, %0|%0, %k2, %3}\";\n+      if (GET_MODE_SIZE (<ssescalarmode>mode) < GET_MODE_SIZE (SImode))\n+        return \"pinsr<ssemodesuffix>\\t{%3, %k2, %0|%0, %k2, %3}\";\n+      /* FALLTHRU */\n     case 1:\n-      return \"pinsrw\\t{%3, %2, %0|%0, %2, %3}\";\n+      return \"pinsr<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\";\n     case 2:\n-      return \"vpinsrw\\t{%3, %k2, %1, %0|%0, %1, %k2, %3}\";\n+      if (GET_MODE_SIZE (<ssescalarmode>mode) < GET_MODE_SIZE (SImode))\n+        return \"vpinsr<ssemodesuffix>\\t{%3, %k2, %1, %0|%0, %1, %k2, %3}\";\n+      /* FALLTHRU */\n     case 3:\n-      return \"vpinsrw\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n+      return \"vpinsr<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n     default:\n       gcc_unreachable ();\n     }\n }\n   [(set_attr \"isa\" \"noavx,noavx,avx,avx\")\n    (set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_data16\" \"1,1,*,*\")\n-   (set_attr \"prefix_extra\" \"*,*,1,1\")\n+   (set (attr \"prefix_rex\")\n+     (if_then_else\n+       (and (eq (symbol_ref \"TARGET_AVX\") (const_int 0))\n+\t    (eq (const_string \"<MODE>mode\") (const_string \"V2DImode\")))\n+       (const_string \"1\")\n+       (const_string \"*\")))\n+   (set (attr \"prefix_data16\")\n+     (if_then_else\n+       (and (eq (symbol_ref \"TARGET_AVX\") (const_int 0))\n+\t    (eq (const_string \"<MODE>mode\") (const_string \"V8HImode\")))\n+       (const_string \"1\")\n+       (const_string \"*\")))\n+   (set (attr \"prefix_extra\")\n+     (if_then_else\n+       (and (eq (symbol_ref \"TARGET_AVX\") (const_int 0))\n+\t    (eq (const_string \"<MODE>mode\") (const_string \"V8HImode\")))\n+       (const_string \"*\")\n+       (const_string \"1\")))\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"orig,orig,vex,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-;; It must come before sse2_loadld since it is preferred.\n-(define_insn \"sse4_1_pinsrd\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x\")\n-\t(vec_merge:V4SI\n-\t  (vec_duplicate:V4SI\n-\t    (match_operand:SI 2 \"nonimmediate_operand\" \"rm,rm\"))\n-\t  (match_operand:V4SI 1 \"register_operand\" \"0,x\")\n-\t  (match_operand:SI 3 \"const_pow2_1_to_8_operand\" \"n,n\")))]\n-  \"TARGET_SSE4_1\"\n-{\n-  operands[3] = GEN_INT (exact_log2 (INTVAL (operands[3])));\n-\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \"pinsrd\\t{%3, %2, %0|%0, %2, %3}\";\n-    case 1:\n-      return \"vpinsrd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-  [(set_attr \"isa\" \"noavx,avx\")\n-   (set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse4_1_pinsrq\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n-\t(vec_merge:V2DI\n-\t  (vec_duplicate:V2DI\n-\t    (match_operand:DI 2 \"nonimmediate_operand\" \"rm,rm\"))\n-\t  (match_operand:V2DI 1 \"register_operand\" \"0,x\")\n-\t  (match_operand:SI 3 \"const_pow2_1_to_2_operand\" \"n,n\")))]\n-  \"TARGET_SSE4_1 && TARGET_64BIT\"\n-{\n-  operands[3] = GEN_INT (exact_log2 (INTVAL (operands[3])));\n-\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \"pinsrq\\t{%3, %2, %0|%0, %2, %3}\";\n-    case 1:\n-      return \"vpinsrq\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-  [(set_attr \"isa\" \"noavx,avx\")\n-   (set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_rex\" \"1,*\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n (define_insn \"*sse4_1_pextrb_<mode>\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n \t(zero_extend:SWI48\n@@ -7885,8 +7826,9 @@\n \t(vec_merge:VF\n \t  (match_operand:VF 2 \"nonimmediate_operand\" \"xm,xm\")\n \t  (match_operand:VF 1 \"register_operand\" \"0,x\")\n-\t  (match_operand:SI 3 \"const_0_to_<blendbits>_operand\" \"n,n\")))]\n-  \"TARGET_SSE4_1\"\n+\t  (match_operand:SI 3 \"const_int_operand\" \"\")))]\n+  \"TARGET_SSE4_1\n+   && IN_RANGE (INTVAL (operands[3]), 0, (1 << GET_MODE_NUNITS (<MODE>mode))-1)\"\n   \"@\n    blend<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n    vblend<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\""}]}