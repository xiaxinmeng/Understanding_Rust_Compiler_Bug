{"sha": "8acf549a4490b892891a9e9ed7c96c93f707519f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFjZjU0OWE0NDkwYjg5Mjg5MWE5ZTllZDdjOTZjOTNmNzA3NTE5Zg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-09-11T14:49:23Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-09-11T14:49:23Z"}, "message": "[AArch64 Testsuite] Add execution test of vset(q?)_lane intrinsics.\n\n\t* gcc.target/aarch64/vset_lane_1.c: New test.\n\nFrom-SVN: r215177", "tree": {"sha": "01a26564b28d34bd605a8f36b9e27bdcdd24f0b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01a26564b28d34bd605a8f36b9e27bdcdd24f0b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8acf549a4490b892891a9e9ed7c96c93f707519f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8acf549a4490b892891a9e9ed7c96c93f707519f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8acf549a4490b892891a9e9ed7c96c93f707519f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8acf549a4490b892891a9e9ed7c96c93f707519f/comments", "author": null, "committer": null, "parents": [{"sha": "dd57b790a426368cce508d9584018e409b1cc3b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd57b790a426368cce508d9584018e409b1cc3b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd57b790a426368cce508d9584018e409b1cc3b6"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "60397bfbc16afaab9e585310c3c87c2f26589a97", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8acf549a4490b892891a9e9ed7c96c93f707519f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8acf549a4490b892891a9e9ed7c96c93f707519f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8acf549a4490b892891a9e9ed7c96c93f707519f", "patch": "@@ -1,3 +1,7 @@\n+2014-09-11  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gcc.target/aarch64/vset_lane_1.c: New test.\n+\n 2014-09-11  Bernd Schmidt  <bernds@codesourcery.com>\n \n         * gcc.dg/compat/struct-by-value-13_main.c (struct_by_value_13_x):"}, {"sha": "5fb11399f202df7bc9a67c3d8ffb78f71c87e5c6", "filename": "gcc/testsuite/gcc.target/aarch64/vset_lane_1.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8acf549a4490b892891a9e9ed7c96c93f707519f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvset_lane_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8acf549a4490b892891a9e9ed7c96c93f707519f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvset_lane_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvset_lane_1.c?ref=8acf549a4490b892891a9e9ed7c96c93f707519f", "patch": "@@ -0,0 +1,85 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+\n+extern void abort (void);\n+\n+#define VARIANTS(VARIANT)\t\t\t\\\n+VARIANT (uint8_t, , 8, uint8x8_t, _u8, 5)\t\\\n+VARIANT (uint16_t, , 4, uint16x4_t, _u16, 3)\t\\\n+VARIANT (uint32_t, , 2, uint32x2_t, _u32, 1)\t\\\n+VARIANT (uint64_t, , 1, uint64x1_t, _u64, 0)\t\\\n+VARIANT (int8_t, , 8, int8x8_t, _s8, 6)\t\t\\\n+VARIANT (int16_t, , 4, int16x4_t, _s16, 2)\t\\\n+VARIANT (int32_t, , 2, int32x2_t, _s32, 0)\t\\\n+VARIANT (int64_t, , 1, int64x1_t, _s64, 0)\t\\\n+VARIANT (poly8_t, , 8, poly8x8_t, _p8, 6)\t\\\n+VARIANT (poly16_t, , 4, poly16x4_t, _p16, 2)\t\\\n+VARIANT (float32_t, , 2, float32x2_t, _f32, 1)\t\\\n+VARIANT (float64_t, , 1, float64x1_t, _f64, 0)\t\\\n+VARIANT (uint8_t, q, 16, uint8x16_t, _u8, 11)\t\\\n+VARIANT (uint16_t, q, 8, uint16x8_t, _u16, 7)\t\\\n+VARIANT (uint32_t, q, 4, uint32x4_t, _u32, 2)\t\\\n+VARIANT (uint64_t, q, 2, uint64x2_t, _u64, 1)\t\\\n+VARIANT (int8_t, q, 16, int8x16_t, _s8, 13)\t\\\n+VARIANT (int16_t, q, 8, int16x8_t, _s16, 5)\t\\\n+VARIANT (int32_t, q, 4, int32x4_t, _s32, 3)\t\\\n+VARIANT (int64_t, q, 2, int64x2_t, _s64, 0)\t\\\n+VARIANT (poly8_t, q, 16, poly8x16_t, _p8, 14)\t\\\n+VARIANT (poly16_t, q, 8, poly16x8_t, _p16, 6)\t\\\n+VARIANT (float32_t, q, 4, float32x4_t, _f32, 2) \\\n+VARIANT (float64_t, q, 2, float64x2_t, _f64, 1)\n+\n+#define TESTMETH(BASETYPE, Q, NUM, TYPE, SUFFIX, INDEX)\t\\\n+int\t\t\t\t\t\t\t\\\n+test_vset_lane ##Q##SUFFIX (BASETYPE *data)\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  BASETYPE temp [NUM];\t\t\t\t\t\\\n+  TYPE vec = vld1##Q##SUFFIX (data);\t\t\t\\\n+  TYPE vec2;\t\t\t\t\t\t\\\n+  BASETYPE changed = data[INDEX] - INDEX;\t\t\\\n+  int check;\t\t\t\t\t\t\\\n+  vec = vset##Q##_lane##SUFFIX (changed, vec, INDEX);\t\\\n+  asm volatile (\"orr %0.16b, %1.16b, %1.16b\"\t\t\\\n+\t\t: \"=w\"(vec2) : \"w\" (vec) : );\t\t\\\n+  vst1##Q##SUFFIX (temp, vec2);\t\t\t\t\\\n+  for (check = 0; check < NUM; check++)\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      BASETYPE desired = data[check];\t\t\t\\\n+      if (check==INDEX) desired = changed;\t\t\\\n+      if (temp[check] != desired)\t\t\t\\\n+        return 1;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  return 0;\t\t\t\t\t\t\\\n+}\n+\n+VARIANTS (TESTMETH)\n+\n+#define CHECK(BASETYPE, Q, NUM, TYPE, SUFFIX, INDEX)\t\t\\\n+  if (test_vset_lane##Q##SUFFIX (BASETYPE ## _ ## data) != 0)\t\\\n+    abort ();\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint8_t uint8_t_data[16] =\n+      { 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47 };\n+  uint16_t uint16_t_data[8] = { 1, 22, 333, 4444, 55555, 6666, 777, 88 };\n+  uint32_t uint32_t_data[4] = { 65537, 11, 70000, 23 };\n+  uint64_t uint64_t_data[2] = { 0xdeadbeefcafebabeULL, 0x0123456789abcdefULL };\n+  int8_t int8_t_data[16] =\n+      { -1, -3, -5, -7, 9, -11, -13, 15, -17, -19, 21, -23, 25, 27, -29, -31 };\n+  int16_t int16_t_data[8] = { -17, 19, 3, -999, 44048, 505, 9999, 1000};\n+  int32_t int32_t_data[4] = { 123456789, -987654321, -135792468, 975318642 };\n+  int64_t int64_t_data[2] = {0xfedcba9876543210LL, 0xdeadbabecafebeefLL };\n+  poly8_t poly8_t_data[16] =\n+      { 0, 7, 13, 18, 22, 25, 27, 28, 29, 31, 34, 38, 43, 49, 56, 64 };\n+  poly16_t poly16_t_data[8] = { 11111, 2222, 333, 44, 5, 65432, 54321, 43210 };\n+  float32_t float32_t_data[4] = { 3.14159, 2.718, 1.414, 100.0 };\n+  float64_t float64_t_data[2] = { 1.01001000100001, 12345.6789 };\n+\n+  VARIANTS (CHECK);\n+\n+  return 0;\n+}"}]}