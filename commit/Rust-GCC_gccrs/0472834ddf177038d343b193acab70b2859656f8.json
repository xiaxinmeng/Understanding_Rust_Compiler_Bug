{"sha": "0472834ddf177038d343b193acab70b2859656f8", "node_id": "C_kwDOANBUbNoAKDA0NzI4MzRkZGYxNzcwMzhkMzQzYjE5M2FjYWI3MGIyODU5NjU2Zjg", "commit": {"author": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2022-05-03T22:12:24Z"}, "committer": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2022-05-03T22:12:24Z"}, "message": "Preserve inside_loop context when compiling match", "tree": {"sha": "06493fe060220f20270ec1a69dfe694e3f37199e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06493fe060220f20270ec1a69dfe694e3f37199e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0472834ddf177038d343b193acab70b2859656f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0472834ddf177038d343b193acab70b2859656f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0472834ddf177038d343b193acab70b2859656f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0472834ddf177038d343b193acab70b2859656f8/comments", "author": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca722fe423bdd8c7895a40aac0410b2646917805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca722fe423bdd8c7895a40aac0410b2646917805", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca722fe423bdd8c7895a40aac0410b2646917805"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "f1dff2cb0f29455b18bc96b30056ab1562d62758", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0472834ddf177038d343b193acab70b2859656f8/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0472834ddf177038d343b193acab70b2859656f8/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=0472834ddf177038d343b193acab70b2859656f8", "patch": "@@ -1027,7 +1027,7 @@ class TypeCheckExpr : public TypeCheckBase\n \n \t// check the kase type\n \tTyTy::BaseType *kase_block_ty\n-\t  = TypeCheckExpr::Resolve (kase.get_expr ().get (), false);\n+\t  = TypeCheckExpr::Resolve (kase.get_expr ().get (), inside_loop);\n \tkase_block_tys.push_back (kase_block_ty);\n       }\n "}, {"sha": "d3aab6bc0bfd8789faba63ef3c14cb3d1fa890e1", "filename": "gcc/testsuite/rust/execute/torture/match_loop1.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0472834ddf177038d343b193acab70b2859656f8/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_loop1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0472834ddf177038d343b193acab70b2859656f8/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_loop1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_loop1.rs?ref=0472834ddf177038d343b193acab70b2859656f8", "patch": "@@ -0,0 +1,51 @@\n+// { dg-output \"E::One\\nE::Two\\nbreak!\\n\" }\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+enum E {\n+    One,\n+    Two,\n+    Other\n+}\n+\n+fn foo () {\n+    let mut x = E::One;\n+\n+    loop {\n+        match x {\n+            E::One => {\n+                let a = \"E::One\\n\\0\";\n+                let b = a as *const str;\n+                let c = b as *const i8;\n+                printf (c);\n+\n+                x = E::Two;\n+            }\n+            E::Two => {\n+                let a = \"E::Two\\n\\0\";\n+                let b = a as *const str;\n+                let c = b as *const i8;\n+                printf (c);\n+\n+                x = E::Other;\n+            }\n+            _ => {\n+                let a = \"break!\\n\\0\";\n+                let b = a as *const str;\n+                let c = b as *const i8;\n+                printf (c);\n+\n+                break;\n+            }\n+        }\n+    }\n+}\n+\n+\n+fn main () -> i32 {\n+    foo ();\n+\n+    0\n+}"}]}