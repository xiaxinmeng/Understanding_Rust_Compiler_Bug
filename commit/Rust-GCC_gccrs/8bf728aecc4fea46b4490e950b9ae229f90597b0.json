{"sha": "8bf728aecc4fea46b4490e950b9ae229f90597b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJmNzI4YWVjYzRmZWE0NmI0NDkwZTk1MGI5YWUyMjlmOTA1OTdiMA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-06-01T13:13:18Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-06-11T09:58:20Z"}, "message": "Introduce -Wcoverage-invalid-line-number\n\n\tPR gcov-profile/100788\n\ngcc/ChangeLog:\n\n\t* common.opt: Add new option.\n\t* coverage.c (coverage_begin_function): Emit warning instead on\n\tthe internal compiler error.\n\t* doc/invoke.texi: Document the option.\n\t* toplev.c (process_options): Enable it by default.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/pr100788.c: New test.", "tree": {"sha": "9965a21f58d6bcaed177fb46f4880407f58bfd00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9965a21f58d6bcaed177fb46f4880407f58bfd00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bf728aecc4fea46b4490e950b9ae229f90597b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bf728aecc4fea46b4490e950b9ae229f90597b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bf728aecc4fea46b4490e950b9ae229f90597b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bf728aecc4fea46b4490e950b9ae229f90597b0/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36943c6bdd3d3b535b24872bbd802d91ef0c6299", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36943c6bdd3d3b535b24872bbd802d91ef0c6299", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36943c6bdd3d3b535b24872bbd802d91ef0c6299"}], "stats": {"total": 78, "additions": 61, "deletions": 17}, "files": [{"sha": "a1353e06bdc09d0bed8169155f6b1deca9eab73f", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf728aecc4fea46b4490e950b9ae229f90597b0/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf728aecc4fea46b4490e950b9ae229f90597b0/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=8bf728aecc4fea46b4490e950b9ae229f90597b0", "patch": "@@ -826,6 +826,10 @@ Wcoverage-mismatch\n Common Var(warn_coverage_mismatch) Init(1) Warning\n Warn in case profiles in -fprofile-use do not match.\n \n+Wcoverage-invalid-line-number\n+Common Var(warn_coverage_invalid_linenum) Init(1) Warning\n+Warn in case a function ends earlier than it begins due to an invalid linenum macros.\n+\n Wmissing-profile\n Common Var(warn_missing_profile) Init(1) Warning\n Warn in case profiles in -fprofile-use do not exist."}, {"sha": "dfc8108d5d835c7ef05b31b82f4fe044e01285bf", "filename": "gcc/coverage.c", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf728aecc4fea46b4490e950b9ae229f90597b0/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf728aecc4fea46b4490e950b9ae229f90597b0/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=8bf728aecc4fea46b4490e950b9ae229f90597b0", "patch": "@@ -622,18 +622,16 @@ coverage_compute_cfg_checksum (struct function *fn)\n int\n coverage_begin_function (unsigned lineno_checksum, unsigned cfg_checksum)\n {\n-  expanded_location xloc;\n-  unsigned long offset;\n-\n   /* We don't need to output .gcno file unless we're under -ftest-coverage\n      (e.g. -fprofile-arcs/generate/use don't need .gcno to work). */\n   if (no_coverage || !bbg_file_name)\n     return 0;\n \n-  xloc = expand_location (DECL_SOURCE_LOCATION (current_function_decl));\n+  expanded_location startloc\n+    = expand_location (DECL_SOURCE_LOCATION (current_function_decl));\n \n   /* Announce function */\n-  offset = gcov_write_tag (GCOV_TAG_FUNCTION);\n+  unsigned long offset = gcov_write_tag (GCOV_TAG_FUNCTION);\n   if (param_profile_func_internal_id)\n     gcov_write_unsigned (current_function_funcdef_no + 1);\n   else\n@@ -650,16 +648,27 @@ coverage_begin_function (unsigned lineno_checksum, unsigned cfg_checksum)\n   gcov_write_unsigned (DECL_ARTIFICIAL (current_function_decl)\n \t\t       && !DECL_FUNCTION_VERSIONED (current_function_decl)\n \t\t       && !DECL_LAMBDA_FUNCTION_P (current_function_decl));\n-  gcov_write_filename (xloc.file);\n-  gcov_write_unsigned (xloc.line);\n-  gcov_write_unsigned (xloc.column);\n+  gcov_write_filename (startloc.file);\n+  gcov_write_unsigned (startloc.line);\n+  gcov_write_unsigned (startloc.column);\n \n   expanded_location endloc = expand_location (cfun->function_end_locus);\n \n   /* Function can start in a single file and end in another one.  */\n-  int end_line = endloc.file == xloc.file ? endloc.line : xloc.line;\n-  int end_column = endloc.file == xloc.file ? endloc.column: xloc.column;\n-  gcc_assert (xloc.line <= end_line);\n+  int end_line\n+    = endloc.file == startloc.file ? endloc.line : startloc.line;\n+  int end_column\n+    = endloc.file == startloc.file ? endloc.column: startloc.column;\n+\n+  if (startloc.line > end_line)\n+    {\n+      warning_at (DECL_SOURCE_LOCATION (current_function_decl),\n+\t\t  OPT_Wcoverage_invalid_line_number,\n+\t\t  \"function starts on a higher line number than it ends\");\n+      end_line = startloc.line;\n+      end_column = startloc.column;\n+    }\n+\n   gcov_write_unsigned (end_line);\n   gcov_write_unsigned (end_column);\n   gcov_write_length (offset);"}, {"sha": "90a50ea48aad74174975196ba4a859abd61b0d24", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf728aecc4fea46b4490e950b9ae229f90597b0/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf728aecc4fea46b4490e950b9ae229f90597b0/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8bf728aecc4fea46b4490e950b9ae229f90597b0", "patch": "@@ -5794,6 +5794,17 @@ poorly optimized code and is useful only in the\n case of very minor changes such as bug fixes to an existing code-base.\n Completely disabling the warning is not recommended.\n \n+@item -Wno-coverage-invalid-line-number\n+@opindex Wno-coverage-invalid-line-number\n+@opindex Wcoverage-invalid-line-number\n+Warn in case a function ends earlier than it begins due\n+to an invalid linenum macros.  The warning is emitted only\n+with @option{--coverage} enabled.\n+ By default, this warning is enabled and is treated as an\n+error.  @option{-Wno-coverage-invalid-line-number} can be used to disable the\n+warning or @option{-Wno-error=coverage-invalid-line-number} can be used to\n+disable the error.\n+\n @item -Wno-cpp\n @r{(C, Objective-C, C++, Objective-C++ and Fortran only)}\n @opindex Wno-cpp"}, {"sha": "6f510ecf57ce3d1c77484eabf84cd7a02f432194", "filename": "gcc/testsuite/gcc.dg/pr100788.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf728aecc4fea46b4490e950b9ae229f90597b0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100788.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf728aecc4fea46b4490e950b9ae229f90597b0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100788.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100788.c?ref=8bf728aecc4fea46b4490e950b9ae229f90597b0", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"--coverage -Wno-error=coverage-invalid-line-number\" } */\n+\n+void\n+foo() // { dg-warning \"function starts on a higher line number than it ends\" }\n+{\n+#line 1\n+}\n+\n+int main()\n+{\n+  foo ();\n+}"}, {"sha": "55e7550151f204d9ff8e06f3a5307122a35de420", "filename": "gcc/toplev.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf728aecc4fea46b4490e950b9ae229f90597b0/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf728aecc4fea46b4490e950b9ae229f90597b0/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=8bf728aecc4fea46b4490e950b9ae229f90597b0", "patch": "@@ -1744,12 +1744,19 @@ process_options (void)\n \n   /* Enable -Werror=coverage-mismatch when -Werror and -Wno-error\n      have not been set.  */\n-  if (!global_options_set.x_warnings_are_errors\n-      && warn_coverage_mismatch\n-      && (global_dc->classify_diagnostic[OPT_Wcoverage_mismatch] ==\n-          DK_UNSPECIFIED))\n-    diagnostic_classify_diagnostic (global_dc, OPT_Wcoverage_mismatch,\n-                                    DK_ERROR, UNKNOWN_LOCATION);\n+  if (!global_options_set.x_warnings_are_errors)\n+    {\n+      if (warn_coverage_mismatch\n+\t  && (global_dc->classify_diagnostic[OPT_Wcoverage_mismatch] ==\n+\t      DK_UNSPECIFIED))\n+\tdiagnostic_classify_diagnostic (global_dc, OPT_Wcoverage_mismatch,\n+\t\t\t\t\tDK_ERROR, UNKNOWN_LOCATION);\n+      if (warn_coverage_invalid_linenum\n+\t  && (global_dc->classify_diagnostic[OPT_Wcoverage_invalid_line_number] ==\n+\t      DK_UNSPECIFIED))\n+\tdiagnostic_classify_diagnostic (global_dc, OPT_Wcoverage_invalid_line_number,\n+\t\t\t\t\tDK_ERROR, UNKNOWN_LOCATION);\n+    }\n \n   /* Save the current optimization options.  */\n   optimization_default_node"}]}