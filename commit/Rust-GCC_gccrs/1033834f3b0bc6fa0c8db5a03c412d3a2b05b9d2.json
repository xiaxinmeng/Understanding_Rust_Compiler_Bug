{"sha": "1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAzMzgzNGYzYjBiYzZmYTBjOGRiNWEwM2M0MTJkM2EyYjA1YjlkMg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2007-10-15T13:58:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-10-15T13:58:20Z"}, "message": "errout.ads: Comment clarification\n\n2007-10-15  Robert Dewar  <dewar@adacore.com>\n\n\t* errout.ads: Comment clarification\n\n\t* exp_ch4.adb (Expand_N_Allocator): Code cleanup.\n\t(Expand_N_Op_Eq): Improve handling of array equality with -gnatVa\n\n\t* lib.ads: Comment update\n\n\t* init.c: Minor reformatting.\n\n\t* sem_attr.adb: Minor formatting\n\n\t* osint-b.ads: Minor reformatting\n\n\t* sem_ch9.adb: Implement -gnatd.I switch\n\n\t* g-comlin.adb: (Start): Fix handling of empty command line.\n\n\t* gnatcmd.adb (GNATCmd): Do not put the -rules in the -cargs section,\n\teven when -rules follows the -cargs section.\n\nFrom-SVN: r129343", "tree": {"sha": "51acb2abb4ef8b5a72e09e35ec949add9fa416cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51acb2abb4ef8b5a72e09e35ec949add9fa416cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2/comments", "author": null, "committer": null, "parents": [{"sha": "569f538b9d55c4cb780cf03df9357eb61139ba5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/569f538b9d55c4cb780cf03df9357eb61139ba5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/569f538b9d55c4cb780cf03df9357eb61139ba5a"}], "stats": {"total": 171, "additions": 116, "deletions": 55}, "files": [{"sha": "f58181eb018efc2ff579d73f2ffaebbc7a4b05b8", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2", "patch": "@@ -670,6 +670,8 @@ package Errout is\n    --  is posted (with the same effect as Error_Msg_N (Msg, N) if and only\n    --  if Eflag is True and if the node N is within the main extended source\n    --  unit and comes from source. Typically this is a warning mode flag.\n+   --  This routine can only be called during semantic analysis. It may not\n+   --  be called during parsing.\n \n    procedure Change_Error_Text (Error_Id : Error_Msg_Id; New_Msg : String);\n    --  The error message text of the message identified by Id is replaced by"}, {"sha": "c1b88bef948e636cc135ec466529ff068250828e", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 22, "deletions": 34, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2", "patch": "@@ -3189,26 +3189,20 @@ package body Exp_Ch4 is\n             Nod  := N;\n             Temp := Make_Defining_Identifier (Loc, New_Internal_Name ('P'));\n \n-            --  Construct argument list for the initialization routine call.\n-            --  The CPP constructor needs the address directly\n+            --  Construct argument list for the initialization routine call\n \n-            if Is_CPP_Class (T) then\n-               Arg1 := New_Reference_To (Temp, Loc);\n-               Temp_Type := T;\n+            Arg1 :=\n+              Make_Explicit_Dereference (Loc,\n+                Prefix => New_Reference_To (Temp, Loc));\n+            Set_Assignment_OK (Arg1);\n+            Temp_Type := PtrT;\n \n-            else\n-               Arg1 := Make_Explicit_Dereference (Loc,\n-                         Prefix => New_Reference_To (Temp, Loc));\n-               Set_Assignment_OK (Arg1);\n-               Temp_Type := PtrT;\n-\n-               --  The initialization procedure expects a specific type. if\n-               --  the context is access to class wide, indicate that the\n-               --  object being allocated has the right specific type.\n+            --  The initialization procedure expects a specific type. if the\n+            --  context is access to class wide, indicate that the object being\n+            --  allocated has the right specific type.\n \n-               if Is_Class_Wide_Type (Dtyp) then\n-                  Arg1 := Unchecked_Convert_To (T, Arg1);\n-               end if;\n+            if Is_Class_Wide_Type (Dtyp) then\n+               Arg1 := Unchecked_Convert_To (T, Arg1);\n             end if;\n \n             --  If designated type is a concurrent type or if it is private\n@@ -3405,11 +3399,6 @@ package body Exp_Ch4 is\n                 Expression          => Nod);\n \n             Set_Assignment_OK (Temp_Decl);\n-\n-            if Is_CPP_Class (T) then\n-               Set_Aliased_Present (Temp_Decl);\n-            end if;\n-\n             Insert_Action (N, Temp_Decl, Suppress => All_Checks);\n \n             --  If the designated type is a task type or contains tasks,\n@@ -3480,15 +3469,7 @@ package body Exp_Ch4 is\n                end if;\n             end if;\n \n-            if Is_CPP_Class (T) then\n-               Rewrite (N,\n-                 Make_Attribute_Reference (Loc,\n-                   Prefix => New_Reference_To (Temp, Loc),\n-                   Attribute_Name => Name_Unchecked_Access));\n-            else\n-               Rewrite (N, New_Reference_To (Temp, Loc));\n-            end if;\n-\n+            Rewrite (N, New_Reference_To (Temp, Loc));\n             Analyze_And_Resolve (N, PtrT);\n          end if;\n       end;\n@@ -5125,10 +5106,13 @@ package body Exp_Ch4 is\n \n       elsif Is_Array_Type (Typl) then\n \n-         --  If we are doing full validity checking, then expand out array\n-         --  comparisons to make sure that we check the array elements.\n+         --  If we are doing full validity checking, and it is possible for the\n+         --  array elements to be invalid then expand out array comparisons to\n+         --  make sure that we check the array elements.\n \n-         if Validity_Check_Operands then\n+         if Validity_Check_Operands\n+           and then not Is_Known_Valid (Component_Type (Typl))\n+         then\n             declare\n                Save_Force_Validity_Checks : constant Boolean :=\n                                               Force_Validity_Checks;\n@@ -5828,6 +5812,8 @@ package body Exp_Ch4 is\n       Rhi : Uint;\n       ROK : Boolean;\n \n+      pragma Warnings (Off, Lhi);\n+\n    begin\n       Binary_Op_Validity_Checks (N);\n \n@@ -6416,6 +6402,8 @@ package body Exp_Ch4 is\n       Rhi : Uint;\n       ROK : Boolean;\n \n+      pragma Warnings (Off, Lhi);\n+\n    begin\n       Binary_Op_Validity_Checks (N);\n "}, {"sha": "95b1fbe23676a213952b2e486616d2b30761448c", "filename": "gcc/ada/g-comlin.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2/gcc%2Fada%2Fg-comlin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2/gcc%2Fada%2Fg-comlin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-comlin.adb?ref=1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2", "patch": "@@ -1606,6 +1606,11 @@ package body GNAT.Command_Line is\n       Expanded : Boolean)\n    is\n    begin\n+      if Cmd.Expanded = null then\n+         Iter.List := null;\n+         return;\n+      end if;\n+\n       --  Coalesce the switches as much as possible\n \n       if not Expanded"}, {"sha": "debf0c32d5c1435d8be5c0b78dbf3e286c7fb2d8", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 75, "deletions": 13, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2", "patch": "@@ -711,6 +711,7 @@ procedure GNATCmd is\n \n    procedure Delete_Temp_Config_Files is\n       Success : Boolean;\n+      pragma Warnings (Off, Success);\n \n    begin\n       if not Keep_Temporary_Files then\n@@ -2017,20 +2018,81 @@ begin\n \n             for J in 1 .. First_Switches.Last loop\n                if First_Switches.Table (J).all = \"-cargs\" then\n-                  for K in J + 1 .. First_Switches.Last loop\n-                     Add_To_Carg_Switches (First_Switches.Table (K));\n-                  end loop;\n-                  First_Switches.Set_Last (J - 1);\n+                  declare\n+                     K    : Positive;\n+                     Last : Natural;\n+\n+                  begin\n+                     --  Move the switches that are before -rules when the\n+                     --  command is CHECK.\n+\n+                     K := J + 1;\n+                     while K <= First_Switches.Last\n+                       and then\n+                        (The_Command /= Check\n+                           or else First_Switches.Table (K).all /= \"-rules\")\n+                     loop\n+                        Add_To_Carg_Switches (First_Switches.Table (K));\n+                        K := K + 1;\n+                     end loop;\n+\n+                     if K > First_Switches.Last then\n+                        First_Switches.Set_Last (J - 1);\n+\n+                     else\n+                        Last := J - 1;\n+                        while K <= First_Switches.Last loop\n+                           Last := Last + 1;\n+                           First_Switches.Table (Last) :=\n+                             First_Switches.Table (K);\n+                           K := K + 1;\n+                        end loop;\n+\n+                        First_Switches.Set_Last (Last);\n+                     end if;\n+                  end;\n+\n                   exit;\n                end if;\n             end loop;\n \n             for J in 1 .. Last_Switches.Last loop\n                if Last_Switches.Table (J).all = \"-cargs\" then\n-                  for K in J + 1 .. Last_Switches.Last loop\n-                     Add_To_Carg_Switches (Last_Switches.Table (K));\n-                  end loop;\n-                  Last_Switches.Set_Last (J - 1);\n+                  declare\n+                     K    : Positive;\n+                     Last : Natural;\n+\n+                  begin\n+                     --  Move the switches that are before -rules when the\n+                     --  command is CHECK.\n+\n+                     K := J + 1;\n+                     while K <= Last_Switches.Last\n+                       and then\n+                        (The_Command /= Check\n+                         or else\n+                         Last_Switches.Table (K).all /= \"-rules\")\n+                     loop\n+                        Add_To_Carg_Switches (Last_Switches.Table (K));\n+                        K := K + 1;\n+                     end loop;\n+\n+                     if K > Last_Switches.Last then\n+                        Last_Switches.Set_Last (J - 1);\n+\n+                     else\n+                        Last := J - 1;\n+                        while K <= Last_Switches.Last loop\n+                           Last := Last + 1;\n+                           Last_Switches.Table (Last) :=\n+                             Last_Switches.Table (K);\n+                           K := K + 1;\n+                        end loop;\n+\n+                        Last_Switches.Set_Last (Last);\n+                     end if;\n+                  end;\n+\n                   exit;\n                end if;\n             end loop;\n@@ -2085,8 +2147,8 @@ begin\n \n          elsif The_Command = Stub then\n             declare\n-               Data : constant Prj.Project_Data :=\n-                        Project_Tree.Projects.Table (Project);\n+               Data       : constant Prj.Project_Data :=\n+                              Project_Tree.Projects.Table (Project);\n                File_Index : Integer := 0;\n                Dir_Index  : Integer := 0;\n                Last       : constant Integer := Last_Switches.Last;\n@@ -2122,7 +2184,7 @@ begin\n \n                         if Spec'Length > Name_Len\n                           and then Spec (Last - Name_Len + 1 .. Last) =\n-                          Name_Buffer (1 .. Name_Len)\n+                                                  Name_Buffer (1 .. Name_Len)\n                         then\n                            Last := Last - Name_Len;\n                            Get_Name_String\n@@ -2147,7 +2209,7 @@ begin\n                if File_Index /= 0 then\n                   for Index in File_Index + 1 .. Last loop\n                      if Last_Switches.Table (Index)\n-                       (Last_Switches.Table (Index)'First) /= '-'\n+                         (Last_Switches.Table (Index)'First) /= '-'\n                      then\n                         Dir_Index := Index;\n                         exit;\n@@ -2186,7 +2248,7 @@ begin\n \n          if The_Command = Check then\n             declare\n-               New_Last          : Natural;\n+               New_Last : Natural;\n                --  Set to rank of options preceding \"-rules\"\n \n                In_Rules_Switches : Boolean;"}, {"sha": "3fa59772645661d101b9e388e4692c3c56ff3269", "filename": "gcc/ada/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2", "patch": "@@ -1510,7 +1510,7 @@ __gnat_handle_vms_condition (int *sigargs, void *mechargs)\n \tbreak;\n       }\n \n- Raise_From_Signal_Handler (exception, msg);\n+  Raise_From_Signal_Handler (exception, msg);\n }\n \n long"}, {"sha": "bff54f09ec1f444a73cc4cd13263658a47fa5b78", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2", "patch": "@@ -509,10 +509,11 @@ package Lib is\n    --  Same function as above but argument is a source pointer\n \n    function Earlier_In_Extended_Unit (S1, S2 : Source_Ptr) return Boolean;\n-   --  Given two Sloc values  for which In_Same_Extended_Unit is true,\n-   --  determine if S1 appears before S2. Returns True if S1 appears before\n-   --  S2, and False otherwise. The result is undefined if S1 and S2 are\n-   --  not in the same extended unit.\n+   --  Given two Sloc values for which In_Same_Extended_Unit is true, determine\n+   --  if S1 appears before S2. Returns True if S1 appears before S2, and False\n+   --  otherwise. The result is undefined if S1 and S2 are not in the same\n+   --  extended unit. Note: this routine will not give reliable results if\n+   --  called after Sprint has been called with -gnatD set.\n \n    function Compilation_Switches_Last return Nat;\n    --  Return the count of stored compilation switches"}, {"sha": "2f9460c624a3513319730b1ec8d200a318c561be", "filename": "gcc/ada/osint-b.ads", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2/gcc%2Fada%2Fosint-b.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2/gcc%2Fada%2Fosint-b.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint-b.ads?ref=1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2", "patch": "@@ -79,7 +79,6 @@ package Osint.B is\n    --  buffers etc from writes by Write_Binder_Info.\n \n    procedure Set_Current_File_Name_Index (To : Int);\n-   --  Set the value of Current_File_Name_Index (in the private part of Osint)\n-   --  to To.\n+   --  Set value of Current_File_Name_Index (in private part of Osint) to To\n \n end Osint.B;"}, {"sha": "6c3e3dcc3ee45f53da705884840e19020415fc1a", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2", "patch": "@@ -7905,6 +7905,10 @@ package body Sem_Attr is\n             Process_Partition_Id (N);\n             return;\n \n+         ------------------\n+         -- Pool_Address --\n+         ------------------\n+\n          when Attribute_Pool_Address =>\n             Resolve (P);\n "}, {"sha": "b61e58af5749b600f84fcb7b1a3d71602c7c35c6", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=1033834f3b0bc6fa0c8db5a03c412d3a2b05b9d2", "patch": "@@ -1399,7 +1399,7 @@ package body Sem_Ch9 is\n          Generate_Reference (Entry_Id, Entry_Name);\n \n          if Present (First_Formal (Entry_Id)) then\n-            if VM_Target = JVM_Target then\n+            if VM_Target = JVM_Target and then not Inspector_Mode then\n                Error_Msg_N\n                  (\"arguments unsupported in requeue statement\",\n                   First_Formal (Entry_Id));"}]}