{"sha": "db9bbdeca441e21f50b12cbfc2ff34992242b4f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI5YmJkZWNhNDQxZTIxZjUwYjEyY2JmYzJmZjM0OTkyMjQyYjRmMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-06-19T07:17:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-06-19T07:17:55Z"}, "message": "re PR ipa/81112 (internal compiler error: tree check: expected integer_cst, have range_expr in get_len, at tree.h:5321)\n\n2017-06-19  Richard Biener  <rguenther@suse.de>\n\n\tPR ipa/81112\n\t* ipa-prop.c (find_constructor_constant_at_offset): Handle\n\tRANGE_EXPR conservatively.\n\n\t* g++.dg/torture/pr81112.C: New testcase.\n\nFrom-SVN: r249357", "tree": {"sha": "2dd74aa5ee4c48fb661ebf5776878a3a0c3167a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dd74aa5ee4c48fb661ebf5776878a3a0c3167a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db9bbdeca441e21f50b12cbfc2ff34992242b4f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db9bbdeca441e21f50b12cbfc2ff34992242b4f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db9bbdeca441e21f50b12cbfc2ff34992242b4f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db9bbdeca441e21f50b12cbfc2ff34992242b4f3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "245ad722ca8f9605165f90f9dd3f8e6137e68b38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/245ad722ca8f9605165f90f9dd3f8e6137e68b38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/245ad722ca8f9605165f90f9dd3f8e6137e68b38"}], "stats": {"total": 85, "additions": 84, "deletions": 1}, "files": [{"sha": "60d315500ab36b503a83500cba5645bc3c3a0561", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db9bbdeca441e21f50b12cbfc2ff34992242b4f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db9bbdeca441e21f50b12cbfc2ff34992242b4f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db9bbdeca441e21f50b12cbfc2ff34992242b4f3", "patch": "@@ -1,3 +1,9 @@\n+2017-06-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR ipa/81112\n+\t* ipa-prop.c (find_constructor_constant_at_offset): Handle\n+\tRANGE_EXPR conservatively.\n+\n 2017-06-16  Carl Love  <cel@us.ibm.com>\n \n \t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add"}, {"sha": "51f622185011400b5121565c4579162a31bdfb6c", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db9bbdeca441e21f50b12cbfc2ff34992242b4f3/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db9bbdeca441e21f50b12cbfc2ff34992242b4f3/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=db9bbdeca441e21f50b12cbfc2ff34992242b4f3", "patch": "@@ -3013,7 +3013,10 @@ find_constructor_constant_at_offset (tree constructor, HOST_WIDE_INT req_offset)\n \n          if (index)\n            {\n-             off = wi::to_offset (index);\n+\t     if (TREE_CODE (index) == RANGE_EXPR)\n+\t       off = wi::to_offset (TREE_OPERAND (index, 0));\n+\t     else\n+\t       off = wi::to_offset (index);\n              if (TYPE_DOMAIN (type) && TYPE_MIN_VALUE (TYPE_DOMAIN (type)))\n                {\n                  tree low_bound = TYPE_MIN_VALUE (TYPE_DOMAIN (type));\n@@ -3022,6 +3025,8 @@ find_constructor_constant_at_offset (tree constructor, HOST_WIDE_INT req_offset)\n                                  TYPE_PRECISION (TREE_TYPE (index)));\n                }\n              off *= wi::to_offset (unit_size);\n+\t     /* ???  Handle more than just the first index of a\n+\t        RANGE_EXPR.  */\n            }\n          else\n            off = wi::to_offset (unit_size) * ix;"}, {"sha": "3d77462a0d60cbcdc63e396eefed0a80202f448f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db9bbdeca441e21f50b12cbfc2ff34992242b4f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db9bbdeca441e21f50b12cbfc2ff34992242b4f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=db9bbdeca441e21f50b12cbfc2ff34992242b4f3", "patch": "@@ -1,3 +1,8 @@\n+2017-06-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR ipa/81112\n+\t* g++.dg/torture/pr81112.C: New testcase.\n+\n 2017-06-18  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* gcc.dg/lto/pr69866_0.c: This test needs alias."}, {"sha": "10e0ebe47439f1980f8a699860f14f2d5886bdb3", "filename": "gcc/testsuite/g++.dg/torture/pr81112.C", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db9bbdeca441e21f50b12cbfc2ff34992242b4f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr81112.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db9bbdeca441e21f50b12cbfc2ff34992242b4f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr81112.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr81112.C?ref=db9bbdeca441e21f50b12cbfc2ff34992242b4f3", "patch": "@@ -0,0 +1,67 @@\n+// { dg-do compile }\n+\n+class AssertionResult {\n+    bool success_;\n+};\n+\n+AssertionResult AssertionSuccess();\n+\n+template <typename T1>\n+AssertionResult EXPECT_EQ(const T1& expected, const T1& actual) {\n+    if (expected == actual) {\n+\treturn AssertionSuccess();\n+    }\n+    return AssertionSuccess();\n+}\n+\n+struct uuid\n+{\n+  unsigned char data[16];\n+};\n+\n+bool operator== (uuid const& lhs, uuid const& rhs);\n+\n+typedef long long __m128i __attribute__ ((__vector_size__ (16), __may_alias__));\n+typedef int __v4si __attribute__ ((__vector_size__ (16)));\n+typedef char __v16qi __attribute__ ((__vector_size__ (16)));\n+typedef long long __m128i_u __attribute__ ((__vector_size__ (16), __may_alias__, __aligned__ (1)));\n+\n+int foo (__v16qi);\n+\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+     _mm_loadu_si128 (__m128i_u const *__P)\n+{\n+    return *__P;\n+}\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+     _mm_cmpeq_epi32 (__m128i __A, __m128i __B)\n+{\n+    return (__m128i) ((__v4si)__A == (__v4si)__B);\n+}\n+extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+     _mm_movemask_epi8 (__m128i __A)\n+{\n+    return foo ((__v16qi)__A);\n+}\n+\n+\n+__m128i load_unaligned_si128(const unsigned char* p)\n+{\n+  return _mm_loadu_si128(reinterpret_cast< const __m128i* >(p));\n+}\n+\n+inline bool operator== (uuid const& lhs, uuid const& rhs)\n+{\n+  __m128i mm_left = load_unaligned_si128(lhs.data);\n+  __m128i mm_right = load_unaligned_si128(rhs.data);\n+\n+  __m128i mm_cmp = _mm_cmpeq_epi32(mm_left, mm_right);\n+\n+  return _mm_movemask_epi8(mm_cmp) == 0xFFFF;\n+}\n+\n+void crash_gcc7()\n+{\n+  static const uuid u = uuid();\n+  EXPECT_EQ(u, u);\n+}"}]}