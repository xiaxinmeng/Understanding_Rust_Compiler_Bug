{"sha": "67732fbced89c42dabea4a3bc160da80d0db046a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc3MzJmYmNlZDg5YzQyZGFiZWE0YTNiYzE2MGRhODBkMGRiMDQ2YQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2019-11-07T03:06:20Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2019-11-07T03:06:20Z"}, "message": "re PR libfortran/90374 (Fortran 2018: Support d0.d, e0.d, es0.d, en0.d, g0.d and ew.d e0 edit descriptors for output)\n\n2019-11-06  Jerry DeLisle  <jvdelisle@gcc.ngu.org>\n\n\tPR fortran/90374\n\t* io.c (check_format): Allow zero width for D, E, EN, and ES\n\tspecifiers as default and when -std=F2018 is given. Retain\n\texisting errors when using the -fdec family of flags.\n\n\t* libgfortran/io/format.c (parse_format_list): Relax format checking for\n\tzero width as default and when -std=f2018.\n\tio/format.h (format_token): Move definition to io.h.\n\tio/io.h (format_token): Add definition here to allow access to\n\tthis definition at higher levels. Rename the declaration of\n\twrite_real_g0 to write_real_w0 and add a new format_token\n\targument, allowing higher level functions to pass in the\n\ttoken for handling of g0 vs the other zero width specifiers.\n\tio/transfer.c (formatted_transfer_scalar_write): Add checks for\n\tzero width and call write_real_w0 to handle it.\n\tio/write.c (write_real_g0): Remove.\n\t(write_real_w0): Add new, same as previous write_real_g0 except\n\tcheck format token to handle the g0 case.\n\n\t* gfortran.dg/fmt_error_10.f: Modify for new constraints.\n\t* gfortran.dg/fmt_error_7.f: Add dg-options \"-std=f95\".\n\t* gfortran.dg/fmt_error_9.f: Modify for new constraints.\n\t* gfortran.dg/fmt_zero_width.f90: New test.\n\nFrom-SVN: r277905", "tree": {"sha": "feabf2ec8e1c3d38e1b267137d531abd42748a24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/feabf2ec8e1c3d38e1b267137d531abd42748a24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67732fbced89c42dabea4a3bc160da80d0db046a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67732fbced89c42dabea4a3bc160da80d0db046a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67732fbced89c42dabea4a3bc160da80d0db046a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67732fbced89c42dabea4a3bc160da80d0db046a/comments", "author": null, "committer": null, "parents": [{"sha": "ce6c0a20b5875c18a8416d60950febea76a4b9d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce6c0a20b5875c18a8416d60950febea76a4b9d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce6c0a20b5875c18a8416d60950febea76a4b9d3"}], "stats": {"total": 200, "additions": 152, "deletions": 48}, "files": [{"sha": "5023949d528a6cd2a9cc88c7642500cebb69521b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67732fbced89c42dabea4a3bc160da80d0db046a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67732fbced89c42dabea4a3bc160da80d0db046a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=67732fbced89c42dabea4a3bc160da80d0db046a", "patch": "@@ -1,3 +1,10 @@\n+2019-11-06  Jerry DeLisle  <jvdelisle@gcc.ngu.org>\n+\n+\tPR fortran/90374\n+\t* io.c (check_format): Allow zero width for D, E, EN, and ES\n+\tspecifiers as default and when -std=F2018 is given. Retain\n+\texisting errors when using the -fdec family of flags.\n+\t\n 2019-11-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/92113"}, {"sha": "57a3fdd5152733d90b10d01501400efb1ad0032b", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67732fbced89c42dabea4a3bc160da80d0db046a/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67732fbced89c42dabea4a3bc160da80d0db046a/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=67732fbced89c42dabea4a3bc160da80d0db046a", "patch": "@@ -922,19 +922,38 @@ check_format (bool is_input)\n \n       if (u != FMT_POSINT)\n \t{\n+\t  if (flag_dec)\n+\t    {\n+\t      if (flag_dec_format_defaults)\n+\t\t{\n+\t\t  /* Assume a default width based on the variable size.  */\n+\t\t  saved_token = u;\n+\t\t  break;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  gfc_error (\"Positive width required in format \"\n+\t\t\t     \"specifier %s at %L\", token_to_string (t),\n+\t\t\t     &format_locus);\n+\t\t  saved_token = u;\n+\t\t  goto fail;\n+\t\t}\n+\t    }\n+\n+\t  format_locus.nextc += format_string_pos;\n+\t  if (!gfc_notify_std (GFC_STD_F2018,\n+\t\t\t       \"positive width required at %L\",\n+\t\t\t       &format_locus))\n+\t    {\n+\t      saved_token = u;\n+\t      goto fail;\n+\t    }\n \t  if (flag_dec_format_defaults)\n \t    {\n \t      /* Assume a default width based on the variable size.  */\n \t      saved_token = u;\n \t      break;\n \t    }\n-\n-\t  format_locus.nextc += format_string_pos;\n-\t  gfc_error (\"Positive width required in format \"\n-\t\t\t \"specifier %s at %L\", token_to_string (t),\n-\t\t\t &format_locus);\n-\t  saved_token = u;\n-\t  goto fail;\n \t}\n \n       u = format_lex ();"}, {"sha": "6bb85a318039450deb7aa0c75596c1071ccda393", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67732fbced89c42dabea4a3bc160da80d0db046a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67732fbced89c42dabea4a3bc160da80d0db046a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=67732fbced89c42dabea4a3bc160da80d0db046a", "patch": "@@ -1,3 +1,11 @@\n+2019-11-06  Jerry DeLisle  <jvdelisle@gcc.ngu.org>\n+\n+\tPR fortran/90374\n+\t* gfortran.dg/fmt_error_10.f: Modify for new constraints.\n+\t* gfortran.dg/fmt_error_7.f: Add dg-options \"-std=f95\".\n+\t* gfortran.dg/fmt_error_9.f: Modify for new constraints.\n+\t* gfortran.dg/fmt_zero_width.f90: New test.\n+\n 2019-11-07  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/asm-wide-1.c, gcc.dg/diagnostic-token-ranges.c,"}, {"sha": "6e1a5f60beaafafb620bf79c1c04cfdf4a6ab8c1", "filename": "gcc/testsuite/gfortran.dg/fmt_error_10.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67732fbced89c42dabea4a3bc160da80d0db046a/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_error_10.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67732fbced89c42dabea4a3bc160da80d0db046a/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_error_10.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_error_10.f?ref=67732fbced89c42dabea4a3bc160da80d0db046a", "patch": "@@ -18,9 +18,9 @@\n \n       str = '(1pd0.15)'\n       write (line,str,iostat=istat, iomsg=msg) 1.0d0\n-      if (istat.ne.5006 .or. msg(1:15).ne.\"Positive width \") STOP 5\n+      if (line.ne.\"1.000000000000000\") STOP 5\n       read (*,str,iostat=istat, iomsg=msg) x\n-      if (istat.ne.5006 .or. msg(1:15).ne.\"Positive width \") STOP 6\n+      if (istat.ne.5006 .or. msg(1:10).ne.\"Zero width\") STOP 6\n       if (x.ne.555.25) STOP 7\n       \n       write (line,'(1pd24.15e11.3)') 1.0d0, 1.234"}, {"sha": "3937c8fe7507f608a1a229ea647feba111bc118b", "filename": "gcc/testsuite/gfortran.dg/fmt_error_7.f", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67732fbced89c42dabea4a3bc160da80d0db046a/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_error_7.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67732fbced89c42dabea4a3bc160da80d0db046a/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_error_7.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_error_7.f?ref=67732fbced89c42dabea4a3bc160da80d0db046a", "patch": "@@ -1,7 +1,9 @@\n ! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n+\n ! PR37446 Diagnostic of edit descriptors, esp. EN\n       character(40) :: fmt_string\n       write(*, '(1P,2E12.4)') 1.0\n-      write(*,'(EN)') 5.0 ! { dg-error \"Positive width required\" }\n+      write(*,'(EN)') 5.0 ! { dg-error \"positive width required\" }\n       write(*,'(\"abcdefg\",EN6,\"hjjklmnop\")') 5.0 ! { dg-error \"Period required\" }\n       end"}, {"sha": "40c73599ac85eff1e7e9bd578caa4d3ccb4c0f13", "filename": "gcc/testsuite/gfortran.dg/fmt_error_9.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67732fbced89c42dabea4a3bc160da80d0db046a/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_error_9.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67732fbced89c42dabea4a3bc160da80d0db046a/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_error_9.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_error_9.f?ref=67732fbced89c42dabea4a3bc160da80d0db046a", "patch": "@@ -16,7 +16,7 @@\n       write (line,str,iostat=istat, iomsg=msg) 1.0d0\n       if (istat.ne.0) STOP 3\n       read (*,str,iostat=istat, iomsg=msg) x\n-      if (istat.ne.5006 .or. msg(1:15).ne.\"Positive width \") STOP 4\n+      if (istat.ne.5006 .or. msg(1:10).ne.\"Zero width\") STOP 4\n       if (x.ne.555.25) STOP 5\n       \n       write (line,'(1pd24.15e11.3)') 1.0d0, 1.234"}, {"sha": "093c0a44c348c97893f709d0fbb13bf09cc36bde", "filename": "gcc/testsuite/gfortran.dg/fmt_zero_width.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67732fbced89c42dabea4a3bc160da80d0db046a/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_zero_width.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67732fbced89c42dabea4a3bc160da80d0db046a/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_zero_width.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_zero_width.f90?ref=67732fbced89c42dabea4a3bc160da80d0db046a", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do run }\n+! PR90374 \"5.5 d0.d, e0.d, es0.d, en0.d, g0.d and ew.d edit descriptors\n+program pr90374\n+  real(4) :: rn\n+  character(32) :: afmt, aresult\n+  real(8) :: one = 1.0D0, zero = 0.0D0, nan, pinf, minf\n+\n+  nan = zero/zero\n+  rn = 0.00314_4\n+  afmt = \"(D0.3)\"\n+  write (aresult,fmt=afmt) rn\n+  if (aresult /= \"0.314D-02\") stop 12\n+  afmt = \"(E0.10)\"\n+  write (aresult,fmt=afmt) rn\n+  if (aresult /= \"0.3139999928E-02\") stop 15\n+  afmt = \"(ES0.10)\"\n+  write (aresult,fmt=afmt) rn\n+  if (aresult /= \"3.1399999280E-03\") stop 18\n+  afmt = \"(EN0.10)\"\n+  write (aresult,fmt=afmt) rn\n+  if (aresult /= \"3.1399999280E-03\") stop 21\n+  afmt = \"(G0.10)\"\n+  write (aresult,fmt=afmt) rn\n+  if (aresult /= \"0.3139999928E-02\") stop 24\n+  write (aresult,fmt=\"(D0.3)\") rn\n+  if (aresult /= \"0.314D-02\") stop 26\n+  write (aresult,fmt=\"(E0.10)\") rn\n+  if (aresult /= \"0.3139999928E-02\") stop 28\n+  write (aresult,fmt=\"(ES0.10)\") rn\n+  if (aresult /= \"3.1399999280E-03\") stop 30\n+  write (aresult,fmt=\"(EN0.10)\") rn\n+  if (aresult /= \"3.1399999280E-03\") stop 32\n+  write (aresult,fmt=\"(G0.10)\") rn\n+  if (aresult /= \"0.3139999928E-02\") stop 34\n+\n+end"}, {"sha": "0684c35b9b3ca3a937e76f518c8f6730f3cc3418", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67732fbced89c42dabea4a3bc160da80d0db046a/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67732fbced89c42dabea4a3bc160da80d0db046a/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=67732fbced89c42dabea4a3bc160da80d0db046a", "patch": "@@ -1,3 +1,20 @@\n+2019-11-06  Jerry DeLisle  <jvdelisle@gcc.ngu.org>\n+\n+\tPR fortran/90374\n+\tio/format.c (parse_format_list): Relax format checking for\n+\tzero width as default and when -std=f2018.\n+\tio/format.h (format_token): Move definition to io.h.\n+\tio/io.h (format_token): Add definition here to allow access to\n+\tthis definition at higher levels. Rename the declaration of\n+\twrite_real_g0 to write_real_w0 and add a new format_token\n+\targument, allowing higher level functions to pass in the\n+\ttoken for handling of g0 vs the other zero width specifiers.\n+\tio/transfer.c (formatted_transfer_scalar_write): Add checks for\n+\tzero width and call write_real_w0 to handle it.\n+\tio/write.c (write_real_g0): Remove.\n+\t(write_real_w0): Add new, same as previous write_real_g0 except\n+\tcheck format token to handle the g0 case.\n+\n 2019-10-31  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/92284."}, {"sha": "b33620815d5392174dcd840b8ce0159672bb1cc2", "filename": "libgfortran/io/format.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67732fbced89c42dabea4a3bc160da80d0db046a/libgfortran%2Fio%2Fformat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67732fbced89c42dabea4a3bc160da80d0db046a/libgfortran%2Fio%2Fformat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fformat.c?ref=67732fbced89c42dabea4a3bc160da80d0db046a", "patch": "@@ -925,7 +925,7 @@ parse_format_list (st_parameter_dt *dtp, bool *seen_dd)\n       tail->repeat = repeat;\n \n       u = format_lex (fmt);\n-      if (t == FMT_G && u == FMT_ZERO)\n+      if (u == FMT_ZERO)\n \t{\n \t  *seen_dd = true;\n \t  if (notification_std (GFC_STD_F2008) == NOTIFICATION_ERROR\n@@ -944,10 +944,8 @@ parse_format_list (st_parameter_dt *dtp, bool *seen_dd)\n \n \t  u = format_lex (fmt);\n \t  if (u != FMT_POSINT)\n-\t    {\n-\t      fmt->error = posint_required;\n-\t      goto finished;\n-\t    }\n+\t    notify_std (&dtp->common, GFC_STD_F2003,\n+\t\t\t\"Positive width required\");\n \t  tail->u.real.d = fmt->value;\n \t  break;\n \t}"}, {"sha": "a0899736aeabbe4d8508bbee00c5d6bd630dce31", "filename": "libgfortran/io/format.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67732fbced89c42dabea4a3bc160da80d0db046a/libgfortran%2Fio%2Fformat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67732fbced89c42dabea4a3bc160da80d0db046a/libgfortran%2Fio%2Fformat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fformat.h?ref=67732fbced89c42dabea4a3bc160da80d0db046a", "patch": "@@ -27,22 +27,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #include \"io.h\"\n \n-\n-/* Format tokens.  Only about half of these can be stored in the\n-   format nodes.  */\n-\n-typedef enum\n-{\n-  FMT_NONE = 0, FMT_UNKNOWN, FMT_SIGNED_INT, FMT_ZERO, FMT_POSINT, FMT_PERIOD,\n-  FMT_COMMA, FMT_COLON, FMT_SLASH, FMT_DOLLAR, FMT_T, FMT_TR, FMT_TL,\n-  FMT_LPAREN, FMT_RPAREN, FMT_X, FMT_S, FMT_SS, FMT_SP, FMT_STRING,\n-  FMT_BADSTRING, FMT_P, FMT_I, FMT_B, FMT_BN, FMT_BZ, FMT_O, FMT_Z, FMT_F,\n-  FMT_E, FMT_EN, FMT_ES, FMT_G, FMT_L, FMT_A, FMT_D, FMT_H, FMT_END, FMT_DC,\n-  FMT_DP, FMT_STAR, FMT_RC, FMT_RD, FMT_RN, FMT_RP, FMT_RU, FMT_RZ, FMT_DT\n-}\n-format_token;\n-\n-\n /* Format nodes.  A format string is converted into a tree of these\n    structures, which is traversed as part of a data transfer statement.  */\n "}, {"sha": "5b89d47e613a4affe323ea32dbb081dd650264d5", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67732fbced89c42dabea4a3bc160da80d0db046a/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67732fbced89c42dabea4a3bc160da80d0db046a/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=67732fbced89c42dabea4a3bc160da80d0db046a", "patch": "@@ -132,6 +132,20 @@ typedef struct format_hash_entry\n }\n format_hash_entry;\n \n+/* Format tokens.  Only about half of these can be stored in the\n+   format nodes.  */\n+\n+typedef enum\n+{\n+  FMT_NONE = 0, FMT_UNKNOWN, FMT_SIGNED_INT, FMT_ZERO, FMT_POSINT, FMT_PERIOD,\n+  FMT_COMMA, FMT_COLON, FMT_SLASH, FMT_DOLLAR, FMT_T, FMT_TR, FMT_TL,\n+  FMT_LPAREN, FMT_RPAREN, FMT_X, FMT_S, FMT_SS, FMT_SP, FMT_STRING,\n+  FMT_BADSTRING, FMT_P, FMT_I, FMT_B, FMT_BN, FMT_BZ, FMT_O, FMT_Z, FMT_F,\n+  FMT_E, FMT_EN, FMT_ES, FMT_G, FMT_L, FMT_A, FMT_D, FMT_H, FMT_END, FMT_DC,\n+  FMT_DP, FMT_STAR, FMT_RC, FMT_RD, FMT_RN, FMT_RP, FMT_RU, FMT_RZ, FMT_DT\n+}\n+format_token;\n+\n /* Representation of a namelist object in libgfortran\n \n    Namelist Records\n@@ -928,8 +942,8 @@ internal_proto(write_o);\n extern void write_real (st_parameter_dt *, const char *, int);\n internal_proto(write_real);\n \n-extern void write_real_g0 (st_parameter_dt *, const char *, int, int);\n-internal_proto(write_real_g0);\n+extern void write_real_w0 (st_parameter_dt *, const char *, int, format_token, int);\n+internal_proto(write_real_w0);\n \n extern void write_x (st_parameter_dt *, int, int);\n internal_proto(write_x);"}, {"sha": "6382d0dad0909d398bd8ee78066f2ee5a23a8099", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67732fbced89c42dabea4a3bc160da80d0db046a/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67732fbced89c42dabea4a3bc160da80d0db046a/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=67732fbced89c42dabea4a3bc160da80d0db046a", "patch": "@@ -2008,7 +2008,10 @@ formatted_transfer_scalar_write (st_parameter_dt *dtp, bt type, void *p, int kin\n \t    goto need_data;\n \t  if (require_type (dtp, BT_REAL, type, f))\n \t    return;\n-\t  write_d (dtp, f, p, kind);\n+\t  if (f->u.real.w == 0)\n+\t    write_real_w0 (dtp, p, kind, FMT_D, f->u.real.d);\n+\t  else\n+\t    write_d (dtp, f, p, kind);\n \t  break;\n \n \tcase FMT_DT:\n@@ -2071,23 +2074,32 @@ formatted_transfer_scalar_write (st_parameter_dt *dtp, bt type, void *p, int kin\n \t    goto need_data;\n \t  if (require_type (dtp, BT_REAL, type, f))\n \t    return;\n-\t  write_e (dtp, f, p, kind);\n+\t  if (f->u.real.w == 0)\n+\t    write_real_w0 (dtp, p, kind, FMT_E, f->u.real.d);\n+\t  else\n+\t    write_e (dtp, f, p, kind);\n \t  break;\n \n \tcase FMT_EN:\n \t  if (n == 0)\n \t    goto need_data;\n \t  if (require_type (dtp, BT_REAL, type, f))\n \t    return;\n-\t  write_en (dtp, f, p, kind);\n+\t  if (f->u.real.w == 0)\n+\t    write_real_w0 (dtp, p, kind, FMT_EN, f->u.real.d);\n+\t  else\n+\t    write_en (dtp, f, p, kind);\n \t  break;\n \n \tcase FMT_ES:\n \t  if (n == 0)\n \t    goto need_data;\n \t  if (require_type (dtp, BT_REAL, type, f))\n \t    return;\n-\t  write_es (dtp, f, p, kind);\n+\t  if (f->u.real.w == 0)\n+\t    write_real_w0 (dtp, p, kind, FMT_ES, f->u.real.d);\n+\t  else\n+\t    write_es (dtp, f, p, kind);\n \t  break;\n \n \tcase FMT_F:\n@@ -2117,7 +2129,7 @@ formatted_transfer_scalar_write (st_parameter_dt *dtp, bt type, void *p, int kin\n \t\tbreak;\n \t      case BT_REAL:\n \t\tif (f->u.real.w == 0)\n-                  write_real_g0 (dtp, p, kind, f->u.real.d);\n+\t\t  write_real_w0 (dtp, p, kind, FMT_G, f->u.real.d);\n \t\telse\n \t\t  write_d (dtp, f, p, kind);\n \t\tbreak;"}, {"sha": "5ebe83b0dbdacfade63621d7322a48c2106d091e", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67732fbced89c42dabea4a3bc160da80d0db046a/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67732fbced89c42dabea4a3bc160da80d0db046a/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=67732fbced89c42dabea4a3bc160da80d0db046a", "patch": "@@ -1720,25 +1720,32 @@ write_real (st_parameter_dt *dtp, const char *source, int kind)\n    compensate for the extra digit.  */\n \n void\n-write_real_g0 (st_parameter_dt *dtp, const char *source, int kind, int d)\n+write_real_w0 (st_parameter_dt *dtp, const char *source, int kind,\n+\t       format_token fmt, int d)\n {\n   fnode f;\n   char buf_stack[BUF_STACK_SZ];\n   char str_buf[BUF_STACK_SZ];\n   char *buffer, *result;\n   size_t buf_size, res_len, flt_str_len;\n-  int comp_d;\n+  int comp_d = 0;\n   set_fnode_default (dtp, &f, kind);\n \n   if (d > 0)\n     f.u.real.d = d;\n+  f.format = fmt;\n+\n+  /* For FMT_G, Compensate for extra digits when using scale factor, d\n+     is not specified, and the magnitude is such that E editing\n+     is used.  */\n+  if (fmt == FMT_G)\n+    {\n+      if (dtp->u.p.scale_factor > 0 && d == 0)\n+\tcomp_d = 1;\n+      else\n+\tcomp_d = 0;\n+    }\n \n-  /* Compensate for extra digits when using scale factor, d is not\n-     specified, and the magnitude is such that E editing is used.  */\n-  if (dtp->u.p.scale_factor > 0 && d == 0)\n-    comp_d = 1;\n-  else\n-    comp_d = 0;\n   dtp->u.p.g0_no_blanks = 1;\n \n   /* Precision for snprintf call.  */\n@@ -1750,7 +1757,7 @@ write_real_g0 (st_parameter_dt *dtp, const char *source, int kind, int d)\n   buffer = select_buffer (dtp, &f, precision, buf_stack, &buf_size, kind);\n \n   get_float_string (dtp, &f, source , kind, comp_d, buffer,\n-                           precision, buf_size, result, &flt_str_len);\n+\t\t    precision, buf_size, result, &flt_str_len);\n   write_float_string (dtp, result, flt_str_len);\n \n   dtp->u.p.g0_no_blanks = 0;"}]}