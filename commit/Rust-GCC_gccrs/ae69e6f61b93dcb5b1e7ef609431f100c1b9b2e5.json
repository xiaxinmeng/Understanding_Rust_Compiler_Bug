{"sha": "ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5", "node_id": "C_kwDOANBUbNoAKGFlNjllNmY2MWI5M2RjYjViMWU3ZWY2MDk0MzFmMTAwYzFiOWIyZTU", "commit": {"author": {"name": "konglin1", "email": "lingling.kong@intel.com", "date": "2022-07-15T02:29:27Z"}, "committer": {"name": "konglin1", "email": "lingling.kong@intel.com", "date": "2022-07-15T02:29:37Z"}, "message": "i386: Fix _mm_[u]comixx_{ss,sd} codegen and add PF result. [PR106113]\n\ngcc/ChangeLog:\n\n\tPR target/106113\n\t* config/i386/i386-builtin.def (BDESC): Fix [u]comi{ss,sd}\n\tcomparison due to intrinsics changed over time.\n\t* config/i386/i386-expand.cc (ix86_ssecom_setcc):\n\tAdd unordered check and mode for sse comi codegen.\n\t(ix86_expand_sse_comi): Add unordered check and check a different\n\tCCmode.\n\t(ix86_expand_sse_comi_round):Extract unordered check and mode part\n\tin ix86_ssecom_setcc.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/106113\n\t* gcc.target/i386/avx-vcomisd-pr106113-2.c: New test.\n\t* gcc.target/i386/avx-vcomiss-pr106113-2.c: Ditto.\n\t* gcc.target/i386/avx-vucomisd-pr106113-2.c: Ditto.\n\t* gcc.target/i386/avx-vucomiss-pr106113-2.c: Ditto.\n\t* gcc.target/i386/sse-comiss-pr106113-1.c: Ditto.\n\t* gcc.target/i386/sse-comiss-pr106113-2.c: Ditto.\n\t* gcc.target/i386/sse-ucomiss-pr106113-1.c: Ditto.\n\t* gcc.target/i386/sse-ucomiss-pr106113-2.c: Ditto.\n\t* gcc.target/i386/sse2-comisd-pr106113-1.c: Ditto.\n\t* gcc.target/i386/sse2-comisd-pr106113-2.c: Ditto.\n\t* gcc.target/i386/sse2-ucomisd-pr106113-1.c: Ditto.\n\t* gcc.target/i386/sse2-ucomisd-pr106113-2.c: Ditto.", "tree": {"sha": "d8793d097421a7fa6282453e16a9a9e8d4d79b8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8793d097421a7fa6282453e16a9a9e8d4d79b8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/comments", "author": {"login": "konglingling7", "id": 86399175, "node_id": "MDQ6VXNlcjg2Mzk5MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/86399175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konglingling7", "html_url": "https://github.com/konglingling7", "followers_url": "https://api.github.com/users/konglingling7/followers", "following_url": "https://api.github.com/users/konglingling7/following{/other_user}", "gists_url": "https://api.github.com/users/konglingling7/gists{/gist_id}", "starred_url": "https://api.github.com/users/konglingling7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konglingling7/subscriptions", "organizations_url": "https://api.github.com/users/konglingling7/orgs", "repos_url": "https://api.github.com/users/konglingling7/repos", "events_url": "https://api.github.com/users/konglingling7/events{/privacy}", "received_events_url": "https://api.github.com/users/konglingling7/received_events", "type": "User", "site_admin": false}, "committer": {"login": "konglingling7", "id": 86399175, "node_id": "MDQ6VXNlcjg2Mzk5MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/86399175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konglingling7", "html_url": "https://github.com/konglingling7", "followers_url": "https://api.github.com/users/konglingling7/followers", "following_url": "https://api.github.com/users/konglingling7/following{/other_user}", "gists_url": "https://api.github.com/users/konglingling7/gists{/gist_id}", "starred_url": "https://api.github.com/users/konglingling7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konglingling7/subscriptions", "organizations_url": "https://api.github.com/users/konglingling7/orgs", "repos_url": "https://api.github.com/users/konglingling7/repos", "events_url": "https://api.github.com/users/konglingling7/events{/privacy}", "received_events_url": "https://api.github.com/users/konglingling7/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cbebddc2ce1e88216fec6aa89d111d8596bd34c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cbebddc2ce1e88216fec6aa89d111d8596bd34c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cbebddc2ce1e88216fec6aa89d111d8596bd34c"}], "stats": {"total": 516, "additions": 450, "deletions": 66}, "files": [{"sha": "acb7e8ca64b4a5f72feab7d9ea85fd2d9b5d534d", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5", "patch": "@@ -35,30 +35,30 @@\n         IX86_BUILTIN__BDESC_##NEXT_KIND##_FIRST - 1.  */\n \n BDESC_FIRST (comi, COMI,\n-       OPTION_MASK_ISA_SSE, 0, CODE_FOR_sse_comi, \"__builtin_ia32_comieq\", IX86_BUILTIN_COMIEQSS, UNEQ, 0)\n-BDESC (OPTION_MASK_ISA_SSE, 0, CODE_FOR_sse_comi, \"__builtin_ia32_comilt\", IX86_BUILTIN_COMILTSS, UNLT, 0)\n-BDESC (OPTION_MASK_ISA_SSE, 0, CODE_FOR_sse_comi, \"__builtin_ia32_comile\", IX86_BUILTIN_COMILESS, UNLE, 0)\n+       OPTION_MASK_ISA_SSE, 0, CODE_FOR_sse_comi, \"__builtin_ia32_comieq\", IX86_BUILTIN_COMIEQSS, EQ, 0)\n+BDESC (OPTION_MASK_ISA_SSE, 0, CODE_FOR_sse_comi, \"__builtin_ia32_comilt\", IX86_BUILTIN_COMILTSS, LT, 0)\n+BDESC (OPTION_MASK_ISA_SSE, 0, CODE_FOR_sse_comi, \"__builtin_ia32_comile\", IX86_BUILTIN_COMILESS, LE, 0)\n BDESC (OPTION_MASK_ISA_SSE, 0, CODE_FOR_sse_comi, \"__builtin_ia32_comigt\", IX86_BUILTIN_COMIGTSS, GT, 0)\n BDESC (OPTION_MASK_ISA_SSE, 0, CODE_FOR_sse_comi, \"__builtin_ia32_comige\", IX86_BUILTIN_COMIGESS, GE, 0)\n-BDESC (OPTION_MASK_ISA_SSE, 0, CODE_FOR_sse_comi, \"__builtin_ia32_comineq\", IX86_BUILTIN_COMINEQSS, LTGT, 0)\n-BDESC (OPTION_MASK_ISA_SSE, 0, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomieq\", IX86_BUILTIN_UCOMIEQSS, UNEQ, 0)\n-BDESC (OPTION_MASK_ISA_SSE, 0, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomilt\", IX86_BUILTIN_UCOMILTSS, UNLT, 0)\n-BDESC (OPTION_MASK_ISA_SSE, 0, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomile\", IX86_BUILTIN_UCOMILESS, UNLE, 0)\n+BDESC (OPTION_MASK_ISA_SSE, 0, CODE_FOR_sse_comi, \"__builtin_ia32_comineq\", IX86_BUILTIN_COMINEQSS, NE, 0)\n+BDESC (OPTION_MASK_ISA_SSE, 0, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomieq\", IX86_BUILTIN_UCOMIEQSS, EQ, 0)\n+BDESC (OPTION_MASK_ISA_SSE, 0, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomilt\", IX86_BUILTIN_UCOMILTSS, LT, 0)\n+BDESC (OPTION_MASK_ISA_SSE, 0, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomile\", IX86_BUILTIN_UCOMILESS, LE, 0)\n BDESC (OPTION_MASK_ISA_SSE, 0, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomigt\", IX86_BUILTIN_UCOMIGTSS, GT, 0)\n BDESC (OPTION_MASK_ISA_SSE, 0, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomige\", IX86_BUILTIN_UCOMIGESS, GE, 0)\n-BDESC (OPTION_MASK_ISA_SSE, 0, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomineq\", IX86_BUILTIN_UCOMINEQSS, LTGT, 0)\n-BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdeq\", IX86_BUILTIN_COMIEQSD, UNEQ, 0)\n-BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdlt\", IX86_BUILTIN_COMILTSD, UNLT, 0)\n-BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdle\", IX86_BUILTIN_COMILESD, UNLE, 0)\n+BDESC (OPTION_MASK_ISA_SSE, 0, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomineq\", IX86_BUILTIN_UCOMINEQSS, NE, 0)\n+BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdeq\", IX86_BUILTIN_COMIEQSD, EQ, 0)\n+BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdlt\", IX86_BUILTIN_COMILTSD, LT, 0)\n+BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdle\", IX86_BUILTIN_COMILESD, LE, 0)\n BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdgt\", IX86_BUILTIN_COMIGTSD, GT, 0)\n BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdge\", IX86_BUILTIN_COMIGESD, GE, 0)\n-BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdneq\", IX86_BUILTIN_COMINEQSD, LTGT, 0)\n-BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdeq\", IX86_BUILTIN_UCOMIEQSD, UNEQ, 0)\n-BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdlt\", IX86_BUILTIN_UCOMILTSD, UNLT, 0)\n-BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdle\", IX86_BUILTIN_UCOMILESD, UNLE, 0)\n+BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdneq\", IX86_BUILTIN_COMINEQSD, NE, 0)\n+BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdeq\", IX86_BUILTIN_UCOMIEQSD, EQ, 0)\n+BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdlt\", IX86_BUILTIN_UCOMILTSD, LT, 0)\n+BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdle\", IX86_BUILTIN_UCOMILESD, LE, 0)\n BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdgt\", IX86_BUILTIN_UCOMIGTSD, GT, 0)\n BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdge\", IX86_BUILTIN_UCOMIGESD, GE, 0)\n-BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdneq\", IX86_BUILTIN_UCOMINEQSD, LTGT, 0)\n+BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdneq\", IX86_BUILTIN_UCOMINEQSD, NE, 0)\n \n BDESC_END (COMI, PCMPESTR)\n "}, {"sha": "40f821e7a11f266ccec179d74bfe1adb20a2b3d5", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 90, "deletions": 50, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5", "patch": "@@ -9770,47 +9770,121 @@ ix86_expand_sse_compare (const struct builtin_description *d,\n   return target;\n }\n \n+/* Subroutine of ix86_sse_comi and ix86_sse_comi_round to take care of\n+ * ordered EQ or unordered NE, generate PF jump.  */\n+\n+static rtx\n+ix86_ssecom_setcc (const enum rtx_code comparison,\n+\t\t   bool check_unordered, machine_mode mode,\n+\t\t   rtx set_dst, rtx target)\n+{\n+\n+  rtx_code_label *label = NULL;\n+\n+  /* NB: For ordered EQ or unordered NE, check ZF alone isn't sufficient\n+     with NAN operands.  */\n+  if (check_unordered)\n+    {\n+      gcc_assert (comparison == EQ || comparison == NE);\n+\n+      rtx flag = gen_rtx_REG (CCFPmode, FLAGS_REG);\n+      label = gen_label_rtx ();\n+      rtx tmp = gen_rtx_fmt_ee (UNORDERED, VOIDmode, flag, const0_rtx);\n+      tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp,\n+\t\t\t\t  gen_rtx_LABEL_REF (VOIDmode, label),\n+\t\t\t\t  pc_rtx);\n+      emit_jump_insn (gen_rtx_SET (pc_rtx, tmp));\n+    }\n+\n+  /* NB: Set CCFPmode and check a different CCmode which is in subset\n+     of CCFPmode.  */\n+  if (GET_MODE (set_dst) != mode)\n+    {\n+      gcc_assert (mode == CCAmode || mode == CCCmode\n+\t\t  || mode == CCOmode || mode == CCPmode\n+\t\t  || mode == CCSmode || mode == CCZmode);\n+      set_dst = gen_rtx_REG (mode, FLAGS_REG);\n+    }\n+\n+  emit_insn (gen_rtx_SET (gen_rtx_STRICT_LOW_PART (VOIDmode, target),\n+\t\t\t  gen_rtx_fmt_ee (comparison, QImode,\n+\t\t\t\t\t  set_dst,\n+\t\t\t\t\t  const0_rtx)));\n+\n+  if (label)\n+    emit_label (label);\n+\n+  return SUBREG_REG (target);\n+}\n+\n /* Subroutine of ix86_expand_builtin to take care of comi insns.  */\n \n static rtx\n ix86_expand_sse_comi (const struct builtin_description *d, tree exp,\n \t\t      rtx target)\n {\n-  rtx pat;\n+  rtx pat, set_dst;\n   tree arg0 = CALL_EXPR_ARG (exp, 0);\n   tree arg1 = CALL_EXPR_ARG (exp, 1);\n   rtx op0 = expand_normal (arg0);\n   rtx op1 = expand_normal (arg1);\n-  machine_mode mode0 = insn_data[d->icode].operand[0].mode;\n-  machine_mode mode1 = insn_data[d->icode].operand[1].mode;\n-  enum rtx_code comparison = d->comparison;\n+  enum insn_code icode = d->icode;\n+  const struct insn_data_d *insn_p = &insn_data[icode];\n+  machine_mode mode0 = insn_p->operand[0].mode;\n+  machine_mode mode1 = insn_p->operand[1].mode;\n \n   if (VECTOR_MODE_P (mode0))\n     op0 = safe_vector_operand (op0, mode0);\n   if (VECTOR_MODE_P (mode1))\n     op1 = safe_vector_operand (op1, mode1);\n \n+  enum rtx_code comparison = d->comparison;\n+  rtx const_val = const0_rtx;\n+\n+  bool check_unordered = false;\n+  machine_mode mode = CCFPmode;\n+  switch (comparison)\n+    {\n+    case LE:\t/* -> GE  */\n+    case LT:\t/* -> GT  */\n+      std::swap (op0, op1);\n+      comparison = swap_condition (comparison);\n+      /* FALLTHRU */\n+    case GT:\n+    case GE:\n+      break;\n+    case EQ:\n+      check_unordered = true;\n+      mode = CCZmode;\n+      break;\n+    case NE:\n+      check_unordered = true;\n+      mode = CCZmode;\n+      const_val = const1_rtx;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n   target = gen_reg_rtx (SImode);\n-  emit_move_insn (target, const0_rtx);\n+  emit_move_insn (target, const_val);\n   target = gen_rtx_SUBREG (QImode, target, 0);\n \n   if ((optimize && !register_operand (op0, mode0))\n-      || !insn_data[d->icode].operand[0].predicate (op0, mode0))\n+      || !insn_p->operand[0].predicate (op0, mode0))\n     op0 = copy_to_mode_reg (mode0, op0);\n   if ((optimize && !register_operand (op1, mode1))\n-      || !insn_data[d->icode].operand[1].predicate (op1, mode1))\n+      || !insn_p->operand[1].predicate (op1, mode1))\n     op1 = copy_to_mode_reg (mode1, op1);\n \n-  pat = GEN_FCN (d->icode) (op0, op1);\n+  pat = GEN_FCN (icode) (op0, op1);\n   if (! pat)\n     return 0;\n-  emit_insn (pat);\n-  emit_insn (gen_rtx_SET (gen_rtx_STRICT_LOW_PART (VOIDmode, target),\n-\t\t\t  gen_rtx_fmt_ee (comparison, QImode,\n-\t\t\t\t\t  SET_DEST (pat),\n-\t\t\t\t\t  const0_rtx)));\n \n-  return SUBREG_REG (target);\n+  set_dst = SET_DEST (pat);\n+  emit_insn (pat);\n+  return ix86_ssecom_setcc (comparison, check_unordered, mode,\n+\t\t\t    set_dst, target);\n }\n \n /* Subroutines of ix86_expand_args_builtin to take care of round insns.  */\n@@ -11410,42 +11484,8 @@ ix86_expand_sse_comi_round (const struct builtin_description *d,\n \n   emit_insn (pat);\n \n-  rtx_code_label *label = NULL;\n-\n-  /* NB: For ordered EQ or unordered NE, check ZF alone isn't sufficient\n-     with NAN operands.  */\n-  if (check_unordered)\n-    {\n-      gcc_assert (comparison == EQ || comparison == NE);\n-\n-      rtx flag = gen_rtx_REG (CCFPmode, FLAGS_REG);\n-      label = gen_label_rtx ();\n-      rtx tmp = gen_rtx_fmt_ee (UNORDERED, VOIDmode, flag, const0_rtx);\n-      tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp,\n-\t\t\t\t  gen_rtx_LABEL_REF (VOIDmode, label),\n-\t\t\t\t  pc_rtx);\n-      emit_jump_insn (gen_rtx_SET (pc_rtx, tmp));\n-    }\n-\n-  /* NB: Set CCFPmode and check a different CCmode which is in subset\n-     of CCFPmode.  */\n-  if (GET_MODE (set_dst) != mode)\n-    {\n-      gcc_assert (mode == CCAmode || mode == CCCmode\n-\t\t  || mode == CCOmode || mode == CCPmode\n-\t\t  || mode == CCSmode || mode == CCZmode);\n-      set_dst = gen_rtx_REG (mode, FLAGS_REG);\n-    }\n-\n-  emit_insn (gen_rtx_SET (gen_rtx_STRICT_LOW_PART (VOIDmode, target),\n-\t\t\t  gen_rtx_fmt_ee (comparison, QImode,\n-\t\t\t\t\t  set_dst,\n-\t\t\t\t\t  const0_rtx)));\n-\n-  if (label)\n-    emit_label (label);\n-\n-  return SUBREG_REG (target);\n+  return ix86_ssecom_setcc (comparison, check_unordered, mode,\n+\t\t\t    set_dst, target);\n }\n \n static rtx"}, {"sha": "9025b1b57b6a1d2e44a30d50a58ef453570b8b74", "filename": "gcc/testsuite/gcc.target/i386/avx-vcomisd-pr106113-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomisd-pr106113-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomisd-pr106113-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomisd-pr106113-2.c?ref=ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-comisd-pr106113-2.c\""}, {"sha": "dc0bf514069b5c56f55b9fd28424ab596c76860e", "filename": "gcc/testsuite/gcc.target/i386/avx-vcomiss-pr106113-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomiss-pr106113-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomiss-pr106113-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vcomiss-pr106113-2.c?ref=ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-comiss-pr106113-2.c\""}, {"sha": "3b0c5db2332fd04818a41be3d438a7e061aa7616", "filename": "gcc/testsuite/gcc.target/i386/avx-vucomisd-pr106113-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vucomisd-pr106113-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vucomisd-pr106113-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vucomisd-pr106113-2.c?ref=ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-ucomisd-pr106113-2.c\""}, {"sha": "d67e4adffeb5447f91a508f0cfb2d83f46319789", "filename": "gcc/testsuite/gcc.target/i386/avx-vucomiss-pr106113-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vucomiss-pr106113-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vucomiss-pr106113-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vucomiss-pr106113-2.c?ref=ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse-ucomiss-pr106113-2.c\""}, {"sha": "95621029bf6b503f15a5ab460811178a6da1c3e8", "filename": "gcc/testsuite/gcc.target/i386/sse-comiss-pr106113-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-comiss-pr106113-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-comiss-pr106113-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-comiss-pr106113-1.c?ref=ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-msse -O2\" } */\n+/* { dg-final { scan-assembler-times \"comiss\\[ \\\\t\\]+\\[^\\n\\]*\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 6  } } */\n+/* { dg-final { scan-assembler-times \"jp\" 2 } } */\n+#include <xmmintrin.h>\n+\n+volatile __m128 x1, x2;\n+volatile int res;\n+\n+void extern\n+sse_comi_test (void)\n+{\n+  res = _mm_comieq_ss (x1, x2);\n+  res = _mm_comilt_ss (x1, x2);\n+  res = _mm_comile_ss (x1, x2);\n+  res = _mm_comigt_ss (x1, x2);\n+  res = _mm_comige_ss (x1, x2);\n+  res = _mm_comineq_ss (x1, x2);\n+}"}, {"sha": "a90f33370344a0981c8a4785cc6d437983de39b0", "filename": "gcc/testsuite/gcc.target/i386/sse-comiss-pr106113-2.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-comiss-pr106113-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-comiss-pr106113-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-comiss-pr106113-2.c?ref=ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse\" } */\n+/* { dg-require-effective-target sse } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <xmmintrin.h>\n+\n+#define CMP(PRED, EXP) \\\n+      res = _mm_comi##PRED##_ss (__A, __B);           \\\n+        if (res != EXP)                               \\\n+\t    abort ();\n+static void \n+__attribute__((noinline, unused))\n+do_check (float s1, float s2)\n+{\n+  __m128 __A = _mm_load_ss (&s1);\n+  __m128 __B = _mm_load_ss (&s2);\n+  int res;\n+  \n+  CMP (eq, (!__builtin_isunordered (s1, s2) && s1 == s2));\n+  CMP (ge, (!__builtin_isunordered (s1, s2) && s1 >= s2));\n+  CMP (gt, (!__builtin_isunordered (s1, s2) && s1 > s2));\n+  CMP (lt, (!__builtin_isunordered (s1, s2) && s1 < s2));\n+  CMP (le, (!__builtin_isunordered (s1, s2) && s1 <= s2));\n+  CMP (neq, (__builtin_isunordered (s1, s2) || s1 != s2));\n+}\n+\n+static void\n+TEST (void)\n+{\n+  struct\n+    {\n+      float x1;\n+      float x2;\n+    }\n+  inputs[] =\n+    {\n+      { 4.3, 2.18 },\n+      { -4.3, 3.18 },\n+      { __builtin_nanf (\"\"), -5.8 },\n+      { -4.8, __builtin_nansf (\"\") },\n+      { 3.8, __builtin_nansf (\"\") },\n+      { 4.2, 4.2 },\n+      { __builtin_nanf (\"\"), __builtin_nansf (\"\") },\n+    };\n+  int i;\n+\n+  for (i = 0; i < sizeof (inputs) / sizeof (inputs[0]); i++)\n+    do_check (inputs[i].x1, inputs[i].x2);\n+}"}, {"sha": "e337e11a55736fbc27353ae9c9edb85237043bf7", "filename": "gcc/testsuite/gcc.target/i386/sse-ucomiss-pr106113-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-ucomiss-pr106113-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-ucomiss-pr106113-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-ucomiss-pr106113-1.c?ref=ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-msse -O2\" } */\n+/* { dg-final { scan-assembler-times \"ucomiss\\[ \\\\t\\]+\\[^\\n\\]*\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 6  } } */\n+/* { dg-final { scan-assembler-times \"jp\" 2 } } */\n+#include <xmmintrin.h>\n+\n+volatile __m128 x1, x2;\n+volatile int res;\n+\n+void extern\n+sse_ucomi_test (void)\n+{\n+  res = _mm_ucomieq_ss (x1, x2);\n+  res = _mm_ucomilt_ss (x1, x2);\n+  res = _mm_ucomile_ss (x1, x2);\n+  res = _mm_ucomigt_ss (x1, x2);\n+  res = _mm_ucomige_ss (x1, x2);\n+  res = _mm_ucomineq_ss (x1, x2);\n+}"}, {"sha": "37d845025c81c79dc3013b93c97734c2d39c62fc", "filename": "gcc/testsuite/gcc.target/i386/sse-ucomiss-pr106113-2.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-ucomiss-pr106113-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-ucomiss-pr106113-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-ucomiss-pr106113-2.c?ref=ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse\" } */\n+/* { dg-require-effective-target sse } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <xmmintrin.h>\n+\n+#define CMP(PRED, EXP) \\\n+      res = _mm_ucomi##PRED##_ss (__A, __B);           \\\n+        if (res != EXP)                               \\\n+\t    abort ();\n+static void \n+__attribute__((noinline, unused))\n+do_check (float s1, float s2)\n+{\n+  __m128 __A = _mm_load_ss (&s1);\n+  __m128 __B = _mm_load_ss (&s2);\n+  int res;\n+  \n+  CMP (eq, (!__builtin_isunordered (s1, s2) && s1 == s2));\n+  CMP (ge, (!__builtin_isunordered (s1, s2) && s1 >= s2));\n+  CMP (gt, (!__builtin_isunordered (s1, s2) && s1 > s2));\n+  CMP (lt, (!__builtin_isunordered (s1, s2) && s1 < s2));\n+  CMP (le, (!__builtin_isunordered (s1, s2) && s1 <= s2));\n+  CMP (neq, (__builtin_isunordered (s1, s2) || s1 != s2));\n+}\n+\n+static void\n+TEST (void)\n+{\n+  struct\n+    {\n+      float x1;\n+      float x2;\n+    }\n+  inputs[] =\n+    {\n+      { 4.3, 2.18 },\n+      { -4.3, 3.18 },\n+      { __builtin_nanf (\"\"), -5.8 },\n+      { -4.8, __builtin_nansf (\"\") },\n+      { 3.8, __builtin_nansf (\"\") },\n+      { 4.2, 4.2 },\n+      { __builtin_nanf (\"\"), __builtin_nansf (\"\") },\n+    };\n+  int i;\n+\n+  for (i = 0; i < sizeof (inputs) / sizeof (inputs[0]); i++)\n+    do_check (inputs[i].x1, inputs[i].x2);\n+}"}, {"sha": "6268977d2680aa0c6d893c03a92da72002f1f525", "filename": "gcc/testsuite/gcc.target/i386/sse2-comisd-pr106113-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-comisd-pr106113-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-comisd-pr106113-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-comisd-pr106113-1.c?ref=ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-msse2 -O2\" } */\n+/* { dg-final { scan-assembler-times \"comisd\\[ \\\\t\\]+\\[^\\n\\]*\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 6  } } */\n+/* { dg-final { scan-assembler-times \"jp\" 2 } } */\n+#include <xmmintrin.h>\n+\n+volatile __m128d x1, x2;\n+volatile int res;\n+\n+void extern\n+sse2_comisd_test (void)\n+{\n+  res = _mm_comieq_sd (x1, x2);\n+  res = _mm_comilt_sd (x1, x2);\n+  res = _mm_comile_sd (x1, x2);\n+  res = _mm_comigt_sd (x1, x2);\n+  res = _mm_comige_sd (x1, x2);\n+  res = _mm_comineq_sd (x1, x2);\n+}"}, {"sha": "f49771c9212cc0a33a02d715a6eff59879a21d94", "filename": "gcc/testsuite/gcc.target/i386/sse2-comisd-pr106113-2.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-comisd-pr106113-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-comisd-pr106113-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-comisd-pr106113-2.c?ref=ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse2\" } */\n+/* { dg-require-effective-target sse2 } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse2_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <emmintrin.h>\n+\n+#define CMP(PRED, EXP) \\\n+      res = _mm_comi##PRED##_sd (__A, __B);           \\\n+        if (res != EXP)                               \\\n+\t    abort ();\n+static void \n+__attribute__((noinline, unused))\n+do_check (double s1, double s2)\n+{\n+  __m128d __A = _mm_load_sd (&s1);\n+  __m128d __B = _mm_load_sd (&s2);\n+  int res;\n+  \n+  CMP (eq, (!__builtin_isunordered (s1, s2) && s1 == s2));\n+  CMP (ge, (!__builtin_isunordered (s1, s2) && s1 >= s2));\n+  CMP (gt, (!__builtin_isunordered (s1, s2) && s1 > s2));\n+  CMP (lt, (!__builtin_isunordered (s1, s2) && s1 < s2));\n+  CMP (le, (!__builtin_isunordered (s1, s2) && s1 <= s2));\n+  CMP (neq, (__builtin_isunordered (s1, s2) || s1 != s2));\n+}\n+\n+static void\n+TEST (void)\n+{\n+  struct\n+    {\n+      double x1;\n+      double x2;\n+    }\n+  inputs[] =\n+    {\n+      { 4.3, 2.18 },\n+      { -4.3, 3.18 },\n+      { __builtin_nan (\"\"), -5.8 },\n+      { -4.8, __builtin_nans (\"\") },\n+      { 3.8, __builtin_nans (\"\") },\n+      { 4.2, 4.2 },\n+      { __builtin_nan (\"\"), __builtin_nans (\"\") },\n+    };\n+  int i;\n+\n+  for (i = 0; i < sizeof (inputs) / sizeof (inputs[0]); i++)\n+    do_check (inputs[i].x1, inputs[i].x2);\n+}"}, {"sha": "e64c0ace0cc61abe0b4684411e50ed2ea0f4f455", "filename": "gcc/testsuite/gcc.target/i386/sse2-ucomisd-pr106113-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-ucomisd-pr106113-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-ucomisd-pr106113-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-ucomisd-pr106113-1.c?ref=ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-msse2 -O2\" } */\n+/* { dg-final { scan-assembler-times \"ucomisd\\[ \\\\t\\]+\\[^\\n\\]*\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 6  } } */\n+/* { dg-final { scan-assembler-times \"jp\" 2 } } */\n+#include <xmmintrin.h>\n+\n+volatile __m128d x1, x2;\n+volatile int res;\n+\n+void extern\n+sse2_ucomisd_test (void)\n+{\n+  res = _mm_ucomieq_sd (x1, x2);\n+  res = _mm_ucomilt_sd (x1, x2);\n+  res = _mm_ucomile_sd (x1, x2);\n+  res = _mm_ucomigt_sd (x1, x2);\n+  res = _mm_ucomige_sd (x1, x2);\n+  res = _mm_ucomineq_sd (x1, x2);\n+}"}, {"sha": "606a8971c26b52c7bf9a89b36b77d0232d4af121", "filename": "gcc/testsuite/gcc.target/i386/sse2-ucomisd-pr106113-2.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-ucomisd-pr106113-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-ucomisd-pr106113-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-ucomisd-pr106113-2.c?ref=ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse2\" } */\n+/* { dg-require-effective-target sse2 } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse2_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <emmintrin.h>\n+\n+#define CMP(PRED, EXP) \\\n+      res = _mm_ucomi##PRED##_sd (__A, __B);           \\\n+        if (res != EXP)                               \\\n+\t    abort ();\n+static void \n+__attribute__((noinline, unused))\n+do_check (double s1, double s2)\n+{\n+  __m128d __A = _mm_load_sd (&s1);\n+  __m128d __B = _mm_load_sd (&s2);\n+  int res;\n+  \n+  CMP (eq, (!__builtin_isunordered (s1, s2) && s1 == s2));\n+  CMP (ge, (!__builtin_isunordered (s1, s2) && s1 >= s2));\n+  CMP (gt, (!__builtin_isunordered (s1, s2) && s1 > s2));\n+  CMP (lt, (!__builtin_isunordered (s1, s2) && s1 < s2));\n+  CMP (le, (!__builtin_isunordered (s1, s2) && s1 <= s2));\n+  CMP (neq, (__builtin_isunordered (s1, s2) || s1 != s2));\n+}\n+\n+static void\n+TEST (void)\n+{\n+  struct\n+    {\n+      double x1;\n+      double x2;\n+    }\n+  inputs[] =\n+    {\n+      { 4.3, 2.18 },\n+      { -4.3, 3.18 },\n+      { __builtin_nan (\"\"), -5.8 },\n+      { -4.8, __builtin_nans (\"\") },\n+      { 3.8, __builtin_nans (\"\") },\n+      { 4.2, 4.2 },\n+      { __builtin_nan (\"\"), __builtin_nans (\"\") },\n+    };\n+  int i;\n+\n+  for (i = 0; i < sizeof (inputs) / sizeof (inputs[0]); i++)\n+    do_check (inputs[i].x1, inputs[i].x2);\n+}"}]}