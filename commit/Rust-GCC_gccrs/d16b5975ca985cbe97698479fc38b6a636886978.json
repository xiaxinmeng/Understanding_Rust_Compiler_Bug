{"sha": "d16b5975ca985cbe97698479fc38b6a636886978", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE2YjU5NzVjYTk4NWNiZTk3Njk4NDc5ZmMzOGI2YTYzNjg4Njk3OA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-09-25T09:13:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-09-25T12:51:26Z"}, "message": "middle-end/96814 - fix VECTOR_BOOLEAN_TYPE_P CTOR RTL expansion\n\nThe RTL expansion code for CTORs doesn't handle VECTOR_BOOLEAN_TYPE_P\nwith bit-precision elements correctly as the testcase shows before\nthe PR97085 fix.  The following makes it do the correct thing\n(not 100% sure for CTOR of sub-vectors due to the lack of a testcase).\n\nThe alternative would be to assert such CTORs do not happen (and also\nadd IL verification for this).\n\nThe GIMPLE FE needs a way to declare the VECTOR_BOOLEAN_TYPE_P vectors\n(thus the C FE needs that).\n\n2020-09-25  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/96814\n\t* expr.c (store_constructor): Handle VECTOR_BOOLEAN_TYPE_P\n\tCTORs correctly.\n\n\t* gcc.target/i386/pr96814.c: New testcase.", "tree": {"sha": "741667dbea2762008ae58b2061e5e2bb38638aaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/741667dbea2762008ae58b2061e5e2bb38638aaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d16b5975ca985cbe97698479fc38b6a636886978", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d16b5975ca985cbe97698479fc38b6a636886978", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d16b5975ca985cbe97698479fc38b6a636886978", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d16b5975ca985cbe97698479fc38b6a636886978/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bfc4cd2c812a3197c09797796828459714f8849", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bfc4cd2c812a3197c09797796828459714f8849", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bfc4cd2c812a3197c09797796828459714f8849"}], "stats": {"total": 37, "additions": 30, "deletions": 7}, "files": [{"sha": "1c79518ee4dcb2de0628cc39e4367e90888fb2d2", "filename": "gcc/expr.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d16b5975ca985cbe97698479fc38b6a636886978/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d16b5975ca985cbe97698479fc38b6a636886978/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d16b5975ca985cbe97698479fc38b6a636886978", "patch": "@@ -6922,7 +6922,7 @@ store_constructor (tree exp, rtx target, int cleared, poly_int64 size,\n \tinsn_code icode = CODE_FOR_nothing;\n \ttree elt;\n \ttree elttype = TREE_TYPE (type);\n-\tint elt_size = tree_to_uhwi (TYPE_SIZE (elttype));\n+\tint elt_size = vector_element_bits (type);\n \tmachine_mode eltmode = TYPE_MODE (elttype);\n \tHOST_WIDE_INT bitsize;\n \tHOST_WIDE_INT bitpos;\n@@ -6987,6 +6987,15 @@ store_constructor (tree exp, rtx target, int cleared, poly_int64 size,\n \t      }\n \t  }\n \n+\t/* Compute the size of the elements in the CTOR.  It differs\n+\t   from the size of the vector type elements only when the\n+\t   CTOR elements are vectors themselves.  */\n+\ttree val_type = TREE_TYPE (CONSTRUCTOR_ELT (exp, 0)->value);\n+\tif (VECTOR_TYPE_P (val_type))\n+\t  bitsize = tree_to_uhwi (TYPE_SIZE (val_type));\n+\telse\n+\t  bitsize = elt_size;\n+\n \t/* If the constructor has fewer elements than the vector,\n \t   clear the whole array first.  Similarly if this is static\n \t   constructor of a non-BLKmode object.  */\n@@ -7001,11 +7010,7 @@ store_constructor (tree exp, rtx target, int cleared, poly_int64 size,\n \n \t    FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (exp), idx, value)\n \t      {\n-\t\ttree sz = TYPE_SIZE (TREE_TYPE (value));\n-\t\tint n_elts_here\n-\t\t  = tree_to_uhwi (int_const_binop (TRUNC_DIV_EXPR, sz,\n-\t\t\t\t\t\t   TYPE_SIZE (elttype)));\n-\n+\t\tint n_elts_here = bitsize / elt_size;\n \t\tcount += n_elts_here;\n \t\tif (mostly_zeros_p (value))\n \t\t  zero_count += n_elts_here;\n@@ -7045,7 +7050,6 @@ store_constructor (tree exp, rtx target, int cleared, poly_int64 size,\n \t    HOST_WIDE_INT eltpos;\n \t    tree value = ce->value;\n \n-\t    bitsize = tree_to_uhwi (TYPE_SIZE (TREE_TYPE (value)));\n \t    if (cleared && initializer_zerop (value))\n \t      continue;\n "}, {"sha": "b280c7371307cece1971113fc21b87da5e0d1827", "filename": "gcc/testsuite/gcc.target/i386/pr96814.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d16b5975ca985cbe97698479fc38b6a636886978/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96814.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d16b5975ca985cbe97698479fc38b6a636886978/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96814.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96814.c?ref=d16b5975ca985cbe97698479fc38b6a636886978", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512vl -mavx512bw\" } */\n+/* { dg-require-effective-target avx512bw } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+typedef unsigned char __attribute__ ((__vector_size__ (32))) V;\n+\n+void\n+test (void)\n+{\n+  V x = ((V){8} > 0) == 0;\n+  for (unsigned i = 0; i < sizeof (x); i++)\n+    if (x[i] != (i ? 0xff : 0)) __builtin_abort();\n+}\n+\n+#define DO_TEST test\n+#define AVX512VL\n+#define AVX512BW\n+#include \"avx512-check.h\""}]}