{"sha": "c4728c6b20436826e469927a76fa12b89f7cf11e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ3MjhjNmIyMDQzNjgyNmU0Njk5MjdhNzZmYTEyYjg5ZjdjZjExZQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-09-30T07:54:07Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-09-30T07:54:07Z"}, "message": "Add sparc VIS 2.0 builtins, intrinsics, and option to control them.\n\ngcc/\n\n\t* config/sparc/sparc.opt (VIS2): New option.\n\t* doc/invoke.texi: Document it.\n\t* config/sparc/sparc.md (UNSPEC_EDGE8N, UNSPEC_EDGE8LN,\n\tUNSPEC_EDGE16N, UNSPEC_EDGE16LN, UNSPEC_EDGE32N,\n\tUNSPEC_EDGE32LN, UNSPEC_BSHUFFLE): New unspecs.\n\t(define_attr type): New insn type 'edgen'.\n\t(bmask<P:mode>_vis, bshuffle<V64I:mode>_vis, edge8n<P:mode>_vis,\n\tedge8ln<P:mode>_vis, edge16n<P:mode>_vis, edge16ln<P:mode>_vis,\n\tedge32n<P:mode>_vis, edge32ln<P:mode>_vis): New insn VIS 2.0\n\tpatterns.\n\t* niagara.md: Handle edgen.\n\t* niagara2.md: Likewise.\n\t* ultra1_2.md: Likewise.\n\t* ultra3.md: Likewise.\n\t* config/sparc/sparc-c.c (sparc_target_macros): Define __VIS__\n\tto 0x200 when TARGET_VIS2.\n\t* config/sparc/sparc.c (sparc_option_override): Set MASK_VIS2 by\n\tdefault when targetting capable cpus.  TARGET_VIS2 implies\n\tTARGET_VIS, clear and it when TARGET_FPU is disabled.\n\t(sparc_vis_init_builtins): Emit new VIS 2.0 builtins.\n\t(sparc_expand_builtin): Fix predicate indexing when builtin returns\n\tvoid.\n\t(sparc_fold_builtin): Do not eliminate bmask when result is ignored.\n\t* config/sparc/visintrin.h (__vis_bmask, __vis_bshuffledi,\n\t__vis_bshufflev2si, __vis_bshufflev4hi, __vis_bshufflev8qi,\n\t__vis_edge8n, __vis_edge8ln, __vis_edge16n, __vis_edge16ln,\n\t__vis_edge32n, __vis_edge32ln): New VIS 2.0 interfaces.\n\t* doc/extend.texi: Document new VIS 2.0 builtins.\n\ngcc/testsuite/\n\n\t* gcc.target/sparc/bmaskbshuf.c: New test.\n\t* gcc.target/sparc/edgen.c: New test.\n\nFrom-SVN: r179376", "tree": {"sha": "ef2752591fdb528a5b9df11ad312ebf11a2712dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef2752591fdb528a5b9df11ad312ebf11a2712dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4728c6b20436826e469927a76fa12b89f7cf11e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4728c6b20436826e469927a76fa12b89f7cf11e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4728c6b20436826e469927a76fa12b89f7cf11e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4728c6b20436826e469927a76fa12b89f7cf11e/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3aaedee02143cb24a313a147f787d4211844a042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aaedee02143cb24a313a147f787d4211844a042", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aaedee02143cb24a313a147f787d4211844a042"}], "stats": {"total": 401, "additions": 382, "deletions": 19}, "files": [{"sha": "96cd9d5722bf729da4be0e6d3989d505bf93940b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4728c6b20436826e469927a76fa12b89f7cf11e", "patch": "@@ -1,3 +1,34 @@\n+2011-09-30  David S. Miller  <davem@davemloft.net>\n+\n+\t* config/sparc/sparc.opt (VIS2): New option.\n+\t* doc/invoke.texi: Document it.\n+\t* config/sparc/sparc.md (UNSPEC_EDGE8N, UNSPEC_EDGE8LN,\n+\tUNSPEC_EDGE16N, UNSPEC_EDGE16LN, UNSPEC_EDGE32N,\n+\tUNSPEC_EDGE32LN, UNSPEC_BSHUFFLE): New unspecs.\n+\t(define_attr type): New insn type 'edgen'.\n+\t(bmask<P:mode>_vis, bshuffle<V64I:mode>_vis, edge8n<P:mode>_vis,\n+\tedge8ln<P:mode>_vis, edge16n<P:mode>_vis, edge16ln<P:mode>_vis,\n+\tedge32n<P:mode>_vis, edge32ln<P:mode>_vis): New insn VIS 2.0\n+\tpatterns.\n+\t* niagara.md: Handle edgen.\n+\t* niagara2.md: Likewise.\n+\t* ultra1_2.md: Likewise.\n+\t* ultra3.md: Likewise.\n+\t* config/sparc/sparc-c.c (sparc_target_macros): Define __VIS__\n+\tto 0x200 when TARGET_VIS2.\n+\t* config/sparc/sparc.c (sparc_option_override): Set MASK_VIS2 by\n+\tdefault when targetting capable cpus.  TARGET_VIS2 implies\n+\tTARGET_VIS, clear and it when TARGET_FPU is disabled.\n+\t(sparc_vis_init_builtins): Emit new VIS 2.0 builtins.\n+\t(sparc_expand_builtin): Fix predicate indexing when builtin returns\n+\tvoid.\n+\t(sparc_fold_builtin): Do not eliminate bmask when result is ignored.\n+\t* config/sparc/visintrin.h (__vis_bmask, __vis_bshuffledi,\n+\t__vis_bshufflev2si, __vis_bshufflev4hi, __vis_bshufflev8qi,\n+\t__vis_edge8n, __vis_edge8ln, __vis_edge16n, __vis_edge16ln,\n+\t__vis_edge32n, __vis_edge32ln): New VIS 2.0 interfaces.\n+\t* doc/extend.texi: Document new VIS 2.0 builtins.\n+\n 2011-09-29  Nick Clifton  <nickc@redhat.com>\n \t    Bernd Schmidt  <bernds@codesourcery.com>\n "}, {"sha": "c7a2245ecfa3772ec9b25bae041e5be63cc7e561", "filename": "gcc/config/sparc/niagara.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Fconfig%2Fsparc%2Fniagara.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Fconfig%2Fsparc%2Fniagara.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fniagara.md?ref=c4728c6b20436826e469927a76fa12b89f7cf11e", "patch": "@@ -114,5 +114,5 @@\n  */\n (define_insn_reservation \"niag_vis\" 8\n   (and (eq_attr \"cpu\" \"niagara\")\n-    (eq_attr \"type\" \"fga,fgm_pack,fgm_mul,fgm_cmp,fgm_pdist,edge,gsr,array\"))\n+    (eq_attr \"type\" \"fga,fgm_pack,fgm_mul,fgm_cmp,fgm_pdist,edge,edgen,gsr,array\"))\n   \"niag_pipe*8\")"}, {"sha": "fa07becd822e9451083218c15d853b3318f34265", "filename": "gcc/config/sparc/niagara2.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Fconfig%2Fsparc%2Fniagara2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Fconfig%2Fsparc%2Fniagara2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fniagara2.md?ref=c4728c6b20436826e469927a76fa12b89f7cf11e", "patch": "@@ -111,10 +111,10 @@\n \n (define_insn_reservation \"niag2_vis\" 6\n   (and (eq_attr \"cpu\" \"niagara2\")\n-    (eq_attr \"type\" \"fga,fgm_pack,fgm_mul,fgm_cmp,fgm_pdist,edge,array,gsr\"))\n+    (eq_attr \"type\" \"fga,fgm_pack,fgm_mul,fgm_cmp,fgm_pdist,edge,edgen,array,gsr\"))\n   \"niag2_pipe*6\")\n \n (define_insn_reservation \"niag3_vis\" 9\n   (and (eq_attr \"cpu\" \"niagara3\")\n-    (eq_attr \"type\" \"fga,fgm_pack,fgm_mul,fgm_cmp,fgm_pdist,edge,array,gsr\"))\n+    (eq_attr \"type\" \"fga,fgm_pack,fgm_mul,fgm_cmp,fgm_pdist,edge,edgen,array,gsr\"))\n   \"niag2_pipe*9\")"}, {"sha": "0f2bee13745b92fdda34138df8ecdca9514c17ea", "filename": "gcc/config/sparc/sparc-c.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Fconfig%2Fsparc%2Fsparc-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Fconfig%2Fsparc%2Fsparc-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-c.c?ref=c4728c6b20436826e469927a76fa12b89f7cf11e", "patch": "@@ -45,7 +45,12 @@ sparc_target_macros (void)\n       cpp_assert (parse_in, \"machine=sparc\");\n     }\n \n-  if (TARGET_VIS)\n+  if (TARGET_VIS2)\n+    {\n+      cpp_define (parse_in, \"__VIS__=0x200\");\n+      cpp_define (parse_in, \"__VIS=0x200\");\n+    }\n+  else if (TARGET_VIS)\n     {\n       cpp_define (parse_in, \"__VIS__=0x100\");\n       cpp_define (parse_in, \"__VIS=0x100\");"}, {"sha": "9863174f904f26f5b1b22141a7142301a410a6ff", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 67, "deletions": 10, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=c4728c6b20436826e469927a76fa12b89f7cf11e", "patch": "@@ -769,16 +769,16 @@ sparc_option_override (void)\n     /* UltraSPARC III */\n     /* ??? Check if %y issue still holds true.  */\n     { MASK_ISA,\n-      MASK_V9|MASK_DEPRECATED_V8_INSNS},\n+      MASK_V9|MASK_DEPRECATED_V8_INSNS|MASK_VIS2},\n     /* UltraSPARC T1 */\n     { MASK_ISA,\n       MASK_V9|MASK_DEPRECATED_V8_INSNS},\n     /* UltraSPARC T2 */\n-    { MASK_ISA, MASK_V9},\n+    { MASK_ISA, MASK_V9|MASK_VIS2},\n     /* UltraSPARC T3 */\n-    { MASK_ISA, MASK_V9 | MASK_FMAF},\n+    { MASK_ISA, MASK_V9|MASK_VIS2|MASK_FMAF},\n     /* UltraSPARC T4 */\n-    { MASK_ISA, MASK_V9 | MASK_FMAF},\n+    { MASK_ISA, MASK_V9|MASK_VIS2|MASK_FMAF},\n   };\n   const struct cpu_table *cpu;\n   unsigned int i;\n@@ -857,9 +857,13 @@ sparc_option_override (void)\n   if (target_flags_explicit & MASK_FPU)\n     target_flags = (target_flags & ~MASK_FPU) | fpu;\n \n-  /* Don't allow -mvis or -mfmaf if FPU is disabled.  */\n+  /* -mvis2 implies -mvis */\n+  if (TARGET_VIS2)\n+    target_flags |= MASK_VIS;\n+\n+  /* Don't allow -mvis, -mvis2, or -mfmaf if FPU is disabled.  */\n   if (! TARGET_FPU)\n-    target_flags &= ~(MASK_VIS | MASK_FMAF);\n+    target_flags &= ~(MASK_VIS | MASK_VIS2 | MASK_FMAF);\n \n   /* -mvis assumes UltraSPARC+, so we are sure v9 instructions\n      are available.\n@@ -9300,6 +9304,21 @@ sparc_vis_init_builtins (void)\n \t\t\t di_ftype_ptr_ptr);\n       def_builtin_const (\"__builtin_vis_edge32l\", CODE_FOR_edge32ldi_vis,\n \t\t\t di_ftype_ptr_ptr);\n+      if (TARGET_VIS2)\n+\t{\n+\t  def_builtin_const (\"__builtin_vis_edge8n\", CODE_FOR_edge8ndi_vis,\n+\t\t\t     di_ftype_ptr_ptr);\n+\t  def_builtin_const (\"__builtin_vis_edge8ln\", CODE_FOR_edge8lndi_vis,\n+\t\t\t     di_ftype_ptr_ptr);\n+\t  def_builtin_const (\"__builtin_vis_edge16n\", CODE_FOR_edge16ndi_vis,\n+\t\t\t     di_ftype_ptr_ptr);\n+\t  def_builtin_const (\"__builtin_vis_edge16ln\", CODE_FOR_edge16lndi_vis,\n+\t\t\t     di_ftype_ptr_ptr);\n+\t  def_builtin_const (\"__builtin_vis_edge32n\", CODE_FOR_edge32ndi_vis,\n+\t\t\t     di_ftype_ptr_ptr);\n+\t  def_builtin_const (\"__builtin_vis_edge32ln\", CODE_FOR_edge32lndi_vis,\n+\t\t\t     di_ftype_ptr_ptr);\n+\t}\n     }\n   else\n     {\n@@ -9315,6 +9334,21 @@ sparc_vis_init_builtins (void)\n \t\t\t si_ftype_ptr_ptr);\n       def_builtin_const (\"__builtin_vis_edge32l\", CODE_FOR_edge32lsi_vis,\n \t\t\t si_ftype_ptr_ptr);\n+      if (TARGET_VIS2)\n+\t{\n+\t  def_builtin_const (\"__builtin_vis_edge8n\", CODE_FOR_edge8nsi_vis,\n+\t\t\t     si_ftype_ptr_ptr);\n+\t  def_builtin_const (\"__builtin_vis_edge8ln\", CODE_FOR_edge8lnsi_vis,\n+\t\t\t     si_ftype_ptr_ptr);\n+\t  def_builtin_const (\"__builtin_vis_edge16n\", CODE_FOR_edge16nsi_vis,\n+\t\t\t     si_ftype_ptr_ptr);\n+\t  def_builtin_const (\"__builtin_vis_edge16ln\", CODE_FOR_edge16lnsi_vis,\n+\t\t\t     si_ftype_ptr_ptr);\n+\t  def_builtin_const (\"__builtin_vis_edge32n\", CODE_FOR_edge32nsi_vis,\n+\t\t\t     si_ftype_ptr_ptr);\n+\t  def_builtin_const (\"__builtin_vis_edge32ln\", CODE_FOR_edge32lnsi_vis,\n+\t\t\t     si_ftype_ptr_ptr);\n+\t}\n     }\n \n   /* Pixel compare.  */\n@@ -9394,6 +9428,25 @@ sparc_vis_init_builtins (void)\n       def_builtin_const (\"__builtin_vis_array32\", CODE_FOR_array32si_vis,\n \t\t\t si_ftype_si_si);\n   }\n+\n+  if (TARGET_VIS2)\n+    {\n+      /* Byte mask and shuffle */\n+      if (TARGET_ARCH64)\n+\tdef_builtin (\"__builtin_vis_bmask\", CODE_FOR_bmaskdi_vis,\n+\t\t     di_ftype_di_di);\n+      else\n+\tdef_builtin (\"__builtin_vis_bmask\", CODE_FOR_bmasksi_vis,\n+\t\t     si_ftype_si_si);\n+      def_builtin (\"__builtin_vis_bshufflev4hi\", CODE_FOR_bshufflev4hi_vis,\n+\t\t   v4hi_ftype_v4hi_v4hi);\n+      def_builtin (\"__builtin_vis_bshufflev8qi\", CODE_FOR_bshufflev8qi_vis,\n+\t\t   v8qi_ftype_v8qi_v8qi);\n+      def_builtin (\"__builtin_vis_bshufflev2si\", CODE_FOR_bshufflev2si_vis,\n+\t\t   v2si_ftype_v2si_v2si);\n+      def_builtin (\"__builtin_vis_bshuffledi\", CODE_FOR_bshuffledi_vis,\n+\t\t   di_ftype_di_di);\n+    }\n }\n \n /* Handle TARGET_EXPAND_BUILTIN target hook.\n@@ -9428,16 +9481,18 @@ sparc_expand_builtin (tree exp, rtx target,\n   FOR_EACH_CALL_EXPR_ARG (arg, iter, exp)\n     {\n       const struct insn_operand_data *insn_op;\n+      int idx;\n \n       if (arg == error_mark_node)\n \treturn NULL_RTX;\n \n       arg_count++;\n-      insn_op = &insn_data[icode].operand[arg_count - !nonvoid];\n+      idx = arg_count - !nonvoid;\n+      insn_op = &insn_data[icode].operand[idx];\n       op[arg_count] = expand_normal (arg);\n \n-      if (! (*insn_data[icode].operand[arg_count].predicate) (op[arg_count],\n-\t\t\t\t\t\t\t      insn_op->mode))\n+      if (! (*insn_data[icode].operand[idx].predicate) (op[arg_count],\n+\t\t\t\t\t\t\tinsn_op->mode))\n \top[arg_count] = copy_to_mode_reg (insn_op->mode, op[arg_count]);\n     }\n \n@@ -9556,7 +9611,9 @@ sparc_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED,\n   if (ignore\n       && icode != CODE_FOR_alignaddrsi_vis\n       && icode != CODE_FOR_alignaddrdi_vis\n-      && icode != CODE_FOR_wrgsr_vis)\n+      && icode != CODE_FOR_wrgsr_vis\n+      && icode != CODE_FOR_bmasksi_vis\n+      && icode != CODE_FOR_bmaskdi_vis)\n     return build_zero_cst (rtype);\n \n   switch (icode)"}, {"sha": "04469558a7cd09e063e6458607e74620d2cd9ca8", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 84, "deletions": 1, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=c4728c6b20436826e469927a76fa12b89f7cf11e", "patch": "@@ -72,6 +72,14 @@\n \n    (UNSPEC_SP_SET\t\t60)\n    (UNSPEC_SP_TEST\t\t61)\n+\n+   (UNSPEC_EDGE8N\t\t70)\n+   (UNSPEC_EDGE8LN\t\t71)\n+   (UNSPEC_EDGE16N\t\t72)\n+   (UNSPEC_EDGE16LN\t\t73)\n+   (UNSPEC_EDGE32N\t\t74)\n+   (UNSPEC_EDGE32LN\t\t75)\n+   (UNSPEC_BSHUFFLE\t\t76)\n   ])\n \n (define_constants\n@@ -240,7 +248,7 @@\n    fpcmp,\n    fpmul,fpdivs,fpdivd,\n    fpsqrts,fpsqrtd,\n-   fga,fgm_pack,fgm_mul,fgm_pdist,fgm_cmp,edge,gsr,array,\n+   fga,fgm_pack,fgm_mul,fgm_pdist,fgm_cmp,edge,edgen,gsr,array,\n    cmove,\n    ialuX,\n    multi,savew,flushw,iflush,trap\"\n@@ -8188,4 +8196,79 @@\n   \"array32\\t%r1, %r2, %0\"\n   [(set_attr \"type\" \"array\")])\n \n+(define_insn \"bmask<P:mode>_vis\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+        (plus:P (match_operand:P 1 \"register_operand\" \"rJ\")\n+                (match_operand:P 2 \"register_operand\" \"rJ\")))\n+   (clobber (reg:SI GSR_REG))]\n+  \"TARGET_VIS2\"\n+  \"bmask\\t%r1, %r2, %0\"\n+  [(set_attr \"type\" \"array\")])\n+\n+(define_insn \"bshuffle<V64I:mode>_vis\"\n+  [(set (match_operand:V64I 0 \"register_operand\" \"=e\")\n+        (unspec:V64I [(match_operand:V64I 1 \"register_operand\" \"e\")\n+\t              (match_operand:V64I 2 \"register_operand\" \"e\")]\n+                     UNSPEC_BSHUFFLE))\n+   (use (reg:SI GSR_REG))]\n+  \"TARGET_VIS2\"\n+  \"bshuffle\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"fga\")\n+   (set_attr \"fptype\" \"double\")])\n+\n+;; VIS 2.0 adds edge variants which do not set the condition codes\n+(define_insn \"edge8n<P:mode>_vis\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+        (unspec:P [(match_operand:P 1 \"register_operand\" \"rJ\")\n+\t           (match_operand:P 2 \"register_operand\" \"rJ\")]\n+                  UNSPEC_EDGE8N))]\n+  \"TARGET_VIS2\"\n+  \"edge8n\\t%r1, %r2, %0\"\n+  [(set_attr \"type\" \"edgen\")])\n+\n+(define_insn \"edge8ln<P:mode>_vis\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+        (unspec:P [(match_operand:P 1 \"register_operand\" \"rJ\")\n+\t           (match_operand:P 2 \"register_operand\" \"rJ\")]\n+                  UNSPEC_EDGE8LN))]\n+  \"TARGET_VIS2\"\n+  \"edge8ln\\t%r1, %r2, %0\"\n+  [(set_attr \"type\" \"edgen\")])\n+\n+(define_insn \"edge16n<P:mode>_vis\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+        (unspec:P [(match_operand:P 1 \"register_operand\" \"rJ\")\n+                   (match_operand:P 2 \"register_operand\" \"rJ\")]\n+                  UNSPEC_EDGE16N))]\n+  \"TARGET_VIS2\"\n+  \"edge16n\\t%r1, %r2, %0\"\n+  [(set_attr \"type\" \"edgen\")])\n+\n+(define_insn \"edge16ln<P:mode>_vis\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+        (unspec:P [(match_operand:P 1 \"register_operand\" \"rJ\")\n+                   (match_operand:P 2 \"register_operand\" \"rJ\")]\n+                  UNSPEC_EDGE16LN))]\n+  \"TARGET_VIS2\"\n+  \"edge16ln\\t%r1, %r2, %0\"\n+  [(set_attr \"type\" \"edgen\")])\n+\n+(define_insn \"edge32n<P:mode>_vis\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+        (unspec:P [(match_operand:P 1 \"register_operand\" \"rJ\")\n+                   (match_operand:P 2 \"register_operand\" \"rJ\")]\n+                  UNSPEC_EDGE32N))]\n+  \"TARGET_VIS2\"\n+  \"edge32n\\t%r1, %r2, %0\"\n+  [(set_attr \"type\" \"edgen\")])\n+\n+(define_insn \"edge32ln<P:mode>_vis\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+        (unspec:P [(match_operand:P 1 \"register_operand\" \"rJ\")\n+                   (match_operand:P 2 \"register_operand\" \"rJ\")]\n+                  UNSPEC_EDGE32LN))]\n+  \"TARGET_VIS2\"\n+  \"edge32ln\\t%r1, %r2, %0\"\n+  [(set_attr \"type\" \"edge\")])\n+\n (include \"sync.md\")"}, {"sha": "a7b60c838f2916ace10a69e09b8546183976c01f", "filename": "gcc/config/sparc/sparc.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.opt?ref=c4728c6b20436826e469927a76fa12b89f7cf11e", "patch": "@@ -59,7 +59,11 @@ Compile for V8+ ABI\n \n mvis\n Target Report Mask(VIS)\n-Use UltraSPARC Visual Instruction Set extensions\n+Use UltraSPARC Visual Instruction Set version 1.0 extensions\n+\n+mvis2\n+Target Report Mask(VIS2)\n+Use UltraSPARC Visual Instruction Set version 2.0 extensions\n \n mfmaf\n Target Report Mask(FMAF)"}, {"sha": "9cdebab620bf5fa435f21482b681249303bd7ce3", "filename": "gcc/config/sparc/ultra1_2.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Fconfig%2Fsparc%2Fultra1_2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Fconfig%2Fsparc%2Fultra1_2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fultra1_2.md?ref=c4728c6b20436826e469927a76fa12b89f7cf11e", "patch": "@@ -94,7 +94,7 @@\n \n (define_insn_reservation \"us1_simple_ieu1\" 1\n   (and (eq_attr \"cpu\" \"ultrasparc\")\n-    (eq_attr \"type\" \"compare,edge,array\"))\n+    (eq_attr \"type\" \"compare,edge,edgen,array\"))\n   \"us1_ieu1 + us1_slot012\")\n \n (define_insn_reservation \"us1_ialuX\" 1"}, {"sha": "c891e3562052611388f77e46f68d242b4f6f5297", "filename": "gcc/config/sparc/ultra3.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Fconfig%2Fsparc%2Fultra3.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Fconfig%2Fsparc%2Fultra3.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fultra3.md?ref=c4728c6b20436826e469927a76fa12b89f7cf11e", "patch": "@@ -56,7 +56,7 @@\n \n (define_insn_reservation \"us3_array\" 2\n   (and (eq_attr \"cpu\" \"ultrasparc3\")\n-    (eq_attr \"type\" \"array\"))\n+    (eq_attr \"type\" \"array,edgen\"))\n   \"us3_ms + us3_slotany, nothing\")\n \n ;; ??? Not entirely accurate."}, {"sha": "1688301f3d2776297c5a61a8cc48086bf136ea1f", "filename": "gcc/config/sparc/visintrin.h", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Fconfig%2Fsparc%2Fvisintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Fconfig%2Fsparc%2Fvisintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fvisintrin.h?ref=c4728c6b20436826e469927a76fa12b89f7cf11e", "patch": "@@ -354,4 +354,81 @@ __vis_array32 (long __A, long __B)\n   return __builtin_vis_array32 (__A, __B);\n }\n \n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_bmask (long __A, long __B)\n+{\n+  return __builtin_vis_bmask (__A, __B);\n+}\n+\n+extern __inline __i64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_bshuffledi (__i64 __A, __i64 __B)\n+{\n+  return __builtin_vis_bshuffledi (__A, __B);\n+}\n+\n+extern __inline __v2si\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_bshufflev2si (__v2si __A, __v2si __B)\n+{\n+  return __builtin_vis_bshufflev2si (__A, __B);\n+}\n+\n+extern __inline __v4hi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_bshufflev4hi (__v4hi __A, __v4hi __B)\n+{\n+  return __builtin_vis_bshufflev4hi (__A, __B);\n+}\n+\n+extern __inline __v8qi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_bshufflev8qi (__v8qi __A, __v8qi __B)\n+{\n+  return __builtin_vis_bshufflev8qi (__A, __B);\n+}\n+\n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_edge8n (void *__A, void *__B)\n+{\n+  return __builtin_vis_edge8n (__A, __B);\n+}\n+\n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_edge8ln (void *__A, void *__B)\n+{\n+  return __builtin_vis_edge8ln (__A, __B);\n+}\n+\n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_edge16n (void *__A, void *__B)\n+{\n+  return __builtin_vis_edge16n (__A, __B);\n+}\n+\n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_edge16ln (void *__A, void *__B)\n+{\n+  return __builtin_vis_edge16ln (__A, __B);\n+}\n+\n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_edge32n (void *__A, void *__B)\n+{\n+  return __builtin_vis_edge32n (__A, __B);\n+}\n+\n+extern __inline long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_edge32ln (void *__A, void *__B)\n+{\n+  return __builtin_vis_edge32ln (__A, __B);\n+}\n+\n #endif  /* _VISINTRIN_H_INCLUDED */"}, {"sha": "7ca50da0f13456938871a34ac9245a4b79388144", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=c4728c6b20436826e469927a76fa12b89f7cf11e", "patch": "@@ -13016,6 +13016,24 @@ long __builtin_vis_array16 (long, long);\n long __builtin_vis_array32 (long, long);\n @end smallexample\n \n+Additionally, when you use the @option{-mvis2} switch, the VIS version\n+2.0 built-in functions become available:\n+\n+@smallexample\n+long __builtin_vis_bmask (long, long);\n+int64_t __builtin_vis_bshuffledi (int64_t, int64_t);\n+v2si __builtin_vis_bshufflev2si (v2si, v2si);\n+v4hi __builtin_vis_bshufflev2si (v4hi, v4hi);\n+v8qi __builtin_vis_bshufflev2si (v8qi, v8qi);\n+\n+long __builtin_vis_edge8n (void *, void *);\n+long __builtin_vis_edge8ln (void *, void *);\n+long __builtin_vis_edge16n (void *, void *);\n+long __builtin_vis_edge16ln (void *, void *);\n+long __builtin_vis_edge32n (void *, void *);\n+long __builtin_vis_edge32ln (void *, void *);\n+@end smallexample\n+\n @node SPU Built-in Functions\n @subsection SPU Built-in Functions\n "}, {"sha": "0ce15ff4ebc8312123c5589f10849d5c7a4c254d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c4728c6b20436826e469927a76fa12b89f7cf11e", "patch": "@@ -880,7 +880,7 @@ See RS/6000 and PowerPC Options.\n -mstack-bias  -mno-stack-bias @gol\n -munaligned-doubles  -mno-unaligned-doubles @gol\n -mv8plus  -mno-v8plus  -mvis  -mno-vis @gol\n--mfmaf -mno-fmaf}\n+-mvis2 -mno-vis2 -mfmaf -mno-fmaf}\n \n @emph{SPU Options}\n @gccoptlist{-mwarn-reloc -merror-reloc @gol\n@@ -17430,6 +17430,16 @@ mode for all SPARC-V9 processors.\n With @option{-mvis}, GCC generates code that takes advantage of the UltraSPARC\n Visual Instruction Set extensions.  The default is @option{-mno-vis}.\n \n+@item -mvis2\n+@itemx -mno-vis2\n+@opindex mvis2\n+@opindex mno-vis2\n+With @option{-mvis2}, GCC generates code that takes advantage of\n+version 2.0 of the UltraSPARC Visual Instruction Set extensions.  The\n+default is @option{-mvis2} when targetting a cpu that supports such\n+instructions, such as UltraSPARC-III and later.  Setting @option{-mvis2}\n+also sets @option{-mvis}.\n+\n @item -mfmaf\n @itemx -mno-fmaf\n @opindex mfmaf"}, {"sha": "e96612cae81a8d5e858ea84cea191e838ae66e6b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c4728c6b20436826e469927a76fa12b89f7cf11e", "patch": "@@ -1,3 +1,8 @@\n+2011-09-30  David S. Miller  <davem@davemloft.net>\n+\n+\t* gcc.target/sparc/bmaskbshuf.c: New test.\n+\t* gcc.target/sparc/edgen.c: New test.\n+\n 2011-09-29  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/50547"}, {"sha": "7108a018e5e2cc0c0ffc1bd66f8d5402400f43bf", "filename": "gcc/testsuite/gcc.target/sparc/bmaskbshuf.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fbmaskbshuf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fbmaskbshuf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fbmaskbshuf.c?ref=c4728c6b20436826e469927a76fa12b89f7cf11e", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mcpu=ultrasparc3 -mvis -mvis2\" } */\n+typedef long long int64_t;\n+typedef int vec32 __attribute__((vector_size(8)));\n+typedef short vec16 __attribute__((vector_size(8)));\n+typedef unsigned char vec8 __attribute__((vector_size(8)));\n+\n+long test_bmask (long x, long y)\n+{\n+  return __builtin_vis_bmask (x, y);\n+}\n+\n+vec16 test_bshufv4hi (vec16 x, vec16 y)\n+{\n+  return __builtin_vis_bshufflev4hi (x, y);\n+}\n+\n+vec32 test_bshufv2si (vec32 x, vec32 y)\n+{\n+  return __builtin_vis_bshufflev2si (x, y);\n+}\n+\n+vec8 test_bshufv8qi (vec8 x, vec8 y)\n+{\n+  return __builtin_vis_bshufflev8qi (x, y);\n+}\n+\n+int64_t test_bshufdi (int64_t x, int64_t y)\n+{\n+  return __builtin_vis_bshuffledi (x, y);\n+}\n+\n+/* { dg-final { scan-assembler \"bmask\\t%\" } } */\n+/* { dg-final { scan-assembler \"bshuffle\\t%\" } } */"}, {"sha": "11973b58c5071b3fd325192cfaf73f8f2a9c79bb", "filename": "gcc/testsuite/gcc.target/sparc/edgen.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fedgen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4728c6b20436826e469927a76fa12b89f7cf11e/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fedgen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fedgen.c?ref=c4728c6b20436826e469927a76fa12b89f7cf11e", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mcpu=ultrasparc3 -mvis\" } */\n+\n+long test_edge8n (void *p1, void *p2)\n+{\n+  return __builtin_vis_edge8n (p1, p2);\n+}\n+\n+long test_edge8ln (void *p1, void *p2)\n+{\n+  return __builtin_vis_edge8ln (p1, p2);\n+}\n+\n+long test_edge16n (void *p1, void *p2)\n+{\n+  return __builtin_vis_edge16n (p1, p2);\n+}\n+\n+long test_edge16ln (void *p1, void *p2)\n+{\n+  return __builtin_vis_edge16ln (p1, p2);\n+}\n+\n+long test_edge32n (void *p1, void *p2)\n+{\n+  return __builtin_vis_edge32n (p1, p2);\n+}\n+\n+long test_edge32ln (void *p1, void *p2)\n+{\n+  return __builtin_vis_edge32ln (p1, p2);\n+}\n+\n+/* { dg-final { scan-assembler \"edge8n\\t%\" } } */\n+/* { dg-final { scan-assembler \"edge8ln\\t%\" } } */\n+/* { dg-final { scan-assembler \"edge16n\\t%\" } } */\n+/* { dg-final { scan-assembler \"edge16ln\\t%\" } } */\n+/* { dg-final { scan-assembler \"edge32n\\t%\" } } */\n+/* { dg-final { scan-assembler \"edge32ln\\t%\" } } */"}]}