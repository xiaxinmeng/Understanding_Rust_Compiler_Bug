{"sha": "2cff4a6e82a8ad3b38642fc9ec70cce39526455e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNmZjRhNmU4MmE4YWQzYjM4NjQyZmM5ZWM3MGNjZTM5NTI2NDU1ZQ==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@suse.de", "date": "2002-12-03T19:45:30Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2002-12-03T19:45:30Z"}, "message": "m68k.h (EH_RETURN_DATA_REGNO): Define.\n\n\t* config/m68k/m68k.h (EH_RETURN_DATA_REGNO): Define.\n\t(EH_RETURN_STACKADJ_RTX): Define.\n\t(EH_RETURN_HANDLER_RTX): Define.\n\t(ASM_PREFERRED_EH_DATA_FORMAT): Define.\n\t* config/m68k/m68k.c (m68k_save_reg): New function.  Handle eh\n\tregisters and don't save fixed registers.\n\t(m68k_output_function_prologue): Use it.\n\t(use_return_insn): Likewise.\n\t(m68k_output_function_epilogue): Likewise.\n\nFrom-SVN: r59780", "tree": {"sha": "5532894813b0cbd067a23a688dda63648d311525", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5532894813b0cbd067a23a688dda63648d311525"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cff4a6e82a8ad3b38642fc9ec70cce39526455e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cff4a6e82a8ad3b38642fc9ec70cce39526455e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cff4a6e82a8ad3b38642fc9ec70cce39526455e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cff4a6e82a8ad3b38642fc9ec70cce39526455e/comments", "author": {"login": "andreas-schwab", "id": 2175493, "node_id": "MDQ6VXNlcjIxNzU0OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2175493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreas-schwab", "html_url": "https://github.com/andreas-schwab", "followers_url": "https://api.github.com/users/andreas-schwab/followers", "following_url": "https://api.github.com/users/andreas-schwab/following{/other_user}", "gists_url": "https://api.github.com/users/andreas-schwab/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreas-schwab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreas-schwab/subscriptions", "organizations_url": "https://api.github.com/users/andreas-schwab/orgs", "repos_url": "https://api.github.com/users/andreas-schwab/repos", "events_url": "https://api.github.com/users/andreas-schwab/events{/privacy}", "received_events_url": "https://api.github.com/users/andreas-schwab/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b3eed2db617dcca96b438e0ca0b22f822acefe05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3eed2db617dcca96b438e0ca0b22f822acefe05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3eed2db617dcca96b438e0ca0b22f822acefe05"}], "stats": {"total": 135, "additions": 89, "deletions": 46}, "files": [{"sha": "fbc2bd5d2be3b065e453c2302e9ae9940ab48e0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cff4a6e82a8ad3b38642fc9ec70cce39526455e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cff4a6e82a8ad3b38642fc9ec70cce39526455e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2cff4a6e82a8ad3b38642fc9ec70cce39526455e", "patch": "@@ -1,3 +1,15 @@\n+2002-12-03  Andreas Schwab  <schwab@suse.de>\n+\n+\t* config/m68k/m68k.h (EH_RETURN_DATA_REGNO): Define.\n+\t(EH_RETURN_STACKADJ_RTX): Define.\n+\t(EH_RETURN_HANDLER_RTX): Define.\n+\t(ASM_PREFERRED_EH_DATA_FORMAT): Define.\n+\t* config/m68k/m68k.c (m68k_save_reg): New function.  Handle eh\n+\tregisters and don't save fixed registers.\n+\t(m68k_output_function_prologue): Use it.\n+\t(use_return_insn): Likewise.\n+\t(m68k_output_function_epilogue): Likewise.\n+\n 2002-12-03  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.c (single_one_operand): Fix a warning."}, {"sha": "0407dd6b8db0767a74cb88e2e3c74f0c8c90eebd", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 58, "deletions": 45, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cff4a6e82a8ad3b38642fc9ec70cce39526455e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cff4a6e82a8ad3b38642fc9ec70cce39526455e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=2cff4a6e82a8ad3b38642fc9ec70cce39526455e", "patch": "@@ -67,6 +67,7 @@ static void m68k_svr3_asm_out_constructor PARAMS ((rtx, int));\n #endif\n static void m68k_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t\t  HOST_WIDE_INT, tree));\n+static int m68k_save_reg PARAMS ((unsigned int));\n \f\n \n /* Alignment to use for loops and jumps */\n@@ -207,6 +208,34 @@ override_options ()\n   real_format_for_mode[XFmode - QFmode] = &ieee_extended_motorola_format;\n }\n \f\n+/* Return 1 if we need to save REGNO.  */\n+static int\n+m68k_save_reg (regno)\n+     unsigned int regno;\n+{\n+  if (flag_pic && current_function_uses_pic_offset_table\n+      && regno == PIC_OFFSET_TABLE_REGNUM)\n+    return 1;\n+\n+  if (current_function_calls_eh_return)\n+    {\n+      unsigned int i;\n+      for (i = 0; ; i++)\n+\t{\n+\t  unsigned int test = EH_RETURN_DATA_REGNO (i);\n+\t  if (test == INVALID_REGNUM)\n+\t    break;\n+\t  if (test == regno)\n+\t    return 1;\n+\t}\n+    }\n+\n+  return (regs_ever_live[regno]\n+\t  && !call_used_regs[regno]\n+\t  && !fixed_regs[regno]\n+\t  && !(regno == FRAME_POINTER_REGNUM && frame_pointer_needed));\n+}\n+\n /* This function generates the assembly code for function entry.\n    STREAM is a stdio stream to output the code to.\n    SIZE is an int: how many units of temporary storage to allocate.\n@@ -251,24 +280,22 @@ m68k_output_function_prologue (stream, size)\n     {\n       /* Adding negative number is faster on the 68040.  */\n       if (fsize + 4 < 0x8000)\n-\t  fprintf (stream, \"\\tadd.w #%d,sp\\n\", - (fsize + 4));\n+\tfprintf (stream, \"\\tadd.w $%d,sp\\n\", - (fsize + 4));\n       else\n-\t  fprintf (stream, \"\\tadd.l #%d,sp\\n\", - (fsize + 4));\n+\tfprintf (stream, \"\\tadd.l $%d,sp\\n\", - (fsize + 4));\n     }\n \n   for (regno = 16; regno < 24; regno++)\n-    if (regs_ever_live[regno] && ! call_used_regs[regno])\n+    if (m68k_save_reg (regno))\n       mask |= 1 << (regno - 16);\n \n   if ((mask & 0xff) != 0)\n     fprintf (stream, \"\\tfmovem $0x%x,-(sp)\\n\", mask & 0xff);\n \n   mask = 0;\n   for (regno = 0; regno < 16; regno++)\n-    if (regs_ever_live[regno] && ! call_used_regs[regno])\n+    if (m68k_save_reg (regno))\n       mask |= 1 << (15 - regno);\n-  if (frame_pointer_needed)\n-    mask &= ~ (1 << (15-FRAME_POINTER_REGNUM));\n \n   if (exact_log2 (mask) >= 0)\n     fprintf (stream, \"\\tmovel %s,-(sp)\\n\", reg_names[15 - exact_log2 (mask)]);\n@@ -441,7 +468,7 @@ m68k_output_function_prologue (stream, size)\n     }\n #ifdef SUPPORT_SUN_FPA\n   for (regno = 24; regno < 56; regno++)\n-    if (regs_ever_live[regno] && ! call_used_regs[regno])\n+    if (m68k_save_reg (regno))\n       {\n #ifdef MOTOROLA\n \tasm_fprintf (stream, \"\\tfpmovd %s,-(%Rsp)\\n\",\n@@ -467,7 +494,7 @@ m68k_output_function_prologue (stream, size)\n   if (TARGET_68881)\n     {\n       for (regno = 16; regno < 24; regno++)\n-\tif (regs_ever_live[regno] && ! call_used_regs[regno])\n+\tif (m68k_save_reg (regno))\n \t  {\n \t    mask |= 1 << (regno - 16);\n \t    num_saved_regs++;\n@@ -500,21 +527,11 @@ m68k_output_function_prologue (stream, size)\n       num_saved_regs = 0;\n     }\n   for (regno = 0; regno < 16; regno++)\n-    if (regs_ever_live[regno] && ! call_used_regs[regno])\n+    if (m68k_save_reg (regno))\n       {\n         mask |= 1 << (15 - regno);\n         num_saved_regs++;\n       }\n-  if (frame_pointer_needed)\n-    {\n-      mask &= ~ (1 << (15 - FRAME_POINTER_REGNUM));\n-      num_saved_regs--;\n-    }\n-  if (flag_pic && current_function_uses_pic_offset_table)\n-    {\n-      mask |= 1 << (15 - PIC_OFFSET_TABLE_REGNUM);\n-      num_saved_regs++;\n-    }\n \n #if NEED_PROBE\n #ifdef MOTOROLA\n@@ -656,16 +673,10 @@ use_return_insn ()\n   if (!reload_completed || frame_pointer_needed || get_frame_size () != 0)\n     return 0;\n   \n-  /* Copied from output_function_epilogue ().  We should probably create a\n-     separate layout routine to perform the common work.  */\n-  \n-  for (regno = 0 ; regno < FIRST_PSEUDO_REGISTER ; regno++)\n-    if (regs_ever_live[regno] && ! call_used_regs[regno])\n+  for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n+    if (m68k_save_reg (regno))\n       return 0;\n \n-  if (flag_pic && current_function_uses_pic_offset_table)\n-    return 0;\n-\n   return 1;\n }\n \n@@ -693,19 +704,17 @@ m68k_output_function_epilogue (stream, size)\n \n   nregs = 0;  fmask = 0; fpoffset = 0;\n   for (regno = 16; regno < 24; regno++)\n-    if (regs_ever_live[regno] && ! call_used_regs[regno])\n+    if (m68k_save_reg (regno))\n       {\n \tnregs++;\n \tfmask |= 1 << (23 - regno);\n       }\n \n   foffset = fpoffset + nregs * 12;\n   nregs = 0;  mask = 0;\n-  if (frame_pointer_needed)\n-    regs_ever_live[FRAME_POINTER_REGNUM] = 0;\n \n   for (regno = 0; regno < 16; regno++)\n-    if (regs_ever_live[regno] && ! call_used_regs[regno])\n+    if (m68k_save_reg (regno))\n       {\n \tnregs++;\n \tmask |= 1 << regno;\n@@ -758,7 +767,7 @@ m68k_output_function_epilogue (stream, size)\n \n   if (fpoffset != 0)\n     for (regno = 55; regno >= 24; regno--)\n-      if (regs_ever_live[regno] && ! call_used_regs[regno])\n+      if (m68k_save_reg (regno))\n \t{\n \t  if (big)\n \t    fprintf(stream, \"\\tfpmoved -%d(a6,a0.l), %s\\n\",\n@@ -777,11 +786,14 @@ m68k_output_function_epilogue (stream, size)\n   else if (fsize)\n     {\n       if (fsize + 4 < 0x8000)\n-\tfprintf (stream, \"\\tadd.w #%d,sp\\n\", fsize + 4);\n+\tfprintf (stream, \"\\tadd.w $%d,sp\\n\", fsize + 4);\n       else\n-\tfprintf (stream, \"\\tadd.l #%d,sp\\n\", fsize + 4);\n+\tfprintf (stream, \"\\tadd.l $%d,sp\\n\", fsize + 4);\n     }\n \n+  if (current_function_calls_eh_return)\n+    fprintf (stream, \"\\tadd.l a0,sp\\n\");\n+\n   if (current_function_pops_args)\n     fprintf (stream, \"\\trtd $%d\\n\", current_function_pops_args);\n   else\n@@ -821,35 +833,28 @@ m68k_output_function_epilogue (stream, size)\n   nregs = 0;  fmask = 0; fpoffset = 0;\n #ifdef SUPPORT_SUN_FPA\n   for (regno = 24 ; regno < 56 ; regno++)\n-    if (regs_ever_live[regno] && ! call_used_regs[regno])\n+    if (m68k_save_reg (regno))\n       nregs++;\n   fpoffset = nregs * 8;\n #endif\n   nregs = 0;\n   if (TARGET_68881)\n     {\n       for (regno = 16; regno < 24; regno++)\n-\tif (regs_ever_live[regno] && ! call_used_regs[regno])\n+\tif (m68k_save_reg (regno))\n \t  {\n \t    nregs++;\n \t    fmask |= 1 << (23 - regno);\n \t  }\n     }\n   foffset = fpoffset + nregs * 12;\n   nregs = 0;  mask = 0;\n-  if (frame_pointer_needed)\n-    regs_ever_live[FRAME_POINTER_REGNUM] = 0;\n   for (regno = 0; regno < 16; regno++)\n-    if (regs_ever_live[regno] && ! call_used_regs[regno])\n+    if (m68k_save_reg (regno))\n       {\n         nregs++;\n \tmask |= 1 << regno;\n       }\n-  if (flag_pic && current_function_uses_pic_offset_table)\n-    {\n-      nregs++;\n-      mask |= 1 << PIC_OFFSET_TABLE_REGNUM;\n-    }\n   offset = foffset + nregs * 4;\n   /* FIXME : leaf_function_p below is too strong.\n      What we really need to know there is if there could be pending\n@@ -995,7 +1000,7 @@ m68k_output_function_epilogue (stream, size)\n     }\n   if (fpoffset != 0)\n     for (regno = 55; regno >= 24; regno--)\n-      if (regs_ever_live[regno] && ! call_used_regs[regno])\n+      if (m68k_save_reg (regno))\n         {\n \t  if (big)\n \t    {\n@@ -1105,6 +1110,14 @@ m68k_output_function_epilogue (stream, size)\n #endif\n \t}\n     }\n+  if (current_function_calls_eh_return)\n+    {\n+#ifdef MOTOROLA\n+      asm_fprintf (stream, \"\\tadd.l %Ra0,%Rsp\\n\");\n+#else\n+      asm_fprintf (stream, \"\\taddl %Ra0,%Rsp\\n\");\n+#endif\n+    }\n   if (current_function_pops_args)\n     asm_fprintf (stream, \"\\trtd %0I%d\\n\", current_function_pops_args);\n   else"}, {"sha": "795a9793c55ea407f8a546ec027ac57a4af0b09d", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cff4a6e82a8ad3b38642fc9ec70cce39526455e/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cff4a6e82a8ad3b38642fc9ec70cce39526455e/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=2cff4a6e82a8ad3b38642fc9ec70cce39526455e", "patch": "@@ -1665,6 +1665,8 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n \n #define DATA_SECTION_ASM_OP \"\\t.data\"\n \n+#define GLOBAL_ASM_OP \"\\t.globl\\t\"\n+\n /* Here are four prefixes that are used by asm_fprintf to\n    facilitate customization for alternate assembler syntaxes.\n    Machines with no likelihood of an alternate syntax need not\n@@ -1732,7 +1734,23 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n /* Before the prologue, the top of the frame is at 4(%sp).  */\n #define INCOMING_FRAME_SP_OFFSET 4\n \n-#define GLOBAL_ASM_OP \"\\t.globl\\t\"\n+/* Describe how we implement __builtin_eh_return.  */\n+#define EH_RETURN_DATA_REGNO(N) \\\n+  ((N) < 2 ? (N) : INVALID_REGNUM)\n+#define EH_RETURN_STACKADJ_RTX\tgen_rtx_REG (Pmode, 8)\n+#define EH_RETURN_HANDLER_RTX\t\t\t\t\t    \\\n+  gen_rtx_MEM (Pmode,\t\t\t\t\t\t    \\\n+\t       gen_rtx_PLUS (Pmode, arg_pointer_rtx,\t\t    \\\n+\t\t\t     plus_constant (EH_RETURN_STACKADJ_RTX, \\\n+\t\t\t\t\t    UNITS_PER_WORD)))\n+\n+/* Select a format to encode pointers in exception handling data.  CODE\n+   is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n+   true if the symbol may be affected by dynamic relocations.  */\n+#define ASM_PREFERRED_EH_DATA_FORMAT(CODE, GLOBAL)       \t\t   \\\n+  (flag_pic\t\t\t\t\t\t\t\t   \\\n+   ? ((GLOBAL) ? DW_EH_PE_indirect : 0) | DW_EH_PE_pcrel | DW_EH_PE_sdata4 \\\n+   : DW_EH_PE_absptr)\n \n /* This is how to output a reference to a user-level label named NAME.\n    `assemble_name' uses this.  */"}]}