{"sha": "4ee822df35cf031573ff85e05494afebacf9779a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVlODIyZGYzNWNmMDMxNTczZmY4NWUwNTQ5NGFmZWJhY2Y5Nzc5YQ==", "commit": {"author": {"name": "Louis Krupp", "email": "louis.krupp@zoho.com", "date": "2016-10-07T02:24:40Z"}, "committer": {"name": "Louis Krupp", "email": "lkrupp@gcc.gnu.org", "date": "2016-10-07T02:24:40Z"}, "message": "[multiple changes]\n\n2016-10-06  Louis Krupp <louis.krupp@zoho.com>\n\n\t* gfortran.dg/pr69955.f90: New test.\n\n2016-10-06  Louis Krupp  <louis.krupp@zoho.com>\n\n\tPR fortran/69955\n\t* trans-array.c (gfc_conv_expr_descriptor): Don't allocate\n\tcomponents if it's not necessary.\n\nFrom-SVN: r240851", "tree": {"sha": "779aa76faf96f82c0c0ec81859bc06154a5551e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/779aa76faf96f82c0c0ec81859bc06154a5551e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ee822df35cf031573ff85e05494afebacf9779a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ee822df35cf031573ff85e05494afebacf9779a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ee822df35cf031573ff85e05494afebacf9779a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ee822df35cf031573ff85e05494afebacf9779a/comments", "author": null, "committer": null, "parents": [{"sha": "ac193ee73ca85cae3e7c761f1bda491620b4ccab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac193ee73ca85cae3e7c761f1bda491620b4ccab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac193ee73ca85cae3e7c761f1bda491620b4ccab"}], "stats": {"total": 69, "additions": 66, "deletions": 3}, "files": [{"sha": "2b1b85c90fd50bd36210ec0469bd337d515ea826", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee822df35cf031573ff85e05494afebacf9779a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee822df35cf031573ff85e05494afebacf9779a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4ee822df35cf031573ff85e05494afebacf9779a", "patch": "@@ -1,8 +1,14 @@\n+2016-10-06  Louis Krupp  <louis.krupp@zoho.com>\n+\n+\tPR fortran/69955\n+\t* trans-array.c (gfc_conv_expr_descriptor): Don't allocate\n+\tcomponents if it's not necessary.\n+\n 2016-10-05  Louis Krupp  <louis.krupp@zoho.com>\n \n \tPR fortran/57910\n \t* trans-expr.c (gfc_add_interface_mapping): Don't try to\n-\tdereference call-by-value scalar argument\n+\tdereference call-by-value scalar argument.\n \n 2016-10-05  Steven G. Kargl  <kargls@gcc.gnu.org>\n "}, {"sha": "37cca79faefe5953e61bc80615f728815ed22cf5", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee822df35cf031573ff85e05494afebacf9779a/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee822df35cf031573ff85e05494afebacf9779a/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=4ee822df35cf031573ff85e05494afebacf9779a", "patch": "@@ -6963,6 +6963,7 @@ gfc_conv_expr_descriptor (gfc_se *se, gfc_expr *expr)\n       /* TODO: Optimize passing function return values.  */\n       gfc_se lse;\n       gfc_se rse;\n+      bool deep_copy;\n \n       /* Start the copying loops.  */\n       gfc_mark_ss_chain_used (loop.temp_ss, 1);\n@@ -6993,9 +6994,12 @@ gfc_conv_expr_descriptor (gfc_se *se, gfc_expr *expr)\n       gfc_add_block_to_block (&block, &lse.pre);\n \n       lse.string_length = rse.string_length;\n+\n+      deep_copy = !se->data_not_needed\n+\t\t  && (expr->expr_type == EXPR_VARIABLE\n+\t\t      || expr->expr_type == EXPR_ARRAY);\n       tmp = gfc_trans_scalar_assign (&lse, &rse, expr->ts,\n-\t\t\t\t     expr->expr_type == EXPR_VARIABLE\n-\t\t\t\t     || expr->expr_type == EXPR_ARRAY, false);\n+\t\t\t\t     deep_copy, false);\n       gfc_add_expr_to_block (&block, tmp);\n \n       /* Finish the copying loops.  */"}, {"sha": "0728e02559ab0a225c68e548945ff046565687cf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee822df35cf031573ff85e05494afebacf9779a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee822df35cf031573ff85e05494afebacf9779a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4ee822df35cf031573ff85e05494afebacf9779a", "patch": "@@ -1,3 +1,7 @@\n+2016-10-06  Louis Krupp <louis.krupp@zoho.com>\n+\n+\t* gfortran.dg/pr69955.f90: New test.\n+\n 2016_10-06  Louis Krupp  <louis.krupp@zoho.com>\n \n \tPR fortran/57910"}, {"sha": "8b7852a2ce0007352cdcbc46f20849b122c5689b", "filename": "gcc/testsuite/gfortran.dg/pr69955.f90", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee822df35cf031573ff85e05494afebacf9779a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr69955.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee822df35cf031573ff85e05494afebacf9779a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr69955.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr69955.f90?ref=4ee822df35cf031573ff85e05494afebacf9779a", "patch": "@@ -0,0 +1,49 @@\n+! { dg-do run }\n+! { dg-options \"-fdump-tree-original\" }\n+\n+program p\n+  implicit none\n+\n+  type :: t1\n+    integer, allocatable :: t(:)\n+  end type t1\n+\n+  type :: t2\n+    type(t1), allocatable :: x1(:)\n+  end type t2\n+\n+  type(t2) :: var(10)\n+\n+  integer :: i\n+\n+  do i= 1, 10\n+    allocate(var(i)%x1(100))\n+    allocate(var(i)%x1(1)%t(100))\n+  enddo\n+\n+  open(unit = 37, file = \"/dev/null\", status = \"old\")\n+\n+  call s(1)\n+\n+  close(unit = 37)\n+\n+  do i=1,10\n+    deallocate(var(i)%x1)\n+  enddo\n+\n+contains\n+\n+  subroutine s(counter)\n+    implicit none\n+    integer, intent(in) :: counter\n+    integer :: i, j, n\n+\n+    do j=1, counter\n+      n = size( [ ( var(i)%x1 , i = 1, size(var) ) ] )\n+      write(unit = 37, fmt = '(i5)') n\n+    enddo\n+  end subroutine\n+\n+end program p\n+! { dg-final { scan-tree-dump-times \"__builtin_malloc\" 4 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_free\" 4 \"original\" } }"}]}