{"sha": "3f8548e7db88834241ccd8dea8d68f6e09ae5476", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y4NTQ4ZTdkYjg4ODM0MjQxY2NkOGRlYThkNjhmNmUwOWFlNTQ3Ng==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2003-03-07T06:46:56Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2003-03-07T06:46:56Z"}, "message": "error.c (init_error): Use C90 prototype style.\n\n        * error.c (init_error): Use C90 prototype style.\n        (dump_scope): Likewise.\n        (dump_qualifiers): Likewise.\n        (dump_template_argument): Likewise.\n        (dump_template_argument_list): Likewise.\n        (dump_template_parameter): Likewise.\n        (dump_template_bindings): Likewise.\n        (dump_type): Likewise.\n        (dump_typename): Likewise.\n        (class_key_or_enum): Likewise.\n        (dump_aggr_type): Likewise.\n        (dump_type_prefix): Likewise.\n        (dump_type_suffix): Likewise.\n        (dump_global_iord): Likewise.\n        (dump_simple_decl): Likewise.\n        (dump_decl): Likewise.\n        (dump_template_decl): Likewise.\n        (dump_function_decl): Likewise.\n        (dump_parameters): Likewise.\n        (dump_exception_spec): Likewise.\n        (dump_function_name): Likewise.\n        (dump_template_parms): Likewise.\n        (dump_char): Likewise.\n        (dump_expr_list): Likewise.\n        (dump_expr): Likewise.\n        (dump_binary_op): Likewise.\n        (dump_unary_op): Likewise.\n        (type_as_string): Likewise.\n        (expr_as_string): Likewise.\n        (decl_as_string): Likewise.\n        (context_as_string): Likewise.\n        (lang_decl_name): Likewise.\n        (cp_file_of): Likewise.\n        (cp_line_of): Likewise.\n        (decl_to_string): Likewise.\n        (expr_to_string): Likewise.\n        (fndecl_to_string): Likewise.\n        (code_to_string): Likewise.\n        (language_to_string): Likewise.\n        (parm_to_string): Likewise.\n        (op_to_string): Likewise.\n        (type_to_string): Likewise.\n        (assop_to_string): Likewise.\n        (args_to_string): Likewise.\n        (cv_to_string): Likewise.\n        (cxx_print_error_function): Likewise.\n        (cp_diagnostic_starter): Likewise.\n        (cp_diagnostic_finalizer): Likewise.\n        (cp_print_error_function): Likewise.\n        (function_category): Likewise.\n        (print_instantiation_full_context): Likewise.\n        (print_instantiation_partial_context): Likewise.\n        (maybe_print_instantiation_context): Likewise.\n        (print_instantiation_context): Likewise.\n        (cp_printer): Likewise.\n        (print_integer): Likewise.\n        (print_non_consecutive_character): Likewise.\n        (locate_error): Likewise.\n\nFrom-SVN: r63928", "tree": {"sha": "544892ac07581773c5391e97261aeb7e2b633267", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/544892ac07581773c5391e97261aeb7e2b633267"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f8548e7db88834241ccd8dea8d68f6e09ae5476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8548e7db88834241ccd8dea8d68f6e09ae5476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f8548e7db88834241ccd8dea8d68f6e09ae5476", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8548e7db88834241ccd8dea8d68f6e09ae5476/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "530d4230db67ec12f6825c3e30105fee999822f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/530d4230db67ec12f6825c3e30105fee999822f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/530d4230db67ec12f6825c3e30105fee999822f4"}], "stats": {"total": 396, "additions": 174, "deletions": 222}, "files": [{"sha": "9044978501f8c78ddf35c18fe8419a6ee557b7f8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8548e7db88834241ccd8dea8d68f6e09ae5476/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8548e7db88834241ccd8dea8d68f6e09ae5476/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3f8548e7db88834241ccd8dea8d68f6e09ae5476", "patch": "@@ -1,3 +1,64 @@\n+2003-03-07  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* error.c (init_error): Use C90 prototype style.\n+\t(dump_scope): Likewise.\n+\t(dump_qualifiers): Likewise.\n+\t(dump_template_argument): Likewise.\n+\t(dump_template_argument_list): Likewise.\n+\t(dump_template_parameter): Likewise.\n+\t(dump_template_bindings): Likewise.\n+\t(dump_type): Likewise.\n+\t(dump_typename): Likewise.\n+\t(class_key_or_enum): Likewise.\n+\t(dump_aggr_type): Likewise.\n+\t(dump_type_prefix): Likewise.\n+\t(dump_type_suffix): Likewise.\n+\t(dump_global_iord): Likewise.\n+\t(dump_simple_decl): Likewise.\n+\t(dump_decl): Likewise.\n+\t(dump_template_decl): Likewise.\n+\t(dump_function_decl): Likewise.\n+\t(dump_parameters): Likewise.\n+\t(dump_exception_spec): Likewise.\n+\t(dump_function_name): Likewise.\n+\t(dump_template_parms): Likewise.\n+\t(dump_char): Likewise.\n+\t(dump_expr_list): Likewise.\n+\t(dump_expr): Likewise.\n+\t(dump_binary_op): Likewise.\n+\t(dump_unary_op): Likewise.\n+\t(type_as_string): Likewise.\n+\t(expr_as_string): Likewise.\n+\t(decl_as_string): Likewise.\n+\t(context_as_string): Likewise.\n+\t(lang_decl_name): Likewise.\n+\t(cp_file_of): Likewise.\n+\t(cp_line_of): Likewise.\n+\t(decl_to_string): Likewise.\n+\t(expr_to_string): Likewise.\n+\t(fndecl_to_string): Likewise.\n+\t(code_to_string): Likewise.\n+\t(language_to_string): Likewise.\n+\t(parm_to_string): Likewise.\n+\t(op_to_string): Likewise.\n+\t(type_to_string): Likewise.\n+\t(assop_to_string): Likewise.\n+\t(args_to_string): Likewise.\n+\t(cv_to_string): Likewise.\n+\t(cxx_print_error_function): Likewise.\n+\t(cp_diagnostic_starter): Likewise.\n+\t(cp_diagnostic_finalizer): Likewise.\n+\t(cp_print_error_function): Likewise.\n+\t(function_category): Likewise.\n+\t(print_instantiation_full_context): Likewise.\n+\t(print_instantiation_partial_context): Likewise.\n+\t(maybe_print_instantiation_context): Likewise.\n+\t(print_instantiation_context): Likewise.\n+\t(cp_printer): Likewise.\n+\t(print_integer): Likewise.\n+\t(print_non_consecutive_character): Likewise.\n+\t(locate_error): Likewise.\n+\n 2003-03-06  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/9965"}, {"sha": "42a7ff774e99fce6d5c19441fc5ff23851d5a02f", "filename": "gcc/cp/error.c", "status": "modified", "additions": 113, "deletions": 222, "changes": 335, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8548e7db88834241ccd8dea8d68f6e09ae5476/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8548e7db88834241ccd8dea8d68f6e09ae5476/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=3f8548e7db88834241ccd8dea8d68f6e09ae5476", "patch": "@@ -62,64 +62,60 @@ static output_buffer *scratch_buffer = &scratch_buffer_rec;\n #define reinit_global_formatting_buffer() \\\n    output_clear_message_text (scratch_buffer)\n \n-static const char *args_to_string\t\tPARAMS ((tree, int));\n-static const char *assop_to_string\t\tPARAMS ((enum tree_code, int));\n-static const char *code_to_string\t\tPARAMS ((enum tree_code, int));\n-static const char *cv_to_string\t\t\tPARAMS ((tree, int));\n-static const char *decl_to_string\t\tPARAMS ((tree, int));\n-static const char *expr_to_string\t\tPARAMS ((tree, int));\n-static const char *fndecl_to_string\t\tPARAMS ((tree, int));\n-static const char *op_to_string\t\t\tPARAMS ((enum tree_code, int));\n-static const char *parm_to_string\t\tPARAMS ((int, int));\n-static const char *type_to_string\t\tPARAMS ((tree, int));\n-\n-static void dump_type PARAMS ((tree, int));\n-static void dump_typename PARAMS ((tree, int));\n-static void dump_simple_decl PARAMS ((tree, tree, int));\n-static void dump_decl PARAMS ((tree, int));\n-static void dump_template_decl PARAMS ((tree, int));\n-static void dump_function_decl PARAMS ((tree, int));\n-static void dump_expr PARAMS ((tree, int));\n-static void dump_unary_op PARAMS ((const char *, tree, int));\n-static void dump_binary_op PARAMS ((const char *, tree, int));\n-static void dump_aggr_type PARAMS ((tree, int));\n-static enum pad dump_type_prefix PARAMS ((tree, int));\n-static void dump_type_suffix PARAMS ((tree, int));\n-static void dump_function_name PARAMS ((tree, int));\n-static void dump_expr_list PARAMS ((tree, int));\n-static void dump_global_iord PARAMS ((tree));\n-static enum pad dump_qualifiers PARAMS ((tree, enum pad));\n-static void dump_char PARAMS ((int));\n-static void dump_parameters PARAMS ((tree, int));\n-static void dump_exception_spec PARAMS ((tree, int));\n-static const char *class_key_or_enum PARAMS ((tree));\n-static void dump_template_argument PARAMS ((tree, int));\n-static void dump_template_argument_list PARAMS ((tree, int));\n-static void dump_template_parameter PARAMS ((tree, int));\n-static void dump_template_bindings PARAMS ((tree, tree));\n-static void dump_scope PARAMS ((tree, int));\n-static void dump_template_parms PARAMS ((tree, int, int));\n-\n-static const char *function_category PARAMS ((tree));\n-static void maybe_print_instantiation_context PARAMS ((diagnostic_context *));\n-static void print_instantiation_full_context PARAMS ((diagnostic_context *));\n-static void print_instantiation_partial_context PARAMS ((diagnostic_context *,\n-                                                         tree,\n-                                                         const char *, int));\n-static void cp_diagnostic_starter PARAMS ((diagnostic_context *,\n-                                           diagnostic_info *));\n-static void cp_diagnostic_finalizer PARAMS ((diagnostic_context *,\n-                                             diagnostic_info *));\n-static void cp_print_error_function PARAMS ((diagnostic_context *,\n-                                             diagnostic_info *));\n-\n-static bool cp_printer PARAMS ((output_buffer *, text_info *));\n-static void print_non_consecutive_character PARAMS ((output_buffer *, int));\n-static void print_integer PARAMS ((output_buffer *, HOST_WIDE_INT));\n-static tree locate_error PARAMS ((const char *, va_list));\n+static const char *args_to_string (tree, int);\n+static const char *assop_to_string (enum tree_code, int);\n+static const char *code_to_string (enum tree_code, int);\n+static const char *cv_to_string (tree, int);\n+static const char *decl_to_string (tree, int);\n+static const char *expr_to_string (tree, int);\n+static const char *fndecl_to_string (tree, int);\n+static const char *op_to_string\t(enum tree_code, int);\n+static const char *parm_to_string (int, int);\n+static const char *type_to_string (tree, int);\n+\n+static void dump_type (tree, int);\n+static void dump_typename (tree, int);\n+static void dump_simple_decl (tree, tree, int);\n+static void dump_decl (tree, int);\n+static void dump_template_decl (tree, int);\n+static void dump_function_decl (tree, int);\n+static void dump_expr (tree, int);\n+static void dump_unary_op (const char *, tree, int);\n+static void dump_binary_op (const char *, tree, int);\n+static void dump_aggr_type (tree, int);\n+static enum pad dump_type_prefix (tree, int);\n+static void dump_type_suffix (tree, int);\n+static void dump_function_name (tree, int);\n+static void dump_expr_list (tree, int);\n+static void dump_global_iord (tree);\n+static enum pad dump_qualifiers (tree, enum pad);\n+static void dump_char (int);\n+static void dump_parameters (tree, int);\n+static void dump_exception_spec (tree, int);\n+static const char *class_key_or_enum (tree);\n+static void dump_template_argument (tree, int);\n+static void dump_template_argument_list (tree, int);\n+static void dump_template_parameter (tree, int);\n+static void dump_template_bindings (tree, tree);\n+static void dump_scope (tree, int);\n+static void dump_template_parms (tree, int, int);\n+\n+static const char *function_category (tree);\n+static void maybe_print_instantiation_context (diagnostic_context *);\n+static void print_instantiation_full_context (diagnostic_context *);\n+static void print_instantiation_partial_context (diagnostic_context *,\n+                                                 tree, const char *, int);\n+static void cp_diagnostic_starter (diagnostic_context *, diagnostic_info *);\n+static void cp_diagnostic_finalizer (diagnostic_context *, diagnostic_info *);\n+static void cp_print_error_function (diagnostic_context *, diagnostic_info *);\n+\n+static bool cp_printer (output_buffer *, text_info *);\n+static void print_non_consecutive_character (output_buffer *, int);\n+static void print_integer (output_buffer *, HOST_WIDE_INT);\n+static tree locate_error (const char *, va_list);\n \n void\n-init_error ()\n+init_error (void)\n {\n   diagnostic_starter (global_dc) = cp_diagnostic_starter;\n   diagnostic_finalizer (global_dc) = cp_diagnostic_finalizer;\n@@ -131,9 +127,7 @@ init_error ()\n /* Dump a scope, if deemed necessary.  */\n \n static void\n-dump_scope (scope, flags)\n-     tree scope;\n-     int flags;\n+dump_scope (tree scope, int flags)\n {\n   int f = ~TFF_RETURN_TYPE & (flags & (TFF_SCOPE | TFF_CHASE_TYPEDEF));\n \n@@ -164,9 +158,7 @@ dump_scope (scope, flags)\n    indication of whether we dumped something.  */\n \n static enum pad\n-dump_qualifiers (t, p)\n-     tree t;\n-     enum pad p;\n+dump_qualifiers (tree t, enum pad p)\n {\n   static const int masks[] =\n     {TYPE_QUAL_CONST, TYPE_QUAL_VOLATILE, TYPE_QUAL_RESTRICT};\n@@ -201,9 +193,7 @@ static char digit_buffer[128];\n /* Dump the template ARGument under control of FLAGS.  */\n \n static void\n-dump_template_argument (arg, flags)\n-     tree arg;\n-     int flags;\n+dump_template_argument (tree arg, int flags)\n {\n   if (TYPE_P (arg) || TREE_CODE (arg) == TEMPLATE_DECL)\n     dump_type (arg, flags & ~TFF_CLASS_KEY_OR_ENUM);\n@@ -215,9 +205,7 @@ dump_template_argument (arg, flags)\n    of FLAGS.  */\n \n static void\n-dump_template_argument_list (args, flags)\n-     tree args;\n-     int flags;\n+dump_template_argument_list (tree args, int flags)\n {\n   int n = TREE_VEC_LENGTH (args);\n   int need_comma = 0;\n@@ -235,9 +223,7 @@ dump_template_argument_list (args, flags)\n /* Dump a template parameter PARM (a TREE_LIST) under control of FLAGS.  */\n \n static void\n-dump_template_parameter (parm, flags)\n-     tree parm;\n-     int flags;\n+dump_template_parameter (tree parm, int flags)\n {\n   tree p = TREE_VALUE (parm);\n   tree a = TREE_PURPOSE (parm);\n@@ -276,8 +262,7 @@ dump_template_parameter (parm, flags)\n    TREE_VEC.  */\n \n static void\n-dump_template_bindings (parms, args)\n-     tree parms, args;\n+dump_template_bindings (tree parms, tree args)\n {\n   int need_comma = 0;\n \n@@ -321,9 +306,7 @@ dump_template_bindings (parms, args)\n    format.  */\n \n static void\n-dump_type (t, flags)\n-     tree t;\n-     int flags;\n+dump_type (tree t, int flags)\n {\n   if (t == NULL_TREE)\n     return;\n@@ -486,9 +469,7 @@ dump_type (t, flags)\n    a TYPENAME_TYPE.  */\n \n static void\n-dump_typename (t, flags)\n-     tree t;\n-     int flags;\n+dump_typename (tree t, int flags)\n {\n   tree ctx = TYPE_CONTEXT (t);\n \n@@ -503,8 +484,7 @@ dump_typename (t, flags)\n /* Return the name of the supplied aggregate, or enumeral type.  */\n \n static const char *\n-class_key_or_enum (t)\n-     tree t;\n+class_key_or_enum (tree t)\n {\n   if (TREE_CODE (t) == ENUMERAL_TYPE)\n     return \"enum\";\n@@ -520,9 +500,7 @@ class_key_or_enum (t)\n    in the form `class foo'.  */\n \n static void\n-dump_aggr_type (t, flags)\n-     tree t;\n-     int flags;\n+dump_aggr_type (tree t, int flags)\n {\n   tree name;\n   const char *variety = class_key_or_enum (t);\n@@ -595,9 +573,7 @@ dump_aggr_type (t, flags)\n    want to pad non-*, non-& cores, but not pad * or & types.  */\n \n static enum pad\n-dump_type_prefix (t, flags)\n-     tree t;\n-     int flags;\n+dump_type_prefix (tree t, int flags)\n {\n   enum pad padding = before;\n \n@@ -706,9 +682,7 @@ dump_type_prefix (t, flags)\n    which appears after the identifier (or function parms).  */\n \n static void\n-dump_type_suffix (t, flags)\n-     tree t;\n-     int flags;\n+dump_type_suffix (tree t, int flags)\n {\n   if (TYPE_PTRMEMFUNC_P (t))\n     t = TYPE_PTRMEMFUNC_FN_TYPE (t);\n@@ -797,8 +771,7 @@ dump_type_suffix (t, flags)\n }\n \n static void\n-dump_global_iord (t)\n-     tree t;\n+dump_global_iord (tree t)\n {\n   const char *p = NULL;\n \n@@ -813,10 +786,7 @@ dump_global_iord (t)\n }\n \n static void\n-dump_simple_decl (t, type, flags)\n-     tree t;\n-     tree type;\n-     int flags;\n+dump_simple_decl (tree t, tree type, int flags)\n {\n   if (flags & TFF_DECL_SPECIFIERS)\n     {\n@@ -836,9 +806,7 @@ dump_simple_decl (t, type, flags)\n /* Dump a human readable string for the decl T under control of FLAGS.  */\n \n static void\n-dump_decl (t, flags)\n-     tree t;\n-     int flags;\n+dump_decl (tree t, int flags)\n {\n   if (t == NULL_TREE)\n     return;\n@@ -1031,9 +999,7 @@ dump_decl (t, flags)\n    'template <...> leaders plus the 'class X' or 'void fn(...)' part.  */\n \n static void\n-dump_template_decl (t, flags)\n-     tree t;\n-     int flags;\n+dump_template_decl (tree t, int flags)\n {\n   tree orig_parms = DECL_TEMPLATE_PARMS (t);\n   tree parms;\n@@ -1099,9 +1065,7 @@ dump_template_decl (t, flags)\n    is %D which doesn't print the throw specs, and %F which does.  */\n \n static void\n-dump_function_decl (t, flags)\n-     tree t;\n-     int flags;\n+dump_function_decl (tree t, int flags)\n {\n   tree fntype;\n   tree parmtypes;\n@@ -1193,9 +1157,7 @@ dump_function_decl (t, flags)\n    already been removed.  */\n \n static void\n-dump_parameters (parmtypes, flags)\n-     tree parmtypes;\n-     int flags;\n+dump_parameters (tree parmtypes, int flags)\n {\n   int first;\n \n@@ -1227,9 +1189,7 @@ dump_parameters (parmtypes, flags)\n /* Print an exception specification. T is the exception specification.  */\n \n static void\n-dump_exception_spec (t, flags)\n-     tree t;\n-     int flags;\n+dump_exception_spec (tree t, int flags)\n {\n   if (t)\n     {\n@@ -1251,9 +1211,7 @@ dump_exception_spec (t, flags)\n    and destructors properly.  */\n \n static void\n-dump_function_name (t, flags)\n-     tree t;\n-     int flags;\n+dump_function_name (tree t, int flags)\n {\n   tree name = DECL_NAME (t);\n \n@@ -1302,10 +1260,7 @@ dump_function_name (t, flags)\n    decoration.  */\n \n static void\n-dump_template_parms (info, primary, flags)\n-     tree info;\n-     int primary;\n-     int flags;\n+dump_template_parms (tree info, int primary, int flags)\n {\n   tree args = info ? TI_ARGS (info) : NULL_TREE;\n \n@@ -1378,8 +1333,7 @@ dump_template_parms (info, primary, flags)\n }\n \n static void\n-dump_char (c)\n-     int c;\n+dump_char (int c)\n {\n   switch (c)\n     {\n@@ -1427,9 +1381,7 @@ dump_char (c)\n /* Print out a list of initializers (subr of dump_expr) */\n \n static void\n-dump_expr_list (l, flags)\n-     tree l;\n-     int flags;\n+dump_expr_list (tree l, int flags)\n {\n   while (l)\n     {\n@@ -1443,9 +1395,7 @@ dump_expr_list (l, flags)\n /* Print out an expression E under control of FLAGS.  */\n \n static void\n-dump_expr (t, flags)\n-     tree t;\n-     int flags;\n+dump_expr (tree t, int flags)\n {\n   if (t == 0)\n     return;\n@@ -2068,10 +2018,7 @@ dump_expr (t, flags)\n }\n \n static void\n-dump_binary_op (opstring, t, flags)\n-     const char *opstring;\n-     tree t;\n-     int flags;\n+dump_binary_op (const char *opstring, tree t, int flags)\n {\n   print_left_paren (scratch_buffer);\n   dump_expr (TREE_OPERAND (t, 0), flags | TFF_EXPR_IN_PARENS);\n@@ -2086,10 +2033,7 @@ dump_binary_op (opstring, t, flags)\n }\n \n static void\n-dump_unary_op (opstring, t, flags)\n-     const char *opstring;\n-     tree t;\n-     int flags;\n+dump_unary_op (const char *opstring, tree t, int flags)\n {\n   if (flags & TFF_EXPR_IN_PARENS)\n     print_left_paren (scratch_buffer);\n@@ -2103,9 +2047,7 @@ dump_unary_op (opstring, t, flags)\n    control.  */\n \n const char *\n-type_as_string (typ, flags)\n-     tree typ;\n-     int flags;\n+type_as_string (tree typ, int flags)\n {\n   reinit_global_formatting_buffer ();\n \n@@ -2115,9 +2057,7 @@ type_as_string (typ, flags)\n }\n \n const char *\n-expr_as_string (decl, flags)\n-     tree decl;\n-     int flags;\n+expr_as_string (tree decl, int flags)\n {\n   reinit_global_formatting_buffer ();\n \n@@ -2127,9 +2067,7 @@ expr_as_string (decl, flags)\n }\n \n const char *\n-decl_as_string (decl, flags)\n-     tree decl;\n-     int flags;\n+decl_as_string (tree decl, int flags)\n {\n   reinit_global_formatting_buffer ();\n \n@@ -2139,9 +2077,7 @@ decl_as_string (decl, flags)\n }\n \n const char *\n-context_as_string (context, flags)\n-     tree context;\n-     int flags;\n+context_as_string (tree context, int flags)\n {\n   reinit_global_formatting_buffer ();\n \n@@ -2153,9 +2089,7 @@ context_as_string (context, flags)\n /* Generate the three forms of printable names for cxx_printable_name.  */\n \n const char *\n-lang_decl_name (decl, v)\n-     tree decl;\n-     int v;\n+lang_decl_name (tree decl, int v)\n {\n   if (v >= 2)\n     return decl_as_string (decl, TFF_DECL_SPECIFIERS);\n@@ -2177,8 +2111,7 @@ lang_decl_name (decl, v)\n }\n \n const char *\n-cp_file_of (t)\n-     tree t;\n+cp_file_of (tree t)\n {\n   if (TREE_CODE (t) == PARM_DECL && DECL_CONTEXT (t))\n     return DECL_SOURCE_FILE (DECL_CONTEXT (t));\n@@ -2191,8 +2124,7 @@ cp_file_of (t)\n }\n \n int\n-cp_line_of (t)\n-     tree t;\n+cp_line_of (tree t)\n {\n   int line = 0;\n   if (TREE_CODE (t) == PARM_DECL && DECL_CONTEXT (t))\n@@ -2219,9 +2151,7 @@ cp_line_of (t)\n    function.  */\n \n static const char *\n-decl_to_string (decl, verbose)\n-     tree decl;\n-     int verbose;\n+decl_to_string (tree decl, int verbose)\n {\n   int flags = 0;\n \n@@ -2242,9 +2172,7 @@ decl_to_string (decl, verbose)\n }\n \n static const char *\n-expr_to_string (decl, verbose)\n-     tree decl;\n-     int verbose ATTRIBUTE_UNUSED;\n+expr_to_string (tree decl, int verbose ATTRIBUTE_UNUSED)\n {\n   reinit_global_formatting_buffer ();\n \n@@ -2254,9 +2182,7 @@ expr_to_string (decl, verbose)\n }\n \n static const char *\n-fndecl_to_string (fndecl, verbose)\n-     tree fndecl;\n-     int verbose;\n+fndecl_to_string (tree fndecl, int verbose)\n {\n   int flags;\n \n@@ -2272,17 +2198,13 @@ fndecl_to_string (fndecl, verbose)\n \n \n static const char *\n-code_to_string (c, v)\n-     enum tree_code c;\n-     int v ATTRIBUTE_UNUSED;\n+code_to_string (enum tree_code c, int v ATTRIBUTE_UNUSED)\n {\n   return tree_code_name [c];\n }\n \n const char *\n-language_to_string (c, v)\n-     enum languages c;\n-     int v ATTRIBUTE_UNUSED;\n+language_to_string (enum languages c, int v ATTRIBUTE_UNUSED)\n {\n   switch (c)\n     {\n@@ -2304,9 +2226,7 @@ language_to_string (c, v)\n /* Return the proper printed version of a parameter to a C++ function.  */\n \n static const char *\n-parm_to_string (p, v)\n-     int p;\n-     int v ATTRIBUTE_UNUSED;\n+parm_to_string (int p, int v ATTRIBUTE_UNUSED)\n {\n   if (p < 0)\n     return \"`this'\";\n@@ -2316,9 +2236,7 @@ parm_to_string (p, v)\n }\n \n static const char *\n-op_to_string (p, v)\n-     enum tree_code p;\n-     int v ATTRIBUTE_UNUSED;\n+op_to_string (enum tree_code p, int v ATTRIBUTE_UNUSED)\n {\n   tree id;\n \n@@ -2327,9 +2245,7 @@ op_to_string (p, v)\n }\n \n static const char *\n-type_to_string (typ, verbose)\n-     tree typ;\n-     int verbose;\n+type_to_string (tree typ, int verbose)\n {\n   int flags;\n \n@@ -2346,9 +2262,7 @@ type_to_string (typ, verbose)\n }\n \n static const char *\n-assop_to_string (p, v)\n-     enum tree_code p;\n-     int v ATTRIBUTE_UNUSED;\n+assop_to_string (enum tree_code p, int v ATTRIBUTE_UNUSED)\n {\n   tree id;\n \n@@ -2357,9 +2271,7 @@ assop_to_string (p, v)\n }\n \n static const char *\n-args_to_string (p, verbose)\n-     tree p;\n-     int verbose;\n+args_to_string (tree p, int verbose)\n {\n   int flags = 0;\n   if (verbose)\n@@ -2385,9 +2297,7 @@ args_to_string (p, verbose)\n }\n \n static const char *\n-cv_to_string (p, v)\n-     tree p;\n-     int v;\n+cv_to_string (tree p, int v)\n {\n   reinit_global_formatting_buffer ();\n \n@@ -2398,19 +2308,16 @@ cv_to_string (p, v)\n \n /* Langhook for print_error_function.  */\n void\n-cxx_print_error_function (context, file)\n-     diagnostic_context *context;\n-     const char *file;\n+cxx_print_error_function (diagnostic_context *context, const char *file)\n {\n   lhd_print_error_function (context, file);\n   output_set_prefix (&context->buffer, file);\n   maybe_print_instantiation_context (context);\n }\n \n static void\n-cp_diagnostic_starter (context, diagnostic)\n-     diagnostic_context *context;\n-     diagnostic_info *diagnostic;\n+cp_diagnostic_starter (diagnostic_context *context,\n+                       diagnostic_info *diagnostic)\n {\n   diagnostic_report_current_module (context);\n   cp_print_error_function (context, diagnostic);\n@@ -2419,19 +2326,17 @@ cp_diagnostic_starter (context, diagnostic)\n }\n \n static void\n-cp_diagnostic_finalizer (context, diagnostic)\n-     diagnostic_context *context;\n-     diagnostic_info *diagnostic __attribute__((unused));\n+cp_diagnostic_finalizer (diagnostic_context *context,\n+                         diagnostic_info *diagnostic ATTRIBUTE_UNUSED)\n {\n   output_destroy_prefix (&context->buffer);\n }\n \n /* Print current function onto BUFFER, in the process of reporting\n    a diagnostic message.  Called from cp_diagnostic_starter.  */\n static void\n-cp_print_error_function (context, diagnostic)\n-     diagnostic_context *context;\n-     diagnostic_info *diagnostic;\n+cp_print_error_function (diagnostic_context *context,\n+                         diagnostic_info *diagnostic)\n {\n   if (diagnostic_last_function_changed (context))\n     {\n@@ -2458,8 +2363,7 @@ cp_print_error_function (context, diagnostic)\n \n /* Returns a description of FUNCTION using standard terminology.  */\n static const char *\n-function_category (fn)\n-     tree fn;\n+function_category (tree fn)\n {\n   if (DECL_FUNCTION_MEMBER_P (fn))\n     {\n@@ -2481,8 +2385,7 @@ function_category (fn)\n /* Report the full context of a current template instantiation,\n    onto BUFFER.  */\n static void\n-print_instantiation_full_context (context)\n-     diagnostic_context *context;\n+print_instantiation_full_context (diagnostic_context *context)\n {\n   tree p = current_instantiation ();\n   int line = lineno;\n@@ -2517,11 +2420,8 @@ print_instantiation_full_context (context)\n \n /* Same as above but less verbose.  */\n static void\n-print_instantiation_partial_context (context, t, file, line)\n-     diagnostic_context *context;\n-     tree t;\n-     const char *file;\n-     int line;\n+print_instantiation_partial_context (diagnostic_context *context,\n+                                     tree t, const char *file, int line)\n {\n   for (; t; t = TREE_CHAIN (t))\n     {\n@@ -2536,8 +2436,7 @@ print_instantiation_partial_context (context, t, file, line)\n \n /* Called from cp_thing to print the template context for an error.  */\n static void\n-maybe_print_instantiation_context (context)\n-     diagnostic_context *context;\n+maybe_print_instantiation_context (diagnostic_context *context)\n {\n   if (!problematic_instantiation_changed () || current_instantiation () == 0)\n     return;\n@@ -2548,7 +2447,7 @@ maybe_print_instantiation_context (context)\n \n /* Report the bare minimum context of a template instantiation.  */\n void\n-print_instantiation_context ()\n+print_instantiation_context (void)\n {\n   print_instantiation_partial_context\n     (global_dc, current_instantiation (), input_filename, lineno);\n@@ -2569,9 +2468,7 @@ print_instantiation_context ()\n    %T   type.\n    %V   cv-qualifier.  */\n static bool\n-cp_printer (buffer, text)\n-     output_buffer *buffer;\n-     text_info *text;\n+cp_printer (output_buffer *buffer, text_info *text)\n {\n   int verbose = 0;\n   const char *result;\n@@ -2615,18 +2512,14 @@ cp_printer (buffer, text)\n }\n \n static void\n-print_integer (buffer, i)\n-     output_buffer *buffer;\n-     HOST_WIDE_INT i;\n+print_integer (output_buffer *buffer, HOST_WIDE_INT i)\n {\n   sprintf (digit_buffer, HOST_WIDE_INT_PRINT_DEC, (HOST_WIDE_INT) i);\n   output_add_string (buffer, digit_buffer);\n }\n \n static void\n-print_non_consecutive_character (buffer, c)\n-     output_buffer *buffer;\n-     int c;\n+print_non_consecutive_character (output_buffer *buffer, int c)\n {\n   const char *p = output_last_position (buffer);\n \n@@ -2639,9 +2532,7 @@ print_non_consecutive_character (buffer, c)\n    behavior of cp_*_at.  */\n \n static tree\n-locate_error (msgid, ap)\n-     const char *msgid;\n-     va_list ap;\n+locate_error (const char *msgid, va_list ap)\n {\n   tree here = 0, t;\n   int plus = 0;"}]}