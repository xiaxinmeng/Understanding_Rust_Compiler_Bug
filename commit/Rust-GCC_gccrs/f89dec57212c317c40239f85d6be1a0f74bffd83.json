{"sha": "f89dec57212c317c40239f85d6be1a0f74bffd83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg5ZGVjNTcyMTJjMzE3YzQwMjM5Zjg1ZDZiZTFhMGY3NGJmZmQ4Mw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-07-03T08:49:10Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-07-03T08:49:10Z"}, "message": "* doc/cppinternals.texi: Improve formatting and logical markup.\n\nFrom-SVN: r43726", "tree": {"sha": "4a75b630c71d93b405610b90067166dbe65a6982", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a75b630c71d93b405610b90067166dbe65a6982"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f89dec57212c317c40239f85d6be1a0f74bffd83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f89dec57212c317c40239f85d6be1a0f74bffd83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f89dec57212c317c40239f85d6be1a0f74bffd83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f89dec57212c317c40239f85d6be1a0f74bffd83/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff9c9107d8fdcb28ea0b611f5a57b24864046ccb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff9c9107d8fdcb28ea0b611f5a57b24864046ccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff9c9107d8fdcb28ea0b611f5a57b24864046ccb"}], "stats": {"total": 48, "additions": 26, "deletions": 22}, "files": [{"sha": "39da80dfe4a1e451d28a15822da3d14fba2b5295", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f89dec57212c317c40239f85d6be1a0f74bffd83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f89dec57212c317c40239f85d6be1a0f74bffd83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f89dec57212c317c40239f85d6be1a0f74bffd83", "patch": "@@ -1,3 +1,7 @@\n+2001-07-03  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* doc/cppinternals.texi: Improve formatting and logical markup.\n+\n 2001-07-03  Andreas Jaeger  <aj@suse.de>\n \n \t* Makefile.in (insn-recog.o): Add dependency on reload.h."}, {"sha": "d03e143025dbfae8bdc38ac1bb458b5dbba008a4", "filename": "gcc/doc/cppinternals.texi", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f89dec57212c317c40239f85d6be1a0f74bffd83/gcc%2Fdoc%2Fcppinternals.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f89dec57212c317c40239f85d6be1a0f74bffd83/gcc%2Fdoc%2Fcppinternals.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals.texi?ref=f89dec57212c317c40239f85d6be1a0f74bffd83", "patch": "@@ -67,7 +67,7 @@ into another language, under the above conditions for modified versions.\n @page\n \n @node Top, Conventions,, (DIR)\n-@chapter Cpplib - the core of the GNU C Preprocessor\n+@chapter Cpplib---the core of the GNU C Preprocessor\n \n The GNU C preprocessor in GCC 3.0 has been completely rewritten.  It is\n now implemented as a library, cpplib, so it can be easily shared between\n@@ -103,17 +103,17 @@ Identifiers, macro expansion, hash nodes, lexing.\n @cindex interface\n @cindex header files\n \n-cpplib has two interfaces - one is exposed internally only, and the\n+cpplib has two interfaces---one is exposed internally only, and the\n other is for both internal and external use.\n \n The convention is that functions and types that are exposed to multiple\n files internally are prefixed with @samp{_cpp_}, and are to be found in\n-the file @samp{cpphash.h}.  Functions and types exposed to external\n-clients are in @samp{cpplib.h}, and prefixed with @samp{cpp_}.  For\n+the file @file{cpphash.h}.  Functions and types exposed to external\n+clients are in @file{cpplib.h}, and prefixed with @samp{cpp_}.  For\n historical reasons this is no longer quite true, but we should strive to\n stick to it.\n \n-We are striving to reduce the information exposed in cpplib.h to the\n+We are striving to reduce the information exposed in @file{cpplib.h} to the\n bare minimum necessary, and then to keep it there.  This makes clear\n exactly what external clients are entitled to assume, and allows us to\n change internals in the future without worrying whether library clients\n@@ -125,7 +125,7 @@ behaviour.\n @cindex lexer\n @cindex tokens\n \n-The lexer is contained in the file @samp{cpplex.c}.  We want to have a\n+The lexer is contained in the file @file{cpplex.c}.  We want to have a\n lexer that is single-pass, for efficiency reasons.  We would also like\n the lexer to only step forwards through the input files, and not step\n back.  This will make future changes to support different character\n@@ -143,10 +143,10 @@ there is a trigraph representation for a backslash, so it is possible for\n the trigraph @samp{??/} to introduce an escaped newline.\n \n Escaped newlines are tedious because theoretically they can occur\n-anywhere - between the @samp{+} and @samp{=} of the @samp{+=} token,\n+anywhere---between the @samp{+} and @samp{=} of the @samp{+=} token,\n within the characters of an identifier, and even between the @samp{*}\n and @samp{/} that terminates a comment.  Moreover, you cannot be sure\n-there is just one - there might be an arbitrarily long sequence of them.\n+there is just one---there might be an arbitrarily long sequence of them.\n \n So the routine @samp{parse_identifier}, that lexes an identifier, cannot\n assume that it can scan forwards until the first non-identifier\n@@ -165,7 +165,7 @@ some sort.  These cases use the function @samp{get_effective_char},\n which returns the first character after any intervening newlines.\n \n The lexer needs to keep track of the correct column position,\n-including counting tabs as specified by the @samp{-ftabstop=} option.\n+including counting tabs as specified by the @option{-ftabstop=} option.\n This should be done even within comments; C-style comments can appear in\n the middle of a line, and we want to report diagnostics in the correct\n position for text appearing after the end of the comment.\n@@ -201,8 +201,8 @@ Note we have almost, but not quite, achieved the goal of not stepping\n backwards in the input stream.  Currently @samp{skip_escaped_newlines}\n does step back, though with care it should be possible to adjust it so\n that this does not happen.  For example, one tricky issue is if we meet\n-a trigraph, but the command line option @samp{-trigraphs} is not in\n-force but @samp{-Wtrigraphs} is, we need to warn about it but then\n+a trigraph, but the command line option @option{-trigraphs} is not in\n+force but @option{-Wtrigraphs} is, we need to warn about it but then\n buffer it and continue to treat it as 3 separate characters.\n \n @node Whitespace, Hash Nodes, Lexer, Top\n@@ -253,11 +253,11 @@ token of a substituted argument, and the first token after a substituted\n argument are all flagged @samp{AVOID_LPASTE} by the macro expander.\n \n If a token flagged in this way does not have a @samp{PREV_WHITE} flag,\n-and the routine @var{cpp_avoid_paste} determines that it might be\n+and the routine @code{cpp_avoid_paste} determines that it might be\n misinterpreted by the lexer if a space is not inserted between it and\n the immediately preceding token, then stand-alone CPP's output routines\n will insert a space between them.  To avoid excessive spacing,\n-@var{cpp_avoid_paste} tries hard to only request a space if one is\n+@code{cpp_avoid_paste} tries hard to only request a space if one is\n likely to be necessary, but for reasons of efficiency it is slightly\n conservative and might recommend a space where one is not strictly\n needed.\n@@ -278,13 +278,13 @@ A macro expansion replaces the tokens that form its invocation, but any\n newlines appearing in the macro's arguments are interpreted as a single\n space, with the result that the macro's replacement appears in full on\n the same line that the macro name appeared in the source file.  This is\n-particularly important for stringification of arguments - newlines\n+particularly important for stringification of arguments---newlines\n embedded in the arguments must appear in the string as spaces.\n @end itemize\n \n-The source file location is maintained in the @var{lineno} member of the\n-@var{cpp_buffer} structure, and the column number inferred from the\n-current position in the buffer relative to the @var{line_base} buffer\n+The source file location is maintained in the @code{lineno} member of the\n+@code{cpp_buffer} structure, and the column number inferred from the\n+current position in the buffer relative to the @code{line_base} buffer\n variable, which is updated with every newline whether escaped or not.\n \n TODO: Finish this.\n@@ -297,11 +297,11 @@ TODO: Finish this.\n @cindex assertions\n @cindex named operators\n \n-When cpplib encounters an \"identifier\", it generates a hash code for it\n-and stores it in the hash table.  By \"identifier\" we mean tokens with\n+When cpplib encounters an ``identifier'', it generates a hash code for it\n+and stores it in the hash table.  By ``identifier'' we mean tokens with\n type @samp{CPP_NAME}; this includes identifiers in the usual C sense, as\n well as keywords, directive names, macro names and so on.  For example,\n-all of \"pragma\", \"int\", \"foo\" and \"__GNUC__\" are identifiers and hashed\n+all of @samp{pragma}, @samp{int}, @samp{foo} and @samp{__GNUC__} are identifiers and hashed\n when lexed.\n \n Each node in the hash table contain various information about the\n@@ -328,7 +328,7 @@ that assertion.\n \n @item Void\n \n-Everything else falls into this category - an identifier that is not\n+Everything else falls into this category---an identifier that is not\n currently a macro, or a macro that has since been undefined with\n @code{#undef}.\n \n@@ -360,7 +360,7 @@ enum stored in its hash node, so that directive lookup is also O(1).\n @cindex files\n \n Fairly obviously, the file handling code of cpplib resides in the file\n-@samp{cppfiles.c}.  It takes care of the details of file searching,\n+@file{cppfiles.c}.  It takes care of the details of file searching,\n opening, reading and caching, for both the main source file and all the\n headers it recursively includes.\n "}]}