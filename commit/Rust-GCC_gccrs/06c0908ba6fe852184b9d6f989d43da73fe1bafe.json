{"sha": "06c0908ba6fe852184b9d6f989d43da73fe1bafe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZjMDkwOGJhNmZlODUyMTg0YjlkNmY5ODlkNDNkYTczZmUxYmFmZQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2001-10-15T06:31:13Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2001-10-15T06:31:13Z"}, "message": "Double.java: Partial merge with Classpath\n\n\t* java/lang/Double.java: Partial merge with Classpath\n\t(TYPE): initialized through VMClassLoader.getPrimitiveClass()\n\t(value): made final\n\t(static): new static block to load native libary (not used in libgcj)\n\t(Double (String)): call parseDouble()\n\t(byteValue): removed, already defined in superclass Number\n\t(shortValue): likewise\n\t(valueOf (String)): call new Double(String) directly\n\t(compare (double,double)): new 1.4 method\n\t(compareTo (Double)): call new compare(double,double) method\n\t(initIDs): new private method (not used in libgcj)\n\t* java/lang/Float.java: Partial merge with Classpath\n\t(TYPE): initialized through VMClassLoader.getPrimitiveClass()\n\t(value): made final\n\t(static): new static block to load native libary (not used in libgcj)\n\t(Float (String)): call parseFloat()\n\t(byteValue): removed, already defined in superclass Number\n\t(shortValue): likewise\n\t(valueOf (String)): call new Float(String) directly\n\t(compare (float,float)): new 1.4 method\n\t(compareTo (Float)): call new compare(double,double) method\n\nFrom-SVN: r46263", "tree": {"sha": "6a5bca6d8c8ccca9c1aae44c2dc1f8a620f60c76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a5bca6d8c8ccca9c1aae44c2dc1f8a620f60c76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06c0908ba6fe852184b9d6f989d43da73fe1bafe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06c0908ba6fe852184b9d6f989d43da73fe1bafe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06c0908ba6fe852184b9d6f989d43da73fe1bafe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06c0908ba6fe852184b9d6f989d43da73fe1bafe/comments", "author": null, "committer": null, "parents": [{"sha": "dd87cbbf65e1b3ede54579f679a1b61dde7096f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd87cbbf65e1b3ede54579f679a1b61dde7096f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd87cbbf65e1b3ede54579f679a1b61dde7096f5"}], "stats": {"total": 879, "additions": 795, "deletions": 84}, "files": [{"sha": "303bbd7ec1e8863923b3b79e9c7618a4d1bf5b51", "filename": "libjava/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06c0908ba6fe852184b9d6f989d43da73fe1bafe/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06c0908ba6fe852184b9d6f989d43da73fe1bafe/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=06c0908ba6fe852184b9d6f989d43da73fe1bafe", "patch": "@@ -1,3 +1,27 @@\n+2001-10-14  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/lang/Double.java: Partial merge with Classpath\n+\t(TYPE): initialized through VMClassLoader.getPrimitiveClass()\n+\t(value): made final\n+\t(static): new static block to load native libary (not used in libgcj)\n+\t(Double (String)): call parseDouble()\n+\t(byteValue): removed, already defined in superclass Number\n+\t(shortValue): likewise\n+\t(valueOf (String)): call new Double(String) directly\n+\t(compare (double,double)): new 1.4 method\n+\t(compareTo (Double)): call new compare(double,double) method\n+\t(initIDs): new private method (not used in libgcj)\n+\t* java/lang/Float.java: Partial merge with Classpath\n+\t(TYPE): initialized through VMClassLoader.getPrimitiveClass()\n+\t(value): made final\n+\t(static): new static block to load native libary (not used in libgcj)\n+\t(Float (String)): call parseFloat()\n+\t(byteValue): removed, already defined in superclass Number\n+\t(shortValue): likewise\n+\t(valueOf (String)): call new Float(String) directly\n+\t(compare (float,float)): new 1.4 method\n+\t(compareTo (Float)): call new compare(double,double) method\n+\n 2001-10-13  Tom Tromey  <tromey@redhat.com>\n \n \t* java/lang/SecurityManager.java (SecurityManager): Now public."}, {"sha": "caaa406d1334d1ce4be551e0027675730cbc250d", "filename": "libjava/java/lang/Double.java", "status": "modified", "additions": 395, "deletions": 48, "changes": 443, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06c0908ba6fe852184b9d6f989d43da73fe1bafe/libjava%2Fjava%2Flang%2FDouble.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06c0908ba6fe852184b9d6f989d43da73fe1bafe/libjava%2Fjava%2Flang%2FDouble.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FDouble.java?ref=06c0908ba6fe852184b9d6f989d43da73fe1bafe", "patch": "@@ -1,57 +1,155 @@\n-/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n+/* Double.java -- object wrapper for double primitive\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n \n-/**\n- * @author Andrew Haley <aph@cygnus.com>\n- * @date September 25, 1998.  \n- */\n+import gnu.classpath.Configuration;\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n \n+/**\n+ * Instances of class <code>Double</code> represent primitive\n+ * <code>double</code> values.\n+ *\n+ * Additionally, this class provides various helper functions and variables\n+ * related to doubles.\n+ *\n+ * @author Paul Fisher\n+ * @author Andrew Haley <aph@cygnus.com>\n+ * @since JDK 1.0\n+ */\n public final class Double extends Number implements Comparable\n {\n+  /**\n+   * The minimum positive value a <code>double</code> may represent\n+   * is 5e-324.\n+   */\n   public static final double MIN_VALUE = 5e-324;\n+\n+  /**\n+   * The maximum positive value a <code>double</code> may represent\n+   * is 1.7976931348623157e+308.\n+   */\n   public static final double MAX_VALUE = 1.7976931348623157e+308;\n+\n+  /**\n+   * The value of a double representation -1.0/0.0, negative\n+   * infinity.  \n+   */\n   public static final double NEGATIVE_INFINITY = -1.0d/0.0d;\n+\n+  /**\n+   * The value of a double representing 1.0/0.0, positive infinity.\n+   */\n   public static final double POSITIVE_INFINITY = 1.0d/0.0d;\n+\n+  /**\n+   * All IEEE 754 values of NaN have the same value in Java.\n+   */\n   public static final double NaN = 0.0d/0.0d;\n \n-  // This initialization is seemingly circular, but it is accepted\n-  // by javac, and is handled specially by gcc.\n-  public static final Class TYPE = double.class;\n+  /**\n+   * The primitive type <code>double</code> is represented by this\n+   * <code>Class</code> object.\n+   */\n+  public static final Class TYPE = VMClassLoader.getPrimitiveClass (\"double\");\n \n-  private double value;\n+  /**\n+   * The immutable value of this Double.\n+   */\n+  private final double value;\n \n   private static final long serialVersionUID = -9172774392245257468L;\n \n-  public native static double parseDouble (String s) \n-    throws NumberFormatException;\n+  /**\n+   * Load native routines necessary for this class.  \n+   */\n+  static\n+  {\n+    if (Configuration.INIT_LOAD_LIBRARY)\n+      {\n+\tSystem.loadLibrary (\"javalang\");\n+\tinitIDs ();\n+      }\n+  }\n \n-  public Double (double v)\n+  /**\n+   * Create a <code>Double</code> from the primitive <code>double</code>\n+   * specified.\n+   *\n+   * @param value the <code>double</code> argument\n+   */\n+  public Double (double value)\n   {\n-    value = v;\n+    this.value = value;\n   }\n \n+  /**\n+   * Create a <code>Double</code> from the specified\n+   * <code>String</code>.\n+   *\n+   * This method calls <code>Double.parseDouble()</code>.\n+   *\n+   * @exception NumberFormatException when the <code>String</code> cannot\n+   *            be parsed into a <code>Float</code>.\n+   * @param s the <code>String</code> to convert\n+   * @see #parseDouble(java.lang.String) \n+   */\n   public Double (String s) throws NumberFormatException\n   {\n-    value = valueOf (s).doubleValue ();\n+    value = parseDouble (s);\n   }\n \n+  /**\n+   * Convert the <code>double</code> value of this <code>Double</code>\n+   * to a <code>String</code>.  This method calls\n+   * <code>Double.toString(double)</code> to do its dirty work.\n+   *\n+   * @return the <code>String</code> representation of this <code>Double</code>.\n+   * @see #toString(double)\n+   */\n   public String toString ()\n   {\n     return toString (value);\n   }\n \n+  /**\n+   * If the <code>Object</code> is not <code>null</code>, is an\n+   * <code>instanceof</code> <code>Double</code>, and represents\n+   * the same primitive <code>double</code> value return \n+   * <code>true</code>.  Otherwise <code>false</code> is returned.\n+   *\n+   * @param obj the object to compare to\n+   * @return whether the objects are semantically equal.\n+   */\n   public boolean equals (Object obj)\n   {\n     if (!(obj instanceof Double))\n@@ -62,59 +160,92 @@ public boolean equals (Object obj)\n     return doubleToLongBits (value) == doubleToLongBits (d.doubleValue ());\n   }\n \n+  /**\n+   * The hashcode is the value of the expression: <br>\n+   * <br>\n+   * <code>(int)(v^(v>>>32))</code><br>\n+   * <br>\n+   * where v is defined by: <br>\n+   * <code>long v = Double.doubleToLongBits(this.longValue());</code><br>\n+   */\n   public int hashCode ()\n   {\n     long v = doubleToLongBits (value);\n     return (int) (v ^ (v >>> 32));\n   }\n \n+  /**\n+   * Return the value of this <code>Double</code> when cast to an \n+   * <code>int</code>.\n+   */\n   public int intValue ()\n   {\n     return (int) value;\n   }\n \n+  /**\n+   * Return the value of this <code>Double</code> when cast to a\n+   * <code>long</code>.\n+   */\n   public long longValue ()\n   {\n     return (long) value;\n   }\n \n+  /**\n+   * Return the value of this <code>Double</code> when cast to a\n+   * <code>float</code>.\n+   */\n   public float floatValue ()\n   {\n     return (float) value;\n   }\n \n+  /**\n+   * Return the primitive <code>double</code> value represented by this\n+   * <code>Double</code>.\n+   */\n   public double doubleValue ()\n   {\n     return value;\n   }\n \n-  public byte byteValue ()\n-  {\n-    return (byte) value;\n-  }\n-\n-  public short shortValue ()\n-  {\n-    return (short) value;\n-  }\n-\n-  native static String toString (double v, boolean isFloat);\n-\n-  public static String toString (double v)\n-  {\n-    return toString (v, false);\n-  }\n-\n+  /**\n+   * Return the result of calling <code>new Double(java.lang.String)</code>.\n+   *\n+   * @param s the <code>String</code> to convert to a <code>Double</code>.\n+   * @return a new <code>Double</code> representing the <code>String</code>'s\n+   *         numeric value.\n+   *\n+   * @exception NullPointerException thrown if <code>String</code> is \n+   * <code>null</code>.\n+   * @exception NumberFormatException thrown if <code>String</code> cannot\n+   * be parsed as a <code>double</code>.\n+   * @see #Double(java.lang.String)\n+   * @see #parseDouble(java.lang.String)\n+   */\n   public static Double valueOf (String s) throws NumberFormatException\n   {\n-    return new Double (parseDouble (s));\n+    return new Double (s);\n   }\n \n+  /**\n+   * Return <code>true</code> if the value of this <code>Double</code>\n+   * is the same as <code>NaN</code>, otherwise return <code>false</code>.\n+   * @return whether this <code>Double</code> is <code>NaN</code>.\n+   */\n   public boolean isNaN ()\n   {\n     return isNaN (value);\n   }\n \n+  /**\n+   * Return <code>true</code> if the <code>double</code> has the same\n+   * value as <code>NaN</code>, otherwise return <code>false</code>.\n+   *\n+   * @param v the <code>double</code> to compare\n+   * @return whether the argument is <code>NaN</code>.\n+   */\n   public static boolean isNaN (double v)\n   {\n     long bits = doubleToLongBits (v);\n@@ -124,11 +255,26 @@ public static boolean isNaN (double v)\n     return e == 0x7ff0000000000000L && f != 0L;\n   }\n \n+  /**\n+   * Return <code>true</code> if the value of this <code>Double</code>\n+   * is the same as <code>NEGATIVE_INFINITY</code> or \n+   * <code>POSITIVE_INFINITY</code>, otherwise return <code>false</code>.\n+   *\n+   * @return whether this <code>Double</code> is (-/+) infinity.\n+   */\n   public boolean isInfinite ()\n   {\n     return isInfinite (value);\n   }\n \n+  /**\n+   * Return <code>true</code> if the <code>double</code> has a value \n+   * equal to either <code>NEGATIVE_INFINITY</code> or \n+   * <code>POSITIVE_INFINITY</code>, otherwise return <code>false</code>.\n+   *\n+   * @param v the <code>double</code> to compare\n+   * @return whether the argument is (-/+) infinity.\n+   */\n   public static boolean isInfinite (double v)\n   {\n     long bits = doubleToLongBits (v);\n@@ -137,29 +283,230 @@ public static boolean isInfinite (double v)\n     return f == 0x7ff0000000000000L;\n   }\n \n-  public static native long doubleToLongBits (double value);\n-  public static native long doubleToRawLongBits (double value);\n-  public static native double longBitsToDouble (long bits);\n-\n+  /**\n+   * Returns 0 if the <code>double</code> value of the argument is \n+   * equal to the value of this <code>Double</code>.  Returns a number\n+   * less than zero if the value of this <code>Double</code> is less \n+   * than the <code>double</code> value of the argument, and returns a \n+   * number greater than zero if the value of this <code>Double</code> \n+   * is greater than the <code>double</code> value of the argument.\n+   * <br>\n+   * <code>Double.NaN</code> is greater than any number other than itself, \n+   * even <code>Double.POSITIVE_INFINITY</code>.\n+   * <br>\n+   * <code>0.0d</code> is greater than <code>-0.0d</code>.\n+   *\n+   * @param d the Double to compare to.\n+   * @return  0 if the <code>Double</code>s are the same, &lt; 0 if this\n+   *          <code>Double</code> is less than the <code>Double</code> in\n+   *          in question, or &gt; 0 if it is greater.\n+   * @since 1.2\n+   */\n   public int compareTo (Double d)\n   {\n-    double v = d.value;\n-    if (isNaN (value))\n-      return isNaN (v) ? 1 : 0;\n-    else if (isNaN (v))\n+    return compare (value, d.value);\n+  }\n+\n+  /**\n+   * Returns 0 if the first argument is equal to the second argument.\n+   * Returns a number less than zero if the first argument is less than the\n+   * second argument, and returns a number greater than zero if the first\n+   * argument is greater than the second argument.\n+   * <br>\n+   * <code>Double.NaN</code> is greater than any number other than itself, \n+   * even <code>Double.POSITIVE_INFINITY</code>.\n+   * <br>\n+   * <code>0.0d</code> is greater than <code>-0.0d</code>.\n+   *\n+   * @param x the first double to compare.\n+   * @param y the second double to compare.\n+   * @return  0 if the arguments are the same, &lt; 0 if the\n+   *          first argument is less than the second argument in\n+   *          in question, or &gt; 0 if it is greater.\n+   * @since 1.4\n+   */\n+  public static int compare (double x, double y)\n+  {\n+    if (isNaN (x))\n+      return isNaN (y) ? 0 : 1;\n+    if (isNaN (y))\n       return -1;\n-    else if (value == 0.0 && v == -0.0)\n+    if (x == 0.0d && y == -0.0d)\n       return 1;\n-    else if (value == -0.0 && v == 0.0)\n+    if (x == -0.0d && y == 0.0d)\n       return -1;\n-    else if (value == v)\n+    if (x == y)\n       return 0;\n \n-    return value > v ? 1 : -1;\n+    return x > y ? 1 : -1;\n   }\n \n+  /**\n+   * Compares the specified <code>Object</code> to this <code>Double</code>\n+   * if and only if the <code>Object</code> is an instanceof \n+   * <code>Double</code>.\n+   *\n+   * @param o the Object to compare to.\n+   * @return  0 if the <code>Double</code>s are the same, &lt; 0 if this\n+   *          <code>Double</code> is less than the <code>Double</code> in\n+   *          in question, or &gt; 0 if it is greater.\n+   * @throws ClassCastException if the argument is not a <code>Double</code>\n+   */\n   public int compareTo (Object o)\n   {\n     return compareTo ((Double) o);\n   }\n+\n+  /**\n+   * Convert the <code>double</code> to a <code>String</code>.\n+   * <P>\n+   * \n+   * Floating-point string representation is fairly complex: here is a\n+   * rundown of the possible values.  \"<CODE>[-]</CODE>\" indicates that a\n+   * negative sign will be printed if the value (or exponent) is negative.\n+   * \"<CODE>&lt;number&gt;</CODE>\" means a string of digits (0-9).\n+   * \"<CODE>&lt;digit&gt;</CODE>\" means a single digit (0-9).\n+   * <P>\n+   *\n+   * <TABLE BORDER=1>\n+   * <TR><TH>Value of Float</TH><TH>String Representation</TH></TR>\n+   * <TR>\n+   *     <TD>[+-] 0</TD>\n+   *     <TD>[<CODE>-</CODE>]<CODE>0.0</CODE></TD>\n+   * </TR>\n+   * <TR>\n+   *     <TD>Between [+-] 10<SUP>-3</SUP> and 10<SUP>7</SUP></TD>\n+   *     <TD><CODE>[-]number.number</CODE></TD>\n+   * </TR>\n+   * <TR>\n+   *     <TD>Other numeric value</TD>\n+   *     <TD><CODE>[-]&lt;digit&gt;.&lt;number&gt;E[-]&lt;number&gt;</CODE></TD>\n+   * </TR>\n+   * <TR>\n+   *     <TD>[+-] infinity</TD>\n+   *     <TD><CODE>[-]Infinity</CODE></TD>\n+   * </TR>\n+   * <TR>\n+   *     <TD>NaN</TD>\n+   *     <TD><CODE>NaN</CODE></TD>\n+   * </TR>\n+   * </TABLE>\n+   *\n+   * Yes, negative zero <EM>is</EM> a possible value.  Note that there is\n+   * <EM>always</EM> a <CODE>.</CODE> and at least one digit printed after\n+   * it: even if the number is 3, it will be printed as <CODE>3.0</CODE>.\n+   * After the \".\", all digits will be printed except trailing zeros.  No\n+   * truncation or rounding is done by this function.\n+   *\n+   *\n+   * @XXX specify where we are not in accord with the spec.\n+   *\n+   * @param d the <code>double</code> to convert\n+   * @return the <code>String</code> representing the <code>double</code>.\n+   */\n+  public static String toString (double d)\n+  {\n+    return toString (d, false);\n+  }\n+\n+  static native String toString (double d, boolean isFloat);\n+\n+  /**\n+   * Return the long bits of the specified <code>double</code>.\n+   * The result of this function can be used as the argument to\n+   * <code>Double.longBitsToDouble(long)</code> to obtain the\n+   * original <code>double</code> value.\n+   *\n+   * @param value the <code>double</code> to convert\n+   * @return the bits of the <code>double</code>.\n+   */\n+  public static native long doubleToLongBits (double value);\n+\n+  /**\n+   * Return the long bits of the specified <code>double</code>.\n+   * The result of this function can be used as the argument to\n+   * <code>Double.longBitsToDouble(long)</code> to obtain the\n+   * original <code>double</code> value.  This method differs from \n+   * <code>doubleToLongBits</code> in that it does not collapse\n+   * NaN values.\n+   *\n+   * @param value the <code>double</code> to convert\n+   * @return the bits of the <code>double</code>.\n+   */\n+  public static native long doubleToRawLongBits (double value);\n+\n+  /**\n+   * Return the <code>double</code> represented by the long\n+   * bits specified.\n+   *\n+   * @param bits the long bits representing a <code>double</code>\n+   * @return the <code>double</code> represented by the bits.\n+   */\n+  public static native double longBitsToDouble (long bits);\n+\n+  /**\n+   * Parse the specified <code>String</code> as a <code>double</code>.\n+   *\n+   * The number is really read as <em>n * 10<sup>exponent</sup></em>.  The\n+   * first number is <em>n</em>, and if there is an \"<code>E</code>\"\n+   * (\"<code>e</code>\" is also acceptable), then the integer after that is\n+   * the exponent.\n+   * <P>\n+   * Here are the possible forms the number can take:\n+   * <BR>\n+   * <TABLE BORDER=1>\n+   *     <TR><TH>Form</TH><TH>Examples</TH></TR>\n+   *     <TR><TD><CODE>[+-]&lt;number&gt;[.]</CODE></TD><TD>345., -10, 12</TD></TR>\n+   *     <TR><TD><CODE>[+-]&lt;number&gt;.&lt;number&gt;</CODE></TD><TD>40.2, 80.00, -12.30</TD></TR>\n+   *     <TR><TD><CODE>[+-]&lt;number&gt;[.]E[+-]&lt;number&gt;</CODE></TD><TD>80E12, -12e+7, 4.E-123</TD></TR>\n+   *     <TR><TD><CODE>[+-]&lt;number&gt;.&lt;number&gt;E[+-]&lt;number&gt;</CODE></TD><TD>6.02e-22, -40.2E+6, 12.3e9</TD></TR>\n+   * </TABLE>\n+   *\n+   * \"<code>[+-]</code>\" means either a plus or minus sign may go there, or\n+   * neither, in which case + is assumed.\n+   * <BR>\n+   * \"<code>[.]</code>\" means a dot may be placed here, but is optional.\n+   * <BR>\n+   * \"<code>&lt;number&gt;</code>\" means a string of digits (0-9), basically\n+   * an integer.  \"<code>&lt;number&gt;.&lt;number&gt;</code>\" is basically\n+   * a real number, a floating-point value.\n+   * <P>\n+   *\n+   * Remember that a <code>double</code> has a limited range.  If the\n+   * number you specify is greater than <code>Double.MAX_VALUE</code> or less\n+   * than <code>-Double.MAX_VALUE</code>, it will be set at\n+   * <code>Double.POSITIVE_INFINITY</code> or\n+   * <code>Double.NEGATIVE_INFINITY</code>, respectively.\n+   * <P>\n+   * Note also that <code>double</code> does not have perfect precision.  Many\n+   * numbers cannot be precisely represented.  The number you specify\n+   * will be rounded to the nearest representable value.\n+   * <code>Double.MIN_VALUE</code> is the margin of error for\n+   * <code>double</code> values.\n+   * <P>\n+   * If an unexpected character is found in the <code>String</code>, a\n+   * <code>NumberFormatException</code> will be thrown.  Spaces are not\n+   * allowed, and will cause the same exception.\n+   *\n+   * @XXX specify where/how we are not in accord with the spec.\n+   *\n+   * @param str the <code>String</code> to convert\n+   * @return the value of the <code>String</code> as a <code>double</code>.\n+   * @exception NumberFormatException when the string cannot be parsed to a\n+   *            <code>double</code>.\n+   * @exception NullPointerException when the string is null.\n+   * @see #MIN_VALUE\n+   * @see #MAX_VALUE\n+   * @see #POSITIVE_INFINITY\n+   * @see #NEGATIVE_INFINITY\n+   * @since 1.2\n+   */\n+  public native static double parseDouble (String s) \n+    throws NumberFormatException;\n+\n+  /**\n+   * Initialize JNI cache.  This method is called only by the \n+   * static initializer when using JNI.\n+   */\n+  private static void initIDs () { /* Not used in libgcj */ };\n }"}, {"sha": "91da0754d6000081b768942a63db93776d160173", "filename": "libjava/java/lang/Float.java", "status": "modified", "additions": 376, "deletions": 36, "changes": 412, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06c0908ba6fe852184b9d6f989d43da73fe1bafe/libjava%2Fjava%2Flang%2FFloat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06c0908ba6fe852184b9d6f989d43da73fe1bafe/libjava%2Fjava%2Flang%2FFloat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FFloat.java?ref=06c0908ba6fe852184b9d6f989d43da73fe1bafe", "patch": "@@ -1,54 +1,194 @@\n-/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n+/* java.lang.Float\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n \n-/**\n- * @author Andrew Haley <aph@cygnus.com>\n- * @date September 25, 1998.  \n- */\n+import gnu.classpath.Configuration;\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n \n+/**\n+ * Instances of class <code>Float</code> represent primitive\n+ * <code>float</code> values.\n+ *\n+ * Additionally, this class provides various helper functions and variables\n+ * related to floats.\n+ *\n+ * @author Paul Fisher\n+ * @author Andrew Haley <aph@cygnus.com>\n+ * @since JDK 1.0\n+ */\n public final class Float extends Number implements Comparable\n {\n+  /**\n+   * The maximum positive value a <code>double</code> may represent\n+   * is 3.4028235e+38f.\n+   */\n   public static final float MAX_VALUE = 3.4028235e+38f;\n+\n+  /**\n+   * The minimum positive value a <code>float</code> may represent\n+   * is 1.4e-45.\n+   */\n   public static final float MIN_VALUE = 1.4e-45f;\n+\n+  /**\n+   * The value of a float representation -1.0/0.0, negative infinity.\n+   */\n   public static final float NEGATIVE_INFINITY = -1.0f/0.0f;\n+\n+  /**\n+   * The value of a float representation 1.0/0.0, positive infinity.\n+   */\n   public static final float POSITIVE_INFINITY = 1.0f/0.0f;\n+\n+  /**\n+   * All IEEE 754 values of NaN have the same value in Java.\n+   */\n   public static final float NaN = 0.0f/0.0f;\n \n-  // This initialization is seemingly circular, but it is accepted\n-  // by javac, and is handled specially by gcc.\n-  public static final Class TYPE = float.class;\n+  /**\n+   * The primitive type <code>float</code> is represented by this \n+   * <code>Class</code> object.\n+   */\n+  public static final Class TYPE = VMClassLoader.getPrimitiveClass (\"float\");\n \n-  private float value;\n+  /**\n+   * The immutable value of this Float.\n+   */\n+  private final float value;\n \n   private static final long serialVersionUID = -2671257302660747028L;\n \n+  static\n+  {\n+    if (Configuration.INIT_LOAD_LIBRARY)\n+      {\n+\tSystem.loadLibrary (\"javalang\");\n+      }\n+  }\n+\n+  /**\n+   * Create a <code>float</code> from the primitive <code>Float</code>\n+   * specified.\n+   *\n+   * @param value the <code>Float</code> argument\n+   */\n   public Float (float value)\n   {\n     this.value = value;\n   }\n \n+  /**\n+   * Create a <code>Float</code> from the primitive <code>double</code>\n+   * specified.\n+   *\n+   * @param value the <code>double</code> argument\n+   */\n   public Float (double value)\n   {\n     this.value = (float)value;\n   }\n \n+  /**\n+   * Create a <code>Float</code> from the specified <code>String</code>.\n+   *\n+   * This method calls <code>Float.parseFloat()</code>.\n+   *\n+   * @exception NumberFormatException when the <code>String</code> cannot\n+   *            be parsed into a <code>Float</code>.\n+   * @param s the <code>String</code> to convert\n+   * @see #parseFloat(java.lang.String)\n+   */\n   public Float (String s) throws NumberFormatException\n   {\n-    this.value = valueOf (s).floatValue ();\n+    this.value = parseFloat (s);\n   }\n \n+  /**\n+   * Parse the specified <code>String</code> as a <code>float</code>.\n+   *\n+   * The number is really read as <em>n * 10<sup>exponent</sup></em>.  The\n+   * first number is <em>n</em>, and if there is an \"<code>E</code>\"\n+   * (\"<code>e</code>\" is also acceptable), then the integer after that is\n+   * the exponent.\n+   * <P>\n+   * Here are the possible forms the number can take:\n+   * <BR>\n+   * <TABLE BORDER=1>\n+   *     <TR><TH>Form</TH><TH>Examples</TH></TR>\n+   *     <TR><TD><CODE>[+-]&lt;number&gt;[.]</CODE></TD><TD>345., -10, 12</TD></TR>\n+   *     <TR><TD><CODE>[+-]&lt;number&gt;.&lt;number&gt;</CODE></TD><TD>40.2, 80.00, -12.30</TD></TR>\n+   *     <TR><TD><CODE>[+-]&lt;number&gt;[.]E[+-]&lt;number&gt;</CODE></TD><TD>80E12, -12e+7, 4.E-123</TD></TR>\n+   *     <TR><TD><CODE>[+-]&lt;number&gt;.&lt;number&gt;E[+-]&lt;number&gt;</CODE></TD><TD>6.02e-22, -40.2E+6, 12.3e9</TD></TR>\n+   * </TABLE>\n+   *\n+   * \"<code>[+-]</code>\" means either a plus or minus sign may go there, or\n+   * neither, in which case + is assumed.\n+   * <BR>\n+   * \"<code>[.]</code>\" means a dot may be placed here, but is optional.\n+   * <BR>\n+   * \"<code>&lt;number&gt;</code>\" means a string of digits (0-9), basically\n+   * an integer.  \"<code>&lt;number&gt;.&lt;number&gt;</code>\" is basically\n+   * a real number, a floating-point value.\n+   * <P>\n+   * Remember that a <code>float</code> has a limited range.  If the\n+   * number you specify is greater than <code>Float.MAX_VALUE</code> or less\n+   * than <code>-Float.MAX_VALUE</code>, it will be set at\n+   * <code>Float.POSITIVE_INFINITY</code> or\n+   * <code>Float.NEGATIVE_INFINITY</code>, respectively.\n+   * <P>\n+   *\n+   * Note also that <code>float</code> does not have perfect precision.  Many\n+   * numbers cannot be precisely represented.  The number you specify\n+   * will be rounded to the nearest representable value.\n+   * <code>Float.MIN_VALUE</code> is the margin of error for <code>float</code>\n+   * values.\n+   * <P>\n+   * If an unexpected character is found in the <code>String</code>, a\n+   * <code>NumberFormatException</code> will be thrown.  Spaces are not\n+   * allowed and will cause this exception to be thrown.\n+   *\n+   * @XXX specify where/how we are not in accord with the spec.\n+   *\n+   * @param str the <code>String</code> to convert\n+   * @return the value of the <code>String</code> as a <code>float</code>.\n+   * @exception NumberFormatException when the string cannot be parsed to a\n+   *            <code>float</code>.\n+   * @since JDK 1.2\n+   * @see #MIN_VALUE\n+   * @see #MAX_VALUE\n+   * @see #POSITIVE_INFINITY\n+   * @see #NEGATIVE_INFINITY\n+   */\n   public static float parseFloat (String s) throws NumberFormatException\n   {\n     // The spec says that parseFloat() should work like\n@@ -57,11 +197,28 @@ public static float parseFloat (String s) throws NumberFormatException\n     return (float) Double.parseDouble (s);\n   }\n \n+  /**\n+   * Convert the <code>float</code> value of this <code>Float</code>\n+   * to a <code>String</code>.  This method calls\n+   * <code>Float.toString(float)</code> to do its dirty work.\n+   *\n+   * @return the <code>String</code> representation of this <code>Float</code>.\n+   * @see #toString(float)\n+   */\n   public String toString ()\n   {\n     return toString (value);\n   }\n \n+  /**\n+   * If the <code>Object</code> is not <code>null</code>, is an\n+   * <code>instanceof</code> <code>Float</code>, and represents\n+   * the same primitive <code>float</code> value return \n+   * <code>true</code>.  Otherwise <code>false</code> is returned.\n+   *\n+   * @param obj the object to compare to\n+   * @return whether the objects are semantically equal.\n+   */\n   public boolean equals (Object obj)\n   {\n     if (!(obj instanceof Float))\n@@ -72,56 +229,139 @@ public boolean equals (Object obj)\n     return floatToIntBits (value) == floatToIntBits (f.floatValue ());\n   }\n \n+  /**\n+   * Return a hashcode representing this Object.\n+   * <code>Float</code>'s hash code is calculated by calling the\n+   * <code>floatToIntBits()</code> function.\n+   * @return this Object's hash code.\n+   * @see java.lang.Float.floatToIntBits(float)\n+   */\n   public int hashCode ()\n   {\n     return floatToIntBits (value);\n   }\n \n+  /**\n+   * Return the value of this <code>Double</code> when cast to an \n+   * <code>int</code>.\n+   */\n   public int intValue ()\n   {\n     return (int) value;\n   }\n \n+  /**\n+   * Return the value of this <code>Double</code> when cast to a\n+   * <code>long</code>.\n+   */\n   public long longValue ()\n   {\n     return (long) value;\n   }\n \n+  /**\n+   * Return the value of this <code>Double</code> when cast to a\n+   * <code>float</code>.\n+   */\n   public float floatValue ()\n   {\n     return (float) value;\n   }\n \n+  /**\n+   * Return the primitive <code>double</code> value represented by this\n+   * <code>Double</code>.\n+   */\n   public double doubleValue ()\n   {\n     return (double) value;\n   }\n \n-  public byte byteValue ()\n-  {\n-    return (byte) value;\n-  }\n-\n-  public short shortValue ()\n+  /**\n+   * Convert the <code>float</code> to a <code>String</code>.\n+   * <P>\n+   *\n+   * Floating-point string representation is fairly complex: here is a\n+   * rundown of the possible values.  \"<CODE>[-]</CODE>\" indicates that a\n+   * negative sign will be printed if the value (or exponent) is negative.\n+   * \"<CODE>&lt;number&gt;</CODE>\" means a string of digits (0-9).\n+   * \"<CODE>&lt;digit&gt;</CODE>\" means a single digit (0-9).\n+   * <P>\n+   *\n+   * <TABLE BORDER=1>\n+   * <TR><TH>Value of Float</TH><TH>String Representation</TH></TR>\n+   * <TR>\n+   *     <TD>[+-] 0</TD>\n+   *     <TD>[<CODE>-</CODE>]<CODE>0.0</CODE></TD>\n+   * </TR>\n+   * <TR>\n+   *     <TD>Between [+-] 10<SUP>-3</SUP> and 10<SUP>7</SUP></TD>\n+   *     <TD><CODE>[-]number.number</CODE></TD>\n+   * </TR>\n+   * <TR>\n+   *     <TD>Other numeric value</TD>\n+   *     <TD><CODE>[-]&lt;digit&gt;.&lt;number&gt;E[-]&lt;number&gt;</CODE></TD>\n+   * </TR>\n+   * <TR>\n+   *     <TD>[+-] infinity</TD>\n+   *     <TD><CODE>[-]Infinity</CODE></TD>\n+   * </TR>\n+   * <TR>\n+   *     <TD>NaN</TD>\n+   *     <TD><CODE>NaN</CODE></TD>\n+   * </TR>\n+   * </TABLE>\n+   *\n+   * Yes, negative zero <EM>is</EM> a possible value.  Note that there is\n+   * <EM>always</EM> a <CODE>.</CODE> and at least one digit printed after\n+   * it: even if the number is 3, it will be printed as <CODE>3.0</CODE>.\n+   * After the \".\", all digits will be printed except trailing zeros.  No\n+   * truncation or rounding is done by this function.\n+   *\n+   * @XXX specify where we are not in accord with the spec.\n+   *\n+   * @param f the <code>float</code> to convert\n+   * @return the <code>String</code> representing the <code>float</code>.\n+   */\n+  public static String toString (float f)\n   {\n-    return (short) value;\n+    return Double.toString ((double) f, true);\n   }\n \n-  public static String toString (float v)\n-  {\n-    return Double.toString ((double) v, true);\n-  } \n-\n+  /**\n+   * Return the result of calling <code>new Float(java.lang.String)</code>.\n+   *\n+   * @param s the <code>String</code> to convert to a <code>Float</code>.\n+   * @return a new <code>Float</code> representing the <code>String</code>'s\n+   *         numeric value.\n+   *\n+   * @exception NumberFormatException thrown if <code>String</code> cannot\n+   * be parsed as a <code>double</code>.\n+   * @see #Float(java.lang.String)\n+   * @see #parseFloat(java.lang.String)\n+   */\n   public static Float valueOf (String s) throws NumberFormatException\n   {\n-    return new Float (Double.valueOf (s).floatValue ());\n+    return new Float (s);\n   }\n \n+  /**\n+   * Return <code>true</code> if the value of this <code>Float</code>\n+   * is the same as <code>NaN</code>, otherwise return <code>false</code>.\n+   * @return whether this <code>Float</code> is <code>NaN</code>.\n+   */\n   public boolean isNaN ()\n   {\n     return isNaN (value);\n   }\n \n+  /**\n+   * Return <code>true</code> if the <code>float</code> has the same\n+   * value as <code>NaN</code>, otherwise return <code>false</code>.\n+   *\n+   * @param v the <code>float</code> to compare\n+   * @return whether the argument is <code>NaN</code>.\n+   */\n   public static boolean isNaN (float v)\n   {\n     int bits = floatToIntBits (v);\n@@ -131,11 +371,26 @@ public static boolean isNaN (float v)\n     return e == 0x7f800000 && f != 0;\n   }\n \n+  /**\n+   * Return <code>true</code> if the value of this <code>Float</code>\n+   * is the same as <code>NEGATIVE_INFINITY</code> or \n+   * <code>POSITIVE_INFINITY</code>, otherwise return <code>false</code>.\n+   *\n+   * @return whether this <code>Float</code> is (-/+) infinity.\n+   */\n   public boolean isInfinite ()\n   {\n     return isInfinite (value);\n   }\n \n+  /**\n+   * Return <code>true</code> if the <code>float</code> has a value \n+   * equal to either <code>NEGATIVE_INFINITY</code> or \n+   * <code>POSITIVE_INFINITY</code>, otherwise return <code>false</code>.\n+   *\n+   * @param v the <code>float</code> to compare\n+   * @return whether the argument is (-/+) infinity.\n+   */\n   public static boolean isInfinite (float v)\n   {\n     int bits = floatToIntBits (v);\n@@ -144,27 +399,112 @@ public static boolean isInfinite (float v)\n     return f == 0x7f800000;\n   }\n \n+  /**\n+   * Return the int bits of the specified <code>float</code>.\n+   * The result of this function can be used as the argument to\n+   * <code>Float.intBitsToFloat(long)</code> to obtain the\n+   * original <code>float</code> value.\n+   *\n+   * @param value the <code>float</code> to convert\n+   * @return the bits of the <code>float</code>.\n+   */\n   public static native int floatToIntBits (float value);\n+\n+  /**\n+   * Return the int bits of the specified <code>float</code>.\n+   * The result of this function can be used as the argument to\n+   * <code>Float.intBitsToFloat(long)</code> to obtain the\n+   * original <code>float</code> value.  The difference between\n+   * this function and <code>floatToIntBits</code> is that this\n+   * function does not collapse NaN values.\n+   *\n+   * @param value the <code>float</code> to convert\n+   * @return the bits of the <code>float</code>.\n+   */\n   public static native int floatToRawIntBits (float value);\n+\n+  /**\n+   * Return the <code>float</code> represented by the long\n+   * bits specified.\n+   *\n+   * @param bits the long bits representing a <code>double</code>\n+   * @return the <code>float</code> represented by the bits.\n+   */\n   public static native float intBitsToFloat (int bits);\n \n-  public int compareTo (Float d)\n+  /**\n+   * Returns 0 if the <code>float</code> value of the argument is \n+   * equal to the value of this <code>Float</code>.  Returns a number\n+   * less than zero if the value of this <code>Float</code> is less \n+   * than the <code>Float</code> value of the argument, and returns a \n+   * number greater than zero if the value of this <code>Float</code> \n+   * is greater than the <code>float</code> value of the argument.\n+   * <br>\n+   * <code>Float.NaN</code> is greater than any number other than itself, \n+   * even <code>Float.POSITIVE_INFINITY</code>.\n+   * <br>\n+   * <code>0.0</code> is greater than <code>-0.0</code>.\n+   *\n+   * @param f the Float to compare to.\n+   * @return  0 if the <code>Float</code>s are the same, &lt; 0 if this\n+   *          <code>Float</code> is less than the <code>Float</code> in\n+   *          in question, or &gt; 0 if it is greater.\n+   *\n+   * @since 1.2\n+   */\n+  public int compareTo (Float f)\n+  {\n+    return compare (value, f.value);\n+  }\n+\n+  /**\n+   * Returns 0 if the first argument is equal to the second argument.\n+   * Returns a number less than zero if the first argument is less than the\n+   * second argument, and returns a number greater than zero if the first\n+   * argument is greater than the second argument.\n+   * <br>\n+   * <code>Float.NaN</code> is greater than any number other than itself, \n+   * even <code>Float.POSITIVE_INFINITY</code>.\n+   * <br>\n+   * <code>0.0</code> is greater than <code>-0.0</code>.\n+   *\n+   * @param x the first float to compare.\n+   * @param y the second float to compare.\n+   * @return  0 if the arguments are the same, &lt; 0 if the\n+   *          first argument is less than the second argument in\n+   *          in question, or &gt; 0 if it is greater.\n+   * @since 1.4\n+   */\n+  public static int compare (float x, float y)\n   {\n-    float v = d.value;\n-    if (isNaN (value))\n-      return isNaN (v) ? 1 : 0;\n-    else if (isNaN (v))\n+    if (isNaN (x))\n+      return isNaN (y) ? 0 : 1;\n+    if (isNaN (y))\n       return -1;\n-    else if (value == 0.0 && v == -0.0)\n+    if (x == 0.0 && y == -0.0)\n       return 1;\n-    else if (value == -0.0 && v == 0.0)\n+    if (x == -0.0 && y == 0.0)\n       return -1;\n-    else if (value == v)\n+    if (x == y)\n       return 0;\n \n-    return value > v ? 1 : -1;\n+    return x > y ? 1 : -1;\n   }\n \n+  /**\n+   * Compares the specified <code>Object</code> to this <code>Float</code>\n+   * if and only if the <code>Object</code> is an instanceof \n+   * <code>Float</code>.\n+   * Otherwise it throws a <code>ClassCastException</code>\n+   *\n+   * @param o the Object to compare to.\n+   * @return  0 if the <code>Float</code>s are the same, &lt; 0 if this\n+   *          <code>Float</code> is less than the <code>Float</code> in\n+   *          in question, or &gt; 0 if it is greater.\n+   * @throws ClassCastException if the argument is not a <code>Float</code>\n+   *\n+   * @since 1.2\n+   */\n   public int compareTo (Object o)\n   {\n     return compareTo ((Float) o);"}]}