{"sha": "8640a704710ef6a3b57b9c43bc3dee1bb5452e3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY0MGE3MDQ3MTBlZjZhM2I1N2I5YzQzYmMzZGVlMWJiNTQ1MmUzZA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-12-14T17:31:54Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-12-14T17:31:54Z"}, "message": "extend.texi (attribute access): Correct typos.\n\ngcc/ChangeLog:\n\n\t* doc/extend.texi (attribute access): Correct typos.\n\nFrom-SVN: r279398", "tree": {"sha": "a0b57a4a6a1aeecbb287d3dcc8831f6c42b81973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0b57a4a6a1aeecbb287d3dcc8831f6c42b81973"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8640a704710ef6a3b57b9c43bc3dee1bb5452e3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8640a704710ef6a3b57b9c43bc3dee1bb5452e3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8640a704710ef6a3b57b9c43bc3dee1bb5452e3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8640a704710ef6a3b57b9c43bc3dee1bb5452e3d/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "16570c12c91dc25beac2f96cf8b9d9b5ccd3cef3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16570c12c91dc25beac2f96cf8b9d9b5ccd3cef3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16570c12c91dc25beac2f96cf8b9d9b5ccd3cef3"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "9b892fa297235d6a2f97556279aab8b33e967d77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8640a704710ef6a3b57b9c43bc3dee1bb5452e3d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8640a704710ef6a3b57b9c43bc3dee1bb5452e3d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8640a704710ef6a3b57b9c43bc3dee1bb5452e3d", "patch": "@@ -1,3 +1,7 @@\n+2019-12-14  Martin Sebor  <msebor@redhat.com>\n+\n+\t* doc/extend.texi (attribute access): Correct typos.\n+\n 2019-12-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR ipa/92357"}, {"sha": "e6aefd10ab1f42c55b1858502928b5032c917391", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8640a704710ef6a3b57b9c43bc3dee1bb5452e3d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8640a704710ef6a3b57b9c43bc3dee1bb5452e3d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=8640a704710ef6a3b57b9c43bc3dee1bb5452e3d", "patch": "@@ -2489,10 +2489,10 @@ The following attributes are supported on most targets.\n @itemx access (@var{access-mode}, @var{ref-index}, @var{size-index})\n \n The @code{access} attribute enables the detection of invalid or unsafe\n-accesses by functions to which they apply to or their callers, as well\n-as write-only accesses to objects that are never read from.  Such accesses\n+accesses by functions to which they apply or their callers, as well as\n+write-only accesses to objects that are never read from.  Such accesses\n may be diagnosed by warnings such as @option{-Wstringop-overflow},\n-@option{-Wunnitialized}, @option{-Wunused}, and others.\n+@option{-Wuninitialized}, @option{-Wunused}, and others.\n \n The @code{access} attribute specifies that a function to whose by-reference\n arguments the attribute applies accesses the referenced object according to\n@@ -2501,13 +2501,13 @@ one of three names: @code{read_only}, @code{read_write}, or @code{write_only}.\n The remaining two are positional arguments.\n \n The required @var{ref-index} positional argument  denotes a function\n-argument of pointer (or in C++, refeference) type that is subject to\n+argument of pointer (or in C++, reference) type that is subject to\n the access.  The same pointer argument can be referenced by at most one\n distinct @code{access} attribute.\n \n The optional @var{size-index} positional argument denotes a function\n argument of integer type that specifies the maximum size of the access.\n-The size is the number of elements of the type refefenced by @var{ref-index},\n+The size is the number of elements of the type referenced by @var{ref-index},\n or the number of bytes when the pointer type is @code{void*}.  When no\n @var{size-index} argument is specified, the pointer argument must be either\n null or point to a space that is suitably aligned and large for at least one\n@@ -2520,10 +2520,10 @@ applies is used to read the referenced object but not write to it.  Unless\n the argument specifying the size of the access denoted by @var{size-index}\n is zero, the referenced object must be initialized.  The mode implies\n a stronger guarantee than the @code{const} qualifier which, when cast away\n-from a pointer, does not prevent a function from modifying the pointed-to\n-object.  Examples of the use of the @code{read_only} access mode is\n-the argument to the @code{puts} function, or the second and third arguments\n-to the @code{memcpy} function.\n+from a pointer, does not prevent the pointed-to object from being modified.\n+Examples of the use of the @code{read_only} access mode is the argument to\n+the @code{puts} function, or the second and third arguments to\n+the @code{memcpy} function.\n \n @smallexample\n __attribute__ ((access (read_only))) int puts (const char*);\n@@ -2534,7 +2534,7 @@ The @code{read_write} access mode applies to arguments of pointer types\n without the @code{const} qualifier.  It specifies that the pointer to which\n it applies is used to both read and write the referenced object.  Unless\n the argument specifying the size of the access denoted by @var{size-index}\n-is zero, the object refrenced by the pointer must be initialized.  An example\n+is zero, the object referenced by the pointer must be initialized.  An example\n of the use of the @code{read_write} access mode is the first argument to\n the @code{strcat} function.\n "}]}