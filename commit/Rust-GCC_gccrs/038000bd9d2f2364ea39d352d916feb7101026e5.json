{"sha": "038000bd9d2f2364ea39d352d916feb7101026e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM4MDAwYmQ5ZDJmMjM2NGVhMzlkMzUyZDkxNmZlYjcxMDEwMjZlNQ==", "commit": {"author": {"name": "Alan Hayward", "email": "alan.hayward@arm.com", "date": "2016-08-17T15:31:44Z"}, "committer": {"name": "Alan Hayward", "email": "alahay01@gcc.gnu.org", "date": "2016-08-17T15:31:44Z"}, "message": "re PR tree-optimization/71752 (ICE in compute_live_loop_exits, at tree-ssa-loop-manip.c:229 w/ -O1 -ftree-vectorize)\n\n2015-08-17  Alan Hayward <alan.hayward@arm.com>\n\n\tPR tree-optimization/71752\n\t* tree-vect-loop.c (vectorizable_reduction): Keep SLP operand ordering.\n\t* tree-vect-slp.c (vect_get_slp_defs): Handle null operands.\n\n\tPR tree-optimization/71752\n\t* gcc.dg/vect/pr71752.c: New\n\nFrom-SVN: r239542", "tree": {"sha": "7a69c7efc5236094c007afb91f4bcdb0b55b0494", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a69c7efc5236094c007afb91f4bcdb0b55b0494"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/038000bd9d2f2364ea39d352d916feb7101026e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/038000bd9d2f2364ea39d352d916feb7101026e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/038000bd9d2f2364ea39d352d916feb7101026e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/038000bd9d2f2364ea39d352d916feb7101026e5/comments", "author": {"login": "a74nh", "id": 4146708, "node_id": "MDQ6VXNlcjQxNDY3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a74nh", "html_url": "https://github.com/a74nh", "followers_url": "https://api.github.com/users/a74nh/followers", "following_url": "https://api.github.com/users/a74nh/following{/other_user}", "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}", "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions", "organizations_url": "https://api.github.com/users/a74nh/orgs", "repos_url": "https://api.github.com/users/a74nh/repos", "events_url": "https://api.github.com/users/a74nh/events{/privacy}", "received_events_url": "https://api.github.com/users/a74nh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dd42e908a081c76a0f0fee1af2ef53d9c4678672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd42e908a081c76a0f0fee1af2ef53d9c4678672", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd42e908a081c76a0f0fee1af2ef53d9c4678672"}], "stats": {"total": 122, "additions": 82, "deletions": 40}, "files": [{"sha": "6f6314671aa398214a7bcddc787a5bdf129d1222", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038000bd9d2f2364ea39d352d916feb7101026e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038000bd9d2f2364ea39d352d916feb7101026e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=038000bd9d2f2364ea39d352d916feb7101026e5", "patch": "@@ -1,3 +1,9 @@\n+2015-08-17  Alan Hayward <alan.hayward@arm.com>\n+\n+\tPR tree-optimization/71752\n+\t* tree-vect-loop.c (vectorizable_reduction): Keep SLP operand ordering.\n+\t* tree-vect-slp.c (vect_get_slp_defs): Handle null operands.\n+\n 2016-08-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gimple-fold.c (gimple_fold_call): Use gimple_call_noreturn_p"}, {"sha": "2c6ed263dca7327cd71555da58fb14c8321eea80", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038000bd9d2f2364ea39d352d916feb7101026e5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038000bd9d2f2364ea39d352d916feb7101026e5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=038000bd9d2f2364ea39d352d916feb7101026e5", "patch": "@@ -1,3 +1,8 @@\n+2015-08-17  Alan Hayward <alan.hayward@arm.com>\n+\n+\tPR tree-optimization/71752\n+\t* gcc.dg/vect/pr71752.c: New\n+\n 2016-08-17  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gfortran.dg/dec_init_2.f90: Use dg-add-options ieee."}, {"sha": "8d26754b4fedf8b104caae8742a445dffbf23f0a", "filename": "gcc/testsuite/gcc.dg/vect/pr71752.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038000bd9d2f2364ea39d352d916feb7101026e5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr71752.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038000bd9d2f2364ea39d352d916feb7101026e5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr71752.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr71752.c?ref=038000bd9d2f2364ea39d352d916feb7101026e5", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+\n+unsigned int q4, yg;\n+\n+unsigned int\n+w6 (unsigned int z5, unsigned int jv)\n+{\n+  unsigned int *f2 = &jv;\n+\n+  while (*f2 < 21)\n+    {\n+      q4 -= jv;\n+      z5 -= jv;\n+      f2 = &yg;\n+      ++(*f2);\n+    }\n+  return z5;\n+}\n+"}, {"sha": "c9ba5810e708154a3f7eb2d3c02daea0a30db281", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038000bd9d2f2364ea39d352d916feb7101026e5/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038000bd9d2f2364ea39d352d916feb7101026e5/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=038000bd9d2f2364ea39d352d916feb7101026e5", "patch": "@@ -5444,7 +5444,7 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n   auto_vec<tree> vect_defs;\n   auto_vec<gimple *> phis;\n   int vec_num;\n-  tree def0, def1, tem, op0, op1 = NULL_TREE;\n+  tree def0, def1, tem, op1 = NULL_TREE;\n   bool first_p = true;\n   tree cr_index_scalar_type = NULL_TREE, cr_index_vector_type = NULL_TREE;\n   tree cond_reduc_val = NULL_TREE, const_cond_cmp = NULL_TREE;\n@@ -6090,29 +6090,36 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n       /* Handle uses.  */\n       if (j == 0)\n         {\n-          op0 = ops[!reduc_index];\n-          if (op_type == ternary_op)\n-            {\n-              if (reduc_index == 0)\n-                op1 = ops[2];\n-              else\n-                op1 = ops[1];\n-            }\n+\t  if (slp_node)\n+\t    {\n+\t      /* Get vec defs for all the operands except the reduction index,\n+\t\tensuring the ordering of the ops in the vector is kept.  */\n+\t      auto_vec<tree, 3> slp_ops;\n+\t      auto_vec<vec<tree>, 3> vec_defs;\n \n-          if (slp_node)\n-            vect_get_vec_defs (op0, op1, stmt, &vec_oprnds0, &vec_oprnds1,\n-                               slp_node, -1);\n+\t      slp_ops.quick_push ((reduc_index == 0) ? NULL : ops[0]);\n+\t      slp_ops.quick_push ((reduc_index == 1) ? NULL : ops[1]);\n+\t      if (op_type == ternary_op)\n+\t\tslp_ops.quick_push ((reduc_index == 2) ? NULL : ops[2]);\n+\n+\t      vect_get_slp_defs (slp_ops, slp_node, &vec_defs, -1);\n+\n+\t      vec_oprnds0.safe_splice (vec_defs[(reduc_index == 0) ? 1 : 0]);\n+\t      if (op_type == ternary_op)\n+\t\tvec_oprnds1.safe_splice (vec_defs[(reduc_index == 2) ? 1 : 2]);\n+\t    }\n           else\n-            {\n+\t    {\n               loop_vec_def0 = vect_get_vec_def_for_operand (ops[!reduc_index],\n                                                             stmt);\n               vec_oprnds0.quick_push (loop_vec_def0);\n               if (op_type == ternary_op)\n                {\n+\t\t op1 = (reduc_index == 0) ? ops[2] : ops[1];\n                  loop_vec_def1 = vect_get_vec_def_for_operand (op1, stmt);\n                  vec_oprnds1.quick_push (loop_vec_def1);\n                }\n-            }\n+\t    }\n         }\n       else\n         {"}, {"sha": "5a611e42556e0931a372a6c626cc24846f11029d", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 31, "deletions": 26, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038000bd9d2f2364ea39d352d916feb7101026e5/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038000bd9d2f2364ea39d352d916feb7101026e5/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=038000bd9d2f2364ea39d352d916feb7101026e5", "patch": "@@ -3194,24 +3194,32 @@ vect_get_slp_defs (vec<tree> ops, slp_tree slp_node,\n {\n   gimple *first_stmt;\n   int number_of_vects = 0, i;\n-  unsigned int child_index = 0;\n   HOST_WIDE_INT lhs_size_unit, rhs_size_unit;\n   slp_tree child = NULL;\n   vec<tree> vec_defs;\n   tree oprnd;\n-  bool vectorized_defs;\n+  bool first_iteration = true;\n \n   first_stmt = SLP_TREE_SCALAR_STMTS (slp_node)[0];\n   FOR_EACH_VEC_ELT (ops, i, oprnd)\n     {\n+      bool vectorized_defs = false;\n+\n+      if (oprnd == NULL)\n+\t{\n+\t  vec_defs = vNULL;\n+\t  vec_defs.create (0);\n+\t  vec_oprnds->quick_push (vec_defs);\n+\t  continue;\n+\t}\n+\n       /* For each operand we check if it has vectorized definitions in a child\n \t node or we need to create them (for invariants and constants).  We\n \t check if the LHS of the first stmt of the next child matches OPRND.\n \t If it does, we found the correct child.  Otherwise, we call\n-\t vect_get_constant_vectors (), and not advance CHILD_INDEX in order\n-\t to check this child node for the next operand.  */\n-      vectorized_defs = false;\n-      if (SLP_TREE_CHILDREN (slp_node).length () > child_index)\n+\t vect_get_constant_vectors ().  */\n+      for (unsigned int child_index = 0;\n+\t   child_index < SLP_TREE_CHILDREN (slp_node).length (); child_index++)\n         {\n           child = SLP_TREE_CHILDREN (slp_node)[child_index];\n \n@@ -3231,30 +3239,25 @@ vect_get_slp_defs (vec<tree> ops, slp_tree slp_node,\n \t\t     statements.  */\n \t\t  number_of_vects = SLP_TREE_NUMBER_OF_VEC_STMTS (child);\n \t\t  vectorized_defs = true;\n-\t\t  child_index++;\n+\t\t  break;\n \t\t}\n \t    }\n-\t  else\n-\t    child_index++;\n         }\n \n-      if (!vectorized_defs)\n-        {\n-          if (i == 0)\n-            {\n-              number_of_vects = SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node);\n-              /* Number of vector stmts was calculated according to LHS in\n-                 vect_schedule_slp_instance (), fix it by replacing LHS with\n-                 RHS, if necessary.  See vect_get_smallest_scalar_type () for\n-                 details.  */\n-              vect_get_smallest_scalar_type (first_stmt, &lhs_size_unit,\n-                                             &rhs_size_unit);\n-              if (rhs_size_unit != lhs_size_unit)\n-                {\n-                  number_of_vects *= rhs_size_unit;\n-                  number_of_vects /= lhs_size_unit;\n-                }\n-            }\n+      if (!vectorized_defs && first_iteration)\n+\t{\n+\t  number_of_vects = SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node);\n+\t  /* Number of vector stmts was calculated according to LHS in\n+\t     vect_schedule_slp_instance (), fix it by replacing LHS with\n+\t     RHS, if necessary.  See vect_get_smallest_scalar_type () for\n+\t     details.  */\n+\t  vect_get_smallest_scalar_type (first_stmt, &lhs_size_unit,\n+\t\t\t\t\t &rhs_size_unit);\n+\t  if (rhs_size_unit != lhs_size_unit)\n+\t    {\n+\t      number_of_vects *= rhs_size_unit;\n+\t      number_of_vects /= lhs_size_unit;\n+\t    }\n         }\n \n       /* Allocate memory for vectorized defs.  */\n@@ -3276,6 +3279,8 @@ vect_get_slp_defs (vec<tree> ops, slp_tree slp_node,\n       /* For reductions, we only need initial values.  */\n       if (reduc_index != -1)\n         return;\n+\n+      first_iteration = false;\n     }\n }\n "}]}