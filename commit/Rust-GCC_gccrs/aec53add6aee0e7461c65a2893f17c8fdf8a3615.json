{"sha": "aec53add6aee0e7461c65a2893f17c8fdf8a3615", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVjNTNhZGQ2YWVlMGU3NDYxYzY1YTI4OTNmMTdjOGZkZjhhMzYxNQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-07-01T13:09:39Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-07-01T13:09:39Z"}, "message": "simplify-rtx.c (simplify_binary_operation): Use rtx_cost instead of \"had_mult\" to determine whether the transformed...\n\n\n\t* simplify-rtx.c (simplify_binary_operation) <PLUS, MINUS>: Use\n\trtx_cost instead of \"had_mult\" to determine whether the transformed\n\texpression is cheaper than the original.\n\nFrom-SVN: r83981", "tree": {"sha": "7d647f707e994c9eeea5a4841a73dd0d482ff1c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d647f707e994c9eeea5a4841a73dd0d482ff1c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aec53add6aee0e7461c65a2893f17c8fdf8a3615", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aec53add6aee0e7461c65a2893f17c8fdf8a3615", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aec53add6aee0e7461c65a2893f17c8fdf8a3615", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aec53add6aee0e7461c65a2893f17c8fdf8a3615/comments", "author": null, "committer": null, "parents": [{"sha": "3c0cb5de6a4e067a36096c2141384bf9e3f520b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c0cb5de6a4e067a36096c2141384bf9e3f520b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c0cb5de6a4e067a36096c2141384bf9e3f520b6"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "69704658ea83799d7e8faade03e4a9ed05c17e5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec53add6aee0e7461c65a2893f17c8fdf8a3615/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec53add6aee0e7461c65a2893f17c8fdf8a3615/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aec53add6aee0e7461c65a2893f17c8fdf8a3615", "patch": "@@ -1,3 +1,9 @@\n+2004-07-01  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* simplify-rtx.c (simplify_binary_operation) <PLUS, MINUS>: Use\n+\trtx_cost instead of \"had_mult\" to determine whether the transformed\n+\texpression is cheaper than the original.\n+\n 2004-07-01  Jerry Quinn  <jlquinn@optonline.net>\n \n \t* alias.c (get_alias_set, canon_rtx, get_addr,"}, {"sha": "3789f3376c4ee5ae041edf15ce998d1b63728561", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec53add6aee0e7461c65a2893f17c8fdf8a3615/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec53add6aee0e7461c65a2893f17c8fdf8a3615/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=aec53add6aee0e7461c65a2893f17c8fdf8a3615", "patch": "@@ -1506,21 +1506,19 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t     if the multiplication is written as a shift.  If so, we can\n \t     distribute and make a new multiply, shift, or maybe just\n \t     have X (if C is 2 in the example above).  But don't make\n-\t     real multiply if we didn't have one before.  */\n+\t     something more expensive than we had before.  */\n \n \t  if (! FLOAT_MODE_P (mode))\n \t    {\n \t      HOST_WIDE_INT coeff0 = 1, coeff1 = 1;\n \t      rtx lhs = op0, rhs = op1;\n-\t      int had_mult = 0;\n \n \t      if (GET_CODE (lhs) == NEG)\n \t\tcoeff0 = -1, lhs = XEXP (lhs, 0);\n \t      else if (GET_CODE (lhs) == MULT\n \t\t       && GET_CODE (XEXP (lhs, 1)) == CONST_INT)\n \t\t{\n \t\t  coeff0 = INTVAL (XEXP (lhs, 1)), lhs = XEXP (lhs, 0);\n-\t\t  had_mult = 1;\n \t\t}\n \t      else if (GET_CODE (lhs) == ASHIFT\n \t\t       && GET_CODE (XEXP (lhs, 1)) == CONST_INT\n@@ -1537,7 +1535,6 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t\t       && GET_CODE (XEXP (rhs, 1)) == CONST_INT)\n \t\t{\n \t\t  coeff1 = INTVAL (XEXP (rhs, 1)), rhs = XEXP (rhs, 0);\n-\t\t  had_mult = 1;\n \t\t}\n \t      else if (GET_CODE (rhs) == ASHIFT\n \t\t       && GET_CODE (XEXP (rhs, 1)) == CONST_INT\n@@ -1550,9 +1547,11 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \n \t      if (rtx_equal_p (lhs, rhs))\n \t\t{\n+\t\t  rtx orig = gen_rtx_PLUS (mode, op0, op1);\n \t\t  tem = simplify_gen_binary (MULT, mode, lhs,\n-\t\t\t\t\tGEN_INT (coeff0 + coeff1));\n-\t\t  return (GET_CODE (tem) == MULT && ! had_mult) ? 0 : tem;\n+\t\t\t\t\t     GEN_INT (coeff0 + coeff1));\n+\t\t  return rtx_cost (tem, SET) <= rtx_cost (orig, SET)\n+\t\t\t ? tem : 0;\n \t\t}\n \t    }\n \n@@ -1661,21 +1660,19 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t     if the multiplication is written as a shift.  If so, we can\n \t     distribute and make a new multiply, shift, or maybe just\n \t     have X (if C is 2 in the example above).  But don't make\n-\t     real multiply if we didn't have one before.  */\n+\t     something more expensive than we had before.  */\n \n \t  if (! FLOAT_MODE_P (mode))\n \t    {\n \t      HOST_WIDE_INT coeff0 = 1, coeff1 = 1;\n \t      rtx lhs = op0, rhs = op1;\n-\t      int had_mult = 0;\n \n \t      if (GET_CODE (lhs) == NEG)\n \t\tcoeff0 = -1, lhs = XEXP (lhs, 0);\n \t      else if (GET_CODE (lhs) == MULT\n \t\t       && GET_CODE (XEXP (lhs, 1)) == CONST_INT)\n \t\t{\n \t\t  coeff0 = INTVAL (XEXP (lhs, 1)), lhs = XEXP (lhs, 0);\n-\t\t  had_mult = 1;\n \t\t}\n \t      else if (GET_CODE (lhs) == ASHIFT\n \t\t       && GET_CODE (XEXP (lhs, 1)) == CONST_INT\n@@ -1692,7 +1689,6 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t\t       && GET_CODE (XEXP (rhs, 1)) == CONST_INT)\n \t\t{\n \t\t  coeff1 = INTVAL (XEXP (rhs, 1)), rhs = XEXP (rhs, 0);\n-\t\t  had_mult = 1;\n \t\t}\n \t      else if (GET_CODE (rhs) == ASHIFT\n \t\t       && GET_CODE (XEXP (rhs, 1)) == CONST_INT\n@@ -1705,9 +1701,11 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \n \t      if (rtx_equal_p (lhs, rhs))\n \t\t{\n+\t\t  rtx orig = gen_rtx_MINUS (mode, op0, op1);\n \t\t  tem = simplify_gen_binary (MULT, mode, lhs,\n \t\t\t\t\t     GEN_INT (coeff0 - coeff1));\n-\t\t  return (GET_CODE (tem) == MULT && ! had_mult) ? 0 : tem;\n+\t\t  return rtx_cost (tem, SET) <= rtx_cost (orig, SET)\n+\t\t\t ? tem : 0;\n \t\t}\n \t    }\n "}]}