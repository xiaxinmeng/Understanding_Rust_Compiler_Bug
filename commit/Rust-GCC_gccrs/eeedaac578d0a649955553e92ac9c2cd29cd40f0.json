{"sha": "eeedaac578d0a649955553e92ac9c2cd29cd40f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVlZGFhYzU3OGQwYTY0OTk1NTU1M2U5MmFjOWMyY2QyOWNkNDBmMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-23T12:21:21Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-23T12:21:21Z"}, "message": "[multiple changes]\n\n2015-10-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.adb (Is_Iterator, Is_Reversible_iterator): Use\n\troot type to determine whether the type is a descendant of the\n\tcorresponding interface type, so take into account multiple\n\tlevels of subtypes and derivations.\n\n2015-10-23  Olivier Hainque  <hainque@adacore.com>\n\n\t* tracebak.c: Refine selection of GCC/GENERIC_UNWINDER for\n\ttracebacks on x86 & x86_64.\n\t(x86 & x86_64): If !SJLJ, always pick the\n\tGCC_UNWINDER for x86_64 (not only on linux).\n\t* sem_util.ads: Minor fix in comment.\n\nFrom-SVN: r229239", "tree": {"sha": "27145c7a4103773c46481298b909513a23edc51e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27145c7a4103773c46481298b909513a23edc51e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eeedaac578d0a649955553e92ac9c2cd29cd40f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeedaac578d0a649955553e92ac9c2cd29cd40f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeedaac578d0a649955553e92ac9c2cd29cd40f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeedaac578d0a649955553e92ac9c2cd29cd40f0/comments", "author": null, "committer": null, "parents": [{"sha": "576da1ea413f42fceb2294db6bc38ab38f952e1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/576da1ea413f42fceb2294db6bc38ab38f952e1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/576da1ea413f42fceb2294db6bc38ab38f952e1b"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "f1ef4abd5e877d4facbaccb98f16080096bda5b7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeedaac578d0a649955553e92ac9c2cd29cd40f0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeedaac578d0a649955553e92ac9c2cd29cd40f0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=eeedaac578d0a649955553e92ac9c2cd29cd40f0", "patch": "@@ -1,3 +1,18 @@\n+2015-10-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (Is_Iterator, Is_Reversible_iterator): Use\n+\troot type to determine whether the type is a descendant of the\n+\tcorresponding interface type, so take into account multiple\n+\tlevels of subtypes and derivations.\n+\n+2015-10-23  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* tracebak.c: Refine selection of GCC/GENERIC_UNWINDER for\n+\ttracebacks on x86 & x86_64.\n+\t(x86 & x86_64): If !SJLJ, always pick the\n+\tGCC_UNWINDER for x86_64 (not only on linux).\n+\t* sem_util.ads: Minor fix in comment.\n+\n 2015-10-23  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_prag.adb (Analyze_Pragma): Pragma Volatile_Function should"}, {"sha": "325e3c584999738d91a4ca788311da25fd89d74b", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeedaac578d0a649955553e92ac9c2cd29cd40f0/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeedaac578d0a649955553e92ac9c2cd29cd40f0/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=eeedaac578d0a649955553e92ac9c2cd29cd40f0", "patch": "@@ -12119,12 +12119,16 @@ package body Sem_Util is\n       Iface       : Entity_Id;\n \n    begin\n+      --  The type may be a subtype of a descendant of the proper instance of\n+      --  the predefined interface type, so we must use the root type of the\n+      --  given type. The same us done for Is_Reversible_Iterator.\n+\n       if Is_Class_Wide_Type (Typ)\n-        and then Nam_In (Chars (Etype (Typ)), Name_Forward_Iterator,\n+        and then Nam_In (Chars (Root_Type (Typ)), Name_Forward_Iterator,\n                                               Name_Reversible_Iterator)\n         and then\n           Is_Predefined_File_Name\n-            (Unit_File_Name (Get_Source_Unit (Etype (Typ))))\n+            (Unit_File_Name (Get_Source_Unit (Root_Type (Typ))))\n       then\n          return True;\n \n@@ -13009,9 +13013,9 @@ package body Sem_Util is\n \n    begin\n       if Is_Class_Wide_Type (Typ)\n-        and then Chars (Etype (Typ)) = Name_Reversible_Iterator\n+        and then Chars (Root_Type (Typ)) = Name_Reversible_Iterator\n         and then Is_Predefined_File_Name\n-                   (Unit_File_Name (Get_Source_Unit (Etype (Typ))))\n+                   (Unit_File_Name (Get_Source_Unit (Root_Type (Typ))))\n       then\n          return True;\n "}, {"sha": "1ed93de6243317f25911de186d8203569e986361", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeedaac578d0a649955553e92ac9c2cd29cd40f0/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeedaac578d0a649955553e92ac9c2cd29cd40f0/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=eeedaac578d0a649955553e92ac9c2cd29cd40f0", "patch": "@@ -2156,7 +2156,7 @@ package Sem_Util is\n    --  Determines if Current_Scope is within an init proc\n \n    function Within_Scope (E : Entity_Id; S : Entity_Id) return Boolean;\n-   --  Returns True if entity Id is declared within scope S\n+   --  Returns True if entity E is declared within scope S\n \n    procedure Wrong_Type (Expr : Node_Id; Expected_Type : Entity_Id);\n    --  Output error message for incorrectly typed expression. Expr is the node"}, {"sha": "ff85ca5baf5befac6132384c02bf9030b534daaf", "filename": "gcc/ada/tracebak.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeedaac578d0a649955553e92ac9c2cd29cd40f0/gcc%2Fada%2Ftracebak.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeedaac578d0a649955553e92ac9c2cd29cd40f0/gcc%2Fada%2Ftracebak.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftracebak.c?ref=eeedaac578d0a649955553e92ac9c2cd29cd40f0", "patch": "@@ -433,7 +433,7 @@ struct layout\n    but our only alternative is the generic unwinder which requires\n    compilation forcing a frame pointer to be reliable.  */\n \n-#if defined (__linux__) && !defined (__USING_SJLJ_EXCEPTIONS__)\n+#if (defined (__x86_64__) || defined (__linux__)) && !defined (__USING_SJLJ_EXCEPTIONS__)\n #define USE_GCC_UNWINDER\n #else\n #define USE_GENERIC_UNWINDER"}]}