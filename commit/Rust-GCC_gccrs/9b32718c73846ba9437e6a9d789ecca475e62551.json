{"sha": "9b32718c73846ba9437e6a9d789ecca475e62551", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIzMjcxOGM3Mzg0NmJhOTQzN2U2YTlkNzg5ZWNjYTQ3NWU2MjU1MQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@nerim.net", "date": "2002-08-12T18:34:51Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2002-08-12T18:34:51Z"}, "message": "diagnostic.h (output_formatted_scalar): Rename from output_formatted_integer.\n\n        * diagnostic.h (output_formatted_scalar): Rename from\n        output_formatted_integer.\n        * diagnostic.def: Add DK_DEBUG.\n        * diagnostic.c (output_decimal): Adjust.\n        (output_long_decimal): Likewise.\n        (output_unsigned_decimal): Likewise.\n        (output_octal): Likewise.\n        (output_long_octal): Likewise.\n        (output_hexadecimal): Likewise.\n        (output_long_hexadecimal): Likewise.\n        * c-pretty-print.c (pp_c_type_specifier): New function.\n        (pp_c_specifier_qualifier_list): Likewise.\n        (pp_c_abstract_declarator): Likewise.\n        (pp_c_char): Replace pp_format_integer with pp_format_scalar.\n\nFrom-SVN: r56236", "tree": {"sha": "b1a38ce7e84fb408f819801ff4a4661e61e604cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1a38ce7e84fb408f819801ff4a4661e61e604cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b32718c73846ba9437e6a9d789ecca475e62551", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b32718c73846ba9437e6a9d789ecca475e62551", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b32718c73846ba9437e6a9d789ecca475e62551", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b32718c73846ba9437e6a9d789ecca475e62551/comments", "author": null, "committer": null, "parents": [{"sha": "48c1db3d6f2920e60963b2d2ecad83a0bfe41492", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48c1db3d6f2920e60963b2d2ecad83a0bfe41492", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48c1db3d6f2920e60963b2d2ecad83a0bfe41492"}], "stats": {"total": 159, "additions": 145, "deletions": 14}, "files": [{"sha": "f5c74673349f642e23d18dbc2593d20157c0b284", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b32718c73846ba9437e6a9d789ecca475e62551/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b32718c73846ba9437e6a9d789ecca475e62551/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b32718c73846ba9437e6a9d789ecca475e62551", "patch": "@@ -1,3 +1,20 @@\n+2002-08-12  Gabriel Dos Reis  <gdr@nerim.net>\n+\n+\t* diagnostic.h (output_formatted_scalar): Rename from\n+\toutput_formatted_integer. \n+\t* diagnostic.def: Add DK_DEBUG.\n+\t* diagnostic.c (output_decimal): Adjust.\n+\t(output_long_decimal): Likewise.\n+\t(output_unsigned_decimal): Likewise.\n+\t(output_octal): Likewise.\n+\t(output_long_octal): Likewise.\n+\t(output_hexadecimal): Likewise.\n+\t(output_long_hexadecimal): Likewise.\n+\t* c-pretty-print.c (pp_c_type_specifier): New function.\n+\t(pp_c_specifier_qualifier_list): Likewise.\n+\t(pp_c_abstract_declarator): Likewise.\n+\t(pp_c_char): Replace pp_format_integer with pp_format_scalar.\n+\n 2002-08-12  David Edelsohn  <edelsohn@gnu.org>\n \n \t* doc/trouble.texi (Disappointments): Add static constructor and"}, {"sha": "18e22f0af6bfe925804e68f65bd4fb2cf7262a0e", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 112, "deletions": 1, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b32718c73846ba9437e6a9d789ecca475e62551/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b32718c73846ba9437e6a9d789ecca475e62551/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=9b32718c73846ba9437e6a9d789ecca475e62551", "patch": "@@ -53,6 +53,13 @@ static void pp_c_inclusive_or_expression PARAMS ((c_pretty_print_info *,\n static void pp_c_logical_and_expression PARAMS ((c_pretty_print_info *, tree));\n static void pp_c_conditional_expression PARAMS ((c_pretty_print_info *, tree));\n static void pp_c_assignment_expression PARAMS ((c_pretty_print_info *, tree));\n+\n+/* declarations.  */\n+static void pp_c_specifier_qualifier_list PARAMS ((c_pretty_print_info *, tree));\n+static void pp_c_type_specifier PARAMS ((c_pretty_print_info *, tree));\n+static void pp_c_abstract_declarator PARAMS ((c_pretty_print_info *, tree));\n+static void pp_c_type_id PARAMS ((c_pretty_print_info *, tree));\n+\n \f\n /* Declarations.  */\n \n@@ -70,6 +77,110 @@ pp_c_cv_qualifier (ppi, cv)\n     pp_c_identifier (ppi, flag_isoc99 ? \"restrict\" : \"__restrict__\");\n }\n \n+static void\n+pp_c_type_specifier (ppi, t)\n+     c_pretty_print_info *ppi;\n+     tree t;\n+{\n+  const enum tree_code code = TREE_CODE (t);\n+  switch (code)\n+    {\n+    case ERROR_MARK:\n+      pp_c_identifier (ppi, \"<erroneous-type>\");\n+      break;\n+\n+#if 0\n+    case UNKNOWN_TYPE:\n+      pp_c_identifier (ppi, \"<unkown-type>\");\n+      break;\n+#endif\n+\n+    case IDENTIFIER_NODE:\n+      pp_c_tree_identifier (ppi, t);\n+      break;\n+\n+#if 0\n+    case INTEGER_TYPE:\n+      if (TREE_UNSIGNED (t))\n+\tpp_c_identifier (ppi, \"unsigned\");\n+      /* fall through.  */\n+    case VOID_TYPE:\n+    case BOOLEAN_TYPE:\n+    case REAL_TYPE:\n+      if (TYPE_NAME (t) && TYPE_IDENTIFIER (t))\n+\tpp_c_tree_identifier (t, TYPE_IDENTIFIER (t));\n+      else\n+\tpp_c_identifier (ppi, \"<anonymous-type>\");\n+      break;\n+#endif\n+      \n+    case COMPLEX_TYPE:\n+    case VECTOR_TYPE:\n+      pp_c_type_specifier (ppi, TREE_TYPE (t));\n+      if (code == COMPLEX_TYPE)\n+\tpp_c_identifier (ppi, flag_isoc99 ? \"_Complex\" : \"__complex__\");\n+      else if (code == VECTOR_TYPE)\n+\tpp_c_identifier (ppi, \"__vector__\");\n+      break;\n+\n+    case TYPE_DECL:\n+      pp_c_tree_identifier (ppi, DECL_NAME (t));\n+      break;\n+\n+    case UNION_TYPE:\n+    case RECORD_TYPE:\n+    case ENUMERAL_TYPE:\n+      if (code == UNION_TYPE)\n+\tpp_c_identifier (ppi, \"union\");\n+      else if (code == RECORD_TYPE)\n+\tpp_c_identifier (ppi, \"struct\");\n+      else if (code == ENUMERAL_TYPE)\n+\tpp_c_identifier (ppi, \"enum\");\n+      \n+      if (TYPE_NAME (t))\n+\tpp_c_tree_identifier (ppi, TYPE_NAME (t));\n+      else\n+\tpp_c_identifier (ppi, \"<anonymous>\");\n+      break;\n+\n+    case POINTER_TYPE:\n+    case ARRAY_TYPE:\n+      {\n+      }\n+      break;\n+      \n+    default:\n+      pp_unsupported_tree (ppi, t);\n+    }\n+}\n+\n+static inline void\n+pp_c_specifier_qualifier_list (ppi, t)\n+     c_pretty_print_info *ppi;\n+     tree t;\n+{\n+  pp_c_type_specifier (ppi, t);\n+  pp_c_cv_qualifier (ppi, TYPE_QUALS (t));\n+}\n+\n+static void\n+pp_c_abstract_declarator (ppi, t)\n+     c_pretty_print_info *ppi;\n+     tree t;\n+{\n+  pp_unsupported_tree (ppi, t);\n+}\n+\n+\n+static inline void\n+pp_c_type_id (ppi, t)\n+     c_pretty_print_info *ppi;\n+     tree t;\n+{\n+  pp_c_specifier_qualifier_list (ppi, t);\n+  pp_c_abstract_declarator (ppi, t);\n+}\n+\n \f\n /* Expressions.  */\n \n@@ -115,7 +226,7 @@ pp_c_char (ppi, c)\n       if (ISPRINT (c))\n \tpp_character (ppi, c);\n       else\n-\tpp_format_integer (ppi, \"\\\\%03o\", (unsigned) c);\n+\tpp_format_scalar (ppi, \"\\\\%03o\", (unsigned) c);\n       break;\n     }\n }"}, {"sha": "5ca64e1e4bfc1784aea02fe5b64394d8582b29e0", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b32718c73846ba9437e6a9d789ecca475e62551/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b32718c73846ba9437e6a9d789ecca475e62551/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=9b32718c73846ba9437e6a9d789ecca475e62551", "patch": "@@ -301,63 +301,63 @@ output_decimal (buffer, i)\n      output_buffer *buffer;\n      int i;\n {\n-  output_formatted_integer (buffer, \"%d\", i);\n+  output_formatted_scalar (buffer, \"%d\", i);\n }\n \n static void\n output_long_decimal (buffer, i)\n      output_buffer *buffer;\n      long int i;\n {\n-  output_formatted_integer (buffer, \"%ld\", i);\n+  output_formatted_scalar (buffer, \"%ld\", i);\n }\n \n static void\n output_unsigned_decimal (buffer, i)\n      output_buffer *buffer;\n      unsigned int i;\n {\n-  output_formatted_integer (buffer, \"%u\", i);\n+  output_formatted_scalar (buffer, \"%u\", i);\n }\n \n static void\n output_long_unsigned_decimal (buffer, i)\n      output_buffer *buffer;\n      long unsigned int i;\n {\n-  output_formatted_integer (buffer, \"%lu\", i);\n+  output_formatted_scalar (buffer, \"%lu\", i);\n }\n \n static void\n output_octal (buffer, i)\n      output_buffer *buffer;\n      unsigned int i;\n {\n-  output_formatted_integer (buffer, \"%o\", i);\n+  output_formatted_scalar (buffer, \"%o\", i);\n }\n \n static void\n output_long_octal (buffer, i)\n      output_buffer *buffer;\n      unsigned long int i;\n {\n-  output_formatted_integer (buffer, \"%lo\", i);\n+  output_formatted_scalar (buffer, \"%lo\", i);\n }\n \n static void\n output_hexadecimal (buffer, i)\n      output_buffer *buffer;\n      unsigned int i;\n {\n-  output_formatted_integer (buffer, \"%x\", i);\n+  output_formatted_scalar (buffer, \"%x\", i);\n }\n \n static void\n output_long_hexadecimal (buffer, i)\n      output_buffer *buffer;\n      unsigned long int i;\n {\n-  output_formatted_integer (buffer, \"%lx\", i);\n+  output_formatted_scalar (buffer, \"%lx\", i);\n }\n \n /* Append to BUFFER a string specified by its STARTING character"}, {"sha": "83e5d9cae72f1d1bdc16f99449e5b23e9cc6bdb2", "filename": "gcc/diagnostic.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b32718c73846ba9437e6a9d789ecca475e62551/gcc%2Fdiagnostic.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b32718c73846ba9437e6a9d789ecca475e62551/gcc%2Fdiagnostic.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.def?ref=9b32718c73846ba9437e6a9d789ecca475e62551", "patch": "@@ -5,3 +5,5 @@ DEFINE_DIAGNOSTIC_KIND (DK_ERROR, \"error: \")\n DEFINE_DIAGNOSTIC_KIND (DK_WARNING, \"warning: \")\n DEFINE_DIAGNOSTIC_KIND (DK_ANACHRONISM, \"anachronism: \")\n DEFINE_DIAGNOSTIC_KIND (DK_NOTE, \"note: \")\n+DEFINE_DIAGNOSTIC_KIND (DK_DEBUG, \"debug: \")\n+"}, {"sha": "4835a7a0e44eb00ae5a510b82920028302a13ab2", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b32718c73846ba9437e6a9d789ecca475e62551/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b32718c73846ba9437e6a9d789ecca475e62551/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=9b32718c73846ba9437e6a9d789ecca475e62551", "patch": "@@ -160,7 +160,7 @@ struct output_buffer\n /* True if BUFFER is in line-wrapping mode.  */\n #define output_is_line_wrapping(BUFFER) (output_line_cutoff (BUFFER) > 0)\n \n-#define output_formatted_integer(BUFFER, FORMAT, INTEGER)\t\\\n+#define output_formatted_scalar(BUFFER, FORMAT, INTEGER)\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       sprintf ((BUFFER)->digit_buffer, FORMAT, INTEGER);\t\\\n@@ -325,6 +325,6 @@ extern void output_verbatim\t\tPARAMS ((output_buffer *, const char *,\n extern void verbatim\t\t\tPARAMS ((const char *, ...))\n      ATTRIBUTE_PRINTF_1;\n extern char *file_name_as_prefix\tPARAMS ((const char *));\n-extern void inform     PARAMS ((const char *, ...)) ATTRIBUTE_PRINTF_1;\n+extern void inform                      PARAMS ((const char *, ...));\n \n #endif /* ! GCC_DIAGNOSTIC_H */"}, {"sha": "5efb9e73078a10e268afb0aff1e826c55ef15004", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b32718c73846ba9437e6a9d789ecca475e62551/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b32718c73846ba9437e6a9d789ecca475e62551/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=9b32718c73846ba9437e6a9d789ecca475e62551", "patch": "@@ -84,10 +84,11 @@ struct pretty_print_info\n      pp_character (PPI, C);      \\\n      pp_whitespace (PPI);        \\\n    } while (0)\n-#define pp_format_integer(PPI, F, I) \\\n-   output_formatted_integer (pp_buffer (PPI), F, I)\n+#define pp_format_scalar(PPI, F, S) \\\n+   output_formatted_scalar (pp_buffer (PPI), F, S)\n #define pp_wide_integer(PPI, I) \\\n-   pp_format_integer (PPI, HOST_WIDE_INT_PRINT_DEC, (HOST_WIDE_INT) I)\n+   pp_format_scalar (PPI, HOST_WIDE_INT_PRINT_DEC, (HOST_WIDE_INT) I)\n+#define pp_pointer(PPI, P) pp_format_scalar (PPI, \"%p\", p)\n \n #define pp_identifier(PPI, ID)  output_add_string (pp_buffer (PPI), ID)\n #define pp_tree_identifier(PPI, T) pp_identifier(PPI, IDENTIFIER_POINTER (T))"}]}