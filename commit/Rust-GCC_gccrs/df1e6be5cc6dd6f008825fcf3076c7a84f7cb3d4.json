{"sha": "df1e6be5cc6dd6f008825fcf3076c7a84f7cb3d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYxZTZiZTVjYzZkZDZmMDA4ODI1ZmNmMzA3NmM3YTg0ZjdjYjNkNA==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-12-12T19:24:59Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-12-12T19:24:59Z"}, "message": "expr.c (encode_newarray_type, [...]): New functions.\n\na\n\t* expr.c (encode_newarray_type, build_new_array):  New functions.\n\t* java-tree.h:  Declare build_new_array.\n\t* jcf-write.c (patch_newarray):  Use build_new_array.\n\t* expr.c (java_lang_expand_exp):  Support NEW_ARRAY_INIT.\n\t* jcf-write.c (generate_bytecode_insns):  Support NEW_ARRAY_INIT.\n\t* parse.y (patch_new_array_init):  Re-organize.\n\tNow is passed the actual array (pointer) type of the value.\n\tSet the type of the CONSTRUCTOR to be an ARRAY_TYPE.\n\t(patch_array_constructor):  Removed - merged into patch_new_array_init.\n \t(java_complete_tree):  Update patch_new_array_init.\n\t* jcf-write.c (find_constant_index):  New function.\n\t(generate_bytecode_insns):  Use find_constant_index.\n\t(generate_classfile):  Use find_constant_index for ConstantValue.\n\nFrom-SVN: r24272", "tree": {"sha": "349e944970478e87202372d2465610c617a74ce0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/349e944970478e87202372d2465610c617a74ce0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df1e6be5cc6dd6f008825fcf3076c7a84f7cb3d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df1e6be5cc6dd6f008825fcf3076c7a84f7cb3d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df1e6be5cc6dd6f008825fcf3076c7a84f7cb3d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df1e6be5cc6dd6f008825fcf3076c7a84f7cb3d4/comments", "author": null, "committer": null, "parents": [{"sha": "05f9acdc49f4e8bfe9024ca431c481a0518c4842", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05f9acdc49f4e8bfe9024ca431c481a0518c4842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05f9acdc49f4e8bfe9024ca431c481a0518c4842"}], "stats": {"total": 106, "additions": 83, "deletions": 23}, "files": [{"sha": "33ad1062d0896186af3367e4ff13a295374f5caa", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 83, "deletions": 23, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df1e6be5cc6dd6f008825fcf3076c7a84f7cb3d4/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df1e6be5cc6dd6f008825fcf3076c7a84f7cb3d4/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=df1e6be5cc6dd6f008825fcf3076c7a84f7cb3d4", "patch": "@@ -670,7 +670,48 @@ find_constant_wide (lo, hi, state)\n   lshift_double (lo, hi, -32, 64, &w1, &w2, 1);\n   return find_constant2 (&state->cpool, CONSTANT_Long,\n \t\t\t w1 & 0xFFFFFFFF, lo & 0xFFFFFFFF);\n- }\n+}\n+\n+/* Find or allocate a constant pool entry for the given VALUE.\n+   Return the index in the constant pool. */\n+\n+static int\n+find_constant_index (value, state)\n+     tree value;\n+     struct jcf_partial *state;\n+{\n+  if (TREE_CODE (value) == INTEGER_CST)\n+    {\n+      if (TYPE_PRECISION (TREE_TYPE (value)) <= 32)\n+\treturn find_constant1 (&state->cpool, CONSTANT_Integer,\n+\t\t\t       TREE_INT_CST_LOW (value) & 0xFFFFFFFF);\n+      else\n+\treturn find_constant_wide (TREE_INT_CST_LOW (value),\n+\t\t\t\t   TREE_INT_CST_HIGH (value), state);\n+    }\n+  else if (TREE_CODE (value) == REAL_CST)\n+    {\n+      long words[2];\n+      if (TYPE_PRECISION (TREE_TYPE (value)) == 32)\n+\t{\n+\t  words[0] = etarsingle (TREE_REAL_CST (value)) & 0xFFFFFFFF;\n+\t  return find_constant1 (&state->cpool, CONSTANT_Float, words[0]);\n+\t}\n+      else\n+\t{\n+\t  etardouble (TREE_REAL_CST (value), words);\n+\t  return find_constant2 (&state->cpool, CONSTANT_Double,\n+\t\t\t\t words[1-FLOAT_WORDS_BIG_ENDIAN] & 0xFFFFFFFF,\n+\t\t\t\t words[FLOAT_WORDS_BIG_ENDIAN] & 0xFFFFFFFF);\n+\t}\n+    }\n+  else if (TREE_CODE (value) == STRING_CST)\n+    {\n+      return find_string_constant (&state->cpool, value);\n+    }\n+  else\n+    fatal (\"find_constant_index - bad type\");\n+}\n \n /* Push 64-bit long constant on VM stack.\n    Caller is responsible for doing NOTE_PUSH. */\n@@ -1268,22 +1309,15 @@ generate_bytecode_insns (exp, target, state)\n \t}\n       break;\n     case REAL_CST:\n+      offset = find_constant_index (exp, state);\n       switch (TYPE_PRECISION (type))\n \t{\n-\t  long words[2];\n-\t  int index;\n \tcase 32:\n-\t  words[0] = etarsingle (TREE_REAL_CST (exp)) & 0xFFFFFFFF;\n-\t  index = find_constant1 (&state->cpool, CONSTANT_Float, words[0]);\n-\t  push_constant1 (index, state);\n+\t  push_constant1 (offset, state);\n \t  NOTE_PUSH (1);\n \t  break;\n \tcase 64:\n-\t  etardouble (TREE_REAL_CST (exp), words);\n-\t  index = find_constant2 (&state->cpool, CONSTANT_Double,\n-\t\t\t\t  words[1-FLOAT_WORDS_BIG_ENDIAN] & 0xFFFFFFFF,\n-\t\t\t\t  words[FLOAT_WORDS_BIG_ENDIAN] & 0xFFFFFFFF);\n-\t  push_constant2 (index, state);\n+\t  push_constant2 (offset, state);\n \t  NOTE_PUSH (2);\n \t  break;\n \tdefault:\n@@ -2018,6 +2052,43 @@ generate_bytecode_insns (exp, target, state)\n       RESERVE (1);\n       OP1 (OPCODE_athrow);\n       break;\n+    case NEW_ARRAY_INIT:\n+      {\n+\ttree values;\n+\ttree array_type = TREE_TYPE (TREE_TYPE (exp));\n+\ttree element_type = TYPE_ARRAY_ELEMENT (array_type);\n+\tHOST_WIDE_INT length = java_array_type_length (array_type);\n+\tpush_int_const (length, state);\n+\tNOTE_PUSH (1);\n+\tRESERVE (3);\n+\tif (JPRIMITIVE_TYPE_P (element_type))\n+\t  {\n+\t    int atype = encode_newarray_type (element_type);\n+\t    OP1 (OPCODE_newarray);\n+\t    OP1 (atype);\n+\t  }\n+\telse\n+\t  {\n+\t    int index = find_class_constant (&state->cpool,\n+\t\t\t\t\t     TREE_TYPE (element_type));\n+\t    OP1 (OPCODE_anewarray);\n+\t    OP2 (index);\n+\t  }\n+\tvalues = CONSTRUCTOR_ELTS (TREE_OPERAND (exp, 0));\n+\toffset = 0;\n+\tjopcode = OPCODE_iastore + adjust_typed_op (element_type, 7);\n+\tfor ( ;  values != NULL_TREE;  values = TREE_CHAIN (values), offset++)\n+\t  {\n+\t    int save_SP = state->code_SP;\n+\t    emit_dup (1, 0, state);\n+\t    push_int_const (offset, state);\n+\t    generate_bytecode_insns (TREE_VALUE (values), STACK_TARGET, state);\n+\t    RESERVE (1);\n+\t    OP1 (jopcode);\n+\t    state->code_SP = save_SP;\n+\t  }\n+      }\n+      break;\n     case NEW_CLASS_EXPR:\n       {\n \ttree class = TREE_TYPE (TREE_TYPE (exp));\n@@ -2444,18 +2515,7 @@ generate_classfile (clas, state)\n \t  i = find_utf8_constant (&state->cpool, ConstantValue_node);\n \t  PUT2 (i);  /* attribute_name_index */\n \t  PUT4 (2); /* attribute_length */\n-\t  if (TREE_CODE (init) == INTEGER_CST)\n-\t    {\n-\t      if (TYPE_PRECISION (TREE_TYPE (part)) <= 32)\n-\t\ti = find_constant1 (&state->cpool, CONSTANT_Integer,\n-\t\t\t\t    TREE_INT_CST_LOW (init) & 0xFFFFFFFF);\n-\t      else\n-\t\ti = find_constant_wide (TREE_INT_CST_LOW (init),\n-\t\t\t\t\tTREE_INT_CST_HIGH (init), state);\n-\t    }\n-\t  else\n-\t    fatal (\"unimplemented ConstantValue\");\n-\t  PUT2 (i);\n+\t  i = find_constant_index (init, state);  PUT2 (i);\n \t}\n       fields_count++;\n     }"}]}