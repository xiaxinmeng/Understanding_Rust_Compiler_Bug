{"sha": "382eb33c14e9680c8907968f937ed89bc501bfe8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgyZWIzM2MxNGU5NjgwYzg5MDc5NjhmOTM3ZWQ4OWJjNTAxYmZlOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-09-20T19:04:02Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-09-20T19:04:02Z"}, "message": "i386.c (ix86_expand_ashl_const): Rewrite using indirect functions.\n\n\t* config/i386/i386.c (ix86_expand_ashl_const): Rewrite using\n\tindirect functions.\n\t(ix86_split_ashl): Ditto.\n\t(ix86_split_ashr): Ditto.\n\t(ix86_split_lshr): Ditto.\n\t(ix86_adjust_counter): Ditto.\n\nFrom-SVN: r164449", "tree": {"sha": "37ec8305435c061f2ba3420a08d30ea73db7e6ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37ec8305435c061f2ba3420a08d30ea73db7e6ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/382eb33c14e9680c8907968f937ed89bc501bfe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/382eb33c14e9680c8907968f937ed89bc501bfe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/382eb33c14e9680c8907968f937ed89bc501bfe8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/382eb33c14e9680c8907968f937ed89bc501bfe8/comments", "author": null, "committer": null, "parents": [{"sha": "15c2ef5ad3e24b393be17bcea677d1972bfe0945", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c2ef5ad3e24b393be17bcea677d1972bfe0945", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15c2ef5ad3e24b393be17bcea677d1972bfe0945"}], "stats": {"total": 255, "additions": 138, "deletions": 117}, "files": [{"sha": "88f350e1269215376092c67b1d04441655cc4e9c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/382eb33c14e9680c8907968f937ed89bc501bfe8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/382eb33c14e9680c8907968f937ed89bc501bfe8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=382eb33c14e9680c8907968f937ed89bc501bfe8", "patch": "@@ -1,3 +1,12 @@\n+2010-09-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_expand_ashl_const): Rewrite using\n+\tindirect functions.\n+\t(ix86_split_ashl): Ditto.\n+\t(ix86_split_ashr): Ditto.\n+\t(ix86_split_lshr): Ditto.\n+\t(ix86_adjust_counter): Ditto.\n+\n 2010-09-20  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* c-family/c-common.h (constant_string_class): Documented with\n@@ -17,7 +26,7 @@\n \t(gen_inheritance_die): Assume DW_ACCESS_public as the default\n \tfor dwarf_version > 2 and parent other than DW_TAG_class_type.\n \n-2010-09-20  Rafael Carre   <rafael.carre@gmail.com>\n+2010-09-20  Rafael Carre  <rafael.carre@gmail.com>\n \n \tPR target/45726\n \t* arm.md (arm_movt): Only enable on machines with MOVT.\n@@ -59,7 +68,7 @@\n \ttoo and work for automatic vars.\n \t(varpool_finalize_decl): Use const_value_known_p.\n \n-2010-09-20  Rafael Carre   <rafael.carre@gmail.com>\n+2010-09-20  Rafael Carre  <rafael.carre@gmail.com>\n \n \tPR target/45726\n \t* arm.md (arm_movtas_ze): Only enable on machine with MOVT."}, {"sha": "33dbbe9ca2aba37e184f107073e089a3f88f4402", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 127, "deletions": 115, "changes": 242, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/382eb33c14e9680c8907968f937ed89bc501bfe8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/382eb33c14e9680c8907968f937ed89bc501bfe8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=382eb33c14e9680c8907968f937ed89bc501bfe8", "patch": "@@ -18057,32 +18057,29 @@ ix86_split_long_move (rtx operands[])\n static void\n ix86_expand_ashl_const (rtx operand, int count, enum machine_mode mode)\n {\n-  if (count == 1)\n+  rtx (*insn)(rtx, rtx, rtx);\n+\n+  if (count == 1\n+      || (count * ix86_cost->add <= ix86_cost->shift_const\n+\t  && !optimize_insn_for_size_p ()))\n     {\n-      emit_insn ((mode == DImode\n-\t\t  ? gen_addsi3\n-\t\t  : gen_adddi3) (operand, operand, operand));\n+      insn = mode == DImode ? gen_addsi3 : gen_adddi3;\n+      while (count-- > 0)\n+\temit_insn (insn (operand, operand, operand));\n     }\n-  else if (!optimize_insn_for_size_p ()\n-\t   && count * ix86_cost->add <= ix86_cost->shift_const)\n+  else\n     {\n-      int i;\n-      for (i=0; i<count; i++)\n-\t{\n-\t  emit_insn ((mode == DImode\n-\t\t      ? gen_addsi3\n-\t\t      : gen_adddi3) (operand, operand, operand));\n-\t}\n+      insn = mode == DImode ? gen_ashlsi3 : gen_ashldi3;\n+      emit_insn (insn (operand, operand, GEN_INT (count)));\n     }\n-  else\n-    emit_insn ((mode == DImode\n-\t\t? gen_ashlsi3\n-\t\t: gen_ashldi3) (operand, operand, GEN_INT (count)));\n }\n \n void\n ix86_split_ashl (rtx *operands, rtx scratch, enum machine_mode mode)\n {\n+  rtx (*gen_ashl3)(rtx, rtx, rtx);\n+  rtx (*gen_shld)(rtx, rtx, rtx);\n+\n   rtx low[2], high[2];\n   int count;\n   const int single_width = mode == DImode ? 32 : 64;\n@@ -18102,18 +18099,21 @@ ix86_split_ashl (rtx *operands, rtx scratch, enum machine_mode mode)\n \t}\n       else\n \t{\n+\t  gen_shld = mode == DImode ? gen_x86_shld : gen_x86_64_shld;\n+\n \t  if (!rtx_equal_p (operands[0], operands[1]))\n \t    emit_move_insn (operands[0], operands[1]);\n-\t  emit_insn ((mode == DImode\n-\t\t     ? gen_x86_shld\n-\t\t     : gen_x86_64_shld) (high[0], low[0], GEN_INT (count)));\n+\n+\t  emit_insn (gen_shld (high[0], low[0], GEN_INT (count)));\n \t  ix86_expand_ashl_const (low[0], count, mode);\n \t}\n       return;\n     }\n \n   split_double_mode (mode, operands, 1, low, high);\n \n+  gen_ashl3 = mode == DImode ? gen_ashlsi3 : gen_ashldi3;\n+\n   if (operands[1] == const1_rtx)\n     {\n       /* Assuming we've chosen a QImode capable registers, then 1 << N\n@@ -18144,33 +18144,44 @@ ix86_split_ashl (rtx *operands, rtx scratch, enum machine_mode mode)\n \t pentium4 a bit; no one else seems to care much either way.  */\n       else\n \t{\n+\t  enum machine_mode half_mode;\n+\t  rtx (*gen_lshr3)(rtx, rtx, rtx);\n+\t  rtx (*gen_and3)(rtx, rtx, rtx);\n+\t  rtx (*gen_xor3)(rtx, rtx, rtx);\n+\t  HOST_WIDE_INT bits;\n \t  rtx x;\n \n+\t  if (mode == DImode)\n+\t    {\n+\t      half_mode = SImode;\n+\t      gen_lshr3 = gen_lshrsi3;\n+\t      gen_and3 = gen_andsi3;\n+\t      gen_xor3 = gen_xorsi3;\n+\t      bits = 5;\n+\t    }\n+\t  else\n+\t    {\n+\t      half_mode = DImode;\n+\t      gen_lshr3 = gen_lshrdi3;\n+\t      gen_and3 = gen_anddi3;\n+\t      gen_xor3 = gen_xordi3;\n+\t      bits = 6;\n+\t    }\n+\n \t  if (TARGET_PARTIAL_REG_STALL && !optimize_insn_for_size_p ())\n-\t    x = gen_rtx_ZERO_EXTEND (mode == DImode ? SImode : DImode, operands[2]);\n+\t    x = gen_rtx_ZERO_EXTEND (half_mode, operands[2]);\n \t  else\n-\t    x = gen_lowpart (mode == DImode ? SImode : DImode, operands[2]);\n+\t    x = gen_lowpart (half_mode, operands[2]);\n \t  emit_insn (gen_rtx_SET (VOIDmode, high[0], x));\n \n-\t  emit_insn ((mode == DImode\n-\t\t      ? gen_lshrsi3\n-\t\t      : gen_lshrdi3) (high[0], high[0],\n-\t\t\t\t      GEN_INT (mode == DImode ? 5 : 6)));\n-\t  emit_insn ((mode == DImode\n-\t\t      ? gen_andsi3\n-\t\t      : gen_anddi3) (high[0], high[0], const1_rtx));\n+\t  emit_insn (gen_lshr3 (high[0], high[0], GEN_INT (bits)));\n+\t  emit_insn (gen_and3 (high[0], high[0], const1_rtx));\n \t  emit_move_insn (low[0], high[0]);\n-\t  emit_insn ((mode == DImode\n-\t\t      ? gen_xorsi3\n-\t\t      : gen_xordi3) (low[0], low[0], const1_rtx));\n+\t  emit_insn (gen_xor3 (low[0], low[0], const1_rtx));\n \t}\n \n-      emit_insn ((mode == DImode\n-\t\t    ? gen_ashlsi3\n-\t\t    : gen_ashldi3) (low[0], low[0], operands[2]));\n-      emit_insn ((mode == DImode\n-\t\t    ? gen_ashlsi3\n-\t\t    : gen_ashldi3) (high[0], high[0], operands[2]));\n+      emit_insn (gen_ashl3 (low[0], low[0], operands[2]));\n+      emit_insn (gen_ashl3 (high[0], high[0], operands[2]));\n       return;\n     }\n \n@@ -18186,36 +18197,41 @@ ix86_split_ashl (rtx *operands, rtx scratch, enum machine_mode mode)\n     }\n   else\n     {\n+      gen_shld = mode == DImode ? gen_x86_shld : gen_x86_64_shld;\n+\n       if (!rtx_equal_p (operands[0], operands[1]))\n \temit_move_insn (operands[0], operands[1]);\n \n       split_double_mode (mode, operands, 1, low, high);\n-      emit_insn ((mode == DImode\n-\t\t  ? gen_x86_shld\n-\t\t  : gen_x86_64_shld) (high[0], low[0], operands[2]));\n+      emit_insn (gen_shld (high[0], low[0], operands[2]));\n     }\n \n-  emit_insn ((mode == DImode\n-\t      ? gen_ashlsi3\n-\t      : gen_ashldi3) (low[0], low[0], operands[2]));\n+  emit_insn (gen_ashl3 (low[0], low[0], operands[2]));\n \n   if (TARGET_CMOVE && scratch)\n     {\n+      rtx (*gen_x86_shift_adj_1)(rtx, rtx, rtx, rtx)\n+\t= mode == DImode ? gen_x86_shiftsi_adj_1 : gen_x86_shiftdi_adj_1;\n+\n       ix86_expand_clear (scratch);\n-      emit_insn ((mode == DImode\n-\t\t  ? gen_x86_shiftsi_adj_1\n-\t\t  : gen_x86_shiftdi_adj_1) (high[0], low[0], operands[2],\n-\t\t\t\t\t    scratch));\n+      emit_insn (gen_x86_shift_adj_1 (high[0], low[0], operands[2], scratch));\n     }\n   else\n-    emit_insn ((mode == DImode\n-\t\t? gen_x86_shiftsi_adj_2\n-\t\t: gen_x86_shiftdi_adj_2) (high[0], low[0], operands[2]));\n+    {\n+      rtx (*gen_x86_shift_adj_2)(rtx, rtx, rtx)\n+\t= mode == DImode ? gen_x86_shiftsi_adj_2 : gen_x86_shiftdi_adj_2;\n+\n+      emit_insn (gen_x86_shift_adj_2 (high[0], low[0], operands[2]));\n+    }\n }\n \n void\n ix86_split_ashr (rtx *operands, rtx scratch, enum machine_mode mode)\n {\n+  rtx (*gen_ashr3)(rtx, rtx, rtx)\n+    = mode == DImode ? gen_ashrsi3 : gen_ashrdi3;\n+  rtx (*gen_shrd)(rtx, rtx, rtx);\n+\n   rtx low[2], high[2];\n   int count;\n   const int single_width = mode == DImode ? 32 : 64;\n@@ -18228,75 +18244,73 @@ ix86_split_ashr (rtx *operands, rtx scratch, enum machine_mode mode)\n       if (count == single_width * 2 - 1)\n \t{\n \t  emit_move_insn (high[0], high[1]);\n-\t  emit_insn ((mode == DImode\n-\t\t      ? gen_ashrsi3\n-\t\t      : gen_ashrdi3) (high[0], high[0],\n-\t\t\t\t      GEN_INT (single_width - 1)));\n+\t  emit_insn (gen_ashr3 (high[0], high[0],\n+\t\t\t\tGEN_INT (single_width - 1)));\n \t  emit_move_insn (low[0], high[0]);\n \n \t}\n       else if (count >= single_width)\n \t{\n \t  emit_move_insn (low[0], high[1]);\n \t  emit_move_insn (high[0], low[0]);\n-\t  emit_insn ((mode == DImode\n-\t\t      ? gen_ashrsi3\n-\t\t      : gen_ashrdi3) (high[0], high[0],\n-\t\t\t\t      GEN_INT (single_width - 1)));\n+\t  emit_insn (gen_ashr3 (high[0], high[0],\n+\t\t\t\tGEN_INT (single_width - 1)));\n+\n \t  if (count > single_width)\n-\t    emit_insn ((mode == DImode\n-\t\t\t? gen_ashrsi3\n-\t\t\t: gen_ashrdi3) (low[0], low[0],\n-\t\t\t\t\tGEN_INT (count - single_width)));\n+\t    emit_insn (gen_ashr3 (low[0], low[0],\n+\t\t\t\t  GEN_INT (count - single_width)));\n \t}\n       else\n \t{\n+\t  gen_shrd = mode == DImode ? gen_x86_shrd : gen_x86_64_shrd;\n+\n \t  if (!rtx_equal_p (operands[0], operands[1]))\n \t    emit_move_insn (operands[0], operands[1]);\n-\t  emit_insn ((mode == DImode\n-\t\t      ? gen_x86_shrd\n-\t\t      : gen_x86_64_shrd) (low[0], high[0], GEN_INT (count)));\n-\t  emit_insn ((mode == DImode\n-\t\t      ? gen_ashrsi3\n-\t\t      : gen_ashrdi3) (high[0], high[0], GEN_INT (count)));\n+\n+\t  emit_insn (gen_shrd (low[0], high[0], GEN_INT (count)));\n+\t  emit_insn (gen_ashr3 (high[0], high[0], GEN_INT (count)));\n \t}\n     }\n   else\n     {\n-      if (!rtx_equal_p (operands[0], operands[1]))\n+      gen_shrd = mode == DImode ? gen_x86_shrd : gen_x86_64_shrd;\n+\n+     if (!rtx_equal_p (operands[0], operands[1]))\n \temit_move_insn (operands[0], operands[1]);\n \n       split_double_mode (mode, operands, 1, low, high);\n \n-      emit_insn ((mode == DImode\n-\t\t  ? gen_x86_shrd\n-\t\t  : gen_x86_64_shrd) (low[0], high[0], operands[2]));\n-      emit_insn ((mode == DImode\n-\t\t  ? gen_ashrsi3\n-\t\t  : gen_ashrdi3)  (high[0], high[0], operands[2]));\n+      emit_insn (gen_shrd (low[0], high[0], operands[2]));\n+      emit_insn (gen_ashr3 (high[0], high[0], operands[2]));\n \n       if (TARGET_CMOVE && scratch)\n \t{\n+\t  rtx (*gen_x86_shift_adj_1)(rtx, rtx, rtx, rtx)\n+\t    = mode == DImode ? gen_x86_shiftsi_adj_1 : gen_x86_shiftdi_adj_1;\n+\n \t  emit_move_insn (scratch, high[0]);\n-\t  emit_insn ((mode == DImode\n-\t\t      ? gen_ashrsi3\n-\t\t      : gen_ashrdi3) (scratch, scratch,\n-\t\t\t\t      GEN_INT (single_width - 1)));\n-\t  emit_insn ((mode == DImode\n-\t\t      ? gen_x86_shiftsi_adj_1\n-\t\t      : gen_x86_shiftdi_adj_1) (low[0], high[0], operands[2],\n-\t\t\t\t\t\tscratch));\n+\t  emit_insn (gen_ashr3 (scratch, scratch,\n+\t\t\t\tGEN_INT (single_width - 1)));\n+\t  emit_insn (gen_x86_shift_adj_1 (low[0], high[0], operands[2],\n+\t\t\t\t\t  scratch));\n \t}\n       else\n-\temit_insn ((mode == DImode\n-\t\t    ? gen_x86_shiftsi_adj_3\n-\t\t    : gen_x86_shiftdi_adj_3) (low[0], high[0], operands[2]));\n+\t{\n+\t  rtx (*gen_x86_shift_adj_3)(rtx, rtx, rtx)\n+\t    = mode == DImode ? gen_x86_shiftsi_adj_3 : gen_x86_shiftdi_adj_3;\n+\n+\t  emit_insn (gen_x86_shift_adj_3 (low[0], high[0], operands[2]));\n+\t}\n     }\n }\n \n void\n ix86_split_lshr (rtx *operands, rtx scratch, enum machine_mode mode)\n {\n+  rtx (*gen_lshr3)(rtx, rtx, rtx)\n+    = mode == DImode ? gen_lshrsi3 : gen_lshrdi3;\n+  rtx (*gen_shrd)(rtx, rtx, rtx);\n+\n   rtx low[2], high[2];\n   int count;\n   const int single_width = mode == DImode ? 32 : 64;\n@@ -18312,50 +18326,48 @@ ix86_split_lshr (rtx *operands, rtx scratch, enum machine_mode mode)\n \t  ix86_expand_clear (high[0]);\n \n \t  if (count > single_width)\n-\t    emit_insn ((mode == DImode\n-\t\t\t? gen_lshrsi3\n-\t\t\t: gen_lshrdi3) (low[0], low[0],\n-\t\t\t\t\tGEN_INT (count - single_width)));\n+\t    emit_insn (gen_lshr3 (low[0], low[0],\n+\t\t\t\t  GEN_INT (count - single_width)));\n \t}\n       else\n \t{\n+\t  gen_shrd = mode == DImode ? gen_x86_shrd : gen_x86_64_shrd;\n+\n \t  if (!rtx_equal_p (operands[0], operands[1]))\n \t    emit_move_insn (operands[0], operands[1]);\n-\t  emit_insn ((mode == DImode\n-\t\t      ? gen_x86_shrd\n-\t\t      : gen_x86_64_shrd) (low[0], high[0], GEN_INT (count)));\n-\t  emit_insn ((mode == DImode\n-\t\t      ? gen_lshrsi3\n-\t\t      : gen_lshrdi3) (high[0], high[0], GEN_INT (count)));\n+\n+\t  emit_insn (gen_shrd (low[0], high[0], GEN_INT (count)));\n+\t  emit_insn (gen_lshr3 (high[0], high[0], GEN_INT (count)));\n \t}\n     }\n   else\n     {\n+      gen_shrd = mode == DImode ? gen_x86_shrd : gen_x86_64_shrd;\n+\n       if (!rtx_equal_p (operands[0], operands[1]))\n \temit_move_insn (operands[0], operands[1]);\n \n       split_double_mode (mode, operands, 1, low, high);\n \n-      emit_insn ((mode == DImode\n-\t\t  ? gen_x86_shrd\n-\t\t  : gen_x86_64_shrd) (low[0], high[0], operands[2]));\n-      emit_insn ((mode == DImode\n-\t\t  ? gen_lshrsi3\n-\t\t  : gen_lshrdi3) (high[0], high[0], operands[2]));\n+      emit_insn (gen_shrd (low[0], high[0], operands[2]));\n+      emit_insn (gen_lshr3 (high[0], high[0], operands[2]));\n \n-      /* Heh.  By reversing the arguments, we can reuse this pattern.  */\n       if (TARGET_CMOVE && scratch)\n \t{\n+\t  rtx (*gen_x86_shift_adj_1)(rtx, rtx, rtx, rtx)\n+\t    = mode == DImode ? gen_x86_shiftsi_adj_1 : gen_x86_shiftdi_adj_1;\n+\n \t  ix86_expand_clear (scratch);\n-\t  emit_insn ((mode == DImode\n-\t\t      ? gen_x86_shiftsi_adj_1\n-\t\t      : gen_x86_shiftdi_adj_1) (low[0], high[0], operands[2],\n-\t\t\t\t\t\tscratch));\n+\t  emit_insn (gen_x86_shift_adj_1 (low[0], high[0], operands[2],\n+\t\t\t\t\t  scratch));\n \t}\n       else\n-\temit_insn ((mode == DImode\n-\t\t    ? gen_x86_shiftsi_adj_2\n-\t\t    : gen_x86_shiftdi_adj_2) (low[0], high[0], operands[2]));\n+\t{\n+\t  rtx (*gen_x86_shift_adj_2)(rtx, rtx, rtx)\n+\t    = mode == DImode ? gen_x86_shiftsi_adj_2 : gen_x86_shiftdi_adj_2;\n+\n+\t  emit_insn (gen_x86_shift_adj_2 (low[0], high[0], operands[2]));\n+\t}\n     }\n }\n \n@@ -18392,10 +18404,10 @@ ix86_expand_aligntest (rtx variable, int value, bool epilogue)\n static void\n ix86_adjust_counter (rtx countreg, HOST_WIDE_INT value)\n {\n-  if (GET_MODE (countreg) == DImode)\n-    emit_insn (gen_adddi3 (countreg, countreg, GEN_INT (-value)));\n-  else\n-    emit_insn (gen_addsi3 (countreg, countreg, GEN_INT (-value)));\n+  rtx (*gen_add)(rtx, rtx, rtx)\n+    = GET_MODE (countreg) == DImode ? gen_adddi3 : gen_addsi3;\n+\n+  emit_insn (gen_add (countreg, countreg, GEN_INT (-value)));\n }\n \n /* Zero extend possibly SImode EXP to Pmode register.  */"}]}