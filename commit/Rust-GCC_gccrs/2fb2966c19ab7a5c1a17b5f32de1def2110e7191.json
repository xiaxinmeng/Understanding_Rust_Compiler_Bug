{"sha": "2fb2966c19ab7a5c1a17b5f32de1def2110e7191", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZiMjk2NmMxOWFiN2E1YzFhMTdiNWYzMmRlMWRlZjIxMTBlNzE5MQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-11-28T20:56:23Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-11-28T20:56:23Z"}, "message": "Properly use TYPE_MAIN_VARIANT in warn_types_mismatch.\n\n2019-11-28  Martin Liska  <mliska@suse.cz>\n\n\tPR lto/92609\n\t* ipa-devirt.c (warn_types_mismatch): Use TYPE_MAIN_VARIANT\n\tconsistently.\n2019-11-28  Martin Liska  <mliska@suse.cz>\n\n\tPR lto/92609\n\t* g++.dg/lto/pr92609_0.C: New test.\n\t* g++.dg/lto/pr92609_1.C: New test.\n\nFrom-SVN: r278819", "tree": {"sha": "cfa7c4246183a52f02e8d2a457cffb16b5618c21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfa7c4246183a52f02e8d2a457cffb16b5618c21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fb2966c19ab7a5c1a17b5f32de1def2110e7191", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fb2966c19ab7a5c1a17b5f32de1def2110e7191", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fb2966c19ab7a5c1a17b5f32de1def2110e7191", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fb2966c19ab7a5c1a17b5f32de1def2110e7191/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3a95e31b34da8d7b01744f1f5958541b0671df5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a95e31b34da8d7b01744f1f5958541b0671df5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a95e31b34da8d7b01744f1f5958541b0671df5f"}], "stats": {"total": 183, "additions": 171, "deletions": 12}, "files": [{"sha": "99cdce7ab3f6c631490d8dfba4c4912ec799179a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb2966c19ab7a5c1a17b5f32de1def2110e7191/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb2966c19ab7a5c1a17b5f32de1def2110e7191/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2fb2966c19ab7a5c1a17b5f32de1def2110e7191", "patch": "@@ -1,3 +1,9 @@\n+2019-11-28  Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/92609\n+\t* ipa-devirt.c (warn_types_mismatch): Use TYPE_MAIN_VARIANT\n+\tconsistently.\n+\n 2019-11-28  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-inline.c (want_early_inline_function_p): Remove leftover optimize"}, {"sha": "0b2475ca2923e49809a16d24cc622b2ff792795d", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb2966c19ab7a5c1a17b5f32de1def2110e7191/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb2966c19ab7a5c1a17b5f32de1def2110e7191/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=2fb2966c19ab7a5c1a17b5f32de1def2110e7191", "patch": "@@ -986,21 +986,24 @@ warn_types_mismatch (tree t1, tree t2, location_t loc1, location_t loc2)\n \n   /* It is a quite common bug to reference anonymous namespace type in\n      non-anonymous namespace class.  */\n-  if ((type_with_linkage_p (TYPE_MAIN_VARIANT (t1))\n-       && type_in_anonymous_namespace_p (TYPE_MAIN_VARIANT (t1)))\n-      || (type_with_linkage_p (TYPE_MAIN_VARIANT (t2))\n-\t  && type_in_anonymous_namespace_p (TYPE_MAIN_VARIANT (t2))))\n+  tree mt1 = TYPE_MAIN_VARIANT (t1);\n+  tree mt2 = TYPE_MAIN_VARIANT (t2);\n+  if ((type_with_linkage_p (mt1)\n+       && type_in_anonymous_namespace_p (mt1))\n+      || (type_with_linkage_p (mt2)\n+\t  && type_in_anonymous_namespace_p (mt2)))\n     {\n-      if (!type_with_linkage_p (TYPE_MAIN_VARIANT (t1))\n-\t  || !type_in_anonymous_namespace_p (TYPE_MAIN_VARIANT (t1)))\n+      if (!type_with_linkage_p (mt1)\n+\t  || !type_in_anonymous_namespace_p (mt1))\n \t{\n \t  std::swap (t1, t2);\n+\t  std::swap (mt1, mt2);\n \t  std::swap (loc_t1, loc_t2);\n \t}\n-      gcc_assert (TYPE_NAME (t1)\n-\t\t  && TREE_CODE (TYPE_NAME (t1)) == TYPE_DECL);\n-      tree n1 = TYPE_NAME (t1);\n-      tree n2 = TYPE_NAME (t2) ? TYPE_NAME (t2) : NULL;\n+      gcc_assert (TYPE_NAME (mt1)\n+\t\t  && TREE_CODE (TYPE_NAME (mt1)) == TYPE_DECL);\n+      tree n1 = TYPE_NAME (mt1);\n+      tree n2 = TYPE_NAME (mt2) ? TYPE_NAME (mt2) : NULL;\n \n       if (TREE_CODE (n1) == TYPE_DECL)\n \tn1 = DECL_NAME (n1);\n@@ -1023,8 +1026,6 @@ warn_types_mismatch (tree t1, tree t2, location_t loc1, location_t loc2)\n \t        \"the incompatible type defined in another translation unit\");\n       return;\n     }\n-  tree mt1 = TYPE_MAIN_VARIANT (t1);\n-  tree mt2 = TYPE_MAIN_VARIANT (t2);\n   /* If types have mangled ODR names and they are different, it is most\n      informative to output those.\n      This also covers types defined in different namespaces.  */"}, {"sha": "e800a0fa1c2d47c1f78f7e7dbe08e1b4e1eb3a07", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb2966c19ab7a5c1a17b5f32de1def2110e7191/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb2966c19ab7a5c1a17b5f32de1def2110e7191/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2fb2966c19ab7a5c1a17b5f32de1def2110e7191", "patch": "@@ -1,3 +1,9 @@\n+2019-11-28  Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/92609\n+\t* g++.dg/lto/pr92609_0.C: New test.\n+\t* g++.dg/lto/pr92609_1.C: New test.\n+\n 2019-11-28  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* gcc.target/i386/pr32219-2.c: Adjust scan-assembler entries"}, {"sha": "3cce1811d1e00a9ccf659153df17b29b8a8a038f", "filename": "gcc/testsuite/g++.dg/lto/pr92609_0.C", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb2966c19ab7a5c1a17b5f32de1def2110e7191/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr92609_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb2966c19ab7a5c1a17b5f32de1def2110e7191/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr92609_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr92609_0.C?ref=2fb2966c19ab7a5c1a17b5f32de1def2110e7191", "patch": "@@ -0,0 +1,88 @@\n+// PR lto/92609\n+// { dg-lto-do link }\n+// { dg-lto-options { { -fPIC -flto } } }\n+// { dg-require-effective-target shared }\n+// { dg-require-effective-target fpic }\n+// { dg-extra-ld-options \"-shared\" }\n+\n+namespace std {\n+inline namespace __cxx11 {}\n+template < typename _Default > struct __detector { using type = _Default; };\n+template < typename _Default, template < typename > class >\n+using __detected_or = __detector< _Default >;\n+template < typename _Default, template < typename > class _Op >\n+using __detected_or_t = typename __detected_or< _Default, _Op >::type;\n+template < typename > class allocator;\n+template < class > struct char_traits;\n+namespace __cxx11 {\n+template < typename _CharT, typename = char_traits< _CharT >,\n+           typename = allocator< _CharT > >\n+class basic_string;\n+}\n+struct __allocator_traits_base {\n+  template < typename _Tp > using __pointer = typename _Tp::pointer;\n+};\n+struct allocator_traits : __allocator_traits_base {\n+  using pointer = __detected_or_t< char *, __pointer >;\n+};\n+} // std\n+struct rebind {\n+  typedef std::allocator_traits other;\n+};\n+namespace std {\n+namespace __cxx11 {\n+template < typename, typename, typename > class basic_string {\n+  struct _Alloc_hider {\n+    rebind::other::pointer _M_p;\n+  } _M_dataplus;\n+  unsigned long _M_string_length;\n+  enum { _S_local_capacity = 15 };\n+  union {\n+    char _M_local_buf[_S_local_capacity + 1];\n+    unsigned long _M_allocated_capacity;\n+  };\n+};\n+} // __cxx11\n+template < typename _Tp > class __uniq_ptr_impl {\n+  template < typename _Up > struct _Ptr { using type = _Up *; };\n+\n+public:\n+  using pointer = typename _Ptr< _Tp >::type;\n+};\n+template < typename _Tp > class unique_ptr {\n+public:\n+  using pointer = typename __uniq_ptr_impl< _Tp >::pointer;\n+  unique_ptr(pointer);\n+};\n+} // std\n+class wxRefCounter;\n+class wxObject {\n+  virtual wxRefCounter CreateRefData();\n+  wxRefCounter *m_refData;\n+};\n+class wxGDIObject : wxObject {};\n+class wxFontBase : wxGDIObject {};\n+class wxFont : wxFontBase {};\n+class VisualTool {\n+protected:\n+  VisualTool(int *, int *);\n+};\n+class OpenGLText;\n+class VisualToolCross : VisualTool {\n+  std::unique_ptr< OpenGLText > gl_text;\n+  VisualToolCross();\n+};\n+class OpenGLText { // { dg-lto-warning \"7: type 'struct OpenGLText' violates the C\\\\+\\\\+ One Definition Rule\" }\n+  float r, g, b, a;\n+  int fontSize;\n+  bool fontBold;\n+  bool fontItalics;\n+  std::basic_string< char > fontFace;\n+  wxFont font;\n+  int glyphs;\n+};\n+int VisualToolCross_parent;\n+int VisualToolCross_context;\n+VisualToolCross::VisualToolCross()\n+    : VisualTool(&VisualToolCross_parent, &VisualToolCross_context),\n+      gl_text(0) {}"}, {"sha": "4c65a6a46005b632b1f822f9ba582d7ca8424b2b", "filename": "gcc/testsuite/g++.dg/lto/pr92609_1.C", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb2966c19ab7a5c1a17b5f32de1def2110e7191/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr92609_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb2966c19ab7a5c1a17b5f32de1def2110e7191/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr92609_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr92609_1.C?ref=2fb2966c19ab7a5c1a17b5f32de1def2110e7191", "patch": "@@ -0,0 +1,58 @@\n+namespace std {\n+inline namespace __cxx11 {}\n+template < typename _Default > struct __detector { using type = _Default; };\n+template < typename _Default, template < typename > class >\n+using __detected_or = __detector< _Default >;\n+template < typename _Default, template < typename > class _Op >\n+using __detected_or_t = typename __detected_or< _Default, _Op >::type;\n+template < typename > class allocator;\n+template < class > struct char_traits;\n+namespace __cxx11 {\n+template < typename _CharT, typename = char_traits< _CharT >,\n+           typename = allocator< _CharT > >\n+class basic_string;\n+}\n+struct __allocator_traits_base {\n+  template < typename _Tp > using __pointer = typename _Tp::pointer;\n+};\n+struct allocator_traits : __allocator_traits_base {\n+  using pointer = __detected_or_t< char *, __pointer >;\n+};\n+namespace __cxx11 {\n+template < typename, typename, typename > class basic_string {\n+  struct _Alloc_hider {\n+    allocator_traits::pointer _M_p;\n+  } _M_dataplus;\n+  unsigned long _M_string_length;\n+  enum { _S_local_capacity = 15 };\n+  union {\n+    char _M_local_buf[_S_local_capacity + 1];\n+    unsigned long _M_allocated_capacity;\n+  };\n+};\n+} // __cxx11\n+} // std\n+class wxRefCounter;\n+class wxObject {\n+  virtual int GetClassInfo();\n+  wxRefCounter *m_refData;\n+};\n+class wxGDIObject : wxObject {};\n+class wxFontBase : wxGDIObject {};\n+class wxFont : wxFontBase {};\n+template < class > class map {};\n+namespace {\n+struct OpenGLTextGlyph;\n+}\n+typedef map< OpenGLTextGlyph > glyphMap;\n+class OpenGLText {\n+  float r, g, b, a;\n+  int fontSize;\n+  bool fontBold;\n+  bool fontItalics;\n+  std::basic_string< char > fontFace;\n+  wxFont font;\n+  glyphMap glyphs;\n+  OpenGLText();\n+};\n+OpenGLText::OpenGLText() {}"}]}