{"sha": "6175383249143309fdc780a02bea484f4450def7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE3NTM4MzI0OTE0MzMwOWZkYzc4MGEwMmJlYTQ4NGY0NDUwZGVmNw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-12-03T19:01:06Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-12-16T13:40:57Z"}, "message": "Switch to a new section if the SECTION_RETAIN bit doesn't match\n\nWhen definitions marked with used attribute and unmarked definitions are\nplaced in the section with the same name, switch to a new section if the\nSECTION_RETAIN bit doesn't match.\n\ngcc/\n\n\tPR target/98146\n\t* output.h (switch_to_section): Add a tree argument, default to\n\tnullptr.\n\t* varasm.c (get_section): If the SECTION_RETAIN bit doesn't match,\n\treturn and switch to a new section later.\n\t(assemble_start_function): Pass decl to switch_to_section.\n\t(assemble_variable): Likewise.\n\t(switch_to_section): If the SECTION_RETAIN bit doesn't match,\n\tswitch to a new section.\n\ngcc/testsuite/\n\n\tPR target/98146\n\t* c-c++-common/attr-used-5.c: New test.\n\t* c-c++-common/attr-used-6.c: Likewise.\n\t* c-c++-common/attr-used-7.c: Likewise.\n\t* c-c++-common/attr-used-8.c: Likewise.\n\t* c-c++-common/attr-used-9.c: Likewise.", "tree": {"sha": "8a91ba4ed7888a01e7748bf51d5058126d41e210", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a91ba4ed7888a01e7748bf51d5058126d41e210"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6175383249143309fdc780a02bea484f4450def7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6175383249143309fdc780a02bea484f4450def7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6175383249143309fdc780a02bea484f4450def7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6175383249143309fdc780a02bea484f4450def7/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab9bd93271061f436c10e35e261ecb73e2108ccc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab9bd93271061f436c10e35e261ecb73e2108ccc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab9bd93271061f436c10e35e261ecb73e2108ccc"}], "stats": {"total": 136, "additions": 130, "deletions": 6}, "files": [{"sha": "1f9af46da1d425d42eee25075c0e1e57c1ee798c", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6175383249143309fdc780a02bea484f4450def7/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6175383249143309fdc780a02bea484f4450def7/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=6175383249143309fdc780a02bea484f4450def7", "patch": "@@ -548,7 +548,7 @@ extern void switch_to_other_text_partition (void);\n extern section *get_cdtor_priority_section (int, bool);\n \n extern bool unlikely_text_section_p (section *);\n-extern void switch_to_section (section *);\n+extern void switch_to_section (section *, tree = nullptr);\n extern void output_section_asm_op (const void *);\n \n extern void record_tm_clone_pair (tree, tree);"}, {"sha": "9fc0d3834e9399331fdfebfca89a0f5757713067", "filename": "gcc/testsuite/c-c++-common/attr-used-5.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6175383249143309fdc780a02bea484f4450def7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6175383249143309fdc780a02bea484f4450def7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-5.c?ref=6175383249143309fdc780a02bea484f4450def7", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -O2\" } */\n+\n+struct dtv_slotinfo_list\n+{\n+  struct dtv_slotinfo_list *next;\n+};\n+\n+extern struct dtv_slotinfo_list *list;\n+\n+static int __attribute__ ((section (\"__libc_freeres_fn\")))\n+free_slotinfo (struct dtv_slotinfo_list **elemp)\n+{\n+  if (!free_slotinfo (&(*elemp)->next))\n+    return 0;\n+  return 1;\n+}\n+\n+__attribute__ ((used, section (\"__libc_freeres_fn\")))\n+static void free_mem (void)\n+{\n+  free_slotinfo (&list);\n+}\n+\n+/* { dg-final { scan-assembler \"__libc_freeres_fn,\\\"ax\\\"\" { target R_flag_in_section } } } */\n+/* { dg-final { scan-assembler \"__libc_freeres_fn,\\\"axR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "0cb82ade5a9554c6e37155193e358fa9b80158a1", "filename": "gcc/testsuite/c-c++-common/attr-used-6.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6175383249143309fdc780a02bea484f4450def7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6175383249143309fdc780a02bea484f4450def7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-6.c?ref=6175383249143309fdc780a02bea484f4450def7", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -O2\" } */\n+\n+struct dtv_slotinfo_list\n+{\n+  struct dtv_slotinfo_list *next;\n+};\n+\n+extern struct dtv_slotinfo_list *list;\n+\n+static int __attribute__ ((used, section (\"__libc_freeres_fn\")))\n+free_slotinfo (struct dtv_slotinfo_list **elemp)\n+{\n+  if (!free_slotinfo (&(*elemp)->next))\n+    return 0;\n+  return 1;\n+}\n+\n+__attribute__ ((section (\"__libc_freeres_fn\")))\n+void free_mem (void)\n+{\n+  free_slotinfo (&list);\n+}\n+\n+/* { dg-final { scan-assembler \"__libc_freeres_fn,\\\"ax\\\"\" { target R_flag_in_section } } } */\n+/* { dg-final { scan-assembler \"__libc_freeres_fn,\\\"axR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "fba2706ffc10d3047adab6b598ff5c38361d42d0", "filename": "gcc/testsuite/c-c++-common/attr-used-7.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6175383249143309fdc780a02bea484f4450def7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6175383249143309fdc780a02bea484f4450def7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-7.c?ref=6175383249143309fdc780a02bea484f4450def7", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -O2\" } */\n+\n+int __attribute__((used,section(\".data.foo\"))) foo2 = 2;\n+int __attribute__((section(\".data.foo\"))) foo1 = 1;\n+\n+/* { dg-final { scan-assembler \".data.foo,\\\"aw\\\"\" { target R_flag_in_section } } } */\n+/* { dg-final { scan-assembler \".data.foo,\\\"awR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "4da4aabe573cbd3ce76844542450f5528e383066", "filename": "gcc/testsuite/c-c++-common/attr-used-8.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6175383249143309fdc780a02bea484f4450def7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6175383249143309fdc780a02bea484f4450def7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-8.c?ref=6175383249143309fdc780a02bea484f4450def7", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -O2\" } */\n+\n+int __attribute__((section(\".data.foo\"))) foo1 = 1;\n+int __attribute__((used,section(\".data.foo\"))) foo2 = 2;\n+\n+/* { dg-final { scan-assembler \".data.foo,\\\"aw\\\"\" { target R_flag_in_section } } } */\n+/* { dg-final { scan-assembler \".data.foo,\\\"awR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "cf3bde67622f4e9cbc857c7b2eadf810010cda3a", "filename": "gcc/testsuite/c-c++-common/attr-used-9.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6175383249143309fdc780a02bea484f4450def7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6175383249143309fdc780a02bea484f4450def7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-9.c?ref=6175383249143309fdc780a02bea484f4450def7", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -O2\" } */\n+\n+struct dtv_slotinfo_list\n+{\n+  struct dtv_slotinfo_list *next;\n+};\n+\n+extern struct dtv_slotinfo_list *list;\n+\n+static int __attribute__ ((used, section (\"__libc_freeres_fn\")))\n+free_slotinfo (struct dtv_slotinfo_list **elemp)\n+{\n+  if (!free_slotinfo (&(*elemp)->next))\n+    return 0;\n+  return 1;\n+}\n+\n+__attribute__ ((section (\"__libc_freeres_fn\")))\n+static void free_mem (void)\n+/* { dg-warning \"defined but not used\" \"\" { target *-*-* } .-1 } */\n+{\n+  free_slotinfo (&list);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__libc_freeres_fn\\n\" } } */\n+/* { dg-final { scan-assembler-not \"__libc_freeres_fn,\\\"ax\\\"\" { target R_flag_in_section } } } */\n+/* { dg-final { scan-assembler \"__libc_freeres_fn,\\\"axR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "cfec870e067747a9475fe566fa34c76abe1bf30f", "filename": "gcc/varasm.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6175383249143309fdc780a02bea484f4450def7/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6175383249143309fdc780a02bea484f4450def7/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=6175383249143309fdc780a02bea484f4450def7", "patch": "@@ -281,7 +281,12 @@ get_noswitch_section (unsigned int flags, noswitch_section_callback callback)\n \n /* Return the named section structure associated with NAME.  Create\n    a new section with the given fields if no such structure exists.\n-   When NOT_EXISTING, then fail if the section already exists.  */\n+   When NOT_EXISTING, then fail if the section already exists.  Return\n+   the existing section if the SECTION_RETAIN bit doesn't match.  Set\n+   the SECTION_WRITE | SECTION_RELRO bits on the the existing section\n+   if one of the section flags is SECTION_WRITE | SECTION_RELRO and the\n+   other has none of these flags in named sections and either the section\n+   hasn't been declared yet or has been declared as writable.  */\n \n section *\n get_section (const char *name, unsigned int flags, tree decl,\n@@ -343,6 +348,11 @@ get_section (const char *name, unsigned int flags, tree decl,\n \t      sect->common.flags |= (SECTION_WRITE | SECTION_RELRO);\n \t      return sect;\n \t    }\n+\t  /* If the SECTION_RETAIN bit doesn't match, return and switch\n+\t     to a new section later.  */\n+\t  if ((sect->common.flags & SECTION_RETAIN)\n+\t      != (flags & SECTION_RETAIN))\n+\t    return sect;\n \t  /* Sanity check user variables for flag changes.  */\n \t  if (sect->named.decl != NULL\n \t      && DECL_P (sect->named.decl)\n@@ -1879,7 +1889,7 @@ assemble_start_function (tree decl, const char *fnname)\n \n   /* Switch to the correct text section for the start of the function.  */\n \n-  switch_to_section (function_section (decl));\n+  switch_to_section (function_section (decl), decl);\n   if (crtl->has_bb_partition && !hot_label_written)\n     ASM_OUTPUT_LABEL (asm_out_file, crtl->subsections.hot_section_label);\n \n@@ -2375,7 +2385,7 @@ assemble_variable (tree decl, int top_level ATTRIBUTE_UNUSED,\n \t  && (strcmp (sect->named.name, \".vtable_map_vars\") == 0))\n \thandle_vtv_comdat_section (sect, decl);\n       else\n-\tswitch_to_section (sect);\n+\tswitch_to_section (sect, decl);\n       if (align > BITS_PER_UNIT)\n \tASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (align / BITS_PER_UNIT));\n       assemble_variable_contents (decl, name, dont_output_data,\n@@ -7742,10 +7752,28 @@ output_section_asm_op (const void *directive)\n    the current section is NEW_SECTION.  */\n \n void\n-switch_to_section (section *new_section)\n+switch_to_section (section *new_section, tree decl)\n {\n   if (in_section == new_section)\n-    return;\n+    {\n+      if (HAVE_GAS_SHF_GNU_RETAIN\n+\t  && (new_section->common.flags & SECTION_NAMED)\n+\t  && decl != nullptr\n+\t  && DECL_P (decl)\n+\t  && (!!DECL_PRESERVE_P (decl)\n+\t      != !!(new_section->common.flags & SECTION_RETAIN)))\n+\t{\n+\t  /* If the SECTION_RETAIN bit doesn't match, switch to a new\n+\t     section.  */\n+\t  if (DECL_PRESERVE_P (decl))\n+\t    new_section->common.flags |= SECTION_RETAIN;\n+\t  else\n+\t    new_section->common.flags &= ~(SECTION_RETAIN\n+\t\t\t\t\t   | SECTION_DECLARED);\n+\t}\n+      else\n+\treturn;\n+    }\n \n   if (new_section->common.flags & SECTION_FORGET)\n     in_section = NULL;"}]}