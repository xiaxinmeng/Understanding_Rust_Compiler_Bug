{"sha": "54ef95cc4d1f3f2cde7c1f13250f889ffb81ca75", "node_id": "C_kwDOANBUbNoAKDU0ZWY5NWNjNGQxZjNmMmNkZTdjMWYxMzI1MGY4ODlmZmI4MWNhNzU", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-03-01T08:24:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-03-01T14:24:31Z"}, "message": "tree-optimization/104716 - check if we can copy loop in loop distribution\n\nThe following checks whether we can copy the loop before attempting\nto do so in loop distribution.  In the testcase there's a computed\ngoto and thus abnormal edges which we cannot redirect.\n\n2022-03-01  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/104716\n\t* tree-loop-distribution.cc (find_seed_stmts_for_distribution):\n\tCheck if we can copy the loop.\n\n\t* gfortran.dg/pr104716.f: New testcase.", "tree": {"sha": "a5b5025b9586d3993014db10e0bef189345d5d15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5b5025b9586d3993014db10e0bef189345d5d15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54ef95cc4d1f3f2cde7c1f13250f889ffb81ca75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ef95cc4d1f3f2cde7c1f13250f889ffb81ca75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54ef95cc4d1f3f2cde7c1f13250f889ffb81ca75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ef95cc4d1f3f2cde7c1f13250f889ffb81ca75/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fba8a8c26a22fc5fbc17a99605e0226dc6fbf28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fba8a8c26a22fc5fbc17a99605e0226dc6fbf28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fba8a8c26a22fc5fbc17a99605e0226dc6fbf28"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "97f899a920179d6caadfd182003588662c189dbb", "filename": "gcc/testsuite/gfortran.dg/pr104716.f", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ef95cc4d1f3f2cde7c1f13250f889ffb81ca75/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr104716.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ef95cc4d1f3f2cde7c1f13250f889ffb81ca75/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr104716.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr104716.f?ref=54ef95cc4d1f3f2cde7c1f13250f889ffb81ca75", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-std=legacy -O2 -ftree-loop-distribution -fno-move-loop-stores -fno-tree-dominator-opts\" }\n+\n+      SUBROUTINE FOO()\n+      \n+      COMMON /WORK/ C2(2, 2)\n+      \n+      DIMENSION D11(2)\n+\n+      EQUIVALENCE (D11(1), C2(1, 1))\n+\n+      DO 40 I = 1, 2\n+         DO 30 J = 1, 2\n+            ASSIGN 10 TO ILBL\n+            IF (C2(J, I) .NE. 0.0) THEN\n+               ASSIGN 20 TO ILBL\n+            ENDIF\n+            GO TO ILBL\n+ 10         CONTINUE\n+ 20         CONTINUE\n+            C2(J, I) = C2(J, I) + 1\n+ 30      CONTINUE\n+ 40   CONTINUE\n+\n+      DO 50 I = 1, 2\n+         PRINT 90, I\n+ 50   CONTINUE\n+      \n+      RETURN\n+ 90   FORMAT(I5)\n+      END"}, {"sha": "db6e9096a8678acb24ada7fbd26d0c5af3bb7010", "filename": "gcc/tree-loop-distribution.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ef95cc4d1f3f2cde7c1f13250f889ffb81ca75/gcc%2Ftree-loop-distribution.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ef95cc4d1f3f2cde7c1f13250f889ffb81ca75/gcc%2Ftree-loop-distribution.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.cc?ref=54ef95cc4d1f3f2cde7c1f13250f889ffb81ca75", "patch": "@@ -3277,8 +3277,15 @@ find_seed_stmts_for_distribution (class loop *loop, vec<gimple *> *work_list)\n \t  work_list->safe_push (stmt);\n \t}\n     }\n+  bool res = work_list->length () > 0;\n+  if (res && !can_copy_bbs_p (bbs, loop->num_nodes))\n+    {\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\tfprintf (dump_file, \"cannot copy loop %d.\\n\", loop->num);\n+      res = false;\n+    }\n   free (bbs);\n-  return work_list->length () > 0;\n+  return res;\n }\n \n /* A helper function for generate_{rawmemchr,strlen}_builtin functions in order"}]}