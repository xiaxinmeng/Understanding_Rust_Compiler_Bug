{"sha": "5ba25b2ef179aec8ba4c47612fbc5c388f41cb36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJhMjViMmVmMTc5YWVjOGJhNGM0NzYxMmZiYzVjMzg4ZjQxY2IzNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-16T08:02:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-16T08:02:21Z"}, "message": "tree-inline: Fix a -fcompare-debug issue in the inliner [PR94167]\n\nThe following testcase fails with -fcompare-debug.  The problem is that\nbar is marked as address_taken only with -g and not without.\nI've tracked it down to insert_init_stmt calling gimple_regimplify_operands\neven on DEBUG_STMTs.  That function will just insert normal stmts before\nthe DEBUG_STMT if the DEBUG_STMT operand isn't gimple val or invariant.\nWhile DCE will turn those statements into debug temporaries, it can cause\ndifferences in SSA_NAMEs and more importantly, the ipa references are\ngenerated from those before the DCE happens.\nOn the testcase, the DEBUG_STMT value is (int)bar.\n\nWe could generate DEBUG_STMTs with debug temporaries instead, but I fail to\nsee the reason to do that, DEBUG_STMTs allow other expressions and all we\nwant to ensure is that the expressions aren't too large (arbitrarily\ncomplex), but during inlining/function versioning I don't see why something\nwould queue a DEBUG_STMT with arbitrarily complex expressions in there.\n\n2020-03-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/94166\n\t* tree-ssa-reassoc.c (sort_by_mach_mode): Use SSA_NAME_VERSION\n\tas secondary comparison key.\n\n\t* gcc.dg/pr94166.c: New test.", "tree": {"sha": "23fdb3f9e13792ab0578b94026f8b77b6c7c5518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23fdb3f9e13792ab0578b94026f8b77b6c7c5518"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ba25b2ef179aec8ba4c47612fbc5c388f41cb36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba25b2ef179aec8ba4c47612fbc5c388f41cb36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ba25b2ef179aec8ba4c47612fbc5c388f41cb36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba25b2ef179aec8ba4c47612fbc5c388f41cb36/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4e9a59105a81cdd6c1328b0a5ed9fe4cc82840e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4e9a59105a81cdd6c1328b0a5ed9fe4cc82840e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4e9a59105a81cdd6c1328b0a5ed9fe4cc82840e"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "8709f0c7f535e9f825b318631a906107d81367f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba25b2ef179aec8ba4c47612fbc5c388f41cb36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba25b2ef179aec8ba4c47612fbc5c388f41cb36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ba25b2ef179aec8ba4c47612fbc5c388f41cb36", "patch": "@@ -1,3 +1,9 @@\n+2020-03-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/94166\n+\t* tree-ssa-reassoc.c (sort_by_mach_mode): Use SSA_NAME_VERSION\n+\tas secondary comparison key.\n+\n 2020-03-16  Bin Cheng  <bin.cheng@linux.alibaba.com>\n \n \tPR tree-optimization/94125"}, {"sha": "d52cd1effa3fc8bda4825d8fd089a0c80417f7b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba25b2ef179aec8ba4c47612fbc5c388f41cb36/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba25b2ef179aec8ba4c47612fbc5c388f41cb36/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5ba25b2ef179aec8ba4c47612fbc5c388f41cb36", "patch": "@@ -1,3 +1,8 @@\n+2020-03-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/94166\n+\t* gcc.dg/pr94166.c: New test.\n+\n 2020-03-16  Bin Cheng  <bin.cheng@linux.alibaba.com>\n \n \tPR tree-optimization/94125"}, {"sha": "71917c4a2ec0343d24f9f35661d84fc834409c49", "filename": "gcc/testsuite/gcc.dg/pr94166.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba25b2ef179aec8ba4c47612fbc5c388f41cb36/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94166.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba25b2ef179aec8ba4c47612fbc5c388f41cb36/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94166.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94166.c?ref=5ba25b2ef179aec8ba4c47612fbc5c388f41cb36", "patch": "@@ -0,0 +1,24 @@\n+/* PR tree-optimization/94166 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcompare-debug\" } */\n+\n+typedef int __m128i __attribute__((__may_alias__, __vector_size__(4 * sizeof (int))));\n+unsigned int b[512];\n+\n+void\n+foo (unsigned int *x, __m128i *y)\n+{\n+#define A(n) __m128i v##n = y[n];\n+#define B(n) A(n##0) A(n##1) A(n##2) A(n##3) A(n##4) A(n##5) A(n##6) A(n##7) \\\n+\t     A(n##8) A(n##9) A(n##a) A(n##b) A(n##c) A(n##d) A(n##e) A(n##f)\n+#define C(n) B(n##0) B(n##1) B(n##2) B(n##3) B(n##4) B(n##5) B(n##6) B(n##7)\n+  C(0x)\n+#undef A\n+#define A(n) *(__m128i *) &b[4 * n] = v##n;\n+  C(0x)\n+#undef A\n+#define A(n) + b[4 * n] + b[4 * n + 1] + b[4 * n + 2] + b[4 * n + 3]\n+  *x = *x\n+  C(0x)\n+  ;\n+}"}, {"sha": "79871a8c6596ea2b75c49286178e33ee23f276c5", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba25b2ef179aec8ba4c47612fbc5c388f41cb36/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba25b2ef179aec8ba4c47612fbc5c388f41cb36/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=5ba25b2ef179aec8ba4c47612fbc5c388f41cb36", "patch": "@@ -1793,8 +1793,11 @@ sort_by_mach_mode (const void *p_i, const void *p_j)\n     return 1;\n   else if (mode1 < mode2)\n     return -1;\n-  else\n-    return 0;\n+  if (SSA_NAME_VERSION (tr1) < SSA_NAME_VERSION (tr2))\n+    return -1;\n+  else if (SSA_NAME_VERSION (tr1) > SSA_NAME_VERSION (tr2))\n+    return 1;\n+  return 0;\n }\n \n /* Cleanup hash map for VECTOR information.  */"}]}