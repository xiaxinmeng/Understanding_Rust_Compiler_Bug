{"sha": "70dd0f7f41c65dd4162cc5184c519bfbec805cfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBkZDBmN2Y0MWM2NWRkNDE2MmNjNTE4NGM1MTliZmJlYzgwNWNmYg==", "commit": {"author": {"name": "Franz Sirl", "email": "Franz.Sirl-kernel@lauterbach.com", "date": "2000-09-29T17:38:25Z"}, "committer": {"name": "Franz Sirl", "email": "sirl@gcc.gnu.org", "date": "2000-09-29T17:38:25Z"}, "message": "loop.c (check_final_value): A GIV is not replaceable if used before set.\n\n\t2000-09-29  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n\t* loop.c (check_final_value): A GIV is not replaceable if used\n\tbefore set.\n\nFrom-SVN: r36668", "tree": {"sha": "455b4ac10185b5208cea4d031dfc4e4e6be5f066", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/455b4ac10185b5208cea4d031dfc4e4e6be5f066"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70dd0f7f41c65dd4162cc5184c519bfbec805cfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70dd0f7f41c65dd4162cc5184c519bfbec805cfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70dd0f7f41c65dd4162cc5184c519bfbec805cfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70dd0f7f41c65dd4162cc5184c519bfbec805cfb/comments", "author": {"login": "jinkama-san", "id": 1462162, "node_id": "MDQ6VXNlcjE0NjIxNjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1462162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jinkama-san", "html_url": "https://github.com/jinkama-san", "followers_url": "https://api.github.com/users/jinkama-san/followers", "following_url": "https://api.github.com/users/jinkama-san/following{/other_user}", "gists_url": "https://api.github.com/users/jinkama-san/gists{/gist_id}", "starred_url": "https://api.github.com/users/jinkama-san/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jinkama-san/subscriptions", "organizations_url": "https://api.github.com/users/jinkama-san/orgs", "repos_url": "https://api.github.com/users/jinkama-san/repos", "events_url": "https://api.github.com/users/jinkama-san/events{/privacy}", "received_events_url": "https://api.github.com/users/jinkama-san/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c6129af811f88b0ebabc443a29fb88ea44b52aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6129af811f88b0ebabc443a29fb88ea44b52aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c6129af811f88b0ebabc443a29fb88ea44b52aa"}], "stats": {"total": 41, "additions": 20, "deletions": 21}, "files": [{"sha": "86baeccd6ba2c433fac0928ad09f2b58571b2ca2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70dd0f7f41c65dd4162cc5184c519bfbec805cfb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70dd0f7f41c65dd4162cc5184c519bfbec805cfb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70dd0f7f41c65dd4162cc5184c519bfbec805cfb", "patch": "@@ -1,3 +1,8 @@\n+2000-09-29  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n+\n+\t* loop.c (check_final_value): A GIV is not replaceable if used\n+\tbefore set.\n+\n Fri Sep 29 10:04:12 2000  Jeffrey A Law  (law@cygnus.com)\n \n \t* version.c: Bump to gcc-2.97.\n@@ -62,6 +67,7 @@ Fri Sep 29 13:20:42 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \t* configure: Rebuilt.\n \n 2000-09-28  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n+\n \t* doloop.c (doloop_modify): Prevent delete_insn() from\n \tdeleting too much.  Prefer loop->top over loop->start as\n \ttarget for the new JUMP insn.\n@@ -2743,16 +2749,6 @@ Sat Sep  2 13:58:23 2000  Marek Michalkiewicz <marekm@linux.org.pl>\n \t* config/avr/avr.md (\"*negsi2\"): substitute %@ to __zero_reg__\n \t* config/avr/libgcc.S: Lost part of the previous patch.\n \n-2000-08-31  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n-\n-\t* rs6000/rs6000.h (NO_DOLLAR_IN_LABEL, DOLLARS_IN_IDENTIFIERS,\n-\tENCODE_SECTION_INFO, ASM_OUTPUT_SPECIAL_POOL_ENTRY_P): Move from\n-\there...\n-\t* rs6000/aix.h: ...to here.\n-\t* rs6000/linux.h (ASM_APP_ON, ASM_APP_OFF): Define to Linux-style.\n-\t* rs6000/rs6000.c (rs6000_select_section): Handle CONSTRUCTOR.\n-\t(rs6000_unique_section): Likewise.\n-\n 2000-08-31  J. David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* gthr-dce.h (__gthread_objc_mutex_allocate): Create a pthread_mutex_t"}, {"sha": "f685b3962e871b9505f393d1e36ceebcdd8563ca", "filename": "gcc/loop.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70dd0f7f41c65dd4162cc5184c519bfbec805cfb/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70dd0f7f41c65dd4162cc5184c519bfbec805cfb/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=70dd0f7f41c65dd4162cc5184c519bfbec805cfb", "patch": "@@ -5094,6 +5094,7 @@ check_final_value (loop, v)\n         or all uses follow that insn in the same basic block),\n      - its final value can be calculated (this condition is different\n        than the one above in record_giv)\n+     - it's not used before the it's set\n      - no assignments to the biv occur during the giv's lifetime.  */\n \n #if 0\n@@ -5105,7 +5106,7 @@ check_final_value (loop, v)\n   if ((final_value = final_giv_value (loop, v))\n       && (v->always_computable || last_use_this_basic_block (v->dest_reg, v->insn)))\n     {\n-      int biv_increment_seen = 0;\n+      int biv_increment_seen = 0, before_giv_insn = 0;\n       rtx p = v->insn;\n       rtx last_giv_use;\n \n@@ -5135,7 +5136,10 @@ check_final_value (loop, v)\n \t{\n \t  p = NEXT_INSN (p);\n \t  if (p == loop->end)\n-\t    p = NEXT_INSN (loop->start);\n+\t    {\n+\t      before_giv_insn = 1;\n+\t      p = NEXT_INSN (loop->start);\n+\t    }\n \t  if (p == v->insn)\n \t    break;\n \n@@ -5153,7 +5157,7 @@ check_final_value (loop, v)\n \n \t      if (reg_mentioned_p (v->dest_reg, PATTERN (p)))\n \t\t{\n-\t\t  if (biv_increment_seen)\n+\t\t  if (biv_increment_seen || before_giv_insn)\n \t\t    {\n \t\t      v->replaceable = 0;\n \t\t      v->not_replaceable = 1;\n@@ -5438,14 +5442,13 @@ basic_induction_var (loop, x, mode, dest_reg, p, inc_val, mult_val, location)\n \t\t       <= UNITS_PER_WORD)\n \t\t   && (GET_MODE_CLASS (GET_MODE (SET_DEST (set)))\n \t\t       == MODE_INT)\n-\t\t   && SUBREG_REG (SET_DEST (set)) == x))\n-\t      && basic_induction_var (loop, SET_SRC (set),\n-\t\t\t\t      (GET_MODE (SET_SRC (set)) == VOIDmode\n-\t\t\t\t       ? GET_MODE (x)\n-\t\t\t\t       : GET_MODE (SET_SRC (set))),\n-\t\t\t\t      dest_reg, insn,\n-\t\t\t\t      inc_val, mult_val, location))\n-\t    return 1;\n+\t\t   && SUBREG_REG (SET_DEST (set)) == x)))\n+\t      return basic_induction_var (loop, SET_SRC (set),\n+\t\t\t\t\t  (GET_MODE (SET_SRC (set)) == VOIDmode\n+\t\t\t\t\t   ? GET_MODE (x)\n+\t\t\t\t\t   : GET_MODE (SET_SRC (set))),\n+\t\t\t\t\t  dest_reg, insn,\n+\t\t\t\t\t  inc_val, mult_val, location);\n \t}\n       /* Fall through.  */\n "}]}