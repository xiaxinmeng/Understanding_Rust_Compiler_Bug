{"sha": "82d4982997c2e296135eb0c2f8f6c11b445c9484", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJkNDk4Mjk5N2MyZTI5NjEzNWViMGMyZjhmNmMxMWI0NDVjOTQ4NA==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2010-12-09T15:16:22Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2010-12-09T15:16:22Z"}, "message": "ipa-prop.h (struct ipa_parm_adjustment): New field alias_ptr_type.\n\n2010-12-09  Martin Jambor  <mjambor@suse.cz>\n\n\t* ipa-prop.h (struct ipa_parm_adjustment): New field alias_ptr_type.\n\t* ipa-prop.c (ipa_modify_call_arguments): Use it.\n\t* tree-sra.c (splice_param_accesses): Test that all accesses have the\n\tsame alias reference type.\n\t(turn_representatives_into_adjustments): Set alias_ptr_type of the\n\tadjustment.\n\nFrom-SVN: r167641", "tree": {"sha": "b9b56ea61d799eb9047c570a47d2d6d142e02c00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9b56ea61d799eb9047c570a47d2d6d142e02c00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82d4982997c2e296135eb0c2f8f6c11b445c9484", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82d4982997c2e296135eb0c2f8f6c11b445c9484", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82d4982997c2e296135eb0c2f8f6c11b445c9484", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82d4982997c2e296135eb0c2f8f6c11b445c9484/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "544ae3f5fd694689b2eeb480b14acc316e49fa27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/544ae3f5fd694689b2eeb480b14acc316e49fa27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/544ae3f5fd694689b2eeb480b14acc316e49fa27"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "7c380d35f032e3900796e866b9b37d73fe94c5fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d4982997c2e296135eb0c2f8f6c11b445c9484/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d4982997c2e296135eb0c2f8f6c11b445c9484/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82d4982997c2e296135eb0c2f8f6c11b445c9484", "patch": "@@ -1,3 +1,12 @@\n+2010-12-09  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-prop.h (struct ipa_parm_adjustment): New field alias_ptr_type.\n+\t* ipa-prop.c (ipa_modify_call_arguments): Use it.\n+\t* tree-sra.c (splice_param_accesses): Test that all accesses have the\n+\tsame alias reference type.\n+\t(turn_representatives_into_adjustments): Set alias_ptr_type of the\n+\tadjustment.\n+\n 2010-12-09  Martin Jambor  <mjambor@suse.cz>\n \n \tPR middle-end/46734"}, {"sha": "0e5a4b19d18062036d4d59f5fa5c9ddae57edab1", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d4982997c2e296135eb0c2f8f6c11b445c9484/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d4982997c2e296135eb0c2f8f6c11b445c9484/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=82d4982997c2e296135eb0c2f8f6c11b445c9484", "patch": "@@ -2210,13 +2210,10 @@ ipa_modify_call_arguments (struct cgraph_edge *cs, gimple stmt,\n \t  base = gimple_call_arg (stmt, adj->base_index);\n \t  loc = EXPR_LOCATION (base);\n \n-\t  if (TREE_CODE (base) == ADDR_EXPR\n-\t      && DECL_P (TREE_OPERAND (base, 0)))\n-\t    off = build_int_cst (TREE_TYPE (base),\n+\t  if (TREE_CODE (base) != ADDR_EXPR\n+\t      && POINTER_TYPE_P (TREE_TYPE (base)))\n+\t    off = build_int_cst (adj->alias_ptr_type,\n \t\t\t\t adj->offset / BITS_PER_UNIT);\n-\t  else if (TREE_CODE (base) != ADDR_EXPR\n-\t\t   && POINTER_TYPE_P (TREE_TYPE (base)))\n-\t    off = build_int_cst (TREE_TYPE (base), adj->offset / BITS_PER_UNIT);\n \t  else\n \t    {\n \t      HOST_WIDE_INT base_offset;\n@@ -2230,12 +2227,12 @@ ipa_modify_call_arguments (struct cgraph_edge *cs, gimple stmt,\n \t      if (!base)\n \t\t{\n \t\t  base = build_fold_addr_expr (prev_base);\n-\t\t  off = build_int_cst (reference_alias_ptr_type (prev_base),\n+\t\t  off = build_int_cst (adj->alias_ptr_type,\n \t\t\t\t       adj->offset / BITS_PER_UNIT);\n \t\t}\n \t      else if (TREE_CODE (base) == MEM_REF)\n \t\t{\n-\t\t  off = build_int_cst (TREE_TYPE (TREE_OPERAND (base, 1)),\n+\t\t  off = build_int_cst (adj->alias_ptr_type,\n \t\t\t\t       base_offset\n \t\t\t\t       + adj->offset / BITS_PER_UNIT);\n \t\t  off = int_const_binop (PLUS_EXPR, TREE_OPERAND (base, 1),\n@@ -2244,7 +2241,7 @@ ipa_modify_call_arguments (struct cgraph_edge *cs, gimple stmt,\n \t\t}\n \t      else\n \t\t{\n-\t\t  off = build_int_cst (reference_alias_ptr_type (prev_base),\n+\t\t  off = build_int_cst (adj->alias_ptr_type,\n \t\t\t\t       base_offset\n \t\t\t\t       + adj->offset / BITS_PER_UNIT);\n \t\t  base = build_fold_addr_expr (base);"}, {"sha": "fdf1a5e4a995a79560cb2a9e48e8f46e004dea62", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d4982997c2e296135eb0c2f8f6c11b445c9484/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d4982997c2e296135eb0c2f8f6c11b445c9484/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=82d4982997c2e296135eb0c2f8f6c11b445c9484", "patch": "@@ -458,6 +458,10 @@ struct ipa_parm_adjustment\n      be a pointer to this type.  */\n   tree type;\n \n+  /* Alias refrerence type to be used in MEM_REFs when adjusting caller\n+     arguments.  */\n+  tree alias_ptr_type;\n+\n   /* The new declaration when creating/replacing a parameter.  Created by\n      ipa_modify_formal_parameters, useful for functions modifying the body\n      accordingly. */"}, {"sha": "9d22ad76b4a54e0fc135b770722c801d41de541c", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d4982997c2e296135eb0c2f8f6c11b445c9484/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d4982997c2e296135eb0c2f8f6c11b445c9484/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=82d4982997c2e296135eb0c2f8f6c11b445c9484", "patch": "@@ -3563,10 +3563,12 @@ splice_param_accesses (tree parm, bool *ro_grp)\n   while (i < access_count)\n     {\n       bool modification;\n+      tree a1_alias_type;\n       access = VEC_index (access_p, access_vec, i);\n       modification = access->write;\n       if (access_precludes_ipa_sra_p (access))\n \treturn NULL;\n+      a1_alias_type = reference_alias_ptr_type (access->expr);\n \n       /* Access is about to become group representative unless we find some\n \t nasty overlap which would preclude us from breaking this parameter\n@@ -3590,7 +3592,8 @@ splice_param_accesses (tree parm, bool *ro_grp)\n \t  if (access_precludes_ipa_sra_p (ac2)\n \t      || (ac2->type != access->type\n \t\t  && (TREE_ADDRESSABLE (ac2->type)\n-\t\t      || TREE_ADDRESSABLE (access->type))))\n+\t\t      || TREE_ADDRESSABLE (access->type)))\n+\t      || (reference_alias_ptr_type (ac2->expr) != a1_alias_type))\n \t    return NULL;\n \n \t  modification |= ac2->write;\n@@ -3825,6 +3828,7 @@ turn_representatives_into_adjustments (VEC (access_p, heap) *representatives,\n \t      adj->base_index = index;\n \t      adj->base = repr->base;\n \t      adj->type = repr->type;\n+\t      adj->alias_ptr_type = reference_alias_ptr_type (repr->expr);\n \t      adj->offset = repr->offset;\n \t      adj->by_ref = (POINTER_TYPE_P (TREE_TYPE (repr->base))\n \t\t\t     && (repr->grp_maybe_modified"}]}