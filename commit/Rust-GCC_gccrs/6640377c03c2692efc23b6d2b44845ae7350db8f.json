{"sha": "6640377c03c2692efc23b6d2b44845ae7350db8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY0MDM3N2MwM2MyNjkyZWZjMjNiNmQyYjQ0ODQ1YWU3MzUwZGI4Zg==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2003-10-01T12:43:23Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2003-10-01T12:43:23Z"}, "message": "cris-protos.h, cris.c: Convert to ISO C90 function declarations and definitions.\n\n\t* config/cris/cris-protos.h, config/cris/cris.c: Convert to ISO\n\tC90 function declarations and definitions.\n\nFrom-SVN: r71972", "tree": {"sha": "3475a57c444e04337fd6173d91e7449715958448", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3475a57c444e04337fd6173d91e7449715958448"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6640377c03c2692efc23b6d2b44845ae7350db8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6640377c03c2692efc23b6d2b44845ae7350db8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6640377c03c2692efc23b6d2b44845ae7350db8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6640377c03c2692efc23b6d2b44845ae7350db8f/comments", "author": null, "committer": null, "parents": [{"sha": "3fc87ac1471fe9687d14a1c15cc570077bf9ffba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fc87ac1471fe9687d14a1c15cc570077bf9ffba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fc87ac1471fe9687d14a1c15cc570077bf9ffba"}], "stats": {"total": 296, "additions": 111, "deletions": 185}, "files": [{"sha": "1e9f5220609a5bc3fdef949e856fb6f8fee8987e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6640377c03c2692efc23b6d2b44845ae7350db8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6640377c03c2692efc23b6d2b44845ae7350db8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6640377c03c2692efc23b6d2b44845ae7350db8f", "patch": "@@ -1,3 +1,8 @@\n+2003-10-01  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* config/cris/cris-protos.h, config/cris/cris.c: Convert to ISO\n+\tC90 function declarations and definitions.\n+\n 2003-10-01  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* config.gcc (cris-*-linux*): Revert mistaken commit."}, {"sha": "38b388b71b9e03cc43ddc3803e4870b3fbcc8e49", "filename": "gcc/config/cris/cris-protos.h", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6640377c03c2692efc23b6d2b44845ae7350db8f/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6640377c03c2692efc23b6d2b44845ae7350db8f/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris-protos.h?ref=6640377c03c2692efc23b6d2b44845ae7350db8f", "patch": "@@ -25,41 +25,40 @@ Boston, MA 02111-1307, USA.  */\n #define STDIO_INCLUDED\n #endif\n \n-extern void cris_conditional_register_usage PARAMS ((void));\n-extern int cris_simple_epilogue PARAMS ((void));\n+extern void cris_conditional_register_usage (void);\n+extern int cris_simple_epilogue (void);\n #ifdef RTX_CODE\n-extern const char *cris_op_str PARAMS ((rtx));\n-extern int cris_eligible_for_epilogue_delay PARAMS ((rtx));\n-extern void cris_notice_update_cc PARAMS ((rtx, rtx));\n-extern void cris_print_operand PARAMS ((FILE *, rtx, int));\n-extern void cris_print_operand_address PARAMS ((FILE *, rtx));\n-extern int cris_side_effect_mode_ok PARAMS ((enum rtx_code, rtx *, int, int,\n-                                             int, int, int));\n-extern rtx cris_return_addr_rtx PARAMS ((int, rtx));\n-extern rtx cris_split_movdx PARAMS ((rtx *));\n-extern int cris_legitimate_pic_operand PARAMS ((rtx));\n-extern int cris_gotless_symbol PARAMS ((rtx));\n-extern int cris_got_symbol PARAMS ((rtx));\n-extern int cris_symbol PARAMS ((rtx));\n-extern void cris_output_addr_const PARAMS ((FILE *, rtx));\n-extern int cris_cfun_uses_pic_table PARAMS ((void));\n-extern void cris_target_asm_named_section\n-  PARAMS ((const char *, unsigned int));\n+extern const char *cris_op_str (rtx);\n+extern int cris_eligible_for_epilogue_delay (rtx);\n+extern void cris_notice_update_cc (rtx, rtx);\n+extern void cris_print_operand (FILE *, rtx, int);\n+extern void cris_print_operand_address (FILE *, rtx);\n+extern int cris_side_effect_mode_ok (enum rtx_code, rtx *, int, int,\n+                                     int, int, int);\n+extern rtx cris_return_addr_rtx (int, rtx);\n+extern rtx cris_split_movdx (rtx *);\n+extern int cris_legitimate_pic_operand (rtx);\n+extern int cris_gotless_symbol (rtx);\n+extern int cris_got_symbol (rtx);\n+extern int cris_symbol (rtx);\n+extern void cris_output_addr_const (FILE *, rtx);\n+extern int cris_cfun_uses_pic_table (void);\n+extern void cris_target_asm_named_section (const char *, unsigned int);\n \n # ifdef TREE_CODE\n-extern rtx cris_expand_builtin_va_arg PARAMS ((tree, tree));\n+extern rtx cris_expand_builtin_va_arg (tree, tree);\n # endif\n #endif /* RTX_CODE */\n \n-extern void cris_pragma_expand_mul PARAMS ((struct cpp_reader *));\n+extern void cris_pragma_expand_mul (struct cpp_reader *);\n \n /* Need one that returns an int; usable in expressions. */\n-extern int cris_fatal PARAMS ((char *));\n+extern int cris_fatal (char *);\n \n-extern void cris_override_options PARAMS ((void));\n+extern void cris_override_options (void);\n \n-extern int cris_initial_elimination_offset PARAMS ((int, int));\n+extern int cris_initial_elimination_offset (int, int);\n \n-extern void cris_init_expanders PARAMS ((void));\n+extern void cris_init_expanders (void);\n \n-extern int cris_delay_slots_for_epilogue PARAMS ((void));\n+extern int cris_delay_slots_for_epilogue (void);"}, {"sha": "b4c064c1f69e158e6cb5ba01a773e6bdebf2847a", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 81, "deletions": 159, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6640377c03c2692efc23b6d2b44845ae7350db8f/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6640377c03c2692efc23b6d2b44845ae7350db8f/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=6640377c03c2692efc23b6d2b44845ae7350db8f", "patch": "@@ -82,33 +82,31 @@ static char cris_output_insn_is_bound = 0;\n static int cris_pic_sympart_only = 0;\n \n /* Fix for reg_overlap_mentioned_p.  */\n-static int cris_reg_overlap_mentioned_p PARAMS ((rtx, rtx));\n+static int cris_reg_overlap_mentioned_p (rtx, rtx);\n \n-static void cris_print_base PARAMS ((rtx, FILE *));\n+static void cris_print_base (rtx, FILE *);\n \n-static void cris_print_index PARAMS ((rtx, FILE *));\n+static void cris_print_index (rtx, FILE *);\n \n-static struct machine_function * cris_init_machine_status PARAMS ((void));\n+static struct machine_function * cris_init_machine_status (void);\n \n-static int cris_initial_frame_pointer_offset PARAMS ((void));\n+static int cris_initial_frame_pointer_offset (void);\n \n-static int saved_regs_mentioned PARAMS ((rtx));\n+static int saved_regs_mentioned (rtx);\n \n-static void cris_target_asm_function_prologue\n-  PARAMS ((FILE *, HOST_WIDE_INT));\n+static void cris_target_asm_function_prologue (FILE *, HOST_WIDE_INT);\n \n-static void cris_target_asm_function_epilogue\n-  PARAMS ((FILE *, HOST_WIDE_INT));\n+static void cris_target_asm_function_epilogue (FILE *, HOST_WIDE_INT);\n \n-static void cris_operand_lossage PARAMS ((const char *, rtx));\n+static void cris_operand_lossage (const char *, rtx);\n \n static void cris_asm_output_mi_thunk\n-  PARAMS ((FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT, tree));\n+  (FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT, tree);\n \n-static void cris_file_start PARAMS ((void));\n+static void cris_file_start (void);\n \n-static bool cris_rtx_costs PARAMS ((rtx, int, int, int *));\n-static int cris_address_cost PARAMS ((rtx));\n+static bool cris_rtx_costs (rtx, int, int, int *);\n+static int cris_address_cost (rtx);\n \n /* The function cris_target_asm_function_epilogue puts the last insn to\n    output here.  It always fits; there won't be a symbol operand.  Used in\n@@ -184,9 +182,7 @@ struct gcc_target targetm = TARGET_INITIALIZER;\n    c) a [r] or [r+] in SImode, or sign-extend from HI or QI.  */\n \n int\n-cris_bdap_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+cris_bdap_operand (rtx op, enum machine_mode mode)\n {\n   register enum rtx_code code = GET_CODE (op);\n \n@@ -243,9 +239,7 @@ cris_bdap_operand (op, mode)\n    d) a [r] or [r+] in SImode, or sign-extend from HI or QI.  */\n \n int\n-cris_bdap_biap_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+cris_bdap_biap_operand (rtx op, enum machine_mode mode)\n {\n   register enum rtx_code code = GET_CODE (op);\n   rtx reg;\n@@ -290,9 +284,7 @@ cris_bdap_biap_operand (op, mode)\n    AND or UMIN.  */\n \n int\n-cris_orthogonal_operator (x, mode)\n-     rtx x;\n-     enum machine_mode mode;\n+cris_orthogonal_operator (rtx x, enum machine_mode mode)\n {\n   enum rtx_code code = GET_CODE (x);\n \n@@ -308,9 +300,7 @@ cris_orthogonal_operator (x, mode)\n    UMIN.  */\n \n int\n-cris_commutative_orth_op (x, mode)\n-     rtx x;\n-     enum machine_mode mode;\n+cris_commutative_orth_op (rtx x, enum machine_mode mode)\n {\n   enum rtx_code code = GET_CODE (x);\n \n@@ -325,9 +315,7 @@ cris_commutative_orth_op (x, mode)\n /* Check if MODE is same as mode for X, and X is PLUS or MINUS or UMIN.  */\n \n int\n-cris_operand_extend_operator (x, mode)\n-     rtx x;\n-     enum machine_mode mode;\n+cris_operand_extend_operator (rtx x, enum machine_mode mode)\n {\n   enum rtx_code code = GET_CODE (x);\n \n@@ -341,9 +329,7 @@ cris_operand_extend_operator (x, mode)\n /* Check if MODE is same as mode for X, and X is PLUS or MINUS.  */\n \n int\n-cris_additive_operand_extend_operator (x, mode)\n-     rtx x;\n-     enum machine_mode mode;\n+cris_additive_operand_extend_operator (rtx x, enum machine_mode mode)\n {\n   enum rtx_code code = GET_CODE (x);\n \n@@ -358,9 +344,7 @@ cris_additive_operand_extend_operator (x, mode)\n    ZERO_EXTEND.  */\n \n int\n-cris_extend_operator (x, mode)\n-     rtx x;\n-     enum machine_mode mode;\n+cris_extend_operator (rtx x, enum machine_mode mode)\n {\n   enum rtx_code code = GET_CODE (x);\n \n@@ -374,9 +358,7 @@ cris_extend_operator (x, mode)\n /* Check to see if MODE is same as mode for X, and X is PLUS or BOUND.  */\n \n int\n-cris_plus_or_bound_operator (x, mode)\n-     rtx x;\n-     enum machine_mode mode;\n+cris_plus_or_bound_operator (rtx x, enum machine_mode mode)\n {\n   enum rtx_code code = GET_CODE (x);\n \n@@ -392,9 +374,7 @@ cris_plus_or_bound_operator (x, mode)\n    \"movsi\" expander.  */\n \n int\n-cris_general_operand_or_symbol (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+cris_general_operand_or_symbol (rtx op, enum machine_mode mode)\n {\n   return general_operand (op, mode)\n     || (CONSTANT_P (op) && cris_symbol (op));\n@@ -405,9 +385,7 @@ cris_general_operand_or_symbol (op, mode)\n    \"movsi\" anonymous pattern for PIC symbols.  */\n \n int\n-cris_general_operand_or_gotless_symbol (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+cris_general_operand_or_gotless_symbol (rtx op, enum machine_mode mode)\n {\n   return general_operand (op, mode)\n     || (CONSTANT_P (op) && cris_gotless_symbol (op));\n@@ -418,9 +396,7 @@ cris_general_operand_or_gotless_symbol (op, mode)\n    \"call\" and \"call_value\" anonymous patterns.  */\n \n int\n-cris_general_operand_or_plt_symbol (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+cris_general_operand_or_plt_symbol (rtx op, enum machine_mode mode)\n {\n   return general_operand (op, mode)\n     || (GET_CODE (op) == CONST\n@@ -435,9 +411,7 @@ cris_general_operand_or_plt_symbol (op, mode)\n    UNSPEC 0).  */\n \n int\n-cris_mem_call_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n+cris_mem_call_operand (rtx op, enum machine_mode mode)\n {\n   rtx xmem;\n \n@@ -455,7 +429,7 @@ cris_mem_call_operand (op, mode)\n /* The CONDITIONAL_REGISTER_USAGE worker.   */\n \n void\n-cris_conditional_register_usage ()\n+cris_conditional_register_usage (void)\n {\n   /* FIXME: This isn't nice.  We should be able to use that register for\n      something else if the PIC table isn't needed.  */\n@@ -468,7 +442,7 @@ cris_conditional_register_usage ()\n    since some generated files do not include function.h.  */\n \n int\n-cris_cfun_uses_pic_table ()\n+cris_cfun_uses_pic_table (void)\n {\n   return current_function_uses_pic_offset_table;\n }\n@@ -478,8 +452,7 @@ cris_cfun_uses_pic_table ()\n    define_insn.  */\n \n const char *\n-cris_op_str (x)\n-     rtx x;\n+cris_op_str (rtx x)\n {\n   cris_output_insn_is_bound = 0;\n   switch (GET_CODE (x))\n@@ -547,9 +520,7 @@ cris_op_str (x)\n    categorization of the error.  */\n \n static void\n-cris_operand_lossage (msgid, op)\n-     const char *msgid;\n-     rtx op;\n+cris_operand_lossage (const char *msgid, rtx op)\n {\n   debug_rtx (op);\n   output_operand_lossage (\"%s\", msgid);\n@@ -558,9 +529,7 @@ cris_operand_lossage (msgid, op)\n /* Print an index part of an address to file.  */\n \n static void\n-cris_print_index (index, file)\n-     rtx index;\n-     FILE * file;\n+cris_print_index (rtx index, FILE *file)\n {\n   rtx inner = XEXP (index, 0);\n \n@@ -613,9 +582,7 @@ cris_print_index (index, file)\n /* Print a base rtx of an address to file.  */\n \n static void\n-cris_print_base (base, file)\n-     rtx base;\n-     FILE *file;\n+cris_print_base (rtx base, FILE *file)\n {\n   if (REG_P (base))\n     fprintf (file, \"$%s\", reg_names[REGNO (base)]);\n@@ -629,8 +596,7 @@ cris_print_base (base, file)\n /* Usable as a guard in expressions.  */\n \n int\n-cris_fatal (arg)\n-     char *arg;\n+cris_fatal (char *arg)\n {\n   internal_error (arg);\n \n@@ -641,9 +607,7 @@ cris_fatal (arg)\n /* Textual function prologue.  */\n \n static void\n-cris_target_asm_function_prologue (file, size)\n-     FILE *file;\n-     HOST_WIDE_INT size;\n+cris_target_asm_function_prologue (FILE *file, HOST_WIDE_INT size)\n {\n   int regno;\n \n@@ -926,8 +890,7 @@ cris_target_asm_function_prologue (file, size)\n    can be put in the epilogue.  */\n \n static int\n-saved_regs_mentioned (x)\n-     rtx x;\n+saved_regs_mentioned (rtx x)\n {\n   int i;\n   const char *fmt;\n@@ -976,8 +939,7 @@ saved_regs_mentioned (x)\n /* Figure out if the insn may be put in the epilogue.  */\n \n int\n-cris_eligible_for_epilogue_delay (insn)\n-     rtx insn;\n+cris_eligible_for_epilogue_delay (rtx insn)\n {\n   /* First of all, it must be as slottable as for a delayed branch insn.  */\n   if (get_attr_slottable (insn) != SLOTTABLE_YES)\n@@ -1008,7 +970,7 @@ cris_eligible_for_epilogue_delay (insn)\n    contains \"ret\", else 0.  */\n \n int\n-cris_delay_slots_for_epilogue ()\n+cris_delay_slots_for_epilogue (void)\n {\n   /* Check if we use a return insn, which we only do for leaf functions.\n      Else there is no slot to fill.  */\n@@ -1036,9 +998,7 @@ cris_delay_slots_for_epilogue ()\n    itself by storing the delay insn in save_last.  */\n \n static void\n-cris_target_asm_function_epilogue (file, size)\n-     FILE *file;\n-     HOST_WIDE_INT size;\n+cris_target_asm_function_epilogue (FILE *file, HOST_WIDE_INT size)\n {\n   int regno;\n   int last_movem_reg = -1;\n@@ -1299,10 +1259,7 @@ cris_target_asm_function_epilogue (file, size)\n /* The PRINT_OPERAND worker.  */\n \n void\n-cris_print_operand (file, x, code)\n-     FILE *file;\n-     rtx x;\n-     int code;\n+cris_print_operand (FILE *file, rtx x, int code)\n {\n   rtx operand = x;\n \n@@ -1622,9 +1579,7 @@ cris_print_operand (file, x, code)\n /* The PRINT_OPERAND_ADDRESS worker.  */\n \n void\n-cris_print_operand_address (file, x)\n-     FILE *file;\n-     rtx x;\n+cris_print_operand_address (FILE *file, rtx x)\n {\n   /* All these were inside MEM:s so output indirection characters.  */\n   putc ('[', file);\n@@ -1674,9 +1629,7 @@ cris_print_operand_address (file, x)\n    initial-value machinery.  */\n \n rtx\n-cris_return_addr_rtx (count, frameaddr)\n-     int count;\n-     rtx frameaddr ATTRIBUTE_UNUSED;\n+cris_return_addr_rtx (int count, rtx frameaddr ATTRIBUTE_UNUSED)\n {\n   cfun->machine->needs_return_address_on_stack = 1;\n \n@@ -1692,7 +1645,7 @@ cris_return_addr_rtx (count, frameaddr)\n    handles FP -> SP elimination offset.  */\n \n static int\n-cris_initial_frame_pointer_offset ()\n+cris_initial_frame_pointer_offset (void)\n {\n   int regno;\n \n@@ -1737,9 +1690,7 @@ cris_initial_frame_pointer_offset ()\n    and imaginary arg pointer.  */\n \n int\n-cris_initial_elimination_offset (fromreg, toreg)\n-     int fromreg;\n-     int toreg;\n+cris_initial_elimination_offset (int fromreg, int toreg)\n {\n   int fp_sp_offset\n     = cris_initial_frame_pointer_offset ();\n@@ -1783,9 +1734,7 @@ cris_initial_elimination_offset (fromreg, toreg)\n     check-cc-attribute methods.  */\n \n void\n-cris_notice_update_cc (exp, insn)\n-     rtx exp;\n-     rtx insn;\n+cris_notice_update_cc (rtx exp, rtx insn)\n {\n   /* Check if user specified \"-mcc-init\" as a bug-workaround.  FIXME:\n      TARGET_CCINIT does not work; we must set CC_REVERSED as below.\n@@ -2072,7 +2021,7 @@ cris_notice_update_cc (exp, insn)\n    many registers must be saved, so return 0 then.  */\n \n int\n-cris_simple_epilogue ()\n+cris_simple_epilogue (void)\n {\n   int regno;\n   int reglimit = STACK_POINTER_REGNUM;\n@@ -2115,10 +2064,7 @@ cris_simple_epilogue ()\n    scanned.  In either case, *TOTAL contains the cost result.  */\n \n static bool\n-cris_rtx_costs (x, code, outer_code, total)\n-     rtx x;\n-     int code, outer_code;\n-     int *total;\n+cris_rtx_costs (rtx x, int code, int outer_code, int *total)\n {\n   switch (code)\n     {\n@@ -2224,8 +2170,7 @@ cris_rtx_costs (x, code, outer_code, total)\n /* The ADDRESS_COST worker.  */\n \n static int\n-cris_address_cost (x)\n-     rtx x;\n+cris_address_cost (rtx x)\n {\n   /* The metric to use for the cost-macros is unclear.\n      The metric used here is (the number of cycles needed) / 2,\n@@ -2307,10 +2252,9 @@ cris_address_cost (x)\n \t      whose mode we must consider.  */\n \n int\n-cris_side_effect_mode_ok (code, ops, lreg, rreg, rval, multop, other_op)\n-     enum rtx_code code;\n-     rtx *ops;\n-     int lreg, rreg, rval, multop, other_op;\n+cris_side_effect_mode_ok (enum rtx_code code, rtx *ops,\n+\t\t\t  int lreg, int rreg, int rval,\n+\t\t\t  int multop, int other_op)\n {\n   /* Find what value to multiply with, for rx =ry + rz * n.  */\n   int mult = multop < 0 ? 1 : INTVAL (ops[multop]);\n@@ -2424,8 +2368,7 @@ cris_side_effect_mode_ok (code, ops, lreg, rreg, rval, multop, other_op)\n    anyway.  */\n \n static int\n-cris_reg_overlap_mentioned_p (x, in)\n-     rtx x, in;\n+cris_reg_overlap_mentioned_p (rtx x, rtx in)\n {\n   /* The function reg_overlap_mentioned now handles when X is\n      strict_low_part, but not when IN is a STRICT_LOW_PART.  */\n@@ -2439,9 +2382,7 @@ cris_reg_overlap_mentioned_p (x, in)\n    We just dispatch to the functions for ELF and a.out.  */\n \n void\n-cris_target_asm_named_section (name, flags)\n-     const char *name;\n-     unsigned int flags;\n+cris_target_asm_named_section (const char *name, unsigned int flags)\n {\n   if (! TARGET_ELF)\n     default_no_named_section (name, flags);\n@@ -2452,8 +2393,7 @@ cris_target_asm_named_section (name, flags)\n /* The LEGITIMATE_PIC_OPERAND_P worker.  */\n \n int\n-cris_legitimate_pic_operand (x)\n-     rtx x;\n+cris_legitimate_pic_operand (rtx x)\n {\n   /* The PIC representation of a symbol with a GOT entry will be (for\n      example; relocations differ):\n@@ -2469,8 +2409,7 @@ cris_legitimate_pic_operand (x)\n    CONSTANT_P.  */\n \n int\n-cris_symbol (x)\n-     rtx x;\n+cris_symbol (rtx x)\n {\n   switch (GET_CODE (x))\n     {\n@@ -2508,8 +2447,7 @@ cris_symbol (x)\n    see something that would need one.  */\n \n int\n-cris_gotless_symbol (x)\n-     rtx x;\n+cris_gotless_symbol (rtx x)\n {\n #ifdef ENABLE_CHECKING\n   if (!flag_pic)\n@@ -2569,8 +2507,7 @@ cris_gotless_symbol (x)\n    CONSTANT_P, and the symbol needs a GOT entry.  */\n \n int\n-cris_got_symbol (x)\n-     rtx x;\n+cris_got_symbol (rtx x)\n {\n #ifdef ENABLE_CHECKING\n   if (!flag_pic)\n@@ -2616,7 +2553,7 @@ cris_got_symbol (x)\n    As is the norm, this also parses -mfoo=bar type parameters.  */\n \n void\n-cris_override_options ()\n+cris_override_options (void)\n {\n   if (cris_max_stackframe_str)\n     {\n@@ -2733,12 +2670,11 @@ cris_override_options ()\n /* The TARGET_ASM_OUTPUT_MI_THUNK worker.  */\n \n static void\n-cris_asm_output_mi_thunk (stream, thunkdecl, delta, vcall_offset, funcdecl)\n-     FILE *stream;\n-     tree thunkdecl ATTRIBUTE_UNUSED;\n-     HOST_WIDE_INT delta;\n-     HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED;\n-     tree funcdecl;\n+cris_asm_output_mi_thunk (FILE *stream,\n+\t\t\t  tree thunkdecl ATTRIBUTE_UNUSED,\n+\t\t\t  HOST_WIDE_INT delta,\n+\t\t\t  HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED,\n+\t\t\t  tree funcdecl)\n {\n   if (delta > 0)\n     fprintf (stream, \"\\tadd%s \" HOST_WIDE_INT_PRINT_DEC \",$%s\\n\",\n@@ -2774,7 +2710,7 @@ cris_asm_output_mi_thunk (stream, thunkdecl, delta, vcall_offset, funcdecl)\n \n    We want a .file directive only if TARGET_ELF.  */\n static void\n-cris_file_start ()\n+cris_file_start (void)\n {\n   /* These expressions can vary at run time, so we cannot put\n      them into TARGET_INITIALIZER.  */\n@@ -2791,9 +2727,7 @@ cris_file_start ()\n    pass-by-reference, then perform an indirection.  */\n \n rtx\n-cris_expand_builtin_va_arg (valist, type)\n-     tree valist;\n-     tree type;\n+cris_expand_builtin_va_arg (tree valist, tree type)\n {\n   tree addr_tree, t;\n   rtx addr;\n@@ -2870,15 +2804,15 @@ cris_expand_builtin_va_arg (valist, type)\n    mark functions.  */\n \n void\n-cris_init_expanders ()\n+cris_init_expanders (void)\n {\n   /* Nothing here at the moment.  */\n }\n \n /* Zero initialization is OK for all current fields.  */\n \n static struct machine_function *\n-cris_init_machine_status ()\n+cris_init_machine_status (void)\n {\n   return ggc_alloc_cleared (sizeof (struct machine_function));\n }\n@@ -2887,8 +2821,7 @@ cris_init_machine_status ()\n    Originally a copy of gen_split_move_double in m32r.c.  */\n \n rtx\n-cris_split_movdx (operands)\n-     rtx *operands;\n+cris_split_movdx (rtx *operands)\n {\n   enum machine_mode mode = GET_MODE (operands[0]);\n   rtx dest = operands[0];\n@@ -3047,9 +2980,7 @@ cris_split_movdx (operands)\n    one for CODE_LABEL?).  */\n \n void\n-cris_output_addr_const (file, x)\n-     FILE *file;\n-     rtx x;\n+cris_output_addr_const (FILE *file, rtx x)\n {\n   int is_plt = 0;\n \n@@ -3221,70 +3152,61 @@ cris_output_addr_const (file, x)\n    debugger.  They might collide with gcc functions or system functions,\n    so only emit them when '#if 1' above.  */\n \n-enum rtx_code Get_code PARAMS ((rtx));\n+enum rtx_code Get_code (rtx);\n \n enum rtx_code\n-Get_code (x)\n-     rtx x;\n+Get_code (rtx x)\n {\n   return GET_CODE (x);\n }\n \n-const char *Get_mode PARAMS ((rtx));\n+const char *Get_mode (rtx);\n \n const char *\n-Get_mode (x)\n-     rtx x;\n+Get_mode (rtx x)\n {\n   return GET_MODE_NAME (GET_MODE (x));\n }\n \n-rtx Xexp PARAMS ((rtx, int));\n+rtx Xexp (rtx, int);\n \n rtx\n-Xexp (x, n)\n-     rtx x;\n-     int n;\n+Xexp (rtx x, int n)\n {\n   return XEXP (x, n);\n }\n \n-rtx Xvecexp PARAMS ((rtx, int, int));\n+rtx Xvecexp (rtx, int, int);\n \n rtx\n-Xvecexp (x, n, m)\n-     rtx x;\n-     int n;\n+Xvecexp (rtx x, int n, int m)\n {\n   return XVECEXP (x, n, m);\n }\n \n-int Get_rtx_len PARAMS ((rtx));\n+int Get_rtx_len (rtx);\n \n int\n-Get_rtx_len (x)\n-     rtx x;\n+Get_rtx_len (rtx x)\n {\n   return GET_RTX_LENGTH (GET_CODE (x));\n }\n \n /* Use upper-case to distinguish from local variables that are sometimes\n    called next_insn and prev_insn.  */\n \n-rtx Next_insn PARAMS ((rtx));\n+rtx Next_insn (rtx);\n \n rtx\n-Next_insn (insn)\n-     rtx insn;\n+Next_insn (rtx insn)\n {\n   return NEXT_INSN (insn);\n }\n \n-rtx Prev_insn PARAMS ((rtx));\n+rtx Prev_insn (rtx);\n \n rtx\n-Prev_insn (insn)\n-     rtx insn;\n+Prev_insn (rtx insn)\n {\n   return PREV_INSN (insn);\n }"}]}