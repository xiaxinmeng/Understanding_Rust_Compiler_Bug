{"sha": "a360c28cb6c2536a4ab3dfdaebb63ae05354a054", "node_id": "C_kwDOANBUbNoAKGEzNjBjMjhjYjZjMjUzNmE0YWIzZGZkYWViYjYzYWUwNTM1NGEwNTQ", "commit": {"author": {"name": "Faisal Abbas", "email": "90.abbasfaisal@gmail.com", "date": "2022-07-28T16:58:59Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-25T11:40:25Z"}, "message": "rust-constexpr.cc: port over cxx_eval_bit_field_ref\n\nSigned-off-by: Faisal Abbas <90.abbasfaisal@gmail.com>", "tree": {"sha": "6bd5ec699ed6ef9e46f2161f1c8d134dcb34113d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bd5ec699ed6ef9e46f2161f1c8d134dcb34113d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a360c28cb6c2536a4ab3dfdaebb63ae05354a054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a360c28cb6c2536a4ab3dfdaebb63ae05354a054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a360c28cb6c2536a4ab3dfdaebb63ae05354a054", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a360c28cb6c2536a4ab3dfdaebb63ae05354a054/comments", "author": {"login": "abbasfaisal", "id": 9428333, "node_id": "MDQ6VXNlcjk0MjgzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/9428333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abbasfaisal", "html_url": "https://github.com/abbasfaisal", "followers_url": "https://api.github.com/users/abbasfaisal/followers", "following_url": "https://api.github.com/users/abbasfaisal/following{/other_user}", "gists_url": "https://api.github.com/users/abbasfaisal/gists{/gist_id}", "starred_url": "https://api.github.com/users/abbasfaisal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abbasfaisal/subscriptions", "organizations_url": "https://api.github.com/users/abbasfaisal/orgs", "repos_url": "https://api.github.com/users/abbasfaisal/repos", "events_url": "https://api.github.com/users/abbasfaisal/events{/privacy}", "received_events_url": "https://api.github.com/users/abbasfaisal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17663caca44a5be8fd9d9de7eab3190c40bc594a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17663caca44a5be8fd9d9de7eab3190c40bc594a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17663caca44a5be8fd9d9de7eab3190c40bc594a"}], "stats": {"total": 93, "additions": 92, "deletions": 1}, "files": [{"sha": "9449d5998845a5d6cb173f89894f5be23db7ecb4", "filename": "gcc/rust/backend/rust-constexpr.cc", "status": "modified", "additions": 92, "deletions": 1, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a360c28cb6c2536a4ab3dfdaebb63ae05354a054/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a360c28cb6c2536a4ab3dfdaebb63ae05354a054/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-constexpr.cc?ref=a360c28cb6c2536a4ab3dfdaebb63ae05354a054", "patch": "@@ -18,7 +18,7 @@\n #include \"rust-location.h\"\n #include \"rust-diagnostics.h\"\n #include \"rust-tree.h\"\n-\n+#include \"rust-target.h\"\n #include \"fold-const.h\"\n #include \"realmpfr.h\"\n #include \"convert.h\"\n@@ -30,6 +30,7 @@\n #include \"cgraph.h\"\n #include \"tree-inline.h\"\n #include \"vec.h\"\n+#include \"rust-target.h\"\n \n #define VERIFY_CONSTANT(X)                                                     \\\n   do                                                                           \\\n@@ -488,6 +489,10 @@ eval_conditional_expression (const constexpr_ctx *ctx, tree t, bool lval,\n \t\t\t     bool *non_constant_p, bool *overflow_p,\n \t\t\t     tree *jump_target);\n \n+static tree\n+eval_bit_field_ref (const constexpr_ctx *ctx, tree t, bool lval,\n+\t\t    bool *non_constant_p, bool *overflow_p);\n+\n /* Variables and functions to manage constexpr call expansion context.\n    These do not need to be marked for PCH or GC.  */\n \n@@ -726,6 +731,10 @@ eval_constant_expression (const constexpr_ctx *ctx, tree t, bool lval,\n \t}\n       break;\n \n+    case BIT_FIELD_REF:\n+      r = eval_bit_field_ref (ctx, t, lval, non_constant_p, overflow_p);\n+      break;\n+\n     case COND_EXPR:\n     case IF_STMT:\n       if (jump_target && *jump_target)\n@@ -2669,6 +2678,88 @@ eval_conditional_expression (const constexpr_ctx *ctx, tree t, bool lval,\n \t\t\t\t   jump_target);\n }\n \n+// forked from gcc/cp/constexpr.cc cxx_eval_bit_field_ref\n+\n+/* Subroutine of cxx_eval_constant_expression.\n+   Attempt to reduce a field access of a value of class type that is\n+   expressed as a BIT_FIELD_REF.  */\n+\n+static tree\n+eval_bit_field_ref (const constexpr_ctx *ctx, tree t, bool lval,\n+\t\t    bool *non_constant_p, bool *overflow_p)\n+{\n+  tree orig_whole = TREE_OPERAND (t, 0);\n+  tree retval, fldval, utype, mask;\n+  bool fld_seen = false;\n+  HOST_WIDE_INT istart, isize;\n+  tree whole = eval_constant_expression (ctx, orig_whole, lval, non_constant_p,\n+\t\t\t\t\t overflow_p);\n+  tree start, field, value;\n+  unsigned HOST_WIDE_INT i;\n+\n+  if (whole == orig_whole)\n+    return t;\n+  /* Don't VERIFY_CONSTANT here; we only want to check that we got a\n+     CONSTRUCTOR.  */\n+  if (!*non_constant_p && TREE_CODE (whole) != VECTOR_CST\n+      && TREE_CODE (whole) != CONSTRUCTOR)\n+    {\n+      if (!ctx->quiet)\n+\terror (\"%qE is not a constant expression\", orig_whole);\n+      *non_constant_p = true;\n+    }\n+  if (*non_constant_p)\n+    return t;\n+\n+  if (TREE_CODE (whole) == VECTOR_CST)\n+    return fold_ternary (BIT_FIELD_REF, TREE_TYPE (t), whole,\n+\t\t\t TREE_OPERAND (t, 1), TREE_OPERAND (t, 2));\n+\n+  start = TREE_OPERAND (t, 2);\n+  istart = tree_to_shwi (start);\n+  isize = tree_to_shwi (TREE_OPERAND (t, 1));\n+  utype = TREE_TYPE (t);\n+  if (!TYPE_UNSIGNED (utype))\n+    utype = build_nonstandard_integer_type (TYPE_PRECISION (utype), 1);\n+  retval = build_int_cst (utype, 0);\n+  FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (whole), i, field, value)\n+    {\n+      tree bitpos = bit_position (field);\n+      STRIP_ANY_LOCATION_WRAPPER (value);\n+      if (bitpos == start && DECL_SIZE (field) == TREE_OPERAND (t, 1))\n+\treturn value;\n+      if (TREE_CODE (TREE_TYPE (field)) == INTEGER_TYPE\n+\t  && TREE_CODE (value) == INTEGER_CST && tree_fits_shwi_p (bitpos)\n+\t  && tree_fits_shwi_p (DECL_SIZE (field)))\n+\t{\n+\t  HOST_WIDE_INT bit = tree_to_shwi (bitpos);\n+\t  HOST_WIDE_INT sz = tree_to_shwi (DECL_SIZE (field));\n+\t  HOST_WIDE_INT shift;\n+\t  if (bit >= istart && bit + sz <= istart + isize)\n+\t    {\n+\t      fldval = fold_convert (utype, value);\n+\t      mask = build_int_cst_type (utype, -1);\n+\t      mask = fold_build2 (LSHIFT_EXPR, utype, mask,\n+\t\t\t\t  size_int (TYPE_PRECISION (utype) - sz));\n+\t      mask = fold_build2 (RSHIFT_EXPR, utype, mask,\n+\t\t\t\t  size_int (TYPE_PRECISION (utype) - sz));\n+\t      fldval = fold_build2 (BIT_AND_EXPR, utype, fldval, mask);\n+\t      shift = bit - istart;\n+\t      if (BYTES_BIG_ENDIAN)\n+\t\tshift = TYPE_PRECISION (utype) - shift - sz;\n+\t      fldval\n+\t\t= fold_build2 (LSHIFT_EXPR, utype, fldval, size_int (shift));\n+\t      retval = fold_build2 (BIT_IOR_EXPR, utype, retval, fldval);\n+\t      fld_seen = true;\n+\t    }\n+\t}\n+    }\n+  if (fld_seen)\n+    return fold_convert (TREE_TYPE (t), retval);\n+  gcc_unreachable ();\n+  return error_mark_node;\n+}\n+\n // #include \"gt-rust-rust-constexpr.h\"\n \n } // namespace Compile"}]}