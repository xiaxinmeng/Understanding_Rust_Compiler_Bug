{"sha": "73866e0dfa174c5a4ff4151895b7de6541aaedb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM4NjZlMGRmYTE3NGM1YTRmZjQxNTE4OTViN2RlNjU0MWFhZWRiMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-12-08T08:55:51Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-12-08T08:55:51Z"}, "message": "ia64.c (ia64_emit_probe_stack_range): Adjust.\n\n\t* config/ia64/ia64.c (ia64_emit_probe_stack_range): Adjust.\n\t(output_probe_stack_range): Rotate the loop and simplify.\n\nFrom-SVN: r231398", "tree": {"sha": "4a3cea7d7207a1b11b6834a5b1c5bb94bbe04983", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a3cea7d7207a1b11b6834a5b1c5bb94bbe04983"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73866e0dfa174c5a4ff4151895b7de6541aaedb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73866e0dfa174c5a4ff4151895b7de6541aaedb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73866e0dfa174c5a4ff4151895b7de6541aaedb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73866e0dfa174c5a4ff4151895b7de6541aaedb0/comments", "author": null, "committer": null, "parents": [{"sha": "e8e1c90f3f856193a85622a0ee4c19b2b22c5a76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8e1c90f3f856193a85622a0ee4c19b2b22c5a76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8e1c90f3f856193a85622a0ee4c19b2b22c5a76"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "4ddb77efad2454f2cbd0cf009b846d2eff9ea0ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73866e0dfa174c5a4ff4151895b7de6541aaedb0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73866e0dfa174c5a4ff4151895b7de6541aaedb0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73866e0dfa174c5a4ff4151895b7de6541aaedb0", "patch": "@@ -1,3 +1,8 @@\n+2015-12-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/ia64/ia64.c (ia64_emit_probe_stack_range): Adjust.\n+\t(output_probe_stack_range): Rotate the loop and simplify.\n+\n 2015-12-08  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_emit_swsqrtsf): Cleanup"}, {"sha": "f48cebc4036d4b21b8352dec36951cf0f8a3bbac", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73866e0dfa174c5a4ff4151895b7de6541aaedb0/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73866e0dfa174c5a4ff4151895b7de6541aaedb0/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=73866e0dfa174c5a4ff4151895b7de6541aaedb0", "patch": "@@ -3293,7 +3293,7 @@ ia64_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size,\n   else if (size <= PROBE_INTERVAL)\n     emit_stack_probe (r2);\n \n-  /* The run-time loop is made up of 8 insns in the generic case while this\n+  /* The run-time loop is made up of 9 insns in the generic case while this\n      compile-time loop is made up of 5+2*(n-2) insns for n # of intervals.  */\n   else if (size <= 4 * PROBE_INTERVAL)\n     {\n@@ -3356,11 +3356,12 @@ ia64_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size,\n \n       /* Step 3: the loop\n \n-\t while (TEST_ADDR != LAST_ADDR)\n+\t do\n \t   {\n \t     TEST_ADDR = TEST_ADDR + PROBE_INTERVAL\n \t     probe at TEST_ADDR\n \t   }\n+\t while (TEST_ADDR != LAST_ADDR)\n \n \t probes at FIRST + N * PROBE_INTERVAL for values of N from 1\n \t until it is equal to ROUNDED_SIZE.  */\n@@ -3391,36 +3392,33 @@ const char *\n output_probe_stack_range (rtx reg1, rtx reg2)\n {\n   static int labelno = 0;\n-  char loop_lab[32], end_lab[32];\n+  char loop_lab[32];\n   rtx xops[3];\n \n-  ASM_GENERATE_INTERNAL_LABEL (loop_lab, \"LPSRL\", labelno);\n-  ASM_GENERATE_INTERNAL_LABEL (end_lab, \"LPSRE\", labelno++);\n+  ASM_GENERATE_INTERNAL_LABEL (loop_lab, \"LPSRL\", labelno++);\n \n+  /* Loop.  */\n   ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, loop_lab);\n \n-  /* Jump to END_LAB if TEST_ADDR == LAST_ADDR.  */\n-  xops[0] = reg1;\n-  xops[1] = reg2;\n-  xops[2] = gen_rtx_REG (BImode, PR_REG (6));\n-  output_asm_insn (\"cmp.eq %2, %I2 = %0, %1\", xops);\n-  fprintf (asm_out_file, \"\\t(%s) br.cond.dpnt \", reg_names [REGNO (xops[2])]);\n-  assemble_name_raw (asm_out_file, end_lab);\n-  fputc ('\\n', asm_out_file);\n-\n   /* TEST_ADDR = TEST_ADDR + PROBE_INTERVAL.  */\n+  xops[0] = reg1;\n   xops[1] = GEN_INT (-PROBE_INTERVAL);\n   output_asm_insn (\"addl %0 = %1, %0\", xops);\n   fputs (\"\\t;;\\n\", asm_out_file);\n \n-  /* Probe at TEST_ADDR and branch.  */\n+  /* Probe at TEST_ADDR.  */\n   output_asm_insn (\"probe.w.fault %0, 0\", xops);\n-  fprintf (asm_out_file, \"\\tbr \");\n+\n+  /* Test if TEST_ADDR == LAST_ADDR.  */\n+  xops[1] = reg2;\n+  xops[2] = gen_rtx_REG (BImode, PR_REG (6));\n+  output_asm_insn (\"cmp.eq %2, %I2 = %0, %1\", xops);\n+\n+  /* Branch.  */\n+  fprintf (asm_out_file, \"\\t(%s) br.cond.dpnt \", reg_names [PR_REG (7)]);\n   assemble_name_raw (asm_out_file, loop_lab);\n   fputc ('\\n', asm_out_file);\n \n-  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, end_lab);\n-\n   return \"\";\n }\n "}]}