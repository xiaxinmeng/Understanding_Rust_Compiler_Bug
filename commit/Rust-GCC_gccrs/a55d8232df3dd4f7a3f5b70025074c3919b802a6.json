{"sha": "a55d8232df3dd4f7a3f5b70025074c3919b802a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU1ZDgyMzJkZjNkZDRmN2EzZjViNzAwMjUwNzRjMzkxOWI4MDJhNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-14T15:14:33Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-14T15:14:33Z"}, "message": "Avoid retrying with the same vector modes\n\nA later patch makes the AArch64 port add four entries to\nautovectorize_vector_modes.  Each entry describes a different\nvector mode assignment for vector code that mixes 8-bit, 16-bit,\n32-bit and 64-bit elements.  But if (as usual) the vector code has\nfewer element sizes than that, we could end up trying the same\ncombination of vector modes multiple times.  This patch adds a\ncheck to prevent that.\n\n2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vectorizer.h (vec_info::mode_set): New typedef.\n\t(vec_info::used_vector_mode): New member variable.\n\t(vect_chooses_same_modes_p): Declare.\n\t* tree-vect-stmts.c (get_vectype_for_scalar_type): Record each\n\tchosen vector mode in vec_info::used_vector_mode.\n\t(vect_chooses_same_modes_p): New function.\n\t* tree-vect-loop.c (vect_analyze_loop): Use it to avoid trying\n\tthe same vector statements multiple times.\n\t* tree-vect-slp.c (vect_slp_bb_region): Likewise.\n\nFrom-SVN: r278242", "tree": {"sha": "1c7991e63dbbdcc0de15258e10f5b1f857040775", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c7991e63dbbdcc0de15258e10f5b1f857040775"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a55d8232df3dd4f7a3f5b70025074c3919b802a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a55d8232df3dd4f7a3f5b70025074c3919b802a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a55d8232df3dd4f7a3f5b70025074c3919b802a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a55d8232df3dd4f7a3f5b70025074c3919b802a6/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "df7c22831f1e48dba49479c5960c1c180d8eab2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df7c22831f1e48dba49479c5960c1c180d8eab2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df7c22831f1e48dba49479c5960c1c180d8eab2c"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "6b7e9d5477df3e24d959426f0c9bf0c2826e2f19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a55d8232df3dd4f7a3f5b70025074c3919b802a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a55d8232df3dd4f7a3f5b70025074c3919b802a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a55d8232df3dd4f7a3f5b70025074c3919b802a6", "patch": "@@ -1,3 +1,15 @@\n+2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (vec_info::mode_set): New typedef.\n+\t(vec_info::used_vector_mode): New member variable.\n+\t(vect_chooses_same_modes_p): Declare.\n+\t* tree-vect-stmts.c (get_vectype_for_scalar_type): Record each\n+\tchosen vector mode in vec_info::used_vector_mode.\n+\t(vect_chooses_same_modes_p): New function.\n+\t* tree-vect-loop.c (vect_analyze_loop): Use it to avoid trying\n+\tthe same vector statements multiple times.\n+\t* tree-vect-slp.c (vect_slp_bb_region): Likewise.\n+\n 2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* machmode.h (opt_machine_mode::operator==): New function."}, {"sha": "567fcc75e2b9e015cefcd0e8ef4ad24d6068e162", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a55d8232df3dd4f7a3f5b70025074c3919b802a6/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a55d8232df3dd4f7a3f5b70025074c3919b802a6/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=a55d8232df3dd4f7a3f5b70025074c3919b802a6", "patch": "@@ -2448,6 +2448,19 @@ vect_analyze_loop (class loop *loop, vec_info_shared *shared)\n \t}\n \n       loop->aux = NULL;\n+\n+      if (!fatal)\n+\twhile (mode_i < vector_modes.length ()\n+\t       && vect_chooses_same_modes_p (loop_vinfo, vector_modes[mode_i]))\n+\t  {\n+\t    if (dump_enabled_p ())\n+\t      dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t       \"***** The result for vector mode %s would\"\n+\t\t\t       \" be the same\\n\",\n+\t\t\t       GET_MODE_NAME (vector_modes[mode_i]));\n+\t    mode_i += 1;\n+\t  }\n+\n       if (res)\n \t{\n \t  LOOP_VINFO_VECTORIZABLE_P (loop_vinfo) = 1;"}, {"sha": "a46bba5ec6032f43fbba2bd7ae8ca03861ae44d1", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a55d8232df3dd4f7a3f5b70025074c3919b802a6/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a55d8232df3dd4f7a3f5b70025074c3919b802a6/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=a55d8232df3dd4f7a3f5b70025074c3919b802a6", "patch": "@@ -3239,6 +3239,18 @@ vect_slp_bb_region (gimple_stmt_iterator region_begin,\n       if (mode_i == 0)\n \tautodetected_vector_mode = bb_vinfo->vector_mode;\n \n+      if (!fatal)\n+\twhile (mode_i < vector_modes.length ()\n+\t       && vect_chooses_same_modes_p (bb_vinfo, vector_modes[mode_i]))\n+\t  {\n+\t    if (dump_enabled_p ())\n+\t      dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t       \"***** The result for vector mode %s would\"\n+\t\t\t       \" be the same\\n\",\n+\t\t\t       GET_MODE_NAME (vector_modes[mode_i]));\n+\t    mode_i += 1;\n+\t  }\n+\n       delete bb_vinfo;\n \n       if (mode_i < vector_modes.length ()"}, {"sha": "e1fa0756f2665321c455c6bce75d022042ef03c3", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a55d8232df3dd4f7a3f5b70025074c3919b802a6/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a55d8232df3dd4f7a3f5b70025074c3919b802a6/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=a55d8232df3dd4f7a3f5b70025074c3919b802a6", "patch": "@@ -11263,6 +11263,10 @@ get_vectype_for_scalar_type (vec_info *vinfo, tree scalar_type)\n \t\t\t\t\t\t      scalar_type);\n   if (vectype && vinfo->vector_mode == VOIDmode)\n     vinfo->vector_mode = TYPE_MODE (vectype);\n+\n+  if (vectype)\n+    vinfo->used_vector_modes.add (TYPE_MODE (vectype));\n+\n   return vectype;\n }\n \n@@ -11302,6 +11306,20 @@ get_same_sized_vectype (tree scalar_type, tree vector_type)\n \t\t\t\t\t      scalar_type, nunits);\n }\n \n+/* Return true if replacing LOOP_VINFO->vector_mode with VECTOR_MODE\n+   would not change the chosen vector modes.  */\n+\n+bool\n+vect_chooses_same_modes_p (vec_info *vinfo, machine_mode vector_mode)\n+{\n+  for (vec_info::mode_set::iterator i = vinfo->used_vector_modes.begin ();\n+       i != vinfo->used_vector_modes.end (); ++i)\n+    if (!VECTOR_MODE_P (*i)\n+\t|| related_vector_mode (vector_mode, GET_MODE_INNER (*i), 0) != *i)\n+      return false;\n+  return true;\n+}\n+\n /* Function vect_is_simple_use.\n \n    Input:"}, {"sha": "b029266f24e47af6e9a223186814ec2ac1b32600", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a55d8232df3dd4f7a3f5b70025074c3919b802a6/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a55d8232df3dd4f7a3f5b70025074c3919b802a6/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=a55d8232df3dd4f7a3f5b70025074c3919b802a6", "patch": "@@ -298,6 +298,7 @@ class vec_info_shared {\n /* Vectorizer state common between loop and basic-block vectorization.  */\n class vec_info {\n public:\n+  typedef hash_set<int_hash<machine_mode, E_VOIDmode, E_BLKmode> > mode_set;\n   enum vec_kind { bb, loop };\n \n   vec_info (vec_kind, void *, vec_info_shared *);\n@@ -335,6 +336,9 @@ class vec_info {\n   /* Cost data used by the target cost model.  */\n   void *target_cost_data;\n \n+  /* The set of vector modes used in the vectorized region.  */\n+  mode_set used_vector_modes;\n+\n   /* The argument we should pass to related_vector_mode when looking up\n      the vector mode for a scalar mode, or VOIDmode if we haven't yet\n      made any decisions about which vector modes to use.  */\n@@ -1630,6 +1634,7 @@ extern tree get_related_vectype_for_scalar_type (machine_mode, tree,\n extern tree get_vectype_for_scalar_type (vec_info *, tree);\n extern tree get_mask_type_for_scalar_type (vec_info *, tree);\n extern tree get_same_sized_vectype (tree, tree);\n+extern bool vect_chooses_same_modes_p (vec_info *, machine_mode);\n extern bool vect_get_loop_mask_type (loop_vec_info);\n extern bool vect_is_simple_use (tree, vec_info *, enum vect_def_type *,\n \t\t\t\tstmt_vec_info * = NULL, gimple ** = NULL);"}]}