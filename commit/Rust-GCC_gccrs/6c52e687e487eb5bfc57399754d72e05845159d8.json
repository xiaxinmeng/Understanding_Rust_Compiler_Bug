{"sha": "6c52e687e487eb5bfc57399754d72e05845159d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM1MmU2ODdlNDg3ZWI1YmZjNTczOTk3NTRkNzJlMDU4NDUxNTlkOA==", "commit": {"author": {"name": "Cary Coutant", "email": "ccoutant@google.com", "date": "2009-06-04T23:12:27Z"}, "committer": {"name": "Cary Coutant", "email": "ccoutant@gcc.gnu.org", "date": "2009-06-04T23:12:27Z"}, "message": "basic-block.h (struct basic_block_def): Add discriminator field.\n\n\t* basic-block.h (struct basic_block_def): Add discriminator field.\n\t* dbxout.c (dbxout_source_line): Add new parameter.  Change all\n\tcallers.\n\t* debug.c (do_nothing_debug_hooks): Add additional entry.\n\t(debug_nothing_int_charstar_int): New function.\n\t* debug.h (struct gcc_debug_hooks): Add parameter to source_line\n\thook.\n\t(debug_nothing_int_charstar_int): New declaration.\n\t* dwarf2out.c (dwarf2out_source_line): Add new parameter.  Write\n\tdiscriminator value in .loc directive.\n\t* final.c (last_discriminator): New variable.\n\t(discriminator): New variable.\n\t(final_start_function): Initialize above variables, pass current\n\tdiscriminator to debug hook.\n\t(notice_source_line): Check for discriminator change.\n\t* gimple-pretty-print.c (dump_bb_header): Print discriminator value.\n\t* sdbout.c (sdbout_source_line): New parameter.\n\t* tree-cfg.c (struct locus_discrim_map): New structure type.\n\t(discriminator_per_locus): New hash table.\n\t(build_gimple_cfg): Allocate and free discriminator hash table.\n\t(make_edges): Call assign_discriminator.\n\t(locus_map_hash): New function.\n\t(locus_map_eq): New function.\n\t(next_discriminator_for_locus): New function.\n\t(same_line_p): New function.\n\t(assign_discriminator): New function.\n\t(make_cond_expr_edges): Call assign_discriminator.\n\t(make_gimple_switch_edges): Likewise.\n\t(first_non_label_stmt): New function.\n\t* vmsdbgout.c (vmsdbgout_source_line): Add new parameter.  Change\n\tall callers.\n\t* xcoffout.c (xcoffout_source_line): Add new parameter.\n\n\t* configure.ac (gcc_cv_as_discriminator): New configury check for\n\tgas support for discriminator.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\nFrom-SVN: r148191", "tree": {"sha": "62b2a3883be83cd19685457df195f788da6d5d99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62b2a3883be83cd19685457df195f788da6d5d99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c52e687e487eb5bfc57399754d72e05845159d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c52e687e487eb5bfc57399754d72e05845159d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c52e687e487eb5bfc57399754d72e05845159d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c52e687e487eb5bfc57399754d72e05845159d8/comments", "author": null, "committer": null, "parents": [{"sha": "535ff342b76110501c8673df1ae44db5e6ea55b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/535ff342b76110501c8673df1ae44db5e6ea55b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/535ff342b76110501c8673df1ae44db5e6ea55b4"}], "stats": {"total": 305, "additions": 283, "deletions": 22}, "files": [{"sha": "2daa2ff9d5e107a047d47251a837369cc8b76bec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c52e687e487eb5bfc57399754d72e05845159d8", "patch": "@@ -1,3 +1,43 @@\n+2009-06-04  Cary Coutant  <ccoutant@google.com>\n+\n+\t* basic-block.h (struct basic_block_def): Add discriminator field.\n+\t* dbxout.c (dbxout_source_line): Add new parameter.  Change all\n+\tcallers.\n+\t* debug.c (do_nothing_debug_hooks): Add additional entry.\n+\t(debug_nothing_int_charstar_int): New function.\n+\t* debug.h (struct gcc_debug_hooks): Add parameter to source_line\n+\thook.\n+\t(debug_nothing_int_charstar_int): New declaration.\n+\t* dwarf2out.c (dwarf2out_source_line): Add new parameter.  Write\n+\tdiscriminator value in .loc directive.\n+\t* final.c (last_discriminator): New variable.\n+\t(discriminator): New variable.\n+\t(final_start_function): Initialize above variables, pass current\n+\tdiscriminator to debug hook.\n+\t(notice_source_line): Check for discriminator change.\n+\t* gimple-pretty-print.c (dump_bb_header): Print discriminator value.\n+\t* sdbout.c (sdbout_source_line): New parameter.\n+\t* tree-cfg.c (struct locus_discrim_map): New structure type.\n+\t(discriminator_per_locus): New hash table.\n+\t(build_gimple_cfg): Allocate and free discriminator hash table.\n+\t(make_edges): Call assign_discriminator.\n+\t(locus_map_hash): New function.\n+\t(locus_map_eq): New function.\n+\t(next_discriminator_for_locus): New function.\n+\t(same_line_p): New function.\n+\t(assign_discriminator): New function.\n+\t(make_cond_expr_edges): Call assign_discriminator.\n+\t(make_gimple_switch_edges): Likewise.\n+\t(first_non_label_stmt): New function.\n+\t* vmsdbgout.c (vmsdbgout_source_line): Add new parameter.  Change\n+\tall callers.\n+\t* xcoffout.c (xcoffout_source_line): Add new parameter.\n+\n+\t* configure.ac (gcc_cv_as_discriminator): New configury check for\n+\tgas support for discriminator.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\n 2009-06-04  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* config/arm/arm.c (thumb2_legitimate_index_p): Initialize"}, {"sha": "901845a686d82dfa30c37e01cd25a74a7f23f6fb", "filename": "gcc/basic-block.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=6c52e687e487eb5bfc57399754d72e05845159d8", "patch": "@@ -249,6 +249,9 @@ struct GTY((chain_next (\"%h.next_bb\"), chain_prev (\"%h.prev_bb\"))) basic_block_d\n   /* Expected frequency.  Normalized to be in range 0 to BB_FREQ_MAX.  */\n   int frequency;\n \n+  /* The discriminator for this block.  */\n+  int discriminator;\n+\n   /* Various flags.  See BB_* below.  */\n   int flags;\n };"}, {"sha": "adccc18506fd1edf40260a211dc87cd92a910f5f", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=6c52e687e487eb5bfc57399754d72e05845159d8", "patch": "@@ -869,6 +869,12 @@\n #endif\n \n \n+/* Define if your assembler supports the .loc discriminator sub-directive. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_GAS_DISCRIMINATOR\n+#endif\n+\n+\n /* Define if your assembler and linker support .hidden. */\n #undef HAVE_GAS_HIDDEN\n "}, {"sha": "8713f15ebd523dec21aa543bdf2cc3fde25a587f", "filename": "gcc/configure", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=6c52e687e487eb5bfc57399754d72e05845159d8", "patch": "@@ -21823,6 +21823,45 @@ cat >>confdefs.h <<_ACEOF\n _ACEOF\n \n \n+echo \"$as_me:$LINENO: checking assembler for line table discriminator support\" >&5\n+echo $ECHO_N \"checking assembler for line table discriminator support... $ECHO_C\" >&6\n+if test \"${gcc_cv_as_discriminator+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  gcc_cv_as_discriminator=no\n+    if test $in_tree_gas = yes; then\n+    if test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 19 \\) \\* 1000 + 51`\n+  then gcc_cv_as_discriminator=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    echo '\t.text\n+\t.file 1 \"conf.c\"\n+\t.loc 1 1 0 discriminator 1' > conftest.s\n+    if { ac_try='$gcc_cv_as  -o conftest.o conftest.s >&5'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }\n+    then\n+\tgcc_cv_as_discriminator=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+echo \"$as_me:$LINENO: result: $gcc_cv_as_discriminator\" >&5\n+echo \"${ECHO_T}$gcc_cv_as_discriminator\" >&6\n+if test $gcc_cv_as_discriminator = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_GAS_DISCRIMINATOR 1\n+_ACEOF\n+\n+fi\n+\n # Thread-local storage - the check is heavily parameterized.\n conftest_s=\n tls_first_major="}, {"sha": "f637a11a50a385defa360de3291a7853ee51eabf", "filename": "gcc/configure.ac", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=6c52e687e487eb5bfc57399754d72e05845159d8", "patch": "@@ -2408,6 +2408,15 @@ AC_DEFINE_UNQUOTED(HAVE_COMDAT_GROUP,\n   [`if test $gcc_cv_as_comdat_group = yes || test $gcc_cv_as_comdat_group_percent = yes; then echo 1; else echo 0; fi`],\n [Define 0/1 if your assembler and linker support COMDAT groups.])\n \n+gcc_GAS_CHECK_FEATURE([line table discriminator support],\n+ gcc_cv_as_discriminator,\n+ [2,19,51],,\n+[\t.text\n+\t.file 1 \"conf.c\"\n+\t.loc 1 1 0 discriminator 1],,\n+[AC_DEFINE(HAVE_GAS_DISCRIMINATOR, 1,\n+  [Define if your assembler supports the .loc discriminator sub-directive.])])\n+\n # Thread-local storage - the check is heavily parameterized.\n conftest_s=\n tls_first_major="}, {"sha": "17fdf6efed188a9e0a6feceed58db05fe46ab4c1", "filename": "gcc/dbxout.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=6c52e687e487eb5bfc57399754d72e05845159d8", "patch": "@@ -333,7 +333,7 @@ static void dbxout_handle_pch (unsigned);\n /* The debug hooks structure.  */\n #if defined (DBX_DEBUGGING_INFO)\n \n-static void dbxout_source_line (unsigned int, const char *);\n+static void dbxout_source_line (unsigned int, const char *, int);\n static void dbxout_begin_prologue (unsigned int, const char *);\n static void dbxout_source_file (const char *);\n static void dbxout_function_end (tree);\n@@ -1265,7 +1265,7 @@ dbxout_begin_prologue (unsigned int lineno, const char *filename)\n   /* pre-increment the scope counter */\n   scope_labelno++;\n \n-  dbxout_source_line (lineno, filename);\n+  dbxout_source_line (lineno, filename, 0);\n   /* Output function begin block at function scope, referenced \n      by dbxout_block, dbxout_source_line and dbxout_function_end.  */\n   emit_pending_bincls_if_required ();\n@@ -1276,7 +1276,8 @@ dbxout_begin_prologue (unsigned int lineno, const char *filename)\n    number LINENO.  */\n \n static void\n-dbxout_source_line (unsigned int lineno, const char *filename)\n+dbxout_source_line (unsigned int lineno, const char *filename,\n+                    int discriminator ATTRIBUTE_UNUSED)\n {\n   dbxout_source_file (filename);\n "}, {"sha": "c8e80a841c164dd726236e1727a79edcdb813cea", "filename": "gcc/debug.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Fdebug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Fdebug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.c?ref=6c52e687e487eb5bfc57399754d72e05845159d8", "patch": "@@ -34,7 +34,7 @@ const struct gcc_debug_hooks do_nothing_debug_hooks =\n   debug_nothing_int_int,\t         /* begin_block */\n   debug_nothing_int_int,\t         /* end_block */\n   debug_true_const_tree,\t         /* ignore_block */\n-  debug_nothing_int_charstar,\t         /* source_line */\n+  debug_nothing_int_charstar_int,\t /* source_line */\n   debug_nothing_int_charstar,\t         /* begin_prologue */\n   debug_nothing_int_charstar,\t         /* end_prologue */\n   debug_nothing_int_charstar,\t         /* end_epilogue */\n@@ -103,6 +103,13 @@ debug_nothing_int_charstar (unsigned int line ATTRIBUTE_UNUSED,\n {\n }\n \n+void\n+debug_nothing_int_charstar_int (unsigned int line ATTRIBUTE_UNUSED,\n+\t\t\t        const char *text ATTRIBUTE_UNUSED,\n+\t\t\t        int discriminator ATTRIBUTE_UNUSED)\n+{\n+}\n+\n void\n debug_nothing_int (unsigned int line ATTRIBUTE_UNUSED)\n {"}, {"sha": "8f76aff04a443aed18f3c462e4b87da0480bde32", "filename": "gcc/debug.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=6c52e687e487eb5bfc57399754d72e05845159d8", "patch": "@@ -59,8 +59,9 @@ struct gcc_debug_hooks\n      though the BLOCK information is messed up.  Defaults to true.  */\n   bool (* ignore_block) (const_tree);\n \n-  /* Record a source file location at (FILE, LINE).  */\n-  void (* source_line) (unsigned int line, const char *file);\n+  /* Record a source file location at (FILE, LINE, DISCRIMINATOR).  */\n+  void (* source_line) (unsigned int line, const char *file,\n+                        int discriminator);\n \n   /* Called at start of prologue code.  LINE is the first line in the\n      function.  This has been given the same prototype as source_line,\n@@ -141,6 +142,7 @@ extern const struct gcc_debug_hooks *debug_hooks;\n extern void debug_nothing_void (void);\n extern void debug_nothing_charstar (const char *);\n extern void debug_nothing_int_charstar (unsigned int, const char *);\n+extern void debug_nothing_int_charstar_int (unsigned int, const char *, int);\n extern void debug_nothing_int (unsigned int);\n extern void debug_nothing_int_int (unsigned int, unsigned int);\n extern void debug_nothing_tree (tree);"}, {"sha": "21f2aed018def851466ebf025a1c2f769bb3ab11", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=6c52e687e487eb5bfc57399754d72e05845159d8", "patch": "@@ -91,7 +91,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"input.h\"\n \n #ifdef DWARF2_DEBUGGING_INFO\n-static void dwarf2out_source_line (unsigned int, const char *);\n+static void dwarf2out_source_line (unsigned int, const char *, int);\n #endif\n \n #ifndef DWARF2_FRAME_INFO\n@@ -3608,7 +3608,7 @@ dwarf2out_begin_prologue (unsigned int line ATTRIBUTE_UNUSED,\n      prologue case, not the eh frame case.  */\n #ifdef DWARF2_DEBUGGING_INFO\n   if (file)\n-    dwarf2out_source_line (line, file);\n+    dwarf2out_source_line (line, file, 0);\n #endif\n \n   if (dwarf2out_do_cfi_asm ())\n@@ -16207,7 +16207,8 @@ dwarf2out_begin_function (tree fun)\n    'line_info_table' for later output of the .debug_line section.  */\n \n static void\n-dwarf2out_source_line (unsigned int line, const char *filename)\n+dwarf2out_source_line (unsigned int line, const char *filename,\n+                       int discriminator)\n {\n   if (debug_info_level >= DINFO_LEVEL_NORMAL\n       && line != 0)\n@@ -16224,7 +16225,12 @@ dwarf2out_source_line (unsigned int line, const char *filename)\n       if (DWARF2_ASM_LINE_DEBUG_INFO)\n \t{\n \t  /* Emit the .loc directive understood by GNU as.  */\n-\t  fprintf (asm_out_file, \"\\t.loc %d %d 0\\n\", file_num, line);\n+\t  fprintf (asm_out_file, \"\\t.loc %d %d 0\", file_num, line);\n+#ifdef HAVE_GAS_DISCRIMINATOR\n+\t  if (discriminator != 0)\n+\t    fprintf (asm_out_file, \" discriminator %d\", discriminator);\n+#endif /* HAVE_GAS_DISCRIMINATOR */\n+\t  fputc ('\\n', asm_out_file);\n \n \t  /* Indicate that line number info exists.  */\n \t  line_info_table_in_use++;"}, {"sha": "1fae1b4e2388d521078513f1c2e0804e21387b52", "filename": "gcc/final.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=6c52e687e487eb5bfc57399754d72e05845159d8", "patch": "@@ -130,6 +130,12 @@ rtx current_output_insn;\n /* Line number of last NOTE.  */\n static int last_linenum;\n \n+/* Last discriminator written to assembly.  */\n+static int last_discriminator;\n+\n+/* Discriminator of current block.  */\n+static int discriminator;\n+\n /* Highest line number in current block.  */\n static int high_block_linenum;\n \n@@ -1496,6 +1502,7 @@ final_start_function (rtx first ATTRIBUTE_UNUSED, FILE *file,\n \n   last_filename = locator_file (prologue_locator);\n   last_linenum = locator_line (prologue_locator);\n+  last_discriminator = discriminator = 0;\n \n   high_block_linenum = high_function_linenum = last_linenum;\n \n@@ -1852,6 +1859,8 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t  else\n \t    *seen |= SEEN_BB;\n \n+          discriminator = NOTE_BASIC_BLOCK (insn)->discriminator;\n+\n \t  break;\n \n \tcase NOTE_INSN_EH_REGION_BEG:\n@@ -2183,7 +2192,9 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t   note in a row.  */\n \tif (notice_source_line (insn))\n \t  {\n-\t    (*debug_hooks->source_line) (last_linenum, last_filename);\n+\t    (*debug_hooks->source_line) (last_linenum,\n+\t                                 last_filename,\n+\t                                 last_discriminator);\n \t  }\n \n \tif (GET_CODE (body) == ASM_INPUT)\n@@ -2709,11 +2720,13 @@ notice_source_line (rtx insn)\n   if (filename\n       && (force_source_line\n \t  || filename != last_filename\n-\t  || last_linenum != linenum))\n+\t  || last_linenum != linenum\n+\t  || last_discriminator != discriminator))\n     {\n       force_source_line = false;\n       last_filename = filename;\n       last_linenum = linenum;\n+      last_discriminator = discriminator;\n       high_block_linenum = MAX (last_linenum, high_block_linenum);\n       high_function_linenum = MAX (last_linenum, high_function_linenum);\n       return true;"}, {"sha": "6490a65ddc3cdd4e60baf1c57c4aeda84e74f41d", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=6c52e687e487eb5bfc57399754d72e05845159d8", "patch": "@@ -1558,6 +1558,12 @@ dump_bb_header (pretty_printer *buffer, basic_block bb, int indent, int flags)\n \t\tpp_decimal_int (buffer, get_lineno (gsi_stmt (gsi)));\n \t\tbreak;\n \t      }\n+\n+          if (bb->discriminator)\n+            {\n+              pp_string (buffer, \", discriminator \");\n+\t      pp_decimal_int (buffer, bb->discriminator);\n+            }\n \t}\n       newline_and_indent (buffer, indent);\n "}, {"sha": "cc8687419ffbba4157c5ea12c1c9896aea4f0da2", "filename": "gcc/sdbout.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=6c52e687e487eb5bfc57399754d72e05845159d8", "patch": "@@ -117,7 +117,7 @@ static void sdbout_start_source_file\t(unsigned int, const char *);\n static void sdbout_end_source_file\t(unsigned int);\n static void sdbout_begin_block\t\t(unsigned int, unsigned int);\n static void sdbout_end_block\t\t(unsigned int, unsigned int);\n-static void sdbout_source_line\t\t(unsigned int, const char *);\n+static void sdbout_source_line\t\t(unsigned int, const char *, int);\n static void sdbout_end_epilogue\t\t(unsigned int, const char *);\n static void sdbout_global_decl\t\t(tree);\n #ifndef MIPS_DEBUGGING_INFO\n@@ -1541,7 +1541,8 @@ sdbout_end_block (unsigned int line, unsigned int n ATTRIBUTE_UNUSED)\n    number LINE.  */\n \n static void\n-sdbout_source_line (unsigned int line, const char *filename ATTRIBUTE_UNUSED)\n+sdbout_source_line (unsigned int line, const char *filename ATTRIBUTE_UNUSED,\n+                    int discriminator ATTRIBUTE_UNUSED)\n {\n   /* COFF relative line numbers must be positive.  */\n   if ((int) line > sdb_begin_function_line)"}, {"sha": "26a082da0001ad351834d0c2c9abb727fda7c4c1", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 128, "deletions": 2, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=6c52e687e487eb5bfc57399754d72e05845159d8", "patch": "@@ -82,6 +82,14 @@ static struct cfg_stats_d cfg_stats;\n /* Nonzero if we found a computed goto while building basic blocks.  */\n static bool found_computed_goto;\n \n+/* Hash table to store last discriminator assigned for each locus.  */\n+struct locus_discrim_map\n+{\n+  location_t locus;\n+  int discriminator;\n+};\n+static htab_t discriminator_per_locus;\n+\n /* Basic blocks and flowgraphs.  */\n static void make_blocks (gimple_seq);\n static void factor_computed_gotos (void);\n@@ -91,6 +99,9 @@ static void make_edges (void);\n static void make_cond_expr_edges (basic_block);\n static void make_gimple_switch_edges (basic_block);\n static void make_goto_expr_edges (basic_block);\n+static unsigned int locus_map_hash (const void *);\n+static int locus_map_eq (const void *, const void *);\n+static void assign_discriminator (location_t, basic_block);\n static edge gimple_redirect_edge_and_branch (edge, basic_block);\n static edge gimple_try_redirect_by_replacing_jump (edge, basic_block);\n static unsigned int split_critical_edges (void);\n@@ -100,6 +111,7 @@ static inline bool stmt_starts_bb_p (gimple, gimple);\n static int gimple_verify_flow_info (void);\n static void gimple_make_forwarder_block (edge);\n static void gimple_cfg2vcg (FILE *);\n+static gimple first_non_label_stmt (basic_block);\n \n /* Flowgraph optimization and cleanup.  */\n static void gimple_merge_blocks (basic_block, basic_block);\n@@ -193,8 +205,11 @@ build_gimple_cfg (gimple_seq seq)\n   group_case_labels ();\n \n   /* Create the edges of the flowgraph.  */\n+  discriminator_per_locus = htab_create (13, locus_map_hash, locus_map_eq,\n+                                         free);\n   make_edges ();\n   cleanup_dead_labels ();\n+  htab_delete (discriminator_per_locus);\n \n   /* Debugging dumps.  */\n \n@@ -650,7 +665,11 @@ make_edges (void)\n \tfallthru = true;\n \n       if (fallthru)\n-\tmake_edge (bb, bb->next_bb, EDGE_FALLTHRU);\n+        {\n+\t  make_edge (bb, bb->next_bb, EDGE_FALLTHRU);\n+\t  if (last)\n+            assign_discriminator (gimple_location (last), bb->next_bb);\n+\t}\n     }\n \n   if (root_omp_region)\n@@ -660,6 +679,91 @@ make_edges (void)\n   fold_cond_expr_cond ();\n }\n \n+/* Trivial hash function for a location_t.  ITEM is a pointer to\n+   a hash table entry that maps a location_t to a discriminator.  */\n+\n+static unsigned int\n+locus_map_hash (const void *item)\n+{\n+  return ((const struct locus_discrim_map *) item)->locus;\n+}\n+\n+/* Equality function for the locus-to-discriminator map.  VA and VB\n+   point to the two hash table entries to compare.  */\n+\n+static int\n+locus_map_eq (const void *va, const void *vb)\n+{\n+  const struct locus_discrim_map *a = (const struct locus_discrim_map *) va;\n+  const struct locus_discrim_map *b = (const struct locus_discrim_map *) vb;\n+  return a->locus == b->locus;\n+}\n+\n+/* Find the next available discriminator value for LOCUS.  The\n+   discriminator distinguishes among several basic blocks that\n+   share a common locus, allowing for more accurate sample-based\n+   profiling.  */\n+\n+static int\n+next_discriminator_for_locus (location_t locus)\n+{\n+  struct locus_discrim_map item;\n+  struct locus_discrim_map **slot;\n+\n+  item.locus = locus;\n+  item.discriminator = 0;\n+  slot = (struct locus_discrim_map **)\n+      htab_find_slot_with_hash (discriminator_per_locus, (void *) &item,\n+                                (hashval_t) locus, INSERT);\n+  gcc_assert (slot);\n+  if (*slot == HTAB_EMPTY_ENTRY)\n+    {\n+      *slot = XNEW (struct locus_discrim_map);\n+      gcc_assert (*slot);\n+      (*slot)->locus = locus;\n+      (*slot)->discriminator = 0;\n+    }\n+  (*slot)->discriminator++;\n+  return (*slot)->discriminator;\n+}\n+\n+/* Return TRUE if LOCUS1 and LOCUS2 refer to the same source line.  */\n+\n+static bool\n+same_line_p (location_t locus1, location_t locus2)\n+{\n+  expanded_location from, to;\n+\n+  if (locus1 == locus2)\n+    return true;\n+\n+  from = expand_location (locus1);\n+  to = expand_location (locus2);\n+\n+  if (from.line != to.line)\n+    return false;\n+  if (from.file == to.file)\n+    return true;\n+  return (from.file != NULL\n+          && to.file != NULL\n+          && strcmp (from.file, to.file) == 0);\n+}\n+\n+/* Assign a unique discriminator value to block BB if it begins at the same\n+   LOCUS as its predecessor block.  */\n+\n+static void\n+assign_discriminator (location_t locus, basic_block bb)\n+{\n+  gimple to_stmt;\n+\n+  if (locus == 0 || bb->discriminator != 0)\n+    return;\n+\n+  to_stmt = first_non_label_stmt (bb);\n+  if (to_stmt && same_line_p (locus, gimple_location (to_stmt)))\n+    bb->discriminator = next_discriminator_for_locus (locus);\n+}\n \n /* Create the edges for a GIMPLE_COND starting at block BB.  */\n \n@@ -671,10 +775,13 @@ make_cond_expr_edges (basic_block bb)\n   basic_block then_bb, else_bb;\n   tree then_label, else_label;\n   edge e;\n+  location_t entry_locus;\n \n   gcc_assert (entry);\n   gcc_assert (gimple_code (entry) == GIMPLE_COND);\n \n+  entry_locus = gimple_location (entry);\n+\n   /* Entry basic blocks for each component.  */\n   then_label = gimple_cond_true_label (entry);\n   else_label = gimple_cond_false_label (entry);\n@@ -684,12 +791,14 @@ make_cond_expr_edges (basic_block bb)\n   else_stmt = first_stmt (else_bb);\n \n   e = make_edge (bb, then_bb, EDGE_TRUE_VALUE);\n+  assign_discriminator (entry_locus, then_bb);\n   e->goto_locus = gimple_location (then_stmt);\n   if (e->goto_locus)\n     e->goto_block = gimple_block (then_stmt);\n   e = make_edge (bb, else_bb, EDGE_FALSE_VALUE);\n   if (e)\n     {\n+      assign_discriminator (entry_locus, else_bb);\n       e->goto_locus = gimple_location (else_stmt);\n       if (e->goto_locus)\n \te->goto_block = gimple_block (else_stmt);\n@@ -799,15 +908,19 @@ static void\n make_gimple_switch_edges (basic_block bb)\n {\n   gimple entry = last_stmt (bb);\n+  location_t entry_locus;\n   size_t i, n;\n \n+  entry_locus = gimple_location (entry);\n+\n   n = gimple_switch_num_labels (entry);\n \n   for (i = 0; i < n; ++i)\n     {\n       tree lab = CASE_LABEL (gimple_switch_label (entry, i));\n       basic_block label_bb = label_to_block (lab);\n       make_edge (bb, label_bb, 0);\n+      assign_discriminator (entry_locus, label_bb);\n     }\n }\n \n@@ -880,8 +993,10 @@ make_goto_expr_edges (basic_block bb)\n   if (simple_goto_p (goto_t))\n     {\n       tree dest = gimple_goto_dest (goto_t);\n-      edge e = make_edge (bb, label_to_block (dest), EDGE_FALLTHRU);\n+      basic_block label_bb = label_to_block (dest);\n+      edge e = make_edge (bb, label_bb, EDGE_FALLTHRU);\n       e->goto_locus = gimple_location (goto_t);\n+      assign_discriminator (e->goto_locus, label_bb);\n       if (e->goto_locus)\n \te->goto_block = gimple_block (goto_t);\n       gsi_remove (&last, true);\n@@ -2690,6 +2805,17 @@ first_stmt (basic_block bb)\n   return !gsi_end_p (i) ? gsi_stmt (i) : NULL;\n }\n \n+/* Return the first non-label statement in basic block BB.  */\n+\n+static gimple\n+first_non_label_stmt (basic_block bb)\n+{\n+  gimple_stmt_iterator i = gsi_start_bb (bb);\n+  while (!gsi_end_p (i) && gimple_code (gsi_stmt (i)) == GIMPLE_LABEL)\n+    gsi_next (&i);\n+  return !gsi_end_p (i) ? gsi_stmt (i) : NULL;\n+}\n+\n /* Return the last statement in basic block BB.  */\n \n gimple"}, {"sha": "41a3420f9ed795c7e20a1cfc848d68d17a13ebe5", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=6c52e687e487eb5bfc57399754d72e05845159d8", "patch": "@@ -173,7 +173,7 @@ static void vmsdbgout_end_source_file (unsigned int);\n static void vmsdbgout_begin_block (unsigned int, unsigned int);\n static void vmsdbgout_end_block (unsigned int, unsigned int);\n static bool vmsdbgout_ignore_block (const_tree);\n-static void vmsdbgout_source_line (unsigned int, const char *);\n+static void vmsdbgout_source_line (unsigned int, const char *, int);\n static void vmsdbgout_begin_prologue (unsigned int, const char *);\n static void vmsdbgout_end_prologue (unsigned int, const char *);\n static void vmsdbgout_end_function (unsigned int);\n@@ -1297,7 +1297,7 @@ vmsdbgout_end_prologue (unsigned int line, const char *file)\n       ASM_OUTPUT_LABEL (asm_out_file, label);\n \n       /* VMS PCA expects every PC range to correlate to some line and file.  */\n-      vmsdbgout_source_line (line, file);\n+      vmsdbgout_source_line (line, file, 0);\n     }\n }\n \n@@ -1331,7 +1331,7 @@ vmsdbgout_end_epilogue (unsigned int line, const char *file)\n       ASM_OUTPUT_LABEL (asm_out_file, label);\n \n       /* VMS PCA expects every PC range to correlate to some line and file.  */\n-      vmsdbgout_source_line (line, file);\n+      vmsdbgout_source_line (line, file, 0);\n     }\n }\n \n@@ -1533,10 +1533,11 @@ lookup_filename (const char *file_name)\n    'line_info_table' for later output of the .debug_line section.  */\n \n static void\n-vmsdbgout_source_line (register unsigned line, register const char *filename)\n+vmsdbgout_source_line (register unsigned line, register const char *filename,\n+                       int discriminator)\n {\n   if (write_symbols == VMS_AND_DWARF2_DEBUG)\n-    (*dwarf2_debug_hooks.source_line) (line, filename);\n+    (*dwarf2_debug_hooks.source_line) (line, filename, discriminator);\n \n   if (debug_info_level >= DINFO_LEVEL_TERSE)\n     {"}, {"sha": "3c853544ec4b2f6f06566c30e04234bbc2530a11", "filename": "gcc/xcoffout.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Fxcoffout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c52e687e487eb5bfc57399754d72e05845159d8/gcc%2Fxcoffout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.c?ref=6c52e687e487eb5bfc57399754d72e05845159d8", "patch": "@@ -321,7 +321,8 @@ xcoffout_source_file (FILE *file, const char *filename, int inline_p)\n /* Output a line number symbol entry for location (FILENAME, LINE).  */\n \n void\n-xcoffout_source_line (unsigned int line, const char *filename)\n+xcoffout_source_line (unsigned int line, const char *filename,\n+                      int discriminator ATTRIBUTE_UNUSED)\n {\n   bool inline_p = (strcmp (xcoff_current_function_file, filename) != 0\n \t\t   || (int) line < xcoff_begin_function_line);"}]}