{"sha": "2aff950822bee20e1398a2a528ad927740f799f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFmZjk1MDgyMmJlZTIwZTEzOThhMmE1MjhhZDkyNzc0MGY3OTlmOA==", "commit": {"author": {"name": "Dale Johannesen", "email": "dalej@apple.com", "date": "2002-11-04T20:06:28Z"}, "committer": {"name": "Dale Johannesen", "email": "dalej@gcc.gnu.org", "date": "2002-11-04T20:06:28Z"}, "message": "Fix bugs that showed up building Spec on ppc darwin.\n\nFrom-SVN: r58800", "tree": {"sha": "757f262de1fc974cf8a0f7aebb26aea20afbf563", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/757f262de1fc974cf8a0f7aebb26aea20afbf563"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2aff950822bee20e1398a2a528ad927740f799f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aff950822bee20e1398a2a528ad927740f799f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aff950822bee20e1398a2a528ad927740f799f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aff950822bee20e1398a2a528ad927740f799f8/comments", "author": null, "committer": null, "parents": [{"sha": "e86e721fc7b44cdd46c72f60de48af228d7df4b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e86e721fc7b44cdd46c72f60de48af228d7df4b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e86e721fc7b44cdd46c72f60de48af228d7df4b9"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "0b4cc8e6795f7338e20ca8c9a3e50bf645848221", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aff950822bee20e1398a2a528ad927740f799f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aff950822bee20e1398a2a528ad927740f799f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2aff950822bee20e1398a2a528ad927740f799f8", "patch": "@@ -1,3 +1,9 @@\n+2002-11-04  Dale Johannesen  <dalej@apple.com>\n+\n+        * doloop.c (doloop_modify_runtime):  Fix loop count computation\n+        for unrolled loops.\n+\t* loop.c (loop_invariant_p):  Support calling from unroller.\n+\n 2002-11-04  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.c (s390_decompose_address): Use arg_pointer_rtx"}, {"sha": "67b742cde714f59b44ad8f6724a65f45fd5bcf34", "filename": "gcc/doloop.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aff950822bee20e1398a2a528ad927740f799f8/gcc%2Fdoloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aff950822bee20e1398a2a528ad927740f799f8/gcc%2Fdoloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoloop.c?ref=2aff950822bee20e1398a2a528ad927740f799f8", "patch": "@@ -599,16 +599,19 @@ doloop_modify_runtime (loop, iterations_max,\n \n      If the loop has been unrolled, the full calculation is\n \n-       t1 = abs_inc * unroll_number;\t\tincrement per loop\n-       n = abs (final - initial) / t1;\t\tfull loops\n-       n += (abs (final - initial) % t1) != 0;\tpartial loop\n+       t1 = abs_inc * unroll_number;\t\t        increment per loop\n+       n = (abs (final - initial) + abs_inc - 1) / t1;    full loops\n+       n += (abs (final - initial) + abs_inc - 1) % t1) >= abs_inc;\n+                                                          partial loop\n+     which works out to be equivalent to\n \n-     However, in certain cases the unrolled loop will be preconditioned\n-     by emitting copies of the loop body with conditional branches,\n-     so that the unrolled loop is always a full loop and thus needs\n-     no exit tests.  In this case we don't want to add the partial\n-     loop count.  As above, when t1 is a power of two we don't need to\n-     worry about overflow.\n+       n = (abs (final - initial) + t1 - 1) / t1;\n+\n+     In the case where the loop was preconditioned, a few iterations\n+     may have been executed earlier; but 'initial' was adjusted as they\n+     were executed, so we don't need anything special for that case here.\n+     As above, when t1 is a power of two we don't need to worry about\n+     overflow.\n \n      The division and modulo operations can be avoided by requiring\n      that the increment is a power of 2 (precondition_loop_p enforces\n@@ -683,10 +686,10 @@ doloop_modify_runtime (loop, iterations_max,\n       if (shift_count < 0)\n \tabort ();\n \n-      if (!loop_info->preconditioned)\n-\tdiff = expand_simple_binop (GET_MODE (diff), PLUS,\n-\t\t\t\t    diff, GEN_INT (abs_loop_inc - 1),\n-\t\t\t\t    diff, 1, OPTAB_LIB_WIDEN);\n+      /* (abs (final - initial) + abs_inc * unroll_number - 1) */\n+      diff = expand_simple_binop (GET_MODE (diff), PLUS,\n+\t\t\t\t  diff, GEN_INT (abs_loop_inc - 1),\n+\t\t\t\t  diff, 1, OPTAB_LIB_WIDEN);\n \n       /* (abs (final - initial) + abs_inc * unroll_number - 1)\n \t / (abs_inc * unroll_number)  */"}, {"sha": "04f95ab492582736859788838778574f87a99059", "filename": "gcc/loop.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aff950822bee20e1398a2a528ad927740f799f8/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aff950822bee20e1398a2a528ad927740f799f8/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=2aff950822bee20e1398a2a528ad927740f799f8", "patch": "@@ -3273,6 +3273,13 @@ loop_invariant_p (loop, x)\n \t  && REGNO (x) < FIRST_PSEUDO_REGISTER && call_used_regs[REGNO (x)])\n \treturn 0;\n \n+      /* Out-of-range regs can occur when we are called from unrolling.\n+\t These have always been created by the unroller and are set in\n+\t the loop, hence are never invariant. */\n+\n+      if (REGNO (x) >= regs->num)\n+\treturn 0;\n+\n       if (regs->array[REGNO (x)].set_in_loop < 0)\n \treturn 2;\n "}]}