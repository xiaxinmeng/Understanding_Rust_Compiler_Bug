{"sha": "1ad584d538d349db13cfa8440222d91d5e9aff3f", "node_id": "C_kwDOANBUbNoAKDFhZDU4NGQ1MzhkMzQ5ZGIxM2NmYTg0NDAyMjJkOTFkNWU5YWZmM2Y", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-05-30T20:32:58Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-05-30T20:38:33Z"}, "message": "Allow SCmode and DImode to be tieable with TARGET_64BIT on x86_64.\n\nThis patch is a form of insurance policy in case my patch for PR 7061 runs\ninto problems on non-x86 targets; the middle-end can add an extra check\nthat the backend is happy placing SCmode and DImode values in the same\nregister, before creating a SUBREG.  Unfortunately, ix86_modes_tieable_p\ncurrently claims this is not allowed(?), even though the default target\nhook for modes_tieable_p is to always return true [i.e. false can be\nused to specifically prohibit bad combinations], and the x86_64 ABI\npasses SCmode values in DImode registers!.  This makes the backend's\nmodes_tiable_p hook a little more forgiving, and additionally enables\ninterconversion between SCmode and V2SFmode, and between DCmode and\nVD2Fmode, which opens interesting opporutunities in the future.\n\n2022-05-30  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* config/i386/i386.cc (ix86_modes_tieable_p): Allow SCmode to be\n\ttieable with DImode on TARGET_64BIT, and SCmode tieable with\n\tV2SFmode, and DCmode with V2DFmode.", "tree": {"sha": "fafc4030713f8bbde964105668e4fca5a487c889", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fafc4030713f8bbde964105668e4fca5a487c889"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ad584d538d349db13cfa8440222d91d5e9aff3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad584d538d349db13cfa8440222d91d5e9aff3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ad584d538d349db13cfa8440222d91d5e9aff3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad584d538d349db13cfa8440222d91d5e9aff3f/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "871dbb6112e22ff92914613c332944fd19dd39a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/871dbb6112e22ff92914613c332944fd19dd39a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/871dbb6112e22ff92914613c332944fd19dd39a8"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "df5c80dc0e749d0e82cac0d070992391a2ab32cc", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad584d538d349db13cfa8440222d91d5e9aff3f/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad584d538d349db13cfa8440222d91d5e9aff3f/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=1ad584d538d349db13cfa8440222d91d5e9aff3f", "patch": "@@ -20141,6 +20141,18 @@ ix86_modes_tieable_p (machine_mode mode1, machine_mode mode2)\n     return (GET_MODE_SIZE (mode1) == 8\n \t    && ix86_hard_regno_mode_ok (FIRST_MMX_REG, mode1));\n \n+  /* SCmode and DImode can be tied.  */\n+  if ((mode1 == E_SCmode && mode2 == E_DImode)\n+      || (mode1 == E_DImode && mode2 == E_SCmode))\n+    return TARGET_64BIT;\n+\n+  /* [SD]Cmode and V2[SD]Fmode modes can be tied.  */\n+  if ((mode1 == E_SCmode && mode2 == E_V2SFmode)\n+      || (mode1 == E_V2SFmode && mode2 == E_SCmode)\n+      || (mode1 == E_DCmode && mode2 == E_V2DFmode)\n+      || (mode1 == E_V2DFmode && mode2 == E_DCmode))\n+    return true;\n+\n   return false;\n }\n "}]}