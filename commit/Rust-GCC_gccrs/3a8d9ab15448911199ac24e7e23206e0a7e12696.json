{"sha": "3a8d9ab15448911199ac24e7e23206e0a7e12696", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E4ZDlhYjE1NDQ4OTExMTk5YWMyNGU3ZTIzMjA2ZTBhN2UxMjY5Ng==", "commit": {"author": {"name": "Ed Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2013-04-17T01:05:43Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2013-04-17T01:05:43Z"}, "message": "Implement n3599 String literal operator templates.\n\nFrom-SVN: r198018", "tree": {"sha": "d59c0e3121b34946be580a8f99242f2fac75e83f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d59c0e3121b34946be580a8f99242f2fac75e83f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a8d9ab15448911199ac24e7e23206e0a7e12696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a8d9ab15448911199ac24e7e23206e0a7e12696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a8d9ab15448911199ac24e7e23206e0a7e12696", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a8d9ab15448911199ac24e7e23206e0a7e12696/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a0d079a44311217d7727bd45ceaca4d6e5a65c23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0d079a44311217d7727bd45ceaca4d6e5a65c23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0d079a44311217d7727bd45ceaca4d6e5a65c23"}], "stats": {"total": 106, "additions": 101, "deletions": 5}, "files": [{"sha": "94e29afae07bc34259c3124504c5970064f6152f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a8d9ab15448911199ac24e7e23206e0a7e12696/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a8d9ab15448911199ac24e7e23206e0a7e12696/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3a8d9ab15448911199ac24e7e23206e0a7e12696", "patch": "@@ -1,3 +1,12 @@\n+2013-04-16  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tImplement n3599 - Literal operator templates for strings.\n+\t* parser.c (make_string_pack (tree value)): New function.\n+\t(cp_parser_userdef_string_literal (cp_token *)): Use it\n+\tto construct calls to character string literal operator templates.\n+\t(cp_parser_template_declaration_after_export): Check for new string\n+\tliteral operator template parameter form.\n+\n 2013-04-15  Jason Merrill  <jason@redhat.com>\n \n \t* pt.c (tsubst) [DECLTYPE_TYPE]: Use tsubst_copy_and_build."}, {"sha": "6560852e470be794a50284ee92ca18038b0fdc15", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 66, "deletions": 5, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a8d9ab15448911199ac24e7e23206e0a7e12696/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a8d9ab15448911199ac24e7e23206e0a7e12696/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=3a8d9ab15448911199ac24e7e23206e0a7e12696", "patch": "@@ -3702,6 +3702,37 @@ make_char_string_pack (tree value)\n   return argvec;\n }\n \n+/* A subroutine of cp_parser_userdef_numeric_literal to\n+   create a char... template parameter pack from a string node.  */\n+\n+static tree\n+make_string_pack (tree value)\n+{\n+  tree charvec;\n+  tree argpack = make_node (NONTYPE_ARGUMENT_PACK);\n+  const char *str = TREE_STRING_POINTER (value);\n+  int i, len = TREE_STRING_LENGTH (value) - 1;\n+  tree argvec = make_tree_vec (2);\n+\n+  tree string_char_type_node = TREE_TYPE (TREE_TYPE (value));\n+\n+  /* First template parm is character type.  */\n+  TREE_VEC_ELT (argvec, 0) = string_char_type_node;\n+\n+  /* Fill in CHARVEC with all of the parameters.  */\n+  charvec = make_tree_vec (len);\n+  for (i = 0; i < len; ++i)\n+    TREE_VEC_ELT (charvec, i) = build_int_cst (string_char_type_node, str[i]);\n+\n+  /* Build the argument packs.  */\n+  SET_ARGUMENT_PACK_ARGS (argpack, charvec);\n+  TREE_TYPE (argpack) = string_char_type_node;\n+\n+  TREE_VEC_ELT (argvec, 1) = argpack;\n+\n+  return argvec;\n+}\n+\n /* Parse a user-defined numeric constant.  returns a call to a user-defined\n    literal operator.  */\n \n@@ -3801,10 +3832,29 @@ cp_parser_userdef_string_literal (cp_token *token)\n   int len = TREE_STRING_LENGTH (value)\n \t/ TREE_INT_CST_LOW (TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (value)))) - 1;\n   tree decl, result;\n+  vec<tree, va_gc> *args;\n+\n+  /* Look for a template function with typename parameter CharT\n+     and parameter pack CharT...  Call the function with\n+     template parameter characters representing the string.  */\n+  args = make_tree_vector ();\n+  decl = lookup_literal_operator (name, args);\n+  if (decl && decl != error_mark_node)\n+    {\n+      tree tmpl_args = make_string_pack (value);\n+      decl = lookup_template_function (decl, tmpl_args);\n+      result = finish_call_expr (decl, &args, false, true, tf_none);\n+      if (result != error_mark_node)\n+\t{\n+\t  release_tree_vector (args);\n+\t  return result;\n+\t}\n+    }\n+  release_tree_vector (args);\n \n   /* Build up a call to the user-defined operator  */\n   /* Lookup the name we got back from the id-expression.  */\n-  vec<tree, va_gc> *args = make_tree_vector ();\n+  args = make_tree_vector ();\n   vec_safe_push (args, value);\n   vec_safe_push (args, build_int_cst (size_type_node, len));\n   decl = lookup_name (name);\n@@ -22101,20 +22151,31 @@ cp_parser_template_declaration_after_export (cp_parser* parser, bool member_p)\n       else\n \t{\n \t  int num_parms = TREE_VEC_LENGTH (parameter_list);\n-\t  if (num_parms != 1)\n-\t    ok = false;\n-\t  else\n+\t  if (num_parms == 1)\n \t    {\n \t      tree parm_list = TREE_VEC_ELT (parameter_list, 0);\n \t      tree parm = INNERMOST_TEMPLATE_PARMS (parm_list);\n \t      if (TREE_TYPE (parm) != char_type_node\n \t\t  || !TEMPLATE_PARM_PARAMETER_PACK (DECL_INITIAL (parm)))\n \t\tok = false;\n \t    }\n+\t  else if (num_parms == 2 && cxx_dialect >= cxx1y)\n+\t    {\n+\t      tree parm_type = TREE_VEC_ELT (parameter_list, 0);\n+\t      tree type = INNERMOST_TEMPLATE_PARMS (parm_type);\n+\t      tree parm_list = TREE_VEC_ELT (parameter_list, 1);\n+\t      tree parm = INNERMOST_TEMPLATE_PARMS (parm_list);\n+\t      if (TREE_TYPE (parm) != TREE_TYPE (type)\n+\t\t  || !TEMPLATE_PARM_PARAMETER_PACK (DECL_INITIAL (parm)))\n+\t\tok = false;\n+\t    }\n+\t  else\n+\t    ok = false;\n \t}\n       if (!ok)\n \terror (\"literal operator template %qD has invalid parameter list.\"\n-\t       \"  Expected non-type template argument pack <char...>\",\n+\t       \"  Expected non-type template argument pack <char...>\"\n+\t       \" or <typename CharT, CharT...>\",\n \t       decl);\n     }\n   /* Register member declarations.  */"}, {"sha": "7182088806b7f17d7132608c1a631ee8b66e5c29", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a8d9ab15448911199ac24e7e23206e0a7e12696/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a8d9ab15448911199ac24e7e23206e0a7e12696/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3a8d9ab15448911199ac24e7e23206e0a7e12696", "patch": "@@ -1,3 +1,9 @@\n+2013-04-16  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tImplement n3599 - Literal operator templates for strings.\n+\t* g++.dg/cpp1y/udlit-char-template.C: New test.\n+\t* g++.dg/cpp1y/udlit-char-template-neg.C: New test.\n+\n 2013-04-16  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/39505"}, {"sha": "71fc973b4d415cc4bdd1efe08efed7aaac8a6995", "filename": "gcc/testsuite/g++.dg/cpp1y/udlit-char-template-neg.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a8d9ab15448911199ac24e7e23206e0a7e12696/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a8d9ab15448911199ac24e7e23206e0a7e12696/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template-neg.C?ref=3a8d9ab15448911199ac24e7e23206e0a7e12696", "patch": "@@ -0,0 +1,8 @@\n+// { dg-options -std=c++11 }\n+\n+template<typename CharT, CharT... String>\n+  int\n+  operator\"\" _script()\n+  { return 42; } // { dg-error \"literal operator template|has invalid parameter list\" }\n+\n+int i = \"hi!\"_script;"}, {"sha": "42d25c0c163a5c2bd071952b770e6bd21bc71286", "filename": "gcc/testsuite/g++.dg/cpp1y/udlit-char-template.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a8d9ab15448911199ac24e7e23206e0a7e12696/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a8d9ab15448911199ac24e7e23206e0a7e12696/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template.C?ref=3a8d9ab15448911199ac24e7e23206e0a7e12696", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options -std=c++1y }\n+\n+template<typename CharT, CharT... String>\n+  int\n+  operator\"\" _script()\n+  { return 42; }\n+\n+int i = \"hi!\"_script;\n+int i8 = u8\"hi!\"_script;\n+int iw = L\"hi!\"_script;\n+int i16 = u\"hi!\"_script;\n+int i32 = U\"hi!\"_script;"}]}