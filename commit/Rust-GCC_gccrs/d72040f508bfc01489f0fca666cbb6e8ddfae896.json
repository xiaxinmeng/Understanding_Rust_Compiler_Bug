{"sha": "d72040f508bfc01489f0fca666cbb6e8ddfae896", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcyMDQwZjUwOGJmYzAxNDg5ZjBmY2E2NjZjYmI2ZThkZGZhZTg5Ng==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-04-30T23:59:10Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-04-30T23:59:10Z"}, "message": "c-common.c (c_promoting_integer_type_p): New function, from the corpse of old macro.\n\n        * c-common.c (c_promoting_integer_type_p): New function, from the\n        corpse of old macro.  Properly promote too-small enumerations and\n        booleans.  Adjust all callers.\n        * c-common.h (C_PROMOTING_INTEGER_TYPE_P): Remove.\n        (c_promoting_integer_type_p): Declare.\n        * c-decl.c: Adjust C_PROMOTING_INTEGER_TYPE_P invocations.\n        * c-typeck.c: Likewise.\n        (default_conversion): Remove now redundant boolean check.\n\n        * cvt.c: Downcase C_PROMOTING_INTEGER_TYPE_P invocations.\n        * decl.c: Likewise.\n\nFrom-SVN: r41709", "tree": {"sha": "1e7389002ae91d660ddd3c0a718444a33765d0ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e7389002ae91d660ddd3c0a718444a33765d0ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d72040f508bfc01489f0fca666cbb6e8ddfae896", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d72040f508bfc01489f0fca666cbb6e8ddfae896", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d72040f508bfc01489f0fca666cbb6e8ddfae896", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d72040f508bfc01489f0fca666cbb6e8ddfae896/comments", "author": null, "committer": null, "parents": [{"sha": "901d43bcd00712e558ce9d408c788980b6823c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/901d43bcd00712e558ce9d408c788980b6823c13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/901d43bcd00712e558ce9d408c788980b6823c13"}], "stats": {"total": 75, "additions": 54, "deletions": 21}, "files": [{"sha": "1835a46b46c99b0da420a9dfe4aeb2dad4bde337", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d72040f508bfc01489f0fca666cbb6e8ddfae896/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d72040f508bfc01489f0fca666cbb6e8ddfae896/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d72040f508bfc01489f0fca666cbb6e8ddfae896", "patch": "@@ -1,3 +1,14 @@\n+2001-04-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-common.c (c_promoting_integer_type_p): New function, from the\n+\tcorpse of old macro.  Properly promote too-small enumerations and\n+\tbooleans.  Adjust all callers.\n+\t* c-common.h (C_PROMOTING_INTEGER_TYPE_P): Remove.\n+\t(c_promoting_integer_type_p): Declare.\n+\t* c-decl.c: Adjust C_PROMOTING_INTEGER_TYPE_P invocations.\n+\t* c-typeck.c: Likewise.\n+\t(default_conversion): Remove now redundant boolean check.\n+\n 2001-04-30  Jan Hubicka  <jh@suse.cz>\n             Richard Henderson  <rth@redhat.com>\n "}, {"sha": "a87ad7e33260d13fcf0a4bec3fa7dcd3c06505ff", "filename": "gcc/c-common.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d72040f508bfc01489f0fca666cbb6e8ddfae896/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d72040f508bfc01489f0fca666cbb6e8ddfae896/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=d72040f508bfc01489f0fca666cbb6e8ddfae896", "patch": "@@ -3690,6 +3690,36 @@ builtin_function_2 (builtin_name, name, builtin_type, type, function_code,\n   return (bdecl != 0 ? bdecl : decl);\n }\n \f\n+/* Nonzero if the type T promotes to int.  This is (nearly) the\n+   integral promotions defined in ISO C99 6.3.1.1/2.  */\n+\n+bool\n+c_promoting_integer_type_p (t)\n+     tree t;\n+{\n+  switch (TREE_CODE (t))\n+    {\n+    case INTEGER_TYPE:\n+      return (TYPE_MAIN_VARIANT (t) == char_type_node\n+\t      || TYPE_MAIN_VARIANT (t) == signed_char_type_node\n+\t      || TYPE_MAIN_VARIANT (t) == unsigned_char_type_node\n+\t      || TYPE_MAIN_VARIANT (t) == short_integer_type_node\n+\t      || TYPE_MAIN_VARIANT (t) == short_unsigned_type_node);\n+\n+    case ENUMERAL_TYPE:\n+      /* ??? Technically all enumerations not larger than an int\n+\t promote to an int.  But this is used along code paths\n+\t that only want to notice a size change.  */\n+      return TYPE_PRECISION (t) < TYPE_PRECISION (integer_type_node);\n+\n+    case BOOLEAN_TYPE:\n+      return 1;\n+\n+    default:\n+      return 0;\n+    }\n+}\n+\n /* Given a type, apply default promotions wrt unnamed function arguments\n    and return the new type.  Return NULL_TREE if no change.  */\n /* ??? There is a function of the same name in the C++ front end that\n@@ -3704,7 +3734,7 @@ simple_type_promotes_to (type)\n   if (TYPE_MAIN_VARIANT (type) == float_type_node)\n     return double_type_node;\n \n-  if (C_PROMOTING_INTEGER_TYPE_P (type))\n+  if (c_promoting_integer_type_p (type))\n     {\n       /* Traditionally, unsignedness is preserved in default promotions.\n          Also preserve unsignedness if not really getting any wider.  */\n@@ -3739,7 +3769,7 @@ self_promoting_args_p (parms)\n       if (TYPE_MAIN_VARIANT (type) == float_type_node)\n \treturn 0;\n \n-      if (C_PROMOTING_INTEGER_TYPE_P (type))\n+      if (c_promoting_integer_type_p (type))\n \treturn 0;\n     }\n   return 1;"}, {"sha": "32d7ec990034093c3576b6127be95b1c574161a5", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d72040f508bfc01489f0fca666cbb6e8ddfae896/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d72040f508bfc01489f0fca666cbb6e8ddfae896/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=d72040f508bfc01489f0fca666cbb6e8ddfae896", "patch": "@@ -533,17 +533,7 @@ extern tree build_va_arg\t\t\tPARAMS ((tree, tree));\n \n extern void c_common_lang_init\t\t\tPARAMS ((void));\n \n-/* Nonzero if the type T promotes to itself.\n-   ANSI C states explicitly the list of types that promote;\n-   in particular, short promotes to int even if they have the same width.  */\n-#define C_PROMOTING_INTEGER_TYPE_P(t)\t\t\t\t\\\n-  (TREE_CODE ((t)) == INTEGER_TYPE\t\t\t\t\\\n-   && (TYPE_MAIN_VARIANT (t) == char_type_node\t\t\t\\\n-       || TYPE_MAIN_VARIANT (t) == signed_char_type_node\t\\\n-       || TYPE_MAIN_VARIANT (t) == unsigned_char_type_node\t\\\n-       || TYPE_MAIN_VARIANT (t) == short_integer_type_node\t\\\n-       || TYPE_MAIN_VARIANT (t) == short_unsigned_type_node))\n-\n+extern bool c_promoting_integer_type_p\t\tPARAMS ((tree));\n extern int self_promoting_args_p\t\tPARAMS ((tree));\n extern tree simple_type_promotes_to\t\tPARAMS ((tree));\n extern tree strip_array_types                   PARAMS ((tree));"}, {"sha": "9d63d060cd80ff0e6f59094c8de8523b69143a68", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d72040f508bfc01489f0fca666cbb6e8ddfae896/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d72040f508bfc01489f0fca666cbb6e8ddfae896/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=d72040f508bfc01489f0fca666cbb6e8ddfae896", "patch": "@@ -5999,7 +5999,7 @@ start_function (declspecs, declarator, prefix_attributes, attributes)\n \n   restype = TREE_TYPE (TREE_TYPE (current_function_decl));\n   /* Promote the value to int before returning it.  */\n-  if (C_PROMOTING_INTEGER_TYPE_P (restype))\n+  if (c_promoting_integer_type_p (restype))\n     {\n       /* It retains unsignedness if traditional\n \t or if not really getting wider.  */"}, {"sha": "f05422ca6d21ee9b3f54b3447305264de3efc4e7", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d72040f508bfc01489f0fca666cbb6e8ddfae896/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d72040f508bfc01489f0fca666cbb6e8ddfae896/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=d72040f508bfc01489f0fca666cbb6e8ddfae896", "patch": "@@ -954,14 +954,14 @@ default_conversion (exp)\n   if (TREE_CODE (exp) == COMPONENT_REF\n       && DECL_C_BIT_FIELD (TREE_OPERAND (exp, 1))\n       /* If it's thinner than an int, promote it like a\n-\t C_PROMOTING_INTEGER_TYPE_P, otherwise leave it alone.  */\n+\t c_promoting_integer_type_p, otherwise leave it alone.  */\n       && 0 > compare_tree_int (DECL_SIZE (TREE_OPERAND (exp, 1)),\n \t\t\t       TYPE_PRECISION (integer_type_node)))\n     return convert (flag_traditional && TREE_UNSIGNED (type)\n \t\t    ? unsigned_type_node : integer_type_node,\n \t\t    exp);\n \n-  if (C_PROMOTING_INTEGER_TYPE_P (type))\n+  if (c_promoting_integer_type_p (type))\n     {\n       /* Traditionally, unsignedness is preserved in default promotions.\n          Also preserve unsignedness if not really getting any wider.  */\n@@ -973,9 +973,6 @@ default_conversion (exp)\n       return convert (integer_type_node, exp);\n     }\n \n-  if (code == BOOLEAN_TYPE)\n-    return convert (integer_type_node, exp);\n-\n   if (flag_traditional && !flag_allow_single_precision\n       && TYPE_MAIN_VARIANT (type) == float_type_node)\n     return convert (double_type_node, exp);"}, {"sha": "e95216846364846aad90f03d7904bd17e7beab21", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d72040f508bfc01489f0fca666cbb6e8ddfae896/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d72040f508bfc01489f0fca666cbb6e8ddfae896/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d72040f508bfc01489f0fca666cbb6e8ddfae896", "patch": "@@ -1,3 +1,8 @@\n+2001-04-30  Richard Henderson  <rth@redhat.com>\n+\n+        * cvt.c: Downcase C_PROMOTING_INTEGER_TYPE_P invocations.\n+\t* decl.c: Likewise.\n+\n 2001-04-30  Mark Mitchell  <mark@codesourcery.com>\n \n \t* gxxint.texi: Remove."}, {"sha": "f247699d22cc47b4a61d6fa378e588755c7e6a8a", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d72040f508bfc01489f0fca666cbb6e8ddfae896/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d72040f508bfc01489f0fca666cbb6e8ddfae896/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=d72040f508bfc01489f0fca666cbb6e8ddfae896", "patch": "@@ -1258,7 +1258,7 @@ type_promotes_to (type)\n       else\n \ttype = totype;\n     }\n-  else if (C_PROMOTING_INTEGER_TYPE_P (type))\n+  else if (c_promoting_integer_type_p (type))\n     {\n       /* Retain unsignedness if really not getting bigger.  */\n       if (TREE_UNSIGNED (type)"}, {"sha": "da636796bbeca070e4e05bbaf1906d7abe370211", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d72040f508bfc01489f0fca666cbb6e8ddfae896/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d72040f508bfc01489f0fca666cbb6e8ddfae896/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d72040f508bfc01489f0fca666cbb6e8ddfae896", "patch": "@@ -13602,7 +13602,7 @@ start_function (declspecs, declarator, attrs, flags)\n     cplus_decl_attributes (decl1, NULL_TREE, attrs);\n \n   /* Promote the value to int before returning it.  */\n-  if (C_PROMOTING_INTEGER_TYPE_P (restype))\n+  if (c_promoting_integer_type_p (restype))\n     restype = type_promotes_to (restype);\n \n   if (DECL_RESULT (decl1) == NULL_TREE)"}]}