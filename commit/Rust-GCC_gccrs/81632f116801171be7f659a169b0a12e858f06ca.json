{"sha": "81632f116801171be7f659a169b0a12e858f06ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE2MzJmMTE2ODAxMTcxYmU3ZjY1OWExNjliMGExMmU4NThmMDZjYQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2005-05-12T08:05:11Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2005-05-12T08:05:11Z"}, "message": "vfp.md (negsf2_vfp): Add alternative using integer registers.\n\n\t* arm/vfp.md (negsf2_vfp): Add alternative using integer registers.\n\t(negdf2_vfp): Likewise.  Convert to define_insn_and_split and split\n\tthe alternatives using integer registers into the appropriate\n\tprimitives.\n\nFrom-SVN: r99607", "tree": {"sha": "c16aedd0a9a53b39a2e83371d5a14bfa37594fcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c16aedd0a9a53b39a2e83371d5a14bfa37594fcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81632f116801171be7f659a169b0a12e858f06ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81632f116801171be7f659a169b0a12e858f06ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81632f116801171be7f659a169b0a12e858f06ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81632f116801171be7f659a169b0a12e858f06ca/comments", "author": null, "committer": null, "parents": [{"sha": "5db1c53105295810821c3019874388f778782247", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5db1c53105295810821c3019874388f778782247", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5db1c53105295810821c3019874388f778782247"}], "stats": {"total": 60, "additions": 53, "deletions": 7}, "files": [{"sha": "fd59b358caf4283761d89b73ba55f94a7c40b2b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81632f116801171be7f659a169b0a12e858f06ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81632f116801171be7f659a169b0a12e858f06ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81632f116801171be7f659a169b0a12e858f06ca", "patch": "@@ -1,3 +1,10 @@\n+2005-05-12  Richard Earnshaw  <richard.earnshaw@arm.com>\n+\n+\t* arm/vfp.md (negsf2_vfp): Add alternative using integer registers.\n+\t(negdf2_vfp): Likewise.  Convert to define_insn_and_split and split\n+\tthe alternatives using integer registers into the appropriate\n+\tprimitives.\n+\n 2005-05-11 Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \t* bitmap.c (bitmap_elmt_to_freelist, bitmap_element_allocate,"}, {"sha": "c6ace731e6669ae28ee99624662dc817adb1c020", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 46, "deletions": 7, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81632f116801171be7f659a169b0a12e858f06ca/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81632f116801171be7f659a169b0a12e858f06ca/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=81632f116801171be7f659a169b0a12e858f06ca", "patch": "@@ -298,20 +298,59 @@\n )\n \n (define_insn \"*negsf2_vfp\"\n-  [(set (match_operand:SF\t  0 \"s_register_operand\" \"+w\")\n-\t(neg:SF (match_operand:SF 1 \"s_register_operand\" \"w\")))]\n+  [(set (match_operand:SF\t  0 \"s_register_operand\" \"=w,?r\")\n+\t(neg:SF (match_operand:SF 1 \"s_register_operand\" \"w,r\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT && TARGET_VFP\"\n-  \"fnegs%?\\\\t%0, %1\"\n+  \"@\n+   fnegs%?\\\\t%0, %1\n+   eor%?\\\\t%0, %1, #-2147483648\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"type\" \"ffarith\")]\n )\n \n-(define_insn \"*negdf2_vfp\"\n-  [(set (match_operand:DF\t  0 \"s_register_operand\" \"+w\")\n-\t(neg:DF (match_operand:DF 1 \"s_register_operand\" \"w\")))]\n+(define_insn_and_split \"*negdf2_vfp\"\n+  [(set (match_operand:DF\t  0 \"s_register_operand\" \"=w,?r,?r\")\n+\t(neg:DF (match_operand:DF 1 \"s_register_operand\" \"w,0,r\")))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT && TARGET_VFP\"\n-  \"fnegd%?\\\\t%P0, %P1\"\n+  \"@\n+   fnegd%?\\\\t%P0, %P1\n+   #\n+   #\"\n+  \"TARGET_ARM && TARGET_HARD_FLOAT && TARGET_VFP && reload_completed\n+   && arm_general_register_operand (operands[0], DFmode)\"\n+  [(set (match_dup 0) (match_dup 1))]\n+  \"\n+  if (REGNO (operands[0]) == REGNO (operands[1]))\n+    {\n+      operands[0] = gen_highpart (SImode, operands[0]);\n+      operands[1] = gen_rtx_XOR (SImode, operands[0], GEN_INT (0x80000000));\n+    }\n+  else\n+    {\n+      rtx in_hi, in_lo, out_hi, out_lo;\n+\n+      in_hi = gen_rtx_XOR (SImode, gen_highpart (SImode, operands[1]),\n+\t\t\t   GEN_INT (0x80000000));\n+      in_lo = gen_lowpart (SImode, operands[1]);\n+      out_hi = gen_highpart (SImode, operands[0]);\n+      out_lo = gen_lowpart (SImode, operands[0]);\n+\n+      if (REGNO (in_lo) == REGNO (out_hi))\n+        {\n+          emit_insn (gen_rtx_SET (SImode, out_lo, in_lo));\n+\t  operands[0] = out_hi;\n+          operands[1] = in_hi;\n+        }\n+      else\n+        {\n+          emit_insn (gen_rtx_SET (SImode, out_hi, in_hi));\n+\t  operands[0] = out_lo;\n+          operands[1] = in_lo;\n+        }\n+    }\n+  \"\n   [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"length\" \"4,4,8\")\n    (set_attr \"type\" \"ffarith\")]\n )\n "}]}