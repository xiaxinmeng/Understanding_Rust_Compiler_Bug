{"sha": "f02e13584ef08fbe6f2f09af580ae2ef2b4eb125", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjAyZTEzNTg0ZWYwOGZiZTZmMmYwOWFmNTgwYWUyZWYyYjRlYjEyNQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-10-21T22:09:06Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-10-21T22:09:06Z"}, "message": "i386.c (builtin_description): Add punpcklqdq and movdq2q\n\n\t* i386.c (builtin_description): Add punpcklqdq and movdq2q\n\t(ix86_init_mmx_sse_builtins): Add v2di_ftype_void, di_ftype_v2di,\n\tv16qi_ftype_pchar, void_ftype_pchar_v16qi, v4si_ftype_pchar,\n\tvoid_ftype_pchar_v4si; Initialize __builtin_ia32_movdq2q,\n\t__builtin_ia32_loaddqa, __builtin_ia32_loaddqu, __builtin_ia32_loadd\n\t__builtin_ia32_storedqa, __builtin_ia32_storedqu, __builtin_ia32_stored\n\t__builtin_ia32_setzero128.\n\t(ix86_expand_builtin): Handle IX86_BUILTIN_CLRTI, IX86_BUILTIN_LOADDQA,\n\tIX86_BUILTIN_LOADDQU, IX86_BUILTIN_LOADD, IX86_BUILTIN_STOREDQA,\n\tIX86_BUILTIN_STOREDQU, IX86_BUILTIN_STORED, Ix86_BUILTIN_MOVQ.\n\t* i386.h (ix86_builtins): Add IX86_BUILTIN_LOADDQA, IX86_BUILTIN_LOADDQU,\n\tIX86_BUILTIN_STOREDQA, IX86_BUILTIN_STOREDQU, IX86_BUILTIN_LOADD,\n\tIX86_BUILTIN_STORED, IX86_BUILTIN_CLRTI, IX86_BUILTIN_MOVDQ2Q,\n\tIX86_BUILTIN_PUNPCKLQDQ128, Ix86_BUILTIN_MOVQ.\n\t* i386.md (sse2_punpcklqdq, sse2_movqsse2_loadd, sse2_stored,\n\tsse2_movq): New patterns.\n\t(sse2_movdqa, sse2_movdqu, sse2_movdq2q): Fix.\n\t* xmmintrin.h (_mm_load_si128, _mm_loadu_si128, _mm_loadl_epi64,\n\t_mm_store_si128, _mm_storeu_si128, _mm_storel_epi64,\n\t_mm_setzero_si128, _mm_set_epi64, _mm_set_epi32, _mm_set_epi16,\n\t_mm_set_epi8, _mm_set1_epi64, _mm_set1_epi32, _mm_set1_epi16,\n\t_mm_set1_epi8, _mm_setr_epi64, _mm_setr_epi32, _mm_setr_epi16,\n\t_mm_setr_epi8, _mm_unpacklo_epi64,_mm_set_moveq): New functions.\n\t(_mm_insert_epi16): Fix.\n\nFrom-SVN: r58391", "tree": {"sha": "16f0b324b292b656645c28993c41149e6ff56366", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16f0b324b292b656645c28993c41149e6ff56366"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f02e13584ef08fbe6f2f09af580ae2ef2b4eb125", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f02e13584ef08fbe6f2f09af580ae2ef2b4eb125", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f02e13584ef08fbe6f2f09af580ae2ef2b4eb125", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f02e13584ef08fbe6f2f09af580ae2ef2b4eb125/comments", "author": null, "committer": null, "parents": [{"sha": "676e4fb8542235918dccbe9c7efe7697b06dc2ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/676e4fb8542235918dccbe9c7efe7697b06dc2ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/676e4fb8542235918dccbe9c7efe7697b06dc2ae"}], "stats": {"total": 423, "additions": 407, "deletions": 16}, "files": [{"sha": "1660ae44eeca65c14cd7687643ade83dccd94ad4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f02e13584ef08fbe6f2f09af580ae2ef2b4eb125/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f02e13584ef08fbe6f2f09af580ae2ef2b4eb125/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f02e13584ef08fbe6f2f09af580ae2ef2b4eb125", "patch": "@@ -1,3 +1,30 @@\n+Tue Oct 22 00:04:20 CEST 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (builtin_description): Add punpcklqdq and movdq2q\n+\t(ix86_init_mmx_sse_builtins): Add v2di_ftype_void, di_ftype_v2di,\n+\tv16qi_ftype_pchar, void_ftype_pchar_v16qi, v4si_ftype_pchar,\n+\tvoid_ftype_pchar_v4si; Initialize __builtin_ia32_movdq2q,\n+\t__builtin_ia32_loaddqa, __builtin_ia32_loaddqu, __builtin_ia32_loadd\n+\t__builtin_ia32_storedqa, __builtin_ia32_storedqu, __builtin_ia32_stored\n+\t__builtin_ia32_setzero128.\n+\t(ix86_expand_builtin): Handle IX86_BUILTIN_CLRTI, IX86_BUILTIN_LOADDQA,\n+\tIX86_BUILTIN_LOADDQU, IX86_BUILTIN_LOADD, IX86_BUILTIN_STOREDQA,\n+\tIX86_BUILTIN_STOREDQU, IX86_BUILTIN_STORED, Ix86_BUILTIN_MOVQ.\n+\t* i386.h (ix86_builtins): Add IX86_BUILTIN_LOADDQA, IX86_BUILTIN_LOADDQU,\n+\tIX86_BUILTIN_STOREDQA, IX86_BUILTIN_STOREDQU, IX86_BUILTIN_LOADD,\n+\tIX86_BUILTIN_STORED, IX86_BUILTIN_CLRTI, IX86_BUILTIN_MOVDQ2Q,\n+\tIX86_BUILTIN_PUNPCKLQDQ128, Ix86_BUILTIN_MOVQ.\n+\t* i386.md (sse2_punpcklqdq, sse2_movqsse2_loadd, sse2_stored,\n+\tsse2_movq): New patterns.\n+\t(sse2_movdqa, sse2_movdqu, sse2_movdq2q): Fix.\n+\t* xmmintrin.h (_mm_load_si128, _mm_loadu_si128, _mm_loadl_epi64,\n+\t_mm_store_si128, _mm_storeu_si128, _mm_storel_epi64,\n+\t_mm_setzero_si128, _mm_set_epi64, _mm_set_epi32, _mm_set_epi16,\n+\t_mm_set_epi8, _mm_set1_epi64, _mm_set1_epi32, _mm_set1_epi16,\n+\t_mm_set1_epi8, _mm_setr_epi64, _mm_setr_epi32, _mm_setr_epi16,\n+\t_mm_setr_epi8, _mm_unpacklo_epi64,_mm_set_moveq): New functions.\n+\t(_mm_insert_epi16): Fix.\n+\n 2002-10-21  Dale Johannesen  <dalej@apple.com>\n \n         * config/rs6000/rs6000.c (rs6000_reverse_condition): Handle"}, {"sha": "2b857bf9898003b136df99b95c0277d236680bdd", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f02e13584ef08fbe6f2f09af580ae2ef2b4eb125/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f02e13584ef08fbe6f2f09af580ae2ef2b4eb125/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f02e13584ef08fbe6f2f09af580ae2ef2b4eb125", "patch": "@@ -797,6 +797,7 @@ const struct attribute_spec ix86_attribute_table[];\n static tree ix86_handle_cdecl_attribute PARAMS ((tree *, tree, tree, int, bool *));\n static tree ix86_handle_regparm_attribute PARAMS ((tree *, tree, tree, int, bool *));\n static int ix86_value_regno PARAMS ((enum machine_mode));\n+static bool contains_128bit_aligned_vector_p PARAMS ((tree));\n \n #if defined (DO_GLOBAL_CTORS_BODY) && defined (HAS_INIT_SECTION)\n static void ix86_svr3_asm_out_constructor PARAMS ((rtx, int));\n@@ -12117,6 +12118,7 @@ static const struct builtin_description bdesc_2arg[] =\n   { MASK_SSE2, CODE_FOR_sse2_punpcklbw, \"__builtin_ia32_punpcklbw128\", IX86_BUILTIN_PUNPCKLBW128, 0, 0 },\n   { MASK_SSE2, CODE_FOR_sse2_punpcklwd, \"__builtin_ia32_punpcklwd128\", IX86_BUILTIN_PUNPCKLWD128, 0, 0 },\n   { MASK_SSE2, CODE_FOR_sse2_punpckldq, \"__builtin_ia32_punpckldq128\", IX86_BUILTIN_PUNPCKLDQ128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_punpcklqdq, \"__builtin_ia32_punpcklqdq128\", IX86_BUILTIN_PUNPCKLQDQ128, 0, 0 },\n \n   { MASK_SSE2, CODE_FOR_sse2_packsswb, \"__builtin_ia32_packsswb128\", IX86_BUILTIN_PACKSSWB128, 0, 0 },\n   { MASK_SSE2, CODE_FOR_sse2_packssdw, \"__builtin_ia32_packssdw128\", IX86_BUILTIN_PACKSSDW128, 0, 0 },\n@@ -12168,6 +12170,7 @@ static const struct builtin_description bdesc_1arg[] =\n   { MASK_SSE2, CODE_FOR_sse2_pmovmskb, 0, IX86_BUILTIN_PMOVMSKB128, 0, 0 },\n   { MASK_SSE2, CODE_FOR_sse2_movmskpd, 0, IX86_BUILTIN_MOVMSKPD, 0, 0 },\n   { MASK_SSE2, CODE_FOR_sse2_movq2dq, 0, IX86_BUILTIN_MOVQ2DQ, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_movdq2q, 0, IX86_BUILTIN_MOVDQ2Q, 0, 0 },\n \n   { MASK_SSE2, CODE_FOR_sqrtv2df2, 0, IX86_BUILTIN_SQRTPD, 0, 0 },\n \n@@ -12187,7 +12190,9 @@ static const struct builtin_description bdesc_1arg[] =\n \n   { MASK_SSE2, CODE_FOR_cvtps2dq, 0, IX86_BUILTIN_CVTPS2DQ, 0, 0 },\n   { MASK_SSE2, CODE_FOR_cvtps2pd, 0, IX86_BUILTIN_CVTPS2PD, 0, 0 },\n-  { MASK_SSE2, CODE_FOR_cvttps2dq, 0, IX86_BUILTIN_CVTTPS2DQ, 0, 0 }\n+  { MASK_SSE2, CODE_FOR_cvttps2dq, 0, IX86_BUILTIN_CVTTPS2DQ, 0, 0 },\n+\n+  { MASK_SSE2, CODE_FOR_sse2_movq, 0, IX86_BUILTIN_MOVQ, 0, 0 }\n };\n \n void\n@@ -12343,6 +12348,8 @@ ix86_init_mmx_sse_builtins ()\n \n   tree ti_ftype_void\n     = build_function_type (intTI_type_node, void_list_node);\n+  tree v2di_ftype_void\n+    = build_function_type (V2DI_type_node, void_list_node);\n   tree ti_ftype_ti_ti\n     = build_function_type_list (intTI_type_node,\n \t\t\t\tintTI_type_node, intTI_type_node, NULL_TREE);\n@@ -12351,6 +12358,9 @@ ix86_init_mmx_sse_builtins ()\n   tree v2di_ftype_di\n     = build_function_type_list (V2DI_type_node,\n \t\t\t\tlong_long_unsigned_type_node, NULL_TREE);\n+  tree di_ftype_v2di\n+    = build_function_type_list (long_long_unsigned_type_node,\n+\t\t\t\tV2DI_type_node, NULL_TREE);\n   tree v4sf_ftype_v4si\n     = build_function_type_list (V4SF_type_node, V4SI_type_node, NULL_TREE);\n   tree v4si_ftype_v4sf\n@@ -12459,6 +12469,18 @@ ix86_init_mmx_sse_builtins ()\n \t\t\t\tV16QI_type_node, V16QI_type_node, NULL_TREE);\n   tree int_ftype_v16qi\n     = build_function_type_list (integer_type_node, V16QI_type_node, NULL_TREE);\n+  tree v16qi_ftype_pchar\n+    = build_function_type_list (V16QI_type_node, pchar_type_node, NULL_TREE);\n+  tree void_ftype_pchar_v16qi\n+    = build_function_type_list (void_type_node,\n+\t\t\t        pchar_type_node, V16QI_type_node, NULL_TREE);\n+  tree v4si_ftype_pchar\n+    = build_function_type_list (V4SI_type_node, pchar_type_node, NULL_TREE);\n+  tree void_ftype_pchar_v4si\n+    = build_function_type_list (void_type_node,\n+\t\t\t        pchar_type_node, V4SI_type_node, NULL_TREE);\n+  tree v2di_ftype_v2di\n+    = build_function_type_list (V2DI_type_node, V2DI_type_node, NULL_TREE);\n \n   /* Add all builtins that are more or less simple operations on two\n      operands.  */\n@@ -12639,6 +12661,7 @@ ix86_init_mmx_sse_builtins ()\n \n   def_builtin (MASK_SSE2, \"__builtin_ia32_maskmovdqu\", void_ftype_v16qi_v16qi_pchar, IX86_BUILTIN_MASKMOVDQU);\n   def_builtin (MASK_SSE2, \"__builtin_ia32_movq2dq\", v2di_ftype_di, IX86_BUILTIN_MOVQ2DQ);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_movdq2q\", di_ftype_v2di, IX86_BUILTIN_MOVDQ2Q);\n \n   def_builtin (MASK_SSE2, \"__builtin_ia32_loadapd\", v2df_ftype_pdouble, IX86_BUILTIN_LOADAPD);\n   def_builtin (MASK_SSE2, \"__builtin_ia32_loadupd\", v2df_ftype_pdouble, IX86_BUILTIN_LOADUPD);\n@@ -12702,6 +12725,16 @@ ix86_init_mmx_sse_builtins ()\n   def_builtin (MASK_SSE2, \"__builtin_ia32_lfence\", void_ftype_void, IX86_BUILTIN_LFENCE);\n   def_builtin (MASK_SSE2, \"__builtin_ia32_mfence\", void_ftype_void, IX86_BUILTIN_MFENCE);\n \n+  def_builtin (MASK_SSE2, \"__builtin_ia32_loaddqa\", v16qi_ftype_pchar, IX86_BUILTIN_LOADDQA);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_loaddqu\", v16qi_ftype_pchar, IX86_BUILTIN_LOADDQU);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_loadd\", v4si_ftype_pchar, IX86_BUILTIN_LOADD);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_storedqa\", void_ftype_pchar_v16qi, IX86_BUILTIN_STOREDQA);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_storedqu\", void_ftype_pchar_v16qi, IX86_BUILTIN_STOREDQU);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_stored\", void_ftype_pchar_v4si, IX86_BUILTIN_STORED);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_movq\", v2di_ftype_v2di, IX86_BUILTIN_MOVQ);\n+\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_setzero128\", v2di_ftype_void, IX86_BUILTIN_CLRTI);\n+\n   def_builtin (MASK_SSE2, \"__builtin_ia32_psllw128\", v8hi_ftype_v8hi_v2di, IX86_BUILTIN_PSLLW128);\n   def_builtin (MASK_SSE2, \"__builtin_ia32_pslld128\", v4si_ftype_v4si_v2di, IX86_BUILTIN_PSLLD128);\n   def_builtin (MASK_SSE2, \"__builtin_ia32_psllq128\", v2di_ftype_v2di_v2di, IX86_BUILTIN_PSLLQ128);\n@@ -13153,6 +13186,7 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n \n     case IX86_BUILTIN_STOREAPS:\n       return ix86_expand_store_builtin (CODE_FOR_sse_movaps, arglist);\n+\n     case IX86_BUILTIN_STOREUPS:\n       return ix86_expand_store_builtin (CODE_FOR_sse_movups, arglist);\n \n@@ -13421,6 +13455,12 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n       emit_insn (gen_mmx_clrdi (target));\n       return target;\n \n+    case IX86_BUILTIN_CLRTI:\n+      target = gen_reg_rtx (V2DImode);\n+      emit_insn (gen_sse2_clrti (simplify_gen_subreg (TImode, target, V2DImode, 0)));\n+      return target;\n+\n+\n     case IX86_BUILTIN_SQRTSD:\n       return ix86_expand_unop1_builtin (CODE_FOR_vmsqrtv2df2, arglist, target);\n     case IX86_BUILTIN_LOADAPD:\n@@ -13507,6 +13547,20 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n     case IX86_BUILTIN_MOVNTI:\n       return ix86_expand_store_builtin (CODE_FOR_sse2_movntsi, arglist);\n \n+    case IX86_BUILTIN_LOADDQA:\n+      return ix86_expand_unop_builtin (CODE_FOR_sse2_movdqa, arglist, target, 1);\n+    case IX86_BUILTIN_LOADDQU:\n+      return ix86_expand_unop_builtin (CODE_FOR_sse2_movdqu, arglist, target, 1);\n+    case IX86_BUILTIN_LOADD:\n+      return ix86_expand_unop_builtin (CODE_FOR_sse2_loadd, arglist, target, 1);\n+\n+    case IX86_BUILTIN_STOREDQA:\n+      return ix86_expand_store_builtin (CODE_FOR_sse2_movdqa, arglist);\n+    case IX86_BUILTIN_STOREDQU:\n+      return ix86_expand_store_builtin (CODE_FOR_sse2_movdqu, arglist);\n+    case IX86_BUILTIN_STORED:\n+      return ix86_expand_store_builtin (CODE_FOR_sse2_stored, arglist);\n+\n     default:\n       break;\n     }"}, {"sha": "f832e1088a6aacaa3d012c638cc25772abf824ba", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f02e13584ef08fbe6f2f09af580ae2ef2b4eb125/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f02e13584ef08fbe6f2f09af580ae2ef2b4eb125/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=f02e13584ef08fbe6f2f09af580ae2ef2b4eb125", "patch": "@@ -2090,6 +2090,16 @@ enum ix86_builtins\n   IX86_BUILTIN_MOVNTPS,\n   IX86_BUILTIN_MOVNTQ,\n \n+  IX86_BUILTIN_LOADDQA,\n+  IX86_BUILTIN_LOADDQU,\n+  IX86_BUILTIN_STOREDQA,\n+  IX86_BUILTIN_STOREDQU,\n+  IX86_BUILTIN_MOVQ,\n+  IX86_BUILTIN_LOADD,\n+  IX86_BUILTIN_STORED,\n+\n+  IX86_BUILTIN_CLRTI,\n+\n   IX86_BUILTIN_PACKSSWB,\n   IX86_BUILTIN_PACKSSDW,\n   IX86_BUILTIN_PACKUSWB,\n@@ -2336,6 +2346,7 @@ enum ix86_builtins\n   IX86_BUILTIN_MOVMSKPD,\n   IX86_BUILTIN_PMOVMSKB128,\n   IX86_BUILTIN_MOVQ2DQ,\n+  IX86_BUILTIN_MOVDQ2Q,\n \n   IX86_BUILTIN_PACKSSWB128,\n   IX86_BUILTIN_PACKSSDW128,\n@@ -2419,6 +2430,7 @@ enum ix86_builtins\n   IX86_BUILTIN_PUNPCKLBW128,\n   IX86_BUILTIN_PUNPCKLWD128,\n   IX86_BUILTIN_PUNPCKLDQ128,\n+  IX86_BUILTIN_PUNPCKLQDQ128,\n \n   IX86_BUILTIN_CLFLUSH,\n   IX86_BUILTIN_MFENCE,"}, {"sha": "a4991313d5b334e220309627888a79487e9ad4ff", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 66, "deletions": 14, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f02e13584ef08fbe6f2f09af580ae2ef2b4eb125/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f02e13584ef08fbe6f2f09af580ae2ef2b4eb125/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f02e13584ef08fbe6f2f09af580ae2ef2b4eb125", "patch": "@@ -21545,6 +21545,19 @@\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"sse2_punpcklqdq\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n+\t(vec_merge:V2DI\n+\t (match_operand:V2DI 1 \"register_operand\" \"0\")\n+\t (vec_select:V2DI (match_operand:V2DI 2 \"register_operand\" \"x\")\n+\t\t\t  (parallel [(const_int 1)\n+\t\t\t\t     (const_int 0)]))\n+\t (const_int 1)))]\n+  \"TARGET_SSE2\"\n+  \"punpcklqdq\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"mode\" \"TI\")])\n+\n ;; SSE2 moves\n \n (define_insn \"sse2_movapd\"\n@@ -21570,9 +21583,9 @@\n    (set_attr \"mode\" \"V2DF\")])\n \n (define_insn \"sse2_movdqa\"\n-  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=x,m\")\n-\t(unspec:TI [(match_operand:TI 1 \"general_operand\" \"xm,x\")]\n-\t\t   UNSPEC_MOVA))]\n+  [(set (match_operand:V16QI 0 \"nonimmediate_operand\" \"=x,m\")\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"general_operand\" \"xm,x\")]\n+\t\t       UNSPEC_MOVA))]\n   \"TARGET_SSE2\"\n   \"@\n    movdqa\\t{%1, %0|%0, %1}\n@@ -21581,9 +21594,9 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse2_movdqu\"\n-  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=x,m\")\n-\t(unspec:TI [(match_operand:TI 1 \"general_operand\" \"xm,x\")]\n-\t\t   UNSPEC_MOVU))]\n+  [(set (match_operand:V16QI 0 \"nonimmediate_operand\" \"=x,m\")\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"general_operand\" \"xm,x\")]\n+\t\t       UNSPEC_MOVU))]\n   \"TARGET_SSE2\"\n   \"@\n    movdqu\\t{%1, %0|%0, %1}\n@@ -21592,21 +21605,60 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse2_movdq2q\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=y\")\n-\t(vec_select:DI (match_operand:V2DI 1 \"general_operand\" \"x\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=m,y\")\n+\t(vec_select:DI (match_operand:V2DI 1 \"register_operand\" \"x,x\")\n \t\t       (parallel [(const_int 0)])))]\n   \"TARGET_SSE2\"\n-  \"movdq2q\\t{%1, %0|%0, %1}\"\n+  \"@\n+   movq\\t{%1, %0|%0, %1}\n+   movdq2q\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse2_movq2dq\"\n-  [(set (match_operand:V2DI 0 \"nonimmediate_operand\" \"=x\")\n-\t(vec_concat:V2DI (match_operand:DI 1 \"general_operand\" \"y\")\n-\t\t\t (const_vector:DI [(const_int 0)])))]\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x,?x\")\n+\t(vec_concat:V2DI (match_operand:DI 1 \"nonimmediate_operand\" \"m,y\")\n+\t\t\t (const_int 0)))]\n   \"TARGET_SSE2\"\n-  \"movq2dq\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecvt\")\n+  \"@\n+   movq\\t{%1, %0|%0, %1}\n+   movq2dq\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt,ssemov\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"sse2_movq\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n+\t(vec_concat:V2DI (vec_select:DI\n+\t\t\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"xm\")\n+\t\t\t  (parallel [(const_int 0)]))\n+\t\t\t (const_int 0)))]\n+  \"TARGET_SSE2\"\n+  \"movq\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"sse2_loadd\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+\t(vec_merge:V4SI\n+\t (vec_duplicate:V4HI (match_operand:SI 1 \"nonimmediate_operand\" \"mr\"))\n+\t (const_vector:V4SI [(const_int 0)\n+\t\t\t     (const_int 0)\n+\t\t\t     (const_int 0)\n+\t\t\t     (const_int 0)])\n+\t (const_int 1)))]\n+  \"TARGET_SSE2\"\n+  \"movd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"sse2_stored\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=mr\")\n+\t(vec_select:SI\n+\t (match_operand:V4SI 1 \"register_operand\" \"x\")\n+\t (parallel [(const_int 0)])))]\n+  \"TARGET_SSE2\"\n+  \"movd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse2_movhpd\""}, {"sha": "08ef76ad1a03592eb353104e93567050ffcc28a1", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 247, "deletions": 1, "changes": 248, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f02e13584ef08fbe6f2f09af580ae2ef2b4eb125/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f02e13584ef08fbe6f2f09af580ae2ef2b4eb125/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=f02e13584ef08fbe6f2f09af580ae2ef2b4eb125", "patch": "@@ -1581,6 +1581,246 @@ _mm_ucomineq_sd (__m128d __A, __m128d __B)\n   return __builtin_ia32_ucomisdneq ((__v2df)__A, (__v2df)__B);\n }\n \n+/* Create a vector with element 0 as *P and the rest zero.  */\n+\n+static __inline __m128i\n+_mm_load_si128 (__m128i const *__P)\n+{\n+  return (__m128i) __builtin_ia32_loaddqa (__P);\n+}\n+\n+static __inline __m128i\n+_mm_loadu_si128 (__m128i const *__P)\n+{\n+  return (__m128i) __builtin_ia32_loaddqu (__P);\n+}\n+\n+static __inline __m128i\n+_mm_loadl_epi64 (__m128i const *__P)\n+{\n+  return (__m128i) __builtin_ia32_movq2dq (*(unsigned long long *)__P);\n+}\n+\n+static __inline void\n+_mm_store_si128 (__m128i *__P, __m128i __B)\n+{\n+  __builtin_ia32_storedqa (__P, (__v16qi)__B);\n+}\n+\n+static __inline void\n+_mm_storeu_si128 (__m128i *__P, __m128i __B)\n+{\n+  __builtin_ia32_storedqu (__P, (__v16qi)__B);\n+}\n+\n+static __inline void\n+_mm_storel_epi64 (__m128i *__P, __m128i __B)\n+{\n+  *(long long *)__P = __builtin_ia32_movdq2q ((__v2di)__B);\n+}\n+\n+static __inline __m128i\n+_mm_move_epi64 (__m128i __A)\n+{\n+  return (__m128i) __builtin_ia32_movq ((__v2di)__A);\n+}\n+\n+/* Create a vector of zeros.  */\n+static __inline __m128i\n+_mm_setzero_si128 (void)\n+{\n+  return (__m128i) __builtin_ia32_setzero128 ();\n+}\n+\n+static __inline __m128i\n+_mm_set_epi64 (__m64 __A,  __m64 __B)\n+{\n+  __v2di __tmp = (__v2di)__builtin_ia32_movq2dq ((unsigned long long)__A);\n+  __v2di __tmp2 = (__v2di)__builtin_ia32_movq2dq ((unsigned long long)__B);\n+  return (__m128i)__builtin_ia32_punpcklqdq128 (__tmp2, __tmp);\n+}\n+\n+/* Create the vector [Z Y X W].  */\n+static __inline __m128i\n+_mm_set_epi32 (int __Z, int __Y, int __X, int __W)\n+{\n+  union {\n+    int __a[4];\n+    __m128i __v;\n+  } __u;\n+\n+  __u.__a[0] = __W;\n+  __u.__a[1] = __X;\n+  __u.__a[2] = __Y;\n+  __u.__a[3] = __Z;\n+\n+  return __u.__v;\n+}\n+/* Create the vector [S T U V Z Y X W].  */\n+static __inline __m128i\n+_mm_set_epi16 (short __Z, short __Y, short __X, short __W,\n+\t       short __V, short __U, short __T, short __S)\n+{\n+  union {\n+    short __a[8];\n+    __m128i __v;\n+  } __u;\n+\n+  __u.__a[0] = __S;\n+  __u.__a[1] = __T;\n+  __u.__a[2] = __U;\n+  __u.__a[3] = __V;\n+  __u.__a[4] = __W;\n+  __u.__a[5] = __X;\n+  __u.__a[6] = __Y;\n+  __u.__a[7] = __Z;\n+\n+  return __u.__v;\n+}\n+\n+/* Create the vector [S T U V Z Y X W].  */\n+static __inline __m128i\n+_mm_set_epi8 (char __Z, char __Y, char __X, char __W,\n+\t      char __V, char __U, char __T, char __S,\n+\t      char __Z1, char __Y1, char __X1, char __W1,\n+\t      char __V1, char __U1, char __T1, char __S1)\n+{\n+  union {\n+    char __a[16];\n+    __m128i __v;\n+  } __u;\n+\n+  __u.__a[0] = __S1;\n+  __u.__a[1] = __T1;\n+  __u.__a[2] = __U1;\n+  __u.__a[3] = __V1;\n+  __u.__a[4] = __W1;\n+  __u.__a[5] = __X1;\n+  __u.__a[6] = __Y1;\n+  __u.__a[7] = __Z1;\n+  __u.__a[8] = __S;\n+  __u.__a[9] = __T;\n+  __u.__a[10] = __U;\n+  __u.__a[11] = __V;\n+  __u.__a[12] = __W;\n+  __u.__a[13] = __X;\n+  __u.__a[14] = __Y;\n+  __u.__a[15] = __Z;\n+\n+  return __u.__v;\n+}\n+\n+static __inline __m128i\n+_mm_set1_epi64 (__m64 __A)\n+{\n+  __v2di __tmp = (__v2di)__builtin_ia32_movq2dq ((unsigned long long)__A);\n+  return (__m128i)__builtin_ia32_punpcklqdq128 (__tmp, __tmp);\n+}\n+\n+static __inline __m128i\n+_mm_set1_epi32 (int __A)\n+{\n+  __v4si __tmp = (__v4si)__builtin_ia32_loadd (&__A);\n+  return (__m128i) __builtin_ia32_pshufd ((__v4si)__tmp, _MM_SHUFFLE (0,0,0,0));\n+}\n+\n+static __inline __m128i\n+_mm_set1_epi16 (short __A)\n+{\n+  int __Acopy = (unsigned short)__A;\n+  __v4si __tmp = (__v4si)__builtin_ia32_loadd (&__Acopy);\n+  __tmp = (__v4si)__builtin_ia32_punpcklwd128 ((__v8hi)__tmp, (__v8hi)__tmp);\n+  return (__m128i) __builtin_ia32_pshufd ((__v4si)__tmp, _MM_SHUFFLE (0,0,0,0));\n+}\n+\n+static __inline __m128i\n+_mm_set1_epi8 (char __A)\n+{\n+  int __Acopy = (unsigned char)__A;\n+  __v4si __tmp = (__v4si)__builtin_ia32_loadd (&__Acopy);\n+  __tmp = (__v4si)__builtin_ia32_punpcklbw128 ((__v16qi)__tmp, (__v16qi)__tmp);\n+  __tmp = (__v4si)__builtin_ia32_punpcklbw128 ((__v16qi)__tmp, (__v16qi)__tmp);\n+  return (__m128i) __builtin_ia32_pshufd ((__v4si)__tmp, _MM_SHUFFLE (0,0,0,0));\n+}\n+\n+static __inline __m128i\n+_mm_setr_epi64 (__m64 __A,  __m64 __B)\n+{\n+  __v2di __tmp = (__v2di)__builtin_ia32_movq2dq ((unsigned long long)__A);\n+  __v2di __tmp2 = (__v2di)__builtin_ia32_movq2dq ((unsigned long long)__B);\n+  return (__m128i)__builtin_ia32_punpcklqdq128 (__tmp, __tmp2);\n+}\n+\n+/* Create the vector [Z Y X W].  */\n+static __inline __m128i\n+_mm_setr_epi32 (int __W, int __X, int __Y, int __Z)\n+{\n+  union {\n+    int __a[4];\n+    __m128i __v;\n+  } __u;\n+\n+  __u.__a[0] = __W;\n+  __u.__a[1] = __X;\n+  __u.__a[2] = __Y;\n+  __u.__a[3] = __Z;\n+\n+  return __u.__v;\n+}\n+/* Create the vector [S T U V Z Y X W].  */\n+static __inline __m128i\n+_mm_setr_epi16 (short __S, short __T, short __U, short __V,\n+\t        short __W, short __X, short __Y, short __Z)\n+{\n+  union {\n+    short __a[8];\n+    __m128i __v;\n+  } __u;\n+\n+  __u.__a[0] = __S;\n+  __u.__a[1] = __T;\n+  __u.__a[2] = __U;\n+  __u.__a[3] = __V;\n+  __u.__a[4] = __W;\n+  __u.__a[5] = __X;\n+  __u.__a[6] = __Y;\n+  __u.__a[7] = __Z;\n+\n+  return __u.__v;\n+}\n+\n+/* Create the vector [S T U V Z Y X W].  */\n+static __inline __m128i\n+_mm_setr_epi8 (char __S1, char __T1, char __U1, char __V1,\n+\t       char __W1, char __X1, char __Y1, char __Z1,\n+\t       char __S, char __T, char __U, char __V,\n+\t       char __W, char __X, char __Y, char __Z)\n+{\n+  union {\n+    char __a[16];\n+    __m128i __v;\n+  } __u;\n+\n+  __u.__a[0] = __S1;\n+  __u.__a[1] = __T1;\n+  __u.__a[2] = __U1;\n+  __u.__a[3] = __V1;\n+  __u.__a[4] = __W1;\n+  __u.__a[5] = __X1;\n+  __u.__a[6] = __Y1;\n+  __u.__a[7] = __Z1;\n+  __u.__a[8] = __S;\n+  __u.__a[9] = __T;\n+  __u.__a[10] = __U;\n+  __u.__a[11] = __V;\n+  __u.__a[12] = __W;\n+  __u.__a[13] = __X;\n+  __u.__a[14] = __Y;\n+  __u.__a[15] = __Z;\n+\n+  return __u.__v;\n+}\n+\n static __inline __m128d\n _mm_cvtepi32_pd (__m128i __A)\n {\n@@ -1775,6 +2015,12 @@ _mm_unpacklo_epi32 (__m128i __A, __m128i __B)\n   return (__m128i)__builtin_ia32_punpckldq128 ((__v4si)__A, (__v4si)__B);\n }\n \n+static __inline __m128i\n+_mm_unpacklo_epi64 (__m128i __A, __m128i __B)\n+{\n+  return (__m128i)__builtin_ia32_punpcklqdq128 ((__v2di)__A, (__v2di)__B);\n+}\n+\n static __inline __m128i\n _mm_add_epi8 (__m128i __A, __m128i __B)\n {\n@@ -2075,7 +2321,7 @@ _mm_cmpgt_epi32 (__m128i __A, __m128i __B)\n \n #define _mm_extract_epi16(__A, __B) __builtin_ia32_pextrw128 ((__v8hi)__A, __B)\n \n-#define _mm_insert_epi16 (__A, __B, __C) ((__m128i)__builtin_ia32_pinsrw128 ((__v8hi)__A, __B, __C))\n+#define _mm_insert_epi16(__A, __B, __C) ((__m128i)__builtin_ia32_pinsrw128 ((__v8hi)__A, __B, __C))\n \n static __inline __m128i\n _mm_max_epi16 (__m128i __A, __m128i __B)"}]}