{"sha": "1517bc3008cf520c08760a8dba884237104e9d1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUxN2JjMzAwOGNmNTIwYzA4NzYwYThkYmE4ODQyMzcxMDRlOWQxYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-01-11T16:47:58Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-01-11T16:47:58Z"}, "message": "allocator_traits<allocator<T>> partial specialization\n\n\tPR libstdc++/60976\n\t* include/bits/alloc_traits.h (allocator_traits<allocator<_Tp>>):\n\tDefine partial specialization.\n\t* testsuite/20_util/shared_ptr/cons/58659.cc: Add construct and\n\tdestroy members to std::allocator explicit specialization.\n\nFrom-SVN: r232232", "tree": {"sha": "2fed4b25f4127781fdca0546d901cedf22937756", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fed4b25f4127781fdca0546d901cedf22937756"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1517bc3008cf520c08760a8dba884237104e9d1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1517bc3008cf520c08760a8dba884237104e9d1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1517bc3008cf520c08760a8dba884237104e9d1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1517bc3008cf520c08760a8dba884237104e9d1a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c18c836db3a87d100dd54869f98ce1a0dc0d859", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c18c836db3a87d100dd54869f98ce1a0dc0d859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c18c836db3a87d100dd54869f98ce1a0dc0d859"}], "stats": {"total": 145, "additions": 144, "deletions": 1}, "files": [{"sha": "ad4cdc3fe01bb8f41590366b8960e976be5fce9d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1517bc3008cf520c08760a8dba884237104e9d1a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1517bc3008cf520c08760a8dba884237104e9d1a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1517bc3008cf520c08760a8dba884237104e9d1a", "patch": "@@ -1,3 +1,11 @@\n+2016-01-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/60976\n+\t* include/bits/alloc_traits.h (allocator_traits<allocator<_Tp>>):\n+\tDefine partial specialization.\n+\t* testsuite/20_util/shared_ptr/cons/58659.cc: Add construct and\n+\tdestroy members to std::allocator explicit specialization.\n+\n 2016-01-08  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/26_numerics/headers/cmath/"}, {"sha": "d2d13c692af666f251fed58aa8ca6127ee69825a", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 128, "deletions": 1, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1517bc3008cf520c08760a8dba884237104e9d1a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1517bc3008cf520c08760a8dba884237104e9d1a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=1517bc3008cf520c08760a8dba884237104e9d1a", "patch": "@@ -331,7 +331,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Calls @c __a.destroy(__p) if that expression is well-formed,\n        *  otherwise calls @c __p->~_Tp()\n       */\n-      template <class _Tp>\n+      template<typename _Tp>\n \tstatic void destroy(_Alloc& __a, _Tp* __p)\n \t{ _S_destroy(__a, __p, 0); }\n \n@@ -359,6 +359,133 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return _S_select(__rhs, 0); }\n     };\n \n+  /// Partial specialization for std::allocator.\n+  template<typename _Tp>\n+    struct allocator_traits<allocator<_Tp>>\n+    {\n+      /// The allocator type\n+      using allocator_type = allocator<_Tp>;\n+      /// The allocated type\n+      using value_type = _Tp;\n+\n+      /// The allocator's pointer type.\n+      using pointer = _Tp*;\n+\n+      /// The allocator's const pointer type.\n+      using const_pointer = const _Tp*;\n+\n+      /// The allocator's void pointer type.\n+      using void_pointer = void*;\n+\n+      /// The allocator's const void pointer type.\n+      using const_void_pointer = const void*;\n+\n+      /// The allocator's difference type\n+      using difference_type = std::ptrdiff_t;\n+\n+      /// The allocator's size type\n+      using size_type = std::size_t;\n+\n+      /// How the allocator is propagated on copy assignment\n+      using propagate_on_container_copy_assignment = false_type;\n+\n+      /// How the allocator is propagated on move assignment\n+      using propagate_on_container_move_assignment = true_type;\n+\n+      /// How the allocator is propagated on swap\n+      using propagate_on_container_swap = false_type;\n+\n+      /// Whether all instances of the allocator type compare equal.\n+      using is_always_equal = true_type;\n+\n+      template<typename _Up>\n+\tusing rebind_alloc = allocator<_Up>;\n+\n+      template<typename _Up>\n+\tusing rebind_traits = allocator_traits<allocator<_Up>>;\n+\n+      /**\n+       *  @brief  Allocate memory.\n+       *  @param  __a  An allocator.\n+       *  @param  __n  The number of objects to allocate space for.\n+       *\n+       *  Calls @c a.allocate(n)\n+      */\n+      static pointer\n+      allocate(allocator_type& __a, size_type __n)\n+      { return __a.allocate(__n); }\n+\n+      /**\n+       *  @brief  Allocate memory.\n+       *  @param  __a  An allocator.\n+       *  @param  __n  The number of objects to allocate space for.\n+       *  @param  __hint Aid to locality.\n+       *  @return Memory of suitable size and alignment for @a n objects\n+       *          of type @c value_type\n+       *\n+       *  Returns <tt> a.allocate(n, hint) </tt>\n+      */\n+      static pointer\n+      allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)\n+      { return __a.allocate(__n, __hint); }\n+\n+      /**\n+       *  @brief  Deallocate memory.\n+       *  @param  __a  An allocator.\n+       *  @param  __p  Pointer to the memory to deallocate.\n+       *  @param  __n  The number of objects space was allocated for.\n+       *\n+       *  Calls <tt> a.deallocate(p, n) </tt>\n+      */\n+      static void\n+      deallocate(allocator_type& __a, pointer __p, size_type __n)\n+      { __a.deallocate(__p, __n); }\n+\n+      /**\n+       *  @brief  Construct an object of type @a _Up\n+       *  @param  __a  An allocator.\n+       *  @param  __p  Pointer to memory of suitable size and alignment for Tp\n+       *  @param  __args Constructor arguments.\n+       *\n+       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>\n+      */\n+      template<typename _Up, typename... _Args>\n+\tstatic void\n+\tconstruct(allocator_type& __a, _Up* __p, _Args&&... __args)\n+\t{ __a.construct(__p, std::forward<_Args>(__args)...); }\n+\n+      /**\n+       *  @brief  Destroy an object of type @a _Up\n+       *  @param  __a  An allocator.\n+       *  @param  __p  Pointer to the object to destroy\n+       *\n+       *  Calls @c __a.destroy(__p).\n+      */\n+      template<typename _Up>\n+\tstatic void\n+\tdestroy(allocator_type& __a, _Up* __p)\n+\t{ __a.destroy(__p); }\n+\n+      /**\n+       *  @brief  The maximum supported allocation size\n+       *  @param  __a  An allocator.\n+       *  @return @c __a.max_size()\n+      */\n+      static size_type\n+      max_size(const allocator_type& __a) noexcept\n+      { return __a.max_size(); }\n+\n+      /**\n+       *  @brief  Obtain an allocator to use when copying a container.\n+       *  @param  __rhs  An allocator.\n+       *  @return @c __rhs\n+      */\n+      static allocator_type\n+      select_on_container_copy_construction(const allocator_type& __rhs)\n+      { return __rhs; }\n+    };\n+\n+\n   template<typename _Alloc>\n     inline void\n     __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)"}, {"sha": "2dc3b0cd0d4ec8b9d2891f3598021680204b7939", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/58659.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1517bc3008cf520c08760a8dba884237104e9d1a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F58659.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1517bc3008cf520c08760a8dba884237104e9d1a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F58659.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F58659.cc?ref=1517bc3008cf520c08760a8dba884237104e9d1a", "patch": "@@ -51,6 +51,14 @@ namespace std\n         allocated = false;\n       }\n \n+      template<typename _Up, typename... _Args>\n+        void construct(_Up* __p, _Args&&... __args)\n+        { ::new(__p) _Up(std::forward<_Args>(__args)...); }\n+\n+      template<typename _Up>\n+        void destroy(_Up* __p)\n+        { __p->~_Up(); }\n+\n       static char storage[sizeof(spcd)];\n       static bool allocated;\n     };"}]}