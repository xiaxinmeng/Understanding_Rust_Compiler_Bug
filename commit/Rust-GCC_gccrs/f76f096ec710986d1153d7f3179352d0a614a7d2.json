{"sha": "f76f096ec710986d1153d7f3179352d0a614a7d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc2ZjA5NmVjNzEwOTg2ZDExNTNkN2YzMTc5MzUyZDBhNjE0YTdkMg==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2017-01-03T08:54:57Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-01-03T08:54:57Z"}, "message": "DWARF: add DW_AT_encoding attributes for DW_TAG_enumeration_type DIEs\n\nCurrently, the DWARF description does not specify the signedness of the\nrepresentation of enumeration types.  This is a problem in some\ncontexts where DWARF consumers need to determine if value X is greater\nthan value Y.\n\nFor instance in Ada:\n\n    type Enum_Type is ( A, B, C, D);\n    for Enum_Type use (-1, 0, 1, 2);\n\n    type Rec_Type (E : Enum_Type) is record\n       when A .. B => null;\n       when others => B : Booleann;\n    end record;\n\nThe above can be described in DWARF the following way:\n\n    DW_TAG_enumeration_type(Enum_Type)\n    | DW_AT_byte_size: 1\n      DW_TAG_enumerator(A)\n      | DW_AT_const_value: -1\n      DW_TAG_enumerator(B)\n      | DW_AT_const_value: 0\n      DW_TAG_enumerator(C)\n      | DW_AT_const_value: 1\n      DW_TAG_enumerator(D)\n      | DW_AT_const_value: 2\n\n    DW_TAG_structure_type(Rec_Type)\n      DW_TAG_member(E)\n      | DW_AT_type: <Enum_Type>\n      DW_TAG_variant_part\n      | DW_AT_discr: <E>\n        DW_TAG_variant\n        | DW_AT_discr_list: DW_DSC_range 0x7f 0\n        DW_TAG_variant\n        | DW_TAG_member(b)\n\nDWARF consumers need to know that enumerators (A, B, C and D) are signed\nin order to determine the set of E values for which Rec_Type has a B\nfield.  In practice, they need to know how to interpret the 0x7f LEB128\nnumber above (-1, not 127).\n\nWhen in non-strict DWARF mode, this patch adds a DW_AT_encoding\nattribute to generated DW_TAG_enumeration_type DIEs to make this\nsignedness explicit.\n\ngcc/\n\n\t* dwarf2out.c (gen_enumeration_type_die): When\n\t-gno-strict-dwarf, add a DW_AT_encoding attribute.\n\nFrom-SVN: r244015", "tree": {"sha": "2edda5bc25f4d7c3051a2d55a4bc670f4457686b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2edda5bc25f4d7c3051a2d55a4bc670f4457686b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f76f096ec710986d1153d7f3179352d0a614a7d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76f096ec710986d1153d7f3179352d0a614a7d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f76f096ec710986d1153d7f3179352d0a614a7d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76f096ec710986d1153d7f3179352d0a614a7d2/comments", "author": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51ad5d5ba376c1eaf76fee8e2457b8bfb9b000c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51ad5d5ba376c1eaf76fee8e2457b8bfb9b000c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51ad5d5ba376c1eaf76fee8e2457b8bfb9b000c1"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "2182cff225d9dc6cd81f255fe7254c561ad864f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76f096ec710986d1153d7f3179352d0a614a7d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76f096ec710986d1153d7f3179352d0a614a7d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f76f096ec710986d1153d7f3179352d0a614a7d2", "patch": "@@ -1,3 +1,8 @@\n+2017-01-03  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* dwarf2out.c (gen_enumeration_type_die): When\n+\t-gno-strict-dwarf, add a DW_AT_encoding attribute.\n+\n 2017-01-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/78965"}, {"sha": "15b9a30a3072f2393a657f9429ee96b55a2794ec", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76f096ec710986d1153d7f3179352d0a614a7d2/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76f096ec710986d1153d7f3179352d0a614a7d2/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=f76f096ec710986d1153d7f3179352d0a614a7d2", "patch": "@@ -20930,6 +20930,11 @@ gen_enumeration_type_die (tree type, dw_die_ref context_die)\n \t  if (ENUM_IS_OPAQUE (type))\n \t    add_AT_flag (type_die, DW_AT_declaration, 1);\n \t}\n+      if (!dwarf_strict)\n+\tadd_AT_unsigned (type_die, DW_AT_encoding,\n+\t\t\t TYPE_UNSIGNED (type)\n+\t\t\t ? DW_ATE_unsigned\n+\t\t\t : DW_ATE_signed);\n     }\n   else if (! TYPE_SIZE (type))\n     return type_die;"}]}