{"sha": "5e3ee346c19d60d8f62194d85a846927b0a39b57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUzZWUzNDZjMTlkNjBkOGY2MjE5NGQ4NWE4NDY5MjdiMGEzOWI1Nw==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2016-06-08T17:02:24Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2016-06-08T17:02:24Z"}, "message": "[PATCH 2/2][AArch64] Tests of AAPCS64 updates for alignment attribute\n\ngcc/testsuite/\n\n\t* gcc.target/aarch64/aapcs64/aapcs64.exp: Also execute rec_*.c\n\t* gcc.target/aarch64/aapcs64/rec_align-5.c: New.\n\t* gcc.target/aarch64/aapcs64/rec_align-6.c: New.\n\t* gcc.target/aarch64/aapcs64/rec_align-7.c: New.\n\t* gcc.target/aarch64/aapcs64/rec_align-8.c: New.\n\t* gcc.target/aarch64/aapcs64/rec_align-9.c: New.\n\t* gcc.target/aarch64/aapcs64/test_align-5.c: New.\n\t* gcc.target/aarch64/aapcs64/test_align-6.c: New.\n\t* gcc.target/aarch64/aapcs64/test_align-7.c: New.\n\t* gcc.target/aarch64/aapcs64/test_align-8.c: New.\n\t* gcc.target/aarch64/aapcs64/test_align-9.c: New.\n\t* gcc.target/aarch64/aapcs64/rec_vaarg-1.c: New.\n\t* gcc.target/aarch64/aapcs64/rec_vaarg-2.c: New.\n\nFrom-SVN: r237225", "tree": {"sha": "2a5f59ceaf492f51bbf0fc2b5c95117bc31540ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a5f59ceaf492f51bbf0fc2b5c95117bc31540ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e3ee346c19d60d8f62194d85a846927b0a39b57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e3ee346c19d60d8f62194d85a846927b0a39b57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e3ee346c19d60d8f62194d85a846927b0a39b57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e3ee346c19d60d8f62194d85a846927b0a39b57/comments", "author": null, "committer": null, "parents": [{"sha": "75d6cc81939b5e5d0698f9ad559233ba8c65e657", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75d6cc81939b5e5d0698f9ad559233ba8c65e657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75d6cc81939b5e5d0698f9ad559233ba8c65e657"}], "stats": {"total": 495, "additions": 495, "deletions": 0}, "files": [{"sha": "93062fd78ef0c5a39b51b64421069bdae9e06012", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5e3ee346c19d60d8f62194d85a846927b0a39b57", "patch": "@@ -1,3 +1,19 @@\n+2016-06-08  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gcc.target/aarch64/aapcs64/aapcs64.exp: Also execute rec_*.c\n+\t* gcc.target/aarch64/aapcs64/rec_align-5.c: New.\n+\t* gcc.target/aarch64/aapcs64/rec_align-6.c: New.\n+\t* gcc.target/aarch64/aapcs64/rec_align-7.c: New.\n+\t* gcc.target/aarch64/aapcs64/rec_align-8.c: New.\n+\t* gcc.target/aarch64/aapcs64/rec_align-9.c: New.\n+\t* gcc.target/aarch64/aapcs64/test_align-5.c: New.\n+\t* gcc.target/aarch64/aapcs64/test_align-6.c: New.\n+\t* gcc.target/aarch64/aapcs64/test_align-7.c: New.\n+\t* gcc.target/aarch64/aapcs64/test_align-8.c: New.\n+\t* gcc.target/aarch64/aapcs64/test_align-9.c: New.\n+\t* gcc.target/aarch64/aapcs64/rec_vaarg-1.c: New.\n+\t* gcc.target/aarch64/aapcs64/rec_vaarg-2.c: New.\n+\n 2016-06-08  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/68558"}, {"sha": "9998d0bda23c12b25e72aaa02714df08ae84ef3c", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/aapcs64.exp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Faapcs64.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Faapcs64.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Faapcs64.exp?ref=5e3ee346c19d60d8f62194d85a846927b0a39b57", "patch": "@@ -38,6 +38,16 @@ foreach src [lsort [glob -nocomplain $srcdir/$subdir/test_*.c]] {\n     }\n }\n \n+# Test parameter receiving.\n+set additional_flags_for_rec $additional_flags\n+append additional_flags_for_rec \" -fno-inline\"\n+foreach src [lsort [glob -nocomplain $srcdir/$subdir/rec_*.c]] {\n+    if {[runtest_file_p $runtests $src]} {\n+\t    c-torture-execute [list $src] \\\n+\t\t\t\t    $additional_flags_for_rec\n+    }\n+}\n+\n # Test unnamed argument retrieval via the va_arg macro.\n foreach src [lsort [glob -nocomplain $srcdir/$subdir/va_arg-*.c]] {\n     if {[runtest_file_p $runtests $src]} {"}, {"sha": "1b42c92ae59980baf4456360ffcb354dbd199fb0", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/rec_align-5.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Frec_align-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Frec_align-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Frec_align-5.c?ref=5e3ee346c19d60d8f62194d85a846927b0a39b57", "patch": "@@ -0,0 +1,44 @@\n+/* Test AAPCS layout (alignment) for callee.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+extern void abort (void);\n+\n+typedef __attribute__ ((__aligned__ (8))) int alignedint;\n+\n+alignedint a = 11;\n+alignedint b = 13;\n+alignedint c = 17;\n+alignedint d = 19;\n+alignedint e = 23;\n+alignedint f = 29;\n+alignedint g = 31;\n+alignedint h = 37;\n+alignedint i = 41;\n+alignedint j = 43;\n+\n+void\n+test_passing_many_alignedint (alignedint x0, alignedint x1, alignedint x2,\n+\t\t\t      alignedint x3, alignedint x4, alignedint x5,\n+\t\t\t      alignedint x6, alignedint x7, alignedint stack,\n+\t\t\t      alignedint stack8)\n+{\n+  if (x0 != a\n+      || x1 != b\n+      || x2 != c\n+      || x3 != d\n+      || x4 != e\n+      || x5 != f\n+      || x6 != g\n+      || x7 != h\n+      || stack != i\n+      || stack8 !=j)\n+    abort ();\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  test_passing_many_alignedint (a, b, c, d, e, f, g, h, i, j);\n+  return 0;\n+}"}, {"sha": "a8d8b1bd1cbf6ee9f952762f410b1dec7e03c715", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/rec_align-6.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Frec_align-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Frec_align-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Frec_align-6.c?ref=5e3ee346c19d60d8f62194d85a846927b0a39b57", "patch": "@@ -0,0 +1,45 @@\n+/* Test AAPCS layout (alignment) for callee.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+extern int memcmp (const void *s1, const void *s2, __SIZE_TYPE__ n);\n+extern void abort (void);\n+\n+/* The underlying struct here has alignment 8.  */\n+typedef struct __attribute__ ((__aligned__ (16)))\n+  {\n+    long x;\n+    long y;\n+  } overaligned;\n+\n+overaligned a = { 2, 3 };\n+overaligned b = { 5, 8 };\n+overaligned c = { 13, 21 };\n+\n+void\n+test_passing_overaligned_struct (int x0, overaligned x1, int x3, int x4,\n+\t\t\t\t overaligned x5, int x7, int stack,\n+\t\t\t\t overaligned stack8)\n+{\n+  if (x0 != 7 || x3 != 9 || x4 != 11 || x7 != 15 || stack != 10)\n+    abort ();\n+  if (memcmp ((void *) &x1, (void *)&a, sizeof (overaligned)))\n+    abort ();\n+  if (memcmp ((void *) &x5, (void *)&b, sizeof (overaligned)))\n+    abort ();\n+  if (memcmp ((void *)&stack8, (void *)&c, sizeof (overaligned)))\n+    abort ();\n+  long addr = ((long) &stack8) & 15;\n+  if (addr != 0)\n+    {\n+      __builtin_printf (\"Alignment was %d\\n\", addr);\n+      abort ();\n+    }\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  test_passing_overaligned_struct (7, a, 9, 11, b, 15, 10, c);\n+  return 0;\n+}"}, {"sha": "61e3c118183d23e029c1fac6553055fd97ca5768", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/rec_align-7.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Frec_align-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Frec_align-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Frec_align-7.c?ref=5e3ee346c19d60d8f62194d85a846927b0a39b57", "patch": "@@ -0,0 +1,47 @@\n+/* Test AAPCS layout (alignment) for callee.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+extern int memcmp (const void *s1, const void *s2, __SIZE_TYPE__ n);\n+extern void abort (void);\n+\n+struct s\n+  {\n+    long x;\n+    long y;\n+  };\n+\n+/* This still has size 16, so is still passed by value.  */\n+typedef __attribute__ ((__aligned__ (32))) struct s overaligned;\n+\n+/* A few structs, at 32-byte-aligned memory locations.  */\n+overaligned a = { 2, 3 };\n+overaligned b = { 5, 8 };\n+overaligned c = { 13, 21 };\n+\n+void\n+test_pass_by_value (int x0, overaligned x1, int x3, int x4, overaligned x5,\n+\t\t    int x7, int stack, overaligned stack8)\n+{\n+  if (x0 != 7 || x3 != 9 || x4 != 11 || x7 != 15 || stack != 10)\n+    abort ();\n+  if (memcmp ((void *) &x1, (void *)&a, sizeof (overaligned)))\n+    abort ();\n+  if (memcmp ((void *) &x5, (void *)&b, sizeof (overaligned)))\n+    abort ();\n+  if (memcmp ((void *)&stack8, (void *)&c, sizeof (overaligned)))\n+    abort ();\n+  long addr = ((long) &stack8) & 15;\n+  if (addr != 0)\n+    {\n+      __builtin_printf (\"Alignment was %d\\n\", addr);\n+      abort ();\n+    }\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  test_pass_by_value (7, a, 9, 11, b, 15, 10, c);\n+  return 0;\n+}"}, {"sha": "c9351802191ae5f88df03c3ec5e324d8dcb54795", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/rec_align-8.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Frec_align-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Frec_align-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Frec_align-8.c?ref=5e3ee346c19d60d8f62194d85a846927b0a39b57", "patch": "@@ -0,0 +1,37 @@\n+/* Test AAPCS layout (alignment) for callee.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+extern int memcmp (const void *s1, const void *s2, __SIZE_TYPE__ n);\n+extern void abort (void);\n+\n+/* The alignment also gives this size 32, so will be passed by reference.  */\n+typedef struct __attribute__ ((__aligned__ (32)))\n+  {\n+    long x;\n+    long y;\n+  } overaligned;\n+\n+overaligned a = { 2, 3 };\n+\n+void\n+test_pass_by_ref (int x0, overaligned x1, int x2)\n+{\n+  if (x0 != 7 || x2 != 9)\n+    abort ();\n+  if (memcmp ((void *) &x1, (void *)&a, sizeof (overaligned)))\n+    abort ();\n+  long addr = ((long) &x1) & 31;\n+  if (addr != 0)\n+    {\n+      __builtin_printf (\"Alignment was %d\\n\", addr);\n+      abort ();\n+    }\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  test_pass_by_ref (7, a, 9);\n+  return 0;\n+}"}, {"sha": "81139f58269028c2034d63b64a32d707a68c36ec", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/rec_align-9.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Frec_align-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Frec_align-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Frec_align-9.c?ref=5e3ee346c19d60d8f62194d85a846927b0a39b57", "patch": "@@ -0,0 +1,41 @@\n+/* Test AAPCS layout (alignment) for callee.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+extern int memcmp (const void *s1, const void *s2, __SIZE_TYPE__ n);\n+extern void abort (void);\n+\n+struct s\n+  {\n+    /* This forces the alignment and size of the struct to 16.  */\n+    __attribute__ ((__aligned__ (16))) long x;\n+    int y;\n+    /* 4 bytes padding.  */\n+  };\n+\n+typedef struct s __attribute__ ((__aligned__ (8))) underaligned;\n+\n+underaligned a = { 1, 4 };\n+underaligned b = { 9, 16 };\n+underaligned c = { 25, 36 };\n+\n+void\n+test_underaligned_struct (int x0, underaligned x2, int x4, underaligned x6,\n+\t\t\t  int stack, underaligned stack16)\n+{\n+  if (x0 != 3 || x4 != 5 || stack != 7)\n+    abort ();\n+  if (memcmp ((void *) &x2, (void *)&a, sizeof (underaligned)))\n+    abort ();\n+  if (memcmp ((void *)&x6, (void *)&b, sizeof (underaligned)))\n+    abort ();\n+  if (memcmp ((void *)&stack16, (void *)&c, sizeof (underaligned)))\n+    abort ();\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  test_underaligned_struct (3, a, 5, b, 7, c);\n+  return 0;\n+}"}, {"sha": "109ddc214e5f4922c7b5609e1967a19fdf53e93c", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/rec_align_vaarg-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Frec_align_vaarg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Frec_align_vaarg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Frec_align_vaarg-1.c?ref=5e3ee346c19d60d8f62194d85a846927b0a39b57", "patch": "@@ -0,0 +1,38 @@\n+/* Test AAPCS layout (alignment of varargs) for callee.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#include <stdarg.h>\n+\n+extern void abort (void);\n+\n+typedef __attribute__ ((__aligned__ (16))) long alignedlong;\n+\n+void\n+test_pass_overaligned_long_vaargs (long l, ...)\n+{\n+  va_list va;\n+  va_start (va, l);\n+  /* Arguments should be passed in the same registers as if they were ints.  */\n+  while (l-- > 0)\n+    if (va_arg (va, long) != l)\n+      abort ();\n+  va_end (va);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  alignedlong a = 9;\n+  alignedlong b = 8;\n+  alignedlong c = 7;\n+  alignedlong d = 6;\n+  alignedlong e = 5;\n+  alignedlong f = 4;\n+  alignedlong g = 3;\n+  alignedlong h = 2;\n+  alignedlong i = 1;\n+  alignedlong j = 0;\n+  test_pass_overaligned_long_vaargs (a, b, c, d, e, f, g, h, i, j);\n+  return 0;\n+}"}, {"sha": "dc4eb2fb382ef59d614488187bd772c355b8bf93", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/rec_align_vaarg-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Frec_align_vaarg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Frec_align_vaarg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Frec_align_vaarg-2.c?ref=5e3ee346c19d60d8f62194d85a846927b0a39b57", "patch": "@@ -0,0 +1,28 @@\n+/* Test AAPCS layout (alignment of varargs) for callee.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#include <stdarg.h>\n+\n+extern void abort (void);\n+\n+typedef __attribute__ ((__aligned__ (16))) int alignedint;\n+\n+void\n+test_pass_overaligned_int_vaargs (int i, ...)\n+{\n+  va_list va;\n+  va_start (va, i);\n+  /* alignedint should be pulled out of regs/stack just like an int.  */\n+  while (i-- > 0)\n+    if (va_arg (va, alignedint) != i)\n+      abort ();\n+  va_end (va);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  test_pass_overaligned_int_vaargs (9, 8, 7, 6, 5, 4, 3, 2, 1, 0);\n+  return 0;\n+}"}, {"sha": "ac5673ee5c90514364033dc5ac8a0e2ed34f04a1", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_align-5.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-5.c?ref=5e3ee346c19d60d8f62194d85a846927b0a39b57", "patch": "@@ -0,0 +1,35 @@\n+/* Test AAPCS layout (alignment).  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_align-5.c\"\n+\n+typedef __attribute__ ((__aligned__ (16))) long alignedint;\n+\n+alignedint a = 11;\n+alignedint b = 13;\n+alignedint c = 17;\n+alignedint d = 19;\n+alignedint e = 23;\n+alignedint f = 29;\n+alignedint g = 31;\n+alignedint h = 37;\n+alignedint i = 41;\n+alignedint j = 43;\n+\n+#include \"abitest.h\"\n+#else\n+  ARG (alignedint, a, X0)\n+  /* Attribute suggests R2, but we should use only natural alignment:  */\n+  ARG (alignedint, b, X1)\n+  ARG (alignedint, c, X2)\n+  ARG (alignedint, d, X3)\n+  ARG (alignedint, e, X4)\n+  ARG (alignedint, f, X5)\n+  ARG (alignedint, g, X6)\n+  ARG (alignedint, h, X7)\n+  ARG (alignedint, i, STACK)\n+  /* Attribute would suggest STACK + 16 but should be ignored:  */\n+  LAST_ARG (alignedint, j, STACK + 8)\n+#endif"}, {"sha": "20cbd94193906d867cb9046661b097924aa932a8", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_align-6.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-6.c?ref=5e3ee346c19d60d8f62194d85a846927b0a39b57", "patch": "@@ -0,0 +1,36 @@\n+/* Test AAPCS layout (alignment).  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_align-6.c\"\n+\n+/* The underlying struct here has alignment 8.  */\n+typedef struct __attribute__ ((__aligned__ (16)))\n+  {\n+    long x;\n+    long y;\n+  } overaligned;\n+\n+/* A couple of instances, at 16-byte-aligned memory locations.  */\n+overaligned a = { 2, 3 };\n+overaligned b = { 5, 8 };\n+overaligned c = { 13, 21 };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG (int, 7, W0)\n+  /* Natural alignment should be 8.  */\n+  ARG (overaligned, a, X1)\n+  ARG (int, 9, W3)\n+  ARG (int, 11, W4)\n+  ARG (overaligned, b, X5)\n+  ARG (int, 15, W7)\n+#ifndef __AAPCS64_BIG_ENDIAN__\n+  ARG (int, 10, STACK)\n+#else\n+  ARG (int, 10, STACK + 4)\n+#endif\n+  /* Natural alignment should be 8.  */\n+  LAST_ARG (overaligned, c, STACK + 8)\n+#endif"}, {"sha": "6af422f27e57882331960fb2eda6260df0f07458", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_align-7.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-7.c?ref=5e3ee346c19d60d8f62194d85a846927b0a39b57", "patch": "@@ -0,0 +1,38 @@\n+/* Test AAPCS layout (alignment).  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_align-7.c\"\n+\n+struct s\n+  {\n+    long x;\n+    long y;\n+  };\n+\n+/* This still has size 16, so is still passed by value.  */\n+typedef __attribute__ ((__aligned__ (32))) struct s overaligned;\n+\n+/* A few structs, at 32-byte-aligned memory locations.  */\n+overaligned a = { 2, 3 };\n+overaligned b = { 5, 8 };\n+overaligned c = { 13, 21 };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG (int, 7, W0)\n+  /* Alignment should be 8.  */\n+  ARG (overaligned, a, X1)\n+  ARG (int, 9, W3)\n+  ARG (int, 11, W4)\n+  ARG (overaligned, b, X5)\n+  ARG (int, 15, W7)\n+#ifndef __AAPCS64_BIG_ENDIAN__\n+  ARG (int, 10, STACK)\n+#else\n+  ARG (int, 10, STACK + 4)\n+#endif\n+  /* Natural alignment should be 8.  */\n+  LAST_ARG (overaligned, c, STACK + 8)\n+#endif"}, {"sha": "ad4dfe4b62ce20e08e6a79280bb9e51623ad11c3", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_align-8.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-8.c?ref=5e3ee346c19d60d8f62194d85a846927b0a39b57", "patch": "@@ -0,0 +1,33 @@\n+/* Test AAPCS layout (alignment).  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_align-8.c\"\n+\n+/* The alignment also gives this size 32, so will be passed by reference.  */\n+typedef struct __attribute__ ((__aligned__ (32)))\n+  {\n+    long x;\n+    long y;\n+  } overaligned;\n+\n+#define EXPECTED_STRUCT_SIZE 32\n+extern void link_failure (void);\n+int\n+foo ()\n+{\n+  /* Optimization gets rid of this before linking.  */\n+  if (sizeof (overaligned) != EXPECTED_STRUCT_SIZE)\n+    link_failure ();\n+}\n+\n+overaligned a = { 2, 3 };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG (int, 7, W0)\n+  /* Alignment should be 8.  */\n+  PTR (overaligned, a, X1)\n+  LAST_ARG (int, 9, W2)\n+#endif"}, {"sha": "0f5fa352a91513bb9587bb2747ccd23c34f7cbf2", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_align-9.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e3ee346c19d60d8f62194d85a846927b0a39b57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-9.c?ref=5e3ee346c19d60d8f62194d85a846927b0a39b57", "patch": "@@ -0,0 +1,47 @@\n+/* Test AAPCS layout (alignment).  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_align-9.c\"\n+\n+struct s\n+  {\n+    /* This forces the alignment and size of the struct to 16.  */\n+    __attribute__ ((__aligned__ (16))) long x;\n+    int y;\n+    /* 4 bytes padding.  */\n+  };\n+\n+typedef struct s __attribute__ ((__aligned__ (8))) underaligned;\n+\n+#define EXPECTED_STRUCT_SIZE 16\n+extern void link_failure (void);\n+int\n+foo ()\n+{\n+  /* Optimization gets rid of this before linking.  */\n+  if (sizeof (struct s) != EXPECTED_STRUCT_SIZE)\n+    link_failure ();\n+}\n+\n+underaligned a = { 1, 4 };\n+underaligned b = { 9, 16 };\n+underaligned c = { 25, 36 };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG (int, 3, W0)\n+  /* Object alignment is 16, so skip X1.  */\n+  ARG (underaligned, a, X2)\n+  ARG (int, 5, W4)\n+  /* Object alignment is 16, so skip X5.  */\n+  ARG (underaligned, b, X6)\n+#ifndef __AAPCS64_BIG_ENDIAN__\n+  ARG (int, 7, STACK)\n+#else\n+  ARG (int, 7, STACK + 4)\n+#endif\n+  /* Natural alignment should be 16.  */\n+  LAST_ARG (underaligned, c, STACK + 16)\n+#endif"}]}