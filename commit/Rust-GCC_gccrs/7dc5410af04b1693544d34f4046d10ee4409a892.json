{"sha": "7dc5410af04b1693544d34f4046d10ee4409a892", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RjNTQxMGFmMDRiMTY5MzU0NGQzNGY0MDQ2ZDEwZWU0NDA5YTg5Mg==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@mips.com", "date": "2018-04-26T21:01:31Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@gcc.gnu.org", "date": "2018-04-26T21:01:31Z"}, "message": "MIPS/GCC/testsuite: Fix data-sym-pool.c for SVR4 model at -O0\n\nWith GCC configurations using the SVR4 rather than the PLT dynamic \nexecutable model and the o32 ABI with the data-sym-pool.c test case code \nlike below is produced:\n\n\t.file\t1 \"data-sym-pool.c\"\n\t.section .mdebug.abi32\n\t.previous\n\t.nan\tlegacy\n\t.module\tfp=xx\n\t.module\tnooddspreg\n\t.abicalls\n\t.text\n\t.align\t2\n\t.globl\tfrob\n\t.set\tmips16\n\t.set\tnomicromips\n\t.ent\tfrob\n\t.type\tfrob, @function\nfrob:\n\t.frame\t$17,8,$31\t\t# vars= 0, regs= 1/0, args= 0, gp= 0\n\t.mask\t0x00020000,-4\n\t.fmask\t0x00000000,0\n\tsave\t8,$17\n\tmove\t$17,$sp\n\tlw\t$2,$L4\n\tmove\t$sp,$17\n\trestore\t8,$17\n\tjr\t$31\n\t.type\t__pool_frob_3, @object\n__pool_frob_3:\n\t.align\t2\n$L3:\n\t.word\t__gnu_local_gp\n$L4:\n\t.word\t305419896\n\t.type\t__pend_frob_3, @function\n__pend_frob_3:\n\t.insn\n\t.end\tfrob\n\t.size\tfrob, .-frob\n\t.ident\t\"GCC: (GNU) 8.0.1 20180410 (experimental)\"\n\ncausing a failure due to the unexpected `__gnu_local_gp' entry in the \nconstant pool, even though there is nothing wrong with it as far as the \nannotation being examined is concerned.\n\nGiven that the SVR4 vs PLT code model consideration is irrelevant for \nthis test case rather than rewriting the regular expression to match \nthis variant of code just enforce the PLT model by using the `-mplt' \noption.  It is safe to use this option unconditionally as it is silently \nignored with configurations that do not support this model, e.g. bare \nmetal ELF.\n\n\tgcc/testsuite/\n\t* gcc.target/mips/data-sym-pool.c (dg-options): Add `-mplt'.\n\nFrom-SVN: r259690", "tree": {"sha": "b6dbf1cc7196d214d503d8416d8ed5260d6870b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6dbf1cc7196d214d503d8416d8ed5260d6870b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dc5410af04b1693544d34f4046d10ee4409a892", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc5410af04b1693544d34f4046d10ee4409a892", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dc5410af04b1693544d34f4046d10ee4409a892", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc5410af04b1693544d34f4046d10ee4409a892/comments", "author": null, "committer": null, "parents": [{"sha": "128d29a52fcd9097c1e809c675dadd108f8dd604", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/128d29a52fcd9097c1e809c675dadd108f8dd604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/128d29a52fcd9097c1e809c675dadd108f8dd604"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "fc0d3dcb9c38fa8a75d144be292ac91e91337d38", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc5410af04b1693544d34f4046d10ee4409a892/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc5410af04b1693544d34f4046d10ee4409a892/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7dc5410af04b1693544d34f4046d10ee4409a892", "patch": "@@ -1,3 +1,7 @@\n+2018-04-26  Maciej W. Rozycki  <macro@mips.com>\n+\n+\t* gcc.target/mips/data-sym-pool.c (dg-options): Add `-mplt'.\n+\n 2018-04-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/loop_optimization24.adb: New test."}, {"sha": "c73c8adb9caf23704068e91afd6a03da0a9547c9", "filename": "gcc/testsuite/gcc.target/mips/data-sym-pool.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc5410af04b1693544d34f4046d10ee4409a892/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdata-sym-pool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc5410af04b1693544d34f4046d10ee4409a892/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdata-sym-pool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdata-sym-pool.c?ref=7dc5410af04b1693544d34f4046d10ee4409a892", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mips16 -mcode-readable=yes\" } */\n+/* { dg-options \"-mips16 -mcode-readable=yes -mplt\" } */\n \n int\n frob (void)\n@@ -20,6 +20,10 @@ __pool_frob_3:\t\t\t\t\t# The symbol must match.\n __pend_frob_3:\t\t\t\t\t# The symbol must match.\n \t.insn\n \n-   that is `__pool_*'/`__pend_*' symbols inserted around a constant pool.  */\n+   that is `__pool_*'/`__pend_*' symbols inserted around a constant pool.\n+\n+   This code is built with `-mplt' to prevent the special `__gnu_local_gp'\n+   symbol from being placed in the constant pool at `-O0' for SVR4 code\n+   and consequently interfering with test expectations.  */\n \n /* { dg-final { scan-assembler \"\\tlw\\t\\\\\\$\\[0-9\\]+,(.L(\\[0-9\\]+))\\n.*\\t\\\\.type\\t(__pool_frob_\\\\2), @object\\n\\\\3:\\n\\t\\\\.align\\t2\\n\\\\1:\\n\\t\\\\.word\\t305419896\\n\\t\\\\.type\\t(__pend_frob_\\\\2), @function\\n\\\\4:\\n\\t\\\\.insn\\n\" } } */"}]}