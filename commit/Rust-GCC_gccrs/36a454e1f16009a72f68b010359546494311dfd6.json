{"sha": "36a454e1f16009a72f68b010359546494311dfd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZhNDU0ZTFmMTYwMDlhNzJmNjhiMDEwMzU5NTQ2NDk0MzExZGZkNg==", "commit": {"author": {"name": "Fariborz Jahanian", "email": "fjahanian@apple.com", "date": "2004-05-07T23:00:39Z"}, "committer": {"name": "Fariborz Jahanian", "email": "fjahanian@gcc.gnu.org", "date": "2004-05-07T23:00:39Z"}, "message": "Fixed altivec vararg problem.\n\nApproved by Aldy Hernandez.\n\nFrom-SVN: r81635", "tree": {"sha": "ecc49c97cb25d4d041edf7a2be45ee073cf8b323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecc49c97cb25d4d041edf7a2be45ee073cf8b323"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36a454e1f16009a72f68b010359546494311dfd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36a454e1f16009a72f68b010359546494311dfd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36a454e1f16009a72f68b010359546494311dfd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36a454e1f16009a72f68b010359546494311dfd6/comments", "author": null, "committer": null, "parents": [{"sha": "f7dbd2895e0b726e86cc0745815209a014e27f99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7dbd2895e0b726e86cc0745815209a014e27f99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7dbd2895e0b726e86cc0745815209a014e27f99"}], "stats": {"total": 41, "additions": 35, "deletions": 6}, "files": [{"sha": "f50b1060ab8693398b034612d1bf3adca6c44194", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a454e1f16009a72f68b010359546494311dfd6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a454e1f16009a72f68b010359546494311dfd6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36a454e1f16009a72f68b010359546494311dfd6", "patch": "@@ -1,3 +1,9 @@\n+2004-05-07 Fariborz Jahanian <fjahanian@apple.com>\n+\t* config/rs6000/rs6000.c (rs6000_mixed_function_arg):\n+\tGenerate appropriate parallels for vector arguments\n+\tpassed to vararg functions. (function_arg): make the call\n+\tto rs6000_mixed_function_arg for vector args as needed.\n+\t\n 2004-05-07  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.c (mips_va_arg): Fix calculation of osize for"}, {"sha": "5c82d75c071838bb3fc15792a8119e5e5b69d2c4", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a454e1f16009a72f68b010359546494311dfd6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a454e1f16009a72f68b010359546494311dfd6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=36a454e1f16009a72f68b010359546494311dfd6", "patch": "@@ -4344,8 +4344,28 @@ rs6000_mixed_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t\t\t\t\t\t\t      + align_words),\n \t\t\t\t\t\t const0_rtx)));\n     }\n-  else if (mode == BLKmode && align_words <= (GP_ARG_NUM_REG - 1))\n-    {\n+  else if (ALTIVEC_VECTOR_MODE (mode) && align_words == GP_ARG_NUM_REG - 2)\n+    {\n+      /* Varargs vector regs must be saved in R9-R10.  */\n+      return gen_rtx_PARALLEL (mode,\n+\t   \t\t       gen_rtvec (3,\n+\t\t\t         gen_rtx_EXPR_LIST (VOIDmode,\n+\t\t\t\t\t\t     NULL_RTX, const0_rtx),\n+\t\t\t         gen_rtx_EXPR_LIST (VOIDmode,\n+\t\t\t\t\t\t    gen_rtx_REG (SImode,\n+\t\t\t\t\t\t\t         GP_ARG_MIN_REG\n+\t\t\t\t\t\t\t         + align_words),\n+\t\t\t\t\t\t    const0_rtx),\n+\t\t\t         gen_rtx_EXPR_LIST (VOIDmode,\n+\t\t\t\t\t\t    gen_rtx_REG (SImode,\n+\t\t\t\t\t\t\t         GP_ARG_MIN_REG\n+\t\t\t\t\t\t\t         + align_words + 1),\n+\t\t\t\t\t\t    GEN_INT (4))));\n+    }\n+  else if ((mode == BLKmode || ALTIVEC_VECTOR_MODE (mode))\n+           && align_words <= (GP_ARG_NUM_REG - 1))\n+    {\n+      /* AltiVec vector regs are saved in R5-R8. */\n       int k;\n       int size = int_size_in_bytes (type);\n       int no_units = ((size - 1) / 4) + 1;\n@@ -4362,9 +4382,8 @@ rs6000_mixed_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t\t\t\t\t\t    + align_words + k),\n \t\t\t\t       k == 0 ? const0_rtx : GEN_INT (k*4));\n \n-      return gen_rtx_PARALLEL (BLKmode, gen_rtvec_v (k, rtlvec));\n-  }\n-\n+      return gen_rtx_PARALLEL (mode, gen_rtvec_v (k, rtlvec));\n+    }\n   return NULL_RTX;\n }\n \n@@ -4482,7 +4501,11 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t       is either wholly in GPRs or half in GPRs and half not.  */\n \t    part_mode = DImode;\n \t  \n-\t  return gen_rtx_REG (part_mode, GP_ARG_MIN_REG + align_words);\n+\t  if (TARGET_32BIT\n+\t      && (TARGET_POWERPC64 || (align_words == GP_ARG_NUM_REG - 2)))\n+\t    return rs6000_mixed_function_arg (cum, part_mode, type, align_words);\n+\t  else\n+\t    return gen_rtx_REG (part_mode, GP_ARG_MIN_REG + align_words);\n \t}\n     }\n   else if (TARGET_SPE_ABI && TARGET_SPE && SPE_VECTOR_MODE (mode))"}]}