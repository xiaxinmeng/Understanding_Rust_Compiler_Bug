{"sha": "b3d5bc621f9c7da0bbac965c610ae2a4044e1a68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNkNWJjNjIxZjljN2RhMGJiYWM5NjVjNjEwYWUyYTQwNDRlMWE2OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-12-04T18:04:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-12-04T18:04:06Z"}, "message": "re PR middle-end/68656 (warning about disabled var-tracking uses odd location info)\n\n\tPR c/68656\n\t* toplev.c (init_asm_output): Pass UNKNOWN_LOCATION instead of\n\tinput_location to inform.\n\t(process_options): Use warning_at (UNKNOWN_LOCATION instead of\n\twarning ( and error_at (UNKNOWN_LOCATION instead of error (.\n\tPass UNKNOWN_LOCATION instead of input_location to fatal_error.\n\n\t* gcc.target/i386/pr65044.c: Expect error on line 0 rather than\n\tline 1.\n\t* g++.dg/opt/pr34036.C: Expect warning on line 0 rather than line 1.\n\t* gcc.dg/tree-ssa/pr23109.c: Likewise.\n\t* gcc.dg/tree-ssa/recip-5.c: Likewise.\n\t* gcc.dg/pr33007.c: Likewise.\n\nFrom-SVN: r231292", "tree": {"sha": "d54e8d57bec108ea41968e0e24fe0a0cdeeb6eec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d54e8d57bec108ea41968e0e24fe0a0cdeeb6eec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3d5bc621f9c7da0bbac965c610ae2a4044e1a68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d5bc621f9c7da0bbac965c610ae2a4044e1a68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3d5bc621f9c7da0bbac965c610ae2a4044e1a68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d5bc621f9c7da0bbac965c610ae2a4044e1a68/comments", "author": null, "committer": null, "parents": [{"sha": "88636b62bc7fae0ef7eaac6a22e5cd8107e69be8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88636b62bc7fae0ef7eaac6a22e5cd8107e69be8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88636b62bc7fae0ef7eaac6a22e5cd8107e69be8"}], "stats": {"total": 165, "additions": 109, "deletions": 56}, "files": [{"sha": "5ff2fbf315cb0bfdf2e1a8edf873bd0b2f243cc6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d5bc621f9c7da0bbac965c610ae2a4044e1a68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d5bc621f9c7da0bbac965c610ae2a4044e1a68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3d5bc621f9c7da0bbac965c610ae2a4044e1a68", "patch": "@@ -1,3 +1,12 @@\n+2015-12-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/68656\n+\t* toplev.c (init_asm_output): Pass UNKNOWN_LOCATION instead of\n+\tinput_location to inform.\n+\t(process_options): Use warning_at (UNKNOWN_LOCATION instead of\n+\twarning ( and error_at (UNKNOWN_LOCATION instead of error (.\n+\tPass UNKNOWN_LOCATION instead of input_location to fatal_error.\n+\n 2015-12-04  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-inline.c (can_inline_edge_p) Use merged_comdat.\n@@ -9,11 +18,6 @@\n \t* ipa-inline-analysis.c (simple_edge_hints): Check both merged_comdat\n \tand icf_merged.\n \n-2015-12-04  Paolo Bonzini  <bonzini@gnu.org>\n-\n-\t* c-family/c-common.c (maybe_warn_shift_overflow): Warn on all\n-\toverflows if shifting 1 out of the sign bit.\n-\n 2015-12-04  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* (cstore<mode>4_unsigned): Use gpc_reg_operand instead of\n@@ -186,9 +190,6 @@\n \n 2015-12-04  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n-\t* c-family/c-common.c (c_common_attribute_table[]): Update max arguments\n-\tcount for \"simd\" attribute.\n-\t(handle_simd_attribute): Parse \"notinbranch\" and \"inbranch\" arguments.\n \t* doc/extend.texi (\"simd\"): Describe new flags.\n \n 2015-12-04  Ilya Enkovich  <enkovich.gnu@gmail.com>\n@@ -663,7 +664,6 @@\n \t* tree-ssa-structalias.c (find_func_aliases_for_builtin_call)\n \t(find_func_clobbers, ipa_pta_execute): Handle BUILT_IN_GOACC_PARALLEL.\n \n->>>>>>> .r231221\n 2015-12-02  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md (cstore_si_as_di): New expander.\n@@ -18044,7 +18044,6 @@ broken.\n \n 2015-08-02  Martin Sebor  <msebor@redhat.com>\n \n-\t* c-family/c.opt (-Wframe-address): New warning option.\n \t* doc/invoke.texi (Wframe-address): Document it.\n \t* doc/extend.texi (__builtin_frame_address, __builtin_return_address):\n \tClarify possible effects of calling the functions with non-zero\n@@ -26919,8 +26918,6 @@ broken.\n \n 2015-06-04  Sriraman Tallam  <tmsriram@google.com>\n \n-\t* c-family/c-common.c (noplt): New attribute.\n-\t(handle_noplt_attribute): New handler.\n \t* calls.c (prepare_call_address): Check for noplt\n \tattribute.\n \t* config/i386/i386.c (ix86_expand_call): Check"}, {"sha": "4668ce624b986c4fbe99d756eac499ef0a583556", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d5bc621f9c7da0bbac965c610ae2a4044e1a68/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d5bc621f9c7da0bbac965c610ae2a4044e1a68/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b3d5bc621f9c7da0bbac965c610ae2a4044e1a68", "patch": "@@ -1,3 +1,14 @@\n+2015-12-04  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* c-common.c (maybe_warn_shift_overflow): Warn on all overflows if\n+\tshifting 1 out of the sign bit.\n+\n+2015-12-04  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* c-common.c (c_common_attribute_table[]): Update max arguments\n+\tcount for \"simd\" attribute.\n+\t(handle_simd_attribute): Parse \"notinbranch\" and \"inbranch\" arguments.\n+\n 2015-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/57580\n@@ -256,8 +267,8 @@\n 2015-11-03  Bernd Schmidt <bschmidt@redhat.com>\n \n \tPR c++-common/67882\n-\t* c-family/c-common.h (fold_offsetof_1): Add argument.\n-\t* c-family/c-common.c (fold_offsetof_1): Diagnose more invalid\n+\t* c-common.h (fold_offsetof_1): Add argument.\n+\t* c-common.c (fold_offsetof_1): Diagnose more invalid\n \toffsetof expressions that reference elements past the end of\n \tan array.\n \n@@ -571,6 +582,10 @@\n \t* c-opts.c (set_std_cxx1z): Set flag_concepts.\n \t* c.opt (fconcepts): New.\n \n+2015-08-02  Martin Sebor  <msebor@redhat.com>\n+\n+\t* c.opt (-Wframe-address): New warning option.\n+\n 2015-08-02  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \t* c-indentation.c (should_warn_for_misleading_indentation):\n@@ -720,11 +735,11 @@\n 2015-06-30  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \tImplement N4197 - Adding u8 character literals\n-\t* c-family/c-ada-spec.c (print_ada_macros): Treat CPP_UTF8CHAR like\n+\t* c-ada-spec.c (print_ada_macros): Treat CPP_UTF8CHAR like\n \tCPP_CHAR.\n-\t* c-family/c-common.c (c_parse_error): Print CPP_UTF8CHAR and\n+\t* c-common.c (c_parse_error): Print CPP_UTF8CHAR and\n \tCPP_UTF8CHAR_USERDEF tokens.\n-\t* c-family/c-lex.c (c_lex_with_flags): Treat CPP_UTF8CHAR_USERDEF\n+\t* c-lex.c (c_lex_with_flags): Treat CPP_UTF8CHAR_USERDEF\n \tand CPP_UTF8CHAR tokens.\n \t(lex_charconst): Treat CPP_UTF8CHAR token.\n \n@@ -882,6 +897,11 @@\n \t* c-common.h (c_parse_final_cleanups): New prototype.\n \t* c-opts.c (c_common_parse_file): Call c_parse_final_cleanups.\n \n+2015-06-04  Sriraman Tallam  <tmsriram@google.com>\n+\n+\t* c-common.c (noplt): New attribute.\n+\t(handle_noplt_attribute): New handler.\n+\n 2015-06-04  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* array-notation-common.c: Adjust includes for restructured coretypes.h."}, {"sha": "b7effc3b04a21539124749d130349ab2dc3f9147", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d5bc621f9c7da0bbac965c610ae2a4044e1a68/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d5bc621f9c7da0bbac965c610ae2a4044e1a68/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b3d5bc621f9c7da0bbac965c610ae2a4044e1a68", "patch": "@@ -1,3 +1,13 @@\n+2015-12-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/68656\n+\t* gcc.target/i386/pr65044.c: Expect error on line 0 rather than\n+\tline 1.\n+\t* g++.dg/opt/pr34036.C: Expect warning on line 0 rather than line 1.\n+\t* gcc.dg/tree-ssa/pr23109.c: Likewise.\n+\t* gcc.dg/tree-ssa/recip-5.c: Likewise.\n+\t* gcc.dg/pr33007.c: Likewise.\n+\n 2015-12-04  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* c-c++-common/Wshift-overflow-1.c: Test shifting 1 out of the sign bit."}, {"sha": "f4e18c81481a310fab54a9657abfbe49bf60af96", "filename": "gcc/testsuite/g++.dg/opt/pr34036.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d5bc621f9c7da0bbac965c610ae2a4044e1a68/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr34036.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d5bc621f9c7da0bbac965c610ae2a4044e1a68/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr34036.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr34036.C?ref=b3d5bc621f9c7da0bbac965c610ae2a4044e1a68", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fnon-call-exceptions -ffast-math -fsignaling-nans\" } */\n-/* { dg-warning \"-fassociative-math disabled\" \"\" { target *-*-* } 1 } */\n+/* { dg-warning \"-fassociative-math disabled\" \"\" { target *-*-* } 0 } */\n \n template <class T>\n class ggStaticArray {"}, {"sha": "cdc8c6a549538a18889c6a51edcbd45090671129", "filename": "gcc/testsuite/gcc.dg/pr33007.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d5bc621f9c7da0bbac965c610ae2a4044e1a68/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33007.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d5bc621f9c7da0bbac965c610ae2a4044e1a68/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33007.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33007.c?ref=b3d5bc621f9c7da0bbac965c610ae2a4044e1a68", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O -ffast-math -ftrapping-math\" } */\n-/* { dg-warning \"-fassociative-math disabled\" \"\" { target *-*-* } 1 } */\n+/* { dg-warning \"-fassociative-math disabled\" \"\" { target *-*-* } 0 } */\n \n long\n foo (int i)"}, {"sha": "3ee6b7f1ffa95056d7a427370b75759e5e105873", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr23109.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d5bc621f9c7da0bbac965c610ae2a4044e1a68/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23109.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d5bc621f9c7da0bbac965c610ae2a4044e1a68/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23109.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23109.c?ref=b3d5bc621f9c7da0bbac965c610ae2a4044e1a68", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -funsafe-math-optimizations -ftrapping-math -fdump-tree-recip -fdump-tree-lim2\" } */\n-/* { dg-warning \"-fassociative-math disabled\" \"\" { target *-*-* } 1 } */\n+/* { dg-warning \"-fassociative-math disabled\" \"\" { target *-*-* } 0 } */\n \n double F[2] = { 0., 0. }, e = 0.;\n "}, {"sha": "c45cf2f5769cde6a3b6b7ce84d7be23158f3736d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/recip-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d5bc621f9c7da0bbac965c610ae2a4044e1a68/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frecip-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d5bc621f9c7da0bbac965c610ae2a4044e1a68/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frecip-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frecip-5.c?ref=b3d5bc621f9c7da0bbac965c610ae2a4044e1a68", "patch": "@@ -1,6 +1,6 @@\n /* { dg-options \"-O1 -funsafe-math-optimizations -ftrapping-math -fdump-tree-recip -fdump-tree-optimized\" } */\n /* { dg-do compile } */\n-/* { dg-warning \"-fassociative-math disabled\" \"\" { target *-*-* } 1 } */\n+/* { dg-warning \"-fassociative-math disabled\" \"\" { target *-*-* } 0 } */\n \n /* Test the reciprocal optimizations together with trapping math.  */\n "}, {"sha": "8d3bc9b98b8182def55acaf654d1a60c638b69b5", "filename": "gcc/testsuite/gcc.target/i386/pr65044.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d5bc621f9c7da0bbac965c610ae2a4044e1a68/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65044.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d5bc621f9c7da0bbac965c610ae2a4044e1a68/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65044.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65044.c?ref=b3d5bc621f9c7da0bbac965c610ae2a4044e1a68", "patch": "@@ -1,7 +1,7 @@\n-/* { dg-error \"-fcheck-pointer-bounds is not supported with Address Sanitizer\" } */\n /* { dg-do compile } */\n /* { dg-require-effective-target mpx } */\n /* { dg-options \"-fcheck-pointer-bounds -mmpx -fsanitize=address\" } */\n+/* { dg-error \"-fcheck-pointer-bounds is not supported with Address Sanitizer\" \"\" { target *-*-* } 0 } */\n \n extern int x[];\n "}, {"sha": "6811004108ead8a2c70066bc60f9b244df54a2b1", "filename": "gcc/toplev.c", "status": "modified", "additions": 60, "deletions": 34, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d5bc621f9c7da0bbac965c610ae2a4044e1a68/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d5bc621f9c7da0bbac965c610ae2a4044e1a68/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=b3d5bc621f9c7da0bbac965c610ae2a4044e1a68", "patch": "@@ -904,7 +904,9 @@ init_asm_output (const char *name)\n \t\t\t\t\t\t   NULL);\n \t    }\n \t  else\n-\t    inform (input_location, \"-frecord-gcc-switches is not supported by the current target\");\n+\t    inform (UNKNOWN_LOCATION,\n+\t\t    \"-frecord-gcc-switches is not supported by \"\n+\t\t    \"the current target\");\n \t}\n \n       if (flag_verbose_asm)\n@@ -1214,8 +1216,9 @@ process_options (void)\n \n   if (flag_section_anchors && !target_supports_section_anchors_p ())\n     {\n-      warning (OPT_fsection_anchors,\n-\t       \"this target does not support %qs\", \"-fsection-anchors\");\n+      warning_at (UNKNOWN_LOCATION, OPT_fsection_anchors,\n+\t\t  \"this target does not support %qs\",\n+\t\t  \"-fsection-anchors\");\n       flag_section_anchors = 0;\n     }\n \n@@ -1250,14 +1253,16 @@ process_options (void)\n     {\n       if (targetm.chkp_bound_mode () == VOIDmode)\n \t{\n-\t  error (\"-fcheck-pointer-bounds is not supported for this target\");\n+\t  error_at (UNKNOWN_LOCATION,\n+\t\t    \"-fcheck-pointer-bounds is not supported for this target\");\n \t  flag_check_pointer_bounds = 0;\n \t}\n \n       if (flag_sanitize & SANITIZE_ADDRESS)\n \t{\n-\t  error (\"-fcheck-pointer-bounds is not supported with \"\n-\t\t \"Address Sanitizer\");\n+\t  error_at (UNKNOWN_LOCATION,\n+\t\t    \"-fcheck-pointer-bounds is not supported with \"\n+\t\t    \"Address Sanitizer\");\n \t  flag_check_pointer_bounds = 0;\n \t}\n     }\n@@ -1270,7 +1275,8 @@ process_options (void)\n   if (!abi_version_at_least (2))\n     {\n       /* -fabi-version=1 support was removed after GCC 4.9.  */\n-      error (\"%<-fabi-version=1%> is no longer supported\");\n+      error_at (UNKNOWN_LOCATION,\n+\t\t\"%<-fabi-version=1%> is no longer supported\");\n       flag_abi_version = 2;\n     }\n \n@@ -1297,10 +1303,12 @@ process_options (void)\n   /* Warn about options that are not supported on this machine.  */\n #ifndef INSN_SCHEDULING\n   if (flag_schedule_insns || flag_schedule_insns_after_reload)\n-    warning (0, \"instruction scheduling not supported on this target machine\");\n+    warning_at (UNKNOWN_LOCATION, 0,\n+\t\t\"instruction scheduling not supported on this target machine\");\n #endif\n   if (!DELAY_SLOTS && flag_delayed_branch)\n-    warning (0, \"this target machine does not have delayed branches\");\n+    warning_at (UNKNOWN_LOCATION, 0,\n+\t\t\"this target machine does not have delayed branches\");\n \n   user_label_prefix = USER_LABEL_PREFIX;\n   if (flag_leading_underscore != -1)\n@@ -1313,8 +1321,9 @@ process_options (void)\n \t  user_label_prefix = flag_leading_underscore ? \"_\" : \"\";\n \t}\n       else\n-\twarning (0, \"-f%sleading-underscore not supported on this target machine\",\n-\t\t flag_leading_underscore ? \"\" : \"no-\");\n+\twarning_at (UNKNOWN_LOCATION, 0,\n+\t\t    \"-f%sleading-underscore not supported on this \"\n+\t\t    \"target machine\", flag_leading_underscore ? \"\" : \"no-\");\n     }\n \n   /* If we are in verbose mode, write out the version and maybe all the\n@@ -1350,14 +1359,16 @@ process_options (void)\n       FILE *final_output = fopen (flag_dump_final_insns, \"w\");\n       if (!final_output)\n \t{\n-\t  error (\"could not open final insn dump file %qs: %m\",\n-\t\t flag_dump_final_insns);\n+\t  error_at (UNKNOWN_LOCATION,\n+\t\t    \"could not open final insn dump file %qs: %m\",\n+\t\t    flag_dump_final_insns);\n \t  flag_dump_final_insns = NULL;\n \t}\n       else if (fclose (final_output))\n \t{\n-\t  error (\"could not close zeroed insn dump file %qs: %m\",\n-\t\t flag_dump_final_insns);\n+\t  error_at (UNKNOWN_LOCATION,\n+\t\t    \"could not close zeroed insn dump file %qs: %m\",\n+\t\t    flag_dump_final_insns);\n \t  flag_dump_final_insns = NULL;\n \t}\n     }\n@@ -1392,8 +1403,9 @@ process_options (void)\n     debug_hooks = &dwarf2_lineno_debug_hooks;\n #endif\n   else\n-    error (\"target system does not support the %qs debug format\",\n-\t   debug_type_names[write_symbols]);\n+    error_at (UNKNOWN_LOCATION,\n+\t      \"target system does not support the %qs debug format\",\n+\t      debug_type_names[write_symbols]);\n \n   /* We know which debug output will be used so we can set flag_var_tracking\n      and flag_var_tracking_uninit if the user has not specified them.  */\n@@ -1404,11 +1416,13 @@ process_options (void)\n \t  || flag_var_tracking_uninit == 1)\n         {\n \t  if (debug_info_level < DINFO_LEVEL_NORMAL)\n-\t    warning (0, \"variable tracking requested, but useless unless \"\n-\t\t     \"producing debug info\");\n+\t    warning_at (UNKNOWN_LOCATION, 0,\n+\t\t\t\"variable tracking requested, but useless unless \"\n+\t\t\t\"producing debug info\");\n \t  else\n-\t    warning (0, \"variable tracking requested, but not supported \"\n-\t\t     \"by this debug format\");\n+\t    warning_at (UNKNOWN_LOCATION, 0,\n+\t\t\t\"variable tracking requested, but not supported \"\n+\t\t\t\"by this debug format\");\n \t}\n       flag_var_tracking = 0;\n       flag_var_tracking_uninit = 0;\n@@ -1444,7 +1458,8 @@ process_options (void)\n \n   if (flag_var_tracking_assignments\n       && (flag_selective_scheduling || flag_selective_scheduling2))\n-    warning (0, \"var-tracking-assignments changes selective scheduling\");\n+    warning_at (UNKNOWN_LOCATION, 0,\n+\t\t\"var-tracking-assignments changes selective scheduling\");\n \n   if (flag_tree_cselim == AUTODETECT_VALUE)\n     {\n@@ -1461,39 +1476,46 @@ process_options (void)\n     {\n       aux_info_file = fopen (aux_info_file_name, \"w\");\n       if (aux_info_file == 0)\n-\tfatal_error (input_location, \"can%'t open %s: %m\", aux_info_file_name);\n+\tfatal_error (UNKNOWN_LOCATION,\n+\t\t     \"can%'t open %s: %m\", aux_info_file_name);\n     }\n \n   if (!targetm_common.have_named_sections)\n     {\n       if (flag_function_sections)\n \t{\n-\t  warning (0, \"-ffunction-sections not supported for this target\");\n+\t  warning_at (UNKNOWN_LOCATION, 0,\n+\t\t      \"-ffunction-sections not supported for this target\");\n \t  flag_function_sections = 0;\n \t}\n       if (flag_data_sections)\n \t{\n-\t  warning (0, \"-fdata-sections not supported for this target\");\n+\t  warning_at (UNKNOWN_LOCATION, 0,\n+\t\t      \"-fdata-sections not supported for this target\");\n \t  flag_data_sections = 0;\n \t}\n     }\n \n   if (flag_prefetch_loop_arrays > 0 && !targetm.code_for_prefetch)\n     {\n-      warning (0, \"-fprefetch-loop-arrays not supported for this target\");\n+      warning_at (UNKNOWN_LOCATION, 0,\n+\t\t  \"-fprefetch-loop-arrays not supported for this target\");\n       flag_prefetch_loop_arrays = 0;\n     }\n   else if (flag_prefetch_loop_arrays > 0 && !targetm.have_prefetch ())\n     {\n-      warning (0, \"-fprefetch-loop-arrays not supported for this target (try -march switches)\");\n+      warning_at (UNKNOWN_LOCATION, 0,\n+\t\t  \"-fprefetch-loop-arrays not supported for this target \"\n+\t\t  \"(try -march switches)\");\n       flag_prefetch_loop_arrays = 0;\n     }\n \n   /* This combination of options isn't handled for i386 targets and doesn't\n      make much sense anyway, so don't allow it.  */\n   if (flag_prefetch_loop_arrays > 0 && optimize_size)\n     {\n-      warning (0, \"-fprefetch-loop-arrays is not supported with -Os\");\n+      warning_at (UNKNOWN_LOCATION, 0,\n+\t\t  \"-fprefetch-loop-arrays is not supported with -Os\");\n       flag_prefetch_loop_arrays = 0;\n     }\n \n@@ -1504,7 +1526,9 @@ process_options (void)\n   /* We cannot reassociate if we want traps or signed zeros.  */\n   if (flag_associative_math && (flag_trapping_math || flag_signed_zeros))\n     {\n-      warning (0, \"-fassociative-math disabled; other options take precedence\");\n+      warning_at (UNKNOWN_LOCATION, 0,\n+\t\t  \"-fassociative-math disabled; other options take \"\n+\t\t  \"precedence\");\n       flag_associative_math = 0;\n     }\n \n@@ -1520,7 +1544,8 @@ process_options (void)\n      target already uses a soft frame pointer, the transition is trivial.  */\n   if (!FRAME_GROWS_DOWNWARD && flag_stack_protect)\n     {\n-      warning (0, \"-fstack-protector not supported for this target\");\n+      warning_at (UNKNOWN_LOCATION, 0,\n+\t\t  \"-fstack-protector not supported for this target\");\n       flag_stack_protect = 0;\n     }\n   if (!flag_stack_protect)\n@@ -1531,16 +1556,17 @@ process_options (void)\n   if ((flag_sanitize & SANITIZE_ADDRESS)\n       && !FRAME_GROWS_DOWNWARD)\n     {\n-      warning (0,\n-\t       \"-fsanitize=address and -fsanitize=kernel-address \"\n-\t       \"are not supported for this target\");\n+      warning_at (UNKNOWN_LOCATION, 0,\n+\t\t  \"-fsanitize=address and -fsanitize=kernel-address \"\n+\t\t  \"are not supported for this target\");\n       flag_sanitize &= ~SANITIZE_ADDRESS;\n     }\n \n   if ((flag_sanitize & SANITIZE_USER_ADDRESS)\n       && targetm.asan_shadow_offset == NULL)\n     {\n-      warning (0, \"-fsanitize=address not supported for this target\");\n+      warning_at (UNKNOWN_LOCATION, 0,\n+\t\t  \"-fsanitize=address not supported for this target\");\n       flag_sanitize &= ~SANITIZE_ADDRESS;\n     }\n "}]}