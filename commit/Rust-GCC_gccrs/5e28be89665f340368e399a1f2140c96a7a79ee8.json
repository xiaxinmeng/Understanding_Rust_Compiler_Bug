{"sha": "5e28be89665f340368e399a1f2140c96a7a79ee8", "node_id": "C_kwDOANBUbNoAKDVlMjhiZTg5NjY1ZjM0MDM2OGUzOTlhMWYyMTQwYzk2YTdhNzllZTg", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-03-11T00:16:39Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-03-11T00:16:39Z"}, "message": "Daily bump.", "tree": {"sha": "9b606c193fd8123d6cd8ef8e509a449e625a0248", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b606c193fd8123d6cd8ef8e509a449e625a0248"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e28be89665f340368e399a1f2140c96a7a79ee8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e28be89665f340368e399a1f2140c96a7a79ee8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e28be89665f340368e399a1f2140c96a7a79ee8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e28be89665f340368e399a1f2140c96a7a79ee8/comments", "author": null, "committer": null, "parents": [{"sha": "a717376e99fb33ba3b06bd8122e884f4b63a60c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a717376e99fb33ba3b06bd8122e884f4b63a60c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a717376e99fb33ba3b06bd8122e884f4b63a60c9"}], "stats": {"total": 465, "additions": 464, "deletions": 1}, "files": [{"sha": "485b9beac36f9d06ea80bfd94ee202817cd12345", "filename": "contrib/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e28be89665f340368e399a1f2140c96a7a79ee8/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e28be89665f340368e399a1f2140c96a7a79ee8/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=5e28be89665f340368e399a1f2140c96a7a79ee8", "patch": "@@ -1,3 +1,14 @@\n+2022-03-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR other/102664\n+\t* gcc-git-customization.sh: Fix non-portable commands.\n+\n+2022-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/102664\n+\t* git-descr.sh: Replace all [1-9] occurrences with [0-9].\n+\t* git-undescr.sh: Likewise.\n+\n 2022-03-09  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR other/102664"}, {"sha": "af0fa202d55eb9157386a3d9af9324eb4d485c9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e28be89665f340368e399a1f2140c96a7a79ee8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e28be89665f340368e399a1f2140c96a7a79ee8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e28be89665f340368e399a1f2140c96a7a79ee8", "patch": "@@ -1,3 +1,136 @@\n+2022-03-10  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR c++/84964\n+\t* calls.cc (expand_call): Ignore stack adjustments after sorry.\n+\n+2022-03-10  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/103074\n+\t* lra-constraints.cc (split_reg): Set up\n+\tcheck_and_force_assignment_correctness_p when splitting hard\n+\tregister live range.\n+\n+2022-03-10  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/104813\n+\t* ipa-cp.cc (create_specialized_node): Move removal of\n+\tself-recursive calls from callers vector before refrence\n+\tadjustments.\n+\n+2022-03-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102943\n+\t* gimple-range-cache.cc (sbr_sparse_bitmap::bitvec):\n+\tMake a bitmap_head.\n+\t(sbr_sparse_bitmap::sbr_sparse_bitmap): Adjust and switch\n+\tto tree view.\n+\t(sbr_sparse_bitmap::set_bb_range): Adjust.\n+\t(sbr_sparse_bitmap::get_bb_range): Likewise.\n+\n+2022-03-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102943\n+\t* tree-ssa-dom.cc (back_propagate_equivalences): Only\n+\tpopulate the dominance bitmap if fast queries are not\n+\tavailable.  Use a tree view bitmap.\n+\t(record_temporary_equivalences): Cache the dominance bitmap\n+\tacross all equivalences on the edge.\n+\n+2022-03-10  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/104840\n+\t* config/nvptx/nvptx.md (define_attr \"predicable\"): Use no,yes instead\n+\tof false,true.\n+\n+2022-03-10  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/104783\n+\t* config/nvptx/nvptx.cc (nvptx_init_unisimt_predicate)\n+\t(nvptx_output_unisimt_switch): Handle unisimt_outside_simt_predicate.\n+\t(nvptx_get_unisimt_outside_simt_predicate): New function.\n+\t(predicate_insn): New function, factored out of ...\n+\t(nvptx_reorg_uniform_simt): ... here.  Predicate all emitted insns.\n+\t* config/nvptx/nvptx.h (struct machine_function): Add\n+\tunisimt_outside_simt_predicate field.\n+\t* config/nvptx/nvptx.md (define_insn \"nvptx_warpsync\")\n+\t(define_insn \"nvptx_uniform_warp_check\"): Make predicable.\n+\n+2022-03-10  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.cc (nvptx_unisimt_handle_set): Handle unused\n+\tresult.\n+\n+2022-03-10  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/104815\n+\t* config/nvptx/nvptx.cc (nvptx_print_operand): Handle 'x' operand\n+\tmodifier.\n+\t* config/nvptx/nvptx.md: Use %x0 destination operand in atom insns.\n+\n+2022-03-10  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.md (define_insn \"atomic_fetch_<logic><mode>\"):\n+\tEmit atom.and.b64 instead of atom.b64.and.\n+\n+2022-03-10  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/t-nvptx (MULTILIB_EXTRA_OPTS): Move mptx=3.1 ...\n+\t(MULTILIB_OPTIONS): ... here.\n+\n+2022-03-10  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/104758\n+\t* config/nvptx/nvptx.opt (misa): Set default to sm_30.\n+\t* config/nvptx/t-nvptx (MULTILIB_EXTRA_OPTS): Remove misa=sm_30.\n+\n+2022-03-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/90115\n+\tPR middle-end/102330\n+\tPR middle-end/104774\n+\t* omp-low.cc (oacc_privatization_candidate_p)\n+\t(oacc_privatization_scan_clause_chain)\n+\t(oacc_privatization_scan_decl_chain, lower_oacc_private_marker):\n+\tAnalyze 'lookup_decl'-translated DECL.\n+\n+2022-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/99708\n+\t* config/rs6000/rs6000.h (enum rs6000_builtin_type_index): Remove\n+\tRS6000_BTI_ptr_ieee128_float and RS6000_BTI_ptr_ibm128_float.\n+\t(ptr_ieee128_float_type_node, ptr_ibm128_float_type_node): Remove.\n+\t* config/rs6000/rs6000-builtin.cc (rs6000_type_string): Return\n+\t\"**NULL**\" if type_node is NULL first.  Handle\n+\tieee128_float_type_node.\n+\t(rs6000_init_builtins): Don't initialize ptr_ieee128_float_type_node\n+\tand ptr_ibm128_float_type_node.  Set ibm128_float_type_node and\n+\tieee128_float_type_node to NULL rather than long_double_type_node if\n+\tthey aren't supported.  Do support __ibm128 even if\n+\t!TARGET_FLOAT128_TYPE when long double is double double.\n+\t(rs6000_expand_builtin): Error if bif_is_ibm128 and\n+\t!ibm128_float_type_node.  Remap RS6000_BIF_{,UN}PACK_IF to\n+\tRS6000_BIF_{,UN}PACK_TF much earlier and only use bif_is_ibm128 check\n+\tfor it.\n+\t* config/rs6000/rs6000-c.cc (rs6000_target_modify_macros): Define\n+\t__SIZEOF_FLOAT128__ here and only iff __float128 macro is defined.\n+\t(rs6000_cpu_cpp_builtins): Don't define __SIZEOF_FLOAT128__ here.\n+\tDefine __SIZEOF_IBM128__=16 if ieee128_float_type_node is non-NULL.\n+\tFormatting fix.\n+\t* config/rs6000/rs6000-gen-builtins.cc: Document ibm128 attribute.\n+\t(struct attrinfo): Add isibm128 member.\n+\t(TYPE_MAP_SIZE): Remove.\n+\t(type_map): Use [] instead of [TYPE_MAP_SIZE].  For \"if\" use\n+\tibm128_float_type_node only if it is non-NULL, otherwise fall back\n+\tto long_double_type_node.  Remove \"pif\" entry.\n+\t(parse_bif_attrs): Handle ibm128 attribute and print it for debugging.\n+\t(write_decls): Output bif_ibm128_bit and bif_is_ibm128.\n+\t(write_type_node): Use sizeof type_map / sizeof type_map[0]\n+\tinstead of TYPE_MAP_SIZE.\n+\t(write_bif_static_init): Handle isibm128.\n+\t* config/rs6000/rs6000-builtins.def: Document ibm128 attribute.\n+\t(__builtin_pack_ibm128, __builtin_unpack_ibm128): Add ibm128\n+\tattribute.\n+\n 2022-03-09  Richard Biener  <rguenther@suse.de>\n \n \t* cfgexpand.cc (expand_gimple_asm): Special-case MEM_REF"}, {"sha": "95bd2a4a3e0b7663ab7726cddffffb12e1f59336", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e28be89665f340368e399a1f2140c96a7a79ee8/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e28be89665f340368e399a1f2140c96a7a79ee8/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=5e28be89665f340368e399a1f2140c96a7a79ee8", "patch": "@@ -1 +1 @@\n-20220310\n+20220311"}, {"sha": "fac0026e732c7a76e13a08275e3e403adb6a002d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e28be89665f340368e399a1f2140c96a7a79ee8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e28be89665f340368e399a1f2140c96a7a79ee8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5e28be89665f340368e399a1f2140c96a7a79ee8", "patch": "@@ -1,3 +1,9 @@\n+2022-03-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR ada/104861\n+\t* gcc-interface/Makefile.in (target_noncanonical): Substitute.\n+\t(OSCONS_CPP): Pass target_noncanonical as TARGET.\n+\n 2022-02-13  Maciej W. Rozycki  <macro@orcam.me.uk>\n \n \tPR ada/98724"}, {"sha": "10101c837b29c5074fe872bba56d499f621f50ea", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e28be89665f340368e399a1f2140c96a7a79ee8/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e28be89665f340368e399a1f2140c96a7a79ee8/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=5e28be89665f340368e399a1f2140c96a7a79ee8", "patch": "@@ -1,3 +1,56 @@\n+2022-03-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104863\n+\t* constraint-manager.cc (constraint_manager::add_constraint):\n+\tRefresh the EC IDs when adding constraints implied by offsets.\n+\n+2022-03-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104793\n+\t* analyzer.h (class pending_note): New forward decl.\n+\t* diagnostic-manager.cc (saved_diagnostic::saved_diagnostic):\n+\tInitialize m_notes.\n+\t(saved_diagnostic::operator==): Compare m_notes.\n+\t(saved_diagnostic::add_note): New.\n+\t(saved_diagnostic::emit_any_notes): New.\n+\t(diagnostic_manager::add_note): New.\n+\t(diagnostic_manager::emit_saved_diagnostic): Call emit_any_notes\n+\tafter emitting the warning.\n+\t* diagnostic-manager.h (saved_diagnostic::add_note): New decl.\n+\t(saved_diagnostic::emit_any_notes): New decl.\n+\t(saved_diagnostic::m_notes): New field.\n+\t(diagnostic_manager::add_note): New decl.\n+\t* engine.cc (impl_region_model_context::add_note): New.\n+\t* exploded-graph.h (impl_region_model_context::add_note): New\n+\tdecl.\n+\t* pending-diagnostic.h (class pending_note): New.\n+\t(class pending_note_subclass): New template.\n+\t* region-model.cc (class reason_attr_access): New.\n+\t(check_external_function_for_access_attr): Add class\n+\tannotating_ctxt and use it when checking region.\n+\t(noop_region_model_context::add_note): New.\n+\t* region-model.h (region_model_context::add_note): New vfunc.\n+\t(noop_region_model_context::add_note): New decl.\n+\t(class region_model_context_decorator): New.\n+\t(class note_adding_context): New.\n+\n+2022-03-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104793\n+\t* region-model.cc\n+\t(region_model::check_external_function_for_access_attr): New.\n+\t(region_model::handle_unrecognized_call): Call it.\n+\t* region-model.h\n+\t(region_model::check_external_function_for_access_attr): New decl.\n+\t(region_model::handle_unrecognized_call): New decl.\n+\n+2022-03-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* sm-taint.cc (taint_state_machine::check_for_tainted_size_arg):\n+\tAvoid generating duplicate saved_diagnostics by only handling the\n+\trdwr_map entry for the ptrarg, not the duplicate entry for the\n+\tsizarg.\n+\n 2022-03-07  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/101983"}, {"sha": "fd8057676df79df1f4c730a9fd443f8defe253fb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e28be89665f340368e399a1f2140c96a7a79ee8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e28be89665f340368e399a1f2140c96a7a79ee8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5e28be89665f340368e399a1f2140c96a7a79ee8", "patch": "@@ -1,3 +1,42 @@\n+2022-03-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/104608\n+\t* parser.cc (cp_parser_template_name): Repeat lookup of\n+\tTYPE_DECLs.\n+\n+2022-03-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/104752\n+\t* semantics.cc (finish_compound_literal): Disallow auto{x} for\n+\tis_constrained_auto.\n+\t* typeck2.cc (build_functional_cast_1): Likewise.\n+\n+2022-03-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/104846\n+\t* decl.cc (grokdeclarator): Check FUNC_OR_METHOD_TYPE_P before giving\n+\tdata member errors.\n+\n+2022-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/103460\n+\t* decl.cc (grok_op_properties): Allow variadic operator[] for\n+\tC++23.\n+\n+2022-03-10  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR c++/95999\n+\t* decl.cc (finish_enum_value_list): If VALUE isn't an INTEGER_CST\n+\tconsider it to be zero (i.e. treat it like error_mark_node).\n+\t(build_enumerator): Likewise, if PREV_VALUE isn't an INTEGER_CST,\n+\tset VALUE to error_mark_node.\n+\n+2022-03-10  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR c++/39751\n+\t* parser.cc (cp_parser_late_parsing_for_member): Confirm the token\n+\tstream hasn't been purged before processing DECL_PENDING_INLINE.\n+\n 2022-03-09  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/104823"}, {"sha": "eb4dee06618fa22fba651a1cd66894857ad50cdf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e28be89665f340368e399a1f2140c96a7a79ee8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e28be89665f340368e399a1f2140c96a7a79ee8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5e28be89665f340368e399a1f2140c96a7a79ee8", "patch": "@@ -1,3 +1,146 @@\n+2022-03-10  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR c++/84964\n+\t* g++.dg/other/pr84964.C: New test case.\n+\n+2022-03-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104863\n+\t* gcc.dg/analyzer/torture/pr104863.c: New test.\n+\n+2022-03-10  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/103074\n+\t* gcc.target/i386/pr103074.c: New.\n+\n+2022-03-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/104608\n+\t* g++.dg/parse/template-keyword3.C: New test.\n+\t* g++.dg/parse/template-keyword4.C: New test.\n+\n+2022-03-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/104752\n+\t* g++.dg/cpp23/auto-fncast12.C: New test.\n+\n+2022-03-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/104846\n+\t* g++.dg/init/delete5.C: New test.\n+\n+2022-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/103460\n+\t* g++.dg/cpp23/subscript7.C: New test.\n+\n+2022-03-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104793\n+\t* gcc.dg/analyzer/write-to-const-2.c: Add dg-message directives\n+\tfor expected notes.\n+\t* gcc.dg/analyzer/write-to-function-1.c: Likewise.\n+\t* gcc.dg/analyzer/write-to-string-literal-2.c: Likewise.\n+\t* gcc.dg/analyzer/write-to-string-literal-3.c: Likewise.\n+\t* gcc.dg/analyzer/write-to-string-literal-4.c: Likewise.\n+\t* gcc.dg/analyzer/write-to-string-literal-5.c: New test.\n+\n+2022-03-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104793\n+\t* gcc.dg/analyzer/write-to-const-2.c: New test.\n+\t* gcc.dg/analyzer/write-to-function-1.c: New test.\n+\t* gcc.dg/analyzer/write-to-string-literal-2.c: New test.\n+\t* gcc.dg/analyzer/write-to-string-literal-3.c: New test.\n+\t* gcc.dg/analyzer/write-to-string-literal-4.c: New test.\n+\n+2022-03-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/taint-size-access-attr-1.c: Add\n+\t-fanalyzer-show-duplicate-count to options; verify that a\n+\tduplicate was not created for the tainted size.\n+\n+2022-03-10  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/104813\n+\t* gcc.dg/ipa/pr104813.c: New test.\n+\n+2022-03-10  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.target/nvptx/uniform-simt-4.c: New test.\n+\n+2022-03-10  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/104815\n+\t* gcc.target/nvptx/atomic-bit-bucket-dest.c: New test.\n+\n+2022-03-10  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.target/nvptx/atomic_fetch-1.c: Update.\n+\t* gcc.target/nvptx/atomic_fetch-2.c: Update.\n+\n+2022-03-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/90115\n+\tPR middle-end/102330\n+\tPR middle-end/104774\n+\t* c-c++-common/goacc/kernels-decompose-pr104061-1-3.c: Adjust.\n+\t* c-c++-common/goacc/kernels-decompose-pr104061-1-4.c: Likewise.\n+\t* c-c++-common/goacc/kernels-decompose-pr104132-1.c: Likewise.\n+\t* c-c++-common/goacc/kernels-decompose-pr104133-1.c: Likewise.\n+\t* c-c++-common/goacc/kernels-decompose-pr104774-1.c: Likewise.\n+\t* c-c++-common/goacc/privatization-1-compute-loop.c: Likewise.\n+\t* c-c++-common/goacc/privatization-1-compute.c: Likewise.\n+\t* c-c++-common/goacc/privatization-1-routine_gang-loop.c:\n+\tLikewise.\n+\t* c-c++-common/goacc/privatization-1-routine_gang.c: Likewise.\n+\t* gfortran.dg/goacc-gomp/pr102330-1.f90: Likewise, and subsume...\n+\t* gfortran.dg/goacc-gomp/pr102330-2.f90: ... this file, and...\n+\t* gfortran.dg/goacc-gomp/pr102330-3.f90: ... this file.\n+\t* gfortran.dg/goacc/privatization-1-compute-loop.f90: Adjust.\n+\t* gfortran.dg/goacc/privatization-1-compute.f90: Likewise.\n+\t* gfortran.dg/goacc/privatization-1-routine_gang-loop.f90:\n+\tLikewise.\n+\t* gfortran.dg/goacc/privatization-1-routine_gang.f90: Likewise.\n+\n+2022-03-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/104774\n+\t* c-c++-common/goacc/kernels-decompose-pr104774-1.c: New file.\n+\n+2022-03-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/102330\n+\t* gfortran.dg/goacc-gomp/pr102330-1.f90: New file.\n+\t* gfortran.dg/goacc-gomp/pr102330-2.f90: Likewise.\n+\t* gfortran.dg/goacc-gomp/pr102330-3.f90: Likewise.\n+\n+2022-03-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/90115\n+\t* c-c++-common/goacc/nesting-1.c: Enhance.\n+\t* gcc.dg/goacc/nested-function-1.c: Likewise.\n+\t* gcc.dg/goacc/nested-function-2.c: Likewise.\n+\t* gfortran.dg/goacc/nested-function-1.f90: Likewise.\n+\n+2022-03-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/99708\n+\t* gcc.dg/pr99708.c: New test.\n+\t* gcc.target/powerpc/pr99708-2.c: New test.\n+\t* gcc.target/powerpc/convert-fp-128.c (mode_kf): Define only if\n+\t__FLOAT128_TYPE__ is defined.\n+\n+2022-03-10  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR c++/95999\n+\t* g++.dg/parse/pr95999.C: New test case.\n+\n+2022-03-10  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR c++/39751\n+\t* g++.dg/parse/pr39751.C: New test case.\n+\n 2022-03-09  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/c11-unproto-1.c, gcc.dg/c11-unproto-2.c: Update comments."}, {"sha": "943b898fa1b1a006d1099fd4990b4d0a3b6bfe8d", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e28be89665f340368e399a1f2140c96a7a79ee8/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e28be89665f340368e399a1f2140c96a7a79ee8/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=5e28be89665f340368e399a1f2140c96a7a79ee8", "patch": "@@ -1,3 +1,59 @@\n+2022-03-10  Hafiz Abid Qadeer  <abidh@codesourcery.com>\n+\n+\t* testsuite/libgomp.fortran/allocate-1.f90: Remove pool_size\n+\ttrait.  Test last index in w and v array.  Remove redundant\n+\tassignment to V(1).  Move alignment checks at the end of\n+\tparallel region.\n+\n+2022-03-10  Tom de Vries  <tdevries@suse.de>\n+\n+\t* testsuite/libgomp.c/pr104783.c: New test.\n+\n+2022-03-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/90115\n+\tPR middle-end/102330\n+\tPR middle-end/104774\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-decompose-1.c:\n+\tEnhance.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-1.c:\n+\tAdjust.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-2.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-3.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-4.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-5.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-vector-1.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-vector-2.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-2.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-3.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-4.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-5.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-6.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-7.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/optional-private.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/privatized-ref-1.f95: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/privatized-ref-2.f90: Likewise.\n+\n+2022-03-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/90115\n+\t* testsuite/libgomp.oacc-fortran/routine-1.f90: Enhance.\n+\t* testsuite/libgomp.oacc-fortran/routine-2.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/routine-3.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/routine-9.f90: Likewise.\n+\n 2022-03-04  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR testsuite/104791"}, {"sha": "5d62f47aa4a3132469ec026b6db1597043d2688f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e28be89665f340368e399a1f2140c96a7a79ee8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e28be89665f340368e399a1f2140c96a7a79ee8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5e28be89665f340368e399a1f2140c96a7a79ee8", "patch": "@@ -1,3 +1,25 @@\n+2022-03-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/104870\n+\t* src/c++17/floating_from_chars.cc: Check __SIZE_WIDTH__ >= 32\n+\tbefore using fast_float.\n+\n+2022-03-10  Detlef Vollmann  <dv@vollmann.ch>\n+\n+\tPR libstdc++/104866\n+\t* include/bits/this_thread_sleep.h: Fix order of #endif and\n+\tclosing brace of namespace.\n+\n+2022-03-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* libsupc++/compare (_Strong_order::_S_fp_cmp) [__vax__]:\n+\tHandle NaN.\n+\n+2022-03-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* libsupc++/compare (_Strong_ordering::_S_fp_cmp) [__vax__]: Use\n+\t<=> comparison.\n+\n 2022-03-09  Patrick Palka  <ppalka@redhat.com>\n \n \tPR libstdc++/104859"}]}