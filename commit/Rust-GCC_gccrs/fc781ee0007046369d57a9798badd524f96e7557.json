{"sha": "fc781ee0007046369d57a9798badd524f96e7557", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM3ODFlZTAwMDcwNDYzNjlkNTdhOTc5OGJhZGQ1MjRmOTZlNzU1Nw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2005-09-06T04:53:53Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2005-09-06T04:53:53Z"}, "message": "re PR middle-end/21460 (sjlj_emit_function_enter adds rtl to wrong block)\n\n\tPR middle-end/21460\n\t* except.c (sjlj_emit_function_enter): Find the function begin\n\tnote even when it's not in first basic block.\n\nFrom-SVN: r103930", "tree": {"sha": "87845d42cf06ccabb7ba3676e962f578826c2baf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87845d42cf06ccabb7ba3676e962f578826c2baf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc781ee0007046369d57a9798badd524f96e7557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc781ee0007046369d57a9798badd524f96e7557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc781ee0007046369d57a9798badd524f96e7557", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc781ee0007046369d57a9798badd524f96e7557/comments", "author": null, "committer": null, "parents": [{"sha": "67da1534206a26c8d9a0440dad9142da2f8eff42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67da1534206a26c8d9a0440dad9142da2f8eff42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67da1534206a26c8d9a0440dad9142da2f8eff42"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "88efaafa90d8ad28e7f533a7f58aa5ec89a163ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc781ee0007046369d57a9798badd524f96e7557/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc781ee0007046369d57a9798badd524f96e7557/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc781ee0007046369d57a9798badd524f96e7557", "patch": "@@ -1,3 +1,9 @@\n+2005-09-06  Alan Modra  <amodra@bigpond.net.au>\n+\n+\tPR middle-end/21460\n+\t* except.c (sjlj_emit_function_enter): Find the function begin\n+\tnote even when it's not in first basic block.\n+\n 2005-09-06  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* acinclude.m4: Renamed from aclocal.m4.  Delete AM_LANGINFO_CODESET,"}, {"sha": "91c917069ece0b1479cd5bbbb262af1b5fc8c0d4", "filename": "gcc/except.c", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc781ee0007046369d57a9798badd524f96e7557/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc781ee0007046369d57a9798badd524f96e7557/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=fc781ee0007046369d57a9798badd524f96e7557", "patch": "@@ -1728,6 +1728,7 @@ static void\n sjlj_emit_function_enter (rtx dispatch_label)\n {\n   rtx fn_begin, fc, mem, seq;\n+  bool fn_begin_outside_block;\n \n   fc = cfun->eh->sjlj_fc;\n \n@@ -1783,23 +1784,20 @@ sjlj_emit_function_enter (rtx dispatch_label)\n      do this in a block that is at loop level 0 and dominates all\n      can_throw_internal instructions.  */\n \n+  fn_begin_outside_block = true;\n   for (fn_begin = get_insns (); ; fn_begin = NEXT_INSN (fn_begin))\n-    if (NOTE_P (fn_begin)\n-\t&& (NOTE_LINE_NUMBER (fn_begin) == NOTE_INSN_FUNCTION_BEG\n-\t    || NOTE_LINE_NUMBER (fn_begin) == NOTE_INSN_BASIC_BLOCK))\n-      break;\n-  if (NOTE_LINE_NUMBER (fn_begin) == NOTE_INSN_FUNCTION_BEG)\n+    if (NOTE_P (fn_begin))\n+      {\n+\tif (NOTE_LINE_NUMBER (fn_begin) == NOTE_INSN_FUNCTION_BEG)\n+\t  break;\n+\telse if (NOTE_LINE_NUMBER (fn_begin) == NOTE_INSN_BASIC_BLOCK)\n+\t  fn_begin_outside_block = false;\n+      }\n+\n+  if (fn_begin_outside_block)\n     insert_insn_on_edge (seq, single_succ_edge (ENTRY_BLOCK_PTR));\n   else\n-    {\n-      rtx last = BB_END (single_succ (ENTRY_BLOCK_PTR));\n-      for (; ; fn_begin = NEXT_INSN (fn_begin))\n-\tif ((NOTE_P (fn_begin)\n-\t     && NOTE_LINE_NUMBER (fn_begin) == NOTE_INSN_FUNCTION_BEG)\n-\t    || fn_begin == last)\n-\t  break;\n-      emit_insn_after (seq, fn_begin);\n-    }\n+    emit_insn_after (seq, fn_begin);\n }\n \n /* Call back from expand_function_end to know where we should put"}]}