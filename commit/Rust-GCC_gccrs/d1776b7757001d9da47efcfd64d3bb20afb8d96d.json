{"sha": "d1776b7757001d9da47efcfd64d3bb20afb8d96d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE3NzZiNzc1NzAwMWQ5ZGE0N2VmY2ZkNjRkM2JiMjBhZmI4ZDk2ZA==", "commit": {"author": {"name": "Michael Matloob", "email": "matloob@golang.org", "date": "2021-03-02T00:02:38Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-03-02T22:03:26Z"}, "message": "compiler: allow //go:embed in files underscore-importing embed\n\nThe embed spec allows for //go:embed to be used in files that\nunderscore-import package \"embed\". This is useful for embeds to\n[]byte and string vars because the embed.FS type may not be referenced\nif those are the only types of embeds in a file. Because the compiler\npreviously checked whether there were any aliases to the embed\npackage to decide if //go:embed could be used, it would reject\nfiles with only underscore imports of embed. Instead, record\nwhether the embed import is encountered at all, similar to what\nis done with unsafe, to decide whether //go:embed is allowed.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/297553", "tree": {"sha": "d7997fb88b53789753c231a10b79dceb040df38e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7997fb88b53789753c231a10b79dceb040df38e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1776b7757001d9da47efcfd64d3bb20afb8d96d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1776b7757001d9da47efcfd64d3bb20afb8d96d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1776b7757001d9da47efcfd64d3bb20afb8d96d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1776b7757001d9da47efcfd64d3bb20afb8d96d/comments", "author": {"login": "matloob", "id": 16470053, "node_id": "MDQ6VXNlcjE2NDcwMDUz", "avatar_url": "https://avatars.githubusercontent.com/u/16470053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matloob", "html_url": "https://github.com/matloob", "followers_url": "https://api.github.com/users/matloob/followers", "following_url": "https://api.github.com/users/matloob/following{/other_user}", "gists_url": "https://api.github.com/users/matloob/gists{/gist_id}", "starred_url": "https://api.github.com/users/matloob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matloob/subscriptions", "organizations_url": "https://api.github.com/users/matloob/orgs", "repos_url": "https://api.github.com/users/matloob/repos", "events_url": "https://api.github.com/users/matloob/events{/privacy}", "received_events_url": "https://api.github.com/users/matloob/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df003d1e0bf2d0a8e2ed45a323d4e974b15dc95f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df003d1e0bf2d0a8e2ed45a323d4e974b15dc95f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df003d1e0bf2d0a8e2ed45a323d4e974b15dc95f"}], "stats": {"total": 35, "additions": 14, "deletions": 21}, "files": [{"sha": "5c9fc7db4e1dd5ca082c8eb7572bcc417f304453", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1776b7757001d9da47efcfd64d3bb20afb8d96d/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1776b7757001d9da47efcfd64d3bb20afb8d96d/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=d1776b7757001d9da47efcfd64d3bb20afb8d96d", "patch": "@@ -1,4 +1,4 @@\n-56cf388da8d04bbd3824c4df34d77a8afa69749b\n+2c5188b5ad6143e791f2ba42f02a4ea7887d87b6\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "0584f707ce6bac47dce95e1b7c5a29bdf81688d5", "filename": "gcc/go/gofrontend/embed.cc", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1776b7757001d9da47efcfd64d3bb20afb8d96d/gcc%2Fgo%2Fgofrontend%2Fembed.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1776b7757001d9da47efcfd64d3bb20afb8d96d/gcc%2Fgo%2Fgofrontend%2Fembed.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fembed.cc?ref=d1776b7757001d9da47efcfd64d3bb20afb8d96d", "patch": "@@ -663,21 +663,6 @@ Embedcfg_reader::error(const char* msg)\n \t\tthis->filename_, msg);\n }\n \n-// Return whether the current file imports \"embed\".\n-\n-bool\n-Gogo::is_embed_imported() const\n-{\n-  Packages::const_iterator p = this->packages_.find(\"embed\");\n-  if (p == this->packages_.end())\n-    return false;\n-\n-  // We track current file imports in the package aliases, where a\n-  // typical import will just list the package name in aliases.  So\n-  // the package has been imported if there is at least one alias.\n-  return !p->second->aliases().empty();\n-}\n-\n // Implement the sort order for a list of embedded files, as discussed\n // at the docs for embed.FS.\n "}, {"sha": "9d4150eff7ca600df7961a62a22555e8f1a00e40", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1776b7757001d9da47efcfd64d3bb20afb8d96d/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1776b7757001d9da47efcfd64d3bb20afb8d96d/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=d1776b7757001d9da47efcfd64d3bb20afb8d96d", "patch": "@@ -37,6 +37,7 @@ Gogo::Gogo(Backend* backend, Linemap* linemap, int, int pointer_size)\n     imports_(),\n     imported_unsafe_(false),\n     current_file_imported_unsafe_(false),\n+    current_file_imported_embed_(false),\n     packages_(),\n     init_functions_(),\n     var_deps_(),\n@@ -469,6 +470,9 @@ Gogo::import_package(const std::string& filename,\n       return;\n     }\n \n+  if (filename == \"embed\")\n+    this->current_file_imported_embed_ = true;\n+\n   Imports::const_iterator p = this->imports_.find(filename);\n   if (p != this->imports_.end())\n     {\n@@ -2717,6 +2721,7 @@ Gogo::clear_file_scope()\n     }\n \n   this->current_file_imported_unsafe_ = false;\n+  this->current_file_imported_embed_ = false;\n }\n \n // Queue up a type-specific hash function for later writing.  These"}, {"sha": "f4155a29edb3bcf14c95634243d26958938f4f76", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1776b7757001d9da47efcfd64d3bb20afb8d96d/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1776b7757001d9da47efcfd64d3bb20afb8d96d/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=d1776b7757001d9da47efcfd64d3bb20afb8d96d", "patch": "@@ -397,10 +397,6 @@ class Gogo\n   void\n   read_embedcfg(const char* filename);\n \n-  // Return whether the current file imports \"embed\".\n-  bool\n-  is_embed_imported() const;\n-\n   // Build an initializer for a variable with a go:embed directive.\n   Expression*\n   initializer_for_embeds(Type*, const std::vector<std::string>*, Location);\n@@ -709,6 +705,11 @@ class Gogo\n   current_file_imported_unsafe() const\n   { return this->current_file_imported_unsafe_; }\n \n+  // Return whether the current file imported the embed package.\n+  bool\n+  current_file_imported_embed() const\n+  { return this->current_file_imported_embed_; }\n+\n   // Clear out all names in file scope.  This is called when we start\n   // parsing a new file.\n   void\n@@ -1251,6 +1252,8 @@ class Gogo\n   bool imported_unsafe_;\n   // Whether the magic unsafe package was imported by the current file.\n   bool current_file_imported_unsafe_;\n+  // Whether the embed package was imported by the current file.\n+  bool current_file_imported_embed_;\n   // Mapping from package names we have seen to packages.  This does\n   // not include the package we are compiling.\n   Packages packages_;"}, {"sha": "e43b5f2144846b9004991fcf511106552bfcbb68", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1776b7757001d9da47efcfd64d3bb20afb8d96d/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1776b7757001d9da47efcfd64d3bb20afb8d96d/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=d1776b7757001d9da47efcfd64d3bb20afb8d96d", "patch": "@@ -1321,7 +1321,7 @@ Parse::declaration()\n       embeds = new(std::vector<std::string>);\n       this->lex_->get_and_clear_embeds(embeds);\n \n-      if (!this->gogo_->is_embed_imported())\n+      if (!this->gogo_->current_file_imported_embed())\n \t{\n \t  go_error_at(token->location(),\n \t\t      \"invalid go:embed: missing import %<embed%>\");"}]}