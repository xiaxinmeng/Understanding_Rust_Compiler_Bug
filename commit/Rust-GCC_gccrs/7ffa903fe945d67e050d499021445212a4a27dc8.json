{"sha": "7ffa903fe945d67e050d499021445212a4a27dc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZmYTkwM2ZlOTQ1ZDY3ZTA1MGQ0OTkwMjE0NDUyMTJhNGEyN2RjOA==", "commit": {"author": {"name": "Vincent Celier", "email": "celier@gnat.com", "date": "2001-12-05T21:25:25Z"}, "committer": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-12-05T21:25:25Z"}, "message": "gnatcmd.adb: (MAKE): Add new translations: -b /BIND_ONLY, -c /COMPILE_ONLY, -l /LINK_ONLY\n\n\t* gnatcmd.adb: (MAKE): Add new translations: -b /BIND_ONLY,\n\t-c /COMPILE_ONLY, -l /LINK_ONLY\n\n\t* opt.ads:\n\t(Bind_Only): New Flag\n\t(Link_Only): New flag\n\n\t* switch.adb (Scan_Make_Switches): Add processing for -b (Bind_Only)\n\tand -l (Link_Only)\n\n\t* makeusg.adb: Add new switches -b and -l. Update Copyright notice.\n\n\t* make.adb:\n\t(Do_Compile_Step, Do_Bind_Step, Do_Link_Step): New flags.\n\t(Gnatmake): Set the step flags. Only perform a step if the\n\tcorresponding step flag is True.\n\t(Scan_Make_Arg): Reset the bind and link step flags when -u\n\tor -gnatc has been specified.\n\nFrom-SVN: r47694", "tree": {"sha": "bf3ee913b720d0e218a9deaab13f586dbb08afde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf3ee913b720d0e218a9deaab13f586dbb08afde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ffa903fe945d67e050d499021445212a4a27dc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ffa903fe945d67e050d499021445212a4a27dc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ffa903fe945d67e050d499021445212a4a27dc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ffa903fe945d67e050d499021445212a4a27dc8/comments", "author": null, "committer": null, "parents": [{"sha": "578316b9485225adecf7f258287fed2fe4474e6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/578316b9485225adecf7f258287fed2fe4474e6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/578316b9485225adecf7f258287fed2fe4474e6b"}], "stats": {"total": 747, "additions": 441, "deletions": 306}, "files": [{"sha": "c32f52c38dbd3077ff20631b60c3ebfee6e17a02", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffa903fe945d67e050d499021445212a4a27dc8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffa903fe945d67e050d499021445212a4a27dc8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7ffa903fe945d67e050d499021445212a4a27dc8", "patch": "@@ -1,3 +1,24 @@\n+2001-12-05  Vincent Celier <celier@gnat.com>\n+\n+\t* gnatcmd.adb: (MAKE): Add new translations: -b /BIND_ONLY, \n+\t-c /COMPILE_ONLY, -l /LINK_ONLY\n+\t\n+\t* opt.ads:\n+\t(Bind_Only): New Flag\n+\t(Link_Only): New flag\n+\t\n+\t* switch.adb (Scan_Make_Switches): Add processing for -b (Bind_Only) \n+\tand -l (Link_Only)\n+\t\n+\t* makeusg.adb: Add new switches -b and -l. Update Copyright notice.\n+\t\n+\t* make.adb:\n+\t(Do_Compile_Step, Do_Bind_Step, Do_Link_Step): New flags.\n+\t(Gnatmake): Set the step flags. Only perform a step if the\n+\tcorresponding step flag is True.\n+\t(Scan_Make_Arg): Reset the bind and link step flags when -u\n+\tor -gnatc has been specified.\n+\n 2001-12-05  Ed Schonberg <schonber@gnat.com>\n \n \t* sem_eval.adb (Eval_Concatenation): If left operand is a null string, "}, {"sha": "127c3045070f1affc3fb734cc04b463ad7e79b85", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffa903fe945d67e050d499021445212a4a27dc8/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffa903fe945d67e050d499021445212a4a27dc8/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=7ffa903fe945d67e050d499021445212a4a27dc8", "patch": "@@ -1014,9 +1014,15 @@ procedure GNATCmd is\n    S_Make_All     : aliased constant S := \"/ALL_FILES \"                    &\n                                             \"-a\";\n \n+   S_Make_Bind_Only : aliased constant S := \"/BIND_ONLY \"                  &\n+                                            \"-b\";\n+\n    S_Make_Bind    : aliased constant S := \"/BINDER_QUALIFIERS=?\"           &\n                                             \"-bargs BIND\";\n \n+   S_Make_Compile_Only : aliased constant S := \"/COMPILE_ONLY \"            &\n+                                            \"-c\";\n+\n    S_Make_Comp    : aliased constant S := \"/COMPILER_QUALIFIERS=?\"         &\n                                             \"-cargs COMPILE\";\n \n@@ -1050,6 +1056,9 @@ procedure GNATCmd is\n    S_Make_Link    : aliased constant S := \"/LINKER_QUALIFIERS=?\"           &\n                                             \"-largs LINK\";\n \n+   S_Make_Link_Only : aliased constant S := \"/LINK_ONLY \"                  &\n+                                            \"-l\";\n+\n    S_Make_Minimal : aliased constant S := \"/MINIMAL_RECOMPILATION \"        &\n                                            \"-m\";\n \n@@ -1092,7 +1101,9 @@ procedure GNATCmd is\n    Make_Switches : aliased constant Switches := (\n      S_Make_All     'Access,\n      S_Make_Bind    'Access,\n+     S_Make_Bind_Only'Access,\n      S_Make_Comp    'Access,\n+     S_Make_Compile_Only'Access,\n      S_Make_Cond    'Access,\n      S_Make_Cont    'Access,\n      S_Make_Current 'Access,\n@@ -1104,6 +1115,7 @@ procedure GNATCmd is\n      S_Make_Inplace 'Access,\n      S_Make_Library 'Access,\n      S_Make_Link    'Access,\n+     S_Make_Link_Only'Access,\n      S_Make_Minimal 'Access,\n      S_Make_Nolink  'Access,\n      S_Make_Nostinc 'Access,"}, {"sha": "d32d0acf77fde73e103be009e435b8549ae2fd87", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 369, "deletions": 301, "changes": 670, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffa903fe945d67e050d499021445212a4a27dc8/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffa903fe945d67e050d499021445212a4a27dc8/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=7ffa903fe945d67e050d499021445212a4a27dc8", "patch": "@@ -263,6 +263,13 @@ package body Make is\n    Max_Line_Length : constant := 127;\n    --  Maximum number of characters per line, when displaying a path\n \n+   Do_Compile_Step : Boolean := True;\n+   Do_Bind_Step    : Boolean := True;\n+   Do_Link_Step    : Boolean := True;\n+   --  Flags to indicate what step should be executed.\n+   --  Can be set to False with the switches -c, -b and -l.\n+   --  These flags are reset to True for each invokation of procedure Gnatmake.\n+\n    ----------------------\n    -- Marking Routines --\n    ----------------------\n@@ -2507,6 +2514,10 @@ package body Make is\n       --  really necessary, because it is too hard to decide.\n \n    begin\n+      Do_Compile_Step := True;\n+      Do_Bind_Step    := True;\n+      Do_Link_Step    := True;\n+\n       Make.Initialize;\n \n       if Hostparm.Java_VM then\n@@ -2557,7 +2568,8 @@ package body Make is\n                --  First make sure that the binder and the linker\n                --  will not be invoked.\n \n-               Opt.Compile_Only := True;\n+               Do_Bind_Step := False;\n+               Do_Link_Step := False;\n \n                --  Put all the sources in the queue\n \n@@ -2875,296 +2887,333 @@ package body Make is\n       Gnatbind_Path  := GNAT.OS_Lib.Locate_Exec_On_Path (Gnatbind.all);\n       Gnatlink_Path  := GNAT.OS_Lib.Locate_Exec_On_Path (Gnatlink.all);\n \n+      --  If we have specified -j switch both from the project file\n+      --  and on the command line, the one from the command line takes\n+      --  precedence.\n+\n+      if Saved_Maximum_Processes = 0 then\n+         Saved_Maximum_Processes := Opt.Maximum_Processes;\n+      end if;\n+\n+      --  If either -c, -b or -l has been specified, we will not necessarily\n+      --  execute all steps.\n+\n+      if Compile_Only or else Bind_Only or else Link_Only then\n+         Do_Compile_Step := Do_Compile_Step and Compile_Only;\n+         Do_Bind_Step    := Do_Bind_Step    and Bind_Only;\n+         Do_Link_Step    := Do_Link_Step    and Link_Only;\n+\n+         --  If -c has been specified, but not -b, ignore any potential -l\n+\n+         if Do_Compile_Step and then not Do_Bind_Step then\n+            Do_Link_Step := False;\n+         end if;\n+      end if;\n+\n       --  Here is where the make process is started\n \n       --  We do the same process for each main\n \n       Multiple_Main_Loop : for N_File in 1 .. Osint.Number_Of_Files loop\n \n-         Recursive_Compilation_Step : declare\n-            Args : Argument_List (1 .. Gcc_Switches.Last);\n+         if Do_Compile_Step then\n+            Recursive_Compilation_Step : declare\n+               Args : Argument_List (1 .. Gcc_Switches.Last);\n \n-            First_Compiled_File : Name_Id;\n+               First_Compiled_File : Name_Id;\n \n-            Youngest_Obj_File   : Name_Id;\n-            Youngest_Obj_Stamp  : Time_Stamp_Type;\n+               Youngest_Obj_File   : Name_Id;\n+               Youngest_Obj_Stamp  : Time_Stamp_Type;\n \n-            Executable_Stamp    : Time_Stamp_Type;\n-            --  Executable is the final executable program.\n+               Executable_Stamp    : Time_Stamp_Type;\n+               --  Executable is the final executable program.\n \n-         begin\n-            Executable         := No_File;\n-            Non_Std_Executable := False;\n+            begin\n+               Executable         := No_File;\n+               Non_Std_Executable := False;\n \n-            for J in 1 .. Gcc_Switches.Last loop\n-               Args (J) := Gcc_Switches.Table (J);\n-            end loop;\n+               for J in 1 .. Gcc_Switches.Last loop\n+                  Args (J) := Gcc_Switches.Table (J);\n+               end loop;\n \n-            --  Look inside the linker switches to see if the name of the final\n-            --  executable program was specified.\n+               --  Look inside the linker switches to see if the name\n+               --  of the final executable program was specified.\n \n-            for J in Linker_Switches.First .. Linker_Switches.Last loop\n-               if Linker_Switches.Table (J).all = Output_Flag.all then\n-                  pragma Assert (J < Linker_Switches.Last);\n+               for J in Linker_Switches.First .. Linker_Switches.Last loop\n+                  if Linker_Switches.Table (J).all = Output_Flag.all then\n+                     pragma Assert (J < Linker_Switches.Last);\n \n-                  --  We cannot specify a single executable for several\n-                  --  main subprograms!\n+                     --  We cannot specify a single executable for several\n+                     --  main subprograms!\n \n-                  if Osint.Number_Of_Files > 1 then\n-                     Fail\n-                      (\"cannot specify a single executable for several mains\");\n-                  end if;\n+                     if Osint.Number_Of_Files > 1 then\n+                        Fail\n+                           (\"cannot specify a single executable \" &\n+                            \"for several mains\");\n+                     end if;\n \n-                  Name_Len := Linker_Switches.Table (J + 1)'Length;\n-                  Name_Buffer (1 .. Name_Len) :=\n-                    Linker_Switches.Table (J + 1).all;\n+                     Name_Len := Linker_Switches.Table (J + 1)'Length;\n+                     Name_Buffer (1 .. Name_Len) :=\n+                       Linker_Switches.Table (J + 1).all;\n \n-                  --  If target has an executable suffix and it has not been\n-                  --  specified then it is added here.\n+                     --  If target has an executable suffix and it has not been\n+                     --  specified then it is added here.\n \n-                  if Executable_Suffix'Length /= 0\n-                    and then Linker_Switches.Table (J + 1)\n-                              (Name_Len - Executable_Suffix'Length + 1\n-                               .. Name_Len) /= Executable_Suffix\n-                  then\n-                     Name_Buffer (Name_Len + 1 ..\n-                                  Name_Len + Executable_Suffix'Length) :=\n-                        Executable_Suffix;\n-                     Name_Len := Name_Len + Executable_Suffix'Length;\n-                  end if;\n+                     if Executable_Suffix'Length /= 0\n+                       and then Linker_Switches.Table (J + 1)\n+                                 (Name_Len - Executable_Suffix'Length + 1\n+                                  .. Name_Len) /= Executable_Suffix\n+                     then\n+                        Name_Buffer (Name_Len + 1 ..\n+                                     Name_Len + Executable_Suffix'Length) :=\n+                          Executable_Suffix;\n+                        Name_Len := Name_Len + Executable_Suffix'Length;\n+                     end if;\n \n-                  Executable := Name_Enter;\n+                     Executable := Name_Enter;\n \n-                  Verbose_Msg (Executable, \"final executable\");\n-               end if;\n-            end loop;\n+                     Verbose_Msg (Executable, \"final executable\");\n+                  end if;\n+               end loop;\n \n-            --  If the name of the final executable program was not specified\n-            --  then construct it from the main input file.\n+               --  If the name of the final executable program was not\n+               --  specified then construct it from the main input file.\n \n-            if Executable = No_File then\n-               if Main_Project = No_Project then\n-                  Executable :=\n-                    Executable_Name (Strip_Suffix (Main_Source_File));\n+               if Executable = No_File then\n+                  if Main_Project = No_Project then\n+                     Executable :=\n+                       Executable_Name (Strip_Suffix (Main_Source_File));\n \n-               else\n-                  --  If we are using a project file, we attempt to\n-                  --  remove the body (or spec) termination of the main\n-                  --  subprogram. We find it the the naming scheme of the\n-                  --  project file. This will avoid to generate an executable\n-                  --  \"main.2\" for a main subprogram \"main.2.ada\", when the\n-                  --  body termination is \".2.ada\".\n+                  else\n+                     --  If we are using a project file, we attempt to\n+                     --  remove the body (or spec) termination of the main\n+                     --  subprogram. We find it the the naming scheme of the\n+                     --  project file. This will avoid to generate an\n+                     --  executable \"main.2\" for a main subprogram\n+                     --  \"main.2.ada\", when the body termination is \".2.ada\".\n \n-                  declare\n-                     Body_Append : constant String :=\n-                                     Get_Name_String\n-                                       (Projects.Table\n-                                        (Main_Project).\n-                                         Naming.Current_Impl_Suffix);\n-                     Spec_Append : constant String :=\n-                                     Get_Name_String\n-                                       (Projects.Table\n-                                         (Main_Project).\n-                                           Naming.Current_Spec_Suffix);\n+                     declare\n+                        Body_Append : constant String :=\n+                                        Get_Name_String\n+                                          (Projects.Table\n+                                           (Main_Project).\n+                                            Naming.Current_Impl_Suffix);\n+                        Spec_Append : constant String :=\n+                                        Get_Name_String\n+                                          (Projects.Table\n+                                            (Main_Project).\n+                                              Naming.Current_Spec_Suffix);\n \n-                  begin\n-                     Get_Name_String (Main_Source_File);\n+                     begin\n+                        Get_Name_String (Main_Source_File);\n \n-                     if Name_Len > Body_Append'Length\n-                       and then Name_Buffer\n+                        if Name_Len > Body_Append'Length\n+                          and then Name_Buffer\n                              (Name_Len - Body_Append'Length + 1 .. Name_Len) =\n-                                        Body_Append\n-                     then\n-                        --  We have found the body termination. We remove it\n-                        --  add the executable termination (if any) and set\n-                        --  Non_Std_Executable.\n-\n-                        Name_Len := Name_Len - Body_Append'Length;\n-                        Executable := Executable_Name (Name_Find);\n-                        Non_Std_Executable := True;\n-\n-                     elsif Name_Len > Spec_Append'Length\n-                       and then\n-                         Name_Buffer\n-                           (Name_Len - Spec_Append'Length + 1 .. Name_Len) =\n-                                                                  Spec_Append\n-                     then\n-                        --  We have found the spec termination. We remove it,\n-                        --  add the executable termination (if any), and set\n-                        --  Non_Std_Executable.\n+                                           Body_Append\n+                        then\n+                           --  We have found the body termination. We remove it\n+                           --  add the executable termination (if any) and set\n+                           --  Non_Std_Executable.\n+\n+                           Name_Len := Name_Len - Body_Append'Length;\n+                           Executable := Executable_Name (Name_Find);\n+                           Non_Std_Executable := True;\n+\n+                        elsif Name_Len > Spec_Append'Length\n+                          and then\n+                            Name_Buffer\n+                              (Name_Len - Spec_Append'Length + 1 .. Name_Len) =\n+                                                                   Spec_Append\n+                        then\n+                           --  We have found the spec termination. We remove\n+                           --  it, add the executable termination (if any),\n+                           --  and set Non_Std_Executable.\n+\n+                           Name_Len := Name_Len - Spec_Append'Length;\n+                           Executable := Executable_Name (Name_Find);\n+                           Non_Std_Executable := True;\n+\n+                        else\n+                           Executable :=\n+                             Executable_Name (Strip_Suffix (Main_Source_File));\n+                        end if;\n+                     end;\n+                  end if;\n+               end if;\n \n-                        Name_Len := Name_Len - Spec_Append'Length;\n-                        Executable := Executable_Name (Name_Find);\n-                        Non_Std_Executable := True;\n+               --  Now we invoke Compile_Sources for the current main\n+\n+               Compile_Sources\n+                 (Main_Source           => Main_Source_File,\n+                  Args                  => Args,\n+                  First_Compiled_File   => First_Compiled_File,\n+                  Most_Recent_Obj_File  => Youngest_Obj_File,\n+                  Most_Recent_Obj_Stamp => Youngest_Obj_Stamp,\n+                  Main_Unit             => Is_Main_Unit,\n+                  Compilation_Failures  => Compilation_Failures,\n+                  Check_Readonly_Files  => Opt.Check_Readonly_Files,\n+                  Do_Not_Execute        => Opt.Do_Not_Execute,\n+                  Force_Compilations    => Opt.Force_Compilations,\n+                  In_Place_Mode         => Opt.In_Place_Mode,\n+                  Keep_Going            => Opt.Keep_Going,\n+                  Initialize_ALI_Data   => True,\n+                  Max_Process           => Saved_Maximum_Processes);\n \n-                     else\n-                        Executable :=\n-                          Executable_Name (Strip_Suffix (Main_Source_File));\n-                     end if;\n-                  end;\n+               if Opt.Verbose_Mode then\n+                  Write_Str (\"End of compilation\");\n+                  Write_Eol;\n                end if;\n-            end if;\n-\n-            --  Now we invoke Compile_Sources for the current main\n-\n-            Compile_Sources\n-              (Main_Source           => Main_Source_File,\n-               Args                  => Args,\n-               First_Compiled_File   => First_Compiled_File,\n-               Most_Recent_Obj_File  => Youngest_Obj_File,\n-               Most_Recent_Obj_Stamp => Youngest_Obj_Stamp,\n-               Main_Unit             => Is_Main_Unit,\n-               Compilation_Failures  => Compilation_Failures,\n-               Check_Readonly_Files  => Opt.Check_Readonly_Files,\n-               Do_Not_Execute        => Opt.Do_Not_Execute,\n-               Force_Compilations    => Opt.Force_Compilations,\n-               In_Place_Mode         => Opt.In_Place_Mode,\n-               Keep_Going            => Opt.Keep_Going,\n-               Initialize_ALI_Data   => True,\n-               Max_Process           => Opt.Maximum_Processes);\n \n-            if Opt.Verbose_Mode then\n-               Write_Str (\"End of compilation\");\n-               Write_Eol;\n-            end if;\n+               if Compilation_Failures /= 0 then\n+                  List_Bad_Compilations;\n+                  raise Compilation_Failed;\n+               end if;\n \n-            if Compilation_Failures /= 0 then\n-               List_Bad_Compilations;\n-               raise Compilation_Failed;\n-            end if;\n+               --  Regenerate libraries, if any and if object files\n+               --  have been regenerated\n \n-            --  Regenerate libraries, if any and if object files\n-            --  have been regenerated\n+               if Main_Project /= No_Project\n+                 and then MLib.Tgt.Libraries_Are_Supported\n+               then\n \n-            if Main_Project /= No_Project\n-              and then MLib.Tgt.Libraries_Are_Supported\n-            then\n+                  for Proj in Projects.First .. Projects.Last loop\n \n-               for Proj in Projects.First .. Projects.Last loop\n+                     if Proj /= Main_Project\n+                       and then Projects.Table (Proj).Flag1\n+                     then\n+                        MLib.Prj.Build_Library (For_Project => Proj);\n+                     end if;\n \n-                  if Proj /= Main_Project\n-                    and then Projects.Table (Proj).Flag1\n-                  then\n-                     MLib.Prj.Build_Library (For_Project => Proj);\n-                  end if;\n+                  end loop;\n \n-               end loop;\n+               end if;\n \n-            end if;\n+               if Opt.List_Dependencies then\n+                  if First_Compiled_File /= No_File then\n+                     Inform\n+                       (First_Compiled_File,\n+                        \"must be recompiled. Can't generate dependence list.\");\n+                  else\n+                     List_Depend;\n+                  end if;\n \n-            if Opt.List_Dependencies then\n-               if First_Compiled_File /= No_File then\n-                  Inform\n-                    (First_Compiled_File,\n-                     \"must be recompiled. Can't generate dependence list.\");\n-               else\n-                  List_Depend;\n-               end if;\n+               elsif First_Compiled_File = No_File\n+                 and then not Do_Bind_Step\n+                 and then not Opt.Quiet_Output\n+                 and then Osint.Number_Of_Files = 1\n+               then\n+                  if Unique_Compile then\n+                     Inform (Msg => \"object up to date.\");\n+                  else\n+                     Inform (Msg => \"objects up to date.\");\n+                  end if;\n \n-            elsif First_Compiled_File = No_File\n-              and then Opt.Compile_Only\n-              and then not Opt.Quiet_Output\n-              and then Osint.Number_Of_Files = 1\n-            then\n-               if Unique_Compile then\n-                  Inform (Msg => \"object up to date.\");\n-               else\n-                  Inform (Msg => \"objects up to date.\");\n+               elsif Opt.Do_Not_Execute\n+                 and then First_Compiled_File /= No_File\n+               then\n+                  Write_Name (First_Compiled_File);\n+                  Write_Eol;\n                end if;\n \n-            elsif Opt.Do_Not_Execute\n-              and then First_Compiled_File /= No_File\n-            then\n-               Write_Name (First_Compiled_File);\n-               Write_Eol;\n-            end if;\n-\n-            --  Stop after compile step if any of:\n+               --  Stop after compile step if any of:\n \n-            --    1) -n (Do_Not_Execute) specified\n+               --    1) -n (Do_Not_Execute) specified\n \n-            --    2) -l (List_Dependencies) specified (also sets Do_Not_Execute\n-            --       above, so this is probably superfluous).\n+               --    2) -l (List_Dependencies) specified (also sets\n+               --       Do_Not_Execute above, so this is probably superfluous).\n \n-            --    3) -c (Compile_Only) specified\n+               --    3) -c (Compile_Only) specified, but not -b (Bind_Only)\n \n-            --    4) Made unit cannot be a main unit\n+               --    4) Made unit cannot be a main unit\n \n-            if (Opt.Do_Not_Execute\n-                or Opt.List_Dependencies\n-                or Opt.Compile_Only\n-                or not Is_Main_Unit)\n-              and then not No_Main_Subprogram\n-            then\n-               if Osint.Number_Of_Files = 1 then\n-                  return;\n+               if (Opt.Do_Not_Execute\n+                   or Opt.List_Dependencies\n+                   or not Do_Bind_Step\n+                   or not Is_Main_Unit)\n+                 and then not No_Main_Subprogram\n+               then\n+                  if Osint.Number_Of_Files = 1 then\n+                     return;\n \n-               else\n-                  goto Next_Main;\n+                  else\n+                     goto Next_Main;\n+                  end if;\n                end if;\n-            end if;\n \n-            --  If the objects were up-to-date check if the executable file\n-            --  is also up-to-date. For now always bind and link on the JVM\n-            --  since there is currently no simple way to check the up-to-date\n-            --  status of objects\n+               --  If the objects were up-to-date check if the executable file\n+               --  is also up-to-date. For now always bind and link on the JVM\n+               --  since there is currently no simple way to check the\n+               --  up-to-date status of objects\n \n-            if not Hostparm.Java_VM and then First_Compiled_File = No_File then\n-               Executable_Stamp    := File_Stamp (Executable);\n+               if not Hostparm.Java_VM\n+                 and then First_Compiled_File = No_File\n+               then\n+                  Executable_Stamp    := File_Stamp (Executable);\n \n-               --  Once Executable_Obsolete is set to True, it is never reset\n-               --  to False, because it is too hard to accurately decide if\n-               --  a subsequent main need to be rebuilt or not.\n+                  --  Once Executable_Obsolete is set to True, it is never\n+                  --  reset to False, because it is too hard to accurately\n+                  --  decide if a subsequent main need to be rebuilt or not.\n \n-               Executable_Obsolete :=\n-                 Executable_Obsolete\n-                   or else Youngest_Obj_Stamp > Executable_Stamp;\n+                  Executable_Obsolete :=\n+                    Executable_Obsolete\n+                      or else Youngest_Obj_Stamp > Executable_Stamp;\n \n-               if not Executable_Obsolete then\n+                  if not Executable_Obsolete then\n \n-                  --  If no Ada object files obsolete the executable, check\n-                  --  for younger or missing linker files.\n+                     --  If no Ada object files obsolete the executable, check\n+                     --  for younger or missing linker files.\n \n-                  Check_Linker_Options\n-                    (Executable_Stamp, Youngest_Obj_File, Youngest_Obj_Stamp);\n+                     Check_Linker_Options\n+                       (Executable_Stamp,\n+                        Youngest_Obj_File,\n+                        Youngest_Obj_Stamp);\n \n-                  Executable_Obsolete := Youngest_Obj_File /= No_File;\n-               end if;\n+                     Executable_Obsolete := Youngest_Obj_File /= No_File;\n+                  end if;\n \n-               --  Return if the executable is up to date\n-               --  and otherwise motivate the relink/rebind.\n+                  --  Return if the executable is up to date\n+                  --  and otherwise motivate the relink/rebind.\n \n-               if not Executable_Obsolete then\n-                  if not Opt.Quiet_Output then\n-                     Inform (Executable, \"up to date.\");\n-                  end if;\n+                  if not Executable_Obsolete then\n+                     if not Opt.Quiet_Output then\n+                        Inform (Executable, \"up to date.\");\n+                     end if;\n \n-                  if Osint.Number_Of_Files = 1 then\n-                     return;\n+                     if Osint.Number_Of_Files = 1 then\n+                        return;\n \n-                  else\n-                     goto Next_Main;\n+                     else\n+                        goto Next_Main;\n+                     end if;\n                   end if;\n-               end if;\n \n-               if Executable_Stamp (1) = ' ' then\n-                  Verbose_Msg (Executable, \"missing.\", Prefix => \"  \");\n+                  if Executable_Stamp (1) = ' ' then\n+                     Verbose_Msg (Executable, \"missing.\", Prefix => \"  \");\n \n-               elsif Youngest_Obj_Stamp (1) = ' ' then\n-                  Verbose_Msg (Youngest_Obj_File, \"missing.\", Prefix => \"  \");\n+                  elsif Youngest_Obj_Stamp (1) = ' ' then\n+                     Verbose_Msg\n+                       (Youngest_Obj_File,\n+                        \"missing.\",\n+                        Prefix => \"  \");\n \n-               elsif Youngest_Obj_Stamp > Executable_Stamp then\n-                  Verbose_Msg (Youngest_Obj_File,\n-                           \"(\" & String (Youngest_Obj_Stamp) & \") newer than\",\n-                            Executable, \"(\" & String (Executable_Stamp) & \")\");\n+                  elsif Youngest_Obj_Stamp > Executable_Stamp then\n+                     Verbose_Msg\n+                       (Youngest_Obj_File,\n+                        \"(\" & String (Youngest_Obj_Stamp) & \") newer than\",\n+                        Executable,\n+                        \"(\" & String (Executable_Stamp) & \")\");\n \n-               else\n-                  Verbose_Msg (Executable, \"needs to be rebuild.\",\n-                               Prefix => \"  \");\n+                  else\n+                     Verbose_Msg\n+                       (Executable, \"needs to be rebuild.\",\n+                        Prefix => \"  \");\n \n+                  end if;\n                end if;\n-            end if;\n-         end Recursive_Compilation_Step;\n+            end Recursive_Compilation_Step;\n+\n+         end if;\n \n          --  If we are here, it means that we need to rebuilt the current\n          --  main. So we set Executable_Obsolete to True to make sure that\n@@ -3197,103 +3246,111 @@ package body Make is\n             pragma Assert (Main_ALI_File /= No_File);\n          end Main_ALI_In_Place_Mode_Step;\n \n-         Bind_Step : declare\n-            Args : Argument_List\n-                     (Binder_Switches.First .. Binder_Switches.Last);\n+         if Do_Bind_Step then\n+            Bind_Step : declare\n+               Args : Argument_List\n+                        (Binder_Switches.First .. Binder_Switches.Last);\n \n-         begin\n-            --  Get all the binder switches\n+            begin\n+               --  Get all the binder switches\n \n-            for J in Binder_Switches.First .. Binder_Switches.Last loop\n-               Args (J) := Binder_Switches.Table (J);\n-            end loop;\n+               for J in Binder_Switches.First .. Binder_Switches.Last loop\n+                  Args (J) := Binder_Switches.Table (J);\n+               end loop;\n \n-            if Main_Project /= No_Project then\n+               if Main_Project /= No_Project then\n \n-               --  Put all the source directories in ADA_INCLUDE_PATH,\n-               --  and all the object directories in ADA_OBJECTS_PATH\n+                  --  Put all the source directories in ADA_INCLUDE_PATH,\n+                  --  and all the object directories in ADA_OBJECTS_PATH\n \n-               Set_Ada_Paths (Main_Project, False);\n-            end if;\n+                  Set_Ada_Paths (Main_Project, False);\n+               end if;\n \n-            Bind (Main_ALI_File, Args);\n-         end Bind_Step;\n+               Bind (Main_ALI_File, Args);\n+            end Bind_Step;\n \n-         Link_Step : declare\n-            There_Are_Libraries  : Boolean := False;\n-            Linker_Switches_Last : constant Integer := Linker_Switches.Last;\n+         end if;\n \n-         begin\n+         if Do_Link_Step then\n \n-            if Main_Project /= No_Project then\n+            Link_Step : declare\n+               There_Are_Libraries  : Boolean := False;\n+               Linker_Switches_Last : constant Integer := Linker_Switches.Last;\n \n-               if MLib.Tgt.Libraries_Are_Supported then\n-                  Set_Libraries (Main_Project, There_Are_Libraries);\n-               end if;\n+            begin\n \n-               if There_Are_Libraries then\n+               if Main_Project /= No_Project then\n \n-                  --  Add -L<lib_dir> -lgnarl -lgnat -Wl,-rpath,<lib_dir>\n+                  if MLib.Tgt.Libraries_Are_Supported then\n+                     Set_Libraries (Main_Project, There_Are_Libraries);\n+                  end if;\n \n-                  Linker_Switches.Increment_Last;\n-                  Linker_Switches.Table (Linker_Switches.Last) :=\n-                    new String'(\"-L\" & MLib.Utl.Lib_Directory);\n-                  Linker_Switches.Increment_Last;\n-                  Linker_Switches.Table (Linker_Switches.Last) :=\n-                    new String'(\"-lgnarl\");\n-                  Linker_Switches.Increment_Last;\n-                  Linker_Switches.Table (Linker_Switches.Last) :=\n-                    new String'(\"-lgnat\");\n+                  if There_Are_Libraries then\n \n-                  declare\n-                     Option : constant String_Access :=\n-                                MLib.Tgt.Linker_Library_Path_Option\n-                                  (MLib.Utl.Lib_Directory);\n+                     --  Add -L<lib_dir> -lgnarl -lgnat -Wl,-rpath,<lib_dir>\n \n-                  begin\n-                     if Option /= null then\n-                        Linker_Switches.Increment_Last;\n-                        Linker_Switches.Table (Linker_Switches.Last) := Option;\n-                     end if;\n+                     Linker_Switches.Increment_Last;\n+                     Linker_Switches.Table (Linker_Switches.Last) :=\n+                       new String'(\"-L\" & MLib.Utl.Lib_Directory);\n+                     Linker_Switches.Increment_Last;\n+                     Linker_Switches.Table (Linker_Switches.Last) :=\n+                       new String'(\"-lgnarl\");\n+                     Linker_Switches.Increment_Last;\n+                     Linker_Switches.Table (Linker_Switches.Last) :=\n+                       new String'(\"-lgnat\");\n \n-                  end;\n+                     declare\n+                        Option : constant String_Access :=\n+                                   MLib.Tgt.Linker_Library_Path_Option\n+                                     (MLib.Utl.Lib_Directory);\n \n-               end if;\n+                     begin\n+                        if Option /= null then\n+                           Linker_Switches.Increment_Last;\n+                           Linker_Switches.Table (Linker_Switches.Last) :=\n+                             Option;\n+                        end if;\n \n-               --  Put the object directories in ADA_OBJECTS_PATH\n+                     end;\n \n-               Set_Ada_Paths (Main_Project, False);\n-            end if;\n+                  end if;\n \n-            declare\n-               Args : Argument_List\n-                 (Linker_Switches.First .. Linker_Switches.Last + 2);\n+                  --  Put the object directories in ADA_OBJECTS_PATH\n \n-            begin\n-               --  Get all the linker switches\n+                  Set_Ada_Paths (Main_Project, False);\n+               end if;\n \n-               for J in Linker_Switches.First .. Linker_Switches.Last loop\n-                  Args (J) := Linker_Switches.Table (J);\n-               end loop;\n+               declare\n+                  Args : Argument_List\n+                         (Linker_Switches.First .. Linker_Switches.Last + 2);\n \n-               --  And invoke the linker\n+               begin\n+                  --  Get all the linker switches\n \n-               if Non_Std_Executable then\n-                  Args (Linker_Switches.Last + 1) := new String'(\"-o\");\n-                  Args (Linker_Switches.Last + 2) :=\n-                    new String'(Get_Name_String (Executable));\n-                  Link (Main_ALI_File, Args);\n+                  for J in Linker_Switches.First .. Linker_Switches.Last loop\n+                     Args (J) := Linker_Switches.Table (J);\n+                  end loop;\n \n-               else\n-                  Link\n-                    (Main_ALI_File,\n-                     Args (Linker_Switches.First .. Linker_Switches.Last));\n-               end if;\n+                  --  And invoke the linker\n \n-            end;\n+                  if Non_Std_Executable then\n+                     Args (Linker_Switches.Last + 1) := new String'(\"-o\");\n+                     Args (Linker_Switches.Last + 2) :=\n+                       new String'(Get_Name_String (Executable));\n+                     Link (Main_ALI_File, Args);\n+\n+                  else\n+                     Link\n+                       (Main_ALI_File,\n+                        Args (Linker_Switches.First .. Linker_Switches.Last));\n+                  end if;\n \n-            Linker_Switches.Set_Last (Linker_Switches_Last);\n-         end Link_Step;\n+               end;\n+\n+               Linker_Switches.Set_Last (Linker_Switches_Last);\n+            end Link_Step;\n+\n+         end if;\n \n          --  We go to here when we skip the bind and link steps.\n \n@@ -4172,6 +4229,8 @@ package body Make is\n          then\n             Unique_Compile   := True;\n             Opt.Compile_Only := True;\n+            Do_Bind_Step     := False;\n+            Do_Link_Step     := False;\n \n          --  -Pprj (only once, and only on the command line)\n \n@@ -4251,19 +4310,20 @@ package body Make is\n          elsif Argv = \"-gnath\" then\n             null;\n \n-         --  By default all switches with more than one character\n-         --  or one character switches which are not in 'a' .. 'z'\n-         --  are passed to the compiler, unless we are dealing\n-         --  with a -jnum switch or a debug switch (starts with 'd')\n+         --  If -gnatc is specified, make sure the bind step and the link\n+         --  step are not executed.\n+\n+         elsif Argv'Length >= 6 and then Argv (2 .. 6) = \"gnatc\" then\n+\n+            --  If -gnatc is specified, make sure the bind step and the link\n+            --  step are not executed.\n \n-         elsif Argv'Length > 5\n-           and then Argv (2 .. 5) = \"gnat\"\n-           and then Argv (6) = 'c'\n-         then\n             Add_Switch (Argv, Compiler, And_Save => And_Save);\n             Opt.Operating_Mode := Opt.Check_Semantics;\n             Opt.Check_Object_Consistency := False;\n             Opt.Compile_Only             := True;\n+            Do_Bind_Step                 := False;\n+            Do_Link_Step                 := False;\n \n          elsif Argv (2 .. Argv'Last) = \"nostdlib\" then\n \n@@ -4274,10 +4334,18 @@ package body Make is\n             Add_Switch (Argv, Binder, And_Save => And_Save);\n \n          elsif Argv (2 .. Argv'Last) = \"nostdinc\" then\n+\n+            --  Pass -nostdinv to the Compiler and to gnatbind\n+\n             Opt.No_Stdinc := True;\n             Add_Switch (Argv, Compiler, And_Save => And_Save);\n             Add_Switch (Argv, Binder, And_Save => And_Save);\n \n+            --  By default all switches with more than one character\n+            --  or one character switches which are not in 'a' .. 'z'\n+            --  (except 'M') are passed to the compiler, unless we are dealing\n+            --  with a debug switch (starts with 'd')\n+\n          elsif Argv (2) /= 'd'\n            and then Argv (2 .. Argv'Last) /= \"M\"\n            and then (Argv'Length > 2 or else Argv (2) not in 'a' .. 'z')"}, {"sha": "ec219b53eb149f79003db4ed0bd7f65b886f4a0a", "filename": "gcc/ada/makeusg.adb", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffa903fe945d67e050d499021445212a4a27dc8/gcc%2Fada%2Fmakeusg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffa903fe945d67e050d499021445212a4a27dc8/gcc%2Fada%2Fmakeusg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeusg.adb?ref=7ffa903fe945d67e050d499021445212a4a27dc8", "patch": "@@ -6,9 +6,9 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.14 $\n+--                            $Revision$\n --                                                                          --\n---          Copyright (C) 1992-2000 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -68,10 +68,16 @@ begin\n    Write_Str (\"a       Consider all files, even readonly ali files\");\n    Write_Eol;\n \n+   --  Line for -b\n+\n+   Write_Switch_Char;\n+   Write_Str (\"b       Bind only\");\n+   Write_Eol;\n+\n    --  Line for -c\n \n    Write_Switch_Char;\n-   Write_Str (\"c       Compile only, do not bind and link\");\n+   Write_Str (\"c       Compile only\");\n    Write_Eol;\n \n    --  Line for -f\n@@ -99,6 +105,12 @@ begin\n    Write_Str (\"k       Keep going after compilation errors\");\n    Write_Eol;\n \n+   --  Line for -l\n+\n+   Write_Switch_Char;\n+   Write_Str (\"l       Link only\");\n+   Write_Eol;\n+\n    --  Line for -m\n \n    Write_Switch_Char;"}, {"sha": "9ed3579266d2f24afff8242fbf921c7ed36e8fee", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffa903fe945d67e050d499021445212a4a27dc8/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffa903fe945d67e050d499021445212a4a27dc8/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=7ffa903fe945d67e050d499021445212a4a27dc8", "patch": "@@ -143,6 +143,11 @@ package Opt is\n    --  Set to True if the binder needs to generate a file designed for\n    --  building a library. May be set to True by Gnatbind.Scan_Bind_Arg.\n \n+   Bind_Only : Boolean := False;\n+   --  GNATMAKE\n+   --  Set to True to skip compile and link steps\n+   --  (except when Compile_Only and/or Link_Only are True).\n+\n    Brief_Output : Boolean := False;\n    --  GNAT, GNATBIND\n    --  Force brief error messages to standard error, even if verbose mode is\n@@ -188,7 +193,7 @@ package Opt is\n \n    Compile_Only : Boolean := False;\n    --  GNATMAKE\n-   --  Set to True to skip bind and link step.\n+   --  Set to True to skip bind and link steps (except when Bind_Only is True)\n \n    Compress_Debug_Names : Boolean := False;\n    --  GNATMAKE\n@@ -428,6 +433,11 @@ package Opt is\n    --  When True signals gnatmake to ignore compilation errors and keep\n    --  processing sources until there is no more work.\n \n+   Link_Only : Boolean := False;\n+   --  GNATMAKE\n+   --  Set to True to skip compile and bind steps\n+   --  (except when Bind_Only is set to True).\n+\n    List_Units : Boolean := False;\n    --  GNAT\n    --  List units in the active library"}, {"sha": "551f8bd65c4700e0033c35c7cf818bc4ffeb253e", "filename": "gcc/ada/switch.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffa903fe945d67e050d499021445212a4a27dc8/gcc%2Fada%2Fswitch.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffa903fe945d67e050d499021445212a4a27dc8/gcc%2Fada%2Fswitch.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch.adb?ref=7ffa903fe945d67e050d499021445212a4a27dc8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.194 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1992-2001, Free Software Foundation, Inc.         --\n --                                                                          --\n@@ -1164,6 +1164,12 @@ package body Switch is\n             Ptr := Ptr + 1;\n             Check_Readonly_Files := True;\n \n+         --  Processing for b switch\n+\n+         when 'b' =>\n+            Ptr := Ptr + 1;\n+            Bind_Only := True;\n+\n          --  Processing for c switch\n \n          when 'c' =>\n@@ -1245,6 +1251,12 @@ package body Switch is\n             Ptr := Ptr + 1;\n             Keep_Going := True;\n \n+         --  Processing for l switch\n+\n+         when 'l' =>\n+            Ptr := Ptr + 1;\n+            Link_Only := True;\n+\n          when 'M' =>\n             Ptr := Ptr + 1;\n             List_Dependencies := True;"}]}