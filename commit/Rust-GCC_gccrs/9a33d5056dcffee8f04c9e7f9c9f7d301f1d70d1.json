{"sha": "9a33d5056dcffee8f04c9e7f9c9f7d301f1d70d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEzM2Q1MDU2ZGNmZmVlOGYwNGM5ZTdmOWM5ZjdkMzAxZjFkNzBkMQ==", "commit": {"author": {"name": "Christopher Faylor", "email": "cgf@cygnus.com", "date": "2001-04-09T02:50:34Z"}, "committer": {"name": "Christopher Faylor", "email": "cgf@gcc.gnu.org", "date": "2001-04-09T02:50:34Z"}, "message": "cygwin.h (STARTFILE_SPEC): search */lib/w32api by default.\n\n* config/i386/cygwin.h (STARTFILE_SPEC): search */lib/w32api by default.\n(CPP_SPEC): Always search */include/w32api for header files.\n(ASM_OUTPUT_SECTION_NAME): Avoid testing NULL DECL.\n(LINK_SPEC): Add \"cyg\" to the library search prefixes.\n\nFrom-SVN: r41196", "tree": {"sha": "28cec12a4fd36bc610acd83ddf6d13f94334ff76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28cec12a4fd36bc610acd83ddf6d13f94334ff76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a33d5056dcffee8f04c9e7f9c9f7d301f1d70d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a33d5056dcffee8f04c9e7f9c9f7d301f1d70d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a33d5056dcffee8f04c9e7f9c9f7d301f1d70d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a33d5056dcffee8f04c9e7f9c9f7d301f1d70d1/comments", "author": null, "committer": null, "parents": [{"sha": "9b38026f1840853f0ed034af677ab2d8628d7dc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b38026f1840853f0ed034af677ab2d8628d7dc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b38026f1840853f0ed034af677ab2d8628d7dc2"}], "stats": {"total": 77, "additions": 43, "deletions": 34}, "files": [{"sha": "7347947d5fde04e03d745dec852ff362b74471f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a33d5056dcffee8f04c9e7f9c9f7d301f1d70d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a33d5056dcffee8f04c9e7f9c9f7d301f1d70d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a33d5056dcffee8f04c9e7f9c9f7d301f1d70d1", "patch": "@@ -1,3 +1,10 @@\n+Sun Apr  8 22:20:27 2001  Christopher Faylor <cgf@cygnus.com>\n+\n+\t* config/i386/cygwin.h (STARTFILE_SPEC): search */lib/w32api by default.\n+\t(CPP_SPEC): Always search */include/w32api for header files.\n+\t(ASM_OUTPUT_SECTION_NAME): Avoid testing NULL DECL.\n+\t(LINK_SPEC): Add \"cyg\" to the library search prefixes.\n+\n 2001-04-08  Philip Blundell  <philb@gnu.org>\n \n \t* config/arm/arm.h (ASM_OUTPUT_LABELREF): Use asm_fprintf."}, {"sha": "a2dac9485fb78260ee7e18f3c8092bd9e1072462", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 36, "deletions": 34, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a33d5056dcffee8f04c9e7f9c9f7d301f1d70d1/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a33d5056dcffee8f04c9e7f9c9f7d301f1d70d1/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=9a33d5056dcffee8f04c9e7f9c9f7d301f1d70d1", "patch": "@@ -60,37 +60,22 @@ Boston, MA 02111-1307, USA. */\n { \"no-nop-fun-dllimport\", -MASK_NOP_FUN_DLLIMPORT, \"\" }, \\\n { \"threads\",\t\t  0, N_(\"Use Mingw-specific thread support\") },\n \n-\n-/* Support the __declspec keyword by turning them into attributes.\n-   We currently only support: dllimport and dllexport.\n-   Note that the current way we do this may result in a collision with\n-   predefined attributes later on.  This can be solved by using one attribute,\n-   say __declspec__, and passing args to it.  The problem with that approach\n-   is that args are not accumulated: each new appearance would clobber any\n-   existing args.  */\n-\n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \"-D_X86_=1 -Asystem=winnt\"\n \n-/* Normally, -lgcc is not needed since everything in it is in the DLL, but we\n-   want to allow things to be added to it when installing new versions of\n-   GCC without making a new CYGWIN.DLL, so we leave it.  Profiling is handled\n-   by calling the init function from the prologue. */\n-\n-#undef LIBGCC_SPEC\n-#define LIBGCC_SPEC \"%{mno-cygwin: %{mthreads:-lmingwthrd} -lmingw32} -lgcc %{mno-cygwin:-lmoldname -lmsvcrt}\"\n-\n #ifdef CROSS_COMPILE\n #define CYGWIN_INCLUDES \"-idirafter \" CYGWIN_CROSS_DIR \"/include\"\n-#define CYGWIN_W32API \"-idirafter \" CYGWIN_CROSS_DIR \"/include/w32api\"\n+#define W32API_INC \"-idirafter \" CYGWIN_CROSS_DIR \"/include/w32api\"\n+#define W32API_LIB \"-L\" CYGWIN_CROSS_DIR \"/lib/w32api/\"\n #define CYGWIN_LIB CYGWIN_CROSS_DIR \"/lib\"\n #define MINGW_LIBS \"-L\" CYGWIN_CROSS_DIR \"/lib/mingw\"\n #define MINGW_INCLUDES \"-isystem \" CYGWIN_CROSS_DIR \"/include/mingw/g++-3 \"\\\n \t\t       \"-isystem \" CYGWIN_CROSS_DIR \"/include/mingw/g++ \"\\\n \t\t       \"-idirafter \" CYGWIN_CROSS_DIR \"/include/mingw\"\n #else\n #define CYGWIN_INCLUDES \"-isystem /usr/local/include -idirafter /usr/include\"\n-#define CYGWIN_W32API \"-idirafter /usr/include/w32api\"\n+#define W32API_INC \"-idirafter /usr/include/w32api\"\n+#define W32API_LIB \"-L/usr/lib/w32api/\"\n #define CYGWIN_LIB \"/usr/lib\"\n #define MINGW_LIBS \"-L/usr/local/lib/mingw -L/usr/lib/mingw\"\n #define MINGW_INCLUDES \"-isystem /usr/include/mingw/g++-3 \"\\\n@@ -99,10 +84,13 @@ Boston, MA 02111-1307, USA. */\n \t\t       \"-idirafter /usr/include/mingw\"\n #endif\n \n-#undef STARTFILE_SPEC\n-#define STARTFILE_SPEC \"%{shared|mdll: %{mno-cygwin:dllcrt2%O%s}} \\\n-  %{!shared: %{!mdll: %{!mno-cygwin:crt0%O%s} %{mno-cygwin:\" MINGW_LIBS \" mingw/crt2%O%s} \\\n-  %{pg:gcrt0%O%s}}}\"\n+/* Support the __declspec keyword by turning them into attributes.\n+   We currently only support: dllimport and dllexport.\n+   Note that the current way we do this may result in a collision with\n+   predefined attributes later on.  This can be solved by using one attribute,\n+   say __declspec__, and passing args to it.  The problem with that approach\n+   is that args are not accumulated: each new appearance would clobber any\n+   existing args.  */\n \n #undef CPP_SPEC\n #define CPP_SPEC \"%(cpp_cpu) %{posix:-D_POSIX_SOURCE} \\\n@@ -112,14 +100,30 @@ Boston, MA 02111-1307, USA. */\n     -D_cdecl=__attribute__((__cdecl__))} \\\n   -D__declspec(x)=__attribute__((x)) \\\n   -D__i386__ -D__i386 \\\n-  %{mno-win32: %{mno-cygwin: %emno-cygwin and mno-win32 are not compatible}} \\\n-  %{mno-cygwin:-D__MSVCRT__ -D__MINGW32__ %{mthreads:-D_MT} \" MINGW_INCLUDES \\\n-    \" -mwin32} \\\n-  %{!mno-cygwin:-D__CYGWIN32__ -D__CYGWIN__ -Dunix -D__unix__ -D__unix \\\n-    \" CYGWIN_INCLUDES \"} \\\n-  %{mwin32:-DWIN32 -D_WIN32 -D__WIN32 -D__WIN32__ -DWINNT \" CYGWIN_W32API \"} \\\n+  %{mno-win32:%{mno-cygwin: %emno-cygwin and mno-win32 are not compatible}} \\\n+  %{mno-cygwin:-D__MSVCRT__ -D__MINGW32__ %{mthreads:-D_MT} \"\\\n+    MINGW_INCLUDES \"} \\\n+  %{!mno-cygwin:-D__CYGWIN32__ -D__CYGWIN__ -Dunix -D__unix__ -D__unix \"\\\n+    CYGWIN_INCLUDES \"}\\\n+  %{mwin32|no-cygwin:-DWIN32 -D_WIN32 -D__WIN32 -D__WIN32__ -DWINNT}\\\n+  %{!mno-win32:\" W32API_INC \"}\\\n+\"\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC W32API_LIB \"\\\n+  %{shared|mdll: %{mno-cygwin:\" MINGW_LIBS \" mingw/dllcrt2%O%s}}\\\n+  %{!shared: %{!mdll: %{!mno-cygwin:crt0%O%s} %{mno-cygwin:\" MINGW_LIBS \" mingw/crt2%O%s}\\\n+  %{pg:gcrt0%O%s}}}\\\n \"\n \n+/* Normally, -lgcc is not needed since everything in it is in the DLL, but we\n+   want to allow things to be added to it when installing new versions of\n+   GCC without making a new CYGWIN.DLL, so we leave it.  Profiling is handled\n+   by calling the init function from the prologue. */\n+\n+#undef LIBGCC_SPEC\n+#define LIBGCC_SPEC \"%{mno-cygwin: %{mthreads:-lmingwthrd} -lmingw32} -lgcc %{mno-cygwin:-lmoldname -lmsvcrt}\"\n+\n /* This macro defines names of additional specifications to put in the specs\n    that can be used in various specifications like CC1_SPEC.  Its definition\n    is an initializer with a subgrouping for each command option.\n@@ -154,7 +158,8 @@ Boston, MA 02111-1307, USA. */\n   %{static:-Bstatic} %{!static:-Bdynamic} \\\n   %{shared|mdll: -e \\\n     %{mno-cygwin:_DllMainCRTStartup@12} \\\n-    %{!mno-cygwin:__cygwin_dll_entry@12}}\"\n+    %{!mno-cygwin:__cygwin_dll_entry@12}}\\\n+  --dll-search-prefix=cyg\"\n \n #undef MATH_LIBRARY\n #define MATH_LIBRARY \"\"\n@@ -451,7 +456,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       type = SECT_RW;\t\t\t\t\t\t\t\\\n-      if (TREE_CODE (DECL) == VAR_DECL\t\t\t\t\t\\\n+      if (DECL && TREE_CODE (DECL) == VAR_DECL\t\t\t\t\\\n \t  && lookup_attribute (\"shared\", DECL_MACHINE_ATTRIBUTES (DECL))) \\\n \tmode = \"ws\";\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n@@ -523,9 +528,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef ASM_COMMENT_START\n #define ASM_COMMENT_START \" #\"\n \n-/* DWARF2 Unwinding doesn't work with exception handling yet. */\n-#define DWARF2_UNWIND_INFO 0\n-\n /* Don't assume anything about the header files. */\n #define NO_IMPLICIT_EXTERN_C\n "}]}