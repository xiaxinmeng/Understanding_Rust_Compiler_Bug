{"sha": "c149e48765862535842cf968dc10667038988606", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE0OWU0ODc2NTg2MjUzNTg0MmNmOTY4ZGMxMDY2NzAzODk4ODYwNg==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-09-05T08:30:17Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-09-05T08:30:17Z"}, "message": "avr.h (progmem_section): Remove Declaration.\n\n\t\n\t* config/avr/avr.h (progmem_section): Remove Declaration.\n\t* config/avr/avr.c (progmem_section): Make static and rename to\n\tprogmem_swtable_section.\n\t(avr_output_addr_vec_elt): No need to switch sections.\n\t(avr_asm_init_sections): Use output_section_asm_op as section\n\tcallback for progmem_swtable_section.\n\t(avr_output_progmem_section_asm_op): Remove Function.\n\t(TARGET_ASM_FUNCTION_RODATA_SECTION): New Define.\n\t(avr_asm_function_rodata_section): New static Function.\n\t* config/avr/elf.h (ASM_OUTPUT_BEFORE_CASE_LABEL): Output\n\talignment 2**1 for jump tables.\n\nFrom-SVN: r178525", "tree": {"sha": "d79f739e3ccb34cee41d9735eb835d94b72a9001", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d79f739e3ccb34cee41d9735eb835d94b72a9001"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c149e48765862535842cf968dc10667038988606", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c149e48765862535842cf968dc10667038988606", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c149e48765862535842cf968dc10667038988606", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c149e48765862535842cf968dc10667038988606/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5ceeb87632560467c6e4350a0fa5742ea338ae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5ceeb87632560467c6e4350a0fa5742ea338ae6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5ceeb87632560467c6e4350a0fa5742ea338ae6"}], "stats": {"total": 123, "additions": 101, "deletions": 22}, "files": [{"sha": "5a9a33989c96fdf163c76e59e2ab5bfa1f6de8ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c149e48765862535842cf968dc10667038988606/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c149e48765862535842cf968dc10667038988606/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c149e48765862535842cf968dc10667038988606", "patch": "@@ -1,3 +1,17 @@\n+2011-09-05  Georg-Johann Lay  <avr@gjlay.de>\n+\t\n+\t* config/avr/avr.h (progmem_section): Remove Declaration.\n+\t* config/avr/avr.c (progmem_section): Make static and rename to\n+\tprogmem_swtable_section.\n+\t(avr_output_addr_vec_elt): No need to switch sections.\n+\t(avr_asm_init_sections): Use output_section_asm_op as section\n+\tcallback for progmem_swtable_section.\n+\t(avr_output_progmem_section_asm_op): Remove Function.\n+\t(TARGET_ASM_FUNCTION_RODATA_SECTION): New Define.\n+\t(avr_asm_function_rodata_section): New static Function.\n+\t* config/avr/elf.h (ASM_OUTPUT_BEFORE_CASE_LABEL): Output\n+\talignment 2**1 for jump tables.\n+\n 2011-09-04  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-inline-analysis.c (set_cond_stmt_execution_predicate): Check that"}, {"sha": "d267ef0090129441454edf4d180f2a1014254b46", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 85, "deletions": 17, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c149e48765862535842cf968dc10667038988606/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c149e48765862535842cf968dc10667038988606/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=c149e48765862535842cf968dc10667038988606", "patch": "@@ -113,6 +113,7 @@ static void avr_function_arg_advance (cumulative_args_t, enum machine_mode,\n static bool avr_function_ok_for_sibcall (tree, tree);\n static void avr_asm_named_section (const char *name, unsigned int flags, tree decl);\n static void avr_encode_section_info (tree, rtx, int);\n+static section* avr_asm_function_rodata_section (tree);\n \n /* Allocate registers from r25 to r8 for parameters for function calls.  */\n #define FIRST_CUM_REG 26\n@@ -135,7 +136,8 @@ const struct base_arch_s *avr_current_arch;\n /* Current device.  */\n const struct mcu_type_s *avr_current_device;\n \n-section *progmem_section;\n+/* Section to put switch tables in.  */\n+static GTY(()) section *progmem_swtable_section;\n \n /* To track if code will use .bss and/or .data.  */\n bool avr_need_clear_bss_p = false;\n@@ -263,6 +265,8 @@ static const struct attribute_spec avr_attribute_table[] =\n #undef TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN avr_expand_builtin\n \n+#undef TARGET_ASM_FUNCTION_RODATA_SECTION\n+#define TARGET_ASM_FUNCTION_RODATA_SECTION avr_asm_function_rodata_section\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -5036,18 +5040,6 @@ avr_insert_attributes (tree node, tree *attributes)\n     }\n }\n \n-/* A get_unnamed_section callback for switching to progmem_section.  */\n-\n-static void\n-avr_output_progmem_section_asm_op (const void *arg ATTRIBUTE_UNUSED)\n-{\n-  fprintf (asm_out_file,\n-\t   \"\\t.section .progmem.gcc_sw_table, \\\"%s\\\", @progbits\\n\",\n-\t   AVR_HAVE_JMP_CALL ? \"a\" : \"ax\");\n-  /* Should already be aligned, this is just to be safe if it isn't.  */\n-  fprintf (asm_out_file, \"\\t.p2align 1\\n\");\n-}\n-\n \n /* Implement `ASM_OUTPUT_ALIGNED_DECL_LOCAL'.  */\n /* Implement `ASM_OUTPUT_ALIGNED_DECL_COMMON'.  */\n@@ -5098,9 +5090,23 @@ avr_output_bss_section_asm_op (const void *data)\n static void\n avr_asm_init_sections (void)\n {\n-  progmem_section = get_unnamed_section (AVR_HAVE_JMP_CALL ? 0 : SECTION_CODE,\n-\t\t\t\t\t avr_output_progmem_section_asm_op,\n-\t\t\t\t\t NULL);\n+  /* Set up a section for jump tables.  Alignment is handled by\n+     ASM_OUTPUT_BEFORE_CASE_LABEL.  */\n+  \n+  if (AVR_HAVE_JMP_CALL)\n+    {\n+      progmem_swtable_section\n+        = get_unnamed_section (0, output_section_asm_op,\n+                               \"\\t.section\\t.progmem.gcc_sw_table\"\n+                               \",\\\"a\\\",@progbits\");\n+    }\n+  else\n+    {\n+      progmem_swtable_section\n+        = get_unnamed_section (SECTION_CODE, output_section_asm_op,\n+                               \"\\t.section\\t.progmem.gcc_sw_table\"\n+                               \",\\\"ax\\\",@progbits\");\n+    }\n \n   /* Override section callbacks to keep track of `avr_need_clear_bss_p'\n      resp. `avr_need_copy_data_p'.  */\n@@ -5111,6 +5117,69 @@ avr_asm_init_sections (void)\n }\n \n \n+/* Implement `TARGET_ASM_FUNCTION_RODATA_SECTION'.  */\n+\n+static section*\n+avr_asm_function_rodata_section (tree decl)\n+{\n+  /* If a function is unused and optimized out by -ffunction-sections\n+     and --gc-sections, ensure that the same will happen for its jump\n+     tables by putting them into individual sections.  */\n+\n+  unsigned int flags;\n+  section * frodata;\n+\n+  /* Get the frodata section from the default function in varasm.c\n+     but treat function-associated data-like jump tables as code\n+     rather than as user defined data.  AVR has no constant pools.  */\n+  {\n+    int fdata = flag_data_sections;\n+\n+    flag_data_sections = flag_function_sections;\n+    frodata = default_function_rodata_section (decl);\n+    flag_data_sections = fdata;\n+    flags = frodata->common.flags;\n+  }\n+\n+  if (frodata != readonly_data_section\n+      && flags & SECTION_NAMED)\n+    {\n+      /* Adjust section flags and replace section name prefix.  */\n+\n+      unsigned int i;\n+\n+      static const char* const prefix[] =\n+        {\n+          \".rodata\",          \".progmem.gcc_sw_table\",\n+          \".gnu.linkonce.r.\", \".gnu.linkonce.t.\"\n+        };\n+\n+      for (i = 0; i < sizeof (prefix) / sizeof (*prefix); i += 2)\n+        {\n+          const char * old_prefix = prefix[i];\n+          const char * new_prefix = prefix[i+1];\n+          const char * name = frodata->named.name;\n+\n+          if (STR_PREFIX_P (name, old_prefix))\n+            {\n+              char *rname = (char*) alloca (1 + strlen (name)\n+                                            + strlen (new_prefix)\n+                                            - strlen (old_prefix));\n+              \n+              strcat (stpcpy (rname, new_prefix), name + strlen (old_prefix));\n+\n+              flags &= ~SECTION_CODE;\n+              flags |= AVR_HAVE_JMP_CALL ? 0 : SECTION_CODE;\n+              \n+              return get_section (rname, flags, frodata->named.decl);\n+            }\n+        }\n+    }\n+        \n+  return progmem_swtable_section;\n+}\n+\n+\n /* Implement `TARGET_ASM_NAMED_SECTION'.  */\n /* Track need of __do_clear_bss, __do_copy_data for named sections.  */\n \n@@ -6693,7 +6762,6 @@ avr_output_bld (rtx operands[], int bit_nr)\n void\n avr_output_addr_vec_elt (FILE *stream, int value)\n {\n-  switch_to_section (progmem_section);\n   if (AVR_HAVE_JMP_CALL)\n     fprintf (stream, \"\\t.word gs(.L%d)\\n\", value);\n   else"}, {"sha": "dbb0b4c207ac7db4eef9ffc847b97a317ec9010c", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c149e48765862535842cf968dc10667038988606/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c149e48765862535842cf968dc10667038988606/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=c149e48765862535842cf968dc10667038988606", "patch": "@@ -127,10 +127,6 @@ extern const struct base_arch_s avr_arch_types[];\n \n #define TARGET_CPU_CPP_BUILTINS()\tavr_cpu_cpp_builtins (pfile)\n \n-#if !defined(IN_LIBGCC2) && !defined(IN_TARGET_LIBS)\n-extern GTY(()) section *progmem_section;\n-#endif\n-\n #define AVR_HAVE_JMP_CALL (avr_current_arch->have_jmp_call && !TARGET_SHORT_CALLS)\n #define AVR_HAVE_MUL (avr_current_arch->have_mul)\n #define AVR_HAVE_MOVW (avr_current_arch->have_movw_lpmx)"}, {"sha": "ebda5dd11e01c8279b896f8d06d9c9fa57f05703", "filename": "gcc/config/avr/elf.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c149e48765862535842cf968dc10667038988606/gcc%2Fconfig%2Favr%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c149e48765862535842cf968dc10667038988606/gcc%2Fconfig%2Favr%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Felf.h?ref=c149e48765862535842cf968dc10667038988606", "patch": "@@ -37,9 +37,10 @@\n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)     \\\n   avr_asm_declare_function_name ((FILE), (NAME), (DECL))\n \n+/* Output alignment 2**1 for jump tables.  */\n #undef ASM_OUTPUT_BEFORE_CASE_LABEL\n #define ASM_OUTPUT_BEFORE_CASE_LABEL(FILE, PREFIX, NUM, TABLE) \\\n-  switch_to_section (progmem_section);\n+  fprintf (FILE, \"\\t.p2align\\t1\\n\");\n \n /* Be conservative in crtstuff.c.  */\n #undef INIT_SECTION_ASM_OP"}]}