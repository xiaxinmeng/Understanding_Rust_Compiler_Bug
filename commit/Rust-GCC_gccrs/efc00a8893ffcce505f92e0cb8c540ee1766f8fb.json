{"sha": "efc00a8893ffcce505f92e0cb8c540ee1766f8fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZjMDBhODg5M2ZmY2NlNTA1ZjkyZTBjYjhjNTQwZWUxNzY2ZjhmYg==", "commit": {"author": {"name": "Patrick Bernardi", "email": "bernardi@adacore.com", "date": "2019-08-20T09:49:41Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-20T09:49:41Z"}, "message": "[Ada] New pragma Aggregate_Individually_Assign\n\nWhere possible GNAT will store the binary representation of a record\naggregate in memory for space and performance reasons. This\nconfiguration pragma changes this behaviour so that record aggregates\nare instead always converted into individual assignment statements.\n\nThe following package pack.ads:\n\n-- pack.ads\n\npragma Aggregate_Individually_Assign;\npragma Restrictions (No_Multiple_Elaboration);\n\npackage Pack is\n   type A_Rec is record\n      A, B, C, D : Boolean;\n   end record;\n\n   A : A_Rec := (True, False, True, True);\nend Pack;\n\nwhen compiled with\n\ngcc -c -gnatdg pack.ads\n\nshould produce the following output:\n\nSource recreated from tree for Pack (spec)\n------------------------------------------\n\npragma aggregate_individually_assign;\npragma restrictions (no_multiple_elaboration);\n\npackage pack is\n   type pack__a_rec is record\n      a : boolean;\n      b : boolean;\n      c : boolean;\n      d : boolean;\n   end record;\n   freeze pack__a_rec [\n      procedure pack__a_recIP (_init : out pack__a_rec) is\n      begin\n         %push_constraint_error_label ()\n         %push_program_error_label ()\n         %push_storage_error_label ()\n         null;\n         %pop_constraint_error_label\n         %pop_program_error_label\n         %pop_storage_error_label\n         return;\n      end pack__a_recIP;\n   ]\n   pack__a : pack__a_rec := (\n      a => true,\n      b => false,\n      c => true,\n      d => true);\n   pack__a.a := true;\n   pack__a.b := false;\n   pack__a.c := true;\n   pack__a.d := true;\n   null;\nend pack;\n\n2019-08-20  Patrick Bernardi  <bernardi@adacore.com>\n\ngcc/ada/\n\n\t* exp_aggr.adb (Expand_Record_Aggregate): Always convert a\n\trecord Aggregate to assignment statements if the option\n\tAggregate_Individually_Assign is set.\n\t* opt.ads (Aggregate_Individually_Assign): New option.\n\t* par-prag.adb (Prag): Add Pragma_Aggregate_Individually_Assign.\n\t* sem_prag.adb (Analyze_Pragma): Likewise.\n\t* snames.ads-tmpl: Add Pragma_Aggregate_Individually_Assign and\n\tName_Aggregate_Individually_Assign.\n\t* doc/gnat_rm/implementation_defined_pragmas.rst: Document\n\tpragma Aggregate_Individually_Assign.\n\t* gnat_rm.texi: Regenerate.\n\nFrom-SVN: r274730", "tree": {"sha": "c7053f6938857672a3af3e0dc0c1ca4afc4f9c6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7053f6938857672a3af3e0dc0c1ca4afc4f9c6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efc00a8893ffcce505f92e0cb8c540ee1766f8fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc00a8893ffcce505f92e0cb8c540ee1766f8fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efc00a8893ffcce505f92e0cb8c540ee1766f8fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc00a8893ffcce505f92e0cb8c540ee1766f8fb/comments", "author": {"login": "burratoo", "id": 23646118, "node_id": "MDQ6VXNlcjIzNjQ2MTE4", "avatar_url": "https://avatars.githubusercontent.com/u/23646118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/burratoo", "html_url": "https://github.com/burratoo", "followers_url": "https://api.github.com/users/burratoo/followers", "following_url": "https://api.github.com/users/burratoo/following{/other_user}", "gists_url": "https://api.github.com/users/burratoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/burratoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/burratoo/subscriptions", "organizations_url": "https://api.github.com/users/burratoo/orgs", "repos_url": "https://api.github.com/users/burratoo/repos", "events_url": "https://api.github.com/users/burratoo/events{/privacy}", "received_events_url": "https://api.github.com/users/burratoo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "32501d71a9e686c148171671d18e510aa719038c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32501d71a9e686c148171671d18e510aa719038c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32501d71a9e686c148171671d18e510aa719038c"}], "stats": {"total": 1732, "additions": 903, "deletions": 829}, "files": [{"sha": "cfc609aa4334856f7b5c3500c8b325d08da2acd6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc00a8893ffcce505f92e0cb8c540ee1766f8fb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc00a8893ffcce505f92e0cb8c540ee1766f8fb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=efc00a8893ffcce505f92e0cb8c540ee1766f8fb", "patch": "@@ -1,3 +1,17 @@\n+2019-08-20  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* exp_aggr.adb (Expand_Record_Aggregate): Always convert a\n+\trecord Aggregate to assignment statements if the option\n+\tAggregate_Individually_Assign is set.\n+\t* opt.ads (Aggregate_Individually_Assign): New option.\n+\t* par-prag.adb (Prag): Add Pragma_Aggregate_Individually_Assign.\n+\t* sem_prag.adb (Analyze_Pragma): Likewise.\n+\t* snames.ads-tmpl: Add Pragma_Aggregate_Individually_Assign and\n+\tName_Aggregate_Individually_Assign.\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Document\n+\tpragma Aggregate_Individually_Assign.\n+\t* gnat_rm.texi: Regenerate.\n+\n 2019-08-20  Bob Duff  <duff@adacore.com>\n \n \t* par-ch4.adb: Minor wording change in error messages."}, {"sha": "7614504abbf284a6d002bc2aad14327ab0bb69fc", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc00a8893ffcce505f92e0cb8c540ee1766f8fb/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc00a8893ffcce505f92e0cb8c540ee1766f8fb/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=efc00a8893ffcce505f92e0cb8c540ee1766f8fb", "patch": "@@ -371,6 +371,21 @@ Syntax:\n This configuration pragma is a synonym for pragma Ada_12 and has the\n same syntax and effect.\n \n+Pragma Aggregate_Individually_Assign\n+====================================\n+\n+Syntax:\n+\n+.. code-block:: ada\n+\n+  pragma Aggregate_Individually_Assign;\n+\n+Where possible GNAT will store the binary representation of a record aggregate\n+in memory for space and performance reasons. This configuration pragma changes\n+this behaviour so that record aggregates are instead always converted into\n+individual assignment statements.\n+\n+\n Pragma Allow_Integer_Address\n ============================\n "}, {"sha": "d720820881ab4ad1912cb4bff9bd7e610894bdc1", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc00a8893ffcce505f92e0cb8c540ee1766f8fb/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc00a8893ffcce505f92e0cb8c540ee1766f8fb/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=efc00a8893ffcce505f92e0cb8c540ee1766f8fb", "patch": "@@ -7478,6 +7478,12 @@ package body Exp_Aggr is\n          return;\n       end if;\n \n+      --  If the pramga Aggregate_Individually_Assign is set always convert to\n+      --  assignments.\n+\n+      if Aggregate_Individually_Assign then\n+         Convert_To_Assignments (N, Typ);\n+\n       --  Ada 2005 (AI-318-2): We need to convert to assignments if components\n       --  are build-in-place function calls. The assignments will each turn\n       --  into a build-in-place function call. If components are all static,\n@@ -7486,7 +7492,7 @@ package body Exp_Aggr is\n       --  Extension aggregates, aggregates in extended return statements, and\n       --  aggregates for C++ imported types must be expanded.\n \n-      if Ada_Version >= Ada_2005 and then Is_Limited_View (Typ) then\n+      elsif Ada_Version >= Ada_2005 and then Is_Limited_View (Typ) then\n          if not Nkind_In (Parent (N), N_Component_Association,\n                                       N_Object_Declaration)\n          then"}, {"sha": "dbd299cdd5185faca423cf726a1e20be8f66556d", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 846, "deletions": 828, "changes": 1674, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc00a8893ffcce505f92e0cb8c540ee1766f8fb/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc00a8893ffcce505f92e0cb8c540ee1766f8fb/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=efc00a8893ffcce505f92e0cb8c540ee1766f8fb"}, {"sha": "a07db751c1174102549057a0b4af42767a1a54dd", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc00a8893ffcce505f92e0cb8c540ee1766f8fb/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc00a8893ffcce505f92e0cb8c540ee1766f8fb/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=efc00a8893ffcce505f92e0cb8c540ee1766f8fb", "patch": "@@ -191,6 +191,11 @@ package Opt is\n    --  GNAT, GNATBIND\n    --  Set True if package System has the line \"type Address is private;\"\n \n+   Aggregate_Individually_Assign : Boolean := False;\n+   --  GNAT\n+   --  Set True if record aggregates are to be always converted into assignment\n+   --  statements. Set through the corresponding pragma.\n+\n    All_Errors_Mode : Boolean := False;\n    --  GNAT\n    --  Flag set to force display of multiple errors on a single line and"}, {"sha": "65ee0354e112ad066f7923301c51de7830ba7907", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc00a8893ffcce505f92e0cb8c540ee1766f8fb/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc00a8893ffcce505f92e0cb8c540ee1766f8fb/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=efc00a8893ffcce505f92e0cb8c540ee1766f8fb", "patch": "@@ -1319,6 +1319,7 @@ begin\n          | Pragma_Acc_Kernels\n          | Pragma_Acc_Loop\n          | Pragma_Acc_Parallel\n+         | Pragma_Aggregate_Individually_Assign\n          | Pragma_Async_Readers\n          | Pragma_Async_Writers\n          | Pragma_Assertion_Policy"}, {"sha": "05bc6f582a5e8396cf3dada74eaa3a0f90c3e618", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc00a8893ffcce505f92e0cb8c540ee1766f8fb/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc00a8893ffcce505f92e0cb8c540ee1766f8fb/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=efc00a8893ffcce505f92e0cb8c540ee1766f8fb", "patch": "@@ -12979,6 +12979,18 @@ package body Sem_Prag is\n             Ada_Version_Explicit := Ada_2020;\n             Ada_Version_Pragma   := N;\n \n+         -------------------------------------\n+         -- Aggregate_Individually_Assign --\n+         -------------------------------------\n+\n+         --  pragma Aggregate_Individually_Assign;\n+\n+         when Pragma_Aggregate_Individually_Assign =>\n+            GNAT_Pragma;\n+            Check_Arg_Count (0);\n+            Check_Valid_Configuration_Pragma;\n+            Aggregate_Individually_Assign := True;\n+\n          ----------------------\n          -- All_Calls_Remote --\n          ----------------------\n@@ -30890,6 +30902,7 @@ package body Sem_Prag is\n       Pragma_Ada_12                         => -1,\n       Pragma_Ada_2012                       => -1,\n       Pragma_Ada_2020                       => -1,\n+      Pragma_Aggregate_Individually_Assign  => 0,\n       Pragma_All_Calls_Remote               => -1,\n       Pragma_Allow_Integer_Address          => -1,\n       Pragma_Annotate                       => 93,"}, {"sha": "985a19ff041c8e758629c5450ae140c85d89fbec", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc00a8893ffcce505f92e0cb8c540ee1766f8fb/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc00a8893ffcce505f92e0cb8c540ee1766f8fb/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=efc00a8893ffcce505f92e0cb8c540ee1766f8fb", "patch": "@@ -389,6 +389,7 @@ package Snames is\n    Name_Ada_12                         : constant Name_Id := N + $; -- GNAT\n    Name_Ada_2012                       : constant Name_Id := N + $; -- GNAT\n    Name_Ada_2020                       : constant Name_Id := N + $; -- GNAT\n+   Name_Aggregate_Individually_Assign  : constant Name_Id := N + $; -- GNAT\n    Name_Allow_Integer_Address          : constant Name_Id := N + $; -- GNAT\n    Name_Annotate                       : constant Name_Id := N + $; -- GNAT\n    Name_Assertion_Policy               : constant Name_Id := N + $; -- Ada 05\n@@ -1847,6 +1848,7 @@ package Snames is\n       Pragma_Ada_2020,\n       --  Note that there is no Pragma_Ada_20. Pragma_Ada_05/12 are for\n       --  compatibility reasons only; the full year names are preferred.\n+      Pragma_Aggregate_Individually_Assign,\n       Pragma_Allow_Integer_Address,\n       Pragma_Annotate,\n       Pragma_Assertion_Policy,"}]}