{"sha": "f1a1591b9ef91e138109a510a92c60ee153b8555", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFhMTU5MWI5ZWY5MWUxMzgxMDlhNTEwYTkyYzYwZWUxNTNiODU1NQ==", "commit": {"author": {"name": "Ranjit Mathew", "email": "rmathew@hotmail.com", "date": "2003-04-19T19:08:49Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-04-19T19:08:49Z"}, "message": "File.java (getAbsolutePath): On Windows, take care of paths like \"C:\", \"G:foo\\bar\", etc.\n\n2003-04-19  Ranjit Mathew  <rmathew@hotmail.com>\n\n\t* java/io/File.java (getAbsolutePath): On Windows, take care\n\tof paths like \"C:\", \"G:foo\\bar\", etc.\n\t(getName): Make it work correctly on Windows.\n\t(getParent): Make it work correctly on Windows. For UNIX,\n\tfix bug that causes \"/\" to be returned as the parent of \"/\",\n\tinstead of null as returned by Sun's JRE.\n\n\t* java/io/natFileWin32.cc: Change copyright owner to FSF.\n\nFrom-SVN: r65823", "tree": {"sha": "fecad7245f02a88a53f8de92df88e2c776e68ba8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fecad7245f02a88a53f8de92df88e2c776e68ba8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1a1591b9ef91e138109a510a92c60ee153b8555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1a1591b9ef91e138109a510a92c60ee153b8555", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1a1591b9ef91e138109a510a92c60ee153b8555", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1a1591b9ef91e138109a510a92c60ee153b8555/comments", "author": null, "committer": null, "parents": [{"sha": "30f45f509fb75efdad29f9f033057af8a6ef8d15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30f45f509fb75efdad29f9f033057af8a6ef8d15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30f45f509fb75efdad29f9f033057af8a6ef8d15"}], "stats": {"total": 123, "additions": 113, "deletions": 10}, "files": [{"sha": "d7d7bd30d3560b3bfbc82be5a0c6a7c549d56499", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a1591b9ef91e138109a510a92c60ee153b8555/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a1591b9ef91e138109a510a92c60ee153b8555/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f1a1591b9ef91e138109a510a92c60ee153b8555", "patch": "@@ -1,3 +1,14 @@\n+2003-04-19  Ranjit Mathew  <rmathew@hotmail.com>\n+\n+\t* java/io/File.java (getAbsolutePath): On Windows, take care\n+\tof paths like \"C:\", \"G:foo\\bar\", etc.\n+\t(getName): Make it work correctly on Windows.\n+\t(getParent): Make it work correctly on Windows. For UNIX,\n+\tfix bug that causes \"/\" to be returned as the parent of \"/\",\n+\tinstead of null as returned by Sun's JRE.\n+\n+\t* java/io/natFileWin32.cc: Change copyright owner to FSF.\n+\n 2003-04-19  Scott Gilbertson  <scottg@mantatest.com>\n \n \t* gnu/awt/xlib/XGraphicsConfiguration.java (FontMetricsCache): New"}, {"sha": "56d3a6355f8233b6c7ceb3198aea1ec3201931bd", "filename": "libjava/java/io/File.java", "status": "modified", "additions": 100, "deletions": 8, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a1591b9ef91e138109a510a92c60ee153b8555/libjava%2Fjava%2Fio%2FFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a1591b9ef91e138109a510a92c60ee153b8555/libjava%2Fjava%2Fio%2FFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFile.java?ref=f1a1591b9ef91e138109a510a92c60ee153b8555", "patch": "@@ -396,6 +396,33 @@ else if (separatorChar == '\\\\'\n         // the current working directory to it.\n         return System.getProperty (\"user.dir\").substring (0, 2) + path;\n       }\n+    else if (separatorChar == '\\\\' \n+             && path.length () > 1 && path.charAt (1) == ':'\n+             && ((path.charAt (0) >= 'a' && path.charAt (0) <= 'z')\n+                 || (path.charAt (0) >= 'A' && path.charAt (0) <= 'Z')))\n+      {\n+        // On Windows, a process has a current working directory for\n+        // each drive and a path like \"G:foo\\bar\" would mean the \n+        // absolute path \"G:\\wombat\\foo\\bar\" if \"\\wombat\" is the \n+        // working directory on the G drive.\n+        String drvDir = null;\n+        try\n+          {\n+            drvDir = new File (path.substring (0, 2)).getCanonicalPath ();\n+          }\n+        catch (IOException e)\n+          {\n+            drvDir = path.substring (0, 2) + \"\\\\\";\n+          }\n+        \n+        // Note: this would return \"C:\\\\.\" for the path \"C:.\", if \"\\\"\n+        // is the working folder on the C drive, but this is \n+        // consistent with what Sun's JRE 1.4.1.01 actually returns!\n+        if (path.length () > 2)\n+          return drvDir + '\\\\' + path.substring (2, path.length ());\n+        else\n+          return drvDir;\n+      }\n     else\n       return System.getProperty (\"user.dir\") + separatorChar + path;\n   }\n@@ -453,8 +480,30 @@ public File getCanonicalFile () throws IOException\n    */\n   public String getName ()\n   {\n-    int last = path.lastIndexOf(separatorChar);\n-    return path.substring(last + 1);\n+    int nameSeqIndex = 0;\n+\n+    if (separatorChar == '\\\\' && path.length () > 1)\n+      {\n+        // On Windows, ignore the drive specifier or the leading '\\\\'\n+        // of a UNC network path, if any (a.k.a. the \"prefix\").\n+        if ((path.charAt (0) == '\\\\' && path.charAt (1) == '\\\\')\n+            || (((path.charAt (0) >= 'a' && path.charAt (0) <= 'z')\n+\t\t || (path.charAt (0) >= 'A' && path.charAt (0) <= 'Z'))\n+\t\t&& path.charAt (1) == ':'))\n+\t  {\n+\t    if (path.length () > 2)\n+\t      nameSeqIndex = 2;\n+\t    else\n+\t      return \"\";\n+\t  }\n+      }\n+\n+    String nameSeq \n+      = (nameSeqIndex > 0 ? path.substring (nameSeqIndex) : path);\n+\n+    int last = nameSeq.lastIndexOf (separatorChar);\n+\n+    return nameSeq.substring (last + 1);\n   }\n \n   /**\n@@ -466,13 +515,56 @@ public String getName ()\n    */\n   public String getParent ()\n   {\n-    int last = path.lastIndexOf(separatorChar);\n-    if (last == -1)\n+    String prefix = null;\n+    int nameSeqIndex = 0;\n+\n+    // The \"prefix\", if present, is the leading \"/\" on UNIX and \n+    // either the drive specifier (e.g. \"C:\") or the leading \"\\\\\"\n+    // of a UNC network path on Windows.\n+    if (separatorChar == '/' && path.charAt (0) == '/')\n+      {\n+        prefix = \"/\";\n+        nameSeqIndex = 1;\n+      }\n+    else if (separatorChar == '\\\\' && path.length () > 1)\n+      {\n+        if ((path.charAt (0) == '\\\\' && path.charAt (1) == '\\\\')\n+            || (((path.charAt (0) >= 'a' && path.charAt (0) <= 'z')\n+                 || (path.charAt (0) >= 'A' && path.charAt (0) <= 'Z'))\n+                && path.charAt (1) == ':'))\n+          {\n+            prefix = path.substring (0, 2);\n+            nameSeqIndex = 2;\n+          }\n+      }\n+\n+    // According to the JDK docs, the returned parent path is the \n+    // portion of the name sequence before the last separator\n+    // character, if found, prefixed by the prefix, otherwise null.\n+    if (nameSeqIndex < path.length ())\n+      {\n+        String nameSeq = path.substring (nameSeqIndex, path.length ());\n+        int last = nameSeq.lastIndexOf (separatorChar);\n+        if (last == -1)\n+          return prefix;\n+        else if (last == (nameSeq.length () - 1))\n+          // Note: The path would not have a trailing separator\n+          // except for cases like \"C:\\\" on Windows (see \n+          // normalizePath( )), where Sun's JRE 1.4 returns null.\n+          return null;\n+        else if (last == 0)\n+          last++;\n+\n+        if (prefix != null)\n+          return prefix + nameSeq.substring (0, last);\n+        else\n+          return nameSeq.substring (0, last);\n+      }\n+    else\n+      // Sun's JRE 1.4 returns null if the prefix is the only \n+      // component of the path - so \"/\" gives null on UNIX and \n+      // \"C:\", \"\\\\\", etc. return null on Windows.\n       return null;\n-    // FIXME: POSIX assumption.\n-    if (last == 0 && path.charAt (0) == '/')\n-      ++last;\n-    return path.substring(0, last);\n   }\n \n   /**"}, {"sha": "1e068329a32db378fa34b33cca626a84d24d54e6", "filename": "libjava/java/io/natFileWin32.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a1591b9ef91e138109a510a92c60ee153b8555/libjava%2Fjava%2Fio%2FnatFileWin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a1591b9ef91e138109a510a92c60ee153b8555/libjava%2Fjava%2Fio%2FnatFileWin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFileWin32.cc?ref=f1a1591b9ef91e138109a510a92c60ee153b8555", "patch": "@@ -1,6 +1,6 @@\n-// natFileWin32.cc - Native part of File class.\n+// natFileWin32.cc - Native part of File class for Win32.\n \n-/* Copyright (C) 1998, 1999, 2002, 2003  Red Hat, Inc.\n+/* Copyright (C) 1998, 1999, 2002, 2003  Free Software Foundation, Inc.\n \n    This file is part of libgcj.\n "}]}