{"sha": "eed7fbc5e35259367407b809d3b8e17a9552f5ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVkN2ZiYzVlMzUyNTkzNjc0MDdiODA5ZDNiOGUxN2E5NTUyZjVlZQ==", "commit": {"author": {"name": "Evandro Menezes", "email": "evandro@gcc.gnu.org", "date": "2016-06-14T16:26:02Z"}, "committer": {"name": "Evandro Menezes", "email": "evandro@gcc.gnu.org", "date": "2016-06-14T16:26:02Z"}, "message": "[AArch64] Add commit message\n\n\t* gcc/ChangeLog: Add commit messages for patch series that added\n\tsupport for optionally using the Newton series for division and\n\tsquare root.\n\nFrom-SVN: r237452", "tree": {"sha": "84c27eead7a46f8723fd9727e32e994408fd2667", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84c27eead7a46f8723fd9727e32e994408fd2667"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eed7fbc5e35259367407b809d3b8e17a9552f5ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eed7fbc5e35259367407b809d3b8e17a9552f5ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eed7fbc5e35259367407b809d3b8e17a9552f5ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eed7fbc5e35259367407b809d3b8e17a9552f5ee/comments", "author": null, "committer": null, "parents": [{"sha": "0d323358fd068b8fc81f6cd22e146e0c53a460f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d323358fd068b8fc81f6cd22e146e0c53a460f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d323358fd068b8fc81f6cd22e146e0c53a460f3"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "f95e4a659e573790b5afa07f18a0d00912aaac58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eed7fbc5e35259367407b809d3b8e17a9552f5ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eed7fbc5e35259367407b809d3b8e17a9552f5ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eed7fbc5e35259367407b809d3b8e17a9552f5ee", "patch": "@@ -122,6 +122,79 @@\n \tto a deeper loop nest.  Pop the last item off the path here rather\n \tthan in convert_and_register_jump_thread_path.\n \n+2016-06-13  Evandro Menezes  <e.menezes@samsung.com>\n+\t    Wilco Dijkstra  <Wilco.Dijkstra@arm.com>\n+\n+\t[AArch64] Emit division using the Newton series\n+\n+\t* config/aarch64/aarch64-protos.h\n+\t(cpu_approx_modes): Add new member \"division\".\n+\t(aarch64_emit_approx_div): Declare new function.\n+\t* config/aarch64/aarch64.c\n+\t(generic_approx_modes): New member \"division\".\n+\t(exynosm1_approx_modes): Likewise.\n+\t(xgene1_approx_modes): Likewise.\n+\t(aarch64_emit_approx_div): Define new function.\n+\t* config/aarch64/aarch64.md (\"div<mode>3\"): New expansion.\n+\t* config/aarch64/aarch64-simd.md (\"div<mode>3\"): Likewise.\n+\t* config/aarch64/aarch64.opt (-mlow-precision-div): Add new option.\n+\t* doc/invoke.texi (-mlow-precision-div): Describe new option.\n+\n+2016-06-13  Evandro Menezes  <e.menezes@samsung.com>\n+\t    Wilco Dijkstra  <wilco.dijkstra@arm.com>\n+\n+\t[AArch64] Emit square root using the Newton series\n+\n+\t* config/aarch64/aarch64-protos.h\n+\t(aarch64_emit_approx_rsqrt): Replace with new function\n+\t\"aarch64_emit_approx_sqrt\".\n+\t(cpu_approx_modes): New member \"sqrt\".\n+\t* config/aarch64/aarch64.c\n+\t(generic_approx_modes): New member \"sqrt\".\n+\t(exynosm1_approx_modes): Likewise.\n+\t(xgene1_approx_modes): Likewise.\n+\t(aarch64_emit_approx_rsqrt): Replace with new function\n+\t\"aarch64_emit_approx_sqrt\".\n+\t(aarch64_override_options_after_change_1): Handle new option.\n+\t* config/aarch64/aarch64-simd.md\n+\t(rsqrt<mode>2): Use new function instead.\n+\t(sqrt<mode>2): New expansion and insn definitions.\n+\t* config/aarch64/aarch64.md: Likewise.\n+\t* config/aarch64/aarch64.opt\n+\t(mlow-precision-sqrt): Add new option description.\n+\t* doc/invoke.texi (mlow-precision-sqrt): Likewise.\n+\n+2016-06-13  Evandro Menezes  <e.menezes@samsung.com>\n+\n+\t[AArch64] Add more choices for the reciprocal square root approximation\n+\n+\tAllow a target to prefer such operation depending on the operation mode.\n+\n+\t* config/aarch64/aarch64-protos.h\n+\t(AARCH64_APPROX_MODE): New macro.\n+\t(AARCH64_APPROX_{NONE,ALL}): Likewise.\n+\t(cpu_approx_modes): New structure.\n+\t(tune_params): New member \"approx_modes\".\n+\t* config/aarch64/aarch64-tuning-flags.def\n+\t(AARCH64_EXTRA_TUNE_APPROX_RSQRT): Remove macro.\n+\t* config/aarch64/aarch64.c\n+\t(generic_approx_modes): New core \"cpu_approx_modes\" structure.\n+\t(exynosm1_approx_modes): Likewise.\n+\t(xgene1_approx_modes): Likewise.\n+\t(generic_tunings): New member \"approx_modes\".\n+\t(cortexa35_tunings): Likewise.\n+\t(cortexa53_tunings): Likewise.\n+\t(cortexa57_tunings): Likewise.\n+\t(cortexa72_tunings): Likewise.\n+\t(exynosm1_tunings): Likewise.\n+\t(thunderx_tunings): Likewise.\n+\t(xgene1_tunings): Likewise.\n+\t(use_rsqrt_p): New argument for the mode and use new member from\n+\t\"tune_params\".\n+\t(aarch64_builtin_reciprocal): Devise mode from builtin.\n+\t(aarch64_optab_supported_p): New argument for the mode.\n+\t* doc/invoke.texi (-mlow-precision-recip-sqrt): Reword description.\n+\n 2016-06-13  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* config/rs6000/rs6000.h (RS6000_BTM_COMMON): Add the"}]}