{"sha": "9893273d9826229c41075f568f343bfc7c32d9dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg5MzI3M2Q5ODI2MjI5YzQxMDc1ZjU2OGYzNDNiZmM3YzMyZDlkZA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2018-02-27T03:37:10Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2018-02-27T03:37:10Z"}, "message": "[IEPM] don't preserve lexical blocks just for debug inline markers\n\nThis patch stops preserving scope blocks just because they are inlined\nfunction scopes, when cleaning up unused scope blocks.  This change\nwas introduced along with IEPM, but it preserved lots of blocks, and\noutput debug information for them, although no code from the inlined\nfunction remained after optimization.\n\nThe additional preserved blocks took up compile-time memory, and\nsignificant disk space and link time, in some cases more than 25%.\nThis is deemed excessive, compared with the reasonably small benefit\nof allowing one to single-step into an inlined function using a\nview-capable debugger.\n\nThere was another way of marking inlined function scopes as unused,\nbased on the markers referencing them during stmt scanning, but that\nstill preserved too much.\n\nSo, this patch restores the pre-IEPM logic of preservation of scopes.\nShould a scope block referenced by an inline entry marker be found to\nbe unused in remove_unused_scope_block_p, the marker will be cleaned\nup right after that, in clear_unused_block_pointer, so we won't keep\na dangling reference to a dropped block.\n\nfor  gcc/ChangeLog\n\n\t* tree-ssa-live.c (remove_unused_scope_block_p): Do not\n\tpreserve inline entry blocks for the sake of debug inline\n\tentry point markers alone.\n\t(remove_unused_locals): Suggest in comments a better place to\n\tforce the preservation of inline entry blocks that are\n\totherwise unused, but do not preserve them.\n\nFrom-SVN: r258026", "tree": {"sha": "85cc7bd6adb42b040f959121d5f5e438d796e982", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85cc7bd6adb42b040f959121d5f5e438d796e982"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9893273d9826229c41075f568f343bfc7c32d9dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9893273d9826229c41075f568f343bfc7c32d9dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9893273d9826229c41075f568f343bfc7c32d9dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9893273d9826229c41075f568f343bfc7c32d9dd/comments", "author": null, "committer": null, "parents": [{"sha": "ed75f594a9afd438bd652136f7606d32a7f1a515", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed75f594a9afd438bd652136f7606d32a7f1a515", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed75f594a9afd438bd652136f7606d32a7f1a515"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "994340a8b6fae33fe593596c2da0d8cabb0bf0b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9893273d9826229c41075f568f343bfc7c32d9dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9893273d9826229c41075f568f343bfc7c32d9dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9893273d9826229c41075f568f343bfc7c32d9dd", "patch": "@@ -1,3 +1,12 @@\n+2018-02-27  Alexandre Oliva <aoliva@redhat.com>\n+\n+\t* tree-ssa-live.c (remove_unused_scope_block_p): Do not\n+\tpreserve inline entry blocks for the sake of debug inline\n+\tentry point markers alone.\n+\t(remove_unused_locals): Suggest in comments a better place to\n+\tforce the preservation of inline entry blocks that are\n+\totherwise unused, but do not preserve them.\n+\n 2018-02-26  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (ix86_output_indirect_jmp): Update comments."}, {"sha": "62316bac79295eb719f7342ec3770cd945f05749", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9893273d9826229c41075f568f343bfc7c32d9dd/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9893273d9826229c41075f568f343bfc7c32d9dd/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=9893273d9826229c41075f568f343bfc7c32d9dd", "patch": "@@ -520,11 +520,6 @@ remove_unused_scope_block_p (tree scope, bool in_ctor_dtor_block)\n    else if (!BLOCK_SUPERCONTEXT (scope)\n             || TREE_CODE (BLOCK_SUPERCONTEXT (scope)) == FUNCTION_DECL)\n      unused = false;\n-   /* Preserve the block, it is referenced by at least the inline\n-      entry point marker.  */\n-   else if (debug_inline_points\n-\t    && inlined_function_outer_scope_p (scope))\n-     unused = false;\n    /* Innermost blocks with no live variables nor statements can be always\n       eliminated.  */\n    else if (!nsubblocks)\n@@ -556,10 +551,8 @@ remove_unused_scope_block_p (tree scope, bool in_ctor_dtor_block)\n    /* See if this block is important for representation of inlined\n       function.  Inlined functions are always represented by block\n       with block_ultimate_origin being set to FUNCTION_DECL and\n-      DECL_SOURCE_LOCATION set, unless they expand to nothing...  But\n-      see above for the case of statement frontiers.  */\n-   else if (!debug_inline_points\n-\t    && inlined_function_outer_scope_p (scope))\n+      DECL_SOURCE_LOCATION set, unless they expand to nothing...  */\n+   else if (inlined_function_outer_scope_p (scope))\n      unused = false;\n    else\n    /* Verfify that only blocks with source location set\n@@ -741,6 +734,10 @@ remove_unused_locals (void)\n \t  gimple *stmt = gsi_stmt (gsi);\n \t  tree b = gimple_block (stmt);\n \n+\t  /* If we wanted to mark the block referenced by the inline\n+\t     entry point marker as used, this would be a good spot to\n+\t     do it.  If the block is not otherwise used, the stmt will\n+\t     be cleaned up in clean_unused_block_pointer.  */\n \t  if (is_gimple_debug (stmt))\n \t    continue;\n "}]}