{"sha": "c4e360f44f346e795a671b200d33c61ba187bdcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRlMzYwZjQ0ZjM0NmU3OTVhNjcxYjIwMGQzM2M2MWJhMTg3YmRjZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-02-22T14:53:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-02-22T14:53:17Z"}, "message": "re PR tree-optimization/69882 (Excessive reduction statements generated by SLP)\n\n2016-02-22  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/69882\n\t* tree-vect-slp.c (vect_attempt_slp_rearrange_stmts): Properly\n\tpreserve permutations present because of gaps.\n\t(vect_supported_load_permutation_p): Always continue checking\n\tpermutations after vect_attempt_slp_rearrange_stmts.\n\n\t* gfortran.dg/vect/pr69882.f90: New testcase.\n\nFrom-SVN: r233605", "tree": {"sha": "094ddadeeab03967951ed04cda4a3f3868982cd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/094ddadeeab03967951ed04cda4a3f3868982cd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4e360f44f346e795a671b200d33c61ba187bdcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e360f44f346e795a671b200d33c61ba187bdcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4e360f44f346e795a671b200d33c61ba187bdcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e360f44f346e795a671b200d33c61ba187bdcd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b1587d4b301a0be08f6a0286619d5d69cb06dd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b1587d4b301a0be08f6a0286619d5d69cb06dd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b1587d4b301a0be08f6a0286619d5d69cb06dd6"}], "stats": {"total": 74, "additions": 67, "deletions": 7}, "files": [{"sha": "a352259a2a0ee4b5f1e6165bfe82e90589d46772", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e360f44f346e795a671b200d33c61ba187bdcd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e360f44f346e795a671b200d33c61ba187bdcd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4e360f44f346e795a671b200d33c61ba187bdcd", "patch": "@@ -1,3 +1,11 @@\n+2016-02-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69882\n+\t* tree-vect-slp.c (vect_attempt_slp_rearrange_stmts): Properly\n+\tpreserve permutations present because of gaps.\n+\t(vect_supported_load_permutation_p): Always continue checking\n+\tpermutations after vect_attempt_slp_rearrange_stmts.\n+\n 2016-02-22  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-vect-loop.c (vect_estimate_min_profitable_iters): Dump"}, {"sha": "02a3b3ec441d5ad6fb6fcdc6d287988136466c6d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e360f44f346e795a671b200d33c61ba187bdcd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e360f44f346e795a671b200d33c61ba187bdcd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c4e360f44f346e795a671b200d33c61ba187bdcd", "patch": "@@ -1,3 +1,8 @@\n+2016-02-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69882\n+\t* gfortran.dg/vect/pr69882.f90: New testcase.\n+\n 2016-02-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/69885"}, {"sha": "f77e33f11a96a962941781fcc6220d8ef097a7e8", "filename": "gcc/testsuite/gfortran.dg/vect/pr69882.f90", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e360f44f346e795a671b200d33c61ba187bdcd/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr69882.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e360f44f346e795a671b200d33c61ba187bdcd/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr69882.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr69882.f90?ref=c4e360f44f346e795a671b200d33c61ba187bdcd", "patch": "@@ -0,0 +1,41 @@\n+! { dg-additional-options \"-Ofast\" }\n+! { dg-additional-options \"-mavx\" { target avx_runtime } }\n+\n+subroutine foo(a, x)\n+  implicit none\n+\n+  integer, parameter :: XX=4, YY=26\n+  integer, intent(in) :: x\n+  real *8, intent(in) :: a(XX,YY)\n+  real *8 :: c(XX)\n+\n+  integer i, k\n+\n+  c = 0\n+\n+  do k=x,YY\n+     do i=1,2\n+        c(i) = max(c(i), a(i,k))\n+     end do\n+  end do\n+\n+  PRINT *, \"c=\", c\n+\n+  IF (c(1) .gt. 0.0) THEN\n+     CALL ABORT\n+  END IF\n+\n+  IF (c(2) .gt. 0.0) THEN\n+     CALL ABORT\n+  END IF\n+end subroutine foo\n+\n+PROGRAM MAIN\n+  real *8 a(4, 26)\n+\n+  a = 0\n+  a(3,1) = 100.0\n+  a(4,1) = 100.0\n+  \n+  CALL FOO(a, 1)\n+END PROGRAM"}, {"sha": "988ec10e1da4d9cbcf89dabcae65291f4579ad47", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e360f44f346e795a671b200d33c61ba187bdcd/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e360f44f346e795a671b200d33c61ba187bdcd/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=c4e360f44f346e795a671b200d33c61ba187bdcd", "patch": "@@ -1332,8 +1332,19 @@ vect_attempt_slp_rearrange_stmts (slp_instance slp_instn)\n \t\t\t    node->load_permutation);\n \n   /* We are done, no actual permutations need to be generated.  */\n+  unsigned int unrolling_factor = SLP_INSTANCE_UNROLLING_FACTOR (slp_instn);\n   FOR_EACH_VEC_ELT (SLP_INSTANCE_LOADS (slp_instn), i, node)\n-    SLP_TREE_LOAD_PERMUTATION (node).release ();\n+    {\n+      gimple *first_stmt = SLP_TREE_SCALAR_STMTS (node)[0];\n+      first_stmt = GROUP_FIRST_ELEMENT (vinfo_for_stmt (first_stmt));\n+      /* But we have to keep those permutations that are required because\n+         of handling of gaps.  */\n+      if (unrolling_factor == 1\n+\t  || (group_size == GROUP_SIZE (vinfo_for_stmt (first_stmt))\n+\t      && GROUP_GAP (vinfo_for_stmt (first_stmt)) == 0))\n+\tSLP_TREE_LOAD_PERMUTATION (node).release ();\n+    }\n+\n   return true;\n }\n \n@@ -1381,12 +1392,7 @@ vect_supported_load_permutation_p (slp_instance slp_instn)\n      In reduction chain the order of the loads is not important.  */\n   if (!STMT_VINFO_DATA_REF (vinfo_for_stmt (stmt))\n       && !GROUP_FIRST_ELEMENT (vinfo_for_stmt (stmt)))\n-    {\n-      if (vect_attempt_slp_rearrange_stmts (slp_instn))\n-\treturn true;\n-\n-      /* Fallthru to general load permutation handling.  */\n-    }\n+    vect_attempt_slp_rearrange_stmts (slp_instn);\n \n   /* In basic block vectorization we allow any subchain of an interleaving\n      chain."}]}