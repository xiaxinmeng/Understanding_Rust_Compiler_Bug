{"sha": "dd95128ba97f4b43145d76d6624de52e2cbda074", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ5NTEyOGJhOTdmNGI0MzE0NWQ3NmQ2NjI0ZGU1MmUyY2JkYTA3NA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2016-03-11T07:23:49Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-03-11T07:23:49Z"}, "message": "S/390: Rename shift_count_or_setmem_operand to setmem_operand\n\nThe shift_count_or_setmem_operand predicate is now only used for\nsetmem patterns anymore.  Rename it together with the related\nfunctions.\n\ngcc/ChangeLog:\n\n2016-03-11  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/constraints.md: Adjust comment.\n\t(\"Y\"): Adjust comment.  Rename s390_decompose_shift_count to\n\ts390_decompose_addrstyle_without_index.\n\t* config/s390/predicates.md (shift_count_or_setmem_operand):\n\tRename to setmem_operand.\n\t* config/s390/s390-protos.h\n\t(s390_decompose_shift_count): Rename to\n\ts390_decompose_addrstyle_without_index.\n\t* config/s390/s390.c (s390_decompose_shift_count)\n\t(s390_mem_constraint, print_shift_count_operand)\n\t(print_operand_address, print_operand): Rename\n\ts390_decompose_shift_count to\n\ts390_decompose_addrstyle_without_index and rename\n\tprint_shift_count_operand to print_addrstyle_operand troughout the\n\tfile.\n\t* config/s390/s390.md (\"setmem_long_<P:mode>\", \"*setmem_long\")\n\t(\"*setmem_long_and\", \"*setmem_long_31z\", \"*setmem_long_and_31z\"):\n\tRename shift_count_or_setmem_operand to setmem_operand.\n\t* config/s390/vx-builtins.md (\"vec_insert<mode>\")\n\t(\"vec_promote<mode>\"): Replace shift_count_or_setmem_operand with\n\tnonmemory_operand.\n\nFrom-SVN: r234132", "tree": {"sha": "86aff757a38088ed86d0ce59d27959f9bf0ff90d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86aff757a38088ed86d0ce59d27959f9bf0ff90d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd95128ba97f4b43145d76d6624de52e2cbda074", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd95128ba97f4b43145d76d6624de52e2cbda074", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd95128ba97f4b43145d76d6624de52e2cbda074", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd95128ba97f4b43145d76d6624de52e2cbda074/comments", "author": null, "committer": null, "parents": [{"sha": "a0232c64e7dd7570d4099c2fd36d142bbe11cc40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0232c64e7dd7570d4099c2fd36d142bbe11cc40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0232c64e7dd7570d4099c2fd36d142bbe11cc40"}], "stats": {"total": 79, "additions": 54, "deletions": 25}, "files": [{"sha": "4f2869084c7273a3d391497972e58fcaa3b3ff0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd95128ba97f4b43145d76d6624de52e2cbda074/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd95128ba97f4b43145d76d6624de52e2cbda074/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd95128ba97f4b43145d76d6624de52e2cbda074", "patch": "@@ -1,3 +1,27 @@\n+2016-03-11  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/constraints.md: Adjust comment.\n+\t(\"Y\"): Adjust comment.  Rename s390_decompose_shift_count to\n+\ts390_decompose_addrstyle_without_index.\n+\t* config/s390/predicates.md (shift_count_or_setmem_operand):\n+\tRename to setmem_operand.\n+\t* config/s390/s390-protos.h\n+\t(s390_decompose_shift_count): Rename to\n+\ts390_decompose_addrstyle_without_index.\n+\t* config/s390/s390.c (s390_decompose_shift_count)\n+\t(s390_mem_constraint, print_shift_count_operand)\n+\t(print_operand_address, print_operand): Rename\n+\ts390_decompose_shift_count to\n+\ts390_decompose_addrstyle_without_index and rename\n+\tprint_shift_count_operand to print_addrstyle_operand troughout the\n+\tfile.\n+\t* config/s390/s390.md (\"setmem_long_<P:mode>\", \"*setmem_long\")\n+\t(\"*setmem_long_and\", \"*setmem_long_31z\", \"*setmem_long_and_31z\"):\n+\tRename shift_count_or_setmem_operand to setmem_operand.\n+\t* config/s390/vx-builtins.md (\"vec_insert<mode>\")\n+\t(\"vec_promote<mode>\"): Replace shift_count_or_setmem_operand with\n+\tnonmemory_operand.\n+\n 2016-03-10  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \tPR target/70168"}, {"sha": "78577002ad54e001fe1df3ba14807b55f02f49a3", "filename": "gcc/config/s390/constraints.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd95128ba97f4b43145d76d6624de52e2cbda074/gcc%2Fconfig%2Fs390%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd95128ba97f4b43145d76d6624de52e2cbda074/gcc%2Fconfig%2Fs390%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fconstraints.md?ref=dd95128ba97f4b43145d76d6624de52e2cbda074", "patch": "@@ -79,7 +79,7 @@\n ;;         does *not* refer to a literal pool entry.\n ;;    U -- Pointer with short displacement. (deprecated - use ZQZR)\n ;;    W -- Pointer with long displacement. (deprecated - use ZSZT)\n-;;    Y -- Shift count operand.\n+;;    Y -- Address style operand without index.\n ;;    ZQ -- Pointer without index register and with short displacement.\n ;;    ZR -- Pointer with index register and short displacement.\n ;;    ZS -- Pointer without index register but with long displacement.\n@@ -189,12 +189,12 @@\n \n \n (define_address_constraint \"Y\"\n-  \"Shift count operand\"\n+  \"Address style operand without index register\"\n \n-;; Simply check for the basic form of a shift count.  Reload will\n-;; take care of making sure we have a proper base register.\n+;; Simply check for base + offset style operands.  Reload will take\n+;; care of making sure we have a proper base register.\n \n-  (match_test \"s390_decompose_shift_count (op, NULL, NULL)\"  ))\n+  (match_test \"s390_decompose_addrstyle_without_index (op, NULL, NULL)\"  ))\n \n \n ;;    N -- Multiple letter constraint followed by 4 parameter letters."}, {"sha": "e66f4a4110b88584238d957de701c7c0f7f7af1c", "filename": "gcc/config/s390/predicates.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd95128ba97f4b43145d76d6624de52e2cbda074/gcc%2Fconfig%2Fs390%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd95128ba97f4b43145d76d6624de52e2cbda074/gcc%2Fconfig%2Fs390%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fpredicates.md?ref=dd95128ba97f4b43145d76d6624de52e2cbda074", "patch": "@@ -87,7 +87,7 @@\n \n ;; Return true if OP is a valid operand as scalar shift count or setmem.\n \n-(define_predicate \"shift_count_or_setmem_operand\"\n+(define_predicate \"setmem_operand\"\n   (match_code \"reg, subreg, plus, const_int\")\n {\n   HOST_WIDE_INT offset;\n@@ -98,7 +98,7 @@\n     return false;\n \n   /* Extract base register and offset.  */\n-  if (!s390_decompose_shift_count (op, &base, &offset))\n+  if (!s390_decompose_addrstyle_without_index (op, &base, &offset))\n     return false;\n \n   /* Don't allow any non-base hard registers.  Doing so without"}, {"sha": "2ccf0bbb0ab1bbf86c4c4843917bce56341b3b70", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd95128ba97f4b43145d76d6624de52e2cbda074/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd95128ba97f4b43145d76d6624de52e2cbda074/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=dd95128ba97f4b43145d76d6624de52e2cbda074", "patch": "@@ -139,7 +139,8 @@ extern rtx_insn *s390_load_got (void);\n extern rtx s390_get_thread_pointer (void);\n extern void s390_emit_tpf_eh_return (rtx);\n extern bool s390_legitimate_address_without_index_p (rtx);\n-extern bool s390_decompose_shift_count (rtx, rtx *, HOST_WIDE_INT *);\n+extern bool s390_decompose_addrstyle_without_index (rtx, rtx *,\n+\t\t\t\t\t\t    HOST_WIDE_INT *);\n extern int s390_branch_condition_mask (rtx);\n extern int s390_compare_and_branch_condition_mask (rtx);\n extern bool s390_extzv_shift_ok (int, int, unsigned HOST_WIDE_INT);"}, {"sha": "4f219bee17d0eb9c9e65ca10554cd2fcaff1c457", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd95128ba97f4b43145d76d6624de52e2cbda074/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd95128ba97f4b43145d76d6624de52e2cbda074/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=dd95128ba97f4b43145d76d6624de52e2cbda074", "patch": "@@ -2982,13 +2982,16 @@ s390_decompose_address (rtx addr, struct s390_address *out)\n   return true;\n }\n \n-/* Decompose a RTL expression OP for a shift count into its components,\n-   and return the base register in BASE and the offset in OFFSET.\n+/* Decompose a RTL expression OP for an address style operand into its\n+   components, and return the base register in BASE and the offset in\n+   OFFSET.  While OP looks like an address it is never supposed to be\n+   used as such.\n \n-   Return true if OP is a valid shift count, false if not.  */\n+   Return true if OP is a valid address operand, false if not.  */\n \n bool\n-s390_decompose_shift_count (rtx op, rtx *base, HOST_WIDE_INT *offset)\n+s390_decompose_addrstyle_without_index (rtx op, rtx *base,\n+\t\t\t\t\tHOST_WIDE_INT *offset)\n {\n   rtx off = NULL_RTX;\n \n@@ -3203,7 +3206,7 @@ s390_mem_constraint (const char *str, rtx op)\n     case 'Y':\n       /* Simply check for the basic form of a shift count.  Reload will\n \t take care of making sure we have a proper base register.  */\n-      if (!s390_decompose_shift_count (op, NULL, NULL))\n+      if (!s390_decompose_addrstyle_without_index (op, NULL, NULL))\n \treturn 0;\n       break;\n     case 'Z':\n@@ -6878,13 +6881,13 @@ s390_delegitimize_address (rtx orig_x)\n    instead the rightmost bits are interpreted as the value.  */\n \n static void\n-print_shift_count_operand (FILE *file, rtx op)\n+print_addrstyle_operand (FILE *file, rtx op)\n {\n   HOST_WIDE_INT offset;\n   rtx base;\n \n   /* Extract base register and offset.  */\n-  if (!s390_decompose_shift_count (op, &base, &offset))\n+  if (!s390_decompose_addrstyle_without_index (op, &base, &offset))\n     gcc_unreachable ();\n \n   /* Sanity check.  */\n@@ -7180,7 +7183,8 @@ print_operand_address (FILE *file, rtx addr)\n     'O': print only the displacement of a memory reference or address.\n     'R': print only the base register of a memory reference or address.\n     'S': print S-type memory reference (base+displacement).\n-    'Y': print shift count operand.\n+    'Y': print address style operand without index (e.g. shift count or setmem\n+\t operand).\n \n     'b': print integer X as if it's an unsigned byte.\n     'c': print integer X as if it's an signed byte.\n@@ -7348,7 +7352,7 @@ print_operand (FILE *file, rtx x, int code)\n       break;\n \n     case 'Y':\n-      print_shift_count_operand (file, x);\n+      print_addrstyle_operand (file, x);\n       return;\n     }\n "}, {"sha": "99974f941b3727fc0308efeba0c5daf4ff85c049", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd95128ba97f4b43145d76d6624de52e2cbda074/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd95128ba97f4b43145d76d6624de52e2cbda074/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=dd95128ba97f4b43145d76d6624de52e2cbda074", "patch": "@@ -3296,7 +3296,7 @@\n   [(parallel\n     [(clobber (match_dup 1))\n      (set (match_operand:BLK 0 \"memory_operand\" \"\")\n-\t  (unspec:BLK [(match_operand:P 2 \"shift_count_or_setmem_operand\" \"\")\n+\t  (unspec:BLK [(match_operand:P 2 \"setmem_operand\" \"\")\n \t\t      (match_dup 4)] UNSPEC_REPLICATE_BYTE))\n      (use (match_dup 3))\n      (clobber (reg:CC CC_REGNUM))])]\n@@ -3326,7 +3326,7 @@\n (define_insn \"*setmem_long\"\n   [(clobber (match_operand:<DBL> 0 \"register_operand\" \"=d\"))\n    (set (mem:BLK (subreg:P (match_operand:<DBL> 3 \"register_operand\" \"0\") 0))\n-        (unspec:BLK [(match_operand:P 2 \"shift_count_or_setmem_operand\" \"Y\")\n+        (unspec:BLK [(match_operand:P 2 \"setmem_operand\" \"Y\")\n \t\t     (subreg:P (match_dup 3) <modesize>)]\n \t\t     UNSPEC_REPLICATE_BYTE))\n    (use (match_operand:<DBL> 1 \"register_operand\" \"d\"))\n@@ -3340,7 +3340,7 @@\n   [(clobber (match_operand:<DBL> 0 \"register_operand\" \"=d\"))\n    (set (mem:BLK (subreg:P (match_operand:<DBL> 3 \"register_operand\" \"0\") 0))\n         (unspec:BLK [(and:P\n-\t\t      (match_operand:P 2 \"shift_count_or_setmem_operand\" \"Y\")\n+\t\t      (match_operand:P 2 \"setmem_operand\" \"Y\")\n \t\t      (match_operand:P 4 \"const_int_operand\"             \"n\"))\n \t\t    (subreg:P (match_dup 3) <modesize>)]\n \t\t    UNSPEC_REPLICATE_BYTE))\n@@ -3358,7 +3358,7 @@\n (define_insn \"*setmem_long_31z\"\n   [(clobber (match_operand:TI 0 \"register_operand\" \"=d\"))\n    (set (mem:BLK (subreg:SI (match_operand:TI 3 \"register_operand\" \"0\") 4))\n-        (unspec:BLK [(match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n+        (unspec:BLK [(match_operand:SI 2 \"setmem_operand\" \"Y\")\n \t\t     (subreg:SI (match_dup 3) 12)] UNSPEC_REPLICATE_BYTE))\n    (use (match_operand:TI 1 \"register_operand\" \"d\"))\n    (clobber (reg:CC CC_REGNUM))]\n@@ -3371,8 +3371,8 @@\n   [(clobber (match_operand:TI 0 \"register_operand\" \"=d\"))\n    (set (mem:BLK (subreg:SI (match_operand:TI 3 \"register_operand\" \"0\") 4))\n         (unspec:BLK [(and:SI\n-\t\t      (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n-\t\t      (match_operand:SI 4 \"const_int_operand\"             \"n\"))\n+\t\t      (match_operand:SI 2 \"setmem_operand\" \"Y\")\n+\t\t      (match_operand:SI 4 \"const_int_operand\" \"n\"))\n \t\t    (subreg:SI (match_dup 3) 12)] UNSPEC_REPLICATE_BYTE))\n    (use (match_operand:TI 1 \"register_operand\" \"d\"))\n    (clobber (reg:CC CC_REGNUM))]"}, {"sha": "c4a837b177d72be5fa787edd58e4b7e34e0889f6", "filename": "gcc/config/s390/vx-builtins.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd95128ba97f4b43145d76d6624de52e2cbda074/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd95128ba97f4b43145d76d6624de52e2cbda074/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvx-builtins.md?ref=dd95128ba97f4b43145d76d6624de52e2cbda074", "patch": "@@ -150,7 +150,7 @@\n (define_expand \"vec_insert<mode>\"\n   [(set (match_operand:V_HW                    0 \"register_operand\" \"\")\n \t(unspec:V_HW [(match_operand:<non_vec> 2 \"register_operand\" \"\")\n-\t\t      (match_operand:SI        3 \"shift_count_or_setmem_operand\" \"\")\n+\t\t      (match_operand:SI        3 \"nonmemory_operand\" \"\")\n \t\t      (match_operand:V_HW      1 \"register_operand\" \"\")]\n \t\t     UNSPEC_VEC_SET))]\n   \"TARGET_VX\"\n@@ -160,7 +160,7 @@\n (define_expand \"vec_promote<mode>\"\n   [(set (match_operand:V_HW                    0 \"register_operand\" \"\")\n \t(unspec:V_HW [(match_operand:<non_vec> 1 \"register_operand\" \"\")\n-\t\t      (match_operand:SI        2 \"shift_count_or_setmem_operand\" \"\")\n+\t\t      (match_operand:SI        2 \"nonmemory_operand\" \"\")\n \t\t      (match_dup 0)]\n \t\t     UNSPEC_VEC_SET))]\n   \"TARGET_VX\""}]}