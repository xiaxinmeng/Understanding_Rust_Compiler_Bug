{"sha": "38da603971b2179956379c758f953d9a92f358c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhkYTYwMzk3MWIyMTc5OTU2Mzc5Yzc1OGY5NTNkOWE5MmYzNThjNQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-12-07T14:26:37Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-12-07T14:26:37Z"}, "message": "class.c (check_field_decls): Don't special case anonymous fields in error messages.\n\n\t* class.c (check_field_decls): Don't special case anonymous\n\tfields in error messages.\n\t(note_name_declared_in_class): Use %D on diagnostic.\n\n\t* tree.c (pod_type_p): Use strip_array_types.\n\t(cp_valid_lang_attribute): Likewise.\n\t* typeck.c (cp_type_quals): Strip arrays separately, to avoid\n\tmultiple evaluations.\n\t(cp_has_mutable_p): Use strip_array_types.\n\nFrom-SVN: r38112", "tree": {"sha": "366fc57abd7e14073d8ec805faca9244210ec53a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/366fc57abd7e14073d8ec805faca9244210ec53a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38da603971b2179956379c758f953d9a92f358c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38da603971b2179956379c758f953d9a92f358c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38da603971b2179956379c758f953d9a92f358c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38da603971b2179956379c758f953d9a92f358c5/comments", "author": null, "committer": null, "parents": [{"sha": "a11d04b523a602dc745c64ea7bd9058822ebd89a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11d04b523a602dc745c64ea7bd9058822ebd89a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a11d04b523a602dc745c64ea7bd9058822ebd89a"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "00f954910504a0a7a04e9e7f42917675076c81e2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38da603971b2179956379c758f953d9a92f358c5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38da603971b2179956379c758f953d9a92f358c5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=38da603971b2179956379c758f953d9a92f358c5", "patch": "@@ -1,3 +1,15 @@\n+2000-12-07  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* class.c (check_field_decls): Don't special case anonymous\n+\tfields in error messages.\n+\t(note_name_declared_in_class): Use %D on diagnostic.\n+\t\n+\t* tree.c (pod_type_p): Use strip_array_types.\n+\t(cp_valid_lang_attribute): Likewise.\n+\t* typeck.c (cp_type_quals): Strip arrays separately, to avoid\n+\tmultiple evaluations.\n+\t(cp_has_mutable_p): Use strip_array_types.\t\n+\n 2000-12-07  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* cp-tree.h (sufficient_parms_p): Declare new function."}, {"sha": "60041c51a064a438a76b439ec6f57eb1e7582a23", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38da603971b2179956379c758f953d9a92f358c5/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38da603971b2179956379c758f953d9a92f358c5/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=38da603971b2179956379c758f953d9a92f358c5", "patch": "@@ -3537,12 +3537,7 @@ check_field_decls (t, access_decls, empty_p,\n \t  TYPE_HAS_COMPLEX_ASSIGN_REF (t) = 1;\n \n \t  if (! TYPE_HAS_CONSTRUCTOR (t) && extra_warnings)\n-\t    {\n-\t      if (DECL_NAME (x))\n-\t\tcp_warning_at (\"non-static reference `%#D' in class without a constructor\", x);\n-\t      else\n-\t\tcp_warning_at (\"non-static reference in class without a constructor\", x);\n-\t    }\n+            cp_warning_at (\"non-static reference `%#D' in class without a constructor\", x);\n \t}\n \n       type = strip_array_types (type);\n@@ -3574,12 +3569,7 @@ check_field_decls (t, access_decls, empty_p,\n \t  TYPE_HAS_COMPLEX_ASSIGN_REF (t) = 1;\n \n \t  if (! TYPE_HAS_CONSTRUCTOR (t) && extra_warnings)\n-\t    {\n-\t      if (DECL_NAME (x))\n-\t\tcp_warning_at (\"non-static const member `%#D' in class without a constructor\", x);\n-\t      else\n-\t\tcp_warning_at (\"non-static const member in class without a constructor\", x);\n-\t    }\n+            cp_warning_at (\"non-static const member `%#D' in class without a constructor\", x);\n \t}\n       /* A field that is pseudo-const makes the structure likewise.  */\n       else if (IS_AGGR_TYPE (type))\n@@ -6533,8 +6523,8 @@ note_name_declared_in_class (name, decl)\n \t in its context and when re-evaluated in the completed scope of\n \t S.  */\n       cp_error (\"declaration of `%#D'\", decl);\n-      cp_error_at (\"changes meaning of `%s' from `%+#D'\", \n-\t\t   IDENTIFIER_POINTER (DECL_NAME (OVL_CURRENT (decl))),\n+      cp_error_at (\"changes meaning of `%D' from `%+#D'\", \n+\t\t   DECL_NAME (OVL_CURRENT (decl)),\n \t\t   (tree) n->value);\n     }\n }"}, {"sha": "f59aef895ad1cf45d3b3e23d691048216620200a", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38da603971b2179956379c758f953d9a92f358c5/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38da603971b2179956379c758f953d9a92f358c5/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=38da603971b2179956379c758f953d9a92f358c5", "patch": "@@ -2242,8 +2242,7 @@ int\n pod_type_p (t)\n      tree t;\n {\n-  while (TREE_CODE (t) == ARRAY_TYPE)\n-    t = TREE_TYPE (t);\n+  t = strip_array_types (t);\n \n   if (INTEGRAL_TYPE_P (t))\n     return 1;  /* integral, character or enumeral type */\n@@ -2310,8 +2309,7 @@ cp_valid_lang_attribute (attr_name, attr_args, decl, type)\n \n       pri = TREE_INT_CST_LOW (initp_expr);\n \t\n-      while (TREE_CODE (type) == ARRAY_TYPE)\n-\ttype = TREE_TYPE (type);\n+      type = strip_array_types (type);\n \n       if (decl == NULL_TREE\n \t  || TREE_CODE (decl) != VAR_DECL"}, {"sha": "762f552caace61e9d1b874d9165b6d7949fa3ad2", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38da603971b2179956379c758f953d9a92f358c5/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38da603971b2179956379c758f953d9a92f358c5/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=38da603971b2179956379c758f953d9a92f358c5", "patch": "@@ -6983,7 +6983,8 @@ int\n cp_type_quals (type)\n      tree type;\n {\n-  return TYPE_QUALS (strip_array_types (type));\n+  type = strip_array_types (type);\n+  return TYPE_QUALS (type);\n }\n \n /* Returns non-zero if the TYPE contains a mutable member */\n@@ -6992,8 +6993,7 @@ int\n cp_has_mutable_p (type)\n      tree type;\n {\n-  while (TREE_CODE (type) == ARRAY_TYPE)\n-    type = TREE_TYPE (type);\n+  type = strip_array_types (type);\n \n   return CLASS_TYPE_P (type) && CLASSTYPE_HAS_MUTABLE (type);\n }"}]}