{"sha": "e751adc3b1b146663267485a2dcf1ebe239a5c3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc1MWFkYzNiMWIxNDY2NjMyNjc0ODVhMmRjZjFlYmUyMzlhNWMzZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-06-16T17:29:16Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-06-16T17:29:16Z"}, "message": "rope (rope(_CharT, const allocator_type&)): Fix to use _Data_allocate.\n\n2004-06-16  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/rope (rope(_CharT, const allocator_type&)): Fix\n\tto use _Data_allocate.\n\t* include/ext/ropeimpl.h (rope<>::_S_leaf_concat_char_iter): Likewise.\n\t(rope<>::_S_substring): Likewise.\n\t(rope<>::rope(size_t, _CharT, const allocator_type&)): Likewise.\n\t(rope<>::c_str()): Likewise.\n\t(rope<>::replace_with_c_str()): Likewise.\n\n\t* include/ext/ropeimpl.h (_Rope_iterator_base<>::_S_setbuf):\n\tCorrectly qualify _S_leaf, _S_function, etc., with _Rope_constants::,\n\tnot _RopeRep.\n\t(_Rope_iterator_base<>::_S_setcache): Likewise.\n\t(_Rope_iterator_base<>::_S_setcache_for_incr): Likewise.\n\t(rope<>::_S_substring): Likewise.\n\t(rope<>::_S_dump): Likewise.\n\t(rope<>::_S_fetch_ptr): Likewise.\n\t(rope<>::_S_compare): Likewise.\n\t(rope<>::replace_with_c_str()): Likewise.\n\n\t* testsuite/ext/rope.cc: Rename to testsuite/ext/rope/1.cc.\n\t* testsuite/ext/rope/2.cc: New.\n\n2004-06-16  Paolo Carlini  <pcarlini@suse.de>\n\t    Matt Austern  <austern@apple.com>\n\n\t* testsuite/ext/rope/3.cc: New.\n\nCo-Authored-By: Matt Austern <austern@apple.com>\n\nFrom-SVN: r83251", "tree": {"sha": "3379c4371d291388f9724f236f62f45c7e6b39fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3379c4371d291388f9724f236f62f45c7e6b39fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e751adc3b1b146663267485a2dcf1ebe239a5c3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e751adc3b1b146663267485a2dcf1ebe239a5c3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e751adc3b1b146663267485a2dcf1ebe239a5c3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e751adc3b1b146663267485a2dcf1ebe239a5c3d/comments", "author": null, "committer": null, "parents": [{"sha": "5d44aeed9a79c8a149af3c5c22b697ac0beea203", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d44aeed9a79c8a149af3c5c22b697ac0beea203", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d44aeed9a79c8a149af3c5c22b697ac0beea203"}], "stats": {"total": 257, "additions": 226, "deletions": 31}, "files": [{"sha": "c7f87cc0b3ed0b0bc598c425245edca6ed1a386f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e751adc3b1b146663267485a2dcf1ebe239a5c3d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e751adc3b1b146663267485a2dcf1ebe239a5c3d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e751adc3b1b146663267485a2dcf1ebe239a5c3d", "patch": "@@ -1,3 +1,32 @@\n+2004-06-16  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/rope (rope(_CharT, const allocator_type&)): Fix\n+\tto use _Data_allocate.\n+\t* include/ext/ropeimpl.h (rope<>::_S_leaf_concat_char_iter): Likewise.\n+\t(rope<>::_S_substring): Likewise.\n+\t(rope<>::rope(size_t, _CharT, const allocator_type&)): Likewise.\n+\t(rope<>::c_str()): Likewise.\n+\t(rope<>::replace_with_c_str()): Likewise.\n+\n+\t* include/ext/ropeimpl.h (_Rope_iterator_base<>::_S_setbuf):\n+\tCorrectly qualify _S_leaf, _S_function, etc., with _Rope_constants::,\n+\tnot _RopeRep.\n+\t(_Rope_iterator_base<>::_S_setcache): Likewise.\n+\t(_Rope_iterator_base<>::_S_setcache_for_incr): Likewise.\n+\t(rope<>::_S_substring): Likewise.\n+\t(rope<>::_S_dump): Likewise.\n+\t(rope<>::_S_fetch_ptr): Likewise.\n+\t(rope<>::_S_compare): Likewise.\n+\t(rope<>::replace_with_c_str()): Likewise.\t\t\n+\n+\t* testsuite/ext/rope.cc: Rename to testsuite/ext/rope/1.cc.\n+\t* testsuite/ext/rope/2.cc: New.\n+\n+2004-06-16  Paolo Carlini  <pcarlini@suse.de>\n+\t    Matt Austern  <austern@apple.com>\n+\n+\t* testsuite/ext/rope/3.cc: New.\n+\n 2005-06-15  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* acinclude.m4: Remove useless multilib configury."}, {"sha": "95afd82e0b55900bf70b590c3df89a86d3c5c4ab", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e751adc3b1b146663267485a2dcf1ebe239a5c3d/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e751adc3b1b146663267485a2dcf1ebe239a5c3d/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=e751adc3b1b146663267485a2dcf1ebe239a5c3d", "patch": "@@ -1540,7 +1540,7 @@ class rope : public _Rope_base<_CharT,_Alloc> {\n         rope(_CharT __c, const allocator_type& __a = allocator_type())\n         : _Base(__a)\n         {\n-            _CharT* __buf = __a.allocate(_S_rounded_up_size(1));\n+\t    _CharT* __buf = this->_Data_allocate(_S_rounded_up_size(1));\n \n             std::_Construct(__buf, __c);\n             try {"}, {"sha": "5eba107bc9d800fa50a2bc1b22a92cd856fbc62a", "filename": "libstdc++-v3/include/ext/ropeimpl.h", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e751adc3b1b146663267485a2dcf1ebe239a5c3d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e751adc3b1b146663267485a2dcf1ebe239a5c3d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h?ref=e751adc3b1b146663267485a2dcf1ebe239a5c3d", "patch": "@@ -75,14 +75,14 @@ void _Rope_iterator_base<_CharT,_Alloc>::_S_setbuf(\n     size_t __pos = __x._M_current_pos;\n \n     switch(__leaf->_M_tag) {\n-\tcase _RopeRep::_S_leaf:\n+\tcase _Rope_constants::_S_leaf:\n \t    __x._M_buf_start =\n \t      ((_Rope_RopeLeaf<_CharT,_Alloc>*)__leaf)->_M_data;\n \t    __x._M_buf_ptr = __x._M_buf_start + (__pos - __leaf_pos);\n \t    __x._M_buf_end = __x._M_buf_start + __leaf->_M_size;\n \t    break;\n-\tcase _RopeRep::_S_function:\n-\tcase _RopeRep::_S_substringfn:\n+\tcase _Rope_constants::_S_function:\n+\tcase _Rope_constants::_S_substringfn:\n \t    {\n \t\tsize_t __len = _S_iterator_buf_len;\n \t\tsize_t __buf_start_pos = __leaf_pos;\n@@ -142,12 +142,12 @@ void _Rope_iterator_base<_CharT,_Alloc>::_S_setcache\n \t++__curr_depth;\n \t__path[__curr_depth] = __curr_rope;\n \tswitch(__curr_rope->_M_tag) {\n-\t  case _RopeRep::_S_leaf:\n-\t  case _RopeRep::_S_function:\n-\t  case _RopeRep::_S_substringfn:\n+\t  case _Rope_constants::_S_leaf:\n+\t  case _Rope_constants::_S_function:\n+\t  case _Rope_constants::_S_substringfn:\n \t    __x._M_leaf_pos = __curr_start_pos;\n \t    goto done;\n-\t  case _RopeRep::_S_concat:\n+\t  case _Rope_constants::_S_concat:\n \t    {\n \t\t_Rope_RopeConcatenation<_CharT,_Alloc>* __c =\n \t\t\t(_Rope_RopeConcatenation<_CharT,_Alloc>*)__curr_rope;\n@@ -225,7 +225,7 @@ void _Rope_iterator_base<_CharT,_Alloc>::_S_setcache_for_incr\n     __current_node = __c->_M_right;\n     __x._M_path_end[++__current_index] = __current_node;\n     __dirns |= 1;\n-    while (_RopeRep::_S_concat == __current_node->_M_tag) {\n+    while (_Rope_constants::_S_concat == __current_node->_M_tag) {\n \t++__current_index;\n \tif (_S_path_cache_len == __current_index) {\n \t    int __i;\n@@ -322,7 +322,7 @@ inline void _Rope_RopeRep<_CharT,_Alloc>::_M_free_c_string()\n     if (0 != __cstr) {\n \tsize_t __size = this->_M_size + 1;\n \t_Destroy(__cstr, __cstr + __size);\n-\t_Data_deallocate(__cstr, __size);\n+\tthis->_Data_deallocate(__cstr, __size);\n     }\n }\n \n@@ -406,7 +406,7 @@ rope<_CharT,_Alloc>::_S_leaf_concat_char_iter\n {\n     size_t __old_len = __r->_M_size;\n     _CharT* __new_data = (_CharT*)\n-\t__r->get_allocator().allocate(_S_rounded_up_size(__old_len + __len));\n+      _Data_allocate(_S_rounded_up_size(__old_len + __len));\n     _RopeLeaf* __result;\n \n     uninitialized_copy_n(__r->_M_data, __old_len, __new_data);\n@@ -679,7 +679,7 @@ rope<_CharT,_Alloc>::_S_substring(_RopeRep* __base,\n \t__adj_endp1 = __endp1;\n     }\n     switch(__base->_M_tag) {\n-\tcase _RopeRep::_S_concat:\n+\tcase _Rope_constants::_S_concat:\n \t    {\n \t\t_RopeConcatenation* __c = (_RopeConcatenation*)__base;\n \t\t_RopeRep* __left = __c->_M_left;\n@@ -700,7 +700,7 @@ rope<_CharT,_Alloc>::_S_substring(_RopeRep* __base,\n \t\t__result = _S_concat(__left_result, __right_result);\n \t\treturn __result;\n \t    }\n-\tcase _RopeRep::_S_leaf:\n+\tcase _Rope_constants::_S_leaf:\n \t    {\n \t\t_RopeLeaf* __l = (_RopeLeaf*)__base;\n \t\t_RopeLeaf* __result;\n@@ -721,7 +721,7 @@ rope<_CharT,_Alloc>::_S_substring(_RopeRep* __base,\n #               endif\n \t\treturn __result;\n \t    }\n-\tcase _RopeRep::_S_substringfn:\n+\tcase _Rope_constants::_S_substringfn:\n \t    // Avoid introducing multiple layers of substring nodes.\n \t    {\n \t\t_RopeSubstring* __old = (_RopeSubstring*)__base;\n@@ -738,7 +738,7 @@ rope<_CharT,_Alloc>::_S_substring(_RopeRep* __base,\n \n \t\t} // *** else fall through: ***\n \t    }\n-\tcase _RopeRep::_S_function:\n+\tcase _Rope_constants::_S_function:\n \t    {\n \t\t_RopeFunction* __f = (_RopeFunction*)__base;\n \t\t_CharT* __section;\n@@ -748,7 +748,7 @@ rope<_CharT,_Alloc>::_S_substring(_RopeRep* __base,\n \n \t\tif (__result_len > __lazy_threshold) goto lazy;\n \t\t__section = (_CharT*)\n-       \t__base->get_allocator().allocate(_S_rounded_up_size(__result_len));\n+\t\t  _Data_allocate(_S_rounded_up_size(__result_len));\n \t\ttry {\n \t\t  (*(__f->_M_fn))(__start, __result_len, __section);\n                 }\n@@ -1010,7 +1010,7 @@ rope<_CharT,_Alloc>::_S_dump(_RopeRep* __r, int __indent)\n     if (0 == __r) {\n \tprintf(\"NULL\\n\"); return;\n     }\n-    if (_RopeRep::_S_concat == __r->_M_tag) {\n+    if (_Rope_constants::_S_concat == __r->_M_tag) {\n \t_RopeConcatenation* __c = (_RopeConcatenation*)__r;\n \t_RopeRep* __left = __c->_M_left;\n \t_RopeRep* __right = __c->_M_right;\n@@ -1031,13 +1031,13 @@ rope<_CharT,_Alloc>::_S_dump(_RopeRep* __r, int __indent)\n \tchar* __kind;\n \n \tswitch (__r->_M_tag) {\n-\t    case _RopeRep::_S_leaf:\n+\t    case _Rope_constants::_S_leaf:\n \t\t__kind = \"Leaf\";\n \t\tbreak;\n-\t    case _RopeRep::_S_function:\n+\t    case _Rope_constants::_S_function:\n \t\t__kind = \"Function\";\n \t\tbreak;\n-\t    case _RopeRep::_S_substringfn:\n+\t    case _Rope_constants::_S_substringfn:\n \t\t__kind = \"Function representing substring\";\n \t\tbreak;\n \t    default:\n@@ -1241,7 +1241,7 @@ rope<_CharT,_Alloc>::_S_fetch_ptr(_RopeRep* __r, size_type __i)\n     for(;;) {\n       if (__r->_M_ref_count > 1) return 0;\n       switch(__r->_M_tag) {\n-\tcase _RopeRep::_S_concat:\n+        case _Rope_constants::_S_concat:\n \t    {\n \t\t_RopeConcatenation* __c = (_RopeConcatenation*)__r;\n \t\t_RopeRep* __left = __c->_M_left;\n@@ -1256,7 +1256,7 @@ rope<_CharT,_Alloc>::_S_fetch_ptr(_RopeRep* __r, size_type __i)\n \t\t}\n \t    }\n \t    break;\n-\tcase _RopeRep::_S_leaf:\n+\tcase _Rope_constants::_S_leaf:\n \t    {\n \t\t_RopeLeaf* __l = (_RopeLeaf*)__r;\n \t\tif (__l->_M_c_string != __l->_M_data && __l->_M_c_string != 0)\n@@ -1269,8 +1269,8 @@ rope<_CharT,_Alloc>::_S_fetch_ptr(_RopeRep* __r, size_type __i)\n \t\t}\n \t\treturn __l->_M_data + __i;\n \t    }\n-\tcase _RopeRep::_S_function:\n-\tcase _RopeRep::_S_substringfn:\n+\tcase _Rope_constants::_S_function:\n+\tcase _Rope_constants::_S_substringfn:\n \t    return 0;\n       }\n     }\n@@ -1293,7 +1293,7 @@ rope<_CharT,_Alloc>::_S_compare (const _RopeRep* __left,\n     if (0 == __left) return -1;\n     __left_len = __left->_M_size;\n     __right_len = __right->_M_size;\n-    if (_RopeRep::_S_leaf == __left->_M_tag) {\n+    if (_Rope_constants::_S_leaf == __left->_M_tag) {\n \t_RopeLeaf* __l = (_RopeLeaf*) __left;\n \tif (_RopeRep::_S_leaf == __right->_M_tag) {\n \t    _RopeLeaf* __r = (_RopeLeaf*) __right;\n@@ -1310,7 +1310,7 @@ rope<_CharT,_Alloc>::_S_compare (const _RopeRep* __left,\n     } else {\n \tconst_iterator __lstart(__left, 0);\n \tconst_iterator __lend(__left, __left_len);\n-\tif (_RopeRep::_S_leaf == __right->_M_tag) {\n+\tif (_Rope_constants::_S_leaf == __right->_M_tag) {\n \t    _RopeLeaf* __r = (_RopeLeaf*) __right;\n \t    return lexicographical_compare_3way(\n \t\t\t\t   __lstart, __lend,\n@@ -1391,7 +1391,7 @@ rope<_CharT, _Alloc>::rope(size_t __n, _CharT __c,\n     if (0 == __rest) {\n \t__remainder = 0;\n     } else {\n-\t__rest_buffer = __a.allocate(_S_rounded_up_size(__rest));\n+        __rest_buffer = this->_Data_allocate(_S_rounded_up_size(__rest));\n \tuninitialized_fill_n(__rest_buffer, __rest, __c);\n \t_S_cond_store_eos(__rest_buffer[__rest]);\n \ttry {\n@@ -1406,7 +1406,7 @@ rope<_CharT, _Alloc>::rope(size_t __n, _CharT __c,\n     __remainder_rope._M_tree_ptr = __remainder;\n     if (__exponent != 0) {\n \t_CharT* __base_buffer =\n-\t  __a.allocate(_S_rounded_up_size(__exponentiate_threshold));\n+\t  this->_Data_allocate(_S_rounded_up_size(__exponentiate_threshold));\n \t_RopeLeaf* __base_leaf;\n \trope __base_rope;\n \tuninitialized_fill_n(__base_buffer, __exponentiate_threshold, __c);\n@@ -1453,7 +1453,7 @@ const _CharT* rope<_CharT,_Alloc>::c_str() const {\n     if (0 == __result)\n       {\n \tsize_t __s = size();\n-\t__result = this->get_allocator().allocate(__s + 1);\n+\t__result = this->_Data_allocate(__s + 1);\n \t_S_flatten(this->_M_tree_ptr, __result);\n \t__result[__s] = _S_eos((_CharT*)0);\n \tthis->_M_tree_ptr->_M_c_string = __result;\n@@ -1469,12 +1469,12 @@ const _CharT* rope<_CharT,_Alloc>::replace_with_c_str() {\n         return _S_empty_c_str;\n     }\n     __GC_CONST _CharT* __old_c_string = this->_M_tree_ptr->_M_c_string;\n-    if (_RopeRep::_S_leaf == this->_M_tree_ptr->_M_tag\n+    if (_Rope_constants::_S_leaf == this->_M_tree_ptr->_M_tag\n \t&& 0 != __old_c_string) {\n \treturn(__old_c_string);\n     }\n     size_t __s = size();\n-    _CharT* __result = get_allocator().allocate(_S_rounded_up_size(__s));\n+    _CharT* __result = this->_Data_allocate(_S_rounded_up_size(__s));\n     _S_flatten(this->_M_tree_ptr, __result);\n     __result[__s] = _S_eos((_CharT*)0);\n     this->_M_tree_ptr->_M_unref_nonnil();"}, {"sha": "b79e5e91496cfcc06a018cfcda2d5fc913fed9a8", "filename": "libstdc++-v3/testsuite/ext/rope/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e751adc3b1b146663267485a2dcf1ebe239a5c3d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frope%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e751adc3b1b146663267485a2dcf1ebe239a5c3d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frope%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frope%2F1.cc?ref=e751adc3b1b146663267485a2dcf1ebe239a5c3d", "previous_filename": "libstdc++-v3/testsuite/ext/rope.cc"}, {"sha": "db8519f849eed8ea1b8fdfcc2160da3af6e3154a", "filename": "libstdc++-v3/testsuite/ext/rope/2.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e751adc3b1b146663267485a2dcf1ebe239a5c3d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frope%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e751adc3b1b146663267485a2dcf1ebe239a5c3d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frope%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frope%2F2.cc?ref=e751adc3b1b146663267485a2dcf1ebe239a5c3d", "patch": "@@ -0,0 +1,58 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// rope (SGI extension)\n+\n+#include <ext/rope>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+  using namespace __gnu_cxx;\n+  bool test __attribute__((unused)) = true;\n+\n+  crope r(10000, 'x');\n+  crope r2 = r + \"abc\" + r;\n+  crope r3 = r2.substr(10000, 3); \n+  crope r4 = r2.substr(10000, 10000); \n+\n+  reverse(r2.mutable_begin(), r2.mutable_end());\n+  VERIFY( r2[10000] == 'c' );\n+\n+  crope r5('a');\n+  r5.push_front('b');\n+  VERIFY( r5[0] == 'b' );\n+  VERIFY( r5[1] == 'a' );\n+}\n+\n+#if !__GXX_WEAK__ && _MT_ALLOCATOR_H\n+// Explicitly instantiate for systems with no COMDAT or weak support.\n+template class __gnu_cxx::__mt_alloc<__gnu_cxx::_Rope_RopeLeaf<char, std::allocator<char> > >;\n+template class __gnu_cxx::__mt_alloc<__gnu_cxx::_Rope_RopeFunction<char, std::allocator<char> > >;\n+template class __gnu_cxx::__mt_alloc<__gnu_cxx::_Rope_RopeSubstring<char, std::allocator<char> > >;\n+template class __gnu_cxx::__mt_alloc<__gnu_cxx::_Rope_RopeConcatenation<char, std::allocator<char> > >;\n+#endif\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "eec77d132379f32c0ed3b1125a8c003cd6de43ed", "filename": "libstdc++-v3/testsuite/ext/rope/3.cc", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e751adc3b1b146663267485a2dcf1ebe239a5c3d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frope%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e751adc3b1b146663267485a2dcf1ebe239a5c3d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frope%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frope%2F3.cc?ref=e751adc3b1b146663267485a2dcf1ebe239a5c3d", "patch": "@@ -0,0 +1,108 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// rope (SGI extension)\n+\n+#include <ext/rope>\n+#include <testsuite_hooks.h>\n+\n+const char base[] =\n+\"Happy families are all alike; every unhappy family is unhappy in   \\\n+its own way.\t\t\t\t\t\t\t    \\\n+\t\t\t\t\t\t\t\t    \\\n+Everything was in confusion in the Oblonskys' house.  The wife\t    \\\n+had discovered that the husband was carrying on an intrigue with    \\\n+a French girl, who had been a governess in their family, and she    \\\n+had announced to her husband that she could not go on living in\t    \\\n+the same house with him.  This position of affairs had now lasted   \\\n+three days, and not only the husband and wife themselves, but all   \\\n+the members of their family and household, were painfully\t    \\\n+conscious of it.  Every person in the house felt that there was\t    \\\n+so sense in their living together, and that the stray people\t    \\\n+brought together by chance in any inn had more in common with one   \\\n+another than they, the members of the family and household of the   \\\n+Oblonskys.  The wife did not leave her own room, the husband had    \\\n+not been at home for three days.  The children ran wild all over    \\\n+the house; the English governess quarreled with the housekeeper,    \\\n+and wrote to a friend asking her to look out for a new situation    \\\n+for her; the man-cook had walked off the day before just at\t    \\\n+dinner time; the kitchen-maid, and the coachman had given\t    \\\n+warning.\"\t\t\t\t\t\t\t\n+  ;\n+\n+int baselen = sizeof(base) - 1;\n+\n+template<class StringType>\n+StringType\n+multiply(const StringType& s, int n)\n+{\n+  StringType result;\n+  while (n > 0)\n+    {\n+      result += s;\n+      --n;\n+    }\n+  return result;\n+}\n+\n+template <class StringType>\n+StringType\n+mung_substrings(const StringType& s, int len, int n, int skip)\n+{\n+  StringType result;\n+  int start = 0;\n+  while (n > 0)\n+    {\n+      StringType tmp = s.substr (start, len);\n+      result += tmp;\n+      --n;\n+      start += skip;\n+    }\n+  return result;\n+}\n+\n+void \n+test01()\n+{\n+  using namespace __gnu_cxx;\n+  bool test __attribute__((unused)) = true;\n+\n+  crope r;\n+  r = multiply(crope(base), 100000);\n+\n+  crope r1;\n+  r1 = mung_substrings(r, 100000, 500, 73);\n+\n+  VERIFY( r1.size() == 50000000 );\n+  VERIFY( r1.substr(88888, 6)[0] == 's' );\n+  VERIFY( r1.substr(88888, 6)[2] == 'h' );\n+}\n+\n+#if !__GXX_WEAK__ && _MT_ALLOCATOR_H\n+// Explicitly instantiate for systems with no COMDAT or weak support.\n+template class __gnu_cxx::__mt_alloc<__gnu_cxx::_Rope_RopeLeaf<char, std::allocator<char> > >;\n+template class __gnu_cxx::__mt_alloc<__gnu_cxx::_Rope_RopeFunction<char, std::allocator<char> > >;\n+template class __gnu_cxx::__mt_alloc<__gnu_cxx::_Rope_RopeSubstring<char, std::allocator<char> > >;\n+template class __gnu_cxx::__mt_alloc<__gnu_cxx::_Rope_RopeConcatenation<char, std::allocator<char> > >;\n+#endif\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}