{"sha": "ee5afc03f94e8a76c1b1b9306849cd932d5d9090", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU1YWZjMDNmOTRlOGE3NmMxYjFiOTMwNjg0OWNkOTMyZDVkOTA5MA==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-20T10:22:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-20T10:22:59Z"}, "message": "Merge #381\n\n381: Fix crash on empty parameters to generic data type r=philberty a=philberty\n\nWhen no parameters are passed to generic data types we cannot properly\r\ninfer the usage of the generic block.\r\n\r\nThis brings in a canonicalized check for `rustc --explain E0107`\r\n\r\nFixes #379\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "73d5e75e413238df82303e52357b60cf45e4b5bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73d5e75e413238df82303e52357b60cf45e4b5bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee5afc03f94e8a76c1b1b9306849cd932d5d9090", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgfquDCRBK7hj4Ov3rIwAARLsIAJ7koxV6cwEm84yBI25x+ux3\np18kvwD4Z/XGyKlqmowUHLIZdkFB/0zdWcsL0BLttlYHDJxjAQxoopBKYDhtj44V\nT5Lk8rYZgvhH4vl0ENt2HW5of+1ZEdOfV0YnjIIUspb+PkDHTCyhMNVDHb4MjNUj\nXCScyCdXMSslhKiDgjZCtnE+m/bY1Mv+CakbwAGZNsDqU205j3vHfNBAoTqh+hiS\nQx0gFjM7p7juAbbakJutbkhMtYhPdny52sJkdi6pUGqeIUk4ZsEZ3nDrwHOTR8ux\n2LoINjXOmlXSo321Dq79bIZirFzC4NsuvxKMyw+ZNOKfa6lU3sDxQRgPQhgI4xo=\n=9i9e\n-----END PGP SIGNATURE-----\n", "payload": "tree 73d5e75e413238df82303e52357b60cf45e4b5bd\nparent 498758a1c238a539b364ac2c632742a9b64ab4a5\nparent bb103b62d47fd6efedb581f26e7a89bec35caef2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1618914179 +0000\ncommitter GitHub <noreply@github.com> 1618914179 +0000\n\nMerge #381\n\n381: Fix crash on empty parameters to generic data type r=philberty a=philberty\n\nWhen no parameters are passed to generic data types we cannot properly\r\ninfer the usage of the generic block.\r\n\r\nThis brings in a canonicalized check for `rustc --explain E0107`\r\n\r\nFixes #379\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee5afc03f94e8a76c1b1b9306849cd932d5d9090", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee5afc03f94e8a76c1b1b9306849cd932d5d9090", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee5afc03f94e8a76c1b1b9306849cd932d5d9090/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "498758a1c238a539b364ac2c632742a9b64ab4a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/498758a1c238a539b364ac2c632742a9b64ab4a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/498758a1c238a539b364ac2c632742a9b64ab4a5"}, {"sha": "bb103b62d47fd6efedb581f26e7a89bec35caef2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb103b62d47fd6efedb581f26e7a89bec35caef2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb103b62d47fd6efedb581f26e7a89bec35caef2"}], "stats": {"total": 140, "additions": 86, "deletions": 54}, "files": [{"sha": "262a04a608c3fe7e2c8f66bb238b51e08dd8b3f2", "filename": "gcc/rust/hir/tree/rust-hir-path.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5afc03f94e8a76c1b1b9306849cd932d5d9090/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5afc03f94e8a76c1b1b9306849cd932d5d9090/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h?ref=ee5afc03f94e8a76c1b1b9306849cd932d5d9090", "patch": "@@ -165,11 +165,11 @@ struct GenericArgs\n   GenericArgs &operator= (GenericArgs &&other) = default;\n \n   // Creates an empty GenericArgs (no arguments)\n-  static GenericArgs create_empty ()\n+  static GenericArgs create_empty (Location locus = Location ())\n   {\n     return GenericArgs (std::vector<Lifetime> (),\n \t\t\tstd::vector<std::unique_ptr<Type> > (),\n-\t\t\tstd::vector<GenericArgsBinding> ());\n+\t\t\tstd::vector<GenericArgsBinding> (), locus);\n   }\n \n   bool is_empty () const"}, {"sha": "8b23920ddfcd1274dc493c92ea6ba64a85c30742", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5afc03f94e8a76c1b1b9306849cd932d5d9090/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5afc03f94e8a76c1b1b9306849cd932d5d9090/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=ee5afc03f94e8a76c1b1b9306849cd932d5d9090", "patch": "@@ -214,10 +214,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n     auto self\n       = TypeCheckType::Resolve (impl_block.get_type ().get (), &substitutions);\n     if (self == nullptr || self->get_kind () == TyTy::TypeKind::ERROR)\n-      {\n-\trust_error_at (impl_block.get_locus (), \"failed to resolve impl type\");\n-\treturn;\n-      }\n+      return;\n \n     for (auto &impl_item : impl_block.get_impl_items ())\n       TypeCheckTopLevelImplItem::Resolve (impl_item.get (), self,"}, {"sha": "5c21d5a628c7ad08b31b94044ab61ef1b1278e74", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5afc03f94e8a76c1b1b9306849cd932d5d9090/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5afc03f94e8a76c1b1b9306849cd932d5d9090/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=ee5afc03f94e8a76c1b1b9306849cd932d5d9090", "patch": "@@ -72,7 +72,7 @@ class TypeCheckResolveGenericArguments : public TypeCheckBase\n public:\n   static HIR::GenericArgs resolve (HIR::TypePathSegment *segment)\n   {\n-    TypeCheckResolveGenericArguments resolver;\n+    TypeCheckResolveGenericArguments resolver (segment->get_locus ());\n     segment->accept_vis (resolver);\n     return resolver.args;\n   };\n@@ -83,8 +83,8 @@ class TypeCheckResolveGenericArguments : public TypeCheckBase\n   }\n \n private:\n-  TypeCheckResolveGenericArguments ()\n-    : TypeCheckBase (), args (HIR::GenericArgs::create_empty ())\n+  TypeCheckResolveGenericArguments (Location locus)\n+    : TypeCheckBase (), args (HIR::GenericArgs::create_empty (locus))\n   {}\n \n   HIR::GenericArgs args;\n@@ -165,57 +165,57 @@ class TypeCheckType : public TypeCheckBase\n \treturn;\n       }\n \n-    // reverse lookup the hir node from ast node id\n     HirId hir_lookup;\n-    if (context->lookup_type_by_node_id (ref, &hir_lookup))\n+    if (!context->lookup_type_by_node_id (ref, &hir_lookup))\n       {\n-\t// we got an HIR node\n-\tif (context->lookup_type (hir_lookup, &translated))\n-\t  {\n-\t    translated = translated->clone ();\n-\t    auto ref = path.get_mappings ().get_hirid ();\n-\t    translated->set_ref (ref);\n-\n-\t    HIR::TypePathSegment *final_seg = path.get_final_segment ();\n-\t    HIR::GenericArgs args\n-\t      = TypeCheckResolveGenericArguments::resolve (final_seg);\n-\n-\t    bool path_declared_generic_arguments = !args.is_empty ();\n-\t    if (path_declared_generic_arguments)\n-\t      {\n-\t\tif (translated->has_subsititions_defined ())\n-\t\t  {\n-\t\t    translated\n-\t\t      = SubstMapper::Resolve (translated, path.get_locus (),\n-\t\t\t\t\t      &args);\n-\t\t    if (translated->get_kind () != TyTy::TypeKind::ERROR\n-\t\t\t&& mappings != nullptr)\n-\t\t      {\n-\t\t\tcheck_for_unconstrained (args.get_type_args ());\n-\t\t      }\n-\t\t  }\n-\t\telse\n-\t\t  {\n-\t\t    rust_error_at (\n-\t\t      path.get_locus (),\n-\t\t      \"TypePath %s declares generic argument's but \"\n-\t\t      \"the type %s does not have any\",\n-\t\t      path.as_string ().c_str (),\n-\t\t      translated->as_string ().c_str ());\n-\t\t  }\n-\t      }\n-\t    else if (translated->has_subsititions_defined ())\n-\t      {\n-\t\ttranslated\n-\t\t  = SubstMapper::InferSubst (translated, path.get_locus ());\n-\t      }\n+\trust_error_at (path.get_locus (), \"failed to lookup HIR node\");\n+\treturn;\n+      }\n+\n+    TyTy::BaseType *lookup = nullptr;\n+    if (!context->lookup_type (hir_lookup, &lookup))\n+      {\n+\trust_error_at (path.get_locus (), \"failed to lookup HIR TyTy\");\n+\treturn;\n+      }\n+\n+    TyTy::BaseType *path_type = lookup->clone ();\n+    path_type->set_ref (path.get_mappings ().get_hirid ());\n+\n+    HIR::TypePathSegment *final_seg = path.get_final_segment ();\n+    HIR::GenericArgs args\n+      = TypeCheckResolveGenericArguments::resolve (final_seg);\n+\n+    bool is_big_self = final_seg->is_ident_only ()\n+\t\t       && (final_seg->as_string ().compare (\"Self\") == 0);\n \n+    if (path_type->needs_generic_substitutions ())\n+      {\n+\tif (is_big_self)\n+\t  {\n+\t    translated = path_type;\n \t    return;\n \t  }\n-      }\n \n-    rust_error_at (path.get_locus (), \"failed to type-resolve TypePath: %s\",\n-\t\t   path.as_string ().c_str ());\n+\ttranslated = SubstMapper::Resolve (path_type, path.get_locus (), &args);\n+\tif (translated->get_kind () != TyTy::TypeKind::ERROR\n+\t    && mappings != nullptr)\n+\t  {\n+\t    check_for_unconstrained (args.get_type_args ());\n+\t  }\n+      }\n+    else if (!args.is_empty ())\n+      {\n+\trust_error_at (path.get_locus (),\n+\t\t       \"TypePath %s declares generic argument's but \"\n+\t\t       \"the type %s does not have any\",\n+\t\t       path.as_string ().c_str (),\n+\t\t       translated->as_string ().c_str ());\n+      }\n+    else\n+      {\n+\ttranslated = path_type;\n+      }\n   }\n \n   void visit (HIR::ArrayType &type) override"}, {"sha": "cd04b0e9e7a4ddbada965f739b44f4c7c7e00256", "filename": "gcc/rust/typecheck/rust-substitution-mapper.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5afc03f94e8a76c1b1b9306849cd932d5d9090/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5afc03f94e8a76c1b1b9306849cd932d5d9090/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h?ref=ee5afc03f94e8a76c1b1b9306849cd932d5d9090", "patch": "@@ -57,6 +57,9 @@ class SubstMapper : public TyTy::TyVisitor\n       {\n \tTyTy::SubstitutionArgumentMappings mappings\n \t  = type.get_mappings_from_generic_args (*generics);\n+\tif (mappings.is_error ())\n+\t  return;\n+\n \tconcrete = type.handle_substitions (mappings);\n       }\n \n@@ -77,6 +80,9 @@ class SubstMapper : public TyTy::TyVisitor\n       {\n \tTyTy::SubstitutionArgumentMappings mappings\n \t  = type.get_mappings_from_generic_args (*generics);\n+\tif (mappings.is_error ())\n+\t  return;\n+\n \tconcrete = type.handle_substitions (mappings);\n       }\n "}, {"sha": "b92c48f56a7e6ad3d1c26ee9d8729aa56401c195", "filename": "gcc/testsuite/rust.test/xfail_compile/expected_type_args2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5afc03f94e8a76c1b1b9306849cd932d5d9090/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fexpected_type_args2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5afc03f94e8a76c1b1b9306849cd932d5d9090/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fexpected_type_args2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fexpected_type_args2.rs?ref=ee5afc03f94e8a76c1b1b9306849cd932d5d9090", "patch": "@@ -0,0 +1,6 @@\n+struct Foo<A>(A);\n+\n+fn main() {\n+    let a: Foo = Foo::<i32>(123);\n+    // { dg-error \"Invalid number of generic arguments to generic type\" \"\" { target { *-*-* } } .-1 }\n+}"}, {"sha": "4c164ffc9dcb507d456c8e255169ab1747d8b93b", "filename": "gcc/testsuite/rust.test/xfail_compile/expected_type_args3.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5afc03f94e8a76c1b1b9306849cd932d5d9090/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fexpected_type_args3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5afc03f94e8a76c1b1b9306849cd932d5d9090/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fexpected_type_args3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fexpected_type_args3.rs?ref=ee5afc03f94e8a76c1b1b9306849cd932d5d9090", "patch": "@@ -0,0 +1,8 @@\n+struct Foo<A>(A);\n+\n+impl Foo {\n+    // { dg-error \"Invalid number of generic arguments to generic type\" \"\" { target { *-*-* } } .-1 }\n+    fn test() -> i32 {\n+        123\n+    }\n+}"}, {"sha": "70bad1a4c1c8c20befb7589e743c01c91a8244ac", "filename": "gcc/testsuite/rust.test/xfail_compile/generics8.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5afc03f94e8a76c1b1b9306849cd932d5d9090/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics8.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5afc03f94e8a76c1b1b9306849cd932d5d9090/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics8.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics8.rs?ref=ee5afc03f94e8a76c1b1b9306849cd932d5d9090", "patch": "@@ -0,0 +1,15 @@\n+struct Foo<A, B>(A, B);\n+\n+impl<T> Foo<i32, T> {\n+    fn test(a: T) -> T { // { dg-error \"duplicate definitions with name test\" }\n+        a\n+    }\n+}\n+\n+impl Foo<i32, f32> {\n+    fn test() -> f32 { // { dg-error \"duplicate definitions with name test\" }\n+        123f32\n+    }\n+}\n+\n+fn main() {}"}]}