{"sha": "98b1d9b2fa29f9d07a796a21e99dff060b8fac8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThiMWQ5YjJmYTI5ZjlkMDdhNzk2YTIxZTk5ZGZmMDYwYjhmYWM4ZA==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2012-03-07T09:35:15Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2012-03-07T09:35:15Z"}, "message": "invoke.texi (fwritable-relocated-rdata): Document new Cygwin/MinGW target option.\n\n        * doc/invoke.texi (fwritable-relocated-rdata): Document\n        new Cygwin/MinGW target option.\n        * config/i386/winnt.c (i386_pe_unique_section): Ignore\n        reloc if flag -fwritable-relocated-rdata is not set.\n        (i386_pe_section_type_flags): Likewise.\n        * config/i386/cygming.opt (fwritable-relocated-rdata):\n        Add new flag variable flag_writable_rel_rdata.\n\nFrom-SVN: r185027", "tree": {"sha": "d05b512d4849fae49f07165f43623b14c98f46bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d05b512d4849fae49f07165f43623b14c98f46bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98b1d9b2fa29f9d07a796a21e99dff060b8fac8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b1d9b2fa29f9d07a796a21e99dff060b8fac8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98b1d9b2fa29f9d07a796a21e99dff060b8fac8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b1d9b2fa29f9d07a796a21e99dff060b8fac8d/comments", "author": null, "committer": null, "parents": [{"sha": "f409d239aeaa0f7f858163f678febc3603b107dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f409d239aeaa0f7f858163f678febc3603b107dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f409d239aeaa0f7f858163f678febc3603b107dd"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "b38b16d78ea6475c35f7ec7c696efd94c548d426", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b1d9b2fa29f9d07a796a21e99dff060b8fac8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b1d9b2fa29f9d07a796a21e99dff060b8fac8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98b1d9b2fa29f9d07a796a21e99dff060b8fac8d", "patch": "@@ -1,3 +1,13 @@\n+2012-03-07  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* doc/invoke.texi (fwritable-relocated-rdata): Document\n+\tnew Cygwin/MinGW target option.\n+\t* config/i386/winnt.c (i386_pe_unique_section): Ignore\n+\treloc if flag -fwritable-relocated-rdata is not set.\n+\t(i386_pe_section_type_flags): Likewise.\n+\t* config/i386/cygming.opt (fwritable-relocated-rdata):\n+\tAdd new flag variable flag_writable_rel_rdata.\n+\n 2012-03-07  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-math-opts.c (convert_mult_to_widen): Check actual"}, {"sha": "bcee9d4dc9185b87d6bb4ce3465006d037658548", "filename": "gcc/config/i386/cygming.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b1d9b2fa29f9d07a796a21e99dff060b8fac8d/gcc%2Fconfig%2Fi386%2Fcygming.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b1d9b2fa29f9d07a796a21e99dff060b8fac8d/gcc%2Fconfig%2Fi386%2Fcygming.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.opt?ref=98b1d9b2fa29f9d07a796a21e99dff060b8fac8d", "patch": "@@ -53,4 +53,8 @@ Compile code that relies on Cygwin DLL wrappers to support C++ operator new/dele\n posix\n Driver\n \n+fwritable-relocated-rdata\n+Common Report Var(flag_writable_rel_rdata) Init(0)\n+Put relocated read-only data into .data section.\n+\n ; Retain blank line above"}, {"sha": "c1ed1c0436923791996314a4d9a3da6329a46b65", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b1d9b2fa29f9d07a796a21e99dff060b8fac8d/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b1d9b2fa29f9d07a796a21e99dff060b8fac8d/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=98b1d9b2fa29f9d07a796a21e99dff060b8fac8d", "patch": "@@ -395,6 +395,10 @@ i386_pe_unique_section (tree decl, int reloc)\n   const char *name, *prefix;\n   char *string;\n \n+  /* Ignore RELOC, if we are allowed to put relocated\n+     const data into read-only section.  */\n+  if (!flag_writable_rel_rdata)\n+    reloc = 0;\n   name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n   name = i386_pe_strip_name_encoding_full (name);\n \n@@ -441,6 +445,10 @@ i386_pe_section_type_flags (tree decl, const char *name, int reloc)\n   unsigned int flags;\n   unsigned int **slot;\n \n+  /* Ignore RELOC, if we are allowed to put relocated\n+     const data into read-only section.  */\n+  if (!flag_writable_rel_rdata)\n+    reloc = 0;\n   /* The names we put in the hashtable will always be the unique\n      versions given to us by the stringtable, so we can just use\n      their addresses as the keys.  */"}, {"sha": "969fcbe594b41b4ae035c846a7ac7be82b4f2196", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b1d9b2fa29f9d07a796a21e99dff060b8fac8d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b1d9b2fa29f9d07a796a21e99dff060b8fac8d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=98b1d9b2fa29f9d07a796a21e99dff060b8fac8d", "patch": "@@ -14014,6 +14014,13 @@ set. This is necessary for binaries running in kernel mode of\n Microsoft Windows, as there the User32 API, which is used to set executable\n privileges, isn't available.\n \n+@item -fwritable-relocated-rdata\n+@opindex fno-writable-relocated-rdata\n+This option is available for MinGW and Cygwin targets.  It specifies\n+that relocated-data in read-only section is put into .data\n+section.  This is a necessary for older runtimes not supporting\n+modification of .rdata sections for pseudo-relocation.\n+\n @item -mpe-aligned-commons\n @opindex mpe-aligned-commons\n This option is available for Cygwin and MinGW targets.  It"}]}