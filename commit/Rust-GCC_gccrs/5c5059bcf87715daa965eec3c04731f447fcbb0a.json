{"sha": "5c5059bcf87715daa965eec3c04731f447fcbb0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM1MDU5YmNmODc3MTVkYWE5NjVlZWMzYzA0NzMxZjQ0N2ZjYmIwYQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-04-28T12:48:44Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-04-28T12:48:44Z"}, "message": "Fix indentation of gcov-dump.\n\n2017-04-28  Martin Liska  <mliska@suse.cz>\n\n\t* gcov-dump.c (tag_*): Add new argument to declarations.\n\t(dump_gcov_file): Likewise.\n\t(tag_blocks): Add and use new argument depth.\n\t(tag_arcs): Likewise.\n\t(tag_lines): Likewise.\n\t(tag_counters): Likewise.\n\t(tag_summary): Likewise.\n\t(dump_working_sets): Use depth to do a proper indentation.\n\nFrom-SVN: r247369", "tree": {"sha": "d7c876876d573b5b88141e3ec5796af3a2741da1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7c876876d573b5b88141e3ec5796af3a2741da1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c5059bcf87715daa965eec3c04731f447fcbb0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c5059bcf87715daa965eec3c04731f447fcbb0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c5059bcf87715daa965eec3c04731f447fcbb0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c5059bcf87715daa965eec3c04731f447fcbb0a/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ad784e2fcd350c8a9249851402c84895a6671b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad784e2fcd350c8a9249851402c84895a6671b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ad784e2fcd350c8a9249851402c84895a6671b4"}], "stats": {"total": 118, "additions": 69, "deletions": 49}, "files": [{"sha": "4b95fc7d1aaa3715e19fd30df49b7200185b5243", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c5059bcf87715daa965eec3c04731f447fcbb0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c5059bcf87715daa965eec3c04731f447fcbb0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c5059bcf87715daa965eec3c04731f447fcbb0a", "patch": "@@ -1,3 +1,14 @@\n+2017-04-28  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcov-dump.c (tag_*): Add new argument to declarations.\n+\t(dump_gcov_file): Likewise.\n+\t(tag_blocks): Add and use new argument depth.\n+\t(tag_arcs): Likewise.\n+\t(tag_lines): Likewise.\n+\t(tag_counters): Likewise.\n+\t(tag_summary): Likewise.\n+\t(dump_working_sets): Use depth to do a proper indentation.\n+\n 2017-04-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/80531"}, {"sha": "47db17953132deafb6cae86742d80d31c61db5f7", "filename": "gcc/gcov-dump.c", "status": "modified", "additions": 58, "deletions": 49, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c5059bcf87715daa965eec3c04731f447fcbb0a/gcc%2Fgcov-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c5059bcf87715daa965eec3c04731f447fcbb0a/gcc%2Fgcov-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-dump.c?ref=5c5059bcf87715daa965eec3c04731f447fcbb0a", "patch": "@@ -32,21 +32,22 @@ static void dump_gcov_file (const char *);\n static void print_prefix (const char *, unsigned, gcov_position_t);\n static void print_usage (void);\n static void print_version (void);\n-static void tag_function (const char *, unsigned, unsigned);\n-static void tag_blocks (const char *, unsigned, unsigned);\n-static void tag_arcs (const char *, unsigned, unsigned);\n-static void tag_lines (const char *, unsigned, unsigned);\n-static void tag_counters (const char *, unsigned, unsigned);\n-static void tag_summary (const char *, unsigned, unsigned);\n+static void tag_function (const char *, unsigned, unsigned, unsigned);\n+static void tag_blocks (const char *, unsigned, unsigned, unsigned);\n+static void tag_arcs (const char *, unsigned, unsigned, unsigned);\n+static void tag_lines (const char *, unsigned, unsigned, unsigned);\n+static void tag_counters (const char *, unsigned, unsigned, unsigned);\n+static void tag_summary (const char *, unsigned, unsigned, unsigned);\n static void dump_working_sets (const char *filename ATTRIBUTE_UNUSED,\n-                               const struct gcov_ctr_summary *summary);\n+\t\t\t       const struct gcov_ctr_summary *summary,\n+\t\t\t       unsigned depth);\n extern int main (int, char **);\n \n typedef struct tag_format\n {\n   unsigned tag;\n   char const *name;\n-  void (*proc) (const char *, unsigned, unsigned);\n+  void (*proc) (const char *, unsigned, unsigned, unsigned);\n } tag_format_t;\n \n static int flag_dump_contents = 0;\n@@ -63,6 +64,9 @@ static const struct option options[] =\n   { 0, 0, 0, 0 }\n };\n \n+#define VALUE_PADDING_PREFIX \"              \"\n+#define VALUE_PREFIX \"%2d: \"\n+\n static const tag_format_t tag_table[] =\n {\n   {0, \"NOP\", NULL},\n@@ -157,8 +161,8 @@ print_prefix (const char *filename, unsigned depth, gcov_position_t position)\n \n   printf (\"%s:\", filename);\n   if (flag_dump_positions)\n-    printf (\"%lu:\", (unsigned long) position);\n-  printf (\"%.*s\", (int) depth, prefix);\n+    printf (\"%5lu:\", (unsigned long) position);\n+  printf (\"%.*s\", (int) 2 * depth, prefix);\n }\n \n static void\n@@ -257,7 +261,7 @@ dump_gcov_file (const char *filename)\n       print_prefix (filename, tag_depth, position);\n       printf (\"%08x:%4u:%s\", tag, length, format->name);\n       if (format->proc)\n-\t(*format->proc) (filename, tag, length);\n+\t(*format->proc) (filename, tag, length, depth);\n \n       printf (\"\\n\");\n       if (flag_dump_contents && format->proc)\n@@ -285,7 +289,8 @@ dump_gcov_file (const char *filename)\n \n static void\n tag_function (const char *filename ATTRIBUTE_UNUSED,\n-\t      unsigned tag ATTRIBUTE_UNUSED, unsigned length)\n+\t      unsigned tag ATTRIBUTE_UNUSED, unsigned length,\n+\t      unsigned depth ATTRIBUTE_UNUSED)\n {\n   unsigned long pos = gcov_position ();\n \n@@ -312,7 +317,8 @@ tag_function (const char *filename ATTRIBUTE_UNUSED,\n \n static void\n tag_blocks (const char *filename ATTRIBUTE_UNUSED,\n-\t    unsigned tag ATTRIBUTE_UNUSED, unsigned length ATTRIBUTE_UNUSED)\n+\t    unsigned tag ATTRIBUTE_UNUSED, unsigned length ATTRIBUTE_UNUSED,\n+\t    unsigned depth)\n {\n   unsigned n_blocks = GCOV_TAG_BLOCKS_NUM (length);\n \n@@ -327,17 +333,18 @@ tag_blocks (const char *filename ATTRIBUTE_UNUSED,\n \t  if (!(ix & 7))\n \t    {\n \t      printf (\"\\n\");\n-\t      print_prefix (filename, 0, gcov_position ());\n-\t      printf (\"\\t\\t%u\", ix);\n+\t      print_prefix (filename, depth, gcov_position ());\n+\t      printf (VALUE_PADDING_PREFIX VALUE_PREFIX, ix);\n \t    }\n-\t  printf (\" %04x\", gcov_read_unsigned ());\n+\t  printf (\"%04x \", gcov_read_unsigned ());\n \t}\n     }\n }\n \n static void\n tag_arcs (const char *filename ATTRIBUTE_UNUSED,\n-\t  unsigned tag ATTRIBUTE_UNUSED, unsigned length ATTRIBUTE_UNUSED)\n+\t  unsigned tag ATTRIBUTE_UNUSED, unsigned length ATTRIBUTE_UNUSED,\n+\t  unsigned depth)\n {\n   unsigned n_arcs = GCOV_TAG_ARCS_NUM (length);\n \n@@ -354,8 +361,8 @@ tag_arcs (const char *filename ATTRIBUTE_UNUSED,\n \t  if (!(ix & 3))\n \t    {\n \t      printf (\"\\n\");\n-\t      print_prefix (filename, 0, gcov_position ());\n-\t      printf (\"\\tblock %u:\", blockno);\n+\t      print_prefix (filename, depth, gcov_position ());\n+\t      printf (VALUE_PADDING_PREFIX \"block %u:\", blockno);\n \t    }\n \t  dst = gcov_read_unsigned ();\n \t  flags = gcov_read_unsigned ();\n@@ -378,7 +385,8 @@ tag_arcs (const char *filename ATTRIBUTE_UNUSED,\n \n static void\n tag_lines (const char *filename ATTRIBUTE_UNUSED,\n-\t   unsigned tag ATTRIBUTE_UNUSED, unsigned length ATTRIBUTE_UNUSED)\n+\t   unsigned tag ATTRIBUTE_UNUSED, unsigned length ATTRIBUTE_UNUSED,\n+\t   unsigned depth)\n {\n   if (flag_dump_contents)\n     {\n@@ -402,8 +410,8 @@ tag_lines (const char *filename ATTRIBUTE_UNUSED,\n \t  if (!sep)\n \t    {\n \t      printf (\"\\n\");\n-\t      print_prefix (filename, 0, position);\n-\t      printf (\"\\tblock %u:\", blockno);\n+\t      print_prefix (filename, depth, position);\n+\t      printf (VALUE_PADDING_PREFIX \"block %u:\", blockno);\n \t      sep = \"\";\n \t    }\n \t  if (lineno)\n@@ -422,7 +430,8 @@ tag_lines (const char *filename ATTRIBUTE_UNUSED,\n \n static void\n tag_counters (const char *filename ATTRIBUTE_UNUSED,\n-\t      unsigned tag ATTRIBUTE_UNUSED, unsigned length ATTRIBUTE_UNUSED)\n+\t      unsigned tag ATTRIBUTE_UNUSED, unsigned length ATTRIBUTE_UNUSED,\n+\t      unsigned depth)\n {\n #define DEF_GCOV_COUNTER(COUNTER, NAME, MERGE_FN) NAME,\n   static const char *const counter_names[] = {\n@@ -444,20 +453,20 @@ tag_counters (const char *filename ATTRIBUTE_UNUSED,\n \t  if (!(ix & 7))\n \t    {\n \t      printf (\"\\n\");\n-\t      print_prefix (filename, 0, gcov_position ());\n-\t      printf (\"\\t\\t%u\", ix);\n+\t      print_prefix (filename, depth, gcov_position ());\n+\t      printf (VALUE_PADDING_PREFIX VALUE_PREFIX, ix);\n \t    }\n \n \t  count = gcov_read_counter ();\n-\t  printf (\" \");\n-\t  printf (\"%\" PRId64, count);\n+\t  printf (\"%\" PRId64 \" \", count);\n \t}\n     }\n }\n \n static void\n tag_summary (const char *filename ATTRIBUTE_UNUSED,\n-\t     unsigned tag ATTRIBUTE_UNUSED, unsigned length ATTRIBUTE_UNUSED)\n+\t     unsigned tag ATTRIBUTE_UNUSED, unsigned length ATTRIBUTE_UNUSED,\n+\t     unsigned depth)\n {\n   struct gcov_summary summary;\n   unsigned ix, h_ix;\n@@ -469,8 +478,8 @@ tag_summary (const char *filename ATTRIBUTE_UNUSED,\n   for (ix = 0; ix != GCOV_COUNTERS_SUMMABLE; ix++)\n     {\n       printf (\"\\n\");\n-      print_prefix (filename, 0, 0);\n-      printf (\"\\t\\tcounts=%u, runs=%u\",\n+      print_prefix (filename, depth, 0);\n+      printf (VALUE_PADDING_PREFIX \"counts=%u, runs=%u\",\n \t      summary.ctrs[ix].num, summary.ctrs[ix].runs);\n \n       printf (\", sum_all=%\" PRId64,\n@@ -482,30 +491,30 @@ tag_summary (const char *filename ATTRIBUTE_UNUSED,\n       if (ix != GCOV_COUNTER_ARCS)\n         continue;\n       printf (\"\\n\");\n-      print_prefix (filename, 0, 0);\n-      printf (\"\\t\\tcounter histogram:\");\n+      print_prefix (filename, depth, 0);\n+      printf (VALUE_PADDING_PREFIX \"counter histogram:\");\n       for (h_ix = 0; h_ix < GCOV_HISTOGRAM_SIZE; h_ix++)\n         {\n-          histo_bucket = &summary.ctrs[ix].histogram[h_ix];\n-          if (!histo_bucket->num_counters)\n-            continue;\n-          printf (\"\\n\");\n-          print_prefix (filename, 0, 0);\n-          printf (\"\\t\\t%d: num counts=%u, min counter=\"\n-              \"%\" PRId64 \", cum_counter=\"\n-              \"%\" PRId64,\n-\t      h_ix, histo_bucket->num_counters,\n-              (int64_t)histo_bucket->min_value,\n-              (int64_t)histo_bucket->cum_value);\n+\t  histo_bucket = &summary.ctrs[ix].histogram[h_ix];\n+\t  if (!histo_bucket->num_counters)\n+\t    continue;\n+\t  printf (\"\\n\");\n+\t  print_prefix (filename, depth, 0);\n+\t  printf (VALUE_PADDING_PREFIX VALUE_PREFIX \"num counts=%u, \"\n+\t\t  \"min counter=%\" PRId64 \", cum_counter=%\" PRId64,\n+\t\t  h_ix, histo_bucket->num_counters,\n+\t\t  (int64_t)histo_bucket->min_value,\n+\t\t  (int64_t)histo_bucket->cum_value);\n         }\n       if (flag_dump_working_sets)\n-        dump_working_sets (filename, &summary.ctrs[ix]);\n+\tdump_working_sets (filename, &summary.ctrs[ix], depth);\n     }\n }\n \n static void\n dump_working_sets (const char *filename ATTRIBUTE_UNUSED,\n-                   const struct gcov_ctr_summary *summary)\n+\t\t   const struct gcov_ctr_summary *summary,\n+\t\t   unsigned depth)\n {\n   gcov_working_set_t gcov_working_sets[NUM_GCOV_WORKING_SETS];\n   unsigned ws_ix, pctinc, pct;\n@@ -514,8 +523,8 @@ dump_working_sets (const char *filename ATTRIBUTE_UNUSED,\n   compute_working_sets (summary, gcov_working_sets);\n \n   printf (\"\\n\");\n-  print_prefix (filename, 0, 0);\n-  printf (\"\\t\\tcounter working sets:\");\n+  print_prefix (filename, depth, 0);\n+  printf (VALUE_PADDING_PREFIX \"counter working sets:\");\n   /* Multiply the percentage by 100 to avoid float.  */\n   pctinc = 100 * 100 / NUM_GCOV_WORKING_SETS;\n   for (ws_ix = 0, pct = pctinc; ws_ix < NUM_GCOV_WORKING_SETS;\n@@ -526,8 +535,8 @@ dump_working_sets (const char *filename ATTRIBUTE_UNUSED,\n       ws_info = &gcov_working_sets[ws_ix];\n       /* Print out the percentage using int arithmatic to avoid float.  */\n       printf (\"\\n\");\n-      print_prefix (filename, 0, 0);\n-      printf (\"\\t\\t%u.%02u%%: num counts=%u, min counter=\"\n+      print_prefix (filename, depth + 1, 0);\n+      printf (VALUE_PADDING_PREFIX \"%u.%02u%%: num counts=%u, min counter=\"\n                \"%\" PRId64,\n                pct / 100, pct - (pct / 100 * 100),\n                ws_info->num_counters,"}]}