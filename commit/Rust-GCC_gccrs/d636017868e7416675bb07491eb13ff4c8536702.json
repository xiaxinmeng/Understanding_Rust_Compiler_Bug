{"sha": "d636017868e7416675bb07491eb13ff4c8536702", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYzNjAxNzg2OGU3NDE2Njc1YmIwNzQ5MWViMTNmZjRjODUzNjcwMg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2020-01-09T20:57:33Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2020-01-09T20:57:33Z"}, "message": "Save typespec for empty array constructor.\n\n2020-01-09  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/65428\n\t* array.c (empty_constructor): New variable.\n\t(empty_ts): New variable.\n\t(expand_constructor): Save typespec in empty_ts.\n\tUnset empty_constructor if there is an element.\n\t(gfc_expand_constructor): Initialize empty_constructor\n\tand empty_ts.  If there was no explicit constructor\n\ttype and the constructor is empty, take the type from\n\tempty_ts.\n\n2020-01-09  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/65428\n\t* gfortran.dg/zero_sized_11.f90: New test.\n\nFrom-SVN: r280063", "tree": {"sha": "4bea676547c2f7575236f6e24827373ffa143358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bea676547c2f7575236f6e24827373ffa143358"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d636017868e7416675bb07491eb13ff4c8536702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d636017868e7416675bb07491eb13ff4c8536702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d636017868e7416675bb07491eb13ff4c8536702", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d636017868e7416675bb07491eb13ff4c8536702/comments", "author": null, "committer": null, "parents": [{"sha": "2b8ce6216e197e6243052b121c696ac5a5455b85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b8ce6216e197e6243052b121c696ac5a5455b85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b8ce6216e197e6243052b121c696ac5a5455b85"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "c3ca3dedd291148439572bc44a6d98424a53f647", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636017868e7416675bb07491eb13ff4c8536702/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636017868e7416675bb07491eb13ff4c8536702/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d636017868e7416675bb07491eb13ff4c8536702", "patch": "@@ -1,3 +1,15 @@\n+2020-01-09  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/65428\n+\t* array.c (empty_constructor): New variable.\n+\t(empty_ts): New variable.\n+\t(expand_constructor): Save typespec in empty_ts.\n+\tUnset empty_constructor if there is an element.\n+\t(gfc_expand_constructor): Initialize empty_constructor\n+\tand empty_ts.  If there was no explicit constructor\n+\ttype and the constructor is empty, take the type from\n+\tempty_ts.\n+\n 2020-01-09  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/84135"}, {"sha": "c873cf2e09b15f6472e5889b29e07f5855715678", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636017868e7416675bb07491eb13ff4c8536702/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636017868e7416675bb07491eb13ff4c8536702/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=d636017868e7416675bb07491eb13ff4c8536702", "patch": "@@ -1759,6 +1759,11 @@ expand_iterator (gfc_constructor *c)\n   return t;\n }\n \n+/* Variables for noticing if all constructors are empty, and\n+   if any of them had a type.  */\n+\n+static bool empty_constructor;\n+static gfc_typespec empty_ts;\n \n /* Expand a constructor into constant constructors without any\n    iterators, calling the work function for each of the expanded\n@@ -1782,6 +1787,9 @@ expand_constructor (gfc_constructor_base base)\n \n       e = c->expr;\n \n+      if (empty_constructor)\n+\tempty_ts = e->ts;\n+\n       if (e->expr_type == EXPR_ARRAY)\n \t{\n \t  if (!expand_constructor (e->value.constructor))\n@@ -1790,6 +1798,7 @@ expand_constructor (gfc_constructor_base base)\n \t  continue;\n \t}\n \n+      empty_constructor = false;\n       e = gfc_copy_expr (e);\n       if (!gfc_simplify_expr (e, 1))\n \t{\n@@ -1873,6 +1882,8 @@ gfc_expand_constructor (gfc_expr *e, bool fatal)\n \n   iter_stack = NULL;\n \n+  empty_constructor = true;\n+  gfc_clear_ts (&empty_ts);\n   current_expand.expand_work_function = expand;\n \n   if (!expand_constructor (e->value.constructor))\n@@ -1882,6 +1893,13 @@ gfc_expand_constructor (gfc_expr *e, bool fatal)\n       goto done;\n     }\n \n+  /* If we don't have an explicit constructor type, and there\n+     were only empty constructors, then take the type from\n+     them.  */\n+\n+  if (constructor_ts.type == BT_UNKNOWN && empty_constructor)\n+    e->ts = empty_ts;\n+\n   gfc_constructor_free (e->value.constructor);\n   e->value.constructor = current_expand.base;\n "}, {"sha": "0c1dee3497a29ea65e19959a5da6b5f8a79e47e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636017868e7416675bb07491eb13ff4c8536702/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636017868e7416675bb07491eb13ff4c8536702/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d636017868e7416675bb07491eb13ff4c8536702", "patch": "@@ -1,3 +1,9 @@\n+2020-01-09  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/65428\n+\t* gfortran.dg/zero_sized_11.f90: New test.\n+\t* gfortran.dg/zero_sized_12.f90: New test.\n+\n 2020-01-09  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* g++.target/aarch64/sve/acle/general-c++/mul_lane_1.c: New test."}, {"sha": "35f75342b6988d6b38d8f02e4cb32ebadf941e88", "filename": "gcc/testsuite/gfortran.dg/zero_sized_11.f90", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636017868e7416675bb07491eb13ff4c8536702/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636017868e7416675bb07491eb13ff4c8536702/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_11.f90?ref=d636017868e7416675bb07491eb13ff4c8536702", "patch": "@@ -0,0 +1,8 @@\n+! { dg-do compile }\n+! PR 65428 - this used to ICE.  Original test case by FX Coudert.\n+program p\n+   integer :: i\n+   print *, [shape(1)]\n+   print *, [[ integer :: ]]\n+   print *, (/ (/ (i, i=1,0) /) /)\n+end"}, {"sha": "592c19f64fed65823444f9a14b14974a3d4b382a", "filename": "gcc/testsuite/gfortran.dg/zero_sized_12.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d636017868e7416675bb07491eb13ff4c8536702/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d636017868e7416675bb07491eb13ff4c8536702/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_12.f90?ref=d636017868e7416675bb07491eb13ff4c8536702", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do compile }\n+! PR 65248 - this used to ICE. Test case by Tobias Burnus.\n+\n+program main\n+  \n+! C7110  (R770) If type-spec is omitted, each ac-value expression in the\n+! array-constructor shall have the same declared type and kind type parameters\n+\n+! Should be fine as there is either no or only one ac-value:\n+print *, [[integer ::],[real::]]\n+print *, [[integer ::],[real::], [1], [real ::]]\n+print *, [[integer ::],[real::], [\"ABC\"], [real ::]] // \"ABC\"\n+print *, [integer :: [integer ::],[real::]]\n+\n+! OK - accepted\n+print *, [integer :: [1],[1.0]]\n+end"}]}