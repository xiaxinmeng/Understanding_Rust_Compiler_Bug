{"sha": "596b98ceab6f7072c54e542694a80774fb294949", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk2Yjk4Y2VhYjZmNzA3MmM1NGU1NDI2OTRhODA3NzRmYjI5NDk0OQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2005-04-02T17:08:07Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2005-04-02T17:08:07Z"}, "message": "re PR debug/19345 (Segmentation fault with VLA and inlining and dwarf2)\n\ngcc/ChangeLog:\nPR debug/19345\n* dwarf2out.c (add_abstract_origin_attribute): Revert accidental\nchange checked in along with 2005-03-03's patch for debug/20253.\n* tree-inline.c (remap_type): Remap TYPE_STUB_DECL.\n(remap_decl): Insert type decl in map earlier.\ngcc/testsuite/ChangeLog:\n* gcc.dg/pr19345.c: New test.\n\nFrom-SVN: r97449", "tree": {"sha": "91913620b789051aec1d96f7ad92a37fce830aeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91913620b789051aec1d96f7ad92a37fce830aeb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/596b98ceab6f7072c54e542694a80774fb294949", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/596b98ceab6f7072c54e542694a80774fb294949", "html_url": "https://github.com/Rust-GCC/gccrs/commit/596b98ceab6f7072c54e542694a80774fb294949", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/596b98ceab6f7072c54e542694a80774fb294949/comments", "author": null, "committer": null, "parents": [{"sha": "e18d4a1904df31796cd4f10df5fb44fa9ef68d17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e18d4a1904df31796cd4f10df5fb44fa9ef68d17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e18d4a1904df31796cd4f10df5fb44fa9ef68d17"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "f158331c637a9cd187ff68de80a857bbfb170056", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596b98ceab6f7072c54e542694a80774fb294949/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596b98ceab6f7072c54e542694a80774fb294949/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=596b98ceab6f7072c54e542694a80774fb294949", "patch": "@@ -1,3 +1,11 @@\n+2005-04-02  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR debug/19345\n+\t* dwarf2out.c (add_abstract_origin_attribute): Revert accidental\n+\tchange checked in along with 2005-03-03's patch for debug/20253.\n+\t* tree-inline.c (remap_type): Remap TYPE_STUB_DECL.\n+\t(remap_decl): Insert type decl in map earlier.\n+\n 2005-04-02  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR tree-optimization/20640"}, {"sha": "6b08ab649c4fc6bde4f0de5330e34aaf56ff54e3", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596b98ceab6f7072c54e542694a80774fb294949/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596b98ceab6f7072c54e542694a80774fb294949/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=596b98ceab6f7072c54e542694a80774fb294949", "patch": "@@ -10568,11 +10568,7 @@ add_abstract_origin_attribute (dw_die_ref die, tree origin)\n       if (TYPE_P (fn))\n \tfn = TYPE_STUB_DECL (fn);\n       \n-      /* TYPE_STUB_DECL may have given us a NULL, which decl_function_context\n-\t won't like.  */\n-      if (fn)\t\n-\tfn = decl_function_context (fn);\n-\n+      fn = decl_function_context (fn);\n       if (fn)\n \tdwarf2out_abstract_function (fn);\n     }"}, {"sha": "2b3c2ce56d4d41afeb192b45504c03be14f8084f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596b98ceab6f7072c54e542694a80774fb294949/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596b98ceab6f7072c54e542694a80774fb294949/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=596b98ceab6f7072c54e542694a80774fb294949", "patch": "@@ -1,3 +1,7 @@\n+2005-04-02  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* gcc.dg/pr19345.c: New test.\n+\n 2005-04-02  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR tree-optimization/20640"}, {"sha": "40c6de4d8368fd3cff3365841fb7d3a130e4661f", "filename": "gcc/testsuite/gcc.dg/pr19345.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596b98ceab6f7072c54e542694a80774fb294949/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19345.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596b98ceab6f7072c54e542694a80774fb294949/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19345.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19345.c?ref=596b98ceab6f7072c54e542694a80774fb294949", "patch": "@@ -0,0 +1,12 @@\n+/* We shouldn't crash trying to produce the inlined structure type die debug info.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -g\" } */\n+inline void bar(char a[], unsigned int l)\n+{\n+  asm volatile (\"\" :: \"m\" ( *(struct {char x[l]; } *)a));\n+}\n+\n+void foo(void)\n+{\n+  bar (0, 0);\n+}"}, {"sha": "59a2d7237c9f4909ff457a0a5206ef142ae0cdca", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596b98ceab6f7072c54e542694a80774fb294949/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596b98ceab6f7072c54e542694a80774fb294949/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=596b98ceab6f7072c54e542694a80774fb294949", "patch": "@@ -172,6 +172,11 @@ remap_decl (tree decl, inline_data *id)\n       /* Make a copy of the variable or label.  */\n       tree t = copy_decl_for_inlining (decl, fn, VARRAY_TREE (id->fns, 0));\n \n+      /* Remember it, so that if we encounter this local entity again\n+\t we can reuse this copy.  Do this early because remap_type may\n+\t need this decl for TYPE_STUB_DECL.  */\n+      insert_decl_map (id, decl, t);\n+\n       /* Remap types, if necessary.  */\n       TREE_TYPE (t) = remap_type (TREE_TYPE (t), id);\n       if (TREE_CODE (t) == TYPE_DECL)\n@@ -214,9 +219,6 @@ remap_decl (tree decl, inline_data *id)\n \t}\n #endif\n \n-      /* Remember it, so that if we encounter this local entity\n-\t again we can reuse this copy.  */\n-      insert_decl_map (id, decl, t);\n       return t;\n     }\n \n@@ -285,6 +287,9 @@ remap_type (tree type, inline_data *id)\n       TYPE_NEXT_VARIANT (new) = NULL;\n     }\n \n+  if (TYPE_STUB_DECL (type))\n+    TYPE_STUB_DECL (new) = remap_decl (TYPE_STUB_DECL (type), id);\n+\n   /* Lazily create pointer and reference types.  */\n   TYPE_POINTER_TO (new) = NULL;\n   TYPE_REFERENCE_TO (new) = NULL;"}]}