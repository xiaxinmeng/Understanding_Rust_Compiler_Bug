{"sha": "7123ae2455b5a1a2f19f13fa82c377cfda157f23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEyM2FlMjQ1NWI1YTFhMmYxOWYxM2ZhODJjMzc3Y2ZkYTE1N2YyMw==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@gmail.com", "date": "2021-07-27T19:08:41Z"}, "committer": {"name": "Ulrich Drepper", "email": "drepper@gmail.com", "date": "2021-07-27T19:08:41Z"}, "message": "Implement OpenMP 5.1 section 3.15: omp_display_env\n\nThis is a new interface which is easily implemented using the\nalready existing code for the handling of the OMP_DISPLAY_ENV\nenvironment variable.\n\nlibgomp/\n\t* env.c (wait_policy, stacksize): New static variables,\n\tmove out of handle_omp_display_env.\n\t(omp_display_env): New function.  The meat of the old\n\thandle_omp_display_env function.\n\t(handle_omp_display_env): Change to not take parameters\n\tand instead use the global variables.  Only perform\n\tparsing, defer to omp_display_env for the implementation.\n\t(initialize_env): Remove local variables wait_policy and\n\tstacksize.  Don't pass parameters to handle_omp_display_env.\n\t* fortran.c: Add ialias_redirect for omp_display_env.\n\t(omp_display_env_, omp_display_env_8_): New functions.\n\t* libgomp.map (OMP_5.1): New version.  Add omp_display_env,\n\tomp_display_env_, and omp_display_env_8_.\n\t* omp.h.in: Declare omp_display_env.\n\t* omp_lib.f90.in: Likewise.\n\t* omp_lib.h.in: Likewise.", "tree": {"sha": "34c38adcc3e4f5af739a6d72b34186c3b9c78991", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34c38adcc3e4f5af739a6d72b34186c3b9c78991"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7123ae2455b5a1a2f19f13fa82c377cfda157f23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7123ae2455b5a1a2f19f13fa82c377cfda157f23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7123ae2455b5a1a2f19f13fa82c377cfda157f23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7123ae2455b5a1a2f19f13fa82c377cfda157f23/comments", "author": {"login": "drepper", "id": 2918631, "node_id": "MDQ6VXNlcjI5MTg2MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2918631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drepper", "html_url": "https://github.com/drepper", "followers_url": "https://api.github.com/users/drepper/followers", "following_url": "https://api.github.com/users/drepper/following{/other_user}", "gists_url": "https://api.github.com/users/drepper/gists{/gist_id}", "starred_url": "https://api.github.com/users/drepper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drepper/subscriptions", "organizations_url": "https://api.github.com/users/drepper/orgs", "repos_url": "https://api.github.com/users/drepper/repos", "events_url": "https://api.github.com/users/drepper/events{/privacy}", "received_events_url": "https://api.github.com/users/drepper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "drepper", "id": 2918631, "node_id": "MDQ6VXNlcjI5MTg2MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2918631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drepper", "html_url": "https://github.com/drepper", "followers_url": "https://api.github.com/users/drepper/followers", "following_url": "https://api.github.com/users/drepper/following{/other_user}", "gists_url": "https://api.github.com/users/drepper/gists{/gist_id}", "starred_url": "https://api.github.com/users/drepper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drepper/subscriptions", "organizations_url": "https://api.github.com/users/drepper/orgs", "repos_url": "https://api.github.com/users/drepper/repos", "events_url": "https://api.github.com/users/drepper/events{/privacy}", "received_events_url": "https://api.github.com/users/drepper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0853f392a213ef2cecc71ef5349aab079e30f5a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0853f392a213ef2cecc71ef5349aab079e30f5a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0853f392a213ef2cecc71ef5349aab079e30f5a0"}], "stats": {"total": 121, "additions": 81, "deletions": 40}, "files": [{"sha": "5220877d533b591cd0f5d964a9d88ea5ff5f1b8b", "filename": "libgomp/env.c", "status": "modified", "additions": 48, "deletions": 40, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7123ae2455b5a1a2f19f13fa82c377cfda157f23/libgomp%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7123ae2455b5a1a2f19f13fa82c377cfda157f23/libgomp%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fenv.c?ref=7123ae2455b5a1a2f19f13fa82c377cfda157f23", "patch": "@@ -99,6 +99,9 @@ int goacc_default_dims[GOMP_DIM_MAX];\n \n #ifndef LIBGOMP_OFFLOADED_ONLY\n \n+static int wait_policy;\n+static unsigned long stacksize = GOMP_DEFAULT_STACKSIZE;\n+\n /* Parse the OMP_SCHEDULE environment variable.  */\n \n static void\n@@ -1210,46 +1213,11 @@ parse_gomp_openacc_dim (void)\n     }\n }\n \n-static void\n-handle_omp_display_env (unsigned long stacksize, int wait_policy)\n+void\n+omp_display_env (int verbose)\n {\n-  const char *env;\n-  bool display = false;\n-  bool verbose = false;\n   int i;\n \n-  env = getenv (\"OMP_DISPLAY_ENV\");\n-  if (env == NULL)\n-    return;\n-\n-  while (isspace ((unsigned char) *env))\n-    ++env;\n-  if (strncasecmp (env, \"true\", 4) == 0)\n-    {\n-      display = true;\n-      env += 4;\n-    }\n-  else if (strncasecmp (env, \"false\", 5) == 0)\n-    {\n-      display = false;\n-      env += 5;\n-    }\n-  else if (strncasecmp (env, \"verbose\", 7) == 0)\n-    {\n-      display = true;\n-      verbose = true;\n-      env += 7;\n-    }\n-  else\n-    env = \"X\";\n-  while (isspace ((unsigned char) *env))\n-    ++env;\n-  if (*env != '\\0')\n-    gomp_error (\"Invalid value for environment variable OMP_DISPLAY_ENV\");\n-\n-  if (!display)\n-    return;\n-\n   fputs (\"\\nOPENMP DISPLAY ENVIRONMENT BEGIN\\n\", stderr);\n \n   fputs (\"  _OPENMP = '201511'\\n\", stderr);\n@@ -1408,14 +1376,54 @@ handle_omp_display_env (unsigned long stacksize, int wait_policy)\n \n   fputs (\"OPENMP DISPLAY ENVIRONMENT END\\n\", stderr);\n }\n+ialias (omp_display_env)\n+\n+static void\n+handle_omp_display_env (void)\n+{\n+  const char *env;\n+  bool display = false;\n+  bool verbose = false;\n+\n+  env = getenv (\"OMP_DISPLAY_ENV\");\n+  if (env == NULL)\n+    return;\n+\n+  while (isspace ((unsigned char) *env))\n+    ++env;\n+  if (strncasecmp (env, \"true\", 4) == 0)\n+    {\n+      display = true;\n+      env += 4;\n+    }\n+  else if (strncasecmp (env, \"false\", 5) == 0)\n+    {\n+      display = false;\n+      env += 5;\n+    }\n+  else if (strncasecmp (env, \"verbose\", 7) == 0)\n+    {\n+      display = true;\n+      verbose = true;\n+      env += 7;\n+    }\n+  else\n+    env = \"X\";\n+  while (isspace ((unsigned char) *env))\n+    ++env;\n+  if (*env != '\\0')\n+    gomp_error (\"Invalid value for environment variable OMP_DISPLAY_ENV\");\n+\n+  if (display)\n+    omp_display_env (verbose);\n+}\n \n \n static void __attribute__((constructor))\n initialize_env (void)\n {\n-  unsigned long thread_limit_var, stacksize = GOMP_DEFAULT_STACKSIZE;\n+  unsigned long thread_limit_var;\n   unsigned long max_active_levels_var;\n-  int wait_policy;\n \n   /* Do a compile time check that mkomp_h.pl did good job.  */\n   omp_check_defines ();\n@@ -1546,7 +1554,7 @@ initialize_env (void)\n \tgomp_error (\"Stack size change failed: %s\", strerror (err));\n     }\n \n-  handle_omp_display_env (stacksize, wait_policy);\n+  handle_omp_display_env ();\n \n   /* OpenACC.  */\n "}, {"sha": "76285d4376b32341ff488a4369743e9145bef109", "filename": "libgomp/fortran.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7123ae2455b5a1a2f19f13fa82c377cfda157f23/libgomp%2Ffortran.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7123ae2455b5a1a2f19f13fa82c377cfda157f23/libgomp%2Ffortran.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ffortran.c?ref=7123ae2455b5a1a2f19f13fa82c377cfda157f23", "patch": "@@ -94,6 +94,7 @@ ialias_redirect (omp_init_allocator)\n ialias_redirect (omp_destroy_allocator)\n ialias_redirect (omp_set_default_allocator)\n ialias_redirect (omp_get_default_allocator)\n+ialias_redirect (omp_display_env)\n #endif\n \n #ifndef LIBGOMP_GNU_SYMBOL_VERSIONING\n@@ -736,3 +737,15 @@ omp_get_default_allocator_ ()\n {\n   return (intptr_t) omp_get_default_allocator ();\n }\n+\n+void\n+omp_display_env_ (const int32_t *verbose)\n+{\n+  omp_display_env (*verbose);\n+}\n+\n+void\n+omp_display_env_8_ (const int64_t *verbose)\n+{\n+  omp_display_env (!!*verbose);\n+}"}, {"sha": "69aa69562b83068bdb7bba237a2b7981e52b727e", "filename": "libgomp/libgomp.map", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7123ae2455b5a1a2f19f13fa82c377cfda157f23/libgomp%2Flibgomp.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7123ae2455b5a1a2f19f13fa82c377cfda157f23/libgomp%2Flibgomp.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.map?ref=7123ae2455b5a1a2f19f13fa82c377cfda157f23", "patch": "@@ -199,6 +199,13 @@ OMP_5.0.1 {\n \tomp_fulfill_event_;\n } OMP_5.0;\n \n+OMP_5.1 {\n+  global:\n+\tomp_display_env;\n+\tomp_display_env_;\n+\tomp_display_env_8_;\n+} OMP_5.0.1;\n+\n GOMP_1.0 {\n   global:\n \tGOMP_atomic_end;"}, {"sha": "c93db968d2ed8bc4a71b6f725b6a87b922097b04", "filename": "libgomp/omp.h.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7123ae2455b5a1a2f19f13fa82c377cfda157f23/libgomp%2Fomp.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7123ae2455b5a1a2f19f13fa82c377cfda157f23/libgomp%2Fomp.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fomp.h.in?ref=7123ae2455b5a1a2f19f13fa82c377cfda157f23", "patch": "@@ -293,6 +293,8 @@ extern void omp_free (void *,\n \t\t      omp_allocator_handle_t __GOMP_DEFAULT_NULL_ALLOCATOR)\n   __GOMP_NOTHROW;\n \n+extern void omp_display_env (int) __GOMP_NOTHROW;\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "5fc6587e49e86acfe3c824a35d1958be85d38712", "filename": "libgomp/omp_lib.f90.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7123ae2455b5a1a2f19f13fa82c377cfda157f23/libgomp%2Fomp_lib.f90.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7123ae2455b5a1a2f19f13fa82c377cfda157f23/libgomp%2Fomp_lib.f90.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fomp_lib.f90.in?ref=7123ae2455b5a1a2f19f13fa82c377cfda157f23", "patch": "@@ -653,6 +653,15 @@\n           end function\n         end interface\n \n+        interface omp_display_env\n+          subroutine omp_display_env (verbose)\n+            logical (4),intent (in) :: verbose\n+          end subroutine omp_display_env\n+          subroutine omp_display_env_8 (verbose)\n+            logical (8),intent (in) :: verbose\n+          end subroutine omp_display_env_8\n+        end interface\n+\n #if _OPENMP >= 201811\n !GCC$ ATTRIBUTES DEPRECATED :: omp_get_nested, omp_set_nested\n #endif"}, {"sha": "9873cea9ac17708b532d03b7e95d3b92adc322f1", "filename": "libgomp/omp_lib.h.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7123ae2455b5a1a2f19f13fa82c377cfda157f23/libgomp%2Fomp_lib.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7123ae2455b5a1a2f19f13fa82c377cfda157f23/libgomp%2Fomp_lib.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fomp_lib.h.in?ref=7123ae2455b5a1a2f19f13fa82c377cfda157f23", "patch": "@@ -264,3 +264,5 @@\n       external omp_set_default_allocator\n       external omp_get_default_allocator\n       integer (omp_allocator_handle_kind) omp_get_default_allocator\n+\n+      external omp_display_env"}]}