{"sha": "535bd17c2f200547ed8b4c8a243216f666919d20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM1YmQxN2MyZjIwMDU0N2VkOGI0YzhhMjQzMjE2ZjY2NjkxOWQyMA==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-11-19T19:30:18Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-11-19T19:30:18Z"}, "message": "mn10300.h (OUTPUT_ADDR_CONST_EXTRA): Remove.\n\n\t* config/mn10300/mn10300.h (OUTPUT_ADDR_CONST_EXTRA): Remove.\n\t* config/mn10300/mn10300.c (mn10300_asm_output_addr_const_extra): New\n\tfunction.\n\t(TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA): Define.\n\nFrom-SVN: r166955", "tree": {"sha": "cb72eb2c9ec2a945ea53d0d2e442bec027635300", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb72eb2c9ec2a945ea53d0d2e442bec027635300"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/535bd17c2f200547ed8b4c8a243216f666919d20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/535bd17c2f200547ed8b4c8a243216f666919d20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/535bd17c2f200547ed8b4c8a243216f666919d20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/535bd17c2f200547ed8b4c8a243216f666919d20/comments", "author": null, "committer": null, "parents": [{"sha": "a5cc92fdfb1bbd2508600e82782fa6c329208064", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5cc92fdfb1bbd2508600e82782fa6c329208064", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5cc92fdfb1bbd2508600e82782fa6c329208064"}], "stats": {"total": 99, "additions": 56, "deletions": 43}, "files": [{"sha": "7f4a8d77e61c902ba852f2159a8003dc3236b6aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535bd17c2f200547ed8b4c8a243216f666919d20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535bd17c2f200547ed8b4c8a243216f666919d20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=535bd17c2f200547ed8b4c8a243216f666919d20", "patch": "@@ -1,3 +1,10 @@\n+2010-11-19  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/mn10300/mn10300.h (OUTPUT_ADDR_CONST_EXTRA): Remove.\n+\t* config/mn10300/mn10300.c (mn10300_asm_output_addr_const_extra): New\n+\tfunction.\n+\t(TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA): Define.\n+\n 2010-11-19  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* mode-switching.c (optimize_mode_switching): Use"}, {"sha": "a6310b5d3b4216ae11176101598d79b557d005b4", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535bd17c2f200547ed8b4c8a243216f666919d20/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535bd17c2f200547ed8b4c8a243216f666919d20/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=535bd17c2f200547ed8b4c8a243216f666919d20", "patch": "@@ -523,6 +523,52 @@ mn10300_print_operand_address (FILE *file, rtx addr)\n     }\n }\n \n+/* Implement TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA.\n+\n+   Used for PIC-specific UNSPECs.  */\n+\n+static bool\n+mn10300_asm_output_addr_const_extra (FILE *file, rtx x)\n+{\n+  if (GET_CODE (x) == UNSPEC)\n+    {\n+      switch (XINT (x, 1))\n+\t{\n+\tcase UNSPEC_INT_LABEL:\n+\t  asm_fprintf (file, \".%LLIL\" HOST_WIDE_INT_PRINT_DEC,\n+\t\t       INTVAL (XVECEXP (x, 0, 0)));\n+\t  break;\n+\tcase UNSPEC_PIC:\n+\t  /* GLOBAL_OFFSET_TABLE or local symbols, no suffix.  */\n+\t  output_addr_const (file, XVECEXP (x, 0, 0));\n+\t  break;\n+\tcase UNSPEC_GOT:\n+\t  output_addr_const (file, XVECEXP (x, 0, 0));\n+\t  fputs (\"@GOT\", file);\n+\t  break;\n+\tcase UNSPEC_GOTOFF:\n+\t  output_addr_const (file, XVECEXP (x, 0, 0));\n+\t  fputs (\"@GOTOFF\", file);\n+\t  break;\n+\tcase UNSPEC_PLT:\n+\t  output_addr_const (file, XVECEXP (x, 0, 0));\n+\t  fputs (\"@PLT\", file);\n+\t  break;\n+\tcase UNSPEC_GOTSYM_OFF:\n+\t  assemble_name (file, GOT_SYMBOL_NAME);\n+\t  fputs (\"-(\", file);\n+\t  output_addr_const (file, XVECEXP (x, 0, 0));\n+\t  fputs (\"-.)\", file);\n+\t  break;\n+\tdefault:\n+\t  return false;\n+\t}\n+      return true;\n+    }\n+  else\n+    return false;\n+}\n+\n /* Count the number of FP registers that have to be saved.  */\n static int\n fp_regs_to_save (void)\n@@ -2451,6 +2497,9 @@ mn10300_adjust_sched_cost (rtx insn, rtx link, rtx dep, int cost)\n #undef  TARGET_ASM_FILE_START_FILE_DIRECTIVE\n #define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n \n+#undef TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA\n+#define TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA mn10300_asm_output_addr_const_extra\n+\n #undef  TARGET_DEFAULT_TARGET_FLAGS\n #define TARGET_DEFAULT_TARGET_FLAGS MASK_MULT_BUG | MASK_PTR_A0D0\n #undef  TARGET_HANDLE_OPTION"}, {"sha": "d52d0a1fe02e9a9707aaa3845f5db4b896a62260", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535bd17c2f200547ed8b4c8a243216f666919d20/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535bd17c2f200547ed8b4c8a243216f666919d20/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=535bd17c2f200547ed8b4c8a243216f666919d20", "patch": "@@ -599,49 +599,6 @@ struct cum_arg\n \n /* Non-global SYMBOL_REFs have SYMBOL_REF_FLAG enabled.  */\n #define MN10300_GLOBAL_P(X) (! SYMBOL_REF_FLAG (X))\n-\n-/* Recognize machine-specific patterns that may appear within\n-   constants.  Used for PIC-specific UNSPECs.  */\n-#define OUTPUT_ADDR_CONST_EXTRA(STREAM, X, FAIL) \\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    if (GET_CODE (X) == UNSPEC)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tswitch (XINT ((X), 1))\t\t\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\t\t\\\n-\t  case UNSPEC_INT_LABEL:\t\t\t\t\t\\\n-\t    asm_fprintf ((STREAM), \".%LLIL\" HOST_WIDE_INT_PRINT_DEC,\t\\\n- \t\t\t INTVAL (XVECEXP ((X), 0, 0)));\t\t\t\\\n-\t    break;\t\t\t\t\t\t\t\\\n-\t  case UNSPEC_PIC:\t\t\t\t\t\t\\\n-\t    /* GLOBAL_OFFSET_TABLE or local symbols, no suffix.  */\t\\\n-\t    output_addr_const ((STREAM), XVECEXP ((X), 0, 0));\t\t\\\n-\t    break;\t\t\t\t\t\t\t\\\n-\t  case UNSPEC_GOT:\t\t\t\t\t\t\\\n-\t    output_addr_const ((STREAM), XVECEXP ((X), 0, 0));\t\t\\\n-\t    fputs (\"@GOT\", (STREAM));\t\t\t\t\t\\\n-\t    break;\t\t\t\t\t\t\t\\\n-\t  case UNSPEC_GOTOFF:\t\t\t\t\t\t\\\n-\t    output_addr_const ((STREAM), XVECEXP ((X), 0, 0));\t\t\\\n-\t    fputs (\"@GOTOFF\", (STREAM));\t\t\t\t\\\n-\t    break;\t\t\t\t\t\t\t\\\n-\t  case UNSPEC_PLT:\t\t\t\t\t\t\\\n-\t    output_addr_const ((STREAM), XVECEXP ((X), 0, 0));\t\t\\\n-\t    fputs (\"@PLT\", (STREAM));\t\t\t\t\t\\\n-\t    break;\t\t\t\t\t\t\t\\\n-\t  case UNSPEC_GOTSYM_OFF:\t\t\t\t\t\\\n-\t    assemble_name (STREAM, GOT_SYMBOL_NAME);\t\t\t\\\n-\t    fputs (\"-(\", STREAM);\t\t\t\t\t\\\n-\t    output_addr_const (STREAM, XVECEXP (X, 0, 0));\t\t\\\n-\t    fputs (\"-.)\", STREAM);\t\t\t\t\t\\\n-\t    break;\t\t\t\t\t\t\t\\\n-\t  default:\t\t\t\t\t\t\t\\\n-\t    goto FAIL;\t\t\t\t\t\t\t\\\n-\t  }\t\t\t\t\t\t\t\t\\\n-\tbreak;\t\t\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      goto FAIL;\t\t\t\t\t\t\t\\\n-  while (0)\n \f\n #define SELECT_CC_MODE(OP, X, Y)  mn10300_select_cc_mode (X)\n #define REVERSIBLE_CC_MODE(MODE)  0"}]}