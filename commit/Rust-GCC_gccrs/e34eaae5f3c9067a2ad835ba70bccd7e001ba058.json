{"sha": "e34eaae5f3c9067a2ad835ba70bccd7e001ba058", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM0ZWFhZTVmM2M5MDY3YTJhZDgzNWJhNzBiY2NkN2UwMDFiYTA1OA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2002-08-03T23:23:49Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-08-03T23:23:49Z"}, "message": "rs6000.md (movsi_internal1): Add nop mnemonic.\n\n        * config/rs6000/rs6000.md (movsi_internal1): Add nop mnemonic.\n        (movhi_internal): Same.\n        (movqi_internal): Same.\n        (movdi_internal64): Same.\n\n        * config/rs6000/t-ppccomm (MULTILIB_MATCHES_FLOAT): Add mcpu=405.\n\n        * config/rs6000/xcoff.h (SKIP_ASM_OP): Define.\n        (ASM_OUTPUT_SKIP): Use it.  SIZE unsigned.\n        (COMMON_ASM_OP): Define.\n        (ASM_OUTPUT_ALIGNED_COMMON): Use it.  SIZE unsigned.\n        Use ALIGN parameter.\n        (LOCAL_COMMON_ASM_OP): Define.\n        (ASM_OUTPUT_LOCAL): Use it.  SIZE unsigned.\n\nFrom-SVN: r56011", "tree": {"sha": "90f41a913b41e43406c207508284a0c3f907d3a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90f41a913b41e43406c207508284a0c3f907d3a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e34eaae5f3c9067a2ad835ba70bccd7e001ba058", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e34eaae5f3c9067a2ad835ba70bccd7e001ba058", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e34eaae5f3c9067a2ad835ba70bccd7e001ba058", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e34eaae5f3c9067a2ad835ba70bccd7e001ba058/comments", "author": null, "committer": null, "parents": [{"sha": "e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7b489c8c091c2210c01bcd35b9c7cdd2d6b559a"}], "stats": {"total": 55, "additions": 41, "deletions": 14}, "files": [{"sha": "4fd7becf198571b6313286d16031ecb048c60afd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34eaae5f3c9067a2ad835ba70bccd7e001ba058/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34eaae5f3c9067a2ad835ba70bccd7e001ba058/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e34eaae5f3c9067a2ad835ba70bccd7e001ba058", "patch": "@@ -1,3 +1,20 @@\n+2002-08-03  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.md (movsi_internal1): Add nop mnemonic.\n+\t(movhi_internal): Same.\n+\t(movqi_internal): Same.\n+\t(movdi_internal64): Same.\n+\n+\t* config/rs6000/t-ppccomm (MULTILIB_MATCHES_FLOAT): Add mcpu=405.\n+\n+\t* config/rs6000/xcoff.h (SKIP_ASM_OP): Define.\n+\t(ASM_OUTPUT_SKIP): Use it.  SIZE unsigned.\n+\t(COMMON_ASM_OP): Define.\n+\t(ASM_OUTPUT_ALIGNED_COMMON): Use it.  SIZE unsigned.\n+\tUse ALIGN parameter.\n+\t(LOCAL_COMMON_ASM_OP): Define.\n+\t(ASM_OUTPUT_LOCAL): Use it.  SIZE unsigned.\n+\n 2002-08-03  Roger Sayle  <roger@eyesopen.com>\n \n \t* builtins.def: Define new builtin functions exp, expf, expl,"}, {"sha": "dd1cad7353bd0e17579fc7912434d9fa9285d481", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34eaae5f3c9067a2ad835ba70bccd7e001ba058/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34eaae5f3c9067a2ad835ba70bccd7e001ba058/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=e34eaae5f3c9067a2ad835ba70bccd7e001ba058", "patch": "@@ -8197,7 +8197,7 @@\n    mt%0 %1\n    mt%0 %1\n    mt%0 %1\n-   cror 0,0,0\"\n+   {cror 0,0,0|nop}\"\n   [(set_attr \"type\" \"*,*,load,store,*,*,*,*,*,*,mtjmpr,*,*\")\n    (set_attr \"length\" \"4,4,4,4,4,4,8,4,4,4,4,4,4\")])\n \n@@ -8250,7 +8250,7 @@\n   \"\"\n   \"{ rs6000_emit_move (operands[0], operands[1], HImode); DONE; }\")\n \n-(define_insn \"\"\n+(define_insn \"*movhi_internal\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,m,r,r,*q,*c*l,*h\")\n \t(match_operand:HI 1 \"input_operand\" \"r,m,r,i,*h,r,r,0\"))]\n   \"gpc_reg_operand (operands[0], HImode)\n@@ -8263,7 +8263,7 @@\n    mf%1 %0\n    mt%0 %1\n    mt%0 %1\n-   cror 0,0,0\"\n+   {cror 0,0,0|nop}\"\n   [(set_attr \"type\" \"*,load,store,*,*,*,mtjmpr,*\")])\n \n (define_expand \"movqi\"\n@@ -8272,7 +8272,7 @@\n   \"\"\n   \"{ rs6000_emit_move (operands[0], operands[1], QImode); DONE; }\")\n \n-(define_insn \"\"\n+(define_insn \"*movqi_internal\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,r,m,r,r,*q,*c*l,*h\")\n \t(match_operand:QI 1 \"input_operand\" \"r,m,r,i,*h,r,r,0\"))]\n   \"gpc_reg_operand (operands[0], QImode)\n@@ -8285,7 +8285,7 @@\n    mf%1 %0\n    mt%0 %1\n    mt%0 %1\n-   cror 0,0,0\"\n+   {cror 0,0,0|nop}\"\n   [(set_attr \"type\" \"*,load,store,*,*,*,mtjmpr,*\")])\n \f\n ;; Here is how to move condition codes around.  When we store CC data in\n@@ -8967,7 +8967,7 @@\n    stfd%U0%X0 %1,%0\n    mf%1 %0\n    mt%0 %1\n-   cror 0,0,0\"\n+   {cror 0,0,0|nop}\"\n   [(set_attr \"type\" \"*,load,store,*,*,*,*,fp,fpload,fpstore,*,mtjmpr,*\")\n    (set_attr \"length\" \"4,4,4,4,4,20,4,4,4,4,4,4,4\")])\n "}, {"sha": "f4fcdce60a970818d8eb065849ba9aa8d22a1f24", "filename": "gcc/config/rs6000/t-ppccomm", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34eaae5f3c9067a2ad835ba70bccd7e001ba058/gcc%2Fconfig%2Frs6000%2Ft-ppccomm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34eaae5f3c9067a2ad835ba70bccd7e001ba058/gcc%2Fconfig%2Frs6000%2Ft-ppccomm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-ppccomm?ref=e34eaae5f3c9067a2ad835ba70bccd7e001ba058", "patch": "@@ -27,6 +27,7 @@ tramp.S: $(srcdir)/config/rs6000/tramp.asm\n # Switch synonyms\n MULTILIB_MATCHES_FLOAT\t= msoft-float=mcpu?401 \\\n \t\t\t  msoft-float=mcpu?403 \\\n+\t\t\t  msoft-float=mcpu?405 \\\n \t\t\t  msoft-float=mcpu?ec603e \\\n \t\t\t  msoft-float=mcpu?801 \\\n \t\t\t  msoft-float=mcpu?821 \\"}, {"sha": "6f968805083c12475a93aff145e337437621325d", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e34eaae5f3c9067a2ad835ba70bccd7e001ba058/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e34eaae5f3c9067a2ad835ba70bccd7e001ba058/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=e34eaae5f3c9067a2ad835ba70bccd7e001ba058", "patch": "@@ -353,19 +353,26 @@ toc_section ()\t\t\t\t\t\t\\\n \n /* This is how to advance the location counter by SIZE bytes.  */\n \n+#define SKIP_ASM_OP \"\\t.space \"\n+\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t.space %d\\n\", (SIZE))\n+  fprintf (FILE, \"%s%u\\n\", SKIP_ASM_OP, (SIZE))\n \n /* This says how to output an assembler line\n    to define a global common symbol.  */\n \n-#define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGNMENT)\t\\\n-  do { fputs (\"\\t.comm \", (FILE));\t\t\t\\\n+#define COMMON_ASM_OP \"\\t.comm \"\n+\n+#define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\\\n+  do { fputs (COMMON_ASM_OP, (FILE));\t\t\t\\\n        RS6000_OUTPUT_BASENAME ((FILE), (NAME));\t\t\\\n-       if ( (SIZE) > 4)\t\t\t\t\t\\\n-         fprintf ((FILE), \",%d,3\\n\", (SIZE));\t\t\\\n+       if ((ALIGN) > 32)\t\t\t\t\\\n+\t fprintf ((FILE), \",%u,%u\\n\", (SIZE),\t\t\\\n+\t\t  exact_log2 ((ALIGN) / BITS_PER_UNIT)); \\\n+       else if ((SIZE) > 4)\t\t\t\t\\\n+         fprintf ((FILE), \",%u,3\\n\", (SIZE));\t\t\\\n        else\t\t\t\t\t\t\\\n-\t fprintf ((FILE), \",%d\\n\", (SIZE));\t\t\\\n+\t fprintf ((FILE), \",%u\\n\", (SIZE));\t\t\\\n   } while (0)\n \n /* This says how to output an assembler line\n@@ -374,10 +381,12 @@ toc_section ()\t\t\t\t\t\t\\\n    alignment after preceding TOC section if it was aligned\n    for 64-bit mode.  */\n \n+#define LOCAL_COMMON_ASM_OP \"\\t.lcomm \"\n+\n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)\t\\\n-  do { fputs (\"\\t.lcomm \", (FILE));\t\t\t\\\n+  do { fputs (LOCAL_COMMON_ASM_OP, (FILE));\t\t\\\n        RS6000_OUTPUT_BASENAME ((FILE), (NAME));\t\t\\\n-       fprintf ((FILE), \",%d,%s\\n\", (TARGET_32BIT ? (SIZE) : (ROUNDED)), \\\n+       fprintf ((FILE), \",%u,%s\\n\", (TARGET_32BIT ? (SIZE) : (ROUNDED)), \\\n \t\txcoff_bss_section_name);\t\t\\\n      } while (0)\n "}]}