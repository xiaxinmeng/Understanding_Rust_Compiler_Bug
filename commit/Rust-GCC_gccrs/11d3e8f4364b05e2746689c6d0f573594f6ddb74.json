{"sha": "11d3e8f4364b05e2746689c6d0f573594f6ddb74", "node_id": "C_kwDOANBUbNoAKDExZDNlOGY0MzY0YjA1ZTI3NDY2ODljNmQwZjU3MzU5NGY2ZGRiNzQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-10T16:51:49Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-11T13:22:34Z"}, "message": "libstdc++: Make std::common_iterator completely constexpr-able (LWG 3574)\n\nThis library issue was approved in the October 2021 plenary.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_iterator.h (common_iterator): Add constexpr\n\tto all member functions (LWG 3574).\n\t* testsuite/24_iterators/common_iterator/1.cc: Evaluate some\n\ttests as constant expressions.\n\t* testsuite/24_iterators/common_iterator/2.cc: Likewise.", "tree": {"sha": "ab67ccc247eb87037a3c019b1b5a3c18acf6f106", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab67ccc247eb87037a3c019b1b5a3c18acf6f106"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11d3e8f4364b05e2746689c6d0f573594f6ddb74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11d3e8f4364b05e2746689c6d0f573594f6ddb74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11d3e8f4364b05e2746689c6d0f573594f6ddb74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11d3e8f4364b05e2746689c6d0f573594f6ddb74/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "accccf7dee8e040f25421f4c5f41894c8ea974c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/accccf7dee8e040f25421f4c5f41894c8ea974c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/accccf7dee8e040f25421f4c5f41894c8ea974c1"}], "stats": {"total": 57, "additions": 34, "deletions": 23}, "files": [{"sha": "24a71ea55afe06a06a7ff266de03fef2c944a09e", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d3e8f4364b05e2746689c6d0f573594f6ddb74/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d3e8f4364b05e2746689c6d0f573594f6ddb74/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=11d3e8f4364b05e2746689c6d0f573594f6ddb74", "patch": "@@ -77,11 +77,12 @@\n # define __cpp_lib_array_constexpr 201803L\n #endif\n \n-#if __cplusplus > 201703L\n+#if __cplusplus >= 202002L\n # include <compare>\n # include <new>\n # include <bits/exception_defines.h>\n # include <bits/iterator_concepts.h>\n+# include <bits/stl_construct.h>\n #endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -1938,7 +1939,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n-    common_iterator&\n+    constexpr common_iterator&\n     operator=(const common_iterator& __x)\n     noexcept(is_nothrow_copy_assignable_v<_It>\n \t     && is_nothrow_copy_assignable_v<_Sent>\n@@ -1953,7 +1954,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t&& convertible_to<const _Sent2&, _Sent>\n \t&& assignable_from<_It&, const _It2&>\n \t&& assignable_from<_Sent&, const _Sent2&>\n-      common_iterator&\n+      constexpr common_iterator&\n       operator=(const common_iterator<_It2, _Sent2>& __x)\n       noexcept(is_nothrow_constructible_v<_It, const _It2&>\n \t       && is_nothrow_constructible_v<_Sent, const _Sent2&>\n@@ -1973,15 +1974,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    _M_index = -1;\n \t    [[fallthrough]];\n \t  case 0b1001:\n-\t    ::new((void*)std::__addressof(_M_sent)) _Sent(__x._M_sent);\n+\t    std::construct_at(std::__addressof(_M_sent), _Sent(__x._M_sent));\n \t    _M_index = 1;\n \t    break;\n \t  case 0b0100:\n \t    _M_sent.~_Sent();\n \t    _M_index = -1;\n \t    [[fallthrough]];\n \t  case 0b1000:\n-\t    ::new((void*)std::__addressof(_M_it)) _It(__x._M_it);\n+\t    std::construct_at(std::__addressof(_M_it), _It(__x._M_it));\n \t    _M_index = 0;\n \t    break;\n \t  default:\n@@ -1991,6 +1992,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n+    constexpr\n     ~common_iterator()\n     {\n       switch (_M_index)\n@@ -2005,23 +2007,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n     [[nodiscard]]\n-    decltype(auto)\n+    constexpr decltype(auto)\n     operator*()\n     {\n       __glibcxx_assert(_M_index == 0);\n       return *_M_it;\n     }\n \n     [[nodiscard]]\n-    decltype(auto)\n+    constexpr decltype(auto)\n     operator*() const requires __detail::__dereferenceable<const _It>\n     {\n       __glibcxx_assert(_M_index == 0);\n       return *_M_it;\n     }\n \n     [[nodiscard]]\n-    decltype(auto)\n+    constexpr decltype(auto)\n     operator->() const requires __detail::__common_iter_has_arrow<_It>\n     {\n       __glibcxx_assert(_M_index == 0);\n@@ -2036,15 +2038,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __arrow_proxy{*_M_it};\n     }\n \n-    common_iterator&\n+    constexpr common_iterator&\n     operator++()\n     {\n       __glibcxx_assert(_M_index == 0);\n       ++_M_it;\n       return *this;\n     }\n \n-    decltype(auto)\n+    constexpr decltype(auto)\n     operator++(int)\n     {\n       __glibcxx_assert(_M_index == 0);\n@@ -2066,7 +2068,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     template<typename _It2, sentinel_for<_It> _Sent2>\n       requires sentinel_for<_Sent, _It2>\n-      friend bool\n+      friend constexpr bool\n       operator== [[nodiscard]] (const common_iterator& __x,\n \t\t\t\tconst common_iterator<_It2, _Sent2>& __y)\n       {\n@@ -2088,7 +2090,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     template<typename _It2, sentinel_for<_It> _Sent2>\n       requires sentinel_for<_Sent, _It2> && equality_comparable_with<_It, _It2>\n-      friend bool\n+      friend constexpr bool\n       operator== [[nodiscard]] (const common_iterator& __x,\n \t\t\t\tconst common_iterator<_It2, _Sent2>& __y)\n       {\n@@ -2111,7 +2113,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     template<sized_sentinel_for<_It> _It2, sized_sentinel_for<_It> _Sent2>\n       requires sized_sentinel_for<_Sent, _It2>\n-      friend iter_difference_t<_It2>\n+      friend constexpr iter_difference_t<_It2>\n       operator- [[nodiscard]] (const common_iterator& __x,\n \t\t\t       const common_iterator<_It2, _Sent2>& __y)\n       {\n@@ -2133,7 +2135,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n     [[nodiscard]]\n-    friend iter_rvalue_reference_t<_It>\n+    friend constexpr iter_rvalue_reference_t<_It>\n     iter_move(const common_iterator& __i)\n     noexcept(noexcept(ranges::iter_move(std::declval<const _It&>())))\n     requires input_iterator<_It>\n@@ -2143,7 +2145,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n     template<indirectly_swappable<_It> _It2, typename _Sent2>\n-      friend void\n+      friend constexpr void\n       iter_swap(const common_iterator& __x,\n \t\tconst common_iterator<_It2, _Sent2>& __y)\n       noexcept(noexcept(ranges::iter_swap(std::declval<const _It&>(),\n@@ -2158,7 +2160,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<input_or_output_iterator _It2, sentinel_for<_It2> _Sent2>\n       friend class common_iterator;\n \n-    bool _M_has_value() const noexcept { return _M_index < 2; }\n+    constexpr bool _M_has_value() const noexcept { return _M_index < 2; }\n \n     union\n     {"}, {"sha": "484d0cc230151519ea62a9b0bbd1e1254700af93", "filename": "libstdc++-v3/testsuite/24_iterators/common_iterator/1.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d3e8f4364b05e2746689c6d0f573594f6ddb74/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcommon_iterator%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d3e8f4364b05e2746689c6d0f573594f6ddb74/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcommon_iterator%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcommon_iterator%2F1.cc?ref=11d3e8f4364b05e2746689c6d0f573594f6ddb74", "patch": "@@ -88,7 +88,7 @@ test02()\n     VERIFY( i == (&i - out) );\n }\n \n-void\n+constexpr bool\n test03()\n {\n   int arr[2] = { 1, 2 };\n@@ -117,6 +117,9 @@ test03()\n   VERIFY( (j - end) == -2 );\n   VERIFY( (j - i) == 0 );\n \n+  if (std::is_constant_evaluated())\n+    return true;\n+\n   try\n   {\n     struct S { operator const int*() const { throw 1; } };\n@@ -126,8 +129,12 @@ test03()\n   catch (int)\n   {\n   }\n+\n+  return true;\n }\n \n+static_assert( test03() );\n+\n void\n test04()\n {"}, {"sha": "9ec303e526d07a76301768d6f45b04ed6b71cbac", "filename": "libstdc++-v3/testsuite/24_iterators/common_iterator/2.cc", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d3e8f4364b05e2746689c6d0f573594f6ddb74/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcommon_iterator%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d3e8f4364b05e2746689c6d0f573594f6ddb74/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcommon_iterator%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcommon_iterator%2F2.cc?ref=11d3e8f4364b05e2746689c6d0f573594f6ddb74", "patch": "@@ -32,18 +32,18 @@ struct iterator\n   using difference_type = std::ptrdiff_t;\n   using reference = value;\n \n-  value operator*() const { return value{counter}; }\n+  constexpr value operator*() const { return value{counter}; }\n \n-  iterator& operator++() { ++counter; return *this; }\n+  constexpr iterator& operator++() { ++counter; return *this; }\n \n-  iterator operator++(int) { auto i = *this; ++counter; return i; }\n+  constexpr iterator operator++(int) { auto i = *this; ++counter; return i; }\n \n-  bool operator==(sentinel s) const { return counter == s.limit; }\n+  constexpr bool operator==(sentinel s) const { return counter == s.limit; }\n \n   int counter = 0;\n };\n \n-void\n+constexpr bool\n test01()\n {\n   iterator i;\n@@ -54,10 +54,12 @@ test01()\n   VERIFY( begin->n == 1 );\n   ++begin;\n   VERIFY( begin == end );\n+\n+  return true;\n }\n \n int\n main()\n {\n-  test01();\n+  constexpr bool b1 = test01();\n }"}]}