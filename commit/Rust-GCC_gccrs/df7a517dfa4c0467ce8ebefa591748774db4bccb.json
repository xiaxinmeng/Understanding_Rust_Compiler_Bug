{"sha": "df7a517dfa4c0467ce8ebefa591748774db4bccb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY3YTUxN2RmYTRjMDQ2N2NlOGViZWZhNTkxNzQ4Nzc0ZGI0YmNjYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2017-10-27T23:14:43Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2017-10-27T23:14:43Z"}, "message": "re PR c++/82218 ([C++1x] constexpr on static member function causes segfault)\n\n2017-10-27  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/82218\n\t* g++.dg/cpp1y/constexpr-82218.C: New.\n\nFrom-SVN: r254189", "tree": {"sha": "b6d5888f6e9025d381a8a2891e5a3c873196f6e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6d5888f6e9025d381a8a2891e5a3c873196f6e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df7a517dfa4c0467ce8ebefa591748774db4bccb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df7a517dfa4c0467ce8ebefa591748774db4bccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df7a517dfa4c0467ce8ebefa591748774db4bccb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df7a517dfa4c0467ce8ebefa591748774db4bccb/comments", "author": null, "committer": null, "parents": [{"sha": "eada55b96e64a1a1e4a3404b476b3d3d87cc5962", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eada55b96e64a1a1e4a3404b476b3d3d87cc5962", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eada55b96e64a1a1e4a3404b476b3d3d87cc5962"}], "stats": {"total": 133, "additions": 133, "deletions": 0}, "files": [{"sha": "7a90a8d5af349890083ac3acd437ad269ce2df09", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7a517dfa4c0467ce8ebefa591748774db4bccb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7a517dfa4c0467ce8ebefa591748774db4bccb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df7a517dfa4c0467ce8ebefa591748774db4bccb", "patch": "@@ -1,3 +1,8 @@\n+2017-10-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/82218\n+\t* g++.dg/cpp1y/constexpr-82218.C: New.\n+\n 2017-10-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/opt68.ad[sb]: New test."}, {"sha": "06507a9f437b9c83f5285d6991974115be1ffae5", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-82218.C", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7a517dfa4c0467ce8ebefa591748774db4bccb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-82218.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7a517dfa4c0467ce8ebefa591748774db4bccb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-82218.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-82218.C?ref=df7a517dfa4c0467ce8ebefa591748774db4bccb", "patch": "@@ -0,0 +1,128 @@\n+// PR c++/82218\n+// { dg-do compile { target c++14 } }\n+\n+template<typename _Tp>\n+struct identity\n+{\n+  typedef _Tp type;\n+};\n+\n+template<typename _Tp>\n+inline _Tp&&\n+forward(typename identity<_Tp>::type&& __t)\n+{ return __t; }\n+\n+template < typename T >\n+class delegate;\n+\n+template < typename R, typename... Params >\n+class delegate< R(Params...) > final\n+{\n+private:\n+  using CallbackType = R (*)(void*, Params...);\n+\n+  using FunctionPtr = R (*)(Params...);\n+\n+  template < typename Object >\n+  using MethodPtr = R (Object::*)(Params...);\n+\n+  template < typename Object >\n+  using ConstMethodPtr = R (Object::*)(Params...) const;\n+\n+  void* obj_;\n+  CallbackType cb_;\n+\n+  template < typename Object, MethodPtr< Object > Mptr >\n+  constexpr static R invoke_method(void* obj, Params... params) noexcept(\n+      noexcept((static_cast< Object* >(obj)->*Mptr)(params...)))\n+  {\n+    return (static_cast< Object* >(obj)->*Mptr)(params...);\n+  }\n+\n+  template < typename Object, ConstMethodPtr< Object > Mptr >\n+  constexpr static R invoke_method(void* obj, Params... params) noexcept(\n+      noexcept((static_cast< Object* >(obj)->*Mptr)(params...)))\n+  {\n+    return (static_cast< Object* >(obj)->*Mptr)(params...);\n+  }\n+\n+  template < FunctionPtr Fptr >\n+  constexpr static R invoke_function(void*, Params... params) noexcept(\n+      noexcept((*Fptr)(params...)))\n+  {\n+    return (*Fptr)(params...);\n+  }\n+\n+  constexpr delegate(void* obj, CallbackType callback) noexcept : obj_(obj),\n+                                                                  cb_(callback)\n+  {\n+  }\n+\n+  constexpr static R error_function(Params...)\n+  {\n+    while(1);\n+  }\n+\n+public:\n+  using base_type = delegate< R(Params...) >;\n+\n+  delegate()\n+  {\n+    *this = from< error_function >();\n+  }\n+\n+  delegate(const base_type&) = default;\n+  delegate(base_type&&)      = default;\n+\n+  base_type& operator=(const base_type&)  = default;\n+  base_type& operator=(base_type&&)       = default;\n+\n+  template < typename Object, MethodPtr< Object > Mptr >\n+  constexpr static auto from(Object& obj) noexcept\n+  {\n+    return delegate(&obj, &invoke_method< Object, Mptr >);\n+  }\n+\n+  template < typename Object, ConstMethodPtr< Object > Mptr >\n+  constexpr static auto from(Object& obj) noexcept\n+  {\n+    return delegate(&obj, &invoke_method< Object, Mptr >);\n+  }\n+\n+  template < FunctionPtr Fptr >\n+  constexpr static auto from() noexcept\n+  {\n+    static_assert(Fptr != nullptr, \"Function pointer must not be null\");\n+\n+    return delegate(nullptr, &invoke_function< Fptr >);\n+  }\n+\n+  template < typename... Args >\n+  constexpr auto operator()(Args&&... params) const\n+      noexcept(noexcept((*cb_)(obj_, forward< Args >(params)...)))\n+  {\n+    return (*cb_)(obj_, forward< Args >(params)...);\n+  }\n+\n+  constexpr bool valid() const noexcept\n+  {\n+    return (cb_ != &invoke_function< error_function >);\n+  }\n+\n+  constexpr bool operator==(const delegate& other) const noexcept\n+  {\n+    return (obj_ == other.obj_) && (cb_ == other.cb_);\n+  }\n+\n+  constexpr bool operator!=(const delegate& other) const noexcept\n+  {\n+    return (obj_ != other.obj_) || (cb_ != other.cb_);\n+  }\n+};\n+\n+delegate< void(void) > a;\n+\n+void test()\n+{\n+  a();\n+}"}]}