{"sha": "cd34bbe8b9ca57dfaa40e41cef02b003d842b3f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QzNGJiZThiOWNhNTdkZmFhNDBlNDFjZWYwMmIwMDNkODQyYjNmNA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-09-01T18:44:05Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-09-01T18:44:05Z"}, "message": "m32c-protos.h (m32c_function_arg): Delete.\n\n\t* config/m32c/m32c-protos.h (m32c_function_arg): Delete.\n\t(m32c_function_arg_advance): Delete.\n\t* config/m32c/m32c.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n\t* config/m32c/m32c.c (m32c_function_arg): Make static.  Adjust\n\tcomments.  Take a const_tree and a bool.  Declare.\n\t(m32c_function_arg_advance): Likewise.\n\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r163742", "tree": {"sha": "5c2dc4394623eeb9dbdbf55b03708825c8d72454", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c2dc4394623eeb9dbdbf55b03708825c8d72454"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd34bbe8b9ca57dfaa40e41cef02b003d842b3f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd34bbe8b9ca57dfaa40e41cef02b003d842b3f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd34bbe8b9ca57dfaa40e41cef02b003d842b3f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd34bbe8b9ca57dfaa40e41cef02b003d842b3f4/comments", "author": null, "committer": null, "parents": [{"sha": "cecab05b773b6a06a5f2a037910439b96dec5b7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cecab05b773b6a06a5f2a037910439b96dec5b7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cecab05b773b6a06a5f2a037910439b96dec5b7b"}], "stats": {"total": 57, "additions": 32, "deletions": 25}, "files": [{"sha": "10ea824900403c5f8a4c2dfc8f8404c4aae6f356", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd34bbe8b9ca57dfaa40e41cef02b003d842b3f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd34bbe8b9ca57dfaa40e41cef02b003d842b3f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd34bbe8b9ca57dfaa40e41cef02b003d842b3f4", "patch": "@@ -1,3 +1,13 @@\n+2010-09-01  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/m32c/m32c-protos.h (m32c_function_arg): Delete.\n+\t(m32c_function_arg_advance): Delete.\n+\t* config/m32c/m32c.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n+\t* config/m32c/m32c.c (m32c_function_arg): Make static.  Adjust\n+\tcomments.  Take a const_tree and a bool.  Declare.\n+\t(m32c_function_arg_advance): Likewise.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n 2010-09-01  Uros Bizjak  <ubizjak@gmail.com>\n \n         PR target/45476"}, {"sha": "b7061e3358e283af75a73ee594b4cbd810f5d6cb", "filename": "gcc/config/m32c/m32c-protos.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd34bbe8b9ca57dfaa40e41cef02b003d842b3f4/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd34bbe8b9ca57dfaa40e41cef02b003d842b3f4/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h?ref=cd34bbe8b9ca57dfaa40e41cef02b003d842b3f4", "patch": "@@ -46,12 +46,6 @@ int  m32c_regno_ok_for_base_p (int);\n int  m32c_trampoline_alignment (void);\n int  m32c_trampoline_size (void);\n \n-#if defined(RTX_CODE) && defined(TREE_CODE)\n-\n-rtx  m32c_function_arg (CUMULATIVE_ARGS *, MM, tree, int);\n-\n-#endif\n-\n #ifdef RTX_CODE\n \n int  m32c_cannot_change_mode_class (MM, MM, int);\n@@ -96,7 +90,6 @@ int  m32c_split_psi_p (rtx *);\n \n #ifdef TREE_CODE\n \n-void m32c_function_arg_advance (CUMULATIVE_ARGS *, MM, tree, int);\n tree m32c_gimplify_va_arg_expr (tree, tree, gimple_seq *, gimple_seq *);\n void m32c_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree, int);\n bool m32c_promote_function_return (const_tree);"}, {"sha": "7be6fce643616961cafb19a3547208744793a422", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd34bbe8b9ca57dfaa40e41cef02b003d842b3f4/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd34bbe8b9ca57dfaa40e41cef02b003d842b3f4/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=cd34bbe8b9ca57dfaa40e41cef02b003d842b3f4", "patch": "@@ -73,8 +73,12 @@ static bool m32c_fixed_condition_code_regs (unsigned int *, unsigned int *);\n static struct machine_function *m32c_init_machine_status (void);\n static void m32c_insert_attributes (tree, tree *);\n static bool m32c_legitimate_address_p (enum machine_mode, rtx, bool);\n+static rtx m32_function_arg (CUMULATIVE_ARGS *, enum machine_mode\n+\t\t\t     const_tree, bool);\n static bool m32c_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t    const_tree, bool);\n+static void m32c_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t       const_tree, bool);\n static bool m32c_promote_prototypes (const_tree);\n static int m32c_pushm_popm (Push_Pop_Type);\n static bool m32c_strict_argument_naming (CUMULATIVE_ARGS *);\n@@ -1453,10 +1457,11 @@ m32c_push_rounding (int n)\n \n /* Passing Arguments in Registers */\n \n-/* Implements FUNCTION_ARG.  Arguments are passed partly in registers,\n-   partly on stack.  If our function returns a struct, a pointer to a\n-   buffer for it is at the top of the stack (last thing pushed).  The\n-   first few real arguments may be in registers as follows:\n+/* Implements TARGET_FUNCTION_ARG.  Arguments are passed partly in\n+   registers, partly on stack.  If our function returns a struct, a\n+   pointer to a buffer for it is at the top of the stack (last thing\n+   pushed).  The first few real arguments may be in registers as\n+   follows:\n \n    R8C/M16C:\targ1 in r1 if it's QI or HI (else it's pushed on stack)\n \t\targ2 in r2 if it's HI (else pushed on stack)\n@@ -1469,9 +1474,11 @@ m32c_push_rounding (int n)\n \n    Note that when arg1 doesn't fit in r1, arg2 may still be passed in\n    r2 if it fits.  */\n-rtx\n+#undef TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG m32c_function_arg\n+static rtx\n m32c_function_arg (CUMULATIVE_ARGS * ca,\n-\t\t   enum machine_mode mode, tree type, int named)\n+\t\t   enum machine_mode mode, const_tree type, bool named)\n {\n   /* Can return a reg, parallel, or 0 for stack */\n   rtx rv = NULL_RTX;\n@@ -1544,15 +1551,17 @@ m32c_init_cumulative_args (CUMULATIVE_ARGS * ca,\n   ca->parm_num = 1;\n }\n \n-/* Implements FUNCTION_ARG_ADVANCE.  force_mem is set for functions\n-   returning structures, so we always reset that.  Otherwise, we only\n-   need to know the sequence number of the argument to know what to do\n-   with it.  */\n-void\n+/* Implements TARGET_FUNCTION_ARG_ADVANCE.  force_mem is set for\n+   functions returning structures, so we always reset that.  Otherwise,\n+   we only need to know the sequence number of the argument to know what\n+   to do with it.  */\n+#undef TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE m32c_function_arg_advance\n+static void\n m32c_function_arg_advance (CUMULATIVE_ARGS * ca,\n \t\t\t   enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\t   tree type ATTRIBUTE_UNUSED,\n-\t\t\t   int named ATTRIBUTE_UNUSED)\n+\t\t\t   const_tree type ATTRIBUTE_UNUSED,\n+\t\t\t   bool named ATTRIBUTE_UNUSED)\n {\n   if (ca->force_mem)\n     ca->force_mem = 0;"}, {"sha": "e1ba207ffdce051c2a51d876ae064df4184978b8", "filename": "gcc/config/m32c/m32c.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd34bbe8b9ca57dfaa40e41cef02b003d842b3f4/gcc%2Fconfig%2Fm32c%2Fm32c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd34bbe8b9ca57dfaa40e41cef02b003d842b3f4/gcc%2Fconfig%2Fm32c%2Fm32c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.h?ref=cd34bbe8b9ca57dfaa40e41cef02b003d842b3f4", "patch": "@@ -505,9 +505,6 @@ enum reg_class\n \n /* Passing Arguments in Registers */\n \n-#define FUNCTION_ARG(CA,MODE,TYPE,NAMED) \\\n-\tm32c_function_arg (&(CA),MODE,TYPE,NAMED)\n-\n typedef struct m32c_cumulative_args\n {\n   /* For address of return value buffer (structures are returned by\n@@ -523,8 +520,6 @@ typedef struct m32c_cumulative_args\n #define CUMULATIVE_ARGS m32c_cumulative_args\n #define INIT_CUMULATIVE_ARGS(CA,FNTYPE,LIBNAME,FNDECL,N_NAMED_ARGS) \\\n \tm32c_init_cumulative_args (&(CA),FNTYPE,LIBNAME,FNDECL,N_NAMED_ARGS)\n-#define FUNCTION_ARG_ADVANCE(CA,MODE,TYPE,NAMED) \\\n-\tm32c_function_arg_advance (&(CA),MODE,TYPE,NAMED)\n #define FUNCTION_ARG_BOUNDARY(MODE,TYPE) (TARGET_A16 ? 8 : 16)\n #define FUNCTION_ARG_REGNO_P(r) m32c_function_arg_regno_p (r)\n "}]}