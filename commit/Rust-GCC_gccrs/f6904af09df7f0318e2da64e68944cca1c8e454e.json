{"sha": "f6904af09df7f0318e2da64e68944cca1c8e454e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY5MDRhZjA5ZGY3ZjAzMThlMmRhNjRlNjg5NDRjY2ExYzhlNDU0ZQ==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2018-05-22T13:27:01Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-22T13:27:01Z"}, "message": "[Ada] Fix Reraise_Occurrence of Foreign_Exception\n\nIn a sequence like\n\n(d)            (c)                 (b)              (a)\nc++ raises <-- Ada calls c++,  <-- c++ call Ada <-- Ada calls\nexception      others handler      and handles      c++\n               gets foreign        c++ exception\n               exception and\n               re-raises\n\nthe original exception raised on the C++ world at (d) couldn't be caught\nas a regular c++ exception at (b) when the re-raise performed at (c) is\ndone with an explicit call to Ada.Exceptions.Reraise_Occurrence.\n\nIndeed, the latter just re-crafted a new Ada-ish occurence and the\nnature and contents of the original exception object were lost.\n\nThis patch fixes this by refining Reraise_Occurrence to be more careful\nwith exceptions in the course of a propagation, just resuming propagation\nof the original object.\n\nFrom the set of soures below, compilation and execution with:\n\n  g++ -c bd.cc && gnatmake -f -g a.adb -largs bd.o --LINK=g++ && ./a\n\nis expected to output:\n\nforeign exception caught, reraising ...\nb() caught x = 5\n\n----\n\n// bd.cc\n\nextern \"C\" {\n  extern void c();\n\n  void b ();\n  void d ();\n}\n\nvoid b ()\n{\n  try {\n    c();\n  } catch (int x) {\n    printf (\"b() caught x = %d\\n\", x);\n  }\n}\n\nvoid d ()\n{\n  throw (5);\n}\n\n-- a.adb\n\nwith C;\nprocedure A is\n   procedure B;\n   pragma Import (Cpp, B);\nbegin\n   B;\nend;\n\n-- c.ads\n\nprocedure C;\npragma Export (C, C, \"c\");\n\n-- c.adb\n\nwith Ada.Exceptions; use Ada.Exceptions;\nwith System.Standard_Library;\nwith Ada.Unchecked_Conversion;\n\nwith Ada.Text_IO; use Ada.Text_IO;\n\nprocedure C is\n   package SSL renames System.Standard_Library;\n   use type SSL.Exception_Data_Ptr;\n\n   function To_Exception_Data_Ptr is new\n     Ada.Unchecked_Conversion (Exception_Id, SSL.Exception_Data_Ptr);\n\n   procedure D;\n   pragma Import (Cpp, D);\n\n   Foreign_Exception : aliased SSL.Exception_Data;\n   pragma Import\n     (Ada, Foreign_Exception, \"system__exceptions__foreign_exception\");\nbegin\n   D;\nexception\n   when E : others =>\n      if To_Exception_Data_Ptr (Exception_Identity (E))\n        = Foreign_Exception'Unchecked_access\n      then\n         Put_Line (\"foreign exception caught, reraising ...\");\n         Reraise_Occurrence (E);\n      end if;\nend;\n\n2018-05-22  Olivier Hainque  <hainque@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/a-except.adb (Exception_Propagation.Propagate_Exception):\n\tExpect an Exception_Occurence object, not an Access.\n\t(Complete_And_Propagate_Occurrence): Adjust accordingly.\n\t(Raise_From_Signal_Handler): Likewise.\n\t(Reraise_Occurrence_No_Defer): If we have a Machine_Occurrence\n\tavailable in the provided occurrence object, just re-propagate the\n\tlatter as a bare \"raise;\" would do.\n\t* libgnat/a-exexpr.adb (Propagate_Exception): Adjust to spec change.\n\t* libgnat/a-exstat.adb (String_To_EO): Initialize X.Machine_Occurrence\n\tto null, to mark that the occurrence we're crafting from the stream\n\tcontents is not being propagated (yet).\n\nFrom-SVN: r260533", "tree": {"sha": "932f66d68c2b3bd4620f99e0e31440d769ab197d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/932f66d68c2b3bd4620f99e0e31440d769ab197d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6904af09df7f0318e2da64e68944cca1c8e454e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6904af09df7f0318e2da64e68944cca1c8e454e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6904af09df7f0318e2da64e68944cca1c8e454e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6904af09df7f0318e2da64e68944cca1c8e454e/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "02db8169939bb489abb6c7025395a3fc671b79b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02db8169939bb489abb6c7025395a3fc671b79b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02db8169939bb489abb6c7025395a3fc671b79b6"}], "stats": {"total": 50, "additions": 41, "deletions": 9}, "files": [{"sha": "a5b1dc6a14432c23b56e5bce12b15d41ddfeff7b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6904af09df7f0318e2da64e68944cca1c8e454e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6904af09df7f0318e2da64e68944cca1c8e454e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f6904af09df7f0318e2da64e68944cca1c8e454e", "patch": "@@ -1,3 +1,17 @@\n+2018-05-22  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* libgnat/a-except.adb (Exception_Propagation.Propagate_Exception):\n+\tExpect an Exception_Occurence object, not an Access.\n+\t(Complete_And_Propagate_Occurrence): Adjust accordingly.\n+\t(Raise_From_Signal_Handler): Likewise.\n+\t(Reraise_Occurrence_No_Defer): If we have a Machine_Occurrence\n+\tavailable in the provided occurrence object, just re-propagate the\n+\tlatter as a bare \"raise;\" would do.\n+\t* libgnat/a-exexpr.adb (Propagate_Exception): Adjust to spec change.\n+\t* libgnat/a-exstat.adb (String_To_EO): Initialize X.Machine_Occurrence\n+\tto null, to mark that the occurrence we're crafting from the stream\n+\tcontents is not being propagated (yet).\n+\n 2018-05-22  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_aggr.adb (Initialize_Ctrl_Record_Component): Insert the generated"}, {"sha": "c2f2f0669798f5a5603f2826783f181c27a1cd42", "filename": "gcc/ada/libgnat/a-except.adb", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6904af09df7f0318e2da64e68944cca1c8e454e/gcc%2Fada%2Flibgnat%2Fa-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6904af09df7f0318e2da64e68944cca1c8e454e/gcc%2Fada%2Flibgnat%2Fa-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-except.adb?ref=f6904af09df7f0318e2da64e68944cca1c8e454e", "patch": "@@ -228,7 +228,7 @@ package body Ada.Exceptions is\n       function Allocate_Occurrence return EOA;\n       --  Allocate an exception occurrence (as well as the machine occurrence)\n \n-      procedure Propagate_Exception (Excep : EOA);\n+      procedure Propagate_Exception (Excep : Exception_Occurrence);\n       pragma No_Return (Propagate_Exception);\n       --  This procedure propagates the exception represented by Excep\n \n@@ -940,7 +940,7 @@ package body Ada.Exceptions is\n    procedure Complete_And_Propagate_Occurrence (X : EOA) is\n    begin\n       Complete_Occurrence (X);\n-      Exception_Propagation.Propagate_Exception (X);\n+      Exception_Propagation.Propagate_Exception (X.all);\n    end Complete_And_Propagate_Occurrence;\n \n    ---------------------\n@@ -1091,7 +1091,7 @@ package body Ada.Exceptions is\n    is\n    begin\n       Exception_Propagation.Propagate_Exception\n-        (Create_Occurrence_From_Signal_Handler (E, M));\n+        (Create_Occurrence_From_Signal_Handler (E, M).all);\n    end Raise_From_Signal_Handler;\n \n    -------------------------\n@@ -1587,12 +1587,25 @@ package body Ada.Exceptions is\n    ---------------------------------\n \n    procedure Reraise_Occurrence_No_Defer (X : Exception_Occurrence) is\n-      Excep    : constant EOA := Exception_Propagation.Allocate_Occurrence;\n-      Saved_MO : constant System.Address := Excep.Machine_Occurrence;\n    begin\n-      Save_Occurrence (Excep.all, X);\n-      Excep.Machine_Occurrence := Saved_MO;\n-      Complete_And_Propagate_Occurrence (Excep);\n+      --  If we have a Machine_Occurrence at hand already, e.g. when we are\n+      --  reraising a foreign exception, just repropagate. Otherwise, e.g.\n+      --  when reraising a GNAT exception or an occurrence read back from a\n+      --  stream, set up a new occurrence with its own Machine block first.\n+\n+      if X.Machine_Occurrence /= System.Null_Address then\n+         Exception_Propagation.Propagate_Exception (X);\n+      else\n+         declare\n+            Excep : constant EOA\n+              := Exception_Propagation.Allocate_Occurrence;\n+            Saved_MO : constant System.Address := Excep.Machine_Occurrence;\n+         begin\n+            Save_Occurrence (Excep.all, X);\n+            Excep.Machine_Occurrence := Saved_MO;\n+            Complete_And_Propagate_Occurrence (Excep);\n+         end;\n+      end if;\n    end Reraise_Occurrence_No_Defer;\n \n    ---------------------"}, {"sha": "2fe003ef0119a9af0fd6672382f8395aa4e78f57", "filename": "gcc/ada/libgnat/a-exexpr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6904af09df7f0318e2da64e68944cca1c8e454e/gcc%2Fada%2Flibgnat%2Fa-exexpr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6904af09df7f0318e2da64e68944cca1c8e454e/gcc%2Fada%2Flibgnat%2Fa-exexpr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-exexpr.adb?ref=f6904af09df7f0318e2da64e68944cca1c8e454e", "patch": "@@ -349,7 +349,7 @@ package body Exception_Propagation is\n    -- Propagate_Exception --\n    -------------------------\n \n-   procedure Propagate_Exception (Excep : EOA) is\n+   procedure Propagate_Exception (Excep : Exception_Occurrence) is\n    begin\n       Propagate_GCC_Exception (To_GCC_Exception (Excep.Machine_Occurrence));\n    end Propagate_Exception;"}, {"sha": "166cbb19f7fcef63825c8c391b3e17669650057e", "filename": "gcc/ada/libgnat/a-exstat.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6904af09df7f0318e2da64e68944cca1c8e454e/gcc%2Fada%2Flibgnat%2Fa-exstat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6904af09df7f0318e2da64e68944cca1c8e454e/gcc%2Fada%2Flibgnat%2Fa-exstat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-exstat.adb?ref=f6904af09df7f0318e2da64e68944cca1c8e454e", "patch": "@@ -256,6 +256,11 @@ package body Stream_Attributes is\n          end loop;\n       end if;\n \n+      --  The occurrence we're crafting is not currently being\n+      --  propagated.\n+\n+      X.Machine_Occurrence := System.Null_Address;\n+\n       --  If an exception was converted to a string, it must have\n       --  already been raised, so flag it accordingly and we are done.\n "}]}