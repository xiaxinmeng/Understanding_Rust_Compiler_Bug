{"sha": "61796dc03befa9b7426d5bc7c336cca585944143", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE3OTZkYzAzYmVmYTliNzQyNmQ1YmM3YzMzNmNjYTU4NTk0NDE0Mw==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-06-03T13:35:12Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-05-21T14:08:40Z"}, "message": "Add 'libgomp.oacc-fortran/privatized-ref-2.f90'\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-fortran/privatized-ref-2.f90: New.", "tree": {"sha": "e5e015c6e1ea00387bd8368062512eb2b78f73bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5e015c6e1ea00387bd8368062512eb2b78f73bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61796dc03befa9b7426d5bc7c336cca585944143", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61796dc03befa9b7426d5bc7c336cca585944143", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61796dc03befa9b7426d5bc7c336cca585944143", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61796dc03befa9b7426d5bc7c336cca585944143/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "079c23cfe079f203d5df83fea8e92a60c7d7e878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/079c23cfe079f203d5df83fea8e92a60c7d7e878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/079c23cfe079f203d5df83fea8e92a60c7d7e878"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "6c3e1dcc211e09d174e2f0acb081072549f929e9", "filename": "libgomp/testsuite/libgomp.oacc-fortran/privatized-ref-2.f90", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61796dc03befa9b7426d5bc7c336cca585944143/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61796dc03befa9b7426d5bc7c336cca585944143/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-2.f90?ref=61796dc03befa9b7426d5bc7c336cca585944143", "patch": "@@ -0,0 +1,101 @@\n+! { dg-do run { target { ! openacc_nvidia_accel_selected } } }\n+\n+program main\n+  implicit none (type, external)\n+  integer :: j\n+  integer, allocatable :: A(:)\n+  character(len=:), allocatable :: my_str\n+  character(len=15), allocatable :: my_str15\n+\n+  A = [(3*j, j=1, 10)]\n+  call foo (A, size(A))\n+  call bar (A)\n+  my_str = \"1234567890\"\n+  call foo_str(my_str)\n+  call bar_str(my_str)\n+  my_str15 = \"123456789012345\"\n+  call foobar (my_str15)\n+  deallocate (A, my_str, my_str15)\n+contains\n+  subroutine foo (array, nn)\n+    integer :: i, nn\n+    integer :: array(nn)\n+\n+    !$acc parallel copyout(array)\n+    array = [(-i, i = 1, nn)]\n+    !$acc loop gang private(array)\n+    do i = 1, 10\n+      array(i) = i\n+    end do\n+    if (any (array /= [(-i, i = 1, nn)])) error stop 1\n+    !$acc end parallel\n+  end subroutine foo\n+  subroutine bar (array)\n+    integer :: i\n+    integer :: array(:)\n+\n+    !$acc parallel copyout(array)\n+    array = [(-2*i, i = 1, size(array))]\n+    !$acc loop gang private(array)\n+    do i = 1, 10\n+      array(i) = 9*i\n+    end do\n+    if (any (array /= [(-2*i, i = 1, 10)])) error stop 2\n+    !$acc end parallel\n+  end subroutine bar\n+  subroutine foo_str(str)\n+    integer :: i\n+    character(len=*) :: str\n+\n+    !$acc parallel copyout(str)\n+    str = \"abcdefghij\"\n+    !$acc loop gang private(str)\n+    do i = 1, 10\n+      str(i:i) = achar(ichar('A') + i)\n+    end do\n+    if (str /= \"abcdefghij\") error stop 3\n+    !$acc end parallel\n+  end\n+  subroutine bar_str(str)\n+    integer :: i\n+    character(len=:), allocatable :: str\n+\n+! ***************************************\n+! FIXME: Fails due to PR middle-end/95499\n+! ***************************************\n+    !!$acc parallel copyout(str)\n+    str = \"abcdefghij\"\n+    !!$acc loop gang private(str)\n+    !do i = 1, 10\n+    !  str(i:i) = achar(ichar('A') + i)\n+    !end do\n+    if (str /= \"abcdefghij\") error stop 5\n+    !!$acc end parallel\n+  end\n+  subroutine foobar (scalar)\n+    integer :: i\n+    character(len=15), optional :: scalar\n+\n+    !$acc parallel copyout(scalar)\n+    scalar = \"abcdefghi-12345\"\n+    !$acc loop gang private(scalar)\n+    do i = 1, 15\n+      scalar(i:i) = achar(ichar('A') + i)\n+    end do\n+    !$acc end parallel\n+    if (scalar /= \"abcdefghi-12345\") error stop 6\n+  end subroutine foobar\n+  subroutine foobar15 (scalar)\n+    integer :: i\n+    character(len=15), optional, allocatable :: scalar\n+\n+    !$acc parallel copyout(scalar)\n+    scalar = \"abcdefghi-12345\"\n+    !$acc loop gang private(scalar)\n+    do i = 1, 15\n+      scalar(i:i) = achar(ichar('A') + i)\n+    end do\n+    !$acc end parallel\n+    if (scalar /= \"abcdefghi-12345\") error stop 1\n+  end subroutine foobar15\n+end"}]}