{"sha": "df05a794c1a6b9c0311513c4b1a8f44eeafdf866", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYwNWE3OTRjMWE2YjljMDMxMTUxM2M0YjFhOGY0NGVlYWZkZjg2Ng==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-07-15T16:02:07Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-07-15T16:02:07Z"}, "message": "name-lookup.c (set_inherited_value_binding_p): Add class_type parameter.\n\n\t* name-lookup.c (set_inherited_value_binding_p): Add class_type\n\tparameter.\n\t(get_class_binding): Adjust.\n\t(push_class_level_binding): Don't use set_inherited_value_binding_p.\n\nFrom-SVN: r84757", "tree": {"sha": "54b3c7cb306c30fc8f8fa73afe07a46901451660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54b3c7cb306c30fc8f8fa73afe07a46901451660"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df05a794c1a6b9c0311513c4b1a8f44eeafdf866", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df05a794c1a6b9c0311513c4b1a8f44eeafdf866", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df05a794c1a6b9c0311513c4b1a8f44eeafdf866", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df05a794c1a6b9c0311513c4b1a8f44eeafdf866/comments", "author": null, "committer": null, "parents": [{"sha": "132c7dd3d966066e2c031b7ed31690b5ec933705", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/132c7dd3d966066e2c031b7ed31690b5ec933705", "html_url": "https://github.com/Rust-GCC/gccrs/commit/132c7dd3d966066e2c031b7ed31690b5ec933705"}], "stats": {"total": 32, "additions": 14, "deletions": 18}, "files": [{"sha": "e5c87a61800aaa39364d01f4f3f2ed1305c7717a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df05a794c1a6b9c0311513c4b1a8f44eeafdf866/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df05a794c1a6b9c0311513c4b1a8f44eeafdf866/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=df05a794c1a6b9c0311513c4b1a8f44eeafdf866", "patch": "@@ -1,3 +1,10 @@\n+2004-07-15  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* name-lookup.c (set_inherited_value_binding_p): Add class_type \n+\tparameter.\n+\t(get_class_binding): Adjust.\n+\t(push_class_level_binding): Don't use set_inherited_value_binding_p.\n+\n 2004-07-15  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* class.c(finish_struct_bits): Don't set TYPE_HAS_CONVERSION here.\n@@ -11,9 +18,6 @@\n 2004-07-14  Mark Mitchell  <mark@codesourcery.com>\n \n \t* lex.c (cxx_make_type): Remove call to get_pointer_type.\n-\t(set_inherited_value_binding_p): Add class_type parameter.\n-\t(get_class_binding): Adjust.\n-\t(push_class_level_binding): Don't use set_inherited_value_binding_p.\n \n \t* cp-tree.h (IDENTIFIER_VALUE): Remove.\n \t(BINFO_PUSHDECLS_MARKED): Likewise."}, {"sha": "fd3776faf512cb64cbc76f6840b9f06fe7ee39b5", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df05a794c1a6b9c0311513c4b1a8f44eeafdf866/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df05a794c1a6b9c0311513c4b1a8f44eeafdf866/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=df05a794c1a6b9c0311513c4b1a8f44eeafdf866", "patch": "@@ -2640,10 +2640,11 @@ poplevel_class (void)\n \n /* Set INHERITED_VALUE_BINDING_P on BINDING to true or false, as\n    appropriate.  DECL is the value to which a name has just been\n-   bound.  */\n+   bound.  CLASS_TYPE is the class in which the lookup occurred.  */\n \n static void\n-set_inherited_value_binding_p (cxx_binding *binding, tree decl)\n+set_inherited_value_binding_p (cxx_binding *binding, tree decl,\n+\t\t\t       tree class_type)\n {\n   if (binding->value == decl && TREE_CODE (decl) != TREE_LIST)\n     {\n@@ -2657,7 +2658,7 @@ set_inherited_value_binding_p (cxx_binding *binding, tree decl)\n \t  context = context_for_name_lookup (decl);\n \t}\n \n-      if (is_properly_derived_from (current_class_type, context))\n+      if (is_properly_derived_from (class_type, context))\n \tINHERITED_VALUE_BINDING_P (binding) = 1;\n       else\n \tINHERITED_VALUE_BINDING_P (binding) = 0;\n@@ -2766,7 +2767,7 @@ get_class_binding (tree name, cxx_scope *scope)\n \t\t\t\t   scope);\n       /* This is a class-scope binding, not a block-scope binding.  */\n       LOCAL_BINDING_P (binding) = 0;\n-      set_inherited_value_binding_p (binding, value_binding);\n+      set_inherited_value_binding_p (binding, value_binding, class_type);\n     }\n   else\n     binding = NULL;\n@@ -2888,13 +2889,8 @@ push_class_level_binding (tree name, tree x)\n \t{\n \t  binding->value = x;\n \t  /* It is always safe to clear INHERITED_VALUE_BINDING_P\n-\t     here.  That flag is only set when setup_class_bindings\n-\t     inserts a binding from a base class, and\n-\t     setup_class_bindings only inserts a binding once for\n-\t     every name declared in the class and its base classes.\n-\t     So, if we see a second binding for this name, it must be\n-\t     coming from a definition in the body of the class\n-\t     itself.  */\n+\t     here.  This function is only used to register bindings\n+\t     from with the class definition itself.  */\n \t  INHERITED_VALUE_BINDING_P (binding) = 0;\n \t  POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, true);\n \t}\n@@ -2918,10 +2914,6 @@ push_class_level_binding (tree name, tree x)\n       ok = true;\n     }\n \n-  /* Determine whether or not this binding is from a base class.  */\n-  binding = IDENTIFIER_BINDING (name);\n-  set_inherited_value_binding_p (binding, decl);\n-\n   POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, ok);\n }\n "}]}