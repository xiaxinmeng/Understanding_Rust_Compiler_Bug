{"sha": "44b1b7980867ce014c67f71908e0d0e222530cef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRiMWI3OTgwODY3Y2UwMTRjNjdmNzE5MDhlMGQwZTIyMjUzMGNlZg==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2017-08-23T14:06:55Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2017-08-23T14:06:55Z"}, "message": "fold-vec-perm-char.c: New.\n\n[gcc/testsuite]\n\n2017-08-23  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* gcc.target/powerpc/fold-vec-perm-char.c: New.\n\t* gcc.target/powerpc/fold-vec-perm-double.c: New.\n\t* gcc.target/powerpc/fold-vec-perm-float.c: New.\n\t* gcc.target/powerpc/fold-vec-perm-int.c: New.\n\t* gcc.target/powerpc/fold-vec-perm-longlong.c: New.\n\t* gcc.target/powerpc/fold-vec-perm-pixel.c: New.\n\t* gcc.target/powerpc/fold-vec-perm-short.c: New.\n\nFrom-SVN: r251310", "tree": {"sha": "26b1faea0f4c3b727aacb9c29870ac5877281fb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26b1faea0f4c3b727aacb9c29870ac5877281fb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44b1b7980867ce014c67f71908e0d0e222530cef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44b1b7980867ce014c67f71908e0d0e222530cef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44b1b7980867ce014c67f71908e0d0e222530cef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44b1b7980867ce014c67f71908e0d0e222530cef/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a1e5642531df04bf3f747b6ef8d54258585cbec7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1e5642531df04bf3f747b6ef8d54258585cbec7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1e5642531df04bf3f747b6ef8d54258585cbec7"}], "stats": {"total": 182, "additions": 182, "deletions": 0}, "files": [{"sha": "940155ad01fe57acc47bf85e170f19f4d2da4d09", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44b1b7980867ce014c67f71908e0d0e222530cef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44b1b7980867ce014c67f71908e0d0e222530cef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=44b1b7980867ce014c67f71908e0d0e222530cef", "patch": "@@ -1,3 +1,13 @@\n+2017-08-23  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/fold-vec-perm-char.c: New.\n+\t* gcc.target/powerpc/fold-vec-perm-double.c: New.\n+\t* gcc.target/powerpc/fold-vec-perm-float.c: New.\n+\t* gcc.target/powerpc/fold-vec-perm-int.c: New.\n+\t* gcc.target/powerpc/fold-vec-perm-longlong.c: New.\n+\t* gcc.target/powerpc/fold-vec-perm-pixel.c: New.\n+\t* gcc.target/powerpc/fold-vec-perm-short.c: New.\n+\n 2017-08-23  Richard Biener  <rguenther@suse.de>\n \n \t* g++.dg/cpp1y/constexpr-instantiate.C: Adjust."}, {"sha": "d907eaedf3d183fa4823aedbee59946d73a3fdbb", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-perm-char.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44b1b7980867ce014c67f71908e0d0e222530cef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-perm-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44b1b7980867ce014c67f71908e0d0e222530cef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-perm-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-perm-char.c?ref=44b1b7980867ce014c67f71908e0d0e222530cef", "patch": "@@ -0,0 +1,31 @@\n+/* Verify that overloaded built-ins for vec_perm with char\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool char\n+testbc (vector bool char vbc2, vector bool char vbc3,\n+\tvector unsigned char vuc)\n+{\n+  return vec_perm (vbc2, vbc3, vuc);\n+}\n+\n+vector signed char\n+testsc (vector signed char vsc2, vector signed char vsc3,\n+\tvector unsigned char vuc)\n+{\n+  return vec_perm (vsc2, vsc3, vuc);\n+}\n+\n+vector unsigned char\n+testuc (vector unsigned char vuc2, vector unsigned char vuc3,\n+\tvector unsigned char vuc)\n+{\n+  return vec_perm (vuc2, vuc3, vuc);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vperm\" 3 } } */"}, {"sha": "7ceca9ec26baf9b68e62cc876f6f29298135124c", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-perm-double.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44b1b7980867ce014c67f71908e0d0e222530cef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-perm-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44b1b7980867ce014c67f71908e0d0e222530cef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-perm-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-perm-double.c?ref=44b1b7980867ce014c67f71908e0d0e222530cef", "patch": "@@ -0,0 +1,17 @@\n+/* Verify that overloaded built-ins for vec_perm with double\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+// vector double needs -mvsx.\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector double\n+testd (vector double vd2, vector double vd3, vector unsigned char vuc)\n+{\n+  return vec_perm (vd2, vd3, vuc);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vperm\" 1 } } */"}, {"sha": "c9cfb0ded9d5cdeb6efab5af97073033dc754a29", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-perm-float.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44b1b7980867ce014c67f71908e0d0e222530cef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-perm-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44b1b7980867ce014c67f71908e0d0e222530cef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-perm-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-perm-float.c?ref=44b1b7980867ce014c67f71908e0d0e222530cef", "patch": "@@ -0,0 +1,16 @@\n+/* Verify that overloaded built-ins for vec_perm with float\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector float\n+testf (vector float vf2, vector float vf3, vector unsigned char vuc)\n+{\n+  return vec_perm (vf2, vf3, vuc);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vperm\" 1 } } */"}, {"sha": "a2fdc26e5e3d4bca06ec5583853d95f5b71817fd", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-perm-int.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44b1b7980867ce014c67f71908e0d0e222530cef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-perm-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44b1b7980867ce014c67f71908e0d0e222530cef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-perm-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-perm-int.c?ref=44b1b7980867ce014c67f71908e0d0e222530cef", "patch": "@@ -0,0 +1,31 @@\n+/* Verify that overloaded built-ins for vec_perm with int\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool int\n+testbi (vector bool int vbi2, vector bool int vbi3,\n+\tvector unsigned char vuc)\n+{\n+  return vec_perm (vbi2, vbi3, vuc);\n+}\n+\n+vector signed int\n+testsi (vector signed int vsi2, vector signed int vsi3,\n+\tvector unsigned char vuc)\n+{\n+  return vec_perm (vsi2, vsi3, vuc);\n+}\n+\n+vector unsigned int\n+testui (vector unsigned int vui2, vector unsigned int vui3,\n+\tvector unsigned char vuc)\n+{\n+  return vec_perm (vui2, vui3, vuc);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vperm\" 3 } } */"}, {"sha": "7f3e57447f9a8aac2b64558d4bb03a80be8576f1", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-perm-longlong.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44b1b7980867ce014c67f71908e0d0e222530cef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-perm-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44b1b7980867ce014c67f71908e0d0e222530cef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-perm-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-perm-longlong.c?ref=44b1b7980867ce014c67f71908e0d0e222530cef", "patch": "@@ -0,0 +1,32 @@\n+/* Verify that overloaded built-ins for vec_perm with long long\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile {target lp64} } */\n+// 'long long' in Altivec types is invalid without -mvsx.\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool long long\n+testbl (vector bool long long vbl2, vector bool long long vbl3,\n+\tvector unsigned char vuc)\n+{\n+  return vec_perm (vbl2, vbl3, vuc);\n+}\n+\n+vector signed long long\n+testsl (vector signed long vsl2, vector signed long vsl3,\n+\tvector unsigned char vuc)\n+{\n+  return vec_perm (vsl2, vsl3, vuc);\n+}\n+\n+vector unsigned long long\n+testul (vector unsigned long long vul2, vector unsigned long long vul3,\n+\tvector unsigned char vuc)\n+{\n+  return vec_perm (vul2, vul3, vuc);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vperm\" 3 } } */"}, {"sha": "0d3cb0aa1238a8c035ea61bd36e4855fefbc42a3", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-perm-pixel.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44b1b7980867ce014c67f71908e0d0e222530cef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-perm-pixel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44b1b7980867ce014c67f71908e0d0e222530cef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-perm-pixel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-perm-pixel.c?ref=44b1b7980867ce014c67f71908e0d0e222530cef", "patch": "@@ -0,0 +1,16 @@\n+/* Verify that overloaded built-ins for vec_perm with pixel\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector pixel\n+testpx (vector pixel px2, vector pixel px3, vector unsigned char vuc)\n+{\n+  return vec_perm (px2, px3, vuc);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vperm\" 1 } } */"}, {"sha": "de5303a8b4db54ba3be34dd674507ae99dc522ea", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-perm-short.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44b1b7980867ce014c67f71908e0d0e222530cef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-perm-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44b1b7980867ce014c67f71908e0d0e222530cef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-perm-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-perm-short.c?ref=44b1b7980867ce014c67f71908e0d0e222530cef", "patch": "@@ -0,0 +1,29 @@\n+/* Verify that overloaded built-ins for vec_perm with short\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool short\n+testbs (vector bool short vbs2, vector bool short vbs3,\n+\tvector unsigned char vuc)\n+{\n+  return vec_perm (vbs2, vbs3, vuc);\n+}\n+\n+vector signed short\n+testss (vector signed short vss2, vector signed short vss3, vector unsigned char vuc)\n+{\n+  return vec_perm (vss2, vss3, vuc);\n+}\n+\n+vector unsigned short\n+testus (vector unsigned short vus2, vector unsigned short vus3, vector unsigned char vuc)\n+{\n+  return vec_perm (vus2, vus3, vuc);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vperm\" 3 } } */"}]}