{"sha": "d31db22f5b4a269286dec288544fb805094152ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMxZGIyMmY1YjRhMjY5Mjg2ZGVjMjg4NTQ0ZmI4MDUwOTQxNTJlZQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "pop@cri.ensmp.fr", "date": "2006-03-29T17:20:24Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2006-03-29T17:20:24Z"}, "message": "re PR tree-optimization/26859 (ICE Segmentation Fault)\n\n\tPR tree-optimization/26859\n\t* tree-ssa-loop-niter.c (infer_loop_bounds_from_undefined): Avoid\n\tdivision by zero.\n\t(convert_step): Remove TREE_OVERFLOW and TREE_CONSTANT_OVERFLOW flags\n\tfor the step after fold_convert.\n\nFrom-SVN: r112502", "tree": {"sha": "f95f0379758e57b77344bcc50747b34e607c07ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f95f0379758e57b77344bcc50747b34e607c07ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d31db22f5b4a269286dec288544fb805094152ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d31db22f5b4a269286dec288544fb805094152ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d31db22f5b4a269286dec288544fb805094152ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d31db22f5b4a269286dec288544fb805094152ee/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67f074899d00a173c0efbca542cc8defb76ce790", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67f074899d00a173c0efbca542cc8defb76ce790", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67f074899d00a173c0efbca542cc8defb76ce790"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "274c94d059b0b66d9bf162958fa6acb1a0bf426e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d31db22f5b4a269286dec288544fb805094152ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d31db22f5b4a269286dec288544fb805094152ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d31db22f5b4a269286dec288544fb805094152ee", "patch": "@@ -1,3 +1,11 @@\n+2006-03-29  Sebastian Pop  <pop@cri.ensmp.fr>\n+\n+\tPR tree-optimization/26859\n+\t* tree-ssa-loop-niter.c (infer_loop_bounds_from_undefined): Avoid\n+\tdivision by zero.\n+\t(convert_step): Remove TREE_OVERFLOW and TREE_CONSTANT_OVERFLOW flags\n+\tfor the step after fold_convert.\n+\n 2006-03-29  Paul Brook  <paul@codesourcery.com>\n \n \t* reload1.c (choose_reload_regs): Check for all RTX_AUTOINC operators."}, {"sha": "364c61041fc54396c2212047535db543b040aa35", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d31db22f5b4a269286dec288544fb805094152ee/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d31db22f5b4a269286dec288544fb805094152ee/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=d31db22f5b4a269286dec288544fb805094152ee", "patch": "@@ -1582,9 +1582,13 @@ infer_loop_bounds_from_undefined (struct loop *loop)\n \t\t      diff = fold_build2 (MINUS_EXPR, utype,\n \t\t\t\t\t  TYPE_MAX_VALUE (type), init);\n \n-\t\t    estimation = fold_build2 (CEIL_DIV_EXPR, utype, diff,\n-\t\t\t\t\t      step);\n-\t\t    record_estimate (loop, estimation, boolean_true_node, stmt);\n+\t\t    if (!integer_zerop (step))\n+\t\t      {\n+\t\t\testimation = fold_build2 (CEIL_DIV_EXPR, utype, diff,\n+\t\t\t\t\t\t  step);\n+\t\t\trecord_estimate (loop, estimation, boolean_true_node,\n+\t\t\t\t\t stmt);\n+\t\t      }\n \t\t  }\n \n \t\tbreak;\n@@ -2090,7 +2094,7 @@ tree\n convert_step (struct loop *loop, tree new_type, tree base, tree step,\n \t      tree at_stmt)\n {\n-  tree base_type;\n+  tree res, base_type;\n \n   if (chrec_contains_undetermined (base)\n       || chrec_contains_undetermined (step))\n@@ -2100,12 +2104,22 @@ convert_step (struct loop *loop, tree new_type, tree base, tree step,\n \n   /* When not using wrapping arithmetic, signed types don't wrap.  */\n   if (!flag_wrapv && !TYPE_UNSIGNED (base_type))\n-    return fold_convert (new_type, step);\n+    goto do_convert_step;\n \n   if (TYPE_PRECISION (new_type) > TYPE_PRECISION (base_type))\n     return convert_step_widening (loop, new_type, base, step, at_stmt);\n \n-  return fold_convert (new_type, step);\n+ do_convert_step:\n+  \n+  res = fold_convert (new_type, step);\n+\n+  if (TREE_CODE (res) == INTEGER_CST)\n+    {\n+      TREE_OVERFLOW (res) = 0;\n+      TREE_CONSTANT_OVERFLOW (res) = 0;\n+    }\n+\n+  return res;\n }\n \n /* Frees the information on upper bounds on numbers of iterations of LOOP.  */"}]}