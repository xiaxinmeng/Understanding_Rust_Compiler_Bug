{"sha": "e8645a4001a8d117dd336ea75942aac49101af49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg2NDVhNDAwMWE4ZDExN2RkMzM2ZWE3NTk0MmFhYzQ5MTAxYWY0OQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2008-03-06T17:14:05Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2008-03-06T17:14:05Z"}, "message": "MAINTAINERS: Update for treelang deletion.\n\n.\t* MAINTAINERS: Update for treelang deletion.\ngcc\n2008-03-05  Tom Tromey  <tromey@redhat.com>\n\n\t* treelang: Delete.\n\t* doc/standards.texi (Standards): Don't mention treelang.\n\t* doc/invoke.texi (Overall Options): Don't mention treelang.\n\t* doc/install.texi (Prerequisites): Don't mention bison or\n\ttreelang.\n\t(Configuration): Don't mention treelang.\n\t(Building): Likewise.\n\t* doc/frontends.texi (G++ and GCC): Don't mention treelang.\ngcc/testsuite\n\t* lib/treelang-dg.exp, lib/treelang.exp: Delete.\n\t* treelang: Delete.\ngcc/testsuite/treelang\nRemoved\ngcc/treelang\nRemoved\n\nFrom-SVN: r132976", "tree": {"sha": "cdfa97fee8a49fae14f14af049306d86c88cd3b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdfa97fee8a49fae14f14af049306d86c88cd3b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8645a4001a8d117dd336ea75942aac49101af49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8645a4001a8d117dd336ea75942aac49101af49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8645a4001a8d117dd336ea75942aac49101af49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8645a4001a8d117dd336ea75942aac49101af49/comments", "author": null, "committer": null, "parents": [{"sha": "3825be8c96775cf8e6fcb5eef04455f07717a5ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3825be8c96775cf8e6fcb5eef04455f07717a5ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3825be8c96775cf8e6fcb5eef04455f07717a5ea"}], "stats": {"total": 7215, "additions": 32, "deletions": 7183}, "files": [{"sha": "23ac865f5547a3e607ff4d340b99a247a1bcccc7", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8645a4001a8d117dd336ea75942aac49101af49/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8645a4001a8d117dd336ea75942aac49101af49/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=e8645a4001a8d117dd336ea75942aac49101af49", "patch": "@@ -1,3 +1,7 @@\n+2008-03-06  Tom Tromey  <tromey@redhat.com>\n+\n+\t* MAINTAINERS: Update for treelang deletion.\n+\n 2008-03-03  James E. Wilson  <wilson@tuliptree.org>\n \n \t* MAINTAINERS: Update my email address."}, {"sha": "d55eaddf3bdc3f76945f8eb9f5ded744a7b4c698", "filename": "MAINTAINERS", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8645a4001a8d117dd336ea75942aac49101af49/MAINTAINERS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8645a4001a8d117dd336ea75942aac49101af49/MAINTAINERS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/MAINTAINERS?ref=e8645a4001a8d117dd336ea75942aac49101af49", "patch": "@@ -130,8 +130,6 @@ java\t\t\tAndrew Haley\t\taph@redhat.com\n java\t\t\tTom Tromey\t\ttromey@redhat.com\n objective-c/c++\t\tMike Stump\t\tmrs@apple.com\n objective-c/c++\t\tStan Shebs\t\tstanshebs@earthlink.net\n-treelang                Tim Josling             tej@melbpc.org.au\n-treelang                James A. Morrison\tphython@gcc.gnu.org\n \n \t\t\tVarious Maintainers\n \n@@ -338,6 +336,7 @@ Andreas Jaeger\t\t\t\t\taj@suse.de\n Harsha Jagasia\t\t\t\t\tharsha.jagasia@amd.com\n Fariborz Jahanian\t\t\t\tfjahanian@apple.com\n Phillip Jordan\t\t\t\t\tphillip.m.jordan@gmail.com\n+Tim Josling\t\t\t\t\ttej@melbpc.org.au\n Klaus Kaempf\t\t\t\t\tkkaempf@progis.de\n Victor Kaplansky\t\t\t\tvictork@il.ibm.com\n Brendan Kehoe\t\t\t\t\tbrendan@zen.org\n@@ -385,6 +384,7 @@ Lee Millward\t\t\t\t\tlee.millward@gmail.com\n Alan Modra\t\t\t\t\tamodra@bigpond.net.au\n Alexander Monakov\t\t\t\tamonakov@ispras.ru\n Catherine Moore\t\t\t\t\tclm@redhat.com\n+James A. Morrison\t\t\t\tphython@gcc.gnu.org\n Dirk Mueller\t\t\t\t\tdmueller@suse.de\n Adam Nemet\t\t\t\t\tanemet@caviumnetworks.com\n Thomas Neumann\t\t\t\t\ttneumann@users.sourceforge.net"}, {"sha": "e39eae75b768e7a08bf4bf43bbc0a48e5a160d6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8645a4001a8d117dd336ea75942aac49101af49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8645a4001a8d117dd336ea75942aac49101af49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e8645a4001a8d117dd336ea75942aac49101af49", "patch": "@@ -1,3 +1,14 @@\n+2008-03-06  Tom Tromey  <tromey@redhat.com>\n+\n+\t* treelang: Delete.\n+\t* doc/standards.texi (Standards): Don't mention treelang.\n+\t* doc/invoke.texi (Overall Options): Don't mention treelang.\n+\t* doc/install.texi (Prerequisites): Don't mention bison or\n+\ttreelang.\n+\t(Configuration): Don't mention treelang.\n+\t(Building): Likewise.\n+\t* doc/frontends.texi (G++ and GCC): Don't mention treelang.\n+\n 2008-03-06  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* simplify-rtx.c (simplify_subreg): Remove useless shifts from"}, {"sha": "9c2d70705e4dbfd8ba8ab6edbc6046a9567137a9", "filename": "gcc/doc/frontends.texi", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8645a4001a8d117dd336ea75942aac49101af49/gcc%2Fdoc%2Ffrontends.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8645a4001a8d117dd336ea75942aac49101af49/gcc%2Fdoc%2Ffrontends.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ffrontends.texi?ref=e8645a4001a8d117dd336ea75942aac49101af49", "patch": "@@ -1,5 +1,5 @@\n @c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-@c 1999, 2000, 2001, 2002, 2004 Free Software Foundation, Inc.\n+@c 1999, 2000, 2001, 2002, 2004, 2008 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -14,7 +14,6 @@\n @cindex Java\n @cindex Objective-C\n @cindex Objective-C++\n-@cindex treelang\n GCC stands for ``GNU Compiler Collection''.  GCC is an integrated\n distribution of compilers for several major programming languages.  These\n languages currently include C, C++, Objective-C, Objective-C++, Java,"}, {"sha": "3bf2305c8d14181bfb61d112ab3e1c0c2f605322", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8645a4001a8d117dd336ea75942aac49101af49/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8645a4001a8d117dd336ea75942aac49101af49/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=e8645a4001a8d117dd336ea75942aac49101af49", "patch": "@@ -372,16 +372,6 @@ Necessary to run @samp{make check} for @file{fixinc}.\n Necessary to regenerate the top level @file{Makefile.in} file from\n @file{Makefile.tpl} and @file{Makefile.def}.\n \n-@item GNU Bison version 1.28 (or later)\n-\n-Necessary when modifying @file{*.y} files.  Necessary to build the\n-@code{treelang} front end (which is not enabled by default) from a\n-checkout of the SVN repository; the generated files are not in the\n-repository.  They are included in releases.\n-\n-Berkeley @command{yacc} (@command{byacc}) has been reported to work\n-as well.\n-\n @item Flex version 2.5.4 (or later)\n \n Necessary when modifying @file{*.l} files.\n@@ -1161,11 +1151,11 @@ grep language= */config-lang.in\n @end smallexample\n Currently, you can use any of the following:\n @code{all}, @code{ada}, @code{c}, @code{c++}, @code{fortran}, @code{java},\n-@code{objc}, @code{obj-c++}, @code{treelang}.\n+@code{objc}, @code{obj-c++}.\n Building the Ada compiler has special requirements, see below.\n If you do not pass this flag, or specify the option @code{all}, then all\n default languages available in the @file{gcc} sub-tree will be configured.\n-Ada, Objective-C++, and treelang are not default languages; the rest are.\n+Ada and Objective-C++ are not default languages; the rest are.\n Re-defining @code{LANGUAGES} when calling @samp{make} @strong{does not}\n work anymore, as those language sub-directories might not have been\n configured!\n@@ -1707,18 +1697,13 @@ that type mismatches occur, this could be the cause.\n \n The solution is not to use such a directory for building GCC@.\n \n-When building from SVN or snapshots and enabling the @code{treelang}\n-front end, or if you modify @file{*.y} files, you need the Bison parser\n-generator installed.  If you do not modify @file{*.y} files, releases\n-contain the Bison-generated files and you do not need Bison installed\n-to build them.  Note that most front ends now use hand-written parsers,\n-which can be modified with no need for Bison.\n-\n Similarly, when building from SVN or snapshots, or if you modify\n-@file{*.l} files, you need the Flex lexical analyzer generator installed.\n-There is still one Flex-based lexical analyzer (part of the build\n-machinery, not of GCC itself) that is used even if you only build the\n-C front end.\n+@file{*.l} files, you need the Flex lexical analyzer generator\n+installed.  If you do not modify @file{*.l} files, releases contain\n+the Flex-generated files and you do not need Flex installed to build\n+them.  There is still one Flex-based lexical analyzer (part of the\n+build machinery, not of GCC itself) that is used even if you only\n+build the C front end.\n \n When building from SVN or snapshots, or if you modify Texinfo\n documentation, you need version 4.4 or later of Texinfo installed if you"}, {"sha": "411678c7afad80a82a6b8b404087921a9473e44a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8645a4001a8d117dd336ea75942aac49101af49/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8645a4001a8d117dd336ea75942aac49101af49/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e8645a4001a8d117dd336ea75942aac49101af49", "patch": "@@ -1001,7 +1001,6 @@ assembler  assembler-with-cpp\n ada\n f95  f95-cpp-input\n java\n-treelang\n @end smallexample\n \n @item -x none"}, {"sha": "c31849c239fa7cc05c7b19d8a62691abd1616385", "filename": "gcc/doc/standards.texi", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8645a4001a8d117dd336ea75942aac49101af49/gcc%2Fdoc%2Fstandards.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8645a4001a8d117dd336ea75942aac49101af49/gcc%2Fdoc%2Fstandards.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fstandards.texi?ref=e8645a4001a8d117dd336ea75942aac49101af49", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (C) 2000, 2001, 2002, 2004, 2006, 2007 Free Software Foundation,\n+@c Copyright (C) 2000, 2001, 2002, 2004, 2006, 2007, 2008 Free Software Foundation,\n @c Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n@@ -219,14 +219,6 @@ and\n have additional useful information.\n @end itemize\n \n-@section Treelang language\n-@cindex treelang\n-There is no standard for treelang, which is a sample language front end\n-for GCC@.  Its only purpose is as a sample for people wishing to write a\n-new language for GCC@.  The language is documented in\n-@file{gcc/treelang/treelang.texi} which can be turned into info or\n-HTML format.\n-\n @xref{Top, GNAT Reference Manual, About This Guide, gnat_rm,\n GNAT Reference Manual}, for information on standard\n conformance and compatibility of the Ada compiler."}, {"sha": "396fa3e7439d5087276ee476eafb8677ed62706d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8645a4001a8d117dd336ea75942aac49101af49/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8645a4001a8d117dd336ea75942aac49101af49/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e8645a4001a8d117dd336ea75942aac49101af49", "patch": "@@ -1,3 +1,8 @@\n+2008-03-06  Tom Tromey  <tromey@redhat.com>\n+\n+\t* lib/treelang-dg.exp, lib/treelang.exp: Delete.\n+\t* treelang: Delete.\n+\n 2008-03-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/specs/pack33.ads: New test."}, {"sha": "190eaad0a8cdcdd06e7ebdff57099dce8f235e92", "filename": "gcc/testsuite/lib/treelang-dg.exp", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Flib%2Ftreelang-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Flib%2Ftreelang-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftreelang-dg.exp?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,36 +0,0 @@\n-#   Copyright (C) 1997, 1999, 2000, 2001, 2003, 2004, 2007\n-#   Free Software Foundation, Inc.\n-\n-# This program is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3 of the License, or\n-# (at your option) any later version.\n-# \n-# This program is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-# \n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-\n-load_lib gcc-dg.exp\n-\n-# Define gcc callbacks for dg.exp.\n-\n-proc treelang-dg-test { prog do_what extra_tool_flags } {\n-    return [gcc-dg-test-1 treelang_target_compile $prog $do_what $extra_tool_flags]\n-}\n-\n-proc treelang-dg-prune { system text } {\n-    return [gcc-dg-prune $system $text]\n-}\n-\n-# Utility routines.\n-\n-# Modified dg-runtest that can cycle through a list of optimization options\n-# as c-torture does.\n-proc treelang-dg-runtest { testcases default-extra-flags } {\n-    return [gcc-dg-runtest $testcases ${default-extra-flags}]\n-}"}, {"sha": "d97ce153862ee1ef2e001450163b5e4e338f579f", "filename": "gcc/testsuite/lib/treelang.exp", "status": "removed", "additions": 0, "deletions": 269, "changes": 269, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Flib%2Ftreelang.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Flib%2Ftreelang.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftreelang.exp?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,269 +0,0 @@\n-# Copyright (C) 1992, 1993, 1994, 1996, 1997, 2000, 2001, 2002, 2004,\n-# 2007 Free Software Foundation, Inc.\n-\n-# This program is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3 of the License, or\n-# (at your option) any later version.\n-# \n-# This program is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-# \n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-\n-# This file was written by Rob Savoye (rob@cygnus.com)\n-# Currently maintained by James A. Morrison (ja2morri@uwaterloo.ca)\n-\n-# Having this file here magically tells dejagnu that the treelang\n-# directory is worthy of testing\n-\n-# This file is basically gcc.exp with gcc replaced with treelang.\n-\n-# This file is loaded by the tool init file (eg: unix.exp).  It provides\n-# default definitions for treelang_start, etc. and other supporting cast\n-# members.\n-\n-# These globals are used by treelang_start if no compiler arguments are\n-# provided.  They are also used by the various testsuites to define the\n-# environment: where to find stdio.h, libc.a, etc.\n-\n-load_lib libgloss.exp\n-load_lib prune.exp\n-load_lib gcc-defs.exp\n-load_lib target-libpath.exp\n-\n-#\n-# TREELANG_UNDER_TEST is the compiler under test.\n-#\n-\n-#\n-# default_treelang_version -- extract and print the version number of the compiler\n-#\n-\n-proc default_treelang_version { } {\n-    global TREELANG_UNDER_TEST\n-\n-    treelang_init\n-\n-    # ignore any arguments after the command\n-    set compiler [lindex $TREELANG_UNDER_TEST 0]\n-\n-    if ![is_remote host] {\n-\tset compiler_name [which $compiler]\n-    } else {\n-\tset compiler_name $compiler\n-    }\n-\n-    # verify that the compiler exists\n-    if { $compiler_name != 0 } then {\n-\tset tmp [remote_exec host \"$compiler -v\"]\n-\tset status [lindex $tmp 0]\n-\tset output [lindex $tmp 1]\n-\tregexp \" version \\[^\\n\\r\\]*\" $output version\n-\tif { $status == 0 && [info exists version] } then {\n-\t    clone_output \"$compiler_name $version\\n\"\n-\t} else {\n-\t    clone_output \"Couldn't determine version of $compiler_name: $output\\n\"\n-\t}\n-    } else {\n-\t# compiler does not exist (this should have already been detected)\n-\twarning \"$compiler does not exist\"\n-    }\n-}\n-\n-# treelang_init -- called at the start of each .exp script.\n-#\n-# There currently isn't much to do, but always using it allows us to\n-# make some enhancements without having to go back and rewrite the scripts.\n-#\n-\n-set treelang_initialized 0\n-\n-proc treelang_init { args } {\n-    global tmpdir\n-    global libdir\n-    global gluefile wrap_flags\n-    global treelang_initialized\n-    global TREELANG_UNDER_TEST\n-    global TOOL_EXECUTABLE\n-    global treelang_libgcc_s_path\n-\n-\n-    # We set LC_ALL and LANG to C so that we get the same error messages as expected.\n-    setenv LC_ALL C\n-    setenv LANG C\n-\n-\n-    if { $treelang_initialized == 1 } { return; }\n-\n-    if ![info exists TREELANG_UNDER_TEST] then {\n-\tif [info exists TOOL_EXECUTABLE] {\n-\t    set TREELANG_UNDER_TEST $TOOL_EXECUTABLE\n-\t} else {\n-\t    set TREELANG_UNDER_TEST [find_gcc]\n-\t}\n-    }\n-\n-    if ![info exists tmpdir] then {\n-\tset tmpdir /tmp\n-    }\n-\n-    treelang_maybe_build_wrapper \"${tmpdir}/treelang-testglue.o\"\n-\n-    set treelang_libgcc_s_path \\\n-\t[gcc-set-multilib-library-path $TREELANG_UNDER_TEST]\n-}\n-\n-proc treelang_target_compile { source dest type options } {\n-    global rootme\n-    global tmpdir\n-    global gluefile wrap_flags\n-    global srcdir\n-    global TREELANG_UNDER_TEST\n-    global TOOL_OPTIONS\n-    global ld_library_path\n-    global treelang_libgcc_s_path\n-\n-    set ld_library_path \".:${treelang_libgcc_s_path}\"\n-    set_ld_library_path_env_vars\n-\n-    if { [target_info needs_status_wrapper]!=\"\" && [info exists gluefile] } {\n-\tlappend options \"libs=${gluefile}\"\n-\tlappend options \"ldflags=$wrap_flags\"\n-    }\n-\n-    # TOOL_OPTIONS must come first, so that it doesn't override testcase\n-    # specific options.\n-    if [info exists TOOL_OPTIONS] {\n-\tset options [concat \"{additional_flags=$TOOL_OPTIONS}\" $options]\n-    }\n-\n-    # If we have built libtreelang along with the compiler (which usually\n-    # _is not_ the case on Mac OS X systems), point the test harness\n-    # at it (and associated headers).\n-\n-    return [target_compile $source $dest $type $options]\n-}\n-\n-#\n-# treelang_pass -- utility to record a testcase passed\n-#\n-\n-proc treelang_pass { testcase cflags } {\n-    if { \"$cflags\" == \"\" } {\n-\tpass \"$testcase\"\n-    } else {\n-\tpass \"$testcase, $cflags\"\n-    }\n-}\n-\n-#\n-# treelang_fail -- utility to record a testcase failed\n-#\n-\n-proc treelang_fail { testcase cflags } {\n-    if { \"$cflags\" == \"\" } {\n-\tfail \"$testcase\"\n-    } else {\n-\tfail \"$testcase, $cflags\"\n-    }\n-}\n-\n-#\n-# treelang_finish -- called at the end of every .exp script that calls treelang_init\n-#\n-# The purpose of this proc is to hide all quirks of the testing environment\n-# from the testsuites.  It also exists to undo anything that treelang_init did\n-# (that needs undoing).\n-#\n-\n-proc treelang_finish { } {\n-    # The testing harness apparently requires this.\n-    global errorInfo\n-\n-    if [info exists errorInfo] then {\n-\tunset errorInfo\n-    }\n-\n-    # Might as well reset these (keeps our caller from wondering whether\n-    # s/he has to or not).\n-    global prms_id bug_id\n-    set prms_id 0\n-    set bug_id 0\n-}\n-\n-proc treelang_exit { } {\n-    global gluefile\n-\n-    if [info exists gluefile] {\n-\tfile_on_build delete $gluefile\n-\tunset gluefile\n-    }\n-}\n-    \n-# If this is an older version of dejagnu (without runtest_file_p),\n-# provide one and assume the old syntax: foo1.exp bar1.c foo2.exp bar2.c.\n-# This can be deleted after next dejagnu release.\n-\n-if { [info procs runtest_file_p] == \"\" } then {\n-    proc runtest_file_p { runtests testcase } {\n-\tif { $runtests != \"\" && [regexp \"\\[.\\]\\[cC\\]\" $runtests] } then {\n-\t    if { [lsearch $runtests [file tail $testcase]] >= 0 } then {\n-\t\treturn 1\n-\t    } else {\n-\t\treturn 0\n-\t    }\n-\t}\n-\treturn 1\n-    }\n-}\n-\n-# Provide a definition of this if missing (delete after next dejagnu release).\n-\n-if { [info procs prune_warnings] == \"\" } then {\n-    proc prune_warnings { text } {\n-\treturn $text\n-    }\n-}\n-\n-# Utility used by mike-gcc.exp and c-torture.exp.\n-# Check the compiler(/assembler/linker) output for text indicating that\n-# the testcase should be marked as \"unsupported\".\n-#\n-# When dealing with a large number of tests, it's difficult to weed out the\n-# ones that are too big for a particular cpu (eg: 16 bit with a small amount\n-# of memory).  There are various ways to deal with this.  Here's one.\n-# Fortunately, all of the cases where this is likely to happen will be using\n-# gld so we can tell what the error text will look like.\n-\n-proc ${tool}_check_unsupported_p { output } {\n-    if [regexp \"(^|\\n)\\[^\\n\\]*: region \\[^\\n\\]* is full\" $output] {\n-\treturn \"memory full\"\n-    }\n-    return \"\"\n-}\n-\n-# Prune messages from treelang that aren't useful.\n-\n-proc prune_treelang_output { text } {\n-    #send_user \"Before:$text\\n\"\n-    regsub -all \"(^|\\n)\\[^\\n\\]*: In (function|method) \\[^\\n\\]*\" $text \"\" text\n-    regsub -all \"(^|\\n)\\[^\\n\\]*: At top level:\\[^\\n\\]*\" $text \"\" text\n-\n-    # It would be nice to avoid passing anything to treelang that would cause it to\n-    # issue these messages (since ignoring them seems like a hack on our part),\n-    # but that's too difficult in the general case.  For example, sometimes\n-    # you need to use -B to point treelang at crt0.o, but there are some targets\n-    # that don't have crt0.o.\n-    regsub -all \"(^|\\n)\\[^\\n\\]*file path prefix \\[^\\n\\]* never used\" $text \"\" text\n-    regsub -all \"(^|\\n)\\[^\\n\\]*linker input file unused since linking not done\" $text \"\" text\n-\n-    #send_user \"After:$text\\n\"\n-\n-    return $text\n-}\n-"}, {"sha": "e4ff2c66ffeb3278b707b6fc1c9145ab868d2c21", "filename": "gcc/testsuite/treelang/ChangeLog", "status": "removed", "additions": 0, "deletions": 124, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2FChangeLog?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,124 +0,0 @@\n-2005-08-06  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* treetests.exp: Remove.\n-\t* a01gcco01runpgm: Move to...\n-\t* output/output-1.out: here.\n-\t* a01gcci01.c: Move to...\n-\t* output/output-1.c: here.\n-\t* a01gcci01.tree: Move to...\n-\t* output/output-1.tree: here.\n-\t* output/output.exp: New.\n-\n-2005-07-23  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* compile/var_defs.tree: Remove extra lines.\n-\n-2005-07-19  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* compile/var_defs.tree: Remove duplicate variable.\n-\t* compile/var_defs-2.tree: Add duplicate variable test.\n-\n-2005-03-22  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* compile/memory.tree: New test.\n-\n-2005-02-26  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* compile/var_defs: Add uninitialized variables.\n-\n-2005-02-26  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* compile/extrafunc.tree, compile/extravar.tree: New tests.\n-\n-2005-02-26  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* compile/unsigned.tree: New test.\n-\n-2005-02-24  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\tPR other/19896\n-\t* execute/execute.exp: New file.\n-\t* execute/funccall.tree, execute/funccall-2.tree, execute/initial.tree,\n-\texecute/main.tree, execute/static.tree: New tests.\n-\n-2005-02-24  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\tPR other/19897\n-\t* compile/exit.tree, compile/extref.tree, compile/function-1.tree,\n-\tcompile/syntax-1.tree: New tests.\n-\n-2004-10-02  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* compile/autofunc.tree: New File.\n-\t* compile/badchar.tree: New File.\n-\t* compile/externvar.tree: New File.\n-\t* compile/mismatch.tree: New File.\n-\t* compile/noproto.tree: New File.\n-\t* compile/novar.tree: New File.\n-\t* compile/var_defs.tree: Add duplicate variable.\n-\n-2004-07-31  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* compile/vars_def.tree: New File.\n-\t* compile/badreturn.tree: New File.\n-\n-2004-01-18  James A. Morrison  <ja2morri@uwaterloo.ca>\n-\n-\t* compile/compile.exp: New File.\n-\t* compile/tabs.tree: Test whether the front end\n-\tcompiles code with tabs in it.\n-\n-2003-02-25  Tim Josling  <tej@melbpc.org.au>\n-\n-\t* treetests.exp (run3): set options to force aggressive GC, to\n-\tensure GC is all set up correct,\n-\n-2002-05-07  Tim Josling  <tej@melbpc.org.au>\n-\n-\t* Makefile.in: Fix copyright\n-\t* a01gcci01.c: Ditto\n-\t* a01gcci01.tree: Ditto\n-\t* treetests.exp: Ditto\n-\n-2002-04-13  Tim Josling  <tej@melbpc.org.au>\n-\n-\t* treetree.c (tree_code_create_function_initial)\n-\tRemove duplicate call to layout_decl\n-\n-2001-12-02  Tim Josling  <tej@melbpc.org.au>\n-\n-      * Make-lang.in\n-      Ensure directory is built during install (installdirs dependency)\n-\n-      * lex.l\n-      Work around poisoned malloc (undef IN_GCC)\n-      Remove fake definition of tree.\n-\n-      * parse.y\n-      Work around poisoned malloc (undef IN_GCC)\n-\n-      * tree1.c\n-      New front end interface.\n-      (top level) New structure lang_hooks.\n-      (tree_post_options) Remove.\n-      errorcount now a macro so do not define it.\n-      current_nesting_level => work_nesting_level due to clash.\n-\n-      * treelang.h\n-      errorcount now a macro so do not reference it.\n-\n-      * treetree.c\n-      Replace NULL_PTR by NULL.\n-      (tree_code_get_expression) Mark op3 unused.\n-      Do not init builtins.\n-\n-2001-06-11  Tim Josling  <tej@melbpc.org.au>\n-\n-\t* treelang.exp (global) remove COBOL specific code.\n-\n-2001-05-24  Tim Josling  <tej@melbpc.org.au>\n-\n-\tCreated this directory and its tests. All derived from the cobol\n-\ttest swamp which was also all written by me.\n-\n-"}, {"sha": "5230e378f4b1b3af341374d58c5aa0115ec76049", "filename": "gcc/testsuite/treelang/Makefile.in", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2FMakefile.in?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,28 +0,0 @@\n-# Copyright (C) 2001, 2002, 2007 Free Software Foundation, Inc.\n-\n-#    This program is free software; you can redistribute it and/or modify it\n-#    under the terms of the GNU General Public License as published by the\n-#    Free Software Foundation; either version 3, or (at your option) any\n-#    later version.\n-#\n-#    This program is distributed in the hope that it will be useful,\n-#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-#    GNU General Public License for more details.\n-#\n-#    You should have received a copy of the GNU General Public License\n-#    along with GCC; see the file COPYING3.  If not see\n-#    <http://www.gnu.org/licenses/>.\n-#\n-#    In other words, you are welcome to use, share and improve this program.\n-#    You are forbidden to forbid anyone else to use, share and improve\n-#    what you give them.   Help stamp out software-hoarding!  \n-#\n-#\n-all: \n-\n-clean:\n-\t-rm -f *.o *.diff *~ *.bad core *.x\n-\n-distclean:\tclean\n-\t-rm -f Makefile config.status"}, {"sha": "97da41e412034dc5ebc10b15b1663f46296a3cf9", "filename": "gcc/testsuite/treelang/compile/autofunc.tree", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fautofunc.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fautofunc.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fautofunc.tree?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,6 +0,0 @@\n-// { dg-do compile }\n-automatic int bar ();  // { dg-error \"automatic\" }\n-\n-bar () {\n-\treturn -12;\n-}"}, {"sha": "0121cc88ed07368209aac19f8ecb8f20065b080a", "filename": "gcc/testsuite/treelang/compile/badchar.tree", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fbadchar.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fbadchar.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fbadchar.tree?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,2 +0,0 @@\n-// { dg-do compile }\n-static int bar = 1*;  // { dg-error \"Unrecognized\" }"}, {"sha": "60d3b120c5db985ae74ed0442529359500d153d3", "filename": "gcc/testsuite/treelang/compile/badreturn.tree", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fbadreturn.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fbadreturn.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fbadreturn.tree?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,14 +0,0 @@\n-// { dg-do compile }\n-\n-external_definition void bar ();\n-external_definition int gar (int arg0);\n-\n-bar\n-{\n-\treturn 0; // { dg-warning \"return\" }\n-}\n-\n-gar\n-{\n-\treturn; // { dg-error \"return\" }\n-}"}, {"sha": "4a6c4279f5ca72fad9604e0be63daa493dc03e0c", "filename": "gcc/testsuite/treelang/compile/compile.exp", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fcompile.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fcompile.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fcompile.exp?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,30 +0,0 @@\n-# Tests for treelang; run from gcc/treelang/Make-lang.in => gcc/Makefile\n-\n-# Copyright (C) 2004, 2007 by The Free Software Foundation\n-\n-# This program is free software; you can redistribute it and/or modify it\n-# under the terms of the GNU General Public License as published by the\n-# Free Software Foundation; either version 3, or (at your option) any\n-# later version.\n-#\n-# This program is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-#\n-# In other words, you are welcome to use, share and improve this program.\n-# You are forbidden to forbid anyone else to use, share and improve\n-# what you give them.   Help stamp out software-hoarding!\n-\n-# Treelang tests that only need to compile.\n-\n-# Load support procs.\n-load_lib treelang-dg.exp\n-\n-dg-init\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.tree]] \"\" \"\"\n-dg-finish"}, {"sha": "355e772f5da6bc8a6a92f6e461af3db8d4308a47", "filename": "gcc/testsuite/treelang/compile/exit.tree", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fexit.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fexit.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fexit.tree?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,12 +0,0 @@\n-// { dg-do compile }\n-external_reference void exit (int code);\n-\n-static int foo ();\n-\n-foo\n-{\n-\tautomatic int bar = +1;\n-\tbar = bar + +1;\n-\texit (0);  // Calling external references is currently broken.\n-\treturn bar;\n-}"}, {"sha": "1fa3d6e89fcc26bdbb6e0c4883a15039fcdac9ad", "filename": "gcc/testsuite/treelang/compile/externvar.tree", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fexternvar.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fexternvar.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fexternvar.tree?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,4 +0,0 @@\n-// { dg-do compile }\n-external_reference int bar = 0;  // { dg-error \"initial\" }\n-\n-static char barf = 1;"}, {"sha": "30827a79dacfabdeab77f745836f05b26abbd12e", "filename": "gcc/testsuite/treelang/compile/extrafunc.tree", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fextrafunc.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fextrafunc.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fextrafunc.tree?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,25 +0,0 @@\n-// { dg-do compile }\n-// { dg-options \"-O2 -fdump-tree-optimized -Wunused-function\" }\n-// Check to see that unused functions get removed at -O2 and\n-// above.\n-static int foo (int bar);\n-static int baz (int aaa);\n-external_definition int ext (int bbb);\n-\n-foo\n-{\n-\treturn bar;\n-}\n-\n-baz // { dg-warning \"defined but not used\" }\n-{\n-\treturn foo (aaa);\n-}\n-\n-ext\n-{\n-\treturn foo (bbb);\n-}\n-\n-// { dg-final { scan-tree-dump-not \"baz\" \"optimized\" } }\n-// { dg-final { cleanup-tree-dump \"optimized\" } }"}, {"sha": "2154de6b20560d2aabaf98a6fffbd1053adce986", "filename": "gcc/testsuite/treelang/compile/extravar.tree", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fextravar.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fextravar.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fextravar.tree?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,14 +0,0 @@\n-// { dg-do compile }\n-// { dg-options \"-fdump-tree-optimized -O1 -Wunused-variable\" }\n-external_definition int bar (int aaa, int ddd);\n-\n-static int foo = -3;  // { dg-warning \"defined but not used\" }\n-\n-bar\n-{\n-\tautomatic int ccc;\n-\n-\treturn aaa + ddd + +3;\n-}\n-// { dg-final { scan-tree-dump-not \"ccc\" \"optimized\" } }\n-// { dg-final { cleanup-tree-dump \"optimized\" } }"}, {"sha": "085ab8f88fd297b50f916ae6eda5c954a2bfdf33", "filename": "gcc/testsuite/treelang/compile/extref.tree", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fextref.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fextref.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fextref.tree?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,9 +0,0 @@\n-// { dg-do compile }\n-external_reference void abort ();\n-\n-static int foo (int a);\n-\n-foo\n-{\n-  return a;\n-}"}, {"sha": "2d50323303fbbb1ec53b23bf5d931930dd527444", "filename": "gcc/testsuite/treelang/compile/full_unit.tree", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Ffull_unit.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Ffull_unit.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Ffull_unit.tree?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,16 +0,0 @@\n-// { dg-do compile }\n-// { dg-options \"-funit-at-a-time\" }\n-external_definition int add (int arga, int argb);\n-external_definition char sub (char argc, char argd);\n-\n-add\n-{\n-\treturn arga + argb + +3;\n-}\n-\n-sub\n-{\n-\treturn argd - argc + +2;\n-}\n-// { dg-final { scan-assembler \"add\" } }\n-// { dg-final { scan-assembler \"sub\" } }"}, {"sha": "6bb4e370a48cacd33d3da1c5051f7e290ec57b55", "filename": "gcc/testsuite/treelang/compile/function-1.tree", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Ffunction-1.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Ffunction-1.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Ffunction-1.tree?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,14 +0,0 @@\n-// { dg-do compile }\n-static int foo ();\n-static int bar (int a);\n-\n-foo\n-{\n-\treturn 1;\n-}\n-\n-bar\n-{\n-\ta = a + foo ();\n-\treturn a;\n-}"}, {"sha": "a18475be5b8b8b0c1bd8878226f46f596d73eacf", "filename": "gcc/testsuite/treelang/compile/memory.tree", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fmemory.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fmemory.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fmemory.tree?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,18 +0,0 @@\n-external_definition int foo (int a, int b);\n-external_definition int bar (int c, int d);\n-external_definition int bart (int e);\n-\n-bar\n-{\n-\treturn c + d;\n-}\n-\n-foo\n-{\n-\treturn a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +a - a +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b +b - b;\n-}\n-\n-bart\n-{\n-\treturn e;\n-}"}, {"sha": "7c62cd35b0d5e10aef12160c5f783fe53273fb10", "filename": "gcc/testsuite/treelang/compile/mismatch.tree", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fmismatch.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fmismatch.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fmismatch.tree?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,8 +0,0 @@\n-// { dg-do compile }\n-static int bar ();\n-static void barf ();\n-\n-bar {\n-\tbarf (1); // { dg-error \"mismatch\" \"barf\" }\n-\treturn -12;\n-}"}, {"sha": "a704765a791fc120ee949b4471adaf1107ce47f3", "filename": "gcc/testsuite/treelang/compile/noproto.tree", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fnoproto.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fnoproto.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fnoproto.tree?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,5 +0,0 @@\n-// { dg-do compile }\n-foo // { dg-error \"foo\" \"prototype\" }\n-{ \n- x = 3;\n-}"}, {"sha": "97ef611f8d33bcecce654a89a45f1049c008ee7e", "filename": "gcc/testsuite/treelang/compile/novar.tree", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fnovar.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fnovar.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fnovar.tree?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,5 +0,0 @@\n-static void bar ();\n-\n-bar {\n- x =  3;  // { dg-error \"x\" \"not defined\" }\n-}"}, {"sha": "32efe744ca2d5563113c912157c46c5eda48c720", "filename": "gcc/testsuite/treelang/compile/syntax-1.tree", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fsyntax-1.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fsyntax-1.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fsyntax-1.tree?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,9 +0,0 @@\n-// { dg-do compile }\n-external_reference void exit(int); // { dg-error \"(parse|syntax) error\" }\n-\n-static int foo (int a);\n-\n-foo\n-{\n-  return a;\n-}"}, {"sha": "6294c15c49ab565580a41b7e91f8ef993ef163d6", "filename": "gcc/testsuite/treelang/compile/tabs.tree", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Ftabs.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Ftabs.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Ftabs.tree?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,11 +0,0 @@\n-// { dg-do compile }\n-external_definition int main(int argc);\n-\n-main {\n-\tautomatic int v1;\n-\tautomatic int v2;\n-\tv1 = argc;\n-\tv2 = 3;\n-\n-        return v2;\n-}"}, {"sha": "67f3404df9026005f4cea39eb4ae112993bb0333", "filename": "gcc/testsuite/treelang/compile/unsigned.tree", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Funsigned.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Funsigned.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Funsigned.tree?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,20 +0,0 @@\n-// { dg-do compile }\n-// { dg-options \"-fdump-tree-gimple\" }\n-external_reference void abort ();\n-external_reference void exit (int status);\n-external_definition int main (int argc, int argv);\n-\n-main\n-{\n-\tautomatic unsigned int bar = 2147483649;\n-\tautomatic unsigned int baz = 2147483649;\n-\n-\tif (bar == baz) {\n-\t\tabort ();\n-\t} else {\n-\t\texit (0);\n-\t}\n-\treturn +1;\n-}\n-// { dg-final { scan-tree-dump-not \"\\\\\\(int\\\\\\)\" \"gimple\" } }\n-// { dg-final { cleanup-tree-dump \"gimple\" } }"}, {"sha": "cfcd3124d8fc700e7b4744bd0548b81e55f2f56f", "filename": "gcc/testsuite/treelang/compile/var_defs-2.tree", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fvar_defs-2.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fvar_defs-2.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fvar_defs-2.tree?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,20 +0,0 @@\n-// { dg-do compile }\n-external_definition int first_nonzero (int arg5, int arg6);\n-\n-first_nonzero\n-{\n-  automatic int y;\n-  automatic int y;  // { dg-error \"Duplicate\" }\n-  if (arg5)\n-    {\n-      return arg5;\n-    }\n-  else\n-    {\n-      automatic int j;\n-      j = arg6;\n-      return j;\n-    }\n-  return arg6;\n-}\n-"}, {"sha": "9c4e4e11dfc4678d8868956e1df7529d8f5a06ed", "filename": "gcc/testsuite/treelang/compile/var_defs.tree", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fvar_defs.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fvar_defs.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fvar_defs.tree?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,24 +0,0 @@\n-// { dg-do compile }\n-// { dg-options \"-Wuninitialized -O\" }\n-external_definition void boring (int arg0);\n-external_definition char condition (char arg1, char arg2);\n-\n-boring\n-{\n-  arg0 = +5  + +3;  // Force 3 and 5 to be signed numbers.\n-  arg0 = arg0 + +3;\n-}\n-\n-condition\n-{\n-  if (arg1)\n-    {\n-      automatic int i;\t// { dg-warning \"was declared here\" }\n-      return i + 1;\t// { dg-warning \"uninitialized\" }\n-    }\n-  else\n-    {\n-      automatic int j;\t// { dg-warning \"was declared here\" }\n-      return j;\t\t// { dg-warning \"uninitialized\" }\n-    }\n-}"}, {"sha": "4a6c4279f5ca72fad9604e0be63daa493dc03e0c", "filename": "gcc/testsuite/treelang/execute/execute.exp", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fexecute%2Fexecute.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fexecute%2Fexecute.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fexecute%2Fexecute.exp?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,30 +0,0 @@\n-# Tests for treelang; run from gcc/treelang/Make-lang.in => gcc/Makefile\n-\n-# Copyright (C) 2004, 2007 by The Free Software Foundation\n-\n-# This program is free software; you can redistribute it and/or modify it\n-# under the terms of the GNU General Public License as published by the\n-# Free Software Foundation; either version 3, or (at your option) any\n-# later version.\n-#\n-# This program is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-#\n-# In other words, you are welcome to use, share and improve this program.\n-# You are forbidden to forbid anyone else to use, share and improve\n-# what you give them.   Help stamp out software-hoarding!\n-\n-# Treelang tests that only need to compile.\n-\n-# Load support procs.\n-load_lib treelang-dg.exp\n-\n-dg-init\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.tree]] \"\" \"\"\n-dg-finish"}, {"sha": "43911c9f4f8a05abe32ffe009ddef4ab8ebcf590", "filename": "gcc/testsuite/treelang/execute/funccall-2.tree", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fexecute%2Ffunccall-2.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fexecute%2Ffunccall-2.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fexecute%2Ffunccall-2.tree?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,28 +0,0 @@\n-// { dg-do run }\n-external_definition int main (int argc);\n-\n-static int foo (int bba);\n-\n-foo\n-{\n-\tautomatic int bar;\n-\n-\tbar = bba + +1;\n-\treturn bar;\n-}\n-\n-main\n-{\n-  automatic int aaa = +3;\n-\n-  aaa = foo (argc);\n-  \n-  if (aaa == +2)\n-    { \n-      return +0;\n-    }\n-  else\n-    {\n-      return +1;\n-    }\n-}"}, {"sha": "e806d3b583d995341face5c020e97958eed22f17", "filename": "gcc/testsuite/treelang/execute/funccall.tree", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fexecute%2Ffunccall.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fexecute%2Ffunccall.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fexecute%2Ffunccall.tree?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,33 +0,0 @@\n-// { dg-do run }\n-// Tests whether initializtion works properly.\n-external_reference void abort ();\n-external_reference void exit (int code);\n-external_definition int main ();\n-\n-static int foo ();\n-\n-foo\n-{\n-\tautomatic int bar;\n-\n-\tbar = +1;\n-\tbar = bar + +1;\n-\treturn bar;\n-}\n-\n-main\n-{\n-  automatic int aaa;\n-\n-  aaa = foo ();\n-  \n-  if (aaa == +2)\n-    { \n-      exit (0);\n-    }\n-  else\n-    {\n-      abort ();\n-    }\n-  return 0;\n-}"}, {"sha": "0daa99700192b5b8eacdd6b036d3f14abc510298", "filename": "gcc/testsuite/treelang/execute/initial.tree", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fexecute%2Finitial.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fexecute%2Finitial.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fexecute%2Finitial.tree?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,20 +0,0 @@\n-// { dg-do run }\n-// Tests whether initializtion works properly.\n-external_reference void abort ();\n-external_reference void exit (int code);\n-external_definition int main ();\n-\n-main\n-{\n-  automatic int aaa = +3;\n-\n-  if (aaa == +3)\n-    { \n-      exit (0);\n-    }\n-  else\n-    {\n-      abort ();\n-    }\n-  return 0;\n-}"}, {"sha": "549f9917895a57223e99516c2c01fa2ef989abad", "filename": "gcc/testsuite/treelang/execute/main.tree", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fexecute%2Fmain.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fexecute%2Fmain.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fexecute%2Fmain.tree?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,14 +0,0 @@\n-// { dg-do run }\n-external_definition int main (int argc);\n-\n-main\n-{\n-\tif (argc == 1)\n-\t{\n-\t\treturn 0;\n-\t}\n-\telse\n-\t{\n-\t\treturn argc;\n-\t}\n-}"}, {"sha": "370f244604f08ff8cb2739e5fb6cfdf06ac93ae2", "filename": "gcc/testsuite/treelang/execute/static.tree", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fexecute%2Fstatic.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Fexecute%2Fstatic.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fexecute%2Fstatic.tree?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,32 +0,0 @@\n-// { dg-do run }\n-external_reference void abort ();\n-external_reference void exit (int code);\n-external_definition int main (int argc, int argv);\n-\n-static int foo ();\n-\n-foo\n-{\n-\tstatic int bar = +1;\n-\n-\tbar = bar + +1;\n-\treturn bar;\n-}\n-\n-main\n-{\n-  automatic int aaa = +3;\n-\n-  aaa = foo ();\n-  aaa = foo ();\n-  \n-  if (aaa == 3)\n-    { \n-      exit (0);\n-    }\n-  else\n-    {\n-      abort ();\n-    }\n-  return 0;\n-}"}, {"sha": "7f12e87852f3718af9c89e56054acecfb221c00c", "filename": "gcc/testsuite/treelang/output/output-1.c", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Foutput%2Foutput-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Foutput%2Foutput-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Foutput%2Foutput-1.c?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,43 +0,0 @@\n-/* Driver for treelang test pgm */\n-\n-/*\n-\n-  Copyright (C) 2001, 2002, 2007 Free Software Foundation, Inc.\n-\n-  This program is free software; you can redistribute it and/or modify it\n-  under the terms of the GNU General Public License as published by the\n-  Free Software Foundation; either version 3, or (at your option) any\n-  later version.\n-  \n-  This program is distributed in the hope that it will be useful,\n-  but WITHOUT ANY WARRANTY; without even the implied warranty of\n-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-  GNU General Public License for more details.\n-  \n-  You should have received a copy of the GNU General Public License\n-  along with GCC; see the file COPYING3.  If not see\n-  <http://www.gnu.org/licenses/>.\n-  \n-  In other words, you are welcome to use, share and improve this program.\n-  You are forbidden to forbid anyone else to use, share and improve\n-  what you give them.   Help stamp out software-hoarding!  \n-*/  \n-\n-int add(int, int);\n-int subtract(int, int);\n-int first_nonzero(int, int);\n-extern int printf(char *template, ...);\n-\n-int \n-main (int argc, char *argv[])\n-{\n-  printf(\"2:%d\\n\", add(1,1));\n-  printf(\"7:%d\\n\", add(3,4));\n-  printf(\"-1:%d\\n\", subtract(3,4));\n-  printf(\"1:%d\\n\", subtract(2,1));\n-  printf(\"3:%d\\n\", first_nonzero(0,3));\n-  printf(\"0:%d\\n\", first_nonzero(0,0));\n-  printf(\"1:%d\\n\", first_nonzero(1,0));\n-  printf(\"15:%d\\n\", double_plus_one(7));\n-  return 0;\n-}"}, {"sha": "3c2c743c77d9a89de567d0bcee6d01d325015a51", "filename": "gcc/testsuite/treelang/output/output-1.out", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Foutput%2Foutput-1.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Foutput%2Foutput-1.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Foutput%2Foutput-1.out?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,8 +0,0 @@\n-2:2\n-7:7\n--1:-1\n-1:1\n-3:3\n-0:0\n-1:1\n-15:15"}, {"sha": "9fef122e6ef4d33cd37f732391e8cfcebf88837c", "filename": "gcc/testsuite/treelang/output/output-1.tree", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Foutput%2Foutput-1.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Foutput%2Foutput-1.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Foutput%2Foutput-1.tree?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,59 +0,0 @@\n-// -*- c -*- c mode in emacs\n-\n-//  Copyright (C) 2001, 2002, 2007 Free Software Foundation, Inc.\n-//  This program is free software; you can redistribute it and/or modify it\n-//  under the terms of the GNU General Public License as published by the\n-//  Free Software Foundation; either version 3, or (at your option) any\n-//  later version.\n-//\n-//  This program is distributed in the hope that it will be useful,\n-//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-//  GNU General Public License for more details.\n-//\n-//  You should have received a copy of the GNU General Public License\n-//  along with GCC; see the file COPYING3.  If not see\n-//  <http://www.gnu.org/licenses/>.\n-//\n-//  In other words, you are welcome to use, share and improve this program.\n-//  You are forbidden to forbid anyone else to use, share and improve\n-//  what you give them.   Help stamp out software-hoarding!  \n-\n-\n-external_definition int add(int arg1, int arg2);\n-external_definition int subtract(int arg3, int arg4);\n-external_definition int first_nonzero(int arg5, int arg6);\n-external_definition int double_plus_one(int arg7);\n-\n-add \n-{\n-  return arg1 + arg2;\n-}\n-\n-        \n-subtract \n-{\n-  return arg3 - arg4;\n-}\n-\n-double_plus_one\n-{\n-  automatic int aaa;\n-  aaa=add(arg7, arg7);\n-  aaa=add(aaa, aaa);\n-  aaa=subtract(subtract(aaa, arg7), arg7) + 1;\n-  return aaa;\n-}\n-\n-first_nonzero\n-{\n-  if (arg5)\n-    {\n-      return arg5;\n-    }\n-  else\n-    {\n-    }\n-  return arg6;\n-}\n-"}, {"sha": "8284a8f9cbbcedbecfb5fff0e7860e4075c63a3b", "filename": "gcc/testsuite/treelang/output/output.exp", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Foutput%2Foutput.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftestsuite%2Ftreelang%2Foutput%2Foutput.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Foutput%2Foutput.exp?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,58 +0,0 @@\n-proc test_treelang_output { testname srcfiles infile resfile args } {\n-    set comp_output [treelang_target_compile $srcfiles $testname executable $args]\n-    if { [treelang_check_compile $testname $args $testname $comp_output] == 0 } {\n-    \treturn 0;\n-    }\n-\n-    verbose \"Expected output is in $resfile\"\n-    set id [open $resfile r]\n-    set expected \"\"\n-    append expected [read $id]\n-    close $id\n-    set output \"\"\n-    set output [exec $testname $infile]\n-    regsub -all \"\\r\" \"$output\" \"\" output\n-    regsub \"\\n*$\" $expected \"\" expected\n-    regsub \"\\n*$\" $output \"\" output\n-    regsub \"^\\n*\" $expected \"\" expected\n-    regsub \"^\\n*\" $output \"\" output\n-    regsub -all \"\\[ \\t\\]\\[ \\t\\]*\" $expected \" \" expected\n-    regsub -all \"\\[ \\t\\]*\\n\\n*\" $expected \"\\n\" expected\n-    regsub -all \"\\[ \\t\\]\\[ \\t\\]*\" $output \" \" output\n-    regsub -all \"\\[ \\t\\]*\\n\\n*\" $output \"\\n\" output\n-    verbose \"expected is $expected\"\n-    verbose \"actual is $output\"\n-\n-    if { $expected == $output } {\n-\tpass $testname\n-    } else {\n-        fail $testname\n-    }\n-    exec rm $testname\n-}\n-global srcdir subdir\n-\n-catch { lsort [glob -nocomplain ${srcdir}/${subdir}/*.out] } outfiles\n-verbose \"Output files are $outfiles\"\n-\n-set prefix \"\"\n-foreach x $outfiles {\n-    regsub \"\\\\.out$\" $x \"\" prefix\n-    set bname [file tail $prefix]\n-\n-    if [file exists ${prefix}.inp] {\n-\tset inpfile ${prefix}.inp\n-    } else {\n-\tset inpfile \"\"\n-    }\n-\n-    verbose \"inpfile is $inpfile\"\n-\n-    set srcfiles [lsort [glob -nocomplain ${prefix}.{c,tree}]]\n-    verbose \"source files are $srcfiles\"\n-    test_treelang_output \"treelang/$bname\" $srcfiles $inpfile $x \"\"\n-}\n-\n-# Local Variables:\n-# tcl-indent-level:4\n-# End:"}, {"sha": "5aef0c14a3fb5d673779c532df347e1be8b3f1ee", "filename": "gcc/treelang/ChangeLog", "status": "removed", "additions": 0, "deletions": 1171, "changes": 1171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,1171 +0,0 @@\n-2008-02-26  Tom Tromey  <tromey@redhat.com>\n-\n-\t* tree1.c (treelang_init): Remove old location code.\n-\t(treelang_parse_file): Likewise.\n-\t* lex.l (LINEMAP_POSITION_FOR_COLUMN): Remove.\n-\t(update_lineno_charno): Remove old location code.\n-\n-2008-02-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n-\n-\tPR other/35107\n-\t* Make-lang.in (tree1): Add $(GMPLIBS).\n-\n-2007-11-26  Andreas Krebbel  <krebbel1@de.ibm.com>\n-\n-\tPR 34081/C++\n-\t* treetree.c (tree_code_create_function_wrapup): Pass 'false' \n-\tfor the new allocate_struct_function parameter.\n-\n-2007-09-12  Jan Hubicka  <jh@suse.cz>\n-\n-\t* treetree.c (LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION): Kill.\n-\t(treelang_expand_function): Kill.\n-\n-2007-09-06  Tom Tromey  <tromey@redhat.com>\n-\n-\t* tree1.c (treelang_init): Update.\n-\t(treelang_parse_file): Update.\n-\t(treelang_parse_file): Update.\n-\t(treelang_parse_file): Update.\n-\t* lex.l: Update.\n-\t(update_lineno_charno): Likewise.\n-\n-2007-09-05  Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\t* treetree.c (tree_code_create_function_wrapup):  Use set_cfun.\n-\n-2007-08-21  Paul Brook  <paul@codesourcery.com>\n-\t    Nathan Sidwell  <nathan@codesourcery.com>\n-\t    Mark Mitchell  <mark@codesourcery.com>\n-\t    Joseph Myers  <joseph@codesourcery.com>\n-\n-\t* tree1.c (treelang_handle_option): Use pkgversion_string.\n-\t* treelang.texi (which-treelang): Define to use VERSION_PACKAGE.\n-\n-2007-07-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n-\n-\t* lex.l (update_yylval): Constify.\n-\t* treelang.h (struct token_part, struct parameter_part):\n-\tLikewise.\n-\t* treetree.c (tree_code_create_function_prototype,\n-\ttree_code_create_variable, tree_code_get_integer_value):\n-\tLikewise.\n-\t* treetree.h (tree_code_get_integer_value,\n-\ttree_code_create_function_prototype, tree_code_create_variable):\n-\tLikewise.\n-\n-2007-07-25  Richard Guenther  <rguenther@suse.de>\n-\n-\t* treetree.c (tree_code_generate_return): RETURN_EXPRs\n-\thave volatile type.\n-\n-2007-07-17  Nick Clifton  <nickc@redhat.com>\n-\n-\t* parse.y: Change copyright header to refer to version 3 of the\n-\tGNU General Public License and to point readers at the COPYING3\n-\tfile.\n-\t* lex.l: Likewise.\n-\t* lang.opt: Likewise.\n-\t* lang-specs.h: Likewise.\n-\t* treelang.h: Likewise.\n-\t* config-lang.in: Likewise.\n-\t* tree-convert.c: Likewise.\n-\t* treetree.c: Likewise.\n-\t* tree1.c: Likewise.\n-\t* Make-lang.in: Likewise.\n-\t* treetree.h: Likewise.\n-\t* spec.c: Likewise.\n-\n-2007-06-11  Rafael Avila de Espindola  <espindola@google.com>\n-\n-\t* treetree.c (tree_lang_signed_type): Remove.\n-\t(LANG_HOOKS_SIGNED_TYPE): Remove.\n-\n-2007-05-14  Rafael Avila de Espindola  <espindola@google.com>\n-\n-\t* treetree.c (tree_lang_unsigned_type): Remove.\n-\t(LANG_HOOKS_UNSIGNED_TYPE): Remove.\n-\n-2007-03-30  Rafael Avila de Espindola  <espindola@google.com>\n-\n-\t* treetree.c (tree_lang_signed_or_unsigned_type): Remove.\n-\t(LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE) Remove.\n-\n-2007-03-01  Brooks Moses  <brooks.moses@codesourcery.com>\n-\n-\t* Make-lang.in: Add install-pdf target as copied from\n-\tautomake v1.10 rules.\n-\n-2007-02-26  Brooks Moses  <brooks.moses@codesourcery.com>\n-\n-\t* treelang.texi: Standardize title page, remove version number\n-\tfrom copyright page.\n-\n-2006-10-23 Rafael Avila de Espindola  <rafael.espindola@gmail.com>\n-\n-\t* treetree.c (builtin_function): Remove.\n-\n-2006-10-10  Brooks Moses  <bmoses@stanford.edu>\n-\n-\t* Make-lang.in: Added \"treelang.pdf\" target support.\n-\n-2006-07-28  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n-\n-\t* Make-lang.in: Use $(HEADER_H) instead of header.h in dependencies.\n-\n-2006-06-17  Karl Berry  <karl@gnu.org>\n-\n-\t* treelang.texi (@dircategory): Use \"Software development\"\n-\tinstead of \"Programming\", following the Free Software Directory.\n-\n-2006-06-06  Mike Stump  <mrs@apple.com>\n-\n-\t* Make-lang.in: Rename to gcc_htmldir to build_htmldir to avoid\n-\tinstalling during build.\n-\n-2006-05-23  Carlos O'Donell  <carlos@codesourcery.com>\n-\n-\t* Make-lang.in: Rename htmldir to gcc_htmldir.\n-\n-2006-05-16  H.J. Lu  <hongjiu.lu@intel.com>\n-\n-\tPR driver/26885\n-\t* Make-lang.in (gtreelang$(exeext)): Replace gcc.o with\n-\t$(GCC_OBJS).\n-\n-2006-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n-\n-\t* Make-lang.in (treelang/treetree.o): Add dependency on\n-\t$(TARGET_H).\n-\n-2006-04-22  Matthias Klose  <doko@debian.org>\n-\n-\t* Make-lang.in (treelang.check): Don't set and pass TRANSFORM.\n-\n-2006-03-29  Carlos O'Donell  <caros@codesourcery.com>\n-\n-\t* Make-lang.in: Rename docdir to gcc_docdir.\n-\n-2006-02-20 Rafael \ufffdvila de Esp\ufffdndola <rafael.espindola@gmail.com>\n-\n-\t* Make-lang.in (.phony): Remove TREELANG.\n-\t(TREELANG): Remove.\n-\n-2006-01-21  Joseph S. Myers  <joseph@codesourcery.com>\n-\n-\t* spec.c (lang_specific_driver): Update copyright notice date.\n-\n-2006-01-16  Rafael \ufffdvila de Esp\ufffdndola <rafael.espindola@gmail.com>\n-\n-\t* spec.c (lang_specific_spec_functions): Remove.\n-\n-2005-12-28  Rafael \ufffdvila de Esp\ufffdndola  <rafael.espindola@gmail.com>\n-\n-\t* Make-lang.in (treelang.distdir): Remove.\n-\n-2005-12-07  Rafael \ufffdvila de Esp\ufffdndola  <rafael.espindola@gmail.com>\n-\n-\t* Make-lang.in (treelang.all.build, treelang.install-normal): Remove.\n-\n-2005-12-07  Rafael \ufffdvila de Esp\ufffdndola  <rafael.espindola@gmail.com>\n-\n-\t* Make-lang.in: Remove all dependencies on s-gtype.\n-\n-2005-12-05  Richard Guenther  <rguenther@suse.de>\n-\n-\t* treetree.c (tree_code_if_start, tree_code_create_variable,\n-\ttree_code_generate_return, tree_code_get_expression,\n-\ttree_code_add_parameter): Use fold_convert where appropriate.\n-\n-2005-11-07  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\tPR treelang/24066\n-\t* treetree.c (LANG_HOOKS_ATTRIBUTE_TABLE): Set to\n-\ttreelang_attribute_table.\n-\t(handle_attribute): New function.\n-\t(treelang_attribute_table): New attribute table.\n-\n-2005-09-23  Rafael \u00c1vila de Esp\u00edndola  <rafael.espindola@gmail.com>\n-\n-\t* parse.y : Changed pointer declaration from \"type* var\" to \"type *var\"\n-\tRemoved trailing space.  Wrap long lines.\n-\n-2005-09-23  Rafael \u00c1vila de Esp\u00edndola  <rafael.espindola@gmail.com>\n-\n-\t* parse.y :  Fixed two compile warnings in \"error\" and \"warning\"\n-\tinvocations.  Removed trailing periods in messages.  Decapitalized the\n-\tfirst word of each.\n-\n-2005-08-07  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* tree-convert.c (convert): Use fold_build1 instead of\n-\tfold (build1.\n-\n-2005-08-06  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\tPR treelang/23072\n-\t* Make-lang.in: Remove old testing cruft.\n-\n-2005-06-25  Kelley Cook  <kcook@gcc.gnu.org>\n-\n-\t* all files: Update FSF address in copyright headers.\n-\n-2005-06-15  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* parse.y (function_invocation): Reverse parameter list.\n-\t* treetree.c (tree_code_get_expression): Don't reverse parameter list.\n-\n-2005-06-12  Rafael ?vila de Esp?ndola   <rafael.espindola@gmail.com>\n-\n-\t* treetree.c (tree_code_get_expression): Call build_function_call_expr\n-\tto build function calls.\n-\n-2005-05-31  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n-\n-\t* treelang/lex.l, treelang/parse.y: Don't include errors.h and\n-\tinclude toplev.h.\n-\t* treelang/Make-lang.in: Updates dependencies.\n-\n-2005-05-02  Andrew Pinski  <pinskia@physics.uc.edu>\n-\n-\tPR treelang/21345\n-\t* parse.y (parameters_opt): Add semicolon at the end.\n-\n-2005-04-29  Tom Tromey  <tromey@redhat.com>\n-\n-\t* treetree.c (poplevel): Updated for change to build_block.\n-\n-2005-04-23  DJ Delorie  <dj@redhat.com>\n-\n-\t* parse.y: Adjust warning() callers.\n-\n-2005-04-11  Richard Sandiford  <rsandifo@redhat.com>\n-\n-\t* lang.opt: Refer to the GCC internals documentation instead of c.opt.\n-\n-2005-04-01  Andrew Pinski  <pinskia@physics.uc.edu>\n-\n-\tPR treelang/20604\n-\t* lang-spec.c: Simplify @treelang to what the other\n-\tlanguages do.\n-\n-2005-04-01  Kazu Hirata  <kazu@cs.umass.edu>\n-\n-\t* treelang/treelang.texi: Fix typos.\n-\t* treelang/treetree.c: Fix comment typos.\n-\n-2005-03-23  Joseph S. Myers  <joseph@codesourcery.com>\n-\n-\t* treetree.c (LANG_HOOKS_TRUTHVALUE_CONVERSION,\n-\ttree_lang_truthvalue_conversion): Remove.\n-\t* tree-convert.c: Don't call truthvalue_conversion.\n-\n-2005-03-22  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* treetree.c (tree_code_if_start): Use fold_buildN.\n-\t(tree_code_create_variable): Likewise.\n-\t(tree_code_generate_return): Likewise.\n-\t(tree_code_get_expression): Likewise.\n-\t(tree_code_add_parameter): Likewise.\n-\n-2005-03-22  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* treelang.h (struct parameter_part): Skip WHERE_TO_PUT_VAR_TREE\n-\tduring GC.\n-\n-2005-03-15  Zack Weinberg  <zack@codesourcery.com>\n-\n-\t* Make-lang.in (TEXI_TREELANG_FILES): Add gcc-vers.texi.\n-\n-2005-03-06  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\tPR other/20326\n-\t* Make-lang.in (gtreelang, treelang/spec.o): New targets.\n-\t* spec.c: New file.\n-\n-2005-02-27  Kazu Hirata  <kazu@cs.umass.edu>\n-\n-\t* treelang.texi: Fix a typo.\n-\n-2005-02-26  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* parse.y (function_invocation, variable-ref, make_plus_expression):\n-\tPass location to tree_code_get_expression.\n-\t* treetree.c (tree_code_generate_return): Set EXPR_LOCUS on retval.\n-\t(tree_code_get_expression): Wrap variable references in NOP_EXPRs and\n-\tset EXPR_LOCATION on ret1.\n-\t* treetree.h (tree_code_get_expression): Take the location of the\n-\texpression as an argument.\n-\n-2005-02-26  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* treelang.texi: Treelang does have warnings.\n-\t* treetree.c (tree_code_create_function_prototype): Don't set\n-\tTREE_USED and set TREE_PUBLIC, DECL_EXTERNAL, and TREE_STATIC\n-\tas few times as needed on the function declaration.\n-\t(tree_code_create_function_initial): Don't set TREE_USED,\n-\tTREE_ADDRESSABLE, but set TREE_STATIC on the function declaration.\n-\t(tree_code_create_variable): Don't set TREE_USED on VAR_DECL.\n-\t(tree_code_get_expression): Set TREE_USED for variable references\n-\tand function calls.\n-\n-2005-02-26  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* parse.y: Do comparisons as the type of the first expression.\n-\t* treetree.c (tree_code_get_integer_value): Build integer constants\n-\twith the proper type.\n-\n-2005-02-26  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* Make-lang.in: Remove commented out code.\n-\t* lang-specs.h: Always pass -dumpbase to tree1.\n-\n-2005-02-25  James A. Morrrison  <phython@gcc.gnu.org>\n-\n-\t* treelang.texi: Remove extra contribution notice.\n-\tSplit up some run-on sentences.  Document function parameters\n-\tas optional.  Indicate automatic variables can now be at any scope.\n-\tMention literals are only signed if they are preceded by a unary\n-\tplus or minus.  Clarify interoperability with C.\n-\n-2005-02-25  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* treelang.texi: Fix whitespacing.\n-\n-2005-02-24  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\tPR other/19896\n-\t* treetree.c (tree_code_create_variable): Initialize DECL_EXTERNAL,\n-\tTREE_PUBLIC, and TREE_STATIC for var_decl to zero.  Don't call\n-\trest_of_decl_compilation on static variables.\n-\t(pushdecl): Put DECL_EXPRs into the current BIND_EXPR for automatic\n-\tvariables.\n-\n-2005-02-24  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\tPR other/19897\n-\t* parse.y: (function_prototype): Accept EXTERNAL_REFERENCE_STORAGE.\n-\tMove function parameters check from ...\n-\t(function): ...Here.  Update call to tree_code_create_function_initial.\n-\t(function_invocation): Use expressions_with_commas_opt instead of\n-\texpressions_with_commas.\n-\t(expressions_with_commas_opt): New rule.\n-\t* treetree.c (tree_code_create_function_prototype): Create PARM_DECLs\n-\tfor function parameters.\n-\t(tree_code_create_function_initial): Remove PARMS parameter.\n-\tDon't create PARM_DECLs for function parameters.\n-\t* treetree.h (tree_code_create_function_initial): Remove PARMS\n-\tparameter.\n-\n-2005-02-23  Kazu Hirata  <kazu@cs.umass.edu>\n-\n-\t* parse.y: Update copyright.\n-\n-2005-02-13  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* treetree.c (tree_lang_type_for_mode): Return NULL_TREE for all non\n-\tscalar integer types.\n-\n-2005-02-09  Richard Henderson  <rth@redhat.com>\n-\n-\t* treetree.c (treelang_init_decl_processing): Call\n-\tbuild_common_builtin_nodes.\n-\n-2005-02-06  Joseph S. Myers  <joseph@codesourcery.com>\n-\n-\t* treelang.texi: Don't use local treelang version number.  Don't\n-\tgive last update date.\n-\n-2005-02-01  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* lex.l: Undef LINEMAP_POSITION_FOR_COLUMN before defining it.\n-\n-2005-02-01  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* parse.y: Reformat comments.\n-\t* treetree.c: Likewise.\n-\t* treetree.h: Likewise.\n-\n-2004-10-24  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* treetree.c (tree_code_generate_return): Wrap param declaration in\n-\tENABLE_CHECKING.\n-\n-2004-10-05  Zack Weinberg  <zack@codesourcery.com>\n-\n-\t* parse.y: Add list of diagnostic messages to insulate\n-\ttranslation template from version of yacc/bison used to\n-\tcompile the grammar.\n-\n-2004-10-02  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\tPR other/17762\n-\t* lex.l: Include input.h and errors.h\n-\t(lineno): New variable.\n-\t(LINEMAP_POSITION_FOR_COLUMN): Define as noop when USE_MAPPED_LOCATION\n-\tis not defined.\n-\tSet column position with LINEMAP_POSITION_FOR_COLUMN.\n-\tUse error instead of fprintf.\n-\tSet input_location with the value returned by linemap_start_line when\n-\tUSE_MAPPED_LOCATION is defined.\n-\t(dump_lex_value): Use LOCATION_LINE.\n-\t* parse.y: Include errors.h.\n-\tUse error and warning instead of fprintf.\n-\t(return): Move exp to rule scope and always set to $2.  Test against\n-\texp instead of $2.\n-\t(init): Set $$ to $2.\n-\t(print_token): Use LOCATION_LINE.\n-\t* tree1.c (treelang_init): Call treelang_init_decl_processing last.\n-\tCall linemap_add to set input_filename when USE_MAPPED_LOCATION is\n-\tdefined.\n-\t(treelang_parse_file): Always start at line one.\n-\tRename input_filename to main_input_filename when USE_MAPPED_LOCATION is\n-\tdefined.\n-\tLeave main_input_filename when done parsing the input.\n-\t(insert_tree_name): Use error instead of fprintf.\n-\t* treetree.c (tree_code_get_expression): Wrap long line.\n-\t(tree_mark_addressable): Use %qD to print out DECLs.\n-\n-2004-10-02  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* parse.y: Use gcc_assert and gcc_unreachable instead of abort.\n-\t* tree1.c: Likewise.\n-\t* treetree.c: Likewise.\n-\n-2004-10-02  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* lex.l: Remove random whitespace.\n-\t* parse.y: Reformat copyright notice.  Indent declarations.\n-\tWrap long lines, unwrap short lines.\n-\t* tree1.c: Reformat copyright notice.  Wrap long lines.\n-\tRemove random whitespace.\n-\t(lookup_tree_name): Use LOCATION_LINE.\n-\t* treetree.c: Reformat copyright notice.  Wrap long lines.\n-\tRemove random whitespace.\n-\n-2004-10-01  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* parse.y (ELSE): Set tok to $1.\n-\t* treelang.texi: Wrap comments in @r{}.  Indent example comments.\n-\tUse gcc when refering to the command line or website.  Update function\n-\tdefinition.\n-\n-2004-10-01  Jan Hubicka  <jh@suse.cz>\n-\n-\t* treetree.c (treeland_expand_function): Update call of\n-\ttree_rest_of_compilation.\n-\n-2004-09-17  Jeffrey D. Oldham  <oldham@codesourcery.com>\n-\t    Zack Weinberg  <zack@codesourcery.com>\n-\n-\t* treetree.c: Update for new tree-class enumeration constants.\n-\n-2004-09-15  Zack Weinberg  <zack@codesourcery.com>\n-\n-\t* Make-lang.in (treelang-warn): Set to $(STRICT_WARN).\n-\n-2004-08-26  Nathan Sidwell  <nathan@codesourcery.com>\n-\n-\t* treetree.c (tree_code_get_integer_value): Fix build_int_cst call.\n-\n-2004-08-24  Nathan Sidwell  <nathan@codesourcery.com>\n-\n-\t* treelang/treetree.c (treelang_init_decl_processing): Adjust\n-\tbuild_common_tree_nodes call.\n-\n-2004-08-14  Nathan Sidwell  <nathan@codesourcery.com>\n-\n-\t* treetree.c (tree_code_get_integer_value): Use build_int_cst.\n-\n-2004-07-31  James A. Morrison  <phython@gcc.gnu.org>\n-\n-\t* Make-lang.in (TREE_BE_LIBS): Remove.\n-\t(tree1): Depend on BACKEND and LIBDEPS.  Use BACKEND and LIBS instead\n-\tof TREE_BE_LIBS.\n-\t* parse.y: Add variable_defs_opt before statements_opt.\n-\tUse tree_code_get_type instead of get_type_for_numeric_type.\n-\tReformat long lines.\n-\t(parameters_opt): New rule.\n-\t(function_prototype): Use parameters_opt.\n-\t(return): Remove calls to print_token in error cases.  Use VOID_TYPE.\n-\t(check_type_match): Use VOID_TYPE.\n-\t* lex.l (update_lineno_charno): Ensure INPUT_LINE starts at 1.\n-\t* tree1.c: Include version.h and cgraph.h\n-\t(treelang_parse_file): Call cgraph_finalize_compilation_unit and\n-\tcgraph_optimize.\n-\t* treelang.h (item): Remove extraneous GTY.\n-\t* treetree.h (get_type_for_numeric_type): Remove.\n-\t* treetree.c: Include tree-dump.h, tree-iterator.h, tree-gimple.h,\n-\tfunction.h, and cgraph.h.  Don't include rtl.h\n-\t(keep_level_p): Remove.\n-\t(tree_push_atomic_type_decl): Remove.\n-\t(get_type_for_numeric_type): Remove.\n-\t(tree_code_get_numeric_type): Remove.\n-\t(global_bindings_p): Make static.\n-\t(getdecls): Likewise.\n-\t(insert_block): Likewise.\n-\t(tree_code_if_start): Create a COND_EXPR and add it to the tree\n-\tinstead of creating rtl.\n-\t(tree_code_if_else): Create a BIND_EXPR if any variables were created\n-\tin the if statement.\n-\t(tree_code_end_if): Likewise.\n-\t(tree_code_create_function_prototype): Use tree_code_get_type.\n-\tDon't use SET_DECL_ASSEMBLER_NAME.\n-\t(tree_code_create_function_initial): Set DECL_ARTIFICIAL and\n-\tDECL_IGNORING_P on RESULT_DECL.  Use tree_code_get_type.  Don't call\n-\tlayout_decl on RESULT_DECL.  Don't call rtl expand functions.\n-\t(tree_code_create_function_wrapup): Don't call rtl expand functions.\n-\tCreate a BIND_EXPR for each function.  Dump original and gimplified\n-\tcopies of the function tree.  Gimplify function.\n-\t(tree_code_create_variable): Use tree_code_get_type.  Don't call\n-\tlayout_decl or expand_decl.  Fold CONVERT_EXPRs.\n-\t(tree_code_generate_return): Fold CONVERT_EXPRs and MODIFY_EXPRs.\n-\tAdd RETURN_EXPR to the current statement list.  Don't call rtl expand\n-\tfunctions.\n-\t(tree_code_output_expression_statement): Append CODE to current\n-\tstatement list.\n-\t(tree_code_get_expression): Fold expressions.  Build a pointer to\n-\ta FUNCTION_TYPE intead of the called functions return type.\n-\t(struct binding_level): Add statement list STMTS.\n-\t(getstmtlist): New Function.\n-\t(pushlevel): Make static.  Allocate an empty statement list.\n-\t(poplevel): Make static.  Don't clear BLOCK_NODE's BLOCK_VARS.\n-\tDon't use DECL_ASSEMBLER_NAME.\n-\t(tree_push_type_decl): Set TYPE_NAME of TYPE_NODE to ID.\n-\t(treelang_init_decl_processing): Define basic types after unused types.\n-\tDon't call tree_push_atomic_type_decl.\n-\t(builtin_function): Don't call make_decl_rtl.\n-\t(treelang_expand_function). New Function.\n-\n-2004-07-11  Joseph S. Myers  <jsm@polyomino.org.uk>\n-\n-\t* treetree.c (set_block): Remove.\n-\t(struct binding_level): Remove block_created_by_back_end.\n-\t(clear_binding_level): Likewise.\n-\t(tree_code_create_function_initial,\n-\ttree_code_create_function_wrapup): Call pushlevel and poplevel\n-\tdirectly rather than through hooks.\n-\t(poplevel): Don't handle block_created_by_back_end.\n-\n-2004-04-07  Richard Henderson  <rth@redhat.com>\n-\n-\t* treetree.c (tree_mark_addressable):  Don't put_var_into_stack.\n-\n-2004-03-31  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n-\n-\t* treetree.c (tree_lang_signed_or_unsigned_type): Use TYPE_UNSIGNED,\n-\tnot TREE_UNSIGNED.\n-\n-2004-03-21  Joseph S. Myers  <jsm@polyomino.org.uk>\n-\n-\t* treelang.texi: Update link to \"G++ and GCC\".\n-\n-2004-02-20  Richard Henderson  <rth@redhat.com>\n-\n-\t* Make-lang.in (treelang-warn): Add -Wno-variadic-macros.\n-\n-2004-01-30  Kelley Cook  <kcook@gcc.gnu.org>\n-\n-\t* Make-lang.in (doc/treelang.dvi): Use $(abs_docdir).\n-\n-2004-01-20  Kelley Cook  <kcook@gcc.gnu.org>\n-\n-\t* Make-lang.in: Replace $(docdir) with doc.\n-\t(treelang.info, treelang.srcinfo): New rules.\n-\t(treelang.man, treelang.man): Dummy entries.\n-\n-2004-01-15  Kelley Cook  <kcook@gcc.gnu.org>\n-\n-\t* Make-lang.in (TREE_GENERATED): Delete reference to $(parsedir).\n-\t(treelang/parse.o, treelang/lex.o): Look for sources in build\n-\tdirectory.  Use implicit rule.\n-\t(treelang/parse.c, treelang/parse.h treelang/lex.c): Always build in\n-\tdoc directory.\n-\t(treelang.srcextra): Copy above back to source directory if requested.\n-\n-2004-01-07  Zack Weinberg  <zack@codesourcery.com>\n-\n-\t* parse.y (yyerror): Mark the definition static.\n-\n-2003-12-04  James A. Morrison  <ja2morri@uwaterloo.ca>\n-\n-\t* lex.l: Add \\t as a whitespace character.\n-\t* treelang.texi (Lexical Syntax): Document a tab as whitespace.\n-\n-\t* treelang.texi (What is GNU Treelang?): Fix a typo.\n-\t(Lexical Syntax): Create an itemize list of keywords.  Add commas to\n-\tparagraph defining names.\n-\n-2003-11-26  Jason Merrill  <jason@redhat.com>\n-\n-\t* Make-lang.in (treelang.tags): Create TAGS.sub files in each\n-\tdirectory and TAGS files that include them for each front end.\n-\n-2003-11-21  Kelley Cook  <kcook@gcc.gnu.org>\n-\n-\t* .cvsignore: Delete.\n-\n-2003-11-20  Joseph S. Myers  <jsm@polyomino.org.uk>\n-\n-\t* Make-lang.in (treelang.extraclean): Delete.\n-\n-2003-11-20  Joseph S. Myers  <jsm@polyomino.org.uk>\n-\n-\t* Make-lang.in: Remove obsolete comment.\n-\n-2003-11-03  Kelley Cook  <kcook@gcc.gnu.org>\n-\n-\t* Make-lang.in (dvi): Move targets to $(docobjdir).\n-\t(treelang.dvi): Simplify rule and adjust target.\n-\t(treelang.info): Simplify rule.\n-\t(parse.o): Correct dependencies.\n-\t(TREE_EXE): Delete doubled suffix append.\n-\n-2003-10-21  Kelley Cook  <kcook@gcc.gnu.org>\n-\n-\t* Make-lang.in (treelang.o): Depend on $(parsedir)/treelang/parse.h.\n-\t(lex.o): Likewise.\n-\n-2003-10-21  Kelley Cook  <kcook@gcc.gnu.org>\n-\n-\t* Make-lang.in (parse.o): Honor $(parsedir).\n-\t(lex.o): Likewise.\n-\t(lex.c): Likewise\n-\t(parse.c, parse.h): Likewise.\n-\t($(docobjdir)/treelang.info): Replace $(srcdir)/doc with $(docdir).\n-\t(dvi): Likewise.\n-\n-2003-10-20  Mark Mitchell  <mark@codesourcery.com>\n-\n-\t* Make-lang.in ($(docobjdir)/treelang/treelang.info): Depend on\n-\tstmp-docobjdir.\n-\n-\t* Make-lang.in (info): Use docobjdir.\n-\t($(srcdir)/treelang/treelang.info): Replace with ...\n-\t($(docobjdir)/treelang/treelang.info): ... this.\n-\t(install-info): New target.\n-\n-2003-10-12  Andreas Jaeger  <aj@suse.de>\n-\n-\t* Make-lang.in (treelang.install-info): Remove reference to\n-\ttreelang.info.\n-\t(treelang.): Removed.\n-\n-2003-10-06  Mark Mitchell  <mark@codesourcery.com>\n-\n-\t* Make-lang.in (treelang.info): Replace with ...\n-\t(info): ... this.\n-\t* Make-lang.in (treelang.dvi): Replace with ...\n-\t(dvi): ... this.\n-\n-2003-09-21  Richard Henderson  <rth@redhat.com>\n-\n-\t* treetree.c: Revert.\n-\n-2003-09-21  Richard Henderson  <rth@redhat.com>\n-\n-\t* treetree.c: Update for DECL_SOURCE_LOCATION rename and\n-\tchange to const.\n-\n-2003-07-28  Andreas Jaeger  <aj@suse.de>\n-\n-\t* treetree.c: Convert remaining K&R prototypes to ISO C90.\n-\t* tree1.c: Likewise.\n-\t* parse.y: Likewise.\n-\t* tree-convert.c: Likewise.\n-\n-2003-07-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n-\n-\t* treetree.c: Remove unnecessary casts.\n-\n-2003-07-15  Neil Booth  <neil@daikokuya.co.uk>\n-\n-\t* lang-options.h: Remove.\n-\t* lang.opt: Document some options.  Remove --help.\n-\t* tree1.c (treelang_handle_option): Remove OPT__help case.\n-\n-2003-07-12  Andreas Jaeger  <aj@suse.de>\n-\n-\t* Make-lang.in (treelang/tree-convert.o): Depend on TM_H.\n-\n-2003-07-10  Neil Booth  <neil@daikokuya.co.uk>\n-\n-\t* Make-lang.in: Update.\n-\t* tree1.c: Don't include c-common.h.\n-\t(c_language): Remove.\n-\n-2003-07-10  Fergus Henderson  <fjh@cs.mu.oz.au>\n-\t    Steven Bosscher  <steven@gcc.gnu.org>\n-\n-\t* tree-convert.c: New file.\n-\t* treetree.c: Don't include c-tree.h.  Include target.h.\n-\t(struct lang_identifier, union lang_tree_node, struct lang_type,\n-\tstruct lang_function): New, minimal language-specific datastructs.\n-\t(tree_lang_truthvalue_conversion, tree_mark_addressable,\n-\ttree_lang_type_for_size, tree_lang_type_for_mode,\n-\ttree_lang_unsigned_type, tree_lang_signed_type,\n-\ttree_lang_signed_or_unsigned): New functions.\n-\t(LANG_HOOKS_*): Don't use C front end langhooks.  Use new functions.\n-\t(pushlevel, poplevel, global_bindings_p, insert_block, set_block,\n-\tpushdecl, getdecls, kept_level_p, tree_push_type_decl,\n-\ttree_push_atomic_type_decl): New functions.\n-\t(struct resword, struct reswords): Remove.\n-\t* Make-lang.in: Update.  Don't depend on C front end objects.\n-\t* config-lang.in: Likewise.\n-\n-2003-07-07  Nathan Sidwell  <nathan@codesourcery.com>\n-\n-\t* treelang/treetree.c (tree_code_if_start, tree_code_if_else,\n-\ttree_code_if_end, tree_code_create_function_initial,\n-\ttree_code_create_function_wrapup, tree_code_generate_return,\n-\ttree_code_output_expression_statement): Adjust emit_line_note\n-\tcalls.\n-\n-2003-07-04  H.J. Lu <hongjiu.lu@intel.com>\n-\n-\t* Make-lang.in: Replace PWD with PWD_COMMAND.\n-\n-2003-07-02  Neil Booth  <neil@daikokuya.co.uk>\n-\n-\t* tree1.c (treelang_init_options): Update prototype.\n-\t* treelang.h (treelang_init_options): Update prototype.\n-\n-2003-07-01  Neil Booth  <neil@daikokuya.co.uk>\n-\n-\t* Make-lang.in: Update.\n-\t* tree1.c: Include c-common.h.  Define c_language.\n-\n-2003-06-20  Nathan Sidwell  <nathan@codesourcery.com>\n-\n-\t* treetree.c (tree_code_create_function_wrapup): Adjust\n-\texpand_function_end call.\n-\n-2003-06-18  Nathan Sidwell  <nathan@codesourcery.com>\n-\n-\t* treetree.c (build_stmt): Remove VPARAMS.\n-\t(pedwarn_c99): Likewise.\n-\n-2003-06-15  Neil Booth  <neil@daikokuya.co.uk>\n-\n-\t* lang.opt: Declare Treelang.  Update.\n-\t* tree1.c (treelang_init_options): Update.\n-\n-2003-06-14  Nathan Sidwell  <nathan@codesourcery.com>\n-\n-\t* treetree.c (tree_code_create_function_initial): Adjust\n-\tinit_function_start call.\n-\n-2003-06-14  Neil Booth  <neil@daikokuya.co.uk>\n-\n-\t* Make-lang.in: Update to use options.c and options.h.\n-\t* tree1.c: Include options.h not t-options.h.\n-\t(treelang_init_options): New.\n-\t(treelang_handle_option): Abort on unrecognized switch.\n-\t* treetree.c (LANG_HOOKS_INIT_OPTIONS): Override.\n-\t* treetree.h (treelang_init_options): New.\n-\n-2003-06-12  Andreas Jaeger  <aj@suse.de>\n-\n-\t* treetree.c: Remove cl_options-count and cl_options.\n-\n-2003-06-11  Neil Booth  <neil@daikokuya.co.uk>\n-\n-\t* Make-lang.in: Update for option handling.\n-\t* lang.opt: New.\n-\t* tree1.c: Include opts.h and t-options.h.\n-\t(treelang_decode_option): Remove.\n-\t(treelang_handle_option): New.\n-\t* treetree.c (LANG_HOOKS_DECODE_OPTION): Remove.\n-\t(LANG_HOOKS_HANDLE_OPTION): Override.\n-\t* treetree.h (treelang_decode_option): Remove.\n-\t(treelang_handle_option): New.\n-\n-2003-06-08  Andreas Jaeger  <aj@suse.de>\n-\n-\t* Make-lang.in: Update.\n-\t* treetree.c: Include opts.h. Define cl_options_count and cl_options.\n-\n-2003-06-08  Tim Josling  <tej@melbpc.org.au>\n-\n-\t* treetree.c (c_lex): Add fake routine to satisfy RS6000 backend.\n-\n-2003-06-05  Jan Hubicka  <jh@suse.cz>\n-\n-\t* Make-lang.in:  Add support for stageprofile and stagefeedback\n-\n-2003-05-21  Nathan Sidwell  <nathan@codesourcery.com>\n-\n-\t* treetree.c (reswords): Remove __bounded__, __unbounded__.\n-\n-2003-05-09  Tim Josling  <tej@melbpc.org.au>\n-\n-\t* Make-lang.in (TREE_BE_LIBS): Add C_TARGET_OBJS to object files\n-\tto link (needed by some front ends such as PPC).\n-\n-\t* treetree.c (tree_code_create_function_initial): Fix long line.\n-\tInitialize tree_code_int_size and tree_code_char_size to\n-\tmeaningful values.\n-\t(tree_code_get_numeric_type): Add check that size1 parameter is\n-\tvalid.\n-\n-\t* parse.y: Fix extra long lines in prototypes.\n-\n-\t* treelang.h: Fix extra long lines in macro definitions.\n-\n-2003-05-07  Zack Weinberg  <zack@codesourcery.com>\n-\n-\t* Make-lang.in: Set -Wno-error for treelang/lex.o.\n-\n-2003-05-06  Nathan Sidwell  <nathan@codesourcery.com>\n-\n-\t* Make-lang.in (treelang/tree1.o): Depends on input.h\n-\t(treelang/treetree.o, treelang/parse.o, treelang/lex.o): Likewise.\n-\t* treelang.h: #include input.h.\n-\t(in_fname): Remove.\n-\t(struct token_part): Remove lineno, add location.\n-\t* lex.l (next_tree_lineno): Remove.\n-\t(update_lineno_charno): Adjust.\n-\t(dump_lex_value): Adjust.\n-\t* parse.y (variable_def, function_prototype, function, statement,\n-\tif_statement, return, function_invocation, variable_ref): Adjust.\n-\t(print_token, yyerror, ensure_not_void): Adjust.\n-\ttree1.c (in_fname): Remove.\n-\t(treelang_init): Setup input_location.\n-\t(lookup_tree_name): Adjust.\n-\t(insert_tree_name): Adjust.\n-\t* treetree.c (tree_code_if_start): Replace filename and lineno\n-\tparms with loc. Adjust.\n-\t(tree_code_if_else, tree_code_if_end,\n-\ttree_code_create_function_prototype,\n-\ttree_code_create_function_initial,\n-\ttree_code_create_function_wrapup, tree_code_create_variable,\n-\ttree_code_output_expression_statement): Likewise.\n-\t* treetree.h (tree_code_if_start): Replace filename and lineno\n-\tparms with loc.\n-\t(tree_code_if_else, tree_code_if_end,\n-\ttree_code_create_function_prototype,\n-\ttree_code_create_function_initial,\n-\ttree_code_create_function_wrapup, tree_code_create_variable,\n-\ttree_code_output_expression_statement): Likewise.\n-\n-2003-05-01  Nathan Sidwell  <nathan@codesourcery.com>\n-\n-\t* tree1.c (treelang_init): Rename lineno to input_line.\n-\n-2003-04-30  Steven Bosscher  <steven@gcc.gnu.org>\n-\n-\t* parse.y (make_plus_expression): New function.\n-\t(expression production): Use make_plus_expression for PLUS,\n-\tMINUS, ASSIGN and EQUALS.\n-\t* tree1.c (treelang_decode_option): Don't fall through to\n-\toptions that start with a different character when an option\n-\twas not recognized.\n-\n-2003-04-30  Nathan Sidwell  <nathan@codesourcery.com>\n-\n-\t* Make-lang.in (parse.c): Reorder bison arguments for POSIXLY_CORRECT.\n-\t* treetree.c: Do not #include parse.h.\n-\n-2003-03-21  Andreas Jaeger  <aj@suse.de>\n-\n-\t* treetree.c (cpp_create_reader): Follow prototype change in\n-\tcpplib.h.\n-\n-2003-03-17  Andreas Jaeger  <aj@suse.de>\n-\n-\t* Make-lang.in (treelang.tags): Remove duplicate entry.\n-\n-2003-03-15  Andreas Jaeger  <aj@suse.de>\n-\n-\t* treetree.c (cpp_handle_option): Remove.\n-\n-2003-03-13  Andreas Jaeger  <aj@suse.de>\n-\n-\t* Make-lang.in (tree1$(exeext)): Fix previous patch.\n-\n-2003-03-12  Andreas Jaeger  <aj@suse.de>\n-\n-\t* Make-lang.in (tree1$(exeext)): Add c-cppbuiltin.o.\n-\n-2003-03-08  Neil Booth  <neil@daikokuya.co.uk>\n-\n-\t* tree1.c (in_fname): Fix type.\n-\t(treelang_init): Update prototype and use of in_fname.\n-\t* treelang.h (in_fname): Fix type.\n-\t* treetree.c (tree_code_if_start, tree_code_if_else,\n-\ttree_code_if_end, tree_code_create_function_prototype,\n-\ttree_code_create_function_initial, tree_code_create_funciton_wrapup,\n-\ttree_code_create_variable, tree_code_output_expression_statement)\n-\t: Fix prototypes and use of filenames.\n-\t* treetree.h: Similarly.\n-\n-2003-03-05  Andreas Jaeger  <aj@suse.de>\n-\n-\t* treetree.c (init_c_lex): Follow change to c-common.h.\n-\n-2003-03-04  Tom Tromey  <tromey@redhat.com>\n-\n-\t* Make-lang.in (treelang.tags): New target.\n-\n-2003-03-01  Tim Josling  <tej@melbpc.org.au>\n-\n-\tName clashes with rtl.h fixed.\n-\n-\t* lex.l: Tokens PLUS, MINUS, RETURN changed to tl_PLUS tl_MINUS\n-\ttl_RETURN.\n-\n-\t* parse.y: Ditto.\n-\n-2003-02-24  Tim Josling  <tej@melbpc.org.au>\n-\n-\t* parse.y (my_yylex): New - ensure lexer time is charged to\n-\tTV_LEX.\n-\t(yylex): redefine as invocation of my_yylex which then calls\n-\tflex-generated yylex.\n-\t(timevar.h): include.\n-\n-2003-02-23  Tim Josling  <tej@melbpc.org.au>\n-\n-\tFix garbage collection, add more error checking, force GC always.\n-\n-\t* Make-lang.in (treelang/tree1.o): Depend on treelang/treetree.h\n-\t(treelang/treetree.o): Depend on  treelang/parse.h\n-\n-\t* lex.l: include \"treetree.h\"\n-\n-\t* lex.l (update_yylval): Allocate string using get_string so GC\n-\tworks.\n-\n-\t* parse.y (function_prototype): Set category correctly so GC works.\n-\t(function): Set category in search so checking works.\n-\t(function_invocation): Ditto.\n-\t(variable_ref): Ditto.\n-\n-\t* tree1.c (lookup_tree_name): Call sanity_check for passed\n-\tproduction and associated token and for symbol table entries.\n-\n-\t* tree1.c (sanity_check): New, basic check that struct is valid.\n-\n-\t* treelang.h: Prototype for sanity_check.\n-\n-2003-01-27  Tim Josling  <tej@melbpc.org.au>\n-\n-\t* treetree.c (treelang_init_decl_processing): Change memory\n-\tallocation to use GC.\n-\n-2003-02-04  Joseph S. Myers  <jsm@polyomino.org.uk>\n-\n-\t* treelang.texi: Update to GFDL 1.2.\n-\n-2003-01-26  Michael Matz  <matz@suse.de>\n-\n-\t* Make-lang.in (treelang/parse.o-warn): Define as -Wno-error.\n-\n-2003-01-14  Andreas Jaeger  <aj@suse.de>\n-\n-\t* Make-lang.in (treelang.install-info): Depend only on info files\n-\tif BUILD_INFO is set.  Fix install rules.\n-\t(treelang.): New.\n-\n-2003-01-09  Christian Cornelssen  <ccorn@cs.tu-berlin.de>\n-\n-\t* Make-lang.in (treelang.install.common.done,\n-\ttreelang.install-info, treelang.uninstall): Prepend\n-\t$(DESTDIR) to destination paths in all (un)installation\n-\tcommands.\n-\n-2002-12-28  Joseph S. Myers  <jsm@polyomino.org.uk>\n-\n-\t* treelang.texi: Use @copying.\n-\n-2002-12-23  Joseph S. Myers  <jsm@polyomino.org.uk>\n-\n-\t* treelang.texi: Include gcc-common.texi.\n-\t* Make-lang.in ($(srcdir)/treelang/treelang.info, treelang.dvi):\n-\tDepend on gcc-common.texi.  Add other missing dependencies.\n-\t(treelang.dvi): Use texi2dvi.\n-\n-2002-12-22  Joseph S. Myers  <jsm@polyomino.org.uk>\n-\n-\t* treelang.texi: Use @ifnottex instead of @ifinfo.\n-\n-2002-11-30  Zack Weinberg  <zack@codesourcery.com>\n-\n-\t* lex.l: Move \"%{\" below copyright notice; get rid of \"/*\"\n-\tembedded in comment.  Do not #undef IN_GCC; do not include\n-\tstdio.h, memory.h, or ansidecl.h; do not include config.h twice.\n-\tDo include coretypes.h and tm.h.\n-\t* parse.y: Do not #undef IN_GCC, provide bogus definitions of tree\n-\tand rtx typedefs, or include stdio.h, stdlib.h, string.h, or\n-\tansidecl.h. Do include coretypes.h and tm.h.\n-\t* tree1.c: Do not include ansidecl.h, stdlib.h, unistd.h, ctype.h,\n-\tstdarg.h, string.h, or stdio.h.  Do include coretypes.h and tm.h.\n-\t* treetree.c: Do not include stdlib.h, unistd.h, safe-ctype.h,\n-\terrno.h. stdarg.h, limits.h, string.h, fcntl.h, getopt.h. stdio.h,\n-\tor ansidecl.h.  Do include coretypes.h and tm.h.\n-\t* Make-lang.in: Update dependencies.\n-\n-2002-09-09  Tim Josling  <tej@melbpc.org.au>\n-\n-\t* treetree.c (objc_is_id): New.\n-\n-2002-08-16  Tim Josling  <tej@melbpc.org.au>\n-\n-\tRemove variables and functions now defined elsewhere.\n-\n-\t* treetree.c (maybe_objc_comptypes): Remove.\n-\t(warn_format, warn_format_y2k, warn_format_extra_args,\n-\twarn_format_nonliteral, warn_format_security,\n-\twarn_format_zero_length): Remove.\n-\t(maybe_building_objc_message_expr): Remove.\n-\t(cpp_post_options): Remove.\n-\t(maybe_objc_check_decl): Remove.\n-\t(integer_types): Remove.\n-\n-\n-2002-08-13  Neil Booth  <neil@daikokuya.co.uk>\n-\n-\t* treelang.c: Remove cpp_post_options.\n-\n-2002-08-13  Tim Josling  <tej@melbpc.org.au>\n-\n-\t* parse.y: Provide dummy definition of rtx for use by config.h.\n-\t* Make-lang.in (treetree.o): Remove dependency on non-existent\n-\tgt-treelang-treelang.h.\n-\t(gt-treelang-treelang.h): Remove.\n-\n-2002-08-08  Nathan Sidwell  <nathan@codesourcery.com>\n-\n-\t* treelang/Make-lang.in (treelang.mostlyclean): Remove coverage files.\n-\n-2002-07-11  Tim Josling  <tej@melbpc.org.au>\n-\n-\tRemove front end hard coding from gengtype.c.\n-\n-\t* config-lang.in (gtfiles): Add files needed for this front\n-\tend.\n-\n-2002-07-09  Tim Josling  <tej@melbpc.org.au>\n-\n-\tSupport new attributes regime (Fix for PR c++/7099).\n-\n-\t* treetree.c (handle_format_attribute): Return NULL_TREE instead\n-\tof aborting.\n-\t(top level): Define LANG_HOOKS_COMMON_ATTRIBUTE_TABLE\n-\tLANG_HOOKS_FORMAT_ATTRIBUTE_TABLE\n-\tLANG_HOOKS_INSERT_DEFAULT_ATTRIBUTES as the standard C routines.\n-\n-2002-06-21  Andreas Jaeger  <aj@suse.de>\n-\n-\t* Make-lang.in (treelang/tree1.o, treelang/treetree.o,\n-\ttreelang/parse.o, treelang/lex.o): Add dependency on $(CONFIG_H).\n-\n-2002-06-19  Paolo Bonzini <bonzini@gnu.org>\n-\n-\t* lex.l (yyparse) Return AUTOMATIC for 'automatic' token rather\n-\tthan STATIC.\n-\n-2002-06-10  Tim Josling  <tej@melbpc.org.au>\n-\n-\tCleanup\n-\n-\t* Make-lang.in (check-treelang). Add. Remove direct dependency of\n-\t'check' on 'treelang.check' as redundant.\n-\n-\tPCH Garbage collection regime (gengtypes.c) phase 1.\n-\n-\t* Make-lang.in (treelang/tree1.o). Depend on gt-treelang-tree1.h\n-\tgt-treelang-treelang.h gtype-treelang.h.\n-\t(gt-treelang-tree1.h) Depend on s-gtype.\n-\t(gt-treelang-treelang.h) Depend on s-gtype.\n-\t(gtype-treelang.h) Depend on s-gtype.\n-\n-\t* config-lang.in (gtfiles): Define.\n-\n-\t* lex.l (main): Remove '#if 0' dead code.\n-\t(main): Move undef of IN_GCC so define of tree typedef works.\n-\t(all): Replace token and production by prod_token_parm_item.\n-\n-\t* parse.y\n-\t(all): Replace token and production by prod_token_parm_item.\n-\n-\t* tree1.c (main): Remove include of \"output.h\".\n-\t(symbol_table): Add GTY details.\n-\t(symbol_table_ggc): Remove.\n-\t(treelang_init): Remove root definitions for garbage collection.\n-\t(mark_production_used): Remove.\n-\t(mark_token_used): Remove.\n-\t(main, at end): include generated garage collection routines.\n-\n-\t* treelang.h (category_enum ): Add parameter_category.\n-\t(all): Replace token and production and parameters by union\n-\tprod_token_parm_item containing production_part, token_part,\n-\tparameter_part.\n-\t(STATIC_STORAGE AUTOMATIC_STORAGE EXTERNAL_REFERENCE_STORAGE\n-\tEXTERNAL_DEFINITION_STORAGE SIGNED_CHAR UNSIGNED_CHAR SIGNED_INT\n-\tUNSIGNED_INT VOID_TYPE EXP_PLUS EXP_REFERENCE EXP_ASSIGN\n-\tEXP_FUNCTION_INVOCATION EXP_MINUS EXP_EQUALS): Move here from\n-\ttreetree.h.\n-\n-\t* treetree.c\n-\t(tm_p.h): Do not include.\n-\t(ansidecl.h): Move include after config.h.\n-\t(treelang.h): Include it.\n-\t(ADDROOT): Remove.\n-\t(all): Replace token, production and parameter by prod_token_parm_item.\n-\t(tree_parameter_list): Move to treelang.h as part of\n-\tprod_token_parm_item.\n-\t(STATIC_STORAGE AUTOMATIC_STORAGE EXTERNAL_REFERENCE_STORAGE\n-\tEXTERNAL_DEFINITION_STORAGE SIGNED_CHAR UNSIGNED_CHAR SIGNED_INT\n-\tUNSIGNED_INT VOID_TYPE EXP_PLUS EXP_REFERENCE EXP_ASSIGN\n-\tEXP_FUNCTION_INVOCATION EXP_MINUS EXP_EQUALS): Move from here to\n-\ttreelang.h.\n-\n-2002-05-19  Tim Josling  <tej@melbpc.org.au>\n-\n-\t* treetree.c (warn_format_zero_length): Add.\n-\n-2002-05-14  Tim Josling  <tej@melbpc.org.au>\n-\n-\t* Make-lang.in: Fix build for .info files, add target for manpages.\n-\tA bug report and a suggested patch came from Magnus Fromreide\n-\t<magfr@lysator.liu.se>.\n-\n-2002-05-16  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n-\n-\t* Make-lang.in: Allow for PWDCMD to override hardcoded pwd.\n-\n-2002-05-11  Tim Josling  <tej@melbpc.org.au>\n-\n-\t* treetree.c: (cpp_define) Add.\n-\t(cpp_get_callbacks) Add.\n-\n-2002-05-07  Tim Josling  <tej@melbpc.org.au>\n-\n-\t* treetree.c: (cpp_get_options) Add.\n-\n-2002-05-06  Tim Josling  <tej@melbpc.org.au>\n-\n-\t* .cvsignore: Add.\n-\n-2002-05-05  Tim Josling  <tej@melbpc.org.au>\n-\n-\t* Updated for gcc3.2 experimental. Major changes throughout.\n-\n-2002-03-31  Tim Josling  <tej@melbpc.org.au>\n-\n-\t* Make-lang.in: Changes so build and check work more reliably\n-\n-2001-07-30  Tim Josling  <tej@melbpc.org.au>\n-\n-\t* root.texi: remove\n-\t* treelang.texi: updates based on feedback\n-\n-2001-06-11  Tim Josling  <tej@melbpc.org.au>\n-\n-\t* all (all) Revamp code to conform to GCC coding standards, fix\n-\ttypos in texi files.\n-\n-2001-05-11  Tim Josling  <tej@melbpc.org.au>\n-\n-\tCreate the new language."}, {"sha": "1b949040c08dd423b266b4445e95761519341855", "filename": "gcc/treelang/Make-lang.in", "status": "removed", "additions": 0, "deletions": 324, "changes": 324, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FMake-lang.in?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,324 +0,0 @@\n-# Top level makefile fragment for TREELANG For GCC. -*- makefile -*-\n-\n-#   Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005,\n-#   2006, 2007 Free Software Foundation, Inc.\n-\n-# This file is part of GCC.\n-\n-# GCC is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3, or (at your option)\n-# any later version.\n-\n-# GCC is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-\n-\n-# This file provides the language dependent support in the main Makefile.\n-# Each language makefile fragment must provide the following targets:\n-#\n-# foo.all.cross, foo.start.encap, foo.rest.encap,\n-# foo.install-common, foo.install-man, foo.install-info, foo.install-pdf,\n-# foo.info, foo.dvi, foo.pdf, foo.html, foo.uninstall,\n-# foo.mostlyclean, foo.clean, foo.distclean,\n-# foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4\n-#\n-# where `foo' is the name of the language.\n-#\n-# It should also provide rules for:\n-#\n-# - making any compiler driver (eg: gcc)\n-# - the compiler proper (eg: tree1)\n-# - define the names for selecting the language in LANGUAGES.\n-#\f\n-\n-## note program-prefix and program-suffix options are not supported\n-## just program_transform_name which is a sed script to transform the\n-## names\n-\n-TREELANGSED = sed\n-TREELANGSEDFLAGS = -n\n-\n-GCC_EXTRAS = -B./ -B$(build_tooldir)/bin/ -isystem $(build_tooldir)/include\n-\n-# ./xgcc is the just built compiler. See GCC_FOR_TARGET in the GCC Makefile.in.\n-# If this can't be found, you probably have not done a bootstrap of GCC,\n-# which you need to do.\n-\n-# GCC_FOR_TREELANG = ./xgcc $(GCC_EXTRAS)\n-\n-TREE_GENERATED = lex.c parse.c parse.h parse.output\n-# We need to use something other than treelang here because the directory\n-# is called treelang\n-TREE_EXES = gtreelang\n-\n-#strict warnings for treelang\n-treelang-warn = $(STRICT_WARN)\n-# bison emits some unused static arrays (yytoknum)\n-treelang/parse.o-warn = -Wno-error\n-# flex produces 'no previous prototype' warnings\n-treelang/lex.o-warn = -Wno-error\n-\n-#\f\n-# Define the names for selecting treelang in LANGUAGES.\n-\n-.phony: treelang\n-\n-treelang:treelang.done\n-\n-treelang.done: gtreelang$(exeext) tree1$(exeext)\n-\t$(STAMP) treelang.done\n-\n-# no preprocessor\n-\n-# core compiler\n-tree1$(exeext): treelang/tree1.o treelang/treetree.o treelang/tree-convert.o \\\n-\ttreelang/lex.o treelang/parse.o \\\n-\t$(BACKEND) $(LIBSDEPS) attribs.o\n-\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\\n-\ttreelang/tree1.o treelang/treetree.o treelang/tree-convert.o \\\n-\ttreelang/lex.o treelang/parse.o \\\n-\t$(BACKEND) $(LIBS) attribs.o $(GMPLIBS)\n-\n-# Create the compiler driver treelang.\n-gtreelang$(exeext): $(GCC_OBJS) version.o prefix.o intl.o $(EXTRA_GCC_OBJS) \\\n-  $(LIBDEPS) treelang/spec.o\n-\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ treelang/spec.o \\\n-\t  $(GCC_OBJS) version.o prefix.o intl.o $(EXTRA_GCC_OBJS) $(LIBS)\n-\n-\n-\n-#\f\n-# Compiling object files from source files.\n-\n-# object file makes\n-\n-treelang/tree1.o: treelang/tree1.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-  $(FLAGS_H) toplev.h $(GGC_H) $(TREE_H) $(DIAGNOSTIC_H) treelang/treelang.h \\\n-  input.h treelang/treetree.h options.h opts.h \\\n-  treelang/treetree.h gt-treelang-tree1.h gtype-treelang.h\n-\n-treelang/treetree.o: treelang/treetree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-  $(TM_H) $(TREE_H) $(FLAGS_H) output.h $(RTL_H) $(GGC_H) toplev.h \\\n-  $(VARRAY_H) $(LANGHOOKS_DEF_H) langhooks.h treelang/treelang.h input.h \\\n-  treelang/treetree.h treelang/parse.h $(TARGET_H)\n-\n-treelang/tree-convert.o: treelang/tree-convert.c $(CONFIG_H) $(SYSTEM_H) \\\n-  coretypes.h $(DIAGNOSTIC_H) $(TREE_H) $(FLAGS_H) toplev.h langhooks.h $(TM_H)\n-\n-treelang/spec.o: treelang/spec.c $(CONFIG_H) $(SYSTEM_H) \\\n-  coretypes.h $(DIAGNOSTIC_H) $(TREE_H) $(FLAGS_H) toplev.h langhooks.h $(TM_H)\n-\n-treelang/parse.o: treelang/parse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-  $(TM_H) $(DIAGNOSTIC_H) treelang/treelang.h input.h treelang/treetree.h \\\n-  toplev.h\n-\n-treelang/lex.o: treelang/lex.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-  $(TM_H) $(DIAGNOSTIC_H) $(TREE_H) treelang/treelang.h input.h \\\n-  treelang/parse.h toplev.h\n-\n-# generated files the files from lex and yacc are put into the source\n-# directory in case someone wants to build but does not have\n-# lex/yacc\n-\n-treelang.srcextra: treelang/parse.c treelang/parse.h treelang/lex.c\n-\t-cp -p $^ $(srcdir)/treelang\n-\n-treelang/lex.c: treelang/lex.l\n-\t-$(FLEX) $(FLEXFLAGS) -o$@ $<\n-\n-treelang/parse.c treelang/parse.h treelang/parse.output: treelang/parse.y\n-\t-$(BISON) $(BISONFLAGS) -v --defines --output=treelang/parse.c $<\n-\n-# -v\n-\n-#\f\n-# Build hooks:\n-\n-treelang.all.cross:\n-\t_error_not_here_yet - havent even thought about it - it may even work\n-\n-treelang.start.encap:\n-treelang.rest.encap:\n-treelang.man:\n-treelang.srcman:\n-\n-treelang.tags: force\n-\tcd $(srcdir)/treelang; etags -o TAGS.sub *.y *.l *.c *.h; \\\n-\tetags --include TAGS.sub --include ../TAGS.sub\n-\n-treelang.info: doc/treelang.info\n-\n-treelang.srcinfo: doc/treelang.info\n-\t-cp -p $^ $(srcdir)/doc\n-\n-treelang.dvi: doc/treelang.dvi\n-\n-TREELANG_PDFFILES = doc/treelang.pdf\n-\n-treelang.pdf: $(TREELANG_PDFFILES)\n-\n-TEXI_TREELANG_FILES = treelang/treelang.texi \\\n-\t $(gcc_docdir)/include/gcc-common.texi \\\n-\t $(gcc_docdir)/include/gpl.texi \\\n-\t $(gcc_docdir)/include/fdl.texi \\\n-\t $(gcc_docdir)/include/funding.texi \\\n-\t gcc-vers.texi\n-\n-doc/treelang.info: $(TEXI_TREELANG_FILES)\n-\t$(MAKEINFO) $(MAKEINFOFLAGS) -I $(gcc_docdir)/include -o $@ $<\n-\n-doc/treelang.dvi: $(TEXI_TREELANG_FILES)\n-\t$(TEXI2DVI) -I $(abs_docdir)/include -o $@ $<\n-\n-doc/treelang.pdf: $(TEXI_TREELANG_FILES)\n-\t$(TEXI2PDF) -I $(abs_docdir)/include -o $@ $<\n-\n-treelang.html: $(build_htmldir)/treelang/index.html\n-\n-$(build_htmldir)/treelang/index.html: $(TEXI_TREELANG_FILES)\n-\t$(mkinstalldirs) $(@D)\n-\trm -f $(@D)/*\n-\t$(TEXI2HTML) -I $(gcc_docdir)/include -I $(srcdir)/treelang -o $(@D) $<\n-\n-#\f\n-# Install hooks:\n-\n-# Install\n-.phony:treelang.install.common\n-.phony:treelang.install\n-\n-treelang.install treelang.install.common treelang.install-common: treelang.install.common.done\n-\n-treelang.install.common.done:  installdirs treelang.done\n-\tfor name in $(TREE_EXES); \\\n-\tdo \\\n-\t   if [ -f $$name ] ; then \\\n-\t    name2=\"`echo \\`basename $$name\\` | sed -e '$(program_transform_name)' `\"; \\\n-\t    rm -f $(DESTDIR)$(bindir)/$$name2$(exeext); \\\n-\t    echo $(INSTALL_PROGRAM) $$name$(exeext) $(DESTDIR)$(bindir)/$$name2$(exeext); \\\n-\t    $(INSTALL_PROGRAM) $$name$(exeext) $(DESTDIR)$(bindir)/$$name2$(exeext); \\\n-\t    chmod a+x $(DESTDIR)$(bindir)/$$name2$(exeext); \\\n-\t  fi ; \\\n-\tdone\n-\t$(STAMP) treelang.install.common.done\n-\n-# We might not be able to build the info files\n-treelang.install-info: $(DESTDIR)$(infodir)/treelang.info\n-\n-treelang.install-pdf: $(TREELANG_PDFFILES)\n-\t@$(NORMAL_INSTALL)\n-\ttest -z \"$(pdfdir)/gcc\" || $(mkinstalldirs) \"$(DESTDIR)$(pdfdir)/gcc\"\n-\t@list='$(TREELANG_PDFFILES)'; for p in $$list; do \\\n-\t  if test -f \"$$p\"; then d=; else d=\"$(srcdir)/\"; fi; \\\n-\t  f=$(pdf__strip_dir) \\\n-\t  echo \" $(INSTALL_DATA) '$$d$$p' '$(DESTDIR)$(pdfdir)/gcc/$$f'\"; \\\n-\t  $(INSTALL_DATA) \"$$d$$p\" \"$(DESTDIR)$(pdfdir)/gcc/$$f\"; \\\n-\tdone\n-\n-treelang.install-man:\n-\n-treelang.uninstall:\n-\tfor name in $(TREE_EXES); \\\n-\tdo \\\n-\t  echo $$name; \\\n-\t  name2=\"`echo $$name | sed -e '$(program_transform_name)' `\"; \\\n-\t  echo becomes $$name2; \\\n-\t  echo -rm -rf $(DESTDIR)$(bindir)/$$name2$(exeext); \\\n-\t  rm -rf $(DESTDIR)$(bindir)/$$name2$(exeext); \\\n-\tdone\n-\t-rm treelang.install.common.done\n-\n-#\f\n-# Clean hooks:\n-# A lot of the ancillary files are deleted by the main makefile.\n-# We just have to delete files specific to us.\n-\n-treelang.mostlyclean:\n-\tfor name in $(TREE_EXES); \\\n-\tdo \\\n-\t  echo deleting $$name; \\\n-\t  if [ -f treelang/$$name$(exeext) ] ; then \\\n-\t    rm -f treelang/$$name$(exeext); \\\n-\t  fi ; \\\n-\tdone\n-\t-rm -f treelang/*$(objext)\n-\t-rm -f treelang/*$(coverageexts)\n-\t-rm treelang.done\n-\n-\n-treelang.clean: treelang.mostlyclean\n-\n-treelang.distclean: treelang.clean\n-\t-rm -f treelang/config.status\n-\t-rm -f treelang/*.output\n-\n-treelang.maintainer-clean: treelang.distclean\n-\tfor name in $(TREE_GENERATED); \\\n-\tdo \\\n-\t  if [ -f $(srcdir)/treelang/$$name ] ; then \\\n-             echo deleting $(srcdir)/treelang/$$name; \\\n-\t     rm -f $(srcdir)/treelang/$$name; \\\n-\t  fi ; \\\n-\tdone\n-\t-rm -R $(srcdir)/treelang/*~\n-\n-\n-#\f\n-# Stage hooks:\n-# The main makefile has already created stage?/treelang.\n-\n-treelang.stage1: stage1-start\n-\t-mv treelang/*$(objext) stage1/treelang\n-treelang.stage2: stage2-start\n-\t-mv treelang/*$(objext) stage2/treelang\n-treelang.stage3: stage3-start\n-\t-mv treelang/*$(objext) stage3/treelang\n-treelang.stage4: stage4-start\n-\t-mv treelang/*$(objext) stage4/treelang\n-treelang.stageprofile: stageprofile-start\n-\t-mv treelang/*$(objext) stageprofile/treelang\n-treelang.stagefeedback: stagefeedback-start\n-\t-mv treelang/*$(objext) stagefeedback/treelang\n-#\f\n-# Maintenance hooks:\n-\n-# test hook\n-\n-check-treelang: treelang.check\n-\n-TESTSUITEDIR = testsuite\n-\n-treelang.check: $(TESTSUITEDIR)/site.exp\n-\t-mkdir testsuite/treelang\n-\n-# these three files are empty and it seems diff has trouble generating\n-# patch files for new empty files as required for cvs.\n-# STAMP does not cut it here as I need an empty file.\n-\t-rootme=`${PWD_COMMAND}`; export rootme; \\\n-\tsrcdir=`cd ${srcdir}; ${PWD_COMMAND}` ; export srcdir ; \\\n-\tcd testsuite; \\\n-\tEXPECT=${EXPECT} ; export EXPECT ; \\\n-\tif [ -f $${rootme}/../expect/expect ] ; then  \\\n-\t   TCL_LIBRARY=`cd .. ; cd ${srcdir}/../tcl/library ; ${PWD_COMMAND}` ; \\\n-\t   export TCL_LIBRARY ; fi ; \\\n-\tPATH=`cd ..;${PWD_COMMAND}`:$$PATH; export PATH; \\\n-\tgcc_extras=\"-B`cd ..;${PWD_COMMAND}` -B`cd ..;${PWD_COMMAND}`/treelang\"; export gcc_extras; \\\n-\t$(RUNTEST) --tool treelang $(RUNTESTFLAGS)\n-\n-# copy the output files from the current test to source ie say the new results are OK\n-treelang.check.fix: force\n-\tsrcdir=`cd ${srcdir}; ${PWD_COMMAND}` ; export srcdir ;\n-\t-cp testsuite/treelang/*.out* t\n-\t-cp testsuite/treelang/*runpgm* t\n-\t-rm -f t/*nofilename\n-\n-#\f\n-\n-config.status: treelang/config-lang.in"}, {"sha": "87dce1ae85ea6445c08521a1c87ade9487b2f15b", "filename": "gcc/treelang/README", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FREADME?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,19 +0,0 @@\n-This is a sample language front end for GCC.\n-\n-This is a replacement for 'toy' which had potential copyright issues,\n-but more importantly it did not exercise very much of GCC. The intent\n-of this language is that it should provide a cookbook of language\n-elements that you can use in any language front end.\n-\n-To this end, treelang is essentially an implementation of a subset of \n-the GCC back end 'tree' interface in syntax.\n-\n-Thanks to Richard Kenner, Joachim Nadler and many others for helping\n-me to understand enough of GCC to do this.\n-\n-Please note, the documentation is not a good model to use for GCC\n-front end documentation. \n-\n-Tim Josling\n-19 June 2002\n-"}, {"sha": "9c0c0c4f7f0adcaa3c395beeadfdb06ea0fbb258", "filename": "gcc/treelang/config-lang.in", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Fconfig-lang.in?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,36 +0,0 @@\n-# Top level configure fragment for GNU C++.\n-# Copyright (C) 1994, 1995, 1997, 1998, 2000, 2001, 2002, 2007 Free Software Foundation, Inc.\n-\n-# This file is part of GCC.\n-\n-# GCC is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3, or (at your option)\n-# any later version.\n-\n-# GCC is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-\n-\n-# Configure looks for the existence of this file to auto-config each language.\n-# We define several parameters used by configure:\n-#\n-# language\t- name of language as it would appear in $(LANGUAGES)\n-# compilers\t- value to add to $(COMPILERS)\n-# diff_excludes\t- files to ignore when building diffs between two versions.\n-\n-language=\"treelang\"\n-\n-compilers=\"tree1\\$(exeext)\"\n-\n-diff_excludes=\"-x lex.c -x parse.c -x parse.h\"\n-headers=\n-build_by_default=\"no\"\n-\n-gtfiles=\"\\$(srcdir)/treelang/tree1.c \\$(srcdir)/treelang/treetree.c \\$(srcdir)/treelang/treelang.h\""}, {"sha": "4d9ae2bac7d0b9daa0010dad0814d8454c52e552", "filename": "gcc/treelang/lang-specs.h", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Flang-specs.h?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,38 +0,0 @@\n-/* Definitions for specs for TREELANG\n-\n-   The format of the specs file is documented in gcc.c\n-\n-   Copyright (C) 1995, 96-98, 1999, 2000, 2001, 2002, 2007 Free Software Foundation, Inc.\n-\n-   This file is part of GCC.\n-\n-   GCC is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3, or (at your option)\n-   any later version.\n-\n-   GCC is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with this program; see the file COPYING3.  If not see\n-   <http://www.gnu.org/licenses/>.  */\n-\n-/* \n-   This is the contribution to the `default_compilers' array in GCC.c for\n-   treelang.  \n-   \n-   This file must compile with 'traditional', so no ANSI string concatenations\n-   \n-*/\n-\n-{\".tree\", \"@treelang\", NULL, 0, 0},\n-{\".TREE\", \"@treelang\", NULL, 0, 0},\n-{\".tre\", \"@treelang\", NULL, 0, 0},\n-{\".TRE\", \"@treelang\", NULL, 0, 0},\n-{\"@treelang\",\n-    \"%{!E:tree1 %i %(cc1_options) %{J*} %{I*}\\\n-         %{!fsyntax-only:%(invoke_as)}}\", NULL , 0, 0\n-},"}, {"sha": "9b461d6b6146d91dc7280255dc980786b1ec0cf0", "filename": "gcc/treelang/lang.opt", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Flang.opt?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,42 +0,0 @@\n-; Options for the treelang front end.\n-; Copyright (C) 2003, 2007 Free Software Foundation, Inc.\n-;\n-; This file is part of GCC.\n-;\n-; GCC is free software; you can redistribute it and/or modify it under\n-; the terms of the GNU General Public License as published by the Free\n-; Software Foundation; either version 3, or (at your option) any later\n-; version.\n-; \n-; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-; for more details.\n-; \n-; You should have received a copy of the GNU General Public License\n-; along with GCC; see the file COPYING3.  If not see\n-; <http://www.gnu.org/licenses/>.\n-\n-\n-; See the GCC internals manual for a description of this file's format.\n-\n-; Please try to keep this file in ASCII collating order.\n-\n-Language\n-Treelang\n-\n-flexer-trace\n-Treelang\n-Trace lexical analysis\n-\n-fparser-trace\n-Treelang\n-Trace the parsing process\n-\n-v\n-Treelang\n-\n-y\n-Treelang\n-\n-; This comment is to ensure we retain the blank line above."}, {"sha": "86a81d783433e60d999978870c7f24e2c28ec545", "filename": "gcc/treelang/lex.l", "status": "removed", "additions": 0, "deletions": 292, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2Flex.l", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2Flex.l", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Flex.l?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,292 +0,0 @@\n-/* -*- c -*- = mode for emacs editor\n-\n-   TREELANG lexical analysis\n-\n-   ---------------------------------------------------------------------\n-\n-   Copyright (C) 1986, 87, 89, 92-96, 1997, 1999, 2000, 2001, 2002, 2003,\n-   2004, 2005, 2007, 2008 Free Software Foundation, Inc.\n-   \n-   This program is free software; you can redistribute it and/or modify it \n-   under the terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 3, or (at your option) any\n-   later version.\n-   \n-   This program is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-   \n-   You should have received a copy of the GNU General Public License\n-   along with this program; see the file COPYING3.  If not see\n-   <http://www.gnu.org/licenses/>.\n-   \n-   In other words, you are welcome to use, share and improve this program.\n-   You are forbidden to forbid anyone else to use, share and improve\n-   what you give them.   Help stamp out software-hoarding!  \n-   \n-   ---------------------------------------------------------------------\n-   \n-   Written by Tim Josling 1999-2001, based in part on other parts of\n-   the GCC compiler.  */\n-\n-%{\n-#include \"config.h\"\n-#include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"input.h\"\n-#include \"tree.h\"\n-\n-/* Token defs.  */\n-#include \"treelang.h\"\n-#include \"parse.h\"\n-#include \"treetree.h\"\n-#include \"toplev.h\"\n-\n-extern int option_lexer_trace;\n-\n-int yylex (void);\n-void update_yylval (int a); \n-\n-static int next_tree_charno = 1;\n-static int lineno = 1;\n- \n-static void update_lineno_charno (void);\n-static void dump_lex_value (int lexret);\n- \n-#define SAVE_RETURN(a) {update_yylval (a); if (option_lexer_trace)\\\n-   {fprintf (stderr, \"\\nlexer returning\"); dump_lex_value (a);} return a;}\n-#define NOT_RETURN(a) {update_yylval (a); if (option_lexer_trace)\\\n-   {fprintf (stderr, \"\\nlexer swallowing\"); dump_lex_value (a);}}\n-%}\n-\n-%option nostack\n-%option nounput\n-%option noyywrap\n-%option pointer\n-%option nodefault\n-\n-%%\n-\n- { \n-   /* ??? Should really allocate only what we need.  */\n-   yylval = my_malloc (sizeof (struct prod_token_parm_item));\n-   LINEMAP_POSITION_FOR_COLUMN (input_location, line_table,\n-\t\t\t\tnext_tree_charno);\n-   ((struct prod_token_parm_item *)yylval)->tp.tok.location = input_location;\n-   ((struct prod_token_parm_item *)yylval)->tp.tok.charno = next_tree_charno;\n- }\n-\n-[ \\n\\t]+ {\n-  update_lineno_charno ();\n-  NOT_RETURN (WHITESPACE);\n-}\n-  \n-\"//\".*  {\n-  /* Comment.  */\n-  update_lineno_charno ();\n-  NOT_RETURN (COMMENT);\n-}\n-   \n-\"{\" {\n-  update_lineno_charno ();\n-  SAVE_RETURN (LEFT_BRACE);\n-}\n-  \n-\"}\" {\n-  update_lineno_charno ();\n-  SAVE_RETURN (RIGHT_BRACE);\n-}\n-  \n-\"(\" {\n-  update_lineno_charno ();\n-  SAVE_RETURN (LEFT_PARENTHESIS);\n-}\n-  \n-\")\" {\n-  update_lineno_charno ();\n-  SAVE_RETURN (RIGHT_PARENTHESIS);\n-}\n-  \n-\",\" {\n-  update_lineno_charno ();\n-  SAVE_RETURN (COMMA);\n-}\n-  \n-\";\" {\n-  update_lineno_charno ();\n-  SAVE_RETURN (SEMICOLON);\n-}\n-  \n-\"+\" {\n-  update_lineno_charno ();\n-  SAVE_RETURN (tl_PLUS);\n-}\n-  \n-\"-\" {\n-  update_lineno_charno ();\n-  SAVE_RETURN (tl_MINUS);\n-}\n-  \n-\"=\" {\n-  update_lineno_charno ();\n-  SAVE_RETURN (ASSIGN);\n-}\n-  \n-\"==\" {\n-  update_lineno_charno ();\n-  SAVE_RETURN (EQUALS);\n-}\n-  \n-[+-]?[0-9]+ {\n-  update_lineno_charno ();\n-  SAVE_RETURN (INTEGER);\n-}\n-  \n-\"external_reference\" {\n-  update_lineno_charno ();\n-  SAVE_RETURN (EXTERNAL_REFERENCE);\n-}\n-  \n-\"external_definition\" {\n-  update_lineno_charno ();\n-  SAVE_RETURN (EXTERNAL_DEFINITION);\n-}\n-  \n-\"static\" {\n-  update_lineno_charno ();\n-  SAVE_RETURN (STATIC);\n-}\n-  \n-\"automatic\" {\n-  update_lineno_charno ();\n-  SAVE_RETURN (AUTOMATIC);\n-}\n-  \n-\"int\" {\n-  update_lineno_charno ();\n-  SAVE_RETURN (INT);\n-}\n-  \n-\"char\" {\n-  update_lineno_charno ();\n-  SAVE_RETURN (CHAR);\n-}\n-  \n-\"void\" {\n-  update_lineno_charno ();\n-  SAVE_RETURN (VOID);\n-}\n-  \n-\"unsigned\" {\n-  update_lineno_charno ();\n-  SAVE_RETURN (UNSIGNED);\n-}\n-  \n-\"return\" {\n-  update_lineno_charno ();\n-  SAVE_RETURN (tl_RETURN);\n-}\n-  \n-\"if\" {\n-  update_lineno_charno ();\n-  SAVE_RETURN (IF);\n-}\n-  \n-\"else\" {\n-  update_lineno_charno ();\n-  SAVE_RETURN (ELSE);\n-}\n-  \n-[A-Za-z_]+[A-Za-z_0-9]* {\n-  update_lineno_charno ();\n-  update_yylval (NAME); \n-  if (option_lexer_trace) \n-    {\n-      fprintf (stderr, \"\\nlexer returning\"); \n-      dump_lex_value (NAME);\n-    } \n-  return NAME;\n-}\n-  \n-[^\\n]  {\n-  update_lineno_charno ();\n-  error (\"%HUnrecognized character %qc.\", \n-\t &((struct prod_token_parm_item *)yylval)->tp.tok.location,\n-\t yytext[0]);\n-}\n-\n-%%\n-\n-/* \n-   Update line number (1-) and character number (1-).  Call this\n-   before processing the token.  */\n-\n-static void \n-update_lineno_charno (void)\n-{\n-   /* Update the values we send to caller in case we sometimes don't\n-      tell them about all the 'tokens' eg comments etc.  */\n-   int yyl;\n-   LINEMAP_POSITION_FOR_COLUMN (input_location, line_table,\n-\t\t\t\tnext_tree_charno);\n-   ((struct prod_token_parm_item *)yylval)->tp.tok.location = input_location;\n-   ((struct prod_token_parm_item *)yylval)->tp.tok.charno = next_tree_charno;\n-\n-   for ( yyl = 0; yyl < yyleng; ++yyl ) \n-      {\n-         if ( yytext[yyl] == '\\n' ) \n-            {\n-\t      source_location s = linemap_line_start (line_table, ++lineno,\n-\t\t\t\t\t\t      80);\n-\t      input_location = s;\n-\t      next_tree_charno = 1;\n-            } \n-         else \n-           next_tree_charno++;\n-      }\n-}\n-\n-/* Fill in the fields of yylval - the value of the token.  The token\n-   type is A.  */\n-void \n-update_yylval (int a)\n-{\n-  struct prod_token_parm_item * tok;\n-  tok = yylval;\n-  \n-  tok->category = token_category;\n-  tok->type = a;\n-  tok->tp.tok.length = yyleng;\n-  /* Have to copy yytext as it is just a ptr into the buffer at the\n-     moment.  */\n-  tok->tp.tok.chars = (const unsigned char *) get_string (yytext, yyleng);\n-}\n-\n-/* Trace the value LEXRET and the position and token details being\n-   returned by the lexical analyser.  */\n-\n-static void\n-dump_lex_value (int lexret) \n-{\n-  int ix;\n-\n-  fprintf (stderr, \" %d l:%d c:%d ln:%d text=\", lexret,\n-\t   LOCATION_LINE (((struct prod_token_parm_item *)\n-\t\t\t  yylval)->tp.tok.location),\n-\t   ((struct prod_token_parm_item *) yylval)->tp.tok.charno,\n-\t   ((struct prod_token_parm_item *) yylval)->tp.tok.length);\n-\n-  for (ix = 0; ix < yyleng; ix++) \n-    {\n-      fprintf (stderr, \"%c\", yytext[ix]);\n-    }\n-  fprintf (stderr, \" in hex:\");\n-  for (ix = 0; ix < yyleng; ix++) \n-    {\n-      fprintf (stderr, \" %2.2x\", yytext[ix]);\n-    }\n-  fprintf (stderr, \"\\n\");\n-}  \n-"}, {"sha": "65225205bd52e056d00a7f60a82d2bb875a1dfcc", "filename": "gcc/treelang/parse.y", "status": "removed", "additions": 0, "deletions": 988, "changes": 988, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Fparse.y?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,988 +0,0 @@\n-/* -*- c -*- emacs mode c */\n-/* TREELANG Compiler parser.\n-\n----------------------------------------------------------------------\n-\n-Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007\n-Free Software Foundation, Inc.\n-\n-This program is free software; you can redistribute it and/or modify it\n-under the terms of the GNU General Public License as published by the\n-Free Software Foundation; either version 3, or (at your option) any\n-later version.\n-\n-This program is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with this program; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.\n-\n-In other words, you are welcome to use, share and improve this program.\n-You are forbidden to forbid anyone else to use, share and improve\n-what you give them.   Help stamp out software-hoarding!\n-\n----------------------------------------------------------------------\n-\n-Written by Tim Josling 1999-2001, based in part on other parts of\n-the GCC compiler.  */\n-\n-/* Grammar Conflicts\n-   *****************\n-   There are no conflicts in this grammar.  Please keep it that way.  */\n-\n-%{\n-#include \"config.h\"\n-#include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"timevar.h\"\n-#include \"tree.h\"\n-\n-#include \"treelang.h\"\n-#include \"treetree.h\"\n-#include \"toplev.h\"\n-\n-#define YYDEBUG 1\n-#define YYPRINT(file, type, value) print_token (file, type, value)\n-#define YYERROR_VERBOSE YES\n-\n-  /* My yylex routine used to intercept calls to flex generated code, to\n-     record lex time.  */\n-  int yylex (void);\n-  static inline int my_yylex (void);\n-\n-  /* Call lex, but ensure time is charged to TV_LEX.  */\n-  static inline int\n-    my_yylex (void)\n-    {\n-      int res;\n-      timevar_push (TV_LEX);\n-      res = yylex ();\n-      timevar_pop (TV_LEX);\n-      return res;\n-    }\n-#define yylex my_yylex\n-\n-  extern int option_parser_trace;\n-\n-  /* Local prototypes.  */\n-  static void yyerror (const char *error_message);\n-  int yyparse (void);\n-  void print_token (FILE *file, unsigned int type ATTRIBUTE_UNUSED,\n-\t\t    YYSTYPE value);\n-  static struct prod_token_parm_item *reverse_prod_list\n-    (struct prod_token_parm_item *old_first);\n-  static void ensure_not_void (unsigned int type,\n-\t\t\t       struct prod_token_parm_item *name);\n-  static int check_type_match (int type_num, struct prod_token_parm_item *exp);\n-  static int get_common_type (struct prod_token_parm_item *type1,\n-\t\t\t      struct prod_token_parm_item *type2);\n-  static struct prod_token_parm_item *make_integer_constant\n-    (struct prod_token_parm_item *value);\n-  static struct prod_token_parm_item *make_plus_expression\n-    (struct prod_token_parm_item *tok, struct prod_token_parm_item *op1,\n-     struct prod_token_parm_item *op2, int type_code, int prod_code);\n-  static void set_storage (struct prod_token_parm_item *prod);\n-\n-  /* File global variables.  */\n-  static struct prod_token_parm_item *current_function = NULL;\n-%}\n-\n-/* Not %raw - seems to have bugs.  */\n-%token_table\n-\n-/* Punctuation.  */\n-%token RIGHT_BRACE\n-%token LEFT_BRACE\n-%token RIGHT_SQUARE_BRACKET\n-%token LEFT_SQUARE_BRACKET\n-%token RIGHT_PARENTHESIS\n-%token LEFT_PARENTHESIS\n-%token SEMICOLON\n-%token ASTERISK\n-%token COMMA\n-%right EQUALS\n-%right ASSIGN\n-%left  tl_PLUS\n-%left  tl_MINUS\n-\n-/* Literals.  */\n-%token INTEGER\n-\n-/* Keywords.  */\n-%token IF\n-%token ELSE\n-%token tl_RETURN\n-%token CHAR\n-%token INT\n-%token UNSIGNED\n-%token VOID\n-%token TYPEDEF\n-%token NAME\n-%token STATIC\n-%token AUTOMATIC\n-%token EXTERNAL_DEFINITION\n-%token EXTERNAL_REFERENCE\n-\n-/* Tokens not passed to parser.  */\n-%token WHITESPACE\n-%token COMMENT\n-\n-/* Pseudo tokens - productions.  */\n-%token PROD_VARIABLE_NAME\n-%token PROD_TYPE_NAME\n-%token PROD_FUNCTION_NAME\n-%token PROD_INTEGER_CONSTANT\n-%token PROD_PLUS_EXPRESSION\n-%token PROD_MINUS_EXPRESSION\n-%token PROD_ASSIGN_EXPRESSION\n-%token PROD_VARIABLE_REFERENCE_EXPRESSION\n-%token PROD_PARAMETER\n-%token PROD_FUNCTION_INVOCATION\n-%expect 0\n-%%\n-\n-file:\n-/* Nil.  */ {\n-  /* Nothing to do.  */\n-}\n-|declarations {\n-  /* Nothing to do.  */\n-}\n-;\n-\n-\n-declarations:\n-declaration {\n-  /* Nothing to do.  */\n-}\n-| declarations declaration {\n-  /* Nothing to do.  */\n-}\n-;\n-\n-declaration:\n-variable_def {\n-  /* Nothing to do.  */\n-}\n-|function_prototype {\n-  /* Nothing to do.  */\n-}\n-|function {\n-  /* Nothing to do.  */\n-}\n-;\n-\n-variable_def:\n-storage typename NAME init_opt SEMICOLON {\n-  struct prod_token_parm_item *tok;\n-  struct prod_token_parm_item *prod;\n-  tok = $3;\n-  prod = make_production (PROD_VARIABLE_NAME, tok);\n-  SYMBOL_TABLE_NAME (prod) = tok;\n-  EXPRESSION_TYPE (prod) = $2;\n-  VAR_INIT (prod) = $4;\n-  NUMERIC_TYPE (prod) =\n-    NUMERIC_TYPE (( (struct prod_token_parm_item *)EXPRESSION_TYPE (prod)));\n-  ensure_not_void (NUMERIC_TYPE (prod), tok);\n-  if (insert_tree_name (prod))\n-    {\n-      YYERROR;\n-    }\n-  STORAGE_CLASS_TOKEN (prod) = $1;\n-  set_storage (prod);\n-\n-  if (VAR_INIT (prod))\n-    {\n-      gcc_assert (((struct prod_token_parm_item *)\n-\t\t   VAR_INIT (prod))->tp.pro.code);\n-      if (STORAGE_CLASS (prod) == EXTERNAL_REFERENCE_STORAGE)\n-\t{\n-\t  error(\"%Hexternal reference variable %q.*s has an initial value\",\n-\t\t&tok->tp.tok.location, tok->tp.tok.length, tok->tp.tok.chars);\n-\t  YYERROR;\n-\t  VAR_INIT (prod) = NULL;\n-\t}\n-\n-    }\n-\n-  prod->tp.pro.code = tree_code_create_variable\n-    (STORAGE_CLASS (prod),\n-     ((struct prod_token_parm_item *)SYMBOL_TABLE_NAME (prod))->tp.tok.chars,\n-     ((struct prod_token_parm_item *)SYMBOL_TABLE_NAME (prod))->tp.tok.length,\n-     NUMERIC_TYPE (prod),\n-     VAR_INIT (prod) ?\n-     ((struct prod_token_parm_item *)VAR_INIT (prod))->tp.pro.code : NULL,\n-     tok->tp.tok.location);\n-  gcc_assert (prod->tp.pro.code);\n-}\n-;\n-\n-storage:\n-STATIC\n-|AUTOMATIC\n-|EXTERNAL_DEFINITION\n-|EXTERNAL_REFERENCE\n-;\n-\n-parameter:\n-typename NAME {\n-  struct prod_token_parm_item *tok;\n-  struct prod_token_parm_item *prod;\n-  struct prod_token_parm_item *prod2;\n-  tok = $2;\n-  prod = make_production (PROD_VARIABLE_NAME, tok);\n-  SYMBOL_TABLE_NAME (prod) = $2;\n-  EXPRESSION_TYPE (prod) = $1;\n-  NUMERIC_TYPE (prod) =\n-    NUMERIC_TYPE (( (struct prod_token_parm_item *)EXPRESSION_TYPE (prod)));\n-  ensure_not_void (NUMERIC_TYPE (prod), tok);\n-  if (insert_tree_name (prod))\n-    {\n-      YYERROR;\n-    }\n-  prod2 = make_production (PROD_PARAMETER, tok);\n-  VARIABLE (prod2) = prod;\n-  $$ = prod2;\n-}\n-;\n-\n-function_prototype:\n-storage typename NAME LEFT_PARENTHESIS parameters_opt RIGHT_PARENTHESIS SEMICOLON {\n-  struct prod_token_parm_item *tok;\n-  struct prod_token_parm_item *prod;\n-  struct prod_token_parm_item *type;\n-  struct prod_token_parm_item *first_parms;\n-  struct prod_token_parm_item *last_parms;\n-  struct prod_token_parm_item *this_parms;\n-  struct prod_token_parm_item *this_parm;\n-  struct prod_token_parm_item *this_parm_var;\n-  tok = $3;\n-  prod = make_production (PROD_FUNCTION_NAME, $3);\n-  SYMBOL_TABLE_NAME (prod) = $3;\n-  EXPRESSION_TYPE (prod) = $2;\n-  NUMERIC_TYPE (prod) =\n-    NUMERIC_TYPE (( (struct prod_token_parm_item *)EXPRESSION_TYPE (prod)));\n-  PARAMETERS (prod) = reverse_prod_list ($5);\n-  insert_tree_name (prod);\n-  STORAGE_CLASS_TOKEN (prod) = $1;\n-  set_storage (prod);\n-  switch (STORAGE_CLASS (prod))\n-    {\n-    case STATIC_STORAGE:\n-    case EXTERNAL_DEFINITION_STORAGE:\n-    case EXTERNAL_REFERENCE_STORAGE:\n-      break;\n-\n-    case AUTOMATIC_STORAGE:\n-      error (\"%Hfunction %q.*s cannot be automatic\",\n-\t     &tok->tp.tok.location, tok->tp.tok.length, tok->tp.tok.chars);\n-      YYERROR;\n-      break;\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n-  type = EXPRESSION_TYPE (prod);\n-  /* Create a parameter list in a non-front end specific format.  */\n-  for (first_parms = NULL, last_parms = NULL, this_parm = PARAMETERS (prod);\n-       this_parm;\n-       this_parm = this_parm->tp.pro.next)\n-    {\n-      gcc_assert (this_parm->category == production_category);\n-      this_parm_var = VARIABLE (this_parm);\n-\n-      gcc_assert (this_parm_var);\n-      gcc_assert (this_parm_var->category == production_category);\n-      gcc_assert (this_parm_var->tp.pro.main_token);\n-\n-      this_parms = my_malloc (sizeof (struct prod_token_parm_item));\n-\n-      this_parms->tp.par.variable_name =\n-\tthis_parm_var->tp.pro.main_token->tp.tok.chars;\n-      this_parms->category = parameter_category;\n-      this_parms->type = NUMERIC_TYPE\n-        (( (struct prod_token_parm_item *)EXPRESSION_TYPE (this_parm_var)));\n-      if (last_parms)\n-        {\n-          last_parms->tp.par.next = this_parms;\n-          last_parms = this_parms;\n-        }\n-      else\n-        {\n-          first_parms = this_parms;\n-          last_parms = this_parms;\n-        }\n-      this_parms->tp.par.where_to_put_var_tree =\n-        & (((struct prod_token_parm_item *)VARIABLE (this_parm))->tp.pro.code);\n-    }\n-  FIRST_PARMS (prod) = first_parms;\n-\n-  prod->tp.pro.code =\n-    tree_code_create_function_prototype (tok->tp.tok.chars,\n-\t\t\t\t\t STORAGE_CLASS (prod),\n-\t\t\t\t\t NUMERIC_TYPE (type),\n-\t\t\t\t\t first_parms, tok->tp.tok.location);\n-\n-#ifdef ENABLE_CHECKING\n-  /* Check all the parameters have code.  */\n-  for (this_parm = PARAMETERS (prod);\n-       this_parm;\n-       this_parm = this_parm->tp.pro.next)\n-    {\n-      gcc_assert ((struct prod_token_parm_item *)VARIABLE (this_parm));\n-      gcc_assert (((struct prod_token_parm_item *)\n-\t\t   VARIABLE (this_parm))->tp.pro.code);\n-    }\n-#endif\n-}\n-;\n-\n-function:\n-NAME LEFT_BRACE {\n-  struct prod_token_parm_item *proto;\n-  struct prod_token_parm_item search_prod;\n-  struct prod_token_parm_item *tok;\n-  tok = $1;\n-  SYMBOL_TABLE_NAME ((&search_prod)) = tok;\n-  search_prod.category = token_category;\n-  current_function = proto = lookup_tree_name (&search_prod);\n-  if (!proto)\n-    {\n-      error (\"%Hno prototype found for %q.*s\", &tok->tp.tok.location,\n-\t     tok->tp.tok.length, tok->tp.tok.chars);\n-      YYERROR;\n-    }\n-\n-  gcc_assert (proto->tp.pro.code);\n-\n-  tree_code_create_function_initial (proto->tp.pro.code, tok->tp.tok.location);\n-}\n-\n-variable_defs_opt statements_opt RIGHT_BRACE {\n-  struct prod_token_parm_item *tok;\n-  tok = $1;\n-  tree_code_create_function_wrapup (tok->tp.tok.location);\n-  current_function = NULL;\n-}\n-;\n-\n-variable_defs_opt:\n-/* Nil.  */ {\n-  $$ = 0;\n-}\n-|variable_defs {\n-  $$ = $1;\n-}\n-;\n-\n-statements_opt:\n-/* Nil.  */ {\n-  $$ = 0;\n-}\n-|statements {\n-  $$ = $1;\n-}\n-;\n-\n-variable_defs:\n-variable_def {\n-  /* Nothing to do.  */\n-}\n-|variable_defs variable_def {\n-  /* Nothing to do.  */\n-}\n-;\n-\n-typename:\n-INT {\n-  struct prod_token_parm_item *tok;\n-  struct prod_token_parm_item *prod;\n-  tok = $1;\n-  prod = make_production (PROD_TYPE_NAME, tok);\n-  NUMERIC_TYPE (prod) = SIGNED_INT;\n-  prod->tp.pro.code = tree_code_get_type (NUMERIC_TYPE (prod));\n-  $$ = prod;\n-}\n-|UNSIGNED INT {\n-  struct prod_token_parm_item *tok;\n-  struct prod_token_parm_item *prod;\n-  tok = $1;\n-  prod = make_production (PROD_TYPE_NAME, tok);\n-  NUMERIC_TYPE (prod) = UNSIGNED_INT;\n-  prod->tp.pro.code = tree_code_get_type (NUMERIC_TYPE (prod));\n-  $$ = prod;\n-}\n-|CHAR {\n-  struct prod_token_parm_item *tok;\n-  struct prod_token_parm_item *prod;\n-  tok = $1;\n-  prod = make_production (PROD_TYPE_NAME, tok);\n-  NUMERIC_TYPE (prod) = SIGNED_CHAR;\n-  prod->tp.pro.code = tree_code_get_type (NUMERIC_TYPE (prod));\n-  $$ = prod;\n-}\n-|UNSIGNED CHAR {\n-  struct prod_token_parm_item *tok;\n-  struct prod_token_parm_item *prod;\n-  tok = $1;\n-  prod = make_production (PROD_TYPE_NAME, tok);\n-  NUMERIC_TYPE (prod) = UNSIGNED_CHAR;\n-  prod->tp.pro.code = tree_code_get_type (NUMERIC_TYPE (prod));\n-  $$ = prod;\n-}\n-|VOID {\n-  struct prod_token_parm_item *tok;\n-  struct prod_token_parm_item *prod;\n-  tok = $1;\n-  prod = make_production (PROD_TYPE_NAME, tok);\n-  NUMERIC_TYPE (prod) = VOID_TYPE;\n-  prod->tp.pro.code = tree_code_get_type (NUMERIC_TYPE (prod));\n-  $$ = prod;\n-}\n-;\n-\n-parameters_opt:\n-/* Nothing to do.  */ {\n- $$ = 0;\n-}\n-| parameters {\n- $$ = $1;\n-}\n-;\n-\n-parameters:\n-parameter {\n-  /* Nothing to do.  */\n-  $$ = $1;\n-}\n-|parameters COMMA parameter {\n-  struct prod_token_parm_item *prod1;\n-  prod1 = $3;\n-  prod1->tp.pro.next = $1; /* Insert in reverse order.  */\n-  $$ = prod1;\n-}\n-;\n-\n-statements:\n-statement {\n-  /* Nothing to do.  */\n-}\n-|statements statement {\n-  /* Nothing to do.  */\n-}\n-;\n-\n-statement:\n-expression SEMICOLON {\n-  struct prod_token_parm_item *exp;\n-  exp = $1;\n-  tree_code_output_expression_statement (exp->tp.pro.code,\n-\t\t\t\t\t exp->tp.pro.main_token->tp.tok.location);\n-}\n-|return SEMICOLON {\n-  /* Nothing to do.  */\n-}\n-|if_statement {\n-  /* Nothing to do.  */\n-}\n-;\n-\n-if_statement:\n-IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS {\n-  struct prod_token_parm_item *tok;\n-  struct prod_token_parm_item *exp;\n-  tok = $1;\n-  exp = $3;\n-  ensure_not_void (NUMERIC_TYPE (exp), exp->tp.pro.main_token);\n-  tree_code_if_start (exp->tp.pro.code, tok->tp.tok.location);\n-}\n-LEFT_BRACE variable_defs_opt statements_opt RIGHT_BRACE {\n-  /* Just let the statements flow.  */\n-}\n-ELSE {\n-  struct prod_token_parm_item *tok;\n-  tok = $1;\n-  tree_code_if_else (tok->tp.tok.location);\n-}\n-LEFT_BRACE variable_defs_opt statements_opt RIGHT_BRACE {\n-  struct prod_token_parm_item *tok;\n-  tok = $1;\n-  tree_code_if_end (tok->tp.tok.location);\n-}\n-;\n-\n-\n-return:\n-tl_RETURN expression_opt {\n-  struct prod_token_parm_item *type_prod;\n-  struct prod_token_parm_item *ret_tok = $1;\n-  struct prod_token_parm_item *exp = $2;\n-\n-  type_prod = EXPRESSION_TYPE (current_function);\n-  if (NUMERIC_TYPE (type_prod) == VOID_TYPE)\n-    if (exp == NULL)\n-      tree_code_generate_return (type_prod->tp.pro.code, NULL);\n-    else\n-      {\n-\twarning (0, \"%Hredundant expression in return\",\n-\t\t &ret_tok->tp.tok.location);\n-        tree_code_generate_return (type_prod->tp.pro.code, NULL);\n-       }\n-  else\n-    if (exp == NULL)\n-\terror (\"%Hexpression missing in return\", &ret_tok->tp.tok.location);\n-    else\n-      {\n-        /* Check same type.  */\n-        if (check_type_match (NUMERIC_TYPE (type_prod), exp))\n-          {\n-\t    gcc_assert (type_prod->tp.pro.code);\n-\t    gcc_assert (exp->tp.pro.code);\n-\n-            /* Generate the code. */\n-            tree_code_generate_return (type_prod->tp.pro.code,\n-\t\t\t\t       exp->tp.pro.code);\n-          }\n-      }\n-}\n-;\n-\n-expression_opt:\n-/* Nil.  */ {\n-  $$ = 0;\n-}\n-|expression {\n-  struct prod_token_parm_item *exp;\n-  exp = $1;\n-  gcc_assert (exp->tp.pro.code);\n-\n-  $$ = $1;\n-}\n-;\n-\n-expression:\n-INTEGER {\n-  $$ = make_integer_constant ($1);\n-}\n-|variable_ref {\n-  $$ = $1;\n-}\n-|expression tl_PLUS expression {\n-  struct prod_token_parm_item *tok = $2;\n-  struct prod_token_parm_item *op1 = $1;\n-  struct prod_token_parm_item *op2 = $3;\n-  int type_code = get_common_type (op1, op2);\n-  if (!type_code)\n-    YYERROR;\n-  $$ = make_plus_expression (tok, op1, op2, type_code, EXP_PLUS);\n-}\n-|expression tl_MINUS expression %prec tl_PLUS {\n-  struct prod_token_parm_item *tok = $2;\n-  struct prod_token_parm_item *op1 = $1;\n-  struct prod_token_parm_item *op2 = $3;\n-  int type_code = get_common_type (op1, op2);\n-  if (!type_code)\n-    YYERROR;\n-  $$ = make_plus_expression (tok, op1, op2, type_code, EXP_MINUS);\n-}\n-|expression EQUALS expression {\n-  struct prod_token_parm_item *tok = $2;\n-  struct prod_token_parm_item *op1 = $1;\n-  struct prod_token_parm_item *op2 = $3;\n-  int type_code = NUMERIC_TYPE (op1);\n-  if (!type_code)\n-    YYERROR;\n-  $$ = make_plus_expression\n-     (tok, op1, op2, type_code, EXP_EQUALS);\n-}\n-|variable_ref ASSIGN expression {\n-  struct prod_token_parm_item *tok = $2;\n-  struct prod_token_parm_item *op1 = $1;\n-  struct prod_token_parm_item *op2 = $3;\n-  int type_code = NUMERIC_TYPE (op1);\n-  if (!type_code)\n-    YYERROR;\n-  $$ = make_plus_expression\n-     (tok, op1, op2, type_code, EXP_ASSIGN);\n-}\n-|function_invocation {\n-  $$ = $1;\n-}\n-;\n-\n-function_invocation:\n-NAME LEFT_PARENTHESIS expressions_with_commas_opt RIGHT_PARENTHESIS {\n-  struct prod_token_parm_item *prod;\n-  struct prod_token_parm_item *tok;\n-  struct prod_token_parm_item search_prod;\n-  struct prod_token_parm_item *proto;\n-  struct prod_token_parm_item *exp;\n-  struct prod_token_parm_item *exp_proto;\n-  struct prod_token_parm_item *var;\n-  int exp_proto_count;\n-  int exp_count;\n-  tree parms;\n-  tree type;\n-\n-  tok = $1;\n-  prod = make_production (PROD_FUNCTION_INVOCATION, tok);\n-  SYMBOL_TABLE_NAME (prod) = tok;\n-  PARAMETERS (prod) = reverse_prod_list ($3);\n-  SYMBOL_TABLE_NAME ((&search_prod)) = tok;\n-  search_prod.category = token_category;\n-  proto = lookup_tree_name (&search_prod);\n-  if (!proto)\n-    {\n-      error (\"%Hfunction prototype not found for %q.*s\",\n-\t     &tok->tp.tok.location, tok->tp.tok.length, tok->tp.tok.chars);\n-      YYERROR;\n-    }\n-  EXPRESSION_TYPE (prod) = EXPRESSION_TYPE (proto);\n-  NUMERIC_TYPE (prod) = NUMERIC_TYPE (proto);\n-  /* Count the expressions and ensure they match the prototype.  */\n-  for (exp_proto_count = 0, exp_proto = PARAMETERS (proto);\n-       exp_proto; exp_proto = exp_proto->tp.pro.next)\n-    exp_proto_count++;\n-\n-  for (exp_count = 0, exp = PARAMETERS (prod); exp; exp = exp->tp.pro.next)\n-    exp_count++;\n-\n-  if (exp_count !=  exp_proto_count)\n-    {\n-      error (\"%Hexpression count mismatch %q.*s with prototype\",\n-\t     &tok->tp.tok.location, tok->tp.tok.length, tok->tp.tok.chars);\n-      YYERROR;\n-    }\n-  parms = tree_code_init_parameters ();\n-  for (exp_proto = PARAMETERS (proto), exp = PARAMETERS (prod);\n-       exp_proto;\n-       exp = exp->tp.pro.next, exp_proto = exp_proto->tp.pro.next)\n-    {\n-      gcc_assert (exp);\n-      gcc_assert (exp_proto);\n-      gcc_assert (exp->tp.pro.code);\n-\n-      var = VARIABLE (exp_proto);\n-\n-      gcc_assert (var);\n-      gcc_assert (var->tp.pro.code);\n-\n-      parms = tree_code_add_parameter (parms, var->tp.pro.code,\n-                                       exp->tp.pro.code);\n-    }\n-  type = tree_code_get_type (NUMERIC_TYPE (prod));\n-  prod->tp.pro.code = tree_code_get_expression (EXP_FUNCTION_INVOCATION, type,\n-                                                proto->tp.pro.code,\n-\t\t\t\t\t\tnreverse (parms),\n-                                                NULL, tok->tp.tok.location);\n-  $$ = prod;\n-}\n-;\n-\n-expressions_with_commas_opt:\n-/* Nil.  */ {\n-$$ = 0\n-}\n-|expressions_with_commas { $$ = $1 }\n-;\n-\n-expressions_with_commas:\n-expression {\n-  struct prod_token_parm_item *exp;\n-  exp = $1;\n-  ensure_not_void (NUMERIC_TYPE (exp), exp->tp.pro.main_token);\n-  $$ = $1;\n-}\n-|expressions_with_commas COMMA expression {\n-  struct prod_token_parm_item *exp;\n-  exp = $3;\n-  ensure_not_void (NUMERIC_TYPE (exp), exp->tp.pro.main_token);\n-  exp->tp.pro.next = $1; /* Reverse order.  */\n-  $$ = exp;\n-}\n-;\n-\n-variable_ref:\n-NAME {\n-  struct prod_token_parm_item search_prod;\n-  struct prod_token_parm_item *prod;\n-  struct prod_token_parm_item *symbol_table_entry;\n-  struct prod_token_parm_item *tok;\n-  tree type;\n-\n-  tok = $1;\n-  SYMBOL_TABLE_NAME ((&search_prod)) = tok;\n-  search_prod.category = token_category;\n-  symbol_table_entry = lookup_tree_name (&search_prod);\n-  if (!symbol_table_entry)\n-    {\n-      error (\"%Hvariable %q.*s not defined\",\n-\t     &tok->tp.tok.location, tok->tp.tok.length, tok->tp.tok.chars);\n-      YYERROR;\n-    }\n-\n-  prod = make_production (PROD_VARIABLE_REFERENCE_EXPRESSION, tok);\n-  NUMERIC_TYPE (prod) = NUMERIC_TYPE (symbol_table_entry);\n-  type = tree_code_get_type (NUMERIC_TYPE (prod));\n-  if (!NUMERIC_TYPE (prod))\n-    YYERROR;\n-  OP1 (prod) = $1;\n-\n-  prod->tp.pro.code =\n-    tree_code_get_expression (EXP_REFERENCE, type,\n-\t\t\t      symbol_table_entry->tp.pro.code, NULL, NULL,\n-\t\t\t      tok->tp.tok.location);\n-  $$ = prod;\n-}\n-;\n-\n-init_opt:\n-/* Nil.  */ {\n-  $$ = 0;\n-}\n-|init {\n-  /* Pass the initialization value up.  */\n-  $$ = $1;\n-};\n-\n-init:\n-ASSIGN init_element {\n-  $$ = $2;\n-}\n-;\n-\n-init_element:\n-INTEGER {\n-  $$ = make_integer_constant ($1);\n-}\n-;\n-\n-%%\n-\n-/* Print a token VALUE to file FILE.  Ignore TYPE which is the token\n-   type. */\n-\n-void\n-print_token (FILE *file, unsigned int type ATTRIBUTE_UNUSED, YYSTYPE value)\n-{\n-  struct prod_token_parm_item *tok;\n-  unsigned int  ix;\n-\n-  tok  =  value;\n-  fprintf (file, \"%d \\\"\", LOCATION_LINE (tok->tp.tok.location));\n-  for (ix  =  0; ix < tok->tp.tok.length; ix++)\n-    fprintf (file, \"%c\", tok->tp.tok.chars[ix]);\n-\n-  fprintf (file, \"\\\"\");\n-}\n-\n-/* Output a message ERROR_MESSAGE from the parser.  */\n-static void\n-yyerror (const char *error_message)\n-{\n-  struct prod_token_parm_item *tok;\n-\n-  tok = yylval;\n-  if (tok)\n-    error (\"%H%s\", &tok->tp.tok.location, error_message);\n-  else\n-    error (\"%s\", error_message);\n-}\n-\n-/* Reverse the order of a token list, linked by parse_next, old first\n-   token is OLD_FIRST.  */\n-\n-static struct prod_token_parm_item*\n-reverse_prod_list (struct prod_token_parm_item *old_first)\n-{\n-  struct prod_token_parm_item *current;\n-  struct prod_token_parm_item *next;\n-  struct prod_token_parm_item *prev = NULL;\n-\n-  current = old_first;\n-  prev = NULL;\n-\n-  while (current)\n-    {\n-      gcc_assert (current->category == production_category);\n-\n-      next = current->tp.pro.next;\n-      current->tp.pro.next = prev;\n-      prev = current;\n-      current = next;\n-    }\n-  return prev;\n-}\n-\n-/* Ensure TYPE is not VOID. Use NAME as the token for the error location.  */\n-\n-static void\n-ensure_not_void (unsigned int type, struct prod_token_parm_item* name)\n-{\n-  if (type == VOID_TYPE)\n-    error (\"%Htype must not be void in this context\",\n-\t   &name->tp.tok.location);\n-}\n-\n-/* Check TYPE1 and TYPE2 which are integral types.  Return the lowest\n-   common type (min is signed int).  */\n-\n-static int\n-get_common_type (struct prod_token_parm_item *type1,\n-\t\t struct prod_token_parm_item *type2)\n-{\n-  if (NUMERIC_TYPE (type1) == UNSIGNED_INT)\n-    return UNSIGNED_INT;\n-  if (NUMERIC_TYPE (type2) == UNSIGNED_INT)\n-    return UNSIGNED_INT;\n-\n-  return SIGNED_INT;\n-}\n-\n-/* Check type (TYPE_NUM) and expression (EXP) match.  Return the 1 if\n-   OK else 0.  Must be exact match - same name unless it is an\n-   integral type.  */\n-\n-static int\n-check_type_match (int type_num, struct prod_token_parm_item *exp)\n-{\n-  switch (type_num)\n-    {\n-    case SIGNED_INT:\n-    case UNSIGNED_INT:\n-    case SIGNED_CHAR:\n-    case UNSIGNED_CHAR:\n-      switch (NUMERIC_TYPE (exp))\n-        {\n-        case SIGNED_INT:\n-        case UNSIGNED_INT:\n-        case SIGNED_CHAR:\n-        case UNSIGNED_CHAR:\n-          return 1;\n-\n-        case VOID_TYPE:\n-        default:\n-          gcc_unreachable ();\n-        }\n-      break;\n-\n-    case VOID_TYPE:\n-    default:\n-      gcc_unreachable ();\n-\n-    }\n-}\n-\n-/* Make a production for an integer constant VALUE.  */\n-\n-static struct prod_token_parm_item *\n-make_integer_constant (struct prod_token_parm_item* value)\n-{\n-  struct prod_token_parm_item *tok;\n-  struct prod_token_parm_item *prod;\n-  tok = value;\n-  prod = make_production (PROD_INTEGER_CONSTANT, tok);\n-  if ((tok->tp.tok.chars[0] == (unsigned char)'-')\n-      || (tok->tp.tok.chars[0] == (unsigned char)'+'))\n-    NUMERIC_TYPE (prod) = SIGNED_INT;\n-  else\n-    NUMERIC_TYPE (prod) = UNSIGNED_INT;\n-  prod->tp.pro.code = tree_code_get_integer_value (tok->tp.tok.chars,\n-\t\t\t\t\t\t   tok->tp.tok.length);\n-  return prod;\n-}\n-\n-\n-/* Build a PROD_PLUS_EXPRESSION.  This is uses for PLUS, MINUS, ASSIGN\n-   and EQUALS expressions.  */\n-\n-static struct prod_token_parm_item *\n-make_plus_expression (struct prod_token_parm_item *tok,\n-\t\t      struct prod_token_parm_item *op1,\n-\t\t      struct prod_token_parm_item *op2,\n-\t\t      int type_code, int prod_code)\n-{\n-  struct prod_token_parm_item *prod;\n-  tree type;\n-\n-  ensure_not_void (NUMERIC_TYPE (op1), op1->tp.pro.main_token);\n-  ensure_not_void (NUMERIC_TYPE (op2), op2->tp.pro.main_token);\n-\n-  prod = make_production (PROD_PLUS_EXPRESSION, tok);\n-\n-  NUMERIC_TYPE (prod) = type_code;\n-  type = tree_code_get_type (type_code);\n-\n-  gcc_assert (type);\n-\n-  OP1 (prod) = op1;\n-  OP2 (prod) = op2;\n-\n-  prod->tp.pro.code = tree_code_get_expression (prod_code, type,\n-\t\t\t\t\t\top1->tp.pro.code,\n-\t\t\t\t\t\top2->tp.pro.code, NULL,\n-\t\t\t\t\t\ttok->tp.tok.location);\n-\n-  return prod;\n-}\n-\n-\n-/* Set STORAGE_CLASS in PROD according to CLASS_TOKEN.  */\n-\n-static void\n-set_storage (struct prod_token_parm_item *prod)\n-{\n-  struct prod_token_parm_item *stg_class;\n-  stg_class = STORAGE_CLASS_TOKEN (prod);\n-  switch (stg_class->type)\n-    {\n-    case STATIC:\n-      STORAGE_CLASS (prod) = STATIC_STORAGE;\n-      break;\n-\n-    case AUTOMATIC:\n-      STORAGE_CLASS (prod) = AUTOMATIC_STORAGE;\n-      break;\n-\n-    case EXTERNAL_DEFINITION:\n-      STORAGE_CLASS (prod) = EXTERNAL_DEFINITION_STORAGE;\n-      break;\n-\n-    case EXTERNAL_REFERENCE:\n-      STORAGE_CLASS (prod) = EXTERNAL_REFERENCE_STORAGE;\n-      break;\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-\n-/* Set parse trace.  */\n-\n-void\n-treelang_debug (void)\n-{\n-  if (option_parser_trace)\n-    yydebug = 1;\n-}\n-\n-#ifdef __XGETTEXT__\n-/* Depending on the version of Bison used to compile this grammar,\n-   it may issue generic diagnostics spelled \"syntax error\" or\n-   \"parse error\".  To prevent this from changing the translation\n-   template randomly, we list all the variants of this particular\n-   diagnostic here.  Translators: there is no fine distinction\n-   between diagnostics with \"syntax error\" in them, and diagnostics\n-   with \"parse error\" in them.  It's okay to give them both the same\n-   translation.  */\n-const char d1[] = N_(\"syntax error\");\n-const char d2[] = N_(\"parse error\");\n-const char d3[] = N_(\"syntax error; also virtual memory exhausted\");\n-const char d4[] = N_(\"parse error; also virtual memory exhausted\");\n-const char d5[] = N_(\"syntax error: cannot back up\");\n-const char d6[] = N_(\"parse error: cannot back up\");\n-#endif"}, {"sha": "604ec31a46f3419e0e79da4c3dc0622135612d62", "filename": "gcc/treelang/spec.c", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2Fspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2Fspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Fspec.c?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,60 +0,0 @@\n-/* Specific flags and argument handling of the Treelang front-end.\n-   Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n-\n-   This file is part of GCC.\n-\n-   GCC is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3, or (at your option)\n-   any later version.\n-\n-   GCC is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with GNU CC; see the file COPYING3.  If not see\n-   <http://www.gnu.org/licenses/>.  */\n-\n-#include \"config.h\"\n-#include \"system.h\"\n-#include \"gcc.h\"\n-\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-\n-void\n-lang_specific_driver (int *in_argc, const char *const **in_argv,\n-\t\t      int *in_added_libraries ATTRIBUTE_UNUSED)\n-{\n-  int argc = *in_argc, i;\n-  const char *const *argv = *in_argv;\n-\n-  for (i = 1; i < argc; ++i)\n-    {\n-      if (!strcmp (argv[i], \"-fversion\"))\t/* Really --version!! */\n-\t{\n-\t  printf (\"\\\n-GNU Treelang (GCC %s)\\n\\\n-Copyright (C) 2006 Free Software Foundation, Inc.\\n\\\n-\\n\\\n-GNU Treelang comes with NO WARRANTY, to the extent permitted by law.\\n\\\n-You may redistribute copies of GNU Treelang\\n\\\n-under the terms of the GNU General Public License.\\n\\\n-For more information about these matters, see the file named COPYING\\n\\\n-\", version_string);\n-\t  exit (0);\n-\t}\n-    }\n-}\n-\n-/* Called before linking.  Returns 0 on success and -1 on failure.  */\n-int\n-lang_specific_pre_link (void)\t/* Not used for Treelang.  */\n-{\n-  return 0;\n-}\n-\n-/* Number of extra output files that lang_specific_pre_link may generate.  */\n-int lang_specific_extra_outfiles = 0;\t/* Not used for Treelang.  */"}, {"sha": "f111d6d7425e9f76ba9753980812677a8a5b5c50", "filename": "gcc/treelang/tree-convert.c", "status": "removed", "additions": 0, "deletions": 107, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2Ftree-convert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2Ftree-convert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftree-convert.c?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,107 +0,0 @@\n-/* Language-level data type conversion for Treelang.\n-   This is a very slightly modified copy of c-convert.c.\n-   Copyright (C) 1987, 1988, 1991, 1998, 2002, 2003, 2007\n-   Free Software Foundation, Inc.\n-\n-   This file is part of GCC.\n-\n-   GCC is free software; you can redistribute it and/or modify it under\n-   the terms of the GNU General Public License as published by the Free\n-   Software Foundation; either version 3, or (at your option) any later\n-   version.\n-\n-   GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-   WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-   for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with GCC; see the file COPYING3.  If not see\n-   <http://www.gnu.org/licenses/>.  */\n-\n-\n-/* This file contains the functions for converting C expressions\n-   to different data types.  The only entry point is `convert'.\n-   Every language front end must have a `convert' function\n-   but what kind of conversions it does will depend on the language.  */\n-\n-#include \"config.h\"\n-#include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"diagnostic.h\"\n-#include \"tree.h\"\n-#include \"flags.h\"\n-#include \"convert.h\"\n-#include \"toplev.h\"\n-#include \"langhooks.h\"\n-\n-/* Change of width--truncation and extension of integers or reals--\n-   is represented with NOP_EXPR.  Proper functioning of many things\n-   assumes that no other conversions can be NOP_EXPRs.\n-\n-   Conversion between integer and pointer is represented with CONVERT_EXPR.\n-   Converting integer to real uses FLOAT_EXPR\n-   and real to integer uses FIX_TRUNC_EXPR.\n-\n-   Here is a list of all the functions that assume that widening and\n-   narrowing is always done with a NOP_EXPR:\n-     In convert.c, convert_to_integer.\n-     In c-typeck.c, build_binary_op (boolean ops), and\n-\tc_common_truthvalue_conversion.\n-     In expr.c: expand_expr, for operands of a MULT_EXPR.\n-     In fold-const.c: fold.\n-     In tree.c: get_narrower and get_unwidened.  */\n-\f\n-/* Create an expression whose value is that of EXPR,\n-   converted to type TYPE.  The TREE_TYPE of the value\n-   is always TYPE.  This function implements all reasonable\n-   conversions; callers should filter out those that are\n-   not permitted by the language being compiled.  */\n-\n-tree\n-convert (tree type, tree expr)\n-{\n-  tree e = expr;\n-  enum tree_code code = TREE_CODE (type);\n-\n-  if (type == TREE_TYPE (expr)\n-      || TREE_CODE (expr) == ERROR_MARK\n-      || code == ERROR_MARK || TREE_CODE (TREE_TYPE (expr)) == ERROR_MARK)\n-    return expr;\n-\n-  if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (TREE_TYPE (expr)))\n-    return fold_build1 (NOP_EXPR, type, expr);\n-  if (TREE_CODE (TREE_TYPE (expr)) == ERROR_MARK)\n-    return error_mark_node;\n-  if (TREE_CODE (TREE_TYPE (expr)) == VOID_TYPE)\n-    {\n-      error (\"void value not ignored as it ought to be\");\n-      return error_mark_node;\n-    }\n-  if (code == VOID_TYPE)\n-    return build1 (CONVERT_EXPR, type, e);\n-  if (code == INTEGER_TYPE || code == ENUMERAL_TYPE)\n-    return fold (convert_to_integer (type, e));\n-  if (code == BOOLEAN_TYPE)\n-    {\n-      tree t = expr;\n-      /* If it returns a NOP_EXPR, we must fold it here to avoid\n-\t infinite recursion between fold () and convert ().  */\n-      if (TREE_CODE (t) == NOP_EXPR)\n-\treturn fold_build1 (NOP_EXPR, type, TREE_OPERAND (t, 0));\n-      else\n-\treturn fold_build1 (NOP_EXPR, type, t);\n-    }\n-  if (code == POINTER_TYPE || code == REFERENCE_TYPE)\n-    return fold (convert_to_pointer (type, e));\n-  if (code == REAL_TYPE)\n-    return fold (convert_to_real (type, e));\n-  if (code == COMPLEX_TYPE)\n-    return fold (convert_to_complex (type, e));\n-  if (code == VECTOR_TYPE)\n-    return fold (convert_to_vector (type, e));\n-\n-  error (\"conversion to non-scalar type requested\");\n-  return error_mark_node;\n-}"}, {"sha": "e667a846eba09bd903b080e41eb5b81a862f5dff", "filename": "gcc/treelang/tree1.c", "status": "removed", "additions": 0, "deletions": 309, "changes": 309, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2Ftree1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2Ftree1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftree1.c?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,309 +0,0 @@\n-/* TREELANG Compiler almost main (tree1)\n-   Called by GCC's toplev.c\n-\n-   Copyright (C) 1986, 87, 89, 92-96, 1997, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2007, 2008  Free Software Foundation, Inc.\n-\n-   This program is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3 of the License, or\n-   (at your option) any later version.\n-\n-   This program is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with this program; see the file COPYING3.  If not, see\n-   <http://www.gnu.org/licenses/>.\n-\n-   In other words, you are welcome to use, share and improve this program.\n-   You are forbidden to forbid anyone else to use, share and improve\n-   what you give them.   Help stamp out software-hoarding!  \n-\n-   ---------------------------------------------------------------------------\n-\n-   Written by Tim Josling 1999, 2000, 2001, based in part on other\n-   parts of the GCC compiler.  */\n-\n-#include \"config.h\"\n-#include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"flags.h\"\n-#include \"toplev.h\"\n-#include \"version.h\"\n-\n-#include \"ggc.h\"\n-#include \"tree.h\"\n-#include \"cgraph.h\"\n-#include \"diagnostic.h\"\n-\n-#include \"treelang.h\"\n-#include \"treetree.h\"\n-#include \"opts.h\"\n-#include \"options.h\"\n-\n-extern int yyparse (void);\n-\n-/* Linked list of symbols - all must be unique in treelang.  */\n-\n-static GTY(()) struct prod_token_parm_item *symbol_table = NULL;\n-\n-/* Language for usage for messages.  */\n-\n-const char *const language_string = \"TREELANG - sample front end for GCC \";\n-\n-/* Local prototypes.  */\n-\n-void version (void);\n-\n-/* Global variables.  */\n-\n-extern struct cbl_tree_struct_parse_tree_top* parse_tree_top;\n-\n-/* \n-   Options. \n-*/\n-\n-/* Trace the parser.  */\n-unsigned int option_parser_trace = 0;\n-\n-/* Trace the lexical analysis.  */\n-\n-unsigned int option_lexer_trace = 0;\n-\n-/* Warning levels.  */\n-\n-/* Local variables.  */\n-\n-/* This is 1 if we have output the version string.  */\n-\n-static int version_done = 0;\n-\n-/* Variable nesting level.  */\n-\n-static unsigned int work_nesting_level = 0;\n-\n-/* Prepare to handle switches.  */\n-unsigned int\n-treelang_init_options (unsigned int argc ATTRIBUTE_UNUSED,\n-\t\t       const char **argv ATTRIBUTE_UNUSED)\n-{\n-  return CL_Treelang;\n-}\n-\n-/* Process a switch - called by opts.c.  */\n-int\n-treelang_handle_option (size_t scode, const char *arg ATTRIBUTE_UNUSED,\n-\t\t\tint value)\n-{\n-  enum opt_code code = (enum opt_code) scode;\n-\n-  switch (code)\n-    {\n-    case OPT_v:\n-      if (!version_done)\n-\t{\n-\t  fputs (language_string, stdout);\n-\t  fputs (pkgversion_string, stdout);\n-\t  fputs (version_string, stdout);\n-\t  fputs (\"\\n\", stdout);\n-\t  version_done = 1;\n-\t}\n-      break;\n-\n-    case OPT_y:\n-      option_lexer_trace = 1;\n-      option_parser_trace = 1;\n-      break;\n-\n-    case OPT_fparser_trace:\n-      option_parser_trace = value;\n-      break;\n-\n-    case OPT_flexer_trace:\n-      option_lexer_trace = value;\n-      break;\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n-\n-  return 1;\n-}\n-\n-/* Language dependent parser setup.  */\n-\n-bool\n-treelang_init (void)\n-{\n-  linemap_add (line_table, LC_ENTER, false, main_input_filename, 1);\n-\n-  /* This error will not happen from GCC as it will always create a\n-     fake input file.  */\n-  if (!input_filename || input_filename[0] == ' ' || !input_filename[0]) \n-    {\n-      if (!version_done)\n-        {\n-          fprintf (stderr, \"No input file specified, try --help for help\\n\");\n-          exit (1);\n-        }\n-\n-      return false;\n-    }\n-\n-  yyin = fopen (input_filename, \"r\");\n-  if (!yyin)\n-    {\n-      fprintf (stderr, \"Unable to open input file %s\\n\", input_filename);\n-      exit (1);\n-    }\n-\n-  linemap_add (line_table, LC_RENAME, false, \"<built-in>\", 1);\n-  linemap_line_start (line_table, 0, 1);\n-\n-  /* Init decls, etc.  */\n-  treelang_init_decl_processing ();\n-\n-  return true;\n-}\n-\n-/* Language dependent wrapup.  */\n-\n-void \n-treelang_finish (void)\n-{\n-  fclose (yyin);\n-}\n-\n-/* Parse a file.  Debug flag doesn't seem to work. */\n-\n-void\n-treelang_parse_file (int debug_flag ATTRIBUTE_UNUSED)\n-{\n-  source_location s;\n-  linemap_add (line_table, LC_RENAME, false, main_input_filename, 1);\n-  s = linemap_line_start (line_table, 1, 80);\n-  input_location = s;\n-\n-  treelang_debug ();\n-  yyparse ();\n-  cgraph_finalize_compilation_unit ();\n-  linemap_add (line_table, LC_LEAVE, false, NULL, 0);\n-  cgraph_optimize ();\n-}\n-\n-/* Allocate SIZE bytes and clear them.  Not to be used for strings\n-   which must go in stringpool.  */\n-\n-void *\n-my_malloc (size_t size)\n-{\n-  void *mem;\n-  mem = ggc_alloc (size);\n-  if (!mem)\n-    {\n-      fprintf (stderr, \"\\nOut of memory\\n\");\n-      abort ();\n-    }\n-  memset (mem, 0, size);\n-  return mem;\n-}\n-\n-/* Look up a name in PROD->SYMBOL_TABLE_NAME in the symbol table;\n-   return the symbol table entry from the symbol table if found there,\n-   else 0.  */\n-\n-struct prod_token_parm_item*\n-lookup_tree_name (struct prod_token_parm_item *prod)\n-{\n-  struct prod_token_parm_item *this;\n-  struct prod_token_parm_item *this_tok;\n-  struct prod_token_parm_item *tok;\n-\n-  sanity_check (prod);\n-  \n-  tok = SYMBOL_TABLE_NAME (prod);\n-  sanity_check (tok);\n-  \n-  for (this = symbol_table; this; this = this->tp.pro.next)\n-    {\n-      sanity_check (this);\n-      this_tok = this->tp.pro.main_token;\n-      sanity_check (this_tok);\n-      if (tok->tp.tok.length != this_tok->tp.tok.length) \n-        continue;\n-      if (memcmp (tok->tp.tok.chars, this_tok->tp.tok.chars,\n-\t\t  this_tok->tp.tok.length))\n-        continue;\n-\n-      if (option_parser_trace)\n-        fprintf (stderr, \"Found symbol %s (%i:%i) as %i \\n\",\n-\t\t tok->tp.tok.chars, LOCATION_LINE (tok->tp.tok.location),\n-\t\t tok->tp.tok.charno, NUMERIC_TYPE (this));\n-      return this;\n-    }\n-\n-  if (option_parser_trace)\n-    fprintf (stderr, \"Not found symbol %s (%i:%i) as %i \\n\",\n-\t     tok->tp.tok.chars, LOCATION_LINE (tok->tp.tok.location),\n-\t     tok->tp.tok.charno, tok->type);\n-  return NULL;\n-}\n-\n-/* Insert name PROD into the symbol table.  Return 1 if duplicate, 0 if OK.  */\n-\n-int\n-insert_tree_name (struct prod_token_parm_item *prod)\n-{\n-  struct prod_token_parm_item *tok;\n-  tok = SYMBOL_TABLE_NAME (prod);\n-  sanity_check (prod);\n-  if (lookup_tree_name (prod))\n-    {\n-      error (\"%HDuplicate name %q.*s.\", &tok->tp.tok.location,\n-\t     tok->tp.tok.length, tok->tp.tok.chars);\n-      return 1;\n-    }\n-  prod->tp.pro.next = symbol_table;\n-  NESTING_LEVEL (prod) = work_nesting_level;\n-  symbol_table = prod;\n-  return 0;\n-}\n-\n-/* Create a struct productions of type TYPE, main token MAIN_TOK.  */\n-\n-struct prod_token_parm_item *\n-make_production (int type, struct prod_token_parm_item *main_tok)\n-{\n-  struct prod_token_parm_item *prod;\n-  prod = my_malloc (sizeof (struct prod_token_parm_item));\n-  prod->category = production_category;\n-  prod->type = type;\n-  prod->tp.pro.main_token = main_tok;\n-  return prod;\n-} \n-\n-/* Abort if ITEM is not a valid structure, based on 'category'.  */\n-\n-void\n-sanity_check (struct prod_token_parm_item *item)\n-{\n-  switch (item->category)\n-    {\n-    case token_category:\n-    case production_category:\n-    case parameter_category:\n-      break;\n-      \n-    default:\n-      gcc_unreachable ();\n-    }\n-}  \n-\n-/* New garbage collection regime see gty.texi.  */\n-#include \"gt-treelang-tree1.h\"\n-/*#include \"gt-treelang-treelang.h\"*/\n-#include \"gtype-treelang.h\""}, {"sha": "aea030a425636bc8e4ca14acd5f788ba37d40336", "filename": "gcc/treelang/treelang.h", "status": "removed", "additions": 0, "deletions": 152, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2Ftreelang.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2Ftreelang.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreelang.h?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,152 +0,0 @@\n-/* TREELANG Compiler common definitions (treelang.h)\n-   \n-   Copyright (C) 1986, 87, 89, 92-96, 1997, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2007 Free Software Foundation, Inc.\n-   \n-   This program is free software; you can redistribute it and/or modify it\n-   under the terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 3, or (at your option) any\n-   later version.\n-   \n-   This program is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-   \n-   You should have received a copy of the GNU General Public License\n-   along with this program; see the file COPYING3.  If not see\n-   <http://www.gnu.org/licenses/>.\n-   \n-   In other words, you are welcome to use, share and improve this program.\n-   You are forbidden to forbid anyone else to use, share and improve\n-   what you give them.   Help stamp out software-hoarding!  \n-   \n-   ---------------------------------------------------------------------------\n-   \n-   Written by Tim Josling 1999, 2000, 2001, based in part on other\n-   parts of the GCC compiler.  */\n-\n-#include \"input.h\"\n-\n-/* Parse structure type.  */\n-enum category_enum \n-{ /* These values less likely to be there by chance unlike 0/1,\n-      make checks more meaningful */\n-  token_category = 111,\n-  production_category = 222,\n-  parameter_category = 333\n-};\n-\n-/* Input file FILE.  */\n-extern FILE* yyin;\n-\n-/* Forward references to satisfy mutually recursive definitions.  */\n-struct token_part;\n-struct production_part;\n-struct prod_token_parm_item;\n-typedef struct prod_token_parm_item item;\n-\n-/* A token from the input file.  */\n-\n-struct token_part GTY(())\n-{\n-  location_t location;\n-  unsigned int charno;\n-  unsigned int length; /* The value.  */\n-  const unsigned char *chars;\n-};\n-\n-/* Definitions for fields in production.  */\n-#define NESTING_LEVEL(a) a->tp.pro.info[0]  /* Level used for variable definitions.  */\n-/* Numeric type used in type definitions and expressions.  */\n-#define NUMERIC_TYPE(a)  a->tp.pro.info[1]  \n-#define SUB_COUNT 5\n-#define SYMBOL_TABLE_NAME(a) (a->tp.pro.sub[0]) /* Name token.  */\n-#define EXPRESSION_TYPE(a) (a->tp.pro.sub[1]) /* Type identifier.  */\n-#define OP1(a) (a->tp.pro.sub[2]) /* Exp operand1.  */\n-#define PARAMETERS(a) (a->tp.pro.sub[2]) /* Function parameters.  */\n-#define VARIABLE(a) (a->tp.pro.sub[2]) /* Parameter variable ptr.  */\n-#define VAR_INIT(a) (a->tp.pro.sub[2]) /* Variable init.  */\n-#define OP2(a) (a->tp.pro.sub[3]) /* Exp operand2.  */\n-/* Function parameters linked via struct tree_parameter_list.  */\n-#define FIRST_PARMS(a) (a->tp.pro.sub[3])\n-#define OP3(a) (a->tp.pro.sub[4]) /* Exp operand3.  */\n-#define STORAGE_CLASS_TOKEN(a) (a->tp.pro.sub[4]) /* Storage class token.  */\n-#define STORAGE_CLASS(a) a->tp.pro.flag1 /* Values in treetree.h.  */\n-\n-struct production_part GTY(())\n-{\n-  struct prod_token_parm_item *main_token; /* Main token for error msgs; variable name token.  */\n-\n-  unsigned int info[2]; /* Extra information.  */\n-\n-  struct prod_token_parm_item *sub[SUB_COUNT]; /* Sub productions or tokens.  */\n-  tree code; /* Back end hook for this item.  */\n-  struct prod_token_parm_item *next; /* Next in chains of various types.  */\n-\n-  unsigned int flag1:2;\n-  unsigned int flag2:1;\n-  unsigned int flag3:1;\n-  unsigned int flag4:1;\n-  unsigned int flag5:1;\n-  unsigned int flag6:1;\n-  unsigned int flag7:1;\n-\n-};\n-\n-/* Storage modes.  */\n-#define STATIC_STORAGE 0\n-#define AUTOMATIC_STORAGE 1\n-#define EXTERNAL_REFERENCE_STORAGE 2\n-#define EXTERNAL_DEFINITION_STORAGE 3\n-\n-/* Numeric types.  */\n-#define SIGNED_CHAR 1\n-#define UNSIGNED_CHAR 2\n-#define SIGNED_INT 3 \n-#define UNSIGNED_INT 4\n-#define VOID_TYPE 5\n-\n-/* Expression types.  */\n-#define EXP_PLUS 0 /* Addition expression.  */\n-#define EXP_REFERENCE 1 /* Variable reference.  */\n-#define EXP_ASSIGN 2 /* Assignment.  */\n-#define EXP_FUNCTION_INVOCATION 3  /* Call function.  */\n-#define EXP_MINUS 4  /* Subtraction.  */\n-#define EXP_EQUALS 5  /* Equality test.  */\n-\n-/* Parameter list passed to back end.  */\n-struct parameter_part GTY(())\n-{\n-  struct prod_token_parm_item *next; /* Next entry.  */\n-  const unsigned char *variable_name; /* Name. */\n-  tree * GTY ((skip)) where_to_put_var_tree; /* Where to save decl.  */\n-};\n-\n-/* A production or a token.  */\n-struct prod_token_parm_item GTY(())\n-{\n-  enum category_enum category; /* Token or production. */\n-  unsigned int type; /* Token or production type.  */\n-  union t_or_p\n-  {\n-    struct token_part GTY((tag (\"token_category\"))) tok;\n-    struct production_part GTY((tag (\"production_category\"))) pro;\n-    struct parameter_part GTY((tag (\"parameter_category\"))) par;\n-  } GTY((desc (\"((item *)&%1)->category\"))) tp;\n-};\n-\n-\n-/* For parser. Alternatively you can define it using %union (bison) or\n-   union. */\n-#define YYSTYPE void *\n-\n-void *my_malloc (size_t size);\n-int insert_tree_name (struct prod_token_parm_item *prod);\n-struct prod_token_parm_item *lookup_tree_name (struct prod_token_parm_item *prod);\n-struct prod_token_parm_item *make_production (int type, struct prod_token_parm_item *main_tok);\n-void mark_production_used (struct prod_token_parm_item *pp);\n-void mark_token_used (struct prod_token_parm_item *tt);\n-void treelang_debug (void);\n-\n-void sanity_check (struct prod_token_parm_item *item);"}, {"sha": "f9e17fb3e81511b5f35a7f2d37aeb7000e749d26", "filename": "gcc/treelang/treelang.texi", "status": "removed", "additions": 0, "deletions": 1310, "changes": 1310, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2Ftreelang.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2Ftreelang.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreelang.texi?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,1310 +0,0 @@\n-\\input texinfo  @c -*-texinfo-*-\n-\n-@c NOTE THIS IS NOT A GOOD EXAMPLE OF HOW TO DO A MANUAL. FIXME!!!\n-@c NOTE THIS IS NOT A GOOD EXAMPLE OF HOW TO DO A MANUAL. FIXME!!!\n-\n-\n-@c %**start of header\n-@setfilename treelang.info\n-\n-@include gcc-common.texi\n-\n-@set copyrights-treelang 1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005\n-\n-@set email-general gcc@@gcc.gnu.org\n-@set email-bugs gcc-bugs@@gcc.gnu.org or bug-gcc@@gnu.org\n-@set email-patches gcc-patches@@gcc.gnu.org \n-@set path-treelang gcc/gcc/treelang\n-\n-@ifset VERSION_PACKAGE\n-@set which-treelang @value{version-GCC} @value{VERSION_PACKAGE}\n-@end ifset\n-@ifclear VERSION_PACKAGE\n-@set which-treelang @value{version-GCC}\n-@end ifclear\n-@set which-GCC GCC\n-\n-@set email-josling tej@@melbpc.org.au\n-@set www-josling http://www.geocities.com/timjosling\n-\n-@c This tells @include'd files that they're part of the overall TREELANG doc\n-@c set.  (They might be part of a higher-level doc set too.)\n-@set DOC-TREELANG\n-\n-@c @setfilename usetreelang.info\n-@c @setfilename maintaintreelang.info\n-@c To produce the full manual, use the \"treelang.info\" setfilename, and\n-@c make sure the following do NOT begin with '@c' (and the @clear lines DO)\n-@set INTERNALS\n-@set USING\n-@c To produce a user-only manual, use the \"usetreelang.info\" setfilename, and\n-@c make sure the following does NOT begin with '@c':\n-@c @clear INTERNALS\n-@c To produce a maintainer-only manual, use the \"maintaintreelang.info\" setfilename,\n-@c and make sure the following does NOT begin with '@c':\n-@c @clear USING\n-\n-@ifset INTERNALS\n-@ifset USING\n-@settitle Using and Maintaining GNU Treelang\n-@end ifset\n-@end ifset\n-@c seems reasonable to assume at least one of INTERNALS or USING is set...\n-@ifclear INTERNALS\n-@settitle Using GNU Treelang\n-@end ifclear\n-@ifclear USING\n-@settitle Maintaining GNU Treelang\n-@end ifclear\n-@c then again, have some fun\n-@ifclear INTERNALS\n-@ifclear USING\n-@settitle Doing Very Little at all with GNU Treelang\n-@end ifclear\n-@end ifclear\n-\n-@syncodeindex fn cp\n-@syncodeindex vr cp\n-@c %**end of header\n-\n-@c Cause even numbered pages to be printed on the left hand side of\n-@c the page and odd numbered pages to be printed on the right hand\n-@c side of the page.  Using this, you can print on both sides of a\n-@c sheet of paper and have the text on the same part of the sheet.\n-\n-@c The text on right hand pages is pushed towards the right hand\n-@c margin and the text on left hand pages is pushed toward the left\n-@c hand margin.\n-@c (To provide the reverse effect, set bindingoffset to -0.75in.)\n-\n-@c @tex\n-@c \\global\\bindingoffset=0.75in\n-@c \\global\\normaloffset =0.75in\n-@c @end tex\n-\n-@copying\n-Copyright @copyright{} @value{copyrights-treelang} Free Software Foundation, Inc.\n-\n-Permission is granted to copy, distribute and/or modify this document\n-under the terms of the GNU Free Documentation License, Version 1.2 or\n-any later version published by the Free Software Foundation; with the\n-Invariant Sections being ``GNU General Public License'', the Front-Cover\n-texts being (a) (see below), and with the Back-Cover Texts being (b)\n-(see below).  A copy of the license is included in the section entitled\n-``GNU Free Documentation License''.\n-\n-(a) The FSF's Front-Cover Text is:\n-\n-     A GNU Manual\n-\n-(b) The FSF's Back-Cover Text is:\n-\n-     You have freedom to copy and modify this GNU Manual, like GNU\n-     software.  Copies published by the Free Software Foundation raise\n-     funds for GNU development.\n-@end copying\n-\n-@ifnottex\n-@dircategory Software development\n-@direntry\n-* treelang: (treelang).                  The GNU Treelang compiler.\n-@end direntry\n-@ifset INTERNALS\n-@ifset USING\n-This file documents the use and the internals of the GNU Treelang\n-(@code{treelang}) compiler.  At the moment this manual is not\n-incorporated into the main GCC manual as it is incomplete.  It\n-corresponds to the @value{which-treelang} version of @code{treelang}.\n-@end ifset\n-@end ifset\n-@ifclear USING\n-This file documents the internals of the GNU Treelang (@code{treelang}) compiler.\n-It corresponds to the @value{which-treelang} version of @code{treelang}.\n-@end ifclear\n-@ifclear INTERNALS\n-This file documents the use of the GNU Treelang (@code{treelang}) compiler.\n-It corresponds to the @value{which-treelang} version of @code{treelang}.\n-@end ifclear\n-\n-Published by the Free Software Foundation\n-51 Franklin Street, Fifth Floor\n-Boston, MA 02110-1301 USA\n-\n-@insertcopying\n-@end ifnottex\n-\n-@setchapternewpage odd\n-@c @finalout\n-@titlepage\n-@ifset INTERNALS\n-@ifset USING\n-@title Using and Maintaining GNU Treelang\n-@end ifset\n-@end ifset\n-@ifclear INTERNALS\n-@title Using GNU Treelang\n-@end ifclear\n-@ifclear USING\n-@title Maintaining GNU Treelang\n-@end ifclear\n-@versionsubtitle\n-@author Tim Josling\n-@page\n-@vskip 0pt plus 1filll\n-Published by the Free Software Foundation @*\n-51 Franklin Street, Fifth Floor@*\n-Boston, MA 02110-1301, USA@*\n-@c Last printed ??ber, 19??.@*\n-@c Printed copies are available for $? each.@*\n-@c ISBN ???\n-@sp 1\n-@insertcopying\n-@end titlepage\n-@page\n-\n-@ifnottex\n-\n-@node Top, Copying,, (dir)\n-@top Introduction\n-@cindex Introduction\n-\n-@ifset INTERNALS\n-@ifset USING\n-This manual documents how to run, install and maintain @code{treelang}.\n-It also documents the features and incompatibilities in the @value{which-treelang}\n-version of @code{treelang}.\n-@end ifset\n-@end ifset\n-\n-@ifclear INTERNALS\n-This manual documents how to run and install @code{treelang}.\n-It also documents the features and incompatibilities in the @value{which-treelang}\n-version of @code{treelang}.\n-@end ifclear\n-@ifclear USING\n-This manual documents how to maintain @code{treelang}.\n-It also documents the features and incompatibilities in the @value{which-treelang}\n-version of @code{treelang}.\n-@end ifclear\n-\n-@end ifnottex\n-\n-@menu\n-* Copying::                     \n-* Contributors::                \n-* GNU Free Documentation License::                \n-* Funding::                     \n-* Getting Started::             \n-* What is GNU Treelang?::       \n-* Lexical Syntax::              \n-* Parsing Syntax::              \n-* Compiler Overview::           \n-* TREELANG and GCC::            \n-* Compiler::                    \n-* Other Languages::             \n-* treelang internals::          \n-* Open Questions::              \n-* Bugs::                        \n-* Service::                     \n-* Projects::                    \n-* Index::                       \n-\n-@detailmenu\n- --- The Detailed Node Listing ---\n-\n-Other Languages\n-\n-* Interoperating with C and C++::  \n-\n-treelang internals\n-\n-* treelang files::              \n-* treelang compiler interfaces::  \n-* Hints and tips::              \n-\n-treelang compiler interfaces\n-\n-* treelang driver::             \n-* treelang main compiler::      \n-\n-treelang main compiler\n-\n-* Interfacing to toplev.c::     \n-* Interfacing to the garbage collection::  \n-* Interfacing to the code generation code. ::  \n-\n-Reporting Bugs\n-\n-* Sending Patches::             \n-\n-@end detailmenu\n-@end menu\n-\n-@include gpl.texi\n-\n-@include fdl.texi\n-\n-@node Contributors\n-\n-@unnumbered Contributors to GNU Treelang\n-@cindex contributors\n-@cindex credits\n-\n-Treelang was based on 'toy' by Richard Kenner, and also uses code from\n-the GCC core code tree.  Tim Josling first created the language and\n-documentation, based on the GCC Fortran compiler's documentation\n-framework.  Treelang was updated to use the TreeSSA infrastructure by\n-James A. Morrison.\n-\n-@itemize @bullet\n-@item\n-The packaging and compiler portions of GNU Treelang are based largely\n-on the GCC compiler.\n-@xref{Contributors,,Contributors to GCC,GCC,Using and Maintaining GCC},\n-for more information.\n-\n-@item\n-There is no specific run-time library for treelang, other than the\n-standard C runtime.\n-\n-@item\n-It would have been difficult to build treelang without access to Joachim\n-Nadler's guide to writing a front end to GCC (written in German).  A\n-translation of this document into English is available via the\n-CobolForGCC project or via the documentation links from the GCC home\n-page @uref{http://gcc.gnu.org}.\n-@end itemize\n-\n-@include funding.texi\n-\n-@node Getting Started\n-@chapter Getting Started\n-@cindex getting started\n-@cindex new users\n-@cindex newbies\n-@cindex beginners\n-\n-Treelang is a sample language, useful only to help people understand how\n-to implement a new language front end to GCC.  It is not a useful\n-language in itself other than as an example or basis for building a new\n-language.  Therefore only language developers are likely to have an\n-interest in it.\n-\n-This manual assumes familiarity with GCC, which you can obtain by using\n-it and by reading the manuals @samp{Using the GNU Compiler Collection (GCC)}\n-and @samp{GNU Compiler Collection (GCC) Internals}.\n-\n-To install treelang, follow the GCC installation instructions, \n-taking care to ensure you specify treelang in the configure step by adding\n-treelang to the list of languages specified by @option{--enable-languages}, \n-e.g.@: @samp{--enable-languages=all,treelang}.\n-\n-If you're generally curious about the future of\n-@code{treelang}, see @ref{Projects}.\n-If you're curious about its past,\n-see @ref{Contributors}.\n-\n-To see a few of the questions maintainers of @code{treelang} have,\n-and that you might be able to answer,\n-see @ref{Open Questions}.\n-\n-@ifset USING\n-@node What is GNU Treelang?, Lexical Syntax, Getting Started, Top\n-@chapter What is GNU Treelang?\n-@cindex concepts, basic\n-@cindex basic concepts\n-\n-GNU Treelang, or @code{treelang}, is designed initially as a free\n-replacement for, or alternative to, the 'toy' language, but which is\n-amenable to inclusion within the GCC source tree. \n-\n-@code{treelang} is largely a cut down version of C, designed to showcase\n-the features of the GCC code generation back end.  Only those features\n-that are directly supported by the GCC code generation back end are\n-implemented.  Features are implemented in a manner which is easiest and\n-clearest to implement.  Not all or even most code generation back end\n-features are implemented.  The intention is to add features incrementally\n-until most features of the GCC back end are implemented in treelang.\n-\n-The main features missing are structures, arrays and pointers.\n-\n-A sample program follows:\n-\n-@smallexample\n-// @r{function prototypes}\n-// @r{function 'add' taking two ints and returning an int}\n-external_definition int add(int arg1, int arg2);\n-external_definition int subtract(int arg3, int arg4);\n-external_definition int first_nonzero(int arg5, int arg6);\n-external_definition int double_plus_one(int arg7);\n-\n-// @r{function definition}\n-add \n-@{\n-  // @r{return the sum of arg1 and arg2}\n-  return arg1 + arg2;\n-@}\n-\n-        \n-subtract \n-@{\n-  return arg3 - arg4;\n-@}\n-\n-double_plus_one\n-@{\n-  // @r{aaa is a variable, of type integer and allocated at the start of}\n-  // @r{the function}\n-  automatic int aaa;\n-  // @r{set aaa to the value returned from add, when passed arg7 and arg7 as}\n-  // @r{the two parameters}\n-  aaa=add(arg7, arg7);\n-  aaa=add(aaa, aaa);\n-  aaa=subtract(subtract(aaa, arg7), arg7) + 1;\n-  return aaa;\n-@}\n-\n-first_nonzero\n-@{\n-  // @r{C-like if statement}\n-  if (arg5)\n-    @{\n-      return arg5;\n-    @}\n-  else\n-    @{\n-    @}\n-  return arg6;\n-@}\n-@end smallexample\n-\n-@node Lexical Syntax, Parsing Syntax, What is GNU Treelang?, Top\n-@chapter Lexical Syntax\n-@cindex Lexical Syntax\n-\n-Treelang programs consist of whitespace, comments, keywords and names.\n-@itemize @bullet\n-\n-@item\n-Whitespace consists of the space character, a tab, and the end of line\n-character.  Line terminations are as defined by the\n-standard C library.  Whitespace is ignored except within comments,\n-and where it separates parts of the program.  In the example below, A and\n-B are two separate names separated by whitespace. \n-\n-@smallexample\n-A B\n-@end smallexample\n-\n-@item\n-Comments consist of @samp{//} followed by any characters up to the end\n-of the line.  C style comments (/* */) are not supported.  For example,\n-the assignment below is followed by a not very helpful comment.\n-\n-@smallexample\n-x = 1; // @r{Set X to 1}\n-@end smallexample\n-\n-@item\n-Keywords consist of any of the following reserved words or symbols:\n-\n-@itemize @bullet\n-@item @{\n-used to start the statements in a function\n-@item @}\n-used to end the statements in a function\n-@item (\n-start list of function arguments, or to change the precedence of operators in\n-an expression\n-@item )\n-end list or prioritized operators in expression\n-@item ,\n-used to separate parameters in a function prototype or in a function call \n-@item ;\n-used to end a statement\n-@item +\n-addition, or unary plus for signed literals\n-@item - \n-subtraction, or unary minus for signed literals\n-@item = \n-assignment\n-@item ==\n-equality test\n-@item if\n-begin IF statement\n-@item else\n-begin 'else' portion of IF statement\n-@item static\n-indicate variable is permanent, or function has file scope only\n-@item automatic\n-indicate that variable is allocated for the life of the current scope\n-@item external_reference\n-indicate that variable or function is defined in another file\n-@item external_definition\n-indicate that variable or function is to be accessible from other files\n-@item int\n-variable is an integer (same as C int) \n-@item char\n-variable is a character (same as C char)\n-@item unsigned\n-variable is unsigned. If this is not present, the variable is signed\n-@item return\n-start function return statement\n-@item void\n-used as function type to indicate function returns nothing\n-@end itemize\n-\n-\n-@item\n-Names consist of any letter or \"_\" followed by any number of letters,\n-numbers, or \"_\".  \"$\" is not allowed in a name.  All names must be globally\n-unique, i.e. may not be used twice in any context, and must\n-not be a keyword.  Names and keywords are case sensitive.  For example:\n-\n-@smallexample\n-a A _a a_ IF_X\n-@end smallexample\n-\n-are all different names.\n-\n-@end itemize\n-\n-@node Parsing Syntax, Compiler Overview, Lexical Syntax, Top\n-@chapter Parsing Syntax\n-@cindex Parsing Syntax\n-\n-Declarations are built up from the lexical elements described above.  A\n-file may contain one of more declarations.\n-\n-@itemize @bullet\n-\n-@item\n-declaration: variable declaration OR function prototype OR function declaration\n-\n-@item\n-Function Prototype: storage type NAME ( optional_parameter_list )\n-\n-@smallexample\n-static int add (int a, int b)\n-@end smallexample\n-\n-@item\n-variable_declaration: storage type NAME initial;\n-\n-Example:\n-\n-@smallexample\n-int temp1 = 1;\n-@end smallexample\n-\n-A variable declaration can be outside a function, or at the start of a\n-function.\n-\n-@item\n-storage: automatic OR static OR external_reference OR external_definition\n-\n-This defines the scope, duration and visibility of a function or variable\n-\n-@enumerate 1\n-\n-@item \n-automatic: This means a variable is allocated at start of the current scope and\n-released when the current scope is exited.  This can only be used for variables\n-within functions.  It cannot be used for functions.\n-\n-@item \n-static: This means a variable is allocated at start of program and\n-remains allocated until the program as a whole ends.  For a function, it\n-means that the function is only visible within the current file.\n-\n-@item\n-external_definition: For a variable, which must be defined outside a\n-function, it means that the variable is visible from other files.  For a\n-function, it means that the function is visible from another file.\n-\n-@item\n-external_reference: For a variable, which must be defined outside a\n-function, it means that the variable is defined in another file.  For a\n-function, it means that the function is defined in another file.\n-\n-@end enumerate\n-\n-@item\n-type: int OR unsigned int OR char OR unsigned char OR void\n-\n-This defines the data type of a variable or the return type of a function.\n-\n-@enumerate a\n-\n-@item \n-int: The variable is a signed integer.  The function returns a signed integer.\n-\n-@item \n-unsigned int: The variable is an unsigned integer.  The function returns an unsigned integer.\n-\n-@item \n-char: The variable is a signed character.  The function returns a signed character.\n-\n-@item \n-unsigned char: The variable is an unsigned character.  The function returns an unsigned character.\n-\n-@end enumerate\n-\n-@item\n-parameter_list OR parameter [, parameter]...\n-\n-@item\n-parameter: variable_declaration ,\n-\n-The variable declarations must not have initializations.\n-\n-@item \n-initial: = value\n-\n-@item\n-value: integer_constant\n-\n-Values without a unary plus or minus are considered to be unsigned.\n-@smallexample\n-e.g.@: 1 +2 -3\n-@end smallexample\n-\n-@item\n-function_declaration: name @{ variable_declarations statements @}\n-\n-A function consists of the function name then the declarations (if any)\n-and statements (if any) within one pair of braces.\n-\n-The details of the function arguments come from the function\n-prototype.  The function prototype must precede the function declaration\n-in the file.\n-\n-@item\n-statement: if_statement OR expression_statement OR return_statement\n-\n-@item\n-if_statement: if ( expression ) @{ variable_declarations statements @}\n-else @{ variable_declarations statements @}\n-\n-The first lot of statements is executed if the expression is\n-nonzero.  Otherwise the second lot of statements is executed.  Either\n-list of statements may be empty, but both sets of braces and the else must be present. \n-\n-@smallexample\n-if (a==b) \n-@{\n-// @r{nothing}\n-@}\n-else\n-@{\n-a=b;\n-@}\n-@end smallexample\n-\n-@item\n-expression_statement: expression;\n-\n-The expression is executed, including any side effects.\n-\n-@item\n-return_statement: return expression_opt;\n-\n-Returns from the function. If the function is void, the expression must\n-be absent, and if the function is not void the expression must be\n-present.\n-\n-@item\n-expression: variable OR integer_constant OR expression + expression\n-OR expression - expression OR expression == expression OR ( expression )\n-OR variable = expression OR function_call\n-\n-An expression can be a constant or a variable reference or a\n-function_call.  Expressions can be combined as a sum of two expressions\n-or the difference of two expressions, or an equality test of two\n-expressions.  An assignment is also an expression.  Expressions and operator\n-precedence work as in C.\n-\n-@item\n-function_call: function_name ( optional_comma_separated_expressions )\n-\n-This invokes the function, passing to it the values of the expressions\n-as actual parameters.\n-\n-@end itemize\n-\n-@cindex compilers\n-@node Compiler Overview, TREELANG and GCC, Parsing Syntax, Top\n-@chapter Compiler Overview\n-treelang is run as part of the GCC compiler. \n-\n-@itemize @bullet\n-@cindex source code\n-@cindex file, source\n-@cindex code, source\n-@cindex source file\n-@item\n-It reads a user's program, stored in a file and containing instructions\n-written in the appropriate language (Treelang, C, and so on).  This file\n-contains @dfn{source code}.\n-\n-@cindex translation of user programs\n-@cindex machine code\n-@cindex code, machine\n-@cindex mistakes\n-@item\n-It translates the user's program into instructions a computer can carry\n-out more quickly than it takes to translate the instructions in the\n-first place.  These instructions are called @dfn{machine code}---code\n-designed to be efficiently translated and processed by a machine such as\n-a computer.  Humans usually aren't as good writing machine code as they\n-are at writing Treelang or C, because it is easy to make tiny mistakes\n-writing machine code.  When writing Treelang or C, it is easy to make\n-big mistakes. But you can only make one mistake, because the compiler\n-stops after it finds any problem.\n-\n-@cindex debugger\n-@cindex bugs, finding\n-@cindex @code{gdb}, command\n-@cindex commands, @code{gdb}\n-@item\n-It provides information in the generated machine code\n-that can make it easier to find bugs in the program\n-(using a debugging tool, called a @dfn{debugger},\n-such as @code{gdb}).\n-\n-@cindex libraries\n-@cindex linking\n-@cindex @code{ld} command\n-@cindex commands, @code{ld}\n-@item\n-It locates and gathers machine code already generated to perform actions\n-requested by statements in the user's program.  This machine code is\n-organized into @dfn{libraries} and is located and gathered during the\n-@dfn{link} phase of the compilation process.  (Linking often is thought\n-of as a separate step, because it can be directly invoked via the\n-@code{ld} command.  However, the @code{gcc} command, as with most\n-compiler commands, automatically performs the linking step by calling on\n-@code{ld} directly, unless asked to not do so by the user.)\n-\n-@cindex language, incorrect use of\n-@cindex incorrect use of language\n-@item\n-It attempts to diagnose cases where the user's program contains\n-incorrect usages of the language.  The @dfn{diagnostics} produced by the\n-compiler indicate the problem and the location in the user's source file\n-where the problem was first noticed.  The user can use this information\n-to locate and fix the problem.\n-\n-The compiler stops after the first error.  There are no plans to fix\n-this, ever, as it would vastly complicate the implementation of treelang\n-to little or no benefit.\n-\n-@cindex diagnostics, incorrect\n-@cindex incorrect diagnostics\n-@cindex error messages, incorrect\n-@cindex incorrect error messages\n-(Sometimes an incorrect usage of the language leads to a situation where\n-the compiler can not make any sense of what it reads---while a human\n-might be able to---and thus ends up complaining about an incorrect\n-``problem'' it encounters that, in fact, reflects a misunderstanding of\n-the programmer's intention.)\n-\n-@cindex warnings\n-@cindex questionable instructions\n-@item\n-There are a few warnings in treelang.  For example an unused static function\n-generate a warnings when -Wunused-function is specified, similarly an unused\n-static variable generates a warning when -Wunused-variable are specified.\n-The only treelang specific warning is a warning when an expression is in a\n-return statement for functions that return void.\n-@end itemize\n-\n-@cindex components of treelang\n-@cindex @code{treelang}, components of\n-@code{treelang} consists of several components:\n-\n-@cindex @code{gcc}, command\n-@cindex commands, @code{gcc}\n-@itemize @bullet\n-@item\n-A modified version of the @code{gcc} command, which also might be\n-installed as the system's @code{cc} command.\n-(In many cases, @code{cc} refers to the\n-system's ``native'' C compiler, which\n-might be a non-GNU compiler, or an older version\n-of @code{GCC} considered more stable or that is\n-used to build the operating system kernel.)\n-\n-@cindex @code{treelang}, command\n-@cindex commands, @code{treelang}\n-@item\n-The @code{treelang} command itself.\n-\n-@item\n-The @code{libc} run-time library.  This library contains the machine\n-code needed to support capabilities of the Treelang language that are\n-not directly provided by the machine code generated by the\n-@code{treelang} compilation phase.  This is the same library that the\n-main C compiler uses (libc).\n-\n-@cindex @code{tree1}, program\n-@cindex programs, @code{tree1}\n-@cindex assembler\n-@cindex @code{as} command\n-@cindex commands, @code{as}\n-@cindex assembly code\n-@cindex code, assembly\n-@item\n-The compiler itself, is internally named @code{tree1}.\n-\n-Note that @code{tree1} does not generate machine code directly---it\n-generates @dfn{assembly code} that is a more readable form\n-of machine code, leaving the conversion to actual machine code\n-to an @dfn{assembler}, usually named @code{as}.\n-@end itemize\n-\n-@code{GCC} is often thought of as ``the C compiler'' only,\n-but it does more than that.\n-Based on command-line options and the names given for files\n-on the command line, @code{gcc} determines which actions to perform, including\n-preprocessing, compiling (in a variety of possible languages), assembling,\n-and linking.\n-\n-@cindex driver, gcc command as\n-@cindex @code{gcc}, command as driver\n-@cindex executable file\n-@cindex files, executable\n-@cindex cc1 program\n-@cindex programs, cc1\n-@cindex preprocessor\n-@cindex cpp program\n-@cindex programs, cpp\n-For example, the command @samp{gcc foo.c} @dfn{drives} the file\n-@file{foo.c} through the preprocessor @code{cpp}, then\n-the C compiler (internally named\n-@code{cc1}), then the assembler (usually @code{as}), then the linker\n-(@code{ld}), producing an executable program named @file{a.out} (on\n-UNIX systems).\n-\n-@cindex treelang program\n-@cindex programs, treelang\n-As another example, the command @samp{gcc foo.tree} would do much the\n-same as @samp{gcc foo.c}, but instead of using the C compiler named\n-@code{cc1}, @code{gcc} would use the treelang compiler (named\n-@code{tree1}). However there is no preprocessor for treelang.\n-\n-@cindex @code{tree1}, program\n-@cindex programs, @code{tree1}\n-In a GNU Treelang installation, @code{gcc} recognizes Treelang source\n-files by name just like it does C and C++ source files.  It knows to use\n-the Treelang compiler named @code{tree1}, instead of @code{cc1} or\n-@code{cc1plus}, to compile Treelang files.  If a file's name ends in\n-@code{.tree} then GCC knows that the program is written in treelang.  You\n-can also manually override the language.\n-\n-@cindex @code{gcc}, not recognizing Treelang source\n-@cindex unrecognized file format\n-@cindex file format not recognized\n-Non-Treelang-related operation of @code{gcc} is generally\n-unaffected by installing the GNU Treelang version of @code{gcc}.\n-However, without the installed version of @code{gcc} being the\n-GNU Treelang version, @code{gcc} will not be able to compile\n-and link Treelang programs.\n-\n-@cindex printing version information\n-@cindex version information, printing\n-The command @samp{gcc -v x.tree} where @samp{x.tree} is a file which\n-must exist but whose contents are ignored, is a quick way to display\n-version information for the various programs used to compile a typical\n-Treelang source file. \n-\n-The @code{tree1} program represents most of what is unique to GNU\n-Treelang; @code{tree1} is a combination of two rather large chunks of\n-code.\n-\n-@cindex GCC Back End (GBE)\n-@cindex GBE\n-@cindex @code{GCC}, back end\n-@cindex back end, GCC\n-@cindex code generator\n-One chunk is the so-called @dfn{GNU Back End}, or GBE,\n-which knows how to generate fast code for a wide variety of processors.\n-The same GBE is used by the C, C++, and Treelang compiler programs @code{cc1},\n-@code{cc1plus}, and @code{tree1}, plus others.\n-Often the GBE is referred to as the ``GCC back end'' or\n-even just ``GCC''---in this manual, the term GBE is used\n-whenever the distinction is important.\n-\n-@cindex GNU Treelang Front End (TFE)\n-@cindex tree1\n-@cindex @code{treelang}, front end\n-@cindex front end, @code{treelang}\n-The other chunk of @code{tree1} is the majority of what is unique about\n-GNU Treelang---the code that knows how to interpret Treelang programs to\n-determine what they are intending to do, and then communicate that\n-knowledge to the GBE for actual compilation of those programs.  This\n-chunk is called the @dfn{Treelang Front End} (TFE).  The @code{cc1} and\n-@code{cc1plus} programs have their own front ends, for the C and C++\n-languages, respectively.  These fronts ends are responsible for\n-diagnosing incorrect usage of their respective languages by the programs\n-the process, and are responsible for most of the warnings about\n-questionable constructs as well.  (The GBE in principle handles\n-producing some warnings, like those concerning possible references to\n-undefined variables, but these warnings should not occur in treelang\n-programs as the front end is meant to pick them up first).\n-\n-Because so much is shared among the compilers for various languages,\n-much of the behavior and many of the user-selectable options for these\n-compilers are similar.\n-For example, diagnostics (error messages and\n-warnings) are similar in appearance; command-line\n-options like @samp{-Wall} have generally similar effects; and the quality\n-of generated code (in terms of speed and size) is roughly similar\n-(since that work is done by the shared GBE).\n-\n-@node TREELANG and GCC, Compiler, Compiler Overview, Top\n-@chapter Compile Treelang, C, or Other Programs\n-@cindex compiling programs\n-@cindex programs, compiling\n-\n-@cindex @code{gcc}, command\n-@cindex commands, @code{gcc}\n-A GNU Treelang installation includes a modified version of the @code{gcc}\n-command.\n-\n-In a non-Treelang installation, @code{gcc} recognizes C, C++,\n-and Objective-C source files.\n-\n-In a GNU Treelang installation, @code{gcc} also recognizes Treelang source\n-files and accepts Treelang-specific command-line options, plus some\n-command-line options that are designed to cater to Treelang users\n-but apply to other languages as well.\n-\n-@xref{G++ and GCC,,Programming Languages Supported by GCC,GCC,Using\n-the GNU Compiler Collection (GCC)},\n-for information on the way different languages are handled\n-by the GCC compiler (@code{gcc}).\n-\n-You can use this, combined with the output of the @samp{gcc -v x.tree}\n-command to get the options applicable to treelang.  Treelang programs\n-must end with the suffix @samp{.tree}.\n-\n-@cindex preprocessor\n-\n-Treelang programs are not by default run through the C\n-preprocessor by @code{gcc}. There is no reason why they cannot be run through the\n-preprocessor manually, but you would need to prevent the preprocessor\n-from generating #line directives, using the @samp{-P} option, otherwise\n-tree1 will not accept the input.\n-\n-@node Compiler, Other Languages, TREELANG and GCC, Top\n-@chapter The GNU Treelang Compiler\n-\n-The GNU Treelang compiler, @code{treelang}, supports programs written\n-in the GNU Treelang language.\n-\n-@node Other Languages, treelang internals, Compiler, Top\n-@chapter Other Languages\n-\n-@menu\n-* Interoperating with C and C++::  \n-@end menu\n-\n-@node Interoperating with C and C++,  , Other Languages, Other Languages\n-@section Tools and advice for interoperating with C and C++\n-\n-The output of treelang programs looks like C program code to the linker\n-and everybody else, so you should be able to freely mix treelang and C\n-(and C++) code, with one proviso.\n-\n-C promotes small integer types to 'int' when used as function parameters and \n-return values in non-prototyped functions.  Since treelang has no\n-non-prototyped functions, the treelang compiler does not do this.\n-\n-@ifset INTERNALS\n-@node treelang internals, Open Questions, Other Languages, Top\n-@chapter treelang internals\n-\n-@menu\n-* treelang files::              \n-* treelang compiler interfaces::  \n-* Hints and tips::              \n-@end menu\n-\n-@node treelang files, treelang compiler interfaces, treelang internals, treelang internals\n-@section treelang files\n-\n-To create a compiler that integrates into GCC, you need create many\n-files.  Some of the files are integrated into the main GCC makefile, to\n-build the various parts of the compiler and to run the test\n-suite.  Others are incorporated into various GCC programs such as\n-@file{gcc.c}.  Finally you must provide the actual programs comprising your\n-compiler. \n-\n-@cindex files\n-\n-The files are:\n-\n-@enumerate 1\n-\n-@item\n-COPYING.  This is the copyright file, assuming you are going to use the\n-GNU General Public License.  You probably need to use the GPL because if\n-you use the GCC back end your program and the back end are one program,\n-and the back end is GPLed.\n-\n-This need not be present if the language is incorporated into the main\n-GCC tree, as the main GCC directory has this file. \n-\n-@item\n-COPYING.LIB.  This is the copyright file for those parts of your program\n-that are not to be covered by the GPL, but are instead to be covered by\n-the LGPL (Library or Lesser GPL).  This license may be appropriate for\n-the library routines associated with your compiler. These are the\n-routines that are linked with the @emph{output} of the compiler.  Using\n-the LGPL for these programs allows programs written using your compiler\n-to be closed source. For example LIBC is under the LGPL. \n-\n-This need not be present if the language is incorporated into the main\n-GCC tree, as the main GCC directory has this file. \n-\n-@item\n-ChangeLog.  Record all the changes to your compiler.  Use the same format\n-as used in treelang as it is supported by an emacs editing mode and is\n-part of the FSF coding standard.  Normally each directory has its own\n-changelog.  The FSF standard allows but does not require a meaningful\n-comment on why the changes were made, above and beyond @emph{why} they\n-were made.  In the author's opinion it is useful to provide this\n-information.\n-\n-@item\n-treelang.texi.  The manual, written in texinfo. Your manual would have a\n-different file name.  You need not write it in texinfo if you don't want\n-do, but a lot of GNU software does use texinfo. \n-\n-@cindex Make-lang.in\n-@item\n-Make-lang.in.  This file is part of the make file which in incorporated\n-with the GCC make file skeleton (Makefile.in in the GCC directory) to\n-make Makefile, as part of the configuration process.\n-\n-Makefile in turn is the main instruction to actually build\n-everything.  The build instructions are held in the main GCC manual and\n-web site so they are not repeated here. \n-\n-There are some comments at the top which will help you understand what\n-you need to do.\n-\n-There are make commands to build things, remove generated files with\n-various degrees of thoroughness, count the lines of code (so you know\n-how much progress you are making), build info and html files from the\n-texinfo source, run the tests etc.\n-\n-@item\n-README.  Just a brief informative text file saying what is in this\n-directory. \n-\n-@cindex config-lang.in\n-@item\n-config-lang.in.  This file is read by the configuration progress and must\n-be present. You specify the name of your language, the name(s) of the\n-compiler(s) including preprocessors you are going to build, whether any,\n-usually generated, files should be excluded from diffs (ie when making\n-diff files to send in patches).  Whether the equate 'stagestuff' is used\n-is unknown (???).\n-\n-@cindex lang.opt\n-@item\n-lang.opt.  This file is included into @file{gcc.c}, the main GCC driver, and\n-tells it what options your language supports.  This is also used to\n-display help.\n-\n-@cindex lang-specs.h\n-@item\n-lang-specs.h.  This file is also included in @file{gcc.c}. It tells\n-@file{gcc.c} when to call your programs and what options to send them.  The\n-mini-language 'specs' is documented in the source of @file{gcc.c}.  Do not\n-attempt to write a specs file from scratch - use an existing one as the base\n-and enhance it. \n-\n-@item\n-Your texi files.  Texinfo can be used to build documentation in HTML,\n-info, dvi and postscript formats. It is a tagged language, is documented\n-in its own manual, and has its own emacs mode.\n-\n-@item\n-Your programs.  The relationships between all the programs are explained\n-in the next section.  You need to write or use the following programs:\n-\n-@itemize @bullet\n-\n-@item\n-lexer.  This breaks the input into words and passes these to the\n-parser.  This is @file{lex.l} in treelang, which is passed through flex, a lex\n-variant, to produce C code @file{lex.c}.  Note there is a school of thought\n-that says real men hand code their own lexers.  However, you may prefer to\n-write far less code and use flex, as was done with treelang.\n-\n-@item\n-parser.  This breaks the program into recognizable constructs such as\n-expressions, statements etc.  This is @file{parse.y} in treelang, which is\n-passed through bison, which is a yacc variant, to produce C code\n-@file{parse.c}.\n-\n-@item\n-back end interface.  This interfaces to the code generation back end.  In\n-treelang, this is @file{tree1.c} which mainly interfaces to @file{toplev.c} and\n-@file{treetree.c} which mainly interfaces to everything else. Many languages\n-mix up the back end interface with the parser, as in the C compiler for\n-example.  It is a matter of taste which way to do it, but with treelang\n-it is separated out to make the back end interface cleaner and easier to\n-understand.\n-\n-@item\n-header files.  For function prototypes and common data items.  One point\n-to note here is that bison can generate a header files with all the\n-numbers is has assigned to the keywords and symbols, and you can include\n-the same header in your lexer.  This technique is demonstrated in\n-treelang.\n-\n-@item\n-compiler main file.  GCC comes with a file @file{toplev.c} which is a\n-perfectly serviceable main program for your compiler.  GNU Treelang uses\n-@file{toplev.c} but other languages have been known to replace it with their\n-own main program.  Again this is a matter of taste and how much code you\n-want to write. \n-\n-@end itemize\n-\n-@end enumerate\n-\n-@node treelang compiler interfaces, Hints and tips, treelang files, treelang internals\n-@section treelang compiler interfaces\n-\n-@cindex driver\n-@cindex toplev.c\n-\n-@menu\n-* treelang driver::             \n-* treelang main compiler::      \n-@end menu\n-\n-@node treelang driver, treelang main compiler, treelang compiler interfaces, treelang compiler interfaces\n-@subsection treelang driver\n-\n-The GCC compiler consists of a driver, which then executes the various\n-compiler phases based on the instructions in the specs files. \n-\n-Typically a program's language will be identified from its suffix\n-(e.g., @file{.tree}) for treelang programs.\n-\n-The driver (@file{gcc.c}) will then drive (exec) in turn a preprocessor,\n-the main compiler, the assembler and the link editor. Options to GCC allow you\n-to override all of this. In the case of treelang programs there is no\n-preprocessor, and mostly these days the C preprocessor is run within the\n-main C compiler rather than as a separate process, apparently for reasons of speed.\n-\n-You will be using the standard assembler and linkage editor so these are\n-ignored from now on. \n-\n-You have to write your own preprocessor if you want one.  This is usually\n-totally language specific.  The main point to be aware of is to ensure\n-that you find some way to pass file name and line number information\n-through to the main compiler so that it can tell the back end this\n-information and so the debugger can find the right source line for each\n-piece of code.  That is all there is to say about the preprocessor except\n-that the preprocessor will probably not be the slowest part of the\n-compiler and will probably not use the most memory so don't waste too\n-much time tuning it until you know you need to do so.\n-\n-@node treelang main compiler,  , treelang driver, treelang compiler interfaces\n-@subsection treelang main compiler\n-\n-The main compiler for treelang consists of @file{toplev.c} from the main GCC\n-compiler, the parser, lexer and back end interface routines, and the\n-back end routines themselves, of which there are many.\n-\n-@file{toplev.c} does a lot of work for you and you should almost certainly\n-use it.\n-\n-Writing this code is the hard part of creating a compiler using GCC.  The\n-back end interface documentation is incomplete and the interface is\n-complex. \n-\n-There are three main aspects to interfacing to the other GCC code. \n-\n-@menu\n-* Interfacing to toplev.c::     \n-* Interfacing to the garbage collection::  \n-* Interfacing to the code generation code. ::  \n-@end menu\n-\n-@node Interfacing to toplev.c, Interfacing to the garbage collection, treelang main compiler, treelang main compiler\n-@subsubsection Interfacing to toplev.c\n-\n-In treelang this is handled mainly in tree1.c\n-and partly in treetree.c. Peruse toplev.c for details of what you need\n-to do.\n-\n-@node Interfacing to the garbage collection, Interfacing to the code generation code. , Interfacing to toplev.c, treelang main compiler\n-@subsubsection Interfacing to the garbage collection\n-\n-Interfacing to the garbage collection. In treelang this is mainly in\n-tree1.c. \n-\n-Memory allocation in the compiler should be done using the ggc_alloc and\n-kindred routines in ggc*.*. At the end of every 'function' in your language, toplev.c calls\n-the garbage collection several times. The garbage collection calls mark\n-routines which go through the memory which is still used, telling the\n-garbage collection not to free it. Then all the memory not used is\n-freed.\n-\n-What this means is that you need a way to hook into this marking\n-process. This is done by calling ggc_add_root. This provides the address\n-of a callback routine which will be called duing garbage collection and\n-which can call ggc_mark to save the storage. If storage is only\n-used within the parsing of a function, you do not need to provide a way\n-to mark it. \n-\n-Note that you can also call ggc_mark_tree to mark any of the back end\n-internal 'tree' nodes. This routine will follow the branches of the\n-trees and mark all the subordinate structures. This is useful for\n-example when you have created a variable declaration that will be used\n-across multiple functions, or for a function declaration (from a\n-prototype) that may be used later on. See the next item for more on the\n-tree nodes. \n-\n-@node Interfacing to the code generation code. ,  , Interfacing to the garbage collection, treelang main compiler\n-@subsubsection Interfacing to the code generation code. \n-\n-In treelang this is done in treetree.c. A typedef called 'tree' which is\n-defined in tree.h and tree.def in the GCC directory and largely\n-implemented in tree.c and stmt.c forms the basic interface to the\n-compiler back end.\n-\n-In general you call various tree routines to generate code, either\n-directly or through toplev.c. You build up data structures and\n-expressions in similar ways. \n-\n-You can read some documentation on this which can be found via the GCC\n-main web page. In particular, the documentation produced by Joachim\n-Nadler and translated by Tim Josling can be quite useful. the C compiler\n-also has documentation in the main GCC manual (particularly the current\n-CVS version) which is useful on a lot of the details.\n-\n-In time it is hoped to enhance this document to provide a more\n-comprehensive overview of this topic. The main gap is in explaining how\n-it all works together. \n-\n-@node Hints and tips,  , treelang compiler interfaces, treelang internals\n-@section Hints and tips\n-\n-@itemize @bullet\n-\n-@item\n-TAGS: Use the make ETAGS commands to create TAGS files which can be used in\n-emacs to jump to any symbol quickly. \n-\n-@item\n-GREP: grep is also a useful way to find all uses of a symbol.\n-\n-@item\n-TREE: The main routines to look at are tree.h and tree.def. You will\n-probably want a hardcopy of these. \n-\n-@item\n-SAMPLE: look at the sample interfacing code in treetree.c. You can use\n-gdb to trace through the code and learn about how it all works. \n-\n-@item\n-GDB: the GCC back end works well with gdb. It traps abort() and allows\n-you to trace back what went wrong. \n-\n-@item\n-Error Checking: The compiler back end does some error and consistency\n-checking. Often the result of an error is just no code being\n-generated. You will then need to trace through and find out what is\n-going wrong. The rtl dump files can help here also.\n-\n-@item\n-rtl dump files: The main compiler documents these files which are dumps\n-of the rtl (intermediate code) which is manipulated doing the code\n-generation process. This can provide useful clues about what is going\n-wrong. The rtl 'language' is documented in the main GCC manual.\n-\n-@end itemize\n-\n-@end ifset\n-\n-@node Open Questions, Bugs, treelang internals, Top\n-@chapter Open Questions\n-\n-If you know GCC well, please consider looking at the file treetree.c and\n-resolving any questions marked \"???\".\n-\n-@node Bugs, Service, Open Questions, Top\n-@chapter Reporting Bugs\n-@cindex bugs\n-@cindex reporting bugs\n-\n-You can report bugs to @email{@value{email-bugs}}. Please make\n-sure bugs are real before reporting them. Follow the guidelines in the\n-main GCC manual for submitting bug reports.\n-\n-@menu\n-* Sending Patches::             \n-@end menu\n-\n-@node Sending Patches,  , Bugs, Bugs\n-@section Sending Patches for GNU Treelang\n-\n-If you would like to write bug fixes or improvements for the GNU\n-Treelang compiler, that is very helpful.  Send suggested fixes to\n-@email{@value{email-patches}}.\n-\n-@node Service, Projects, Bugs, Top\n-@chapter How To Get Help with GNU Treelang\n-\n-If you need help installing, using or changing GNU Treelang, there are two\n-ways to find it:\n-\n-@itemize @bullet\n-\n-@item\n-Look in the service directory for someone who might help you for a fee.\n-The service directory is found in the file named @file{SERVICE} in the\n-GCC distribution.\n-\n-@item\n-Send a message to @email{@value{email-general}}.\n-\n-@end itemize\n-\n-@end ifset\n-@ifset INTERNALS\n-\n-@node Projects, Index, Service, Top\n-@chapter Projects\n-@cindex projects\n-\n-If you want to contribute to @code{treelang} by doing research,\n-design, specification, documentation, coding, or testing,\n-the following information should give you some ideas.\n-\n-Send a message to @email{@value{email-general}} if you plan to add a\n-feature.\n-\n-The main requirement for treelang is to add features and to add\n-documentation. Features are things that the GCC back end can do but\n-which are not reflected in treelang. Examples include structures,\n-unions, pointers, arrays.\n-\n-@end ifset\n-\n-@node Index,  , Projects, Top\n-@unnumbered Index\n-\n-@printindex cp\n-@summarycontents\n-@contents\n-@bye"}, {"sha": "18354dc79f36c2634df131786558a29865272d08", "filename": "gcc/treelang/treetree.c", "status": "removed", "additions": 0, "deletions": 1184, "changes": 1184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,1184 +0,0 @@\n-/* TREELANG Compiler interface to GCC's middle end (treetree.c)\n-   Called by the parser.\n-\n-   If you want a working example of how to write a front end to GCC,\n-   you are in the right place.\n-\n-   Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007\n-   Free Software Foundation, Inc.\n-\n-   This code is based on toy.c written by Richard Kenner.\n-\n-   It was later modified by Jonathan Bartlett whose changes have all\n-   been removed (by Tim Josling).\n-\n-   Various bits and pieces were cloned from the GCC main tree, as\n-   GCC evolved, for COBOLForGCC, by Tim Josling.\n-\n-   It was adapted to TREELANG by Tim Josling 2001.\n-\n-   Updated to function-at-a-time by James A. Morrison, 2004.\n-\n-   -----------------------------------------------------------------------\n-\n-   This program is free software; you can redistribute it and/or modify it\n-   under the terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 3, or (at your option) any\n-   later version.\n-\n-   This program is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with this program; see the file COPYING3.  If not see\n-   <http://www.gnu.org/licenses/>.\n-\n-   In other words, you are welcome to use, share and improve this program.\n-   You are forbidden to forbid anyone else to use, share and improve\n-   what you give them.   Help stamp out software-hoarding!\n-\n-   -----------------------------------------------------------------------  */\n-\n-/* Assumption: garbage collection is never called implicitly.  It will\n-   not be called 'at any time' when short of memory.  It will only be\n-   called explicitly at the end of each function.  This removes the\n-   need for a *lot* of bother to ensure everything is in the mark trees\n-   at all times.  */\n-\n-/* Note, it is OK to use GCC extensions such as long long in a compiler front\n-   end.  This is because the GCC front ends are built using GCC.   */\n-\n-/* GCC headers.  */\n-\n-#include \"config.h\"\n-#include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"tree.h\"\n-#include \"tree-dump.h\"\n-#include \"tree-iterator.h\"\n-#include \"tree-gimple.h\"\n-#include \"function.h\"\n-#include \"flags.h\"\n-#include \"output.h\"\n-#include \"ggc.h\"\n-#include \"toplev.h\"\n-#include \"varray.h\"\n-#include \"langhooks-def.h\"\n-#include \"langhooks.h\"\n-#include \"target.h\"\n-\n-#include \"cgraph.h\"\n-\n-#include \"treelang.h\"\n-#include \"treetree.h\"\n-#include \"opts.h\"\n-\n-extern int option_main;\n-extern char **file_names;\n-\n-/* Types expected by gcc's garbage collector.\n-   These types exist to allow language front-ends to\n-   add extra information in gcc's parse tree data structure.\n-   But the treelang front end doesn't use them -- it has\n-   its own parse tree data structure.\n-   We define them here only to satisfy gcc's garbage collector.  */\n-\n-/* Language-specific identifier information.  */\n-\n-struct lang_identifier GTY(())\n-{\n-  struct tree_identifier common;\n-};\n-\n-/* Language-specific tree node information.  */\n-\n-union lang_tree_node \n-  GTY((desc (\"TREE_CODE (&%h.generic) == IDENTIFIER_NODE\")))\n-{\n-  union tree_node GTY ((tag (\"0\"), \n-\t\t\tdesc (\"tree_node_structure (&%h)\"))) \n-    generic;\n-  struct lang_identifier GTY ((tag (\"1\"))) identifier;\n-};\n-\n-/* Language-specific type information.  */\n-\n-struct lang_type GTY(())\n-{\n-  char junk; /* dummy field to ensure struct is not empty */\n-};\n-\n-/* Language-specific declaration information.  */\n-\n-struct lang_decl GTY(())\n-{\n-  char junk; /* dummy field to ensure struct is not empty */\n-};\n-\n-struct language_function GTY(())\n-{\n-  char junk; /* dummy field to ensure struct is not empty */\n-};\n-\n-static bool tree_mark_addressable (tree exp);\n-static tree tree_lang_type_for_size (unsigned precision, int unsignedp);\n-static tree tree_lang_type_for_mode (enum machine_mode mode, int unsignedp);\n-\n-/* Functions to keep track of the current scope.  */\n-static void pushlevel (int ignore);\n-static tree poplevel (int keep, int reverse, int functionbody);\n-static tree pushdecl (tree decl);\n-static tree* getstmtlist (void);\n-\n-/* Langhooks.  */\n-extern const struct attribute_spec treelang_attribute_table[];\n-static tree getdecls (void);\n-static int global_bindings_p (void);\n-static void insert_block (tree);\n-\n-static void tree_push_type_decl (tree id, tree type_node);\n-\n-/* The front end language hooks (addresses of code for this front\n-   end).  These are not really very language-dependent, i.e.\n-   treelang, C, Mercury, etc. can all use almost the same definitions.  */\n-\n-#undef LANG_HOOKS_MARK_ADDRESSABLE\n-#define LANG_HOOKS_MARK_ADDRESSABLE tree_mark_addressable\n-#undef LANG_HOOKS_TYPE_FOR_MODE\n-#define LANG_HOOKS_TYPE_FOR_MODE tree_lang_type_for_mode\n-#undef LANG_HOOKS_TYPE_FOR_SIZE\n-#define LANG_HOOKS_TYPE_FOR_SIZE tree_lang_type_for_size\n-#undef LANG_HOOKS_PARSE_FILE\n-#define LANG_HOOKS_PARSE_FILE treelang_parse_file\n-#undef LANG_HOOKS_ATTRIBUTE_TABLE\n-#define LANG_HOOKS_ATTRIBUTE_TABLE treelang_attribute_table\n-\n-/* #undef LANG_HOOKS_TYPES_COMPATIBLE_P\n-#define LANG_HOOKS_TYPES_COMPATIBLE_P hook_bool_tree_tree_true\n-*/\n-/* Hook routines and data unique to treelang.  */\n-\n-#undef LANG_HOOKS_INIT\n-#define LANG_HOOKS_INIT treelang_init\n-#undef LANG_HOOKS_NAME\n-#define LANG_HOOKS_NAME\t\"GNU treelang\"\n-#undef LANG_HOOKS_FINISH\n-#define LANG_HOOKS_FINISH\t\ttreelang_finish\n-#undef LANG_HOOKS_INIT_OPTIONS\n-#define LANG_HOOKS_INIT_OPTIONS  treelang_init_options\n-#undef LANG_HOOKS_HANDLE_OPTION\n-#define LANG_HOOKS_HANDLE_OPTION treelang_handle_option\n-const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n-\n-/* Tree code type/name/code tables.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n-\n-const enum tree_code_class tree_code_type[] = {\n-#include \"tree.def\"\n-  tcc_exceptional\n-};\n-#undef DEFTREECODE\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n-\n-const unsigned char tree_code_length[] = {\n-#include \"tree.def\"\n-  0\n-};\n-#undef DEFTREECODE\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n-\n-const char *const tree_code_name[] = {\n-#include \"tree.def\"\n-  \"@@dummy\"\n-};\n-#undef DEFTREECODE\n-\n-/* Number of bits in int and char - accessed by front end.  */\n-\n-unsigned int tree_code_int_size = SIZEOF_INT * HOST_BITS_PER_CHAR;\n-\n-unsigned int tree_code_char_size = HOST_BITS_PER_CHAR;\n-\n-/* Return the tree stuff for this type TYPE_NUM.  */\n-\n-tree\n-tree_code_get_type (int type_num)\n-{\n-  switch (type_num)\n-    {\n-    case SIGNED_CHAR:\n-      return signed_char_type_node;\n-\n-    case UNSIGNED_CHAR:\n-      return unsigned_char_type_node;\n-\n-    case SIGNED_INT:\n-      return integer_type_node;\n-\n-    case UNSIGNED_INT:\n-      return unsigned_type_node;\n-\n-    case VOID_TYPE:\n-      return void_type_node;\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-\n-/* Output the code for the start of an if statement.  The test\n-   expression is EXP (true if not zero), and the stmt occurred at line\n-   LINENO in file FILENAME.  */\n-\n-void\n-tree_code_if_start (tree exp, location_t loc)\n-{\n-  tree cond_exp, cond;\n-  cond_exp = fold_build2 (NE_EXPR, boolean_type_node, exp,\n-\t\t\t  build_int_cst (TREE_TYPE (exp), 0));\n-  SET_EXPR_LOCATION (cond_exp, loc);\n-  cond = build3 (COND_EXPR, void_type_node, cond_exp, NULL_TREE,\n-                 NULL_TREE);\n-  SET_EXPR_LOCATION (cond, loc);\n-  append_to_statement_list_force (cond, getstmtlist ());\n-  pushlevel (0);\n-}\n-\n-/* Output the code for the else of an if statement.  The else occurred\n-   at line LINENO in file FILENAME.  */\n-\n-void\n-tree_code_if_else (location_t loc ATTRIBUTE_UNUSED)\n-{\n-  tree stmts = *getstmtlist ();\n-  tree block = poplevel (1, 0, 0);\n-  if (BLOCK_VARS (block))\n-    {\n-      tree bindexpr = build3 (BIND_EXPR, void_type_node, BLOCK_VARS (block),\n-                              stmts, block);\n-      stmts = alloc_stmt_list ();\n-      append_to_statement_list (bindexpr, &stmts);\n-    }\n-\n-  TREE_OPERAND (STATEMENT_LIST_TAIL (*getstmtlist ())->stmt, 1) = stmts;\n-  pushlevel (0);\n-}\n-\n-/* Output the code for the end_if an if statement.  The end_if (final brace)\n-   occurred at line LINENO in file FILENAME.  */\n-\n-void\n-tree_code_if_end (location_t loc ATTRIBUTE_UNUSED)\n-{\n-  tree stmts = *getstmtlist ();\n-  tree block = poplevel (1, 0, 0);\n-  if (BLOCK_VARS (block))\n-    {\n-       tree bindexpr = build3 (BIND_EXPR, void_type_node, BLOCK_VARS (block),\n-                               stmts, block);\n-       stmts = alloc_stmt_list ();\n-       append_to_statement_list (bindexpr, &stmts);\n-    }\n-\n-  TREE_OPERAND (STATEMENT_LIST_TAIL (*getstmtlist ())->stmt, 2) = stmts;\n-}\n-\n-/* Create a function.  The prototype name is NAME, storage class is\n-   STORAGE_CLASS, type of return variable is RET_TYPE, parameter lists\n-   is PARMS, returns decl for this function.  */\n-\n-tree\n-tree_code_create_function_prototype (const unsigned char *chars,\n-\t\t\t\t     unsigned int storage_class,\n-\t\t\t\t     unsigned int ret_type,\n-\t\t\t\t     struct prod_token_parm_item* parms,\n-\t\t\t\t     location_t loc)\n-{\n-\n-  tree id;\n-  struct prod_token_parm_item* parm;\n-  tree type_list = NULL_TREE;\n-  tree type_node;\n-  tree fn_type;\n-  tree fn_decl;\n-  tree parm_list = NULL_TREE;\n-\n-  /* Build the type.  */\n-  id = get_identifier ((const char*)chars);\n-  for (parm = parms; parm; parm = parm->tp.par.next)\n-    {\n-      gcc_assert (parm->category == parameter_category);\n-      type_node = tree_code_get_type (parm->type);\n-      type_list = tree_cons (NULL_TREE, type_node, type_list);\n-    }\n-  /* Last parm if void indicates fixed length list (as opposed to\n-     printf style va_* list).  */\n-  type_list = tree_cons (NULL_TREE, void_type_node, type_list);\n-\n-  /* The back end needs them in reverse order.  */\n-  type_list = nreverse (type_list);\n-\n-  type_node = tree_code_get_type (ret_type);\n-  fn_type = build_function_type (type_node, type_list);\n-\n-  id = get_identifier ((const char*)chars);\n-  fn_decl = build_decl (FUNCTION_DECL, id, fn_type);\n-\n-  /* Nested functions not supported here.  */\n-  DECL_CONTEXT (fn_decl) = NULL_TREE;\n-  DECL_SOURCE_LOCATION (fn_decl) = loc;\n-\n-  TREE_PUBLIC (fn_decl) = 0;\n-  DECL_EXTERNAL (fn_decl) = 0;\n-  TREE_STATIC (fn_decl) = 0;\n-  switch (storage_class)\n-    {\n-    case STATIC_STORAGE:\n-      break;\n-\n-    case EXTERNAL_DEFINITION_STORAGE:\n-      TREE_PUBLIC (fn_decl) = 1;\n-      break;\n-\n-    case EXTERNAL_REFERENCE_STORAGE:\n-      DECL_EXTERNAL (fn_decl) = 1;\n-      break;\n-\n-    case AUTOMATIC_STORAGE:\n-    default:\n-      gcc_unreachable ();\n-    }\n-\n-  /* Make the argument variable decls.  */\n-  for (parm = parms; parm; parm = parm->tp.par.next)\n-    {\n-      tree parm_decl = build_decl (PARM_DECL, get_identifier\n-                                   ((const char*) (parm->tp.par.variable_name)),\n-                                   tree_code_get_type (parm->type));\n-\n-      /* Some languages have different nominal and real types.  */\n-      DECL_ARG_TYPE (parm_decl) = TREE_TYPE (parm_decl);\n-      gcc_assert (DECL_ARG_TYPE (parm_decl));\n-      gcc_assert (fn_decl);\n-      DECL_CONTEXT (parm_decl) = fn_decl;\n-      DECL_SOURCE_LOCATION (parm_decl) = loc;\n-      parm_list = chainon (parm_decl, parm_list);\n-    }\n-\n-  /* Back into reverse order as the back end likes them.  */\n-  parm_list = nreverse (parm_list);\n-\n-  DECL_ARGUMENTS (fn_decl) = parm_list;\n-\n-  /* Save the decls for use when the args are referred to.  */\n-  for (parm = parms; parm_list;\n-       parm_list = TREE_CHAIN (parm_list),\n-\tparm = parm->tp.par.next)\n-    {\n-      gcc_assert (parm); /* Too few.  */\n-      *parm->tp.par.where_to_put_var_tree = parm_list;\n-    }\n-  gcc_assert (!parm); /* Too many.  */\n-\n-  /* Process declaration of function defined elsewhere.  */\n-  rest_of_decl_compilation (fn_decl, 1, 0);\n-\n-  return fn_decl;\n-}\n-\n-\n-/* Output code for start of function; the decl of the function is in\n-   PREV_SAVED (as created by tree_code_create_function_prototype),\n-   the function is at line number LINENO in file FILENAME.  The\n-   parameter details are in the lists PARMS. Returns nothing.  */\n-\n-void\n-tree_code_create_function_initial (tree prev_saved,\n-\t\t\t\t   location_t loc)\n-{\n-  tree fn_decl;\n-  tree resultdecl;\n-\n-  fn_decl = prev_saved;\n-  gcc_assert (fn_decl);\n-\n-  /* Output message if not -quiet.  */\n-  announce_function (fn_decl);\n-\n-  /* This has something to do with forcing output also.  */\n-  pushdecl (fn_decl);\n-\n-  /* Set current function for error msgs etc.  */\n-  current_function_decl = fn_decl;\n-  DECL_INITIAL (fn_decl) = error_mark_node;\n-\n-  DECL_SOURCE_LOCATION (fn_decl) = loc;\n-\n-  /* Create a DECL for the functions result.  */\n-  resultdecl =\n-    build_decl (RESULT_DECL, NULL_TREE, TREE_TYPE (TREE_TYPE (fn_decl)));\n-  DECL_CONTEXT (resultdecl) = fn_decl;\n-  DECL_ARTIFICIAL (resultdecl) = 1;\n-  DECL_IGNORED_P (resultdecl) = 1;\n-  DECL_SOURCE_LOCATION (resultdecl) = loc;\n-  DECL_RESULT (fn_decl) = resultdecl;\n-\n-  /* Create a new level at the start of the function.  */\n-\n-  pushlevel (0);\n-\n-  TREE_STATIC (fn_decl) = 1;\n-}\n-\n-/* Wrapup a function contained in file FILENAME, ending at line LINENO.  */\n-void\n-tree_code_create_function_wrapup (location_t loc)\n-{\n-  tree block;\n-  tree fn_decl;\n-  tree stmts = *getstmtlist ();\n-\n-  fn_decl = current_function_decl;\n-\n-  /* Pop the level.  */\n-\n-  block = poplevel (1, 0, 1);\n-\n-  /* And attach it to the function.  */\n-\n-  DECL_SAVED_TREE (fn_decl) = build3 (BIND_EXPR, void_type_node,\n-                                      BLOCK_VARS (block),\n-\t\t\t              stmts, block);\n-\n-  allocate_struct_function (fn_decl, false);\n-  cfun->function_end_locus = loc;\n-\n-  /* Dump the original tree to a file.  */\n-  dump_function (TDI_original, fn_decl);\n-\n-  /* Convert current function to GIMPLE for the middle end.  */\n-  gimplify_function_tree (fn_decl);\n-  dump_function (TDI_generic, fn_decl);\n-\n-  /* We are not inside of any scope now.  */\n-  current_function_decl = NULL_TREE;\n-  set_cfun (NULL);\n-\n-  /* Pass the current function off to the middle end.  */\n-  (void)cgraph_node (fn_decl);\n-  cgraph_finalize_function (fn_decl, false);\n-}\n-\n-/* Create a variable.\n-\n-   The storage class is STORAGE_CLASS (eg LOCAL).\n-   The name is CHARS/LENGTH.\n-   The type is EXPRESSION_TYPE (eg UNSIGNED_TYPE).\n-   The init tree is INIT.  */\n-\n-tree\n-tree_code_create_variable (unsigned int storage_class,\n-\t\t\t   const unsigned char *chars,\n-\t\t\t   unsigned int length,\n-\t\t\t   unsigned int expression_type,\n-\t\t\t   tree init,\n-\t\t\t   location_t loc)\n-{\n-  tree var_type;\n-  tree var_id;\n-  tree var_decl;\n-\n-  /* 1. Build the type.  */\n-  var_type = tree_code_get_type (expression_type);\n-\n-  /* 2. Build the name.  */\n-  gcc_assert (chars[length] == 0); /* Should be null terminated.  */\n-\n-  var_id = get_identifier ((const char*)chars);\n-\n-  /* 3. Build the decl and set up init.  */\n-  var_decl = build_decl (VAR_DECL, var_id, var_type);\n-\n-  /* 3a. Initialization.  */\n-  if (init)\n-    DECL_INITIAL (var_decl) = fold_convert (var_type, init);\n-  else\n-    DECL_INITIAL (var_decl) = NULL_TREE;\n-\n-  gcc_assert (TYPE_SIZE (var_type) != 0); /* Did not calculate size.  */\n-\n-  DECL_CONTEXT (var_decl) = current_function_decl;\n-\n-  DECL_SOURCE_LOCATION (var_decl) = loc;\n-\n-  DECL_EXTERNAL (var_decl) = 0;\n-  TREE_PUBLIC (var_decl) = 0;\n-  TREE_STATIC (var_decl) = 0;\n-  /* Set the storage mode and whether only visible in the same file.  */\n-  switch (storage_class)\n-    {\n-    case STATIC_STORAGE:\n-      TREE_STATIC (var_decl) = 1;\n-      break;\n-\n-    case AUTOMATIC_STORAGE:\n-      break;\n-\n-    case EXTERNAL_DEFINITION_STORAGE:\n-      TREE_PUBLIC (var_decl) = 1;\n-      break;\n-\n-    case EXTERNAL_REFERENCE_STORAGE:\n-      DECL_EXTERNAL (var_decl) = 1;\n-      break;\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n-\n-  TYPE_NAME (TREE_TYPE (var_decl)) = TYPE_NAME (var_type);\n-  return pushdecl (copy_node (var_decl));\n-}\n-\n-\n-/* Generate code for return statement.  Type is in TYPE, expression\n-   is in EXP if present.  */\n-\n-void\n-tree_code_generate_return (tree type, tree exp)\n-{\n-  tree setret;\n-#ifdef ENABLE_CHECKING\n-  tree param;\n-\n-  for (param = DECL_ARGUMENTS (current_function_decl);\n-       param;\n-       param = TREE_CHAIN (param))\n-    gcc_assert (DECL_CONTEXT (param) == current_function_decl);\n-#endif\n-\n-  if (exp && TREE_TYPE (TREE_TYPE (current_function_decl)) != void_type_node)\n-    {\n-      setret = fold_build2 (MODIFY_EXPR, type, \n-                            DECL_RESULT (current_function_decl),\n-                            fold_convert (type, exp));\n-      TREE_SIDE_EFFECTS (setret) = 1;\n-      TREE_USED (setret) = 1;\n-      setret = build1 (RETURN_EXPR, void_type_node, setret);\n-      /* Use EXPR_LOCUS so we don't lose any information about the file we\n-\t are compiling.  */\n-      SET_EXPR_LOCUS (setret, EXPR_LOCUS (exp));\n-    }\n-   else\n-     setret = build1 (RETURN_EXPR, void_type_node, NULL_TREE);\n-\n-   append_to_statement_list_force (setret, getstmtlist ());\n-}\n-\n-\n-/* Output the code for this expression statement CODE.  */\n-\n-void\n-tree_code_output_expression_statement (tree code, location_t loc)\n-{\n-  /* Output the line number information.  */\n-  SET_EXPR_LOCATION (code, loc);\n-  TREE_USED (code) = 1;\n-  TREE_SIDE_EFFECTS (code) = 1;\n-  /* put CODE into the code list.  */\n-  append_to_statement_list_force (code, getstmtlist ());\n-}\n-\n-/* Return a tree for a constant integer value in the token TOK.  No\n-   size checking is done.  */\n-\n-tree\n-tree_code_get_integer_value (const unsigned char *chars, unsigned int length)\n-{\n-  long long int val = 0;\n-  unsigned int ix;\n-  unsigned int start = 0;\n-  int negative = 1;\n-  switch (chars[0])\n-    {\n-    case (unsigned char)'-':\n-      negative = -1;\n-      start = 1;\n-      break;\n-\n-    case (unsigned char)'+':\n-      start = 1;\n-      break;\n-\n-    default:\n-      break;\n-    }\n-  for (ix = start; ix < length; ix++)\n-    val = val * 10 + chars[ix] - (unsigned char)'0';\n-  val = val*negative;\n-  return build_int_cst_wide (start == 1 ?\n-\t\t\t\tinteger_type_node : unsigned_type_node,\n-\t\t\t     val & 0xffffffff, (val >> 32) & 0xffffffff);\n-}\n-\n-/* Return the tree for an expression, type EXP_TYPE (see treetree.h)\n-   with tree type TYPE and with operands1 OP1, OP2 (maybe), OP3 (maybe).  */\n-tree\n-tree_code_get_expression (unsigned int exp_type,\n-                          tree type, tree op1, tree op2,\n-\t\t\t  tree op3 ATTRIBUTE_UNUSED,\n-\t\t\t  location_t loc)\n-{\n-  tree ret1;\n-  int operator;\n-\n-  switch (exp_type)\n-    {\n-    case EXP_ASSIGN:\n-      gcc_assert (op1 && op2);\n-      operator = MODIFY_EXPR;\n-      ret1 = fold_build2 (operator, void_type_node, op1,\n-                          fold_convert (TREE_TYPE (op1), op2));\n-\n-      break;\n-\n-    case EXP_PLUS:\n-      operator = PLUS_EXPR;\n-      goto binary_expression;\n-\n-    case EXP_MINUS:\n-      operator = MINUS_EXPR;\n-      goto binary_expression;\n-\n-    case EXP_EQUALS:\n-      operator = EQ_EXPR;\n-      goto binary_expression;\n-\n-    /* Expand a binary expression.  Ensure the operands are the right type.  */\n-    binary_expression:\n-      gcc_assert (op1 && op2);\n-      ret1  =  fold_build2 (operator, type,\n-\t\t\t    fold_convert (type, op1),\n-\t\t\t    fold_convert (type, op2));\n-      break;\n-\n-      /* Reference to a variable.  This is dead easy, just return the\n-         decl for the variable.  If the TYPE is different than the\n-         variable type, convert it.  However, to keep accurate location\n-\t information we wrap it in a NOP_EXPR is is easily stripped.  */\n-    case EXP_REFERENCE:\n-      gcc_assert (op1);\n-      TREE_USED (op1) = 1;\n-      if (type == TREE_TYPE (op1))\n-        ret1 = build1 (NOP_EXPR, type, op1);\n-      else\n-        ret1 = fold_convert (type, op1);\n-      break;\n-\n-    case EXP_FUNCTION_INVOCATION:\n-      gcc_assert (op1);\n-      gcc_assert(TREE_TYPE (TREE_TYPE (op1)) == type);\n-      TREE_USED (op1) = 1;\n-      ret1 = build_function_call_expr(op1, op2);\n-      break;\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n-\n-  /* Declarations already have a location and constants can be shared so they\n-     shouldn't a location set on them.  */\n-  if (! DECL_P (ret1) && ! TREE_CONSTANT (ret1))\n-    SET_EXPR_LOCATION (ret1, loc);\n-  return ret1;\n-}\n-\n-/* Init parameter list and return empty list.  */\n-\n-tree\n-tree_code_init_parameters (void)\n-{\n-  return NULL_TREE;\n-}\n-\n-/* Add a parameter EXP whose expression type is EXP_PROTO to list\n-   LIST, returning the new list.  */\n-\n-tree\n-tree_code_add_parameter (tree list, tree proto_exp, tree exp)\n-{\n-  tree new_exp;\n-  new_exp = tree_cons (NULL_TREE,\n-                       fold_convert (TREE_TYPE (proto_exp),\n-\t\t\t\t     exp), NULL_TREE);\n-  if (!list)\n-    return new_exp;\n-  return chainon (new_exp, list);\n-}\n-\n-/* Get a stringpool entry for a string S of length L.  This is needed\n-   because the GTY routines don't mark strings, forcing you to put\n-   them into stringpool, which is never freed.  */\n-\n-const char*\n-get_string (const char *s, size_t l)\n-{\n-  tree t;\n-  t = get_identifier_with_length (s, l);\n-  return IDENTIFIER_POINTER(t);\n-}\n-  \n-/* Save typing debug_tree all the time. Dump a tree T pretty and\n-   concise.  */\n-\n-void dt (tree t);\n-\n-void\n-dt (tree t)\n-{\n-  debug_tree (t);\n-}\n-\n-/* Routines Expected by gcc:  */\n-\n-/* These are used to build types for various sizes.  The code below\n-   is a simplified version of that of GNAT.  */\n-\n-#ifndef MAX_BITS_PER_WORD\n-#define MAX_BITS_PER_WORD  BITS_PER_WORD\n-#endif\n-\n-/* This variable keeps a table for types for each precision so that we only \n-   allocate each of them once. Signed and unsigned types are kept separate.  */\n-static GTY(()) tree signed_and_unsigned_types[MAX_BITS_PER_WORD + 1][2];\n-\n-/* Mark EXP saying that we need to be able to take the\n-   address of it; it should not be allocated in a register.\n-   Value is 1 if successful.  \n-   \n-   This implementation was copied from c-decl.c. */\n-\n-static bool\n-tree_mark_addressable (tree exp)\n-{\n-  register tree x = exp;\n-  while (1)\n-    switch (TREE_CODE (x))\n-      {\n-      case COMPONENT_REF:\n-      case ADDR_EXPR:\n-      case ARRAY_REF:\n-      case REALPART_EXPR:\n-      case IMAGPART_EXPR:\n-\tx = TREE_OPERAND (x, 0);\n-\tbreak;\n-  \n-      case CONSTRUCTOR:\n-\tTREE_ADDRESSABLE (x) = 1;\n-\treturn 1;\n-\n-      case VAR_DECL:\n-      case CONST_DECL:\n-      case PARM_DECL:\n-      case RESULT_DECL:\n-\tif (DECL_REGISTER (x) && !TREE_ADDRESSABLE (x)\n-\t    && DECL_NONLOCAL (x))\n-\t  {\n-\t    if (TREE_PUBLIC (x))\n-\t      {\n-\t\terror (\"Global register variable %qD used in nested function.\",\n-\t\t       x);\n-\t\treturn 0;\n-\t      }\n-\t    pedwarn (\"Register variable %qD used in nested function.\", x);\n-\t  }\n-\telse if (DECL_REGISTER (x) && !TREE_ADDRESSABLE (x))\n-\t  {\n-\t    if (TREE_PUBLIC (x))\n-\t      {\n-\t\terror (\"Address of global register variable %qD requested.\",\n-\t\t       x);\n-\t\treturn 0;\n-\t      }\n-\n-\t    pedwarn (\"Address of register variable %qD requested.\", x);\n-\t  }\n-\n-\t/* drops in */\n-      case FUNCTION_DECL:\n-\tTREE_ADDRESSABLE (x) = 1;\n-\n-      default:\n-\treturn 1;\n-    }\n-}\n-  \n-/* Return an integer type with the number of bits of precision given by  \n-   PRECISION.  UNSIGNEDP is nonzero if the type is unsigned; otherwise\n-   it is a signed type.  */\n-  \n-static tree\n-tree_lang_type_for_size (unsigned precision, int unsignedp)\n-{\n-  tree t;\n-\n-  if (precision <= MAX_BITS_PER_WORD\n-      && signed_and_unsigned_types[precision][unsignedp] != 0)\n-    return signed_and_unsigned_types[precision][unsignedp];\n-\n-  if (unsignedp)\n-    t = signed_and_unsigned_types[precision][1]\n-      = make_unsigned_type (precision);\n-  else\n-    t = signed_and_unsigned_types[precision][0]\n-      = make_signed_type (precision);\n-  \n-  return t;\n-}\n-\n-/* Return a data type that has machine mode MODE.  UNSIGNEDP selects\n-   an unsigned type; otherwise a signed type is returned.  */\n-\n-static tree\n-tree_lang_type_for_mode (enum machine_mode mode, int unsignedp)\n-{\n-  if (SCALAR_INT_MODE_P (mode))\n-    return tree_lang_type_for_size (GET_MODE_BITSIZE (mode), unsignedp);\n-  else\n-    return NULL_TREE;\n-}\n-\n-\f\n-/* These functions and variables deal with binding contours.  We only\n-   need these functions for the list of PARM_DECLs, but we leave the\n-   functions more general; these are a simplified version of the\n-   functions from GNAT.  */\n-\n-/* For each binding contour we allocate a binding_level structure which records\n-   the entities defined or declared in that contour. Contours include:\n-\n-\tthe global one\n-\tone for each subprogram definition\n-\tone for each compound statement (declare block)\n-\n-   Binding contours are used to create GCC tree BLOCK nodes.  */\n-\n-struct binding_level\n-{\n-  /* A chain of ..._DECL nodes for all variables, constants, functions,\n-     parameters and type declarations.  These ..._DECL nodes are chained\n-     through the TREE_CHAIN field. Note that these ..._DECL nodes are stored\n-     in the reverse of the order supplied to be compatible with the\n-     back-end.  */\n-  tree names;\n-  /* For each level (except the global one), a chain of BLOCK nodes for all\n-     the levels that were entered and exited one level down from this one.  */\n-  tree blocks;\n-\n-  tree stmts;\n-  /* The binding level containing this one (the enclosing binding level). */\n-  struct binding_level *level_chain;\n-};\n-\n-/* The binding level currently in effect.  */\n-static struct binding_level *current_binding_level = NULL;\n-\n-/* The outermost binding level. This binding level is created when the\n-   compiler is started and it will exist through the entire compilation.  */\n-static struct binding_level *global_binding_level;\n-\n-/* Binding level structures are initialized by copying this one.  */\n-static struct binding_level clear_binding_level = {NULL, NULL, NULL, NULL };\n-\f\n-/* Return non-zero if we are currently in the global binding level.  */\n-\n-static int\n-global_bindings_p (void)\n-{\n-  return current_binding_level == global_binding_level ? -1 : 0;\n-}\n-\n-\n-/* Return the list of declarations in the current level. Note that this list\n-   is in reverse order (it has to be so for back-end compatibility).  */\n-\n-static tree\n-getdecls (void)\n-{\n-  return current_binding_level->names;\n-}\n-\n-/* Return a STATMENT_LIST for the current block.  */\n-\n-static tree*\n-getstmtlist (void)\n-{\n-  return &current_binding_level->stmts;\n-}\n-\n-/* Enter a new binding level. The input parameter is ignored, but has to be\n-   specified for back-end compatibility.  */\n-\n-static void\n-pushlevel (int ignore ATTRIBUTE_UNUSED)\n-{\n-  struct binding_level *newlevel = XNEW (struct binding_level);\n-\n-  *newlevel = clear_binding_level;\n-\n-  /* Add this level to the front of the chain (stack) of levels that are\n-     active.  */\n-  newlevel->level_chain = current_binding_level;\n-  current_binding_level = newlevel;\n-  current_binding_level->stmts = alloc_stmt_list ();\n-}\n-\n-/* Exit a binding level.\n-   Pop the level off, and restore the state of the identifier-decl mappings\n-   that were in effect when this level was entered.\n-\n-   If KEEP is nonzero, this level had explicit declarations, so\n-   and create a \"block\" (a BLOCK node) for the level\n-   to record its declarations and subblocks for symbol table output.\n-\n-   If FUNCTIONBODY is nonzero, this level is the body of a function,\n-   so create a block as if KEEP were set and also clear out all\n-   label names.\n-\n-   If REVERSE is nonzero, reverse the order of decls before putting\n-   them into the BLOCK.  */\n-\n-static tree\n-poplevel (int keep, int reverse, int functionbody)\n-{\n-  /* Points to a BLOCK tree node. This is the BLOCK node constructed for the\n-     binding level that we are about to exit and which is returned by this\n-     routine.  */\n-  tree block_node = NULL_TREE;\n-  tree decl_chain;\n-  tree subblock_chain = current_binding_level->blocks;\n-  tree subblock_node;\n-\n-  /* Reverse the list of *_DECL nodes if desired.  Note that the ..._DECL\n-     nodes chained through the `names' field of current_binding_level are in\n-     reverse order except for PARM_DECL node, which are explicitly stored in\n-     the right order.  */\n-  decl_chain = (reverse) ? nreverse (current_binding_level->names)\n-\t\t\t : current_binding_level->names;\n-\n-  /* If there were any declarations in the current binding level, or if this\n-     binding level is a function body, or if there are any nested blocks then\n-     create a BLOCK node to record them for the life of this function.  */\n-  if (keep || functionbody)\n-    block_node = build_block (keep ? decl_chain : 0, subblock_chain, 0, 0);\n-\n-  /* Record the BLOCK node just built as the subblock its enclosing scope.  */\n-  for (subblock_node = subblock_chain; subblock_node;\n-       subblock_node = TREE_CHAIN (subblock_node))\n-    BLOCK_SUPERCONTEXT (subblock_node) = block_node;\n-\n-  /* Clear out the meanings of the local variables of this level.  */\n-\n-  for (subblock_node = decl_chain; subblock_node;\n-       subblock_node = TREE_CHAIN (subblock_node))\n-    if (DECL_NAME (subblock_node) != 0)\n-      /* If the identifier was used or addressed via a local extern decl,  \n-\t don't forget that fact.   */\n-      if (DECL_EXTERNAL (subblock_node))\n-\t{\n-\t  if (TREE_USED (subblock_node))\n-\t    TREE_USED (DECL_NAME (subblock_node)) = 1;\n-\t}\n-\n-  /* Pop the current level.  */\n-  current_binding_level = current_binding_level->level_chain;\n-\n-  if (functionbody)\n-    {\n-      /* This is the top level block of a function.  */\n-      DECL_INITIAL (current_function_decl) = block_node;\n-    }\n-  else if (block_node)\n-    {\n-      current_binding_level->blocks\n-\t= chainon (current_binding_level->blocks, block_node);\n-    }\n-\n-  /* If we did not make a block for the level just exited, any blocks made for\n-     inner levels (since they cannot be recorded as subblocks in that level)\n-     must be carried forward so they will later become subblocks of something\n-     else.  */\n-  else if (subblock_chain)\n-    current_binding_level->blocks\n-      = chainon (current_binding_level->blocks, subblock_chain);\n-  if (block_node)\n-    TREE_USED (block_node) = 1;\n-\n-  return block_node;\n-}\n-\f\n-/* Insert BLOCK at the end of the list of subblocks of the\n-   current binding level.  This is used when a BIND_EXPR is expanded,\n-   to handle the BLOCK node inside the BIND_EXPR.  */\n-\n-static void\n-insert_block (tree block)\n-{\n-  TREE_USED (block) = 1;\n-  current_binding_level->blocks\n-    = chainon (current_binding_level->blocks, block);\n-}\n-\n-\n-/* Records a ..._DECL node DECL as belonging to the current lexical scope.\n-   Returns the ..._DECL node. */\n-\n-tree\n-pushdecl (tree decl)\n-{\n-  /* External objects aren't nested, other objects may be.  */\n-    \n-  if ((DECL_EXTERNAL (decl)) || (decl==current_function_decl))\n-    DECL_CONTEXT (decl) = 0;\n-  else\n-    DECL_CONTEXT (decl) = current_function_decl;\n-\n-  /* Put the declaration on the list.  The list of declarations is in reverse\n-     order. The list will be reversed later if necessary.  This needs to be\n-     this way for compatibility with the back-end.  */\n-\n-  TREE_CHAIN (decl) = current_binding_level->names;\n-  current_binding_level->names = decl;\n-\n-  /* For the declaration of a type, set its name if it is not already set. */\n-\n-  if (TREE_CODE (decl) == TYPE_DECL\n-      && TYPE_NAME (TREE_TYPE (decl)) == 0)\n-    TYPE_NAME (TREE_TYPE (decl)) = DECL_NAME (decl);\n-\n-  /* Put automatic variables into the intermediate representation.  */\n-  if (TREE_CODE (decl) == VAR_DECL && !DECL_EXTERNAL (decl)\n-      && !TREE_STATIC (decl) && !TREE_PUBLIC (decl))\n-    tree_code_output_expression_statement (build1 (DECL_EXPR, void_type_node,\n-                                                   decl),\n-                                           DECL_SOURCE_LOCATION (decl));\n-  return decl;\n-}\n-\f\n-\n-static void\n-tree_push_type_decl(tree id, tree type_node)\n-{\n-  tree decl = build_decl (TYPE_DECL, id, type_node);\n-  TYPE_NAME (type_node) = id;\n-  pushdecl (decl);\n-}\n-\n-#define NULL_BINDING_LEVEL (struct binding_level *) NULL                        \n-\n-/* Create the predefined scalar types of C,\n-   and some nodes representing standard constants (0, 1, (void *) 0).\n-   Initialize the global binding level.\n-   Make definitions for built-in primitive functions.  */\n-\n-void\n-treelang_init_decl_processing (void)\n-{\n-  current_function_decl = NULL;\n-  current_binding_level = NULL_BINDING_LEVEL;\n-  pushlevel (0);\t/* make the binding_level structure for global names */\n-  global_binding_level = current_binding_level;\n-\n-  build_common_tree_nodes (flag_signed_char, false);\n-\n-  /* set standard type names */\n-\n-  /* Define `int' and `char' last so that they are not overwritten.  */\n-  tree_push_type_decl (NULL_TREE, intQI_type_node);\n-  tree_push_type_decl (NULL_TREE, intHI_type_node);\n-  tree_push_type_decl (NULL_TREE, intSI_type_node);\n-  tree_push_type_decl (NULL_TREE, intDI_type_node);\n-#if HOST_BITS_PER_WIDE_INT >= 64\n-  tree_push_type_decl (NULL_TREE, intTI_type_node);\n-#endif\n-  tree_push_type_decl (NULL_TREE, unsigned_intQI_type_node);\n-  tree_push_type_decl (NULL_TREE, unsigned_intHI_type_node);\n-  tree_push_type_decl (NULL_TREE, unsigned_intSI_type_node);\n-  tree_push_type_decl (NULL_TREE, unsigned_intDI_type_node);\n-#if HOST_BITS_PER_WIDE_INT >= 64\n-  tree_push_type_decl (NULL_TREE, unsigned_intTI_type_node);\n-#endif\n-\n-  tree_push_type_decl (get_identifier (\"int\"), integer_type_node);\n-  tree_push_type_decl (get_identifier (\"char\"), char_type_node);\n-  tree_push_type_decl (get_identifier (\"long int\"),\n-\t\t\t      long_integer_type_node);\n-  tree_push_type_decl (get_identifier (\"unsigned int\"),\n-\t\t\t      unsigned_type_node);\n-  tree_push_type_decl (get_identifier (\"long unsigned int\"),\n-\t\t\t      long_unsigned_type_node);\n-  tree_push_type_decl (get_identifier (\"long long int\"),\n-\t\t\t      long_long_integer_type_node);\n-  tree_push_type_decl (get_identifier (\"long long unsigned int\"),\n-\t\t\t      long_long_unsigned_type_node);\n-  tree_push_type_decl (get_identifier (\"short int\"),\n-\t\t\t      short_integer_type_node);\n-  tree_push_type_decl (get_identifier (\"short unsigned int\"),\n-\t\t\t      short_unsigned_type_node);\n-  tree_push_type_decl (get_identifier (\"signed char\"),\n-\t\t\t      signed_char_type_node);\n-  tree_push_type_decl (get_identifier (\"unsigned char\"),\n-\t\t\t      unsigned_char_type_node);\n-  size_type_node = make_unsigned_type (POINTER_SIZE);\n-  tree_push_type_decl (get_identifier (\"size_t\"), size_type_node);\n-  set_sizetype (size_type_node);\n-\n-  build_common_tree_nodes_2 (/* short_double= */ 0);\n-\n-  tree_push_type_decl (get_identifier (\"float\"), float_type_node);\n-  tree_push_type_decl (get_identifier (\"double\"), double_type_node);\n-  tree_push_type_decl (get_identifier (\"long double\"), long_double_type_node);\n-  tree_push_type_decl (get_identifier (\"void\"), void_type_node);\n-\n-  build_common_builtin_nodes ();\n-  (*targetm.init_builtins) ();\n-\n-  pedantic_lvalues = pedantic;\n-}\n-\n-static tree\n-handle_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n-\t\t  int ARG_UNUSED (flags), bool *no_add_attrs)\n-{\n-  if (TREE_CODE (*node) == FUNCTION_DECL)\n-    {\n-      if (strcmp (IDENTIFIER_POINTER (name), \"const\") == 0)\n-\tTREE_READONLY (*node) = 1;\n-      if (strcmp (IDENTIFIER_POINTER (name), \"nothrow\") == 0)\n-\tTREE_NOTHROW (*node) = 1;\n-    }\n-  else\n-    {\n-      warning (OPT_Wattributes, \"%qD attribute ignored\", name);\n-      *no_add_attrs = true;\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n-const struct attribute_spec treelang_attribute_table[] =\n-{\n-  { \"const\", 0, 0, true, false, false, handle_attribute },\n-  { \"nothrow\", 0, 0, true, false, false, handle_attribute },\n-  { NULL, 0, 0, false, false, false, NULL },\n-};\n-\n-#include \"debug.h\" /* for debug_hooks, needed by gt-treelang-treetree.h */\n-#include \"gt-treelang-treetree.h\""}, {"sha": "6774626cd91b55fb9f1ebf6e3d657bb154cf367d", "filename": "gcc/treelang/treetree.h", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2Ftreetree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3825be8c96775cf8e6fcb5eef04455f07717a5ea/gcc%2Ftreelang%2Ftreetree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.h?ref=3825be8c96775cf8e6fcb5eef04455f07717a5ea", "patch": "@@ -1,66 +0,0 @@\n-/* TREELANG Compiler definitions for interfacing to treetree.c\n-   (compiler back end interface).\n-   \n-   Copyright (C) 1986, 87, 89, 92-96, 1997, 1999, 2000, 2001, 2002, 2003,\n-   2004, 2005, 2007 Free Software Foundation, Inc.\n-   \n-   This program is free software; you can redistribute it and/or modify it\n-   under the terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 3, or (at your option) any\n-   later version.\n-   \n-   This program is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-   \n-   You should have received a copy of the GNU General Public License\n-   along with this program; see the file COPYING3.  If not see\n-   <http://www.gnu.org/licenses/>.\n-   \n-   In other words, you are welcome to use, share and improve this program.\n-   You are forbidden to forbid anyone else to use, share and improve\n-   what you give them.   Help stamp out software-hoarding!  \n-   \n-   ---------------------------------------------------------------------------\n-   \n-   Written by Tim Josling 1999, 2000, 2001, based in part on other\n-   parts of the GCC compiler.  */\n-\n-tree tree_code_init_parameters (void);\n-tree tree_code_add_parameter (tree list, tree proto_exp, tree exp);\n-tree tree_code_get_integer_value (const unsigned char *chars, unsigned int length);\n-void tree_code_generate_return (tree type, tree exp);\n-void tree_ggc_storage_always_used  (void *m);\n-tree tree_code_get_expression (unsigned int exp_type, tree type, tree op1,\n-\t\t\t       tree op2, tree op3, location_t loc);\n-tree tree_code_get_numeric_type (unsigned int size1, unsigned int sign1);\n-void tree_code_create_function_initial (tree prev_saved,\n-\t\t\t\t\tlocation_t loc);\n-void tree_code_create_function_wrapup (location_t loc);\n-tree tree_code_create_function_prototype (const unsigned char *chars,\n-\t\t\t\t\t  unsigned int storage_class,\n-\t\t\t\t\t  unsigned int ret_type,\n-\t\t\t\t\t  struct prod_token_parm_item* parms,\n-                                          location_t loc);\n-tree tree_code_create_variable (unsigned int storage_class,\n-\t\t\t\tconst unsigned char *chars,\n-\t\t\t\tunsigned int length,\n-\t\t\t\tunsigned int expression_type,\n-\t\t\t\ttree init,\n-\t\t\t\tlocation_t loc);\n-void tree_code_output_expression_statement (tree code,\n-\t\t\t\t\t    location_t loc);\n-void tree_code_if_start (tree exp, location_t loc);\n-void tree_code_if_else (location_t loc);\n-void tree_code_if_end (location_t loc);\n-tree tree_code_get_type (int type_num);\n-void treelang_init_decl_processing (void);\n-void treelang_finish (void);\n-bool treelang_init (void);\n-unsigned int treelang_init_options (unsigned int, const char **);\n-int treelang_handle_option (size_t scode, const char *arg, int value);\n-void treelang_parse_file (int debug_flag);\n-void push_var_level (void);\n-void pop_var_level (void);\n-const char* get_string (const char *s, size_t l);"}]}