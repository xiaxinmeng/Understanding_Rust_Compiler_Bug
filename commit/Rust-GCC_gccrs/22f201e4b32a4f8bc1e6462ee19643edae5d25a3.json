{"sha": "22f201e4b32a4f8bc1e6462ee19643edae5d25a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJmMjAxZTRiMzJhNGY4YmMxZTY0NjJlZTE5NjQzZWRhZTVkMjVhMw==", "commit": {"author": {"name": "Hafiz Abid Qadeer", "email": "abidh@codesourcery.com", "date": "2021-06-21T21:47:58Z"}, "committer": {"name": "Hafiz Abid Qadeer", "email": "abidh@codesourcery.com", "date": "2021-06-30T16:48:30Z"}, "message": "[amdgcn] Use frame pointer for CFA expressions.\n\nAs size of address is bigger than registers in amdgcn, we are forced to use\nDW_CFA_def_cfa_expression to make an expression that concatenates multiple\nregisters for the value of the CFA.  This then prohibits us from using many\nof the dwarf ops which expect CFA rule to be a single regsiter plus an offset.\nUsing frame pointer in the CFA rule is only real possibility as it is saved\nin every frame and it is easy to unwind its value.\n\nSo unless user gives fomit-frame-pointer, we use frame pointer for the\ncfi information.  This options also has a different default now.\n\ngcc/\n\n\t* common/config/gcn/gcn-common.c\n\t(gcn_option_optimization_table): Change OPT_fomit_frame_pointer to -O3.\n\t* config/gcn/gcn.c (gcn_expand_prologue): Prefer the frame pointer\n\twhen emitting CFI.\n\t(gcn_expand_prologue): Prefer the frame pointer when emitting CFI.\n\t(gcn_frame_pointer_rqd): New function.\n\t(TARGET_FRAME_POINTER_REQUIRED): New hook.", "tree": {"sha": "fc345e9b3ac6473bf328af3ea4ca4d1a3992a83f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc345e9b3ac6473bf328af3ea4ca4d1a3992a83f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22f201e4b32a4f8bc1e6462ee19643edae5d25a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22f201e4b32a4f8bc1e6462ee19643edae5d25a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22f201e4b32a4f8bc1e6462ee19643edae5d25a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22f201e4b32a4f8bc1e6462ee19643edae5d25a3/comments", "author": {"login": "abidh", "id": 4067533, "node_id": "MDQ6VXNlcjQwNjc1MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/4067533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abidh", "html_url": "https://github.com/abidh", "followers_url": "https://api.github.com/users/abidh/followers", "following_url": "https://api.github.com/users/abidh/following{/other_user}", "gists_url": "https://api.github.com/users/abidh/gists{/gist_id}", "starred_url": "https://api.github.com/users/abidh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abidh/subscriptions", "organizations_url": "https://api.github.com/users/abidh/orgs", "repos_url": "https://api.github.com/users/abidh/repos", "events_url": "https://api.github.com/users/abidh/events{/privacy}", "received_events_url": "https://api.github.com/users/abidh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "abidh", "id": 4067533, "node_id": "MDQ6VXNlcjQwNjc1MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/4067533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abidh", "html_url": "https://github.com/abidh", "followers_url": "https://api.github.com/users/abidh/followers", "following_url": "https://api.github.com/users/abidh/following{/other_user}", "gists_url": "https://api.github.com/users/abidh/gists{/gist_id}", "starred_url": "https://api.github.com/users/abidh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abidh/subscriptions", "organizations_url": "https://api.github.com/users/abidh/orgs", "repos_url": "https://api.github.com/users/abidh/repos", "events_url": "https://api.github.com/users/abidh/events{/privacy}", "received_events_url": "https://api.github.com/users/abidh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "251697a64ba4d7f10f072702771a59d30364cc26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/251697a64ba4d7f10f072702771a59d30364cc26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/251697a64ba4d7f10f072702771a59d30364cc26"}], "stats": {"total": 62, "additions": 47, "deletions": 15}, "files": [{"sha": "695eb467e34c32bab4a82cb10e86d72ae553982d", "filename": "gcc/common/config/gcn/gcn-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f201e4b32a4f8bc1e6462ee19643edae5d25a3/gcc%2Fcommon%2Fconfig%2Fgcn%2Fgcn-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f201e4b32a4f8bc1e6462ee19643edae5d25a3/gcc%2Fcommon%2Fconfig%2Fgcn%2Fgcn-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fgcn%2Fgcn-common.c?ref=22f201e4b32a4f8bc1e6462ee19643edae5d25a3", "patch": "@@ -27,7 +27,7 @@\n /* Set default optimization options.  */\n static const struct default_options gcn_option_optimization_table[] =\n   {\n-    { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n+    { OPT_LEVELS_3_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n     { OPT_LEVELS_NONE, 0, NULL, 0 }\n   };\n "}, {"sha": "a999897ef68ff7d11aa41c6d3e03aaa378973d7f", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 46, "deletions": 14, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f201e4b32a4f8bc1e6462ee19643edae5d25a3/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f201e4b32a4f8bc1e6462ee19643edae5d25a3/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=22f201e4b32a4f8bc1e6462ee19643edae5d25a3", "patch": "@@ -2900,10 +2900,14 @@ gcn_expand_prologue ()\n \t  rtx adjustment = gen_int_mode (sp_adjust, SImode);\n \t  rtx insn = emit_insn (gen_addsi3_scalar_carry (sp_lo, sp_lo,\n \t\t\t\t\t\t\t adjustment, scc));\n-\t  RTX_FRAME_RELATED_P (insn) = 1;\n-\t  add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t\tgen_rtx_SET (sp,\n-\t\t\t\t     gen_rtx_PLUS (DImode, sp, adjustment)));\n+\t  if (!offsets->need_frame_pointer)\n+\t    {\n+\t      RTX_FRAME_RELATED_P (insn) = 1;\n+\t      add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n+\t\t\t    gen_rtx_SET (sp,\n+\t\t\t\t\t gen_rtx_PLUS (DImode, sp,\n+\t\t\t\t\t\t       adjustment)));\n+\t    }\n \t  emit_insn (gen_addcsi3_scalar_zero (sp_hi, sp_hi, scc));\n \t}\n \n@@ -2917,25 +2921,24 @@ gcn_expand_prologue ()\n \t  rtx adjustment = gen_int_mode (fp_adjust, SImode);\n \t  rtx insn = emit_insn (gen_addsi3_scalar_carry(fp_lo, sp_lo,\n \t\t\t\t\t\t\tadjustment, scc));\n-\t  RTX_FRAME_RELATED_P (insn) = 1;\n-\t  add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t\tgen_rtx_SET (fp,\n-\t\t\t\t     gen_rtx_PLUS (DImode, sp, adjustment)));\n \t  emit_insn (gen_addcsi3_scalar (fp_hi, sp_hi,\n \t\t\t\t\t (fp_adjust < 0 ? GEN_INT (-1)\n \t\t\t\t\t  : const0_rtx),\n \t\t\t\t\t scc, scc));\n+\n+\t  /* Set the CFA to the entry stack address, as an offset from the\n+\t     frame pointer.  This is preferred because the frame pointer is\n+\t     saved in each frame, whereas the stack pointer is not.  */\n+\t  RTX_FRAME_RELATED_P (insn) = 1;\n+\t  add_reg_note (insn, REG_CFA_DEF_CFA,\n+\t\t\tgen_rtx_PLUS (DImode, fp,\n+\t\t\t\t      GEN_INT (-(offsets->pretend_size\n+\t\t\t\t\t\t + offsets->callee_saves))));\n \t}\n \n       rtx_insn *seq = get_insns ();\n       end_sequence ();\n \n-      /* FIXME: Prologue insns should have this flag set for debug output, etc.\n-\t but it causes issues for now.\n-      for (insn = seq; insn; insn = NEXT_INSN (insn))\n-        if (INSN_P (insn))\n-\t  RTX_FRAME_RELATED_P (insn) = 1;*/\n-\n       emit_insn (seq);\n     }\n   else\n@@ -3011,6 +3014,16 @@ gcn_expand_prologue ()\n \t\t    gen_rtx_SET (sp, gen_rtx_PLUS (DImode, sp,\n \t\t\t\t\t\t   dbg_adjustment)));\n \n+      if (offsets->need_frame_pointer)\n+\t{\n+\t  /* Set the CFA to the entry stack address, as an offset from the\n+\t     frame pointer.  This is necessary when alloca is used, and\n+\t     harmless otherwise.  */\n+\t  rtx neg_adjust = gen_int_mode (-offsets->callee_saves, DImode);\n+\t  add_reg_note (insn, REG_CFA_DEF_CFA,\n+\t\t\tgen_rtx_PLUS (DImode, fp, neg_adjust));\n+\t}\n+\n       /* Make sure the flat scratch reg doesn't get optimised away.  */\n       emit_insn (gen_prologue_use (gen_rtx_REG (DImode, FLAT_SCRATCH_REG)));\n     }\n@@ -3114,6 +3127,23 @@ gcn_expand_epilogue (void)\n   emit_jump_insn (gen_gcn_return ());\n }\n \n+/* Implement TARGET_FRAME_POINTER_REQUIRED.\n+\n+   Return true if the frame pointer should not be eliminated.  */\n+\n+bool\n+gcn_frame_pointer_rqd (void)\n+{\n+  /* GDB needs the frame pointer in order to unwind properly,\n+     but that's not important for the entry point, unless alloca is used.\n+     It's not important for code execution, so we should repect the\n+     -fomit-frame-pointer flag.  */\n+  return (!flag_omit_frame_pointer\n+\t  && cfun\n+\t  && (cfun->calls_alloca\n+\t      || (cfun->machine && cfun->machine->normal_function)));\n+}\n+\n /* Implement TARGET_CAN_ELIMINATE.\n  \n    Return true if the compiler is allowed to try to replace register number\n@@ -6410,6 +6440,8 @@ gcn_dwarf_register_span (rtx rtl)\n #define TARGET_EMUTLS_VAR_INIT gcn_emutls_var_init\n #undef  TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN gcn_expand_builtin\n+#undef  TARGET_FRAME_POINTER_REQUIRED\n+#define TARGET_FRAME_POINTER_REQUIRED gcn_frame_pointer_rqd\n #undef  TARGET_FUNCTION_ARG\n #undef  TARGET_FUNCTION_ARG_ADVANCE\n #define TARGET_FUNCTION_ARG_ADVANCE gcn_function_arg_advance"}]}