{"sha": "5d9c602d8374bd4330b53ae4dc6a2534199cc397", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ5YzYwMmQ4Mzc0YmQ0MzMwYjUzYWU0ZGM2YTI1MzQxOTljYzM5Nw==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-06-02T15:18:22Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-06-02T15:18:22Z"}, "message": "re PR fortran/90539 (481.wrf slowdown by 25% on Intel Kaby with -Ofast -march=native starting with r271377)\n\n2019-06-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/90539\n\t* trans-expr.c (gfc_conv_subref_array_arg): If the size of the\n\texpression can be determined to be one, treat it as contiguous.\n\tSet likelyhood of presence of an actual argument according to\n\tPRED_FORTRAN_ABSENT_DUMMY and likelyhood of being contiguous\n\taccording to PRED_FORTRAN_CONTIGUOUS.\n\n2019-06-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/90539\n\t* predict.def (PRED_FORTRAN_CONTIGUOUS): New predictor.\n\n2019-06-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/90539\n\t* gfortran.dg/internal_pack_24.f90: New test.\n\nFrom-SVN: r271844", "tree": {"sha": "1f6c9311416085b4463f65d6cccc0f52e1d64761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f6c9311416085b4463f65d6cccc0f52e1d64761"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d9c602d8374bd4330b53ae4dc6a2534199cc397", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d9c602d8374bd4330b53ae4dc6a2534199cc397", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d9c602d8374bd4330b53ae4dc6a2534199cc397", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d9c602d8374bd4330b53ae4dc6a2534199cc397/comments", "author": null, "committer": null, "parents": [{"sha": "5efdd6eeb65593900596592280b1be74b486e377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5efdd6eeb65593900596592280b1be74b486e377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5efdd6eeb65593900596592280b1be74b486e377"}], "stats": {"total": 120, "additions": 107, "deletions": 13}, "files": [{"sha": "0d4ba896ea4bdc5587656b7258ab13aade565a8a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9c602d8374bd4330b53ae4dc6a2534199cc397/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9c602d8374bd4330b53ae4dc6a2534199cc397/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d9c602d8374bd4330b53ae4dc6a2534199cc397", "patch": "@@ -1,3 +1,8 @@\n+2019-06-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/90539\n+\t* predict.def (PRED_FORTRAN_CONTIGUOUS): New predictor.\n+\n 2019-06-01  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/90694"}, {"sha": "1c3f8bc5948bb43f797fa8cb07748cd43bb03ffd", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9c602d8374bd4330b53ae4dc6a2534199cc397/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9c602d8374bd4330b53ae4dc6a2534199cc397/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5d9c602d8374bd4330b53ae4dc6a2534199cc397", "patch": "@@ -1,6 +1,15 @@\n+2019-06-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/90539\n+\t* trans-expr.c (gfc_conv_subref_array_arg): If the size of the\n+\texpression can be determined to be one, treat it as contiguous.\n+\tSet likelyhood of presence of an actual argument according to\n+\tPRED_FORTRAN_ABSENT_DUMMY and likelyhood of being contiguous\n+\taccording to PRED_FORTRAN_CONTIGUOUS.\n+\n 2019-05-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n-    * gfc-internals.texi (Translating to GENERIC): New chapter.\n+\t* gfc-internals.texi (Translating to GENERIC): New chapter.\n \n 2019-05-30  Marek Polacek  <polacek@redhat.com>\n "}, {"sha": "d23520fdbaa4caf2888e3d07fd6b83eeedaad469", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 41, "deletions": 12, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9c602d8374bd4330b53ae4dc6a2534199cc397/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9c602d8374bd4330b53ae4dc6a2534199cc397/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=5d9c602d8374bd4330b53ae4dc6a2534199cc397", "patch": "@@ -4922,15 +4922,35 @@ gfc_conv_subref_array_arg (gfc_se *se, gfc_expr * expr, int g77,\n \t  gfc_se cont_se, array_se;\n \t  stmtblock_t if_block, else_block;\n \t  tree if_stmt, else_stmt;\n+\t  mpz_t size;\n+\t  bool size_set;\n \n \t  cont_var = gfc_create_var (boolean_type_node, \"contiguous\");\n \n-\t  /* cont_var = is_contiguous (expr); .  */\n-\t  gfc_init_se (&cont_se, parmse);\n-\t  gfc_conv_is_contiguous_expr (&cont_se, expr);\n-\t  gfc_add_block_to_block (&se->pre, &(&cont_se)->pre);\n-\t  gfc_add_modify (&se->pre, cont_var, cont_se.expr);\n-\t  gfc_add_block_to_block (&se->pre, &(&cont_se)->post);\n+\t  /* If the size is known to be one at compile-time, set\n+\t     cont_var to true unconditionally.  This may look\n+\t     inelegant, but we're only doing this during\n+\t     optimization, so the statements will be optimized away,\n+\t     and this saves complexity here.  */\n+\n+\t  size_set = gfc_array_size (expr, &size);\n+\t  if (size_set && mpz_cmp_ui (size, 1) == 0)\n+\t    {\n+\t      gfc_add_modify (&se->pre, cont_var,\n+\t\t\t      build_one_cst (boolean_type_node));\n+\t    }\n+\t  else\n+\t    {\n+\t      /* cont_var = is_contiguous (expr); .  */\n+\t      gfc_init_se (&cont_se, parmse);\n+\t      gfc_conv_is_contiguous_expr (&cont_se, expr);\n+\t      gfc_add_block_to_block (&se->pre, &(&cont_se)->pre);\n+\t      gfc_add_modify (&se->pre, cont_var, cont_se.expr);\n+\t      gfc_add_block_to_block (&se->pre, &(&cont_se)->post);\n+\t    }\n+\n+\t  if (size_set)\n+\t    mpz_clear (size);\n \n \t  /* arrayse->expr = descriptor of a.  */\n \t  gfc_init_se (&array_se, se);\n@@ -4953,7 +4973,9 @@ gfc_conv_subref_array_arg (gfc_se *se, gfc_expr * expr, int g77,\n \n \t  /* And put the above into an if statement.  */\n \t  pre_stmts = fold_build3_loc (input_location, COND_EXPR, void_type_node,\n-\t\t\t\t      cont_var, if_stmt, else_stmt);\n+\t\t\t\t       gfc_likely (cont_var,\n+\t\t\t\t\t\t   PRED_FORTRAN_CONTIGUOUS),\n+\t\t\t\t       if_stmt, else_stmt);\n \t}\n       else\n \t{\n@@ -4976,11 +4998,11 @@ gfc_conv_subref_array_arg (gfc_se *se, gfc_expr * expr, int g77,\n \t  gfc_add_modify (&else_block, pointer, build_int_cst (type, 0));\n \t  else_stmt = gfc_finish_block (&else_block);\n \n-\t  tmp = fold_build3_loc (input_location, COND_EXPR, void_type_node, present_var,\n+\t  tmp = fold_build3_loc (input_location, COND_EXPR, void_type_node,\n+\t\t\t\t gfc_likely (present_var,\n+\t\t\t\t\t     PRED_FORTRAN_ABSENT_DUMMY),\n \t\t\t\t pre_stmts, else_stmt);\n \t  gfc_add_expr_to_block (&se->pre, tmp);\n-\n-\n \t}\n       else\n \tgfc_add_expr_to_block (&se->pre, pre_stmts);\n@@ -4995,9 +5017,16 @@ gfc_conv_subref_array_arg (gfc_se *se, gfc_expr * expr, int g77,\n \t  tmp = fold_build2_loc (input_location, EQ_EXPR, boolean_type_node,\n \t\t\t\t cont_var,\n \t\t\t\t build_zero_cst (boolean_type_node));\n+\t  tmp = gfc_unlikely (tmp, PRED_FORTRAN_CONTIGUOUS);\n+\n \t  if (pass_optional)\n-\t    post_cond = fold_build2_loc (input_location, TRUTH_ANDIF_EXPR,\n-\t\t\t\t\t boolean_type_node, present_var, tmp);\n+\t    {\n+\t      tree present_likely = gfc_likely (present_var,\n+\t\t\t\t\t\tPRED_FORTRAN_ABSENT_DUMMY);\n+\t      post_cond = fold_build2_loc (input_location, TRUTH_ANDIF_EXPR,\n+\t\t\t\t\t   boolean_type_node, present_likely,\n+\t\t\t\t\t   tmp);\n+\t    }\n \t  else\n \t    post_cond = tmp;\n \t}"}, {"sha": "24c1385943e269c98cd88b30e3d7051fdd3fc68e", "filename": "gcc/predict.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9c602d8374bd4330b53ae4dc6a2534199cc397/gcc%2Fpredict.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9c602d8374bd4330b53ae4dc6a2534199cc397/gcc%2Fpredict.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.def?ref=5d9c602d8374bd4330b53ae4dc6a2534199cc397", "patch": "@@ -229,3 +229,10 @@ DEF_PREDICTOR (PRED_FORTRAN_ABSENT_DUMMY, \"Fortran absent dummy\", \\\n    to be very likely.  */\n DEF_PREDICTOR (PRED_FORTRAN_LOOP_PREHEADER, \"Fortran loop preheader\", \\\n \t       HITRATE (99), 0)\n+\n+/* Fortran assumed size arrays can be non-contiguous, so they need\n+   to be repacked.  */\n+\n+DEF_PREDICTOR (PRED_FORTRAN_CONTIGUOUS, \"Fortran contiguous\", \\\n+\t       HITRATE (75), 0)\n+\t"}, {"sha": "6535ca09f32d230c0538a792d32275f9397e6fa6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9c602d8374bd4330b53ae4dc6a2534199cc397/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9c602d8374bd4330b53ae4dc6a2534199cc397/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d9c602d8374bd4330b53ae4dc6a2534199cc397", "patch": "@@ -1,3 +1,8 @@\n+2019-06-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/90539\n+\t* gfortran.dg/internal_pack_24.f90: New test.\n+\n 2019-06-01  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR target/90698"}, {"sha": "cc2443edcc02b7dac2ae461dbbb9ceb9b1016f22", "filename": "gcc/testsuite/gfortran.dg/internal_pack_24.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9c602d8374bd4330b53ae4dc6a2534199cc397/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_24.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9c602d8374bd4330b53ae4dc6a2534199cc397/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_24.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_24.f90?ref=5d9c602d8374bd4330b53ae4dc6a2534199cc397", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do run }\n+! { dg-additional-options \"-O -fdump-tree-optimized\" }\n+module y\n+  implicit none\n+contains\n+  subroutine foo(a,b,c,d,e,f)\n+    real, dimension(1), intent(inout) :: a, b, c, d, e, f\n+    if (any([a,b,c,d,e,f] /= [1,2,3,4,5,6])) stop 1\n+    a = -a\n+    b = -b\n+    c = -c\n+    d = -d\n+    e = -e\n+    f = -f\n+  end subroutine foo\n+end module y\n+module x\n+  use y\n+  implicit none\n+contains\n+  subroutine bar(a)\n+    real, dimension(:) :: a\n+    integer :: n1, n3, n5\n+    n1 = 1\n+    n3 = 3\n+    n5 = 5\n+    call foo(a(n1:n1), a(n1+1:n1+1), a(n3:n3), a(n3+1:n3+1), a(n5:n5), a(n5+1:n5+1))\n+  end subroutine bar\n+end module x\n+\n+program main\n+  use x\n+  real, dimension(6) :: a,b\n+  b = [1,2,3,4,5,6]\n+  a = b\n+  call bar(a)\n+  if (any(a /= -b)) stop 2\n+end program main\n+! { dg-final { scan-tree-dump-not \"contiguous\" \"optimized\" } }"}]}