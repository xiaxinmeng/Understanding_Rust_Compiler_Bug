{"sha": "4ca5c232d025bf96bd70127dcb5940c4b227cbef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNhNWMyMzJkMDI1YmY5NmJkNzAxMjdkY2I1OTQwYzRiMjI3Y2JlZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-06-20T18:33:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-06-20T18:33:02Z"}, "message": "pt.c (process_partial_specialization): Build a TEMPLATE_DECL for a partial specialization.\n\n\t* pt.c (process_partial_specialization): Build a TEMPLATE_DECL for\n\ta partial specialization.\n\t(tsubst_decl): Don't clobber CLASSTYPE_TI_TEMPLATE of a partial\n\tspecialization.\n\t(most_specialized_class): Adjust.\n\nFrom-SVN: r200263", "tree": {"sha": "cb21c34194d2b27c26ff1d691d755b58932cdbea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb21c34194d2b27c26ff1d691d755b58932cdbea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ca5c232d025bf96bd70127dcb5940c4b227cbef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca5c232d025bf96bd70127dcb5940c4b227cbef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ca5c232d025bf96bd70127dcb5940c4b227cbef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca5c232d025bf96bd70127dcb5940c4b227cbef/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ab013d93a27e19926e0dd3669768ddd93e4662b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ab013d93a27e19926e0dd3669768ddd93e4662b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ab013d93a27e19926e0dd3669768ddd93e4662b"}], "stats": {"total": 59, "additions": 35, "deletions": 24}, "files": [{"sha": "a7df33b562cf2bece27d9c3162012f88ce033756", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca5c232d025bf96bd70127dcb5940c4b227cbef/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca5c232d025bf96bd70127dcb5940c4b227cbef/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4ca5c232d025bf96bd70127dcb5940c4b227cbef", "patch": "@@ -1,5 +1,11 @@\n 2013-06-20  Jason Merrill  <jason@redhat.com>\n \n+\t* pt.c (process_partial_specialization): Build a TEMPLATE_DECL for\n+\ta partial specialization.\n+\t(tsubst_decl): Don't clobber CLASSTYPE_TI_TEMPLATE of a partial\n+\tspecialization.\n+\t(most_specialized_class): Adjust.\n+\n \t* cp-tree.h (DECL_TEMPLATE_PARMS, DECL_TEMPLATE_RESULT)\n \t(DECL_TEMPLATE_INSTANTIATIONS, DECL_TEMPLATE_SPECIALIZATIONS): Use\n \tTEMPLATE_DECL_CHECK."}, {"sha": "9fc4aeb13652afdc768f1e33d47a3e44328887f2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca5c232d025bf96bd70127dcb5940c4b227cbef/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca5c232d025bf96bd70127dcb5940c4b227cbef/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4ca5c232d025bf96bd70127dcb5940c4b227cbef", "patch": "@@ -3727,11 +3727,10 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n    specializations of this template.  (Full specializations are not\n    recorded on this list.)  The TREE_PURPOSE holds the arguments used\n    in the partial specialization (e.g., for `template <class T> struct\n-   S<T*, int>' this will be `T*'.)  The arguments will also include\n-   any outer template arguments.  The TREE_VALUE holds the innermost\n-   template parameters for the specialization (e.g., `T' in the\n-   example above.)  The TREE_TYPE is the _TYPE node for the partial\n-   specialization.\n+   S<T*, int>' this will be `T*, int'.)  The arguments will also include\n+   any outer template arguments.  The TREE_VALUE holds the TEMPLATE_DECL\n+   for the partial specialization.  The TREE_TYPE is the _TYPE node for\n+   the partial specialization.\n \n    This list is not used for other templates.  */\n #define DECL_TEMPLATE_SPECIALIZATIONS(NODE)     \\\n@@ -3801,9 +3800,10 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define SET_DECL_SELF_REFERENCE_P(NODE) \\\n   (DECL_LANG_FLAG_4 (NODE) = 1)\n \n-/* A `primary' template is one that has its own template header.  A\n-   member function of a class template is a template, but not primary.\n-   A member template is primary.  Friend templates are primary, too.  */\n+/* A `primary' template is one that has its own template header and is not\n+   a partial specialization.  A member function of a class template is a\n+   template, but not primary.  A member template is primary.  Friend\n+   templates are primary, too.  */\n \n /* Returns the primary template corresponding to these parameters.  */\n #define DECL_PRIMARY_TEMPLATE(NODE) \\"}, {"sha": "97efdc99b1a86255a1cf185f33e84e853450dd59", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca5c232d025bf96bd70127dcb5940c4b227cbef/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca5c232d025bf96bd70127dcb5940c4b227cbef/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4ca5c232d025bf96bd70127dcb5940c4b227cbef", "patch": "@@ -4246,8 +4246,16 @@ process_partial_specialization (tree decl)\n   /* We should only get here once.  */\n   gcc_assert (!COMPLETE_TYPE_P (type));\n \n+  tree tmpl = build_template_decl (decl, current_template_parms,\n+\t\t\t\t   DECL_MEMBER_TEMPLATE_P (maintmpl));\n+  TREE_TYPE (tmpl) = type;\n+  DECL_TEMPLATE_RESULT (tmpl) = decl;\n+  SET_DECL_TEMPLATE_SPECIALIZATION (tmpl);\n+  DECL_TEMPLATE_INFO (tmpl) = build_template_info (maintmpl, specargs);\n+  DECL_PRIMARY_TEMPLATE (tmpl) = maintmpl;\n+\n   DECL_TEMPLATE_SPECIALIZATIONS (maintmpl)\n-    = tree_cons (specargs, inner_parms,\n+    = tree_cons (specargs, tmpl,\n                  DECL_TEMPLATE_SPECIALIZATIONS (maintmpl));\n   TREE_TYPE (DECL_TEMPLATE_SPECIALIZATIONS (maintmpl)) = type;\n \n@@ -10058,7 +10066,10 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t      RETURN (error_mark_node);\n \n \t    TREE_TYPE (r) = new_type;\n-\t    CLASSTYPE_TI_TEMPLATE (new_type) = r;\n+\t    /* For a partial specialization, we need to keep pointing to\n+\t       the primary template.  */\n+\t    if (!DECL_TEMPLATE_SPECIALIZATION (t))\n+\t      CLASSTYPE_TI_TEMPLATE (new_type) = r;\n \t    DECL_TEMPLATE_RESULT (r) = TYPE_MAIN_DECL (new_type);\n \t    DECL_TI_ARGS (r) = CLASSTYPE_TI_ARGS (new_type);\n \t    DECL_CONTEXT (r) = TYPE_CONTEXT (new_type);\n@@ -18080,32 +18091,23 @@ most_specialized_class (tree type, tree tmpl, tsubst_flags_t complain)\n     {\n       tree partial_spec_args;\n       tree spec_args;\n-      tree parms = TREE_VALUE (t);\n+      tree spec_tmpl = TREE_VALUE (t);\n+      tree orig_parms = DECL_INNERMOST_TEMPLATE_PARMS (spec_tmpl);\n \n       partial_spec_args = CLASSTYPE_TI_ARGS (TREE_TYPE (t));\n \n       ++processing_template_decl;\n \n       if (outer_args)\n \t{\n-\t  int i;\n-\n \t  /* Discard the outer levels of args, and then substitute in the\n \t     template args from the enclosing class.  */\n \t  partial_spec_args = INNERMOST_TEMPLATE_ARGS (partial_spec_args);\n \t  partial_spec_args = tsubst_template_args\n \t    (partial_spec_args, outer_args, tf_none, NULL_TREE);\n \n-\t  /* PARMS already refers to just the innermost parms, but the\n-\t     template parms in partial_spec_args had their levels lowered\n-\t     by tsubst, so we need to do the same for the parm list.  We\n-\t     can't just tsubst the TREE_VEC itself, as tsubst wants to\n-\t     treat a TREE_VEC as an argument vector.  */\n-\t  parms = copy_node (parms);\n-\t  for (i = TREE_VEC_LENGTH (parms) - 1; i >= 0; --i)\n-\t    TREE_VEC_ELT (parms, i) =\n-\t      tsubst (TREE_VEC_ELT (parms, i), outer_args, tf_none, NULL_TREE);\n-\n+\t  /* And the same for the partial specialization TEMPLATE_DECL.  */\n+\t  spec_tmpl = tsubst (spec_tmpl, outer_args, tf_none, NULL_TREE);\n \t}\n \n       partial_spec_args =\n@@ -18120,15 +18122,18 @@ most_specialized_class (tree type, tree tmpl, tsubst_flags_t complain)\n \n       if (partial_spec_args == error_mark_node)\n \treturn error_mark_node;\n+      if (spec_tmpl == error_mark_node)\n+\treturn error_mark_node;\n \n+      tree parms = DECL_INNERMOST_TEMPLATE_PARMS (spec_tmpl);\n       spec_args = get_class_bindings (tmpl, parms,\n \t\t\t\t      partial_spec_args,\n \t\t\t\t      args);\n       if (spec_args)\n \t{\n \t  if (outer_args)\n \t    spec_args = add_to_template_args (outer_args, spec_args);\n-\t  list = tree_cons (spec_args, TREE_VALUE (t), list);\n+\t  list = tree_cons (spec_args, orig_parms, list);\n \t  TREE_TYPE (list) = TREE_TYPE (t);\n \t}\n     }"}]}