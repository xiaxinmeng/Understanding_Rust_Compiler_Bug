{"sha": "f700e4b0ee3ef53b48975cf89be26b9177e3a3f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcwMGU0YjBlZTNlZjUzYjQ4OTc1Y2Y4OWJlMjZiOTE3N2UzYTNmMw==", "commit": {"author": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2021-06-09T02:48:12Z"}, "committer": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2021-06-09T02:51:16Z"}, "message": "rs6000: Support doubleword swaps removal in rot64 load store [PR100085]\n\nOn P8LE, extra rot64+rot64 load or store instructions are generated\nin float128 to vector __int128 conversion.\n\nThis patch teaches pass swaps to also handle such pattens to remove\nextra swap instructions.\n\n(insn 7 6 8 2 (set (subreg:V1TI (reg:KF 123) 0)\n        (rotate:V1TI (mem/u/c:V1TI (reg/f:DI 121) [0  S16 A128])\n\t            (const_int 64 [0x40]))) {*vsx_le_permute_v1ti})\n(insn 8 7 9 2 (set (subreg:V1TI (reg:KF 122) 0)\n        (rotate:V1TI (subreg:V1TI (reg:KF 123) 0)\n\t            (const_int 64 [0x40])))  {*vsx_le_permute_v1ti})\n=>\n(insn 22 6 23 2 (set (subreg:V1TI (reg:KF 123) 0)\n        (mem/u/c:V1TI (and:DI (reg/f:DI 121)\n\t          (const_int -16 [0xfffffffffffffff0])) [0  S16 A128])))\n(insn 23 22 25 2 (set (subreg:V1TI (reg:KF 122) 0)\n        (subreg:V1TI (reg:KF 123) 0)))\n\ngcc/ChangeLog:\n\n2021-06-09  Xionghu Luo  <luoxhu@linux.ibm.com>\n\n\t* config/rs6000/rs6000-p8swap.c (pattern_is_rotate64): New.\n\t(insn_is_load_p): Use pattern_is_rotate64.\n\t(insn_is_swap_p): Likewise.\n\t(quad_aligned_load_p): Likewise.\n\t(const_load_sequence_p): Likewise.\n\t(replace_swapped_aligned_load): Likewise.\n\t(recombine_lvx_pattern): Likewise.\n\t(recombine_stvx_pattern): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2021-06-09  Xionghu Luo  <luoxhu@linux.ibm.com>\n\n\t* gcc.target/powerpc/float128-call.c: Adjust.\n\t* gcc.target/powerpc/pr100085.c: New test.", "tree": {"sha": "c11da331145e90e06ea2fda268dd9e7e5f761dc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c11da331145e90e06ea2fda268dd9e7e5f761dc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f700e4b0ee3ef53b48975cf89be26b9177e3a3f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f700e4b0ee3ef53b48975cf89be26b9177e3a3f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f700e4b0ee3ef53b48975cf89be26b9177e3a3f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f700e4b0ee3ef53b48975cf89be26b9177e3a3f3/comments", "author": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87f9ac937d6cfd81cbbe0a43518ba10781888d7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87f9ac937d6cfd81cbbe0a43518ba10781888d7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87f9ac937d6cfd81cbbe0a43518ba10781888d7c"}], "stats": {"total": 62, "additions": 55, "deletions": 7}, "files": [{"sha": "21cbcb2e28a2c895d3d8af049b8752f51887497d", "filename": "gcc/config/rs6000/rs6000-p8swap.c", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f700e4b0ee3ef53b48975cf89be26b9177e3a3f3/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f700e4b0ee3ef53b48975cf89be26b9177e3a3f3/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c?ref=f700e4b0ee3ef53b48975cf89be26b9177e3a3f3", "patch": "@@ -250,6 +250,21 @@ union_uses (swap_web_entry *insn_entry, rtx insn, df_ref def)\n     }\n }\n \n+/* Return 1 iff PAT (a SINGLE_SET) is a rotate 64 bit expression; else return\n+   0.  */\n+\n+static bool\n+pattern_is_rotate64 (rtx pat)\n+{\n+  rtx rot = SET_SRC (pat);\n+\n+  if (GET_CODE (rot) == ROTATE && CONST_INT_P (XEXP (rot, 1))\n+      && INTVAL (XEXP (rot, 1)) == 64)\n+    return true;\n+\n+  return false;\n+}\n+\n /* Return 1 iff INSN is a load insn, including permuting loads that\n    represent an lvxd2x instruction; else return 0.  */\n static unsigned int\n@@ -266,6 +281,9 @@ insn_is_load_p (rtx insn)\n \t  && MEM_P (XEXP (SET_SRC (body), 0)))\n \treturn 1;\n \n+      if (pattern_is_rotate64 (body) && MEM_P (XEXP (SET_SRC (body), 0)))\n+\treturn 1;\n+\n       return 0;\n     }\n \n@@ -305,6 +323,8 @@ insn_is_swap_p (rtx insn)\n   if (GET_CODE (body) != SET)\n     return 0;\n   rtx rhs = SET_SRC (body);\n+  if (pattern_is_rotate64 (body))\n+    return 1;\n   if (GET_CODE (rhs) != VEC_SELECT)\n     return 0;\n   rtx parallel = XEXP (rhs, 1);\n@@ -392,7 +412,8 @@ quad_aligned_load_p (swap_web_entry *insn_entry, rtx_insn *insn)\n      false.  */\n   rtx body = PATTERN (def_insn);\n   if (GET_CODE (body) != SET\n-      || GET_CODE (SET_SRC (body)) != VEC_SELECT\n+      || !(GET_CODE (SET_SRC (body)) == VEC_SELECT\n+\t   || pattern_is_rotate64 (body))\n       || !MEM_P (XEXP (SET_SRC (body), 0)))\n     return false;\n \n@@ -531,7 +552,8 @@ const_load_sequence_p (swap_web_entry *insn_entry, rtx insn)\n \t false.  */\n       rtx body = PATTERN (def_insn);\n       if (GET_CODE (body) != SET\n-\t  || GET_CODE (SET_SRC (body)) != VEC_SELECT\n+\t  || !(GET_CODE (SET_SRC (body)) == VEC_SELECT\n+\t       || pattern_is_rotate64 (body))\n \t  || !MEM_P (XEXP (SET_SRC (body), 0)))\n \treturn false;\n \n@@ -1732,7 +1754,8 @@ replace_swapped_aligned_load (swap_web_entry *insn_entry, rtx swap_insn)\n      swap (indicated by code VEC_SELECT).  */\n   rtx body = PATTERN (def_insn);\n   gcc_assert ((GET_CODE (body) == SET)\n-\t      && (GET_CODE (SET_SRC (body)) == VEC_SELECT)\n+\t      && (GET_CODE (SET_SRC (body)) == VEC_SELECT\n+\t\t  || pattern_is_rotate64 (body))\n \t      && MEM_P (XEXP (SET_SRC (body), 0)));\n \n   rtx src_exp = XEXP (SET_SRC (body), 0);\n@@ -2150,7 +2173,8 @@ recombine_lvx_pattern (rtx_insn *insn, del_info *to_delete)\n {\n   rtx body = PATTERN (insn);\n   gcc_assert (GET_CODE (body) == SET\n-\t      && GET_CODE (SET_SRC (body)) == VEC_SELECT\n+\t      && (GET_CODE (SET_SRC (body)) == VEC_SELECT\n+\t\t  || pattern_is_rotate64 (body))\n \t      && MEM_P (XEXP (SET_SRC (body), 0)));\n \n   rtx mem = XEXP (SET_SRC (body), 0);\n@@ -2227,7 +2251,8 @@ recombine_stvx_pattern (rtx_insn *insn, del_info *to_delete)\n   rtx body = PATTERN (insn);\n   gcc_assert (GET_CODE (body) == SET\n \t      && MEM_P (SET_DEST (body))\n-\t      && GET_CODE (SET_SRC (body)) == VEC_SELECT);\n+\t      && (GET_CODE (SET_SRC (body)) == VEC_SELECT\n+\t\t  || pattern_is_rotate64 (body)));\n   rtx mem = SET_DEST (body);\n   rtx base_reg = XEXP (mem, 0);\n "}, {"sha": "a1f09df8a573215c71983b7b07c55b5e8beb3233", "filename": "gcc/testsuite/gcc.target/powerpc/float128-call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f700e4b0ee3ef53b48975cf89be26b9177e3a3f3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f700e4b0ee3ef53b48975cf89be26b9177e3a3f3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-call.c?ref=f700e4b0ee3ef53b48975cf89be26b9177e3a3f3", "patch": "@@ -21,5 +21,5 @@\n TYPE one (void) { return ONE; }\n void store (TYPE a, TYPE *p) { *p = a; }\n \n-/* { dg-final { scan-assembler \"lxvd2x 34\"  } } */\n-/* { dg-final { scan-assembler \"stxvd2x 34\" } } */\n+/* { dg-final { scan-assembler \"lvx 2\"  } } */\n+/* { dg-final { scan-assembler \"stvx 2\" } } */"}, {"sha": "7d8b147b12788591b7bab6e4459bb4f68fcf7043", "filename": "gcc/testsuite/gcc.target/powerpc/pr100085.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f700e4b0ee3ef53b48975cf89be26b9177e3a3f3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr100085.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f700e4b0ee3ef53b48975cf89be26b9177e3a3f3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr100085.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr100085.c?ref=f700e4b0ee3ef53b48975cf89be26b9177e3a3f3", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power8\" } */\n+\n+typedef __vector unsigned __int128 vui128_t;\n+\n+typedef union\n+{\n+  __float128 vf1;\n+  vui128_t vx1;\n+} __VF_128;\n+\n+vui128_t\n+vec_xfer_bin128_2_vui128t (__float128 f128)\n+{\n+  __VF_128 vunion;\n+  vunion.vf1 = f128;\n+  return (vunion.vx1);\n+}\n+\n+/* { dg-final { scan-assembler-not {\\mxxpermdi\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mstxvd2x\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mlxvd2x\\M} } } */\n+"}]}