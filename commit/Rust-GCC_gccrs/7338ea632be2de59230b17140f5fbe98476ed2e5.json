{"sha": "7338ea632be2de59230b17140f5fbe98476ed2e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMzOGVhNjMyYmUyZGU1OTIzMGIxNzE0MGY1ZmJlOTg0NzZlZDJlNQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2009-03-27T21:55:20Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2009-03-27T21:55:20Z"}, "message": "builtins.c (real_dconstp): Delete.\n\n\t* builtins.c (real_dconstp): Delete.\n\t(fold_builtin_logarithm): Remove inaccurate log(e) special case.\n\ntestsuite:\n\t* gcc.dg/torture/builtin-explog-1.c: Remove tests that aren't true\n\tfor low precision (i.e. float).\n\nFrom-SVN: r145130", "tree": {"sha": "fe0d910842c9e3e08fd60e240da762a1f0817bbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe0d910842c9e3e08fd60e240da762a1f0817bbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7338ea632be2de59230b17140f5fbe98476ed2e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7338ea632be2de59230b17140f5fbe98476ed2e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7338ea632be2de59230b17140f5fbe98476ed2e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7338ea632be2de59230b17140f5fbe98476ed2e5/comments", "author": null, "committer": null, "parents": [{"sha": "346a77d1d814bc194c825ee48e75604646070bf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/346a77d1d814bc194c825ee48e75604646070bf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/346a77d1d814bc194c825ee48e75604646070bf6"}], "stats": {"total": 38, "additions": 10, "deletions": 28}, "files": [{"sha": "3c58c26bd0a866626262946c1bf5817784af944b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7338ea632be2de59230b17140f5fbe98476ed2e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7338ea632be2de59230b17140f5fbe98476ed2e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7338ea632be2de59230b17140f5fbe98476ed2e5", "patch": "@@ -1,3 +1,8 @@\n+2009-03-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (real_dconstp): Delete.\n+\t(fold_builtin_logarithm): Remove inaccurate log(e) special case.\n+\n 2009-03-27  Dodji Seketeli  <dodji@redhat.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "fab8a4c879db0d0842bf2a44053411bf5b98f817", "filename": "gcc/builtins.c", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7338ea632be2de59230b17140f5fbe98476ed2e5/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7338ea632be2de59230b17140f5fbe98476ed2e5/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=7338ea632be2de59230b17140f5fbe98476ed2e5", "patch": "@@ -8331,21 +8331,6 @@ fold_builtin_bswap (tree fndecl, tree arg)\n   return NULL_TREE;\n }\n \n-/* Return true if EXPR is the real constant contained in VALUE.  */\n-\n-static bool\n-real_dconstp (tree expr, const REAL_VALUE_TYPE *value)\n-{\n-  STRIP_NOPS (expr);\n-\n-  return ((TREE_CODE (expr) == REAL_CST\n-\t   && !TREE_OVERFLOW (expr)\n-\t   && REAL_VALUES_EQUAL (TREE_REAL_CST (expr), *value))\n-\t  || (TREE_CODE (expr) == COMPLEX_CST\n-\t      && real_dconstp (TREE_REALPART (expr), value)\n-\t      && real_zerop (TREE_IMAGPART (expr))));\n-}\n-\n /* A subroutine of fold_builtin to fold the various logarithmic\n    functions.  Return NULL_TREE if no simplification can me made.\n    FUNC is the corresponding MPFR logarithm function.  */\n@@ -8360,17 +8345,6 @@ fold_builtin_logarithm (tree fndecl, tree arg,\n       tree res;\n       const enum built_in_function fcode = builtin_mathfn_code (arg);\n \n-      /* Optimize log(e) = 1.0.  We're never passed an exact 'e',\n-\t instead we'll look for 'e' truncated to MODE.  So only do\n-\t this if flag_unsafe_math_optimizations is set.  */\n-      if (flag_unsafe_math_optimizations && func == mpfr_log)\n-        {\n-\t  const REAL_VALUE_TYPE e_truncated =\n-\t    real_value_truncate (TYPE_MODE (type), dconst_e ());\n-\t  if (real_dconstp (arg, &e_truncated))\n-\t    return build_real (type, dconst1);\n-\t}\n-\n       /* Calculate the result when the argument is a constant.  */\n       if ((res = do_mpfr_arg1 (arg, type, func, &dconst0, NULL, false)))\n \treturn res;"}, {"sha": "2f1903ab049a54d27f89714292677072eed56239", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7338ea632be2de59230b17140f5fbe98476ed2e5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7338ea632be2de59230b17140f5fbe98476ed2e5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7338ea632be2de59230b17140f5fbe98476ed2e5", "patch": "@@ -1,3 +1,8 @@\n+2009-03-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/torture/builtin-explog-1.c: Remove tests that aren't true\n+\tfor low precision (i.e. float).\n+\n 2009-03-27  Dodji Seketeli  <dodji@redhat.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "740206153bd85c58ff8dadd38c6a9bf4f7be24f7", "filename": "gcc/testsuite/gcc.dg/torture/builtin-explog-1.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7338ea632be2de59230b17140f5fbe98476ed2e5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-explog-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7338ea632be2de59230b17140f5fbe98476ed2e5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-explog-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-explog-1.c?ref=7338ea632be2de59230b17140f5fbe98476ed2e5", "patch": "@@ -53,7 +53,6 @@ void test(double d1, double d2, float f1, float f2,\n  if (LOG(BASE) != 1.0 || LOG##f(BASE##F) != 1.0F || LOG##l(BASE##L) != 1.0L) \\\n     link_failure_##LOG##_N()\n \n-  LOG_N(log, M_E);\n   LOG_N(log2, 2.0);\n   LOG_N(log10, 10.0);\n \n@@ -74,7 +73,6 @@ void test(double d1, double d2, float f1, float f2,\n  if (LOG(EXP(d1)) != d1*LOG(BASE) || LOG##f(EXP##f(f1)) != f1*LOG##f(BASE##F) \\\n   || LOG##l(EXP##l(ld1)) != ld1*LOG##l(BASE##L)) link_failure_##LOG##_##EXP()\n \n-  LOGEXP(log,exp,M_E);\n   LOGEXP(log,exp2,2.0);\n   LOGEXP(log,exp10,10.0);\n   LOGEXP(log,pow10,10.0);"}]}