{"sha": "07bd02ca781addebb9d869c2746dbfcbbd4db154", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdiZDAyY2E3ODFhZGRlYmI5ZDg2OWMyNzQ2ZGJmY2JiZDRkYjE1NA==", "commit": {"author": {"name": "Steve Chamberlain", "email": "sac@gnu.org", "date": "1994-09-08T22:48:52Z"}, "committer": {"name": "Steve Chamberlain", "email": "sac@gnu.org", "date": "1994-09-08T22:48:52Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r8046", "tree": {"sha": "1fcb77c0fcbcf4f33cedfda14b070ee8b6965d5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fcb77c0fcbcf4f33cedfda14b070ee8b6965d5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07bd02ca781addebb9d869c2746dbfcbbd4db154", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07bd02ca781addebb9d869c2746dbfcbbd4db154", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07bd02ca781addebb9d869c2746dbfcbbd4db154", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07bd02ca781addebb9d869c2746dbfcbbd4db154/comments", "author": null, "committer": null, "parents": [{"sha": "13ce26b042ae661fde957ed094fdecae4757e865", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13ce26b042ae661fde957ed094fdecae4757e865", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13ce26b042ae661fde957ed094fdecae4757e865"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "7aa323fc00f9dda5f5f8526ec45b7f2972340902", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07bd02ca781addebb9d869c2746dbfcbbd4db154/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07bd02ca781addebb9d869c2746dbfcbbd4db154/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=07bd02ca781addebb9d869c2746dbfcbbd4db154", "patch": "@@ -170,6 +170,7 @@ output_stack_adjust (size)\n     }\n }\n \n+\n /* Generate code to push the regs specified in the mask, and return\n    the number of bytes the insns take. */\n \n@@ -462,7 +463,7 @@ synth_constant (operands, mode)\n {\n   rtx dst;\n   int i = INTVAL (operands[1]) & 0xffffffff;\n-\n+    \n   if (CONST_OK_FOR_I (i))\n     return 0;\n \n@@ -536,7 +537,19 @@ synth_constant (operands, mode)\n   else\n     return 0;\n \n-  if (mode != SImode)\n+  if (mode == DImode)\n+    {\n+      /* Moving from SI to DI, we've got to zero out the high part */\n+\n+      emit_insn (gen_rtx (SET, VOIDmode, \n+\t\t\t  gen_rtx (SUBREG, SImode, operands[0], 0),\n+\t\t\t  dst));\n+      emit_insn (gen_rtx (SET, VOIDmode,\n+\t\t\t  gen_rtx (SUBREG, SImode, operands[0], 1),\n+\t\t\t  const0_rtx));\n+\n+    }\n+  else if (mode != SImode)\n     {\n       emit_insn (gen_rtx (SET, VOIDmode, operands[0],\n \t\t\t  gen_rtx (SUBREG, mode, dst, 0)));\n@@ -1240,9 +1253,9 @@ add_constant (x, mode)\n \t      if (XINT (x, 3) != XINT (pool_vector[i].value, 3))\n \t\tcontinue;\n \t    }\n+\t  if (rtx_equal_p (x, pool_vector[i].value))\n+\t    return pool_vector[i].label;\n \t}\n-      if (rtx_equal_p (x, pool_vector[i].value))\n-\treturn pool_vector[i].label;\n     }\n \n   /* Need a new one */"}]}