{"sha": "ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ExM2ZiN2Y1ZGFhOWI2MWVkOWM5NGM3NGMzMjZjYTQzN2VmNmI3OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2003-12-15T16:56:42Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-12-15T16:56:42Z"}, "message": "locale_facets.tcc (num_get::do_get(bool&)): Fail as soon as the begins of both truename and falsename stop to match...\n\n2003-12-15  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.tcc (num_get::do_get(bool&)):\n\tFail as soon as the begins of both truename and falsename\n\tstop to match; always leave __beg one position beyond the\n\tlast char successfully matched.\n\t* testsuite/22_locale/num_get/get/char/8.cc: New.\n\t* testsuite/22_locale/num_get/get/wchar_t/8.cc: Likewise.\n\n2003-12-15  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.h (_M_widen): Reserve space\n\tfor all the possible widened chars.\n\t* config/locale/generic/ctype_members.cc (_M_initialize_ctype):\n\tCompute at construction time all the possible widened chars.\n\t(do_widen): Tweak, simplify.\n\t* config/locale/gnu/ctype_members.cc: Likewise.\n\t* testsuite/performance/narrow_widen_wchar_t.cc: Add tests\n\tfor the array versions.\n\nFrom-SVN: r74636", "tree": {"sha": "a5a075673330f5abd003895df2113fd69e3dac4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5a075673330f5abd003895df2113fd69e3dac4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78/comments", "author": null, "committer": null, "parents": [{"sha": "3a5c1f603eabdf9e21e91882180dec0de7b5a757", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a5c1f603eabdf9e21e91882180dec0de7b5a757", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a5c1f603eabdf9e21e91882180dec0de7b5a757"}], "stats": {"total": 287, "additions": 216, "deletions": 71}, "files": [{"sha": "e0f17c36b839434858c37adafd2eada8e1c88f38", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78", "patch": "@@ -1,3 +1,23 @@\n+2003-12-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.tcc (num_get::do_get(bool&)):\n+\tFail as soon as the begins of both truename and falsename\n+\tstop to match; always leave __beg one position beyond the\n+\tlast char successfully matched.\n+\t* testsuite/22_locale/num_get/get/char/8.cc: New.\n+\t* testsuite/22_locale/num_get/get/wchar_t/8.cc: Likewise.\n+\n+2003-12-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.h (_M_widen): Reserve space\n+\tfor all the possible widened chars.\t\n+\t* config/locale/generic/ctype_members.cc (_M_initialize_ctype):\n+\tCompute at construction time all the possible widened chars.\n+\t(do_widen): Tweak, simplify.\n+\t* config/locale/gnu/ctype_members.cc: Likewise.\n+\t* testsuite/performance/narrow_widen_wchar_t.cc: Add tests\n+\tfor the array versions.\n+\n 2003-12-12  Paolo Carlini  <pcarlini@suse.de>\n \t    Benjamin Kosnik  <bkoz@redhat.com>\n "}, {"sha": "e94d447a251cea1a9ef835a903bcaf3965aaa5d8", "filename": "libstdc++-v3/config/locale/generic/ctype_members.cc", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc?ref=ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78", "patch": "@@ -185,24 +185,15 @@ namespace std\n   wchar_t\n   ctype<wchar_t>::\n   do_widen(char __c) const\n-  { \n-    const unsigned char __uc = static_cast<unsigned char>(__c);\n-    if (__uc < 128)\n-      return _M_widen[__uc];\n-    return btowc(__uc);\n-  }\n+  { return _M_widen[static_cast<unsigned char>(__c)]; }\n   \n   const char* \n   ctype<wchar_t>::\n   do_widen(const char* __lo, const char* __hi, wchar_t* __dest) const\n   {\n     while (__lo < __hi)\n       {\n-\tconst unsigned char __uc = static_cast<unsigned char>(*__lo);\t\n-\tif (__uc < 128)\n-\t  *__dest = _M_widen[__uc];\n-\telse\n-\t  *__dest = btowc(__uc);\t\n+\t*__dest = _M_widen[static_cast<unsigned char>(*__lo)];\n \t++__lo;\n \t++__dest;\n       }\n@@ -264,7 +255,8 @@ namespace std\n       _M_narrow_ok = true;\n     else\n       _M_narrow_ok = false;\n-    for (int __i = 0; __i < 128; ++__i)\n+    for (size_t __i = 0;\n+\t __i < sizeof(_M_widen) / sizeof(wint_t); ++__i)\n       _M_widen[__i] = btowc(__i);\n   }\n #endif //  _GLIBCXX_USE_WCHAR_T"}, {"sha": "998737b273d9f4789699f08f340329dafc3ece7b", "filename": "libstdc++-v3/config/locale/gnu/ctype_members.cc", "status": "modified", "additions": 5, "deletions": 26, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc?ref=ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78", "patch": "@@ -191,47 +191,25 @@ namespace std\n   wchar_t\n   ctype<wchar_t>::\n   do_widen(char __c) const\n-  {\n-    const unsigned char __uc = static_cast<unsigned char>(__c);\n-    if (__uc < 128)\n-      return _M_widen[__uc];\n-#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n-    __c_locale __old = __uselocale(_M_c_locale_ctype);\n-#endif\n-    const wchar_t __wc = btowc(__uc);\n-#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n-    __uselocale(__old);\n-#endif\n-    return __wc;\n-  }\n+  { return _M_widen[static_cast<unsigned char>(__c)]; }\n \n   const char* \n   ctype<wchar_t>::\n   do_widen(const char* __lo, const char* __hi, wchar_t* __dest) const\n   {\n-#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n-    __c_locale __old = __uselocale(_M_c_locale_ctype);\n-#endif\n     while (__lo < __hi)\n       {\n-\tconst unsigned char __uc = static_cast<unsigned char>(*__lo);\t\n-\tif (__uc < 128)\n-\t  *__dest = _M_widen[__uc];\n-\telse\n-\t  *__dest = btowc(__uc);\t\n+\t*__dest = _M_widen[static_cast<unsigned char>(*__lo)];\n \t++__lo;\n \t++__dest;\n       }\n-#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n-    __uselocale(__old);\n-#endif\n     return __hi;\n   }\n \n   char\n   ctype<wchar_t>::\n   do_narrow(wchar_t __wc, char __dfault) const\n-  { \n+  {\n     if (__wc >= 0 && __wc < 128 && _M_narrow_ok)\n       return _M_narrow[__wc];\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n@@ -298,7 +276,8 @@ namespace std\n       _M_narrow_ok = true;\n     else\n       _M_narrow_ok = false;\n-    for (int __i = 0; __i < 128; ++__i)\n+    for (size_t __i = 0;\n+\t __i < sizeof(_M_widen) / sizeof(wint_t); ++__i)\n       _M_widen[__i] = btowc(__i);\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     __uselocale(__old);"}, {"sha": "83d77c81119f8937f2b14bd4d0c8e7bf77d9e407", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78", "patch": "@@ -446,10 +446,10 @@ namespace std\n     protected:\n       __c_locale\t\t_M_c_locale_ctype;\n \n-      // Pre-computed narrowed and widened chars in the range 0-127.\n-      bool                      _M_narrow_ok;      \n+      // Pre-computed narrowed and widened chars.\n+      bool                      _M_narrow_ok;\n       char                      _M_narrow[128];\n-      wint_t                    _M_widen[128];\n+      wint_t                    _M_widen[1 + static_cast<unsigned char>(-1)];\n \n     public:\n       // Data Members:"}, {"sha": "84f0b887852da5e1b7c70d328fd152d9df347885", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78", "patch": "@@ -473,38 +473,36 @@ namespace std\n \t  __use_cache<__cache_type> __uc;\n \t  const locale& __loc = __io._M_getloc();\n \t  const __cache_type* __lc = __uc(__loc);\n-          const size_t __tn = __traits_type::length(__lc->_M_truename) - 1;\n-          const size_t __fn = __traits_type::length(__lc->_M_falsename) - 1;\n+\t  const size_t __tn = __traits_type::length(__lc->_M_truename);\n+\t  const size_t __fn = __traits_type::length(__lc->_M_falsename);\n \n-\t  bool __testf = false;\n-\t  bool __testt = false;\n-          for (size_t __n = 0; __beg != __end; ++__n)\n+\t  bool __testf = true;\n+\t  bool __testt = true;\n+\t  size_t __n;\n+          for (__n = 0; __beg != __end; ++__n, ++__beg)\n             {\n-              const char_type __c = *__beg;\n-\t      ++__beg;\n-\n-\t      if (__n <= __fn)\n-\t\t__testf = __traits_type::eq(__c, __lc->_M_falsename[__n]);\n+\t      if (__testf)\n+\t\tif (__n < __fn)\n+\t\t  __testf = __traits_type::eq(*__beg, __lc->_M_falsename[__n]);\n+\t\telse\n+\t\t  break;\n \n-\t      if (__n <= __tn)\n-\t\t__testt = __traits_type::eq(__c, __lc->_M_truename[__n]);\n+\t      if (__testt)\n+\t\tif (__n < __tn)\n+\t\t  __testt = __traits_type::eq(*__beg, __lc->_M_truename[__n]);\n+\t\telse\n+\t\t  break;\n \n-              if (!(__testf || __testt))\n-                {\n-                  __err |= ios_base::failbit;\n-                  break;\n-                }\n-              else if (__testf && __n == __fn)\n-                {\n-                  __v = 0;\n-                  break;\n-                }\n-              else if (__testt && __n == __tn)\n-                {\n-                  __v = 1;\n-                  break;\n-                }\n+\t      if (!__testf && !__testt)\n+\t\tbreak;      \n             }\n+\t  if (__testf && __n == __fn)\n+\t    __v = 0;\n+\t  else if (__testt && __n == __tn)\n+\t    __v = 1;\n+\t  else\n+\t    __err |= ios_base::failbit;\n+\n           if (__beg == __end)\n             __err |= ios_base::eofbit;\n         }"}, {"sha": "d3f24f972de93ad1c546ba8a15b1554b26517e5e", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/8.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F8.cc?ref=ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78", "patch": "@@ -0,0 +1,70 @@\n+// 2003-12-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  bool test __attribute__((unused)) = true;\n+\n+  bool b;\n+\n+  // cache the num_get facet\n+  istringstream iss;\n+  const num_get<char>& ng = use_facet<num_get<char> >(iss.getloc()); \n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate failbit = ios_base::failbit;\n+  ios_base::iostate err;\n+  iterator_type end;\n+\n+  iss.setf(ios_base::boolalpha);\n+  iss.str(\"faLse\");\n+  err = goodbit;\n+  end = ng.get(iss.rdbuf(), 0, iss, err, b);\n+  VERIFY( *end == 'L' );\n+  VERIFY( err == failbit );\n+\n+  iss.str(\"falsr\");\n+  iss.clear();  \n+  err = goodbit;\n+  end = ng.get(iss.rdbuf(), 0, iss, err, b);\n+  VERIFY( *end == 'r' );\n+  VERIFY( err == failbit );\n+\n+  iss.str(\"trus\");\n+  iss.clear();\n+  err = goodbit;\n+  end = ng.get(iss.rdbuf(), 0, iss, err, b);\n+  VERIFY( *end == 's' );\n+  VERIFY( err == failbit );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fbba3a5553a19abcdfd10f20fe5fff0b17a78cb2", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/8.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F8.cc?ref=ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78", "patch": "@@ -0,0 +1,70 @@\n+// 2003-12-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test __attribute__((unused)) = true;\n+\n+  bool b;\n+\n+  // cache the num_get facet\n+  wistringstream iss;\n+  const num_get<wchar_t>& ng = use_facet<num_get<wchar_t> >(iss.getloc()); \n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate failbit = ios_base::failbit;\n+  ios_base::iostate err;\n+  iterator_type end;\n+\n+  iss.setf(ios_base::boolalpha);\n+  iss.str(L\"faLse\");\n+  err = goodbit;\n+  end = ng.get(iss.rdbuf(), 0, iss, err, b);\n+  VERIFY( *end == L'L' );\n+  VERIFY( err == failbit );\n+\n+  iss.str(L\"falsr\");\n+  iss.clear();  \n+  err = goodbit;\n+  end = ng.get(iss.rdbuf(), 0, iss, err, b);\n+  VERIFY( *end == L'r' );\n+  VERIFY( err == failbit );\n+\n+  iss.str(L\"trus\");\n+  iss.clear();\n+  err = goodbit;\n+  end = ng.get(iss.rdbuf(), 0, iss, err, b);\n+  VERIFY( *end == L's' );\n+  VERIFY( err == failbit );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "053f807261069abbb5f2f9a5c6115aec642364ec", "filename": "libstdc++-v3/testsuite/performance/narrow_widen_wchar_t.cc", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fnarrow_widen_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fnarrow_widen_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fnarrow_widen_wchar_t.cc?ref=ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78", "patch": "@@ -35,25 +35,41 @@ int main()\n \n   time_counter time;\n   resource_counter resource;\n-  const long iters = 200000000;\n+  wchar_t bufwc[] = L\"M'innamoravo di tutto (Fabrizio De Andre')\";\n+  char bufc[sizeof(bufwc) / sizeof(wchar_t)];\n \n   locale loc;\n   const ctype<wchar_t>& ct = use_facet<ctype<wchar_t> >(loc);\n \n   // narrow\n   start_counters(time, resource);\n-  for (long i = 0; i < iters; ++i)\n+  for (long i = 0; i < 200000000; ++i)\n     ct.narrow(i % 128, '*');\n   stop_counters(time, resource);\n   report_performance(__FILE__, \"narrow\", time, resource);\n   clear_counters(time, resource);\n \n+  // narrow array\n+  start_counters(time, resource);\n+  for (long i = 0; i < 20000000; ++i)\n+    ct.narrow(bufwc, bufwc + sizeof(bufwc) / sizeof(wchar_t), '*', bufc);\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"narrow array\", time, resource);\n+  clear_counters(time, resource);\n+\n   // widen\n   start_counters(time, resource);\n-  for (long i = 0; i < iters; ++i)\n+  for (long i = 0; i < 200000000; ++i)\n     ct.widen(i % 128);\n   stop_counters(time, resource);\n   report_performance(__FILE__, \"widen\", time, resource);\n \n+  // widen array\n+  start_counters(time, resource);\n+  for (long i = 0; i < 20000000; ++i)\n+    ct.widen(bufc, bufc + sizeof(bufc), bufwc);\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"widen array\", time, resource);\n+\n   return 0;\n }"}]}