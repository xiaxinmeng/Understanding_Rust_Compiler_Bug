{"sha": "025311c4bb3ae9f00c9f4f73fecb183f07b5e93b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI1MzExYzRiYjNhZTlmMDBjOWY0ZjczZmVjYjE4M2YwN2I1ZTkzYg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2013-08-23T23:58:55Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2013-08-23T23:58:55Z"}, "message": "diagnostic.c (diagnostic_set_caret_max_width): Use pp_buffer.\n\n\t* diagnostic.c (diagnostic_set_caret_max_width): Use pp_buffer.\n\t* gimple-pretty-print.c (gimple_dump_bb_buff): Likewise.\n\t* pretty-print.c (pp_formatted_text_data): Likewise.\n\t(pp_write_text_to_stream): Likewise.\n\t(pp_write_text_as_dot_label_to_stream): Likewise.\n\t(pp_append_r): Likewise.\n\t(pp_format): Likewise.\n\t(pp_flush): Likewise.\n\t(pp_clear_output_area): Likewise.\n\t(pp_append_text): Likewise.\n\t(pp_formatted_text): Likewise.\n\t(pp_remaining_character_count_for_line): Likewise.\n\t(pp_newline): Likewise.\n\t(pp_character): Likewise.\n\t(output_buffer::~output_buffer): Define.\n\t(pretty_printer::~pretty_printer): Destruct output buffer.\n\t* pretty-print.h (output_buffer::~output_buffer): Declare.\n\t(pretty_printer::~pretty_printer): Declare virtual.\n\nc/\n\t* c-objc-common.c (c_tree_printer): Document the nature of the cast.\n\t(c_initialize_diagnostics): Call a destructor for the early printer.\n\ncp/\n\t* cp-objcp-common.c (cxx_initialize_diagnostics): Call a\n\tdestructor for the early printer.\n\t* error.c (type_to_string): Use pp_buffer.\n\nFrom-SVN: r201956", "tree": {"sha": "3fd8ea19c4717cf8eebfaba2c148f1eec5f4ed57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fd8ea19c4717cf8eebfaba2c148f1eec5f4ed57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/025311c4bb3ae9f00c9f4f73fecb183f07b5e93b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/025311c4bb3ae9f00c9f4f73fecb183f07b5e93b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/025311c4bb3ae9f00c9f4f73fecb183f07b5e93b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/025311c4bb3ae9f00c9f4f73fecb183f07b5e93b/comments", "author": null, "committer": null, "parents": [{"sha": "0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cadbfaa89805ce4d1b93bed04c10d7c7bf1f6e2"}], "stats": {"total": 97, "additions": 75, "deletions": 22}, "files": [{"sha": "b35e5f3f2afe161a188ed8004747654ea0984810", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/025311c4bb3ae9f00c9f4f73fecb183f07b5e93b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/025311c4bb3ae9f00c9f4f73fecb183f07b5e93b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=025311c4bb3ae9f00c9f4f73fecb183f07b5e93b", "patch": "@@ -1,3 +1,24 @@\n+2013-08-23  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* diagnostic.c (diagnostic_set_caret_max_width): Use pp_buffer.\n+\t* gimple-pretty-print.c (gimple_dump_bb_buff): Likewise.\n+\t* pretty-print.c (pp_formatted_text_data): Likewise.\n+\t(pp_write_text_to_stream): Likewise.\n+\t(pp_write_text_as_dot_label_to_stream): Likewise.\n+\t(pp_append_r): Likewise.\n+\t(pp_format): Likewise.\n+\t(pp_flush): Likewise.\n+\t(pp_clear_output_area): Likewise.\n+\t(pp_append_text): Likewise.\n+\t(pp_formatted_text): Likewise.\n+\t(pp_remaining_character_count_for_line): Likewise.\n+\t(pp_newline): Likewise.\n+\t(pp_character): Likewise.\n+\t(output_buffer::~output_buffer): Define.\n+\t(pretty_printer::~pretty_printer): Destruct output buffer.\n+\t* pretty-print.h (output_buffer::~output_buffer): Declare.\n+\t(pretty_printer::~pretty_printer): Declare virtual.\n+\n 2013-08-24  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR other/57324"}, {"sha": "574e7c073ca41293b8808e801b82afa65fc42fdb", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/025311c4bb3ae9f00c9f4f73fecb183f07b5e93b/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/025311c4bb3ae9f00c9f4f73fecb183f07b5e93b/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=025311c4bb3ae9f00c9f4f73fecb183f07b5e93b", "patch": "@@ -1,3 +1,8 @@\n+2013-08-23  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* c-objc-common.c (c_tree_printer): Document the nature of the cast.\n+\t(c_initialize_diagnostics): Call a destructor for the early printer.\n+\n 2013-08-22  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* c-objc-common.c (c_initialize_diagnostics): Simplify C pretty"}, {"sha": "421c452704995edaa40fc61802a4784612d2d3a7", "filename": "gcc/c/c-objc-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/025311c4bb3ae9f00c9f4f73fecb183f07b5e93b/gcc%2Fc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/025311c4bb3ae9f00c9f4f73fecb183f07b5e93b/gcc%2Fc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.c?ref=025311c4bb3ae9f00c9f4f73fecb183f07b5e93b", "patch": "@@ -92,6 +92,7 @@ c_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n {\n   tree t = NULL_TREE;\n   tree name;\n+  // FIXME: the next cast should be a dynamic_cast, when it is permitted.\n   c_pretty_printer *cpp = (c_pretty_printer *) pp;\n   pp->padding = pp_none;\n \n@@ -192,6 +193,7 @@ c_initialize_diagnostics (diagnostic_context *context)\n   context->printer = new (pp) c_pretty_printer ();\n \n   /* It is safe to free this object because it was previously XNEW()'d.  */\n+  base->~pretty_printer ();\n   XDELETE (base);\n }\n "}, {"sha": "69728683651afb0bfd30e182e64b0160bf59579d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/025311c4bb3ae9f00c9f4f73fecb183f07b5e93b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/025311c4bb3ae9f00c9f4f73fecb183f07b5e93b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=025311c4bb3ae9f00c9f4f73fecb183f07b5e93b", "patch": "@@ -1,3 +1,9 @@\n+2013-08-23  Gabriel Dos Reis  <gdr@integrable-solutiobs.net>\n+\n+\t* cp-objcp-common.c (cxx_initialize_diagnostics): Call a\n+\tdestructor for the early printer.\n+\t* error.c (type_to_string): Use pp_buffer.\n+\n 2013-08-22  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/56380"}, {"sha": "d70766f3a06f169ad6c3d68c9a507f2a39659ee8", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/025311c4bb3ae9f00c9f4f73fecb183f07b5e93b/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/025311c4bb3ae9f00c9f4f73fecb183f07b5e93b/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=025311c4bb3ae9f00c9f4f73fecb183f07b5e93b", "patch": "@@ -140,6 +140,7 @@ cxx_initialize_diagnostics (diagnostic_context *context)\n   context->printer = new (pp) cxx_pretty_printer ();\n \n   /* It is safe to free this object because it was previously XNEW()'d.  */\n+  base->~pretty_printer ();\n   XDELETE (base);\n }\n "}, {"sha": "c82a0cec766423c0f619cd6cb2eb01fec92e53a2", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/025311c4bb3ae9f00c9f4f73fecb183f07b5e93b/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/025311c4bb3ae9f00c9f4f73fecb183f07b5e93b/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=025311c4bb3ae9f00c9f4f73fecb183f07b5e93b", "patch": "@@ -2881,7 +2881,7 @@ type_to_string (tree typ, int verbose)\n       && !uses_template_parms (typ))\n     {\n       int aka_start; char *p;\n-      struct obstack *ob = cxx_pp->buffer->obstack;\n+      struct obstack *ob = pp_buffer (cxx_pp)->obstack;\n       /* Remember the end of the initial dump.  */\n       int len = obstack_object_size (ob);\n       tree aka = strip_typedefs (typ);"}, {"sha": "87c002a498ab6b40ba27ae1974edd87a2fa81e9b", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/025311c4bb3ae9f00c9f4f73fecb183f07b5e93b/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/025311c4bb3ae9f00c9f4f73fecb183f07b5e93b/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=025311c4bb3ae9f00c9f4f73fecb183f07b5e93b", "patch": "@@ -104,7 +104,7 @@ diagnostic_set_caret_max_width (diagnostic_context *context, int value)\n {\n   /* One minus to account for the leading empty space.  */\n   value = value ? value - 1 \n-    : (isatty (fileno (context->printer->buffer->stream))\n+    : (isatty (fileno (pp_buffer (context->printer)->stream))\n        ? getenv_columns () - 1: INT_MAX);\n   \n   if (value <= 0) "}, {"sha": "e6eb5d4ba22566650340e8b3ddc63598bf694b04", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/025311c4bb3ae9f00c9f4f73fecb183f07b5e93b/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/025311c4bb3ae9f00c9f4f73fecb183f07b5e93b/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=025311c4bb3ae9f00c9f4f73fecb183f07b5e93b", "patch": "@@ -2249,7 +2249,7 @@ gimple_dump_bb_buff (pretty_printer *buffer, basic_block bb, int indent,\n       pp_newline_and_flush (buffer);\n       gcc_checking_assert (DECL_STRUCT_FUNCTION (current_function_decl));\n       dump_histograms_for_stmt (DECL_STRUCT_FUNCTION (current_function_decl),\n-\t\t\t\tbuffer->buffer->stream, stmt);\n+\t\t\t\tpp_buffer(buffer)->stream, stmt);\n     }\n \n   dump_implicit_edges (buffer, bb, indent, flags);"}, {"sha": "05f345ca2a8b39789bca88a426e9bb365792635c", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 34, "deletions": 19, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/025311c4bb3ae9f00c9f4f73fecb183f07b5e93b/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/025311c4bb3ae9f00c9f4f73fecb183f07b5e93b/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=025311c4bb3ae9f00c9f4f73fecb183f07b5e93b", "patch": "@@ -46,9 +46,17 @@ output_buffer::output_buffer ()\n   obstack_init (&chunk_obstack);\n }\n \n+// Release resources owned by an output buffer at the end of lifetime.\n+\n+output_buffer::~output_buffer ()\n+{\n+  obstack_free (&chunk_obstack, obstack_finish (&chunk_obstack));\n+  obstack_free (&formatted_obstack, obstack_finish (&formatted_obstack));\n+}\n+\n /* A pointer to the formatted diagnostic message.  */\n #define pp_formatted_text_data(PP) \\\n-   ((const char *) obstack_base ((PP)->buffer->obstack))\n+   ((const char *) obstack_base (pp_buffer (PP)->obstack))\n \n /* Format an integer given by va_arg (ARG, type-specifier T) where\n    type-specifier is a precision modifier as indicated by PREC.  F is\n@@ -112,7 +120,7 @@ void\n pp_write_text_to_stream (pretty_printer *pp)\n {\n   const char *text = pp_formatted_text (pp);\n-  fputs (text, pp->buffer->stream);\n+  fputs (text, pp_buffer (pp)->stream);\n   pp_clear_output_area (pp);\n }\n \n@@ -130,7 +138,7 @@ pp_write_text_as_dot_label_to_stream (pretty_printer *pp, bool for_record)\n {\n   const char *text = pp_formatted_text (pp);\n   const char *p = text;\n-  FILE *fp = pp->buffer->stream;\n+  FILE *fp = pp_buffer (pp)->stream;\n \n   while (*p)\n     {\n@@ -216,8 +224,8 @@ pp_maybe_wrap_text (pretty_printer *pp, const char *start, const char *end)\n static inline void\n pp_append_r (pretty_printer *pp, const char *start, int length)\n {\n-  obstack_grow (pp->buffer->obstack, start, length);\n-  pp->buffer->line_length += length;\n+  obstack_grow (pp_buffer (pp)->obstack, start, length);\n+  pp_buffer (pp)->line_length += length;\n }\n \n /* Insert enough spaces into the output area of PRETTY-PRINTER to bring\n@@ -268,13 +276,13 @@ pp_indent (pretty_printer *pp)\n    A format string can have at most 30 arguments.  */\n \n /* Formatting phases 1 and 2: render TEXT->format_spec plus\n-   TEXT->args_ptr into a series of chunks in PP->buffer->args[].\n+   TEXT->args_ptr into a series of chunks in pp_buffer (PP)->args[].\n    Phase 3 is in pp_format_text.  */\n \n void\n pp_format (pretty_printer *pp, text_info *text)\n {\n-  output_buffer *buffer = pp->buffer;\n+  output_buffer *buffer = pp_buffer (pp);\n   const char *p;\n   const char **args;\n   struct chunk_info *new_chunk_array;\n@@ -291,7 +299,7 @@ pp_format (pretty_printer *pp, text_info *text)\n   args = new_chunk_array->args;\n \n   /* Formatting phase 1: split up TEXT->format_spec into chunks in\n-     PP->buffer->args[].  Even-numbered chunks are to be output\n+     pp_buffer (PP)->args[].  Even-numbered chunks are to be output\n      verbatim, odd-numbered chunks are format specifiers.\n      %m, %%, %<, %>, and %' are replaced with the appropriate text at\n      this point.  */\n@@ -677,7 +685,7 @@ pp_flush (pretty_printer *pp)\n {\n   pp_write_text_to_stream (pp);\n   pp_clear_state (pp);\n-  fflush (pp->buffer->stream);\n+  fflush (pp_buffer (pp)->stream);\n }\n \n /* Sets the number of maximum characters per line PRETTY-PRINTER can\n@@ -694,8 +702,9 @@ pp_set_line_maximum_length (pretty_printer *pp, int length)\n void\n pp_clear_output_area (pretty_printer *pp)\n {\n-  obstack_free (pp->buffer->obstack, obstack_base (pp->buffer->obstack));\n-  pp->buffer->line_length = 0;\n+  obstack_free (pp_buffer (pp)->obstack,\n+                obstack_base (pp_buffer (pp)->obstack));\n+  pp_buffer (pp)->line_length = 0;\n }\n \n /* Set PREFIX for PRETTY-PRINTER.  */\n@@ -773,6 +782,12 @@ pretty_printer::pretty_printer (const char *p, int l)\n   pp_set_prefix (this, p);\n }\n \n+pretty_printer::~pretty_printer ()\n+{\n+  buffer->~output_buffer ();\n+  XDELETE (buffer);\n+}\n+\n /* Append a string delimited by START and END to the output area of\n    PRETTY-PRINTER.  No line wrapping is done.  However, if beginning a\n    new line then emit PRETTY-PRINTER's prefix and skip any leading\n@@ -782,7 +797,7 @@ void\n pp_append_text (pretty_printer *pp, const char *start, const char *end)\n {\n   /* Emit prefix and skip whitespace if we're starting a new line.  */\n-  if (pp->buffer->line_length == 0)\n+  if (pp_buffer (pp)->line_length == 0)\n     {\n       pp_emit_prefix (pp);\n       if (pp_is_wrapping_line (pp))\n@@ -797,7 +812,7 @@ pp_append_text (pretty_printer *pp, const char *start, const char *end)\n const char *\n pp_formatted_text (pretty_printer *pp)\n {\n-  obstack_1grow (pp->buffer->obstack, '\\0');\n+  obstack_1grow (pp_buffer (pp)->obstack, '\\0');\n   return pp_formatted_text_data (pp);\n }\n \n@@ -807,7 +822,7 @@ const char *\n pp_last_position_in_text (const pretty_printer *pp)\n {\n   const char *p = NULL;\n-  struct obstack *text = pp->buffer->obstack;\n+  struct obstack *text = pp_buffer (pp)->obstack;\n \n   if (obstack_base (text) != obstack_next_free (text))\n     p = ((const char *) obstack_next_free (text)) - 1;\n@@ -819,7 +834,7 @@ pp_last_position_in_text (const pretty_printer *pp)\n int\n pp_remaining_character_count_for_line (pretty_printer *pp)\n {\n-  return pp->maximum_length - pp->buffer->line_length;\n+  return pp->maximum_length - pp_buffer (pp)->line_length;\n }\n \n \n@@ -863,9 +878,9 @@ pp_verbatim (pretty_printer *pp, const char *msg, ...)\n void\n pp_newline (pretty_printer *pp)\n {\n-  obstack_1grow (pp->buffer->obstack, '\\n');\n+  obstack_1grow (pp_buffer (pp)->obstack, '\\n');\n   pp_needs_newline (pp) = false;\n-  pp->buffer->line_length = 0;\n+  pp_buffer (pp)->line_length = 0;\n }\n \n /* Have PRETTY-PRINTER add a CHARACTER.  */\n@@ -879,8 +894,8 @@ pp_character (pretty_printer *pp, int c)\n       if (ISSPACE (c))\n         return;\n     }\n-  obstack_1grow (pp->buffer->obstack, c);\n-  ++pp->buffer->line_length;\n+  obstack_1grow (pp_buffer (pp)->obstack, c);\n+  ++pp_buffer (pp)->line_length;\n }\n \n /* Append a STRING to the output area of PRETTY-PRINTER; the STRING may"}, {"sha": "a60be3285eaa8d1ace4554227690801d1d35db52", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/025311c4bb3ae9f00c9f4f73fecb183f07b5e93b/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/025311c4bb3ae9f00c9f4f73fecb183f07b5e93b/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=025311c4bb3ae9f00c9f4f73fecb183f07b5e93b", "patch": "@@ -74,6 +74,7 @@ struct chunk_info\n struct output_buffer\n {\n   output_buffer ();\n+  ~output_buffer ();\n \n   /* Obstack where the text is built up.  */\n   struct obstack formatted_obstack;\n@@ -165,6 +166,8 @@ struct pretty_printer\n   // and a maximum line length cut off limit.\n   explicit pretty_printer (const char* = NULL, int = 0);\n \n+  virtual ~pretty_printer ();\n+\n   /* Where we print external representation of ENTITY.  */\n   output_buffer *buffer;\n "}]}