{"sha": "a944b5dec3adb28ed199234d2116145ca9010d6a", "node_id": "C_kwDOANBUbNoAKGE5NDRiNWRlYzNhZGIyOGVkMTk5MjM0ZDIxMTYxNDVjYTkwMTBkNmE", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-11-22T18:15:36Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-11-22T18:15:36Z"}, "message": "tree-optimization/103345: Improved load merging.\n\nThis patch implements PR tree-optimization/103345 to merge adjacent\nloads when combined with addition or bitwise xor.  The current code\nin gimple-ssa-store-merging.c's find_bswap_or_nop alreay handles ior,\nso that all that's required is to treat PLUS_EXPR and BIT_XOR_EXPR in\nthe same way at BIT_IOR_EXPR.  Many thanks to Andrew Pinski for\npointing out that this also resolves PR target/98953.\n\n2021-11-22  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR tree-optimization/98953\n\tPR tree-optimization/103345\n\t* gimple-ssa-store-merging.c (find_bswap_or_nop_1): Handle\n\tBIT_XOR_EXPR and PLUS_EXPR the same as BIT_IOR_EXPR.\n\t(pass_optimize_bswap::execute): Likewise.\n\ngcc/testsuite/ChangeLog\n\tPR tree-optimization/98953\n\tPR tree-optimization/103345\n\t* gcc.dg/tree-ssa/pr98953.c: New test case.\n\t* gcc.dg/tree-ssa/pr103345.c: New test case.", "tree": {"sha": "aade15bd5db9cca99b081074a5e27fd5abbfd999", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aade15bd5db9cca99b081074a5e27fd5abbfd999"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a944b5dec3adb28ed199234d2116145ca9010d6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a944b5dec3adb28ed199234d2116145ca9010d6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a944b5dec3adb28ed199234d2116145ca9010d6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a944b5dec3adb28ed199234d2116145ca9010d6a/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c38c547a708d9f144ba36f54d3d6ab5f5995966f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c38c547a708d9f144ba36f54d3d6ab5f5995966f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c38c547a708d9f144ba36f54d3d6ab5f5995966f"}], "stats": {"total": 76, "additions": 72, "deletions": 4}, "files": [{"sha": "1740c9ee1c1b3946a890baf9777b150677c6ddaf", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a944b5dec3adb28ed199234d2116145ca9010d6a/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a944b5dec3adb28ed199234d2116145ca9010d6a/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=a944b5dec3adb28ed199234d2116145ca9010d6a", "patch": "@@ -742,17 +742,16 @@ find_bswap_or_nop_1 (gimple *stmt, struct symbolic_number *n, int limit)\n       struct symbolic_number n1, n2;\n       gimple *source_stmt, *source_stmt2;\n \n-      if (code != BIT_IOR_EXPR)\n-\treturn NULL;\n-\n-      if (TREE_CODE (rhs2) != SSA_NAME)\n+      if (!rhs2 || TREE_CODE (rhs2) != SSA_NAME)\n \treturn NULL;\n \n       rhs2_stmt = SSA_NAME_DEF_STMT (rhs2);\n \n       switch (code)\n \t{\n \tcase BIT_IOR_EXPR:\n+\tcase BIT_XOR_EXPR:\n+\tcase PLUS_EXPR:\n \t  source_stmt1 = find_bswap_or_nop_1 (rhs1_stmt, &n1, limit - 1);\n \n \t  if (!source_stmt1)\n@@ -1495,6 +1494,8 @@ pass_optimize_bswap::execute (function *fun)\n \t\tcontinue;\n \t      /* Fall through.  */\n \t    case BIT_IOR_EXPR:\n+\t    case BIT_XOR_EXPR:\n+\t    case PLUS_EXPR:\n \t      break;\n \t    case CONSTRUCTOR:\n \t      {"}, {"sha": "94388b541c1e2b6730c1c6d2f76068b0722152e2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr103345.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a944b5dec3adb28ed199234d2116145ca9010d6a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr103345.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a944b5dec3adb28ed199234d2116145ca9010d6a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr103345.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr103345.c?ref=a944b5dec3adb28ed199234d2116145ca9010d6a", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-bswap-details\" } */\n+\n+typedef unsigned int uint32_t;\n+typedef unsigned char uint8_t;\n+\n+uint32_t load_le_32_or(const uint8_t *ptr)\n+{\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  return ((uint32_t)ptr[0]) |\n+         ((uint32_t)ptr[1] << 8) |\n+         ((uint32_t)ptr[2] << 16) |\n+         ((uint32_t)ptr[3] << 24);\n+#else\n+  return ((uint32_t)ptr[3]) |\n+         ((uint32_t)ptr[2] << 8) |\n+         ((uint32_t)ptr[1] << 16) |\n+         ((uint32_t)ptr[0] << 24);\n+#endif\n+}\n+\n+uint32_t load_le_32_add(const uint8_t *ptr)\n+{\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  return ((uint32_t)ptr[0]) +\n+         ((uint32_t)ptr[1] << 8) +\n+         ((uint32_t)ptr[2] << 16) +\n+         ((uint32_t)ptr[3] << 24);\n+#else\n+  return ((uint32_t)ptr[3]) +\n+         ((uint32_t)ptr[2] << 8) +\n+         ((uint32_t)ptr[1] << 16) +\n+         ((uint32_t)ptr[0] << 24);\n+#endif\n+}\n+\n+uint32_t load_le_32_xor(const uint8_t *ptr)\n+{\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  return ((uint32_t)ptr[0]) ^\n+         ((uint32_t)ptr[1] << 8) ^\n+         ((uint32_t)ptr[2] << 16) ^\n+         ((uint32_t)ptr[3] << 24);\n+#else\n+  return ((uint32_t)ptr[0]) ^\n+         ((uint32_t)ptr[1] << 8) ^\n+         ((uint32_t)ptr[2] << 16) ^\n+         ((uint32_t)ptr[3] << 24);\n+#endif\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"32 bit load in target endianness found\" 3 \"bswap\" } } */\n+"}, {"sha": "7687dc2871db020669f8f75eb75b41a5e7da4cd8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr98953.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a944b5dec3adb28ed199234d2116145ca9010d6a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr98953.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a944b5dec3adb28ed199234d2116145ca9010d6a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr98953.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr98953.c?ref=a944b5dec3adb28ed199234d2116145ca9010d6a", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-bswap-details\" } */\n+\n+int foo(unsigned char *ptr)\n+{\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+    return ptr[0] + (ptr[1] << 8);\n+#else\n+    return ptr[1] + (ptr[0] << 8);\n+#endif\n+}\n+\n+/* { dg-final { scan-tree-dump \"16 bit load in target endianness found\" \"bswap\" } } */\n+"}]}