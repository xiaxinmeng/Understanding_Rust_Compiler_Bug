{"sha": "56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZiNjFkN2ZjNGYzOGMxYTNmZDUxYmYzMzE1YjAzMzg1MTNhMmQyZA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-08-09T15:32:13Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-08-09T15:32:13Z"}, "message": "diagnostics: add line numbers to source (PR other/84889)\n\nThis patch adds a left margin to the lines of source (and annotations)\nprinted by diagnostic_show_locus, so that e.g. rather than:\n\ntest.c: In function 'test':\ntest.c:12:15: error: 'struct foo' has no member named 'm_bar'; did you mean 'bar'?\n   return ptr->m_bar;\n               ^~~~~\n               bar\n\nwe print:\n\ntest.c: In function 'test':\ntest.c:12:15: error: 'struct foo' has no member named 'm_bar'; did you mean 'bar'?\n12 |   return ptr->m_bar;\n   |               ^~~~~\n   |               bar\n\nSimilarly, for a multiline case (in C++ this time), this:\n\nbad-binary-ops.C: In function 'int test_2()':\nbad-binary-ops.C:26:4: error: no match for 'operator+' (operand types are 's' and 't')\n   return (some_function ()\n           ~~~~~~~~~~~~~~~~\n    + some_other_function ());\n    ^~~~~~~~~~~~~~~~~~~~~~~~\n\nbecomes:\n\nbad-binary-ops.C: In function 'int test_2()':\nbad-binary-ops.C:26:4: error: no match for 'operator+' (operand types are 's' and 't')\n25 |   return (some_function ()\n   |           ~~~~~~~~~~~~~~~~\n26 |    + some_other_function ());\n   |    ^~~~~~~~~~~~~~~~~~~~~~~~\n\nI believe this slightly improves the readability of the output, in that it:\n- distinguishes between the user's source code vs the annotation lines\n  that we're adding (the underlinings and fix-it hints here)\n- shows the line numbers in another place (potentially helpful for\n  multiline diagnostics, where the user can see the line numbers directly,\n  rather than have to figure them out relative to the caret: in the 2nd\n  example, note how the diagnostic is reported at line 26, but the first\n  line printed is actually line 25)\n\nI'm not sure that this is the precise format we want to go with [1], but\nI think it's an improvement over the status quo, and we're in stage 1\nof gcc 9, so there's plenty of time to shake out issues.\n\nI've turned it on by default; it can be disabled via\n-fno-diagnostics-show-line-numbers (it's also turned off in the testsuite, to\navoid breaking numerous existing test cases).\n\n[1] Some possible variants:\n  - maybe just \"LL|\" rather than \"LL | \"\n  - maybe ':' rather than '|'\n  - maybe we should have some leading indentation, to better split up\n    the diagnostics visually via the left-hand column\n  - etc\n\ngcc/ChangeLog:\n\tPR other/84889\n\t* common.opt (fdiagnostics-show-line-numbers): New option.\n\t* diagnostic-show-locus.c (class layout): Add fields\n\t\"m_show_line_numbers_p\" and \"m_linenum_width\";\n\t(num_digits): New function.\n\t(test_num_digits): New function.\n\t(layout::layout): Initialize new fields.  Update m_x_offset\n\tlogic to handle any left margin.\n\t(layout::print_source_line): Print line number when requested.\n\t(layout::start_annotation_line): New member function.\n\t(layout::print_annotation_line): Call it.\n\t(layout::print_leading_fixits): Likewise.\n\t(layout::print_trailing_fixits): Likewise.  Update calls to\n\tmove_to_column for new parameter.\n\t(layout::get_x_bound_for_row): Add \"add_left_margin\" param and use\n\tit to potentially call start_annotation_line.\n\t(layout::show_ruler): Call start_annotation_line.\n\t(selftest::test_line_numbers_multiline_range): New selftest.\n\t(selftest::diagnostic_show_locus_c_tests): Call test_num_digits\n\tand selftest::test_line_numbers_multiline_range.\n\t* diagnostic.c (diagnostic_initialize): Initialize\n\tshow_line_numbers_p.\n\t* diagnostic.h (struct diagnostic_context): Add field\n\t\"show_line_numbers_p\".\n\t* doc/invoke.texi (Diagnostic Message Formatting Options): Add\n\t-fno-diagnostics-show-line-numbers.\n\t* dwarf2out.c (gen_producer_string): Add\n\tOPT_fdiagnostics_show_line_numbers to the ignored options.\n\t* lto-wrapper.c (merge_and_complain): Likewise to the \"pick\n\tone setting\" options.\n\t(append_compiler_options): Likewise to the dropped options.\n\t(append_diag_options): Likewise to the passed-on options.\n\t* opts.c (common_handle_option): Handle the new option.\n\t* toplev.c (general_init): Set up global_dc->show_line_numbers_p.\n\ngcc/testsuite/ChangeLog:\n\tPR other/84889\n\t* gcc.dg/plugin/diagnostic-test-show-locus-bw-line-numbers.c: New\n\ttest.\n\t* gcc.dg/plugin/diagnostic-test-show-locus-color-line-numbers.c:\n\tNew test.\n\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Add the new tests.\n\t* lib/prune.exp: Add -fno-diagnostics-show-line-numbers to\n\tTEST_ALWAYS_FLAGS.\n\nFrom-SVN: r263450", "tree": {"sha": "3a901a8ad0ba76dceac452206c01cd7eb3541b5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a901a8ad0ba76dceac452206c01cd7eb3541b5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f4b905f0107b2a701c630787e378752cc2a3b181", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4b905f0107b2a701c630787e378752cc2a3b181", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4b905f0107b2a701c630787e378752cc2a3b181"}], "stats": {"total": 383, "additions": 373, "deletions": 10}, "files": [{"sha": "dd088bb46a8a09d3425b2a9ee6e51e6506a68aa2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d", "patch": "@@ -1,3 +1,40 @@\n+2018-08-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR other/84889\n+\t* common.opt (fdiagnostics-show-line-numbers): New option.\n+\t* diagnostic-show-locus.c (class layout): Add fields\n+\t\"m_show_line_numbers_p\" and \"m_linenum_width\";\n+\t(num_digits): New function.\n+\t(test_num_digits): New function.\n+\t(layout::layout): Initialize new fields.  Update m_x_offset\n+\tlogic to handle any left margin.\n+\t(layout::print_source_line): Print line number when requested.\n+\t(layout::start_annotation_line): New member function.\n+\t(layout::print_annotation_line): Call it.\n+\t(layout::print_leading_fixits): Likewise.\n+\t(layout::print_trailing_fixits): Likewise.  Update calls to\n+\tmove_to_column for new parameter.\n+\t(layout::get_x_bound_for_row): Add \"add_left_margin\" param and use\n+\tit to potentially call start_annotation_line.\n+\t(layout::show_ruler): Call start_annotation_line.\n+\t(selftest::test_line_numbers_multiline_range): New selftest.\n+\t(selftest::diagnostic_show_locus_c_tests): Call test_num_digits\n+\tand selftest::test_line_numbers_multiline_range.\n+\t* diagnostic.c (diagnostic_initialize): Initialize\n+\tshow_line_numbers_p.\n+\t* diagnostic.h (struct diagnostic_context): Add field\n+\t\"show_line_numbers_p\".\n+\t* doc/invoke.texi (Diagnostic Message Formatting Options): Add\n+\t-fno-diagnostics-show-line-numbers.\n+\t* dwarf2out.c (gen_producer_string): Add\n+\tOPT_fdiagnostics_show_line_numbers to the ignored options.\n+\t* lto-wrapper.c (merge_and_complain): Likewise to the \"pick\n+\tone setting\" options.\n+\t(append_compiler_options): Likewise to the dropped options.\n+\t(append_diag_options): Likewise to the passed-on options.\n+\t* opts.c (common_handle_option): Handle the new option.\n+\t* toplev.c (general_init): Set up global_dc->show_line_numbers_p.\n+\n 2018-08-09  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* doc/extend.texi (PowerPC AltiVec Built-in Functions Available on"}, {"sha": "b2f2215ecc6fafe4e9d0707a227d31bb9ea217b8", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d", "patch": "@@ -1233,6 +1233,10 @@ fdiagnostics-show-caret\n Common Var(flag_diagnostics_show_caret) Init(1)\n Show the source line with a caret indicating the column.\n \n+fdiagnostics-show-line-numbers\n+Common Var(flag_diagnostics_show_line_numbers) Init(1)\n+Show line numbers in the left margin when showing source\n+\n fdiagnostics-color\n Common Alias(fdiagnostics-color=,always,never)\n ;"}, {"sha": "238c689be1ac10efb8994cf636aff02a6a923f03", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 155, "deletions": 8, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d", "patch": "@@ -251,6 +251,7 @@ class layout\n   void print_source_line (linenum_type row, const char *line, int line_width,\n \t\t\t  line_bounds *lbounds_out);\n   bool should_print_annotation_line_p (linenum_type row) const;\n+  void start_annotation_line () const;\n   void print_annotation_line (linenum_type row, const line_bounds lbounds);\n   void print_trailing_fixits (linenum_type row);\n \n@@ -276,7 +277,7 @@ class layout\n \t\t       int last_non_ws);\n \n   void\n-  move_to_column (int *column, int dest_column);\n+  move_to_column (int *column, int dest_column, bool add_left_margin);\n \n  private:\n   diagnostic_context *m_context;\n@@ -286,9 +287,11 @@ class layout\n   expanded_location m_exploc;\n   colorizer m_colorizer;\n   bool m_colorize_source_p;\n+  bool m_show_line_numbers_p;\n   auto_vec <layout_range> m_layout_ranges;\n   auto_vec <const fixit_hint *> m_fixit_hints;\n   auto_vec <line_span> m_line_spans;\n+  int m_linenum_width;\n   int m_x_offset;\n };\n \n@@ -805,6 +808,56 @@ fixit_cmp (const void *p_a, const void *p_b)\n   return hint_a->get_start_loc () - hint_b->get_start_loc ();\n }\n \n+/* Get the number of digits in the decimal representation\n+   of VALUE.  */\n+\n+static int\n+num_digits (int value)\n+{\n+  /* Perhaps simpler to use log10 for this, but doing it this way avoids\n+     using floating point.  */\n+  gcc_assert (value >= 0);\n+\n+  if (value == 0)\n+    return 1;\n+\n+  int digits = 0;\n+  while (value > 0)\n+    {\n+      digits++;\n+      value /= 10;\n+    }\n+  return digits;\n+}\n+\n+\n+#if CHECKING_P\n+\n+/* Selftest for num_digits.  */\n+\n+static void\n+test_num_digits ()\n+{\n+  ASSERT_EQ (1, num_digits (0));\n+  ASSERT_EQ (1, num_digits (9));\n+  ASSERT_EQ (2, num_digits (10));\n+  ASSERT_EQ (2, num_digits (99));\n+  ASSERT_EQ (3, num_digits (100));\n+  ASSERT_EQ (3, num_digits (999));\n+  ASSERT_EQ (4, num_digits (1000));\n+  ASSERT_EQ (4, num_digits (9999));\n+  ASSERT_EQ (5, num_digits (10000));\n+  ASSERT_EQ (5, num_digits (99999));\n+  ASSERT_EQ (6, num_digits (100000));\n+  ASSERT_EQ (6, num_digits (999999));\n+  ASSERT_EQ (7, num_digits (1000000));\n+  ASSERT_EQ (7, num_digits (9999999));\n+  ASSERT_EQ (8, num_digits (10000000));\n+  ASSERT_EQ (8, num_digits (99999999));\n+}\n+\n+#endif /* #if CHECKING_P */\n+\n /* Implementation of class layout.  */\n \n /* Constructor for class layout.\n@@ -826,9 +879,11 @@ layout::layout (diagnostic_context * context,\n   m_exploc (richloc->get_expanded_location (0)),\n   m_colorizer (context, diagnostic_kind),\n   m_colorize_source_p (context->colorize_source_p),\n+  m_show_line_numbers_p (context->show_line_numbers_p),\n   m_layout_ranges (richloc->get_num_locations ()),\n   m_fixit_hints (richloc->get_num_fixit_hints ()),\n   m_line_spans (1 + richloc->get_num_locations ()),\n+  m_linenum_width (0),\n   m_x_offset (0)\n {\n   for (unsigned int idx = 0; idx < richloc->get_num_locations (); idx++)\n@@ -854,6 +909,14 @@ layout::layout (diagnostic_context * context,\n   /* Populate m_line_spans.  */\n   calculate_line_spans ();\n \n+  /* Determine m_linenum_width.  */\n+  gcc_assert (m_line_spans.length () > 0);\n+  const line_span *last_span = &m_line_spans[m_line_spans.length () - 1];\n+  int highest_line = last_span->m_last_line;\n+  if (highest_line < 0)\n+    highest_line = 0;\n+  m_linenum_width = num_digits (highest_line);\n+\n   /* Adjust m_x_offset.\n      Center the primary caret to fit in max_width; all columns\n      will be adjusted accordingly.  */\n@@ -863,6 +926,8 @@ layout::layout (diagnostic_context * context,\n     {\n       size_t right_margin = CARET_LINE_MARGIN;\n       size_t column = m_exploc.column;\n+      if (m_show_line_numbers_p)\n+\tcolumn += m_linenum_width + 2;\n       right_margin = MIN (line.length () - column, right_margin);\n       right_margin = max_width - right_margin;\n       if (line.length () >= max_width && column > right_margin)\n@@ -1183,7 +1248,15 @@ layout::print_source_line (linenum_type row, const char *line, int line_width,\n \t\t\t\t\t\t\t   line_width);\n   line += m_x_offset;\n \n-  pp_space (m_pp);\n+  if (m_show_line_numbers_p)\n+    {\n+      int width = num_digits (row);\n+      for (int i = 0; i < m_linenum_width - width; i++)\n+\tpp_space (m_pp);\n+      pp_printf (m_pp, \"%i | \", row);\n+    }\n+  else\n+    pp_space (m_pp);\n   int first_non_ws = INT_MAX;\n   int last_non_ws = 0;\n   int column;\n@@ -1245,6 +1318,20 @@ layout::should_print_annotation_line_p (linenum_type row) const\n   return false;\n }\n \n+/* Begin an annotation line.  If m_show_line_numbers_p, print the left\n+   margin, which is empty for annotation lines.  Otherwise, do nothing.  */\n+\n+void\n+layout::start_annotation_line () const\n+{\n+  if (m_show_line_numbers_p)\n+    {\n+      for (int i = 0; i < m_linenum_width; i++)\n+\tpp_space (m_pp);\n+      pp_string (m_pp, \" |\");\n+    }\n+}\n+\n /* Print a line consisting of the caret/underlines for the given\n    source line.  */\n \n@@ -1254,7 +1341,9 @@ layout::print_annotation_line (linenum_type row, const line_bounds lbounds)\n   int x_bound = get_x_bound_for_row (row, m_exploc.column,\n \t\t\t\t     lbounds.m_last_non_ws);\n \n+  start_annotation_line ();\n   pp_space (m_pp);\n+\n   for (int column = 1 + m_x_offset; column < x_bound; column++)\n     {\n       bool in_range_p;\n@@ -1316,6 +1405,7 @@ layout::print_leading_fixits (linenum_type row)\n \t     helps them stand out from each other, and from\n \t     the surrounding text.  */\n \t  m_colorizer.set_normal_text ();\n+\t  start_annotation_line ();\n \t  pp_character (m_pp, '+');\n \t  m_colorizer.set_fixit_insert ();\n \t  /* Print all but the trailing newline of the fix-it hint.\n@@ -1712,14 +1802,17 @@ layout::print_trailing_fixits (linenum_type row)\n   correction *c;\n   int column = m_x_offset;\n \n+  if (!corrections.m_corrections.is_empty ())\n+    start_annotation_line ();\n+\n   FOR_EACH_VEC_ELT (corrections.m_corrections, i, c)\n     {\n       /* For now we assume each fixit hint can only touch one line.  */\n       if (c->insertion_p ())\n \t{\n \t  /* This assumes the insertion just affects one line.  */\n \t  int start_column = c->m_printed_columns.start;\n-\t  move_to_column (&column, start_column);\n+\t  move_to_column (&column, start_column, true);\n \t  m_colorizer.set_fixit_insert ();\n \t  pp_string (m_pp, c->m_text);\n \t  m_colorizer.set_normal_text ();\n@@ -1737,7 +1830,7 @@ layout::print_trailing_fixits (linenum_type row)\n \t\t\t\t\t       finish_column)\n \t      || c->m_len == 0)\n \t    {\n-\t      move_to_column (&column, start_column);\n+\t      move_to_column (&column, start_column, true);\n \t      m_colorizer.set_fixit_delete ();\n \t      for (; column <= finish_column; column++)\n \t\tpp_character (m_pp, '-');\n@@ -1748,7 +1841,7 @@ layout::print_trailing_fixits (linenum_type row)\n \t     a new line) if we have actual replacement text.  */\n \t  if (c->m_len > 0)\n \t    {\n-\t      move_to_column (&column, start_column);\n+\t      move_to_column (&column, start_column, true);\n \t      m_colorizer.set_fixit_insert ();\n \t      pp_string (m_pp, c->m_text);\n \t      m_colorizer.set_normal_text ();\n@@ -1758,7 +1851,7 @@ layout::print_trailing_fixits (linenum_type row)\n     }\n \n   /* Add a trailing newline, if necessary.  */\n-  move_to_column (&column, 0);\n+  move_to_column (&column, 0, false);\n }\n \n /* Disable any colorization and emit a newline.  */\n@@ -1855,15 +1948,18 @@ layout::get_x_bound_for_row (linenum_type row, int caret_column,\n \n /* Given *COLUMN as an x-coordinate, print spaces to position\n    successive output at DEST_COLUMN, printing a newline if necessary,\n-   and updating *COLUMN.  */\n+   and updating *COLUMN.  If ADD_LEFT_MARGIN, then print the (empty)\n+   left margin after any newline.  */\n \n void\n-layout::move_to_column (int *column, int dest_column)\n+layout::move_to_column (int *column, int dest_column, bool add_left_margin)\n {\n   /* Start a new line if we need to.  */\n   if (*column > dest_column)\n     {\n       print_newline ();\n+      if (add_left_margin)\n+\tstart_annotation_line ();\n       *column = m_x_offset;\n     }\n \n@@ -1883,6 +1979,7 @@ layout::show_ruler (int max_column) const\n   /* Hundreds.  */\n   if (max_column > 99)\n     {\n+      start_annotation_line ();\n       pp_space (m_pp);\n       for (int column = 1 + m_x_offset; column <= max_column; column++)\n \tif (column % 10 == 0)\n@@ -1893,6 +1990,7 @@ layout::show_ruler (int max_column) const\n     }\n \n   /* Tens.  */\n+  start_annotation_line ();\n   pp_space (m_pp);\n   for (int column = 1 + m_x_offset; column <= max_column; column++)\n     if (column % 10 == 0)\n@@ -1902,6 +2000,7 @@ layout::show_ruler (int max_column) const\n   pp_newline (m_pp);\n \n   /* Units.  */\n+  start_annotation_line ();\n   pp_space (m_pp);\n   for (int column = 1 + m_x_offset; column <= max_column; column++)\n     pp_character (m_pp, '0' + (column % 10));\n@@ -3139,12 +3238,58 @@ test_fixit_deletion_affecting_newline (const line_table_case &case_)\n \t\tpp_formatted_text (dc.printer));\n }\n \n+/* Verify that line numbers are correctly printed for the case of\n+   a multiline range in which the width of the line numbers changes\n+   (e.g. from \"9\" to \"10\").  */\n+\n+static void\n+test_line_numbers_multiline_range ()\n+{\n+  /* Create a tempfile and write some text to it.  */\n+  pretty_printer pp;\n+  for (int i = 0; i < 20; i++)\n+    /* .........0000000001111111.\n+   .............1234567890123456.  */\n+    pp_printf (&pp, \"this is line %i\\n\", i + 1);\n+  temp_source_file tmp (SELFTEST_LOCATION, \".txt\", pp_formatted_text (&pp));\n+  line_table_test ltt;\n+\n+  const line_map_ordinary *ord_map = linemap_check_ordinary\n+    (linemap_add (line_table, LC_ENTER, false, tmp.get_filename (), 0));\n+  linemap_line_start (line_table, 1, 100);\n+\n+  /* Create a multi-line location, starting at the \"line\" of line 9, with\n+     a caret on the \"is\" of line 10, finishing on the \"this\" line 11.  */\n+\n+  location_t start\n+    = linemap_position_for_line_and_column (line_table, ord_map, 9, 9);\n+  location_t caret\n+    = linemap_position_for_line_and_column (line_table, ord_map, 10, 6);\n+  location_t finish\n+    = linemap_position_for_line_and_column (line_table, ord_map, 11, 4);\n+  location_t loc = make_location (caret, start, finish);\n+\n+  test_diagnostic_context dc;\n+  dc.show_line_numbers_p = true;\n+  gcc_rich_location richloc (loc);\n+  diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+  ASSERT_STREQ (\"\\n\"\n+\t\t\" 9 | this is line 9\\n\"\n+\t\t\"   |         ~~~~~~\\n\"\n+\t\t\"10 | this is line 10\\n\"\n+\t\t\"   | ~~~~~^~~~~~~~~~\\n\"\n+\t\t\"11 | this is line 11\\n\"\n+\t\t\"   | ~~~~  \\n\",\n+\t\tpp_formatted_text (dc.printer));\n+}\n+\n /* Run all of the selftests within this file.  */\n \n void\n diagnostic_show_locus_c_tests ()\n {\n   test_line_span ();\n+  test_num_digits ();\n \n   test_layout_range_for_single_point ();\n   test_layout_range_for_single_line ();\n@@ -3164,6 +3309,8 @@ diagnostic_show_locus_c_tests ()\n   for_each_line_table_case (test_fixit_insert_containing_newline_2);\n   for_each_line_table_case (test_fixit_replace_containing_newline);\n   for_each_line_table_case (test_fixit_deletion_affecting_newline);\n+\n+  test_line_numbers_multiline_range ();\n }\n \n } // namespace selftest"}, {"sha": "e9d93d531d5125c5d3d15d455e49a847d9fecf71", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d", "patch": "@@ -175,6 +175,7 @@ diagnostic_initialize (diagnostic_context *context, int n_opts)\n   context->lock = 0;\n   context->inhibit_notes_p = false;\n   context->colorize_source_p = false;\n+  context->show_line_numbers_p = false;\n   context->show_ruler_p = false;\n   context->parseable_fixits_p = false;\n   context->edit_context_ptr = NULL;"}, {"sha": "744aec1a68f788589097013fccc2b24f0323b2fe", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d", "patch": "@@ -204,6 +204,10 @@ struct diagnostic_context\n      a token, which would look strange).  */\n   bool colorize_source_p;\n \n+  /* When printing source code, should there be a left-hand margin\n+     showing line numbers?  */\n+  bool show_line_numbers_p;\n+\n   /* Usable by plugins; if true, print a debugging ruler above the\n      source output.  */\n   bool show_ruler_p;"}, {"sha": "0e9a9c3e2f7ff68ef229cedd88e1126b8f864688", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d", "patch": "@@ -267,6 +267,7 @@ Objective-C and Objective-C++ Dialects}.\n -fdiagnostics-show-location=@r{[}once@r{|}every-line@r{]}  @gol\n -fdiagnostics-color=@r{[}auto@r{|}never@r{|}always@r{]}  @gol\n -fno-diagnostics-show-option  -fno-diagnostics-show-caret @gol\n+-fno-diagnostics-show-line-numbers @gol\n -fdiagnostics-parseable-fixits  -fdiagnostics-generate-patch @gol\n -fdiagnostics-show-template-tree -fno-elide-type @gol\n -fno-show-column}\n@@ -3710,6 +3711,13 @@ the @option{-fmessage-length=n} option is given.  When the output is done\n to the terminal, the width is limited to the width given by the\n @env{COLUMNS} environment variable or, if not set, to the terminal width.\n \n+@item -fno-diagnostics-show-line-numbers\n+@opindex fno-diagnostics-show-line-numbers\n+@opindex fdiagnostics-show-line-numbers\n+By default, when printing source code (via @option{-fdiagnostics-show-caret}),\n+a left margin is printed, showing line numbers.  This option suppresses this\n+left margin.\n+\n @item -fdiagnostics-parseable-fixits\n @opindex fdiagnostics-parseable-fixits\n Emit fix-it hints in a machine-parseable format, suitable for consumption"}, {"sha": "9ed473088e739ba95658dc0e0f794d82f62785ee", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d", "patch": "@@ -24247,6 +24247,7 @@ gen_producer_string (void)\n       case OPT_fdiagnostics_show_location_:\n       case OPT_fdiagnostics_show_option:\n       case OPT_fdiagnostics_show_caret:\n+      case OPT_fdiagnostics_show_line_numbers:\n       case OPT_fdiagnostics_color_:\n       case OPT_fverbose_asm:\n       case OPT____:"}, {"sha": "39d9f088bc6d3a06e5a543eae41ee355f2ef3869", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d", "patch": "@@ -255,6 +255,7 @@ merge_and_complain (struct cl_decoded_option **decoded_options,\n \n \t  /* Fallthru.  */\n \tcase OPT_fdiagnostics_show_caret:\n+\tcase OPT_fdiagnostics_show_line_numbers:\n \tcase OPT_fdiagnostics_show_option:\n \tcase OPT_fdiagnostics_show_location_:\n \tcase OPT_fshow_column:\n@@ -536,6 +537,7 @@ append_compiler_options (obstack *argv_obstack, struct cl_decoded_option *opts,\n       switch (option->opt_index)\n \t{\n \tcase OPT_fdiagnostics_show_caret:\n+\tcase OPT_fdiagnostics_show_line_numbers:\n \tcase OPT_fdiagnostics_show_option:\n \tcase OPT_fdiagnostics_show_location_:\n \tcase OPT_fshow_column:\n@@ -582,6 +584,7 @@ append_diag_options (obstack *argv_obstack, struct cl_decoded_option *opts,\n \t{\n \tcase OPT_fdiagnostics_color_:\n \tcase OPT_fdiagnostics_show_caret:\n+\tcase OPT_fdiagnostics_show_line_numbers:\n \tcase OPT_fdiagnostics_show_option:\n \tcase OPT_fdiagnostics_show_location_:\n \tcase OPT_fshow_column:"}, {"sha": "4153263fcab9841edfed27e2a0d5d81139de2b30", "filename": "gcc/opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d", "patch": "@@ -2175,6 +2175,10 @@ common_handle_option (struct gcc_options *opts,\n       dc->show_caret = value;\n       break;\n \n+    case OPT_fdiagnostics_show_line_numbers:\n+      dc->show_line_numbers_p = value;\n+      break;\n+\n     case OPT_fdiagnostics_color_:\n       diagnostic_color_init (dc, value);\n       break;"}, {"sha": "3da9f3baa36537582953a61e1e83ac581dc9b761", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d", "patch": "@@ -1,3 +1,14 @@\n+2018-08-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR other/84889\n+\t* gcc.dg/plugin/diagnostic-test-show-locus-bw-line-numbers.c: New\n+\ttest.\n+\t* gcc.dg/plugin/diagnostic-test-show-locus-color-line-numbers.c:\n+\tNew test.\n+\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Add the new tests.\n+\t* lib/prune.exp: Add -fno-diagnostics-show-line-numbers to\n+\tTEST_ALWAYS_FLAGS.\n+\n 2018-08-09  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/86858"}, {"sha": "66a2faae40dc4c63f83206448a9dd2362ae82b92", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-show-locus-bw-line-numbers.c", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-bw-line-numbers.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-bw-line-numbers.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-bw-line-numbers.c?ref=56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d", "patch": "@@ -0,0 +1,115 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdiagnostics-show-caret -fdiagnostics-show-line-numbers\" } */\n+\n+/* This is a collection of unittests for diagnostic_show_locus;\n+   see the overview in diagnostic_plugin_test_show_locus.c.\n+\n+   In particular, note the discussion of why we need a very long line here:\n+01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\n+   and that we can't use macros in this file.  */\n+\n+void test_simple (void)\n+{\n+#if 0\n+  myvar = myvar.x; /* { dg-warning \"test\" } */\n+\n+/* { dg-begin-multiline-output \"\" }\n+14 |   myvar = myvar.x;\n+   |           ~~~~~^~\n+   { dg-end-multiline-output \"\" } */\n+#endif\n+}\n+\n+void test_multiline (void)\n+{\n+#if 0\n+  x = (first_function ()\n+       + second_function ()); /* { dg-warning \"test\" } */\n+\n+/* { dg-begin-multiline-output \"\" }\n+26 |   x = (first_function ()\n+   |        ~~~~~~~~~~~~~~~~~\n+27 |        + second_function ());\n+   |        ^ ~~~~~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+#endif\n+}\n+\n+void test_very_wide_line (void)\n+{\n+#if 0\n+                                                                                float f = foo * bar; /* { dg-warning \"95: test\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   | 0         0         0         0         0         0         1         \n+   | 4         5         6         7         8         9         0         \n+   | 0123456789012345678901234567890123456789012345678901234567890123456789\n+41 |                                          float f = foo * bar;\n+   |                                                    ~~~~^~~~~\n+   |                                                    bar * foo\n+   { dg-end-multiline-output \"\" } */\n+#endif\n+}\n+\n+/* Unit test for rendering of insertion fixit hints\n+   (example taken from PR 62316).  */\n+\n+void test_fixit_insert (void)\n+{\n+#if 0\n+   int a[2][2] = { 0, 1 , 2, 3 }; /* { dg-warning \"insertion hints\" } */\n+/* { dg-begin-multiline-output \"\" }\n+59 |    int a[2][2] = { 0, 1 , 2, 3 };\n+   |                    ^~~~\n+   |                    {   }\n+   { dg-end-multiline-output \"\" } */\n+#endif\n+}\n+\n+/* Unit test for rendering of \"remove\" fixit hints.  */\n+\n+void test_fixit_remove (void)\n+{\n+#if 0\n+  int a;; /* { dg-warning \"example of a removal hint\" } */\n+/* { dg-begin-multiline-output \"\" }\n+73 |   int a;;\n+   |         ^\n+   |         -\n+   { dg-end-multiline-output \"\" } */\n+#endif\n+}\n+\n+/* Unit test for rendering of \"replace\" fixit hints.  */\n+\n+void test_fixit_replace (void)\n+{\n+#if 0\n+  gtk_widget_showall (dlg); /* { dg-warning \"example of a replacement hint\" } */\n+/* { dg-begin-multiline-output \"\" }\n+87 |   gtk_widget_showall (dlg);\n+   |   ^~~~~~~~~~~~~~~~~~\n+   |   gtk_widget_show_all\n+   { dg-end-multiline-output \"\" } */\n+#endif\n+}\n+\n+\n+/* Unit test for rendering of fix-it hints that add new lines.  */\n+\n+void test_fixit_insert_newline (void)\n+{\n+#if 0\n+  switch (op)\n+    {\n+    case 'a':\n+      x = a;\n+    case 'b':  /* { dg-warning \"newline insertion\" } */\n+      x = b;\n+    }\n+/* { dg-begin-multiline-output \"\" }\n+    |+      break;\n+106 |     case 'b':\n+    |     ^~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+#endif\n+}"}, {"sha": "a80b6de3e681c7bca0e296d3c33b0c351cfa6748", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-show-locus-color-line-numbers.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-color-line-numbers.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-color-line-numbers.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-color-line-numbers.c?ref=56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdiagnostics-show-caret -fplugin-arg-diagnostic_plugin_test_show_locus-color -fdiagnostics-show-line-numbers\" } */\n+\n+/* This is a collection of unittests for diagnostic_show_locus;\n+   see the overview in diagnostic_plugin_test_show_locus.c.\n+\n+   In particular, note the discussion of why we need a very long line here:\n+01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\n+   and that we can't use macros in this file.  */\n+\n+void test_multiline (void)\n+{\n+#if 0\n+  x = (first_function ()\n+       + second_function ()); /* { dg-warning \"test\" } */\n+\n+/* { dg-begin-multiline-output \"\" }\n+14 |   x = (\u001b[32m\u001b[Kfirst_function ()\u001b[m\u001b[K\n+   |        \u001b[32m\u001b[K~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n+15 |        \u001b[01;35m\u001b[K+\u001b[m\u001b[K \u001b[34m\u001b[Ksecond_function ()\u001b[m\u001b[K);\n+   |        \u001b[01;35m\u001b[K^\u001b[m\u001b[K \u001b[34m\u001b[K~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n+   { dg-end-multiline-output \"\" } */\n+#endif\n+}"}, {"sha": "b2f8507338ad71af2e149791a76454a008f6ef52", "filename": "gcc/testsuite/gcc.dg/plugin/plugin.exp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp?ref=56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d", "patch": "@@ -72,8 +72,10 @@ set plugin_test_list [list \\\n     { diagnostic_plugin_test_show_locus.c \\\n \t  diagnostic-test-show-locus-bw.c \\\n \t  diagnostic-test-show-locus-color.c \\\n+\t  diagnostic-test-show-locus-bw-line-numbers.c \\\n+\t  diagnostic-test-show-locus-color-line-numbers.c \\\n \t  diagnostic-test-show-locus-parseable-fixits.c \\\n-\t  diagnostic-test-show-locus-generate-patch.c } \\\n+\t  diagnostic-test-show-locus-generate-patch.c }\\\n     { diagnostic_plugin_test_tree_expression_range.c \\\n \t  diagnostic-test-expressions-1.c } \\\n     { diagnostic_plugin_show_trees.c \\"}, {"sha": "df36c345341c108cd6547d47e24ddf39e4801506", "filename": "gcc/testsuite/lib/prune.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprune.exp?ref=56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d", "patch": "@@ -21,7 +21,7 @@ load_lib multiline.exp\n if ![info exists TEST_ALWAYS_FLAGS] {\n     set TEST_ALWAYS_FLAGS \"\"\n }\n-set TEST_ALWAYS_FLAGS \"-fno-diagnostics-show-caret -fdiagnostics-color=never $TEST_ALWAYS_FLAGS\"\n+set TEST_ALWAYS_FLAGS \"-fno-diagnostics-show-caret -fno-diagnostics-show-line-numbers -fdiagnostics-color=never $TEST_ALWAYS_FLAGS\"\n \n proc prune_gcc_output { text } {\n     global srcdir"}, {"sha": "aa943a8655eb046d26355a94b473c54a1ad9a877", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=56b61d7fc4f38c1a3fd51bf3315b0338513a2d2d", "patch": "@@ -1112,6 +1112,8 @@ general_init (const char *argv0, bool init_signals)\n \n   global_dc->show_caret\n     = global_options_init.x_flag_diagnostics_show_caret;\n+  global_dc->show_line_numbers_p\n+    = global_options_init.x_flag_diagnostics_show_line_numbers;\n   global_dc->show_option_requested\n     = global_options_init.x_flag_diagnostics_show_option;\n   global_dc->show_column"}]}