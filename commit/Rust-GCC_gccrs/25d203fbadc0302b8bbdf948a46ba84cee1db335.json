{"sha": "25d203fbadc0302b8bbdf948a46ba84cee1db335", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVkMjAzZmJhZGMwMzAyYjhiYmRmOTQ4YTQ2YmE4NGNlZTFkYjMzNQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-08-23T19:37:53Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-08-23T19:37:53Z"}, "message": "cp-tree.h (maybe_version_functions): Declare.\n\n\t* cp-tree.h (maybe_version_functions): Declare.\n\t* decl.c (decls_match): Break function versioning check to\n\tseparate function.  Call it.\n\t(maybe_version_functions): Broken out of decls_match.\n\t* class.c (add_method): Use maybe_version_functions.\n\nFrom-SVN: r251316", "tree": {"sha": "53681c97a0218f1c16ddce9f86b71c022592820b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53681c97a0218f1c16ddce9f86b71c022592820b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25d203fbadc0302b8bbdf948a46ba84cee1db335", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25d203fbadc0302b8bbdf948a46ba84cee1db335", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25d203fbadc0302b8bbdf948a46ba84cee1db335", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25d203fbadc0302b8bbdf948a46ba84cee1db335/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84ac4dfc5d5ed40758261a9adac3f824d955546c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84ac4dfc5d5ed40758261a9adac3f824d955546c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84ac4dfc5d5ed40758261a9adac3f824d955546c"}], "stats": {"total": 95, "additions": 47, "deletions": 48}, "files": [{"sha": "3bc7de0e7ebd012fc8ed53e0bc23ce58d94ac306", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25d203fbadc0302b8bbdf948a46ba84cee1db335/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25d203fbadc0302b8bbdf948a46ba84cee1db335/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=25d203fbadc0302b8bbdf948a46ba84cee1db335", "patch": "@@ -1,5 +1,11 @@\n 2017-08-23  Nathan Sidwell  <nathan@acm.org>\n \n+\t* cp-tree.h (maybe_version_functions): Declare.\n+\t* decl.c (decls_match): Break function versioning check to\n+\tseparate function.  Call it.\n+\t(maybe_version_functions): Broken out of decls_match.\n+\t* class.c (add_method): Use maybe_version_functions.\n+\n \t* cp-tree.h (print_search_statistics,\n \treinit_search_statistics): Don't declare.\n \t* search.c (n_fields_searched, n_calls_lookup_field,"}, {"sha": "78a9b5f393f337c96270718191d32375c60f9822", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 26, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25d203fbadc0302b8bbdf948a46ba84cee1db335/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25d203fbadc0302b8bbdf948a46ba84cee1db335/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=25d203fbadc0302b8bbdf948a46ba84cee1db335", "patch": "@@ -1154,33 +1154,11 @@ add_method (tree type, tree method, bool via_using)\n \t\t\t      TREE_TYPE (method_type)))\n           && equivalently_constrained (fn, method))\n \t{\n-\t  /* For function versions, their parms and types match\n-\t     but they are not duplicates.  Record function versions\n-\t     as and when they are found.  extern \"C\" functions are\n-\t     not treated as versions.  */\n+\t  /* If these are versions of the same function, process and\n+\t     move on.  */\n \t  if (TREE_CODE (fn) == FUNCTION_DECL\n-\t      && TREE_CODE (method) == FUNCTION_DECL\n-\t      && !DECL_EXTERN_C_P (fn)\n-\t      && !DECL_EXTERN_C_P (method)\n-\t      && targetm.target_option.function_versions (fn, method))\n- \t    {\n-\t      /* Mark functions as versions if necessary.  Modify the mangled\n-\t\t decl name if necessary.  */\n-\t      if (!DECL_FUNCTION_VERSIONED (fn))\n-\t\t{\n-\t\t  DECL_FUNCTION_VERSIONED (fn) = 1;\n-\t\t  if (DECL_ASSEMBLER_NAME_SET_P (fn))\n-\t\t    mangle_decl (fn);\n-\t\t}\n-\t      if (!DECL_FUNCTION_VERSIONED (method))\n-\t\t{\n-\t\t  DECL_FUNCTION_VERSIONED (method) = 1;\n-\t\t  if (DECL_ASSEMBLER_NAME_SET_P (method))\n-\t\t    mangle_decl (method);\n-\t\t}\n-\t      cgraph_node::record_function_versions (fn, method);\n-\t      continue;\n-\t    }\n+\t      && maybe_version_functions (method, fn))\n+\t    continue;\n \n \t  if (DECL_INHERITED_CTOR (method))\n \t    {"}, {"sha": "d80cd2985358d7b8c9919da922eec469108aabba", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25d203fbadc0302b8bbdf948a46ba84cee1db335/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25d203fbadc0302b8bbdf948a46ba84cee1db335/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=25d203fbadc0302b8bbdf948a46ba84cee1db335", "patch": "@@ -6071,6 +6071,7 @@ extern void push_switch\t\t\t\t(tree);\n extern void pop_switch\t\t\t\t(void);\n extern tree make_lambda_name\t\t\t(void);\n extern int decls_match\t\t\t\t(tree, tree);\n+extern bool maybe_version_functions\t\t(tree, tree);\n extern tree duplicate_decls\t\t\t(tree, tree, bool);\n extern tree declare_local_label\t\t\t(tree);\n extern tree define_label\t\t\t(location_t, tree);"}, {"sha": "a9d72c0f30d168f147c177a235d3a2f1f508e032", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 36, "deletions": 22, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25d203fbadc0302b8bbdf948a46ba84cee1db335/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25d203fbadc0302b8bbdf948a46ba84cee1db335/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=25d203fbadc0302b8bbdf948a46ba84cee1db335", "patch": "@@ -1088,28 +1088,8 @@ decls_match (tree newdecl, tree olddecl)\n       if (types_match\n \t  && !DECL_EXTERN_C_P (newdecl)\n \t  && !DECL_EXTERN_C_P (olddecl)\n-\t  && targetm.target_option.function_versions (newdecl, olddecl))\n-\t{\n-\t  /* Mark functions as versions if necessary.  Modify the mangled decl\n-\t     name if necessary.  */\n-\t  if (DECL_FUNCTION_VERSIONED (newdecl)\n-\t      && DECL_FUNCTION_VERSIONED (olddecl))\n-\t    return 0;\n-\t  if (!DECL_FUNCTION_VERSIONED (newdecl))\n-\t    {\n-\t      DECL_FUNCTION_VERSIONED (newdecl) = 1;\n-\t      if (DECL_ASSEMBLER_NAME_SET_P (newdecl))\n-\t        mangle_decl (newdecl);\n-\t    }\n-\t  if (!DECL_FUNCTION_VERSIONED (olddecl))\n-\t    {\n-\t      DECL_FUNCTION_VERSIONED (olddecl) = 1;\n-\t      if (DECL_ASSEMBLER_NAME_SET_P (olddecl))\n-\t       mangle_decl (olddecl);\n-\t    }\n-\t  cgraph_node::record_function_versions (olddecl, newdecl);\n-\t  return 0;\n-\t}\n+\t  && maybe_version_functions (newdecl, olddecl))\n+\treturn 0;\n     }\n   else if (TREE_CODE (newdecl) == TEMPLATE_DECL)\n     {\n@@ -1165,6 +1145,40 @@ decls_match (tree newdecl, tree olddecl)\n   return types_match;\n }\n \n+/* NEWDECL and OLDDECL have identical signatures.  If they are\n+   different versions adjust them and return true.  */\n+\n+bool\n+maybe_version_functions (tree newdecl, tree olddecl)\n+{\n+  if (!targetm.target_option.function_versions (newdecl, olddecl))\n+    return false;\n+\n+  bool record = false;\n+\n+  if (!DECL_FUNCTION_VERSIONED (olddecl))\n+    {\n+      record = true;\n+      DECL_FUNCTION_VERSIONED (olddecl) = 1;\n+      if (DECL_ASSEMBLER_NAME_SET_P (olddecl))\n+\tmangle_decl (olddecl);\n+    }\n+\n+  if (!DECL_FUNCTION_VERSIONED (newdecl))\n+    {\n+      record = true;\n+      DECL_FUNCTION_VERSIONED (newdecl) = 1;\n+      if (DECL_ASSEMBLER_NAME_SET_P (newdecl))\n+\tmangle_decl (newdecl);\n+    }\n+\n+  /* Only record if at least one was not already versions.  */\n+  if (record)\n+    cgraph_node::record_function_versions (olddecl, newdecl);\n+\n+  return true;\n+}\n+\n /* If NEWDECL is `static' and an `extern' was seen previously,\n    warn about it.  OLDDECL is the previous declaration.\n "}]}