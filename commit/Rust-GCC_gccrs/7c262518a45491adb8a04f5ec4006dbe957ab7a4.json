{"sha": "7c262518a45491adb8a04f5ec4006dbe957ab7a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MyNjI1MThhNDU0OTFhZGI4YTA0ZjVlYzQwMDZkYmU5NTdhYjdhNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-08-04T01:31:41Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-04T01:31:41Z"}, "message": "target.h (gcc_target): Add asm_out.named_section, section_type_flags, have_named_sections.\n\n\t* target.h (gcc_target): Add asm_out.named_section,\n\tsection_type_flags, have_named_sections.\n\t* target-def.h (TARGET_ASM_NAMED_SECTION): New.\n\t(TARGET_HAVE_NAMED_SECTIONS): New.\n\t(TARGET_SECTION_TYPE_FLAGS): New.\n\n\t* Makefile.in (toplev.o): Depend on TARGET_H.\n\t(varasm.o, dbxout.o): Likewise.\n\t* c-common.c (decl_attributes): Check targetm.have_named_sections\n\tinstead of ifdef ASM_OUTPUT_SECTION_NAME.\n\t* dbxout.c (dbxout_function_decl): Likewise.\n\t(dbxout_function_end): Likewise.\n\t* toplev.c (compile_file): Likewise.\n\t* varasm.c (exception_section): Likewise.\n\t* cp/decl2.c (finish_objects): Likewise.\n\n\t* defaults.h (EH_FRAME_SECTION): Remove.\n\t(EH_FRAME_SECTION_ASM_OP): Remove.\n\t(EH_FRAME_SECTION_NAME): New.\n\t(UNIQUE_SECTION): Don't depend on ASM_OUTPUT_SECTION_NAME.\n\t(UNIQUE_SECTION_P): Remove.\n\t* dwarf2out.c (SECTION_FORMAT): Remove.\n\t(ASM_OUTPUT_SECTION): Remove.\n\t(output_call_frame_info): Use named_section_flags.\n\t(output_comp_unit, dwarf2out_start_source_file): Likewise.\n\t(dwarf2out_end_source_file, dwarf2out_define): Likewise.\n\t(dwarf2out_undef, dwarf2out_init, dwarf2out_finish): Likewise.\n\t* varasm.c (in_eh_frame, eh_frame_section): Remove.\n\t(named_section_flags): New.\n\t(named_section): Use it and targetm.section_type_flags.\n\t(resolve_unique_section): New.\n\t(assemble_start_function): Use it.\n\t(asm_emit_uninitialised, assemble_variable): Likewise.\n\t(default_section_type_flags): New.\n\t(default_no_named_section, default_elf_asm_named_section): New.\n\t(default_coff_asm_named_section, default_pe_asm_named_section): New.\n\t* output.h: Update varasm.c decls.\n\t(SECTION_*): New flags.\n\n\t* crtstuff.c: Check EH_FRAME_SECTION_NAME not EH_FRAME_SECTION_ASM_OP.\n\t(__EH_FRAME_BEGIN__, __FRAME_END__): Use attribute section.\n\n\t* config/elfos.h (UNIQUE_SECTION_P): Remove.\n\t* config/alpha/elf.h, config/arm/linux-elf.h: Likewise.\n\t* config/arm/pe.h, config/arm/unknown-elf.h: Likewise.\n\t* config/i386/cygwin.h, config/i386/djgpp.h: Likewise.\n\t* config/i386/i386-interix.h, config/i386/win32.h: Likewise.\n\t* config/ia64/sysv4.h, config/mcore/mcore-pe.h: Likewise.\n\t* config/mips/elf.h, config/mips/elf64.h: Likewise.\n\t* config/mips/iris6gld.h, config/mips/mips.h: Likewise.\n\t* config/pa/pa64-hpux.h,\n\n\t* config/elfos.h (ASM_OUTPUT_SECTION_NAME): Remove.\n\t(TARGET_ASM_NAMED_SECTION): New.\n\t* config/psos.h, config/a29k/a29k.h, config/alpha/elf.h: Likewise.\n\t* config/alpha/vms.h, config/arm/coff.h: Likewise.\n\t* config/arm/conix-elf.h, config/arm/elf.h: Likewise.\n\t* config/arm/linux-elf.h, config/arm/pe.h: Likewise.\n\t* config/arm/unknown-elf.h, config/avr/avr.h: Likewise.\n\t* config/c4x/c4x.h, config/h8300/h8300.h: Likewise.\n\t* config/i386/cygwin.h, config/i386/djgpp.h: Likewise.\n\t* config/i386/i386-interix.h, config/i386/i386elf.h : Likewise.\n\t* config/i386/sco5.h, config/i386/win32.h: Likewise.\n\t* config/m68k/coff.h, config/mcore/mcore-pe.h: Likewise.\n\t* config/mcore/mcore.h, config/mips/elf.h: Likewise.\n\t* config/mips/elf64.h, config/mips/iris6.h: Likewise.\n\t* config/mips/netbsd.h, config/mips/openbsd.h: Likewise.\n\t* config/pa/pa64-hpux.h, config/rs6000/sysv4.h: Likewise.\n\t* config/rs6000/xcoff.h, config/sh/sh.h: Likewise.\n\t* config/sparc/sysv4.h: Likewise.\n\n\t* config/nextstep.h: Error until named sections implemented.\n\n\t* config/a29k/a29k.c (a29k_asm_named_section): New.\n\t* config/alpha/alpha.c (SECTION_VMS_OVERLAY): New.\n\t(vms_section_type_flags, vms_asm_named_section): New.\n\t* config/arm/arm.c (arm_elf_asm_named_section): New.\n\t* config/avr/avr.c (asm_output_section_name): Remove.\n\t* config/avr/avr-protos.h: Update.\n\t* config/c4x/c4x.c (c4x_asm_named_section): New.\n\t* config/h8300/h8300.c (h8300_asm_named_section): New.\n\t* config/i386/i386.c (sco_asm_named_section): New.\n\t* config/i386/winnt.c (SECTION_PE_SHARED): New.\n\t(i386_pe_section_type_flags): New.\n\t(i386_pe_asm_named_section): New.\n\t* config/i386/i386-protos.h: Update.\n\t* config/m68k/m68k.c (m68k_coff_asm_named_section): New.\n\t* config/mcore/mcore.c (mcore_asm_named_section): New.\n\t* config/mips/mips.c (iris6_asm_named_section): New.\n\t* config/mips/mips.h (ENCODE_SECTION_INFO): Use DECL_ONE_ONLY\n\tinstead of UNIQUE_SECTION_P.\n\t* config/rs6000/rs6000.c (rs6000_elf_section_type_flags): New.\n\t(xcoff_asm_named_section): New.\n\t* config/sh/sh.c (sh_asm_named_section): New.\n\t* config/sparc/sparc.c (sparc_elf_asm_named_section): New.\n\n\t* config/i386/djgpp.h (EH_FRAME_SECTION_ASM_OP): Remove.\n\t* config/i386/sco5.h (EH_FRAME_SECTION_ASM_OP*): Remove.\n\t(EH_FRAME_SECTION_NAME): New.\n\t(EXCEPTION_SECTION): New.\n\t* config/ia64/ia64.h (EH_FRAME_SECTION_ASM_OP): Remove.\n\t(DEBUG_*_SECTION): Remove.\n\t* config/m68k/rtemself.h (EH_FRAME_SECTION_ASM_OP): Remove.\n\t* config/mips/iris6.h (DEBUG_*_SECTION): Remove.\n\t(EH_FRAME_SECTION_ASM_OP): Remove.\n\n\t* doc/tm.texi (UNIQUE_SECTION_P): Remove.\n\t(ASM_OUTPUT_SECTION_NAME): Remove.\n\t(TARGET_ASM_NAMED_SECTION): New.\n\t(TARGET_HAVE_NAMED_SECTIONS): New.\n\t(TARGET_SECTION_TYPE_FLAGS): New.\n\t(EH_FRAME_SECTION_ASM_OP): Remove.\n\t(EH_FRAME_SECTION_NAME): New.\n\nFrom-SVN: r44623", "tree": {"sha": "f3a177e73b80eca5619e6a8d303a81b56c901052", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3a177e73b80eca5619e6a8d303a81b56c901052"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c262518a45491adb8a04f5ec4006dbe957ab7a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c262518a45491adb8a04f5ec4006dbe957ab7a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c262518a45491adb8a04f5ec4006dbe957ab7a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c262518a45491adb8a04f5ec4006dbe957ab7a4/comments", "author": null, "committer": null, "parents": [{"sha": "4e627c414436df3de424b718f70576abab682e04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e627c414436df3de424b718f70576abab682e04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e627c414436df3de424b718f70576abab682e04"}], "stats": {"total": 2187, "additions": 1008, "deletions": 1179}, "files": [{"sha": "c88ff2386e689199a9b4a5c209bae9a486193e4c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -1,3 +1,119 @@\n+2001-08-03  Richard Henderson  <rth@redhat.com>\n+\n+\t* target.h (gcc_target): Add asm_out.named_section, \n+\tsection_type_flags, have_named_sections.\n+\t* target-def.h (TARGET_ASM_NAMED_SECTION): New.\n+\t(TARGET_HAVE_NAMED_SECTIONS): New.\n+\t(TARGET_SECTION_TYPE_FLAGS): New.\n+\n+\t* Makefile.in (toplev.o): Depend on TARGET_H.\n+\t(varasm.o, dbxout.o): Likewise.\n+\t* c-common.c (decl_attributes): Check targetm.have_named_sections\n+\tinstead of ifdef ASM_OUTPUT_SECTION_NAME.\n+\t* dbxout.c (dbxout_function_decl): Likewise.\n+\t(dbxout_function_end): Likewise.\n+\t* toplev.c (compile_file): Likewise.\n+\t* varasm.c (exception_section): Likewise.\n+\t* cp/decl2.c (finish_objects): Likewise.\n+\n+\t* defaults.h (EH_FRAME_SECTION): Remove.\n+\t(EH_FRAME_SECTION_ASM_OP): Remove.\n+\t(EH_FRAME_SECTION_NAME): New.\n+\t(UNIQUE_SECTION): Don't depend on ASM_OUTPUT_SECTION_NAME.\n+\t(UNIQUE_SECTION_P): Remove.\n+\t* dwarf2out.c (SECTION_FORMAT): Remove.\n+\t(ASM_OUTPUT_SECTION): Remove.\n+\t(output_call_frame_info): Use named_section_flags.\n+\t(output_comp_unit, dwarf2out_start_source_file): Likewise.\n+\t(dwarf2out_end_source_file, dwarf2out_define): Likewise.\n+\t(dwarf2out_undef, dwarf2out_init, dwarf2out_finish): Likewise.\n+\t* varasm.c (in_eh_frame, eh_frame_section): Remove.\n+\t(named_section_flags): New.\n+\t(named_section): Use it and targetm.section_type_flags.\n+\t(resolve_unique_section): New.\n+\t(assemble_start_function): Use it.\n+\t(asm_emit_uninitialised, assemble_variable): Likewise.\n+\t(default_section_type_flags): New.\n+\t(default_no_named_section, default_elf_asm_named_section): New.\n+\t(default_coff_asm_named_section, default_pe_asm_named_section): New.\n+\t* output.h: Update varasm.c decls.\n+\t(SECTION_*): New flags.\n+\n+\t* crtstuff.c: Check EH_FRAME_SECTION_NAME not EH_FRAME_SECTION_ASM_OP.\n+\t(__EH_FRAME_BEGIN__, __FRAME_END__): Use attribute section.\n+\n+\t* config/elfos.h (UNIQUE_SECTION_P): Remove.\n+\t* config/alpha/elf.h, config/arm/linux-elf.h: Likewise.\n+\t* config/arm/pe.h, config/arm/unknown-elf.h: Likewise.\n+\t* config/i386/cygwin.h, config/i386/djgpp.h: Likewise.\n+\t* config/i386/i386-interix.h, config/i386/win32.h: Likewise.\n+\t* config/ia64/sysv4.h, config/mcore/mcore-pe.h: Likewise.\n+\t* config/mips/elf.h, config/mips/elf64.h: Likewise.\n+\t* config/mips/iris6gld.h, config/mips/mips.h: Likewise.\n+\t* config/pa/pa64-hpux.h, \n+\n+\t* config/elfos.h (ASM_OUTPUT_SECTION_NAME): Remove.\n+\t(TARGET_ASM_NAMED_SECTION): New.\n+\t* config/psos.h, config/a29k/a29k.h, config/alpha/elf.h: Likewise.\n+\t* config/alpha/vms.h, config/arm/coff.h: Likewise.\n+\t* config/arm/conix-elf.h, config/arm/elf.h: Likewise.\n+\t* config/arm/linux-elf.h, config/arm/pe.h: Likewise.\n+\t* config/arm/unknown-elf.h, config/avr/avr.h: Likewise.\n+\t* config/c4x/c4x.h, config/h8300/h8300.h: Likewise.\n+\t* config/i386/cygwin.h, config/i386/djgpp.h: Likewise.\n+\t* config/i386/i386-interix.h, config/i386/i386elf.h : Likewise.\n+\t* config/i386/sco5.h, config/i386/win32.h: Likewise.\n+\t* config/m68k/coff.h, config/mcore/mcore-pe.h: Likewise.\n+\t* config/mcore/mcore.h, config/mips/elf.h: Likewise.\n+\t* config/mips/elf64.h, config/mips/iris6.h: Likewise.\n+\t* config/mips/netbsd.h, config/mips/openbsd.h: Likewise.\n+\t* config/pa/pa64-hpux.h, config/rs6000/sysv4.h: Likewise.\n+\t* config/rs6000/xcoff.h, config/sh/sh.h: Likewise.\n+\t* config/sparc/sysv4.h: Likewise.\n+\n+\t* config/nextstep.h: Error until named sections implemented.\n+\n+\t* config/a29k/a29k.c (a29k_asm_named_section): New.\n+\t* config/alpha/alpha.c (SECTION_VMS_OVERLAY): New.\n+\t(vms_section_type_flags, vms_asm_named_section): New.\n+\t* config/arm/arm.c (arm_elf_asm_named_section): New.\n+\t* config/avr/avr.c (asm_output_section_name): Remove.\n+\t* config/avr/avr-protos.h: Update.\n+\t* config/c4x/c4x.c (c4x_asm_named_section): New.\n+\t* config/h8300/h8300.c (h8300_asm_named_section): New.\n+\t* config/i386/i386.c (sco_asm_named_section): New.\n+\t* config/i386/winnt.c (SECTION_PE_SHARED): New.\n+\t(i386_pe_section_type_flags): New.\n+\t(i386_pe_asm_named_section): New.\n+\t* config/i386/i386-protos.h: Update.\n+\t* config/m68k/m68k.c (m68k_coff_asm_named_section): New.\n+\t* config/mcore/mcore.c (mcore_asm_named_section): New.\n+\t* config/mips/mips.c (iris6_asm_named_section): New.\n+\t* config/mips/mips.h (ENCODE_SECTION_INFO): Use DECL_ONE_ONLY\n+\tinstead of UNIQUE_SECTION_P.\n+\t* config/rs6000/rs6000.c (rs6000_elf_section_type_flags): New.\n+\t(xcoff_asm_named_section): New.\n+\t* config/sh/sh.c (sh_asm_named_section): New.\n+\t* config/sparc/sparc.c (sparc_elf_asm_named_section): New.\n+\n+\t* config/i386/djgpp.h (EH_FRAME_SECTION_ASM_OP): Remove.\n+\t* config/i386/sco5.h (EH_FRAME_SECTION_ASM_OP*): Remove.\n+\t(EH_FRAME_SECTION_NAME): New.\n+\t(EXCEPTION_SECTION): New.\n+\t* config/ia64/ia64.h (EH_FRAME_SECTION_ASM_OP): Remove.\n+\t(DEBUG_*_SECTION): Remove.\n+\t* config/m68k/rtemself.h (EH_FRAME_SECTION_ASM_OP): Remove.\n+\t* config/mips/iris6.h (DEBUG_*_SECTION): Remove.\n+\t(EH_FRAME_SECTION_ASM_OP): Remove.\n+\n+\t* doc/tm.texi (UNIQUE_SECTION_P): Remove.\n+\t(ASM_OUTPUT_SECTION_NAME): Remove.\n+\t(TARGET_ASM_NAMED_SECTION): New.\n+\t(TARGET_HAVE_NAMED_SECTIONS): New.\n+\t(TARGET_SECTION_TYPE_FLAGS): New.\n+\t(EH_FRAME_SECTION_ASM_OP): Remove.\n+\t(EH_FRAME_SECTION_NAME): New.\n+\n 2001-08-03  Zack Weinberg  <zackw@stanford.edu>\n \n \t* builtins.c (fold_builtin_constant_p): Return integer_zero_node"}, {"sha": "cdb68f7b357cf3a4f20ce593ee41eddf3e27f1a8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -1357,7 +1357,7 @@ toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) function.h \\\n    debug.h insn-config.h intl.h $(RECOG_H) Makefile toplev.h \\\n    dwarf2out.h sdbout.h dbxout.h $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) \\\n    graph.h $(LOOP_H) except.h $(REGS_H) $(TIMEVAR_H) $(lang_options_files) \\\n-   ssa.h $(PARAMS_H) $(TM_P_H) reload.h dwarf2asm.h\n+   ssa.h $(PARAMS_H) $(TM_P_H) reload.h dwarf2asm.h $(TARGET_H)\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(MAYBE_USE_COLLECT2) \\\n \t  -DTARGET_NAME=\\\"$(target_alias)\\\" \\\n \t  -c $(srcdir)/toplev.c\n@@ -1377,7 +1377,7 @@ errors.o : errors.c $(GCONFIG_H) $(SYSTEM_H) errors.h\n varasm.o : varasm.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) flags.h \\\n    function.h $(EXPR_H) hard-reg-set.h $(REGS_H) $(OBSTACK_H) \\\n    output.h c-pragma.h toplev.h xcoffout.h debug.h $(GGC_H) $(TM_P_H) \\\n-   $(HASHTAB_H)\n+   $(HASHTAB_H) $(TARGET_H)\n function.o : function.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n    function.h $(EXPR_H) $(REGS_H) hard-reg-set.h \\\n    insn-config.h $(RECOG_H) output.h toplev.h except.h hash.h $(GGC_H) $(TM_P_H)\n@@ -1408,7 +1408,7 @@ optabs.o : optabs.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h  \\\n    insn-config.h $(EXPR_H) $(RECOG_H) reload.h \\\n    toplev.h $(GGC_H) real.h $(TM_P_H) except.h\n dbxout.o : dbxout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) flags.h \\\n-    $(REGS_H) debug.h $(TM_P_H) \\\n+    $(REGS_H) debug.h $(TM_P_H) $(TARGET_H) \\\n    insn-config.h reload.h gstab.h xcoffout.h output.h dbxout.h toplev.h\n debug.o : debug.c $(CONFIG_H) $(SYSTEM_H)\n sdbout.o : sdbout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) flags.h \\"}, {"sha": "dc5ff8fdad16bf27f72e0bdebfab52be98c1fda6", "filename": "gcc/c-common.c", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -971,33 +971,34 @@ decl_attributes (node, attributes, flags)\n \t  break;\n \n \tcase A_SECTION:\n-#ifdef ASM_OUTPUT_SECTION_NAME\n-\t  if ((TREE_CODE (decl) == FUNCTION_DECL\n-\t       || TREE_CODE (decl) == VAR_DECL)\n-\t      && TREE_CODE (TREE_VALUE (args)) == STRING_CST)\n+\t  if (targetm.have_named_sections)\n \t    {\n-\t      if (TREE_CODE (decl) == VAR_DECL\n-\t\t  && current_function_decl != NULL_TREE\n-\t\t  && ! TREE_STATIC (decl))\n-\t\terror_with_decl (decl,\n-\t\t  \"section attribute cannot be specified for local variables\");\n-\t      /* The decl may have already been given a section attribute from\n-\t\t a previous declaration.  Ensure they match.  */\n-\t      else if (DECL_SECTION_NAME (decl) != NULL_TREE\n-\t\t       && strcmp (TREE_STRING_POINTER (DECL_SECTION_NAME (decl)),\n-\t\t\t\t  TREE_STRING_POINTER (TREE_VALUE (args))) != 0)\n-\t\terror_with_decl (*node,\n-\t\t\t\t \"section of `%s' conflicts with previous declaration\");\n+\t      if ((TREE_CODE (decl) == FUNCTION_DECL\n+\t\t   || TREE_CODE (decl) == VAR_DECL)\n+\t\t  && TREE_CODE (TREE_VALUE (args)) == STRING_CST)\n+\t\t{\n+\t\t  if (TREE_CODE (decl) == VAR_DECL\n+\t\t      && current_function_decl != NULL_TREE\n+\t\t      && ! TREE_STATIC (decl))\n+\t\t    error_with_decl (decl,\n+\t\t\t\t     \"section attribute cannot be specified for local variables\");\n+\t\t  /* The decl may have already been given a section attribute\n+\t\t     from a previous declaration.  Ensure they match.  */\n+\t\t  else if (DECL_SECTION_NAME (decl) != NULL_TREE\n+\t\t\t   && strcmp (TREE_STRING_POINTER (DECL_SECTION_NAME (decl)),\n+\t\t\t\t      TREE_STRING_POINTER (TREE_VALUE (args))) != 0)\n+\t\t    error_with_decl (*node,\n+\t\t\t\t     \"section of `%s' conflicts with previous declaration\");\n+\t\t  else\n+\t\t    DECL_SECTION_NAME (decl) = TREE_VALUE (args);\n+\t\t}\n \t      else\n-\t\tDECL_SECTION_NAME (decl) = TREE_VALUE (args);\n+\t\terror_with_decl (*node,\n+\t\t\t\t \"section attribute not allowed for `%s'\");\n \t    }\n \t  else\n \t    error_with_decl (*node,\n-\t\t\t   \"section attribute not allowed for `%s'\");\n-#else\n-\t  error_with_decl (*node,\n-\t\t  \"section attributes are not supported for this target\");\n-#endif\n+\t\t\t     \"section attributes are not supported for this target\");\n \t  break;\n \n \tcase A_ALIGNED:"}, {"sha": "a4905e6597cdad12962bab4824202931dab8be98", "filename": "gcc/config/a29k/a29k.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fa29k%2Fa29k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fa29k%2Fa29k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.c?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -48,6 +48,8 @@ static void compute_regstack_size PARAMS ((void));\n static void check_epilogue_internal_label PARAMS ((FILE *));\n static void output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n+static void a29k_asm_named_section PARAMS ((const char *, unsigned int,\n+\t\t\t\t\t    unsigned int));\n \n #define min(A,B)\t((A) < (B) ? (A) : (B))\n \n@@ -1568,3 +1570,13 @@ output_function_epilogue (file, size)\n     free (a29k_first_epilogue_insn);\n   a29k_first_epilogue_insn = 0;\n }\n+\n+static void\n+a29k_asm_named_section (name, flags, align)\n+     const char *name;\n+     unsigned int flags ATTRIBUTE_UNUSED;\n+     unsigned int align ATTRIBUTE_UNUSED;\n+{\n+  /* ??? Is it really correct to mark all sections as \"bss\"?  */\n+  fprintf (asm_out_file, \"\\t.sect %s, bss\\n\\t.use %s\\n\", name, name);\n+}"}, {"sha": "8568d5e484d3a8503ac9e243dfcd79d33aade71a", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -1428,11 +1428,8 @@ literal_section ()\t\t\t\t\t\t\\\n extern int a29k_debug_reg_map[];\n #define DBX_REGISTER_NUMBER(REGNO) a29k_debug_reg_map[REGNO]\n \n-/* This how to write an assembler directive to FILE to switch to\n-   section NAME for DECL.  */\n-\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC) \\\n-  fprintf (FILE, \"\\t.sect %s, bss\\n\\t.use %s\\n\", NAME, NAME)\n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION a29k_asm_named_section\n \n /* This is how to output the definition of a user-level label named NAME,\n    such as the label on a static function or variable NAME.  */"}, {"sha": "345d95e2f6ba6e182f4d02b0748c1c3e8de89e62", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 53, "deletions": 3, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -148,9 +148,14 @@ static void alpha_output_function_end_prologue\n \f\n /* Initialize the GCC target structure.  */\n #if TARGET_ABI_OPEN_VMS\n-   static int vms_valid_decl_attribute_p PARAMS ((tree, tree, tree, tree));\n-#  undef TARGET_VALID_DECL_ATTRIBUTE\n-#  define TARGET_VALID_DECL_ATTRIBUTE vms_valid_decl_attribute_p\n+static int vms_valid_decl_attribute_p PARAMS ((tree, tree, tree, tree));\n+static unsigned int vms_section_type_flags PARAMS ((tree, const char *, int));\n+static void vms_asm_named_section PARAMS ((const char *, unsigned int,\n+\t\t\t\t\t   unsigned int));\n+# undef TARGET_VALID_DECL_ATTRIBUTE\n+# define TARGET_VALID_DECL_ATTRIBUTE vms_valid_decl_attribute_p\n+# undef TARGET_SECTION_TYPE_FLAGS\n+# define TARGET_SECTION_TYPE_FLAGS vms_section_type_flags\n #endif\n \n #undef TARGET_ASM_FUNCTION_END_PROLOGUE\n@@ -6535,6 +6540,51 @@ alpha_write_linkage (stream)\n   splay_tree_foreach (alpha_links, alpha_write_one_linkage, stream);\n }\n \n+/* Given a decl, a section name, and whether the decl initializer\n+   has relocs, choose attributes for the section.  */\n+\n+#define SECTION_VMS_OVERLAY\tSECTION_FORGET\n+\n+static unsigned int\n+vms_section_type_flags (decl, name, reloc)\n+     tree decl;\n+     const char *name;\n+     int reloc;\n+{\n+  unsigned int flags = default_section_type_flags (decl, name, reloc);\n+\n+  if (decl && DECL_MACHINE_ATTRIBUTES (decl)\n+      && lookup_attribute (\"overlaid\", DECL_MACHINE_ATTRIBUTES (decl)))\n+    flags |= SECTION_VMS_OVERLAY;\n+\n+  return flags;\n+}\n+\n+/* Switch to an arbitrary section NAME with attributes as specified\n+   by FLAGS.  ALIGN specifies any known alignment requirements for\n+   the section; 0 if the default should be used.  */\n+\n+static void\n+vms_asm_named_section (name, flags, align)\n+     const char *name;\n+     unsigned int flags;\n+     unsigned int align;\n+{\n+  const char *flag_str = \"\";\n+\n+  if (flags & SECTION_VMS_OVERLAY)\n+    flag_str = \",OVR\";\n+  else if (flags & SECTION_DEBUG)\n+    flag_str = \",NOWRT\";\n+\n+  fprintf (asm_out_file, \".section\\t%s%s\\n\", name, flag_str);\n+\n+  /* ??? An indicated alignment of 1 byte is only used by dwarf,\n+     and for that we turn off auto-alignment.  */\n+  if (align == 1)\n+    ASM_OUTPUT_ALIGN (asm_out_file, 0);\n+}\n+\n #else\n \n rtx"}, {"sha": "a8e89003be4a2361a0e090ee4da6bc4584602c24", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 2, "deletions": 65, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -294,69 +294,8 @@ void FN ()\t\t\t\t\t\\\n     }\t\t\t\t\t\t\\\n }\n \n-\n-/* Switch into a generic section.\n-\n-   We make the section read-only and executable for a function decl,\n-   read-only for a const data decl, and writable for a non-const data decl.\n-\n-   If the section has already been defined, we must not emit the\n-   attributes here. The SVR4 assembler does not recognize section\n-   redefinitions.  If DECL is NULL, no attributes are emitted.  */\n-\n-#undef  ASM_OUTPUT_SECTION_NAME\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC)\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      static htab_t htab;                                               \\\n-                                                                        \\\n-      struct section_info                                               \\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tenum sect_enum {SECT_RW, SECT_RO, SECT_EXEC} type;\t\t\\\n-      };                                                                \\\n-                                                                        \\\n-      struct section_info *s;\t\t\t\t\t\t\\\n-      const char *mode;\t\t\t\t\t\t\t\\\n-      enum sect_enum type;                                              \\\n-      PTR* slot;                                                        \\\n-                                                                        \\\n-      /* The names we put in the hashtable will always be the unique    \\\n-\t versions gived to us by the stringtable, so we can just use    \\\n-\t their addresses as the keys.  */                               \\\n-      if (!htab)                                                        \\\n-\thtab = htab_create (31,                                         \\\n-\t\t\t    htab_hash_pointer,                          \\\n-\t\t\t    htab_eq_pointer,                            \\\n-\t\t\t    NULL);                                      \\\n-                                                                        \\\n-      if (DECL && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n-\ttype = SECT_EXEC, mode = \"ax\";\t\t\t\t\t\\\n-      else if (DECL && DECL_READONLY_SECTION (DECL, RELOC))\t\t\\\n-\ttype = SECT_RO, mode = \"a\";\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\ttype = SECT_RW, mode = \"aw\";\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n-      /* See if we already have an entry for this section.  */          \\\n-      slot = htab_find_slot (htab, NAME, INSERT);                       \\\n-      if (!*slot)                                                       \\\n-\t{                                                               \\\n-\t  s = (struct section_info *) xmalloc (sizeof (* s));\t\t\\\n-\t  s->type = type;\t\t\t\t\t\t\\\n-\t  *slot = s;\t\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"\\t.section\\t%s,\\\"%s\\\",@progbits\\n\",\t\t\\\n-\t\t   NAME, mode);\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  s = (struct section_info *) *slot;                            \\\n-\t  if (DECL && s->type != type)\t\t\t\t\t\\\n-\t    error_with_decl (DECL,                                      \\\n-\t\t\t     \"%s causes a section type conflict\");      \\\n-\t  \t\t\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"\\t.section\\t%s\\n\", NAME);\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n /* A C statement (sans semicolon) to output an element in the table of\n    global constructors.  */\n@@ -460,8 +399,6 @@ void FN ()\t\t\t\t\t\\\n \n #define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n \n-#define UNIQUE_SECTION_P(DECL)   (DECL_ONE_ONLY (DECL))\n-\n #undef  UNIQUE_SECTION\n #define UNIQUE_SECTION(DECL, RELOC)\t\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\"}, {"sha": "bc7e1e6afacd52ca1957f1672286090423602d19", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -407,30 +407,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n     fprintf (FILE, \"\\t.align %d\\n\", LOG);\n \n-#define ASM_OUTPUT_SECTION(FILE,SECTION)\t\t\t\\\n-   (strcmp (SECTION, \".text\") == 0)\t\t\t\t\\\n-     ? text_section ()\t\t\t\t\t\t\\\n-     : named_section (NULL_TREE, SECTION, 0),\t\t\t\\\n-       ASM_OUTPUT_ALIGN (FILE, 0)\t\t\t\t\\\n-\n-#define ASM_OUTPUT_SECTION_NAME(FILE,DECL,NAME,RELOC)\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      const char *flags;\t\t\t\t \t\\\n-      int ovr = 0;\t\t\t\t\t\t\\\n-      if (DECL && DECL_MACHINE_ATTRIBUTES (DECL)\t\t\\\n-\t  && lookup_attribute\t\t\t\t\t\\\n-\t      (\"overlaid\", DECL_MACHINE_ATTRIBUTES (DECL)))\t\\\n-\tflags = \",OVR\", ovr = 1;\t\t\t\t\\\n-      else if (strncmp (NAME,\".debug\", 6) == 0)\t\t\t\\\n-\tflags = \",NOWRT\";\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\\\n-\tflags = \"\";\t\t\t\t\t\t\\\n-      fputc ('\\n', (FILE));\t\t\t\t\t\\\n-      fprintf (FILE, \".section\\t%s%s\\n\", NAME, flags);\t\t\\\n-      if (ovr)\t\t\t\t\t\t\t\\\n-        (NAME) = \"\";\t\t\t\t\t\t\\\n-    } while (0)\n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION vms_asm_named_section\n \n #define ASM_OUTPUT_DEF(FILE,LABEL1,LABEL2)\t\t\t\t\\\n   do {\tliterals_section();                                             \\"}, {"sha": "b79a92bae9051a0e0f3d3fdb1f3b6cbdeabe6178", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -114,6 +114,9 @@ static void\t thumb_output_function_prologue PARAMS ((FILE *,\n \t\t\t\t\t\t\t HOST_WIDE_INT));\n static int\t arm_comp_type_attributes\tPARAMS ((tree, tree));\n static void\t arm_set_default_type_attributes\tPARAMS ((tree));\n+static void\t arm_elf_asm_named_section\tPARAMS ((const char *,\n+\t\t\t\t\t\t\t unsigned int,\n+\t\t\t\t\t\t\t unsigned int));\n #undef Hint\n #undef Mmode\n #undef Ulong\n@@ -10632,3 +10635,38 @@ aof_dump_imports (f)\n     }\n }\n #endif /* AOF_ASSEMBLER */\n+\n+/* Switch to an arbitrary section NAME with attributes as specified\n+   by FLAGS.  ALIGN specifies any known alignment requirements for\n+   the section; 0 if the default should be used.\n+\n+   Differs from the default elf version only in the prefix character\n+   used before the section type.  */\n+\n+static void\n+arm_elf_asm_named_section (name, flags, align)\n+     const char *name;\n+     unsigned int flags;\n+     unsigned int align ATTRIBUTE_UNUSED;\n+{\n+  char flagchars[8], *f = flagchars;\n+  const char *type;\n+\n+  if (!(flags & SECTION_DEBUG))\n+    *f++ = 'a';\n+  if (flags & SECTION_WRITE)\n+    *f++ = 'w';\n+  if (flags & SECTION_CODE)\n+    *f++ = 'x';\n+  if (flags & SECTION_SMALL)\n+    *f++ = 's';\n+  *f = '\\0';\n+\n+  if (flags & SECTION_BSS)\n+    type = \"nobits\";\n+  else\n+    type = \"progbits\";\n+\n+  fprintf (asm_out_file, \"\\t.section\\t%s,\\\"%s\\\",%%%s\\n\",\n+\t   name, flagchars, type);\n+}"}, {"sha": "11cb9bb1fca9cc698f8ab1b0ba30075e7e39407d", "filename": "gcc/config/arm/coff.h", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Farm%2Fcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Farm%2Fcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcoff.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -64,21 +64,8 @@ Boston, MA 02111-1307, USA.  */\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* A C statement to output something to the assembler file to switch to\n-   section NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n-   NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n-   define this macro in such cases.  */\n-#define ASM_OUTPUT_SECTION_NAME(STREAM, DECL, NAME, RELOC)\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\\\n-        fprintf (STREAM, \"\\t.section %s,\\\"x\\\"\\n\", (NAME));\t\\\n-      else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))\t\\\n-        fprintf (STREAM, \"\\t.section %s,\\\"\\\"\\n\", (NAME));\t\\\n-      else\t\t\t\t\t\t\t\\\n-        fprintf (STREAM, \"\\t.section %s,\\\"w\\\"\\n\", (NAME));\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION  default_coff_asm_named_section\n \f\n /* Support the ctors/dtors and other sections.  */\n "}, {"sha": "f32228f6e88f782803ed62b2c4635feaf2e0c83e", "filename": "gcc/config/arm/conix-elf.h", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Farm%2Fconix-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Farm%2Fconix-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconix-elf.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -83,28 +83,14 @@ func_ptr __DTOR_LIST__[1] = { (func_ptr) (-1) }\n asm (DTORS_SECTION_ASM_OP);\t\t\t\t\\\n func_ptr __DTOR_END__[1] = { (func_ptr) 0 };\n \n-/* A C statement to output something to the assembler file to switch to section\n-   NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n-   NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n-   define this macro in such cases.  */\n-#define ASM_OUTPUT_SECTION_NAME(STREAM, DECL, NAME, RELOC) \t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n-\tfprintf (STREAM, \"\\t.section %s,\\\"ax\\\",@progbits\\n\", (NAME));\t\\\n-      else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))\t\t\\\n-\tfprintf (STREAM, \"\\t.section %s,\\\"a\\\"\\n\", (NAME));\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\tfprintf (STREAM, \"\\t.section %s,\\\"aw\\\"\\n\", (NAME));\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n /* The ARM development system defines __main.  */\n #define NAME__MAIN \"__gccmain\"\n #define SYMBOL__MAIN __gccmain\n \n #define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n-#define UNIQUE_SECTION_P(DECL) (DECL_ONE_ONLY (DECL))\n #define UNIQUE_SECTION(DECL,RELOC)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\"}, {"sha": "102b53ae0c7274f279ee69b88dc9d54db6bf29ec", "filename": "gcc/config/arm/elf.h", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Farm%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Farm%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Felf.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -299,23 +299,9 @@ dtors_section ()\t\t\t\t\t\t\\\n }\n #endif\n \n-/* A C statement to output something to the assembler file to switch to\n-   section NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL\n-   or NULL_TREE.  */\n-#undef  ASM_OUTPUT_SECTION_NAME\n-#define ASM_OUTPUT_SECTION_NAME(STREAM, DECL, NAME, RELOC)        \t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t  \t\\\n-      if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t  \t\\\n-\tfprintf (STREAM, \"\\t.section %s,\\\"ax\\\",%%progbits\\n\", NAME);\t\\\n-      else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))\t  \t\\\n-\tfprintf (STREAM, \"\\t.section %s,\\\"a\\\"\\n\", NAME);\t\t\\\n-      else if (! strncmp (NAME, \".bss\", 4))      \t\t\t\\\n-\tfprintf (STREAM, \"\\t.section %s,\\\"aw\\\",%%nobits\\n\", NAME);\t\\\n-      else\t\t\t\t\t\t\t \t\\\n-\tfprintf (STREAM, \"\\t.section %s,\\\"aw\\\"\\n\", NAME);\t  \t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n+/* Switch into a generic section.  */\n+#undef TARGET_ASM_NAMED_SECTION\n+#define TARGET_ASM_NAMED_SECTION  arm_elf_asm_named_section\n \f\n /* Support the ctors/dtors sections for g++.  */\n #ifndef INT_ASM_OP"}, {"sha": "06519604ff0c54fdfaba01550945028c27f83514", "filename": "gcc/config/arm/linux-elf.h", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Farm%2Flinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Farm%2Flinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-elf.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -132,15 +132,8 @@ const_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-/* Switch into a generic section.\n-   This is currently only used to support section attributes.\n-\n-   We make the section read-only and executable for a function decl,\n-   read-only for a const data decl, and writable for a non-const data decl.  */\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC) \\\n-  fprintf (FILE, \".section\\t%s,\\\"%s\\\",%%progbits\\n\", NAME, \\\n-\t   (DECL) && TREE_CODE (DECL) == FUNCTION_DECL ? \"ax\" : \\\n-\t   (DECL) && DECL_READONLY_SECTION (DECL, RELOC) ? \"a\" : \"aw\")\n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION  arm_elf_asm_named_section\n \n /* A C statement or statements to switch to the appropriate\n    section for output of DECL.  DECL is either a `VAR_DECL' node\n@@ -171,8 +164,6 @@ const_section ()\t\t\t\t\t\t\t\\\n }\n \n #define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n-#define UNIQUE_SECTION_P(DECL)   (DECL_ONE_ONLY (DECL))\n-\n #define UNIQUE_SECTION(DECL, RELOC)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\"}, {"sha": "6d4f61d942fe5347d080a5e82affd83c30590815", "filename": "gcc/config/arm/pe.h", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Farm%2Fpe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Farm%2Fpe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpe.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -118,35 +118,12 @@ Boston, MA 02111-1307, USA.  */\n    symbols must be explicitly imported from shared libraries (DLLs).  */\n #define MULTIPLE_SYMBOL_SPACES\n \n-#define UNIQUE_SECTION_P(DECL) DECL_ONE_ONLY (DECL)\n-\n #define UNIQUE_SECTION(DECL, RELOC) arm_pe_unique_section (DECL, RELOC)\n \n #define SUPPORTS_ONE_ONLY 1\n \n-/* A C statement to output something to the assembler file to switch to section\n-   NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n-   NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n-   define this macro in such cases.  */\n-#undef  ASM_OUTPUT_SECTION_NAME\n-#define ASM_OUTPUT_SECTION_NAME(STREAM, DECL, NAME, RELOC) \t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\\\n-\tfprintf (STREAM, \"\\t.section %s,\\\"x\\\"\\n\", (NAME));\t\\\n-      else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))\t\\\n-\tfprintf (STREAM, \"\\t.section %s,\\\"\\\"\\n\", (NAME));\t\\\n-      else\t\t\t\t\t\t\t\\\n-\tfprintf (STREAM, \"\\t.section %s,\\\"w\\\"\\n\", (NAME));\t\\\n-      /* Functions may have been compiled at various levels of\t\\\n-\t optimization so we can't use `same_size' here.\t\t\\\n-\t Instead, have the linker pick one.  */\t\t\t\\\n-      if ((DECL) && DECL_ONE_ONLY (DECL))\t\t\t\\\n-\tfprintf (STREAM, \"\\t.linkonce %s\\n\",\t\t\t\\\n-\t\t TREE_CODE (DECL) == FUNCTION_DECL\t\t\\\n-\t\t ? \"discard\" : \"same_size\");\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION  default_pe_asm_named_section\n \f\n /* This outputs a lot of .req's to define alias for various registers.\n    Let's try to avoid this.  */"}, {"sha": "1eebb7b0801a675edf45753cab7a2a34e21c7d48", "filename": "gcc/config/arm/unknown-elf.h", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Farm%2Funknown-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Farm%2Funknown-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funknown-elf.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -85,23 +85,8 @@ rdata_section ()\t\t\t\t\t\t\\\n   asm (DTORS_SECTION_ASM_OP);\t\t\t\t\\\n   func_ptr __DTOR_END__[1] = { (func_ptr) 0 };\n \n-/* A C statement to output something to the assembler file to switch to section\n-   NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n-   NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n-   define this macro in such cases.  */\n-#define ASM_OUTPUT_SECTION_NAME(STREAM, DECL, NAME, RELOC)\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n-        fprintf (STREAM, \"\\t.section %s,\\\"ax\\\",@progbits\\n\", (NAME));\t\\\n-      else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))\t\t\\\n-        fprintf (STREAM, \"\\t.section %s,\\\"a\\\"\\n\", (NAME));\t\t\\\n-      else if (! strncmp (NAME, \".bss\", 4))      \t\t\t\\\n-\tfprintf (STREAM, \"\\t.section %s,\\\"aw\\\",@nobits\\n\", (NAME));\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-        fprintf (STREAM, \"\\t.section %s,\\\"aw\\\"\\n\", (NAME));\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n /* The ARM development system defines __main.  */\n #define NAME__MAIN \"__gccmain\"\n@@ -114,8 +99,6 @@ rdata_section ()\t\t\t\t\t\t\\\n \n #define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n \n-#define UNIQUE_SECTION_P(DECL) (DECL_ONE_ONLY (DECL))\n-\n #define UNIQUE_SECTION(DECL, RELOC)\t\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "b6f4d74cb0021342c403c9232e54b1117bcfcf9f", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -45,9 +45,6 @@ extern void   asm_output_external          PARAMS ((FILE *file, tree decl,\n \t\t\t\t\t\t   char *name));\n extern void   unique_section               PARAMS ((tree decl, int reloc));\n extern void   encode_section_info          PARAMS ((tree decl));\n-extern void   asm_output_section_name      PARAMS ((FILE *file, tree decl,\n-\t\t\t\t\t\t   const char *name,\n-\t\t\t\t\t\t   int reloc));\n extern int    avr_progmem_p                PARAMS ((tree decl));\n \n "}, {"sha": "6d11d0583745678ff33f2677e0cc24729f888584", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -4556,23 +4556,6 @@ unique_section (decl, reloc)\n }\n \n \n-/* Output section name to file FILE\n-   We make the section read-only and executable for a function decl,\n-   read-only for a const data decl, and writable for a non-const data decl.  */\n-\n-void\n-asm_output_section_name(file, decl, name, reloc)\n-     FILE *file;\n-     tree decl;\n-     const char *name;\n-     int reloc ATTRIBUTE_UNUSED;\n-{\n-  fprintf (file, \".section %s, \\\"%s\\\", @progbits\\n\", name,\n-\t   decl && TREE_CODE (decl) == FUNCTION_DECL ? \"ax\" :\n-\t   decl && TREE_READONLY (decl) ? \"a\" : \"aw\");\n-}\n-\n-\n /* The routine used to output NUL terminated strings.  We use a special\n    version of this for most svr4 targets because doing so makes the\n    generated assembly code more compact (and thus faster to assemble)"}, {"sha": "5467fa4172061232222f2b35a0e8eeb69840d32e", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -1956,12 +1956,6 @@ progmem_section (void)\t\t\t\t\t\t\t      \\\n    Decode SYM_NAME and store the real name part in VAR, sans the\n    characters that encode section info.  Define this macro if\n    `ENCODE_SECTION_INFO' alters the symbol's name string.  */\n-/* `UNIQUE_SECTION_P (DECL)'\n-   A C expression which evaluates to true if DECL should be placed\n-   into a unique section for some target-specific reason.  If you do\n-   not define this macro, the default is `0'.  Note that the flag\n-   `-ffunction-sections' will also cause functions to be placed into\n-   unique sections.  */\n \n #define UNIQUE_SECTION(DECL, RELOC) unique_section (DECL, RELOC)\n /* `UNIQUE_SECTION (DECL, RELOC)'\n@@ -1971,7 +1965,6 @@ progmem_section (void)\t\t\t\t\t\t\t      \\\n    link-time relocations.  If you do not define this macro, GNU CC\n    will use the symbol name prefixed by `.' as the section name.  */\n \n-\n #define ASM_FILE_START(STREAM) asm_file_start (STREAM)\n /* A C expression which outputs to the stdio stream STREAM some\n    appropriate text to go at the start of an assembler file.\n@@ -2022,19 +2015,8 @@ progmem_section (void)\t\t\t\t\t\t\t      \\\n    This macro need not be defined if the standard form of debugging\n    information for the debugger in use is appropriate.  */\n \n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC) \\\n-  asm_output_section_name(FILE, DECL, NAME, RELOC)\n-\n-/* `ASM_OUTPUT_SECTION_NAME (STREAM, DECL, NAME, RELOC)'\n-   A C statement to output something to the assembler file to switch\n-   to section NAME for object DECL which is either a `FUNCTION_DECL',\n-   a `VAR_DECL' or `NULL_TREE'.  RELOC indicates whether the initial\n-   value of EXP requires link-time relocations.  Some target formats\n-   do not support arbitrary sections.  Do not define this macro in\n-   such cases.\n-\n-   At present this macro is only used to support section attributes.\n-   When this macro is undefined, section attributes are disabled.  */\n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION default_elf_asm_named_section\n \n #define OBJC_PROLOGUE {}\n /* A C statement to output any assembler statements which are"}, {"sha": "da2f90d895cb48729218862bb90a15779f6325b3", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -191,6 +191,8 @@ static int c4x_rptb_valid_p PARAMS ((rtx, rtx));\n static int c4x_label_ref_used_p PARAMS ((rtx, rtx));\n static int c4x_valid_type_attribute_p PARAMS ((tree, tree, tree, tree));\n static void c4x_insert_attributes PARAMS ((tree, tree *));\n+static void c4x_asm_named_section PARAMS ((const char *, unsigned int,\n+\t\t\t\t\t   unsigned int));\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_VALID_TYPE_ATTRIBUTE\n@@ -5177,3 +5179,12 @@ c4x_expand_builtin (exp, target, subtarget, mode, ignore)\n     }\n   return NULL_RTX;\n }\n+\n+static void\n+c4x_asm_named_section (name, flags, align)\n+     const char *name;\n+     unsigned int flags ATTRIBUTE_UNUSED;\n+     unsigned int align ATTRIBUTE_UNUSED;\n+{\n+  fprintf (asm_out_file, \"\\t.sect\\t\\\"%s\\\"\\n\", name);\n+}"}, {"sha": "dba5e47807331ffbc9ce31d3493dbdcbb53924ee", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -2087,8 +2087,8 @@ dtors_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC) \\\n-   fprintf (FILE, \"\\t.sect\\t\\\"%s\\\"\\n\", NAME);\n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION c4x_asm_named_section\n \n /* This is machine-dependent because it needs to push something\n    on the stack.  */"}, {"sha": "2b1321b4ca97ebf6296b6525b6a6130fd15c40c9", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -3760,16 +3760,6 @@ extern const char *d30v_branch_cost_string;\n    the symbol's name string.  */\n /* #define STRIP_NAME_ENCODING(VAR, SYM_NAME) */\n \n-/* A C expression which evaluates to true if DECL should be placed\n-   into a unique section for some target-specific reason.  If you do\n-   not define this macro, the default is `0'.  Note that the flag\n-   `-ffunction-sections' will also cause functions to be placed into\n-   unique sections.\n-\n-   Defined in svr4.h.  */\n-/* #define UNIQUE_SECTION_P(DECL) */\n-\n-/* A C statement to build up a unique section name, expressed as a\n    STRING_CST node, and assign it to `DECL_SECTION_NAME (DECL)'.\n    RELOC indicates whether the initial value of EXP requires\n    link-time relocations.  If you do not define this macro, GNU CC\n@@ -3888,17 +3878,6 @@ extern const char *d30v_branch_cost_string;\n    Defined in svr4.h.  */\n /* #define ASM_OUTPUT_IDENT(STREAM, STRING) */\n \n-/* A C statement to output something to the assembler file to switch to section\n-   NAME for object DECL which is either a `FUNCTION_DECL', a `VAR_DECL' or\n-   `NULL_TREE'.  Some target formats do not support arbitrary sections.  Do not\n-   define this macro in such cases.\n-\n-   At present this macro is only used to support section attributes.  When this\n-   macro is undefined, section attributes are disabled.\n-\n-   Defined in svr4.h.  */\n-/* #define ASM_OUTPUT_SECTION_NAME(STREAM, DECL, NAME) */\n-\n /* A C statement to output any assembler statements which are required to\n    precede any Objective C object definitions or message sending.  The\n    statement is executed only when compiling an Objective C program.  */\n@@ -4852,23 +4831,6 @@ fprintf (STREAM, \"\\t.word .L%d\\n\", VALUE)\n    This macro need not be defined on most platforms.  */\n /* #define ASM_OUTPUT_EH_REGION_END() */\n \n-/* A C expression to switch to the section in which the main exception table is\n-   to be placed (*note Sections::.).  The default is a section named\n-   `.gcc_except_table' on machines that support named sections via\n-   `ASM_OUTPUT_SECTION_NAME', otherwise if `-fpic' or `-fPIC' is in effect, the\n-   `data_section', otherwise the `readonly_data_section'.  */\n-/* #define EXCEPTION_SECTION() */\n-\n-/* If defined, a C string constant for the assembler operation to switch to the\n-   section for exception handling frame unwind information.  If not defined,\n-   GNU CC will provide a default definition if the target supports named\n-   sections.  `crtstuff.c' uses this macro to switch to the appropriate\n-   section.\n-\n-   You should define this symbol if your target supports DWARF 2 frame unwind\n-   information and the default definition does not work.  */\n-/* #define EH_FRAME_SECTION_ASM_OP */\n-\n /* A C expression that is nonzero if the normal exception table output should\n    be omitted.\n "}, {"sha": "82dde08c758e1ae6e0501bf92db1d20861442c2a", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 2, "deletions": 65, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -338,8 +338,6 @@ dtors_section ()\t\t\t\t\t\t\\\n \n #define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n \n-#define UNIQUE_SECTION_P(DECL)   (DECL_ONE_ONLY (DECL))\n-\n #define UNIQUE_SECTION(DECL, RELOC)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n@@ -403,69 +401,8 @@ dtors_section ()\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* Switch into a generic section.\n- \n-   We make the section read-only and executable for a function decl,\n-   read-only for a const data decl, and writable for a non-const data decl.\n- \n-   If the section has already been defined, we must not\n-   emit the attributes here. The SVR4 assembler does not\n-   recognize section redefinitions.\n-   If DECL is NULL, no attributes are emitted.  */\n-\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC)\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      static htab_t htab;                                               \\\n-                                                                        \\\n-      struct section_info                                               \\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tenum sect_enum {SECT_RW, SECT_RO, SECT_EXEC} type;\t\t\\\n-      };                                                                \\\n-                                                                        \\\n-      struct section_info *s;\t\t\t\t\t\t\\\n-      const char *mode;\t\t\t\t\t\t\t\\\n-      enum sect_enum type;                                              \\\n-      PTR* slot;                                                        \\\n-                                                                        \\\n-      /* The names we put in the hashtable will always be the unique    \\\n-\t versions gived to us by the stringtable, so we can just use    \\\n-\t their addresses as the keys.  */                               \\\n-      if (!htab)                                                        \\\n-\thtab = htab_create (31,                                         \\\n-\t\t\t    htab_hash_pointer,                          \\\n-\t\t\t    htab_eq_pointer,                            \\\n-\t\t\t    NULL);                                      \\\n-                                                                        \\\n-      if (DECL && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n-\ttype = SECT_EXEC, mode = \"ax\";\t\t\t\t\t\\\n-      else if (DECL && DECL_READONLY_SECTION (DECL, RELOC))\t\t\\\n-\ttype = SECT_RO, mode = \"a\";\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\ttype = SECT_RW, mode = \"aw\";\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n-                                                                        \\\n-      /* See if we already have an entry for this section.  */          \\\n-      slot = htab_find_slot (htab, NAME, INSERT);                       \\\n-      if (!*slot)                                                       \\\n-\t{                                                               \\\n-\t  s = (struct section_info *) xmalloc (sizeof (* s));\t\t\\\n-\t  s->type = type;\t\t\t\t\t\t\\\n-\t  *slot = s;\t\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"\\t.section\\t%s,\\\"%s\\\",@progbits\\n\",\t\t\\\n-\t\t   NAME, mode);\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  s = (struct section_info *) *slot;                            \\\n-\t  if (DECL && s->type != type)\t\t\t\t\t\\\n-\t    error_with_decl (DECL,                                      \\\n-\t\t\t     \"%s causes a section type conflict\");      \\\n-\t  \t\t\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"\\t.section\\t%s\\n\", NAME);\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n /* A C statement or statements to switch to the appropriate\n    section for output of RTX in mode MODE.  RTX is some kind"}, {"sha": "55aef3876f7d7580e8c2c6c6ebdbfdee5e3cc4df", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -56,6 +56,8 @@ static const char *cond_string PARAMS ((enum rtx_code));\n static int h8300_valid_decl_attribute PARAMS ((tree, tree, tree, tree));\n static void h8300_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void h8300_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n+static void h8300_asm_named_section PARAMS ((const char *, unsigned int,\n+\t\t\t\t\t     unsigned int));\n \n /* CPU_TYPE, says what cpu we're compiling for.  */\n int cpu_type;\n@@ -3325,3 +3327,13 @@ h8300_adjust_insn_length (insn, length)\n \n   return 0;\n }\n+\n+static void\n+h8300_asm_named_section (name, flags, align)\n+     const char *name;\n+     unsigned int flags ATTRIBUTE_UNUSED;\n+     unsigned int align ATTRIBUTE_UNUSED;\n+{\n+  /* ??? Perhaps we should be using default_coff_asm_named_section.  */\n+  fprintf (asm_out_file, \"\\t.section %s\\n\", name);\n+}"}, {"sha": "f419ba4b1d0037ebf3a32745234c801726a2197c", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -1225,13 +1225,8 @@ readonly_data ()\t\t\t\t\t\t\t\\\n   fprintf (FILE,\t\t\t\t\t\t\t\\\n \t   \"\\t.text\\n.stabs \\\"\\\",%d,0,0,.Letext\\n.Letext:\\n\", N_SO)\n \n-/* A C statement to output something to the assembler file to switch to section\n-   NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n-   NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n-   define this macro in such cases.  */\n-\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC) \\\n-  fprintf (FILE, \"\\t.section %s\\n\", NAME)\n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION h8300_asm_named_section\n \n /* This is how to output the definition of a user-level label named NAME,\n    such as the label on a static function or variable NAME.  */"}, {"sha": "9ea367f3a8fcb53fa26b0926c060c2aa9924d809", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 5, "deletions": 58, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -407,69 +407,16 @@ do {\t\t\t\t\t\t\t\\\n    symbols must be explicitly imported from shared libraries (DLLs).  */\n #define MULTIPLE_SYMBOL_SPACES\n \n-#define UNIQUE_SECTION_P(DECL) DECL_ONE_ONLY (DECL)\n extern void i386_pe_unique_section PARAMS ((TREE, int));\n #define UNIQUE_SECTION(DECL,RELOC) i386_pe_unique_section (DECL, RELOC)\n \n #define SUPPORTS_ONE_ONLY 1\n \n-/* A C statement to output something to the assembler file to switch to section\n-   NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n-   NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n-   define this macro in such cases.  */\n-#undef ASM_OUTPUT_SECTION_NAME\n-#define ASM_OUTPUT_SECTION_NAME(STREAM, DECL, NAME, RELOC)\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  static struct section_info\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      struct section_info *next;\t\t\t\t\t\\\n-      char *name;\t\t\t\t\t\t\t\\\n-      enum sect_enum {SECT_RW, SECT_RO, SECT_EXEC} type;\t\t\\\n-    } *sections;\t\t\t\t\t\t\t\\\n-  struct section_info *s;\t\t\t\t\t\t\\\n-  const char *mode;\t\t\t\t\t\t\t\\\n-  enum sect_enum type;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  for (s = sections; s; s = s->next)\t\t\t\t\t\\\n-    if (!strcmp (NAME, s->name))\t\t\t\t\t\\\n-      break;\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  if (DECL && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n-    type = SECT_EXEC, mode = \"x\";\t\t\t\t\t\\\n-  else if (DECL && DECL_READONLY_SECTION (DECL, RELOC))\t\t\t\\\n-    type = SECT_RO, mode = \"\";\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      type = SECT_RW;\t\t\t\t\t\t\t\\\n-      if (DECL && TREE_CODE (DECL) == VAR_DECL\t\t\t\t\\\n-\t  && lookup_attribute (\"shared\", DECL_MACHINE_ATTRIBUTES (DECL))) \\\n-\tmode = \"ws\";\t\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\tmode = \"w\";\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  if (s == 0)\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      s = (struct section_info *) xmalloc (sizeof (struct section_info)); \\\n-      s->name = xmalloc ((strlen (NAME) + 1) * sizeof (*NAME));\t\t\\\n-      strcpy (s->name, NAME);\t\t\t\t\t\t\\\n-      s->type = type;\t\t\t\t\t\t\t\\\n-      s->next = sections;\t\t\t\t\t\t\\\n-      sections = s;\t\t\t\t\t\t\t\\\n-      fprintf (STREAM, \".section\\t%s,\\\"%s\\\"\\n\", NAME, mode);\t\t\\\n-      /* Functions may have been compiled at various levels of\t\t\\\n-\t optimization so we can't use `same_size' here.  Instead,\t\\\n-\t have the linker pick one.  */\t\t\t\t\t\\\n-      if ((DECL) && DECL_ONE_ONLY (DECL))\t\t\t\t\\\n-\tfprintf (STREAM, \"\\t.linkonce %s\\n\",\t\t\t\t\\\n-\t\t TREE_CODE (DECL) == FUNCTION_DECL\t\t\t\\\n-\t\t ? \"discard\" : \"same_size\");\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (STREAM, \".section\\t%s,\\\"%s\\\"\\n\", NAME, mode);\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-} while (0)\n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION  i386_pe_asm_named_section\n+\n+/* Select attributes for named sections.  */\n+#define TARGET_SECTION_TYPE_FLAGS  i386_pe_section_type_flags\n \n /* Write the extra assembler code needed to declare a function\n    properly.  If we are generating SDB debugging information, this"}, {"sha": "f5e79c2ba0fd68f62c0dabbe5a1309a42d132763", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -57,10 +57,6 @@ Boston, MA 02111-1307, USA.  */\n #undef DTORS_SECTION_ASM_OP\n #define DTORS_SECTION_ASM_OP \"\\t.section .dtor\"\n \n-/* Define the name of the .eh_frame section.  */\n-#undef EH_FRAME_SECTION_ASM_OP\n-#define EH_FRAME_SECTION_ASM_OP \"\\t.section .eh_frame\"\n-\n /* Define the name of the .ident op.  */\n #undef IDENT_ASM_OP\n #define IDENT_ASM_OP \"\\t.ident\\t\"\n@@ -189,14 +185,8 @@ dtor_section ()\t\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\\\n   } while (0)\n \n-/* Tell GCC how to output a section name. Add \"x\" for code sections.  */\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC)\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n-      fprintf ((FILE), \"\\t.section %s,\\\"x\\\"\\n\", (NAME));\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      fprintf ((FILE), \"\\t.section %s\\n\", (NAME));\t\t\t\\\n-  } while (0)\n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION  default_coff_asm_named_section\n \n #define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)\t\\\n   do {\t\t\t\t\t\t\\\n@@ -287,11 +277,6 @@ while (0)\n #undef MAKE_DECL_ONE_ONLY\n #define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n \n-/* Additional support for C++ templates and support for\n-   garbage collection.  */\n-#undef UNIQUE_SECTION_P\n-#define UNIQUE_SECTION_P(DECL) (DECL_ONE_ONLY (DECL))\n-\n #undef UNIQUE_SECTION\n #define UNIQUE_SECTION(DECL,RELOC)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\\"}, {"sha": "864f5200c7c7a743465cc396e9bc1c32d6ce791b", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 2, "deletions": 72, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -341,26 +341,6 @@ dtors_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-#if 0\n-/* Currently gas chokes on this; that's not too hard to fix, but there's\n-   not a lot of impeteus to do it, either.  If it is done, gas will have\n-   to handle long section name escapes (which are defined in the COFF/PE\n-   document as /nnn where nnn is a string table index).  The benefit:\n-   section attributes and -ffunction-sections, neither of which seem to\n-   be critical. */\n-/* gas may have been fixed? bfd was. */\n-\n-/* Switch into a generic section.\n-   This is currently only used to support section attributes.\n-\n-   We make the section read-only and executable for a function decl,\n-   read-only for a const data decl, and writable for a non-const data decl.  */\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME) \\\n-  fprintf (FILE, \".section\\t%s,\\\"%s\\\",@progbits\\n\", NAME, \\\n-\t   (DECL) && TREE_CODE (DECL) == FUNCTION_DECL ? \"ax\" : \\\n-\t   (DECL) && TREE_READONLY (DECL) ? \"a\" : \"aw\")\n-#endif\n-\n /* The MS compilers take alignment as a number of bytes, so we do as well */\n #undef ASM_OUTPUT_ALIGN\n #define ASM_OUTPUT_ALIGN(FILE,LOG) \\\n@@ -505,63 +485,13 @@ do {\t\t\t\t\t\t\t\t\t\\\n    symbols must be explicitly imported from shared libraries (DLLs).  */\n #define MULTIPLE_SYMBOL_SPACES\n \n-#define UNIQUE_SECTION_P(DECL) DECL_ONE_ONLY (DECL)\n extern void i386_pe_unique_section ();\n #define UNIQUE_SECTION(DECL,RELOC) i386_pe_unique_section (DECL, RELOC)\n \n #define SUPPORTS_ONE_ONLY 1\n \n-/* A C statement to output something to the assembler file to switch to section\n-   NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n-   NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n-   define this macro in such cases.  */\n-#undef ASM_OUTPUT_SECTION_NAME\n-#define ASM_OUTPUT_SECTION_NAME(STREAM, DECL, NAME, RELOC)\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  static struct section_info\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      struct section_info *next;\t\t\t\t\t\\\n-      char *name;\t\t\t\t\t\t\t\\\n-      enum sect_enum {SECT_RW, SECT_RO, SECT_EXEC} type;\t\t\\\n-    } *sections;\t\t\t\t\t\t\t\\\n-  struct section_info *s;\t\t\t\t\t\t\\\n-  const char *mode;\t\t\t\t\t\t\t\\\n-  enum sect_enum type;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  for (s = sections; s; s = s->next)\t\t\t\t\t\\\n-    if (!strcmp (NAME, s->name))\t\t\t\t\t\\\n-      break;\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  if (DECL && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n-    type = SECT_EXEC, mode = \"x\";\t\t\t\t\t\\\n-  else if (DECL && DECL_READONLY_SECTION (DECL, RELOC))\t\t\t\\\n-    type = SECT_RO, mode = \"r\";\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    type = SECT_RW, mode = \"w\";\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  if (s == 0)\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      s = (struct section_info *) xmalloc (sizeof (struct section_info)); \\\n-      s->name = xmalloc ((strlen (NAME) + 1) * sizeof (*NAME));\t\t\\\n-      strcpy (s->name, NAME);\t\t\t\t\t\t\\\n-      s->type = type;\t\t\t\t\t\t\t\\\n-      s->next = sections;\t\t\t\t\t\t\\\n-      sections = s;\t\t\t\t\t\t\t\\\n-      fprintf (STREAM, \".section\\t%s,\\\"%s\\\"\\n\", NAME, mode);\t\t\\\n-      /* Functions may have been compiled at various levels of\t\t\\\n-         optimization so we can't use `same_size' here.  Instead,\t\\\n-         have the linker pick one.  */\t\t\t\t\t\\\n-      if ((DECL) && DECL_ONE_ONLY (DECL))\t\t\t\t\\\n-        fprintf (STREAM, \"\\t.linkonce %s\\n\",\t\t\t\t\\\n-\t         TREE_CODE (DECL) == FUNCTION_DECL\t\t\t\\\n-\t         ? \"discard\" : \"same_size\");\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (STREAM, \".section\\t%s,\\\"%s\\\"\\n\", NAME, mode);\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-} while (0)\n-\n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION  default_pe_asm_named_section\n #endif /* 0 */\n \n /* DWARF2 Unwinding doesn't work with exception handling yet. */"}, {"sha": "e263116ace3f603a9bcfb0d76f9a8bdd73b0e4f1", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -181,4 +181,8 @@ extern int ix86_constant_alignment PARAMS ((tree, int));\n extern int ix86_valid_type_attribute_p PARAMS ((tree, tree, tree, tree));\n extern int i386_pe_valid_decl_attribute_p PARAMS ((tree, tree, tree, tree));\n extern int i386_pe_valid_type_attribute_p PARAMS ((tree, tree, tree, tree));\n+extern unsigned int i386_pe_section_type_flags PARAMS ((tree, const char *,\n+\t\t\t\t\t\t\tint));\n+extern void i386_pe_asm_named_section PARAMS ((const char *, unsigned int,\n+\t\t\t\t\t       unsigned int));\n #endif"}, {"sha": "2547ea40a5390a5b9ddc5177a8544384797ec5be", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -608,6 +608,11 @@ static int ix86_fp_comparison_cost PARAMS ((enum rtx_code code));\n static int ix86_save_reg PARAMS ((int, int));\n static void ix86_compute_frame_layout PARAMS ((struct ix86_frame *));\n static int ix86_comp_type_attributes PARAMS ((tree, tree));\n+\n+#if defined(TARGET_ELF) && defined(TARGET_COFF)\n+static void sco_asm_named_section PARAMS ((const char *, unsigned int,\n+\t\t\t\t\t   unsigned int));\n+#endif\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_VALID_TYPE_ATTRIBUTE\n@@ -2323,24 +2328,26 @@ ix86_asm_file_end (file)\n   /* ??? Binutils 2.10 and earlier has a linkonce elimination bug related\n      to updating relocations to a section being discarded such that this\n      doesn't work.  Ought to detect this at configure time.  */\n-#if 0 && defined (ASM_OUTPUT_SECTION_NAME)\n+#if 0\n   /* The trick here is to create a linkonce section containing the\n      pic label thunk, but to refer to it with an internal label.\n      Because the label is internal, we don't have inter-dso name\n      binding issues on hosts that don't support \".hidden\".\n \n      In order to use these macros, however, we must create a fake\n      function decl.  */\n-  {\n-    tree decl = build_decl (FUNCTION_DECL,\n-\t\t\t    get_identifier (\"i686.get_pc_thunk\"),\n-\t\t\t    error_mark_node);\n-    DECL_ONE_ONLY (decl) = 1;\n-    UNIQUE_SECTION (decl, 0);\n-    named_section (decl, NULL, 0);\n-  }\n+  if (targetm.have_named_sections)\n+    {\n+      tree decl = build_decl (FUNCTION_DECL,\n+\t\t\t      get_identifier (\"i686.get_pc_thunk\"),\n+\t\t\t      error_mark_node);\n+      DECL_ONE_ONLY (decl) = 1;\n+      UNIQUE_SECTION (decl, 0);\n+      named_section (decl, NULL, 0);\n+    }\n+  else\n #else\n-  text_section ();\n+    text_section ();\n #endif\n \n   /* This used to call ASM_DECLARE_FUNCTION_NAME() but since it's an\n@@ -10822,3 +10829,17 @@ ix86_output_main_function_alignment_hack (file, size)\n   fprintf (file, \"\\tret\\n\");\n   ASM_OUTPUT_INTERNAL_LABEL (file, \"L\", CODE_LABEL_NUMBER (label));\n }\n+\n+#if defined(TARGET_ELF) && defined(TARGET_COFF)\n+static void\n+sco_asm_named_section (name, flags, align)\n+     const char *name;\n+     unsigned int flags;\n+     unsigned int align;\n+{\n+  if (TARGET_ELF)\n+    default_elf_asm_named_section (name, flags, align);\n+  else\n+    default_coff_asm_named_section (name, flags, align);\n+}\n+#endif"}, {"sha": "c2c5cff7513f702d4839977e6777c498afe9425d", "filename": "gcc/config/i386/i386elf.h", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fi386%2Fi386elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fi386%2Fi386elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386elf.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -170,21 +170,8 @@ do { long value[3];\t\t\t\t\t\t\t\\\n \n #define LOCAL_LABEL_PREFIX\t\".\"\n \n-/* A C statement to output something to the assembler file to switch to section\n-   NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n-   NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n-   define this macro in such cases.  */\n-\n-#undef  ASM_OUTPUT_SECTION_NAME\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC) \\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n-    fprintf (FILE, \".section\\t%s,\\\"ax\\\"\\n\", (NAME));\t\t\t\\\n-  else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))\t\t\\\n-    fprintf (FILE, \".section\\t%s,\\\"a\\\"\\n\", (NAME));\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \".section\\t%s,\\\"aw\\\"\\n\", (NAME));\t\t\t\\\n-} while (0)\n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n /* If defined, a C expression whose value is a string containing the\n    assembler operation to identify the following data as"}, {"sha": "b7a7cdbfd294d08f873e4a96fc3184f12dd4d6a0", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 13, "deletions": 55, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -75,10 +75,10 @@ Boston, MA 02111-1307, USA.  */\n #define GLOBAL_ASM_OP\t\t\t\"\\t.globl\\t\"\n \n #undef EH_FRAME_SECTION_ASM_OP\n-#define EH_FRAME_SECTION_ASM_OP_COFF\t\"\\t.section\\t.ehfram, \\\"x\\\"\"\n-#define EH_FRAME_SECTION_ASM_OP_ELF\t\"\\t.section\\t.eh_frame, \\\"aw\\\"\"\n-#define EH_FRAME_SECTION_ASM_OP\t\\\n-  ((TARGET_ELF) ? EH_FRAME_SECTION_ASM_OP_ELF : EH_FRAME_SECTION_ASM_OP_COFF)\n+#define EH_FRAME_SECTION_NAME_COFF\t\".ehfram\"\n+#define EH_FRAME_SECTION_NAME_ELF\t\".eh_frame\"\n+#define EH_FRAME_SECTION_NAME\t\\\n+  ((TARGET_ELF) ? EH_FRAME_SECTION_NAME_ELF : EH_FRAME_SECTION_NAME_COFF)\n \n /* Avoid problems (long sectino names, forward assembler refs) with DWARF\n    exception unwinding when we're generating COFF */\n@@ -444,56 +444,14 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define USER_LABEL_PREFIX \"\"\n \n /* \n- * Compensate for the difference between ELF and COFF assembler syntax.\n- * Otherwise, this is cribbed from ../svr4.h.\n  * We rename 'gcc_except_table' to the shorter name in preparation\n- * for the day when we're ready to do DWARF2 eh unwinding under COFF \n+ * for the day when we're ready to do DWARF2 eh unwinding under COFF.\n  */\n-#undef ASM_OUTPUT_SECTION_NAME\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC) \\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  static struct section_info                                            \\\n-    {                                                                   \\\n-      struct section_info *next;                                        \\\n-      char *name;                                                       \\\n-      enum sect_enum {SECT_RW, SECT_RO, SECT_EXEC} type;                \\\n-    } *sections;                                                        \\\n-  struct section_info *s;                                               \\\n-  const char *mode;                                                     \\\n-  enum sect_enum type;                                                  \\\n-  const char *sname = NAME ;\t\t\t\t\t\t\\\n-  if (strcmp(NAME, \".gcc_except_table\") == 0) sname = \".gccexc\" ;\t\\\n-                                                                        \\\n-  for (s = sections; s; s = s->next)                                    \\\n-    if (!strcmp (NAME, s->name))                                        \\\n-      break;                                                            \\\n-                                                                        \\\n-  if (DECL && TREE_CODE (DECL) == FUNCTION_DECL)                        \\\n-    type = SECT_EXEC, mode = (TARGET_ELF) ? \"ax\" : \"x\" ;                \\\n-  else if (DECL && DECL_READONLY_SECTION (DECL, RELOC))                 \\\n-    type = SECT_RO, mode = \"a\";                                         \\\n-  else                                                                  \\\n-    type = SECT_RW, mode = (TARGET_ELF) ? \"aw\" : \"w\" ;                  \\\n-                                                                        \\\n-  if (s == 0)                                                           \\\n-    {                                                                   \\\n-      s = (struct section_info *) xmalloc (sizeof (struct section_info));  \\\n-      s->name = xmalloc ((strlen (NAME) + 1) * sizeof (*NAME));         \\\n-      strcpy (s->name, NAME);                                           \\\n-      s->type = type;                                                   \\\n-      s->next = sections;                                               \\\n-      sections = s;                                                     \\\n-      fprintf (FILE, \".section\\t%s,\\\"%s\\\"%s\\n\", sname, mode,\t\t\\\n-\t\t(TARGET_ELF) ? \",@progbits\" : \"\" );    \t\t\t\\\n-    }                                                                   \\\n-  else                                                                  \\\n-    {                                                                   \\\n-      if (DECL && s->type != type)                                      \\\n-        error_with_decl (DECL, \"%s causes a section type conflict\");    \\\n-                                                                        \\\n-      fprintf (FILE, \".section\\t%s\\n\", sname);                          \\\n-    }                                                                   \\\n-} while (0)\n+#define EXCEPTION_SECTION()\t\tnamed_section (NULL, \".gccexc\", 1)\n+\n+/* Switch into a generic section.  */\n+#undef TARGET_ASM_NAMED_SECTION\n+#define TARGET_ASM_NAMED_SECTION  sco_asm_named_section\n \n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE) \\\n@@ -925,7 +883,7 @@ compiler at the end of the day. Onward we go ...\n # undef FINI_SECTION_ASM_OP\n # undef CTORS_SECTION_ASM_OP\n # undef DTORS_SECTION_ASM_OP\n-# undef EH_FRAME_SECTION_ASM_OP\n+# undef EH_FRAME_SECTION_NAME\n # undef CTOR_LIST_BEGIN\n # undef CTOR_LIST_END\n # undef DO_GLOBAL_CTORS_BODY\n@@ -936,13 +894,13 @@ compiler at the end of the day. Onward we go ...\n #  define FINI_SECTION_ASM_OP FINI_SECTION_ASM_OP_ELF\n #  define DTORS_SECTION_ASM_OP DTORS_SECTION_ASM_OP_ELF\n #  define CTORS_SECTION_ASM_OP CTORS_SECTION_ASM_OP_ELF\n-#  define EH_FRAME_SECTION_ASM_OP EH_FRAME_SECTION_ASM_OP_ELF\n+#  define EH_FRAME_SECTION_NAME EH_FRAME_SECTION_NAME_ELF\n # else /* ! _SCO_ELF */\n #  define INIT_SECTION_ASM_OP INIT_SECTION_ASM_OP_COFF\n #  define FINI_SECTION_ASM_OP FINI_SECTION_ASM_OP_COFF\n #  define DTORS_SECTION_ASM_OP DTORS_SECTION_ASM_OP_COFF\n #  define CTORS_SECTION_ASM_OP CTORS_SECTION_ASM_OP_COFF\n-#  define EH_FRAME_SECTION_ASM_OP EH_FRAME_SECTION_ASM_OP_COFF\n+#  define EH_FRAME_SECTION_NAME EH_FRAME_SECTION_NAME_COFF\n #  define CTOR_LIST_BEGIN asm (INIT_SECTION_ASM_OP); asm (\"pushl $0\")\n #  define CTOR_LIST_END CTOR_LIST_BEGIN\n #  define DO_GLOBAL_CTORS_BODY\t\t\t\t\t\t\\"}, {"sha": "7e03383f29f94040b56891387b43eabd43f9919c", "filename": "gcc/config/i386/win32.h", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fi386%2Fwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fi386%2Fwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwin32.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -233,33 +233,16 @@ do {\t\t\t\t\t\t\t\t\t\\\n    symbols must be explicitly imported from shared libraries (DLLs).  */\n #define MULTIPLE_SYMBOL_SPACES\n \n-#define UNIQUE_SECTION_P(DECL) DECL_ONE_ONLY (DECL)\n extern void i386_pe_unique_section ();\n #define UNIQUE_SECTION(DECL,RELOC) i386_pe_unique_section (DECL, RELOC)\n \n #define SUPPORTS_ONE_ONLY 1\n \n-/* A C statement to output something to the assembler file to switch to section\n-   NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n-   NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n-   define this macro in such cases.  */\n-#undef ASM_OUTPUT_SECTION_NAME\n-#define ASM_OUTPUT_SECTION_NAME(STREAM, DECL, NAME, RELOC)\t\\\n-do {\t\t\t\t\t\t\t\t\\\n-  if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\\\n-    fprintf (STREAM, \"\\t.section %s,\\\"x\\\"\\n\", (NAME));\t\t\\\n-  else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))\t\\\n-    fprintf (STREAM, \"\\t.section %s,\\\"\\\"\\n\", (NAME));\t\t\\\n-  else\t\t\t\t\t\t\t\t\\\n-    fprintf (STREAM, \"\\t.section %s,\\\"w\\\"\\n\", (NAME));\t\t\\\n-  /* Functions may have been compiled at various levels of\t\\\n-     optimization so we can't use `same_size' here.  Instead,\t\\\n-     have the linker pick one.  */\t\t\t\t\\\n-  if ((DECL) && DECL_ONE_ONLY (DECL))\t\t\t\t\\\n-    fprintf (STREAM, \"\\t.linkonce %s\\n\",\t\t\t\\\n-\t     TREE_CODE (DECL) == FUNCTION_DECL\t\t\t\\\n-\t     ? \"discard\" : \"same_size\");\t\t\t\\\n-} while (0)\n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION  i386_pe_asm_named_section\n+\n+/* Select attributes for named sections.  */\n+#define TARGET_SECTION_TYPE_FLAGS  i386_pe_section_type_flags\n \n #undef ASM_COMMENT_START\n #define ASM_COMMENT_START \" #\""}, {"sha": "ff13c3863b7b545372255815b4836db9f52b29c7", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 95, "deletions": 1, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -29,6 +29,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"tm_p.h\"\n #include \"toplev.h\"\n+#include \"hashtab.h\"\n \n /* i386/PE specific attribute support.\n \n@@ -55,7 +56,7 @@ void i386_pe_mark_dllimport PARAMS ((tree));\n int\n i386_pe_valid_decl_attribute_p (decl, attributes, attr, args)\n      tree decl;\n-     tree attributes;\n+     tree attributes ATTRIBUTE_UNUSED;\n      tree attr;\n      tree args;\n {\n@@ -455,6 +456,99 @@ i386_pe_unique_section (decl, reloc)\n \n   DECL_SECTION_NAME (decl) = build_string (len, string);\n }\n+\n+/* Select a set of attributes for section NAME based on the properties\n+   of DECL and whether or not RELOC indicates that DECL's initializer\n+   might contain runtime relocations.\n+\n+   We make the section read-only and executable for a function decl,\n+   read-only for a const data decl, and writable for a non-const data decl.\n+\n+   If the section has already been defined, to not allow it to have\n+   different attributes, as (1) this is ambiguous since we're not seeing\n+   all the declarations up front and (2) some assemblers (e.g. SVR4)\n+   do not recoginize section redefinitions.  */\n+/* ??? This differs from the \"standard\" PE implementation in that we\n+   handle the SHARED variable attribute.  Should this be done for all\n+   PE targets?  */\n+\n+#define SECTION_PE_SHARED\tSECTION_MACH_DEP\n+\n+unsigned int\n+i386_pe_section_type_flags (decl, name, reloc)\n+     tree decl;\n+     const char *name;\n+     int reloc;\n+{\n+  static htab_t htab;\n+  unsigned int flags;\n+  unsigned int **slot;\n+\n+  /* The names we put in the hashtable will always be the unique\n+     versions gived to us by the stringtable, so we can just use\n+     their addresses as the keys.  */\n+  if (!htab)\n+    htab = htab_create (31, htab_hash_pointer, htab_eq_pointer, NULL);\n+\n+  if (decl && TREE_CODE (decl) == FUNCTION_DECL)\n+    flags = SECTION_CODE;\n+  else if (decl && DECL_READONLY_SECTION (decl, reloc))\n+    flags = 0;\n+  else\n+    {\n+      flags = SECTION_WRITE;\n+\n+      if (decl && TREE_CODE (decl) == VAR_DECL\n+\t  && lookup_attribute (\"shared\", DECL_MACHINE_ATTRIBUTES (decl)))\n+\tflags |= SECTION_PE_SHARED;\n+    }\n+\n+  if (decl && DECL_ONE_ONLY (decl))\n+    flags |= SECTION_LINKONCE;\n+\n+  /* See if we already have an entry for this section.  */\n+  slot = (unsigned int **) htab_find_slot (htab, name, INSERT);\n+  if (!*slot)\n+    {\n+      *slot = (unsigned int *) xmalloc (sizeof (unsigned int));\n+      **slot = flags;\n+    }\n+  else\n+    {\n+      if (decl && **slot != flags)\n+\terror_with_decl (decl, \"%s causes a section type conflict\");\n+    }\n+\n+  return flags;\n+}\n+\n+void\n+i386_pe_asm_named_section (name, flags, align)\n+     const char *name;\n+     unsigned int flags;\n+     unsigned int align ATTRIBUTE_UNUSED;\n+{\n+  char flagchars[8], *f = flagchars;\n+\n+  if (flags & SECTION_CODE)\n+    *f++ = 'x';\n+  if (flags & SECTION_WRITE)\n+    *f++ = 'w';\n+  if (flags & SECTION_PE_SHARED)\n+    *f++ = 's';\n+  *f = '\\0';\n+\n+  fprintf (asm_out_file, \"\\t.section\\t%s,\\\"%s\\\"\\n\", name, flagchars);\n+\n+  if (flags & SECTION_LINKONCE)\n+    {\n+      /* Functions may have been compiled at various levels of\n+         optimization so we can't use `same_size' here.\n+         Instead, have the linker pick one.  */\n+      fprintf (asm_out_file, \"\\t.linkonce %s\\n\",\n+\t       (flags & SECTION_CODE ? \"discard\" : \"same_size\"));\n+    }\n+}\n \f\n /* The Microsoft linker requires that every function be marked as\n    DT_FCN.  When using gas on cygwin, we must emit appropriate .type"}, {"sha": "b5fe7ef88a513e1646e62eba191118ad0bd783d1", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -2454,16 +2454,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \f\n /* Assembler Commands for Exception Regions.  */\n \n-/* If defined, a C string constant for the assembler operation to switch to the\n-   section for exception handling frame unwind information.  If not defined,\n-   GNU CC will provide a default definition if the target supports named\n-   sections.  `crtstuff.c' uses this macro to switch to the appropriate\n-   section.\n-\n-   You should define this symbol if your target supports DWARF 2 frame unwind\n-   information and the default definition does not work.  */\n-#define EH_FRAME_SECTION_ASM_OP \"\\t.section\\t.IA_64.unwind,\\\"aw\\\"\"\n-\n /* Select a format to encode pointers in exception handling data.  CODE\n    is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n    true if the symbol may be affected by dynamic relocations.  */\n@@ -2551,18 +2541,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define DWARF2_DEBUGGING_INFO\n \n-/* Section names for DWARF2 debug info.  */\n-\n-#define DEBUG_INFO_SECTION\t\".debug_info, \\\"\\\", \\\"progbits\\\"\"\n-#define DEBUG_ABBREV_SECTION\t\".debug_abbrev, \\\"\\\", \\\"progbits\\\"\"\n-#define DEBUG_ARANGES_SECTION\t\".debug_aranges, \\\"\\\", \\\"progbits\\\"\"\n-#define DEBUG_MACINFO_SECTION\t\".debug_macinfo, \\\"\\\", \\\"progbits\\\"\"\n-#define DEBUG_LINE_SECTION\t\".debug_line, \\\"\\\", \\\"progbits\\\"\"\n-#define DEBUG_LOC_SECTION\t\".debug_loc, \\\"\\\", \\\"progbits\\\"\"\n-#define DEBUG_PUBNAMES_SECTION\t\".debug_pubnames, \\\"\\\", \\\"progbits\\\"\"\n-#define DEBUG_STR_SECTION\t\".debug_str, \\\"\\\", \\\"progbits\\\"\"\n-#define DEBUG_RANGES_SECTION\t\".debug_ranges, \\\"\\\", \\\"progbits\\\"\"\n-\n /* C string constants giving the pseudo-op to use for a sequence of\n    2, 4, and 8 byte unaligned constants.  dwarf2out.c needs these.  */\n "}, {"sha": "ea9eb2f7014610f37207a16ed0fbf06c9a715033", "filename": "gcc/config/ia64/sysv4.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fia64%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fia64%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fsysv4.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -47,11 +47,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n   ASM_OUTPUT_SKIP (FILE, SIZE ? SIZE : 1);\t\t\t\t\\\n } while (0)\n \n-/* ??? Intel assembler does not allow \".\" in section names, so turn off\n-   gnu.linkonce section support, but only when using the Intel assembler.  */\n-#undef UNIQUE_SECTION_P\n-#define UNIQUE_SECTION_P(DECL) (TARGET_GNU_AS ? DECL_ONE_ONLY (DECL) : 0)\n-\n /* The # tells the Intel assembler that this is not a register name.\n    However, we can't emit the # in a label definition, so we set a variable\n    in ASM_OUTPUT_LABEL to control whether we want the postfix here or not."}, {"sha": "8a63c6ca5bac0d74edbe8747bc12f208305068cd", "filename": "gcc/config/m68k/coff.h", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fm68k%2Fcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fm68k%2Fcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fcoff.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -100,13 +100,9 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n   asm_output_aligned_bss ((FILE), (DECL), (NAME), (SIZE), (ALIGN))\n \n-/* Support generic sections */\n-\n-#undef ASM_OUTPUT_SECTION_NAME\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC) \\\n-  fprintf((FILE), \".section\\t%s,\\\"%c\\\"\\n\", (NAME), \\\n-\t  (DECL) && (TREE_CODE (DECL) == FUNCTION_DECL || \\\n-\t\t     DECL_READONLY_SECTION (DECL, RELOC)) ? 'x' : 'd')\n+/* Switch into a generic section.  */\n+#undef TARGET_ASM_NAMED_SECTION\n+#define TARGET_ASM_NAMED_SECTION  m68k_coff_asm_named_section\n \n /* Support the ctors and dtors sections for g++.  */\n "}, {"sha": "b18c07cd089b5f9d1f196a0246385ecd4760dd19", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -60,6 +60,8 @@ static rtx find_addr_reg PARAMS ((rtx));\n static const char *singlemove_string PARAMS ((rtx *));\n static void m68k_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void m68k_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n+static void m68k_coff_asm_named_section PARAMS ((const char *, unsigned int,\n+\t\t\t\t\t\t unsigned int));\n \f\n \n /* Alignment to use for loops and jumps */\n@@ -4208,3 +4210,21 @@ output_xorsi3 (operands)\n     }\n   return \"eor%.l %2,%0\";\n }\n+\n+/* Output assembly to switch to section NAME with attribute FLAGS.  */\n+\n+static void\n+m68k_coff_asm_named_section (name, flags, align)\n+     const char *name;\n+     unsigned int flags;\n+     unsigned int align ATTRIBUTE_UNUSED;\n+{\n+  char flagchar;\n+\n+  if (flags & SECTION_WRITE)\n+    flagchar = 'd';\n+  else\n+    flagchar = 'x';\n+\n+  fprintf (asm_out_file, \"\\t.section\\t%s,\\\"%c\\\"\\n\", name, flagchar);\n+}"}, {"sha": "a8b32e6e90dba144c246e106bfc8791f0e7793c3", "filename": "gcc/config/m68k/rtemself.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fm68k%2Frtemself.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fm68k%2Frtemself.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Frtemself.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -58,9 +58,6 @@ Boston, MA 02111-1307, USA.  */\n #undef FINI_SECTION_ASM_OP\n #define FINI_SECTION_ASM_OP    \"\\t.section\\t.fini\"\n \n-#undef EH_FRAME_SECTION_ASM_OP\n-#define EH_FRAME_SECTION_ASM_OP        \"\\t.section\\t.eh_frame\"\n-\n /* Do I need this? */\n #undef INVOKE__main\n "}, {"sha": "81358f717bf05547c3bd9d446a9e2b5e1ca3b394", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -1673,7 +1673,7 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n #undef\tCONST_SECTION_ASM_OP\n #undef\tCTORS_SECTION_ASM_OP\n #undef\tDTORS_SECTION_ASM_OP\n-#undef  ASM_OUTPUT_SECTION_NAME\n+#undef  TARGET_ASM_NAMED_SECTION\n #undef\tINIT_SECTION_ASM_OP\n #undef\tFINI_SECTION_ASM_OP\n #undef\tTYPE_ASM_OP"}, {"sha": "2d0c195549ad3597b1fdeac3965afd80ddc21ba3", "filename": "gcc/config/mcore/mcore-pe.h", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -221,30 +221,8 @@ rdata_section ()\t\t\t\t\t\t\\\n #undef DO_GLOBAL_DTORS_BODY\n #undef INIT_SECTION_ASM_OP\n \n-#define UNIQUE_SECTION_P(DECL) DECL_ONE_ONLY (DECL)\n-\n #define SUPPORTS_ONE_ONLY 1\n \n-/* A C statement to output something to the assembler file to switch to section\n-   NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n-   NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n-   define this macro in such cases.  */\n-#undef  ASM_OUTPUT_SECTION_NAME\n-#define ASM_OUTPUT_SECTION_NAME(STREAM, DECL, NAME, RELOC) \t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\\\n-\tfprintf (STREAM, \"\\t.section %s,\\\"x\\\"\\n\", NAME);\t\\\n-      else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))\t\\\n-\tfprintf (STREAM, \"\\t.section %s,\\\"\\\"\\n\", NAME);\t\t\\\n-      else\t\t\t\t\t\t\t\\\n-\tfprintf (STREAM, \"\\t.section %s,\\\"w\\\"\\n\", NAME);\t\\\n-      /* Functions may have been compiled at various levels of\t\\\n-\t optimization so we can't use `same_size' here.  \t\\\n-\t Instead, have the linker pick one.  */\t\t\t\\\n-      if ((DECL) && DECL_ONE_ONLY (DECL))\t\t\t\\\n-\tfprintf (STREAM, \"\\t.linkonce %s\\n\",\t\t\t\\\n-\t\t TREE_CODE (DECL) == FUNCTION_DECL\t\t\\\n-\t\t ? \"discard\" : \"same_size\");\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n+/* Switch into a generic section.  */\n+#undef TARGET_ASM_NAMED_SECTION\n+#define TARGET_ASM_NAMED_SECTION  default_pe_asm_named_section"}, {"sha": "778b734be35d9d6fb2329aef715836d19f7b3686", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -132,6 +132,9 @@ static int        mcore_dllexport_p            PARAMS ((tree));\n static int        mcore_dllimport_p            PARAMS ((tree));\n static int        mcore_valid_decl_attribute   PARAMS ((tree, tree,\n \t\t\t\t\t\t\ttree, tree));\n+static void\t  mcore_asm_named_section      PARAMS ((const char *,\n+\t\t\t\t\t\t\tunsigned int,\n+\t\t\t\t\t\t\tunsigned int));\n \f\n /* Initialize the GCC target structure.  */\n #ifdef TARGET_DLLIMPORT_DECL_ATTRIBUTES\n@@ -3594,3 +3597,12 @@ mcore_naked_function_p ()\n {\n   return lookup_attribute (\"naked\", DECL_MACHINE_ATTRIBUTES (current_function_decl)) != NULL_TREE;\n }\n+\n+static void\n+mcore_asm_named_section (name, flags, align)\n+     const char *name;\n+     unsigned int flags ATTRIBUTE_UNUSED;\n+     unsigned int align ATTRIBUTE_UNUSED;\n+{\n+  fprintf (asm_out_file, \"\\t.section %s\\n\", name);\n+}"}, {"sha": "3cd595efb36d86a5aba54cf8b53f83cf1a7dfc23", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -1137,9 +1137,8 @@ switch_to_section (section, decl)\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n \n-\n-#define ASM_OUTPUT_SECTION(file, nam) \\\n-   do { fprintf (file, \"\\t.section\\t%s\\n\", nam); } while (0) \n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION  mcore_asm_named_section\n \n /* This is how to output an insn to push a register on the stack.\n    It need not be very fast code.  */"}, {"sha": "3ef9020c28a88c2a5704fe504b6486b36cfc0562", "filename": "gcc/config/mips/elf.h", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fmips%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fmips%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -56,24 +56,9 @@ do {\t\t\t\t\t\t\t\\\n #undef MAX_OFILE_ALIGNMENT\n #define MAX_OFILE_ALIGNMENT (32768*8)\n \n-/* A C statement to output something to the assembler file to switch to section\n-   NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n-   NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n-   define this macro in such cases.  */\n-\n-#undef ASM_OUTPUT_SECTION_NAME\n-#define ASM_OUTPUT_SECTION_NAME(F, DECL, NAME, RELOC) \\\n-do {\t\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\t\\\n-  if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\\\n-    fprintf (asm_out_text_file, \"\\t.section %s,\\\"ax\\\",@progbits\\n\", (NAME)); \\\n-  else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))\t\\\n-    fprintf (F, \"\\t.section %s,\\\"a\\\",@progbits\\n\", (NAME));\t\\\n-  else if (! strcmp (NAME, \".bss\"))                             \\\n-    fprintf (F, \"\\t.section %s,\\\"aw\\\",@nobits\\n\", (NAME));      \\\n-  else\t\t\t\t\t\t\t\t\\\n-    fprintf (F, \"\\t.section %s,\\\"aw\\\",@progbits\\n\", (NAME));\t\\\n-} while (0)\n+/* Switch into a generic section.  */\n+#undef TARGET_ASM_NAMED_SECTION\n+#define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n /* The following macro defines the format used to output the second\n    operand of the .type assembler directive.  Different svr4 assemblers\n@@ -211,8 +196,6 @@ do {\t\t\t\t\t\t\t\t\t \\\n  } while (0)\n \n #define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n-#undef UNIQUE_SECTION_P\n-#define UNIQUE_SECTION_P(DECL) (DECL_ONE_ONLY (DECL))\n #undef UNIQUE_SECTION\n #define UNIQUE_SECTION(DECL,RELOC)\t\t\t\t\t   \\\n do {\t\t\t\t\t\t\t\t\t   \\"}, {"sha": "782c62bad8dfa06b45dad6f7502dc60bf24b826c", "filename": "gcc/config/mips/elf64.h", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fmips%2Felf64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fmips%2Felf64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf64.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -73,24 +73,9 @@ do {\t\t\t\t\t\t\t\\\n   fprintf (asm_out_text_file, \"\\t.etype\\t0x%x;\", (a));\t\\\n } while (0)\n \n-/* A C statement to output something to the assembler file to switch to section\n-   NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n-   NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n-   define this macro in such cases.  */\n-\n-#undef ASM_OUTPUT_SECTION_NAME\n-#define ASM_OUTPUT_SECTION_NAME(F, DECL, NAME, RELOC) \\\n-do {\t\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\t\\\n-  if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\\\n-    fprintf (asm_out_text_file, \"\\t.section %s,\\\"ax\\\",@progbits\\n\", (NAME)); \\\n-  else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))\t\\\n-    fprintf (F, \"\\t.section %s,\\\"a\\\",@progbits\\n\", (NAME));\t\\\n-  else if (! strcmp (NAME, \".bss\"))\t\t\t\t\\\n-    fprintf (F, \"\\t.section %s,\\\"aw\\\",@nobits\\n\", (NAME));\t\\\n-  else\t\t\t\t\t\t\t\t\\\n-    fprintf (F, \"\\t.section %s,\\\"aw\\\",@progbits\\n\", (NAME));\t\\\n-} while (0)\n+/* Switch into a generic section.  */\n+#undef TARGET_ASM_NAMED_SECTION\n+#define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n /* The following macro defines the format used to output the second\n    operand of the .type assembler directive.  Different svr4 assemblers\n@@ -192,8 +177,6 @@ do {\t\t\t\t\t\t\t\t\t \\\n  } while (0)\n \n #define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n-#undef UNIQUE_SECTION_P\n-#define UNIQUE_SECTION_P(DECL) (DECL_ONE_ONLY (DECL))\n #undef UNIQUE_SECTION\n #define UNIQUE_SECTION(DECL,RELOC)\t\t\t\t\t   \\\n do {\t\t\t\t\t\t\t\t\t   \\"}, {"sha": "4e3a227638a13ee1008e491edeb7acd2fc2b99a4", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 3, "deletions": 34, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -217,19 +217,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define POPSECTION_ASM_OP\t\"\\t.popsection\"\n \n-#define DEBUG_INFO_SECTION\t\".debug_info,0x7000001e,0,0,1\"\n-#define DEBUG_LINE_SECTION\t\".debug_line,0x7000001e,0,0,1\"\n-#define DEBUG_SFNAMES_SECTION\t\".debug_sfnames,0x7000001e,0,0,1\"\n-#define DEBUG_SRCINFO_SECTION\t\".debug_srcinfo,0x7000001e,0,0,1\"\n-#define DEBUG_MACINFO_SECTION\t\".debug_macinfo,0x7000001e,0,0,1\"\n-#define DEBUG_PUBNAMES_SECTION\t\".debug_pubnames,0x7000001e,0,0,1\"\n-#define DEBUG_ARANGES_SECTION\t\".debug_aranges,0x7000001e,0,0,1\"\n-#define DEBUG_FRAME_SECTION\t\".debug_frame,0x7000001e,0x08000000,0,1\"\n-#define DEBUG_ABBREV_SECTION\t\".debug_abbrev,0x7000001e,0,0,1\"\n-#define DEBUG_LOC_SECTION\t\".debug_loc,0x7000001e,0,0,1\"\n-#define DEBUG_STR_SECTION\t\".debug_str,0x7000001e,0,0,1\"\n-#define DEBUG_RANGES_SECTION\t\".debug_ranges,0x7000001e,0,0,1\"\n-\n /* ??? If no mabi=X option give, but a mipsX option is, then should depend\n    on the mipsX option.  */\n /* If no mips[3,4] option given, give the appropriate default for mabi=X */\n@@ -278,12 +265,9 @@ Boston, MA 02111-1307, USA.  */\n #if _MIPS_SZPTR == 64\n #define CTORS_SECTION_ASM_OP \"\\t.section\\t.ctors,1,2,0,8\"\n #define DTORS_SECTION_ASM_OP \"\\t.section\\t.dtors,1,2,0,8\"\n-#define EH_FRAME_SECTION_ASM_OP \"\\t.section\\t.eh_frame,1,2,0,8\"\n #else /* _MIPS_SZPTR != 64 */\n #define CTORS_SECTION_ASM_OP \"\\t.section\\t.ctors,1,2,0,4\"\n #define DTORS_SECTION_ASM_OP \"\\t.section\\t.dtors,1,2,0,4\"\n-#define EH_FRAME_SECTION_ASM_OP \"\\t.section\\t.eh_frame,1,2,0,4\"\n-\n #endif /* _MIPS_SZPTR == 64 */\n \n #else /* ! (defined (CRT_BEGIN) || defined (CRT_END)) */\n@@ -293,8 +277,6 @@ Boston, MA 02111-1307, USA.  */\n   (Pmode == DImode ? \"\\t.section\\t.ctors,1,2,0,8\" : \"\\t.section\\t.ctors,1,2,0,4\")\n #define DTORS_SECTION_ASM_OP \\\n   (Pmode == DImode ? \"\\t.section\\t.dtors,1,2,0,8\" : \"\\t.section\\t.dtors,1,2,0,4\")\n-#define EH_FRAME_SECTION_ASM_OP \\\n-  (Pmode == DImode ? \"\\t.section\\t.eh_frame,1,2,0,8\" : \"\\t.section\\t.eh_frame,1,2,0,4\")\n #endif /* defined (CRT_BEGIN) || defined (CRT_END) */\n \n /* A default list of other sections which we might be \"in\" at any given\n@@ -382,22 +364,9 @@ dtors_section ()\t\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n   } while (0)\n \n-/* A C statement to output something to the assembler file to switch to section\n-   NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n-   NULL_TREE.  */\n-\n-#define ASM_OUTPUT_SECTION_NAME(F, DECL, NAME, RELOC)\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  extern FILE *asm_out_text_file;\t\t\t\t\t\\\n-  if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n-    fprintf (asm_out_text_file, \"\\t.section %s,1,6,4,4\\n\", (NAME));\t\\\n-  else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))\t\t\\\n-    fprintf (F, \"\\t.section %s,1,2,0,8\\n\", (NAME));\t\t\t\\\n-  else if (! strcmp (NAME, \".bss\"))                         \t\t\\\n-    fprintf (F, \"\\t.section %s,\\\"aw\\\",@nobits\\n\", (NAME));      \t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    fprintf (F, \"\\t.section %s,1,3,0,8\\n\", (NAME));\t\t\t\\\n-} while (0)\n+/* Switch into a generic section.  */\n+#undef TARGET_ASM_NAMED_SECTION\n+#define TARGET_ASM_NAMED_SECTION  iris6_asm_named_section\n \n /* Stuff for constructors.  End here.  */\n "}, {"sha": "409af7d0ff440b51926c35aff0b1441b62334ab4", "filename": "gcc/config/mips/iris6gld.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fmips%2Firis6gld.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fmips%2Firis6gld.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6gld.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -49,8 +49,6 @@ Boston, MA 02111-1307, USA.  */\n \n /* The GNU linker supports one-only sections.  */\n #define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n-#undef  UNIQUE_SECTION_P\n-#define UNIQUE_SECTION_P(DECL) (DECL_ONE_ONLY (DECL))\n #define UNIQUE_SECTION(DECL, RELOC)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\"}, {"sha": "be0033a9fb168a1fb6338c72874ac988b68ad1db", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -110,7 +110,9 @@ static void mips_add_gc_roots                   PARAMS ((void));\n static void mips_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static void mips_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static enum processor_type mips_parse_cpu       PARAMS ((const char *));\n-\n+static void iris6_asm_named_section\t\tPARAMS ((const char *,\n+\t\t\t\t\t\t\t unsigned int,\n+\t\t\t\t\t\t\t unsigned int));\n /* Global variables for machine-dependent things.  */\n \n /* Threshold for data being put into the small data/bss area, instead\n@@ -9800,3 +9802,49 @@ mips_parse_cpu (cpu_string)\n \n   return cpu;\n }\n+\n+/* Output assembly to switch to section NAME with attribute FLAGS.  */\n+\n+static void\n+iris6_asm_named_section (name, flags, align)\n+     const char *name;\n+     unsigned int flags;\n+     unsigned int align;\n+{\n+  unsigned int sh_type, sh_flags, sh_entsize;\n+\n+  sh_flags = 0;\n+  if (!(flags & SECTION_DEBUG))\n+    sh_flags |= 2; /* SHF_ALLOC */\n+  if (flags & SECTION_WRITE)\n+    sh_flags |= 1; /* SHF_WRITE */\n+  if (flags & SECTION_CODE)\n+    sh_flags |= 4; /* SHF_EXECINSTR */\n+  if (flags & SECTION_SMALL)\n+    sh_flags |= 0x10000000; /* SHF_MIPS_GPREL */\n+  if (strcmp (name, \".debug_frame\") == 0)\n+    sh_flags |= 0x08000000; /* SHF_MIPS_NOSTRIP */\n+\n+  if (flags & SECTION_DEBUG)\n+    sh_type = 0x7000001e; /* SHT_MIPS_DWARF */\n+  else if (flags & SECTION_BSS)\n+    sh_type = 8; /* SHT_NOBITS */\n+  else\n+    sh_type = 1; /* SHT_PROGBITS */\n+\n+  if (flags & SECTION_CODE)\n+    sh_entsize = 4;\n+  else\n+    sh_entsize = 0;\n+\n+  if (align == 0)\n+    {\n+      if (flags & SECTION_CODE)\n+\talign = 4;\n+      else\n+\talign = 8;\n+    }\n+\n+  fprintf (asm_out_file, \"\\t.section %s,%u,%u,%u,%u\\n\",\n+\t   name, sh_type, sh_flags, sh_entsize, align);\n+}"}, {"sha": "fab6957a20d11022d5ae9ee9ceb7b6919e5b72c7", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -3097,10 +3097,6 @@ typedef struct mips_args {\n    If you are changing this macro, you should look at\n    mips_select_section and see if it needs a similar change.  */\n \n-#ifndef UNIQUE_SECTION_P\n-#define UNIQUE_SECTION_P(DECL) (0)\n-#endif\n-\n #define ENCODE_SECTION_INFO(DECL)\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n@@ -3120,7 +3116,7 @@ do\t\t\t\t\t\t\t\t\t\\\n \t       references again.  We force it to work by putting string\t\\\n \t       addresses in the constant pool and indirecting.  */\t\\\n \t    && (! current_function_decl\t\t\t\t\t\\\n-\t\t|| ! UNIQUE_SECTION_P (current_function_decl)))\t\t\\\n+\t\t|| ! DECL_ONE_ONLY (current_function_decl)))\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n \t    SYMBOL_REF_FLAG (XEXP (TREE_CST_RTL (DECL), 0)) = 1;\t\\\n \t    mips_string_length += TREE_STRING_LENGTH (DECL);\t\t\\"}, {"sha": "13e7b089d79890e465ff9aaea891e606dbfa09c0", "filename": "gcc/config/mips/netbsd.h", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fnetbsd.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -201,24 +201,9 @@ do {\t\t\t\t\t\t\t\t\t \\\n       }\t\t\t\t\t\t\t\t\t\\\n   } while (0)\n \n-/*\n- A C statement to output something to the assembler file to switch to section\n- NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n- NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n- define this macro in such cases.\n-*/\n-#define ASM_OUTPUT_SECTION_NAME(F, DECL, NAME, RELOC)                        \\\n-do {                                                                         \\\n-  extern FILE *asm_out_text_file;                                            \\\n-  if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)                           \\\n-    fprintf (asm_out_text_file, \"\\t.section %s,\\\"ax\\\",@progbits\\n\", (NAME)); \\\n-  else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))                    \\\n-    fprintf (F, \"\\t.section %s,\\\"a\\\",@progbits\\n\", (NAME));                  \\\n-  else if (! strcmp (NAME, \".bss\"))                         \t             \\\n-    fprintf (F, \"\\t.section %s,\\\"aw\\\",@nobits\\n\", (NAME));      \t     \\\n-  else                                                                       \\\n-    fprintf (F, \"\\t.section %s,\\\"aw\\\",@progbits\\n\", (NAME));                 \\\n-} while (0)\n+/* Switch into a generic section.  */\n+#undef TARGET_ASM_NAMED_SECTION\n+#define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n /* Since gas and gld are standard on NetBSD, we don't need these */\n #undef ASM_FINAL_SPEC"}, {"sha": "e4847cef9a26e3ef1ad9f37c54b9cb2a921c7940", "filename": "gcc/config/mips/openbsd.h", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fmips%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fmips%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fopenbsd.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -103,23 +103,9 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_FINAL_SPEC\n #undef STARTFILE_SPEC\n \n-/* A C statement to output something to the assembler file to switch to \n-   section NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL \n-   or NULL_TREE.  Some target formats do not support arbitrary sections.  \n-   Do not define this macro in such cases. mips.h doesn't define this, \n-   do it here.  */\n-#define ASM_OUTPUT_SECTION_NAME(F, DECL, NAME, RELOC)                        \\\n-do {                                                                         \\\n-  extern FILE *asm_out_text_file;                                            \\\n-  if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)                           \\\n-    fprintf (asm_out_text_file, \"\\t.section %s,\\\"ax\\\",@progbits\\n\", (NAME)); \\\n-  else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))                    \\\n-    fprintf (F, \"\\t.section %s,\\\"a\\\",@progbits\\n\", (NAME));                  \\\n-  else if (! strcmp (NAME, \".bss\"))                         \t     \t     \\\n-    fprintf (F, \"\\t.section %s,\\\"aw\\\",@nobits\\n\", (NAME));      \t     \\\n-  else                                                                       \\\n-    fprintf (F, \"\\t.section %s,\\\"aw\\\",@progbits\\n\", (NAME));                 \\\n-} while (0)\n+/* Switch into a generic section.  */\n+#undef TARGET_ASM_NAMED_SECTION\n+#define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n /* collect2 support (Macros for initialization).  */\n "}, {"sha": "d32675cfc5e604c910e5dd2ef3b7f6b616c18ec0", "filename": "gcc/config/nextstep.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fnextstep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fnextstep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnextstep.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -232,6 +232,11 @@ Boston, MA 02111-1307, USA.  */\n        fprintf (FILE, \".reference .destructors_used\\n\");        \\\n       } while (0)\n \n+/* ??? Should be changed to EH_FRAME_SECTION_NAME, but that requires\n+   named section support.  Based on this definition, it seems clear\n+   that the object file format supports named sections, but it has\n+   not been implemented in gcc.  */\n+#error \"Implement named section support\"\n #define EH_FRAME_SECTION_ASM_OP \"\\t.section __TEXT,__eh_frame,regular\"\n \n /* Don't output a .file directive.  That is only used by the assembler for"}, {"sha": "bc2cc92698f668a517c2e37926763338c9dcec0b", "filename": "gcc/config/pa/pa64-hpux.h", "status": "modified", "additions": 2, "deletions": 64, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -186,72 +186,10 @@ dtors_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-/* Switch into a generic section.\n- \n-   We make the section read-only and executable for a function decl,\n-   read-only for a const data decl, and writable for a non-const data decl.\n- \n-   If the section has already been defined, we must not\n-   emit the attributes here. The SVR4 assembler does not\n-   recognize section redefinitions.\n-   If DECL is NULL, no attributes are emitted.  */\n-\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC)\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      static htab_t htab;                                               \\\n-                                                                        \\\n-      struct section_info                                               \\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tenum sect_enum {SECT_RW, SECT_RO, SECT_EXEC} type;\t\t\\\n-      };                                                                \\\n-                                                                        \\\n-      struct section_info *s;\t\t\t\t\t\t\\\n-      const char *mode;\t\t\t\t\t\t\t\\\n-      enum sect_enum type;                                              \\\n-      PTR* slot;                                                        \\\n-                                                                        \\\n-      /* The names we put in the hashtable will always be the unique    \\\n-\t versions gived to us by the stringtable, so we can just use    \\\n-\t their addresses as the keys.  */                               \\\n-      if (!htab)                                                        \\\n-\thtab = htab_create (31,                                         \\\n-\t\t\t    htab_hash_pointer,                          \\\n-\t\t\t    htab_eq_pointer,                            \\\n-\t\t\t    NULL);                                      \\\n-                                                                        \\\n-      if (DECL && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n-\ttype = SECT_EXEC, mode = \"ax\";\t\t\t\t\t\\\n-      else if (DECL && DECL_READONLY_SECTION (DECL, RELOC))\t\t\\\n-\ttype = SECT_RO, mode = \"a\";\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\ttype = SECT_RW, mode = \"aw\";\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n-                                                                        \\\n-      /* See if we already have an entry for this section.  */          \\\n-      slot = htab_find_slot (htab, NAME, INSERT);                       \\\n-      if (!*slot)                                                       \\\n-\t{                                                               \\\n-\t  s = (struct section_info *) xmalloc (sizeof (* s));\t\t\\\n-\t  s->type = type;\t\t\t\t\t\t\\\n-\t  *slot = s;\t\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"\\t.section\\t%s,\\\"%s\\\",@progbits\\n\",\t\t\\\n-\t\t   NAME, mode);\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  s = (struct section_info *) *slot;                            \\\n-\t  if (DECL && s->type != type)\t\t\t\t\t\\\n-\t    error_with_decl (DECL,                                      \\\n-\t\t\t     \"%s causes a section type conflict\");      \\\n-\t  \t\t\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"\\t.section\\t%s\\n\", NAME);\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n #define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n-#define UNIQUE_SECTION_P(DECL) (DECL_ONE_ONLY (DECL))\n #define UNIQUE_SECTION(DECL,RELOC)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\\\n   int len;\t\t\t\t\t\t\t\\"}, {"sha": "6f67f35cc1d969a589f65bdb0cb473f2588df424", "filename": "gcc/config/psos.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fpsos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fpsos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpsos.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -73,13 +73,8 @@ Boston, MA 02111-1307, USA.\n   do { fputs (\"\\t.weak\\t\", FILE); assemble_name (FILE, NAME); \\\n        fputc ('\\n', FILE); } while (0)\n \n-/* Switch into a generic section. */\n-\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC) \\\n-  fprintf (FILE, \".section\\t%s,\\\"%s\\\",@progbits\\n\", NAME, \\\n-\t   (DECL) && TREE_CODE (DECL) == FUNCTION_DECL ? \"ax\" : \\\n-\t   (DECL) && DECL_READONLY_SECTION (DECL, RELOC) ? \"a\" : \"aw\")\n-\n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n /* Define the pseudo-ops used to switch to the .ctors and .dtors\n    sections. */"}, {"sha": "96ac5c7dc83804d58da831e04a891e01c67ee59e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -130,6 +130,14 @@ static void rs6000_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void rs6000_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static rtx rs6000_emit_set_long_const PARAMS ((rtx,\n   HOST_WIDE_INT, HOST_WIDE_INT));\n+#if TARGET_ELF\n+static unsigned int rs6000_elf_section_type_flags PARAMS ((tree, const char *,\n+\t\t\t\t\t\t\t   int));\n+#endif\n+#ifdef OBJECT_FORMAT_COFF\n+static void xcoff_asm_named_section PARAMS ((const char *, unsigned int,\n+\t\t\t\t\t     unsigned int));\n+#endif\n \f\n /* Default register names.  */\n char rs6000_reg_names[][8] =\n@@ -177,6 +185,11 @@ static char alt_reg_names[][8] =\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE rs6000_output_function_epilogue\n \n+#if TARGET_ELF\n+#undef TARGET_SECTION_TYPE_FLAGS\n+#define TARGET_SECTION_TYPE_FLAGS  rs6000_elf_section_type_flags\n+#endif\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Override command line options.  Mostly we process the processor\n@@ -8675,3 +8688,33 @@ toc_section ()\n }\n \n #endif /* TARGET_MACHO */\n+\n+#if TARGET_ELF\n+static unsigned int\n+rs6000_elf_section_type_flags (decl, name, reloc)\n+     tree decl;\n+     const char *name;\n+     int reloc;\n+{\n+  unsigned int flags = default_section_type_flags (decl, name, reloc);\n+\n+  /* ??? The flag_pic check appears redundant with the DECL_READONLY_SECTION\n+     check in default_section_type_flags.  */\n+  if (TARGET_RELOCATABLE || flag_pic)\n+    flags &= ~SECTION_WRITE;\n+\n+  /* Solaris doesn't like @nobits, and gas can handle .sbss without it.  */\n+  flags &= ~SECTION_BSS;\n+}\n+#endif\n+\n+#ifdef OBJECT_FORMAT_COFF\n+static void\n+xcoff_asm_named_section (name, flags, align)\n+     const char *name;\n+     unsigned int flags ATTRIBUTE_UNUSED;\n+     unsigned int align ATTRIBUTE_UNUSED;\n+{\n+  fprintf (asm_out_file, \"\\t.csect %s\\n\", name);\n+}\n+#endif"}, {"sha": "3011c30a669b3670dfcfb9b3c2f2dc526e1cfe20", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -992,63 +992,6 @@ do {\t\t\t\t\t\t\\\n     asm_fprintf (FILE, \"%U%s\", _name);\t\t\\\n } while (0)\n \n-/* Switch into a generic section.\n-\n-   We make the section read-only and executable for a function decl,\n-   read-only for a const data decl, and writable for a non-const data decl.\n-\n-   If the section has already been defined, we must not\n-   emit the attributes here. The SVR4 assembler does not\n-   recognize section redefinitions.\n-   If DECL is NULL, no attributes are emitted.\n-\n-   Note, Solaris as doesn't like @nobits, and gas can handle .sbss without\n-   needing @nobits.  */\n-\n-/* Override elfos.h definition.  */\n-#undef\tASM_OUTPUT_SECTION_NAME\n-#define\tASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC)\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  static struct section_info\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      struct section_info *next;\t\t\t\t        \\\n-      char *name;\t\t\t\t\t\t        \\\n-      enum sect_enum {SECT_RW, SECT_RO, SECT_EXEC} type;\t\t\\\n-    } *sections;\t\t\t\t\t\t\t\\\n-  struct section_info *s;\t\t\t\t\t\t\\\n-  const char *mode;\t\t\t\t\t\t\t\\\n-  enum sect_enum type;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  for (s = sections; s; s = s->next)\t\t\t\t\t\\\n-    if (!strcmp (NAME, s->name))\t\t\t\t\t\\\n-      break;\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  if (DECL && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n-    type = SECT_EXEC, mode = \"ax\";\t\t\t\t\t\\\n-  else if (DECL && DECL_READONLY_SECTION (DECL, RELOC) && !TARGET_RELOCATABLE && !flag_pic) \\\n-    type = SECT_RO, mode = \"a\";\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    type = SECT_RW, mode = \"aw\";\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  if (s == 0)\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      s = (struct section_info *) xmalloc (sizeof (struct section_info));  \\\n-      s->name = xmalloc ((strlen (NAME) + 1) * sizeof (*NAME));\t\t\\\n-      strcpy (s->name, NAME);\t\t\t\t\t\t\\\n-      s->type = type;\t\t\t\t\t\t\t\\\n-      s->next = sections;\t\t\t\t\t\t\\\n-      sections = s;\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.section\\t\\\"%s\\\",\\\"%s\\\"\\n\", NAME, mode);\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (DECL && s->type != type)\t\t\t\t\t\\\n-\terror_with_decl (DECL, \"%s causes a section type conflict\");\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.section\\t\\\"%s\\\"\\n\", NAME);\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-} while (0)\n-\n /* Override elfos.h definition.  */\n #undef\tASM_OUTPUT_CONSTRUCTOR\n #define\tASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\"}, {"sha": "4d0a7fd39494ac95628b8dd3444617f8f33f5b4e", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -489,11 +489,8 @@ toc_section ()\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n   } while (0)\n \n-#define ASM_OUTPUT_SECTION_NAME(ASM_OUT_FILE,DECL,NAME,RELOC)\t\\\n-  do { fputs (\"\\t.csect \", ASM_OUT_FILE);\t\t\t\\\n-       fputs (TREE_STRING_POINTER (DECL_SECTION_NAME (DECL)), ASM_OUT_FILE); \\\n-       putc ('\\n', ASM_OUT_FILE);\t\t\t\t\\\n-  } while (0)\n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION  xcoff_asm_named_section\n \n /* Define the name of the section to use for the exception tables.\n    TODO: test and see if we can use read_only_data_section, if so,"}, {"sha": "183fa96c2ab3c3a8711e01cb3afb2b446b496c73", "filename": "gcc/config/sh/elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fsh%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fsh%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Felf.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -38,7 +38,7 @@ Boston, MA 02111-1307, USA.  */\n #undef DBX_OUTPUT_MAIN_SOURCE_FILE_END\n #undef CTORS_SECTION_ASM_OP\n #undef DTORS_SECTION_ASM_OP\n-#undef ASM_OUTPUT_SECTION_NAME\n+#undef TARGET_ASM_NAMED_SECTION\n #undef ASM_OUTPUT_CONSTRUCTOR\n #undef ASM_OUTPUT_DESTRUCTOR\n #undef ASM_DECLARE_FUNCTION_NAME"}, {"sha": "6c2104f258559784f64158e0b31420097fde290a", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -156,6 +156,8 @@ static rtx mark_constant_pool_use PARAMS ((rtx));\n static int sh_valid_decl_attribute PARAMS ((tree, tree, tree, tree));\n static void sh_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static void sh_insert_attributes PARAMS ((tree, tree *));\n+static void sh_asm_named_section PARAMS ((const char *, unsigned int,\n+\t\t\t\t\t  unsigned int));\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_VALID_DECL_ATTRIBUTE\n@@ -5556,3 +5558,12 @@ sh_can_redirect_branch (branch1, branch2)\n   return 0;\n }\n \n+static void\n+sh_asm_named_section (name, flags, align)\n+     const char *name;\n+     unsigned int flags ATTRIBUTE_UNUSED;\n+     unsigned int flags ATTRIBUTE_UNUSED;\n+{\n+  /* ??? Perhaps we should be using default_coff_asm_named_section.  */\n+  fprintf (asm_out_file, \"\\t.section %s\\n\", name);\n+}"}, {"sha": "1377610a319199aa52fcb6a70c2a26395a3febde", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -1948,13 +1948,8 @@ dtors_section()\t\t\t\t\t\t\t\\\n    which could be text or it could be a user defined section.  */\n #define JUMP_TABLES_IN_TEXT_SECTION 1\n \n-/* A C statement to output something to the assembler file to switch to section\n-   NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n-   NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n-   define this macro in such cases.  */\n-\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC) \\\n-   do { fprintf (FILE, \".section\\t%s\\n\", NAME); } while (0)\n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION  sh_asm_named_section\n \n /* This is the pseudo-op used to generate a reference to a specific\n    symbol in some section.  */"}, {"sha": "2693f73cacbb2f165338c8bb3ccda80c27ba5b1c", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -164,6 +164,8 @@ static void sparc_nonflat_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT,\n \t\t\t\t\t\t     int));\n static void sparc_nonflat_function_prologue PARAMS ((FILE *, HOST_WIDE_INT,\n \t\t\t\t\t\t     int));\n+static void sparc_elf_asm_named_section PARAMS ((const char *, unsigned int,\n+\t\t\t\t\t\t unsigned int));\n \f\n /* Option handling.  */\n \n@@ -8688,3 +8690,23 @@ sparc_add_gc_roots ()\n   ggc_add_root (ultra_pipe_hist, ARRAY_SIZE (ultra_pipe_hist),\n \t\tsizeof (ultra_pipe_hist[0]), &mark_ultrasparc_pipeline_state);\n }\n+\n+static void\n+sparc_elf_asm_named_section (name, flags, align)\n+     const char *name;\n+     unsigned int flags;\n+     unsigned int align ATTRIBUTE_UNUSED;\n+{\n+  fprintf (asm_out_file, \"\\t.section\\t\\\"%s\\\"\", name);\n+\n+  if (!(flags & SECTION_DEBUG))\n+    fputs (\",#alloc\", asm_out_file);\n+  if (flags & SECTION_WRITE)\n+    fputs (\",#write\", asm_out_file);\n+  if (flags & SECTION_CODE)\n+    fputs (\",#execinstr\", asm_out_file);\n+\n+  /* ??? Handle SECTION_BSS.  */\n+\n+  fputc ('\\n', asm_out_file);\n+}"}, {"sha": "4cd0b396ca73aea9880688eb1040cbe69d9f4061", "filename": "gcc/config/sparc/sysv4.h", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsysv4.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -182,25 +182,10 @@ do { ASM_OUTPUT_ALIGN ((FILE), Pmode == SImode ? 2 : 3);\t\t\\\n #define CTORS_SECTION_ASM_OP    \"\\t.section\\t\\\".ctors\\\",#alloc,#write\"\n #undef DTORS_SECTION_ASM_OP\n #define DTORS_SECTION_ASM_OP    \"\\t.section\\t\\\".dtors\\\",#alloc,#write\"\n-#undef EH_FRAME_SECTION_ASM_OP\n-#define EH_FRAME_SECTION_ASM_OP \"\\t.section\\t\\\".eh_frame\\\",#alloc,#write\"\n-\n-/* A C statement to output something to the assembler file to switch to section\n-   NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n-   NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n-   define this macro in such cases.  */\n-\n-#undef\tASM_OUTPUT_SECTION_NAME\t/* Override svr4.h's definition.  */\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC) \\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n-    fprintf (FILE, \".section\\t\\\"%s\\\",#alloc,#execinstr\\n\",\t\t\\\n-\t                                      (NAME));\t\t\\\n-  else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))\t\t\\\n-    fprintf (FILE, \".section\\t\\\"%s\\\",#alloc\\n\", (NAME));\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \".section\\t\\\"%s\\\",#alloc,#write\\n\", (NAME));\t\t\\\n-} while (0)\n+\n+/* Switch into a generic section.  */\n+#undef TARGET_ASM_NAMED_SECTION\n+#define TARGET_ASM_NAMED_SECTION  sparc_elf_asm_named_section\n \n /* A C statement (sans semicolon) to output to the stdio stream\n    FILE the assembler definition of uninitialized global DECL named"}, {"sha": "666c31b81a32deb09098d84ff24f302210eedb67", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -2861,11 +2861,11 @@ finish_objects (method_type, initp, body)\n       else\n \tassemble_destructor (fnname);\n     }\n-#if defined (ASM_OUTPUT_SECTION_NAME) && defined (ASM_OUTPUT_CONSTRUCTOR)\n+#if defined (ASM_OUTPUT_CONSTRUCTOR)\n   /* If we're using init priority we can't use assemble_*tor, but on ELF\n      targets we can stick the references into named sections for GNU ld\n      to collect.  */\n-  else\n+  else if (targetm.have_named_sections)\n     {\n       char buf[15];\n       sprintf (buf, \".%ctors.%.5u\", method_type == 'I' ? 'c' : 'd',"}, {"sha": "75e944176c234813d86f9a102078b65a57d07db1", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -211,7 +211,7 @@ __do_global_dtors_aux (void)\n       f ();\n     }\n \n-#ifdef EH_FRAME_SECTION_ASM_OP\n+#ifdef EH_FRAME_SECTION_NAME\n #if defined(CRT_GET_RFIB_TEXT) || defined(CRT_GET_RFIB_DATA)\n   /* If we used the new __register_frame_info_bases interface,\n      make sure that we deregister from the same place.  */\n@@ -240,7 +240,7 @@ fini_dummy (void)\n   asm (TEXT_SECTION_ASM_OP);\n }\n \n-#ifdef EH_FRAME_SECTION_ASM_OP\n+#ifdef EH_FRAME_SECTION_NAME\n /* Stick a call to __register_frame_info into the .init section.  For some\n    reason calls with no arguments work more reliably in .init, so stick the\n    call in another function.  */\n@@ -279,7 +279,7 @@ init_dummy (void)\n #endif\n   asm (TEXT_SECTION_ASM_OP);\n }\n-#endif /* EH_FRAME_SECTION_ASM_OP */\n+#endif /* EH_FRAME_SECTION_NAME */\n \n #else  /* OBJECT_FORMAT_ELF */\n \n@@ -350,13 +350,13 @@ __do_global_dtors (void)\n   for (p = __DTOR_LIST__ + 1; (f = *p); p++)\n     f ();\n \n-#ifdef EH_FRAME_SECTION_ASM_OP\n+#ifdef EH_FRAME_SECTION_NAME\n   if (__deregister_frame_info)\n     __deregister_frame_info (__EH_FRAME_BEGIN__);\n #endif\n }\n \n-#ifdef EH_FRAME_SECTION_ASM_OP\n+#ifdef EH_FRAME_SECTION_NAME\n /* Define a function here to call __register_frame.  crtend.o is linked in\n    after libgcc.a, and hence can't call libgcc.a functions directly.  That\n    can lead to unresolved function references.  */\n@@ -404,16 +404,16 @@ asm (DTORS_SECTION_ASM_OP);\t/* cc1 doesn't know that we are switching! */\n STATIC func_ptr __DTOR_LIST__[1] = { (func_ptr) (-1) };\n #endif\n \n-#ifdef EH_FRAME_SECTION_ASM_OP\n+#ifdef EH_FRAME_SECTION_NAME\n /* Stick a label at the beginning of the frame unwind info so we can register\n    and deregister it with the exception handling library code.  */\n-\n-asm (EH_FRAME_SECTION_ASM_OP);\n #ifdef INIT_SECTION_ASM_OP\n STATIC\n #endif\n-char __EH_FRAME_BEGIN__[] = { };\n-#endif /* EH_FRAME_SECTION_ASM_OP */\n+char __EH_FRAME_BEGIN__[]\n+     __attribute__((section(EH_FRAME_SECTION_NAME)))\n+     = { };\n+#endif /* EH_FRAME_SECTION_NAME */\n \n #endif /* defined(CRT_BEGIN) */\n \n@@ -494,14 +494,14 @@ asm (TEXT_SECTION_ASM_OP);\n    not an SVR4-style .init section.  __do_global_ctors can be non-static\n    in this case because we protect it with -hidden_symbol.  */\n static func_ptr __CTOR_END__[];\n-#ifdef EH_FRAME_SECTION_ASM_OP\n+#ifdef EH_FRAME_SECTION_NAME\n extern void __frame_dummy (void);\n #endif\n void\n __do_global_ctors (void)\n {\n   func_ptr *p;\n-#ifdef EH_FRAME_SECTION_ASM_OP\n+#ifdef EH_FRAME_SECTION_NAME\n   __frame_dummy ();\n #endif\n   for (p = __CTOR_END__ - 1; *p != (func_ptr) -1; p--)\n@@ -535,13 +535,12 @@ STATIC func_ptr __DTOR_END__[1] __attribute__ ((__unused__))\n   = { (func_ptr) 0 };\n #endif\n \n-#ifdef EH_FRAME_SECTION_ASM_OP\n+#ifdef EH_FRAME_SECTION_NAME\n /* Terminate the frame unwind info section with a 4byte 0 as a sentinel;\n    this would be the 'length' field in a real FDE.  */\n-\n-typedef unsigned int ui32 __attribute__ ((mode (SI)));\n-asm (EH_FRAME_SECTION_ASM_OP);\n-STATIC ui32 __FRAME_END__[] __attribute__ ((__unused__)) = { 0 };\n+STATIC int __FRAME_END__[]\n+     __attribute__ ((unused, mode(SI), section(EH_FRAME_SECTION_NAME)))\n+     = { 0 };\n #endif /* EH_FRAME_SECTION */\n \n #endif /* defined(CRT_END) */\n@@ -601,14 +600,9 @@ __dereg_frame_dtor (void)\n }\n \n /* Terminate the frame section with a final zero.  */\n-\n-/* Force cc1 to switch to .data section.  */\n-static void * force_to_data[1] __attribute__ ((__unused__)) = { };\n-\n-typedef unsigned int ui32 __attribute__ ((mode (SI)));\n-asm (EH_FRAME_SECTION_ASM_OP);\n-static ui32 __FRAME_END__[] __attribute__ ((__unused__)) = { 0 };\n-\n+STATIC int __FRAME_END__[]\n+     __attribute__ ((unused, mode(SI), section(EH_FRAME_SECTION_NAME)))\n+     = { 0 };\n #endif /* CRT_END */\n \n #endif /* OBJECT_FORMAT_MACHO */"}, {"sha": "60a91fe185f5d1703b69bd3029fdab5edc946c92", "filename": "gcc/dbxout.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -83,6 +83,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tm_p.h\"\n #include \"ggc.h\"\n #include \"debug.h\"\n+#include \"target.h\"\n \n #ifdef XCOFF_DEBUGGING_INFO\n #include \"xcoffout.h\"\n@@ -290,9 +291,7 @@ static void dbxout_start_source_file\tPARAMS ((unsigned, const char *));\n static void dbxout_end_source_file\tPARAMS ((unsigned));\n static void dbxout_source_line\t\tPARAMS ((unsigned int, const char *));\n static void dbxout_source_file\t\tPARAMS ((FILE *, const char *));\n-#if defined(ASM_OUTPUT_SECTION_NAME)\n static void dbxout_function_end\t\tPARAMS ((void));\n-#endif\n static void dbxout_typedefs\t\tPARAMS ((tree));\n static void dbxout_type_index\t\tPARAMS ((tree));\n #if DBX_CONTIN_LENGTH > 0\n@@ -378,7 +377,6 @@ struct gcc_debug_hooks xcoff_debug_hooks =\n };\n #endif /* XCOFF_DEBUGGING_INFO  */\n \f\n-#if defined(ASM_OUTPUT_SECTION_NAME)\n static void\n dbxout_function_end ()\n {\n@@ -399,7 +397,6 @@ dbxout_function_end ()\n   assemble_name (asmfile, XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0));\n   fprintf (asmfile, \"\\n\");\n }\n-#endif /* ! NO_DBX_FUNCTION_END */\n \n /* At the beginning of compilation, start writing the symbol table.\n    Initialize `typevec' and output the standard data types of C.  */\n@@ -642,14 +639,12 @@ dbxout_function_decl (decl)\n #ifdef DBX_OUTPUT_FUNCTION_END\n   DBX_OUTPUT_FUNCTION_END (asmfile, decl);\n #endif\n-#if defined(ASM_OUTPUT_SECTION_NAME)\n   if (use_gnu_debug_info_extensions\n #if defined(NO_DBX_FUNCTION_END)\n       && ! NO_DBX_FUNCTION_END\n #endif\n-      )\n+      && targetm.have_named_sections)\n     dbxout_function_end ();\n-#endif\n }\n \n #endif /* DBX_DEBUGGING_INFO  */"}, {"sha": "20729249dcfdc96918f8fa2e70e8631ec4a8ac37", "filename": "gcc/defaults.h", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -209,23 +209,17 @@ do { ASM_OUTPUT_LABEL(FILE,LABEL_ALTERNATE_NAME (INSN)); } while (0)\n #define DWARF2_UNWIND_INFO 1\n #endif\n \n-#if defined (DWARF2_UNWIND_INFO) && !defined (EH_FRAME_SECTION)\n-# if defined (EH_FRAME_SECTION_ASM_OP)\n-#  define EH_FRAME_SECTION() eh_frame_section ()\n-# else\n-   /* If we aren't using crtstuff to run ctors, don't use it for EH.  */\n-#  if defined (ASM_OUTPUT_SECTION_NAME) && defined (ASM_OUTPUT_CONSTRUCTOR)\n-#   define EH_FRAME_SECTION_ASM_OP\t\"\\t.section\\t.eh_frame,\\\"aw\\\"\"\n-#   define EH_FRAME_SECTION() \\\n-     do { named_section (NULL_TREE, \".eh_frame\", 0); } while (0)\n-#  endif\n-# endif\n+/* If we have named section, and we're using crtstuff to run ctors,\n+   then use named sections for registering eh frame information.  */\n+#if defined (TARGET_ASM_NAMED_SECTION) && defined (ASM_OUTPUT_CONSTRUCTOR)\n+#ifndef EH_FRAME_SECTION_NAME\n+#define EH_FRAME_SECTION_NAME \".eh_frame\"\n+#endif\n #endif\n \n /* If we have no definition for UNIQUE_SECTION, but do have the \n    ability to generate arbitrary sections, construct something\n    reasonable.  */\n-#ifdef ASM_OUTPUT_SECTION_NAME\n #ifndef UNIQUE_SECTION\n #define UNIQUE_SECTION(DECL,RELOC)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\\\n@@ -244,10 +238,6 @@ do {\t\t\t\t\t\t\t\t\\\n   DECL_SECTION_NAME (DECL) = build_string (len, string);\t\\\n } while (0)\n #endif\n-#ifndef UNIQUE_SECTION_P\n-#define UNIQUE_SECTION_P(DECL) 0\n-#endif\n-#endif\n \n /* By default, we generate a label at the beginning and end of the\n    text section, and compute the size of the text section by"}, {"sha": "e9c747ac7e4ef91c0c8b01e93ab74c10d5568577", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 33, "deletions": 31, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -5614,14 +5614,6 @@ Decode @var{sym_name} and store the real name part in @var{var}, sans\n the characters that encode section info.  Define this macro if\n @code{ENCODE_SECTION_INFO} alters the symbol's name string.\n \n-@findex UNIQUE_SECTION_P\n-@item UNIQUE_SECTION_P (@var{decl})\n-A C expression which evaluates to true if @var{decl} should be placed\n-into a unique section for some target-specific reason.  If you do not\n-define this macro, the default is @samp{0}.  Note that the flag\n-@option{-ffunction-sections} will also cause functions to be placed into\n-unique sections.\n-\n @findex UNIQUE_SECTION\n @item UNIQUE_SECTION (@var{decl}, @var{reloc})\n A C statement to build up a unique section name, expressed as a\n@@ -5803,28 +5795,39 @@ A C statement to output something to the assembler file to handle a\n @samp{#ident} directive containing the text @var{string}.  If this\n macro is not defined, nothing is output for a @samp{#ident} directive.\n \n-@findex ASM_OUTPUT_SECTION_NAME\n-@item ASM_OUTPUT_SECTION_NAME (@var{stream}, @var{decl}, @var{name}, @var{reloc})\n-A C statement to output something to the assembler file to switch to section\n-@var{name} for object @var{decl} which is either a @code{FUNCTION_DECL}, a\n-@code{VAR_DECL} or @code{NULL_TREE}.  @var{reloc}\n-indicates whether the initial value of @var{exp} requires link-time\n-relocations.  The string given by @var{name} will always be the\n-canonical version stored in the global stringpool.\n-\n-Some target formats do not support arbitrary sections.  Do not define\n-this macro in such cases.\n-\n-At present this macro is only used to support section attributes.\n-When this macro is undefined, section attributes are disabled.\n-\n @findex OBJC_PROLOGUE\n @item OBJC_PROLOGUE\n A C statement to output any assembler statements which are required to\n precede any Objective-C object definitions or message sending.  The\n statement is executed only when compiling an Objective-C program.\n @end table\n \n+@deftypefn {Target Hook} void TARGET_ASM_NAMED_SECTION (const char *@var{name}, unsigned int @var{flags}, unsigned int @var{align})\n+Output assembly directives to switch to section @var{name}.  The section\n+should have attributes as specified by @var{flags}, which is a bit mask\n+of the @code{SECTION_*} flags defined in @file{output.h}.  If @var{align}\n+is non-zero, it contains an alignment in bytes to be used for the section,\n+otherwise some target default should be used.  Only targets that must \n+specify an alignment within the section directive need pay attention to\n+@var{align} -- we will still use @code{ASM_OUTPUT_ALIGN}.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} bool TARGET_HAVE_NAMED_SECTIONS\n+This flag is true if the target supports @code{TARGET_ASM_NAMED_SECTION}.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} {unsigned int} TARGET_SECTION_TYPE_FLAGS (tree @var{decl}, const char *@var{name}, int @var{reloc})\n+Choose a set of section attributes for use by @code{TARGET_ASM_NAMED_SECTION}\n+based on a variable or function decl, a section name, and whether or not the\n+declaration's initializer may contain runtime relocations.  @var{decl} may be\n+ null, in which case read-write data should be assumed.\n+\n+The default version if this function handles choosing code vs data,\n+read-only vs read-write data, and @code{flag_pic}.  You should only\n+need to override this if your target has special flags that might be\n+set via @code{__attribute__}.\n+@end deftypefn\n+\n @need 2000\n @node Data Output\n @subsection Output of Data\n@@ -7058,17 +7061,16 @@ This macro need not be defined on most platforms.\n A C expression to switch to the section in which the main\n exception table is to be placed (@pxref{Sections}).  The default is a\n section named @code{.gcc_except_table} on machines that support named\n-sections via @code{ASM_OUTPUT_SECTION_NAME}, otherwise if @option{-fpic}\n+sections via @code{TARGET_ASM_NAMED_SECTION}, otherwise if @option{-fpic}\n or @option{-fPIC} is in effect, the @code{data_section}, otherwise the\n @code{readonly_data_section}.\n \n-@findex EH_FRAME_SECTION_ASM_OP\n-@item EH_FRAME_SECTION_ASM_OP\n-If defined, a C string constant, including spacing, for the assembler\n-operation to switch to the section for exception handling frame unwind\n-information.  If not defined, GCC will provide a default definition if the\n-target supports named sections.  @file{crtstuff.c} uses this macro to\n-switch to the appropriate section.\n+@findex EH_FRAME_SECTION_NAME\n+@item EH_FRAME_SECTION_NAME\n+If defined, a C string constant for the name of the section containing\n+exception handling frame unwind information.  If not defined, GCC will\n+provide a default definition if the target supports named sections.\n+@file{crtstuff.c} uses this macro to switch to the appropriate section.\n \n You should define this symbol if your target supports DWARF 2 frame\n unwind information and the default definition does not work."}, {"sha": "bedbf8ec95753a3f050db8259d8af43ef4a9f25b", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 34, "deletions": 57, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -277,18 +277,6 @@ static void def_cfa_1\t\t \tPARAMS ((const char *, dw_cfa_location *));\n #define SECTION_ASM_OP\t\"\\t.section\\t\"\n #endif\n \n-/* The default format used by the ASM_OUTPUT_SECTION macro (see below) to\n-   print the SECTION_ASM_OP and the section name.  The default here works for\n-   almost all svr4 assemblers, except for the sparc, where the section name\n-   must be enclosed in double quotes.  (See sparcv4.h).  */\n-#ifndef SECTION_FORMAT\n-#ifdef PUSHSECTION_FORMAT\n-#define SECTION_FORMAT PUSHSECTION_FORMAT\n-#else\n-#define SECTION_FORMAT\t\t\"%s%s\\n\"\n-#endif\n-#endif\n-\n #ifndef DEBUG_FRAME_SECTION\n #define DEBUG_FRAME_SECTION\t\".debug_frame\"\n #endif\n@@ -316,11 +304,6 @@ static void def_cfa_1\t\t \tPARAMS ((const char *, dw_cfa_location *));\n    output operations.  These may be overridden from within the tm.h file,\n    but typically, that is unnecessary.  */\n \n-#ifndef ASM_OUTPUT_SECTION\n-#define ASM_OUTPUT_SECTION(FILE, SECTION) \\\n-  fprintf ((FILE), SECTION_FORMAT, SECTION_ASM_OP, SECTION)\n-#endif\n-\n #ifdef SET_ASM_OP\n #ifndef ASM_OUTPUT_DEFINE_LABEL_DIFFERENCE_SYMBOL\n #define ASM_OUTPUT_DEFINE_LABEL_DIFFERENCE_SYMBOL(FILE, SY, HI, LO)    \t\\\n@@ -1753,20 +1736,21 @@ output_call_frame_info (for_eh)\n \n   if (for_eh)\n     {\n-#ifdef EH_FRAME_SECTION\n-      EH_FRAME_SECTION ();\n+#ifdef EH_FRAME_SECTION_NAME\n+      named_section_flags (EH_FRAME_SECTION_NAME, SECTION_WRITE,\n+\t\t\t   DWARF_OFFSET_SIZE);\n #else\n       tree label = get_file_function_name ('F');\n \n-      force_data_section ();\n+      data_section ();\n       ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (PTR_SIZE));\n       ASM_GLOBALIZE_LABEL (asm_out_file, IDENTIFIER_POINTER (label));\n       ASM_OUTPUT_LABEL (asm_out_file, IDENTIFIER_POINTER (label));\n #endif\n       assemble_label (\"__FRAME_BEGIN__\");\n     }\n   else\n-    ASM_OUTPUT_SECTION (asm_out_file, DEBUG_FRAME_SECTION);\n+    named_section_flags (DEBUG_FRAME_SECTION, SECTION_DEBUG, 1);\n \n   /* Output the CIE.  */\n   ASM_GENERATE_INTERNAL_LABEL (l1, CIE_AFTER_SIZE_LABEL, for_eh);\n@@ -1984,7 +1968,7 @@ output_call_frame_info (for_eh)\n       ASM_OUTPUT_LABEL (asm_out_file, l2);\n     }\n \n-#ifndef EH_FRAME_SECTION\n+#ifndef EH_FRAME_SECTION_NAME\n   if (for_eh)\n     dw2_asm_output_data (4, 0, \"End of Table\");\n #endif\n@@ -6336,7 +6320,7 @@ output_comp_unit (die)\n     secname = (const char *) DEBUG_INFO_SECTION;\n \n   /* Output debugging information.  */\n-  ASM_OUTPUT_SECTION (asm_out_file, secname);\n+  named_section_flags (secname, SECTION_DEBUG, 1);\n   output_compilation_unit_header ();\n   output_die (die);\n \n@@ -11574,10 +11558,12 @@ dwarf2out_start_source_file (lineno, filename)\n     }\n   if (debug_info_level >= DINFO_LEVEL_VERBOSE)\n     {\n-      ASM_OUTPUT_SECTION (asm_out_file, DEBUG_MACINFO_SECTION);\n+      named_section_flags (DEBUG_MACINFO_SECTION, SECTION_DEBUG, 1);\n       dw2_asm_output_data (1, DW_MACINFO_start_file, \"Start new file\");\n-      dw2_asm_output_data_uleb128 (lineno, \"Included from line number %d\", lineno);\n-      dw2_asm_output_data_uleb128 (lookup_filename (filename), \"Filename we just started\");\n+      dw2_asm_output_data_uleb128 (lineno, \"Included from line number %d\",\n+\t\t\t\t   lineno);\n+      dw2_asm_output_data_uleb128 (lookup_filename (filename),\n+\t\t\t\t   \"Filename we just started\");\n     }\n }\n \n@@ -11594,7 +11580,7 @@ dwarf2out_end_source_file (lineno)\n     }\n   if (debug_info_level >= DINFO_LEVEL_VERBOSE)\n     {\n-      ASM_OUTPUT_SECTION (asm_out_file, DEBUG_MACINFO_SECTION);\n+      named_section_flags (DEBUG_MACINFO_SECTION, SECTION_DEBUG, 1);\n       dw2_asm_output_data (1, DW_MACINFO_end_file, \"End file\");\n     }\n }\n@@ -11616,7 +11602,7 @@ dwarf2out_define (lineno, buffer)\n     }\n   if (debug_info_level >= DINFO_LEVEL_VERBOSE)\n     {\n-      ASM_OUTPUT_SECTION (asm_out_file, DEBUG_MACINFO_SECTION);\n+      named_section_flags (DEBUG_MACINFO_SECTION, SECTION_DEBUG, 1);\n       dw2_asm_output_data (1, DW_MACINFO_define, \"Define macro\");\n       dw2_asm_output_data_uleb128 (lineno, \"At line number %d\", lineno);\n       dw2_asm_output_nstring (buffer, -1, \"The macro\");\n@@ -11634,7 +11620,7 @@ dwarf2out_undef (lineno, buffer)\n {\n   if (debug_info_level >= DINFO_LEVEL_VERBOSE)\n     {\n-      ASM_OUTPUT_SECTION (asm_out_file, DEBUG_MACINFO_SECTION);\n+      named_section_flags (DEBUG_MACINFO_SECTION, SECTION_DEBUG, 1);\n       dw2_asm_output_data (1, DW_MACINFO_undef, \"Undefine macro\");\n       dw2_asm_output_data_uleb128 (lineno, \"At line number %d\", lineno);\n       dw2_asm_output_nstring (buffer, -1, \"The macro\");\n@@ -11707,26 +11693,27 @@ dwarf2out_init (main_input_filename)\n   ASM_GENERATE_INTERNAL_LABEL (debug_line_section_label,\n \t\t\t       DEBUG_LINE_SECTION_LABEL, 0);\n   ASM_GENERATE_INTERNAL_LABEL (loc_section_label, DEBUG_LOC_SECTION_LABEL, 0);\n-  ASM_OUTPUT_SECTION (asm_out_file, DEBUG_LOC_SECTION);\n+  named_section_flags (DEBUG_LOC_SECTION, SECTION_DEBUG, 1);\n   ASM_OUTPUT_LABEL (asm_out_file, loc_section_label);\n-  ASM_OUTPUT_SECTION (asm_out_file, DEBUG_ABBREV_SECTION);\n+  named_section_flags (DEBUG_ABBREV_SECTION, SECTION_DEBUG, 1);\n   ASM_OUTPUT_LABEL (asm_out_file, abbrev_section_label);\n-  if (DWARF2_GENERATE_TEXT_SECTION_LABEL)\n-    {\n-      ASM_OUTPUT_SECTION (asm_out_file, TEXT_SECTION);\n-      ASM_OUTPUT_LABEL (asm_out_file, text_section_label);\n-    }\n-  ASM_OUTPUT_SECTION (asm_out_file, DEBUG_INFO_SECTION);\n+  named_section_flags (DEBUG_INFO_SECTION, SECTION_DEBUG, 1);\n   ASM_OUTPUT_LABEL (asm_out_file, debug_info_section_label);\n-  ASM_OUTPUT_SECTION (asm_out_file, DEBUG_LINE_SECTION);\n+  named_section_flags (DEBUG_LINE_SECTION, SECTION_DEBUG, 1);\n   ASM_OUTPUT_LABEL (asm_out_file, debug_line_section_label);\n   if (debug_info_level >= DINFO_LEVEL_VERBOSE)\n     {\n-      ASM_OUTPUT_SECTION (asm_out_file, DEBUG_MACINFO_SECTION);\n+      named_section_flags (DEBUG_MACINFO_SECTION, SECTION_DEBUG, 1);\n       ASM_GENERATE_INTERNAL_LABEL (macinfo_section_label,\n \t\t\t\t   DEBUG_MACINFO_SECTION_LABEL, 0);\n       ASM_OUTPUT_LABEL (asm_out_file, macinfo_section_label);\n     }\n+\n+  if (DWARF2_GENERATE_TEXT_SECTION_LABEL)\n+    {\n+      text_section ();\n+      ASM_OUTPUT_LABEL (asm_out_file, text_section_label);\n+    }\n }\n \n /* Output stuff that dwarf requires at the end of every file,\n@@ -11783,27 +11770,17 @@ dwarf2out_finish (input_filename)\n     add_sibling_attributes (node->die);\n \n   /* Output a terminator label for the .text section.  */\n-  ASM_OUTPUT_SECTION (asm_out_file, TEXT_SECTION);\n+  text_section ();\n   ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, TEXT_END_LABEL, 0);\n \n-#if 0\n-  /* Output a terminator label for the .data section.  */\n-  ASM_OUTPUT_SECTION (asm_out_file, DATA_SECTION);\n-  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, DATA_END_LABEL, 0);\n-\n-  /* Output a terminator label for the .bss section.  */\n-  ASM_OUTPUT_SECTION (asm_out_file, BSS_SECTION);\n-  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, BSS_END_LABEL, 0);\n-#endif\n-\n   /* Output the source line correspondence table.  We must do this\n      even if there is no line information.  Otherwise, on an empty\n      translation unit, we will generate a present, but empty,\n      .debug_info section.  IRIX 6.5 `nm' will then complain when\n      examining the file.  */\n   if (! DWARF2_ASM_LINE_DEBUG_INFO)\n     {\n-      ASM_OUTPUT_SECTION (asm_out_file, DEBUG_LINE_SECTION);\n+      named_section_flags (DEBUG_LINE_SECTION, SECTION_DEBUG, 1);\n       output_line_info ();\n     }\n \n@@ -11834,13 +11811,13 @@ dwarf2out_finish (input_filename)\n   output_comp_unit (comp_unit_die);\n \n   /* Output the abbreviation table.  */\n-  ASM_OUTPUT_SECTION (asm_out_file, DEBUG_ABBREV_SECTION);\n+  named_section_flags (DEBUG_ABBREV_SECTION, SECTION_DEBUG, 1);\n   output_abbrev_section ();\n \n   if (pubname_table_in_use)\n     {\n       /* Output public names table.  */\n-      ASM_OUTPUT_SECTION (asm_out_file, DEBUG_PUBNAMES_SECTION);\n+      named_section_flags (DEBUG_PUBNAMES_SECTION, SECTION_DEBUG, 1);\n       output_pubnames ();\n     }\n \n@@ -11849,30 +11826,30 @@ dwarf2out_finish (input_filename)\n   if (fde_table_in_use)\n     {\n       /* Output the address range information.  */\n-      ASM_OUTPUT_SECTION (asm_out_file, DEBUG_ARANGES_SECTION);\n+      named_section_flags (DEBUG_ARANGES_SECTION, SECTION_DEBUG, 1);\n       output_aranges ();\n     }\n \n   /* Output location list section if necessary.  */\n   if (have_location_lists)\n     {\n       /* Output the location lists info. */\n-      ASM_OUTPUT_SECTION (asm_out_file, DEBUG_LOC_SECTION);\n+      named_section_flags (DEBUG_LOC_SECTION, SECTION_DEBUG, 1);\n       output_location_lists (die);\n       have_location_lists = 0;\n     }\n \n   /* Output ranges section if necessary.  */\n   if (ranges_table_in_use)\n     {\n-      ASM_OUTPUT_SECTION (asm_out_file, DEBUG_RANGES_SECTION);\n+      named_section_flags (DEBUG_RANGES_SECTION, SECTION_DEBUG, 1);\n       output_ranges ();\n     }\n \n   /* Have to end the primary source file. */\n   if (debug_info_level >= DINFO_LEVEL_VERBOSE)\n     { \n-      ASM_OUTPUT_SECTION (asm_out_file, DEBUG_MACINFO_SECTION);\n+      named_section_flags (DEBUG_MACINFO_SECTION, SECTION_DEBUG, 1);\n       dw2_asm_output_data (1, DW_MACINFO_end_file, \"End file\");\n     }\n }"}, {"sha": "f28c7afe2a62c53a9bb563aebd92c4e337099ae3", "filename": "gcc/output.h", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -159,10 +159,6 @@ extern void readonly_data_section\tPARAMS ((void));\n /* Determine if we're in the text section. */\n extern int in_text_section\t\tPARAMS ((void));\n \n-#ifdef EH_FRAME_SECTION_ASM_OP\n-extern void eh_frame_section\t\tPARAMS ((void));\n-#endif\n-\n #ifdef CTORS_SECTION_ASM_OP\n extern void ctors_section PARAMS ((void));\n #endif\n@@ -459,3 +455,30 @@ extern void default_function_pro_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n \n /* Default target hook that outputs nothing to a stream.  */\n extern void no_asm_to_stream PARAMS ((FILE *));\n+\n+/* Flags controling properties of a section.  */\n+#define SECTION_CODE\t    1\t/* contains code */\n+#define SECTION_WRITE\t    2\t/* data is writable */\n+#define SECTION_DEBUG\t    4\t/* contains debug data */\n+#define SECTION_LINKONCE    8\t/* is linkonce */\n+#define SECTION_SMALL\t   16\t/* contains \"small data\" */\n+#define SECTION_BSS\t   32\t/* contains zeros only */\n+#define SECTION_FORGET\t   64\t/* forget that we've entered the section */\n+#define SECTION_MACH_DEP  128\t/* subsequent bits reserved for target */\n+\n+extern void named_section_flags\t\tPARAMS ((const char *, unsigned int,\n+\t\t\t\t\t\t unsigned int));\n+\n+union tree_node;\n+extern unsigned int default_section_type_flags PARAMS ((union tree_node *,\n+\t\t\t\t\t\t\tconst char *, int));\n+\n+extern void default_no_named_section PARAMS ((const char *, unsigned int,\n+\t\t\t\t\t      unsigned int));\n+extern void default_elf_asm_named_section PARAMS ((const char *, unsigned int,\n+\t\t\t\t\t      unsigned int));\n+extern void default_coff_asm_named_section PARAMS ((const char *, unsigned int,\n+\t\t\t\t\t      unsigned int));\n+extern void default_pe_asm_named_section PARAMS ((const char *, unsigned int,\n+\t\t\t\t\t      unsigned int));\n+"}, {"sha": "939ca8fcbd28b41ab6373ff6d1238ee9797061e6", "filename": "gcc/target-def.h", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -33,12 +33,20 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_ASM_FUNCTION_END_PROLOGUE no_asm_to_stream\n #define TARGET_ASM_FUNCTION_BEGIN_EPILOGUE no_asm_to_stream\n \n+#ifdef TARGET_ASM_NAMED_SECTION\n+#define TARGET_HAVE_NAMED_SECTIONS true\n+#else\n+#define TARGET_ASM_NAMED_SECTION default_no_named_section\n+#define TARGET_HAVE_NAMED_SECTIONS false\n+#endif\n+\n #define TARGET_ASM_OUT {TARGET_ASM_OPEN_PAREN,\t\t\t\\\n \t\t\tTARGET_ASM_CLOSE_PAREN,\t\t\t\\\n \t\t\tTARGET_ASM_FUNCTION_PROLOGUE,\t\t\\\n \t\t\tTARGET_ASM_FUNCTION_END_PROLOGUE,\t\\\n \t\t\tTARGET_ASM_FUNCTION_BEGIN_EPILOGUE,\t\\\n-\t\t\tTARGET_ASM_FUNCTION_EPILOGUE}\n+\t\t\tTARGET_ASM_FUNCTION_EPILOGUE,\t\t\\\n+\t\t\tTARGET_ASM_NAMED_SECTION}\n \n /* All in tree.c.  */\n #define TARGET_MERGE_DECL_ATTRIBUTES merge_decl_attributes\n@@ -53,6 +61,11 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_INIT_BUILTINS default_init_builtins\n #define TARGET_EXPAND_BUILTIN default_expand_builtin\n \n+/* In varasm.c.  */\n+#ifndef TARGET_SECTION_TYPE_FLAGS\n+#define TARGET_SECTION_TYPE_FLAGS default_section_type_flags\n+#endif\n+\n /* The whole shebang.  */\n #define TARGET_INITIALIZER\t\t\t\\\n {\t\t\t\t\t\t\\\n@@ -65,5 +78,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_SET_DEFAULT_TYPE_ATTRIBUTES,\t\t\\\n   TARGET_INSERT_ATTRIBUTES,\t\t\t\\\n   TARGET_INIT_BUILTINS,\t\t\t\t\\\n-  TARGET_EXPAND_BUILTIN\t\t\t\t\\\n+  TARGET_EXPAND_BUILTIN,\t\t\t\\\n+  TARGET_SECTION_TYPE_FLAGS,\t\t\t\\\n+  TARGET_HAVE_NAMED_SECTIONS\t\t\t\\\n }"}, {"sha": "d3f32faf9c797e9d4d942fe7959a47053458448b", "filename": "gcc/target.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -66,6 +66,12 @@ struct gcc_target\n \n     /* Output the assembler code for function exit.  */\n     void (* function_epilogue) PARAMS ((FILE *, HOST_WIDE_INT));\n+\n+    /* Switch to an arbitrary section NAME with attributes as specified\n+       by FLAGS.  ALIGN specifies any known alignment requirements for\n+       the section; 0 if the default should be used.  */\n+    void (* named_section) PARAMS ((const char *, unsigned int,\n+\t\t\t\t    unsigned int));\n   } asm_out;\n \n   /* Given two decls, merge their attributes and return the result.  */\n@@ -106,6 +112,14 @@ struct gcc_target\n \t\t\t\t\t       struct rtx_def *subtarget,\n \t\t\t\t\t       enum machine_mode mode,\n \t\t\t\t\t       int ignore));\n+\n+  /* Given a decl, a section name, and whether the decl initializer\n+     has relocs, choose attributes for the section.  */\n+  /* ??? Should be merged with SELECT_SECTION and UNIQUE_SECTION.  */\n+  unsigned int (* section_type_flags) PARAMS ((tree, const char *, int));\n+\n+  /* True if arbitrary sections are supported.  */\n+  bool have_named_sections;\n };\n \n extern struct gcc_target targetm;"}, {"sha": "b69ea3f4fb539792054708fbcb42c5596a850b71", "filename": "gcc/toplev.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -67,6 +67,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"dwarf2asm.h\"\n #include \"integrate.h\"\n #include \"debug.h\"\n+#include \"target.h\"\n \n #if defined (DWARF2_UNWIND_INFO) || defined (DWARF2_DEBUGGING_INFO)\n #include \"dwarf2out.h\"\n@@ -2267,18 +2268,19 @@ compile_file (name)\n     debug_hooks = &dwarf2_debug_hooks;\n #endif\n \n-#ifndef ASM_OUTPUT_SECTION_NAME\n-  if (flag_function_sections)\n+  if (! targetm.have_named_sections)\n     {\n-      warning (\"-ffunction-sections not supported for this target.\");\n-      flag_function_sections = 0;\n-    }\n-  if (flag_data_sections)\n-    {\n-      warning (\"-fdata-sections not supported for this target.\");\n-      flag_data_sections = 0;\n+      if (flag_function_sections)\n+\t{\n+\t  warning (\"-ffunction-sections not supported for this target.\");\n+\t  flag_function_sections = 0;\n+\t}\n+      if (flag_data_sections)\n+\t{\n+\t  warning (\"-fdata-sections not supported for this target.\");\n+\t  flag_data_sections = 0;\n+\t}\n     }\n-#endif\n \n   if (flag_function_sections\n       && (profile_flag || profile_block_flag))"}, {"sha": "d574a80253987e86ac55f5f16872c6bcb3819e62", "filename": "gcc/varasm.c", "status": "modified", "additions": 188, "deletions": 55, "changes": 243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c262518a45491adb8a04f5ec4006dbe957ab7a4/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=7c262518a45491adb8a04f5ec4006dbe957ab7a4", "patch": "@@ -46,6 +46,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"ggc.h\"\n #include \"tm_p.h\"\n #include \"debug.h\"\n+#include \"target.h\"\n \n #ifdef XCOFF_DEBUGGING_INFO\n #include \"xcoffout.h\"\t\t/* Needed for external data\n@@ -181,14 +182,12 @@ static hashval_t const_str_htab_hash\tPARAMS ((const void *x));\n static int const_str_htab_eq\t\tPARAMS ((const void *x, const void *y));\n static void const_str_htab_del\t\tPARAMS ((void *));\n static void asm_emit_uninitialised\tPARAMS ((tree, const char*, int, int));\n+static void resolve_unique_section\tPARAMS ((tree, int));\n \f\n static enum in_section { no_section, in_text, in_data, in_named\n #ifdef BSS_SECTION_ASM_OP\n   , in_bss\n #endif\n-#ifdef EH_FRAME_SECTION_ASM_OP\n-  , in_eh_frame\n-#endif\n #ifdef EXTRA_SECTIONS\n   , EXTRA_SECTIONS\n #endif\n@@ -281,6 +280,28 @@ in_data_section ()\n   return in_section == in_data;\n }\n \n+/* Tell assembler to change to section NAME with attributes FLAGS.  */\n+\n+void\n+named_section_flags (name, flags, align)\n+     const char *name;\n+     unsigned int flags;\n+     unsigned int align;\n+{\n+  if (in_section != in_named || strcmp (name, in_named_name))\n+    {\n+      (* targetm.asm_out.named_section) (name, flags, align);\n+\n+      if (flags & SECTION_FORGET)\n+\tin_section = no_section;\n+      else\n+\t{\n+\t  in_named_name = ggc_strdup (name);\n+\t  in_section = in_named;\n+\t}\n+    }\n+}\n+\n /* Tell assembler to change to section NAME for DECL.\n    If DECL is NULL, just switch to section NAME.\n    If NAME is NULL, get the name from DECL.\n@@ -290,27 +311,31 @@ void\n named_section (decl, name, reloc)\n      tree decl;\n      const char *name;\n-     int reloc ATTRIBUTE_UNUSED;\n+     int reloc;\n {\n+  unsigned int flags;\n+\n   if (decl != NULL_TREE && !DECL_P (decl))\n     abort ();\n   if (name == NULL)\n     name = TREE_STRING_POINTER (DECL_SECTION_NAME (decl));\n \n-  if (in_section != in_named || strcmp (name, in_named_name))\n-    {\n-#ifdef ASM_OUTPUT_SECTION_NAME\n-      ASM_OUTPUT_SECTION_NAME (asm_out_file, decl, name, reloc);\n-#else\n-      /* Section attributes are not supported if this macro isn't provided -\n-\t some host formats don't support them at all.  The front-end should\n-\t already have flagged this as an error.  */\n-      abort ();\n-#endif\n+  flags = (* targetm.section_type_flags) (decl, name, reloc);\n+  named_section_flags (name, flags, 0);\n+}\n \n-      in_named_name = ggc_strdup (name);\n-      in_section = in_named;\n-    }\n+/* If required, set DECL_SECTION_NAME to a unique name.  */\n+\n+static void\n+resolve_unique_section (decl, reloc)\n+     tree decl;\n+     int reloc;\n+{\n+  if (DECL_SECTION_NAME (decl) == NULL_TREE\n+      && (flag_function_sections\n+\t  || (targetm.have_named_sections\n+\t      && DECL_ONE_ONLY (decl))))\n+    UNIQUE_SECTION (decl, reloc);\n }\n \n #ifdef BSS_SECTION_ASM_OP\n@@ -392,18 +417,6 @@ asm_output_aligned_bss (file, decl, name, size, align)\n \n #endif /* BSS_SECTION_ASM_OP */\n \n-#ifdef EH_FRAME_SECTION_ASM_OP\n-void\n-eh_frame_section ()\n-{\n-  if (in_section != in_eh_frame)\n-    {\n-      fprintf (asm_out_file, \"%s\\n\", EH_FRAME_SECTION_ASM_OP);\n-      in_section = in_eh_frame;\n-    }\n-} \n-#endif\n-\n /* Switch to the section for function DECL.\n \n    If DECL is NULL_TREE, switch to the text section.\n@@ -467,15 +480,13 @@ exception_section ()\n #if defined (EXCEPTION_SECTION)\n   EXCEPTION_SECTION ();\n #else\n-#ifdef ASM_OUTPUT_SECTION_NAME\n-  named_section (NULL_TREE, \".gcc_except_table\", 0);\n-#else\n-  if (flag_pic)\n+  if (targetm.have_named_sections)\n+    named_section (NULL_TREE, \".gcc_except_table\", 0);\n+  else if (flag_pic)\n     data_section ();\n   else\n     readonly_data_section ();\n #endif\n-#endif\n }\n \f\n /* Given NAME, a putative register name, discard any customary prefixes.  */\n@@ -896,15 +907,7 @@ assemble_start_function (decl, fnname)\n   if (CONSTANT_POOL_BEFORE_FUNCTION)\n     output_constant_pool (fnname, decl);\n \n-#ifdef ASM_OUTPUT_SECTION_NAME\n-  /* If the function is to be put in its own section and it's not in a section\n-     already, indicate so.  */\n-  if ((flag_function_sections\n-       && DECL_SECTION_NAME (decl) == NULL_TREE)\n-      || UNIQUE_SECTION_P (decl))\n-    UNIQUE_SECTION (decl, 0);\n-#endif\n-\n+  resolve_unique_section (decl, 0);\n   function_section (decl);\n \n   /* Tell assembler to move to target machine's alignment for functions.  */\n@@ -1163,12 +1166,8 @@ asm_emit_uninitialised (decl, name, size, rounded)\n \t}\n     }\n \n-#ifdef ASM_OUTPUT_SECTION_NAME\n-  /* We already know that DECL_SECTION_NAME() == NULL.  */\n-  if (flag_data_sections != 0 || UNIQUE_SECTION_P (decl))\n-    UNIQUE_SECTION (decl, 0);\n-#endif\n-  \n+  resolve_unique_section (decl, 0);\n+\n   switch (destination)\n     {\n #ifdef ASM_EMIT_BSS\n@@ -1396,13 +1395,8 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n   else if (DECL_INITIAL (decl))\n     reloc = output_addressed_constants (DECL_INITIAL (decl));\n \n-#ifdef ASM_OUTPUT_SECTION_NAME\n-  if ((flag_data_sections != 0 && DECL_SECTION_NAME (decl) == NULL_TREE)\n-      || UNIQUE_SECTION_P (decl))\n-    UNIQUE_SECTION (decl, reloc);\n-#endif\n-\n   /* Switch to the appropriate section.  */\n+  resolve_unique_section (decl, reloc);\n   variable_section (decl, reloc);\n \n   /* dbxout.c needs to know this.  */\n@@ -4765,3 +4759,142 @@ init_varasm_once ()\n   ggc_add_root (&const_str_htab, 1, sizeof const_str_htab,\n \t\tmark_const_str_htab);\n }\n+\n+/* Select a set of attributes for section NAME based on the properties\n+   of DECL and whether or not RELOC indicates that DECL's initializer\n+   might contain runtime relocations.\n+\n+   We make the section read-only and executable for a function decl,\n+   read-only for a const data decl, and writable for a non-const data decl.\n+\n+   If the section has already been defined, to not allow it to have\n+   different attributes, as (1) this is ambiguous since we're not seeing\n+   all the declarations up front and (2) some assemblers (e.g. SVR4)\n+   do not recoginize section redefinitions.  */\n+\n+unsigned int\n+default_section_type_flags (decl, name, reloc)\n+     tree decl;\n+     const char *name;\n+     int reloc;\n+{\n+  static htab_t htab;\n+  unsigned int flags;\n+  unsigned int **slot;\n+\n+  /* The names we put in the hashtable will always be the unique\n+     versions gived to us by the stringtable, so we can just use\n+     their addresses as the keys.  */\n+  if (!htab)\n+    htab = htab_create (31, htab_hash_pointer, htab_eq_pointer, NULL);\n+\n+  if (decl && TREE_CODE (decl) == FUNCTION_DECL)\n+    flags = SECTION_CODE;\n+  else if (decl && DECL_READONLY_SECTION (decl, reloc))\n+    flags = 0;\n+  else\n+    flags = SECTION_WRITE;\n+\n+  if (decl && DECL_ONE_ONLY (decl))\n+    flags |= SECTION_LINKONCE;\n+\n+  if (strcmp (name, \".bss\") == 0\n+      || strncmp (name, \".bss.\", 5) == 0\n+      || strncmp (name, \".gnu.linkonce.b.\", 16) == 0\n+      || strcmp (name, \".sbss\") == 0\n+      || strncmp (name, \".sbss.\", 6) == 0\n+      || strncmp (name, \".gnu.linkonce.sb.\", 17) == 0)\n+    flags |= SECTION_BSS;\n+\n+  /* See if we already have an entry for this section.  */\n+  slot = (unsigned int **) htab_find_slot (htab, name, INSERT);\n+  if (!*slot)\n+    {\n+      *slot = (unsigned int *) xmalloc (sizeof (unsigned int));\n+      **slot = flags;\n+    }\n+  else\n+    {\n+      if (decl && **slot != flags)\n+\terror_with_decl (decl, \"%s causes a section type conflict\");\n+    }\n+\n+  return flags;\n+}\n+\n+/* Output assembly to switch to section NAME with attribute FLAGS.\n+   Four variants for common object file formats.  */\n+\n+void\n+default_no_named_section (name, flags, align)\n+     const char *name ATTRIBUTE_UNUSED;\n+     unsigned int flags ATTRIBUTE_UNUSED;\n+     unsigned int align ATTRIBUTE_UNUSED;\n+{\n+  /* Some object formats don't support named sections at all.  The\n+     front-end should already have flagged this as an error.  */\n+  abort ();\n+}\n+\n+void\n+default_elf_asm_named_section (name, flags, align)\n+     const char *name;\n+     unsigned int flags;\n+     unsigned int align ATTRIBUTE_UNUSED;\n+{\n+  char flagchars[8], *f = flagchars;\n+  const char *type;\n+\n+  if (!(flags & SECTION_DEBUG))\n+    *f++ = 'a';\n+  if (flags & SECTION_WRITE)\n+    *f++ = 'w';\n+  if (flags & SECTION_CODE)\n+    *f++ = 'x';\n+  if (flags & SECTION_SMALL)\n+    *f++ = 's';\n+  *f = '\\0';\n+\n+  if (flags & SECTION_BSS)\n+    type = \"nobits\";\n+  else\n+    type = \"progbits\";\n+\n+  fprintf (asm_out_file, \"\\t.section\\t%s,\\\"%s\\\",@%s\\n\",\n+\t   name, flagchars, type);\n+}\n+\n+void\n+default_coff_asm_named_section (name, flags, align)\n+     const char *name;\n+     unsigned int flags;\n+     unsigned int align ATTRIBUTE_UNUSED;\n+{\n+  char flagchars[8], *f = flagchars;\n+\n+  if (flags & SECTION_WRITE)\n+    *f++ = 'w';\n+  if (flags & SECTION_CODE)\n+    *f++ = 'x';\n+  *f = '\\0';\n+\n+  fprintf (asm_out_file, \"\\t.section\\t%s,\\\"%s\\\"\\n\", name, flagchars);\n+}\n+\n+void\n+default_pe_asm_named_section (name, flags, align)\n+     const char *name;\n+     unsigned int flags;\n+     unsigned int align ATTRIBUTE_UNUSED;\n+{\n+  default_coff_asm_named_section (name, flags, align);\n+\n+  if (flags & SECTION_LINKONCE)\n+    {\n+      /* Functions may have been compiled at various levels of\n+         optimization so we can't use `same_size' here.\n+         Instead, have the linker pick one.  */\n+      fprintf (asm_out_file, \"\\t.linkonce %s\\n\",\n+\t       (flags & SECTION_CODE ? \"discard\" : \"same_size\"));\n+    }\n+}"}]}