{"sha": "c8e90f4053f0e366630c5147d28d4d9c56e56668", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhlOTBmNDA1M2YwZTM2NjYzMGM1MTQ3ZDI4ZDRkOWM1NmU1NjY2OA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2005-11-09T21:34:31Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2005-11-09T21:34:31Z"}, "message": "ifcvt.c (noce_get_alt_condition): Use prev_nonnote_insn.\n\n\t* ifcvt.c (noce_get_alt_condition): Use prev_nonnote_insn.\n\t(noce_try_abs): Negate if the comparison is reversed.\n\tLook only one instruction backwards for a REG_EQUAL note.\n\nFrom-SVN: r106706", "tree": {"sha": "ca883f3b1639764277c88f95e1f44f59c48c0459", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca883f3b1639764277c88f95e1f44f59c48c0459"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8e90f4053f0e366630c5147d28d4d9c56e56668", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8e90f4053f0e366630c5147d28d4d9c56e56668", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8e90f4053f0e366630c5147d28d4d9c56e56668", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8e90f4053f0e366630c5147d28d4d9c56e56668/comments", "author": null, "committer": null, "parents": [{"sha": "7ef67393c7454bb93a070d0290b4196c06a93ce8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ef67393c7454bb93a070d0290b4196c06a93ce8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ef67393c7454bb93a070d0290b4196c06a93ce8"}], "stats": {"total": 68, "additions": 53, "deletions": 15}, "files": [{"sha": "96381d7aef8112d97380a68d8b9a6f8ecf87df7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e90f4053f0e366630c5147d28d4d9c56e56668/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e90f4053f0e366630c5147d28d4d9c56e56668/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8e90f4053f0e366630c5147d28d4d9c56e56668", "patch": "@@ -1,3 +1,9 @@\n+2005-11-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* ifcvt.c (noce_get_alt_condition): Use prev_nonnote_insn.\n+\t(noce_try_abs): Negate if the comparison is reversed.\n+\tLook only one instruction backwards for a REG_EQUAL note.\n+\n 2005-11-09  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR other/4372"}, {"sha": "e7eec87bfc133321528a3eb4714b3f2da9a634d6", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e90f4053f0e366630c5147d28d4d9c56e56668/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e90f4053f0e366630c5147d28d4d9c56e56668/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=c8e90f4053f0e366630c5147d28d4d9c56e56668", "patch": "@@ -1485,7 +1485,7 @@ noce_get_alt_condition (struct noce_if_info *if_info, rtx target,\n       rtx prev_insn;\n \n       /* First, look to see if we put a constant in a register.  */\n-      prev_insn = PREV_INSN (if_info->cond_earliest);\n+      prev_insn = prev_nonnote_insn (if_info->cond_earliest);\n       if (prev_insn\n \t  && INSN_P (prev_insn)\n \t  && GET_CODE (PATTERN (prev_insn)) == SET)\n@@ -1697,7 +1697,9 @@ noce_try_abs (struct noce_if_info *if_info)\n   if (no_new_pseudos)\n     return FALSE;\n \n-  /* Recognize A and B as constituting an ABS or NABS.  */\n+  /* Recognize A and B as constituting an ABS or NABS.  The canonical\n+     form is a branch around the negation, taken when the object is the\n+     first operand of a comparison against 0 that evaluates to true.  */\n   a = if_info->a;\n   b = if_info->b;\n   if (GET_CODE (a) == NEG && rtx_equal_p (XEXP (a, 0), b))\n@@ -1718,25 +1720,30 @@ noce_try_abs (struct noce_if_info *if_info)\n   if (rtx_equal_p (XEXP (cond, 0), b))\n     c = XEXP (cond, 1);\n   else if (rtx_equal_p (XEXP (cond, 1), b))\n-    c = XEXP (cond, 0);\n+    {\n+      c = XEXP (cond, 0);\n+      negate = !negate;\n+    }\n   else\n     return FALSE;\n \n-  /* Verify that C is zero.  Search backward through the block for\n-     a REG_EQUAL note if necessary.  */\n+  /* Verify that C is zero.  Search one step backward for a\n+     REG_EQUAL note or a simple source if necessary.  */\n   if (REG_P (c))\n     {\n-      rtx insn, note = NULL;\n-      for (insn = earliest;\n-\t   insn != BB_HEAD (if_info->test_bb);\n-\t   insn = PREV_INSN (insn))\n-\tif (INSN_P (insn)\n-\t    && ((note = find_reg_note (insn, REG_EQUAL, c))\n-\t\t|| (note = find_reg_note (insn, REG_EQUIV, c))))\n-\t  break;\n-      if (! note)\n+      rtx set, insn = prev_nonnote_insn (earliest);\n+      if (insn\n+\t  && (set = single_set (insn))\n+\t  && rtx_equal_p (SET_DEST (set), c))\n+\t{\n+\t  rtx note = find_reg_equal_equiv_note (insn);\n+\t  if (note)\n+\t    c = XEXP (note, 0);\n+\t  else\n+\t    c = SET_SRC (set);\n+\t}\n+      else\n \treturn FALSE;\n-      c = XEXP (note, 0);\n     }\n   if (MEM_P (c)\n       && GET_CODE (XEXP (c, 0)) == SYMBOL_REF"}, {"sha": "2adff3475eea34e9b1f5a0bc8c2bc71d847ba48d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e90f4053f0e366630c5147d28d4d9c56e56668/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e90f4053f0e366630c5147d28d4d9c56e56668/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c8e90f4053f0e366630c5147d28d4d9c56e56668", "patch": "@@ -1,3 +1,7 @@\n+2005-11-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/ifcvt-fabs-1.c: New test.\n+\n 2005-11-09  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR other/4372"}, {"sha": "6808a8f584391f3d4552db61abc59fd1a43dd2a6", "filename": "gcc/testsuite/gcc.dg/ifcvt-fabs-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8e90f4053f0e366630c5147d28d4d9c56e56668/gcc%2Ftestsuite%2Fgcc.dg%2Fifcvt-fabs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8e90f4053f0e366630c5147d28d4d9c56e56668/gcc%2Ftestsuite%2Fgcc.dg%2Fifcvt-fabs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fifcvt-fabs-1.c?ref=c8e90f4053f0e366630c5147d28d4d9c56e56668", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O\" } */\n+/* { dg-options \"-O -march=i686\" { target i686-*-* } } */\n+\n+extern void abort(void);\n+\n+float foo(float f)\n+{\n+  if (f < 0.0f)\n+    f = -f;\n+\n+  return f;\n+}\n+\n+int main(void)\n+{\n+  if (foo (-1.0f) != 1.0f)\n+    abort ();\n+\n+  return 0;\n+}"}]}