{"sha": "131aeb82d18736392c992c79c2184b2ad16c6190", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMxYWViODJkMTg3MzYzOTJjOTkyYzc5YzIxODRiMmFkMTZjNjE5MA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-11-22T00:35:48Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-11-22T00:35:48Z"}, "message": "rs6000.opt (mmulhw): New option.\n\n\t* config/rs6000/rs6000.opt (mmulhw): New option.\n\t* doc/invoke.texi (-mmulhw): Document.\n\t* config/rs6000/rs6000.c (rs6000_override_options): Enable -mmulhw\n\tfor 405 and 440.\n\t* config/rs6000/rs6000.md: Add half-word multiply and\n\tmultiply-accumulate instructions for 405 and 440.\n\ntestsuite:\n\t* gcc.target/powerpc/405-macchw-1.c,\n\tgcc.target/powerpc/405-macchw-2.c,\n\tgcc.target/powerpc/405-macchwu-1.c,\n\tgcc.target/powerpc/405-macchwu-2.c,\n\tgcc.target/powerpc/405-machhw-1.c,\n\tgcc.target/powerpc/405-machhw-2.c,\n\tgcc.target/powerpc/405-machhwu-1.c,\n\tgcc.target/powerpc/405-machhwu-2.c,\n\tgcc.target/powerpc/405-maclhw-1.c,\n\tgcc.target/powerpc/405-maclhw-2.c,\n\tgcc.target/powerpc/405-maclhwu-1.c,\n\tgcc.target/powerpc/405-maclhwu-2.c,\n\tgcc.target/powerpc/405-mulchw-1.c,\n\tgcc.target/powerpc/405-mulchw-2.c,\n\tgcc.target/powerpc/405-mulchwu-1.c,\n\tgcc.target/powerpc/405-mulchwu-2.c,\n\tgcc.target/powerpc/405-mulhhw-1.c,\n\tgcc.target/powerpc/405-mulhhw-2.c,\n\tgcc.target/powerpc/405-mulhhwu-1.c,\n\tgcc.target/powerpc/405-mulhhwu-2.c,\n\tgcc.target/powerpc/405-mullhw-1.c,\n\tgcc.target/powerpc/405-mullhw-2.c,\n\tgcc.target/powerpc/405-mullhwu-1.c,\n\tgcc.target/powerpc/405-mullhwu-2.c,\n\tgcc.target/powerpc/405-nmacchw-1.c,\n\tgcc.target/powerpc/405-nmacchw-2.c,\n\tgcc.target/powerpc/405-nmachhw-1.c,\n\tgcc.target/powerpc/405-nmachhw-2.c,\n\tgcc.target/powerpc/405-nmaclhw-1.c,\n\tgcc.target/powerpc/405-nmaclhw-2.c,\n\tgcc.target/powerpc/440-macchw-1.c,\n\tgcc.target/powerpc/440-macchw-2.c,\n\tgcc.target/powerpc/440-macchwu-1.c,\n\tgcc.target/powerpc/440-macchwu-2.c,\n\tgcc.target/powerpc/440-machhw-1.c,\n\tgcc.target/powerpc/440-machhw-2.c,\n\tgcc.target/powerpc/440-machhwu-1.c,\n\tgcc.target/powerpc/440-machhwu-2.c,\n\tgcc.target/powerpc/440-maclhw-1.c,\n\tgcc.target/powerpc/440-maclhw-2.c,\n\tgcc.target/powerpc/440-maclhwu-1.c,\n\tgcc.target/powerpc/440-maclhwu-2.c,\n\tgcc.target/powerpc/440-mulchw-1.c,\n\tgcc.target/powerpc/440-mulchw-2.c,\n\tgcc.target/powerpc/440-mulchwu-1.c,\n\tgcc.target/powerpc/440-mulchwu-2.c,\n\tgcc.target/powerpc/440-mulhhw-1.c,\n\tgcc.target/powerpc/440-mulhhw-2.c,\n\tgcc.target/powerpc/440-mulhhwu-1.c,\n\tgcc.target/powerpc/440-mulhhwu-2.c,\n\tgcc.target/powerpc/440-mullhw-1.c,\n\tgcc.target/powerpc/440-mullhw-2.c,\n\tgcc.target/powerpc/440-mullhwu-1.c,\n\tgcc.target/powerpc/440-mullhwu-2.c,\n\tgcc.target/powerpc/440-nmacchw-1.c,\n\tgcc.target/powerpc/440-nmacchw-2.c,\n\tgcc.target/powerpc/440-nmachhw-1.c,\n\tgcc.target/powerpc/440-nmachhw-2.c,\n\tgcc.target/powerpc/440-nmaclhw-1.c,\n\tgcc.target/powerpc/440-nmaclhw-2.c: New tests.\n\nFrom-SVN: r107344", "tree": {"sha": "7ab67e5bc186d42f2dd5968d92d477a5936aeb7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ab67e5bc186d42f2dd5968d92d477a5936aeb7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/131aeb82d18736392c992c79c2184b2ad16c6190", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/131aeb82d18736392c992c79c2184b2ad16c6190", "html_url": "https://github.com/Rust-GCC/gccrs/commit/131aeb82d18736392c992c79c2184b2ad16c6190", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/131aeb82d18736392c992c79c2184b2ad16c6190/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b967bf2560748664c1afbdb7d4576a522b00175d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b967bf2560748664c1afbdb7d4576a522b00175d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b967bf2560748664c1afbdb7d4576a522b00175d"}], "stats": {"total": 1465, "additions": 1459, "deletions": 6}, "files": [{"sha": "1adc088a2ab87c4e85af5a37b74ceae9efa950ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -1,3 +1,12 @@\n+2005-11-22  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* config/rs6000/rs6000.opt (mmulhw): New option.\n+\t* doc/invoke.texi (-mmulhw): Document.\n+\t* config/rs6000/rs6000.c (rs6000_override_options): Enable -mmulhw\n+\tfor 405 and 440.\n+\t* config/rs6000/rs6000.md: Add half-word multiply and\n+\tmultiply-accumulate instructions for 405 and 440.\n+\n 2005-11-21  Joel Sherrill <joel.sherrill@oarcorp.com>\n \n \t* config/arm/rtems-elf.h: Added definition of LINK_GCC_C_SEQUENCE_SPEC"}, {"sha": "cc2d14bfab768b334ddce0bc76124c656eb0fc2f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -1107,10 +1107,12 @@ rs6000_override_options (const char *default_cpu)\n       = {{\"401\", PROCESSOR_PPC403, POWERPC_BASE_MASK | MASK_SOFT_FLOAT},\n \t {\"403\", PROCESSOR_PPC403,\n \t  POWERPC_BASE_MASK | MASK_SOFT_FLOAT | MASK_STRICT_ALIGN},\n-\t {\"405\", PROCESSOR_PPC405, POWERPC_BASE_MASK | MASK_SOFT_FLOAT},\n-\t {\"405fp\", PROCESSOR_PPC405, POWERPC_BASE_MASK},\n-\t {\"440\", PROCESSOR_PPC440, POWERPC_BASE_MASK | MASK_SOFT_FLOAT},\n-\t {\"440fp\", PROCESSOR_PPC440, POWERPC_BASE_MASK},\n+\t {\"405\", PROCESSOR_PPC405,\n+\t  POWERPC_BASE_MASK | MASK_SOFT_FLOAT | MASK_MULHW},\n+\t {\"405fp\", PROCESSOR_PPC405, POWERPC_BASE_MASK | MASK_MULHW},\n+\t {\"440\", PROCESSOR_PPC440,\n+\t  POWERPC_BASE_MASK | MASK_SOFT_FLOAT | MASK_MULHW},\n+\t {\"440fp\", PROCESSOR_PPC440, POWERPC_BASE_MASK | MASK_MULHW},\n \t {\"505\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK},\n \t {\"601\", PROCESSOR_PPC601,\n \t  MASK_POWER | POWERPC_BASE_MASK | MASK_MULTIPLE | MASK_STRING},\n@@ -1180,7 +1182,7 @@ rs6000_override_options (const char *default_cpu)\n     POWER_MASKS = MASK_POWER | MASK_POWER2 | MASK_MULTIPLE | MASK_STRING,\n     POWERPC_MASKS = (POWERPC_BASE_MASK | MASK_PPC_GPOPT\n \t\t     | MASK_PPC_GFXOPT | MASK_POWERPC64 | MASK_ALTIVEC\n-\t\t     | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND)\n+\t\t     | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND | MASK_MULHW)\n   };\n \n   rs6000_init_hard_regno_mode_ok ();"}, {"sha": "14e1fb80531f1ab7f7963fc4b513ac2b0817e66c", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 464, "deletions": 0, "changes": 464, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -878,6 +878,470 @@\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"4,8\")])\n \f\n+;; IBM 405 and 440 half-word multiplication operations.\n+\n+(define_insn \"*macchwc\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+        (compare:CC (plus:SI (mult:SI (ashiftrt:SI\n+                                       (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n+                                       (const_int 16))\n+                                      (sign_extend:SI\n+                                       (match_operand:HI 1 \"gpc_reg_operand\" \"r\")))\n+                             (match_operand:SI 4 \"gpc_reg_operand\" \"0\"))\n+                    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (plus:SI (mult:SI (ashiftrt:SI\n+                           (match_dup 2)\n+                           (const_int 16))\n+                          (sign_extend:SI\n+                           (match_dup 1)))\n+                 (match_dup 4)))]\n+  \"TARGET_MULHW\"\n+  \"macchw. %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*macchw\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (plus:SI (mult:SI (ashiftrt:SI\n+                           (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n+                           (const_int 16))\n+                          (sign_extend:SI\n+                           (match_operand:HI 1 \"gpc_reg_operand\" \"r\")))\n+                 (match_operand:SI 3 \"gpc_reg_operand\" \"0\")))]\n+  \"TARGET_MULHW\"\n+  \"macchw %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*macchwuc\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+        (compare:CC (plus:SI (mult:SI (lshiftrt:SI\n+                                       (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n+                                       (const_int 16))\n+                                      (zero_extend:SI\n+                                       (match_operand:HI 1 \"gpc_reg_operand\" \"r\")))\n+                             (match_operand:SI 4 \"gpc_reg_operand\" \"0\"))\n+                    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (plus:SI (mult:SI (lshiftrt:SI\n+                           (match_dup 2)\n+                           (const_int 16))\n+                          (zero_extend:SI\n+                           (match_dup 1)))\n+                 (match_dup 4)))]\n+  \"TARGET_MULHW\"\n+  \"macchwu. %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*macchwu\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (plus:SI (mult:SI (lshiftrt:SI\n+                           (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n+                           (const_int 16))\n+                          (zero_extend:SI\n+                           (match_operand:HI 1 \"gpc_reg_operand\" \"r\")))\n+                 (match_operand:SI 3 \"gpc_reg_operand\" \"0\")))]\n+  \"TARGET_MULHW\"\n+  \"macchwu %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*machhwc\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+        (compare:CC (plus:SI (mult:SI (ashiftrt:SI\n+                                       (match_operand:SI 1 \"gpc_reg_operand\" \"%r\")\n+                                       (const_int 16))\n+                                      (ashiftrt:SI\n+                                       (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n+                                       (const_int 16)))\n+                             (match_operand:SI 4 \"gpc_reg_operand\" \"0\"))\n+                    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (plus:SI (mult:SI (ashiftrt:SI\n+                           (match_dup 1)\n+                           (const_int 16))\n+                          (ashiftrt:SI\n+                           (match_dup 2)\n+                           (const_int 16)))\n+                 (match_dup 4)))]\n+  \"TARGET_MULHW\"\n+  \"machhw. %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*machhw\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (plus:SI (mult:SI (ashiftrt:SI\n+                           (match_operand:SI 1 \"gpc_reg_operand\" \"%r\")\n+                           (const_int 16))\n+                          (ashiftrt:SI\n+                           (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n+                           (const_int 16)))\n+                 (match_operand:SI 3 \"gpc_reg_operand\" \"0\")))]\n+  \"TARGET_MULHW\"\n+  \"machhw %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*machhwuc\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+        (compare:CC (plus:SI (mult:SI (lshiftrt:SI\n+                                       (match_operand:SI 1 \"gpc_reg_operand\" \"%r\")\n+                                       (const_int 16))\n+                                      (lshiftrt:SI\n+                                       (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n+                                       (const_int 16)))\n+                             (match_operand:SI 4 \"gpc_reg_operand\" \"0\"))\n+                    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (plus:SI (mult:SI (lshiftrt:SI\n+                           (match_dup 1)\n+                           (const_int 16))\n+                          (lshiftrt:SI\n+                           (match_dup 2)\n+                           (const_int 16)))\n+                 (match_dup 4)))]\n+  \"TARGET_MULHW\"\n+  \"machhwu. %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*machhwu\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (plus:SI (mult:SI (lshiftrt:SI\n+                           (match_operand:SI 1 \"gpc_reg_operand\" \"%r\")\n+                           (const_int 16))\n+                          (lshiftrt:SI\n+                           (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n+                           (const_int 16)))\n+                 (match_operand:SI 3 \"gpc_reg_operand\" \"0\")))]\n+  \"TARGET_MULHW\"\n+  \"machhwu %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*maclhwc\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+        (compare:CC (plus:SI (mult:SI (sign_extend:SI\n+                                       (match_operand:HI 1 \"gpc_reg_operand\" \"%r\"))\n+                                      (sign_extend:SI\n+                                       (match_operand:HI 2 \"gpc_reg_operand\" \"r\")))\n+                             (match_operand:SI 4 \"gpc_reg_operand\" \"0\"))\n+                    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (plus:SI (mult:SI (sign_extend:SI\n+                           (match_dup 1))\n+                          (sign_extend:SI\n+                           (match_dup 2)))\n+                 (match_dup 4)))]\n+  \"TARGET_MULHW\"\n+  \"maclhw. %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*maclhw\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (plus:SI (mult:SI (sign_extend:SI\n+                           (match_operand:HI 1 \"gpc_reg_operand\" \"%r\"))\n+                          (sign_extend:SI\n+                           (match_operand:HI 2 \"gpc_reg_operand\" \"r\")))\n+                 (match_operand:SI 3 \"gpc_reg_operand\" \"0\")))]\n+  \"TARGET_MULHW\"\n+  \"maclhw %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*maclhwuc\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+        (compare:CC (plus:SI (mult:SI (zero_extend:SI\n+                                       (match_operand:HI 1 \"gpc_reg_operand\" \"%r\"))\n+                                      (zero_extend:SI\n+                                       (match_operand:HI 2 \"gpc_reg_operand\" \"r\")))\n+                             (match_operand:SI 4 \"gpc_reg_operand\" \"0\"))\n+                    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (plus:SI (mult:SI (zero_extend:SI\n+                           (match_dup 1))\n+                          (zero_extend:SI\n+                           (match_dup 2)))\n+                 (match_dup 4)))]\n+  \"TARGET_MULHW\"\n+  \"maclhwu. %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*maclhwu\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (plus:SI (mult:SI (zero_extend:SI\n+                           (match_operand:HI 1 \"gpc_reg_operand\" \"%r\"))\n+                          (zero_extend:SI\n+                           (match_operand:HI 2 \"gpc_reg_operand\" \"r\")))\n+                 (match_operand:SI 3 \"gpc_reg_operand\" \"0\")))]\n+  \"TARGET_MULHW\"\n+  \"maclhwu %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*nmacchwc\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+        (compare:CC (minus:SI (match_operand:SI 4 \"gpc_reg_operand\" \"0\")\n+                              (mult:SI (ashiftrt:SI\n+                                        (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n+                                        (const_int 16))\n+                                       (sign_extend:SI\n+                                        (match_operand:HI 1 \"gpc_reg_operand\" \"r\"))))\n+                    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (minus:SI (match_dup 4)\n+                  (mult:SI (ashiftrt:SI\n+                            (match_dup 2)\n+                            (const_int 16))\n+                           (sign_extend:SI\n+                            (match_dup 1)))))]\n+  \"TARGET_MULHW\"\n+  \"nmacchw. %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*nmacchw\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (minus:SI (match_operand:SI 3 \"gpc_reg_operand\" \"0\")\n+                  (mult:SI (ashiftrt:SI\n+                            (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n+                            (const_int 16))\n+                           (sign_extend:SI\n+                            (match_operand:HI 1 \"gpc_reg_operand\" \"r\")))))]\n+  \"TARGET_MULHW\"\n+  \"nmacchw %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*nmachhwc\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+        (compare:CC (minus:SI (match_operand:SI 4 \"gpc_reg_operand\" \"0\")\n+                              (mult:SI (ashiftrt:SI\n+                                        (match_operand:SI 1 \"gpc_reg_operand\" \"%r\")\n+                                        (const_int 16))\n+                                       (ashiftrt:SI\n+                                        (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n+                                        (const_int 16))))\n+                    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (minus:SI (match_dup 4)\n+                  (mult:SI (ashiftrt:SI\n+                            (match_dup 1)\n+                            (const_int 16))\n+                           (ashiftrt:SI\n+                            (match_dup 2)\n+                            (const_int 16)))))]\n+  \"TARGET_MULHW\"\n+  \"nmachhw. %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*nmachhw\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (minus:SI (match_operand:SI 3 \"gpc_reg_operand\" \"0\")\n+                  (mult:SI (ashiftrt:SI\n+                            (match_operand:SI 1 \"gpc_reg_operand\" \"%r\")\n+                            (const_int 16))\n+                           (ashiftrt:SI\n+                            (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n+                            (const_int 16)))))]\n+  \"TARGET_MULHW\"\n+  \"nmachhw %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*nmaclhwc\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+        (compare:CC (minus:SI (match_operand:SI 4 \"gpc_reg_operand\" \"0\")\n+                              (mult:SI (sign_extend:SI\n+                                        (match_operand:HI 1 \"gpc_reg_operand\" \"%r\"))\n+                                       (sign_extend:SI\n+                                        (match_operand:HI 2 \"gpc_reg_operand\" \"r\"))))\n+                    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (minus:SI (match_dup 4)\n+                  (mult:SI (sign_extend:SI\n+                            (match_dup 1))\n+                           (sign_extend:SI\n+                            (match_dup 2)))))]\n+  \"TARGET_MULHW\"\n+  \"nmaclhw. %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*nmaclhw\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (minus:SI (match_operand:SI 3 \"gpc_reg_operand\" \"0\")\n+                  (mult:SI (sign_extend:SI\n+                            (match_operand:HI 1 \"gpc_reg_operand\" \"%r\"))\n+                           (sign_extend:SI\n+                            (match_operand:HI 2 \"gpc_reg_operand\" \"r\")))))]\n+  \"TARGET_MULHW\"\n+  \"nmaclhw %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*mulchwc\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+        (compare:CC (mult:SI (ashiftrt:SI\n+                              (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n+                              (const_int 16))\n+                             (sign_extend:SI\n+                              (match_operand:HI 1 \"gpc_reg_operand\" \"r\")))\n+                    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (mult:SI (ashiftrt:SI\n+                  (match_dup 2)\n+                  (const_int 16))\n+                 (sign_extend:SI\n+                  (match_dup 1))))]\n+  \"TARGET_MULHW\"\n+  \"mulchw. %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*mulchw\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (mult:SI (ashiftrt:SI\n+                  (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n+                  (const_int 16))\n+                 (sign_extend:SI\n+                  (match_operand:HI 1 \"gpc_reg_operand\" \"r\"))))]\n+  \"TARGET_MULHW\"\n+  \"mulchw %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*mulchwuc\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+        (compare:CC (mult:SI (lshiftrt:SI\n+                              (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n+                              (const_int 16))\n+                             (zero_extend:SI\n+                              (match_operand:HI 1 \"gpc_reg_operand\" \"r\")))\n+                    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (mult:SI (lshiftrt:SI\n+                  (match_dup 2)\n+                  (const_int 16))\n+                 (zero_extend:SI\n+                  (match_dup 1))))]\n+  \"TARGET_MULHW\"\n+  \"mulchwu. %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*mulchwu\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (mult:SI (lshiftrt:SI\n+                  (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n+                  (const_int 16))\n+                 (zero_extend:SI\n+                  (match_operand:HI 1 \"gpc_reg_operand\" \"r\"))))]\n+  \"TARGET_MULHW\"\n+  \"mulchwu %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*mulhhwc\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+        (compare:CC (mult:SI (ashiftrt:SI\n+                              (match_operand:SI 1 \"gpc_reg_operand\" \"%r\")\n+                              (const_int 16))\n+                             (ashiftrt:SI\n+                              (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n+                              (const_int 16)))\n+                    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (mult:SI (ashiftrt:SI\n+                  (match_dup 1)\n+                  (const_int 16))\n+                 (ashiftrt:SI\n+                  (match_dup 2)\n+                  (const_int 16))))]\n+  \"TARGET_MULHW\"\n+  \"mulhhw. %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*mulhhw\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (mult:SI (ashiftrt:SI\n+                  (match_operand:SI 1 \"gpc_reg_operand\" \"%r\")\n+                  (const_int 16))\n+                 (ashiftrt:SI\n+                  (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n+                  (const_int 16))))]\n+  \"TARGET_MULHW\"\n+  \"mulhhw %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*mulhhwuc\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+        (compare:CC (mult:SI (lshiftrt:SI\n+                              (match_operand:SI 1 \"gpc_reg_operand\" \"%r\")\n+                              (const_int 16))\n+                             (lshiftrt:SI\n+                              (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n+                              (const_int 16)))\n+                    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (mult:SI (lshiftrt:SI\n+                  (match_dup 1)\n+                  (const_int 16))\n+                 (lshiftrt:SI\n+                  (match_dup 2)\n+                  (const_int 16))))]\n+  \"TARGET_MULHW\"\n+  \"mulhhwu. %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*mulhhwu\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (mult:SI (lshiftrt:SI\n+                  (match_operand:SI 1 \"gpc_reg_operand\" \"%r\")\n+                  (const_int 16))\n+                 (lshiftrt:SI\n+                  (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n+                  (const_int 16))))]\n+  \"TARGET_MULHW\"\n+  \"mulhhwu %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*mullhwc\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+        (compare:CC (mult:SI (sign_extend:SI\n+                              (match_operand:HI 1 \"gpc_reg_operand\" \"%r\"))\n+                             (sign_extend:SI\n+                              (match_operand:HI 2 \"gpc_reg_operand\" \"r\")))\n+                    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (mult:SI (sign_extend:SI\n+                  (match_dup 1))\n+                 (sign_extend:SI\n+                  (match_dup 2))))]\n+  \"TARGET_MULHW\"\n+  \"mullhw. %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*mullhw\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (mult:SI (sign_extend:SI\n+                  (match_operand:HI 1 \"gpc_reg_operand\" \"%r\"))\n+                 (sign_extend:SI\n+                  (match_operand:HI 2 \"gpc_reg_operand\" \"r\"))))]\n+  \"TARGET_MULHW\"\n+  \"mullhw %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*mullhwuc\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+        (compare:CC (mult:SI (zero_extend:SI\n+                              (match_operand:HI 1 \"gpc_reg_operand\" \"%r\"))\n+                             (zero_extend:SI\n+                              (match_operand:HI 2 \"gpc_reg_operand\" \"r\")))\n+                    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (mult:SI (zero_extend:SI\n+                  (match_dup 1))\n+                 (zero_extend:SI\n+                  (match_dup 2))))]\n+  \"TARGET_MULHW\"\n+  \"mullhwu. %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\n+(define_insn \"*mullhwu\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (mult:SI (zero_extend:SI\n+                  (match_operand:HI 1 \"gpc_reg_operand\" \"%r\"))\n+                 (zero_extend:SI\n+                  (match_operand:HI 2 \"gpc_reg_operand\" \"r\"))))]\n+  \"TARGET_MULHW\"\n+  \"mullhwu %0, %1, %2\"\n+  [(set_attr \"type\" \"imul3\")])\n+\f\n (define_split\n   [(set (match_operand:CC 2 \"cc_reg_not_cr0_operand\" \"\")\n \t(compare:CC (sign_extend:SI (match_operand:HI 1 \"gpc_reg_operand\" \"\"))"}, {"sha": "d50cc3ae6011714b2d32b3e0de1ac3ebb85855b6", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -68,6 +68,10 @@ maltivec\n Target Report Mask(ALTIVEC)\n Use AltiVec instructions\n \n+mmulhw\n+Target Report Mask(MULHW)\n+Use 4xx half-word multiply instructions\n+\n mmultiple\n Target Report Mask(MULTIPLE)\n Generate load/store multiple instructions"}, {"sha": "c8a72c4b3dcd20de4f4a48dd53ff24cf72bc680d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -659,6 +659,7 @@ See RS/6000 and PowerPC Options.\n -mspe -mno-spe @gol\n -mspe=yes  -mspe=no @gol\n -mvrsave -mno-vrsave @gol\n+-mmulhw -mno-mulhw @gol\n -mfloat-gprs=yes  -mfloat-gprs=no -mfloat-gprs=single -mfloat-gprs=double @gol\n -mprototype  -mno-prototype @gol\n -msim  -mmvme  -mads  -myellowknife  -memb  -msdata @gol\n@@ -10974,7 +10975,8 @@ following options: @option{-maltivec}, @option{-mfprnd},\n @option{-mhard-float}, @option{-mmfcrf}, @option{-mmultiple},\n @option{-mnew-mnemonics}, @option{-mpopcntb}, @option{-mpower},\n @option{-mpower2}, @option{-mpowerpc64}, @option{-mpowerpc-gpopt},\n-@option{-mpowerpc-gfxopt}, @option{-mstring}.  The particular options\n+@option{-mpowerpc-gfxopt}, @option{-mstring}, @option{-mmulhw}.\n+The particular options\n set for any particular CPU will vary between compiler versions,\n depending on what setting seems to produce optimal code for that CPU;\n it doesn't necessarily reflect the actual hardware's capabilities.  If\n@@ -11236,6 +11238,15 @@ Generate code that uses (does not use) the floating point multiply and\n accumulate instructions.  These instructions are generated by default if\n hardware floating is used.\n \n+@item -mmulhw\n+@itemx -mno-mulhw\n+@opindex mmulhw\n+@opindex mno-mulhw\n+Generate code that uses (does not use) the half-word multiply and\n+multiply-accumulate instructions on the IBM 405 and 440 processors.\n+These instructions are generated by default when targetting those\n+processors.\n+\n @item -mno-bit-align\n @itemx -mbit-align\n @opindex mno-bit-align"}, {"sha": "40b1ecaa0b5d63a9f13b98d274f17424fa86fe6c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -1,3 +1,66 @@\n+2005-11-22  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.target/powerpc/405-macchw-1.c,\n+\tgcc.target/powerpc/405-macchw-2.c,\n+\tgcc.target/powerpc/405-macchwu-1.c,\n+\tgcc.target/powerpc/405-macchwu-2.c,\n+\tgcc.target/powerpc/405-machhw-1.c,\n+\tgcc.target/powerpc/405-machhw-2.c,\n+\tgcc.target/powerpc/405-machhwu-1.c,\n+\tgcc.target/powerpc/405-machhwu-2.c,\n+\tgcc.target/powerpc/405-maclhw-1.c,\n+\tgcc.target/powerpc/405-maclhw-2.c,\n+\tgcc.target/powerpc/405-maclhwu-1.c,\n+\tgcc.target/powerpc/405-maclhwu-2.c,\n+\tgcc.target/powerpc/405-mulchw-1.c,\n+\tgcc.target/powerpc/405-mulchw-2.c,\n+\tgcc.target/powerpc/405-mulchwu-1.c,\n+\tgcc.target/powerpc/405-mulchwu-2.c,\n+\tgcc.target/powerpc/405-mulhhw-1.c,\n+\tgcc.target/powerpc/405-mulhhw-2.c,\n+\tgcc.target/powerpc/405-mulhhwu-1.c,\n+\tgcc.target/powerpc/405-mulhhwu-2.c,\n+\tgcc.target/powerpc/405-mullhw-1.c,\n+\tgcc.target/powerpc/405-mullhw-2.c,\n+\tgcc.target/powerpc/405-mullhwu-1.c,\n+\tgcc.target/powerpc/405-mullhwu-2.c,\n+\tgcc.target/powerpc/405-nmacchw-1.c,\n+\tgcc.target/powerpc/405-nmacchw-2.c,\n+\tgcc.target/powerpc/405-nmachhw-1.c,\n+\tgcc.target/powerpc/405-nmachhw-2.c,\n+\tgcc.target/powerpc/405-nmaclhw-1.c,\n+\tgcc.target/powerpc/405-nmaclhw-2.c,\n+\tgcc.target/powerpc/440-macchw-1.c,\n+\tgcc.target/powerpc/440-macchw-2.c,\n+\tgcc.target/powerpc/440-macchwu-1.c,\n+\tgcc.target/powerpc/440-macchwu-2.c,\n+\tgcc.target/powerpc/440-machhw-1.c,\n+\tgcc.target/powerpc/440-machhw-2.c,\n+\tgcc.target/powerpc/440-machhwu-1.c,\n+\tgcc.target/powerpc/440-machhwu-2.c,\n+\tgcc.target/powerpc/440-maclhw-1.c,\n+\tgcc.target/powerpc/440-maclhw-2.c,\n+\tgcc.target/powerpc/440-maclhwu-1.c,\n+\tgcc.target/powerpc/440-maclhwu-2.c,\n+\tgcc.target/powerpc/440-mulchw-1.c,\n+\tgcc.target/powerpc/440-mulchw-2.c,\n+\tgcc.target/powerpc/440-mulchwu-1.c,\n+\tgcc.target/powerpc/440-mulchwu-2.c,\n+\tgcc.target/powerpc/440-mulhhw-1.c,\n+\tgcc.target/powerpc/440-mulhhw-2.c,\n+\tgcc.target/powerpc/440-mulhhwu-1.c,\n+\tgcc.target/powerpc/440-mulhhwu-2.c,\n+\tgcc.target/powerpc/440-mullhw-1.c,\n+\tgcc.target/powerpc/440-mullhw-2.c,\n+\tgcc.target/powerpc/440-mullhwu-1.c,\n+\tgcc.target/powerpc/440-mullhwu-2.c,\n+\tgcc.target/powerpc/440-nmacchw-1.c,\n+\tgcc.target/powerpc/440-nmacchw-2.c,\n+\tgcc.target/powerpc/440-nmachhw-1.c,\n+\tgcc.target/powerpc/440-nmachhw-2.c,\n+\tgcc.target/powerpc/440-nmaclhw-1.c,\n+\tgcc.target/powerpc/440-nmaclhw-2.c: New tests.\n+\n 2005-11-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/24774"}, {"sha": "1add3c98016a93875d218ad04b336a83d17632d3", "filename": "gcc/testsuite/gcc.target/powerpc/405-macchw-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-macchw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-macchw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-macchw-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of macchw on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"macchw \" } } */\n+\n+int\n+f(int a, int b, int c)\n+{\n+  a += (short)b * (c >> 16);\n+  return a;\n+}"}, {"sha": "221c30e1e60a9117bf6f71ce1e377aac89055800", "filename": "gcc/testsuite/gcc.target/powerpc/405-macchw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-macchw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-macchw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-macchw-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of macchw. on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"macchw\\\\. \" } } */\n+\n+int\n+f(int a, int b, int c)\n+{\n+  a += (short)b * (c >> 16);\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "897d3494b40e6bd9e1a7a41eb09ed316e0f16acb", "filename": "gcc/testsuite/gcc.target/powerpc/405-macchwu-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-macchwu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-macchwu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-macchwu-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of macchwu on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"macchwu \" } } */\n+\n+unsigned int\n+f(unsigned int a, unsigned int b, unsigned int c)\n+{\n+  a += (unsigned short)b * (c >> 16);\n+  return a;\n+}"}, {"sha": "f9bdf1e2b9560d90aecb645ec877204853feceaa", "filename": "gcc/testsuite/gcc.target/powerpc/405-macchwu-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-macchwu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-macchwu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-macchwu-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of macchwu. on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"macchwu\\\\. \" } } */\n+\n+unsigned int\n+f(unsigned int a, unsigned int b, unsigned int c)\n+{\n+  a += (unsigned short)b * (c >> 16);\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "753fe9a0f91069d8bc9ba3bca3f02953e0d69e0f", "filename": "gcc/testsuite/gcc.target/powerpc/405-machhw-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-machhw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-machhw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-machhw-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of machhw on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"machhw \" } } */\n+\n+int\n+f(int a, int b, int c)\n+{\n+  a += (b >> 16) * (c >> 16);\n+  return a;\n+}"}, {"sha": "9e79d3019b68695bd0bad29511a54fc3b5c33a58", "filename": "gcc/testsuite/gcc.target/powerpc/405-machhw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-machhw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-machhw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-machhw-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of machhw. on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"machhw\\\\. \" } } */\n+\n+int\n+f(int a, int b, int c)\n+{\n+  a += (b >> 16) * (c >> 16);\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "48dcfc579a16be8ce68ca29f4bb6446ea02b1c55", "filename": "gcc/testsuite/gcc.target/powerpc/405-machhwu-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-machhwu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-machhwu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-machhwu-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of machhwu on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"machhwu \" } } */\n+\n+unsigned int\n+f(unsigned int a, unsigned int b, unsigned int c)\n+{\n+  a += (b >> 16) * (c >> 16);\n+  return a;\n+}"}, {"sha": "b73f7eacd3d72c0d4814e0a9c1e123fcfbcdf0a5", "filename": "gcc/testsuite/gcc.target/powerpc/405-machhwu-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-machhwu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-machhwu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-machhwu-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of machhwu. on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"machhwu\\\\. \" } } */\n+\n+unsigned int\n+f(unsigned int a, unsigned int b, unsigned int c)\n+{\n+  a += (b >> 16) * (c >> 16);\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "a99f31ea7b75f63532fc46e9184b826a973f4f60", "filename": "gcc/testsuite/gcc.target/powerpc/405-maclhw-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-maclhw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-maclhw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-maclhw-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of maclhw on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"maclhw \" } } */\n+\n+int\n+f(int a, int b, int c)\n+{\n+  a += (short)b * (short)c;\n+  return a;\n+}"}, {"sha": "b7950abc36069e9ddcbc0e0984c8aea71a23e492", "filename": "gcc/testsuite/gcc.target/powerpc/405-maclhw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-maclhw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-maclhw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-maclhw-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of maclhw. on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"maclhw\\\\. \" } } */\n+\n+int\n+f(int a, int b, int c)\n+{\n+  a += (short)b * (short)c;\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "24a249e4b79853bf41643df9883d066f346fd1f5", "filename": "gcc/testsuite/gcc.target/powerpc/405-maclhwu-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-maclhwu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-maclhwu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-maclhwu-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of maclhwu on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"maclhwu \" } } */\n+\n+unsigned int\n+f(unsigned int a, unsigned int b, unsigned int c)\n+{\n+  a += (unsigned short)b * (unsigned short)c;\n+  return a;\n+}"}, {"sha": "79fdb2a2b60371bf8336d3b1458edf25b9dcb62f", "filename": "gcc/testsuite/gcc.target/powerpc/405-maclhwu-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-maclhwu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-maclhwu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-maclhwu-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of maclhwu. on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"maclhwu\\\\. \" } } */\n+\n+unsigned int\n+f(unsigned int a, unsigned int b, unsigned int c)\n+{\n+  a += (unsigned short)b * (unsigned short)c;\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "e3ab225745b84fb39fffbc6a10f6896de491b503", "filename": "gcc/testsuite/gcc.target/powerpc/405-mulchw-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mulchw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mulchw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mulchw-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of mulchw on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"mulchw \" } } */\n+\n+int\n+f(int b, int c)\n+{\n+  int a = (short)b * (c >> 16);\n+  return a;\n+}"}, {"sha": "6c48164961469fecca1017154932c214e0eb6d65", "filename": "gcc/testsuite/gcc.target/powerpc/405-mulchw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mulchw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mulchw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mulchw-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of mulchw. on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"mulchw\\\\. \" } } */\n+\n+int\n+f(int b, int c)\n+{\n+  int a = (short)b * (c >> 16);\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "ae3a1a028acdaec6a1655cc0ca6f67ec8a834ac0", "filename": "gcc/testsuite/gcc.target/powerpc/405-mulchwu-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mulchwu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mulchwu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mulchwu-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of mulchwu on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"mulchwu \" } } */\n+\n+int\n+f(unsigned int b, unsigned int c)\n+{\n+  unsigned int a = (unsigned short)b * (c >> 16);\n+  return a;\n+}"}, {"sha": "7b0faa5a2ac2890d248da43f38b286f8733ecce2", "filename": "gcc/testsuite/gcc.target/powerpc/405-mulchwu-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mulchwu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mulchwu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mulchwu-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of mulchwu. on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"mulchwu\\\\. \" } } */\n+\n+int\n+f(unsigned int b, unsigned int c)\n+{\n+  unsigned int a = (unsigned short)b * (c >> 16);\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "f151e28fcfaa90bd2cb4c5522e263fe69031fa29", "filename": "gcc/testsuite/gcc.target/powerpc/405-mulhhw-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mulhhw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mulhhw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mulhhw-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of mulhhw on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"mulhhw \" } } */\n+\n+int\n+f(int b, int c)\n+{\n+  int a = (b >> 16) * (c >> 16);\n+  return a;\n+}"}, {"sha": "9be7eaf48039519eeb2647e538b70a014a14ee62", "filename": "gcc/testsuite/gcc.target/powerpc/405-mulhhw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mulhhw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mulhhw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mulhhw-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of mulhhw. on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"mulhhw\\\\. \" } } */\n+\n+int\n+f(int b, int c)\n+{\n+  int a = (b >> 16) * (c >> 16);\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "3d7871aac3f0749dbe0a277538e2928f1f3aa613", "filename": "gcc/testsuite/gcc.target/powerpc/405-mulhhwu-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mulhhwu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mulhhwu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mulhhwu-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of mulhhwu on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"mulhhwu \" } } */\n+\n+unsigned int\n+f(unsigned int b, unsigned int c)\n+{\n+  unsigned int a = (b >> 16) * (c >> 16);\n+  return a;\n+}"}, {"sha": "166a60801d404db5b41f3e1887188e9a5f80677b", "filename": "gcc/testsuite/gcc.target/powerpc/405-mulhhwu-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mulhhwu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mulhhwu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mulhhwu-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of mulhhwu. on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"mulhhwu\\\\. \" } } */\n+\n+unsigned int\n+f(unsigned int b, unsigned int c)\n+{\n+  unsigned int a = (b >> 16) * (c >> 16);\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "beab7ebc40d498409a007f92f979d6bafbab5a7d", "filename": "gcc/testsuite/gcc.target/powerpc/405-mullhw-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mullhw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mullhw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mullhw-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of mullhw on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"mullhw \" } } */\n+\n+int\n+f(int b, int c)\n+{\n+  int a = (short)b * (short)c;\n+  return a;\n+}"}, {"sha": "921a3b6dd2666e967c35b25d8b8a71fc6bb8919e", "filename": "gcc/testsuite/gcc.target/powerpc/405-mullhw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mullhw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mullhw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mullhw-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of mullhw. on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"mullhw\\\\. \" } } */\n+\n+int\n+f(int b, int c)\n+{\n+  int a = (short)b * (short)c;\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "f363056391f2c4574690f2af872763500fd47940", "filename": "gcc/testsuite/gcc.target/powerpc/405-mullhwu-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mullhwu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mullhwu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mullhwu-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of mullhwu on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"mullhwu \" } } */\n+\n+unsigned int\n+f(unsigned int b, unsigned int c)\n+{\n+  unsigned int a = (unsigned short)b * (unsigned short)c;\n+  return a;\n+}"}, {"sha": "6e4d42e1038570628737169f2a19704d326a458c", "filename": "gcc/testsuite/gcc.target/powerpc/405-mullhwu-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mullhwu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mullhwu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-mullhwu-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of mullhwu. on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"mullhwu\\\\. \" } } */\n+\n+unsigned int\n+f(unsigned int b, unsigned int c)\n+{\n+  unsigned int a = (unsigned short)b * (unsigned short)c;\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "e5a42d53dc4175e1074e1538945d4fc93b727bd0", "filename": "gcc/testsuite/gcc.target/powerpc/405-nmacchw-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-nmacchw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-nmacchw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-nmacchw-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of nmacchw on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"nmacchw \" } } */\n+\n+int\n+f(int a, int b, int c)\n+{\n+  a -= (short)b * (c >> 16);\n+  return a;\n+}"}, {"sha": "7ac8767a75fefa1a11b918fb6f29ea3b4a08f93a", "filename": "gcc/testsuite/gcc.target/powerpc/405-nmacchw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-nmacchw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-nmacchw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-nmacchw-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of nmacchw. on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"nmacchw\\\\. \" } } */\n+\n+int\n+f(int a, int b, int c)\n+{\n+  a -= (short)b * (c >> 16);\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "6f1e2aeb346cb0ba741999acdd92a00a1f474857", "filename": "gcc/testsuite/gcc.target/powerpc/405-nmachhw-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-nmachhw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-nmachhw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-nmachhw-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of nmachhw on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"nmachhw \" } } */\n+\n+int\n+f(int a, int b, int c)\n+{\n+  a -= (b >> 16) * (c >> 16);\n+  return a;\n+}"}, {"sha": "aab8ea290bcd90f1d3d330da7db2e288d771e29c", "filename": "gcc/testsuite/gcc.target/powerpc/405-nmachhw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-nmachhw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-nmachhw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-nmachhw-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of nmachhw. on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"nmachhw\\\\. \" } } */\n+\n+int\n+f(int a, int b, int c)\n+{\n+  a -= (b >> 16) * (c >> 16);\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "f90223d27ed7d54c602440996241aac93f932c82", "filename": "gcc/testsuite/gcc.target/powerpc/405-nmaclhw-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-nmaclhw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-nmaclhw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-nmaclhw-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of nmaclhw on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"nmaclhw \" } } */\n+\n+int\n+f(int a, int b, int c)\n+{\n+  a -= (short)b * (short)c;\n+  return a;\n+}"}, {"sha": "d191de38e7046328ebfe3c900ea8612e90adf904", "filename": "gcc/testsuite/gcc.target/powerpc/405-nmaclhw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-nmaclhw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-nmaclhw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F405-nmaclhw-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of nmaclhw. on 405.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=405\" } */\n+\n+/* { dg-final { scan-assembler \"nmaclhw\\\\. \" } } */\n+\n+int\n+f(int a, int b, int c)\n+{\n+  a -= (short)b * (short)c;\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "464eff43ba0814cbf35769f6017e7355785d5ca4", "filename": "gcc/testsuite/gcc.target/powerpc/440-macchw-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-macchw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-macchw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-macchw-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of macchw on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"macchw \" } } */\n+\n+int\n+f(int a, int b, int c)\n+{\n+  a += (short)b * (c >> 16);\n+  return a;\n+}"}, {"sha": "bfe55d486d9ac70a1d84953d3484ad84d902835e", "filename": "gcc/testsuite/gcc.target/powerpc/440-macchw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-macchw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-macchw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-macchw-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of macchw. on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"macchw\\\\. \" } } */\n+\n+int\n+f(int a, int b, int c)\n+{\n+  a += (short)b * (c >> 16);\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "1db6c6e710f302aa377aa4d633eb6eaea116a2d4", "filename": "gcc/testsuite/gcc.target/powerpc/440-macchwu-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-macchwu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-macchwu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-macchwu-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of macchwu on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"macchwu \" } } */\n+\n+unsigned int\n+f(unsigned int a, unsigned int b, unsigned int c)\n+{\n+  a += (unsigned short)b * (c >> 16);\n+  return a;\n+}"}, {"sha": "eb0b9251c84a559fe0d397aa3cd07677f07c1d8c", "filename": "gcc/testsuite/gcc.target/powerpc/440-macchwu-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-macchwu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-macchwu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-macchwu-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of macchwu. on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"macchwu\\\\. \" } } */\n+\n+unsigned int\n+f(unsigned int a, unsigned int b, unsigned int c)\n+{\n+  a += (unsigned short)b * (c >> 16);\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "78aac5cb6e4adaee5d80b49fe41e6bce5ad652bc", "filename": "gcc/testsuite/gcc.target/powerpc/440-machhw-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-machhw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-machhw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-machhw-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of machhw on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"machhw \" } } */\n+\n+int\n+f(int a, int b, int c)\n+{\n+  a += (b >> 16) * (c >> 16);\n+  return a;\n+}"}, {"sha": "caf05eb4197f0c915d8c90748e017b9bca8d4337", "filename": "gcc/testsuite/gcc.target/powerpc/440-machhw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-machhw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-machhw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-machhw-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of machhw. on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"machhw\\\\. \" } } */\n+\n+int\n+f(int a, int b, int c)\n+{\n+  a += (b >> 16) * (c >> 16);\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "7f1cab988e7912b2f0e7789ba000780d3731d0dc", "filename": "gcc/testsuite/gcc.target/powerpc/440-machhwu-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-machhwu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-machhwu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-machhwu-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of machhwu on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"machhwu \" } } */\n+\n+unsigned int\n+f(unsigned int a, unsigned int b, unsigned int c)\n+{\n+  a += (b >> 16) * (c >> 16);\n+  return a;\n+}"}, {"sha": "88a23087bd9befdcf57f2528c03e758a0eb1c831", "filename": "gcc/testsuite/gcc.target/powerpc/440-machhwu-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-machhwu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-machhwu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-machhwu-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of machhwu. on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"machhwu\\\\. \" } } */\n+\n+unsigned int\n+f(unsigned int a, unsigned int b, unsigned int c)\n+{\n+  a += (b >> 16) * (c >> 16);\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "327d2fbeafb6c5de91e37bf8341f904b9d757f63", "filename": "gcc/testsuite/gcc.target/powerpc/440-maclhw-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-maclhw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-maclhw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-maclhw-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of maclhw on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"maclhw \" } } */\n+\n+int\n+f(int a, int b, int c)\n+{\n+  a += (short)b * (short)c;\n+  return a;\n+}"}, {"sha": "3e92d7ac858ea2513f130ecff554fe7726e487ad", "filename": "gcc/testsuite/gcc.target/powerpc/440-maclhw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-maclhw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-maclhw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-maclhw-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of maclhw. on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"maclhw\\\\. \" } } */\n+\n+int\n+f(int a, int b, int c)\n+{\n+  a += (short)b * (short)c;\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "248e54e8b3458a7fee76e748154ef9807f4a5ba7", "filename": "gcc/testsuite/gcc.target/powerpc/440-maclhwu-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-maclhwu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-maclhwu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-maclhwu-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of maclhwu on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"maclhwu \" } } */\n+\n+unsigned int\n+f(unsigned int a, unsigned int b, unsigned int c)\n+{\n+  a += (unsigned short)b * (unsigned short)c;\n+  return a;\n+}"}, {"sha": "c27988e2bf417fed67e04ae7af49e43c474355bf", "filename": "gcc/testsuite/gcc.target/powerpc/440-maclhwu-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-maclhwu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-maclhwu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-maclhwu-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of maclhwu. on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"maclhwu\\\\. \" } } */\n+\n+unsigned int\n+f(unsigned int a, unsigned int b, unsigned int c)\n+{\n+  a += (unsigned short)b * (unsigned short)c;\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "14b11e2f1d31135495e93b76c34a6eee5bd6abaf", "filename": "gcc/testsuite/gcc.target/powerpc/440-mulchw-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mulchw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mulchw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mulchw-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of mulchw on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"mulchw \" } } */\n+\n+int\n+f(int b, int c)\n+{\n+  int a = (short)b * (c >> 16);\n+  return a;\n+}"}, {"sha": "d09561cb155efe9fbcdb6221003dd2698829375a", "filename": "gcc/testsuite/gcc.target/powerpc/440-mulchw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mulchw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mulchw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mulchw-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of mulchw. on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"mulchw\\\\. \" } } */\n+\n+int\n+f(int b, int c)\n+{\n+  int a = (short)b * (c >> 16);\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "44bb325ce0e73de5ce9ce6894f40530e773bf83c", "filename": "gcc/testsuite/gcc.target/powerpc/440-mulchwu-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mulchwu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mulchwu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mulchwu-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of mulchwu on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"mulchwu \" } } */\n+\n+int\n+f(unsigned int b, unsigned int c)\n+{\n+  unsigned int a = (unsigned short)b * (c >> 16);\n+  return a;\n+}"}, {"sha": "cc72f6193559651a1f179535d8c4c91295ca4ce9", "filename": "gcc/testsuite/gcc.target/powerpc/440-mulchwu-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mulchwu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mulchwu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mulchwu-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of mulchwu. on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"mulchwu\\\\. \" } } */\n+\n+int\n+f(unsigned int b, unsigned int c)\n+{\n+  unsigned int a = (unsigned short)b * (c >> 16);\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "4b27396edaf6f4bafc09f03b80a419872ee0b721", "filename": "gcc/testsuite/gcc.target/powerpc/440-mulhhw-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mulhhw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mulhhw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mulhhw-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of mulhhw on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"mulhhw \" } } */\n+\n+int\n+f(int b, int c)\n+{\n+  int a = (b >> 16) * (c >> 16);\n+  return a;\n+}"}, {"sha": "4cfb7ebf01c45aaa55ce8b4d1ae1fb5db9d4e959", "filename": "gcc/testsuite/gcc.target/powerpc/440-mulhhw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mulhhw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mulhhw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mulhhw-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of mulhhw. on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"mulhhw\\\\. \" } } */\n+\n+int\n+f(int b, int c)\n+{\n+  int a = (b >> 16) * (c >> 16);\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "b255a9bdf0bdbb44054104ac80b1e742962fa407", "filename": "gcc/testsuite/gcc.target/powerpc/440-mulhhwu-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mulhhwu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mulhhwu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mulhhwu-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of mulhhwu on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"mulhhwu \" } } */\n+\n+unsigned int\n+f(unsigned int b, unsigned int c)\n+{\n+  unsigned int a = (b >> 16) * (c >> 16);\n+  return a;\n+}"}, {"sha": "e82bbc6787c8f3da844ef3962abdc54465b89d7e", "filename": "gcc/testsuite/gcc.target/powerpc/440-mulhhwu-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mulhhwu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mulhhwu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mulhhwu-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of mulhhwu. on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"mulhhwu\\\\. \" } } */\n+\n+unsigned int\n+f(unsigned int b, unsigned int c)\n+{\n+  unsigned int a = (b >> 16) * (c >> 16);\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "91088575321edbf20b9ceb3a37c9034c93fd6b77", "filename": "gcc/testsuite/gcc.target/powerpc/440-mullhw-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mullhw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mullhw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mullhw-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of mullhw on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"mullhw \" } } */\n+\n+int\n+f(int b, int c)\n+{\n+  int a = (short)b * (short)c;\n+  return a;\n+}"}, {"sha": "023eb718785da337a3485f3c57cc20de3c245843", "filename": "gcc/testsuite/gcc.target/powerpc/440-mullhw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mullhw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mullhw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mullhw-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of mullhw. on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"mullhw\\\\. \" } } */\n+\n+int\n+f(int b, int c)\n+{\n+  int a = (short)b * (short)c;\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "3636e4c4e8082977b4cdfd50fb347b41a3f451ea", "filename": "gcc/testsuite/gcc.target/powerpc/440-mullhwu-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mullhwu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mullhwu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mullhwu-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of mullhwu on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"mullhwu \" } } */\n+\n+unsigned int\n+f(unsigned int b, unsigned int c)\n+{\n+  unsigned int a = (unsigned short)b * (unsigned short)c;\n+  return a;\n+}"}, {"sha": "93bc9f3901a3b06738111ec4b8510c88a853ca68", "filename": "gcc/testsuite/gcc.target/powerpc/440-mullhwu-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mullhwu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mullhwu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-mullhwu-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of mullhwu. on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"mullhwu\\\\. \" } } */\n+\n+unsigned int\n+f(unsigned int b, unsigned int c)\n+{\n+  unsigned int a = (unsigned short)b * (unsigned short)c;\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "2fc78268814d0b843fd1b380f57c6d7ac242eff5", "filename": "gcc/testsuite/gcc.target/powerpc/440-nmacchw-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-nmacchw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-nmacchw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-nmacchw-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of nmacchw on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"nmacchw \" } } */\n+\n+int\n+f(int a, int b, int c)\n+{\n+  a -= (short)b * (c >> 16);\n+  return a;\n+}"}, {"sha": "3931ec53017c783ce0c7bbdd14b076e0e29a255b", "filename": "gcc/testsuite/gcc.target/powerpc/440-nmacchw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-nmacchw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-nmacchw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-nmacchw-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of nmacchw. on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"nmacchw\\\\. \" } } */\n+\n+int\n+f(int a, int b, int c)\n+{\n+  a -= (short)b * (c >> 16);\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "62362d03c2cdefede01de80f1f9f99e9a1788505", "filename": "gcc/testsuite/gcc.target/powerpc/440-nmachhw-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-nmachhw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-nmachhw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-nmachhw-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of nmachhw on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"nmachhw \" } } */\n+\n+int\n+f(int a, int b, int c)\n+{\n+  a -= (b >> 16) * (c >> 16);\n+  return a;\n+}"}, {"sha": "22dac059cc5e67dcd2ac9175fc2e668638446cce", "filename": "gcc/testsuite/gcc.target/powerpc/440-nmachhw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-nmachhw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-nmachhw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-nmachhw-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of nmachhw. on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"nmachhw\\\\. \" } } */\n+\n+int\n+f(int a, int b, int c)\n+{\n+  a -= (b >> 16) * (c >> 16);\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}, {"sha": "1fe13b137175fbca480b9862d14dd6b8f9ed864e", "filename": "gcc/testsuite/gcc.target/powerpc/440-nmaclhw-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-nmaclhw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-nmaclhw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-nmaclhw-1.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,14 @@\n+/* Test generation of nmaclhw on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"nmaclhw \" } } */\n+\n+int\n+f(int a, int b, int c)\n+{\n+  a -= (short)b * (short)c;\n+  return a;\n+}"}, {"sha": "f2abc4ccf87ff795aa09058a59a11c7f9c51b0ae", "filename": "gcc/testsuite/gcc.target/powerpc/440-nmaclhw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-nmaclhw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131aeb82d18736392c992c79c2184b2ad16c6190/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-nmaclhw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2F440-nmaclhw-2.c?ref=131aeb82d18736392c992c79c2184b2ad16c6190", "patch": "@@ -0,0 +1,16 @@\n+/* Test generation of nmaclhw. on 440.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mcpu=440\" } */\n+\n+/* { dg-final { scan-assembler \"nmaclhw\\\\. \" } } */\n+\n+int\n+f(int a, int b, int c)\n+{\n+  a -= (short)b * (short)c;\n+  if (!a)\n+    return 10;\n+  return a;\n+}"}]}