{"sha": "0da4c1ea8461992bef38a5ad49e9e5e67fd5a495", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRhNGMxZWE4NDYxOTkyYmVmMzhhNWFkNDllOWU1ZTY3ZmQ1YTQ5NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@nildram.co.uk", "date": "2007-09-27T20:17:17Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-09-27T20:17:17Z"}, "message": "mips.h (PTF_AVOID_BRANCHLIKELY): New macro.\n\ngcc/\n\t* config/mips/mips.h (PTF_AVOID_BRANCHLIKELY): New macro.\n\t(mips_cpu_info): Add tune_flags.\n\t(GENERATE_BRANCHLIKELY): Remove TARGET_SR71K check.\n\t* config/mips/mips.c (mips_cpu_info_table): Add tune_flags fields.\n\tRemove end marker.\n\t(override_options): Remove deprecation code.  Use branch-likely\n\tinstructions for optimize_size or if the tuning flags do not\n\tsuggest otherwise.  Tweak warning.\n\t(mips_matching_cpu_name_p, mips_parse_cpu): Use ARRAY_SIZE.\n\nFrom-SVN: r128848", "tree": {"sha": "fe79e8e8601efd372be340999cb7ed91cc59b89a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe79e8e8601efd372be340999cb7ed91cc59b89a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0da4c1ea8461992bef38a5ad49e9e5e67fd5a495", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0da4c1ea8461992bef38a5ad49e9e5e67fd5a495", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0da4c1ea8461992bef38a5ad49e9e5e67fd5a495", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0da4c1ea8461992bef38a5ad49e9e5e67fd5a495/comments", "author": null, "committer": null, "parents": [{"sha": "da2ce74a2e7911007d73d18dda05741035b175b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da2ce74a2e7911007d73d18dda05741035b175b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da2ce74a2e7911007d73d18dda05741035b175b2"}], "stats": {"total": 219, "additions": 116, "deletions": 103}, "files": [{"sha": "bdb9d2237cdfc0bc6ae99f5f6e1802316941b530", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da4c1ea8461992bef38a5ad49e9e5e67fd5a495/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da4c1ea8461992bef38a5ad49e9e5e67fd5a495/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0da4c1ea8461992bef38a5ad49e9e5e67fd5a495", "patch": "@@ -1,3 +1,15 @@\n+2007-09-27  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\t* config/mips/mips.h (PTF_AVOID_BRANCHLIKELY): New macro.\n+\t(mips_cpu_info): Add tune_flags.\n+\t(GENERATE_BRANCHLIKELY): Remove TARGET_SR71K check.\n+\t* config/mips/mips.c (mips_cpu_info_table): Add tune_flags fields.\n+\tRemove end marker.\n+\t(override_options): Remove deprecation code.  Use branch-likely\n+\tinstructions for optimize_size or if the tuning flags do not\n+\tsuggest otherwise.  Tweak warning.\n+\t(mips_matching_cpu_name_p, mips_parse_cpu): Use ARRAY_SIZE.\n+\n 2007-09-27  Matthias Klose  <doko@ubuntu.com>\n \n \t* config/i386/t-linux64 (MULTILIB_OSDIRNAMES): Use ../lib32 as the"}, {"sha": "4544cfca5ce0de2ed003176ff75aa7497f271694", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 92, "deletions": 100, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da4c1ea8461992bef38a5ad49e9e5e67fd5a495/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da4c1ea8461992bef38a5ad49e9e5e67fd5a495/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=0da4c1ea8461992bef38a5ad49e9e5e67fd5a495", "patch": "@@ -753,94 +753,96 @@ const struct attribute_spec mips_attribute_table[] =\n    options correctly.  */\n const struct mips_cpu_info mips_cpu_info_table[] = {\n   /* Entries for generic ISAs */\n-  { \"mips1\", PROCESSOR_R3000, 1 },\n-  { \"mips2\", PROCESSOR_R6000, 2 },\n-  { \"mips3\", PROCESSOR_R4000, 3 },\n-  { \"mips4\", PROCESSOR_R8000, 4 },\n-  { \"mips32\", PROCESSOR_4KC, 32 },\n-  { \"mips32r2\", PROCESSOR_M4K, 33 },\n-  { \"mips64\", PROCESSOR_5KC, 64 },\n+  { \"mips1\", PROCESSOR_R3000, 1, 0 },\n+  { \"mips2\", PROCESSOR_R6000, 2, 0 },\n+  { \"mips3\", PROCESSOR_R4000, 3, 0 },\n+  { \"mips4\", PROCESSOR_R8000, 4, 0 },\n+  /* Prefer not to use branch-likely instructions for generic MIPS32rX\n+     and MIPS64rX code.  The instructions were officially deprecated\n+     in revisions 2 and earlier, but revision 3 is likely to downgrade\n+     that to a recommendation to avoid the instructions in code that\n+     isn't tuned to a specific processor.  */\n+  { \"mips32\", PROCESSOR_4KC, 32, PTF_AVOID_BRANCHLIKELY },\n+  { \"mips32r2\", PROCESSOR_M4K, 33, PTF_AVOID_BRANCHLIKELY },\n+  { \"mips64\", PROCESSOR_5KC, 64, PTF_AVOID_BRANCHLIKELY },\n \n   /* MIPS I */\n-  { \"r3000\", PROCESSOR_R3000, 1 },\n-  { \"r2000\", PROCESSOR_R3000, 1 }, /* = r3000 */\n-  { \"r3900\", PROCESSOR_R3900, 1 },\n+  { \"r3000\", PROCESSOR_R3000, 1, 0 },\n+  { \"r2000\", PROCESSOR_R3000, 1, 0 }, /* = r3000 */\n+  { \"r3900\", PROCESSOR_R3900, 1, 0 },\n \n   /* MIPS II */\n-  { \"r6000\", PROCESSOR_R6000, 2 },\n+  { \"r6000\", PROCESSOR_R6000, 2, 0 },\n \n   /* MIPS III */\n-  { \"r4000\", PROCESSOR_R4000, 3 },\n-  { \"vr4100\", PROCESSOR_R4100, 3 },\n-  { \"vr4111\", PROCESSOR_R4111, 3 },\n-  { \"vr4120\", PROCESSOR_R4120, 3 },\n-  { \"vr4130\", PROCESSOR_R4130, 3 },\n-  { \"vr4300\", PROCESSOR_R4300, 3 },\n-  { \"r4400\", PROCESSOR_R4000, 3 }, /* = r4000 */\n-  { \"r4600\", PROCESSOR_R4600, 3 },\n-  { \"orion\", PROCESSOR_R4600, 3 }, /* = r4600 */\n-  { \"r4650\", PROCESSOR_R4650, 3 },\n+  { \"r4000\", PROCESSOR_R4000, 3, 0 },\n+  { \"vr4100\", PROCESSOR_R4100, 3, 0 },\n+  { \"vr4111\", PROCESSOR_R4111, 3, 0 },\n+  { \"vr4120\", PROCESSOR_R4120, 3, 0 },\n+  { \"vr4130\", PROCESSOR_R4130, 3, 0 },\n+  { \"vr4300\", PROCESSOR_R4300, 3, 0 },\n+  { \"r4400\", PROCESSOR_R4000, 3, 0 }, /* = r4000 */\n+  { \"r4600\", PROCESSOR_R4600, 3, 0 },\n+  { \"orion\", PROCESSOR_R4600, 3, 0 }, /* = r4600 */\n+  { \"r4650\", PROCESSOR_R4650, 3, 0 },\n \n   /* MIPS IV */\n-  { \"r8000\", PROCESSOR_R8000, 4 },\n-  { \"vr5000\", PROCESSOR_R5000, 4 },\n-  { \"vr5400\", PROCESSOR_R5400, 4 },\n-  { \"vr5500\", PROCESSOR_R5500, 4 },\n-  { \"rm7000\", PROCESSOR_R7000, 4 },\n-  { \"rm9000\", PROCESSOR_R9000, 4 },\n+  { \"r8000\", PROCESSOR_R8000, 4, 0 },\n+  { \"vr5000\", PROCESSOR_R5000, 4, 0 },\n+  { \"vr5400\", PROCESSOR_R5400, 4, 0 },\n+  { \"vr5500\", PROCESSOR_R5500, 4, PTF_AVOID_BRANCHLIKELY },\n+  { \"rm7000\", PROCESSOR_R7000, 4, 0 },\n+  { \"rm9000\", PROCESSOR_R9000, 4, 0 },\n \n   /* MIPS32 */\n-  { \"4kc\", PROCESSOR_4KC, 32 },\n-  { \"4km\", PROCESSOR_4KC, 32 }, /* = 4kc */\n-  { \"4kp\", PROCESSOR_4KP, 32 },\n-  { \"4ksc\", PROCESSOR_4KC, 32 },\n+  { \"4kc\", PROCESSOR_4KC, 32, 0 },\n+  { \"4km\", PROCESSOR_4KC, 32, 0 }, /* = 4kc */\n+  { \"4kp\", PROCESSOR_4KP, 32, 0 },\n+  { \"4ksc\", PROCESSOR_4KC, 32, 0 },\n \n   /* MIPS32 Release 2 */\n-  { \"m4k\", PROCESSOR_M4K, 33 },\n-  { \"4kec\", PROCESSOR_4KC, 33 },\n-  { \"4kem\", PROCESSOR_4KC, 33 },\n-  { \"4kep\", PROCESSOR_4KP, 33 },\n-  { \"4ksd\", PROCESSOR_4KC, 33 },\n-\n-  { \"24kc\", PROCESSOR_24KC, 33 },\n-  { \"24kf2_1\", PROCESSOR_24KF2_1, 33 },\n-  { \"24kf\", PROCESSOR_24KF2_1, 33 },\n-  { \"24kf1_1\", PROCESSOR_24KF1_1, 33 },\n-  { \"24kfx\", PROCESSOR_24KF1_1, 33 },\n-  { \"24kx\", PROCESSOR_24KF1_1, 33 },\n-\n-  { \"24kec\", PROCESSOR_24KC, 33 }, /* 24K with DSP */\n-  { \"24kef2_1\", PROCESSOR_24KF2_1, 33 },\n-  { \"24kef\", PROCESSOR_24KF2_1, 33 },\n-  { \"24kef1_1\", PROCESSOR_24KF1_1, 33 },\n-  { \"24kefx\", PROCESSOR_24KF1_1, 33 },\n-  { \"24kex\", PROCESSOR_24KF1_1, 33 },\n-\n-  { \"34kc\", PROCESSOR_24KC, 33 }, /* 34K with MT/DSP */\n-  { \"34kf2_1\", PROCESSOR_24KF2_1, 33 },\n-  { \"34kf\", PROCESSOR_24KF2_1, 33 },\n-  { \"34kf1_1\", PROCESSOR_24KF1_1, 33 },\n-  { \"34kfx\", PROCESSOR_24KF1_1, 33 },\n-  { \"34kx\", PROCESSOR_24KF1_1, 33 },\n-\n-  { \"74kc\", PROCESSOR_74KC, 33 }, /* 74K with DSPr2 */\n-  { \"74kf2_1\", PROCESSOR_74KF2_1, 33 },\n-  { \"74kf\", PROCESSOR_74KF2_1, 33 },\n-  { \"74kf1_1\", PROCESSOR_74KF1_1, 33 },\n-  { \"74kfx\", PROCESSOR_74KF1_1, 33 },\n-  { \"74kx\", PROCESSOR_74KF1_1, 33 },\n-  { \"74kf3_2\", PROCESSOR_74KF3_2, 33 },\n+  { \"m4k\", PROCESSOR_M4K, 33, 0 },\n+  { \"4kec\", PROCESSOR_4KC, 33, 0 },\n+  { \"4kem\", PROCESSOR_4KC, 33, 0 },\n+  { \"4kep\", PROCESSOR_4KP, 33, 0 },\n+  { \"4ksd\", PROCESSOR_4KC, 33, 0 },\n+\n+  { \"24kc\", PROCESSOR_24KC, 33, 0 },\n+  { \"24kf2_1\", PROCESSOR_24KF2_1, 33, 0 },\n+  { \"24kf\", PROCESSOR_24KF2_1, 33, 0 },\n+  { \"24kf1_1\", PROCESSOR_24KF1_1, 33, 0 },\n+  { \"24kfx\", PROCESSOR_24KF1_1, 33, 0 },\n+  { \"24kx\", PROCESSOR_24KF1_1, 33, 0 },\n+\n+  { \"24kec\", PROCESSOR_24KC, 33, 0 }, /* 24K with DSP */\n+  { \"24kef2_1\", PROCESSOR_24KF2_1, 33, 0 },\n+  { \"24kef\", PROCESSOR_24KF2_1, 33, 0 },\n+  { \"24kef1_1\", PROCESSOR_24KF1_1, 33, 0 },\n+  { \"24kefx\", PROCESSOR_24KF1_1, 33, 0 },\n+  { \"24kex\", PROCESSOR_24KF1_1, 33, 0 },\n+\n+  { \"34kc\", PROCESSOR_24KC, 33, 0 }, /* 34K with MT/DSP */\n+  { \"34kf2_1\", PROCESSOR_24KF2_1, 33, 0 },\n+  { \"34kf\", PROCESSOR_24KF2_1, 33, 0 },\n+  { \"34kf1_1\", PROCESSOR_24KF1_1, 33, 0 },\n+  { \"34kfx\", PROCESSOR_24KF1_1, 33, 0 },\n+  { \"34kx\", PROCESSOR_24KF1_1, 33, 0 },\n+\n+  { \"74kc\", PROCESSOR_74KC, 33, 0 }, /* 74K with DSPr2 */\n+  { \"74kf2_1\", PROCESSOR_74KF2_1, 33, 0 },\n+  { \"74kf\", PROCESSOR_74KF2_1, 33, 0 },\n+  { \"74kf1_1\", PROCESSOR_74KF1_1, 33, 0 },\n+  { \"74kfx\", PROCESSOR_74KF1_1, 33, 0 },\n+  { \"74kx\", PROCESSOR_74KF1_1, 33, 0 },\n+  { \"74kf3_2\", PROCESSOR_74KF3_2, 33, 0 },\n \n   /* MIPS64 */\n-  { \"5kc\", PROCESSOR_5KC, 64 },\n-  { \"5kf\", PROCESSOR_5KF, 64 },\n-  { \"20kc\", PROCESSOR_20KC, 64 },\n-  { \"sb1\", PROCESSOR_SB1, 64 },\n-  { \"sb1a\", PROCESSOR_SB1A, 64 },\n-  { \"sr71000\", PROCESSOR_SR71000, 64 },\n-\n-  /* End marker */\n-  { 0, 0, 0 }\n+  { \"5kc\", PROCESSOR_5KC, 64, 0 },\n+  { \"5kf\", PROCESSOR_5KF, 64, 0 },\n+  { \"20kc\", PROCESSOR_20KC, 64, PTF_AVOID_BRANCHLIKELY },\n+  { \"sb1\", PROCESSOR_SB1, 64, PTF_AVOID_BRANCHLIKELY },\n+  { \"sb1a\", PROCESSOR_SB1A, 64, PTF_AVOID_BRANCHLIKELY },\n+  { \"sr71000\", PROCESSOR_SR71000, 64, PTF_AVOID_BRANCHLIKELY },\n };\n \n /* Default costs. If these are used for a processor we should look\n@@ -6042,29 +6044,19 @@ override_options (void)\n     {\n       /* If neither -mbranch-likely nor -mno-branch-likely was given\n \t on the command line, set MASK_BRANCHLIKELY based on the target\n-\t architecture.\n-\n-\t By default, we enable use of Branch Likely instructions on\n-\t all architectures which support them with the following\n-\t exceptions: when creating MIPS32 or MIPS64 code, and when\n-\t tuning for architectures where their use tends to hurt\n-\t performance.\n-\n-\t The MIPS32 and MIPS64 architecture specifications say \"Software\n-\t is strongly encouraged to avoid use of Branch Likely\n-\t instructions, as they will be removed from a future revision\n-\t of the [MIPS32 and MIPS64] architecture.\"  Therefore, we do not\n-\t issue those instructions unless instructed to do so by\n-\t -mbranch-likely.  */\n+\t architecture and tuning flags.  Annulled delay slots are a\n+\t size win, so we only consider the process-specific tuning\n+\t for !optimize_size.  */\n       if (ISA_HAS_BRANCHLIKELY\n-\t  && !(ISA_MIPS32 || ISA_MIPS32R2 || ISA_MIPS64)\n-\t  && !(TUNE_MIPS5500 || TUNE_SB1))\n+\t  && (optimize_size\n+\t      || (mips_tune_info->tune_flags & PTF_AVOID_BRANCHLIKELY) == 0))\n \ttarget_flags |= MASK_BRANCHLIKELY;\n       else\n \ttarget_flags &= ~MASK_BRANCHLIKELY;\n     }\n-  if (TARGET_BRANCHLIKELY && !ISA_HAS_BRANCHLIKELY)\n-    warning (0, \"generation of Branch Likely instructions enabled, but not supported by architecture\");\n+  else if (TARGET_BRANCHLIKELY && !ISA_HAS_BRANCHLIKELY)\n+    warning (0, \"the %qs architecture does not support branch-likely\"\n+\t     \" instructions\", mips_arch_info->name);\n \n   /* The effect of -mabicalls isn't defined for the EABI.  */\n   if (mips_abi == ABI_EABI && TARGET_ABICALLS)\n@@ -11456,7 +11448,7 @@ mips_matching_cpu_name_p (const char *canonical, const char *given)\n static const struct mips_cpu_info *\n mips_parse_cpu (const char *cpu_string)\n {\n-  const struct mips_cpu_info *p;\n+  unsigned int i;\n   const char *s;\n \n   /* In the past, we allowed upper-case CPU names, but it doesn't\n@@ -11482,9 +11474,9 @@ mips_parse_cpu (const char *cpu_string)\n   if (strcasecmp (cpu_string, \"default\") == 0)\n     return 0;\n \n-  for (p = mips_cpu_info_table; p->name != 0; p++)\n-    if (mips_matching_cpu_name_p (p->name, cpu_string))\n-      return p;\n+  for (i = 0; i < ARRAY_SIZE (mips_cpu_info_table); i++)\n+    if (mips_matching_cpu_name_p (mips_cpu_info_table[i].name, cpu_string))\n+      return mips_cpu_info_table + i;\n \n   return 0;\n }\n@@ -11496,11 +11488,11 @@ mips_parse_cpu (const char *cpu_string)\n static const struct mips_cpu_info *\n mips_cpu_info_from_isa (int isa)\n {\n-  const struct mips_cpu_info *p;\n+  unsigned int i;\n \n-  for (p = mips_cpu_info_table; p->name != 0; p++)\n-    if (p->isa == isa)\n-      return p;\n+  for (i = 0; i < ARRAY_SIZE (mips_cpu_info_table); i++)\n+    if (mips_cpu_info_table[i].isa == isa)\n+      return mips_cpu_info_table + i;\n \n   return 0;\n }"}, {"sha": "ce22f4f5be9ae3de37c1d9455f9684a5354c59d3", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da4c1ea8461992bef38a5ad49e9e5e67fd5a495/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da4c1ea8461992bef38a5ad49e9e5e67fd5a495/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=0da4c1ea8461992bef38a5ad49e9e5e67fd5a495", "patch": "@@ -97,6 +97,14 @@ struct mips_rtx_cost_data\n #define ABI_EABI 3\n #define ABI_O64  4\n \n+/* Masks that affect tuning.\n+\n+   PTF_AVOID_BRANCHLIKELY\n+\tSet if it is usually not profitable to use branch-likely instructions\n+\tfor this target, typically because the branches are always predicted\n+\ttaken and so incur a large overhead when not taken.  */\n+#define PTF_AVOID_BRANCHLIKELY 0x1\n+\n /* Information about one recognized processor.  Defined here for the\n    benefit of TARGET_CPU_CPP_BUILTINS.  */\n struct mips_cpu_info {\n@@ -112,6 +120,9 @@ struct mips_cpu_info {\n \n   /* The ISA level that the processor implements.  */\n   int isa;\n+\n+  /* A mask of PTF_* values.  */\n+  unsigned int tune_flags;\n };\n \n /* Enumerates the setting of the -mcode-readable option.  */\n@@ -706,9 +717,7 @@ extern enum mips_code_readable_setting mips_code_readable;\n #define GENERATE_DIVIDE_TRAPS (TARGET_DIVIDE_TRAPS \\\n                                && ISA_HAS_COND_TRAP)\n \n-#define GENERATE_BRANCHLIKELY   (TARGET_BRANCHLIKELY                    \\\n-\t\t\t\t && !TARGET_SR71K                       \\\n-\t\t\t\t && !TARGET_MIPS16)\n+#define GENERATE_BRANCHLIKELY   (TARGET_BRANCHLIKELY && !TARGET_MIPS16)\n \n /* True if the ABI can only work with 64-bit integer registers.  We\n    generally allow ad-hoc variations for TARGET_SINGLE_FLOAT, but"}]}