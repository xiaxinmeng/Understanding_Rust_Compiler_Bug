{"sha": "8cb41ec6634db079da2ec4ea2ca1f588093a8fbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNiNDFlYzY2MzRkYjA3OWRhMmVjNGVhMmNhMWY1ODgwOTNhOGZiYg==", "commit": {"author": {"name": "Sebastian Perta", "email": "sebastian.perta@renesas.com", "date": "2017-10-23T17:30:22Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2017-10-23T17:30:22Z"}, "message": "Forgot to add the new file :-P 2017-10-13 Sebastian Perta <sebastian.perta@renesas.com>\n\nForgot to add the new file :-P\n2017-10-13  Sebastian Perta  <sebastian.perta@renesas.com>\n* config/rl78/adddi3.S: New assembly file.\n* config/rl78/t-rl78: Added adddi3.S to LIB2ADD.\n\nFrom-SVN: r254016", "tree": {"sha": "4c89994270b0dfe1e9627fc8e772724dd041ffe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c89994270b0dfe1e9627fc8e772724dd041ffe2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cb41ec6634db079da2ec4ea2ca1f588093a8fbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cb41ec6634db079da2ec4ea2ca1f588093a8fbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cb41ec6634db079da2ec4ea2ca1f588093a8fbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cb41ec6634db079da2ec4ea2ca1f588093a8fbb/comments", "author": null, "committer": null, "parents": [{"sha": "d1047465199d48014b8e81cd4a7ba9d0365e6fe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1047465199d48014b8e81cd4a7ba9d0365e6fe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1047465199d48014b8e81cd4a7ba9d0365e6fe3"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "c805055c4f85bd4cb6855fcf02663c7a4124c9a6", "filename": "libgcc/config/rl78/adddi3.S", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb41ec6634db079da2ec4ea2ca1f588093a8fbb/libgcc%2Fconfig%2Frl78%2Fadddi3.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb41ec6634db079da2ec4ea2ca1f588093a8fbb/libgcc%2Fconfig%2Frl78%2Fadddi3.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frl78%2Fadddi3.S?ref=8cb41ec6634db079da2ec4ea2ca1f588093a8fbb", "patch": "@@ -0,0 +1,58 @@\n+;   Copyright (C) 2017 Free Software Foundation, Inc.\n+;   Contributed by Sebastian Perta.\n+;\n+; This file is free software; you can redistribute it and/or modify it\n+; under the terms of the GNU General Public License as published by the\n+; Free Software Foundation; either version 3, or (at your option) any\n+; later version.\n+;\n+; This file is distributed in the hope that it will be useful, but\n+; WITHOUT ANY WARRANTY; without even the implied warranty of\n+; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+; General Public License for more details.\n+;\n+; Under Section 7 of GPL version 3, you are granted additional\n+; permissions described in the GCC Runtime Library Exception, version\n+; 3.1, as published by the Free Software Foundation.\n+;\n+; You should have received a copy of the GNU General Public License and\n+; a copy of the GCC Runtime Library Exception along with this program;\n+; see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+; <http://www.gnu.org/licenses/>.\n+\n+\n+#include \"vregs.h\"\n+\n+    .text\n+\n+START_FUNC ___adddi3\n+\n+    movw  hl, sp       ; use HL-based addressing (allows for direct addw)\n+\n+    movw  ax, [hl+4]\n+    addw  ax, [hl+12]\n+    movw  r8, ax\n+\n+    mov   a, [hl+6]    ; middle bytes of the result are determined using 8-bit\n+    addc  a, [hl+14]   ; ADDC insns which both account for and update the carry bit\n+    mov   r10, a       ; (no ADDWC instruction is available)\n+    mov   a, [hl+7]\n+    addc  a, [hl+15]\n+    mov   r11, a\n+\n+    mov   a, [hl+8]\n+    addc  a, [hl+16]\n+    mov   r12, a\n+    mov   a, [hl+9]\n+    addc  a, [hl+17]\n+    mov   r13, a\n+\n+    movw  ax, [hl+10]\n+    sknc               ; account for the possible carry from the\n+    incw  ax           ; latest 8-bit operation\n+    addw  ax, [hl+18]\n+    movw  r14, ax\n+\n+    ret\n+\n+END_FUNC ___adddi3"}]}