{"sha": "532815a787849962ca2f2101aef12ec1d57b2cfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTMyODE1YTc4Nzg0OTk2MmNhMmYyMTAxYWVmMTJlYzFkNTdiMmNmZA==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-11-26T18:04:45Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-11-26T18:04:45Z"}, "message": "re PR java/18305 (Class initialization optimization is not done when compiled from .class)\n\n2004-11-26  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR java/18305\n        * decl.c (end_java_method): Call\n        attach_init_test_initialization_flags on all the init_decls.\n        * parse.y (attach_init_test_initialization_flags): Move to ...\n        * expr.c (attach_init_test_initialization_flags): here and\n        support BIND_EXPR also.\n        * java-tree.h (attach_init_test_initialization_flags): Prototype.\n        * jcf-parse.c (parse_class_file): Don't disable class init\n        optimization.\n\nFrom-SVN: r91343", "tree": {"sha": "fd510bfba4be46b5f8449a5f32932ed69e327402", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd510bfba4be46b5f8449a5f32932ed69e327402"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/532815a787849962ca2f2101aef12ec1d57b2cfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/532815a787849962ca2f2101aef12ec1d57b2cfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/532815a787849962ca2f2101aef12ec1d57b2cfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/532815a787849962ca2f2101aef12ec1d57b2cfd/comments", "author": null, "committer": null, "parents": [{"sha": "e57df6fed97f4e7dd58dd00a1946c698b5a22d92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e57df6fed97f4e7dd58dd00a1946c698b5a22d92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e57df6fed97f4e7dd58dd00a1946c698b5a22d92"}], "stats": {"total": 82, "additions": 57, "deletions": 25}, "files": [{"sha": "74a18c994fe044e6973b85d8c2c08168ebbe0bbc", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532815a787849962ca2f2101aef12ec1d57b2cfd/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532815a787849962ca2f2101aef12ec1d57b2cfd/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=532815a787849962ca2f2101aef12ec1d57b2cfd", "patch": "@@ -1,3 +1,15 @@\n+2004-11-26  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR java/18305\n+\t* decl.c (end_java_method): Call\n+\tattach_init_test_initialization_flags on all the init_decls.\n+\t* parse.y (attach_init_test_initialization_flags): Move to ...\n+\t* expr.c (attach_init_test_initialization_flags): here and\n+\tsupport BIND_EXPR also.\n+\t* java-tree.h (attach_init_test_initialization_flags): Prototype.\n+\t* jcf-parse.c (parse_class_file): Don't disable class init\n+\toptimization.\n+\n 2004-11-25  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* gjavah.c, jcf-dump.c, jv-scan.c, jvspec.c: Avoid ` as left quote"}, {"sha": "103a11225e9cbcb5b6a431ff517bc20fe57c1516", "filename": "gcc/java/decl.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532815a787849962ca2f2101aef12ec1d57b2cfd/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532815a787849962ca2f2101aef12ec1d57b2cfd/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=532815a787849962ca2f2101aef12ec1d57b2cfd", "patch": "@@ -1931,6 +1931,17 @@ end_java_method (void)\n   poplevel (1, 0, 1);\n \n   BLOCK_SUPERCONTEXT (DECL_INITIAL (fndecl)) = fndecl;\n+  \n+  if (DECL_SAVED_TREE (fndecl))\n+    {\n+      tree fbody, block_body;\n+      /* Before we check initialization, attached all class initialization\n+\t variable to the block_body */\n+      fbody = DECL_SAVED_TREE (fndecl);\n+      block_body = BIND_EXPR_BODY (fbody);\n+      htab_traverse (DECL_FUNCTION_INIT_TEST_TABLE (fndecl),\n+\t\t     attach_init_test_initialization_flags, block_body);\n+    }\n \n   flag_unit_at_a_time = 0;\n   finish_method (fndecl);"}, {"sha": "0fef94db9d488665a5ed9489fefdb05365bb4669", "filename": "gcc/java/expr.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532815a787849962ca2f2101aef12ec1d57b2cfd/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532815a787849962ca2f2101aef12ec1d57b2cfd/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=532815a787849962ca2f2101aef12ec1d57b2cfd", "patch": "@@ -1935,6 +1935,39 @@ pop_arguments (tree arg_types)\n   abort ();\n }\n \n+/* Attach to PTR (a block) the declaration found in ENTRY. */\n+\n+int\n+attach_init_test_initialization_flags (void **entry, void *ptr)\n+{\n+  tree block = (tree)ptr;\n+  struct treetreehash_entry *ite = (struct treetreehash_entry *) *entry;\n+\n+  if (block != error_mark_node)\n+    {\n+      if (TREE_CODE (block) == BIND_EXPR)\n+        {\n+\t  tree body = BIND_EXPR_BODY (block);\n+\t  TREE_CHAIN (ite->value) = BIND_EXPR_VARS (block);\n+\t  BIND_EXPR_VARS (block) = ite->value;\n+\t  body = build2 (COMPOUND_EXPR, void_type_node,\n+\t\t\t build1 (DECL_EXPR, void_type_node, ite->value), body);\n+\t  BIND_EXPR_BODY (block) = body;\n+\t}\n+      else\n+\t{\n+\t  tree body = BLOCK_SUBBLOCKS (block);\n+\t  TREE_CHAIN (ite->value) = BLOCK_EXPR_DECLS (block);\n+\t  BLOCK_EXPR_DECLS (block) = ite->value;\n+\t  body = build2 (COMPOUND_EXPR, void_type_node,\n+\t\t\t build1 (DECL_EXPR, void_type_node, ite->value), body);\n+\t  BLOCK_SUBBLOCKS (block) = body;\n+        }\n+      \n+    }\n+  return true;\n+}\n+\n /* Build an expression to initialize the class CLAS.\n    if EXPR is non-NULL, returns an expression to first call the initializer\n    (if it is needed) and then calls EXPR. */"}, {"sha": "54cf01bbc0c54d0a89b1236c6fd12c76b9d3d80e", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532815a787849962ca2f2101aef12ec1d57b2cfd/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532815a787849962ca2f2101aef12ec1d57b2cfd/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=532815a787849962ca2f2101aef12ec1d57b2cfd", "patch": "@@ -1255,6 +1255,7 @@ extern void initialize_builtins (void);\n extern tree lookup_name (tree);\n extern tree build_known_method_ref (tree, tree, tree, tree, tree);\n extern tree build_class_init (tree, tree);\n+extern int attach_init_test_initialization_flags (void **, void *);\n extern tree build_invokevirtual (tree, tree);\n extern tree build_invokeinterface (tree, tree);\n extern tree build_jni_stub (tree);"}, {"sha": "429e3db3a22c1abb426b832ee3dc671c7a9cfc4a", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532815a787849962ca2f2101aef12ec1d57b2cfd/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532815a787849962ca2f2101aef12ec1d57b2cfd/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=532815a787849962ca2f2101aef12ec1d57b2cfd", "patch": "@@ -827,10 +827,6 @@ parse_class_file (void)\n   file_start_location = input_location;\n   (*debug_hooks->start_source_file) (input_line, input_filename);\n \n-  /* Currently we always have to emit calls to _Jv_InitClass when\n-     compiling from class files.  */\n-  always_initialize_class_p = 1;\n-\n   gen_indirect_dispatch_tables (current_class);\n \n   java_mark_class_local (current_class);"}, {"sha": "2b3d3a4a795db23191d4b457bd4821350db2a0b9", "filename": "gcc/java/parse.y", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532815a787849962ca2f2101aef12ec1d57b2cfd/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532815a787849962ca2f2101aef12ec1d57b2cfd/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=532815a787849962ca2f2101aef12ec1d57b2cfd", "patch": "@@ -347,7 +347,6 @@ static tree build_dot_class_method_invocation (tree, tree);\n static void create_new_parser_context (int);\n static tree maybe_build_class_init_for_field (tree, tree);\n \n-static int attach_init_test_initialization_flags (void **, void *);\n static int emit_test_initialization (void **, void *);\n \n static char *string_convert_int_cst (tree);\n@@ -16345,26 +16344,6 @@ init_src_parse (void)\n /* This section deals with the functions that are called when tables\n    recording class initialization information are traversed.  */\n \n-/* Attach to PTR (a block) the declaration found in ENTRY. */\n-\n-static int\n-attach_init_test_initialization_flags (void **entry, void *ptr)\n-{\n-  tree block = (tree)ptr;\n-  struct treetreehash_entry *ite = (struct treetreehash_entry *) *entry;\n-\n-  if (block != error_mark_node)\n-    {\n-      tree body = BLOCK_SUBBLOCKS (block);\n-      TREE_CHAIN (ite->value) = BLOCK_EXPR_DECLS (block);\n-      BLOCK_EXPR_DECLS (block) = ite->value;\n-      body = build2 (COMPOUND_EXPR, void_type_node,\n-                     build1 (DECL_EXPR, void_type_node, ite->value), body);\n-      BLOCK_SUBBLOCKS (block) = body;\n-    }\n-  return true;\n-}\n-\n /* This function is called for each class that is known definitely\n    initialized when a given static method was called. This function\n    augments a compound expression (INFO) storing all assignment to"}]}