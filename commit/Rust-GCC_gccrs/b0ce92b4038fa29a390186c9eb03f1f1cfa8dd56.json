{"sha": "b0ce92b4038fa29a390186c9eb03f1f1cfa8dd56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBjZTkyYjQwMzhmYTI5YTM5MDE4NmM5ZWIwM2YxZjFjZmE4ZGQ1Ng==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2010-12-08T16:34:20Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2010-12-08T16:34:20Z"}, "message": "PR 42694: add checks to make sure sqrt is supported\n\nFrom-SVN: r167594", "tree": {"sha": "d6a2589788d2d96ce23e4a18e6a6325f473bfe53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6a2589788d2d96ce23e4a18e6a6325f473bfe53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0ce92b4038fa29a390186c9eb03f1f1cfa8dd56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0ce92b4038fa29a390186c9eb03f1f1cfa8dd56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0ce92b4038fa29a390186c9eb03f1f1cfa8dd56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0ce92b4038fa29a390186c9eb03f1f1cfa8dd56/comments", "author": null, "committer": null, "parents": [{"sha": "afca0898bc7728495064f251d6094970e036a5c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afca0898bc7728495064f251d6094970e036a5c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afca0898bc7728495064f251d6094970e036a5c7"}], "stats": {"total": 54, "additions": 52, "deletions": 2}, "files": [{"sha": "64285702a357c4ad972e0caaea94ed924fc2ec15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0ce92b4038fa29a390186c9eb03f1f1cfa8dd56/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0ce92b4038fa29a390186c9eb03f1f1cfa8dd56/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0ce92b4038fa29a390186c9eb03f1f1cfa8dd56", "patch": "@@ -1,3 +1,11 @@\n+2010-12-08  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR middle-end/42694\n+\t* builtins.c (expand_builtin_pow_root): Don't optimize pow(x,y)\n+\twhere y is 0.25, 1./6., or 0.75 if the target does not have a sqrt\n+\tinstruction, but do optimize if y is 0.5 or 1./3. since that\n+\tchanges an expensive call into a cheaper one.\n+\n 2010-12-08  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Use a shift"}, {"sha": "eb2aa3e6b34300d37cea3ee4862d3a5811819cfc", "filename": "gcc/builtins.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0ce92b4038fa29a390186c9eb03f1f1cfa8dd56/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0ce92b4038fa29a390186c9eb03f1f1cfa8dd56/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=b0ce92b4038fa29a390186c9eb03f1f1cfa8dd56", "patch": "@@ -3068,7 +3068,8 @@ expand_builtin_pow_root (location_t loc, tree arg0, tree arg1, tree type,\n \t  if (REAL_VALUES_EQUAL (c, dconsthalf))\n \t    op = build_call_nofold_loc (loc, sqrtfn, 1, arg0);\n \n-\t  else\n+\t  /* Don't do this optimization if we don't have a sqrt insn.  */\n+\t  else if (optab_handler (sqrt_optab, mode) != CODE_FOR_nothing)\n \t    {\n \t      REAL_VALUE_TYPE dconst1_4 = dconst1;\n \t      REAL_VALUE_TYPE dconst3_4;\n@@ -3114,7 +3115,8 @@ expand_builtin_pow_root (location_t loc, tree arg0, tree arg1, tree type,\n \t    op = build_call_nofold_loc (loc, cbrtfn, 1, arg0);\n \n \t      /* Now try 1/6.  */\n-\t  else if (optimize_insn_for_speed_p ())\n+\t  else if (optimize_insn_for_speed_p ()\n+\t\t   && optab_handler (sqrt_optab, mode) != CODE_FOR_nothing)\n \t    {\n \t      REAL_VALUE_TYPE dconst1_6 = dconst1_3;\n \t      SET_REAL_EXP (&dconst1_6, REAL_EXP (&dconst1_6) - 1);"}, {"sha": "7a7f3be27ccef0d5ffba0fe5b3e1fdaa76028f57", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0ce92b4038fa29a390186c9eb03f1f1cfa8dd56/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0ce92b4038fa29a390186c9eb03f1f1cfa8dd56/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b0ce92b4038fa29a390186c9eb03f1f1cfa8dd56", "patch": "@@ -1,3 +1,9 @@\n+2010-12-08  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR middle-end/42694\n+\t* gcc.target/powerpc/ppc-pow.c: New file to make sure pow (x,\n+\t0.75) is not optimized if the machine has no sqrt instruction.\n+\n 2010-12-07  Andrey Belevantsev  <abel@ispras.ru>\n \n \tPR target/43603"}, {"sha": "1255d5c5966ffaef4f6930580de147bc6bc72d38", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-pow.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0ce92b4038fa29a390186c9eb03f1f1cfa8dd56/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-pow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0ce92b4038fa29a390186c9eb03f1f1cfa8dd56/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-pow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-pow.c?ref=b0ce92b4038fa29a390186c9eb03f1f1cfa8dd56", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile { target { { powerpc*-*-* } && { ! powerpc*-apple-darwin* } } } } */\n+/* { dg-options \"-O2 -ffast-math -mcpu=power6\" } */\n+/* { dg-final { scan-assembler-times \"fsqrt\" 3 } } */\n+/* { dg-final { scan-assembler-times \"fmul\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bl pow\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bl sqrt\" 1 } } */\n+\n+double\n+do_pow_0_75_default (double a)\n+{\n+  return __builtin_pow (a, 0.75);\t/* should generate 2 fsqrts */\n+}\n+\n+double\n+do_pow_0_5_default (double a)\n+{\n+  return __builtin_pow (a, 0.5);\t/* should generate fsqrt */\n+}\n+\n+#pragma GCC target \"no-powerpc-gpopt,no-powerpc-gfxopt\"\n+\n+double\n+do_pow_0_75_nosqrt (double a)\n+{\n+  return __builtin_pow (a, 0.75);\t/* should call pow */\n+}\n+\n+double\n+do_pow_0_5_nosqrt (double a)\n+{\n+  return __builtin_pow (a, 0.5);\t/* should call sqrt */\n+}\n+\n+#pragma GCC reset_options"}]}