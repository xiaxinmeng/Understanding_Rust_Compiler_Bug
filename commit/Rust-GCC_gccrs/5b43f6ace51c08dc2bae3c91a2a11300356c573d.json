{"sha": "5b43f6ace51c08dc2bae3c91a2a11300356c573d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI0M2Y2YWNlNTFjMDhkYzJiYWUzYzkxYTJhMTEzMDAzNTZjNTczZA==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@riscy-ip.com", "date": "2021-05-28T08:34:07Z"}, "committer": {"name": "Joern Rennecke", "email": "joern.rennecke@riscy-ip.com", "date": "2021-05-28T08:40:41Z"}, "message": "Recognize popcount also when a double width operation is needed.\n\n2021-05-28  Joern Rennecke  <joern.rennecke@riscy-ip.com>\ngcc/\n\t* match.pd <popcount & / + pattern matching>:\n\tWhen generating popcount directly fails, try doing it in two halves.\ngcc/testsuite/\n\t* gcc.dg/tree-ssa/popcount4ll.c: Remove lp64 condition.\n\tAdjust scanning pattern for !lp64.\n\t* gcc.dg/tree-ssa/popcount5ll.c: Likewise.\n\t* gcc.dg/tree-ssa/popcount4l.c: Adjust scanning pattern\n\tfor ! int32plus.\n\nCo-Authored-By: Richard Biener  <rguenther@suse.de>", "tree": {"sha": "84a796205f9abcd790738ee27cdc82215762ce6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84a796205f9abcd790738ee27cdc82215762ce6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b43f6ace51c08dc2bae3c91a2a11300356c573d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b43f6ace51c08dc2bae3c91a2a11300356c573d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b43f6ace51c08dc2bae3c91a2a11300356c573d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b43f6ace51c08dc2bae3c91a2a11300356c573d/comments", "author": null, "committer": null, "parents": [{"sha": "c9114f2804b91690e030383de15a24e0b738e856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9114f2804b91690e030383de15a24e0b738e856", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9114f2804b91690e030383de15a24e0b738e856"}], "stats": {"total": 42, "additions": 33, "deletions": 9}, "files": [{"sha": "d06ff170684abb65e30196899774fb85b53ae295", "filename": "gcc/match.pd", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b43f6ace51c08dc2bae3c91a2a11300356c573d/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b43f6ace51c08dc2bae3c91a2a11300356c573d/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=5b43f6ace51c08dc2bae3c91a2a11300356c573d", "patch": "@@ -6642,10 +6642,31 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t&& tree_to_uhwi (@3) == c2\n \t&& tree_to_uhwi (@9) == c3\n \t&& tree_to_uhwi (@7) == c3\n-\t&& tree_to_uhwi (@11) == c4\n-\t&& direct_internal_fn_supported_p (IFN_POPCOUNT, type,\n-\t\t\t\t\t   OPTIMIZE_FOR_BOTH))\n-    (convert (IFN_POPCOUNT:type @0)))))\n+\t&& tree_to_uhwi (@11) == c4)\n+    (if (direct_internal_fn_supported_p (IFN_POPCOUNT, type,\n+\t\t\t\t\t OPTIMIZE_FOR_BOTH))\n+     (convert (IFN_POPCOUNT:type @0))\n+     /* Try to do popcount in two halves.  PREC must be at least\n+\tfive bits for this to work without extension before adding.  */\n+     (with {\n+       tree half_type = NULL_TREE;\n+       opt_machine_mode m = mode_for_size ((prec + 1) / 2, MODE_INT, 1);\n+       int half_prec = 8;\n+       if (m.exists ()\n+\t   && m.require () != TYPE_MODE (type))\n+\t {\n+\t   half_prec = GET_MODE_PRECISION (as_a <scalar_int_mode> (m));\n+\t   half_type = build_nonstandard_integer_type (half_prec, 1);\n+\t }\n+       gcc_assert (half_prec > 2);\n+      }\n+      (if (half_type != NULL_TREE\n+\t   && direct_internal_fn_supported_p (IFN_POPCOUNT, half_type,\n+\t\t\t\t\t      OPTIMIZE_FOR_BOTH))\n+       (convert (plus\n+\t (IFN_POPCOUNT:half_type (convert @0))\n+\t (IFN_POPCOUNT:half_type (convert (rshift @0\n+\t    { build_int_cst (integer_type_node, half_prec); } )))))))))))\n \n /* __builtin_ffs needs to deal on many targets with the possible zero\n    argument.  If we know the argument is always non-zero, __builtin_ctz + 1"}, {"sha": "269e56e90f92ce23559431d79c21d533342ffa43", "filename": "gcc/testsuite/gcc.dg/tree-ssa/popcount4l.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b43f6ace51c08dc2bae3c91a2a11300356c573d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount4l.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b43f6ace51c08dc2bae3c91a2a11300356c573d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount4l.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount4l.c?ref=5b43f6ace51c08dc2bae3c91a2a11300356c573d", "patch": "@@ -25,6 +25,7 @@ int popcount64c(unsigned long x)\n     return (x * h01) >> shift;\n }\n \n-/* { dg-final { scan-tree-dump-times \"\\.POPCOUNT\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\.POPCOUNT\" 1 \"optimized\" { target int32plus } } } */\n+/* { dg-final { scan-tree-dump \"\\.POPCOUNT\" \"optimized\" { target { ! int32plus } } } } */\n \n "}, {"sha": "7abadf6df04fcc47405a4a611a1f9139f25cfc4b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/popcount4ll.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b43f6ace51c08dc2bae3c91a2a11300356c573d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount4ll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b43f6ace51c08dc2bae3c91a2a11300356c573d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount4ll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount4ll.c?ref=5b43f6ace51c08dc2bae3c91a2a11300356c573d", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { lp64 } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target popcountll } */\n /* { dg-options \"-O2 -fdump-tree-optimized\" } */\n \n@@ -16,4 +16,5 @@ int popcount64c(unsigned long long x)\n     return (x * h01) >> shift;\n }\n \n-/* { dg-final { scan-tree-dump-times \"\\.POPCOUNT\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\.POPCOUNT\" 1 \"optimized\" { target { lp64 } } } } */\n+/* { dg-final { scan-tree-dump-times \"\\.POPCOUNT\" 2 \"optimized\" { target { ! lp64 } } } } */"}, {"sha": "2afe08124feedfdb87541c6ee50f5838a2bb438e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/popcount5ll.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b43f6ace51c08dc2bae3c91a2a11300356c573d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount5ll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b43f6ace51c08dc2bae3c91a2a11300356c573d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount5ll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount5ll.c?ref=5b43f6ace51c08dc2bae3c91a2a11300356c573d", "patch": "@@ -1,5 +1,5 @@\n /* PR tree-optimization/94800 */\n-/* { dg-do compile { target { lp64 } } } */\n+/* { dg-do compile } */\n /* { dg-require-effective-target popcountll } */\n /* { dg-options \"-O2 -fdump-tree-optimized\" } */\n \n@@ -19,4 +19,5 @@ int popcount64c(unsigned long long x)\n     return x >> shift;\n }\n \n-/* { dg-final { scan-tree-dump-times \"\\.POPCOUNT\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\.POPCOUNT\" 1 \"optimized\" { target { lp64 } } } } */\n+/* { dg-final { scan-tree-dump-times \"\\.POPCOUNT\" 2 \"optimized\" { target { ! lp64 } } } } */"}]}