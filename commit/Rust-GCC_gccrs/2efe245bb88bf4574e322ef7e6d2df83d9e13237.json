{"sha": "2efe245bb88bf4574e322ef7e6d2df83d9e13237", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVmZTI0NWJiODhiZjQ1NzRlMzIyZWY3ZTZkMmRmODNkOWUxMzIzNw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-05-13T22:05:50Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-05-13T22:06:51Z"}, "message": "Avoid -Wuninitialized false negatives with sanitization and VLAs.\n\nResolves:\nPR tree-optimization/93100 - gcc -fsanitize=address inhibits -Wuninitialized\nPR middle-end/98583 - missing -Wuninitialized reading from a second VLA in its own block\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/93100\n\tPR middle-end/98583\n\t* tree-ssa-uninit.c (check_defs): Exclude intrinsic functions that\n\tdon't modify referenced objects.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/93100\n\tPR middle-end/98583\n\t* g++.dg/warn/uninit-pr93100.C: New test.\n\t* gcc.dg/uninit-pr93100.c: New test.\n\t* gcc.dg/uninit-pr98583.c: New test.", "tree": {"sha": "a6d0bbec49a776bda1dfb729d6a6a2290a73e57a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6d0bbec49a776bda1dfb729d6a6a2290a73e57a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2efe245bb88bf4574e322ef7e6d2df83d9e13237", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2efe245bb88bf4574e322ef7e6d2df83d9e13237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2efe245bb88bf4574e322ef7e6d2df83d9e13237", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2efe245bb88bf4574e322ef7e6d2df83d9e13237/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca9bb74a5f856ccdceb4797f18b0a4ac8f49d069", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca9bb74a5f856ccdceb4797f18b0a4ac8f49d069", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca9bb74a5f856ccdceb4797f18b0a4ac8f49d069"}], "stats": {"total": 175, "additions": 175, "deletions": 0}, "files": [{"sha": "c9cd3ef01745326506f0b6572c0522670cce4527", "filename": "gcc/testsuite/g++.dg/warn/uninit-pr93100.C", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2efe245bb88bf4574e322ef7e6d2df83d9e13237/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Funinit-pr93100.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2efe245bb88bf4574e322ef7e6d2df83d9e13237/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Funinit-pr93100.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Funinit-pr93100.C?ref=2efe245bb88bf4574e322ef7e6d2df83d9e13237", "patch": "@@ -0,0 +1,59 @@\n+/* PR tree-optimization/98508 - Sanitizer disable -Wall and -Wextra\n+   { dg-do compile }\n+   { dg-options \"-O0 -Wall -fsanitize=address\" } */\n+\n+struct S\n+{\n+  int a;\n+};\n+\n+void warn_init_self_O0 ()\n+{\n+  S s = S (s);      // { dg-warning \"\\\\\\[-Wuninitialized\" }\n+  (void)&s;\n+}\n+\n+\n+void warn_init_self_use_O0 ()\n+{\n+  S s = S (s);      // { dg-warning \"\\\\\\[-Wuninitialized\" }\n+\n+  void sink (void*);\n+  sink (&s);\n+}\n+\n+\n+#pragma GCC optimize (\"1\")\n+\n+void warn_init_self_O1 ()\n+{\n+  S s = S (s);      // { dg-warning \"\\\\\\[-Wuninitialized\" }\n+  (void)&s;\n+}\n+\n+\n+void warn_init_self_use_O1 ()\n+{\n+  S s = S (s);      // { dg-warning \"\\\\\\[-Wuninitialized\" }\n+\n+  void sink (void*);\n+  sink (&s);\n+}\n+\n+\n+#pragma GCC optimize (\"2\")\n+\n+void warn_init_self_O2 ()\n+{\n+  S s = S (s);      // { dg-warning \"\\\\\\[-Wuninitialized\" }\n+  (void)&s;\n+}\n+\n+\n+void warn_init_self_use_O2 ()\n+{\n+  S s = S (s);      // { dg-warning \"\\\\\\[-Wuninitialized\" }\n+\n+  void sink (void*);\n+  sink (&s);\n+}"}, {"sha": "61b7e43403847fbc76e5b8b465ad17ee083ee030", "filename": "gcc/testsuite/gcc.dg/uninit-pr93100.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2efe245bb88bf4574e322ef7e6d2df83d9e13237/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr93100.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2efe245bb88bf4574e322ef7e6d2df83d9e13237/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr93100.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr93100.c?ref=2efe245bb88bf4574e322ef7e6d2df83d9e13237", "patch": "@@ -0,0 +1,74 @@\n+/* PR tree-optimization/93100 - gcc -fsanitize=address inhibits -Wuninitialized\n+   { dg-do compile }\n+   { dg-options \"-Wall -fsanitize=address\" } */\n+\n+struct A\n+{\n+  _Bool b;\n+  int i;\n+};\n+\n+void warn_A_b_O0 (void)\n+{\n+  struct A a;\n+\n+  if (a.b)          // { dg-warning \"\\\\\\[-Wuninitialized\" }\n+    {\n+      (void)&a;\n+    }\n+}\n+\n+void warn_A_i_O0 (void)\n+{\n+  struct A a;\n+\n+  if (a.i)          // { dg-warning \"\\\\\\[-Wuninitialized\" }\n+    {\n+      (void)&a;\n+    }\n+}\n+\n+#pragma GCC optimize (\"1\")\n+\n+void warn_A_b_O1 (void)\n+{\n+  struct A a;\n+\n+  if (a.b)          // { dg-warning \"\\\\\\[-Wuninitialized\" }\n+    {\n+      (void)&a;\n+    }\n+}\n+\n+void warn_A_i_O1 (void)\n+{\n+  struct A a;\n+\n+  if (a.i)          // { dg-warning \"\\\\\\[-Wuninitialized\" }\n+    {\n+      (void)&a;\n+    }\n+}\n+\n+\n+#pragma GCC optimize (\"2\")\n+\n+void warn_A_b_O2 (void)\n+{\n+  struct A a;\n+\n+  if (a.b)          // { dg-warning \"\\\\\\[-Wuninitialized\" }\n+    {\n+      (void)&a;\n+    }\n+}\n+\n+void warn_A_i_O2 (void)\n+{\n+  struct A a;\n+\n+  if (a.i)          // { dg-warning \"\\\\\\[-Wuninitialized\" }\n+    {\n+      (void)&a;\n+    }\n+}"}, {"sha": "638b0295809670852c4b6dfdd5357d3cf80c2f0a", "filename": "gcc/testsuite/gcc.dg/uninit-pr98583.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2efe245bb88bf4574e322ef7e6d2df83d9e13237/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr98583.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2efe245bb88bf4574e322ef7e6d2df83d9e13237/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr98583.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr98583.c?ref=2efe245bb88bf4574e322ef7e6d2df83d9e13237", "patch": "@@ -0,0 +1,31 @@\n+/* PR middle-end/98583 - missing -Wuninitialized reading from a second VLA\n+   in its own block\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+void f (int*);\n+void g (int);\n+\n+void h1 (int n)\n+{\n+  int a[n];\n+  f (a);\n+\n+  int b[n];\n+  g (b[1]);         // { dg-warning \"\\\\\\[-Wuninitialized\" }\n+}\n+\n+void h2 (int n, int i, int j)\n+{\n+  if (i)\n+    {\n+      int a[n];\n+      f (a);\n+    }\n+\n+  if (j)\n+    {\n+      int b[n];\n+      g (b[1]);     // { dg-warning \"\\\\\\[-Wmaybe-uninitialized\" }\n+    }\n+}"}, {"sha": "f55ce1939ac6c5d2439ca7077aa4d76215e7e74d", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2efe245bb88bf4574e322ef7e6d2df83d9e13237/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2efe245bb88bf4574e322ef7e6d2df83d9e13237/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=2efe245bb88bf4574e322ef7e6d2df83d9e13237", "patch": "@@ -209,13 +209,24 @@ check_defs (ao_ref *ref, tree vdef, void *data_)\n {\n   check_defs_data *data = (check_defs_data *)data_;\n   gimple *def_stmt = SSA_NAME_DEF_STMT (vdef);\n+\n+  /* The ASAN_MARK intrinsic doesn't modify the variable.  */\n+  if (is_gimple_call (def_stmt)\n+      && gimple_call_internal_p (def_stmt, IFN_ASAN_MARK))\n+    return false;\n+\n+  /* End of VLA scope is not a kill.  */\n+  if (gimple_call_builtin_p (def_stmt, BUILT_IN_STACK_RESTORE))\n+    return false;\n+\n   /* If this is a clobber then if it is not a kill walk past it.  */\n   if (gimple_clobber_p (def_stmt))\n     {\n       if (stmt_kills_ref_p (def_stmt, ref))\n \treturn true;\n       return false;\n     }\n+\n   /* Found a may-def on this path.  */\n   data->found_may_defs = true;\n   return true;"}]}