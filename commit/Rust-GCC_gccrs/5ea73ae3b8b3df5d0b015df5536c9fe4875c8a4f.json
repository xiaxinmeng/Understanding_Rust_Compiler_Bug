{"sha": "5ea73ae3b8b3df5d0b015df5536c9fe4875c8a4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVhNzNhZTNiOGIzZGY1ZDBiMDE1ZGY1NTM2YzlmZTQ4NzVjOGE0Zg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-05-16T00:17:46Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-05-16T00:17:46Z"}, "message": "libgo: Use __USING_SJLJ_EXCEPTIONS__ rather than configure test.\n\nFrom Eric Botcazou.\n\nFrom-SVN: r223231", "tree": {"sha": "ab9c0755de18cdb179f09dfcca957f3c95db90bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab9c0755de18cdb179f09dfcca957f3c95db90bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ea73ae3b8b3df5d0b015df5536c9fe4875c8a4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ea73ae3b8b3df5d0b015df5536c9fe4875c8a4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ea73ae3b8b3df5d0b015df5536c9fe4875c8a4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ea73ae3b8b3df5d0b015df5536c9fe4875c8a4f/comments", "author": null, "committer": null, "parents": [{"sha": "f03f953f58e91f6732a713e6fd541b54d7713cd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f03f953f58e91f6732a713e6fd541b54d7713cd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f03f953f58e91f6732a713e6fd541b54d7713cd2"}], "stats": {"total": 124, "additions": 3, "deletions": 121}, "files": [{"sha": "298b8d660e3a157416955d617a561536d77dfafd", "filename": "libgo/config.h.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ea73ae3b8b3df5d0b015df5536c9fe4875c8a4f/libgo%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ea73ae3b8b3df5d0b015df5536c9fe4875c8a4f/libgo%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfig.h.in?ref=5ea73ae3b8b3df5d0b015df5536c9fe4875c8a4f", "patch": "@@ -337,9 +337,6 @@\n /* Define to 1 if you have the `wait4' function. */\n #undef HAVE_WAIT4\n \n-/* Define if the C++ compiler is configured for setjmp/longjmp exceptions. */\n-#undef LIBGO_SJLJ_EXCEPTIONS\n-\n /* Define if the linker support split stack adjustments */\n #undef LINKER_SUPPORTS_SPLIT_STACK\n "}, {"sha": "03d4e15035874c5fa445316d9e5d103c2c25eca1", "filename": "libgo/configure", "status": "modified", "additions": 2, "deletions": 67, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ea73ae3b8b3df5d0b015df5536c9fe4875c8a4f/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ea73ae3b8b3df5d0b015df5536c9fe4875c8a4f/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=5ea73ae3b8b3df5d0b015df5536c9fe4875c8a4f", "patch": "@@ -828,7 +828,6 @@ enable_version_specific_runtime_libs\n with_libffi\n with_libatomic\n with_system_libunwind\n-enable_sjlj_exceptions\n '\n       ac_precious_vars='build_alias\n host_alias\n@@ -1469,8 +1468,6 @@ Optional Features:\n   --enable-version-specific-runtime-libs\n                           Specify that runtime libraries should be installed\n                           in a compiler-specific directory\n-  --enable-sjlj-exceptions\n-                          force use of builtin_setjmp for exceptions\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -11121,7 +11118,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11124 \"configure\"\n+#line 11121 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11227,7 +11224,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11230 \"configure\"\n+#line 11227 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14667,68 +14664,6 @@ $as_echo \"#define HAVE_GETIPINFO 1\" >>confdefs.h\n   fi\n \n \n-# Check whether --enable-sjlj-exceptions was given.\n-if test \"${enable_sjlj_exceptions+set}\" = set; then :\n-  enableval=$enable_sjlj_exceptions; case \"$enableval\" in\n-   yes|no|auto) ;;\n-   *) as_fn_error \"unknown argument to --enable-sjlj-exceptions\" \"$LINENO\" 5 ;;\n-   esac\n-else\n-  enable_sjlj_exceptions=auto\n-fi\n-\n-\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether to use setjmp/longjmp exceptions\" >&5\n-$as_echo_n \"checking whether to use setjmp/longjmp exceptions... \" >&6; }\n-if test \"${libgo_cv_lib_sjlj_exceptions+set}\" = set; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-\n-void bar ();\n-void clean (int *);\n-void foo ()\n-{\n-  int i __attribute__ ((cleanup (clean)));\n-  bar();\n-}\n-\n-_ACEOF\n-CFLAGS_hold=$CFLAGS\n-CFLAGS=\"--save-temps -fexceptions\"\n-libgo_cv_lib_sjlj_exceptions=unknown\n-if ac_fn_c_try_compile; then :\n-  if grep _Unwind_SjLj_Resume conftest.s >/dev/null 2>&1; then\n-    libgo_cv_lib_sjlj_exceptions=yes\n-  elif grep _Unwind_Resume conftest.s >/dev/null 2>&1; then\n-    libgo_cv_lib_sjlj_exceptions=no\n-  fi\n-fi\n-CFLAGS=$CFLAGS_hold\n-rm -f conftest*\n-\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgo_cv_lib_sjlj_exceptions\" >&5\n-$as_echo \"$libgo_cv_lib_sjlj_exceptions\" >&6; }\n-\n-if test \"$enable_sjlj_exceptions\" = \"auto\"; then\n-  enable_sjlj_exceptions=$libgo_cv_lib_sjlj_exceptions\n-fi\n-\n-case $enable_sjlj_exceptions in\n-yes)\n-\n-$as_echo \"#define LIBGO_SJLJ_EXCEPTIONS 1\" >>confdefs.h\n-\n-  ;;\n-no)\n-  ;;\n-*)\n-  as_fn_error \"unable to detect exception model\" \"$LINENO\" 5\n-  ;;\n-esac\n-\n for ac_header in sched.h sys/file.h sys/mman.h syscall.h sys/epoll.h sys/inotify.h sys/ptrace.h sys/syscall.h sys/user.h sys/utsname.h sys/select.h sys/socket.h net/if.h net/if_arp.h net/route.h netpacket/packet.h sys/prctl.h sys/mount.h sys/vfs.h sys/statfs.h sys/timex.h sys/sysinfo.h utime.h linux/ether.h linux/fs.h linux/reboot.h netinet/icmp6.h netinet/in_syst.h netinet/ip.h netinet/ip_mroute.h netinet/if_ether.h\n do :\n   as_ac_Header=`$as_echo \"ac_cv_header_$ac_header\" | $as_tr_sh`"}, {"sha": "7c403a5d78c43fe1669fc278ccaabfaaaf78d9d3", "filename": "libgo/configure.ac", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ea73ae3b8b3df5d0b015df5536c9fe4875c8a4f/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ea73ae3b8b3df5d0b015df5536c9fe4875c8a4f/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=5ea73ae3b8b3df5d0b015df5536c9fe4875c8a4f", "patch": "@@ -473,56 +473,6 @@ AC_C_BIGENDIAN\n \n GCC_CHECK_UNWIND_GETIPINFO\n \n-AC_ARG_ENABLE(sjlj-exceptions,\n-  AC_HELP_STRING([--enable-sjlj-exceptions],\n-\t\t [force use of builtin_setjmp for exceptions]),\n-  [case \"$enableval\" in\n-   yes|no|auto) ;;\n-   *) AC_MSG_ERROR([unknown argument to --enable-sjlj-exceptions]) ;;\n-   esac],\n-  [enable_sjlj_exceptions=auto])\n-\n-AC_CACHE_CHECK([whether to use setjmp/longjmp exceptions],\n-[libgo_cv_lib_sjlj_exceptions],\n-[AC_LANG_CONFTEST(\n-  [AC_LANG_SOURCE([\n-void bar ();\n-void clean (int *);\n-void foo ()\n-{\n-  int i __attribute__ ((cleanup (clean)));\n-  bar();\n-}\n-])])\n-CFLAGS_hold=$CFLAGS\n-CFLAGS=\"--save-temps -fexceptions\"\n-libgo_cv_lib_sjlj_exceptions=unknown\n-AS_IF([ac_fn_c_try_compile],\n-  [if grep _Unwind_SjLj_Resume conftest.s >/dev/null 2>&1; then\n-    libgo_cv_lib_sjlj_exceptions=yes\n-  elif grep _Unwind_Resume conftest.s >/dev/null 2>&1; then\n-    libgo_cv_lib_sjlj_exceptions=no\n-  fi])\n-CFLAGS=$CFLAGS_hold\n-rm -f conftest*\n-])\n-\n-if test \"$enable_sjlj_exceptions\" = \"auto\"; then\n-  enable_sjlj_exceptions=$libgo_cv_lib_sjlj_exceptions\n-fi\n-\n-case $enable_sjlj_exceptions in\n-yes)\n-  AC_DEFINE(LIBGO_SJLJ_EXCEPTIONS, 1,\n-\t[Define if the C++ compiler is configured for setjmp/longjmp exceptions.])\n-  ;;\n-no)\n-  ;;\n-*)\n-  AC_MSG_ERROR([unable to detect exception model])\n-  ;;\n-esac\n-\n AC_CHECK_HEADERS(sched.h sys/file.h sys/mman.h syscall.h sys/epoll.h sys/inotify.h sys/ptrace.h sys/syscall.h sys/user.h sys/utsname.h sys/select.h sys/socket.h net/if.h net/if_arp.h net/route.h netpacket/packet.h sys/prctl.h sys/mount.h sys/vfs.h sys/statfs.h sys/timex.h sys/sysinfo.h utime.h linux/ether.h linux/fs.h linux/reboot.h netinet/icmp6.h netinet/in_syst.h netinet/ip.h netinet/ip_mroute.h netinet/if_ether.h)\n \n AC_CHECK_HEADERS([linux/filter.h linux/if_addr.h linux/if_ether.h linux/if_tun.h linux/netlink.h linux/rtnetlink.h], [], [],"}, {"sha": "87d9eb3ef4e96ea13bf69c1dd13b3b733a815ff3", "filename": "libgo/runtime/go-unwind.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ea73ae3b8b3df5d0b015df5536c9fe4875c8a4f/libgo%2Fruntime%2Fgo-unwind.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ea73ae3b8b3df5d0b015df5536c9fe4875c8a4f/libgo%2Fruntime%2Fgo-unwind.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-unwind.c?ref=5ea73ae3b8b3df5d0b015df5536c9fe4875c8a4f", "patch": "@@ -141,7 +141,7 @@ __go_check_defer (_Bool *frame)\n \n   hdr = (struct _Unwind_Exception *) g->exception;\n \n-#ifdef LIBGO_SJLJ_EXCEPTIONS\n+#ifdef __USING_SJLJ_EXCEPTIONS__\n   _Unwind_SjLj_Resume_or_Rethrow (hdr);\n #else\n #if defined(_LIBUNWIND_STD_ABI)"}]}