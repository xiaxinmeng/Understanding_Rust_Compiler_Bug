{"sha": "2d76292bd6719d687bc77051da265df8ed7f5a61", "node_id": "C_kwDOANBUbNoAKDJkNzYyOTJiZDY3MTlkNjg3YmM3NzA1MWRhMjY1ZGY4ZWQ3ZjVhNjE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-18T10:33:14Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-19T18:15:15Z"}, "message": "libstdc++: Begin lifetime of chars in constexpr std::string [PR103295]\n\nClang gives errors for constexpr std::string because the memory returned\nby std::allocator<T>::allocate does not contain any objects yet, and\nattempting to set them using char_traits::assign or char_traits::copy\nfails with:\n\nassignment to object outside its lifetime is not allowed in a constant expression\n              *__result = *__first;\n                        ^\nThis adds code to std::char_traits to use std::construct_at to begin\nlifetimes when called during constant evaluation. To support\nspecializations of std::basic_string that don't use std::char_traits\nthere is now another layer of wrapper around the allocator_traits, so\nthat the lifetime of characters is begun as soon as the memory is\nallocated. By doing it in the char traits and allocator traits, the rest\nof basic_string can ignore the problem.\n\nWhile modifying char_traits::copy and char_traits::assign to begin\nlifetimes for the constexpr cases, I also replaced their uses of\nstd::copy and std::fill_n respectively. That means we don't need\n<bits/stl_algobase.h> for char_traits.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/103295\n\t* include/bits/basic_string.h (_Alloc_traits): Replace typedef\n\twith struct for C++20 mode.\n\t* include/bits/basic_string.tcc (_M_replace): Use _Alloc_traits\n\tfor allocation.\n\t* include/bits/char_traits.h (__gnu_cxx::char_traits::assign):\n\tUse std::_Construct during constant evaluation.\n\t(__gnu_cxx::char_traits::assign(CharT*, const CharT*, size_t)):\n\tLikewise. Replace std::fill_n with memset or manual loop.\n\t(__gnu_cxx::char_traits::copy): Likewise, replacing std::copy\n\twith memcpy.\n\t* include/ext/vstring.h: Include <bits/stl_algobase.h> for\n\tstd::min.\n\t* include/std/string_view: Likewise.\n\t* testsuite/21_strings/basic_string/capacity/char/resize_and_overwrite.cc:\n\tAdd constexpr test.", "tree": {"sha": "f1f995d3b5c5adaa43f7cd4a722c872f03505553", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1f995d3b5c5adaa43f7cd4a722c872f03505553"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d76292bd6719d687bc77051da265df8ed7f5a61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d76292bd6719d687bc77051da265df8ed7f5a61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d76292bd6719d687bc77051da265df8ed7f5a61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d76292bd6719d687bc77051da265df8ed7f5a61/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "458d2c689963d8461d84670a3d8988cd6ecbfd81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/458d2c689963d8461d84670a3d8988cd6ecbfd81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/458d2c689963d8461d84670a3d8988cd6ecbfd81"}], "stats": {"total": 156, "additions": 141, "deletions": 15}, "files": [{"sha": "6e7de738308a53edef952940c7b1bcb6618a5adc", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d76292bd6719d687bc77051da265df8ed7f5a61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d76292bd6719d687bc77051da265df8ed7f5a61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=2d76292bd6719d687bc77051da265df8ed7f5a61", "patch": "@@ -87,7 +87,37 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     {\n       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template\n \trebind<_CharT>::other _Char_alloc_type;\n+\n+#if __cpp_lib_constexpr_string < 201907L\n       typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;\n+#else\n+      template<typename _Traits2, typename _Dummy_for_PR85282>\n+\tstruct _Alloc_traits_impl : __gnu_cxx::__alloc_traits<_Char_alloc_type>\n+\t{\n+\t  typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Base;\n+\n+\t  [[__gnu__::__always_inline__]]\n+\t  static constexpr typename _Base::pointer\n+\t  allocate(_Char_alloc_type& __a, typename _Base::size_type __n)\n+\t  {\n+\t    pointer __p = _Base::allocate(__a, __n);\n+\t    if (__builtin_is_constant_evaluated())\n+\t      // Begin the lifetime of characters in allocated storage.\n+\t      for (size_type __i = 0; __i < __n; ++__i)\n+\t\tstd::construct_at(__builtin_addressof(__p[__i]));\n+\t    return __p;\n+\t  }\n+\t};\n+\n+      template<typename _Dummy_for_PR85282>\n+\tstruct _Alloc_traits_impl<char_traits<_CharT>, _Dummy_for_PR85282>\n+\t: __gnu_cxx::__alloc_traits<_Char_alloc_type>\n+\t{\n+\t  // std::char_traits begins the lifetime of characters.\n+\t};\n+\n+      using _Alloc_traits = _Alloc_traits_impl<_Traits, void>;\n+#endif\n \n       // Types:\n     public:\n@@ -485,7 +515,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       basic_string()\n       _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)\n       : _M_dataplus(_M_local_data())\n-      { _M_set_length(0); }\n+      {\n+\t_M_use_local_data();\n+\t_M_set_length(0);\n+      }\n \n       /**\n        *  @brief  Construct an empty string using allocator @a a.\n@@ -494,7 +527,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       explicit\n       basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT\n       : _M_dataplus(_M_local_data(), __a)\n-      { _M_set_length(0); }\n+      {\n+\t_M_use_local_data();\n+\t_M_set_length(0);\n+      }\n \n       /**\n        *  @brief  Construct string with copy of value of @a __str."}, {"sha": "374406c0e135dfdd1a72c8acc874bd40cf25b200", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d76292bd6719d687bc77051da265df8ed7f5a61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d76292bd6719d687bc77051da265df8ed7f5a61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=2d76292bd6719d687bc77051da265df8ed7f5a61", "patch": "@@ -490,7 +490,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cpp_lib_is_constant_evaluated\n \t  if (__builtin_is_constant_evaluated())\n \t    {\n-\t      auto __newp = this->_M_get_allocator().allocate(__new_size);\n+\t      auto __newp = _Alloc_traits::allocate(_M_get_allocator(),\n+\t\t\t\t\t\t    __new_size);\n \t      _S_copy(__newp, this->_M_data(), __pos);\n \t      _S_copy(__newp + __pos, __s, __len2);\n \t      _S_copy(__newp + __pos + __len2, __p + __len1, __how_much);\n@@ -569,6 +570,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n \t  __p = _M_create(__n, __capacity);\n \t  this->_S_copy(__p, _M_data(), length()); // exclude trailing null\n+#if __cpp_lib_is_constant_evaluated\n+\t  if (__builtin_is_constant_evaluated())\n+\t    traits_type::assign(__p + length(), __n - length(), _CharT());\n+#endif\n \t  _M_dispose();\n \t  _M_data(__p);\n \t  _M_capacity(__n);"}, {"sha": "b1cdc55ea61278d297035ed988ae4d6d80aea2a4", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 80, "deletions": 12, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d76292bd6719d687bc77051da265df8ed7f5a61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d76292bd6719d687bc77051da265df8ed7f5a61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=2d76292bd6719d687bc77051da265df8ed7f5a61", "patch": "@@ -36,11 +36,11 @@\n \n #pragma GCC system_header\n \n-#include <bits/stl_algobase.h>  // std::copy, std::fill_n\n #include <bits/postypes.h>      // For streampos\n #include <cwchar>               // For WEOF, wmemmove, wmemset, etc.\n-#if __cplusplus > 201703L\n+#if __cplusplus >= 202002L\n # include <compare>\n+# include <bits/stl_construct.h>\n #endif\n \n #ifndef _GLIBCXX_ALWAYS_INLINE\n@@ -100,7 +100,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       static _GLIBCXX14_CONSTEXPR void\n       assign(char_type& __c1, const char_type& __c2)\n-      { __c1 = __c2; }\n+      {\n+#if __cpp_constexpr_dynamic_alloc && __cpp_lib_is_constant_evaluated\n+\tif (std::is_constant_evaluated())\n+\t  std::construct_at(__builtin_addressof(__c1), __c2);\n+\telse\n+#endif\n+\t__c1 = __c2;\n+      }\n \n       static _GLIBCXX_CONSTEXPR bool\n       eq(const char_type& __c1, const char_type& __c2)\n@@ -240,8 +247,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     char_traits<_CharT>::\n     copy(char_type* __s1, const char_type* __s2, std::size_t __n)\n     {\n-      // NB: Inline std::copy so no recursive dependencies.\n-      std::copy(__s2, __s2 + __n, __s1);\n+#if __cpp_lib_is_constant_evaluated\n+      if (std::is_constant_evaluated())\n+\t{\n+\t  for (std::size_t __i = 0; __i < __n; ++__i)\n+\t    std::construct_at(__s1 + __i, __s2[__i]);\n+\t  return __s1;\n+\t}\n+#endif\n+\n+      __builtin_memcpy(__s1, __s2, __n * sizeof(char_type));\n       return __s1;\n     }\n \n@@ -251,8 +266,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     char_traits<_CharT>::\n     assign(char_type* __s, std::size_t __n, char_type __a)\n     {\n-      // NB: Inline std::fill_n so no recursive dependencies.\n-      std::fill_n(__s, __n, __a);\n+#if __cpp_lib_is_constant_evaluated\n+      if (std::is_constant_evaluated())\n+\t{\n+\t  for (std::size_t __i = 0; __i < __n; ++__i)\n+\t    std::construct_at(__s + __i, __a);\n+\t  return __s;\n+\t}\n+#endif\n+\n+      if _GLIBCXX17_CONSTEXPR (sizeof(_CharT) == 1 && __is_trivial(_CharT))\n+\t{\n+\t  unsigned char __c;\n+\t  __builtin_memcpy(&__c, __builtin_addressof(__a), 1);\n+\t  __builtin_memset(__s, __c, __n);\n+\t}\n+      else\n+\t{\n+\t  for (std::size_t __i = 0; __i < __n; ++__i)\n+\t    __s[__i] = __a;\n+\t}\n       return __s;\n     }\n \n@@ -304,7 +337,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       static _GLIBCXX17_CONSTEXPR void\n       assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT\n-      { __c1 = __c2; }\n+      {\n+#if __cpp_constexpr_dynamic_alloc && __cpp_lib_is_constant_evaluated\n+\tif (std::is_constant_evaluated())\n+\t  std::construct_at(__builtin_addressof(__c1), __c2);\n+\telse\n+#endif\n+\t__c1 = __c2;\n+      }\n \n       static _GLIBCXX_CONSTEXPR bool\n       eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT\n@@ -435,7 +475,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       static _GLIBCXX17_CONSTEXPR void\n       assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT\n-      { __c1 = __c2; }\n+      {\n+#if __cpp_constexpr_dynamic_alloc && __cpp_lib_is_constant_evaluated\n+\tif (std::is_constant_evaluated())\n+\t  std::construct_at(__builtin_addressof(__c1), __c2);\n+\telse\n+#endif\n+\t__c1 = __c2;\n+      }\n \n       static _GLIBCXX_CONSTEXPR bool\n       eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT\n@@ -556,7 +603,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       static _GLIBCXX17_CONSTEXPR void\n       assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT\n-      { __c1 = __c2; }\n+      {\n+#if __cpp_constexpr_dynamic_alloc && __cpp_lib_is_constant_evaluated\n+\tif (std::is_constant_evaluated())\n+\t  std::construct_at(__builtin_addressof(__c1), __c2);\n+\telse\n+#endif\n+\t__c1 = __c2;\n+      }\n \n       static _GLIBCXX_CONSTEXPR bool\n       eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT\n@@ -692,7 +746,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       static _GLIBCXX17_CONSTEXPR void\n       assign(char_type& __c1, const char_type& __c2) noexcept\n-      { __c1 = __c2; }\n+      {\n+#if __cpp_constexpr_dynamic_alloc && __cpp_lib_is_constant_evaluated\n+\tif (std::is_constant_evaluated())\n+\t  std::construct_at(__builtin_addressof(__c1), __c2);\n+\telse\n+#endif\n+\t__c1 = __c2;\n+      }\n \n       static constexpr bool\n       eq(const char_type& __c1, const char_type& __c2) noexcept\n@@ -806,7 +867,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       static _GLIBCXX17_CONSTEXPR void\n       assign(char_type& __c1, const char_type& __c2) noexcept\n-      { __c1 = __c2; }\n+      {\n+#if __cpp_constexpr_dynamic_alloc && __cpp_lib_is_constant_evaluated\n+\tif (std::is_constant_evaluated())\n+\t  std::construct_at(__builtin_addressof(__c1), __c2);\n+\telse\n+#endif\n+\t__c1 = __c2;\n+      }\n \n       static constexpr bool\n       eq(const char_type& __c1, const char_type& __c2) noexcept"}, {"sha": "331282c01043aa87cf2b037b285214c36c1a7e1f", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d76292bd6719d687bc77051da265df8ed7f5a61/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d76292bd6719d687bc77051da265df8ed7f5a61/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=2d76292bd6719d687bc77051da265df8ed7f5a61", "patch": "@@ -38,6 +38,7 @@\n #include <ext/vstring_util.h>\n #include <ext/rc_string_base.h>\n #include <ext/sso_string_base.h>\n+#include <bits/stl_algobase.h> // std::min\n \n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {"}, {"sha": "f2863c1beb418f274b33668725113bfa1af8d1e1", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d76292bd6719d687bc77051da265df8ed7f5a61/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d76292bd6719d687bc77051da265df8ed7f5a61/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=2d76292bd6719d687bc77051da265df8ed7f5a61", "patch": "@@ -39,9 +39,11 @@\n \n #include <iosfwd>\n #include <bits/char_traits.h>\n+#include <bits/functexcept.h>\n #include <bits/functional_hash.h>\n #include <bits/range_access.h>\n #include <bits/ostream_insert.h>\n+#include <bits/stl_algobase.h>\n #include <ext/numeric_traits.h>\n \n #if __cplusplus >= 202002L"}, {"sha": "c9087b55190c1dfc5c11084e046229334d6e861f", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/char/resize_and_overwrite.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d76292bd6719d687bc77051da265df8ed7f5a61/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2Fresize_and_overwrite.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d76292bd6719d687bc77051da265df8ed7f5a61/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2Fresize_and_overwrite.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2Fresize_and_overwrite.cc?ref=2d76292bd6719d687bc77051da265df8ed7f5a61", "patch": "@@ -105,10 +105,24 @@ test04()\n   }\n }\n \n+constexpr bool\n+test05()\n+{\n+  std::string s;\n+  s.resize_and_overwrite(20, [](char* p, auto n) {\n+    *p = '!'; // direct assignment should be OK\n+    std::char_traits<char>::copy(p, \"constexpr\", 9);\n+    return 9;\n+  });\n+  VERIFY( s == \"constexpr\" );\n+  return true;\n+}\n+\n int main()\n {\n   test01();\n   test02();\n   test03();\n   test04();\n+  static_assert( test05() );\n }"}]}