{"sha": "5717e1f6488ce9b376e1f4a45787687538ec2993", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTcxN2UxZjY0ODhjZTliMzc2ZTFmNGE0NTc4NzY4NzUzOGVjMjk5Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-09-25T12:46:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-09-25T12:46:54Z"}, "message": "re PR tree-optimization/54676 (ICE: in set_value_range, at tree-vrp.c:433)\n\n\tPR tree-optimization/54676\n\t* tree-vrp.c (set_and_canonicalize_value_range): Handle\n\tone bit precision properly.\n\n\t* gcc.dg/pr54676.c: New test.\n\nFrom-SVN: r191703", "tree": {"sha": "b63a6329eba3c58e20da4ed4266ce308aa4285c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b63a6329eba3c58e20da4ed4266ce308aa4285c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5717e1f6488ce9b376e1f4a45787687538ec2993", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5717e1f6488ce9b376e1f4a45787687538ec2993", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5717e1f6488ce9b376e1f4a45787687538ec2993", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5717e1f6488ce9b376e1f4a45787687538ec2993/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dadbefd3596a06d06f539e4c0048326a26ac3c75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dadbefd3596a06d06f539e4c0048326a26ac3c75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dadbefd3596a06d06f539e4c0048326a26ac3c75"}], "stats": {"total": 65, "additions": 63, "deletions": 2}, "files": [{"sha": "df7ab16a2b3435c9cfaea4cef6a19febd7da4e5d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5717e1f6488ce9b376e1f4a45787687538ec2993/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5717e1f6488ce9b376e1f4a45787687538ec2993/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5717e1f6488ce9b376e1f4a45787687538ec2993", "patch": "@@ -1,5 +1,9 @@\n 2012-09-25  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/54676\n+\t* tree-vrp.c (set_and_canonicalize_value_range): Handle\n+\tone bit precision properly.\n+\n \tPR other/54692\n \t* configure.ac (CFLAGS, CXXFLAGS): Remove -Ofast or -Og\n \tproperly."}, {"sha": "078ebbf048003d5ed26783340bcec5a48117a181", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5717e1f6488ce9b376e1f4a45787687538ec2993/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5717e1f6488ce9b376e1f4a45787687538ec2993/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5717e1f6488ce9b376e1f4a45787687538ec2993", "patch": "@@ -1,3 +1,8 @@\n+2012-09-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/54676\n+\t* gcc.dg/pr54676.c: New test.\n+\n 2012-09-25  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/53663"}, {"sha": "97032edf623fa0c0b70a7accaf13c75610f7e54d", "filename": "gcc/testsuite/gcc.dg/pr54676.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5717e1f6488ce9b376e1f4a45787687538ec2993/gcc%2Ftestsuite%2Fgcc.dg%2Fpr54676.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5717e1f6488ce9b376e1f4a45787687538ec2993/gcc%2Ftestsuite%2Fgcc.dg%2Fpr54676.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr54676.c?ref=5717e1f6488ce9b376e1f4a45787687538ec2993", "patch": "@@ -0,0 +1,23 @@\n+/* PR tree-optimization/54676 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fno-tree-ccp -fno-tree-copy-prop -fno-tree-fre -ftree-vrp\" } */\n+\n+struct S\n+{\n+  int s:1;\n+};\n+\n+struct S bar (void);\n+\n+int a;\n+\n+void\n+foo (int x)\n+{\n+  struct S s = bar ();\n+  while (!a)\n+    {\n+      int l = 94967295;\n+      a = x || (s.s &= l);\n+    }\n+}"}, {"sha": "b728dddb87113bafa5b93ffeb1ad60eed56c0dd5", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5717e1f6488ce9b376e1f4a45787687538ec2993/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5717e1f6488ce9b376e1f4a45787687538ec2993/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=5717e1f6488ce9b376e1f4a45787687538ec2993", "patch": "@@ -501,8 +501,19 @@ set_and_canonicalize_value_range (value_range_t *vr, enum value_range_type t,\n      to adjust them.  */\n   if (tree_int_cst_lt (max, min))\n     {\n-      tree one = build_int_cst (TREE_TYPE (min), 1);\n-      tree tmp = int_const_binop (PLUS_EXPR, max, one);\n+      tree one, tmp;\n+\n+      /* For one bit precision if max < min, then the swapped\n+\t range covers all values, so for VR_RANGE it is varying and\n+\t for VR_ANTI_RANGE empty range, so drop to varying as well.  */\n+      if (TYPE_PRECISION (TREE_TYPE (min)) == 1)\n+\t{\n+\t  set_value_range_to_varying (vr);\n+\t  return;\n+\t}\n+\n+      one = build_int_cst (TREE_TYPE (min), 1);\n+      tmp = int_const_binop (PLUS_EXPR, max, one);\n       max = int_const_binop (MINUS_EXPR, min, one);\n       min = tmp;\n \n@@ -531,6 +542,24 @@ set_and_canonicalize_value_range (value_range_t *vr, enum value_range_type t,\n \t  set_value_range_to_varying (vr);\n \t  return;\n \t}\n+      else if (TYPE_PRECISION (TREE_TYPE (min)) == 1\n+\t       && !TYPE_UNSIGNED (TREE_TYPE (min))\n+\t       && (is_min || is_max))\n+\t{\n+\t  /* For signed 1-bit precision, one is not in-range and\n+\t     thus adding/subtracting it would result in overflows.  */\n+\t  if (operand_equal_p (min, max, 0))\n+\t    {\n+\t      min = max = is_min ? vrp_val_max (TREE_TYPE (min))\n+\t\t\t\t : vrp_val_min (TREE_TYPE (min));\n+\t      t = VR_RANGE;\n+\t    }\n+\t  else\n+\t    {\n+\t      set_value_range_to_varying (vr);\n+\t      return;\n+\t    }\n+\t}\n       else if (is_min\n \t       /* As a special exception preserve non-null ranges.  */\n \t       && !(TYPE_UNSIGNED (TREE_TYPE (min))"}]}