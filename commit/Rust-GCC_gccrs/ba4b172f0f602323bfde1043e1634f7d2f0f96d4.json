{"sha": "ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE0YjE3MmYwZjYwMjMyM2JmZGUxMDQzZTE2MzRmN2QyZjBmOTZkNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-01-23T23:35:20Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-01-23T23:35:20Z"}, "message": "9827.cc: New.\n\n2005-01-23  Paolo Carlini  <pcarlini@suse.de>\n\n\t* testsuite/27_io/basic_ostream/cons/wchar_t/9827.cc: New.\n\t* testsuite/27_io/basic_ostream/endl/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/ends/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/ends/wchar_t/2.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/exceptions/wchar_t/9561.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/flush/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/flush/wchar_t/2.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/flush/wchar_t/\n\texceptions_badbit_throw.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n\twchar_t/2.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n\twchar_t/3.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n\twchar_t/4.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n\twchar_t/4402.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n\twchar_t/5.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n\twchar_t/6.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n\twchar_t/9555-oa.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n\twchar_t/exceptions_badbit_throw.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n\twchar_t/exceptions_failbit_throw.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_character/\n\twchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_character/\n\twchar_t/2.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_character/\n\twchar_t/3.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_character/\n\twchar_t/4.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_character/\n\twchar_t/5.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_character/\n\twchar_t/6.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_character/\n\twchar_t/9555-oc.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/\n\twchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/\n\twchar_t/2.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/\n\twchar_t/3.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/\n\twchar_t/4.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/\n\twchar_t/5.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/\n\twchar_t/9318-out.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/\n\twchar_t/9424-out.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/\n\twchar_t/9555-oo.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/\n\terror_failbit.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/\n\texceptions_badbit_throw.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/\n\texceptions_failbit_throw.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/\n\texceptions_null.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/put/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/put/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/seekp/char/\n\texceptions_badbit_throw.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/seekp/wchar_t/\n\t2346-fstream.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/seekp/wchar_t/\n\t2346-sstream.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/seekp/wchar_t/\n\texceptions_badbit_throw.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/sentry/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/sentry/wchar_t/2.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/tellp/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/tellp/wchar_t/2.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/tellp/wchar_t/\n\texceptions_badbit_throw.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/write/wchar_t/1.cc: Likewise.\n\n\t* testsuite/data/wostream_inserter_char-1.tst: Likewise.\n\t* testsuite/data/wostream_inserter_char-1.txt: Likewise.\n\t* testsuite/data/wostream_inserter_other-1.tst: Likewise.\n\t* testsuite/data/wostream_inserter_other-2.tst: Likewise.\n\t* testsuite/data/wostream_seeks-1.tst: Likewise.\n\n\t* testsuite/27_io/basic_ostream/endl/char/1.cc: Minor tweaks.\n\t* testsuite/27_io/basic_ostream/ends/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/exceptions/char/9561.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/flush/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/flush/char/2.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/flush/char/\n\texceptions_badbit_throw.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n\tchar/2.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n\tchar/3.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n\tchar/4.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n\tchar/4402.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n\tchar/5.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n\tchar/6.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_character/\n\tchar/4.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/char/\n\t2.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/char/\n\t5.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/char/\n\terror_failbit.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/char/\n\texceptions_badbit_throw.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/char/\n\texceptions_failbit_throw.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/char/\n\texceptions_null.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/put/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/seekp/char/\n\texceptions_badbit_throw.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/sentry/char/2.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/write/char/1.cc: Likewise.\n\nFrom-SVN: r94129", "tree": {"sha": "be6c98097023463dca2dc72c14b483994349d764", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be6c98097023463dca2dc72c14b483994349d764"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/comments", "author": null, "committer": null, "parents": [{"sha": "69029c61aa94cec4fb273dcfc7693f754d9b4452", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69029c61aa94cec4fb273dcfc7693f754d9b4452", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69029c61aa94cec4fb273dcfc7693f754d9b4452"}], "stats": {"total": 5867, "additions": 5762, "deletions": 105}, "files": [{"sha": "854c8c22ce13faaa123aa7d88f528952016c835c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -1,3 +1,133 @@\n+2005-01-23  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* testsuite/27_io/basic_ostream/cons/wchar_t/9827.cc: New.\n+\t* testsuite/27_io/basic_ostream/endl/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/ends/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/ends/wchar_t/2.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/exceptions/wchar_t/9561.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/flush/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/flush/wchar_t/2.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/flush/wchar_t/\n+\texceptions_badbit_throw.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n+\twchar_t/2.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n+\twchar_t/3.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n+\twchar_t/4.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n+\twchar_t/4402.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n+\twchar_t/5.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n+\twchar_t/6.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n+\twchar_t/9555-oa.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n+\twchar_t/exceptions_badbit_throw.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n+\twchar_t/exceptions_failbit_throw.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_character/\n+\twchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_character/\n+\twchar_t/2.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_character/\n+\twchar_t/3.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_character/\n+\twchar_t/4.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_character/\n+\twchar_t/5.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_character/\n+\twchar_t/6.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_character/\n+\twchar_t/9555-oc.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/\n+\twchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/\n+\twchar_t/2.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/\n+\twchar_t/3.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/\n+\twchar_t/4.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/\n+\twchar_t/5.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/\n+\twchar_t/9318-out.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/\n+\twchar_t/9424-out.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/\n+\twchar_t/9555-oo.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/\n+\terror_failbit.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/\n+\texceptions_badbit_throw.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/\n+\texceptions_failbit_throw.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/\n+\texceptions_null.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/put/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/put/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/seekp/char/\n+\texceptions_badbit_throw.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/seekp/wchar_t/\n+\t2346-fstream.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/seekp/wchar_t/\n+\t2346-sstream.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/seekp/wchar_t/\n+\texceptions_badbit_throw.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/sentry/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/sentry/wchar_t/2.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/tellp/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/tellp/wchar_t/2.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/tellp/wchar_t/\n+\texceptions_badbit_throw.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/write/wchar_t/1.cc: Likewise.\n+\n+\t* testsuite/data/wostream_inserter_char-1.tst: Likewise.\n+\t* testsuite/data/wostream_inserter_char-1.txt: Likewise.\n+\t* testsuite/data/wostream_inserter_other-1.tst: Likewise.\n+\t* testsuite/data/wostream_inserter_other-2.tst: Likewise.\n+\t* testsuite/data/wostream_seeks-1.tst: Likewise.\n+\n+\t* testsuite/27_io/basic_ostream/endl/char/1.cc: Minor tweaks.\n+\t* testsuite/27_io/basic_ostream/ends/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/exceptions/char/9561.cc: Likewise. \n+\t* testsuite/27_io/basic_ostream/flush/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/flush/char/2.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/flush/char/\n+\texceptions_badbit_throw.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n+\tchar/2.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n+\tchar/3.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n+\tchar/4.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n+\tchar/4402.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n+\tchar/5.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_arithmetic/\n+\tchar/6.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_character/\n+\tchar/4.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/char/\n+\t2.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/char/\n+\t5.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/char/\n+\terror_failbit.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/char/\n+\texceptions_badbit_throw.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/char/\n+\texceptions_failbit_throw.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/char/\n+\texceptions_null.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/put/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/seekp/char/\n+\texceptions_badbit_throw.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/sentry/char/2.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/write/char/1.cc: Likewise.\n+\n 2005-01-23  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/type_traits (aligned_storage): Use __aligned__ instead"}, {"sha": "38c5ee0ef7f267d726e382c218e094e636b41ef2", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/cons/wchar_t/9827.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fcons%2Fwchar_t%2F9827.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fcons%2Fwchar_t%2F9827.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fcons%2Fwchar_t%2F9827.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <ostream>\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9827\n+class Buf : public std::wstreambuf\n+{\n+};\n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  Buf buf;\n+  wostream stream(&buf);\n+\n+  stream << 1;\n+  VERIFY(!stream.good());\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e5cd1212d05379ab3a03cbf760168e6f2e2c4c8a", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/endl/char/1.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fendl%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fendl%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fendl%2Fchar%2F1.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -1,6 +1,6 @@\n // 1999-07-22 bkoz\n \n-// Copyright (C) 1994, 1999, 2000, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1994, 1999, 2000, 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,7 +30,6 @@ void test01(void)\n \n   const char str_lit01[] = \"  venice \";\n   const std::string str01(\" santa barbara \");\n-  std::string str02(str_lit01);\n   std::string str04;\n   std::string str05;\n "}, {"sha": "67b594e18b51ceffc45d471bd7a7ba9214501b3d", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/endl/wchar_t/1.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fendl%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fendl%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fendl%2Fwchar_t%2F1.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,53 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.7 standard basic_ostream manipulators\n+\n+#include <ostream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01(void)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  const wchar_t str_lit01[] = L\"  venice \";\n+  const std::wstring str01(L\" santa barbara \");\n+  std::wstring str04;\n+  std::wstring str05;\n+\n+  std::wostringstream oss01(str01);\n+  std::wostringstream oss02;\n+  typedef std::wostringstream::traits_type traits_type;\n+\n+  // template<_CharT, _Traits>\n+  //  basic_ostream<_CharT, _Traits>& ends(basic_ostream<_Char, _Traits>& os)\n+  oss01 << std::endl;\n+  str04 = oss01.str();\n+  VERIFY( str04.size() == str01.size() );\n+\n+  oss02 << std::endl;\n+  str05 = oss02.str();\n+  VERIFY( str05.size() == 1 );\n+}\n+\n+int main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "5fa6ae24b99281bf214cbde5ac2ee6b31ec8e440", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/ends/char/1.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fends%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fends%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fends%2Fchar%2F1.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -1,6 +1,6 @@\n // 1999-07-22 bkoz\n \n-// Copyright (C) 1994, 1999, 2000, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1994, 1999, 2000, 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,13 +30,11 @@ void test01(void)\n \n   const char str_lit01[] = \"  venice \";\n   const std::string str01(\" santa barbara \");\n-  std::string str02(str_lit01);\n   std::string str04;\n   std::string str05;\n \n   std::ostringstream oss01(str01);\n   std::ostringstream oss02;\n-  typedef std::ostringstream::traits_type traits_type;\n \n   // template<_CharT, _Traits>\n   //  basic_ostream<_CharT, _Traits>& ends(basic_ostream<_Char, _Traits>& os)"}, {"sha": "d6feba135f40ec4e611e73111357d9134d6e14ed", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/ends/wchar_t/1.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fends%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fends%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fends%2Fwchar_t%2F1.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,53 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.7 standard basic_ostream manipulators\n+\n+#include <ostream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01(void)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  const wchar_t str_lit01[] = L\"  venice \";\n+  const std::wstring str01(L\" santa barbara \");\n+  std::wstring str04;\n+  std::wstring str05;\n+\n+  std::wostringstream oss01(str01);\n+  std::wostringstream oss02;\n+\n+  // template<_CharT, _Traits>\n+  //  basic_ostream<_CharT, _Traits>& ends(basic_ostream<_Char, _Traits>& os)\n+  oss01 << std::ends;\n+  str04 = oss01.str();\n+  VERIFY( str04.size() == str01.size() );\n+\n+  oss02 << std::ends;\n+  str05 = oss02.str();\n+  VERIFY( str05.size() == 1 );\n+  VERIFY( str05[0] == wchar_t() );\n+}\n+\n+int main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "b79ddce10a42ace51bc3110e3208df4e9cc3cdd8", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/ends/wchar_t/2.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fends%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fends%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fends%2Fwchar_t%2F2.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,62 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.7 standard basic_ostream manipulators\n+\n+#include <ostream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// based vaguely on this:\n+// http://gcc.gnu.org/ml/libstdc++/2000-q2/msg00109.html\n+void test02()\n+{\n+  using namespace std;\n+  typedef wostringstream::int_type int_type;\n+\n+  bool test __attribute__((unused)) = true;\n+  wostringstream osst_01;\n+  const wstring str_00(L\"herbie_hancock\");\n+  int_type len1 = str_00.size();\n+  osst_01 << str_00;\n+  VERIFY( static_cast<int_type>(osst_01.str().size()) == len1 );\n+\n+  osst_01 << ends;\n+\n+  const wstring str_01(L\"speak like a child\");\n+  int_type len2 = str_01.size();\n+  osst_01 << str_01;\n+  int_type len3 = osst_01.str().size();\n+  VERIFY( len1 < len3 );\n+  VERIFY( len3 == len1 + len2 + 1 );\n+\n+  osst_01 << ends;\n+\n+  const wstring str_02(L\"+ inventions and dimensions\");\n+  int_type len4 = str_02.size();\n+  osst_01 << str_02;\n+  int_type len5 = osst_01.str().size();\n+  VERIFY( len3 < len5 );\n+  VERIFY( len5 == len3 + len4 + 1 );\n+}\n+\n+int main()\n+{ \n+  test02();\n+  return 0;\n+}"}, {"sha": "e7a7a5447b103d9794d8752a678dc3eacb49ac3c", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/exceptions/char/9561.cc", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fexceptions%2Fchar%2F9561.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fexceptions%2Fchar%2F9561.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fexceptions%2Fchar%2F9561.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -1,6 +1,6 @@\n // 2003-03-08  Jerry Quinn  <jlquinn@optonline.net>\n \n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,10 +27,12 @@ struct foobar: std::exception { };\n \n struct buf: std::streambuf\n {\n-    virtual int_type overflow (int_type) {\n-        throw foobar ();\n-        return -1;\n-    }\n+  virtual int_type\n+  overflow(int_type)\n+  {\n+    throw foobar();\n+    return int_type();\n+  }\n };\n \n void test01()\n@@ -40,22 +42,25 @@ void test01()\n \n   buf b;\n   std::ostream strm (&b);\n-  strm.exceptions (std::ios::badbit);\n+  strm.exceptions(std::ios::badbit);\n \n-  try {\n-    strm << std::endl;\n-  }\n-  catch (foobar) {\n-    // strm should throw foobar and not do anything else\n-    VERIFY(strm.bad());\n-    return;\n-  }\n-  catch (...) {\n-    VERIFY(false);\n-    return;\n-  }\n+  try\n+    {\n+      strm << std::endl;\n+    }\n+  catch(foobar)\n+    {\n+      // strm should throw foobar and not do anything else\n+      VERIFY(strm.bad());\n+      return;\n+    }\n+  catch(...)\n+    {\n+      VERIFY( false );\n+      return;\n+    }\n \n-  VERIFY(false);\n+  VERIFY( false );\n }\n \n int main()"}, {"sha": "f8cc446ce9325b03b501f2153a5278ad863983fb", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/exceptions/wchar_t/9561.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fexceptions%2Fwchar_t%2F9561.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fexceptions%2Fwchar_t%2F9561.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fexceptions%2Fwchar_t%2F9561.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,67 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <ostream>\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9561\n+struct foobar: std::exception { };\n+\n+struct buf: std::wstreambuf\n+{\n+  virtual int_type\n+  overflow(int_type)\n+  {\n+    throw foobar();\n+    return int_type();\n+  }\n+};\n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  buf b;\n+  std::wostream strm(&b);\n+  strm.exceptions(std::wios::badbit);\n+\n+  try\n+    {\n+      strm << std::endl;\n+    }\n+  catch(foobar)\n+    {\n+      // strm should throw foobar and not do anything else\n+      VERIFY(strm.bad());\n+      return;\n+    }\n+  catch(...)\n+    {\n+      VERIFY( false );\n+      return;\n+    }\n+  VERIFY( false );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0156058972215216303c61f93e3993fc3638fe93", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/flush/char/1.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2F1.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -1,6 +1,6 @@\n // 1999-07-22 bkoz\n \n-// Copyright (C) 1994, 1999, 2000, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1994, 1999, 2000, 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,13 +30,11 @@ void test01(void)\n \n   const char str_lit01[] = \"  venice \";\n   const std::string str01(\" santa barbara \");\n-  std::string str02(str_lit01);\n   std::string str04;\n   std::string str05;\n \n   std::ostringstream oss01(str01);\n   std::ostringstream oss02;\n-  typedef std::ostringstream::traits_type traits_type;\n \n   // template<_CharT, _Traits>\n   //  basic_ostream<_CharT, _Traits>& flush(basic_ostream<_Char, _Traits>& os)"}, {"sha": "9789d901d5ad201fd76711133d3293afa5e3fbfc", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/flush/char/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2F2.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -1,6 +1,6 @@\n // 2003-09-22  Petur Runolfsson  <peturr02@ru.is>\n \n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,7 +30,7 @@\n \n void test02()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   __gnu_test::sync_streambuf buf;\n   std::ostream os(&buf);"}, {"sha": "e434e2351e237ce68072afb5110b4aab3092b7ce", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/flush/char/exceptions_badbit_throw.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2Fexceptions_badbit_throw.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -54,7 +54,7 @@ void test01()\n     }\n   catch (...) \n     {\n-      VERIFY(false);\n+      VERIFY( false );\n     }\n }\n "}, {"sha": "eaf603144a5a9ee5dd4cde69136b1a1e311c8ce2", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/flush/wchar_t/1.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fwchar_t%2F1.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,52 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.7 standard basic_ostream manipulators\n+\n+#include <ostream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01(void)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  const wchar_t str_lit01[] = L\"  venice \";\n+  const std::wstring str01(L\" santa barbara \");\n+  std::wstring str04;\n+  std::wstring str05;\n+\n+  std::wostringstream oss01(str01);\n+  std::wostringstream oss02;\n+\n+  // template<_CharT, _Traits>\n+  //  basic_ostream<_CharT, _Traits>& flush(basic_ostream<_Char, _Traits>& os)\n+  oss01.flush();\n+  str04 = oss01.str();\n+  VERIFY( str04.size() == str01.size() );\n+\n+  oss02.flush();\n+  str05 = oss02.str();\n+  VERIFY( str05.size() == 0 );\n+}\n+\n+int main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "996941a44e56b123c16d3fa5917f02d19c446b0d", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/flush/wchar_t/2.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fwchar_t%2F2.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,64 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.6 Unformatted output functions\n+//\n+// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+// DR 60. What is a formatted input function?\n+// basic_ostream::flush() does not behave as an unformatted output function.\n+\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_test::sync_wstreambuf buf;\n+  std::wostream os(&buf);\n+  \n+  __gnu_test::sync_wstreambuf buf_tie;\n+  std::wostream os_tie(&buf_tie);\n+\n+  // No sentry should be constructed so os.tie()->flush() should not be\n+  // called.\n+  os.tie(&os_tie);\n+  \n+  os.flush();\n+\n+  VERIFY( os.good() );\n+  VERIFY( buf.sync_called() );\n+  VERIFY( !buf_tie.sync_called() );\n+\n+  // os.rdbuf()->pubsync() should be called even if !os.good().\n+  os.setstate(std::ios_base::eofbit);\n+\n+  os.flush();\n+\n+  VERIFY( os.rdstate() == std::ios_base::eofbit );\n+  VERIFY( buf.sync_called() );\n+  VERIFY( !buf_tie.sync_called() );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}\n+"}, {"sha": "41ffc5761184a06ab423bc7ecf06430a9d1d7508", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/flush/wchar_t/exceptions_badbit_throw.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fwchar_t%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fwchar_t%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fwchar_t%2Fexceptions_badbit_throw.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <ostream>\n+#include <streambuf>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+using namespace std;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  __gnu_test::fail_wstreambuf bib;\n+  wostream stream(&bib);\n+  stream.exceptions(ios_base::badbit);\n+\n+  try\n+    {\n+      stream.flush();\n+      VERIFY( false );\n+    }\n+  catch (const __gnu_test::positioning_error&) \n+    {\n+      // stream should set badbit and rethrow facet_error.\n+      VERIFY( stream.bad() );\n+      VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n+      VERIFY( !stream.eof() );\n+    }\n+  catch (...) \n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+// libstdc++/9546\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5fde7e91b2ec2d69512afd14b3377b048e969a53", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/char/2.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F2.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -1,7 +1,7 @@\n // 1999-11-15 Kevin Ediger  <kediger@licor.com>\n // test the floating point inserters (facet num_put)\n \n-// Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2002, 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -26,11 +26,10 @@\n #include <limits>\n #include <testsuite_hooks.h>\n \n-using namespace std;\n-\n void\n test02()\n {\n+  using namespace std;\n   bool test __attribute__((unused)) = true;\n \n   // Make sure we can output a long float in fixed format"}, {"sha": "58fa6c92cf2ebdc2e52d62eb04020f7d08171a75", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/char/3.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F3.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -1,7 +1,7 @@\n // 1999-11-15 Kevin Ediger  <kediger@licor.com>\n // test the floating point inserters (facet num_put)\n \n-// Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2002, 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -23,16 +23,16 @@\n #include <limits>\n #include <testsuite_hooks.h>\n \n-using namespace std;\n-\n template<typename T>\n bool\n test03_check(T n)\n {\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n   stringbuf strbuf;\n   ostream o(&strbuf);\n   const char *expect;\n-  bool test __attribute__((unused)) = true;\n \n   if (numeric_limits<T>::digits + 1 == 16)\n     expect = \"177777 ffff\";"}, {"sha": "77bf3a5a3310ea157237e266f6784049f7cd1c71", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/char/4.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F4.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -1,7 +1,7 @@\n // 1999-11-15 Kevin Ediger  <kediger@licor.com>\n // test the floating point inserters (facet num_put)\n \n-// Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2002, 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -23,16 +23,16 @@\n #include <sstream>\n #include <testsuite_hooks.h>\n \n-using namespace std;\n-\n // libstdc++/3655\n int\n test04()\n {\n-  stringbuf strbuf1, strbuf2;\n-  ostream o1(&strbuf1), o2(&strbuf2);\n+  using namespace std;\n   bool test __attribute__((unused)) = true;\n \n+  stringbuf strbuf1, strbuf2;\n+  ostream o1(&strbuf1), o2(&strbuf2);\n+  \n   o1 << hex << showbase << setw(6) << internal << 0xff;\n   VERIFY( strbuf1.str() == \"0x  ff\" );\n   "}, {"sha": "68d9e506f9b60ce86d98a2b278713feae24e4e5c", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/char/4402.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F4402.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F4402.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F4402.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -1,7 +1,7 @@\n // 1999-11-15 Kevin Ediger  <kediger@licor.com>\n // test the floating point inserters (facet num_put)\n \n-// Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2002, 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -26,12 +26,12 @@\n #include <limits>\n #include <testsuite_hooks.h>\n \n-using namespace std;\n-\n void\n test02()\n {\n+  using namespace std;\n   bool test __attribute__((unused)) = true;\n+\n   // make sure we can output a very long float\n   long double val = 1.2345678901234567890123456789e+1000L;\n   int prec = numeric_limits<long double>::digits10;\n@@ -47,7 +47,7 @@ test02()\n   cout << \"expect: \" << largebuf << endl;\n   cout << \"result: \" << os.str() << endl;\n #endif\n-  VERIFY(os && os.str() == largebuf);\n+  VERIFY( os && os.str() == largebuf );\n \n   // Make sure we can output a long float in fixed format\n   // without seg-faulting (libstdc++/4402)\n@@ -63,7 +63,7 @@ test02()\n   cout << \"expect: \" << largebuf << endl;\n   cout << \"result: \" << os2.str() << endl;\n #endif\n-  VERIFY(os2 && os2.str() == largebuf);\n+  VERIFY( os2 && os2.str() == largebuf );\n }\n \n int "}, {"sha": "4de6d6e62ca6ccfb1ffa0dfc4d7fe7327b718037", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/char/5.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F5.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -1,7 +1,7 @@\n // 1999-11-15 Kevin Ediger  <kediger@licor.com>\n // test the floating point inserters (facet num_put)\n \n-// Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2002, 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,12 +25,12 @@\n #include <limits>\n #include <testsuite_hooks.h>\n \n-using namespace std;\n-\n void\n test05()\n {\n+  using namespace std;\n   bool test __attribute__((unused)) = true;\n+\n   double pi = 3.14159265358979323846;\n   ostringstream ostr;\n   ostr.precision(20);"}, {"sha": "07559fe96914c08bc3ad8a379270c8890df2d008", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/char/6.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F6.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -1,7 +1,7 @@\n // 1999-11-15 Kevin Ediger  <kediger@licor.com>\n // test the floating point inserters (facet num_put)\n \n-// Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2002, 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,13 +25,13 @@\n #include <limits>\n #include <testsuite_hooks.h>\n \n-using namespace std;\n-\n // libstdc++/9151\n-int\n+void\n test06()\n {\n+  using namespace std;\n   bool test __attribute__((unused)) = true;\n+\n   int prec = numeric_limits<double>::digits10 + 2;\n   double oval = numeric_limits<double>::min();\n \n@@ -43,7 +43,6 @@ test06()\n   double ival;\n   istr >> ival;\n   VERIFY( abs(oval-ival)/oval < DBL_EPSILON ); \n-  return 0;\n }\n \n int "}, {"sha": "4d5a4c4bb19254a7ea1b9c5cb2601beb9b947b4b", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/wchar_t/2.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F2.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,53 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <iostream>\n+#include <iomanip>\n+#include <locale>\n+#include <sstream>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+void\n+test02()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  // Make sure we can output a long float in fixed format\n+  // without seg-faulting (libstdc++/4402)\n+  double val2 = 3.5e230;\n+\n+  wostringstream os2;\n+  os2.precision(3);\n+  os2.setf(wios::fixed);\n+\n+  // Check it can be done in a locale with grouping on.\n+  locale loc2 = __gnu_test::try_named_locale(\"de_DE\");\n+  os2.imbue(loc2);\n+  os2 << fixed << setprecision(3) << val2 << endl;\n+  os2 << endl;\n+  os2 << fixed << setprecision(1) << val2 << endl;\n+}\n+\n+int \n+main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "0078c71e4d5c54bbba5801c79cd7cc35ac64c122", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/wchar_t/3.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F3.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+bool\n+test03_check(T n)\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  wstringbuf strbuf;\n+  wostream o(&strbuf);\n+  const wchar_t *expect;\n+\n+  if (numeric_limits<T>::digits + 1 == 16)\n+    expect = L\"177777 ffff\";\n+  else if (numeric_limits<T>::digits + 1 == 32)\n+    expect = L\"37777777777 ffffffff\";\n+  else if (numeric_limits<T>::digits + 1 == 64)\n+    expect = L\"1777777777777777777777 ffffffffffffffff\";\n+  else\n+    expect = L\"wow, you've got some big numbers here\";\n+\n+  o << oct << n << L' ' << hex << n;\n+  VERIFY ( strbuf.str() == expect );\n+\n+  return test;\n+}\n+\n+void\n+test03()\n+{\n+  short s = -1;\n+  int i = -1;\n+  long l = -1;\n+\n+  test03_check(s);\n+  test03_check(i);\n+  test03_check(l);\n+}\n+\n+int \n+main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "4ad87a5372b5fa73e4037076ca841f6702704132", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/wchar_t/4.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F4.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <iomanip>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/3655\n+int\n+test04()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  wstringbuf strbuf1, strbuf2;\n+  wostream o1(&strbuf1), o2(&strbuf2);\n+\n+  o1 << hex << showbase << setw(6) << internal << 0xff;\n+  VERIFY( strbuf1.str() == L\"0x  ff\" );\n+  \n+  // ... vs internal-adjusted const char*-type objects\n+  o2 << hex << showbase << setw(6) << internal << L\"0xff\";\n+  VERIFY( strbuf2.str() == L\"  0xff\" );\n+\n+  return 0;\n+}\n+\n+int \n+main()\n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "e2db338e6a625f36192033e7ac62cabbdaef472b", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/wchar_t/4402.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F4402.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F4402.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F4402.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,71 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <cstdio> // for swprintf\n+#include <iostream>\n+#include <iomanip>\n+#include <sstream>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+void\n+test02()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  // make sure we can output a very long float\n+  long double val = 1.2345678901234567890123456789e+1000L;\n+  int prec = numeric_limits<long double>::digits10;\n+\n+  wostringstream os;\n+  os.precision(prec);\n+  os.setf(wios::scientific);\n+  os << val;\n+\n+  wchar_t largebuf[512];\n+  swprintf(largebuf, 512, L\"%.*Le\", prec, val);\n+#ifdef TEST_NUMPUT_VERBOSE\n+  cout << \"expect: \" << largebuf << endl;\n+  cout << \"result: \" << os.str() << endl;\n+#endif\n+  VERIFY( os && os.str() == largebuf );\n+\n+  // Make sure we can output a long float in fixed format\n+  // without seg-faulting (libstdc++/4402)\n+  double val2 = 3.5e230;\n+\n+  wostringstream os2;\n+  os2.precision(3);\n+  os2.setf(wios::fixed);\n+  os2 << val2;\n+\n+  swprintf(largebuf, 512, L\"%.*f\", 3, val2);\n+#ifdef TEST_NUMPUT_VERBOSE\n+  cout << \"expect: \" << largebuf << endl;\n+  cout << \"result: \" << os2.str() << endl;\n+#endif\n+  VERIFY( os2 && os2.str() == largebuf );\n+}\n+\n+int \n+main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "7284c5e9670ab9b6b99923996fdfe8bf6c61114f", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/wchar_t/5.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F5.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <cmath> // for abs\n+#include <cfloat> // for DBL_EPSILON\n+#include <sstream>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+void\n+test05()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+  \n+  double pi = 3.14159265358979323846;\n+  wostringstream ostr;\n+  ostr.precision(20);\n+  ostr << pi;\n+  wstring sval = ostr.str();\n+  wistringstream istr(sval);\n+  double d;\n+  istr >> d;\n+  VERIFY( abs(pi-d)/pi < DBL_EPSILON );\n+}\n+\n+int \n+main()\n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "4129ca93325128d14d6bb96ff6dfa5d05bd084a3", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/wchar_t/6.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F6.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,50 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <cmath> // for abs\n+#include <cfloat> // for DBL_EPSILON\n+#include <sstream>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9151\n+void\n+test06()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  int prec = numeric_limits<double>::digits10 + 2;\n+  double oval = numeric_limits<double>::min();\n+\n+  wstringstream ostr;\n+  ostr.precision(prec);\n+  ostr << oval;\n+  wstring sval = ostr.str();\n+  wistringstream istr(sval);\n+  double ival;\n+  istr >> ival;\n+  VERIFY( abs(oval-ival)/oval < DBL_EPSILON ); \n+}\n+\n+int \n+main()\n+{\n+  test06();\n+  return 0;\n+}"}, {"sha": "f2e830b13386ba53b4dd30b02dd2b05d71b6b70b", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/wchar_t/9555-oa.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F9555-oa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F9555-oa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2F9555-oa.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,86 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <ostream>\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+struct buf: std::wstreambuf\n+{\n+  virtual int_type overflow(int_type) \n+  { throw 0; }\n+};\n+\n+template<typename T>\n+void testthrow(T arg)\n+{\n+  bool test __attribute__((unused)) = true;\n+  buf b;\n+  std::wostream os(&b);\n+  os.exceptions(std::wios::badbit);\n+\n+  try \n+    {\n+      os << arg;\n+    }\n+  catch(int)\n+    {\n+      // Expected return is zero.\n+      VERIFY( os.bad() );\n+    }\n+  catch(...) \n+    {\n+      VERIFY( false );\n+    }    \n+}\n+\n+int main()\n+{\n+  bool b = true;\n+  short s = -4; \n+  unsigned short us = 4;\n+  int i = -45; \n+  unsigned int ui = 45;\n+  long l = -456;\n+  unsigned long ul = 456;\n+  float f = 3.4;\n+  double d = 3.45;\n+  long double ld = 3.456;\n+\n+  testthrow(b);\n+  testthrow(s);\n+  testthrow(us);\n+  testthrow(i);\n+  testthrow(ui);\n+  testthrow(l);\n+  testthrow(ul);\n+  testthrow(f);\n+  testthrow(d);\n+  testthrow(ld);\n+\n+  return 0;\n+}"}, {"sha": "3c36f0300c180bbac230cb9be34569c93cafc36a", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/wchar_t/exceptions_badbit_throw.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2Fexceptions_badbit_throw.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,72 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// libstdc++/9561\n+template<typename T>\n+void test_badbit()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  locale loc(locale::classic(), new __gnu_test::fail_num_put_wchar_t);\n+  wostringstream stream(L\"jaylib - champion sound\");\n+  stream.imbue(loc);\n+\n+  stream.exceptions(ios_base::badbit);\n+  VERIFY( stream.rdstate() == ios_base::goodbit );\n+\n+  try \n+    {\n+      T i = T();\n+      stream << i;\n+      VERIFY( false );\n+    }\n+  catch (const __gnu_test::facet_error&) \n+    {\n+      // stream should set badbit and rethrow facet_error.\n+      VERIFY( stream.bad() );\n+      VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n+      VERIFY( !stream.eof() );\n+    }\n+  catch (...) \n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+\n+int main()\n+{\n+  test_badbit<bool>();\n+  test_badbit<short>();\n+  test_badbit<unsigned short>();\n+  test_badbit<int>();\n+  test_badbit<unsigned int>();\n+  test_badbit<long>();\n+  test_badbit<unsigned long>();\n+\n+  test_badbit<float>();\n+  test_badbit<double>();\n+\n+  return 0;\n+}"}, {"sha": "6211a9cd42123a0502f5777b7ad8987744a9e96e", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/wchar_t/exceptions_failbit_throw.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2Fexceptions_failbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2Fexceptions_failbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fwchar_t%2Fexceptions_failbit_throw.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,75 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// libstdc++/10093\n+template<typename T>\n+void test_failbit()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  locale loc(locale::classic(), new __gnu_test::fail_num_put_wchar_t);\n+  wostringstream stream(L\"jaylib - champion sound\");\n+  stream.imbue(loc);\n+\n+  stream.exceptions(ios_base::failbit);\n+  \n+  try\n+    {\n+      T i = T();\n+      stream << i;\n+    }\n+  catch (const ios_base::failure&)\n+    { VERIFY( false ); }\n+  catch(...)\n+    { VERIFY( false ); }\n+\n+    // stream should set badbit.\n+    VERIFY( stream.bad() );\n+    VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n+    VERIFY( !stream.eof() );\n+}\n+\n+int main()\n+{\n+  test_failbit<bool>();\n+  test_failbit<short>();\n+  test_failbit<unsigned short>();\n+  test_failbit<int>();\n+  test_failbit<unsigned int>();\n+  test_failbit<long>();\n+  test_failbit<unsigned long>();\n+\n+  test_failbit<float>();\n+  test_failbit<double>();\n+\n+  return 0;\n+}"}, {"sha": "1d7a3a2e6cec4bb7a685e474fd60bb58c6f1c2bc", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/char/4.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F4.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -1,6 +1,6 @@\n // 1999-08-16 bkoz\n \n-// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation\n+// Copyright (C) 1999, 2000, 2002, 2003, 2005 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,12 +31,9 @@ test04()\n {\n   bool test __attribute__((unused)) = true;\n   std::string str_01;\n-  const std::string str_02(\"coltrane playing 'softly as a morning sunrise'\");\n-  const std::string str_03(\"coltrane\");\n   std::string str_tmp;\n   const int i_max=250;\n \n-  std::ostringstream oss_01(std::ios_base::out);\n   std::ostringstream oss_02(str_01, std::ios_base::out);\n \n   std::ios_base::iostate statefail;"}, {"sha": "0a0c88d3f5ff51dc6fe3053c38561e648e621081", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/wchar_t/1.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F1.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,56 @@\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+\n+#include <string>\n+#include <ostream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// ofstream\n+void test01()\n+{\n+  std::wstring str01;\n+  const int size = 1000;\n+  const char name_02[] = \"wostream_inserter_char-1.txt\";\n+\n+  // initialize string\n+  for(int i=0 ; i < size; i++) {\n+    str01 += L'1';\n+    str01 += L'2';\n+    str01 += L'3';\n+    str01 += L'4';\n+    str01 += L'5';\n+    str01 += L'6';\n+    str01 += L'7';\n+    str01 += L'8';\n+    str01 += L'9';\n+    str01 += L'\\n';\n+  }\n+  std::wofstream f(name_02);\n+\n+  f << str01;\n+  f.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a39526b70da31da03bcc8195a5a35337a71a4640", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/wchar_t/2.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F2.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+\n+#include <string>\n+#include <ostream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// ostringstream width() != zero\n+// left\n+void\n+test02(void) \n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring tmp;\n+  \n+  std::wstring str01 = L\"\";\n+  std::wostringstream oss01;\n+  oss01.width(5);\n+  oss01.fill(L'0');\n+  oss01.flags(std::ios_base::left);\n+  oss01 << str01;\n+  tmp = oss01.str();\n+  VERIFY( tmp == L\"00000\" );\n+\n+  std::wstring str02 = L\"1\";\n+  std::wostringstream oss02;\n+  oss02.width(5);\n+  oss02.fill(L'0');\n+  oss02.flags(std::ios_base::left);\n+  oss02 << str02;\n+  tmp = oss02.str();\n+  VERIFY( tmp == L\"10000\" );\n+\n+  std::wstring str03 = L\"909909\";\n+  std::wostringstream oss03;\n+  oss03.width(5);\n+  oss03.fill(L'0');\n+  oss03.flags(std::ios_base::left);\n+  oss03 << str03;\n+  tmp = oss03.str();\n+  VERIFY( tmp == L\"909909\" );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "dc0f9dc9b93da3751e3e1eea6721fc4ce7f6b47f", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/wchar_t/3.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F3.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,65 @@\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+\n+#include <string>\n+#include <ostream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// width() != zero\n+// right\n+void test03(void) \n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring tmp;\n+\n+  std::wstring str01 = L\"\";\n+  std::wostringstream oss01;\n+  oss01.width(5);\n+  oss01.fill(L'0');\n+  oss01.flags(std::ios_base::right);\n+  oss01 << str01;\n+  tmp = oss01.str();\n+  VERIFY( tmp == L\"00000\" );\n+\n+  std::wstring str02 = L\"1\";\n+  std::wostringstream oss02;\n+  oss02.width(5);\n+  oss02.fill(L'0');\n+  oss02.flags(std::ios_base::right);\n+  oss02 << str02;\n+  tmp = oss02.str();\n+  VERIFY( tmp == L\"00001\" );\n+\n+  std::wstring str03 = L\"909909\";\n+  std::wostringstream oss03;\n+  oss03.width(5);\n+  oss03.fill(L'0');\n+  oss03.flags(std::ios_base::right);\n+  oss03 << str03;\n+  tmp = oss03.str();\n+  VERIFY( tmp == L\"909909\" );\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "502798595056d11dce925472d0df2d1857ed0db8", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/wchar_t/4.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F4.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,57 @@\n+// 1999-08-16 bkoz\n+\n+// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+\n+#include <string>\n+#include <ostream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// stringstream and large strings\n+void\n+test04() \n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring str_01;\n+  std::wstring str_tmp;\n+  const int i_max=250;\n+\n+  std::wostringstream oss_02(str_01, std::ios_base::out);\n+\n+  std::ios_base::iostate statefail;\n+  statefail = std::ios_base::failbit;\n+\n+  // template<_CharT, _Traits>\n+  //  basic_ostream& operator<<(ostream&, const wchar_t*)\n+  for (int i = 0; i < i_max; ++i) \n+    oss_02 << L\"Test: \" << i << std::endl;\n+  str_tmp = oss_02.str();\n+  VERIFY( !oss_02.bad() );\n+  VERIFY( oss_02.good() );\n+  VERIFY( str_tmp != str_01 );\n+  VERIFY( str_tmp.size() == 2390 );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "596b9ce9c97d9c5794ca4d412c5795a486326725", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/wchar_t/5.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F5.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,75 @@\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+\n+#include <string>\n+#include <ostream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// ostringstream and large strings number 2\n+void\n+test05()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring str05, str10;\n+\n+  typedef std::wostream::pos_type\tpos_type;\n+  typedef std::wostream::off_type\toff_type;\n+  std::wstring str01;\n+  const int size = 1000;\n+\n+  // initialize string\n+  for(int i=0 ; i < size; i++) {\n+    str01 += L'1';\n+    str01 += L'2';\n+    str01 += L'3';\n+    str01 += L'4';\n+    str01 += L'5';\n+    str01 += L'6';\n+    str01 += L'7';\n+    str01 += L'8';\n+    str01 += L'9';\n+    str01 += L'\\n';\n+  }\n+\n+  // test 1: out\n+  std::wostringstream sstr01(str01, std::ios_base::out);\n+  std::wostringstream sstr02;\n+  sstr02 << str01;\n+  str05 = sstr01.str();\n+  str10 = sstr02.str();\n+  VERIFY( str05 == str01 );\n+  VERIFY( str10 == str01 );\n+\n+  // test 2: in | out \n+  std::wostringstream sstr04(str01,  std::ios_base::out | std::ios_base::in);\n+  std::wostringstream sstr05(std::ios_base::in | std::ios_base::out);\n+  sstr05 << str01;\n+  str05 = sstr04.str();\n+  str10 = sstr05.str();\n+  VERIFY( str05 == str01 );\n+  VERIFY( str10 == str01 );\n+}\n+\n+int main()\n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "4b05cca74336eb0a519aabd66b25561a441324ff", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/wchar_t/6.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F6.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,56 @@\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+\n+#include <string>\n+#include <ostream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// ostringstream and positioning, multiple writes\n+// http://gcc.gnu.org/ml/libstdc++/2000-q1/msg00326.html\n+void test06()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const wchar_t carray01[] = L\"mos def & talib kweli are black star\";\n+\n+  // normal\n+  std::wostringstream ostr1(L\"mos def\");\n+  VERIFY( ostr1.str() == L\"mos def\" ); \n+  ostr1 << L\" & talib kweli\";  // should overwrite first part of buffer\n+  VERIFY( ostr1.str() == L\" & talib kweli\" );\n+  ostr1 << L\" are black star\";  // should append to string from above\n+  VERIFY( ostr1.str() != carray01 );\n+  VERIFY( ostr1.str() == L\" & talib kweli are black star\" );\n+\n+  // appending\n+  std::wostringstream ostr2(L\"blackalicious\", \n+\t\t\t    std::ios_base::out | std::ios_base::ate);\n+  VERIFY( ostr2.str() == L\"blackalicious\" ); \n+  ostr2 << L\" NIA \";  // should not overwrite first part of buffer\n+  VERIFY( ostr2.str() == L\"blackalicious NIA \" );\n+  ostr2 << L\"4: deception (5:19)\";  // should append to full string from above\n+  VERIFY( ostr2.str() == L\"blackalicious NIA 4: deception (5:19)\" );\n+}\n+\n+int main()\n+{\n+  test06();\n+  return 0;\n+}"}, {"sha": "cc82e6818735f29f1cae1e063939c3cf30b627dc", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/wchar_t/9555-oc.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F9555-oc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F9555-oc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F9555-oc.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,70 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <ostream>\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+struct buf: std::wstreambuf\n+{\n+  virtual int_type overflow(int_type) \n+  { throw 0; }\n+};\n+\n+template<typename T>\n+void testthrow(T arg)\n+{\n+  bool test __attribute__((unused)) = true;\n+  buf b;\n+  std::wostream os(&b);\n+  os.exceptions(std::wios::badbit);\n+\n+  try \n+    {\n+      os << arg;\n+    }\n+  catch(int) \n+      {\n+\t// Expected return is zero.\n+        VERIFY( os.bad() );\n+      }\n+  catch(...) \n+    {\n+      VERIFY( false );\n+    }    \n+}\n+\n+int main()\n+{\n+  wchar_t c = L'a';\n+  const wchar_t* ccp = L\"governor ann richards\";\n+\n+  testthrow(c);\n+  testthrow(ccp);\n+\n+  return 0;\n+}"}, {"sha": "237f4404b8f052506d63969628e3855e5ef4ca4b", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/2.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F2.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -1,7 +1,7 @@\n // 1999-08-16 bkoz\n // 1999-11-01 bkoz\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2005 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -49,12 +49,12 @@ test03(void)\n   ifstream in(TEST_IN);\n   ofstream out(TEST_OUT);\n   out << in.rdbuf();\n-  in.seekg(0,ios_base::beg);\n-  out.seekp(0,ios_base::beg);\n+  in.seekg(0, ios_base::beg);\n+  out.seekp(0, ios_base::beg);\n   rs = in.tellg();\n   ws = out.tellp();\n-  in.seekg(0,ios_base::end);\n-  out.seekp(0,ios_base::end);\n+  in.seekg(0, ios_base::end);\n+  out.seekp(0, ios_base::end);\n   i_read = in.tellg() - rs;\n   i_wrote = out.tellp() - ws;\n   in.close();"}, {"sha": "4aae9bb316ffccca62461cbad6a559d2d5bc4ea0", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F5.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -41,7 +41,7 @@ std::ios_base& func3(std::ios_base&)\n template<typename T>\n void test(T& (*f)(T&))\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   __gnu_test::sync_streambuf buf;\n   std::ostream os(&buf);"}, {"sha": "3616f449945aec96b0d583a5eafc949d247b1175", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/error_failbit.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Ferror_failbit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Ferror_failbit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Ferror_failbit.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -42,8 +42,8 @@ void test5()\n \n   stream << &sbuf;\n \n-  VERIFY(stream.rdstate() & ios_base::failbit);\n-  VERIFY((stream.rdstate() & ios_base::badbit) == 0);\n+  VERIFY( stream.rdstate() & ios_base::failbit );\n+  VERIFY( (stream.rdstate() & ios_base::badbit) == 0 );\n }\n \n void test7()\n@@ -54,8 +54,8 @@ void test7()\n \n   stream << &bib;\n \n-  VERIFY(stream.rdstate() & ios_base::failbit);\n-  VERIFY((stream.rdstate() & ios_base::badbit) == 0);\n+  VERIFY( stream.rdstate() & ios_base::failbit );\n+  VERIFY( (stream.rdstate() & ios_base::badbit) == 0 );\n }\n \n // libstdc++/9371"}, {"sha": "b5c235e41c38d1e27e85d43e4e702814af2454ba", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/exceptions_badbit_throw.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_badbit_throw.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -48,8 +48,8 @@ void test13()\n   catch (...)\n     { VERIFY(false); }\n \n-  VERIFY(stream.rdstate() & ios_base::failbit);\n-  VERIFY((stream.rdstate() & ios_base::badbit) == 0);\n+  VERIFY( stream.rdstate() & ios_base::failbit );\n+  VERIFY( (stream.rdstate() & ios_base::badbit) == 0 );\n }\n \n void test15()\n@@ -66,8 +66,8 @@ void test15()\n   catch (...)\n     { VERIFY(false); }\n \n-  VERIFY(stream.rdstate() & ios_base::failbit);\n-  VERIFY((stream.rdstate() & ios_base::badbit) == 0);\n+  VERIFY( stream.rdstate() & ios_base::failbit );\n+  VERIFY( (stream.rdstate() & ios_base::badbit) == 0 );\n }\n \n // libstdc++/9371"}, {"sha": "0f7d3fbf142d1bdde2939bf14d20719d447a1237", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/exceptions_failbit_throw.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_failbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_failbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_failbit_throw.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -44,17 +44,17 @@ void test9()\n   try\n     {\n       stream << &sbuf;\n-      VERIFY(false);\n+      VERIFY( false );\n     }\n   catch (ios_base::failure&)\n-    { VERIFY(false); }\n+    { VERIFY( false ); }\n   catch (__gnu_test::overflow_error&)\n     { }\n   catch (...)\n-    { VERIFY(false); }\n+    { VERIFY( false ); }\n \n-  VERIFY(stream.rdstate() & ios_base::failbit);\n-  VERIFY((stream.rdstate() & ios_base::badbit) == 0);\n+  VERIFY( stream.rdstate() & ios_base::failbit );\n+  VERIFY( (stream.rdstate() & ios_base::badbit) == 0 );\n }\n \n void test11()\n@@ -67,17 +67,17 @@ void test11()\n   try\n     {\n       stream << &bib;\n-      VERIFY(false);\n+      VERIFY( false );\n     }\n   catch (ios_base::failure&)\n-    { VERIFY(false); }\n+    { VERIFY( false ); }\n   catch (__gnu_test::underflow_error&)\n     { }\n   catch (...)\n-    { VERIFY(false); }\n+    { VERIFY( false ); }\n \n-  VERIFY(stream.rdstate() & ios_base::failbit);\n-  VERIFY((stream.rdstate() & ios_base::badbit) == 0);\n+  VERIFY( stream.rdstate() & ios_base::failbit );\n+  VERIFY( (stream.rdstate() & ios_base::badbit) == 0 );\n }\n \n // libstdc++/9371"}, {"sha": "3d248bce58983df66cfe5b0f72905f0cc0ec6487", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/exceptions_null.cc", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_null.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,32 +31,34 @@\n #include <sstream>\n #include <testsuite_hooks.h>\n \n-using namespace std;\n-\n void test1()\n {\n+  using namespace std;\n   bool test __attribute__((unused)) = true;\n+\n   ostringstream stream;\n   stream << static_cast<streambuf*>(NULL);\n-  VERIFY(stream.rdstate() & ios_base::badbit);\n+  VERIFY( stream.rdstate() & ios_base::badbit );\n }\n \n void test3()\n {\n+  using namespace std;\n   bool test __attribute__((unused)) = true;\n+\n   ostringstream stream;\n   stream.exceptions(ios_base::badbit);\n \t\n   try\n     {\n       stream << static_cast<streambuf*>(NULL);\n-      VERIFY(false);\n+      VERIFY( false );\n     }\n   catch (ios_base::failure&)\n     {\n     }\n \n-  VERIFY(stream.rdstate() & ios_base::badbit);\n+  VERIFY( stream.rdstate() & ios_base::badbit );\n }\n \n // libstdc++/9371"}, {"sha": "88ae7aa31301e278119802d2ce861249811cc47a", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/wchar_t/1.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F1.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,79 @@\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <ostream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const int size = 1000;\n+const char name_01[] = \"wostream_inserter_other-1.tst\";\n+const char name_02[] = \"wostream_inserter_other-1.txt\";\n+const char name_03[] = \"wostream_inserter_other-2.tst\";\n+const char name_04[] = \"wostream_inserter_other-2.txt\";\n+\n+// fstream\n+void\n+test02() \n+{\n+  typedef std::ios_base::iostate iostate;\n+  bool test __attribute__((unused)) = true;\n+\n+  // basic_ostream<_CharT, _Traits>::operator<<(__streambuf_type* __sb)\n+  // filebuf-> NULL \n+  std::wifstream f_in1(name_01);\n+  std::wofstream f_out1(name_02);\n+  std::wstringbuf* strbuf01 = NULL;\n+  iostate state01 = f_in1.rdstate();\n+  f_in1 >> strbuf01;\n+  iostate state02 = f_in1.rdstate();\n+  VERIFY( state01 != state02 );\n+  VERIFY( (state02 & std::ios_base::failbit) != 0 );\n+  state01 = f_out1.rdstate();\n+  f_out1 << strbuf01;\n+  state02 = f_out1.rdstate();\n+  VERIFY( state01 != state02 );\n+  VERIFY( (state02 & std::ios_base::badbit) != 0 );\n+\n+  // filebuf->filebuf\n+  std::wifstream f_in(name_01);\n+  std::wofstream f_out(name_02);\n+  f_out << f_in.rdbuf();\n+  f_in.close();\n+  f_out.close();\n+\n+  // filebuf->stringbuf->filebuf\n+  std::wifstream f_in2(name_03);\n+  std::wofstream f_out2(name_04); // should be different name\n+  std::wstringbuf strbuf02;\n+  f_in2 >> &strbuf02;\n+  f_out2 << &strbuf02;\n+  f_in2.close();\n+  f_out2.close();\n+}\n+\n+int \n+main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "626d45c9f35d3e622e96bb0f33e47cf43d69e6e9", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/wchar_t/2.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F2.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <ostream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+// via Brent Verner <brent@rcfile.org>\n+// http://gcc.gnu.org/ml/libstdc++/2000-06/msg00005.html\n+void\n+test03(void)\n+{\n+  using namespace std;\n+\n+  typedef wios::pos_type \tpos_type;\n+\n+  const char* TEST_IN = \"wostream_inserter_other_in\";\n+  const char* TEST_OUT = \"wostream_inserter_other_out\";\n+  pos_type i_read, i_wrote, rs, ws;\n+  double tf_size = BUFSIZ * 2.5;\n+  ofstream testfile(TEST_IN);\n+\n+  for (int i = 0; i < tf_size; ++i)\n+    testfile.put(L'.');\n+  testfile.close();\n+\n+  wifstream in(TEST_IN);\n+  wofstream out(TEST_OUT);\n+  out << in.rdbuf();\n+  in.seekg(0, ios_base::beg);\n+  out.seekp(0, ios_base::beg);\n+  rs = in.tellg();\n+  ws = out.tellp();\n+  in.seekg(0, ios_base::end);\n+  out.seekp(0, ios_base::end);\n+  i_read = in.tellg() - rs;\n+  i_wrote = out.tellp() - ws;\n+  in.close();\n+  out.close();\n+}\n+\n+int \n+main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "d43a8876a0ada12573546ca6c502cf23cd57b63a", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/wchar_t/3.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F3.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+\n+#include <ostream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/3272\n+void test04()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+  wistringstream istr(L\"inside betty carter\");\n+  wostringstream ostr;\n+  ostr << istr.rdbuf() << endl;\n+\n+  if (ostr.rdstate() & ios_base::eofbit) \n+    test = false;\n+\n+  VERIFY( test );\n+}\n+\n+int \n+main()\n+{\n+  test04(); \n+  return 0;\n+}"}, {"sha": "049a3b0fe1d95aa52a1d939cdd0565a33d60317d", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/wchar_t/4.cc", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F4.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,185 @@\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+\n+#include <ostream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+class test_buffer_1 : public std::wstreambuf \n+{\n+public:\n+  test_buffer_1(const std::wstring& s)\n+  : str(s), it(str.begin()) { }\n+  \n+protected:\n+  virtual int_type\n+  underflow()\n+  { return (it != str.end() ? *it : WEOF); }\n+  \n+  virtual int_type\n+  uflow()\n+  { return (it != str.end() ? *it++ : WEOF); }\n+\n+private:\n+  const std::wstring str;\n+  std::wstring::const_iterator it;\n+};\n+\n+\n+class test_buffer_2 : public std::wstreambuf \n+{\n+public:\n+  test_buffer_2(const std::wstring& s)\n+  : str(s), it(str.begin()) { }\n+  \n+protected:\n+  virtual int_type\n+  underflow()\n+  { return (it != str.end() ? *it : WEOF); }\n+  \n+  virtual int_type\n+  uflow()\n+  { return (it != str.end() ? *it++ : WEOF); }\n+  \n+  virtual std::streamsize\n+  showmanyc()\n+  { return std::distance(it, str.end()); }\n+\n+private:\n+  const std::wstring str;\n+  std::wstring::const_iterator it;\n+};\n+\n+\n+class test_buffer_3 : public std::wstreambuf \n+{\n+public:\n+  test_buffer_3(const std::wstring& s)\n+  : str(s), it(str.begin()) { }\n+\n+protected:\n+  virtual int_type\n+  underflow()\n+  { return (it != str.end() ? *it : WEOF); }\n+  \n+  virtual int_type\n+  uflow()\n+  { return (it != str.end() ? *it++ : WEOF); }\n+  \n+  virtual std::streamsize\n+  showmanyc() \n+  {\n+    std::streamsize ret = std::distance(it, str.end());\n+    return ret > 0 ? ret : -1;\n+  }\n+\n+private:\n+  const std::wstring str;\n+  std::wstring::const_iterator it;\n+};\n+\n+class test_buffer_4 : public std::wstreambuf\n+{\n+public:\n+  test_buffer_4(const std::wstring& s)\n+  : str(s), it(str.begin())\n+  {\n+    if (it != str.end())\n+      {\n+\tbuf[0] = *it++;\n+\tsetg(buf, buf, buf+1);\n+      }\n+  }\n+\n+protected:\n+  virtual int_type\n+  underflow()\n+  { return (it != str.end() ? *it : WEOF); }\n+  \n+  virtual int_type\n+  uflow()\n+  { return (it != str.end() ? *it++ : WEOF); }\n+  \n+  virtual std::streamsize\n+  showmanyc()\n+  {\n+    std::streamsize ret = std::distance(it, str.end());\n+    return ret > 0 ? ret : -1;\n+  }\n+\n+private:\n+  const std::wstring str;\n+  std::wstring::const_iterator it;\n+  wchar_t buf[1];\n+};\n+\n+void test(const std::wstring& str, std::wstreambuf& buf)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::wostringstream out;\n+  std::wistream in(&buf);\n+\n+  out << in.rdbuf();\n+\n+  if (out.str() != str) \n+    VERIFY( false );\n+}\n+\n+// libstdc++/6745\n+// libstdc++/8071\n+// libstdc++/8127\n+// Jonathan Lennox  <lennox@cs.columbia.edu>\n+void test05()\n+{\n+  std::wstring string_a(L\"Hello, world!\");\n+  std::wstring string_b(L\"\");\n+\n+  test_buffer_1 buf1a(string_a);\n+  test_buffer_1 buf1b(string_b);\n+\n+  test_buffer_2 buf2a(string_a);\n+  test_buffer_2 buf2b(string_b);\n+\n+  test_buffer_3 buf3a(string_a);\n+  test_buffer_3 buf3b(string_b);\n+\n+  test_buffer_4 buf4a(string_a);\n+  test_buffer_4 buf4b(string_b);\n+\n+  test(string_a, buf1a);\n+  test(string_b, buf1b);\n+\n+  test(string_a, buf2a);\n+  test(string_b, buf2b);\n+\n+  test(string_a, buf3a);\n+  test(string_b, buf3b);\n+\n+  test(string_a, buf4a);\n+  test(string_b, buf4b);\n+}\n+\n+int \n+main()\n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "99a77dde829947474108bcec940d3b00bcadfbbc", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/wchar_t/5.cc", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F5.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,97 @@\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.3 basic_ostream manipulator inserters\n+//\n+// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+// DR 60. What is a formatted input function?\n+// Inserters for manipulators do not behave as formatted output functions.\n+\n+#include <ostream>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+std::wostream& func1(std::wostream&)\n+{ throw std::runtime_error(\"\"); }\n+\n+std::wios& func2(std::wios&)\n+{ throw std::runtime_error(\"\"); }\n+\n+std::ios_base& func3(std::ios_base&)\n+{ throw std::runtime_error(\"\"); }\n+\n+template<typename T>\n+void test(T& (*f)(T&))\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_test::sync_wstreambuf buf;\n+  std::wostream os(&buf);\n+  \n+  __gnu_test::sync_wstreambuf buf_tie;\n+  std::wostream os_tie(&buf_tie);\n+\n+  // No sentry should be constructed so os.tie()->flush() should not be\n+  // called.\n+  os.tie(&os_tie);\n+\n+  try\n+    {\n+      os << f;\n+      // Exceptions thrown by f should not be caught\n+      VERIFY( false );\n+    }\n+  catch (std::runtime_error&)\n+    {\n+    }\n+\n+  // Exceptions thrown by f should not cause badbit to be set\n+  VERIFY( os.good() );\n+  VERIFY( !buf_tie.sync_called() );\n+\n+  // The manipulator should be called even if !os.good().\n+  os.setstate(std::ios_base::eofbit);\n+\n+  try\n+    {\n+      os << f;\n+      // Exceptions thrown by f should not be caught\n+      VERIFY( false );\n+    }\n+  catch (std::runtime_error&)\n+    {\n+    }\n+\n+  // Exceptions thrown by f should not cause badbit to be set\n+  VERIFY( os.rdstate() == std::ios_base::eofbit );\n+  VERIFY( !buf_tie.sync_called() );\n+}\n+\n+void test05()\n+{\n+  test(&func1);\n+  test(&func2);\n+  test(&func3);\n+}\n+\n+int main()\n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "3685e1fbcae3463a72989dd49298e5eb64524fe3", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/wchar_t/9318-out.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F9318-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F9318-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F9318-out.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,72 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <streambuf>\n+#include <sstream>\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9318\n+class Outbuf : public std::wstreambuf\n+{\n+public:\n+  typedef std::wstreambuf::traits_type traits_type;\n+\n+  std::wstring result() const { return str; }\n+\n+protected:\n+  virtual int_type\n+  overflow(int_type c = traits_type::eof())\n+  {\n+    if (!traits_type::eq_int_type(c, traits_type::eof()))\n+      str.push_back(traits_type::to_char_type(c));\n+    return traits_type::not_eof(c);\n+  }\n+\n+private:\n+  std::wstring str;\n+};\n+\n+void test10()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::wstringbuf sbuf(L\"Bad Moon Rising\", std::wios::in);\n+  Outbuf buf;\n+  std::wostream stream(&buf);\n+  stream << &sbuf;\n+\n+  VERIFY( buf.result() == L\"Bad Moon Rising\" );\n+}\n+\n+int main() \n+{\n+  test10();\n+  return 0;\n+}"}, {"sha": "77b784d01d282f81f140e77351d6a26ab8f241be", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/wchar_t/9424-out.cc", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F9424-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F9424-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F9424-out.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,113 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <cwchar> \n+#include <streambuf>\n+#include <sstream>\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9424\n+class Outbuf_2 : public std::wstreambuf\n+{\n+  wchar_t buf[1];\n+\n+public:\n+  Outbuf_2()\n+  {\n+    setp(buf, buf + 1);\n+  }\n+\n+  int_type overflow(int_type c)\n+  {\n+    int_type eof = traits_type::eof();\n+    \n+    if (pptr() < epptr())\n+      {\n+\tif (traits_type::eq_int_type(c, eof))\n+\t  return traits_type::not_eof(c);\n+\t\n+\t*pptr() = traits_type::to_char_type(c);\n+\tpbump(1);\n+\treturn c;\n+      }\n+\n+    return eof;\n+  }\n+};\n+\n+class Inbuf_2 : public std::wstreambuf\n+{\n+  static const wchar_t buf[];\n+  const wchar_t* current;\n+  int size;\n+\n+public:\n+  Inbuf_2()\n+  {\n+    current = buf;\n+    size = std::wcslen(buf);\n+  }\n+  \n+  int_type underflow()\n+  {\n+    if (current < buf + size)\n+      return traits_type::to_int_type(*current);\n+    return traits_type::eof();\n+  }\n+  \n+  int_type uflow()\n+  {\n+    if (current < buf + size)\n+      return traits_type::to_int_type(*current++);\n+    return traits_type::eof();\n+  }\n+};\n+\n+const wchar_t Inbuf_2::buf[] = L\"Atteivlis\";\n+\n+void test12()\n+{ \n+  bool test __attribute__((unused)) = true;\n+ \n+  Outbuf_2 outbuf2;\n+  std::wostream os (&outbuf2);\n+  Inbuf_2 inbuf2;\n+  os << &inbuf2;\n+  VERIFY( inbuf2.sgetc() == L't' );\n+  VERIFY( os.good() );\n+}\n+\n+int main() \n+{\n+  test12();\n+  return 0;\n+}"}, {"sha": "ce4a6d9a73099e525185812bc4df62a165448e74", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/wchar_t/9555-oo.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F9555-oo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F9555-oo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2F9555-oo.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,68 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <ostream>\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+struct buf: std::wstreambuf\n+{\n+  virtual int_type overflow(int_type) \n+  { throw 0; }\n+};\n+\n+template<typename T>\n+void testthrow(T arg)\n+{\n+  bool test __attribute__((unused)) = true;\n+  buf b;\n+  std::wostream os(&b);\n+  os.exceptions(std::wios::badbit);\n+\n+  try \n+    {\n+      os << arg;\n+    }\n+  catch(int) \n+      {\n+\t// Expected return is zero.\n+        VERIFY( os.bad() );\n+      }\n+  catch(...) \n+    {\n+      VERIFY( false );\n+    }    \n+}\n+\n+int main()\n+{\n+  buf b;\n+\n+  testthrow(&b);\n+\n+  return 0;\n+}"}, {"sha": "16f37a78907fefd4842bbfe218ae75c60f7025e7", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/wchar_t/error_failbit.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Ferror_failbit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Ferror_failbit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Ferror_failbit.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,67 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <ostream>\n+#include <streambuf>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+using namespace std;\n+\n+void test5()\n+{\n+  bool test __attribute__((unused)) = true;\n+  __gnu_test::fail_wstreambuf bob;\n+  wostream stream(&bob);\n+  wstringbuf sbuf(L\"Foo, bar, qux\", ios_base::in);\n+\n+  stream << &sbuf;\n+\n+  VERIFY( stream.rdstate() & ios_base::failbit );\n+  VERIFY( (stream.rdstate() & ios_base::badbit) == 0 );\n+}\n+\n+void test7()\n+{\n+  bool test __attribute__((unused)) = true;\n+  wostringstream stream;\n+  __gnu_test::fail_wstreambuf bib;\n+\n+  stream << &bib;\n+\n+  VERIFY( stream.rdstate() & ios_base::failbit );\n+  VERIFY( (stream.rdstate() & ios_base::badbit) == 0 );\n+}\n+\n+// libstdc++/9371\n+int main()\n+{\n+  test5();\n+  test7();\n+  return 0;\n+}"}, {"sha": "3620d12e46dc87ca661bad3766c9133e8d52d99b", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/wchar_t/exceptions_badbit_throw.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Fexceptions_badbit_throw.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,79 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <ostream>\n+#include <streambuf>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+using namespace std;\n+\n+void test13()\n+{\n+  bool test __attribute__((unused)) = true;\n+  __gnu_test::fail_wstreambuf bob;\n+  wostream stream(&bob);\n+  stream.exceptions(ios_base::badbit);\n+  wstringbuf sbuf(L\"Foo, bar, qux\", ios_base::in);\n+\n+  try\n+    {\n+      stream << &sbuf;\n+    }\n+  catch (...)\n+    { VERIFY(false); }\n+\n+  VERIFY( stream.rdstate() & ios_base::failbit );\n+  VERIFY( (stream.rdstate() & ios_base::badbit) == 0 );\n+}\n+\n+void test15()\n+{\n+  bool test __attribute__((unused)) = true;\n+  wostringstream stream;\n+  stream.exceptions(ios_base::badbit);\n+  __gnu_test::fail_wstreambuf bib;\n+\n+  try\n+    {\n+      stream << &bib;\n+    }\n+  catch (...)\n+    { VERIFY(false); }\n+\n+  VERIFY( stream.rdstate() & ios_base::failbit );\n+  VERIFY( (stream.rdstate() & ios_base::badbit) == 0 );\n+}\n+\n+// libstdc++/9371\n+int main()\n+{\n+  test13();\n+  test15();\n+  return 0;\n+}"}, {"sha": "bd2c7d8017b7d4df2b50b15a82040ab67a117749", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/wchar_t/exceptions_failbit_throw.cc", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Fexceptions_failbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Fexceptions_failbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Fexceptions_failbit_throw.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,89 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <ostream>\n+#include <streambuf>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+using namespace std;\n+\n+void test9()\n+{\n+  bool test __attribute__((unused)) = true;\n+  __gnu_test::fail_wstreambuf bob;\n+  wostream stream(&bob);\n+  stream.exceptions(ios_base::failbit);\n+  wstringbuf sbuf(L\"Foo, bar, qux\", ios_base::in);\n+\n+  try\n+    {\n+      stream << &sbuf;\n+      VERIFY( false );\n+    }\n+  catch (ios_base::failure&)\n+    { VERIFY( false ); }\n+  catch (__gnu_test::overflow_error&)\n+    { }\n+  catch (...)\n+    { VERIFY( false ); }\n+\n+  VERIFY( stream.rdstate() & ios_base::failbit );\n+  VERIFY( (stream.rdstate() & ios_base::badbit) == 0 );\n+}\n+\n+void test11()\n+{\n+  bool test __attribute__((unused)) = true;\n+  wostringstream stream;\n+  stream.exceptions(ios_base::failbit);\n+  __gnu_test::fail_wstreambuf bib;\n+\n+  try\n+    {\n+      stream << &bib;\n+      VERIFY( false );\n+    }\n+  catch (ios_base::failure&)\n+    { VERIFY( false ); }\n+  catch (__gnu_test::underflow_error&)\n+    { }\n+  catch (...)\n+    { VERIFY( false ); }\n+\n+  VERIFY( stream.rdstate() & ios_base::failbit );\n+  VERIFY( (stream.rdstate() & ios_base::badbit) == 0 );\n+}\n+\n+// libstdc++/9371\n+int main()\n+{\n+  test9();\n+  test11();\n+  return 0;\n+}"}, {"sha": "d33610779427081ddb4fae6d229133024ad9c742", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/wchar_t/exceptions_null.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Fexceptions_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Fexceptions_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Fexceptions_null.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,70 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <istream>\n+#include <ostream>\n+#include <streambuf>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test1()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  wostringstream stream;\n+  stream << static_cast<wstreambuf*>(NULL);\n+  VERIFY( stream.rdstate() & ios_base::badbit );\n+}\n+\n+void test3()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  wostringstream stream;\n+  stream.exceptions(ios_base::badbit);\n+\t\n+  try\n+    {\n+      stream << static_cast<wstreambuf*>(NULL);\n+      VERIFY( false );\n+    }\n+  catch (ios_base::failure&)\n+    {\n+    }\n+\n+  VERIFY( stream.rdstate() & ios_base::badbit );\n+}\n+\n+// libstdc++/9371\n+int main()\n+{\n+  test1();\n+  test3();\n+  return 0;\n+}"}, {"sha": "b0b6ca4e0187f70941ae655c23ce538cc1fcd284", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/put/char/1.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fput%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fput%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fput%2Fchar%2F1.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -1,6 +1,6 @@\n // 2003-09-22  Petur Runolfsson  <peturr02@ru.is>\n \n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,13 +34,14 @@\n class Buf : public std::streambuf\n {\n protected:\n-  virtual int_type overflow(int_type = traits_type::eof())\n+  virtual int_type\n+  overflow(int_type = traits_type::eof())\n   { throw 0; }\n };\n \n void test01()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   Buf buf;\n   std::ostream os(&buf);"}, {"sha": "3dee44f1de129b4bf7327b6d5b36396b470af716", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/put/wchar_t/1.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fput%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fput%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fput%2Fwchar_t%2F1.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,71 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.6 Unformatted output functions\n+//\n+// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+// DR 60. What is a formatted input function?\n+// basic_ostream::put(char_type) is an unformatted output function.\n+// DR 63. Exception-handling policy for unformatted output.\n+// Unformatted output functions should catch exceptions thrown\n+// from streambuf members.\n+\n+#include <ostream>\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+class Buf : public std::wstreambuf\n+{\n+protected:\n+  virtual int_type\n+  overflow(int_type = traits_type::eof())\n+  { throw 0; }\n+};\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  Buf buf;\n+  std::wostream os(&buf);\n+\n+  VERIFY( os.good() );\n+\n+  os.put(L'a');\n+\n+  VERIFY( os.rdstate() == std::ios_base::badbit );\n+\n+  os.clear();\n+  os.exceptions(std::ios_base::badbit);\n+\n+  try\n+    {\n+      os.put(L'b');\n+      VERIFY( false );\n+    }\n+  catch (int)\n+    {\n+      VERIFY( os.rdstate() == std::ios_base::badbit );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "eda703fb4fdc68f8a7a5294b3ea63adf4d5c1e69", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/seekp/char/exceptions_badbit_throw.cc", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fchar%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fchar%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fchar%2Fexceptions_badbit_throw.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,11 +31,11 @@\n #include <testsuite_hooks.h>\n #include <testsuite_io.h>\n \n-using namespace std;\n-\n void test01()\n {\n+  using namespace std;\n   bool test __attribute__((unused)) = true;\n+\n   __gnu_test::fail_streambuf bib;\n   ostream stream(&bib);\n   stream.exceptions(ios_base::badbit);\n@@ -56,13 +56,15 @@ void test01()\n     }\n   catch (...) \n     {\n-      VERIFY(false);\n+      VERIFY( false );\n     }\n }\n \n void test02()\n {\n+  using namespace std;\n   bool test __attribute__((unused)) = true;\n+\n   __gnu_test::fail_streambuf bib;\n   ostream stream(&bib);\n   stream.exceptions(ios_base::badbit);\n@@ -83,7 +85,7 @@ void test02()\n     }\n   catch (...) \n     {\n-      VERIFY(false);\n+      VERIFY( false );\n     }\n }\n "}, {"sha": "4143bd0e2203a8abe7317b49826f52cb0f5a6fe0", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/seekp/wchar_t/2346-fstream.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fwchar_t%2F2346-fstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fwchar_t%2F2346-fstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fwchar_t%2F2346-fstream.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,87 @@\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.4  basic_ostream seek members  [lib.ostream.seeks]\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %-*.txt\n+\n+#include <ostream>\n+#include <istream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const wchar_t* s = L\" lootpack, peanut butter wolf, rob swift, madlib, quasimoto\";\n+const int times = 10;\n+\n+void write_rewind(std::wiostream& stream)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  for (int j = 0; j < times; j++) \n+    {\n+      std::streampos begin = stream.tellp();\n+      \n+      for (int i = 0; i < times; ++i)\n+\tstream << j << L'-' << i << s << L'\\n';\n+      \n+      stream.seekp(begin);\n+    }\n+  VERIFY( stream.good() );\n+}\n+\n+void check_contents(std::wiostream& stream)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  stream.clear();\n+  stream.seekg(0, std::wios::beg);\n+  int i = 0;\n+  int loop = times * times + 2;\n+  while (i < loop)\n+    {\n+      stream.ignore(80, L'\\n');\n+      if (stream.good())\n+\t++i;\n+      else\n+\tbreak;\n+    }\n+  VERIFY( i == times );\n+}\n+\n+// fstream\n+// libstdc++/2346\n+void test02()\n+{\t \n+  std::wfstream ofstrm;\n+  ofstrm.open(\"wistream_seeks-3.txt\", std::wios::out);\n+  if (!ofstrm)\n+    std::abort();\n+  write_rewind(ofstrm);\n+  ofstrm.close();\n+\n+  std::wfstream ifstrm;\n+  ifstrm.open(\"wistream_seeks-3.txt\", std::wios::in);\n+  check_contents(ifstrm);\n+  ifstrm.close();\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "e5115994742d149d4bacc060d7eb9cce5fb344b5", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/seekp/wchar_t/2346-sstream.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fwchar_t%2F2346-sstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fwchar_t%2F2346-sstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fwchar_t%2F2346-sstream.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,79 @@\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.4  basic_ostream seek members  [lib.ostream.seeks]\n+\n+#include <ostream>\n+#include <istream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+const wchar_t* s = L\" lootpack, peanut butter wolf, rob swift, madlib, quasimoto\";\n+const int times = 10;\n+\n+void write_rewind(std::wiostream& stream)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  for (int j = 0; j < times; j++) \n+    {\n+      std::streampos begin = stream.tellp();\n+      \n+      for (int i = 0; i < times; ++i)\n+\tstream << j << L'-' << i << s << L'\\n';\n+      \n+      stream.seekp(begin);\n+    }\n+  VERIFY( stream.good() );\n+}\n+\n+void check_contents(std::wiostream& stream)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  stream.clear();\n+  stream.seekg(0, std::wios::beg);\n+  int i = 0;\n+  int loop = times * times + 2;\n+  while (i < loop)\n+    {\n+      stream.ignore(80, L'\\n');\n+      if (stream.good())\n+\t++i;\n+      else\n+\tbreak;\n+    }\n+  VERIFY( i == times );\n+}\n+\n+// stringstream\n+// libstdc++/2346\n+// N.B. The original testcase was broken, using tellg/seekg in write_rewind.\n+void test03()\n+{\t \n+  std::wstringstream sstrm;\n+\n+  write_rewind(sstrm);\n+  check_contents(sstrm);\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "8fbc6e530d3ec3e3cfec0bac928dd6aa50fadb0d", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/seekp/wchar_t/exceptions_badbit_throw.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fwchar_t%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fwchar_t%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fwchar_t%2Fexceptions_badbit_throw.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,98 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <ostream>\n+#include <streambuf>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_test::fail_wstreambuf bib;\n+  wostream stream(&bib);\n+  stream.exceptions(ios_base::badbit);\n+\n+  wostream::pos_type pos = wostream::pos_type();\n+\n+  try\n+    {\n+      stream.seekp(pos);\n+      VERIFY( false );\n+    }\n+  catch (const __gnu_test::positioning_error&) \n+    {\n+      // stream should set badbit and rethrow facet_error.\n+      VERIFY( stream.bad() );\n+      VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n+      VERIFY( !stream.eof() );\n+    }\n+  catch (...) \n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+void test02()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+  \n+  __gnu_test::fail_wstreambuf bib;\n+  wostream stream(&bib);\n+  stream.exceptions(ios_base::badbit);\n+\n+  wostream::off_type off(5);\n+\n+  try\n+    {\n+      stream.seekp(off, ios_base::cur);\n+      VERIFY( false );\n+    }\n+  catch (const __gnu_test::positioning_error&) \n+    {\n+      // stream should set badbit and rethrow facet_error.\n+      VERIFY( stream.bad() );\n+      VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n+      VERIFY( !stream.eof() );\n+    }\n+  catch (...) \n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+// libstdc++/9546\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "7e75a15792abbffdd36f4acc32c77ed739b9986a", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/sentry/char/2.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fchar%2F2.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -1,6 +1,6 @@\n // 2003-02-06  Paolo Carlini  <pcarlini@unitus.it>\n \n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,13 +34,15 @@\n #include <testsuite_hooks.h>\n \n // libstdc++/9563\n-struct buf: std::streambuf\n+struct buf : std::streambuf\n {\n   std::ios *io_;\n   \n-  buf (std::ios *io): io_ (io) { }\n+  buf(std::ios *io)\n+  : io_(io) { }\n   \n-  virtual int sync ()\n+  virtual int\n+  sync()\n   {\n     io_->setstate (std::ios::failbit);\n     return 0;"}, {"sha": "f56648dc4f7a0e12412d4448a6f3aa6cc8888cee", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/sentry/wchar_t/1.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fwchar_t%2F1.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,51 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.6.2.3 class basic_ostream::sentry\n+\n+#include <ostream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9562\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::wstringbuf strbuf01;\n+  std::wostream strm1(&strbuf01);\n+  const std::wostream::sentry sentry1(strm1);\n+\n+  VERIFY( bool(sentry1) == true );\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "35146a0119aeecae8d088ce6630339b01eefd021", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/sentry/wchar_t/2.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fsentry%2Fwchar_t%2F2.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,71 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.6.2.3 class basic_ostream::sentry\n+\n+#include <ostream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9563\n+struct buf : std::wstreambuf\n+{\n+  std::wios *io_;\n+  \n+  buf(std::wios *io)\n+  : io_(io) { }\n+  \n+  virtual int\n+  sync()\n+  {\n+    io_->setstate (std::wios::failbit);\n+    return 0;\n+  }\n+};\n+\n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  buf b(0);\n+  std::wostream strm(&b);\n+  \n+  buf tb(&strm);\n+  std::wostream tied(&tb);\n+\n+  strm.tie(&tied);\n+  std::wostream::sentry s(strm);\n+\n+  VERIFY( !s );\n+}\n+\n+int main() \n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "3f75ce50ebad8e0a27aa0ef72638437e0dec295d", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/tellp/wchar_t/1.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fwchar_t%2F1.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,62 @@\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.4 basic_ostream seek members\n+\n+#include <ostream>\n+#include <sstream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef wios::off_type off_type;\n+  typedef wios::pos_type pos_type;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char str_lit01[] = \"wostream_seeks-1.txt\";\n+\n+  // out\n+  wostringstream ost1;\n+  pos_type p1 = ost1.tellp();\n+\n+  wofstream ofs1;\n+  pos_type p2 = ofs1.tellp();\n+\n+  // N.B. We implement the resolution of DR 453 and\n+  // ostringstream::tellp() doesn't fail.\n+  VERIFY( p1 == pos_type(off_type(0)) );\n+  VERIFY( p2 == pos_type(off_type(-1)) );\n+\n+  // out\n+  // test ctors leave things in the same positions...\n+  wostringstream ost2(L\"bob_marley:kaya\");\n+  p1 = ost2.tellp();\n+\n+  wofstream ofs2(str_lit01);\n+  p2 = ofs2.tellp();\n+ \n+  VERIFY( p1 == p2 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "78834b203e067c978451b04736c428545c80298a", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/tellp/wchar_t/2.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fwchar_t%2F2.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+//\n+\n+#include <sstream>\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef std::wstringbuf::pos_type        pos_type;\n+  typedef std::wstringbuf::off_type        off_type;\n+  bool test __attribute__((unused)) = true;\n+\n+  // tellp\n+  wostringstream ost;\n+  pos_type pos1;\n+  pos1 = ost.tellp();\n+  VERIFY( pos1 == pos_type(off_type(0)) );\n+  ost << L\"RZA \";\n+  pos1 = ost.tellp();\n+  VERIFY( pos1 == pos_type(off_type(4)) );\n+  ost << L\"ghost dog: way of the samurai\";\n+  pos1 = ost.tellp();\n+  VERIFY( pos1 == pos_type(off_type(33)) );\n+}                                    \n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "095fae41aa3afcfa3b20bf1483a3fbd8d2d5a57f", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/tellp/wchar_t/exceptions_badbit_throw.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fwchar_t%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fwchar_t%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fwchar_t%2Fexceptions_badbit_throw.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <ostream>\n+#include <streambuf>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+using namespace std;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  __gnu_test::fail_wstreambuf bib;\n+  wostream stream(&bib);\n+  stream.exceptions(ios_base::badbit);\n+\n+  try\n+    {\n+      stream.tellp();\n+      VERIFY( false );\n+    }\n+  catch (const __gnu_test::positioning_error&) \n+    {\n+      // stream should set badbit and rethrow facet_error.\n+      VERIFY( stream.bad() );\n+      VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n+      VERIFY( !stream.eof() );\n+    }\n+  catch (...) \n+    {\n+      VERIFY(false);\n+    }\n+}\n+\n+// libstdc++/9546\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "22cd5c016608bcb5ad5747cbbace1c9d8b5a6fac", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/write/char/1.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fwrite%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fwrite%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fwrite%2Fchar%2F1.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -1,6 +1,6 @@\n // 2003-09-22  Petur Runolfsson  <peturr02@ru.is>\n \n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,7 +35,8 @@\n class Buf : public std::streambuf\n {\n protected:\n-  virtual int_type overflow(int_type = traits_type::eof())\n+  virtual int_type\n+  overflow(int_type = traits_type::eof())\n   { throw 0; }\n };\n "}, {"sha": "e6821013e2288fa9ac065a55f38e1097fb096e96", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/write/wchar_t/1.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fwrite%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fwrite%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fwrite%2Fwchar_t%2F1.cc?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,72 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.6 Unformatted output functions\n+//\n+// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+// DR 60. What is a formatted input function?\n+// basic_ostream::write(const char_type*, streamsize) is an unformatted\n+// output function.\n+// DR 63. Exception-handling policy for unformatted output.\n+// Unformatted output functions should catch exceptions thrown\n+// from streambuf members.\n+\n+#include <ostream>\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+class Buf : public std::wstreambuf\n+{\n+protected:\n+  virtual int_type\n+  overflow(int_type = traits_type::eof())\n+  { throw 0; }\n+};\n+\n+void test01()\n+{\n+  bool test = true;\n+\n+  Buf buf;\n+  std::wostream os(&buf);\n+\n+  VERIFY( os.good() );\n+\n+  os.write(L\"a\", 1);\n+\n+  VERIFY( os.rdstate() == std::ios_base::badbit );\n+\n+  os.clear();\n+  os.exceptions(std::ios_base::badbit);\n+\n+  try\n+    {\n+      os.write(L\"b\", 1);\n+      VERIFY( false );\n+    }\n+  catch (int)\n+    {\n+      VERIFY( os.rdstate() == std::ios_base::badbit );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0b0acc85640f62f4b78a68af8850a02f5316800e", "filename": "libstdc++-v3/testsuite/data/wostream_inserter_char-1.tst", "status": "added", "additions": 1000, "deletions": 0, "changes": 1000, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fwostream_inserter_char-1.tst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fwostream_inserter_char-1.tst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fwostream_inserter_char-1.tst?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,1000 @@\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789"}, {"sha": "0b0acc85640f62f4b78a68af8850a02f5316800e", "filename": "libstdc++-v3/testsuite/data/wostream_inserter_char-1.txt", "status": "added", "additions": 1000, "deletions": 0, "changes": 1000, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fwostream_inserter_char-1.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fwostream_inserter_char-1.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fwostream_inserter_char-1.txt?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,1000 @@\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789\n+123456789"}, {"sha": "cb3c57f7dfd3a38e23d0c6ad3b6b55713db4626b", "filename": "libstdc++-v3/testsuite/data/wostream_inserter_other-1.tst", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fwostream_inserter_other-1.tst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fwostream_inserter_other-1.tst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fwostream_inserter_other-1.tst?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,158 @@\n+// 990117 bkoz\n+// test functionality of basic_filebuf for char_type == char\n+// this is a data file for 27filebuf.cc\n+\n+// Copyright (C) 1997-1999 Cygnus Solutions\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+/mnt/cdrom/sarah_vaughan/sarah_vaughan.allofme\n+/mnt/cdrom/sarah_vaughan/sarah_vaughan.speaklow\n+\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_01_the_way_i_feel\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_02_seduction_kidnap\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_03_just_a_ny_poem\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_04_butterflies_i_remem\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_05_luxury_poem\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_06_my_house\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_07_the_women_gather\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_08_the_life_i_led\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_09_when_i_die\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_10_revolutionary_dreams\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_11_winter_poem\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_12_a_certain_peace_i_nap\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_13_poem_for_a_lady_whose\n+\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/\n+\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/back out\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/bend down low\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/bus dem shut (pyaka)\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/caution\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/do it twice\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/don't rock the boat\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/duppy conqueror\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/hammer\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/hypocrites\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/i'm still waiting\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/judge not\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/mellow mood\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/mr brown\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/nice time\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/one cup of coffee\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/one love_people get ready\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/put it on\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/simmer down\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/small axe\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/soul rebel\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/soul shake down party\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/stir it up (original)\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/sun is shining\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/thank you lord (original)\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/acoustic medley\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/burnin' and lootin'\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/concrete jungle\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/craven choke puppy\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/get up stand up\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/guava jelly\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/high tide or low tide\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/i shot the sheriff\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/i'm hurting inside\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/iron lion zion\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/lick samba\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/lively up yourself\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/natty dread\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/no more trouble\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/rastaman chant\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/screw face\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/slave driver\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/trenchtown rock\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/africa unite\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/babylon system\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/bad card\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/coming in from the cold (12\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/could you be loved (12  mix\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/forever loving jah\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/give thanks and praise\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/one drop\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/one dub\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/rastaman live up\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/real situation\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/redemption song (live in pi\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/ride natty ride (12  mix)\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/so much trouble in the worl\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/survival\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/why should i (previously un\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/zimbabwe\n+\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_01_pandemonium\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_02_sync_disjecta\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_03_object_unknown\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_04_it's_nice_not\n+/mnt/cdrom/dj_spooky_rid-2dim_warefare/djspooky_05_dialectical_tra\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_06_post-human_soph\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_07_quilombo_ex\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_08_rekonstruction\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_09_scientifik\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_10_a_conversation\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_11_peace_in_zaire\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_13_degree_zero\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_14_roman_planeta\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_15_bass_digitalis\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_16_polyphony_of\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_17_riddim_warfare\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_18_the_nerd\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_20_theme_of_the\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_21_twilight_fugue\n+\n+/mnt/cdrom/stuff_smith_mosaic/disk3/01_desert_sands\n+/mnt/cdrom/stuff_smith_mosaic/disk3/02_soft_winds\n+/mnt/cdrom/stuff_smith_mosaic/disk3/03_time_and_again\n+/mnt/cdrom/stuff_smith_mosaic/disk3/04_it_don't_mean_a_thing\n+/mnt/cdrom/stuff_smith_mosaic/disk3/05_in_a_mellotone\n+/mnt/cdrom/stuff_smith_mosaic/disk3/06_i_know_that_you_know\n+/mnt/cdrom/stuff_smith_mosaic/disk3/07_heat_wave\n+/mnt/cdrom/stuff_smith_mosaic/disk3/08_things_ain't_what_they_used_to_be\n+/mnt/cdrom/stuff_smith_mosaic/disk3/09_body_and_soul\n+\n+So I take a break, wander down to the park to stand, then lean into\n+the concrete railing demarking the beginnings of space, oceanic\n+space. I watch the waves break, and form, and ease back out to sea and\n+wrap my arms around myself and hug tightly because it's early in the\n+morning and windy, and the sun is late getting out of bed today, which\n+is good because if there was brilliant light illuminating all the\n+beauty around me I would be shocked, stunned, forced to retreat back\n+into my cabana in a daze, blinded by hummingbirds and callilillies and\n+un-named red, yellow, and blue flowers. Green envelopes me, waves\n+sooth me. I can see the wind flip the top of the waves seaward, right\n+before they break. The sea seems so calm from my perch above the fray\n+that I wonder if maybe there is just some part of the deepest, most\n+abstract ocean where there is a large creature who happily chews\n+plankton and wags its tail in gentle, adulating waves that spread and\n+move and gracefully glide thousands of miles, to crash upon a beach,\n+one after the other, politely waiting for a turn to dance with the\n+seashore.\n+\n+I know: it is what the Mexican schoolchildren call \"la vibora de la\n+mer,\" the serpent of the sea.\n+\n+\n+\n+\n+"}, {"sha": "cb3c57f7dfd3a38e23d0c6ad3b6b55713db4626b", "filename": "libstdc++-v3/testsuite/data/wostream_inserter_other-2.tst", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fwostream_inserter_other-2.tst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fwostream_inserter_other-2.tst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fwostream_inserter_other-2.tst?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4", "patch": "@@ -0,0 +1,158 @@\n+// 990117 bkoz\n+// test functionality of basic_filebuf for char_type == char\n+// this is a data file for 27filebuf.cc\n+\n+// Copyright (C) 1997-1999 Cygnus Solutions\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+/mnt/cdrom/sarah_vaughan/sarah_vaughan.allofme\n+/mnt/cdrom/sarah_vaughan/sarah_vaughan.speaklow\n+\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_01_the_way_i_feel\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_02_seduction_kidnap\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_03_just_a_ny_poem\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_04_butterflies_i_remem\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_05_luxury_poem\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_06_my_house\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_07_the_women_gather\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_08_the_life_i_led\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_09_when_i_die\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_10_revolutionary_dreams\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_11_winter_poem\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_12_a_certain_peace_i_nap\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_13_poem_for_a_lady_whose\n+\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/\n+\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/back out\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/bend down low\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/bus dem shut (pyaka)\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/caution\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/do it twice\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/don't rock the boat\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/duppy conqueror\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/hammer\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/hypocrites\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/i'm still waiting\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/judge not\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/mellow mood\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/mr brown\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/nice time\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/one cup of coffee\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/one love_people get ready\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/put it on\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/simmer down\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/small axe\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/soul rebel\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/soul shake down party\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/stir it up (original)\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/sun is shining\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/thank you lord (original)\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/acoustic medley\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/burnin' and lootin'\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/concrete jungle\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/craven choke puppy\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/get up stand up\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/guava jelly\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/high tide or low tide\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/i shot the sheriff\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/i'm hurting inside\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/iron lion zion\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/lick samba\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/lively up yourself\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/natty dread\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/no more trouble\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/rastaman chant\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/screw face\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/slave driver\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/trenchtown rock\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/africa unite\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/babylon system\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/bad card\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/coming in from the cold (12\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/could you be loved (12  mix\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/forever loving jah\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/give thanks and praise\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/one drop\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/one dub\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/rastaman live up\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/real situation\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/redemption song (live in pi\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/ride natty ride (12  mix)\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/so much trouble in the worl\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/survival\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/why should i (previously un\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/zimbabwe\n+\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_01_pandemonium\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_02_sync_disjecta\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_03_object_unknown\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_04_it's_nice_not\n+/mnt/cdrom/dj_spooky_rid-2dim_warefare/djspooky_05_dialectical_tra\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_06_post-human_soph\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_07_quilombo_ex\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_08_rekonstruction\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_09_scientifik\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_10_a_conversation\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_11_peace_in_zaire\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_13_degree_zero\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_14_roman_planeta\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_15_bass_digitalis\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_16_polyphony_of\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_17_riddim_warfare\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_18_the_nerd\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_20_theme_of_the\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_21_twilight_fugue\n+\n+/mnt/cdrom/stuff_smith_mosaic/disk3/01_desert_sands\n+/mnt/cdrom/stuff_smith_mosaic/disk3/02_soft_winds\n+/mnt/cdrom/stuff_smith_mosaic/disk3/03_time_and_again\n+/mnt/cdrom/stuff_smith_mosaic/disk3/04_it_don't_mean_a_thing\n+/mnt/cdrom/stuff_smith_mosaic/disk3/05_in_a_mellotone\n+/mnt/cdrom/stuff_smith_mosaic/disk3/06_i_know_that_you_know\n+/mnt/cdrom/stuff_smith_mosaic/disk3/07_heat_wave\n+/mnt/cdrom/stuff_smith_mosaic/disk3/08_things_ain't_what_they_used_to_be\n+/mnt/cdrom/stuff_smith_mosaic/disk3/09_body_and_soul\n+\n+So I take a break, wander down to the park to stand, then lean into\n+the concrete railing demarking the beginnings of space, oceanic\n+space. I watch the waves break, and form, and ease back out to sea and\n+wrap my arms around myself and hug tightly because it's early in the\n+morning and windy, and the sun is late getting out of bed today, which\n+is good because if there was brilliant light illuminating all the\n+beauty around me I would be shocked, stunned, forced to retreat back\n+into my cabana in a daze, blinded by hummingbirds and callilillies and\n+un-named red, yellow, and blue flowers. Green envelopes me, waves\n+sooth me. I can see the wind flip the top of the waves seaward, right\n+before they break. The sea seems so calm from my perch above the fray\n+that I wonder if maybe there is just some part of the deepest, most\n+abstract ocean where there is a large creature who happily chews\n+plankton and wags its tail in gentle, adulating waves that spread and\n+move and gracefully glide thousands of miles, to crash upon a beach,\n+one after the other, politely waiting for a turn to dance with the\n+seashore.\n+\n+I know: it is what the Mexican schoolchildren call \"la vibora de la\n+mer,\" the serpent of the sea.\n+\n+\n+\n+\n+"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "libstdc++-v3/testsuite/data/wostream_seeks-1.tst", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fwostream_seeks-1.tst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4b172f0f602323bfde1043e1634f7d2f0f96d4/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fwostream_seeks-1.tst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fwostream_seeks-1.tst?ref=ba4b172f0f602323bfde1043e1634f7d2f0f96d4"}]}