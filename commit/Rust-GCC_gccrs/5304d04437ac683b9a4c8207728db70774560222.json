{"sha": "5304d04437ac683b9a4c8207728db70774560222", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTMwNGQwNDQzN2FjNjgzYjlhNGM4MjA3NzI4ZGI3MDc3NDU2MDIyMg==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2016-11-02T14:00:22Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2016-11-02T14:00:22Z"}, "message": "Add LE/BE SHA1H patterns with a V2SI input.\n\nAdd LE/BE SHA1H patterns with a V2SI input.  This avoids unnecessary\nDUPs when using intrinsics like vsha1h_u32 (vgetq_lane_u32 (x, 0)).\n\n    gcc/\n        * config/aarch64/aarch64-simd.md (aarch64_crypto_sha1hv4si): \n        New pattern.\n        (aarch64_be_crypto_sha1hv4si): New pattern.\n\nFrom-SVN: r241791", "tree": {"sha": "f7fccef0db51be2083c609129b09fee2d30222f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7fccef0db51be2083c609129b09fee2d30222f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5304d04437ac683b9a4c8207728db70774560222", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5304d04437ac683b9a4c8207728db70774560222", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5304d04437ac683b9a4c8207728db70774560222", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5304d04437ac683b9a4c8207728db70774560222/comments", "author": null, "committer": null, "parents": [{"sha": "45a6c1e36347998df5e779866f26d15dc9d01fbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45a6c1e36347998df5e779866f26d15dc9d01fbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45a6c1e36347998df5e779866f26d15dc9d01fbd"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "76b90a889a50300f1ea15a418d9bd54507a9d0eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5304d04437ac683b9a4c8207728db70774560222/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5304d04437ac683b9a4c8207728db70774560222/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5304d04437ac683b9a4c8207728db70774560222", "patch": "@@ -1,3 +1,9 @@\n+2016-11-26  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_crypto_sha1hv4si):\n+\tNew pattern.\n+\t(aarch64_be_crypto_sha1hv4si): New pattern.\n+\n 2016-11-02  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/aarch64/aarch64.md (add<mode>3): Remove"}, {"sha": "89bdcb3f7ed53d092dd95c81fe4a15fb15dc907c", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5304d04437ac683b9a4c8207728db70774560222/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5304d04437ac683b9a4c8207728db70774560222/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=5304d04437ac683b9a4c8207728db70774560222", "patch": "@@ -5705,6 +5705,26 @@\n   [(set_attr \"type\" \"crypto_sha1_fast\")]\n )\n \n+(define_insn \"aarch64_crypto_sha1hv4si\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=w\")\n+\t(unspec:SI [(vec_select:SI (match_operand:V4SI 1 \"register_operand\" \"w\")\n+\t\t     (parallel [(const_int 0)]))]\n+\t UNSPEC_SHA1H))]\n+  \"TARGET_SIMD && TARGET_CRYPTO && !BYTES_BIG_ENDIAN\"\n+  \"sha1h\\\\t%s0, %s1\"\n+  [(set_attr \"type\" \"crypto_sha1_fast\")]\n+)\n+\n+(define_insn \"aarch64_be_crypto_sha1hv4si\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=w\")\n+\t(unspec:SI [(vec_select:SI (match_operand:V4SI 1 \"register_operand\" \"w\")\n+\t\t     (parallel [(const_int 3)]))]\n+\t UNSPEC_SHA1H))]\n+  \"TARGET_SIMD && TARGET_CRYPTO && BYTES_BIG_ENDIAN\"\n+  \"sha1h\\\\t%s0, %s1\"\n+  [(set_attr \"type\" \"crypto_sha1_fast\")]\n+)\n+\n (define_insn \"aarch64_crypto_sha1su1v4si\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=w\")\n         (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"0\")"}]}