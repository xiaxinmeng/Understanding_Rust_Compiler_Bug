{"sha": "4ea80a418fb9c977a460b803842c3ba744813a11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVhODBhNDE4ZmI5Yzk3N2E0NjBiODAzODQyYzNiYTc0NDgxM2ExMQ==", "commit": {"author": {"name": "David Ayers", "email": "ayers@gcc.gnu.org", "date": "2009-03-29T08:09:44Z"}, "committer": {"name": "David Ayers", "email": "ayers@gcc.gnu.org", "date": "2009-03-29T08:09:44Z"}, "message": "re PR objc/27377 (false compiler warnings generated in Objective-C code)\n\ngcc/\n2009-03-00  David Ayers  <ayers@fsfe.org>\n\n\tPR objc/27377\n\t* c-typeck.c (build_conditional_expr): Emit ObjC warnings\n\tby calling objc_compare_types and surpress warnings about\n\tincompatible C pointers that are compatible ObjC pointers.\n\t\ntestsuite/\n2009-03-00  David Ayers  <ayers@fsfe.org>\n\n\tPR objc/27377\n\t* objc.dg/conditional-1.m: New tests.\n\nFrom-SVN: r145225", "tree": {"sha": "c86f1d38fc26655b1b4f52d8b894e2fde5d59f3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c86f1d38fc26655b1b4f52d8b894e2fde5d59f3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ea80a418fb9c977a460b803842c3ba744813a11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ea80a418fb9c977a460b803842c3ba744813a11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ea80a418fb9c977a460b803842c3ba744813a11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ea80a418fb9c977a460b803842c3ba744813a11/comments", "author": null, "committer": null, "parents": [{"sha": "f988ec96d922819a4948c1ed96c6dc1b79a7ad22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f988ec96d922819a4948c1ed96c6dc1b79a7ad22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f988ec96d922819a4948c1ed96c6dc1b79a7ad22"}], "stats": {"total": 67, "additions": 64, "deletions": 3}, "files": [{"sha": "015420446ecd0227d8178be97cadd9c2cddb83f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea80a418fb9c977a460b803842c3ba744813a11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea80a418fb9c977a460b803842c3ba744813a11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ea80a418fb9c977a460b803842c3ba744813a11", "patch": "@@ -1,4 +1,11 @@\n-2009-03-28  Adam Nemet  <anemet@caviumnetworks.com>\n+2009-03-29  David Ayers  <ayers@fsfe.org>\n+\n+\tPR objc/27377\n+\t* c-typeck.c (build_conditional_expr): Emit ObjC warnings\n+\tby calling objc_compare_types and surpress warnings about\n+\tincompatible C pointers that are compatible ObjC pointers.\n+\t\n+2009-03-29  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* cgraphbuild.c (build_cgraph_edges, rebuild_cgraph_edges): Don't\n \tcall initialize_inline_failed."}, {"sha": "4b5fa0eac1ee4de2c91d3e0c8c1d2404790c9b47", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea80a418fb9c977a460b803842c3ba744813a11/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea80a418fb9c977a460b803842c3ba744813a11/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=4ea80a418fb9c977a460b803842c3ba744813a11", "patch": "@@ -3437,6 +3437,7 @@ build_conditional_expr (tree ifexp, tree op1, tree op2)\n   enum tree_code code2;\n   tree result_type = NULL;\n   tree orig_op1 = op1, orig_op2 = op2;\n+  bool objc_ok;\n \n   /* Promote both alternatives.  */\n \n@@ -3463,6 +3464,8 @@ build_conditional_expr (tree ifexp, tree op1, tree op2)\n       return error_mark_node;\n     }\n \n+  objc_ok = objc_compare_types (type1, type2, -3, NULL_TREE);\n+\n   /* Quickly detect the usual case where op1 and op2 have the same type\n      after promotion.  */\n   if (TYPE_MAIN_VARIANT (type1) == TYPE_MAIN_VARIANT (type2))\n@@ -3546,8 +3549,9 @@ build_conditional_expr (tree ifexp, tree op1, tree op2)\n \t}\n       else\n \t{\n-\t  pedwarn (input_location, 0, \n-\t\t   \"pointer type mismatch in conditional expression\");\n+\t  if (!objc_ok)\n+\t    pedwarn (input_location, 0, \n+\t\t     \"pointer type mismatch in conditional expression\");\n \t  result_type = build_pointer_type (void_type_node);\n \t}\n     }"}, {"sha": "16415c6e60dc05a664fc5e90dbf8a61f4abdf6f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea80a418fb9c977a460b803842c3ba744813a11/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea80a418fb9c977a460b803842c3ba744813a11/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4ea80a418fb9c977a460b803842c3ba744813a11", "patch": "@@ -1,3 +1,8 @@\n+2009-03-29  David Ayers  <ayers@fsfe.org>\n+\n+\tPR objc/27377\n+\t* objc.dg/conditional-1.m: New tests.\n+\t\n 2009-03-28  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* gcc.dg/winline-10.c: New test."}, {"sha": "0aad62c55f180b2621dd37d32bb0f719648d1753", "filename": "gcc/testsuite/objc.dg/conditional-1.m", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea80a418fb9c977a460b803842c3ba744813a11/gcc%2Ftestsuite%2Fobjc.dg%2Fconditional-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea80a418fb9c977a460b803842c3ba744813a11/gcc%2Ftestsuite%2Fobjc.dg%2Fconditional-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fconditional-1.m?ref=4ea80a418fb9c977a460b803842c3ba744813a11", "patch": "@@ -0,0 +1,45 @@\n+/* Testing conditional warnings (without headers).  */\n+/* Author: David Ayers */\n+\n+/* { dg-do compile } */\n+\n+#define nil ((id)0)\n+@interface MyObject\n+@end\n+\n+@protocol MyProtocol\n+@end\n+\n+@interface MyProtoObject <MyProtocol>\n+@end\n+\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  id var_id = nil;\n+  id <MyProtocol> var_id_p = nil;\n+  MyObject *var_obj = nil;\n+  MyProtoObject *var_obj_p = nil;\n+\n+  var_id = (var_id == var_obj) ? var_id : var_obj;\n+  var_id = (var_id == var_obj) ? var_id : var_obj_p;\n+\n+  /* Ayers: Currently, the following test case passes for\n+     technically the wrong reason (see below).\n+  */\n+  var_obj_p = (var_id == var_obj) ? var_obj_p : var_obj; /* { dg-warning \"distinct Objective-C types\" } */\n+  var_obj_p = (var_id == var_obj) ? var_obj_p : var_id_p;\n+\n+  /* Ayers: The first of the following test cases\n+     should probably warn for var_obj_p = var_obj,\n+     yet that would require extensive changes to\n+     build_conditional_expr to create a tree with\n+     multiple types that the assignment would have\n+     to evaluate both versions for correct diagnostics.\n+  */\n+  var_obj_p = (var_id == var_obj) ? var_id : var_obj;  \n+  var_obj_p = (var_id == var_obj) ? var_id : var_obj_p;\n+\n+  return 0;\n+}"}]}