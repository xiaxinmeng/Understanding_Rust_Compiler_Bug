{"sha": "02f6fdff65671ccfaf2f79092ccdfccdef1bcebf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJmNmZkZmY2NTY3MWNjZmFmMmY3OTA5MmNjZGZjY2RlZjFiY2ViZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-10-11T15:53:44Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-10-11T15:53:44Z"}, "message": "Use __is_same_as for std::is_same and std::is_same_v\n\nBy using the built-in we don't need to match a partial specialization\nfor std::is_same and don't need to instantiate std::is_same at all for\nuses of std::is_same_v.\n\n\t* include/std/type_traits (is_same): Replace partial specialization\n\tby using __is_same_as built-in in primary template.\n\t(is_same_v): Use __is_same_as built-in instead of instantiating the\n\tis_same trait.\n\nFrom-SVN: r276891", "tree": {"sha": "508378686454dfbed782d893175443b4b2a061cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/508378686454dfbed782d893175443b4b2a061cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02f6fdff65671ccfaf2f79092ccdfccdef1bcebf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f6fdff65671ccfaf2f79092ccdfccdef1bcebf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02f6fdff65671ccfaf2f79092ccdfccdef1bcebf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f6fdff65671ccfaf2f79092ccdfccdef1bcebf/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07758d90c7bc6b80b10a83bac52f9ab9e394131d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07758d90c7bc6b80b10a83bac52f9ab9e394131d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07758d90c7bc6b80b10a83bac52f9ab9e394131d"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "4b1b010ae97c7da1a00711a1f16e4615f12dbb64", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6fdff65671ccfaf2f79092ccdfccdef1bcebf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6fdff65671ccfaf2f79092ccdfccdef1bcebf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=02f6fdff65671ccfaf2f79092ccdfccdef1bcebf", "patch": "@@ -1,5 +1,10 @@\n 2019-10-11  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/type_traits (is_same): Replace partial specialization\n+\tby using __is_same_as built-in in primary template.\n+\t(is_same_v): Use __is_same_as built-in instead of instantiating the\n+\tis_same trait.\n+\n \tPR libstdc++/92059\n \t* include/tr2/dynamic_bitset (__dynamic_bitset_base): Define all\n \tspecial member functions as defaulted. Add noexcept to most members."}, {"sha": "4de5daa9f063af583da3519885852c509cf0814c", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6fdff65671ccfaf2f79092ccdfccdef1bcebf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6fdff65671ccfaf2f79092ccdfccdef1bcebf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=02f6fdff65671ccfaf2f79092ccdfccdef1bcebf", "patch": "@@ -1388,13 +1388,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Type relations.\n \n   /// is_same\n-  template<typename, typename>\n+  template<typename _Tp, typename _Up>\n     struct is_same\n-    : public false_type { };\n-\n-  template<typename _Tp>\n-    struct is_same<_Tp, _Tp>\n-    : public true_type { };\n+    : public integral_constant<bool, __is_same_as(_Tp, _Up)>\n+    { };\n \n   /// is_base_of\n   template<typename _Base, typename _Derived>\n@@ -3158,7 +3155,7 @@ template <typename _Tp>\n template <typename _Tp, unsigned _Idx = 0>\n   inline constexpr size_t extent_v = extent<_Tp, _Idx>::value;\n template <typename _Tp, typename _Up>\n-  inline constexpr bool is_same_v = is_same<_Tp, _Up>::value;\n+  inline constexpr bool is_same_v = __is_same_as(_Tp, _Up);\n template <typename _Base, typename _Derived>\n   inline constexpr bool is_base_of_v = is_base_of<_Base, _Derived>::value;\n template <typename _From, typename _To>"}]}