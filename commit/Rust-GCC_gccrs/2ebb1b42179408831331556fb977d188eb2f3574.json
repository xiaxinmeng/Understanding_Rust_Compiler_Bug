{"sha": "2ebb1b42179408831331556fb977d188eb2f3574", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmViYjFiNDIxNzk0MDg4MzEzMzE1NTZmYjk3N2QxODhlYjJmMzU3NA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1994-08-15T01:55:59Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1994-08-15T01:55:59Z"}, "message": "pa.c (hppa_expand_prologue): Avoid writing outside the current stack boundary in code to handle large stack...\n\n\t* pa.c (hppa_expand_prologue): Avoid writing outside the current\n\tstack boundary in code to handle large stack frames.\n\nFrom-SVN: r7926", "tree": {"sha": "d59dede69e200d64a30f7c9afba75ece58b27ee7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d59dede69e200d64a30f7c9afba75ece58b27ee7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ebb1b42179408831331556fb977d188eb2f3574", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ebb1b42179408831331556fb977d188eb2f3574", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ebb1b42179408831331556fb977d188eb2f3574", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ebb1b42179408831331556fb977d188eb2f3574/comments", "author": null, "committer": null, "parents": [{"sha": "40e81af5f03b079ca6d0dfefc5e5f13241b66271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40e81af5f03b079ca6d0dfefc5e5f13241b66271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40e81af5f03b079ca6d0dfefc5e5f13241b66271"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "6adca1b23b8b5ca418dec449f0308360986b9656", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ebb1b42179408831331556fb977d188eb2f3574/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ebb1b42179408831331556fb977d188eb2f3574/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=2ebb1b42179408831331556fb977d188eb2f3574", "patch": "@@ -2090,10 +2090,18 @@ hppa_expand_prologue()\n \t\t\t\t    size_rtx, tmpreg));\n \telse\n \t  {\n-\t    store_reg (1, 0, FRAME_POINTER_REGNUM);\n+\t    /* It is incorrect to store the saved frame pointer at *sp,\n+\t       then increment sp (writes beyond the current stack boundary).\n+\n+\t       So instead use stwm to store at *sp and post-increment the\n+\t       stack pointer as an atomic operation.  Then increment sp to\n+\t       finish allocating the new frame.  */\n+\t    emit_insn (gen_post_stwm (stack_pointer_rtx,\n+\t\t\t\t      stack_pointer_rtx,\n+\t\t\t\t      GEN_INT (64), tmpreg));\n \t    set_reg_plus_d (STACK_POINTER_REGNUM,\n \t\t\t    STACK_POINTER_REGNUM,\n-\t\t\t    actual_fsize);\n+\t\t\t    actual_fsize - 64);\n \t  }\n       }\n     /* no frame pointer needed.  */"}]}