{"sha": "2882bfcc5b1d377551de2d44c5d5edb11c137bb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg4MmJmY2M1YjFkMzc3NTUxZGUyZDQ0YzVkNWVkYjExYzEzN2JiMg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2010-05-17T13:34:23Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2010-05-17T13:34:23Z"}, "message": "rs6000.c (rs6000_emit_allocate_stack): Delete unnecessary prototype.\n\n\t* config/rs6000/rs6000.c (rs6000_emit_allocate_stack): Delete\n\tunnecessary prototype.  Replace copy_r12 and copy_r11 flag params\n\twith copy_reg rtx param.\n\t(rs6000_emit_prologue): Update rs6000_emit_allocate_stack calls.\n\tCorrect cases where code for ABI_V4 did not initialise the reg\n\tused to access frame.  Also leave frame_reg_rtx as sp for large\n\tframes that save no regs.\n\nFrom-SVN: r159483", "tree": {"sha": "9df072d4f168d88a8c5b776924c361e4b756549a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9df072d4f168d88a8c5b776924c361e4b756549a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2882bfcc5b1d377551de2d44c5d5edb11c137bb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2882bfcc5b1d377551de2d44c5d5edb11c137bb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2882bfcc5b1d377551de2d44c5d5edb11c137bb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2882bfcc5b1d377551de2d44c5d5edb11c137bb2/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5feb49f0a6862325b1fdfbee9f933ffc12554bc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5feb49f0a6862325b1fdfbee9f933ffc12554bc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5feb49f0a6862325b1fdfbee9f933ffc12554bc6"}], "stats": {"total": 78, "additions": 49, "deletions": 29}, "files": [{"sha": "6d2ce3967981529483b8f7f14b4074bd088df4aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2882bfcc5b1d377551de2d44c5d5edb11c137bb2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2882bfcc5b1d377551de2d44c5d5edb11c137bb2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2882bfcc5b1d377551de2d44c5d5edb11c137bb2", "patch": "@@ -1,3 +1,13 @@\n+2010-05-17  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_emit_allocate_stack): Delete\n+\tunnecessary prototype.  Replace copy_r12 and copy_r11 flag params\n+\twith copy_reg rtx param.\n+\t(rs6000_emit_prologue): Update rs6000_emit_allocate_stack calls.\n+\tCorrect cases where code for ABI_V4 did not initialise the reg\n+\tused to access frame.  Also leave frame_reg_rtx as sp for large\n+\tframes that save no regs.\n+\n 2010-05-17  Martin Jambor  <mjambor@suse.cz>\n \n \tPR middle-end/44133"}, {"sha": "61140a28fb16720b933941448d0266461c03ec94", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 39, "deletions": 29, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2882bfcc5b1d377551de2d44c5d5edb11c137bb2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2882bfcc5b1d377551de2d44c5d5edb11c137bb2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=2882bfcc5b1d377551de2d44c5d5edb11c137bb2", "patch": "@@ -883,7 +883,6 @@ static bool spe_func_has_64bit_regs_p (void);\n static void emit_frame_save (rtx, rtx, enum machine_mode, unsigned int,\n \t\t\t     int, HOST_WIDE_INT);\n static rtx gen_frame_mem_offset (enum machine_mode, rtx, int);\n-static void rs6000_emit_allocate_stack (HOST_WIDE_INT, int, int);\n static unsigned rs6000_hash_constant (rtx);\n static unsigned toc_hash_function (const void *);\n static int toc_hash_eq (const void *, const void *);\n@@ -18035,13 +18034,11 @@ rs6000_emit_stack_tie (void)\n }\n \n /* Emit the correct code for allocating stack space, as insns.\n-   If COPY_R12, make sure a copy of the old frame is left in r12.\n-   If COPY_R11, make sure a copy of the old frame is left in r11,\n-   in preference to r12 if COPY_R12.\n+   If COPY_REG, make sure a copy of the old frame is left there.\n    The generated code may use hard register 0 as a temporary.  */\n \n static void\n-rs6000_emit_allocate_stack (HOST_WIDE_INT size, int copy_r12, int copy_r11)\n+rs6000_emit_allocate_stack (HOST_WIDE_INT size, rtx copy_reg)\n {\n   rtx insn;\n   rtx stack_reg = gen_rtx_REG (Pmode, STACK_POINTER_REGNUM);\n@@ -18084,11 +18081,8 @@ rs6000_emit_allocate_stack (HOST_WIDE_INT size, int copy_r12, int copy_r11)\n \twarning (0, \"stack limit expression is not supported\");\n     }\n \n-  if (copy_r12 || copy_r11)\n-    emit_move_insn (copy_r11\n-                    ? gen_rtx_REG (Pmode, 11)\n-                    : gen_rtx_REG (Pmode, 12),\n-                    stack_reg);\n+  if (copy_reg)\n+    emit_move_insn (copy_reg, stack_reg);\n \n   if (size > 32767)\n     {\n@@ -18774,20 +18768,33 @@ rs6000_emit_prologue (void)\n \t\t       ? (!saving_GPRs_inline\n \t\t\t  && info->spe_64bit_regs_used == 0)\n \t\t       : (!saving_FPRs_inline || !saving_GPRs_inline));\n+      rtx copy_reg = need_r11 ? gen_rtx_REG (Pmode, 11) : NULL;\n+\n       if (info->total_size < 32767)\n \tsp_offset = info->total_size;\n+      else if (need_r11)\n+\tframe_reg_rtx = copy_reg;\n+      else if (info->cr_save_p\n+\t       || info->lr_save_p\n+\t       || info->first_fp_reg_save < 64\n+\t       || info->first_gp_reg_save < 32\n+\t       || info->altivec_size != 0\n+\t       || info->vrsave_mask != 0\n+\t       || crtl->calls_eh_return)\n+\t{\n+\t  copy_reg = frame_ptr_rtx;\n+\t  frame_reg_rtx = copy_reg;\n+\t}\n       else\n-\tframe_reg_rtx = (need_r11\n-\t\t\t ? gen_rtx_REG (Pmode, 11)\n-\t\t\t : frame_ptr_rtx);\n-      rs6000_emit_allocate_stack (info->total_size,\n-\t\t\t\t  (frame_reg_rtx != sp_reg_rtx\n-\t\t\t\t   && (info->cr_save_p\n-\t\t\t\t       || info->lr_save_p\n-\t\t\t\t       || info->first_fp_reg_save < 64\n-\t\t\t\t       || info->first_gp_reg_save < 32\n-\t\t\t\t       )),\n-\t\t\t\t  need_r11);\n+\t{\n+\t  /* The prologue won't be saving any regs so there is no need\n+\t     to set up a frame register to access any frame save area.\n+\t     We also won't be using sp_offset anywhere below, but set\n+\t     the correct value anyway to protect against future\n+\t     changes to this function.  */\n+\t  sp_offset = info->total_size;\n+\t}\n+      rs6000_emit_allocate_stack (info->total_size, copy_reg);\n       if (frame_reg_rtx != sp_reg_rtx)\n \trs6000_emit_stack_tie ();\n     }\n@@ -19222,16 +19229,19 @@ rs6000_emit_prologue (void)\n   if (!WORLD_SAVE_P (info) && info->push_p\n       && !(DEFAULT_ABI == ABI_V4 || crtl->calls_eh_return))\n     {\n+      rtx copy_reg = NULL;\n+\n       if (info->total_size < 32767)\n-      sp_offset = info->total_size;\n+\tsp_offset = info->total_size;\n+      else if (info->altivec_size != 0\n+\t       || info->vrsave_mask != 0)\n+\t{\n+\t  copy_reg = frame_ptr_rtx;\n+\t  frame_reg_rtx = copy_reg;\n+\t}\n       else\n-\tframe_reg_rtx = frame_ptr_rtx;\n-      rs6000_emit_allocate_stack (info->total_size,\n-\t\t\t\t  (frame_reg_rtx != sp_reg_rtx\n-\t\t\t\t   && ((info->altivec_size != 0)\n-\t\t\t\t       || (info->vrsave_mask != 0)\n-\t\t\t\t       )),\n-\t\t\t\t  FALSE);\n+\tsp_offset = info->total_size;\n+      rs6000_emit_allocate_stack (info->total_size, copy_reg);\n       if (frame_reg_rtx != sp_reg_rtx)\n \trs6000_emit_stack_tie ();\n     }"}]}