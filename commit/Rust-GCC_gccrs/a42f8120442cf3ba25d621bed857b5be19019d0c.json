{"sha": "a42f8120442cf3ba25d621bed857b5be19019d0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQyZjgxMjA0NDJjZjNiYTI1ZDYyMWJlZDg1N2I1YmUxOTAxOWQwYw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-07-13T21:16:54Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-07-14T15:54:07Z"}, "message": "c++: constexpr array reference and value-initialization [PR101371]\n\nThis PR gave me a hard time: I saw multiple issues starting with\ndifferent revisions.  But ultimately the root cause seems to be\nthe following, and the attached patch fixes all issues I've found\nhere.\n\nIn cxx_eval_array_reference we create a new constexpr context for the\nCP_AGGREGATE_TYPE_P case, but we also have to create it for the\nnon-aggregate case.  In this test, we are evaluating\n\n  ((B *)this)->a = rhs->a\n\nwhich means that we set ctx.object to ((B *)this)->a.  Then we proceed\nto evaluate the initializer, rhs->a.  For *rhs, we eval rhs, a PARM_DECL,\nfor which we have (const B &) &c.arr[0] in the hash table.  Then\ncxx_fold_indirect_ref gives us c.arr[0].  c is evaluated to {.arr={}} so\nc.arr is {}.  Now we want c.arr[0], so we end up in cxx_eval_array_reference\nand since we're initializing from {}, we call build_value_init which\ngives us an AGGR_INIT_EXPR that calls 'constexpr B::B()'.  Then we\nevaluate this AGGR_INIT_EXPR and since its first argument is dummy,\nwe take ctx.object instead.  But that is the wrong object, we're not\ninitializing ((B *)this)->a here.  And so we wound up with an\ninitializer for A, and then crash in cxx_eval_component_reference:\n\n  gcc_assert (DECL_CONTEXT (part) == TYPE_MAIN_VARIANT (TREE_TYPE (whole)));\n\nwhere DECL_CONTEXT (part) is B (as it should be) but the type of whole\nwas A.\n\nSo create a new object, if there already was one, and the element type\nis not a scalar.\n\n\tPR c++/101371\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.c (cxx_eval_array_reference): Create a new .object\n\tand .ctor for the non-aggregate non-scalar case too when\n\tvalue-initializing.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1y/constexpr-101371-2.C: New test.\n\t* g++.dg/cpp1y/constexpr-101371.C: New test.", "tree": {"sha": "5a44cdb1c709106fbaa38f6c13370147127403ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a44cdb1c709106fbaa38f6c13370147127403ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a42f8120442cf3ba25d621bed857b5be19019d0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a42f8120442cf3ba25d621bed857b5be19019d0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a42f8120442cf3ba25d621bed857b5be19019d0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a42f8120442cf3ba25d621bed857b5be19019d0c/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "269ca408e2839d7f3554a91515d73d4d95352f68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/269ca408e2839d7f3554a91515d73d4d95352f68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/269ca408e2839d7f3554a91515d73d4d95352f68"}], "stats": {"total": 67, "additions": 63, "deletions": 4}, "files": [{"sha": "31fa5b6686526b4613eb80cb3f27b95b2fbd6ce2", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a42f8120442cf3ba25d621bed857b5be19019d0c/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a42f8120442cf3ba25d621bed857b5be19019d0c/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=a42f8120442cf3ba25d621bed857b5be19019d0c", "patch": "@@ -3851,16 +3851,23 @@ cxx_eval_array_reference (const constexpr_ctx *ctx, tree t,\n     {\n       tree empty_ctor = build_constructor (init_list_type_node, NULL);\n       val = digest_init (elem_type, empty_ctor, tf_warning_or_error);\n+    }\n+  else\n+    val = build_value_init (elem_type, tf_warning_or_error);\n+\n+  if (!SCALAR_TYPE_P (elem_type))\n+    {\n       new_ctx = *ctx;\n-      new_ctx.object = t;\n+      if (ctx->object)\n+\t/* If there was no object, don't add one: it could confuse us\n+\t   into thinking we're modifying a const object.  */\n+\tnew_ctx.object = t;\n       new_ctx.ctor = build_constructor (elem_type, NULL);\n       ctx = &new_ctx;\n     }\n-  else\n-    val = build_value_init (elem_type, tf_warning_or_error);\n   t = cxx_eval_constant_expression (ctx, val, lval, non_constant_p,\n \t\t\t\t    overflow_p);\n-  if (CP_AGGREGATE_TYPE_P (elem_type) && t != ctx->ctor)\n+  if (!SCALAR_TYPE_P (elem_type) && t != ctx->ctor)\n     free_constructor (ctx->ctor);\n   return t;\n }"}, {"sha": "fb67b67c2654115a4c820d43f3034bbb2e15967d", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-101371-2.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a42f8120442cf3ba25d621bed857b5be19019d0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-101371-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a42f8120442cf3ba25d621bed857b5be19019d0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-101371-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-101371-2.C?ref=a42f8120442cf3ba25d621bed857b5be19019d0c", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/101371\n+// { dg-do compile { target c++14 } }\n+\n+struct A {\n+  int i;\n+};\n+struct B {\n+  A a{};\n+  constexpr B() : a() {}\n+  constexpr B(const B &rhs) : a(rhs.a) {}\n+};\n+struct C {\n+  B arr[1];\n+};\n+\n+constexpr C\n+fn ()\n+{\n+  C c{};\n+  return c;\n+}\n+\n+constexpr C c = fn();"}, {"sha": "b6351b806b9898776275ee5fcbde7971951ac14a", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-101371.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a42f8120442cf3ba25d621bed857b5be19019d0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-101371.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a42f8120442cf3ba25d621bed857b5be19019d0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-101371.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-101371.C?ref=a42f8120442cf3ba25d621bed857b5be19019d0c", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/101371\n+// { dg-do compile { target c++14 } }\n+\n+struct A {\n+  int i;\n+};\n+struct B {\n+  A a{};\n+  constexpr B() : a() {}\n+  constexpr B(const B &rhs) : a(rhs.a) {}\n+};\n+struct C {\n+  B arr[1];\n+};\n+\n+struct X {\n+  constexpr C fn () const\n+  {\n+    C c{};\n+    return c;\n+  }\n+};\n+\n+void\n+g ()\n+{\n+  X x;\n+  constexpr auto z = x.fn();\n+}"}]}