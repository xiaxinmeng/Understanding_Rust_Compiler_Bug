{"sha": "cc09d0bf04fd87afb9f2b717d485a380a05e0a73", "node_id": "C_kwDOANBUbNoAKGNjMDlkMGJmMDRmZDg3YWZiOWYyYjcxN2Q0ODVhMzgwYTA1ZTBhNzM", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-06-01T14:23:27Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-06-05T13:23:05Z"}, "message": "derive: Add dummy builtin transcriber for builtin derive macros.\n\nFixes #2257.\n\nDerive builtins do not need a real transcriber, but still need one. It\nwill however never be called since builtin derive macros get expanded\ndifferently, and benefit from knowing on what kind of items they are\napplied (struct, enums, unions) rather than receiving a list of tokens\nlike regular builtin macros.\n\ngcc/rust/ChangeLog:\n\n\t* expand/rust-macro-builtins.cc (MacroBuiltin::dummy): New function.\n\t* expand/rust-macro-builtins.h: Declare it.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/derive_macro7.rs: New test.", "tree": {"sha": "a01ce052ccaf265d49b1eb3ecd74441eca79d485", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a01ce052ccaf265d49b1eb3ecd74441eca79d485"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc09d0bf04fd87afb9f2b717d485a380a05e0a73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc09d0bf04fd87afb9f2b717d485a380a05e0a73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc09d0bf04fd87afb9f2b717d485a380a05e0a73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc09d0bf04fd87afb9f2b717d485a380a05e0a73/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "171ea4e2b3e202067c50f9c206974fbe1da691c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/171ea4e2b3e202067c50f9c206974fbe1da691c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/171ea4e2b3e202067c50f9c206974fbe1da691c0"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "a4e9854f62872345570a4748537c72aa765870e6", "filename": "gcc/rust/expand/rust-macro-builtins.cc", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc09d0bf04fd87afb9f2b717d485a380a05e0a73/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc09d0bf04fd87afb9f2b717d485a380a05e0a73/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc?ref=cc09d0bf04fd87afb9f2b717d485a380a05e0a73", "patch": "@@ -105,6 +105,22 @@ std::unordered_map<\n     {\"test_case\", MacroBuiltin::sorry},\n     {\"global_allocator\", MacroBuiltin::sorry},\n     {\"cfg_accessible\", MacroBuiltin::sorry},\n+    /* Derive builtins do not need a real transcriber, but still need one. It\n+       will however never be called since builtin derive macros get expanded\n+       differently, and benefit from knowing on what kind of items they are\n+       applied (struct, enums, unions) rather than receiving a list of tokens\n+       like regular builtin macros */\n+    {\"RustcEncodable\", MacroBuiltin::proc_macro_builtin},\n+    {\"RustcDecodable\", MacroBuiltin::proc_macro_builtin},\n+    {\"Clone\", MacroBuiltin::proc_macro_builtin},\n+    {\"Copy\", MacroBuiltin::proc_macro_builtin},\n+    {\"Debug\", MacroBuiltin::proc_macro_builtin},\n+    {\"Default\", MacroBuiltin::proc_macro_builtin},\n+    {\"Eq\", MacroBuiltin::proc_macro_builtin},\n+    {\"PartialEq\", MacroBuiltin::proc_macro_builtin},\n+    {\"Ord\", MacroBuiltin::proc_macro_builtin},\n+    {\"PartialOrd\", MacroBuiltin::proc_macro_builtin},\n+    {\"Hash\", MacroBuiltin::proc_macro_builtin},\n };\n \n // FIXME: This should return an Optional\n@@ -932,4 +948,11 @@ MacroBuiltin::sorry (Location invoc_locus, AST::MacroInvocData &invoc)\n   return AST::Fragment::create_error ();\n }\n \n+AST::Fragment\n+MacroBuiltin::proc_macro_builtin (Location, AST::MacroInvocData &)\n+{\n+  // nothing to do!\n+  return AST::Fragment::create_error ();\n+}\n+\n } // namespace Rust"}, {"sha": "3759f62c027b1bb26b45c55591334b144fdfb765", "filename": "gcc/rust/expand/rust-macro-builtins.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc09d0bf04fd87afb9f2b717d485a380a05e0a73/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc09d0bf04fd87afb9f2b717d485a380a05e0a73/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h?ref=cc09d0bf04fd87afb9f2b717d485a380a05e0a73", "patch": "@@ -159,6 +159,10 @@ class MacroBuiltin\n \t\t\t\t     AST::MacroInvocData &invoc);\n \n   static AST::Fragment sorry (Location invoc_locus, AST::MacroInvocData &invoc);\n+\n+  /* Builtin procedural macros do not work directly on tokens, but still need an\n+   * empty builtin transcriber to be considered proper builtin macros */\n+  static AST::Fragment proc_macro_builtin (Location, AST::MacroInvocData &);\n };\n } // namespace Rust\n "}, {"sha": "108e3cf904066520d70742fae3dce3d75def3341", "filename": "gcc/testsuite/rust/compile/derive_macro7.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc09d0bf04fd87afb9f2b717d485a380a05e0a73/gcc%2Ftestsuite%2Frust%2Fcompile%2Fderive_macro7.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc09d0bf04fd87afb9f2b717d485a380a05e0a73/gcc%2Ftestsuite%2Frust%2Fcompile%2Fderive_macro7.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fderive_macro7.rs?ref=cc09d0bf04fd87afb9f2b717d485a380a05e0a73", "patch": "@@ -0,0 +1,8 @@\n+#![feature(rustc_attrs)]\n+\n+#[rustc_builtin_macro]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow_internal_unstable(core_intrinsics, libstd_sys_internals)]\n+pub macro RustcDecodable($item:item) {\n+    /* compiler built-in */\n+}\n\\ No newline at end of file"}]}