{"sha": "a71f2193d0df71a86c4743aab22891bb0003112e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcxZjIxOTNkMGRmNzFhODZjNDc0M2FhYjIyODkxYmIwMDAzMTEyZQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-02-25T15:54:14Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-02-25T15:54:14Z"}, "message": "[ARM] Fix -mpure-code for v6m\n\nWhen running the testsuite with -fdisable-rtl-fwprop2 and -mpure-code\nfor cortex-m0, I noticed that some testcases were failing because we\nstill generate \"ldr rX, .LCY\", which is what we want to avoid with\n-mpure-code. This is latent since a recent improvement in fwprop\n(PR88833).\n\nIn this patch I change the thumb1_movsi_insn pattern so that it emits\nthe desired instruction sequence when arm_disable_literal_pool is set.\n\nTo achieve that, I introduce a new required_for_purecode attribute to\nenable the corresponding alternative in thumb1_movsi_insn and take the\nactual instruction sequence length into account.\n\ngcc/ChangeLog:\n\n2020-02-13  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* config/arm/arm.md (required_for_purecode): New attribute.\n\t(enabled): Handle required_for_purecode.\n\t* config/arm/thumb1.md (thumb1_movsi_insn): Add alternative to\n\twork with -mpure-code.", "tree": {"sha": "a639ee88ae4d7bbd52678e5b69c83e01995303b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a639ee88ae4d7bbd52678e5b69c83e01995303b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a71f2193d0df71a86c4743aab22891bb0003112e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a71f2193d0df71a86c4743aab22891bb0003112e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a71f2193d0df71a86c4743aab22891bb0003112e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a71f2193d0df71a86c4743aab22891bb0003112e/comments", "author": null, "committer": null, "parents": [{"sha": "73dc4ae47418aef2eb470b8f71cef57dce37349e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73dc4ae47418aef2eb470b8f71cef57dce37349e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73dc4ae47418aef2eb470b8f71cef57dce37349e"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "14a4b1a06e8eb16eaf8c2867bb55a775c35f7e49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a71f2193d0df71a86c4743aab22891bb0003112e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a71f2193d0df71a86c4743aab22891bb0003112e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a71f2193d0df71a86c4743aab22891bb0003112e", "patch": "@@ -1,3 +1,10 @@\n+2020-02-25  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/arm.md (required_for_purecode): New attribute.\n+\t(enabled): Handle required_for_purecode.\n+\t* config/arm/thumb1.md (thumb1_movsi_insn): Add alternative to\n+\twork with -mpure-code.\n+\n 2020-02-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/93908"}, {"sha": "b48a4f45ffa7ab763917b6e0998f91484af9d138", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a71f2193d0df71a86c4743aab22891bb0003112e/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a71f2193d0df71a86c4743aab22891bb0003112e/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=a71f2193d0df71a86c4743aab22891bb0003112e", "patch": "@@ -97,6 +97,11 @@\n ; an IT block in their expansion which is not a short IT.\n (define_attr \"enabled_for_short_it\" \"no,yes\" (const_string \"yes\"))\n \n+; Mark an instruction sequence as the required way of loading a\n+; constant when -mpure-code is enabled (which implies\n+; arm_disable_literal_pool)\n+(define_attr \"required_for_purecode\" \"no,yes\" (const_string \"no\"))\n+\n ;; Operand number of an input operand that is shifted.  Zero if the\n ;; given instruction does not shift one of its input operands.\n (define_attr \"shift\" \"\" (const_int 0))\n@@ -230,6 +235,10 @@\n \t       (match_test \"arm_restrict_it\"))\n \t  (const_string \"no\")\n \n+\t  (and (eq_attr \"required_for_purecode\" \"yes\")\n+\t       (not (match_test \"arm_disable_literal_pool\")))\n+\t  (const_string \"no\")\n+\n \t  (eq_attr \"arch_enabled\" \"no\")\n \t  (const_string \"no\")]\n \t (const_string \"yes\")))"}, {"sha": "24861635fa537fbf1b957dfdcae7f090db0e3873", "filename": "gcc/config/arm/thumb1.md", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a71f2193d0df71a86c4743aab22891bb0003112e/gcc%2Fconfig%2Farm%2Fthumb1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a71f2193d0df71a86c4743aab22891bb0003112e/gcc%2Fconfig%2Farm%2Fthumb1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb1.md?ref=a71f2193d0df71a86c4743aab22891bb0003112e", "patch": "@@ -691,8 +691,8 @@\n )\n \n (define_insn \"*thumb1_movsi_insn\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=l,l,r,l,l,l,>,l, m,*l*h*k\")\n-\t(match_operand:SI 1 \"general_operand\"      \"l, I,j,J,K,>,l,mi,l,*l*h*k\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=l,l,r,l,l,l,>,l, l, m,*l*h*k\")\n+\t(match_operand:SI 1 \"general_operand\"      \"l, I,j,J,K,>,l,i, mi,l,*l*h*k\"))]\n   \"TARGET_THUMB1\n    && (   register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode))\"\n@@ -704,14 +704,16 @@\n    #\n    ldmia\\\\t%1, {%0}\n    stmia\\\\t%0, {%1}\n+   movs\\\\t%0, #:upper8_15:%1; lsls\\\\t%0, #8; adds\\\\t%0, #:upper0_7:%1; lsls\\\\t%0, #8; adds\\\\t%0, #:lower8_15:%1; lsls\\\\t%0, #8; adds\\\\t%0, #:lower0_7:%1\n    ldr\\\\t%0, %1\n    str\\\\t%1, %0\n    mov\\\\t%0, %1\"\n-  [(set_attr \"length\" \"2,2,4,4,4,2,2,2,2,2\")\n-   (set_attr \"type\" \"mov_reg,mov_imm,mov_imm,multiple,multiple,load_4,store_4,load_4,store_4,mov_reg\")\n-   (set_attr \"pool_range\" \"*,*,*,*,*,*,*,1018,*,*\")\n-   (set_attr \"arch\" \"t1,t1,v8mb,t1,t1,t1,t1,t1,t1,t1\")\n-   (set_attr \"conds\" \"set,clob,nocond,*,*,nocond,nocond,nocond,nocond,nocond\")])\n+  [(set_attr \"length\" \"2,2,4,4,4,2,2,14,2,2,2\")\n+   (set_attr \"type\" \"mov_reg,mov_imm,mov_imm,multiple,multiple,load_4,store_4,alu_sreg,load_4,store_4,mov_reg\")\n+   (set_attr \"pool_range\" \"*,*,*,*,*,*,*, *,1018,*,*\")\n+   (set_attr \"arch\" \"t1,t1,v8mb,t1,t1,t1,t1,t1,t1,t1,t1\")\n+   (set_attr \"required_for_purecode\" \"no,no,no,no,no,no,no,yes,no,no,no\")\n+   (set_attr \"conds\" \"set,clob,nocond,*,*,nocond,nocond,nocond,nocond,nocond,nocond\")])\n \n ; Split the load of 64-bit constant into two loads for high and low 32-bit parts respectively\n ; to see if we can load them in fewer instructions or fewer cycles."}]}