{"sha": "80f8f04ad15566e8bf9ef95b458d83a1a1586637", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBmOGYwNGFkMTU1NjZlOGJmOWVmOTViNDU4ZDgzYTFhMTU4NjYzNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-08-07T12:51:03Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-08-07T12:51:03Z"}, "message": "(reg_changes_size): New variable.\n\n(allocate_for_life_analysis): Allocate and initialize it.\n(mark_used_regs, case SUBREG): Set it.\n\nFrom-SVN: r7864", "tree": {"sha": "24d5138196367d6ce74fbc180e560cc6e9203427", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24d5138196367d6ce74fbc180e560cc6e9203427"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80f8f04ad15566e8bf9ef95b458d83a1a1586637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80f8f04ad15566e8bf9ef95b458d83a1a1586637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80f8f04ad15566e8bf9ef95b458d83a1a1586637", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80f8f04ad15566e8bf9ef95b458d83a1a1586637/comments", "author": null, "committer": null, "parents": [{"sha": "ffceec83e49688e6081299ed6d35d03dffdf3b7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffceec83e49688e6081299ed6d35d03dffdf3b7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffceec83e49688e6081299ed6d35d03dffdf3b7e"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "db4f37f64e3c5808652c0e6a4a1407a754973f93", "filename": "gcc/flow.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f8f04ad15566e8bf9ef95b458d83a1a1586637/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f8f04ad15566e8bf9ef95b458d83a1a1586637/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=80f8f04ad15566e8bf9ef95b458d83a1a1586637", "patch": "@@ -177,6 +177,12 @@ int *reg_basic_block;\n \n int *reg_n_refs;\n \n+/* Indexed by N; says whether a psuedo register N was ever used\n+   within a SUBREG that changes the size of the reg.  Some machines prohibit\n+   such objects to be in certain (usually floating-point) registers.  */\n+\n+char *reg_changes_size;\n+\n /* Indexed by N, gives number of places register N dies.\n    This information remains valid for the rest of the compilation\n    of the current function; it is used to control register allocation.  */\n@@ -1183,6 +1189,9 @@ allocate_for_life_analysis ()\n   reg_n_deaths = (short *) oballoc (max_regno * sizeof (short));\n   bzero ((char *) reg_n_deaths, max_regno * sizeof (short));\n \n+  reg_changes_size = (char *) oballoc (max_regno * sizeof (char));\n+  bzero (reg_changes_size, max_regno * sizeof (char));;\n+\n   reg_live_length = (int *) oballoc (max_regno * sizeof (int));\n   bzero ((char *) reg_live_length, max_regno * sizeof (int));\n \n@@ -2257,6 +2266,18 @@ mark_used_regs (needed, live, x, final, insn)\n #endif\n       break;\n \n+    case SUBREG:\n+      if (GET_CODE (SUBREG_REG (x)) == REG\n+\t  && REGNO (SUBREG_REG (x)) >= FIRST_PSEUDO_REGISTER\n+\t  && (GET_MODE_SIZE (GET_MODE (x))\n+\t      != GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)))))\n+\treg_changes_size[REGNO (SUBREG_REG (x))] = 1;\n+\n+      /* While we're here, optimize this case.  */\n+      x = SUBREG_REG (x);\n+\n+      /* ... fall through ... */\n+\n     case REG:\n       /* See a register other than being set\n \t => mark it as needed.  */"}]}