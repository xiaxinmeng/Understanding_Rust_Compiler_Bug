{"sha": "dbe138906d1b7b102873c6e49e496eb5fbc916d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJlMTM4OTA2ZDFiN2IxMDI4NzNjNmU0OWU0OTZlYjVmYmM5MTZkMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-02-02T00:04:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-02-02T00:04:39Z"}, "message": "re PR middle-end/87887 (ICE in make_ssa_name_fn, at tree-ssanames.c:269)\n\n\tPR middle-end/87887\n\t* config/i386/i386.c (ix86_simd_clone_compute_vecsize_and_simdlen):\n\tPunt with warning on aggregate return or argument types.  Ignore\n\ttype/mode checking for uniform arguments.\n\n\t* gcc.dg/gomp/pr87887-1.c: New test.\n\t* gcc.dg/gomp/pr87887-2.c: New test.\n\nFrom-SVN: r268466", "tree": {"sha": "16d25ab3d35295980aaef5781e299b03ec95dfe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16d25ab3d35295980aaef5781e299b03ec95dfe5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbe138906d1b7b102873c6e49e496eb5fbc916d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe138906d1b7b102873c6e49e496eb5fbc916d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbe138906d1b7b102873c6e49e496eb5fbc916d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe138906d1b7b102873c6e49e496eb5fbc916d2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fc34dbfdb0371365321528c9a96f19827f959ec8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc34dbfdb0371365321528c9a96f19827f959ec8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc34dbfdb0371365321528c9a96f19827f959ec8"}], "stats": {"total": 75, "additions": 72, "deletions": 3}, "files": [{"sha": "33d4ecf5108594f7fc8d8b9c2e4196a49f99f27b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe138906d1b7b102873c6e49e496eb5fbc916d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe138906d1b7b102873c6e49e496eb5fbc916d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbe138906d1b7b102873c6e49e496eb5fbc916d2", "patch": "@@ -1,3 +1,10 @@\n+2019-02-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/87887\n+\t* config/i386/i386.c (ix86_simd_clone_compute_vecsize_and_simdlen):\n+\tPunt with warning on aggregate return or argument types.  Ignore\n+\ttype/mode checking for uniform arguments.\n+\n 2019-02-01  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* combine.c (try_combine): Do not print \"Can't combine\" messages unless"}, {"sha": "789a53501ee5e3d4f56fd97a1f630f83926f136e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe138906d1b7b102873c6e49e496eb5fbc916d2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe138906d1b7b102873c6e49e496eb5fbc916d2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=dbe138906d1b7b102873c6e49e496eb5fbc916d2", "patch": "@@ -50433,7 +50433,9 @@ ix86_simd_clone_compute_vecsize_and_simdlen (struct cgraph_node *node,\n       case E_DFmode:\n       /* case E_SCmode: */\n       /* case E_DCmode: */\n-\tbreak;\n+\tif (!AGGREGATE_TYPE_P (ret_type))\n+\t  break;\n+\t/* FALLTHRU */\n       default:\n \twarning_at (DECL_SOURCE_LOCATION (node->decl), 0,\n \t\t    \"unsupported return type %qT for simd\", ret_type);\n@@ -50444,7 +50446,6 @@ ix86_simd_clone_compute_vecsize_and_simdlen (struct cgraph_node *node,\n   int i;\n \n   for (t = DECL_ARGUMENTS (node->decl), i = 0; t; t = DECL_CHAIN (t), i++)\n-    /* FIXME: Shouldn't we allow such arguments if they are uniform?  */\n     switch (TYPE_MODE (TREE_TYPE (t)))\n       {\n       case E_QImode:\n@@ -50455,8 +50456,12 @@ ix86_simd_clone_compute_vecsize_and_simdlen (struct cgraph_node *node,\n       case E_DFmode:\n       /* case E_SCmode: */\n       /* case E_DCmode: */\n-\tbreak;\n+\tif (!AGGREGATE_TYPE_P (TREE_TYPE (t)))\n+\t  break;\n+\t/* FALLTHRU */\n       default:\n+\tif (clonei->args[i].arg_type == SIMD_CLONE_ARG_TYPE_UNIFORM)\n+\t  break;\n \twarning_at (DECL_SOURCE_LOCATION (node->decl), 0,\n \t\t    \"unsupported argument type %qT for simd\", TREE_TYPE (t));\n \treturn 0;"}, {"sha": "4687a662dfb548747d70fe8244dc90568e68b0fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe138906d1b7b102873c6e49e496eb5fbc916d2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe138906d1b7b102873c6e49e496eb5fbc916d2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dbe138906d1b7b102873c6e49e496eb5fbc916d2", "patch": "@@ -1,3 +1,9 @@\n+2019-02-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/87887\n+\t* gcc.dg/gomp/pr87887-1.c: New test.\n+\t* gcc.dg/gomp/pr87887-2.c: New test.\n+\n 2019-02-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/83246"}, {"sha": "8b04ffd0809be4e6f5ab97c2e32e800edffbee4f", "filename": "gcc/testsuite/gcc.dg/gomp/pr87887-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe138906d1b7b102873c6e49e496eb5fbc916d2/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr87887-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe138906d1b7b102873c6e49e496eb5fbc916d2/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr87887-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr87887-1.c?ref=dbe138906d1b7b102873c6e49e496eb5fbc916d2", "patch": "@@ -0,0 +1,26 @@\n+/* PR middle-end/87887 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_simd_clones } */\n+/* { dg-additional-options \"-w\" } */\n+\n+struct S { int n; };\n+#pragma omp declare simd\n+struct S\n+foo (int x)\n+{\n+  return (struct S) { x };\n+}\n+\n+#pragma omp declare simd\n+int\n+bar (struct S x)\n+{\n+  return x.n;\n+}\n+\n+#pragma omp declare simd uniform (x)\n+int\n+baz (int w, struct S x, int y)\n+{\n+  return w + x.n + y;\n+}"}, {"sha": "51b6c2ae99d91db0e9b43c82be7ed853d707372d", "filename": "gcc/testsuite/gcc.dg/gomp/pr87887-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe138906d1b7b102873c6e49e496eb5fbc916d2/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr87887-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe138906d1b7b102873c6e49e496eb5fbc916d2/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr87887-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr87887-2.c?ref=dbe138906d1b7b102873c6e49e496eb5fbc916d2", "patch": "@@ -0,0 +1,25 @@\n+/* PR middle-end/87887 */\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target vect_simd_clones } */\n+\n+struct S { int n; };\n+#pragma omp declare simd\n+struct S\n+foo (int x)\t\t/* { dg-warning \"unsupported return type 'struct S' for simd\" } */\n+{\n+  return (struct S) { x };\n+}\n+\n+#pragma omp declare simd\n+int\n+bar (struct S x)\t/* { dg-warning \"unsupported argument type 'struct S' for simd\" } */\n+{\n+  return x.n;\n+}\n+\n+#pragma omp declare simd uniform (x)\n+int\n+baz (int w, struct S x, int y)\n+{\n+  return w + x.n + y;\n+}"}]}