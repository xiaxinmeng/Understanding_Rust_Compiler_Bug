{"sha": "ebc258f1b3474932a21d56758fd28a45e03ae984", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJjMjU4ZjFiMzQ3NDkzMmEyMWQ1Njc1OGZkMjhhNDVlMDNhZTk4NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-07-16T21:05:16Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-07-16T21:05:16Z"}, "message": "re PR c++/32505 (Partial specialization halfway accepted after instantiation)\n\n\tPR c++/32505\n\t* pt.c (process_partial_specialization): Diagnose partial\n\tspecialization after instantiation.\n\t(most_specialized_class): Add complain parm.\n\nFrom-SVN: r162269", "tree": {"sha": "e8646f09b805f3fe0569fb611eef5285c557a493", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8646f09b805f3fe0569fb611eef5285c557a493"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebc258f1b3474932a21d56758fd28a45e03ae984", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebc258f1b3474932a21d56758fd28a45e03ae984", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebc258f1b3474932a21d56758fd28a45e03ae984", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebc258f1b3474932a21d56758fd28a45e03ae984/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f25669da4a9dd5e257714c5688660f7840d6108d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f25669da4a9dd5e257714c5688660f7840d6108d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f25669da4a9dd5e257714c5688660f7840d6108d"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "79598d1d3cda9918c7b3ac2fe8c249f3f089b01e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebc258f1b3474932a21d56758fd28a45e03ae984/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebc258f1b3474932a21d56758fd28a45e03ae984/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ebc258f1b3474932a21d56758fd28a45e03ae984", "patch": "@@ -1,5 +1,10 @@\n 2010-07-16  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/32505\n+\t* pt.c (process_partial_specialization): Diagnose partial\n+\tspecialization after instantiation.\n+\t(most_specialized_class): Add complain parm.\n+\n \t* ptree.c (cxx_print_xnode): Handle TEMPLATE_INFO.\n \n 2010-07-15  Nathan Froyd  <froydnj@codesourcery.com>"}, {"sha": "3259043f4ae9a47870b0334321c07928e93e7f2d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebc258f1b3474932a21d56758fd28a45e03ae984/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebc258f1b3474932a21d56758fd28a45e03ae984/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ebc258f1b3474932a21d56758fd28a45e03ae984", "patch": "@@ -158,7 +158,7 @@ static tree tsubst_template_arg (tree, tree, tsubst_flags_t, tree);\n static tree tsubst_template_args (tree, tree, tsubst_flags_t, tree);\n static tree tsubst_template_parms (tree, tree, tsubst_flags_t);\n static void regenerate_decl_from_template (tree, tree);\n-static tree most_specialized_class (tree, tree);\n+static tree most_specialized_class (tree, tree, tsubst_flags_t);\n static tree tsubst_aggr_type (tree, tree, tsubst_flags_t, tree, int);\n static tree tsubst_arg_types (tree, tree, tsubst_flags_t, tree);\n static tree tsubst_function_type (tree, tree, tsubst_flags_t, tree);\n@@ -3831,6 +3831,7 @@ process_partial_specialization (tree decl)\n   tree inner_args = INNERMOST_TEMPLATE_ARGS (specargs);\n   tree main_inner_parms = DECL_INNERMOST_TEMPLATE_PARMS (maintmpl);\n   tree inner_parms;\n+  tree inst;\n   int nargs = TREE_VEC_LENGTH (inner_args);\n   int ntparms;\n   int  i;\n@@ -4045,6 +4046,22 @@ process_partial_specialization (tree decl)\n     = tree_cons (specargs, inner_parms,\n                  DECL_TEMPLATE_SPECIALIZATIONS (maintmpl));\n   TREE_TYPE (DECL_TEMPLATE_SPECIALIZATIONS (maintmpl)) = type;\n+\n+  for (inst = DECL_TEMPLATE_INSTANTIATIONS (maintmpl); inst;\n+       inst = TREE_CHAIN (inst))\n+    {\n+      tree inst_type = TREE_VALUE (inst);\n+      if (COMPLETE_TYPE_P (inst_type)\n+\t  && CLASSTYPE_IMPLICIT_INSTANTIATION (inst_type))\n+\t{\n+\t  tree spec = most_specialized_class (inst_type, maintmpl, tf_none);\n+\t  if (spec && TREE_TYPE (spec) == type)\n+\t    permerror (input_location,\n+\t\t       \"partial specialization of %qT after instantiation \"\n+\t\t       \"of %qT\", type, inst_type);\n+\t}\n+    }\n+\n   return decl;\n }\n \n@@ -7749,7 +7766,7 @@ instantiate_class_template (tree type)\n \n   /* Determine what specialization of the original template to\n      instantiate.  */\n-  t = most_specialized_class (type, templ);\n+  t = most_specialized_class (type, templ, tf_warning_or_error);\n   if (t == error_mark_node)\n     {\n       TYPE_BEING_DEFINED (type) = 1;\n@@ -15974,7 +15991,7 @@ most_general_template (tree decl)\n    returned.  */\n \n static tree\n-most_specialized_class (tree type, tree tmpl)\n+most_specialized_class (tree type, tree tmpl, tsubst_flags_t complain)\n {\n   tree list = NULL_TREE;\n   tree t;\n@@ -16094,6 +16111,8 @@ most_specialized_class (tree type, tree tmpl)\n     {\n       const char *str;\n       char *spaces = NULL;\n+      if (!(complain & tf_error))\n+\treturn error_mark_node;\n       error (\"ambiguous class template instantiation for %q#T\", type);\n       str = TREE_CHAIN (list) ? _(\"candidates are:\") : _(\"candidate is:\");\n       for (t = list; t; t = TREE_CHAIN (t))"}, {"sha": "a693c5c521cf2d911ced1c1a505597893a7599ac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebc258f1b3474932a21d56758fd28a45e03ae984/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebc258f1b3474932a21d56758fd28a45e03ae984/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ebc258f1b3474932a21d56758fd28a45e03ae984", "patch": "@@ -1,3 +1,8 @@\n+2010-07-16  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/32505\n+\t* g++.dg/template/partial8.C: New.\n+\n 2010-07-16  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/guality/guality.exp: Run also c-c++-common/guality/ tests."}, {"sha": "4db7e18689e2bc739ce3ed41b463b5a538f5c9f7", "filename": "gcc/testsuite/g++.dg/template/partial8.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebc258f1b3474932a21d56758fd28a45e03ae984/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebc258f1b3474932a21d56758fd28a45e03ae984/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial8.C?ref=ebc258f1b3474932a21d56758fd28a45e03ae984", "patch": "@@ -0,0 +1,4 @@\n+// PR c++/32505\n+template <class T> struct A { };\n+A<int*> a;\n+template <class T> struct A<T*> { }; // { dg-error \"A<int\\\\*>\" }"}]}