{"sha": "05ac4d9c7b336e30413dd80c3630981151499f9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVhYzRkOWM3YjMzNmUzMDQxM2RkODBjMzYzMDk4MTE1MTQ5OWY5ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-11T08:32:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-11T08:32:22Z"}, "message": "ldist: Further fixes for -ftrapv [PR94114]\n\nAs the testcase shows, arithmetics that for -ftrapv would need multiple\nbasic blocks can show up not just in nb_bytes expressions where we\nare calling rewrite_to_non_trapping_overflow for a while already,\nbut also in the pointer expression to the start of the region.\nWhile the testcase covers just the first hunk and I've failed to create\na testcase for the latter, it is at least in theory possible too, so I've\nadjusted that hunk too.\n\n2020-03-11  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/94114\n\t* tree-loop-distribution.c (generate_memset_builtin): Call\n\trewrite_to_non_trapping_overflow even on mem.\n\t(generate_memcpy_builtin): Call rewrite_to_non_trapping_overflow even\n\ton dest and src.\n\n\t* gcc.dg/pr94114.c: New test.", "tree": {"sha": "c7e4f500496fa833ed72e691ea6bb0ea0e2636bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7e4f500496fa833ed72e691ea6bb0ea0e2636bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05ac4d9c7b336e30413dd80c3630981151499f9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05ac4d9c7b336e30413dd80c3630981151499f9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05ac4d9c7b336e30413dd80c3630981151499f9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05ac4d9c7b336e30413dd80c3630981151499f9e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f0d8cd852255f9767626b084fc7926cbbea166f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f0d8cd852255f9767626b084fc7926cbbea166f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f0d8cd852255f9767626b084fc7926cbbea166f"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "6630a20a6252fdc9633a6723ca36ed37f62b00c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05ac4d9c7b336e30413dd80c3630981151499f9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05ac4d9c7b336e30413dd80c3630981151499f9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05ac4d9c7b336e30413dd80c3630981151499f9e", "patch": "@@ -1,3 +1,11 @@\n+2020-03-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/94114\n+\t* tree-loop-distribution.c (generate_memset_builtin): Call\n+\trewrite_to_non_trapping_overflow even on mem.\n+\t(generate_memcpy_builtin): Call rewrite_to_non_trapping_overflow even\n+\ton dest and src.\n+\n 2020-03-10  Jeff Law  <law@redhat.com>\n \n \t* config/bfin/bfin.md (movsi_insv): Add length attribute."}, {"sha": "954c4511816406c82cbcca80454d47fc139fb3ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05ac4d9c7b336e30413dd80c3630981151499f9e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05ac4d9c7b336e30413dd80c3630981151499f9e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=05ac4d9c7b336e30413dd80c3630981151499f9e", "patch": "@@ -1,3 +1,8 @@\n+2020-03-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/94114\n+\t* gcc.dg/pr94114.c: New test.\n+\n 2020-03-10  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/94124 - wrong conversion error with non-viable overload."}, {"sha": "8d6d0eb5c2a49d93b26d9f6b270c568398d79d02", "filename": "gcc/testsuite/gcc.dg/pr94114.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05ac4d9c7b336e30413dd80c3630981151499f9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94114.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05ac4d9c7b336e30413dd80c3630981151499f9e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94114.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94114.c?ref=05ac4d9c7b336e30413dd80c3630981151499f9e", "patch": "@@ -0,0 +1,13 @@\n+/* PR tree-optimization/94114 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-loop-distribute-patterns -ftrapv\" } */\n+\n+void\n+foo (int *x, int *y, int *z, long int w)\n+{\n+  while (y + w > z)\n+    {\n+      x[w] = 0;\n+      --w;\n+    }\n+}"}, {"sha": "35d3821bb0789e3b800c8c12a58d498b7b3d1de7", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05ac4d9c7b336e30413dd80c3630981151499f9e/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05ac4d9c7b336e30413dd80c3630981151499f9e/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=05ac4d9c7b336e30413dd80c3630981151499f9e", "patch": "@@ -1151,7 +1151,7 @@ generate_memset_builtin (class loop *loop, partition *partition)\n   nb_bytes = rewrite_to_non_trapping_overflow (builtin->size);\n   nb_bytes = force_gimple_operand_gsi (&gsi, nb_bytes, true, NULL_TREE,\n \t\t\t\t       false, GSI_CONTINUE_LINKING);\n-  mem = builtin->dst_base;\n+  mem = rewrite_to_non_trapping_overflow (builtin->dst_base);\n   mem = force_gimple_operand_gsi (&gsi, mem, true, NULL_TREE,\n \t\t\t\t  false, GSI_CONTINUE_LINKING);\n \n@@ -1205,8 +1205,8 @@ generate_memcpy_builtin (class loop *loop, partition *partition)\n   nb_bytes = rewrite_to_non_trapping_overflow (builtin->size);\n   nb_bytes = force_gimple_operand_gsi (&gsi, nb_bytes, true, NULL_TREE,\n \t\t\t\t       false, GSI_CONTINUE_LINKING);\n-  dest = builtin->dst_base;\n-  src = builtin->src_base;\n+  dest = rewrite_to_non_trapping_overflow (builtin->dst_base);\n+  src = rewrite_to_non_trapping_overflow (builtin->src_base);\n   if (partition->kind == PKIND_MEMCPY\n       || ! ptr_derefs_may_alias_p (dest, src))\n     kind = BUILT_IN_MEMCPY;"}]}