{"sha": "b3f532ce538f8fc13b7af7cc73b94aa43bb03669", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNmNTMyY2U1MzhmOGZjMTNiN2FmN2NjNzNiOTRhYTQzYmIwMzY2OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-09T10:46:00Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-09T10:46:00Z"}, "message": "[multiple changes]\n\n2012-07-09  Tristan Gingold  <gingold@adacore.com>\n\n\t* seh_init.c (__gnat_SEH_error_handler): On Win64 and SEH,\n\treturn for unknown exceptions.\n\t* raise-gcc.c (__gnat_personality_seh0): Call __gnat_SEH_error_handler.\n\n2012-07-09  Joel Brobecker  <brobecker@adacore.com brobecker>\n\n\t* exp_dbug.ads (No_Dollar_In_Label): Delete.\n\n2012-07-09  Vincent Pucci  <pucci@adacore.com>\n\n\t* sem_ch13.adb (Check_Overloaded_Name): New routine.\n\n2012-07-09  Vincent Pucci  <pucci@adacore.com>\n\n\t* freeze.adb (Freeze_Record_Type): Analyze the delayed aspects of the\n\tcomponents in a record type.\n\n2012-07-09  Pascal Obry  <obry@adacore.com>\n\n\t* prj-util.ads: Minor reformatting.\n\nFrom-SVN: r189369", "tree": {"sha": "5b16f576baa23d7e0de6a273e17513f322081aef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b16f576baa23d7e0de6a273e17513f322081aef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3f532ce538f8fc13b7af7cc73b94aa43bb03669", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3f532ce538f8fc13b7af7cc73b94aa43bb03669", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3f532ce538f8fc13b7af7cc73b94aa43bb03669", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3f532ce538f8fc13b7af7cc73b94aa43bb03669/comments", "author": null, "committer": null, "parents": [{"sha": "31821c0f0338034cb09d16029891d96026d7acee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31821c0f0338034cb09d16029891d96026d7acee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31821c0f0338034cb09d16029891d96026d7acee"}], "stats": {"total": 165, "additions": 121, "deletions": 44}, "files": [{"sha": "3d7f36ba457b36c9d0df77a80ced62bce8dd8199", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f532ce538f8fc13b7af7cc73b94aa43bb03669/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f532ce538f8fc13b7af7cc73b94aa43bb03669/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b3f532ce538f8fc13b7af7cc73b94aa43bb03669", "patch": "@@ -1,3 +1,26 @@\n+2012-07-09  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* seh_init.c (__gnat_SEH_error_handler): On Win64 and SEH,\n+\treturn for unknown exceptions.\n+\t* raise-gcc.c (__gnat_personality_seh0): Call __gnat_SEH_error_handler.\n+\n+2012-07-09  Joel Brobecker  <brobecker@adacore.com brobecker>\n+\n+\t* exp_dbug.ads (No_Dollar_In_Label): Delete.\n+\n+2012-07-09  Vincent Pucci  <pucci@adacore.com>\n+\n+\t* sem_ch13.adb (Check_Overloaded_Name): New routine.\n+\n+2012-07-09  Vincent Pucci  <pucci@adacore.com>\n+\n+\t* freeze.adb (Freeze_Record_Type): Analyze the delayed aspects of the\n+\tcomponents in a record type.\n+\n+2012-07-09  Pascal Obry  <obry@adacore.com>\n+\n+\t* prj-util.ads: Minor reformatting.\n+\n 2012-07-09  Tristan Gingold  <gingold@adacore.com>\n \n \t* raise-gcc.c (db_indent): Simplify style, improve comments."}, {"sha": "0290168ff0115a9b89bedfb93220ffca15242473", "filename": "gcc/ada/exp_dbug.ads", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f532ce538f8fc13b7af7cc73b94aa43bb03669/gcc%2Fada%2Fexp_dbug.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f532ce538f8fc13b7af7cc73b94aa43bb03669/gcc%2Fada%2Fexp_dbug.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.ads?ref=b3f532ce538f8fc13b7af7cc73b94aa43bb03669", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1996-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -411,14 +411,6 @@ package Exp_Dbug is\n    -- Conversion between Entities and External Names --\n    ----------------------------------------------------\n \n-   No_Dollar_In_Label : constant Boolean := True;\n-   --  True iff the target does not allow dollar signs (\"$\") in external names\n-   --  ??? We want to migrate all platforms to use the same convention. As a\n-   --  first step, we force this constant to always be True. This constant will\n-   --  eventually be deleted after we have verified that the migration does not\n-   --  cause any unforeseen adverse impact. We chose \"__\" because it is\n-   --  supported on all platforms, which is not the case of \"$\".\n-\n    procedure Get_External_Name\n      (Entity     : Entity_Id;\n       Has_Suffix : Boolean);"}, {"sha": "cee956b4839851786fc38c34dff4a53917487b02", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f532ce538f8fc13b7af7cc73b94aa43bb03669/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f532ce538f8fc13b7af7cc73b94aa43bb03669/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=b3f532ce538f8fc13b7af7cc73b94aa43bb03669", "patch": "@@ -1906,8 +1906,34 @@ package body Freeze is\n          Comp := First_Entity (Rec);\n          Prev := Empty;\n          while Present (Comp) loop\n+            --  Deal with delayed aspect specifications for components. The\n+            --  analysis of the aspect is required to be delayed to the freeze\n+            --  point, thus we analyze the pragma or attribute definition\n+            --  clause in the tree at this point. We also analyze the aspect\n+            --  specification node at the freeze point when the aspect doesn't\n+            --  correspond to pragma/attribute definition clause.\n \n-            --  First handle the component case\n+            if Ekind (Comp) = E_Component\n+               and then Has_Delayed_Aspects (Comp)\n+            then\n+               Push_Scope (Rec);\n+\n+               --  The visibility to the discriminants must be restored in\n+               --  order to properly analyze the aspects.\n+\n+               if Has_Discriminants (Rec) then\n+                  Install_Discriminants (Rec);\n+                  Analyze_Aspects_At_Freeze_Point (Comp);\n+                  Uninstall_Discriminants (Rec);\n+\n+               else\n+                  Analyze_Aspects_At_Freeze_Point (Comp);\n+               end if;\n+\n+               Pop_Scope;\n+            end if;\n+\n+            --  Handle the component and discriminant case\n \n             if Ekind (Comp) = E_Component\n               or else Ekind (Comp) = E_Discriminant"}, {"sha": "bdf2948366d2b05449ffdba9c9bbcdf8f8ef6d59", "filename": "gcc/ada/prj-util.ads", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f532ce538f8fc13b7af7cc73b94aa43bb03669/gcc%2Fada%2Fprj-util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f532ce538f8fc13b7af7cc73b94aa43bb03669/gcc%2Fada%2Fprj-util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-util.ads?ref=b3f532ce538f8fc13b7af7cc73b94aa43bb03669", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2001-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -60,8 +60,8 @@ package Prj.Util is\n    --  Describe parameters???\n \n    procedure Duplicate\n-     (This    : in out Name_List_Index;\n-      Shared  : Shared_Project_Tree_Data_Access);\n+     (This   : in out Name_List_Index;\n+      Shared : Shared_Project_Tree_Data_Access);\n    --  Duplicate a name list\n \n    function Value_Of\n@@ -203,14 +203,14 @@ package Prj.Util is\n    --  the flag Source_Info_File_Exists to True for the tree.\n \n    type Source_Info_Data is record\n-      Project             : Name_Id;\n-      Language            : Name_Id;\n-      Kind                : Source_Kind;\n-      Display_Path_Name   : Name_Id;\n-      Path_Name           : Name_Id;\n-      Unit_Name           : Name_Id               := No_Name;\n-      Index               : Int                   := 0;\n-      Naming_Exception    : Naming_Exception_Type := No;\n+      Project           : Name_Id;\n+      Language          : Name_Id;\n+      Kind              : Source_Kind;\n+      Display_Path_Name : Name_Id;\n+      Path_Name         : Name_Id;\n+      Unit_Name         : Name_Id               := No_Name;\n+      Index             : Int                   := 0;\n+      Naming_Exception  : Naming_Exception_Type := No;\n    end record;\n    --  Data read from a source info file for a single source\n "}, {"sha": "0ef580b6ffbd2d44ad818acbf563993e71314f61", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f532ce538f8fc13b7af7cc73b94aa43bb03669/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f532ce538f8fc13b7af7cc73b94aa43bb03669/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=b3f532ce538f8fc13b7af7cc73b94aa43bb03669", "patch": "@@ -1182,11 +1182,22 @@ __gnat_Unwind_ForcedUnwind (_Unwind_Exception *e,\n #endif /* __USING_SJLJ_EXCEPTIONS__ */\n \n #ifdef __SEH__\n+\n+#define STATUS_USER_DEFINED\t\t(1U << 29)\n+EXCEPTION_DISPOSITION __gnat_SEH_error_handler\n+ (struct _EXCEPTION_RECORD*, void*, struct _CONTEXT*, void*);\n+\n EXCEPTION_DISPOSITION\n __gnat_personality_seh0 (PEXCEPTION_RECORD ms_exc, void *this_frame,\n \t\t\t PCONTEXT ms_orig_context,\n \t\t\t PDISPATCHER_CONTEXT ms_disp)\n {\n+  /* Possibly transform run-time errors into Ada exceptions.  As a small\n+     optimization, we call __gnat_SEH_error_handler only on non-user\n+     exceptions.  */\n+  if (!(ms_exc->ExceptionCode & STATUS_USER_DEFINED))\n+    __gnat_SEH_error_handler (ms_exc, this_frame, ms_orig_context, ms_disp);\n+\n   return _GCC_specific_handler (ms_exc, this_frame, ms_orig_context,\n \t\t\t\tms_disp, __gnat_personality_imp);\n }"}, {"sha": "84c5d3b64807446986139e936c8a86c91e1f35ce", "filename": "gcc/ada/seh_init.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f532ce538f8fc13b7af7cc73b94aa43bb03669/gcc%2Fada%2Fseh_init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f532ce538f8fc13b7af7cc73b94aa43bb03669/gcc%2Fada%2Fseh_init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fseh_init.c?ref=b3f532ce538f8fc13b7af7cc73b94aa43bb03669", "patch": "@@ -178,9 +178,15 @@ __gnat_SEH_error_handler (struct _EXCEPTION_RECORD* ExceptionRecord,\n       msg = \"EXCEPTION_STACK_OVERFLOW\";\n       break;\n \n-   default:\n+    default:\n+#if defined (_WIN64) && defined (__SEH__)\n+      /* On Windows x64, do not transform other exception as they could\n+\t be caught by user (when SEH is used to propagate exceptions).  */\n+      return;\n+#else\n       exception = &program_error;\n       msg = \"unhandled signal\";\n+#endif\n     }\n \n #if ! defined (_WIN64)"}, {"sha": "8deb37b34fc52cec7ce065e05606e4b5b9396d60", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 41, "deletions": 22, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f532ce538f8fc13b7af7cc73b94aa43bb03669/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f532ce538f8fc13b7af7cc73b94aa43bb03669/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=b3f532ce538f8fc13b7af7cc73b94aa43bb03669", "patch": "@@ -6350,25 +6350,18 @@ package body Sem_Ch13 is\n       --  but Expression (Ident) is a preanalyzed copy of the expression,\n       --  preanalyzed just after the freeze point.\n \n-   begin\n-      --  Case of aspects Dimension, Dimension_System and Synchronization\n+      procedure Check_Overloaded_Name;\n+      --  For aspects whose expression is simply a name, this routine checks if\n+      --  the name is overloaded or not. If so, it verifies there is an\n+      --  interpretation that matches the entity obtained at the freeze point,\n+      --  otherwise the compiler complains.\n \n-      if A_Id = Aspect_Synchronization then\n-         return;\n-\n-      --  Case of stream attributes, just have to compare entities. However,\n-      --  the expression is just a name (possibly overloaded), and there may\n-      --  be stream operations declared for unrelated types, so we just need\n-      --  to verify that one of these interpretations is the one available at\n-      --  at the freeze point.\n-\n-      elsif A_Id = Aspect_Input  or else\n-         A_Id = Aspect_Output    or else\n-         A_Id = Aspect_Read      or else\n-         A_Id = Aspect_Write\n-      then\n-         Analyze (End_Decl_Expr);\n+      ---------------------------\n+      -- Check_Overloaded_Name --\n+      ---------------------------\n \n+      procedure Check_Overloaded_Name is\n+      begin\n          if not Is_Overloaded (End_Decl_Expr) then\n             Err := Entity (End_Decl_Expr) /= Entity (Freeze_Expr);\n \n@@ -6391,6 +6384,29 @@ package body Sem_Ch13 is\n                end loop;\n             end;\n          end if;\n+      end Check_Overloaded_Name;\n+\n+   --  Start of processing for Check_Aspect_At_End_Of_Declarations\n+\n+   begin\n+      --  Case of aspects Dimension, Dimension_System and Synchronization\n+\n+      if A_Id = Aspect_Synchronization then\n+         return;\n+\n+      --  Case of stream attributes, just have to compare entities. However,\n+      --  the expression is just a name (possibly overloaded), and there may\n+      --  be stream operations declared for unrelated types, so we just need\n+      --  to verify that one of these interpretations is the one available at\n+      --  at the freeze point.\n+\n+      elsif A_Id = Aspect_Input  or else\n+         A_Id = Aspect_Output    or else\n+         A_Id = Aspect_Read      or else\n+         A_Id = Aspect_Write\n+      then\n+         Analyze (End_Decl_Expr);\n+         Check_Overloaded_Name;\n \n       elsif A_Id = Aspect_Variable_Indexing or else\n             A_Id = Aspect_Constant_Indexing or else\n@@ -6402,16 +6418,19 @@ package body Sem_Ch13 is\n \n          Set_Is_Frozen (Ent, False);\n          Analyze (End_Decl_Expr);\n-         Analyze (Aspect_Rep_Item (ASN));\n          Set_Is_Frozen (Ent, True);\n \n          --  If the end of declarations comes before any other freeze\n          --  point, the Freeze_Expr is not analyzed: no check needed.\n \n-         Err :=\n-           Analyzed (Freeze_Expr)\n-             and then not In_Instance\n-             and then Entity (End_Decl_Expr) /= Entity (Freeze_Expr);\n+         if Analyzed (Freeze_Expr)\n+           and then not In_Instance\n+         then\n+            Check_Overloaded_Name;\n+\n+         else\n+            Err := False;\n+         end if;\n \n       --  All other cases\n "}]}