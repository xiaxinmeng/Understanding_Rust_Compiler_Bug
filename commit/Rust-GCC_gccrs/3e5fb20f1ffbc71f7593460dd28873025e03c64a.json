{"sha": "3e5fb20f1ffbc71f7593460dd28873025e03c64a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U1ZmIyMGYxZmZiYzcxZjc1OTM0NjBkZDI4ODczMDI1ZTAzYzY0YQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-01-26T18:32:55Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-01-26T18:32:55Z"}, "message": "Fix namespace versioning and remove __detail::__identity helpers\n\n\tPR libstdc++/79243\n\t* include/bits/c++config (literals::string_view_literals::__7): Add.\n\tOnly declare versioned namespaces for the relevant C++ dialects.\n\t* include/experimental/bits/erase_if.h (fundamentals_v2::__detail):\n\tAdd versioning macros.\n\t* include/experimental/bits/lfts_config.h:\n\t(fundamentals_v1::__detail::__7, fundamentals_v2::__detail::__7): Add.\n\t* include/experimental/string_view (fundamentals_v2::__detail):\n\tAdd versioning macros.\n\t(fundamentals_v2::__detail::__identity): Remove.\n\t(fundamentals_v2::__detail::__idt): Use common_type instead of\n\t__detail::__identity.\n\t* include/std/string_view (__detail::__identity, __detail::__idt):\n\tLikewise.\n\t(literals::string_view_literals): Fix nesting of versioning macros.\n\nFrom-SVN: r244945", "tree": {"sha": "0c141a8fa2968edea9210e0b3a1e9619c441c5b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c141a8fa2968edea9210e0b3a1e9619c441c5b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e5fb20f1ffbc71f7593460dd28873025e03c64a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e5fb20f1ffbc71f7593460dd28873025e03c64a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e5fb20f1ffbc71f7593460dd28873025e03c64a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e5fb20f1ffbc71f7593460dd28873025e03c64a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3db8d779a466722b3c232839c3a41a2fec195cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3db8d779a466722b3c232839c3a41a2fec195cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3db8d779a466722b3c232839c3a41a2fec195cd"}], "stats": {"total": 99, "additions": 62, "deletions": 37}, "files": [{"sha": "1428ffe95c21ad8ee468b82d46fc2a2dbb755532", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5fb20f1ffbc71f7593460dd28873025e03c64a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5fb20f1ffbc71f7593460dd28873025e03c64a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3e5fb20f1ffbc71f7593460dd28873025e03c64a", "patch": "@@ -1,5 +1,21 @@\n 2017-01-26  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/79243\n+\t* include/bits/c++config (literals::string_view_literals::__7): Add.\n+\tOnly declare versioned namespaces for the relevant C++ dialects.\n+\t* include/experimental/bits/erase_if.h (fundamentals_v2::__detail):\n+\tAdd versioning macros.\n+\t* include/experimental/bits/lfts_config.h:\n+\t(fundamentals_v1::__detail::__7, fundamentals_v2::__detail::__7): Add.\n+\t* include/experimental/string_view (fundamentals_v2::__detail):\n+\tAdd versioning macros.\n+\t(fundamentals_v2::__detail::__identity): Remove.\n+\t(fundamentals_v2::__detail::__idt): Use common_type instead of\n+\t__detail::__identity.\n+\t* include/std/string_view (__detail::__identity, __detail::__idt):\n+\tLikewise.\n+\t(literals::string_view_literals): Fix nesting of versioning macros.\n+\n \tPR libstdc++/79190\n \t* libsupc++/del_opa.cc (operator delete(void*, std::align_val_t))\n \t[!_GLIBCXX_HAVE_ALIGNED_ALLOC && !_GLIBCXX_HAVE_POSIX_MEMALIGN"}, {"sha": "3b694e07c51131b40bd471fe9aedd260a5d8746e", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5fb20f1ffbc71f7593460dd28873025e03c64a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5fb20f1ffbc71f7593460dd28873025e03c64a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=3e5fb20f1ffbc71f7593460dd28873025e03c64a", "patch": "@@ -179,7 +179,9 @@\n     namespace __profile { }\n     namespace __cxx1998 { }\n \n-    namespace __detail { }\n+    namespace __detail {\n+      namespace __variant { }\t\t\t\t// C++17\n+    }\n \n     namespace rel_ops { }\n \n@@ -194,14 +196,15 @@\n     \n     namespace decimal { }\n \n-    namespace chrono { }\n-    namespace placeholders { }\n-    namespace regex_constants { }\n-    namespace this_thread { }\n-    inline namespace literals {\n-      inline namespace chrono_literals { }\n-      inline namespace complex_literals { }\n-      inline namespace string_literals { }\n+    namespace chrono { }\t\t\t\t// C++11\n+    namespace placeholders { }\t\t\t\t// C++11\n+    namespace regex_constants { }\t\t\t// C++11\n+    namespace this_thread { }\t\t\t\t// C++11\n+    inline namespace literals {\t\t\t\t// C++14\n+      inline namespace chrono_literals { }\t\t// C++14\n+      inline namespace complex_literals { }\t\t// C++14\n+      inline namespace string_literals { }\t\t// C++14\n+      inline namespace string_view_literals { }\t\t// C++17\n     }\n   }\n \n@@ -282,20 +285,29 @@ namespace std\n \n   namespace decimal { inline namespace __7 { } }\n \n+#if __cplusplus >= 201103L\n   namespace chrono { inline namespace __7 { } }\n   namespace placeholders { inline namespace __7 { } }\n   namespace regex_constants { inline namespace __7 { } }\n   namespace this_thread { inline namespace __7 { } }\n \n+#if __cplusplus >= 201402L\n   inline namespace literals {\n     inline namespace chrono_literals { inline namespace __7 { } }\n     inline namespace complex_literals { inline namespace __7 { } }\n     inline namespace string_literals { inline namespace __7 { } }\n+#if __cplusplus > 201402L\n+    inline namespace string_view_literals { inline namespace __7 { } }\n+#endif // C++17\n   }\n+#endif // C++14\n+#endif // C++11\n \n   namespace __detail {\n     inline namespace __7 { }\n+#if __cplusplus > 201402L\n     namespace __variant { inline namespace __7 { } }\n+#endif\n   }\n }\n "}, {"sha": "7dc47dbb3ebcd78e912feb561143be0fc06ed7be", "filename": "libstdc++-v3/include/experimental/bits/erase_if.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5fb20f1ffbc71f7593460dd28873025e03c64a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ferase_if.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5fb20f1ffbc71f7593460dd28873025e03c64a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ferase_if.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ferase_if.h?ref=3e5fb20f1ffbc71f7593460dd28873025e03c64a", "patch": "@@ -43,9 +43,9 @@ namespace experimental\n {\n inline namespace fundamentals_v2\n {\n-\n   namespace __detail\n   {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _Container, typename _Predicate>\n       void\n       __erase_nodes_if(_Container& __cont, _Predicate __pred)\n@@ -59,9 +59,8 @@ inline namespace fundamentals_v2\n \t    ++__iter;\n \t}\n       }\n-  }\n-\n-\n+_GLIBCXX_END_NAMESPACE_VERSION\n+  } // namespace __detail\n } // inline namespace fundamentals_v2\n } // namespace experimental\n } // namespace std"}, {"sha": "a9faa47a842fd03e9cd8cbb8bed165f76d863399", "filename": "libstdc++-v3/include/experimental/bits/lfts_config.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5fb20f1ffbc71f7593460dd28873025e03c64a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Flfts_config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5fb20f1ffbc71f7593460dd28873025e03c64a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Flfts_config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Flfts_config.h?ref=3e5fb20f1ffbc71f7593460dd28873025e03c64a", "patch": "@@ -46,10 +46,14 @@ inline namespace fundamentals_v2 { inline namespace __7 { } }\n \n namespace experimental\n {\n-inline namespace fundamentals_v1 { inline namespace __7 { } }\n+inline namespace fundamentals_v1 {\n+  inline namespace __7 { }\n+  namespace __detail { inline namespace __7 { } }\n+}\n inline namespace fundamentals_v2 {\n   inline namespace __7 { }\n   namespace pmr { inline namespace __7 { } }\n+  namespace __detail { inline namespace __7 { } }\n } // namespace fundamentals_v2\n inline namespace literals { inline namespace string_view_literals {\n   inline namespace __7 { }"}, {"sha": "bd212ac371948dbf9bc519f0997f7ac0a420bedf", "filename": "libstdc++-v3/include/experimental/string_view", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5fb20f1ffbc71f7593460dd28873025e03c64a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5fb20f1ffbc71f7593460dd28873025e03c64a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view?ref=3e5fb20f1ffbc71f7593460dd28873025e03c64a", "patch": "@@ -434,24 +434,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const _CharT* _M_str;\n     };\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n \n   // [string.view.comparison], non-member basic_string_view comparison functions\n \n   namespace __detail\n   {\n-    //  Identity transform to make ADL work with just one argument.\n-    //  See n3766.html.\n-    template<typename _Tp = void>\n-      struct __identity\n-      { typedef _Tp type; };\n-\n-    template<>\n-      struct __identity<void>;\n-\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+    // Identity transform to create a non-deduced context, so that only one\n+    // argument participates in template argument deduction and the other\n+    // argument gets implicitly converted to the deduced type. See n3766.html.\n     template<typename _Tp>\n-      using __idt = typename __identity<_Tp>::type;\n+      using __idt = common_type_t<_Tp>;\n+_GLIBCXX_END_NAMESPACE_VERSION\n   }\n \n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n   template<typename _CharT, typename _Traits>\n     inline bool\n     operator==(basic_string_view<_CharT, _Traits> __x,"}, {"sha": "311d6d725b36b38bd176b8abec5803d6ae20ba1d", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5fb20f1ffbc71f7593460dd28873025e03c64a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5fb20f1ffbc71f7593460dd28873025e03c64a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=3e5fb20f1ffbc71f7593460dd28873025e03c64a", "patch": "@@ -430,20 +430,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n \n   // [string.view.comparison], non-member basic_string_view comparison function\n+\n   namespace __detail\n   {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-    //  Identity transform to make ADL work with just one argument.\n-    //  See n3766.html.\n-    template<typename _Tp = void>\n-      struct __identity\n-      { typedef _Tp type; };\n-\n-    template<>\n-      struct __identity<void>;\n-\n+    // Identity transform to create a non-deduced context, so that only one\n+    // argument participates in template argument deduction and the other\n+    // argument gets implicitly converted to the deduced type. See n3766.html.\n     template<typename _Tp>\n-      using __idt = typename __identity<_Tp>::type;\n+      using __idt = common_type_t<_Tp>;\n _GLIBCXX_END_NAMESPACE_VERSION\n   }\n \n@@ -639,12 +634,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_fast_hash<hash<u32string_view>> : std::false_type\n     { };\n #endif\n+_GLIBCXX_END_NAMESPACE_VERSION\n \n   inline namespace literals\n   {\n   inline namespace string_view_literals\n   {\n-  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     inline constexpr basic_string_view<char>\n     operator\"\"sv(const char* __str, size_t __len)\n@@ -666,11 +662,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return basic_string_view<char32_t>{__str, __len}; }\n #endif\n \n-  _GLIBCXX_END_NAMESPACE_VERSION\n+_GLIBCXX_END_NAMESPACE_VERSION\n   } // namespace string_literals\n   } // namespace literals\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n #include <bits/string_view.tcc>"}]}