{"sha": "ecde1b0a467127714872785b9935fe7c580778f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNkZTFiMGE0NjcxMjc3MTQ4NzI3ODViOTkzNWZlN2M1ODA3NzhmMA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-17T00:16:31Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-17T00:16:31Z"}, "message": "Daily bump.", "tree": {"sha": "142ef885e63e5a19a41983ba871bfd1bf9a5f1d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/142ef885e63e5a19a41983ba871bfd1bf9a5f1d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecde1b0a467127714872785b9935fe7c580778f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecde1b0a467127714872785b9935fe7c580778f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecde1b0a467127714872785b9935fe7c580778f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecde1b0a467127714872785b9935fe7c580778f0/comments", "author": null, "committer": null, "parents": [{"sha": "90c254565122fa5c02114698ce35ac46679c03b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90c254565122fa5c02114698ce35ac46679c03b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90c254565122fa5c02114698ce35ac46679c03b0"}], "stats": {"total": 398, "additions": 397, "deletions": 1}, "files": [{"sha": "1ff1b6f9d4b6a16291f1ff9b1141a4f59b368268", "filename": "gcc/ChangeLog", "status": "modified", "additions": 190, "deletions": 0, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecde1b0a467127714872785b9935fe7c580778f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecde1b0a467127714872785b9935fe7c580778f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ecde1b0a467127714872785b9935fe7c580778f0", "patch": "@@ -1,3 +1,193 @@\n+2020-09-16  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* config/rs6000/rs6000.c (have_compare_and_set_mask): Use\n+\tE_*mode in cases.\n+\n+2020-09-16  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/predicates.md (current_file_function_operand):\n+\tRemove argument from rs6000_pcrel_p call.\n+\t* config/rs6000/rs6000-logue.c (rs6000_decl_ok_for_sibcall):\n+\tLikewise.\n+\t(rs6000_global_entry_point_prologue_needed_p): Likewise.\n+\t(rs6000_output_function_prologue): Likewise.\n+\t* config/rs6000/rs6000-protos.h (rs6000_function_pcrel_p): New\n+\tprototype.\n+\t(rs6000_pcrel_p): Remove argument.\n+\t* config/rs6000/rs6000.c (rs6000_legitimize_tls_address): Remove\n+\targument from rs6000_pcrel_p call.\n+\t(rs6000_call_template_1): Likewise.\n+\t(rs6000_indirect_call_template_1): Likewise.\n+\t(rs6000_longcall_ref): Likewise.\n+\t(rs6000_call_aix): Likewise.\n+\t(rs6000_sibcall_aix): Likewise.\n+\t(rs6000_function_pcrel_p): Rename from rs6000_pcrel_p.\n+\t(rs6000_pcrel_p): Rewrite.\n+\t* config/rs6000/rs6000.md (*pltseq_plt_pcrel<mode>): Remove\n+\targument from rs6000_pcrel_p call.\n+\t(*call_local<mode>): Likewise.\n+\t(*call_value_local<mode>): Likewise.\n+\t(*call_nonlocal_aix<mode>): Likewise.\n+\t(*call_value_nonlocal_aix<mode>): Likewise.\n+\t(*call_indirect_pcrel<mode>): Likewise.\n+\t(*call_value_indirect_pcrel<mode>): Likewise.\n+\n+2020-09-16  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR preprocessor/96935\n+\t* input.c (get_substring_ranges_for_loc): Return if start.column\n+\tis less than 1.\n+\n+2020-09-16  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/96295\n+\t* tree-ssa-uninit.c (maybe_warn_operand): Work harder to avoid\n+\twarning for objects of empty structs\n+\n+2020-09-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-eh.c (lower_try_finally_dup_block): Backward propagate slocs\n+\tto stack restore builtin calls.\n+\t(cleanup_all_empty_eh): Do again a post-order traversal of the EH\n+\tregion tree.\n+\n+2020-09-16  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* tree-vect-loop.c (vect_need_peeling_or_partial_vectors_p): New\n+\tfunction.\n+\t(vect_analyze_loop_2): Make use of it not to select partial\n+\tvectors if no peel is required.\n+\t(determine_peel_for_niter): Move out some logic into\n+\t'vect_need_peeling_or_partial_vectors_p'.\n+\n+2020-09-16  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/97032\n+\t* cfgexpand.c (asm_clobber_reg_kind): Set sp_is_clobbered_by_asm\n+\tto true if the stack pointer is clobbered by asm statement.\n+\t* emit-rtl.h (rtl_data): Add sp_is_clobbered_by_asm.\n+\t* config/i386/i386.c (ix86_get_drap_rtx): Set need_drap to true\n+\tif the stack pointer is clobbered by asm statement.\n+\n+2020-09-16  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* config/s390/vector.md(*vec_tf_to_v1tf): Use \"f\" instead of \"v\"\n+\t  for the source operand.\n+\n+2020-09-16  Jojo R  <jiejie_rong@c-sky.com>\n+\n+\t* config.gcc (C-SKY): Set use_gcc_stdint=wrap for elf target.\n+\n+2020-09-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (_stmt_vec_info::num_slp_uses): Remove.\n+\t(STMT_VINFO_NUM_SLP_USES): Likewise.\n+\t(vect_free_slp_instance): Adjust.\n+\t(vect_update_shared_vectype): Declare.\n+\t* tree-vectorizer.c (vec_info::~vec_info): Adjust.\n+\t* tree-vect-loop.c (vect_analyze_loop_2): Likewise.\n+\t(vectorizable_live_operation): Use vector type from\n+\tSLP_TREE_REPRESENTATIVE.\n+\t(vect_transform_loop): Adjust.\n+\t* tree-vect-data-refs.c (vect_slp_analyze_node_alignment):\n+\tSet the shared vector type.\n+\t* tree-vect-slp.c (vect_free_slp_tree): Remove final_p\n+\tparameter, remove STMT_VINFO_NUM_SLP_USES updating.\n+\t(vect_free_slp_instance): Adjust.\n+\t(vect_create_new_slp_node): Remove STMT_VINFO_NUM_SLP_USES\n+\tupdating.\n+\t(vect_update_shared_vectype): Always compare with the\n+\tpresent vector type, update if NULL.\n+\t(vect_build_slp_tree_1): Do not update the shared vector\n+\ttype here.\n+\t(vect_build_slp_tree_2): Adjust.\n+\t(slp_copy_subtree): Likewise.\n+\t(vect_attempt_slp_rearrange_stmts): Likewise.\n+\t(vect_analyze_slp_instance): Likewise.\n+\t(vect_analyze_slp): Likewise.\n+\t(vect_slp_analyze_node_operations_1): Update the shared\n+\tvector type.\n+\t(vect_slp_analyze_operations): Adjust.\n+\t(vect_slp_analyze_bb_1): Likewise.\n+\n+2020-09-16  Jojo R  <jiejie_rong@c-sky.com>\n+\n+\t* config/csky/t-csky-linux (CSKY_MULTILIB_OSDIRNAMES): Use mfloat-abi.\n+\t(MULTILIB_OPTIONS): Likewise.\n+\t* config/csky/t-csky-elf (MULTILIB_OPTIONS): Likewise.\n+\t(MULTILIB_EXCEPTIONS): Likewise.\n+\n+2020-09-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/arm/arm.c (arm_option_restore): Comment out opts argument\n+\tname to avoid unused parameter warnings.\n+\n+2020-09-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* optc-save-gen.awk: In cl_optimization_stream_out use\n+\tbp_pack_var_len_{int,unsigned} instead of bp_pack_value.  In\n+\tcl_optimization_stream_in use bp_unpack_var_len_{int,unsigned}\n+\tinstead of bp_unpack_value.  Formatting fix.\n+\n+2020-09-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/97053\n+\t* gimple-ssa-store-merging.c (check_no_overlap): Add FIRST_ORDER,\n+\tSTART, FIRST_EARLIER and LAST_EARLIER arguments.  Return false if\n+\tany stores between FIRST_EARLIER inclusive and LAST_EARLIER exclusive\n+\thas order in between FIRST_ORDER and LAST_ORDER and overlaps the to\n+\tbe merged store.\n+\t(imm_store_chain_info::try_coalesce_bswap): Add FIRST_EARLIER argument.\n+\tAdjust check_no_overlap caller.\n+\t(imm_store_chain_info::coalesce_immediate_stores): Add first_earlier\n+\tand last_earlier variables, adjust them during iterations.  Adjust\n+\tcheck_no_overlap callers, call check_no_overlap even when extending\n+\toverlapping stores by extra INTEGER_CST stores.\n+\n+2020-09-16  Jojo R  <jiejie_rong@c-sky.com>\n+\n+\t* config/csky/csky-linux-elf.h (GLIBC_DYNAMIC_LINKER): Use mfloat-abi.\n+\n+2020-09-16  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR target/97019\n+\t* config/rs6000/rs6000-p8swap.c (find_alignment_op): Adjust to\n+\tsupport multiple defintions which are all AND operations with\n+\tthe mask -16B.\n+\t(recombine_lvx_pattern): Adjust to handle multiple AND operations\n+\tfrom find_alignment_op.\n+\t(recombine_stvx_pattern): Likewise.\n+\n+2020-09-16  Jojo R  <jiejie_rong@c-sky.com>\n+\n+\t* config/csky/csky.md (CSKY_NPARM_FREGS): New.\n+\t(call_value_internal_vs/d): New.\n+\t(untyped_call): New.\n+\t* config/csky/csky.h (TARGET_SINGLE_FPU): New.\n+\t(TARGET_DOUBLE_FPU): New.\n+\t(FUNCTION_VARG_REGNO_P): New.\n+\t(CSKY_VREG_MODE_P): New.\n+\t(FUNCTION_VARG_MODE_P): New.\n+\t(CUMULATIVE_ARGS): Add extra regs info.\n+\t(INIT_CUMULATIVE_ARGS): Use csky_init_cumulative_args.\n+\t(FUNCTION_ARG_REGNO_P): Use FUNCTION_VARG_REGNO_P.\n+\t* config/csky/csky-protos.h (csky_init_cumulative_args): Extern.\n+\t* config/csky/csky.c (csky_cpu_cpp_builtins): Support TARGET_HARD_FLOAT_ABI.\n+\t(csky_function_arg): Likewise.\n+\t(csky_num_arg_regs): Likewise.\n+\t(csky_function_arg_advance): Likewise.\n+\t(csky_function_value): Likewise.\n+\t(csky_libcall_value): Likewise.\n+\t(csky_function_value_regno_p): Likewise.\n+\t(csky_arg_partial_bytes): Likewise.\n+\t(csky_setup_incoming_varargs): Likewise.\n+\t(csky_init_cumulative_args): New.\n+\n+2020-09-16  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-call.c (altivec_init_builtins): Fix name\n+\tof __builtin_altivec_xst_len_r.\n+\n 2020-09-15  Ilya Leoshkevich  <iii@linux.ibm.com>\n \n \t* rtlanal.c (set_noop_p): Treat subregs of registers in"}, {"sha": "fae3fa1fac63c210999ee0154b6b1c45cc09518f", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecde1b0a467127714872785b9935fe7c580778f0/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecde1b0a467127714872785b9935fe7c580778f0/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=ecde1b0a467127714872785b9935fe7c580778f0", "patch": "@@ -1 +1 @@\n-20200916\n+20200917"}, {"sha": "5a176c75011c5c720a215df599a52b2c9fa907c2", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecde1b0a467127714872785b9935fe7c580778f0/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecde1b0a467127714872785b9935fe7c580778f0/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=ecde1b0a467127714872785b9935fe7c580778f0", "patch": "@@ -1,3 +1,50 @@\n+2020-09-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* engine.cc (strongly_connected_components::strong_connect): Only\n+\tconsider intraprocedural edges when creating SCCs.\n+\t(worklist::key_t::cmp): Add comment.  Treat call_string\n+\tdifferences as more important than differences of program_point\n+\twithin a supernode.\n+\n+2020-09-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* engine.cc (supernode_cluster::dump_dot): Show the SCC id\n+\tin the per-supernode clusters in FILENAME.eg.dot output.\n+\t(exploded_graph_annotator::add_node_annotations):\n+\tShow the SCC of the supernode in FILENAME.supernode.eg.dot output.\n+\t* exploded-graph.h (worklist::scc_id): New.\n+\t(exploded_graph::get_scc_id): New.\n+\n+2020-09-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* engine.cc (exploded_node::dump_dot): Show STATUS_BULK_MERGED.\n+\t(exploded_graph::process_worklist): Call\n+\tmaybe_process_run_of_before_supernode_enodes.\n+\t(exploded_graph::maybe_process_run_of_before_supernode_enodes):\n+\tNew.\n+\t(exploded_graph_annotator::print_enode): Show STATUS_BULK_MERGED.\n+\t* exploded-graph.h (enum exploded_node::status): Add\n+\tSTATUS_BULK_MERGED.\n+\n+2020-09-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* engine.cc\n+\t(exploded_graph::process_node) <case PK_BEFORE_SUPERNODE>:\n+\tSimplify by using program_point::get_next.\n+\t* program-point.cc (program_point::get_next): New.\n+\t* program-point.h (program_point::get_next): New decl.\n+\n+2020-09-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* engine.cc (exploded_graph::get_or_create_node): Show the\n+\tprogram point when issuing -Wanalyzer-too-complex due to hitting\n+\tthe per-program-point limit.\n+\n+2020-09-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region-model.cc (region_model::on_call_pre): Treat getchar as\n+\thaving no side-effects.\n+\n 2020-09-15  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/96650"}, {"sha": "12e03b312993b2a407f5fe7683c448236173a7b7", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecde1b0a467127714872785b9935fe7c580778f0/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecde1b0a467127714872785b9935fe7c580778f0/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ecde1b0a467127714872785b9935fe7c580778f0", "patch": "@@ -1,3 +1,13 @@\n+2020-09-16  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/78666\n+\tPR c/96126\n+\t* c-attribs.c (validate_attr_args): New function.\n+\t(validate_attr_arg): Same.\n+\t(handle_section_attribute): Call it.  Introduce a local variable.\n+\t(handle_alloc_size_attribute):  Same.\n+\t(handle_alloc_align_attribute): Same.\n+\n 2020-09-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-attribs.c (handle_optimize_attribute): Adjust"}, {"sha": "b60ef4c4b42d6ca4e79e4f513ecd1633c01e2694", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecde1b0a467127714872785b9935fe7c580778f0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecde1b0a467127714872785b9935fe7c580778f0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ecde1b0a467127714872785b9935fe7c580778f0", "patch": "@@ -1,3 +1,28 @@\n+2020-09-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (cp_check_omp_declare_reduction): Return bool.\n+\t* semantics.c (cp_check_omp_declare_reduction): Return true on for\n+\tsuccess.\n+\t* pt.c (push_template_decl_real): OMP reductions do not get a\n+\ttemplate header.\n+\t(tsubst_function_decl): Remove special casing for local decl omp\n+\treductions.\n+\t(tsubst_expr): Call instantiate_body for a local omp reduction.\n+\t(instantiate_body): Add nested_p parm, and deal with such\n+\tinstantiations.\n+\t(instantiate_decl): Reject FUNCTION_SCOPE entities, adjust\n+\tinstantiate_body call.\n+\n+2020-09-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* pt.c (instantiate_body): Remove 'nested' var, simplify\n+\tpush_to_top logic.\n+\n+2020-09-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* pt.c (instantiate_body): New, broken out of ..\n+\t(instantiate_decl): ... here.  Call it.\n+\n 2020-09-15  Nathan Sidwell  <nathan@acm.org>\n \n \t* pt.c (push_template_decl_real): OMP reductions retain a template"}, {"sha": "e77ee45ba80c4e23bf1ed02babcd010ad9a027b3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecde1b0a467127714872785b9935fe7c580778f0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecde1b0a467127714872785b9935fe7c580778f0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ecde1b0a467127714872785b9935fe7c580778f0", "patch": "@@ -1,3 +1,8 @@\n+2020-09-16  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/97061\n+\t* trans-openmp.c (gfc_trans_omp_do): Handle simd with (last)private.\n+\n 2020-09-15  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/96668"}, {"sha": "068ac6996af24ce26301e8972c4ec24332cd4143", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecde1b0a467127714872785b9935fe7c580778f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecde1b0a467127714872785b9935fe7c580778f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ecde1b0a467127714872785b9935fe7c580778f0", "patch": "@@ -1,3 +1,97 @@\n+2020-09-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96653\n+\t* gcc.dg/analyzer/loop-0-up-to-n-by-1-with-iter-obj.c: Update\n+\texpected number of exploded nodes.\n+\t* gcc.dg/analyzer/malloc-vs-local-1a.c: Update expected number\n+\tof exploded nodes.\n+\t* gcc.dg/analyzer/pr96653.c: Remove -Wno-analyzer-too-complex.\n+\n+2020-09-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/bzip2-arg-parse-1.c: New test.\n+\t* gcc.dg/analyzer/loop-n-down-to-1-by-1.c: Remove xfail.\n+\t* gcc.dg/analyzer/pr94851-1.c: Add xfail.\n+\n+2020-09-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/getchar-1.c: New test.\n+\n+2020-09-16  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/78666\n+\tPR c/96126\n+\t* gcc.dg/attr-alloc_align-5.c: New test.\n+\t* gcc.dg/attr-alloc_size-13.c: New test.\n+\t* gcc.dg/attr-section.c: New test.\n+\t* c-c++-common/builtin-has-attribute-3.c: Add xfails due to expected\n+\twarnings to be cleaned up.\n+\n+2020-09-16  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR preprocessor/96935\n+\t* gcc.dg/format/pr96935.c: New test.\n+\n+2020-09-16  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/96295\n+\t* g++.dg/warn/Wuninitialized-11.C: New test.\n+\n+2020-09-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/gomp/udr-2.C: Add additional expected error.\n+\n+2020-09-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/concat4.adb: New test.\n+\n+2020-09-16  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/97061\n+\t* gfortran.dg/gomp/openmp-simd-6.f90: New test.\n+\n+2020-09-16  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/aarch64/sve/cost_model_10.c: New test.\n+\t* gcc.target/aarch64/sve/clastb_8.c: Update test for new\n+\tvectorization strategy.\n+\t* gcc.target/aarch64/sve/cost_model_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_14.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_15.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_16.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_17.c: Likewise.\n+\n+2020-09-16  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/97032\n+\t* gcc.target/i386/pr97032.c: New test.\n+\n+2020-09-16  Feng Xue  <fxue@os.amperecomputing.com>\n+\n+\tPR testsuite/97066\n+\t* gcc.dg/ifcvt-3.c: Modified to suppress simplification.\n+\t* gcc.dg/tree-ssa/20030807-10.c: Likewise.\n+\n+2020-09-16  Jojo R  <jiejie_rong@c-sky.com>\n+\n+\t* lib/target-supports.exp (check_profiling_available): Refine name of elf target.\n+\n+2020-09-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/97053\n+\t* gcc.dg/store_merging_31.c: New test.\n+\t* gcc.dg/store_merging_32.c: New test.\n+\n+2020-09-16  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR target/97019\n+\t* gcc.target/powerpc/pr97019.c: New test.\n+\n+2020-09-16  Jojo R  <jiejie_rong@c-sky.com>\n+\n+\t* gcc.dg/builtin-apply2.c : Skip if CSKY.\n+\t* gcc.dg/torture/stackalign/builtin-apply-2.c : Likewise.\n+\n 2020-09-15  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/96650"}, {"sha": "b6fbe2853bd444741ff08e91fbbaf06f7f402855", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecde1b0a467127714872785b9935fe7c580778f0/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecde1b0a467127714872785b9935fe7c580778f0/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=ecde1b0a467127714872785b9935fe7c580778f0", "patch": "@@ -1,3 +1,20 @@\n+2020-09-17  Ian Lance Taylor  <iant@golang.org>\n+\n+\tPR libbacktrace/97080\n+\t* fileline.c (backtrace_syminfo_to_full_callback): New function.\n+\t(backtrace_syminfo_to_full_error_callback): New function.\n+\t* elf.c (elf_nodebug): Call syminfo_fn if possible.\n+\t* internal.h (struct backtrace_call_full): Define.\n+\t(backtrace_syminfo_to_full_callback): Declare.\n+\t(backtrace_syminfo_to_full_error_callback): Declare.\n+\t* mtest.c (f3): Only check all[i] if data.index permits.\n+\n+2020-09-16  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* macho.c (MACH_O_CPU_TYPE_PPC): New.\n+\t(MACH_O_CPU_TYPE_PPC64): New.\n+\tAdd compile-tests for powerpc to the Mach-O variants.\n+\n 2020-09-14  Ian Lance Taylor  <iant@golang.org>\n \n \tPR libbacktrace/93608"}, {"sha": "42585c805b40b12af0fcc5f029aecf9f1bf12fb8", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecde1b0a467127714872785b9935fe7c580778f0/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecde1b0a467127714872785b9935fe7c580778f0/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=ecde1b0a467127714872785b9935fe7c580778f0", "patch": "@@ -1,3 +1,7 @@\n+2020-09-16  Jojo R  <jiejie_rong@c-sky.com>\n+\n+\t* config.host (C-SKY): Enable crtbegin/crtend.o of libgcc for elf target.\n+\n 2020-09-09  Tom de Vries  <tdevries@suse.de>\n \n \t* config/nvptx/atomic.c (__SYNC_SUBWORD_COMPARE_AND_SWAP): Fix"}, {"sha": "0e3755757d604e472e119d625e94dd69518ab896", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecde1b0a467127714872785b9935fe7c580778f0/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecde1b0a467127714872785b9935fe7c580778f0/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=ecde1b0a467127714872785b9935fe7c580778f0", "patch": "@@ -1,3 +1,7 @@\n+2020-09-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* testsuite/libgomp.c++/udr-3.C: Add missing ctor.\n+\n 2020-09-15  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/96668"}]}