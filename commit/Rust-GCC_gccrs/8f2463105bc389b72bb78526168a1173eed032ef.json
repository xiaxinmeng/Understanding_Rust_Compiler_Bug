{"sha": "8f2463105bc389b72bb78526168a1173eed032ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYyNDYzMTA1YmMzODliNzJiYjc4NTI2MTY4YTExNzNlZWQwMzJlZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-07-16T13:45:20Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-07-16T13:45:20Z"}, "message": "read-md.h (fatal_at): Declare.\n\ngcc/\n\t* read-md.h (fatal_at): Declare.\n\t* read-md.c (fatal_at): New function.\n\t* genattrtab.c (insn_def, attr_desc, delay_desc): Use a file_location\n\tto record the source position.\n\t(check_attr_test): Take a file_location instead of a line number.\n\tUse fatal_at instead of fatal.\n\t(check_attr_value): Update after above changes, using \"at\"\n\trather than \"with_line\" reporting functions.\n\t(convert_set_attr_alternative): Likewise.\n\t(gen_attr): Likewise.\n\t(check_defs): Likewise.  Don't assign to read_md_filename.\n\t(gen_insn): Update initialization after above changes.\n\t(gen_delay): Likewise.\n\t(write_insn_cases): Print the filename for a define_peephole.\n\t(gen_insn_reserv): Take a line number as argument and update\n\tthe call to check_attr_test.\n\t(main): Pass a line number to gen_insn_reserv.\n\nFrom-SVN: r225880", "tree": {"sha": "ec925b4d8b0de840d466f033d5dfe330f5dc083d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec925b4d8b0de840d466f033d5dfe330f5dc083d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f2463105bc389b72bb78526168a1173eed032ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f2463105bc389b72bb78526168a1173eed032ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f2463105bc389b72bb78526168a1173eed032ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f2463105bc389b72bb78526168a1173eed032ef/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cc4726077d61d3c73edf2e909a397d78ec447540", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc4726077d61d3c73edf2e909a397d78ec447540", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc4726077d61d3c73edf2e909a397d78ec447540"}], "stats": {"total": 168, "additions": 98, "deletions": 70}, "files": [{"sha": "3c78c75c90bd94405af8917f490cbd2c166c40e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2463105bc389b72bb78526168a1173eed032ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2463105bc389b72bb78526168a1173eed032ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f2463105bc389b72bb78526168a1173eed032ef", "patch": "@@ -1,3 +1,23 @@\n+2015-07-16  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* read-md.h (fatal_at): Declare.\n+\t* read-md.c (fatal_at): New function.\n+\t* genattrtab.c (insn_def, attr_desc, delay_desc): Use a file_location\n+\tto record the source position.\n+\t(check_attr_test): Take a file_location instead of a line number.\n+\tUse fatal_at instead of fatal.\n+\t(check_attr_value): Update after above changes, using \"at\"\n+\trather than \"with_line\" reporting functions.\n+\t(convert_set_attr_alternative): Likewise.\n+\t(gen_attr): Likewise.\n+\t(check_defs): Likewise.  Don't assign to read_md_filename.\n+\t(gen_insn): Update initialization after above changes.\n+\t(gen_delay): Likewise.\n+\t(write_insn_cases): Print the filename for a define_peephole.\n+\t(gen_insn_reserv): Take a line number as argument and update\n+\tthe call to check_attr_test.\n+\t(main): Pass a line number to gen_insn_reserv.\n+\n 2015-07-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* read-md.h (file_location): New structure."}, {"sha": "b0ebb4623e63c2e1c06b7bd171a5a4cb508d532b", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 64, "deletions": 70, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2463105bc389b72bb78526168a1173eed032ef/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2463105bc389b72bb78526168a1173eed032ef/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=8f2463105bc389b72bb78526168a1173eed032ef", "patch": "@@ -139,8 +139,7 @@ struct insn_def\n   rtx def;\t\t\t/* The DEFINE_...  */\n   int insn_code;\t\t/* Instruction number.  */\n   int insn_index;\t\t/* Expression number in file, for errors.  */\n-  const char *filename;\t\t/* Filename.  */\n-  int lineno;\t\t\t/* Line number.  */\n+  file_location loc;\t\t/* Where in the .md files it occurs.  */\n   int num_alternatives;\t\t/* Number of alternatives.  */\n   int vec_idx;\t\t\t/* Index of attribute vector in `def'.  */\n };\n@@ -177,7 +176,7 @@ struct attr_desc\n   struct attr_desc *next;\t/* Next attribute.  */\n   struct attr_value *first_value; /* First value of this attribute.  */\n   struct attr_value *default_val; /* Default value for this attribute.  */\n-  int lineno : 24;\t\t/* Line number.  */\n+  file_location loc;\t\t/* Where in the .md files it occurs.  */\n   unsigned is_numeric\t: 1;\t/* Values of this attribute are numeric.  */\n   unsigned is_const\t: 1;\t/* Attribute value constant for each run.  */\n   unsigned is_special\t: 1;\t/* Don't call `write_attr_set'.  */\n@@ -189,8 +188,8 @@ struct delay_desc\n {\n   rtx def;\t\t\t/* DEFINE_DELAY expression.  */\n   struct delay_desc *next;\t/* Next DEFINE_DELAY.  */\n+  file_location loc;\t\t/* Where in the .md files it occurs.  */\n   int num;\t\t\t/* Number of DEFINE_DELAY, starting at 1.  */\n-  int lineno;\t\t\t/* Line number.  */\n };\n \n struct attr_value_list\n@@ -746,7 +745,7 @@ attr_copy_rtx (rtx orig)\n    Return the new expression, if any.  */\n \n static rtx\n-check_attr_test (rtx exp, int is_const, int lineno)\n+check_attr_test (rtx exp, int is_const, file_location loc)\n {\n   struct attr_desc *attr;\n   struct attr_value *av;\n@@ -761,7 +760,7 @@ check_attr_test (rtx exp, int is_const, int lineno)\n \treturn check_attr_test (attr_rtx (NOT,\n \t\t\t\t\t  attr_eq (XSTR (exp, 0),\n \t\t\t\t\t\t   &XSTR (exp, 1)[1])),\n-\t\t\t\tis_const, lineno);\n+\t\t\t\tis_const, loc);\n \n       else if (n_comma_elts (XSTR (exp, 1)) == 1)\n \t{\n@@ -771,12 +770,13 @@ check_attr_test (rtx exp, int is_const, int lineno)\n \t      if (! strcmp (XSTR (exp, 0), \"alternative\"))\n \t\treturn mk_attr_alt (((uint64_t) 1) << atoi (XSTR (exp, 1)));\n \t      else\n-\t\tfatal (\"unknown attribute `%s' in EQ_ATTR\", XSTR (exp, 0));\n+\t\tfatal_at (loc, \"unknown attribute `%s' in EQ_ATTR\",\n+\t\t\t  XSTR (exp, 0));\n \t    }\n \n \t  if (is_const && ! attr->is_const)\n-\t    fatal (\"constant expression uses insn attribute `%s' in EQ_ATTR\",\n-\t\t   XSTR (exp, 0));\n+\t    fatal_at (loc, \"constant expression uses insn attribute `%s'\"\n+\t\t      \" in EQ_ATTR\", XSTR (exp, 0));\n \n \t  /* Copy this just to make it permanent,\n \t     so expressions using it can be permanent too.  */\n@@ -792,8 +792,8 @@ check_attr_test (rtx exp, int is_const, int lineno)\n \t    {\n \t      for (p = XSTR (exp, 1); *p; p++)\n \t\tif (! ISDIGIT (*p))\n-\t\t  fatal (\"attribute `%s' takes only numeric values\",\n-\t\t\t XSTR (exp, 0));\n+\t\t  fatal_at (loc, \"attribute `%s' takes only numeric values\",\n+\t\t\t    XSTR (exp, 0));\n \t    }\n \t  else\n \t    {\n@@ -803,8 +803,8 @@ check_attr_test (rtx exp, int is_const, int lineno)\n \t\t  break;\n \n \t      if (av == NULL)\n-\t\tfatal (\"unknown value `%s' for `%s' attribute\",\n-\t\t       XSTR (exp, 1), XSTR (exp, 0));\n+\t\tfatal_at (loc, \"unknown value `%s' for `%s' attribute\",\n+\t\t\t  XSTR (exp, 1), XSTR (exp, 0));\n \t    }\n \t}\n       else\n@@ -830,7 +830,7 @@ check_attr_test (rtx exp, int is_const, int lineno)\n \t\t  orexp = insert_right_side (IOR, orexp, newexp, -2, -2);\n \t\t}\n \n-\t      return check_attr_test (orexp, is_const, lineno);\n+\t      return check_attr_test (orexp, is_const, loc);\n \t    }\n \t}\n       break;\n@@ -847,12 +847,12 @@ check_attr_test (rtx exp, int is_const, int lineno)\n \n     case IOR:\n     case AND:\n-      XEXP (exp, 0) = check_attr_test (XEXP (exp, 0), is_const, lineno);\n-      XEXP (exp, 1) = check_attr_test (XEXP (exp, 1), is_const, lineno);\n+      XEXP (exp, 0) = check_attr_test (XEXP (exp, 0), is_const, loc);\n+      XEXP (exp, 1) = check_attr_test (XEXP (exp, 1), is_const, loc);\n       break;\n \n     case NOT:\n-      XEXP (exp, 0) = check_attr_test (XEXP (exp, 0), is_const, lineno);\n+      XEXP (exp, 0) = check_attr_test (XEXP (exp, 0), is_const, loc);\n       break;\n \n     case MATCH_TEST:\n@@ -862,8 +862,8 @@ check_attr_test (rtx exp, int is_const, int lineno)\n \n     case MATCH_OPERAND:\n       if (is_const)\n-\tfatal (\"RTL operator \\\"%s\\\" not valid in constant attribute test\",\n-\t       GET_RTX_NAME (GET_CODE (exp)));\n+\tfatal_at (loc, \"RTL operator \\\"%s\\\" not valid in constant attribute\"\n+\t\t  \" test\", GET_RTX_NAME (GET_CODE (exp)));\n       /* These cases can't be simplified.  */\n       ATTR_IND_SIMPLIFIED_P (exp) = 1;\n       break;\n@@ -890,8 +890,8 @@ check_attr_test (rtx exp, int is_const, int lineno)\n \t  break;\n \t}\n     default:\n-      fatal (\"RTL operator \\\"%s\\\" not valid in attribute test\",\n-\t     GET_RTX_NAME (GET_CODE (exp)));\n+      fatal_at (loc, \"RTL operator \\\"%s\\\" not valid in attribute test\",\n+\t\tGET_RTX_NAME (GET_CODE (exp)));\n     }\n \n   return exp;\n@@ -915,17 +915,17 @@ check_attr_value (rtx exp, struct attr_desc *attr)\n     case CONST_INT:\n       if (!attr->is_numeric)\n \t{\n-\t  error_with_line (attr->lineno,\n-\t\t\t   \"CONST_INT not valid for non-numeric attribute %s\",\n-\t\t\t   attr->name);\n+\t  error_at (attr->loc,\n+\t\t    \"CONST_INT not valid for non-numeric attribute %s\",\n+\t\t    attr->name);\n \t  break;\n \t}\n \n       if (INTVAL (exp) < 0)\n \t{\n-\t  error_with_line (attr->lineno,\n-\t\t\t   \"negative numeric value specified for attribute %s\",\n-\t\t\t   attr->name);\n+\t  error_at (attr->loc,\n+\t\t    \"negative numeric value specified for attribute %s\",\n+\t\t    attr->name);\n \t  break;\n \t}\n       break;\n@@ -940,9 +940,9 @@ check_attr_value (rtx exp, struct attr_desc *attr)\n \t  for (; *p; p++)\n \t    if (! ISDIGIT (*p))\n \t      {\n-\t\terror_with_line (attr->lineno,\n-\t\t\t\t \"non-numeric value for numeric attribute %s\",\n-\t\t\t\t attr->name);\n+\t\terror_at (attr->loc,\n+\t\t\t  \"non-numeric value for numeric attribute %s\",\n+\t\t\t  attr->name);\n \t\tbreak;\n \t      }\n \t  break;\n@@ -954,14 +954,13 @@ check_attr_value (rtx exp, struct attr_desc *attr)\n \t  break;\n \n       if (av == NULL)\n-\terror_with_line (attr->lineno,\n-\t\t\t \"unknown value `%s' for `%s' attribute\",\n-\t\t\t XSTR (exp, 0), attr->name);\n+\terror_at (attr->loc, \"unknown value `%s' for `%s' attribute\",\n+\t\t  XSTR (exp, 0), attr->name);\n       break;\n \n     case IF_THEN_ELSE:\n       XEXP (exp, 0) = check_attr_test (XEXP (exp, 0), attr->is_const,\n-\t\t\t\t       attr->lineno);\n+\t\t\t\t       attr->loc);\n       XEXP (exp, 1) = check_attr_value (XEXP (exp, 1), attr);\n       XEXP (exp, 2) = check_attr_value (XEXP (exp, 2), attr);\n       break;\n@@ -973,9 +972,8 @@ check_attr_value (rtx exp, struct attr_desc *attr)\n     case MOD:\n       if (!attr->is_numeric)\n \t{\n-\t  error_with_line (attr->lineno,\n-\t\t\t   \"invalid operation `%s' for non-numeric\"\n-\t\t\t   \" attribute value\", GET_RTX_NAME (GET_CODE (exp)));\n+\t  error_at (attr->loc, \"invalid operation `%s' for non-numeric\"\n+\t\t    \" attribute value\", GET_RTX_NAME (GET_CODE (exp)));\n \t  break;\n \t}\n       /* Fall through.  */\n@@ -998,16 +996,14 @@ check_attr_value (rtx exp, struct attr_desc *attr)\n     case COND:\n       if (XVECLEN (exp, 0) % 2 != 0)\n \t{\n-\t  error_with_line (attr->lineno,\n-\t\t\t   \"first operand of COND must have even length\");\n+\t  error_at (attr->loc, \"first operand of COND must have even length\");\n \t  break;\n \t}\n \n       for (i = 0; i < XVECLEN (exp, 0); i += 2)\n \t{\n \t  XVECEXP (exp, 0, i) = check_attr_test (XVECEXP (exp, 0, i),\n-\t\t\t\t\t\t attr->is_const,\n-\t\t\t\t\t\t attr->lineno);\n+\t\t\t\t\t\t attr->is_const, attr->loc);\n \t  XVECEXP (exp, 0, i + 1)\n \t    = check_attr_value (XVECEXP (exp, 0, i + 1), attr);\n \t}\n@@ -1019,16 +1015,16 @@ check_attr_value (rtx exp, struct attr_desc *attr)\n       {\n \tstruct attr_desc *attr2 = find_attr (&XSTR (exp, 0), 0);\n \tif (attr2 == NULL)\n-\t  error_with_line (attr->lineno, \"unknown attribute `%s' in ATTR\",\n+\t  error_at (attr->loc, \"unknown attribute `%s' in ATTR\",\n \t\t\t   XSTR (exp, 0));\n \telse if (attr->is_const && ! attr2->is_const)\n-\t  error_with_line (attr->lineno,\n-\t\t\t   \"non-constant attribute `%s' referenced from `%s'\",\n-\t\t\t   XSTR (exp, 0), attr->name);\n+\t  error_at (attr->loc,\n+\t\t    \"non-constant attribute `%s' referenced from `%s'\",\n+\t\t    XSTR (exp, 0), attr->name);\n \telse if (attr->is_numeric != attr2->is_numeric)\n-\t  error_with_line (attr->lineno,\n-\t\t\t   \"numeric attribute mismatch calling `%s' from `%s'\",\n-\t\t\t   XSTR (exp, 0), attr->name);\n+\t  error_at (attr->loc,\n+\t\t    \"numeric attribute mismatch calling `%s' from `%s'\",\n+\t\t    XSTR (exp, 0), attr->name);\n       }\n       break;\n \n@@ -1039,9 +1035,8 @@ check_attr_value (rtx exp, struct attr_desc *attr)\n       return attr_rtx (SYMBOL_REF, XSTR (exp, 0));\n \n     default:\n-      error_with_line (attr->lineno,\n-\t\t       \"invalid operation `%s' for attribute value\",\n-\t\t       GET_RTX_NAME (GET_CODE (exp)));\n+      error_at (attr->loc, \"invalid operation `%s' for attribute value\",\n+\t\tGET_RTX_NAME (GET_CODE (exp)));\n       break;\n     }\n \n@@ -1060,9 +1055,8 @@ convert_set_attr_alternative (rtx exp, struct insn_def *id)\n \n   if (XVECLEN (exp, 1) != num_alt)\n     {\n-      error_with_line (id->lineno,\n-\t\t       \"bad number of entries in SET_ATTR_ALTERNATIVE, was %d expected %d\",\n-\t\t       XVECLEN (exp, 1), num_alt);\n+      error_at (id->loc, \"bad number of entries in SET_ATTR_ALTERNATIVE,\"\n+\t\t\" was %d expected %d\", XVECLEN (exp, 1), num_alt);\n       return NULL_RTX;\n     }\n \n@@ -1133,7 +1127,6 @@ check_defs (void)\n       if (XVEC (id->def, id->vec_idx) == NULL)\n \tcontinue;\n \n-      read_md_filename = id->filename;\n       for (i = 0; i < XVECLEN (id->def, id->vec_idx); i++)\n \t{\n \t  value = XVECEXP (id->def, id->vec_idx, i);\n@@ -1142,7 +1135,7 @@ check_defs (void)\n \t    case SET:\n \t      if (GET_CODE (XEXP (value, 0)) != ATTR)\n \t\t{\n-\t\t  error_with_line (id->lineno, \"bad attribute set\");\n+\t\t  error_at (id->loc, \"bad attribute set\");\n \t\t  value = NULL_RTX;\n \t\t}\n \t      break;\n@@ -1156,17 +1149,17 @@ check_defs (void)\n \t      break;\n \n \t    default:\n-\t      error_with_line (id->lineno, \"invalid attribute code %s\",\n-\t\t\t       GET_RTX_NAME (GET_CODE (value)));\n+\t      error_at (id->loc, \"invalid attribute code %s\",\n+\t\t\tGET_RTX_NAME (GET_CODE (value)));\n \t      value = NULL_RTX;\n \t    }\n \t  if (value == NULL_RTX)\n \t    continue;\n \n \t  if ((attr = find_attr (&XSTR (XEXP (value, 0), 0), 0)) == NULL)\n \t    {\n-\t      error_with_line (id->lineno, \"unknown attribute %s\",\n-\t\t\t       XSTR (XEXP (value, 0), 0));\n+\t      error_at (id->loc, \"unknown attribute %s\",\n+\t\t\tXSTR (XEXP (value, 0), 0));\n \t      continue;\n \t    }\n \n@@ -3148,10 +3141,10 @@ gen_attr (rtx exp, int lineno)\n     {\n       error_with_line (lineno, \"duplicate definition for attribute %s\",\n \t\t       attr->name);\n-      message_with_line (attr->lineno, \"previous definition\");\n+      message_at (attr->loc, \"previous definition\");\n       return;\n     }\n-  attr->lineno = lineno;\n+  attr->loc = file_location (read_md_filename, lineno);\n \n   if (GET_CODE (exp) == DEFINE_ENUM_ATTR)\n     {\n@@ -3273,8 +3266,7 @@ gen_insn (rtx exp, int lineno)\n   id->next = defs;\n   defs = id;\n   id->def = exp;\n-  id->filename = read_md_filename;\n-  id->lineno = lineno;\n+  id->loc = file_location (read_md_filename, lineno);\n \n   switch (GET_CODE (exp))\n     {\n@@ -3338,7 +3330,7 @@ gen_delay (rtx def, int lineno)\n   delay->def = def;\n   delay->num = ++num_delays;\n   delay->next = delays;\n-  delay->lineno = lineno;\n+  delay->loc = file_location (read_md_filename, lineno);\n   delays = delay;\n }\n \n@@ -4236,8 +4228,9 @@ write_insn_cases (FILE *outf, struct insn_ent *ie, int indent)\n       {\n \twrite_indent (outf, indent);\n \tif (GET_CODE (ie->def->def) == DEFINE_PEEPHOLE)\n-\t  fprintf (outf, \"case %d:  /* define_peephole, line %d */\\n\",\n-\t\t   ie->def->insn_code, ie->def->lineno);\n+\t  fprintf (outf, \"case %d:  /* define_peephole, %s:%d */\\n\",\n+\t\t   ie->def->insn_code, ie->def->loc.filename,\n+\t\t   ie->def->loc.lineno);\n \telse\n \t  fprintf (outf, \"case %d:  /* %s */\\n\",\n \t\t   ie->def->insn_code, XSTR (ie->def->def, 0));\n@@ -4730,13 +4723,14 @@ static size_t n_insn_reservs;\n /* Store information from a DEFINE_INSN_RESERVATION for future\n    attribute generation.  */\n static void\n-gen_insn_reserv (rtx def)\n+gen_insn_reserv (rtx def, int lineno)\n {\n   struct insn_reserv *decl = oballoc (struct insn_reserv);\n+  file_location loc (read_md_filename, lineno);\n \n   decl->name            = DEF_ATTR_STRING (XSTR (def, 0));\n   decl->default_latency = XINT (def, 1);\n-  decl->condexp         = check_attr_test (XEXP (def, 2), 0, 0);\n+  decl->condexp         = check_attr_test (XEXP (def, 2), 0, loc);\n   decl->insn_num        = n_insn_reservs;\n   decl->bypassed\t= false;\n   decl->next            = 0;\n@@ -5216,7 +5210,7 @@ main (int argc, char **argv)\n \t  break;\n \n \tcase DEFINE_INSN_RESERVATION:\n-\t  gen_insn_reserv (desc);\n+\t  gen_insn_reserv (desc, lineno);\n \t  break;\n \n \tcase DEFINE_BYPASS:"}, {"sha": "8c9fecc0c35a922d3c6fe8ac251d330b87fcf225", "filename": "gcc/read-md.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2463105bc389b72bb78526168a1173eed032ef/gcc%2Fread-md.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2463105bc389b72bb78526168a1173eed032ef/gcc%2Fread-md.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-md.c?ref=8f2463105bc389b72bb78526168a1173eed032ef", "patch": "@@ -277,6 +277,19 @@ error_at (file_location loc, const char *msg, ...)\n   have_error = 1;\n }\n \n+/* Like message_at, but treat the condition as a fatal error.  */\n+\n+void\n+fatal_at (file_location loc, const char *msg, ...)\n+{\n+  va_list ap;\n+\n+  va_start (ap, msg);\n+  message_at_1 (loc, msg, ap);\n+  va_end (ap);\n+  exit (1);\n+}\n+\n /* A printf-like function for reporting an error against line LINENO\n    in the current MD file.  */\n "}, {"sha": "8b85c276d238be05d6ff78121794bbaeec87cddb", "filename": "gcc/read-md.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2463105bc389b72bb78526168a1173eed032ef/gcc%2Fread-md.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2463105bc389b72bb78526168a1173eed032ef/gcc%2Fread-md.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-md.h?ref=8f2463105bc389b72bb78526168a1173eed032ef", "patch": "@@ -136,6 +136,7 @@ extern void print_c_condition (const char *);\n extern void fprint_c_condition (FILE *, const char *);\n extern void message_at (file_location, const char *, ...) ATTRIBUTE_PRINTF_2;\n extern void error_at (file_location, const char *, ...) ATTRIBUTE_PRINTF_2;\n+extern void fatal_at (file_location, const char *, ...) ATTRIBUTE_PRINTF_2;\n extern void message_with_line (int, const char *, ...) ATTRIBUTE_PRINTF_2;\n extern void error_with_line (int, const char *, ...) ATTRIBUTE_PRINTF_2;\n extern void fatal_with_file_and_line (const char *, ...)"}]}