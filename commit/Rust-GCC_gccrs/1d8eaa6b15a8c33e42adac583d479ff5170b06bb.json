{"sha": "1d8eaa6b15a8c33e42adac583d479ff5170b06bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ4ZWFhNmIxNWE4YzMzZTQyYWRhYzU4M2Q0NzlmZjUxNzBiMDZiYg==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@issan.informatik.uni-dortmund.de", "date": "1998-03-16T02:16:43Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "1998-03-16T02:16:43Z"}, "message": "m68k.c: Include <stdlib.h> for atoi.\n\n\t* config/m68k/m68k.c: Include <stdlib.h> for atoi.  Include\n\t\"recog.h\" for offsettable_memref_p.\n\t(legitimize_pic_address): Remove unused variable `offset'.\n\t(notice_update_cc): Change return type to void.  Add default label\n\tto switch.\n\t(standard_68881_constant_p): Remove unused variable mode.\n\t(print_operand): Define local variable i only if SUPPORT_SUN_FPA.\n\t(const_int_cost): Explicitly declare as returning int.\n\t(output_dbcc_and_branch): Change return type to void.\n\t* config/m68k/linux.h, config/m68k/m68k.md, config/m68k/m68k.c,\n\tconfig/m68k/m68k.h: Replace gen_rtx (XXX, ...) with gen_rtx_XXX\n\t(...).  Use GEN_INT instead of gen_rtx_CONST_INT.\n\nFrom-SVN: r18617", "tree": {"sha": "d924b5d13e18dad4004dbe54eabd50d8a317ccb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d924b5d13e18dad4004dbe54eabd50d8a317ccb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d8eaa6b15a8c33e42adac583d479ff5170b06bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d8eaa6b15a8c33e42adac583d479ff5170b06bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d8eaa6b15a8c33e42adac583d479ff5170b06bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d8eaa6b15a8c33e42adac583d479ff5170b06bb/comments", "author": null, "committer": null, "parents": [{"sha": "60ba47b43c5aca239faa63deed62b13016e88f30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60ba47b43c5aca239faa63deed62b13016e88f30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60ba47b43c5aca239faa63deed62b13016e88f30"}], "stats": {"total": 387, "additions": 195, "deletions": 192}, "files": [{"sha": "381845caaedc5c92b9e255f34b38be9ce8b55f28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d8eaa6b15a8c33e42adac583d479ff5170b06bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d8eaa6b15a8c33e42adac583d479ff5170b06bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d8eaa6b15a8c33e42adac583d479ff5170b06bb", "patch": "@@ -1,3 +1,19 @@\n+Mon Mar 16 11:14:20 1998  Andreas Schwab  <schwab@issan.informatik.uni-dortmund.de>\n+\n+\t* config/m68k/m68k.c: Include <stdlib.h> for atoi.  Include\n+\t\"recog.h\" for offsettable_memref_p.\n+\t(legitimize_pic_address): Remove unused variable `offset'.\n+\t(notice_update_cc): Change return type to void.  Add default label\n+\tto switch.\n+\t(standard_68881_constant_p): Remove unused variable mode.\n+\t(print_operand): Define local variable i only if SUPPORT_SUN_FPA.\n+\t(const_int_cost): Explicitly declare as returning int.\n+\t(output_dbcc_and_branch): Change return type to void.\n+\n+\t* config/m68k/linux.h, config/m68k/m68k.md, config/m68k/m68k.c,\n+\tconfig/m68k/m68k.h: Replace gen_rtx (XXX, ...) with gen_rtx_XXX\n+\t(...).  Use GEN_INT instead of gen_rtx_CONST_INT.\n+\n Sun Mar 15 22:30:44 PST 1998 Jeff Law  (law@cygnus.com)\n \n \t* version.c: Bump for snapshot."}, {"sha": "4dfd56a97c3450e82c1d8972746b3ac6835ccd55", "filename": "gcc/config/m68k/linux.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d8eaa6b15a8c33e42adac583d479ff5170b06bb/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d8eaa6b15a8c33e42adac583d479ff5170b06bb/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=1d8eaa6b15a8c33e42adac583d479ff5170b06bb", "patch": "@@ -270,10 +270,10 @@ Boston, MA 02111-1307, USA.  */\n #undef FUNCTION_VALUE\n #define FUNCTION_VALUE(VALTYPE, FUNC)\t\t\t\t\t\\\n   (TREE_CODE (VALTYPE) == REAL_TYPE && TARGET_68881\t\t\t\\\n-   ? gen_rtx (REG, TYPE_MODE (VALTYPE), 16)\t\t\t\t\\\n+   ? gen_rtx_REG (TYPE_MODE (VALTYPE), 16)\t\t\t\t\\\n    : (POINTER_TYPE_P (VALTYPE)\t\t\t\t\t\t\\\n-      ? gen_rtx (REG, TYPE_MODE (VALTYPE), 8)\t\t\t\t\\\n-      : gen_rtx (REG, TYPE_MODE (VALTYPE), 0)))\n+      ? gen_rtx_REG (TYPE_MODE (VALTYPE), 8)\t\t\t\t\\\n+      : gen_rtx_REG (TYPE_MODE (VALTYPE), 0)))\n \n /* For compatibility with the large body of existing code which does\n    not always properly declare external functions returning pointer\n@@ -299,8 +299,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define LIBCALL_VALUE(MODE)\t\t\t\t\t\t\\\n   ((((MODE) == SFmode || (MODE) == DFmode || (MODE) == XFmode)\t\t\\\n     && TARGET_68881)\t\t\t\t\t\t\t\\\n-   ? gen_rtx (REG, (MODE), 16)\t\t\t\t\t\t\\\n-   : gen_rtx (REG, (MODE), 0))\n+   ? gen_rtx_REG (MODE, 16)\t\t\t\t\t\t\\\n+   : gen_rtx_REG (MODE, 0))\n \n /* In m68k svr4, a symbol_ref rtx can be a valid PIC operand if it is\n    an operand of a function call. */\n@@ -330,7 +330,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #undef FINALIZE_TRAMPOLINE\n #define FINALIZE_TRAMPOLINE(TRAMP)\t\t\t\t\t\\\n-  emit_library_call (gen_rtx (SYMBOL_REF, Pmode, \"__clear_cache\"),\t\\\n+  emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__clear_cache\"),\t\\\n \t\t     0, VOIDmode, 2, TRAMP, Pmode,\t\t\t\\\n \t\t     plus_constant (TRAMP, TRAMPOLINE_SIZE), Pmode);\n "}, {"sha": "c6fb663a25effae15d8a6e70bcad4100a9b6bd5a", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 51, "deletions": 43, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d8eaa6b15a8c33e42adac583d479ff5170b06bb/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d8eaa6b15a8c33e42adac583d479ff5170b06bb/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=1d8eaa6b15a8c33e42adac583d479ff5170b06bb", "patch": "@@ -32,10 +32,15 @@ Boston, MA 02111-1307, USA.  */\n #include \"insn-flags.h\"\n #include \"output.h\"\n #include \"insn-attr.h\"\n+#include \"recog.h\"\n \n /* Needed for use_return_insn.  */\n #include \"flags.h\"\n \n+#if HAVE_STDLIB_H\n+#include <stdlib.h>                                                \n+#endif\n+\n #ifdef SUPPORT_SUN_FPA\n \n /* Index into this array by (register number >> 3) to find the\n@@ -135,7 +140,7 @@ finalize_pic ()\n {\n   if (flag_pic && current_function_uses_pic_offset_table)\n     {\n-      rtx insn = gen_rtx (USE, VOIDmode, pic_offset_table_rtx);\n+      rtx insn = gen_rtx_USE (VOIDmode, pic_offset_table_rtx);\n       emit_insn_after (insn, get_insns ());\n       emit_insn (insn);\n     }\n@@ -892,6 +897,7 @@ flags_in_68881 ()\n    set.  It is assumed that valid_dbcc_comparison_p and flags_in_68881 will\n    kick those out before we get here.  */\n \n+void\n output_dbcc_and_branch (operands)\n      rtx *operands;\n {\n@@ -1027,14 +1033,14 @@ output_scc_di(op, operand1, operand2, dest)\n     }\n   loperands[0] = operand1;\n   if (GET_CODE (operand1) == REG)\n-    loperands[1] = gen_rtx (REG, SImode, REGNO (operand1) + 1);\n+    loperands[1] = gen_rtx_REG (SImode, REGNO (operand1) + 1);\n   else\n     loperands[1] = adj_offsettable_operand (operand1, 4);\n   if (operand2 != const0_rtx)\n     {\n       loperands[2] = operand2;\n       if (GET_CODE (operand2) == REG)\n-\tloperands[3] = gen_rtx (REG, SImode, REGNO (operand2) + 1);\n+\tloperands[3] = gen_rtx_REG (SImode, REGNO (operand2) + 1);\n       else\n \tloperands[3] = adj_offsettable_operand (operand2, 4);\n     }\n@@ -1308,9 +1314,9 @@ legitimize_pic_address (orig, mode, reg)\n       if (reg == 0)\n \tabort ();\n \n-      pic_ref = gen_rtx (MEM, Pmode,\n-\t\t\t gen_rtx (PLUS, Pmode,\n-\t\t\t\t  pic_offset_table_rtx, orig));\n+      pic_ref = gen_rtx_MEM (Pmode,\n+\t\t\t     gen_rtx_PLUS (Pmode,\n+\t\t\t\t\t   pic_offset_table_rtx, orig));\n       current_function_uses_pic_offset_table = 1;\n       if (reload_in_progress)\n \tregs_ever_live[PIC_OFFSET_TABLE_REGNUM] = 1;\n@@ -1320,7 +1326,7 @@ legitimize_pic_address (orig, mode, reg)\n     }\n   else if (GET_CODE (orig) == CONST)\n     {\n-      rtx base, offset;\n+      rtx base;\n \n       /* Make sure this is CONST has not already been legitimized */\n       if (GET_CODE (XEXP (orig, 0)) == PLUS\n@@ -1341,7 +1347,7 @@ legitimize_pic_address (orig, mode, reg)\n \n       if (GET_CODE (orig) == CONST_INT)\n \treturn plus_constant_for_output (base, INTVAL (orig));\n-      pic_ref = gen_rtx (PLUS, Pmode, base, orig);\n+      pic_ref = gen_rtx_PLUS (Pmode, base, orig);\n       /* Likewise, should we set special REG_NOTEs here?  */\n     }\n   return pic_ref;\n@@ -1386,6 +1392,7 @@ const_method (constant)\n   return MOVL;\n }\n \n+int\n const_int_cost (constant)\n      rtx constant;\n {\n@@ -1423,14 +1430,14 @@ output_move_const_into_data_reg (operands)\n       return \"moveq %1,%0\";\n #endif\n     case NOTB :\n-      operands[1] = gen_rtx (CONST_INT, VOIDmode, i ^ 0xff);\n+      operands[1] = GEN_INT (i ^ 0xff);\n #if defined (MOTOROLA) && !defined (CRDS)\n       return \"moveq%.l %1,%0\\n\\tnot%.b %0\";\n #else\n       return \"moveq %1,%0\\n\\tnot%.b %0\";\n #endif\t \n     case NOTW :\n-      operands[1] = gen_rtx (CONST_INT, VOIDmode, i ^ 0xffff);\n+      operands[1] = GEN_INT (i ^ 0xffff);\n #if defined (MOTOROLA) && !defined (CRDS)\n       return \"moveq%.l %1,%0\\n\\tnot%.w %0\";\n #else\n@@ -1446,7 +1453,7 @@ output_move_const_into_data_reg (operands)\n       {\n \tunsigned u = i;\n \n-\toperands[1] = gen_rtx (CONST_INT, VOIDmode, (u << 16) | (u >> 16));\n+\toperands[1] = GEN_INT ((u << 16) | (u >> 16));\n #if defined (MOTOROLA) && !defined (CRDS)\n \treturn \"moveq%.l %1,%0\\n\\tswap %0\";\n #else\n@@ -1589,8 +1596,8 @@ output_move_qimode (operands)\n     {\n       xoperands[1] = operands[1];\n       xoperands[2]\n-\t= gen_rtx (MEM, QImode,\n-\t\t   gen_rtx (PLUS, VOIDmode, stack_pointer_rtx, const1_rtx));\n+\t= gen_rtx_MEM (QImode,\n+\t\t       gen_rtx_PLUS (VOIDmode, stack_pointer_rtx, const1_rtx));\n       /* Just pushing a byte puts it in the high byte of the halfword.\t*/\n       /* We must put it in the low-order, high-numbered byte.  */\n       if (!reg_mentioned_p (stack_pointer_rtx, operands[1]))\n@@ -1757,11 +1764,11 @@ output_move_double (operands)\n       else\n         output_asm_insn (\"subq%.l %#8,%0\", operands);\n       if (GET_MODE (operands[1]) == XFmode)\n-\toperands[0] = gen_rtx (MEM, XFmode, operands[0]);\n+\toperands[0] = gen_rtx_MEM (XFmode, operands[0]);\n       else if (GET_MODE (operands[0]) == DFmode)\n-\toperands[0] = gen_rtx (MEM, DFmode, operands[0]);\n+\toperands[0] = gen_rtx_MEM (DFmode, operands[0]);\n       else\n-\toperands[0] = gen_rtx (MEM, DImode, operands[0]);\n+\toperands[0] = gen_rtx_MEM (DImode, operands[0]);\n       optype0 = OFFSOP;\n     }\n   if (optype0 == POPOP && optype1 == PUSHOP)\n@@ -1772,11 +1779,11 @@ output_move_double (operands)\n       else\n         output_asm_insn (\"subq%.l %#8,%1\", operands);\n       if (GET_MODE (operands[1]) == XFmode)\n-\toperands[1] = gen_rtx (MEM, XFmode, operands[1]);\n+\toperands[1] = gen_rtx_MEM (XFmode, operands[1]);\n       else if (GET_MODE (operands[1]) == DFmode)\n-\toperands[1] = gen_rtx (MEM, DFmode, operands[1]);\n+\toperands[1] = gen_rtx_MEM (DFmode, operands[1]);\n       else\n-\toperands[1] = gen_rtx (MEM, DImode, operands[1]);\n+\toperands[1] = gen_rtx_MEM (DImode, operands[1]);\n       optype1 = OFFSOP;\n     }\n \n@@ -1802,8 +1809,8 @@ output_move_double (operands)\n     {\n       if (optype0 == REGOP)\n \t{\n-\t  latehalf[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 2);\n-\t  middlehalf[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+\t  latehalf[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 2);\n+\t  middlehalf[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n \t}\n       else if (optype0 == OFFSOP)\n \t{\n@@ -1818,8 +1825,8 @@ output_move_double (operands)\n \n       if (optype1 == REGOP)\n \t{\n-\t  latehalf[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 2);\n-\t  middlehalf[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 1);\n+\t  latehalf[1] = gen_rtx_REG (SImode, REGNO (operands[1]) + 2);\n+\t  middlehalf[1] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n \t}\n       else if (optype1 == OFFSOP)\n \t{\n@@ -1860,14 +1867,14 @@ output_move_double (operands)\n     /* size is not 12: */\n     {\n       if (optype0 == REGOP)\n-\tlatehalf[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+\tlatehalf[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n       else if (optype0 == OFFSOP)\n \tlatehalf[0] = adj_offsettable_operand (operands[0], size - 4);\n       else\n \tlatehalf[0] = operands[0];\n \n       if (optype1 == REGOP)\n-\tlatehalf[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 1);\n+\tlatehalf[1] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n       else if (optype1 == OFFSOP)\n \tlatehalf[1] = adj_offsettable_operand (operands[1], size - 4);\n       else if (optype1 == CNSTOP)\n@@ -1892,7 +1899,7 @@ output_move_double (operands)\n   if (optype0 == REGOP\n       && (optype1 == OFFSOP || optype1 == MEMOP))\n     {\n-      rtx testlow = gen_rtx (REG, SImode, REGNO (operands[0]));\n+      rtx testlow = gen_rtx_REG (SImode, REGNO (operands[0]));\n \n       if (reg_overlap_mentioned_p (testlow, XEXP (operands[1], 0))\n \t  && reg_overlap_mentioned_p (latehalf[0], XEXP (operands[1], 0)))\n@@ -1906,13 +1913,13 @@ output_move_double (operands)\n \t  output_asm_insn (\"lea %a1,%0\", xops);\n \t  if( GET_MODE (operands[1]) == XFmode )\n \t    {\n-\t      operands[1] = gen_rtx (MEM, XFmode, latehalf[0]);\n+\t      operands[1] = gen_rtx_MEM (XFmode, latehalf[0]);\n \t      middlehalf[1] = adj_offsettable_operand (operands[1], size-8);\n \t      latehalf[1] = adj_offsettable_operand (operands[1], size-4);\n \t    }\n \t  else\n \t    {\n-\t      operands[1] = gen_rtx (MEM, DImode, latehalf[0]);\n+\t      operands[1] = gen_rtx_MEM (DImode, latehalf[0]);\n \t      latehalf[1] = adj_offsettable_operand (operands[1], size-4);\n \t    }\n \t}\n@@ -2115,8 +2122,7 @@ output_addsi3 (operands)\n       if (INTVAL (operands[2]) < 0\n \t  && INTVAL (operands[2]) >= -8)\n         {\n-\t  operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t         - INTVAL (operands[2]));\n+\t  operands[2] = GEN_INT (-INTVAL (operands[2]));\n \t  return \"subq%.l %2,%0\";\n \t}\n       /* On the CPU32 it is faster to use two addql instructions to\n@@ -2127,15 +2133,13 @@ output_addsi3 (operands)\n \t  if (INTVAL (operands[2]) > 8\n \t      && INTVAL (operands[2]) <= 16)\n \t    {\n-\t      operands[2] = gen_rtx (CONST_INT, VOIDmode, \n-\t\t\t\t      INTVAL (operands[2]) - 8);\n+\t      operands[2] = GEN_INT (INTVAL (operands[2]) - 8);\n \t      return \"addq%.l %#8,%0\\n\\taddq%.l %2,%0\";\n \t    }\n \t  if (INTVAL (operands[2]) < -8\n \t      && INTVAL (operands[2]) >= -16)\n \t    {\n-\t      operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t      - INTVAL (operands[2]) - 8);\n+\t      operands[2] = GEN_INT (-INTVAL (operands[2]) - 8);\n \t      return \"subq%.l %#8,%0\\n\\tsubq%.l %2,%0\";\n \t    }\n \t}\n@@ -2166,6 +2170,7 @@ output_addsi3 (operands)\n    possibly invalid to use the saved cc's.  In those cases we clear out\n    some or all of the saved cc's so they won't be used.  */\n \n+void\n notice_update_cc (exp, insn)\n      rtx exp;\n      rtx insn;\n@@ -2263,6 +2268,9 @@ notice_update_cc (exp, insn)\n \t   Thus, the cc's are set for r2.\n \t   This can set N bit spuriously. */\n \tcc_status.flags |= CC_NOT_NEGATIVE; \n+\n+      default:\n+\tbreak;\n       }\n   if (cc_status.value1 && GET_CODE (cc_status.value1) == REG\n       && cc_status.value2\n@@ -2401,7 +2409,6 @@ standard_68881_constant_p (x)\n {\n   REAL_VALUE_TYPE r;\n   int i;\n-  enum machine_mode mode;\n \n #ifdef NO_ASM_FMOVECR\n   return 0;\n@@ -2694,7 +2701,9 @@ print_operand (file, op, letter)\n      rtx op;\t\t\t/* operand to print */\n      int letter;\t\t/* %<letter> or 0 */\n {\n+#ifdef SUPPORT_SUN_FPA\n   int i;\n+#endif\n \n   if (letter == '.')\n     {\n@@ -3248,8 +3257,7 @@ output_andsi3 (operands)\n     {\n       if (GET_CODE (operands[0]) != REG)\n         operands[0] = adj_offsettable_operand (operands[0], 2);\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t     INTVAL (operands[2]) & 0xffff);\n+      operands[2] = GEN_INT (INTVAL (operands[2]) & 0xffff);\n       /* Do not delete a following tstl %0 insn; that would be incorrect.  */\n       CC_STATUS_INIT;\n       if (operands[2] == const0_rtx)\n@@ -3263,12 +3271,12 @@ output_andsi3 (operands)\n     {\n       if (DATA_REG_P (operands[0]))\n         {\n-          operands[1] = gen_rtx (CONST_INT, VOIDmode, logval);\n+          operands[1] = GEN_INT (logval);\n         }\n       else\n         {\n \t  operands[0] = adj_offsettable_operand (operands[0], 3 - (logval / 8));\n-\t  operands[1] = gen_rtx (CONST_INT, VOIDmode, logval % 8);\n+\t  operands[1] = GEN_INT (logval % 8);\n         }\n       /* This does not set condition codes in a standard way.  */\n       CC_STATUS_INIT;\n@@ -3303,12 +3311,12 @@ output_iorsi3 (operands)\n     {\n       if (DATA_REG_P (operands[0]))\n \t{\n-\t  operands[1] = gen_rtx (CONST_INT, VOIDmode, logval);\n+\t  operands[1] = GEN_INT (logval);\n \t}\n       else\n         {\n \t  operands[0] = adj_offsettable_operand (operands[0], 3 - (logval / 8));\n-\t  operands[1] = gen_rtx (CONST_INT, VOIDmode, logval % 8);\n+\t  operands[1] = GEN_INT (logval % 8);\n \t}\n       CC_STATUS_INIT;\n       return \"bset %1,%0\";\n@@ -3341,12 +3349,12 @@ output_xorsi3 (operands)\n     {\n       if (DATA_REG_P (operands[0]))\n \t{\n-\t  operands[1] = gen_rtx (CONST_INT, VOIDmode, logval);\n+\t  operands[1] = GEN_INT (logval);\n \t}\n       else\n         {\n \t  operands[0] = adj_offsettable_operand (operands[0], 3 - (logval / 8));\n-\t  operands[1] = gen_rtx (CONST_INT, VOIDmode, logval % 8);\n+\t  operands[1] = GEN_INT (logval % 8);\n \t}\n       CC_STATUS_INIT;\n       return \"bchg %1,%0\";"}, {"sha": "5a9e0c0006c917f1265a52d1a6fe1132ab19710a", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d8eaa6b15a8c33e42adac583d479ff5170b06bb/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d8eaa6b15a8c33e42adac583d479ff5170b06bb/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=1d8eaa6b15a8c33e42adac583d479ff5170b06bb", "patch": "@@ -888,14 +888,14 @@ extern enum reg_class regno_reg_class[];\n /* On the 68000 the return value is in D0 regardless.  */\n \n #define FUNCTION_VALUE(VALTYPE, FUNC)  \\\n-  gen_rtx (REG, TYPE_MODE (VALTYPE), 0)\n+  gen_rtx_REG (TYPE_MODE (VALTYPE), 0)\n \n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.  */\n \n /* On the 68000 the return value is in D0 regardless.  */\n \n-#define LIBCALL_VALUE(MODE)  gen_rtx (REG, MODE, 0)\n+#define LIBCALL_VALUE(MODE)  gen_rtx_REG (MODE, 0)\n \n /* 1 if N is a possible register number for a function value.\n    On the 68000, d0 is the only register thus used.  */\n@@ -965,7 +965,7 @@ extern enum reg_class regno_reg_class[];\n    It exists only to test register calling conventions.  */\n \n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n-((TARGET_REGPARM && (CUM) < 8) ? gen_rtx (REG, (MODE), (CUM) / 4) : 0)\n+((TARGET_REGPARM && (CUM) < 8) ? gen_rtx_REG ((MODE), (CUM) / 4) : 0)\n \n /* For an arg passed partly in registers and partly in memory,\n    this is the number of registers used.\n@@ -1235,11 +1235,11 @@ while(0)\n \n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  emit_move_insn (gen_rtx (MEM, HImode, TRAMP), GEN_INT(0x207C));\t\\\n-  emit_move_insn (gen_rtx (MEM, SImode, plus_constant (TRAMP, 2)), CXT); \\\n-  emit_move_insn (gen_rtx (MEM, HImode, plus_constant (TRAMP, 6)),\t\\\n+  emit_move_insn (gen_rtx_MEM (HImode, TRAMP), GEN_INT(0x207C));\t\\\n+  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (TRAMP, 2)), CXT); \\\n+  emit_move_insn (gen_rtx_MEM (HImode, plus_constant (TRAMP, 6)),\t\\\n \t\t  GEN_INT(0x4EF9));\t\t\t\t\t\\\n-  emit_move_insn (gen_rtx (MEM, SImode, plus_constant (TRAMP, 8)), FNADDR); \\\n+  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (TRAMP, 8)), FNADDR); \\\n   FINALIZE_TRAMPOLINE(TRAMP);\t\t\t\t\t\t\\\n }\n \n@@ -1800,7 +1800,7 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n \n /* Before the prologue, RA is at 0(%sp).  */\n #define INCOMING_RETURN_ADDR_RTX \\\n-  gen_rtx (MEM, VOIDmode, gen_rtx (REG, VOIDmode, STACK_POINTER_REGNUM))\n+  gen_rtx_MEM (VOIDmode, gen_rtx_REG (VOIDmode, STACK_POINTER_REGNUM))\n \n /* We must not use the DBX register numbers for the DWARF 2 CFA column\n    numbers because that maps to numbers beyond FIRST_PSEUDO_REGISTER."}, {"sha": "92e4df6abf871351f46e872bcded79dd968c1601", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 114, "deletions": 135, "changes": 249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d8eaa6b15a8c33e42adac583d479ff5170b06bb/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d8eaa6b15a8c33e42adac583d479ff5170b06bb/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=1d8eaa6b15a8c33e42adac583d479ff5170b06bb", "patch": "@@ -813,7 +813,7 @@\n   \"(unsigned) INTVAL (operands[1]) < 8 && !TARGET_5200\"\n   \"*\n {\n-  operands[1] = gen_rtx (CONST_INT, VOIDmode, 7 - INTVAL (operands[1]));\n+  operands[1] = GEN_INT (7 - INTVAL (operands[1]));\n   return output_btst (operands, operands[1], operands[0], insn, 7);\n }\")\n \n@@ -828,12 +828,10 @@\n     {\n       operands[0] = adj_offsettable_operand (operands[0],\n \t\t\t\t\t     INTVAL (operands[1]) / 8);\n-      operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t     7 - INTVAL (operands[1]) % 8);\n+      operands[1] = GEN_INT (7 - INTVAL (operands[1]) % 8);\n       return output_btst (operands, operands[1], operands[0], insn, 7);\n     }\n-  operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t 31 - INTVAL (operands[1]));\n+  operands[1] = GEN_INT (31 - INTVAL (operands[1]));\n   return output_btst (operands, operands[1], operands[0], insn, 31);\n }\")\n \n@@ -851,12 +849,10 @@\n     {\n       operands[0] = adj_offsettable_operand (operands[0],\n \t\t\t\t\t     INTVAL (operands[1]) / 8);\n-      operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t     7 - INTVAL (operands[1]) % 8);\n+      operands[1] = GEN_INT (7 - INTVAL (operands[1]) % 8);\n       return output_btst (operands, operands[1], operands[0], insn, 7);\n     }\n-  operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t 31 - INTVAL (operands[1]));\n+  operands[1] = GEN_INT (31 - INTVAL (operands[1]));\n   return output_btst (operands, operands[1], operands[0], insn, 31);\n }\")\n \n@@ -1182,7 +1178,7 @@\n       if (REG_P (operands[1]))\n \t{\n \t  rtx xoperands[2];\n-\t  xoperands[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 1);\n+\t  xoperands[1] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n \t  output_asm_insn (\\\"move%.l %1,%-\\\", xoperands);\n \t  output_asm_insn (\\\"move%.l %1,%-\\\", operands);\n \t  return \\\"f%&move%.d %+,%0\\\";\n@@ -1196,7 +1192,7 @@\n       if (REG_P (operands[0]))\n \t{\n \t  output_asm_insn (\\\"fmove%.d %f1,%-\\;move%.l %+,%0\\\", operands);\n-\t  operands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+\t  operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n \t  return \\\"move%.l %+,%0\\\";\n \t}\n       else\n@@ -1240,9 +1236,9 @@\n       if (REG_P (operands[1]))\n \t{\n \t  rtx xoperands[2];\n-\t  xoperands[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 2);\n+\t  xoperands[1] = gen_rtx_REG (SImode, REGNO (operands[1]) + 2);\n \t  output_asm_insn (\\\"move%.l %1,%-\\\", xoperands);\n-\t  xoperands[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 1);\n+\t  xoperands[1] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n \t  output_asm_insn (\\\"move%.l %1,%-\\\", xoperands);\n \t  output_asm_insn (\\\"move%.l %1,%-\\\", operands);\n \t  return \\\"fmove%.x %+,%0\\\";\n@@ -1254,9 +1250,9 @@\n   if (REG_P (operands[0]))\n     {\n       output_asm_insn (\\\"fmove%.x %f1,%-\\;move%.l %+,%0\\\", operands);\n-      operands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+      operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n       output_asm_insn (\\\"move%.l %+,%0\\\", operands);\n-      operands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+      operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n       return \\\"move%.l %+,%0\\\";\n     }\n   return \\\"fmove%.x %f1,%0\\\";\n@@ -1276,9 +1272,9 @@\n       if (REG_P (operands[1]))\n \t{\n \t  rtx xoperands[2];\n-\t  xoperands[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 2);\n+\t  xoperands[1] = gen_rtx_REG (SImode, REGNO (operands[1]) + 2);\n \t  output_asm_insn (\\\"move%.l %1,%-\\\", xoperands);\n-\t  xoperands[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 1);\n+\t  xoperands[1] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n \t  output_asm_insn (\\\"move%.l %1,%-\\\", xoperands);\n \t  output_asm_insn (\\\"move%.l %1,%-\\\", operands);\n \t  return \\\"fmove%.x %+,%0\\\";\n@@ -1292,9 +1288,9 @@\n       if (REG_P (operands[0]))\n         {\n           output_asm_insn (\\\"fmove%.x %f1,%-\\;move%.l %+,%0\\\", operands);\n-          operands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+          operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n           output_asm_insn (\\\"move%.l %+,%0\\\", operands);\n-          operands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+          operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n           return \\\"move%.l %+,%0\\\";\n         }\n       else\n@@ -1340,7 +1336,7 @@\n       if (REG_P (operands[1]))\n \t{\n \t  rtx xoperands[2];\n-\t  xoperands[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 1);\n+\t  xoperands[1] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n \t  output_asm_insn (\\\"move%.l %1,%-\\\", xoperands);\n \t  output_asm_insn (\\\"move%.l %1,%-\\\", operands);\n \t  return \\\"fmove%.d %+,%0\\\";\n@@ -1354,7 +1350,7 @@\n       if (REG_P (operands[0]))\n \t{\n \t  output_asm_insn (\\\"fmove%.d %f1,%-\\;move%.l %+,%0\\\", operands);\n-\t  operands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+\t  operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n \t  return \\\"move%.l %+,%0\\\";\n \t}\n       else\n@@ -1458,7 +1454,7 @@\n {\n   CC_STATUS_INIT;\n   if (GET_CODE (operands[0]) == REG)\n-    operands[2] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+    operands[2] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   else if (GET_CODE (XEXP (operands[0], 0)) == PRE_DEC)\n     return \\\"move%.l %1,%0\\;clr%.l %0\\\";\n   else if (GET_CODE (XEXP (operands[0], 0)) == POST_INC)\n@@ -1481,10 +1477,10 @@\n {\n   operands[1] = make_safe_from (operands[1], operands[0]);\n   if (GET_CODE (operands[0]) == SUBREG)\n-    operands[2] = gen_rtx (SUBREG, HImode, SUBREG_REG (operands[0]),\n-\t\t\t   SUBREG_WORD (operands[0]));\n+    operands[2] = gen_rtx_SUBREG (HImode, SUBREG_REG (operands[0]),\n+\t\t\t\t  SUBREG_WORD (operands[0]));\n   else\n-    operands[2] = gen_rtx (SUBREG, HImode, operands[0], 0);\n+    operands[2] = gen_rtx_SUBREG (HImode, operands[0], 0);\n }\")\n \n (define_expand \"zero_extendqihi2\"\n@@ -1497,10 +1493,10 @@\n {\n   operands[1] = make_safe_from (operands[1], operands[0]);\n   if (GET_CODE (operands[0]) == SUBREG)\n-    operands[2] = gen_rtx (SUBREG, QImode, SUBREG_REG (operands[0]),\n-\t\t\t   SUBREG_WORD (operands[0]));\n+    operands[2] = gen_rtx_SUBREG (QImode, SUBREG_REG (operands[0]),\n+\t\t\t\t  SUBREG_WORD (operands[0]));\n   else\n-    operands[2] = gen_rtx (SUBREG, QImode, operands[0], 0);\n+    operands[2] = gen_rtx_SUBREG (QImode, operands[0], 0);\n }\")\n \n (define_expand \"zero_extendqisi2\"\n@@ -1513,10 +1509,10 @@\n {\n   operands[1] = make_safe_from (operands[1], operands[0]);\n   if (GET_CODE (operands[0]) == SUBREG)\n-    operands[2] = gen_rtx (SUBREG, QImode, SUBREG_REG (operands[0]),\n-\t\t\t   SUBREG_WORD (operands[0]));\n+    operands[2] = gen_rtx_SUBREG (QImode, SUBREG_REG (operands[0]),\n+\t\t\t\t  SUBREG_WORD (operands[0]));\n   else\n-    operands[2] = gen_rtx (SUBREG, QImode, operands[0], 0);\n+    operands[2] = gen_rtx_SUBREG (QImode, operands[0], 0);\n }\")\n \f\n ;; Patterns to recognize zero-extend insns produced by the combiner.\n@@ -1575,8 +1571,8 @@\n \t  == STACK_POINTER_REGNUM)\n \t{\n \t  output_asm_insn (\\\"clr%.w %-\\\", operands);\n-\t  operands[0] = gen_rtx (MEM, GET_MODE (operands[0]),\n-\t\t\t\t plus_constant (stack_pointer_rtx, 1));\n+\t  operands[0] = gen_rtx_MEM (GET_MODE (operands[0]),\n+\t\t\t\t     plus_constant (stack_pointer_rtx, 1));\n \t  return \\\"move%.b %1,%0\\\";\n \t}\n       else\n@@ -1654,7 +1650,7 @@\n   \"*\n {\n   CC_STATUS_INIT;\n-  operands[2] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+  operands[2] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   if (TARGET_68020 || TARGET_5200)\n     return \\\"move%.b %1,%2\\;extb%.l %2\\;smi %0\\;extb%.l %0\\\";\n   else\n@@ -1669,7 +1665,7 @@\n   \"*\n {\n   CC_STATUS_INIT;\n-  operands[2] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+  operands[2] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   if (TARGET_68020 || TARGET_5200)\n     return \\\"move%.w %1,%2\\;ext%.l %2\\;smi %0\\;extb%.l %0\\\";\n   else\n@@ -1684,7 +1680,7 @@\n   \"*\n {\n   CC_STATUS_INIT;\n-  operands[2] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+  operands[2] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   if (TARGET_68020 || TARGET_5200)\n     return \\\"move%.l %1,%2\\;smi %0\\;extb%.l %0\\\";\n   else\n@@ -1703,7 +1699,7 @@\n   \"*\n {\n   CC_STATUS_INIT;\n-  operands[3] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+  operands[3] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   if (GET_CODE (operands[1]) == CONST_INT\n   && (unsigned) INTVAL (operands[1]) > 8)\n     {\n@@ -1787,7 +1783,7 @@\n   if (DATA_REG_P (operands[0]) && FP_REG_P (operands[1]))\n     {\n       output_asm_insn (\\\"fmove%.d %f1,%-\\;move%.l %+,%0\\\", operands);\n-      operands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+      operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n       return \\\"move%.l %+,%0\\\";\n     }\n   return \\\"fmove%.d %f1,%0\\\";\n@@ -2028,12 +2024,12 @@\n   \"\"\n   \"*\n {\n-  operands[3] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+  operands[3] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   if (REG_P (operands[1]) && REGNO (operands[1]) == REGNO (operands[0]))\n     return\n     \\\"move%.l %1,%2\\;add%.l %2,%2\\;subx%.l %2,%2\\;sub%.l %2,%3\\;subx%.l %2,%0\\\";\n   if (GET_CODE (operands[1]) == REG)\n-    operands[4] = gen_rtx (REG, SImode, REGNO (operands[1]) + 1);\n+    operands[4] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n   else if (GET_CODE (XEXP (operands[1], 0)) == POST_INC\n         || GET_CODE (XEXP (operands[1], 0)) == PRE_DEC)\n     operands[4] = operands[1];\n@@ -2085,7 +2081,7 @@\n {\n   CC_STATUS_INIT;\n   if (GET_CODE (operands[0]) == REG)\n-    operands[2] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+    operands[2] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   else\n     operands[2] = adj_offsettable_operand (operands[0], 4);\n   return \\\"add%.l %1,%2\\;negx%.l %0\\;neg%.l %0\\\";\n@@ -2104,7 +2100,7 @@\n {\n   CC_STATUS_INIT;\n   if (GET_CODE (operands[1]) == REG)\n-    operands[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 1);\n+    operands[1] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n   else\n     operands[1] = adj_offsettable_operand (operands[1], 4);\n   return \\\"add%.l %1,%0\\\";\n@@ -2130,7 +2126,7 @@\n       else\n \t{\n \t  if (GET_CODE (operands[2]) == REG)\n-\t    operands[1] = gen_rtx (REG, SImode, REGNO (operands[2]) + 1);\n+\t    operands[1] = gen_rtx_REG (SImode, REGNO (operands[2]) + 1);\n \t  else if (GET_CODE (operands[2]) == CONST_DOUBLE)\n \t    {\n \t      operands[1] = GEN_INT (CONST_DOUBLE_LOW (operands[2]));\n@@ -2155,9 +2151,10 @@\n       CC_STATUS_INIT;\n       if (GET_CODE (XEXP (operands[0], 0)) == POST_INC)\n \t{\n-\t  operands[1] = gen_rtx (MEM, SImode,\n-\t\t   gen_rtx (PLUS, VOIDmode, XEXP(operands[0], 0),\n-\t\t\t    gen_rtx (CONST_INT, VOIDmode, -8)));\n+\t  operands[1]\n+\t    = gen_rtx_MEM (SImode,\n+\t\t\t   gen_rtx_PLUS (VOIDmode, XEXP(operands[0], 0),\n+\t\t\t\t\t GEN_INT (-8)));\n \t  return \\\"move%.l %0,%3\\;add%.l %R2,%0\\;addx%.l %2,%3\\;move%.l %3,%1\\\";\n \t}\n       else if (GET_CODE (XEXP (operands[0], 0)) == PRE_DEC)\n@@ -2186,9 +2183,9 @@\n   if (GET_CODE (operands[0]) == MEM)\n     {\n       if (GET_CODE (XEXP (operands[0], 0)) == POST_INC)\n-        operands[0] = gen_rtx (MEM, SImode, XEXP (XEXP (operands[0], 0), 0));\n+        operands[0] = gen_rtx_MEM (SImode, XEXP (XEXP (operands[0], 0), 0));\n       else if (GET_CODE (XEXP (operands[0], 0)) == PRE_DEC)\n-        operands[2] = gen_rtx (MEM, SImode, XEXP (XEXP (operands[0], 0), 0));\n+        operands[2] = gen_rtx_MEM (SImode, XEXP (XEXP (operands[0], 0), 0));\n     }\n   output_asm_insn (\\\"move%.l %1,%0\\\", operands);\n #ifdef MOTOROLA\n@@ -2255,17 +2252,15 @@\n \t which could confuse us.  */\n \n       if (INTVAL (operands[2]) >= 32768)\n-\toperands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t       INTVAL (operands[2]) - 65536);\n+\toperands[2] = GEN_INT (INTVAL (operands[2]) - 65536);\n \n       if (INTVAL (operands[2]) > 0\n \t  && INTVAL (operands[2]) <= 8)\n \treturn \\\"addq%.w %2,%0\\\";\n       if (INTVAL (operands[2]) < 0\n \t  && INTVAL (operands[2]) >= -8)\n \t{\n-\t  operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t         - INTVAL (operands[2]));\n+\t  operands[2] = GEN_INT (-INTVAL (operands[2]));\n \t  return \\\"subq%.w %2,%0\\\";\n \t}\n       /* On the CPU32 it is faster to use two addqw instructions to\n@@ -2276,15 +2271,13 @@\n \t  if (INTVAL (operands[2]) > 8\n \t      && INTVAL (operands[2]) <= 16)\n \t    {\n-\t      operands[2] = gen_rtx (CONST_INT, VOIDmode, \n-\t\t\t\t     INTVAL (operands[2]) - 8);\n+\t      operands[2] = GEN_INT (INTVAL (operands[2]) - 8);\n \t      return \\\"addq%.w %#8,%0\\;addq%.w %2,%0\\\";\n \t    }\n \t  if (INTVAL (operands[2]) < -8\n \t      && INTVAL (operands[2]) >= -16)\n \t    {\n-\t      operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t     - INTVAL (operands[2]) - 8);\n+\t      operands[2] = GEN_INT (-INTVAL (operands[2]) - 8);\n \t      return \\\"subq%.w %#8,%0\\;subq%.w %2,%0\\\";\n \t    }\n \t}\n@@ -2321,17 +2314,15 @@\n \t which could confuse us.  */\n \n       if (INTVAL (operands[1]) >= 32768)\n-\toperands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t       INTVAL (operands[1]) - 65536);\n+\toperands[1] = GEN_INT (INTVAL (operands[1]) - 65536);\n \n       if (INTVAL (operands[1]) > 0\n \t  && INTVAL (operands[1]) <= 8)\n \treturn \\\"addq%.w %1,%0\\\";\n       if (INTVAL (operands[1]) < 0\n \t  && INTVAL (operands[1]) >= -8)\n \t{\n-\t  operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t         - INTVAL (operands[1]));\n+\t  operands[1] = GEN_INT (-INTVAL (operands[1]));\n \t  return \\\"subq%.w %1,%0\\\";\n \t}\n       /* On the CPU32 it is faster to use two addqw instructions to\n@@ -2342,15 +2333,13 @@\n \t  if (INTVAL (operands[1]) > 8\n \t      && INTVAL (operands[1]) <= 16)\n \t    {\n-\t      operands[1] = gen_rtx (CONST_INT, VOIDmode, \n-\t\t\t\t     INTVAL (operands[1]) - 8);\n+\t      operands[1] = GEN_INT (INTVAL (operands[1]) - 8);\n \t      return \\\"addq%.w %#8,%0\\;addq%.w %1,%0\\\";\n \t    }\n \t  if (INTVAL (operands[1]) < -8\n \t      && INTVAL (operands[1]) >= -16)\n \t    {\n-\t      operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t     - INTVAL (operands[1]) - 8);\n+\t      operands[1] = GEN_INT (-INTVAL (operands[1]) - 8);\n \t      return \\\"subq%.w %#8,%0\\;subq%.w %1,%0\\\";\n \t    }\n \t}\n@@ -2381,17 +2370,15 @@\n \t which could confuse us.  */\n \n       if (INTVAL (operands[1]) >= 32768)\n-\toperands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t       INTVAL (operands[1]) - 65536);\n+\toperands[1] = GEN_INT (INTVAL (operands[1]) - 65536);\n \n       if (INTVAL (operands[1]) > 0\n \t  && INTVAL (operands[1]) <= 8)\n \treturn \\\"addq%.w %1,%0\\\";\n       if (INTVAL (operands[1]) < 0\n \t  && INTVAL (operands[1]) >= -8)\n \t{\n-\t  operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t         - INTVAL (operands[1]));\n+\t  operands[1] = GEN_INT (-INTVAL (operands[1]));\n \t  return \\\"subq%.w %1,%0\\\";\n \t}\n       /* On the CPU32 it is faster to use two addqw instructions to\n@@ -2402,15 +2389,13 @@\n \t  if (INTVAL (operands[1]) > 8\n \t      && INTVAL (operands[1]) <= 16)\n \t    {\n-\t      operands[1] = gen_rtx (CONST_INT, VOIDmode, \n-\t\t\t\t     INTVAL (operands[1]) - 8);\n+\t      operands[1] = GEN_INT (INTVAL (operands[1]) - 8);\n \t      return \\\"addq%.w %#8,%0\\;addq%.w %1,%0\\\";\n \t    }\n \t  if (INTVAL (operands[1]) < -8\n \t      && INTVAL (operands[1]) >= -16)\n \t    {\n-\t      operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t     - INTVAL (operands[1]) - 8);\n+\t      operands[1] = GEN_INT (-INTVAL (operands[1]) - 8);\n \t      return \\\"subq%.w %#8,%0\\;subq%.w %1,%0\\\";\n \t    }\n \t}\n@@ -2436,15 +2421,14 @@\n   if (GET_CODE (operands[2]) == CONST_INT)\n     {\n       if (INTVAL (operands[2]) >= 128)\n-\toperands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t       INTVAL (operands[2]) - 256);\n+\toperands[2] = GEN_INT (INTVAL (operands[2]) - 256);\n \n       if (INTVAL (operands[2]) > 0\n \t  && INTVAL (operands[2]) <= 8)\n \treturn \\\"addq%.b %2,%0\\\";\n       if (INTVAL (operands[2]) < 0 && INTVAL (operands[2]) >= -8)\n        {\n-\t operands[2] = gen_rtx (CONST_INT, VOIDmode, - INTVAL (operands[2]));\n+\t operands[2] = GEN_INT (-INTVAL (operands[2]));\n \t return \\\"subq%.b %2,%0\\\";\n        }\n     }\n@@ -2463,15 +2447,14 @@\n   if (GET_CODE (operands[1]) == CONST_INT)\n     {\n       if (INTVAL (operands[1]) >= 128)\n-\toperands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t       INTVAL (operands[1]) - 256);\n+\toperands[1] = GEN_INT (INTVAL (operands[1]) - 256);\n \n       if (INTVAL (operands[1]) > 0\n \t  && INTVAL (operands[1]) <= 8)\n \treturn \\\"addq%.b %1,%0\\\";\n       if (INTVAL (operands[1]) < 0 && INTVAL (operands[1]) >= -8)\n        {\n-\t operands[1] = gen_rtx (CONST_INT, VOIDmode, - INTVAL (operands[1]));\n+\t operands[1] = GEN_INT (-INTVAL (operands[1]));\n \t return \\\"subq%.b %1,%0\\\";\n        }\n     }\n@@ -2490,15 +2473,14 @@\n   if (GET_CODE (operands[1]) == CONST_INT)\n     {\n       if (INTVAL (operands[1]) >= 128)\n-\toperands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t       INTVAL (operands[1]) - 256);\n+\toperands[1] = GEN_INT (INTVAL (operands[1]) - 256);\n \n       if (INTVAL (operands[1]) > 0\n \t  && INTVAL (operands[1]) <= 8)\n \treturn \\\"addq%.b %1,%0\\\";\n       if (INTVAL (operands[1]) < 0 && INTVAL (operands[1]) >= -8)\n        {\n-\t operands[1] = gen_rtx (CONST_INT, VOIDmode, - INTVAL (operands[1]));\n+\t operands[1] = gen_INT (-INTVAL (operands[1]));\n \t return \\\"subq%.b %1,%0\\\";\n        }\n     }\n@@ -2648,7 +2630,7 @@\n {\n   CC_STATUS_INIT;\n   if (GET_CODE (operands[1]) == REG)\n-    operands[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 1);\n+    operands[1] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n   else\n     operands[1] = adj_offsettable_operand (operands[1], 4);\n   return \\\"sub%.l %1,%0\\\";\n@@ -2674,7 +2656,7 @@\n       else\n \t{\n \t  if (GET_CODE (operands[2]) == REG)\n-\t    operands[1] = gen_rtx (REG, SImode, REGNO (operands[2]) + 1);\n+\t    operands[1] = gen_rtx_REG (SImode, REGNO (operands[2]) + 1);\n \t  else if (GET_CODE (operands[2]) == CONST_DOUBLE)\n \t    {\n \t      operands[1] = GEN_INT (CONST_DOUBLE_LOW (operands[2]));\n@@ -2699,9 +2681,10 @@\n       CC_STATUS_INIT;\n       if (GET_CODE (XEXP (operands[0], 0)) == POST_INC)\n \t{\n-\t  operands[1] = gen_rtx (MEM, SImode,\n-\t\t   gen_rtx (PLUS, VOIDmode, XEXP(operands[0], 0),\n-\t\t\t    gen_rtx (CONST_INT, VOIDmode, -8)));\n+\t  operands[1]\n+\t    = gen_rtx_MEM (SImode,\n+\t\t\t   gen_rtx_PLUS (VOIDmode, XEXP(operands[0], 0),\n+\t\t\t\t\t GEN_INT (-8)));\n \t  return \\\"move%.l %0,%3\\;sub%.l %R2,%0\\;subx%.l %2,%3\\;move%.l %3,%1\\\";\n \t}\n       else if (GET_CODE (XEXP (operands[0], 0)) == PRE_DEC)\n@@ -3198,7 +3181,7 @@\n       && floating_exact_log2 (operands[2]) && !TARGET_68040 && !TARGET_68060)\n     {\n       int i = floating_exact_log2 (operands[2]);\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode, i);\n+      operands[2] = GEN_INT (i);\n       return \\\"fscale%.l %2,%0\\\";\n     }\n   if (REG_P (operands[2]))\n@@ -3552,7 +3535,7 @@\n \t    }\n \t}\n       if (GET_CODE (operands[0]) == REG)\n-\toperands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+\toperands[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n       else\n \toperands[0] = adj_offsettable_operand (operands[0], 4);\n       switch (INTVAL (lo))\n@@ -3702,7 +3685,7 @@\n \t    }\n \t}\n       if (GET_CODE (operands[0]) == REG)\n-\toperands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+\toperands[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n       else\n \toperands[0] = adj_offsettable_operand (operands[0], 4);\n       switch (INTVAL (lo))\n@@ -3898,7 +3881,7 @@\n \t    }\n \t}\n       if (GET_CODE (operands[0]) == REG)\n-\toperands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+\toperands[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n       else\n \toperands[0] = adj_offsettable_operand (operands[0], 4);\n       switch (INTVAL (lo))\n@@ -4026,7 +4009,7 @@\n   if (which_alternative == 0)\n     return \\\"neg%.l %0\\;negx%.l %0\\\";\n   if (GET_CODE (operands[0]) == REG)\n-    operands[1] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+    operands[1] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   else\n     operands[1] = adj_offsettable_operand (operands[0], 4);\n   if (ADDRESS_REG_P (operands[0]))\n@@ -4041,7 +4024,7 @@\n   \"TARGET_5200\"\n   \"*\n {\n-  operands[1] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+  operands[1] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   return \\\"neg%.l %1\\;negx%.l %0\\\";\n } \")\n \n@@ -4137,7 +4120,7 @@\n {\n   if (DATA_REG_P (operands[0]))\n     {\n-      operands[1] = gen_rtx (CONST_INT, VOIDmode, 31);\n+      operands[1] = GEN_INT (31);\n       return \\\"bchg %1,%0\\\";\n     }\n   if (REG_P (operands[1]) && ! DATA_REG_P (operands[1]))\n@@ -4193,7 +4176,7 @@\n {\n   if (DATA_REG_P (operands[0]))\n     {\n-      operands[1] = gen_rtx (CONST_INT, VOIDmode, 31);\n+      operands[1] = GEN_INT (31);\n       return \\\"bchg %1,%0\\\";\n     }\n   if (REG_P (operands[1]) && ! DATA_REG_P (operands[1]))\n@@ -4336,7 +4319,7 @@\n {\n   CC_STATUS_INIT;\n   if (GET_CODE (operands[0]) == REG)\n-    operands[1] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+    operands[1] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   else if (GET_CODE (XEXP (operands[0], 0)) == POST_INC\n         || GET_CODE (XEXP (operands[0], 0)) == PRE_DEC)\n     operands[1] = operands[0];\n@@ -4408,7 +4391,7 @@\n {\n   CC_STATUS_INIT;\n   if (GET_CODE (operands[0]) == REG)\n-    operands[2] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+    operands[2] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   else\n     operands[2] = adj_offsettable_operand (operands[0], 4);\n   if (ADDRESS_REG_P (operands[0]))\n@@ -4453,11 +4436,11 @@\n {\n   CC_STATUS_INIT;\n   if (GET_CODE (operands[1]) == REG)\n-    operands[3] = gen_rtx (REG, SImode, REGNO (operands[1]) + 1);\n+    operands[3] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n   else\n     operands[3] = adj_offsettable_operand (operands[1], 4);\n   if (GET_CODE (operands[0]) == REG)\n-    operands[2] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+    operands[2] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   else if (GET_CODE (XEXP (operands[0], 0)) == PRE_DEC)\n     return \\\"clr%.l %0\\;move%.l %3,%0\\\";\n   else if (GET_CODE (XEXP (operands[0], 0)) == POST_INC)\n@@ -4480,7 +4463,7 @@\n    || INTVAL (operands[2]) == 2 || INTVAL (operands[2]) == 3)\"\n   \"*\n {\n-  operands[1] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+  operands[1] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   if (INTVAL (operands[2]) == 1)\n     return \\\"add%.l %1,%1\\;addx%.l %0,%0\\\";\n   else if (INTVAL (operands[2]) == 8)\n@@ -4535,7 +4518,7 @@\n {\n   CC_STATUS_INIT;\n \n-  operands[2] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[2]) - 16);\n+  operands[2] = GEN_INT (INTVAL (operands[2]) - 16);\n   return \\\"lsl%.w %2,%0\\;swap %0\\;clr%.w %0\\\";\n }\")\n \n@@ -4601,7 +4584,7 @@\n     && INTVAL (operands[2]) > 16 && INTVAL (operands[2]) <= 24)\"\n   \"*\n {\n-  operands[2] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[2]) - 16);\n+  operands[2] = GEN_INT (INTVAL (operands[2]) - 16);\n   return \\\"swap %0\\;asr%.w %2,%0\\;ext%.l %0\\\";\n }\")\n \n@@ -4635,7 +4618,7 @@\n   \"*\n {\n   CC_STATUS_INIT;\n-  operands[2] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+  operands[2] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   if (TARGET_68020)\n     return \\\"move%.l %1,%2\\;smi %0\\;extb%.l %0\\\";\n   else\n@@ -4673,7 +4656,7 @@\n     || INTVAL (operands[2]) == 63))\"\n   \"*\n {\n-  operands[1] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+  operands[1] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   if (INTVAL (operands[2]) == 63)\n     return \\\"add%.l %0,%0\\;subx%.l %0,%0\\;move%.l %0,%1\\\";\n   CC_STATUS_INIT;\n@@ -4780,7 +4763,7 @@\n ;;  \"*\n ;;{\n ;;  if (GET_CODE (operands[1]) == REG)\n-;;    operands[2] = gen_rtx (REG, SImode, REGNO (operands[1]) + 1);\n+;;    operands[2] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n ;;  else\n ;;    operands[2] = adj_offsettable_operand (operands[1], 4);\n ;;  return \\\"move%.l %0,%2\\;clr%.l %1\\\";\n@@ -4809,11 +4792,11 @@\n   if (which_alternative == 2)\n     return \\\"clr%.l %0\\;move%.l %1,%0\\\";\n   if (GET_CODE (operands[0]) == REG)\n-    operands[2] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+    operands[2] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   else\n     operands[2] = adj_offsettable_operand (operands[0], 4);\n   if (GET_CODE (operands[1]) == REG)\n-    operands[3] = gen_rtx (REG, SImode, REGNO (operands[1]) + 1);\n+    operands[3] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n   else\n     operands[3] = adj_offsettable_operand (operands[1], 4);\n   if (ADDRESS_REG_P (operands[0]))\n@@ -4833,7 +4816,7 @@\n     || INTVAL (operands[2]) == 16 || INTVAL (operands[2]) == 63))\"\n   \"*\n {\n-  operands[1] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+  operands[1] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   if (INTVAL (operands[2]) == 63)\n     return \\\"add%.l %0,%0\\;clr%.l %0\\;clr%.l %1\\;addx%.l %1,%1\\\";\n   CC_STATUS_INIT;\n@@ -4900,7 +4883,7 @@\n   \"*\n {\n   /* I think lsr%.w sets the CC properly.  */\n-  operands[2] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[2]) - 16);\n+  operands[2] = GEN_INT (INTVAL (operands[2]) - 16);\n   return \\\"clr%.w %0\\;swap %0\\;lsr%.w %2,%0\\\";\n }\")\n \n@@ -4952,7 +4935,7 @@\n     return \\\"swap %0\\\";\n   else if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) >= 16)\n     {\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode, 32 - INTVAL (operands[2]));\n+      operands[2] = GEN_INT (32 - INTVAL (operands[2]));\n       return \\\"ror%.l %2,%0\\\";\n     }\n   else\n@@ -4968,7 +4951,7 @@\n {\n   if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) >= 8)\n     {\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode, 16 - INTVAL (operands[2]));\n+      operands[2] = GEN_INT (16 - INTVAL (operands[2]));\n       return \\\"ror%.w %2,%0\\\";\n     }\n   else\n@@ -4984,7 +4967,7 @@\n {\n   if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) >= 8)\n     {\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode, 16 - INTVAL (operands[2]));\n+      operands[2] = GEN_INT (16 - INTVAL (operands[2]));\n       return \\\"ror%.w %2,%0\\\";\n     }\n   else\n@@ -5000,7 +4983,7 @@\n {\n   if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) >= 4)\n     {\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode, 8 - INTVAL (operands[2]));\n+      operands[2] = GEN_INT (8 - INTVAL (operands[2]));\n       return \\\"ror%.b %2,%0\\\";\n     }\n   else\n@@ -5016,7 +4999,7 @@\n {\n   if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) >= 4)\n     {\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode, 8 - INTVAL (operands[2]));\n+      operands[2] = GEN_INT (8 - INTVAL (operands[2]));\n       return \\\"ror%.b %2,%0\\\";\n     }\n   else\n@@ -5472,8 +5455,7 @@\n     {\n       int width = GET_CODE (operands[0]) == REG ? 31 : 7;\n       return output_btst (operands,\n-\t\t\t  gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t   width - INTVAL (operands[2])),\n+\t\t\t  GEN_INT (width - INTVAL (operands[2])),\n \t\t\t  operands[0],\n \t\t\t  insn, 1000);\n       /* Pass 1000 as SIGNPOS argument so that btst will\n@@ -5500,8 +5482,7 @@\n     {\n       int width = GET_CODE (operands[0]) == REG ? 31 : 7;\n       return output_btst (operands,\n-\t\t\t  gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t   width - INTVAL (operands[2])),\n+\t\t\t  GEN_INT (width - INTVAL (operands[2])),\n \t\t\t  operands[0],\n \t\t\t  insn, 1000);\n       /* Pass 1000 as SIGNPOS argument so that btst will\n@@ -5845,7 +5826,7 @@\n #endif\n     }\n   if (GET_CODE (operands[0]) == REG)\n-    operands[3] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+    operands[3] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   else\n     operands[3] = adj_offsettable_operand (operands[0], 4);\n   if (! ADDRESS_REG_P (operands[0]))\n@@ -5906,7 +5887,7 @@\n     }\n   CC_STATUS_INIT;\n   if (GET_CODE (operands[0]) == REG)\n-    operands[3] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+    operands[3] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n   else\n     operands[3] = adj_offsettable_operand (operands[0], 4);\n   if (!ADDRESS_REG_P (operands[0]))\n@@ -6372,8 +6353,8 @@\n   \"\n {\n #ifdef CASE_VECTOR_PC_RELATIVE\n-    operands[0] = gen_rtx (PLUS, SImode, pc_rtx,\n-\t\t\t   gen_rtx (SIGN_EXTEND, SImode, operands[0]));\n+    operands[0] = gen_rtx_PLUS (SImode, pc_rtx,\n+\t\t\t\tgen_rtx_SIGN_EXTEND (SImode, operands[0]));\n #endif\n }\")\n \n@@ -6851,8 +6832,8 @@\n  \"NEED_PROBE\"\n  \"*\n {\n-  operands[0] = gen_rtx (PLUS, SImode, stack_pointer_rtx,\n-\t\t\t gen_rtx (CONST_INT, VOIDmode, NEED_PROBE));\n+  operands[0] = gen_rtx_PLUS (SImode, stack_pointer_rtx,\n+\t\t\t      GEN_INT (NEED_PROBE));\n   return \\\"tstl %a0\\\";\n }\")\n \n@@ -6864,7 +6845,7 @@\n {\n   if (current_function_pops_args == 0)\n     return \\\"rts\\\";\n-  operands[0] = gen_rtx (CONST_INT, VOIDmode, current_function_pops_args);\n+  operands[0] = GEN_INT (current_function_pops_args);\n   return \\\"rtd %0\\\";\n }\")\n \n@@ -6928,7 +6909,7 @@\n   \"*\n {\n   rtx xoperands[2];\n-  xoperands[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 1);\n+  xoperands[1] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);\n   output_asm_insn (\\\"move%.l %1,%@\\\", xoperands);\n   output_asm_insn (\\\"move%.l %1,%-\\\", operands);\n   return \\\"fmove%.d %+,%0\\\";\n@@ -6952,7 +6933,7 @@\n     {\n       rtx xoperands[2];\n       xoperands[0] = stack_pointer_rtx;\n-      xoperands[1] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[0]) - 4);\n+      xoperands[1] = GEN_INT (INTVAL (operands[0]) - 4);\n #ifndef NO_ADDSUB_Q\n       if (INTVAL (xoperands[1]) <= 8)\n \t{\n@@ -6963,8 +6944,7 @@\n \t}\n       else if (TARGET_CPU32 && INTVAL (xoperands[1]) <= 16) \n \t{\n-\t  xoperands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t  INTVAL (xoperands[1]) - 8);\n+\t  xoperands[1] = GEN_INT (INTVAL (xoperands[1]) - 8);\n \t  output_asm_insn (\\\"addq%.w %#8,%0\\;addq%.w %1,%0\\\", xoperands);\n \t}\n       else\n@@ -7003,7 +6983,7 @@\n     {\n       rtx xoperands[2];\n       xoperands[0] = stack_pointer_rtx;\n-      xoperands[1] = gen_rtx (CONST_INT, VOIDmode, INTVAL (operands[0]) - 4);\n+      xoperands[1] = GEN_INT (INTVAL (operands[0]) - 4);\n #ifndef NO_ADDSUB_Q\n       if (INTVAL (xoperands[1]) <= 8)\n \t{\n@@ -7014,8 +6994,7 @@\n \t}\n       else if (TARGET_CPU32 && INTVAL (xoperands[1]) <= 16)\n \t{\n-\t  xoperands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t  INTVAL (xoperands[1]) - 8);\n+\t  xoperands[1] = GEN_INT (INTVAL (xoperands[1]) - 8);\n \t  output_asm_insn (\\\"addq%.w %#8,%0\\;addq%.w %1,%0\\\", xoperands);\n \t}\n       else\n@@ -7057,9 +7036,9 @@\n \n   xoperands[1] = operands[1];\n   xoperands[2]\n-    = gen_rtx (MEM, QImode,\n-\t       gen_rtx (PLUS, VOIDmode, stack_pointer_rtx,\n-\t\t\tgen_rtx (CONST_INT, VOIDmode, 3)));\n+    = gen_rtx_MEM (QImode,\n+\t\t   gen_rtx_PLUS (VOIDmode, stack_pointer_rtx,\n+\t\t\t\t GEN_INT (3)));\n   xoperands[3] = stack_pointer_rtx;\n   if (!TARGET_5200)\n     output_asm_insn (\\\"subq%.w %#4,%3\\;move%.b %1,%2\\\", xoperands);\n@@ -7404,7 +7383,7 @@\n   if (REG_P (operands[0]))\n     {\n       output_asm_insn (\\\"fmove%.d %f1,%-\\;move%.l %+,%0\\\", operands);\n-      operands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+      operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n       return \\\"move%.l %+,%0\\\";\n     }\n   return \\\"fmove%.d %f1,%0\\\";"}]}