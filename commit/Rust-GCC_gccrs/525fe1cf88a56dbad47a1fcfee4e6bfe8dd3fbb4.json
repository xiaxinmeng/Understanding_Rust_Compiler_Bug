{"sha": "525fe1cf88a56dbad47a1fcfee4e6bfe8dd3fbb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI1ZmUxY2Y4OGE1NmRiYWQ0N2ExZmNmZWU0ZTZiZmU4ZGQzZmJiNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-05-21T21:50:39Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-05-21T21:50:39Z"}, "message": "unique_ptr.h: Use noexcept per the FDIS.\n\n2011-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/unique_ptr.h: Use noexcept per the FDIS.\n\nFrom-SVN: r174004", "tree": {"sha": "206a038ed12aeefc16c250d4a973fef916606ea4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/206a038ed12aeefc16c250d4a973fef916606ea4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/525fe1cf88a56dbad47a1fcfee4e6bfe8dd3fbb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/525fe1cf88a56dbad47a1fcfee4e6bfe8dd3fbb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/525fe1cf88a56dbad47a1fcfee4e6bfe8dd3fbb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/525fe1cf88a56dbad47a1fcfee4e6bfe8dd3fbb4/comments", "author": null, "committer": null, "parents": [{"sha": "9fe72ebdc8b07c25074c8205159e68facbe3a4e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fe72ebdc8b07c25074c8205159e68facbe3a4e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fe72ebdc8b07c25074c8205159e68facbe3a4e9"}], "stats": {"total": 90, "additions": 47, "deletions": 43}, "files": [{"sha": "90554d89d79e3e3e264294d493f850b3d7dd0545", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525fe1cf88a56dbad47a1fcfee4e6bfe8dd3fbb4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525fe1cf88a56dbad47a1fcfee4e6bfe8dd3fbb4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=525fe1cf88a56dbad47a1fcfee4e6bfe8dd3fbb4", "patch": "@@ -1,3 +1,7 @@\n+2011-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/unique_ptr.h: Use noexcept per the FDIS.\n+\n 2011-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/21_strings/basic_string/requirements/exception/"}, {"sha": "ec9c3c0b5c3315c4b602d8347d833b7a1da83759", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525fe1cf88a56dbad47a1fcfee4e6bfe8dd3fbb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525fe1cf88a56dbad47a1fcfee4e6bfe8dd3fbb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=525fe1cf88a56dbad47a1fcfee4e6bfe8dd3fbb4", "patch": "@@ -49,11 +49,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct default_delete\n     {\n-      constexpr default_delete() = default;\n+      constexpr default_delete() noexcept = default;\n \n       template<typename _Up, typename = typename\n \t       std::enable_if<std::is_convertible<_Up*, _Tp*>::value>::type>\n-        default_delete(const default_delete<_Up>&) { }\n+        default_delete(const default_delete<_Up>&) noexcept { }\n \n       void\n       operator()(_Tp* __ptr) const\n@@ -70,7 +70,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct default_delete<_Tp[]>\n     {\n-      constexpr default_delete() = default;\n+      constexpr default_delete() noexcept = default;\n \n       void\n       operator()(_Tp* __ptr) const\n@@ -111,35 +111,35 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Dp                       deleter_type;\n \n       // Constructors.\n-      constexpr unique_ptr()\n+      constexpr unique_ptr() noexcept\n       : _M_t()\n       { static_assert(!std::is_pointer<deleter_type>::value,\n \t\t     \"constructed with null function pointer deleter\"); }\n \n       explicit\n-      unique_ptr(pointer __p)\n+      unique_ptr(pointer __p) noexcept\n       : _M_t(__p, deleter_type())\n       { static_assert(!std::is_pointer<deleter_type>::value,\n \t\t     \"constructed with null function pointer deleter\"); }\n \n       unique_ptr(pointer __p,\n \t  typename std::conditional<std::is_reference<deleter_type>::value,\n-\t    deleter_type, const deleter_type&>::type __d)\n+\t    deleter_type, const deleter_type&>::type __d) noexcept\n       : _M_t(__p, __d) { }\n \n       unique_ptr(pointer __p,\n-\t  typename std::remove_reference<deleter_type>::type&& __d)\n+\t  typename std::remove_reference<deleter_type>::type&& __d) noexcept\n       : _M_t(std::move(__p), std::move(__d))\n       { static_assert(!std::is_reference<deleter_type>::value,\n \t\t      \"rvalue deleter bound to reference\"); }\n \n-      constexpr unique_ptr(nullptr_t)\n+      constexpr unique_ptr(nullptr_t) noexcept\n       : _M_t()\n       { static_assert(!std::is_pointer<deleter_type>::value,\n \t\t     \"constructed with null function pointer deleter\"); }\n \n       // Move constructors.\n-      unique_ptr(unique_ptr&& __u)\n+      unique_ptr(unique_ptr&& __u) noexcept\n       : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }\n \n       template<typename _Up, typename _Ep, typename = typename\n@@ -152,7 +152,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       || (!std::is_reference<_Dp>::value\n \t\t   && std::is_convertible<_Ep, _Dp>::value))>\n \t     ::type>\n-\tunique_ptr(unique_ptr<_Up, _Ep>&& __u)\n+\tunique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept\n \t: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))\n \t{ }\n \n@@ -161,7 +161,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tstd::enable_if<std::is_convertible<_Up*, _Tp*>::value\n \t\t       && std::is_same<_Dp,\n \t\t\t\t       default_delete<_Tp>>::value>::type>\n-\tunique_ptr(auto_ptr<_Up>&& __u)\n+\tunique_ptr(auto_ptr<_Up>&& __u) noexcept\n \t: _M_t(__u.release(), deleter_type()) { }\n #endif\n \n@@ -170,7 +170,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // Assignment.\n       unique_ptr&\n-      operator=(unique_ptr&& __u)\n+      operator=(unique_ptr&& __u) noexcept\n       {\n \treset(__u.release());\n \tget_deleter() = std::forward<deleter_type>(__u.get_deleter());\n@@ -183,15 +183,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t       pointer>::value\n \t   && !std::is_array<_Up>::value>::type>\n \tunique_ptr&\n-\toperator=(unique_ptr<_Up, _Ep>&& __u)\n+\toperator=(unique_ptr<_Up, _Ep>&& __u) noexcept\n \t{\n \t  reset(__u.release());\n \t  get_deleter() = std::forward<_Ep>(__u.get_deleter());\n \t  return *this;\n \t}\n \n       unique_ptr&\n-      operator=(nullptr_t)\n+      operator=(nullptr_t) noexcept\n       {\n \treset();\n \treturn *this;\n@@ -206,38 +206,38 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       pointer\n-      operator->() const\n+      operator->() const noexcept\n       {\n \t_GLIBCXX_DEBUG_ASSERT(get() != pointer());\n \treturn get();\n       }\n \n       pointer\n-      get() const\n+      get() const noexcept\n       { return std::get<0>(_M_t); }\n \n       deleter_type&\n-      get_deleter()\n+      get_deleter() noexcept\n       { return std::get<1>(_M_t); }\n \n       const deleter_type&\n-      get_deleter() const\n+      get_deleter() const noexcept\n       { return std::get<1>(_M_t); }\n \n-      explicit operator bool() const\n+      explicit operator bool() const noexcept\n       { return get() == pointer() ? false : true; }\n \n       // Modifiers.\n       pointer\n-      release()\n+      release() noexcept\n       {\n \tpointer __p = get();\n \tstd::get<0>(_M_t) = pointer();\n \treturn __p;\n       }\n \n       void\n-      reset(pointer __p = pointer())\n+      reset(pointer __p = pointer()) noexcept\n       {\n \tusing std::swap;\n \tswap(std::get<0>(_M_t), __p);\n@@ -246,7 +246,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       void\n-      swap(unique_ptr& __u)\n+      swap(unique_ptr& __u) noexcept\n       {\n \tusing std::swap;\n \tswap(_M_t, __u._M_t);\n@@ -273,39 +273,39 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Dp                       deleter_type;\n \n       // Constructors.\n-      constexpr unique_ptr()\n+      constexpr unique_ptr() noexcept\n       : _M_t()\n       { static_assert(!std::is_pointer<deleter_type>::value,\n \t\t     \"constructed with null function pointer deleter\"); }\n \n       explicit\n-      unique_ptr(pointer __p)\n+      unique_ptr(pointer __p) noexcept\n       : _M_t(__p, deleter_type())\n       { static_assert(!std::is_pointer<deleter_type>::value,\n \t\t     \"constructed with null function pointer deleter\"); }\n \n       unique_ptr(pointer __p,\n \t  typename std::conditional<std::is_reference<deleter_type>::value,\n-\t      deleter_type, const deleter_type&>::type __d)\n+\t      deleter_type, const deleter_type&>::type __d) noexcept\n       : _M_t(__p, __d) { }\n \n-      unique_ptr(pointer __p,\n-\t\t typename std::remove_reference<deleter_type>::type && __d)\n+      unique_ptr(pointer __p, typename\n+\t\t std::remove_reference<deleter_type>::type && __d) noexcept\n       : _M_t(std::move(__p), std::move(__d))\n       { static_assert(!std::is_reference<deleter_type>::value,\n \t\t      \"rvalue deleter bound to reference\"); }\n \n-      constexpr unique_ptr(nullptr_t)\n+      constexpr unique_ptr(nullptr_t) noexcept\n       : _M_t()\n       { static_assert(!std::is_pointer<deleter_type>::value,\n \t\t     \"constructed with null function pointer deleter\"); }\n \n       // Move constructors.\n-      unique_ptr(unique_ptr&& __u)\n+      unique_ptr(unique_ptr&& __u) noexcept\n       : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }\n \n       template<typename _Up, typename _Ep>\n-\tunique_ptr(unique_ptr<_Up, _Ep>&& __u)\n+\tunique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept\n \t: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))\n \t{ }\n \n@@ -314,7 +314,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // Assignment.\n       unique_ptr&\n-      operator=(unique_ptr&& __u)\n+      operator=(unique_ptr&& __u) noexcept\n       {\n \treset(__u.release());\n \tget_deleter() = std::forward<deleter_type>(__u.get_deleter());\n@@ -323,15 +323,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename _Up, typename _Ep>\n \tunique_ptr&\n-\toperator=(unique_ptr<_Up, _Ep>&& __u)\n+\toperator=(unique_ptr<_Up, _Ep>&& __u) noexcept\n \t{\n \t  reset(__u.release());\n \t  get_deleter() = std::forward<_Ep>(__u.get_deleter());\n \t  return *this;\n \t}\n \n       unique_ptr&\n-      operator=(nullptr_t)\n+      operator=(nullptr_t) noexcept\n       {\n \treset();\n \treturn *this;\n@@ -346,31 +346,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       pointer\n-      get() const\n+      get() const noexcept\n       { return std::get<0>(_M_t); }\n \n       deleter_type&\n-      get_deleter()\n+      get_deleter() noexcept\n       { return std::get<1>(_M_t); }\n \n       const deleter_type&\n-      get_deleter() const\n+      get_deleter() const noexcept\n       { return std::get<1>(_M_t); }\n \n-      explicit operator bool() const\n+      explicit operator bool() const noexcept\n       { return get() == pointer() ? false : true; }\n \n       // Modifiers.\n       pointer\n-      release()\n+      release() noexcept\n       {\n \tpointer __p = get();\n \tstd::get<0>(_M_t) = pointer();\n \treturn __p;\n       }\n \n       void\n-      reset(pointer __p = pointer())\n+      reset(pointer __p = pointer()) noexcept\n       {\n \tusing std::swap;\n \tswap(std::get<0>(_M_t), __p);\n@@ -379,7 +379,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       void\n-      reset(nullptr_t)\n+      reset(nullptr_t) noexcept\n       {\n \tpointer __p = get();\n \tstd::get<0>(_M_t) = pointer();\n@@ -392,7 +392,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid reset(_Up) = delete;\n \n       void\n-      swap(unique_ptr& __u)\n+      swap(unique_ptr& __u) noexcept\n       {\n \tusing std::swap;\n \tswap(_M_t, __u._M_t);\n@@ -420,12 +420,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \texplicit\n \tunique_ptr(_Up*, typename std::enable_if<std::is_convertible<_Up*,\n \t\t   pointer>::value>::type* = 0) = delete;\n-  };\n+    };\n \n   template<typename _Tp, typename _Dp>\n     inline void\n     swap(unique_ptr<_Tp, _Dp>& __x,\n-\t unique_ptr<_Tp, _Dp>& __y)\n+\t unique_ptr<_Tp, _Dp>& __y) noexcept\n     { __x.swap(__y); }\n \n   template<typename _Tp, typename _Dp,"}]}