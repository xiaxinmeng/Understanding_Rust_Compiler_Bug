{"sha": "1bf2a0b90f2457f6d9301535560eb5e05978261b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJmMmEwYjkwZjI0NTdmNmQ5MzAxNTM1NTYwZWI1ZTA1OTc4MjYxYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-05-16T08:03:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-05-16T08:03:49Z"}, "message": "re PR target/90424 (memcpy into vector builtin not optimized)\n\n2019-05-16  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/90424\n\t* tree-ssa.c (non_rewritable_lvalue_p): Handle inserts from\n\taligned subvectors.\n\t(execute_update_addresses_taken): Likewise.\n\t* tree-cfg.c (verify_gimple_assign_ternary): Likewise.\n\n\t* g++.target/i386/pr90424-1.C: New testcase.\n\t* g++.target/i386/pr90424-2.C: Likewise.\n\nFrom-SVN: r271279", "tree": {"sha": "bce84fa1f77945c69ed17cb17728304fec2ac700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bce84fa1f77945c69ed17cb17728304fec2ac700"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bf2a0b90f2457f6d9301535560eb5e05978261b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bf2a0b90f2457f6d9301535560eb5e05978261b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bf2a0b90f2457f6d9301535560eb5e05978261b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bf2a0b90f2457f6d9301535560eb5e05978261b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "adfe6e4b2f8e7288710eac6bacd6bae8d6ea3c05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adfe6e4b2f8e7288710eac6bacd6bae8d6ea3c05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adfe6e4b2f8e7288710eac6bacd6bae8d6ea3c05"}], "stats": {"total": 137, "additions": 124, "deletions": 13}, "files": [{"sha": "1ddc8bfdbb360e51d27acd3666063ed6dfeafc91", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf2a0b90f2457f6d9301535560eb5e05978261b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf2a0b90f2457f6d9301535560eb5e05978261b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1bf2a0b90f2457f6d9301535560eb5e05978261b", "patch": "@@ -1,3 +1,11 @@\n+2019-05-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/90424\n+\t* tree-ssa.c (non_rewritable_lvalue_p): Handle inserts from\n+\taligned subvectors.\n+\t(execute_update_addresses_taken): Likewise.\n+\t* tree-cfg.c (verify_gimple_assign_ternary): Likewise.\n+\n 2019-05-16  Richard Biener  <rguenther@suse.de>\n \n \t* gimple-pretty-print.c (dump_ternary_rhs): Dump BIT_INSERT_EXPR"}, {"sha": "5f01fdf15a8712c33e05e221168dc72163e97d1a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf2a0b90f2457f6d9301535560eb5e05978261b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf2a0b90f2457f6d9301535560eb5e05978261b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1bf2a0b90f2457f6d9301535560eb5e05978261b", "patch": "@@ -1,3 +1,9 @@\n+2019-05-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/90424\n+\t* g++.target/i386/pr90424-1.C: New testcase.\n+\t* g++.target/i386/pr90424-2.C: Likewise.\n+\n 2019-05-16  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/gimplefe-40.c: Amend again."}, {"sha": "9df8c089ba2d507ae3c68609faa5a42e64978826", "filename": "gcc/testsuite/g++.target/i386/pr90424-1.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf2a0b90f2457f6d9301535560eb5e05978261b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr90424-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf2a0b90f2457f6d9301535560eb5e05978261b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr90424-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr90424-1.C?ref=1bf2a0b90f2457f6d9301535560eb5e05978261b", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile { target c++11 } } */\n+/* { dg-options \"-O2 -msse2 -fdump-tree-optimized\" } */\n+\n+template <class T>\n+using V [[gnu::vector_size(16)]] = T;\n+\n+template <class T, unsigned M = sizeof(V<T>)>\n+V<T> load(const void *p) {\n+  using W = V<T>;\n+  W r;\n+  __builtin_memcpy(&r, p, M);\n+  return r;\n+}\n+\n+// movq or movsd\n+template V<char> load<char, 8>(const void *);     // bad\n+template V<short> load<short, 8>(const void *);   // bad\n+template V<int> load<int, 8>(const void *);       // bad\n+template V<long> load<long, 8>(const void *);     // good\n+// the following is disabled because V2SF isn't a supported mode\n+// template V<float> load<float, 8>(const void *);   // bad\n+template V<double> load<double, 8>(const void *); // good (movsd?)\n+\n+// movd or movss\n+template V<char> load<char, 4>(const void *);   // bad\n+template V<short> load<short, 4>(const void *); // bad\n+template V<int> load<int, 4>(const void *);     // good\n+template V<float> load<float, 4>(const void *); // good\n+\n+/* We should end up with one load and one insert for each function.  */\n+/* { dg-final { scan-tree-dump-times \"BIT_INSERT_EXPR\" 9 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"MEM\" 9 \"optimized\" } } */"}, {"sha": "3abb65f4591c7ab70dd5167d201d218065d0be6f", "filename": "gcc/testsuite/g++.target/i386/pr90424-2.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf2a0b90f2457f6d9301535560eb5e05978261b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr90424-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf2a0b90f2457f6d9301535560eb5e05978261b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr90424-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr90424-2.C?ref=1bf2a0b90f2457f6d9301535560eb5e05978261b", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile { target c++11 } } */\n+/* { dg-options \"-O2 -msse2 -fdump-tree-optimized\" } */\n+\n+template <class T>\n+using V [[gnu::vector_size(16)]] = T;\n+\n+template <class T, unsigned M = sizeof(V<T>)>\n+V<T> load(const void *p) {\n+  V<T> r = {};\n+  __builtin_memcpy(&r, p, M);\n+  return r;\n+}\n+\n+// movq or movsd\n+template V<char> load<char, 8>(const void *);     // bad\n+template V<short> load<short, 8>(const void *);   // bad\n+template V<int> load<int, 8>(const void *);       // bad\n+template V<long> load<long, 8>(const void *);     // good\n+// the following is disabled because V2SF isn't a supported mode\n+// template V<float> load<float, 8>(const void *);   // bad\n+template V<double> load<double, 8>(const void *); // good (movsd?)\n+\n+// movd or movss\n+template V<char> load<char, 4>(const void *);   // bad\n+template V<short> load<short, 4>(const void *); // bad\n+template V<int> load<int, 4>(const void *);     // good\n+template V<float> load<float, 4>(const void *); // good\n+\n+/* We should end up with one load and one insert for each function.  */\n+/* { dg-final { scan-tree-dump-times \"BIT_INSERT_EXPR\" 9 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"MEM\" 9 \"optimized\" } } */"}, {"sha": "c6a70c8f10b1e8142973d57908cbc21d1d8f6e6f", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf2a0b90f2457f6d9301535560eb5e05978261b/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf2a0b90f2457f6d9301535560eb5e05978261b/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=1bf2a0b90f2457f6d9301535560eb5e05978261b", "patch": "@@ -4263,8 +4263,17 @@ verify_gimple_assign_ternary (gassign *stmt)\n \t}\n       if (! ((INTEGRAL_TYPE_P (rhs1_type)\n \t      && INTEGRAL_TYPE_P (rhs2_type))\n+\t     /* Vector element insert.  */\n \t     || (VECTOR_TYPE_P (rhs1_type)\n-\t\t && types_compatible_p (TREE_TYPE (rhs1_type), rhs2_type))))\n+\t\t && types_compatible_p (TREE_TYPE (rhs1_type), rhs2_type))\n+\t     /* Aligned sub-vector insert.  */\n+\t     || (VECTOR_TYPE_P (rhs1_type)\n+\t\t && VECTOR_TYPE_P (rhs2_type)\n+\t\t && types_compatible_p (TREE_TYPE (rhs1_type),\n+\t\t\t\t\tTREE_TYPE (rhs2_type))\n+\t\t && multiple_p (TYPE_VECTOR_SUBPARTS (rhs1_type),\n+\t\t\t\tTYPE_VECTOR_SUBPARTS (rhs2_type))\n+\t\t && multiple_of_p (bitsizetype, rhs3, TYPE_SIZE (rhs2_type)))))\n \t{\n \t  error (\"not allowed type combination in BIT_INSERT_EXPR\");\n \t  debug_generic_expr (rhs1_type);"}, {"sha": "8e3aec1e0a695e8fb74c7a191a41ae50200be435", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 37, "deletions": 12, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf2a0b90f2457f6d9301535560eb5e05978261b/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf2a0b90f2457f6d9301535560eb5e05978261b/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=1bf2a0b90f2457f6d9301535560eb5e05978261b", "patch": "@@ -1521,14 +1521,29 @@ non_rewritable_lvalue_p (tree lhs)\n       if (DECL_P (decl)\n \t  && VECTOR_TYPE_P (TREE_TYPE (decl))\n \t  && TYPE_MODE (TREE_TYPE (decl)) != BLKmode\n-\t  && operand_equal_p (TYPE_SIZE_UNIT (TREE_TYPE (lhs)),\n-\t\t\t      TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (decl))), 0)\n \t  && known_ge (mem_ref_offset (lhs), 0)\n \t  && known_gt (wi::to_poly_offset (TYPE_SIZE_UNIT (TREE_TYPE (decl))),\n \t\t       mem_ref_offset (lhs))\n \t  && multiple_of_p (sizetype, TREE_OPERAND (lhs, 1),\n \t\t\t    TYPE_SIZE_UNIT (TREE_TYPE (lhs))))\n-\treturn false;\n+\t{\n+\t  poly_uint64 lhs_bits, nelts;\n+\t  if (poly_int_tree_p (TYPE_SIZE (TREE_TYPE (lhs)), &lhs_bits)\n+\t      && multiple_p (lhs_bits,\n+\t\t\t     tree_to_uhwi\n+\t\t\t       (TYPE_SIZE (TREE_TYPE (TREE_TYPE (decl)))),\n+\t\t\t     &nelts))\n+\t    {\n+\t      if (known_eq (nelts, 1u))\n+\t\treturn false;\n+\t      /* For sub-vector inserts the insert vector mode has to be\n+\t\t supported.  */\n+\t      tree vtype = build_vector_type (TREE_TYPE (TREE_TYPE (decl)),\n+\t\t\t\t\t      nelts);\n+\t      if (TYPE_MODE (vtype) != BLKmode)\n+\t\treturn false;\n+\t    }\n+\t}\n     }\n \n   /* A vector-insert using a BIT_FIELD_REF is rewritable using\n@@ -1866,20 +1881,30 @@ execute_update_addresses_taken (void)\n \t\t    && bitmap_bit_p (suitable_for_renaming, DECL_UID (sym))\n \t\t    && VECTOR_TYPE_P (TREE_TYPE (sym))\n \t\t    && TYPE_MODE (TREE_TYPE (sym)) != BLKmode\n-\t\t    && operand_equal_p (TYPE_SIZE_UNIT (TREE_TYPE (lhs)),\n-\t\t\t\t\tTYPE_SIZE_UNIT\n-\t\t\t\t\t  (TREE_TYPE (TREE_TYPE (sym))), 0)\n-\t\t    && tree_fits_uhwi_p (TREE_OPERAND (lhs, 1))\n-\t\t    && tree_int_cst_lt (TREE_OPERAND (lhs, 1),\n-\t\t\t\t\tTYPE_SIZE_UNIT (TREE_TYPE (sym)))\n-\t\t    && (tree_to_uhwi (TREE_OPERAND (lhs, 1))\n-\t\t\t% tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (lhs)))) == 0)\n+\t\t    && known_ge (mem_ref_offset (lhs), 0)\n+\t\t    && known_gt (wi::to_poly_offset\n+\t\t\t\t   (TYPE_SIZE_UNIT (TREE_TYPE (sym))),\n+\t\t\t\t mem_ref_offset (lhs))\n+\t\t    && multiple_of_p (sizetype,\n+\t\t\t\t      TREE_OPERAND (lhs, 1),\n+\t\t\t\t      TYPE_SIZE_UNIT (TREE_TYPE (lhs))))\n \t\t  {\n \t\t    tree val = gimple_assign_rhs1 (stmt);\n \t\t    if (! types_compatible_p (TREE_TYPE (val),\n \t\t\t\t\t      TREE_TYPE (TREE_TYPE (sym))))\n \t\t      {\n-\t\t\ttree tem = make_ssa_name (TREE_TYPE (TREE_TYPE (sym)));\n+\t\t\tpoly_uint64 lhs_bits, nelts;\n+\t\t\ttree temtype = TREE_TYPE (TREE_TYPE (sym));\n+\t\t\tif (poly_int_tree_p (TYPE_SIZE (TREE_TYPE (lhs)),\n+\t\t\t\t\t     &lhs_bits)\n+\t\t\t    && multiple_p (lhs_bits,\n+\t\t\t\t\t   tree_to_uhwi\n+\t\t\t\t\t     (TYPE_SIZE (TREE_TYPE\n+\t\t\t\t\t\t\t   (TREE_TYPE (sym)))),\n+\t\t\t\t\t   &nelts)\n+\t\t\t    && maybe_ne (nelts, 1u))\n+\t\t\t  temtype = build_vector_type (temtype, nelts);\n+\t\t\ttree tem = make_ssa_name (temtype);\n \t\t\tgimple *pun\n \t\t\t  = gimple_build_assign (tem,\n \t\t\t\t\t\t build1 (VIEW_CONVERT_EXPR,"}]}