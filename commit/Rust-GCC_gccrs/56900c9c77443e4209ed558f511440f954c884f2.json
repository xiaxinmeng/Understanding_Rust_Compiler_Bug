{"sha": "56900c9c77443e4209ed558f511440f954c884f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY5MDBjOWM3NzQ0M2U0MjA5ZWQ1NThmNTExNDQwZjk1NGM4ODRmMg==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2014-10-24T11:46:47Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2014-10-24T11:46:47Z"}, "message": "unary_sat_op.inc: New file.\n\n2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/unary_sat_op.inc: New\n\tfile.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqabs.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqneg.c: Likewise.\n\nFrom-SVN: r216646", "tree": {"sha": "f8e3810f976c68ef3b33e78f17a427d6f7bc8f19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8e3810f976c68ef3b33e78f17a427d6f7bc8f19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56900c9c77443e4209ed558f511440f954c884f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56900c9c77443e4209ed558f511440f954c884f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56900c9c77443e4209ed558f511440f954c884f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56900c9c77443e4209ed558f511440f954c884f2/comments", "author": null, "committer": null, "parents": [{"sha": "c91f3ac1ffe401c1fee4506347ad602cf49b032e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c91f3ac1ffe401c1fee4506347ad602cf49b032e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c91f3ac1ffe401c1fee4506347ad602cf49b032e"}], "stats": {"total": 341, "additions": 341, "deletions": 0}, "files": [{"sha": "9f3f742a8aa11c6f37139a86283b245102d0cb77", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56900c9c77443e4209ed558f511440f954c884f2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56900c9c77443e4209ed558f511440f954c884f2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=56900c9c77443e4209ed558f511440f954c884f2", "patch": "@@ -1,3 +1,10 @@\n+2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/unary_sat_op.inc: New\n+\tfile.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqabs.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqneg.c: Likewise.\n+\n 2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/cmp_fp_op.inc: New file."}, {"sha": "3f6d98434e50d5be41d67041774281844ba9103d", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/unary_sat_op.inc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56900c9c77443e4209ed558f511440f954c884f2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Funary_sat_op.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56900c9c77443e4209ed558f511440f954c884f2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Funary_sat_op.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Funary_sat_op.inc?ref=56900c9c77443e4209ed558f511440f954c884f2", "patch": "@@ -0,0 +1,80 @@\n+/* Template file for saturating unary operator validation.\n+\n+   This file is meant to be included by the relevant test files, which\n+   have to define the intrinsic family to test. If a given intrinsic\n+   supports variants which are not supported by all the other\n+   saturating unary operators, these can be tested by providing a\n+   definition for EXTRA_TESTS.  */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define FNNAME1(NAME) exec_ ## NAME\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+void FNNAME (INSN_NAME) (void)\n+{\n+  /* y=OP(x), then store the result.  */\n+#define TEST_UNARY_SAT_OP1(INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  Set_Neon_Cumulative_Sat(0);\t\t\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    INSN##Q##_##T2##W(VECT_VAR(vector, T1, W, N));\t\t\t\\\n+    vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\\\n+\t\t      VECT_VAR(vector_res, T1, W, N));\t\t\t\\\n+      CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+#define TEST_UNARY_SAT_OP(INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  TEST_UNARY_SAT_OP1(INSN, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+  /* No need for 64 bits variants.  */\n+  DECL_VARIABLE(vector, int, 8, 8);\n+  DECL_VARIABLE(vector, int, 16, 4);\n+  DECL_VARIABLE(vector, int, 32, 2);\n+  DECL_VARIABLE(vector, int, 8, 16);\n+  DECL_VARIABLE(vector, int, 16, 8);\n+  DECL_VARIABLE(vector, int, 32, 4);\n+\n+  DECL_VARIABLE(vector_res, int, 8, 8);\n+  DECL_VARIABLE(vector_res, int, 16, 4);\n+  DECL_VARIABLE(vector_res, int, 32, 2);\n+  DECL_VARIABLE(vector_res, int, 8, 16);\n+  DECL_VARIABLE(vector_res, int, 16, 8);\n+  DECL_VARIABLE(vector_res, int, 32, 4);\n+\n+  clean_results ();\n+\n+  /* Initialize input \"vector\" from \"buffer\".  */\n+  VLOAD(vector, buffer, , int, s, 8, 8);\n+  VLOAD(vector, buffer, , int, s, 16, 4);\n+  VLOAD(vector, buffer, , int, s, 32, 2);\n+  VLOAD(vector, buffer, q, int, s, 8, 16);\n+  VLOAD(vector, buffer, q, int, s, 16, 8);\n+  VLOAD(vector, buffer, q, int, s, 32, 4);\n+\n+  /* Apply a saturating unary operator named INSN_NAME.  */\n+  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 8, 8, expected_cumulative_sat, \"\");\n+  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 16, 4, expected_cumulative_sat, \"\");\n+  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 32, 2, expected_cumulative_sat, \"\");\n+  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 8, 16, expected_cumulative_sat, \"\");\n+  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 16, 8, expected_cumulative_sat, \"\");\n+  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 32, 4, expected_cumulative_sat, \"\");\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, int, 16, 4, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, int, 32, 2, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, int, 16, 8, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, int, 32, 4, PRIx8, expected, \"\");\n+\n+#ifdef EXTRA_TESTS\n+  EXTRA_TESTS();\n+#endif\n+}\n+\n+int main (void)\n+{\n+  FNNAME (INSN_NAME) ();\n+\n+  return 0;\n+}"}, {"sha": "f2be790ae63f6922ff43d996a0001176cd3edcda", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqabs.c", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56900c9c77443e4209ed558f511440f954c884f2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56900c9c77443e4209ed558f511440f954c884f2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqabs.c?ref=56900c9c77443e4209ed558f511440f954c884f2", "patch": "@@ -0,0 +1,127 @@\n+#define INSN_NAME vqabs\n+#define TEST_MSG \"VQABS/VQABSQ\"\n+\n+/* Extra tests for functions requiring corner cases tests.  */\n+void vqabs_extra(void);\n+#define EXTRA_TESTS vqabs_extra\n+\n+#include \"unary_sat_op.inc\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0x10, 0xf, 0xe, 0xd, 0xc, 0xb, 0xa, 0x9 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0x10, 0xf, 0xe, 0xd };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x10, 0xf };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0x10, 0xf, 0xe, 0xd,\n+\t\t\t\t\t0xc, 0xb, 0xa, 0x9,\n+\t\t\t\t\t0x8, 0x7, 0x6, 0x5,\n+\t\t\t\t\t0x4, 0x3, 0x2, 0x1 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x10, 0xf, 0xe, 0xd,\n+\t\t\t\t\t0xc, 0xb, 0xa, 0x9 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x10, 0xf, 0xe, 0xd };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0x3333333333333333, 0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t   0x33333333, 0x33333333 };\n+\n+/* Expected values of cumulative_saturation flag.  */\n+int VECT_VAR(expected_cumulative_sat,int,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n+\n+/* Expected results when input is the min negative value of the type.  */\n+VECT_VAR_DECL(expected_min_neg,int,8,8) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t       0x7f, 0x7f, 0x7f, 0x7f };\n+VECT_VAR_DECL(expected_min_neg,int,16,4) [] = { 0x7fff, 0x7fff,\n+\t\t\t\t\t\t0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_min_neg,int,32,2) [] = { 0x7fffffff, 0x7fffffff };\n+VECT_VAR_DECL(expected_min_neg,int,8,16) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t0x7f, 0x7f, 0x7f, 0x7f };\n+VECT_VAR_DECL(expected_min_neg,int,16,8) [] = { 0x7fff, 0x7fff,\n+\t\t\t\t\t\t0x7fff, 0x7fff,\n+\t\t\t\t\t\t0x7fff, 0x7fff,\n+\t\t\t\t\t\t0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_min_neg,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n+\t\t\t\t\t\t0x7fffffff, 0x7fffffff };\n+\n+/* Expected values of cumulative_saturation flag when input is the min\n+   negative value of the type.  */\n+int VECT_VAR(expected_cumulative_sat_min_neg,int,8,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_min_neg,int,16,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_min_neg,int,32,2) = 1;\n+int VECT_VAR(expected_cumulative_sat_min_neg,int,8,16) = 1;\n+int VECT_VAR(expected_cumulative_sat_min_neg,int,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_min_neg,int,32,4) = 1;\n+\n+void vqabs_extra()\n+{\n+  /* No need for 64 bits variants.  */\n+  DECL_VARIABLE(vector, int, 8, 8);\n+  DECL_VARIABLE(vector, int, 16, 4);\n+  DECL_VARIABLE(vector, int, 32, 2);\n+  DECL_VARIABLE(vector, int, 8, 16);\n+  DECL_VARIABLE(vector, int, 16, 8);\n+  DECL_VARIABLE(vector, int, 32, 4);\n+\n+  DECL_VARIABLE(vector_res, int, 8, 8);\n+  DECL_VARIABLE(vector_res, int, 16, 4);\n+  DECL_VARIABLE(vector_res, int, 32, 2);\n+  DECL_VARIABLE(vector_res, int, 8, 16);\n+  DECL_VARIABLE(vector_res, int, 16, 8);\n+  DECL_VARIABLE(vector_res, int, 32, 4);\n+\n+  clean_results ();\n+\n+  /* Initialize input \"vector\" with min negative values to check\n+     saturation.  */\n+  VDUP(vector, , int, s, 8, 8, 0x80);\n+  VDUP(vector, , int, s, 16, 4, 0x8000);\n+  VDUP(vector, , int, s, 32, 2, 0x80000000);\n+  VDUP(vector, q, int, s, 8, 16, 0x80);\n+  VDUP(vector, q, int, s, 16, 8, 0x8000);\n+  VDUP(vector, q, int, s, 32, 4, 0x80000000);\n+\n+#define MSG \"min negative input\"\n+  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 8, 8, expected_cumulative_sat_min_neg, MSG);\n+  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 16, 4, expected_cumulative_sat_min_neg, MSG);\n+  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 32, 2, expected_cumulative_sat_min_neg, MSG);\n+  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 8, 16, expected_cumulative_sat_min_neg, MSG);\n+  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 16, 8, expected_cumulative_sat_min_neg, MSG);\n+  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 32, 4, expected_cumulative_sat_min_neg, MSG);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_min_neg, MSG);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx8, expected_min_neg, MSG);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx8, expected_min_neg, MSG);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_min_neg, MSG);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx8, expected_min_neg, MSG);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx8, expected_min_neg, MSG);\n+}"}, {"sha": "942eba871f061fce768bf9da55f83f652ad13815", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqneg.c", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56900c9c77443e4209ed558f511440f954c884f2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqneg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56900c9c77443e4209ed558f511440f954c884f2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqneg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqneg.c?ref=56900c9c77443e4209ed558f511440f954c884f2", "patch": "@@ -0,0 +1,127 @@\n+#define INSN_NAME vqneg\n+#define TEST_MSG \"VQNEG/VQNEGQ\"\n+\n+/* Extra tests for functions requiring corner cases tests */\n+void vqneg_extra(void);\n+#define EXTRA_TESTS vqneg_extra\n+\n+#include \"unary_sat_op.inc\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0x10, 0xf, 0xe, 0xd, 0xc, 0xb, 0xa, 0x9 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0x10, 0xf, 0xe, 0xd };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x10, 0xf };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0x10, 0xf, 0xe, 0xd,\n+\t\t\t\t\t0xc, 0xb, 0xa, 0x9,\n+\t\t\t\t\t0x8, 0x7, 0x6, 0x5,\n+\t\t\t\t\t0x4, 0x3, 0x2, 0x1 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x10, 0xf, 0xe, 0xd,\n+\t\t\t\t\t0xc, 0xb, 0xa, 0x9 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x10, 0xf, 0xe, 0xd };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0x3333333333333333, 0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t   0x33333333, 0x33333333 };\n+\n+/* Expected values of cumulative_saturation flag.  */\n+int VECT_VAR(expected_cumulative_sat,int,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n+\n+/* Expected results when input is the min negative value of the type.  */\n+VECT_VAR_DECL(expected_min_neg,int,8,8) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t       0x7f, 0x7f, 0x7f, 0x7f };\n+VECT_VAR_DECL(expected_min_neg,int,16,4) [] = { 0x7fff, 0x7fff,\n+\t\t\t\t\t\t0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_min_neg,int,32,2) [] = { 0x7fffffff, 0x7fffffff };\n+VECT_VAR_DECL(expected_min_neg,int,8,16) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t0x7f, 0x7f, 0x7f, 0x7f };\n+VECT_VAR_DECL(expected_min_neg,int,16,8) [] = { 0x7fff, 0x7fff,\n+\t\t\t\t\t\t0x7fff, 0x7fff,\n+\t\t\t\t\t\t0x7fff, 0x7fff,\n+\t\t\t\t\t\t0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_min_neg,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n+\t\t\t\t\t\t0x7fffffff, 0x7fffffff };\n+\n+/* Expected values of cumulative_saturation flag when input is the min\n+   negative value of the type.  */\n+int VECT_VAR(expected_cumulative_sat_min_neg,int,8,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_min_neg,int,16,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_min_neg,int,32,2) = 1;\n+int VECT_VAR(expected_cumulative_sat_min_neg,int,8,16) = 1;\n+int VECT_VAR(expected_cumulative_sat_min_neg,int,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_min_neg,int,32,4) = 1;\n+\n+void vqneg_extra()\n+{\n+  /* No need for 64 bits variants.  */\n+  DECL_VARIABLE(vector, int, 8, 8);\n+  DECL_VARIABLE(vector, int, 16, 4);\n+  DECL_VARIABLE(vector, int, 32, 2);\n+  DECL_VARIABLE(vector, int, 8, 16);\n+  DECL_VARIABLE(vector, int, 16, 8);\n+  DECL_VARIABLE(vector, int, 32, 4);\n+\n+  DECL_VARIABLE(vector_res, int, 8, 8);\n+  DECL_VARIABLE(vector_res, int, 16, 4);\n+  DECL_VARIABLE(vector_res, int, 32, 2);\n+  DECL_VARIABLE(vector_res, int, 8, 16);\n+  DECL_VARIABLE(vector_res, int, 16, 8);\n+  DECL_VARIABLE(vector_res, int, 32, 4);\n+\n+  clean_results ();\n+\n+  /* Initialize input \"vector\" with min negative values to check\n+     saturation.  */\n+  VDUP(vector, , int, s, 8, 8, 0x80);\n+  VDUP(vector, , int, s, 16, 4, 0x8000);\n+  VDUP(vector, , int, s, 32, 2, 0x80000000);\n+  VDUP(vector, q, int, s, 8, 16, 0x80);\n+  VDUP(vector, q, int, s, 16, 8, 0x8000);\n+  VDUP(vector, q, int, s, 32, 4, 0x80000000);\n+\n+#define MSG \"min negative input\"\n+  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 8, 8, expected_cumulative_sat_min_neg, MSG);\n+  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 16, 4, expected_cumulative_sat_min_neg, MSG);\n+  TEST_UNARY_SAT_OP(INSN_NAME, , int, s, 32, 2, expected_cumulative_sat_min_neg, MSG);\n+  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 8, 16, expected_cumulative_sat_min_neg, MSG);\n+  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 16, 8, expected_cumulative_sat_min_neg, MSG);\n+  TEST_UNARY_SAT_OP(INSN_NAME, q, int, s, 32, 4, expected_cumulative_sat_min_neg, MSG);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_min_neg, MSG);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx8, expected_min_neg, MSG);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx8, expected_min_neg, MSG);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_min_neg, MSG);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx8, expected_min_neg, MSG);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx8, expected_min_neg, MSG);\n+}"}]}