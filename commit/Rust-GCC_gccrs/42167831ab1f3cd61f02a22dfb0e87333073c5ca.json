{"sha": "42167831ab1f3cd61f02a22dfb0e87333073c5ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIxNjc4MzFhYjFmM2NkNjFmMDJhMjJkZmIwZTg3MzMzMDczYzVjYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-16T12:23:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-16T14:03:03Z"}, "message": "libstdc++: Use __extension__ instead of diagnostic pragmas\n\nThis reverts c1676651b6c417e8f2b276a28199d76943834277 and uses the\n__extension__ keyword to prevent pedantic warnings instead of diagnostic\npragmas.\n\nThis also adds the __extension__ keyword in <limits> and <bits/random.h>\nwhere there are some more warnings that I missed in the previous commit.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/cpp_type_traits.h (__INT_N): Use __extension__\n\tinstead of diagnostic pragmas.\n\t* include/bits/functional_hash.h: Likewise.\n\t* include/bits/iterator_concepts.h (__is_signed_int128)\n\t(__is_unsigned_int128): Likewise.\n\t* include/bits/max_size_type.h (__max_size_type): Likewise.\n\t(numeric_limits<__max_size_type>): Likewise.\n\t* include/bits/std_abs.h (abs): Likewise.\n\t* include/bits/stl_algobase.h (__size_to_integer): Likewise.\n\t* include/bits/uniform_int_dist.h (uniform_int_distribution):\n\tLikewise.\n\t* include/ext/numeric_traits.h (_GLIBCXX_INT_N_TRAITS):\n\tLikewise.\n\t* include/std/type_traits (__is_integral_helper<INT_N>)\n\t(__is_signed_integer, __is_unsigned_integer)\n\t(__make_unsigned<INT_N>, __make_signed<INT_N>): Likewise.\n\t* include/std/limits (__INT_N): Add __extension__ keyword.\n\t* include/bits/random.h (_Select_uint_least_t)\n\t(random_device): Likewise.", "tree": {"sha": "aeba22d77559b26fcbf0fd397936a428c4f021b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aeba22d77559b26fcbf0fd397936a428c4f021b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42167831ab1f3cd61f02a22dfb0e87333073c5ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42167831ab1f3cd61f02a22dfb0e87333073c5ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42167831ab1f3cd61f02a22dfb0e87333073c5ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42167831ab1f3cd61f02a22dfb0e87333073c5ca/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1af937eb6246ad7f63ebff03590e9eede33aca81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af937eb6246ad7f63ebff03590e9eede33aca81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1af937eb6246ad7f63ebff03590e9eede33aca81"}], "stats": {"total": 127, "additions": 54, "deletions": 73}, "files": [{"sha": "d9462209bc2d503eb1bb711d14b044ecda463ed5", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42167831ab1f3cd61f02a22dfb0e87333073c5ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42167831ab1f3cd61f02a22dfb0e87333073c5ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=42167831ab1f3cd61f02a22dfb0e87333073c5ca", "patch": "@@ -253,22 +253,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n #define __INT_N(TYPE) \t\t\t\\\n+  __extension__\t\t\t\t\\\n   template<>\t\t\t\t\\\n     struct __is_integer<TYPE>\t\t\\\n     {\t\t\t\t\t\\\n       enum { __value = 1 };\t\t\\\n       typedef __true_type __type;\t\\\n     };\t\t\t\t\t\\\n+  __extension__\t\t\t\t\\\n   template<>\t\t\t\t\\\n     struct __is_integer<unsigned TYPE>\t\\\n     {\t\t\t\t\t\\\n       enum { __value = 1 };\t\t\\\n       typedef __true_type __type;\t\\\n     };\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wpedantic\"\n-\n #ifdef __GLIBCXX_TYPE_INT_N_0\n __INT_N(__GLIBCXX_TYPE_INT_N_0)\n #endif\n@@ -282,8 +281,6 @@ __INT_N(__GLIBCXX_TYPE_INT_N_2)\n __INT_N(__GLIBCXX_TYPE_INT_N_3)\n #endif\n \n-#pragma GCC diagnostic pop\n-\n #undef __INT_N\n \n   //"}, {"sha": "919faba778b5c36c62b5b3058f58425860f79a4d", "filename": "libstdc++-v3/include/bits/functional_hash.h", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42167831ab1f3cd61f02a22dfb0e87333073c5ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42167831ab1f3cd61f02a22dfb0e87333073c5ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h?ref=42167831ab1f3cd61f02a22dfb0e87333073c5ca", "patch": "@@ -171,28 +171,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// Explicit specialization for unsigned long long.\n   _Cxx_hashtable_define_trivial_hash(unsigned long long)\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wpedantic\"\n-\n #ifdef __GLIBCXX_TYPE_INT_N_0\n+  __extension__\n   _Cxx_hashtable_define_trivial_hash(__GLIBCXX_TYPE_INT_N_0)\n+  __extension__\n   _Cxx_hashtable_define_trivial_hash(__GLIBCXX_TYPE_INT_N_0 unsigned)\n #endif\n #ifdef __GLIBCXX_TYPE_INT_N_1\n+  __extension__\n   _Cxx_hashtable_define_trivial_hash(__GLIBCXX_TYPE_INT_N_1)\n+  __extension__\n   _Cxx_hashtable_define_trivial_hash(__GLIBCXX_TYPE_INT_N_1 unsigned)\n #endif\n #ifdef __GLIBCXX_TYPE_INT_N_2\n+  __extension__\n   _Cxx_hashtable_define_trivial_hash(__GLIBCXX_TYPE_INT_N_2)\n+  __extension__\n   _Cxx_hashtable_define_trivial_hash(__GLIBCXX_TYPE_INT_N_2 unsigned)\n #endif\n #ifdef __GLIBCXX_TYPE_INT_N_3\n+  __extension__\n   _Cxx_hashtable_define_trivial_hash(__GLIBCXX_TYPE_INT_N_3)\n+  __extension__\n   _Cxx_hashtable_define_trivial_hash(__GLIBCXX_TYPE_INT_N_3 unsigned)\n #endif\n \n-#pragma GCC diagnostic pop\n-\n #undef _Cxx_hashtable_define_trivial_hash\n \n   struct _Hash_impl"}, {"sha": "9c28ebfb345c2029cf03e1cb7294f677982f0209", "filename": "libstdc++-v3/include/bits/iterator_concepts.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42167831ab1f3cd61f02a22dfb0e87333073c5ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42167831ab1f3cd61f02a22dfb0e87333073c5ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h?ref=42167831ab1f3cd61f02a22dfb0e87333073c5ca", "patch": "@@ -553,9 +553,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class __max_diff_type;\n     class __max_size_type;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wpedantic\"\n-\n+    __extension__\n     template<typename _Tp>\n       concept __is_signed_int128\n #if __SIZEOF_INT128__\n@@ -564,6 +562,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t= false;\n #endif\n \n+    __extension__\n     template<typename _Tp>\n       concept __is_unsigned_int128\n #if __SIZEOF_INT128__\n@@ -572,8 +571,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t= false;\n #endif\n \n-#pragma GCC diagnostic pop\n-\n     template<typename _Tp>\n       concept __cv_bool = same_as<const volatile _Tp, const volatile bool>;\n "}, {"sha": "298a929db0360d1c51f01c2377e31ef002a5b369", "filename": "libstdc++-v3/include/bits/max_size_type.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42167831ab1f3cd61f02a22dfb0e87333073c5ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmax_size_type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42167831ab1f3cd61f02a22dfb0e87333073c5ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmax_size_type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmax_size_type.h?ref=42167831ab1f3cd61f02a22dfb0e87333073c5ca", "patch": "@@ -417,10 +417,8 @@ namespace ranges\n #endif\n \n #if __SIZEOF_INT128__\n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wpedantic\"\n+      __extension__\n       using __rep = unsigned __int128;\n-#pragma GCC diagnostic pop\n #else\n       using __rep = unsigned long long;\n #endif\n@@ -774,10 +772,7 @@ namespace ranges\n       static constexpr bool is_integer = true;\n       static constexpr bool is_exact = true;\n #if __SIZEOF_INT128__\n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wpedantic\"\n-      static_assert(same_as<_Sp::__rep, unsigned __int128>);\n-#pragma GCC diagnostic pop\n+      static_assert(__extension__ same_as<_Sp::__rep, __uint128_t>);\n       static constexpr int digits = 129;\n #else\n       static_assert(same_as<_Sp::__rep, unsigned long long>);"}, {"sha": "6d0e1544c9060f53381ab52b5ee3df7b0a7695d1", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42167831ab1f3cd61f02a22dfb0e87333073c5ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42167831ab1f3cd61f02a22dfb0e87333073c5ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=42167831ab1f3cd61f02a22dfb0e87333073c5ca", "patch": "@@ -101,7 +101,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __SIZEOF_INT128__ > __SIZEOF_LONG_LONG__\n     template<int __s>\n       struct _Select_uint_least_t<__s, 1>\n-      { typedef unsigned __int128 type; };\n+      { __extension__ typedef unsigned __int128 type; };\n #endif\n \n     // Assume a != 0, a < m, c < m, x < m.\n@@ -1663,7 +1663,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     void _M_init(const char*, size_t); // not exported from the shared library\n \n-    union\n+    __extension__ union\n     {\n       struct\n       {"}, {"sha": "908d6bcd983f8bd21822b291d0b69d96ee916b42", "filename": "libstdc++-v3/include/bits/std_abs.h", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42167831ab1f3cd61f02a22dfb0e87333073c5ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_abs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42167831ab1f3cd61f02a22dfb0e87333073c5ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_abs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_abs.h?ref=42167831ab1f3cd61f02a22dfb0e87333073c5ca", "patch": "@@ -80,35 +80,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_fabsl(__x); }\n #endif\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wpedantic\"\n-\n #if defined(__GLIBCXX_TYPE_INT_N_0)\n-  inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0\n+  __extension__ inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0\n   abs(__GLIBCXX_TYPE_INT_N_0 __x) { return __x >= 0 ? __x : -__x; }\n #endif\n #if defined(__GLIBCXX_TYPE_INT_N_1)\n-  inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_1\n+  __extension__ inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_1\n   abs(__GLIBCXX_TYPE_INT_N_1 __x) { return __x >= 0 ? __x : -__x; }\n #endif\n #if defined(__GLIBCXX_TYPE_INT_N_2)\n-  inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_2\n+  __extension__ inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_2\n   abs(__GLIBCXX_TYPE_INT_N_2 __x) { return __x >= 0 ? __x : -__x; }\n #endif\n #if defined(__GLIBCXX_TYPE_INT_N_3)\n-  inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_3\n+  __extension__ inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_3\n   abs(__GLIBCXX_TYPE_INT_N_3 __x) { return __x >= 0 ? __x : -__x; }\n #endif\n \n #if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_FLOAT128)\n-  inline _GLIBCXX_CONSTEXPR\n+  __extension__ inline _GLIBCXX_CONSTEXPR\n   __float128\n   abs(__float128 __x)\n   { return __x < 0 ? -__x : __x; }\n #endif\n \n-#pragma GCC diagnostic pop\n-\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n } // extern \"C\"++\""}, {"sha": "d0c49628d7fe517fde479e55a8275bfc371abe2c", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42167831ab1f3cd61f02a22dfb0e87333073c5ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42167831ab1f3cd61f02a22dfb0e87333073c5ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=42167831ab1f3cd61f02a22dfb0e87333073c5ca", "patch": "@@ -1013,44 +1013,39 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n   inline _GLIBCXX_CONSTEXPR unsigned long long\n   __size_to_integer(unsigned long long __n) { return __n; }\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wpedantic\"\n-\n #if defined(__GLIBCXX_TYPE_INT_N_0)\n-  inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0\n+  __extension__ inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0\n   __size_to_integer(__GLIBCXX_TYPE_INT_N_0 __n) { return __n; }\n-  inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_0\n+  __extension__ inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_0\n   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_0 __n) { return __n; }\n #endif\n #if defined(__GLIBCXX_TYPE_INT_N_1)\n-  inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_1\n+  __extension__ inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_1\n   __size_to_integer(__GLIBCXX_TYPE_INT_N_1 __n) { return __n; }\n-  inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_1\n+  __extension__ inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_1\n   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_1 __n) { return __n; }\n #endif\n #if defined(__GLIBCXX_TYPE_INT_N_2)\n-  inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_2\n+  __extension__ inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_2\n   __size_to_integer(__GLIBCXX_TYPE_INT_N_2 __n) { return __n; }\n-  inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_2\n+  __extension__ inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_2\n   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_2 __n) { return __n; }\n #endif\n #if defined(__GLIBCXX_TYPE_INT_N_3)\n-  inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_3\n+  __extension__ inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_3\n   __size_to_integer(__GLIBCXX_TYPE_INT_N_3 __n) { return __n; }\n-  inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_3\n+  __extension__ inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_3\n   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_3 __n) { return __n; }\n #endif\n \n-#pragma GCC diagnostic pop\n-\n   inline _GLIBCXX_CONSTEXPR long long\n   __size_to_integer(float __n) { return (long long)__n; }\n   inline _GLIBCXX_CONSTEXPR long long\n   __size_to_integer(double __n) { return (long long)__n; }\n   inline _GLIBCXX_CONSTEXPR long long\n   __size_to_integer(long double __n) { return (long long)__n; }\n #if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_FLOAT128)\n-  inline _GLIBCXX_CONSTEXPR long long\n+  __extension__ inline _GLIBCXX_CONSTEXPR long long\n   __size_to_integer(__float128 __n) { return (long long)__n; }\n #endif\n "}, {"sha": "622b1fee91dcbbcb01dedc2133c55c95d5affab1", "filename": "libstdc++-v3/include/bits/uniform_int_dist.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42167831ab1f3cd61f02a22dfb0e87333073c5ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42167831ab1f3cd61f02a22dfb0e87333073c5ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h?ref=42167831ab1f3cd61f02a22dfb0e87333073c5ca", "patch": "@@ -299,17 +299,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if defined __UINT64_TYPE__ && defined __UINT32_TYPE__\n #if __SIZEOF_INT128__\n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wpedantic\"\n \t    if _GLIBCXX17_CONSTEXPR (__urngrange == __UINT64_MAX__)\n \t      {\n \t\t// __urng produces values that use exactly 64-bits,\n \t\t// so use 128-bit integers to downscale to desired range.\n \t\t__UINT64_TYPE__ __u64erange = __uerange;\n-\t\t__ret = _S_nd<unsigned __int128>(__urng, __u64erange);\n+\t\t__ret = __extension__ _S_nd<unsigned __int128>(__urng,\n+\t\t\t\t\t\t\t       __u64erange);\n \t      }\n \t    else\n-#pragma GCC diagnostic pop\n #endif\n \t    if _GLIBCXX17_CONSTEXPR (__urngrange == __UINT32_MAX__)\n \t      {"}, {"sha": "3ef0989fe748b3f1b3f4608e96ab18c3abffa102", "filename": "libstdc++-v3/include/ext/numeric_traits.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42167831ab1f3cd61f02a22dfb0e87333073c5ca/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42167831ab1f3cd61f02a22dfb0e87333073c5ca/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h?ref=42167831ab1f3cd61f02a22dfb0e87333073c5ca", "patch": "@@ -93,12 +93,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Enable __numeric_traits_integer for types where the __is_integer_nonstrict\n   // primary template doesn't give the right answer.\n #define _GLIBCXX_INT_N_TRAITS(T, WIDTH)\t\t\t\\\n+  __extension__\t\t\t\t\t\t\\\n   template<> struct __is_integer_nonstrict<T>\t\t\\\n   {\t\t\t\t\t\t\t\\\n     enum { __value = 1 };\t\t\t\t\\\n     typedef std::__true_type __type;\t\t\t\\\n     enum { __width = WIDTH };\t\t\t\t\\\n   };\t\t\t\t\t\t\t\\\n+  __extension__\t\t\t\t\t\t\\\n   template<> struct __is_integer_nonstrict<unsigned T>\t\\\n   {\t\t\t\t\t\t\t\\\n     enum { __value = 1 };\t\t\t\t\\\n@@ -123,12 +125,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n #if defined __STRICT_ANSI__ && defined __SIZEOF_INT128__\n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wpedantic\"\n   // In strict modes __is_integer<__int128> is false,\n   // but we still want to define __numeric_traits_integer<__int128>.\n   _GLIBCXX_INT_N_TRAITS(__int128, 128)\n-#pragma GCC diagnostic pop\n #endif\n \n #undef _GLIBCXX_INT_N_TRAITS"}, {"sha": "79aff3d93a4d81a388d21117c41790a800b223c2", "filename": "libstdc++-v3/include/std/limits", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42167831ab1f3cd61f02a22dfb0e87333073c5ca/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42167831ab1f3cd61f02a22dfb0e87333073c5ca/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits?ref=42167831ab1f3cd61f02a22dfb0e87333073c5ca", "patch": "@@ -1478,6 +1478,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n #define __INT_N(TYPE, BITSIZE, EXT, UEXT)\t\t\t\t\\\n+  __extension__\t\t\t\t\t\t\t\t\\\n   template<>\t\t\t\t\t\t\t\t\\\n     struct numeric_limits<TYPE>\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n@@ -1546,6 +1547,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t= round_toward_zero; \t\t\t\t\t\t\\\n     }; \t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n+  __extension__\t\t\t\t\t\t\t\t\\\n   template<>\t\t\t\t\t\t\t\t\\\n     struct numeric_limits<unsigned TYPE>\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "15ec83a06b8d4f4a0049c3ef9c7fb31f7f6ac8bd", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42167831ab1f3cd61f02a22dfb0e87333073c5ca/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42167831ab1f3cd61f02a22dfb0e87333073c5ca/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=42167831ab1f3cd61f02a22dfb0e87333073c5ca", "patch": "@@ -347,48 +347,52 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_integral_helper<unsigned long long>\n     : public true_type { };\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wpedantic\"\n-\n   // Conditionalizing on __STRICT_ANSI__ here will break any port that\n   // uses one of these types for size_t.\n #if defined(__GLIBCXX_TYPE_INT_N_0)\n+  __extension__\n   template<>\n     struct __is_integral_helper<__GLIBCXX_TYPE_INT_N_0>\n     : public true_type { };\n \n+  __extension__\n   template<>\n     struct __is_integral_helper<unsigned __GLIBCXX_TYPE_INT_N_0>\n     : public true_type { };\n #endif\n #if defined(__GLIBCXX_TYPE_INT_N_1)\n+  __extension__\n   template<>\n     struct __is_integral_helper<__GLIBCXX_TYPE_INT_N_1>\n     : public true_type { };\n \n+  __extension__\n   template<>\n     struct __is_integral_helper<unsigned __GLIBCXX_TYPE_INT_N_1>\n     : public true_type { };\n #endif\n #if defined(__GLIBCXX_TYPE_INT_N_2)\n+  __extension__\n   template<>\n     struct __is_integral_helper<__GLIBCXX_TYPE_INT_N_2>\n     : public true_type { };\n \n+  __extension__\n   template<>\n     struct __is_integral_helper<unsigned __GLIBCXX_TYPE_INT_N_2>\n     : public true_type { };\n #endif\n #if defined(__GLIBCXX_TYPE_INT_N_3)\n+  __extension__\n   template<>\n     struct __is_integral_helper<__GLIBCXX_TYPE_INT_N_3>\n     : public true_type { };\n \n+  __extension__\n   template<>\n     struct __is_integral_helper<unsigned __GLIBCXX_TYPE_INT_N_3>\n     : public true_type { };\n #endif\n-#pragma GCC diagnostic pop\n   /// @endcond\n \n   /// is_integral\n@@ -621,10 +625,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename... _Types>\n     using __is_one_of = __or_<is_same<_Tp, _Types>...>;\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wpedantic\"\n-\n   // Check if a type is one of the signed integer types.\n+  __extension__\n   template<typename _Tp>\n     using __is_signed_integer = __is_one_of<__remove_cv_t<_Tp>,\n \t  signed char, signed short, signed int, signed long,\n@@ -644,6 +646,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  >;\n \n   // Check if a type is one of the unsigned integer types.\n+  __extension__\n   template<typename _Tp>\n     using __is_unsigned_integer = __is_one_of<__remove_cv_t<_Tp>,\n \t  unsigned char, unsigned short, unsigned int, unsigned long,\n@@ -661,7 +664,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  , unsigned __GLIBCXX_TYPE_INT_N_3\n #endif\n \t  >;\n-#pragma GCC diagnostic pop\n \n   // Check if a type is one of the signed or unsigned integer types.\n   template<typename _Tp>\n@@ -1725,32 +1727,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __make_unsigned<long long>\n     { typedef unsigned long long __type; };\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wpedantic\"\n-\n #if defined(__GLIBCXX_TYPE_INT_N_0)\n+  __extension__\n   template<>\n     struct __make_unsigned<__GLIBCXX_TYPE_INT_N_0>\n     { typedef unsigned __GLIBCXX_TYPE_INT_N_0 __type; };\n #endif\n #if defined(__GLIBCXX_TYPE_INT_N_1)\n+  __extension__\n   template<>\n     struct __make_unsigned<__GLIBCXX_TYPE_INT_N_1>\n     { typedef unsigned __GLIBCXX_TYPE_INT_N_1 __type; };\n #endif\n #if defined(__GLIBCXX_TYPE_INT_N_2)\n+  __extension__\n   template<>\n     struct __make_unsigned<__GLIBCXX_TYPE_INT_N_2>\n     { typedef unsigned __GLIBCXX_TYPE_INT_N_2 __type; };\n #endif\n #if defined(__GLIBCXX_TYPE_INT_N_3)\n+  __extension__\n   template<>\n     struct __make_unsigned<__GLIBCXX_TYPE_INT_N_3>\n     { typedef unsigned __GLIBCXX_TYPE_INT_N_3 __type; };\n #endif\n \n-#pragma GCC diagnostic pop\n-\n   // Select between integral and enum: not possible to be both.\n   template<typename _Tp,\n \t   bool _IsInt = is_integral<_Tp>::value,\n@@ -1886,32 +1887,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __make_signed<unsigned long long>\n     { typedef signed long long __type; };\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wpedantic\"\n-\n #if defined(__GLIBCXX_TYPE_INT_N_0)\n+  __extension__\n   template<>\n     struct __make_signed<unsigned __GLIBCXX_TYPE_INT_N_0>\n     { typedef __GLIBCXX_TYPE_INT_N_0 __type; };\n #endif\n #if defined(__GLIBCXX_TYPE_INT_N_1)\n+  __extension__\n   template<>\n     struct __make_signed<unsigned __GLIBCXX_TYPE_INT_N_1>\n     { typedef __GLIBCXX_TYPE_INT_N_1 __type; };\n #endif\n #if defined(__GLIBCXX_TYPE_INT_N_2)\n+  __extension__\n   template<>\n     struct __make_signed<unsigned __GLIBCXX_TYPE_INT_N_2>\n     { typedef __GLIBCXX_TYPE_INT_N_2 __type; };\n #endif\n #if defined(__GLIBCXX_TYPE_INT_N_3)\n+  __extension__\n   template<>\n     struct __make_signed<unsigned __GLIBCXX_TYPE_INT_N_3>\n     { typedef __GLIBCXX_TYPE_INT_N_3 __type; };\n #endif\n \n-#pragma GCC diagnostic pop\n-\n   // Select between integral and enum: not possible to be both.\n   template<typename _Tp,\n \t   bool _IsInt = is_integral<_Tp>::value,"}]}