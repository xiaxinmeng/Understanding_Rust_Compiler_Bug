{"sha": "565083069d08d22e1c8882948fba1e90dcde1388", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY1MDgzMDY5ZDA4ZDIyZTFjODg4Mjk0OGZiYTFlOTBkY2RlMTM4OA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@nerim.net", "date": "2002-07-21T21:35:17Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2002-07-21T21:35:17Z"}, "message": "c-decl.c (build_array_declarator): Say 'ISO C90', not 'ISO C89'.\n\n2002-07-21  Gabriel Dos Reis  <gdr@nerim.net>\n\n        * c-decl.c (build_array_declarator): Say 'ISO C90', not 'ISO C89'.\n        (grokdeclarator): Likewise.\n        * c-format.c (C_STD_NAME): Likewise.\n        * c-lex.c (interpret_integer): Likewise.\n        * c-typeck.c (build_array_ref): Likewise.\n        * cpplex.c (_cpp_lex_direct): Likewise.\n        * toplev.c (documented_lang_options): Likewise.\n\ntestsuite/\n2002-07-21  Gabriel Dos Reis  <gdr@nerim.net>\n\n        * gcc.dg/c90-arraydecl-1.c: Change C89 too C90.\n\nFrom-SVN: r55629", "tree": {"sha": "65860333fa5eace063eaed77c267e32c72a10073", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65860333fa5eace063eaed77c267e32c72a10073"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/565083069d08d22e1c8882948fba1e90dcde1388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/565083069d08d22e1c8882948fba1e90dcde1388", "html_url": "https://github.com/Rust-GCC/gccrs/commit/565083069d08d22e1c8882948fba1e90dcde1388", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/565083069d08d22e1c8882948fba1e90dcde1388/comments", "author": null, "committer": null, "parents": [{"sha": "e2f62855b2ad7615a8f731a8a90b64217e2110c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2f62855b2ad7615a8f731a8a90b64217e2110c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2f62855b2ad7615a8f731a8a90b64217e2110c3"}], "stats": {"total": 54, "additions": 34, "deletions": 20}, "files": [{"sha": "efb665865ffd5385a4a0fd735fb62fa55e296f60", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/565083069d08d22e1c8882948fba1e90dcde1388/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/565083069d08d22e1c8882948fba1e90dcde1388/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=565083069d08d22e1c8882948fba1e90dcde1388", "patch": "@@ -1,3 +1,13 @@\n+2002-07-21  Gabriel Dos Reis  <gdr@nerim.net>\n+\n+\t* c-decl.c (build_array_declarator): Say 'ISO C90', not 'ISO C89'.\n+\t(grokdeclarator): Likewise.\n+\t* c-format.c (C_STD_NAME): Likewise.\n+\t* c-lex.c (interpret_integer): Likewise.\n+\t* c-typeck.c (build_array_ref): Likewise.\n+\t* cpplex.c (_cpp_lex_direct): Likewise.\n+\t* toplev.c (documented_lang_options): Likewise.\n+\n 2002-07-21  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* c-format.c (T99_I, T99_UI): Remove."}, {"sha": "c6e592ac5ffa1e65eb40b12ac7fc7885da7585a6", "filename": "gcc/c-decl.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/565083069d08d22e1c8882948fba1e90dcde1388/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/565083069d08d22e1c8882948fba1e90dcde1388/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=565083069d08d22e1c8882948fba1e90dcde1388", "patch": "@@ -3115,9 +3115,9 @@ build_array_declarator (expr, quals, static_p, vla_unspec_p)\n   if (pedantic && !flag_isoc99)\n     {\n       if (static_p || quals != NULL_TREE)\n-\tpedwarn (\"ISO C89 does not support `static' or type qualifiers in parameter array declarators\");\n+\tpedwarn (\"ISO C90 does not support `static' or type qualifiers in parameter array declarators\");\n       if (vla_unspec_p)\n-\tpedwarn (\"ISO C89 does not support `[*]' array declarators\");\n+\tpedwarn (\"ISO C90 does not support `[*]' array declarators\");\n     }\n   if (vla_unspec_p)\n     warning (\"GCC does not yet properly implement `[*]' array declarators\");\n@@ -3909,7 +3909,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t\t    {\n \t\t      if (pedantic && !flag_isoc99 && ! in_system_header\n \t\t\t  && warn_long_long)\n-\t\t\tpedwarn (\"ISO C89 does not support `long long'\");\n+\t\t\tpedwarn (\"ISO C90 does not support `long long'\");\n \t\t      longlong = 1;\n \t\t    }\n \t\t}\n@@ -4110,7 +4110,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n   if (specbits & 1 << (int) RID_COMPLEX)\n     {\n       if (pedantic && !flag_isoc99)\n-\tpedwarn (\"ISO C89 does not support complex types\");\n+\tpedwarn (\"ISO C90 does not support complex types\");\n       /* If we just have \"complex\", it is equivalent to\n \t \"complex double\", but if any modifiers at all are specified it is\n \t the complex form of TYPE.  E.g, \"complex short\" is\n@@ -4388,10 +4388,10 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t\t  if (!flag_isoc99 && pedantic)\n \t\t    {\n \t\t      if (TREE_CONSTANT (size))\n-\t\t\tpedwarn (\"ISO C89 forbids array `%s' whose size can't be evaluated\",\n+\t\t\tpedwarn (\"ISO C90 forbids array `%s' whose size can't be evaluated\",\n \t\t\t\t name);\n \t\t      else\n-\t\t\tpedwarn (\"ISO C89 forbids variable-size array `%s'\",\n+\t\t\tpedwarn (\"ISO C90 forbids variable-size array `%s'\",\n \t\t\t\t name);\n \t\t    }\n \t\t}\n@@ -4434,7 +4434,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t  else if (decl_context == FIELD)\n \t    {\n \t      if (pedantic && !flag_isoc99 && !in_system_header)\n-\t\tpedwarn (\"ISO C89 does not support flexible array members\");\n+\t\tpedwarn (\"ISO C90 does not support flexible array members\");\n \n \t      /* ISO C99 Flexible array members are effectively identical\n \t\t to GCC's zero-length array extension.  */"}, {"sha": "6423d90474515fb4c97e05f2378275f05a3ce6f1", "filename": "gcc/c-format.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/565083069d08d22e1c8882948fba1e90dcde1388/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/565083069d08d22e1c8882948fba1e90dcde1388/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=565083069d08d22e1c8882948fba1e90dcde1388", "patch": "@@ -356,7 +356,7 @@ enum format_std_version\n \t\t\t\t ? \"ISO C++\"\t\t\t\\\n \t\t\t\t : ((FEATURE_VER) == STD_EXT\t\\\n \t\t\t\t    ? \"ISO C\"\t\t\t\\\n-\t\t\t\t    : \"ISO C89\"))\n+\t\t\t\t    : \"ISO C90\"))\n /* Adjust a C standard version, which may be STD_C9L, to account for\n    -Wno-long-long.  Returns other standard versions unchanged.  */\n #define ADJ_STD(VER)\t\t((int)((VER) == STD_C9L\t\t\t      \\"}, {"sha": "4a7f05ae7468b65877859babec2e4ca6390cdee4", "filename": "gcc/c-lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/565083069d08d22e1c8882948fba1e90dcde1388/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/565083069d08d22e1c8882948fba1e90dcde1388/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=565083069d08d22e1c8882948fba1e90dcde1388", "patch": "@@ -853,10 +853,10 @@ interpret_integer (token, flags)\n \t\t  if (itk_u < itk_unsigned_long)\n \t\t    itk_u = itk_unsigned_long;\n \t\t  itk = itk_u;\n-\t\t  warning (\"this decimal constant is unsigned only in ISO C89\");\n+\t\t  warning (\"this decimal constant is unsigned only in ISO C90\");\n \t\t}\n \t      else if (warn_traditional)\n-\t\twarning (\"this decimal constant would be unsigned in ISO C89\");\n+\t\twarning (\"this decimal constant would be unsigned in ISO C90\");\n \t    }\n \t}\n     }"}, {"sha": "48b421313d6a05299384ed6e0d0f9721e26568f9", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/565083069d08d22e1c8882948fba1e90dcde1388/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/565083069d08d22e1c8882948fba1e90dcde1388/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=565083069d08d22e1c8882948fba1e90dcde1388", "patch": "@@ -1362,7 +1362,7 @@ build_array_ref (array, index)\n \t  if (TREE_CODE (foo) == VAR_DECL && DECL_REGISTER (foo))\n \t    pedwarn (\"ISO C forbids subscripting `register' array\");\n \t  else if (! flag_isoc99 && ! lvalue_p (foo))\n-\t    pedwarn (\"ISO C89 forbids subscripting non-lvalue array\");\n+\t    pedwarn (\"ISO C90 forbids subscripting non-lvalue array\");\n \t}\n \n       type = TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (array)));"}, {"sha": "7942c96ad3010e320fc59b421c32ae1682fffea5", "filename": "gcc/cpplex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/565083069d08d22e1c8882948fba1e90dcde1388/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/565083069d08d22e1c8882948fba1e90dcde1388/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=565083069d08d22e1c8882948fba1e90dcde1388", "patch": "@@ -1100,7 +1100,7 @@ _cpp_lex_direct (pfile)\n \t      && ! buffer->warned_cplusplus_comments)\n \t    {\n \t      cpp_error (pfile, DL_PEDWARN,\n-\t\t\t \"C++ style comments are not allowed in ISO C89\");\n+\t\t\t \"C++ style comments are not allowed in ISO C90\");\n \t      cpp_error (pfile, DL_PEDWARN,\n \t\t\t \"(this will be reported only once per input file)\");\n \t      buffer->warned_cplusplus_comments = 1;"}, {"sha": "bf8976fdaf97f896a1d51df0f44763d73ff0acea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/565083069d08d22e1c8882948fba1e90dcde1388/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/565083069d08d22e1c8882948fba1e90dcde1388/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=565083069d08d22e1c8882948fba1e90dcde1388", "patch": "@@ -1,3 +1,7 @@\n+2002-07-21  Gabriel Dos Reis  <gdr@nerim.net>\n+\n+\t* gcc.dg/c90-arraydecl-1.c: Change C89 too C90.\n+\n 2002-07-20  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcc.c-torture/execute/20020720-1.c: New testcase."}, {"sha": "47334b9123d6372caeedf7c51d178de0649d9e4f", "filename": "gcc/testsuite/gcc.dg/c90-arraydecl-1.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/565083069d08d22e1c8882948fba1e90dcde1388/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-arraydecl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/565083069d08d22e1c8882948fba1e90dcde1388/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-arraydecl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-arraydecl-1.c?ref=565083069d08d22e1c8882948fba1e90dcde1388", "patch": "@@ -8,24 +8,24 @@\n    it correctly, so gives a warning about this. so we can't yet test here\n    that we get just one error and no warnings.  */\n \n-void foo0 (int a, int b[*]); /* { dg-error \"ISO C89\" \"\\[*\\] not in C89\" } */\n+void foo0 (int a, int b[*]); /* { dg-error \"ISO C90\" \"\\[*\\] not in C90\" } */\n /* { dg-warning \"implement\" \"\\[*\\] not implemented\" { target *-*-* } 11 } */\n-void foo1 (int, int [*]); /* { dg-error \"ISO C89\" \"\\[*\\] not in C89\" } */\n+void foo1 (int, int [*]); /* { dg-error \"ISO C90\" \"\\[*\\] not in C90\" } */\n /* { dg-warning \"implement\" \"\\[*\\] not implemented\" { target *-*-* } 13 } */\n \n /* Use of static and type qualifiers (not allowed with abstract declarators)\n    is a C99 feature.  */\n \n void bar0 (int a[const]); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"ISO C89\" \"\\[quals\\] not in C89\" { target *-*-* } 19 } */\n+/* { dg-error \"ISO C90\" \"\\[quals\\] not in C90\" { target *-*-* } 19 } */\n void bar1 (int a[const 2]); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"ISO C89\" \"\\[quals expr\\] not in C89\" { target *-*-* } 21 } */\n+/* { dg-error \"ISO C90\" \"\\[quals expr\\] not in C90\" { target *-*-* } 21 } */\n void bar2 (int a[static 2]); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"ISO C89\" \"\\[static expr\\] not in C89\" { target *-*-* } 23 } */\n+/* { dg-error \"ISO C90\" \"\\[static expr\\] not in C90\" { target *-*-* } 23 } */\n void bar3 (int a[static const 2]); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"ISO C89\" \"\\[static quals expr\\] not in C89\" { target *-*-* } 25 } */\n+/* { dg-error \"ISO C90\" \"\\[static quals expr\\] not in C90\" { target *-*-* } 25 } */\n void bar4 (int a[const static 2]); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"ISO C89\" \"\\[quals static expr\\] not in C89\" { target *-*-* } 27 } */\n+/* { dg-error \"ISO C90\" \"\\[quals static expr\\] not in C90\" { target *-*-* } 27 } */\n \n /* Because [*] isn't properly implemented and so warns, we don't test here\n    for [const *] yet.  */"}, {"sha": "f9ebc17aefcfaf81743f3395fc529988885f4706", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/565083069d08d22e1c8882948fba1e90dcde1388/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/565083069d08d22e1c8882948fba1e90dcde1388/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=565083069d08d22e1c8882948fba1e90dcde1388", "patch": "@@ -1196,7 +1196,7 @@ documented_lang_options[] =\n      enabled by default.  */\n \n   { \"-ansi\",\n-    N_(\"Compile just for ISO C89\") },\n+    N_(\"Compile just for ISO C90\") },\n   { \"-std= \",\n     N_(\"Determine language standard\") },\n "}]}