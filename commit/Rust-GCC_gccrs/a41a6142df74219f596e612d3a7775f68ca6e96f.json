{"sha": "a41a6142df74219f596e612d3a7775f68ca6e96f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQxYTYxNDJkZjc0MjE5ZjU5NmU2MTJkM2E3Nzc1ZjY4Y2E2ZTk2Zg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-09-14T16:35:39Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-09-14T16:35:39Z"}, "message": "Add LOOP_VINFO_MAX_VECT_FACTOR\n\nEpilogue vectorisation uses the vectorisation factor of the main loop\nas the maximum vectorisation factor allowed for correctness.  That makes\nsense as a conservatively correct value, since the chosen vectorisation\nfactor will be strictly less than that anyway.  However, once the VF\nitself becomes variable, it's easier to carry across the original\nmaximum VF instead.\n\n2017-09-14  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* tree-vectorizer.h (_loop_vec_info): Add max_vectorization_factor.\n\t(LOOP_VINFO_MAX_VECT_FACTOR): New macro.\n\t(LOOP_VINFO_ORIG_VECT_FACTOR): Replace with...\n\t(LOOP_VINFO_ORIG_MAX_VECT_FACTOR): ...this new macro.\n\t* tree-vect-data-refs.c (vect_analyze_data_ref_dependences): Update\n\taccordingly.\n\t* tree-vect-loop.c (_loop_vec_info::_loop_vec_info): Initialize\n\tmax_vectorization_factor.\n\t(vect_analyze_loop_2): Set LOOP_VINFO_MAX_VECT_FACTOR.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r252766", "tree": {"sha": "55832f96a9e8fb31f553b1284c5fdc4d0dac5104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55832f96a9e8fb31f553b1284c5fdc4d0dac5104"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a41a6142df74219f596e612d3a7775f68ca6e96f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a41a6142df74219f596e612d3a7775f68ca6e96f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a41a6142df74219f596e612d3a7775f68ca6e96f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a41a6142df74219f596e612d3a7775f68ca6e96f/comments", "author": null, "committer": null, "parents": [{"sha": "ca09abcb399bcb8cddbda68c75e702cc8989a6ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca09abcb399bcb8cddbda68c75e702cc8989a6ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca09abcb399bcb8cddbda68c75e702cc8989a6ca"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "31c9d0afb2b25806fa06340476ac554dfc428a73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a41a6142df74219f596e612d3a7775f68ca6e96f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a41a6142df74219f596e612d3a7775f68ca6e96f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a41a6142df74219f596e612d3a7775f68ca6e96f", "patch": "@@ -1,3 +1,17 @@\n+2017-09-14  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* tree-vectorizer.h (_loop_vec_info): Add max_vectorization_factor.\n+\t(LOOP_VINFO_MAX_VECT_FACTOR): New macro.\n+\t(LOOP_VINFO_ORIG_VECT_FACTOR): Replace with...\n+\t(LOOP_VINFO_ORIG_MAX_VECT_FACTOR): ...this new macro.\n+\t* tree-vect-data-refs.c (vect_analyze_data_ref_dependences): Update\n+\taccordingly.\n+\t* tree-vect-loop.c (_loop_vec_info::_loop_vec_info): Initialize\n+\tmax_vectorization_factor.\n+\t(vect_analyze_loop_2): Set LOOP_VINFO_MAX_VECT_FACTOR.\n+\n 2017-09-14  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "c409dc71a49ec6e55fcf6199304aec3017c7afb3", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a41a6142df74219f596e612d3a7775f68ca6e96f/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a41a6142df74219f596e612d3a7775f68ca6e96f/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=a41a6142df74219f596e612d3a7775f68ca6e96f", "patch": "@@ -509,7 +509,7 @@ vect_analyze_data_ref_dependences (loop_vec_info loop_vinfo, int *max_vf)\n      was applied to original loop.  Therefore we may just get max_vf\n      using VF of original loop.  */\n   if (LOOP_VINFO_EPILOGUE_P (loop_vinfo))\n-    *max_vf = LOOP_VINFO_ORIG_VECT_FACTOR (loop_vinfo);\n+    *max_vf = LOOP_VINFO_ORIG_MAX_VECT_FACTOR (loop_vinfo);\n   else\n     FOR_EACH_VEC_ELT (LOOP_VINFO_DDRS (loop_vinfo), i, ddr)\n       if (vect_analyze_data_ref_dependence (ddr, loop_vinfo, max_vf))"}, {"sha": "80eb4f1fda9734935f87cd7610a63861c1d21430", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a41a6142df74219f596e612d3a7775f68ca6e96f/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a41a6142df74219f596e612d3a7775f68ca6e96f/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=a41a6142df74219f596e612d3a7775f68ca6e96f", "patch": "@@ -1111,6 +1111,7 @@ _loop_vec_info::_loop_vec_info (struct loop *loop_in)\n     num_iters_assumptions (NULL_TREE),\n     th (0),\n     vectorization_factor (0),\n+    max_vectorization_factor (0),\n     unaligned_dr (NULL),\n     peeling_for_alignment (0),\n     ptr_mask (0),\n@@ -1920,6 +1921,7 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal)\n \t\t\t     \"bad data dependence.\\n\");\n       return false;\n     }\n+  LOOP_VINFO_MAX_VECT_FACTOR (loop_vinfo) = max_vf;\n \n   ok = vect_determine_vectorization_factor (loop_vinfo);\n   if (!ok)"}, {"sha": "57152ee08b14405c145fa5a5f98dcd54e4ee2535", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a41a6142df74219f596e612d3a7775f68ca6e96f/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a41a6142df74219f596e612d3a7775f68ca6e96f/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=a41a6142df74219f596e612d3a7775f68ca6e96f", "patch": "@@ -241,6 +241,10 @@ typedef struct _loop_vec_info : public vec_info {\n   /* Unrolling factor  */\n   int vectorization_factor;\n \n+  /* Maximum runtime vectorization factor, or MAX_VECTORIZATION_FACTOR\n+     if there is no particular limit.  */\n+  unsigned HOST_WIDE_INT max_vectorization_factor;\n+\n   /* Unknown DRs according to which loop was peeled.  */\n   struct data_reference *unaligned_dr;\n \n@@ -355,6 +359,7 @@ typedef struct _loop_vec_info : public vec_info {\n #define LOOP_VINFO_COST_MODEL_THRESHOLD(L) (L)->th\n #define LOOP_VINFO_VECTORIZABLE_P(L)       (L)->vectorizable\n #define LOOP_VINFO_VECT_FACTOR(L)          (L)->vectorization_factor\n+#define LOOP_VINFO_MAX_VECT_FACTOR(L)      (L)->max_vectorization_factor\n #define LOOP_VINFO_PTR_MASK(L)             (L)->ptr_mask\n #define LOOP_VINFO_LOOP_NEST(L)            (L)->loop_nest\n #define LOOP_VINFO_DATAREFS(L)             (L)->datarefs\n@@ -400,8 +405,8 @@ typedef struct _loop_vec_info : public vec_info {\n #define LOOP_VINFO_EPILOGUE_P(L) \\\n   (LOOP_VINFO_ORIG_LOOP_INFO (L) != NULL)\n \n-#define LOOP_VINFO_ORIG_VECT_FACTOR(L) \\\n-  (LOOP_VINFO_VECT_FACTOR (LOOP_VINFO_ORIG_LOOP_INFO (L)))\n+#define LOOP_VINFO_ORIG_MAX_VECT_FACTOR(L) \\\n+  (LOOP_VINFO_MAX_VECT_FACTOR (LOOP_VINFO_ORIG_LOOP_INFO (L)))\n \n static inline loop_vec_info\n loop_vec_info_for_loop (struct loop *loop)"}]}