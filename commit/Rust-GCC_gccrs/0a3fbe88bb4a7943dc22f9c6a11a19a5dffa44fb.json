{"sha": "0a3fbe88bb4a7943dc22f9c6a11a19a5dffa44fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGEzZmJlODhiYjRhNzk0M2RjMjJmOWM2YTExYTE5YTVkZmZhNDRmYg==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2002-10-04T16:47:36Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2002-10-04T16:47:36Z"}, "message": "* java/lang/Throwable.java: Remerge with Classpath.\n\nFrom-SVN: r57823", "tree": {"sha": "2e4de08f97c948f15fc4d127790225d49581d95b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e4de08f97c948f15fc4d127790225d49581d95b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a3fbe88bb4a7943dc22f9c6a11a19a5dffa44fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a3fbe88bb4a7943dc22f9c6a11a19a5dffa44fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a3fbe88bb4a7943dc22f9c6a11a19a5dffa44fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a3fbe88bb4a7943dc22f9c6a11a19a5dffa44fb/comments", "author": null, "committer": null, "parents": [{"sha": "f91f86e7dac29f0e2d965fe0c50b7f6e76fb27bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f91f86e7dac29f0e2d965fe0c50b7f6e76fb27bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f91f86e7dac29f0e2d965fe0c50b7f6e76fb27bb"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "1f56f0e687101c8cf6c5ba1aee00a761cabed835", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a3fbe88bb4a7943dc22f9c6a11a19a5dffa44fb/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a3fbe88bb4a7943dc22f9c6a11a19a5dffa44fb/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0a3fbe88bb4a7943dc22f9c6a11a19a5dffa44fb", "patch": "@@ -1,3 +1,7 @@\n+2002-10-04  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/lang/Throwable.java: Remerge with Classpath.\n+\n 2002-10-04  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/InetAddress.java:"}, {"sha": "62db8fd0d2ddbd727d86edde3112492b4b48f4ef", "filename": "libjava/java/lang/Throwable.java", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a3fbe88bb4a7943dc22f9c6a11a19a5dffa44fb/libjava%2Fjava%2Flang%2FThrowable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a3fbe88bb4a7943dc22f9c6a11a19a5dffa44fb/libjava%2Fjava%2Flang%2FThrowable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThrowable.java?ref=0a3fbe88bb4a7943dc22f9c6a11a19a5dffa44fb", "patch": "@@ -1,5 +1,4 @@\n-/* java.lang.Throwable -- Reference implementation of root class for\n-   all Exceptions and Errors\n+/* java.lang.Throwable -- Root class for all Exceptions and Errors\n    Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n@@ -46,12 +45,6 @@\n import java.io.IOException;\n import java.io.OutputStream;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * Status: Sufficient for compiled code, but methods applicable to\n- * bytecode not implemented.  JDK 1.1.\n- */\n-\n /**\n  * Throwable is the superclass of all exceptions that can be raised.\n  *\n@@ -166,7 +159,7 @@ public Throwable()\n   public Throwable(String message)\n   {\n     fillInStackTrace();\n-    detailMessage = message;  \n+    detailMessage = message;\n   }\n \n   /**\n@@ -373,7 +366,7 @@ public void printStackTrace(PrintStream s)\n   }\n \n   /**\n-   * <p>Prints the exception, the detailed message and the stack trace\n+   * Prints the exception, the detailed message and the stack trace\n    * associated with this Throwable to the given <code>PrintWriter</code>.\n    * The actual output written is implemention specific. Use the result of\n    * <code>getStackTrace()</code> when more precise information is needed.\n@@ -533,7 +526,7 @@ public StackTraceElement[] getStackTrace()\n    * serialization according to the context of the remote call.\n    * <p>\n    * The contents of the given stacktrace is copied so changes to the\n-   * original * array do not change the stack trace elements of this\n+   * original array do not change the stack trace elements of this\n    * throwable.\n    *\n    * @param stackTrace the new trace to use\n@@ -546,10 +539,11 @@ public void setStackTrace(StackTraceElement[] stackTrace)\n     StackTraceElement[] st = new StackTraceElement[i];\n \n     while (--i >= 0)\n-      if (stackTrace[i] == null)\n-\tthrow new NullPointerException();\n-      else\n+      {\n \tst[i] = stackTrace[i];\n+\tif (st[i] == null)\n+\t  throw new NullPointerException(\"Element \" + i + \" null\");\n+      }\n \n     this.stackTrace = st;\n   }"}]}