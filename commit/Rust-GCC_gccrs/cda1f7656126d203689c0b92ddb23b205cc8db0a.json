{"sha": "cda1f7656126d203689c0b92ddb23b205cc8db0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RhMWY3NjU2MTI2ZDIwMzY4OWMwYjkyZGRiMjNiMjA1Y2M4ZGIwYQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2003-01-17T00:00:18Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2003-01-17T00:00:18Z"}, "message": "haifa-sched.c (move_insn): Restore moving all schedule group.\n\n2003-01-16  Vladimir Makarov  <vmakarov@redhat.com>\n\n\t* haifa-sched.c (move_insn): Restore moving all schedule group.\n\t(set_priorities): Restore taking SCHED_GROUP_P into account.\n\n\t* sched-deps.c (add_dependence): Restore processing the last group\n\tinsn.\n\t(remove_dependence, group_leader): Restore the functions.\n\t(set_sched_group_p): Restore adding dependencies from previous insn\n\tin the group.\n\t(compute_forward_dependences): Restore usage of group_leader.\n\n\t* sched-ebb.c (init_ready_list): Restore taking SCHED_GROUP_P into\n\taccount.\n\n\t* sched-rgn.c (init_ready_list): Restore taking SCHED_GROUP_P into\n\taccount.\n\t(can_schedule_ready_p): Ditto.\n\t(add_branch_dependences): Restore skipping over the group insns.\n\nFrom-SVN: r61412", "tree": {"sha": "6a518c0a40b187dcecd0e59e899e3632f564f628", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a518c0a40b187dcecd0e59e899e3632f564f628"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cda1f7656126d203689c0b92ddb23b205cc8db0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cda1f7656126d203689c0b92ddb23b205cc8db0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cda1f7656126d203689c0b92ddb23b205cc8db0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cda1f7656126d203689c0b92ddb23b205cc8db0a/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "200097cc9a3d0355c61c8630a03e991563f91104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/200097cc9a3d0355c61c8630a03e991563f91104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/200097cc9a3d0355c61c8630a03e991563f91104"}], "stats": {"total": 229, "additions": 198, "deletions": 31}, "files": [{"sha": "262eb0be3f6d20553ec1a845da6feea049b4a13b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda1f7656126d203689c0b92ddb23b205cc8db0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda1f7656126d203689c0b92ddb23b205cc8db0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cda1f7656126d203689c0b92ddb23b205cc8db0a", "patch": "@@ -1,3 +1,23 @@\n+2003-01-16  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\t* haifa-sched.c (move_insn): Restore moving all schedule group.\n+\t(set_priorities): Restore taking SCHED_GROUP_P into account.\n+\n+\t* sched-deps.c (add_dependence): Restore processing the last group\n+\tinsn.\n+\t(remove_dependence, group_leader): Restore the functions.\n+\t(set_sched_group_p): Restore adding dependencies from previous insn\n+\tin the group.\n+\t(compute_forward_dependences): Restore usage of group_leader.\n+\n+\t* sched-ebb.c (init_ready_list): Restore taking SCHED_GROUP_P into\n+\taccount.\n+\n+\t* sched-rgn.c (init_ready_list): Restore taking SCHED_GROUP_P into\n+\taccount.\n+\t(can_schedule_ready_p): Ditto.\n+\t(add_branch_dependences): Restore skipping over the group insns.\n+\t\n 2003-01-16  Stephane Carrez  <stcarrez@nerim.fr>\n \n \t* config/m68hc11/m68hc11.c (m68hc11_check_z_replacement): Fix handling"}, {"sha": "c6b2aab49357a5700608ef690d3f1943dfb0ef70", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda1f7656126d203689c0b92ddb23b205cc8db0a/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda1f7656126d203689c0b92ddb23b205cc8db0a/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=cda1f7656126d203689c0b92ddb23b205cc8db0a", "patch": "@@ -1769,6 +1769,25 @@ move_insn (insn, last)\n {\n   rtx retval = NULL;\n \n+  /* If INSN has SCHED_GROUP_P set, then issue it and any other\n+     insns with SCHED_GROUP_P set first.  */\n+  while (SCHED_GROUP_P (insn))\n+    {\n+      rtx prev = PREV_INSN (insn);\n+      \n+      /* Move a SCHED_GROUP_P insn.  */\n+      move_insn1 (insn, last);\n+      /* If this is the first call to reemit_notes, then record\n+\t its return value.  */\n+      if (retval == NULL_RTX)\n+\tretval = reemit_notes (insn, insn);\n+      else\n+\treemit_notes (insn, insn);\n+      /* Consume SCHED_GROUP_P flag.  */\n+      SCHED_GROUP_P (insn) = 0;\n+      insn = prev;\n+    }\n+\n   /* Now move the first non SCHED_GROUP_P insn.  */\n   move_insn1 (insn, last);\n \n@@ -1779,8 +1798,6 @@ move_insn (insn, last)\n   else\n     reemit_notes (insn, insn);\n \n-  SCHED_GROUP_P (insn) = 0;\n-\n   return retval;\n }\n \n@@ -2376,7 +2393,8 @@ set_priorities (head, tail)\n       if (GET_CODE (insn) == NOTE)\n \tcontinue;\n \n-      n_insn++;\n+      if (! SCHED_GROUP_P (insn))\n+\tn_insn++;\n       (void) priority (insn);\n     }\n "}, {"sha": "d6fa2c821a61a85409031ae700205eaeb418db70", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 96, "deletions": 18, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda1f7656126d203689c0b92ddb23b205cc8db0a/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda1f7656126d203689c0b92ddb23b205cc8db0a/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=cda1f7656126d203689c0b92ddb23b205cc8db0a", "patch": "@@ -83,12 +83,14 @@ static sbitmap *forward_dependency_cache;\n static int deps_may_trap_p PARAMS ((rtx));\n static void add_dependence_list PARAMS ((rtx, rtx, enum reg_note));\n static void add_dependence_list_and_free PARAMS ((rtx, rtx *, enum reg_note));\n+static void remove_dependence PARAMS ((rtx, rtx));\n static void set_sched_group_p PARAMS ((rtx));\n \n static void flush_pending_lists PARAMS ((struct deps *, rtx, int, int));\n static void sched_analyze_1 PARAMS ((struct deps *, rtx, rtx));\n static void sched_analyze_2 PARAMS ((struct deps *, rtx, rtx));\n static void sched_analyze_insn PARAMS ((struct deps *, rtx, rtx, rtx));\n+static rtx group_leader PARAMS ((rtx));\n \n static rtx get_condition PARAMS ((rtx));\n static int conditions_mutex_p PARAMS ((rtx, rtx));\n@@ -235,13 +237,16 @@ add_dependence (insn, elem, dep_type)\n       rtx nnext;\n       while ((nnext = next_nonnote_insn (next)) != NULL\n \t     && INSN_P (nnext)\n-\t     && next != insn\n \t     && SCHED_GROUP_P (nnext))\n \tnext = nnext;\n \n-      if (insn != next)\n-\tadd_dependence (insn, next, REG_DEP_ANTI);\n+      /* Again, don't depend an insn on itself.  */\n+      if (insn == next)\n+\treturn;\n \n+      /* Make the dependence to NEXT, the last insn of the group,\n+\t instead of the original ELEM.  */\n+      elem = next;\n     }\n \n \n@@ -380,6 +385,76 @@ add_dependence_list_and_free (insn, listp, dep_type)\n     }\n }\n \n+/* Remove ELEM wrapped in an INSN_LIST from the LOG_LINKS\n+   of INSN.  Abort if not found.  */\n+\n+static void\n+remove_dependence (insn, elem)\n+     rtx insn;\n+     rtx elem;\n+{\n+  rtx prev, link, next;\n+  int found = 0;\n+\n+  for (prev = 0, link = LOG_LINKS (insn); link; link = next)\n+    {\n+      next = XEXP (link, 1);\n+      if (XEXP (link, 0) == elem)\n+\t{\n+\t  if (prev)\n+\t    XEXP (prev, 1) = next;\n+\t  else\n+\t    LOG_LINKS (insn) = next;\n+\n+#ifdef INSN_SCHEDULING\n+\t  /* If we are removing a dependency from the LOG_LINKS list,\n+\t     make sure to remove it from the cache too.  */\n+\t  if (true_dependency_cache != NULL)\n+\t    {\n+\t      if (REG_NOTE_KIND (link) == 0)\n+\t\tRESET_BIT (true_dependency_cache[INSN_LUID (insn)],\n+\t\t\t   INSN_LUID (elem));\n+\t      else if (REG_NOTE_KIND (link) == REG_DEP_ANTI)\n+\t\tRESET_BIT (anti_dependency_cache[INSN_LUID (insn)],\n+\t\t\t   INSN_LUID (elem));\n+\t      else if (REG_NOTE_KIND (link) == REG_DEP_OUTPUT)\n+\t\tRESET_BIT (output_dependency_cache[INSN_LUID (insn)],\n+\t\t\t   INSN_LUID (elem));\n+\t    }\n+#endif\n+\n+\t  free_INSN_LIST_node (link);\n+\n+\t  found = 1;\n+\t}\n+      else\n+\tprev = link;\n+    }\n+\n+  if (!found)\n+    abort ();\n+  return;\n+}\n+\n+/* Return an insn which represents a SCHED_GROUP, which is\n+   the last insn in the group.  */\n+\n+static rtx\n+group_leader (insn)\n+     rtx insn;\n+{\n+  rtx prev;\n+\n+  do\n+    {\n+      prev = insn;\n+      insn = next_nonnote_insn (insn);\n+    }\n+  while (insn && INSN_P (insn) && SCHED_GROUP_P (insn));\n+\n+  return prev;\n+}\n+\n /* Set SCHED_GROUP_P and care for the rest of the bookkeeping that\n    goes along with that.  */\n \n@@ -391,21 +466,22 @@ set_sched_group_p (insn)\n \n   SCHED_GROUP_P (insn) = 1;\n \n-  for (link = LOG_LINKS (insn); link; link = XEXP (link, 1))\n-    {\n-      prev = insn;\n-      do\n-\t{\n-\t  prev = prev_nonnote_insn (prev);\n-\t  if (XEXP (link, 0) == prev)\n-\t    break;\n-\t}\n-      while (SCHED_GROUP_P (prev));\n-      if (XEXP (link, 0) != prev)\n-\tadd_dependence (prev, XEXP (link, 0), REG_DEP_ANTI);\n-    }\n+  /* There may be a note before this insn now, but all notes will\n+     be removed before we actually try to schedule the insns, so\n+     it won't cause a problem later.  We must avoid it here\n+     though.  */\n   prev = prev_nonnote_insn (insn);\n-  add_dependence (insn, prev, REG_DEP_ANTI);\n+  \n+  /* Make a copy of all dependencies on the immediately previous\n+     insn, and add to this insn.  This is so that all the\n+     dependencies will apply to the group.  Remove an explicit\n+     dependence on this insn as SCHED_GROUP_P now represents it.  */\n+  \n+  if (find_insn_list (prev, LOG_LINKS (insn)))\n+    remove_dependence (insn, prev);\n+  \n+  for (link = LOG_LINKS (prev); link; link = XEXP (link, 1))\n+    add_dependence (insn, XEXP (link, 0), REG_NOTE_KIND (link));\n }\n \f\n /* Process an insn's memory dependencies.  There are four kinds of\n@@ -1370,9 +1446,11 @@ compute_forward_dependences (head, tail)\n       if (! INSN_P (insn))\n \tcontinue;\n \n+      insn = group_leader (insn);\n+      \n       for (link = LOG_LINKS (insn); link; link = XEXP (link, 1))\n \t{\n-\t  rtx x = XEXP (link, 0);\n+\t  rtx x = group_leader (XEXP (link, 0));\n \t  rtx new_link;\n \n \t  if (x != XEXP (link, 0))"}, {"sha": "59f7ac043294a6d5e69ea6528b3c8a262d55f4f1", "filename": "gcc/sched-ebb.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda1f7656126d203689c0b92ddb23b205cc8db0a/gcc%2Fsched-ebb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda1f7656126d203689c0b92ddb23b205cc8db0a/gcc%2Fsched-ebb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-ebb.c?ref=cda1f7656126d203689c0b92ddb23b205cc8db0a", "patch": "@@ -90,9 +90,16 @@ init_ready_list (ready)\n      Count number of insns in the target block being scheduled.  */\n   for (insn = NEXT_INSN (prev_head); insn != next_tail; insn = NEXT_INSN (insn))\n     {\n-      if (INSN_DEP_COUNT (insn) == 0)\n+      rtx next;\n+\n+      if (! INSN_P (insn))\n+\tcontinue;\n+      next = NEXT_INSN (insn);\n+\n+      if (INSN_DEP_COUNT (insn) == 0\n+\t  && (! INSN_P (next) || SCHED_GROUP_P (next) == 0))\n \tready_add (ready, insn);\n-      if (!(SCHED_GROUP_P (insn)))\n+      if (! SCHED_GROUP_P (insn))\n \ttarget_n_insns++;\n     }\n }"}, {"sha": "0bbe148a283323aef7e10774485eb98174c6643b", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 52, "deletions": 8, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda1f7656126d203689c0b92ddb23b205cc8db0a/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda1f7656126d203689c0b92ddb23b205cc8db0a/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=cda1f7656126d203689c0b92ddb23b205cc8db0a", "patch": "@@ -2023,9 +2023,17 @@ init_ready_list (ready)\n      Count number of insns in the target block being scheduled.  */\n   for (insn = NEXT_INSN (prev_head); insn != next_tail; insn = NEXT_INSN (insn))\n     {\n-      if (INSN_DEP_COUNT (insn) == 0)\n+      rtx next;\n+\n+      if (! INSN_P (insn))\n+\tcontinue;\n+      next = NEXT_INSN (insn);\n+\n+      if (INSN_DEP_COUNT (insn) == 0\n+\t  && (! INSN_P (next) || SCHED_GROUP_P (next) == 0))\n \tready_add (ready, insn);\n-      target_n_insns++;\n+      if (! SCHED_GROUP_P (insn))\n+\ttarget_n_insns++;\n     }\n \n   /* Add to ready list all 'ready' insns in valid source blocks.\n@@ -2059,8 +2067,19 @@ init_ready_list (ready)\n \t\t\t\t\t\t\t     insn, insn) <= 3)))\n \t\t\t&& check_live (insn, bb_src)\n \t\t\t&& is_exception_free (insn, bb_src, target_bb))))\n-\t      if (INSN_DEP_COUNT (insn) == 0)\n-\t\tready_add (ready, insn);\n+\t      {\n+\t\trtx next;\n+\n+\t\t/* Note that we haven't squirreled away the notes for\n+\t\t   blocks other than the current.  So if this is a\n+\t\t   speculative insn, NEXT might otherwise be a note.  */\n+\t\tnext = next_nonnote_insn (insn);\n+\t\tif (INSN_DEP_COUNT (insn) == 0\n+\t\t    && (! next\n+\t\t\t|| ! INSN_P (next)\n+\t\t\t|| SCHED_GROUP_P (next) == 0))\n+\t\t  ready_add (ready, insn);\n+\t      }\n \t  }\n       }\n }\n@@ -2078,6 +2097,7 @@ can_schedule_ready_p (insn)\n   /* An interblock motion?  */\n   if (INSN_BB (insn) != target_bb)\n     {\n+      rtx temp;\n       basic_block b1;\n \n       if (IS_SPECULATIVE_INSN (insn))\n@@ -2094,9 +2114,18 @@ can_schedule_ready_p (insn)\n \t}\n       nr_inter++;\n \n+      /* Find the beginning of the scheduling group.  */\n+      /* ??? Ought to update basic block here, but later bits of\n+\t schedule_block assumes the original insn block is\n+\t still intact.  */\n+\n+      temp = insn;\n+      while (SCHED_GROUP_P (temp))\n+\ttemp = PREV_INSN (temp);\n+\n       /* Update source block boundaries.  */\n-      b1 = BLOCK_FOR_INSN (insn);\n-      if (insn == b1->head && insn == b1->end)\n+      b1 = BLOCK_FOR_INSN (temp);\n+      if (temp == b1->head && temp == b1->end)\n \t{\n \t  /* We moved all the insns in the basic block.\n \t     Emit a note after the last insn and update the\n@@ -2110,9 +2139,9 @@ can_schedule_ready_p (insn)\n \t  /* We took insns from the end of the basic block,\n \t     so update the end of block boundary so that it\n \t     points to the first insn we did not move.  */\n-\t  b1->end = PREV_INSN (insn);\n+\t  b1->end = PREV_INSN (temp);\n \t}\n-      else if (insn == b1->head)\n+      else if (temp == b1->head)\n \t{\n \t  /* We took insns from the start of the basic block,\n \t     so update the start of block boundary so that\n@@ -2332,6 +2361,17 @@ add_branch_dependences (head, tail)\n \t  CANT_MOVE (insn) = 1;\n \n \t  last = insn;\n+\t  /* Skip over insns that are part of a group.\n+\t     Make each insn explicitly depend on the previous insn.\n+\t     This ensures that only the group header will ever enter\n+\t     the ready queue (and, when scheduled, will automatically\n+\t     schedule the SCHED_GROUP_P block).  */\n+\t  while (SCHED_GROUP_P (insn))\n+\t    {\n+\t      rtx temp = prev_nonnote_insn (insn);\n+\t      add_dependence (insn, temp, REG_DEP_ANTI);\n+\t      insn = temp;\n+\t    }\n \t}\n \n       /* Don't overrun the bounds of the basic block.  */\n@@ -2353,6 +2393,10 @@ add_branch_dependences (head, tail)\n \n \tadd_dependence (last, insn, REG_DEP_ANTI);\n \tINSN_REF_COUNT (insn) = 1;\n+\t\n+\t/* Skip over insns that are part of a group.  */\n+\twhile (SCHED_GROUP_P (insn))\n+\t  insn = prev_nonnote_insn (insn);\n       }\n }\n "}]}