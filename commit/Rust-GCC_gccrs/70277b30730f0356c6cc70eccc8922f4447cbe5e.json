{"sha": "70277b30730f0356c6cc70eccc8922f4447cbe5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAyNzdiMzA3MzBmMDM1NmM2Y2M3MGVjY2M4OTIyZjQ0NDdjYmU1ZQ==", "commit": {"author": {"name": "Daniel Gutson", "email": "dgutson@codesourcery.com", "date": "2009-10-08T15:14:41Z"}, "committer": {"name": "Daniel Gutson", "email": "dgutson@gcc.gnu.org", "date": "2009-10-08T15:14:41Z"}, "message": "argv.c (consume_whitespace): New function.\n\n2009-10-08  Daniel Gutson  <dgutson@codesourcery.com>\n        Daniel Jacobowitz  <dan@codesourcery.com>\n        Pedro Alves  <pedro@codesourcery.com>\n\n        libiberty/\n        * argv.c (consume_whitespace): New function.\n        (only_whitespace): New function.\n        (buildargv): Always use ISSPACE by calling consume_whitespace.\n        (expandargv): Skip empty files.  Do not stop at the first empty\n        argument (calling only_whitespace)..\n        * testsuite/test-expandargv.c: (test_data): Test empty lines\n        and empty arguments.\n        (run_tests): Fix false positives due to shorter arguments.\n\n\nCo-Authored-By: Daniel Jacobowitz <dan@codesourcery.com>\nCo-Authored-By: Pedro Alves <pedro@codesourcery.com>\n\nFrom-SVN: r152560", "tree": {"sha": "f496006babd0cc6d4ae1f11b988d6c0fc1307d4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f496006babd0cc6d4ae1f11b988d6c0fc1307d4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70277b30730f0356c6cc70eccc8922f4447cbe5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70277b30730f0356c6cc70eccc8922f4447cbe5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70277b30730f0356c6cc70eccc8922f4447cbe5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70277b30730f0356c6cc70eccc8922f4447cbe5e/comments", "author": null, "committer": null, "parents": [{"sha": "38bf8621d92a1a3129fc453f275ccbf7704eba19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38bf8621d92a1a3129fc453f275ccbf7704eba19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38bf8621d92a1a3129fc453f275ccbf7704eba19"}], "stats": {"total": 92, "additions": 80, "deletions": 12}, "files": [{"sha": "05e594e7cf0e9e4e5ddb220f8a7ee2b6c65bd2aa", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70277b30730f0356c6cc70eccc8922f4447cbe5e/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70277b30730f0356c6cc70eccc8922f4447cbe5e/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=70277b30730f0356c6cc70eccc8922f4447cbe5e", "patch": "@@ -1,3 +1,17 @@\n+2009-10-08  Daniel Gutson  <dgutson@codesourcery.com>\n+\tDaniel Jacobowitz  <dan@codesourcery.com>\n+\tPedro Alves  <pedro@codesourcery.com>\n+\n+\tlibiberty/\n+\t* argv.c (consume_whitespace): New function.\n+\t(only_whitespace): New function.\n+\t(buildargv): Always use ISSPACE by calling consume_whitespace.\n+\t(expandargv): Skip empty files.  Do not stop at the first empty\n+\targument (calling only_whitespace)..\n+\t* testsuite/test-expandargv.c: (test_data): Test empty lines\n+\tand empty arguments.\n+\t(run_tests): Fix false positives due to shorter arguments.\n+\n 2009-09-30  Martin Thuresson  <martint@google.com>\n \n \t* regex.c (byte_re_match_2_internal): Split declaration and"}, {"sha": "3084248b96cabd54c7606498cbaa5075873e6394", "filename": "libiberty/argv.c", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70277b30730f0356c6cc70eccc8922f4447cbe5e/libiberty%2Fargv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70277b30730f0356c6cc70eccc8922f4447cbe5e/libiberty%2Fargv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fargv.c?ref=70277b30730f0356c6cc70eccc8922f4447cbe5e", "patch": "@@ -119,6 +119,24 @@ void freeargv (char **vector)\n     }\n }\n \n+static void\n+consume_whitespace (const char **input)\n+{\n+  while (ISSPACE (**input))\n+    {\n+      (*input)++;\n+    }\n+}\n+\n+static int\n+only_whitespace (const char* input)\n+{\n+  while (*input != EOS && ISSPACE (*input))\n+    input++;\n+\n+  return (*input == EOS);\n+}\n+\n /*\n \n @deftypefn Extension char** buildargv (char *@var{sp})\n@@ -179,10 +197,8 @@ char **buildargv (const char *input)\n       do\n \t{\n \t  /* Pick off argv[argc] */\n-\t  while (ISBLANK (*input))\n-\t    {\n-\t      input++;\n-\t    }\n+\t  consume_whitespace (&input);\n+\n \t  if ((maxargc == 0) || (argc >= (maxargc - 1)))\n \t    {\n \t      /* argv needs initialization, or expansion */\n@@ -278,10 +294,7 @@ char **buildargv (const char *input)\n \t  argc++;\n \t  argv[argc] = NULL;\n \n-\t  while (ISSPACE (*input))\n-\t    {\n-\t      input++;\n-\t    }\n+\t  consume_whitespace (&input);\n \t}\n       while (*input != EOS);\n     }\n@@ -420,8 +433,17 @@ expandargv (int *argcp, char ***argvp)\n \tgoto error;\n       /* Add a NUL terminator.  */\n       buffer[len] = '\\0';\n-      /* Parse the string.  */\n-      file_argv = buildargv (buffer);\n+      /* If the file is empty or contains only whitespace, buildargv would\n+\t return a single empty argument.  In this context we want no arguments,\n+\t instead.  */\n+      if (only_whitespace (buffer))\n+\t{\n+\t  file_argv = (char **) xmalloc (sizeof (char *));\n+\t  file_argv[0] = NULL;\n+\t}\n+      else\n+\t/* Parse the string.  */\n+\tfile_argv = buildargv (buffer);\n       /* If *ARGVP is not already dynamically allocated, copy it.  */\n       if (!argv_dynamic)\n \t{\n@@ -434,7 +456,7 @@ expandargv (int *argcp, char ***argvp)\n \t}\n       /* Count the number of arguments.  */\n       file_argc = 0;\n-      while (file_argv[file_argc] && *file_argv[file_argc])\n+      while (file_argv[file_argc])\n \t++file_argc;\n       /* Now, insert FILE_ARGV into ARGV.  The \"+1\" below handles the\n \t NULL terminator at the end of ARGV.  */ "}, {"sha": "c16a0322a6c4b20ba77604f686e7cfd38a225d95", "filename": "libiberty/testsuite/test-expandargv.c", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70277b30730f0356c6cc70eccc8922f4447cbe5e/libiberty%2Ftestsuite%2Ftest-expandargv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70277b30730f0356c6cc70eccc8922f4447cbe5e/libiberty%2Ftestsuite%2Ftest-expandargv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Ftest-expandargv.c?ref=70277b30730f0356c6cc70eccc8922f4447cbe5e", "patch": "@@ -107,6 +107,38 @@ const char *test_data[] = {\n   ARGV0,\n   0,\n \n+  /* Test 4 - Check for options beginning with an empty line.  */\n+  \"\\na\\nb\",\t/* Test 4 data */\n+  ARGV0,\n+  \"@test-expandargv-4.lst\",\n+  0,\n+  ARGV0,\n+  \"a\",\n+  \"b\",\n+  0,\n+\n+  /* Test 5 - Check for options containing an empty argument.  */\n+  \"a\\n''\\nb\",    /* Test 5 data */\n+  ARGV0,\n+  \"@test-expandargv-5.lst\",\n+  0,\n+  ARGV0,\n+  \"a\",\n+  \"\",\n+  \"b\",\n+  0,\n+\n+  /* Test 6 - Check for options containing a quoted newline.  */\n+  \"a\\n'a\\n\\nb'\\nb\",    /* Test 6 data */\n+  ARGV0,\n+  \"@test-expandargv-6.lst\",\n+  0,\n+  ARGV0,\n+  \"a\",\n+  \"a\\n\\nb\",\n+  \"b\",\n+  0,\n+\n   0 /* Test done marker, don't remove. */\n };\n \n@@ -246,7 +278,7 @@ run_tests (const char **test_data)\n       /* Compare each of the argv's ... */\n       else\n         for (k = 0; k < argc_after; k++)\n-          if (strncmp (argv_before[k], argv_after[k], strlen(argv_after[k])) != 0)\n+          if (strcmp (argv_before[k], argv_after[k]) != 0)\n             {\n               printf (\"FAIL: test-expandargv-%d. Arguments don't match.\\n\", i);\n               failed++;"}]}