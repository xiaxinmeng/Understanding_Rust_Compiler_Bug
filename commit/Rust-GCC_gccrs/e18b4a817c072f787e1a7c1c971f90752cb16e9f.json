{"sha": "e18b4a817c072f787e1a7c1c971f90752cb16e9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE4YjRhODE3YzA3MmY3ODdlMWE3YzFjOTcxZjkwNzUyY2IxNmU5Zg==", "commit": {"author": {"name": "Yufeng Zhang", "email": "yufeng.zhang@arm.com", "date": "2013-06-27T12:32:07Z"}, "committer": {"name": "Yufeng Zhang", "email": "yufeng@gcc.gnu.org", "date": "2013-06-27T12:32:07Z"}, "message": "aarch64.c (aarch64_force_temporary): Add an extra parameter 'mode' of type 'enum machine_mode mode'...\n\ngcc/\n\n\t* config/aarch64/aarch64.c (aarch64_force_temporary): Add an extra\n\tparameter 'mode' of type 'enum machine_mode mode'; change to pass\n\t'mode' to force_reg.\n\t(aarch64_add_offset): Update calls to aarch64_force_temporary.\n\t(aarch64_expand_mov_immediate): Likewise.\n\nFrom-SVN: r200467", "tree": {"sha": "3c60dab0879b320eb416cc06adc9e2d898dd3462", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c60dab0879b320eb416cc06adc9e2d898dd3462"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e18b4a817c072f787e1a7c1c971f90752cb16e9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e18b4a817c072f787e1a7c1c971f90752cb16e9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e18b4a817c072f787e1a7c1c971f90752cb16e9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e18b4a817c072f787e1a7c1c971f90752cb16e9f/comments", "author": null, "committer": null, "parents": [{"sha": "9c023bf0bdfdcf26de6013f2a3692ac32511aa3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c023bf0bdfdcf26de6013f2a3692ac32511aa3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c023bf0bdfdcf26de6013f2a3692ac32511aa3e"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "4a8023bf960d2da81d6d66a15b31a92e645ca7e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18b4a817c072f787e1a7c1c971f90752cb16e9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18b4a817c072f787e1a7c1c971f90752cb16e9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e18b4a817c072f787e1a7c1c971f90752cb16e9f", "patch": "@@ -1,3 +1,11 @@\n+2013-06-27  Yufeng Zhang  <yufeng.zhang@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_force_temporary): Add an extra\n+\tparameter 'mode' of type 'enum machine_mode mode'; change to pass\n+\t'mode' to force_reg.\n+\t(aarch64_add_offset): Update calls to aarch64_force_temporary.\n+\t(aarch64_expand_mov_immediate): Likewise.\n+\n 2013-06-27  Yufeng Zhang  <yufeng.zhang@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_add_offset): Change to pass"}, {"sha": "77591c114efbd57e3659811c10840213e9e39afe", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18b4a817c072f787e1a7c1c971f90752cb16e9f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18b4a817c072f787e1a7c1c971f90752cb16e9f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=e18b4a817c072f787e1a7c1c971f90752cb16e9f", "patch": "@@ -789,10 +789,10 @@ aarch64_split_simd_move (rtx dst, rtx src)\n }\n \n static rtx\n-aarch64_force_temporary (rtx x, rtx value)\n+aarch64_force_temporary (enum machine_mode mode, rtx x, rtx value)\n {\n   if (can_create_pseudo_p ())\n-    return force_reg (Pmode, value);\n+    return force_reg (mode, value);\n   else\n     {\n       x = aarch64_emit_move (x, value);\n@@ -811,8 +811,9 @@ aarch64_add_offset (enum machine_mode mode, rtx temp, rtx reg, HOST_WIDE_INT off\n          might be improvable in the future.  */\n       high = GEN_INT (offset);\n       offset = 0;\n-      high = aarch64_force_temporary (temp, high);\n-      reg = aarch64_force_temporary (temp, gen_rtx_PLUS (mode, high, reg));\n+      high = aarch64_force_temporary (mode, temp, high);\n+      reg = aarch64_force_temporary (mode, temp,\n+\t\t\t\t     gen_rtx_PLUS (mode, high, reg));\n     }\n   return plus_constant (mode, reg, offset);\n }\n@@ -851,7 +852,7 @@ aarch64_expand_mov_immediate (rtx dest, rtx imm)\n \t      && targetm.cannot_force_const_mem (mode, imm))\n \t    {\n \t      gcc_assert(can_create_pseudo_p ());\n-\t      base = aarch64_force_temporary (dest, base);\n+\t      base = aarch64_force_temporary (mode, dest, base);\n \t      base = aarch64_add_offset (mode, NULL, base, INTVAL (offset));\n \t      aarch64_emit_move (dest, base);\n \t      return;\n@@ -868,7 +869,7 @@ aarch64_expand_mov_immediate (rtx dest, rtx imm)\n \t  if (offset != const0_rtx)\n \t    {\n \t      gcc_assert(can_create_pseudo_p ());\n-\t      base = aarch64_force_temporary (dest, base);\n+\t      base = aarch64_force_temporary (mode, dest, base);\n \t      base = aarch64_add_offset (mode, NULL, base, INTVAL (offset));\n \t      aarch64_emit_move (dest, base);\n \t      return;"}]}