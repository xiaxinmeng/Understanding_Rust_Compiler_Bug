{"sha": "7ba03e5e3f37374e30fc67e059f5eb46364c0474", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JhMDNlNWUzZjM3Mzc0ZTMwZmM2N2UwNTlmNWViNDYzNjRjMDQ3NA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2014-02-07T17:29:26Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2014-02-07T17:29:26Z"}, "message": "* ipa-inline.c (inline_small_functions): Fix typos.\n\nFrom-SVN: r207608", "tree": {"sha": "1e004f7c1b7e5d06ac0ee2672c43dd8a9a6a2f4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e004f7c1b7e5d06ac0ee2672c43dd8a9a6a2f4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ba03e5e3f37374e30fc67e059f5eb46364c0474", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ba03e5e3f37374e30fc67e059f5eb46364c0474", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ba03e5e3f37374e30fc67e059f5eb46364c0474", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ba03e5e3f37374e30fc67e059f5eb46364c0474/comments", "author": null, "committer": null, "parents": [{"sha": "acf601aefd44b7c2615c78408b32e862212d34ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf601aefd44b7c2615c78408b32e862212d34ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acf601aefd44b7c2615c78408b32e862212d34ef"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "ce9c066a2a1b4c6d0e87f7132b02793c3d424c5a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba03e5e3f37374e30fc67e059f5eb46364c0474/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba03e5e3f37374e30fc67e059f5eb46364c0474/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ba03e5e3f37374e30fc67e059f5eb46364c0474", "patch": "@@ -1,3 +1,7 @@\n+2014-02-07  Jeff Law  <law@redhat.com>\n+\n+\t* ipa-inline.c (inline_small_functions): Fix typos.\n+\n 2014-02-07  Richard Sandiford  <rsandifo@linux.vnet.ibm.com>\n \n \t* config/s390/s390-protos.h (s390_can_use_simple_return_insn)"}, {"sha": "d304133bfe4745084238b1bc4cd9ab449a3d3a96", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba03e5e3f37374e30fc67e059f5eb46364c0474/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba03e5e3f37374e30fc67e059f5eb46364c0474/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=7ba03e5e3f37374e30fc67e059f5eb46364c0474", "patch": "@@ -1749,9 +1749,9 @@ inline_small_functions (void)\n \t  continue;\n \t}\n \n-      /* Heuristics for inlining small functions works poorly for\n-\t recursive calls where we do efect similar to loop unrolling.\n-\t When inliing such edge seems profitable, leave decision on\n+      /* Heuristics for inlining small functions work poorly for\n+\t recursive calls where we do effects similar to loop unrolling.\n+\t When inlining such edge seems profitable, leave decision on\n \t specific inliner.  */\n       if (cgraph_edge_recursive_p (edge))\n \t{\n@@ -1779,10 +1779,11 @@ inline_small_functions (void)\n \t  struct cgraph_node *outer_node = NULL;\n \t  int depth = 0;\n \n-\t  /* Consider the case where self recursive function A is inlined into B.\n-\t     This is desired optimization in some cases, since it leads to effect\n-\t     similar of loop peeling and we might completely optimize out the\n-\t     recursive call.  However we must be extra selective.  */\n+\t  /* Consider the case where self recursive function A is inlined\n+\t     into B.  This is desired optimization in some cases, since it\n+\t     leads to effect similar of loop peeling and we might completely\n+\t     optimize out the recursive call.  However we must be extra\n+\t     selective.  */\n \n \t  where = edge->caller;\n \t  while (where->global.inlined_to)"}]}