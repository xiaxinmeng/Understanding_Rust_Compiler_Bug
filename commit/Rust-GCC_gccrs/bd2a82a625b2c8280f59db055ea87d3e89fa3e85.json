{"sha": "bd2a82a625b2c8280f59db055ea87d3e89fa3e85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQyYTgyYTYyNWIyYzgyODBmNTlkYjA1NWVhODdkM2U4OWZhM2U4NQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1997-11-19T18:42:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-11-19T18:42:13Z"}, "message": "decl.c (make_implicit_typename): New fn.\n\n\t* decl.c (make_implicit_typename): New fn.\n\t(lookup_name_real): Use it.  Use current_class_type as the context.\n\nFrom-SVN: r16581", "tree": {"sha": "a206551334e97bd16b6ba21d96713be07d69a0ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a206551334e97bd16b6ba21d96713be07d69a0ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd2a82a625b2c8280f59db055ea87d3e89fa3e85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd2a82a625b2c8280f59db055ea87d3e89fa3e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd2a82a625b2c8280f59db055ea87d3e89fa3e85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd2a82a625b2c8280f59db055ea87d3e89fa3e85/comments", "author": null, "committer": null, "parents": [{"sha": "8d31729fce13f203ed45c83aef334aa90bff93ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d31729fce13f203ed45c83aef334aa90bff93ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d31729fce13f203ed45c83aef334aa90bff93ec"}], "stats": {"total": 46, "additions": 41, "deletions": 5}, "files": [{"sha": "efdf9a769e62ddb4e577e4660ae218c10e207ab1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2a82a625b2c8280f59db055ea87d3e89fa3e85/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2a82a625b2c8280f59db055ea87d3e89fa3e85/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bd2a82a625b2c8280f59db055ea87d3e89fa3e85", "patch": "@@ -1,3 +1,8 @@\n+Wed Nov 19 10:39:27 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (make_implicit_typename): New fn.\n+\t(lookup_name_real): Use it.  Use current_class_type as the context.\n+\n Mon Nov 17 23:42:03 1997  Bruno Haible <haible@ilog.fr>\n \n \t* pt.c (do_poplevel): Don't prohibit jumps into this contour."}, {"sha": "e0158162e9dce01d6b7091b80a2d3fa2e49b23a4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2a82a625b2c8280f59db055ea87d3e89fa3e85/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2a82a625b2c8280f59db055ea87d3e89fa3e85/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=bd2a82a625b2c8280f59db055ea87d3e89fa3e85", "patch": "@@ -4372,6 +4372,40 @@ make_typename_type (context, name)\n   return t;\n }\n \n+/* Given a TYPE_DECL T looked up in CONTEXT, return a TYPENAME_TYPE\n+   where the scope is either CONTEXT or the first base of CONTEXT along the\n+   inheritance chain to T that depends on template parameters.\n+\n+   Called from lookup_name_real to implement the implicit typename\n+   extension.  */\n+\n+static tree\n+make_implicit_typename (context, t)\n+     tree context, t;\n+{\n+  tree retval;\n+\n+  if (uses_template_parms (DECL_CONTEXT (t))\n+      && DECL_CONTEXT (t) != context)\n+    {\n+      tree binfo = get_binfo (DECL_CONTEXT (t), context, 0);\n+      for (;;)\n+\t{\n+\t  tree next = BINFO_INHERITANCE_CHAIN (binfo);\n+\t  if (! uses_template_parms (BINFO_TYPE (next))\n+\t      || BINFO_TYPE (next) == context)\n+\t    break;\n+\t  binfo = next;\n+\t}\n+      retval = make_typename_type (BINFO_TYPE (binfo), DECL_NAME (t));\n+    }\n+  else\n+    retval = make_typename_type (context, DECL_NAME (t));\n+  \n+  TREE_TYPE (retval) = TREE_TYPE (t);\n+  return retval;\n+}\n+\n /* Look up NAME in the current binding level and its superiors in the\n    namespace of variables, functions and typedefs.  Return a ..._DECL\n    node of some kind representing its definition if there is only one\n@@ -4464,8 +4498,7 @@ lookup_name_real (name, prefer_type, nonclass)\n \t  && val && TREE_CODE (val) == TYPE_DECL\n \t  && ! DECL_ARTIFICIAL (val))\n \t{\n-\t  tree t = make_typename_type (got_scope, DECL_NAME (val));\n-\t  TREE_TYPE (t) = TREE_TYPE (val);\n+\t  tree t = make_implicit_typename (got_scope, val);\n \t  val = TYPE_MAIN_DECL (t);\n \t}\n \n@@ -4505,9 +4538,7 @@ lookup_name_real (name, prefer_type, nonclass)\n \t  && uses_template_parms (DECL_CONTEXT (classval))\n \t  && ! DECL_ARTIFICIAL (classval))\n \t{\n-\t  tree t = make_typename_type (DECL_CONTEXT (classval),\n-\t\t\t\t       DECL_NAME (classval));\n-\t  TREE_TYPE (t) = TREE_TYPE (classval);\n+\t  tree t = make_implicit_typename (current_class_type, classval);\n \t  classval = TYPE_MAIN_DECL (t);\n \t}\n     }"}]}