{"sha": "732a0ad314ba1603b9fd07199dd83518ed54ad4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMyYTBhZDMxNGJhMTYwM2I5ZmQwNzE5OWRkODM1MThlZDU0YWQ0ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-10-30T12:16:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-10-30T12:16:01Z"}, "message": "tree-vectorizer.h (NUM_PATTERNS): Bump to 9.\n\n\t* tree-vectorizer.h (NUM_PATTERNS): Bump to 9.\n\t* tree-vect-patterns.c (vect_recog_vector_vector_shift_pattern): New\n\tfunction.\n\t(vect_vect_recog_func_ptrs): Add it.\n\nFrom-SVN: r180677", "tree": {"sha": "e37547382182a42f825c3f63391880a72efe34ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e37547382182a42f825c3f63391880a72efe34ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/732a0ad314ba1603b9fd07199dd83518ed54ad4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/732a0ad314ba1603b9fd07199dd83518ed54ad4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/732a0ad314ba1603b9fd07199dd83518ed54ad4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/732a0ad314ba1603b9fd07199dd83518ed54ad4d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "be7552fc7d7a4392a2de43312f3e569207429c3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be7552fc7d7a4392a2de43312f3e569207429c3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be7552fc7d7a4392a2de43312f3e569207429c3c"}], "stats": {"total": 139, "additions": 138, "deletions": 1}, "files": [{"sha": "c089100b68924f70dc40813334699d759d5cddd4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/732a0ad314ba1603b9fd07199dd83518ed54ad4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/732a0ad314ba1603b9fd07199dd83518ed54ad4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=732a0ad314ba1603b9fd07199dd83518ed54ad4d", "patch": "@@ -1,3 +1,10 @@\n+2011-10-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-vectorizer.h (NUM_PATTERNS): Bump to 9.\n+\t* tree-vect-patterns.c (vect_recog_vector_vector_shift_pattern): New\n+\tfunction.\n+\t(vect_vect_recog_func_ptrs): Add it.\n+\n 2011-10-30  David S. Miller  <davem@davemloft.net>\n \n \t* reorg.c (label_before_next_insn): New function."}, {"sha": "19b75e9e465524ff50430c28479a9cf7f01e84b1", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/732a0ad314ba1603b9fd07199dd83518ed54ad4d/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/732a0ad314ba1603b9fd07199dd83518ed54ad4d/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=732a0ad314ba1603b9fd07199dd83518ed54ad4d", "patch": "@@ -51,6 +51,8 @@ static gimple vect_recog_over_widening_pattern (VEC (gimple, heap) **, tree *,\n                                                  tree *);\n static gimple vect_recog_widen_shift_pattern (VEC (gimple, heap) **,\n \t                                tree *, tree *);\n+static gimple vect_recog_vector_vector_shift_pattern (VEC (gimple, heap) **,\n+\t\t\t\t\t\t      tree *, tree *);\n static gimple vect_recog_mixed_size_cond_pattern (VEC (gimple, heap) **,\n \t\t\t\t\t\t  tree *, tree *);\n static gimple vect_recog_bool_pattern (VEC (gimple, heap) **, tree *, tree *);\n@@ -61,6 +63,7 @@ static vect_recog_func_ptr vect_vect_recog_func_ptrs[NUM_PATTERNS] = {\n \tvect_recog_pow_pattern,\n \tvect_recog_over_widening_pattern,\n \tvect_recog_widen_shift_pattern,\n+\tvect_recog_vector_vector_shift_pattern,\n \tvect_recog_mixed_size_cond_pattern,\n \tvect_recog_bool_pattern};\n \n@@ -1439,6 +1442,133 @@ vect_recog_widen_shift_pattern (VEC (gimple, heap) **stmts,\n   return pattern_stmt;\n }\n \n+/* Detect a vector by vector shift pattern that wouldn't be otherwise\n+   vectorized:\n+\n+   type a_t;\n+   TYPE b_T, res_T;\n+\n+   S1 a_t = ;\n+   S2 b_T = ;\n+   S3 res_T = b_T op a_t;\n+\n+  where type 'TYPE' is a type with different size than 'type',\n+  and op is <<, >> or rotate.\n+\n+  Also detect cases:\n+\n+   type a_t;\n+   TYPE b_T, c_T, res_T;\n+\n+   S0 c_T = ;\n+   S1 a_t = (type) c_T;\n+   S2 b_T = ;\n+   S3 res_T = b_T op a_t;\n+\n+  Input/Output:\n+\n+  * STMTS: Contains a stmt from which the pattern search begins,\n+    i.e. the shift/rotate stmt.  The original stmt (S3) is replaced\n+    with a shift/rotate which has same type on both operands, in the\n+    second case just b_T op c_T, in the first case with added cast\n+    from a_t to c_T in STMT_VINFO_PATTERN_DEF_STMT.\n+\n+  Output:\n+\n+  * TYPE_IN: The type of the input arguments to the pattern.\n+\n+  * TYPE_OUT: The type of the output of this pattern.\n+\n+  * Return value: A new stmt that will be used to replace the shift/rotate\n+    S3 stmt.  */\n+\n+static gimple\n+vect_recog_vector_vector_shift_pattern (VEC (gimple, heap) **stmts,\n+\t\t\t\t\ttree *type_in, tree *type_out)\n+{\n+  gimple last_stmt = VEC_pop (gimple, *stmts);\n+  tree oprnd0, oprnd1, lhs, var;\n+  gimple pattern_stmt, def_stmt;\n+  enum tree_code rhs_code;\n+  stmt_vec_info stmt_vinfo = vinfo_for_stmt (last_stmt);\n+  loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_vinfo);\n+  enum vect_def_type dt;\n+  tree def;\n+\n+  if (!is_gimple_assign (last_stmt))\n+    return NULL;\n+\n+  rhs_code = gimple_assign_rhs_code (last_stmt);\n+  switch (rhs_code)\n+    {\n+    case LSHIFT_EXPR:\n+    case RSHIFT_EXPR:\n+    case LROTATE_EXPR:\n+    case RROTATE_EXPR:\n+      break;\n+    default:\n+      return NULL;\n+    }\n+\n+  if (STMT_VINFO_IN_PATTERN_P (stmt_vinfo))\n+    return NULL;\n+\n+  lhs = gimple_assign_lhs (last_stmt);\n+  oprnd0 = gimple_assign_rhs1 (last_stmt);\n+  oprnd1 = gimple_assign_rhs2 (last_stmt);\n+  if (TREE_CODE (oprnd0) != SSA_NAME\n+      || TREE_CODE (oprnd1) != SSA_NAME\n+      || TYPE_MODE (TREE_TYPE (oprnd0)) == TYPE_MODE (TREE_TYPE (oprnd1))\n+      || TYPE_PRECISION (TREE_TYPE (oprnd1))\n+\t != GET_MODE_PRECISION (TYPE_MODE (TREE_TYPE (oprnd1)))\n+      || TYPE_PRECISION (TREE_TYPE (lhs))\n+\t != TYPE_PRECISION (TREE_TYPE (oprnd0)))\n+    return NULL;\n+\n+  if (!vect_is_simple_use (oprnd1, loop_vinfo, NULL, &def_stmt, &def, &dt))\n+    return NULL;\n+\n+  if (dt != vect_internal_def)\n+    return NULL;\n+\n+  *type_in = get_vectype_for_scalar_type (TREE_TYPE (oprnd0));\n+  *type_out = *type_in;\n+  if (*type_in == NULL_TREE)\n+    return NULL;\n+\n+  def = NULL_TREE;\n+  if (gimple_assign_cast_p (def_stmt))\n+    {\n+      tree rhs1 = gimple_assign_rhs1 (def_stmt);\n+      if (TYPE_MODE (TREE_TYPE (rhs1)) == TYPE_MODE (TREE_TYPE (oprnd0))\n+\t  && TYPE_PRECISION (TREE_TYPE (rhs1))\n+\t     == TYPE_PRECISION (TREE_TYPE (oprnd0)))\n+\tdef = rhs1;\n+    }\n+\n+  if (def == NULL_TREE)\n+    {\n+      def = vect_recog_temp_ssa_var (TREE_TYPE (oprnd0), NULL);\n+      def_stmt = gimple_build_assign_with_ops (NOP_EXPR, def, oprnd1,\n+\t\t\t\t\t       NULL_TREE);\n+      STMT_VINFO_PATTERN_DEF_STMT (stmt_vinfo) = def_stmt;\n+    }\n+\n+  /* Pattern detected.  */\n+  if (vect_print_dump_info (REPORT_DETAILS))\n+    fprintf (vect_dump, \"vect_recog_vector_vector_shift_pattern: detected: \");\n+\n+  /* Pattern supported.  Create a stmt to be used to replace the pattern.  */\n+  var = vect_recog_temp_ssa_var (TREE_TYPE (oprnd0), NULL);\n+  pattern_stmt = gimple_build_assign_with_ops (rhs_code, var, oprnd0, def);\n+\n+  if (vect_print_dump_info (REPORT_DETAILS))\n+    print_gimple_stmt (vect_dump, pattern_stmt, 0, TDF_SLIM);\n+\n+  VEC_safe_push (gimple, heap, *stmts, last_stmt);\n+  return pattern_stmt;\n+}\n+\n /* Function vect_recog_mixed_size_cond_pattern\n \n    Try to find the following pattern:"}, {"sha": "6703edb5ee0ccae67f1999ad066e19878428264f", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/732a0ad314ba1603b9fd07199dd83518ed54ad4d/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/732a0ad314ba1603b9fd07199dd83518ed54ad4d/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=732a0ad314ba1603b9fd07199dd83518ed54ad4d", "patch": "@@ -902,7 +902,7 @@ extern void vect_slp_transform_bb (basic_block);\n    Additional pattern recognition functions can (and will) be added\n    in the future.  */\n typedef gimple (* vect_recog_func_ptr) (VEC (gimple, heap) **, tree *, tree *);\n-#define NUM_PATTERNS 8\n+#define NUM_PATTERNS 9\n void vect_pattern_recog (loop_vec_info);\n \n /* In tree-vectorizer.c.  */"}]}