{"sha": "451409e49392d89ab11861b47efab968c558b5f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUxNDA5ZTQ5MzkyZDg5YWIxMTg2MWI0N2VmYWI5NjhjNTU4YjVmMQ==", "commit": {"author": {"name": "David Binderman", "email": "dcb314@hotmail.com", "date": "2009-11-07T20:51:14Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-11-07T20:51:14Z"}, "message": "builtins.c (apply_args_size, [...]): Remove some set but not used variables.\n\n2009-11-07  David Binderman <dcb314@hotmail.com>\n\n\t* builtins.c (apply_args_size, expand_builtin_mathfn, expand_powi,\n\texpand_builtin_expect, maybe_emit_sprintf_chk_warning): Remove some\n\tset but not used variables.\n\t* calls.c (flags_from_decl_or_type): Likewise.\n\t* genautomata.c (check_regexp_units_distribution): Likewise.\n\nFrom-SVN: r154001", "tree": {"sha": "07da1dd6026189443a185a7f6c35b6b3b9a63907", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07da1dd6026189443a185a7f6c35b6b3b9a63907"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/451409e49392d89ab11861b47efab968c558b5f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/451409e49392d89ab11861b47efab968c558b5f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/451409e49392d89ab11861b47efab968c558b5f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/451409e49392d89ab11861b47efab968c558b5f1/comments", "author": {"login": "dcb314", "id": 4262901, "node_id": "MDQ6VXNlcjQyNjI5MDE=", "avatar_url": "https://avatars.githubusercontent.com/u/4262901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcb314", "html_url": "https://github.com/dcb314", "followers_url": "https://api.github.com/users/dcb314/followers", "following_url": "https://api.github.com/users/dcb314/following{/other_user}", "gists_url": "https://api.github.com/users/dcb314/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcb314/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcb314/subscriptions", "organizations_url": "https://api.github.com/users/dcb314/orgs", "repos_url": "https://api.github.com/users/dcb314/repos", "events_url": "https://api.github.com/users/dcb314/events{/privacy}", "received_events_url": "https://api.github.com/users/dcb314/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a4217d39b03ff98ed04a323fcb0118580772511", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a4217d39b03ff98ed04a323fcb0118580772511", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a4217d39b03ff98ed04a323fcb0118580772511"}], "stats": {"total": 32, "additions": 13, "deletions": 19}, "files": [{"sha": "ce0f876f552c4d38f2ace99de5229e3eb5e0d381", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451409e49392d89ab11861b47efab968c558b5f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451409e49392d89ab11861b47efab968c558b5f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=451409e49392d89ab11861b47efab968c558b5f1", "patch": "@@ -1,3 +1,11 @@\n+2009-11-07  David Binderman <dcb314@hotmail.com>\n+\n+\t* builtins.c (apply_args_size, expand_builtin_mathfn, expand_powi,\n+\texpand_builtin_expect, maybe_emit_sprintf_chk_warning): Remove some\n+\tset but not used variables.\n+\t* calls.c (flags_from_decl_or_type): Likewise.\n+\t* genautomata.c (check_regexp_units_distribution): Likewise.\n+\n 2009-11-07  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sse.md (xop_pmacsww, xop_pmacssww, xop_pmacsdd,"}, {"sha": "ec12512c8f74c1c0f76ac782583d67db5b9d5c4b", "filename": "gcc/builtins.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451409e49392d89ab11861b47efab968c558b5f1/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451409e49392d89ab11861b47efab968c558b5f1/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=451409e49392d89ab11861b47efab968c558b5f1", "patch": "@@ -1263,7 +1263,7 @@ static enum machine_mode apply_result_mode[FIRST_PSEUDO_REGISTER];\n    gives the offset of that register into the block returned by\n    __builtin_apply_args.  0 indicates that the register is not\n    used for calling a function.  */\n-static int apply_args_reg_offset[FIRST_PSEUDO_REGISTER];\n+/* static int apply_args_reg_offset[FIRST_PSEUDO_REGISTER]; not used */\n \n /* Return the size required for the block returned by __builtin_apply_args,\n    and initialize apply_args_mode.  */\n@@ -1297,14 +1297,12 @@ apply_args_size (void)\n \t    align = GET_MODE_ALIGNMENT (mode) / BITS_PER_UNIT;\n \t    if (size % align != 0)\n \t      size = CEIL (size, align) * align;\n-\t    apply_args_reg_offset[regno] = size;\n \t    size += GET_MODE_SIZE (mode);\n \t    apply_args_mode[regno] = mode;\n \t  }\n \telse\n \t  {\n \t    apply_args_mode[regno] = VOIDmode;\n-\t    apply_args_reg_offset[regno] = 0;\n \t  }\n     }\n   return size;\n@@ -1924,7 +1922,7 @@ static rtx\n expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n {\n   optab builtin_optab;\n-  rtx op0, insns, before_call;\n+  rtx op0, insns;\n   tree fndecl = get_callee_fndecl (exp);\n   enum machine_mode mode;\n   bool errno_set = false;\n@@ -2031,8 +2029,6 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n       end_sequence ();\n     }\n \n-  before_call = get_last_insn ();\n-\n   return expand_call (exp, target, target == const0_rtx);\n }\n \n@@ -2903,15 +2899,12 @@ expand_powi_1 (enum machine_mode mode, unsigned HOST_WIDE_INT n, rtx *cache)\n static rtx\n expand_powi (rtx x, enum machine_mode mode, HOST_WIDE_INT n)\n {\n-  unsigned HOST_WIDE_INT val;\n   rtx cache[POWI_TABLE_SIZE];\n   rtx result;\n \n   if (n == 0)\n     return CONST1_RTX (mode);\n \n-  val = (n < 0) ? -n : n;\n-\n   memset (cache, 0, sizeof (cache));\n   cache[1] = x;\n \n@@ -4893,12 +4886,11 @@ expand_builtin_unop (enum machine_mode target_mode, tree exp, rtx target,\n static rtx\n expand_builtin_expect (tree exp, rtx target)\n {\n-  tree arg, c;\n+  tree arg;\n \n   if (call_expr_nargs (exp) < 2)\n     return const0_rtx;\n   arg = CALL_EXPR_ARG (exp, 0);\n-  c = CALL_EXPR_ARG (exp, 1);\n \n   target = expand_expr (arg, target, VOIDmode, EXPAND_NORMAL);\n   /* When guessing was done, the hints should be already stripped away.  */\n@@ -12140,16 +12132,14 @@ maybe_emit_chk_warning (tree exp, enum built_in_function fcode)\n static void\n maybe_emit_sprintf_chk_warning (tree exp, enum built_in_function fcode)\n {\n-  tree dest, size, len, fmt, flag;\n+  tree size, len, fmt;\n   const char *fmt_str;\n   int nargs = call_expr_nargs (exp);\n \n   /* Verify the required arguments in the original call.  */\n   \n   if (nargs < 4)\n     return;\n-  dest = CALL_EXPR_ARG (exp, 0);\n-  flag = CALL_EXPR_ARG (exp, 1);\n   size = CALL_EXPR_ARG (exp, 2);\n   fmt = CALL_EXPR_ARG (exp, 3);\n "}, {"sha": "5528ab9fbeb0b71e39b68ffd7b028c2320171189", "filename": "gcc/calls.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451409e49392d89ab11861b47efab968c558b5f1/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451409e49392d89ab11861b47efab968c558b5f1/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=451409e49392d89ab11861b47efab968c558b5f1", "patch": "@@ -589,12 +589,9 @@ int\n flags_from_decl_or_type (const_tree exp)\n {\n   int flags = 0;\n-  const_tree type = exp;\n \n   if (DECL_P (exp))\n     {\n-      type = TREE_TYPE (exp);\n-\n       /* The function exp may have the `malloc' attribute.  */\n       if (DECL_IS_MALLOC (exp))\n \tflags |= ECF_MALLOC;"}, {"sha": "77dea231ed548f4f6261c7d2ded90a8f6f4efcc8", "filename": "gcc/genautomata.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451409e49392d89ab11861b47efab968c558b5f1/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451409e49392d89ab11861b47efab968c558b5f1/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=451409e49392d89ab11861b47efab968c558b5f1", "patch": "@@ -5045,7 +5045,7 @@ static void\n check_regexp_units_distribution (const char *insn_reserv_name,\n \t\t\t\t regexp_t regexp)\n {\n-  int i, j, k, cycle, cycle2, start, n_alts, alt, alt2;\n+  int i, j, k, cycle, start, n_alts, alt, alt2;\n   bool annotation_reservation_message_reported_p;\n   regexp_t seq, allof, unit;\n   struct unit_usage *unit_usage_ptr;\n@@ -5164,7 +5164,6 @@ check_regexp_units_distribution (const char *insn_reserv_name,\n \t\t   j < (int) VEC_length (unit_usage_t, cycle_alt_unit_usages);\n \t\t   j++)\n \t\t{\n-\t\t  cycle2 = j / n_alts;\n \t\t  alt2 = j % n_alts;\n \t\t  if (! unit_present_on_list_p\n \t\t        (VEC_index (unit_usage_t, cycle_alt_unit_usages,"}]}