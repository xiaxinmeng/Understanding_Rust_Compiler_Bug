{"sha": "2221fb6f668a7edc8b8aad69772907aeabbbb0be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIyMWZiNmY2NjhhN2VkYzhiOGFhZDY5NzcyOTA3YWVhYmJiYjBiZQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2020-05-17T21:50:41Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2020-05-22T19:02:34Z"}, "message": "analyzer: Add exit, and _exit replacement, to sm-signal.\n\nWarn about using exit in signal handler and suggest _exit as alternative.\n\ngcc/analyzer/ChangeLog:\n\n\t* sm-signal.cc(signal_unsafe_call::emit): Possibly add\n\tgcc_rich_location note for replacement.\n\t(signal_unsafe_call::get_replacement_fn): New private function.\n\t(get_async_signal_unsafe_fns): Add \"exit\".\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/analyzer/signal-exit.c: New testcase.", "tree": {"sha": "c04cf71d53e1f9980c4b2cce159a2c752fd607ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c04cf71d53e1f9980c4b2cce159a2c752fd607ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2221fb6f668a7edc8b8aad69772907aeabbbb0be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2221fb6f668a7edc8b8aad69772907aeabbbb0be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2221fb6f668a7edc8b8aad69772907aeabbbb0be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2221fb6f668a7edc8b8aad69772907aeabbbb0be/comments", "author": null, "committer": null, "parents": [{"sha": "dc50686d78d4679b727548c3edc1cb6b0d3b658e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc50686d78d4679b727548c3edc1cb6b0d3b658e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc50686d78d4679b727548c3edc1cb6b0d3b658e"}], "stats": {"total": 76, "additions": 72, "deletions": 4}, "files": [{"sha": "d2c440a08e45859a9db51d15f96b3a945c566946", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2221fb6f668a7edc8b8aad69772907aeabbbb0be/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2221fb6f668a7edc8b8aad69772907aeabbbb0be/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=2221fb6f668a7edc8b8aad69772907aeabbbb0be", "patch": "@@ -1,3 +1,10 @@\n+2020-05-22  Mark Wielaard  <mark@klomp.org>\n+\n+\t* sm-signal.cc(signal_unsafe_call::emit): Possibly add\n+\tgcc_rich_location note for replacement.\n+\t(signal_unsafe_call::get_replacement_fn): New private function.\n+\t(get_async_signal_unsafe_fns): Add \"exit\".\n+\n 2020-04-28  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/94816"}, {"sha": "c0020321071ece04900f21c09d563e048e858977", "filename": "gcc/analyzer/sm-signal.cc", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2221fb6f668a7edc8b8aad69772907aeabbbb0be/gcc%2Fanalyzer%2Fsm-signal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2221fb6f668a7edc8b8aad69772907aeabbbb0be/gcc%2Fanalyzer%2Fsm-signal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-signal.cc?ref=2221fb6f668a7edc8b8aad69772907aeabbbb0be", "patch": "@@ -123,13 +123,32 @@ class signal_unsafe_call\n \n   bool emit (rich_location *rich_loc) FINAL OVERRIDE\n   {\n+    auto_diagnostic_group d;\n     diagnostic_metadata m;\n     /* CWE-479: Signal Handler Use of a Non-reentrant Function.  */\n     m.add_cwe (479);\n-    return warning_meta (rich_loc, m,\n-\t\t\t OPT_Wanalyzer_unsafe_call_within_signal_handler,\n-\t\t\t \"call to %qD from within signal handler\",\n-\t\t\t m_unsafe_fndecl);\n+    if (warning_meta (rich_loc, m,\n+\t\t      OPT_Wanalyzer_unsafe_call_within_signal_handler,\n+\t\t      \"call to %qD from within signal handler\",\n+\t\t      m_unsafe_fndecl))\n+      {\n+\t/* If we know a possible alternative function, add a note\n+\t   suggesting the replacement.  */\n+\tif (const char *replacement = get_replacement_fn ())\n+\t  {\n+\t    location_t note_loc = gimple_location (m_unsafe_call);\n+\t    /* It would be nice to add a fixit, but the gimple call\n+\t       location covers the whole call expression.  It isn't\n+\t       currently possible to cut this down to just the call\n+\t       symbol.  So the fixit would replace too much.\n+\t       note_rich_loc.add_fixit_replace (replacement); */\n+\t    inform (note_loc,\n+\t\t    \"%qs is a possible signal-safe alternative for %qD\",\n+\t\t    replacement, m_unsafe_fndecl);\n+\t  }\n+\treturn true;\n+      }\n+    return false;\n   }\n \n   label_text describe_state_change (const evdesc::state_change &change)\n@@ -156,6 +175,20 @@ class signal_unsafe_call\n   const signal_state_machine &m_sm;\n   const gcall *m_unsafe_call;\n   tree m_unsafe_fndecl;\n+\n+  /* Returns a replacement function as text if it exists.  Currently\n+     only \"exit\" has a signal-safe replacement \"_exit\", which does\n+     slightly less, but can be used in a signal handler.  */\n+  const char *\n+  get_replacement_fn ()\n+  {\n+    gcc_assert (m_unsafe_fndecl && DECL_P (m_unsafe_fndecl));\n+\n+    if (id_equal (\"exit\", DECL_NAME (m_unsafe_fndecl)))\n+      return \"_exit\";\n+\n+    return NULL;\n+  }\n };\n \n /* signal_state_machine's ctor.  */\n@@ -259,6 +292,7 @@ get_async_signal_unsafe_fns ()\n   // TODO: populate this list more fully\n   static const char * const async_signal_unsafe_fns[] = {\n     /* This array must be kept sorted.  */\n+    \"exit\",\n     \"fprintf\",\n     \"free\",\n     \"malloc\","}, {"sha": "bedaf9aa73556153c52e1d6c0158ee86ef2778d5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2221fb6f668a7edc8b8aad69772907aeabbbb0be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2221fb6f668a7edc8b8aad69772907aeabbbb0be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2221fb6f668a7edc8b8aad69772907aeabbbb0be", "patch": "@@ -1,3 +1,7 @@\n+2020-05-22  Mark Wielaard  <mark@klomp.org>\n+\n+\t* gcc.dg/analyzer/signal-exit.c: New testcase.\n+\n 2020-05-22  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/95255"}, {"sha": "a567124c7d4d31a5eded66f7f93af208a2e65887", "filename": "gcc/testsuite/gcc.dg/analyzer/signal-exit.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2221fb6f668a7edc8b8aad69772907aeabbbb0be/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsignal-exit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2221fb6f668a7edc8b8aad69772907aeabbbb0be/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsignal-exit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsignal-exit.c?ref=2221fb6f668a7edc8b8aad69772907aeabbbb0be", "patch": "@@ -0,0 +1,23 @@\n+/* Example of a bad call within a signal handler with replacement\n+   alternative.  'handler' calls 'exit', and 'exit' is not allowed\n+   from a signal handler.  But '_exit' is allowed.  */\n+\n+#include <signal.h>\n+#include <stdlib.h>\n+\n+extern void body_of_program(void);\n+\n+static void handler(int signum)\n+{\n+  exit(1); /* { dg-warning \"call to 'exit' from within signal handler\" \"warning\" } */\n+  /* { dg-message \"note: '_exit' is a possible signal-safe alternative for 'exit'\" \"replacement note\" { target *-*-* } .-1 } */\n+}\n+\n+int main(int argc, const char *argv)\n+{\n+  signal(SIGINT, handler); /* { dg-message \"registering 'handler' as signal handler\" } */\n+\n+  body_of_program();\n+\n+  return 0;\n+}"}]}