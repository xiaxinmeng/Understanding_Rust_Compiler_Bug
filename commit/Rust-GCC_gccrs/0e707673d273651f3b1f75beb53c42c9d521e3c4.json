{"sha": "0e707673d273651f3b1f75beb53c42c9d521e3c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU3MDc2NzNkMjczNjUxZjNiMWY3NWJlYjUzYzQyYzlkNTIxZTNjNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-01-23T13:57:19Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-01-23T13:57:19Z"}, "message": "basic_string.h (push_back(_CharT)): Call _M_replace_aux.\n\n2004-01-23  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/basic_string.h (push_back(_CharT)):\n\tCall _M_replace_aux.\n\t(insert(size_type, const basic_string&)): Trivial tweak.\n\t(insert(size_type, size_type, _CharT)): Call _M_replace_aux.\n\t(insert(iterator, _CharT)): Ditto.\n\t(erase(size_type, size_type)): Ditto.\n\t(erase(iterator)): Ditto.\n\t(erase(iterator, iterator)): Ditto.\n\t(replace(size_type, size_type, size_type, _CharT)): Ditto.\n\nFrom-SVN: r76420", "tree": {"sha": "cf05870cf887a37481b260347ee9f903ad8d0a28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf05870cf887a37481b260347ee9f903ad8d0a28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e707673d273651f3b1f75beb53c42c9d521e3c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e707673d273651f3b1f75beb53c42c9d521e3c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e707673d273651f3b1f75beb53c42c9d521e3c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e707673d273651f3b1f75beb53c42c9d521e3c4/comments", "author": null, "committer": null, "parents": [{"sha": "55777f44dc0d8d3cbc49969966313dc902bdb24a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55777f44dc0d8d3cbc49969966313dc902bdb24a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55777f44dc0d8d3cbc49969966313dc902bdb24a"}], "stats": {"total": 49, "additions": 27, "deletions": 22}, "files": [{"sha": "c3947b38d6ee6e8ffd92b1030e2a2c81d755b6b1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e707673d273651f3b1f75beb53c42c9d521e3c4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e707673d273651f3b1f75beb53c42c9d521e3c4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0e707673d273651f3b1f75beb53c42c9d521e3c4", "patch": "@@ -1,3 +1,15 @@\n+2004-01-23  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/basic_string.h (push_back(_CharT)):\n+\tCall _M_replace_aux.\n+\t(insert(size_type, const basic_string&)): Trivial tweak.\n+\t(insert(size_type, size_type, _CharT)): Call _M_replace_aux.\n+\t(insert(iterator, _CharT)): Ditto.\n+\t(erase(size_type, size_type)): Ditto.\n+\t(erase(iterator)): Ditto.\n+\t(erase(iterator, iterator)): Ditto.\n+\t(replace(size_type, size_type, size_type, _CharT)): Ditto.\n+\n 2004-01-23  Loren J. Rittle  <ljrittle@acm.org>\n \n \tlibstdc++/13823"}, {"sha": "1b7cc764ff39c2639fbffb225f80900eb5c30a17", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e707673d273651f3b1f75beb53c42c9d521e3c4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e707673d273651f3b1f75beb53c42c9d521e3c4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=0e707673d273651f3b1f75beb53c42c9d521e3c4", "patch": "@@ -771,7 +771,7 @@ namespace std\n        */\n       void\n       push_back(_CharT __c)\n-      { this->replace(_M_iend(), _M_iend(), 1, __c); }\n+      { _M_replace_aux(this->size(), size_type(0), size_type(1), __c); }\n \n       /**\n        *  @brief  Set value to contents of another string.\n@@ -895,7 +895,7 @@ namespace std\n       */\n       basic_string&\n       insert(size_type __pos1, const basic_string& __str)\n-      { return this->insert(__pos1, __str, 0, __str.size()); }\n+      { return this->insert(__pos1, __str, size_type(0), __str.size()); }\n \n       /**\n        *  @brief  Insert a substring.\n@@ -978,11 +978,8 @@ namespace std\n       */\n       basic_string&\n       insert(size_type __pos, size_type __n, _CharT __c)\n-      { \n-\tconst iterator __iterator = this->_M_ibegin()\n-\t                            + _M_check(__pos, \"basic_string::insert\");\n-\treturn this->replace(__iterator, __iterator, __n, __c);\n-      }\n+      { return _M_replace_aux(_M_check(__pos, \"basic_string::insert\"),\n+\t\t\t      size_type(0), __n, __c); }\n \n       /**\n        *  @brief  Insert one character.\n@@ -1002,7 +999,7 @@ namespace std\n       {\n \t_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());\n \tconst size_type __pos = __p - _M_ibegin();\n-\tthis->replace(__p, __p, size_type(1), __c);\n+\t_M_replace_aux(__pos, size_type(0), size_type(1), __c);\n \t_M_rep()->_M_set_leaked();\n  \treturn this->_M_ibegin() + __pos;\n       }\n@@ -1042,11 +1039,8 @@ namespace std\n       */\n       basic_string&\n       erase(size_type __pos = 0, size_type __n = npos)\n-      {\n-\treturn this->replace(_M_ibegin() + _M_check(__pos, \"basic_string::erase\"),\n-\t\t\t     _M_ibegin() + __pos + _M_limit(__pos, __n),\n-\t\t\t     _M_data(), _M_data());\n-      }\n+      { return _M_replace_aux(_M_check(__pos, \"basic_string::erase\"),\n+\t\t\t      _M_limit(__pos, __n), size_type(0), _CharT()); }\n \n       /**\n        *  @brief  Remove one character.\n@@ -1064,10 +1058,10 @@ namespace std\n       {\n \t_GLIBCXX_DEBUG_PEDASSERT(__position >= _M_ibegin() \n \t\t\t\t && __position < _M_iend());\n-\tconst size_type __i = __position - _M_ibegin();\n-        this->replace(__position, __position + 1, _M_data(), _M_data());\n+\tconst size_type __pos = __position - _M_ibegin();\n+\t_M_replace_aux(__pos, size_type(1), size_type(0), _CharT());\n \t_M_rep()->_M_set_leaked();\n-\treturn _M_ibegin() + __i;\n+\treturn _M_ibegin() + __pos;\n       }\n \n       /**\n@@ -1087,10 +1081,10 @@ namespace std\n       {\n \t_GLIBCXX_DEBUG_PEDASSERT(__first >= _M_ibegin() && __first <= __last\n \t\t\t\t && __last <= _M_iend());\n-        const size_type __i = __first - _M_ibegin();\n-\tthis->replace(__first, __last, _M_data(), _M_data());\n+        const size_type __pos = __first - _M_ibegin();\n+\t_M_replace_aux(__pos, __last - __first, size_type(0), _CharT());\n \t_M_rep()->_M_set_leaked();\n-\treturn _M_ibegin() + __i;\n+\treturn _M_ibegin() + __pos;\n       }\n \n       /**\n@@ -1196,9 +1190,8 @@ namespace std\n       */\n       basic_string&\n       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)\n-      { return this->replace(_M_ibegin() + _M_check(__pos, \"basic_string::replace\"),\n-\t\t\t     _M_ibegin() + __pos + _M_limit(__pos, __n1),\n-\t\t\t     __n2, __c); }\n+      { return _M_replace_aux(_M_check(__pos, \"basic_string::replace\"),\n+\t\t\t      _M_limit(__pos, __n1), __n2, __c); }\n \n       /**\n        *  @brief  Replace range of characters with string."}]}