{"sha": "5af057d8bd6b7a7972f3f6d53673920dd8be3cfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFmMDU3ZDhiZDZiN2E3OTcyZjNmNmQ1MzY3MzkyMGRkOGJlM2NmZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-01-19T05:25:25Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-01-19T05:25:25Z"}, "message": "re PR target/54908 (misc regressions on emutls targets remain from dynamic initialization of non-function-local TLS variables)\n\n\tPR target/54908\nc-family/\n\t* c.opt (-fextern-tls-init): New.\n\t* c-opts.c (c_common_post_options): Handle it.\ncp/\n\t* decl2.c (get_local_tls_init_fn): New.\n\t(get_tls_init_fn): Handle flag_extern_tls_init.  Don't bother\n\twith aliases for internal variables.  Don't use weakrefs if\n\tthe variable needs destruction.\n\t(generate_tls_wrapper): Mark the wrapper as const if no\n\tinitialization is needed.\n\t(handle_tls_init): Don't require aliases.\n\nFrom-SVN: r195310", "tree": {"sha": "6f07da7f6452368c46a7fccdd8d5a008127dbe83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f07da7f6452368c46a7fccdd8d5a008127dbe83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5af057d8bd6b7a7972f3f6d53673920dd8be3cfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5af057d8bd6b7a7972f3f6d53673920dd8be3cfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5af057d8bd6b7a7972f3f6d53673920dd8be3cfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5af057d8bd6b7a7972f3f6d53673920dd8be3cfd/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd36469e79bc0ee1fefb3d0f6a1758293f7222e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd36469e79bc0ee1fefb3d0f6a1758293f7222e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd36469e79bc0ee1fefb3d0f6a1758293f7222e0"}], "stats": {"total": 140, "additions": 113, "deletions": 27}, "files": [{"sha": "d4f989be630f4bf1e3e2a9089f89d495aef8549d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af057d8bd6b7a7972f3f6d53673920dd8be3cfd/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af057d8bd6b7a7972f3f6d53673920dd8be3cfd/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=5af057d8bd6b7a7972f3f6d53673920dd8be3cfd", "patch": "@@ -1,3 +1,9 @@\n+2013-01-18  Jason Merrill  <jason@redhat.com>\n+\n+\tPR target/54908\n+\t* c.opt (-fextern-tls-init): New.\n+\t* c-opts.c (c_common_post_options): Handle it.\n+\n 2013-01-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/48418"}, {"sha": "1a922a81c35fb43c1ce89132fefa24eb0ef3db53", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af057d8bd6b7a7972f3f6d53673920dd8be3cfd/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af057d8bd6b7a7972f3f6d53673920dd8be3cfd/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=5af057d8bd6b7a7972f3f6d53673920dd8be3cfd", "patch": "@@ -901,6 +901,20 @@ c_common_post_options (const char **pfilename)\n   else if (warn_narrowing == -1)\n     warn_narrowing = 0;\n \n+  if (flag_extern_tls_init)\n+    {\n+#if !defined (ASM_OUTPUT_DEF) || !SUPPORTS_WEAK\n+      /* Lazy TLS initialization for a variable in another TU requires\n+\t alias and weak reference support. */\n+      if (flag_extern_tls_init > 0)\n+\tsorry (\"external TLS initialization functions not supported \"\n+\t       \"on this target\");\n+      flag_extern_tls_init = 0;\n+#else\n+      flag_extern_tls_init = 1;\n+#endif\n+    }\n+\n   if (flag_preprocess_only)\n     {\n       /* Open the output now.  We must do so even if flag_no_output is"}, {"sha": "10ae84dbb24b99a03d9810ec88251419dbfb72b5", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af057d8bd6b7a7972f3f6d53673920dd8be3cfd/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af057d8bd6b7a7972f3f6d53673920dd8be3cfd/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=5af057d8bd6b7a7972f3f6d53673920dd8be3cfd", "patch": "@@ -913,6 +913,9 @@ finput-charset=\n C ObjC C++ ObjC++ Joined RejectNegative\n -finput-charset=<cset>\tSpecify the default character set for source files\n \n+fextern-tls-init\n+C++ ObjC++ Var(flag_extern_tls_init) Init(-1)\n+Support dynamic initialization of thread-local variables in a different translation unit\n \n fexternal-templates\n C++ ObjC++ Ignore Warn(switch %qs is no longer supported)"}, {"sha": "6370f7f1750e7e40c66d94baa56906111db66709", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af057d8bd6b7a7972f3f6d53673920dd8be3cfd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af057d8bd6b7a7972f3f6d53673920dd8be3cfd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5af057d8bd6b7a7972f3f6d53673920dd8be3cfd", "patch": "@@ -1,3 +1,14 @@\n+2013-01-18  Jason Merrill  <jason@redhat.com>\n+\n+\tPR target/54908\n+\t* decl2.c (get_local_tls_init_fn): New.\n+\t(get_tls_init_fn): Handle flag_extern_tls_init.  Don't bother\n+\twith aliases for internal variables.  Don't use weakrefs if\n+\tthe variable needs destruction.\n+\t(generate_tls_wrapper): Mark the wrapper as const if no\n+\tinitialization is needed.\n+\t(handle_tls_init): Don't require aliases.\n+\n 2013-01-15  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/55663"}, {"sha": "4496395f4e26fa4642c4ca793eeb18a15a00beee", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 53, "deletions": 25, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af057d8bd6b7a7972f3f6d53673920dd8be3cfd/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af057d8bd6b7a7972f3f6d53673920dd8be3cfd/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=5af057d8bd6b7a7972f3f6d53673920dd8be3cfd", "patch": "@@ -2812,6 +2812,28 @@ var_needs_tls_wrapper (tree var)\n \t  && !var_defined_without_dynamic_init (var));\n }\n \n+/* Get the FUNCTION_DECL for the shared TLS init function for this\n+   translation unit.  */\n+\n+static tree\n+get_local_tls_init_fn (void)\n+{\n+  tree sname = get_identifier (\"__tls_init\");\n+  tree fn = IDENTIFIER_GLOBAL_VALUE (sname);\n+  if (!fn)\n+    {\n+      fn = build_lang_decl (FUNCTION_DECL, sname,\n+\t\t\t     build_function_type (void_type_node,\n+\t\t\t\t\t\t  void_list_node));\n+      SET_DECL_LANGUAGE (fn, lang_c);\n+      TREE_PUBLIC (fn) = false;\n+      DECL_ARTIFICIAL (fn) = true;\n+      mark_used (fn);\n+      SET_IDENTIFIER_GLOBAL_VALUE (sname, fn);\n+    }\n+  return fn;\n+}\n+\n /* Get a FUNCTION_DECL for the init function for the thread_local\n    variable VAR.  The init function will be an alias to the function\n    that initializes all the non-local TLS variables in the translation\n@@ -2824,6 +2846,18 @@ get_tls_init_fn (tree var)\n   if (!var_needs_tls_wrapper (var))\n     return NULL_TREE;\n \n+  /* If -fno-extern-tls-init, assume that we don't need to call\n+     a tls init function for a variable defined in another TU.  */\n+  if (!flag_extern_tls_init && DECL_EXTERNAL (var))\n+    return NULL_TREE;\n+\n+#ifdef ASM_OUTPUT_DEF\n+  /* If the variable is internal, or if we can't generate aliases,\n+     call the local init function directly.  */\n+  if (!TREE_PUBLIC (var))\n+#endif\n+    return get_local_tls_init_fn ();\n+\n   tree sname = mangle_tls_init_fn (var);\n   tree fn = IDENTIFIER_GLOBAL_VALUE (sname);\n   if (!fn)\n@@ -2841,11 +2875,12 @@ get_tls_init_fn (tree var)\n       if (TREE_PUBLIC (var))\n \t{\n \t  tree obtype = strip_array_types (non_reference (TREE_TYPE (var)));\n-\t  /* If the variable might have static initialization, make the\n-\t     init function a weak reference.  */\n+\t  /* If the variable is defined somewhere else and might have static\n+\t     initialization, make the init function a weak reference.  */\n \t  if ((!TYPE_NEEDS_CONSTRUCTING (obtype)\n \t       || TYPE_HAS_CONSTEXPR_CTOR (obtype))\n-\t      && TARGET_SUPPORTS_WEAK)\n+\t      && TYPE_HAS_TRIVIAL_DESTRUCTOR (obtype)\n+\t      && DECL_EXTERNAL (var))\n \t    declare_weak (fn);\n \t  else\n \t    DECL_WEAK (fn) = DECL_WEAK (var);\n@@ -2956,6 +2991,9 @@ generate_tls_wrapper (tree fn)\n \t  finish_if_stmt (if_stmt);\n \t}\n     }\n+  else\n+    /* If there's no initialization, the wrapper is a constant function.  */\n+    TREE_READONLY (fn) = true;\n   finish_return_stmt (convert_from_reference (var));\n   finish_function_body (body);\n   expand_or_defer_fn (finish_function (0));\n@@ -3861,15 +3899,6 @@ handle_tls_init (void)\n \n   location_t loc = DECL_SOURCE_LOCATION (TREE_VALUE (vars));\n \n-  #ifndef ASM_OUTPUT_DEF\n-  /* This currently requires alias support.  FIXME other targets could use\n-     small thunks instead of aliases.  */\n-  input_location = loc;\n-  sorry (\"dynamic initialization of non-function-local thread_local \"\n-\t \"variables not supported on this target\");\n-  return;\n-  #endif\n-\n   write_out_vars (vars);\n \n   tree guard = build_decl (loc, VAR_DECL, get_identifier (\"__tls_guard\"),\n@@ -3882,14 +3911,7 @@ handle_tls_init (void)\n   DECL_TLS_MODEL (guard) = decl_default_tls_model (guard);\n   pushdecl_top_level_and_finish (guard, NULL_TREE);\n \n-  tree fn = build_lang_decl (FUNCTION_DECL,\n-\t\t\t     get_identifier (\"__tls_init\"),\n-\t\t\t     build_function_type (void_type_node,\n-\t\t\t\t\t\t  void_list_node));\n-  SET_DECL_LANGUAGE (fn, lang_c);\n-  TREE_PUBLIC (fn) = false;\n-  DECL_ARTIFICIAL (fn) = true;\n-  mark_used (fn);\n+  tree fn = get_local_tls_init_fn ();\n   start_preparsed_function (fn, NULL_TREE, SF_PRE_PARSED);\n   tree body = begin_function_body ();\n   tree if_stmt = begin_if_stmt ();\n@@ -3904,11 +3926,17 @@ handle_tls_init (void)\n       tree init = TREE_PURPOSE (vars);\n       one_static_initialization_or_destruction (var, init, true);\n \n-      tree single_init_fn = get_tls_init_fn (var);\n-      cgraph_node *alias\n-\t= cgraph_same_body_alias (cgraph_get_create_node (fn),\n-\t\t\t\t  single_init_fn, fn);\n-      gcc_assert (alias != NULL);\n+#ifdef ASM_OUTPUT_DEF\n+      /* Output init aliases even with -fno-extern-tls-init.  */\n+      if (TREE_PUBLIC (var))\n+\t{\n+          tree single_init_fn = get_tls_init_fn (var);\n+\t  cgraph_node *alias\n+\t    = cgraph_same_body_alias (cgraph_get_create_node (fn),\n+\t\t\t\t      single_init_fn, fn);\n+\t  gcc_assert (alias != NULL);\n+\t}\n+#endif\n     }\n \n   finish_then_clause (if_stmt);"}, {"sha": "d60ac9f3689b6dfec19a2828ae38545eac9f7e5c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af057d8bd6b7a7972f3f6d53673920dd8be3cfd/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af057d8bd6b7a7972f3f6d53673920dd8be3cfd/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5af057d8bd6b7a7972f3f6d53673920dd8be3cfd", "patch": "@@ -2029,6 +2029,29 @@ exceptions in violation of the exception specifications; the compiler\n still optimizes based on the specifications, so throwing an\n unexpected exception results in undefined behavior at run time.\n \n+@item -fextern-tls-init\n+@itemx -fno-extern-tls-init\n+@opindex fextern-tls-init\n+@opindex fno-extern-tls-init\n+The C++11 and OpenMP standards allow @samp{thread_local} and\n+@samp{threadprivate} variables to have dynamic (runtime)\n+initialization.  To support this, any use of such a variable goes\n+through a wrapper function that performs any necessary initialization.\n+When the use and definition of the variable are in the same\n+translation unit, this overhead can be optimized away, but when the\n+use is in a different translation unit there is significant overhead\n+even if the variable doesn't actually need dynamic initialization.  If\n+the programmer can be sure that no use of the variable in a\n+non-defining TU needs to trigger dynamic initialization (either\n+because the variable is statically initialized, or a use of the\n+variable in the defining TU will be executed before any uses in\n+another TU), they can avoid this overhead with the\n+@option{-fno-extern-tls-init} option.\n+\n+On targets that support symbol aliases, the default is\n+@option{-fextern-tls-init}.  On targets that do not support symbol\n+aliases, the default is @option{-fno-extern-tls-init}.\n+\n @item -ffor-scope\n @itemx -fno-for-scope\n @opindex ffor-scope"}, {"sha": "abe5cb0b585a6ec09be3ed49e92feb94e9a22464", "filename": "gcc/testsuite/g++.dg/gomp/tls-wrap3.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af057d8bd6b7a7972f3f6d53673920dd8be3cfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftls-wrap3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af057d8bd6b7a7972f3f6d53673920dd8be3cfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftls-wrap3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Ftls-wrap3.C?ref=5af057d8bd6b7a7972f3f6d53673920dd8be3cfd", "patch": "@@ -1,6 +1,7 @@\n // If we can't see the definition at all, we need to assume there might be\n // an init function.\n \n+// { dg-require-alias }\n // { dg-require-effective-target tls }\n // { dg-final { scan-assembler \"_ZTW1i\" } }\n // { dg-final { scan-assembler \"_ZTH1i\" } }"}, {"sha": "6b2fb4f87145f88a703dc20d504bfce61fdf7b03", "filename": "gcc/testsuite/g++.dg/tls/thread_local-wrap3.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af057d8bd6b7a7972f3f6d53673920dd8be3cfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local-wrap3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af057d8bd6b7a7972f3f6d53673920dd8be3cfd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local-wrap3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local-wrap3.C?ref=5af057d8bd6b7a7972f3f6d53673920dd8be3cfd", "patch": "@@ -1,6 +1,7 @@\n // If we can't see the definition at all, we need to assume there might be\n // an init function.\n \n+// { dg-require-alias }\n // { dg-require-effective-target tls }\n // { dg-options \"-std=c++11\" }\n // { dg-final { scan-assembler \"_ZTW1i\" } }"}, {"sha": "8256b6693c8f058c1de76b8525b9d03f4454a7c7", "filename": "libgomp/testsuite/libgomp.c++/pr24455.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af057d8bd6b7a7972f3f6d53673920dd8be3cfd/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr24455.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af057d8bd6b7a7972f3f6d53673920dd8be3cfd/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr24455.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr24455.C?ref=5af057d8bd6b7a7972f3f6d53673920dd8be3cfd", "patch": "@@ -1,8 +1,7 @@\n // { dg-do run }\n // { dg-additional-sources pr24455-1.C }\n // { dg-require-effective-target tls_runtime }\n-// { dg-options \"-Wl,-G\" { target powerpc-ibm-aix* } }\n-// { dg-options \"-Wl,-undefined,dynamic_lookup\" { target *-*-darwin* } }\n+// { dg-options \"-fno-extern-tls-init\" }\n \n extern \"C\" void abort (void);\n "}]}