{"sha": "d566e90a165b8d8aeb74765fc1d845047200cf45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU2NmU5MGExNjViOGQ4YWViNzQ3NjVmYzFkODQ1MDQ3MjAwY2Y0NQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2016-04-20T09:22:59Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-20T09:22:59Z"}, "message": "sem_res.adb (Rewrite_Renamed_Operator): Do not rewrite the renamed operator when the associated node appears within a...\n\n2016-04-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_res.adb (Rewrite_Renamed_Operator): Do not rewrite the\n\trenamed operator when the associated node appears within a\n\tpre/postcondition.\n\t* sem_util.ads, sem_util.adb (In_Pre_Post_Condition): New routine.\n\nFrom-SVN: r235249", "tree": {"sha": "8dc786e9321efcb09b44d818d2d73acd1760555c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dc786e9321efcb09b44d818d2d73acd1760555c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d566e90a165b8d8aeb74765fc1d845047200cf45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d566e90a165b8d8aeb74765fc1d845047200cf45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d566e90a165b8d8aeb74765fc1d845047200cf45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d566e90a165b8d8aeb74765fc1d845047200cf45/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a476d752d5693cba41ae966e680b9ae1e03f144", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a476d752d5693cba41ae966e680b9ae1e03f144", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a476d752d5693cba41ae966e680b9ae1e03f144"}], "stats": {"total": 70, "additions": 63, "deletions": 7}, "files": [{"sha": "186e332963d75e7c23306d95a1b39dd0b1cc5501", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d566e90a165b8d8aeb74765fc1d845047200cf45/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d566e90a165b8d8aeb74765fc1d845047200cf45/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d566e90a165b8d8aeb74765fc1d845047200cf45", "patch": "@@ -1,3 +1,10 @@\n+2016-04-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_res.adb (Rewrite_Renamed_Operator): Do not rewrite the\n+\trenamed operator when the associated node appears within a\n+\tpre/postcondition.\n+\t* sem_util.ads, sem_util.adb (In_Pre_Post_Condition): New routine.\n+\n 2016-04-20  Yannick Moy  <moy@adacore.com>\n \n \t* osint.adb (Relocate_Path): Fix test when Path is shorter than Prefix."}, {"sha": "23ce8279b3f2e166c524ba9b85dff7ab5278750b", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d566e90a165b8d8aeb74765fc1d845047200cf45/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d566e90a165b8d8aeb74765fc1d845047200cf45/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=d566e90a165b8d8aeb74765fc1d845047200cf45", "patch": "@@ -11122,8 +11122,10 @@ package body Sem_Res is\n       --  Do not perform this transformation within a pre/postcondition,\n       --  because the expression will be re-analyzed, and the transformation\n       --  might affect the visibility of the operator, e.g. in an instance.\n+      --  Note that fully analyzed and expanded pre/postconditions appear as\n+      --  pragma Check equivalents.\n \n-      if In_Assertion_Expr > 0 then\n+      if In_Pre_Post_Condition (N) then\n          return;\n       end if;\n \n@@ -11145,7 +11147,7 @@ package body Sem_Res is\n          Generate_Reference (Op, N);\n \n          if Is_Binary then\n-            Set_Left_Opnd  (Op_Node, Left_Opnd  (N));\n+            Set_Left_Opnd (Op_Node, Left_Opnd (N));\n          end if;\n \n          Rewrite (N, Op_Node);\n@@ -11154,9 +11156,7 @@ package body Sem_Res is\n          --  that the operator is applied to the full view. This is done in the\n          --  routines that resolve intrinsic operators.\n \n-         if Is_Intrinsic_Subprogram (Op)\n-           and then Is_Private_Type (Typ)\n-         then\n+         if Is_Intrinsic_Subprogram (Op) and then Is_Private_Type (Typ) then\n             case Nkind (N) is\n                when N_Op_Add   | N_Op_Subtract | N_Op_Multiply | N_Op_Divide |\n                     N_Op_Expon | N_Op_Mod      | N_Op_Rem      =>"}, {"sha": "a808c02db59012ebc9718a56bcef520bc23069f3", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d566e90a165b8d8aeb74765fc1d845047200cf45/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d566e90a165b8d8aeb74765fc1d845047200cf45/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=d566e90a165b8d8aeb74765fc1d845047200cf45", "patch": "@@ -10474,6 +10474,51 @@ package body Sem_Util is\n       end loop;\n    end In_Pragma_Expression;\n \n+   ---------------------------\n+   -- In_Pre_Post_Condition --\n+   ---------------------------\n+\n+   function In_Pre_Post_Condition (N : Node_Id) return Boolean is\n+      Par     : Node_Id;\n+      Prag    : Node_Id := Empty;\n+      Prag_Id : Pragma_Id;\n+\n+   begin\n+      --  Climb the parent chain looking for an enclosing pragma\n+\n+      Par := N;\n+      while Present (Par) loop\n+         if Nkind (Par) = N_Pragma then\n+            Prag := Par;\n+            exit;\n+\n+         --  Prevent the search from going too far\n+\n+         elsif Is_Body_Or_Package_Declaration (Par) then\n+            exit;\n+         end if;\n+\n+         Par := Parent (Par);\n+      end loop;\n+\n+      if Present (Prag) then\n+         Prag_Id := Get_Pragma_Id (Prag);\n+\n+         return\n+           Prag_Id = Pragma_Post\n+             or else Prag_Id = Pragma_Post_Class\n+             or else Prag_Id = Pragma_Postcondition\n+             or else Prag_Id = Pragma_Pre\n+             or else Prag_Id = Pragma_Pre_Class\n+             or else Prag_Id = Pragma_Precondition;\n+\n+      --  Otherwise the node is not enclosed by a pre/postcondition pragma\n+\n+      else\n+         return False;\n+      end if;\n+   end In_Pre_Post_Condition;\n+\n    -------------------------------------\n    -- In_Reverse_Storage_Order_Object --\n    -------------------------------------"}, {"sha": "84a436ceb78656b95ada640663e56b486c2b07e2", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d566e90a165b8d8aeb74765fc1d845047200cf45/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d566e90a165b8d8aeb74765fc1d845047200cf45/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=d566e90a165b8d8aeb74765fc1d845047200cf45", "patch": "@@ -1152,8 +1152,8 @@ package Sem_Util is\n    --  Returns true if the Typ_Ent implements interface Iface_Ent\n \n    function In_Assertion_Expression_Pragma (N : Node_Id) return Boolean;\n-   --  Determine whether an arbitrary node appears in a pragma that acts as an\n-   --  assertion expression. See Sem_Prag for the list of qualifying pragmas.\n+   --  Returns True if node N appears within a pragma that acts as an assertion\n+   --  expression. See Sem_Prag for the list of qualifying pragmas.\n \n    function In_Instance return Boolean;\n    --  Returns True if the current scope is within a generic instance\n@@ -1179,6 +1179,10 @@ package Sem_Util is\n    function In_Pragma_Expression (N : Node_Id; Nam : Name_Id) return Boolean;\n    --  Returns true if the expression N occurs within a pragma with name Nam\n \n+   function In_Pre_Post_Condition (N : Node_Id) return Boolean;\n+   --  Returns True if node N appears within a pre/postcondition pragma. Note\n+   --  the pragma Check equivalents are NOT considered.\n+\n    function In_Reverse_Storage_Order_Object (N : Node_Id) return Boolean;\n    --  Returns True if N denotes a component or subcomponent in a record or\n    --  array that has Reverse_Storage_Order."}]}