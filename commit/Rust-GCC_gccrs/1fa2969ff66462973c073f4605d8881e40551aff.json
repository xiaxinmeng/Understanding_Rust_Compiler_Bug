{"sha": "1fa2969ff66462973c073f4605d8881e40551aff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZhMjk2OWZmNjY0NjI5NzNjMDczZjQ2MDVkODg4MWU0MDU1MWFmZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-05-03T14:28:46Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-05-03T14:28:46Z"}, "message": "re PR c++/53186 ([C++11] missing devirtualization for operators \"final\")\n\n/cp\n2012-05-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/53186\n\t* call.c (build_over_call): Handle final member functions\n\tand class types.\n\t(build_new_method_call_1): Do not handle here.\n\n/testsuite\n2012-05-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/53186\n\t* g++.dg/other/final2.C: New.\n\nFrom-SVN: r187097", "tree": {"sha": "15f1bda4374b20c465ed4e02d97a90f4645632fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15f1bda4374b20c465ed4e02d97a90f4645632fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fa2969ff66462973c073f4605d8881e40551aff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fa2969ff66462973c073f4605d8881e40551aff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fa2969ff66462973c073f4605d8881e40551aff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fa2969ff66462973c073f4605d8881e40551aff/comments", "author": null, "committer": null, "parents": [{"sha": "bea966c222bf8900ebfcc5cd6d83e507b6bec748", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea966c222bf8900ebfcc5cd6d83e507b6bec748", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bea966c222bf8900ebfcc5cd6d83e507b6bec748"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "46d8b89a0ed05c9e986f6043e42d0b6c2ad6a607", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa2969ff66462973c073f4605d8881e40551aff/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa2969ff66462973c073f4605d8881e40551aff/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1fa2969ff66462973c073f4605d8881e40551aff", "patch": "@@ -1,3 +1,10 @@\n+2012-05-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/53186\n+\t* call.c (build_over_call): Handle final member functions\n+\tand class types.\n+\t(build_new_method_call_1): Do not handle here.\n+\n 2012-05-02  Richard Guenther  <rguenther@suse.de>\n \n \t* decl.c (grokdeclarator): Properly check for sizes that"}, {"sha": "8ae4afe44453def78b1c34492d2528020233b338", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa2969ff66462973c073f4605d8881e40551aff/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa2969ff66462973c073f4605d8881e40551aff/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=1fa2969ff66462973c073f4605d8881e40551aff", "patch": "@@ -6550,6 +6550,12 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t    return error_mark_node;\n \t}\n \n+      /* See if the function member or the whole class type is declared\n+\t final and the call can be devirtualized.  */\n+      if (DECL_FINAL_P (fn)\n+\t  || CLASSTYPE_FINAL (TYPE_METHOD_BASETYPE (TREE_TYPE (fn))))\n+\tflags |= LOOKUP_NONVIRTUAL;\n+\n       /* [class.mfct.nonstatic]: If a nonstatic member function of a class\n \t X is called for an object that is not of type X, or of a type\n \t derived from X, the behavior is undefined.\n@@ -7418,8 +7424,7 @@ build_new_method_call_1 (tree instance, tree fns, VEC(tree,gc) **args,\n \t      /* Optimize away vtable lookup if we know that this function\n \t\t can't be overridden.  */\n \t      if (DECL_VINDEX (fn) && ! (flags & LOOKUP_NONVIRTUAL)\n-\t\t  && (resolves_to_fixed_type_p (instance, 0)\n-\t\t      || DECL_FINAL_P (fn) || CLASSTYPE_FINAL (basetype)))\n+\t\t  && resolves_to_fixed_type_p (instance, 0))\n \t\tflags |= LOOKUP_NONVIRTUAL;\n               if (explicit_targs)\n                 flags |= LOOKUP_EXPLICIT_TMPL_ARGS;"}, {"sha": "1378ff45d9c83777667ee813a561ab7c0941b9d1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa2969ff66462973c073f4605d8881e40551aff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa2969ff66462973c073f4605d8881e40551aff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1fa2969ff66462973c073f4605d8881e40551aff", "patch": "@@ -1,3 +1,8 @@\n+2012-05-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/53186\n+\t* g++.dg/other/final2.C: New.\n+\n 2012-05-03  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/ssa-pre-27.c: Remove XFAIL."}, {"sha": "a07562299d6fba72fd5de9d3ea9e62ff6b7217b9", "filename": "gcc/testsuite/g++.dg/other/final2.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa2969ff66462973c073f4605d8881e40551aff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffinal2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa2969ff66462973c073f4605d8881e40551aff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffinal2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffinal2.C?ref=1fa2969ff66462973c073f4605d8881e40551aff", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/53186\n+// { dg-options \"-fdump-tree-original -std=c++11\"  }\n+\n+struct F1\n+{\n+  virtual void operator()() final;\n+  virtual operator int() final;\n+  virtual int operator++() final;\n+};\n+\n+struct F2 final\n+{\n+  virtual void operator()();\n+  virtual operator int();\n+  virtual int operator++();\n+};\n+\n+void fooF1(F1& a) { a(); int m = a; ++a; }\n+void fooF2(F2& a) { a(); int m = a; ++a; }\n+\n+// { dg-final { scan-tree-dump-times \"F1::operator\\\\(\\\\)\" 1 \"original\" } }\n+// { dg-final { scan-tree-dump-times \"F1::operator int\" 1 \"original\" } }\n+// { dg-final { scan-tree-dump-times \"F1::operator\\\\+\\\\+\" 1 \"original\" } }\n+// { dg-final { scan-tree-dump-times \"F2::operator\\\\(\\\\)\" 1 \"original\" } }\n+// { dg-final { scan-tree-dump-times \"F2::operator int\" 1 \"original\" } }\n+// { dg-final { scan-tree-dump-times \"F2::operator\\\\+\\\\+\" 1 \"original\" } }\n+// { dg-final { cleanup-tree-dump \"original\" } }"}]}