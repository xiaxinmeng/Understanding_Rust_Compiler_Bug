{"sha": "aa69f0a8203095b5a689fae48d5ca8006ecfca61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE2OWYwYTgyMDMwOTViNWE2ODlmYWU0OGQ1Y2E4MDA2ZWNmY2E2MQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-01-28T00:16:56Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-01-28T00:16:56Z"}, "message": "Daily bump.", "tree": {"sha": "b84251e8ad40628a281d42b76c2acea73fdcea35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b84251e8ad40628a281d42b76c2acea73fdcea35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa69f0a8203095b5a689fae48d5ca8006ecfca61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa69f0a8203095b5a689fae48d5ca8006ecfca61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa69f0a8203095b5a689fae48d5ca8006ecfca61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa69f0a8203095b5a689fae48d5ca8006ecfca61/comments", "author": null, "committer": null, "parents": [{"sha": "1cdca4261e88f4dc9c3293c6b3c2fff3071ca32b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cdca4261e88f4dc9c3293c6b3c2fff3071ca32b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cdca4261e88f4dc9c3293c6b3c2fff3071ca32b"}], "stats": {"total": 433, "additions": 432, "deletions": 1}, "files": [{"sha": "70b8f0aa0096605e463e68739a96a737376181ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa69f0a8203095b5a689fae48d5ca8006ecfca61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa69f0a8203095b5a689fae48d5ca8006ecfca61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa69f0a8203095b5a689fae48d5ca8006ecfca61", "patch": "@@ -1,3 +1,137 @@\n+2021-01-27  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/97684\n+\t* ira.c (ira): Call ira_set_pseudo_classes before\n+\tupdate_equiv_regs when it is necessary.\n+\n+2021-01-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/98853\n+\t* config/aarch64/aarch64.md (*aarch64_bfxilsi_uxtw): Use\n+\t%w0, %w1 and %2 instead of %0, %1 and %2.\n+\n+2021-01-27  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* config/rs6000/genfusion.pl: New script to generate\n+\tdefine_insn_and_split patterns so combine can arrange fused\n+\tinstructions next to each other.\n+\t* config/rs6000/fusion.md: New file, generated fused instruction\n+\tpatterns for combine.\n+\t* config/rs6000/predicates.md (const_m1_to_1_operand): New predicate.\n+\t(non_update_memory_operand): New predicate.\n+\t* config/rs6000/rs6000-cpus.def: Add OPTION_MASK_P10_FUSION and\n+\tOPTION_MASK_P10_FUSION_LD_CMPI to ISA_3_1_MASKS_SERVER and\n+\tPOWERPC_MASKS.\n+\t* config/rs6000/rs6000-protos.h (address_is_non_pfx_d_or_x): Add\n+\tprototype.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal):\n+\tAutomatically set OPTION_MASK_P10_FUSION and\n+\tOPTION_MASK_P10_FUSION_LD_CMPI if target is power10.\n+\t(rs600_opt_masks): Allow -mpower10-fusion\n+\tin function attributes.\n+\t(address_is_non_pfx_d_or_x): New function.\n+\t* config/rs6000/rs6000.h: Add MASK_P10_FUSION.\n+\t* config/rs6000/rs6000.md: Include fusion.md.\n+\t* config/rs6000/rs6000.opt: Add -mpower10-fusion\n+\tand -mpower10-fusion-ld-cmpi.\n+\t* config/rs6000/t-rs6000: Add dependencies involving fusion.md.\n+\n+2021-01-27  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add [su]mlal\n+\tbuiltin generator macros.\n+\t* config/aarch64/aarch64-simd.md (*aarch64_<su>mlal<mode>):\n+\tRename to...\n+\t(aarch64_<su>mlal<mode>): This.\n+\t* config/aarch64/arm_neon.h (vmlal_s8): Use RTL builtin\n+\tinstead of inline asm.\n+\t(vmlal_s16): Likewise.\n+\t(vmlal_s32): Likewise.\n+\t(vmlal_u8): Likewise.\n+\t(vmlal_u16): Likewise.\n+\t(vmlal_u32): Likewise.\n+\n+2021-01-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98854\n+\t* tree-vect-slp.c (vect_build_slp_tree_2): Also build\n+\tPHIs from scalars when the number of CTORs matches the\n+\tnumber of children.\n+\n+2021-01-27  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add mls_n builtin\n+\tgenerator macro.\n+\t* config/aarch64/aarch64-simd.md (*aarch64_mls_elt_merge<mode>):\n+\tRename to...\n+\t(aarch64_mls_n<mode>): This.\n+\t* config/aarch64/arm_neon.h (vmls_n_s16): Use RTL builtin\n+\tinstead of asm.\n+\t(vmls_n_s32): Likewise.\n+\t(vmls_n_u16): Likewise.\n+\t(vmls_n_u32): Likewise.\n+\t(vmlsq_n_s16): Likewise.\n+\t(vmlsq_n_s32): Likewise.\n+\t(vmlsq_n_u16): Likewise.\n+\t(vmlsq_n_u32): Likewise.\n+\n+2021-01-27  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add mls builtin\n+\tgenerator macro.\n+\t* config/aarch64/arm_neon.h (vmls_s8): Use RTL builtin rather\n+\tthan asm.\n+\t(vmls_s16): Likewise.\n+\t(vmls_s32): Likewise.\n+\t(vmls_u8): Likewise.\n+\t(vmls_u16): Likewise.\n+\t(vmls_u32): Likewise.\n+\t(vmlsq_s8): Likewise.\n+\t(vmlsq_s16): Likewise.\n+\t(vmlsq_s32): Likewise.\n+\t(vmlsq_u8): Likewise.\n+\t(vmlsq_u16): Likewise.\n+\t(vmlsq_u32): Likewise.\n+\n+2021-01-27  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add mla_n builtin\n+\tgenerator macro.\n+\t* config/aarch64/aarch64-simd.md (*aarch64_mla_elt_merge<mode>):\n+\tRename to...\n+\t(aarch64_mla_n<mode>): This.\n+\t* config/aarch64/arm_neon.h (vmla_n_s16): Use RTL builtin\n+\tinstead of asm.\n+\t(vmla_n_s32): Likewise.\n+\t(vmla_n_u16): Likewise.\n+\t(vmla_n_u32): Likewise.\n+\t(vmlaq_n_s16): Likewise.\n+\t(vmlaq_n_s32): Likewise.\n+\t(vmlaq_n_u16): Likewise.\n+\t(vmlaq_n_u32): Likewise.\n+\n+2021-01-27  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/98833\n+\t* config/i386/sse.md (sse2_gt<mode>3): Drop !TARGET_XOP in condition.\n+\t(*sse2_eq<mode>3): Ditto.\n+\n+2021-01-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-pass.h (PROP_trees): Rename to ...\n+\t(PROP_gimple): ... this.\n+\t* cfgexpand.c (pass_data_expand): Replace PROP_trees with PROP_gimple.\n+\t* passes.c (execute_function_dump, execute_function_todo,\n+\texecute_one_ipa_transform_pass, execute_one_pass): Likewise.\n+\t* varpool.c (ctor_for_folding): Likewise.\n+\n+2021-01-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/97260\n+\t* varpool.c: Include tree-pass.h.\n+\t(ctor_for_folding): In GENERIC return DECL_INITIAL for TREE_READONLY\n+\tnon-TREE_SIDE_EFFECTS automatic variables.\n+\n 2021-01-26  Paul Fee  <paul.f.fee@gmail.com>\n \n \t* doc/cpp.texi (__cplusplus): Document value for -std=c++23"}, {"sha": "6f2e9366761e6446eca72edbccfb3dc03a20ce51", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa69f0a8203095b5a689fae48d5ca8006ecfca61/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa69f0a8203095b5a689fae48d5ca8006ecfca61/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=aa69f0a8203095b5a689fae48d5ca8006ecfca61", "patch": "@@ -1 +1 @@\n-20210127\n+20210128"}, {"sha": "252bda6c0b9c4960748fc37e148bb22e9001fc82", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa69f0a8203095b5a689fae48d5ca8006ecfca61/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa69f0a8203095b5a689fae48d5ca8006ecfca61/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aa69f0a8203095b5a689fae48d5ca8006ecfca61", "patch": "@@ -1,3 +1,11 @@\n+2021-01-27  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/97874\n+\t* name-lookup.c (lookup_using_decl): Clean up handling\n+\tof dependency and inherited constructors.\n+\t(finish_nonmember_using_decl): Handle DECL_DEPENDENT_P.\n+\t* pt.c (tsubst_expr): Handle DECL_DEPENDENT_P.\n+\n 2021-01-26  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/97474"}, {"sha": "ec26cea2ebcefcf396738a6124a390dccec7383d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa69f0a8203095b5a689fae48d5ca8006ecfca61/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa69f0a8203095b5a689fae48d5ca8006ecfca61/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=aa69f0a8203095b5a689fae48d5ca8006ecfca61", "patch": "@@ -1,3 +1,20 @@\n+2021-01-27  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/93924\n+\tPR fortran/93925\n+\t* trans-expr.c (gfc_conv_procedure_call): Suppress the call to\n+\tgfc_conv_intrinsic_to_class for unlimited polymorphic procedure\n+\tpointers.\n+\t(gfc_trans_assignment_1): Similarly suppress class assignment\n+\tfor class valued procedure pointers.\n+\n+2021-01-27  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/98472\n+\t* trans-array.c (gfc_conv_expr_descriptor): Include elemental\n+\tprocedure pointers in the assert under the comment 'elemental\n+\tfunction' and eliminate the second, spurious assert.\n+\n 2021-01-25  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/70070"}, {"sha": "c985d48f797fa7d298a65ff6a80c80e4d08a82e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa69f0a8203095b5a689fae48d5ca8006ecfca61/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa69f0a8203095b5a689fae48d5ca8006ecfca61/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aa69f0a8203095b5a689fae48d5ca8006ecfca61", "patch": "@@ -1,3 +1,69 @@\n+2021-01-27  Harris Snyder  <hsnyder@structura.bio>\n+\n+\t* gfortran.dg/ISO_Fortran_binding_18.c: New test.\n+\t* gfortran.dg/ISO_Fortran_binding_18.f90: New test.\n+\n+2021-01-27  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/97684\n+\t* gcc.target/i386/pr97684.c: New.\n+\n+2021-01-27  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/97874\n+\t* g++.dg/lookup/using4.C: No error in C++20.\n+\t* g++.dg/cpp0x/decltype37.C: Adjust message.\n+\t* g++.dg/template/crash75.C: Adjust message.\n+\t* g++.dg/template/crash76.C: Adjust message.\n+\t* g++.dg/cpp0x/inh-ctor36.C: New test.\n+\t* g++.dg/cpp1z/inh-ctor39.C: New test.\n+\t* g++.dg/cpp2a/using-enum-7.C: New test.\n+\n+2021-01-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/98853\n+\t* gcc.c-torture/execute/pr98853-1.c: New test.\n+\t* gcc.c-torture/execute/pr98853-2.c: New test.\n+\n+2021-01-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98854\n+\t* gcc.dg/vect/bb-slp-pr98854.c: New testcase.\n+\n+2021-01-27  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/93924\n+\tPR fortran/93925\n+\t* gfortran.dg/proc_ptr_52.f90 : New test.\n+\n+2021-01-27  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/98833\n+\t* gcc.target/i386/pr98833.c: New test.\n+\n+2021-01-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.target/i386/m128-check.h (CHECK_EXP): Remove\n+\toptimize (\"no-strict-aliasing\") attribute.\n+\t* gcc.target/i386/sse-andnps-1.c (TEST): Copy e into float[4]\n+\tarray to avoid violating TBAA.\n+\t* gcc.target/i386/sse2-andpd-1.c (TEST): Copy e.d into double[2]\n+\tarray to avoid violating TBAA.\n+\t* gcc.target/i386/sse-andps-1.c (TEST): Copy e.f into float[4]\n+\tarray to avoid violating TBAA.\n+\t* gcc.target/i386/sse2-andnpd-1.c (TEST): Copy e into double[2]\n+\tarray to avoid violating TBAA.\n+\n+2021-01-27  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/98472\n+\t* gfortran.dg/elemental_function_5.f90 : New test.\n+\n+2021-01-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/97260\n+\t* gcc.dg/tree-ssa/pr97260.c: New test.\n+\n 2021-01-26  Paul Fee  <paul.f.fee@gmail.com>\n \n \t* lib/target-supports.exp (check_effective_target_c++2a):"}, {"sha": "99d55931266c32a42c7173beafa30de7bfceef92", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa69f0a8203095b5a689fae48d5ca8006ecfca61/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa69f0a8203095b5a689fae48d5ca8006ecfca61/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=aa69f0a8203095b5a689fae48d5ca8006ecfca61", "patch": "@@ -1,3 +1,8 @@\n+2021-01-27  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/98833\n+\t* lex.c (search_line_sse2): Replace builtins with == operator.\n+\n 2021-01-26  Paul Fee  <paul.f.fee@gmail.com>\n \n \t* include/cpplib.h (c_lang): Add CXX23 and GNUCXX23."}, {"sha": "90bea1b77932aff11978569fa747cba348f7377a", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa69f0a8203095b5a689fae48d5ca8006ecfca61/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa69f0a8203095b5a689fae48d5ca8006ecfca61/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=aa69f0a8203095b5a689fae48d5ca8006ecfca61", "patch": "@@ -1,3 +1,12 @@\n+2021-01-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/savms64.h: Add .note.GNU-stack section on Linux.\n+\t* config/i386/savms64f.h: Likewise.\n+\t* config/i386/resms64.h: Likewise.\n+\t* config/i386/resms64f.h: Likewise.\n+\t* config/i386/resms64x.h: Likewise.\n+\t* config/i386/resms64fx.h: Likewise.\n+\n 2021-01-26  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/98739"}, {"sha": "8f48bec56c0c37ae2c58c0996b0393216a5bf07e", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa69f0a8203095b5a689fae48d5ca8006ecfca61/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa69f0a8203095b5a689fae48d5ca8006ecfca61/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=aa69f0a8203095b5a689fae48d5ca8006ecfca61", "patch": "@@ -1,3 +1,8 @@\n+2021-01-27  Harris Snyder  <hsnyder@structura.bio>\n+\n+\t* runtime/ISO_Fortran_binding.c (CFI_establish): fixed\n+\tstrides for rank >2 arrays.\n+\n 2021-01-15  Harris Snyder  <hsnyder@structura.bio>\n \n \t* runtime/ISO_Fortran_binding.c (CFI_establish): Fixed signed"}, {"sha": "1d976faaafe82f97c45d015cb505e48371c39053", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa69f0a8203095b5a689fae48d5ca8006ecfca61/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa69f0a8203095b5a689fae48d5ca8006ecfca61/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=aa69f0a8203095b5a689fae48d5ca8006ecfca61", "patch": "@@ -1,3 +1,190 @@\n+2021-01-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/status_cxx2017.xml: Replace invalid entity.\n+\t* doc/html/*: Regenerate.\n+\n+2021-01-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/experimental/simd/generate_makefile.sh: Use printf\n+\tinstead of echo when printing escape characters.\n+\n+2021-01-27  Matthias Kretz  <kretz@kde.org>\n+\n+\t* scripts/check_simd: New file. This script is called from the\n+\tthe check-simd target. It determines a set of compiler flags and\n+\tsimulator setups for calling generate_makefile.sh and passes the\n+\tinformation back to the check-simd target, which recurses to the\n+\tgenerated Makefiles.\n+\t* scripts/create_testsuite_files: Remove files below simd/tests/\n+\tfrom testsuite_files and place them in testsuite_files_simd.\n+\t* testsuite/Makefile.am: Add testsuite_files_simd. Add\n+\tcheck-simd target.\n+\t* testsuite/Makefile.in: Regenerate.\n+\t* testsuite/experimental/simd/driver.sh: New file. This script\n+\tcompiles and runs a given simd test, logging its output and\n+\tstatus. It uses the timeout command to implement compile and\n+\ttest timeouts.\n+\t* testsuite/experimental/simd/generate_makefile.sh: New file.\n+\tThis script generates a Makefile which uses driver.sh to compile\n+\tand run the tests and collect the logs into a single log file.\n+\t* testsuite/experimental/simd/tests/abs.cc: New file. Tests\n+\tabs(simd).\n+\t* testsuite/experimental/simd/tests/algorithms.cc: New file.\n+\tTests min/max(simd, simd).\n+\t* testsuite/experimental/simd/tests/bits/conversions.h: New\n+\tfile. Contains functions to support tests involving conversions.\n+\t* testsuite/experimental/simd/tests/bits/make_vec.h: New file.\n+\tSupport functions make_mask and make_vec.\n+\t* testsuite/experimental/simd/tests/bits/mathreference.h: New\n+\tfile. Support functions to supply precomputed math function\n+\treference data.\n+\t* testsuite/experimental/simd/tests/bits/metahelpers.h: New\n+\tfile. Support code for SFINAE testing.\n+\t* testsuite/experimental/simd/tests/bits/simd_view.h: New file.\n+\t* testsuite/experimental/simd/tests/bits/test_values.h: New\n+\tfile. Test functions to easily drive a test with simd objects\n+\tinitialized from a given list of values and a range of random\n+\tvalues.\n+\t* testsuite/experimental/simd/tests/bits/ulp.h: New file.\n+\tSupport code to determine the ULP distance of simd objects.\n+\t* testsuite/experimental/simd/tests/bits/verify.h: New file.\n+\tTest framework for COMPARE'ing simd objects and instantiating\n+\tthe test templates with value_type and ABI tag.\n+\t* testsuite/experimental/simd/tests/broadcast.cc: New file. Test\n+\tsimd broadcasts.\n+\t* testsuite/experimental/simd/tests/casts.cc: New file. Test\n+\tsimd casts.\n+\t* testsuite/experimental/simd/tests/fpclassify.cc: New file.\n+\tTest floating-point classification functions.\n+\t* testsuite/experimental/simd/tests/frexp.cc: New file. Test\n+\tfrexp(simd).\n+\t* testsuite/experimental/simd/tests/generator.cc: New file. Test\n+\tsimd generator constructor.\n+\t* testsuite/experimental/simd/tests/hypot3_fma.cc: New file.\n+\tTest 3-arg hypot(simd,simd,simd) and fma(simd,simd,sim).\n+\t* testsuite/experimental/simd/tests/integer_operators.cc: New\n+\tfile. Test integer operators.\n+\t* testsuite/experimental/simd/tests/ldexp_scalbn_scalbln_modf.cc:\n+\tNew file. Test ldexp(simd), scalbn(simd), scalbln(simd), and\n+\tmodf(simd).\n+\t* testsuite/experimental/simd/tests/loadstore.cc: New file. Test\n+\t(converting) simd loads and stores.\n+\t* testsuite/experimental/simd/tests/logarithm.cc: New file. Test\n+\tlog*(simd).\n+\t* testsuite/experimental/simd/tests/mask_broadcast.cc: New file.\n+\tTest simd_mask broadcasts.\n+\t* testsuite/experimental/simd/tests/mask_conversions.cc: New\n+\tfile. Test simd_mask conversions.\n+\t* testsuite/experimental/simd/tests/mask_implicit_cvt.cc: New\n+\tfile. Test simd_mask implicit conversions.\n+\t* testsuite/experimental/simd/tests/mask_loadstore.cc: New file.\n+\tTest simd_mask loads and stores.\n+\t* testsuite/experimental/simd/tests/mask_operator_cvt.cc: New\n+\tfile. Test simd_mask operators convert as specified.\n+\t* testsuite/experimental/simd/tests/mask_operators.cc: New file.\n+\tTest simd_mask compares, subscripts, and negation.\n+\t* testsuite/experimental/simd/tests/mask_reductions.cc: New\n+\tfile. Test simd_mask reductions.\n+\t* testsuite/experimental/simd/tests/math_1arg.cc: New file. Test\n+\t1-arg math functions on simd.\n+\t* testsuite/experimental/simd/tests/math_2arg.cc: New file. Test\n+\t2-arg math functions on simd.\n+\t* testsuite/experimental/simd/tests/operator_cvt.cc: New file.\n+\tTest implicit conversions on simd binary operators behave as\n+\tspecified.\n+\t* testsuite/experimental/simd/tests/operators.cc: New file. Test\n+\tsimd compares, subscripts, not, unary minus, plus, minus,\n+\tmultiplies, divides, increment, and decrement.\n+\t* testsuite/experimental/simd/tests/reductions.cc: New file.\n+\tTest reduce(simd).\n+\t* testsuite/experimental/simd/tests/remqo.cc: New file. Test\n+\tremqo(simd).\n+\t* testsuite/experimental/simd/tests/simd.cc: New file. Basic\n+\tsanity checks of simd types.\n+\t* testsuite/experimental/simd/tests/sincos.cc: New file. Test\n+\tsin(simd) and cos(simd).\n+\t* testsuite/experimental/simd/tests/split_concat.cc: New file.\n+\tTest split(simd) and concat(simd, simd).\n+\t* testsuite/experimental/simd/tests/splits.cc: New file. Test\n+\tsplit(simd_mask).\n+\t* testsuite/experimental/simd/tests/trigonometric.cc: New file.\n+\tTest remaining trigonometric functions on simd.\n+\t* testsuite/experimental/simd/tests/trunc_ceil_floor.cc: New\n+\tfile. Test trunc(simd), ceil(simd), and floor(simd).\n+\t* testsuite/experimental/simd/tests/where.cc: New file. Test\n+\tmasked operations using where.\n+\n+2021-01-27  Matthias Kretz  <kretz@kde.org>\n+\n+\t* doc/xml/manual/status_cxx2017.xml: Add implementation status\n+\tof the Parallelism TS 2. Document implementation-defined types\n+\tand behavior.\n+\t* include/Makefile.am: Add new headers.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/experimental/simd: New file. New header for\n+\tParallelism TS 2.\n+\t* include/experimental/bits/numeric_traits.h: New file.\n+\tImplementation of P1841R1 using internal naming. Addition of\n+\tmissing IEC559 functionality query.\n+\t* include/experimental/bits/simd.h: New file. Definition of the\n+\tpublic simd interfaces and general implementation helpers.\n+\t* include/experimental/bits/simd_builtin.h: New file.\n+\tImplementation of the _VecBuiltin simd_abi.\n+\t* include/experimental/bits/simd_converter.h: New file. Generic\n+\tsimd conversions.\n+\t* include/experimental/bits/simd_detail.h: New file. Internal\n+\tmacros for the simd implementation.\n+\t* include/experimental/bits/simd_fixed_size.h: New file. Simd\n+\tfixed_size ABI specific implementations.\n+\t* include/experimental/bits/simd_math.h: New file. Math\n+\toverloads for simd.\n+\t* include/experimental/bits/simd_neon.h: New file. Simd NEON\n+\tspecific implementations.\n+\t* include/experimental/bits/simd_ppc.h: New file. Implement bit\n+\tshifts to avoid invalid results for integral types smaller than\n+\tint.\n+\t* include/experimental/bits/simd_scalar.h: New file. Simd scalar\n+\tABI specific implementations.\n+\t* include/experimental/bits/simd_x86.h: New file. Simd x86\n+\tspecific implementations.\n+\t* include/experimental/bits/simd_x86_conversions.h: New file.\n+\tx86 specific conversion optimizations. The conversion patterns\n+\twork around missing conversion patterns in the compiler and\n+\tshould be removed as soon as PR85048 is resolved.\n+\t* testsuite/experimental/simd/standard_abi_usable.cc: New file.\n+\tTest that all (not all fixed_size<N>, though) standard simd and\n+\tsimd_mask types are usable.\n+\t* testsuite/experimental/simd/standard_abi_usable_2.cc: New\n+\tfile. As above but with -ffast-math.\n+\t* testsuite/libstdc++-dg/conformance.exp: Don't build simd tests\n+\tfrom the standard test loop. Instead use\n+\tcheck_vect_support_and_set_flags to build simd tests with the\n+\trelevant machine flags.\n+\n+2021-01-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/66414\n+\t* include/bits/string_view.tcc\n+\t(basic_string_view::find(const CharT*, size_type, size_type)):\n+\tOptimize.\n+\n+2021-01-27  Paul Fee  <paul.f.fee@gmail.com>\n+\n+\t* include/bits/basic_string.h (basic_string::contains): New\n+\tmember functions.\n+\t* include/std/string_view (basic_string_view::contains):\n+\tLikewise.\n+\t* include/std/version (__cpp_lib_string_contains): Define.\n+\t* testsuite/21_strings/basic_string/operations/starts_with/char/1.cc:\n+\tRemove trailing whitespace.\n+\t* testsuite/21_strings/basic_string/operations/starts_with/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/operations/contains/char/1.cc: New test.\n+\t* testsuite/21_strings/basic_string/operations/contains/wchar_t/1.cc: New test.\n+\t* testsuite/21_strings/basic_string_view/operations/contains/char/1.cc: New test.\n+\t* testsuite/21_strings/basic_string_view/operations/contains/char/2.cc: New test.\n+\t* testsuite/21_strings/basic_string_view/operations/contains/wchar_t/1.cc: New test.\n+\n 2021-01-21  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* src/c++17/Makefile.in: Regenerate."}]}