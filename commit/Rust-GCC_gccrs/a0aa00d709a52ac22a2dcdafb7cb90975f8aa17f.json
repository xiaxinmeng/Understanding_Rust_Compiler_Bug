{"sha": "a0aa00d709a52ac22a2dcdafb7cb90975f8aa17f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBhYTAwZDcwOWE1MmFjMjJhMmRjZGFmYjdjYjkwOTc1ZjhhYTE3Zg==", "commit": {"author": {"name": "Dorit Nuzman", "email": "dorit@il.ibm.com", "date": "2007-11-04T03:48:58Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2007-11-04T03:48:58Z"}, "message": "re PR tree-optimization/33987 (internal compiler error: in get_initial_def_for_reduction, at tree-vect-transform.c:2110 with -O3 -msse2)\n\n        PR tree-optimization/33987\n        * tree-vect-transform.c (get_initial_def_for_reduction): Fix assert.\n        Fix indentation.\n        (vectorizable_reduction): Add type check.\n\nFrom-SVN: r129880", "tree": {"sha": "8c8b793827442ebc3f1186d3c822f3d4742194b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c8b793827442ebc3f1186d3c822f3d4742194b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0aa00d709a52ac22a2dcdafb7cb90975f8aa17f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0aa00d709a52ac22a2dcdafb7cb90975f8aa17f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0aa00d709a52ac22a2dcdafb7cb90975f8aa17f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0aa00d709a52ac22a2dcdafb7cb90975f8aa17f/comments", "author": null, "committer": null, "parents": [{"sha": "e45d5d63ea5c2b463f9eaf20b373ccef576f1afa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e45d5d63ea5c2b463f9eaf20b373ccef576f1afa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e45d5d63ea5c2b463f9eaf20b373ccef576f1afa"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "81c4241a6cd0b550b8ad5c7a3174049f1cb7f870", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0aa00d709a52ac22a2dcdafb7cb90975f8aa17f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0aa00d709a52ac22a2dcdafb7cb90975f8aa17f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0aa00d709a52ac22a2dcdafb7cb90975f8aa17f", "patch": "@@ -1,3 +1,10 @@\n+2007-11-03  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\tPR tree-optimization/33987\n+\t* tree-vect-transform.c (get_initial_def_for_reduction): Fix assert.\n+\tFix indentation.\n+\t(vectorizable_reduction): Add type check.\n+\n 2007-11-03  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c/29062"}, {"sha": "2cdc79b28e5a7251be9cb60b4dadc64a68026693", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0aa00d709a52ac22a2dcdafb7cb90975f8aa17f/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0aa00d709a52ac22a2dcdafb7cb90975f8aa17f/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=a0aa00d709a52ac22a2dcdafb7cb90975f8aa17f", "patch": "@@ -2107,7 +2107,7 @@ get_initial_def_for_reduction (tree stmt, tree init_val, tree *adjustment_def)\n   tree vector_type;\n   bool nested_in_vect_loop = false; \n \n-  gcc_assert (INTEGRAL_TYPE_P (type) || SCALAR_FLOAT_TYPE_P (type));\n+  gcc_assert (POINTER_TYPE_P (type) || INTEGRAL_TYPE_P (type) || SCALAR_FLOAT_TYPE_P (type));\n   if (nested_in_vect_loop_p (loop, stmt))\n     nested_in_vect_loop = true;\n   else\n@@ -2120,17 +2120,17 @@ get_initial_def_for_reduction (tree stmt, tree init_val, tree *adjustment_def)\n   case WIDEN_SUM_EXPR:\n   case DOT_PROD_EXPR:\n   case PLUS_EXPR:\n-      if (nested_in_vect_loop)\n-\t*adjustment_def = vecdef;\n-      else\n-\t*adjustment_def = init_val;\n-    /* Create a vector of zeros for init_def.  */\n-    if (INTEGRAL_TYPE_P (type))\n-      def_for_init = build_int_cst (type, 0);\n+    if (nested_in_vect_loop)\n+      *adjustment_def = vecdef;\n     else\n+      *adjustment_def = init_val;\n+    /* Create a vector of zeros for init_def.  */\n+    if (SCALAR_FLOAT_TYPE_P (type))\n       def_for_init = build_real (type, dconst0);\n-      for (i = nunits - 1; i >= 0; --i)\n-    t = tree_cons (NULL_TREE, def_for_init, t);\n+    else\n+      def_for_init = build_int_cst (type, 0);\n+    for (i = nunits - 1; i >= 0; --i)\n+      t = tree_cons (NULL_TREE, def_for_init, t);\n     vector_type = get_vectype_for_scalar_type (TREE_TYPE (def_for_init));\n     gcc_assert (vector_type);\n     init_def = build_vector (vector_type, t);\n@@ -2716,6 +2716,9 @@ vectorizable_reduction (tree stmt, block_stmt_iterator *bsi, tree *vec_stmt)\n     return false;\n   scalar_dest = GIMPLE_STMT_OPERAND (stmt, 0);\n   scalar_type = TREE_TYPE (scalar_dest);\n+  if (!POINTER_TYPE_P (scalar_type) && !INTEGRAL_TYPE_P (scalar_type) \n+      && !SCALAR_FLOAT_TYPE_P (scalar_type))\n+    return false;\n \n   /* All uses but the last are expected to be defined in the loop.\n      The last use is the reduction variable.  */"}]}