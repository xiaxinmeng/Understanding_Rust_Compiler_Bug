{"sha": "7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk3M2ZkMmFlZGRiZGQ5ZmM0NTk1ZWYyZDM0ZmE1N2QxYzNjNzVjYg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2005-06-06T21:14:31Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2005-06-06T21:14:31Z"}, "message": "libiberty.h (XOBFINISH): New.\n\nlibiberty/\n2005-06-06  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n\n        * libiberty.h (XOBFINISH): New.\n\ngcc/\n2005-06-06  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n\n        * c-lex.c (lex_string): Use XOBFINISH.\n        * collect2.c (extract_string, dump_file): Likewise.\n        * dbxout.c (dbxout_finish_complex_stabs): Likewise.\n        * gcc.c (init_spec, build_search_list, convert_filename,\n        set_collect_gcc_options, do_spec_2, do_spec_1, main):\n        * Likewise.\n        * genpreds.c (write_predicate_subfunction): Likewise.\n        * genflags.c (main): Likewise.\n        * read-rtl.c (mode_attr_index, apply_macro_to_string,\n        join_c_conditions, read_quoted_string, read_braced_string,\n        read_rtx_1): Likewise.\n        * stringpool.c (ggc_alloc_string): Likewise.\n        * tlink.c (obstack_fgets, recompile_files): Likewise.\n\nFrom-SVN: r100678", "tree": {"sha": "de88f6962c15670e120cf115d8582da8df7bd7b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de88f6962c15670e120cf115d8582da8df7bd7b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b794eaf73ef8df7689d1e9de146e00398f2d1fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b794eaf73ef8df7689d1e9de146e00398f2d1fd"}], "stats": {"total": 97, "additions": 58, "deletions": 39}, "files": [{"sha": "7d5f07c39e5879be2d7134993f72c1e6e8b5d891", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb", "patch": "@@ -1,3 +1,18 @@\n+2005-06-06  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* c-lex.c (lex_string): Use XOBFINISH.\n+\t* collect2.c (extract_string, dump_file): Likewise.\n+\t* dbxout.c (dbxout_finish_complex_stabs): Likewise.\n+\t* gcc.c (init_spec, build_search_list, convert_filename, \n+\tset_collect_gcc_options, do_spec_2, do_spec_1, main): Likewise.\n+\t* genpreds.c (write_predicate_subfunction): Likewise.\n+\t* genflags.c (main): Likewise.\n+\t* read-rtl.c (mode_attr_index, apply_macro_to_string, \n+\tjoin_c_conditions, read_quoted_string, read_braced_string, \n+\tread_rtx_1): Likewise.\n+\t* stringpool.c (ggc_alloc_string): Likewise.\n+\t* tlink.c (obstack_fgets, recompile_files): Likewise.\n+\n 2005-06-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* intl.h (G_): New macro."}, {"sha": "3282dd12f661c33d44c5ec641fa8d6fcf50da980", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb", "patch": "@@ -762,7 +762,7 @@ lex_string (const cpp_token *tok, tree *valp, bool objc_string)\n   /* We have read one more token than we want.  */\n   _cpp_backup_tokens (parse_in, 1);\n   if (concats)\n-    strs = (cpp_string *) obstack_finish (&str_ob);\n+    strs = XOBFINISH (&str_ob, cpp_string *);\n \n   if (concats && !objc_string && !in_system_header)\n     warning (OPT_Wtraditional,"}, {"sha": "98416efb3f21fc01558a7a111fbd7a1814a0186b", "filename": "gcc/collect2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb", "patch": "@@ -453,7 +453,7 @@ extract_string (const char **pp)\n \n   obstack_1grow (&temporary_obstack, '\\0');\n   *pp = p;\n-  return obstack_finish (&temporary_obstack);\n+  return XOBFINISH (&temporary_obstack, char *);\n }\n \f\n void\n@@ -474,7 +474,7 @@ dump_file (const char *name, FILE *to)\n \t  const char *word, *p;\n \t  char *result;\n \t  obstack_1grow (&temporary_obstack, '\\0');\n-\t  word = obstack_finish (&temporary_obstack);\n+\t  word = XOBFINISH (&temporary_obstack, const char *);\n \n \t  if (*word == '.')\n \t    ++word, putc ('.', to);"}, {"sha": "be03d8129bcfd681c509a9ce0c90180d3a2db365", "filename": "gcc/dbxout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb", "patch": "@@ -856,7 +856,7 @@ dbxout_finish_complex_stabs (tree sym, STAB_CODE_TYPE code,\n       obstack_1grow (&stabstr_ob, '\\0');\n \n       len = obstack_object_size (&stabstr_ob);\n-      chunk = str = obstack_finish (&stabstr_ob);\n+      chunk = str = XOBFINISH (&stabstr_ob, char *);\n \n       /* Within the buffer are a sequence of NUL-separated strings,\n \t each of which is to be written out as a separate stab\n@@ -889,7 +889,7 @@ dbxout_finish_complex_stabs (tree sym, STAB_CODE_TYPE code,\n \t comma than to do a two-character fputs.  */\n       obstack_grow (&stabstr_ob, \"\\\",\", 2);\n       len = obstack_object_size (&stabstr_ob);\n-      str = obstack_finish (&stabstr_ob);\n+      str = XOBFINISH (&stabstr_ob, char *);\n       \n       fwrite (str, 1, len, asm_out_file);\n       DBX_FINISH_STABS (sym, code, line, addr, label, number);"}, {"sha": "076d224bebd5d0f0a49b801d6bce02878fddcf2c", "filename": "gcc/gcc.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb", "patch": "@@ -1736,7 +1736,7 @@ init_spec (void)\n       }\n \n     obstack_1grow (&obstack, '\\0');\n-    libgcc_spec = obstack_finish (&obstack);\n+    libgcc_spec = XOBFINISH (&obstack, const char *);\n   }\n #endif\n #ifdef USE_AS_TRADITIONAL_FORMAT\n@@ -1745,14 +1745,14 @@ init_spec (void)\n     static const char tf[] = \"--traditional-format \";\n     obstack_grow (&obstack, tf, sizeof(tf) - 1);\n     obstack_grow0 (&obstack, asm_spec, strlen (asm_spec));\n-    asm_spec = obstack_finish (&obstack);\n+    asm_spec = XOBFINISH (&obstack, const char *);\n   }\n #endif\n #ifdef LINK_EH_SPEC\n   /* Prepend LINK_EH_SPEC to whatever link_spec we had before.  */\n   obstack_grow (&obstack, LINK_EH_SPEC, sizeof(LINK_EH_SPEC) - 1);\n   obstack_grow0 (&obstack, link_spec, strlen (link_spec));\n-  link_spec = obstack_finish (&obstack);\n+  link_spec = XOBFINISH (&obstack, const char *);\n #endif\n \n   specs = sl;\n@@ -2393,7 +2393,7 @@ build_search_list (struct path_prefix *paths, const char *prefix,\n     }\n \n   obstack_1grow (&collect_obstack, '\\0');\n-  return obstack_finish (&collect_obstack);\n+  return XOBFINISH (&collect_obstack, char *);\n }\n \n /* Rebuild the COMPILER_PATH and LIBRARY_PATH environment variables\n@@ -2980,7 +2980,7 @@ convert_filename (const char *name, int do_exe ATTRIBUTE_UNUSED,\n     {\n       obstack_grow (&obstack, name, len - 2);\n       obstack_grow0 (&obstack, TARGET_OBJECT_SUFFIX, strlen (TARGET_OBJECT_SUFFIX));\n-      name = obstack_finish (&obstack);\n+      name = XOBFINISH (&obstack, const char *);\n     }\n #endif\n \n@@ -3001,7 +3001,7 @@ convert_filename (const char *name, int do_exe ATTRIBUTE_UNUSED,\n   obstack_grow (&obstack, name, len);\n   obstack_grow0 (&obstack, TARGET_EXECUTABLE_SUFFIX,\n \t\t strlen (TARGET_EXECUTABLE_SUFFIX));\n-  name = obstack_finish (&obstack);\n+  name = XOBFINISH (&obstack, const char *);\n #endif\n \n   return name;\n@@ -4154,7 +4154,7 @@ set_collect_gcc_options (void)\n \t}\n     }\n   obstack_grow (&collect_obstack, \"\\0\", 1);\n-  putenv (obstack_finish (&collect_obstack));\n+  putenv (XOBFINISH (&collect_obstack, char *));\n }\n \f\n /* Process a spec string, accumulating and running commands.  */\n@@ -4253,7 +4253,7 @@ do_spec_2 (const char *spec)\n   if (arg_going)\n     {\n       obstack_1grow (&obstack, 0);\n-      string = obstack_finish (&obstack);\n+      string = XOBFINISH (&obstack, const char *);\n       if (this_is_library_file)\n \tstring = find_file (string);\n       store_arg (string, delete_this_arg, this_is_output_file);\n@@ -4488,7 +4488,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \tif (arg_going)\n \t  {\n \t    obstack_1grow (&obstack, 0);\n-\t    string = obstack_finish (&obstack);\n+\t    string = XOBFINISH (&obstack, const char *);\n \t    if (this_is_library_file)\n \t      string = find_file (string);\n \t    store_arg (string, delete_this_arg, this_is_output_file);\n@@ -4533,7 +4533,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \tif (arg_going)\n \t  {\n \t    obstack_1grow (&obstack, 0);\n-\t    string = obstack_finish (&obstack);\n+\t    string = XOBFINISH (&obstack, const char *);\n \t    if (this_is_library_file)\n \t      string = find_file (string);\n \t    store_arg (string, delete_this_arg, this_is_output_file);\n@@ -4552,7 +4552,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \tif (arg_going)\n \t  {\n \t    obstack_1grow (&obstack, 0);\n-\t    string = obstack_finish (&obstack);\n+\t    string = XOBFINISH (&obstack, const char *);\n \t    if (this_is_library_file)\n \t      string = find_file (string);\n \t    store_arg (string, delete_this_arg, this_is_output_file);\n@@ -4914,7 +4914,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t      if (arg_going)\n \t\t{\n \t\t  obstack_1grow (&obstack, 0);\n-\t\t  string = obstack_finish (&obstack);\n+\t\t  string = XOBFINISH (&obstack, const char *);\n \t\t  if (this_is_library_file)\n \t\t    string = find_file (string);\n \t\t  store_arg (string, delete_this_arg, this_is_output_file);\n@@ -5243,7 +5243,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n   if (processing_spec_function && arg_going)\n     {\n       obstack_1grow (&obstack, 0);\n-      string = obstack_finish (&obstack);\n+      string = XOBFINISH (&obstack, const char *);\n       if (this_is_library_file)\n         string = find_file (string);\n       store_arg (string, delete_this_arg, this_is_output_file);\n@@ -6037,21 +6037,21 @@ main (int argc, const char **argv)\n       obstack_grow (&multilib_obstack, p, strlen (p));\n \n     obstack_1grow (&multilib_obstack, 0);\n-    multilib_select = obstack_finish (&multilib_obstack);\n+    multilib_select = XOBFINISH (&multilib_obstack, const char *);\n \n     q = multilib_matches_raw;\n     while ((p = *q++) != (char *) 0)\n       obstack_grow (&multilib_obstack, p, strlen (p));\n \n     obstack_1grow (&multilib_obstack, 0);\n-    multilib_matches = obstack_finish (&multilib_obstack);\n+    multilib_matches = XOBFINISH (&multilib_obstack, const char *);\n \n     q = multilib_exclusions_raw;\n     while ((p = *q++) != (char *) 0)\n       obstack_grow (&multilib_obstack, p, strlen (p));\n \n     obstack_1grow (&multilib_obstack, 0);\n-    multilib_exclusions = obstack_finish (&multilib_obstack);\n+    multilib_exclusions = XOBFINISH (&multilib_obstack, const char *);\n \n     need_space = FALSE;\n     for (i = 0; i < ARRAY_SIZE (multilib_defaults_raw); i++)\n@@ -6065,7 +6065,7 @@ main (int argc, const char **argv)\n       }\n \n     obstack_1grow (&multilib_obstack, 0);\n-    multilib_defaults = obstack_finish (&multilib_obstack);\n+    multilib_defaults = XOBFINISH (&multilib_obstack, const char *);\n   }\n \n   /* Set up to remember the pathname of gcc and any options\n@@ -6074,7 +6074,7 @@ main (int argc, const char **argv)\n   obstack_init (&collect_obstack);\n   obstack_grow (&collect_obstack, \"COLLECT_GCC=\", sizeof (\"COLLECT_GCC=\") - 1);\n   obstack_grow (&collect_obstack, argv[0], strlen (argv[0]) + 1);\n-  putenv (obstack_finish (&collect_obstack));\n+  putenv (XOBFINISH (&collect_obstack, char *));\n \n #ifdef INIT_ENVIRONMENT\n   /* Set up any other necessary machine specific environment variables.  */\n@@ -6160,7 +6160,7 @@ main (int argc, const char **argv)\n     {\n       obstack_grow (&obstack, \"%(sysroot_spec) \", strlen (\"%(sysroot_spec) \"));\n       obstack_grow0 (&obstack, link_spec, strlen (link_spec));\n-      set_spec (\"link\", obstack_finish (&obstack));\n+      set_spec (\"link\", XOBFINISH (&obstack, const char *));\n     }\n #endif\n \n@@ -6349,7 +6349,7 @@ main (int argc, const char **argv)\n       obstack_init (&obstack);\n       do_spec_1 (THREAD_MODEL_SPEC, 0, thread_model);\n       obstack_1grow (&obstack, '\\0');\n-      thrmod = obstack_finish (&obstack);\n+      thrmod = XOBFINISH (&obstack, const char *);\n #else\n       thrmod = thread_model;\n #endif\n@@ -7077,7 +7077,7 @@ set_multilib_dir (void)\n \n \t  obstack_grow (&multilib_obstack, start, end - start);\n \t  obstack_1grow (&multilib_obstack, 0);\n-\t  mdswitches[i].str = obstack_finish (&multilib_obstack);\n+\t  mdswitches[i].str = XOBFINISH (&multilib_obstack, const char *);\n \t  mdswitches[i++].len = end - start;\n \n \t  if (*end == '\\0')"}, {"sha": "0710b4a46677f130f0837624c6194654b988b69c", "filename": "gcc/genflags.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb", "patch": "@@ -267,7 +267,7 @@ main (int argc, char **argv)\n   /* Print out the prototypes now.  */\n   dummy = (rtx) 0;\n   obstack_grow (&obstack, &dummy, sizeof (rtx));\n-  insns = (rtx *) obstack_finish (&obstack);\n+  insns = XOBFINISH (&obstack, rtx *);\n \n   for (insn_ptr = insns; *insn_ptr; insn_ptr++)\n     gen_proto (*insn_ptr);"}, {"sha": "e03e609ae985054e2ca55c298966ec42bb8844b1", "filename": "gcc/genpreds.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/gcc%2Fgenpreds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/gcc%2Fgenpreds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpreds.c?ref=7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb", "patch": "@@ -122,7 +122,7 @@ write_predicate_subfunction (struct pred_data *p)\n   obstack_grow (rtl_obstack, p->name, strlen (p->name));\n   obstack_grow (rtl_obstack, \"_1 (op, mode)\",\n \t\tsizeof \"_1 (op, mode)\");\n-  match_test_str = obstack_finish (rtl_obstack);\n+  match_test_str = XOBFINISH (rtl_obstack, const char *);\n \n   /* Add the function-call expression to the complete expression to be\n      evaluated.  */"}, {"sha": "efd1dd44e8f6a8b04c079c1337abbf6751524a08", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb", "patch": "@@ -321,7 +321,7 @@ mode_attr_index (struct map_value **mode_maps, const char *string)\n   /* Copy the attribute string into permanent storage, without the\n      angle brackets around it.  */\n   obstack_grow0 (&string_obstack, string + 1, strlen (string) - 2);\n-  p = (char *) obstack_finish (&string_obstack);\n+  p = XOBFINISH (&string_obstack, char *);\n \n   mv = XNEW (struct map_value);\n   mv->number = *mode_maps == 0 ? 0 : (*mode_maps)->number + 1;\n@@ -404,7 +404,7 @@ apply_macro_to_string (const char *string, struct mapping *macro, int value)\n   if (base != copy)\n     {\n       obstack_grow (&string_obstack, base, strlen (base) + 1);\n-      copy = obstack_finish (&string_obstack);\n+      copy = XOBFINISH (&string_obstack, char *);\n       copy_rtx_ptr_loc (copy, string);\n       return copy;\n     }\n@@ -785,7 +785,7 @@ join_c_conditions (const char *cond1, const char *cond2)\n   obstack_ptr_grow (&joined_conditions_obstack, result);\n   obstack_ptr_grow (&joined_conditions_obstack, cond1);\n   obstack_ptr_grow (&joined_conditions_obstack, cond2);\n-  entry = obstack_finish (&joined_conditions_obstack);\n+  entry = XOBFINISH (&joined_conditions_obstack, const void **);\n   *htab_find_slot (joined_conditions, entry, INSERT) = entry;\n   return result;\n }\n@@ -998,7 +998,7 @@ read_quoted_string (FILE *infile)\n     }\n \n   obstack_1grow (&string_obstack, 0);\n-  return (char *) obstack_finish (&string_obstack);\n+  return XOBFINISH (&string_obstack, char *);\n }\n \n /* Read a braced string (a la Tcl) onto the string obstack.  Caller\n@@ -1036,7 +1036,7 @@ read_braced_string (FILE *infile)\n     }\n \n   obstack_1grow (&string_obstack, 0);\n-  return (char *) obstack_finish (&string_obstack);\n+  return XOBFINISH (&string_obstack, char *);\n }\n \n /* Read some kind of string constant.  This is the high-level routine\n@@ -1581,7 +1581,7 @@ read_rtx_1 (FILE *infile, struct map_value **mode_maps)\n \t      obstack_grow (&string_obstack, fn, strlen (fn));\n \t      sprintf (line_name, \":%d\", read_rtx_lineno);\n \t      obstack_grow (&string_obstack, line_name, strlen (line_name)+1);\n-\t      stringbuf = (char *) obstack_finish (&string_obstack);\n+\t      stringbuf = XOBFINISH (&string_obstack, char *);\n \t    }\n \n \t  if (star_if_braced)"}, {"sha": "f75fb935519e04c542ac0154573dc3c3642c1a1a", "filename": "gcc/stringpool.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/gcc%2Fstringpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/gcc%2Fstringpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstringpool.c?ref=7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb", "patch": "@@ -95,7 +95,7 @@ ggc_alloc_string (const char *contents, int length)\n     return digit_string (contents[0] - '0');\n \n   obstack_grow0 (&string_stack, contents, length);\n-  return obstack_finish (&string_stack);\n+  return XOBFINISH (&string_stack, const char *);\n }\n \n /* Return an IDENTIFIER_NODE whose name is TEXT (a null-terminated string)."}, {"sha": "e8fe756b7627903f4321cfb24c0c353db7c1e859", "filename": "gcc/tlink.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/gcc%2Ftlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/gcc%2Ftlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftlink.c?ref=7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb", "patch": "@@ -311,7 +311,7 @@ obstack_fgets (FILE *stream, struct obstack *ob)\n   if (obstack_object_size (ob) == 0)\n     return NULL;\n   obstack_1grow (ob, '\\0');\n-  return obstack_finish (ob);\n+  return XOBFINISH (ob, char *);\n }\n \n static char *\n@@ -528,7 +528,7 @@ recompile_files (void)\n     done:\n       obstack_ptr_grow (&temporary_obstack, f->main);\n       obstack_ptr_grow (&temporary_obstack, NULL);\n-      argv = obstack_finish (&temporary_obstack);\n+      argv = XOBFINISH (&temporary_obstack, char **);\n \n       if (tlink_verbose)\n \tfprintf (stderr, _(\"collect: recompiling %s\\n\"), f->main);"}, {"sha": "7abdd3de34ed1683a6a95a589f0cc182e84fe44a", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb", "patch": "@@ -1094,7 +1094,7 @@ build_element_name (struct sra_elt *elt)\n {\n   build_element_name_1 (elt);\n   obstack_1grow (&sra_obstack, '\\0');\n-  return obstack_finish (&sra_obstack);\n+  return XOBFINISH (&sra_obstack, char *);\n }\n \n /* Instantiate an element as an independent variable.  */"}, {"sha": "abe0b1b1dd55c6d4441fa49595ab0544ec44b4b5", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb", "patch": "@@ -1,3 +1,7 @@\n+2005-06-06  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* libiberty.h (XOBFINISH): New.\n+\n 2005-06-01  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* libiberty.h (vsnprintf): Add format attribute."}, {"sha": "4b0d532db78f604d82f245420b28a68bc42d1bda", "filename": "include/libiberty.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=7973fd2aeddbdd9fc4595ef2d34fa57d1c3c75cb", "patch": "@@ -326,7 +326,7 @@ extern double physmem_available (void);\n /* Type-safe obstack allocator.  */\n \n #define XOBNEW(O, T)\t\t((T *) obstack_alloc ((O), sizeof (T)))\n-\n+#define XOBFINISH(O, T)         ((T) obstack_finish ((O)))\n \n /* hex character manipulation routines */\n "}]}