{"sha": "830a47ec5e570f36aeee837b24c37caa56cb9da8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMwYTQ3ZWM1ZTU3MGYzNmFlZWU4MzdiMjRjMzdjYWE1NmNiOWRhOA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-08-22T00:39:24Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-08-22T00:39:24Z"}, "message": "caller-save.c: Don't include insn-codes.h.\n\n\t* caller-save.c: Don't include insn-codes.h.\n\t(reg_save_code, reg_restore_code): Make arrays of int.\n\tAll uses updated to match.\n\t(insert_save, insert_restore): No need to initialize \"code\"\n\tvariable upon declaration.\n\t* Makefile.in: update dependencies; fix typo in clean rule.\n\nFrom-SVN: r45087", "tree": {"sha": "1a53ddb527f9eeb29123c7ae6d0597de483b6303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a53ddb527f9eeb29123c7ae6d0597de483b6303"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/830a47ec5e570f36aeee837b24c37caa56cb9da8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/830a47ec5e570f36aeee837b24c37caa56cb9da8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/830a47ec5e570f36aeee837b24c37caa56cb9da8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/830a47ec5e570f36aeee837b24c37caa56cb9da8/comments", "author": null, "committer": null, "parents": [{"sha": "da92057001929e2c650454e11d828d4296217e3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da92057001929e2c650454e11d828d4296217e3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da92057001929e2c650454e11d828d4296217e3d"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "a1069e9b6691a99e89d7b3ee05ac2e775ededced", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/830a47ec5e570f36aeee837b24c37caa56cb9da8/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/830a47ec5e570f36aeee837b24c37caa56cb9da8/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=830a47ec5e570f36aeee837b24c37caa56cb9da8", "patch": "@@ -1515,7 +1515,7 @@ reload1.o : reload1.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) real.h flags.h \\\n    except.h\n caller-save.o : caller-save.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) flags.h \\\n    $(REGS_H) hard-reg-set.h insn-config.h $(BASIC_BLOCK_H) function.h \\\n-   $(RECOG_H) reload.h $(EXPR_H) insn-codes.h toplev.h $(TM_P_H)\n+   $(RECOG_H) reload.h $(EXPR_H) toplev.h $(TM_P_H)\n reorg.o : reorg.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) conditions.h hard-reg-set.h \\\n    $(BASIC_BLOCK_H) $(REGS_H) insn-config.h $(INSN_ATTR_H) \\\n    $(RECOG_H) function.h flags.h output.h $(EXPR_H) toplev.h $(PARAMS_H) $(TM_P_H)\n@@ -2377,7 +2377,7 @@ mostlyclean: $(INTL_MOSTLYCLEAN) lang.mostlyclean\n # that don't exist in the distribution.\n INTL_CLEAN = intl.clean\n clean: mostlyclean $(INTL_CLEAN) lang.clean\n-\t-rm -f libgcc.a libgcc_s$(SHLIB_EXT) libgcc_s$(SHLIB_EXT).0\n+\t-rm -f libgcc.a libgcc_s$(SHLIB_EXT) libgcc_s$(SHLIB_EXT).1\n \t-rm -f config.h tconfig.h hconfig.h tm_p.h\n \t-rm -f cs-*\n \t-rm -rf libgcc"}, {"sha": "6a7f75eb2e0be70ee0a551761f7fd4bbb94f5560", "filename": "gcc/caller-save.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/830a47ec5e570f36aeee837b24c37caa56cb9da8/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/830a47ec5e570f36aeee837b24c37caa56cb9da8/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=830a47ec5e570f36aeee837b24c37caa56cb9da8", "patch": "@@ -31,7 +31,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"reload.h\"\n #include \"function.h\"\n #include \"expr.h\"\n-#include \"insn-codes.h\"\n #include \"toplev.h\"\n #include \"tm_p.h\"\n \n@@ -65,9 +64,9 @@ static rtx\n    when we emit them, the addresses might not be valid, so they might not\n    be recognized.  */\n \n-static enum insn_code \n+static int\n   reg_save_code[FIRST_PSEUDO_REGISTER][MAX_MACHINE_MODE];\n-static enum insn_code \n+static int \n   reg_restore_code[FIRST_PSEUDO_REGISTER][MAX_MACHINE_MODE];\n \n /* Set of hard regs currently residing in save area (during insn scan).  */\n@@ -95,7 +94,7 @@ static int insert_save\t\t\tPARAMS ((struct insn_chain *, int, int,\n static int insert_restore\t\tPARAMS ((struct insn_chain *, int, int,\n \t\t\t\t\t\t int, enum machine_mode *));\n static struct insn_chain *insert_one_insn PARAMS ((struct insn_chain *, int,\n-\t\t\t\t\t\t   enum insn_code, rtx));\n+\t\t\t\t\t\t   int, rtx));\n static void add_stored_regs\t\tPARAMS ((rtx, rtx, void *));\n \f\n /* Initialize for caller-save.\n@@ -199,8 +198,8 @@ init_caller_save ()\n \n \t  /* Now extract both insns and see if we can meet their\n              constraints.  */\n-\t  ok = (reg_save_code[i][mode] != (enum insn_code)-1\n-\t\t&& reg_restore_code[i][mode] != (enum insn_code)-1);\n+\t  ok = (reg_save_code[i][mode] != -1\n+\t\t&& reg_restore_code[i][mode] != -1);\n \t  if (ok)\n \t    {\n \t      extract_insn (saveinsn);\n@@ -211,18 +210,18 @@ init_caller_save ()\n \n \t  if (! ok)\n \t    {\n-\t      reg_save_code[i][mode] = (enum insn_code) -1;\n-\t      reg_restore_code[i][mode] = (enum insn_code) -1;\n+\t      reg_save_code[i][mode] = -1;\n+\t      reg_restore_code[i][mode] = -1;\n \t    }\n         }\n       else\n \t{\n-\t  reg_save_code[i][mode] = (enum insn_code) -1;\n-\t  reg_restore_code[i][mode] = (enum insn_code) -1;\n+\t  reg_save_code[i][mode] = -1;\n+\t  reg_restore_code[i][mode] = -1;\n \t}\n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     for (j = 1; j <= MOVE_MAX_WORDS; j++)\n-      if (reg_save_code [i][regno_save_mode[i][j]] == (enum insn_code) -1)\n+      if (reg_save_code [i][regno_save_mode[i][j]] == -1)\n \t{\n \t  regno_save_mode[i][j] = VOIDmode;\n \t  if (j == 1)\n@@ -630,7 +629,7 @@ insert_restore (chain, before_p, regno, maxrestore, save_mode)\n {\n   int i, k;\n   rtx pat = NULL_RTX;\n-  enum insn_code code = CODE_FOR_nothing;\n+  int code;\n   unsigned int numregs = 0;\n   struct insn_chain *new;\n   rtx mem;\n@@ -708,7 +707,7 @@ insert_save (chain, before_p, regno, to_save, save_mode)\n   int i;\n   unsigned int k;\n   rtx pat = NULL_RTX;\n-  enum insn_code code = CODE_FOR_nothing;\n+  int code;\n   unsigned int numregs = 0;\n   struct insn_chain *new;\n   rtx mem;\n@@ -776,7 +775,7 @@ static struct insn_chain *\n insert_one_insn (chain, before_p, code, pat)\n      struct insn_chain *chain;\n      int before_p;\n-     enum insn_code code;\n+     int code;\n      rtx pat;\n {\n   rtx insn = chain->insn;"}]}