{"sha": "ee94fce6ef0432857717b93bdb1aae415ae6e4d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU5NGZjZTZlZjA0MzI4NTc3MTdiOTNiZGIxYWFlNDE1YWU2ZTRkNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-09-05T07:31:27Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-09-05T07:31:27Z"}, "message": "Makefile.in (CXX_TREE_H): Add dependency on HTAB_H.\n\n\t* Makefile.in (CXX_TREE_H): Add dependency on HTAB_H.\n\t(pt.o): Remove dependency on HTAB_H.\n\t* cp-tree.h: Include hashtab.h.\n\t(walk_tree): Change prototype.\n\t(walk_tree_without_duplicates): New function.\n\t* decl.c (check_default_argument): Use it.\n\t* optimize.c (remap_decl): Adjust calls to walk_tree.\n\t(copy_body): Likewise.\n\t(expand_calls_inline): Likewise.\n\t(calls_setjmp_p): Use walk_tree_without_duplicates.\n\t* pt.c: Don't include hashtab.h.\n\t(for_each_template_parm): Use walk_tree_without_duplicates.\n\t* semantics.c (finish-stmt_tree): Likewise.\n\t(expand_body): Likewise.\n\t* tree.c (walk_tree): Add additional parameter.\n\t(walk_tree_without_duplicates): New function.\n\t(count_trees): Use it.\n\t(verify_stmt_tree): Adjust call to walk_tree.\n\t(find_tree): Use walk_tree_without_duplicates.\n\t(no_linkage_check): Likewise.\n\t(break_out_target_exprs): Adjust call to walk_tree.\n\t(cp_unsave): Likewise.\n\nFrom-SVN: r36155", "tree": {"sha": "725343e2ca5ef39491e3d69fbb346fbb1fac15b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/725343e2ca5ef39491e3d69fbb346fbb1fac15b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee94fce6ef0432857717b93bdb1aae415ae6e4d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee94fce6ef0432857717b93bdb1aae415ae6e4d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee94fce6ef0432857717b93bdb1aae415ae6e4d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee94fce6ef0432857717b93bdb1aae415ae6e4d6/comments", "author": null, "committer": null, "parents": [{"sha": "c0712acbc7117096c29ef8febd01a882779c31e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0712acbc7117096c29ef8febd01a882779c31e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0712acbc7117096c29ef8febd01a882779c31e0"}], "stats": {"total": 137, "additions": 103, "deletions": 34}, "files": [{"sha": "32b7c0806ae3c156e929867b7783070694dbc343", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee94fce6ef0432857717b93bdb1aae415ae6e4d6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee94fce6ef0432857717b93bdb1aae415ae6e4d6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ee94fce6ef0432857717b93bdb1aae415ae6e4d6", "patch": "@@ -1,3 +1,28 @@\n+2000-09-05  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* Makefile.in (CXX_TREE_H): Add dependency on HTAB_H.\n+\t(pt.o): Remove dependency on HTAB_H.\n+\t* cp-tree.h: Include hashtab.h.\n+\t(walk_tree): Change prototype.\n+\t(walk_tree_without_duplicates): New function.\n+\t* decl.c (check_default_argument): Use it.\n+\t* optimize.c (remap_decl): Adjust calls to walk_tree.\n+\t(copy_body): Likewise.\n+\t(expand_calls_inline): Likewise.\n+\t(calls_setjmp_p): Use walk_tree_without_duplicates.\n+\t* pt.c: Don't include hashtab.h.\n+\t(for_each_template_parm): Use walk_tree_without_duplicates.\n+\t* semantics.c (finish-stmt_tree): Likewise.\n+\t(expand_body): Likewise.\n+\t* tree.c (walk_tree): Add additional parameter.\n+\t(walk_tree_without_duplicates): New function.\n+\t(count_trees): Use it.\n+\t(verify_stmt_tree): Adjust call to walk_tree.\n+\t(find_tree): Use walk_tree_without_duplicates.\n+\t(no_linkage_check): Likewise.\n+\t(break_out_target_exprs): Adjust call to walk_tree.\n+\t(cp_unsave): Likewise.\n+\n 2000-09-04  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \t* cp-tree.def (BOUND_TEMPLATE_TEMPLATE_PARM): New tree code."}, {"sha": "025ae06448f2d5ebc2a3887f91a3c796bd35d2b8", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee94fce6ef0432857717b93bdb1aae415ae6e4d6/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee94fce6ef0432857717b93bdb1aae415ae6e4d6/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=ee94fce6ef0432857717b93bdb1aae415ae6e4d6", "patch": "@@ -208,7 +208,7 @@ TREE_H = $(srcdir)/../tree.h $(srcdir)/../real.h $(srcdir)/../tree.def \\\n CXX_TREE_H = $(TREE_H) cp-tree.h $(srcdir)/../c-common.h cp-tree.def \\\n \t$(srcdir)/../c-common.def $(srcdir)/../function.h $(srcdir)/../varray.h \\\n \t$(srcdir)/../../include/splay-tree.h \\\n-\t$(srcdir)/../system.h $(CONFIG_H)\n+\t$(srcdir)/../system.h $(CONFIG_H) $(HTAB_H)\n PARSE_H = $(srcdir)/parse.h\n PARSE_C = $(srcdir)/parse.c\n EXPR_H = $(srcdir)/../expr.h ../insn-codes.h\n@@ -299,7 +299,7 @@ xref.o : xref.c $(CXX_TREE_H) $(srcdir)/../input.h \\\n   $(srcdir)/../toplev.h\n pt.o : pt.c $(CXX_TREE_H) decl.h $(PARSE_H) lex.h \\\n   $(srcdir)/../toplev.h $(GGC_H) $(RTL_H) \\\n-  $(srcdir)/../except.h $(HTAB_H)\n+  $(srcdir)/../except.h\n error.o : error.c $(CXX_TREE_H) \\\n   $(srcdir)/../toplev.h $(srcdir)/../diagnostic.h\n errfn.o : errfn.c $(CXX_TREE_H) \\"}, {"sha": "44c7168a80e90567dba4ea98c3a70d6b61fcf882", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee94fce6ef0432857717b93bdb1aae415ae6e4d6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee94fce6ef0432857717b93bdb1aae415ae6e4d6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ee94fce6ef0432857717b93bdb1aae415ae6e4d6", "patch": "@@ -21,6 +21,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #include \"function.h\"\n+#include \"hashtab.h\"\n #include \"splay-tree.h\"\n #include \"varray.h\"\n \n@@ -4535,7 +4536,13 @@ extern tree build_dummy_object\t\t\tPARAMS ((tree));\n extern tree maybe_dummy_object\t\t\tPARAMS ((tree, tree *));\n extern int is_dummy_object\t\t\tPARAMS ((tree));\n typedef tree (*walk_tree_fn)                    PARAMS ((tree *, int *, void *));\n-extern tree walk_tree                           PARAMS ((tree *, walk_tree_fn, void *));\n+extern tree walk_tree                           PARAMS ((tree *,\n+\t\t\t\t\t\t\t walk_tree_fn,\n+\t\t\t\t\t\t\t void *, \n+\t\t\t\t\t\t\t htab_t));\n+extern tree walk_tree_without_duplicates        PARAMS ((tree *,\n+\t\t\t\t\t\t\t walk_tree_fn,\n+\t\t\t\t\t\t\t void *));\n extern tree copy_tree_r                         PARAMS ((tree *, int *, void *));\n extern int cp_valid_lang_attribute\t\tPARAMS ((tree, tree, tree, tree));\n extern tree make_ptrmem_cst                     PARAMS ((tree, tree));"}, {"sha": "63c2ea8b53d4012d8173c6b4a073d397e9a64e74", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee94fce6ef0432857717b93bdb1aae415ae6e4d6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee94fce6ef0432857717b93bdb1aae415ae6e4d6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ee94fce6ef0432857717b93bdb1aae415ae6e4d6", "patch": "@@ -11946,7 +11946,8 @@ check_default_argument (decl, arg)\n \n      The keyword `this' shall not be used in a default argument of a\n      member function.  */\n-  var = walk_tree (&arg, local_variable_p_walkfn, NULL);\n+  var = walk_tree_without_duplicates (&arg, local_variable_p_walkfn, \n+\t\t\t\t      NULL);\n   if (var)\n     {\n       cp_error (\"default argument `%E' uses local variable `%D'\","}, {"sha": "d80877c204513de3e380143183cb79bcd7cf5122", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee94fce6ef0432857717b93bdb1aae415ae6e4d6/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee94fce6ef0432857717b93bdb1aae415ae6e4d6/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=ee94fce6ef0432857717b93bdb1aae415ae6e4d6", "patch": "@@ -109,16 +109,16 @@ remap_decl (decl, id)\n       /* The decl T could be a dynamic array or other variable size type,\n \t in which case some fields need to be remapped because they may\n \t contain SAVE_EXPRs.  */\n-      walk_tree (&DECL_SIZE (t), copy_body_r, id);\n-      walk_tree (&DECL_SIZE_UNIT (t), copy_body_r, id);\n+      walk_tree (&DECL_SIZE (t), copy_body_r, id, NULL);\n+      walk_tree (&DECL_SIZE_UNIT (t), copy_body_r, id, NULL);\n       if (TREE_TYPE (t) && TREE_CODE (TREE_TYPE (t)) == ARRAY_TYPE\n \t  && TYPE_DOMAIN (TREE_TYPE (t)))\n \t{\n \t  TREE_TYPE (t) = copy_node (TREE_TYPE (t));\n \t  TYPE_DOMAIN (TREE_TYPE (t)) \n \t    = copy_node (TYPE_DOMAIN (TREE_TYPE (t)));\n \t  walk_tree (&TYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (t))),\n-\t\t     copy_body_r, id);\n+\t\t     copy_body_r, id, NULL);\n \t}\n \n       /* Remember it, so that if we encounter this local entity\n@@ -356,7 +356,7 @@ copy_body (id)\n   tree body;\n \n   body = DECL_SAVED_TREE (VARRAY_TOP_TREE (id->fns));\n-  walk_tree (&body, copy_body_r, id);\n+  walk_tree (&body, copy_body_r, id, NULL);\n \n   return body;\n }\n@@ -636,7 +636,8 @@ expand_call_inline (tp, walk_subtrees, data)\n \t{\n \t  if (i == 2)\n \t    ++id->in_target_cleanup_p;\n-\t  walk_tree (&TREE_OPERAND (*tp, i), expand_call_inline, data);\n+\t  walk_tree (&TREE_OPERAND (*tp, i), expand_call_inline, data,\n+\t\t     NULL);\n \t  if (i == 2)\n \t    --id->in_target_cleanup_p;\n \t}\n@@ -792,7 +793,7 @@ expand_calls_inline (tp, id)\n {\n   /* Search through *TP, replacing all calls to inline functions by\n      appropriate equivalents.  */\n-  walk_tree (tp, expand_call_inline, id);\n+  walk_tree (tp, expand_call_inline, id, NULL);\n }\n \n /* Optimize the body of FN.  */\n@@ -879,8 +880,9 @@ int\n calls_setjmp_p (fn)\n      tree fn;\n {\n-  return (walk_tree (&DECL_SAVED_TREE (fn), calls_setjmp_r, NULL) \n-\t  != NULL_TREE);\n+  return walk_tree_without_duplicates (&DECL_SAVED_TREE (fn), \n+\t\t\t\t       calls_setjmp_r, \n+\t\t\t\t       NULL) != NULL_TREE;\n }\n \n /* FN is a function that has a complete body.  Clone the body as"}, {"sha": "b50f79fc8dccebd2351df3ac8cd5c09be001755a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee94fce6ef0432857717b93bdb1aae415ae6e4d6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee94fce6ef0432857717b93bdb1aae415ae6e4d6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ee94fce6ef0432857717b93bdb1aae415ae6e4d6", "patch": "@@ -43,7 +43,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"rtl.h\"\n #include \"defaults.h\"\n #include \"ggc.h\"\n-#include \"hashtab.h\"\n #include \"timevar.h\"\n \n /* The type of functions taking a tree, and some additional data, and\n@@ -4276,7 +4275,9 @@ for_each_template_parm (t, fn, data)\n   pfd.data = data;\n \n   /* Walk the tree.  */\n-  return walk_tree (&t, for_each_template_parm_r, &pfd) != NULL_TREE;\n+  return walk_tree_without_duplicates (&t, \n+\t\t\t\t       for_each_template_parm_r, \n+\t\t\t\t       &pfd) != NULL_TREE;\n }\n \n int"}, {"sha": "7c46d1da5f658f03e9c99fc5a35f6f128f6a0271", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee94fce6ef0432857717b93bdb1aae415ae6e4d6/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee94fce6ef0432857717b93bdb1aae415ae6e4d6/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=ee94fce6ef0432857717b93bdb1aae415ae6e4d6", "patch": "@@ -2324,7 +2324,7 @@ finish_stmt_tree (t)\n   /* Remove unused decls from the stmt tree.  walk_tree messes with\n      the line number, so save/restore it.  */\n   old_lineno = lineno;\n-  walk_tree (t, prune_unused_decls, 0);\n+  walk_tree_without_duplicates (t, prune_unused_decls, NULL);\n   lineno = old_lineno;\n \n   if (cfun)\n@@ -2639,7 +2639,9 @@ expand_body (fn)\n     }\n \n   /* Replace AGGR_INIT_EXPRs with appropriate CALL_EXPRs.  */\n-  walk_tree (&DECL_SAVED_TREE (fn), simplify_aggr_init_exprs_r, NULL);\n+  walk_tree_without_duplicates (&DECL_SAVED_TREE (fn),\n+\t\t\t\tsimplify_aggr_init_exprs_r,\n+\t\t\t\tNULL);\n \n   /* If this is a constructor or destructor body, we have to clone it\n      under the new ABI.  */"}, {"sha": "0c51f5473e0b02c4636ba52db6cf1c05f714a9a4", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 49, "deletions": 18, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee94fce6ef0432857717b93bdb1aae415ae6e4d6/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee94fce6ef0432857717b93bdb1aae415ae6e4d6/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=ee94fce6ef0432857717b93bdb1aae415ae6e4d6", "patch": "@@ -26,7 +26,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree.h\"\n #include \"cp-tree.h\"\n #include \"flags.h\"\n-#include \"hashtab.h\"\n #include \"rtl.h\"\n #include \"toplev.h\"\n #include \"ggc.h\"\n@@ -1224,31 +1223,45 @@ copy_template_template_parm (t, newargs)\n /* Apply FUNC to all the sub-trees of TP in a pre-order traversal.\n    FUNC is called with the DATA and the address of each sub-tree.  If\n    FUNC returns a non-NULL value, the traversal is aborted, and the\n-   value returned by FUNC is returned.  */\n+   value returned by FUNC is returned.  The FLAGS govern the way in\n+   which nodes are walked.  If HTAB is non-NULL it is used to record\n+   the nodes visited, and to avoid visiting a node more than once.  */\n \n tree \n-walk_tree (tp, func, data)\n+walk_tree (tp, func, data, htab)\n      tree *tp;\n      walk_tree_fn func;\n      void *data;\n+     htab_t htab;\n {\n   enum tree_code code;\n   int walk_subtrees;\n   tree result;\n   \n-#define WALK_SUBTREE(NODE)\t\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      result = walk_tree (&(NODE), func, data);\t\\\n-      if (result)\t\t\t\t\\\n-\treturn result;\t\t\t\t\\\n-    }\t\t\t\t\t\t\\\n+#define WALK_SUBTREE(NODE)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      result = walk_tree (&(NODE), func, data, htab);\t\\\n+      if (result)\t\t\t\t\t\\\n+\treturn result;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n   while (0)\n \n   /* Skip empty subtrees.  */\n   if (!*tp)\n     return NULL_TREE;\n \n+  if (htab) {\n+    void **slot;\n+    /* Don't walk the same tree twice, if the user has requested that we\n+       avoid doing so. */\n+    if (htab_find (htab, *tp))\n+      return NULL_TREE;\n+    /* If we haven't already seen this node, add it to the table. */\n+    slot = htab_find_slot (htab, *tp, INSERT);\n+    *slot = *tp;\n+  }\n+\n   /* Call the function.  */\n   walk_subtrees = 1;\n   result = (*func) (tp, &walk_subtrees, data);\n@@ -1423,6 +1436,24 @@ walk_tree (tp, func, data)\n #undef WALK_SUBTREE\n }\n \n+/* Like walk_tree, but does not walk duplicate nodes more than \n+   once.  */\n+\n+tree \n+walk_tree_without_duplicates (tp, func, data)\n+     tree *tp;\n+     walk_tree_fn func;\n+     void *data;\n+{\n+  tree result;\n+  htab_t htab;\n+\n+  htab = htab_create (37, htab_hash_pointer, htab_eq_pointer, NULL);\n+  result = walk_tree (tp, func, data, htab);\n+  htab_delete (htab);\n+  return result;\n+}\n+\n /* Called from count_trees via walk_tree.  */\n \n static tree\n@@ -1443,7 +1474,7 @@ count_trees (t)\n      tree t;\n {\n   int n_trees = 0;\n-  walk_tree (&t, count_trees_r, &n_trees);\n+  walk_tree_without_duplicates (&t, count_trees_r, &n_trees);\n   return n_trees;\n }  \n \n@@ -1483,7 +1514,7 @@ verify_stmt_tree (t)\n {\n   htab_t statements;\n   statements = htab_create (37, htab_hash_pointer, htab_eq_pointer, NULL);\n-  walk_tree (&t, verify_stmt_tree_r, &statements);\n+  walk_tree (&t, verify_stmt_tree_r, &statements, NULL);\n   htab_delete (statements);\n }\n \n@@ -1508,7 +1539,7 @@ find_tree (t, x)\n      tree t;\n      tree x;\n {\n-  return walk_tree (&t, find_tree_r, x);\n+  return walk_tree_without_duplicates (&t, find_tree_r, x);\n }\n \n /* Passed to walk_tree.  Checks for the use of types with no linkage.  */\n@@ -1541,7 +1572,7 @@ no_linkage_check (t)\n   if (processing_template_decl)\n     return NULL_TREE;\n \n-  t = walk_tree (&t, no_linkage_helper, NULL);\n+  t = walk_tree_without_duplicates (&t, no_linkage_helper, NULL);\n   if (t != error_mark_node)\n     return t;\n   return NULL_TREE;\n@@ -1736,8 +1767,8 @@ break_out_target_exprs (t)\n     target_remap = splay_tree_new (splay_tree_compare_pointers, \n \t\t\t\t   /*splay_tree_delete_key_fn=*/NULL, \n \t\t\t\t   /*splay_tree_delete_value_fn=*/NULL);\n-  walk_tree (&t, bot_manip, target_remap);\n-  walk_tree (&t, bot_replace, target_remap);\n+  walk_tree (&t, bot_manip, target_remap, NULL);\n+  walk_tree (&t, bot_replace, target_remap, NULL);\n \n   if (!--target_remap_count)\n     {\n@@ -2520,10 +2551,10 @@ cp_unsave (tp)\n   st = splay_tree_new (splay_tree_compare_pointers, NULL, NULL);\n \n   /* Walk the tree once figuring out what needs to be remapped.  */\n-  walk_tree (tp, mark_local_for_remap_r, st);\n+  walk_tree (tp, mark_local_for_remap_r, st, NULL);\n \n   /* Walk the tree again, copying, remapping, and unsaving.  */\n-  walk_tree (tp, cp_unsave_r, st);\n+  walk_tree (tp, cp_unsave_r, st, NULL);\n \n   /* Clean up.  */\n   splay_tree_delete (st);"}]}