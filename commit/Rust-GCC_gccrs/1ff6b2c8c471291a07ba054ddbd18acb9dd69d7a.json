{"sha": "1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZmNmIyYzhjNDcxMjkxYTA3YmEwNTRkZGJkMThhY2I5ZGQ2OWQ3YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-02-18T19:58:41Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-02-18T19:58:41Z"}, "message": "re PR c++/43108 (mixed complex<T> multiplication horribly inefficient)\n\n\tPR c++/43108\n\t* typeck.c (cp_build_binary_op): Adapt mixed complex/non handling from\n\tC build_binary_op.\n\t* cp-tree.h (WANT_VECTOR_OR_COMPLEX): Rename from WANT_VECTOR.\n\t* cvt.c (build_expr_type_conversion): Allow COMPLEX_TYPE.\n\nFrom-SVN: r156874", "tree": {"sha": "651108caa02b6a01d8cc48219d48abf71d7fb4e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/651108caa02b6a01d8cc48219d48abf71d7fb4e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "86866b288ea526e0f6721cebb78d0dc5c2126254", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86866b288ea526e0f6721cebb78d0dc5c2126254", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86866b288ea526e0f6721cebb78d0dc5c2126254"}], "stats": {"total": 139, "additions": 123, "deletions": 16}, "files": [{"sha": "3140ecf92616631508fdf4cc64d38d08dbbd1fcd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a", "patch": "@@ -1,5 +1,11 @@\n 2010-02-18  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/43108\n+\t* typeck.c (cp_build_binary_op): Adapt mixed complex/non handling from\n+\tC build_binary_op.\n+\t* cp-tree.h (WANT_VECTOR_OR_COMPLEX): Rename from WANT_VECTOR.\n+\t* cvt.c (build_expr_type_conversion): Allow COMPLEX_TYPE.\n+\n \tPR c++/43070\n \t* semantics.c (finish_goto_stmt): Don't call decay_conversion.\n "}, {"sha": "aff3f9182b9f6a3e22fd7c4756846267be6544ec", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a", "patch": "@@ -4167,8 +4167,8 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, TYPENAME_FLAG };\n #define WANT_ENUM\t4 /* enumerated types */\n #define WANT_POINTER\t8 /* pointer types */\n #define WANT_NULL      16 /* null pointer constant */\n-#define WANT_VECTOR    32 /* vector types */\n-#define WANT_ARITH\t(WANT_INT | WANT_FLOAT | WANT_VECTOR)\n+#define WANT_VECTOR_OR_COMPLEX 32 /* vector or complex types */\n+#define WANT_ARITH\t(WANT_INT | WANT_FLOAT | WANT_VECTOR_OR_COMPLEX)\n \n /* Used with comptypes, and related functions, to guide type\n    comparison.  */"}, {"sha": "344816ccd92037f5ea8f39d0cae80266e1b8b74d", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a", "patch": "@@ -1170,8 +1170,9 @@ build_expr_type_conversion (int desires, tree expr, bool complain)\n \treturn (desires & WANT_POINTER) ? decay_conversion (expr)\n \t\t\t\t\t: NULL_TREE;\n \n+      case COMPLEX_TYPE:\n       case VECTOR_TYPE:\n-\tif ((desires & WANT_VECTOR) == 0)\n+\tif ((desires & WANT_VECTOR_OR_COMPLEX) == 0)\n \t  return NULL_TREE;\n \tswitch (TREE_CODE (TREE_TYPE (basetype)))\n \t  {\n@@ -1226,8 +1227,9 @@ build_expr_type_conversion (int desires, tree expr, bool complain)\n \tcase POINTER_TYPE:\n \t  win = (desires & WANT_POINTER); break;\n \n+\tcase COMPLEX_TYPE:\n \tcase VECTOR_TYPE:\n-\t  if ((desires & WANT_VECTOR) == 0)\n+\t  if ((desires & WANT_VECTOR_OR_COMPLEX) == 0)\n \t    break;\n \t  switch (TREE_CODE (TREE_TYPE (candidate)))\n \t    {"}, {"sha": "01384de9263426e25733cc1ae118a40a11c27388", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 78, "deletions": 2, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a", "patch": "@@ -4230,7 +4230,83 @@ cp_build_binary_op (location_t location,\n \n   if (arithmetic_types_p)\n     {\n-      int none_complex = (code0 != COMPLEX_TYPE && code1 != COMPLEX_TYPE);\n+      bool first_complex = (code0 == COMPLEX_TYPE);\n+      bool second_complex = (code1 == COMPLEX_TYPE);\n+      int none_complex = (!first_complex && !second_complex);\n+\n+      /* Adapted from patch for c/24581.  */\n+      if (first_complex != second_complex\n+\t  && (code == PLUS_EXPR\n+\t      || code == MINUS_EXPR\n+\t      || code == MULT_EXPR\n+\t      || (code == TRUNC_DIV_EXPR && first_complex))\n+\t  && TREE_CODE (TREE_TYPE (result_type)) == REAL_TYPE\n+\t  && flag_signed_zeros)\n+\t{\n+\t  /* An operation on mixed real/complex operands must be\n+\t     handled specially, but the language-independent code can\n+\t     more easily optimize the plain complex arithmetic if\n+\t     -fno-signed-zeros.  */\n+\t  tree real_type = TREE_TYPE (result_type);\n+\t  tree real, imag;\n+\t  if (first_complex)\n+\t    {\n+\t      if (TREE_TYPE (op0) != result_type)\n+\t\top0 = cp_convert_and_check (result_type, op0);\n+\t      if (TREE_TYPE (op1) != real_type)\n+\t\top1 = cp_convert_and_check (real_type, op1);\n+\t    }\n+\t  else\n+\t    {\n+\t      if (TREE_TYPE (op0) != real_type)\n+\t\top0 = cp_convert_and_check (real_type, op0);\n+\t      if (TREE_TYPE (op1) != result_type)\n+\t\top1 = cp_convert_and_check (result_type, op1);\n+\t    }\n+\t  if (TREE_CODE (op0) == ERROR_MARK || TREE_CODE (op1) == ERROR_MARK)\n+\t    return error_mark_node;\n+\t  if (first_complex)\n+\t    {\n+\t      op0 = save_expr (op0);\n+\t      real = cp_build_unary_op (REALPART_EXPR, op0, 1, complain);\n+\t      imag = cp_build_unary_op (IMAGPART_EXPR, op0, 1, complain);\n+\t      switch (code)\n+\t\t{\n+\t\tcase MULT_EXPR:\n+\t\tcase TRUNC_DIV_EXPR:\n+\t\t  imag = build2 (resultcode, real_type, imag, op1);\n+\t\t  /* Fall through.  */\n+\t\tcase PLUS_EXPR:\n+\t\tcase MINUS_EXPR:\n+\t\t  real = build2 (resultcode, real_type, real, op1);\n+\t\t  break;\n+\t\tdefault:\n+\t\t  gcc_unreachable();\n+\t\t}\n+\t    }\n+\t  else\n+\t    {\n+\t      op1 = save_expr (op1);\n+\t      real = cp_build_unary_op (REALPART_EXPR, op1, 1, complain);\n+\t      imag = cp_build_unary_op (IMAGPART_EXPR, op1, 1, complain);\n+\t      switch (code)\n+\t\t{\n+\t\tcase MULT_EXPR:\n+\t\t  imag = build2 (resultcode, real_type, op0, imag);\n+\t\t  /* Fall through.  */\n+\t\tcase PLUS_EXPR:\n+\t\t  real = build2 (resultcode, real_type, op0, real);\n+\t\t  break;\n+\t\tcase MINUS_EXPR:\n+\t\t  real = build2 (resultcode, real_type, op0, real);\n+\t\t  imag = build1 (NEGATE_EXPR, real_type, imag);\n+\t\t  break;\n+\t\tdefault:\n+\t\t  gcc_unreachable();\n+\t\t}\n+\t    }\n+\t  return build2 (COMPLEX_EXPR, result_type, real, imag);\n+\t}\n \n       /* For certain operations (which identify themselves by shorten != 0)\n \t if both args were extended from the same smaller type,\n@@ -4615,7 +4691,7 @@ cp_build_unary_op (enum tree_code code, tree xarg, int noconvert,\n \t    arg = default_conversion (arg);\n \t}\n       else if (!(arg = build_expr_type_conversion (WANT_INT | WANT_ENUM\n-\t\t\t\t\t\t   | WANT_VECTOR,\n+\t\t\t\t\t\t   | WANT_VECTOR_OR_COMPLEX,\n \t\t\t\t\t\t   arg, true)))\n \terrstring = _(\"wrong type argument to bit-complement\");\n       else if (!noconvert && CP_INTEGRAL_TYPE_P (TREE_TYPE (arg)))"}, {"sha": "db7fa4192f93f5145f1bc2637abafe7e473bb52c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a", "patch": "@@ -1,5 +1,16 @@\n 2010-02-18  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/43108\n+\t* c-c++-common/complex-sign.h,\n+\tc-c++-common/complex-sign-add.c,\n+\tc-c++-common/complex-sign-mixed-add.c,\n+\tc-c++-common/complex-sign-mixed-div.c,\n+\tc-c++-common/complex-sign-mixed-mul.c,\n+\tc-c++-common/complex-sign-mixed-sub.c,\n+\tc-c++-common/complex-sign-mul.c,\n+\tc-c++-common/complex-sign-sub.c: Move from gcc.dg/torture.\n+\tAdapt for C++ compilation as well.\n+\n \tPR c++/43070\n \t* g++.dg/ext/label1.C: Update.\n \t* g++.dg/ext/label2.C: Update."}, {"sha": "cdf832d630d2546c718deba30f0a64bb47dce7a4", "filename": "gcc/testsuite/c-c++-common/complex-alias-1.c", "status": "renamed", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-alias-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-alias-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-alias-1.c?ref=1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a", "patch": "@@ -1,9 +1,15 @@\n /* Accesses to complex numbers were sometimes marked as scalar and\n    sometimes as struct accesses.  */\n /* { dg-do run } */\n-/* { dg-options \"-std=c99\" } */\n+/* { dg-options \"-std=c99\" { target c } } */\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n extern void abort (void);\n+#ifdef __cplusplus\n+}\n+#endif\n static double _Complex *fp_cxd(double _Complex *cx) {\n   return cx;\n }", "previous_filename": "gcc/testsuite/gcc.dg/torture/complex-alias-1.c"}, {"sha": "e81223224dcfd0e516d5d03352c8c31493860e5e", "filename": "gcc/testsuite/c-c++-common/complex-sign-add.c", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-add.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-add.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-add.c?ref=1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a", "patch": "@@ -1,7 +1,7 @@\n /* Test complex arithmetic with signed zeros.  Pure complex\n    addition.  */\n /* { dg-do run } */\n-/* { dg-options \"-std=gnu99\" } */\n+/* { dg-options \"-std=gnu99\" { target c } } */\n \n #include \"complex-sign.h\"\n ", "previous_filename": "gcc/testsuite/gcc.dg/torture/complex-sign-add.c"}, {"sha": "d1e20912ae14bd23bcabd9a0b54a1cfb265046b8", "filename": "gcc/testsuite/c-c++-common/complex-sign-mixed-add.c", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-mixed-add.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-mixed-add.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-mixed-add.c?ref=1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a", "patch": "@@ -1,7 +1,7 @@\n /* Test complex arithmetic with signed zeros.  Mixed real/complex\n    addition.  */\n /* { dg-do run } */\n-/* { dg-options \"-std=gnu99\" } */\n+/* { dg-options \"-std=gnu99\" { target c } } */\n \n #include \"complex-sign.h\"\n ", "previous_filename": "gcc/testsuite/gcc.dg/torture/complex-sign-mixed-add.c"}, {"sha": "f7ee48341c09eed4845a19e15688d1c96279c25b", "filename": "gcc/testsuite/c-c++-common/complex-sign-mixed-div.c", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-mixed-div.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-mixed-div.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-mixed-div.c?ref=1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a", "patch": "@@ -1,7 +1,7 @@\n /* Test complex arithmetic with signed zeros.  Mixed real/complex\n    division.  */\n /* { dg-do run } */\n-/* { dg-options \"-std=gnu99\" } */\n+/* { dg-options \"-std=gnu99\" { target c } } */\n \n #include \"complex-sign.h\"\n ", "previous_filename": "gcc/testsuite/gcc.dg/torture/complex-sign-mixed-div.c"}, {"sha": "02f936b75bdd542d132685d39b87433365e9e43b", "filename": "gcc/testsuite/c-c++-common/complex-sign-mixed-mul.c", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-mixed-mul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-mixed-mul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-mixed-mul.c?ref=1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a", "patch": "@@ -1,7 +1,7 @@\n /* Test complex arithmetic with signed zeros.  Mixed real/complex\n    multiplication.  */\n /* { dg-do run } */\n-/* { dg-options \"-std=gnu99\" } */\n+/* { dg-options \"-std=gnu99\" { target c } } */\n \n #include \"complex-sign.h\"\n ", "previous_filename": "gcc/testsuite/gcc.dg/torture/complex-sign-mixed-mul.c"}, {"sha": "739500d2f8bea246214275329c5d969aa9ec8988", "filename": "gcc/testsuite/c-c++-common/complex-sign-mixed-sub.c", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-mixed-sub.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-mixed-sub.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-mixed-sub.c?ref=1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a", "patch": "@@ -1,7 +1,7 @@\n /* Test complex arithmetic with signed zeros.  Mixed real/complex\n    subtraction.  */\n /* { dg-do run } */\n-/* { dg-options \"-std=gnu99\" } */\n+/* { dg-options \"-std=gnu99\" { target c } } */\n \n #include \"complex-sign.h\"\n ", "previous_filename": "gcc/testsuite/gcc.dg/torture/complex-sign-mixed-sub.c"}, {"sha": "05cc4fabea41bce6a5d51e85188a8e8f26cc057d", "filename": "gcc/testsuite/c-c++-common/complex-sign-mul-minus-one.c", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-mul-minus-one.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-mul-minus-one.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-mul-minus-one.c?ref=1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a", "patch": "@@ -1,7 +1,7 @@\n /* Test complex arithmetic with signed zeros.  Pure complex\n    multiplication with -1.0 + 0.0i.  */\n /* { dg-do run } */\n-/* { dg-options \"-std=gnu99\" } */\n+/* { dg-options \"-std=gnu99\" { target c } } */\n \n #include \"complex-sign.h\"\n ", "previous_filename": "gcc/testsuite/gcc.dg/torture/complex-sign-mul-minus-one.c"}, {"sha": "014d813e99ed758a18ef71bc6ce01827dbd39c9d", "filename": "gcc/testsuite/c-c++-common/complex-sign-mul-one.c", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-mul-one.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-mul-one.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-mul-one.c?ref=1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a", "patch": "@@ -1,7 +1,7 @@\n /* Test complex arithmetic with signed zeros.  Pure complex\n    multiplication with 1.0 + 0.0i.  */\n /* { dg-do run } */\n-/* { dg-options \"-std=gnu99\" } */\n+/* { dg-options \"-std=gnu99\" { target c } } */\n \n #include \"complex-sign.h\"\n ", "previous_filename": "gcc/testsuite/gcc.dg/torture/complex-sign-mul-one.c"}, {"sha": "08d247aa5c044df89f2a0dd4a08050b7f970b5f1", "filename": "gcc/testsuite/c-c++-common/complex-sign-mul.c", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-mul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-mul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-mul.c?ref=1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a", "patch": "@@ -1,7 +1,7 @@\n /* Test complex arithmetic with signed zeros.  Pure complex\n    multiplication.  */\n /* { dg-do run } */\n-/* { dg-options \"-std=gnu99\" } */\n+/* { dg-options \"-std=gnu99\" { target c } } */\n \n #include \"complex-sign.h\"\n ", "previous_filename": "gcc/testsuite/gcc.dg/torture/complex-sign-mul.c"}, {"sha": "d4da14dc5f56d0ae57cc00cc647ee75c66283ae3", "filename": "gcc/testsuite/c-c++-common/complex-sign-sub.c", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-sub.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-sub.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign-sub.c?ref=1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a", "patch": "@@ -1,7 +1,7 @@\n /* Test complex arithmetic with signed zeros.  Pure complex\n    subtraction.  */\n /* { dg-do run } */\n-/* { dg-options \"-std=gnu99\" } */\n+/* { dg-options \"-std=gnu99\" { target c } } */\n \n #include \"complex-sign.h\"\n ", "previous_filename": "gcc/testsuite/gcc.dg/torture/complex-sign-sub.c"}, {"sha": "96261101cc56c68a98b12dbf1640518b959801a1", "filename": "gcc/testsuite/c-c++-common/complex-sign.h", "status": "renamed", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcomplex-sign.h?ref=1ff6b2c8c471291a07ba054ddbd18acb9dd69d7a", "patch": "@@ -1,7 +1,13 @@\n /* Common header for complex arithmetic sign tests.  */\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n extern void abort (void);\n extern void exit (int);\n+#ifdef __cplusplus\n+}\n+#endif\n \n #define CHECK_RES(VALUE, COPY, SIGN_REAL, SIGN_IMAG)\t\t\\\n   do {\t\t\t\t\t\t\t\t\\", "previous_filename": "gcc/testsuite/gcc.dg/torture/complex-sign.h"}]}