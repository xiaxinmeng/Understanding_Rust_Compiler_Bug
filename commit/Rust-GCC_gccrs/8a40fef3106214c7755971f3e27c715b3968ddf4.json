{"sha": "8a40fef3106214c7755971f3e27c715b3968ddf4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE0MGZlZjMxMDYyMTRjNzc1NTk3MWYzZTI3YzcxNWIzOTY4ZGRmNA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-05-19T20:29:07Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-05-19T20:29:07Z"}, "message": "PR c/71171: Fix uninitialized source_range in c_parser_postfix_expression\n\nA common way for a c_expr to have an uninitialized src_range is in\nerror-handling, where the \"value\" field is set to error_mark_node\nwithout touching the src_range, leading to complaints from valgrind.\n\nThis patch introduces a new method c_expr::set_error which sets\nthe value to error_mark_node whilst initializing the src_range to\nUNKNOWN_LOCATION.\n\nThis fixes the valgrind issue seen in PR c/71171, along with various\nother related issues seen when running the testsuite using the\nchecker patch I posted here:\n  https://gcc.gnu.org/ml/gcc-patches/2015-12/msg00887.html\n(this checker still doesn't fully work yet, but it seems to be good\nfor easily detecting these issues without needing Valgrind).\n\ngcc/c/ChangeLog:\n\tPR c/71171\n\t* c-parser.c (c_parser_generic_selection): Use c_expr::set_error\n\tin error-handling.\n\t(c_parser_postfix_expression): Likewise.\n\t* c-tree.h (c_expr::set_error): New method.\n\t* c-typeck.c (parser_build_binary_op): In error-handling, ensure\n\tthat result's range is initialized.\n\nFrom-SVN: r236488", "tree": {"sha": "1778edbd3e7143f4500b7f5d7038f20e4466d50c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1778edbd3e7143f4500b7f5d7038f20e4466d50c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a40fef3106214c7755971f3e27c715b3968ddf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a40fef3106214c7755971f3e27c715b3968ddf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a40fef3106214c7755971f3e27c715b3968ddf4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a40fef3106214c7755971f3e27c715b3968ddf4/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a5569fad3cd964d1c8456b07a411189695ad275", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a5569fad3cd964d1c8456b07a411189695ad275", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a5569fad3cd964d1c8456b07a411189695ad275"}], "stats": {"total": 98, "additions": 61, "deletions": 37}, "files": [{"sha": "5731048b087e2a1100a637659a0519c3b476d32e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a40fef3106214c7755971f3e27c715b3968ddf4/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a40fef3106214c7755971f3e27c715b3968ddf4/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=8a40fef3106214c7755971f3e27c715b3968ddf4", "patch": "@@ -1,3 +1,13 @@\n+2016-05-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/71171\n+\t* c-parser.c (c_parser_generic_selection): Use c_expr::set_error\n+\tin error-handling.\n+\t(c_parser_postfix_expression): Likewise.\n+\t* c-tree.h (c_expr::set_error): New method.\n+\t* c-typeck.c (parser_build_binary_op): In error-handling, ensure\n+\tthat result's range is initialized.\n+\n 2016-05-17  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* c-typeck.c (parser_build_unary_op): Fix formatting."}, {"sha": "c2c83143c0518585b8350aa063f6c5de9a1ad16d", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a40fef3106214c7755971f3e27c715b3968ddf4/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a40fef3106214c7755971f3e27c715b3968ddf4/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=8a40fef3106214c7755971f3e27c715b3968ddf4", "patch": "@@ -7194,7 +7194,7 @@ c_parser_generic_selection (c_parser *parser)\n \n   error_expr.original_code = ERROR_MARK;\n   error_expr.original_type = NULL;\n-  error_expr.value = error_mark_node;\n+  error_expr.set_error ();\n   matched_assoc.type_location = UNKNOWN_LOCATION;\n   matched_assoc.type = NULL_TREE;\n   matched_assoc.expression = error_expr;\n@@ -7505,13 +7505,13 @@ c_parser_postfix_expression (c_parser *parser)\n \t    gcc_assert (c_dialect_objc ());\n \t    if (!c_parser_require (parser, CPP_DOT, \"expected %<.%>\"))\n \t      {\n-\t\texpr.value = error_mark_node;\n+\t\texpr.set_error ();\n \t\tbreak;\n \t      }\n \t    if (c_parser_next_token_is_not (parser, CPP_NAME))\n \t      {\n \t\tc_parser_error (parser, \"expected identifier\");\n-\t\texpr.value = error_mark_node;\n+\t\texpr.set_error ();\n \t\tbreak;\n \t      }\n \t    c_token *component_tok = c_parser_peek_token (parser);\n@@ -7525,7 +7525,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t  }\n \tdefault:\n \t  c_parser_error (parser, \"expected expression\");\n-\t  expr.value = error_mark_node;\n+\t  expr.set_error ();\n \t  break;\n \t}\n       break;\n@@ -7547,7 +7547,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t      parser->error = true;\n \t      c_parser_skip_until_found (parser, CPP_CLOSE_BRACE, NULL);\n \t      c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);\n-\t      expr.value = error_mark_node;\n+\t      expr.set_error ();\n \t      break;\n \t    }\n \t  stmt = c_begin_stmt_expr ();\n@@ -7576,7 +7576,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t\t\t\t     \"expected %<)%>\");\n \t  if (type_name == NULL)\n \t    {\n-\t      expr.value = error_mark_node;\n+\t      expr.set_error ();\n \t    }\n \t  else\n \t    expr = c_parser_postfix_expression_after_paren_type (parser,\n@@ -7636,7 +7636,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t    c_parser_consume_token (parser);\n \t    if (!c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n \t      {\n-\t\texpr.value = error_mark_node;\n+\t\texpr.set_error ();\n \t\tbreak;\n \t      }\n \t    e1 = c_parser_expr_no_commas (parser, NULL);\n@@ -7645,7 +7645,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t    if (!c_parser_require (parser, CPP_COMMA, \"expected %<,%>\"))\n \t      {\n \t\tc_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);\n-\t\texpr.value = error_mark_node;\n+\t\texpr.set_error ();\n \t\tbreak;\n \t      }\n \t    loc = c_parser_peek_token (parser)->location;\n@@ -7655,7 +7655,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t\t\t\t       \"expected %<)%>\");\n \t    if (t1 == NULL)\n \t      {\n-\t\texpr.value = error_mark_node;\n+\t\texpr.set_error ();\n \t      }\n \t    else\n \t      {\n@@ -7677,7 +7677,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t  c_parser_consume_token (parser);\n \t  if (!c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n \t    {\n-\t      expr.value = error_mark_node;\n+\t      expr.set_error ();\n \t      break;\n \t    }\n \t  t1 = c_parser_type_name (parser);\n@@ -7688,7 +7688,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t  if (parser->error)\n \t    {\n \t      c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);\n-\t      expr.value = error_mark_node;\n+\t      expr.set_error ();\n \t      break;\n \t    }\n \n@@ -7777,15 +7777,15 @@ c_parser_postfix_expression (c_parser *parser)\n \t\t\t\t\t    &cexpr_list, true,\n \t\t\t\t\t    &close_paren_loc))\n \t      {\n-\t\texpr.value = error_mark_node;\n+\t\texpr.set_error ();\n \t\tbreak;\n \t      }\n \n \t    if (vec_safe_length (cexpr_list) != 3)\n \t      {\n \t\terror_at (loc, \"wrong number of arguments to \"\n \t\t\t       \"%<__builtin_choose_expr%>\");\n-\t\texpr.value = error_mark_node;\n+\t\texpr.set_error ();\n \t\tbreak;\n \t      }\n \n@@ -7810,25 +7810,25 @@ c_parser_postfix_expression (c_parser *parser)\n \t  c_parser_consume_token (parser);\n \t  if (!c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n \t    {\n-\t      expr.value = error_mark_node;\n+\t      expr.set_error ();\n \t      break;\n \t    }\n \t  t1 = c_parser_type_name (parser);\n \t  if (t1 == NULL)\n \t    {\n-\t      expr.value = error_mark_node;\n+\t      expr.set_error ();\n \t      break;\n \t    }\n \t  if (!c_parser_require (parser, CPP_COMMA, \"expected %<,%>\"))\n \t    {\n \t      c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);\n-\t      expr.value = error_mark_node;\n+\t      expr.set_error ();\n \t      break;\n \t    }\n \t  t2 = c_parser_type_name (parser);\n \t  if (t2 == NULL)\n \t    {\n-\t      expr.value = error_mark_node;\n+\t      expr.set_error ();\n \t      break;\n \t    }\n \t  {\n@@ -7840,7 +7840,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t    e2 = groktypename (t2, NULL, NULL);\n \t    if (e1 == error_mark_node || e2 == error_mark_node)\n \t      {\n-\t\texpr.value = error_mark_node;\n+\t\texpr.set_error ();\n \t\tbreak;\n \t      }\n \n@@ -7865,14 +7865,14 @@ c_parser_postfix_expression (c_parser *parser)\n \t\t\t\t\t    &cexpr_list, false,\n \t\t\t\t\t    &close_paren_loc))\n \t      {\n-\t\texpr.value = error_mark_node;\n+\t\texpr.set_error ();\n \t\tbreak;\n \t      }\n \t    if (vec_safe_length (cexpr_list) != 2)\n \t      {\n \t\terror_at (loc, \"wrong number of arguments to \"\n \t\t\t       \"%<__builtin_call_with_static_chain%>\");\n-\t\texpr.value = error_mark_node;\n+\t\texpr.set_error ();\n \t\tbreak;\n \t      }\n \n@@ -7907,15 +7907,15 @@ c_parser_postfix_expression (c_parser *parser)\n \t\t\t\t\t    &cexpr_list, false,\n \t\t\t\t\t    &close_paren_loc))\n \t      {\n-\t\texpr.value = error_mark_node;\n+\t\texpr.set_error ();\n \t\tbreak;\n \t      }\n \n \t    if (vec_safe_length (cexpr_list) != 2)\n \t      {\n \t\terror_at (loc, \"wrong number of arguments to \"\n \t\t\t       \"%<__builtin_complex%>\");\n-\t\texpr.value = error_mark_node;\n+\t\texpr.set_error ();\n \t\tbreak;\n \t      }\n \n@@ -7937,15 +7937,15 @@ c_parser_postfix_expression (c_parser *parser)\n \t      {\n \t\terror_at (loc, \"%<__builtin_complex%> operand \"\n \t\t\t  \"not of real binary floating-point type\");\n-\t\texpr.value = error_mark_node;\n+\t\texpr.set_error ();\n \t\tbreak;\n \t      }\n \t    if (TYPE_MAIN_VARIANT (TREE_TYPE (e1_p->value))\n \t\t!= TYPE_MAIN_VARIANT (TREE_TYPE (e2_p->value)))\n \t      {\n \t\terror_at (loc,\n \t\t\t  \"%<__builtin_complex%> operands of different types\");\n-\t\texpr.value = error_mark_node;\n+\t\texpr.set_error ();\n \t\tbreak;\n \t      }\n \t    pedwarn_c90 (loc, OPT_Wpedantic,\n@@ -7971,7 +7971,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t\t\t\t\t    &cexpr_list, false,\n \t\t\t\t\t    &close_paren_loc))\n \t      {\n-\t\texpr.value = error_mark_node;\n+\t\texpr.set_error ();\n \t\tbreak;\n \t      }\n \n@@ -7994,7 +7994,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t      {\n \t\terror_at (loc, \"wrong number of arguments to \"\n \t\t\t       \"%<__builtin_shuffle%>\");\n-\t\texpr.value = error_mark_node;\n+\t\texpr.set_error ();\n \t      }\n \t    set_c_expr_source_range (&expr, loc, close_paren_loc);\n \t    break;\n@@ -8004,7 +8004,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t  c_parser_consume_token (parser);\n \t  if (!c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n \t    {\n-\t      expr.value = error_mark_node;\n+\t      expr.set_error ();\n \t      break;\n \t    }\n \t  {\n@@ -8021,14 +8021,14 @@ c_parser_postfix_expression (c_parser *parser)\n \t  c_parser_consume_token (parser);\n \t  if (!c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n \t    {\n-\t      expr.value = error_mark_node;\n+\t      expr.set_error ();\n \t      break;\n \t    }\n \t  if (c_parser_next_token_is_not (parser, CPP_NAME))\n \t    {\n \t      c_parser_error (parser, \"expected identifier\");\n \t      c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);\n-\t      expr.value = error_mark_node;\n+\t      expr.set_error ();\n \t      break;\n \t    }\n \t  {\n@@ -8047,13 +8047,13 @@ c_parser_postfix_expression (c_parser *parser)\n \t  c_parser_consume_token (parser);\n \t  if (!c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n \t    {\n-\t      expr.value = error_mark_node;\n+\t      expr.set_error ();\n \t      break;\n \t    }\n \t  t1 = c_parser_type_name (parser);\n \t  if (t1 == NULL)\n \t    {\n-\t      expr.value = error_mark_node;\n+\t      expr.set_error ();\n \t      c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);\n \t      break;\n \t    }\n@@ -8076,7 +8076,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t      error_at (loc, \"-fcilkplus must be enabled to use \"\n \t\t\t\"%<_Cilk_spawn%>\");\n \t      expr = c_parser_cast_expression (parser, NULL);\n-\t      expr.value = error_mark_node;\n+\t      expr.set_error ();\n \t    }\n \t  else if (c_parser_peek_token (parser)->keyword == RID_CILK_SPAWN)\n \t    {\n@@ -8095,7 +8095,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t  break;\n \tdefault:\n \t  c_parser_error (parser, \"expected expression\");\n-\t  expr.value = error_mark_node;\n+\t  expr.set_error ();\n \t  break;\n \t}\n       break;\n@@ -8116,7 +8116,7 @@ c_parser_postfix_expression (c_parser *parser)\n       /* Else fall through to report error.  */\n     default:\n       c_parser_error (parser, \"expected expression\");\n-      expr.value = error_mark_node;\n+      expr.set_error ();\n       break;\n     }\n   return c_parser_postfix_expression_after_primary\n@@ -8331,7 +8331,7 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t  else\n \t    {\n \t      c_parser_error (parser, \"expected identifier\");\n-\t      expr.value = error_mark_node;\n+\t      expr.set_error ();\n \t      expr.original_code = ERROR_MARK;\n               expr.original_type = NULL;\n \t      return expr;\n@@ -8363,7 +8363,7 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t  else\n \t    {\n \t      c_parser_error (parser, \"expected identifier\");\n-\t      expr.value = error_mark_node;\n+\t      expr.set_error ();\n \t      expr.original_code = ERROR_MARK;\n \t      expr.original_type = NULL;\n \t      return expr;"}, {"sha": "444e9a4777e8a7bfbac468f3e9a28ef846f8af1b", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a40fef3106214c7755971f3e27c715b3968ddf4/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a40fef3106214c7755971f3e27c715b3968ddf4/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=8a40fef3106214c7755971f3e27c715b3968ddf4", "patch": "@@ -143,6 +143,15 @@ struct c_expr\n      of this expression.  */\n   location_t get_start () const { return src_range.m_start; }\n   location_t get_finish () const { return src_range.m_finish; }\n+\n+  /* Set the value to error_mark_node whilst ensuring that src_range\n+     is initialized.  */\n+  void set_error ()\n+  {\n+    value = error_mark_node;\n+    src_range.m_start = UNKNOWN_LOCATION;\n+    src_range.m_finish = UNKNOWN_LOCATION;\n+  }\n };\n \n /* Type alias for struct c_expr. This allows to use the structure"}, {"sha": "30102404284295589e8f2ad70726aa4102ca9c42", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a40fef3106214c7755971f3e27c715b3968ddf4/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a40fef3106214c7755971f3e27c715b3968ddf4/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=8a40fef3106214c7755971f3e27c715b3968ddf4", "patch": "@@ -3533,7 +3533,12 @@ parser_build_binary_op (location_t location, enum tree_code code,\n   result.original_type = NULL;\n \n   if (TREE_CODE (result.value) == ERROR_MARK)\n-    return result;\n+    {\n+      set_c_expr_source_range (&result,\n+\t\t\t       arg1.get_start (),\n+\t\t\t       arg2.get_finish ());\n+      return result;\n+    }\n \n   if (location != UNKNOWN_LOCATION)\n     protected_set_expr_location (result.value, location);"}]}