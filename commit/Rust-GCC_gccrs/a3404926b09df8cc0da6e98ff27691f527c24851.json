{"sha": "a3404926b09df8cc0da6e98ff27691f527c24851", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM0MDQ5MjZiMDlkZjhjYzBkYTZlOThmZjI3NjkxZjUyN2MyNDg1MQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-04-18T04:41:54Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-04-18T04:41:54Z"}, "message": "(clipper_frame_size): New function.\n\n(output_function_pro/epilogue): Support omitting frame pointer.\n\nFrom-SVN: r4181", "tree": {"sha": "0c6a7a364cec8c715190aac5a3f3cf6f77e3bbca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c6a7a364cec8c715190aac5a3f3cf6f77e3bbca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3404926b09df8cc0da6e98ff27691f527c24851", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3404926b09df8cc0da6e98ff27691f527c24851", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3404926b09df8cc0da6e98ff27691f527c24851", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3404926b09df8cc0da6e98ff27691f527c24851/comments", "author": null, "committer": null, "parents": [{"sha": "9257a149d00d2f55c7b6aaaddac96c9cc28ed8d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9257a149d00d2f55c7b6aaaddac96c9cc28ed8d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9257a149d00d2f55c7b6aaaddac96c9cc28ed8d6"}], "stats": {"total": 186, "additions": 123, "deletions": 63}, "files": [{"sha": "dcb7d57768fa31db84fbcaab6347fc7fddf46be5", "filename": "gcc/config/clipper/clipper.c", "status": "modified", "additions": 123, "deletions": 63, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3404926b09df8cc0da6e98ff27691f527c24851/gcc%2Fconfig%2Fclipper%2Fclipper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3404926b09df8cc0da6e98ff27691f527c24851/gcc%2Fconfig%2Fclipper%2Fclipper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.c?ref=a3404926b09df8cc0da6e98ff27691f527c24851", "patch": "@@ -38,78 +38,100 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n extern char regs_ever_live[];\n \n-#ifdef ACCUMULATE_OUTGOING_ARGS\n-extern int current_function_outgoing_args_size;\n-#endif\n+extern int frame_pointer_needed;\n \n-static int save_reg_offset;\n+static int frame_size;\n \n /*\n- * prologue and epilogue output\n- * function is entered with pc pushed, i.e. stack is 32 bit alligned\n- *\n+ * compute size of a clipper stack frame where 'lsize' is the required\n+ * space for local variables.\n  */\n-void\n-output_function_prologue (file, lsize)\n-     FILE *file;\n-     int lsize;\t\t\t\t/* size for locals */\n+\n+int\n+clipper_frame_size (lsize)\n+     int lsize;\n {\n-  int i, offset;\n+  int i,size;\t\t\t\t/* total size of frame */\n   int save_size;\n-  int size;\t\t\t\t/* total size of frame */\n-\n   save_size = 0;\t\t\t/* compute size for reg saves */\n-  for (i = 17; i < 32; i++)\n+\n+  for (i = 16; i < 32; i++)\n     if (regs_ever_live[i] && !call_used_regs[i])\n       save_size += 8;\n \n   for (i = 0; i < 16; i++)\n     if (regs_ever_live[i] && !call_used_regs[i])\n       save_size += 4;\n \n-  save_reg_offset = lsize + save_size;\n-\n-  save_reg_offset = (save_reg_offset + 7) & ~7;\t/* align to 64 Bit */\n+  size = lsize + save_size;\n \n-#ifdef ACCUMULATE_OUTGOING_ARGS\n-  size = save_reg_offset + current_function_outgoing_args_size;\n-#else\n-  size = save_reg_offset;\n-#endif\n-  \n   size = (size + 7) & ~7;\t\t/* align to 64 Bit */\n+  return size;\n+}\n+\n+/*\n+ * prologue and epilogue output\n+ * function is entered with pc pushed, i.e. stack is 32 bit aligned\n+ *\n+ * current_function_args_size == 0 means that the current function's args\n+ * are passed totally in registers i.e fp is not used as ap.\n+ * If frame_size is also 0 the current function does not push anything and\n+ * can run with misaligned stack -> subq $4,sp / add $4,sp on entry and exit\n+ * can be omitted.\n+ *\n+ */\n+void\n+output_function_prologue (file, lsize)\n+     FILE *file;\n+     int lsize;\t\t\t\t/* size for locals */\n+{\n+  int i, offset;\n+  int size;\n+\n+  frame_size = size = clipper_frame_size (lsize);\n \n-  if (size == 0)\n+  if (frame_pointer_needed)\n     {\n       fputs (\"\\tpushw  fp,sp\\n\", file);\n       fputs (\"\\tmovw   sp,fp\\n\", file);\n     }\n-  else\n+  else if (size != 0 || current_function_args_size != 0)\n+    {\n+      size += 4;\t\t\t/* keep stack aligned */\n+      frame_size = size;\t\t/* must push data or access args */\n+    }\n+\n+  if (size)\n     {\n       if (size < 16)\n-\tfprintf (file, \"\\tsubq   $%d,sp\\n\", size + 4); /* room for fp */\n+\tfprintf (file, \"\\tsubq   $%d,sp\\n\", size);\n       else\n-\tfprintf (file, \"\\tsubi   $%d,sp\\n\", size + 4);\n-\n-      fprintf (file, \"\\tstorw  fp,%d(sp)\\n\", size);\n-      fprintf (file, \"\\tloada  %d(sp),fp\\n\", size);\n+\tfprintf (file, \"\\tsubi   $%d,sp\\n\", size);\n+\n+      /* register save slots are relative to sp, because we have small positive\n+\t displacements and this works whether we have a frame pointer or not */\n+\n+      offset = 0;\n+      for (i = 16; i < 32; i++)\n+\tif (regs_ever_live[i] && !call_used_regs[i])\n+\t  {\n+\t    if (offset == 0)\n+\t      fprintf (file, \"\\tstord  f%d,(sp)\\n\", i-16);\n+\t    else\n+\t      fprintf (file, \"\\tstord  f%d,%d(sp)\\n\", i-16, offset);\n+\t    offset += 8;\n+\t  }\n+\n+      for (i = 0; i < 16; i++)\n+\tif (regs_ever_live[i] && !call_used_regs[i])\n+\t  {\n+\t    if (offset == 0)\n+\t      fprintf (file, \"\\tstorw  r%d,(sp)\\n\", i);\n+\t    else\n+\t      fprintf (file, \"\\tstorw  r%d,%d(sp)\\n\", i, offset);\n+\t    offset += 4;\n+\t  }\n     }\n-\n-  offset = -save_reg_offset;\n-\n-  for (i = 16; i < 32; i++)\n-    if (regs_ever_live[i] && !call_used_regs[i])\n-      {\n-\tfprintf (file, \"\\tstord  f%d,%d(fp)\\n\", i-16, offset);\n-\toffset += 8;\n-      }\n-\n-  for (i = 0; i < 16; i++)\n-    if (regs_ever_live[i] && !call_used_regs[i])\n-      {\n-\tfprintf (file, \"\\tstorw  r%d,%d(fp)\\n\", i, offset);\n-\toffset += 4;\n-      }\n }\n \n void\n@@ -119,24 +141,62 @@ output_function_epilogue (file, size)\n {\n   int i, offset;\n \n-  offset = -save_reg_offset;\n-\n-  for (i = 16; i < 32; i++)\n-    if (regs_ever_live[i] && !call_used_regs[i])\n-      {\n-\tfprintf (file, \"\\tloadd  %d(fp),f%d\\n\", offset, i-16);\n-\toffset += 8;\n-      }\n+  if (frame_pointer_needed)\n+    {\n+      offset = -frame_size;\n+\n+      for (i = 16; i < 32; i++)\n+\tif (regs_ever_live[i] && !call_used_regs[i])\n+\t  {\n+\t    fprintf (file, \"\\tloadd  %d(fp),f%d\\n\", offset, i-16);\n+\t    offset += 8;\n+\t  }\n+\n+      for (i = 0; i < 16; i++)\n+\tif (regs_ever_live[i] && !call_used_regs[i])\n+\t  {\n+\t    fprintf (file, \"\\tloadw  %d(fp),r%d\\n\", offset, i);\n+\t    offset += 4;\n+\t  }\n+\n+      fputs (\"\\tmovw   fp,sp\\n\\tpopw   sp,fp\\n\\tret    sp\\n\",\n+\t     file);\n+    }\n \n-  for (i = 0; i < 16; i++)\n-    if (regs_ever_live[i] && !call_used_regs[i])\n-      {\n-\tfprintf (file, \"\\tloadw  %d(fp),r%d\\n\", offset, i);\n-\toffset += 4;\n-      }\n+  else\t\t\t\t\t/* no frame pointer */\n+    {\n+      offset = 0;\n+\n+      for (i = 16; i < 32; i++)\n+\tif (regs_ever_live[i] && !call_used_regs[i])\n+\t  {\n+\t    if (offset == 0)\n+\t      fprintf (file, \"\\tloadd  (sp),f%d\\n\", i-16);\n+\t    else\n+\t      fprintf (file, \"\\tloadd  %d(sp),f%d\\n\", offset, i-16);\n+\t    offset += 8;\n+\t  }\n+\n+      for (i = 0; i < 16; i++)\n+\tif (regs_ever_live[i] && !call_used_regs[i])\n+\t  {\n+\t    if (offset == 0)\n+\t      fprintf (file, \"\\tloadw  (sp),r%d\\n\", i);\n+\t    else\n+\t      fprintf (file, \"\\tloadw  %d(sp),r%d\\n\", offset, i);\n+\t    offset += 4;\n+\t  }\n+\n+      if (frame_size > 0)\n+\t{\n+\t  if (frame_size < 16)\n+\t    fprintf (file, \"\\taddq   $%d,sp\\n\", frame_size);\n+\t  else\n+\t    fprintf (file, \"\\taddi   $%d,sp\\n\", frame_size);\n+\t}\n \n-  fputs (\"\\tmovw   fp,sp\\n\\tpopw   sp,fp\\n\\tret    sp\\n\",\n-\t file);\n+      fputs (\"\\tret    sp\\n\", file);\n+    }\n }\n \n /*"}]}