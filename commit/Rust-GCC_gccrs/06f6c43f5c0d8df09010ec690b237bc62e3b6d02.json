{"sha": "06f6c43f5c0d8df09010ec690b237bc62e3b6d02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZmNmM0M2Y1YzBkOGRmMDkwMTBlYzY5MGIyMzdiYzYyZTNiNmQwMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-20T10:29:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-20T10:29:26Z"}, "message": "[multiple changes]\n\n2016-04-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch12.adb (Copy_Generic_Node): Handle the special\n\tqualification installed for universal literals that act as\n\toperands in binary or unary operators.\t(Qualify_Operand): Mark\n\tthe qualification to signal the instantiation mechanism how to\n\thandle global reference propagation.\n\t* sinfo.adb (Is_Qualified_Universal_Literal): New routine.\n\t(Set_Is_Qualified_Universal_Literal): New routine.\n\t* sinfo.ads New attribute Is_Qualified_Universal_Literal along\n\twith occurrences in nodes.\n\t(Is_Qualified_Universal_Literal):\n\tNew routine along with pragma Inline.\n\t(Set_Is_Qualified_Universal_Literal): New routine along with\n\tpragma Inline.\n\n2016-04-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem.adb (Do_Analyze): Save and restore Style_Max_Line_Length\n\tso that the corresponding checks are preserved across compilations\n\tthat include System.Constants in their context.\n\n2016-04-20  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_type.adb: Minor typo fix and reformatting.\n\t* a-conhel.ads: Update comment.\n\n2016-04-20  Bob Duff  <duff@adacore.com>\n\n\t* a-cihama.adb, a-cihase.adb, a-coinve.adb (Copy): Rewrite the\n\tcode so it doesn't trigger an \"uninit var\" warning.\n\nFrom-SVN: r235256", "tree": {"sha": "6433e0665b407b38446a2221561cc9a01bea3309", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6433e0665b407b38446a2221561cc9a01bea3309"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06f6c43f5c0d8df09010ec690b237bc62e3b6d02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06f6c43f5c0d8df09010ec690b237bc62e3b6d02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06f6c43f5c0d8df09010ec690b237bc62e3b6d02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06f6c43f5c0d8df09010ec690b237bc62e3b6d02/comments", "author": null, "committer": null, "parents": [{"sha": "71129dded17e960ee8fdfa2397e1eadee2568129", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71129dded17e960ee8fdfa2397e1eadee2568129", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71129dded17e960ee8fdfa2397e1eadee2568129"}], "stats": {"total": 148, "additions": 121, "deletions": 27}, "files": [{"sha": "98c7d3f9b6ca653a7f0ede38ad6bc36f17c5ad3d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f6c43f5c0d8df09010ec690b237bc62e3b6d02/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f6c43f5c0d8df09010ec690b237bc62e3b6d02/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=06f6c43f5c0d8df09010ec690b237bc62e3b6d02", "patch": "@@ -1,3 +1,35 @@\n+2016-04-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch12.adb (Copy_Generic_Node): Handle the special\n+\tqualification installed for universal literals that act as\n+\toperands in binary or unary operators.\t(Qualify_Operand): Mark\n+\tthe qualification to signal the instantiation mechanism how to\n+\thandle global reference propagation.\n+\t* sinfo.adb (Is_Qualified_Universal_Literal): New routine.\n+\t(Set_Is_Qualified_Universal_Literal): New routine.\n+\t* sinfo.ads New attribute Is_Qualified_Universal_Literal along\n+\twith occurrences in nodes.\n+\t(Is_Qualified_Universal_Literal):\n+\tNew routine along with pragma Inline.\n+\t(Set_Is_Qualified_Universal_Literal): New routine along with\n+\tpragma Inline.\n+\n+2016-04-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem.adb (Do_Analyze): Save and restore Style_Max_Line_Length\n+\tso that the corresponding checks are preserved across compilations\n+\tthat include System.Constants in their context.\n+\n+2016-04-20  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_type.adb: Minor typo fix and reformatting.\n+\t* a-conhel.ads: Update comment.\n+\n+2016-04-20  Bob Duff  <duff@adacore.com>\n+\n+\t* a-cihama.adb, a-cihase.adb, a-coinve.adb (Copy): Rewrite the\n+\tcode so it doesn't trigger an \"uninit var\" warning.\n+\n 2016-04-20  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_attr.ads Add new table Universal_Type_Attribute."}, {"sha": "3c05aac5b495a2bea07f9ef2231021095656eaed", "filename": "gcc/ada/a-cihama.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f6c43f5c0d8df09010ec690b237bc62e3b6d02/gcc%2Fada%2Fa-cihama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f6c43f5c0d8df09010ec690b237bc62e3b6d02/gcc%2Fada%2Fa-cihama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihama.adb?ref=06f6c43f5c0d8df09010ec690b237bc62e3b6d02", "patch": "@@ -274,15 +274,15 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n       C : Count_Type;\n \n    begin\n-      if Capacity = 0 then\n-         C := Source.Length;\n+      if Capacity < Source.Length then\n+         if Checks and then Capacity /= 0 then\n+            raise Capacity_Error\n+              with \"Requested capacity is less than Source length\";\n+         end if;\n \n-      elsif Capacity >= Source.Length then\n+         C := Source.Length;\n+      else\n          C := Capacity;\n-\n-      elsif Checks then\n-         raise Capacity_Error\n-           with \"Requested capacity is less than Source length\";\n       end if;\n \n       return Target : Map do"}, {"sha": "6d913cbdeecaf324c0257d719584ceb623073439", "filename": "gcc/ada/a-cihase.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f6c43f5c0d8df09010ec690b237bc62e3b6d02/gcc%2Fada%2Fa-cihase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f6c43f5c0d8df09010ec690b237bc62e3b6d02/gcc%2Fada%2Fa-cihase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihase.adb?ref=06f6c43f5c0d8df09010ec690b237bc62e3b6d02", "patch": "@@ -264,15 +264,15 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n       C : Count_Type;\n \n    begin\n-      if Capacity = 0 then\n-         C := Source.Length;\n+      if Capacity < Source.Length then\n+         if Checks and then Capacity /= 0 then\n+            raise Capacity_Error\n+              with \"Requested capacity is less than Source length\";\n+         end if;\n \n-      elsif Capacity >= Source.Length then\n+         C := Source.Length;\n+      else\n          C := Capacity;\n-\n-      elsif Checks then\n-         raise Capacity_Error\n-           with \"Requested capacity is less than Source length\";\n       end if;\n \n       return Target : Set do"}, {"sha": "230607c197470d7c69973ec27955cb80dd3b6f9e", "filename": "gcc/ada/a-coinve.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f6c43f5c0d8df09010ec690b237bc62e3b6d02/gcc%2Fada%2Fa-coinve.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f6c43f5c0d8df09010ec690b237bc62e3b6d02/gcc%2Fada%2Fa-coinve.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinve.adb?ref=06f6c43f5c0d8df09010ec690b237bc62e3b6d02", "patch": "@@ -376,15 +376,15 @@ package body Ada.Containers.Indefinite_Vectors is\n       C : Count_Type;\n \n    begin\n-      if Capacity = 0 then\n-         C := Source.Length;\n+      if Capacity < Source.Length then\n+         if Checks and then Capacity /= 0 then\n+            raise Capacity_Error\n+              with \"Requested capacity is less than Source length\";\n+         end if;\n \n-      elsif Capacity >= Source.Length then\n+         C := Source.Length;\n+      else\n          C := Capacity;\n-\n-      elsif Checks then\n-         raise Capacity_Error with\n-           \"Requested capacity is less than Source length\";\n       end if;\n \n       return Target : Vector do"}, {"sha": "008ef8a869d85234ca42c7a8f421e193e9bf0307", "filename": "gcc/ada/a-conhel.ads", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f6c43f5c0d8df09010ec690b237bc62e3b6d02/gcc%2Fada%2Fa-conhel.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f6c43f5c0d8df09010ec690b237bc62e3b6d02/gcc%2Fada%2Fa-conhel.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-conhel.ads?ref=06f6c43f5c0d8df09010ec690b237bc62e3b6d02", "patch": "@@ -55,8 +55,6 @@ package Ada.Containers.Helpers is\n    package Generic_Implementation is\n \n       --  Generic package used in the implementation of containers.\n-      --  ???????????????????Currently used by Vectors; not yet by all other\n-      --  containers.\n \n       --  This needs to be generic so that the 'Enabled attribute will return\n       --  the value that is relevant at the point where a container generic is"}, {"sha": "345cc0e819f70a0871309e0810fb427091ba2c1f", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f6c43f5c0d8df09010ec690b237bc62e3b6d02/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f6c43f5c0d8df09010ec690b237bc62e3b6d02/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=06f6c43f5c0d8df09010ec690b237bc62e3b6d02", "patch": "@@ -53,6 +53,7 @@ with Sem_Prag; use Sem_Prag;\n with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n with Stand;    use Stand;\n+with Stylesw;  use Stylesw;\n with Uintp;    use Uintp;\n with Uname;    use Uname;\n \n@@ -1316,6 +1317,13 @@ package body Sem is\n       procedure Do_Analyze is\n          Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n \n+         --  Generally style checks are preserved across compilations, with\n+         --  one exception: s-oscons.ads, which allows arbitrary long lines\n+         --  unconditionally, and has no restore mechanism, because it is\n+         --  intended as a lowest-level Pure package.\n+\n+         Save_Max_Line   : constant Int := Style_Max_Line_Length;\n+\n          List : Elist_Id;\n \n       begin\n@@ -1346,6 +1354,7 @@ package body Sem is\n          Pop_Scope;\n          Restore_Scope_Stack (List);\n          Ghost_Mode := Save_Ghost_Mode;\n+         Style_Max_Line_Length := Save_Max_Line;\n       end Do_Analyze;\n \n       --  Local variables"}, {"sha": "e6d5af5f216fe6685d2d650fa3992b3606aed243", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f6c43f5c0d8df09010ec690b237bc62e3b6d02/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f6c43f5c0d8df09010ec690b237bc62e3b6d02/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=06f6c43f5c0d8df09010ec690b237bc62e3b6d02", "patch": "@@ -7293,6 +7293,20 @@ package body Sem_Ch12 is\n                      Set_Entity (New_N, Entity (Assoc));\n                      Check_Private_View (N);\n \n+                  --  The node is a reference to a global type and acts as the\n+                  --  subtype mark of a qualified expression created in order\n+                  --  to aid resolution of accidental overloading in instances.\n+                  --  Since N is a reference to a type, the Associated_Node of\n+                  --  N denotes an entity rather than another identifier. See\n+                  --  Qualify_Universal_Operands for details.\n+\n+                  elsif Nkind (N) = N_Identifier\n+                    and then Nkind (Parent (N)) = N_Qualified_Expression\n+                    and then Subtype_Mark (Parent (N)) = N\n+                    and then Is_Qualified_Universal_Literal (Parent (N))\n+                  then\n+                     Set_Entity (New_N, Assoc);\n+\n                   --  The name in the call may be a selected component if the\n                   --  call has not been analyzed yet, as may be the case for\n                   --  pre/post conditions in a generic unit.\n@@ -13982,6 +13996,7 @@ package body Sem_Ch12 is\n             Loc  : constant Source_Ptr := Sloc (Opnd);\n             Typ  : constant Entity_Id  := Etype (Actual);\n             Mark : Node_Id;\n+            Qual : Node_Id;\n \n          begin\n             --  Qualify the operand when it is of a universal type. Note that\n@@ -14007,10 +14022,19 @@ package body Sem_Ch12 is\n                   Mark := Qualify_Type (Loc, Typ);\n                end if;\n \n-               Rewrite (Opnd,\n+               Qual :=\n                  Make_Qualified_Expression (Loc,\n                    Subtype_Mark => Mark,\n-                   Expression   => Relocate_Node (Opnd)));\n+                   Expression   => Relocate_Node (Opnd));\n+\n+               --  Mark the qualification to distinguish it from other source\n+               --  constructs and signal the instantiation mechanism that this\n+               --  node requires special processing. See Copy_Generic_Node for\n+               --  details.\n+\n+               Set_Is_Qualified_Universal_Literal (Qual);\n+\n+               Rewrite (Opnd, Qual);\n             end if;\n          end Qualify_Operand;\n "}, {"sha": "5aaaa60bf1d3c50a6ccbc73fffd4d550e22e13c2", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f6c43f5c0d8df09010ec690b237bc62e3b6d02/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f6c43f5c0d8df09010ec690b237bc62e3b6d02/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=06f6c43f5c0d8df09010ec690b237bc62e3b6d02", "patch": "@@ -1481,8 +1481,8 @@ package body Sem_Type is\n          elsif Rop_Typ = F2_Typ then\n             return Matching_Types (Lop_Typ, F1_Typ);\n \n-         --  Otherwise this is not a good match bechause each operand-formal\n-         --  pair is compatible only on base type basis which is not specific\n+         --  Otherwise this is not a good match because each operand-formal\n+         --  pair is compatible only on base-type basis, which is not specific\n          --  enough.\n \n          else"}, {"sha": "f8ed04c9ed6ee1d947ca9ce369bac96221a894a7", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f6c43f5c0d8df09010ec690b237bc62e3b6d02/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f6c43f5c0d8df09010ec690b237bc62e3b6d02/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=06f6c43f5c0d8df09010ec690b237bc62e3b6d02", "patch": "@@ -1982,6 +1982,14 @@ package body Sinfo is\n       return Flag7 (N);\n    end Is_Protected_Subprogram_Body;\n \n+   function Is_Qualified_Universal_Literal\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Qualified_Expression);\n+      return Flag4 (N);\n+   end Is_Qualified_Universal_Literal;\n+\n    function Is_Static_Coextension\n       (N : Node_Id) return Boolean is\n    begin\n@@ -5229,6 +5237,14 @@ package body Sinfo is\n       Set_Flag7 (N, Val);\n    end Set_Is_Protected_Subprogram_Body;\n \n+   procedure Set_Is_Qualified_Universal_Literal\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Qualified_Expression);\n+      Set_Flag4 (N, Val);\n+   end Set_Is_Qualified_Universal_Literal;\n+\n    procedure Set_Is_Static_Coextension\n       (N : Node_Id; Val : Boolean := True) is\n    begin"}, {"sha": "561c112bebef93eed19737da89760f9e596426c9", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f6c43f5c0d8df09010ec690b237bc62e3b6d02/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f6c43f5c0d8df09010ec690b237bc62e3b6d02/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=06f6c43f5c0d8df09010ec690b237bc62e3b6d02", "patch": "@@ -1710,6 +1710,12 @@ package Sinfo is\n    --    handler to make sure that the associated protected object is unlocked\n    --    when the subprogram completes.\n \n+   --  Is_Qualified_Universal_Literal (Flag4-Sem)\n+   --    Present in N_Qualified_Expression nodes. Set when the qualification is\n+   --    converting a universal literal to a specific type. Such qualifiers aid\n+   --    the resolution of accidental overloading of binary or unary operators\n+   --    which may occur in instances.\n+\n    --  Is_Static_Coextension (Flag14-Sem)\n    --    Present in N_Allocator nodes. Set if the allocator is a coextension\n    --    of an object allocated on the stack rather than the heap.\n@@ -4542,6 +4548,7 @@ package Sinfo is\n       --  Subtype_Mark (Node4)\n       --  Expression (Node3) expression or aggregate\n       --  plus fields for expression\n+      --  Is_Qualified_Universal_Literal (Flag4-Sem)\n \n       --------------------\n       -- 4.8  Allocator --\n@@ -9399,6 +9406,9 @@ package Sinfo is\n    function Is_Protected_Subprogram_Body\n      (N : Node_Id) return Boolean;    -- Flag7\n \n+   function Is_Qualified_Universal_Literal\n+     (N : Node_Id) return Boolean;    -- Flag4\n+\n    function Is_Static_Coextension\n      (N : Node_Id) return Boolean;    -- Flag14\n \n@@ -10437,6 +10447,9 @@ package Sinfo is\n    procedure Set_Is_Protected_Subprogram_Body\n      (N : Node_Id; Val : Boolean := True);    -- Flag7\n \n+   procedure Set_Is_Qualified_Universal_Literal\n+     (N : Node_Id; Val : Boolean := True);    -- Flag4\n+\n    procedure Set_Is_Static_Coextension\n      (N : Node_Id; Val : Boolean := True);    -- Flag14\n \n@@ -12819,6 +12832,7 @@ package Sinfo is\n    pragma Inline (Is_Power_Of_2_For_Shift);\n    pragma Inline (Is_Prefixed_Call);\n    pragma Inline (Is_Protected_Subprogram_Body);\n+   pragma Inline (Is_Qualified_Universal_Literal);\n    pragma Inline (Is_Static_Coextension);\n    pragma Inline (Is_Static_Expression);\n    pragma Inline (Is_Subprogram_Descriptor);\n@@ -13160,6 +13174,7 @@ package Sinfo is\n    pragma Inline (Set_Is_Power_Of_2_For_Shift);\n    pragma Inline (Set_Is_Prefixed_Call);\n    pragma Inline (Set_Is_Protected_Subprogram_Body);\n+   pragma Inline (Set_Is_Qualified_Universal_Literal);\n    pragma Inline (Set_Is_Static_Coextension);\n    pragma Inline (Set_Is_Static_Expression);\n    pragma Inline (Set_Is_Subprogram_Descriptor);"}]}