{"sha": "56f61bfff3b306275fde5e3447ddbb9ba6b0bf38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZmNjFiZmZmM2IzMDYyNzVmZGU1ZTM0NDdkZGJiOWJhNmIwYmYzOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-10-01T10:39:16Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-10-01T10:39:16Z"}, "message": "type_traits.h: Avoid _T, badname for some targets; also avoid plain T.\n\n2006-10-01  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/type_traits.h: Avoid _T, badname for some targets;\n\talso avoid plain T.\n\nFrom-SVN: r117347", "tree": {"sha": "0b1e43c681fedc1ce960c78a9dc01d1c77d79554", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b1e43c681fedc1ce960c78a9dc01d1c77d79554"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56f61bfff3b306275fde5e3447ddbb9ba6b0bf38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56f61bfff3b306275fde5e3447ddbb9ba6b0bf38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56f61bfff3b306275fde5e3447ddbb9ba6b0bf38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56f61bfff3b306275fde5e3447ddbb9ba6b0bf38/comments", "author": null, "committer": null, "parents": [{"sha": "bc8b35b594a1d5dbe919579e11a4372baeb6f96d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc8b35b594a1d5dbe919579e11a4372baeb6f96d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc8b35b594a1d5dbe919579e11a4372baeb6f96d"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "99eff89a130fcee917952366ee9707b27779dcb1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f61bfff3b306275fde5e3447ddbb9ba6b0bf38/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f61bfff3b306275fde5e3447ddbb9ba6b0bf38/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=56f61bfff3b306275fde5e3447ddbb9ba6b0bf38", "patch": "@@ -1,3 +1,8 @@\n+2006-10-01  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/type_traits.h: Avoid _T, badname for some targets;\n+\talso avoid plain T.\n+\n 2006-10-01  Paolo Carlini  <pcarlini@suse.de>\n \n \t* config/io/basic_file_stdio.cc: As an extension, and"}, {"sha": "27dda0b48ef172880a2d91041c9e05f5c46b6323", "filename": "libstdc++-v3/include/ext/type_traits.h", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f61bfff3b306275fde5e3447ddbb9ba6b0bf38/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f61bfff3b306275fde5e3447ddbb9ba6b0bf38/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h?ref=56f61bfff3b306275fde5e3447ddbb9ba6b0bf38", "patch": "@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n // General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License\n-// along with this library; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n-// MA 02111-1307, USA.\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n \n // As a special exception, you may use this file as part of a free\n // software library without restriction.  Specifically, if other files\n@@ -62,11 +62,11 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n \n   // Given an integral builtin type, return the corresponding unsigned type.\n-  template<typename _T>\n+  template<typename _Tp>\n     struct __add_unsigned\n     { \n     private:\n-      typedef __enable_if<std::__is_integer<_T>::__value, _T> __if_type;\n+      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;\n       \n     public:\n       typedef typename __if_type::__type __type; \n@@ -105,11 +105,11 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n \n   // Given an integral builtin type, return the corresponding signed type.\n-  template<typename _T>\n+  template<typename _Tp>\n     struct __remove_unsigned\n     { \n     private:\n-      typedef __enable_if<std::__is_integer<_T>::__value, _T> __if_type;\n+      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;\n       \n     public:\n       typedef typename __if_type::__type __type; \n@@ -149,14 +149,15 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n   // Compile time constants for builtin types.\n   // Sadly std::numeric_limits member functions cannot be used for this.\n-#define __glibcxx_signed(T) ((T)(-1) < 0)\n-#define __glibcxx_digits(T) (sizeof(T) * __CHAR_BIT__ - __glibcxx_signed(T))\n+#define __glibcxx_signed(_Tp) ((_Tp)(-1) < 0)\n+#define __glibcxx_digits(_Tp) \\\n+  (sizeof(_Tp) * __CHAR_BIT__ - __glibcxx_signed(_Tp))\n \n-#define __glibcxx_min(T) \\\n-  (__glibcxx_signed(T) ? (T)1 << __glibcxx_digits(T) : (T)0)\n+#define __glibcxx_min(_Tp) \\\n+  (__glibcxx_signed(_Tp) ? (_Tp)1 << __glibcxx_digits(_Tp) : (_Tp)0)\n \n-#define __glibcxx_max(T) \\\n-  (__glibcxx_signed(T) ? ((T)1 << __glibcxx_digits(T)) - 1 : ~(T)0)\n+#define __glibcxx_max(_Tp) \\\n+  (__glibcxx_signed(_Tp) ? ((_Tp)1 << __glibcxx_digits(_Tp)) - 1 : ~(_Tp)0)\n \n   template<typename _Value>\n     struct __numeric_traits_integer"}]}