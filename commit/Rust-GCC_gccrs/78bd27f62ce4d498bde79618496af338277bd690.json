{"sha": "78bd27f62ce4d498bde79618496af338277bd690", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhiZDI3ZjYyY2U0ZDQ5OGJkZTc5NjE4NDk2YWYzMzgyNzdiZDY5MA==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2005-10-23T22:16:38Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2005-10-23T22:16:38Z"}, "message": "re PR fortran/23635 (Argument of ichar at (1) must be of length one)\n\n2005-10-23  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR fortran/23635\n        * gfortran.dg/ichar_1.f90: Add tests for derived types.\n\n\n2005-10-23  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR fortran/23635\n        * check.c (gfc_check_ichar_iachar): Move the code around so\n        that the check on the length is after check for\n        references.\n\nFrom-SVN: r105829", "tree": {"sha": "7aa1bb5db6f4fe02eac84562f3fded9ea787a940", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7aa1bb5db6f4fe02eac84562f3fded9ea787a940"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78bd27f62ce4d498bde79618496af338277bd690", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78bd27f62ce4d498bde79618496af338277bd690", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78bd27f62ce4d498bde79618496af338277bd690", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78bd27f62ce4d498bde79618496af338277bd690/comments", "author": null, "committer": null, "parents": [{"sha": "f2c48d8b417434e44eb1a18c76d205bedefc0f38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2c48d8b417434e44eb1a18c76d205bedefc0f38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2c48d8b417434e44eb1a18c76d205bedefc0f38"}], "stats": {"total": 76, "additions": 56, "deletions": 20}, "files": [{"sha": "095695f3bf0f8a695c8b7f376c3937ef25210abb", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bd27f62ce4d498bde79618496af338277bd690/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bd27f62ce4d498bde79618496af338277bd690/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=78bd27f62ce4d498bde79618496af338277bd690", "patch": "@@ -1,3 +1,10 @@\n+2005-10-23  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR fortran/23635\n+\t* check.c (gfc_check_ichar_iachar): Move the code around so\n+\tthat the check on the length is after check for\n+\treferences.\n+\t\n 2005-10-23  Asher Langton  <langton2@llnl.gov>\n \n \t* decl.c (match_type_spec): Add a BYTE type as an extension."}, {"sha": "e2e95017cfc747f35cf44261af8853e71d711abb", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bd27f62ce4d498bde79618496af338277bd690/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bd27f62ce4d498bde79618496af338277bd690/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=78bd27f62ce4d498bde79618496af338277bd690", "patch": "@@ -929,16 +929,7 @@ gfc_check_ichar_iachar (gfc_expr * c)\n   if (type_check (c, 0, BT_CHARACTER) == FAILURE)\n     return FAILURE;\n \n-  /* Check that the argument is length one.  Non-constant lengths\n-     can't be checked here, so assume thay are ok.  */\n-  if (c->ts.cl && c->ts.cl->length)\n-    {\n-      /* If we already have a length for this expression then use it.  */\n-      if (c->ts.cl->length->expr_type != EXPR_CONSTANT)\n-\treturn SUCCESS;\n-      i = mpz_get_si (c->ts.cl->length->value.integer);\n-    }\n-  else if (c->expr_type == EXPR_VARIABLE || c->expr_type == EXPR_SUBSTRING)\n+  if (c->expr_type == EXPR_VARIABLE || c->expr_type == EXPR_SUBSTRING)\n     {\n       gfc_expr *start;\n       gfc_expr *end;\n@@ -952,18 +943,32 @@ gfc_check_ichar_iachar (gfc_expr * c)\n       gcc_assert (ref == NULL || ref->type == REF_SUBSTRING);\n \n       if (!ref)\n-\treturn SUCCESS;\n-\n-      start = ref->u.ss.start;\n-      end = ref->u.ss.end;\n+\t{\n+          /* Check that the argument is length one.  Non-constant lengths\n+\t     can't be checked here, so assume thay are ok.  */\n+\t  if (c->ts.cl && c->ts.cl->length)\n+\t    {\n+\t      /* If we already have a length for this expression then use it.  */\n+\t      if (c->ts.cl->length->expr_type != EXPR_CONSTANT)\n+\t\treturn SUCCESS;\n+\t      i = mpz_get_si (c->ts.cl->length->value.integer);\n+\t    }\n+\t  else \n+\t    return SUCCESS;\n+\t}\n+      else\n+\t{\n+\t  start = ref->u.ss.start;\n+\t  end = ref->u.ss.end;\n \n-      gcc_assert (start);\n-      if (end == NULL || end->expr_type != EXPR_CONSTANT\n-\t  || start->expr_type != EXPR_CONSTANT)\n-\treturn SUCCESS;\n+\t  gcc_assert (start);\n+\t  if (end == NULL || end->expr_type != EXPR_CONSTANT\n+\t      || start->expr_type != EXPR_CONSTANT)\n+\t    return SUCCESS;\n \n-      i = mpz_get_si (end->value.integer) + 1\n-\t  - mpz_get_si (start->value.integer);\n+\t  i = mpz_get_si (end->value.integer) + 1\n+\t      - mpz_get_si (start->value.integer);\n+\t}\n     }\n   else\n     return SUCCESS;"}, {"sha": "57c5b589c0f246eb8a9e11ae19806eb5c9310bdf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bd27f62ce4d498bde79618496af338277bd690/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bd27f62ce4d498bde79618496af338277bd690/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=78bd27f62ce4d498bde79618496af338277bd690", "patch": "@@ -1,3 +1,8 @@\n+2005-10-23  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR fortran/23635\n+\t* gfortran.dg/ichar_1.f90: Add tests for derived types.\n+\n 2005-10-23  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \tPR target/18911"}, {"sha": "104c5d166af5023fe88f950db441c3ab807a1ba4", "filename": "gcc/testsuite/gfortran.dg/ichar_1.f90", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bd27f62ce4d498bde79618496af338277bd690/gcc%2Ftestsuite%2Fgfortran.dg%2Fichar_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bd27f62ce4d498bde79618496af338277bd690/gcc%2Ftestsuite%2Fgfortran.dg%2Fichar_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fichar_1.f90?ref=78bd27f62ce4d498bde79618496af338277bd690", "patch": "@@ -14,13 +14,23 @@ subroutine test (c)\n end subroutine\n \n program ichar_1\n+   type derivedtype\n+      character(len=4) :: addr\n+   end type derivedtype\n+\n+   type derivedtype1\n+      character(len=1) :: addr\n+   end type derivedtype1\n+\n    integer i\n    integer, parameter :: j = 2\n    character(len=8) :: c = 'abcd'\n    character(len=1) :: g1(2)\n    character(len=1) :: g2(2,2)\n    character*1, parameter :: s1 = 'e'\n    character*2, parameter :: s2 = 'ef'\n+   type(derivedtype) :: dt\n+   type(derivedtype1) :: dt1\n \n    if (ichar(c(3:3)) /= 97) call abort\n    if (ichar(c(:1)) /= 97) call abort\n@@ -45,6 +55,15 @@ program ichar_1\n \n    if (ichar(c(3:3)) /= 97) call abort\n    i = ichar(c)      ! { dg-error \"must be of length one\" \"\" }\n+   \n+   i = ichar(dt%addr(1:1))\n+   i = ichar(dt%addr) ! { dg-error \"must be of length one\" \"\" }\n+   i = ichar(dt%addr(1:2)) ! { dg-error \"must be of length one\" \"\" }\n+   i = ichar(dt%addr(1:)) ! { dg-error \"must be of length one\" \"\" }\n+   \n+   i = ichar(dt1%addr(1:1))\n+   i = ichar(dt1%addr)\n+\n \n    call test(g1(1))\n end program ichar_1"}]}