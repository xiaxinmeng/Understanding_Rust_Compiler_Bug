{"sha": "408d88af60e3268f7fad59fa393ec7e28922c435", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA4ZDg4YWY2MGUzMjY4ZjdmYWQ1OWZhMzkzZWM3ZTI4OTIyYzQzNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-12T20:38:18Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-12T20:40:11Z"}, "message": "libcpp: Fix ICE with -Wtraditional preprocessing [PR101638]\n\nThe following testcase ICEs in cpp_sys_macro_p, because cpp_sys_macro_p\nis called for a builtin macro which doesn't use node->value.macro union\nmember but a different one and so dereferencing it ICEs.\nAs the testcase is distilled from contemporary glibc headers, it means\nbasically -Wtraditional now ICEs on almost everything.\n\nThe fix can be either the patch below, return true for builtin macros,\nor we could instead return false for builtin macros, or the fix could\nbe also (untested):\n--- libcpp/expr.c       2021-05-07 10:34:46.345122608 +0200\n+++ libcpp/expr.c       2021-08-12 09:54:01.837556365 +0200\n@@ -783,13 +783,13 @@ cpp_classify_number (cpp_reader *pfile,\n\n       /* Traditional C only accepted the 'L' suffix.\n          Suppress warning about 'LL' with -Wno-long-long.  */\n-      if (CPP_WTRADITIONAL (pfile) && ! cpp_sys_macro_p (pfile))\n+      if (CPP_WTRADITIONAL (pfile))\n        {\n          int u_or_i = (result & (CPP_N_UNSIGNED|CPP_N_IMAGINARY));\n          int large = (result & CPP_N_WIDTH) == CPP_N_LARGE\n                       && CPP_OPTION (pfile, cpp_warn_long_long);\n\n-         if (u_or_i || large)\n+         if ((u_or_i || large) && ! cpp_sys_macro_p (pfile))\n            cpp_warning_with_line (pfile, large ? CPP_W_LONG_LONG : CPP_W_TRADITIONAL,\n                                   virtual_location, 0,\n                                   \"traditional C rejects the \\\"%.*s\\\" suffix\",\nThe builtin macros at least currently don't add any suffixes\nor numbers -Wtraditional would like to warn about.  For floating\npoint suffixes, -Wtraditional calls cpp_sys_macro_p only right\naway before emitting the warning, but in the above case the ICE\nis because cpp_sys_macro_p is called even if the number doesn't\nhave any suffixes (that is I think always for builtin macros\nright now).\n\n2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR preprocessor/101638\n\t* macro.c (cpp_sys_macro_p): Return true instead of\n\tcrashing on builtin macros.\n\n\t* gcc.dg/cpp/pr101638.c: New test.", "tree": {"sha": "799a76b5b24d71b3bb0944c84548d80b05fd205f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/799a76b5b24d71b3bb0944c84548d80b05fd205f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/408d88af60e3268f7fad59fa393ec7e28922c435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/408d88af60e3268f7fad59fa393ec7e28922c435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/408d88af60e3268f7fad59fa393ec7e28922c435", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/408d88af60e3268f7fad59fa393ec7e28922c435/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8464894c86b03e4407dee83868bbaf29a3d43523", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8464894c86b03e4407dee83868bbaf29a3d43523", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8464894c86b03e4407dee83868bbaf29a3d43523"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "103047320d00f18a6581b582249fdaa1173ebff3", "filename": "gcc/testsuite/gcc.dg/cpp/pr101638.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/408d88af60e3268f7fad59fa393ec7e28922c435/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr101638.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/408d88af60e3268f7fad59fa393ec7e28922c435/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr101638.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr101638.c?ref=408d88af60e3268f7fad59fa393ec7e28922c435", "patch": "@@ -0,0 +1,7 @@\n+/* PR preprocessor/101638 */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-Wtraditional\" } */\n+\n+#define foo(attr) __has_attribute(attr)\n+#if foo(__deprecated__)\n+#endif"}, {"sha": "fab6779ef898d97340f2e86ff1d6fd92605a0e12", "filename": "libcpp/macro.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/408d88af60e3268f7fad59fa393ec7e28922c435/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/408d88af60e3268f7fad59fa393ec7e28922c435/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=408d88af60e3268f7fad59fa393ec7e28922c435", "patch": "@@ -3116,7 +3116,8 @@ cpp_get_token_with_location (cpp_reader *pfile, location_t *loc)\n \n /* Returns true if we're expanding an object-like macro that was\n    defined in a system header.  Just checks the macro at the top of\n-   the stack.  Used for diagnostic suppression.  */\n+   the stack.  Used for diagnostic suppression.\n+   Also return true for builtin macros.  */\n int\n cpp_sys_macro_p (cpp_reader *pfile)\n {\n@@ -3127,7 +3128,11 @@ cpp_sys_macro_p (cpp_reader *pfile)\n   else\n     node = pfile->context->c.macro;\n \n-  return node && node->value.macro && node->value.macro->syshdr;\n+  if (!node)\n+    return false;\n+  if (cpp_builtin_macro_p (node))\n+    return true;\n+  return node->value.macro && node->value.macro->syshdr;\n }\n \n /* Read each token in, until end of the current file.  Directives are"}]}