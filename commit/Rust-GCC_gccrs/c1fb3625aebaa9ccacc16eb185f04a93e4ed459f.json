{"sha": "c1fb3625aebaa9ccacc16eb185f04a93e4ed459f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFmYjM2MjVhZWJhYTljY2FjYzE2ZWIxODVmMDRhOTNlNGVkNDU5Zg==", "commit": {"author": {"name": "Mohan Embar", "email": "gnustuff@thisiscool.com", "date": "2003-12-11T15:35:13Z"}, "committer": {"name": "Mohan Embar", "email": "membar@gcc.gnu.org", "date": "2003-12-11T15:35:13Z"}, "message": "* gnu/java/nio/SocketChannelImpl.java\n\t(write): Removed diagnostic trace.\n\t* gnu/java/nio/natSelectorImplPosix.cc: Added\n\tincludes for java.lang.Thread and java.io.InterruptedIOException.\n\t(helper_put_filedescriptors): Don't put invalid file descriptors\n\tin select set.\n\t(helper_get_filedescriptors): Clear invalid file descriptors\n\tfrom select set.\n\t(helper_reset): New method for clearing our file descriptor\n\tarray.\n\t(implSelect): Correctly calculate timeout if specified and\n\tlegal.\n\tIntercept and deal with any java.io.InterruptedIOException\n\tthrown by _Jv_select().\n\nFrom-SVN: r74537", "tree": {"sha": "a17332ea63799b3f5567f998f28e81a0b0f834c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a17332ea63799b3f5567f998f28e81a0b0f834c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1fb3625aebaa9ccacc16eb185f04a93e4ed459f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1fb3625aebaa9ccacc16eb185f04a93e4ed459f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1fb3625aebaa9ccacc16eb185f04a93e4ed459f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1fb3625aebaa9ccacc16eb185f04a93e4ed459f/comments", "author": null, "committer": null, "parents": [{"sha": "834b1209074da1983d7688ba5eebb54e9c9920ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/834b1209074da1983d7688ba5eebb54e9c9920ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/834b1209074da1983d7688ba5eebb54e9c9920ef"}], "stats": {"total": 77, "additions": 63, "deletions": 14}, "files": [{"sha": "5a7f73ba5f0a45f38d24ac53f9f9ba7d8fe9629e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fb3625aebaa9ccacc16eb185f04a93e4ed459f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fb3625aebaa9ccacc16eb185f04a93e4ed459f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c1fb3625aebaa9ccacc16eb185f04a93e4ed459f", "patch": "@@ -1,3 +1,20 @@\n+2003-12-11  Mohan Embar  <gnustuff@thisiscool.com>\n+\n+\t* gnu/java/nio/SocketChannelImpl.java\n+\t(write): Removed diagnostic trace.\n+\t* gnu/java/nio/natSelectorImplPosix.cc: Added\n+\tincludes for java.lang.Thread and java.io.InterruptedIOException.\n+\t(helper_put_filedescriptors): Don't put invalid file descriptors\n+\tin select set.\n+\t(helper_get_filedescriptors): Clear invalid file descriptors\n+\tfrom select set.\n+\t(helper_reset): New method for clearing our file descriptor\n+\tarray.\n+\t(implSelect): Correctly calculate timeout if specified and\n+\tlegal.\n+\tIntercept and deal with any java.io.InterruptedIOException\n+\tthrown by _Jv_select().\n+\n 2003-12-08  Fernando Nasser  <fnasser@redhat.com>\n \n \t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c (awt_event_handler):"}, {"sha": "ced8ef2476a10aacf3e997bf6438b199d3610f76", "filename": "libjava/gnu/java/nio/SocketChannelImpl.java", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fb3625aebaa9ccacc16eb185f04a93e4ed459f/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fb3625aebaa9ccacc16eb185f04a93e4ed459f/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java?ref=c1fb3625aebaa9ccacc16eb185f04a93e4ed459f", "patch": "@@ -301,8 +301,6 @@ public int write (ByteBuffer src)\n         data = src.array();\n       }\n \n-    System.out.println (\"INTERNAL: writing to socket outputstream\");\n-    \n     OutputStream output = socket.getOutputStream();\n     output.write (data, offset, len);\n "}, {"sha": "ac16dac7b9a715f2ec7dbd47b6b64de184c7e4ab", "filename": "libjava/gnu/java/nio/natSelectorImplPosix.cc", "status": "modified", "additions": 46, "deletions": 12, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fb3625aebaa9ccacc16eb185f04a93e4ed459f/libjava%2Fgnu%2Fjava%2Fnio%2FnatSelectorImplPosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fb3625aebaa9ccacc16eb185f04a93e4ed459f/libjava%2Fgnu%2Fjava%2Fnio%2FnatSelectorImplPosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatSelectorImplPosix.cc?ref=c1fb3625aebaa9ccacc16eb185f04a93e4ed459f", "patch": "@@ -15,7 +15,9 @@ details.  */\n #include <string.h>\n \n #include <gnu/java/nio/SelectorImpl.h>\n+#include <java/io/InterruptedIOException.h>\n #include <java/io/IOException.h>\n+#include <java/lang/Thread.h>\n \n static void\n helper_put_filedescriptors (jintArray fdArray, fd_set& fds, int& max_fd)\n@@ -24,10 +26,14 @@ helper_put_filedescriptors (jintArray fdArray, fd_set& fds, int& max_fd)\n \n   for (int index = 0; index < JvGetArrayLength (fdArray); index++)\n     {\n-      FD_SET (tmpFDArray [index], &fds);\n-\n-      if (tmpFDArray [index] > max_fd)\n-        max_fd = tmpFDArray [index];\n+      int fd = tmpFDArray [index];\n+      if (fd > 0)\n+        {\n+          FD_SET (tmpFDArray [index], &fds);\n+\n+          if (tmpFDArray [index] > max_fd)\n+            max_fd = tmpFDArray [index];\n+        }\n     }\n }\n \n@@ -37,8 +43,20 @@ helper_get_filedescriptors (jintArray& fdArray, fd_set fds)\n   jint* tmpFDArray = elements (fdArray);\n   \n   for (int index = 0; index < JvGetArrayLength (fdArray); index++)\n-    if (!FD_ISSET (tmpFDArray [index], &fds))\n-      tmpFDArray [index] = 0;\n+    {\n+      int fd = tmpFDArray [index];\n+      if (fd < 0 || !FD_ISSET (fd, &fds))\n+        tmpFDArray [index] = 0;\n+    }\n+}\n+\n+static void\n+helper_reset (jintArray& fdArray)\n+{\n+  jint* tmpFDArray = elements (fdArray);\n+  \n+  for (int index = 0; index < JvGetArrayLength (fdArray); index++)\n+    tmpFDArray [index] = 0;\n }\n \n jint\n@@ -53,15 +71,15 @@ gnu::java::nio::SelectorImpl::implSelect (jintArray read, jintArray write,\n   struct timeval real_time_data;\n   struct timeval *time_data = NULL;\n \n-  real_time_data.tv_sec = 0;\n-  real_time_data.tv_usec = timeout;\n-\n-  // If not legal timeout value is given, use NULL.\n+  // If a legal timeout value isn't given, use NULL.\n   // This means an infinite timeout. The specification\n   // also says that a zero timeout should be treated\n-  // as infinite.\n+  // as infinite. Otherwise (if the timeout value is legal),\n+  // fill our timeval struct and use it for the select.\n   if (timeout > 0)\n     {\n+      real_time_data.tv_sec = timeout / 1000;\n+      real_time_data.tv_usec = (timeout % 1000) * 1000;\n       time_data = &real_time_data;\n     }\n \n@@ -76,7 +94,23 @@ gnu::java::nio::SelectorImpl::implSelect (jintArray read, jintArray write,\n   helper_put_filedescriptors (except, except_fds, max_fd);\n \n   // Actually do the select\n-  result = _Jv_select (max_fd + 1, &read_fds, &write_fds, &except_fds, time_data);\n+  try\n+    {\n+      result = _Jv_select (max_fd + 1, &read_fds, &write_fds,\n+                           &except_fds, time_data);\n+    }\n+  catch (::java::io::InterruptedIOException *e)\n+    {\n+      // The behavior of JRE 1.4.1 is that no exception is thrown\n+      // when the thread is interrupted, but the thread's interrupt\n+      // status is set. Clear all of our select sets and return 0,\n+      // indicating that nothing was selected.\n+      ::java::lang::Thread::currentThread ()->interrupt ();\n+       helper_reset (read);\n+       helper_reset (write);\n+       helper_reset (except);\n+       return 0;\n+    }\n \n   if (result < 0)\n     {"}]}