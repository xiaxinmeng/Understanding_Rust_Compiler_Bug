{"sha": "46b68a3769fb5e5d0f18f7ef9211ce43274b08d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZiNjhhMzc2OWZiNWU1ZDBmMThmN2VmOTIxMWNlNDMyNzRiMDhkMg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-03-02T21:10:49Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-03-02T21:10:49Z"}, "message": "(expand_builtin, BUILT_IN_FRAME_ADDRESS case): Use new\nmacros SETUP_FRAME_ADDRESSES and RETURN_ADDR_IN_PREVIOUS_FRAME.\n\nFrom-SVN: r3609", "tree": {"sha": "fae1e4f63305d64dd2b4c7f9e8fe740c1d6ef215", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fae1e4f63305d64dd2b4c7f9e8fe740c1d6ef215"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46b68a3769fb5e5d0f18f7ef9211ce43274b08d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46b68a3769fb5e5d0f18f7ef9211ce43274b08d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46b68a3769fb5e5d0f18f7ef9211ce43274b08d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46b68a3769fb5e5d0f18f7ef9211ce43274b08d2/comments", "author": null, "committer": null, "parents": [{"sha": "953fe17998caade318c6a8fa25b4629dc8aa52e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/953fe17998caade318c6a8fa25b4629dc8aa52e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/953fe17998caade318c6a8fa25b4629dc8aa52e1"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "aa98632678d6c78cbf2ee90c5ec4c0c310a4e299", "filename": "gcc/expr.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46b68a3769fb5e5d0f18f7ef9211ce43274b08d2/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46b68a3769fb5e5d0f18f7ef9211ce43274b08d2/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=46b68a3769fb5e5d0f18f7ef9211ce43274b08d2", "patch": "@@ -6301,6 +6301,23 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t  rtx tem = frame_pointer_rtx;\n \t  int i;\n \n+\t  /* Some machines need special handling before we can access arbitrary\n+\t     frames.  For example, on the sparc, we must first flush all\n+\t     register windows to the stack.  */\n+#ifdef SETUP_FRAME_ADDRESSES\n+\t  SETUP_FRAME_ADDRESSES ();\n+#endif\n+\n+\t  /* On the sparc, the return address is not in the frame, it is\n+\t     in a register.  There is no way to access it off of the current\n+\t     frame pointer, but it can be accessed off the previous frame\n+\t     pointer by reading the value from the register window save\n+\t     area.  */\n+#ifdef RETURN_ADDR_IN_PREVIOUS_FRAME\n+\t  if (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_RETURN_ADDRESS)\n+\t    count--;\n+#endif\n+\n \t  /* Scan back COUNT frames to the specified frame.  */\n \t  for (i = 0; i < count; i++)\n \t    {"}]}