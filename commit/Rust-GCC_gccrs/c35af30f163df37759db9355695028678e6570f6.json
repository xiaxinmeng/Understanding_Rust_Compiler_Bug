{"sha": "c35af30f163df37759db9355695028678e6570f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM1YWYzMGYxNjNkZjM3NzU5ZGI5MzU1Njk1MDI4Njc4ZTY1NzBmNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-11-10T20:45:25Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-11-10T20:45:25Z"}, "message": "re PR target/10127 (-fstack-check let's program crash)\n\n\tPR target/10127\n\tPR ada/20548\n\t* expr.h (anti_adjust_stack_and_probe): Declare.\n\t* explow.c (anti_adjust_stack_and_probe): Make global, add ADJUST_BACK\n\tparameter and rewrite head comment.\n\t(allocate_dynamic_stack_space): Adjust call to above function.\n\t* function.c (expand_function_end): Handle STACK_CHECK_MOVING_SP.\n\n\t* tree.h (dwarf2out_args_size): Delete.\n\t* dwarf2out.c (dwarf2out_args_size): Make static and move around.\n\t(dwarf2out_args_size_adjust): Delete prototype and move around.\n\t(dwarf2out_frame_debug_expr): Do not record arg size adjustments for\n\tACCUMULATE_OUTGOING_ARGS targets.\n\nFrom-SVN: r154079", "tree": {"sha": "c3c5f7e26211053f186e7a889a1713c799a96f25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3c5f7e26211053f186e7a889a1713c799a96f25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c35af30f163df37759db9355695028678e6570f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c35af30f163df37759db9355695028678e6570f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c35af30f163df37759db9355695028678e6570f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c35af30f163df37759db9355695028678e6570f6/comments", "author": null, "committer": null, "parents": [{"sha": "35230a7895e65ec3a2fdb48600ef39983b1605b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35230a7895e65ec3a2fdb48600ef39983b1605b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35230a7895e65ec3a2fdb48600ef39983b1605b4"}], "stats": {"total": 145, "additions": 83, "deletions": 62}, "files": [{"sha": "e22b3f9020688a1408e82f05e39d741d0e196b73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35af30f163df37759db9355695028678e6570f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35af30f163df37759db9355695028678e6570f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c35af30f163df37759db9355695028678e6570f6", "patch": "@@ -1,3 +1,19 @@\n+2009-11-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/10127\n+\tPR ada/20548\n+\t* expr.h (anti_adjust_stack_and_probe): Declare.\n+\t* explow.c (anti_adjust_stack_and_probe): Make global, add ADJUST_BACK\n+\tparameter and rewrite head comment.\n+\t(allocate_dynamic_stack_space): Adjust call to above function.\n+\t* function.c (expand_function_end): Handle STACK_CHECK_MOVING_SP.\n+\n+\t* tree.h (dwarf2out_args_size): Delete.\n+\t* dwarf2out.c (dwarf2out_args_size): Make static and move around.\n+\t(dwarf2out_args_size_adjust): Delete prototype and move around.\n+\t(dwarf2out_frame_debug_expr): Do not record arg size adjustments for\n+\tACCUMULATE_OUTGOING_ARGS targets.\n+\n 2009-11-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/sparc.c (print_operand) <')'>: Test for a non-null"}, {"sha": "e3a641206d8d54682d5728f8c31b69b77815354e", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 44, "deletions": 46, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35af30f163df37759db9355695028678e6570f6/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35af30f163df37759db9355695028678e6570f6/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=c35af30f163df37759db9355695028678e6570f6", "patch": "@@ -470,8 +470,6 @@ static void output_cfi (dw_cfi_ref, dw_fde_ref, int);\n static void output_cfi_directive (dw_cfi_ref);\n static void output_call_frame_info (int);\n static void dwarf2out_note_section_used (void);\n-static void dwarf2out_stack_adjust (rtx, bool);\n-static void dwarf2out_args_size_adjust (HOST_WIDE_INT, const char *);\n static void flush_queued_reg_saves (void);\n static bool clobbers_queued_reg_save (const_rtx);\n static void dwarf2out_frame_debug_expr (rtx, const char *);\n@@ -1157,25 +1155,6 @@ dwarf2out_window_save (const char *label)\n   add_fde_cfi (label, cfi);\n }\n \n-/* Add a CFI to update the running total of the size of arguments\n-   pushed onto the stack.  */\n-\n-void\n-dwarf2out_args_size (const char *label, HOST_WIDE_INT size)\n-{\n-  dw_cfi_ref cfi;\n-\n-  if (size == old_args_size)\n-    return;\n-\n-  old_args_size = size;\n-\n-  cfi = new_cfi ();\n-  cfi->dw_cfi_opc = DW_CFA_GNU_args_size;\n-  cfi->dw_cfi_oprnd1.dw_cfi_offset = size;\n-  add_fde_cfi (label, cfi);\n-}\n-\n /* Entry point for saving a register to the stack.  REG is the GCC register\n    number.  LABEL and OFFSET are passed to reg_save.  */\n \n@@ -1526,6 +1505,48 @@ compute_barrier_args_size (void)\n   VEC_free (rtx, heap, next);\n }\n \n+/* Add a CFI to update the running total of the size of arguments\n+   pushed onto the stack.  */\n+\n+static void\n+dwarf2out_args_size (const char *label, HOST_WIDE_INT size)\n+{\n+  dw_cfi_ref cfi;\n+\n+  if (size == old_args_size)\n+    return;\n+\n+  old_args_size = size;\n+\n+  cfi = new_cfi ();\n+  cfi->dw_cfi_opc = DW_CFA_GNU_args_size;\n+  cfi->dw_cfi_oprnd1.dw_cfi_offset = size;\n+  add_fde_cfi (label, cfi);\n+}\n+\n+/* Adjust args_size based on stack adjustment OFFSET.  */\n+\n+static void\n+dwarf2out_args_size_adjust (HOST_WIDE_INT offset, const char *label)\n+{\n+  if (cfa.reg == STACK_POINTER_REGNUM)\n+    cfa.offset += offset;\n+\n+  if (cfa_store.reg == STACK_POINTER_REGNUM)\n+    cfa_store.offset += offset;\n+\n+#ifndef STACK_GROWS_DOWNWARD\n+  offset = -offset;\n+#endif\n+\n+  args_size += offset;\n+  if (args_size < 0)\n+    args_size = 0;\n+\n+  def_cfa_1 (label, &cfa);\n+  if (flag_asynchronous_unwind_tables)\n+    dwarf2out_args_size (label, args_size);\n+}\n \n /* Check INSN to see if it looks like a push or a stack adjustment, and\n    make a note of it if it does.  EH uses this information to find out how\n@@ -1619,30 +1640,6 @@ dwarf2out_stack_adjust (rtx insn, bool after_p)\n   dwarf2out_args_size_adjust (offset, label);\n }\n \n-/* Adjust args_size based on stack adjustment OFFSET.  */\n-\n-static void\n-dwarf2out_args_size_adjust (HOST_WIDE_INT offset, const char *label)\n-{\n-  if (cfa.reg == STACK_POINTER_REGNUM)\n-    cfa.offset += offset;\n-\n-  if (cfa_store.reg == STACK_POINTER_REGNUM)\n-    cfa_store.offset += offset;\n-\n-#ifndef STACK_GROWS_DOWNWARD\n-  offset = -offset;\n-#endif\n-\n-  args_size += offset;\n-  if (args_size < 0)\n-    args_size = 0;\n-\n-  def_cfa_1 (label, &cfa);\n-  if (flag_asynchronous_unwind_tables)\n-    dwarf2out_args_size (label, args_size);\n-}\n-\n #endif\n \n /* We delay emitting a register save until either (a) we reach the end\n@@ -2209,7 +2206,8 @@ dwarf2out_frame_debug_expr (rtx expr, const char *label)\n \t      && (!MEM_P (SET_DEST (elem)) || GET_CODE (expr) == SEQUENCE)\n \t      && (RTX_FRAME_RELATED_P (elem) || par_index == 0))\n \t    dwarf2out_frame_debug_expr (elem, label);\n-\t  else if (GET_CODE (elem) == SET\n+\t  else if (!ACCUMULATE_OUTGOING_ARGS\n+\t\t   && GET_CODE (elem) == SET\n \t\t   && par_index != 0\n \t\t   && !RTX_FRAME_RELATED_P (elem))\n \t    {"}, {"sha": "4d1d24e501dc3d0ba86f5cf496b7eaaf07769db4", "filename": "gcc/explow.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35af30f163df37759db9355695028678e6570f6/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35af30f163df37759db9355695028678e6570f6/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=c35af30f163df37759db9355695028678e6570f6", "patch": "@@ -43,7 +43,6 @@ along with GCC; see the file COPYING3.  If not see\n \n static rtx break_out_memory_refs (rtx);\n static void emit_stack_probe (rtx);\n-static void anti_adjust_stack_and_probe (rtx);\n \n \n /* Truncate and perhaps sign-extend C as appropriate for MODE.  */\n@@ -1308,7 +1307,7 @@ allocate_dynamic_stack_space (rtx size, rtx target, int known_align)\n \t}\n \n       if (flag_stack_check && STACK_CHECK_MOVING_SP)\n-\tanti_adjust_stack_and_probe (size);\n+\tanti_adjust_stack_and_probe (size, false);\n       else\n \tanti_adjust_stack (size);\n \n@@ -1545,13 +1544,17 @@ probe_stack_range (HOST_WIDE_INT first, rtx size)\n     }\n }\n \n-/* Adjust the stack by SIZE bytes while probing it.  Note that we skip the\n-   probe for the first interval + a small dope of 4 words and instead probe\n-   that many bytes past the specified size to maintain a protection area.  */\n+/* Adjust the stack pointer by minus SIZE (an rtx for a number of bytes)\n+   while probing it.  This pushes when SIZE is positive.  SIZE need not\n+   be constant.  If ADJUST_BACK is true, adjust back the stack pointer\n+   by plus SIZE at the end.  */\n \n-static void\n-anti_adjust_stack_and_probe (rtx size)\n+void\n+anti_adjust_stack_and_probe (rtx size, bool adjust_back)\n {\n+  /* We skip the probe for the first interval + a small dope of 4 words and\n+     probe that many bytes past the specified size to maintain a protection\n+     area at the botton of the stack.  */\n   const int dope = 4 * UNITS_PER_WORD;\n \n   /* First ensure SIZE is Pmode.  */\n@@ -1660,8 +1663,11 @@ anti_adjust_stack_and_probe (rtx size)\n \t}\n     }\n \n-  /* Adjust back to account for the additional first interval.  */\n-  adjust_stack (GEN_INT (PROBE_INTERVAL + dope));\n+  /* Adjust back and account for the additional first interval.  */\n+  if (adjust_back)\n+    adjust_stack (plus_constant (size, PROBE_INTERVAL + dope));\n+  else\n+    adjust_stack (GEN_INT (PROBE_INTERVAL + dope));\n }\n \n /* Return an rtx representing the register or memory location"}, {"sha": "88d72daad4f05ae0953097c7dedf9645d3e3df3a", "filename": "gcc/expr.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35af30f163df37759db9355695028678e6570f6/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35af30f163df37759db9355695028678e6570f6/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=c35af30f163df37759db9355695028678e6570f6", "patch": "@@ -767,6 +767,9 @@ extern void adjust_stack (rtx);\n /* Add some bytes to the stack.  An rtx says how many.  */\n extern void anti_adjust_stack (rtx);\n \n+/* Add some bytes to the stack while probing it.  An rtx says how many. */\n+extern void anti_adjust_stack_and_probe (rtx, bool);\n+\n /* This enum is used for the following two functions.  */\n enum save_level {SAVE_BLOCK, SAVE_FUNCTION, SAVE_NONLOCAL};\n "}, {"sha": "ca578892869ccc3c509ec05d2682a20d136d217a", "filename": "gcc/function.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35af30f163df37759db9355695028678e6570f6/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35af30f163df37759db9355695028678e6570f6/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=c35af30f163df37759db9355695028678e6570f6", "patch": "@@ -4642,9 +4642,12 @@ expand_function_end (void)\n       for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n \tif (CALL_P (insn))\n \t  {\n+\t    rtx max_frame_size = GEN_INT (STACK_CHECK_MAX_FRAME_SIZE);\n \t    start_sequence ();\n-\t    probe_stack_range (STACK_OLD_CHECK_PROTECT,\n-\t\t\t       GEN_INT (STACK_CHECK_MAX_FRAME_SIZE));\n+\t    if (STACK_CHECK_MOVING_SP)\n+\t      anti_adjust_stack_and_probe (max_frame_size, true);\n+\t    else\n+\t      probe_stack_range (STACK_OLD_CHECK_PROTECT, max_frame_size);\n \t    seq = get_insns ();\n \t    end_sequence ();\n \t    emit_insn_before (seq, stack_check_probe_note);"}, {"sha": "f4d1e2755202e6957a07f7b25c6dd77d2eae8c4e", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35af30f163df37759db9355695028678e6570f6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35af30f163df37759db9355695028678e6570f6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=c35af30f163df37759db9355695028678e6570f6", "patch": "@@ -5161,11 +5161,6 @@ extern void dwarf2out_def_cfa (const char *, unsigned, HOST_WIDE_INT);\n \n extern void dwarf2out_window_save (const char *);\n \n-/* Add a CFI to update the running total of the size of arguments pushed\n-   onto the stack.  */\n-\n-extern void dwarf2out_args_size (const char *, HOST_WIDE_INT);\n-\n /* Entry point for saving a register to the stack.  */\n \n extern void dwarf2out_reg_save (const char *, unsigned, HOST_WIDE_INT);"}]}