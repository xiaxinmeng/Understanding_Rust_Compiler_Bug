{"sha": "f313930195776e1a083957f4d1f6eac0efcc89ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMxMzkzMDE5NTc3NmUxYTA4Mzk1N2Y0ZDFmNmVhYzBlZmNjODllZg==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1995-05-12T18:24:51Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1995-05-12T18:24:51Z"}, "message": "Replace ARM_REG_PREFIX with REGISTER_PREFIX.\n\nReplace ARM_COMMENT_CHAR with ASM_COMMENT_START.\n(arm_asm_output_label): Use USER_LABEL_PREFIX.\n(soft_df_operand): New function.\n\nFrom-SVN: r9652", "tree": {"sha": "7bdff1f246523e9e75b01b148405c950e614a994", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bdff1f246523e9e75b01b148405c950e614a994"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f313930195776e1a083957f4d1f6eac0efcc89ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f313930195776e1a083957f4d1f6eac0efcc89ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f313930195776e1a083957f4d1f6eac0efcc89ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f313930195776e1a083957f4d1f6eac0efcc89ef/comments", "author": null, "committer": null, "parents": [{"sha": "c383667d4fa396fc2748cc163b3527c8de0f7f21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c383667d4fa396fc2748cc163b3527c8de0f7f21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c383667d4fa396fc2748cc163b3527c8de0f7f21"}], "stats": {"total": 72, "additions": 49, "deletions": 23}, "files": [{"sha": "181f1b02f3d4e9197f9710c54745dbcf6556133e", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 49, "deletions": 23, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f313930195776e1a083957f4d1f6eac0efcc89ef/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f313930195776e1a083957f4d1f6eac0efcc89ef/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f313930195776e1a083957f4d1f6eac0efcc89ef", "patch": "@@ -1143,6 +1143,32 @@ di_operand (op, mode)\n     }\n }\n \n+/* Return TRUE for a valid operand of a DFmode operation when -msoft-float.\n+   Either: REG, CONST_DOUBLE or MEM(DImode_address).\n+   Note that this disallows MEM(REG+REG), but allows\n+   MEM(PRE/POST_INC/DEC(REG)).  */\n+\n+int\n+soft_df_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (s_register_operand (op, mode))\n+    return TRUE;\n+\n+  switch (GET_CODE (op))\n+    {\n+    case CONST_DOUBLE:\n+      return TRUE;\n+\n+    case MEM:\n+      return memory_address_p (DFmode, XEXP (op, 0));\n+\n+    default:\n+      return FALSE;\n+    }\n+}\n+\n /* Return TRUE for valid index operands. */\n \n int\n@@ -1856,14 +1882,14 @@ print_multi_reg (stream, instr, mask, hat)\n   int not_first = FALSE;\n \n   fputc ('\\t', stream);\n-  fprintf (stream, instr, ARM_REG_PREFIX);\n+  fprintf (stream, instr, REGISTER_PREFIX);\n   fputs (\", {\", stream);\n   for (i = 0; i < 16; i++)\n     if (mask & (1 << i))\n       {\n \tif (not_first)\n \t  fprintf (stream, \", \");\n-\tfprintf (stream, \"%s%s\", ARM_REG_PREFIX, reg_names[i]);\n+\tfprintf (stream, \"%s%s\", REGISTER_PREFIX, reg_names[i]);\n \tnot_first = TRUE;\n       }\n \n@@ -2769,15 +2795,15 @@ output_func_prologue (f, frame_size)\n   return_used_this_function = 0;\n   lr_save_eliminated = 0;\n   \n-  fprintf (f, \"\\t%c args = %d, pretend = %d, frame = %d\\n\",\n-\t   ARM_COMMENT_CHAR, current_function_args_size,\n+  fprintf (f, \"\\t%s args = %d, pretend = %d, frame = %d\\n\",\n+\t   ASM_COMMENT_START, current_function_args_size,\n \t   current_function_pretend_args_size, frame_size);\n-  fprintf (f, \"\\t%c frame_needed = %d, current_function_anonymous_args = %d\\n\",\n-\t   ARM_COMMENT_CHAR, frame_pointer_needed,\n+  fprintf (f, \"\\t%s frame_needed = %d, current_function_anonymous_args = %d\\n\",\n+\t   ASM_COMMENT_START, frame_pointer_needed,\n \t   current_function_anonymous_args);\n \n   if (volatile_func)\n-    fprintf (f, \"\\t%c Volatile function.\\n\", ARM_COMMENT_CHAR);\n+    fprintf (f, \"\\t%s Volatile function.\\n\", ASM_COMMENT_START);\n \n   if (current_function_anonymous_args && current_function_pretend_args_size)\n     store_arg_regs = 1;\n@@ -2810,8 +2836,8 @@ output_func_prologue (f, frame_size)\n     }\n \n   if (lr_save_eliminated)\n-    fprintf (f,\"\\t%c I don't think this function clobbers lr\\n\",\n-\t     ARM_COMMENT_CHAR);\n+    fprintf (f,\"\\t%s I don't think this function clobbers lr\\n\",\n+\t     ASM_COMMENT_START);\n }\n \n \n@@ -2857,8 +2883,8 @@ output_func_epilogue (f, frame_size)\n       for (reg = 23; reg > 15; reg--)\n \tif (regs_ever_live[reg] && ! call_used_regs[reg])\n \t  {\n-\t    fprintf (f, \"\\tldfe\\t%s%s, [%sfp, #-%d]\\n\", ARM_REG_PREFIX,\n-\t\t     reg_names[reg], ARM_REG_PREFIX, floats_offset);\n+\t    fprintf (f, \"\\tldfe\\t%s%s, [%sfp, #-%d]\\n\", REGISTER_PREFIX,\n+\t\t     reg_names[reg], REGISTER_PREFIX, floats_offset);\n \t    floats_offset += 12;\n \t    code_size += 4;\n \t  }\n@@ -2881,8 +2907,8 @@ output_func_epilogue (f, frame_size)\n       for (reg = 16; reg < 24; reg++)\n \tif (regs_ever_live[reg] && ! call_used_regs[reg])\n \t  {\n-\t    fprintf (f, \"\\tldfe\\t%s%s, [%ssp], #12\\n\", ARM_REG_PREFIX,\n-\t\t     reg_names[reg], ARM_REG_PREFIX);\n+\t    fprintf (f, \"\\tldfe\\t%s%s, [%ssp], #12\\n\", REGISTER_PREFIX,\n+\t\t     reg_names[reg], REGISTER_PREFIX);\n \t    code_size += 4;\n \t  }\n       if (current_function_pretend_args_size == 0 && regs_ever_live[14])\n@@ -2908,7 +2934,7 @@ output_func_epilogue (f, frame_size)\n \t    }\n \t  fprintf (f,\n \t\t   TARGET_6 ? \"\\tmov\\t%spc, %slr\\n\" : \"\\tmovs\\t%spc, %slr\\n\",\n-\t\t   ARM_REG_PREFIX, ARM_REG_PREFIX, f);\n+\t\t   REGISTER_PREFIX, REGISTER_PREFIX, f);\n \t  code_size += 4;\n \t}\n     }\n@@ -3070,11 +3096,11 @@ arm_print_operand (stream, x, code)\n   switch (code)\n     {\n     case '@':\n-      fputc (ARM_COMMENT_CHAR, stream);\n+      fputs (ASM_COMMENT_START, stream);\n       return;\n \n     case '|':\n-      fputs (ARM_REG_PREFIX, stream);\n+      fputs (REGISTER_PREFIX, stream);\n       return;\n \n     case '?':\n@@ -3140,21 +3166,21 @@ arm_print_operand (stream, x, code)\n     case 'R':\n       if (REGNO (x) > 15)\n \tabort ();\n-      fputs (ARM_REG_PREFIX, stream);\n+      fputs (REGISTER_PREFIX, stream);\n       fputs (reg_names[REGNO (x) + 1], stream);\n       return;\n \n     case 'm':\n-      fputs (ARM_REG_PREFIX, stream);\n+      fputs (REGISTER_PREFIX, stream);\n       if (GET_CODE (XEXP (x, 0)) == REG)\n \tfputs (reg_names[REGNO (XEXP (x, 0))], stream);\n       else\n \tfputs (reg_names[REGNO (XEXP (XEXP (x, 0), 0))], stream);\n       return;\n \n     case 'M':\n-      fprintf (stream, \"{%s%s-%s%s}\", ARM_REG_PREFIX, reg_names[REGNO (x)],\n-\t       ARM_REG_PREFIX, reg_names[REGNO (x) - 1\n+      fprintf (stream, \"{%s%s-%s%s}\", REGISTER_PREFIX, reg_names[REGNO (x)],\n+\t       REGISTER_PREFIX, reg_names[REGNO (x) - 1\n \t\t\t\t\t + ((GET_MODE_SIZE (GET_MODE (x))\n \t\t\t\t\t     + GET_MODE_SIZE (SImode) - 1)\n \t\t\t\t\t    / GET_MODE_SIZE (SImode))]);\n@@ -3183,7 +3209,7 @@ arm_print_operand (stream, x, code)\n \n       if (GET_CODE (x) == REG)\n \t{\n-\t  fputs (ARM_REG_PREFIX, stream);\n+\t  fputs (REGISTER_PREFIX, stream);\n \t  fputs (reg_names[REGNO (x)], stream);\n \t}\n       else if (GET_CODE (x) == MEM)\n@@ -3243,7 +3269,7 @@ arm_asm_output_label (stream, name)\n   else\n     {\n       real_name = xmalloc (2 + strlen (name));\n-      strcpy (real_name, \"_\");\n+      strcpy (real_name, USER_LABEL_PREFIX);\n       strcat (real_name, name);\n     }\n   for (s = real_name; *s; s++)\n@@ -3346,7 +3372,7 @@ output_lcomm_directive (stream, name, size, rounded)\n      char *name;\n      int size, rounded;\n {\n-  fprintf (stream, \"\\n\\t.bss\\t%c .lcomm\\n\", ARM_COMMENT_CHAR);\n+  fprintf (stream, \"\\n\\t.bss\\t%s .lcomm\\n\", ASM_COMMENT_START);\n   assemble_name (stream, name);\n   fprintf (stream, \":\\t.space\\t%d\\n\", rounded);\n   if (in_text_section ())"}]}