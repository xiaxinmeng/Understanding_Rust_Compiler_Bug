{"sha": "ac141aead6fa4a409ce9dfd56d84d80148be3323", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMxNDFhZWFkNmZhNGE0MDljZTlkZmQ1NmQ4NGQ4MDE0OGJlMzMyMw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-17T22:06:00Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-17T22:06:00Z"}, "message": "basic-block.h, [...]: Remove unused prototypes.\n\n\t* basic-block.h, c-common.h, df.h, expr.h, output.h, rtl.h,\n\ttree-chrec.h, tree-flow.h, tree-scalar-evolution.h,\n\ttree-ssa-live.h, tree.h: Remove unused prototypes.\n\nFrom-SVN: r90821", "tree": {"sha": "71566dfe812990b2ae5d975b94eb0e114eae7a6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71566dfe812990b2ae5d975b94eb0e114eae7a6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac141aead6fa4a409ce9dfd56d84d80148be3323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac141aead6fa4a409ce9dfd56d84d80148be3323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac141aead6fa4a409ce9dfd56d84d80148be3323", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac141aead6fa4a409ce9dfd56d84d80148be3323/comments", "author": null, "committer": null, "parents": [{"sha": "a448068177aaa19ba6b3e0c07826a0eb1b50f7a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a448068177aaa19ba6b3e0c07826a0eb1b50f7a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a448068177aaa19ba6b3e0c07826a0eb1b50f7a3"}], "stats": {"total": 34, "additions": 4, "deletions": 30}, "files": [{"sha": "396ac8d7db2b19ff21b7ee370c8d7dea5c420080", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac141aead6fa4a409ce9dfd56d84d80148be3323/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac141aead6fa4a409ce9dfd56d84d80148be3323/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac141aead6fa4a409ce9dfd56d84d80148be3323", "patch": "@@ -5,6 +5,10 @@\n \n \t* jump.c (condjump_p): Remove unreachable code.\n \n+\t* basic-block.h, c-common.h, df.h, expr.h, output.h, rtl.h,\n+\ttree-chrec.h, tree-flow.h, tree-scalar-evolution.h,\n+\ttree-ssa-live.h, tree.h: Remove unused prototypes.\n+\n 2004-11-17  Jeff Law  <law@redhat.com>\n \n \t* tree-cfg.c (edge_to_cases): Renamed from edge_to_case_leader."}, {"sha": "a8db432a1e547b19e8dbcdcc447579075cb1a805", "filename": "gcc/basic-block.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac141aead6fa4a409ce9dfd56d84d80148be3323/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac141aead6fa4a409ce9dfd56d84d80148be3323/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=ac141aead6fa4a409ce9dfd56d84d80148be3323", "patch": "@@ -452,7 +452,6 @@ extern void compute_dominance_frontiers (bitmap *);\n extern void dump_edge_info (FILE *, edge, int);\n extern void brief_dump_cfg (FILE *);\n extern void clear_edges (void);\n-extern void mark_critical_edges (void);\n extern rtx first_insn_after_basic_block_note (basic_block);\n \n /* Structure to group all of the information to process IF-THEN and\n@@ -716,10 +715,6 @@ extern struct edge_list *pre_edge_rev_lcm (FILE *, int, sbitmap *,\n extern void compute_available (sbitmap *, sbitmap *, sbitmap *, sbitmap *);\n extern int optimize_mode_switching (FILE *);\n \n-/* In emit-rtl.c.  */\n-extern rtx emit_block_insn_after (rtx, rtx, basic_block);\n-extern rtx emit_block_insn_before (rtx, rtx, basic_block);\n-\n /* In predict.c */\n extern void estimate_probability (struct loops *);\n extern void expected_value_to_br_prob (void);"}, {"sha": "63c095c07811bda465942f06a8253b0ae7efafd6", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac141aead6fa4a409ce9dfd56d84d80148be3323/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac141aead6fa4a409ce9dfd56d84d80148be3323/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=ac141aead6fa4a409ce9dfd56d84d80148be3323", "patch": "@@ -838,8 +838,6 @@ extern rtx c_expand_expr (tree, rtx, enum machine_mode, int, rtx *);\n \n extern tree c_staticp (tree);\n \n-extern int c_common_unsafe_for_reeval (tree);\n-\n extern void init_c_lex (void);\n \n extern void c_cpp_builtins (cpp_reader *);"}, {"sha": "d684c1e83d9090461c7b4059c4de1a0bcc9b8d90", "filename": "gcc/df.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac141aead6fa4a409ce9dfd56d84d80148be3323/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac141aead6fa4a409ce9dfd56d84d80148be3323/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=ac141aead6fa4a409ce9dfd56d84d80148be3323", "patch": "@@ -267,8 +267,6 @@ extern int df_ref_reg_replace (struct df *, struct ref *, rtx, rtx);\n \n extern int df_ref_remove (struct df *, struct ref *);\n \n-extern int df_insn_reg_replace (struct df *, basic_block, rtx, rtx, rtx);\n-\n extern int df_insn_mem_replace (struct df *, basic_block, rtx, rtx, rtx);\n \n extern struct ref *df_bb_def_use_swap (struct df *, basic_block, rtx, rtx,"}, {"sha": "f6f32e8ea238e108db1766f0d250ddc9b4305dc6", "filename": "gcc/expr.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac141aead6fa4a409ce9dfd56d84d80148be3323/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac141aead6fa4a409ce9dfd56d84d80148be3323/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=ac141aead6fa4a409ce9dfd56d84d80148be3323", "patch": "@@ -545,9 +545,6 @@ extern rtx expr_size (tree);\n    if the size can vary or is larger than an integer.  */\n extern HOST_WIDE_INT int_expr_size (tree);\n \n-/* Return the address of the trampoline for entering nested fn FUNCTION.  */\n-extern rtx trampoline_address (tree);\n-\n /* Return an rtx that refers to the value returned by a function\n    in its original home.  This becomes invalid if any more code is emitted.  */\n extern rtx hard_function_value (tree, tree, int);"}, {"sha": "95090064079f4b35a59fb7d9994dea4da7d8f2ea", "filename": "gcc/output.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac141aead6fa4a409ce9dfd56d84d80148be3323/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac141aead6fa4a409ce9dfd56d84d80148be3323/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=ac141aead6fa4a409ce9dfd56d84d80148be3323", "patch": "@@ -149,7 +149,6 @@ extern const char *get_insn_template (int, rtx);\n extern int add_weak (tree, const char *, const char *);\n \n /* Functions in flow.c */\n-extern void allocate_for_life_analysis (void);\n extern int regno_clobbered_at_setjmp (int);\n \n /* Functions in varasm.c.  */\n@@ -282,7 +281,6 @@ extern void assemble_zeros (unsigned HOST_WIDE_INT);\n \n /* Assemble an alignment pseudo op for an ALIGN-bit boundary.  */\n extern void assemble_align (int);\n-extern void assemble_eh_align (int);\n \n /* Assemble a string constant with the specified C string as contents.  */\n extern void assemble_string (const char *, int);\n@@ -292,7 +290,6 @@ extern void assemble_external_libcall (rtx);\n \n /* Assemble a label named NAME.  */\n extern void assemble_label (const char *);\n-extern void assemble_eh_label (const char *);\n \n /* Output to FILE a reference to the assembler name of a C-level name NAME.\n    If NAME starts with a *, the rest of NAME is output verbatim."}, {"sha": "ed9fc875b0a8879b4a7f3a3c05642f3f4e02e2b6", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac141aead6fa4a409ce9dfd56d84d80148be3323/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac141aead6fa4a409ce9dfd56d84d80148be3323/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=ac141aead6fa4a409ce9dfd56d84d80148be3323", "patch": "@@ -1336,7 +1336,6 @@ extern int ceil_log2 (unsigned HOST_WIDE_INT);\n \n /* In builtins.c */\n extern rtx expand_builtin_expect_jump (tree, rtx, rtx);\n-extern void purge_builtin_constant_p (void);\n \n /* In explow.c */\n extern void set_stack_check_libfunc (rtx);\n@@ -1353,7 +1352,6 @@ extern rtx emit_copy_of_insn_after (rtx, rtx);\n extern void set_reg_attrs_from_mem (rtx, rtx);\n extern void set_mem_attrs_from_reg (rtx, rtx);\n extern void set_reg_attrs_for_parm (rtx, rtx);\n-extern void set_reg_pointer_align (rtx, unsigned int);\n extern int mem_expr_equal_p (tree, tree);\n \n /* In rtl.c */\n@@ -1901,7 +1899,6 @@ extern int comparison_dominates_p (enum rtx_code, enum rtx_code);\n extern int condjump_p (rtx);\n extern int any_condjump_p (rtx);\n extern int any_uncondjump_p (rtx);\n-extern int safe_to_remove_jump_p (rtx);\n extern rtx pc_set (rtx);\n extern rtx condjump_label (rtx);\n extern int simplejump_p (rtx);"}, {"sha": "a3e219086d2a8f9bf67b5a99c07c57116a9637b6", "filename": "gcc/tree-chrec.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac141aead6fa4a409ce9dfd56d84d80148be3323/gcc%2Ftree-chrec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac141aead6fa4a409ce9dfd56d84d80148be3323/gcc%2Ftree-chrec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.h?ref=ac141aead6fa4a409ce9dfd56d84d80148be3323", "patch": "@@ -74,7 +74,6 @@ extern tree chrec_type (tree);\n /* Operations.  */\n extern tree chrec_apply (unsigned, tree, tree);\n extern tree chrec_replace_initial_condition (tree, tree);\n-extern tree update_initial_condition_to_origin (tree);\n extern tree initial_condition (tree);\n extern tree initial_condition_in_loop_num (tree, unsigned);\n extern tree evolution_part_in_loop_num (tree, unsigned);"}, {"sha": "e392ddc61056ee0eda9179a611ef9bd8223b1728", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac141aead6fa4a409ce9dfd56d84d80148be3323/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac141aead6fa4a409ce9dfd56d84d80148be3323/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=ac141aead6fa4a409ce9dfd56d84d80148be3323", "patch": "@@ -474,9 +474,7 @@ extern tree *last_stmt_ptr (basic_block);\n extern tree last_and_only_stmt (basic_block);\n extern edge find_taken_edge (basic_block, tree);\n extern void cfg_remove_useless_stmts (void);\n-extern edge thread_edge (edge, basic_block);\n extern basic_block label_to_block (tree);\n-extern void tree_optimize_tail_calls (bool, enum tree_dump_index);\n extern void bsi_insert_on_edge (edge, tree);\n extern basic_block bsi_insert_on_edge_immediate (edge, tree);\n extern void bsi_commit_one_edge_insert (edge, basic_block *);\n@@ -566,7 +564,6 @@ typedef bool (*walk_use_def_chains_fn) (tree, tree, void *);\n \n /* In tree-ssa.c  */\n extern void init_tree_ssa (void);\n-extern void dump_reaching_defs (FILE *);\n extern void debug_reaching_defs (void);\n extern void dump_tree_ssa (FILE *);\n extern void debug_tree_ssa (void);"}, {"sha": "caefa3b1bdcd0a6bed65a0725464e6307ef60454", "filename": "gcc/tree-scalar-evolution.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac141aead6fa4a409ce9dfd56d84d80148be3323/gcc%2Ftree-scalar-evolution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac141aead6fa4a409ce9dfd56d84d80148be3323/gcc%2Ftree-scalar-evolution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.h?ref=ac141aead6fa4a409ce9dfd56d84d80148be3323", "patch": "@@ -30,7 +30,6 @@ extern void scev_reset (void);\n extern void scev_finalize (void);\n extern tree analyze_scalar_evolution (struct loop *, tree);\n extern tree instantiate_parameters (struct loop *, tree);\n-extern void eliminate_redundant_checks (void);\n extern void gather_stats_on_scev_database (void);\n extern void scev_analysis (void);\n extern bool simple_iv (struct loop *, tree, tree, tree *, tree *);"}, {"sha": "fc16fddec7255a660e8821e4d089a069f8483008", "filename": "gcc/tree-ssa-live.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac141aead6fa4a409ce9dfd56d84d80148be3323/gcc%2Ftree-ssa-live.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac141aead6fa4a409ce9dfd56d84d80148be3323/gcc%2Ftree-ssa-live.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.h?ref=ac141aead6fa4a409ce9dfd56d84d80148be3323", "patch": "@@ -64,7 +64,6 @@ extern void dump_var_map (FILE *, var_map);\n extern int var_union (var_map, tree, tree);\n extern void change_partition_var (var_map, tree, int);\n extern void compact_var_map (var_map, int);\n-extern tree make_ssa_temp (tree);\n #ifdef ENABLE_CHECKING\n extern void register_ssa_partition_check (tree ssa_var);\n #endif"}, {"sha": "9785a53be7870c56a0fc78b13a137f528c52f0ce", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac141aead6fa4a409ce9dfd56d84d80148be3323/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac141aead6fa4a409ce9dfd56d84d80148be3323/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ac141aead6fa4a409ce9dfd56d84d80148be3323", "patch": "@@ -3002,10 +3002,6 @@ extern tree merge_decl_attributes (tree, tree);\n extern tree merge_type_attributes (tree, tree);\n extern void default_register_cpp_builtins (struct cpp_reader *);\n \n-/* Return 1 if an attribute and its arguments are valid for a decl or type.  */\n-\n-extern int valid_machine_attribute (tree, tree, tree, tree);\n-\n /* Given a tree node and a string, return nonzero if the tree node is\n    a valid attribute name for the string.  */\n \n@@ -3462,7 +3458,6 @@ extern tree lower_bound_in_type (tree, tree);\n /* In stmt.c */\n \n extern void expand_expr_stmt (tree);\n-extern void expand_expr_stmt_value (tree, int, int);\n extern int warn_if_unused_value (tree, location_t);\n extern void expand_label (tree);\n extern void expand_goto (tree);\n@@ -3621,7 +3616,6 @@ extern void free_temp_slots (void);\n extern void pop_temp_slots (void);\n extern void push_temp_slots (void);\n extern void preserve_temp_slots (rtx);\n-extern void preserve_rtl_expr_temps (tree);\n extern int aggregate_value_p (tree, tree);\n extern void push_function_context (void);\n extern void pop_function_context (void);"}]}