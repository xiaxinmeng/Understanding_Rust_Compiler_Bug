{"sha": "97741c118180621e47edb6350571077eb0bc28ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc3NDFjMTE4MTgwNjIxZTQ3ZWRiNjM1MDU3MTA3N2ViMGJjMjhjYQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2018-05-09T12:14:39Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2018-05-09T12:14:39Z"}, "message": "regrename: Don't rename the dest of a REG_CFA_REGISTER (PR85645)\n\nWe should never change the destination of a REG_CFA_REGISTER, just\nlike for insns with a REG_CFA_RESTORE, because we need to have the\nsame control flow information on all branches that join.  It is very\ndoubtful that renaming the scratch registers used for prologue/epilogue\nwill help anything either.\n\n\n\tPR rtl-optimization/85645\n\t* regrename.c (build_def_use): Also kill the chains that include the\n\tdestination of a REG_CFA_REGISTER note.\n\nFrom-SVN: r260075", "tree": {"sha": "c5f025e476cf9eefd6c08e8d563901a3f6d13eb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5f025e476cf9eefd6c08e8d563901a3f6d13eb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97741c118180621e47edb6350571077eb0bc28ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97741c118180621e47edb6350571077eb0bc28ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97741c118180621e47edb6350571077eb0bc28ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97741c118180621e47edb6350571077eb0bc28ca/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c35533d7e97fda61c50be8b8260157956cf388e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c35533d7e97fda61c50be8b8260157956cf388e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c35533d7e97fda61c50be8b8260157956cf388e2"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "72e6768a71f770bc01c915b29f5b6d6e2212a668", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97741c118180621e47edb6350571077eb0bc28ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97741c118180621e47edb6350571077eb0bc28ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97741c118180621e47edb6350571077eb0bc28ca", "patch": "@@ -1,3 +1,9 @@\n+2018-05-09  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR rtl-optimization/85645\n+\t* regrename.c (build_def_use): Also kill the chains that include the\n+\tdestination of a REG_CFA_REGISTER note.\n+\n 2018-05-09  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR rtl-optimization/85645"}, {"sha": "84240930e3a5b14ec648fb977b9323580b585233", "filename": "gcc/regrename.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97741c118180621e47edb6350571077eb0bc28ca/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97741c118180621e47edb6350571077eb0bc28ca/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=97741c118180621e47edb6350571077eb0bc28ca", "patch": "@@ -1661,7 +1661,8 @@ build_def_use (basic_block bb)\n \t     (6) For any non-earlyclobber write we find in an operand, make\n \t         a new chain or mark the hard register as live.\n \t     (7) For any REG_UNUSED, close any chains we just opened.\n-\t     (8) For any REG_CFA_RESTORE, kill any chain containing it.\n+\t     (8) For any REG_CFA_RESTORE or REG_CFA_REGISTER, kill any chain\n+\t         containing its dest.\n \n \t     We cannot deal with situations where we track a reg in one mode\n \t     and see a reference in another mode; these will cause the chain\n@@ -1882,10 +1883,20 @@ build_def_use (basic_block bb)\n \t      }\n \n \t  /* Step 8: Kill the chains involving register restores.  Those\n-\t     should restore _that_ register.  */\n+\t     should restore _that_ register.  Similar for REG_CFA_REGISTER.  */\n \t  for (note = REG_NOTES (insn); note; note = XEXP (note, 1))\n-\t    if (REG_NOTE_KIND (note) == REG_CFA_RESTORE)\n-\t      scan_rtx (insn, &XEXP (note, 0), NO_REGS, mark_all_read, OP_IN);\n+\t    if (REG_NOTE_KIND (note) == REG_CFA_RESTORE\n+\t\t|| REG_NOTE_KIND (note) == REG_CFA_REGISTER)\n+\t      {\n+\t\trtx *x = &XEXP (note, 0);\n+\t\tif (!*x)\n+\t\t  x = &PATTERN (insn);\n+\t\tif (GET_CODE (*x) == PARALLEL)\n+\t\t  x = &XVECEXP (*x, 0, 0);\n+\t\tif (GET_CODE (*x) == SET)\n+\t\t  x = &SET_DEST (*x);\n+\t\tscan_rtx (insn, x, NO_REGS, mark_all_read, OP_IN);\n+\t      }\n \t}\n       else if (DEBUG_BIND_INSN_P (insn)\n \t       && !VAR_LOC_UNKNOWN_P (INSN_VAR_LOCATION_LOC (insn)))"}]}