{"sha": "113a9fb6c6c0b2ce325440352bc3b9039e6e07ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEzYTlmYjZjNmMwYjJjZTMyNTQ0MDM1MmJjM2I5MDM5ZTZlMDdlZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:51:03Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:51:03Z"}, "message": "[multiple changes]\n\n2014-07-29  Doug Rupp  <rupp@adacore.com>\n\n\t* init.c: Complete previous change.\n\n2014-07-29  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_If_Expression): Deal with unconstrained\n\tarray case.\n\n2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb (Access_Attribute): If the prefix is a subprogram\n\tand the completion will appear in the same declarative part,\n\tcreate elaboration flag.\n\t* exp_util.adb (Set_Elaboration_Flag): If the subprogram body\n\tis a completion of a declaration in the same declarative part,\n\tand the subprogram has had its address taken, add elaboration\n\tcheck inside the subprogram body, to detect elaboration errors\n\tthat may occur through indirect calls.\n\nFrom-SVN: r213189", "tree": {"sha": "dbd566673508025a7ec6bcbd251004ca7ac41bfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbd566673508025a7ec6bcbd251004ca7ac41bfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/113a9fb6c6c0b2ce325440352bc3b9039e6e07ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113a9fb6c6c0b2ce325440352bc3b9039e6e07ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/113a9fb6c6c0b2ce325440352bc3b9039e6e07ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113a9fb6c6c0b2ce325440352bc3b9039e6e07ed/comments", "author": null, "committer": null, "parents": [{"sha": "19926161430467836188538c2ae0e967b3803659", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19926161430467836188538c2ae0e967b3803659", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19926161430467836188538c2ae0e967b3803659"}], "stats": {"total": 151, "additions": 143, "deletions": 8}, "files": [{"sha": "0b5f0c249b991e04bb03bed666cdaaf6f22c9957", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113a9fb6c6c0b2ce325440352bc3b9039e6e07ed/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113a9fb6c6c0b2ce325440352bc3b9039e6e07ed/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=113a9fb6c6c0b2ce325440352bc3b9039e6e07ed", "patch": "@@ -1,3 +1,23 @@\n+2014-07-29  Doug Rupp  <rupp@adacore.com>\n+\n+\t* init.c: Complete previous change.\n+\n+2014-07-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_If_Expression): Deal with unconstrained\n+\tarray case.\n+\n+2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Access_Attribute): If the prefix is a subprogram\n+\tand the completion will appear in the same declarative part,\n+\tcreate elaboration flag.\n+\t* exp_util.adb (Set_Elaboration_Flag): If the subprogram body\n+\tis a completion of a declaration in the same declarative part,\n+\tand the subprogram has had its address taken, add elaboration\n+\tcheck inside the subprogram body, to detect elaboration errors\n+\tthat may occur through indirect calls.\n+\n 2014-07-29  Doug Rupp  <rupp@adacore.com>\n \n \t* sigtramp-armvxw.c: Enhance to handle RTP trampolining."}, {"sha": "1712a7d9755f874287662242b48647500e37de30", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113a9fb6c6c0b2ce325440352bc3b9039e6e07ed/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113a9fb6c6c0b2ce325440352bc3b9039e6e07ed/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=113a9fb6c6c0b2ce325440352bc3b9039e6e07ed", "patch": "@@ -5278,11 +5278,9 @@ package body Exp_Ch4 is\n          return;\n       end if;\n \n-      --  If the type is limited or unconstrained, we expand as follows to\n-      --  avoid any possibility of improper copies.\n-\n-      --  Note: it may be possible to avoid this special processing if the\n-      --  back end uses its own mechanisms for handling by-reference types ???\n+      --  If the type is limited, and the back end does not handle limited\n+      --  types, then we expand as follows to avoid the possibility of\n+      --  improper copying.\n \n       --      type Ptr is access all Typ;\n       --      Cnn : Ptr;\n@@ -5370,6 +5368,38 @@ package body Exp_Ch4 is\n            Make_Explicit_Dereference (Loc,\n              Prefix => New_Occurrence_Of (Cnn, Loc));\n \n+      --  If the result is an unconstrained array and the if expression is in a\n+      --  context other than the initializing expression of the declaration of\n+      --  an object, then we pull out the if expression as follows:\n+\n+      --     Cnn : constant typ := if-expression\n+\n+      --  and then replace the if expression with an occurrence of Cnn. This\n+      --  avoids the need in the back end to create on-the-fly variable length\n+      --  temporaries (which it cannot do!)\n+\n+      --  Note that the test for being in an object declaration avoids doing an\n+      --  unnecessary expansion, and also avoids infinite recursion.\n+\n+      elsif Is_Array_Type (Typ) and then not Is_Constrained (Typ)\n+        and then (Nkind (Parent (N)) /= N_Object_Declaration\n+                   or else Expression (Parent (N)) /= N)\n+      then\n+         declare\n+            Cnn : constant Node_Id := Make_Temporary (Loc, 'C', N);\n+         begin\n+            Insert_Action (N,\n+              Make_Object_Declaration (Loc,\n+                Defining_Identifier => Cnn,\n+                Constant_Present    => True,\n+                Object_Definition   => New_Occurrence_Of (Typ, Loc),\n+                Expression          => Relocate_Node (N),\n+                Has_Init_Expression => True));\n+\n+            Rewrite (N, New_Occurrence_Of (Cnn, Loc));\n+            return;\n+         end;\n+\n       --  For other types, we only need to expand if there are other actions\n       --  associated with either branch.\n "}, {"sha": "4a68d1d226f4cb7e01cadc120ec6f491447508e4", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113a9fb6c6c0b2ce325440352bc3b9039e6e07ed/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113a9fb6c6c0b2ce325440352bc3b9039e6e07ed/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=113a9fb6c6c0b2ce325440352bc3b9039e6e07ed", "patch": "@@ -7920,6 +7920,50 @@ package body Exp_Util is\n             --  pick up bogus indications of the wrong constant value.\n \n             Set_Current_Value (Ent, Empty);\n+\n+            --  If the subprogram is in the current declarative part and\n+            --  'access has been applied to it, generate an elaboration\n+            --  check at the beginning of the declarations of the body.\n+\n+            if Nkind (N) = N_Subprogram_Body\n+              and then Address_Taken (Spec_Id)\n+              and then\n+                Ekind_In (Scope (Spec_Id), E_Block, E_Procedure, E_Function)\n+            then\n+               declare\n+                  Loc   : constant Source_Ptr := Sloc (N);\n+                  Decls : constant List_Id    := Declarations (N);\n+                  Chk   : Node_Id;\n+\n+               begin\n+                  --  No need to generate this check if first entry in the\n+                  --  declaration list is a raise of Program_Error now.\n+\n+                  if Present (Decls)\n+                    and then Nkind (First (Decls)) = N_Raise_Program_Error\n+                  then\n+                     return;\n+                  end if;\n+\n+                  --  Otherwise generate the check\n+\n+                  Chk :=\n+                    Make_Raise_Program_Error (Loc,\n+                      Condition =>\n+                        Make_Op_Eq (Loc,\n+                          Left_Opnd  => New_Occurrence_Of (Ent, Loc),\n+                          Right_Opnd => Make_Integer_Literal (Loc, Uint_0)),\n+                      Reason    => PE_Access_Before_Elaboration);\n+\n+                  if No (Decls) then\n+                     Set_Declarations (N, New_List (Chk));\n+                  else\n+                     Prepend (Chk, Decls);\n+                  end if;\n+\n+                  Analyze (Chk);\n+               end;\n+            end if;\n          end if;\n       end if;\n    end Set_Elaboration_Flag;"}, {"sha": "5f764f6937dad8172dceea9e3535d7531fa83b6d", "filename": "gcc/ada/init.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113a9fb6c6c0b2ce325440352bc3b9039e6e07ed/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113a9fb6c6c0b2ce325440352bc3b9039e6e07ed/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=113a9fb6c6c0b2ce325440352bc3b9039e6e07ed", "patch": "@@ -1703,9 +1703,7 @@ __gnat_install_handler ()\n #include <signal.h>\n #include <taskLib.h>\n \n-#ifdef __RTP__\n-#include <base/b_ucontext_t.h>\n-#else\n+#ifndef __RTP__\n #include <intLib.h>\n #include <iv.h>\n #endif"}, {"sha": "67955e9903b9de047938f8fef930aee3f2385f76", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113a9fb6c6c0b2ce325440352bc3b9039e6e07ed/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113a9fb6c6c0b2ce325440352bc3b9039e6e07ed/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=113a9fb6c6c0b2ce325440352bc3b9039e6e07ed", "patch": "@@ -10568,6 +10568,49 @@ package body Sem_Attr is\n             if Is_Entity_Name (P) then\n                Set_Address_Taken (Entity (P));\n             end if;\n+\n+            if Is_Entity_Name (P) then\n+               declare\n+                  E : constant Entity_Id := Entity (P);\n+                  Flag : Entity_Id;\n+\n+               --  If the access has been taken and the body of the subprogram\n+               --  has not been see yet, indirect calls must be protected with\n+               --  elaboration checks. We have the proper elaboration machinery\n+               --  for subprograms declared in packages, but within a block or\n+               --  a subprogram the body will appear in the same declarative\n+               --  part, and we must insert a check in the eventual body itself\n+               --  using the elaboration flag that we generate now. The check\n+               --  is then inserted when the body is expanded.\n+\n+               begin\n+                  if Is_Subprogram (E)\n+                    and then Comes_From_Source (E)\n+                    and then Comes_From_Source (N)\n+                    and then In_Open_Scopes (Scope (E))\n+                    and then\n+                      Ekind_In (Scope (E), E_Block, E_Procedure, E_Function)\n+                    and then not Has_Completion (E)\n+                    and then No (Elaboration_Entity (E))\n+                    and then Expander_Active\n+                  then\n+                     --  Create elaboration variable for it\n+\n+                     Flag := Make_Temporary (Loc, 'E');\n+\n+                     Set_Elaboration_Entity (E, Flag);\n+\n+                     Insert_Action (N,\n+                       Make_Object_Declaration (Loc,\n+                         Defining_Identifier => Flag,\n+                         Object_Definition   =>\n+                           New_Occurrence_Of (Standard_Short_Integer, Loc),\n+                         Expression          =>\n+                           Make_Integer_Literal (Loc, Uint_0)));\n+                     Set_Is_Frozen (Flag);\n+                  end if;\n+               end;\n+            end if;\n          end Access_Attribute;\n \n          -------------"}]}