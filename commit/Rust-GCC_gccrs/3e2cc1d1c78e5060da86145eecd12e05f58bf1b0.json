{"sha": "3e2cc1d1c78e5060da86145eecd12e05f58bf1b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UyY2MxZDFjNzhlNTA2MGRhODYxNDVlZWNkMTJlMDVmNThiZjFiMA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-30T14:46:43Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-01-30T14:46:43Z"}, "message": "sparc-protos.h: Remove the prototype for sparc_builtin_saveregs.\n\n\t* config/sparc/sparc-protos.h: Remove the prototype for\n\tsparc_builtin_saveregs.\n\t* config/sparc/sparc.c (TARGET_PROMOTE_FUNCTION_ARGS): New.\n\t(TARGET_PROMOTE_FUNCTION_RETURN): Likewise.\n\t(TARGET_PROMOTE_PROTOTYPES): Likewise.\n\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n\t(TARGET_RETURN_IN_MEMORY): Likewise.\n\t(TARGET_EXPAND_BUILTIN_SAVEREGS): Likewise.\n\t(TARGET_STRICT_ARGUMENT_NAMING): Likewise.\n\t(sparc_builtin_saveregs): Make it static.\n\t(sparc_promote_prototypes): New.\n\t(sparc_struct_value_rtx): Likewise.\n\t(sparc_return_in_memory): Likewise.\n\t* config/sparc/sparc.h: (PROMOTE_FUNCTION_ARGS): Remove.\n\t(PROMOTE_FUNCTION_RETURN): Likewise.\n\t(RETURN_IN_MEMORY): Likewise.\n\t(STRUCT_VALUE): Likewise.\n\t(STRUCT_VALUE_INCOMING): Likewise.\n\t(EXPAND_BUILTIN_SAVEREGS): Likewise.\n\t(STRICT_ARGUMENT_NAMING): Likewise.\n\t(PROMOTE_PROTOTYPES): Likewise.\n\n\t* config/sparc/sparc.h (PROMOTE_MODE): Use word_mode.\n\nCo-Authored-By: Eric Botcazou <ebotcazou@libertysurf.fr>\n\nFrom-SVN: r76961", "tree": {"sha": "e14f64cb2595257ca261bd661e3159fa7251a656", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e14f64cb2595257ca261bd661e3159fa7251a656"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e2cc1d1c78e5060da86145eecd12e05f58bf1b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e2cc1d1c78e5060da86145eecd12e05f58bf1b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e2cc1d1c78e5060da86145eecd12e05f58bf1b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e2cc1d1c78e5060da86145eecd12e05f58bf1b0/comments", "author": null, "committer": null, "parents": [{"sha": "5e9295fa05762dd503c5310b0b28e3f352f876ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e9295fa05762dd503c5310b0b28e3f352f876ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e9295fa05762dd503c5310b0b28e3f352f876ae"}], "stats": {"total": 188, "additions": 121, "deletions": 67}, "files": [{"sha": "115979032b0b7df766e5fa9e80d849ae152bd5f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2cc1d1c78e5060da86145eecd12e05f58bf1b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2cc1d1c78e5060da86145eecd12e05f58bf1b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e2cc1d1c78e5060da86145eecd12e05f58bf1b0", "patch": "@@ -1,3 +1,30 @@\n+2004-01-30  Kazu Hirata  <kazu@cs.umass.edu>\n+            Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* config/sparc/sparc-protos.h: Remove the prototype for\n+\tsparc_builtin_saveregs.\n+\t* config/sparc/sparc.c (TARGET_PROMOTE_FUNCTION_ARGS): New.\n+\t(TARGET_PROMOTE_FUNCTION_RETURN): Likewise.\n+\t(TARGET_PROMOTE_PROTOTYPES): Likewise.\n+\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n+\t(TARGET_RETURN_IN_MEMORY): Likewise.\n+\t(TARGET_EXPAND_BUILTIN_SAVEREGS): Likewise.\n+\t(TARGET_STRICT_ARGUMENT_NAMING): Likewise.\n+\t(sparc_builtin_saveregs): Make it static.\n+\t(sparc_promote_prototypes): New.\n+\t(sparc_struct_value_rtx): Likewise.\n+\t(sparc_return_in_memory): Likewise.\n+\t* config/sparc/sparc.h: (PROMOTE_FUNCTION_ARGS): Remove.\n+\t(PROMOTE_FUNCTION_RETURN): Likewise.\n+\t(RETURN_IN_MEMORY): Likewise.\n+\t(STRUCT_VALUE): Likewise.\n+\t(STRUCT_VALUE_INCOMING): Likewise.\n+\t(EXPAND_BUILTIN_SAVEREGS): Likewise.\n+\t(STRICT_ARGUMENT_NAMING): Likewise.\n+\t(PROMOTE_PROTOTYPES): Likewise.\n+\n+\t* config/sparc/sparc.h (PROMOTE_MODE): Use word_mode.\n+\n 2004-01-30  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR c/12818"}, {"sha": "35f5d51dd89fcef030d129e25a729b7dcde64447", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2cc1d1c78e5060da86145eecd12e05f58bf1b0/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2cc1d1c78e5060da86145eecd12e05f58bf1b0/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=3e2cc1d1c78e5060da86145eecd12e05f58bf1b0", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes of target machine for SPARC.\n-   Copyright (C) 1999, 2000, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com).\n    64-bit SPARC-V9 support by Michael Tiemann, Jim Wilson, and Doug Evans,\n    at Cygnus Support.\n@@ -36,7 +36,6 @@ extern int function_arg_partial_nregs (const CUMULATIVE_ARGS *,\n \t\t\t\t       enum machine_mode, tree, int);\n extern int function_arg_pass_by_reference (const CUMULATIVE_ARGS *,\n \t\t\t\t\t   enum machine_mode, tree, int);\n-extern struct rtx_def *sparc_builtin_saveregs (void);\n #ifdef RTX_CODE\n extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree);\n extern void sparc_va_start (tree, rtx);"}, {"sha": "8beea5248ebcaa69d0baeeb86439399da73e1230", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 90, "deletions": 1, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2cc1d1c78e5060da86145eecd12e05f58bf1b0/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2cc1d1c78e5060da86145eecd12e05f58bf1b0/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=3e2cc1d1c78e5060da86145eecd12e05f58bf1b0", "patch": "@@ -148,6 +148,7 @@ static void sparc_output_addr_vec (rtx);\n static void sparc_output_addr_diff_vec (rtx);\n static void sparc_output_deferred_case_vectors (void);\n static int check_return_regs (rtx);\n+static rtx sparc_builtin_saveregs (void);\n static int epilogue_renumber (rtx *, int);\n static bool sparc_assemble_integer (rtx, unsigned int, int);\n static int set_extends (rtx);\n@@ -194,6 +195,10 @@ static rtx sparc_tls_got (void);\n static const char *get_some_local_dynamic_name (void);\n static int get_some_local_dynamic_name_1 (rtx *, void *);\n static bool sparc_rtx_costs (rtx, int, int, int *);\n+static bool sparc_promote_prototypes (tree);\n+static rtx sparc_struct_value_rtx (tree, int);\n+static bool sparc_return_in_memory (tree, tree);\n+static bool sparc_strict_argument_naming (CUMULATIVE_ARGS *);\n \f\n /* Option handling.  */\n \n@@ -277,6 +282,36 @@ enum processor_type sparc_cpu;\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST hook_int_rtx_0\n \n+/* Return TRUE if the promotion described by PROMOTE_MODE should also be done\n+   for outgoing function arguments.\n+   This is only needed for TARGET_ARCH64, but since PROMOTE_MODE is a no-op\n+   for TARGET_ARCH32 this is ok.  Otherwise we'd need to add a runtime test\n+   for this value.  */\n+#undef TARGET_PROMOTE_FUNCTION_ARGS\n+#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n+\n+/* Return TRUE if the promotion described by PROMOTE_MODE should also be done\n+   for the return value of functions.  If this macro is defined, FUNCTION_VALUE\n+   must perform the same promotions done by PROMOTE_MODE.\n+   This is only needed for TARGET_ARCH64, but since PROMOTE_MODE is a no-op\n+   for TARGET_ARCH32 this is ok.  Otherwise we'd need to add a runtime test\n+   for this value.  */\n+#undef TARGET_PROMOTE_FUNCTION_RETURN\n+#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_true\n+\n+#undef TARGET_PROMOTE_PROTOTYPES\n+#define TARGET_PROMOTE_PROTOTYPES sparc_promote_prototypes\n+\n+#undef TARGET_STRUCT_VALUE_RTX\n+#define TARGET_STRUCT_VALUE_RTX sparc_struct_value_rtx\n+#undef TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY sparc_return_in_memory\n+\n+#undef TARGET_EXPAND_BUILTIN_SAVEREGS\n+#define TARGET_EXPAND_BUILTIN_SAVEREGS sparc_builtin_saveregs\n+#undef TARGET_STRICT_ARGUMENT_NAMING\n+#define TARGET_STRICT_ARGUMENT_NAMING sparc_strict_argument_naming\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Validate and override various options, and do some machine dependent\n@@ -4817,6 +4852,60 @@ init_cumulative_args (struct sparc_args *cum, tree fntype,\n   cum->libcall_p = fntype == 0;\n }\n \n+/* Handle the PROMOTE_PROTOTYPES macro.\n+   When a prototype says `char' or `short', really pass an `int'.  */\n+\n+static bool\n+sparc_promote_prototypes (tree fntype ATTRIBUTE_UNUSED)\n+{\n+  return TARGET_ARCH32 ? true : false;\n+}\n+\n+/* Handle the STRICT_ARGUMENT_NAMING macro.  */\n+\n+static bool\n+sparc_strict_argument_naming (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED)\n+{\n+  /* For the V9 we want NAMED to mean what it says it means.  */\n+  return TARGET_V9 ? true : false;\n+}\n+\n+/* Handle the RETURN_IN_MEMORY macro.\n+   Specify whether to return the return value in memory.  */\n+\n+static bool\n+sparc_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+{\n+  /* SPARC ABI says that quad-precision floats and all structures are\n+     returned in memory.\n+     For V9: unions <= 32 bytes in size are returned in int regs,\n+     structures up to 32 bytes are returned in int and fp regs.  */\n+  return (TARGET_ARCH32\n+\t  ? (TYPE_MODE (type) == BLKmode\n+\t     || TYPE_MODE (type) == TFmode)\n+\t  : (TYPE_MODE (type) == BLKmode\n+\t     && (unsigned HOST_WIDE_INT) int_size_in_bytes (type) > 32));\n+}\n+\n+/* Handle the STRUCT_VALUE macro.\n+   Return where to find the structure return value address.  */\n+\n+static rtx\n+sparc_struct_value_rtx (tree fndecl ATTRIBUTE_UNUSED, int incoming)\n+{\n+  if (TARGET_ARCH64)\n+    return 0;\n+  else\n+    {\n+      if (incoming)\n+\treturn gen_rtx_MEM (Pmode, plus_constant (frame_pointer_rtx,\n+\t\t\t\t\t\t  STRUCT_VALUE_OFFSET));\n+      else\n+\treturn gen_rtx_MEM (Pmode, plus_constant (stack_pointer_rtx,\n+\t\t\t\t\t\t  STRUCT_VALUE_OFFSET));\n+    }\n+}\n+\n /* Scan the record type TYPE and return the following predicates:\n     - INTREGS_P: the record contains at least one field or sub-field\n       that is eligible for promotion in integer registers.\n@@ -5730,7 +5819,7 @@ function_value (tree type, enum machine_mode mode, int incoming_p)\n    to determine if stdarg or varargs is used and return the address of\n    the first unnamed parameter.  */\n \n-rtx\n+static rtx\n sparc_builtin_saveregs (void)\n {\n   int first_reg = current_function_args_info.words;"}, {"sha": "194fcb61af8f64cfe88663b8b7dd039f8e352dca", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 3, "deletions": 64, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2cc1d1c78e5060da86145eecd12e05f58bf1b0/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2cc1d1c78e5060da86145eecd12e05f58bf1b0/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=3e2cc1d1c78e5060da86145eecd12e05f58bf1b0", "patch": "@@ -1,8 +1,8 @@\n /* Definitions of target machine for GNU compiler, for Sun SPARC.\n    Copyright (C) 1987, 1988, 1989, 1992, 1994, 1995, 1996, 1997, 1998, 1999\n-   2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com).\n-   64 bit SPARC V9 support by Michael Tiemann, Jim Wilson, and Doug Evans,\n+   64-bit SPARC-V9 support by Michael Tiemann, Jim Wilson, and Doug Evans,\n    at Cygnus Support.\n \n This file is part of GCC.\n@@ -746,23 +746,7 @@ extern struct sparc_cpu_select sparc_select[];\n if (TARGET_ARCH64\t\t\t\t\\\n     && GET_MODE_CLASS (MODE) == MODE_INT\t\\\n     && GET_MODE_SIZE (MODE) < UNITS_PER_WORD)\t\\\n-  (MODE) = DImode;\n-\n-/* Define this macro if the promotion described by PROMOTE_MODE\n-   should also be done for outgoing function arguments.  */\n-/* This is only needed for TARGET_ARCH64, but since PROMOTE_MODE is a no-op\n-   for TARGET_ARCH32 this is ok.  Otherwise we'd need to add a runtime test\n-   for this value.  */\n-#define PROMOTE_FUNCTION_ARGS\n-\n-/* Define this macro if the promotion described by PROMOTE_MODE\n-   should also be done for the return value of functions.\n-   If this macro is defined, FUNCTION_VALUE must perform the same\n-   promotions done by PROMOTE_MODE.  */\n-/* This is only needed for TARGET_ARCH64, but since PROMOTE_MODE is a no-op\n-   for TARGET_ARCH32 this is ok.  Otherwise we'd need to add a runtime test\n-   for this value.  */\n-#define PROMOTE_FUNCTION_RETURN\n+  (MODE) = word_mode;\n \n /* Define this macro if the promotion described by PROMOTE_MODE\n    should _only_ be performed for outgoing function arguments or\n@@ -1149,37 +1133,12 @@ extern int sparc_mode_class[];\n \n #define DEFAULT_PCC_STRUCT_RETURN -1\n \n-/* SPARC ABI says that quad-precision floats and all structures are returned\n-   in memory.\n-   For v9: unions <= 32 bytes in size are returned in int regs,\n-   structures up to 32 bytes are returned in int and fp regs.  */\n-\n-#define RETURN_IN_MEMORY(TYPE)\t\t\t\t\\\n-(TARGET_ARCH32\t\t\t\t\t\t\\\n- ? (TYPE_MODE (TYPE) == BLKmode\t\t\t\t\\\n-    || TYPE_MODE (TYPE) == TFmode)\t\t\t\\\n- : (TYPE_MODE (TYPE) == BLKmode\t\t\t\t\\\n-    && (unsigned HOST_WIDE_INT) int_size_in_bytes (TYPE) > 32))\n-\n /* Functions which return large structures get the address\n    to place the wanted value at offset 64 from the frame.\n    Must reserve 64 bytes for the in and local registers.\n    v9: Functions which return large structures get the address to place the\n    wanted value from an invisible first argument.  */\n-/* Used only in other #defines in this file.  */\n #define STRUCT_VALUE_OFFSET 64\n-\n-#define STRUCT_VALUE \\\n-  (TARGET_ARCH64\t\t\t\t\t\\\n-   ? 0\t\t\t\t\t\t\t\\\n-   : gen_rtx_MEM (Pmode, plus_constant (stack_pointer_rtx, \\\n-\t\t\t\t\tSTRUCT_VALUE_OFFSET)))\n-\n-#define STRUCT_VALUE_INCOMING \\\n-  (TARGET_ARCH64\t\t\t\t\t\t\\\n-   ? 0\t\t\t\t\t\t\t\t\\\n-   : gen_rtx_MEM (Pmode, plus_constant (frame_pointer_rtx,\t\\\n-\t\t\t\t\tSTRUCT_VALUE_OFFSET)))\n \f\n /* Define the classes of registers for register constraints in the\n    machine description.  Also define ranges of constants.\n@@ -1954,10 +1913,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n     else\t\t\t\t\t\t\t\\\n       sparc_initialize_trampoline (TRAMP, FNADDR, CXT)\n \f\n-/* Generate necessary RTL for __builtin_saveregs().  */\n-\n-#define EXPAND_BUILTIN_SAVEREGS() sparc_builtin_saveregs ()\n-\n /* Implement `va_start' for varargs and stdarg.  */\n #define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n   sparc_va_start (valist, nextarg)\n@@ -1966,19 +1921,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n   sparc_va_arg (valist, type)\n \n-/* Define this macro if the location where a function argument is passed\n-   depends on whether or not it is a named argument.\n-\n-   This macro controls how the NAMED argument to FUNCTION_ARG\n-   is set for varargs and stdarg functions.  With this macro defined,\n-   the NAMED argument is always true for named arguments, and false for\n-   unnamed arguments.  If this is not defined, but SETUP_INCOMING_VARARGS\n-   is defined, then all arguments are treated as named.  Otherwise, all named\n-   arguments except the last are treated as named.\n-   For the v9 we want NAMED to mean what it says it means.  */\n-\n-#define STRICT_ARGUMENT_NAMING TARGET_V9\n-\n /* Generate RTL to flush the register windows so as to make arbitrary frames\n    available.  */\n #define SETUP_FRAME_ADDRESSES()\t\t\\\n@@ -2386,9 +2328,6 @@ do {                                                                    \\\n    and maybe make use of that.  */\n #define SLOW_BYTE_ACCESS 1\n \n-/* When a prototype says `char' or `short', really pass an `int'.  */\n-#define PROMOTE_PROTOTYPES (TARGET_ARCH32)\n-\n /* Define this to be nonzero if shift instructions ignore all but the low-order\n    few bits.  */\n #define SHIFT_COUNT_TRUNCATED 1"}]}