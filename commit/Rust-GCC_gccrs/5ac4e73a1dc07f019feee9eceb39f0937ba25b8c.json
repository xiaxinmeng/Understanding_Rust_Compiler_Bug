{"sha": "5ac4e73a1dc07f019feee9eceb39f0937ba25b8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFjNGU3M2ExZGMwN2YwMTlmZWVlOWVjZWIzOWYwOTM3YmEyNWI4Yw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-05-15T10:00:19Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-05-15T10:00:19Z"}, "message": "re PR libstdc++/53339 (unordered_map::iterator requires Value to be complete type)\n\n2012-05-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/53339\n\t* include/bits/hashtable_policy.h (__detail::_Identity,\n\t__detail::_Select1st): Add.\n\t(_Map_base, _Hashtable_base): Use the latter, adjust parameters.\n\t* include/bits/hashtable.h (_Hashtable::__key_extract): Adjust.\n\t* include/bits/unordered_set.h (__uset_hashtable, __umset_hashtable):\n\tLikewise.\n\t* include/bits/unordered_map.h (__umap_hashtable, __ummap_hashtable):\n\tLikewise.\n\t* include/bits/stl_function.h (_Identity, _Select1st, _Select2nd)\n\tUnconditionally derive from unary_function.\n\t* include/ext/functional (identity, select1st, select2nd): Remove\n\t#ifdef __GXX_EXPERIMENTAL_CXX0X__ bits.\n\t* testsuite/23_containers/unordered_map/requirements/53339.cc: New.\n\t* testsuite/23_containers/unordered_multimap/requirements/\n\t53339.cc: Likewise.\n\nFrom-SVN: r187515", "tree": {"sha": "9983ba44c7753e2b84264a4b942386269047c4cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9983ba44c7753e2b84264a4b942386269047c4cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ac4e73a1dc07f019feee9eceb39f0937ba25b8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ac4e73a1dc07f019feee9eceb39f0937ba25b8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ac4e73a1dc07f019feee9eceb39f0937ba25b8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ac4e73a1dc07f019feee9eceb39f0937ba25b8c/comments", "author": null, "committer": null, "parents": [{"sha": "23adb371935682f1883c9afbff4086d73c8deb97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23adb371935682f1883c9afbff4086d73c8deb97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23adb371935682f1883c9afbff4086d73c8deb97"}], "stats": {"total": 190, "additions": 134, "deletions": 56}, "files": [{"sha": "874eab87fbc573275d5628fd359e11dc9c1faf78", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac4e73a1dc07f019feee9eceb39f0937ba25b8c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac4e73a1dc07f019feee9eceb39f0937ba25b8c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5ac4e73a1dc07f019feee9eceb39f0937ba25b8c", "patch": "@@ -1,3 +1,22 @@\n+2012-05-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/53339\n+\t* include/bits/hashtable_policy.h (__detail::_Identity,\n+\t__detail::_Select1st): Add.\n+\t(_Map_base, _Hashtable_base): Use the latter, adjust parameters.\n+\t* include/bits/hashtable.h (_Hashtable::__key_extract): Adjust.\n+\t* include/bits/unordered_set.h (__uset_hashtable, __umset_hashtable):\n+\tLikewise.\n+\t* include/bits/unordered_map.h (__umap_hashtable, __ummap_hashtable):\n+\tLikewise.\n+\t* include/bits/stl_function.h (_Identity, _Select1st, _Select2nd)\n+\tUnconditionally derive from unary_function.\n+\t* include/ext/functional (identity, select1st, select2nd): Remove\n+\t#ifdef __GXX_EXPERIMENTAL_CXX0X__ bits.\n+\t* testsuite/23_containers/unordered_map/requirements/53339.cc: New.\n+\t* testsuite/23_containers/unordered_multimap/requirements/\n+\t53339.cc: Likewise.\n+\n 2012-05-11  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \tPR libstdc++/53263"}, {"sha": "f5bc3583f22a3356dfd568249e2c94aa42b8dbdb", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac4e73a1dc07f019feee9eceb39f0937ba25b8c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac4e73a1dc07f019feee9eceb39f0937ba25b8c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=5ac4e73a1dc07f019feee9eceb39f0937ba25b8c", "patch": "@@ -203,8 +203,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       using __key_extract = typename std::conditional<\n \t\t\t\t\t     __constant_iterators::value,\n-\t\t\t\t       \t     std::_Identity<value_type>,\n-\t\t\t\t\t     std::_Select1st<value_type>>::type;\n+\t\t\t\t       \t     __detail::_Identity,\n+\t\t\t\t\t     __detail::_Select1st>::type;\n \n       using __hashtable_base = __detail::\n \t\t\t       _Hashtable_base<_Key, _Value, _ExtractKey,"}, {"sha": "708ef985675fbc0c6aa7a4a4cd760fcef8ef9678", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 34, "deletions": 19, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac4e73a1dc07f019feee9eceb39f0937ba25b8c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac4e73a1dc07f019feee9eceb39f0937ba25b8c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=5ac4e73a1dc07f019feee9eceb39f0937ba25b8c", "patch": "@@ -86,6 +86,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tnoexcept(declval<const _Hash&>()(declval<const _Key&>()))>\n     { };\n \n+  struct _Identity\n+  {\n+    template<typename _Tp>\n+      _Tp&&\n+      operator()(_Tp&& __x) const\n+      { return std::forward<_Tp>(__x); }\n+  };\n+\n+  struct _Select1st\n+  {\n+    template<typename _Tp>\n+      auto\n+      operator()(_Tp&& __x) const\n+      -> decltype(std::get<0>(std::forward<_Tp>(__x)))\n+      { return std::get<0>(std::forward<_Tp>(__x)); }\n+  };\n+\n   // Auxiliary types used for all instantiations of _Hashtable nodes\n   // and iterators.\n \n@@ -497,27 +514,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash,\n \t   typename _RehashPolicy, typename _Traits>\n-    struct _Map_base<_Key, _Pair, _Alloc, std::_Select1st<_Pair>, _Equal,\n+    struct _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,\n \t\t     _H1, _H2, _Hash, _RehashPolicy, _Traits, false>\n     {\n-      using mapped_type = typename _Pair::second_type;\n+      using mapped_type = typename std::tuple_element<1, _Pair>::type;\n     };\n \n   /// Partial specialization, __unique_keys set to true.\n   template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash,\n \t   typename _RehashPolicy, typename _Traits>\n-    struct _Map_base<_Key, _Pair, _Alloc, std::_Select1st<_Pair>, _Equal,\n+    struct _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,\n \t\t     _H1, _H2, _Hash, _RehashPolicy, _Traits, true>\n     {\n     private:\n       using __hashtable_base = __detail::_Hashtable_base<_Key, _Pair,\n-\t\t\t\t\t\t\t std::_Select1st<_Pair>,\n+\t\t\t\t\t\t\t _Select1st,\n \t\t\t\t\t\t\t_Equal, _H1, _H2, _Hash,\n \t\t\t\t\t\t\t  _Traits>;\n \n       using __hashtable = _Hashtable<_Key, _Pair, _Alloc,\n-\t\t\t\t     std::_Select1st<_Pair>, _Equal,\n+\t\t\t\t     _Select1st, _Equal,\n \t\t\t\t     _H1, _H2, _Hash, _RehashPolicy, _Traits>;\n \n       using __hash_code = typename __hashtable_base::__hash_code;\n@@ -526,7 +543,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       using key_type = typename __hashtable_base::key_type;\n       using iterator = typename __hashtable_base::iterator;\n-      using mapped_type = typename _Pair::second_type;\n+      using mapped_type = typename std::tuple_element<1, _Pair>::type;\n \n       mapped_type&\n       operator[](const key_type& __k);\n@@ -546,10 +563,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash,\n \t   typename _RehashPolicy, typename _Traits>\n-    typename _Map_base<_Key, _Pair, _Alloc, std::_Select1st<_Pair>, _Equal,\n+    typename _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,\n \t\t       _H1, _H2, _Hash, _RehashPolicy, _Traits, true>\n \t\t       ::mapped_type&\n-    _Map_base<_Key, _Pair, _Alloc, std::_Select1st<_Pair>, _Equal,\n+    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,\n \t      _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::\n     operator[](const key_type& __k)\n     {\n@@ -567,10 +584,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash,\n \t   typename _RehashPolicy, typename _Traits>\n-    typename _Map_base<_Key, _Pair, _Alloc, std::_Select1st<_Pair>, _Equal,\n+    typename _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,\n \t\t       _H1, _H2, _Hash, _RehashPolicy, _Traits, true>\n \t\t       ::mapped_type&\n-    _Map_base<_Key, _Pair, _Alloc, std::_Select1st<_Pair>, _Equal,\n+    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,\n \t      _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::\n     operator[](key_type&& __k)\n     {\n@@ -589,10 +606,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash,\n \t   typename _RehashPolicy, typename _Traits>\n-    typename _Map_base<_Key, _Pair, _Alloc, std::_Select1st<_Pair>, _Equal,\n+    typename _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,\n \t\t       _H1, _H2, _Hash, _RehashPolicy, _Traits, true>\n \t\t       ::mapped_type&\n-    _Map_base<_Key, _Pair, _Alloc, std::_Select1st<_Pair>, _Equal,\n+    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,\n \t      _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::\n     at(const key_type& __k)\n     {\n@@ -609,11 +626,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash,\n \t   typename _RehashPolicy, typename _Traits>\n-    const typename _Map_base<_Key, _Pair, _Alloc, std::_Select1st<_Pair>,\n-\t\t\t     _Equal,\n-\t\t       _H1, _H2, _Hash, _RehashPolicy, _Traits, true>\n-\t\t       ::mapped_type&\n-    _Map_base<_Key, _Pair, _Alloc, std::_Select1st<_Pair>, _Equal,\n+    const typename _Map_base<_Key, _Pair, _Alloc, _Select1st,\n+\t\t\t     _Equal, _H1, _H2, _Hash, _RehashPolicy,\n+\t\t\t     _Traits, true>::mapped_type&\n+    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,\n \t      _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::\n     at(const key_type& __k) const\n     {\n@@ -1492,8 +1508,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t\t     iterator>::type;\n \n     using __iconv_type = typename  std::conditional<__unique_keys::value,\n-\t\t\t\t\t       std::_Select1st<__ireturn_type>,\n-\t\t\t\t\t       std::_Identity<__ireturn_type>\n+\t\t\t\t\t\t    _Select1st, _Identity\n \t\t\t\t\t\t    >::type;\n   private:\n     using _EqualEBO = _Hashtable_ebo_helper<0, _Equal>;"}, {"sha": "42f5c1752b73a8c7ed6cfd218d1708f71b46684d", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac4e73a1dc07f019feee9eceb39f0937ba25b8c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac4e73a1dc07f019feee9eceb39f0937ba25b8c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=5ac4e73a1dc07f019feee9eceb39f0937ba25b8c", "patch": "@@ -473,11 +473,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp>\n     struct _Identity\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n-    // unary_function itself is deprecated in C++11 and deriving from\n-    // it can even be a nuisance (see PR 52942).\n     : public unary_function<_Tp,_Tp>\n-#endif\n     {\n       _Tp&\n       operator()(_Tp& __x) const\n@@ -490,9 +486,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Pair>\n     struct _Select1st\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n     : public unary_function<_Pair, typename _Pair::first_type>\n-#endif\n     {\n       typename _Pair::first_type&\n       operator()(_Pair& __x) const\n@@ -517,9 +511,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Pair>\n     struct _Select2nd\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n     : public unary_function<_Pair, typename _Pair::second_type>\n-#endif\n     {\n       typename _Pair::second_type&\n       operator()(_Pair& __x) const"}, {"sha": "27703b6b9c03949e1899e50b6f66c459aca8551b", "filename": "libstdc++-v3/include/bits/unordered_map.h", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac4e73a1dc07f019feee9eceb39f0937ba25b8c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac4e73a1dc07f019feee9eceb39f0937ba25b8c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h?ref=5ac4e73a1dc07f019feee9eceb39f0937ba25b8c", "patch": "@@ -45,12 +45,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t   typename _Alloc = std::allocator<std::pair<const _Key, _Tp> >,\n \t   typename _Tr = __umap_traits<__cache_default<_Key, _Hash>::value>>\n     using __umap_hashtable = _Hashtable<_Key, std::pair<const _Key, _Tp>,\n-\t\t\t\t\t_Alloc,\n-\t\t\t\t   std::_Select1st<std::pair<const _Key, _Tp>>,\n-\t\t\t\t       _Pred, _Hash,\n-\t\t\t\t       __detail::_Mod_range_hashing,\n-\t\t\t\t       __detail::_Default_ranged_hash,\n-\t\t\t\t       __detail::_Prime_rehash_policy, _Tr>;\n+                                        _Alloc, __detail::_Select1st,\n+\t\t\t\t        _Pred, _Hash,\n+\t\t\t\t        __detail::_Mod_range_hashing,\n+\t\t\t\t        __detail::_Default_ranged_hash,\n+\t\t\t\t        __detail::_Prime_rehash_policy, _Tr>;\n \n   /// Base types for unordered_multimap.\n   template<bool _Cache>\n@@ -63,8 +62,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t   typename _Alloc = std::allocator<std::pair<const _Key, _Tp> >,\n \t   typename _Tr = __ummap_traits<__cache_default<_Key, _Hash>::value>>\n     using __ummap_hashtable = _Hashtable<_Key, std::pair<const _Key, _Tp>,\n-\t\t\t\t\t _Alloc,\n-\t\t\t\t  std::_Select1st<std::pair<const _Key, _Tp>>,\n+\t\t\t\t\t _Alloc, __detail::_Select1st,\n \t\t\t\t\t _Pred, _Hash,\n \t\t\t\t\t __detail::_Mod_range_hashing,\n \t\t\t\t\t __detail::_Default_ranged_hash,"}, {"sha": "88179475623bf20de7e7a2db01c6d882f5bdfc7e", "filename": "libstdc++-v3/include/bits/unordered_set.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac4e73a1dc07f019feee9eceb39f0937ba25b8c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac4e73a1dc07f019feee9eceb39f0937ba25b8c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h?ref=5ac4e73a1dc07f019feee9eceb39f0937ba25b8c", "patch": "@@ -44,7 +44,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   \t   typename _Alloc = std::allocator<_Value>,\n \t   typename _Tr = __uset_traits<__cache_default<_Value, _Hash>::value>>\n     using __uset_hashtable = _Hashtable<_Value, _Value, _Alloc,\n-\t\t\t\t\tstd::_Identity<_Value>, _Pred, _Hash,\n+\t\t\t\t\t__detail::_Identity, _Pred, _Hash,\n \t\t\t\t\t__detail::_Mod_range_hashing,\n \t\t\t\t\t__detail::_Default_ranged_hash,\n \t\t\t\t\t__detail::_Prime_rehash_policy, _Tr>;\n@@ -59,7 +59,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t   typename _Alloc = std::allocator<_Value>,\n \t   typename _Tr = __umset_traits<__cache_default<_Value, _Hash>::value>>\n     using __umset_hashtable = _Hashtable<_Value, _Value, _Alloc,\n-\t\t\t\t\t std::_Identity<_Value>,\n+\t\t\t\t\t __detail::_Identity,\n \t\t\t\t\t _Pred, _Hash,\n \t\t\t\t\t __detail::_Mod_range_hashing,\n \t\t\t\t\t __detail::_Default_ranged_hash,"}, {"sha": "c981da0cb71680b6add10ca50b415f09e8f9d4cd", "filename": "libstdc++-v3/include/ext/functional", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac4e73a1dc07f019feee9eceb39f0937ba25b8c/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac4e73a1dc07f019feee9eceb39f0937ba25b8c/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional?ref=5ac4e73a1dc07f019feee9eceb39f0937ba25b8c", "patch": "@@ -184,12 +184,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template <class _Tp>\n     struct identity\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-    : public std::unary_function<_Tp,_Tp>,\n-      public std::_Identity<_Tp> {};\n-#else\n     : public std::_Identity<_Tp> {};\n-#endif\n \n   /** @c select1st and @c select2nd are extensions provided by SGI.  Their\n    *  @c operator()s\n@@ -204,22 +199,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// An \\link SGIextensions SGI extension \\endlink.\n   template <class _Pair>\n     struct select1st\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-    : public std::unary_function<_Pair, typename _Pair::first_type>,\n-      public std::_Select1st<_Pair> {};\n-#else\n     : public std::_Select1st<_Pair> {};\n-#endif\n \n   /// An \\link SGIextensions SGI extension \\endlink.\n   template <class _Pair>\n     struct select2nd\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-    : public std::unary_function<_Pair, typename _Pair::second_type>,\n-      public std::_Select2nd<_Pair> {};\n-#else\n     : public std::_Select2nd<_Pair> {};\n-#endif\n+\n   /** @}  */\n \n   // extension documented next"}, {"sha": "a6881dbcf82045ede2bdb9704e4beb89ef35877e", "filename": "libstdc++-v3/testsuite/20_util/ratio/cons/cons_overflow_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac4e73a1dc07f019feee9eceb39f0937ba25b8c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac4e73a1dc07f019feee9eceb39f0937ba25b8c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc?ref=5ac4e73a1dc07f019feee9eceb39f0937ba25b8c", "patch": "@@ -2,7 +2,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-require-cstdint \"\" }\n \n-// Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation\n+// Copyright (C) 2008, 2009, 2010, 2011, 2012 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -51,5 +51,5 @@ test04()\n // { dg-error \"required from here\" \"\" { target *-*-* } 46 }\n // { dg-error \"denominator cannot be zero\" \"\" { target *-*-* } 265 }\n // { dg-error \"out of range\" \"\" { target *-*-* } 266 }\n-// { dg-error \"overflow in constant expression\" \"\" { target *-*-* } 61 }\n+// { dg-error \"overflow in constant expression\" \"\" { target *-*-* } 62 }\n // { dg-prune-output \"not a member\" }"}, {"sha": "809b10d5546b97a040208654c780c6f6b8058f41", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/requirements/53339.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac4e73a1dc07f019feee9eceb39f0937ba25b8c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2F53339.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac4e73a1dc07f019feee9eceb39f0937ba25b8c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2F53339.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2F53339.cc?ref=5ac4e73a1dc07f019feee9eceb39f0937ba25b8c", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_map>\n+\n+struct LinkedHashMap\n+{\n+  struct Entry;\n+\n+  typedef std::unordered_map<int, Entry> Storage;\n+  typedef Storage::iterator EntryPtr;\n+\n+  struct Entry\n+  {\n+    EntryPtr prev, next;\n+  };\n+};"}, {"sha": "92721333c50f741d48e9bdc1ede692b0c964b91e", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/requirements/53339.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac4e73a1dc07f019feee9eceb39f0937ba25b8c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2F53339.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac4e73a1dc07f019feee9eceb39f0937ba25b8c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2F53339.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2F53339.cc?ref=5ac4e73a1dc07f019feee9eceb39f0937ba25b8c", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_map>\n+\n+struct LinkedHashMap\n+{\n+  struct Entry;\n+\n+  typedef std::unordered_multimap<int, Entry> Storage;\n+  typedef Storage::iterator EntryPtr;\n+\n+  struct Entry\n+  {\n+    EntryPtr prev, next;\n+  };\n+};"}]}