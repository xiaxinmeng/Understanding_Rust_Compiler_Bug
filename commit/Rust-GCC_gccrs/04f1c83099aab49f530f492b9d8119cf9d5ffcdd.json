{"sha": "04f1c83099aab49f530f492b9d8119cf9d5ffcdd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRmMWM4MzA5OWFhYjQ5ZjUzMGY0OTJiOWQ4MTE5Y2Y5ZDVmZmNkZA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2016-11-17T07:52:24Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2016-11-17T07:52:24Z"}, "message": "re PR fortran/66227 ([OOP] EXTENDS_TYPE_OF n returns wrong result for polymorphic variable allocated to extended type)\n\n2016-11-17  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/66227\n\t* simplify.c (gfc_simplify_extends_type_of): Fix missed optimization.\n\tPrevent over-simplification. Fix a comment. Add a comment.\n\n2016-11-17  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/66227\n\t* gfortran.dg/extends_type_of_3.f90: Fix and extend the test case.\n\nFrom-SVN: r242535", "tree": {"sha": "8b4f0fafbd80536213bd821e526cc672875a48af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b4f0fafbd80536213bd821e526cc672875a48af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04f1c83099aab49f530f492b9d8119cf9d5ffcdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04f1c83099aab49f530f492b9d8119cf9d5ffcdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04f1c83099aab49f530f492b9d8119cf9d5ffcdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04f1c83099aab49f530f492b9d8119cf9d5ffcdd/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bd99cce5b3769fd98b3db0d858222fa67e56486", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bd99cce5b3769fd98b3db0d858222fa67e56486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bd99cce5b3769fd98b3db0d858222fa67e56486"}], "stats": {"total": 55, "additions": 41, "deletions": 14}, "files": [{"sha": "6d7d415eae100e981eeb1ab119862e949da977a5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f1c83099aab49f530f492b9d8119cf9d5ffcdd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f1c83099aab49f530f492b9d8119cf9d5ffcdd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=04f1c83099aab49f530f492b9d8119cf9d5ffcdd", "patch": "@@ -1,3 +1,9 @@\n+2016-11-17  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/66227\n+\t* simplify.c (gfc_simplify_extends_type_of): Fix missed optimization.\n+\tPrevent over-simplification. Fix a comment. Add a comment.\n+\n 2016-11-16  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/58001"}, {"sha": "9047c63db69d4dd82668a05b7df57b823dccf67a", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f1c83099aab49f530f492b9d8119cf9d5ffcdd/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f1c83099aab49f530f492b9d8119cf9d5ffcdd/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=04f1c83099aab49f530f492b9d8119cf9d5ffcdd", "patch": "@@ -2517,7 +2517,7 @@ gfc_simplify_extends_type_of (gfc_expr *a, gfc_expr *mold)\n   if (UNLIMITED_POLY (a) || UNLIMITED_POLY (mold))\n     return NULL;\n \n-  /* Return .false. if the dynamic type can never be the same.  */\n+  /* Return .false. if the dynamic type can never be an extension.  */\n   if ((a->ts.type == BT_CLASS && mold->ts.type == BT_CLASS\n        && !gfc_type_is_extension_of\n \t\t\t(mold->ts.u.derived->components->ts.u.derived,\n@@ -2526,19 +2526,20 @@ gfc_simplify_extends_type_of (gfc_expr *a, gfc_expr *mold)\n \t\t\t(a->ts.u.derived->components->ts.u.derived,\n \t\t\t mold->ts.u.derived->components->ts.u.derived))\n       || (a->ts.type == BT_DERIVED && mold->ts.type == BT_CLASS\n-\t  && !gfc_type_is_extension_of\n-\t\t\t(a->ts.u.derived,\n-\t\t\t mold->ts.u.derived->components->ts.u.derived)\n \t  && !gfc_type_is_extension_of\n \t\t\t(mold->ts.u.derived->components->ts.u.derived,\n \t\t\t a->ts.u.derived))\n       || (a->ts.type == BT_CLASS && mold->ts.type == BT_DERIVED\n \t  && !gfc_type_is_extension_of\n \t\t\t(mold->ts.u.derived,\n-\t\t\t a->ts.u.derived->components->ts.u.derived)))\n+\t\t\t a->ts.u.derived->components->ts.u.derived)\n+\t  && !gfc_type_is_extension_of\n+\t\t\t(a->ts.u.derived->components->ts.u.derived,\n+\t\t\t mold->ts.u.derived)))\n     return gfc_get_logical_expr (gfc_default_logical_kind, &a->where, false);\n \n-  if (mold->ts.type == BT_DERIVED\n+  /* Return .true. if the dynamic type is guaranteed to be an extension.  */\n+  if (a->ts.type == BT_CLASS && mold->ts.type == BT_DERIVED\n       && gfc_type_is_extension_of (mold->ts.u.derived,\n \t\t\t\t   a->ts.u.derived->components->ts.u.derived))\n     return gfc_get_logical_expr (gfc_default_logical_kind, &a->where, true);"}, {"sha": "abfea5077fb9a097d2c35d1bb9447fa91e714d9b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f1c83099aab49f530f492b9d8119cf9d5ffcdd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f1c83099aab49f530f492b9d8119cf9d5ffcdd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=04f1c83099aab49f530f492b9d8119cf9d5ffcdd", "patch": "@@ -1,3 +1,8 @@\n+2016-11-17  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/66227\n+\t* gfortran.dg/extends_type_of_3.f90: Fix and extend the test case.\n+\n 2016-11-16  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/78285"}, {"sha": "6ba1dc3212da30610cf0253e62570f8406c100dc", "filename": "gcc/testsuite/gfortran.dg/extends_type_of_3.f90", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f1c83099aab49f530f492b9d8119cf9d5ffcdd/gcc%2Ftestsuite%2Fgfortran.dg%2Fextends_type_of_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f1c83099aab49f530f492b9d8119cf9d5ffcdd/gcc%2Ftestsuite%2Fgfortran.dg%2Fextends_type_of_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fextends_type_of_3.f90?ref=04f1c83099aab49f530f492b9d8119cf9d5ffcdd", "patch": "@@ -3,9 +3,7 @@\n !\n ! PR fortran/41580\n !\n-! Compile-time simplification of SAME_TYPE_AS\n-! and EXTENDS_TYPE_OF.\n-!\n+! Compile-time simplification of SAME_TYPE_AS and EXTENDS_TYPE_OF.\n \n implicit none\n type t1\n@@ -37,6 +35,8 @@\n \n if (p1 .or. p2 .or. p3 .or. p4 .or. .not. p5 .or. .not. p6) call should_not_exist()\n \n+if (same_type_as(b1,b1)   .neqv. .true.) call should_not_exist()\n+\n ! Not (trivially) compile-time simplifiable:\n if (same_type_as(b1,a1)  .neqv. .true.) call abort()\n if (same_type_as(b1,a11) .neqv. .false.) call abort()\n@@ -49,6 +49,7 @@\n if (same_type_as(b1,a11) .neqv. .true.) call abort()\n deallocate(b1)\n \n+\n ! .true. -> same type\n if (extends_type_of(a1,a1)   .neqv. .true.) call should_not_exist()\n if (extends_type_of(a11,a11) .neqv. .true.) call should_not_exist()\n@@ -78,33 +79,47 @@\n ! type extension possible, compile-time checkable\n if (extends_type_of(a1,a11) .neqv. .false.) call should_not_exist()\n if (extends_type_of(a11,a1) .neqv. .true.) call should_not_exist()\n-if (extends_type_of(a1,a11) .neqv. .false.) call should_not_exist()\n \n if (extends_type_of(b1,a1)   .neqv. .true.) call should_not_exist()\n if (extends_type_of(b11,a1)  .neqv. .true.) call should_not_exist()\n if (extends_type_of(b11,a11) .neqv. .true.) call should_not_exist()\n-if (extends_type_of(b1,a11)  .neqv. .false.) call should_not_exist()\n \n-if (extends_type_of(a1,b11)  .neqv. .false.) call abort()\n+if (extends_type_of(a1,b11)  .neqv. .false.) call should_not_exist()\n+\n \n ! Special case, simplified at tree folding:\n if (extends_type_of(b1,b1)   .neqv. .true.) call abort()\n \n ! All other possibilities are not compile-time checkable\n if (extends_type_of(b11,b1)  .neqv. .true.) call abort()\n-!if (extends_type_of(b1,b11)  .neqv. .false.) call abort() ! FAILS due to PR 47189\n+if (extends_type_of(b1,b11)  .neqv. .false.) call abort()\n if (extends_type_of(a11,b11) .neqv. .true.) call abort()\n+\n allocate(t11 :: b11)\n if (extends_type_of(a11,b11) .neqv. .true.) call abort()\n deallocate(b11)\n+\n allocate(t111 :: b11)\n if (extends_type_of(a11,b11) .neqv. .false.) call abort()\n deallocate(b11)\n+\n allocate(t11 :: b1)\n if (extends_type_of(a11,b1) .neqv. .true.) call abort()\n deallocate(b1)\n \n+allocate(t11::b1)\n+if (extends_type_of(b1,a11) .neqv. .true.) call abort()\n+deallocate(b1)\n+\n+allocate(b1,source=a11)\n+if (extends_type_of(b1,a11) .neqv. .true.) call abort()\n+deallocate(b1)\n+\n+allocate( b1,source=a1)\n+if (extends_type_of(b1,a11) .neqv. .false.) call abort()\n+deallocate(b1)\n+\n end\n \n-! { dg-final { scan-tree-dump-times \"abort\" 13 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"abort\" 16 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"should_not_exist\" 0 \"original\" } }"}]}