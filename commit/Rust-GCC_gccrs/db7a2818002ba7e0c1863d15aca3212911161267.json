{"sha": "db7a2818002ba7e0c1863d15aca3212911161267", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI3YTI4MTgwMDJiYTdlMGMxODYzZDE1YWNhMzIxMjkxMTE2MTI2Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-01-30T18:04:13Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-01-30T18:04:13Z"}, "message": "re PR middle-end/69546 (wrong code with -O and simple int128 arithmetics)\n\n\tPR tree-optimization/69546\n\t* wide-int.cc (wi::divmod_internal): For unsigned division\n\twhere both operands fit into uhwi, if o1 is 1 and o0 has\n\tmsb set, if divident_prec is larger than bits per hwi,\n\tclear another quotient word and return 2 instead of 1.\n\tSimilarly for remainder with msb in HWI set, if dividend_prec\n\tis larger than bits per hwi.\n\n\t* gcc.dg/torture/pr69546.c: New test.\n\nFrom-SVN: r233012", "tree": {"sha": "3a978b34d4a749f949ab5c378dd10d65e6b9c5b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a978b34d4a749f949ab5c378dd10d65e6b9c5b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db7a2818002ba7e0c1863d15aca3212911161267", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db7a2818002ba7e0c1863d15aca3212911161267", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db7a2818002ba7e0c1863d15aca3212911161267", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db7a2818002ba7e0c1863d15aca3212911161267/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e520d5f02a0cfa5d07a48a14f2b67af63884e9ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e520d5f02a0cfa5d07a48a14f2b67af63884e9ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e520d5f02a0cfa5d07a48a14f2b67af63884e9ed"}], "stats": {"total": 82, "additions": 79, "deletions": 3}, "files": [{"sha": "0d405cdcbd51533e897639cf235813c04df7cf23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db7a2818002ba7e0c1863d15aca3212911161267/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db7a2818002ba7e0c1863d15aca3212911161267/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db7a2818002ba7e0c1863d15aca3212911161267", "patch": "@@ -1,3 +1,13 @@\n+2016-01-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/69546\n+\t* wide-int.cc (wi::divmod_internal): For unsigned division\n+\twhere both operands fit into uhwi, if o1 is 1 and o0 has\n+\tmsb set, if divident_prec is larger than bits per hwi,\n+\tclear another quotient word and return 2 instead of 1.\n+\tSimilarly for remainder with msb in HWI set, if dividend_prec\n+\tis larger than bits per hwi.\n+\n 2016-01-29  Martin Jambor  <mjambor@suse.cz>\n \n \t* hsa-gen.c (get_memory_order_name): Mask with MEMMODEL_BASE_MASK."}, {"sha": "63a4bfa16f928e50bc88df9dffba384860e22006", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db7a2818002ba7e0c1863d15aca3212911161267/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db7a2818002ba7e0c1863d15aca3212911161267/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=db7a2818002ba7e0c1863d15aca3212911161267", "patch": "@@ -1,3 +1,8 @@\n+2016-01-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/69546\n+\t* gcc.dg/torture/pr69546.c: New test.\n+\n 2016-01-30  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/69566"}, {"sha": "39db1792a0f6f1640956e4163c9f55acf0586357", "filename": "gcc/testsuite/gcc.dg/torture/pr69546-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db7a2818002ba7e0c1863d15aca3212911161267/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69546-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db7a2818002ba7e0c1863d15aca3212911161267/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69546-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69546-1.c?ref=db7a2818002ba7e0c1863d15aca3212911161267", "patch": "@@ -0,0 +1,26 @@\n+/* PR tree-optimization/69546 */\n+/* { dg-do run { target int128 } } */\n+\n+unsigned __int128 __attribute__ ((noinline, noclone))\n+foo (unsigned long long x)\n+{\n+  unsigned __int128 y = ~0ULL;\n+  x >>= 63;\n+  return y / (x | 1);\n+}\n+\n+unsigned __int128 __attribute__ ((noinline, noclone))\n+bar (unsigned long long x)\n+{\n+  unsigned __int128 y = ~33ULL;\n+  x >>= 63;\n+  return y / (x | 1);\n+}\n+\n+int\n+main ()\n+{\n+  if (foo (1) != ~0ULL || bar (17) != ~33ULL)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "f00431093b4cb106ddbbafbc51cf7887e4dfdb14", "filename": "gcc/testsuite/gcc.dg/torture/pr69546-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db7a2818002ba7e0c1863d15aca3212911161267/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69546-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db7a2818002ba7e0c1863d15aca3212911161267/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69546-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69546-2.c?ref=db7a2818002ba7e0c1863d15aca3212911161267", "patch": "@@ -0,0 +1,18 @@\n+/* PR tree-optimization/69546 */\n+/* { dg-do run { target int128 } } */\n+\n+unsigned __int128\n+foo (void)\n+{\n+  unsigned __int128 a = 0xfffffffffffffffeULL;\n+  unsigned __int128 b = 0xffffffffffffffffULL;\n+  return a % b;\n+}\n+\n+int\n+main ()\n+{\n+  if (foo () != 0xfffffffffffffffeULL)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "5fcec2ee790ddfc29a401d42c5f2c0f815709d7b", "filename": "gcc/wide-int.cc", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db7a2818002ba7e0c1863d15aca3212911161267/gcc%2Fwide-int.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db7a2818002ba7e0c1863d15aca3212911161267/gcc%2Fwide-int.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int.cc?ref=db7a2818002ba7e0c1863d15aca3212911161267", "patch": "@@ -1788,15 +1788,32 @@ wi::divmod_internal (HOST_WIDE_INT *quotient, unsigned int *remainder_len,\n     {\n       unsigned HOST_WIDE_INT o0 = dividend.to_uhwi ();\n       unsigned HOST_WIDE_INT o1 = divisor.to_uhwi ();\n+      unsigned int quotient_len = 1;\n \n       if (quotient)\n-\tquotient[0] = o0 / o1;\n+\t{\n+\t  quotient[0] = o0 / o1;\n+\t  if (o1 == 1\n+\t      && (HOST_WIDE_INT) o0 < 0\n+\t      && dividend_prec > HOST_BITS_PER_WIDE_INT)\n+\t    {\n+\t      quotient[1] = 0;\n+\t      quotient_len = 2;\n+\t    }\n+\t}\n       if (remainder)\n \t{\n \t  remainder[0] = o0 % o1;\n-\t  *remainder_len = 1;\n+\t  if ((HOST_WIDE_INT) remainder[0] < 0\n+\t      && dividend_prec > HOST_BITS_PER_WIDE_INT)\n+\t    {\n+\t      remainder[1] = 0;\n+\t      *remainder_len = 2;\n+\t    }\n+\t  else\n+\t    *remainder_len = 1;\n \t}\n-      return 1;\n+      return quotient_len;\n     }\n \n   /* Make the divisor and dividend positive and remember what we"}]}