{"sha": "597a8ab9c6f57c416c2b0a734c2098fa0335e628", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk3YThhYjljNmY1N2M0MTZjMmIwYTczNGMyMDk4ZmEwMzM1ZTYyOA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-12-16T13:49:07Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-12-16T13:49:07Z"}, "message": "Add pass_oacc_ipa\n\n2015-12-16  Tom de Vries  <tom@codesourcery.com>\n\n\t* opts.c (default_options_optimization): Set fipa-pta on by default for\n\tfopenacc.\n\t* passes.def: Move kernels pass group to pass_ipa_oacc.\n\t* tree-pass.h (make_pass_oacc_kernels2): Remove.\n\t(make_pass_ipa_oacc, make_pass_ipa_oacc_kernels): Declare.\n\t* tree-ssa-loop.c (pass_oacc_kernels2, make_pass_oacc_kernels2): Remove.\n\t(pass_ipa_oacc, pass_ipa_oacc_kernels): New pass.\n\t(make_pass_ipa_oacc, make_pass_ipa_oacc_kernels): New function.\n\t* tree-ssa-structalias.c (pass_ipa_pta::clone): New function.\n\n\t* g++.dg/ipa/devirt-37.C: Update for new fre2 pass.\n\t* g++.dg/ipa/devirt-40.C: Same.\n\t* g++.dg/tree-ssa/pr61034.C: Same.\n\t* gcc.dg/ipa/ipa-pta-1.c: Update for new pta1 pass.\n\t* gcc.dg/ipa/ipa-pta-10.c: Same.\n\t* gcc.dg/ipa/ipa-pta-11.c: Same.\n\t* gcc.dg/ipa/ipa-pta-14.c: Same.\n\t* gcc.dg/ipa/ipa-pta-16.c: Same.\n\t* gcc.dg/ipa/ipa-pta-2.c: Same.\n\t* gcc.dg/ipa/ipa-pta-5.c: Same.\n\t* gcc.dg/ipa/ipa-pta-6.c: Same.\n\t* gcc.dg/torture/ipa-pta-1.c: Same.\n\t* gcc.dg/ipa/ipa-pta-13.c: Update for new fre2 and pta1 pass.\n\t* gcc.dg/ipa/ipa-pta-3.c: Same.\n\t* gcc.dg/ipa/ipa-pta-4.c: Same.\n\nFrom-SVN: r231690", "tree": {"sha": "2932f5cc1548ca0542477812be3dbb8f67821ac7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2932f5cc1548ca0542477812be3dbb8f67821ac7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/597a8ab9c6f57c416c2b0a734c2098fa0335e628", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/597a8ab9c6f57c416c2b0a734c2098fa0335e628", "html_url": "https://github.com/Rust-GCC/gccrs/commit/597a8ab9c6f57c416c2b0a734c2098fa0335e628", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/597a8ab9c6f57c416c2b0a734c2098fa0335e628/comments", "author": null, "committer": null, "parents": [{"sha": "f47cda24579db16228140f8849e9c456093c92ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f47cda24579db16228140f8849e9c456093c92ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f47cda24579db16228140f8849e9c456093c92ab"}], "stats": {"total": 268, "additions": 176, "deletions": 92}, "files": [{"sha": "0f75f85b74e12c2e0b4e5825c144fbf480672e49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=597a8ab9c6f57c416c2b0a734c2098fa0335e628", "patch": "@@ -1,3 +1,15 @@\n+2015-12-16  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* opts.c (default_options_optimization): Set fipa-pta on by default for\n+\tfopenacc.\n+\t* passes.def: Move kernels pass group to pass_ipa_oacc.\n+\t* tree-pass.h (make_pass_oacc_kernels2): Remove.\n+\t(make_pass_ipa_oacc, make_pass_ipa_oacc_kernels): Declare.\n+\t* tree-ssa-loop.c (pass_oacc_kernels2, make_pass_oacc_kernels2): Remove.\n+\t(pass_ipa_oacc, pass_ipa_oacc_kernels): New pass.\n+\t(make_pass_ipa_oacc, make_pass_ipa_oacc_kernels): New function.\n+\t* tree-ssa-structalias.c (pass_ipa_pta::clone): New function.\n+\n 2015-12-16  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/68861"}, {"sha": "d46f304d26229da08923d9f515c74d71fb30fafc", "filename": "gcc/opts.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=597a8ab9c6f57c416c2b0a734c2098fa0335e628", "patch": "@@ -560,6 +560,7 @@ default_options_optimization (struct gcc_options *opts,\n {\n   unsigned int i;\n   int opt2;\n+  bool openacc_mode = false;\n \n   /* Scan to see what optimization level has been specified.  That will\n      determine the default value of many flags.  */\n@@ -619,6 +620,11 @@ default_options_optimization (struct gcc_options *opts,\n \t  opts->x_optimize_debug = 1;\n \t  break;\n \n+\tcase OPT_fopenacc:\n+\t  if (opt->value)\n+\t    openacc_mode = true;\n+\t  break;\n+\n \tdefault:\n \t  /* Ignore other options in this prescan.  */\n \t  break;\n@@ -633,6 +639,10 @@ default_options_optimization (struct gcc_options *opts,\n   /* -O2 param settings.  */\n   opt2 = (opts->x_optimize >= 2);\n \n+  if (openacc_mode\n+      && !opts_set->x_flag_ipa_pta)\n+    opts->x_flag_ipa_pta = true;\n+\n   /* Track fields in field-sensitive alias analysis.  */\n   maybe_set_param_value\n     (PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE,"}, {"sha": "2ba8490b0573e1ba55ae74d39a7f28fbf5677214", "filename": "gcc/passes.def", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=597a8ab9c6f57c416c2b0a734c2098fa0335e628", "patch": "@@ -88,24 +88,7 @@ along with GCC; see the file COPYING3.  If not see\n \t  /* pass_build_ealias is a dummy pass that ensures that we\n \t     execute TODO_rebuild_alias at this point.  */\n \t  NEXT_PASS (pass_build_ealias);\n-\t  /* Pass group that runs when the function is an offloaded function\n-\t     containing oacc kernels loops.  Part 1.  */\n-\t  NEXT_PASS (pass_oacc_kernels);\n-\t  PUSH_INSERT_PASSES_WITHIN (pass_oacc_kernels)\n-\t      NEXT_PASS (pass_ch);\n-\t  POP_INSERT_PASSES ()\n \t  NEXT_PASS (pass_fre);\n-\t  /* Pass group that runs when the function is an offloaded function\n-\t     containing oacc kernels loops.  Part 2.  */\n-\t  NEXT_PASS (pass_oacc_kernels2);\n-\t  PUSH_INSERT_PASSES_WITHIN (pass_oacc_kernels2)\n-\t      /* We use pass_lim to rewrite in-memory iteration and reduction\n-\t\t variable accesses in loops into local variables accesses.  */\n-\t      NEXT_PASS (pass_lim);\n-\t      NEXT_PASS (pass_dominator, false /* may_peel_loop_headers_p */);\n-\t      NEXT_PASS (pass_dce);\n-\t      NEXT_PASS (pass_expand_omp_ssa);\n-\t  POP_INSERT_PASSES ()\n \t  NEXT_PASS (pass_merge_phi);\n           NEXT_PASS (pass_dse);\n \t  NEXT_PASS (pass_cd_dce);\n@@ -124,6 +107,30 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_rebuild_cgraph_edges);\n       NEXT_PASS (pass_inline_parameters);\n   POP_INSERT_PASSES ()\n+\n+  NEXT_PASS (pass_ipa_oacc);\n+  PUSH_INSERT_PASSES_WITHIN (pass_ipa_oacc)\n+      NEXT_PASS (pass_ipa_pta);\n+      /* Pass group that runs when the function is an offloaded function\n+\t containing oacc kernels loops.\t */\n+      NEXT_PASS (pass_ipa_oacc_kernels);\n+      PUSH_INSERT_PASSES_WITHIN (pass_ipa_oacc_kernels)\n+\t  NEXT_PASS (pass_oacc_kernels);\n+\t  PUSH_INSERT_PASSES_WITHIN (pass_oacc_kernels)\n+\t      NEXT_PASS (pass_ch);\n+\t      NEXT_PASS (pass_fre);\n+\t      /* We use pass_lim to rewrite in-memory iteration and reduction\n+\t\t variable accesses in loops into local variables accesses.  */\n+\t      NEXT_PASS (pass_lim);\n+\t      NEXT_PASS (pass_dominator, false /* may_peel_loop_headers_p */);\n+\t      NEXT_PASS (pass_dce);\n+\t      /* pass_parallelize_loops_oacc_kernels */\n+\t      NEXT_PASS (pass_expand_omp_ssa);\n+\t      NEXT_PASS (pass_rebuild_cgraph_edges);\n+\t  POP_INSERT_PASSES ()\n+      POP_INSERT_PASSES ()\n+  POP_INSERT_PASSES ()\n+\n   NEXT_PASS (pass_ipa_chkp_produce_thunks);\n   NEXT_PASS (pass_ipa_auto_profile);\n   NEXT_PASS (pass_ipa_free_inline_summary);"}, {"sha": "4a058fb7a01780b048a07727e49aeed0fd14cd3b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=597a8ab9c6f57c416c2b0a734c2098fa0335e628", "patch": "@@ -1,3 +1,21 @@\n+2015-12-16  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* g++.dg/ipa/devirt-37.C: Update for new fre2 pass.\n+\t* g++.dg/ipa/devirt-40.C: Same.\n+\t* g++.dg/tree-ssa/pr61034.C: Same.\n+\t* gcc.dg/ipa/ipa-pta-1.c: Update for new pta1 pass.\n+\t* gcc.dg/ipa/ipa-pta-10.c: Same.\n+\t* gcc.dg/ipa/ipa-pta-11.c: Same.\n+\t* gcc.dg/ipa/ipa-pta-14.c: Same.\n+\t* gcc.dg/ipa/ipa-pta-16.c: Same.\n+\t* gcc.dg/ipa/ipa-pta-2.c: Same.\n+\t* gcc.dg/ipa/ipa-pta-5.c: Same.\n+\t* gcc.dg/ipa/ipa-pta-6.c: Same.\n+\t* gcc.dg/torture/ipa-pta-1.c: Same.\n+\t* gcc.dg/ipa/ipa-pta-13.c: Update for new fre2 and pta1 pass.\n+\t* gcc.dg/ipa/ipa-pta-3.c: Same.\n+\t* gcc.dg/ipa/ipa-pta-4.c: Same.\n+\n 2015-12-16  Richard Biener  <rguenther@suse.de>\n \n \tPR testsuite/68915"}, {"sha": "b7f52a0a5e9d350b22d76a1cf8c85f24ac926d6f", "filename": "gcc/testsuite/g++.dg/ipa/devirt-37.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-37.C?ref=597a8ab9c6f57c416c2b0a734c2098fa0335e628", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-fpermissive -O2 -fno-indirect-inlining -fno-devirtualize-speculatively -fdump-tree-fre2-details -fno-early-inlining\"  } */\n+/* { dg-options \"-fpermissive -O2 -fno-indirect-inlining -fno-devirtualize-speculatively -fdump-tree-fre3-details -fno-early-inlining\"  } */\n #include <stdlib.h>\n struct A {virtual void test() {abort ();}};\n struct B:A\n@@ -30,7 +30,7 @@ t()\n /* After inlining the call within constructor needs to be checked to not go into a basetype.\n    We should see the vtbl store and we should notice extcall as possibly clobbering the\n    type but ignore it because b is in static storage.  */\n-/* { dg-final { scan-tree-dump \"No dynamic type change found.\"  \"fre2\"  } } */\n-/* { dg-final { scan-tree-dump \"Checking vtbl store:\"  \"fre2\"  } } */\n-/* { dg-final { scan-tree-dump \"Function call may change dynamic type:extcall\"  \"fre2\"  } } */\n-/* { dg-final { scan-tree-dump \"converting indirect call to function virtual void\"  \"fre2\"  } } */\n+/* { dg-final { scan-tree-dump \"No dynamic type change found.\"  \"fre3\"  } } */\n+/* { dg-final { scan-tree-dump \"Checking vtbl store:\"  \"fre3\"  } } */\n+/* { dg-final { scan-tree-dump \"Function call may change dynamic type:extcall\"  \"fre3\"  } } */\n+/* { dg-final { scan-tree-dump \"converting indirect call to function virtual void\"  \"fre3\"  } } */"}, {"sha": "5107c290c6363a4186139416d2772e4a80f21f3f", "filename": "gcc/testsuite/g++.dg/ipa/devirt-40.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-40.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-40.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-40.C?ref=597a8ab9c6f57c416c2b0a734c2098fa0335e628", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-O2 -fdump-tree-fre2-details\"  } */\n+/* { dg-options \"-O2 -fdump-tree-fre3-details\"  } */\n typedef enum\n {\n } UErrorCode;\n@@ -19,4 +19,4 @@ A::m_fn1 (UnicodeString &, int &p2, UErrorCode &) const\n   UnicodeString a[2];\n }\n \n-/* { dg-final { scan-tree-dump-not \"\\\\n  OBJ_TYPE_REF\" \"fre2\"  } } */\n+/* { dg-final { scan-tree-dump-not \"\\\\n  OBJ_TYPE_REF\" \"fre3\"  } } */"}, {"sha": "c06c5807da1cccca9c074c315e797b75235a8fb3", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr61034.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr61034.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr61034.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr61034.C?ref=597a8ab9c6f57c416c2b0a734c2098fa0335e628", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-options \"-O2 -fdump-tree-fre2 -fdump-tree-optimized\" }\n+// { dg-options \"-O2 -fdump-tree-fre3 -fdump-tree-optimized\" }\n \n #define assume(x) if(!(x))__builtin_unreachable()\n \n@@ -42,13 +42,13 @@ bool f(I a, I b, I c, I d) {\n // a bunch of conditional free()s and unreachable()s.\n // This works only if everything is inlined into 'f'.\n \n-// { dg-final { scan-tree-dump-times \";; Function\" 1 \"fre2\" } }\n-// { dg-final { scan-tree-dump-times \"unreachable\" 11 \"fre2\" } }\n+// { dg-final { scan-tree-dump-times \";; Function\" 1 \"fre3\" } }\n+// { dg-final { scan-tree-dump-times \"unreachable\" 11 \"fre3\" } }\n \n // Note that depending on PUSH_ARGS_REVERSED we are presented with\n // a different initial CFG and thus the final outcome is different\n \n-// { dg-final { scan-tree-dump-times \"free\" 10 \"fre2\" { target x86_64-*-* i?86-*-* } } }\n+// { dg-final { scan-tree-dump-times \"free\" 10 \"fre3\" { target x86_64-*-* i?86-*-* } } }\n // { dg-final { scan-tree-dump-times \"free\" 3 \"optimized\" { target x86_64-*-* i?86-*-* } } }\n-// { dg-final { scan-tree-dump-times \"free\" 14 \"fre2\" { target aarch64-*-* ia64-*-* arm-*-* hppa*-*-* sparc*-*-* powerpc*-*-* alpha*-*-* } } }\n+// { dg-final { scan-tree-dump-times \"free\" 14 \"fre3\" { target aarch64-*-* ia64-*-* arm-*-* hppa*-*-* sparc*-*-* powerpc*-*-* alpha*-*-* } } }\n // { dg-final { scan-tree-dump-times \"free\" 4 \"optimized\" { target aarch64-*-* ia64-*-* arm-*-* hppa*-*-* sparc*-*-* powerpc*-*-* alpha*-*-* } } }"}, {"sha": "bc631f8856de3a65794b47f0e211db8ccdec01d1", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-pta-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-1.c?ref=597a8ab9c6f57c416c2b0a734c2098fa0335e628", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O -fipa-pta -fdump-ipa-pta-details\" } */\n+/* { dg-options \"-O -fipa-pta -fdump-ipa-pta2-details\" } */\n \n static int __attribute__((noinline))\n foo (int *p, int *q)\n@@ -45,8 +45,8 @@ int main()\n    not seen by IPA PTA (if the address escapes the unit which we only compute\n    during IPA PTA...).  Thus the solution also includes NONLOCAL.  */\n \n-/* { dg-final { scan-ipa-dump \"fn_1 = { bar foo }\" \"pta\" } } */\n-/* { dg-final { scan-ipa-dump \"bar.arg0 = { NONLOCAL a }\" \"pta\" } } */\n-/* { dg-final { scan-ipa-dump \"bar.arg1 = { NONLOCAL a }\" \"pta\" } } */\n-/* { dg-final { scan-ipa-dump \"foo.arg0 = { NONLOCAL a }\" \"pta\" } } */\n-/* { dg-final { scan-ipa-dump \"foo.arg1 = { NONLOCAL a }\" \"pta\" } } */\n+/* { dg-final { scan-ipa-dump \"fn_1 = { bar foo }\" \"pta2\" } } */\n+/* { dg-final { scan-ipa-dump \"bar.arg0 = { NONLOCAL a }\" \"pta2\" } } */\n+/* { dg-final { scan-ipa-dump \"bar.arg1 = { NONLOCAL a }\" \"pta2\" } } */\n+/* { dg-final { scan-ipa-dump \"foo.arg0 = { NONLOCAL a }\" \"pta2\" } } */\n+/* { dg-final { scan-ipa-dump \"foo.arg1 = { NONLOCAL a }\" \"pta2\" } } */"}, {"sha": "90b7bf8639d386ee921bf7d1552ef965f93e7a07", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-pta-10.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-10.c?ref=597a8ab9c6f57c416c2b0a734c2098fa0335e628", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fipa-pta -fdump-ipa-pta-details\" } */\n+/* { dg-options \"-O2 -fipa-pta -fdump-ipa-pta2-details\" } */\n \n #include <stdarg.h>\n \n@@ -26,4 +26,4 @@ int main()\n /* Verify we properly handle variadic arguments and do not let escape\n    stuff through it.  */\n \n-/* { dg-final { scan-ipa-dump \"ESCAPED = { (ESCAPED )?(NONLOCAL )?}\" \"pta\" } } */\n+/* { dg-final { scan-ipa-dump \"ESCAPED = { (ESCAPED )?(NONLOCAL )?}\" \"pta2\" } } */"}, {"sha": "9857d7b58eee9c0ab835969ecf086ef754c11aba", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-pta-11.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-11.c?ref=597a8ab9c6f57c416c2b0a734c2098fa0335e628", "patch": "@@ -1,25 +1,25 @@\n /* { dg-do link } */\n-/* { dg-options \"-O2 -fipa-pta -fdump-ipa-pta-details\" } */\n+/* { dg-options \"-O2 -fipa-pta -fdump-ipa-pta2-details\" } */\n \n static int i;\n /* i should not escape here, p should point to i only.  */\n-/* { dg-final { scan-ipa-dump \"p = { i }\" \"pta\" } } */\n+/* { dg-final { scan-ipa-dump \"p = { i }\" \"pta2\" } } */\n static int *p = &i;\n \n int j;\n /* q should point to j only.  */\n-/* { dg-final { scan-ipa-dump \"q = { j }\" \"pta\" } } */\n+/* { dg-final { scan-ipa-dump \"q = { j }\" \"pta2\" } } */\n static int *q = &j;\n \n static int k;\n /* k should escape here, r should point to NONLOCAL, ESCAPED, k.  */\n int *r = &k;\n-/* { dg-final { scan-ipa-dump \"r = { ESCAPED NONLOCAL k }\" \"pta\" } } */\n+/* { dg-final { scan-ipa-dump \"r = { ESCAPED NONLOCAL k }\" \"pta2\" } } */\n \n int l;\n /* s should point to NONLOCAL, ESCAPED, l.  */\n int *s = &l;\n-/* { dg-final { scan-ipa-dump \"s = { ESCAPED NONLOCAL l }\" \"pta\" } } */\n+/* { dg-final { scan-ipa-dump \"s = { ESCAPED NONLOCAL l }\" \"pta2\" } } */\n \n /* Make p and q referenced so they do not get optimized out.  */\n int foo() { return &p < &q; }\n@@ -32,4 +32,4 @@ int main()\n /* It isn't clear if the escape if l is strictly necessary, if it were\n    we should have i, r and s in ESCAPED as well.  */\n \n-/* { dg-final { scan-ipa-dump \"ESCAPED = { ESCAPED NONLOCAL l k }\" \"pta\" } } */\n+/* { dg-final { scan-ipa-dump \"ESCAPED = { ESCAPED NONLOCAL l k }\" \"pta2\" } } */"}, {"sha": "93dd87107cc0a62812fbf2c58f8e0bbae5dfa268", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-pta-13.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-13.c?ref=597a8ab9c6f57c416c2b0a734c2098fa0335e628", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do link } */\n-/* { dg-options \"-O2 -fipa-pta -fdump-ipa-pta-details -fdump-tree-fre2 -fno-ipa-icf\" } */\n+/* { dg-options \"-O2 -fipa-pta -fdump-ipa-pta2-details -fdump-tree-fre3 -fno-ipa-icf\" } */\n \n static int x, y;\n \n@@ -19,7 +19,7 @@ void *anyfn_global;\n \n /* Even though not referenced in this TU we should have added constraints\n    for the initializer.  */\n-/* { dg-final { scan-ipa-dump \"ex = &local_address_taken\" \"pta\" } } */\n+/* { dg-final { scan-ipa-dump \"ex = &local_address_taken\" \"pta2\" } } */\n void (*ex)(int *) = local_address_taken;\n \n extern void link_error (void);\n@@ -38,11 +38,11 @@ int main()\n      uses to be messed up even further.  */\n   /* ???  As we don't expand the ESCAPED solution we either get x printed here\n      or not based on the phase of the moon.  */\n-  /* { dg-final { scan-ipa-dump \"local_address_taken.arg0 = { ESCAPED NONLOCAL y x }\" \"pta\" { xfail *-*-* } } } */\n-  /* { dg-final { scan-ipa-dump \"local_address_taken.clobber = { ESCAPED NONLOCAL y x }\" \"pta\" { xfail *-*-* } } } */\n-  /* { dg-final { scan-ipa-dump \"local_address_taken.use = { }\" \"pta\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-ipa-dump \"local_address_taken.arg0 = { ESCAPED NONLOCAL y x }\" \"pta2\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-ipa-dump \"local_address_taken.clobber = { ESCAPED NONLOCAL y x }\" \"pta2\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-ipa-dump \"local_address_taken.use = { }\" \"pta2\" { xfail *-*-* } } } */\n   /* ??? But make sure x really escaped.  */\n-  /* { dg-final { scan-ipa-dump \"ESCAPED = {\\[^\\n\\}\\]* x \\[^\\n\\}\\]*}\" \"pta\" } } */\n+  /* { dg-final { scan-ipa-dump \"ESCAPED = {\\[^\\n\\}\\]* x \\[^\\n\\}\\]*}\" \"pta2\" } } */\n   (*anyfn) (&x);\n   x = 0;\n   local (&y);\n@@ -54,7 +54,7 @@ int main()\n   local_address_taken (&y);\n   /* As we are computing flow- and context-insensitive we may not\n      CSE the load of x here.  */\n-  /* { dg-final { scan-tree-dump \" = x;\" \"fre2\" } } */\n+  /* { dg-final { scan-tree-dump \" = x;\" \"fre3\" } } */\n   return x;\n }\n "}, {"sha": "cc2b9407dbaa719f782b5f51fef7523c9e4c059c", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-pta-14.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-14.c?ref=597a8ab9c6f57c416c2b0a734c2098fa0335e628", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fipa-pta -fno-tree-fre -fno-tree-sra -fdump-ipa-pta-details -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fipa-pta -fno-tree-fre -fno-tree-sra -fdump-ipa-pta2-details -fdelete-null-pointer-checks\" } */\n \n struct X {\n     int i;\n@@ -21,8 +21,8 @@ int main()\n   void *p;\n   a.p = (void *)&c;\n   p = foo(&a, &a);\n-  /* { dg-final { scan-ipa-dump \"foo.result = { NULL a\\[^ \\]* c\\[^ \\]* }\" \"pta\" { target { ! keeps_null_pointer_checks } } } } */\n-  /* { dg-final { scan-ipa-dump \"foo.result = { NONLOCAL a\\[^ \\]* c\\[^ \\]* }\" \"pta\" { target { keeps_null_pointer_checks } } } } */\n+  /* { dg-final { scan-ipa-dump \"foo.result = { NULL a\\[^ \\]* c\\[^ \\]* }\" \"pta2\" { target { ! keeps_null_pointer_checks } } } } */\n+  /* { dg-final { scan-ipa-dump \"foo.result = { NONLOCAL a\\[^ \\]* c\\[^ \\]* }\" \"pta2\" { target { keeps_null_pointer_checks } } } } */\n   ((struct X *)p)->p = (void *)0;\n   if (a.p != (void *)0)\n     abort ();"}, {"sha": "83b9cd8e1e37a4ab9d2f48e096b0e3906fa6eb80", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-pta-16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-16.c?ref=597a8ab9c6f57c416c2b0a734c2098fa0335e628", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fno-tree-sra -fipa-pta -fdump-ipa-pta\" } */\n+/* { dg-options \"-O2 -fno-tree-sra -fipa-pta -fdump-ipa-pta2\" } */\n \n struct X\n {\n@@ -29,4 +29,4 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-ipa-dump \"y.\\[0-9\\]*\\\\\\+\\[0-9\\]* = { i }\" \"pta\" } } */\n+/* { dg-final { scan-ipa-dump \"y.\\[0-9\\]*\\\\\\+\\[0-9\\]* = { i }\" \"pta2\" } } */"}, {"sha": "0cf2adfddd0ce884f09626b9a5878953dfb3b9af", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-pta-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-2.c?ref=597a8ab9c6f57c416c2b0a734c2098fa0335e628", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fipa-pta -fdump-ipa-pta-details\" } */\n+/* { dg-options \"-O -fipa-pta -fdump-ipa-pta2-details\" } */\n \n int (*fn)(int *);\n \n@@ -21,4 +21,4 @@ int main()\n /* Make sure that when a local function escapes its argument points-to sets\n    are properly adjusted.  */\n \n-/* { dg-final { scan-ipa-dump \"foo.arg0 = { ESCAPED NONLOCAL }\" \"pta\" } } */\n+/* { dg-final { scan-ipa-dump \"foo.arg0 = { ESCAPED NONLOCAL }\" \"pta2\" } } */"}, {"sha": "68c214443f6e59337bbda89916f43aaa17f58b4c", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-pta-3.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-3.c?ref=597a8ab9c6f57c416c2b0a734c2098fa0335e628", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fipa-pta -fdump-ipa-pta-details -fdump-tree-fre2-details\" } */\n+/* { dg-options \"-O2 -fipa-pta -fdump-ipa-pta2-details -fdump-tree-fre3-details\" } */\n \n static int __attribute__((noinline,noclone))\n foo (int *p, int *q)\n@@ -21,6 +21,6 @@ int main()\n \n /* Verify we can disambiguate *p and *q in foo.  */\n \n-/* { dg-final { scan-ipa-dump \"foo.arg0 = &a\" \"pta\" } } */\n-/* { dg-final { scan-ipa-dump \"foo.arg1 = &b\" \"pta\" } } */\n-/* { dg-final { scan-tree-dump \"Replaced \\\\\\*p_2\\\\\\(D\\\\\\) with 1\" \"fre2\" } } */\n+/* { dg-final { scan-ipa-dump \"foo.arg0 = &a\" \"pta2\" } } */\n+/* { dg-final { scan-ipa-dump \"foo.arg1 = &b\" \"pta2\" } } */\n+/* { dg-final { scan-tree-dump \"Replaced \\\\\\*p_2\\\\\\(D\\\\\\) with 1\" \"fre3\" } } */"}, {"sha": "2fc8ada72582dbbf6bb0189be3150005244648d0", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-pta-4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-4.c?ref=597a8ab9c6f57c416c2b0a734c2098fa0335e628", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fipa-pta -fdump-ipa-pta-details -fdump-tree-fre2-details\" } */\n+/* { dg-options \"-O2 -fipa-pta -fdump-ipa-pta2-details -fdump-tree-fre3-details\" } */\n \n int a, b;\n \n@@ -26,6 +26,6 @@ int main()\n \n /* Verify we can disambiguate *p and *q in foo.  */\n \n-/* { dg-final { scan-ipa-dump \"foo.arg0 = &a\" \"pta\" } } */\n-/* { dg-final { scan-ipa-dump \"foo.arg1 = &b\" \"pta\" } } */\n-/* { dg-final { scan-tree-dump \"Replaced \\\\\\*p_2\\\\\\(D\\\\\\) with 1\" \"fre2\" } } */\n+/* { dg-final { scan-ipa-dump \"foo.arg0 = &a\" \"pta2\" } } */\n+/* { dg-final { scan-ipa-dump \"foo.arg1 = &b\" \"pta2\" } } */\n+/* { dg-final { scan-tree-dump \"Replaced \\\\\\*p_2\\\\\\(D\\\\\\) with 1\" \"fre3\" } } */"}, {"sha": "ec12979375ccf0f6de6ff6c88745b627fd5c0065", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-pta-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-5.c?ref=597a8ab9c6f57c416c2b0a734c2098fa0335e628", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fipa-pta -fdump-ipa-pta-details\" } */\n+/* { dg-options \"-O2 -fipa-pta -fdump-ipa-pta2-details\" } */\n \n int **x;\n "}, {"sha": "8fd5a4387b0dcae7fc634ec59d8abe61ab7b8edc", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-pta-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-6.c?ref=597a8ab9c6f57c416c2b0a734c2098fa0335e628", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O -fipa-pta -fdump-ipa-pta-details\" } */\n+/* { dg-options \"-O -fipa-pta -fdump-ipa-pta2-details\" } */\n \n static void __attribute__((noinline,noclone))\n foo (int *p)\n@@ -21,4 +21,4 @@ int main()\n /* Verify we correctly compute the units ESCAPED set as empty but\n    still properly account for the store via *p in foo.  */\n \n-/* { dg-final { scan-ipa-dump \"ESCAPED = { }\" \"pta\" } } */\n+/* { dg-final { scan-ipa-dump \"ESCAPED = { }\" \"pta2\" } } */"}, {"sha": "1bf49974dac8b76606af18f19f830a0eb11e6a05", "filename": "gcc/testsuite/gcc.dg/torture/ipa-pta-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fipa-pta-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fipa-pta-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fipa-pta-1.c?ref=597a8ab9c6f57c416c2b0a734c2098fa0335e628", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target { nonpic } } } */\n-/* { dg-options \"-fipa-pta -fdump-ipa-pta -fno-ipa-icf\" } */\n+/* { dg-options \"-fipa-pta -fdump-ipa-pta2 -fno-ipa-icf\" } */\n /* { dg-skip-if \"\" { *-*-* } { \"-O0\" \"-fno-fat-lto-objects\" } { \"\" } } */\n \n struct X { char x; char y; };\n@@ -42,4 +42,4 @@ void test4 (int a4, char b, char c, char d, char e, char f, char g, char h)\n   bar (p);\n }\n \n-/* { dg-final { scan-ipa-dump \"bar.arg0 = { test4.arg0 test3.arg0 test2.arg0 test1.arg0 }\" \"pta\" } } */\n+/* { dg-final { scan-ipa-dump \"bar.arg0 = { test4.arg0 test3.arg0 test2.arg0 test1.arg0 }\" \"pta2\" } } */"}, {"sha": "c14217710304b5ab6fad239b7a946436ed3b4106", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=597a8ab9c6f57c416c2b0a734c2098fa0335e628", "patch": "@@ -469,7 +469,8 @@ extern gimple_opt_pass *make_pass_vtable_verify (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_ubsan (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_sanopt (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_oacc_kernels (gcc::context *ctxt);\n-extern gimple_opt_pass *make_pass_oacc_kernels2 (gcc::context *ctxt);\n+extern simple_ipa_opt_pass *make_pass_ipa_oacc (gcc::context *ctxt);\n+extern simple_ipa_opt_pass *make_pass_ipa_oacc_kernels (gcc::context *ctxt);\n \n /* IPA Passes */\n extern simple_ipa_opt_pass *make_pass_ipa_lower_emutls (gcc::context *ctxt);"}, {"sha": "1fe27162bd24f6b3b00a7da6f8eeb9108066245b", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 55, "deletions": 21, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=597a8ab9c6f57c416c2b0a734c2098fa0335e628", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-scalar-evolution.h\"\n #include \"tree-vectorizer.h\"\n #include \"omp-low.h\"\n+#include \"diagnostic-core.h\"\n \n \n /* A pass making sure loops are fixed up.  */\n@@ -206,12 +207,14 @@ make_pass_oacc_kernels (gcc::context *ctxt)\n   return new pass_oacc_kernels (ctxt);\n }\n \n+/* The ipa oacc superpass.  */\n+\n namespace {\n \n-const pass_data pass_data_oacc_kernels2 =\n+const pass_data pass_data_ipa_oacc =\n {\n-  GIMPLE_PASS, /* type */\n-  \"oacc_kernels2\", /* name */\n+  SIMPLE_IPA_PASS, /* type */\n+  \"ipa_oacc\", /* name */\n   OPTGROUP_LOOP, /* optinfo_flags */\n   TV_TREE_LOOP, /* tv_id */\n   PROP_cfg, /* properties_required */\n@@ -221,34 +224,65 @@ const pass_data pass_data_oacc_kernels2 =\n   0, /* todo_flags_finish */\n };\n \n-class pass_oacc_kernels2 : public gimple_opt_pass\n+class pass_ipa_oacc : public simple_ipa_opt_pass\n {\n public:\n-  pass_oacc_kernels2 (gcc::context *ctxt)\n-    : gimple_opt_pass (pass_data_oacc_kernels2, ctxt)\n+  pass_ipa_oacc (gcc::context *ctxt)\n+    : simple_ipa_opt_pass (pass_data_ipa_oacc, ctxt)\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *fn) { return gate_oacc_kernels (fn); }\n-  virtual unsigned int execute (function *fn)\n-    {\n-      /* Rather than having a copy of the previous dump, get some use out of\n-\t this dump, and try to minimize differences with the following pass\n-\t (pass_lim), which will initizalize the loop optimizer with\n-\t LOOPS_NORMAL.  */\n-      loop_optimizer_init (LOOPS_NORMAL);\n-      loop_optimizer_finalize (fn);\n-      return 0;\n-    }\n+  virtual bool gate (function *)\n+  {\n+    return (optimize\n+\t    /* Don't bother doing anything if the program has errors.  */\n+\t    && !seen_error ()\n+\t    && flag_openacc\n+\t    && flag_tree_parallelize_loops > 1);\n+  }\n \n-}; // class pass_oacc_kernels2\n+}; // class pass_ipa_oacc\n \n } // anon namespace\n \n-gimple_opt_pass *\n-make_pass_oacc_kernels2 (gcc::context *ctxt)\n+simple_ipa_opt_pass *\n+make_pass_ipa_oacc (gcc::context *ctxt)\n+{\n+  return new pass_ipa_oacc (ctxt);\n+}\n+\n+/* The ipa oacc kernels pass.  */\n+\n+namespace {\n+\n+const pass_data pass_data_ipa_oacc_kernels =\n+{\n+  SIMPLE_IPA_PASS, /* type */\n+  \"ipa_oacc_kernels\", /* name */\n+  OPTGROUP_LOOP, /* optinfo_flags */\n+  TV_TREE_LOOP, /* tv_id */\n+  PROP_cfg, /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  0, /* todo_flags_finish */\n+};\n+\n+class pass_ipa_oacc_kernels : public simple_ipa_opt_pass\n+{\n+public:\n+  pass_ipa_oacc_kernels (gcc::context *ctxt)\n+    : simple_ipa_opt_pass (pass_data_ipa_oacc_kernels, ctxt)\n+  {}\n+\n+}; // class pass_ipa_oacc_kernels\n+\n+} // anon namespace\n+\n+simple_ipa_opt_pass *\n+make_pass_ipa_oacc_kernels (gcc::context *ctxt)\n {\n-  return new pass_oacc_kernels2 (ctxt);\n+  return new pass_ipa_oacc_kernels (ctxt);\n }\n \n /* The no-loop superpass.  */"}, {"sha": "5f8c0b680322317b1bfaa9214d4016f0d064185d", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/597a8ab9c6f57c416c2b0a734c2098fa0335e628/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=597a8ab9c6f57c416c2b0a734c2098fa0335e628", "patch": "@@ -7821,6 +7821,8 @@ class pass_ipa_pta : public simple_ipa_opt_pass\n \t      && !seen_error ());\n     }\n \n+  opt_pass * clone () { return new pass_ipa_pta (m_ctxt); }\n+\n   virtual unsigned int execute (function *) { return ipa_pta_execute (); }\n \n }; // class pass_ipa_pta"}]}