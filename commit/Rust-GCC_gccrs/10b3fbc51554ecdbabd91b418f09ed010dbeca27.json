{"sha": "10b3fbc51554ecdbabd91b418f09ed010dbeca27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBiM2ZiYzUxNTU0ZWNkYmFiZDkxYjQxOGYwOWVkMDEwZGJlY2EyNw==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-02-19T12:32:40Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-02-19T12:32:40Z"}, "message": "Use new TRY_FINALLY_EXPR tree node.\n\nh\nUse new TRY_FINALLY_EXPR tree node.  See ChangeLog.\n\nFrom-SVN: r25313", "tree": {"sha": "0aaaf75cc8fa11e0d573ae386d82fd85f129447d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0aaaf75cc8fa11e0d573ae386d82fd85f129447d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10b3fbc51554ecdbabd91b418f09ed010dbeca27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10b3fbc51554ecdbabd91b418f09ed010dbeca27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10b3fbc51554ecdbabd91b418f09ed010dbeca27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10b3fbc51554ecdbabd91b418f09ed010dbeca27/comments", "author": null, "committer": null, "parents": [{"sha": "0a3af4d86cbcdb2fd11d4ca6580f572c3be673a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a3af4d86cbcdb2fd11d4ca6580f572c3be673a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a3af4d86cbcdb2fd11d4ca6580f572c3be673a6"}], "stats": {"total": 26, "additions": 5, "deletions": 21}, "files": [{"sha": "aeded3a41813aedd601e9191f36292f86edc2dc7", "filename": "gcc/java/expr.c", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10b3fbc51554ecdbabd91b418f09ed010dbeca27/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10b3fbc51554ecdbabd91b418f09ed010dbeca27/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=10b3fbc51554ecdbabd91b418f09ed010dbeca27", "patch": "@@ -1750,6 +1750,7 @@ java_lang_expand_expr (exp, target, tmode, modifier)\n {\n   tree current;\n   int has_finally_p;\n+  rtx op0;\n \n   switch (TREE_CODE (exp))\n     {\n@@ -1873,45 +1874,28 @@ java_lang_expand_expr (exp, target, tmode, modifier)\n       return const0_rtx;\n \n     case TRY_EXPR:\n-      /* We expand a try[-catch][-finally] block */\n+      /* We expand a try[-catch] block */\n \n       /* Expand the try block */\n       expand_eh_region_start ();\n       expand_expr_stmt (TREE_OPERAND (exp, 0));\n       expand_start_all_catch ();\n-      has_finally_p = (TREE_OPERAND (exp, 2) ? 1 : 0);\n \n       /* Expand all catch clauses (EH handlers) */\n       for (current = TREE_OPERAND (exp, 1); current; \n \t   current = TREE_CHAIN (current))\n \t{\n \t  extern rtx return_label;\n \t  tree type;\n-\t  /* If we have a finally, the last exception handler is the\n-\t     one that is supposed to catch everything. */\n-\t  if (has_finally_p && !TREE_CHAIN (current))\n-\t    type = NULL_TREE;\n-\t  else\n-\t    {\n-\t      tree catch = java_get_catch_block (current, has_finally_p);\n-\t      tree decl = BLOCK_EXPR_DECLS (catch);\n-\t      type = (decl ? TREE_TYPE (TREE_TYPE (decl)) : NULL_TREE);\n-\t    }\n+\t  tree catch = TREE_OPERAND (current, 0);\n+\t  tree decl = BLOCK_EXPR_DECLS (catch);\n+\t  type = (decl ? TREE_TYPE (TREE_TYPE (decl)) : NULL_TREE);\n \t  start_catch_handler (prepare_eh_table_type (type));\n \t  expand_expr_stmt (TREE_OPERAND (current, 0));\n \n \t  expand_resume_after_catch ();\n \t  end_catch_handler ();\n \t}\n-\n-      /* Expand the finally block, if any */\n-      if (has_finally_p)\n-\t{\n-\t  tree finally = TREE_OPERAND (exp, 2);\n-\t  if (FINALLY_EXPR_LABEL (finally))\n-\t    emit_label (label_rtx (FINALLY_EXPR_LABEL (finally)));\n-\t  expand_expr_stmt (FINALLY_EXPR_BLOCK (finally));\n-\t}\n       expand_end_all_catch ();\n       break;\n "}]}