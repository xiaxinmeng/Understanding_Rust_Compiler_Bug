{"sha": "5ce8d99a1b45692a14b4a8aaf5b481738bf95172", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNlOGQ5OWExYjQ1NjkyYTE0YjRhOGFhZjViNDgxNzM4YmY5NTE3Mg==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-11-16T12:40:24Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-11-16T12:40:24Z"}, "message": "Remove first_pass_instance from pass_dominator\n\n2015-11-16  Tom de Vries  <tom@codesourcery.com>\n\n\t* passes.def: Add arg to pass_dominator pass instantiation.\n\t* tree-pass.h (first_pass_instance): Remove pass_dominator-related bit\n\tof comment.\n\t* tree-ssa-dom.c (pass_dominator::pass_dominator): Initialize\n\tmay_peel_loop_headers_p.\n\t(pass_dominator::set_pass_param): New member function.  Set\n\tmay_peel_loop_headers_p.\n\t(pass_dominator::may_peel_loop_headers_p): New private member.\n\t(pass_dominator::execute): Use may_peel_loop_headers_p instead of\n\tfirst_pass_instance.\n\nFrom-SVN: r230417", "tree": {"sha": "fa576c46796bf106c419ef642f60d7c8277203e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa576c46796bf106c419ef642f60d7c8277203e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ce8d99a1b45692a14b4a8aaf5b481738bf95172", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce8d99a1b45692a14b4a8aaf5b481738bf95172", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ce8d99a1b45692a14b4a8aaf5b481738bf95172", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce8d99a1b45692a14b4a8aaf5b481738bf95172/comments", "author": null, "committer": null, "parents": [{"sha": "2162bfe15e549b125b8183fc5f3d6e1d05ef5c98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2162bfe15e549b125b8183fc5f3d6e1d05ef5c98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2162bfe15e549b125b8183fc5f3d6e1d05ef5c98"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "3ab8e652cedc75f56ac09c3bee136d43f1a50fe9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce8d99a1b45692a14b4a8aaf5b481738bf95172/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce8d99a1b45692a14b4a8aaf5b481738bf95172/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ce8d99a1b45692a14b4a8aaf5b481738bf95172", "patch": "@@ -1,3 +1,16 @@\n+2015-11-16  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* passes.def: Add arg to pass_dominator pass instantiation.\n+\t* tree-pass.h (first_pass_instance): Remove pass_dominator-related bit\n+\tof comment.\n+\t* tree-ssa-dom.c (pass_dominator::pass_dominator): Initialize\n+\tmay_peel_loop_headers_p.\n+\t(pass_dominator::set_pass_param): New member function.  Set\n+\tmay_peel_loop_headers_p.\n+\t(pass_dominator::may_peel_loop_headers_p): New private member.\n+\t(pass_dominator::execute): Use may_peel_loop_headers_p instead of\n+\tfirst_pass_instance.\n+\n 2015-11-16  Tom de Vries  <tom@codesourcery.com>\n \n \t* passes.def: Add arg to pass_reassoc pass instantiation."}, {"sha": "d274a950d9b3754d23ab0bb3328efa6841954fe5", "filename": "gcc/passes.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce8d99a1b45692a14b4a8aaf5b481738bf95172/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce8d99a1b45692a14b4a8aaf5b481738bf95172/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=5ce8d99a1b45692a14b4a8aaf5b481738bf95172", "patch": "@@ -190,7 +190,7 @@ along with GCC; see the file COPYING3.  If not see\n \t propagations have already run, but before some more dead code\n \t is removed, and this place fits nicely.  Remember this when\n \t trying to move or duplicate pass_dominator somewhere earlier.  */\n-      NEXT_PASS (pass_dominator);\n+      NEXT_PASS (pass_dominator, true /* may_peel_loop_headers_p */);\n       /* At this point the majority of const/copy propagations\n \t are exposed.  Go ahead and identify paths that should never\n \t be executed in a conforming program and isolate those paths.\n@@ -279,7 +279,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_reassoc, false /* insert_powi_p */);\n       NEXT_PASS (pass_strength_reduction);\n       NEXT_PASS (pass_tracer);\n-      NEXT_PASS (pass_dominator);\n+      NEXT_PASS (pass_dominator, false /* may_peel_loop_headers_p */);\n       NEXT_PASS (pass_strlen);\n       NEXT_PASS (pass_vrp, false /* warn_array_bounds_p */);\n       /* The only const/copy propagation opportunities left after"}, {"sha": "d647e730a3e819a8c535e6d0ea3bebaae6faab19", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce8d99a1b45692a14b4a8aaf5b481738bf95172/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce8d99a1b45692a14b4a8aaf5b481738bf95172/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=5ce8d99a1b45692a14b4a8aaf5b481738bf95172", "patch": "@@ -631,11 +631,8 @@ extern bool function_called_by_processed_nodes_p (void);\n \n /* Set to true if the pass is called the first time during compilation of the\n    current function.  Note that using this information in the optimization\n-   passes is considered not to be clean, and it should be avoided if possible.\n-   This flag is currently used to prevent loops from being peeled repeatedly\n-   in jump threading; it will be removed once we preserve loop structures\n-   throughout the compilation -- we will be able to mark the affected loops\n-   directly in jump threading, and avoid peeling them next time.  */\n+   passes is considered not to be clean, and it should be avoided if\n+   possible.  */\n extern bool first_pass_instance;\n \n /* Declare for plugins.  */"}, {"sha": "aeb726c9bdbb6883e535694580a3865205cc20cb", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce8d99a1b45692a14b4a8aaf5b481738bf95172/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce8d99a1b45692a14b4a8aaf5b481738bf95172/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=5ce8d99a1b45692a14b4a8aaf5b481738bf95172", "patch": "@@ -536,14 +536,26 @@ class pass_dominator : public gimple_opt_pass\n {\n public:\n   pass_dominator (gcc::context *ctxt)\n-    : gimple_opt_pass (pass_data_dominator, ctxt)\n+    : gimple_opt_pass (pass_data_dominator, ctxt),\n+      may_peel_loop_headers_p (false)\n   {}\n \n   /* opt_pass methods: */\n   opt_pass * clone () { return new pass_dominator (m_ctxt); }\n+  void set_pass_param (unsigned int n, bool param)\n+    {\n+      gcc_assert (n == 0);\n+      may_peel_loop_headers_p = param;\n+    }\n   virtual bool gate (function *) { return flag_tree_dom != 0; }\n   virtual unsigned int execute (function *);\n \n+ private:\n+  /* This flag is used to prevent loops from being peeled repeatedly in jump\n+     threading; it will be removed once we preserve loop structures throughout\n+     the compilation -- we will be able to mark the affected loops directly in\n+     jump threading, and avoid peeling them next time.  */\n+  bool may_peel_loop_headers_p;\n }; // class pass_dominator\n \n unsigned int\n@@ -619,7 +631,7 @@ pass_dominator::execute (function *fun)\n   free_all_edge_infos ();\n \n   /* Thread jumps, creating duplicate blocks as needed.  */\n-  cfg_altered |= thread_through_all_blocks (first_pass_instance);\n+  cfg_altered |= thread_through_all_blocks (may_peel_loop_headers_p);\n \n   if (cfg_altered)\n     free_dominance_info (CDI_DOMINATORS);"}]}