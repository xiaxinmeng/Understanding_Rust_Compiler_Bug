{"sha": "99cf78cf2e2c84bf60f8eeba1403465fb414691e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTljZjc4Y2YyZTJjODRiZjYwZjhlZWJhMTQwMzQ2NWZiNDE0NjkxZQ==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2019-02-25T17:48:55Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2019-02-25T17:48:55Z"}, "message": "Arm: Update Armv8.4-a's FP16 FML intrinsics \n\nThis patch updates the Armv8.4-a FP16 FML intrinsics's suffixes from u32 to f16\nto be more consistent with the naming convention for intrinsics.\n\nThe specifications for these intrinsics have not been published yet so we do\nnot need to maintain the old names.\n\nThe patch was created with the following script:\n\ngrep -lIE \"(vfml[as].+)_u32\" -r gcc/ | grep -iEv \".+Changelog.*\" \\\n  | xargs sed -i -E -e \"s/(vfml[as].+)_u32/\\1_f16/g\" \n\ngcc/ChangeLog:\n\n\t* config/arm/arm_neon.h (vfmlal_low_u32, vfmlsl_low_u32,\n\tvfmlal_high_u32, vfmlsl_high_u32, vfmlalq_low_u32, vfmlslq_low_u32,\n\tvfmlalq_high_u32, vfmlslq_high_u32, vfmlal_lane_low_u32,\n\tvfmlal_lane_high_u32, vfmlalq_laneq_low_u32, vfmlalq_lane_low_u32,\n\tvfmlal_laneq_low_u32, vfmlalq_laneq_high_u32, vfmlalq_lane_high_u32,\n\tvfmlal_laneq_high_u32, vfmlsl_lane_low_u32, vfmlsl_lane_high_u32,\n\tvfmlslq_laneq_low_u32, vfmlslq_lane_low_u32, vfmlsl_laneq_low_u32,\n\tvfmlslq_laneq_high_u32, vfmlslq_lane_high_u32, vfmlsl_laneq_high_u32):\n\tRename ...\n\t(vfmlal_low_f16, vfmlsl_low_f16, vfmlal_high_f16, vfmlsl_high_f16,\n\tvfmlalq_low_f16, vfmlslq_low_f16, vfmlalq_high_f16, vfmlslq_high_f16,\n\tvfmlal_lane_low_f16, vfmlal_lane_high_f16, vfmlalq_laneq_low_f16,\n\tvfmlalq_lane_low_f16, vfmlal_laneq_low_f16, vfmlalq_laneq_high_f16,\n\tvfmlalq_lane_high_f16, vfmlal_laneq_high_f16, vfmlsl_lane_low_f16,\n\tvfmlsl_lane_high_f16, vfmlslq_laneq_low_f16, vfmlslq_lane_low_f16,\n\tvfmlsl_laneq_low_f16, vfmlslq_laneq_high_f16, vfmlslq_lane_high_f16,\n\tvfmlsl_laneq_high_f16): ... To this.\n\t* config/arm/neon.md: Update comments.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/simd/fp16fml_high.c (test_vfmlal_high_u32,\n\ttest_vfmlalq_high_u32, test_vfmlsl_high_u32, test_vfmlslq_high_u32):\n\tRename ....\n\t(test_vfmlal_high_f16, test_vfmlalq_high_f16, test_vfmlsl_high_f16,\n\ttest_vfmlslq_high_f16): ... To this.\n\t* gcc.target/arm/simd/fp16fml_lane_high.c (test_vfmlal_lane_high_u32,\n\ttets_vfmlsl_lane_high_u32, test_vfmlal_laneq_high_u32,\n\ttest_vfmlsl_laneq_high_u32, test_vfmlalq_lane_high_u32,\n\ttest_vfmlslq_lane_high_u32, test_vfmlalq_laneq_high_u32,\n\ttest_vfmlslq_laneq_high_u32): Rename ...\n\t(test_vfmlal_lane_high_f16, tets_vfmlsl_lane_high_f16,\n\ttest_vfmlal_laneq_high_f16, test_vfmlsl_laneq_high_f16,\n\ttest_vfmlalq_lane_high_f16, test_vfmlslq_lane_high_f16,\n\ttest_vfmlalq_laneq_high_f16, test_vfmlslq_laneq_high_f16): ... To this.\n\t* gcc.target/arm/simd/fp16fml_lane_low.c (test_vfmlal_lane_low_u32,\n\ttest_vfmlsl_lane_low_u32, test_vfmlal_laneq_low_u32,\n\ttest_vfmlsl_laneq_low_u32, test_vfmlalq_lane_low_u32,\n\ttest_vfmlslq_lane_low_u32, test_vfmlalq_laneq_low_u32,\n\ttest_vfmlslq_laneq_low_u32): Rename ...\n\t(test_vfmlal_lane_low_f16, test_vfmlsl_lane_low_f16,\n\ttest_vfmlal_laneq_low_f16, test_vfmlsl_laneq_low_f16,\n\ttest_vfmlalq_lane_low_f16, test_vfmlslq_lane_low_f16,\n\ttest_vfmlalq_laneq_low_f16, test_vfmlslq_laneq_low_f16): ... To this.\n\t* gcc.target/arm/simd/fp16fml_low.c (test_vfmlal_low_u32,\n\ttest_vfmlalq_low_u32, test_vfmlsl_low_u32, test_vfmlslq_low_u32):\n\tRename ...\n\t(test_vfmlal_low_f16, test_vfmlalq_low_f16, test_vfmlsl_low_f16,\n\ttest_vfmlslq_low_f16): ... To this.\n\nFrom-SVN: r269192", "tree": {"sha": "d0bac49a7b4d52655d3b711aa35b7123be8fe6c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0bac49a7b4d52655d3b711aa35b7123be8fe6c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99cf78cf2e2c84bf60f8eeba1403465fb414691e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99cf78cf2e2c84bf60f8eeba1403465fb414691e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99cf78cf2e2c84bf60f8eeba1403465fb414691e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99cf78cf2e2c84bf60f8eeba1403465fb414691e/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9d04c986b6faed878dbcc86d2f9392a721a3936e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d04c986b6faed878dbcc86d2f9392a721a3936e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d04c986b6faed878dbcc86d2f9392a721a3936e"}], "stats": {"total": 212, "additions": 132, "deletions": 80}, "files": [{"sha": "9e338ad49396bd0662374a52420cd8db06d6f04a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99cf78cf2e2c84bf60f8eeba1403465fb414691e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99cf78cf2e2c84bf60f8eeba1403465fb414691e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99cf78cf2e2c84bf60f8eeba1403465fb414691e", "patch": "@@ -1,3 +1,24 @@\n+2019-02-25  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/arm/arm_neon.h (vfmlal_low_u32, vfmlsl_low_u32,\n+\tvfmlal_high_u32, vfmlsl_high_u32, vfmlalq_low_u32, vfmlslq_low_u32,\n+\tvfmlalq_high_u32, vfmlslq_high_u32, vfmlal_lane_low_u32,\n+\tvfmlal_lane_high_u32, vfmlalq_laneq_low_u32, vfmlalq_lane_low_u32,\n+\tvfmlal_laneq_low_u32, vfmlalq_laneq_high_u32, vfmlalq_lane_high_u32,\n+\tvfmlal_laneq_high_u32, vfmlsl_lane_low_u32, vfmlsl_lane_high_u32,\n+\tvfmlslq_laneq_low_u32, vfmlslq_lane_low_u32, vfmlsl_laneq_low_u32,\n+\tvfmlslq_laneq_high_u32, vfmlslq_lane_high_u32, vfmlsl_laneq_high_u32):\n+\tRename ...\n+\t(vfmlal_low_f16, vfmlsl_low_f16, vfmlal_high_f16, vfmlsl_high_f16,\n+\tvfmlalq_low_f16, vfmlslq_low_f16, vfmlalq_high_f16, vfmlslq_high_f16,\n+\tvfmlal_lane_low_f16, vfmlal_lane_high_f16, vfmlalq_laneq_low_f16,\n+\tvfmlalq_lane_low_f16, vfmlal_laneq_low_f16, vfmlalq_laneq_high_f16,\n+\tvfmlalq_lane_high_f16, vfmlal_laneq_high_f16, vfmlsl_lane_low_f16,\n+\tvfmlsl_lane_high_f16, vfmlslq_laneq_low_f16, vfmlslq_lane_low_f16,\n+\tvfmlsl_laneq_low_f16, vfmlslq_laneq_high_f16, vfmlslq_lane_high_f16,\n+\tvfmlsl_laneq_high_f16): ... To this.\n+\t* config/arm/neon.md: Update comments.\n+\n 2019-02-25  Tamar Christina  <tamar.christina@arm.com>\n \n \t* config/aarch64/arm_neon.h (vfmlal_low_u32, vfmlsl_low_u32,"}, {"sha": "6b982392ece69bb245ffd3bdc34d09c6f01745eb", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99cf78cf2e2c84bf60f8eeba1403465fb414691e/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99cf78cf2e2c84bf60f8eeba1403465fb414691e/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=99cf78cf2e2c84bf60f8eeba1403465fb414691e", "patch": "@@ -18106,63 +18106,63 @@ vdotq_lane_s32 (int32x4_t __r, int8x16_t __a, int8x8_t __b, const int __index)\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlal_low_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b)\n+vfmlal_low_f16 (float32x2_t __r, float16x4_t __a, float16x4_t __b)\n {\n   return __builtin_neon_vfmal_lowv2sf (__r, __a, __b);\n }\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlsl_low_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b)\n+vfmlsl_low_f16 (float32x2_t __r, float16x4_t __a, float16x4_t __b)\n {\n   return __builtin_neon_vfmsl_lowv2sf (__r, __a, __b);\n }\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlal_high_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b)\n+vfmlal_high_f16 (float32x2_t __r, float16x4_t __a, float16x4_t __b)\n {\n   return __builtin_neon_vfmal_highv2sf (__r, __a, __b);\n }\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlsl_high_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b)\n+vfmlsl_high_f16 (float32x2_t __r, float16x4_t __a, float16x4_t __b)\n {\n   return __builtin_neon_vfmsl_highv2sf (__r, __a, __b);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlalq_low_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b)\n+vfmlalq_low_f16 (float32x4_t __r, float16x8_t __a, float16x8_t __b)\n {\n   return __builtin_neon_vfmal_lowv4sf (__r, __a, __b);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlslq_low_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b)\n+vfmlslq_low_f16 (float32x4_t __r, float16x8_t __a, float16x8_t __b)\n {\n   return __builtin_neon_vfmsl_lowv4sf (__r, __a, __b);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlalq_high_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b)\n+vfmlalq_high_f16 (float32x4_t __r, float16x8_t __a, float16x8_t __b)\n {\n   return __builtin_neon_vfmal_highv4sf (__r, __a, __b);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlslq_high_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b)\n+vfmlslq_high_f16 (float32x4_t __r, float16x8_t __a, float16x8_t __b)\n {\n   return __builtin_neon_vfmsl_highv4sf (__r, __a, __b);\n }\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlal_lane_low_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b,\n+vfmlal_lane_low_f16 (float32x2_t __r, float16x4_t __a, float16x4_t __b,\n \t\t     const int __index)\n {\n   __builtin_arm_lane_check (4, __index);\n@@ -18171,7 +18171,7 @@ vfmlal_lane_low_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b,\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlal_lane_high_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b,\n+vfmlal_lane_high_f16 (float32x2_t __r, float16x4_t __a, float16x4_t __b,\n \t\t      const int __index)\n {\n   __builtin_arm_lane_check (4, __index);\n@@ -18180,7 +18180,7 @@ vfmlal_lane_high_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b,\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlalq_laneq_low_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b,\n+vfmlalq_laneq_low_f16 (float32x4_t __r, float16x8_t __a, float16x8_t __b,\n \t\t       const int __index)\n {\n   __builtin_arm_lane_check (8, __index);\n@@ -18189,7 +18189,7 @@ vfmlalq_laneq_low_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b,\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlalq_lane_low_u32 (float32x4_t __r, float16x8_t __a, float16x4_t __b,\n+vfmlalq_lane_low_f16 (float32x4_t __r, float16x8_t __a, float16x4_t __b,\n \t\t       const int __index)\n {\n   __builtin_arm_lane_check (4, __index);\n@@ -18198,7 +18198,7 @@ vfmlalq_lane_low_u32 (float32x4_t __r, float16x8_t __a, float16x4_t __b,\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlal_laneq_low_u32 (float32x2_t __r, float16x4_t __a, float16x8_t __b,\n+vfmlal_laneq_low_f16 (float32x2_t __r, float16x4_t __a, float16x8_t __b,\n \t\t       const int __index)\n {\n   __builtin_arm_lane_check (8, __index);\n@@ -18207,7 +18207,7 @@ vfmlal_laneq_low_u32 (float32x2_t __r, float16x4_t __a, float16x8_t __b,\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlalq_laneq_high_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b,\n+vfmlalq_laneq_high_f16 (float32x4_t __r, float16x8_t __a, float16x8_t __b,\n \t\t\tconst int __index)\n {\n   __builtin_arm_lane_check (8, __index);\n@@ -18216,7 +18216,7 @@ vfmlalq_laneq_high_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b,\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlalq_lane_high_u32 (float32x4_t __r, float16x8_t __a, float16x4_t __b,\n+vfmlalq_lane_high_f16 (float32x4_t __r, float16x8_t __a, float16x4_t __b,\n \t\t       const int __index)\n {\n   __builtin_arm_lane_check (4, __index);\n@@ -18225,7 +18225,7 @@ vfmlalq_lane_high_u32 (float32x4_t __r, float16x8_t __a, float16x4_t __b,\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlal_laneq_high_u32 (float32x2_t __r, float16x4_t __a, float16x8_t __b,\n+vfmlal_laneq_high_f16 (float32x2_t __r, float16x4_t __a, float16x8_t __b,\n \t\t       const int __index)\n {\n   __builtin_arm_lane_check (8, __index);\n@@ -18234,7 +18234,7 @@ vfmlal_laneq_high_u32 (float32x2_t __r, float16x4_t __a, float16x8_t __b,\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlsl_lane_low_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b,\n+vfmlsl_lane_low_f16 (float32x2_t __r, float16x4_t __a, float16x4_t __b,\n \t\t     const int __index)\n {\n   __builtin_arm_lane_check (4, __index);\n@@ -18243,7 +18243,7 @@ vfmlsl_lane_low_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b,\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlsl_lane_high_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b,\n+vfmlsl_lane_high_f16 (float32x2_t __r, float16x4_t __a, float16x4_t __b,\n \t\t      const int __index)\n {\n   __builtin_arm_lane_check (4, __index);\n@@ -18252,7 +18252,7 @@ vfmlsl_lane_high_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b,\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlslq_laneq_low_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b,\n+vfmlslq_laneq_low_f16 (float32x4_t __r, float16x8_t __a, float16x8_t __b,\n \t\t       const int __index)\n {\n   __builtin_arm_lane_check (8, __index);\n@@ -18261,7 +18261,7 @@ vfmlslq_laneq_low_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b,\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlslq_lane_low_u32 (float32x4_t __r, float16x8_t __a, float16x4_t __b,\n+vfmlslq_lane_low_f16 (float32x4_t __r, float16x8_t __a, float16x4_t __b,\n \t\t       const int __index)\n {\n   __builtin_arm_lane_check (4, __index);\n@@ -18270,7 +18270,7 @@ vfmlslq_lane_low_u32 (float32x4_t __r, float16x8_t __a, float16x4_t __b,\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlsl_laneq_low_u32 (float32x2_t __r, float16x4_t __a, float16x8_t __b,\n+vfmlsl_laneq_low_f16 (float32x2_t __r, float16x4_t __a, float16x8_t __b,\n \t\t       const int __index)\n {\n   __builtin_arm_lane_check (8, __index);\n@@ -18279,7 +18279,7 @@ vfmlsl_laneq_low_u32 (float32x2_t __r, float16x4_t __a, float16x8_t __b,\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlslq_laneq_high_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b,\n+vfmlslq_laneq_high_f16 (float32x4_t __r, float16x8_t __a, float16x8_t __b,\n \t\t\tconst int __index)\n {\n   __builtin_arm_lane_check (8, __index);\n@@ -18288,7 +18288,7 @@ vfmlslq_laneq_high_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b,\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlslq_lane_high_u32 (float32x4_t __r, float16x8_t __a, float16x4_t __b,\n+vfmlslq_lane_high_f16 (float32x4_t __r, float16x8_t __a, float16x4_t __b,\n \t\t       const int __index)\n {\n   __builtin_arm_lane_check (4, __index);\n@@ -18297,7 +18297,7 @@ vfmlslq_lane_high_u32 (float32x4_t __r, float16x8_t __a, float16x4_t __b,\n \n __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vfmlsl_laneq_high_u32 (float32x2_t __r, float16x4_t __a, float16x8_t __b,\n+vfmlsl_laneq_high_f16 (float32x2_t __r, float16x4_t __a, float16x8_t __b,\n \t\t       const int __index)\n {\n   __builtin_arm_lane_check (8, __index);"}, {"sha": "48556d9dd5fa71aad532cba241007488e2e24349", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99cf78cf2e2c84bf60f8eeba1403465fb414691e/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99cf78cf2e2c84bf60f8eeba1403465fb414691e/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=99cf78cf2e2c84bf60f8eeba1403465fb414691e", "patch": "@@ -2473,8 +2473,8 @@\n })\n \n ;; Used to implement the intrinsics:\n-;; float32x4_t vfmlalq_lane_low_u32 (float32x4_t r, float16x8_t a, float16x4_t b, const int lane)\n-;; float32x2_t vfmlal_laneq_low_u32 (float32x2_t r, float16x4_t a, float16x8_t b, const int lane)\n+;; float32x4_t vfmlalq_lane_low_f16 (float32x4_t r, float16x8_t a, float16x4_t b, const int lane)\n+;; float32x2_t vfmlal_laneq_low_f16 (float32x2_t r, float16x4_t a, float16x8_t b, const int lane)\n ;; Needs a bit of care to get the modes of the different sub-expressions right\n ;; due to 'a' and 'b' having different sizes and make sure we use the right\n ;; S or D subregister to select the appropriate lane from.\n@@ -2510,8 +2510,8 @@\n )\n \n ;; Used to implement the intrinsics:\n-;; float32x4_t vfmlalq_lane_high_u32 (float32x4_t r, float16x8_t a, float16x4_t b, const int lane)\n-;; float32x2_t vfmlal_laneq_high_u32 (float32x2_t r, float16x4_t a, float16x8_t b, const int lane)\n+;; float32x4_t vfmlalq_lane_high_f16 (float32x4_t r, float16x8_t a, float16x4_t b, const int lane)\n+;; float32x2_t vfmlal_laneq_high_f16 (float32x2_t r, float16x4_t a, float16x8_t b, const int lane)\n ;; Needs a bit of care to get the modes of the different sub-expressions right\n ;; due to 'a' and 'b' having different sizes and make sure we use the right\n ;; S or D subregister to select the appropriate lane from.\n@@ -2607,8 +2607,8 @@\n )\n \n ;; Used to implement the intrinsics:\n-;; float32x4_t vfmlslq_lane_low_u32 (float32x4_t r, float16x8_t a, float16x4_t b, const int lane)\n-;; float32x2_t vfmlsl_laneq_low_u32 (float32x2_t r, float16x4_t a, float16x8_t b, const int lane)\n+;; float32x4_t vfmlslq_lane_low_f16 (float32x4_t r, float16x8_t a, float16x4_t b, const int lane)\n+;; float32x2_t vfmlsl_laneq_low_f16 (float32x2_t r, float16x4_t a, float16x8_t b, const int lane)\n ;; Needs a bit of care to get the modes of the different sub-expressions right\n ;; due to 'a' and 'b' having different sizes and make sure we use the right\n ;; S or D subregister to select the appropriate lane from.\n@@ -2645,8 +2645,8 @@\n )\n \n ;; Used to implement the intrinsics:\n-;; float32x4_t vfmlslq_lane_high_u32 (float32x4_t r, float16x8_t a, float16x4_t b, const int lane)\n-;; float32x2_t vfmlsl_laneq_high_u32 (float32x2_t r, float16x4_t a, float16x8_t b, const int lane)\n+;; float32x4_t vfmlslq_lane_high_f16 (float32x4_t r, float16x8_t a, float16x4_t b, const int lane)\n+;; float32x2_t vfmlsl_laneq_high_f16 (float32x2_t r, float16x4_t a, float16x8_t b, const int lane)\n ;; Needs a bit of care to get the modes of the different sub-expressions right\n ;; due to 'a' and 'b' having different sizes and make sure we use the right\n ;; S or D subregister to select the appropriate lane from."}, {"sha": "2322fb31b7d408c95bd29d49cb3602d10dcc247d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99cf78cf2e2c84bf60f8eeba1403465fb414691e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99cf78cf2e2c84bf60f8eeba1403465fb414691e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=99cf78cf2e2c84bf60f8eeba1403465fb414691e", "patch": "@@ -1,3 +1,34 @@\n+2019-02-25  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/arm/simd/fp16fml_high.c (test_vfmlal_high_u32,\n+\ttest_vfmlalq_high_u32, test_vfmlsl_high_u32, test_vfmlslq_high_u32):\n+\tRename ....\n+\t(test_vfmlal_high_f16, test_vfmlalq_high_f16, test_vfmlsl_high_f16,\n+\ttest_vfmlslq_high_f16): ... To this.\n+\t* gcc.target/arm/simd/fp16fml_lane_high.c (test_vfmlal_lane_high_u32,\n+\ttets_vfmlsl_lane_high_u32, test_vfmlal_laneq_high_u32,\n+\ttest_vfmlsl_laneq_high_u32, test_vfmlalq_lane_high_u32,\n+\ttest_vfmlslq_lane_high_u32, test_vfmlalq_laneq_high_u32,\n+\ttest_vfmlslq_laneq_high_u32): Rename ...\n+\t(test_vfmlal_lane_high_f16, tets_vfmlsl_lane_high_f16,\n+\ttest_vfmlal_laneq_high_f16, test_vfmlsl_laneq_high_f16,\n+\ttest_vfmlalq_lane_high_f16, test_vfmlslq_lane_high_f16,\n+\ttest_vfmlalq_laneq_high_f16, test_vfmlslq_laneq_high_f16): ... To this.\n+\t* gcc.target/arm/simd/fp16fml_lane_low.c (test_vfmlal_lane_low_u32,\n+\ttest_vfmlsl_lane_low_u32, test_vfmlal_laneq_low_u32,\n+\ttest_vfmlsl_laneq_low_u32, test_vfmlalq_lane_low_u32,\n+\ttest_vfmlslq_lane_low_u32, test_vfmlalq_laneq_low_u32,\n+\ttest_vfmlslq_laneq_low_u32): Rename ...\n+\t(test_vfmlal_lane_low_f16, test_vfmlsl_lane_low_f16,\n+\ttest_vfmlal_laneq_low_f16, test_vfmlsl_laneq_low_f16,\n+\ttest_vfmlalq_lane_low_f16, test_vfmlslq_lane_low_f16,\n+\ttest_vfmlalq_laneq_low_f16, test_vfmlslq_laneq_low_f16): ... To this.\n+\t* gcc.target/arm/simd/fp16fml_low.c (test_vfmlal_low_u32,\n+\ttest_vfmlalq_low_u32, test_vfmlsl_low_u32, test_vfmlslq_low_u32):\n+\tRename ...\n+\t(test_vfmlal_low_f16, test_vfmlalq_low_f16, test_vfmlsl_low_f16,\n+\ttest_vfmlslq_low_f16): ... To this.\n+\n 2019-02-25  Tamar Christina  <tamar.christina@arm.com>\n \n \t* gcc.target/aarch64/fp16_fmul_high.h (test_vfmlal_high_u32,"}, {"sha": "054700e6a9688768fb624be34b741dd6e35920e6", "filename": "gcc/testsuite/gcc.target/arm/simd/fp16fml_high.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99cf78cf2e2c84bf60f8eeba1403465fb414691e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Ffp16fml_high.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99cf78cf2e2c84bf60f8eeba1403465fb414691e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Ffp16fml_high.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Ffp16fml_high.c?ref=99cf78cf2e2c84bf60f8eeba1403465fb414691e", "patch": "@@ -5,27 +5,27 @@\n #include \"arm_neon.h\"\n \n float32x2_t\n-test_vfmlal_high_u32 (float32x2_t r, float16x4_t a, float16x4_t b)\n+test_vfmlal_high_f16 (float32x2_t r, float16x4_t a, float16x4_t b)\n {\n-  return vfmlal_high_u32 (r, a, b);\n+  return vfmlal_high_f16 (r, a, b);\n }\n \n float32x4_t\n-test_vfmlalq_high_u32 (float32x4_t r, float16x8_t a, float16x8_t b)\n+test_vfmlalq_high_f16 (float32x4_t r, float16x8_t a, float16x8_t b)\n {\n-  return vfmlalq_high_u32 (r, a, b);\n+  return vfmlalq_high_f16 (r, a, b);\n }\n \n float32x2_t\n-test_vfmlsl_high_u32 (float32x2_t r, float16x4_t a, float16x4_t b)\n+test_vfmlsl_high_f16 (float32x2_t r, float16x4_t a, float16x4_t b)\n {\n-  return vfmlsl_high_u32 (r, a, b);\n+  return vfmlsl_high_f16 (r, a, b);\n }\n \n float32x4_t\n-test_vfmlslq_high_u32 (float32x4_t r, float16x8_t a, float16x8_t b)\n+test_vfmlslq_high_f16 (float32x4_t r, float16x8_t a, float16x8_t b)\n {\n-  return vfmlslq_high_u32 (r, a, b);\n+  return vfmlslq_high_f16 (r, a, b);\n }\n \n /* { dg-final { scan-assembler-times {vfmal.f16\\td[0-9]+, s[123]?[13579], s[123]?[13579]} 1 } } */"}, {"sha": "eadac5206048ede6d8723c811e6da40ce50e2f73", "filename": "gcc/testsuite/gcc.target/arm/simd/fp16fml_lane_high.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99cf78cf2e2c84bf60f8eeba1403465fb414691e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Ffp16fml_lane_high.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99cf78cf2e2c84bf60f8eeba1403465fb414691e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Ffp16fml_lane_high.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Ffp16fml_lane_high.c?ref=99cf78cf2e2c84bf60f8eeba1403465fb414691e", "patch": "@@ -5,51 +5,51 @@\n #include \"arm_neon.h\"\n \n float32x2_t\n-test_vfmlal_lane_high_u32 (float32x2_t r, float16x4_t a, float16x4_t b)\n+test_vfmlal_lane_high_f16 (float32x2_t r, float16x4_t a, float16x4_t b)\n {\n-  return vfmlal_lane_high_u32 (r, a, b, 0);\n+  return vfmlal_lane_high_f16 (r, a, b, 0);\n }\n \n float32x2_t\n-tets_vfmlsl_lane_high_u32  (float32x2_t r, float16x4_t a, float16x4_t b)\n+tets_vfmlsl_lane_high_f16  (float32x2_t r, float16x4_t a, float16x4_t b)\n {\n-  return vfmlsl_lane_high_u32 (r, a, b, 0);\n+  return vfmlsl_lane_high_f16 (r, a, b, 0);\n }\n \n float32x2_t\n-test_vfmlal_laneq_high_u32 (float32x2_t r, float16x4_t a, float16x8_t b)\n+test_vfmlal_laneq_high_f16 (float32x2_t r, float16x4_t a, float16x8_t b)\n {\n-  return vfmlal_laneq_high_u32 (r, a, b, 6);\n+  return vfmlal_laneq_high_f16 (r, a, b, 6);\n }\n \n float32x2_t\n-test_vfmlsl_laneq_high_u32 (float32x2_t r, float16x4_t a, float16x8_t b)\n+test_vfmlsl_laneq_high_f16 (float32x2_t r, float16x4_t a, float16x8_t b)\n {\n-  return vfmlsl_laneq_high_u32 (r, a, b, 6);\n+  return vfmlsl_laneq_high_f16 (r, a, b, 6);\n }\n \n float32x4_t\n-test_vfmlalq_lane_high_u32 (float32x4_t r, float16x8_t a, float16x4_t b)\n+test_vfmlalq_lane_high_f16 (float32x4_t r, float16x8_t a, float16x4_t b)\n {\n-  return vfmlalq_lane_high_u32 (r, a, b, 1);\n+  return vfmlalq_lane_high_f16 (r, a, b, 1);\n }\n \n float32x4_t\n-test_vfmlslq_lane_high_u32 (float32x4_t r, float16x8_t a, float16x4_t b)\n+test_vfmlslq_lane_high_f16 (float32x4_t r, float16x8_t a, float16x4_t b)\n {\n-  return vfmlslq_lane_high_u32 (r, a, b, 1);\n+  return vfmlslq_lane_high_f16 (r, a, b, 1);\n }\n \n float32x4_t\n-test_vfmlalq_laneq_high_u32  (float32x4_t r, float16x8_t a, float16x8_t b)\n+test_vfmlalq_laneq_high_f16  (float32x4_t r, float16x8_t a, float16x8_t b)\n {\n-  return vfmlalq_laneq_high_u32 (r, a, b, 7);\n+  return vfmlalq_laneq_high_f16 (r, a, b, 7);\n }\n \n float32x4_t\n-test_vfmlslq_laneq_high_u32 (float32x4_t r, float16x8_t a, float16x8_t b)\n+test_vfmlslq_laneq_high_f16 (float32x4_t r, float16x8_t a, float16x8_t b)\n {\n-  return vfmlslq_laneq_high_u32 (r, a, b, 7);\n+  return vfmlslq_laneq_high_f16 (r, a, b, 7);\n }\n \n /* { dg-final { scan-assembler-times {vfmal.f16\\td[0-9]+, s[123]?[13579], s[123]?[02468]\\[0\\]} 1 } } */"}, {"sha": "72d3b8a68205be7e62ec57f681a1b4c88b5b3ae8", "filename": "gcc/testsuite/gcc.target/arm/simd/fp16fml_lane_low.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99cf78cf2e2c84bf60f8eeba1403465fb414691e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Ffp16fml_lane_low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99cf78cf2e2c84bf60f8eeba1403465fb414691e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Ffp16fml_lane_low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Ffp16fml_lane_low.c?ref=99cf78cf2e2c84bf60f8eeba1403465fb414691e", "patch": "@@ -5,51 +5,51 @@\n #include \"arm_neon.h\"\n \n float32x2_t\n-test_vfmlal_lane_low_u32 (float32x2_t r, float16x4_t a, float16x4_t b)\n+test_vfmlal_lane_low_f16 (float32x2_t r, float16x4_t a, float16x4_t b)\n {\n-  return vfmlal_lane_low_u32 (r, a, b, 0);\n+  return vfmlal_lane_low_f16 (r, a, b, 0);\n }\n \n float32x2_t\n-test_vfmlsl_lane_low_u32 (float32x2_t r, float16x4_t a, float16x4_t b)\n+test_vfmlsl_lane_low_f16 (float32x2_t r, float16x4_t a, float16x4_t b)\n {\n-  return vfmlsl_lane_low_u32 (r, a, b, 0);\n+  return vfmlsl_lane_low_f16 (r, a, b, 0);\n }\n \n float32x2_t\n-test_vfmlal_laneq_low_u32 (float32x2_t r, float16x4_t a, float16x8_t b)\n+test_vfmlal_laneq_low_f16 (float32x2_t r, float16x4_t a, float16x8_t b)\n {\n-  return vfmlal_laneq_low_u32 (r, a, b, 6);\n+  return vfmlal_laneq_low_f16 (r, a, b, 6);\n }\n \n float32x2_t\n-test_vfmlsl_laneq_low_u32 (float32x2_t r, float16x4_t a, float16x8_t b)\n+test_vfmlsl_laneq_low_f16 (float32x2_t r, float16x4_t a, float16x8_t b)\n {\n-  return vfmlsl_laneq_low_u32 (r, a, b, 6);\n+  return vfmlsl_laneq_low_f16 (r, a, b, 6);\n }\n \n float32x4_t\n-test_vfmlalq_lane_low_u32 (float32x4_t r, float16x8_t a, float16x4_t b)\n+test_vfmlalq_lane_low_f16 (float32x4_t r, float16x8_t a, float16x4_t b)\n {\n-  return vfmlalq_lane_low_u32 (r, a, b, 1);\n+  return vfmlalq_lane_low_f16 (r, a, b, 1);\n }\n \n float32x4_t\n-test_vfmlslq_lane_low_u32 (float32x4_t r, float16x8_t a, float16x4_t b)\n+test_vfmlslq_lane_low_f16 (float32x4_t r, float16x8_t a, float16x4_t b)\n {\n-  return vfmlslq_lane_low_u32 (r, a, b, 1);\n+  return vfmlslq_lane_low_f16 (r, a, b, 1);\n }\n \n float32x4_t\n-test_vfmlalq_laneq_low_u32 (float32x4_t r, float16x8_t a, float16x8_t b)\n+test_vfmlalq_laneq_low_f16 (float32x4_t r, float16x8_t a, float16x8_t b)\n {\n-  return vfmlalq_laneq_low_u32 (r, a, b, 7);\n+  return vfmlalq_laneq_low_f16 (r, a, b, 7);\n }\n \n float32x4_t\n-test_vfmlslq_laneq_low_u32 (float32x4_t r, float16x8_t a, float16x8_t b)\n+test_vfmlslq_laneq_low_f16 (float32x4_t r, float16x8_t a, float16x8_t b)\n {\n-  return vfmlslq_laneq_low_u32 (r, a, b, 7);\n+  return vfmlslq_laneq_low_f16 (r, a, b, 7);\n }\n \n /* { dg-final { scan-assembler-times {vfmal.f16\\td[0-9]+, s[123]?[02468], s[123]?[02468]\\[0\\]} 1 } } */"}, {"sha": "64ba18b65fcbb6410b06cb17abc2fa087baf4f8f", "filename": "gcc/testsuite/gcc.target/arm/simd/fp16fml_low.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99cf78cf2e2c84bf60f8eeba1403465fb414691e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Ffp16fml_low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99cf78cf2e2c84bf60f8eeba1403465fb414691e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Ffp16fml_low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Ffp16fml_low.c?ref=99cf78cf2e2c84bf60f8eeba1403465fb414691e", "patch": "@@ -5,27 +5,27 @@\n #include \"arm_neon.h\"\n \n float32x2_t\n-test_vfmlal_low_u32 (float32x2_t r, float16x4_t a, float16x4_t b)\n+test_vfmlal_low_f16 (float32x2_t r, float16x4_t a, float16x4_t b)\n {\n-  return vfmlal_low_u32 (r, a, b);\n+  return vfmlal_low_f16 (r, a, b);\n }\n \n float32x4_t\n-test_vfmlalq_low_u32 (float32x4_t r, float16x8_t a, float16x8_t b)\n+test_vfmlalq_low_f16 (float32x4_t r, float16x8_t a, float16x8_t b)\n {\n-  return vfmlalq_low_u32 (r, a, b);\n+  return vfmlalq_low_f16 (r, a, b);\n }\n \n float32x2_t\n-test_vfmlsl_low_u32 (float32x2_t r, float16x4_t a, float16x4_t b)\n+test_vfmlsl_low_f16 (float32x2_t r, float16x4_t a, float16x4_t b)\n {\n-  return vfmlsl_low_u32 (r, a, b);\n+  return vfmlsl_low_f16 (r, a, b);\n }\n \n float32x4_t\n-test_vfmlslq_low_u32 (float32x4_t r, float16x8_t a, float16x8_t b)\n+test_vfmlslq_low_f16 (float32x4_t r, float16x8_t a, float16x8_t b)\n {\n-  return vfmlslq_low_u32 (r, a, b);\n+  return vfmlslq_low_f16 (r, a, b);\n }\n \n /* { dg-final { scan-assembler-times {vfmal.f16\\td[0-9]+, s[123]?[02468], s[123]?[02468]} 1 } } */"}]}