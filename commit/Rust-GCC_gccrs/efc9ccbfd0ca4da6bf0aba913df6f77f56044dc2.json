{"sha": "efc9ccbfd0ca4da6bf0aba913df6f77f56044dc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZjOWNjYmZkMGNhNGRhNmJmMGFiYTkxM2RmNmY3N2Y1NjA0NGRjMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-27T09:08:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-27T09:08:46Z"}, "message": "varpool: Restore GENERIC TREE_READONLY automatic var optimization [PR7260]\n\nIn 4.8 and earlier we used to fold the following to 0 during GENERIC folding,\nbut we don't do that anymore because ctor_for_folding etc. has been turned into a\nGIMPLE centric API, but as the testcase shows, it is invoked even during\nGENERIC folding and there the automatic vars still should have meaningful\ninitializers.  I've verified that the C++ FE drops TREE_READONLY on\nautomatic vars with const qualified types if they require non-constant\n(runtime) initialization.\n\n2021-01-27  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/97260\n\t* varpool.c: Include tree-pass.h.\n\t(ctor_for_folding): In GENERIC return DECL_INITIAL for TREE_READONLY\n\tnon-TREE_SIDE_EFFECTS automatic variables.\n\n\t* gcc.dg/tree-ssa/pr97260.c: New test.", "tree": {"sha": "c146b34a47d8ca6cb39ee98c939acb426514a8cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c146b34a47d8ca6cb39ee98c939acb426514a8cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efc9ccbfd0ca4da6bf0aba913df6f77f56044dc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc9ccbfd0ca4da6bf0aba913df6f77f56044dc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efc9ccbfd0ca4da6bf0aba913df6f77f56044dc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc9ccbfd0ca4da6bf0aba913df6f77f56044dc2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e62bb7f083470ccdadbd83ef885c6fe1e5cb9e67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e62bb7f083470ccdadbd83ef885c6fe1e5cb9e67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e62bb7f083470ccdadbd83ef885c6fe1e5cb9e67"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "9b3723b7834b9f6878d2c87e85b0a4194b146c53", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr97260.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc9ccbfd0ca4da6bf0aba913df6f77f56044dc2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr97260.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc9ccbfd0ca4da6bf0aba913df6f77f56044dc2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr97260.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr97260.c?ref=efc9ccbfd0ca4da6bf0aba913df6f77f56044dc2", "patch": "@@ -0,0 +1,11 @@\n+/* PR tree-optimization/97260 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump \"return 0;\" \"optimized\" } } */\n+\n+int\n+foo (void)\n+{\n+  const char a[] = \"1234\";\n+  return __builtin_memcmp (a, \"1234\", 4);\n+}"}, {"sha": "86f16052984dca486c8098ae14cf2f5caa849823", "filename": "gcc/varpool.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc9ccbfd0ca4da6bf0aba913df6f77f56044dc2/gcc%2Fvarpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc9ccbfd0ca4da6bf0aba913df6f77f56044dc2/gcc%2Fvarpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarpool.c?ref=efc9ccbfd0ca4da6bf0aba913df6f77f56044dc2", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"context.h\"\n #include \"stringpool.h\"\n #include \"attribs.h\"\n+#include \"tree-pass.h\"\n \n const char * const tls_model_names[]={\"none\", \"emulated\",\n \t\t\t\t      \"global-dynamic\", \"local-dynamic\",\n@@ -412,6 +413,13 @@ ctor_for_folding (tree decl)\n   if (!TREE_STATIC (decl) && !DECL_EXTERNAL (decl))\n     {\n       gcc_assert (!TREE_PUBLIC (decl));\n+      /* Unless this is called during FE folding.  */\n+      if (cfun\n+\t  && (cfun->curr_properties & (PROP_trees | PROP_rtl)) == 0\n+\t  && TREE_READONLY (decl)\n+\t  && !TREE_SIDE_EFFECTS (decl)\n+\t  && DECL_INITIAL (decl))\n+\treturn DECL_INITIAL (decl);\n       return error_mark_node;\n     }\n "}]}