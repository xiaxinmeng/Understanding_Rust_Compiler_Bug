{"sha": "26ef2b4293ed8aa1d1cea04015d6d06dce5fd9d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZlZjJiNDI5M2VkOGFhMWQxY2VhMDQwMTVkNmQwNmRjZTVmZDlkNQ==", "commit": {"author": {"name": "Daniel Kraft", "email": "d@domob.eu", "date": "2009-08-30T08:26:38Z"}, "committer": {"name": "Daniel Kraft", "email": "domob@gcc.gnu.org", "date": "2009-08-30T08:26:38Z"}, "message": "re PR fortran/37425 (Fortran 2003: GENERIC bindings as operators)\n\n2009-08-30  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/37425\n\t* dump-parse-tree.c (show_typebound_proc): Renamed from `show_typebound'\n\tand accept gfc_typebound_proc and name instead of the symtree, needed\n\tfor intrinsic operator output.\n\t(show_typebound_symtree): New method calling `show_typebound_proc'.\n\t(show_f2k_derived): Output type-bound operators also.\n\t(show_symbol): Moved output of `Procedure bindings:' label to\n\t`show_f2k_derived'.\n\t* gfortran.texi (Fortran 2003 status): Mention support of\n\tarray-constructors with explicit type specification, type-bound\n\tprocedures/operators, type extension, ABSTRACT types and DEFERRED.\n\tLink to Fortran 2003 wiki page.\n\t(Fortran 2008 status): Fix typo.  Link to Fortran 2008 wiki page.\n\t* gfc-internals.texi (Type-bound Procedures): Document the new\n\tmembers/attributes of gfc_expr.value.compcall used for type-bound\n\toperators.\n\t(Type-bound Operators): New section documenting their internals.\n\nFrom-SVN: r151224", "tree": {"sha": "a54c588fffd2ceebd2ab2fa64e58b480a2adb719", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a54c588fffd2ceebd2ab2fa64e58b480a2adb719"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26ef2b4293ed8aa1d1cea04015d6d06dce5fd9d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ef2b4293ed8aa1d1cea04015d6d06dce5fd9d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26ef2b4293ed8aa1d1cea04015d6d06dce5fd9d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ef2b4293ed8aa1d1cea04015d6d06dce5fd9d5/comments", "author": {"login": "domob1812", "id": 4943644, "node_id": "MDQ6VXNlcjQ5NDM2NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domob1812", "html_url": "https://github.com/domob1812", "followers_url": "https://api.github.com/users/domob1812/followers", "following_url": "https://api.github.com/users/domob1812/following{/other_user}", "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}", "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions", "organizations_url": "https://api.github.com/users/domob1812/orgs", "repos_url": "https://api.github.com/users/domob1812/repos", "events_url": "https://api.github.com/users/domob1812/events{/privacy}", "received_events_url": "https://api.github.com/users/domob1812/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "79f60dbcdafe5f356dc7d0a0c6acb3a17d96a17f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79f60dbcdafe5f356dc7d0a0c6acb3a17d96a17f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79f60dbcdafe5f356dc7d0a0c6acb3a17d96a17f"}], "stats": {"total": 153, "additions": 130, "deletions": 23}, "files": [{"sha": "ce732e07c412a9de1bdb9c05cafc4954bdb94ffc", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ef2b4293ed8aa1d1cea04015d6d06dce5fd9d5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ef2b4293ed8aa1d1cea04015d6d06dce5fd9d5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=26ef2b4293ed8aa1d1cea04015d6d06dce5fd9d5", "patch": "@@ -1,3 +1,23 @@\n+2009-08-30  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/37425\n+\t* dump-parse-tree.c (show_typebound_proc): Renamed from `show_typebound'\n+\tand accept gfc_typebound_proc and name instead of the symtree, needed\n+\tfor intrinsic operator output.\n+\t(show_typebound_symtree): New method calling `show_typebound_proc'.\n+\t(show_f2k_derived): Output type-bound operators also.\n+\t(show_symbol): Moved output of `Procedure bindings:' label to\n+\t`show_f2k_derived'.\n+\t* gfortran.texi (Fortran 2003 status): Mention support of\n+\tarray-constructors with explicit type specification, type-bound\n+\tprocedures/operators, type extension, ABSTRACT types and DEFERRED.\n+\tLink to Fortran 2003 wiki page.\n+\t(Fortran 2008 status): Fix typo.  Link to Fortran 2008 wiki page.\n+\t* gfc-internals.texi (Type-bound Procedures): Document the new\n+\tmembers/attributes of gfc_expr.value.compcall used for type-bound\n+\toperators.\n+\t(Type-bound Operators): New section documenting their internals.\n+\n 2009-08-27  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/40869"}, {"sha": "8480e40593a2ab53d6259c11ccb1d44ac03c3620", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 38, "deletions": 18, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ef2b4293ed8aa1d1cea04015d6d06dce5fd9d5/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ef2b4293ed8aa1d1cea04015d6d06dce5fd9d5/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=26ef2b4293ed8aa1d1cea04015d6d06dce5fd9d5", "patch": "@@ -680,55 +680,64 @@ show_components (gfc_symbol *sym)\n /* Show the f2k_derived namespace with procedure bindings.  */\n \n static void\n-show_typebound (gfc_symtree* st)\n+show_typebound_proc (gfc_typebound_proc* tb, const char* name)\n {\n-  gcc_assert (st->n.tb);\n   show_indent ();\n \n-  if (st->n.tb->is_generic)\n+  if (tb->is_generic)\n     fputs (\"GENERIC\", dumpfile);\n   else\n     {\n       fputs (\"PROCEDURE, \", dumpfile);\n-      if (st->n.tb->nopass)\n+      if (tb->nopass)\n \tfputs (\"NOPASS\", dumpfile);\n       else\n \t{\n-\t  if (st->n.tb->pass_arg)\n-\t    fprintf (dumpfile, \"PASS(%s)\", st->n.tb->pass_arg);\n+\t  if (tb->pass_arg)\n+\t    fprintf (dumpfile, \"PASS(%s)\", tb->pass_arg);\n \t  else\n \t    fputs (\"PASS\", dumpfile);\n \t}\n-      if (st->n.tb->non_overridable)\n+      if (tb->non_overridable)\n \tfputs (\", NON_OVERRIDABLE\", dumpfile);\n     }\n \n-  if (st->n.tb->access == ACCESS_PUBLIC)\n+  if (tb->access == ACCESS_PUBLIC)\n     fputs (\", PUBLIC\", dumpfile);\n   else\n     fputs (\", PRIVATE\", dumpfile);\n \n-  fprintf (dumpfile, \" :: %s => \", st->name);\n+  fprintf (dumpfile, \" :: %s => \", name);\n \n-  if (st->n.tb->is_generic)\n+  if (tb->is_generic)\n     {\n       gfc_tbp_generic* g;\n-      for (g = st->n.tb->u.generic; g; g = g->next)\n+      for (g = tb->u.generic; g; g = g->next)\n \t{\n \t  fputs (g->specific_st->name, dumpfile);\n \t  if (g->next)\n \t    fputs (\", \", dumpfile);\n \t}\n     }\n   else\n-    fputs (st->n.tb->u.specific->n.sym->name, dumpfile);\n+    fputs (tb->u.specific->n.sym->name, dumpfile);\n+}\n+\n+static void\n+show_typebound_symtree (gfc_symtree* st)\n+{\n+  gcc_assert (st->n.tb);\n+  show_typebound_proc (st->n.tb, st->name);\n }\n \n static void\n show_f2k_derived (gfc_namespace* f2k)\n {\n   gfc_finalizer* f;\n+  int op;\n \n+  show_indent ();\n+  fputs (\"Procedure bindings:\", dumpfile);\n   ++show_level;\n \n   /* Finalizer bindings.  */\n@@ -739,7 +748,22 @@ show_f2k_derived (gfc_namespace* f2k)\n     }\n \n   /* Type-bound procedures.  */\n-  gfc_traverse_symtree (f2k->tb_sym_root, &show_typebound);\n+  gfc_traverse_symtree (f2k->tb_sym_root, &show_typebound_symtree);\n+\n+  --show_level;\n+\n+  show_indent ();\n+  fputs (\"Operator bindings:\", dumpfile);\n+  ++show_level;\n+\n+  /* User-defined operators.  */\n+  gfc_traverse_symtree (f2k->tb_uop_root, &show_typebound_symtree);\n+\n+  /* Intrinsic operators.  */\n+  for (op = GFC_INTRINSIC_BEGIN; op != GFC_INTRINSIC_END; ++op)\n+    if (f2k->tb_op[op])\n+      show_typebound_proc (f2k->tb_op[op],\n+\t\t\t   gfc_op2string ((gfc_intrinsic_op) op));\n \n   --show_level;\n }\n@@ -801,11 +825,7 @@ show_symbol (gfc_symbol *sym)\n     }\n \n   if (sym->f2k_derived)\n-    {\n-      show_indent ();\n-      fputs (\"Procedure bindings:\\n\", dumpfile);\n-      show_f2k_derived (sym->f2k_derived);\n-    }\n+    show_f2k_derived (sym->f2k_derived);\n \n   if (sym->formal)\n     {"}, {"sha": "8a55b8f5c8cab83cd8ba272f75e1ecd9b330f4d1", "filename": "gcc/fortran/gfc-internals.texi", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ef2b4293ed8aa1d1cea04015d6d06dce5fd9d5/gcc%2Ffortran%2Fgfc-internals.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ef2b4293ed8aa1d1cea04015d6d06dce5fd9d5/gcc%2Ffortran%2Fgfc-internals.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfc-internals.texi?ref=26ef2b4293ed8aa1d1cea04015d6d06dce5fd9d5", "patch": "@@ -31,7 +31,8 @@\n @c @end tex\n \n @copying\n-Copyright @copyright{} @value{copyrights-gfortran} Free Software Foundation, Inc.\n+Copyright @copyright{} @value{copyrights-gfortran} Free Software Foundation,\n+Inc.\n \n Permission is granted to copy, distribute and/or modify this document\n under the terms of the GNU Free Documentation License, Version 1.2 or\n@@ -568,6 +569,7 @@ substring reference as described in the subsection above.\n \n @menu\n * Type-bound Procedures:: Type-bound procedures.\n+* Type-bound Operators::  Type-bound operators.\n @end menu\n \n \n@@ -652,6 +654,50 @@ expression of type @code{EXPR_COMPCALL} of the same structure as mentioned above\n except that its target procedure is of course a @code{SUBROUTINE} and not a\n @code{FUNCTION}.\n \n+Expressions that are generated internally (as expansion of a type-bound\n+operator call) may also use additional flags and members.\n+@code{value.compcall.ignore_pass} signals that even though a @code{PASS}\n+attribute may be present the actual argument list should not be updated because\n+it already contains the passed-object.\n+@code{value.compcall.base_object} overrides, if it is set, the base-object\n+(that is normally stored in @code{symtree} and @code{ref} as mentioned above);\n+this is needed because type-bound operators can be called on a base-object that\n+need not be of type @code{EXPR_VARIABLE} and thus representable in this way.\n+Finally, if @code{value.compcall.assign} is set, the call was produced in\n+expansion of a type-bound assignment; this means that proper dependency-checking\n+needs to be done when relevant.\n+\n+\n+@c Type-bound operators\n+@c --------------------\n+\n+@node Type-bound Operators\n+@section Type-bound Operators\n+\n+Type-bound operators are in fact basically just @code{GENERIC} procedure\n+bindings and are represented much in the same way as those (see\n+@ref{Type-bound Procedures}).\n+\n+They come in two flavours:\n+User-defined operators (like @code{.MYOPERATOR.})\n+are stored in the @code{f2k_derived} namespace's @code{tb_uop_root}\n+symtree exactly like ordinary type-bound procedures are stored in\n+@code{tb_sym_root}; their symtrees' names are the operator-names (e.g.\n+@samp{myoperator} in the example).\n+Intrinsic operators on the other hand are stored in the namespace's\n+array member @code{tb_op} indexed by the intrinsic operator's enum\n+value.  Those need not be packed into @code{gfc_symtree} structures and are\n+only @code{gfc_typebound_proc} instances.\n+\n+When an operator call or assignment is found that can not be handled in\n+another way (i.e. neither matches an intrinsic nor interface operator\n+definition) but that contains a derived-type expression, all type-bound\n+operators defined on that derived-type are checked for a match with\n+the operator call.  If there's indeed a relevant definition, the\n+operator call is replaced with an internally generated @code{GENERIC}\n+type-bound procedure call to the respective definition and that call is\n+further processed.\n+\n \n @c ---------------------------------------------------------------------\n @c LibGFortran"}, {"sha": "c4992ef2bceda208d86e144b241ea6bbbf031bc0", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ef2b4293ed8aa1d1cea04015d6d06dce5fd9d5/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ef2b4293ed8aa1d1cea04015d6d06dce5fd9d5/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=26ef2b4293ed8aa1d1cea04015d6d06dce5fd9d5", "patch": "@@ -808,7 +808,8 @@ was used.\n @section Fortran 2003 status\n \n GNU Fortran supports several Fortran 2003 features; an incomplete\n-list can be found below.\n+list can be found below.  See also the\n+@uref{http://gcc.gnu.org/wiki/Fortran2003, wiki page} about Fortran 2003.\n \n @itemize\n @item \n@@ -820,7 +821,8 @@ Intrinsics @code{command_argument_count}, @code{get_command},\n @cindex array, constructors\n @cindex @code{[...]}\n Array constructors using square brackets. That is, @code{[...]} rather\n-than @code{(/.../)}.\n+than @code{(/.../)}.  Type-specification for array constructors like\n+@code{(/ some-type :: ... /)}.\n \n @item\n @cindex @code{FLUSH} statement\n@@ -912,7 +914,23 @@ Renaming of operators in the @code{USE} statement.\n Interoperability with C (ISO C Bindings)\n \n @item\n-BOZ as argument of INT, REAL, DBLE and CMPLX.\n+BOZ as argument of @code{INT}, @code{REAL}, @code{DBLE} and @code{CMPLX}.\n+\n+@item\n+@cindex type-bound procedure\n+@cindex type-bound operator\n+Type-bound procedures with @code{PROCEDURE} or @code{GENERIC}, and operators\n+bound to a derived-type.\n+\n+@item\n+@cindex @code{EXTENDS}\n+@cindex derived-type extension\n+Extension of derived-types (the @code{EXTENDS(...)} syntax).\n+\n+@item\n+@cindex @code{ABSTRACT} type\n+@cindex @code{DEFERRED} procedure binding\n+@code{ABSTRACT} derived-types and declaring procedure bindings @code{DEFERRED}.\n \n @end itemize\n \n@@ -924,7 +942,7 @@ The next version of the Fortran standard after Fortran 2003 is currently\n being worked on by the Working Group 5 of Sub-Committee 22 of the Joint\n Technical Committee 1 of the International Organization for\n Standardization (ISO) and the International Electrotechnical Commission\n-(IEC). This group is known at @uref{http://www.nag.co.uk/sc22wg5/, WG5}.\n+(IEC). This group is known as @uref{http://www.nag.co.uk/sc22wg5/, WG5}.\n The next revision of the Fortran standard is informally referred to as\n Fortran 2008, reflecting its planned release year. The GNU Fortran\n compiler has support for some of the new features in Fortran 2008. This\n@@ -933,6 +951,9 @@ support is based on the latest draft, available from\n differ from the drafts, no guarantee of backward compatibility can be\n made and you should only use it for experimental purposes.\n \n+The @uref{http://gcc.gnu.org/wiki/Fortran2008Status, wiki} has some information\n+about the current Fortran 2008 implementation status.\n+\n \n @c ---------------------------------------------------------------------\n @c Compiler Characteristics"}]}