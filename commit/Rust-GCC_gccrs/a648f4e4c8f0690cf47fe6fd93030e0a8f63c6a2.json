{"sha": "a648f4e4c8f0690cf47fe6fd93030e0a8f63c6a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY0OGY0ZTRjOGYwNjkwY2Y0N2ZlNmZkOTMwMzBlMGE4ZjYzYzZhMg==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "2001-02-19T22:48:16Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-02-19T22:48:16Z"}, "message": "parse.y (parser_check_super_interface): Don't call check_pkg_class_access for an inner interface.\n\n\t* parse.y (parser_check_super_interface): Don't call\n\tcheck_pkg_class_access for an inner interface.\n\t(parser_check_super): Don't call check_pkg_class_access for inner\n\tclass.\n\t(do_resolve_class): Simplify enclosing type loop. Don't call\n\tcheck_pkg_class_access if CL and DECL are not set.\n\t(find_in_imports_on_demand): Set DECL if class_type needed to be\n\tloaded. Don't call check_pkg_class_access for an inner class.\n\t(check_inner_class_access): Rewritten to implement member access\n\trules as per spec 6.6.1.\n\t(check_pkg_class_access): Handle the empty package correctly.\n\t(in_same_package): New function. Determine if two classes are in the\n\tsame package.\n\nFrom-SVN: r39909", "tree": {"sha": "dc1b2d13ca87935b5267bbcdcabc2bda48c99151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc1b2d13ca87935b5267bbcdcabc2bda48c99151"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a648f4e4c8f0690cf47fe6fd93030e0a8f63c6a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a648f4e4c8f0690cf47fe6fd93030e0a8f63c6a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a648f4e4c8f0690cf47fe6fd93030e0a8f63c6a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a648f4e4c8f0690cf47fe6fd93030e0a8f63c6a2/comments", "author": null, "committer": null, "parents": [{"sha": "2c0fc02de295b3d3eebdf0ff6120de5cab010435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c0fc02de295b3d3eebdf0ff6120de5cab010435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c0fc02de295b3d3eebdf0ff6120de5cab010435"}], "stats": {"total": 187, "additions": 146, "deletions": 41}, "files": [{"sha": "4a74ae7214e42298281af3bf79ebff9811f13c15", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a648f4e4c8f0690cf47fe6fd93030e0a8f63c6a2/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a648f4e4c8f0690cf47fe6fd93030e0a8f63c6a2/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=a648f4e4c8f0690cf47fe6fd93030e0a8f63c6a2", "patch": "@@ -1,3 +1,19 @@\n+2001-02-19  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\t* parse.y (parser_check_super_interface): Don't call \n+\tcheck_pkg_class_access for an inner interface.\n+\t(parser_check_super): Don't call check_pkg_class_access for inner \n+\tclass.\n+\t(do_resolve_class): Simplify enclosing type loop. Don't call \n+\tcheck_pkg_class_access if CL and DECL are not set.\n+\t(find_in_imports_on_demand): Set DECL if class_type needed to be\n+\tloaded. Don't call check_pkg_class_access for an inner class.\n+\t(check_inner_class_access): Rewritten to implement member access\n+\trules as per spec 6.6.1.\n+\t(check_pkg_class_access): Handle the empty package correctly.\n+\t(in_same_package): New function. Determine if two classes are in the\n+\tsame package.\n+\n 2001-02-18  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* typeck.c (build_java_array_type): Don't try to poke a public `clone'"}, {"sha": "971a8876cc2f6f8bb5eb6bb814027f35a1e642b4", "filename": "gcc/java/parse.y", "status": "modified", "additions": 130, "deletions": 41, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a648f4e4c8f0690cf47fe6fd93030e0a8f63c6a2/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a648f4e4c8f0690cf47fe6fd93030e0a8f63c6a2/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=a648f4e4c8f0690cf47fe6fd93030e0a8f63c6a2", "patch": "@@ -127,6 +127,7 @@ static int check_class_interface_creation PARAMS ((int, int, tree,\n static tree patch_method_invocation PARAMS ((tree, tree, tree, int,\n \t\t\t\t\t    int *, tree *));\n static int breakdown_qualified PARAMS ((tree *, tree *, tree));\n+static int in_same_package PARAMS ((tree, tree));\n static tree resolve_and_layout PARAMS ((tree, tree));\n static tree qualify_and_find PARAMS ((tree, tree, tree));\n static tree resolve_no_layout PARAMS ((tree, tree));\n@@ -4895,8 +4896,10 @@ parser_check_super_interface (super_decl, this_decl, this_wfl)\n       return 1;\n     }\n \n-  /* Check scope: same package OK, other package: OK if public */\n-  if (check_pkg_class_access (DECL_NAME (super_decl), lookup_cl (this_decl)))\n+  /* Check top-level interface access. Inner classes are subject to member \n+     access rules (6.6.1). */\n+  if (! INNER_CLASS_P (super_type)\n+      && check_pkg_class_access (DECL_NAME (super_decl), lookup_cl (this_decl)))\n     return 1;\n \n   SOURCE_FRONTEND_DEBUG ((\"Completing interface %s with %s\",\n@@ -4932,8 +4935,10 @@ parser_check_super (super_decl, this_decl, wfl)\n       return 1;\n     }\n \n-  /* Check scope: same package OK, other package: OK if public */\n-  if (check_pkg_class_access (DECL_NAME (super_decl), wfl))\n+  /* Check top-level class scope. Inner classes are subject to member access\n+     rules (6.6.1). */\n+  if (! INNER_CLASS_P (super_type)\n+      && (check_pkg_class_access (DECL_NAME (super_decl), wfl)))\n     return 1;\n   \n   SOURCE_FRONTEND_DEBUG ((\"Completing class %s with %s\",\n@@ -5508,7 +5513,6 @@ do_resolve_class (enclosing, class_type, decl, cl)\n      being loaded from class file. FIXME. */\n   while (enclosing)\n     {\n-      tree name;\n       tree intermediate;\n \n       if ((new_class_decl = find_as_inner_class (enclosing, class_type, cl)))\n@@ -5527,19 +5531,12 @@ do_resolve_class (enclosing, class_type, decl, cl)\n       /* Now go to the upper classes, bail out if necessary. */\n       enclosing = CLASSTYPE_SUPER (TREE_TYPE (enclosing));\n       if (!enclosing || enclosing == object_type_node)\n-\tbreak;\n-      \n-      if (TREE_CODE (enclosing) == RECORD_TYPE)\n-\t{\n-\t  enclosing = TYPE_NAME (enclosing);\n-\t  continue;\n-\t}\n+        break;\n \n-      if (TREE_CODE (enclosing) == IDENTIFIER_NODE)\n-\tBUILD_PTR_FROM_NAME (name, enclosing);\n+      if (TREE_CODE (enclosing) == POINTER_TYPE)\n+\tenclosing = do_resolve_class (NULL, enclosing, NULL, NULL);\n       else\n-\tname = enclosing;\n-      enclosing = do_resolve_class (NULL, name, NULL, NULL);\n+        enclosing = TYPE_NAME (enclosing);\n     }\n \n   /* 1- Check for the type in single imports. This will change\n@@ -5592,10 +5589,19 @@ do_resolve_class (enclosing, class_type, decl, cl)\n \n   /* 5- Check an other compilation unit that bears the name of type */\n   load_class (TYPE_NAME (class_type), 0);\n-  if (check_pkg_class_access (TYPE_NAME (class_type), \n-\t\t\t      (cl ? cl : lookup_cl (decl))))\n-    return NULL_TREE;\n-\n+  \n+  if (!cl)\n+    cl = lookup_cl (decl);\n+  \n+  /* If we don't have a value for CL, then we're being called recursively. \n+     We can't check package access just yet, but it will be taken care of\n+     by the caller. */\n+  if (cl)\n+    {\n+      if (check_pkg_class_access (TYPE_NAME (class_type), cl))\n+        return NULL_TREE;\n+    }\n+  \n   /* 6- Last call for a resolution */\n   return IDENTIFIER_CLASS_VALUE (TYPE_NAME (class_type));\n }\n@@ -6671,9 +6677,16 @@ find_in_imports_on_demand (class_type)\n \t loaded and not seen in source yet, the load */\n       if (!decl || (!CLASS_LOADED_P (TREE_TYPE (decl))\n \t\t    && !CLASS_FROM_SOURCE_P (TREE_TYPE (decl))))\n-\tload_class (node_to_use, 0);\n+\t{\n+\t  load_class (node_to_use, 0);\n+\t  decl = IDENTIFIER_CLASS_VALUE (TYPE_NAME (class_type));\n+\t}\n       lineno = saved_lineno;\n-      return check_pkg_class_access (TYPE_NAME (class_type), cl);\n+      if (! INNER_CLASS_P (TREE_TYPE (decl)))\n+\treturn check_pkg_class_access (TYPE_NAME (class_type), cl);\n+      else\n+        /* 6.6.1: Inner classes are subject to member access rules. */\n+        return 0;\n     }\n   else\n     return (seen_once < 0 ? 0 : seen_once); /* It's ok not to have found */\n@@ -6767,11 +6780,15 @@ lookup_package_type (name, from)\n   return get_identifier (subname);\n }\n \n+/* Check accessibility of inner classes according to member access rules. \n+   DECL is the inner class, ENCLOSING_DECL is the class from which the\n+   access is being attempted. */\n+\n static void\n check_inner_class_access (decl, enclosing_decl, cl)\n      tree decl, enclosing_decl, cl;\n {\n-  int access = 0;\n+  const char *access;\n \n   /* We don't issue an error message when CL is null. CL can be null\n      as a result of processing a JDEP crafted by source_start_java_method\n@@ -6781,30 +6798,69 @@ check_inner_class_access (decl, enclosing_decl, cl)\n   if (!decl || !cl)\n     return;\n \n-  /* We grant access to private and protected inner classes if the\n-     location from where we're trying to access DECL is an enclosing\n-     context for DECL or if both have a common enclosing context. */\n+  tree enclosing_decl_type = TREE_TYPE (enclosing_decl);\n+\n   if (CLASS_PRIVATE (decl))\n-    access = 1;\n-  if (CLASS_PROTECTED (decl))\n-    access = 2;\n-  if (!access)\n-    return;\n+    {\n+      /* Access is permitted only within the body of the top-level\n+         class in which DECL is declared. */\n+      tree top_level = decl;\n+      while (DECL_CONTEXT (top_level))\n+        top_level = DECL_CONTEXT (top_level);      \n+      while (DECL_CONTEXT (enclosing_decl))\n+        enclosing_decl = DECL_CONTEXT (enclosing_decl);\n+      if (top_level == enclosing_decl)\n+        return;      \n+      access = \"private\";\n+    }\n+  else if (CLASS_PROTECTED (decl))\n+    {\n+      tree decl_context;\n+      /* Access is permitted from within the same package... */\n+      if (in_same_package (decl, enclosing_decl))\n+        return;\n       \n-  if (common_enclosing_context_p (TREE_TYPE (enclosing_decl),\n-\t\t\t\t  TREE_TYPE (decl))\n-      || enclosing_context_p (TREE_TYPE (enclosing_decl),\n-\t\t\t      TREE_TYPE (decl)))\n+      /* ... or from within the body of a subtype of the context in which\n+         DECL is declared. */\n+      decl_context = DECL_CONTEXT (decl);\n+      while (enclosing_decl)\n+        {\n+\t  if (CLASS_INTERFACE (decl))\n+\t    {\n+\t      if (interface_of_p (TREE_TYPE (decl_context), \n+\t\t\t\t  enclosing_decl_type))\n+\t\treturn;\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Eww. The order of the arguments is different!! */\n+\t      if (inherits_from_p (enclosing_decl_type, \n+\t\t\t\t   TREE_TYPE (decl_context)))\n+\t\treturn;\n+\t    }\n+\t  enclosing_decl = DECL_CONTEXT (enclosing_decl);\n+\t}      \n+      access = \"protected\";\n+    }\n+  else if (! CLASS_PUBLIC (decl))\n+    {\n+      /* Access is permitted only from within the same package as DECL. */\n+      if (in_same_package (decl, enclosing_decl))\n+        return;\n+      access = \"non-public\";\n+    }\n+  else\n+    /* Class is public. */\n     return;\n \n-  parse_error_context (cl, \"Can't access %s nested %s %s. Only public classes and interfaces in other packages can be accessed\",\n-\t\t       (access == 1 ? \"private\" : \"protected\"),\n+  parse_error_context (cl, \"Nested %s %s is %s; cannot be accessed from here\",\n \t\t       (CLASS_INTERFACE (decl) ? \"interface\" : \"class\"),\n-\t\t       lang_printable_name (decl, 0));\n+\t\t       lang_printable_name (decl, 0), access);\n }\n \n-/* Check that CLASS_NAME refers to a PUBLIC class. Return 0 if no\n-   access violations were found, 1 otherwise.  */\n+/* Accessibility check for top-level classes. If CLASS_NAME is in a foreign \n+   package, it must be PUBLIC. Return 0 if no access violations were found, \n+   1 otherwise.  */\n \n static int\n check_pkg_class_access (class_name, cl)\n@@ -6813,7 +6869,7 @@ check_pkg_class_access (class_name, cl)\n {\n   tree type;\n \n-  if (!QUALIFIED_P (class_name) || !IDENTIFIER_CLASS_VALUE (class_name))\n+  if (!IDENTIFIER_CLASS_VALUE (class_name))\n     return 0;\n \n   if (!(type = TREE_TYPE (IDENTIFIER_CLASS_VALUE (class_name))))\n@@ -6825,7 +6881,11 @@ check_pkg_class_access (class_name, cl)\n          allowed. */\n       tree l, r;\n       breakdown_qualified (&l, &r, class_name);\n+      if (!QUALIFIED_P (class_name) && !ctxp->package)\n+\t/* Both in the empty package. */\n+        return 0;\n       if (l == ctxp->package)\n+\t/* Both in the same package. */\n \treturn 0;\n \n       parse_error_context \n@@ -10948,6 +11008,35 @@ breakdown_qualified (left, right, source)\n   return 0;\n }\n \n+/* Return TRUE if two classes are from the same package. */\n+\n+static int\n+in_same_package (name1, name2)\n+  tree name1, name2;\n+{\n+  tree tmp;\n+  tree pkg1;\n+  tree pkg2;\n+  \n+  if (TREE_CODE (name1) == TYPE_DECL)\n+    name1 = DECL_NAME (name1);\n+  if (TREE_CODE (name2) == TYPE_DECL)\n+    name2 = DECL_NAME (name2);\n+\n+  if (QUALIFIED_P (name1) != QUALIFIED_P (name2))\n+    /* One in empty package. */\n+    return 0;\n+\n+  if (QUALIFIED_P (name1) == 0 && QUALIFIED_P (name2) == 0)\n+    /* Both in empty package. */\n+    return 1;\n+\n+  breakdown_qualified (&pkg1, &tmp, name1);\n+  breakdown_qualified (&pkg2, &tmp, name2);\n+  \n+  return (pkg1 == pkg2);\n+}\n+\n /* Patch tree nodes in a function body. When a BLOCK is found, push\n    local variable decls if present.\n    Same as java_complete_lhs, but does resolve static finals to values. */"}]}