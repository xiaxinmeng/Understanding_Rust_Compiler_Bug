{"sha": "9aeef76b6f20d5f895821f10e3cef2518b4b9ebc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFlZWY3NmI2ZjIwZDVmODk1ODIxZjEwZTNjZWYyNTE4YjRiOWViYw==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2007-06-06T10:31:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:31:06Z"}, "message": "g-soccon.ads: Add new constant Thread_Blocking_IO...\n\n2007-04-20  Thomas Quinot  <quinot@adacore.com>\n\n\t* g-soccon.ads: Add new constant Thread_Blocking_IO, always True by\n\tdefault, set False on a per-runtime basis.\n\t(Need_Netdb_Buffer): New constant.\n\n\t* g-socket.ads, g-socket.adb: Import new package\n\tGNAT.Sockets.Thin.Task_Safe_NetDB.\n\t(Raise_Host_Error): Use Host_Error_Message from platform-specific thin\n\tbinding to obtain proper message.\n\t(Close_Selector): Use GNAT.Sockets.Thin.Signalling_Fds.Close.\n\tReplace various occurrences of Arry (Arry'First)'Address with the\n\tequivalent Arry'Address (GNAT always follows implementation advice from\n\t13.3(14)).\n\t(Get_Host_By_Address, Get_Host_By_Name,\n\tGet_Service_By_Name, Get_Service_By_Port): Do not use GNAT.Task_Lock;\n\tinstead, rely on platform-specific task safe netdb operations provided\n\tby g-socthi.\n\n\t* g-socthi.ads, g-socthi.adb (Initialize): Remove obsolete formal\n\tparameter Process_Blocking_IO.\n\t(Host_Error_Messages): Add stub body.\n\t(GNAT.Sockets.Thin.Signalling_Fds): New procedure Close.\n\t(Safe_Gethostbyname, Safe_Gethostbyaddr, Safe_Getservbyname,\n\tSafe_Getservbyport): Move functions into new child package\n\tTask_Safe_NetDB.\n\t(Nonreentrant_Gethostbyname, Nonreentrant_Gethostbyaddr,\n\tNonreentrant_Getservbyname, Nonreentrant_Getservbyport): New routines.\n\t(In_Addr): Add alignment clause.\n\nFrom-SVN: r125424", "tree": {"sha": "fc7e9dbcdb9f0960c2ce0a3170d937a7c1f6f6a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc7e9dbcdb9f0960c2ce0a3170d937a7c1f6f6a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9aeef76b6f20d5f895821f10e3cef2518b4b9ebc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aeef76b6f20d5f895821f10e3cef2518b4b9ebc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aeef76b6f20d5f895821f10e3cef2518b4b9ebc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aeef76b6f20d5f895821f10e3cef2518b4b9ebc/comments", "author": null, "committer": null, "parents": [{"sha": "96338f1975a1543a0547df82b9d0f2c5d206fb1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96338f1975a1543a0547df82b9d0f2c5d206fb1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96338f1975a1543a0547df82b9d0f2c5d206fb1b"}], "stats": {"total": 528, "additions": 257, "deletions": 271}, "files": [{"sha": "6890c65fc2d7d10a393f22f7438f2e1e0e1fa7ae", "filename": "gcc/ada/g-soccon.ads", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeef76b6f20d5f895821f10e3cef2518b4b9ebc/gcc%2Fada%2Fg-soccon.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeef76b6f20d5f895821f10e3cef2518b4b9ebc/gcc%2Fada%2Fg-soccon.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon.ads?ref=9aeef76b6f20d5f895821f10e3cef2518b4b9ebc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -43,6 +43,9 @@\n --  but are for illustration purposes only. As noted above, part of a port\n --  to a new target is to replace this file appropriately.\n \n+--  This file is generated automatically, do not modify it by hand! Instead,\n+--  make changes to gen-soccon.c and re-run it on each target.\n+\n package GNAT.Sockets.Constants is\n \n    --------------\n@@ -182,4 +185,17 @@ package GNAT.Sockets.Constants is\n    SIZEOF_tv_sec      : constant :=            4; --  tv_sec\n    SIZEOF_tv_usec     : constant :=            4; --  tv_usec\n \n+   ----------------------------------------\n+   -- Properties of supported interfaces --\n+   ----------------------------------------\n+\n+   Need_Netdb_Buffer  : constant :=            1; --  Need buffer for Netdb ops\n+\n+   ----------------------\n+   -- Additional flags --\n+   ----------------------\n+\n+   Thread_Blocking_IO : constant Boolean := True;\n+   --  Set False for contexts where socket i/o are process blocking\n+\n end GNAT.Sockets.Constants;"}, {"sha": "940026586c3abd9abb6f8b7511cd13bae0e6d3c9", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 127, "deletions": 195, "changes": 322, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeef76b6f20d5f895821f10e3cef2518b4b9ebc/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeef76b6f20d5f895821f10e3cef2518b4b9ebc/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=9aeef76b6f20d5f895821f10e3cef2518b4b9ebc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2006, AdaCore                     --\n+--                     Copyright (C) 2001-2007, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,15 +31,14 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Ada.Streams;                use Ada.Streams;\n-with Ada.Exceptions;             use Ada.Exceptions;\n+with Ada.Streams;              use Ada.Streams;\n+with Ada.Exceptions;           use Ada.Exceptions;\n with Ada.Unchecked_Conversion;\n \n with Interfaces.C.Strings;\n-\n with GNAT.Sockets.Constants;\n-with GNAT.Sockets.Thin;          use GNAT.Sockets.Thin;\n-with GNAT.Task_Lock;\n+with GNAT.Sockets.Thin;                 use GNAT.Sockets.Thin;\n+with GNAT.Sockets.Thin.Task_Safe_NetDB; use GNAT.Sockets.Thin.Task_Safe_NetDB;\n \n with GNAT.Sockets.Linker_Options;\n pragma Warnings (Off, GNAT.Sockets.Linker_Options);\n@@ -56,53 +55,59 @@ package body GNAT.Sockets is\n \n    ENOERROR : constant := 0;\n \n+   Netdb_Buffer_Size : constant := Constants.Need_Netdb_Buffer * 1024;\n+   --  The network database functions gethostbyname, gethostbyaddr,\n+   --  getservbyname and getservbyport can either be guaranteed task safe by\n+   --  the operating system, or else return data through a user-provided buffer\n+   --  to ensure concurrent uses do not interfere.\n+\n    --  Correspondance tables\n \n    Families : constant array (Family_Type) of C.int :=\n-     (Family_Inet  => Constants.AF_INET,\n-      Family_Inet6 => Constants.AF_INET6);\n+                (Family_Inet  => Constants.AF_INET,\n+                 Family_Inet6 => Constants.AF_INET6);\n \n    Levels : constant array (Level_Type) of C.int :=\n-     (Socket_Level              => Constants.SOL_SOCKET,\n-      IP_Protocol_For_IP_Level  => Constants.IPPROTO_IP,\n-      IP_Protocol_For_UDP_Level => Constants.IPPROTO_UDP,\n-      IP_Protocol_For_TCP_Level => Constants.IPPROTO_TCP);\n+              (Socket_Level              => Constants.SOL_SOCKET,\n+               IP_Protocol_For_IP_Level  => Constants.IPPROTO_IP,\n+               IP_Protocol_For_UDP_Level => Constants.IPPROTO_UDP,\n+               IP_Protocol_For_TCP_Level => Constants.IPPROTO_TCP);\n \n    Modes : constant array (Mode_Type) of C.int :=\n-     (Socket_Stream   => Constants.SOCK_STREAM,\n-      Socket_Datagram => Constants.SOCK_DGRAM);\n+             (Socket_Stream   => Constants.SOCK_STREAM,\n+              Socket_Datagram => Constants.SOCK_DGRAM);\n \n    Shutmodes : constant array (Shutmode_Type) of C.int :=\n-     (Shut_Read       => Constants.SHUT_RD,\n-      Shut_Write      => Constants.SHUT_WR,\n-      Shut_Read_Write => Constants.SHUT_RDWR);\n+                 (Shut_Read       => Constants.SHUT_RD,\n+                  Shut_Write      => Constants.SHUT_WR,\n+                  Shut_Read_Write => Constants.SHUT_RDWR);\n \n    Requests : constant array (Request_Name) of C.int :=\n-     (Non_Blocking_IO => Constants.FIONBIO,\n-      N_Bytes_To_Read => Constants.FIONREAD);\n+                (Non_Blocking_IO => Constants.FIONBIO,\n+                 N_Bytes_To_Read => Constants.FIONREAD);\n \n    Options : constant array (Option_Name) of C.int :=\n-     (Keep_Alive      => Constants.SO_KEEPALIVE,\n-      Reuse_Address   => Constants.SO_REUSEADDR,\n-      Broadcast       => Constants.SO_BROADCAST,\n-      Send_Buffer     => Constants.SO_SNDBUF,\n-      Receive_Buffer  => Constants.SO_RCVBUF,\n-      Linger          => Constants.SO_LINGER,\n-      Error           => Constants.SO_ERROR,\n-      No_Delay        => Constants.TCP_NODELAY,\n-      Add_Membership  => Constants.IP_ADD_MEMBERSHIP,\n-      Drop_Membership => Constants.IP_DROP_MEMBERSHIP,\n-      Multicast_If    => Constants.IP_MULTICAST_IF,\n-      Multicast_TTL   => Constants.IP_MULTICAST_TTL,\n-      Multicast_Loop  => Constants.IP_MULTICAST_LOOP,\n-      Send_Timeout    => Constants.SO_SNDTIMEO,\n-      Receive_Timeout => Constants.SO_RCVTIMEO);\n+               (Keep_Alive      => Constants.SO_KEEPALIVE,\n+                Reuse_Address   => Constants.SO_REUSEADDR,\n+                Broadcast       => Constants.SO_BROADCAST,\n+                Send_Buffer     => Constants.SO_SNDBUF,\n+                Receive_Buffer  => Constants.SO_RCVBUF,\n+                Linger          => Constants.SO_LINGER,\n+                Error           => Constants.SO_ERROR,\n+                No_Delay        => Constants.TCP_NODELAY,\n+                Add_Membership  => Constants.IP_ADD_MEMBERSHIP,\n+                Drop_Membership => Constants.IP_DROP_MEMBERSHIP,\n+                Multicast_If    => Constants.IP_MULTICAST_IF,\n+                Multicast_TTL   => Constants.IP_MULTICAST_TTL,\n+                Multicast_Loop  => Constants.IP_MULTICAST_LOOP,\n+                Send_Timeout    => Constants.SO_SNDTIMEO,\n+                Receive_Timeout => Constants.SO_RCVTIMEO);\n \n    Flags : constant array (0 .. 3) of C.int :=\n-            (0 => Constants.MSG_OOB,     --  Process_Out_Of_Band_Data\n-             1 => Constants.MSG_PEEK,    --  Peek_At_Incoming_Data\n-             2 => Constants.MSG_WAITALL, --  Wait_For_A_Full_Reception\n-             3 => Constants.MSG_EOR);    --  Send_End_Of_Record\n+             (0 => Constants.MSG_OOB,     --  Process_Out_Of_Band_Data\n+              1 => Constants.MSG_PEEK,    --  Peek_At_Incoming_Data\n+              2 => Constants.MSG_WAITALL, --  Wait_For_A_Full_Reception\n+              3 => Constants.MSG_EOR);    --  Send_End_Of_Record\n \n    Socket_Error_Id : constant Exception_Id := Socket_Error'Identity;\n    Host_Error_Id   : constant Exception_Id := Host_Error'Identity;\n@@ -354,8 +359,8 @@ package body GNAT.Sockets is\n          raise Socket_Error;\n       end if;\n \n-      Set_Length (Sin'Unchecked_Access, Len);\n-      Set_Family (Sin'Unchecked_Access, Families (Address.Family));\n+      Set_Length  (Sin'Unchecked_Access, Len);\n+      Set_Family  (Sin'Unchecked_Access, Families (Address.Family));\n       Set_Address (Sin'Unchecked_Access, To_In_Addr (Address.Addr));\n       Set_Port\n         (Sin'Unchecked_Access,\n@@ -497,7 +502,6 @@ package body GNAT.Sockets is\n          E_Socket_Set := ESet;\n \n       exception\n-\n          when Socket_Error =>\n \n             --  The local socket sets must be emptied before propagating\n@@ -533,27 +537,11 @@ package body GNAT.Sockets is\n \n    procedure Close_Selector (Selector : in out Selector_Type) is\n    begin\n+      --  Close the signalling file descriptors used internally for the\n+      --  implementation of Abort_Selector.\n \n-      --  Close the signalling sockets used internally for the implementation\n-      --  of Abort_Selector. Exceptions are ignored because these sockets\n-      --  are implementation artefacts of no interest to the user, and\n-      --  there is little that can be done if either Close_Socket call fails\n-      --  (which theoretically should not happen anyway). We also want to try\n-      --  to perform the second Close_Socket even if the first one failed.\n-\n-      begin\n-         Close_Socket (Selector.R_Sig_Socket);\n-      exception\n-         when Socket_Error =>\n-            null;\n-      end;\n-\n-      begin\n-         Close_Socket (Selector.W_Sig_Socket);\n-      exception\n-         when Socket_Error =>\n-            null;\n-      end;\n+      Signalling_Fds.Close (C.int (Selector.R_Sig_Socket));\n+      Signalling_Fds.Close (C.int (Selector.W_Sig_Socket));\n \n       --  Reset R_Sig_Socket and W_Sig_Socket to No_Socket to ensure that any\n       --  (errneous) subsequent attempt to use this selector properly fails.\n@@ -626,7 +614,6 @@ package body GNAT.Sockets is\n \n          when N_Bytes_To_Read =>\n             null;\n-\n       end case;\n \n       Res := C_Ioctl\n@@ -794,69 +781,49 @@ package body GNAT.Sockets is\n    is\n       pragma Unreferenced (Family);\n \n-      HA  : aliased In_Addr := To_In_Addr (Address);\n-      Res : Hostent_Access;\n-      Err : Integer;\n+      HA     : aliased In_Addr := To_In_Addr (Address);\n+      Buflen : constant C.int := Netdb_Buffer_Size;\n+      Buf    : aliased C.char_array (1 .. Netdb_Buffer_Size);\n+      Res    : aliased Hostent;\n+      Err    : aliased C.int;\n \n    begin\n-      --  This C function is not always thread-safe. Protect against\n-      --  concurrent access.\n-\n-      Task_Lock.Lock;\n-      Res := C_Gethostbyaddr (HA'Address, HA'Size / 8, Constants.AF_INET);\n-\n-      if Res = null then\n-         Err := Host_Errno;\n-         Task_Lock.Unlock;\n-         Raise_Host_Error (Err);\n+      if Safe_Gethostbyaddr (HA'Address, HA'Size / 8, Constants.AF_INET,\n+                             Res'Access, Buf'Address, Buflen, Err'Access) /= 0\n+      then\n+         Raise_Host_Error (Integer (Err));\n       end if;\n \n-      --  Translate from the C format to the API format\n-\n-      declare\n-         HE : constant Host_Entry_Type := To_Host_Entry (Res.all);\n-\n-      begin\n-         Task_Lock.Unlock;\n-         return HE;\n-      end;\n+      return To_Host_Entry (Res);\n    end Get_Host_By_Address;\n \n    ----------------------\n    -- Get_Host_By_Name --\n    ----------------------\n \n    function Get_Host_By_Name (Name : String) return Host_Entry_Type is\n-      HN  : constant C.char_array := C.To_C (Name);\n-      Res : Hostent_Access;\n-      Err : Integer;\n-\n    begin\n       --  Detect IP address name and redirect to Inet_Addr\n \n       if Is_IP_Address (Name) then\n          return Get_Host_By_Address (Inet_Addr (Name));\n       end if;\n \n-      --  This C function is not always thread-safe. Protect against\n-      --  concurrent access.\n-\n-      Task_Lock.Lock;\n-      Res := C_Gethostbyname (HN);\n-\n-      if Res = null then\n-         Err := Host_Errno;\n-         Task_Lock.Unlock;\n-         Raise_Host_Error (Err);\n-      end if;\n-\n-      --  Translate from the C format to the API format\n-\n       declare\n-         HE : constant Host_Entry_Type := To_Host_Entry (Res.all);\n+         HN     : constant C.char_array := C.To_C (Name);\n+         Buflen : constant C.int := Netdb_Buffer_Size;\n+         Buf    : aliased C.char_array (1 .. Netdb_Buffer_Size);\n+         Res    : aliased Hostent;\n+         Err    : aliased C.int;\n+\n       begin\n-         Task_Lock.Unlock;\n-         return HE;\n+         if Safe_Gethostbyname\n+           (HN, Res'Access, Buf'Address, Buflen, Err'Access) /= 0\n+         then\n+            Raise_Host_Error (Integer (Err));\n+         end if;\n+\n+         return To_Host_Entry (Res);\n       end;\n    end Get_Host_By_Name;\n \n@@ -888,32 +855,21 @@ package body GNAT.Sockets is\n      (Name     : String;\n       Protocol : String) return Service_Entry_Type\n    is\n-      SN  : constant C.char_array := C.To_C (Name);\n-      SP  : constant C.char_array := C.To_C (Protocol);\n-      Res : Servent_Access;\n+      SN     : constant C.char_array := C.To_C (Name);\n+      SP     : constant C.char_array := C.To_C (Protocol);\n+      Buflen : constant C.int := Netdb_Buffer_Size;\n+      Buf    : aliased C.char_array (1 .. Netdb_Buffer_Size);\n+      Res    : aliased Servent;\n \n    begin\n-      --  This C function is not always thread-safe. Protect against\n-      --  concurrent access.\n-\n-      Task_Lock.Lock;\n-      Res := C_Getservbyname (SN, SP);\n-\n-      if Res = null then\n-         Task_Lock.Unlock;\n+      if Safe_Getservbyname (SN, SP, Res'Access, Buf'Address, Buflen) /= 0 then\n          Ada.Exceptions.Raise_Exception\n            (Service_Error'Identity, \"Service not found\");\n       end if;\n \n       --  Translate from the C format to the API format\n \n-      declare\n-         SE : constant Service_Entry_Type := To_Service_Entry (Res.all);\n-\n-      begin\n-         Task_Lock.Unlock;\n-         return SE;\n-      end;\n+      return To_Service_Entry (Res);\n    end Get_Service_By_Name;\n \n    -------------------------\n@@ -924,32 +880,23 @@ package body GNAT.Sockets is\n      (Port     : Port_Type;\n       Protocol : String) return Service_Entry_Type\n    is\n-      SP  : constant C.char_array := C.To_C (Protocol);\n-      Res : Servent_Access;\n+      SP     : constant C.char_array := C.To_C (Protocol);\n+      Buflen : constant C.int := Netdb_Buffer_Size;\n+      Buf    : aliased C.char_array (1 .. Netdb_Buffer_Size);\n+      Res    : aliased Servent;\n \n    begin\n-      --  This C function is not always thread-safe. Protect against\n-      --  concurrent access.\n-\n-      Task_Lock.Lock;\n-      Res := C_Getservbyport\n-        (C.int (Short_To_Network (C.unsigned_short (Port))), SP);\n-\n-      if Res = null then\n-         Task_Lock.Unlock;\n+      if Safe_Getservbyport\n+        (C.int (Short_To_Network (C.unsigned_short (Port))), SP,\n+         Res'Access, Buf'Address, Buflen) /= 0\n+      then\n          Ada.Exceptions.Raise_Exception\n            (Service_Error'Identity, \"Service not found\");\n       end if;\n \n       --  Translate from the C format to the API format\n \n-      declare\n-         SE : constant Service_Entry_Type := To_Service_Entry (Res.all);\n-\n-      begin\n-         Task_Lock.Unlock;\n-         return SE;\n-      end;\n+      return To_Service_Entry (Res);\n    end Get_Service_By_Port;\n \n    ---------------------\n@@ -966,6 +913,7 @@ package body GNAT.Sockets is\n \n    begin\n       Res := C_Getsockname (C.int (Socket), Sin'Address, Len'Access);\n+\n       if Res /= Failure then\n          To_Inet_Addr (Sin.Sin_Addr, Addr.Addr);\n          Addr.Port := Port_Type (Network_To_Short (Sin.Sin_Port));\n@@ -1071,7 +1019,6 @@ package body GNAT.Sockets is\n          when Send_Timeout    |\n               Receive_Timeout =>\n             Opt.Timeout := To_Duration (VT);\n-\n       end case;\n \n       return Opt;\n@@ -1208,9 +1155,9 @@ package body GNAT.Sockets is\n       Result : Inet_Addr_Type;\n \n    begin\n-      --  Special case for the all-ones broadcast address: this address\n-      --  has the same in_addr_t value as Failure, and thus cannot be\n-      --  properly returned by inet_addr(3).\n+      --  Special case for the all-ones broadcast address: this address has the\n+      --  same in_addr_t value as Failure, and thus cannot be properly returned\n+      --  by inet_addr(3).\n \n       if Image = \"255.255.255.255\" then\n          return Broadcast_Inet_Addr;\n@@ -1238,11 +1185,26 @@ package body GNAT.Sockets is\n    -- Initialize --\n    ----------------\n \n-   procedure Initialize (Process_Blocking_IO : Boolean := False) is\n+   procedure Initialize (Process_Blocking_IO : Boolean) is\n+      Expected : constant Boolean := not Constants.Thread_Blocking_IO;\n+   begin\n+      if Process_Blocking_IO /= Expected then\n+         raise Socket_Error with\n+           \"incorrect Process_Blocking_IO setting, expected \" & Expected'Img;\n+      end if;\n+\n+      Initialize;\n+   end Initialize;\n+\n+   ----------------\n+   -- Initialize --\n+   ----------------\n+\n+   procedure Initialize is\n    begin\n       if not Initialized then\n          Initialized := True;\n-         Thin.Initialize (Process_Blocking_IO);\n+         Thin.Initialize;\n       end if;\n    end Initialize;\n \n@@ -1355,32 +1317,10 @@ package body GNAT.Sockets is\n    ----------------------\n \n    procedure Raise_Host_Error (H_Error : Integer) is\n-\n-      function Host_Error_Message return String;\n-      --  We do not use a C function like strerror because hstrerror that would\n-      --  correspond is obsolete. Return appropriate string for error value.\n-\n-      ------------------------\n-      -- Host_Error_Message --\n-      ------------------------\n-\n-      function Host_Error_Message return String is\n-      begin\n-         case H_Error is\n-            when Constants.HOST_NOT_FOUND => return \"Host not found\";\n-            when Constants.TRY_AGAIN      => return \"Try again\";\n-            when Constants.NO_RECOVERY    => return \"No recovery\";\n-            when Constants.NO_DATA        => return \"No address\";\n-            when others                   => return \"Unknown error\";\n-         end case;\n-      end Host_Error_Message;\n-\n-   --  Start of processing for Raise_Host_Error\n-\n    begin\n       Ada.Exceptions.Raise_Exception (Host_Error'Identity,\n         Err_Code_Image (H_Error)\n-        & Host_Error_Message);\n+        & C.Strings.Value (Host_Error_Messages.Host_Error_Message (H_Error)));\n    end Raise_Host_Error;\n \n    ------------------------\n@@ -1416,7 +1356,7 @@ package body GNAT.Sockets is\n             Index,\n             Stream.From);\n \n-         Last  := Index;\n+         Last := Index;\n \n          --  Exit when all or zero data received. Zero means that the socket\n          --  peer is closed.\n@@ -1469,11 +1409,8 @@ package body GNAT.Sockets is\n       Res : C.int;\n \n    begin\n-      Res := C_Recv\n-        (C.int (Socket),\n-         Item (Item'First)'Address,\n-         Item'Length,\n-         To_Int (Flags));\n+      Res :=\n+        C_Recv (C.int (Socket), Item'Address, Item'Length, To_Int (Flags));\n \n       if Res = Failure then\n          Raise_Socket_Error (Socket_Errno);\n@@ -1503,7 +1440,7 @@ package body GNAT.Sockets is\n       Res :=\n         C_Recvfrom\n           (C.int (Socket),\n-           Item (Item'First)'Address,\n+           Item'Address,\n            Item'Length,\n            To_Int (Flags),\n            Sin'Unchecked_Access,\n@@ -1534,8 +1471,7 @@ package body GNAT.Sockets is\n          case Error_Value is\n             when Constants.HOST_NOT_FOUND => return Unknown_Host;\n             when Constants.TRY_AGAIN      => return Host_Name_Lookup_Failure;\n-            when Constants.NO_RECOVERY    =>\n-               return Non_Recoverable_Error;\n+            when Constants.NO_RECOVERY    => return Non_Recoverable_Error;\n             when Constants.NO_DATA        => return Unknown_Server_Error;\n             when others                   => return Cannot_Resolve_Error;\n          end case;\n@@ -1546,8 +1482,8 @@ package body GNAT.Sockets is\n          when EACCES          => return Permission_Denied;\n          when EADDRINUSE      => return Address_Already_In_Use;\n          when EADDRNOTAVAIL   => return Cannot_Assign_Requested_Address;\n-         when EAFNOSUPPORT    =>\n-            return Address_Family_Not_Supported_By_Protocol;\n+         when EAFNOSUPPORT    => return\n+                                 Address_Family_Not_Supported_By_Protocol;\n          when EALREADY        => return Operation_Already_In_Progress;\n          when EBADF           => return Bad_File_Descriptor;\n          when ECONNABORTED    => return Software_Caused_Connection_Abort;\n@@ -1567,8 +1503,8 @@ package body GNAT.Sockets is\n          when EMSGSIZE        => return Message_Too_Long;\n          when ENAMETOOLONG    => return File_Name_Too_Long;\n          when ENETDOWN        => return Network_Is_Down;\n-         when ENETRESET       =>\n-            return Network_Dropped_Connection_Because_Of_Reset;\n+         when ENETRESET       => return\n+                                 Network_Dropped_Connection_Because_Of_Reset;\n          when ENETUNREACH     => return Network_Is_Unreachable;\n          when ENOBUFS         => return No_Buffer_Space_Available;\n          when ENOPROTOOPT     => return Protocol_Not_Available;\n@@ -1578,8 +1514,8 @@ package body GNAT.Sockets is\n          when EPFNOSUPPORT    => return Protocol_Family_Not_Supported;\n          when EPROTONOSUPPORT => return Protocol_Not_Supported;\n          when EPROTOTYPE      => return Protocol_Wrong_Type_For_Socket;\n-         when ESHUTDOWN       =>\n-            return Cannot_Send_After_Transport_Endpoint_Shutdown;\n+         when ESHUTDOWN       => return\n+                                 Cannot_Send_After_Transport_Endpoint_Shutdown;\n          when ESOCKTNOSUPPORT => return Socket_Type_Not_Supported;\n          when ETIMEDOUT       => return Connection_Timed_Out;\n          when ETOOMANYREFS    => return Too_Many_References;\n@@ -1648,7 +1584,7 @@ package body GNAT.Sockets is\n       Res :=\n         C_Readv\n           (C.int (Socket),\n-           Vector (Vector'First)'Address,\n+           Vector'Address,\n            Vector'Length);\n \n       if Res = Failure then\n@@ -1676,7 +1612,7 @@ package body GNAT.Sockets is\n       Res :=\n         C_Send\n           (C.int (Socket),\n-           Item (Item'First)'Address,\n+           Item'Address,\n            Item'Length,\n            Set_Forced_Flags (To_Int (Flags)));\n \n@@ -1714,7 +1650,7 @@ package body GNAT.Sockets is\n \n       Res := C_Sendto\n         (C.int (Socket),\n-         Item (Item'First)'Address,\n+         Item'Address,\n          Item'Length,\n          Set_Forced_Flags (To_Int (Flags)),\n          Sin'Unchecked_Access,\n@@ -2107,19 +2043,16 @@ package body GNAT.Sockets is\n    function To_Service_Entry (E : Servent) return Service_Entry_Type is\n       use type C.size_t;\n \n-      Official : constant String :=\n-                  C.Strings.Value (E.S_Name);\n+      Official : constant String := C.Strings.Value (E.S_Name);\n \n       Aliases : constant Chars_Ptr_Array :=\n                   Chars_Ptr_Pointers.Value (E.S_Aliases);\n       --  S_Aliases points to a list of name aliases. The list is\n       --  terminated by a NULL pointer.\n \n-      Protocol : constant String :=\n-                   C.Strings.Value (E.S_Proto);\n+      Protocol : constant String := C.Strings.Value (E.S_Proto);\n \n-      Result   : Service_Entry_Type\n-        (Aliases_Length   => Aliases'Length - 1);\n+      Result : Service_Entry_Type (Aliases_Length => Aliases'Length - 1);\n       --  The last element is a null pointer\n \n       Source : C.size_t;\n@@ -2141,7 +2074,6 @@ package body GNAT.Sockets is\n         Port_Type (Network_To_Short (C.unsigned_short (E.S_Port)));\n \n       Result.Protocol := To_Name (Protocol);\n-\n       return Result;\n    end To_Service_Entry;\n "}, {"sha": "3f37bb5f88ff8726e129f6efaffab9f8265821a8", "filename": "gcc/ada/g-socket.ads", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeef76b6f20d5f895821f10e3cef2518b4b9ebc/gcc%2Fada%2Fg-socket.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeef76b6f20d5f895821f10e3cef2518b4b9ebc/gcc%2Fada%2Fg-socket.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.ads?ref=9aeef76b6f20d5f895821f10e3cef2518b4b9ebc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2006, AdaCore                     --\n+--                     Copyright (C) 2001-2007, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,7 +42,7 @@\n --       installed. In particular Multicast is not available with the Windows\n --       version.\n \n---       The VMS implementation has implemented using the DECC RTL Socket API,\n+--       The VMS implementation was implemented using the DECC RTL Socket API,\n --       and is thus subject to limitations in the implementation of this API.\n \n --     VxWorks cross ports fully implement this package\n@@ -354,30 +354,30 @@ package GNAT.Sockets is\n    --     end Ping;\n \n    --  begin\n-   --     --  Indicate whether the thread library provides process\n-   --     --  blocking IO. Basically, if you are not using FSU threads\n-   --     --  the default is ok.\n-\n-   --     Initialize (Process_Blocking_IO => False);\n+   --     Initialize;\n    --     Ping.Start;\n    --     Pong.Start;\n    --     Ping.Stop;\n    --     Pong.Stop;\n    --     Finalize;\n    --  end PingPong;\n \n-   procedure Initialize (Process_Blocking_IO : Boolean := False);\n-   --  Initialize must be called before using any other socket routines. The\n-   --  Process_Blocking_IO parameter indicates whether the thread library\n-   --  provides process-blocking or thread-blocking input/output operations.\n-   --  In the former case (typically with FSU threads) GNAT.Sockets should be\n-   --  initialized with a value of True to provide task-blocking IO through an\n-   --  emulation mechanism. Only the first call to Initialize is taken into\n-   --  account (further calls will be ignored). Note that with the default\n-   --  value of Process_Blocking_IO, this operation is a no-op on UNIX\n-   --  platforms, but applications should make sure to call it if portability\n-   --  is expected: some platforms (such as Windows) require initialization\n-   --  before any other socket operations.\n+   procedure Initialize;\n+   --  Initialize must be called before using any other socket routines.\n+   --  Note that this operation is a no-op on UNIX platforms, but applications\n+   --  should make sure to call it if portability is expected: some platforms\n+   --  (such as Windows) require initialization before any socket operation.\n+\n+   procedure Initialize (Process_Blocking_IO : Boolean);\n+   pragma Obsolescent\n+     (Entity => Initialize,\n+      \"passing a parameter to Initialize is not supported anymore\");\n+   --  Previous versions of GNAT.Sockets used to require the user to indicate\n+   --  whether socket I/O was process- or thread-blocking on the platform.\n+   --  This property is now determined automatically when the run-time library\n+   --  is built. The old version of Initialize, taking a parameter, is kept\n+   --  for compatibility reasons, but this interface is obsolete (and if the\n+   --  value given is wrong, an exception will be raised at run time).\n \n    procedure Finalize;\n    --  After Finalize is called it is not possible to use any routines\n@@ -976,12 +976,10 @@ package GNAT.Sockets is\n    --  cases Status is set to Completed and sockets that are ready are set in\n    --  R_Socket_Set or W_Socket_Set. Status is set to Expired if no socket was\n    --  ready after a Timeout expiration. Status is set to Aborted if an abort\n-   --  signal has been received while checking socket status. As this\n-   --  procedure returns when Timeout occurs, it is a design choice to keep\n-   --  this procedure process blocking. Note that a Timeout of 0.0 returns\n-   --  immediately. Also note that two different Socket_Set_Type objects must\n-   --  be passed as R_Socket_Set and W_Socket_Set (even if they denote the\n-   --  same set of Sockets), or some event may be lost.\n+   --  signal has been received while checking socket status.\n+   --  Note that two different Socket_Set_Type objects must be passed as\n+   --  R_Socket_Set and W_Socket_Set (even if they denote the same set of\n+   --  Sockets), or some event may be lost.\n    --  Socket_Error is raised when the select(2) system call returns an\n    --  error condition, or when a read error occurs on the signalling socket\n    --  used for the implementation of Abort_Selector."}, {"sha": "6ea18f67b475b7883779fea82edc4db337227cba", "filename": "gcc/ada/g-socthi.adb", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeef76b6f20d5f895821f10e3cef2518b4b9ebc/gcc%2Fada%2Fg-socthi.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeef76b6f20d5f895821f10e3cef2518b4b9ebc/gcc%2Fada%2Fg-socthi.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi.adb?ref=9aeef76b6f20d5f895821f10e3cef2518b4b9ebc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2006, AdaCore                     --\n+--                     Copyright (C) 2001-2007, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -56,13 +56,10 @@ package body GNAT.Sockets.Thin is\n    --  been set in non-blocking mode by the user.\n \n    Quantum : constant Duration := 0.2;\n-   --  When Thread_Blocking_IO is False, we set sockets in\n+   --  When Constants.Thread_Blocking_IO is False, we set sockets in\n    --  non-blocking mode and we spend a period of time Quantum between\n    --  two attempts on a blocking operation.\n \n-   Thread_Blocking_IO : Boolean := True;\n-   --  Comment required for this ???\n-\n    Unknown_System_Error : constant C.Strings.chars_ptr :=\n                             C.Strings.New_String (\"Unknown system error\");\n \n@@ -153,14 +150,14 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          R := Syscall_Accept (S, Addr, Addrlen);\n-         exit when Thread_Blocking_IO\n+         exit when Constants.Thread_Blocking_IO\n            or else R /= Failure\n            or else Non_Blocking_Socket (S)\n            or else Errno /= Constants.EWOULDBLOCK;\n          delay Quantum;\n       end loop;\n \n-      if not Thread_Blocking_IO\n+      if not Constants.Thread_Blocking_IO\n         and then R /= Failure\n       then\n          --  A socket inherits the properties ot its server especially\n@@ -189,7 +186,7 @@ package body GNAT.Sockets.Thin is\n    begin\n       Res := Syscall_Connect (S, Name, Namelen);\n \n-      if Thread_Blocking_IO\n+      if Constants.Thread_Blocking_IO\n         or else Res /= Failure\n         or else Non_Blocking_Socket (S)\n         or else Errno /= Constants.EINPROGRESS\n@@ -247,7 +244,7 @@ package body GNAT.Sockets.Thin is\n       Arg : Int_Access) return C.int\n    is\n    begin\n-      if not Thread_Blocking_IO\n+      if not Constants.Thread_Blocking_IO\n         and then Req = Constants.FIONBIO\n       then\n          if Arg.all /= 0 then\n@@ -273,7 +270,7 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          Res := Syscall_Recv (S, Msg, Len, Flags);\n-         exit when Thread_Blocking_IO\n+         exit when Constants.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n            or else Errno /= Constants.EWOULDBLOCK;\n@@ -300,7 +297,7 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          Res := Syscall_Recvfrom (S, Msg, Len, Flags, From, Fromlen);\n-         exit when Thread_Blocking_IO\n+         exit when Constants.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n            or else Errno /= Constants.EWOULDBLOCK;\n@@ -325,7 +322,7 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          Res := Syscall_Send (S, Msg, Len, Flags);\n-         exit when Thread_Blocking_IO\n+         exit when Constants.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n            or else Errno /= Constants.EWOULDBLOCK;\n@@ -352,7 +349,7 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          Res := Syscall_Sendto (S, Msg, Len, Flags, To, Tolen);\n-         exit when Thread_Blocking_IO\n+         exit when Constants.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n            or else Errno /= Constants.EWOULDBLOCK;\n@@ -380,7 +377,7 @@ package body GNAT.Sockets.Thin is\n    begin\n       R := Syscall_Socket (Domain, Typ, Protocol);\n \n-      if not Thread_Blocking_IO\n+      if not Constants.Thread_Blocking_IO\n         and then R /= Failure\n       then\n          --  Do not use C_Ioctl as this subprogram tracks sockets set\n@@ -402,13 +399,18 @@ package body GNAT.Sockets.Thin is\n       null;\n    end Finalize;\n \n+   -------------------------\n+   -- Host_Error_Messages --\n+   -------------------------\n+\n+   package body Host_Error_Messages is separate;\n+\n    ----------------\n    -- Initialize --\n    ----------------\n \n-   procedure Initialize (Process_Blocking_IO : Boolean) is\n+   procedure Initialize is\n    begin\n-      Thread_Blocking_IO := not Process_Blocking_IO;\n       Disable_All_SIGPIPEs;\n    end Initialize;\n \n@@ -505,17 +507,18 @@ package body GNAT.Sockets.Thin is\n       function C_Create (Fds : not null access Fd_Pair) return C.int;\n       function C_Read (Rsig : C.int) return C.int;\n       function C_Write (Wsig : C.int) return C.int;\n+      procedure C_Close (Sig : C.int);\n \n       pragma Import (C, C_Create, \"__gnat_create_signalling_fds\");\n       pragma Import (C, C_Read,   \"__gnat_read_signalling_fd\");\n       pragma Import (C, C_Write,  \"__gnat_write_signalling_fd\");\n+      pragma Import (C, C_Close,  \"__gnat_close_signalling_fd\");\n \n-      function Create (Fds : not null access Fd_Pair) return C.int\n-        renames C_Create;\n-\n+      function Create\n+        (Fds : not null access Fd_Pair) return C.int renames C_Create;\n       function Read (Rsig : C.int) return C.int renames C_Read;\n-\n       function Write (Wsig : C.int) return C.int renames C_Write;\n+      procedure Close (Sig : C.int) renames C_Close;\n \n    end Signalling_Fds;\n "}, {"sha": "59e9004afd9181c5acd8c9c1c4a067eeb17ef4dc", "filename": "gcc/ada/g-socthi.ads", "status": "modified", "additions": 67, "deletions": 30, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aeef76b6f20d5f895821f10e3cef2518b4b9ebc/gcc%2Fada%2Fg-socthi.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aeef76b6f20d5f895821f10e3cef2518b4b9ebc/gcc%2Fada%2Fg-socthi.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi.ads?ref=9aeef76b6f20d5f895821f10e3cef2518b4b9ebc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2006, AdaCore                     --\n+--                     Copyright (C) 2001-2007, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -40,8 +40,8 @@\n with Interfaces.C.Pointers;\n with Interfaces.C.Strings;\n \n-with GNAT.Sockets.Constants;\n with GNAT.OS_Lib;\n+with GNAT.Sockets.Constants;\n \n with System;\n \n@@ -64,12 +64,21 @@ package GNAT.Sockets.Thin is\n \n    function Socket_Error_Message (Errno : Integer) return C.Strings.chars_ptr;\n    --  Returns the error message string for the error number Errno. If Errno is\n-   --  not known it returns \"Unknown system error\".\n+   --  not known, returns \"Unknown system error\".\n \n    function Host_Errno return Integer;\n    pragma Import (C, Host_Errno, \"__gnat_get_h_errno\");\n    --  Returns last host error number\n \n+   package Host_Error_Messages is\n+\n+      function Host_Error_Message\n+        (H_Errno : Integer) return C.Strings.chars_ptr;\n+      --  Returns the error message string for the host error number H_Errno.\n+      --  If H_Errno is not known, returns \"Unknown system error\".\n+\n+   end Host_Error_Messages;\n+\n    subtype Fd_Set_Access is System.Address;\n    No_Fd_Set : constant Fd_Set_Access := System.Null_Address;\n \n@@ -111,8 +120,11 @@ package GNAT.Sockets.Thin is\n    type In_Addr is record\n       S_B1, S_B2, S_B3, S_B4 : C.unsigned_char;\n    end record;\n+   for In_Addr'Alignment use C.int'Alignment;\n    pragma Convention (C, In_Addr);\n-   --  Internet address\n+   --  IPv4 address, represented as a network-order C.int. Note that the\n+   --  underlying operating system may assume that values of this type have\n+   --  C.int alignment, so we need to provide a suitable alignment clause here.\n \n    type In_Addr_Access is access all In_Addr;\n    pragma Convention (C, In_Addr_Access);\n@@ -219,6 +231,10 @@ package GNAT.Sockets.Thin is\n    --  Indices into an Fd_Pair value providing access to each of the connected\n    --  file descriptors.\n \n+   --------------------------------\n+   -- Standard library functions --\n+   --------------------------------\n+\n    function C_Accept\n      (S       : C.int;\n       Addr    : System.Address;\n@@ -237,14 +253,6 @@ package GNAT.Sockets.Thin is\n       Name    : System.Address;\n       Namelen : C.int) return C.int;\n \n-   function C_Gethostbyaddr\n-     (Addr : System.Address;\n-      Len  : C.int;\n-      Typ  : C.int) return Hostent_Access;\n-\n-   function C_Gethostbyname\n-     (Name : C.char_array) return Hostent_Access;\n-\n    function C_Gethostname\n      (Name    : System.Address;\n       Namelen : C.int) return C.int;\n@@ -254,14 +262,6 @@ package GNAT.Sockets.Thin is\n       Name    : System.Address;\n       Namelen : not null access C.int) return C.int;\n \n-   function C_Getservbyname\n-     (Name  : C.char_array;\n-      Proto : C.char_array) return Servent_Access;\n-\n-   function C_Getservbyport\n-     (Port  : C.int;\n-      Proto : C.char_array) return Servent_Access;\n-\n    function C_Getsockname\n      (S       : C.int;\n       Name    : System.Address;\n@@ -353,6 +353,10 @@ package GNAT.Sockets.Thin is\n       Iov    : System.Address;\n       Iovcnt : C.int) return C.int;\n \n+   -------------------------------------------------------\n+   -- Signalling file descriptors for selector abortion --\n+   -------------------------------------------------------\n+\n    package Signalling_Fds is\n \n       function Create (Fds : not null access Fd_Pair) return C.int;\n@@ -370,8 +374,16 @@ package GNAT.Sockets.Thin is\n       --  Write one byte of data to wsig, the write end of a pair of signalling\n       --  fds created by Create_Signalling_Fds.\n \n+      procedure Close (Sig : C.int);\n+      pragma Convention (C, Close);\n+      --  Close one end of a pair of signalling fds (ignoring any error)\n+\n    end Signalling_Fds;\n \n+   ----------------------------\n+   -- Socket sets management --\n+   ----------------------------\n+\n    procedure Free_Socket_Set\n      (Set : Fd_Set_Access);\n    --  Free system-dependent socket set\n@@ -380,11 +392,11 @@ package GNAT.Sockets.Thin is\n      (Set    : Fd_Set_Access;\n       Socket : Int_Access;\n       Last   : Int_Access);\n-   --  Get last socket in Socket and remove it from the socket\n-   --  set. The parameter Last is a maximum value of the largest\n-   --  socket. This hint is used to avoid scanning very large socket\n-   --  sets. After a call to Get_Socket_From_Set, Last is set back to\n-   --  the real largest socket in the socket set.\n+   --  Get last socket in Socket and remove it from the socket set. The\n+   --  parameter Last is a maximum value of the largest socket. This hint is\n+   --  used to avoid scanning very large socket sets. After a call to\n+   --  Get_Socket_From_Set, Last is set back to the real largest socket in the\n+   --  socket set.\n \n    procedure Insert_Socket_In_Set\n      (Set    : Fd_Set_Access;\n@@ -417,18 +429,38 @@ package GNAT.Sockets.Thin is\n       Socket : C.int);\n    --  Remove socket from the socket set\n \n+   -------------------------------------------\n+   -- Nonreentrant network databases access --\n+   -------------------------------------------\n+\n+   --  The following are used only on systems that have nonreentrant\n+   --  getXXXbyYYY functions, and do NOT have corresponding getXXXbyYYY_\n+   --  functions. Currently, LynxOS is the only such system.\n+\n+   function Nonreentrant_Gethostbyname\n+     (Name : C.char_array) return Hostent_Access;\n+\n+   function Nonreentrant_Gethostbyaddr\n+     (Addr      : System.Address;\n+      Addr_Len  : C.int;\n+      Addr_Type : C.int) return Hostent_Access;\n+\n+   function Nonreentrant_Getservbyname\n+     (Name  : C.char_array;\n+      Proto : C.char_array) return Servent_Access;\n+\n+   function Nonreentrant_Getservbyport\n+     (Port  : C.int;\n+      Proto : C.char_array) return Servent_Access;\n+\n+   procedure Initialize;\n    procedure Finalize;\n-   procedure Initialize (Process_Blocking_IO : Boolean);\n \n private\n    pragma Import (C, C_Bind, \"bind\");\n    pragma Import (C, C_Close, \"close\");\n-   pragma Import (C, C_Gethostbyaddr, \"gethostbyaddr\");\n-   pragma Import (C, C_Gethostbyname, \"gethostbyname\");\n    pragma Import (C, C_Gethostname, \"gethostname\");\n    pragma Import (C, C_Getpeername, \"getpeername\");\n-   pragma Import (C, C_Getservbyname, \"getservbyname\");\n-   pragma Import (C, C_Getservbyport, \"getservbyport\");\n    pragma Import (C, C_Getsockname, \"getsockname\");\n    pragma Import (C, C_Getsockopt, \"getsockopt\");\n    pragma Import (C, C_Inet_Addr, \"inet_addr\");\n@@ -449,4 +481,9 @@ private\n    pragma Import (C, Insert_Socket_In_Set, \"__gnat_insert_socket_in_set\");\n    pragma Import (C, Remove_Socket_From_Set, \"__gnat_remove_socket_from_set\");\n \n+   pragma Import (C, Nonreentrant_Gethostbyname, \"gethostbyname\");\n+   pragma Import (C, Nonreentrant_Gethostbyaddr, \"gethostbyaddr\");\n+   pragma Import (C, Nonreentrant_Getservbyname, \"getservbyname\");\n+   pragma Import (C, Nonreentrant_Getservbyport, \"getservbyport\");\n+\n end GNAT.Sockets.Thin;"}]}