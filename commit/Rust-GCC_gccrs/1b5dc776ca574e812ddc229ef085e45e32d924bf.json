{"sha": "1b5dc776ca574e812ddc229ef085e45e32d924bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI1ZGM3NzZjYTU3NGU4MTJkZGMyMjllZjA4NWU0NWUzMmQ5MjRiZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2012-11-19T22:28:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-11-19T22:28:00Z"}, "message": "stl_algo.h (reverse_copy): Update comment per DR 2074.\n\n\t* include/bits/stl_algo.h (reverse_copy): Update comment per DR 2074.\n\t* include/bits/unordered_map.h: Apply DR 2005 resolution.\n\t* doc/xml/manual/status_cxx2011.xml: Update per DR 2048.\n\t* include/bits/allocator.h (allocator): Apply DR 2103 resolution.\n\t* include/ext/array_allocator.h: Likewise.\n\t* include/ext/bitmap_allocator.h: Likewise.\n\t* include/ext/malloc_allocator.h: Likewise.\n\t* include/ext/mt_allocator.h: Likewise.\n\t* include/ext/new_allocator.h: Likewise.\n\t* include/ext/pool_allocator.h: Likewise.\n\t* include/ext/throw_allocator.h: Likewise.\n\t* include/ext/alloc_traits.h (__allocator_always_compares_equal): Add\n\tadditional specializations.\n\t* include/std/functional: Add comment about DR resolution.\n\t* include/std/future: Likewise.\n\t* include/std/scoped_allocator: Likewise.\n\t* include/std/thread: Likewise.\n\t* testsuite/20_util/allocator/requirements/typedefs.cc: New.\n\t* testsuite/20_util/bind/ref_neg.cc: Adjust dg-error line numbers.\n\nFrom-SVN: r193638", "tree": {"sha": "0a9ec48233a8990289095b21b284986044ba9437", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a9ec48233a8990289095b21b284986044ba9437"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b5dc776ca574e812ddc229ef085e45e32d924bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b5dc776ca574e812ddc229ef085e45e32d924bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b5dc776ca574e812ddc229ef085e45e32d924bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b5dc776ca574e812ddc229ef085e45e32d924bf/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "639498a8750f251bbfa7b412629a3ead4a73e886", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/639498a8750f251bbfa7b412629a3ead4a73e886", "html_url": "https://github.com/Rust-GCC/gccrs/commit/639498a8750f251bbfa7b412629a3ead4a73e886"}], "stats": {"total": 224, "additions": 196, "deletions": 28}, "files": [{"sha": "9636bd7f47f72e6c9ac3a17ce93d0bbcb93eaebf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1b5dc776ca574e812ddc229ef085e45e32d924bf", "patch": "@@ -1,3 +1,25 @@\n+2012-11-19  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/bits/stl_algo.h (reverse_copy): Update comment per DR 2074.\n+\t* include/bits/unordered_map.h: Apply DR 2005 resolution.\n+\t* doc/xml/manual/status_cxx2011.xml: Update per DR 2048.\n+\t* include/bits/allocator.h (allocator): Apply DR 2103 resolution.\n+\t* include/ext/array_allocator.h: Likewise.\n+\t* include/ext/bitmap_allocator.h: Likewise.\n+\t* include/ext/malloc_allocator.h: Likewise.\n+\t* include/ext/mt_allocator.h: Likewise.\n+\t* include/ext/new_allocator.h: Likewise.\n+\t* include/ext/pool_allocator.h: Likewise.\n+\t* include/ext/throw_allocator.h: Likewise.\n+\t* include/ext/alloc_traits.h (__allocator_always_compares_equal): Add\n+\tadditional specializations.\n+\t* include/std/functional: Add comment about DR resolution.\n+\t* include/std/future: Likewise.\n+\t* include/std/scoped_allocator: Likewise.\n+\t* include/std/thread: Likewise.\n+\t* testsuite/20_util/allocator/requirements/typedefs.cc: New.\n+\t* testsuite/20_util/bind/ref_neg.cc: Adjust dg-error line numbers.\n+\n 2012-11-19  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/bits/hashtable.h: Improve comments."}, {"sha": "0164b0b756dce4e2b4efddf573bfdbcfe37f07e3", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2011.xml", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2011.xml?ref=1b5dc776ca574e812ddc229ef085e45e32d924bf", "patch": "@@ -738,11 +738,10 @@ particular release.\n       <entry/>\n     </row>\n     <row>\n-      <?dbhtml bgcolor=\"#B0B0B0\" ?>\n       <entry>20.8.10</entry>\n       <entry>Function template <code>mem_fn</code></entry>\n-      <entry>Partial</entry>\n-      <entry>Missing overloads for reference-qualified member functions</entry>\n+      <entry>Y</entry>\n+      <entry/>\n     </row>\n     <row>\n       <entry>20.8.11</entry>"}, {"sha": "5ccb49188485b206fc12bca3e524e029f5f5f55a", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=1b5dc776ca574e812ddc229ef085e45e32d924bf", "patch": "@@ -1,7 +1,6 @@\n // Allocators -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n-// 2011, 2012 Free Software Foundation, Inc.\n+// Copyright (C) 2001-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -46,6 +45,9 @@\n \n // Define the base class to std::allocator.\n #include <bits/c++allocator.h>\n+#if __cplusplus >= 201103L\n+#include <type_traits>\n+#endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -77,6 +79,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Tp1>\n         struct rebind\n         { typedef allocator<_Tp1> other; };\n+\n+#if __cplusplus >= 201103L\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2103. std::allocator propagate_on_container_move_assignment\n+      typedef true_type propagate_on_container_move_assignment;\n+#endif\n     };\n \n   /**\n@@ -103,6 +111,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         struct rebind\n         { typedef allocator<_Tp1> other; };\n \n+#if __cplusplus >= 201103L\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2103. std::allocator propagate_on_container_move_assignment\n+      typedef true_type propagate_on_container_move_assignment;\n+#endif\n+\n       allocator() throw() { }\n \n       allocator(const allocator& __a) throw()"}, {"sha": "77c75b48d28d81749915332054653918fef53672", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=1b5dc776ca574e812ddc229ef085e45e32d924bf", "patch": "@@ -1486,7 +1486,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  range @p [__result,__result+(__last-__first)) such that the\n    *  order of the elements is reversed.  For every @c i such that @p\n    *  0<=i<=(__last-__first), @p reverse_copy() performs the\n-   *  assignment @p *(__result+(__last-__first)-i) = *(__first+i).\n+   *  assignment @p *(__result+(__last-__first)-1-i) = *(__first+i).\n    *  The ranges @p [__first,__last) and @p\n    *  [__result,__result+(__last-__first)) must not overlap.\n   */"}, {"sha": "e2b83db37002d6bc6047d3a636519e656a2864f1", "filename": "libstdc++-v3/include/bits/unordered_map.h", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h?ref=1b5dc776ca574e812ddc229ef085e45e32d924bf", "patch": "@@ -362,7 +362,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       insert(const value_type& __x)\n       { return _M_h.insert(__x); }\n \n-      template<typename _Pair>\n+      template<typename _Pair, typename = typename\n+\t       std::enable_if<std::is_constructible<value_type,\n+\t\t\t\t\t\t    _Pair&&>::value>::type>\n \tstd::pair<iterator, bool>\n \tinsert(_Pair&& __x)\n \t{ return _M_h.insert(std::move(__x)); }\n@@ -394,7 +396,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       insert(const_iterator __hint, const value_type& __x)\n       { return _M_h.insert(__hint, __x); }\n \n-      template<typename _Pair>\n+      template<typename _Pair, typename = typename\n+\t       std::enable_if<std::is_constructible<value_type,\n+\t\t\t\t\t\t    _Pair&&>::value>::type>\n \titerator\n \tinsert(const_iterator __hint, _Pair&& __x)\n \t{ return _M_h.insert(__hint, std::move(__x)); }\n@@ -1023,7 +1027,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       insert(const value_type& __x)\n       { return _M_h.insert(__x); }\n \n-      template<typename _Pair>\n+      template<typename _Pair, typename = typename\n+\t       std::enable_if<std::is_constructible<value_type,\n+\t\t\t\t\t\t    _Pair&&>::value>::type>\n \titerator\n \tinsert(_Pair&& __x)\n \t{ return _M_h.insert(std::move(__x)); }\n@@ -1053,7 +1059,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       insert(const_iterator __hint, const value_type& __x)\n       { return _M_h.insert(__hint, __x); }\n \n-      template<typename _Pair>\n+      template<typename _Pair, typename = typename\n+\t       std::enable_if<std::is_constructible<value_type,\n+\t\t\t\t\t\t    _Pair&&>::value>::type>\n \titerator\n \tinsert(const_iterator __hint, _Pair&& __x)\n \t{ return _M_h.insert(__hint, std::move(__x)); }"}, {"sha": "a0834c36c85557d2b64163a0137d1b64cb1463de", "filename": "libstdc++-v3/include/ext/alloc_traits.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h?ref=1b5dc776ca574e812ddc229ef085e45e32d924bf", "patch": "@@ -73,6 +73,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     const bool\n     __allocator_always_compares_equal<array_allocator<_Tp, _Array>>::value;\n \n+  template<typename> struct bitmap_allocator;\n+\n+  template<typename _Tp>\n+    struct __allocator_always_compares_equal<bitmap_allocator<_Tp>>\n+    { static const bool value = true; };\n+\n+  template<typename _Tp>\n+    const bool __allocator_always_compares_equal<bitmap_allocator<_Tp>>::value;\n+\n+  template<typename> struct malloc_allocator;\n+\n+  template<typename _Tp>\n+    struct __allocator_always_compares_equal<malloc_allocator<_Tp>>\n+    { static const bool value = true; };\n+\n+  template<typename _Tp>\n+    const bool __allocator_always_compares_equal<malloc_allocator<_Tp>>::value;\n+\n   template<typename> struct mt_allocator;\n \n   template<typename _Tp>"}, {"sha": "736ae02373e9b86d2c746f1d3abaa295e9d7d2f1", "filename": "libstdc++-v3/include/ext/array_allocator.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h?ref=1b5dc776ca574e812ddc229ef085e45e32d924bf", "patch": "@@ -1,7 +1,6 @@\n // array allocator -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2004-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,6 +34,9 @@\n #include <bits/functexcept.h>\n #include <tr1/array>\n #include <bits/move.h>\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#include <type_traits>\n+#endif\n \n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n@@ -113,6 +115,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Tp        \tvalue_type;\n       typedef _Array\t\tarray_type;\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2103. std::allocator propagate_on_container_move_assignment\n+      typedef std::true_type propagate_on_container_move_assignment;\n+#endif\n+\n     private:\n       array_type* \t_M_array;\n       size_type \t_M_used;"}, {"sha": "eff9405971585b39a5f55b6e18ccc92d48d98f4b", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=1b5dc776ca574e812ddc229ef085e45e32d924bf", "patch": "@@ -1,7 +1,6 @@\n // Bitmap Allocator. -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2004-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -703,6 +702,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  typedef bitmap_allocator<_Tp1> other;\n \t};\n \n+#if __cplusplus >= 201103L\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2103. propagate_on_container_move_assignment\n+      typedef std::true_type propagate_on_container_move_assignment;\n+#endif\n+\n     private:\n       template<size_t _BSize, size_t _AlignSize>\n         struct aligned_size"}, {"sha": "618057972529cd44031e4ec3756e15ee8486771b", "filename": "libstdc++-v3/include/ext/malloc_allocator.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h?ref=1b5dc776ca574e812ddc229ef085e45e32d924bf", "patch": "@@ -1,8 +1,6 @@\n // Allocator that wraps \"C\" malloc -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n-// 2010, 2011\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2001-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,6 +33,9 @@\n #include <new>\n #include <bits/functexcept.h>\n #include <bits/move.h>\n+#if __cplusplus >= 201103L\n+#include <type_traits>\n+#endif\n \n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n@@ -67,6 +68,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         struct rebind\n         { typedef malloc_allocator<_Tp1> other; };\n \n+#if __cplusplus >= 201103L\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2103. propagate_on_container_move_assignment\n+      typedef std::true_type propagate_on_container_move_assignment;\n+#endif\n+\n       malloc_allocator() _GLIBCXX_USE_NOEXCEPT { }\n \n       malloc_allocator(const malloc_allocator&) _GLIBCXX_USE_NOEXCEPT { }"}, {"sha": "5900701be74c57a8701f9acbfd7bc5d67cde24d0", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=1b5dc776ca574e812ddc229ef085e45e32d924bf", "patch": "@@ -1,7 +1,6 @@\n // MT-optimized allocator -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2003-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,6 +34,9 @@\n #include <bits/functexcept.h>\n #include <ext/atomicity.h>\n #include <bits/move.h>\n+#if __cplusplus >= 201103L\n+#include <type_traits>\n+#endif\n \n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n@@ -576,6 +578,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef const _Tp&                const_reference;\n       typedef _Tp                       value_type;\n \n+#if __cplusplus >= 201103L\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2103. propagate_on_container_move_assignment\n+      typedef std::true_type propagate_on_container_move_assignment;\n+#endif\n+\n       pointer\n       address(reference __x) const _GLIBCXX_NOEXCEPT\n       { return std::__addressof(__x); }"}, {"sha": "4523bb85dbf5ca42420232dff4faf6d88ed9b7d0", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=1b5dc776ca574e812ddc229ef085e45e32d924bf", "patch": "@@ -1,7 +1,6 @@\n // Allocator that wraps operator new -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2009, 2010\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2001-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,6 +33,9 @@\n #include <new>\n #include <bits/functexcept.h>\n #include <bits/move.h>\n+#if __cplusplus >= 201103L\n+#include <type_traits>\n+#endif\n \n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n@@ -68,6 +70,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         struct rebind\n         { typedef new_allocator<_Tp1> other; };\n \n+#if __cplusplus >= 201103L\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2103. propagate_on_container_move_assignment\n+      typedef std::true_type propagate_on_container_move_assignment;\n+#endif\n+\n       new_allocator() _GLIBCXX_USE_NOEXCEPT { }\n \n       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }"}, {"sha": "2bbbd1e5f9493b8c85f2c3a41db5920a516d442b", "filename": "libstdc++-v3/include/ext/pool_allocator.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h?ref=1b5dc776ca574e812ddc229ef085e45e32d924bf", "patch": "@@ -1,8 +1,6 @@\n // Allocators -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n-// 2010, 2011\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2001-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -51,6 +49,9 @@\n #include <ext/atomicity.h>\n #include <ext/concurrence.h>\n #include <bits/move.h>\n+#if __cplusplus >= 201103L\n+#include <type_traits>\n+#endif\n \n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n@@ -140,6 +141,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         struct rebind\n         { typedef __pool_alloc<_Tp1> other; };\n \n+#if __cplusplus >= 201103L\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2103. propagate_on_container_move_assignment\n+      typedef std::true_type propagate_on_container_move_assignment;\n+#endif\n+\n       __pool_alloc() _GLIBCXX_USE_NOEXCEPT { }\n \n       __pool_alloc(const __pool_alloc&) _GLIBCXX_USE_NOEXCEPT { }"}, {"sha": "599363e3771ed9d0db49cb99b48475a0d386c102", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=1b5dc776ca574e812ddc229ef085e45e32d924bf", "patch": "@@ -643,6 +643,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef value_type& \t\t\treference;\n       typedef const value_type& \t\tconst_reference;\n \n+#if __cplusplus >= 201103L\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2103. std::allocator propagate_on_container_move_assignment\n+      typedef std::true_type propagate_on_container_move_assignment;\n+#endif\n+\n     private:\n       typedef _Cond\t\t\t\tcondition_type;\n "}, {"sha": "4d6e6a83161b5fe9612678c8b7991ae6b02d5320", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=1b5dc776ca574e812ddc229ef085e45e32d924bf", "patch": "@@ -810,6 +810,8 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n       _Res _Class::*__pm;\n     };\n \n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 2048.  Unnecessary mem_fn overloads\n   /**\n    *  @brief Returns a function object that forwards to the member\n    *  pointer @a pm."}, {"sha": "c24ab77d108263c083052106c0467a301d7085c5", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=1b5dc776ca574e812ddc229ef085e45e32d924bf", "patch": "@@ -1132,6 +1132,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _M_storage(__future_base::_S_allocate_result<void>(__a))\n         { }\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2095.  missing constructors needed for uses-allocator construction\n       template<typename _Allocator>\n         promise(allocator_arg_t, const _Allocator&, promise&& __rhs)\n         : _M_future(std::move(__rhs._M_future)),\n@@ -1306,6 +1308,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Construction and destruction\n       packaged_task() noexcept { }\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2095.  missing constructors needed for uses-allocator construction\n       template<typename _Allocator>\n         explicit\n         packaged_task(allocator_arg_t, const _Allocator& __a) noexcept\n@@ -1318,6 +1322,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         : _M_state(std::make_shared<_State_type>(std::forward<_Fn>(__fn)))\n         { }\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2097.  packaged_task constructors should be constrained\n       template<typename _Fn, typename _Allocator, typename = typename\n                __constrain_pkgdtask<packaged_task, _Fn>::__type>\n         explicit"}, {"sha": "48cf033ea0297dbe87f0890edd345b6cab4fbdf0", "filename": "libstdc++-v3/include/std/scoped_allocator", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator?ref=1b5dc776ca574e812ddc229ef085e45e32d924bf", "patch": "@@ -349,6 +349,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tconstruct(pair<_T1, _T2>* __p, piecewise_construct_t,\n \t\t  tuple<_Args1...> __x, tuple<_Args2...> __y)\n \t{\n+\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t  // 2203.  wrong argument types for piecewise construction\n \t  auto& __inner = inner_allocator();\n \t  auto __x_use_tag\n \t    = __use_alloc<_T1, inner_allocator_type, _Args1...>(__inner);"}, {"sha": "718c192c76dfe3a8f7d35783915883878a5542bd", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=1b5dc776ca574e812ddc229ef085e45e32d924bf", "patch": "@@ -120,6 +120,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   public:\n     thread() noexcept = default;\n+    // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+    // 2097.  packaged_task constructors should be constrained\n     thread(thread&) = delete;\n     thread(const thread&) = delete;\n "}, {"sha": "37d5032ad80b8993bd07fcb5b1fd6846be4de7c8", "filename": "libstdc++-v3/testsuite/20_util/allocator/requirements/typedefs.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Frequirements%2Ftypedefs.cc?ref=1b5dc776ca574e812ddc229ef085e45e32d924bf", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <memory>\n+#include <type_traits>\n+\n+// Check std::allocator for required typedefs.\n+\n+using std::is_same;\n+using std::allocator;\n+\n+static_assert( is_same<allocator<int>::size_type, std::size_t>::value,\n+               \"size_type\" );\n+static_assert( is_same<allocator<int>::difference_type, std::ptrdiff_t>::value,\n+               \"difference_type\" );\n+static_assert( is_same<allocator<int>::pointer, int*>::value,\n+               \"pointer\" );\n+static_assert( is_same<allocator<int>::const_pointer, const int*>::value,\n+               \"const_pointer\" );\n+static_assert( is_same<allocator<int>::reference, int&>::value,\n+               \"reference\" );\n+static_assert( is_same<allocator<int>::const_reference, const int&>::value,\n+               \"const_reference\" );\n+static_assert( is_same<allocator<int>::value_type, int>::value,\n+               \"value_type\" );\n+\n+static_assert( allocator<int>::propagate_on_container_move_assignment::value,\n+               \"propagate_on_container_move_assignment is true\" );"}, {"sha": "0f1b4cfed484c1076c0912bf0c29057f41654b81", "filename": "libstdc++-v3/testsuite/20_util/bind/ref_neg.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fref_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5dc776ca574e812ddc229ef085e45e32d924bf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fref_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fref_neg.cc?ref=1b5dc776ca574e812ddc229ef085e45e32d924bf", "patch": "@@ -30,10 +30,10 @@ void test01()\n {\n   const int dummy = 0;\n   std::bind(&inc, _1)(0);               // { dg-error  \"no match\" }\n-  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1206 }\n-  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1220 }\n-  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1234 }\n-  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1248 }\n+  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1208 }\n+  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1222 }\n+  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1236 }\n+  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1250 }\n   std::bind(&inc, std::ref(dummy))();\t// { dg-error  \"no match\" }\n }\n "}]}