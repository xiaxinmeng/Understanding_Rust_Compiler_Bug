{"sha": "2e44cd8b00ffeabf4a8ec8683ef97802bf9a9345", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU0NGNkOGIwMGZmZWFiZjRhOGVjODY4M2VmOTc4MDJiZjlhOTM0NQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2015-10-21T20:31:26Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2015-10-21T20:31:26Z"}, "message": "Change default of non-overlapping address space conversion\n\nThe current default of making all undefined coversions being\nset to null is not useful.  It has caused all users to lie\nand say that spaces are subsets when they are not, just so\nthat they can override the conversion.\n\n\t* expr.c (expand_expr_real_2): Use convert_modes on disjoint\n\taddress spaces.\n\nFrom-SVN: r229142", "tree": {"sha": "a63ae25db3d4ef928878bfc8c3ddc74ce9438357", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a63ae25db3d4ef928878bfc8c3ddc74ce9438357"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e44cd8b00ffeabf4a8ec8683ef97802bf9a9345", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e44cd8b00ffeabf4a8ec8683ef97802bf9a9345", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e44cd8b00ffeabf4a8ec8683ef97802bf9a9345", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e44cd8b00ffeabf4a8ec8683ef97802bf9a9345/comments", "author": null, "committer": null, "parents": [{"sha": "abcc43f53238695a91e65e639182c03df1b9cf0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abcc43f53238695a91e65e639182c03df1b9cf0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abcc43f53238695a91e65e639182c03df1b9cf0c"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "ec60f845bb704a02cb37bd00308b4703b0255704", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e44cd8b00ffeabf4a8ec8683ef97802bf9a9345/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e44cd8b00ffeabf4a8ec8683ef97802bf9a9345/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e44cd8b00ffeabf4a8ec8683ef97802bf9a9345", "patch": "@@ -1,3 +1,8 @@\n+2015-10-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* expr.c (expand_expr_real_2): Use convert_modes on disjoint\n+\taddress spaces.\n+\n 2015-10-21  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* builtins.c (fold_builtin_cabs): Delete."}, {"sha": "da6887019288b0bc42aeb3bb4285b1cdb1ecc65e", "filename": "gcc/expr.c", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e44cd8b00ffeabf4a8ec8683ef97802bf9a9345/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e44cd8b00ffeabf4a8ec8683ef97802bf9a9345/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=2e44cd8b00ffeabf4a8ec8683ef97802bf9a9345", "patch": "@@ -8171,34 +8171,40 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n     case ADDR_SPACE_CONVERT_EXPR:\n       {\n \ttree treeop0_type = TREE_TYPE (treeop0);\n-\taddr_space_t as_to;\n-\taddr_space_t as_from;\n \n \tgcc_assert (POINTER_TYPE_P (type));\n \tgcc_assert (POINTER_TYPE_P (treeop0_type));\n \n-\tas_to = TYPE_ADDR_SPACE (TREE_TYPE (type));\n-\tas_from = TYPE_ADDR_SPACE (TREE_TYPE (treeop0_type));\n+\taddr_space_t as_to = TYPE_ADDR_SPACE (TREE_TYPE (type));\n+\taddr_space_t as_from = TYPE_ADDR_SPACE (TREE_TYPE (treeop0_type));\n \n         /* Conversions between pointers to the same address space should\n \t   have been implemented via CONVERT_EXPR / NOP_EXPR.  */\n \tgcc_assert (as_to != as_from);\n \n+\top0 = expand_expr (treeop0, NULL_RTX, VOIDmode, modifier);\n+\n         /* Ask target code to handle conversion between pointers\n \t   to overlapping address spaces.  */\n \tif (targetm.addr_space.subset_p (as_to, as_from)\n \t    || targetm.addr_space.subset_p (as_from, as_to))\n \t  {\n-\t    op0 = expand_expr (treeop0, NULL_RTX, VOIDmode, modifier);\n \t    op0 = targetm.addr_space.convert (op0, treeop0_type, type);\n-\t    gcc_assert (op0);\n-\t    return op0;\n \t  }\n-\n-\t/* For disjoint address spaces, converting anything but\n-\t   a null pointer invokes undefined behaviour.  We simply\n-\t   always return a null pointer here.  */\n-\treturn CONST0_RTX (mode);\n+        else\n+          {\n+\t    /* For disjoint address spaces, converting anything but a null\n+\t       pointer invokes undefined behaviour.  We truncate or extend the\n+\t       value as if we'd converted via integers, which handles 0 as\n+\t       required, and all others as the programmer likely expects.  */\n+#ifndef POINTERS_EXTEND_UNSIGNED\n+\t    const int POINTERS_EXTEND_UNSIGNED = 1;\n+#endif\n+\t    op0 = convert_modes (mode, TYPE_MODE (treeop0_type),\n+\t\t\t\t op0, POINTERS_EXTEND_UNSIGNED);\n+\t  }\n+\tgcc_assert (op0);\n+\treturn op0;\n       }\n \n     case POINTER_PLUS_EXPR:"}]}