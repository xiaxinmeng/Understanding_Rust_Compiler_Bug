{"sha": "d68a9eacebb8439ef60b15fe1331d8c007b65bc7", "node_id": "C_kwDOANBUbNoAKGQ2OGE5ZWFjZWJiODQzOWVmNjBiMTVmZTEzMzFkOGMwMDdiNjViYzc", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-09-21T22:15:42Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-09-21T22:44:03Z"}, "message": "Fix byte char and byte string lexing code\n\nThere were two warnings in lexer parse_byte_char and parse_byte_string\ncode for arches with signed chars:\n\nrust-lex.cc: In member function\n             \u2018Rust::TokenPtr Rust::Lexer::parse_byte_char(Location)\u2019:\nrust-lex.cc:1564:21: warning: comparison is always false due to limited\n                     range of data type [-Wtype-limits]\n 1564 |       if (byte_char > 127)\n      |           ~~~~~~~~~~^~~~~\nrust-lex.cc: In member function\n             \u2018Rust::TokenPtr Rust::Lexer::parse_byte_string(Location)\u2019:\nrust-lex.cc:1639:27: warning: comparison is always false due to limited\n                     range of data type [-Wtype-limits]\n 1639 |           if (output_char > 127)\n      |               ~~~~~~~~~~~~^~~~~\n\nThe fix would be to cast to an unsigned char before the comparison.\nBut that is actually wrong, and would produce the following errors\nparsing a byte char or byte string:\n\nbytecharstring.rs:3:14: error: \u2018byte char\u2019 \u2018\ufffd\u2019 out of range\n    3 |   let _bc = b'\\x80';\n      |              ^\nbytecharstring.rs:4:14: error: character \u2018\ufffd\u2019 in byte string out of range\n    4 |   let _bs = b\"foo\\x80bar\";\n      |              ^\n\nBoth byte chars and byte strings may contain up to \\xFF (255)\ncharacters. It is utf-8 chars or strings that can only\n\nRemove the faulty check and add a new testcase bytecharstring.rs\nthat checks byte chars and strings do accept > 127 hex char\nescapes, but utf-8 chars and strings reject such hex char escapes.", "tree": {"sha": "74d034b08cf293959f12c97c8a111a8c5755c722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74d034b08cf293959f12c97c8a111a8c5755c722"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d68a9eacebb8439ef60b15fe1331d8c007b65bc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d68a9eacebb8439ef60b15fe1331d8c007b65bc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d68a9eacebb8439ef60b15fe1331d8c007b65bc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d68a9eacebb8439ef60b15fe1331d8c007b65bc7/comments", "author": null, "committer": null, "parents": [{"sha": "98359f20cd2d9268df582ea1ee289e0ea69efcb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98359f20cd2d9268df582ea1ee289e0ea69efcb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98359f20cd2d9268df582ea1ee289e0ea69efcb5"}], "stats": {"total": 23, "additions": 8, "deletions": 15}, "files": [{"sha": "b70877be9ffea335bef9998ddc2054aeb858cbe7", "filename": "gcc/rust/lex/rust-lex.cc", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68a9eacebb8439ef60b15fe1331d8c007b65bc7/gcc%2Frust%2Flex%2Frust-lex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68a9eacebb8439ef60b15fe1331d8c007b65bc7/gcc%2Frust%2Flex%2Frust-lex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.cc?ref=d68a9eacebb8439ef60b15fe1331d8c007b65bc7", "patch": "@@ -1559,13 +1559,6 @@ Lexer::parse_byte_char (Location loc)\n       byte_char = std::get<0> (escape_length_pair);\n       length += std::get<1> (escape_length_pair);\n \n-      if (byte_char > 127)\n-\t{\n-\t  rust_error_at (get_current_location (),\n-\t\t\t \"%<byte char%> %<%c%> out of range\", byte_char);\n-\t  byte_char = 0;\n-\t}\n-\n       current_char = peek_input ();\n \n       if (current_char != '\\'')\n@@ -1634,14 +1627,6 @@ Lexer::parse_byte_string (Location loc)\n \t  else\n \t    length += std::get<1> (escape_length_pair);\n \n-\t  if (output_char > 127)\n-\t    {\n-\t      rust_error_at (get_current_location (),\n-\t\t\t     \"character %<%c%> in byte string out of range\",\n-\t\t\t     output_char);\n-\t      output_char = 0;\n-\t    }\n-\n \t  if (output_char != 0)\n \t    str += output_char;\n "}, {"sha": "9242e2c5a0bce2c3d2587505c440a33c5e916aac", "filename": "gcc/testsuite/rust/compile/bytecharstring.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68a9eacebb8439ef60b15fe1331d8c007b65bc7/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbytecharstring.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68a9eacebb8439ef60b15fe1331d8c007b65bc7/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbytecharstring.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbytecharstring.rs?ref=d68a9eacebb8439ef60b15fe1331d8c007b65bc7", "patch": "@@ -0,0 +1,8 @@\n+fn main ()\n+{\n+  let _bc = b'\\x80';\n+  let _bs = b\"foo\\x80bar\";\n+\n+  let _c = '\\xef';        // { dg-error \"out of range\" }\n+  let _s = \"Foo\\xEFBar\";  // { dg-error \"out of range\" }\n+}"}]}