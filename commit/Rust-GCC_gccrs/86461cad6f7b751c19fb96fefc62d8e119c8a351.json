{"sha": "86461cad6f7b751c19fb96fefc62d8e119c8a351", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY0NjFjYWQ2ZjdiNzUxYzE5ZmI5NmZlZmM2MmQ4ZTExOWM4YTM1MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-03-18T20:16:05Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-03-18T20:16:05Z"}, "message": "re PR c++/70139 (-fno-elide-constructor makes static std::regex to throw)\n\n\tPR c++/70139\n\t* constexpr.c (cxx_eval_call_expression): Fix trivial copy.\n\nFrom-SVN: r234345", "tree": {"sha": "8bb3adddd6f7626f358ae40007418a5b73ac4627", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bb3adddd6f7626f358ae40007418a5b73ac4627"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86461cad6f7b751c19fb96fefc62d8e119c8a351", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86461cad6f7b751c19fb96fefc62d8e119c8a351", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86461cad6f7b751c19fb96fefc62d8e119c8a351", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86461cad6f7b751c19fb96fefc62d8e119c8a351/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "14d7d4be52585b624f1439388ab0dfd5bd3e72c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14d7d4be52585b624f1439388ab0dfd5bd3e72c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14d7d4be52585b624f1439388ab0dfd5bd3e72c7"}], "stats": {"total": 70, "additions": 50, "deletions": 20}, "files": [{"sha": "cd98a53b0ac43ecc38a18f310fd134147c37a869", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86461cad6f7b751c19fb96fefc62d8e119c8a351/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86461cad6f7b751c19fb96fefc62d8e119c8a351/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=86461cad6f7b751c19fb96fefc62d8e119c8a351", "patch": "@@ -1,5 +1,8 @@\n 2016-03-18  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/70139\n+\t* constexpr.c (cxx_eval_call_expression): Fix trivial copy.\n+\n \tPR c++/70147\n \t* class.c (vptr_via_virtual_p): New.\n \t(most_primary_binfo): Factor out of build_rtti_vtbl_entries."}, {"sha": "1f496b5f9bd67b0e6989fca0b924ab8a4dd317d1", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86461cad6f7b751c19fb96fefc62d8e119c8a351/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86461cad6f7b751c19fb96fefc62d8e119c8a351/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=86461cad6f7b751c19fb96fefc62d8e119c8a351", "patch": "@@ -1239,19 +1239,39 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n       return t;\n     }\n \n+  constexpr_ctx new_ctx = *ctx;\n+  if (DECL_CONSTRUCTOR_P (fun) && !ctx->object\n+      && TREE_CODE (t) == AGGR_INIT_EXPR)\n+    {\n+      /* We want to have an initialization target for an AGGR_INIT_EXPR.\n+\t If we don't already have one in CTX, use the AGGR_INIT_EXPR_SLOT.  */\n+      new_ctx.object = AGGR_INIT_EXPR_SLOT (t);\n+      tree ctor = new_ctx.ctor = build_constructor (DECL_CONTEXT (fun), NULL);\n+      CONSTRUCTOR_NO_IMPLICIT_ZERO (ctor) = true;\n+      ctx->values->put (new_ctx.object, ctor);\n+      ctx = &new_ctx;\n+    }\n+\n   /* Shortcut trivial constructor/op=.  */\n   if (trivial_fn_p (fun))\n     {\n+      tree init = NULL_TREE;\n       if (call_expr_nargs (t) == 2)\n-\t{\n-\t  tree arg = convert_from_reference (get_nth_callarg (t, 1));\n-\t  return cxx_eval_constant_expression (ctx, arg,\n-\t\t\t\t\t       lval, non_constant_p,\n-\t\t\t\t\t       overflow_p);\n-\t}\n+\tinit = convert_from_reference (get_nth_callarg (t, 1));\n       else if (TREE_CODE (t) == AGGR_INIT_EXPR\n \t       && AGGR_INIT_ZERO_FIRST (t))\n-\treturn build_zero_init (DECL_CONTEXT (fun), NULL_TREE, false);\n+\tinit = build_zero_init (DECL_CONTEXT (fun), NULL_TREE, false);\n+      if (init)\n+\t{\n+\t  tree op = get_nth_callarg (t, 0);\n+\t  if (is_dummy_object (op))\n+\t    op = ctx->object;\n+\t  else\n+\t    op = build1 (INDIRECT_REF, TREE_TYPE (TREE_TYPE (op)), op);\n+\t  tree set = build2 (MODIFY_EXPR, TREE_TYPE (op), op, init);\n+\t  return cxx_eval_constant_expression (ctx, set, lval,\n+\t\t\t\t\t       non_constant_p, overflow_p);\n+\t}\n     }\n \n   /* We can't defer instantiating the function any longer.  */\n@@ -1287,19 +1307,6 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n         }\n     }\n \n-  constexpr_ctx new_ctx = *ctx;\n-  if (DECL_CONSTRUCTOR_P (fun) && !ctx->object\n-      && TREE_CODE (t) == AGGR_INIT_EXPR)\n-    {\n-      /* We want to have an initialization target for an AGGR_INIT_EXPR.\n-\t If we don't already have one in CTX, use the AGGR_INIT_EXPR_SLOT.  */\n-      new_ctx.object = AGGR_INIT_EXPR_SLOT (t);\n-      tree ctor = new_ctx.ctor = build_constructor (DECL_CONTEXT (fun), NULL);\n-      CONSTRUCTOR_NO_IMPLICIT_ZERO (ctor) = true;\n-      ctx->values->put (new_ctx.object, ctor);\n-      ctx = &new_ctx;\n-    }\n-\n   bool non_constant_args = false;\n   cxx_bind_parameters_in_call (ctx, t, &new_call,\n \t\t\t       non_constant_p, overflow_p, &non_constant_args);"}, {"sha": "f4b74a7eec9fc7e4bb231343f6b553cb60e37198", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-trivial1.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86461cad6f7b751c19fb96fefc62d8e119c8a351/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-trivial1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86461cad6f7b751c19fb96fefc62d8e119c8a351/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-trivial1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-trivial1.C?ref=86461cad6f7b751c19fb96fefc62d8e119c8a351", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/70139\n+// { dg-options \"-fno-elide-constructors\" }\n+// { dg-do compile { target c++11 } }\n+\n+template<class T, class U>\n+struct A\n+{\n+  T a;\n+  U b;\n+  constexpr A () : a (), b () { }\n+  constexpr A (const T &x, const U &y) : a (x), b (y) { }\n+};\n+struct B\n+{\n+  constexpr B (const bool x) : c (x) {}\n+  constexpr bool operator!= (const B x) const { return c != x.c; }\n+  bool c;\n+};\n+constexpr static A<B, B*> d[] = { { B (true), nullptr }, { B (false), nullptr } };\n+static_assert (d[0].a != d[1].a, \"\");"}]}