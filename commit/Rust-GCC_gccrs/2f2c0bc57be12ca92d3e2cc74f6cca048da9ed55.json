{"sha": "2f2c0bc57be12ca92d3e2cc74f6cca048da9ed55", "node_id": "C_kwDOANBUbNoAKDJmMmMwYmM1N2JlMTJjYTkyZDNlMmNjNzRmNmNjYTA0OGRhOWVkNTU", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2023-02-27T16:22:44Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2023-02-28T01:13:34Z"}, "message": "testsuite: Add CRIS to targets not xfailing gcc.dg/attr-alloc_size-11.c:50,51\n\nReacting to a long-standing XPASS for CRIS.  Maybe better do\nas https://gcc.gnu.org/PR79356#c11 suggests: xfail it for\nx86 only ...except I see m68k also does not xpass.\n\ntestsuite:\n\tPR testsuite/79356\n\t* gcc.dg/attr-alloc_size-11.c: Add CRIS to the list\n\tof targets excluding xfail on lines 50 and 51.", "tree": {"sha": "3a62337799709cde253ddf599648ee4034cafd19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a62337799709cde253ddf599648ee4034cafd19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f2c0bc57be12ca92d3e2cc74f6cca048da9ed55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f2c0bc57be12ca92d3e2cc74f6cca048da9ed55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f2c0bc57be12ca92d3e2cc74f6cca048da9ed55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f2c0bc57be12ca92d3e2cc74f6cca048da9ed55/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c58f4b798177d419c5af37b7e23c490849f2d45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c58f4b798177d419c5af37b7e23c490849f2d45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c58f4b798177d419c5af37b7e23c490849f2d45"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "a2efe1289151c4a6d599649eb4ba5996342c46d1", "filename": "gcc/testsuite/gcc.dg/attr-alloc_size-11.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2c0bc57be12ca92d3e2cc74f6cca048da9ed55/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2c0bc57be12ca92d3e2cc74f6cca048da9ed55/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-11.c?ref=2f2c0bc57be12ca92d3e2cc74f6cca048da9ed55", "patch": "@@ -47,8 +47,8 @@ typedef __SIZE_TYPE__    size_t;\n \n /* The following tests fail because of missing range information.  The xfail\n    exclusions are PR79356.  */\n-TEST (signed char, SCHAR_MIN + 2, ALLOC_MAX);   /* { dg-warning \"argument 1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12\" \"missing range info for signed char\" { xfail { ! { aarch64*-*-* arm*-*-* avr-*-* alpha*-*-* ia64-*-* mips*-*-* or1k*-*-* pdp11*-*-* powerpc*-*-* sparc*-*-* s390*-*-* visium-*-* msp430-*-* nvptx*-*-*} } } } */\n-TEST (short, SHRT_MIN + 2, ALLOC_MAX); /* { dg-warning \"argument 1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12\" \"missing range info for short\" { xfail { ! { aarch64*-*-* arm*-*-* alpha*-*-* avr-*-* ia64-*-* mips*-*-* or1k*-*-* pdp11*-*-* powerpc*-*-* sparc*-*-* s390x-*-* visium-*-* msp430-*-* nvptx*-*-* } } } } */\n+TEST (signed char, SCHAR_MIN + 2, ALLOC_MAX);   /* { dg-warning \"argument 1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12\" \"missing range info for signed char\" { xfail { ! { aarch64*-*-* arm*-*-* avr-*-* alpha*-*-* cris-*-* ia64-*-* mips*-*-* or1k*-*-* pdp11*-*-* powerpc*-*-* sparc*-*-* s390*-*-* visium-*-* msp430-*-* nvptx*-*-*} } } } */\n+TEST (short, SHRT_MIN + 2, ALLOC_MAX); /* { dg-warning \"argument 1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12\" \"missing range info for short\" { xfail { ! { aarch64*-*-* arm*-*-* alpha*-*-* avr-*-* cris-*-* ia64-*-* mips*-*-* or1k*-*-* pdp11*-*-* powerpc*-*-* sparc*-*-* s390x-*-* visium-*-* msp430-*-* nvptx*-*-* } } } } */\n TEST (int, INT_MIN + 2, ALLOC_MAX);    /* { dg-warning \"argument 1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12\" } */\n TEST (int, -3, ALLOC_MAX);             /* { dg-warning \"argument 1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12\" } */\n TEST (int, -2, ALLOC_MAX);             /* { dg-warning \"argument 1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12\" } */"}]}