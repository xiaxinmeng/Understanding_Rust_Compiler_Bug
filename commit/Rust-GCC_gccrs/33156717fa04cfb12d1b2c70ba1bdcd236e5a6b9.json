{"sha": "33156717fa04cfb12d1b2c70ba1bdcd236e5a6b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMxNTY3MTdmYTA0Y2ZiMTJkMWIyYzcwYmExYmRjZDIzNmU1YTZiOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2005-03-18T20:15:06Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2005-03-18T20:15:06Z"}, "message": "basic-block.h (scale_bbs_frequencies_int, [...]): Declare.\n\n\t* basic-block.h (scale_bbs_frequencies_int,\n\tscale_bbs_frequencies_gcov_type): Declare.\n\t* cfg.c (RDIV): New macro.\n\t(update_bb_frequency_for_threading): Fix.\n\t* basic-block.h (scale_bbs_frequencies_int,\n\tscale_bbs_frequencies_gcov_type): New.\n\t* cfgloopmanip.c (scale_bbs_frequencies): Kill.\n\t(scale_loop_frequencies, duplicate_loop_to_header_edge): Use\n\tscale_bbs_frequencies_int.\n\t* tree-ssa-loop-ch.c (copy_loop_headers): Fix profiling info.\n\nCo-Authored-By: Dale Johannesen <dalej@apple.com>\n\nFrom-SVN: r96700", "tree": {"sha": "c8155205eea9acda3648c08b1f00c2d20be9270e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8155205eea9acda3648c08b1f00c2d20be9270e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33156717fa04cfb12d1b2c70ba1bdcd236e5a6b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33156717fa04cfb12d1b2c70ba1bdcd236e5a6b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33156717fa04cfb12d1b2c70ba1bdcd236e5a6b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33156717fa04cfb12d1b2c70ba1bdcd236e5a6b9/comments", "author": null, "committer": null, "parents": [{"sha": "76ef0a0d97acb099fe476a8394704c6db73a4109", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76ef0a0d97acb099fe476a8394704c6db73a4109", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76ef0a0d97acb099fe476a8394704c6db73a4109"}], "stats": {"total": 119, "additions": 91, "deletions": 28}, "files": [{"sha": "73d040985354ab21e84e1f26c5e519eabc75fae3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33156717fa04cfb12d1b2c70ba1bdcd236e5a6b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33156717fa04cfb12d1b2c70ba1bdcd236e5a6b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33156717fa04cfb12d1b2c70ba1bdcd236e5a6b9", "patch": "@@ -1,3 +1,17 @@\n+2005-03-18  Jan Hubicka  <jh@suse.cz>\n+\t    Dale Johannesen  <dalej@apple.com>\n+\n+\t* basic-block.h (scale_bbs_frequencies_int,\n+\tscale_bbs_frequencies_gcov_type): Declare.\n+\t* cfg.c (RDIV): New macro.\n+\t(update_bb_frequency_for_threading): Fix.\n+\t* basic-block.h (scale_bbs_frequencies_int,\n+\tscale_bbs_frequencies_gcov_type): New.\n+\t* cfgloopmanip.c (scale_bbs_frequencies): Kill.\n+\t(scale_loop_frequencies, duplicate_loop_to_header_edge): Use\n+\tscale_bbs_frequencies_int.\n+\t* tree-ssa-loop-ch.c (copy_loop_headers): Fix profiling info.\n+\n 2005-03-18  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/m32r/m32r-protos.h: Remove the prototypes for"}, {"sha": "a767c6b7fa13de6107a82ba4c6b693af1f882827", "filename": "gcc/basic-block.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33156717fa04cfb12d1b2c70ba1bdcd236e5a6b9/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33156717fa04cfb12d1b2c70ba1bdcd236e5a6b9/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=33156717fa04cfb12d1b2c70ba1bdcd236e5a6b9", "patch": "@@ -468,6 +468,9 @@ extern void dump_edge_info (FILE *, edge, int);\n extern void brief_dump_cfg (FILE *);\n extern void clear_edges (void);\n extern rtx first_insn_after_basic_block_note (basic_block);\n+extern void scale_bbs_frequencies_int (basic_block *, int, int, int);\n+extern void scale_bbs_frequencies_gcov_type (basic_block *, int, gcov_type, \n+\t\t\t\t\t     gcov_type);\n \n /* Structure to group all of the information to process IF-THEN and\n    IF-THEN-ELSE blocks for the conditional execution support.  This"}, {"sha": "c0e38f2910f9496619604f40a1b7751038dd4bdf", "filename": "gcc/cfg.c", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33156717fa04cfb12d1b2c70ba1bdcd236e5a6b9/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33156717fa04cfb12d1b2c70ba1bdcd236e5a6b9/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=33156717fa04cfb12d1b2c70ba1bdcd236e5a6b9", "patch": "@@ -96,6 +96,8 @@ static void free_edge (edge);\n /* Indicate the presence of the profile.  */\n enum profile_status profile_status;\n \f\n+#define RDIV(X,Y) (((X) + (Y) / 2) / (Y))\n+\n /* Called once at initialization time.  */\n \n void\n@@ -933,10 +935,10 @@ update_bb_profile_for_threading (basic_block bb, int edge_frequency,\n     }\n   else if (prob != REG_BR_PROB_BASE)\n     {\n-      int scale = REG_BR_PROB_BASE / prob;\n+      int scale = 65536 * REG_BR_PROB_BASE / prob;\n \n       FOR_EACH_EDGE (c, ei, bb->succs)\n-\tc->probability *= scale;\n+\tc->probability *= scale / 65536;\n     }\n \n   if (bb != taken_edge->src)\n@@ -945,3 +947,40 @@ update_bb_profile_for_threading (basic_block bb, int edge_frequency,\n   if (taken_edge->count < 0)\n     taken_edge->count = 0;\n }\n+\n+/* Multiply all frequencies of basic blocks in array BBS of length NBBS\n+   by NUM/DEN, in int arithmetic.  May lose some accuracy.  */\n+void\n+scale_bbs_frequencies_int (basic_block *bbs, int nbbs, int num, int den)\n+{\n+  int i;\n+  edge e;\n+  for (i = 0; i < nbbs; i++)\n+    {\n+      edge_iterator ei;\n+      bbs[i]->frequency = (bbs[i]->frequency * num) / den;\n+      bbs[i]->count = RDIV (bbs[i]->count * num, den);\n+      FOR_EACH_EDGE (e, ei, bbs[i]->succs)\n+\te->count = (e->count * num) /den;\n+    }\n+}\n+\n+/* Multiply all frequencies of basic blocks in array BBS of length NBBS\n+   by NUM/DEN, in gcov_type arithmetic.  More accurate than previous\n+   function but considerably slower.  */\n+void\n+scale_bbs_frequencies_gcov_type (basic_block *bbs, int nbbs, gcov_type num, \n+\t\t\t         gcov_type den)\n+{\n+  int i;\n+  edge e;\n+\n+  for (i = 0; i < nbbs; i++)\n+    {\n+      edge_iterator ei;\n+      bbs[i]->frequency = (bbs[i]->frequency * num) / den;\n+      bbs[i]->count = RDIV (bbs[i]->count * num, den);\n+      FOR_EACH_EDGE (e, ei, bbs[i]->succs)\n+\te->count = (e->count * num) /den;\n+    }\n+}"}, {"sha": "14769067279d0a7658367c9618c2b5c6f514960d", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33156717fa04cfb12d1b2c70ba1bdcd236e5a6b9/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33156717fa04cfb12d1b2c70ba1bdcd236e5a6b9/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=33156717fa04cfb12d1b2c70ba1bdcd236e5a6b9", "patch": "@@ -45,7 +45,6 @@ static bool fix_bb_placement (struct loops *, basic_block);\n static void fix_bb_placements (struct loops *, basic_block);\n static void place_new_loop (struct loops *, struct loop *);\n static void scale_loop_frequencies (struct loop *, int, int);\n-static void scale_bbs_frequencies (basic_block *, int, int, int);\n static basic_block create_preheader (struct loop *, int);\n static void fix_irreducible_loops (basic_block);\n static void unloop (struct loops *, struct loop *);\n@@ -450,32 +449,14 @@ add_loop (struct loops *loops, struct loop *loop)\n   free (bbs);\n }\n \n-/* Multiply all frequencies of basic blocks in array BBS of length NBBS\n-   by NUM/DEN.  */\n-static void\n-scale_bbs_frequencies (basic_block *bbs, int nbbs, int num, int den)\n-{\n-  int i;\n-  edge e;\n-\n-  for (i = 0; i < nbbs; i++)\n-    {\n-      edge_iterator ei;\n-      bbs[i]->frequency = (bbs[i]->frequency * num) / den;\n-      bbs[i]->count = RDIV (bbs[i]->count * num, den);\n-      FOR_EACH_EDGE (e, ei, bbs[i]->succs)\n-\te->count = (e->count * num) /den;\n-    }\n-}\n-\n /* Multiply all frequencies in LOOP by NUM/DEN.  */\n static void\n scale_loop_frequencies (struct loop *loop, int num, int den)\n {\n   basic_block *bbs;\n \n   bbs = get_loop_body (loop);\n-  scale_bbs_frequencies (bbs, loop->num_nodes, num, den);\n+  scale_bbs_frequencies_int (bbs, loop->num_nodes, num, den);\n   free (bbs);\n }\n \n@@ -1059,7 +1040,7 @@ duplicate_loop_to_header_edge (struct loop *loop, edge e, struct loops *loops,\n       /* Set counts and frequencies.  */\n       if (flags & DLTHE_FLAG_UPDATE_FREQ)\n \t{\n-\t  scale_bbs_frequencies (new_bbs, n, scale_act, REG_BR_PROB_BASE);\n+\t  scale_bbs_frequencies_int (new_bbs, n, scale_act, REG_BR_PROB_BASE);\n \t  scale_act = RDIV (scale_act * scale_step[j], REG_BR_PROB_BASE);\n \t}\n     }\n@@ -1071,7 +1052,7 @@ duplicate_loop_to_header_edge (struct loop *loop, edge e, struct loops *loops,\n     set_immediate_dominator (CDI_DOMINATORS, e->dest, e->src);\n   if (flags & DLTHE_FLAG_UPDATE_FREQ)\n     {\n-      scale_bbs_frequencies (bbs, n, scale_main, REG_BR_PROB_BASE);\n+      scale_bbs_frequencies_int (bbs, n, scale_main, REG_BR_PROB_BASE);\n       free (scale_step);\n     }\n "}, {"sha": "fb5f7f68fb51839395286fb7e30f2ade7debf8d6", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33156717fa04cfb12d1b2c70ba1bdcd236e5a6b9/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33156717fa04cfb12d1b2c70ba1bdcd236e5a6b9/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=33156717fa04cfb12d1b2c70ba1bdcd236e5a6b9", "patch": "@@ -127,9 +127,11 @@ copy_loop_headers (void)\n   unsigned i;\n   struct loop *loop;\n   basic_block header;\n-  edge exit;\n-  basic_block *bbs;\n+  edge exit, entry;\n+  basic_block *bbs, *copied_bbs;\n   unsigned n_bbs;\n+  unsigned bbs_size;\n+  gcov_type entry_count, body_count, total_count;\n \n   loops = loop_optimizer_init (dump_file);\n   if (!loops)\n@@ -145,6 +147,8 @@ copy_loop_headers (void)\n #endif\n \n   bbs = xmalloc (sizeof (basic_block) * n_basic_blocks);\n+  copied_bbs = xmalloc (sizeof (basic_block) * n_basic_blocks);\n+  bbs_size = n_basic_blocks;\n \n   for (i = 1; i < loops->num; i++)\n     {\n@@ -180,6 +184,7 @@ copy_loop_headers (void)\n \t  else\n \t    exit = EDGE_SUCC (header, 1);\n \t  bbs[n_bbs++] = header;\n+\t  gcc_assert (bbs_size > n_bbs);\n \t  header = exit->dest;\n \t}\n \n@@ -196,20 +201,41 @@ copy_loop_headers (void)\n       if (!single_pred_p (exit->dest))\n \texit = single_succ_edge (loop_split_edge_with (exit, NULL));\n \n-      if (!tree_duplicate_sese_region (loop_preheader_edge (loop), exit,\n-\t\t\t\t       bbs, n_bbs, NULL))\n+      entry = loop_preheader_edge (loop);\n+      entry_count = entry->src->count;\n+      body_count = exit->dest->count;\n+\n+      if (!tree_duplicate_sese_region (entry, exit, bbs, n_bbs, copied_bbs))\n \t{\n \t  fprintf (dump_file, \"Duplication failed.\\n\");\n \t  continue;\n \t}\n \n+      /* Fix profiling info.  Scaling is done in gcov_type arithmetic to\n+\t avoid losing information; this is slow, but is done at most\n+\t once per loop.  We special case 0 to avoid division by 0;\n+         probably other special cases exist.  */\n+      total_count = body_count + entry_count;\n+      if (total_count == 0LL)\n+\t{\n+\t  scale_bbs_frequencies_int (bbs, n_bbs, 0, 1);\n+\t  scale_bbs_frequencies_int (copied_bbs, n_bbs, 0, 1);\n+\t}\n+      else\n+\t{\n+\t  scale_bbs_frequencies_gcov_type (bbs, n_bbs, body_count, total_count);\n+\t  scale_bbs_frequencies_gcov_type (copied_bbs, n_bbs, entry_count, \n+\t\t\t\t           total_count);\n+\t}\n+\n       /* Ensure that the latch and the preheader is simple (we know that they\n \t are not now, since there was the loop exit condition.  */\n       loop_split_edge_with (loop_preheader_edge (loop), NULL);\n       loop_split_edge_with (loop_latch_edge (loop), NULL);\n     }\n \n   free (bbs);\n+  free (copied_bbs);\n \n #ifdef ENABLE_CHECKING\n   verify_loop_closed_ssa ();"}]}