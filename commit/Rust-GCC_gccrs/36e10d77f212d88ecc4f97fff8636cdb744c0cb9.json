{"sha": "36e10d77f212d88ecc4f97fff8636cdb744c0cb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZlMTBkNzdmMjEyZDg4ZWNjNGY5N2ZmZjg2MzZjZGI3NDRjMGNiOQ==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@redhat.com", "date": "2001-08-03T00:20:50Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2001-08-03T00:20:50Z"}, "message": "java-tree.h (all_class_filename): New macro.\n\n2001-08-02  Alexandre Petit-Bianco  <apbianco@redhat.com>\n\n\t* java-tree.h (all_class_filename): New macro.\n\t(enum java_tree_index): New enum `JTI_ALL_CLASS_FILENAME.'\n\t(BUILD_FILENAME_IDENTIFIER_NODE): Fixed leading comment. Link\n\tnewly created IDENTIFIER_NODE to `all_class_filename.'\n\n(http://gcc.gnu.org/ml/gcc-patches/2001-08/msg00093.html)\n Proxima Estacion Esperanza\n\nFrom-SVN: r44588", "tree": {"sha": "fc8a4c0f1e39f85ea16c56a7ccdd79ebcbcb35a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc8a4c0f1e39f85ea16c56a7ccdd79ebcbcb35a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36e10d77f212d88ecc4f97fff8636cdb744c0cb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36e10d77f212d88ecc4f97fff8636cdb744c0cb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36e10d77f212d88ecc4f97fff8636cdb744c0cb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36e10d77f212d88ecc4f97fff8636cdb744c0cb9/comments", "author": null, "committer": null, "parents": [{"sha": "dff94ad7470cadea94dbb94b5e66b56229b37cc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dff94ad7470cadea94dbb94b5e66b56229b37cc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dff94ad7470cadea94dbb94b5e66b56229b37cc5"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "31c9785ac3d1e3bfc97aebbe5af8e4280b40025f", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e10d77f212d88ecc4f97fff8636cdb744c0cb9/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e10d77f212d88ecc4f97fff8636cdb744c0cb9/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=36e10d77f212d88ecc4f97fff8636cdb744c0cb9", "patch": "@@ -1,3 +1,10 @@\n+2001-08-02  Alexandre Petit-Bianco  <apbianco@redhat.com>\n+\n+\t* java-tree.h (all_class_filename): New macro.\n+\t(enum java_tree_index): New enum `JTI_ALL_CLASS_FILENAME.'\n+\t(BUILD_FILENAME_IDENTIFIER_NODE): Fixed leading comment. Link\n+\tnewly created IDENTIFIER_NODE to `all_class_filename.'\n+\n 2001-08-01  Jeff Sturm  <jsturm@one-point.com>\n \n         * java-tree.h (BUILD_FILENAME_IDENTIFIER_NODE):"}, {"sha": "03d3cc2e3e60916879beabce1508d2f3d1155bfb", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e10d77f212d88ecc4f97fff8636cdb744c0cb9/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e10d77f212d88ecc4f97fff8636cdb744c0cb9/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=36e10d77f212d88ecc4f97fff8636cdb744c0cb9", "patch": "@@ -135,6 +135,9 @@ extern int compiling_from_source;\n #define all_class_list \\\n   java_global_trees[JTI_ALL_CLASS_LIST]\n \n+/* List of all class filenames seen so far.  */\n+#define all_class_filename java_global_trees [JTI_ALL_CLASS_FILENAME]\n+\n extern int flag_emit_class_files;\n \n extern int flag_filelist_file;\n@@ -349,6 +352,7 @@ enum java_tree_index\n   JTI_MAIN_CLASS,\n   JTI_CURRENT_CLASS,\n   JTI_ALL_CLASS_LIST,\n+  JTI_ALL_CLASS_FILENAME,\n \n   JTI_MAX\n };\n@@ -1452,14 +1456,14 @@ extern tree *type_map;\n    scope of TYPE_DECL.  */\n #define DECL_INNER_CLASS_LIST(NODE) DECL_INITIAL (NODE)\n \n-/* Build a IDENTIFIER_POINTER for a file name we're considering. We\n-   need to register the root, but we're trying to register it only\n-   once.  */\n-#define BUILD_FILENAME_IDENTIFIER_NODE(F, S)\t\\\n-  if (!((F) = maybe_get_identifier ((S))))\t\\\n-    {\t\t\t\t\t\t\\\n-      (F) = get_identifier ((S));\t\t\\\n-      ggc_add_tree_root (&(F), 1);\t\t\\\n+/* Build a IDENTIFIER_NODE for a file name we're considering. Since\n+   all_class_filename is a registered root, putting this identifier\n+   in a TREE_LIST it holds keeps this node alive.  */\n+#define BUILD_FILENAME_IDENTIFIER_NODE(F, S)\t\t\\\n+  if (!((F) = maybe_get_identifier ((S))))\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      (F) = get_identifier ((S));\t\t\t\\\n+      tree_cons ((F), NULL_TREE, all_class_filename);\t\\\n     }\n \n /* Add a FIELD_DECL to RECORD_TYPE RTYPE."}]}