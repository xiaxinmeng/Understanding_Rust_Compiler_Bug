{"sha": "05c53a690494d5188cef77a8aef9adb54683bb9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVjNTNhNjkwNDk0ZDUxODhjZWY3N2E4YWVmOWFkYjU0NjgzYmI5YQ==", "commit": {"author": {"name": "Geert Bosch", "email": "bosch@adacore.com", "date": "2011-08-04T13:03:02Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T13:03:02Z"}, "message": "urealp.adb (Equivalent_Decimal_Exponent): Avoid the use of floating point.\n\n2011-08-04  Geert Bosch  <bosch@adacore.com>\n\n\t* urealp.adb (Equivalent_Decimal_Exponent): Avoid the use of floating\n\tpoint.\n\nFrom-SVN: r177376", "tree": {"sha": "5695ccb629ca4bd4090a85f658e9689575a8beb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5695ccb629ca4bd4090a85f658e9689575a8beb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05c53a690494d5188cef77a8aef9adb54683bb9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05c53a690494d5188cef77a8aef9adb54683bb9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05c53a690494d5188cef77a8aef9adb54683bb9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05c53a690494d5188cef77a8aef9adb54683bb9a/comments", "author": null, "committer": null, "parents": [{"sha": "23cc1ace574efc73dc4bbe8d99013272e19832e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23cc1ace574efc73dc4bbe8d99013272e19832e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23cc1ace574efc73dc4bbe8d99013272e19832e1"}], "stats": {"total": 68, "additions": 46, "deletions": 22}, "files": [{"sha": "e42cd8e08634fcc589cb2962a298a2afd1d38263", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05c53a690494d5188cef77a8aef9adb54683bb9a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05c53a690494d5188cef77a8aef9adb54683bb9a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=05c53a690494d5188cef77a8aef9adb54683bb9a", "patch": "@@ -1,3 +1,8 @@\n+2011-08-04  Geert Bosch  <bosch@adacore.com>\n+\n+\t* urealp.adb (Equivalent_Decimal_Exponent): Avoid the use of floating\n+\tpoint.\n+\n 2011-08-04  Emmanuel Briot  <briot@adacore.com>\n \n \t* makeutl.adb (Compute_Builder_Switches): no longer accept a unit name"}, {"sha": "e11235f3769dab2ffb3781b15d524f1ad20abadb", "filename": "gcc/ada/urealp.adb", "status": "modified", "additions": 41, "deletions": 22, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05c53a690494d5188cef77a8aef9adb54683bb9a/gcc%2Fada%2Furealp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05c53a690494d5188cef77a8aef9adb54683bb9a/gcc%2Fada%2Furealp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Furealp.adb?ref=05c53a690494d5188cef77a8aef9adb54683bb9a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -128,7 +128,7 @@ package body Urealp is\n    --  U is a Ureal entry for which the base value is non-zero, the value\n    --  returned is the equivalent decimal exponent value, i.e. the value of\n    --  Den, adjusted as though the base were base 10. The value is rounded\n-   --  to the nearest integer, and so can be one off.\n+   --  toward zero (truncated), and so its value can be off by one.\n \n    function Is_Integer (Num, Den : Uint) return Boolean;\n    --  Return true if the real quotient of Num / Den is an integer value\n@@ -244,29 +244,48 @@ package body Urealp is\n \n    function Equivalent_Decimal_Exponent (U : Ureal_Entry) return Int is\n \n-      --  The following table is a table of logs to the base 10\n-\n-      Logs : constant array (Nat range 1 .. 16) of Long_Float := (\n-                1 => 0.000000000000000,\n-                2 => 0.301029995663981,\n-                3 => 0.477121254719662,\n-                4 => 0.602059991327962,\n-                5 => 0.698970004336019,\n-                6 => 0.778151250383644,\n-                7 => 0.845098040014257,\n-                8 => 0.903089986991944,\n-                9 => 0.954242509439325,\n-               10 => 1.000000000000000,\n-               11 => 1.041392685158230,\n-               12 => 1.079181246047620,\n-               13 => 1.113943352306840,\n-               14 => 1.146128035678240,\n-               15 => 1.176091259055680,\n-               16 => 1.204119982655920);\n+      type Ratio is record\n+         Num : Nat;\n+         Den : Nat;\n+      end record;\n+\n+      --  The following table is a table of logs to the base 10. All values\n+      --  have at least 15 digits of precision, and do not exceed the true\n+      --  value. To avoid the use of floating point, and as a result potential\n+      --  target dependency, each entry is represented as a fraction of two\n+      --  integers.\n+\n+      Logs : constant array (Nat range 1 .. 16) of Ratio :=\n+        (1 => (Num =>           0, Den =>            1),  -- 0\n+         2 => (Num =>  15_392_313, Den =>   51_132_157),  -- 0.301029995663981\n+         3 => (Num => 731_111_920, Den => 1532_339_867),  -- 0.477121254719662\n+         4 => (Num =>  30_784_626, Den =>   51_132_157),  -- 0.602059991327962\n+         5 => (Num => 111_488_153, Den =>  159_503_487),  -- 0.698970004336018\n+         6 => (Num =>  84_253_929, Den =>  108_274_489),  -- 0.778151250383643\n+         7 => (Num =>  35_275_468, Den =>   41_741_273),  -- 0.845098040014256\n+         8 => (Num =>  46_176_939, Den =>   51_132_157),  -- 0.903089986991943\n+         9 => (Num => 417_620_173, Den =>  437_645_744),  -- 0.954242509439324\n+        10 => (Num =>           1, Den =>            1),  -- 1.000000000000000\n+        11 => (Num => 136_507_510, Den =>  131_081_687),  -- 1.041392685158225\n+        12 => (Num =>  26_797_783, Den =>   24_831_587),  -- 1.079181246047624\n+        13 => (Num =>  73_333_297, Den =>   65_832_160),  -- 1.113943352306836\n+        14 => (Num => 102_941_258, Den =>   89_816_543),  -- 1.146128035678238\n+        15 => (Num =>  53_385_559, Den =>   45_392_361),  -- 1.176091259055681\n+        16 => (Num =>  78_897_839, Den =>   65_523_237)); -- 1.204119982655924\n+\n+      function Scale (X : Int; R : Ratio) return Int;\n+      --  Compute the value of X scaled by R\n+\n+      function Scale (X : Int; R : Ratio) return Int is\n+         type Wide_Int is range -2**63 .. 2**63 - 1;\n+\n+      begin\n+         return Int (Wide_Int (X) * Wide_Int (R.Num) / Wide_Int (R.Den));\n+      end Scale;\n \n    begin\n       pragma Assert (U.Rbase /= 0);\n-      return Int (Long_Float (UI_To_Int (U.Den)) * Logs (U.Rbase));\n+      return Scale (UI_To_Int (U.Den), Logs (U.Rbase));\n    end Equivalent_Decimal_Exponent;\n \n    ----------------"}]}