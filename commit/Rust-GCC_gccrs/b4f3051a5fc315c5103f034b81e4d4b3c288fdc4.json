{"sha": "b4f3051a5fc315c5103f034b81e4d4b3c288fdc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRmMzA1MWE1ZmMzMTVjNTEwM2YwMzRiODFlNGQ0YjNjMjg4ZmRjNA==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2015-03-18T14:27:13Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2015-03-18T14:27:13Z"}, "message": "re PR middle-end/64491 (incorrect warning: loop exit may only be reached after undefined behavior)\n\nFix PR64491\n\n2015-03-18  Andrew Stubbs  <ams@codesourcery.com>\n\n\tPR middle-end/64491\n\tRevert:\n\t2014-11-20  Andrew Stubbs  <ams@codesourcery.com>\n\n\t* tree-ssa-loop-niter.c (maybe_lower_iteration_bound): Warn if a loop\n\tcondition would be removed due to undefined behaviour.\n\n2015-03-18  Andrew Stubbs  <ams@codesourcery.com>\n\n\tPR middle-end/64491\n\tRevert:\n\t2014-11-20  Andrew Stubbs  <ams@codesourcery.com>\n\n\t* gcc.dg/undefined-loop-1.c: New file.\n\t* gcc.dg/undefined-loop-2.c: New file.\n\n\t2014-12-24  Andrew Stubbs  <ams@codesourcery.com>\n\n\tPR testsuite/64032\n\t* gcc.dg/undefined-loop-2.c: Don't allow GCC to optimize away the\n\tloop exits too early.\n\nFrom-SVN: r221492", "tree": {"sha": "69b1cb1f705af4cd981f939fff7d9571ae8a9784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69b1cb1f705af4cd981f939fff7d9571ae8a9784"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4f3051a5fc315c5103f034b81e4d4b3c288fdc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4f3051a5fc315c5103f034b81e4d4b3c288fdc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4f3051a5fc315c5103f034b81e4d4b3c288fdc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4f3051a5fc315c5103f034b81e4d4b3c288fdc4/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1aec2ecce4085a664f489e7a3585d993a9939a1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aec2ecce4085a664f489e7a3585d993a9939a1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aec2ecce4085a664f489e7a3585d993a9939a1d"}], "stats": {"total": 112, "additions": 24, "deletions": 88}, "files": [{"sha": "a447690324f543c5bd21c98898f185b2a390261c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f3051a5fc315c5103f034b81e4d4b3c288fdc4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f3051a5fc315c5103f034b81e4d4b3c288fdc4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4f3051a5fc315c5103f034b81e4d4b3c288fdc4", "patch": "@@ -1,3 +1,12 @@\n+2015-03-18  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\tPR middle-end/64491\n+\tRevert:\n+\t2014-11-20  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* tree-ssa-loop-niter.c (maybe_lower_iteration_bound): Warn if a loop\n+\tcondition would be removed due to undefined behaviour.\n+\n 2015-03-18  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/65432"}, {"sha": "7530c2b9b01d7c1a6beeb6bfb98c5ac15458d35d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f3051a5fc315c5103f034b81e4d4b3c288fdc4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f3051a5fc315c5103f034b81e4d4b3c288fdc4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b4f3051a5fc315c5103f034b81e4d4b3c288fdc4", "patch": "@@ -1,3 +1,18 @@\n+2015-03-18  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\tPR middle-end/64491\n+\tRevert:\n+\t2014-11-20  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* gcc.dg/undefined-loop-1.c: New file.\n+\t* gcc.dg/undefined-loop-2.c: New file.\n+\n+\t2014-12-24  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\tPR testsuite/64032\n+\t* gcc.dg/undefined-loop-2.c: Don't allow GCC to optimize away the\n+\tloop exits too early.\n+\n 2015-03-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/65450"}, {"sha": "80260cc8b01166ed2517d0076c15d5a907b52af7", "filename": "gcc/testsuite/gcc.dg/undefined-loop-1.c", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aec2ecce4085a664f489e7a3585d993a9939a1d/gcc%2Ftestsuite%2Fgcc.dg%2Fundefined-loop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aec2ecce4085a664f489e7a3585d993a9939a1d/gcc%2Ftestsuite%2Fgcc.dg%2Fundefined-loop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fundefined-loop-1.c?ref=1aec2ecce4085a664f489e7a3585d993a9939a1d", "patch": "@@ -1,18 +0,0 @@\n-/* Check that loops whose final iteration is undefined are detected.  */\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -Waggressive-loop-optimizations\" } */\n-\n-void doSomething(char);\n-\n-char array[5];\n-\n-void\n-foo (void)\n-{\n-  int i;\n-  for (i = 0;\n-       array[i]  /* { dg-message \"note: possible undefined statement is here\" } */\n-       && i < 5; /* { dg-warning \"loop exit may only be reached after undefined behavior\" } */\n-       i++)\n-    doSomething(array[i]);\n-}"}, {"sha": "7ab37f4e9e19d8de86b28b402f3fed9b4e6f2fe9", "filename": "gcc/testsuite/gcc.dg/undefined-loop-2.c", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aec2ecce4085a664f489e7a3585d993a9939a1d/gcc%2Ftestsuite%2Fgcc.dg%2Fundefined-loop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aec2ecce4085a664f489e7a3585d993a9939a1d/gcc%2Ftestsuite%2Fgcc.dg%2Fundefined-loop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fundefined-loop-2.c?ref=1aec2ecce4085a664f489e7a3585d993a9939a1d", "patch": "@@ -1,25 +0,0 @@\n-/* Check that loops whose final iteration is undefined are detected.  */\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -Waggressive-loop-optimizations\" } */\n-\n-void doSomething(char);\n-\n-char array1[5];\n-char array2[5];\n-\n-void\n-foo (int p)\n-{\n-  int i;\n-  for (i=0;\n-       (p\n-        ? array1[i]  /* { dg-message \"note: possible undefined statement is here\" } */\n-        : array2[i]) /* { dg-message \"note: possible undefined statement is here\" } */\n-       && i < 100;   /* { dg-warning \"loop exit may only be reached after undefined behavior\" } */\n-       i++)\n-    {\n-      if (i >= 5)    /* { dg-warning \"loop exit may only be reached after undefined behavior\" } */\n-\tbreak;\n-      doSomething(array1[i]);\n-    }\n-}"}, {"sha": "fc63825904fa7c61414a6dd353e0724e95586547", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f3051a5fc315c5103f034b81e4d4b3c288fdc4/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f3051a5fc315c5103f034b81e4d4b3c288fdc4/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=b4f3051a5fc315c5103f034b81e4d4b3c288fdc4", "patch": "@@ -3329,7 +3329,6 @@ maybe_lower_iteration_bound (struct loop *loop)\n   struct nb_iter_bound *elt;\n   bool found_exit = false;\n   vec<basic_block> queue = vNULL;\n-  vec<gimple> problem_stmts = vNULL;\n   bitmap visited;\n \n   /* Collect all statements with interesting (i.e. lower than\n@@ -3375,7 +3374,6 @@ maybe_lower_iteration_bound (struct loop *loop)\n \t  if (not_executed_last_iteration->contains (stmt))\n \t    {\n \t      stmt_found = true;\n-\t      problem_stmts.safe_push (stmt);\n \t      break;\n \t    }\n \t  if (gimple_has_side_effects (stmt))\n@@ -3419,53 +3417,10 @@ maybe_lower_iteration_bound (struct loop *loop)\n \t\t \"undefined statement must be executed at the last iteration.\\n\");\n       record_niter_bound (loop, loop->nb_iterations_upper_bound - 1,\n \t\t\t  false, true);\n-\n-      if (warn_aggressive_loop_optimizations)\n-\t{\n-\t  bool exit_warned = false;\n-\t  for (elt = loop->bounds; elt; elt = elt->next)\n-\t    {\n-\t      if (elt->is_exit\n-\t\t  && wi::gtu_p (elt->bound, loop->nb_iterations_upper_bound))\n-\t\t{\n-\t\t  basic_block bb = gimple_bb (elt->stmt);\n-\t\t  edge exit_edge = EDGE_SUCC (bb, 0);\n-\t\t  struct tree_niter_desc niter;\n-\n-\t\t  if (!loop_exit_edge_p (loop, exit_edge))\n-\t\t    exit_edge = EDGE_SUCC (bb, 1);\n-\n-\t\t  if(number_of_iterations_exit (loop, exit_edge,\n-\t\t\t\t\t\t&niter, false, false)\n-\t\t     && integer_onep (niter.assumptions)\n-\t\t     && integer_zerop (niter.may_be_zero)\n-\t\t     && niter.niter\n-\t\t     && TREE_CODE (niter.niter) == INTEGER_CST\n-\t\t     && wi::ltu_p (loop->nb_iterations_upper_bound,\n-\t\t\t\t   wi::to_widest (niter.niter)))\n-\t\t   {\n-\t\t     if (warning_at (gimple_location (elt->stmt),\n-\t\t\t\t     OPT_Waggressive_loop_optimizations,\n-\t\t\t\t     \"loop exit may only be reached after undefined behavior\"))\n-\t\t       exit_warned = true;\n-\t\t   }\n-\t\t}\n-\t    }\n-\n-\t  if (exit_warned && !problem_stmts.is_empty ())\n-\t    {\n-\t      gimple stmt;\n-\t      int index;\n-\t      FOR_EACH_VEC_ELT (problem_stmts, index, stmt)\n-\t\tinform (gimple_location (stmt),\n-\t\t\t\"possible undefined statement is here\");\n-\t    }\n-      }\n     }\n \n   BITMAP_FREE (visited);\n   queue.release ();\n-  problem_stmts.release ();\n   delete not_executed_last_iteration;\n }\n "}]}