{"sha": "ee536902d67e3c2a3f7d54676b4099d7ac6ab797", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU1MzY5MDJkNjdlM2MyYTNmN2Q1NDY3NmI0MDk5ZDdhYzZhYjc5Nw==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2004-07-13T20:51:02Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2004-07-13T20:51:02Z"}, "message": "re PR tree-optimization/16443 (ICE during linux kernel compilation)\n\n\n\tPR tree-optimization/16443\n\t* tree-ssa-alias.c: Add more description for\n\tCALL_CLOBBERED_VARS and ADDRESSABLE_VARS.\n\t* tree-ssa-operands.c (get_asm_expr_operands): Re-order the\n\tclobbering of call-clobbered and addressable variables.  If\n\tthere are any before aliases have been computed, add them.\n\ntestsuite/ChangeLog\n\n\tPR tree-optimization/16443\n\t* gcc.dg/tree-ssa/20040713-1.c: New test.\n\nFrom-SVN: r84641", "tree": {"sha": "14edb8d9ecca028be755be83d160d4682c605332", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14edb8d9ecca028be755be83d160d4682c605332"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee536902d67e3c2a3f7d54676b4099d7ac6ab797", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee536902d67e3c2a3f7d54676b4099d7ac6ab797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee536902d67e3c2a3f7d54676b4099d7ac6ab797", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee536902d67e3c2a3f7d54676b4099d7ac6ab797/comments", "author": null, "committer": null, "parents": [{"sha": "a65ab5245668b0e3239f18f4361faa07177a3d3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a65ab5245668b0e3239f18f4361faa07177a3d3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a65ab5245668b0e3239f18f4361faa07177a3d3c"}], "stats": {"total": 56, "additions": 45, "deletions": 11}, "files": [{"sha": "0e71184813c8c18d8f7d6fdedc036f8e34604af9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee536902d67e3c2a3f7d54676b4099d7ac6ab797/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee536902d67e3c2a3f7d54676b4099d7ac6ab797/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee536902d67e3c2a3f7d54676b4099d7ac6ab797", "patch": "@@ -1,3 +1,12 @@\n+2004-07-13  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR tree-optimization/16443\n+\t* tree-ssa-alias.c: Add more description for\n+\tCALL_CLOBBERED_VARS and ADDRESSABLE_VARS.\n+\t* tree-ssa-operands.c (get_asm_expr_operands): Re-order the\n+\tclobbering of call-clobbered and addressable variables.  If\n+\tthere are any before aliases have been computed, add them.\n+\n 2004-07-13  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree-optimize.c (execute_todo): Flush DUMP_FILE before"}, {"sha": "19083e0362bed6b1c9a65b4bd92bd768b2e28ee7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee536902d67e3c2a3f7d54676b4099d7ac6ab797/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee536902d67e3c2a3f7d54676b4099d7ac6ab797/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee536902d67e3c2a3f7d54676b4099d7ac6ab797", "patch": "@@ -1,3 +1,8 @@\n+2004-07-13  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR tree-optimization/16443\n+\t* gcc.dg/tree-ssa/20040713-1.c: New test.\n+\n 2004-07-15  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* g++.dg/lookup/new2.C: Use first operand of type __SIZE_TYPE__"}, {"sha": "78919d0401add476a7b01b3bbed88b29989a67fb", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040713-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee536902d67e3c2a3f7d54676b4099d7ac6ab797/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040713-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee536902d67e3c2a3f7d54676b4099d7ac6ab797/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040713-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040713-1.c?ref=ee536902d67e3c2a3f7d54676b4099d7ac6ab797", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os\" } */\n+\n+/* Extracted from PR 16443.  Contributed by Volker Reichelt.\n+   Scanning of __asm__ operands wasn't considering call-clobbered\n+   variables discovered before the aliasing pass.  This was causing a\n+   crash in verify_ssa() because 'p' was not being given an SSA_NAME.  */\n+\n+void foo(char *p)\n+{\n+    __asm__ (\"\" ::: \"memory\");\n+}\n+\n+void bar()\n+{\n+    static char *p;\n+    foo(p);\n+}"}, {"sha": "9da01676f43488575705c6966985ffd9a9fd6d24", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee536902d67e3c2a3f7d54676b4099d7ac6ab797/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee536902d67e3c2a3f7d54676b4099d7ac6ab797/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=ee536902d67e3c2a3f7d54676b4099d7ac6ab797", "patch": "@@ -164,7 +164,12 @@ static struct ptr_info_def *get_ptr_info (tree t);\n bitmap call_clobbered_vars;\n \n /* Addressable variables in the function.  If bit I is set, then\n-   REFERENCED_VARS (I) has had its address taken.  */\n+   REFERENCED_VARS (I) has had its address taken.  Note that\n+   CALL_CLOBBERED_VARS and ADDRESSABLE_VARS are not related.  An\n+   addressable variable is not necessarily call-clobbered (e.g., a\n+   local addressable whose address does not escape) and not all\n+   call-clobbered variables are addressable (e.g., a local static\n+   variable).  */\n bitmap addressable_vars;\n \n /* 'true' after aliases have been computed (see compute_may_aliases).  This"}, {"sha": "b9c5a6cf670a9285910c7e08c7063b1e5d294668", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee536902d67e3c2a3f7d54676b4099d7ac6ab797/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee536902d67e3c2a3f7d54676b4099d7ac6ab797/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=ee536902d67e3c2a3f7d54676b4099d7ac6ab797", "patch": "@@ -1231,16 +1231,6 @@ get_asm_expr_operands (tree stmt, voperands_t prev_vops)\n       {\n \tsize_t i;\n \n-\t/* If we still have not computed aliasing information, we\n-\t   won't know what variables are call-clobbered and/or\n-\t   addressable.  Just mark the statement as having volatile\n-\t   operands for now.  */\n-\tif (!aliases_computed_p)\n-\t  {\n-\t    stmt_ann (stmt)->has_volatile_ops = true;\n-\t    break;\n-\t  }\n-\n \t/* Clobber all call-clobbered variables (or .GLOBAL_VAR if we\n \t   decided to group them).  */\n \tif (global_var)\n@@ -1259,6 +1249,13 @@ get_asm_expr_operands (tree stmt, voperands_t prev_vops)\n \t      add_stmt_operand (&var, stmt, opf_is_def, prev_vops);\n \t    });\n \n+\t/* If we don't have call-clobbered nor addressable vars and we\n+\t   still have not computed aliasing information, just mark the\n+\t   statement as having volatile operands.  If the alias pass\n+\t   finds some, we will add them at that point.  */\n+\tif (!aliases_computed_p)\n+\t  stmt_ann (stmt)->has_volatile_ops = true;\n+\n \tbreak;\n       }\n }"}]}