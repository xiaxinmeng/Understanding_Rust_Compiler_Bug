{"sha": "b0eb6a8f727aa18463fef3014ad115b7292223a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBlYjZhOGY3MjdhYTE4NDYzZmVmMzAxNGFkMTE1YjcyOTIyMjNhMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-11-06T08:33:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-11-06T08:33:25Z"}, "message": "re PR target/33168 (GCC Boot failure, building libstc++)\n\n\tPR target/33168\n\t* decl.c (cp_finish_decl): Call make_rtl_for_nonlocal_decl already\n\twith the final TREE_READONLY flag in place.  processing_template_decl\n\tis known to be 0 in this part of function.\n\n\t* g++.dg/other/datasec1.C: New test.\n\nFrom-SVN: r129922", "tree": {"sha": "2f597e8ee37697beafd9819a18e4b6c5ce91866c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f597e8ee37697beafd9819a18e4b6c5ce91866c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0eb6a8f727aa18463fef3014ad115b7292223a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0eb6a8f727aa18463fef3014ad115b7292223a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0eb6a8f727aa18463fef3014ad115b7292223a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0eb6a8f727aa18463fef3014ad115b7292223a2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "36b6e793433a2558e6f0f83a49bd61ead46183e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36b6e793433a2558e6f0f83a49bd61ead46183e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36b6e793433a2558e6f0f83a49bd61ead46183e4"}], "stats": {"total": 85, "additions": 49, "deletions": 36}, "files": [{"sha": "2f0d55274b62143fcd46e4c2e1895ddf5ffcf938", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0eb6a8f727aa18463fef3014ad115b7292223a2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0eb6a8f727aa18463fef3014ad115b7292223a2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b0eb6a8f727aa18463fef3014ad115b7292223a2", "patch": "@@ -1,5 +1,10 @@\n 2007-11-06  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/33168\n+\t* decl.c (cp_finish_decl): Call make_rtl_for_nonlocal_decl already\n+\twith the final TREE_READONLY flag in place.  processing_template_decl\n+\tis known to be 0 in this part of function.\n+\n \tPR c++/33894\n \t* cp-tree.h: Update comment - TYPE_LANG_FLAG_0 is not\n \tOMP_ATOMIC_DEPENDENT_P in OMP_ATOMIC."}, {"sha": "ca5a9ca2483af97539a24e997f9b6e595fffadcd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 31, "deletions": 36, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0eb6a8f727aa18463fef3014ad115b7292223a2/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0eb6a8f727aa18463fef3014ad115b7292223a2/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b0eb6a8f727aa18463fef3014ad115b7292223a2", "patch": "@@ -5455,8 +5455,7 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \t require a guard variable, and since the mangled name of the\n \t guard variable will depend on the mangled name of this\n \t variable.  */\n-      if (!processing_template_decl\n-\t  && DECL_FUNCTION_SCOPE_P (decl)\n+      if (DECL_FUNCTION_SCOPE_P (decl)\n \t  && TREE_STATIC (decl)\n \t  && !DECL_ARTIFICIAL (decl))\n \tpush_local_name (decl);\n@@ -5561,6 +5560,21 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n       /* This needs to happen after the linkage is set. */\n       determine_visibility (decl);\n \n+      if (var_definition_p && TREE_STATIC (decl))\n+\t{\n+\t  /* If a TREE_READONLY variable needs initialization\n+\t     at runtime, it is no longer readonly and we need to\n+\t     avoid MEM_READONLY_P being set on RTL created for it.  */\n+\t  if (init)\n+\t    {\n+\t      if (TREE_READONLY (decl))\n+\t\tTREE_READONLY (decl) = 0;\n+\t      was_readonly = 0;\n+\t    }\n+\t  else if (was_readonly)\n+\t    TREE_READONLY (decl) = 1;\n+\t}\n+\n       make_rtl_for_nonlocal_decl (decl, init, asmspec);\n \n       /* Check for abstractness of the type. Notice that there is no\n@@ -5583,40 +5597,21 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \t  if (init)\n \t    DECL_INITIAL (decl) = init;\n \t}\n-      else\n-\t{\n-\t  /* A variable definition.  */\n-\t  if (DECL_FUNCTION_SCOPE_P (decl))\n-\t    {\n-\t      /* Initialize the local variable.  */\n-\t      if (processing_template_decl)\n-\t\tDECL_INITIAL (decl) = init;\n-\t      else if (!TREE_STATIC (decl))\n-\t\tinitialize_local_var (decl, init);\n-\t    }\n-\n-\t  /* If a variable is defined, and then a subsequent\n-\t     definition with external linkage is encountered, we will\n-\t     get here twice for the same variable.  We want to avoid\n-\t     calling expand_static_init more than once.  For variables\n-\t     that are not static data members, we can call\n-\t     expand_static_init only when we actually process the\n-\t     initializer.  It is not legal to redeclare a static data\n-\t     member, so this issue does not arise in that case.  */\n-\t  if (var_definition_p && TREE_STATIC (decl))\n-\t    {\n-\t      /* If a TREE_READONLY variable needs initialization\n-\t\t at runtime, it is no longer readonly and we need to\n-\t\t avoid MEM_READONLY_P being set on RTL created for it.  */\n-\t      if (init)\n-\t\t{\n-\t\t  if (TREE_READONLY (decl))\n-\t\t    TREE_READONLY (decl) = 0;\n-\t\t  was_readonly = 0;\n-\t\t}\n-\t      expand_static_init (decl, init);\n-\t    }\n-\t}\n+      /* A variable definition.  */\n+      else if (DECL_FUNCTION_SCOPE_P (decl) && !TREE_STATIC (decl))\n+\t/* Initialize the local variable.  */\n+\tinitialize_local_var (decl, init);\n+\n+      /* If a variable is defined, and then a subsequent\n+\t definition with external linkage is encountered, we will\n+\t get here twice for the same variable.  We want to avoid\n+\t calling expand_static_init more than once.  For variables\n+\t that are not static data members, we can call\n+\t expand_static_init only when we actually process the\n+\t initializer.  It is not legal to redeclare a static data\n+\t member, so this issue does not arise in that case.  */\n+      else if (var_definition_p && TREE_STATIC (decl))\n+\texpand_static_init (decl, init);\n     }\n \n   /* If a CLEANUP_STMT was created to destroy a temporary bound to a"}, {"sha": "1d9a9c6fe9a62ae46120373b66d67fbad5c0303a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0eb6a8f727aa18463fef3014ad115b7292223a2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0eb6a8f727aa18463fef3014ad115b7292223a2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b0eb6a8f727aa18463fef3014ad115b7292223a2", "patch": "@@ -1,5 +1,8 @@\n 2007-11-06  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/33168\n+\t* g++.dg/other/datasec1.C: New test.\n+\n \tPR tree-optimization/33458\n \t* g++.dg/opt/inline12.C: New test.\n "}, {"sha": "28dab019f71becb6eea89e60c632d40fa29afb99", "filename": "gcc/testsuite/g++.dg/other/datasec1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0eb6a8f727aa18463fef3014ad115b7292223a2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdatasec1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0eb6a8f727aa18463fef3014ad115b7292223a2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdatasec1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdatasec1.C?ref=b0eb6a8f727aa18463fef3014ad115b7292223a2", "patch": "@@ -0,0 +1,10 @@\n+// PR target/33168\n+// { dg-do compile }\n+// { dg-options \"-O2 -fdata-sections\" }\n+\n+extern const int& foo;\n+namespace\n+{\n+  const int bar = 16;\n+}\n+const int &foo = bar;"}]}