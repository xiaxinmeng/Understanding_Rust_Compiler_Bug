{"sha": "af88d4ec96defc06ac0b7ae3e5122f14ba148509", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY4OGQ0ZWM5NmRlZmMwNmFjMGI3YWUzZTUxMjJmMTRiYTE0ODUwOQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-10-27T18:24:13Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-10-27T18:24:13Z"}, "message": "tree-cfg.c (thread_jumps): Speed up by pretending to have ENTRY_BLOCK_PTR in worklist.\n\n\t* tree-cfg.c (thread_jumps): Speed up by pretending to have\n\tENTRY_BLOCK_PTR in worklist.\n\nFrom-SVN: r89699", "tree": {"sha": "22c457b1bb6d0637671d15fe9f288091ef763792", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22c457b1bb6d0637671d15fe9f288091ef763792"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af88d4ec96defc06ac0b7ae3e5122f14ba148509", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af88d4ec96defc06ac0b7ae3e5122f14ba148509", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af88d4ec96defc06ac0b7ae3e5122f14ba148509", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af88d4ec96defc06ac0b7ae3e5122f14ba148509/comments", "author": null, "committer": null, "parents": [{"sha": "7f604986cccc7ce4df07e7f3565e29888a8b4e4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f604986cccc7ce4df07e7f3565e29888a8b4e4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f604986cccc7ce4df07e7f3565e29888a8b4e4b"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "fcafd5f75bb476d01cba229665516a1a8a7c57ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af88d4ec96defc06ac0b7ae3e5122f14ba148509/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af88d4ec96defc06ac0b7ae3e5122f14ba148509/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af88d4ec96defc06ac0b7ae3e5122f14ba148509", "patch": "@@ -1,3 +1,8 @@\n+2004-10-27  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-cfg.c (thread_jumps): Speed up by pretending to have\n+\tENTRY_BLOCK_PTR in worklist.\n+\n 2004-10-27  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary)"}, {"sha": "4492daa1e726b940292c99d1a294122df0249746", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af88d4ec96defc06ac0b7ae3e5122f14ba148509/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af88d4ec96defc06ac0b7ae3e5122f14ba148509/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=af88d4ec96defc06ac0b7ae3e5122f14ba148509", "patch": "@@ -3949,6 +3949,10 @@ thread_jumps (void)\n       bb->flags &= ~BB_VISITED;\n     }\n \n+  /* We pretend to have ENTRY_BLOCK_PTR in WORKLIST.  This way,\n+     ENTRY_BLOCK_PTR will never be entered into WORKLIST.  */\n+  ENTRY_BLOCK_PTR->flags |= BB_VISITED;\n+\n   /* Initialize WORKLIST by putting non-forwarder blocks that\n      immediately precede forwarder blocks because those are the ones\n      that we know we can thread jumps from.  We use BB_VISITED to\n@@ -3973,8 +3977,6 @@ thread_jumps (void)\n \t  /* We are not interested in threading jumps from a forwarder\n \t     block.  */\n \t  if (!bb_ann (e->src)->forwardable\n-\t      /* We don't want to visit ENTRY_BLOCK_PTR.  */\n-\t      && e->src->index >= 0\n \t      /* We don't want to put a duplicate into WORKLIST.  */\n \t      && (e->src->flags & BB_VISITED) == 0)\n \t    {\n@@ -4014,8 +4016,6 @@ thread_jumps (void)\n \t\t  /* We are not interested in threading jumps from a\n \t\t     forwarder block.  */\n \t\t  if (!bb_ann (f->src)->forwardable\n-\t\t      /* We don't want to visit ENTRY_BLOCK_PTR.  */\n-\t\t      && f->src->index >= 0\n \t\t      /* We don't want to put a duplicate into WORKLIST.  */\n \t\t      && (f->src->flags & BB_VISITED) == 0)\n \t\t    {\n@@ -4028,6 +4028,8 @@ thread_jumps (void)\n \t}\n     }\n \n+  ENTRY_BLOCK_PTR->flags &= ~BB_VISITED;\n+\n   free (worklist);\n \n   return retval;"}]}