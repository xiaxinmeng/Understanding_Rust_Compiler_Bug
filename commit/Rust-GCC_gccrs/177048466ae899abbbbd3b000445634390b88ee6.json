{"sha": "177048466ae899abbbbd3b000445634390b88ee6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc3MDQ4NDY2YWU4OTlhYmJiYmQzYjAwMDQ0NTYzNDM5MGI4OGVlNg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-05-06T21:25:13Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-05-06T21:25:13Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r917", "tree": {"sha": "bd46b88b57e271e2b7f999dc2d3984147540fac5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd46b88b57e271e2b7f999dc2d3984147540fac5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/177048466ae899abbbbd3b000445634390b88ee6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/177048466ae899abbbbd3b000445634390b88ee6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/177048466ae899abbbbd3b000445634390b88ee6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/177048466ae899abbbbd3b000445634390b88ee6/comments", "author": null, "committer": null, "parents": [{"sha": "feb69c2078d2f5ba1e763eb2ae0f35f73d025f0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feb69c2078d2f5ba1e763eb2ae0f35f73d025f0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feb69c2078d2f5ba1e763eb2ae0f35f73d025f0c"}], "stats": {"total": 101, "additions": 53, "deletions": 48}, "files": [{"sha": "284435df2de9d1bdd22e1ebfe55e07b0ad870e33", "filename": "gcc/collect2.c", "status": "modified", "additions": 51, "deletions": 46, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177048466ae899abbbbd3b000445634390b88ee6/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177048466ae899abbbbd3b000445634390b88ee6/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=177048466ae899abbbbd3b000445634390b88ee6", "patch": "@@ -448,7 +448,7 @@ main (argc, argv)\n       {\n \tchar *q = p;\n \twhile (*q && *q != ' ') q++;\n-\tif (*p == '-' && (p[1] == 'm' || p[1] == 'f'))\n+\tif (*p == '-' && p[1] == 'm')\n \t  num_c_args++;\n \n \tif (*q) q++;\n@@ -965,14 +965,14 @@ write_c_file (stream, name)\n \n   fprintf (stream, \"typedef void entry_pt();\\n\\n\");\n     \n-  write_list_with_asm (stream, \"entry_pt \", constructors.first);\n+  write_list_with_asm (stream, \"extern entry_pt \", constructors.first);\n     \n   fprintf (stream, \"\\nentry_pt * __CTOR_LIST__[] = {\\n\");\n   fprintf (stream, \"\\t(entry_pt *) %d,\\n\", constructors.number);\n   write_list (stream, \"\\t\", constructors.first);\n   fprintf (stream, \"\\t0\\n};\\n\\n\");\n \n-  write_list_with_asm (stream, \"entry_pt \", destructors.first);\n+  write_list_with_asm (stream, \"extern entry_pt \", destructors.first);\n \n   fprintf (stream, \"\\nentry_pt * __DTOR_LIST__[] = {\\n\");\n   fprintf (stream, \"\\t(entry_pt *) %d,\\n\", destructors.number);\n@@ -1136,20 +1136,22 @@ scan_prog_file (prog_name, which_pass)\n #ifdef OBJECT_FORMAT_COFF\n \n #if defined(EXTENDED_COFF)\n-#   define GCC_SYMBOLS(X) (SYMHEADER(X).isymMax+SYMHEADER(X).iextMax)\n-#   define GCC_SYMENT SYMR\n-#   define GCC_OK_SYMBOL(X) ((X).st == stProc && (X).sc == scText)\n-#   define GCC_SYMINC(X) (1)\n-#   define GCC_SYMZERO(X) (SYMHEADER(X).isymMax)\n+#   define GCC_SYMBOLS(X)\t(SYMHEADER(X).isymMax + SYMHEADER(X).iextMax)\n+#   define GCC_SYMENT\t\tSYMR\n+#   define GCC_OK_SYMBOL(X)\t((X).st == stProc && (X).sc == scText)\n+#   define GCC_SYMINC(X)\t(1)\n+#   define GCC_SYMZERO(X)\t(SYMHEADER(X).isymMax)\n+#   define GCC_CHECK_HDR(X)\t(PSYMTAB(X) != 0)\n #else\n-#   define GCC_SYMBOLS(X) (HEADER(ldptr).f_nsyms)\n-#   define GCC_SYMENT SYMENT\n+#   define GCC_SYMBOLS(X)\t(HEADER(ldptr).f_nsyms)\n+#   define GCC_SYMENT\t\tSYMENT\n #   define GCC_OK_SYMBOL(X) \\\n      (((X).n_sclass == C_EXT) && \\\n         (((X).n_type & N_TMASK) == (DT_NON << N_BTSHFT) || \\\n          ((X).n_type & N_TMASK) == (DT_FCN << N_BTSHFT)))\n-#   define GCC_SYMINC(X) ((X).n_numaux+1)\n-#   define GCC_SYMZERO(X) 0\n+#   define GCC_SYMINC(X)\t((X).n_numaux+1)\n+#   define GCC_SYMZERO(X)\t0\n+#   define GCC_CHECK_HDR(X)\t(1)\n #endif\n \n extern char *ldgetname ();\n@@ -1180,54 +1182,57 @@ scan_prog_file (prog_name, which_pass)\n   if (!ISCOFF (HEADER(ldptr).f_magic))\n     fatal (\"%s: not a COFF file\", prog_name);\n \n-  sym_count = GCC_SYMBOLS (ldptr);\n-  sym_index = GCC_SYMZERO (ldptr);\n-  while (sym_index < sym_count)\n+  if (GCC_CHECK_HDR (ldptr))\n     {\n-      GCC_SYMENT symbol;\n+      sym_count = GCC_SYMBOLS (ldptr);\n+      sym_index = GCC_SYMZERO (ldptr);\n+      while (sym_index < sym_count)\n+\t{\n+\t  GCC_SYMENT symbol;\n \n-      if (ldtbread (ldptr, sym_index, &symbol) <= 0)\n-\tbreak;\n-      sym_index += GCC_SYMINC (symbol);\n+\t  if (ldtbread (ldptr, sym_index, &symbol) <= 0)\n+\t    break;\n+\t  sym_index += GCC_SYMINC (symbol);\n \n-      if (GCC_OK_SYMBOL (symbol))\n-\t{\n-\t  char *name;\n+\t  if (GCC_OK_SYMBOL (symbol))\n+\t    {\n+\t      char *name;\n \n-\t  if ((name = ldgetname (ldptr, &symbol)) == NULL)\n-\t    continue;\t\t/* should never happen */\n+\t      if ((name = ldgetname (ldptr, &symbol)) == NULL)\n+\t\tcontinue;\t\t/* should never happen */\n \n #ifdef _AIX\n-\t  /* All AIX function names begin with a dot. */\n-\t  if (*name++ != '.')\n-\t    continue;\n+\t      /* All AIX function names begin with a dot. */\n+\t      if (*name++ != '.')\n+\t\tcontinue;\n #endif\n \n-\t  switch (is_ctor_dtor (name))\n-\t    {\n-\t    case 1:\n-\t      add_to_list (&constructors, name);\n-\t      break;\n+\t      switch (is_ctor_dtor (name))\n+\t\t{\n+\t\tcase 1:\n+\t\t  add_to_list (&constructors, name);\n+\t\t  break;\n \n-\t    case 2:\n-\t      add_to_list (&destructors, name);\n-\t      break;\n+\t\tcase 2:\n+\t\t  add_to_list (&destructors, name);\n+\t\t  break;\n \n-\t    default:\t\t/* not a constructor or destructor */\n-\t      continue;\n-\t    }\n+\t\tdefault:\t\t/* not a constructor or destructor */\n+\t\t  continue;\n+\t\t}\n \n #if !defined(EXTENDED_COFF)\n-\t  if (debug)\n-\t    fprintf (stderr, \"\\tsec=%d class=%d type=%s%o %s\\n\",\n-\t\t     symbol.n_scnum, symbol.n_sclass,\n-\t\t     (symbol.n_type ? \"0\" : \"\"), symbol.n_type,\n-\t\t     name);\n+\t      if (debug)\n+\t\tfprintf (stderr, \"\\tsec=%d class=%d type=%s%o %s\\n\",\n+\t\t\t symbol.n_scnum, symbol.n_sclass,\n+\t\t\t (symbol.n_type ? \"0\" : \"\"), symbol.n_type,\n+\t\t\t name);\n #else\n-\t  if (debug)\n-\t    fprintf (stderr, \"\\tiss = %5d, value = %5d, index = %5d, name = %s\\n\",\n-\t\t     symbol.iss, symbol.value, symbol.index, name);\n+\t      if (debug)\n+\t\tfprintf (stderr, \"\\tiss = %5d, value = %5d, index = %5d, name = %s\\n\",\n+\t\t\t symbol.iss, symbol.value, symbol.index, name);\n #endif\n+\t    }\n \t}\n     }\n "}, {"sha": "afa51f4564fec388ff92e358974cef5d05c9dae3", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177048466ae899abbbbd3b000445634390b88ee6/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177048466ae899abbbbd3b000445634390b88ee6/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=177048466ae899abbbbd3b000445634390b88ee6", "patch": "@@ -1729,7 +1729,7 @@ i960_alignment (size, align)\n /* Modes for quad-float quantities.  */\n #define TF_MODES (DF_MODES | (1 << (int) TFmode) | (1 << (int) DCmode))\n \n-short hard_regno_mode_ok[FIRST_PSEUDO_REGISTER] = {\n+unsigned int hard_regno_mode_ok[FIRST_PSEUDO_REGISTER] = {\n   T_MODES, S_MODES, D_MODES, S_MODES, T_MODES, S_MODES, D_MODES, S_MODES,\n   T_MODES, S_MODES, D_MODES, S_MODES, T_MODES, S_MODES, D_MODES, S_MODES,\n   T_MODES, S_MODES, D_MODES, S_MODES, T_MODES, S_MODES, D_MODES, S_MODES,"}, {"sha": "67656862af26292b41affe2adb1f74056de01a7f", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/177048466ae899abbbbd3b000445634390b88ee6/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/177048466ae899abbbbd3b000445634390b88ee6/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=177048466ae899abbbbd3b000445634390b88ee6", "patch": "@@ -471,7 +471,7 @@ extern int target_flags;\n /* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.\n    On 80960, the cpu registers can hold any mode but the float registers\n    can only hold SFmode, DFmode, or TFmode.  */\n-extern short hard_regno_mode_ok[FIRST_PSEUDO_REGISTER];\n+extern unsigned int hard_regno_mode_ok[FIRST_PSEUDO_REGISTER];\n #define HARD_REGNO_MODE_OK(REGNO, MODE) \\\n   ((hard_regno_mode_ok[REGNO] & (1 << (int) (MODE))) != 0)\n "}]}