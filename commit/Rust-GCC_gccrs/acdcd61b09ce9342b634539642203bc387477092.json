{"sha": "acdcd61b09ce9342b634539642203bc387477092", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNkY2Q2MWIwOWNlOTM0MmI2MzQ1Mzk2NDIyMDNiYzM4NzQ3NzA5Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-12-30T17:05:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-12-30T17:05:10Z"}, "message": "re PR tree-optimization/59591 (ICE in vect_get_vec_def_for_stmt_copy, at tree-vect-stmts.c:156 for -march=core-avx2)\n\n\tPR tree-optimization/59591\n\t* tree-vect-stmts.c (vectorizable_mask_load_store): Fix up handling\n\tof modifier = NARROW masked gathers.\n\t(permute_vec_elements): Use gimple_get_lhs instead of\n\tgimple_assign_lhs.\n\n\t* gcc.dg/vect/pr59591-1.c: New test.\n\t* gcc.dg/vect/pr59591-2.c: New test.\n\t* gcc.target/i386/pr59591-1.c: New test.\n\t* gcc.target/i386/pr59591-2.c: New test.\n\nFrom-SVN: r206248", "tree": {"sha": "2a5008f0e2734867398f5c1300db88d05c5e8016", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a5008f0e2734867398f5c1300db88d05c5e8016"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acdcd61b09ce9342b634539642203bc387477092", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acdcd61b09ce9342b634539642203bc387477092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acdcd61b09ce9342b634539642203bc387477092", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acdcd61b09ce9342b634539642203bc387477092/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51ac3042e79ed2a67bd5979dadd324f46a58c51e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51ac3042e79ed2a67bd5979dadd324f46a58c51e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51ac3042e79ed2a67bd5979dadd324f46a58c51e"}], "stats": {"total": 231, "additions": 201, "deletions": 30}, "files": [{"sha": "09e0ad22927f8d5edf17bccdb190270a78fdb97d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acdcd61b09ce9342b634539642203bc387477092/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acdcd61b09ce9342b634539642203bc387477092/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=acdcd61b09ce9342b634539642203bc387477092", "patch": "@@ -1,3 +1,11 @@\n+2013-12-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/59591\n+\t* tree-vect-stmts.c (vectorizable_mask_load_store): Fix up handling\n+\tof modifier = NARROW masked gathers.\n+\t(permute_vec_elements): Use gimple_get_lhs instead of\n+\tgimple_assign_lhs.\n+\n 2013-12-30  Nick Clifton  <nickc@redhat.com>\n \n \t* config/msp430/msp430.c (msp430_print_operand): Rename %B to %b"}, {"sha": "3d686751d8a72c3552d2fbd038fe38ed15b4e550", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acdcd61b09ce9342b634539642203bc387477092/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acdcd61b09ce9342b634539642203bc387477092/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=acdcd61b09ce9342b634539642203bc387477092", "patch": "@@ -1,5 +1,11 @@\n 2013-12-30  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/59591\n+\t* gcc.dg/vect/pr59591-1.c: New test.\n+\t* gcc.dg/vect/pr59591-2.c: New test.\n+\t* gcc.target/i386/pr59591-1.c: New test.\n+\t* gcc.target/i386/pr59591-2.c: New test.\n+\n \tPR target/59501\n \t* gcc.target/i386/pr59501-1.c: New test.\n \t* gcc.target/i386/pr59501-1a.c: New test."}, {"sha": "b216deea91dd83bee7e7b5f1e84b5bb517dd215c", "filename": "gcc/testsuite/gcc.dg/vect/pr59591-1.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acdcd61b09ce9342b634539642203bc387477092/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr59591-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acdcd61b09ce9342b634539642203bc387477092/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr59591-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr59591-1.c?ref=acdcd61b09ce9342b634539642203bc387477092", "patch": "@@ -0,0 +1,55 @@\n+/* PR tree-optimization/59591 */\n+/* { dg-do run } */\n+/* { dg-additional-options \"-fopenmp-simd\" } */\n+\n+#ifndef CHECK_H\n+#include \"tree-vect.h\"\n+#endif\n+\n+extern void abort (void);\n+\n+int p[256], q[256], r[256], t[256];\n+\n+__attribute__((noinline, noclone)) void\n+foo (void)\n+{\n+  int i;\n+  #pragma omp simd safelen(64)\n+  for (i = 0; i < 256; i++)\n+    if (r[i] > 32)\n+      t[i] = p[q[i] * 3L + 2L];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+bar (void)\n+{\n+  int i;\n+  for (i = 0; i < 256; i++)\n+    {\n+      r[i] = ((i >> 2) & (1 << (i & 3))) ? 32 + i : 32 - i;\n+      q[i] = r[i] > 32 ? ((i * 7) % 84) : 99 + i;\n+      p[i] = i * 11;\n+      t[i] = i * 13;\n+    }\n+  foo ();\n+  for (i = 0; i < 256; i++)\n+    if ((i >> 2) & (1 << (i & 3)))\n+      {\n+\tif (t[i] != (((i * 7) % 84) * 3 + 2) * 11)\n+\t  abort ();\n+      }\n+    else if (t[i] != i * 13)\n+      abort ();\n+}\n+\n+#ifndef CHECK_H\n+int\n+main ()\n+{\n+  check_vect ();\n+  bar ();\n+  return 0;\n+}\n+#endif\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "429b187bf22cbb0325e143cd4126c4550d271a28", "filename": "gcc/testsuite/gcc.dg/vect/pr59591-2.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acdcd61b09ce9342b634539642203bc387477092/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr59591-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acdcd61b09ce9342b634539642203bc387477092/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr59591-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr59591-2.c?ref=acdcd61b09ce9342b634539642203bc387477092", "patch": "@@ -0,0 +1,56 @@\n+/* PR tree-optimization/59591 */\n+/* { dg-do run } */\n+/* { dg-additional-options \"-fopenmp-simd\" } */\n+\n+#ifndef CHECK_H\n+#include \"tree-vect.h\"\n+#endif\n+\n+extern void abort (void);\n+\n+long long int p[256], r[256], t[256];\n+int q[256];\n+\n+__attribute__((noinline, noclone)) void\n+foo (void)\n+{\n+  int i;\n+  #pragma omp simd safelen(64)\n+  for (i = 0; i < 256; i++)\n+    if (r[i] > 32LL)\n+      t[i] = p[q[i]];\n+}\n+\n+__attribute__((noinline, noclone)) void\n+bar (void)\n+{\n+  int i;\n+  for (i = 0; i < 256; i++)\n+    {\n+      r[i] = ((i >> 2) & (1 << (i & 3))) ? 32 + i : 32 - i;\n+      q[i] = r[i] > 32 ? ((i * 7) % 256) : 258 + i;\n+      p[i] = i * 11;\n+      t[i] = i * 13;\n+    }\n+  foo ();\n+  for (i = 0; i < 256; i++)\n+    if ((i >> 2) & (1 << (i & 3)))\n+      {\n+\tif (t[i] != ((i * 7) % 256) * 11)\n+\t  abort ();\n+      }\n+    else if (t[i] != i * 13)\n+      abort ();\n+}\n+\n+#ifndef CHECK_H\n+int\n+main ()\n+{\n+  check_vect ();\n+  bar ();\n+  return 0;\n+}\n+#endif\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "a88c6fd93652548734399ddb09fc2005d7e4d47d", "filename": "gcc/testsuite/gcc.target/i386/pr59591-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acdcd61b09ce9342b634539642203bc387477092/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59591-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acdcd61b09ce9342b634539642203bc387477092/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59591-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59591-1.c?ref=acdcd61b09ce9342b634539642203bc387477092", "patch": "@@ -0,0 +1,17 @@\n+/* PR tree-optimization/59591 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fopenmp-simd -mavx2 -fno-vect-cost-model\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#define CHECK_H \"avx2-check.h\"\n+#define TEST avx2_test\n+\n+#include \"../../gcc.dg/vect/pr59591-1.c\"\n+\n+#include CHECK_H\n+\n+static void\n+TEST (void)\n+{\n+  bar ();\n+}"}, {"sha": "c0323649b49c65677e13fb55bed829102507fdef", "filename": "gcc/testsuite/gcc.target/i386/pr59591-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acdcd61b09ce9342b634539642203bc387477092/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59591-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acdcd61b09ce9342b634539642203bc387477092/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59591-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59591-2.c?ref=acdcd61b09ce9342b634539642203bc387477092", "patch": "@@ -0,0 +1,17 @@\n+/* PR tree-optimization/59591 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fopenmp-simd -mavx2 -fno-vect-cost-model\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#define CHECK_H \"avx2-check.h\"\n+#define TEST avx2_test\n+\n+#include \"../../gcc.dg/vect/pr59591-2.c\"\n+\n+#include CHECK_H\n+\n+static void\n+TEST (void)\n+{\n+  bar ();\n+}"}, {"sha": "a07c14d153e2f456469881bc9104e928cfda7db7", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 42, "deletions": 30, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acdcd61b09ce9342b634539642203bc387477092/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acdcd61b09ce9342b634539642203bc387477092/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=acdcd61b09ce9342b634539642203bc387477092", "patch": "@@ -1855,14 +1855,24 @@ vectorizable_mask_load_store (gimple stmt, gimple_stmt_iterator *gsi,\n       tree vec_oprnd0 = NULL_TREE, op;\n       tree arglist = TYPE_ARG_TYPES (TREE_TYPE (gather_decl));\n       tree rettype, srctype, ptrtype, idxtype, masktype, scaletype;\n-      tree ptr, vec_mask = NULL_TREE, mask_op, var, scale;\n+      tree ptr, vec_mask = NULL_TREE, mask_op = NULL_TREE, var, scale;\n       tree perm_mask = NULL_TREE, prev_res = NULL_TREE;\n+      tree mask_perm_mask = NULL_TREE;\n       edge pe = loop_preheader_edge (loop);\n       gimple_seq seq;\n       basic_block new_bb;\n       enum { NARROW, NONE, WIDEN } modifier;\n       int gather_off_nunits = TYPE_VECTOR_SUBPARTS (gather_off_vectype);\n \n+      rettype = TREE_TYPE (TREE_TYPE (gather_decl));\n+      srctype = TREE_VALUE (arglist); arglist = TREE_CHAIN (arglist);\n+      ptrtype = TREE_VALUE (arglist); arglist = TREE_CHAIN (arglist);\n+      idxtype = TREE_VALUE (arglist); arglist = TREE_CHAIN (arglist);\n+      masktype = TREE_VALUE (arglist); arglist = TREE_CHAIN (arglist);\n+      scaletype = TREE_VALUE (arglist);\n+      gcc_checking_assert (types_compatible_p (srctype, rettype)\n+\t\t\t   && types_compatible_p (srctype, masktype));\n+\n       if (nunits == gather_off_nunits)\n \tmodifier = NONE;\n       else if (nunits == gather_off_nunits / 2)\n@@ -1888,19 +1898,14 @@ vectorizable_mask_load_store (gimple stmt, gimple_stmt_iterator *gsi,\n \t  perm_mask = vect_gen_perm_mask (vectype, sel);\n \t  gcc_assert (perm_mask != NULL_TREE);\n \t  ncopies *= 2;\n+\t  for (i = 0; i < nunits; ++i)\n+\t    sel[i] = i | gather_off_nunits;\n+\t  mask_perm_mask = vect_gen_perm_mask (masktype, sel);\n+\t  gcc_assert (mask_perm_mask != NULL_TREE);\n \t}\n       else\n \tgcc_unreachable ();\n \n-      rettype = TREE_TYPE (TREE_TYPE (gather_decl));\n-      srctype = TREE_VALUE (arglist); arglist = TREE_CHAIN (arglist);\n-      ptrtype = TREE_VALUE (arglist); arglist = TREE_CHAIN (arglist);\n-      idxtype = TREE_VALUE (arglist); arglist = TREE_CHAIN (arglist);\n-      masktype = TREE_VALUE (arglist); arglist = TREE_CHAIN (arglist);\n-      scaletype = TREE_VALUE (arglist);\n-      gcc_checking_assert (types_compatible_p (srctype, rettype)\n-\t\t\t   && types_compatible_p (srctype, masktype));\n-\n       vec_dest = vect_create_destination_var (gimple_call_lhs (stmt), vectype);\n \n       ptr = fold_convert (ptrtype, gather_base);\n@@ -1940,28 +1945,35 @@ vectorizable_mask_load_store (gimple stmt, gimple_stmt_iterator *gsi,\n \t      op = var;\n \t    }\n \n-\t  if (j == 0)\n-\t    vec_mask = vect_get_vec_def_for_operand (mask, stmt, NULL);\n+\t  if (mask_perm_mask && (j & 1))\n+\t    mask_op = permute_vec_elements (mask_op, mask_op,\n+\t\t\t\t\t    mask_perm_mask, stmt, gsi);\n \t  else\n \t    {\n-\t      vect_is_simple_use (vec_mask, NULL, loop_vinfo, NULL, &def_stmt,\n-\t\t\t\t  &def, &dt);\n-\t      vec_mask = vect_get_vec_def_for_stmt_copy (dt, vec_mask);\n-\t    }\n+\t      if (j == 0)\n+\t\tvec_mask = vect_get_vec_def_for_operand (mask, stmt, NULL);\n+\t      else\n+\t\t{\n+\t\t  vect_is_simple_use (vec_mask, NULL, loop_vinfo, NULL,\n+\t\t\t\t      &def_stmt, &def, &dt);\n+\t\t  vec_mask = vect_get_vec_def_for_stmt_copy (dt, vec_mask);\n+\t\t}\n \n-\t  mask_op = vec_mask;\n-\t  if (!useless_type_conversion_p (masktype, TREE_TYPE (vec_mask)))\n-\t    {\n-\t      gcc_assert (TYPE_VECTOR_SUBPARTS (TREE_TYPE (mask_op))\n-\t\t\t  == TYPE_VECTOR_SUBPARTS (masktype));\n-\t      var = vect_get_new_vect_var (masktype, vect_simple_var, NULL);\n-\t      var = make_ssa_name (var, NULL);\n-\t      mask_op = build1 (VIEW_CONVERT_EXPR, masktype, mask_op);\n-\t      new_stmt\n-\t\t= gimple_build_assign_with_ops (VIEW_CONVERT_EXPR, var,\n-\t\t\t\t\t\tmask_op, NULL_TREE);\n-\t      vect_finish_stmt_generation (stmt, new_stmt, gsi);\n-\t      mask_op = var;\n+\t      mask_op = vec_mask;\n+\t      if (!useless_type_conversion_p (masktype, TREE_TYPE (vec_mask)))\n+\t\t{\n+\t\t  gcc_assert (TYPE_VECTOR_SUBPARTS (TREE_TYPE (mask_op))\n+\t\t\t      == TYPE_VECTOR_SUBPARTS (masktype));\n+\t\t  var = vect_get_new_vect_var (masktype, vect_simple_var,\n+\t\t\t\t\t       NULL);\n+\t\t  var = make_ssa_name (var, NULL);\n+\t\t  mask_op = build1 (VIEW_CONVERT_EXPR, masktype, mask_op);\n+\t\t  new_stmt\n+\t\t    = gimple_build_assign_with_ops (VIEW_CONVERT_EXPR, var,\n+\t\t\t\t\t\t    mask_op, NULL_TREE);\n+\t\t  vect_finish_stmt_generation (stmt, new_stmt, gsi);\n+\t\t  mask_op = var;\n+\t\t}\n \t    }\n \n \t  new_stmt\n@@ -5446,7 +5458,7 @@ permute_vec_elements (tree x, tree y, tree mask_vec, gimple stmt,\n   tree perm_dest, data_ref;\n   gimple perm_stmt;\n \n-  perm_dest = vect_create_destination_var (gimple_assign_lhs (stmt), vectype);\n+  perm_dest = vect_create_destination_var (gimple_get_lhs (stmt), vectype);\n   data_ref = make_ssa_name (perm_dest, NULL);\n \n   /* Generate the permute statement.  */"}]}