{"sha": "0d4aed994f4f2f3d5176a642c97912b3200e4660", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ0YWVkOTk0ZjRmMmYzZDUxNzZhNjQyYzk3OTEyYjMyMDBlNDY2MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-22T09:03:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-22T09:03:53Z"}, "message": "exp_attr.adb (Expand_N_Attribute_Reference): In case of access attributes add missing support to handle designated types...\n\n2008-08-22  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_attr.adb (Expand_N_Attribute_Reference): In case of access\n\tattributes add missing support to handle designated types that come\n\tfrom the limited view.\n\n\t* exp_disp.adb (Expand_Interface_Conversion): Remove wrong assertion.\n\nFrom-SVN: r139432", "tree": {"sha": "8fc6c9e7e608d153c870cfea7021bcc9376b7a68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fc6c9e7e608d153c870cfea7021bcc9376b7a68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d4aed994f4f2f3d5176a642c97912b3200e4660", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d4aed994f4f2f3d5176a642c97912b3200e4660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d4aed994f4f2f3d5176a642c97912b3200e4660", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d4aed994f4f2f3d5176a642c97912b3200e4660/comments", "author": null, "committer": null, "parents": [{"sha": "b66cb57268bad05080062167eab68ef661a32231", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b66cb57268bad05080062167eab68ef661a32231", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b66cb57268bad05080062167eab68ef661a32231"}], "stats": {"total": 52, "additions": 45, "deletions": 7}, "files": [{"sha": "a7b793bcb196df5aa6472c53378632b8027d4be5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4aed994f4f2f3d5176a642c97912b3200e4660/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4aed994f4f2f3d5176a642c97912b3200e4660/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0d4aed994f4f2f3d5176a642c97912b3200e4660", "patch": "@@ -1,3 +1,24 @@\n+2008-08-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb (Use_One_Type): when checking which of two use_type\n+\tclauses in related units is redundant, if one of the units is a package\n+\tinstantiation, use its instance_spec to determine which unit is the\n+\tancestor of the other.\n+\n+2008-08-22  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): In case of access\n+\tattributes add missing support to handle designated types that come\n+\tfrom the limited view.\n+\n+\t* exp_disp.adb (Expand_Interface_Conversion): Remove wrong assertion.\n+\n+2008-08-22  Sergey Rybin  <rybin@adacore.com>\n+\n+\t* vms_data.ads: Add entry for new gnatcheck -mNNN option\n+\n+\t* gnat_ugn.texi: Add description for gnatcheck option '-m'\n+\n 2008-08-22  Sergey Rybin  <rybin@adacore.com>\n \n \t* gnat_ugn.texi: Update the gnatcheck subsection for metric rules"}, {"sha": "f511178fa00054953a2bce5e50095f2b0b8696e6", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4aed994f4f2f3d5176a642c97912b3200e4660/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4aed994f4f2f3d5176a642c97912b3200e4660/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=0d4aed994f4f2f3d5176a642c97912b3200e4660", "patch": "@@ -657,8 +657,8 @@ package body Exp_Attr is\n            Attribute_Unrestricted_Access =>\n \n          Access_Cases : declare\n-            Btyp_DDT   : constant Entity_Id := Directly_Designated_Type (Btyp);\n             Ref_Object : constant Node_Id := Get_Referenced_Object (Pref);\n+            Btyp_DDT   : Entity_Id;\n \n             function Enclosing_Object (N : Node_Id) return Node_Id;\n             --  If N denotes a compound name (selected component, indexed\n@@ -692,6 +692,27 @@ package body Exp_Attr is\n          --  Start of processing for Access_Cases\n \n          begin\n+            Btyp_DDT := Designated_Type (Btyp);\n+\n+            --  Handle designated types that come from the limited view\n+\n+            if Ekind (Btyp_DDT) = E_Incomplete_Type\n+              and then From_With_Type (Btyp_DDT)\n+              and then Present (Non_Limited_View (Btyp_DDT))\n+            then\n+               Btyp_DDT := Non_Limited_View (Btyp_DDT);\n+\n+            elsif Is_Class_Wide_Type (Btyp_DDT)\n+               and then Ekind (Etype (Btyp_DDT)) = E_Incomplete_Type\n+               and then From_With_Type (Etype (Btyp_DDT))\n+               and then Present (Non_Limited_View (Etype (Btyp_DDT)))\n+               and then Present (Class_Wide_Type\n+                                  (Non_Limited_View (Etype (Btyp_DDT))))\n+            then\n+               Btyp_DDT :=\n+                 Class_Wide_Type (Non_Limited_View (Etype (Btyp_DDT)));\n+            end if;\n+\n             --  In order to improve the text of error messages, the designated\n             --  type of access-to-subprogram itypes is set by the semantics as\n             --  the associated subprogram entity (see sem_attr). Now we replace\n@@ -882,11 +903,10 @@ package body Exp_Attr is\n \n                   if Btyp_DDT /= Etype (Ref_Object) then\n                      Rewrite (Prefix (N),\n-                       Convert_To (Directly_Designated_Type (Typ),\n+                       Convert_To (Btyp_DDT,\n                          New_Copy_Tree (Prefix (N))));\n \n-                     Analyze_And_Resolve (Prefix (N),\n-                                          Directly_Designated_Type (Typ));\n+                     Analyze_And_Resolve (Prefix (N), Btyp_DDT);\n                   end if;\n \n                --  When the object is an explicit dereference, convert the"}, {"sha": "3d1f776f8b313c594a6645305d0e036fb5392262", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4aed994f4f2f3d5176a642c97912b3200e4660/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4aed994f4f2f3d5176a642c97912b3200e4660/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=0d4aed994f4f2f3d5176a642c97912b3200e4660", "patch": "@@ -812,9 +812,6 @@ package body Exp_Disp is\n          --     Acc2 : Iface2_Ref := Iface2_Ref (Acc); -- 2\n \n          if Is_Access_Type (Operand_Typ) then\n-            pragma Assert\n-              (Is_Interface (Directly_Designated_Type (Operand_Typ)));\n-\n             Rewrite (N,\n               Unchecked_Convert_To (Etype (N),\n                 Make_Function_Call (Loc,"}]}