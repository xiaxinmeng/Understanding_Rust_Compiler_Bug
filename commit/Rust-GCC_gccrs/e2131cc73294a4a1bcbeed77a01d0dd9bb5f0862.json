{"sha": "e2131cc73294a4a1bcbeed77a01d0dd9bb5f0862", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIxMzFjYzczMjk0YTRhMWJjYmVlZDc3YTAxZDBkZDliYjVmMDg2Mg==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-08-14T13:25:36Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-08-14T13:25:36Z"}, "message": "i386.md (define_attr \"isa\"): Add avx512bw,noavx512bw.\n\ngcc/\n        * config/i386/i386.md\n\t(define_attr \"isa\"): Add avx512bw,noavx512bw.\n\t(define_attr \"enabled\"): Ditto.\n\t(define_split): Add 32/64-bit mask logic.\n\t(define_insn \"*k<logic>qi\"): New.\n\t(define_insn \"*k<logic>hi\"): New.\n\t(define_insn \"*anddi_1\"): Add mask version.\n\t(define_insn \"*andsi_1\"): Ditto.\n\t(define_insn \"*<code><mode>_1\"): Ditto.\n\t(define_insn \"*<code>hi_1\"): Ditto.\n\t(define_insn \"kxnor<mode>\"): New.\n\t(define_insn \"kunpcksi\"): New.\n\t(define_insn \"kunpckdi\"): New.\n\t(define_insn \"*one_cmpl<mode>2_1\"): Add mask version.\n\t(define_insn \"*one_cmplhi2_1\"): Ditto.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r213964", "tree": {"sha": "b91c43c866a29b6f86a171791b1eba7e9737cde3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b91c43c866a29b6f86a171791b1eba7e9737cde3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2131cc73294a4a1bcbeed77a01d0dd9bb5f0862", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2131cc73294a4a1bcbeed77a01d0dd9bb5f0862", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2131cc73294a4a1bcbeed77a01d0dd9bb5f0862", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2131cc73294a4a1bcbeed77a01d0dd9bb5f0862/comments", "author": null, "committer": null, "parents": [{"sha": "1d944b8a0a28e54affb2a4453f3fa341b6a0adb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d944b8a0a28e54affb2a4453f3fa341b6a0adb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d944b8a0a28e54affb2a4453f3fa341b6a0adb1"}], "stats": {"total": 236, "additions": 188, "deletions": 48}, "files": [{"sha": "ef7290705cb3dcc1c12cee3dbd1ec3219fb8af61", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2131cc73294a4a1bcbeed77a01d0dd9bb5f0862/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2131cc73294a4a1bcbeed77a01d0dd9bb5f0862/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2131cc73294a4a1bcbeed77a01d0dd9bb5f0862", "patch": "@@ -1,3 +1,28 @@\n+2014-08-14  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+        * config/i386/i386.md\n+\t(define_attr \"isa\"): Add avx512bw,noavx512bw.\n+\t(define_attr \"enabled\"): Ditto.\n+\t(define_split): Add 32/64-bit mask logic.\n+\t(define_insn \"*k<logic>qi\"): New.\n+\t(define_insn \"*k<logic>hi\"): New.\n+\t(define_insn \"*anddi_1\"): Add mask version.\n+\t(define_insn \"*andsi_1\"): Ditto.\n+\t(define_insn \"*<code><mode>_1\"): Ditto.\n+\t(define_insn \"*<code>hi_1\"): Ditto.\n+\t(define_insn \"kxnor<mode>\"): New.\n+\t(define_insn \"kunpcksi\"): New.\n+\t(define_insn \"kunpckdi\"): New.\n+\t(define_insn \"*one_cmpl<mode>2_1\"): Add mask version.\n+\t(define_insn \"*one_cmplhi2_1\"): Ditto.\n+\n 2014-08-14  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "a72c2065044f12fd8891af82ae9f44ee2c182a30", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 163, "deletions": 48, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2131cc73294a4a1bcbeed77a01d0dd9bb5f0862/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2131cc73294a4a1bcbeed77a01d0dd9bb5f0862/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e2131cc73294a4a1bcbeed77a01d0dd9bb5f0862", "patch": "@@ -740,7 +740,8 @@\n ;; Used to control the \"enabled\" attribute on a per-instruction basis.\n (define_attr \"isa\" \"base,x64,x64_sse4,x64_sse4_noavx,x64_avx,nox64,\n \t\t    sse2,sse2_noavx,sse3,sse4,sse4_noavx,avx,noavx,\n-\t\t    avx2,noavx2,bmi,bmi2,fma4,fma,avx512f,noavx512f,fma_avx512f\"\n+\t\t    avx2,noavx2,bmi,bmi2,fma4,fma,avx512f,noavx512f,\n+\t\t    fma_avx512f,avx512bw,noavx512bw\"\n   (const_string \"base\"))\n \n (define_attr \"enabled\" \"\"\n@@ -771,6 +772,8 @@\n \t (eq_attr \"isa\" \"noavx512f\") (symbol_ref \"!TARGET_AVX512F\")\n \t (eq_attr \"isa\" \"fma_avx512f\")\n \t   (symbol_ref \"TARGET_FMA || TARGET_AVX512F\")\n+\t (eq_attr \"isa\" \"avx512bw\") (symbol_ref \"TARGET_AVX512BW\")\n+\t (eq_attr \"isa\" \"noavx512bw\") (symbol_ref \"!TARGET_AVX512BW\")\n \t]\n \t(const_int 1)))\n \n@@ -7510,21 +7513,46 @@\n })\n \n (define_split\n-  [(set (match_operand:SWI12 0 \"mask_reg_operand\")\n-\t(any_logic:SWI12 (match_operand:SWI12 1 \"mask_reg_operand\")\n-\t\t\t (match_operand:SWI12 2 \"mask_reg_operand\")))\n+  [(set (match_operand:SWI1248x 0 \"mask_reg_operand\")\n+\t(any_logic:SWI1248x (match_operand:SWI1248x 1 \"mask_reg_operand\")\n+\t\t\t    (match_operand:SWI1248x 2 \"mask_reg_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_AVX512F && reload_completed\"\n   [(set (match_dup 0)\n-\t(any_logic:SWI12 (match_dup 1)\n-\t\t\t (match_dup 2)))])\n+\t(any_logic:SWI1248x (match_dup 1)\n+\t\t\t    (match_dup 2)))])\n+\n+;; TODO: It seems to be possible to macroize following\n+;; 3 patterns.\n+(define_insn \"*k<logic>qi\"\n+  [(set (match_operand:QI 0 \"mask_reg_operand\" \"=k\")\n+\t(any_logic:QI (match_operand:QI 1 \"mask_reg_operand\" \"k\")\n+\t\t      (match_operand:QI 2 \"mask_reg_operand\" \"k\")))]\n+  \"TARGET_AVX512F\"\n+{\n+  return TARGET_AVX512DQ ? \"k<logic>b\\t{%2, %1, %0|%0, %1, %2}\"\n+\t\t\t : \"k<logic>w\\t{%2, %1, %0|%0, %1, %2}\";\n+}\n+  [(set_attr \"mode\" \"QI\")\n+   (set_attr \"type\" \"msklog\")\n+   (set_attr \"prefix\" \"vex\")])\n \n-(define_insn \"*k<logic><mode>\"\n-  [(set (match_operand:SWI12 0 \"mask_reg_operand\" \"=k\")\n-\t(any_logic:SWI12 (match_operand:SWI12 1 \"mask_reg_operand\" \"k\")\n-\t\t\t (match_operand:SWI12 2 \"mask_reg_operand\" \"k\")))]\n+(define_insn \"*k<logic>hi\"\n+  [(set (match_operand:HI 0 \"mask_reg_operand\" \"=k\")\n+\t(any_logic:HI (match_operand:HI 1 \"mask_reg_operand\" \"k\")\n+\t\t      (match_operand:HI 2 \"mask_reg_operand\" \"k\")))]\n   \"TARGET_AVX512F\"\n   \"k<logic>w\\t{%2, %1, %0|%0, %1, %2}\";\n+  [(set_attr \"mode\" \"HI\")\n+   (set_attr \"type\" \"msklog\")\n+   (set_attr \"prefix\" \"vex\")])\n+\n+(define_insn \"*k<logic><mode>\"\n+  [(set (match_operand:SWI48x 0 \"mask_reg_operand\" \"=k\")\n+\t(any_logic:SWI48x (match_operand:SWI48x 1 \"mask_reg_operand\" \"k\")\n+\t\t\t  (match_operand:SWI48x 2 \"mask_reg_operand\" \"k\")))]\n+  \"TARGET_AVX512BW\"\n+  \"k<logic><mskmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\";\n   [(set_attr \"mode\" \"<MODE>\")\n    (set_attr \"type\" \"msklog\")\n    (set_attr \"prefix\" \"vex\")])\n@@ -7580,10 +7608,10 @@\n })\n \n (define_insn \"*anddi_1\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,rm,r,r\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,rm,r,r,!k\")\n \t(and:DI\n-\t (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0,qm\")\n-\t (match_operand:DI 2 \"x86_64_szext_general_operand\" \"Z,re,rm,L\")))\n+\t (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0,qm,k\")\n+\t (match_operand:DI 2 \"x86_64_szext_general_operand\" \"Z,re,rm,L,k\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (AND, DImode, operands)\"\n {\n@@ -7592,6 +7620,9 @@\n     case TYPE_IMOVX:\n       return \"#\";\n \n+    case TYPE_MSKLOG:\n+      return \"kandq\\t{%2, %1, %0|%0, %1, %2}\";\n+\n     default:\n       gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (get_attr_mode (insn) == MODE_SI)\n@@ -7600,21 +7631,21 @@\n \treturn \"and{q}\\t{%2, %0|%0, %2}\";\n     }\n }\n-  [(set_attr \"type\" \"alu,alu,alu,imovx\")\n-   (set_attr \"length_immediate\" \"*,*,*,0\")\n+  [(set_attr \"type\" \"alu,alu,alu,imovx,msklog\")\n+   (set_attr \"length_immediate\" \"*,*,*,0,0\")\n    (set (attr \"prefix_rex\")\n      (if_then_else\n        (and (eq_attr \"type\" \"imovx\")\n \t    (and (match_test \"INTVAL (operands[2]) == 0xff\")\n \t\t (match_operand 1 \"ext_QIreg_operand\")))\n        (const_string \"1\")\n        (const_string \"*\")))\n-   (set_attr \"mode\" \"SI,DI,DI,SI\")])\n+   (set_attr \"mode\" \"SI,DI,DI,SI,DI\")])\n \n (define_insn \"*andsi_1\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r,Ya\")\n-\t(and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,qm\")\n-\t\t(match_operand:SI 2 \"x86_64_general_operand\" \"re,rm,L\")))\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r,Ya,!k\")\n+\t(and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,qm,k\")\n+\t\t(match_operand:SI 2 \"x86_64_general_operand\" \"re,rm,L,k\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (AND, SImode, operands)\"\n {\n@@ -7623,20 +7654,23 @@\n     case TYPE_IMOVX:\n       return \"#\";\n \n+    case TYPE_MSKLOG:\n+      return \"kandd\\t{%2, %1, %0|%0, %1, %2}\";\n+\n     default:\n       gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       return \"and{l}\\t{%2, %0|%0, %2}\";\n     }\n }\n-  [(set_attr \"type\" \"alu,alu,imovx\")\n+  [(set_attr \"type\" \"alu,alu,imovx,msklog\")\n    (set (attr \"prefix_rex\")\n      (if_then_else\n        (and (eq_attr \"type\" \"imovx\")\n \t    (and (match_test \"INTVAL (operands[2]) == 0xff\")\n \t\t (match_operand 1 \"ext_QIreg_operand\")))\n        (const_string \"1\")\n        (const_string \"*\")))\n-   (set_attr \"length_immediate\" \"*,*,0\")\n+   (set_attr \"length_immediate\" \"*,*,0,0\")\n    (set_attr \"mode\" \"SI\")])\n \n ;; See comment for addsi_1_zext why we do use nonimmediate_operand\n@@ -7688,11 +7722,21 @@\n \t\t(match_operand:QI 2 \"general_operand\" \"qn,qmn,rn,k\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (AND, QImode, operands)\"\n-  \"@\n-   and{b}\\t{%2, %0|%0, %2}\n-   and{b}\\t{%2, %0|%0, %2}\n-   and{l}\\t{%k2, %k0|%k0, %k2}\n-   kandw\\t{%2, %1, %0|%0, %1, %2}\"\n+{\n+  switch (which_alternative)\n+    {\n+    case 0:\n+    case 1:\n+      return \"and{b}\\t{%2, %0|%0, %2}\";\n+    case 2:\n+      return \"and{l}\\t{%k2, %k0|%k0, %k2}\";\n+    case 3:\n+      return TARGET_AVX512DQ ? \"kandb\\t{%2, %1, %0|%0, %1, %2}\"\n+\t\t\t     : \"kandw\\t{%2, %1, %0|%0, %1, %2}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n   [(set_attr \"type\" \"alu,alu,alu,msklog\")\n    (set_attr \"mode\" \"QI,QI,SI,HI\")])\n \n@@ -7715,10 +7759,22 @@\n \t  (match_operand:SWI12 2 \"register_operand\" \"r,r,k\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_AVX512F\"\n-  \"@\n-   andn\\t{%k2, %k1, %k0|%k0, %k1, %k2}\n-   #\n-   kandnw\\t{%2, %1, %0|%0, %1, %2}\"\n+{\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      return \"andn\\t{%k2, %k1, %k0|%k0, %k1, %k2}\";\n+    case 1:\n+      return \"#\";\n+    case 2:\n+      if (TARGET_AVX512DQ && <MODE>mode == QImode)\n+\treturn \"kandnb\\t{%2, %1, %0|%0, %1, %2}\";\n+      else\n+\treturn \"kandnw\\t{%2, %1, %0|%0, %1, %2}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n   [(set_attr \"isa\" \"bmi,*,avx512f\")\n    (set_attr \"type\" \"bitmanip,*,msklog\")\n    (set_attr \"prefix\" \"*,*,vex\")\n@@ -8082,14 +8138,17 @@\n   \"ix86_expand_binary_operator (<CODE>, <MODE>mode, operands); DONE;\")\n \n (define_insn \"*<code><mode>_1\"\n-  [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=r,rm\")\n+  [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=r,rm,k\")\n \t(any_or:SWI48\n-\t (match_operand:SWI48 1 \"nonimmediate_operand\" \"%0,0\")\n-\t (match_operand:SWI48 2 \"<general_operand>\" \"<g>,r<i>\")))\n+\t (match_operand:SWI48 1 \"nonimmediate_operand\" \"%0,0,k\")\n+\t (match_operand:SWI48 2 \"<general_operand>\" \"<g>,r<i>,k\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"<logic>{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n+  \"@\n+   <logic>{<imodesuffix>}\\t{%2, %0|%0, %2}\n+   <logic>{<imodesuffix>}\\t{%2, %0|%0, %2}\n+   k<logic><mskmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"alu,alu,msklog\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*<code>hi_1\"\n@@ -8177,19 +8236,36 @@\n \t    (match_operand:SWI12 2 \"register_operand\" \"r,k\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_AVX512F\"\n+{\n+  if (which_alternative == 1 && <MODE>mode == QImode && TARGET_AVX512DQ)\n+    return \"kxnorb\\t{%2, %1, %0|%0, %1, %2}\";\n+  return \"kxnorw\\t{%2, %1, %0|%0, %1, %2}\";\n+}\n+  [(set_attr \"type\" \"*,msklog\")\n+   (set_attr \"prefix\" \"*,vex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"kxnor<mode>\"\n+  [(set (match_operand:SWI48x 0 \"register_operand\" \"=r,!k\")\n+\t(not:SWI48x\n+\t  (xor:SWI48x\n+\t    (match_operand:SWI48x 1 \"register_operand\" \"0,k\")\n+\t    (match_operand:SWI48x 2 \"register_operand\" \"r,k\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_AVX512BW\"\n   \"@\n    #\n-   kxnorw\\t{%2, %1, %0|%0, %1, %2}\"\n+   kxnor<mskmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"*,msklog\")\n    (set_attr \"prefix\" \"*,vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_split\n-  [(set (match_operand:SWI12 0 \"general_reg_operand\")\n-\t(not:SWI12\n-\t  (xor:SWI12\n+  [(set (match_operand:SWI1248x 0 \"general_reg_operand\")\n+\t(not:SWI1248x\n+\t  (xor:SWI1248x\n \t    (match_dup 0)\n-\t    (match_operand:SWI12 1 \"general_reg_operand\"))))\n+\t    (match_operand:SWI1248x 1 \"general_reg_operand\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_AVX512F && reload_completed\"\n    [(parallel [(set (match_dup 0)\n@@ -8199,6 +8275,8 @@\n     (set (match_dup 0)\n \t (not:HI (match_dup 0)))])\n \n+;;There are kortrest[bdq] but no intrinsics for them.\n+;;We probably don't need to implement them.\n (define_insn \"kortestzhi\"\n   [(set (reg:CCZ FLAGS_REG)\n \t(compare:CCZ\n@@ -8238,6 +8316,28 @@\n    (set_attr \"type\" \"msklog\")\n    (set_attr \"prefix\" \"vex\")])\n \n+(define_insn \"kunpcksi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=k\")\n+\t(ior:SI\n+\t  (ashift:SI\n+\t    (match_operand:SI 1 \"register_operand\" \"k\")\n+\t    (const_int 16))\n+\t  (zero_extend:SI (subreg:HI (match_operand:SI 2 \"register_operand\" \"k\") 0))))]\n+  \"TARGET_AVX512BW\"\n+  \"kunpckwd\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"kunpckdi\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=k\")\n+\t(ior:DI\n+\t  (ashift:DI\n+\t    (match_operand:DI 1 \"register_operand\" \"k\")\n+\t    (const_int 32))\n+\t  (zero_extend:DI (subreg:SI (match_operand:DI 2 \"register_operand\" \"k\") 0))))]\n+  \"TARGET_AVX512BW\"\n+  \"kunpckdq\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"mode\" \"DI\")])\n+\n ;; See comment for addsi_1_zext why we do use nonimmediate_operand\n ;; ??? Special case for immediate operand is missing - it is tricky.\n (define_insn \"*<code>si_2_zext\"\n@@ -8837,11 +8937,15 @@\n   \"ix86_expand_unary_operator (NOT, <MODE>mode, operands); DONE;\")\n \n (define_insn \"*one_cmpl<mode>2_1\"\n-  [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm\")\n-\t(not:SWI48 (match_operand:SWI48 1 \"nonimmediate_operand\" \"0\")))]\n+  [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm,k\")\n+\t(not:SWI48 (match_operand:SWI48 1 \"nonimmediate_operand\" \"0,k\")))]\n   \"ix86_unary_operator_ok (NOT, <MODE>mode, operands)\"\n-  \"not{<imodesuffix>}\\t%0\"\n-  [(set_attr \"type\" \"negnot\")\n+  \"@\n+   not{<imodesuffix>}\\t%0\n+   knot<mskmodesuffix>\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"isa\" \"*,avx512bw\")\n+   (set_attr \"type\" \"negnot,msklog\")\n+   (set_attr \"prefix\" \"*,vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*one_cmplhi2_1\"\n@@ -8861,10 +8965,21 @@\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,r,!k\")\n \t(not:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0,k\")))]\n   \"ix86_unary_operator_ok (NOT, QImode, operands)\"\n-  \"@\n-   not{b}\\t%0\n-   not{l}\\t%k0\n-   knotw\\t{%1, %0|%0, %1}\"\n+{\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      return \"not{b}\\t%0\";\n+    case 1:\n+      return \"not{l}\\t%k0\";\n+    case 2:\n+      if (TARGET_AVX512DQ)\n+\treturn \"knotb\\t{%1, %0|%0, %1}\";\n+      return \"knotw\\t{%1, %0|%0, %1}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n   [(set_attr \"isa\" \"*,*,avx512f\")\n    (set_attr \"type\" \"negnot,negnot,msklog\")\n    (set_attr \"prefix\" \"*,*,vex\")"}]}