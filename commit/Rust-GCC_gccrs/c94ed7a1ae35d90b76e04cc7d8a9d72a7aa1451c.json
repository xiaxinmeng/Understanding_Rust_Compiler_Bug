{"sha": "c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk0ZWQ3YTFhZTM1ZDkwYjc2ZTA0Y2M3ZDhhOWQ3MmE3YWExNDUxYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-09-27T07:24:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-09-27T07:24:58Z"}, "message": "builtins.c (expand_builtin, [...]): Use new %K format string specifier for diagnostics.\n\n\t* builtins.c (expand_builtin, expand_builtin_object_size,\n\texpand_builtin_memory_chk, maybe_emit_chk_warning,\n\tmaybe_emit_sprintf_chk_warning): Use new %K format string specifier\n\tfor diagnostics.\n\t* expr.c (expand_expr_real_1): Likewise.\n\t* langhooks-def.h (struct diagnostic_info): Add forward decl.\n\t(lhd_print_error_function): Add third argument.\n\t* langhooks.h (struct diagnostic_info): Add forward decl.\n\t(struct lang_hooks): Add third argument to print_error_function.\n\t* diagnostic.h (diagnostic_info): Add abstract_origin field.\n\t(diagnostic_last_function_changed, diagnostic_set_last_function): Add\n\tsecond argument.\n\t(diagnostic_report_current_function): Likewise.\n\t* toplev.c (announce_function): Pass NULL as second argument to\n\tdiagnostic_set_last_function.\n\t* diagnostic.c (diagnostic_report_current_function): Add second\n\targument, pass it as third argument to lang_hooks.print_error_function.\n\t(default_diagnostic_starter): Pass DIAGNOSTIC as second argument\n\tto diagnostic_report_current_function.\n\t(diagnostic_report_diagnostic): Initialize diagnostic->abstract_origin\n\tand message.abstract_origin.\n\t(verbatim): Initialize abstract_origin.\n\t* pretty-print.h (text_info): Add abstract_origin field.\n\t* pretty-print.c (pp_base_format): Handle %K.\n\t* langhooks.c (lhd_print_error_function): Add third argument.  If\n\tdiagnostic->abstract_origin, print virtual backtrace.\n\t* c-format.c (gcc_diag_char_table, gcc_tdiag_char_table,\n\tgcc_cdiag_char_table, gcc_cxxdiag_char_table): Support %K.\n\t(init_dynamic_diag_info): Likewise.\ncp/\n\t* error.c (cxx_print_error_function): Add third argument, pass\n\tit over to lhd_print_error_function.\n\t(cp_print_error_function): If diagnostic->abstract_origin, print\n\tvirtual backtrace.\n\t* cp-tree.h (struct diagnostic_info): New forward decl.\n\t(cxx_print_error_function): Add third argument.\njava/\n\t* lang.c (java_print_error_function): Add third argument.\ntestsuite/\n\t* lib/prune.exp: Prune also \"^In function .*$\" lines and\n\t\"^    inlined from .*$\" lines.\n\nFrom-SVN: r128830", "tree": {"sha": "da9ad83a363c4d770588541c6c1fc6b8fc3e0b7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da9ad83a363c4d770588541c6c1fc6b8fc3e0b7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dcbb0d145f6999926d17f7d7a3e6b84f6f2182b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcbb0d145f6999926d17f7d7a3e6b84f6f2182b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcbb0d145f6999926d17f7d7a3e6b84f6f2182b0"}], "stats": {"total": 392, "additions": 330, "deletions": 62}, "files": [{"sha": "f6768d8a794ecf64c52f1e9eb082bac8f3063d71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c", "patch": "@@ -1,3 +1,35 @@\n+2007-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* builtins.c (expand_builtin, expand_builtin_object_size,\n+\texpand_builtin_memory_chk, maybe_emit_chk_warning,\n+\tmaybe_emit_sprintf_chk_warning): Use new %K format string specifier\n+\tfor diagnostics.\n+\t* expr.c (expand_expr_real_1): Likewise.\n+\t* langhooks-def.h (struct diagnostic_info): Add forward decl.\n+\t(lhd_print_error_function): Add third argument.\n+\t* langhooks.h (struct diagnostic_info): Add forward decl.\n+\t(struct lang_hooks): Add third argument to print_error_function.\n+\t* diagnostic.h (diagnostic_info): Add abstract_origin field.\n+\t(diagnostic_last_function_changed, diagnostic_set_last_function): Add\n+\tsecond argument.\n+\t(diagnostic_report_current_function): Likewise.\n+\t* toplev.c (announce_function): Pass NULL as second argument to\n+\tdiagnostic_set_last_function.\n+\t* diagnostic.c (diagnostic_report_current_function): Add second\n+\targument, pass it as third argument to lang_hooks.print_error_function.\n+\t(default_diagnostic_starter): Pass DIAGNOSTIC as second argument\n+\tto diagnostic_report_current_function.\n+\t(diagnostic_report_diagnostic): Initialize diagnostic->abstract_origin\n+\tand message.abstract_origin.\n+\t(verbatim): Initialize abstract_origin.\n+\t* pretty-print.h (text_info): Add abstract_origin field.\n+\t* pretty-print.c (pp_base_format): Handle %K.\n+\t* langhooks.c (lhd_print_error_function): Add third argument.  If\n+\tdiagnostic->abstract_origin, print virtual backtrace.\n+\t* c-format.c (gcc_diag_char_table, gcc_tdiag_char_table,\n+\tgcc_cdiag_char_table, gcc_cxxdiag_char_table): Support %K.\n+\t(init_dynamic_diag_info): Likewise.\n+\n 2007-09-26  David Daney  <ddaney@avtrex.com>\n \n \tPR target/33479"}, {"sha": "bafdce0779f6c7f53522a4478eb2a9562e8e1626", "filename": "gcc/builtins.c", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c", "patch": "@@ -6273,13 +6273,13 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_VA_ARG_PACK:\n       /* All valid uses of __builtin_va_arg_pack () are removed during\n \t inlining.  */\n-      error (\"invalid use of %<__builtin_va_arg_pack ()%>\");\n+      error (\"%Kinvalid use of %<__builtin_va_arg_pack ()%>\", exp);\n       return const0_rtx;\n \n     case BUILT_IN_VA_ARG_PACK_LEN:\n       /* All valid uses of __builtin_va_arg_pack_len () are removed during\n \t inlining.  */\n-      error (\"invalid use of %<__builtin_va_arg_pack_len ()%>\");\n+      error (\"%Kinvalid use of %<__builtin_va_arg_pack_len ()%>\", exp);\n       return const0_rtx;\n \n       /* Return the address of the first anonymous stack arg.  */\n@@ -11466,12 +11466,11 @@ expand_builtin_object_size (tree exp)\n   tree ost;\n   int object_size_type;\n   tree fndecl = get_callee_fndecl (exp);\n-  location_t locus = EXPR_LOCATION (exp);\n \n   if (!validate_arglist (exp, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n     {\n-      error (\"%Hfirst argument of %D must be a pointer, second integer constant\",\n-\t     &locus, fndecl);\n+      error (\"%Kfirst argument of %D must be a pointer, second integer constant\",\n+\t     exp, fndecl);\n       expand_builtin_trap ();\n       return const0_rtx;\n     }\n@@ -11483,8 +11482,8 @@ expand_builtin_object_size (tree exp)\n       || tree_int_cst_sgn (ost) < 0\n       || compare_tree_int (ost, 3) > 0)\n     {\n-      error (\"%Hlast argument of %D is not integer constant between 0 and 3\",\n-\t     &locus, fndecl);\n+      error (\"%Klast argument of %D is not integer constant between 0 and 3\",\n+\t     exp, fndecl);\n       expand_builtin_trap ();\n       return const0_rtx;\n     }\n@@ -11527,9 +11526,8 @@ expand_builtin_memory_chk (tree exp, rtx target, enum machine_mode mode,\n \n       if (! integer_all_onesp (size) && tree_int_cst_lt (size, len))\n \t{\n-\t  location_t locus = EXPR_LOCATION (exp);\n-\t  warning (0, \"%Hcall to %D will always overflow destination buffer\",\n-\t\t   &locus, get_callee_fndecl (exp));\n+\t  warning (0, \"%Kcall to %D will always overflow destination buffer\",\n+\t\t   exp, get_callee_fndecl (exp));\n \t  return NULL_RTX;\n \t}\n \n@@ -11636,7 +11634,6 @@ maybe_emit_chk_warning (tree exp, enum built_in_function fcode)\n {\n   int is_strlen = 0;\n   tree len, size;\n-  location_t locus;\n \n   switch (fcode)\n     {\n@@ -11683,9 +11680,8 @@ maybe_emit_chk_warning (tree exp, enum built_in_function fcode)\n       src = c_strlen (src, 1);\n       if (! src || ! host_integerp (src, 1))\n \t{\n-\t  locus = EXPR_LOCATION (exp);\n-\t  warning (0, \"%Hcall to %D might overflow destination buffer\",\n-\t\t   &locus, get_callee_fndecl (exp));\n+\t  warning (0, \"%Kcall to %D might overflow destination buffer\",\n+\t\t   exp, get_callee_fndecl (exp));\n \t  return;\n \t}\n       else if (tree_int_cst_lt (src, size))\n@@ -11694,9 +11690,8 @@ maybe_emit_chk_warning (tree exp, enum built_in_function fcode)\n   else if (! host_integerp (len, 1) || ! tree_int_cst_lt (size, len))\n     return;\n \n-  locus = EXPR_LOCATION (exp);\n-  warning (0, \"%Hcall to %D will always overflow destination buffer\",\n-\t   &locus, get_callee_fndecl (exp));\n+  warning (0, \"%Kcall to %D will always overflow destination buffer\",\n+\t   exp, get_callee_fndecl (exp));\n }\n \n /* Emit warning if a buffer overflow is detected at compile time\n@@ -11754,9 +11749,8 @@ maybe_emit_sprintf_chk_warning (tree exp, enum built_in_function fcode)\n \n   if (! tree_int_cst_lt (len, size))\n     {\n-      location_t locus = EXPR_LOCATION (exp);\n-      warning (0, \"%Hcall to %D will always overflow destination buffer\",\n-\t       &locus, get_callee_fndecl (exp));\n+      warning (0, \"%Kcall to %D will always overflow destination buffer\",\n+\t       exp, get_callee_fndecl (exp));\n     }\n }\n "}, {"sha": "9eaaefa9d5a6b2e69a9ba14609bb08fa4a155c65", "filename": "gcc/c-format.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c", "patch": "@@ -561,7 +561,7 @@ static const format_char_info gcc_diag_char_table[] =\n   { \"H\",   0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n \n   /* These will require a \"tree\" at runtime.  */\n-  { \"J\", 0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",    \"\",   NULL },\n+  { \"JK\", 0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",    \"\",   NULL },\n \n   { \"<>'\", 0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n   { \"m\",   0, STD_C89, NOARGUMENTS, \"q\",     \"\",   NULL },\n@@ -584,7 +584,7 @@ static const format_char_info gcc_tdiag_char_table[] =\n   { \"H\",   0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n \n   /* These will require a \"tree\" at runtime.  */\n-  { \"DFJT\", 0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+\", \"\",   NULL },\n+  { \"DFJKT\", 0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+\", \"\",   NULL },\n \n   { \"<>'\", 0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n   { \"m\",   0, STD_C89, NOARGUMENTS, \"q\",     \"\",   NULL },\n@@ -607,7 +607,7 @@ static const format_char_info gcc_cdiag_char_table[] =\n   { \"H\",   0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n \n   /* These will require a \"tree\" at runtime.  */\n-  { \"DEFJT\", 0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+\", \"\",   NULL },\n+  { \"DEFJKT\", 0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+\", \"\",   NULL },\n \n   { \"<>'\", 0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n   { \"m\",   0, STD_C89, NOARGUMENTS, \"q\",     \"\",   NULL },\n@@ -630,7 +630,7 @@ static const format_char_info gcc_cxxdiag_char_table[] =\n   { \"H\",   0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n \n   /* These will require a \"tree\" at runtime.  */\n-  { \"ADEFJTV\",0,STD_C89,{ T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+#\",   \"\",   NULL },\n+  { \"ADEFJKTV\",0,STD_C89,{ T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+#\",   \"\",   NULL },\n \n   /* These accept either an 'int' or an 'enum tree_code' (which is handled as an 'int'.)  */\n   { \"CLOPQ\",0,STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n@@ -2611,6 +2611,9 @@ init_dynamic_diag_info (void)\n \t  i = find_char_info_specifier_index (diag_fci, 'J');\n \t  diag_fci[i].types[0].type = &t;\n \t  diag_fci[i].pointer_count = 1;\n+\t  i = find_char_info_specifier_index (diag_fci, 'K');\n+\t  diag_fci[i].types[0].type = &t;\n+\t  diag_fci[i].pointer_count = 1;\n \t}\n \n       /* Handle the __gcc_tdiag__ format specifics.  */\n@@ -2635,6 +2638,9 @@ init_dynamic_diag_info (void)\n \t  i = find_char_info_specifier_index (tdiag_fci, 'J');\n \t  tdiag_fci[i].types[0].type = &t;\n \t  tdiag_fci[i].pointer_count = 1;\n+\t  i = find_char_info_specifier_index (tdiag_fci, 'K');\n+\t  tdiag_fci[i].types[0].type = &t;\n+\t  tdiag_fci[i].pointer_count = 1;\n \t}\n \n       /* Handle the __gcc_cdiag__ format specifics.  */\n@@ -2659,6 +2665,9 @@ init_dynamic_diag_info (void)\n \t  i = find_char_info_specifier_index (cdiag_fci, 'J');\n \t  cdiag_fci[i].types[0].type = &t;\n \t  cdiag_fci[i].pointer_count = 1;\n+\t  i = find_char_info_specifier_index (cdiag_fci, 'K');\n+\t  cdiag_fci[i].types[0].type = &t;\n+\t  cdiag_fci[i].pointer_count = 1;\n \t}\n \n       /* Handle the __gcc_cxxdiag__ format specifics.  */\n@@ -2683,6 +2692,9 @@ init_dynamic_diag_info (void)\n \t  i = find_char_info_specifier_index (cxxdiag_fci, 'J');\n \t  cxxdiag_fci[i].types[0].type = &t;\n \t  cxxdiag_fci[i].pointer_count = 1;\n+\t  i = find_char_info_specifier_index (cxxdiag_fci, 'K');\n+\t  cxxdiag_fci[i].types[0].type = &t;\n+\t  cxxdiag_fci[i].pointer_count = 1;\n \t}\n     }\n }"}, {"sha": "915ac9ed986cdc95a8ac73183acb84df11247f20", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c", "patch": "@@ -1,3 +1,12 @@\n+2007-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* error.c (cxx_print_error_function): Add third argument, pass\n+\tit over to lhd_print_error_function.\n+\t(cp_print_error_function): If diagnostic->abstract_origin, print\n+\tvirtual backtrace.\n+\t* cp-tree.h (struct diagnostic_info): New forward decl.\n+\t(cxx_print_error_function): Add third argument.\n+\n 2007-09-25  Simon Martin  <simartin@users.sourceforge.net>\n \n \tPR c++/33207"}, {"sha": "f28e965465ff2efef3eca7a7b43af50f19ddf4dc", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-common.h\"\n #include \"name-lookup.h\"\n struct diagnostic_context;\n+struct diagnostic_info;\n \n /* Usage of TREE_LANG_FLAG_?:\n    0: IDENTIFIER_MARKED (IDENTIFIER_NODEs)\n@@ -4138,7 +4139,8 @@ extern void cxx_print_decl\t\t\t(FILE *, tree, int);\n extern void cxx_print_type\t\t\t(FILE *, tree, int);\n extern void cxx_print_identifier\t\t(FILE *, tree, int);\n extern void cxx_print_error_function\t(struct diagnostic_context *,\n-\t\t\t\t\t\t const char *);\n+\t\t\t\t\t\t const char *,\n+\t\t\t\t\t\t struct diagnostic_info *);\n extern void build_self_reference\t\t(void);\n extern int same_signature_p\t\t\t(const_tree, const_tree);\n extern void maybe_add_class_template_decl_list\t(tree, tree, int);"}, {"sha": "24f1d83a0c17a19b1b31fac378743f1292ef5b31", "filename": "gcc/cp/error.c", "status": "modified", "additions": 91, "deletions": 8, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c", "patch": "@@ -2329,9 +2329,10 @@ cv_to_string (tree p, int v)\n \n /* Langhook for print_error_function.  */\n void\n-cxx_print_error_function (diagnostic_context *context, const char *file)\n+cxx_print_error_function (diagnostic_context *context, const char *file,\n+\t\t\t  diagnostic_info *diagnostic)\n {\n-  lhd_print_error_function (context, file);\n+  lhd_print_error_function (context, file, diagnostic);\n   pp_base_set_prefix (context->printer, file);\n   maybe_print_instantiation_context (context);\n }\n@@ -2359,23 +2360,105 @@ static void\n cp_print_error_function (diagnostic_context *context,\n \t\t\t diagnostic_info *diagnostic)\n {\n-  if (diagnostic_last_function_changed (context))\n+  if (diagnostic_last_function_changed (context, diagnostic))\n     {\n       const char *old_prefix = context->printer->prefix;\n       const char *file = LOCATION_FILE (diagnostic->location);\n-      char *new_prefix = file ? file_name_as_prefix (file) : NULL;\n+      tree abstract_origin = diagnostic->abstract_origin;\n+      char *new_prefix = (file && abstract_origin == NULL)\n+\t\t\t ? file_name_as_prefix (file) : NULL;\n \n       pp_base_set_prefix (context->printer, new_prefix);\n \n       if (current_function_decl == NULL)\n \tpp_base_string (context->printer, \"At global scope:\");\n       else\n-\tpp_printf (context->printer, \"In %s %qs:\",\n-\t\t   function_category (current_function_decl),\n-\t\t   cxx_printable_name (current_function_decl, 2));\n+\t{\n+\t  tree fndecl, ao;\n+\n+\t  if (abstract_origin)\n+\t    {\n+\t      ao = BLOCK_ABSTRACT_ORIGIN (abstract_origin);\n+\t      while (TREE_CODE (ao) == BLOCK && BLOCK_ABSTRACT_ORIGIN (ao))\n+\t\tao = BLOCK_ABSTRACT_ORIGIN (ao);\n+\t      gcc_assert (TREE_CODE (ao) == FUNCTION_DECL);\n+\t      fndecl = ao;\n+\t    }\n+\t  else\n+\t    fndecl = current_function_decl;\n+\n+\t  pp_printf (context->printer, \"In %s %qs\",\n+\t\t     function_category (fndecl),\n+\t\t     cxx_printable_name (fndecl, 2));\n+\n+\t  while (abstract_origin)\n+\t    {\n+\t      location_t *locus;\n+\t      tree block = abstract_origin;\n+\n+\t      locus = &BLOCK_SOURCE_LOCATION (block);\n+\t      fndecl = NULL;\n+\t      block = BLOCK_SUPERCONTEXT (block);\n+\t      while (block && TREE_CODE (block) == BLOCK\n+\t\t     && BLOCK_ABSTRACT_ORIGIN (block))\n+\t\t{\n+\t\t  ao = BLOCK_ABSTRACT_ORIGIN (block);\n+\n+\t\t  while (TREE_CODE (ao) == BLOCK && BLOCK_ABSTRACT_ORIGIN (ao))\n+\t\t    ao = BLOCK_ABSTRACT_ORIGIN (ao);\n+\n+\t\t  if (TREE_CODE (ao) == FUNCTION_DECL)\n+\t\t    {\n+\t\t      fndecl = ao;\n+\t\t      break;\n+\t\t    }\n+\t\t  else if (TREE_CODE (ao) != BLOCK)\n+\t\t    break;\n+\n+\t\t  block = BLOCK_SUPERCONTEXT (block);\n+\t\t}\n+\t      if (fndecl)\n+\t\tabstract_origin = block;\n+\t      else\n+\t\t{\n+\t\t  while (block && TREE_CODE (block) == BLOCK)\n+\t\t    block = BLOCK_SUPERCONTEXT (block);\n+\n+\t\t  if (TREE_CODE (block) == FUNCTION_DECL)\n+\t\t    fndecl = block;\n+\t\t  abstract_origin = NULL;\n+\t\t}\n+\t      if (fndecl)\n+\t\t{\n+\t\t  expanded_location s = expand_location (*locus);\n+\t\t  pp_base_character (context->printer, ',');\n+\t\t  pp_base_newline (context->printer);\n+\t\t  if (s.file != NULL)\n+\t\t    {\n+#ifdef USE_MAPPED_LOCATION\n+\t\t      if (flag_show_column && s.column != 0)\n+\t\t\tpp_printf (context->printer,\n+\t\t\t\t   \"    inlined from %qs at %s:%d:%d\",\n+\t\t\t\t   cxx_printable_name (fndecl, 2),\n+\t\t\t\t   s.file, s.line, s.column);\n+\t\t      else\n+#endif\n+\t\t\tpp_printf (context->printer,\n+\t\t\t\t   \"    inlined from %qs at %s:%d\",\n+\t\t\t\t   cxx_printable_name (fndecl, 2),\n+\t\t\t\t   s.file, s.line);\n+\n+\t\t    }\n+\t\t  else\n+\t\t    pp_printf (context->printer, \"    inlined from %qs\",\n+\t\t\t       cxx_printable_name (fndecl, 2));\n+\t\t}\n+\t    }\n+\t  pp_base_character (context->printer, ':');\n+\t}\n       pp_base_newline (context->printer);\n \n-      diagnostic_set_last_function (context);\n+      diagnostic_set_last_function (context, diagnostic);\n       pp_base_destroy_prefix (context->printer);\n       context->printer->prefix = old_prefix;\n     }"}, {"sha": "6bbfe9a36e7b350030f82aa3aa27249d1c356652", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c", "patch": "@@ -261,10 +261,11 @@ diagnostic_action_after_output (diagnostic_context *context,\n /* Prints out, if necessary, the name of the current function\n    that caused an error.  Called from all error and warning functions.  */\n void\n-diagnostic_report_current_function (diagnostic_context *context)\n+diagnostic_report_current_function (diagnostic_context *context,\n+\t\t\t\t    diagnostic_info *diagnostic)\n {\n   diagnostic_report_current_module (context);\n-  lang_hooks.print_error_function (context, input_filename);\n+  lang_hooks.print_error_function (context, input_filename, diagnostic);\n }\n \n void\n@@ -302,7 +303,7 @@ static void\n default_diagnostic_starter (diagnostic_context *context,\n \t\t\t    diagnostic_info *diagnostic)\n {\n-  diagnostic_report_current_function (context);\n+  diagnostic_report_current_function (context, diagnostic);\n   pp_set_prefix (context->printer, diagnostic_build_prefix (diagnostic));\n }\n \n@@ -414,13 +415,16 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n \t\t      \" [\", cl_options[diagnostic->option_index].opt_text, \"]\", NULL));\n \n       diagnostic->message.locus = &diagnostic->location;\n+      diagnostic->message.abstract_origin = &diagnostic->abstract_origin;\n+      diagnostic->abstract_origin = NULL;\n       pp_format (context->printer, &diagnostic->message);\n       (*diagnostic_starter (context)) (context, diagnostic);\n       pp_output_formatted_text (context->printer);\n       (*diagnostic_finalizer (context)) (context, diagnostic);\n       pp_flush (context->printer);\n       diagnostic_action_after_output (context, diagnostic);\n       diagnostic->message.format_spec = saved_format_spec;\n+      diagnostic->abstract_origin = NULL;\n     }\n \n   context->lock--;\n@@ -472,6 +476,7 @@ verbatim (const char *gmsgid, ...)\n   text.args_ptr = &ap;\n   text.format_spec = _(gmsgid);\n   text.locus = NULL;\n+  text.abstract_origin = NULL;\n   pp_format_verbatim (global_dc->printer, &text);\n   pp_flush (global_dc->printer);\n   va_end (ap);"}, {"sha": "02e43bd0f8e41fd70ce87b79f931e8b7ef1f3622", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c", "patch": "@@ -37,10 +37,13 @@ typedef enum\n /* A diagnostic is described by the MESSAGE to send, the FILE and LINE of\n    its context and its KIND (ice, error, warning, note, ...)  See complete\n    list in diagnostic.def.  */\n-typedef struct\n+typedef struct diagnostic_info\n {\n   text_info message;\n   location_t location;\n+  /* TREE_BLOCK if the diagnostic is to be reported in some inline\n+     function inlined into other function, otherwise NULL.  */\n+  tree abstract_origin;\n   /* The kind of diagnostic it is about.  */\n   diagnostic_t kind;\n   /* Which OPT_* directly controls this diagnostic.  */\n@@ -137,13 +140,15 @@ struct diagnostic_context\n \n /* True if the last function in which a diagnostic was reported is\n    different from the current one.  */\n-#define diagnostic_last_function_changed(DC) \\\n-  ((DC)->last_function != current_function_decl)\n+#define diagnostic_last_function_changed(DC, DI) \\\n+  ((DC)->last_function != ((DI)->abstract_origin \\\n+\t\t\t   ? (DI)->abstract_origin : current_function_decl))\n \n /* Remember the current function as being the last one in which we report\n    a diagnostic.  */\n-#define diagnostic_set_last_function(DC) \\\n-  (DC)->last_function = current_function_decl\n+#define diagnostic_set_last_function(DC, DI) \\\n+  (DC)->last_function = (((DI) && (DI)->abstract_origin) \\\n+\t\t\t ? (DI)->abstract_origin : current_function_decl)\n \n /* True if the last module or file in which a diagnostic was reported is\n    different from the current one.  */\n@@ -185,7 +190,8 @@ extern diagnostic_context *global_dc;\n /* Diagnostic related functions.  */\n extern void diagnostic_initialize (diagnostic_context *);\n extern void diagnostic_report_current_module (diagnostic_context *);\n-extern void diagnostic_report_current_function (diagnostic_context *);\n+extern void diagnostic_report_current_function (diagnostic_context *,\n+\t\t\t\t\t\tdiagnostic_info *);\n \n /* Force diagnostics controlled by OPTIDX to be kind KIND.  */\n extern diagnostic_t diagnostic_classify_diagnostic (diagnostic_context *,"}, {"sha": "ff3258d746eb5096c78d9c12273eaa2443e82c95", "filename": "gcc/expr.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c", "patch": "@@ -8001,21 +8001,21 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       /* All valid uses of __builtin_va_arg_pack () are removed during\n \t inlining.  */\n       if (CALL_EXPR_VA_ARG_PACK (exp))\n-\terror (\"invalid use of %<__builtin_va_arg_pack ()%>\");\n+\terror (\"%Kinvalid use of %<__builtin_va_arg_pack ()%>\", exp);\n       {\n \ttree fndecl = get_callee_fndecl (exp), attr;\n \n \tif (fndecl\n \t    && (attr = lookup_attribute (\"error\",\n \t\t\t\t\t DECL_ATTRIBUTES (fndecl))) != NULL)\n-\t  error (\"call to %qs declared with attribute error: %s\",\n-\t\t lang_hooks.decl_printable_name (fndecl, 1),\n+\t  error (\"%Kcall to %qs declared with attribute error: %s\",\n+\t\t exp, lang_hooks.decl_printable_name (fndecl, 1),\n \t\t TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr))));\n \tif (fndecl\n \t    && (attr = lookup_attribute (\"warning\",\n \t\t\t\t\t DECL_ATTRIBUTES (fndecl))) != NULL)\n-\t  warning (0, \"call to %qs declared with attribute warning: %s\",\n-\t\t   lang_hooks.decl_printable_name (fndecl, 1),\n+\t  warning (0, \"%Kcall to %qs declared with attribute warning: %s\",\n+\t\t   exp, lang_hooks.decl_printable_name (fndecl, 1),\n \t\t   TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr))));\n \n \t/* Check for a built-in function.  */"}, {"sha": "bb22fdc36d05ed64759da3917d9f490620238776", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c", "patch": "@@ -1,3 +1,7 @@\n+2007-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* lang.c (java_print_error_function): Add third argument.\n+\n 2007-09-15  Tom Tromey  <tromey@redhat.com>\n \n \t* java-tree.h (struct lang_decl_func) <function_decl_body>:"}, {"sha": "42589062077ed482749dde6c605436254932559b", "filename": "gcc/java/lang.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c", "patch": "@@ -54,7 +54,8 @@ static bool java_post_options (const char **);\n static int java_handle_option (size_t scode, const char *arg, int value);\n static void put_decl_string (const char *, int);\n static void put_decl_node (tree);\n-static void java_print_error_function (diagnostic_context *, const char *);\n+static void java_print_error_function (diagnostic_context *, const char *,\n+\t\t\t\t       diagnostic_info *);\n static int merge_init_test_initialization (void * *, void *);\n static int inline_init_test_initialization (void * *, void *);\n static bool java_dump_tree (void *, tree);\n@@ -489,7 +490,8 @@ static GTY(()) tree last_error_function_context;\n static GTY(()) tree last_error_function;\n static void\n java_print_error_function (diagnostic_context *context ATTRIBUTE_UNUSED,\n-\t\t\t   const char *file)\n+\t\t\t   const char *file,\n+\t\t\t   diagnostic_info *diagnostic ATTRIBUTE_UNUSED)\n {\n   /* Don't print error messages with bogus function prototypes.  */\n   if (inhibit_error_function_printing)"}, {"sha": "6eca2f0497f03810ed74ee874e26412f9fcacd0f", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hooks.h\"\n \n struct diagnostic_context;\n+struct diagnostic_info;\n \n /* Note to creators of new hooks:\n \n@@ -53,7 +54,7 @@ extern int lhd_types_compatible_p (tree, tree);\n extern rtx lhd_expand_expr (tree, rtx, enum machine_mode, int, rtx *);\n extern int lhd_expand_decl (tree);\n extern void lhd_print_error_function (struct diagnostic_context *,\n-\t\t\t\t      const char *);\n+\t\t\t\t      const char *, struct diagnostic_info *);\n extern void lhd_set_decl_assembler_name (tree);\n extern bool lhd_warn_unused_global_decl (const_tree);\n extern void lhd_incomplete_type_error (const_tree, const_tree);"}, {"sha": "4682514508d121e6cf2bb855453305c7229ab2a3", "filename": "gcc/langhooks.c", "status": "modified", "additions": 90, "deletions": 9, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c", "patch": "@@ -381,30 +381,111 @@ lhd_initialize_diagnostics (struct diagnostic_context *ctx ATTRIBUTE_UNUSED)\n /* The default function to print out name of current function that caused\n    an error.  */\n void\n-lhd_print_error_function (diagnostic_context *context, const char *file)\n+lhd_print_error_function (diagnostic_context *context, const char *file,\n+\t\t\t  diagnostic_info *diagnostic)\n {\n-  if (diagnostic_last_function_changed (context))\n+  if (diagnostic_last_function_changed (context, diagnostic))\n     {\n       const char *old_prefix = context->printer->prefix;\n-      char *new_prefix = file ? file_name_as_prefix (file) : NULL;\n+      tree abstract_origin = diagnostic->abstract_origin;\n+      char *new_prefix = (file && abstract_origin == NULL)\n+\t\t\t ? file_name_as_prefix (file) : NULL;\n \n       pp_set_prefix (context->printer, new_prefix);\n \n       if (current_function_decl == NULL)\n \tpp_printf (context->printer, _(\"At top level:\"));\n       else\n \t{\n-\t  if (TREE_CODE (TREE_TYPE (current_function_decl)) == METHOD_TYPE)\n+\t  tree fndecl, ao;\n+\n+\t  if (abstract_origin)\n+\t    {\n+\t      ao = BLOCK_ABSTRACT_ORIGIN (abstract_origin);\n+\t      while (TREE_CODE (ao) == BLOCK && BLOCK_ABSTRACT_ORIGIN (ao))\n+\t\tao = BLOCK_ABSTRACT_ORIGIN (ao);\n+\t      gcc_assert (TREE_CODE (ao) == FUNCTION_DECL);\n+\t      fndecl = ao;\n+\t    }\n+\t  else\n+\t    fndecl = current_function_decl;\n+\n+\t  if (TREE_CODE (TREE_TYPE (fndecl)) == METHOD_TYPE)\n \t    pp_printf\n-\t      (context->printer, _(\"In member function %qs:\"),\n-\t       lang_hooks.decl_printable_name (current_function_decl, 2));\n+\t      (context->printer, _(\"In member function %qs\"),\n+\t       lang_hooks.decl_printable_name (fndecl, 2));\n \t  else\n \t    pp_printf\n-\t      (context->printer, _(\"In function %qs:\"),\n-\t       lang_hooks.decl_printable_name (current_function_decl, 2));\n+\t      (context->printer, _(\"In function %qs\"),\n+\t       lang_hooks.decl_printable_name (fndecl, 2));\n+\n+\t  while (abstract_origin)\n+\t    {\n+\t      location_t *locus;\n+\t      tree block = abstract_origin;\n+\n+\t      locus = &BLOCK_SOURCE_LOCATION (block);\n+\t      fndecl = NULL;\n+\t      block = BLOCK_SUPERCONTEXT (block);\n+\t      while (block && TREE_CODE (block) == BLOCK\n+\t\t     && BLOCK_ABSTRACT_ORIGIN (block))\n+\t\t{\n+\t\t  ao = BLOCK_ABSTRACT_ORIGIN (block);\n+\n+\t\t  while (TREE_CODE (ao) == BLOCK && BLOCK_ABSTRACT_ORIGIN (ao))\n+\t\t    ao = BLOCK_ABSTRACT_ORIGIN (ao);\n+\n+\t\t  if (TREE_CODE (ao) == FUNCTION_DECL)\n+\t\t    {\n+\t\t      fndecl = ao;\n+\t\t      break;\n+\t\t    }\n+\t\t  else if (TREE_CODE (ao) != BLOCK)\n+\t\t    break;\n+\n+\t\t  block = BLOCK_SUPERCONTEXT (block);\n+\t\t}\n+\t      if (fndecl)\n+\t\tabstract_origin = block;\n+\t      else\n+\t\t{\n+\t\t  while (block && TREE_CODE (block) == BLOCK)\n+\t\t    block = BLOCK_SUPERCONTEXT (block);\n+\n+\t\t  if (TREE_CODE (block) == FUNCTION_DECL)\n+\t\t    fndecl = block;\n+\t\t  abstract_origin = NULL;\n+\t\t}\n+\t      if (fndecl)\n+\t\t{\n+\t\t  expanded_location s = expand_location (*locus);\n+\t\t  pp_character (context->printer, ',');\n+\t\t  pp_newline (context->printer);\n+\t\t  if (s.file != NULL)\n+\t\t    {\n+#ifdef USE_MAPPED_LOCATION\n+\t\t      if (flag_show_column && s.column != 0)\n+\t\t\tpp_printf (context->printer,\n+\t\t\t\t   _(\"    inlined from %qs at %s:%d:%d\"),\n+\t\t\t\t   lang_hooks.decl_printable_name (fndecl, 2),\n+\t\t\t\t   s.file, s.line, s.column);\n+\t\t      else\n+#endif\n+\t\t\tpp_printf (context->printer,\n+\t\t\t\t   _(\"    inlined from %qs at %s:%d\"),\n+\t\t\t\t   lang_hooks.decl_printable_name (fndecl, 2),\n+\t\t\t\t   s.file, s.line);\n+\n+\t\t    }\n+\t\t  else\n+\t\t    pp_printf (context->printer, _(\"    inlined from %qs\"),\n+\t\t\t       lang_hooks.decl_printable_name (fndecl, 2));\n+\t\t}\n+\t    }\n+\t  pp_character (context->printer, ':');\n \t}\n \n-      diagnostic_set_last_function (context);\n+      diagnostic_set_last_function (context, diagnostic);\n       pp_flush (context->printer);\n       context->printer->prefix = old_prefix;\n       free ((char*) new_prefix);"}, {"sha": "8a442753b1f9c9ba4f9dabb76d9b5319106ad0e7", "filename": "gcc/langhooks.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n /* This file should be #include-d after tree.h.  */\n \n struct diagnostic_context;\n+struct diagnostic_info;\n \n struct gimplify_omp_ctx;\n \n@@ -367,7 +368,8 @@ struct lang_hooks\n   tree (*lang_get_callee_fndecl) (const_tree);\n \n   /* Called by report_error_function to print out function name.  */\n-  void (*print_error_function) (struct diagnostic_context *, const char *);\n+  void (*print_error_function) (struct diagnostic_context *, const char *,\n+\t\t\t\tstruct diagnostic_info *);\n \n   /* Called from expr_size to calculate the size of the value of an\n      expression in a language-dependent way.  Returns a tree for the size"}, {"sha": "c4de15dc21a63b646dfa0e0840aca9b372b44b95", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c", "patch": "@@ -187,6 +187,7 @@ pp_base_indent (pretty_printer *pp)\n    %Ns: likewise, but length specified as constant in the format string.\n    %H: location_t.\n    %J: a decl tree, from which DECL_SOURCE_LOCATION will be recorded.\n+   %K: a statement, from which EXPR_LOCATION and TREE_BLOCK will be recorded.\n    Flag 'q': quote formatted text (must come immediately after '%').\n \n    Arguments can be used sequentially, or through %N$ resp. *N$\n@@ -486,6 +487,33 @@ pp_base_format (pretty_printer *pp, text_info *text)\n \t  }\n \t  break;\n \n+\tcase 'K':\n+\t  {\n+\t    tree t = va_arg (*text->args_ptr, tree), block;\n+\t    gcc_assert (text->locus != NULL);\n+\t    *text->locus = EXPR_LOCATION (t);\n+\t    gcc_assert (text->abstract_origin != NULL);\n+\t    block = TREE_BLOCK (t);\n+\t    *text->abstract_origin = NULL;\n+\t    while (block\n+\t\t   && TREE_CODE (block) == BLOCK\n+\t\t   && BLOCK_ABSTRACT_ORIGIN (block))\n+\t      {\n+\t\ttree ao = BLOCK_ABSTRACT_ORIGIN (block);\n+\n+\t\twhile (TREE_CODE (ao) == BLOCK && BLOCK_ABSTRACT_ORIGIN (ao))\n+\t\t  ao = BLOCK_ABSTRACT_ORIGIN (ao);\n+\n+\t\tif (TREE_CODE (ao) == FUNCTION_DECL)\n+\t\t  {\n+\t\t    *text->abstract_origin = block;\n+\t\t    break;\n+\t\t  }\n+\t\tblock = BLOCK_SUPERCONTEXT (block);\n+\t      }\n+\t  }\n+\t  break;\n+\n \tcase '.':\n \t  {\n \t    int n;"}, {"sha": "039058ee132c56167d85021b8cc82876c8115ae4", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c", "patch": "@@ -35,6 +35,7 @@ typedef struct\n   va_list *args_ptr;\n   int err_no;  /* for %m */\n   location_t *locus;\n+  tree *abstract_origin;\n } text_info;\n \n /* How often diagnostics are prefixed by their locations:"}, {"sha": "ec014ea8cc804d2c9b91f45e97ccbc23bd49d8e7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c", "patch": "@@ -1,3 +1,8 @@\n+2007-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* lib/prune.exp: Prune also \"^In function .*$\" lines and\n+\t\"^    inlined from .*$\" lines.\n+\n 2007-09-26  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/33563"}, {"sha": "2e901a08f4db298fa4f81880795ed10b3ed1e843", "filename": "gcc/testsuite/lib/prune.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprune.exp?ref=c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c", "patch": "@@ -20,9 +20,10 @@\n proc prune_gcc_output { text } {\n     #send_user \"Before:$text\\n\"\n \n-    regsub -all \"(^|\\n)\\[^\\n\\]*: In ((static member )?function|member|method|(copy )?constructor|destructor|instantiation|program|subroutine|block-data) \\[^\\n\\]*\" $text \"\" text\n+    regsub -all \"(^|\\n)(\\[^\\n\\]*: )?In ((static member )?function|member|method|(copy )?constructor|destructor|instantiation|program|subroutine|block-data) \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)\\[^\\n\\]*: At (top level|global scope):\\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)\\[^\\n\\]*:   instantiated from \\[^\\n\\]*\" $text \"\" text\n+    regsub -all \"(^|\\n)    inlined from \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)collect2: ld returned \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)collect: re(compiling|linking)\\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)Please submit.*instructions\\[^\\n\\]*\" $text \"\" text"}, {"sha": "0d8c82b7ac6b765dd3a2b74a7942a556f7cc4107", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=c94ed7a1ae35d90b76e04cc7d8a9d72a7aa1451c", "patch": "@@ -434,7 +434,7 @@ announce_function (tree decl)\n \tfprintf (stderr, \" %s\", lang_hooks.decl_printable_name (decl, 2));\n       fflush (stderr);\n       pp_needs_newline (global_dc->printer) = true;\n-      diagnostic_set_last_function (global_dc);\n+      diagnostic_set_last_function (global_dc, (diagnostic_info *) NULL);\n     }\n }\n "}]}