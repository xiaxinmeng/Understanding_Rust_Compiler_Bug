{"sha": "d59b3b679c686f86430a4a6fc5f24058ce2e5174", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU5YjNiNjc5YzY4NmY4NjQzMGE0YTZmYzVmMjQwNThjZTJlNTE3NA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2001-11-14T23:36:24Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-11-14T23:36:24Z"}, "message": "* fold-const.c (fold): Optimize strlen comparisons against zero.\n\nFrom-SVN: r47029", "tree": {"sha": "139b295f03452e9723e5c4b561710542d0d2a2b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/139b295f03452e9723e5c4b561710542d0d2a2b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d59b3b679c686f86430a4a6fc5f24058ce2e5174", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d59b3b679c686f86430a4a6fc5f24058ce2e5174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d59b3b679c686f86430a4a6fc5f24058ce2e5174", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d59b3b679c686f86430a4a6fc5f24058ce2e5174/comments", "author": null, "committer": null, "parents": [{"sha": "81bc01c265b5115163d06812174653e1db13d537", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81bc01c265b5115163d06812174653e1db13d537", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81bc01c265b5115163d06812174653e1db13d537"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "e348057c53a9083b862ebef3d1095798e35ca795", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d59b3b679c686f86430a4a6fc5f24058ce2e5174/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d59b3b679c686f86430a4a6fc5f24058ce2e5174/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d59b3b679c686f86430a4a6fc5f24058ce2e5174", "patch": "@@ -1,3 +1,7 @@\n+2001-11-14  Roger Sayle <roger@eyesopen.com>\n+\n+\t* fold-const.c (fold): Optimize strlen comparisons against zero.\n+\n 2001-11-14  David O'Brien  <obrien@FreeBSD.org>\n \n \t* config.gcc (sparc64-wrs-vxworks*, sparc-*-netbsd*, sparc-*-openbsd*,"}, {"sha": "d6769d6f2328fd231c780c3d32f1e9915562d7a2", "filename": "gcc/fold-const.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d59b3b679c686f86430a4a6fc5f24058ce2e5174/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d59b3b679c686f86430a4a6fc5f24058ce2e5174/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=d59b3b679c686f86430a4a6fc5f24058ce2e5174", "patch": "@@ -6899,6 +6899,33 @@ fold (expr)\n \t\t\t      fold (build (code, type, imag0, imag1))));\n \t}\n \n+      /* Optimize comparisons of strlen vs zero to a compare of the\n+\t first character of the string vs zero.  To wit, \n+\t \tstrlen(ptr) == 0   =>  *ptr == 0\n+\t\tstrlen(ptr) != 0   =>  *ptr != 0\n+\t Other cases should reduce to one of these two (or a constant)\n+\t due to the return value of strlen being unsigned.  */\n+      if ((code == EQ_EXPR || code == NE_EXPR)\n+\t  && integer_zerop (arg1)\n+\t  && TREE_CODE (arg0) == CALL_EXPR\n+\t  && TREE_CODE (TREE_OPERAND (arg0, 0)) == ADDR_EXPR)\n+\t{\n+\t  tree fndecl = TREE_OPERAND (TREE_OPERAND (arg0, 0), 0);\n+\t  tree arglist;\n+\n+\t  if (TREE_CODE (fndecl) == FUNCTION_DECL\n+\t      && DECL_BUILT_IN (fndecl)\n+\t      && DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_MD\n+\t      && DECL_FUNCTION_CODE (fndecl) == BUILT_IN_STRLEN\n+\t      && (arglist = TREE_OPERAND (arg0, 1))\n+\t      && TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) == POINTER_TYPE\n+\t      && ! TREE_CHAIN (arglist))\n+\t    return fold (build (code, type,\n+\t\t\t\tbuild1 (INDIRECT_REF, char_type_node,\n+\t\t\t\t\tTREE_VALUE(arglist)),\n+\t\t\t\tinteger_zero_node));\n+\t}\n+\n       /* From here on, the only cases we handle are when the result is\n \t known to be a constant.\n "}]}