{"sha": "b191a12525973bac726397a591bbd636dc465e07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE5MWExMjUyNTk3M2JhYzcyNjM5N2E1OTFiYmQ2MzZkYzQ2NWUwNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T15:36:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T15:36:49Z"}, "message": "[multiple changes]\n\n2011-08-02  Vincent Celier  <celier@adacore.com>\n\n\t* adaint.c (file_names_case_sensitive_cache): New static int.\n\t(__gnat_get_file_names_case_sensitive): Cache the return value in\n\tfile_names_case_sensitive_cache at the first invocation, to avoid\n\tmultiple calls to getenv.\n\n2011-08-02  Bob Duff  <duff@adacore.com>\n\n\t* sem_ch12.adb (Validate_Derived_Type_Instance): Implement AI05-0218-1.\n\nFrom-SVN: r177189", "tree": {"sha": "4305c0af794e314013320062252e0c080fe25c92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4305c0af794e314013320062252e0c080fe25c92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b191a12525973bac726397a591bbd636dc465e07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b191a12525973bac726397a591bbd636dc465e07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b191a12525973bac726397a591bbd636dc465e07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b191a12525973bac726397a591bbd636dc465e07/comments", "author": null, "committer": null, "parents": [{"sha": "316a0661918aacd3cc0acca417b5390ad1e3d535", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/316a0661918aacd3cc0acca417b5390ad1e3d535", "html_url": "https://github.com/Rust-GCC/gccrs/commit/316a0661918aacd3cc0acca417b5390ad1e3d535"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "bafa761e5eb14b197d6bef2012fc3ae63b2cfe17", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b191a12525973bac726397a591bbd636dc465e07/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b191a12525973bac726397a591bbd636dc465e07/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b191a12525973bac726397a591bbd636dc465e07", "patch": "@@ -1,3 +1,14 @@\n+2011-08-02  Vincent Celier  <celier@adacore.com>\n+\n+\t* adaint.c (file_names_case_sensitive_cache): New static int.\n+\t(__gnat_get_file_names_case_sensitive): Cache the return value in\n+\tfile_names_case_sensitive_cache at the first invocation, to avoid\n+\tmultiple calls to getenv.\n+\n+2011-08-02  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch12.adb (Validate_Derived_Type_Instance): Implement AI05-0218-1.\n+\n 2011-08-02  Yannick Moy  <moy@adacore.com>\n \n \t* sem_ch3.adb, sem_ch5.adb, sem_ch9.adb, sem_prag.adb, sem.ads,"}, {"sha": "bfaa31a941a0a5b8b6f3b07695693817eb49a8a2", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b191a12525973bac726397a591bbd636dc465e07/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b191a12525973bac726397a591bbd636dc465e07/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=b191a12525973bac726397a591bbd636dc465e07", "patch": "@@ -592,21 +592,27 @@ __gnat_get_maximum_file_name_length (void)\n \n /* Return nonzero if file names are case sensitive.  */\n \n+static int file_names_case_sensitive_cache = -1;\n+\n int\n __gnat_get_file_names_case_sensitive (void)\n {\n-  const char *sensitive = getenv (\"GNAT_FILE_NAME_CASE_SENSITIVE\");\n+  if (file_names_case_sensitive_cache == -1)\n+    {\n+      const char *sensitive = getenv (\"GNAT_FILE_NAME_CASE_SENSITIVE\");\n \n-  if (sensitive != NULL\n-      && (sensitive[0] == '0' || sensitive[0] == '1')\n-      && sensitive[1] == '\\0')\n-    return sensitive[0] - '0';\n-  else\n+      if (sensitive != NULL\n+          && (sensitive[0] == '0' || sensitive[0] == '1')\n+          && sensitive[1] == '\\0')\n+        file_names_case_sensitive_cache = sensitive[0] - '0';\n+      else\n #if defined (VMS) || defined (WINNT) || defined (__APPLE__)\n-    return 0;\n+        file_names_case_sensitive_cache = 0;\n #else\n-    return 1;\n+        file_names_case_sensitive_cache = 1;\n #endif\n+    }\n+  return file_names_case_sensitive_cache;\n }\n \n /* Return nonzero if environment variables are case sensitive.  */"}, {"sha": "3c93ca3f84bbd266ba8f00a743315ef3d37c8d69", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b191a12525973bac726397a591bbd636dc465e07/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b191a12525973bac726397a591bbd636dc465e07/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=b191a12525973bac726397a591bbd636dc465e07", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -9835,17 +9835,15 @@ package body Sem_Ch12 is\n             end if;\n          end if;\n \n-         --  Perform atomic/volatile checks (RM C.6(12))\n+         --  Perform atomic/volatile checks (RM C.6(12)). Note that AI05-0218-1\n+         --  removes the second instance of the phrase \"or allow pass by copy\".\n \n          if Is_Atomic (Act_T) and then not Is_Atomic (Ancestor) then\n             Error_Msg_N\n               (\"cannot have atomic actual type for non-atomic formal type\",\n                Actual);\n \n-         elsif Is_Volatile (Act_T)\n-           and then not Is_Volatile (Ancestor)\n-           and then Is_By_Reference_Type (Ancestor)\n-         then\n+         elsif Is_Volatile (Act_T) and then not Is_Volatile (Ancestor) then\n             Error_Msg_N\n               (\"cannot have volatile actual type for non-volatile formal type\",\n                Actual);"}]}