{"sha": "5408ce78640e8a2ff7a45ec57abaa3a1c4750b19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQwOGNlNzg2NDBlOGEyZmY3YTQ1ZWM1N2FiYWEzYTFjNDc1MGIxOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1997-10-01T17:50:03Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-10-01T17:50:03Z"}, "message": "Makefile.in (g++FAQ.*): New rules.\n\n\t* Makefile.in (g++FAQ.*): New rules.\n\t(CONFLICTS): Update.\n\t* g++FAQ.texi: Moved from libg++.\n\n\t* parse.y (PFUNCNAME): Only specify the type once.\n\nFrom-SVN: r15827", "tree": {"sha": "563048a45756ca1c4d04e79486a9dc180beb68c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/563048a45756ca1c4d04e79486a9dc180beb68c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5408ce78640e8a2ff7a45ec57abaa3a1c4750b19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5408ce78640e8a2ff7a45ec57abaa3a1c4750b19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5408ce78640e8a2ff7a45ec57abaa3a1c4750b19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5408ce78640e8a2ff7a45ec57abaa3a1c4750b19/comments", "author": null, "committer": null, "parents": [{"sha": "a3f44a133707389051be1c877f8ac8133ccbaaa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f44a133707389051be1c877f8ac8133ccbaaa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3f44a133707389051be1c877f8ac8133ccbaaa7"}], "stats": {"total": 2199, "additions": 2197, "deletions": 2}, "files": [{"sha": "717305a17466c70b13914f67fe810b7fab29e2a6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5408ce78640e8a2ff7a45ec57abaa3a1c4750b19/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5408ce78640e8a2ff7a45ec57abaa3a1c4750b19/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5408ce78640e8a2ff7a45ec57abaa3a1c4750b19", "patch": "@@ -1,3 +1,11 @@\n+Wed Oct  1 08:41:38 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* Makefile.in (g++FAQ.*): New rules.\n+\t(CONFLICTS): Update.\n+\t* g++FAQ.texi: Moved from libg++.\n+\n+\t* parse.y (PFUNCNAME): Only specify the type once.\n+\n 1997-10-01  Brendan Kehoe  <brendan@lasher.cygnus.com>\n \n \t* lex.c (real_yylex): Clean up the code to fully behave the way"}, {"sha": "6bac1407037e56e9c89085a872e284382644d8b2", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5408ce78640e8a2ff7a45ec57abaa3a1c4750b19/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5408ce78640e8a2ff7a45ec57abaa3a1c4750b19/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=5408ce78640e8a2ff7a45ec57abaa3a1c4750b19", "patch": "@@ -202,7 +202,7 @@ parse.o : $(PARSE_C) $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h lex.h \\\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(BIG_SWITCHFLAG) \\\n   `echo $(PARSE_C) | sed 's,^\\./,,'`\n \n-CONFLICTS = expect 18 shift/reduce conflicts and 39 reduce/reduce conflicts.\n+CONFLICTS = expect 19 shift/reduce conflicts and 39 reduce/reduce conflicts.\n $(PARSE_H) : $(PARSE_C)\n $(PARSE_C) : $(srcdir)/parse.y\n \t@echo $(CONFLICTS)\n@@ -273,3 +273,32 @@ TAGS: force\n .PHONY: TAGS\n \n force:\n+\n+g++FAQ.info:\t$(srcdir)/g++FAQ.texi\n+\t$(MAKEINFO) --no-split $(srcdir)/g++FAQ.texi -o ./g++FAQ.info\n+\n+# Preprocess the texi file so that the final document will have\n+# hyperlinks.\n+# It would be nice if texi2html could do something like this itself.\n+\n+# Assumption 1: the FAQ puts all http: and ftp: links in a @file{...}.\n+# Assumption 2: newsgroups are like @file{comp.foo}\n+# Assumption 3: email addresses match the regexp shown.\n+\n+g++FAQ.html:\t$(srcdir)/g++FAQ.texi\n+\tmkdir work\n+\tsed -e 's?@file{\\([fth]*p://[^}]*\\)}?@strong{<A HREF=\"\\1\">\\1</A>}?' \\\n+\t    -e 's?@file{\\(comp\\.[-a-z+.]*\\)}?<A HREF=\"news:\\1\">\\1</A>?' \\\n+\t    -e 's?@file{\\(gnu\\.[-a-z+.]*\\)}?<A HREF=\"news:\\1\">\\1</A>?' \\\n+\t    -e 's?\\([.+a-zA-Z0-9-]*@@[.a-zA-Z0-9-]*[a-zA-Z0-9]\\)?<A HREF=\"mailto:\\1\">\\1</A>?' \\\n+\t    $(srcdir)/g++FAQ.texi > work/g++FAQ.texi\n+\tcd work; texi2html -monolithic g++FAQ.texi\n+\tmv work/*.html .\n+\trm -r work\n+\n+# Make plain-text form.\n+\n+g++FAQ.txt:\t$(srcdir)/g++FAQ.texi\n+\t$(MAKEINFO) --no-split --no-headers -o - $(srcdir)/g++FAQ.texi |\\\n+\t\tsed '/^Concept Index/,$$d' > g++FAQ.txt\n+"}, {"sha": "09c812bc5852fa6b4987aaea6875cbe8132f7bcb", "filename": "gcc/cp/g++FAQ.texi", "status": "added", "additions": 2158, "deletions": 0, "changes": 2158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5408ce78640e8a2ff7a45ec57abaa3a1c4750b19/gcc%2Fcp%2Fg%2B%2BFAQ.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5408ce78640e8a2ff7a45ec57abaa3a1c4750b19/gcc%2Fcp%2Fg%2B%2BFAQ.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fg%2B%2BFAQ.texi?ref=5408ce78640e8a2ff7a45ec57abaa3a1c4750b19", "patch": "@@ -0,0 +1,2158 @@\n+\\input texinfo.tex      @c -*-texinfo-*-\n+@c %**start of header\n+@setfilename g++FAQ.info\n+@settitle Frequently asked questions about the GNU C++ compiler\n+@setchapternewpage off\n+@c version: @(#)g++FAQ.texi\t1.56 09/15/97\n+@c %**end of header\n+\n+@iftex\n+@finalout\n+@end iftex\n+@titlepage\n+@title G++ FAQ\n+@subtitle Frequently asked questions about the GNU C++ compiler\n+@subtitle September 14, 1997\n+@sp 1\n+@author Joe Buck\n+@page\n+@end titlepage\n+\n+@ifinfo\n+@node Top, basics, (dir), (dir)\n+@top\n+@unnumbered FAQ for g++ and libg++, by Joe Buck (jbuck@@synopsys.com)\n+@end ifinfo\n+\n+@cindex FAQ for g++, latest version\n+@cindex Archive site for FAQ lists\n+@cindex rtfm.mit.edu\n+@cindex Joe Buck <jbuck@@synopsys.com>\n+@cindex FAQ for C++\n+\n+This is a list of frequently asked questions (FAQ) for g++ users; thanks to\n+all those who sent suggestions for improvements.  Thanks to Marcus Speh\n+for doing the index.  A hypertext version is available on the World Wide\n+Web at @file{http://www.cygnus.com/misc/g++FAQ_toc.html}.\n+\n+This document has just been reorganized a bit.  There is some new\n+information about upcoming g++ releases and egcs; more needs to be done\n+but that will need to wait for next time.  A diff would look misleadingly\n+large, since I blew away and rebuilt the texinfo menus.\n+\n+Please send updates and corrections to the FAQ to\n+@code{jbuck@@synopsys.com}.  Please do @emph{not} use me as a resource\n+to get your questions answered; that's what @file{gnu.g++.help} is for and I\n+don't have the time to support the net's use of g++.\n+\n+Many FAQs, including this one, are available on the archive site\n+``rtfm.mit.edu''; see @*\n+@file{ftp://rtfm.mit.edu/pub/usenet/news.answers}.\n+This FAQ may be found in the subdirectory g++-FAQ.\n+\n+@cindex Marshall Cline \n+@cindex comp.lang.c++\n+@cindex C++ FAQ\n+This FAQ is intended to supplement, not replace, Marshall Cline's\n+excellent FAQ for the C++ language and for the newsgroup\n+@file{comp.lang.c++}.  Especially if g++ is the first C++\n+compiler you've ever used, the question ``How do I do <X> with g++?''\n+is probably really ``How do I do <X> in C++?''.\n+You can find this FAQ at\n+@file{ftp://rtfm.mit.edu/pub/usenet/comp.lang.c++},\n+or in HTML form at @file{http://www.cerfnet.com/~mpcline/On-Line-C++-FAQs/}.\n+\n+@menu\n+* basics::                      What is g++?  How do I get it?\n+* installation::                How to install, installation problems\n+* evolution::                   The Evolution of g++\n+* User Problems::               Commonly reported problems and bugs\n+* legalities::                  Lawyer stuff, GPL, LGPL, etc.\n+* index::                       Index of terms\n+\n+ --- The Detailed Node Listing ---\n+\n+The basics: what is g++?\n+\n+* latest versions::             \n+* g++ for Unix::                \n+* g++ for HP::                  \n+* g++ for Solaris 2.x::         \n+* g++ for other platforms::     \n+* 1.x vs 2.x versions::         \n+\n+Installation Issues and Problems\n+\n+* gcc-2 + g++-1::               \n+* what else do I need?::        \n+* use GNU linker?::             \n+* Use GNU assembler?::          \n+* shared libraries::            \n+* repository::                  \n+* repo bugs::                   \n+* Use GNU C library?::          \n+* Global constructor problems::  \n+* Strange assembler errors::    \n+* Other problems building libg++::  \n+* More size_t problems::        \n+* Rebuild libg++?::             \n+* co-existing versions::        \n+* Installing on Linux::         \n+* Linux Slackware 3.0::         \n+\n+The Evolution of g++\n+\n+* version 2.7.x::               \n+* libstdc++::                   \n+* new work::                    \n+* egcs::                        \n+* When?::                       \n+\n+User Problems\n+\n+* missing virtual table::       \n+* for scope::                   \n+* const constructor::           \n+* unused parameter warnings::   \n+* jump crosses initialization::  \n+* Demangler::                   \n+* static data members::         \n+* internal compiler error::     \n+* bug reports::                 \n+* porting to g++::              \n+* name mangling::               \n+* problems linking with other libraries::  \n+* documentation::               \n+* templates::                   \n+* undefined templates::         \n+* redundant templates::         \n+* Standard Template Library::   \n+* STL and string::              \n+* exceptions::                  \n+* namespaces::                  \n+* agreement with standards::    \n+* compiling standard libraries::  \n+* debugging on SVR4 systems::   \n+* debugging problems on Solaris::  \n+* X11 conflicts with libg++::   \n+* assignment to streams::       \n+@end menu\n+\n+@node basics, installation, Top, Top\n+@chapter The basics: what is g++?\n+\n+@cindex Free Software Foundation\n+@cindex GNU Public License\n+@cindex GPL\n+\n+g++ is the traditional nickname of GNU C++, a freely redistributable\n+C++ compiler produced by the Free Software Foundation plus dozens of\n+skilled volunteers.  I say ``traditional nickname'' because the GNU\n+compiler suite, gcc, bundles together compilers for C, Objective-C,\n+and C++ in one package.\n+\n+While the source code to gcc/g++ can be downloaded for free,\n+it is not public domain, but is protected by the GNU Public License,\n+or GPL (@pxref{legalities}).\n+\n+@menu\n+* latest versions::             \n+* g++ for Unix::                \n+* g++ for HP::                  \n+* g++ for Solaris 2.x::         \n+* g++ for other platforms::     \n+* 1.x vs 2.x versions::         \n+@end menu\n+\n+@node latest versions, g++ for Unix, basics, basics\n+@section What is the latest version of gcc, g++, and libg++?\n+\n+@cindex gcc/g++, version date\n+The current version of gcc/g++ is 2.7.2.3, released August 20, 1997.\n+Although that looks very recent, the only change is a minor patch to\n+resolve a problem with Linux and the GNU C library; users not interested\n+in that functionality have no reason to upgrade.\n+\n+The current version of libg++ is 2.7.2, released July 4, 1996.\n+The last release of gcc/g++ with improvements to the C++ front end was\n+2.7.2, released Nov. 25, 1995, nearly two years ago.\n+\n+I would strongly recommend that anyone using a g++ version earlier\n+than 2.7.2 should upgrade if at all possible (@pxref{version 2.7.x}).\n+\n+For some non-Unix platforms, the latest port of gcc may be an earlier\n+version (2.6.3, say).  You'll need to use a version of libg++ that\n+has the same first two digits as the compiler version, e.g. use libg++\n+2.6.x (for the latest x you can find) with gcc version 2.6.3.\n+\n+The latest \"1.x\" version of gcc is 1.42, and the latest \"1.x\" version of\n+g++ is 1.42.0.\n+While gcc 1.42 is quite usable for C programs,\n+I recommend against using g++ 1.x except in special circumstances\n+(and I can't think of any such circumstances).\n+\n+@node g++ for Unix, g++ for HP, latest versions, basics\n+@section How do I get a copy of g++ for Unix?\n+\n+First, you may already have it if you have gcc for your platform;\n+g++ and gcc are combined now (as of gcc version 2.0).\n+@cindex GNU gcc, version\n+@cindex GNU g++ and gcc\n+\n+You can get g++ from a friend who has a copy, by anonymous FTP or\n+UUCP, or by ordering a tape or CD-ROM from the Free Software\n+Foundation.\n+@cindex g++, ordering\n+@cindex g++, getting a copy\n+\n+The Free Software Foundation is a nonprofit organization that\n+distributes software and manuals to raise funds for more GNU\n+development.  Getting your copy from the FSF contributes directly to\n+paying staff to develop GNU software.  CD-ROMs cost $400 if an\n+organization is buying, or $100 if an individual is buying.  Tapes\n+cost around $200 depending on media type.  I recommend asking for\n+version 2, not version 1, of g++.\n+@cindex FSF [Free Software Foundation]\n+@cindex GNU [GNU's not unix]\n+\n+For more information about ordering from the FSF, contact\n+gnu@@prep.ai.mit.edu, phone (617) 542-5942 or anonymous ftp file\n+@file{ftp://prep.ai.mit.edu/pub/gnu/GNUinfo/ORDERS} (you can\n+also use one of the sites listed below if you can't get into ``prep'').\n+\n+@cindex FSF, contact <gnu@@prep.ai.mit.edu>\n+\n+Here is a list of anonymous FTP archive sites for GNU software.\n+If no directory is given, look in @file{/pub/gnu}.\n+\n+@cindex GNUware, anonymous FTP sites\n+\n+@example\n+ASIA: ftp.cs.titech.ac.jp, tron.um.u-tokyo.ac.jp:/pub/GNU/prep\n+cair-archive.kaist.ac.kr, ftp.nectec.or.th:/pub/mirrors/gnu\n+\n+AUSTRALIA: archie.au:/gnu (archie.oz or archie.oz.au for ACSnet)\n+\n+AFRICA: ftp.sun.ac.za\n+\n+MIDDLE-EAST: ftp.technion.ac.il:/pub/unsupported/gnu\n+\n+EUROPE: irisa.irisa.fr, ftp.univ-lyon1.fr,\n+ftp.mcc.ac.uk, unix.hensa.ac.uk:/mirrors/uunet/systems/gnu,\n+src.doc.ic.ac.uk:/gnu, ftp.ieunet.ie, ftp.eunet.ch,\n+nic.switch.ch:/mirror/gnu, ftp.informatik.rwth-aachen.de,\n+ftp.informatik.tu-muenchen.de, ftp.win.tue.nl, ftp.nl.net,\n+ftp.etsimo.uniovi.es, ftp.funet.fi, ftp.denet.dk,\n+ftp.stacken.kth.se, isy.liu.se, ftp.luth.se:/pub/unix/gnu,\n+ftp.sunet.se, archive.eu.net\n+\n+SOUTH AMERICA: ftp.inf.utfsm.cl, ftp.unicamp.br\n+\n+WESTERN CANADA: ftp.cs.ubc.ca:/mirror2/gnu\n+\n+USA: wuarchive.wustl.edu:/systems/gnu, labrea.stanford.edu,\n+ftp.digex.net, ftp.kpc.com:/pub/mirror/gnu, f.ms.uky.edu:/pub3/gnu,\n+jaguar.utah.edu:/gnustuff, ftp.hawaii.edu:/mirrors/gnu,\n+uiarchive.cso.uiuc.edu, ftp.cs.columbia.edu:/archives/gnu/prep,\n+gatekeeper.dec.com:/pub/GNU, ftp.uu.net:/systems/gnu\n+@end example\n+\n+The ``official site'' is prep.ai.mit.edu, but your transfer will probably\n+go faster if you use one of the above machines.\n+\n+@cindex gzip\n+Most GNU utilities are compressed with ``gzip'', the GNU compression\n+utility.  All GNU archive sites should have a copy of this program,\n+which you will need to uncompress the distributions.\n+\n+@cindex libg++\n+Don't forget to retrieve libg++ as well!\n+\n+@node g++ for HP, g++ for Solaris 2.x, g++ for Unix, basics\n+@section Getting gcc/g++ for the HP Precision Architecture\n+\n+@cindex HP Precision Architecture\n+@cindex Hewlett-Packard\n+@cindex GNU GAS \n+@cindex GNU gdb\n+\n+If you use the HP Precision Architecture (HP-9000/7xx and HP-9000/8xx)\n+and you want to use debugging, you'll need to use the GNU assembler, GAS\n+(version 2.3 or later).  If you build from source, you must tell the\n+configure program that you are using GAS or you won't get debugging\n+support.  A non-standard debug format is used, since until recently HP\n+considered their debug format a trade secret.  Thanks to the work of\n+lots of good folks both inside and outside HP, the company has seen the\n+error of its ways and has now released the required information.  The\n+team at the University of Utah that did the gcc port now has code that\n+understands the native HP format.\n+\n+There are binaries for GNU tools in\n+@file{ftp://jaguar.cs.utah.edu/dist/},\n+but these are older versions.\n+\n+Jeff Law has left the University of Utah, so the Utah prebuilt\n+binaries may be discontinued.\n+\n+@node g++ for Solaris 2.x, g++ for other platforms, g++ for HP, basics\n+@section Getting gcc/g++ binaries for Solaris 2.x\n+\n+``Sun took the C compiler out of Solaris 2.x.  Am I stuck?''\n+\n+@cindex Solaris\n+@cindex gcc/g++ binaries for Solaris\n+\n+You'll need to get prebuilt binaries from someone.\n+\n+It used to be that you could get GCC binaries from prep.ai.mit.edu;\n+these are no longer there.\n+\n+@cindex Solaris pkgadd utility\n+The WWW site @file{http://smc.vnet.net/solaris_2.5.html}\n+contains various\n+GNU and freeware programs for Solaris2.5 running on the sparc. These are\n+packaged to enable easy installation using the Solaris ``pkgadd'' utility.\n+These include GNU emacs, gcc, gdb, perl, and others.  These versions\n+are more recent than the binaries at ``prep'' (gcc 2.7.2 and libg++\n+2.7.1 are there).\n+\n+@node g++ for other platforms, 1.x vs 2.x versions, g++ for Solaris 2.x, basics\n+@section How do I get a copy of g++ for (some other platform)?\n+\n+@cindex Windows NT support\n+As of gcc-2.7.x, there is Windows NT support in gcc.  Some special\n+utilities are required.  See the INSTALL file from the distribution.\n+If you're interested in GNU tools on Windows NT, see\n+@file{http://www.cygnus.com/misc/gnu-win32/} on the WWW, or the\n+anonymous FTP directory\n+@file{ftp://ftp.cygnus.com/pub/gnu-win32/}.\n+\n+@cindex VMS support\n+@cindex VAX\n+@cindex VMS, g++/libg++ precompiled\n+\n+The standard gcc/g++ distribution includes VMS support for the Vax.\n+Since the FSF people don't use VMS, it's likely to be somewhat less\n+solid than the Unix version.  Precompiled copies of g++ and libg++ in\n+VMS-installable form for the Vax are available by FTP from\n+@file{ftp://mango.rsmas.miami.edu/pub/VMS-gcc/}.\n+\n+@cindex OpenVMS/Alpha\n+Klaus Kaempf (kkaempf@@progis.de)\n+has done a port to OpenVMS for the Alpha; this is not yet a\n+part of the official gcc/g++.\n+The port includes g++ and all libraries from the libg++ distribution.  See\n+@file{http://www.progis.de} for more details.\n+\n+@cindex MS-DOS support\n+@cindex Delorie's gcc/g++\n+@cindex DJGPP\n+@cindex EMX\n+There are two different versions of gcc/g++ for MS-DOS: EMX and DJGPP.\n+EMX also works for OS/2 and is described later.\n+DJGPP is DJ Delorie's port.  It can be found on many FTP archive\n+sites; try\n+@file{ftp://ftp.coast.net/SimTel/vendors/djgpp/}\n+or, for a complete list, see\n+@file{http://www.delorie.com/djgpp/getting.html}.\n+\n+\n+The latest version of DJGPP is 2.00.  See\n+@file{http://www.delorie.com/djgpp/v2/} for information on this version.\n+\n+FSF sells floppies with DJGPP on them; see above for ordering software\n+from the FSF.\n+\n+DJGPP has its own newsgroup: @file{comp.os.msdos.djgpp}.\n+\n+@cindex Amiga support\n+Development and porting efforts for GNU tools, including gcc/g++, for\n+the Amiga are maintained by an initiative named ADE (Amiga Developers\n+Environment.  More information about ADE is available at\n+@file{http://www.ninemoons.com/}.\n+\n+For more information on Amiga ports of gcc/g++, retrieve the file\n+@file{ftp://prep.ai.mit.edu/pub/gnu/MicrosPorts/Amiga}.\n+\n+@cindex Atari ST support\n+A port of gcc to the Atari ST can be found at @*\n+@file{ftp://atari.archive.umich.edu/atari/Gnustuff/Tos}\n+along with many\n+other GNU programs.  This version is usually the same as the latest FSF\n+release.  See the ``Software FAQ'' for the Usenet group\n+@file{comp.sys.atari.st} for more information.\n+\n+@cindex EMX port \n+@cindex OS/2 support\n+\n+EMX is a port of gcc to OS/2; it can also be used on MS-DOS.  In addition to\n+the compiler port, the EMX port's C library attempts to provide a\n+Unix-like environment.  For more information ask around on\n+@file{comp.os.os2.programmer.porting}.  Version 0.9c, based on gcc-2.7.2.1,\n+was released in\n+November 1996.  It is available by FTP and the WWW from, among other\n+places\n+\n+@example\n+@file{http://www.os2ss.com/unix/emx09c/}\n+@file{ftp://ftp.cdrom.com/pub/os2/emx09c/} (US)\n+@file{ftp://ftp.leo.org/pub/comp/os/os2/leo/devtools/emx+gcc/} (Germany)\n+@end example\n+\n+Eberhard Mattes did the EMX port.  His address is\n+mattes@@azu.informatik.uni-stuttgart.de.\n+Read the FAQ file included with the distribution before harrassing the author.\n+\n+@cindex Apple support\n+@cindex Macintosh support\n+\n+I'm looking for more information on gcc/g++ support on the Apple\n+Macintosh.  Until recently, this FAQ did not provide such information,\n+but FSF is no longer boycotting Apple as the League for Programming\n+Freedom boycott has been dropped.\n+\n+Versions 1.37.1 and 2.3.3 of gcc were ported by Stan Shebs and are available\n+at @*\n+@file{ftp://ftp.cygnus.com/pub/mac}\n+\n+They are both interfaced to MPW.\n+Stan is working on a version using the current (post-2.7) sources, contact\n+him directly (shebs@@cygnus.com) for more information.\n+\n+@node 1.x vs 2.x versions,  , g++ for other platforms, basics\n+@section But I can only find g++-1.42!\n+\n+``I keep hearing people talking about g++ 2.7.2 (or some other number\n+starting with 2), but the latest version I can find is g++ 1.42.\n+Where is it?''\n+\n+@cindex Objective-C\n+@cindex g++, version number\n+As of gcc 2.0, C, C++, and Objective-C as well are all combined into a\n+single distribution called gcc.  If you get gcc you already have g++.  The\n+standard installation procedure for any gcc version 2 compiler will\n+install the C++ compiler as well.\n+\n+One could argue that we shouldn't even refer to \"g++-2.x.y\" but it's a\n+convention.  It means ``the C++ compiler included with gcc-2.x.y.''\n+\n+@node installation, evolution, basics, Top\n+@chapter Installation Issues and Problems\n+\n+@menu\n+* gcc-2 + g++-1::               \n+* what else do I need?::        \n+* use GNU linker?::             \n+* Use GNU assembler?::          \n+* shared libraries::            \n+* repository::                  \n+* repo bugs::                   \n+* Use GNU C library?::          \n+* Global constructor problems::  \n+* Strange assembler errors::    \n+* Other problems building libg++::  \n+* More size_t problems::        \n+* Rebuild libg++?::             \n+* co-existing versions::        \n+* Installing on Linux::         \n+* Linux Slackware 3.0::         \n+@end menu\n+\n+@node gcc-2 + g++-1, what else do I need?, installation, installation\n+@section I can't build g++ 1.x.y with gcc-2.x.y!\n+\n+``I obtained gcc-2.x.y and g++ 1.x.y and I'm trying to build it, but\n+I'm having major problems.  What's going on?''\n+\n+@cindex g++, building \n+If you wish to build g++-1.42, you must obtain gcc-1.42 first.  The\n+installation instructions for g++ version 1 leave a lot to be desired,\n+unfortunately, and I would recommend that, unless you have a special\n+reason for needing the 1.x compiler, that C++ users use the latest\n+g++-2.x version, as it\n+is the version that is being actively maintained.\n+\n+@cindex g++, template support\n+@cindex Templates\n+@cindex ANSI draft standard\n+There is no template support in g++-1.x, and it is generally much further\n+away from the ANSI draft standard than g++-2.x is.\n+\n+@node what else do I need?, use GNU linker?, gcc-2 + g++-1, installation\n+@section OK, I've obtained gcc; what else do I need?\n+\n+@cindex libg++\n+First off, you'll want libg++ as you can do almost nothing without it\n+(unless you replace it with some other class library).\n+\n+@cindex GNU GAS \n+@cindex GNU GAS [assembler]\n+Second, depending on your platform, you may need \"GAS\", the GNU assembler,\n+or the GNU linker (see next question).\n+\n+@cindex GNU gdb\n+Finally, while it is not required, you'll almost certainly want the GNU\n+debugger, gdb.  The latest version is\n+4.16, released April 22, 1996.\n+Other debuggers (like dbx, for example) will normally not be able to\n+understand at least some of the debug information produced by g++.\n+\n+@node use GNU linker?, Use GNU assembler?, what else do I need?, installation\n+@section Should I use the GNU linker, or should I use \"collect\"?\n+\n+@cindex Linker\n+@cindex System VR3, linker\n+@cindex System VR4, linker\n+First off, for novices: special measures must be taken with C++ to arrange\n+for the calling of constructors for global or static objects before the\n+execution of your program, and for the calling of destructors at the end.\n+(Exception: System VR3 and System VR4 linkers, Linux/ELF, and some other\n+systems support user-defined\n+segments; g++ on these systems requires neither the GNU linker nor\n+collect.  So if you have such a system, the answer is that you don't\n+need either one, though using GNU ld does have some advantages over\n+the native linker in some cases).\n+\n+@cindex AT&T cfront\n+@cindex Cfront-end\n+@cindex collect program\n+@cindex GNU linker\n+@cindex GNU binutils\n+If you have experience with AT&T's \"cfront\", this function is performed\n+there by programs named \"patch\" or \"munch\".  With GNU C++, it is performed\n+either by the GNU linker or by a program known as \"collect\".  The collect\n+program is part of the gcc-2.x distribution; you can obtain the GNU linker\n+separately as part of the \"binutils\" package.  The latest version of\n+binutils is 2.7, released July 10, 1996; 2.6 is in common use and works\n+well.\n+\n+(To be technical, it's \"collect2\"; there were originally several\n+alternative versions of collect, and this is the one that survived).\n+\n+There are advantages and disadvantages to either choice.\n+\n+Advantages of the GNU linker:\n+@cindex GNU linker, advantages\n+@cindex GNU ld\n+@cindex ld [GNU linker]\n+\n+It's faster than using collect -- collect basically runs the standard Unix\n+linker on your program twice, inserting some extra code after the first\n+pass to call the constructors.  This is a sizable time penalty for large\n+programs.  The GNU linker does not require this extra pass.\n+\n+GNU ld reports undefined symbols using their true names, not the mangled\n+names (but as of 2.7.0 so does collect).\n+\n+If there are undefined symbols, GNU ld reports which object file(s) refer to\n+the undefined symbol(s).  On some OSes (e.g. SunOS, Solaris) the native\n+linker does not do this, so you have to track down who's referring to\n+the missing symbols yourself.\n+\n+As of binutils version 2.2, on systems that use the so-called \"a.out\"\n+debug format (e.g. Suns running SunOS 4.x), the GNU linker compresses\n+the debug symbol table considerably.  The 2.7 version adds some symbol\n+table compression for ELF and Solaris targets.\n+\n+@cindex collect linker, advantages\n+Advantages of collect:\n+\n+@cindex Shared libraries\n+If your native linker supports shared libraries, you can use shared\n+libraries with collect.  This used to be a strong reason @emph{not}\n+to use the GNU linker, but recent versions of GNU ld support linking\n+with shared libraries on many platforms, and creating shared libraries\n+on a few (such as Intel x86 systems that use ELF object format as well\n+as SunOS and Solaris).\n+\n+@xref{shared libraries}\n+\n+@cindex GNU linker, porting\n+The GNU linker has not been ported to as many platforms as g++ has, so you\n+may be forced to use collect.\n+\n+If you use collect, you don't need to get something extra and figure out\n+how to install it; the standard gcc installation procedure will do it for you.\n+\n+I used to say at this point that I don't see a clear win for either\n+linking alternative, but with all the improvements in the GNU linker\n+I think that it is now the better choice.  Take your pick.\n+\n+If you run Linux, the only available linker is the GNU linker.\n+\n+@node Use GNU assembler?, shared libraries, use GNU linker?, installation\n+@section Should I use the GNU assembler, or my vendor's assembler?\n+\n+@cindex Assembler\n+@cindex GNU GAS\n+This depends on your platform and your decision about the GNU linker.  For\n+most platforms, you'll need to use GAS if you use the GNU linker.  For\n+some platforms, you have no choice; check the gcc installation notes to\n+see whether you must use GAS.  But you can usually use the vendor's\n+assembler if you don't use the GNU linker.\n+\n+The GNU assembler assembles faster than many native assemblers; however,\n+on many platforms it cannot support the local debugging format.\n+\n+It used to be that the GNU assembler couldn't handle\n+position-independent code on SunOS.  This is no longer true if you\n+have version 2.6 or newer.\n+\n+On HPUX or IRIX, you must use GAS (and configure gcc with the\n+@code{--with-gnu-as} option) to debug your programs.  GAS is\n+strongly recommended particularly on the HP platform because of\n+limitations in the HP assembler.\n+\n+The GNU assembler has been merged with the binutils\n+distribution, so the GNU assembler and linker are now together in\n+this package (as of binutils version 2.5.1).\n+\n+On Linux the assembler is the GNU assembler.\n+\n+@node shared libraries, repository, Use GNU assembler?, installation\n+@section How do I build shared libraries with g++?\n+\n+For gcc-2.7.0 and later, building C++ shared libraries should work fine\n+on supported platforms (HPUX 9+, IRIX 5+, DEC UNIX (formerly OSF/1),\n+SGI/IRIX, AIX, SunOS 4, Linux/ELF and all targets using SVR4-style ELF shared\n+libraries).  There are two separate issues: building libg++ as a shared\n+library, and making your own shared libraries.  For libg++ it is simply\n+a matter of giving the @code{--enable-shared} option to the configure\n+program.  When compiling your own code for shared libraries you\n+generally\n+must use the @code{-fPIC} flag to get position-independent code.\n+\n+@cindex -shared flag of gcc\n+\n+If your shared library contains global or static objects with\n+constructors, then make sure to use @code{gcc -shared}, not\n+@code{ld}, to create the shared library.  This will make sure\n+that any processor-specific magic needed to execute the constructors\n+is included.\n+\n+In theory, constructors for objects in your shared library should be\n+called when the library is opened (by dlopen or equivalent).  This\n+does not work on some platforms (e.g. SunOS4; it does work on Solaris\n+and ELF systems such as Linux): on the broken platforms, the\n+constructors are not called correctly.\n+\n+David Nilsen has suggested the following workaround:\n+\n+The thing to realize is that if you link your dynamic module with the\n+@code{-shared} flag, the collect program nicely groups all the static\n+ctors/dtors for you into a list and sets up a function that will call\n+them (Note: this means that this trick won't work if you use the GNU\n+linker without collect (@pxref{use GNU linker?}).\n+\n+The magic is knowing these function names.  Currently, they're called:\n+\n+@example\n+_GLOBAL__DI   <-- calls all module constructors\n+_GLOBAL__DD   <-- calls all module destructors\n+@end example\n+\n+[ possibly the leading underscore will differ between platforms: jbuck ]\n+\n+Therefore, if you make a wrapper around dlopen that looks up the\n+symbol @code{_GLOBAL__DI} (or @code{__GLOBAL__DI} on SunOS4 machines), and\n+calls it, you'll simulate getting the constructors called.\n+\n+You also need to set up the destructors to be called as well, so you\n+need to put a wrapper around dlclose, which will call the\n+@code{_GLOBAL__DD} function in the module when/if it's unloaded.\n+\n+Lastly, to get things 100% correct, you need to set up the destructors\n+to also be called if the module is not unloaded, but the main program\n+exits.  I do this by registering a single function with @code{atexit()} that\n+calls all the destructors left in dynamically loaded modules.\n+\n+@cindex Shared version of libg++\n+Check the file @file{README.SHLIB} from the libg++ distribution for more\n+about making and using shared libraries.\n+\n+@cindex Shared libraries with HP\n+\n+A patch is needed to build shared versions of version 2.7.2 of libg++\n+and libstdc++ on the HP-PA architecture.  You can find the patch at\n+@file{ftp://ftp.cygnus.com/pub/g++/libg++-2.7.2-hppa-gcc-fix}.\n+\n+@node repository, repo bugs, shared libraries, installation\n+@section How do I use the new repository code?\n+\n+@cindex repo patch\n+Because there is some disagreement about the details of the template\n+repository mechanism, you'll need to obtain a patch from Cygnus Support\n+to enable the 2.7.2 repository code.  You can obtain the patch by\n+anonymous FTP: @file{ftp://ftp.cygnus.com/pub/g++/gcc-2.7.2-repo.gz}.\n+\n+There are patches for 2.7.0 and 2.7.1 in the same directory, though\n+if you're going to rebuild the compiler you should use the latest one.\n+\n+@cindex repo patch for BSD\n+If you're running NetBSD or BSDI, the Cygnus repo patch is not quite\n+correct.  Tim Liddelow has made an alternate version available at\n+@file{ftp://ftp.cst.com.au/pub/gcc-2.7.2-repo-bsd.gz}.\n+\n+After you've applied the patch, the @code{-frepo} flag will enable the\n+repository mechanism.  The flag works much like the existing\n+@code{-fno-implicit-templates} flag, except that auxiliary files, with\n+an @file{.rpo} extension, are built that specify what template\n+expansions are needed.  At link time, the (patched) collect program\n+detects missing templates and recompiles some of the object files\n+so that the required templates are expanded.\n+\n+Note that the mechanism differs from that of cfront in that template\n+definitions still must be visible at the point where they are to be\n+expanded.  No assumption is made that @file{foo.C} contains template\n+definitions corresponding to template declarations in @file{foo.h}.\n+\n+@cindex closure with repo\n+@cindex template closure\n+Jason Merrill writes: ``To perform closure on a set of objects, just try\n+to link them together.  It will fail, but as a side effect all needed\n+instances will be generated in the objects.''\n+\n+@node repo bugs, Use GNU C library?, repository, installation\n+@section Known bugs and problems with the repo patch\n+\n+``The @code{-frepo} won't expand templated friend functions!''\n+\n+This is a known bug; currently you'll have to explicitly instantiate\n+friend functions when using @code{-frepo} due to this bug (in 2.7.0\n+through 2.7.2 at least).\n+\n+With earlier versions of the repo patch, there was a bug that happens\n+when you have given a quoted command line switch, something like\n+\n+@example\n+-D'MESSAGE=\"hello there\"'\n+@end example\n+\n+The repo code tries to recompile files using the same flags you\n+originally specified, but doesn't quote arguments that need quoting,\n+resulting in failures in some cases.  This is no longer a problem\n+with the 2.7.2 patch.\n+\n+@node Use GNU C library?, Global constructor problems, repo bugs, installation\n+@section Should I use the GNU C library?\n+\n+@cindex GNU C library\n+@cindex libg++\n+At this point in time, no (unless you are running Linux or the GNU Hurd\n+system).  The GNU C library is still very young, and\n+libg++ still conflicts with it in some places.  Use your native C library\n+unless you know a lot about the gory details of libg++ and gnu-libc.  This\n+will probably change in the future.\n+\n+@node Global constructor problems, Strange assembler errors, Use GNU C library?, installation\n+@section Global constructors aren't being called\n+\n+@cindex global constructors\n+``I've installed gcc and it almost works, but constructors and\n+destructors for global objects and objects at file scope aren't being\n+called.  What did I do wrong?''\n+\n+@cindex collect program\n+It appears that you are running on a platform that requires you to\n+install either \"collect2\" or the GNU linker, and you have done neither.\n+For more information, see the section discussing the GNU linker\n+(@pxref{use GNU linker?}).\n+\n+@cindex constructor problems on Solaris\n+@cindex Solaris, constructor problems\n+On Solaris 2.x, you shouldn't need a collect program and GNU ld doesn't run.\n+If your global constructors aren't being called, you may need to install\n+a patch, available from Sun, to fix your linker.  The number of the\n+``jumbo patch'' that applies is 101409-03.  Thanks to Russell Street\n+(r.street@@auckland.ac.nz) for this info.\n+\n+@cindex IRIX, installing collect\n+It appears that on IRIX, the collect2 program is not being installed\n+by default during the installation process, though it is required;\n+you can install it manually by executing\n+\n+@example\n+make install-collect2\n+@end example\n+\n+from the gcc source directory after installing the compiler.  (I'm\n+not certain for which versions of gcc this problem occurs, and whether\n+it is still present).\n+\n+@node Strange assembler errors, Other problems building libg++, Global constructor problems, installation\n+@section Strange assembler errors when linking C++ programs\n+\n+``I've installed gcc and it seemed to go OK, but when I attempt to link\n+any C++ program, I'm getting strange errors from the assembler!  How\n+can that be?''\n+\n+The messages in question might look something like\n+\n+@example\n+as: \"/usr/tmp/cca14605.s\", line 8: error: statement syntax\n+as: \"/usr/tmp/cca14605.s\", line 14: error: statement syntax\n+@end example\n+\n+(on a Sun, different on other platforms).  The important thing is that\n+the errors come out at the link step, @emph{not} when a C++ file is\n+being compiled.\n+\n+@cindex nm program\n+@cindex GNU nm program\n+Here's what's going on: the collect2 program uses the Unix ``nm''\n+program to obtain a list of symbols for the global constructors and\n+destructors, and it builds a little assembly language module that\n+will permit them all to be called.  If you're seeing this symptom,\n+you have an old version of GNU nm somewhere on your path.  This old\n+version prints out symbol names in a format that the collect2 program\n+does not expect, so bad assembly code is generated.\n+\n+The solution is either to remove the old version of GNU nm from your\n+path (and that of everyone else who uses g++), or to install a newer\n+version (it is part of the GNU \"binutils\" package).  Recent versions\n+of GNU nm do not have this problem.\n+\n+@node Other problems building libg++, More size_t problems, Strange assembler errors, installation\n+@section Other problems building libg++\n+@cindex libg++ on Ultrix\n+@cindex libg++ on SunOS\n+\n+``I am having trouble building libg++.  Help!''\n+\n+On some platforms (for example, Ultrix), you may see errors complaining\n+about being unable to open dummy.o.  On other platforms (for example,\n+SunOS), you may see problems having to do with the type of size_t.\n+The fix for these problems is to make libg++ by saying \"make CC=gcc\".\n+According to Per Bothner, it should no longer be necessary to specify\n+\"CC=gcc\" for libg++-2.3.1 or later.\n+\n+``I built and installed libg++, but g++ can't find it.  Help!''\n+\n+The string given to @file{configure} that identifies your system must\n+be the same when you install libg++ as it was when you installed gcc.\n+Also, if you used the @code{--prefix} option to install gcc somewhere\n+other than @file{/usr/local}, you must use the same value for\n+@code{--prefix} when installing libg++, or else g++ will not be able\n+to find libg++.\n+\n+@cindex patch for libg++-2.6.2\n+\n+The toplevel Makefile in the libg++ 2.6.2 distribution is broken, which\n+along with a bug in g++ 2.6.3 causes problems linking programs that use the\n+libstdc++ complex classes.  A patch for this is available from\n+@file{ftp://ftp.cygnus.com//pub/g++/libg++-2.6.2-fix.gz}.\n+\n+@node More size_t problems, Rebuild libg++?, Other problems building libg++, installation\n+@section But I'm @emph{still} having problems with @code{size_t}!\n+\n+@cindex Type of size_t\n+``I did all that, and I'm @emph{still} having problems with disagreeing\n+definitions of size_t, SIZE_TYPE, and the type of functions like\n+@code{strlen}.''\n+\n+@cindex _G_config.h\n+The problem may be that you have an old version of @file{_G_config.h}\n+lying around.  As of libg++ version 2.4, @file{_G_config.h}, since it is\n+platform-specific, is inserted into a different directory; most include\n+files are in @file{$prefix/lib/g++-include}, but this file now lives in\n+@file{$prefix/$arch/include}.  If, after upgrading your libg++, you find that\n+there is an old copy of @file{_G_config.h} left around, remove it,\n+otherwise g++ will find the old one first.\n+\n+@node Rebuild libg++?, co-existing versions, More size_t problems, installation\n+@section Do I need to rebuild libg++ to go with my new g++?\n+\n+``After I upgraded g++ to the latest version, I'm seeing undefined\n+symbols.''\n+\n+or\n+\n+``If I upgrade to a new version of g++, do I need to reinstall libg++?''\n+\n+@cindex Incompatibilities between g++ versions\n+\n+As a rule, the first two digits of your g++ and libg++ should be the\n+same.  Normally when you do an upgrade in the ``minor version number''\n+(2.5.7 to 2.5.8, say) there isn't a need to rebuild libg++, but there\n+have been a couple of exceptions in the past.\n+\n+@node co-existing versions, Installing on Linux, Rebuild libg++?, installation\n+@section I want several versions of g++ and libg++ to co-exist.\n+\n+I recommend against using the @code{-V} flag to make multiple versions\n+of gcc/g++ co-exist, unless they are different minor releases that can use\n+the same compiled version of libg++.  The reason is that all these\n+versions will try to use the same libg++ version, which usually will\n+not work.\n+\n+Instead, use the @code{--prefix} flag when configuring gcc.  Use a\n+different value of @code{--prefix} for each gcc version.  Use the\n+same value of @code{--prefix} when configuring libg++.  You can then\n+have any number of co-existing gcc/libg++ pairs.  Symbolic links can\n+be used so that users don't need to put all these different directories\n+on their paths.\n+\n+One possible system to use is to set @code{--prefix} to\n+@file{/usr/local/gcc-2.x.y} for version 2.x.y of gcc, and to link\n+whichever version of gcc you wish to be the default into\n+@file{/usr/local/bin/gcc} and @file{/usr/local/bin/g++}.\n+\n+@node Installing on Linux, Linux Slackware 3.0, co-existing versions, installation\n+@section Trouble installing g++ and libg++ on Linux\n+\n+``I've downloaded the latest g++ and libg++ and I'm trying to install\n+them on Linux, and I'm having lots of problems.''\n+\n+@cindex Linux\n+FSF releases of libg++ won't install on Linux unchanged, since Linux\n+uses are part of the libio library from libg++ for its standard C\n+library, only this is changed in a way that it clashes with libg++.\n+This means that you'll need a patched version of libg++ for it to\n+work.\n+\n+If you want to upgrade to a new gcc/libg++ combination, the easiest\n+thing to do is to grab the prebuilt versions of gcc and libg++ for Linux\n+from @file{ftp://tsx-11.mit.edu/pub/linux/packages/GCC}.  Follow the\n+directions carefully.  If you want to build from source, you'll need\n+a patch for libg++; the Linux developers have named the patched libg++\n+version libg++-2.7.1.3 and there is a patch file in the above-named\n+directory.\n+\n+See @file{http://sunsite.unc.edu/LDP/HOWTO/GCC-HOWTO.html},\n+the Linux GCC HOWTO, for more on gcc/g++ and Linux.\n+\n+Linux is in the process of switching over to the GNU C library, version\n+2, which will become Linux libc version 6.  Once this process is\n+complete, there's a good chance that the installation process on Linux\n+will be smoother, but only experts should try making this new library\n+work at this point.\n+\n+@node Linux Slackware 3.0,  , Installing on Linux, installation\n+@section Problems with g++ on Linux Slackware 3.0\n+\n+@cindex Slackware\n+@cindex Linux Slackware\n+``When I try to compile the traditional Hello, world program on Linux,\n+the compiler can't find @file{iostream.h}.  What's the deal?''\n+\n+You probably have the Slackware 3.0 release.  There's an error in the\n+setup.  It's easy to fix, though; log in as root, and make a symbolic\n+link:\n+\n+@example\n+ln -s /usr/lib/g++-include /usr/include/g++\n+@end example\n+\n+@node evolution, User Problems, installation, Top\n+@chapter The Evolution of g++\n+\n+This chapter discusses the evolution of g++ and describes what can be expected\n+in the future.\n+\n+@menu\n+* version 2.7.x::               What's changed in 2.7.x from earlier versions\n+* libstdc++::                   The GNU C++ standard library\n+* new work::                    What's been done since 2.7.x\n+* egcs::                        The Experimental GNU Compiler System\n+* When?::                       When can I get all this new stuff?\n+@end menu\n+\n+@node version 2.7.x, libstdc++, evolution, evolution\n+@section What's new in version 2.7.x of gcc/g++\n+\n+The current version of gcc/g++ is 2.7.2.2, released February 10, 1997.\n+The only change between 2.7.2.1 and 2.7.2.2 is that support was added\n+for using the GNU C library, version 2, on Linux; users not interested\n+in that functionality have no reason to upgrade.\n+The previous version of gcc/g++ is 2.7.2.1, released August 14, 1996.\n+The current version of libg++ is 2.7.2, released July 4, 1996.\n+\n+Note that gcc 2.7.2.1 just consists of several small patches to\n+gcc-2.7.2.  The release is mainly\n+intended to fix platform-specific bugs and does not affect the C++\n+``front end'' of the compiler (the part that parses your C++ code).\n+\n+The 2.7.x releases represent a great deal of work on the part of the g++\n+maintainers to fix outstanding bugs and move the compiler closer to the\n+current ANSI/ISO standards committee's working paper, including\n+supporting many of the new features that have been added to the\n+language.  I recommend that everyone read the NEWS file contained in the\n+distribution (and that system administrators make the file available to\n+their users).  I've borrowed liberally from this file here.\n+\n+@cindex C++ working paper\n+If any features seem unfamiliar, you will probably want to\n+look at the recently-released public review copy of the C++ Working\n+Paper.  A new draft, dated 2 December 1996, has been released for\n+public comment.  You can find it on the web at\n+@file{http://www.cygnus.com/misc/wp/} or\n+@file{http://www.maths.warwick.ac.uk/c++/pub/wp/html/cd2/}.\n+See\n+@file{http://www.setech.com/x3.html}\n+or\n+@file{http://www.maths.warwick.ac.uk/c++/pub/} to download the\n+document in PostScript, PDF (Adobe Acrobat), HTML, or ASCII\n+form.\n+\n+Here are the main points:\n+\n+@itemize @bullet\n+@item\n+@cindex for scope\n+As described above, the scope of variables declared in the\n+initialization part of a for statement has been changed; such variables\n+are now visible only in the loop body.  Use @code{-fno-for-scope} to get\n+the old behavior.  You'll need this flag to build groff version 1.09,\n+Ptolemy, and many other free software packages.\n+\n+@item\n+@cindex vtable duplication\n+Code that does not use #pragma interface/implementation will most\n+likely shrink dramatically, as g++ now only emits the vtable for a\n+class in the translation unit where its first non-inline, non-abstract\n+virtual function is defined.\n+\n+@item\n+@cindex automatic template instantiation\n+Support for automatic template instantiation has @emph{not} been enabled\n+in the official distribution, due to a disagreement over design philosophies.\n+But you can get a patch from Cygnus to turn it on; retrieve the patch\n+from @file{ftp://ftp.cygnus.com/pub/g++/gcc-2.7.2-repo.gz} to patch\n+gcc-2.7.2 (there are also patches for earlier gcc versions).\n+\n+@item\n+@cindex exception handling, 2.7.0\n+\n+@xref{exceptions}\n+\n+@item\n+@cindex run-time type identification\n+Support for Run-Time Type Identification has been added with @code{-frtti}.\n+This support is still in alpha; one major restriction is that any file\n+compiled with @code{-frtti} must include @code{<typeinfo>} (@emph{not}\n+@code{typeinfo.h} as the NEWS file says).\n+Also, all C++ code you link with (including libg++) has to be built with\n+@code{-frtti}, so it's still tricky to use.\n+\n+@item\n+@cindex compiler-generated operators\n+Synthesis of compiler-generated constructors, destructors and\n+assignment operators is now deferred until the functions are used.\n+\n+@item\n+@cindex assignment in conditional expressions\n+The parsing of expressions such as @code{a ? b : c = 1}\n+has changed from\n+@code{(a ? b : c) = 1} to @code{a ? b : (c = 1)}.  This is a new C/C++\n+incompatibility brought to you by the ANSI/ISO standards committee.\n+\n+@item\n+@cindex new operator keywords\n+The operator keywords and, and_eq, bitand, bitor, compl, not, not_eq,\n+or, or_eq, xor and xor_eq are now supported.  Use @code{-ansi} or\n+@code{-foperator-names} to enable them.\n+\n+@item\n+@cindex explicit keyword\n+The @code{explicit} keyword is now supported.  @code{explicit} is used to mark\n+constructors and type conversion operators that should not be used\n+implicitly.\n+\n+@item\n+@cindex user-defined type conversion\n+Handling of user-defined type conversion has been improved.\n+\n+@item\n+@cindex explicit template instantiation\n+Explicit instantiation of template methods is now supported.  Also,\n+@code{inline template class foo<int>;}\n+can be used to emit only the vtable\n+for a template class.\n+\n+@item\n+@cindex -fcheck-new\n+With -fcheck-new, g++ will check the return value of all calls to\n+operator new, and not attempt to modify a returned null pointer.\n+\n+@item\n+collect2 now demangles linker output, and c++filt has become part of\n+the gcc distribution.\n+\n+@item\n+Improvements to template instantiation: only members actually used\n+are instantiated.  (Actually this is not quite true: some inline\n+templates that are not successfully inlined may be expanded even\n+though they are not needed).\n+\n+@end itemize\n+\n+@node libstdc++, new work, version 2.7.x, evolution\n+@section The GNU Standard C++ Library\n+\n+The GNU Standard C++ Library (also called the ``GNU ANSI C++ Library''\n+in places in the code) is not libg++, though it is included in the\n+libg++ distribution.  Rather, it contains classes and functions\n+required by the ANSI/ISO standard.  The copyright conditions are the\n+same as those for for the iostreams classes; the LGPL is not used\n+(@pxref{legalities}).\n+\n+This library, libstdc++, is in the libg++ distribution in versions 2.6.2\n+and later.  It requires at least gcc 2.6.3 to build the libg++-2.6.2\n+version; use at least gcc 2.7.0 to build the libg++ 2.7.0 version.  It\n+contains a hacked-up version of HP's implementation of the Standard\n+Template Library (@pxref{Standard Template Library}).  I've\n+successfully used this Standard Template Library version to build\n+a number of the demos you'll see on various web pages.\n+\n+As of version 2.7.0, the streams classes are now in libstdc++ instead of\n+libg++, and libiostream is being phased out (don't use it).  The g++\n+program searches this library.\n+\n+The maintainers of libg++ have de-emphasized work on the older libg++ classes\n+in favor of enhancing libstdc++ to cover the full language, so while libg++\n+will always be available, enhancements to it should not be expected.\n+\n+@node new work, egcs, libstdc++, evolution\n+@section What can we expect in future gcc releases?\n+\n+A great deal of work has gone into enhancements to the C++ front end, as well\n+as to other aspects of the compiler.\n+\n+The next major release(s) of gcc/g++ can be expected to have the following\n+features:\n+\n+@itemize @bullet\n+@cindex new template implementation\n+@item\n+A completely new template implementation, much closer to the draft\n+standard.  Limitations in 2.7.2.x concerning inlining template functions\n+will be eliminated.  Static template data members, template class member\n+functions, partial specification, and default template arguments will be\n+supported.  An instantiation method resembling that used in Borland C++\n+(instantiating functions possibly in multiple .o files and using weak\n+symbols to link correctly) will be provided, in addition to other\n+options.  The SGI version of STL will be shipped with libstdc++ and will\n+compile unchanged.\n+\n+@item\n+@cindex new exception implementation\n+Exception handling has been re-worked; exceptions will work together\n+with optimization.\n+Actually, there are two separate implementations: one based on setjmp/longjmp\n+and designed to be highly portable, and one designed to be more efficient but\n+requiring more processor-specific support (getting exceptions right has proven\n+to be extremely difficult and has been the chief obstacle to getting a new\n+release out).\n+\n+@item\n+@cindex RTTI\n+RTTI has been re-done to work correctly and is on by default.\n+\n+@item\n+@cindex overloading\n+Overloading has been re-worked to conform to the latest draft of the\n+standard.\n+@end itemize\n+\n+Features that are still missing include namespaces and templates as\n+template arguments.\n+\n+@node egcs, When?, new work, evolution\n+@section What's this I hear about egcs?\n+\n+The egcs effort is a new effort to merge several threads of gcc\n+development and to provide a faster development process.\n+For more information see @file{http://www.cygnus.com/egcs/}.\n+\n+@node When?,  , egcs, evolution\n+@section OK, when can I get this stuff?\n+\n+The FSF has a policy of never announcing release dates in advance.\n+I'm sure this is frustrating to a lot of people, since it's taken\n+so long, and this frustration was one of the reasons the egcs effort\n+was created.  An egcs release should be expected to occur in the\n+very near future.   [ More on this next time ].\n+\n+@node User Problems, legalities, evolution, Top\n+@chapter User Problems\n+\n+@menu\n+* missing virtual table::       \n+* for scope::                   \n+* const constructor::           \n+* unused parameter warnings::   \n+* jump crosses initialization::  \n+* Demangler::                   \n+* static data members::         \n+* internal compiler error::     \n+* bug reports::                 \n+* porting to g++::              \n+* name mangling::               \n+* problems linking with other libraries::  \n+* documentation::               \n+* templates::                   \n+* undefined templates::         \n+* redundant templates::         \n+* Standard Template Library::   \n+* STL and string::              \n+* exceptions::                  \n+* namespaces::                  \n+* agreement with standards::    \n+* compiling standard libraries::  \n+* debugging on SVR4 systems::   \n+* debugging problems on Solaris::  \n+* X11 conflicts with libg++::   \n+* assignment to streams::       \n+@end menu\n+\n+@node missing virtual table, for scope, User Problems, User Problems\n+@section Linker complains about missing virtual table\n+\n+``I'm getting a message complaining about an undefined virtual table.  Is\n+this a compiler bug?''\n+\n+(On platforms that run neither collect nor the GNU linker, like Solaris,\n+you may see an odd undefined symbol like \"_vt.3foo\", where foo is a\n+class name).\n+\n+This is probably because you are missing a definition for the first\n+(non-inline) virtual function of the class.  Since gcc-2.7.0, g++ uses\n+a trick borrowed from cfront: the .o file containing the definition for\n+the first non-inline virtual function for the class will also contain\n+the virtual function table.\n+\n+@node for scope, const constructor, missing virtual table, User Problems\n+@section gcc-2.7.0 breaks declarations in \"for\" statements!\n+\n+@cindex declarations in for statements\n+@cindex for statements: declarations\n+\n+gcc-2.7.0 implements the new ANSI/ISO rule on the scope of variables\n+declared in for loops.\n+\n+@example\n+for (int i = 1; i <= 10; i++) @{\n+        // do something here\n+@}\n+foo(i);\n+@end example\n+\n+In the above example, most existing C++ compilers would pass the\n+value 11 to the function @code{foo}.  In gcc 2.7 and in the ANSI/ISO\n+working paper, the scope of @code{i} is only the for loop body, so\n+this is an error.  So that old code can be compiled, the new gcc has\n+a flag @code{-fno-for-scope} that causes the old rule to be used.\n+@cindex -fno-for-scope\n+\n+As of 2.7.1, the compiler attempts to issue warnings about code that\n+has different meanings under the two sets of rules, but the code is\n+not perfect: the intent was that code that has valid, but different,\n+meanings under the ARM rules and the working paper rules would give\n+warnings but have the new behavior, and this doesn't seem to happen.\n+\n+The @code{-ffor-scope} flag under 2.7.1 and 2.7.2 gives the 2.7.0 behavior.\n+\n+@node const constructor, unused parameter warnings, for scope, User Problems\n+@section g++ seems to want a const constructor.  What's that?\n+\n+gcc-2.7.1 introduced a bug that causes the compiler to ask for a\n+const constructor (there's no such thing in C++) in certain situations\n+where a const object appears in a template class.  Most cases have been\n+fixed in gcc-2.7.2, but unfortunately not all.  Still, if you're running\n+gcc-2.7.1 and have this problem, upgrade to 2.7.2; it is a vast improvement.\n+\n+@cindex ObjectSpace<STL>\n+\n+The default constructor for the template @code{pair} in ObjectSpace's\n+implementation of STL triggers the bug in one place, for gcc 2.7.2.  If\n+you're using ObjectSpace<STL> and having this problem, simply\n+change the default constructor from\n+\n+@example\n+os_pair () : first (T1 ()), second (T2 ()) @{@}\n+@end example\n+\n+to just\n+\n+@example\n+os_pair () @{@}\n+@end example\n+\n+Once this is done, ObjectSpace<STL> works fairly well.\n+\n+@node unused parameter warnings, jump crosses initialization, const constructor, User Problems\n+@section How to silence ``unused parameter'' warnings\n+\n+@cindex -Wall\n+@cindex -Wunused\n+\n+``When I use @code{-Wall} (or @code{-Wunused}), g++ warns about\n+unused parameters.  But the parameters have to be there, for use\n+in derived class functions.  How do I get g++ to stop complaining?''\n+\n+The answer is to simply omit the names of the unused parameters when\n+defining the function.  This makes clear, both to g++ and to readers\n+of your code, that the parameter is unused.  For example:\n+\n+@example\n+int Foo::bar(int arg) @{ return 0; @}\n+@end example\n+\n+will give a warning for the unused parameter @code{arg}.  To suppress\n+the warning write\n+\n+@example\n+int Foo::bar(int) @{ return 0; @}\n+@end example\n+\n+@node jump crosses initialization, Demangler, unused parameter warnings, User Problems\n+@section g++ objects to a declaration in a case statement\n+\n+``The compiler objects to my declaring a variable in one of the branches\n+of a case statement.  Earlier versions used to accept this code.  Why?''\n+\n+The draft standard does not allow a goto or a jump to a case label to\n+skip over an initialization of a variable or a class object.  For\n+example:\n+\n+@example\n+switch ( i ) @{\n+  case 1:\n+    Object obj(0);\n+        ...\n+    break;\n+  case 2:\n+\t...\n+    break;\n+@}    \n+@end example\n+\n+The reason is that @code{obj} is also in scope in the rest of the switch\n+statement.\n+\n+As of version 2.7.0, the compiler will object that the jump to the\n+second case level crosses the initialization of @code{obj}.  Older\n+compiler versions would object only if class Object has a destructor.\n+In either case, the solution is to add a set of curly braces around\n+the case branch:\n+\n+@example\n+  case 1:\n+    @{\n+       Object obj(0);\n+        ...\n+       break;\n+    @}\n+@end example\n+\n+@node Demangler, static data members, jump crosses initialization, User Problems\n+@section Where can I find a demangler?\n+\n+@cindex demangler program\n+A g++-compatible demangler named @code{c++filt} can be found in the\n+@file{binutils} distribution.  This distribution (which also contains\n+the GNU linker) can be found at any GNU archive site.\n+\n+As of version 2.7.0, @code{c++filt} is included with gcc and is\n+installed automatically.  Even better, it is used by the @code{collect}\n+linker, so you don't see mangled symbols anymore (except on platforms\n+that use neither collect nor the GNU linker, like Solaris).\n+\n+@node static data members, internal compiler error, Demangler, User Problems\n+@section Linker reports undefined symbols for static data members\n+\n+@cindex Static data members\n+``g++ reports undefined symbols for all my static data members when I link,\n+even though the program works correctly for compiler XYZ.  What's going on?''\n+\n+The problem is almost certainly that you don't give definitions for\n+your static data members.  If you have\n+\n+@example\n+class Foo @{\n+\t...\n+\tvoid method();\n+\tstatic int bar;\n+@};\n+@end example\n+\n+you have only declared that there is an int named Foo::bar and a member\n+function named Foo::method that is defined somewhere.  You still need to\n+define @emph{both} method() and bar in some source file.  According to\n+the draft ANSI standard, you must supply an initializer, such as\n+\n+@example\n+int Foo::bar = 0;\n+@end example\n+\n+@noindent\n+in one (and only one) source file.\n+\n+@node internal compiler error, bug reports, static data members, User Problems\n+@section What does ``Internal compiler error'' mean?\n+\n+It means that the compiler has detected a bug in itself.  Unfortunately,\n+g++ still has many bugs, though it is a lot better than it used to be.\n+If you see this message, please send in a complete bug report (see next\n+section).\n+\n+@node bug reports, porting to g++, internal compiler error, User Problems\n+@section I think I have found a bug in g++.\n+\n+@cindex Bug in g++, newly found\n+``I think I have found a bug in g++, but I'm not sure.  How do I know,\n+and who should I tell?''\n+\n+@cindex Manual, for gcc\n+First, see the excellent section on bugs and bug reports in the gcc manual\n+(which is included in the gcc distribution).  As a short summary of that\n+section: if the compiler gets a fatal signal, for any input, it's a bug\n+(newer versions of g++ will ask you to send in a bug report when they\n+detect an error in themselves).  Same thing for producing invalid\n+assembly code.\n+\n+When you report a bug, make sure to describe your platform (the type of\n+computer, and the version of the operating system it is running) and the\n+version of the compiler that you are running.  See the output of the\n+command @code{g++ -v} if you aren't sure.  Also provide enough code\n+so that the g++ maintainers can duplicate your bug.  Remember that the\n+maintainers won't have your header files; one possibility is to send\n+the output of the preprocessor (use @code{g++ -E} to get this).  This\n+is what a ``complete bug report'' means.\n+\n+I will add some extra notes that are C++-specific, since the notes from\n+the gcc documentation are generally C-specific.\n+\n+@cindex g++ bug report\n+First, mail your bug report to \"bug-g++@@prep.ai.mit.edu\".  You may also\n+post to @file{gnu.g++.bug}, but it's better to use mail, particularly if you\n+have any doubt as to whether your news software generates correct reply\n+addresses.  Don't mail C++ bugs to bug-gcc@@prep.ai.mit.edu.\n+\n+@strong{News:} as I write this (late February 1996) the gateway\n+connecting the bug-g++ mailing list and the @file{gnu.g++.bug} newsgroup\n+is (temporarily?) broken.  Please mail, do not post bug reports.\n+\n+@cindex libg++ bug report\n+If your bug involves libg++ rather than the compiler, mail to\n+bug-lib-g++@@prep.ai.mit.edu.  If you're not sure, choose one, and if you\n+guessed wrong, the maintainers will forward it to the other list.\n+\n+@cindex C++, reference books\n+@cindex ARM [Annotated C++ Ref Manual]\n+Second, if your program does one thing, and you think it should do\n+something else, it is best to consult a good reference if in doubt.\n+The standard reference is the draft working paper from the ANSI/ISO\n+C++ standardization committee, which you can get on the net.\n+For PostScript and PDF (Adobe Acrobat) versions, see the\n+archive at @file{ftp://research.att.com/dist/stdc++/WP}.  For HTML and ASCII\n+versions, see @file{ftp://ftp.cygnus.com/pub/g++}.  On the World Wide Web, see\n+@file{http://www.cygnus.com/misc/wp/}.\n+\n+An older\n+standard reference is \"The Annotated C++ Reference Manual\", by Ellis and\n+Stroustrup (copyright 1990, ISBN #0-201-51459-1).  This is what they're\n+talking about on the net when they refer to ``the ARM''.  But you should\n+know that changes have been made to the language since then.\n+\n+The ANSI/ISO C++ standards committee have adopted some changes to the\n+C++ language since the publication of the original ARM, and newer\n+versions of g++ (2.5.x and later) support some of these changes, notably\n+the mutable keyword (added in 2.5.0), the bool type (added in 2.6.0),\n+and changes in the scope of variables defined in for statements (added\n+in 2.7.0).\n+You can obtain an addendum to the ARM explaining many of these changes by FTP\n+from @file{ftp://ftp.std.com/AW/stroustrup2e/new_iso.ps}.\n+\n+@cindex AT&T cfront\n+Note that the behavior of (any version of) AT&T's \"cfront\" compiler is\n+NOT the standard for the language.\n+\n+@node porting to g++, name mangling, bug reports, User Problems\n+@section Porting programs from other compilers to g++\n+\n+``I have a program that runs on <some other C++ compiler>, and I want\n+to get it running under g++.  Is there anything I should watch out\n+for?''\n+\n+@cindex Porting to g++\n+\n+Note that g++ supports many of the newer keywords that have recently\n+been added to the language.  Your other C++ compiler may not support\n+them, so you may need to rename variables and members that conflict\n+with these keywords.\n+\n+There are two other reasons why a program that worked under one compiler\n+might fail under another: your program may depend on the order of\n+evaluation of side effects in an expression, or it may depend on the\n+lifetime of a temporary (you may be assuming that a temporary object\n+\"lives\" longer than the standard guarantees).  As an example of the\n+first:\n+\n+@example\n+void func(int,int);\n+\n+int i = 3;\n+func(i++,i++);\n+@end example\n+\n+@cindex Order of evaluation, problems in porting\n+Novice programmers think that the increments will be evaluated in strict\n+left-to-right order.  Neither C nor C++ guarantees this; the second\n+increment might happen first, for example.  func might get 3,4, or it\n+might get 4,3.\n+\n+@cindex Classes, problems in porting\n+@cindex Problems in porting, class\n+The second problem often happens with classes like the libg++ String\n+class.  Let's say I have\n+\n+@example\n+String func1();\n+void func2(const char*);\n+@end example\n+\n+and I say\n+\n+@example\n+func2(func1());\n+@end example\n+\n+because I know that class String has an \"operator const char*\".  So what\n+really happens is\n+\n+@example\n+func2(func1().convert());\n+@end example\n+\n+@cindex temporaries\n+where I'm pretending I have a convert() method that is the same as the\n+cast.  This is unsafe in g++ versions before 2.6.0, because the\n+temporary String object may be deleted after its last use (the call to\n+the conversion function), leaving the pointer pointing to garbage, so by\n+the time func2 is called, it gets an invalid argument.\n+\n+@cindex ANSI draft standard\n+Both the cfront and the old g++ behaviors are legal according to the ARM,\n+but the powers that be have decided that compiler writers were given\n+too much freedom here.\n+\n+The ANSI C++ committee has now come to a resolution of the lifetime of\n+temporaries problem: they specify that temporaries should be deleted at\n+end-of-statement (and at a couple of other points).  This means that g++\n+versions before 2.6.0 now delete temporaries too early, and cfront\n+deletes temporaries too late.  As of version 2.6.0, g++ does things\n+according to the new standard.\n+\n+@cindex Scope, problems in porting\n+@cindex Problems in porting, scope\n+For now, the safe way to write such code is to give the temporary a name,\n+which forces it to live until the end of the scope of the name. For\n+example:\n+\n+@example\n+String& tmp = func1();\n+func2(tmp);\n+@end example\n+\n+Finally, like all compilers (but especially C++ compilers, it seems),\n+g++ has bugs, and you may have tweaked one.  If so, please file a bug\n+report (after checking the above issues).\n+\n+@node name mangling, problems linking with other libraries, porting to g++, User Problems\n+@section Why does g++ mangle names differently from other C++ compilers?\n+\n+See the answer to the next question.\n+@cindex Mangling names\n+\n+@node problems linking with other libraries, documentation, name mangling, User Problems\n+@section Why can't g++ code link with code from other C++ compilers?\n+\n+``Why can't I link g++-compiled programs against libraries compiled by\n+some other C++ compiler?''\n+\n+@cindex Mangling names\n+@cindex Cygnus Support\n+Some people think that,\n+if only the FSF and Cygnus Support folks would stop being\n+stubborn and mangle names the same way that, say, cfront does, then any\n+g++-compiled program would link successfully against any cfront-compiled\n+library and vice versa.  Name mangling is the least of the problems.\n+Compilers differ as to how objects are laid out, how multiple inheritance\n+is implemented, how virtual function calls are handled, and so on, so if\n+the name mangling were made the same, your programs would link against\n+libraries provided from other compilers but then crash when run.  For this\n+reason, the ARM @emph{encourages} compiler writers to make their name mangling\n+different from that of other compilers for the same platform.\n+Incompatible libraries are then detected at link time, rather than at run\n+time.\n+@cindex ARM [Annotated C++ Ref Manual]\n+@cindex Compiler differences\n+\n+@node documentation, templates, problems linking with other libraries, User Problems\n+@section What documentation exists for g++ 2.x?\n+\n+@cindex g++, documentation\n+Relatively little.\n+While the gcc manual that comes with the distribution has some coverage\n+of the C++ part of the compiler, it focuses mainly on the C compiler\n+(though the information on the ``back end'' pertains to C++ as well).\n+Still, there is useful information on the command line options and the\n+#pragma interface and #pragma implementation directives in the manual,\n+and there is a useful section on template instantiation in the 2.6 version.\n+There is a Unix-style manual entry, \"g++.1\", in the gcc-2.x\n+distribution; the information here is a subset of what is in the manual.\n+\n+You can buy a nicely printed and bound copy of this manual from the FSF;\n+see above for ordering information.\n+\n+A draft of a document describing the g++ internals appears in the gcc\n+distribution (called g++int.texi); it is incomplete but gives lots of\n+information.\n+\n+For class libraries, there are several resources available:\n+\n+@itemize @bullet\n+@item\n+The libg++ distribution has a manual\n+@file{libg++/libg++.texi} describing the old libg++ classes, and\n+another manual @file{libio/iostream.texi} describing the iostreams\n+implementation.\n+@item\n+While there is no libg++-specific document describing the STL\n+implementation, SGI's web site, at @file{http://www.sgi.com/Technology/STL/},\n+is an excellent resource.\n+@end itemize\n+\n+@node templates, undefined templates, documentation, User Problems\n+@section Problems with the template implementation\n+\n+@cindex g++, template support\n+@cindex Templates\n+\n+g++ does not implement a separate pass to instantiate template functions\n+and classes at this point; for this reason, it will not work, for the most\n+part, to declare your template functions in one file and define them in\n+another.  The compiler will need to see the entire definition of the\n+function, and will generate a static copy of the function in each file\n+in which it is used.\n+\n+(The experimental template repository code (@pxref{repository}) that\n+can be added to 2.7.0 or later does implement a separate pass, but there\n+is still no searching of files that the compiler never saw).\n+\n+@cindex -fno-implicit-templates\n+For version 2.6.0, however, a new switch @code{-fno-implicit-templates}\n+was added; with this switch, templates are expanded only under user\n+control.  I recommend that all g++ users that use templates read the\n+section ``Template Instantiation'' in the gcc manual (version 2.6.x\n+and newer).  g++ now supports explicit template expansion using the\n+syntax from the latest C++ working paper:\n+\n+@example\n+template class A<int>;\n+template ostream& operator << (ostream&, const A<int>&);\n+@end example\n+\n+@cindex template limitations\n+As of version 2.6.3, there are still a few limitations in the template\n+implementation besides the above (thanks to Jason Merrill for this info):\n+These are still present in version 2.7.2, but a new implementation of\n+templates planned for version 2.8 will eliminate them.\n+\n+@enumerate 1\n+@item\n+Static data member templates are not supported.  You can work around\n+this by explicitly declaring the static variable for each template\n+specialization:\n+\n+@example\n+template <class T> struct A @{\n+  static T t;\n+@};\n+\n+template <class T> T A<T>::t = 0; // gets bogus error\n+int A<int>::t = 0;                // OK (workaround)\n+@end example\n+\n+(still a limitation in 2.7.2)\n+\n+@item\n+Template member names are not available when defining member function\n+templates.\n+\n+@example\n+template <class T> struct A @{\n+  typedef T foo;\n+  void f (foo);\n+  void g (foo arg) @{ ... @}; // this works\n+@};\n+\n+template <class T> void A<T>::f (foo) @{ @} // gets bogus error\n+@end example\n+\n+@item\n+Templates are instantiated using the parser.  This results in two\n+problems:\n+\n+a) Class templates are instantiated in some situations where such\n+instantiation should not occur.\n+\n+@example\n+template <class T> class A @{ @};\n+A<int> *aip = 0; // should not instantiate A<int> (but does)\n+@end example\n+\n+b) Function templates cannot be inlined at the site of their\n+instantiation.\n+\n+@example\n+template <class T> inline T min (T a, T b) @{ return a < b ? a : b; @}\n+\n+void f () @{\n+  int i = min (1, 0);           // not inlined\n+@}\n+\n+void g () @{\n+  int j = min (1, 0);           // inlined\n+@}\n+@end example\n+\n+A workaround that works in version 2.6.1 and later is to specify\n+\n+@example\n+extern template int min (int, int);\n+@end example\n+\n+before @code{f()}; this will force it to be instantiated (though not\n+emitted). \n+\n+@item\n+Member function templates are always instantiated when their containing\n+class is.  This is wrong.\n+@end enumerate\n+\n+@node undefined templates, redundant templates, templates, User Problems\n+@section I get undefined symbols when using templates\n+\n+(Thanks to Jason Merrill for this section).\n+\n+@cindex template instantiation\n+g++ does not automatically instantiate templates defined in other files.\n+Because of this, code written for cfront will often produce undefined\n+symbol errors when compiled with g++.  You need to tell g++ which template\n+instances you want, by explicitly instantiating them in the file where they\n+are defined.  For instance, given the files\n+\n+@file{templates.h}:\n+@example\n+template <class T>\n+class A @{\n+public:\n+  void f ();\n+  T t;\n+@};\n+\n+template <class T> void g (T a);\n+@end example\n+\n+@file{templates.cc}:\n+@example\n+#include \"templates.h\"\n+\n+template <class T>\n+void A<T>::f () @{ @}\n+\n+template <class T>\n+void g (T a) @{ @}\n+@end example\n+\n+\n+main.cc:\n+@example\n+#include \"templates.h\"\n+\n+main ()\n+@{\n+  A<int> a;\n+  a.f ();\n+  g (a);\n+@}\n+@end example\n+\n+compiling everything with @code{g++ main.cc templates.cc} will result in\n+undefined symbol errors for @samp{A<int>::f ()} and @samp{g (A<int>)}.  To\n+fix these errors, add the lines\n+\n+@example\n+template class A<int>;\n+template void g (A<int>);\n+@end example\n+\n+to the bottom of @samp{templates.cc} and recompile.\n+\n+@node redundant templates, Standard Template Library, undefined templates, User Problems\n+@section I get multiply defined symbols using templates\n+\n+You may be running into a bug that was introduced in version 2.6.1\n+(and is still present in 2.6.3) that generated external linkage\n+for templates even when neither @code{-fexternal-templates} nor\n+@code{-fno-implicit-templates} is specified.  There is a patch for\n+this problem at @*\n+@file{ftp://ftp.cygnus.com/pub/g++/gcc-2.6.3-template-fix}.\n+\n+I recommend either applying the patch or\n+using @code{-fno-implicit-templates}\n+together with explicit template instantiation as described in previous\n+sections.\n+\n+This bug is fixed in 2.7.0.\n+\n+@node Standard Template Library, STL and string, redundant templates, User Problems\n+@section Does g++ support the Standard Template Library?\n+\n+@cindex STL\n+@cindex Standard Template Library\n+The Standard Template Library (STL) uses many of the extensions that the\n+ANSI/ISO committee has made to templates, and g++ doesn't support\n+some of these yet.  So if you grab HP's free implementation of STL it\n+isn't going to work.  However, starting with libg++-2.6.2 libg++ contains a\n+hacked version of STL, based on work by Carsten Bormann, which permits\n+g++ to compile at least the containers (thanks to Per Bothner for this\n+text).\n+\n+Actually, as of libg++ version 2.7.2 most of this works quite well, most\n+of the time;\n+I've succeeded\n+in making significant use of it.\n+Almost all of the ObjectSpace examples (a set of\n+over 200 simple examples of STL usage) now work.\n+\n+When version 2.8.0 is out (with its complete redesign of the template\n+implementation) a much more complete implementation of the\n+STL (based on a newer free implementation from SGI) will be included.\n+In the meantime, a group at the Moscow Center for Sparc Technology has\n+a port of the SGI STL implementation that mostly works with gcc-2.7.2.\n+See\n+@file{http://www.ipmce.su/people/fbp/stl/stlport.html}.\n+\n+In addition, there are several commercial suppliers of STL implementations;\n+ObjectSpace's version supports gcc-2.7.x.\n+\n+Mumit Khan has produced an ``STL newbie guide'' with lots of information\n+on using STL with gcc.  See\n+\n+@file{http://www.xraylith.wisc.edu/~khan/software/stl/STL.newbie.html}\n+\n+@node STL and string, exceptions, Standard Template Library, User Problems\n+@section I'm having problems mixing STL and the standard string class\n+\n+This is due to a bug in g++ version 2.7.2 and 2.7.2.1; the compiler\n+is confused by the operator declarations.  There is an easy workaround,\n+however; just make sure that the @code{<string>} header is included\n+before any STL headers.  That is, just say\n+\n+@example\n+#include <string>\n+@end example\n+\n+before any other @code{#include} directives.\n+\n+Unfortunately, this doesn't solve all problems; you may still have\n+difficulty with the relational operators !=, <=, >, and >=, thanks\n+to a conflict with the very general definition of these operators\n+in function.h.  One trick that sometimes works is to try to use ==\n+and < in your code instead of the other operators.  Another is to\n+use a derived class of <string>.  The only completely satisfactory\n+solution, I'm afraid, is to wait for the new release.\n+\n+@node exceptions, namespaces, STL and string, User Problems\n+@section Problems and limitations with exceptions\n+\n+Recent g++ versions provide limited support for exceptions.  You must\n+provide the @code{-fhandle-exceptions} flag to enable exception\n+handling.  As of version 2.7.2, exceptions may not work properly\n+(and you may get odd error messages when compiling) if you turn\n+on optimization (the @code{-O} flag).\n+\n+You must give the @code{-frtti} switch to enable catching\n+of derived exception objects with handlers for the base exception class;\n+if @code{-frtti} is not given, only exact type matching works.\n+\n+For exception handling to work with 2.7.0 your CPU must be a SPARC,\n+RS6000/PowerPC, 386/486/Pentium, or ARM.  Release 2.7.1 added support\n+for the Alpha, and ``m68k is rumored to work on some platforms''\n+and ``VAX may also work'' (according to Mike Stump).\n+@emph{It still doesn't work on HP-PA or MIPS platforms.}\n+\n+@node namespaces, agreement with standards, exceptions, User Problems\n+@section Does g++ support namespaces?\n+\n+As of version 2.7.2, g++ recognizes the keywords @code{namespace} and\n+@code{using}, and there is some rudimentary code present, but almost\n+nothing connected with namespaces works yet.  It appears that this will\n+still be true when 2.8.0 is released.\n+\n+@node agreement with standards, compiling standard libraries, namespaces, User Problems\n+@section What are the differences between g++ and the ARM specification of C++?\n+\n+@cindex ARM [Annotated C++ Ref Manual]\n+@cindex exceptions\n+As of version 2.7.0, g++ has exception support on most but not all\n+platforms\n+(no support on MIPS-based platforms yet), but\n+it doesn't work right if optimizaton is enabled, which means the\n+exception\n+implementation is still\n+not really ready for production use.\n+\n+\n+@cindex mutable\n+Some features that the ANSI/ISO standardization committee has voted in\n+that don't appear in the ARM are supported, notably the @code{mutable}\n+keyword, in version 2.5.x.  2.6.x adds support for the built-in boolean\n+type @code{bool}, with constants @code{true} and @code{false}.  The\n+beginnings of run-time type identification are present, so there are\n+more reserved words: @code{typeid}, @code{static_cast},\n+@code{reinterpret_cast}, @code{const_cast}, and @code{dynamic_cast}.\n+\n+@cindex g++ bugs\n+As with any beta-test compiler, there are bugs.  You can help improve\n+the compiler by submitting detailed bug reports.\n+\n+One of the weakest areas of g++ other than templates is the resolution\n+of overloaded functions and operators in complex cases.  The usual\n+symptom is that in a case where the ARM says that it is ambiguous which\n+function should be chosen, g++ chooses one (often the first one\n+declared).  This is usually not a problem when porting C++ code from\n+other compilers to g++, but shows up as errors when code developed under\n+g++ is ported to other compilers.  (I believe this is no longer a\n+significant problem in 2.7.0).\n+\n+[A full bug list would be very long indeed, so I won't put one here.\n+I may add a list of frequently-reported bugs and \"non-bugs\" like the\n+static class members issue mentioned above].\n+\n+@node compiling standard libraries, debugging on SVR4 systems, agreement with standards, User Problems\n+@section Will g++ compile InterViews?  The NIH class library?  Rogue Wave?\n+\n+@cindex NIH class library\n+@cindex NIHCL with g++\n+The NIH class library uses a non-portable, compiler-dependent hack\n+to initialize itself, which makes life difficult for g++ users.\n+It will not work without modification, and I don't know what modifications\n+are required or whether anyone has done them successfully.\n+\n+In short, it's not going to happen any time soon (previous FAQs referred\n+to patches that a new NIHCL release would hopefully contain, but this\n+hasn't happened).\n+\n+@strong{Note:} I thought I saw an item indicating that someone\n+@emph{had} patched NIHCL to work with g++.  Any pointers?\n+\n+@cindex InterViews\n+I think that as of version 2.5.6, the standard g++ will compile the\n+standard 3.1 InterViews completely successfully.\n+Note that you'll need the @code{-fno-for-scope} flag\n+if you use gcc-2.7.0; with 2.7.2 you may be able to omit this flag\n+but you'll get warnings.\n+\n+@cindex Rogue Wave\n+According to Jason Merrill, gcc-2.7.0 and newer works with Rogue\n+Wave's @code{tools.h++} class library, but you may want to grab\n+@file{ftp://ftp.cygnus.com/pub/g++/Tools.h++-6.1-patch}.  Again,\n+you'll need the @code{-fno-for-scope} flag since Rogue Wave hasn't\n+fixed their code to comply with the new standard yet.\n+\n+@node debugging on SVR4 systems, debugging problems on Solaris, compiling standard libraries, User Problems\n+@section Debugging on SVR4 systems\n+@cindex System VR4, debugging\n+\n+``How do I get debugging to work on my System V Release 4 system?''\n+\n+@cindex DWARF debug format\n+\n+Most systems based on System V Release 4 (except Solaris) encode symbolic\n+debugging information in a format known as `DWARF'.\n+\n+Although the GNU C compiler already knows how to write out symbolic debugging\n+information in the DWARF format, the GNU C++ compiler does not yet have this\n+feature yet.  However, work is in progress for DWARF 2 debug support for\n+gcc and g++ and will be available in a future release (probably 2.8.0).\n+\n+@cindex stabs\n+@cindex --with-stabs\n+\n+In the meantime, you @emph{can} get g++ debugging under SVR4 systems by\n+configuring gcc with the @code{--with-stabs} option.  This causes gcc to\n+use an alternate debugging format, one more like that used under SunOS4.\n+You won't need to do anything special to GDB; it will always understand\n+the ``stabs'' format.\n+\n+@node debugging problems on Solaris, X11 conflicts with libg++, debugging on SVR4 systems, User Problems\n+@section debugging problems on Solaris\n+\n+``I'm on Solaris, and gdb says it doesn't know about some of my local\n+symbols.  Help!''\n+\n+This problem was introduced in gcc 2.7.2; debug symbols for\n+locals that aren't declared at the beginning of a block come out in the\n+wrong order, and gdb can't find such symbols.\n+\n+This problem is fixed in gcc-2.7.2.1.\n+\n+@node X11 conflicts with libg++, assignment to streams, debugging problems on Solaris, User Problems\n+@section X11 conflicts with libg++ in definition of String\n+@cindex String, conflicts in definition\n+\n+``X11 and Motif define String, and this conflicts with the String class\n+in libg++.  How can I use both together?''\n+\n+One possible method is the following:\n+\n+@example\n+#define String XString\n+#include <X11/Intrinsic.h>\n+/* include other X11 and Motif headers */\n+#undef String\n+@end example\n+\n+and remember to use the correct @code{String} or @code{XString} when\n+you declare things later.\n+\n+@node assignment to streams,  , X11 conflicts with libg++, User Problems\n+@section Why can't I assign one stream to another?\n+\n+[ Thanks to Per Bothner and Jerry Schwarz for this section. ]\n+\n+Assigning one stream to another seems like a reasonable thing to do, but\n+it's a bad idea.  Usually, this comes up because people want to assign\n+to @code{cout}.  This is poor style, especially for libraries, and is\n+contrary to good object-oriented design.  (Libraries that write directly\n+to @code{cout} are less flexible, modular, and object-oriented).\n+\n+The iostream classes do not allow assigning to arbitrary streams, because\n+this can violate typing:\n+\n+@example\n+ifstream foo (\"foo\");\n+istrstream str(...);\n+foo = str;\n+foo->close ();  /* Oops! Not defined for istrstream! */\n+@end example\n+\n+@cindex assignment to cout\n+\n+The original cfront implementation of iostreams by Jerry Schwarz allows\n+you to assign to @code{cin}, @code{cout}, @code{cerr}, and @code{clog},\n+but this is not part of the draft standard for iostreams and generally\n+isn't considered a good idea, so standard-conforming code shouldn't use\n+this technique.\n+\n+The GNU implementation of iostream did not support assigning to \n+@code{cin}, @code{cout}, @code{cerr}, and @code{clog}\n+for quite a while, but it now does, for backward\n+compatibility with cfront iostream (versions 2.6.1 and later of libg++).\n+\n+The ANSI/ISO C++ Working Paper does provide ways of changing the\n+streambuf associated with a stream.  Assignment isn't allowed;\n+there is an explicit named member that must be used.\n+\n+However, it is not wise to do this, and the results are confusing.  For\n+example: @code{fstream::rdbuf} is supposed to return the @emph{original}\n+filebuf, not the one you assigned. (This is not yet implemented in GNU\n+iostream.)  This must be so because @code{fstream::rdbuf} is defined to\n+return a @code{filebuf *}.\n+\n+@node legalities, index, User Problems, Top\n+@chapter What are the rules for shipping code built with g++ and libg++?\n+@cindex Shipping rules\n+@cindex GPL [GNU Public License]\n+\n+``Is it is possible to distribute programs for profit that are created\n+with g++ and use the g++ libraries?''\n+\n+I am not a lawyer, and this is not legal advice.  In any case, I have\n+little interest in telling people how to violate the spirit of the\n+GNU licenses without violating the letter.  This section tells you\n+how to comply with the intention of the GNU licenses as best I understand\n+them.\n+\n+@cindex FSF [Free Software Foundation]\n+The FSF has no objection to your making money.  Its only interest is that\n+source code to their programs, and libraries, and to modified versions of\n+their programs and libraries, is always available.\n+\n+The short answer is that you do not need to release the source to\n+your program, but you can't just ship a stripped executable either,\n+unless you use only the subset of libg++ that includes the iostreams\n+classes (see discussion below) or the new libstdc++ library (available\n+in libg++ 2.6.2 and later).\n+\n+Compiling your code with a GNU compiler does not affect its copyright;\n+it is still yours.  However, in order to ship code that links in a GNU\n+library such as libg++ there are certain rules you must follow.  The\n+rules are described in the file COPYING.LIB that accompanies gcc\n+distributions; it is also included in the libg++ distribution.\n+See that file for the exact rules.  The agreement is called the\n+Library GNU Public License or LGPL.  It is much \"looser\" than the\n+GNU Public License, or GPL, that covers must GNU programs.\n+\n+@cindex libg++, shipping code\n+Here's the deal: let's say that you use some version of libg++,\n+completely unchanged, in your software, and you want to ship only\n+a binary form of your code.  You can do this, but there are several\n+special requirements.  If you want to use libg++ but ship only object\n+code for your code, you have to ship source for libg++ (or ensure\n+somehow that your customer already has the source for the exact\n+version you are using), and ship your application in linkable form.\n+You cannot forbid your customer from reverse-engineering or extending\n+your program by exploiting its linkable form.\n+\n+@cindex libg++, modifying\n+Furthermore, if you modify libg++ itself, you must provide source\n+for your modifications (making a derived class does not count as\n+modifying the library -- that is \"a work that uses the library\").\n+\n+@cindex special copying conditions for iostreams\n+For certain portions of libg++ that implement required parts of the C++\n+language (such as iostreams and other standard classes), the FSF has\n+loosened the copyright requirement still more by adding the ``special\n+exception'' clause, which reads as follows:\n+\n+@quotation\n+As a special exception, if you link this library with files\n+compiled with GCC to produce an executable, this does not cause\n+the resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why\n+the executable file might be covered by the GNU General Public License.\n+@end quotation\n+\n+If your only use of libg++ uses code with this exception, you may ship\n+stripped executables or license your executables under different\n+conditions without fear of violating an FSF copyright.  It is the intent\n+of FSF and Cygnus that, as the other classes required by the ANSI/ISO\n+draft standard are developed, these will also be placed under this\n+``special exception'' license.\n+The code in the new libstdc++ library, intended to implement standard\n+classes as defined by ANSI/ISO, is also licensed this way.\n+\n+To avoid coming under the influence of the LGPL, you can link with\n+@file{-liostream} rather than @file{-lg++} (for version 2.6.x and\n+earlier), or @file{-lstdc++} now that it is available.  In version 2.7.0\n+all the standard classes are in @file{-lstdc++}; you can do the link\n+step with @code{c++} instead of @code{g++} to search only the\n+@file{-lstdc++} library and avoid the LGPL'ed code in @file{-lg++}.\n+\n+If you wish to discuss legal issues connected with GNU software on the\n+net, please use @file{gnu.misc.discuss}, not the technical newsgroups.\n+\n+@node index,  , legalities, Top\n+@comment  node-name,  next,  previous,  up\n+@appendix Concept Index\n+\n+@printindex cp\n+\n+@page\n+@contents\n+@bye"}, {"sha": "4449d929ba9be49458803b87a5f934e031d4af74", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5408ce78640e8a2ff7a45ec57abaa3a1c4750b19/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5408ce78640e8a2ff7a45ec57abaa3a1c4750b19/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=5408ce78640e8a2ff7a45ec57abaa3a1c4750b19", "patch": "@@ -111,7 +111,7 @@ empty_parms ()\n %token SELFNAME\n \n /* A template function.  */\n-%token <ttype> PFUNCNAME\n+%token PFUNCNAME\n \n /* Reserved words that specify storage class.\n    yylval contains an IDENTIFIER_NODE which indicates which one.  */"}]}