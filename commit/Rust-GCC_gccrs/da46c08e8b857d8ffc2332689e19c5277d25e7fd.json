{"sha": "da46c08e8b857d8ffc2332689e19c5277d25e7fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE0NmMwOGU4Yjg1N2Q4ZmZjMjMzMjY4OWUxOWM1Mjc3ZDI1ZTdmZA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-02-02T09:16:44Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-02-02T09:16:44Z"}, "message": "re PR fortran/88980 (segfault on allocatable string member assignment)\n\n2019-02-02  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/88980\n\t* trans-array.c (gfc_array_init_size): Add element_size to the\n\targuments.\n\t(gfc_array_allocate): Remove the recalculation of the size of\n\tthe element and use element_size from the call to the above.\n\tUnconditionally set the span field of the descriptor.\n\n2019-02-02  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/88980\n\t* gfortran.dg/realloc_on_assign_32.f90 : New test.\n\nFrom-SVN: r268473", "tree": {"sha": "ee3c99e9e0766e3246de5eb54f4847736fb03e01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee3c99e9e0766e3246de5eb54f4847736fb03e01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da46c08e8b857d8ffc2332689e19c5277d25e7fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da46c08e8b857d8ffc2332689e19c5277d25e7fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da46c08e8b857d8ffc2332689e19c5277d25e7fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da46c08e8b857d8ffc2332689e19c5277d25e7fd/comments", "author": null, "committer": null, "parents": [{"sha": "6bb45a6b52046f51193c34bbd026a13bf48b4b49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bb45a6b52046f51193c34bbd026a13bf48b4b49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bb45a6b52046f51193c34bbd026a13bf48b4b49"}], "stats": {"total": 97, "additions": 58, "deletions": 39}, "files": [{"sha": "6dba135459fac039d0dfc49726c282723f508952", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da46c08e8b857d8ffc2332689e19c5277d25e7fd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da46c08e8b857d8ffc2332689e19c5277d25e7fd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=da46c08e8b857d8ffc2332689e19c5277d25e7fd", "patch": "@@ -1,3 +1,12 @@\n+2019-02-02  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/88980\n+\t* trans-array.c (gfc_array_init_size): Add element_size to the\n+\targuments.\n+\t(gfc_array_allocate): Remove the recalculation of the size of\n+\tthe element and use element_size from the call to the above.\n+\tUnconditionally set the span field of the descriptor.\n+\n 2019-02-02  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/88685"}, {"sha": "b885fe6187dce6a259564fbd8ba23df906c9cb88", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 13, "deletions": 39, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da46c08e8b857d8ffc2332689e19c5277d25e7fd/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da46c08e8b857d8ffc2332689e19c5277d25e7fd/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=da46c08e8b857d8ffc2332689e19c5277d25e7fd", "patch": "@@ -5370,14 +5370,14 @@ gfc_array_init_size (tree descriptor, int rank, int corank, tree * poffset,\n \t\t     gfc_expr ** lower, gfc_expr ** upper, stmtblock_t * pblock,\n \t\t     stmtblock_t * descriptor_block, tree * overflow,\n \t\t     tree expr3_elem_size, tree *nelems, gfc_expr *expr3,\n-\t\t     tree expr3_desc, bool e3_has_nodescriptor, gfc_expr *expr)\n+\t\t     tree expr3_desc, bool e3_has_nodescriptor, gfc_expr *expr,\n+\t\t     tree *element_size)\n {\n   tree type;\n   tree tmp;\n   tree size;\n   tree offset;\n   tree stride;\n-  tree element_size;\n   tree or_expr;\n   tree thencase;\n   tree elsecase;\n@@ -5628,10 +5628,10 @@ gfc_array_init_size (tree descriptor, int rank, int corank, tree * poffset,\n     tmp = TYPE_SIZE_UNIT (gfc_get_element_type (type));\n \n   /* Convert to size_t.  */\n-  element_size = fold_convert (size_type_node, tmp);\n+  *element_size = fold_convert (size_type_node, tmp);\n \n   if (rank == 0)\n-    return element_size;\n+    return *element_size;\n \n   *nelems = gfc_evaluate_now (stride, pblock);\n   stride = fold_convert (size_type_node, stride);\n@@ -5641,14 +5641,14 @@ gfc_array_init_size (tree descriptor, int rank, int corank, tree * poffset,\n      dividing.  */\n   tmp = fold_build2_loc (input_location, TRUNC_DIV_EXPR,\n \t\t\t size_type_node,\n-\t\t\t TYPE_MAX_VALUE (size_type_node), element_size);\n+\t\t\t TYPE_MAX_VALUE (size_type_node), *element_size);\n   cond = gfc_unlikely (fold_build2_loc (input_location, LT_EXPR,\n \t\t\t\t\tlogical_type_node, tmp, stride),\n \t\t       PRED_FORTRAN_OVERFLOW);\n   tmp = fold_build3_loc (input_location, COND_EXPR, integer_type_node, cond,\n \t\t\t integer_one_node, integer_zero_node);\n   cond = gfc_unlikely (fold_build2_loc (input_location, EQ_EXPR,\n-\t\t\t\t\tlogical_type_node, element_size,\n+\t\t\t\t\tlogical_type_node, *element_size,\n \t\t\t\t\tbuild_int_cst (size_type_node, 0)),\n \t\t       PRED_FORTRAN_SIZE_ZERO);\n   tmp = fold_build3_loc (input_location, COND_EXPR, integer_type_node, cond,\n@@ -5658,7 +5658,7 @@ gfc_array_init_size (tree descriptor, int rank, int corank, tree * poffset,\n   *overflow = gfc_evaluate_now (tmp, pblock);\n \n   size = fold_build2_loc (input_location, MULT_EXPR, size_type_node,\n-\t\t\t  stride, element_size);\n+\t\t\t  stride, *element_size);\n \n   if (poffset != NULL)\n     {\n@@ -5736,6 +5736,7 @@ gfc_array_allocate (gfc_se * se, gfc_expr * expr, tree status, tree errmsg,\n   tree var_overflow = NULL_TREE;\n   tree cond;\n   tree set_descriptor;\n+  tree element_size = NULL_TREE;\n   stmtblock_t set_descriptor_block;\n   stmtblock_t elseblock;\n   gfc_expr **lower;\n@@ -5852,7 +5853,7 @@ gfc_array_allocate (gfc_se * se, gfc_expr * expr, tree status, tree errmsg,\n \t\t\t      &offset, lower, upper,\n \t\t\t      &se->pre, &set_descriptor_block, &overflow,\n \t\t\t      expr3_elem_size, nelems, expr3, e3_arr_desc,\n-\t\t\t      e3_has_nodescriptor, expr);\n+\t\t\t      e3_has_nodescriptor, expr, &element_size);\n \n   if (dimension)\n     {\n@@ -5924,38 +5925,11 @@ gfc_array_allocate (gfc_se * se, gfc_expr * expr, tree status, tree errmsg,\n \n   gfc_add_expr_to_block (&se->pre, tmp);\n \n-  /* Update the array descriptors.  */\n+  /* Update the array descriptor with the offset and the span.  */\n   if (dimension)\n-    gfc_conv_descriptor_offset_set (&set_descriptor_block, se->expr, offset);\n-\n-  /* Set the span field for pointer and deferred length character arrays.  */\n-  if ((is_pointer_array (se->expr)\n-       || (expr->ts.type == BT_CLASS && CLASS_DATA (expr)->attr.class_pointer)\n-       || (expr->ts.type == BT_CHARACTER && TREE_CODE (se->string_length)\n-\t\t\t\t\t\t\t== COMPONENT_REF))\n-      || (expr->ts.type == BT_CHARACTER\n-\t  && (expr->ts.deferred || VAR_P (expr->ts.u.cl->backend_decl))))\n-    {\n-      if (expr3 && expr3_elem_size != NULL_TREE)\n-\ttmp = expr3_elem_size;\n-      else if (se->string_length\n-\t       && (TREE_CODE (se->string_length) == COMPONENT_REF\n-\t\t   || (expr->ts.type == BT_CHARACTER && expr->ts.deferred)))\n-\t{\n-\t  if (expr->ts.kind != 1)\n-\t    {\n-\t      tmp = build_int_cst (gfc_array_index_type, expr->ts.kind);\n-\t      tmp = fold_build2_loc (input_location, MULT_EXPR,\n-\t\t\t\t    gfc_array_index_type, tmp,\n-\t\t\t\t    fold_convert (gfc_array_index_type,\n-\t\t\t\t\t\t  se->string_length));\n-\t    }\n-\t  else\n-\t    tmp = se->string_length;\n-\t}\n-      else\n-\ttmp = TYPE_SIZE_UNIT (gfc_get_element_type (TREE_TYPE (se->expr)));\n-      tmp = fold_convert (gfc_array_index_type, tmp);\n+    {\n+      gfc_conv_descriptor_offset_set (&set_descriptor_block, se->expr, offset);\n+      tmp = fold_convert (gfc_array_index_type, element_size);\n       gfc_conv_descriptor_span_set (&set_descriptor_block, se->expr, tmp);\n     }\n "}, {"sha": "d94a3be174641677a368f7cde9c24ca311f99f1c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da46c08e8b857d8ffc2332689e19c5277d25e7fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da46c08e8b857d8ffc2332689e19c5277d25e7fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da46c08e8b857d8ffc2332689e19c5277d25e7fd", "patch": "@@ -1,3 +1,8 @@\n+2019-02-02  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/88980\n+\t* gfortran.dg/realloc_on_assign_32.f90 : New test.\n+\n 2019-02-02  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/88685"}, {"sha": "31a0d7677113d2f3724eb0de4582a58a7b990eff", "filename": "gcc/testsuite/gfortran.dg/realloc_on_assign_32.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da46c08e8b857d8ffc2332689e19c5277d25e7fd/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_32.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da46c08e8b857d8ffc2332689e19c5277d25e7fd/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_32.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_32.f90?ref=da46c08e8b857d8ffc2332689e19c5277d25e7fd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR88980 in which the 'span' field if the descriptor\n+! for 'Items' was not set, causing the assignment to segfault.\n+!\n+! Contributed by Antony Lewis  <antony@cosmologist.info>\n+!\n+program tester\n+  call gbug\n+contains\n+  subroutine gbug\n+    type TNameValue\n+      character(LEN=:), allocatable :: Name\n+    end type TNameValue\n+\n+    type TNameValue_pointer\n+      Type(TNameValue), allocatable :: P\n+    end type TNameValue_pointer\n+\n+    Type TType\n+      type(TNameValue_pointer), dimension(:), allocatable :: Items\n+    end type TType\n+    Type(TType) T\n+\n+    allocate(T%Items(2))\n+    allocate(T%Items(2)%P)\n+    T%Items(2)%P%Name =  'test'\n+    if (T%Items(2)%P%Name .ne.  'test') stop 1\n+\n+  end subroutine gbug\n+end program tester"}]}