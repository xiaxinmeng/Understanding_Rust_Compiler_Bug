{"sha": "a42dd9febbbeb328af5b3b6adf4431dd7bcca113", "node_id": "C_kwDOANBUbNoAKGE0MmRkOWZlYmJiZWIzMjhhZjViM2I2YWRmNDQzMWRkN2JjY2ExMTM", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-12-23T15:48:11Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-01-10T09:38:47Z"}, "message": "[Ada] Fix bogus error on call to subprogram with incomplete profile\n\ngcc/ada/\n\n\t* gcc-interface/trans.c (Identifier_to_gnu): Use correct subtype.\n\t(elaborate_profile): New function.\n\t(Call_to_gnu): Call it on the formals and the result type before\n\tretrieving the translated result type from the subprogram type.", "tree": {"sha": "3a40c3b4d9b116fc3999bcc6bfd959d4a5088332", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a40c3b4d9b116fc3999bcc6bfd959d4a5088332"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a42dd9febbbeb328af5b3b6adf4431dd7bcca113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a42dd9febbbeb328af5b3b6adf4431dd7bcca113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a42dd9febbbeb328af5b3b6adf4431dd7bcca113", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a42dd9febbbeb328af5b3b6adf4431dd7bcca113/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc9cd2324922575c1aa1eadf6340c2af47f011c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc9cd2324922575c1aa1eadf6340c2af47f011c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc9cd2324922575c1aa1eadf6340c2af47f011c4"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "39059cb69a456665ba18cdb707a7bf703b8a2a48", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a42dd9febbbeb328af5b3b6adf4431dd7bcca113/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a42dd9febbbeb328af5b3b6adf4431dd7bcca113/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=a42dd9febbbeb328af5b3b6adf4431dd7bcca113", "patch": "@@ -1171,7 +1171,7 @@ Identifier_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n      specific circumstances only, so evaluated lazily.  < 0 means\n      unknown, > 0 means known true, 0 means known false.  */\n   int require_lvalue = -1;\n-  Node_Id gnat_result_type;\n+  Entity_Id gnat_result_type;\n   tree gnu_result, gnu_result_type;\n \n   /* If the Etype of this node is not the same as that of the Entity, then\n@@ -4457,6 +4457,22 @@ return_slot_opt_for_pure_call_p (tree target, tree call)\n   return !bitmap_bit_p (decls, DECL_UID (target));\n }\n \n+/* Elaborate types referenced in the profile (FIRST_FORMAL, RESULT_TYPE).  */\n+\n+static void\n+elaborate_profile (Entity_Id first_formal, Entity_Id result_type)\n+{\n+  Entity_Id formal;\n+\n+  for (formal = first_formal;\n+       Present (formal);\n+       formal = Next_Formal_With_Extras (formal))\n+    (void) gnat_to_gnu_type (Etype (formal));\n+\n+  if (Present (result_type) && Ekind (result_type) != E_Void)\n+    (void) gnat_to_gnu_type (result_type);\n+}\n+\n /* Subroutine of gnat_to_gnu to translate gnat_node, either an N_Function_Call\n    or an N_Procedure_Call_Statement, to a GCC tree, which is returned.\n    GNU_RESULT_TYPE_P is a pointer to where we should place the result type.\n@@ -4481,7 +4497,7 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n   /* The FUNCTION_TYPE node giving the GCC type of the subprogram.  */\n   tree gnu_subprog_type = TREE_TYPE (gnu_subprog);\n   /* The return type of the FUNCTION_TYPE.  */\n-  tree gnu_result_type = TREE_TYPE (gnu_subprog_type);\n+  tree gnu_result_type;;\n   const bool frontend_builtin\n     = (TREE_CODE (gnu_subprog) == FUNCTION_DECL\n        && DECL_BUILT_IN_CLASS (gnu_subprog) == BUILT_IN_FRONTEND);\n@@ -4496,6 +4512,7 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n   bool variadic;\n   bool by_descriptor;\n   Entity_Id gnat_formal;\n+  Entity_Id gnat_result_type;\n   Node_Id gnat_actual;\n   atomic_acces_t aa_type;\n   bool aa_sync;\n@@ -4510,6 +4527,7 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t= Underlying_Type (Etype (Prefix (gnat_subprog)));\n \n       gnat_formal = First_Formal_With_Extras (Etype (gnat_subprog));\n+      gnat_result_type = Etype (Etype (gnat_subprog));\n       variadic = IN (Convention (gnat_prefix_type), Convention_C_Variadic);\n \n       /* If the access type doesn't require foreign-compatible representation,\n@@ -4523,6 +4541,7 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n     {\n       /* Assume here that this must be 'Elab_Body or 'Elab_Spec.  */\n       gnat_formal = Empty;\n+      gnat_result_type = Empty;\n       variadic = false;\n       by_descriptor = false;\n     }\n@@ -4532,6 +4551,7 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n       gcc_checking_assert (Is_Entity_Name (gnat_subprog));\n \n       gnat_formal = First_Formal_With_Extras (Entity (gnat_subprog));\n+      gnat_result_type = Etype (Entity_Id (gnat_subprog));\n       variadic = IN (Convention (Entity (gnat_subprog)), Convention_C_Variadic);\n       by_descriptor = false;\n \n@@ -4549,6 +4569,7 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \n \t  if (returning_value)\n \t    {\n+\t      gnu_result_type = TREE_TYPE (gnu_subprog_type);\n \t      *gnu_result_type_p = gnu_result_type;\n \t      return build1 (NULL_EXPR, gnu_result_type, call_expr);\n \t    }\n@@ -4557,7 +4578,13 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t}\n     }\n \n+  /* We must elaborate the entire profile now because, if it references types\n+     that were initially incomplete,, their elaboration changes the contents\n+     of GNU_SUBPROG_TYPE and, in particular, may change the result type.  */\n+  elaborate_profile (gnat_formal, gnat_result_type);\n+\n   gcc_assert (FUNC_OR_METHOD_TYPE_P (gnu_subprog_type));\n+  gnu_result_type = TREE_TYPE (gnu_subprog_type);\n \n   if (TREE_CODE (gnu_subprog) == FUNCTION_DECL)\n     {"}]}