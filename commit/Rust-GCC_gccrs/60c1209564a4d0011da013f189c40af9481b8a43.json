{"sha": "60c1209564a4d0011da013f189c40af9481b8a43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBjMTIwOTU2NGE0ZDAwMTFkYTAxM2YxODljNDBhZjk0ODFiOGE0Mw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-05-13T10:24:30Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-05-13T10:24:30Z"}, "message": "line-map.h: move linemap_assert and friends higher up within the file\n\nlibcpp/ChangeLog:\n\t* include/line-map.h (linemap_assert): Move up within the file to\n\tbefore all of the map accessor macros.\n\t(linemap_assert_fails): Likewise.\n\t(linemap_check_ordinary): Likewise.\n\t(linemap_macro_expansion_map_p): Likewise.\n\nFrom-SVN: r223121", "tree": {"sha": "7997cc36377ce49f4bd716ec5ebc9904d6b53c72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7997cc36377ce49f4bd716ec5ebc9904d6b53c72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60c1209564a4d0011da013f189c40af9481b8a43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60c1209564a4d0011da013f189c40af9481b8a43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60c1209564a4d0011da013f189c40af9481b8a43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60c1209564a4d0011da013f189c40af9481b8a43/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fcd424cecbe8874404fc92520954ec806e7886fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcd424cecbe8874404fc92520954ec806e7886fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcd424cecbe8874404fc92520954ec806e7886fc"}], "stats": {"total": 79, "additions": 44, "deletions": 35}, "files": [{"sha": "848b3c4749685af40312e23d9e14436329e62169", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c1209564a4d0011da013f189c40af9481b8a43/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c1209564a4d0011da013f189c40af9481b8a43/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=60c1209564a4d0011da013f189c40af9481b8a43", "patch": "@@ -1,3 +1,11 @@\n+2015-05-13  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* include/line-map.h (linemap_assert): Move up within the file to\n+\tbefore all of the map accessor macros.\n+\t(linemap_assert_fails): Likewise.\n+\t(linemap_check_ordinary): Likewise.\n+\t(linemap_macro_expansion_map_p): Likewise.\n+\n 2015-05-12  David Malcolm  <dmalcolm@redhat.com>\n \n \t* directives.c (do_line): Set seen_line_directive on line_table."}, {"sha": "51dc09d3fdb11ead4218eefc737fa3eb0ca2fd82", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 36, "deletions": 35, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c1209564a4d0011da013f189c40af9481b8a43/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c1209564a4d0011da013f189c40af9481b8a43/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=60c1209564a4d0011da013f189c40af9481b8a43", "patch": "@@ -279,6 +279,42 @@ struct GTY(()) line_map {\n   } GTY((desc (\"%1.reason == LC_ENTER_MACRO\"))) d;\n };\n \n+#if defined ENABLE_CHECKING && (GCC_VERSION >= 2007)\n+\n+/* Assertion macro to be used in line-map code.  */\n+#define linemap_assert(EXPR)                  \\\n+  do {                                                \\\n+    if (! (EXPR))                             \\\n+      abort ();                                       \\\n+  } while (0)\n+\n+/* Assert that becomes a conditional expression when checking is disabled at\n+   compilation time.  Use this for conditions that should not happen but if\n+   they happen, it is better to handle them gracefully rather than crash\n+   randomly later.\n+   Usage:\n+\n+   if (linemap_assert_fails(EXPR)) handle_error(); */\n+#define linemap_assert_fails(EXPR) __extension__ \\\n+  ({linemap_assert (EXPR); false;})\n+\n+/* Assert that MAP encodes locations of tokens that are not part of\n+   the replacement-list of a macro expansion.  */\n+#define linemap_check_ordinary(LINE_MAP) __extension__\t\t\\\n+  ({linemap_assert (!linemap_macro_expansion_map_p (LINE_MAP)); \\\n+    (LINE_MAP);})\n+#else\n+/* Include EXPR, so that unused variable warnings do not occur.  */\n+#define linemap_assert(EXPR) ((void)(0 && (EXPR)))\n+#define linemap_assert_fails(EXPR) (! (EXPR))\n+#define linemap_check_ordinary(LINE_MAP) (LINE_MAP)\n+#endif\n+\n+/* Return TRUE if MAP encodes locations coming from a macro\n+   replacement-list at macro expansion point.  */\n+bool\n+linemap_macro_expansion_map_p (const struct line_map *);\n+\n #define MAP_START_LOCATION(MAP) (MAP)->start_location\n \n #define ORDINARY_MAP_FILE_NAME(MAP) \\\n@@ -571,10 +607,6 @@ extern const struct line_map *linemap_lookup\n    macro expansion, FALSE otherwise.  */\n bool linemap_tracks_macro_expansion_locs_p (struct line_maps *);\n \n-/* Return TRUE if MAP encodes locations coming from a macro\n-   replacement-list at macro expansion point.  */\n-bool linemap_macro_expansion_map_p (const struct line_map *);\n-\n /* Return the name of the macro associated to MACRO_MAP.  */\n const char* linemap_map_get_macro_name (const struct line_map*);\n \n@@ -641,37 +673,6 @@ bool linemap_location_from_macro_expansion_p (const struct line_maps *,\n #define MAIN_FILE_P(MAP)\t\t\t\t\t\t\\\n   ((linemap_check_ordinary (MAP)->d.ordinary.included_from < 0))\n \n-#if defined ENABLE_CHECKING && (GCC_VERSION >= 2007)\n-\n-/* Assertion macro to be used in line-map code.  */\n-#define linemap_assert(EXPR)\t\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    if (! (EXPR))\t\t\t\t\\\n-      abort ();\t\t\t\t\t\\\n-  } while (0)\n- \n-/* Assert that becomes a conditional expression when checking is disabled at\n-   compilation time.  Use this for conditions that should not happen but if\n-   they happen, it is better to handle them gracefully rather than crash\n-   randomly later. \n-   Usage:\n-\n-   if (linemap_assert_fails(EXPR)) handle_error(); */\n-#define linemap_assert_fails(EXPR) __extension__ \\\n-  ({linemap_assert (EXPR); false;}) \n-\n-/* Assert that MAP encodes locations of tokens that are not part of\n-   the replacement-list of a macro expansion.  */\n-#define linemap_check_ordinary(LINE_MAP) __extension__\t\t\\\n-  ({linemap_assert (!linemap_macro_expansion_map_p (LINE_MAP)); \\\n-    (LINE_MAP);})\n-#else\n-/* Include EXPR, so that unused variable warnings do not occur.  */\n-#define linemap_assert(EXPR) ((void)(0 && (EXPR)))\n-#define linemap_assert_fails(EXPR) (! (EXPR))\n-#define linemap_check_ordinary(LINE_MAP) (LINE_MAP)\n-#endif\n-\n /* Encode and return a source_location from a column number. The\n    source line considered is the last source line used to call\n    linemap_line_start, i.e, the last source line which a location was"}]}