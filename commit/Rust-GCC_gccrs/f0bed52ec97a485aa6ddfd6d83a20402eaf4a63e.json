{"sha": "f0bed52ec97a485aa6ddfd6d83a20402eaf4a63e", "node_id": "C_kwDOANBUbNoAKGYwYmVkNTJlYzk3YTQ4NWFhNmRkZmQ2ZDgzYTIwNDAyZWFmNGE2M2U", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-12-15T18:33:45Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2023-01-05T14:29:59Z"}, "message": "ada: Simplify new expansion of contracts\n\nWe can now use an extended return statement in all cases since it no longer\ngenerates an extra copy for nonlimited by-reference types.\n\ngcc/ada/\n\n\t* contracts.adb (Build_Subprogram_Contract_Wrapper): Generate an\n\textended return statement in all cases.\n\t(Expand_Subprogram_Contract): Adjust comment.", "tree": {"sha": "4e5eb54ad71d1151f1f76528d2977f5824b7ebd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e5eb54ad71d1151f1f76528d2977f5824b7ebd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0bed52ec97a485aa6ddfd6d83a20402eaf4a63e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0bed52ec97a485aa6ddfd6d83a20402eaf4a63e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0bed52ec97a485aa6ddfd6d83a20402eaf4a63e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0bed52ec97a485aa6ddfd6d83a20402eaf4a63e/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90d3cd03b35147b24091e7eba249fd4ea178082f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90d3cd03b35147b24091e7eba249fd4ea178082f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90d3cd03b35147b24091e7eba249fd4ea178082f"}], "stats": {"total": 105, "additions": 5, "deletions": 100}, "files": [{"sha": "77c231e1d4f9bee379a23c5ffd00781a11f13d97", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 5, "deletions": 100, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0bed52ec97a485aa6ddfd6d83a20402eaf4a63e/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0bed52ec97a485aa6ddfd6d83a20402eaf4a63e/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=f0bed52ec97a485aa6ddfd6d83a20402eaf4a63e", "patch": "@@ -30,7 +30,6 @@ with Einfo.Entities; use Einfo.Entities;\n with Einfo.Utils;    use Einfo.Utils;\n with Elists;         use Elists;\n with Errout;         use Errout;\n-with Exp_Ch6;        use Exp_Ch6;\n with Exp_Prag;       use Exp_Prag;\n with Exp_Tss;        use Exp_Tss;\n with Exp_Util;       use Exp_Util;\n@@ -1616,40 +1615,8 @@ package body Contracts is\n       --  preserving the result for the purpose of evaluating postconditions,\n       --  contracts, type invariants, etc.\n \n-      --  In the case of a regular function, generate:\n+      --  In the case of a function, generate:\n       --\n-      --  function Original_Func (X : in out Integer) return Typ is\n-      --     <prologue renamings>\n-      --     <preconditions>\n-      --\n-      --     function _Wrapped_Statements return Typ is\n-      --        <original declarations>\n-      --     begin\n-      --        <original statements>\n-      --     end;\n-      --\n-      --  begin\n-      --     declare\n-      --        type Axx is access all Typ;\n-      --        Rxx : constant Axx := _Wrapped_Statements'reference;\n-      --        Result_Obj : Typ renames Rxx.all;\n-      --\n-      --     begin\n-      --        <postconditions statments>\n-      --        return Rxx.all;\n-      --     end;\n-      --  end;\n-      --\n-      --  This sequence is recognized by Expand_Simple_Function_Return as a\n-      --  tail call, in other words equivalent to \"return _Wrapped_Statements;\"\n-      --  and thus the copy to the anonymous return object is elided, including\n-      --  a pair of calls to Adjust/Finalize for types requiring finalization.\n-\n-      --  Note that an extended return statement does not yield the same result\n-      --  because the copy of the return object is not elided by GNAT for now.\n-\n-      --  Or else, in the case of a BIP function, generate:\n-\n       --  function Original_Func (X : in out Integer) return Typ is\n       --     <prologue renamings>\n       --     <preconditions>\n@@ -1733,9 +1700,9 @@ package body Contracts is\n            (Handled_Statement_Sequence (Body_Decl), Stmts);\n \n       --  Generate the post-execution statements and the extended return\n-      --  when the subprogram being wrapped is a BIP function.\n+      --  when the subprogram being wrapped is a function.\n \n-      elsif Is_Build_In_Place_Result_Type (Ret_Type) then\n+      else\n          Set_Statements (Handled_Statement_Sequence (Body_Decl), New_List (\n            Make_Extended_Return_Statement (Loc,\n              Return_Object_Declarations => New_List (\n@@ -1751,65 +1718,6 @@ package body Contracts is\n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc,\n                  Statements => Stmts))));\n-\n-      --  Declare a renaming of the result of the call to the wrapper and\n-      --  append a return of the result of the call when the subprogram is\n-      --  a function, after manually removing the side effects. Note that\n-      --  we cannot call Remove_Side_Effects here because nothing has been\n-      --  analyzed yet and we cannot return the renaming itself because\n-      --  Expand_Simple_Function_Return expects an explicit dereference.\n-\n-      else\n-         declare\n-            A_Id : constant Node_Id := Make_Temporary (Loc, 'A');\n-            R_Id : constant Node_Id := Make_Temporary (Loc, 'R');\n-\n-         begin\n-            Set_Statements (Handled_Statement_Sequence (Body_Decl), New_List (\n-              Make_Block_Statement (Loc,\n-\n-                Declarations => New_List (\n-                  Make_Full_Type_Declaration (Loc,\n-                    Defining_Identifier => A_Id,\n-                    Type_Definition     =>\n-                      Make_Access_To_Object_Definition (Loc,\n-                        All_Present        => True,\n-                        Null_Exclusion_Present => True,\n-                        Subtype_Indication =>\n-                          New_Occurrence_Of (Ret_Type, Loc))),\n-\n-                  Make_Object_Declaration (Loc,\n-                    Defining_Identifier => R_Id,\n-                    Object_Definition   => New_Occurrence_Of (A_Id, Loc),\n-                    Constant_Present    => True,\n-                    Expression          =>\n-                      Make_Reference (Loc,\n-                        Make_Function_Call (Loc,\n-                          Name => New_Occurrence_Of (Wrapper_Id, Loc)))),\n-\n-                  Make_Object_Renaming_Declaration (Loc,\n-                    Defining_Identifier => Result,\n-                    Subtype_Mark        => New_Occurrence_Of (Ret_Type, Loc),\n-                    Name                =>\n-                      Make_Explicit_Dereference (Loc,\n-                        New_Occurrence_Of (R_Id, Loc)))),\n-\n-                Handled_Statement_Sequence =>\n-                  Make_Handled_Sequence_Of_Statements (Loc,\n-                    Statements => Stmts))));\n-\n-            Append_To (Stmts,\n-              Make_Simple_Return_Statement (Loc,\n-                Expression =>\n-                  Make_Explicit_Dereference (Loc,\n-                    New_Occurrence_Of (R_Id, Loc))));\n-\n-            --  It is required for Is_Related_To_Func_Return to return True\n-            --  that the temporary Rxx be related to the expression of the\n-            --  simple return statement built just above.\n-\n-            Set_Related_Expression (R_Id, Expression (Last (Stmts)));\n-         end;\n       end if;\n    end Build_Subprogram_Contract_Wrapper;\n \n@@ -3479,18 +3387,15 @@ package body Contracts is\n       --       end _Wrapped_Statements;\n \n       --    begin\n-      --       declare\n-      --          Result : ... renames _Wrapped_Statements;\n-      --       begin\n+      --       return Result : constant ... := _Wrapped_Statements do\n       --          <refined postconditions from body>\n       --          <postconditions from body>\n       --          <postconditions from spec>\n       --          <inherited postconditions>\n       --          <contract case consequences>\n       --          <invariant check of function result>\n       --          <invariant and predicate checks of parameters\n-      --          return Result;\n-      --       end;\n+      --       end return;\n       --    end Original_Code;\n \n       --  Step 1: augment contracts list with postconditions associated with"}]}