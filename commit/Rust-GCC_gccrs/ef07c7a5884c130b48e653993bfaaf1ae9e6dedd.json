{"sha": "ef07c7a5884c130b48e653993bfaaf1ae9e6dedd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYwN2M3YTU4ODRjMTMwYjQ4ZTY1Mzk5M2JmYWFmMWFlOWU2ZGVkZA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-07-08T21:59:12Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-07-13T08:13:51Z"}, "message": "cris: Use addi.b for additions where flags aren't inspected\n\nComparing to the cc0 version of the CRIS port, I ran a few\nmicrobenchmarks, for example gcc.c-torture/execute/arith-rand.c,\nwhere there's sometimes an addition between an operation of\ninterest and the test on the result.\n\nUnfortunately this patch doesn't remedy all the performance\nregression for that program.  But, this patch by itself helps\nand makes sense to commit separately: lots of addi.b in\npreviously empty delay-slots, with functions shortened by one or\na few insns, in libgcc.  I had an experience with the\nreload-related caveat of % on constraints, which is \"fixed\"\ndocumentationwise since long (soon 15 years ago;\nbe3914df4cc8/r105517).  I removed an even older related FIXME.\n\ngcc:\n\tPR target/93372\n\t* config/cris/cris.md (\"*add<mode>3_addi\"): New splitter.\n\t(\"*addi_b_<mode>\"): New pattern.\n\t(\"*addsi3<setnz>\"): Remove stale %-related comment.\n\ngcc/testsuite:\n\tPR target/93372\n\t* gcc.target/cris/pr93372-45.c: New test.", "tree": {"sha": "7aa26fea4bf67d3917544a495b50d888357bcd90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7aa26fea4bf67d3917544a495b50d888357bcd90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef07c7a5884c130b48e653993bfaaf1ae9e6dedd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef07c7a5884c130b48e653993bfaaf1ae9e6dedd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef07c7a5884c130b48e653993bfaaf1ae9e6dedd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef07c7a5884c130b48e653993bfaaf1ae9e6dedd/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4ac1a7fee8235c3be7660089b0654e6f05e36bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ac1a7fee8235c3be7660089b0654e6f05e36bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4ac1a7fee8235c3be7660089b0654e6f05e36bb"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "efafb5b1be1496bbc95c98a8b70ee60a74695d6a", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef07c7a5884c130b48e653993bfaaf1ae9e6dedd/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef07c7a5884c130b48e653993bfaaf1ae9e6dedd/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=ef07c7a5884c130b48e653993bfaaf1ae9e6dedd", "patch": "@@ -973,7 +973,6 @@\n ;; The last constraint is due to that after reload, the '%' is not\n ;; honored, and canonicalization doesn't care about keeping the same\n ;; register as in destination.  This will happen after insn splitting.\n-;; gcc <= 2.7.2.  FIXME: Check for gcc-2.9x\n \n  \"\"\n {\n@@ -1291,6 +1290,45 @@\n   [(set_attr \"slottable\" \"yes\")\n    (set_attr \"cc\" \"none\")])\n \n+;; This pattern is usually generated after reload, so a '%' is\n+;; ineffective; use explicit combinations.\n+(define_insn \"*addi_b_<mode>\"\n+  [(set (match_operand:BWD 0 \"register_operand\" \"=r,r\")\n+\t(plus:BWD\n+\t (match_operand:BWD 1 \"register_operand\" \"0,r\")\n+\t (match_operand:BWD 2 \"register_operand\" \"r,0\")))]\n+  \"\"\n+  \"@\n+   addi %2.b,%0\n+   addi %1.b,%0\"\n+  [(set_attr \"slottable\" \"yes\")])\n+\n+;; Strip the dccr clobber from addM3 with register operands, if the\n+;; next instruction isn't using it.\n+;; Not clobbering dccr may let cmpelim match a later compare with a\n+;; previous operation of interest.  This has to run before cmpelim so it\n+;; can't be a peephole2.  See gcc.target/cris/pr93372-45.c for a\n+;; test-case.\n+(define_split ;; \"*add<mode>3_addi\"\n+  [(parallel\n+    [(set (match_operand:BWD 0 \"register_operand\")\n+\t  (plus:BWD\n+\t   (match_operand:BWD 1 \"register_operand\")\n+\t   (match_operand:BWD 2 \"register_operand\")))\n+     (clobber (reg:CC CRIS_CC0_REGNUM))])]\n+  \"reload_completed\"\n+  [(set (match_dup 0) (plus:BWD (match_dup 1) (match_dup 2)))]\n+{\n+  rtx reg = operands[0];\n+  rtx_insn *i = next_nonnote_nondebug_insn_bb (curr_insn);\n+\n+  while (i != NULL_RTX && (!INSN_P (i) || DEBUG_INSN_P (i)))\n+    i = next_nonnote_nondebug_insn_bb (i);\n+\n+  if (i == NULL_RTX || reg_mentioned_p (reg, i) || BARRIER_P (i))\n+    FAIL;\n+})\n+\n (define_insn \"<u>mul<s><mode>3\"\n   [(set (match_operand:WD 0 \"register_operand\" \"=r\")\n \t(mult:WD"}, {"sha": "4fb7a9ac6fcd0f3cc508314e5a9cc27b1ba1c120", "filename": "gcc/testsuite/gcc.target/cris/pr93372-45.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef07c7a5884c130b48e653993bfaaf1ae9e6dedd/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-45.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef07c7a5884c130b48e653993bfaaf1ae9e6dedd/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-45.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-45.c?ref=ef07c7a5884c130b48e653993bfaaf1ae9e6dedd", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not {\\tcmp|\\ttest} } } */\n+\n+extern void foo(void);\n+unsigned int x (unsigned int b, unsigned int a, unsigned int *c)\n+{\n+  unsigned int y = a & 15;\n+  unsigned int z = y + b;\n+  if (y == 0)\n+    *c = z;\n+  return z;\n+}"}]}