{"sha": "897a15f355632bdc31871554892eca5512b3c370", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk3YTE1ZjM1NTYzMmJkYzMxODcxNTU0ODkyZWNhNTUxMmIzYzM3MA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-08-17T13:59:14Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-08-17T13:59:14Z"}, "message": "Improved handling of MINUS_EXPR in bit CCP.\n\nThis patch improves the bit bounds for MINUS_EXPR during tree-ssa's\nconditional constant propagation (CCP) pass (and as an added bonus\nadds support for POINTER_DIFF_EXPR).\n\nThe pessimistic assumptions made by the current algorithm are\ndemonstrated by considering 1 - (x&1).  Intuitively this should\nhave possible values 0 and 1, and therefore an unknown mask of 1.\nAlas by treating subtraction as a negation followed by addition,\nthe second operand first becomes 0 or -1, with an unknown mask\nof all ones, which results in the addition containing no known bits.\n\nImproved bounds are achieved by using the same approach used for\nPLUS_EXPR, determining the result with the minimum number of borrows,\nthe result from the maximum number of borrows, and examining the bits\nthey have in common.  One additional benefit of this approach\nis that it is applicable to POINTER_DIFF_EXPR, where previously the\nnegation of a pointer didn't/doesn't make sense.\n\nA more convincing example, where a transformation missed by .032t.cpp\nisn't caught a few passes later by .038t.evrp, is the expression\n(7 - (x&5)) & 2, which (in the new test case) currently survives the\ntree-level optimizers but with this patch is now simplified to the\nconstant value 2.\n\n2021-08-17  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* tree-ssa-ccp.c (bit_value_binop) [MINUS_EXPR]: Use same\n\talgorithm as PLUS_EXPR to improve subtraction bit bounds.\n\t[POINTER_DIFF_EXPR]: Treat as synonymous with MINUS_EXPR.\n\ngcc/testsuite/ChangeLog\n\t* gcc.dg/tree-ssa/ssa-ccp-40.c: New test case.", "tree": {"sha": "0dcb079fabc7c687f132b215ae4b97d4faab9729", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dcb079fabc7c687f132b215ae4b97d4faab9729"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/897a15f355632bdc31871554892eca5512b3c370", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/897a15f355632bdc31871554892eca5512b3c370", "html_url": "https://github.com/Rust-GCC/gccrs/commit/897a15f355632bdc31871554892eca5512b3c370", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/897a15f355632bdc31871554892eca5512b3c370/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "408579c9c9b8fee20e1d8114489ce2b93872767c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/408579c9c9b8fee20e1d8114489ce2b93872767c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/408579c9c9b8fee20e1d8114489ce2b93872767c"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "aa7349e15d69e5a1e4b53f32f6baf1988b08883b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ccp-40.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/897a15f355632bdc31871554892eca5512b3c370/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/897a15f355632bdc31871554892eca5512b3c370/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-40.c?ref=897a15f355632bdc31871554892eca5512b3c370", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int foo(int x)\n+{\n+  int p = 7;\n+  int q = p - (x & 5);\n+  return q & 2;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return 2;\" \"optimized\" } } */"}, {"sha": "1a63ae5f10446f2d6ce85be99da3ad2265d9990e", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/897a15f355632bdc31871554892eca5512b3c370/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/897a15f355632bdc31871554892eca5512b3c370/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=897a15f355632bdc31871554892eca5512b3c370", "patch": "@@ -1458,7 +1458,7 @@ bit_value_binop (enum tree_code code, signop sgn, int width,\n \t\t widest_int *val, widest_int *mask,\n \t\t signop r1type_sgn, int r1type_precision,\n \t\t const widest_int &r1val, const widest_int &r1mask,\n-\t\t signop r2type_sgn, int r2type_precision,\n+\t\t signop r2type_sgn, int r2type_precision ATTRIBUTE_UNUSED,\n \t\t const widest_int &r2val, const widest_int &r2mask)\n {\n   bool swap_p = false;\n@@ -1505,7 +1505,7 @@ bit_value_binop (enum tree_code code, signop sgn, int width,\n \t    }\n \t  else\n \t    {\n-\t      if (wi::neg_p (shift))\n+\t      if (wi::neg_p (shift, r2type_sgn))\n \t\t{\n \t\t  shift = -shift;\n \t\t  if (code == RROTATE_EXPR)\n@@ -1542,7 +1542,7 @@ bit_value_binop (enum tree_code code, signop sgn, int width,\n \t    }\n \t  else\n \t    {\n-\t      if (wi::neg_p (shift))\n+\t      if (wi::neg_p (shift, r2type_sgn))\n \t\tbreak;\n \t      if (code == RSHIFT_EXPR)\n \t\t{\n@@ -1582,13 +1582,16 @@ bit_value_binop (enum tree_code code, signop sgn, int width,\n       }\n \n     case MINUS_EXPR:\n+    case POINTER_DIFF_EXPR:\n       {\n-\twidest_int temv, temm;\n-\tbit_value_unop (NEGATE_EXPR, r2type_sgn, r2type_precision, &temv, &temm,\n-\t\t\t  r2type_sgn, r2type_precision, r2val, r2mask);\n-\tbit_value_binop (PLUS_EXPR, sgn, width, val, mask,\n-\t\t\t r1type_sgn, r1type_precision, r1val, r1mask,\n-\t\t\t r2type_sgn, r2type_precision, temv, temm);\n+\t/* Subtraction is derived from the addition algorithm above.  */\n+\twidest_int lo = wi::bit_and_not (r1val, r1mask) - (r2val | r2mask);\n+\tlo = wi::ext (lo, width, sgn);\n+\twidest_int hi = (r1val | r1mask) - wi::bit_and_not (r2val, r2mask);\n+\thi = wi::ext (hi, width, sgn);\n+\t*mask = r1mask | r2mask | (lo ^ hi);\n+\t*mask = wi::ext (*mask, width, sgn);\n+\t*val = lo;\n \tbreak;\n       }\n "}]}