{"sha": "14b52538d249750e4d4e5c7daa2186aeb7052576", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRiNTI1MzhkMjQ5NzUwZTRkNGU1YzdkYWEyMTg2YWViNzA1MjU3Ng==", "commit": {"author": {"name": "Changpeng Fang", "email": "changpeng.fang@amd.com", "date": "2011-01-06T22:59:46Z"}, "committer": {"name": "Changpeng Fang", "email": "cfang@gcc.gnu.org", "date": "2011-01-06T22:59:46Z"}, "message": "Bobcat (btver1) Enablement\n\n\t* config.gcc (i[34567]86-*-linux* | ...): Add btver1.\n\t  (case ${target}): Add btver1.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Let\n\t  -march=native recognize btver1 processors.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Add\n\t  btver1 def_and_undef\n\t* config/i386/i386.c (struct processor_costs btver1_cost): New\n\t  btver1 cost table.\n\t  (m_BTVER1): New definition.\n\t  ( m_AMD_MULTIPLE): Includes m_BTVER1.\n\t  (initial_ix86_tune_features): Add btver1 tune.\n\t  (processor_target_table): Add btver1 entry.\n\t  (static const char *const cpu_names): Add btver1 entry.\n\t  (software_prefetching_beneficial_p): Add btver1.\n\t  (ix86_option_override_internal): Add btver1 instruction sets.\n\t  (ix86_issue_rate): Add btver1.\n\t  (ix86_adjust_cost): Add btver1.\n\t* config/i386/i386.h (TARGET_BTVER1): New definition.\n\t  (enum target_cpu_default): Add TARGET_CPU_DEFAULT_btver1.\n\t  (enum processor_type): Add PROCESSOR_BTVER1.\n\t* config/i386/i386.md (define_attr \"cpu\"): Add btver1.\n\nFrom-SVN: r168556", "tree": {"sha": "1a7ae91da0f42623fb6bc7b802a3ac26c50ff046", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a7ae91da0f42623fb6bc7b802a3ac26c50ff046"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14b52538d249750e4d4e5c7daa2186aeb7052576", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14b52538d249750e4d4e5c7daa2186aeb7052576", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14b52538d249750e4d4e5c7daa2186aeb7052576", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14b52538d249750e4d4e5c7daa2186aeb7052576/comments", "author": {"login": "changpeng", "id": 4239661, "node_id": "MDQ6VXNlcjQyMzk2NjE=", "avatar_url": "https://avatars.githubusercontent.com/u/4239661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/changpeng", "html_url": "https://github.com/changpeng", "followers_url": "https://api.github.com/users/changpeng/followers", "following_url": "https://api.github.com/users/changpeng/following{/other_user}", "gists_url": "https://api.github.com/users/changpeng/gists{/gist_id}", "starred_url": "https://api.github.com/users/changpeng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/changpeng/subscriptions", "organizations_url": "https://api.github.com/users/changpeng/orgs", "repos_url": "https://api.github.com/users/changpeng/repos", "events_url": "https://api.github.com/users/changpeng/events{/privacy}", "received_events_url": "https://api.github.com/users/changpeng/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a6098a28279ebd6bdc329bfb1d1cf163c2ad2cc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6098a28279ebd6bdc329bfb1d1cf163c2ad2cc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6098a28279ebd6bdc329bfb1d1cf163c2ad2cc0"}], "stats": {"total": 169, "additions": 154, "deletions": 15}, "files": [{"sha": "9661e71854048557fce1b9192f009ea9cda1e314", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b52538d249750e4d4e5c7daa2186aeb7052576/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b52538d249750e4d4e5c7daa2186aeb7052576/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14b52538d249750e4d4e5c7daa2186aeb7052576", "patch": "@@ -1,3 +1,28 @@\n+2011-01-06  Changpeng Fang <changpeng.fang@amd.com>\n+\n+\tBobcat (btver1) Enablement\n+\t* config.gcc (i[34567]86-*-linux* | ...): Add btver1.\n+\t  (case ${target}): Add btver1.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Let\n+\t  -march=native recognize btver1 processors.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Add\n+\t  btver1 def_and_undef\n+\t* config/i386/i386.c (struct processor_costs btver1_cost): New\n+\t  btver1 cost table.\n+\t  (m_BTVER1): New definition.\n+\t  ( m_AMD_MULTIPLE): Includes m_BTVER1.\n+\t  (initial_ix86_tune_features): Add btver1 tune.\n+\t  (processor_target_table): Add btver1 entry.\n+\t  (static const char *const cpu_names): Add btver1 entry.\n+\t  (software_prefetching_beneficial_p): Add btver1.\n+\t  (ix86_option_override_internal): Add btver1 instruction sets.\n+\t  (ix86_issue_rate): Add btver1.\n+\t  (ix86_adjust_cost): Add btver1.\n+\t* config/i386/i386.h (TARGET_BTVER1): New definition.\n+\t  (enum target_cpu_default): Add TARGET_CPU_DEFAULT_btver1.\n+\t  (enum processor_type): Add PROCESSOR_BTVER1.\n+\t* config/i386/i386.md (define_attr \"cpu\"): Add btver1.\n+\n 2011-01-06  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR target/43309"}, {"sha": "198016ecc476ac77fddba8110d190195fb08bbe8", "filename": "gcc/config.gcc", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b52538d249750e4d4e5c7daa2186aeb7052576/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b52538d249750e4d4e5c7daa2186aeb7052576/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=14b52538d249750e4d4e5c7daa2186aeb7052576", "patch": "@@ -1237,7 +1237,7 @@ i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu | i\n \t\t\tneed_64bit_hwint=yes\n \t\t\tneed_64bit_isa=yes\n \t\t\tcase X\"${with_cpu}\" in\n-\t\t\tXgeneric|Xatom|Xcore2|Xcorei7|Xcorei7-avx|Xnocona|Xx86-64|Xbdver1|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx|Xathlon64-sse3|Xk8-sse3|Xopteron-sse3)\n+\t\t\tXgeneric|Xatom|Xcore2|Xcorei7|Xcorei7-avx|Xnocona|Xx86-64|Xbdver1|Xbtver1|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx|Xathlon64-sse3|Xk8-sse3|Xopteron-sse3)\n \t\t\t\t;;\n \t\t\tX)\n \t\t\t\tif test x$with_cpu_64 = x; then\n@@ -1246,7 +1246,7 @@ i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu | i\n \t\t\t\t;;\n \t\t\t*)\n \t\t\t\techo \"Unsupported CPU used in --with-cpu=$with_cpu, supported values:\" 1>&2\n-\t\t\t\techo \"generic atom core2 corei7 corei7-avx nocona x86-64 bdver1 amdfam10 barcelona k8 opteron athlon64 athlon-fx athlon64-sse3 k8-sse3 opteron-sse3\" 1>&2\n+\t\t\t\techo \"generic atom core2 corei7 corei7-avx nocona x86-64 bdver1 btver1 amdfam10 barcelona k8 opteron athlon64 athlon-fx athlon64-sse3 k8-sse3 opteron-sse3\" 1>&2\n \t\t\t\texit 1\n \t\t\t\t;;\n \t\t\tesac\n@@ -1375,7 +1375,7 @@ i[34567]86-*-solaris2*)\n \t\tneed_64bit_isa=yes\n \t\tuse_gcc_stdint=wrap\n \t\tcase X\"${with_cpu}\" in\n-\t\tXgeneric|Xatom|Xcore2|Xcorei7|Xcorei7-avx|Xnocona|Xx86-64|Xbdver1|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx|Xathlon64-sse3|Xk8-sse3|Xopteron-sse3)\n+\t\tXgeneric|Xatom|Xcore2|Xcorei7|Xcorei7-avx|Xnocona|Xx86-64|Xbdver1|Xbtver1|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx|Xathlon64-sse3|Xk8-sse3|Xopteron-sse3)\n \t\t\t;;\n \t\tX)\n \t\t\tif test x$with_cpu_64 = x; then\n@@ -1384,7 +1384,7 @@ i[34567]86-*-solaris2*)\n \t\t\t;;\n \t\t*)\n \t\t\techo \"Unsupported CPU used in --with-cpu=$with_cpu, supported values:\" 1>&2\n-\t\t\techo \"generic atom core2 corei7 corei7-avx nocona x86-64 bdver1 amdfam10 barcelona k8 opteron athlon64 athlon-fx athlon64-sse3 k8-sse3 opteron-sse3\" 1>&2\n+\t\t\techo \"generic atom core2 corei7 corei7-avx nocona x86-64 bdver1 btver1 amdfam10 barcelona k8 opteron athlon64 athlon-fx athlon64-sse3 k8-sse3 opteron-sse3\" 1>&2\n \t\t\texit 1\n \t\t\t;;\n \t\tesac\n@@ -1455,7 +1455,7 @@ i[34567]86-*-mingw* | x86_64-*-mingw*)\n \t\t\tif test x$enable_targets = xall; then\n \t\t\t\ttm_defines=\"${tm_defines} TARGET_BI_ARCH=1\"\n \t\t\t\tcase X\"${with_cpu}\" in\n-\t\t\t\tXgeneric|Xatom|Xcore2|Xcorei7|Xcorei7-avx|Xnocona|Xx86-64|Xbdver1|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx|Xathlon64-sse3|Xk8-sse3|Xopteron-sse3)\n+\t\t\t\tXgeneric|Xatom|Xcore2|Xcorei7|Xcorei7-avx|Xnocona|Xx86-64|Xbdver1|Xbtver1|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx|Xathlon64-sse3|Xk8-sse3|Xopteron-sse3)\n \t\t\t\t\t;;\n \t\t\t\tX)\n \t\t\t\t\tif test x$with_cpu_64 = x; then\n@@ -1464,7 +1464,7 @@ i[34567]86-*-mingw* | x86_64-*-mingw*)\n \t\t\t\t\t;;\n \t\t\t\t*)\n \t\t\t\t\techo \"Unsupported CPU used in --with-cpu=$with_cpu, supported values:\" 1>&2\n-\t\t\t\t\techo \"generic atom core2 corei7 Xcorei7-avx nocona x86-64 bdver1 amdfam10 barcelona k8 opteron athlon64 athlon-fx athlon64-sse3 k8-sse3 opteron-sse3\" 1>&2\n+\t\t\t\t\techo \"generic atom core2 corei7 Xcorei7-avx nocona x86-64 bdver1 btver1 amdfam10 barcelona k8 opteron athlon64 athlon-fx athlon64-sse3 k8-sse3 opteron-sse3\" 1>&2\n \t\t\t\t\texit 1\n \t\t\t\t\t;;\n \t\t\t\tesac\n@@ -2798,6 +2798,10 @@ case ${target} in\n \tarch=bdver1\n \tcpu=bdver1\n \t;;\n+      btver1-*)\n+\tarch=btver1\n+\tcpu=btver1\n+\t;;\n       amdfam10-*|barcelona-*)\n \tarch=amdfam10\n \tcpu=amdfam10\n@@ -2887,6 +2891,10 @@ case ${target} in\n \tarch=bdver1\n \tcpu=bdver1\n \t;;\n+      btver1-*)\n+\tarch=btver1\n+\tcpu=btver1\n+\t;;\n       amdfam10-*|barcelona-*)\n \tarch=amdfam10\n \tcpu=amdfam10\n@@ -3303,7 +3311,7 @@ case \"${target}\" in\n \t\t\t\t;;\n \t\t\t\"\" | x86-64 | generic | native \\\n \t\t\t| k8 | k8-sse3 | athlon64 | athlon64-sse3 | opteron \\\n-\t\t\t| opteron-sse3 | athlon-fx | bdver1 | amdfam10 \\\n+\t\t\t| opteron-sse3 | athlon-fx | bdver1 | btver1 | amdfam10 \\\n \t\t\t| barcelona | nocona | core2 | corei7 | corei7-avx | atom)\n \t\t\t\t# OK\n \t\t\t\t;;"}, {"sha": "35962c802fe2fa302134d245e7d2fb707572d114", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b52538d249750e4d4e5c7daa2186aeb7052576/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b52538d249750e4d4e5c7daa2186aeb7052576/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=14b52538d249750e4d4e5c7daa2186aeb7052576", "patch": "@@ -500,6 +500,8 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \tprocessor = PROCESSOR_GEODE;\n       else if (has_xop)\n \tprocessor = PROCESSOR_BDVER1;\n+      else if (has_sse4a && has_ssse3)\n+        processor = PROCESSOR_BTVER1;\n       else if (has_sse4a)\n \tprocessor = PROCESSOR_AMDFAM10;\n       else if (has_sse2 || has_longmode)\n@@ -647,6 +649,9 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n     case PROCESSOR_BDVER1:\n       cpu = \"bdver1\";\n       break;\n+    case PROCESSOR_BTVER1:\n+      cpu = \"btver1\";\n+      break;\n \n     default:\n       /* Use something reasonable.  */"}, {"sha": "149735133340a5a1e6c98700a61ba849e9fabafb", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b52538d249750e4d4e5c7daa2186aeb7052576/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b52538d249750e4d4e5c7daa2186aeb7052576/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=14b52538d249750e4d4e5c7daa2186aeb7052576", "patch": "@@ -110,6 +110,10 @@ ix86_target_macros_internal (int isa_flag,\n       def_or_undef (parse_in, \"__bdver1\");\n       def_or_undef (parse_in, \"__bdver1__\");\n       break;\n+    case PROCESSOR_BTVER1:\n+      def_or_undef (parse_in, \"__btver1\");\n+      def_or_undef (parse_in, \"__btver1__\");\n+      break;\n     case PROCESSOR_PENTIUM4:\n       def_or_undef (parse_in, \"__pentium4\");\n       def_or_undef (parse_in, \"__pentium4__\");\n@@ -194,6 +198,9 @@ ix86_target_macros_internal (int isa_flag,\n     case PROCESSOR_BDVER1:\n       def_or_undef (parse_in, \"__tune_bdver1__\");\n       break;\n+   case PROCESSOR_BTVER1:\n+      def_or_undef (parse_in, \"__tune_btver1__\");\n+      break;\n     case PROCESSOR_PENTIUM4:\n       def_or_undef (parse_in, \"__tune_pentium4__\");\n       break;"}, {"sha": "cf12881abf9832c1a10a04b18701fd8a6811a4a6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 98, "deletions": 7, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b52538d249750e4d4e5c7daa2186aeb7052576/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b52538d249750e4d4e5c7daa2186aeb7052576/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=14b52538d249750e4d4e5c7daa2186aeb7052576", "patch": "@@ -1231,6 +1231,88 @@ struct processor_costs bdver1_cost = {\n   1,\t\t\t\t\t/* cond_not_taken_branch_cost.  */\n };\n \n+struct processor_costs btver1_cost = {\n+  COSTS_N_INSNS (1),\t\t\t/* cost of an add instruction */\n+  COSTS_N_INSNS (2),\t\t\t/* cost of a lea instruction */\n+  COSTS_N_INSNS (1),\t\t\t/* variable shift costs */\n+  COSTS_N_INSNS (1),\t\t\t/* constant shift costs */\n+  {COSTS_N_INSNS (3),\t\t\t/* cost of starting multiply for QI */\n+   COSTS_N_INSNS (4),\t\t\t/*\t\t\t\t HI */\n+   COSTS_N_INSNS (3),\t\t\t/*\t\t\t\t SI */\n+   COSTS_N_INSNS (4),\t\t\t/*\t\t\t\t DI */\n+   COSTS_N_INSNS (5)},\t\t\t/*\t\t\t      other */\n+  0,\t\t\t\t\t/* cost of multiply per each bit set */\n+  {COSTS_N_INSNS (19),\t\t\t/* cost of a divide/mod for QI */\n+   COSTS_N_INSNS (35),\t\t\t/*\t\t\t    HI */\n+   COSTS_N_INSNS (51),\t\t\t/*\t\t\t    SI */\n+   COSTS_N_INSNS (83),\t\t\t/*\t\t\t    DI */\n+   COSTS_N_INSNS (83)},\t\t\t/*\t\t\t    other */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movsx */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movzx */\n+  8,\t\t\t\t\t/* \"large\" insn */\n+  9,\t\t\t\t\t/* MOVE_RATIO */\n+  4,\t\t\t\t     /* cost for loading QImode using movzbl */\n+  {3, 4, 3},\t\t\t\t/* cost of loading integer registers\n+\t\t\t\t\t   in QImode, HImode and SImode.\n+\t\t\t\t\t   Relative to reg-reg move (2).  */\n+  {3, 4, 3},\t\t\t\t/* cost of storing integer registers */\n+  4,\t\t\t\t\t/* cost of reg,reg fld/fst */\n+  {4, 4, 12},\t\t\t\t/* cost of loading fp registers\n+\t\t\t\t\t   in SFmode, DFmode and XFmode */\n+  {6, 6, 8},\t\t\t\t/* cost of storing fp registers\n+\t\t\t\t\t   in SFmode, DFmode and XFmode */\n+  2,\t\t\t\t\t/* cost of moving MMX register */\n+  {3, 3},\t\t\t\t/* cost of loading MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  {4, 4},\t\t\t\t/* cost of storing MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  2,\t\t\t\t\t/* cost of moving SSE register */\n+  {4, 4, 3},\t\t\t\t/* cost of loading SSE registers\n+\t\t\t\t\t   in SImode, DImode and TImode */\n+  {4, 4, 5},\t\t\t\t/* cost of storing SSE registers\n+\t\t\t\t\t   in SImode, DImode and TImode */\n+  3,\t\t\t\t\t/* MMX or SSE register to integer */\n+\t\t\t\t\t/* On K8:\n+\t\t\t\t\t   MOVD reg64, xmmreg Double FSTORE 4\n+\t\t\t\t\t   MOVD reg32, xmmreg Double FSTORE 4\n+\t\t\t\t\t   On AMDFAM10:\n+\t\t\t\t\t   MOVD reg64, xmmreg Double FADD 3\n+\t\t\t\t\t\t\t       1/1  1/1\n+\t\t\t\t\t    MOVD reg32, xmmreg Double FADD 3\n+\t\t\t\t\t\t\t       1/1  1/1 */\n+  32,\t\t\t\t\t/* size of l1 cache.  */\n+  512,\t\t\t\t\t/* size of l2 cache.  */\n+  64,\t\t\t\t\t/* size of prefetch block */\n+  100,\t\t\t\t\t/* number of parallel prefetches */\n+  2,\t\t\t\t\t/* Branch cost */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of FADD and FSUB insns.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of FMUL instruction.  */\n+  COSTS_N_INSNS (19),\t\t\t/* cost of FDIV instruction.  */\n+  COSTS_N_INSNS (2),\t\t\t/* cost of FABS instruction.  */\n+  COSTS_N_INSNS (2),\t\t\t/* cost of FCHS instruction.  */\n+  COSTS_N_INSNS (35),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  /* BTVER1 has optimized REP instruction for medium sized blocks, but for\n+     very small blocks it is better to use loop. For large blocks, libcall can\n+     do nontemporary accesses and beat inline considerably.  */\n+  {{libcall, {{6, loop}, {14, unrolled_loop}, {-1, rep_prefix_4_byte}}},\n+   {libcall, {{16, loop}, {8192, rep_prefix_8_byte}, {-1, libcall}}}},\n+  {{libcall, {{8, loop}, {24, unrolled_loop},\n+\t      {2048, rep_prefix_4_byte}, {-1, libcall}}},\n+   {libcall, {{48, unrolled_loop}, {8192, rep_prefix_8_byte}, {-1, libcall}}}},\n+  4,\t\t\t\t\t/* scalar_stmt_cost.  */\n+  2,\t\t\t\t\t/* scalar load_cost.  */\n+  2,\t\t\t\t\t/* scalar_store_cost.  */\n+  6,\t\t\t\t\t/* vec_stmt_cost.  */\n+  0,\t\t\t\t\t/* vec_to_scalar_cost.  */\n+  2,\t\t\t\t\t/* scalar_to_vec_cost.  */\n+  2,\t\t\t\t\t/* vec_align_load_cost.  */\n+  2,\t\t\t\t\t/* vec_unalign_load_cost.  */\n+  2,\t\t\t\t\t/* vec_store_cost.  */\n+  2,\t\t\t\t\t/* cond_taken_branch_cost.  */\n+  1,\t\t\t\t\t/* cond_not_taken_branch_cost.  */\n+};\n+\n static const\n struct processor_costs pentium4_cost = {\n   COSTS_N_INSNS (1),\t\t\t/* cost of an add instruction */\n@@ -1624,7 +1706,8 @@ const struct processor_costs *ix86_cost = &pentium_cost;\n #define m_ATHLON_K8  (m_K8 | m_ATHLON)\n #define m_AMDFAM10  (1<<PROCESSOR_AMDFAM10)\n #define m_BDVER1  (1<<PROCESSOR_BDVER1)\n-#define m_AMD_MULTIPLE  (m_K8 | m_ATHLON | m_AMDFAM10 | m_BDVER1)\n+#define m_BTVER1  (1<<PROCESSOR_BTVER1)\n+#define m_AMD_MULTIPLE  (m_K8 | m_ATHLON | m_AMDFAM10 | m_BDVER1 | m_BTVER1)\n \n #define m_GENERIC32 (1<<PROCESSOR_GENERIC32)\n #define m_GENERIC64 (1<<PROCESSOR_GENERIC64)\n@@ -1670,8 +1753,8 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   ~m_386,\n \n   /* X86_TUNE_USE_SAHF */\n-  m_ATOM | m_PPRO | m_K6_GEODE | m_K8 | m_AMDFAM10 | m_BDVER1 | m_PENT4\n-  | m_NOCONA | m_CORE2I7 | m_GENERIC,\n+  m_ATOM | m_PPRO | m_K6_GEODE | m_K8 | m_AMDFAM10 | m_BDVER1 | m_BTVER1\n+  | m_PENT4 | m_NOCONA | m_CORE2I7 | m_GENERIC,\n \n   /* X86_TUNE_MOVX: Enable to zero extend integer registers to avoid\n      partial dependencies.  */\n@@ -1777,7 +1860,7 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   | m_AMDFAM10 | m_BDVER1,\n \n   /* X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL */\n-  m_AMDFAM10 | m_BDVER1 | m_COREI7,\n+  m_AMDFAM10 | m_BDVER1 | m_BTVER1 | m_COREI7,\n \n   /* X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL */\n   m_BDVER1 | m_COREI7,\n@@ -1855,11 +1938,11 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n \n   /* X86_TUNE_SLOW_IMUL_IMM32_MEM: Imul of 32-bit constant and memory is\n      vector path on AMD machines.  */\n-  m_K8 | m_CORE2I7_64 | m_GENERIC64 | m_AMDFAM10 | m_BDVER1,\n+  m_K8 | m_CORE2I7_64 | m_GENERIC64 | m_AMDFAM10 | m_BDVER1 | m_BTVER1,\n \n   /* X86_TUNE_SLOW_IMUL_IMM8: Imul of 8-bit constant is vector path on AMD\n      machines.  */\n-  m_K8 | m_CORE2I7_64 | m_GENERIC64 | m_AMDFAM10 | m_BDVER1,\n+  m_K8 | m_CORE2I7_64 | m_GENERIC64 | m_AMDFAM10 | m_BDVER1 | m_BTVER1,\n \n   /* X86_TUNE_MOVE_M1_VIA_OR: On pentiums, it is faster to load -1 via OR\n      than a MOV.  */\n@@ -2451,6 +2534,7 @@ static const struct ptt processor_target_table[PROCESSOR_max] =\n   {&generic64_cost, 16, 10, 16, 10, 16},\n   {&amdfam10_cost, 32, 24, 32, 7, 32},\n   {&bdver1_cost, 32, 24, 32, 7, 32},\n+  {&btver1_cost, 32, 24, 32, 7, 32},\n   {&atom_cost, 16, 7, 16, 7, 16}\n };\n \n@@ -2479,7 +2563,8 @@ static const char *const cpu_names[TARGET_CPU_DEFAULT_max] =\n   \"athlon-4\",\n   \"k8\",\n   \"amdfam10\",\n-  \"bdver1\"\n+  \"bdver1\",\n+  \"btver1\"\n };\n \f\n /* Return true if a red-zone is in use.  */\n@@ -3075,6 +3160,7 @@ software_prefetching_beneficial_p (void)\n     case PROCESSOR_ATHLON:\n     case PROCESSOR_K8:\n     case PROCESSOR_AMDFAM10:\n+    case PROCESSOR_BTVER1:\n       return true;\n \n     default:\n@@ -3260,6 +3346,9 @@ ix86_option_override_internal (bool main_args_p)\n \t| PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n \t| PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX | PTA_FMA4\n \t| PTA_XOP | PTA_LWP},\n+      {\"btver1\", PROCESSOR_BTVER1, CPU_GENERIC64,\n+        PTA_64BIT | PTA_MMX |  PTA_SSE  | PTA_SSE2 | PTA_SSE3\n+        | PTA_SSSE3 | PTA_SSE4A |PTA_ABM | PTA_CX16},\n       {\"generic32\", PROCESSOR_GENERIC32, CPU_PENTIUMPRO,\n \t0 /* flags are only used for -march switch.  */ },\n       {\"generic64\", PROCESSOR_GENERIC64, CPU_GENERIC64,\n@@ -22177,6 +22266,7 @@ ix86_issue_rate (void)\n     case PROCESSOR_GENERIC32:\n     case PROCESSOR_GENERIC64:\n     case PROCESSOR_BDVER1:\n+    case PROCESSOR_BTVER1:\n       return 3;\n \n     default:\n@@ -22364,6 +22454,7 @@ ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n     case PROCESSOR_K8:\n     case PROCESSOR_AMDFAM10:\n     case PROCESSOR_BDVER1:\n+    case PROCESSOR_BTVER1:\n     case PROCESSOR_ATOM:\n     case PROCESSOR_GENERIC32:\n     case PROCESSOR_GENERIC64:"}, {"sha": "0a948cc06aad759093237a28f18b7d4182e6cb6c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b52538d249750e4d4e5c7daa2186aeb7052576/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b52538d249750e4d4e5c7daa2186aeb7052576/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=14b52538d249750e4d4e5c7daa2186aeb7052576", "patch": "@@ -251,6 +251,7 @@ extern const struct processor_costs ix86_size_cost;\n #define TARGET_GENERIC (TARGET_GENERIC32 || TARGET_GENERIC64)\n #define TARGET_AMDFAM10 (ix86_tune == PROCESSOR_AMDFAM10)\n #define TARGET_BDVER1 (ix86_tune == PROCESSOR_BDVER1)\n+#define TARGET_BTVER1 (ix86_tune == PROCESSOR_BTVER1)\n #define TARGET_ATOM (ix86_tune == PROCESSOR_ATOM)\n \n /* Feature tests against the various tunings.  */\n@@ -600,6 +601,7 @@ enum target_cpu_default\n   TARGET_CPU_DEFAULT_k8,\n   TARGET_CPU_DEFAULT_amdfam10,\n   TARGET_CPU_DEFAULT_bdver1,\n+  TARGET_CPU_DEFAULT_btver1,\n \n   TARGET_CPU_DEFAULT_max\n };\n@@ -2060,6 +2062,7 @@ enum processor_type\n   PROCESSOR_GENERIC64,\n   PROCESSOR_AMDFAM10,\n   PROCESSOR_BDVER1,\n+  PROCESSOR_BTVER1,\n   PROCESSOR_ATOM,\n   PROCESSOR_max\n };"}, {"sha": "1f14f5ce4d778654724966ede035db178a641faa", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b52538d249750e4d4e5c7daa2186aeb7052576/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b52538d249750e4d4e5c7daa2186aeb7052576/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=14b52538d249750e4d4e5c7daa2186aeb7052576", "patch": "@@ -360,7 +360,7 @@\n \f\n ;; Processor type.\n (define_attr \"cpu\" \"none,pentium,pentiumpro,geode,k6,athlon,k8,core2,corei7,\n-\t\t    atom,generic64,amdfam10,bdver1\"\n+\t\t    atom,generic64,amdfam10,bdver1,btver1\"\n   (const (symbol_ref \"ix86_schedule\")))\n \n ;; A basic instruction type.  Refinements due to arguments to be"}]}