{"sha": "7482c47076c6396485beb2b7953a773faca4b20c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ4MmM0NzA3NmM2Mzk2NDg1YmViMmI3OTUzYTc3M2ZhY2E0YjIwYw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2013-03-25T18:09:36Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-03-25T18:09:36Z"}, "message": "i386.md (*zero_extendsidi2): Merge with *zero_extendsidi2_rex64.\n\n\t* config/i386/i386.md (*zero_extendsidi2): Merge with\n\t*zero_extendsidi2_rex64.  Use x64 and nox64 isa attributes.\n\t* config/i386/predicates.md (x86_64_zext_operand): Rename from\n\tx86_64_zext_general_operand.  Use nonimmediate_operand on 32bit\n\ttargets.  Clarify comment.\n\nFrom-SVN: r197056", "tree": {"sha": "43172be3d73d49f5a17b093390d36ec0d9bdab3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43172be3d73d49f5a17b093390d36ec0d9bdab3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7482c47076c6396485beb2b7953a773faca4b20c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7482c47076c6396485beb2b7953a773faca4b20c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7482c47076c6396485beb2b7953a773faca4b20c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7482c47076c6396485beb2b7953a773faca4b20c/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a53743eda72f3cf49c3aadb2ac8fd5b3f105c37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a53743eda72f3cf49c3aadb2ac8fd5b3f105c37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a53743eda72f3cf49c3aadb2ac8fd5b3f105c37"}], "stats": {"total": 84, "additions": 51, "deletions": 33}, "files": [{"sha": "9bdf1e5356c17a89db18af97e101a08dfb9f0356", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7482c47076c6396485beb2b7953a773faca4b20c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7482c47076c6396485beb2b7953a773faca4b20c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7482c47076c6396485beb2b7953a773faca4b20c", "patch": "@@ -1,3 +1,11 @@\n+2013-03-25  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*zero_extendsidi2): Merge with\n+\t*zero_extendsidi2_rex64.  Use x64 and nox64 isa attributes.\n+\t* config/i386/predicates.md (x86_64_zext_operand): Rename from\n+\tx86_64_zext_general_operand.  Use nonimmediate_operand on 32bit\n+\ttargets.  Clarify comment.\n+\n 2013-03-25  Martin Jambor  <mjambor@suse.cz>\n \n \t* ipa-prop.c (ipa_write_jump_function): Stream simple and aritmetic"}, {"sha": "6a95e01c26fd47aab68c17ab9d5fdb1b39d0845d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 38, "deletions": 28, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7482c47076c6396485beb2b7953a773faca4b20c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7482c47076c6396485beb2b7953a773faca4b20c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7482c47076c6396485beb2b7953a773faca4b20c", "patch": "@@ -3135,13 +3135,13 @@\n   [(set (match_operand:DI 0 \"nonimmediate_operand\")\n \t(zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\")))])\n \n-(define_insn \"*zero_extendsidi2_rex64\"\n+(define_insn \"*zero_extendsidi2\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-\t\t\t\"=r  ,o,?*Ym,?*y,?*Yi,?*x\")\n+\t\t\t\"=r,?r,?o,r   ,o,?*Ym,?*y,?*Yi,?*x\")\n \t(zero_extend:DI\n-\t (match_operand:SI 1 \"x86_64_zext_general_operand\"\n-\t        \t\"rmWz,0,r   ,m  ,r   ,m\")))]\n-  \"TARGET_64BIT\"\n+\t (match_operand:SI 1 \"x86_64_zext_operand\"\n+\t        \t\"0 ,rm,r ,rmWz,0,r   ,m  ,r   ,m\")))]\n+  \"\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -3164,29 +3164,39 @@\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"type\" \"imovx,multi,mmxmov,mmxmov,ssemov,ssemov\")\n-   (set_attr \"prefix\" \"orig,*,orig,orig,maybe_vex,maybe_vex\")\n-   (set_attr \"prefix_0f\" \"0,*,*,*,*,*\")\n-   (set_attr \"mode\" \"SI,SI,DI,DI,TI,TI\")])\n-\n-(define_insn \"*zero_extendsidi2\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-\t\t\t\"=ro,?r,?o,?*Ym,?*y,?*Yi,?*x\")\n-\t(zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\"\n-\t\t\t\"0  ,rm,r ,r   ,m  ,r   ,m\")))]\n-  \"!TARGET_64BIT\"\n-  \"@\n-   #\n-   #\n-   #\n-   movd\\t{%1, %0|%0, %1}\n-   movd\\t{%1, %0|%0, %1}\n-   %vmovd\\t{%1, %0|%0, %1}\n-   %vmovd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"isa\" \"*,*,*,*,*,*,sse2\")\n-   (set_attr \"type\" \"multi,multi,multi,mmxmov,mmxmov,ssemov,ssemov\")\n-   (set_attr \"prefix\" \"*,*,*,orig,orig,maybe_vex,maybe_vex\")\n-   (set_attr \"mode\" \"SI,SI,SI,DI,DI,TI,TI\")])\n+  [(set (attr \"isa\")\n+     (cond [(eq_attr \"alternative\" \"0,1,2\")\n+\t      (const_string \"nox64\")\n+\t    (eq_attr \"alternative\" \"3\")\n+\t      (const_string \"x64\")\n+\t    (eq_attr \"alternative\" \"8\")\n+\t      (const_string \"sse2\")\n+\t   ]\n+\t   (const_string \"*\")))\n+   (set (attr \"type\")\n+     (cond [(eq_attr \"alternative\" \"0,1,2,4\")\n+\t      (const_string \"multi\")\n+\t    (eq_attr \"alternative\" \"5,6\")\n+\t      (const_string \"mmxmov\")\n+\t    (eq_attr \"alternative\" \"7,8\")\n+\t      (const_string \"ssemov\")\n+\t   ]\n+\t   (const_string \"imovx\")))\n+   (set (attr \"prefix\")\n+     (if_then_else (eq_attr \"type\" \"ssemov\")\n+       (const_string \"maybe_vex\")\n+       (const_string \"orig\")))\n+   (set (attr \"prefix_0f\")\n+     (if_then_else (eq_attr \"type\" \"imovx\")\n+       (const_string \"0\")\n+       (const_string \"*\")))\n+   (set (attr \"mode\")\n+     (cond [(eq_attr \"alternative\" \"5,6\")\n+\t      (const_string \"DI\")\n+\t    (eq_attr \"alternative\" \"7,8\")\n+\t      (const_string \"TI\")\n+\t   ]\n+\t   (const_string \"SI\")))])\n \n (define_split\n   [(set (match_operand:DI 0 \"memory_operand\")"}, {"sha": "b3b07db41cbdf476e5df01732a36a0c3f704d719", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7482c47076c6396485beb2b7953a773faca4b20c/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7482c47076c6396485beb2b7953a773faca4b20c/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=7482c47076c6396485beb2b7953a773faca4b20c", "patch": "@@ -311,15 +311,15 @@\n \t (match_operand 0 \"x86_64_immediate_operand\"))\n     (match_operand 0 \"general_operand\")))\n \n-;; Return true if OP is general operand representable on x86_64\n-;; as zero extended constant.  This predicate is used in zero-extending\n-;; conversion operations that require non-VOIDmode immediate operands.\n-(define_predicate \"x86_64_zext_general_operand\"\n+;; Return true if OP is representable on x86_64 as zero-extended operand.\n+;; This predicate is used in zero-extending conversion operations that\n+;; require non-VOIDmode immediate operands.\n+(define_predicate \"x86_64_zext_operand\"\n   (if_then_else (match_test \"TARGET_64BIT\")\n     (ior (match_operand 0 \"nonimmediate_operand\")\n \t (and (match_operand 0 \"x86_64_zext_immediate_operand\")\n \t      (match_test \"GET_MODE (op) != VOIDmode\")))\n-    (match_operand 0 \"general_operand\")))\n+    (match_operand 0 \"nonimmediate_operand\")))\n \n ;; Return true if OP is general operand representable on x86_64\n ;; as either sign extended or zero extended constant."}]}