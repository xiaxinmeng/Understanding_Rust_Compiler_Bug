{"sha": "b44e7f07c5a8b8dfe7549583d3504f1a39208b03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ0ZTdmMDdjNWE4YjhkZmU3NTQ5NTgzZDM1MDRmMWEzOTIwOGIwMw==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2007-02-09T13:29:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-02-09T13:29:11Z"}, "message": "re PR tree-optimization/23361 (Can't eliminate empty loops with power of two step and variable bounds)\n\n2007-02-09  Zdenek Dvorak  <dvorakz@suse.cz>\n\tRichard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/23361\n\t* fold-const.c (fold_comparison): Handle obfuscated comparisons\n\tagainst INT_MIN/INT_MAX.\n\t* tree-ssa-loop-ivcanon.c (remove_empty_loop): Print to dump\n\tfile if a loop is removed.\n\n\t* gcc.dg/fold-compare-3.c: New testcase.\n\t* gcc.dg/tree-ssa/loop-24.c: Likewise.\n\nCo-Authored-By: Richard Guenther <rguenther@suse.de>\n\nFrom-SVN: r121742", "tree": {"sha": "a7c503e98956c6e5d624c17e6ed753cc613964aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7c503e98956c6e5d624c17e6ed753cc613964aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b44e7f07c5a8b8dfe7549583d3504f1a39208b03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b44e7f07c5a8b8dfe7549583d3504f1a39208b03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b44e7f07c5a8b8dfe7549583d3504f1a39208b03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b44e7f07c5a8b8dfe7549583d3504f1a39208b03/comments", "author": null, "committer": null, "parents": [{"sha": "917fbceb1b9687c2871b1ca1074389287339d06a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/917fbceb1b9687c2871b1ca1074389287339d06a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/917fbceb1b9687c2871b1ca1074389287339d06a"}], "stats": {"total": 229, "additions": 229, "deletions": 0}, "files": [{"sha": "cd1f1960c9ed905f84d89e7fcf70b7f1f20cf0f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44e7f07c5a8b8dfe7549583d3504f1a39208b03/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44e7f07c5a8b8dfe7549583d3504f1a39208b03/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b44e7f07c5a8b8dfe7549583d3504f1a39208b03", "patch": "@@ -1,3 +1,12 @@\n+2007-02-09  Zdenek Dvorak  <dvorakz@suse.cz>\n+\tRichard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/23361\n+\t* fold-const.c (fold_comparison): Handle obfuscated comparisons\n+\tagainst INT_MIN/INT_MAX.\n+\t* tree-ssa-loop-ivcanon.c (remove_empty_loop): Print to dump\n+\tfile if a loop is removed.\n+\n 2007-02-09  Joseph Myers  <joseph@codesourcery.com>\n \n \t* calls.c (store_one_arg): Pass correct alignment to"}, {"sha": "d20d78f5956ec5ef84943e99c2c405eb70cb96dd", "filename": "gcc/fold-const.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44e7f07c5a8b8dfe7549583d3504f1a39208b03/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44e7f07c5a8b8dfe7549583d3504f1a39208b03/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=b44e7f07c5a8b8dfe7549583d3504f1a39208b03", "patch": "@@ -8043,6 +8043,40 @@ fold_comparison (enum tree_code code, tree type, tree op0, tree op1)\n \n       lhs = fold_build2 (lhs_add ? PLUS_EXPR : MINUS_EXPR,\n \t\t\t TREE_TYPE (arg1), const2, const1);\n+\n+      /* If the constant operation overflowed this can be\n+\t simplified as a comparison against INT_MAX/INT_MIN.  */\n+      if (TREE_CODE (lhs) == INTEGER_CST\n+\t  && TREE_OVERFLOW (lhs))\n+\t{\n+\t  int const1_sgn = tree_int_cst_sgn (const1);\n+\t  enum tree_code code2 = code;\n+\n+\t  /* Get the sign of the constant on the lhs if the\n+\t     operation were VARIABLE + CONST1.  */\n+\t  if (TREE_CODE (arg0) == MINUS_EXPR)\n+\t    const1_sgn = -const1_sgn;\n+\n+\t  /* The sign of the constant determines if we overflowed\n+\t     INT_MAX (const1_sgn == -1) or INT_MIN (const1_sgn == 1).\n+\t     Canonicalize to the INT_MIN overflow by swapping the comparison\n+\t     if necessary.  */\n+\t  if (const1_sgn == -1)\n+\t    code2 = swap_tree_comparison (code);\n+\n+\t  /* We now can look at the canonicalized case\n+\t       VARIABLE + 1  CODE2  INT_MIN\n+\t     and decide on the result.  */\n+\t  if (code2 == LT_EXPR\n+\t      || code2 == LE_EXPR\n+\t      || code2 == EQ_EXPR)\n+\t    return omit_one_operand (type, boolean_false_node, variable);\n+\t  else if (code2 == NE_EXPR\n+\t\t   || code2 == GE_EXPR\n+\t\t   || code2 == GT_EXPR)\n+\t    return omit_one_operand (type, boolean_true_node, variable);\n+\t}\n+\n       if (TREE_CODE (lhs) == TREE_CODE (arg1)\n \t  && (TREE_CODE (lhs) != INTEGER_CST\n \t      || !TREE_OVERFLOW (lhs)))"}, {"sha": "8575ad558af69ff28bc63cbadbf655345e9819bd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44e7f07c5a8b8dfe7549583d3504f1a39208b03/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44e7f07c5a8b8dfe7549583d3504f1a39208b03/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b44e7f07c5a8b8dfe7549583d3504f1a39208b03", "patch": "@@ -1,3 +1,10 @@\n+2007-02-09  Zdenek Dvorak  <dvorakz@suse.cz>\n+\tRichard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/23361\n+\t* gcc.dg/fold-compare-3.c: New testcase.\n+\t* gcc.dg/tree-ssa/loop-24.c: Likewise.\n+\n 2007-02-09  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/pr26570.c: Clean up coverage files."}, {"sha": "011bf47bd6e28f43720e6c8cc551a9af1c4392ef", "filename": "gcc/testsuite/gcc.dg/fold-compare-3.c", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44e7f07c5a8b8dfe7549583d3504f1a39208b03/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-compare-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44e7f07c5a8b8dfe7549583d3504f1a39208b03/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-compare-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-compare-3.c?ref=b44e7f07c5a8b8dfe7549583d3504f1a39208b03", "patch": "@@ -0,0 +1,159 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-cleanup_cfg1\" } */\n+\n+#include <limits.h>\n+\n+void this_comparison_is_false (void);\n+void this_comparison_is_true (void);\n+void this_comparison_is_not_decidable (void);\n+\n+void bla1eq (int var)\n+{\n+  if (var + 10 == INT_MIN + 9)\n+    this_comparison_is_false ();\n+}\n+\n+void bla2eq (int var)\n+{\n+  if (var + 10 == INT_MIN + 10)\n+    this_comparison_is_not_decidable ();\n+}\n+\n+void bla3eq (int var)\n+{\n+  if (var - 10 == INT_MAX - 9)\n+    this_comparison_is_false ();\n+}\n+\n+void bla4eq (int var)\n+{\n+  if (var - 10 == INT_MAX - 10)\n+    this_comparison_is_not_decidable ();\n+}\n+\n+void bla1ne (int var)\n+{\n+  if (var + 10 != INT_MIN + 9)\n+    this_comparison_is_true ();\n+}\n+\n+void bla2ne (int var)\n+{\n+  if (var + 10 != INT_MIN + 10)\n+    this_comparison_is_not_decidable ();\n+}\n+\n+void bla3ne (int var)\n+{\n+  if (var - 10 != INT_MAX - 9)\n+    this_comparison_is_true ();\n+}\n+\n+void bla4ne (int var)\n+{\n+  if (var - 10 != INT_MAX - 10)\n+    this_comparison_is_not_decidable ();\n+}\n+\n+void bla1lt (int var)\n+{\n+  if (var + 10 < INT_MIN + 10)\n+    this_comparison_is_false ();\n+}\n+\n+void bla2lt (int var)\n+{\n+  if (var + 10 < INT_MIN + 11)\n+    this_comparison_is_not_decidable ();\n+}\n+\n+void bla3lt (int var)\n+{\n+  if (var - 10 < INT_MAX - 9)\n+    this_comparison_is_true ();\n+}\n+\n+void bla4lt (int var)\n+{\n+  if (var - 10 < INT_MAX - 10)\n+    this_comparison_is_not_decidable ();\n+}\n+\n+void bla1le (int var)\n+{\n+  if (var + 10 <= INT_MIN + 9)\n+    this_comparison_is_false ();\n+}\n+\n+void bla2le (int var)\n+{\n+  if (var + 10 <= INT_MIN + 10)\n+    this_comparison_is_not_decidable ();\n+}\n+\n+void bla3le (int var)\n+{\n+  if (var - 10 <= INT_MAX - 10)\n+    this_comparison_is_true ();\n+}\n+\n+void bla4le (int var)\n+{\n+  if (var - 10 <= INT_MAX - 11)\n+    this_comparison_is_not_decidable ();\n+}\n+\n+void bla1gt (int var)\n+{\n+  if (var + 10 > INT_MIN + 9)\n+    this_comparison_is_true ();\n+}\n+\n+void bla2gt (int var)\n+{\n+  if (var + 10 > INT_MIN + 10)\n+    this_comparison_is_not_decidable ();\n+}\n+\n+void bla3gt (int var)\n+{\n+  if (var - 10 > INT_MAX - 10)\n+    this_comparison_is_false ();\n+}\n+\n+void bla4gt (int var)\n+{\n+  if (var - 10 > INT_MAX - 11)\n+    this_comparison_is_not_decidable ();\n+}\n+\n+void bla1ge (int var)\n+{\n+  if (var + 10 >= INT_MIN + 10)\n+    this_comparison_is_true ();\n+}\n+\n+void bla2ge (int var)\n+{\n+  if (var + 10 >= INT_MIN + 11)\n+    this_comparison_is_not_decidable ();\n+}\n+\n+void bla3ge (int var)\n+{\n+  if (var - 11 >= INT_MAX - 10)\n+    this_comparison_is_false ();\n+}\n+\n+void bla4ge (int var)\n+{\n+  if (var - 10 >= INT_MAX - 10)\n+    this_comparison_is_not_decidable ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"this_comparison_is_false\" 0 \"cleanup_cfg1\" } } */\n+/* { dg-final { scan-tree-dump-times \"this_comparison_is_true\" 6 \"cleanup_cfg1\" } } */\n+/* { dg-final { scan-tree-dump-times \"this_comparison_is_not_decidable\" 12 \"cleanup_cfg1\" } } */\n+/* { dg-final { scan-tree-dump-times \"if \" 12 \"cleanup_cfg1\" } } */\n+\n+/* { dg-final { cleanup-tree-dump \"cleanup_cfg1\" } } */"}, {"sha": "dfad30dcd3d80b368f696bcced136ec5dbb4001a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-24.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44e7f07c5a8b8dfe7549583d3504f1a39208b03/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44e7f07c5a8b8dfe7549583d3504f1a39208b03/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-24.c?ref=b44e7f07c5a8b8dfe7549583d3504f1a39208b03", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fstrict-overflow -fdump-tree-empty\" } */\n+\n+void foo(int a, int b)\n+{ for(;a!=b;a+=4); }\n+\n+void foo2(int a, int b)\n+{ for(;a<b;a+=4); }\n+\n+void foo3(int*a, int* b)\n+{ for(;a<b;a++); }\n+\n+void foo4(int*a, int*b)\n+{ for(;a!=b;a++); }\n+\n+/* { dg-final { scan-tree-dump-times \"Removing empty loop\" 4 \"empty\" } } */\n+/* { dg-final { cleanup-tree-dump \"empty\" } } */"}, {"sha": "80ac15590b3a3cca53d27c1be6d7749171999975", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44e7f07c5a8b8dfe7549583d3504f1a39208b03/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44e7f07c5a8b8dfe7549583d3504f1a39208b03/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=b44e7f07c5a8b8dfe7549583d3504f1a39208b03", "patch": "@@ -480,6 +480,9 @@ remove_empty_loop (struct loop *loop)\n   unsigned n_before, freq_in, freq_h;\n   gcov_type exit_count = exit->count;\n \n+  if (dump_file)\n+    fprintf (dump_file, \"Removing empty loop %d\\n\", loop->num);\n+\n   non_exit = EDGE_SUCC (exit->src, 0);\n   if (non_exit == exit)\n     non_exit = EDGE_SUCC (exit->src, 1);"}]}