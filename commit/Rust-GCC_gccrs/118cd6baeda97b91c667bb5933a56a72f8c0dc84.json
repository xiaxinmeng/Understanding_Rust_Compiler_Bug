{"sha": "118cd6baeda97b91c667bb5933a56a72f8c0dc84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE4Y2Q2YmFlZGE5N2I5MWM2NjdiYjU5MzNhNTZhNzJmOGMwZGM4NA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2018-02-24T13:10:44Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2018-02-24T13:10:44Z"}, "message": "re PR c++/83692 (Rejects valid constexpr with unrelated code fixing problem)\n\n\tPR c++/83692\n\t* constexpr.c (maybe_constant_init_1): New function.\n\t(maybe_constant_init): Make it a wrapper around maybe_constant_init_1.\n\t(cxx_constant_init): New function.\n\t* cp-tree.h (cxx_constant_init): Declare.\n\t* typeck2.c (store_init_value): Call cxx_constant_init instead of\n\tcxx_constant_value.  Move the maybe_constant_init call under an 'else'.\n\n\t* g++.dg/cpp1z/constexpr-83692.C: New test.\n\nFrom-SVN: r257961", "tree": {"sha": "57b3ceeb33137e764e6de70a18d9ce21210db308", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57b3ceeb33137e764e6de70a18d9ce21210db308"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/118cd6baeda97b91c667bb5933a56a72f8c0dc84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/118cd6baeda97b91c667bb5933a56a72f8c0dc84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/118cd6baeda97b91c667bb5933a56a72f8c0dc84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/118cd6baeda97b91c667bb5933a56a72f8c0dc84/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d98a9c1d52be9e77dfe163b83f27879f7bcda98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d98a9c1d52be9e77dfe163b83f27879f7bcda98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d98a9c1d52be9e77dfe163b83f27879f7bcda98"}], "stats": {"total": 66, "additions": 60, "deletions": 6}, "files": [{"sha": "3d4c946ad16a53dee16c67ac6b3a974b21273263", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/118cd6baeda97b91c667bb5933a56a72f8c0dc84/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/118cd6baeda97b91c667bb5933a56a72f8c0dc84/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=118cd6baeda97b91c667bb5933a56a72f8c0dc84", "patch": "@@ -1,3 +1,13 @@\n+2018-02-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/83692\n+\t* constexpr.c (maybe_constant_init_1): New function.\n+\t(maybe_constant_init): Make it a wrapper around maybe_constant_init_1.\n+\t(cxx_constant_init): New function.\n+\t* cp-tree.h (cxx_constant_init): Declare.\n+\t* typeck2.c (store_init_value): Call cxx_constant_init instead of\n+\tcxx_constant_value.  Move the maybe_constant_init call under an 'else'.\n+\n 2018-02-22  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/70468 - ICE with constructor delegation via typedef."}, {"sha": "26d0d099a05b5bccef9bb2b1e63ab945d55723b1", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/118cd6baeda97b91c667bb5933a56a72f8c0dc84/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/118cd6baeda97b91c667bb5933a56a72f8c0dc84/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=118cd6baeda97b91c667bb5933a56a72f8c0dc84", "patch": "@@ -5123,8 +5123,8 @@ fold_non_dependent_expr (tree t)\n /* Like maybe_constant_value, but returns a CONSTRUCTOR directly, rather\n    than wrapped in a TARGET_EXPR.  */\n \n-tree\n-maybe_constant_init (tree t, tree decl)\n+static tree\n+maybe_constant_init_1 (tree t, tree decl, bool allow_non_constant)\n {\n   if (!t)\n     return t;\n@@ -5139,10 +5139,10 @@ maybe_constant_init (tree t, tree decl)\n     t = TARGET_EXPR_INITIAL (t);\n   if (!is_nondependent_static_init_expression (t))\n     /* Don't try to evaluate it.  */;\n-  else if (CONSTANT_CLASS_P (t))\n+  else if (CONSTANT_CLASS_P (t) && allow_non_constant)\n     /* No evaluation needed.  */;\n   else\n-    t = cxx_eval_outermost_constant_expr (t, true, false, decl);\n+    t = cxx_eval_outermost_constant_expr (t, allow_non_constant, false, decl);\n   if (TREE_CODE (t) == TARGET_EXPR)\n     {\n       tree init = TARGET_EXPR_INITIAL (t);\n@@ -5152,6 +5152,22 @@ maybe_constant_init (tree t, tree decl)\n   return t;\n }\n \n+/* Wrapper for maybe_constant_init_1 which permits non constants.  */\n+\n+tree\n+maybe_constant_init (tree t, tree decl)\n+{\n+  return maybe_constant_init_1 (t, decl, true);\n+}\n+\n+/* Wrapper for maybe_constant_init_1 which does not permit non constants.  */\n+\n+tree\n+cxx_constant_init (tree t, tree decl)\n+{\n+  return maybe_constant_init_1 (t, decl, false);\n+}\n+\n #if 0\n /* FIXME see ADDR_EXPR section in potential_constant_expression_1.  */\n /* Return true if the object referred to by REF has automatic or thread"}, {"sha": "04c7b7ce3a9db5f088988f688adb8dc38455f3cc", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/118cd6baeda97b91c667bb5933a56a72f8c0dc84/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/118cd6baeda97b91c667bb5933a56a72f8c0dc84/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=118cd6baeda97b91c667bb5933a56a72f8c0dc84", "patch": "@@ -7411,6 +7411,7 @@ extern bool require_potential_constant_expression (tree);\n extern bool require_constant_expression (tree);\n extern bool require_potential_rvalue_constant_expression (tree);\n extern tree cxx_constant_value\t\t\t(tree, tree = NULL_TREE);\n+extern tree cxx_constant_init\t\t\t(tree, tree = NULL_TREE);\n extern tree maybe_constant_value\t\t(tree, tree = NULL_TREE);\n extern tree maybe_constant_init\t\t\t(tree, tree = NULL_TREE);\n extern tree fold_non_dependent_expr\t\t(tree);"}, {"sha": "153b46cca775f406440a4d684ca78fdae6d9b2c4", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/118cd6baeda97b91c667bb5933a56a72f8c0dc84/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/118cd6baeda97b91c667bb5933a56a72f8c0dc84/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=118cd6baeda97b91c667bb5933a56a72f8c0dc84", "patch": "@@ -830,9 +830,10 @@ store_init_value (tree decl, tree init, vec<tree, va_gc>** cleanups, int flags)\n \t  if (!require_constant_expression (value))\n \t    value = error_mark_node;\n \t  else\n-\t    value = cxx_constant_value (value, decl);\n+\t    value = cxx_constant_init (value, decl);\n \t}\n-      value = maybe_constant_init (value, decl);\n+      else\n+\tvalue = maybe_constant_init (value, decl);\n       if (TREE_CODE (value) == CONSTRUCTOR && cp_has_mutable_p (type))\n \t/* Poison this CONSTRUCTOR so it can't be copied to another\n \t   constexpr variable.  */"}, {"sha": "1a0bcd3a602504db95679f2cf56adc05dc684db9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/118cd6baeda97b91c667bb5933a56a72f8c0dc84/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/118cd6baeda97b91c667bb5933a56a72f8c0dc84/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=118cd6baeda97b91c667bb5933a56a72f8c0dc84", "patch": "@@ -1,3 +1,8 @@\n+2018-02-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/83692\n+\t* g++.dg/cpp1z/constexpr-83692.C: New test.\n+\n 2018-02-23  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/84346"}, {"sha": "f6b61eeab859d0404fdbfb2b979db83317bb8884", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-83692.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/118cd6baeda97b91c667bb5933a56a72f8c0dc84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-83692.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/118cd6baeda97b91c667bb5933a56a72f8c0dc84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-83692.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-83692.C?ref=118cd6baeda97b91c667bb5933a56a72f8c0dc84", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/83692\n+// { dg-options -std=c++17 }\n+\n+struct integer {\n+  constexpr int value() const { return m_value;\t}\n+  int m_value;\n+};\n+\n+struct outer {\n+  integer m_x{0};\n+  constexpr outer()\n+    {\n+      if (m_x.value() != 0)\n+\tthrow 0;\n+      m_x.m_value = integer{1}.value();\n+      if (m_x.value() != 1)\n+\tthrow 0;\n+    }\n+};\n+\n+constexpr outer o{};"}]}