{"sha": "c1d49704bcc084245adffb45a22d43a841665515", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFkNDk3MDRiY2MwODQyNDVhZGZmYjQ1YTIyZDQzYTg0MTY2NTUxNQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-09-17T18:48:45Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-09-17T18:48:45Z"}, "message": "libiberty.h (ASTRDUP): New macro.\n\ninclude:\n\t* libiberty.h (ASTRDUP): New macro.\n\tlibiberty_optr, libiberty_nptr, libiberty_len): Declare.\n\nlibiberty:\n\t* alloca.c (libiberty_optr, libiberty_nptr, libiberty_len):\n\tDefine.\n\ngcc:\n\t* c-aux-info.c (affix_data_type): Use ASTRDUP in lieu of\n\talloca/strcpy.\n\nFrom-SVN: r45657", "tree": {"sha": "d0168824c3517b671ef6a4c4bbf09f335edd2800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0168824c3517b671ef6a4c4bbf09f335edd2800"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1d49704bcc084245adffb45a22d43a841665515", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1d49704bcc084245adffb45a22d43a841665515", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1d49704bcc084245adffb45a22d43a841665515", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1d49704bcc084245adffb45a22d43a841665515/comments", "author": null, "committer": null, "parents": [{"sha": "14baae01f63af3ef58bf9a0923a92d0de7098891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14baae01f63af3ef58bf9a0923a92d0de7098891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14baae01f63af3ef58bf9a0923a92d0de7098891"}], "stats": {"total": 38, "additions": 35, "deletions": 3}, "files": [{"sha": "554b2528b58a6ac43f40f9486af1cb38f254a12b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1d49704bcc084245adffb45a22d43a841665515/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1d49704bcc084245adffb45a22d43a841665515/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1d49704bcc084245adffb45a22d43a841665515", "patch": "@@ -1,3 +1,8 @@\n+2001-09-17  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-aux-info.c (affix_data_type): Use ASTRDUP in lieu of\n+\talloca/strcpy.\n+\n 2001-09-17  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cpphash.h (_cpp_lex_direct): New."}, {"sha": "c9daa1d96a1cfcb254ce11e2890c2b59eb9417ac", "filename": "gcc/c-aux-info.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1d49704bcc084245adffb45a22d43a841665515/gcc%2Fc-aux-info.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1d49704bcc084245adffb45a22d43a841665515/gcc%2Fc-aux-info.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-aux-info.c?ref=c1d49704bcc084245adffb45a22d43a841665515", "patch": "@@ -64,13 +64,11 @@ static char *\n affix_data_type (param)\n      const char *param;\n {\n-  char *type_or_decl = (char *) alloca (strlen (param) + 1);\n+  char *const type_or_decl = ASTRDUP (param);\n   char *p = type_or_decl;\n   char *qualifiers_then_data_type;\n   char saved;\n \n-  strcpy (type_or_decl, param);\n-  \n   /* Skip as many leading const's or volatile's as there are.  */\n \n   for (;;)"}, {"sha": "d745a2896476a918733ef77f153873f50dbe86f1", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1d49704bcc084245adffb45a22d43a841665515/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1d49704bcc084245adffb45a22d43a841665515/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=c1d49704bcc084245adffb45a22d43a841665515", "patch": "@@ -1,3 +1,8 @@\n+2001-09-17  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* libiberty.h (ASTRDUP): New macro.\n+\tlibiberty_optr, libiberty_nptr, libiberty_len): Declare.\n+\n 2001-08-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* ansidecl.h: Update comments reflecting previous change."}, {"sha": "7220ec0643ce1b512df7f85e53d8efe145b94b2b", "filename": "include/libiberty.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1d49704bcc084245adffb45a22d43a841665515/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1d49704bcc084245adffb45a22d43a841665515/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=c1d49704bcc084245adffb45a22d43a841665515", "patch": "@@ -246,12 +246,25 @@ extern PTR C_alloca PARAMS((size_t));\n #if GCC_VERSION >= 2000 && !defined USE_C_ALLOCA\n # define alloca(x) __builtin_alloca(x)\n # undef C_ALLOCA\n+# define ASTRDUP(X) \\\n+  (__extension__ ({ const char *const libiberty_optr = (X); \\\n+   const unsigned long libiberty_len = strlen (libiberty_optr) + 1; \\\n+   char *const libiberty_nptr = alloca (libiberty_len); \\\n+   (char *) memcpy (libiberty_nptr, libiberty_optr, libiberty_len); }))\n #else\n # define alloca(x) C_alloca(x)\n # undef USE_C_ALLOCA\n # define USE_C_ALLOCA 1\n # undef C_ALLOCA\n # define C_ALLOCA 1\n+extern const char *libiberty_optr;\n+extern char *libiberty_nptr;\n+extern unsigned long libiberty_len;\n+# define ASTRDUP(X) \\\n+  (libiberty_optr = (X), \\\n+   libiberty_len = strlen (libiberty_optr) + 1, \\\n+   libiberty_nptr = alloca (libiberty_len), \\\n+   (char *) memcpy (libiberty_nptr, libiberty_optr, libiberty_len))\n #endif\n \n #ifdef __cplusplus"}, {"sha": "970dc98ad58f5d662364d3fa677dc834f2173df9", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1d49704bcc084245adffb45a22d43a841665515/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1d49704bcc084245adffb45a22d43a841665515/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=c1d49704bcc084245adffb45a22d43a841665515", "patch": "@@ -1,3 +1,8 @@\n+2001-09-17  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* alloca.c (libiberty_optr, libiberty_nptr, libiberty_len):\n+\tDefine.\n+\n 2001-09-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* asprintf.c: Don't define USE_STDARG.  Use VPARAMS, VA_OPEN,"}, {"sha": "822c1dc2307d8ff901f999795cef2782d270b12a", "filename": "libiberty/alloca.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1d49704bcc084245adffb45a22d43a841665515/libiberty%2Falloca.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1d49704bcc084245adffb45a22d43a841665515/libiberty%2Falloca.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Falloca.c?ref=c1d49704bcc084245adffb45a22d43a841665515", "patch": "@@ -34,6 +34,12 @@\n #include <stdlib.h>\n #endif\n \n+/* These variables are used by the ASTRDUP implementation that relies\n+   on C_alloca.  */\n+const char *libiberty_optr;\n+char *libiberty_nptr;\n+unsigned long libiberty_len;\n+\n /* If your stack is a linked list of frames, you have to\n    provide an \"address metric\" ADDRESS_FUNCTION macro.  */\n "}]}