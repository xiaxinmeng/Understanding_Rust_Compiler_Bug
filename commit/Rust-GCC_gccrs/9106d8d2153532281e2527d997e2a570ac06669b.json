{"sha": "9106d8d2153532281e2527d997e2a570ac06669b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTEwNmQ4ZDIxNTM1MzIyODFlMjUyN2Q5OTdlMmE1NzBhYzA2NjY5Yg==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2012-10-24T05:59:27Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2012-10-24T05:59:27Z"}, "message": "Use define_memory_constraint on sparc when necessary.\n\n\t* config/sparc/constraints.md (\"T\", \"W\"): Change\n\tdefinitions to use define_memory_constraint.  Do not match\n\t'reg'.\n\t* config/sparc/sparc.c (memory_ok_for_ldd): Remove all non-MEM\n\thandling code, update comment.\n\nFrom-SVN: r192757", "tree": {"sha": "cde08a8330a46b19ae8ea2d35c855e8157481eb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cde08a8330a46b19ae8ea2d35c855e8157481eb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9106d8d2153532281e2527d997e2a570ac06669b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9106d8d2153532281e2527d997e2a570ac06669b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9106d8d2153532281e2527d997e2a570ac06669b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9106d8d2153532281e2527d997e2a570ac06669b/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f4b2452702cbc019084dc058e1d995b69f0bb5dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4b2452702cbc019084dc058e1d995b69f0bb5dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4b2452702cbc019084dc058e1d995b69f0bb5dc"}], "stats": {"total": 41, "additions": 19, "deletions": 22}, "files": [{"sha": "e5714c5e8479c37711c3a819fccd21acfb1bec4c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9106d8d2153532281e2527d997e2a570ac06669b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9106d8d2153532281e2527d997e2a570ac06669b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9106d8d2153532281e2527d997e2a570ac06669b", "patch": "@@ -1,3 +1,11 @@\n+2012-10-23  David S. Miller  <davem@davemloft.net>\n+\n+\t* config/sparc/constraints.md (\"T\", \"W\"): Change\n+\tdefinitions to use define_memory_constraint.  Do not match\n+\t'reg'.\n+\t* config/sparc/sparc.c (memory_ok_for_ldd): Remove all non-MEM\n+\thandling code, update comment.\n+\n 2012-10-23  Ian Lance Taylor  <iant@google.com>\n \n \t* doc/extend.texi (Extended Asm): The '+' constraint does not"}, {"sha": "ffe530447db47e7d96859c7040308540cbc18268", "filename": "gcc/config/sparc/constraints.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9106d8d2153532281e2527d997e2a570ac06669b/gcc%2Fconfig%2Fsparc%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9106d8d2153532281e2527d997e2a570ac06669b/gcc%2Fconfig%2Fsparc%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fconstraints.md?ref=9106d8d2153532281e2527d997e2a570ac06669b", "patch": "@@ -132,10 +132,10 @@\n       (match_test \"fp_high_losum_p (op)\")))\n \n ;; Not needed in 64-bit mode\n-(define_constraint \"T\"\n+(define_memory_constraint \"T\"\n  \"Memory reference whose address is aligned to 8-byte boundary\"\n  (and (match_test \"TARGET_ARCH32\")\n-      (match_code \"mem,reg\")\n+      (match_code \"mem\")\n       (match_test \"memory_ok_for_ldd (op)\")))\n \n ;; Not needed in 64-bit mode\n@@ -148,9 +148,9 @@\n       (match_test \"register_ok_for_ldd (op)\")))\n \n ;; Equivalent to 'T' but available in 64-bit mode\n-(define_constraint \"W\"\n+(define_memory_constraint \"W\"\n  \"Memory reference for 'e' constraint floating-point register\"\n- (and (match_code \"mem,reg\")\n+ (and (match_code \"mem\")\n       (match_test \"memory_ok_for_ldd (op)\")))\n \n (define_constraint \"Y\""}, {"sha": "272632eecbafe4388378d9e0781fb0bb358b912c", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9106d8d2153532281e2527d997e2a570ac06669b/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9106d8d2153532281e2527d997e2a570ac06669b/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=9106d8d2153532281e2527d997e2a570ac06669b", "patch": "@@ -8065,29 +8065,18 @@ register_ok_for_ldd (rtx reg)\n   return 1;\n }\n \n-/* Return 1 if OP is a memory whose address is known to be\n-   aligned to 8-byte boundary, or a pseudo during reload.\n-   This makes it suitable for use in ldd and std insns.  */\n+/* Return 1 if OP, a MEM, has an address which is known to be\n+   aligned to an 8-byte boundary.  */\n \n int\n memory_ok_for_ldd (rtx op)\n {\n-  if (MEM_P (op))\n-    {\n-      /* In 64-bit mode, we assume that the address is word-aligned.  */\n-      if (TARGET_ARCH32 && !mem_min_alignment (op, 8))\n-\treturn 0;\n+  /* In 64-bit mode, we assume that the address is word-aligned.  */\n+  if (TARGET_ARCH32 && !mem_min_alignment (op, 8))\n+    return 0;\n \n-      if (! can_create_pseudo_p ()\n-\t  && !strict_memory_address_p (Pmode, XEXP (op, 0)))\n-\treturn 0;\n-    }\n-  else if (REG_P (op) && REGNO (op) >= FIRST_PSEUDO_REGISTER)\n-    {\n-      if (!(reload_in_progress && reg_renumber [REGNO (op)] < 0))\n-\treturn 0;\n-    }\n-  else\n+  if (! can_create_pseudo_p ()\n+      && !strict_memory_address_p (Pmode, XEXP (op, 0)))\n     return 0;\n \n   return 1;"}]}