{"sha": "8e1d640fcdf694fe1d83818b123b550e0da96705", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGUxZDY0MGZjZGY2OTRmZTFkODM4MThiMTIzYjU1MGUwZGE5NjcwNQ==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2016-12-07T17:56:53Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2016-12-07T17:56:53Z"}, "message": "re PR rtl-optimization/78617 (LRA clobbers live register during rematerialization)\n\n2016-12-07  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/\n    PR rtl-optimization/78617\n    * lra-remat.c (do_remat): Initialize live_hard_regs from live in\n    registers, also setting hard registers mapped to pseudo registers.\n\n    gcc/testsuite/\n    PR rtl-optimization/78617\n    * gcc.c-torture/execute/pr78617.c: New test.\n\nFrom-SVN: r243374", "tree": {"sha": "fd162005580ba4dc0417cb162abdee46df8b1f76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd162005580ba4dc0417cb162abdee46df8b1f76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e1d640fcdf694fe1d83818b123b550e0da96705", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e1d640fcdf694fe1d83818b123b550e0da96705", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e1d640fcdf694fe1d83818b123b550e0da96705", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e1d640fcdf694fe1d83818b123b550e0da96705/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8194c537463de4a5e6bd368c1c5fab2fafc40bdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8194c537463de4a5e6bd368c1c5fab2fafc40bdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8194c537463de4a5e6bd368c1c5fab2fafc40bdf"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "489ec77e81d72ea4f22b601d3de1d02decf36eaa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e1d640fcdf694fe1d83818b123b550e0da96705/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e1d640fcdf694fe1d83818b123b550e0da96705/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e1d640fcdf694fe1d83818b123b550e0da96705", "patch": "@@ -1,3 +1,9 @@\n+2016-12-07  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\tPR rtl-optimization/78617\n+\t* lra-remat.c (do_remat): Initialize live_hard_regs from live in\n+\tregisters, also setting hard registers mapped to pseudo registers.\n+\n 2016-12-07  David Malcolm  <dmalcolm@redhat.com>\n \n \t* cfgexpand.c (pass_expand::execute): Move stack initializations"}, {"sha": "cdd7057f602098d33ec3acfdaaac66556640bd82", "filename": "gcc/lra-remat.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e1d640fcdf694fe1d83818b123b550e0da96705/gcc%2Flra-remat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e1d640fcdf694fe1d83818b123b550e0da96705/gcc%2Flra-remat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-remat.c?ref=8e1d640fcdf694fe1d83818b123b550e0da96705", "patch": "@@ -1047,19 +1047,29 @@ update_scratch_ops (rtx_insn *remat_insn)\n static bool\n do_remat (void)\n {\n+  unsigned regno;\n   rtx_insn *insn;\n   basic_block bb;\n   bitmap_head avail_cands;\n   bitmap_head active_cands;\n   bool changed_p = false;\n   /* Living hard regs and hard registers of living pseudos.  */\n   HARD_REG_SET live_hard_regs;\n+  bitmap_iterator bi;\n \n   bitmap_initialize (&avail_cands, &reg_obstack);\n   bitmap_initialize (&active_cands, &reg_obstack);\n   FOR_EACH_BB_FN (bb, cfun)\n     {\n-      REG_SET_TO_HARD_REG_SET (live_hard_regs, df_get_live_out (bb));\n+      CLEAR_HARD_REG_SET (live_hard_regs);\n+      EXECUTE_IF_SET_IN_BITMAP (df_get_live_in (bb), 0, regno, bi)\n+\t{\n+\t  int hard_regno = regno < FIRST_PSEUDO_REGISTER\n+\t\t\t   ? regno\n+\t\t\t   : reg_renumber[regno];\n+\t  if (hard_regno >= 0)\n+\t    SET_HARD_REG_BIT (live_hard_regs, hard_regno);\n+\t}\n       bitmap_and (&avail_cands, &get_remat_bb_data (bb)->avin_cands,\n \t\t  &get_remat_bb_data (bb)->livein_cands);\n       /* Activating insns are always in the same block as their corresponding"}, {"sha": "71bf5066269eef6449d5100a218b2e375496200a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e1d640fcdf694fe1d83818b123b550e0da96705/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e1d640fcdf694fe1d83818b123b550e0da96705/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e1d640fcdf694fe1d83818b123b550e0da96705", "patch": "@@ -1,3 +1,8 @@\n+2016-12-07  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\tPR rtl-optimization/78617\n+\t* gcc.c-torture/execute/pr78617.c: New test.\n+\n 2016-12-07  Carl Love  <cel@us.ibm.com>\n \n \t* gcc.target/powerpc/builtins-3.c: Move built-in tests for P8 and"}, {"sha": "89c4f6dea8cb507b963f91debb94cbe16eb1db90", "filename": "gcc/testsuite/gcc.c-torture/execute/pr78617.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e1d640fcdf694fe1d83818b123b550e0da96705/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr78617.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e1d640fcdf694fe1d83818b123b550e0da96705/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr78617.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr78617.c?ref=8e1d640fcdf694fe1d83818b123b550e0da96705", "patch": "@@ -0,0 +1,25 @@\n+int a = 0;\n+int d = 1;\n+int f = 1;\n+\n+int fn1() {\n+  return a || 1 >> a;\n+}\n+\n+int fn2(int p1, int p2) {\n+  return p2 >= 2 ? p1 : p1 >> 1;\n+}\n+\n+int fn3(int p1) {\n+  return d ^ p1;\n+}\n+\n+int fn4(int p1, int p2) {\n+  return fn3(!d > fn2((f = fn1() - 1000) || p2, p1));\n+}\n+\n+int main() {\n+  if (fn4(0, 0) != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}