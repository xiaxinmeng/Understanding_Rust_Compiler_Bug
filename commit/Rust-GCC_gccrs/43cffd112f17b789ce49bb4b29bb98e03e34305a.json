{"sha": "43cffd112f17b789ce49bb4b29bb98e03e34305a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNjZmZkMTEyZjE3Yjc4OWNlNDliYjRiMjliYjk4ZTAzZTM0MzA1YQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "1999-02-13T05:41:18Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "1999-02-13T05:41:18Z"}, "message": "arm.md: Use gen_rtx_FOO instead of gen_rtx (FOO, ...).\n\n* arm.md: Use gen_rtx_FOO instead of gen_rtx (FOO, ...).\n* arm.h: Likewise.\n* arm.c: Likewise.\n* arm.h (TARGET_OPTIONS): Reformat for clarity.\n(GO_IF_LEGITIMATE_ADDRESS): When generating PIC, references to symbols\nin the constant pool aren't valid.\n(LEGITIMATE_PIC_OPERAND_P): Likewise.\n* arm.c: Include \"system.h\", not stdio.h and string.h.\n\nFrom-SVN: r25175", "tree": {"sha": "0a5da2b0b5f7e669f36d64e045b8d1329482a019", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a5da2b0b5f7e669f36d64e045b8d1329482a019"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43cffd112f17b789ce49bb4b29bb98e03e34305a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43cffd112f17b789ce49bb4b29bb98e03e34305a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43cffd112f17b789ce49bb4b29bb98e03e34305a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43cffd112f17b789ce49bb4b29bb98e03e34305a/comments", "author": null, "committer": null, "parents": [{"sha": "b4fce8ab0e83d0ca33e64ff7d55ca84b1c52062a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4fce8ab0e83d0ca33e64ff7d55ca84b1c52062a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4fce8ab0e83d0ca33e64ff7d55ca84b1c52062a"}], "stats": {"total": 605, "additions": 321, "deletions": 284}, "files": [{"sha": "719472fb186307543ffce9e85b8f0952499aabdc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43cffd112f17b789ce49bb4b29bb98e03e34305a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43cffd112f17b789ce49bb4b29bb98e03e34305a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43cffd112f17b789ce49bb4b29bb98e03e34305a", "patch": "@@ -1,3 +1,16 @@\n+Sat Feb 13 05:32:00 1999  Richard Earnshaw (rearnsha@arm.com)\n+\n+\t* arm.md: Use gen_rtx_FOO instead of gen_rtx (FOO, ...).\n+\t* arm.h: Likewise.\n+\t* arm.c: Likewise.\n+\n+\t* arm.h (TARGET_OPTIONS): Reformat for clarity.\n+\t(GO_IF_LEGITIMATE_ADDRESS): When generating PIC, references to symbols\n+\tin the constant pool aren't valid.\n+\t(LEGITIMATE_PIC_OPERAND_P): Likewise.\n+\n+\t* arm.c: Include \"system.h\", not stdio.h and string.h.\n+\n Fri Feb 12 13:06:28 1999  Jim Wilson  <wilson@cygnus.com>\n \n \t* stmt.c (expand_return): Return if optimize_tail_recursion succeeded."}, {"sha": "fa86deefbca55332299b8e279a4905deb532e677", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 224, "deletions": 219, "changes": 443, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43cffd112f17b789ce49bb4b29bb98e03e34305a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43cffd112f17b789ce49bb4b29bb98e03e34305a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=43cffd112f17b789ce49bb4b29bb98e03e34305a", "patch": "@@ -22,8 +22,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n     \n #include \"config.h\"\n-#include <stdio.h>\n-#include <string.h>\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n@@ -556,22 +555,22 @@ arm_split_constant (code, mode, val, target, source, subtargets)\n \t    {\n \t      /* Currently SET is the only monadic value for CODE, all\n \t\t the rest are diadic.  */\n-\t      emit_insn (gen_rtx (SET, VOIDmode, target, GEN_INT (val)));\n+\t      emit_insn (gen_rtx_SET (VOIDmode, target, GEN_INT (val)));\n \t      return 1;\n \t    }\n \t  else\n \t    {\n \t      rtx temp = subtargets ? gen_reg_rtx (mode) : target;\n \n-\t      emit_insn (gen_rtx (SET, VOIDmode, temp, GEN_INT (val)));\n+\t      emit_insn (gen_rtx_SET (VOIDmode, temp, GEN_INT (val)));\n \t      /* For MINUS, the value is subtracted from, since we never\n \t\t have subtraction of a constant.  */\n \t      if (code == MINUS)\n-\t\temit_insn (gen_rtx (SET, VOIDmode, target,\n-\t\t\t\t    gen_rtx (code, mode, temp, source)));\n+\t\temit_insn (gen_rtx_SET (VOIDmode, target,\n+\t\t\t\t\tgen_rtx (code, mode, temp, source)));\n \t      else\n-\t\temit_insn (gen_rtx (SET, VOIDmode, target,\n-\t\t\t\t    gen_rtx (code, mode, source, temp)));\n+\t\temit_insn (gen_rtx_SET (VOIDmode, target,\n+\t\t\t\t\tgen_rtx (code, mode, source, temp)));\n \t      return 2;\n \t    }\n \t}\n@@ -626,16 +625,16 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n       if (remainder == 0xffffffff)\n \t{\n \t  if (generate)\n-\t    emit_insn (gen_rtx (SET, VOIDmode, target,\n-\t\t\t\tGEN_INT (ARM_SIGN_EXTEND (val))));\n+\t    emit_insn (gen_rtx_SET (VOIDmode, target,\n+\t\t\t\t    GEN_INT (ARM_SIGN_EXTEND (val))));\n \t  return 1;\n \t}\n       if (remainder == 0)\n \t{\n \t  if (reload_completed && rtx_equal_p (target, source))\n \t    return 0;\n \t  if (generate)\n-\t    emit_insn (gen_rtx (SET, VOIDmode, target, source));\n+\t    emit_insn (gen_rtx_SET (VOIDmode, target, source));\n \t  return 1;\n \t}\n       break;\n@@ -644,15 +643,15 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n       if (remainder == 0)\n \t{\n \t  if (generate)\n-\t    emit_insn (gen_rtx (SET, VOIDmode, target, const0_rtx));\n+\t    emit_insn (gen_rtx_SET (VOIDmode, target, const0_rtx));\n \t  return 1;\n \t}\n       if (remainder == 0xffffffff)\n \t{\n \t  if (reload_completed && rtx_equal_p (target, source))\n \t    return 0;\n \t  if (generate)\n-\t    emit_insn (gen_rtx (SET, VOIDmode, target, source));\n+\t    emit_insn (gen_rtx_SET (VOIDmode, target, source));\n \t  return 1;\n \t}\n       can_invert = 1;\n@@ -664,14 +663,14 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n \t  if (reload_completed && rtx_equal_p (target, source))\n \t    return 0;\n \t  if (generate)\n-\t    emit_insn (gen_rtx (SET, VOIDmode, target, source));\n+\t    emit_insn (gen_rtx_SET (VOIDmode, target, source));\n \t  return 1;\n \t}\n       if (remainder == 0xffffffff)\n \t{\n \t  if (generate)\n-\t    emit_insn (gen_rtx (SET, VOIDmode, target,\n-\t\t\t\tgen_rtx (NOT, mode, source)));\n+\t    emit_insn (gen_rtx_SET (VOIDmode, target,\n+\t\t\t\t    gen_rtx_NOT (mode, source)));\n \t  return 1;\n \t}\n \n@@ -684,15 +683,16 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n       if (remainder == 0)\n \t{\n \t  if (generate)\n-\t    emit_insn (gen_rtx (SET, VOIDmode, target,\n-\t\t\t\tgen_rtx (NEG, mode, source)));\n+\t    emit_insn (gen_rtx_SET (VOIDmode, target,\n+\t\t\t\t    gen_rtx_NEG (mode, source)));\n \t  return 1;\n \t}\n       if (const_ok_for_arm (val))\n \t{\n \t  if (generate)\n-\t    emit_insn (gen_rtx (SET, VOIDmode, target, \n-\t\t\t\tgen_rtx (MINUS, mode, GEN_INT (val), source)));\n+\t    emit_insn (gen_rtx_SET (VOIDmode, target, \n+\t\t\t\t    gen_rtx_MINUS (mode, GEN_INT (val),\n+\t\t\t\t\t\t   source)));\n \t  return 1;\n \t}\n       can_negate = 1;\n@@ -709,10 +709,10 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n       || (can_invert && const_ok_for_arm (~val)))\n     {\n       if (generate)\n-\temit_insn (gen_rtx (SET, VOIDmode, target,\n-\t\t\t    (source ? gen_rtx (code, mode, source,\n-\t\t\t\t\t       GEN_INT (val))\n-\t\t\t     : GEN_INT (val))));\n+\temit_insn (gen_rtx_SET (VOIDmode, target,\n+\t\t\t\t(source ? gen_rtx (code, mode, source,\n+\t\t\t\t\t\t   GEN_INT (val))\n+\t\t\t\t : GEN_INT (val))));\n       return 1;\n     }\n \n@@ -767,8 +767,8 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n \t      if (generate)\n \t\t{\n \t\t  rtx new_src = subtargets ? gen_reg_rtx (mode) : target;\n-\t\t  emit_insn (gen_rtx (SET, VOIDmode, new_src, \n-\t\t\t\t      GEN_INT (temp1)));\n+\t\t  emit_insn (gen_rtx_SET (VOIDmode, new_src, \n+\t\t\t\t\t  GEN_INT (temp1)));\n \t\t  emit_insn (gen_ashrsi3 (target, new_src, \n \t\t\t\t\t  GEN_INT (set_sign_bit_copies - 1)));\n \t\t}\n@@ -782,8 +782,8 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n \t      if (generate)\n \t\t{\n \t\t  rtx new_src = subtargets ? gen_reg_rtx (mode) : target;\n-\t\t  emit_insn (gen_rtx (SET, VOIDmode, new_src,\n-\t\t\t\t      GEN_INT (temp1)));\n+\t\t  emit_insn (gen_rtx_SET (VOIDmode, new_src,\n+\t\t\t\t\t  GEN_INT (temp1)));\n \t\t  emit_insn (gen_ashrsi3 (target, new_src, \n \t\t\t\t\t  GEN_INT (set_sign_bit_copies - 1)));\n \t\t}\n@@ -814,11 +814,12 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n \t\t\t\t\t    source, subtargets, generate);\n \t\t  source = new_src;\n \t\t  if (generate)\n-\t\t    emit_insn (gen_rtx (SET, VOIDmode, target,\n-\t\t\t\t\tgen_rtx (IOR, mode,\n-\t\t\t\t\t\t gen_rtx (ASHIFT, mode, source,\n-\t\t\t\t\t\t\t  GEN_INT (i)),\n-\t\t\t\t\t\t source)));\n+\t\t    emit_insn (gen_rtx_SET\n+\t\t\t       (VOIDmode, target,\n+\t\t\t\tgen_rtx_IOR (mode,\n+\t\t\t\t\t     gen_rtx_ASHIFT (mode, source,\n+\t\t\t\t\t\t\t     GEN_INT (i)),\n+\t\t\t\t\t     source)));\n \t\t  return insns + 1;\n \t\t}\n \t    }\n@@ -836,11 +837,13 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n \t\t\t\t\t    source, subtargets, generate);\n \t\t  source = new_src;\n \t\t  if (generate)\n-\t\t    emit_insn (gen_rtx (SET, VOIDmode, target,\n-\t\t\t\t\tgen_rtx (IOR, mode,\n-\t\t\t\t\t\t gen_rtx (LSHIFTRT, mode,\n-\t\t\t\t\t\t\t  source, GEN_INT (i)),\n-\t\t\t\t\t\t source)));\n+\t\t    emit_insn\n+\t\t      (gen_rtx_SET (VOIDmode, target,\n+\t\t\t\t    gen_rtx_IOR\n+\t\t\t\t    (mode,\n+\t\t\t\t     gen_rtx_LSHIFTRT (mode, source,\n+\t\t\t\t\t\t       GEN_INT (i)),\n+\t\t\t\t     source)));\n \t\t  return insns + 1;\n \t\t}\n \t    }\n@@ -862,9 +865,9 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n \t\t{\n \t\t  rtx sub = subtargets ? gen_reg_rtx (mode) : target;\n \n-\t\t  emit_insn (gen_rtx (SET, VOIDmode, sub, GEN_INT (val)));\n-\t\t  emit_insn (gen_rtx (SET, VOIDmode, target, \n-\t\t\t\t      gen_rtx (code, mode, source, sub)));\n+\t\t  emit_insn (gen_rtx_SET (VOIDmode, sub, GEN_INT (val)));\n+\t\t  emit_insn (gen_rtx_SET (VOIDmode, target, \n+\t\t\t\t\t  gen_rtx (code, mode, source, sub)));\n \t\t}\n \t      return 2;\n \t    }\n@@ -881,14 +884,15 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n \t      rtx sub = subtargets ? gen_reg_rtx (mode) : target;\n \t      rtx shift = GEN_INT (set_sign_bit_copies);\n \n-\t      emit_insn (gen_rtx (SET, VOIDmode, sub,\n-\t\t\t\t  gen_rtx (NOT, mode, \n-\t\t\t\t\t   gen_rtx (ASHIFT, mode, source, \n-\t\t\t\t\t\t    shift))));\n-\t      emit_insn (gen_rtx (SET, VOIDmode, target,\n-\t\t\t\t  gen_rtx (NOT, mode,\n-\t\t\t\t\t   gen_rtx (LSHIFTRT, mode, sub,\n+\t      emit_insn (gen_rtx_SET (VOIDmode, sub,\n+\t\t\t\t      gen_rtx_NOT (mode, \n+\t\t\t\t\t\t   gen_rtx_ASHIFT (mode,\n+\t\t\t\t\t\t\t\t   source, \n \t\t\t\t\t\t    shift))));\n+\t      emit_insn (gen_rtx_SET (VOIDmode, target,\n+\t\t\t\t      gen_rtx_NOT (mode,\n+\t\t\t\t\t\t   gen_rtx_LSHIFTRT (mode, sub,\n+\t\t\t\t\t\t\t\t     shift))));\n \t    }\n \t  return 2;\n \t}\n@@ -901,13 +905,14 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n \t      rtx sub = subtargets ? gen_reg_rtx (mode) : target;\n \t      rtx shift = GEN_INT (set_zero_bit_copies);\n \n-\t      emit_insn (gen_rtx (SET, VOIDmode, sub,\n-\t\t\t\t  gen_rtx (NOT, mode,\n-\t\t\t\t\t   gen_rtx (LSHIFTRT, mode, source,\n+\t      emit_insn (gen_rtx_SET (VOIDmode, sub,\n+\t\t\t\t      gen_rtx_NOT (mode,\n+\t\t\t\t\t\t   gen_rtx_LSHIFTRT (mode,\n+\t\t\t\t\t\t\t\t     source,\n \t\t\t\t\t\t    shift))));\n-\t      emit_insn (gen_rtx (SET, VOIDmode, target,\n-\t\t\t\t  gen_rtx (NOT, mode,\n-\t\t\t\t\t   gen_rtx (ASHIFT, mode, sub,\n+\t      emit_insn (gen_rtx_SET (VOIDmode, target,\n+\t\t\t\t      gen_rtx_NOT (mode,\n+\t\t\t\t\t\t   gen_rtx_ASHIFT (mode, sub,\n \t\t\t\t\t\t    shift))));\n \t    }\n \t  return 2;\n@@ -918,16 +923,16 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n \t  if (generate)\n \t    {\n \t      rtx sub = subtargets ? gen_reg_rtx (mode) : target;\n-\t      emit_insn (gen_rtx (SET, VOIDmode, sub,\n-\t\t\t\t  gen_rtx (NOT, mode, source)));\n+\t      emit_insn (gen_rtx_SET (VOIDmode, sub,\n+\t\t\t\t      gen_rtx_NOT (mode, source)));\n \t      source = sub;\n \t      if (subtargets)\n \t\tsub = gen_reg_rtx (mode);\n-\t      emit_insn (gen_rtx (SET, VOIDmode, sub,\n-\t\t\t\t  gen_rtx (AND, mode, source, \n-\t\t\t\t\t   GEN_INT (temp1))));\n-\t      emit_insn (gen_rtx (SET, VOIDmode, target,\n-\t\t\t\t  gen_rtx (NOT, mode, sub)));\n+\t      emit_insn (gen_rtx_SET (VOIDmode, sub,\n+\t\t\t\t      gen_rtx_AND (mode, source, \n+\t\t\t\t\t\t   GEN_INT (temp1))));\n+\t      emit_insn (gen_rtx_SET (VOIDmode, target,\n+\t\t\t\t      gen_rtx_NOT (mode, sub)));\n \t    }\n \t  return 3;\n \t}\n@@ -1079,30 +1084,31 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n \t\trtx new_src;\n \n \t\tif (code == SET)\n-\t\t  emit_insn (gen_rtx (SET, VOIDmode,\n-\t\t\t\t      new_src = (subtargets\n-\t\t\t\t\t\t ? gen_reg_rtx (mode)\n-\t\t\t\t\t\t : target),\n-\t\t\t\t      GEN_INT (can_invert ? ~temp1 : temp1)));\n+\t\t  emit_insn (gen_rtx_SET (VOIDmode,\n+\t\t\t\t\t  new_src = (subtargets\n+\t\t\t\t\t\t     ? gen_reg_rtx (mode)\n+\t\t\t\t\t\t     : target),\n+\t\t\t\t\t  GEN_INT (can_invert\n+\t\t\t\t\t\t   ? ~temp1 : temp1)));\n \t\telse if (code == MINUS)\n-\t\t  emit_insn (gen_rtx (SET, VOIDmode,\n-\t\t\t\t      new_src = (subtargets\n-\t\t\t\t\t\t ? gen_reg_rtx (mode)\n-\t\t\t\t\t\t : target),\n-\t\t\t\t      gen_rtx (code, mode, GEN_INT (temp1),\n-\t\t\t\t\t       source)));\n+\t\t  emit_insn (gen_rtx_SET (VOIDmode,\n+\t\t\t\t\t  new_src = (subtargets\n+\t\t\t\t\t\t     ? gen_reg_rtx (mode)\n+\t\t\t\t\t\t     : target),\n+\t\t\t\t\t  gen_rtx (code, mode, GEN_INT (temp1),\n+\t\t\t\t\t\t   source)));\n \t\telse\n-\t\t  emit_insn (gen_rtx (SET, VOIDmode,\n-\t\t\t\t      new_src = (remainder\n-\t\t\t\t\t\t ? (subtargets\n-\t\t\t\t\t\t    ? gen_reg_rtx (mode)\n-\t\t\t\t\t\t    : target)\n-\t\t\t\t\t\t : target),\n-\t\t\t\t      gen_rtx (code, mode, source,\n-\t\t\t\t\t       GEN_INT (can_invert ? ~temp1\n-\t\t\t\t\t\t\t: (can_negate\n-\t\t\t\t\t\t\t   ? -temp1\n-\t\t\t\t\t\t\t   : temp1)))));\n+\t\t  emit_insn (gen_rtx_SET (VOIDmode,\n+\t\t\t\t\t  new_src = (remainder\n+\t\t\t\t\t\t     ? (subtargets\n+\t\t\t\t\t\t\t? gen_reg_rtx (mode)\n+\t\t\t\t\t\t\t: target)\n+\t\t\t\t\t\t     : target),\n+\t\t\t\t\t  gen_rtx (code, mode, source,\n+\t\t\t\t\t\t   GEN_INT (can_invert ? ~temp1\n+\t\t\t\t\t\t\t    : (can_negate\n+\t\t\t\t\t\t\t       ? -temp1\n+\t\t\t\t\t\t\t       : temp1)))));\n \t\tsource = new_src;\n \t      }\n \n@@ -1277,16 +1283,17 @@ legitimize_pic_address (orig, mode, reg)\n \n       emit_insn (gen_pic_load_addr (address, orig));\n \n-      pic_ref = gen_rtx (MEM, Pmode,\n-\t\t\t gen_rtx (PLUS, Pmode, pic_offset_table_rtx, address));\n+      pic_ref = gen_rtx_MEM (Pmode,\n+\t\t\t     gen_rtx_PLUS (Pmode, pic_offset_table_rtx,\n+\t\t\t\t\t   address));\n       RTX_UNCHANGING_P (pic_ref) = 1;\n       insn = emit_move_insn (reg, pic_ref);\n #endif\n       current_function_uses_pic_offset_table = 1;\n       /* Put a REG_EQUAL note on this insn, so that it can be optimized\n \t by loop.  */\n-      REG_NOTES (insn) = gen_rtx (EXPR_LIST, REG_EQUAL, orig,\n-\t\t\t\t  REG_NOTES (insn));\n+      REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, orig,\n+\t\t\t\t\t    REG_NOTES (insn));\n       return reg;\n     }\n   else if (GET_CODE (orig) == CONST)\n@@ -1338,7 +1345,7 @@ legitimize_pic_address (orig, mode, reg)\n \t  return reg;\n \t}\n \n-      return gen_rtx (PLUS, Pmode, base, offset);\n+      return gen_rtx_PLUS (Pmode, base, offset);\n     }\n   else if (GET_CODE (orig) == LABEL_REF)\n     current_function_uses_pic_offset_table = 1;\n@@ -1373,20 +1380,15 @@ arm_finalize_pic ()\n   start_sequence ();\n   l1 = gen_label_rtx ();\n \n-  global_offset_table = gen_rtx (SYMBOL_REF, Pmode, \"_GLOBAL_OFFSET_TABLE_\");\n+  global_offset_table = gen_rtx_SYMBOL_REF (Pmode, \"_GLOBAL_OFFSET_TABLE_\");\n   /* The PC contains 'dot'+8, but the label L1 is on the next\n      instruction, so the offset is only 'dot'+4.  */\n-  pic_tmp = gen_rtx (CONST, VOIDmode, \n-\t\t     gen_rtx (PLUS, Pmode, \n-\t\t\t      gen_rtx (LABEL_REF, VOIDmode, l1),\n-\t\t\t      GEN_INT (4)));\n-  pic_tmp2 = gen_rtx (CONST, VOIDmode,\n-\t\t      gen_rtx (PLUS, Pmode,\n-\t\t\t       global_offset_table,\n-\t\t\t       pc_rtx));\n-\n-  pic_rtx = gen_rtx (CONST, Pmode,\n-\t\t     gen_rtx (MINUS, Pmode, pic_tmp2, pic_tmp));\n+  pic_tmp = plus_constant (gen_rtx_LABEL_REF (Pmode, l1),\n+\t\t\t   GEN_INT (4));\n+  pic_tmp2 = gen_rtx_CONST (VOIDmode,\n+\t\t\t    gen_rtx_PLUS (Pmode, global_offset_table, pc_rtx));\n+\n+  pic_rtx = gen_rtx_CONST (Pmode, gen_rtx_MINUS (Pmode, pic_tmp2, pic_tmp));\n \n   emit_insn (gen_pic_load_addr (pic_offset_table_rtx, pic_rtx));\n   emit_jump_insn (gen_pic_add_dot_plus_eight(l1, pic_offset_table_rtx));\n@@ -1398,7 +1400,7 @@ arm_finalize_pic ()\n \n   /* Need to emit this whether or not we obey regdecls,\n      since setjmp/longjmp can cause life info to screw up.  */\n-  emit_insn (gen_rtx (USE, VOIDmode, pic_offset_table_rtx));\n+  emit_insn (gen_rtx_USE (VOIDmode, pic_offset_table_rtx));\n #endif /* AOF_ASSEMBLER */\n }\n \n@@ -2922,30 +2924,29 @@ arm_gen_load_multiple (base_regno, count, from, up, write_back, unchanging_p,\n   int sign = up ? 1 : -1;\n   rtx mem;\n \n-  result = gen_rtx (PARALLEL, VOIDmode,\n-                    rtvec_alloc (count + (write_back ? 2 : 0)));\n+  result = gen_rtx_PARALLEL (VOIDmode,\n+\t\t\t     rtvec_alloc (count + (write_back ? 2 : 0)));\n   if (write_back)\n     {\n       XVECEXP (result, 0, 0)\n-\t= gen_rtx (SET, GET_MODE (from), from,\n-\t\t   plus_constant (from, count * 4 * sign));\n+\t= gen_rtx_SET (GET_MODE (from), from,\n+\t\t       plus_constant (from, count * 4 * sign));\n       i = 1;\n       count++;\n     }\n \n   for (j = 0; i < count; i++, j++)\n     {\n-      mem = gen_rtx (MEM, SImode, plus_constant (from, j * 4 * sign));\n+      mem = gen_rtx_MEM (SImode, plus_constant (from, j * 4 * sign));\n       RTX_UNCHANGING_P (mem) = unchanging_p;\n       MEM_IN_STRUCT_P (mem) = in_struct_p;\n       MEM_SCALAR_P (mem) = scalar_p;\n-      XVECEXP (result, 0, i) = gen_rtx (SET, VOIDmode,\n-\t\t\t\t\tgen_rtx (REG, SImode, base_regno + j),\n-\t\t\t\t\tmem);\n+      XVECEXP (result, 0, i)\n+\t= gen_rtx_SET (VOIDmode, gen_rtx_REG (SImode, base_regno + j), mem);\n     }\n \n   if (write_back)\n-    XVECEXP (result, 0, i) = gen_rtx (CLOBBER, SImode, from);\n+    XVECEXP (result, 0, i) = gen_rtx_CLOBBER (SImode, from);\n \n   return result;\n }\n@@ -2967,30 +2968,30 @@ arm_gen_store_multiple (base_regno, count, to, up, write_back, unchanging_p,\n   int sign = up ? 1 : -1;\n   rtx mem;\n \n-  result = gen_rtx (PARALLEL, VOIDmode,\n-                    rtvec_alloc (count + (write_back ? 2 : 0)));\n+  result = gen_rtx_PARALLEL (VOIDmode,\n+\t\t\t     rtvec_alloc (count + (write_back ? 2 : 0)));\n   if (write_back)\n     {\n       XVECEXP (result, 0, 0)\n-\t= gen_rtx (SET, GET_MODE (to), to,\n-\t\t   plus_constant (to, count * 4 * sign));\n+\t= gen_rtx_SET (GET_MODE (to), to,\n+\t\t       plus_constant (to, count * 4 * sign));\n       i = 1;\n       count++;\n     }\n \n   for (j = 0; i < count; i++, j++)\n     {\n-      mem = gen_rtx (MEM, SImode, plus_constant (to, j * 4 * sign));\n+      mem = gen_rtx_MEM (SImode, plus_constant (to, j * 4 * sign));\n       RTX_UNCHANGING_P (mem) = unchanging_p;\n       MEM_IN_STRUCT_P (mem) = in_struct_p;\n       MEM_SCALAR_P (mem) = scalar_p;\n \n-      XVECEXP (result, 0, i) = gen_rtx (SET, VOIDmode, mem,\n-\t\t\t\t\tgen_rtx (REG, SImode, base_regno + j));\n+      XVECEXP (result, 0, i)\n+\t= gen_rtx_SET (VOIDmode, mem, gen_rtx_REG (SImode, base_regno + j));\n     }\n \n   if (write_back)\n-    XVECEXP (result, 0, i) = gen_rtx (CLOBBER, SImode, to);\n+    XVECEXP (result, 0, i) = gen_rtx_CLOBBER (SImode, to);\n \n   return result;\n }\n@@ -3032,7 +3033,7 @@ arm_gen_movstrqi (operands)\n   last_bytes = INTVAL (operands[2]) & 3;\n \n   if (out_words_to_go != in_words_to_go && ((in_words_to_go - 1) & 3) != 0)\n-    part_bytes_reg = gen_rtx (REG, SImode, (in_words_to_go - 1) & 3);\n+    part_bytes_reg = gen_rtx_REG (SImode, (in_words_to_go - 1) & 3);\n \n   for (i = 0; in_words_to_go >= 2; i+=4)\n     {\n@@ -3063,11 +3064,11 @@ arm_gen_movstrqi (operands)\n \t\t\t\t\t       dst_scalar_p));\n \t  else\n \t    {\n-\t      mem = gen_rtx (MEM, SImode, dst);\n+\t      mem = gen_rtx_MEM (SImode, dst);\n \t      RTX_UNCHANGING_P (mem) = dst_unchanging_p;\n \t      MEM_IN_STRUCT_P (mem) = dst_in_struct_p;\n \t      MEM_SCALAR_P (mem) = dst_scalar_p;\n-\t      emit_move_insn (mem, gen_rtx (REG, SImode, 0));\n+\t      emit_move_insn (mem, gen_rtx_REG (SImode, 0));\n \t      if (last_bytes != 0)\n \t\temit_insn (gen_addsi3 (dst, dst, GEN_INT (4)));\n \t    }\n@@ -3082,14 +3083,14 @@ arm_gen_movstrqi (operands)\n   {\n     rtx sreg;\n \n-    mem = gen_rtx (MEM, SImode, src);\n+    mem = gen_rtx_MEM (SImode, src);\n     RTX_UNCHANGING_P (mem) = src_unchanging_p;\n     MEM_IN_STRUCT_P (mem) = src_in_struct_p;\n     MEM_SCALAR_P (mem) = src_scalar_p;\n     emit_move_insn (sreg = gen_reg_rtx (SImode), mem);\n     emit_move_insn (fin_src = gen_reg_rtx (SImode), plus_constant (src, 4));\n \n-    mem = gen_rtx (MEM, SImode, dst);\n+    mem = gen_rtx_MEM (SImode, dst);\n     RTX_UNCHANGING_P (mem) = dst_unchanging_p;\n     MEM_IN_STRUCT_P (mem) = dst_in_struct_p;\n     MEM_SCALAR_P (mem) = dst_scalar_p;\n@@ -3106,7 +3107,7 @@ arm_gen_movstrqi (operands)\n       if (in_words_to_go < 0)\n \tabort ();\n \n-      mem = gen_rtx (MEM, SImode, src);\n+      mem = gen_rtx_MEM (SImode, src);\n       RTX_UNCHANGING_P (mem) = src_unchanging_p;\n       MEM_IN_STRUCT_P (mem) = src_in_struct_p;\n       MEM_SCALAR_P (mem) = src_scalar_p;\n@@ -3127,11 +3128,11 @@ arm_gen_movstrqi (operands)\n       \n       while (last_bytes)\n \t{\n-\t  mem = gen_rtx (MEM, QImode, plus_constant (dst, last_bytes - 1));\n+\t  mem = gen_rtx_MEM (QImode, plus_constant (dst, last_bytes - 1));\n \t  RTX_UNCHANGING_P (mem) = dst_unchanging_p;\n \t  MEM_IN_STRUCT_P (mem) = dst_in_struct_p;\n \t  MEM_SCALAR_P (mem) = dst_scalar_p;\n-\t  emit_move_insn (mem, gen_rtx (SUBREG, QImode, part_bytes_reg, 0));\n+\t  emit_move_insn (mem, gen_rtx_SUBREG (QImode, part_bytes_reg, 0));\n \t  if (--last_bytes)\n \t    {\n \t      tmp = gen_reg_rtx (SImode);\n@@ -3148,11 +3149,11 @@ arm_gen_movstrqi (operands)\n \t  if (part_bytes_reg == NULL)\n \t    abort ();\n \n-\t  mem = gen_rtx (MEM, QImode, dst);\n+\t  mem = gen_rtx_MEM (QImode, dst);\n \t  RTX_UNCHANGING_P (mem) = dst_unchanging_p;\n \t  MEM_IN_STRUCT_P (mem) = dst_in_struct_p;\n \t  MEM_SCALAR_P (mem) = dst_scalar_p;\n-\t  emit_move_insn (mem, gen_rtx (SUBREG, QImode, part_bytes_reg, 0));\n+\t  emit_move_insn (mem, gen_rtx_SUBREG (QImode, part_bytes_reg, 0));\n \t  if (--last_bytes)\n \t    {\n \t      rtx tmp = gen_reg_rtx (SImode);\n@@ -3188,12 +3189,12 @@ gen_rotated_half_load (memref)\n       && ((BYTES_BIG_ENDIAN ? 1 : 0) ^ ((offset & 2) == 0)))\n     return NULL;\n \n-  base = gen_rtx (MEM, SImode, plus_constant (base, offset & ~2));\n+  base = gen_rtx_MEM (SImode, plus_constant (base, offset & ~2));\n \n   if ((BYTES_BIG_ENDIAN ? 1 : 0) ^ ((offset & 2) == 2))\n     return base;\n \n-  return gen_rtx (ROTATE, SImode, base, GEN_INT (16));\n+  return gen_rtx_ROTATE (SImode, base, GEN_INT (16));\n }\n \n static enum machine_mode\n@@ -3393,10 +3394,10 @@ gen_compare_reg (code, x, y, fp)\n      int fp;\n {\n   enum machine_mode mode = SELECT_CC_MODE (code, x, y);\n-  rtx cc_reg = gen_rtx (REG, mode, 24);\n+  rtx cc_reg = gen_rtx_REG (mode, 24);\n \n-  emit_insn (gen_rtx (SET, VOIDmode, cc_reg,\n-                      gen_rtx (COMPARE, mode, x, y)));\n+  emit_insn (gen_rtx_SET (VOIDmode, cc_reg,\n+\t\t\t  gen_rtx_COMPARE (mode, x, y)));\n \n   return cc_reg;\n }\n@@ -3407,37 +3408,35 @@ arm_reload_in_hi (operands)\n {\n   rtx base = find_replacement (&XEXP (operands[1], 0));\n \n-  emit_insn (gen_zero_extendqisi2 (operands[2], gen_rtx (MEM, QImode, base)));\n+  emit_insn (gen_zero_extendqisi2 (operands[2], gen_rtx_MEM (QImode, base)));\n   /* Handle the case where the address is too complex to be offset by 1.  */\n   if (GET_CODE (base) == MINUS\n       || (GET_CODE (base) == PLUS && GET_CODE (XEXP (base, 1)) != CONST_INT))\n     {\n-      rtx base_plus = gen_rtx (REG, SImode, REGNO (operands[0]));\n+      rtx base_plus = gen_rtx_REG (SImode, REGNO (operands[0]));\n \n-      emit_insn (gen_rtx (SET, VOIDmode, base_plus, base));\n+      emit_insn (gen_rtx_SET (VOIDmode, base_plus, base));\n       base = base_plus;\n     }\n \n-  emit_insn (gen_zero_extendqisi2 (gen_rtx (SUBREG, SImode, operands[0], 0),\n-\t\t\t\t   gen_rtx (MEM, QImode, \n-\t\t\t\t\t    plus_constant (base, 1))));\n+  emit_insn (gen_zero_extendqisi2 (gen_rtx_SUBREG (SImode, operands[0], 0),\n+\t\t\t\t   gen_rtx_MEM (QImode, \n+\t\t\t\t\t\tplus_constant (base, 1))));\n   if (BYTES_BIG_ENDIAN)\n-    emit_insn (gen_rtx (SET, VOIDmode, gen_rtx (SUBREG, SImode, \n-\t\t\t\t\t\toperands[0], 0),\n-\t\t\tgen_rtx (IOR, SImode, \n-\t\t\t\t gen_rtx (ASHIFT, SImode,\n-\t\t\t\t\t  gen_rtx (SUBREG, SImode,\n-\t\t\t\t\t\t   operands[0], 0),\n-\t\t\t\t\t  GEN_INT (8)),\n-\t\t\t\t operands[2])));\n+    emit_insn (gen_rtx_SET (VOIDmode, gen_rtx_SUBREG (SImode, operands[0], 0),\n+\t\t\tgen_rtx_IOR (SImode, \n+\t\t\t\t     gen_rtx_ASHIFT\n+\t\t\t\t     (SImode,\n+\t\t\t\t      gen_rtx_SUBREG (SImode, operands[0], 0),\n+\t\t\t\t      GEN_INT (8)),\n+\t\t\t\t     operands[2])));\n   else\n-    emit_insn (gen_rtx (SET, VOIDmode, gen_rtx (SUBREG, SImode, \n-\t\t\t\t\t\toperands[0], 0),\n-\t\t\tgen_rtx (IOR, SImode, \n-\t\t\t\t gen_rtx (ASHIFT, SImode,\n-\t\t\t\t\t  operands[2],\n-\t\t\t\t\t  GEN_INT (8)),\n-\t\t\t\t gen_rtx (SUBREG, SImode, operands[0], 0))));\n+    emit_insn (gen_rtx_SET (VOIDmode, gen_rtx_SUBREG (SImode, operands[0], 0),\n+\t\t\t    gen_rtx_IOR (SImode, \n+\t\t\t\t\t gen_rtx_ASHIFT (SImode, operands[2],\n+\t\t\t\t\t\t\t GEN_INT (8)),\n+\t\t\t\t\t gen_rtx_SUBREG (SImode, operands[0],\n+\t\t\t\t\t\t\t 0))));\n }\n \n void\n@@ -3448,23 +3447,23 @@ arm_reload_out_hi (operands)\n \n   if (BYTES_BIG_ENDIAN)\n     {\n-      emit_insn (gen_movqi (gen_rtx (MEM, QImode, plus_constant (base, 1)),\n-\t\t\t    gen_rtx (SUBREG, QImode, operands[1], 0)));\n+      emit_insn (gen_movqi (gen_rtx_MEM (QImode, plus_constant (base, 1)),\n+\t\t\t    gen_rtx_SUBREG (QImode, operands[1], 0)));\n       emit_insn (gen_lshrsi3 (operands[2],\n-\t\t\t      gen_rtx (SUBREG, SImode, operands[1], 0),\n+\t\t\t      gen_rtx_SUBREG (SImode, operands[1], 0),\n \t\t\t      GEN_INT (8)));\n-      emit_insn (gen_movqi (gen_rtx (MEM, QImode, base),\n-\t\t\t    gen_rtx (SUBREG, QImode, operands[2], 0)));\n+      emit_insn (gen_movqi (gen_rtx_MEM (QImode, base),\n+\t\t\t    gen_rtx_SUBREG (QImode, operands[2], 0)));\n     }\n   else\n     {\n-      emit_insn (gen_movqi (gen_rtx (MEM, QImode, base),\n-\t\t\t    gen_rtx (SUBREG, QImode, operands[1], 0)));\n+      emit_insn (gen_movqi (gen_rtx_MEM (QImode, base),\n+\t\t\t    gen_rtx_SUBREG (QImode, operands[1], 0)));\n       emit_insn (gen_lshrsi3 (operands[2],\n-\t\t\t      gen_rtx (SUBREG, SImode, operands[1], 0),\n+\t\t\t      gen_rtx_SUBREG (SImode, operands[1], 0),\n \t\t\t      GEN_INT (8)));\n-      emit_insn (gen_movqi (gen_rtx (MEM, QImode, plus_constant (base, 1)),\n-\t\t\t    gen_rtx (SUBREG, QImode, operands[2], 0)));\n+      emit_insn (gen_movqi (gen_rtx_MEM (QImode, plus_constant (base, 1)),\n+\t\t\t    gen_rtx_SUBREG (QImode, operands[2], 0)));\n     }\n }\n \f\n@@ -3853,8 +3852,8 @@ arm_reorg (first)\n \t\t    }\n \n \t\t  offset = add_constant (src, mode, &address_only);\n-\t\t  addr = plus_constant (gen_rtx (LABEL_REF, VOIDmode,\n-\t\t\t\t\t\t pool_vector_label),\n+\t\t  addr = plus_constant (gen_rtx_LABEL_REF (VOIDmode,\n+\t\t\t\t\t\t\t   pool_vector_label),\n \t\t\t\t\toffset);\n \n \t\t  /* If we only want the address of the pool entry, or\n@@ -3873,7 +3872,7 @@ arm_reorg (first)\n \t\t      if (mode == SImode)\n \t\t\treg = dst;\n \t\t      else \n-\t\t\treg = gen_rtx (REG, SImode, scratch);\n+\t\t\treg = gen_rtx_REG (SImode, scratch);\n \n \t\t      newinsn = emit_insn_after (gen_movaddr (reg, addr),\n \t\t\t\t\t\t newinsn);\n@@ -3882,15 +3881,17 @@ arm_reorg (first)\n \n \t\t  if (! address_only)\n \t\t    {\n-\t\t      newsrc = gen_rtx (MEM, mode, addr);\n+\t\t      newsrc = gen_rtx_MEM (mode, addr);\n \n \t\t      /* XXX Fixme -- I think the following is bogus.  */\n \t\t      /* Build a jump insn wrapper around the move instead\n \t\t\t of an ordinary insn, because we want to have room for\n \t\t\t the target label rtx in fld[7], which an ordinary\n \t\t\t insn doesn't have. */\n-\t\t      newinsn = emit_jump_insn_after\n-\t\t\t(gen_rtx (SET, VOIDmode, dst, newsrc), newinsn);\n+\t\t      newinsn\n+\t\t\t= emit_jump_insn_after (gen_rtx_SET (VOIDmode, dst,\n+\t\t\t\t\t\t\t     newsrc),\n+\t\t\t\t\t\tnewinsn);\n \t\t      JUMP_LABEL (newinsn) = pool_vector_label;\n \n \t\t      /* But it's still an ordinary insn */\n@@ -3988,7 +3989,7 @@ output_call (operands)\n \n   if (REGNO (operands[0]) == 14)\n     {\n-      operands[0] = gen_rtx (REG, SImode, 12);\n+      operands[0] = gen_rtx_REG (SImode, 12);\n       output_asm_insn (\"mov%?\\t%0, %|lr\", operands);\n     }\n   output_asm_insn (\"mov%?\\t%|lr, %|pc\", operands);\n@@ -4016,7 +4017,7 @@ eliminate_lr2ip (x)\n     case REG:\n       if (REGNO (x0) == 14)\n         {\n-\t  *x = gen_rtx (REG, SImode, 12);\n+\t  *x = gen_rtx_REG (SImode, 12);\n \t  return 1;\n         }\n       return 0;\n@@ -4075,9 +4076,9 @@ output_mov_long_double_fpu_from_arm (operands)\n   if (arm_reg0 == 12)\n     abort();\n \n-  ops[0] = gen_rtx (REG, SImode, arm_reg0);\n-  ops[1] = gen_rtx (REG, SImode, 1 + arm_reg0);\n-  ops[2] = gen_rtx (REG, SImode, 2 + arm_reg0);\n+  ops[0] = gen_rtx_REG (SImode, arm_reg0);\n+  ops[1] = gen_rtx_REG (SImode, 1 + arm_reg0);\n+  ops[2] = gen_rtx_REG (SImode, 2 + arm_reg0);\n   \n   output_asm_insn (\"stm%?fd\\t%|sp!, {%0, %1, %2}\", ops);\n   output_asm_insn (\"ldf%?e\\t%0, [%|sp], #12\", operands);\n@@ -4098,9 +4099,9 @@ output_mov_long_double_arm_from_fpu (operands)\n   if (arm_reg0 == 12)\n     abort();\n \n-  ops[0] = gen_rtx (REG, SImode, arm_reg0);\n-  ops[1] = gen_rtx (REG, SImode, 1 + arm_reg0);\n-  ops[2] = gen_rtx (REG, SImode, 2 + arm_reg0);\n+  ops[0] = gen_rtx_REG (SImode, arm_reg0);\n+  ops[1] = gen_rtx_REG (SImode, 1 + arm_reg0);\n+  ops[2] = gen_rtx_REG (SImode, 2 + arm_reg0);\n \n   output_asm_insn (\"stf%?e\\t%1, [%|sp, #-12]!\", operands);\n   output_asm_insn (\"ldm%?fd\\t%|sp!, {%0, %1, %2}\", ops);\n@@ -4124,17 +4125,17 @@ output_mov_long_double_arm_from_arm (operands)\n     {\n       for (i = 0; i < 3; i++)\n \t{\n-\t  ops[0] = gen_rtx (REG, SImode, dest_start + i);\n-\t  ops[1] = gen_rtx (REG, SImode, src_start + i);\n+\t  ops[0] = gen_rtx_REG (SImode, dest_start + i);\n+\t  ops[1] = gen_rtx_REG (SImode, src_start + i);\n \t  output_asm_insn (\"mov%?\\t%0, %1\", ops);\n \t}\n     }\n   else\n     {\n       for (i = 2; i >= 0; i--)\n \t{\n-\t  ops[0] = gen_rtx (REG, SImode, dest_start + i);\n-\t  ops[1] = gen_rtx (REG, SImode, src_start + i);\n+\t  ops[0] = gen_rtx_REG (SImode, dest_start + i);\n+\t  ops[1] = gen_rtx_REG (SImode, src_start + i);\n \t  output_asm_insn (\"mov%?\\t%0, %1\", ops);\n \t}\n     }\n@@ -4156,8 +4157,8 @@ output_mov_double_fpu_from_arm (operands)\n \n   if (arm_reg0 == 12)\n     abort();\n-  ops[0] = gen_rtx (REG, SImode, arm_reg0);\n-  ops[1] = gen_rtx (REG, SImode, 1 + arm_reg0);\n+  ops[0] = gen_rtx_REG (SImode, arm_reg0);\n+  ops[1] = gen_rtx_REG (SImode, 1 + arm_reg0);\n   output_asm_insn (\"stm%?fd\\t%|sp!, {%0, %1}\", ops);\n   output_asm_insn (\"ldf%?d\\t%0, [%|sp], #8\", operands);\n   return \"\";\n@@ -4177,8 +4178,8 @@ output_mov_double_arm_from_fpu (operands)\n   if (arm_reg0 == 12)\n     abort();\n \n-  ops[0] = gen_rtx (REG, SImode, arm_reg0);\n-  ops[1] = gen_rtx (REG, SImode, 1 + arm_reg0);\n+  ops[0] = gen_rtx_REG (SImode, arm_reg0);\n+  ops[1] = gen_rtx_REG (SImode, 1 + arm_reg0);\n   output_asm_insn (\"stf%?d\\t%1, [%|sp, #-8]!\", operands);\n   output_asm_insn (\"ldm%?fd\\t%|sp!, {%0, %1}\", ops);\n   return \"\";\n@@ -4200,7 +4201,7 @@ output_move_double (operands)\n     {\n       int reg0 = REGNO (operands[0]);\n \n-      otherops[0] = gen_rtx (REG, SImode, 1 + reg0);\n+      otherops[0] = gen_rtx_REG (SImode, 1 + reg0);\n       if (code1 == REG)\n \t{\n \t  int reg1 = REGNO (operands[1]);\n@@ -4405,7 +4406,7 @@ output_move_double (operands)\n \n         default:\n \t  otherops[0] = adj_offsettable_operand (operands[0], 4);\n-\t  otherops[1] = gen_rtx (REG, SImode, 1 + REGNO (operands[1]));\n+\t  otherops[1] = gen_rtx_REG (SImode, 1 + REGNO (operands[1]));\n \t  output_asm_insn (\"str%?\\t%1, %0\", operands);\n \t  output_asm_insn (\"str%?\\t%1, %0\", otherops);\n \t}\n@@ -4876,7 +4877,7 @@ output_return_instruction (operand, really_return, reverse)\n \n       /* Otherwise, trap an attempted return by aborting. */\n       ops[0] = operand;\n-      ops[1] = gen_rtx (SYMBOL_REF, Pmode, \"abort\");\n+      ops[1] = gen_rtx_SYMBOL_REF (Pmode, \"abort\");\n       assemble_external_libcall (ops[1]);\n       output_asm_insn (reverse ? \"bl%D0\\t%a1\" : \"bl%d0\\t%a1\", ops);\n       return \"\";\n@@ -5085,7 +5086,7 @@ output_func_epilogue (f, frame_size)\n   /* A volatile function should never return.  Call abort.  */\n   if (TARGET_ABORT_NORETURN && volatile_func)\n     {\n-      rtx op = gen_rtx (SYMBOL_REF, Pmode, \"abort\");\n+      rtx op = gen_rtx_SYMBOL_REF (Pmode, \"abort\");\n       assemble_external_libcall (op);\n       output_asm_insn (\"bl\\t%a0\", &op);\n       goto epilogue_done;\n@@ -5278,19 +5279,21 @@ emit_multi_reg_push (mask)\n   if (num_regs == 0 || num_regs > 16)\n     abort ();\n \n-  par = gen_rtx (PARALLEL, VOIDmode, rtvec_alloc (num_regs));\n+  par = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (num_regs));\n \n   for (i = 0; i < 16; i++)\n     {\n       if (mask & (1 << i))\n \t{\n \t  XVECEXP (par, 0, 0)\n-\t    = gen_rtx (SET, VOIDmode, gen_rtx (MEM, BLKmode,\n-\t\t\t\t\t       gen_rtx (PRE_DEC, BLKmode,\n-\t\t\t\t\t\t\tstack_pointer_rtx)),\n-\t\t       gen_rtx (UNSPEC, BLKmode,\n-\t\t\t\tgen_rtvec (1, gen_rtx (REG, SImode, i)),\n-\t\t\t\t2));\n+\t    = gen_rtx_SET (VOIDmode,\n+\t\t\t   gen_rtx_MEM (BLKmode,\n+\t\t\t\t\tgen_rtx_PRE_DEC (BLKmode,\n+\t\t\t\t\t\t\t stack_pointer_rtx)),\n+\t\t\t   gen_rtx_UNSPEC (BLKmode,\n+\t\t\t\t\t   gen_rtvec (1,\n+\t\t\t\t\t\t      gen_rtx_REG (SImode, i)),\n+\t\t\t\t\t   2));\n \t  break;\n \t}\n     }\n@@ -5300,7 +5303,7 @@ emit_multi_reg_push (mask)\n       if (mask & (1 << i))\n \t{\n \t  XVECEXP (par, 0, j)\n-\t    = gen_rtx (USE, VOIDmode, gen_rtx (REG, SImode, i));\n+\t    = gen_rtx_USE (VOIDmode, gen_rtx_REG (SImode, i));\n \t  j++;\n \t}\n     }\n@@ -5316,19 +5319,20 @@ emit_sfm (base_reg, count)\n   rtx par;\n   int i;\n \n-  par = gen_rtx (PARALLEL, VOIDmode, rtvec_alloc (count));\n+  par = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (count));\n+\n+  XVECEXP (par, 0, 0)\n+    = gen_rtx_SET (VOIDmode, \n+\t\t   gen_rtx_MEM (BLKmode,\n+\t\t\t\tgen_rtx_PRE_DEC (BLKmode, stack_pointer_rtx)),\n+\t\t   gen_rtx_UNSPEC (BLKmode,\n+\t\t\t\t   gen_rtvec (1, gen_rtx_REG (XFmode, \n+\t\t\t\t\t\t\t      base_reg++)),\n+\t\t\t\t   2));\n \n-  XVECEXP (par, 0, 0) = gen_rtx (SET, VOIDmode, \n-\t\t\t\t gen_rtx (MEM, BLKmode,\n-\t\t\t\t\t  gen_rtx (PRE_DEC, BLKmode,\n-\t\t\t\t\t\t   stack_pointer_rtx)),\n-\t\t\t\t gen_rtx (UNSPEC, BLKmode,\n-\t\t\t\t\t  gen_rtvec (1, gen_rtx (REG, XFmode, \n-\t\t\t\t\t\t\t\t base_reg++)),\n-\t\t\t\t\t  2));\n   for (i = 1; i < count; i++)\n-    XVECEXP (par, 0, i) = gen_rtx (USE, VOIDmode, \n-\t\t\t\t   gen_rtx (REG, XFmode, base_reg++));\n+    XVECEXP (par, 0, i) = gen_rtx_USE (VOIDmode, \n+\t\t\t\t       gen_rtx_REG (XFmode, base_reg++));\n \n   emit_insn (par);\n }\n@@ -5362,7 +5366,7 @@ arm_expand_prologue ()\n   if (frame_pointer_needed)\n     {\n       live_regs_mask |= 0xD800;\n-      emit_insn (gen_movsi (gen_rtx (REG, SImode, 12),\n+      emit_insn (gen_movsi (gen_rtx_REG (SImode, 12),\n \t\t\t    stack_pointer_rtx));\n     }\n \n@@ -5392,11 +5396,12 @@ arm_expand_prologue ()\n \t{\n \t  for (reg = 23; reg > 15; reg--)\n \t    if (regs_ever_live[reg] && ! call_used_regs[reg])\n-\t      emit_insn (gen_rtx (SET, VOIDmode, \n-\t\t\t\t  gen_rtx (MEM, XFmode, \n-\t\t\t\t\t   gen_rtx (PRE_DEC, XFmode,\n-\t\t\t\t\t\t    stack_pointer_rtx)),\n-\t\t\t\t  gen_rtx (REG, XFmode, reg)));\n+\t      emit_insn (gen_rtx_SET\n+\t\t\t (VOIDmode, \n+\t\t\t  gen_rtx_MEM (XFmode, \n+\t\t\t\t       gen_rtx_PRE_DEC (XFmode,\n+\t\t\t\t\t\t\tstack_pointer_rtx)),\n+\t\t\t  gen_rtx_REG (XFmode, reg)));\n \t}\n       else\n \t{\n@@ -5426,15 +5431,15 @@ arm_expand_prologue ()\n     }\n \n   if (frame_pointer_needed)\n-    emit_insn (gen_addsi3 (hard_frame_pointer_rtx, gen_rtx (REG, SImode, 12),\n+    emit_insn (gen_addsi3 (hard_frame_pointer_rtx, gen_rtx_REG (SImode, 12),\n \t\t\t   (GEN_INT\n \t\t\t    (-(4 + current_function_pretend_args_size)))));\n \n   if (amount != const0_rtx)\n     {\n       emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx, amount));\n-      emit_insn (gen_rtx (CLOBBER, VOIDmode, \n-\t\t\t  gen_rtx (MEM, BLKmode, stack_pointer_rtx)));\n+      emit_insn (gen_rtx_CLOBBER (VOIDmode, \n+\t\t\t\t  gen_rtx_MEM (BLKmode, stack_pointer_rtx)));\n     }\n \n   /* If we are profiling, make sure no instructions are scheduled before\n@@ -6107,7 +6112,7 @@ aof_pic_entry (x)\n     {\n       /* This needs to persist throughout the compilation.  */\n       end_temporary_allocation ();\n-      aof_pic_label = gen_rtx (SYMBOL_REF, Pmode, \"x$adcons\");\n+      aof_pic_label = gen_rtx_SYMBOL_REF (Pmode, \"x$adcons\");\n       resume_temporary_allocation ();\n     }\n "}, {"sha": "ce117ff90b21dfdff3abdc49e85f5872ea00f51b", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 40, "deletions": 24, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43cffd112f17b789ce49bb4b29bb98e03e34305a/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43cffd112f17b789ce49bb4b29bb98e03e34305a/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=43cffd112f17b789ce49bb4b29bb98e03e34305a", "patch": "@@ -395,14 +395,23 @@ function tries to return. */\n   {\"\",\t\t\t\tTARGET_DEFAULT }\t\\\n }\n \n-#define TARGET_OPTIONS\t\t\t\\\n-{\t\t\t\t\t\\\n-  {\"cpu=\",  & arm_select[1].string, \"Specify the name of the target CPU\" },\t\\\n-  {\"arch=\", & arm_select[2].string, \"Specify the name of the target architecture\" }, \\\n-  {\"tune=\", & arm_select[3].string, \"\" },\t\\\n-  {\"fp=\",   & target_fp_name, \"Specify the version of the floating point emulator\"}, \\\n-  { \"structure-size-boundary=\", & structure_size_string, \t\\\n-      \"Specify the minumum bit alignment of structures\" } \t\\\n+#define TARGET_OPTIONS\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  {\"cpu=\",\t\t\t\t\t\t\t\\\n+     &arm_select[1].string,\t\t\t\t\t\\\n+     \"Specify the name of the target CPU\"},\t\t\t\\\n+  {\"arch=\",\t\t\t\t\t\t\t\\\n+     &arm_select[2].string,\t\t\t\t\t\\\n+     \"Specify the name of the target architecture\"},\t\t\\\n+  {\"tune=\",\t\t\t\t\t\t\t\\\n+     &arm_select[3].string,\t\t\t\t\t\\\n+     \"Order instructions for best performance on this CPU\"},\t\\\n+  {\"fp=\",\t\t\t\t\t\t\t\\\n+     &target_fp_name,\t\t\t\t\t\t\\\n+     \"Specify the version of the floating point emulator\"},\t\\\n+  {\"structure-size-boundary=\",\t\t\t\t\t\\\n+     &structure_size_string,\t\t\t\t\t\\\n+     \"Specify the minumum bit alignment of structures\"}\t\t\\\n }\n \n /* arm_select[0] is reserved for the default cpu.  */\n@@ -1035,15 +1044,15 @@ do {\t\t\t\t\t\t\t\t\t\\\n    otherwise, FUNC is 0.  */\n #define FUNCTION_VALUE(VALTYPE, FUNC)  \\\n   (GET_MODE_CLASS (TYPE_MODE (VALTYPE)) == MODE_FLOAT && TARGET_HARD_FLOAT \\\n-   ? gen_rtx (REG, TYPE_MODE (VALTYPE), 16) \\\n-   : gen_rtx (REG, TYPE_MODE (VALTYPE), 0))\n+   ? gen_rtx_REG (TYPE_MODE (VALTYPE), 16) \\\n+   : gen_rtx_REG (TYPE_MODE (VALTYPE), 0))\n \n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.  */\n #define LIBCALL_VALUE(MODE)  \\\n   (GET_MODE_CLASS (MODE) == MODE_FLOAT && TARGET_HARD_FLOAT \\\n-   ? gen_rtx (REG, MODE, 16) \\\n-   : gen_rtx (REG, MODE, 0))\n+   ? gen_rtx_REG (MODE, 16) \\\n+   : gen_rtx_REG (MODE, 0))\n \n /* 1 if N is a possible register number for a function value.\n    On the ARM, only r0 and f0 can return results.  */\n@@ -1053,7 +1062,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* How large values are returned */\n /* A C expression which can inhibit the returning of certain function values\n    in registers, based on the type of value. */\n-#define RETURN_IN_MEMORY(TYPE) \t\t\t\t\t\t\\\n+#define RETURN_IN_MEMORY(TYPE)\t\t\t\t\t\t\\\n   (TYPE_MODE ((TYPE)) == BLKmode ||\t\t\t\t\t\\\n    (AGGREGATE_TYPE_P ((TYPE)) && arm_return_in_memory ((TYPE))))\n \n@@ -1082,7 +1091,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    stack if necessary).  */\n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED)  \\\n   ((NAMED)\t\t\t\t\t\t\\\n-   ? ((CUM) >= 16 ? 0 : gen_rtx (REG, MODE, (CUM) / 4))\t\\\n+   ? ((CUM) >= 16 ? 0 : gen_rtx_REG (MODE, (CUM) / 4))\t\\\n    : 0)\n \n /* For an arg passed partly in registers and partly in memory,\n@@ -1275,9 +1284,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n    CXT is an RTX for the static chain value for the function.  */\n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)  \\\n {\t\t\t\t\t\t\t\t\t\\\n-  emit_move_insn (gen_rtx (MEM, SImode, plus_constant ((TRAMP), 8)),\t\\\n+  emit_move_insn (gen_rtx_MEM (SImode, plus_constant ((TRAMP), 8)),\t\\\n \t\t  (CXT));\t\t\t\t\t\t\\\n-  emit_move_insn (gen_rtx (MEM, SImode, plus_constant ((TRAMP), 12)),\t\\\n+  emit_move_insn (gen_rtx_MEM (SImode, plus_constant ((TRAMP), 12)),\t\\\n \t\t  (FNADDR));\t\t\t\t\t\t\\\n }\n \n@@ -1515,7 +1524,9 @@ do\t\t\t\t\t\t\t\t\t\\\n     } */\t\t\t\t\t\t\t\t\\\n   else if (GET_MODE_CLASS (MODE) != MODE_FLOAT\t\t\t\t\\\n \t   && GET_CODE (X) == SYMBOL_REF\t\t\t\t\\\n-\t   && CONSTANT_POOL_ADDRESS_P (X))\t\t\t\t\\\n+\t   && CONSTANT_POOL_ADDRESS_P (X)\t\t\t\t\\\n+\t   && ! (flag_pic\t\t\t\t\t\t\\\n+\t\t && symbol_mentioned_p (get_pool_constant (X))))\t\\\n     goto LABEL;\t\t\t\t\t\t\t\t\\\n   else if ((GET_CODE (X) == PRE_INC || GET_CODE (X) == POST_DEC)\t\\\n \t   && (GET_MODE_SIZE (MODE) <= 4)\t\t\t\t\\\n@@ -1575,14 +1586,14 @@ extern struct rtx_def *legitimize_pic_address ();\n \t      n -= low_n;\t\t\t\t\t\t \\\n \t    }\t\t\t\t\t\t\t\t \\\n \t  base_reg = gen_reg_rtx (SImode);\t\t\t\t \\\n-\t  val = force_operand (gen_rtx (PLUS, SImode, xop0,\t\t \\\n-\t\t\t\t\tGEN_INT (n)), NULL_RTX);\t \\\n+\t  val = force_operand (gen_rtx_PLUS (SImode, xop0,\t\t \\\n+\t\t\t\t\t     GEN_INT (n)), NULL_RTX);\t \\\n \t  emit_move_insn (base_reg, val);\t\t\t\t \\\n \t  (X) = (low_n == 0 ? base_reg\t\t\t\t\t \\\n-\t\t : gen_rtx (PLUS, SImode, base_reg, GEN_INT (low_n)));\t \\\n+\t\t : gen_rtx_PLUS (SImode, base_reg, GEN_INT (low_n)));\t \\\n \t}\t\t\t\t\t\t\t\t \\\n       else if (xop0 != XEXP (X, 0) || xop1 != XEXP (x, 1))\t\t \\\n-\t(X) = gen_rtx (PLUS, SImode, xop0, xop1);\t\t\t \\\n+\t(X) = gen_rtx_PLUS (SImode, xop0, xop1);\t\t\t \\\n     }\t\t\t\t\t\t\t\t\t \\\n   else if (GET_CODE (X) == MINUS)\t\t\t\t\t \\\n     {\t\t\t\t\t\t\t\t\t \\\n@@ -1594,7 +1605,7 @@ extern struct rtx_def *legitimize_pic_address ();\n       if (CONSTANT_P (xop1) && ! symbol_mentioned_p (xop1))\t\t \\\n \txop1 = force_reg (SImode, xop1);\t\t\t\t \\\n       if (xop0 != XEXP (X, 0) || xop1 != XEXP (X, 1))\t\t\t \\\n-\t(X) = gen_rtx (MINUS, SImode, xop0, xop1);\t\t\t \\\n+\t(X) = gen_rtx_MINUS (SImode, xop0, xop1);\t\t\t \\\n     }\t\t\t\t\t\t\t\t\t \\\n   if (flag_pic)\t\t\t\t\t\t\t\t \\\n     (X) = legitimize_pic_address (OLDX, MODE, NULL_RTX);\t\t \\\n@@ -1768,7 +1779,12 @@ extern int arm_pic_register;\n \n #define FINALIZE_PIC arm_finalize_pic ()\n \n-#define LEGITIMATE_PIC_OPERAND_P(X) (! symbol_mentioned_p (X))\n+/* We can't directly access anything that contains a symbol, nor can\n+   we indirect via the constant pool */\n+#define LEGITIMATE_PIC_OPERAND_P(X)\t\t\t\t\\\n+\t(! symbol_mentioned_p (X)\t\t\t\t\\\n+\t && (! CONSTANT_POOL_ADDRESS_P (X)\t\t\t\\\n+\t     || ! symbol_mentioned_p (get_pool_constant (X))))\n  \n \n \f\n@@ -2041,7 +2057,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define RETURN_ADDR_RTX(COUNT, FRAME)\t\\\n   ((COUNT == 0)\t\t\t\t\\\n-   ? gen_rtx (MEM, Pmode, plus_constant (FRAME, -4)) \\\n+   ? gen_rtx_MEM (Pmode, plus_constant (FRAME, -4)) \\\n    : NULL_RTX)\n \n /* Used to mask out junk bits from the return address, such as"}, {"sha": "a2079118d1aa695bc7d9c648f47536f8ac799e5f", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 44, "deletions": 41, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43cffd112f17b789ce49bb4b29bb98e03e34305a/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43cffd112f17b789ce49bb4b29bb98e03e34305a/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=43cffd112f17b789ce49bb4b29bb98e03e34305a", "patch": "@@ -1298,8 +1298,8 @@\n       rtx op1 = gen_reg_rtx (SImode);\n \n       emit_insn (gen_ashlsi3 (op0, operands[3], GEN_INT (32 - width)));\n-      emit_insn (gen_iorsi3 (op1, gen_rtx (LSHIFTRT, SImode, operands[0],\n-\t\t\t\t\t   operands[1]),\n+      emit_insn (gen_iorsi3 (op1, gen_rtx_LSHIFTRT (SImode, operands[0],\n+\t\t\t\t\t\t    operands[1]),\n \t\t\t     op0));\n       emit_insn (gen_rotlsi3 (subtarget, op1, operands[1]));\n     }\n@@ -1315,8 +1315,8 @@\n       emit_insn (gen_ashlsi3 (op0, operands[3], GEN_INT (32 - width)));\n       emit_insn (gen_ashlsi3 (op1, operands[0], operands[1]));\n       emit_insn (gen_iorsi3 (subtarget,\n-\t\t\t     gen_rtx (LSHIFTRT, SImode, op1,\n-\t\t\t\t      operands[1]), op0));\n+\t\t\t     gen_rtx_LSHIFTRT (SImode, op1, operands[1]),\n+\t\t\t     op0));\n     }\n   else\n     {\n@@ -1353,13 +1353,13 @@\n \t    }\n \n \t  if (start_bit != 0)\n-\t    op0 = gen_rtx (ASHIFT, SImode, op0, operands[2]);\n+\t    op0 = gen_rtx_ASHIFT (SImode, op0, operands[2]);\n \t    \n \t  emit_insn (gen_andsi_notsi_si (op2, operands[0], op0));\n \t}\n \n       if (start_bit != 0)\n-\top1 = gen_rtx (ASHIFT, SImode, op1, operands[2]);\n+\top1 = gen_rtx_ASHIFT (SImode, op1, operands[2]);\n \n       emit_insn (gen_iorsi3 (subtarget, op1, op2));\n     }\n@@ -2187,8 +2187,8 @@\n {\n   if (arm_arch4 && GET_CODE (operands[1]) == MEM)\n     {\n-      emit_insn (gen_rtx (SET, VOIDmode, operands[0],\n-\t\t\t  gen_rtx (ZERO_EXTEND, SImode, operands[1])));\n+      emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+\t\t\t      gen_rtx_ZERO_EXTEND (SImode, operands[1])));\n       DONE;\n     }\n   if (TARGET_SHORT_BY_BYTES && GET_CODE (operands[1]) == MEM)\n@@ -2289,8 +2289,8 @@\n { \n   if (arm_arch4 && GET_CODE (operands[1]) == MEM)\n     {\n-      emit_insn (gen_rtx (SET, VOIDmode, operands[0],\n-\t\t gen_rtx (SIGN_EXTEND, SImode, operands[1])));\n+      emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+\t\t gen_rtx_SIGN_EXTEND (SImode, operands[1])));\n       DONE;\n     }\n \n@@ -2318,10 +2318,10 @@\n   rtx mem1, mem2;\n   rtx addr = copy_to_mode_reg (SImode, XEXP (operands[1], 0));\n \n-  mem1 = gen_rtx (MEM, QImode, addr);\n+  mem1 = gen_rtx_MEM (QImode, addr);\n   MEM_COPY_ATTRIBUTES (mem1, operands[1]);\n   RTX_UNCHANGING_P (mem1) = RTX_UNCHANGING_P (operands[1]);\n-  mem2 = gen_rtx (MEM, QImode, plus_constant (addr, 1));\n+  mem2 = gen_rtx_MEM (QImode, plus_constant (addr, 1));\n   MEM_COPY_ATTRIBUTES (mem2, operands[1]);\n   RTX_UNCHANGING_P (mem2) = RTX_UNCHANGING_P (operands[1]);\n   operands[0] = gen_lowpart (SImode, operands[0]);\n@@ -2393,8 +2393,8 @@\n {\n   if (arm_arch4 && GET_CODE (operands[1]) == MEM)\n     {\n-      emit_insn (gen_rtx (SET, VOIDmode, operands[0],\n-\t\t\t  gen_rtx (SIGN_EXTEND, HImode, operands[1])));\n+      emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+\t\t\t      gen_rtx_SIGN_EXTEND (HImode, operands[1])));\n       DONE;\n     }\n   if (! s_register_operand (operands[1], QImode))\n@@ -2429,8 +2429,8 @@\n   {\n     HOST_WIDE_INT offset;\n \n-    operands[3] = gen_rtx (REG, SImode, REGNO (operands[0]));\n-    operands[2] = gen_rtx (MEM, QImode, operands[3]);\n+    operands[3] = gen_rtx_REG (SImode, REGNO (operands[0]));\n+    operands[2] = gen_rtx_MEM (QImode, operands[3]);\n     MEM_COPY_ATTRIBUTES (operands[2], operands[1]);\n     RTX_UNCHANGING_P (operands[2]) = RTX_UNCHANGING_P (operands[1]);\n     operands[1] = XEXP (operands[1], 0);\n@@ -2448,8 +2448,9 @@\n     else if (GET_CODE (operands[1]) == PLUS\n \t     && GET_CODE (XEXP (operands[1], 1)) != CONST_INT\n \t     && ! s_register_operand (XEXP (operands[1], 1), VOIDmode))\n-      operands[1] = gen_rtx (PLUS, GET_MODE (operands[1]),\n-\t\t\t     XEXP (operands[1], 1), XEXP (operands[1], 0));\n+      operands[1] = gen_rtx_PLUS (GET_MODE (operands[1]),\n+\t\t\t\t  XEXP (operands[1], 1),\n+\t\t\t\t  XEXP (operands[1], 0));\n   }\n \")\n \n@@ -2465,8 +2466,8 @@\n {\n   if (arm_arch4 && GET_CODE (operands[1]) == MEM)\n     {\n-      emit_insn (gen_rtx (SET, VOIDmode, operands[0],\n-\t\t\t  gen_rtx (SIGN_EXTEND, SImode, operands[1])));\n+      emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+\t\t\t      gen_rtx_SIGN_EXTEND (SImode, operands[1])));\n       DONE;\n     }\n   if (! s_register_operand (operands[1], QImode))\n@@ -2500,7 +2501,7 @@\n   {\n     HOST_WIDE_INT offset;\n \n-    operands[2] = gen_rtx (MEM, QImode, operands[0]);\n+    operands[2] = gen_rtx_MEM (QImode, operands[0]);\n     MEM_COPY_ATTRIBUTES (operands[2], operands[1]);\n     RTX_UNCHANGING_P (operands[2]) = RTX_UNCHANGING_P (operands[1]);\n     operands[1] = XEXP (operands[1], 0);\n@@ -2518,8 +2519,9 @@\n     else if (GET_CODE (operands[1]) == PLUS\n \t     && GET_CODE (XEXP (operands[1], 1)) != CONST_INT\n \t     && ! s_register_operand (XEXP (operands[1], 1), VOIDmode))\n-      operands[1] = gen_rtx (PLUS, GET_MODE (operands[1]),\n-\t\t\t     XEXP (operands[1], 1), XEXP (operands[1], 0));\n+      operands[1] = gen_rtx_PLUS (GET_MODE (operands[1]),\n+\t\t\t\t  XEXP (operands[1], 1),\n+\t\t\t\t  XEXP (operands[1], 0));\n   }\n \")\n \n@@ -2898,7 +2900,7 @@\n \t    }\n \n \t  emit_insn (gen_movsi (reg, GEN_INT (val)));\n-\t  operands[1] = gen_rtx (SUBREG, HImode, reg, 0);\n+\t  operands[1] = gen_rtx_SUBREG (HImode, reg, 0);\n \t}\n       else if (! arm_arch4)\n \t{\n@@ -2919,8 +2921,8 @@\n \t\t      HOST_WIDE_INT new_offset = INTVAL (offset) & ~2;\n \t\t      rtx new;\n \n-\t\t      new = gen_rtx (MEM, SImode,\n-\t\t\t\t     plus_constant (base, new_offset));\n+\t\t      new = gen_rtx_MEM (SImode,\n+\t\t\t\t\t plus_constant (base, new_offset));\n \t              MEM_COPY_ATTRIBUTES (new, operands[1]);\n \t\t      RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (operands[1]);\n \t\t      emit_insn (gen_movsi (reg, new));\n@@ -2955,17 +2957,18 @@\n \t\t      if ((INTVAL (offset) & 2) == 2)\n \t\t\t{\n \t\t\t  HOST_WIDE_INT new_offset = INTVAL (offset) ^ 2;\n-\t\t\t  new = gen_rtx (MEM, SImode,\n-\t\t\t\t\t plus_constant (base, new_offset));\n+\t\t\t  new = gen_rtx_MEM (SImode,\n+\t\t\t\t\t     plus_constant (base, new_offset));\n                           MEM_COPY_ATTRIBUTES (new, operands[1]);\n \t\t\t  RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (operands[1]);\n \t\t\t  emit_insn (gen_movsi (reg, new));\n \t\t\t}\n \t\t      else\n \t\t\t{\n-\t\t\t  new = gen_rtx (MEM, SImode, XEXP (operands[1], 0));\n+\t\t\t  new = gen_rtx_MEM (SImode, XEXP (operands[1], 0));\n \t                  MEM_COPY_ATTRIBUTES (new, operands[1]);\n-\t\t\t  RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (operands[1]);\n+\t\t\t  RTX_UNCHANGING_P (new)\n+\t\t\t    = RTX_UNCHANGING_P (operands[1]);\n \t\t\t  emit_insn (gen_rotated_loadsi (reg, new));\n \t\t\t}\n \n@@ -2990,7 +2993,7 @@\n       if (GET_CODE (operands[0]) != REG)\n \tabort ();\n \n-      operands[0] = gen_rtx (SUBREG, SImode, operands[0], 0);\n+      operands[0] = gen_rtx_SUBREG (SImode, operands[0], 0);\n       emit_insn (gen_movsi (operands[0], operands[1]));\n       DONE;\n     }\n@@ -3007,7 +3010,7 @@\n   rtx ops[2];\n \n   ops[0] = operands[0];\n-  ops[1] = gen_rtx (MEM, SImode, plus_constant (XEXP (operands[1], 0), 2));\n+  ops[1] = gen_rtx_MEM (SImode, plus_constant (XEXP (operands[1], 0), 2));\n   output_asm_insn (\\\"ldr%?\\\\t%0, %1\\\\t%@ load-rotate\\\", ops);\n   return \\\"\\\";\n }\"\n@@ -3025,10 +3028,10 @@\n   rtx mem1, mem2;\n   rtx addr = copy_to_mode_reg (SImode, XEXP (operands[1], 0));\n \n-  mem1 = gen_rtx (MEM, QImode, addr);\n+  mem1 = gen_rtx_MEM (QImode, addr);\n   MEM_COPY_ATTRIBUTES (mem1, operands[1]);\n   RTX_UNCHANGING_P (mem1) = RTX_UNCHANGING_P (operands[1]);\n-  mem2 = gen_rtx (MEM, QImode, plus_constant (addr, 1));\n+  mem2 = gen_rtx_MEM (QImode, plus_constant (addr, 1));\n   MEM_COPY_ATTRIBUTES (mem2, operands[1]);\n   RTX_UNCHANGING_P (mem2) = RTX_UNCHANGING_P (operands[1]);\n   operands[0] = gen_lowpart (SImode, operands[0]);\n@@ -3163,7 +3166,7 @@\n \t  rtx reg = gen_reg_rtx (SImode);\n \n \t  emit_insn (gen_movsi (reg, operands[1]));\n-\t  operands[1] = gen_rtx (SUBREG, QImode, reg, 0);\n+\t  operands[1] = gen_rtx_SUBREG (QImode, reg, 0);\n \t}\n       if (GET_CODE (operands[0]) == MEM)\n \toperands[1] = force_reg (QImode, operands[1]);\n@@ -3251,8 +3254,8 @@\n     operands[2] = XEXP (operands[0], 0);\n   else if (code == POST_INC || code == PRE_DEC)\n     {\n-      operands[0] = gen_rtx (SUBREG, DImode, operands[0], 0);\n-      operands[1] = gen_rtx (SUBREG, DImode, operands[1], 0);\n+      operands[0] = gen_rtx_SUBREG (DImode, operands[0], 0);\n+      operands[1] = gen_rtx_SUBREG (DImode, operands[1], 0);\n       emit_insn (gen_movdi (operands[0], operands[1]));\n       DONE;\n     }\n@@ -3268,8 +3271,8 @@\n     emit_insn (gen_addsi3 (operands[2], XEXP (XEXP (operands[0], 0), 0),\n \t\t\t   XEXP (XEXP (operands[0], 0), 1)));\n \n-  emit_insn (gen_rtx (SET, VOIDmode, gen_rtx (MEM, DFmode, operands[2]),\n-\t\t      operands[1]));\n+  emit_insn (gen_rtx_SET (VOIDmode, gen_rtx_MEM (DFmode, operands[2]),\n+\t\t\t  operands[1]));\n \n   if (code == POST_DEC)\n     emit_insn (gen_addsi3 (operands[2], operands[2], GEN_INT (-8)));\n@@ -6140,8 +6143,8 @@\n   enum machine_mode mode = SELECT_CC_MODE (GET_CODE (operands[1]), operands[2],\n \t\t\t\t\t   operands[3]);\n \n-  operands[6] = gen_rtx (REG, mode, 24);\n-  operands[7] = gen_rtx (COMPARE, mode, operands[2], operands[3]);\n+  operands[6] = gen_rtx_REG (mode, 24);\n+  operands[7] = gen_rtx_COMPARE (mode, operands[2], operands[3]);\n }\n \")\n "}]}