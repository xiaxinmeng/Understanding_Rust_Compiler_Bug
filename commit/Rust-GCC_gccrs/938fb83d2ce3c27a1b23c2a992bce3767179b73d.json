{"sha": "938fb83d2ce3c27a1b23c2a992bce3767179b73d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM4ZmI4M2QyY2UzYzI3YTFiMjNjMmE5OTJiY2UzNzY3MTc5YjczZA==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-05-08T11:40:33Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-05-08T11:40:33Z"}, "message": "optabs.c: Make vector_compare_rtx cope with VOID mode constants (e.g. const0_rtx)\n\n\t* optabs.c (vector_compare_rtx): Handle RTL operands having VOIDmode.\n\nFrom-SVN: r222907", "tree": {"sha": "4ac193b0abb20f6a0ee9ea64d676a9fa569e887a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ac193b0abb20f6a0ee9ea64d676a9fa569e887a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/938fb83d2ce3c27a1b23c2a992bce3767179b73d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/938fb83d2ce3c27a1b23c2a992bce3767179b73d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/938fb83d2ce3c27a1b23c2a992bce3767179b73d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/938fb83d2ce3c27a1b23c2a992bce3767179b73d/comments", "author": null, "committer": null, "parents": [{"sha": "07ad804bfdbe0fa3406c5f2ff51d7c4c29a783c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07ad804bfdbe0fa3406c5f2ff51d7c4c29a783c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07ad804bfdbe0fa3406c5f2ff51d7c4c29a783c8"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "1d3b0a976c5a5276f1d26b21616d63153425f32e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938fb83d2ce3c27a1b23c2a992bce3767179b73d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938fb83d2ce3c27a1b23c2a992bce3767179b73d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=938fb83d2ce3c27a1b23c2a992bce3767179b73d", "patch": "@@ -1,3 +1,7 @@\n+2015-05-08  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* optabs.c (vector_compare_rtx): Handle RTL operands having VOIDmode.\n+\n 2015-05-08  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n \n \t* config/glibc-stdint.h (OPTION_MUSL): Define."}, {"sha": "fbf0e3834fb76f3e0374f783d6a4e836ade69ac2", "filename": "gcc/optabs.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938fb83d2ce3c27a1b23c2a992bce3767179b73d/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938fb83d2ce3c27a1b23c2a992bce3767179b73d/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=938fb83d2ce3c27a1b23c2a992bce3767179b73d", "patch": "@@ -6544,18 +6544,28 @@ vector_compare_rtx (enum tree_code tcode, tree t_op0, tree t_op1,\n {\n   struct expand_operand ops[2];\n   rtx rtx_op0, rtx_op1;\n+  machine_mode m0, m1;\n   enum rtx_code rcode = get_rtx_code (tcode, unsignedp);\n \n   gcc_assert (TREE_CODE_CLASS (tcode) == tcc_comparison);\n \n-  /* Expand operands.  */\n+  /* Expand operands.  For vector types with scalar modes, e.g. where int64x1_t\n+     has mode DImode, this can produce a constant RTX of mode VOIDmode; in such\n+     cases, use the original mode.  */\n   rtx_op0 = expand_expr (t_op0, NULL_RTX, TYPE_MODE (TREE_TYPE (t_op0)),\n \t\t\t EXPAND_STACK_PARM);\n+  m0 = GET_MODE (rtx_op0);\n+  if (m0 == VOIDmode)\n+    m0 = TYPE_MODE (TREE_TYPE (t_op0));\n+\n   rtx_op1 = expand_expr (t_op1, NULL_RTX, TYPE_MODE (TREE_TYPE (t_op1)),\n \t\t\t EXPAND_STACK_PARM);\n+  m1 = GET_MODE (rtx_op1);\n+  if (m1 == VOIDmode)\n+    m1 = TYPE_MODE (TREE_TYPE (t_op1));\n \n-  create_input_operand (&ops[0], rtx_op0, GET_MODE (rtx_op0));\n-  create_input_operand (&ops[1], rtx_op1, GET_MODE (rtx_op1));\n+  create_input_operand (&ops[0], rtx_op0, m0);\n+  create_input_operand (&ops[1], rtx_op1, m1);\n   if (!maybe_legitimize_operands (icode, 4, 2, ops))\n     gcc_unreachable ();\n   return gen_rtx_fmt_ee (rcode, VOIDmode, ops[0].value, ops[1].value);"}]}