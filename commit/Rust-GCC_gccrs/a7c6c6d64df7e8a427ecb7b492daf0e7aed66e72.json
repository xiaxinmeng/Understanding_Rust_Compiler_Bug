{"sha": "a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdjNmM2ZDY0ZGY3ZThhNDI3ZWNiN2I0OTJkYWYwZTdhZWQ2NmU3Mg==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2012-05-16T08:43:41Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2012-05-16T08:43:41Z"}, "message": "rs6000-opts.h (enum processor_type): Add PROCESSOR_PPC8548.\n\n        * config/rs6000/rs6000-opts.h (enum processor_type): Add\n        PROCESSOR_PPC8548.\n        * config/rs6000/rs6000-cpus.def: Reference it for cpu=\"8548\".\n        * config/rs6000/rs6000.md (cpu attribute definition): Add ppc8548.\n        * config/rs6000/8540.md: indicate that the units/patterns apply to\n        ppc8548 as well.\n\n        * config/rs6000/rs6000.c (rs6000_option_override_internal): Rename\n        default_cpu into implicit_cpu, conveying what --with-cpu was passed at\n        configure time. Treat implicit_cpu as have_CPU. Pick defaults for SPE\n        related flags,  check that what is queried is supported by the selected\n        configuration. Rework the single/double_float and MASK_STRING resets to\n        hit for all the E500 cores (854x + E500MC variants). Select the ppc8540\n        costs for PROCESSOR_PPC8548 as well.\n        (rs6000_issue_rate): case CPU_PPC8548 together with CPU_PPC8540.\n        (rs6000_use_sched_lookahead): Likewise, rewriting function as a case\n        statement instead of a sequence of ifs.\n\n        * config/rs6000/rs6000.h (TARGET_E500): Remove.\n        (TARGET_NO_LWSYNC): Adjust accordingly.\n        * config/rs6000/e500.h (TARGET_E500): Remove.\n        (CHECK_E500_OPTIONS): Adjust accordingly.\n        * config/rs6000/eabispe.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Remove.\n        (TARGET_DEFAULT): Reformat definition to match the one in linuxspe.h.\n        * config/rs6000/linuxspe.h: Likewise.\n        * config/rs6000/vxworks.h: Remove bogus TARGET_E500 overrides and\n        superfluous comments.\n        * config/rs6000/e500-double.h: Remove.\n\n        * config.gcc (pick a default with_cpu): For powerpc*-*-*spe*,\n        default to with_cpu=8548 if --enable-e500-double, and to 8540\n        otherwise.\n        (set misc flags section): For powerpc*|rs6000*, remove inclusion\n        of e500-double.h for --enable-e500-double.\n\nFrom-SVN: r187581", "tree": {"sha": "235f9993efdc30503ddf345d237fb7acbaadb8dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/235f9993efdc30503ddf345d237fb7acbaadb8dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "af0a7a92278e8121c2006e85624da46712b24a49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af0a7a92278e8121c2006e85624da46712b24a49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af0a7a92278e8121c2006e85624da46712b24a49"}], "stats": {"total": 359, "additions": 178, "deletions": 181}, "files": [{"sha": "690d86c7c41290515f9a9bba79ad3b48f0e63775", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72", "patch": "@@ -1,3 +1,40 @@\n+2012-05-16  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/rs6000/rs6000-opts.h (enum processor_type): Add\n+\tPROCESSOR_PPC8548.\n+\t* config/rs6000/rs6000-cpus.def: Reference it for cpu=\"8548\".\n+\t* config/rs6000/rs6000.md (cpu attribute definition): Add ppc8548.\n+\t* config/rs6000/8540.md: indicate that the units/patterns apply to\n+\tppc8548 as well.\n+\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Rename\n+\tdefault_cpu into implicit_cpu, conveying what --with-cpu was passed at\n+\tconfigure time. Treat implicit_cpu as have_CPU. Pick defaults for SPE\n+\trelated flags,\tcheck that what is queried is supported by the selected\n+\tconfiguration. Rework the single/double_float and MASK_STRING resets to\n+\thit for all the E500 cores (854x + E500MC variants). Select the ppc8540\n+\tcosts for PROCESSOR_PPC8548 as well.\n+\t(rs6000_issue_rate): case CPU_PPC8548 together with CPU_PPC8540.\n+\t(rs6000_use_sched_lookahead): Likewise, rewriting function as a case\n+\tstatement instead of a sequence of ifs.\n+\n+\t* config/rs6000/rs6000.h (TARGET_E500): Remove.\n+\t(TARGET_NO_LWSYNC): Adjust accordingly.\n+\t* config/rs6000/e500.h (TARGET_E500): Remove.\n+\t(CHECK_E500_OPTIONS): Adjust accordingly.\n+\t* config/rs6000/eabispe.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Remove.\n+\t(TARGET_DEFAULT): Reformat definition to match the one in linuxspe.h.\n+\t* config/rs6000/linuxspe.h: Likewise.\n+\t* config/rs6000/vxworks.h: Remove bogus TARGET_E500 overrides and\n+\tsuperfluous comments.\n+\t* config/rs6000/e500-double.h: Remove.\n+\n+\t* config.gcc (pick a default with_cpu): For powerpc*-*-*spe*,\n+\tdefault to with_cpu=8548 if --enable-e500-double, and to 8540\n+\totherwise.\n+\t(set misc flags section): For powerpc*|rs6000*, remove inclusion\n+\tof e500-double.h for --enable-e500-double.\n+\n 2012-05-16  Olivier Hainque  <hainque@adacore.com>\n \n \t* Makefile.in (s-header-vars): Resort to -n instead of trailing"}, {"sha": "5d73470bebdaf83b73ba90195c349d0520e281eb", "filename": "gcc/config.gcc", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72", "patch": "@@ -2828,6 +2828,13 @@ if test x$with_cpu = x ; then\n     mips*-*-vxworks)\n       with_arch=mips2\n       ;;\n+    powerpc*-*-*spe*)\n+      if test x$enable_e500_double = xyes; then\n+         with_cpu=8548\n+      else\n+         with_cpu=8540\n+      fi       \n+      ;;\n     sparc-leon*-*)\n       with_cpu=v8;\n       ;;\n@@ -3509,11 +3516,6 @@ case ${target} in\n \t\tc_target_objs=\"${c_target_objs} rs6000-c.o\"\n \t\tcxx_target_objs=\"${cxx_target_objs} rs6000-c.o\"\n \t\ttmake_file=\"rs6000/t-rs6000 ${tmake_file}\"\n-\n-                if test x$enable_e500_double = xyes\n-                then\n-                        tm_file=\"$tm_file rs6000/e500-double.h\"\n-                fi\n \t\t;;\n \n \tsh[123456ble]*-*-* | sh-*-*)"}, {"sha": "c767c0d8aa30e88da53f571d75088f613dfc63bc", "filename": "gcc/config/rs6000/8540.md", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig%2Frs6000%2F8540.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig%2Frs6000%2F8540.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F8540.md?ref=a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72", "patch": "@@ -87,32 +87,32 @@\n   (and (eq_attr \"type\" \"integer,insert_word,insert_dword,cmp,compare,\\\n                         delayed_compare,var_delayed_compare,fast_compare,\\\n                         shift,trap,var_shift_rotate,cntlz,exts,isel\")\n-       (eq_attr \"cpu\" \"ppc8540\"))\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_su_stage0+ppc8540_retire\")\n \n (define_insn_reservation \"ppc8540_two\" 1\n   (and (eq_attr \"type\" \"two\")\n-       (eq_attr \"cpu\" \"ppc8540\"))\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_su_stage0+ppc8540_retire,\\\n    ppc8540_issue+ppc8540_su_stage0+ppc8540_retire\")\n \n (define_insn_reservation \"ppc8540_three\" 1\n   (and (eq_attr \"type\" \"three\")\n-       (eq_attr \"cpu\" \"ppc8540\"))\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_su_stage0+ppc8540_retire,\\\n    ppc8540_issue+ppc8540_su_stage0+ppc8540_retire,\\\n    ppc8540_issue+ppc8540_su_stage0+ppc8540_retire\")\n \n ;; Branch.  Actually this latency time is not used by the scheduler.\n (define_insn_reservation \"ppc8540_branch\" 1\n   (and (eq_attr \"type\" \"jmpreg,branch,isync\")\n-       (eq_attr \"cpu\" \"ppc8540\"))\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_bu,ppc8540_retire\")\n \n ;; Multiply\n (define_insn_reservation \"ppc8540_multiply\" 4\n   (and (eq_attr \"type\" \"imul,imul2,imul3,imul_compare\")\n-       (eq_attr \"cpu\" \"ppc8540\"))\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_mu_stage0,ppc8540_mu_stage1,\\\n    ppc8540_mu_stage2,ppc8540_mu_stage3+ppc8540_retire\")\n \n@@ -122,102 +122,102 @@\n ;; time.\n (define_insn_reservation \"ppc8540_divide\" 14\n   (and (eq_attr \"type\" \"idiv\")\n-       (eq_attr \"cpu\" \"ppc8540\"))\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_mu_stage0+ppc8540_mu_div,\\\n    ppc8540_mu_div*13\")\n \n ;; CR logical\n (define_insn_reservation \"ppc8540_cr_logical\" 1\n   (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n-       (eq_attr \"cpu\" \"ppc8540\"))\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_bu,ppc8540_retire\")\n \n ;; Mfcr\n (define_insn_reservation \"ppc8540_mfcr\" 1\n   (and (eq_attr \"type\" \"mfcr\")\n-       (eq_attr \"cpu\" \"ppc8540\"))\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_su1_stage0+ppc8540_retire\")\n \n ;; Mtcrf\n (define_insn_reservation \"ppc8540_mtcrf\" 1\n   (and (eq_attr \"type\" \"mtcr\")\n-       (eq_attr \"cpu\" \"ppc8540\"))\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_su1_stage0+ppc8540_retire\")\n \n ;; Mtjmpr\n (define_insn_reservation \"ppc8540_mtjmpr\" 1\n   (and (eq_attr \"type\" \"mtjmpr,mfjmpr\")\n-       (eq_attr \"cpu\" \"ppc8540\"))\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_su_stage0+ppc8540_retire\")\n \n ;; Loads\n (define_insn_reservation \"ppc8540_load\" 3\n   (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,\\\n \t\t\tload_l,sync\")\n-       (eq_attr \"cpu\" \"ppc8540\"))\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_lsu,nothing,ppc8540_retire\")\n \n ;; Stores.\n (define_insn_reservation \"ppc8540_store\" 3\n   (and (eq_attr \"type\" \"store,store_ux,store_u,store_c\")\n-       (eq_attr \"cpu\" \"ppc8540\"))\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_lsu,nothing,ppc8540_retire\")\n \n ;; Simple FP\n (define_insn_reservation \"ppc8540_simple_float\" 1\n   (and (eq_attr \"type\" \"fpsimple\")\n-       (eq_attr \"cpu\" \"ppc8540\"))\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_su_stage0+ppc8540_retire\")\n \n ;; FP\n (define_insn_reservation \"ppc8540_float\" 4\n   (and (eq_attr \"type\" \"fp\")\n-       (eq_attr \"cpu\" \"ppc8540\"))\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_mu_stage0,ppc8540_mu_stage1,\\\n    ppc8540_mu_stage2,ppc8540_mu_stage3+ppc8540_retire\")\n \n ;; float divides.  We omit reserving a retire unit and miu_stage3\n ;; because of the result automata will be huge.\n (define_insn_reservation \"ppc8540_float_vector_divide\" 29\n   (and (eq_attr \"type\" \"vecfdiv\")\n-       (eq_attr \"cpu\" \"ppc8540\"))\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_mu_stage0+ppc8540_mu_div,\\\n    ppc8540_mu_div*28\")\n \n ;; Brinc\n (define_insn_reservation \"ppc8540_brinc\" 1\n   (and (eq_attr \"type\" \"brinc\")\n-       (eq_attr \"cpu\" \"ppc8540\"))\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_su_stage0+ppc8540_retire\")\n \n ;; Simple vector\n (define_insn_reservation \"ppc8540_simple_vector\" 1\n   (and (eq_attr \"type\" \"vecsimple\")\n-       (eq_attr \"cpu\" \"ppc8540\"))\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_su1_stage0+ppc8540_retire\")\n \n ;; Simple vector compare\n (define_insn_reservation \"ppc8540_simple_vector_compare\" 1\n   (and (eq_attr \"type\" \"veccmpsimple\")\n-       (eq_attr \"cpu\" \"ppc8540\"))\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_su_stage0+ppc8540_retire\")\n \n ;; Vector compare\n (define_insn_reservation \"ppc8540_vector_compare\" 1\n   (and (eq_attr \"type\" \"veccmp\")\n-       (eq_attr \"cpu\" \"ppc8540\"))\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_su1_stage0+ppc8540_retire\")\n \n ;; evsplatfi evsplati\n (define_insn_reservation \"ppc8540_vector_perm\" 1\n   (and (eq_attr \"type\" \"vecperm\")\n-       (eq_attr \"cpu\" \"ppc8540\"))\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_su1_stage0+ppc8540_retire\")\n \n ;; Vector float\n (define_insn_reservation \"ppc8540_float_vector\" 4\n   (and (eq_attr \"type\" \"vecfloat\")\n-       (eq_attr \"cpu\" \"ppc8540\"))\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_mu_stage0,ppc8540_mu_stage1,\\\n    ppc8540_mu_stage2,ppc8540_mu_stage3+ppc8540_retire\")\n \n@@ -226,25 +226,25 @@\n ;; of miu_stage3 here because we use the average latency time.\n (define_insn_reservation \"ppc8540_vector_divide\" 14\n   (and (eq_attr \"type\" \"vecdiv\")\n-       (eq_attr \"cpu\" \"ppc8540\"))\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_mu_stage0+ppc8540_mu_div,\\\n    ppc8540_mu_div*13\")\n \n ;; Complex vector.\n (define_insn_reservation \"ppc8540_complex_vector\" 4\n   (and (eq_attr \"type\" \"veccomplex\")\n-       (eq_attr \"cpu\" \"ppc8540\"))\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_mu_stage0,ppc8540_mu_stage1,\\\n    ppc8540_mu_stage2,ppc8540_mu_stage3+ppc8540_retire\")\n \n ;; Vector load\n (define_insn_reservation \"ppc8540_vector_load\" 3\n   (and (eq_attr \"type\" \"vecload\")\n-       (eq_attr \"cpu\" \"ppc8540\"))\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_lsu,nothing,ppc8540_retire\")\n \n ;; Vector store\n (define_insn_reservation \"ppc8540_vector_store\" 3\n   (and (eq_attr \"type\" \"vecstore\")\n-       (eq_attr \"cpu\" \"ppc8540\"))\n+       (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_lsu,nothing,ppc8540_retire\")"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "gcc/config/rs6000/e500-double.h", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig%2Frs6000%2Fe500-double.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig%2Frs6000%2Fe500-double.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe500-double.h?ref=a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72", "patch": "@@ -1,24 +0,0 @@\n-/* Target definitions for E500 with double precision FP.\n-   Copyright (C) 2004, 2006, 2007, 2011 Free Software Foundation, Inc.\n-   Contributed by Aldy Hernandez (aldyh@redhat.com).\n-\n-   This file is part of GCC.\n-\n-   GCC is free software; you can redistribute it and/or modify it\n-   under the terms of the GNU General Public License as published\n-   by the Free Software Foundation; either version 3, or (at your\n-   option) any later version.\n-\n-   GCC is distributed in the hope that it will be useful, but WITHOUT\n-   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n-   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n-   License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with GCC; see the file COPYING3.  If not see\n-   <http://www.gnu.org/licenses/>.  */\n-\n-#undef  SUB3TARGET_OVERRIDE_OPTIONS\n-#define SUB3TARGET_OVERRIDE_OPTIONS \\\n-  if (!global_options_set.x_rs6000_float_gprs) \\\n-    rs6000_float_gprs = 2;"}, {"sha": "53a849a86460a3ebfad0ea55470266d1a9f6a322", "filename": "gcc/config/rs6000/e500.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig%2Frs6000%2Fe500.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig%2Frs6000%2Fe500.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe500.h?ref=a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72", "patch": "@@ -19,29 +19,27 @@\n \n #undef TARGET_SPE_ABI\n #undef TARGET_SPE\n-#undef TARGET_E500\n #undef TARGET_FPRS\n #undef TARGET_E500_SINGLE\n #undef TARGET_E500_DOUBLE\n #undef CHECK_E500_OPTIONS\n \n #define TARGET_SPE_ABI rs6000_spe_abi\n #define TARGET_SPE rs6000_spe\n-#define TARGET_E500 (rs6000_cpu == PROCESSOR_PPC8540)\n #define TARGET_FPRS (rs6000_float_gprs == 0)\n #define TARGET_E500_SINGLE (TARGET_HARD_FLOAT && rs6000_float_gprs == 1)\n #define TARGET_E500_DOUBLE (TARGET_HARD_FLOAT && rs6000_float_gprs == 2)\n #define CHECK_E500_OPTIONS\t\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    if (TARGET_E500 || TARGET_SPE || TARGET_SPE_ABI\t\t\t\\\n+    if (TARGET_SPE || TARGET_SPE_ABI\t\t\t\t\t\\\n \t|| TARGET_E500_SINGLE || TARGET_E500_DOUBLE)\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tif (TARGET_ALTIVEC)\t\t\t\t\t\t\\\n-\t  error (\"AltiVec and E500 instructions cannot coexist\");\t\\\n+\t  error (\"AltiVec and SPE instructions cannot coexist\");\t\\\n \tif (TARGET_VSX)\t\t\t\t\t\t\t\\\n-\t  error (\"VSX and E500 instructions cannot coexist\");\t\t\\\n+\t  error (\"VSX and SPE instructions cannot coexist\");\t\t\\\n \tif (TARGET_64BIT)\t\t\t\t\t\t\\\n-\t  error (\"64-bit E500 not supported\");\t\t\t\t\\\n+\t  error (\"64-bit SPE not supported\");\t\t\t\t\\\n \tif (TARGET_HARD_FLOAT && TARGET_FPRS)\t\t\t\t\\\n \t  error (\"E500 and FPRs not supported\");\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\"}, {"sha": "e7ffbe3decbe051a181f9ee84cb4e6a3c9b5ee90", "filename": "gcc/config/rs6000/eabispe.h", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig%2Frs6000%2Feabispe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig%2Frs6000%2Feabispe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabispe.h?ref=a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72", "patch": "@@ -21,21 +21,8 @@\n    <http://www.gnu.org/licenses/>.  */\n \n #undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_POWERPC | MASK_NEW_MNEMONICS | MASK_EABI\t\\\n-  | MASK_STRICT_ALIGN)\n-\n-#undef  SUBSUBTARGET_OVERRIDE_OPTIONS\n-#define SUBSUBTARGET_OVERRIDE_OPTIONS \\\n-  if (!global_options_set.x_rs6000_cpu_index) \\\n-    rs6000_cpu = PROCESSOR_PPC8540; \\\n-  if (!global_options_set.x_rs6000_spe_abi) \\\n-    rs6000_spe_abi = 1; \\\n-  if (!global_options_set.x_rs6000_float_gprs) \\\n-    rs6000_float_gprs = 1; \\\n-  if (!global_options_set.x_rs6000_spe) \\\n-    rs6000_spe = 1; \\\n-  if (target_flags & MASK_64BIT) \\\n-    error (\"-m64 not supported in this configuration\")\n+#define TARGET_DEFAULT \\\n+  (MASK_POWERPC | MASK_NEW_MNEMONICS | MASK_STRICT_ALIGN | MASK_EABI)\n \n #undef  ASM_DEFAULT_SPEC\n #define\tASM_DEFAULT_SPEC \"-mppc -mspe -me500\""}, {"sha": "74f7b0606330b7df0db89bbc6f7e14f6ac50f631", "filename": "gcc/config/rs6000/linuxspe.h", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig%2Frs6000%2Flinuxspe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig%2Frs6000%2Flinuxspe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinuxspe.h?ref=a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72", "patch": "@@ -22,20 +22,8 @@\n \n /* Override rs6000.h and sysv4.h definition.  */\n #undef\tTARGET_DEFAULT\n-#define\tTARGET_DEFAULT (MASK_POWERPC | MASK_NEW_MNEMONICS | MASK_STRICT_ALIGN)\n-\n-#undef  SUBSUBTARGET_OVERRIDE_OPTIONS\n-#define SUBSUBTARGET_OVERRIDE_OPTIONS \\\n-  if (!global_options_set.x_rs6000_cpu_index) \\\n-    rs6000_cpu = PROCESSOR_PPC8540; \\\n-  if (!global_options_set.x_rs6000_spe_abi) \\\n-    rs6000_spe_abi = 1; \\\n-  if (!global_options_set.x_rs6000_float_gprs) \\\n-    rs6000_float_gprs = 1; \\\n-  if (!global_options_set.x_rs6000_spe) \\\n-    rs6000_spe = 1; \\\n-  if (target_flags & MASK_64BIT) \\\n-    error (\"-m64 not supported in this configuration\")\n+#define TARGET_DEFAULT \\\n+  (MASK_POWERPC | MASK_NEW_MNEMONICS | MASK_STRICT_ALIGN)\n \n #undef  ASM_DEFAULT_SPEC\n #define\tASM_DEFAULT_SPEC \"-mppc -mspe -me500\""}, {"sha": "6974b1577713f6b4607c5fb29a55c2f7ab9e1a2c", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72", "patch": "@@ -76,8 +76,7 @@ RS6000_CPU (\"821\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK | MASK_SOFT_FLOAT)\n RS6000_CPU (\"823\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK | MASK_SOFT_FLOAT)\n RS6000_CPU (\"8540\", PROCESSOR_PPC8540, POWERPC_BASE_MASK | MASK_STRICT_ALIGN\n \t    | MASK_ISEL)\n-/* 8548 has a dummy entry for now.  */\n-RS6000_CPU (\"8548\", PROCESSOR_PPC8540, POWERPC_BASE_MASK | MASK_STRICT_ALIGN\n+RS6000_CPU (\"8548\", PROCESSOR_PPC8548, POWERPC_BASE_MASK | MASK_STRICT_ALIGN\n \t    | MASK_ISEL)\n RS6000_CPU (\"a2\", PROCESSOR_PPCA2,\n \t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64 | MASK_POPCNTB"}, {"sha": "41c16f2733f7ef4603df3fe9a55375740051258b", "filename": "gcc/config/rs6000/rs6000-opts.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig%2Frs6000%2Frs6000-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig%2Frs6000%2Frs6000-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-opts.h?ref=a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72", "patch": "@@ -49,6 +49,7 @@ enum processor_type\n    PROCESSOR_PPC7400,\n    PROCESSOR_PPC7450,\n    PROCESSOR_PPC8540,\n+   PROCESSOR_PPC8548,\n    PROCESSOR_PPCE300C2,\n    PROCESSOR_PPCE300C3,\n    PROCESSOR_PPCE500MC,"}, {"sha": "a03d24df35aea04b29ba5edd95209b71b85ff399", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 95, "deletions": 60, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72", "patch": "@@ -2592,7 +2592,10 @@ rs6000_option_override_internal (bool global_init_p)\n {\n   bool ret = true;\n   bool have_cpu = false;\n-  const char *default_cpu = OPTION_TARGET_CPU_DEFAULT;\n+\n+  /* The default cpu requested at configure time, if any.  */\n+  const char *implicit_cpu = OPTION_TARGET_CPU_DEFAULT;\n+\n   int set_masks;\n   int cpu_index;\n   int tune_index;\n@@ -2611,11 +2614,6 @@ rs6000_option_override_internal (bool global_init_p)\n     warning (0, \"-malign-power is not supported for 64-bit Darwin;\"\n \t     \" it is incompatible with the installed C and C++ libraries\");\n \n-  if (global_options_set.x_rs6000_spe_abi\n-      && rs6000_spe_abi\n-      && !TARGET_SPE_ABI)\n-    error (\"not configured for SPE ABI\");\n-\n   /* Numerous experiment shows that IRA based loop pressure\n      calculation works better for RTL loop invariant motion on targets\n      with enough (>= 32) registers.  It is an expensive optimization.\n@@ -2651,7 +2649,8 @@ rs6000_option_override_internal (bool global_init_p)\n   /* Process the -mcpu=<xxx> and -mtune=<xxx> argument.  If the user changed\n      the cpu in a target attribute or pragma, but did not specify a tuning\n      option, use the cpu for the tuning option rather than the option specified\n-     with -mtune on the command line.  */\n+     with -mtune on the command line.  Process a '--with-cpu' configuration\n+     request as an implicit --cpu.  */\n   if (rs6000_cpu_index >= 0)\n     {\n       cpu_index = rs6000_cpu_index;\n@@ -2664,10 +2663,12 @@ rs6000_option_override_internal (bool global_init_p)\n     }\n   else\n     {\n-      if (!default_cpu)\n-\tdefault_cpu = (TARGET_POWERPC64 ? \"powerpc64\" : \"powerpc\");\n+      const char *default_cpu =\n+        (implicit_cpu ? implicit_cpu\n+         : (TARGET_POWERPC64 ? \"powerpc64\" : \"powerpc\"));\n \n       rs6000_cpu_index = cpu_index = rs6000_cpu_name_lookup (default_cpu);\n+      have_cpu = implicit_cpu != 0;\n     }\n \n   gcc_assert (cpu_index >= 0);\n@@ -2698,6 +2699,42 @@ rs6000_option_override_internal (bool global_init_p)\n   gcc_assert (tune_index >= 0);\n   rs6000_cpu = processor_target_table[tune_index].processor;\n \n+  /* Pick defaults for SPE related control flags.  Do this early to make sure\n+     that the TARGET_ macros are representative ASAP.  */\n+  {\n+    int spe_capable_cpu =\n+      (rs6000_cpu == PROCESSOR_PPC8540\n+       || rs6000_cpu == PROCESSOR_PPC8548);\n+\n+    if (!global_options_set.x_rs6000_spe_abi)\n+      rs6000_spe_abi = spe_capable_cpu;\n+\n+    if (!global_options_set.x_rs6000_spe)\n+      rs6000_spe = spe_capable_cpu;\n+\n+    if (!global_options_set.x_rs6000_float_gprs)\n+      rs6000_float_gprs =\n+        (rs6000_cpu == PROCESSOR_PPC8540 ? 1\n+         : rs6000_cpu == PROCESSOR_PPC8548 ? 2\n+         : 0);\n+  }\n+\n+  if (global_options_set.x_rs6000_spe_abi\n+      && rs6000_spe_abi\n+      && !TARGET_SPE_ABI)\n+    error (\"not configured for SPE ABI\");\n+\n+  if (global_options_set.x_rs6000_spe\n+      && rs6000_spe\n+      && !TARGET_SPE)\n+    error (\"not configured for SPE instruction set\");\n+\n+  if (main_target_opt != NULL\n+      && ((main_target_opt->x_rs6000_spe_abi != rs6000_spe_abi)\n+          || (main_target_opt->x_rs6000_spe != rs6000_spe)\n+          || (main_target_opt->x_rs6000_float_gprs != rs6000_float_gprs)))\n+    error (\"target attribute or pragma changes SPE ABI\");\n+\n   if (rs6000_cpu == PROCESSOR_PPCE300C2 || rs6000_cpu == PROCESSOR_PPCE300C3\n       || rs6000_cpu == PROCESSOR_PPCE500MC || rs6000_cpu == PROCESSOR_PPCE500MC64)\n     {\n@@ -2933,35 +2970,44 @@ rs6000_option_override_internal (bool global_init_p)\n   SUB3TARGET_OVERRIDE_OPTIONS;\n #endif\n \n-  if (TARGET_E500 || rs6000_cpu == PROCESSOR_PPCE500MC\n-      || rs6000_cpu == PROCESSOR_PPCE500MC64)\n+  /* For the E500 family of cores, reset the single/double FP flags to let us\n+     check that they remain constant across attributes or pragmas.  Also,\n+     clear a possible request for string instructions, not supported and which\n+     we might have silently queried above for -Os. \n+\n+     For other families, clear ISEL in case it was set implicitly.\n+  */\n+\n+  switch (rs6000_cpu)\n     {\n-      /* The e500 and e500mc do not have string instructions, and we set\n-\t MASK_STRING above when optimizing for size.  */\n-      if ((target_flags & MASK_STRING) != 0)\n-\ttarget_flags = target_flags & ~MASK_STRING;\n+    case PROCESSOR_PPC8540:\n+    case PROCESSOR_PPC8548:\n+    case PROCESSOR_PPCE500MC:\n+    case PROCESSOR_PPCE500MC64:\n+\n+      rs6000_single_float = TARGET_E500_SINGLE || TARGET_E500_DOUBLE;\n+      rs6000_double_float = TARGET_E500_DOUBLE;\n+\n+      target_flags &= ~MASK_STRING;\n+\n+      break;\n+\n+    default:\n+\n+      if (have_cpu && !(target_flags_explicit & MASK_ISEL))\n+\ttarget_flags &= ~MASK_ISEL;\n+\n+      break;\n     }\n-  else if (global_options_set.x_rs6000_cpu_index)\n+\n+  if (main_target_opt)\n     {\n-      /* For the powerpc-eabispe configuration, we set all these by\n-\t default, so let's unset them if we manually set another\n-\t CPU that is not the E500.  */\n-      if (main_target_opt != NULL\n-\t  && ((main_target_opt->x_rs6000_spe_abi != rs6000_spe_abi)\n-\t      || (main_target_opt->x_rs6000_spe != rs6000_spe)\n-\t      || (main_target_opt->x_rs6000_float_gprs != rs6000_float_gprs)))\n-\terror (\"target attribute or pragma changes SPE ABI\");\n-      else\n-\t{\n-\t  if (!global_options_set.x_rs6000_spe_abi)\n-\t    rs6000_spe_abi = 0;\n-\t  if (!global_options_set.x_rs6000_spe)\n-\t    rs6000_spe = 0;\n-\t  if (!global_options_set.x_rs6000_float_gprs)\n-\t    rs6000_float_gprs = 0;\n-\t}\n-      if (!(target_flags_explicit & MASK_ISEL))\n-\ttarget_flags &= ~MASK_ISEL;\n+      if (main_target_opt->x_rs6000_single_float != rs6000_single_float)\n+\terror (\"target attribute or pragma changes single precision floating \"\n+\t       \"point\");\n+      if (main_target_opt->x_rs6000_double_float != rs6000_double_float)\n+\terror (\"target attribute or pragma changes double precision floating \"\n+\t       \"point\");\n     }\n \n   /* Detect invalid option combinations with E500.  */\n@@ -3188,6 +3234,7 @@ rs6000_option_override_internal (bool global_init_p)\n \tbreak;\n \n       case PROCESSOR_PPC8540:\n+      case PROCESSOR_PPC8548:\n \trs6000_cost = &ppc8540_cost;\n \tbreak;\n \n@@ -3260,26 +3307,6 @@ rs6000_option_override_internal (bool global_init_p)\n       && rs6000_single_float == 0 && rs6000_double_float == 0)\n     rs6000_single_float = rs6000_double_float = 1;\n \n-  /* Reset single and double FP flags if target is E500. */\n-  if (TARGET_E500) \n-  {\n-    rs6000_single_float = rs6000_double_float = 0;\n-    if (TARGET_E500_SINGLE)\n-      rs6000_single_float = 1; \n-    if (TARGET_E500_DOUBLE)\n-      rs6000_single_float = rs6000_double_float = 1;\n-  }\n-\n-  if (main_target_opt)\n-    {\n-      if (main_target_opt->x_rs6000_single_float != rs6000_single_float)\n-\terror (\"target attribute or pragma changes single precision floating \"\n-\t       \"point\");\n-      if (main_target_opt->x_rs6000_double_float != rs6000_double_float)\n-\terror (\"target attribute or pragma changes double precision floating \"\n-\t       \"point\");\n-    }\n-\n   /* If not explicitly specified via option, decide whether to generate indexed\n      load/store instructions.  */\n   if (TARGET_AVOID_XFORM == -1)\n@@ -23126,6 +23153,7 @@ rs6000_issue_rate (void)\n   case CPU_PPC750:\n   case CPU_PPC7400:\n   case CPU_PPC8540:\n+  case CPU_PPC8548:\n   case CPU_CELL:\n   case CPU_PPCE300C2:\n   case CPU_PPCE300C3:\n@@ -23156,11 +23184,18 @@ rs6000_issue_rate (void)\n static int\n rs6000_use_sched_lookahead (void)\n {\n-  if (rs6000_cpu_attr == CPU_PPC8540)\n-    return 4;\n-  if (rs6000_cpu_attr == CPU_CELL)\n-    return (reload_completed ? 8 : 0);\n-  return 0;\n+  switch (rs6000_cpu_attr)\n+    {\n+    case CPU_PPC8540:\n+    case CPU_PPC8548:\n+      return 4;\n+\n+    case CPU_CELL:\n+      return (reload_completed ? 8 : 0);\n+\n+    default:\n+      return 0;\n+    }\n }\n \n /* We are choosing insn from the ready queue.  Return nonzero if INSN can be chosen.  */"}, {"sha": "38db1f484f9a4ae5655f1d2053d7deab12ea3187", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72", "patch": "@@ -457,7 +457,6 @@ extern int rs6000_vector_align[];\n \n #define TARGET_SPE_ABI 0\n #define TARGET_SPE 0\n-#define TARGET_E500 0\n #define TARGET_ISEL64 (TARGET_ISEL && TARGET_POWERPC64)\n #define TARGET_FPRS 1\n #define TARGET_E500_SINGLE 0\n@@ -500,11 +499,11 @@ extern int rs6000_vector_align[];\n \t\t\t\t      || TARGET_ALTIVEC\t\t\t \\\n \t\t\t\t      || TARGET_VSX)))\n \n+/* E500 cores only support plain \"sync\", not lwsync.  */\n+#define TARGET_NO_LWSYNC (rs6000_cpu == PROCESSOR_PPC8540 \\\n+\t\t\t  || rs6000_cpu == PROCESSOR_PPC8548)\n \n \n-/* E500 processors only support plain \"sync\", not lwsync.  */\n-#define TARGET_NO_LWSYNC TARGET_E500\n-\n /* Which machine supports the various reciprocal estimate instructions.  */\n #define TARGET_FRES\t(TARGET_HARD_FLOAT && TARGET_PPC_GFXOPT \\\n \t\t\t && TARGET_FPRS && TARGET_SINGLE_FLOAT)"}, {"sha": "85c8c1acbe2edc776aec97bc39c63a0ea13ac7e7", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72", "patch": "@@ -165,7 +165,7 @@\n ;; Processor type -- this attribute must exactly match the processor_type\n ;; enumeration in rs6000.h.\n \n-(define_attr \"cpu\" \"rios1,rios2,rs64a,mpccore,ppc403,ppc405,ppc440,ppc476,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400,ppc7450,ppc8540,ppce300c2,ppce300c3,ppce500mc,ppce500mc64,power4,power5,power6,power7,cell,ppca2,titan\"\n+(define_attr \"cpu\" \"rios1,rios2,rs64a,mpccore,ppc403,ppc405,ppc440,ppc476,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400,ppc7450,ppc8540,ppc8548,ppce300c2,ppce300c3,ppce500mc,ppce500mc64,power4,power5,power6,power7,cell,ppca2,titan\"\n   (const (symbol_ref \"rs6000_cpu_attr\")))\n \n "}, {"sha": "60398df4849f78d42d12a1c7abcf90c2bc7f7472", "filename": "gcc/config/rs6000/rtems.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig%2Frs6000%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig%2Frs6000%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frtems.h?ref=a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72", "patch": "@@ -55,17 +55,3 @@\n #undef  SUBSUBTARGET_EXTRA_SPECS\n #define SUBSUBTARGET_EXTRA_SPECS \\\n   { \"cpp_os_rtems\",\t\tCPP_OS_RTEMS_SPEC }\n-\n-#undef SUBSUBTARGET_OVERRIDE_OPTIONS\n-#define SUBSUBTARGET_OVERRIDE_OPTIONS                                     \\\n-  do {                                                                    \\\n-   if (TARGET_E500)                                                       \\\n-      {                                                                   \\\n-        if (TARGET_HARD_FLOAT && !global_options_set.x_rs6000_float_gprs) \\\n-          rs6000_float_gprs = 1;                                          \\\n-        if (rs6000_float_gprs != 0 && !global_options_set.x_rs6000_spe)   \\\n-          rs6000_spe = 1;                                                 \\\n-        if (rs6000_spe && !global_options_set.x_rs6000_spe_abi)           \\\n-          rs6000_spe_abi = 1;                                             \\\n-      }                                                                   \\\n-  } while(0)"}, {"sha": "dc311d206c470be39d81934d7f796d9c40731c68", "filename": "gcc/config/rs6000/vxworks.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig%2Frs6000%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72/gcc%2Fconfig%2Frs6000%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvxworks.h?ref=a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72", "patch": "@@ -122,19 +122,8 @@ VXWORKS_ADDITIONAL_CPP_SPEC\n \n #undef  ABI_STACK_BOUNDARY\n \n-/* Make -mcpu=8540 imply SPE.  ISEL is automatically enabled, the\n-   others must be done by hand.  Handle -mrtp.  Disable -fPIC\n-   for -mrtp - the VxWorks PIC model is not compatible with it.  */\n #undef SUBSUBTARGET_OVERRIDE_OPTIONS\n #define SUBSUBTARGET_OVERRIDE_OPTIONS\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    if (TARGET_E500)\t\t\t\t\\\n-      {\t\t\t\t\t\t\\\n-\trs6000_spe = 1;\t\t\t\t\\\n-\trs6000_spe_abi = 1;\t\t\t\\\n-\trs6000_float_gprs = 1;\t\t\t\\\n-      }\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\\\n   if (!global_options_set.x_g_switch_value)\t\\\n     g_switch_value = SDATA_DEFAULT_SIZE;\t\\\n   VXWORKS_OVERRIDE_OPTIONS;\t\t\t\\"}]}