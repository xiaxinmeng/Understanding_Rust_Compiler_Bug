{"sha": "c54c1b2b52cb2cc41b2b5aa88d83c16f3833428b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU0YzFiMmI1MmNiMmNjNDFiMmI1YWE4OGQ4M2MxNmYzODMzNDI4Yg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-10-05T23:50:18Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-10-05T23:50:18Z"}, "message": "sso_string_base.h (struct __sso_string_local): Remove...\n\n2005-10-05  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/sso_string_base.h (struct __sso_string_local):\n\tRemove, actually POD types cannot have user defined constructors\n\t(being aggregates) and therefore can always be members of unions.\n\t(class __sso_string_base): Adjust consistently.\n\nFrom-SVN: r105021", "tree": {"sha": "e9435c2ebf83d6b5cb264fde9c65e9d8e8dbe773", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9435c2ebf83d6b5cb264fde9c65e9d8e8dbe773"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c54c1b2b52cb2cc41b2b5aa88d83c16f3833428b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54c1b2b52cb2cc41b2b5aa88d83c16f3833428b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c54c1b2b52cb2cc41b2b5aa88d83c16f3833428b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54c1b2b52cb2cc41b2b5aa88d83c16f3833428b/comments", "author": null, "committer": null, "parents": [{"sha": "d14e25e00b51fc6e284eb285ddb30a08a6274a8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d14e25e00b51fc6e284eb285ddb30a08a6274a8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d14e25e00b51fc6e284eb285ddb30a08a6274a8f"}], "stats": {"total": 83, "additions": 30, "deletions": 53}, "files": [{"sha": "9708c9b31b258c80368d82949a7c39e28331cee0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54c1b2b52cb2cc41b2b5aa88d83c16f3833428b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54c1b2b52cb2cc41b2b5aa88d83c16f3833428b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c54c1b2b52cb2cc41b2b5aa88d83c16f3833428b", "patch": "@@ -1,3 +1,10 @@\n+2005-10-05  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/sso_string_base.h (struct __sso_string_local):\n+\tRemove, actually POD types cannot have user defined constructors\n+\t(being aggregates) and therefore can always be members of unions.\n+\t(class __sso_string_base): Adjust consistently.\n+\n 2005-10-05  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/24198"}, {"sha": "24bbae29add605e54feebba5bf32c3106bc1c242", "filename": "libstdc++-v3/include/ext/sso_string_base.h", "status": "modified", "additions": 23, "deletions": 53, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54c1b2b52cb2cc41b2b5aa88d83c16f3833428b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54c1b2b52cb2cc41b2b5aa88d83c16f3833428b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h?ref=c54c1b2b52cb2cc41b2b5aa88d83c16f3833428b", "patch": "@@ -38,44 +38,10 @@\n \n namespace __gnu_cxx\n {\n-  // N.B. According to 3.9/10 and 9/4, POD types can have user-defined \n-  // constructors: in that case, cannot be member of an union (9.5/1).\n-  // See, f.i., class gnu_char_type in the testsuite.\n-  template<typename _CharT, typename _Traits, typename _Alloc,\n-\t   bool = std::__is_scalar<_CharT>::__value>\n-    struct __sso_string_local\n-    {\n-      typedef typename __vstring_utility<_CharT, _Traits, _Alloc>::\n-        _CharT_alloc_type::size_type                        size_type;\n-\n-      enum { _S_local_capacity = 15 };\n-      \n-      union\n-      {\n-\t_CharT               _M_local_data[_S_local_capacity + 1];\n-\tsize_type            _M_allocated_capacity;\n-      };\n-    };\n-\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    struct __sso_string_local<_CharT, _Traits, _Alloc, false>\n-    {\n-      typedef typename __vstring_utility<_CharT, _Traits, _Alloc>::\n-        _CharT_alloc_type::size_type                        size_type;\n-\n-      enum { _S_local_capacity = 15 };\n-\n-      _CharT                 _M_local_data[_S_local_capacity + 1];\n-      size_type              _M_allocated_capacity;\n-    };\n-\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     class __sso_string_base\n-    : protected __vstring_utility<_CharT, _Traits, _Alloc>,\n-      private __sso_string_local<_CharT, _Traits, _Alloc>\n+    : protected __vstring_utility<_CharT, _Traits, _Alloc>\n     {\n-      typedef __sso_string_local<_CharT, _Traits, _Alloc>   _Local;\n-\n     public:\n       typedef _Traits\t\t\t\t\t    traits_type;\n       typedef typename _Traits::char_type\t\t    value_type;\n@@ -100,25 +66,7 @@ namespace __gnu_cxx\n \n     private:\n       static const _CharT\t_S_terminal;\n-\n-      using _Local::_S_local_capacity;\n-      using _Local::_M_local_data;\n-      using _Local::_M_allocated_capacity;\n-\n-      // Create & Destroy\n-      _CharT*\n-      _M_create(size_type&, size_type);\n       \n-      void\n-      _M_dispose() throw()\n-      {\n-\tif (!_M_is_local())\n-\t  _M_destroy(_M_allocated_capacity + 1);\n-      }\n-\n-      void\n-      _M_destroy(size_type) throw();\n-\n       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html\n       struct _Alloc_hider : _Alloc\n       {\n@@ -132,6 +80,14 @@ namespace __gnu_cxx\n       _Alloc_hider\t        _M_dataplus;\n       size_type                 _M_string_length;\n \n+      enum { _S_local_capacity = 15 };\n+      \n+      union\n+      {\n+\t_CharT                  _M_local_data[_S_local_capacity + 1];\n+\tsize_type               _M_allocated_capacity;\n+      };\n+\n       _CharT*\n       _M_data(_CharT* __p)\n       { return (_M_dataplus._M_p = __p); }\n@@ -148,6 +104,20 @@ namespace __gnu_cxx\n       _M_is_local() const\n       { return _M_data() == _M_local_data; }\n \n+      // Create & Destroy\n+      _CharT*\n+      _M_create(size_type&, size_type);\n+      \n+      void\n+      _M_dispose() throw()\n+      {\n+\tif (!_M_is_local())\n+\t  _M_destroy(_M_allocated_capacity + 1);\n+      }\n+\n+      void\n+      _M_destroy(size_type) throw();\n+\n       // _M_construct_aux is used to implement the 21.3.1 para 15 which\n       // requires special behaviour if _InIter is an integral type\n       template<class _InIterator>"}]}