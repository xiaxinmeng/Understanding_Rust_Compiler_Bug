{"sha": "a5b15fcb954ba63d58f0daa700281aba33b5f24a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTViMTVmY2I5NTRiYTYzZDU4ZjBkYWE3MDAyODFhYmEzM2I1ZjI0YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-25T11:49:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-25T11:49:40Z"}, "message": "gimple: Ignore *0 = {CLOBBER} in path isolation [PR96722]\n\nClobbers of MEM_REF with NULL address are just fancy nops, something we just\nignore and don't emit any code for it (ditto for other clobbers), they just\nmark end of life on something, so we shouldn't infer from those that there\nis some UB.\n\n2020-08-25  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/96722\n\t* gimple.c (infer_nonnull_range): Formatting fix.\n\t(infer_nonnull_range_by_dereference): Return false for clobber stmts.\n\n\t* g++.dg/opt/pr96722.C: New test.", "tree": {"sha": "981c1d7a4dbd26ef6e327e9e4e6daec6ab0c18f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/981c1d7a4dbd26ef6e327e9e4e6daec6ab0c18f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5b15fcb954ba63d58f0daa700281aba33b5f24a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5b15fcb954ba63d58f0daa700281aba33b5f24a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5b15fcb954ba63d58f0daa700281aba33b5f24a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5b15fcb954ba63d58f0daa700281aba33b5f24a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f982a6ec9b6d98f5f37114b1d7455c54ce5056b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f982a6ec9b6d98f5f37114b1d7455c54ce5056b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f982a6ec9b6d98f5f37114b1d7455c54ce5056b8"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "bf863f67ee28715de5517d0a88dbe5731412b7fa", "filename": "gcc/gimple.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b15fcb954ba63d58f0daa700281aba33b5f24a/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b15fcb954ba63d58f0daa700281aba33b5f24a/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=a5b15fcb954ba63d58f0daa700281aba33b5f24a", "patch": "@@ -2917,8 +2917,8 @@ check_loadstore (gimple *, tree op, tree, void *data)\n bool\n infer_nonnull_range (gimple *stmt, tree op)\n {\n-  return infer_nonnull_range_by_dereference (stmt, op)\n-    || infer_nonnull_range_by_attribute (stmt, op);\n+  return (infer_nonnull_range_by_dereference (stmt, op)\n+\t  || infer_nonnull_range_by_attribute (stmt, op));\n }\n \n /* Return true if OP can be inferred to be non-NULL after STMT\n@@ -2930,7 +2930,8 @@ infer_nonnull_range_by_dereference (gimple *stmt, tree op)\n      non-NULL if -fdelete-null-pointer-checks is enabled.  */\n   if (!flag_delete_null_pointer_checks\n       || !POINTER_TYPE_P (TREE_TYPE (op))\n-      || gimple_code (stmt) == GIMPLE_ASM)\n+      || gimple_code (stmt) == GIMPLE_ASM\n+      || gimple_clobber_p (stmt))\n     return false;\n \n   if (walk_stmt_load_store_ops (stmt, (void *)op,"}, {"sha": "408dfeea8a04e586fd599c0d02e5230eaad5b639", "filename": "gcc/testsuite/g++.dg/opt/pr96722.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b15fcb954ba63d58f0daa700281aba33b5f24a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr96722.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b15fcb954ba63d58f0daa700281aba33b5f24a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr96722.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr96722.C?ref=a5b15fcb954ba63d58f0daa700281aba33b5f24a", "patch": "@@ -0,0 +1,20 @@\n+// PR tree-optimization/96722\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+struct S { int s; ~S () {} };\n+\n+void\n+foo (S *a)\n+{\n+  if (a)\n+    return;\n+  a->~S ();\n+}\n+\n+int\n+main ()\n+{\n+  S s;\n+  foo (&s);\n+}"}]}