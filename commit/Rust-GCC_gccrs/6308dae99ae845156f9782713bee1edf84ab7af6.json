{"sha": "6308dae99ae845156f9782713bee1edf84ab7af6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMwOGRhZTk5YWU4NDUxNTZmOTc4MjcxM2JlZTFlZGY4NGFiN2FmNg==", "commit": {"author": {"name": "Alex Samuel", "email": "samuel@codesourcery.com", "date": "2000-04-09T01:16:44Z"}, "committer": {"name": "Alex Samuel", "email": "samuel@gcc.gnu.org", "date": "2000-04-09T01:16:44Z"}, "message": "ssa.c (convert_to_ssa): Eliminate dead code when calling life_analysis.\n\n\t* ssa.c (convert_to_ssa): Eliminate dead code when calling\n\tlife_analysis.\n\t(convert_from_ssa): Call compute_bb_for_insn before life_analysis.\n\t(for_each_successor_phi): Change parameter to basic_block.\n\t(coalesce_regs_in_successor_phi_nodes): Likewise.\n\t(coalesce_regs_in_copies): Likewise.\n\t(compute_coalesced_reg_partition): Use basic_block instead of index.\n\t* rtl.h (convert_to_ssa): Delete.\n\t(convert_from_ssa): Likewise.\n\t(successor_phi_fn): Likewise.\n\t(for_each_successor_phi): Likewise.\n\t(in_ssa_form): Likewise.\n\t* basic-block.h (convert_to_ssa): Moved from rtl.h.\n\t(convert_from_ssa): Likewise.\n\t(successor_phi_fn): Likewise.\n\t(in_ssa_form): Likewise.\n\t(for_each_successor_phi): Likewise.  Change parameter to basic_block.\n\t* flow.c (calculate_global_regs_live): Pass a basic_block to\n\tfor_each_successor_phi.\n\nFrom-SVN: r33032", "tree": {"sha": "ace18ca4c80a9132da02a028b43b87b5c33c182e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ace18ca4c80a9132da02a028b43b87b5c33c182e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6308dae99ae845156f9782713bee1edf84ab7af6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6308dae99ae845156f9782713bee1edf84ab7af6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6308dae99ae845156f9782713bee1edf84ab7af6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6308dae99ae845156f9782713bee1edf84ab7af6/comments", "author": null, "committer": null, "parents": [{"sha": "d43829f9eefc944e90d71001bcef932eb7e5bdf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d43829f9eefc944e90d71001bcef932eb7e5bdf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d43829f9eefc944e90d71001bcef932eb7e5bdf4"}], "stats": {"total": 83, "additions": 50, "deletions": 33}, "files": [{"sha": "775428cc13bbe8cc705dab13d722543c94ba468c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6308dae99ae845156f9782713bee1edf84ab7af6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6308dae99ae845156f9782713bee1edf84ab7af6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6308dae99ae845156f9782713bee1edf84ab7af6", "patch": "@@ -1,3 +1,25 @@\n+2000-04-08  Alex Samuel  <samuel@codesourcery.com>\n+\n+\t* ssa.c (convert_to_ssa): Eliminate dead code when calling\n+\tlife_analysis.  \n+\t(convert_from_ssa): Call compute_bb_for_insn before life_analysis.\n+\t(for_each_successor_phi): Change parameter to basic_block.\n+\t(coalesce_regs_in_successor_phi_nodes): Likewise.\n+\t(coalesce_regs_in_copies): Likewise.\n+\t(compute_coalesced_reg_partition): Use basic_block instead of index.\n+\t* rtl.h (convert_to_ssa): Delete.\n+\t(convert_from_ssa): Likewise.\n+\t(successor_phi_fn): Likewise.\n+\t(for_each_successor_phi): Likewise.\n+\t(in_ssa_form): Likewise.\n+\t* basic-block.h (convert_to_ssa): Moved from rtl.h.\n+\t(convert_from_ssa): Likewise.\n+\t(successor_phi_fn): Likewise.\n+\t(in_ssa_form): Likewise.\n+\t(for_each_successor_phi): Likewise.  Change parameter to basic_block. \n+\t* flow.c (calculate_global_regs_live): Pass a basic_block to\n+\tfor_each_successor_phi.\n+\n 2000-04-08  Richard Henderson  <rth@cygnus.com>\n \n \t* flow.c (mark_used_reg): Use reg_set_p to determine if a register"}, {"sha": "62a4b5bb3924d8d570205bf8983cf14efa175aa6", "filename": "gcc/basic-block.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6308dae99ae845156f9782713bee1edf84ab7af6/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6308dae99ae845156f9782713bee1edf84ab7af6/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=6308dae99ae845156f9782713bee1edf84ab7af6", "patch": "@@ -491,4 +491,13 @@ extern conflict_graph conflict_graph_compute\n                                         PARAMS ((regset,\n \t\t\t\t\t\t partition));\n \n+/* In ssa.c */\n+extern void convert_to_ssa\t\tPARAMS ((void));\n+extern void convert_from_ssa\t\tPARAMS ((void));\n+typedef int (*successor_phi_fn)         PARAMS ((rtx, int, int, void *));\n+extern int for_each_successor_phi       PARAMS ((basic_block bb,\n+\t\t\t\t\t\t successor_phi_fn,\n+\t\t\t\t\t\t void *));\n+extern int in_ssa_form;\n+\n #endif /* _BASIC_BLOCK_H */"}, {"sha": "28a0753412409c74727d9dc86e25279544538677", "filename": "gcc/flow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6308dae99ae845156f9782713bee1edf84ab7af6/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6308dae99ae845156f9782713bee1edf84ab7af6/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=6308dae99ae845156f9782713bee1edf84ab7af6", "patch": "@@ -3080,7 +3080,7 @@ calculate_global_regs_live (blocks_in, blocks_out, flags)\n \t global_live_at_start, since they are live only along a\n \t particular edge.  Set those regs that are live because of a\n \t phi node alternative corresponding to this particular block.  */\n-      for_each_successor_phi (bb->index, &set_phi_alternative_reg, \n+      for_each_successor_phi (bb, &set_phi_alternative_reg, \n \t\t\t      new_live_at_end);\n \n       if (bb == ENTRY_BLOCK_PTR)"}, {"sha": "c22727eb84dd8d92ce3c76584e8b8a005708b428", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6308dae99ae845156f9782713bee1edf84ab7af6/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6308dae99ae845156f9782713bee1edf84ab7af6/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=6308dae99ae845156f9782713bee1edf84ab7af6", "patch": "@@ -1806,15 +1806,6 @@ extern void replace_call_placeholder\tPARAMS ((rtx, sibcall_use_t));\n extern int stack_regs_mentioned\t\tPARAMS ((rtx insn));\n #endif\n \n-/* In ssa.c */\n-extern void convert_to_ssa\t\tPARAMS ((void));\n-extern void convert_from_ssa\t\tPARAMS ((void));\n-typedef int (*successor_phi_fn)         PARAMS ((rtx, int, int, void *));\n-extern int for_each_successor_phi       PARAMS ((int bb,\n-\t\t\t\t\t\t successor_phi_fn,\n-\t\t\t\t\t\t void *));\n-extern int in_ssa_form;\n-\n /* In toplev.c */\n \n extern rtx stack_limit_rtx;"}, {"sha": "8ebb3c2288349d977f115c7deccbf90eb80ace5b", "filename": "gcc/ssa.c", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6308dae99ae845156f9782713bee1edf84ab7af6/gcc%2Fssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6308dae99ae845156f9782713bee1edf84ab7af6/gcc%2Fssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa.c?ref=6308dae99ae845156f9782713bee1edf84ab7af6", "patch": "@@ -147,11 +147,11 @@ static int rename_equivalent_regs_in_insn\n static int coalesce_if_unconflicting\n   PARAMS ((partition p, conflict_graph conflicts, int reg1, int reg2));\n static int coalesce_regs_in_copies\n-  PARAMS ((int bb, partition p, conflict_graph conflicts));\n+  PARAMS ((basic_block bb, partition p, conflict_graph conflicts));\n static int coalesce_reg_in_phi\n   PARAMS ((rtx, int dest_regno, int src_regno, void *data));\n static int coalesce_regs_in_successor_phi_nodes\n-  PARAMS ((int bb, partition p, conflict_graph conflicts));\n+  PARAMS ((basic_block bb, partition p, conflict_graph conflicts));\n static partition compute_coalesced_reg_partition\n   PARAMS (());\n static int mark_reg_in_phi \n@@ -855,10 +855,7 @@ convert_to_ssa()\n   if (in_ssa_form)\n     abort ();\n \n-  /* Don't eliminate dead code here.  The CFG we computed above must\n-     remain unchanged until we are finished emerging from SSA form --\n-     the phi node representation depends on it.  */\n-  life_analysis (get_insns (), max_reg_num (), NULL, 0);\n+  life_analysis (get_insns (), max_reg_num (), NULL, 1);\n \n   /* Compute dominators.  */\n   dominators = sbitmap_vector_alloc (n_basic_blocks, n_basic_blocks);\n@@ -1454,16 +1451,16 @@ coalesce_if_unconflicting (p, conflicts, reg1, reg2)\n \n static int\n coalesce_regs_in_copies (bb, p, conflicts)\n-     int bb;\n+     basic_block bb;\n      partition p;\n      conflict_graph conflicts;\n {\n   int changed = 0;\n   rtx insn;\n-  rtx end = BLOCK_END (bb);\n+  rtx end = bb->end;\n \n   /* Scan the instruction stream of the block.  */\n-  for (insn = BLOCK_HEAD (bb); insn != end; insn = NEXT_INSN (insn))\n+  for (insn = bb->head; insn != end; insn = NEXT_INSN (insn))\n     {\n       rtx pattern;\n       rtx src;\n@@ -1551,7 +1548,7 @@ coalesce_reg_in_phi (insn, dest_regno, src_regno, data)\n \n static int\n coalesce_regs_in_successor_phi_nodes (bb, p, conflicts)\n-     int bb;\n+     basic_block bb;\n      partition p;\n      conflict_graph conflicts;\n {\n@@ -1610,8 +1607,10 @@ compute_coalesced_reg_partition ()\n \t order will generate correct, if non-optimal, results.  */\n       for (bb = n_basic_blocks; --bb >= 0; )\n \t{\n-\t  changed += coalesce_regs_in_copies (bb, p, conflicts);\n-\t  changed += coalesce_regs_in_successor_phi_nodes (bb, p, conflicts);\n+\t  basic_block block = BASIC_BLOCK (bb);\n+\t  changed += coalesce_regs_in_copies (block, p, conflicts);\n+\t  changed += \n+\t    coalesce_regs_in_successor_phi_nodes (block, p, conflicts);\n \t}\n \n       conflict_graph_delete (conflicts);\n@@ -1812,6 +1811,7 @@ convert_from_ssa()\n   rtx insns = get_insns ();\n     \n   /* We need up-to-date life information.  */\n+  compute_bb_for_insn (get_max_uid ());\n   life_analysis (insns, max_reg_num (), NULL, 0);\n \n   /* Figure out which regs in copies and phi nodes don't conflict and\n@@ -1878,28 +1878,23 @@ convert_from_ssa()\n \n int\n for_each_successor_phi (bb, fn, data)\n-     int bb;\n+     basic_block bb;\n      successor_phi_fn fn;\n      void *data;\n {\n-  basic_block block;\n   edge e;\n   \n-  if (bb == EXIT_BLOCK)\n+  if (bb == EXIT_BLOCK_PTR)\n     return 0;\n-  else if (bb == ENTRY_BLOCK)\n-    block = ENTRY_BLOCK_PTR;\n-  else\n-    block = BASIC_BLOCK (bb);\n \n   /* Scan outgoing edges.  */\n-  for (e = block->succ; e != NULL; e = e->succ_next)\n+  for (e = bb->succ; e != NULL; e = e->succ_next)\n     {\n       rtx insn;\n \n       basic_block successor = e->dest;\n-      if (successor->index == ENTRY_BLOCK \n-\t  || successor->index == EXIT_BLOCK)\n+      if (successor == ENTRY_BLOCK_PTR \n+\t  || successor == EXIT_BLOCK_PTR)\n \tcontinue;\n \n       /* Advance to the first non-label insn of the successor block.  */\n@@ -1917,7 +1912,7 @@ for_each_successor_phi (bb, fn, data)\n \t{\n \t  int result;\n \t  rtx phi_set = PATTERN (insn);\n-\t  rtx *alternative = phi_alternative (phi_set, block->index);\n+\t  rtx *alternative = phi_alternative (phi_set, bb->index);\n \t  rtx phi_src;\n \t  \n \t  /* This phi function may not have an alternative"}]}