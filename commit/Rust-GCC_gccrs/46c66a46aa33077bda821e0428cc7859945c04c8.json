{"sha": "46c66a46aa33077bda821e0428cc7859945c04c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZjNjZhNDZhYTMzMDc3YmRhODIxZTA0MjhjYzc4NTk5NDVjMDRjOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-01-07T12:16:30Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-01-07T12:16:30Z"}, "message": "[1/2] PR88598: Optimise x * { 0 or 1, 0 or 1, ... }\n\nThe PR has:\n\n    vect__6.24_42 = vect__5.23_41 * { 0.0, 1.0e+0, 0.0, 0.0 };\n\nwhich for -fno-signed-zeros -fno-signaling-nans can be simplified to:\n\n    vect__6.24_42 = vect__5.23_41 & { 0, -1, 0, 0 };\n\nI deliberately didn't handle COMPLEX_CST or CONSTRUCTOR in\ninitializer_each_zero_or_onep since there are no current use cases.\n\nThe patch also makes (un)signed_type_for handle floating-point types.\nI tried to audit all callers and the few that handle null returns would\nbe unaffected.\n\n2019-01-07  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR tree-optimization/88598\n\t* tree.h (initializer_each_zero_or_onep): Declare.\n\t* tree.c (initializer_each_zero_or_onep): New function.\n\t(signed_or_unsigned_type_for): Handle float types too.\n\t(unsigned_type_for, signed_type_for): Update comments accordingly.\n\t* match.pd: Fold x * { 0 or 1, 0 or 1, ...} to\n\tx & { 0 or -1, 0 or -1, ... }.\n\ngcc/testsuite/\n\tPR tree-optimization/88598\n\t* gcc.dg/pr88598-1.c: New test.\n\t* gcc.dg/pr88598-2.c: Likewise.\n\t* gcc.dg/pr88598-3.c: Likewise.\n\t* gcc.dg/pr88598-4.c: Likewise.\n\t* gcc.dg/pr88598-5.c: Likewise.\n\nFrom-SVN: r267645", "tree": {"sha": "4c12a6c6d89c857b70db55d83846f5b0a0828cf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c12a6c6d89c857b70db55d83846f5b0a0828cf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46c66a46aa33077bda821e0428cc7859945c04c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46c66a46aa33077bda821e0428cc7859945c04c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46c66a46aa33077bda821e0428cc7859945c04c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46c66a46aa33077bda821e0428cc7859945c04c8/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3340164d5db7a65cd98138f1eead1f2d66dd221c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3340164d5db7a65cd98138f1eead1f2d66dd221c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3340164d5db7a65cd98138f1eead1f2d66dd221c"}], "stats": {"total": 243, "additions": 236, "deletions": 7}, "files": [{"sha": "b3dcd5201d0d78f830024bba9132189e253292df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c66a46aa33077bda821e0428cc7859945c04c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c66a46aa33077bda821e0428cc7859945c04c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46c66a46aa33077bda821e0428cc7859945c04c8", "patch": "@@ -1,3 +1,13 @@\n+2019-01-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/88598\n+\t* tree.h (initializer_each_zero_or_onep): Declare.\n+\t* tree.c (initializer_each_zero_or_onep): New function.\n+\t(signed_or_unsigned_type_for): Handle float types too.\n+\t(unsigned_type_for, signed_type_for): Update comments accordingly.\n+\t* match.pd: Fold x * { 0 or 1, 0 or 1, ...} to\n+\tx & { 0 or -1, 0 or -1, ... }.\n+\n 2019-01-07  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/install.texi: Replace references to x86_64-unknown-linux-gnu"}, {"sha": "4fe379f6613729c609b77b0213ff7ac3174f2c1c", "filename": "gcc/match.pd", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c66a46aa33077bda821e0428cc7859945c04c8/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c66a46aa33077bda821e0428cc7859945c04c8/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=46c66a46aa33077bda821e0428cc7859945c04c8", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n    integer_each_onep integer_truep integer_nonzerop\n    real_zerop real_onep real_minus_onep\n    zerop\n+   initializer_each_zero_or_onep\n    CONSTANT_CLASS_P\n    tree_expr_nonnegative_p\n    tree_expr_nonzero_p\n@@ -194,6 +195,22 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n            || !COMPLEX_FLOAT_TYPE_P (type)))\n    (negate @0)))\n \n+/* Transform x * { 0 or 1, 0 or 1, ... } into x & { 0 or -1, 0 or -1, ...},\n+   unless the target has native support for the former but not the latter.  */\n+(simplify\n+ (mult @0 VECTOR_CST@1)\n+ (if (initializer_each_zero_or_onep (@1)\n+      && !HONOR_SNANS (type)\n+      && !HONOR_SIGNED_ZEROS (type))\n+  (with { tree itype = FLOAT_TYPE_P (type) ? unsigned_type_for (type) : type; }\n+   (if (itype\n+\t&& (!VECTOR_MODE_P (TYPE_MODE (type))\n+\t    || (VECTOR_MODE_P (TYPE_MODE (itype))\n+\t\t&& optab_handler (and_optab,\n+\t\t\t\t  TYPE_MODE (itype)) != CODE_FOR_nothing)))\n+    (view_convert (bit_and:itype (view_convert @0)\n+\t\t\t\t (ne @1 { build_zero_cst (type); })))))))\n+\n (for cmp (gt ge lt le)\n      outp (convert convert negate negate)\n      outn (negate negate convert convert)"}, {"sha": "707c95dcde1d75befe6ac9ab531161ce6fac9701", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c66a46aa33077bda821e0428cc7859945c04c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c66a46aa33077bda821e0428cc7859945c04c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=46c66a46aa33077bda821e0428cc7859945c04c8", "patch": "@@ -1,3 +1,12 @@\n+2019-01-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/88598\n+\t* gcc.dg/pr88598-1.c: New test.\n+\t* gcc.dg/pr88598-2.c: Likewise.\n+\t* gcc.dg/pr88598-3.c: Likewise.\n+\t* gcc.dg/pr88598-4.c: Likewise.\n+\t* gcc.dg/pr88598-5.c: Likewise.\n+\n 2019-01-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/88676"}, {"sha": "2b62dd9b250304eb620587c5f6bb81797e0c0300", "filename": "gcc/testsuite/gcc.dg/pr88598-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c66a46aa33077bda821e0428cc7859945c04c8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88598-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c66a46aa33077bda821e0428cc7859945c04c8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88598-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88598-1.c?ref=46c66a46aa33077bda821e0428cc7859945c04c8", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O -fdump-tree-ccp1\" } */\n+\n+typedef int v4si __attribute__ ((vector_size (16)));\n+\n+int\n+main ()\n+{\n+  volatile v4si x1 = { 4, 5, 6, 7 };\n+  volatile v4si x2 = { 10, 11, 12, 13 };\n+  volatile v4si x3 = { 20, 21, 22, 23 };\n+\n+  x1 *= (v4si) { 0, 1, 1, 0 };\n+  x2 *= (v4si) { 1, 0, 0, 1 };\n+  x3 *= (v4si) { 0, 0, 1, 0 };\n+\n+  if (__builtin_memcmp ((void *) &x1, &(v4si) { 0, 5, 6, 0 }, sizeof (v4si))\n+      || __builtin_memcmp ((void *) &x2, &(v4si) { 10, 0, 0, 13 },\n+\t\t\t   sizeof (v4si))\n+      || __builtin_memcmp ((void *) &x3, &(v4si) { 0, 0, 22, 0 },\n+\t\t\t   sizeof (v4si)))\n+    __builtin_abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-not { \\* } \"ccp1\" } } */"}, {"sha": "13017c799c87bf7990f6ec30cf2385e178d92040", "filename": "gcc/testsuite/gcc.dg/pr88598-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c66a46aa33077bda821e0428cc7859945c04c8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88598-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c66a46aa33077bda821e0428cc7859945c04c8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88598-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88598-2.c?ref=46c66a46aa33077bda821e0428cc7859945c04c8", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run { target double64 } } */\n+/* { dg-options \"-O -fdump-tree-ccp1\" } */\n+/* { dg-add-options ieee } */\n+\n+typedef double v4df __attribute__ ((vector_size (32)));\n+\n+int\n+main ()\n+{\n+  volatile v4df x1 = { 4, 5, 6, -7 };\n+  volatile v4df x2 = { 10, -11, 12, 13 };\n+  volatile v4df x3 = { 20, 21, 22, 23 };\n+\n+  x1 *= (v4df) { 0, 1, 1, 0 };\n+  x2 *= (v4df) { 1, 0, 0, 1 };\n+  x3 *= (v4df) { 0.0, -0.0, 1.0, -0.0 };\n+\n+  if (__builtin_memcmp ((void *) &x1, &(v4df) { 0, 5, 6, -0.0 },\n+\t\t\tsizeof (v4df))\n+      || __builtin_memcmp ((void *) &x2, &(v4df) { 10, -0.0, 0, 13 },\n+\t\t\t   sizeof (v4df))\n+      || __builtin_memcmp ((void *) &x3, &(v4df) { 0, -0.0, 22, -0.0 },\n+\t\t\t   sizeof (v4df)))\n+    __builtin_abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump { \\* } \"ccp1\" } } */\n+/* { dg-final { scan-tree-dump-not { \\& } \"ccp1\" } } */"}, {"sha": "bddfb68b57dc563a37527331acaa81b32f676656", "filename": "gcc/testsuite/gcc.dg/pr88598-3.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c66a46aa33077bda821e0428cc7859945c04c8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88598-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c66a46aa33077bda821e0428cc7859945c04c8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88598-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88598-3.c?ref=46c66a46aa33077bda821e0428cc7859945c04c8", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run { target double64 } } */\n+/* { dg-options \"-O -fno-signed-zeros -fdump-tree-ccp1\" } */\n+/* { dg-add-options ieee } */\n+\n+typedef double v4df __attribute__ ((vector_size (32)));\n+\n+int\n+main ()\n+{\n+  volatile v4df x1 = { 4, 5, 6, -7 };\n+  volatile v4df x2 = { 10, -11, 12, 13 };\n+  volatile v4df x3 = { 20, 21, 22, 23 };\n+\n+  x1 *= (v4df) { 0, 1, 1, 0 };\n+  x2 *= (v4df) { 1, 0, 0, 1 };\n+  x3 *= (v4df) { 0.0, -0.0, 1.0, -0.0 };\n+\n+  if (__builtin_memcmp ((void *) &x1, &(v4df) { 0, 5, 6, 0 },\n+\t\t\tsizeof (v4df))\n+      || __builtin_memcmp ((void *) &x2, &(v4df) { 10, 0, 0, 13 },\n+\t\t\t   sizeof (v4df))\n+      || __builtin_memcmp ((void *) &x3, &(v4df) { 0, 0, 22, 0 },\n+\t\t\t   sizeof (v4df)))\n+    __builtin_abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-not { \\* } \"ccp1\" } } */"}, {"sha": "8026394d79c5209af5935867978205529c0e3b02", "filename": "gcc/testsuite/gcc.dg/pr88598-4.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c66a46aa33077bda821e0428cc7859945c04c8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88598-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c66a46aa33077bda821e0428cc7859945c04c8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88598-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88598-4.c?ref=46c66a46aa33077bda821e0428cc7859945c04c8", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O -fdump-tree-ccp1\" } */\n+\n+typedef int v4si __attribute__ ((vector_size (16)));\n+\n+int\n+main ()\n+{\n+  volatile v4si x1 = { 4, 5, 6, 7 };\n+  volatile v4si x2 = { 10, 11, 12, 13 };\n+  volatile v4si x3 = { 20, 21, 22, 23 };\n+\n+  x1 *= (v4si) { 0, 1, 2, 3 };\n+  x2 *= (v4si) { 1, 0, 2, 0 };\n+  x3 *= (v4si) { 0, 0, -1, 0 };\n+\n+  if (__builtin_memcmp ((void *) &x1, &(v4si) { 0, 5, 12, 21 }, sizeof (v4si))\n+      || __builtin_memcmp ((void *) &x2, &(v4si) { 10, 0, 24, 0 },\n+\t\t\t   sizeof (v4si))\n+      || __builtin_memcmp ((void *) &x3, &(v4si) { 0, 0, -22, 0 },\n+\t\t\t   sizeof (v4si)))\n+    __builtin_abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump { \\* } \"ccp1\" } } */\n+/* { dg-final { scan-tree-dump-not { \\& } \"ccp1\" } } */"}, {"sha": "29d1935c6cfad53290fc2a9a356eeca0df2ee39b", "filename": "gcc/testsuite/gcc.dg/pr88598-5.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c66a46aa33077bda821e0428cc7859945c04c8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88598-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c66a46aa33077bda821e0428cc7859945c04c8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88598-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88598-5.c?ref=46c66a46aa33077bda821e0428cc7859945c04c8", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run { target double64 } } */\n+/* { dg-options \"-O -fno-signed-zeros -fdump-tree-ccp1\" } */\n+/* { dg-add-options ieee } */\n+\n+typedef double v4df __attribute__ ((vector_size (32)));\n+\n+int\n+main ()\n+{\n+  volatile v4df x1 = { 4, 5, 6, 7 };\n+  volatile v4df x2 = { 10, 11, 12, 13 };\n+  volatile v4df x3 = { 20, 21, 22, 23 };\n+\n+  x1 *= (v4df) { 0, 1, 2, 3 };\n+  x2 *= (v4df) { 1, 0, 2, 0 };\n+  x3 *= (v4df) { 0, 0, -1, 0 };\n+\n+  if (__builtin_memcmp ((void *) &x1, &(v4df) { 0, 5, 12, 21 }, sizeof (v4df))\n+      || __builtin_memcmp ((void *) &x2, &(v4df) { 10, 0, 24, 0 },\n+\t\t\t   sizeof (v4df))\n+      || __builtin_memcmp ((void *) &x3, &(v4df) { 0, 0, -22, 0 },\n+\t\t\t   sizeof (v4df)))\n+    __builtin_abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump { \\* } \"ccp1\" } } */\n+/* { dg-final { scan-tree-dump-not { \\& } \"ccp1\" } } */"}, {"sha": "533694c29848b5c05cb454ec61fe2068b0c018ae", "filename": "gcc/tree.c", "status": "modified", "additions": 56, "deletions": 7, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c66a46aa33077bda821e0428cc7859945c04c8/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c66a46aa33077bda821e0428cc7859945c04c8/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=46c66a46aa33077bda821e0428cc7859945c04c8", "patch": "@@ -11229,6 +11229,45 @@ initializer_zerop (const_tree init, bool *nonzero /* = NULL */)\n     }\n }\n \n+/* Return true if EXPR is an initializer expression in which every element\n+   is a constant that is numerically equal to 0 or 1.  The elements do not\n+   need to be equal to each other.  */\n+\n+bool\n+initializer_each_zero_or_onep (const_tree expr)\n+{\n+  STRIP_ANY_LOCATION_WRAPPER (expr);\n+\n+  switch (TREE_CODE (expr))\n+    {\n+    case INTEGER_CST:\n+      return integer_zerop (expr) || integer_onep (expr);\n+\n+    case REAL_CST:\n+      return real_zerop (expr) || real_onep (expr);\n+\n+    case VECTOR_CST:\n+      {\n+\tunsigned HOST_WIDE_INT nelts = vector_cst_encoded_nelts (expr);\n+\tif (VECTOR_CST_STEPPED_P (expr)\n+\t    && !TYPE_VECTOR_SUBPARTS (TREE_TYPE (expr)).is_constant (&nelts))\n+\t  return false;\n+\n+\tfor (unsigned int i = 0; i < nelts; ++i)\n+\t  {\n+\t    tree elt = VECTOR_CST_ENCODED_ELT (expr, i);\n+\t    if (!initializer_each_zero_or_onep (elt))\n+\t      return false;\n+\t  }\n+\n+\treturn true;\n+      }\n+\n+    default:\n+      return false;\n+    }\n+}\n+\n /* Check if vector VEC consists of all the equal elements and\n    that the number of elements corresponds to the type of VEC.\n    The function returns first element of the vector\n@@ -11672,7 +11711,10 @@ int_cst_value (const_tree x)\n \n /* If TYPE is an integral or pointer type, return an integer type with\n    the same precision which is unsigned iff UNSIGNEDP is true, or itself\n-   if TYPE is already an integer type of signedness UNSIGNEDP.  */\n+   if TYPE is already an integer type of signedness UNSIGNEDP.\n+   If TYPE is a floating-point type, return an integer type with the same\n+   bitsize and with the signedness given by UNSIGNEDP; this is useful\n+   when doing bit-level operations on a floating-point value.  */\n \n tree\n signed_or_unsigned_type_for (int unsignedp, tree type)\n@@ -11702,17 +11744,23 @@ signed_or_unsigned_type_for (int unsignedp, tree type)\n       return build_complex_type (inner2);\n     }\n \n-  if (!INTEGRAL_TYPE_P (type)\n-      && !POINTER_TYPE_P (type)\n-      && TREE_CODE (type) != OFFSET_TYPE)\n+  unsigned int bits;\n+  if (INTEGRAL_TYPE_P (type)\n+      || POINTER_TYPE_P (type)\n+      || TREE_CODE (type) == OFFSET_TYPE)\n+    bits = TYPE_PRECISION (type);\n+  else if (TREE_CODE (type) == REAL_TYPE)\n+    bits = GET_MODE_BITSIZE (SCALAR_TYPE_MODE (type));\n+  else\n     return NULL_TREE;\n \n-  return build_nonstandard_integer_type (TYPE_PRECISION (type), unsignedp);\n+  return build_nonstandard_integer_type (bits, unsignedp);\n }\n \n /* If TYPE is an integral or pointer type, return an integer type with\n    the same precision which is unsigned, or itself if TYPE is already an\n-   unsigned integer type.  */\n+   unsigned integer type.  If TYPE is a floating-point type, return an\n+   unsigned integer type with the same bitsize as TYPE.  */\n \n tree\n unsigned_type_for (tree type)\n@@ -11722,7 +11770,8 @@ unsigned_type_for (tree type)\n \n /* If TYPE is an integral or pointer type, return an integer type with\n    the same precision which is signed, or itself if TYPE is already a\n-   signed integer type.  */\n+   signed integer type.  If TYPE is a floating-point type, return a\n+   signed integer type with the same bitsize as TYPE.  */\n \n tree\n signed_type_for (tree type)"}, {"sha": "e731a716c7cf1b9fb9377c62997ebea70350030d", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c66a46aa33077bda821e0428cc7859945c04c8/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c66a46aa33077bda821e0428cc7859945c04c8/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=46c66a46aa33077bda821e0428cc7859945c04c8", "patch": "@@ -4506,6 +4506,7 @@ extern tree first_field (const_tree);\n    combinations indicate definitive answers.  */\n \n extern bool initializer_zerop (const_tree, bool * = NULL);\n+extern bool initializer_each_zero_or_onep (const_tree);\n \n extern wide_int vector_cst_int_elt (const_tree, unsigned int);\n extern tree vector_cst_elt (const_tree, unsigned int);"}]}