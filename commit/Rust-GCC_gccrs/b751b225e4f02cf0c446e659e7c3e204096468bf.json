{"sha": "b751b225e4f02cf0c446e659e7c3e204096468bf", "node_id": "C_kwDOANBUbNoAKGI3NTFiMjI1ZTRmMDJjZjBjNDQ2ZTY1OWU3YzNlMjA0MDk2NDY4YmY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-19T21:09:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-19T21:09:01Z"}, "message": "c++: Avoid adding implicit attributes during apply_late_template_attributes [PR101180]\n\ndecl_attributes and its caller cplus_decl_attributes sometimes add\nimplicit attributes, e.g. optimize attribute if #pragma GCC optimize\nis active, target attribute if #pragma GCC target is active, or\ne.g. omp declare target attribute if in between #pragma omp declare target\nand #pragma omp end declare target.\n\nFor templates that seems highly undesirable to me though, they should\nget those implicit attributes from the spot the templates were parsed\n(and they do get that), then tsubst through copy_node copies those\nattributes, but then apply_late_template_attributes can or does add\na new set from the spot where they are instantiated, which can be pretty\nrandom point of first use of the template.\n\nConsider e.g.\n #pragma GCC push_options\n #pragma GCC target \"avx\"\n template <int N>\n inline void foo ()\n {\n }\n #pragma GCC pop_options\n #pragma GCC push_options\n #pragma GCC target \"crc32\"\n void\n bar ()\n {\n   foo<0> ();\n }\n #pragma GCC pop_options\ntestcase where the intention is that foo has avx target attribute\nand bar has crc32 target attribute, but we end up with\n__attribute__((target (\"crc32\"), target (\"avx\")))\non foo<0> (and due to yet another bug actually don't enable avx\nin foo<0>).  In this particular case it is a regression caused\nby r12-299-ga0fdff3cf33f7284 which apparently calls\ncplus_decl_attributes even if attributes != NULL but late_attrs\nis NULL, before those changes we didn't call it in those cases.\nBut, if there is at least one unrelated dependent attribute this\nwould happen already in older releases.\n\nThe following patch fixes that by temporarily overriding the variables\nthat control the addition of the implicit attributes.\n\nShall we also change the function so that it doesn't call\ncplus_decl_attributes if late_attrs is NULL, or was that change\nintentional?\n\n2021-11-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/101180\n\t* pt.c (apply_late_template_attributes): Temporarily override\n\tcurrent_optimize_pragma, optimization_current_node,\n\tcurrent_target_pragma and scope_chain->omp_declare_target_attribute,\n\tso that cplus_decl_attributes doesn't add implicit attributes.\n\n\t* g++.target/i386/pr101180.C: New test.", "tree": {"sha": "e8afbf5fd46cd99d2cc88d0f85900c8996035442", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8afbf5fd46cd99d2cc88d0f85900c8996035442"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b751b225e4f02cf0c446e659e7c3e204096468bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b751b225e4f02cf0c446e659e7c3e204096468bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b751b225e4f02cf0c446e659e7c3e204096468bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b751b225e4f02cf0c446e659e7c3e204096468bf/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16d1d97626cc542d0274aa998f4e584aeab44017", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16d1d97626cc542d0274aa998f4e584aeab44017", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16d1d97626cc542d0274aa998f4e584aeab44017"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "c73e035d8b87f64aedc54111050c0258d1efe3f0", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b751b225e4f02cf0c446e659e7c3e204096468bf/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b751b225e4f02cf0c446e659e7c3e204096468bf/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b751b225e4f02cf0c446e659e7c3e204096468bf", "patch": "@@ -11727,6 +11727,17 @@ apply_late_template_attributes (tree *decl_p, tree attributes, int attr_flags,\n \tq = &TREE_CHAIN (*q);\n     }\n \n+  /* cplus_decl_attributes can add some attributes implicitly.  For templates,\n+     those attributes should have been added already when those templates were\n+     parsed, and shouldn't be added based on from which context they are\n+     first time instantiated.  */\n+  auto o1 = make_temp_override (current_optimize_pragma, NULL_TREE);\n+  auto o2 = make_temp_override (optimization_current_node,\n+\t\t\t\toptimization_default_node);\n+  auto o3 = make_temp_override (current_target_pragma, NULL_TREE);\n+  auto o4 = make_temp_override (scope_chain->omp_declare_target_attribute,\n+\t\t\t\tNULL);\n+\n   cplus_decl_attributes (decl_p, late_attrs, attr_flags);\n \n   return true;"}, {"sha": "483070835aacb1e6d7ceb5555d7cc38a2631c181", "filename": "gcc/testsuite/g++.target/i386/pr101180.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b751b225e4f02cf0c446e659e7c3e204096468bf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr101180.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b751b225e4f02cf0c446e659e7c3e204096468bf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr101180.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr101180.C?ref=b751b225e4f02cf0c446e659e7c3e204096468bf", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/101180\n+// { dg-do compile { target c++11 } }\n+\n+#pragma GCC target \"avx\"\n+template <typename> struct A {};\n+#pragma GCC push_options\n+#pragma GCC target \"avx,avx2,bmi,bmi2,fma,f16c\"\n+template <typename T> using B = A<T>;\n+template <typename> struct C;\n+template <> struct C<float> {\n+  __attribute__((always_inline)) float operator()(long) { return .0f; }\n+};\n+long d;\n+template <typename T> void e(B<T>) {\n+  T{C<T>()(d)};\n+}\n+template <typename T, typename FromT> void f(T d, FromT) {\n+  e(d);\n+}\n+int g;\n+void h() {\n+  A<float> i;\n+  f(i, g);\n+}\n+#pragma GCC pop_options"}]}