{"sha": "6eb4a537637cea8691f76bde57a4bf210489b3fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmViNGE1Mzc2MzdjZWE4NjkxZjc2YmRlNTdhNGJmMjEwNDg5YjNmZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-12-02T23:53:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-12-02T23:53:43Z"}, "message": "re PR preprocessor/57580 (Repeated _Pragma message directives in macro causes problems)\n\n\tPR preprocessor/57580\n\t* c-ppoutput.c (print): Change printed field to bool.\n\tMove src_file last for smaller padding.\n\t(init_pp_output): Set print.printed to false instead of 0.\n\t(scan_translation_unit): Fix up formatting.  Set print.printed\n\tto true after printing something other than newline.\n\t(scan_translation_unit_trad): Set print.printed to true instead of 1.\n\t(maybe_print_line_1): Set print.printed to false instead of 0.\n\t(print_line_1): Likewise.\n\t(do_line_change): Set print.printed to true instead of 1.\n\t(cb_define, dump_queued_macros, cb_include, cb_def_pragma,\n\tdump_macro): Set print.printed to false after printing newline.\n\n\t* c-c++-common/cpp/pr57580.c: New test.\n\t* c-c++-common/gomp/pr57580.c: New test.\n\nFrom-SVN: r231213", "tree": {"sha": "0f7a15c341c498470e6d34e8e39ac7c67506448f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f7a15c341c498470e6d34e8e39ac7c67506448f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6eb4a537637cea8691f76bde57a4bf210489b3fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eb4a537637cea8691f76bde57a4bf210489b3fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eb4a537637cea8691f76bde57a4bf210489b3fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eb4a537637cea8691f76bde57a4bf210489b3fd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49ed2fa42911fe38392f2667fee04df0bd1191f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49ed2fa42911fe38392f2667fee04df0bd1191f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49ed2fa42911fe38392f2667fee04df0bd1191f9"}], "stats": {"total": 104, "additions": 90, "deletions": 14}, "files": [{"sha": "a6a4fc82c03a8ca8f92febbc155367fdcc606769", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eb4a537637cea8691f76bde57a4bf210489b3fd/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eb4a537637cea8691f76bde57a4bf210489b3fd/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=6eb4a537637cea8691f76bde57a4bf210489b3fd", "patch": "@@ -1,3 +1,18 @@\n+2015-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/57580\n+\t* c-ppoutput.c (print): Change printed field to bool.\n+\tMove src_file last for smaller padding.\n+\t(init_pp_output): Set print.printed to false instead of 0.\n+\t(scan_translation_unit): Fix up formatting.  Set print.printed\n+\tto true after printing something other than newline.\n+\t(scan_translation_unit_trad): Set print.printed to true instead of 1.\n+\t(maybe_print_line_1): Set print.printed to false instead of 0.\n+\t(print_line_1): Likewise.\n+\t(do_line_change): Set print.printed to true instead of 1.\n+\t(cb_define, dump_queued_macros, cb_include, cb_def_pragma,\n+\tdump_macro): Set print.printed to false after printing newline.\n+\n 2015-12-02  Jason Merrill  <jason@redhat.com>\n \n \t* c-common.c (fold_for_warn): New."}, {"sha": "6aa7c1a079ed6d0a678dc83fc3b7d511ec3302c5", "filename": "gcc/c-family/c-ppoutput.c", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eb4a537637cea8691f76bde57a4bf210489b3fd/gcc%2Fc-family%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eb4a537637cea8691f76bde57a4bf210489b3fd/gcc%2Fc-family%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ppoutput.c?ref=6eb4a537637cea8691f76bde57a4bf210489b3fd", "patch": "@@ -31,11 +31,11 @@ static struct\n   const cpp_token *prev;\t/* Previous token.  */\n   const cpp_token *source;\t/* Source token for spacing.  */\n   int src_line;\t\t\t/* Line number currently being written.  */\n-  unsigned char printed;\t/* Nonzero if something output at line.  */\n+  bool printed;\t\t\t/* True if something output at line.  */\n   bool first_time;\t\t/* pp_file_change hasn't been called yet.  */\n-  const char *src_file;\t\t/* Current source file.  */\n   bool prev_was_system_token;\t/* True if the previous token was a\n \t\t\t\t   system token.*/\n+  const char *src_file;\t\t/* Current source file.  */\n } print;\n \n /* Defined and undefined macros being queued for output with -dU at\n@@ -153,7 +153,7 @@ init_pp_output (FILE *out_stream)\n \n   /* Initialize the print structure.  */\n   print.src_line = 1;\n-  print.printed = 0;\n+  print.printed = false;\n   print.prev = 0;\n   print.outf = out_stream;\n   print.first_time = 1;\n@@ -206,12 +206,16 @@ scan_translation_unit (cpp_reader *pfile)\n \t    {\n \t      line_marker_emitted = do_line_change (pfile, token, loc, false);\n \t      putc (' ', print.outf);\n+\t      print.printed = true;\n \t    }\n \t  else if (print.source->flags & PREV_WHITE\n \t\t   || (print.prev\n \t\t       && cpp_avoid_paste (pfile, print.prev, token))\n \t\t   || (print.prev == NULL && token->type == CPP_HASH))\n-\t    putc (' ', print.outf);\n+\t    {\n+\t      putc (' ', print.outf);\n+\t      print.printed = true;\n+\t    }\n \t}\n       else if (token->flags & PREV_WHITE)\n \t{\n@@ -222,6 +226,7 @@ scan_translation_unit (cpp_reader *pfile)\n \t      && !in_pragma)\n \t    line_marker_emitted = do_line_change (pfile, token, loc, false);\n \t  putc (' ', print.outf);\n+\t  print.printed = true;\n \t}\n \n       avoid_paste = false;\n@@ -239,7 +244,7 @@ scan_translation_unit (cpp_reader *pfile)\n \t    fprintf (print.outf, \"%s %s\", space, name);\n \t  else\n \t    fprintf (print.outf, \"%s\", name);\n-\t  print.printed = 1;\n+\t  print.printed = true;\n \t  in_pragma = true;\n \t}\n       else if (token->type == CPP_PRAGMA_EOL)\n@@ -250,23 +255,23 @@ scan_translation_unit (cpp_reader *pfile)\n       else\n \t{\n \t  if (cpp_get_options (parse_in)->debug)\n-\t      linemap_dump_location (line_table, token->src_loc,\n-\t\t\t\t     print.outf);\n+\t    linemap_dump_location (line_table, token->src_loc, print.outf);\n \n \t  if (do_line_adjustments\n \t      && !in_pragma\n \t      && !line_marker_emitted\n-\t      && print.prev_was_system_token != !!in_system_header_at(loc)\n+\t      && print.prev_was_system_token != !!in_system_header_at (loc)\n \t      && !is_location_from_builtin_token (loc))\n \t    /* The system-ness of this token is different from the one\n \t       of the previous token.  Let's emit a line change to\n \t       mark the new system-ness before we emit the token.  */\n \t    {\n \t      do_line_change (pfile, token, loc, false);\n-\t      print.prev_was_system_token = !!in_system_header_at(loc);\n+\t      print.prev_was_system_token = !!in_system_header_at (loc);\n \t    }\n \t  cpp_output_token (token, print.outf);\n \t  line_marker_emitted = false;\n+\t  print.printed = true;\n \t}\n \n       /* CPP_COMMENT tokens and raw-string literal tokens can\n@@ -316,7 +321,7 @@ scan_translation_unit_trad (cpp_reader *pfile)\n       size_t len = pfile->out.cur - pfile->out.base;\n       maybe_print_line (pfile->out.first_line);\n       fwrite (pfile->out.base, 1, len, print.outf);\n-      print.printed = 1;\n+      print.printed = true;\n       if (!CPP_OPTION (pfile, discard_comments))\n \taccount_for_newlines (pfile->out.base, len);\n     }\n@@ -339,7 +344,7 @@ maybe_print_line_1 (source_location src_loc, FILE *stream)\n     {\n       putc ('\\n', stream);\n       print.src_line++;\n-      print.printed = 0;\n+      print.printed = false;\n     }\n \n   if (!flag_no_line_commands\n@@ -385,7 +390,7 @@ print_line_1 (source_location src_loc, const char *special_flags, FILE *stream)\n   /* End any previous line of text.  */\n   if (print.printed)\n     putc ('\\n', stream);\n-  print.printed = 0;\n+  print.printed = false;\n \n   if (!flag_no_line_commands)\n     {\n@@ -460,7 +465,7 @@ do_line_change (cpp_reader *pfile, const cpp_token *token,\n   if (!CPP_OPTION (pfile, traditional))\n     {\n       int spaces = LOCATION_COLUMN (src_loc) - 2;\n-      print.printed = 1;\n+      print.printed = true;\n \n       while (-- spaces >= 0)\n \tputc (' ', print.outf);\n@@ -503,6 +508,7 @@ cb_define (cpp_reader *pfile, source_location line, cpp_hashnode *node)\n     fputs ((const char *) NODE_NAME (node), print.outf);\n \n   putc ('\\n', print.outf);\n+  print.printed = false;\n   linemap_resolve_location (line_table, line,\n \t\t\t    LRK_MACRO_DEFINITION_LOCATION,\n \t\t\t    &map);\n@@ -554,7 +560,7 @@ dump_queued_macros (cpp_reader *pfile ATTRIBUTE_UNUSED)\n     {\n       putc ('\\n', print.outf);\n       print.src_line++;\n-      print.printed = 0;\n+      print.printed = false;\n     }\n \n   for (q = define_queue; q;)\n@@ -563,6 +569,7 @@ dump_queued_macros (cpp_reader *pfile ATTRIBUTE_UNUSED)\n       fputs (\"#define \", print.outf);\n       fputs (q->macro, print.outf);\n       putc ('\\n', print.outf);\n+      print.printed = false;\n       print.src_line++;\n       oq = q;\n       q = q->next;\n@@ -606,6 +613,7 @@ cb_include (cpp_reader *pfile ATTRIBUTE_UNUSED, source_location line,\n     }\n \n   putc ('\\n', print.outf);\n+  print.printed = false;\n   print.src_line++;\n }\n \n@@ -671,6 +679,7 @@ cb_def_pragma (cpp_reader *pfile, source_location line)\n   maybe_print_line (line);\n   fputs (\"#pragma \", print.outf);\n   cpp_output_line (pfile, print.outf);\n+  print.printed = false;\n   print.src_line++;\n }\n \n@@ -684,6 +693,7 @@ dump_macro (cpp_reader *pfile, cpp_hashnode *node, void *v ATTRIBUTE_UNUSED)\n       fputs ((const char *) cpp_macro_definition (pfile, node),\n \t     print.outf);\n       putc ('\\n', print.outf);\n+      print.printed = false;\n       print.src_line++;\n     }\n "}, {"sha": "7f39c2d3b52a0d11dd16fb6acadc75e77f9880fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eb4a537637cea8691f76bde57a4bf210489b3fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eb4a537637cea8691f76bde57a4bf210489b3fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6eb4a537637cea8691f76bde57a4bf210489b3fd", "patch": "@@ -1,3 +1,9 @@\n+2015-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/57580\n+\t* c-c++-common/cpp/pr57580.c: New test.\n+\t* c-c++-common/gomp/pr57580.c: New test.\n+\n 2015-12-02  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "1039e213e1c65a331b99dd941f7d6468678211f6", "filename": "gcc/testsuite/c-c++-common/cpp/pr57580.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eb4a537637cea8691f76bde57a4bf210489b3fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr57580.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eb4a537637cea8691f76bde57a4bf210489b3fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr57580.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr57580.c?ref=6eb4a537637cea8691f76bde57a4bf210489b3fd", "patch": "@@ -0,0 +1,9 @@\n+/* PR preprocessor/57580 */\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps\" } */\n+\n+#define MSG \t\\\n+  _Pragma(\"message(\\\"message0\\\")\")\t\\\n+  _Pragma(\"message(\\\"message1\\\")\")\n+MSG\t/* { dg-message \"message0\" } */\n+/* { dg-message \"message1\" \"\" { target *-*-* } 8 } */"}, {"sha": "9bbe707ef37e7528fb6479099e519c4e1c8e326d", "filename": "gcc/testsuite/c-c++-common/gomp/pr57580.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eb4a537637cea8691f76bde57a4bf210489b3fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr57580.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eb4a537637cea8691f76bde57a4bf210489b3fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr57580.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr57580.c?ref=6eb4a537637cea8691f76bde57a4bf210489b3fd", "patch": "@@ -0,0 +1,36 @@\n+/* PR preprocessor/57580 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp -save-temps -fdump-tree-gimple\" } */\n+\n+#define PS \\\n+  _Pragma(\"omp parallel num_threads(2)\") \\\n+  { \\\n+    _Pragma(\"omp single\") \\\n+    { \\\n+      ret = 0; \\\n+    } \\\n+  }\n+\n+int\n+main ()\n+{\n+  int ret;\n+  _Pragma(\"omp parallel num_threads(3)\")\n+  {\n+    _Pragma(\"omp single\")\n+    {\n+      ret = 0;\n+    }\n+  }\n+  _Pragma(\"omp parallel num_threads(4)\") { _Pragma(\"omp single\") { ret = 0; } }\n+  { _Pragma(\"omp parallel num_threads(5)\") { _Pragma(\"omp single\") { ret = 0; } } }\n+  PS\n+  PS\n+  return ret;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"#pragma omp parallel\\[^\\n\\r]*num_threads\\\\(2\\\\)\" 2 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-times \"#pragma omp parallel\\[^\\n\\r]*num_threads\\\\(3\\\\)\" 1 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-times \"#pragma omp parallel\\[^\\n\\r]*num_threads\\\\(4\\\\)\" 1 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-times \"#pragma omp parallel\\[^\\n\\r]*num_threads\\\\(5\\\\)\" 1 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-times \"#pragma omp single\" 5 \"gimple\" } } */"}]}