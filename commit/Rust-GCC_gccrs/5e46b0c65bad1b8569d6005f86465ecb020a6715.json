{"sha": "5e46b0c65bad1b8569d6005f86465ecb020a6715", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU0NmIwYzY1YmFkMWI4NTY5ZDYwMDVmODY0NjVlY2IwMjBhNjcxNQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2011-02-08T17:41:00Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-02-08T17:41:00Z"}, "message": "common.opt (fcx-limited-range): Add SetByCombined flag.\n\n\t* common.opt (fcx-limited-range): Add SetByCombined flag.\n\t(ffinite-math-only, fmath-errno, frounding-math): Likewise.\n\t(fsignaling-nans, fsigned-zeros, ftrapping-math): Likewise.\n\t(fassociative-math, freciprocal-math): Likewise.\n\t(funsafe-math-optimizations): Likewise.\n\t* opth-gen.awk: Handle SetByCombined.\n\t* optc-gen.awk: Likewise.\n\t* opts.c (set_fast_math_flags): Don't override flag if set by\n\tfrontend.\n\t(set_unsafe_math_optimizations_flags): Likewise.\n\t* doc/options.texi (Option properties): Document SetByCombined.\n\nFrom-SVN: r169930", "tree": {"sha": "8fc008788b764f0ba0d67864e8566ca53db122f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fc008788b764f0ba0d67864e8566ca53db122f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e46b0c65bad1b8569d6005f86465ecb020a6715", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e46b0c65bad1b8569d6005f86465ecb020a6715", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e46b0c65bad1b8569d6005f86465ecb020a6715", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e46b0c65bad1b8569d6005f86465ecb020a6715/comments", "author": null, "committer": null, "parents": [{"sha": "32243d46707ec76650af0e33cdf77ee3fc3600eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32243d46707ec76650af0e33cdf77ee3fc3600eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32243d46707ec76650af0e33cdf77ee3fc3600eb"}], "stats": {"total": 102, "additions": 76, "deletions": 26}, "files": [{"sha": "e27a71fe59f6dc83c1cee68141857f8a4a063e5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e46b0c65bad1b8569d6005f86465ecb020a6715/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e46b0c65bad1b8569d6005f86465ecb020a6715/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e46b0c65bad1b8569d6005f86465ecb020a6715", "patch": "@@ -1,3 +1,17 @@\n+2011-02-08  Ian Lance Taylor  <iant@google.com>\n+\n+\t* common.opt (fcx-limited-range): Add SetByCombined flag.\n+\t(ffinite-math-only, fmath-errno, frounding-math): Likewise.\n+\t(fsignaling-nans, fsigned-zeros, ftrapping-math): Likewise.\n+\t(fassociative-math, freciprocal-math): Likewise.\n+\t(funsafe-math-optimizations): Likewise.\n+\t* opth-gen.awk: Handle SetByCombined.\n+\t* optc-gen.awk: Likewise.\n+\t* opts.c (set_fast_math_flags): Don't override flag if set by\n+\tfrontend.\n+\t(set_unsafe_math_optimizations_flags): Likewise.\n+\t* doc/options.texi (Option properties): Document SetByCombined.\n+\n 2011-02-08  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config.gcc (arc-*, alpha*-*-gnu*, arm*-*-netbsd*, arm-*-pe*,"}, {"sha": "5485da92840b9a19f0c12dcd83a59b5225e7300b", "filename": "gcc/common.opt", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e46b0c65bad1b8569d6005f86465ecb020a6715/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e46b0c65bad1b8569d6005f86465ecb020a6715/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=5e46b0c65bad1b8569d6005f86465ecb020a6715", "patch": "@@ -1,6 +1,6 @@\n ; Options for the language- and target-independent parts of the compiler.\n \n-; Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+; Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n ; Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n@@ -878,7 +878,7 @@ Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n fcx-limited-range\n-Common Report Var(flag_cx_limited_range) Optimization\n+Common Report Var(flag_cx_limited_range) Optimization SetByCombined\n Omit range reduction step when performing complex division\n \n fcx-fortran-rules\n@@ -1024,7 +1024,7 @@ ffast-math\n Common\n \n ffinite-math-only\n-Common Report Var(flag_finite_math_only) Optimization\n+Common Report Var(flag_finite_math_only) Optimization SetByCombined\n Assume no NaNs or infinities are generated\n \n ffixed-\n@@ -1340,7 +1340,7 @@ Common Report Var(flag_lto_report) Init(0) Optimization\n Report various link-time optimization statistics\n \n fmath-errno\n-Common Report Var(flag_errno_math) Init(1) Optimization\n+Common Report Var(flag_errno_math) Init(1) Optimization SetByCombined\n Set errno after built-in math functions\n \n fmax-errors=\n@@ -1577,7 +1577,7 @@ Common Ignore\n Does nothing.  Preserved for backward compatibility.\n \n frounding-math\n-Common Report Var(flag_rounding_math) Optimization\n+Common Report Var(flag_rounding_math) Optimization SetByCombined\n Disable optimizations that assume default FP rounding behavior\n \n fsched-interblock\n@@ -1706,11 +1706,11 @@ Common Report Var(flag_show_column) Init(1)\n Show column numbers in diagnostics, when available.  Default on\n \n fsignaling-nans\n-Common Report Var(flag_signaling_nans) Optimization\n+Common Report Var(flag_signaling_nans) Optimization SetByCombined\n Disable optimizations observable by IEEE signaling NaNs\n \n fsigned-zeros\n-Common Report Var(flag_signed_zeros) Init(1) Optimization\n+Common Report Var(flag_signed_zeros) Init(1) Optimization SetByCombined\n Disable floating point optimizations that ignore the IEEE signedness of zero\n \n fsingle-precision-constant\n@@ -1827,7 +1827,7 @@ Perform superblock formation via tail duplication\n ; (user-visible) trap.  This is the case, for example, in nonstop\n ; IEEE 754 arithmetic.\n ftrapping-math\n-Common Report Var(flag_trapping_math) Init(1) Optimization\n+Common Report Var(flag_trapping_math) Init(1) Optimization SetByCombined\n Assume floating-point operations can trap\n \n ftrapv\n@@ -1978,20 +1978,20 @@ Common Report Var(flag_unsafe_loop_optimizations) Optimization\n Allow loop optimizations to assume that the loops behave in normal way\n \n fassociative-math\n-Common Report Var(flag_associative_math)\n+Common Report Var(flag_associative_math) SetByCombined\n Allow optimization for floating-point arithmetic which may change the\n result of the operation due to rounding.\n \n freciprocal-math\n-Common Report Var(flag_reciprocal_math)\n+Common Report Var(flag_reciprocal_math) SetByCombined\n Same as -fassociative-math for expressions which include division.\n \n ; Nonzero means that unsafe floating-point math optimizations are allowed\n ; for the sake of speed.  IEEE compliance is not guaranteed, and operations\n ; are allowed to assume that their arguments and results are \"normal\"\n ; (e.g., nonnegative for SQRT).\n funsafe-math-optimizations\n-Common Report Var(flag_unsafe_math_optimizations) Optimization\n+Common Report Var(flag_unsafe_math_optimizations) Optimization SetByCombined\n Allow math optimizations that may violate IEEE or ISO standards\n \n funswitch-loops"}, {"sha": "e39d79e1c8f8418a626b133abf83eeecdbc0f65a", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e46b0c65bad1b8569d6005f86465ecb020a6715/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e46b0c65bad1b8569d6005f86465ecb020a6715/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=5e46b0c65bad1b8569d6005f86465ecb020a6715", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+@c Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n @c Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n@@ -436,4 +436,17 @@ the @option{--help} output.\n Build the @code{cl_target_option} structure to hold a copy of the\n option, add the functions @code{cl_target_option_save} and\n @code{cl_target_option_restore} to save and restore the options.\n+\n+@item SetByCombined\n+The option may also be set by a combined option such as\n+@option{-ffast-math}.  This causes the @code{gcc_options} struct to\n+have a field @code{frontend_set_@var{name}}, where @code{@var{name}}\n+is the name of the field holding the value of this option (without the\n+leading @code{x_}).  This gives the front end a way to indicate that\n+the value has been set explicitly and should not be changed by the\n+combined option.  For example, some front ends use this to prevent\n+@option{-ffast-math} and @option{-fno-fast-math} from changing the\n+value of @option{-fmath-errno} for languages that do not use\n+@code{errno}.\n+\n @end table"}, {"sha": "502b23bf6e02a95ec77316b65d749ae473732f98", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e46b0c65bad1b8569d6005f86465ecb020a6715/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e46b0c65bad1b8569d6005f86465ecb020a6715/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=5e46b0c65bad1b8569d6005f86465ecb020a6715", "patch": "@@ -1,4 +1,4 @@\n-#  Copyright (C) 2003, 2004, 2007, 2008, 2009, 2010\n+#  Copyright (C) 2003, 2004, 2007, 2008, 2009, 2010, 2011\n #  Free Software Foundation, Inc.\n #  Contributed by Kelley Cook, June 2004.\n #  Original code from Neil Booth, May 2003.\n@@ -250,6 +250,10 @@ for (i = 0; i < n_opts; i++) {\n \t\tprint \"#undef x_\" name\n \t}\n }\n+for (i = 0; i < n_opts; i++) {\n+\tif (flag_set_p(\"SetByCombined\", flags[i]))\n+\t\tprint \"  false, /* frontend_set_\" var_name(flags[i]) \" */\"\n+}\n print \"};\"\n print \"\"\n print \"struct gcc_options global_options;\""}, {"sha": "c3f6c04ebfb46a08d6b62e453db8586f67ee3537", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e46b0c65bad1b8569d6005f86465ecb020a6715/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e46b0c65bad1b8569d6005f86465ecb020a6715/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=5e46b0c65bad1b8569d6005f86465ecb020a6715", "patch": "@@ -1,4 +1,4 @@\n-#  Copyright (C) 2003,2004,2005,2006,2007,2008, 2010\n+#  Copyright (C) 2003,2004,2005,2006,2007,2008, 2010, 2011\n #  Free Software Foundation, Inc.\n #  Contributed by Kelley Cook, June 2004.\n #  Original code from Neil Booth, May 2003.\n@@ -193,6 +193,13 @@ for (i = 0; i < n_opts; i++) {\n \t\tprint \"#endif\"\n \t}\n }\n+for (i = 0; i < n_opts; i++) {\n+\tif (flag_set_p(\"SetByCombined\", flags[i])) {\n+\t\tprint \"#ifndef GENERATOR_FILE\"\n+\t\tprint \"  bool frontend_set_\" var_name(flags[i]) \";\"\n+\t\tprint \"#endif\"\n+\t}\n+}\n print \"#ifndef GENERATOR_FILE\"\n print \"};\"\n print \"extern struct gcc_options global_options;\""}, {"sha": "8ca9c67bb8e8e46928bcc8a29161dd42308bd54b", "filename": "gcc/opts.c", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e46b0c65bad1b8569d6005f86465ecb020a6715/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e46b0c65bad1b8569d6005f86465ecb020a6715/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=5e46b0c65bad1b8569d6005f86465ecb020a6715", "patch": "@@ -1,5 +1,5 @@\n /* Command line option handling.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Neil Booth.\n \n@@ -1757,15 +1757,23 @@ set_Wstrict_aliasing (struct gcc_options *opts, int onoff)\n static void\n set_fast_math_flags (struct gcc_options *opts, int set)\n {\n-  opts->x_flag_unsafe_math_optimizations = set;\n-  set_unsafe_math_optimizations_flags (opts, set);\n-  opts->x_flag_finite_math_only = set;\n-  opts->x_flag_errno_math = !set;\n+  if (!opts->frontend_set_flag_unsafe_math_optimizations)\n+    {\n+      opts->x_flag_unsafe_math_optimizations = set;\n+      set_unsafe_math_optimizations_flags (opts, set);\n+    }\n+  if (!opts->frontend_set_flag_finite_math_only)\n+    opts->x_flag_finite_math_only = set;\n+  if (!opts->frontend_set_flag_errno_math)\n+    opts->x_flag_errno_math = !set;\n   if (set)\n     {\n-      opts->x_flag_signaling_nans = 0;\n-      opts->x_flag_rounding_math = 0;\n-      opts->x_flag_cx_limited_range = 1;\n+      if (!opts->frontend_set_flag_signaling_nans)\n+\topts->x_flag_signaling_nans = 0;\n+      if (!opts->frontend_set_flag_rounding_math)\n+\topts->x_flag_rounding_math = 0;\n+      if (!opts->frontend_set_flag_cx_limited_range)\n+\topts->x_flag_cx_limited_range = 1;\n     }\n }\n \n@@ -1774,10 +1782,14 @@ set_fast_math_flags (struct gcc_options *opts, int set)\n static void\n set_unsafe_math_optimizations_flags (struct gcc_options *opts, int set)\n {\n-  opts->x_flag_trapping_math = !set;\n-  opts->x_flag_signed_zeros = !set;\n-  opts->x_flag_associative_math = set;\n-  opts->x_flag_reciprocal_math = set;\n+  if (!opts->frontend_set_flag_trapping_math)\n+    opts->x_flag_trapping_math = !set;\n+  if (!opts->frontend_set_flag_signed_zeros)\n+    opts->x_flag_signed_zeros = !set;\n+  if (!opts->frontend_set_flag_associative_math)\n+    opts->x_flag_associative_math = set;\n+  if (!opts->frontend_set_flag_reciprocal_math)\n+    opts->x_flag_reciprocal_math = set;\n }\n \n /* Return true iff flags in OPTS are set as if -ffast-math.  */"}]}