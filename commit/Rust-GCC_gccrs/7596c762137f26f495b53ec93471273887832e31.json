{"sha": "7596c762137f26f495b53ec93471273887832e31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU5NmM3NjIxMzdmMjZmNDk1YjUzZWM5MzQ3MTI3Mzg4NzgzMmUzMQ==", "commit": {"author": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2021-05-10T08:46:45Z"}, "committer": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2021-05-10T08:46:45Z"}, "message": "arm: Fix wrong code with MVE V2DImode loads and stores [PR99960]\n\nAs the PR shows, we currently miscompile V2DImode loads and stores for\nMVE.  We're currently using 64-bit loads/stores, but need to be using\n128-bit vector loads and stores. Fixed thusly.\n\nSome intrinsics tests were checking that we (incorrectly) used the\n64-bit loads/stores: these have been updated.\n\ngcc/ChangeLog:\n\n\tPR target/99960\n\t* config/arm/mve.md (*mve_mov<mode>): Simplify output code. Use\n\tvldrw.u32 and vstrw.32 for V2D[IF]mode loads and stores.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/99960\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_s64.c:\n\tUpdate now that we're (correctly) using full 128-bit vector\n\tloads/stores.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_u64.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_z_s64.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_z_u64.c:\n\tLikewise.\n\t* gcc.target/arm/mve/intrinsics/vuninitializedq_int.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vuninitializedq_int1.c:\n\tLikewise.", "tree": {"sha": "4fe07feb8c8287c46c97ae5bc7f1a9e676956902", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fe07feb8c8287c46c97ae5bc7f1a9e676956902"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7596c762137f26f495b53ec93471273887832e31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7596c762137f26f495b53ec93471273887832e31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7596c762137f26f495b53ec93471273887832e31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7596c762137f26f495b53ec93471273887832e31/comments", "author": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2d7e58f4ea787eafdf3e7d39567739451d12d39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2d7e58f4ea787eafdf3e7d39567739451d12d39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2d7e58f4ea787eafdf3e7d39567739451d12d39"}], "stats": {"total": 57, "additions": 15, "deletions": 42}, "files": [{"sha": "5c11885fb73f69bbcbe6565af02959202d900cfa", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7596c762137f26f495b53ec93471273887832e31/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7596c762137f26f495b53ec93471273887832e31/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=7596c762137f26f495b53ec93471273887832e31", "patch": "@@ -41,44 +41,19 @@\n \n   if (which_alternative == 4 || which_alternative == 7)\n     {\n-      rtx ops[2];\n-      int regno = (which_alternative == 7)\n-\t\t  ? REGNO (operands[1]) : REGNO (operands[0]);\n-\n-      ops[0] = operands[0];\n-      ops[1] = operands[1];\n-      if (<MODE>mode == V2DFmode || <MODE>mode == V2DImode)\n-\t{\n-\t  if (which_alternative == 7)\n-\t    {\n-\t      ops[1] = gen_rtx_REG (DImode, regno);\n-\t      output_asm_insn (\"vstr.64\\t%P1, %E0\",ops);\n-\t    }\n-\t  else\n-\t    {\n-\t      ops[0] = gen_rtx_REG (DImode, regno);\n-\t      output_asm_insn (\"vldr.64\\t%P0, %E1\",ops);\n-\t    }\n-\t}\n-      else if (<MODE>mode == TImode)\n+      if (<MODE>mode == V2DFmode || <MODE>mode == V2DImode || <MODE>mode == TImode)\n \t{\n \t  if (which_alternative == 7)\n-\t    output_asm_insn (\"vstr.64\\t%q1, %E0\",ops);\n+\t    output_asm_insn (\"vstrw.32\\t%q1, %E0\", operands);\n \t  else\n-\t    output_asm_insn (\"vldr.64\\t%q0, %E1\",ops);\n+\t    output_asm_insn (\"vldrw.u32\\t%q0, %E1\",operands);\n \t}\n       else\n \t{\n \t  if (which_alternative == 7)\n-\t    {\n-\t      ops[1] = gen_rtx_REG (TImode, regno);\n-\t      output_asm_insn (\"vstr<V_sz_elem1>.<V_sz_elem>\\t%q1, %E0\",ops);\n-\t    }\n+\t    output_asm_insn (\"vstr<V_sz_elem1>.<V_sz_elem>\\t%q1, %E0\", operands);\n \t  else\n-\t    {\n-\t      ops[0] = gen_rtx_REG (TImode, regno);\n-\t      output_asm_insn (\"vldr<V_sz_elem1>.<V_sz_elem>\\t%q0, %E1\",ops);\n-\t    }\n+\t    output_asm_insn (\"vldr<V_sz_elem1>.<V_sz_elem>\\t%q0, %E1\", operands);\n \t}\n       return \"\";\n     }"}, {"sha": "a9b1f81b62d9c7c360c28900d0c70d254ee76eb9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_s64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7596c762137f26f495b53ec93471273887832e31/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7596c762137f26f495b53ec93471273887832e31/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_s64.c?ref=7596c762137f26f495b53ec93471273887832e31", "patch": "@@ -11,6 +11,6 @@ foo (uint64x2_t * addr)\n }\n \n /* { dg-final { scan-assembler \"vldrd.64\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" } } */\n-/* { dg-final { scan-assembler-times \"vldr.64\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vstr.64\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vldrw.u32\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vstrw.32\" 1 } } */\n /* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "e32a06695aeca2a039685a8b3fddc9c2429ca837", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_u64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7596c762137f26f495b53ec93471273887832e31/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7596c762137f26f495b53ec93471273887832e31/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_u64.c?ref=7596c762137f26f495b53ec93471273887832e31", "patch": "@@ -11,6 +11,6 @@ foo (uint64x2_t * addr)\n }\n \n /* { dg-final { scan-assembler \"vldrd.64\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" } } */\n-/* { dg-final { scan-assembler-times \"vldr.64\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vstr.64\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vldrw.u32\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vstrw.32\" 1 } } */\n /* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "bb06cf88e324d3414846e0c787a384a11fb70b06", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_z_s64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7596c762137f26f495b53ec93471273887832e31/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_z_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7596c762137f26f495b53ec93471273887832e31/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_z_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_z_s64.c?ref=7596c762137f26f495b53ec93471273887832e31", "patch": "@@ -10,6 +10,6 @@ int64x2_t foo (uint64x2_t * addr, mve_pred16_t p)\n \n /* { dg-final { scan-assembler \"vpst\" } } */\n /* { dg-final { scan-assembler \"vldrdt.u64\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" } } */\n-/* { dg-final { scan-assembler-times \"vldr.64\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vstr.64\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vldrw.u32\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vstrw.32\" 1 } } */\n /* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "558115d49efcd65500e2f1b8a2cf7c00e6e2a920", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_z_u64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7596c762137f26f495b53ec93471273887832e31/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_z_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7596c762137f26f495b53ec93471273887832e31/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_z_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_z_u64.c?ref=7596c762137f26f495b53ec93471273887832e31", "patch": "@@ -10,6 +10,6 @@ uint64x2_t foo (uint64x2_t * addr, mve_pred16_t p)\n \n /* { dg-final { scan-assembler \"vpst\" } } */\n /* { dg-final { scan-assembler \"vldrdt.u64\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" } } */\n-/* { dg-final { scan-assembler-times \"vldr.64\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vstr.64\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vldrw.u32\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vstrw.32\" 1 } } */\n /* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "cc5e6358bee95637a8d58dd4fe36ac0c17315fa6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vuninitializedq_int.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7596c762137f26f495b53ec93471273887832e31/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7596c762137f26f495b53ec93471273887832e31/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_int.c?ref=7596c762137f26f495b53ec93471273887832e31", "patch": "@@ -27,6 +27,5 @@ foo ()\n \n /* { dg-final { scan-assembler-times \"vstrb.8\" 2 } } */\n /* { dg-final { scan-assembler-times \"vstrh.16\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vstrw.32\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vstr.64\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vstrw.32\" 4 } } */\n /* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "bfeb52b4dd66ef3cf6c2530acade3872dc2cc114", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vuninitializedq_int1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7596c762137f26f495b53ec93471273887832e31/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_int1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7596c762137f26f495b53ec93471273887832e31/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_int1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_int1.c?ref=7596c762137f26f495b53ec93471273887832e31", "patch": "@@ -28,6 +28,5 @@ foo ()\n \n /* { dg-final { scan-assembler-times \"vstrb.8\" 2 } } */\n /* { dg-final { scan-assembler-times \"vstrh.16\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vstrw.32\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vstr.64\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vstrw.32\" 4 } } */\n /* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}]}