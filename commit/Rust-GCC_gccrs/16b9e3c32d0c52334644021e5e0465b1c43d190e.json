{"sha": "16b9e3c32d0c52334644021e5e0465b1c43d190e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZiOWUzYzMyZDBjNTIzMzQ2NDQwMjFlNWUwNDY1YjFjNDNkMTkwZQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-08-14T09:51:34Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-14T09:51:34Z"}, "message": "[Ada] Crash on quantified expression in disabled assertion\n\nThe defining identifier of a quantified expression may be the freeze\npoint of its type.  If the quantified expression appears in an assertion\nthat is disavbled, the freeze node for that type may appear in a tree\nthat will be discarded when the enclosing pragma is elaborated. To\nensure that the freeze node is reachable for subsquent uses we must\ngenerate its freeze node explicitly when the quantified expression is\nanalyzed.\n\n2019-08-14  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch4.adb (Expand_N_Quantified_Expression): Freeze\n\texplicitly the type of the loop parameter.\n\ngcc/testsuite/\n\n\t* gnat.dg/assert2.adb, gnat.dg/assert2.ads: New testcase.\n\nFrom-SVN: r274456", "tree": {"sha": "c953956ad17a9263c210e8f7d5199c4b60d8fdea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c953956ad17a9263c210e8f7d5199c4b60d8fdea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16b9e3c32d0c52334644021e5e0465b1c43d190e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16b9e3c32d0c52334644021e5e0465b1c43d190e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16b9e3c32d0c52334644021e5e0465b1c43d190e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16b9e3c32d0c52334644021e5e0465b1c43d190e/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4cac730ccc741a9bf780390c2703163edc6da470", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cac730ccc741a9bf780390c2703163edc6da470", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cac730ccc741a9bf780390c2703163edc6da470"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "99b551f1d0cb4f8bb4fa6a0e55d079cf51e813e5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b9e3c32d0c52334644021e5e0465b1c43d190e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b9e3c32d0c52334644021e5e0465b1c43d190e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=16b9e3c32d0c52334644021e5e0465b1c43d190e", "patch": "@@ -1,3 +1,8 @@\n+2019-08-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Quantified_Expression): Freeze\n+\texplicitly the type of the loop parameter.\n+\n 2019-08-14  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_util.adb (New_Copy_Tree.Copy_Node_With_Replacement):"}, {"sha": "00f9aae51a3ee63cbbe438b9e9d06f291f58437f", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b9e3c32d0c52334644021e5e0465b1c43d190e/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b9e3c32d0c52334644021e5e0465b1c43d190e/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=16b9e3c32d0c52334644021e5e0465b1c43d190e", "patch": "@@ -10337,8 +10337,30 @@ package body Exp_Ch4 is\n       Flag      : Entity_Id;\n       Scheme    : Node_Id;\n       Stmts     : List_Id;\n+      Var       : Entity_Id;\n \n    begin\n+      --  Ensure that the bound variable is properly frozen. We must do\n+      --  this before expansion because the expression is about to be\n+      --  converted into a loop, and resulting freeze nodes may end up\n+      --  in the wrong place in the tree.\n+\n+      if Present (Iter_Spec) then\n+         Var := Defining_Identifier (Iter_Spec);\n+      else\n+         Var := Defining_Identifier (Loop_Spec);\n+      end if;\n+\n+      declare\n+         P : Node_Id := Parent (N);\n+      begin\n+         while Nkind (P) in N_Subexpr loop\n+            P := Parent (P);\n+         end loop;\n+\n+         Freeze_Before (P, Etype (Var));\n+      end;\n+\n       --  Create the declaration of the flag which tracks the status of the\n       --  quantified expression. Generate:\n "}, {"sha": "9923987ec42df71bbff52ec871583de09366f130", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b9e3c32d0c52334644021e5e0465b1c43d190e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b9e3c32d0c52334644021e5e0465b1c43d190e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=16b9e3c32d0c52334644021e5e0465b1c43d190e", "patch": "@@ -1,3 +1,7 @@\n+2019-08-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/assert2.adb, gnat.dg/assert2.ads: New testcase.\n+\n 2019-08-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/inline18.adb, gnat.dg/inline18.ads,"}, {"sha": "1328004ec758d4cb5083f9514b3da2f79bd1620d", "filename": "gcc/testsuite/gnat.dg/assert2.adb", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b9e3c32d0c52334644021e5e0465b1c43d190e/gcc%2Ftestsuite%2Fgnat.dg%2Fassert2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b9e3c32d0c52334644021e5e0465b1c43d190e/gcc%2Ftestsuite%2Fgnat.dg%2Fassert2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fassert2.adb?ref=16b9e3c32d0c52334644021e5e0465b1c43d190e", "patch": "@@ -0,0 +1,5 @@\n+--  { dg-do compile }\n+\n+package body Assert2 is\n+   procedure Dummy is null;\n+end Assert2;"}, {"sha": "adf9b92121827ac9ea46ad6b9706f373c34eca9f", "filename": "gcc/testsuite/gnat.dg/assert2.ads", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b9e3c32d0c52334644021e5e0465b1c43d190e/gcc%2Ftestsuite%2Fgnat.dg%2Fassert2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b9e3c32d0c52334644021e5e0465b1c43d190e/gcc%2Ftestsuite%2Fgnat.dg%2Fassert2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fassert2.ads?ref=16b9e3c32d0c52334644021e5e0465b1c43d190e", "patch": "@@ -0,0 +1,15 @@\n+package Assert2\n+    with SPARK_Mode\n+is\n+   type Living is new Integer;\n+   function Is_Martian (Unused : Living) return Boolean is (False);\n+\n+   function Is_Green (Unused : Living) return Boolean is (True);\n+\n+   pragma Assert\n+     (for all M in Living => (if Is_Martian (M) then Is_Green (M)));\n+   pragma Assert\n+     (for all M in Living => (if Is_Martian (M) then not Is_Green (M)));\n+\n+   procedure Dummy;\n+end Assert2;"}]}