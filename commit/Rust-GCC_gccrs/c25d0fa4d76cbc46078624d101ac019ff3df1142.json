{"sha": "c25d0fa4d76cbc46078624d101ac019ff3df1142", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI1ZDBmYTRkNzZjYmM0NjA3ODYyNGQxMDFhYzAxOWZmM2RmMTE0Mg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-05-31T17:16:37Z"}, "committer": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-05-31T17:18:15Z"}, "message": "Fix execute/20071219-1.c regression on H8 due to loss of REG_INC notes in peephole2.\n\ngcc/\n\t* lra.c (add_auto_inc_notes): Remove function.\n\t* reload1.c (add_auto_inc_notes): Similarly.  Move into...\n\t* rtlanal.c (add_auto_inc_notes): New function.\n\t* rtl.h (add_auto_inc_notes): Add prototype.\n\t* recog.c (peep2_attempt): Scan and add REG_INC notes to new insns\n\tas needed.", "tree": {"sha": "891b08fcc93545e2d2a8d02ad1c402c76a544dcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/891b08fcc93545e2d2a8d02ad1c402c76a544dcf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c25d0fa4d76cbc46078624d101ac019ff3df1142", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c25d0fa4d76cbc46078624d101ac019ff3df1142", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c25d0fa4d76cbc46078624d101ac019ff3df1142", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c25d0fa4d76cbc46078624d101ac019ff3df1142/comments", "author": null, "committer": null, "parents": [{"sha": "05430b9b6a7c4aeaab595787ac1fbf6f3e0196a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05430b9b6a7c4aeaab595787ac1fbf6f3e0196a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05430b9b6a7c4aeaab595787ac1fbf6f3e0196a0"}], "stats": {"total": 88, "additions": 34, "deletions": 54}, "files": [{"sha": "3435cff6a1dc01dfee0af5865d50dadd9f268045", "filename": "gcc/lra.c", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25d0fa4d76cbc46078624d101ac019ff3df1142/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25d0fa4d76cbc46078624d101ac019ff3df1142/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=c25d0fa4d76cbc46078624d101ac019ff3df1142", "patch": "@@ -2231,34 +2231,6 @@ has_nonexceptional_receiver (void)\n   return false;\n }\n \n-\n-/* Process recursively X of INSN and add REG_INC notes if necessary.  */\n-static void\n-add_auto_inc_notes (rtx_insn *insn, rtx x)\n-{\n-  enum rtx_code code = GET_CODE (x);\n-  const char *fmt;\n-  int i, j;\n-\n-  if (code == MEM && auto_inc_p (XEXP (x, 0)))\n-    {\n-      add_reg_note (insn, REG_INC, XEXP (XEXP (x, 0), 0));\n-      return;\n-    }\n-\n-  /* Scan all X sub-expressions.  */\n-  fmt = GET_RTX_FORMAT (code);\n-  for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n-    {\n-      if (fmt[i] == 'e')\n-\tadd_auto_inc_notes (insn, XEXP (x, i));\n-      else if (fmt[i] == 'E')\n-\tfor (j = XVECLEN (x, i) - 1; j >= 0; j--)\n-\t  add_auto_inc_notes (insn, XVECEXP (x, i, j));\n-    }\n-}\n-\n-\n /* Remove all REG_DEAD and REG_UNUSED notes and regenerate REG_INC.\n    We change pseudos by hard registers without notification of DF and\n    that can make the notes obsolete.  DF-infrastructure does not deal"}, {"sha": "25f19b1b1cf3f440047fbe56587aa0a9e066b5a1", "filename": "gcc/recog.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25d0fa4d76cbc46078624d101ac019ff3df1142/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25d0fa4d76cbc46078624d101ac019ff3df1142/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=c25d0fa4d76cbc46078624d101ac019ff3df1142", "patch": "@@ -3501,6 +3501,13 @@ peep2_attempt (basic_block bb, rtx_insn *insn, int match_len, rtx_insn *attempt)\n   if (as_note)\n     fixup_args_size_notes (before_try, last, get_args_size (as_note));\n \n+  /* Scan the new insns for embedded side effects and add appropriate\n+     REG_INC notes.  */\n+  if (AUTO_INC_DEC)\n+    for (x = last; x != before_try; x = PREV_INSN (x))\n+      if (NONDEBUG_INSN_P (x))\n+\tadd_auto_inc_notes (x, PATTERN (x));\n+\n   /* If we generated a jump instruction, it won't have\n      JUMP_LABEL set.  Recompute after we're done.  */\n   for (x = last; x != before_try; x = PREV_INSN (x))"}, {"sha": "19a64f2542a86986b89c451c2d156e540d151a19", "filename": "gcc/reload1.c", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25d0fa4d76cbc46078624d101ac019ff3df1142/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25d0fa4d76cbc46078624d101ac019ff3df1142/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=c25d0fa4d76cbc46078624d101ac019ff3df1142", "patch": "@@ -395,7 +395,6 @@ static void delete_output_reload (rtx_insn *, int, int, rtx);\n static void delete_address_reloads (rtx_insn *, rtx_insn *);\n static void delete_address_reloads_1 (rtx_insn *, rtx, rtx_insn *);\n static void inc_for_reload (rtx, rtx, rtx, poly_int64);\n-static void add_auto_inc_notes (rtx_insn *, rtx);\n static void substitute (rtx *, const_rtx, rtx);\n static bool gen_reload_chain_without_interm_reg_p (int, int);\n static int reloads_conflict (int, int);\n@@ -9071,28 +9070,3 @@ inc_for_reload (rtx reloadreg, rtx in, rtx value, poly_int64 inc_amount)\n \temit_insn (gen_sub2_insn (reloadreg, inc));\n     }\n }\n-\f\n-static void\n-add_auto_inc_notes (rtx_insn *insn, rtx x)\n-{\n-  enum rtx_code code = GET_CODE (x);\n-  const char *fmt;\n-  int i, j;\n-\n-  if (code == MEM && auto_inc_p (XEXP (x, 0)))\n-    {\n-      add_reg_note (insn, REG_INC, XEXP (XEXP (x, 0), 0));\n-      return;\n-    }\n-\n-  /* Scan all the operand sub-expressions.  */\n-  fmt = GET_RTX_FORMAT (code);\n-  for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n-    {\n-      if (fmt[i] == 'e')\n-\tadd_auto_inc_notes (insn, XEXP (x, i));\n-      else if (fmt[i] == 'E')\n-\tfor (j = XVECLEN (x, i) - 1; j >= 0; j--)\n-\t  add_auto_inc_notes (insn, XVECEXP (x, i, j));\n-    }\n-}"}, {"sha": "0872cc408eb177f42083204764e69b2268cf0840", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25d0fa4d76cbc46078624d101ac019ff3df1142/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25d0fa4d76cbc46078624d101ac019ff3df1142/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=c25d0fa4d76cbc46078624d101ac019ff3df1142", "patch": "@@ -3429,6 +3429,7 @@ extern rtx single_set_2 (const rtx_insn *, const_rtx);\n extern bool contains_symbol_ref_p (const_rtx);\n extern bool contains_symbolic_reference_p (const_rtx);\n extern bool contains_constant_pool_address_p (const_rtx);\n+extern void add_auto_inc_notes (rtx_insn *, rtx);\n \n /* Handle the cheap and common cases inline for performance.  */\n "}, {"sha": "1d2874d867272b878a3bdf39e2b909f84ad73329", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25d0fa4d76cbc46078624d101ac019ff3df1142/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25d0fa4d76cbc46078624d101ac019ff3df1142/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=c25d0fa4d76cbc46078624d101ac019ff3df1142", "patch": "@@ -6591,3 +6591,29 @@ tls_referenced_p (const_rtx x)\n       return true;\n   return false;\n }\n+\n+/* Process recursively X of INSN and add REG_INC notes if necessary.  */\n+void\n+add_auto_inc_notes (rtx_insn *insn, rtx x)\n+{\n+  enum rtx_code code = GET_CODE (x);\n+  const char *fmt;\n+  int i, j;\n+\n+  if (code == MEM && auto_inc_p (XEXP (x, 0)))\n+    {\n+      add_reg_note (insn, REG_INC, XEXP (XEXP (x, 0), 0));\n+      return;\n+    }\n+\n+  /* Scan all X sub-expressions.  */\n+  fmt = GET_RTX_FORMAT (code);\n+  for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n+    {\n+      if (fmt[i] == 'e')\n+\tadd_auto_inc_notes (insn, XEXP (x, i));\n+      else if (fmt[i] == 'E')\n+\tfor (j = XVECLEN (x, i) - 1; j >= 0; j--)\n+\t  add_auto_inc_notes (insn, XVECEXP (x, i, j));\n+    }\n+}"}]}