{"sha": "d13dfec88fbc345a51d726f5f8ae20daddbe7ae9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDEzZGZlYzg4ZmJjMzQ1YTUxZDcyNmY1ZjhhZTIwZGFkZGJlN2FlOQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@vnet.linux.ibm.com", "date": "2014-01-15T19:16:53Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2014-01-15T19:16:53Z"}, "message": "altivec.md (mulv8hi3): Explicitly generate vmulesh and vmulosh rather than call gen_vec_widen_smult_*.\n\ngcc:\n\n2014-01-15  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n\n\t* config/rs6000/altivec.md (mulv8hi3): Explicitly generate vmulesh\n\tand vmulosh rather than call gen_vec_widen_smult_*.\n\t(vec_widen_umult_even_v16qi): Test VECTOR_ELT_ORDER_BIG rather\n\tthan BYTES_BIG_ENDIAN to determine use of even or odd instruction.\n\t(vec_widen_smult_even_v16qi): Likewise.\n\t(vec_widen_umult_even_v8hi): Likewise.\n\t(vec_widen_smult_even_v8hi): Likewise.\n\t(vec_widen_umult_odd_v16qi): Likewise.\n\t(vec_widen_smult_odd_v16qi): Likewise.\n\t(vec_widen_umult_odd_v8hi): Likewise.\n\t(vec_widen_smult_odd_v8hi): Likewise.\n\t(vec_widen_umult_hi_v16qi): Explicitly generate vmuleub and\n\tvmuloub rather than call gen_vec_widen_umult_*.\n\t(vec_widen_umult_lo_v16qi): Likewise.\n\t(vec_widen_smult_hi_v16qi): Explicitly generate vmulesb and\n\tvmulosb rather than call gen_vec_widen_smult_*.\n\t(vec_widen_smult_lo_v16qi): Likewise.\n\t(vec_widen_umult_hi_v8hi): Explicitly generate vmuleuh and vmulouh\n\trather than call gen_vec_widen_umult_*.\n\t(vec_widen_umult_lo_v8hi): Likewise.\n\t(vec_widen_smult_hi_v8hi): Explicitly gnerate vmulesh and vmulosh\n\trather than call gen_vec_widen_smult_*.\n\t(vec_widen_smult_lo_v8hi): Likewise.\n\ngcc/testsuite:\n\n2014-01-15  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n\n\t* gcc.dg/vmx/mult-even-odd.c: New.\n\t* gcc.dg/vmx/mult-even-odd-be-order.c: New.\n\nFrom-SVN: r206641", "tree": {"sha": "59a6f3b01b6cf0c9a77d627ddaad82a9e2949adf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59a6f3b01b6cf0c9a77d627ddaad82a9e2949adf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d13dfec88fbc345a51d726f5f8ae20daddbe7ae9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d13dfec88fbc345a51d726f5f8ae20daddbe7ae9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d13dfec88fbc345a51d726f5f8ae20daddbe7ae9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d13dfec88fbc345a51d726f5f8ae20daddbe7ae9/comments", "author": null, "committer": null, "parents": [{"sha": "c2d7410417b6984bcfc120d8f27280abd3ea02dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2d7410417b6984bcfc120d8f27280abd3ea02dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2d7410417b6984bcfc120d8f27280abd3ea02dc"}], "stats": {"total": 273, "additions": 230, "deletions": 43}, "files": [{"sha": "c3ff69ef71fd8721cc6dd4f90c8c0f2913c075b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d13dfec88fbc345a51d726f5f8ae20daddbe7ae9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d13dfec88fbc345a51d726f5f8ae20daddbe7ae9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d13dfec88fbc345a51d726f5f8ae20daddbe7ae9", "patch": "@@ -1,3 +1,29 @@\n+2014-01-15  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n+\n+\t* config/rs6000/altivec.md (mulv8hi3): Explicitly generate vmulesh\n+\tand vmulosh rather than call gen_vec_widen_smult_*.\n+\t(vec_widen_umult_even_v16qi): Test VECTOR_ELT_ORDER_BIG rather\n+\tthan BYTES_BIG_ENDIAN to determine use of even or odd instruction.\n+\t(vec_widen_smult_even_v16qi): Likewise.\n+\t(vec_widen_umult_even_v8hi): Likewise.\n+\t(vec_widen_smult_even_v8hi): Likewise.\n+\t(vec_widen_umult_odd_v16qi): Likewise.\n+\t(vec_widen_smult_odd_v16qi): Likewise.\n+\t(vec_widen_umult_odd_v8hi): Likewise.\n+\t(vec_widen_smult_odd_v8hi): Likewise.\n+\t(vec_widen_umult_hi_v16qi): Explicitly generate vmuleub and\n+\tvmuloub rather than call gen_vec_widen_umult_*.\n+\t(vec_widen_umult_lo_v16qi): Likewise.\n+\t(vec_widen_smult_hi_v16qi): Explicitly generate vmulesb and\n+\tvmulosb rather than call gen_vec_widen_smult_*.\n+\t(vec_widen_smult_lo_v16qi): Likewise.\n+\t(vec_widen_umult_hi_v8hi): Explicitly generate vmuleuh and vmulouh\n+\trather than call gen_vec_widen_umult_*.\n+\t(vec_widen_umult_lo_v8hi): Likewise.\n+\t(vec_widen_smult_hi_v8hi): Explicitly gnerate vmulesh and vmulosh\n+\trather than call gen_vec_widen_smult_*.\n+\t(vec_widen_smult_lo_v8hi): Likewise.\n+\n 2014-01-15  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/59747"}, {"sha": "46f8acb2b3305bf39afc89ef3ac6f68a4dc51444", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 92, "deletions": 43, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d13dfec88fbc345a51d726f5f8ae20daddbe7ae9/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d13dfec88fbc345a51d726f5f8ae20daddbe7ae9/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=d13dfec88fbc345a51d726f5f8ae20daddbe7ae9", "patch": "@@ -673,17 +673,18 @@\n    rtx high = gen_reg_rtx (V4SImode);\n    rtx low = gen_reg_rtx (V4SImode);\n \n-   emit_insn (gen_vec_widen_smult_even_v8hi (even, operands[1], operands[2]));\n-   emit_insn (gen_vec_widen_smult_odd_v8hi (odd, operands[1], operands[2]));\n-\n    if (BYTES_BIG_ENDIAN)\n      {\n+       emit_insn (gen_altivec_vmulesh (even, operands[1], operands[2]));\n+       emit_insn (gen_altivec_vmulosh (odd, operands[1], operands[2]));\n        emit_insn (gen_altivec_vmrghw (high, even, odd));\n        emit_insn (gen_altivec_vmrglw (low, even, odd));\n        emit_insn (gen_altivec_vpkuwum (operands[0], high, low));\n      }\n    else\n      {\n+       emit_insn (gen_altivec_vmulosh (even, operands[1], operands[2]));\n+       emit_insn (gen_altivec_vmulesh (odd, operands[1], operands[2]));\n        emit_insn (gen_altivec_vmrghw (high, odd, even));\n        emit_insn (gen_altivec_vmrglw (low, odd, even));\n        emit_insn (gen_altivec_vpkuwum (operands[0], low, high));\n@@ -981,7 +982,7 @@\n    (use (match_operand:V16QI 2 \"register_operand\" \"\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  if (BYTES_BIG_ENDIAN)\n+  if (VECTOR_ELT_ORDER_BIG)\n     emit_insn (gen_altivec_vmuleub (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_altivec_vmuloub (operands[0], operands[1], operands[2]));\n@@ -994,7 +995,7 @@\n    (use (match_operand:V16QI 2 \"register_operand\" \"\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  if (BYTES_BIG_ENDIAN)\n+  if (VECTOR_ELT_ORDER_BIG)\n     emit_insn (gen_altivec_vmulesb (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_altivec_vmulosb (operands[0], operands[1], operands[2]));\n@@ -1007,7 +1008,7 @@\n    (use (match_operand:V8HI 2 \"register_operand\" \"\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  if (BYTES_BIG_ENDIAN)\n+  if (VECTOR_ELT_ORDER_BIG)\n     emit_insn (gen_altivec_vmuleuh (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_altivec_vmulouh (operands[0], operands[1], operands[2]));\n@@ -1020,7 +1021,7 @@\n    (use (match_operand:V8HI 2 \"register_operand\" \"\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  if (BYTES_BIG_ENDIAN)\n+  if (VECTOR_ELT_ORDER_BIG)\n     emit_insn (gen_altivec_vmulesh (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_altivec_vmulosh (operands[0], operands[1], operands[2]));\n@@ -1033,7 +1034,7 @@\n    (use (match_operand:V16QI 2 \"register_operand\" \"\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  if (BYTES_BIG_ENDIAN)\n+  if (VECTOR_ELT_ORDER_BIG)\n     emit_insn (gen_altivec_vmuloub (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_altivec_vmuleub (operands[0], operands[1], operands[2]));\n@@ -1046,7 +1047,7 @@\n    (use (match_operand:V16QI 2 \"register_operand\" \"\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  if (BYTES_BIG_ENDIAN)\n+  if (VECTOR_ELT_ORDER_BIG)\n     emit_insn (gen_altivec_vmulosb (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_altivec_vmulesb (operands[0], operands[1], operands[2]));\n@@ -1059,7 +1060,7 @@\n    (use (match_operand:V8HI 2 \"register_operand\" \"\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  if (BYTES_BIG_ENDIAN)\n+  if (VECTOR_ELT_ORDER_BIG)\n     emit_insn (gen_altivec_vmulouh (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_altivec_vmuleuh (operands[0], operands[1], operands[2]));\n@@ -1072,7 +1073,7 @@\n    (use (match_operand:V8HI 2 \"register_operand\" \"\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  if (BYTES_BIG_ENDIAN)\n+  if (VECTOR_ELT_ORDER_BIG)\n     emit_insn (gen_altivec_vmulosh (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_altivec_vmulesh (operands[0], operands[1], operands[2]));\n@@ -2220,12 +2221,18 @@\n   rtx ve = gen_reg_rtx (V8HImode);\n   rtx vo = gen_reg_rtx (V8HImode);\n   \n-  emit_insn (gen_vec_widen_umult_even_v16qi (ve, operands[1], operands[2]));\n-  emit_insn (gen_vec_widen_umult_odd_v16qi (vo, operands[1], operands[2]));\n   if (BYTES_BIG_ENDIAN)\n-    emit_insn (gen_altivec_vmrghh (operands[0], ve, vo));\n+    {\n+      emit_insn (gen_altivec_vmuleub (ve, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmuloub (vo, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmrghh (operands[0], ve, vo));\n+    }\n   else\n-    emit_insn (gen_altivec_vmrghh (operands[0], vo, ve));\n+    {\n+      emit_insn (gen_altivec_vmuloub (ve, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmuleub (vo, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmrghh (operands[0], vo, ve));\n+    }\n   DONE;\n }\")\n \n@@ -2240,12 +2247,18 @@\n   rtx ve = gen_reg_rtx (V8HImode);\n   rtx vo = gen_reg_rtx (V8HImode);\n   \n-  emit_insn (gen_vec_widen_umult_even_v16qi (ve, operands[1], operands[2]));\n-  emit_insn (gen_vec_widen_umult_odd_v16qi (vo, operands[1], operands[2]));\n   if (BYTES_BIG_ENDIAN)\n-    emit_insn (gen_altivec_vmrglh (operands[0], ve, vo));\n+    {\n+      emit_insn (gen_altivec_vmuleub (ve, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmuloub (vo, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmrglh (operands[0], ve, vo));\n+    }\n   else\n-    emit_insn (gen_altivec_vmrglh (operands[0], vo, ve));\n+    {\n+      emit_insn (gen_altivec_vmuloub (ve, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmuleub (vo, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmrglh (operands[0], vo, ve));\n+    }\n   DONE;\n }\")\n \n@@ -2260,12 +2273,18 @@\n   rtx ve = gen_reg_rtx (V8HImode);\n   rtx vo = gen_reg_rtx (V8HImode);\n   \n-  emit_insn (gen_vec_widen_smult_even_v16qi (ve, operands[1], operands[2]));\n-  emit_insn (gen_vec_widen_smult_odd_v16qi (vo, operands[1], operands[2]));\n   if (BYTES_BIG_ENDIAN)\n-    emit_insn (gen_altivec_vmrghh (operands[0], ve, vo));\n+    {\n+      emit_insn (gen_altivec_vmulesb (ve, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmulosb (vo, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmrghh (operands[0], ve, vo));\n+    }\n   else\n-    emit_insn (gen_altivec_vmrghh (operands[0], vo, ve));\n+    {\n+      emit_insn (gen_altivec_vmulosb (ve, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmulesb (vo, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmrghh (operands[0], vo, ve));\n+    }\n   DONE;\n }\")\n \n@@ -2280,12 +2299,18 @@\n   rtx ve = gen_reg_rtx (V8HImode);\n   rtx vo = gen_reg_rtx (V8HImode);\n   \n-  emit_insn (gen_vec_widen_smult_even_v16qi (ve, operands[1], operands[2]));\n-  emit_insn (gen_vec_widen_smult_odd_v16qi (vo, operands[1], operands[2]));\n   if (BYTES_BIG_ENDIAN)\n-    emit_insn (gen_altivec_vmrglh (operands[0], ve, vo));\n+    {\n+      emit_insn (gen_altivec_vmulesb (ve, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmulosb (vo, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmrglh (operands[0], ve, vo));\n+    }\n   else\n-    emit_insn (gen_altivec_vmrglh (operands[0], vo, ve));\n+    {\n+      emit_insn (gen_altivec_vmulosb (ve, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmulesb (vo, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmrglh (operands[0], vo, ve));\n+    }\n   DONE;\n }\")\n \n@@ -2300,12 +2325,18 @@\n   rtx ve = gen_reg_rtx (V4SImode);\n   rtx vo = gen_reg_rtx (V4SImode);\n   \n-  emit_insn (gen_vec_widen_umult_even_v8hi (ve, operands[1], operands[2]));\n-  emit_insn (gen_vec_widen_umult_odd_v8hi (vo, operands[1], operands[2]));\n   if (BYTES_BIG_ENDIAN)\n-    emit_insn (gen_altivec_vmrghw (operands[0], ve, vo));\n+    {\n+      emit_insn (gen_altivec_vmuleuh (ve, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmulouh (vo, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmrghw (operands[0], ve, vo));\n+    }\n   else\n-    emit_insn (gen_altivec_vmrghw (operands[0], vo, ve));\n+    {\n+      emit_insn (gen_altivec_vmulouh (ve, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmuleuh (vo, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmrghw (operands[0], vo, ve));\n+    }\n   DONE;\n }\")\n \n@@ -2320,12 +2351,18 @@\n   rtx ve = gen_reg_rtx (V4SImode);\n   rtx vo = gen_reg_rtx (V4SImode);\n   \n-  emit_insn (gen_vec_widen_umult_even_v8hi (ve, operands[1], operands[2]));\n-  emit_insn (gen_vec_widen_umult_odd_v8hi (vo, operands[1], operands[2]));\n   if (BYTES_BIG_ENDIAN)\n-    emit_insn (gen_altivec_vmrglw (operands[0], ve, vo));\n+    {\n+      emit_insn (gen_altivec_vmuleuh (ve, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmulouh (vo, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmrglw (operands[0], ve, vo));\n+    }\n   else\n-    emit_insn (gen_altivec_vmrglw (operands[0], vo, ve));\n+    {\n+      emit_insn (gen_altivec_vmulouh (ve, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmuleuh (vo, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmrglw (operands[0], vo, ve));\n+    }\n   DONE;\n }\")\n \n@@ -2340,12 +2377,18 @@\n   rtx ve = gen_reg_rtx (V4SImode);\n   rtx vo = gen_reg_rtx (V4SImode);\n   \n-  emit_insn (gen_vec_widen_smult_even_v8hi (ve, operands[1], operands[2]));\n-  emit_insn (gen_vec_widen_smult_odd_v8hi (vo, operands[1], operands[2]));\n   if (BYTES_BIG_ENDIAN)\n-    emit_insn (gen_altivec_vmrghw (operands[0], ve, vo));\n+    {\n+      emit_insn (gen_altivec_vmulesh (ve, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmulosh (vo, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmrghw (operands[0], ve, vo));\n+    }\n   else\n-    emit_insn (gen_altivec_vmrghw (operands[0], vo, ve));\n+    {\n+      emit_insn (gen_altivec_vmulosh (ve, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmulesh (vo, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmrghw (operands[0], vo, ve));\n+    }\n   DONE;\n }\")\n \n@@ -2360,12 +2403,18 @@\n   rtx ve = gen_reg_rtx (V4SImode);\n   rtx vo = gen_reg_rtx (V4SImode);\n   \n-  emit_insn (gen_vec_widen_smult_even_v8hi (ve, operands[1], operands[2]));\n-  emit_insn (gen_vec_widen_smult_odd_v8hi (vo, operands[1], operands[2]));\n   if (BYTES_BIG_ENDIAN)\n-    emit_insn (gen_altivec_vmrglw (operands[0], ve, vo));\n+    {\n+      emit_insn (gen_altivec_vmulesh (ve, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmulosh (vo, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmrglw (operands[0], ve, vo));\n+    }\n   else\n-    emit_insn (gen_altivec_vmrglw (operands[0], vo, ve));\n+    {\n+      emit_insn (gen_altivec_vmulosh (ve, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmulesh (vo, operands[1], operands[2]));\n+      emit_insn (gen_altivec_vmrglw (operands[0], vo, ve));\n+    }\n   DONE;\n }\")\n "}, {"sha": "8c14e49894b608e23cdac74d3ae31e15de8303b2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d13dfec88fbc345a51d726f5f8ae20daddbe7ae9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d13dfec88fbc345a51d726f5f8ae20daddbe7ae9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d13dfec88fbc345a51d726f5f8ae20daddbe7ae9", "patch": "@@ -1,3 +1,8 @@\n+2014-01-15  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n+\n+\t* gcc.dg/vmx/mult-even-odd.c: New.\n+\t* gcc.dg/vmx/mult-even-odd-be-order.c: New.\n+\n 2014-01-15  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n \n \t* lib/target-supports.exp (check_libcilkrts_available): Added an"}, {"sha": "ff3047486cb4774ec14923278f417aa0ebadf5b1", "filename": "gcc/testsuite/gcc.dg/vmx/mult-even-odd-be-order.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d13dfec88fbc345a51d726f5f8ae20daddbe7ae9/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmult-even-odd-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d13dfec88fbc345a51d726f5f8ae20daddbe7ae9/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmult-even-odd-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmult-even-odd-be-order.c?ref=d13dfec88fbc345a51d726f5f8ae20daddbe7ae9", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-options \"-maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n+\n+#include \"harness.h\"\n+\n+static void test()\n+{\n+  vector unsigned char vuca = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector unsigned char vucb = {2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3};\n+  vector signed char vsca = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n+  vector signed char vscb = {2,-3,2,-3,2,-3,2,-3,2,-3,2,-3,2,-3,2,-3};\n+  vector unsigned short vusa = {0,1,2,3,4,5,6,7};\n+  vector unsigned short vusb = {2,3,2,3,2,3,2,3};\n+  vector signed short vssa = {-4,-3,-2,-1,0,1,2,3};\n+  vector signed short vssb = {2,-3,2,-3,2,-3,2,-3};\n+  vector unsigned short vuse, vuso;\n+  vector signed short vsse, vsso;\n+  vector unsigned int vuie, vuio;\n+  vector signed int vsie, vsio;\n+\n+  vuse = vec_mule (vuca, vucb);\n+  vuso = vec_mulo (vuca, vucb);\n+  vsse = vec_mule (vsca, vscb);\n+  vsso = vec_mulo (vsca, vscb);\n+  vuie = vec_mule (vusa, vusb);\n+  vuio = vec_mulo (vusa, vusb);\n+  vsie = vec_mule (vssa, vssb);\n+  vsio = vec_mulo (vssa, vssb);\n+\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  check (vec_all_eq (vuse,\n+\t\t     ((vector unsigned short){3,9,15,21,27,33,39,45})),\n+\t \"vuse\");\n+  check (vec_all_eq (vuso,\n+\t\t     ((vector unsigned short){0,4,8,12,16,20,24,28})),\n+\t \"vuso\");\n+  check (vec_all_eq (vsse,\n+\t\t     ((vector signed short){21,15,9,3,-3,-9,-15,-21})),\n+\t \"vsse\");\n+  check (vec_all_eq (vsso,\n+\t\t     ((vector signed short){-16,-12,-8,-4,0,4,8,12})),\n+\t \"vsso\");\n+  check (vec_all_eq (vuie, ((vector unsigned int){3,9,15,21})), \"vuie\");\n+  check (vec_all_eq (vuio, ((vector unsigned int){0,4,8,12})), \"vuio\");\n+  check (vec_all_eq (vsie, ((vector signed int){9,3,-3,-9})), \"vsie\");\n+  check (vec_all_eq (vsio, ((vector signed int){-8,-4,0,4})), \"vsio\");\n+#else\n+  check (vec_all_eq (vuse,\n+\t\t     ((vector unsigned short){0,4,8,12,16,20,24,28})),\n+\t \"vuse\");\n+  check (vec_all_eq (vuso,\n+\t\t     ((vector unsigned short){3,9,15,21,27,33,39,45})),\n+\t \"vuso\");\n+  check (vec_all_eq (vsse,\n+\t\t     ((vector signed short){-16,-12,-8,-4,0,4,8,12})),\n+\t \"vsse\");\n+  check (vec_all_eq (vsso,\n+\t\t     ((vector signed short){21,15,9,3,-3,-9,-15,-21})),\n+\t \"vsso\");\n+  check (vec_all_eq (vuie, ((vector unsigned int){0,4,8,12})), \"vuie\");\n+  check (vec_all_eq (vuio, ((vector unsigned int){3,9,15,21})), \"vuio\");\n+  check (vec_all_eq (vsie, ((vector signed int){-8,-4,0,4})), \"vsie\");\n+  check (vec_all_eq (vsio, ((vector signed int){9,3,-3,-9})), \"vsio\");\n+#endif\n+}"}, {"sha": "34b72e90040118ed798a80993ee2a980405d89fd", "filename": "gcc/testsuite/gcc.dg/vmx/mult-even-odd.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d13dfec88fbc345a51d726f5f8ae20daddbe7ae9/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmult-even-odd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d13dfec88fbc345a51d726f5f8ae20daddbe7ae9/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmult-even-odd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmult-even-odd.c?ref=d13dfec88fbc345a51d726f5f8ae20daddbe7ae9", "patch": "@@ -0,0 +1,43 @@\n+#include \"harness.h\"\n+\n+static void test()\n+{\n+  vector unsigned char vuca = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector unsigned char vucb = {2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3};\n+  vector signed char vsca = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n+  vector signed char vscb = {2,-3,2,-3,2,-3,2,-3,2,-3,2,-3,2,-3,2,-3};\n+  vector unsigned short vusa = {0,1,2,3,4,5,6,7};\n+  vector unsigned short vusb = {2,3,2,3,2,3,2,3};\n+  vector signed short vssa = {-4,-3,-2,-1,0,1,2,3};\n+  vector signed short vssb = {2,-3,2,-3,2,-3,2,-3};\n+  vector unsigned short vuse, vuso;\n+  vector signed short vsse, vsso;\n+  vector unsigned int vuie, vuio;\n+  vector signed int vsie, vsio;\n+\n+  vuse = vec_mule (vuca, vucb);\n+  vuso = vec_mulo (vuca, vucb);\n+  vsse = vec_mule (vsca, vscb);\n+  vsso = vec_mulo (vsca, vscb);\n+  vuie = vec_mule (vusa, vusb);\n+  vuio = vec_mulo (vusa, vusb);\n+  vsie = vec_mule (vssa, vssb);\n+  vsio = vec_mulo (vssa, vssb);\n+\n+  check (vec_all_eq (vuse,\n+\t\t     ((vector unsigned short){0,4,8,12,16,20,24,28})),\n+\t \"vuse\");\n+  check (vec_all_eq (vuso,\n+\t\t     ((vector unsigned short){3,9,15,21,27,33,39,45})),\n+\t \"vuso\");\n+  check (vec_all_eq (vsse,\n+\t\t     ((vector signed short){-16,-12,-8,-4,0,4,8,12})),\n+\t \"vsse\");\n+  check (vec_all_eq (vsso,\n+\t\t     ((vector signed short){21,15,9,3,-3,-9,-15,-21})),\n+\t \"vsso\");\n+  check (vec_all_eq (vuie, ((vector unsigned int){0,4,8,12})), \"vuie\");\n+  check (vec_all_eq (vuio, ((vector unsigned int){3,9,15,21})), \"vuio\");\n+  check (vec_all_eq (vsie, ((vector signed int){-8,-4,0,4})), \"vsie\");\n+  check (vec_all_eq (vsio, ((vector signed int){9,3,-3,-9})), \"vsio\");\n+}"}]}