{"sha": "4812480a45423a5f3c2630054ff9c3d161f8d3ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgxMjQ4MGE0NTQyM2E1ZjNjMjYzMDA1NGZmOWMzZDE2MWY4ZDNlYw==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-01-17T21:43:40Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-01-17T21:43:40Z"}, "message": "Declare pedantic_lvalues.\n\nFrom-SVN: r8767", "tree": {"sha": "50b227d4d95cc221b6ad8b5413fe356229a34ee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50b227d4d95cc221b6ad8b5413fe356229a34ee9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4812480a45423a5f3c2630054ff9c3d161f8d3ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4812480a45423a5f3c2630054ff9c3d161f8d3ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4812480a45423a5f3c2630054ff9c3d161f8d3ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4812480a45423a5f3c2630054ff9c3d161f8d3ec/comments", "author": null, "committer": null, "parents": [{"sha": "f444e553bf02d97a324ec263f18d718be162bf80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f444e553bf02d97a324ec263f18d718be162bf80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f444e553bf02d97a324ec263f18d718be162bf80"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "f66c6d6783fe0a8749f8c5d44a0e988cde26b5e2", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4812480a45423a5f3c2630054ff9c3d161f8d3ec/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4812480a45423a5f3c2630054ff9c3d161f8d3ec/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=4812480a45423a5f3c2630054ff9c3d161f8d3ec", "patch": "@@ -1478,6 +1478,11 @@ extern int lineno;\n    that standard C forbids.  */\n extern int pedantic;\n \n+/* Nonzero means lvalues are limited to those valid in pedantic ANSI C.\n+   Zero means allow extended lvalues.  */\n+\n+extern int pedantic_lvalues;\n+\n /* Nonzero means can safely call expand_expr now;\n    otherwise layout_type puts variable sizes onto `pending_sizes' instead.  */\n "}]}