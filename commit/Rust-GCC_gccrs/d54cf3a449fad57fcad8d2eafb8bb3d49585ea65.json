{"sha": "d54cf3a449fad57fcad8d2eafb8bb3d49585ea65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU0Y2YzYTQ0OWZhZDU3ZmNhZDhkMmVhZmI4YmIzZDQ5NTg1ZWE2NQ==", "commit": {"author": {"name": "Cherry Zhang", "email": "cherryyz@google.com", "date": "2019-06-21T22:42:18Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-21T22:42:18Z"}, "message": "compiler: intrinsify some math/bits functions\n    \n    Let the Go frontend recognize some math/bits functions and turn\n    them into intrinsics.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/183266\n\n\t* go-gcc.cc (Gcc_backend::Gcc_backend): Define math/bits\n\tbuiltins.\n\nFrom-SVN: r272579", "tree": {"sha": "bf4410cb0c973ef258021efcf54a16d92bc7f1af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf4410cb0c973ef258021efcf54a16d92bc7f1af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d54cf3a449fad57fcad8d2eafb8bb3d49585ea65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d54cf3a449fad57fcad8d2eafb8bb3d49585ea65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d54cf3a449fad57fcad8d2eafb8bb3d49585ea65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d54cf3a449fad57fcad8d2eafb8bb3d49585ea65/comments", "author": {"login": "cherrymui", "id": 14119929, "node_id": "MDQ6VXNlcjE0MTE5OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/14119929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cherrymui", "html_url": "https://github.com/cherrymui", "followers_url": "https://api.github.com/users/cherrymui/followers", "following_url": "https://api.github.com/users/cherrymui/following{/other_user}", "gists_url": "https://api.github.com/users/cherrymui/gists{/gist_id}", "starred_url": "https://api.github.com/users/cherrymui/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cherrymui/subscriptions", "organizations_url": "https://api.github.com/users/cherrymui/orgs", "repos_url": "https://api.github.com/users/cherrymui/repos", "events_url": "https://api.github.com/users/cherrymui/events{/privacy}", "received_events_url": "https://api.github.com/users/cherrymui/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f4e7200b1df3dde7d2d9cec8861c6567356db40f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e7200b1df3dde7d2d9cec8861c6567356db40f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4e7200b1df3dde7d2d9cec8861c6567356db40f"}], "stats": {"total": 201, "additions": 192, "deletions": 9}, "files": [{"sha": "9842c85925ef0590b04053929f762fef70b6685b", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d54cf3a449fad57fcad8d2eafb8bb3d49585ea65/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d54cf3a449fad57fcad8d2eafb8bb3d49585ea65/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=d54cf3a449fad57fcad8d2eafb8bb3d49585ea65", "patch": "@@ -1,3 +1,8 @@\n+2019-06-21  Cherry Zhang  <cherryyz@google.com>\n+\n+\t* go-gcc.cc (Gcc_backend::Gcc_backend): Define math/bits\n+\tbuiltins.\n+\n 2019-05-30  Jim Wilson  <jimw@sifive.com>\n \n \t* go-gcc.cc (Gcc_backend::Gcc_backend): Add BUILT_IN_ATOMIC_FETCH_AND_1"}, {"sha": "879149eb22f4f3460265336bddaacfd89b86e519", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d54cf3a449fad57fcad8d2eafb8bb3d49585ea65/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d54cf3a449fad57fcad8d2eafb8bb3d49585ea65/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=d54cf3a449fad57fcad8d2eafb8bb3d49585ea65", "patch": "@@ -613,7 +613,7 @@ Gcc_backend::Gcc_backend()\n \t\t\t\t\t\tNULL_TREE),\n \t\t       false, false);\n \n-  // Used by runtime/internal/sys.\n+  // Used by runtime/internal/sys and math/bits.\n   this->define_builtin(BUILT_IN_CTZ, \"__builtin_ctz\", \"ctz\",\n \t\t       build_function_type_list(integer_type_node,\n \t\t\t\t\t\tunsigned_type_node,\n@@ -624,6 +624,31 @@ Gcc_backend::Gcc_backend()\n \t\t\t\t\t\tlong_long_unsigned_type_node,\n \t\t\t\t\t\tNULL_TREE),\n \t\t       true, false);\n+  this->define_builtin(BUILT_IN_CLZ, \"__builtin_clz\", \"clz\",\n+\t\t       build_function_type_list(integer_type_node,\n+\t\t\t\t\t\tunsigned_type_node,\n+\t\t\t\t\t\tNULL_TREE),\n+\t\t       true, false);\n+  this->define_builtin(BUILT_IN_CLZLL, \"__builtin_clzll\", \"clzll\",\n+\t\t       build_function_type_list(integer_type_node,\n+\t\t\t\t\t\tlong_long_unsigned_type_node,\n+\t\t\t\t\t\tNULL_TREE),\n+\t\t       true, false);\n+  this->define_builtin(BUILT_IN_POPCOUNT, \"__builtin_popcount\", \"popcount\",\n+\t\t       build_function_type_list(integer_type_node,\n+\t\t\t\t\t\tunsigned_type_node,\n+\t\t\t\t\t\tNULL_TREE),\n+\t\t       true, false);\n+  this->define_builtin(BUILT_IN_POPCOUNTLL, \"__builtin_popcountll\", \"popcountll\",\n+\t\t       build_function_type_list(integer_type_node,\n+\t\t\t\t\t\tlong_long_unsigned_type_node,\n+\t\t\t\t\t\tNULL_TREE),\n+\t\t       true, false);\n+  this->define_builtin(BUILT_IN_BSWAP16, \"__builtin_bswap16\", \"bswap16\",\n+\t\t       build_function_type_list(uint16_type_node,\n+\t\t\t\t\t\tuint16_type_node,\n+\t\t\t\t\t\tNULL_TREE),\n+\t\t       true, false);\n   this->define_builtin(BUILT_IN_BSWAP32, \"__builtin_bswap32\", \"bswap32\",\n \t\t       build_function_type_list(uint32_type_node,\n \t\t\t\t\t\tuint32_type_node,"}, {"sha": "d51917defb58fdd0ecffd48b337dcfd423018cec", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d54cf3a449fad57fcad8d2eafb8bb3d49585ea65/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d54cf3a449fad57fcad8d2eafb8bb3d49585ea65/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=d54cf3a449fad57fcad8d2eafb8bb3d49585ea65", "patch": "@@ -1,4 +1,4 @@\n-fdf0af774aabb31ba8a62f358b7b40dfe8b35da9\n+9b5a43baaf391005989d140109261e5a8e1b1b63\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "04aacf8883142fbe4734fc29effd5cdc865818e7", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 143, "deletions": 7, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d54cf3a449fad57fcad8d2eafb8bb3d49585ea65/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d54cf3a449fad57fcad8d2eafb8bb3d49585ea65/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=d54cf3a449fad57fcad8d2eafb8bb3d49585ea65", "patch": "@@ -11063,6 +11063,25 @@ Call_expression::intrinsify(Gogo* gogo,\n       package = \"runtime/internal/atomic\";\n     }\n \n+  if (package == \"runtime/internal/sys\")\n+    {\n+      // runtime/internal/sys functions and math/bits functions\n+      // are very similar. In order not to duplicate code, we just\n+      // redirect to the latter and let the code below to handle them.\n+      if (name == \"Bswap32\")\n+        name = \"ReverseBytes32\";\n+      else if (name == \"Bswap64\")\n+        name = \"ReverseBytes64\";\n+      else if (name == \"Ctz32\")\n+        name = \"TrailingZeros32\";\n+      else if (name == \"Ctz64\")\n+        name = \"TrailingZeros64\";\n+      else\n+        return NULL;\n+\n+      package = \"math/bits\";\n+    }\n+\n   if (package == \"runtime\")\n     {\n       // Handle a couple of special runtime functions.  In the runtime\n@@ -11093,21 +11112,44 @@ Call_expression::intrinsify(Gogo* gogo,\n           return Expression::make_cast(uintptr_type, call, loc);\n         }\n     }\n-  else if (package == \"runtime/internal/sys\")\n+  else if (package == \"math/bits\")\n     {\n-      if (name == \"Bswap32\"\n+      if ((name == \"ReverseBytes16\" || name == \"ReverseBytes32\"\n+           || name == \"ReverseBytes64\" || name == \"ReverseBytes\")\n           && this->args_ != NULL && this->args_->size() == 1)\n         {\n+          Runtime::Function code;\n+          if (name == \"ReverseBytes16\")\n+            code = Runtime::BUILTIN_BSWAP16;\n+          else if (name == \"ReverseBytes32\")\n+            code = Runtime::BUILTIN_BSWAP32;\n+          else if (name == \"ReverseBytes64\")\n+            code = Runtime::BUILTIN_BSWAP64;\n+          else if (name == \"ReverseBytes\")\n+            code = (int_size == 8 ? Runtime::BUILTIN_BSWAP64 : Runtime::BUILTIN_BSWAP32);\n+          else\n+            go_unreachable();\n           Expression* arg = this->args_->front();\n-          return Runtime::make_call(Runtime::BUILTIN_BSWAP32, loc, 1, arg);\n+          Expression* call = Runtime::make_call(code, loc, 1, arg);\n+          if (name == \"ReverseBytes\")\n+            return Expression::make_cast(uint_type, call, loc);\n+          return call;\n         }\n-      else if (name == \"Bswap64\"\n+      else if ((name == \"TrailingZeros8\" || name == \"TrailingZeros16\")\n                && this->args_ != NULL && this->args_->size() == 1)\n         {\n+          // GCC does not have a ctz8 or ctz16 intrinsic. We do\n+          // ctz32(0x100 | arg) or ctz32(0x10000 | arg).\n           Expression* arg = this->args_->front();\n-          return Runtime::make_call(Runtime::BUILTIN_BSWAP64, loc, 1, arg);\n+          arg = Expression::make_cast(uint32_type, arg, loc);\n+          unsigned long mask = (name == \"TrailingZeros8\" ? 0x100 : 0x10000);\n+          Expression* c = Expression::make_integer_ul(mask, uint32_type, loc);\n+          arg = Expression::make_binary(OPERATOR_OR, arg, c, loc);\n+          Expression* call = Runtime::make_call(Runtime::BUILTIN_CTZ, loc, 1, arg);\n+          return Expression::make_cast(int_type, call, loc);\n         }\n-      else if (name == \"Ctz32\"\n+      else if ((name == \"TrailingZeros32\"\n+                || (name == \"TrailingZeros\" && int_size == 4))\n                && this->args_ != NULL && this->args_->size() == 1)\n         {\n           Expression* arg = this->args_->front();\n@@ -11125,7 +11167,8 @@ Call_expression::intrinsify(Gogo* gogo,\n           call = Expression::make_cast(int_type, call, loc);\n           return Expression::make_conditional(cmp, c32, call, loc);\n         }\n-      else if (name == \"Ctz64\"\n+      else if ((name == \"TrailingZeros64\"\n+                || (name == \"TrailingZeros\" && int_size == 8))\n                && this->args_ != NULL && this->args_->size() == 1)\n         {\n           Expression* arg = this->args_->front();\n@@ -11143,6 +11186,99 @@ Call_expression::intrinsify(Gogo* gogo,\n           call = Expression::make_cast(int_type, call, loc);\n           return Expression::make_conditional(cmp, c64, call, loc);\n         }\n+      else if ((name == \"LeadingZeros8\" || name == \"LeadingZeros16\"\n+                || name == \"Len8\" || name == \"Len16\")\n+               && this->args_ != NULL && this->args_->size() == 1)\n+        {\n+          // GCC does not have a clz8 ir clz16 intrinsic. We do\n+          // clz32(arg<<24 | 0xffffff) or clz32(arg<<16 | 0xffff).\n+          Expression* arg = this->args_->front();\n+          arg = Expression::make_cast(uint32_type, arg, loc);\n+          unsigned long shift =\n+            ((name == \"LeadingZeros8\" || name == \"Len8\") ? 24 : 16);\n+          Expression* c = Expression::make_integer_ul(shift, uint32_type, loc);\n+          arg = Expression::make_binary(OPERATOR_LSHIFT, arg, c, loc);\n+          unsigned long mask =\n+            ((name == \"LeadingZeros8\" || name == \"Len8\") ? 0xffffff : 0xffff);\n+          c = Expression::make_integer_ul(mask, uint32_type, loc);\n+          arg = Expression::make_binary(OPERATOR_OR, arg, c, loc);\n+          Expression* call = Runtime::make_call(Runtime::BUILTIN_CLZ, loc, 1, arg);\n+          call = Expression::make_cast(int_type, call, loc);\n+          // len = width - clz\n+          if (name == \"Len8\")\n+            {\n+              c = Expression::make_integer_ul(8, int_type, loc);\n+              return Expression::make_binary(OPERATOR_MINUS, c, call, loc);\n+            }\n+          else if (name == \"Len16\")\n+            {\n+              c = Expression::make_integer_ul(16, int_type, loc);\n+              return Expression::make_binary(OPERATOR_MINUS, c, call, loc);\n+            }\n+          return call;\n+        }\n+      else if ((name == \"LeadingZeros32\" || name == \"Len32\"\n+                || ((name == \"LeadingZeros\" || name == \"Len\") && int_size == 4))\n+               && this->args_ != NULL && this->args_->size() == 1)\n+        {\n+          Expression* arg = this->args_->front();\n+          if (!arg->is_variable())\n+            {\n+              Temporary_statement* ts = Statement::make_temporary(uint32_type, arg, loc);\n+              inserter->insert(ts);\n+              arg = Expression::make_temporary_reference(ts, loc);\n+            }\n+          // arg == 0 ? 32 : __builtin_clz(arg)\n+          Expression* zero = Expression::make_integer_ul(0, uint32_type, loc);\n+          Expression* cmp = Expression::make_binary(OPERATOR_EQEQ, arg, zero, loc);\n+          Expression* c32 = Expression::make_integer_ul(32, int_type, loc);\n+          Expression* call = Runtime::make_call(Runtime::BUILTIN_CLZ, loc, 1, arg->copy());\n+          call = Expression::make_cast(int_type, call, loc);\n+          Expression* cond = Expression::make_conditional(cmp, c32, call, loc);\n+          // len = 32 - clz\n+          if (name == \"Len32\" || name == \"Len\")\n+            return Expression::make_binary(OPERATOR_MINUS, c32->copy(), cond, loc);\n+          return cond;\n+        }\n+      else if ((name == \"LeadingZeros64\" || name == \"Len64\"\n+                || ((name == \"LeadingZeros\" || name == \"Len\") && int_size == 8))\n+               && this->args_ != NULL && this->args_->size() == 1)\n+        {\n+          Expression* arg = this->args_->front();\n+          if (!arg->is_variable())\n+            {\n+              Temporary_statement* ts = Statement::make_temporary(uint64_type, arg, loc);\n+              inserter->insert(ts);\n+              arg = Expression::make_temporary_reference(ts, loc);\n+            }\n+          // arg == 0 ? 64 : __builtin_clzll(arg)\n+          Expression* zero = Expression::make_integer_ul(0, uint64_type, loc);\n+          Expression* cmp = Expression::make_binary(OPERATOR_EQEQ, arg, zero, loc);\n+          Expression* c64 = Expression::make_integer_ul(64, int_type, loc);\n+          Expression* call = Runtime::make_call(Runtime::BUILTIN_CLZLL, loc, 1, arg->copy());\n+          call = Expression::make_cast(int_type, call, loc);\n+          Expression* cond = Expression::make_conditional(cmp, c64, call, loc);\n+          // len = 64 - clz\n+          if (name == \"Len64\" || name == \"Len\")\n+            return Expression::make_binary(OPERATOR_MINUS, c64->copy(), cond, loc);\n+          return cond;\n+        }\n+      else if ((name == \"OnesCount8\" || name == \"OnesCount16\"\n+           || name == \"OnesCount32\" || name == \"OnesCount64\"\n+           || name == \"OnesCount\")\n+          && this->args_ != NULL && this->args_->size() == 1)\n+        {\n+          Runtime::Function code;\n+          if (name == \"OnesCount64\")\n+            code = Runtime::BUILTIN_POPCOUNTLL;\n+          else if (name == \"OnesCount\")\n+            code = (int_size == 8 ? Runtime::BUILTIN_POPCOUNTLL : Runtime::BUILTIN_POPCOUNT);\n+          else\n+            code = Runtime::BUILTIN_POPCOUNT;\n+          Expression* arg = this->args_->front();\n+          Expression* call = Runtime::make_call(code, loc, 1, arg);\n+          return Expression::make_cast(int_type, call, loc);\n+        }\n     }\n   else if (package == \"runtime/internal/atomic\")\n     {"}, {"sha": "e35658b8c5fc8ce553650f454f7a5da743b2f906", "filename": "gcc/go/gofrontend/runtime.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d54cf3a449fad57fcad8d2eafb8bb3d49585ea65/gcc%2Fgo%2Fgofrontend%2Fruntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d54cf3a449fad57fcad8d2eafb8bb3d49585ea65/gcc%2Fgo%2Fgofrontend%2Fruntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.cc?ref=d54cf3a449fad57fcad8d2eafb8bb3d49585ea65", "patch": "@@ -32,6 +32,8 @@ enum Runtime_function_type\n   RFT_INT,\n   // Go type uint8, C type uint8_t.\n   RFT_UINT8,\n+  // Go type uint16, C type uint16_t.\n+  RFT_UINT16,\n   // Go type int32, C type int32_t.\n   RFT_INT32,\n   // Go type uint32, C type uint32_t.\n@@ -115,6 +117,10 @@ runtime_function_type(Runtime_function_type bft)\n \t  t = Type::lookup_integer_type(\"uint8\");\n \t  break;\n \n+\tcase RFT_UINT16:\n+\t  t = Type::lookup_integer_type(\"uint16\");\n+\t  break;\n+\n \tcase RFT_INT32:\n \t  t = Type::lookup_integer_type(\"int32\");\n \t  break;\n@@ -257,6 +263,7 @@ convert_to_runtime_function_type(Runtime_function_type bft, Expression* e,\n     case RFT_BOOLPTR:\n     case RFT_INT:\n     case RFT_UINT8:\n+    case RFT_UINT16:\n     case RFT_INT32:\n     case RFT_UINT32:\n     case RFT_INT64:"}, {"sha": "27d5e472f6f2fa1e9c3fb43bfbd192b64992b443", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d54cf3a449fad57fcad8d2eafb8bb3d49585ea65/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d54cf3a449fad57fcad8d2eafb8bb3d49585ea65/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=d54cf3a449fad57fcad8d2eafb8bb3d49585ea65", "patch": "@@ -428,6 +428,8 @@ DEF_GO_RUNTIME(BUILTIN_DWARF_CFA, \"__builtin_dwarf_cfa\", P0(),\n                R1(POINTER))\n \n // Swap bytes.\n+DEF_GO_RUNTIME(BUILTIN_BSWAP16, \"__builtin_bswap16\", P1(UINT16),\n+               R1(UINT16))\n DEF_GO_RUNTIME(BUILTIN_BSWAP32, \"__builtin_bswap32\", P1(UINT32),\n                R1(UINT32))\n DEF_GO_RUNTIME(BUILTIN_BSWAP64, \"__builtin_bswap64\", P1(UINT64),\n@@ -437,6 +439,14 @@ DEF_GO_RUNTIME(BUILTIN_BSWAP64, \"__builtin_bswap64\", P1(UINT64),\n DEF_GO_RUNTIME(BUILTIN_CTZ, \"__builtin_ctz\", P1(UINT32), R1(INT32))\n DEF_GO_RUNTIME(BUILTIN_CTZLL, \"__builtin_ctzll\", P1(UINT64), R1(INT32))\n \n+// Count leading zeros.\n+DEF_GO_RUNTIME(BUILTIN_CLZ, \"__builtin_clz\", P1(UINT32), R1(INT32))\n+DEF_GO_RUNTIME(BUILTIN_CLZLL, \"__builtin_clzll\", P1(UINT64), R1(INT32))\n+\n+// Count one bits.\n+DEF_GO_RUNTIME(BUILTIN_POPCOUNT, \"__builtin_popcount\", P1(UINT32), R1(INT32))\n+DEF_GO_RUNTIME(BUILTIN_POPCOUNTLL, \"__builtin_popcountll\", P1(UINT64), R1(INT32))\n+\n // Atomics.\n DEF_GO_RUNTIME(ATOMIC_LOAD_4, \"__atomic_load_4\", P2(POINTER, INT32),\n                R1(UINT32))"}]}