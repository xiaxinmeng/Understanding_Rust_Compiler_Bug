{"sha": "00229de405d3ddbe05a4229a4758b67aee1b88b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAyMjlkZTQwNWQzZGRiZTA1YTQyMjlhNDc1OGI2N2FlZTFiODhiNg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-08-26T21:44:46Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-08-26T21:44:46Z"}, "message": "re PR middle-end/12002 (internal compiler error: in gen_lowpart, at emit-rtl.c:1374)\n\n\n\tPR middle-end/12002\n\t* tree.h (SCALAR_FLOAT_TYPE_P, COMPLEX_FLOAT_TYPE_P): New macros.\n\t(FLOAT_TYPE_P): Define in terms of these two new macros.\n\t* fold-const.c (fold <PLUS_EXPR>): Don't convert x+x into x*2.0\n\tfor complex floating point types.\n\n\t* g77.f-torture/compile/12002.f: New test case.\n\nFrom-SVN: r70821", "tree": {"sha": "f66d45ff83456aa8be9b704e85862705c14f4a6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f66d45ff83456aa8be9b704e85862705c14f4a6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00229de405d3ddbe05a4229a4758b67aee1b88b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00229de405d3ddbe05a4229a4758b67aee1b88b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00229de405d3ddbe05a4229a4758b67aee1b88b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00229de405d3ddbe05a4229a4758b67aee1b88b6/comments", "author": null, "committer": null, "parents": [{"sha": "b41ead3e3537c589c78911ad0426c22a029cfb46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b41ead3e3537c589c78911ad0426c22a029cfb46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b41ead3e3537c589c78911ad0426c22a029cfb46"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "6830aeef16d2d884c6b053a62ecd2702a3b0ef5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00229de405d3ddbe05a4229a4758b67aee1b88b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00229de405d3ddbe05a4229a4758b67aee1b88b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00229de405d3ddbe05a4229a4758b67aee1b88b6", "patch": "@@ -1,3 +1,11 @@\n+2003-08-26  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/12002\n+\t* tree.h (SCALAR_FLOAT_TYPE_P, COMPLEX_FLOAT_TYPE_P): New macros.\n+\t(FLOAT_TYPE_P): Define in terms of these two new macros.\n+\t* fold-const.c (fold <PLUS_EXPR>): Don't convert x+x into x*2.0\n+\tfor complex floating point types.\n+\n 2003-08-26  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.c (emit_prologue): Don't check literal pool size."}, {"sha": "68a92a2ed3837a94eee75d8e1ced40dbd2ef8b81", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00229de405d3ddbe05a4229a4758b67aee1b88b6/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00229de405d3ddbe05a4229a4758b67aee1b88b6/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=00229de405d3ddbe05a4229a4758b67aee1b88b6", "patch": "@@ -5713,7 +5713,8 @@ fold (tree expr)\n \t    return non_lvalue (convert (type, arg1));\n \n \t  /* Convert x+x into x*2.0.  */\n-\t  if (operand_equal_p (arg0, arg1, 0))\n+\t  if (operand_equal_p (arg0, arg1, 0)\n+\t      && SCALAR_FLOAT_TYPE_P (type))\n \t    return fold (build (MULT_EXPR, type, arg0,\n \t\t\t\tbuild_real (type, dconst2)));\n "}, {"sha": "2cabf3401661dd8dd2698e8cdb2d85f11344280c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00229de405d3ddbe05a4229a4758b67aee1b88b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00229de405d3ddbe05a4229a4758b67aee1b88b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=00229de405d3ddbe05a4229a4758b67aee1b88b6", "patch": "@@ -1,3 +1,8 @@\n+2003-08-26  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/12002\n+\t* g77.f-torture/compile/12002.f: New test case.\n+\n 2003-08-26  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcc.dg/20030826-1.c: New test case."}, {"sha": "cd661459f93f2465bbf2ecadfee36c510ba71804", "filename": "gcc/testsuite/g77.f-torture/compile/12002.f", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00229de405d3ddbe05a4229a4758b67aee1b88b6/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2F12002.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00229de405d3ddbe05a4229a4758b67aee1b88b6/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2F12002.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2F12002.f?ref=00229de405d3ddbe05a4229a4758b67aee1b88b6", "patch": "@@ -0,0 +1,5 @@\n+C      PR middle-end/12002\n+       COMPLEX TE1\n+       TE1=-2.\n+       TE1=TE1+TE1\n+       END"}, {"sha": "892057d98995c4c831af3be5dfa3c656b0e8d574", "filename": "gcc/tree.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00229de405d3ddbe05a4229a4758b67aee1b88b6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00229de405d3ddbe05a4229a4758b67aee1b88b6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=00229de405d3ddbe05a4229a4758b67aee1b88b6", "patch": "@@ -446,13 +446,21 @@ extern void tree_operand_check_failed (int, enum tree_code,\n   (TREE_CODE (TYPE) == INTEGER_TYPE || TREE_CODE (TYPE) == ENUMERAL_TYPE  \\\n    || TREE_CODE (TYPE) == BOOLEAN_TYPE || TREE_CODE (TYPE) == CHAR_TYPE)\n \n+/* Nonzero if TYPE represents a scalar floating-point type.  */\n+\n+#define SCALAR_FLOAT_TYPE_P(TYPE) (TREE_CODE (TYPE) == REAL_TYPE)\n+\n+/* Nonzero if TYPE represents a complex floating-point type.  */\n+\n+#define COMPLEX_FLOAT_TYPE_P(TYPE)\t\\\n+  (TREE_CODE (TYPE) == COMPLEX_TYPE\t\\\n+   && TREE_CODE (TREE_TYPE (TYPE)) == REAL_TYPE)\n+\n /* Nonzero if TYPE represents a floating-point type, including complex\n    floating-point types.  */\n \n #define FLOAT_TYPE_P(TYPE)\t\t\\\n-  (TREE_CODE (TYPE) == REAL_TYPE\t\\\n-   || (TREE_CODE (TYPE) == COMPLEX_TYPE \\\n-       && TREE_CODE (TREE_TYPE (TYPE)) == REAL_TYPE))\n+  (SCALAR_FLOAT_TYPE_P (TYPE) || COMPLEX_FLOAT_TYPE_P (TYPE))\n \n /* Nonzero if TYPE represents an aggregate (multi-component) type.  */\n "}]}