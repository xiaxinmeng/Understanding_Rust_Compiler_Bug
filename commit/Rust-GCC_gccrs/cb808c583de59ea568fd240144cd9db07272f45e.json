{"sha": "cb808c583de59ea568fd240144cd9db07272f45e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I4MDhjNTgzZGU1OWVhNTY4ZmQyNDAxNDRjZDlkYjA3MjcyZjQ1ZQ==", "commit": {"author": {"name": "Nicholas Guriev", "email": "guriev-ns@ya.ru", "date": "2020-11-12T13:59:35Z"}, "committer": {"name": "Jeff Law", "email": "law@torsion.usersys.redhat.com", "date": "2020-11-12T14:02:12Z"}, "message": "Specify reason of -Winvalid-pch warning\n\ngcc/c-family\n\tPR pch/86674\n\t* c-pch.c (c_common_valid_pch): Use cpp_warning with CPP_W_INVALID_PCH\n\treason to fix -Werror=invalid-pch and -Wno-error=invalid-pch switches.\n\nlibcpp\n\tPR pch/86674\n\t* files.c (_cpp_find_file): Use CPP_DL_NOTE not CPP_DL_ERROR in call to\n\tcpp_error.", "tree": {"sha": "4d8acf43cdef4f5987316d55434e2de6958605f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d8acf43cdef4f5987316d55434e2de6958605f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb808c583de59ea568fd240144cd9db07272f45e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb808c583de59ea568fd240144cd9db07272f45e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb808c583de59ea568fd240144cd9db07272f45e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb808c583de59ea568fd240144cd9db07272f45e/comments", "author": {"login": "mymedia2", "id": 9163157, "node_id": "MDQ6VXNlcjkxNjMxNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/9163157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mymedia2", "html_url": "https://github.com/mymedia2", "followers_url": "https://api.github.com/users/mymedia2/followers", "following_url": "https://api.github.com/users/mymedia2/following{/other_user}", "gists_url": "https://api.github.com/users/mymedia2/gists{/gist_id}", "starred_url": "https://api.github.com/users/mymedia2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mymedia2/subscriptions", "organizations_url": "https://api.github.com/users/mymedia2/orgs", "repos_url": "https://api.github.com/users/mymedia2/repos", "events_url": "https://api.github.com/users/mymedia2/events{/privacy}", "received_events_url": "https://api.github.com/users/mymedia2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "071a31a53388229213f323ecdc680ff8aeda456c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/071a31a53388229213f323ecdc680ff8aeda456c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/071a31a53388229213f323ecdc680ff8aeda456c"}], "stats": {"total": 42, "additions": 16, "deletions": 26}, "files": [{"sha": "9c0bd0b631df72d89bf94ba040817cb2dfdab3c8", "filename": "gcc/c-family/c-pch.c", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb808c583de59ea568fd240144cd9db07272f45e/gcc%2Fc-family%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb808c583de59ea568fd240144cd9db07272f45e/gcc%2Fc-family%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pch.c?ref=cb808c583de59ea568fd240144cd9db07272f45e", "patch": "@@ -211,36 +211,30 @@ c_common_valid_pch (cpp_reader *pfile, const char *name, int fd)\n     fatal_error (input_location, \"cannot read %s: %m\", name);\n   else if (sizeread != IDENT_LENGTH + 16)\n     {\n-      if (cpp_get_options (pfile)->warn_invalid_pch)\n-\tcpp_error (pfile, CPP_DL_WARNING, \"%s: too short to be a PCH file\",\n+      cpp_warning (pfile, CPP_W_INVALID_PCH, \"%s: too short to be a PCH file\",\n \t\t   name);\n       return 2;\n     }\n \n   pch_ident = get_ident();\n   if (memcmp (ident, pch_ident, IDENT_LENGTH) != 0)\n     {\n-      if (cpp_get_options (pfile)->warn_invalid_pch)\n-\t{\n-\t  if (memcmp (ident, pch_ident, 5) == 0)\n-\t    /* It's a PCH, for the right language, but has the wrong version.\n-\t     */\n-\t    cpp_error (pfile, CPP_DL_WARNING,\n+\tif (memcmp (ident, pch_ident, 5) == 0)\n+\t  /* It's a PCH, for the right language, but has the wrong version.  */\n+\t  cpp_warning (pfile, CPP_W_INVALID_PCH,\n \t\t       \"%s: not compatible with this GCC version\", name);\n-\t  else if (memcmp (ident, pch_ident, 4) == 0)\n-\t    /* It's a PCH for the wrong language.  */\n-\t    cpp_error (pfile, CPP_DL_WARNING, \"%s: not for %s\", name,\n+\telse if (memcmp (ident, pch_ident, 4) == 0)\n+\t  /* It's a PCH for the wrong language.  */\n+\t  cpp_warning (pfile, CPP_W_INVALID_PCH, \"%s: not for %s\", name,\n \t\t       lang_hooks.name);\n-\t  else\n-\t    /* Not any kind of PCH.  */\n-\t    cpp_error (pfile, CPP_DL_WARNING, \"%s: not a PCH file\", name);\n-\t}\n+\telse\n+\t  /* Not any kind of PCH.  */\n+\t  cpp_warning (pfile, CPP_W_INVALID_PCH, \"%s: not a PCH file\", name);\n       return 2;\n     }\n   if (memcmp (ident + IDENT_LENGTH, executable_checksum, 16) != 0)\n     {\n-      if (cpp_get_options (pfile)->warn_invalid_pch)\n-\tcpp_error (pfile, CPP_DL_WARNING,\n+      cpp_warning (pfile, CPP_W_INVALID_PCH,\n \t\t   \"%s: created by a different GCC executable\", name);\n       return 2;\n     }\n@@ -257,8 +251,7 @@ c_common_valid_pch (cpp_reader *pfile, const char *name, int fd)\n   if (v.debug_info_type != write_symbols\n       && write_symbols != NO_DEBUG)\n     {\n-      if (cpp_get_options (pfile)->warn_invalid_pch)\n-\tcpp_error (pfile, CPP_DL_WARNING,\n+      cpp_warning (pfile, CPP_W_INVALID_PCH,\n \t\t   \"%s: created with -g%s, but used with -g%s\", name,\n \t\t   debug_type_names[v.debug_info_type],\n \t\t   debug_type_names[write_symbols]);\n@@ -271,8 +264,7 @@ c_common_valid_pch (cpp_reader *pfile, const char *name, int fd)\n     for (i = 0; i < MATCH_SIZE; i++)\n       if (*pch_matching[i].flag_var != v.match[i])\n \t{\n-\t  if (cpp_get_options (pfile)->warn_invalid_pch)\n-\t    cpp_error (pfile, CPP_DL_WARNING,\n+\t  cpp_warning (pfile, CPP_W_INVALID_PCH,\n \t\t       \"%s: settings for %s do not match\", name,\n \t\t       pch_matching[i].flag_name);\n \t  return 2;\n@@ -287,8 +279,7 @@ c_common_valid_pch (cpp_reader *pfile, const char *name, int fd)\n      check one function.  */\n   if (v.pch_init != &pch_init)\n     {\n-      if (cpp_get_options (pfile)->warn_invalid_pch)\n-\tcpp_error (pfile, CPP_DL_WARNING,\n+      cpp_warning (pfile, CPP_W_INVALID_PCH,\n \t\t   \"%s: had text segment at different address\", name);\n       return 2;\n     }\n@@ -305,8 +296,7 @@ c_common_valid_pch (cpp_reader *pfile, const char *name, int fd)\n     free (this_file_data);\n     if (msg != NULL)\n       {\n-\tif (cpp_get_options (pfile)->warn_invalid_pch)\n-\t  cpp_error (pfile, CPP_DL_WARNING, \"%s: %s\", name, msg);\n+\tcpp_warning (pfile, CPP_W_INVALID_PCH, \"%s: %s\", name, msg);\n \treturn 2;\n       }\n   }"}, {"sha": "d73177aa1eef229896c181fc1eb70dbb567edb87", "filename": "libcpp/files.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb808c583de59ea568fd240144cd9db07272f45e/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb808c583de59ea568fd240144cd9db07272f45e/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=cb808c583de59ea568fd240144cd9db07272f45e", "patch": "@@ -571,7 +571,7 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir,\n \t\t\t   \"one or more PCH files were found,\"\n \t\t\t   \" but they were invalid\");\n \t\tif (!cpp_get_options (pfile)->warn_invalid_pch)\n-\t\t  cpp_error (pfile, CPP_DL_ERROR,\n+\t\t  cpp_error (pfile, CPP_DL_NOTE,\n \t\t\t     \"use -Winvalid-pch for more information\");\n \t      }\n "}]}