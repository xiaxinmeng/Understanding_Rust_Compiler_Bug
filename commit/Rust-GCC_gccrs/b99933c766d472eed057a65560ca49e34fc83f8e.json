{"sha": "b99933c766d472eed057a65560ca49e34fc83f8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk5OTMzYzc2NmQ0NzJlZWQwNTdhNjU1NjBjYTQ5ZTM0ZmM4M2Y4ZQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-02T05:33:36Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-02T05:33:36Z"}, "message": "(lang_options): Add terminating zero.\n\nFrom-SVN: r2024", "tree": {"sha": "251415ae8f50609a05943499d68c30ea7d0e18c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/251415ae8f50609a05943499d68c30ea7d0e18c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b99933c766d472eed057a65560ca49e34fc83f8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b99933c766d472eed057a65560ca49e34fc83f8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b99933c766d472eed057a65560ca49e34fc83f8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b99933c766d472eed057a65560ca49e34fc83f8e/comments", "author": null, "committer": null, "parents": [{"sha": "4f77a31b9e51f47b0145c7487f1ca5dd5711a3cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f77a31b9e51f47b0145c7487f1ca5dd5711a3cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f77a31b9e51f47b0145c7487f1ca5dd5711a3cb"}], "stats": {"total": 145, "additions": 133, "deletions": 12}, "files": [{"sha": "061edbf601af94a701b4a1d50029b0979c13538b", "filename": "gcc/toplev.c", "status": "modified", "additions": 133, "deletions": 12, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b99933c766d472eed057a65560ca49e34fc83f8e/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b99933c766d472eed057a65560ca49e34fc83f8e/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=b99933c766d472eed057a65560ca49e34fc83f8e", "patch": "@@ -495,6 +495,125 @@ struct { char *string; int *variable; int on_value;} f_options[] =\n   {\"verbose-asm\", &flag_verbose_asm, 1},\n   {\"gnu-linker\", &flag_gnu_linker, 1}\n };\n+\n+/* Table of language-specific options.  */\n+\n+char *lang_options[] =\n+{\n+  \"-ftraditional\",\n+  \"-traditional\",\n+  \"-fnotraditional\",\n+  \"-fno-traditional\",\n+  \"-fsigned-char\",\n+  \"-funsigned-char\",\n+  \"-fno-signed-char\",\n+  \"-fno-unsigned-char\",\n+  \"-fsigned-bitfields\",\n+  \"-funsigned-bitfields\",\n+  \"-fno-signed-bitfields\",\n+  \"-fno-unsigned-bitfields\",\n+  \"-fshort-enums\",\n+  \"-fno-short-enums\",\n+  \"-fcond-mismatch\",\n+  \"-fno-cond-mismatch\",\n+  \"-fshort-double\",\n+  \"-fno-short-double\",\n+  \"-fasm\",\n+  \"-fno-asm\",\n+  \"-fbuiltin\",\n+  \"-fno-builtin\",\n+  \"-fno-ident\",\n+  \"-fident\",\n+  \"-ansi\",\n+  \"-Wimplicit\",\n+  \"-Wno-implicit\",\n+  \"-Wwrite-strings\",\n+  \"-Wno-write-strings\",\n+  \"-Wcast-qual\",\n+  \"-Wno-cast-qual\",\n+  \"-Wpointer-arith\",\n+  \"-Wno-pointer-arith\",\n+  \"-Wstrict-prototypes\",\n+  \"-Wno-strict-prototypes\",\n+  \"-Wmissing-prototypes\",\n+  \"-Wno-missing-prototypes\",\n+  \"-Wredundant-decls\",\n+  \"-Wno-redundant-decls\",\n+  \"-Wnested-externs\",\n+  \"-Wno-nested-externs\",\n+  \"-Wtraditional\",\n+  \"-Wno-traditional\",\n+  \"-Wformat\",\n+  \"-Wno-format\",\n+  \"-Wchar-subscripts\",\n+  \"-Wno-char-subscripts\",\n+  \"-Wconversion\",\n+  \"-Wno-conversion\",\n+  \"-Wparentheses\",\n+  \"-Wno-parentheses\",\n+  \"-Wcomment\",\n+  \"-Wno-comment\",\n+  \"-Wcomments\",\n+  \"-Wno-comments\",\n+  \"-Wtrigraphs\",\n+  \"-Wno-trigraphs\",\n+  \"-Wimport\",\n+  \"-Wno-import\",\n+  \"-Wall\",\n+\n+  /* These are for C++.  */\n+  \"+e0\",\n+  \"+e1\",\n+  \"+e2\",\n+  \"-fsave-memoized\",\n+  \"-fno-save-memoized\",\n+  \"-fSOS\",\n+  \"-fno-SOS\",\n+  \"-fcadillac\",\n+  \"-fno-cadillac\",\n+  \"-fgc\",\n+  \"-fno-gc\",\n+  \"-flabels-ok\",\n+  \"-fno-labels-ok\",\n+  \"-fstats\",\n+  \"-fno-stats\",\n+  \"-fthis-is-variable\",\n+  \"-fno-this-is-variable\",\n+  \"-fstrict-prototype\",\n+  \"-fno-strict-prototype\",\n+  \"-fall-virtual\",\n+  \"-fno-all-virtual\",\n+  \"-fmemoize-lookups\",\n+  \"-fno-memoize-lookups\",\n+  \"-felide-constructors\",\n+  \"-fno-elide-constructors\",\n+  \"-finline-debug\",\n+  \"-fno-inline-debug\",\n+  \"-fhandle-exceptions\",\n+  \"-fno-handle-exceptions\",\n+  \"-fansi-exceptions\",\n+  \"-fno-ansi-exceptions\",\n+  \"-fspring-exceptions\",\n+  \"-fno-spring-exceptions\",\n+  \"-fdefault-inline\",\n+  \"-fno-default-inline\",\n+  \"-fenum-int-equiv\",\n+  \"-fno-enum-int-equiv\",\n+  \"-fdossier\",\n+  \"-fno-dossier\",\n+  \"-fxref\",\n+  \"-fno-xref\",\n+  \"-fnonnull-objects\",\n+  \"-fno-nonnull-objects\",\n+\n+  \"-Wreturn-type\",\n+  \"-Wno-return-type\",\n+  \"-Woverloaded-virtual\",\n+  \"-Wno-overloaded-virtual\",\n+  \"-Wenum-clash\",\n+  \"-Wno-enum-clash\",\n+  0\n+};\n \f\n /* Options controlling warnings */\n \n@@ -2692,7 +2811,18 @@ main (argc, argv, envp)\n \n   for (i = 1; i < argc; i++)\n     {\n-      if (argv[i][0] == '-' && argv[i][1] != 0)\n+      int j;\n+      /* If this is a language-specific option,\n+\t decode it in a language-specific way.  */\n+      for (j = 0; lang_options[j] != 0; j++)\n+\tif (!strncmp (argv[i], lang_options[j],\n+\t\t      strlen (lang_options[j])))\n+\t  break;\n+      if (lang_options[j] != 0)\n+\t/* If the option is valid for *some* language,\n+\t   treat it as valid even if this language doesn't understand it.  */\n+\tlang_decode_option (argv[i]);\n+      else if (argv[i][0] == '-' && argv[i][1] != 0)\n \t{\n \t  register char *str = argv[i] + 1;\n \t  if (str[0] == 'Y')\n@@ -2784,7 +2914,6 @@ main (argc, argv, envp)\n \t    }\n \t  else if (str[0] == 'f')\n \t    {\n-\t      int j;\n \t      register char *p = &str[1];\n \t      int found = 0;\n \n@@ -2819,7 +2948,7 @@ main (argc, argv, envp)\n \t\tfix_register (&p[10], 0, 1);\n \t      else if (!strncmp (p, \"call-saved-\", 11))\n \t\tfix_register (&p[11], 0, 0);\n-\t      else if (! lang_decode_option (argv[i]))\n+\t      else\n \t\terror (\"Invalid option `%s'\", argv[i]);\n \t    }\n \t  else if (str[0] == 'O')\n@@ -2836,8 +2965,6 @@ main (argc, argv, envp)\n \t    pedantic = 1;\n \t  else if (!strcmp (str, \"pedantic-errors\"))\n \t    flag_pedantic_errors = pedantic = 1;\n-\t  else if (lang_decode_option (argv[i]))\n-\t    ;\n \t  else if (!strcmp (str, \"quiet\"))\n \t    quiet_flag = 1;\n \t  else if (!strcmp (str, \"version\"))\n@@ -2851,7 +2978,6 @@ main (argc, argv, envp)\n \t    }\n \t  else if (str[0] == 'W')\n \t    {\n-\t      int j;\n \t      register char *p = &str[1];\n \t      int found = 0;\n \n@@ -3049,12 +3175,7 @@ You Lose!  You must define PREFERRED_DEBUGGING_TYPE!\n \t    error (\"Invalid option `%s'\", argv[i]);\n \t}\n       else if (argv[i][0] == '+')\n-\t{\n-\t  if (lang_decode_option (argv[i]))\n-\t    ;\n-\t  else\n-\t    error (\"Invalid option `%s'\", argv[i]);\n-\t}\n+\terror (\"Invalid option `%s'\", argv[i]);\n       else\n \tfilename = argv[i];\n     }"}]}