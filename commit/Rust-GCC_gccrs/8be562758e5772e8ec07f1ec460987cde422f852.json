{"sha": "8be562758e5772e8ec07f1ec460987cde422f852", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJlNTYyNzU4ZTU3NzJlOGVjMDdmMWVjNDYwOTg3Y2RlNDIyZjg1Mg==", "commit": {"author": {"name": "Bob Wilson", "email": "bob.wilson@acm.org", "date": "2002-03-26T19:32:18Z"}, "committer": {"name": "Bob Wilson", "email": "bwilson@gcc.gnu.org", "date": "2002-03-26T19:32:18Z"}, "message": "* config/xtensa/xtensa.c (xtensa_va_arg): Handle variable-sized types.\n\nFrom-SVN: r51400", "tree": {"sha": "f4679809d7559fd312a22e24776484e557077486", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4679809d7559fd312a22e24776484e557077486"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8be562758e5772e8ec07f1ec460987cde422f852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8be562758e5772e8ec07f1ec460987cde422f852", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8be562758e5772e8ec07f1ec460987cde422f852", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8be562758e5772e8ec07f1ec460987cde422f852/comments", "author": null, "committer": null, "parents": [{"sha": "c8c21a8cd010469fa92d2da4a7029d5c40122a84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8c21a8cd010469fa92d2da4a7029d5c40122a84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8c21a8cd010469fa92d2da4a7029d5c40122a84"}], "stats": {"total": 69, "additions": 49, "deletions": 20}, "files": [{"sha": "4054887c8706a4fbb4a5129b37822f22663eeaa1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be562758e5772e8ec07f1ec460987cde422f852/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be562758e5772e8ec07f1ec460987cde422f852/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8be562758e5772e8ec07f1ec460987cde422f852", "patch": "@@ -1,3 +1,7 @@\n+2002-03-26  Bob Wilson  <bob.wilson@acm.org>\n+\n+\t* config/xtensa/xtensa.c (xtensa_va_arg): Handle variable-sized types.\n+\n 2002-03-26  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/5621"}, {"sha": "0455737baf59ca00412a18c11aacecae26d3aa8a", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 45, "deletions": 20, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8be562758e5772e8ec07f1ec460987cde422f852/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8be562758e5772e8ec07f1ec460987cde422f852/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=8be562758e5772e8ec07f1ec460987cde422f852", "patch": "@@ -2431,14 +2431,10 @@ xtensa_va_arg (valist, type)\n   tree f_stk, stk;\n   tree f_reg, reg;\n   tree f_ndx, ndx;\n-  tree tmp, addr_tree;\n-  rtx array, orig_ndx, r, addr;\n-  HOST_WIDE_INT size, va_size;\n+  tree tmp, addr_tree, type_size;\n+  rtx array, orig_ndx, r, addr, size, va_size;\n   rtx lab_false, lab_over, lab_false2;\n \n-  size = int_size_in_bytes (type);\n-  va_size = (size + UNITS_PER_WORD - 1) & -UNITS_PER_WORD;\n-\n   f_stk = TYPE_FIELDS (va_list_type_node);\n   f_reg = TREE_CHAIN (f_stk);\n   f_ndx = TREE_CHAIN (f_reg);\n@@ -2447,6 +2443,20 @@ xtensa_va_arg (valist, type)\n   reg = build (COMPONENT_REF, TREE_TYPE (f_reg), valist, f_reg);\n   ndx = build (COMPONENT_REF, TREE_TYPE (f_ndx), valist, f_ndx);\n \n+  type_size = TYPE_SIZE_UNIT (TYPE_MAIN_VARIANT (type));\n+\n+  va_size = gen_reg_rtx (SImode);\n+  tmp = fold (build (MULT_EXPR, sizetype,\n+\t\t     fold (build (TRUNC_DIV_EXPR, sizetype,\n+\t\t\t\t  fold (build (PLUS_EXPR, sizetype,\n+\t\t\t\t\t       type_size,\n+\t\t\t\t\t       size_int (UNITS_PER_WORD - 1))),\n+\t\t\t\t  size_int (UNITS_PER_WORD))),\n+\t\t     size_int (UNITS_PER_WORD)));\n+  r = expand_expr (tmp, va_size, SImode, EXPAND_NORMAL);\n+  if (r != va_size)\n+    emit_move_insn (va_size, r);\n+\n \n   /* First align __va_ndx to a double word boundary if necessary for this arg:\n \n@@ -2477,7 +2487,8 @@ xtensa_va_arg (valist, type)\n   if (r != orig_ndx)\n     emit_move_insn (orig_ndx, r);\n \n-  tmp = build (PLUS_EXPR, integer_type_node, ndx, build_int_2 (va_size, 0));\n+  tmp = build (PLUS_EXPR, integer_type_node, ndx,\n+\t       make_tree (intSI_type_node, va_size));\n   tmp = build (MODIFY_EXPR, integer_type_node, ndx, tmp);\n   TREE_SIDE_EFFECTS (tmp) = 1;\n   expand_expr (tmp, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -2522,7 +2533,8 @@ xtensa_va_arg (valist, type)\n \t\t\t   GEN_INT (MAX_ARGS_IN_REGISTERS * UNITS_PER_WORD),\n \t\t\t   GE, const1_rtx, SImode, 0, lab_false2);\n \n-  tmp = build_int_2 ((MAX_ARGS_IN_REGISTERS * UNITS_PER_WORD) + va_size, 0);\n+  tmp = build (PLUS_EXPR, sizetype, make_tree (intSI_type_node, va_size),\n+\t       build_int_2 (MAX_ARGS_IN_REGISTERS * UNITS_PER_WORD, 0));\n   tmp = build (MODIFY_EXPR, integer_type_node, ndx, tmp);\n   TREE_SIDE_EFFECTS (tmp) = 1;\n   expand_expr (tmp, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -2533,31 +2545,44 @@ xtensa_va_arg (valist, type)\n   if (r != array)\n     emit_move_insn (array, r);\n \n+  emit_label (lab_over);\n+\n \n   /* Given the base array pointer (__array) and index to the subsequent\n      argument (__va_ndx), find the address:\n \n-     Big-endian:\n-     __array + (AP).__va_ndx - sizeof (TYPE)\n-\n-     Little-endian:\n-     __array + (AP).__va_ndx - __va_size (TYPE)\n+     __array + (AP).__va_ndx - (BYTES_BIG_ENDIAN && sizeof (TYPE) < 4\n+\t\t\t\t? sizeof (TYPE)\n+\t\t\t\t: __va_size (TYPE))\n \n      The results are endian-dependent because values smaller than one word\n      are aligned differently.\n   */\n \n-  emit_label (lab_over);\n+  size = gen_reg_rtx (SImode);\n+  emit_move_insn (size, va_size);\n+  \n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      rtx lab_use_va_size = gen_label_rtx ();\n+\n+      emit_cmp_and_jump_insns (expand_expr (type_size, NULL_RTX, SImode,\n+\t\t\t\t\t    EXPAND_NORMAL),\n+\t\t\t       GEN_INT (PARM_BOUNDARY / BITS_PER_UNIT),\n+\t\t\t       GE, const1_rtx, SImode, 0, lab_use_va_size);\n+\n+      r = expand_expr (type_size, size, SImode, EXPAND_NORMAL);\n+      if (r != size)\n+\temit_move_insn (size, r);\n+\n+      emit_label (lab_use_va_size);\n+    }\n \n   addr_tree = build (PLUS_EXPR, ptr_type_node,\n \t\t     make_tree (ptr_type_node, array),\n \t\t     ndx);\n-  addr_tree = build (PLUS_EXPR, ptr_type_node,\n-\t\t     addr_tree,\n-\t\t     build_int_2 (BYTES_BIG_ENDIAN\n-\t\t\t\t  && size < (PARM_BOUNDARY / BITS_PER_UNIT)\n-\t\t\t\t  ? -size\n-\t\t\t\t  : -va_size, -1));\n+  addr_tree = build (MINUS_EXPR, ptr_type_node, addr_tree,\n+\t\t     make_tree (intSI_type_node, size));\n   addr = expand_expr (addr_tree, NULL_RTX, Pmode, EXPAND_NORMAL);\n   addr = copy_to_reg (addr);\n   return addr;"}]}