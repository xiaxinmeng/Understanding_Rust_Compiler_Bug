{"sha": "d23c0a32ab98d6c170970bb1ee319c6fc967852d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIzYzBhMzJhYjk4ZDZjMTcwOTcwYmIxZWUzMTljNmZjOTY3ODUyZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-11-07T14:28:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-11-07T14:28:57Z"}, "message": "tree-vrp.c (find_assert_locations): Pre-seed live bitmaps for loop latches from header PHI arguments from the latch...\n\n\t* tree-vrp.c (find_assert_locations): Pre-seed live bitmaps for loop\n\tlatches from header PHI arguments from the latch edge.\n\n        * gcc.dg/unroll_1.c: Add -fno-tree-vrp to dg-options.\n        * gcc.dg/unroll_2.c: Likewise.\n        * gcc.dg/unroll_3.c: Likewise.\n        * gcc.dg/unroll_4.c: Likewise.\n\t* gcc.dg/vrp90.c: New test.\n\nFrom-SVN: r204515", "tree": {"sha": "37d8f2f72fa52335e8f3aedab00ddc0e57ef358a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37d8f2f72fa52335e8f3aedab00ddc0e57ef358a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d23c0a32ab98d6c170970bb1ee319c6fc967852d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d23c0a32ab98d6c170970bb1ee319c6fc967852d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d23c0a32ab98d6c170970bb1ee319c6fc967852d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d23c0a32ab98d6c170970bb1ee319c6fc967852d/comments", "author": null, "committer": null, "parents": [{"sha": "fe79fc067e750e2e8a7e22861a088b8fde07ebbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe79fc067e750e2e8a7e22861a088b8fde07ebbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe79fc067e750e2e8a7e22861a088b8fde07ebbc"}], "stats": {"total": 86, "additions": 82, "deletions": 4}, "files": [{"sha": "2dbbfefa792111cc66966bb7ada7f863c27ea55b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c0a32ab98d6c170970bb1ee319c6fc967852d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c0a32ab98d6c170970bb1ee319c6fc967852d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d23c0a32ab98d6c170970bb1ee319c6fc967852d", "patch": "@@ -1,3 +1,9 @@\n+2013-11-07  Richard Biener  <rguenther@suse.de>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-vrp.c (find_assert_locations): Pre-seed live bitmaps for loop\n+\tlatches from header PHI arguments from the latch edge.\n+\n 2013-11-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58176"}, {"sha": "643d1569b376d088feb60ee79ff4c332df562c86", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c0a32ab98d6c170970bb1ee319c6fc967852d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c0a32ab98d6c170970bb1ee319c6fc967852d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d23c0a32ab98d6c170970bb1ee319c6fc967852d", "patch": "@@ -1,3 +1,11 @@\n+2013-11-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+        * gcc.dg/unroll_1.c: Add -fno-tree-vrp to dg-options.\n+        * gcc.dg/unroll_2.c: Likewise.\n+        * gcc.dg/unroll_3.c: Likewise.\n+        * gcc.dg/unroll_4.c: Likewise.\n+\t* gcc.dg/vrp90.c: New test.\n+\n 2013-11-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58176"}, {"sha": "836c335b698cd7a6d1fc8981a411833a98929bd6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp90.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c0a32ab98d6c170970bb1ee319c6fc967852d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp90.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c0a32ab98d6c170970bb1ee319c6fc967852d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp90.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp90.c?ref=d23c0a32ab98d6c170970bb1ee319c6fc967852d", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do link } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+/* { dg-final { scan-tree-dump-not \"link_error\" \"vrp1\"} } */\n+/* { dg-final { cleanup-tree-dump \"vrp1\" } } */\n+\n+extern void link_error (void);\n+\n+__attribute__((noinline, noclone)) int\n+foo (unsigned int n, int r)\n+{\n+  int i;\n+  if (n > 0)\n+    {\n+      asm (\"\");\n+      if (n < 10)\n+\t{\n+\t  asm (\"\");\n+\t  do\n+\t    {\n+\t      --n;\n+\t      r *= 2;\n+\t      if (n >= 9)\n+\t\tlink_error ();\n+\t    }\n+\t  while (n > 0);\n+\t}\n+    }\n+  return r + n;\n+}\n+\n+int\n+main ()\n+{\n+  foo (7, 2);\n+  return 0;\n+}"}, {"sha": "378f819ed686f940ecb89d979d36bf75340d0d9e", "filename": "gcc/testsuite/gcc.dg/unroll_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c0a32ab98d6c170970bb1ee319c6fc967852d/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c0a32ab98d6c170970bb1ee319c6fc967852d/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_1.c?ref=d23c0a32ab98d6c170970bb1ee319c6fc967852d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-rtl-loop2_unroll=stderr -fno-peel-loops -fdisable-tree-cunroll -fdisable-tree-cunrolli -fenable-rtl-loop2_unroll\" } */\n+/* { dg-options \"-O2 -fdump-rtl-loop2_unroll=stderr -fno-peel-loops -fno-tree-vrp -fdisable-tree-cunroll -fdisable-tree-cunrolli -fenable-rtl-loop2_unroll\" } */\n \n unsigned a[100], b[100];\n inline void bar()"}, {"sha": "2322a494012c0c92590456ac942d2b729168c278", "filename": "gcc/testsuite/gcc.dg/unroll_2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c0a32ab98d6c170970bb1ee319c6fc967852d/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c0a32ab98d6c170970bb1ee319c6fc967852d/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_2.c?ref=d23c0a32ab98d6c170970bb1ee319c6fc967852d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-rtl-loop2_unroll -fno-peel-loops -fdisable-tree-cunroll=foo -fdisable-tree-cunrolli=foo -fenable-rtl-loop2_unroll\" } */\n+/* { dg-options \"-O2 -fdump-rtl-loop2_unroll -fno-peel-loops -fno-tree-vrp -fdisable-tree-cunroll=foo -fdisable-tree-cunrolli=foo -fenable-rtl-loop2_unroll\" } */\n \n unsigned a[100], b[100];\n inline void bar()"}, {"sha": "310bf064c977643e9c6c6049bde3e1faa27a5331", "filename": "gcc/testsuite/gcc.dg/unroll_3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c0a32ab98d6c170970bb1ee319c6fc967852d/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c0a32ab98d6c170970bb1ee319c6fc967852d/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_3.c?ref=d23c0a32ab98d6c170970bb1ee319c6fc967852d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-rtl-loop2_unroll -fno-peel-loops -fdisable-tree-cunroll -fdisable-tree-cunrolli -fenable-rtl-loop2_unroll=foo\" } */\n+/* { dg-options \"-O2 -fdump-rtl-loop2_unroll -fno-peel-loops -fno-tree-vrp -fdisable-tree-cunroll -fdisable-tree-cunrolli -fenable-rtl-loop2_unroll=foo\" } */\n \n unsigned a[100], b[100];\n inline void bar()"}, {"sha": "fbffbb0d5f3f9eaf53dc412b6957cd2b04174622", "filename": "gcc/testsuite/gcc.dg/unroll_4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c0a32ab98d6c170970bb1ee319c6fc967852d/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c0a32ab98d6c170970bb1ee319c6fc967852d/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funroll_4.c?ref=d23c0a32ab98d6c170970bb1ee319c6fc967852d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-rtl-loop2_unroll -fno-peel-loops -fdisable-tree-cunroll -fdisable-tree-cunrolli -fenable-rtl-loop2_unroll=foo2\" } */\n+/* { dg-options \"-O2 -fdump-rtl-loop2_unroll -fno-peel-loops -fno-tree-vrp -fdisable-tree-cunroll -fdisable-tree-cunrolli -fenable-rtl-loop2_unroll=foo2\" } */\n \n unsigned a[100], b[100];\n inline void bar()"}, {"sha": "c1ff4752cb040c3a40a60540b0c94a0e5987851a", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23c0a32ab98d6c170970bb1ee319c6fc967852d/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23c0a32ab98d6c170970bb1ee319c6fc967852d/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=d23c0a32ab98d6c170970bb1ee319c6fc967852d", "patch": "@@ -5904,6 +5904,34 @@ find_assert_locations (void)\n   for (i = 0; i < rpo_cnt; ++i)\n     bb_rpo[rpo[i]] = i;\n \n+  /* Pre-seed loop latch liveness from loop header PHI nodes.  Due to\n+     the order we compute liveness and insert asserts we otherwise\n+     fail to insert asserts into the loop latch.  */\n+  loop_p loop;\n+  loop_iterator li;\n+  FOR_EACH_LOOP (li, loop, 0)\n+    {\n+      i = loop->latch->index;\n+      unsigned int j = single_succ_edge (loop->latch)->dest_idx;\n+      for (gimple_stmt_iterator gsi = gsi_start_phis (loop->header);\n+\t   !gsi_end_p (gsi); gsi_next (&gsi))\n+\t{\n+\t  gimple phi = gsi_stmt (gsi);\n+\t  if (virtual_operand_p (gimple_phi_result (phi)))\n+\t    continue;\n+\t  tree arg = gimple_phi_arg_def (phi, j);\n+\t  if (TREE_CODE (arg) == SSA_NAME)\n+\t    {\n+\t      if (live[i] == NULL)\n+\t\t{\n+\t\t  live[i] = sbitmap_alloc (num_ssa_names);\n+\t\t  bitmap_clear (live[i]);\n+\t\t}\n+\t      bitmap_set_bit (live[i], SSA_NAME_VERSION (arg));\n+\t    }\n+\t}\n+    }\n+\n   need_asserts = false;\n   for (i = rpo_cnt - 1; i >= 0; --i)\n     {"}]}