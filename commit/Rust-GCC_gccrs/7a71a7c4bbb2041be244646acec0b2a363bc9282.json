{"sha": "7a71a7c4bbb2041be244646acec0b2a363bc9282", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E3MWE3YzRiYmIyMDQxYmUyNDQ2NDZhY2VjMGIyYTM2M2JjOTI4Mg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-27T09:22:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-27T09:22:04Z"}, "message": "[multiple changes]\n\n2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem.adb (Analyze): Diagnose an illegal iterated component\n\tassociation.\n\t* sem_util.ads, sem_util.adb\n\t(Diagnose_Iterated_Component_Association): New routine.\n\n2017-04-27  Bob Duff  <duff@adacore.com>\n\n\t* adaint.c (__gnat_get_current_dir): Return 0 in length if\n\tgetcwd fails.\n\t* a-direct.adb, g-dirope.adb, osint.adb, s-os_lib.adb: Raise\n\texception if getcwd failed.\n\n2017-04-27  Yannick Moy  <moy@adacore.com>\n\n\t* exp_dbug.adb, exp_dbug.ads (Get_External_Name): Prefix ghost\n\tentities with special prefix.\n\n2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* debug.adb Change the documentation of switch -gnatd.s.\n\t* exp_ch7.adb (Make_Transient_Block): Transient blocks do not need\n\tto manage the secondary stack when an enclosing scope already\n\tperforms this functionality (aka relaxed management). Switch\n\t-gnatd.s may be used to force strict management in which case\n\tthe block will manage the secondary stack unconditionally. Add\n\ta guard to stop the traversal when encountering a package or a\n\tsubprogram scope.\n\n2017-04-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Resolve_Call): Refine further the handling of\n\tlimited views of return types in function calls. If the function\n\tthat returns a limited view appears in the current unit,\n\twe do not replace its type by the non-limited view because\n\tthis transformation is performed int the back-end. However,\n\tthe type of the call itself must be the non-limited view, to\n\tprevent spurious resolution errors.\n\n2017-04-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* einfo,ads, einfo.adb (Class_Wide_Preconds, Class_Wide_Postconds):\n\tRemoved, proposed implementation using generics for class-wide\n\tpreconditions proved impractical.\n\t(Class_Wide_Clone): New attribute of subprogram. Designates\n\tsubprogram created for primitive operations with class-wide\n\tpre/postconditions that contain calls to other primitives. The\n\tclone holds the body of the original primitive, but the\n\tpre/postonditions do not apply to it. The original body is\n\trewritten as a wrapper for a call to the clone.\n\t(Is_Class_Wide_Clone): New flag to identify a Class_Wide_Clone. If\n\tthe flag is set, no code for the corresponding pre/postconditions\n\tis inserted into its body.\n\n2017-04-27  Bob Duff  <duff@adacore.com>\n\n\t* exp_prag.adb, par-prag.adb, sem_ch13.adb: Ignore\n\tScalar_Storage_Order if -gnatI is given.\n\t* sem_prag.adb (Analyze_Pragma): Ignore\n\tDefault_Scalar_Storage_Order if -gnatI is given.\n\nFrom-SVN: r247298", "tree": {"sha": "0c1f983956233525293026b9d5edb976c44f06af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c1f983956233525293026b9d5edb976c44f06af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a71a7c4bbb2041be244646acec0b2a363bc9282", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a71a7c4bbb2041be244646acec0b2a363bc9282", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a71a7c4bbb2041be244646acec0b2a363bc9282", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a71a7c4bbb2041be244646acec0b2a363bc9282/comments", "author": null, "committer": null, "parents": [{"sha": "394fa9f54a4fc7f2cc6ea0630f948f0e47558e28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394fa9f54a4fc7f2cc6ea0630f948f0e47558e28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/394fa9f54a4fc7f2cc6ea0630f948f0e47558e28"}], "stats": {"total": 446, "additions": 323, "deletions": 123}, "files": [{"sha": "510d9149c2a239dfe86f1d429f8f86a5f3780df0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7a71a7c4bbb2041be244646acec0b2a363bc9282", "patch": "@@ -1,3 +1,65 @@\n+2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem.adb (Analyze): Diagnose an illegal iterated component\n+\tassociation.\n+\t* sem_util.ads, sem_util.adb\n+\t(Diagnose_Iterated_Component_Association): New routine.\n+\n+2017-04-27  Bob Duff  <duff@adacore.com>\n+\n+\t* adaint.c (__gnat_get_current_dir): Return 0 in length if\n+\tgetcwd fails.\n+\t* a-direct.adb, g-dirope.adb, osint.adb, s-os_lib.adb: Raise\n+\texception if getcwd failed.\n+\n+2017-04-27  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_dbug.adb, exp_dbug.ads (Get_External_Name): Prefix ghost\n+\tentities with special prefix.\n+\n+2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* debug.adb Change the documentation of switch -gnatd.s.\n+\t* exp_ch7.adb (Make_Transient_Block): Transient blocks do not need\n+\tto manage the secondary stack when an enclosing scope already\n+\tperforms this functionality (aka relaxed management). Switch\n+\t-gnatd.s may be used to force strict management in which case\n+\tthe block will manage the secondary stack unconditionally. Add\n+\ta guard to stop the traversal when encountering a package or a\n+\tsubprogram scope.\n+\n+2017-04-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Call): Refine further the handling of\n+\tlimited views of return types in function calls. If the function\n+\tthat returns a limited view appears in the current unit,\n+\twe do not replace its type by the non-limited view because\n+\tthis transformation is performed int the back-end. However,\n+\tthe type of the call itself must be the non-limited view, to\n+\tprevent spurious resolution errors.\n+\n+2017-04-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo,ads, einfo.adb (Class_Wide_Preconds, Class_Wide_Postconds):\n+\tRemoved, proposed implementation using generics for class-wide\n+\tpreconditions proved impractical.\n+\t(Class_Wide_Clone): New attribute of subprogram. Designates\n+\tsubprogram created for primitive operations with class-wide\n+\tpre/postconditions that contain calls to other primitives. The\n+\tclone holds the body of the original primitive, but the\n+\tpre/postonditions do not apply to it. The original body is\n+\trewritten as a wrapper for a call to the clone.\n+\t(Is_Class_Wide_Clone): New flag to identify a Class_Wide_Clone. If\n+\tthe flag is set, no code for the corresponding pre/postconditions\n+\tis inserted into its body.\n+\n+2017-04-27  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_prag.adb, par-prag.adb, sem_ch13.adb: Ignore\n+\tScalar_Storage_Order if -gnatI is given.\n+\t* sem_prag.adb (Analyze_Pragma): Ignore\n+\tDefault_Scalar_Storage_Order if -gnatI is given.\n+\n 2017-04-27  Claire Dross  <dross@adacore.com>\n \n \t* a-cofuba.ads (Add): Take as an additional input parameter"}, {"sha": "010daf62a520cce63c0a7aa91fad8b22d32f3c43", "filename": "gcc/ada/a-direct.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fa-direct.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fa-direct.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-direct.adb?ref=7a71a7c4bbb2041be244646acec0b2a363bc9282", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -528,6 +528,10 @@ package body Ada.Directories is\n    begin\n       Local_Get_Current_Dir (Buffer'Address, Path_Len'Address);\n \n+      if Path_Len = 0 then\n+         raise Use_Error with \"current directory does not exist\";\n+      end if;\n+\n       --  We need to resolve links because of RM A.16(47), which requires\n       --  that we not return alternative names for files.\n "}, {"sha": "b1da3e25dd22c03fe7ec1dd9a1a0afefa69bcc6c", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=7a71a7c4bbb2041be244646acec0b2a363bc9282", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2015, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2017, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -613,7 +613,16 @@ __gnat_get_current_dir (char *dir, int *length)\n   WS2SC (dir, wdir, GNAT_MAX_PATH_LEN);\n \n #else\n-   getcwd (dir, *length);\n+   char* result = getcwd (dir, *length);\n+   /* If the current directory does not exist, set length = 0\n+      to indicate error. That can't happen on windows, where\n+      you can't delete a directory if it is the current\n+      directory of some process. */\n+   if (!result)\n+     {\n+       *length = 0;\n+       return;\n+     }\n #endif\n \n    *length = strlen (dir);"}, {"sha": "46f19ca2e0621dd701cea4bc32af56793453e66d", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=7a71a7c4bbb2041be244646acec0b2a363bc9282", "patch": "@@ -109,7 +109,7 @@ package body Debug is\n    --  d.p  Use original Ada 95 semantics for Bit_Order (disable AI95-0133)\n    --  d.q  Suppress optimizations on imported 'in'\n    --  d.r  Enable OK_To_Reorder_Components in non-variant records\n-   --  d.s  Minimize secondary stack Mark and Release calls\n+   --  d.s  Strict secondary stack management\n    --  d.t  Disable static allocation of library level dispatch tables\n    --  d.u  Enable Modify_Tree_For_C (update tree for c)\n    --  d.v  Enable OK_To_Reorder_Components in variant records\n@@ -572,6 +572,11 @@ package body Debug is\n    --  d.r  Forces the flag OK_To_Reorder_Components to be set in all record\n    --       base types that have no discriminants.\n \n+   --  d.s  The compiler no longer attempts to optimize the calls to secondary\n+   --       stack management routines SS_Mark and SS_Release. As a result, each\n+   --       transient block tasked with secondary stack management will fulfill\n+   --       its role unconditionally.\n+\n    --  d.s  The compiler does not generate calls to secondary stack management\n    --       routines SS_Mark and SS_Release for a transient block when there is\n    --       an enclosing scoping construct which already manages the secondary"}, {"sha": "452473b241a90ad88c7675a065c4b142852030ca", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 21, "deletions": 34, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=7a71a7c4bbb2041be244646acec0b2a363bc9282", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -272,10 +272,7 @@ package body Einfo is\n \n    --    Validated_Object                Node36\n \n-   --    Class_Wide_Preconds             List38\n-\n-   --    Class_Wide_Postconds            List39\n-\n+   --    Class_Wide_Clone                Node38\n    --    SPARK_Pragma                    Node40\n \n    --    Original_Protected_Subprogram   Node41\n@@ -621,7 +618,7 @@ package body Einfo is\n \n    --    Has_Private_Extension           Flag300\n    --    Ignore_SPARK_Mode_Pragmas       Flag301\n-   --    (unused)                        Flag302\n+   --    Is_Class_Wide_Clone             Flag302\n    --    (unused)                        Flag303\n    --    (unused)                        Flag304\n    --    (unused)                        Flag305\n@@ -873,17 +870,11 @@ package body Einfo is\n       return Flag31 (Id);\n    end Checks_May_Be_Suppressed;\n \n-   function Class_Wide_Postconds (Id : E) return S is\n-   begin\n-      pragma Assert (Is_Subprogram (Id));\n-      return List39 (Id);\n-   end Class_Wide_Postconds;\n-\n-   function Class_Wide_Preconds (Id : E) return S is\n+   function Class_Wide_Clone (Id : E) return E is\n    begin\n       pragma Assert (Is_Subprogram (Id));\n-      return List38 (Id);\n-   end Class_Wide_Preconds;\n+      return Node38 (Id);\n+   end Class_Wide_Clone;\n \n    function Class_Wide_Type (Id : E) return E is\n    begin\n@@ -2141,6 +2132,11 @@ package body Einfo is\n       return Flag73 (Id);\n    end Is_Child_Unit;\n \n+   function Is_Class_Wide_Clone (Id : E) return B is\n+   begin\n+      return Flag302 (Id);\n+   end Is_Class_Wide_Clone;\n+\n    function Is_Class_Wide_Equivalent_Type (Id : E) return B is\n    begin\n       return Flag35 (Id);\n@@ -3958,17 +3954,11 @@ package body Einfo is\n       Set_Flag31 (Id, V);\n    end Set_Checks_May_Be_Suppressed;\n \n-   procedure Set_Class_Wide_Preconds (Id : E; V : S) is\n-   begin\n-      pragma Assert (Is_Subprogram (Id));\n-      Set_List38 (Id, V);\n-   end Set_Class_Wide_Preconds;\n-\n-   procedure Set_Class_Wide_Postconds (Id : E; V : S) is\n+   procedure Set_Class_Wide_Clone (Id : E; V : E) is\n    begin\n       pragma Assert (Is_Subprogram (Id));\n-      Set_List39 (Id, V);\n-   end Set_Class_Wide_Postconds;\n+      Set_Node38 (Id, V);\n+   end Set_Class_Wide_Clone;\n \n    procedure Set_Class_Wide_Type (Id : E; V : E) is\n    begin\n@@ -5266,6 +5256,11 @@ package body Einfo is\n       Set_Flag73 (Id, V);\n    end Set_Is_Child_Unit;\n \n+   procedure Set_Is_Class_Wide_Clone (Id : E; V : B := True) is\n+   begin\n+      Set_Flag302 (Id, V);\n+   end Set_Is_Class_Wide_Clone;\n+\n    procedure Set_Is_Class_Wide_Equivalent_Type (Id : E; V : B := True) is\n    begin\n       Set_Flag35 (Id, V);\n@@ -10982,11 +10977,8 @@ package body Einfo is\n    procedure Write_Field38_Name (Id : Entity_Id) is\n    begin\n       case Ekind (Id) is\n-         when E_Function\n-            | E_Procedure\n-         =>\n-            Write_Str (\"Class_Wide_Preconditions\");\n-\n+         when E_Function | E_Procedure =>\n+            Write_Str (\"class-wide clone\");\n          when others =>\n             Write_Str (\"Field38??\");\n       end case;\n@@ -10999,11 +10991,6 @@ package body Einfo is\n    procedure Write_Field39_Name (Id : Entity_Id) is\n    begin\n       case Ekind (Id) is\n-         when E_Function\n-            | E_Procedure\n-         =>\n-            Write_Str (\"Class_Wide_Postcondition\");\n-\n          when others =>\n             Write_Str (\"Field39??\");\n       end case;"}, {"sha": "d403928e2994f96ed0f0338820b7ed30f4905b8c", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=7a71a7c4bbb2041be244646acec0b2a363bc9282", "patch": "@@ -625,16 +625,12 @@ package Einfo is\n --       tables must be consulted to determine if there actually is an active\n --       Suppress or Unsuppress pragma that applies to the entity.\n \n---    Class_Wide_Preconds (List38)\n---       Defined on subprograms. Holds the list of class-wide precondition\n---       functions inherited from ancestors. Each such function is an\n---       instantiation of the generic function generated from an explicit\n---       aspect specification for a class-wide precondition. A type is an\n---       ancestor of itself, and therefore a root type has such an instance\n---       on its own list.\n-\n---    Class_Wide_Postconds (List39)\n---       Ditto for class-wide postconditions.\n+--    Class_Wide_Clone (Node38)\n+--       Defined on subprogram entities. Set if the subprogram has a class-wide\n+--       ore- or postcondition, and the expression contains calls to other\n+--       primitive funtions of the type. Used to implement properly the\n+--       semantics of inherited operations whose class-wide condition may\n+--       be different from that of the ancestor (See AI012-0195).\n \n --    Class_Wide_Type (Node9)\n --       Defined in all type entities. For a tagged type or subtype, returns\n@@ -2360,6 +2356,12 @@ package Einfo is\n --       Defined in all entities. Set only for defining entities of program\n --       units that are child units (but False for subunits).\n \n+--    Is_Class_Wide_Clone (Flag302)\n+--       Defined on subprogram entities. Set for subprograms built in order\n+--       to implement properly the inheritance of class-wide pre- or post-\n+--       conditions when the condition contains calls to other primitives\n+--       of the ancestor type. Used to implement AI12-0195.\n+\n --    Is_Class_Wide_Equivalent_Type (Flag35)\n --       Defined in record types and subtypes. Set to True, if the type acts\n --       as a class-wide equivalent type, i.e. the Equivalent_Type field of\n@@ -6045,8 +6047,7 @@ package Einfo is\n    --    Linker_Section_Pragma               (Node33)\n    --    Contract                            (Node34)\n    --    Import_Pragma                       (Node35)   (non-generic case only)\n-   --    Class_Wide_Preconds                 (List38)\n-   --    Class_Wide_Postconds                (List39)\n+   --    Class_Wide_Clone                    (Node38)\n    --    SPARK_Pragma                        (Node40)\n    --    Original_Protected_Subprogram       (Node41)\n    --    Body_Needed_For_SAL                 (Flag40)\n@@ -6362,8 +6363,7 @@ package Einfo is\n    --    Linker_Section_Pragma               (Node33)\n    --    Contract                            (Node34)\n    --    Import_Pragma                       (Node35)   (non-generic case only)\n-   --    Class_Wide_Preconds                 (List38)\n-   --    Class_Wide_Postconds                (List39)\n+   --    Class_Wide_Clone                    (Node38)\n    --    SPARK_Pragma                        (Node40)\n    --    Original_Protected_Subprogram       (Node41)\n    --    Body_Needed_For_SAL                 (Flag40)\n@@ -6926,8 +6926,7 @@ package Einfo is\n    function Can_Never_Be_Null                   (Id : E) return B;\n    function Can_Use_Internal_Rep                (Id : E) return B;\n    function Checks_May_Be_Suppressed            (Id : E) return B;\n-   function Class_Wide_Postconds                (Id : E) return S;\n-   function Class_Wide_Preconds                 (Id : E) return S;\n+   function Class_Wide_Clone                     (Id : E) return E;\n    function Class_Wide_Type                     (Id : E) return E;\n    function Cloned_Subtype                      (Id : E) return E;\n    function Component_Alignment                 (Id : E) return C;\n@@ -7143,6 +7142,7 @@ package Einfo is\n    function Is_Character_Type                   (Id : E) return B;\n    function Is_Checked_Ghost_Entity             (Id : E) return B;\n    function Is_Child_Unit                       (Id : E) return B;\n+   function Is_Class_Wide_Clone                 (Id : E) return B;\n    function Is_Class_Wide_Equivalent_Type       (Id : E) return B;\n    function Is_Compilation_Unit                 (Id : E) return B;\n    function Is_Completely_Hidden                (Id : E) return B;\n@@ -7615,8 +7615,7 @@ package Einfo is\n    procedure Set_Can_Never_Be_Null               (Id : E; V : B := True);\n    procedure Set_Can_Use_Internal_Rep            (Id : E; V : B := True);\n    procedure Set_Checks_May_Be_Suppressed        (Id : E; V : B := True);\n-   procedure Set_Class_Wide_Postconds            (Id : E; V : S);\n-   procedure Set_Class_Wide_Preconds             (Id : E; V : S);\n+   procedure Set_Class_Wide_Clone                (Id : E; V : E);\n    procedure Set_Class_Wide_Type                 (Id : E; V : E);\n    procedure Set_Cloned_Subtype                  (Id : E; V : E);\n    procedure Set_Component_Alignment             (Id : E; V : C);\n@@ -7828,6 +7827,7 @@ package Einfo is\n    procedure Set_Is_Character_Type               (Id : E; V : B := True);\n    procedure Set_Is_Checked_Ghost_Entity         (Id : E; V : B := True);\n    procedure Set_Is_Child_Unit                   (Id : E; V : B := True);\n+   procedure Set_Is_Class_Wide_Clone             (Id : E; V : B := True);\n    procedure Set_Is_Class_Wide_Equivalent_Type   (Id : E; V : B := True);\n    procedure Set_Is_Compilation_Unit             (Id : E; V : B := True);\n    procedure Set_Is_Completely_Hidden            (Id : E; V : B := True);\n@@ -8421,8 +8421,7 @@ package Einfo is\n    pragma Inline (Can_Never_Be_Null);\n    pragma Inline (Can_Use_Internal_Rep);\n    pragma Inline (Checks_May_Be_Suppressed);\n-   pragma Inline (Class_Wide_Preconds);\n-   pragma Inline (Class_Wide_Postconds);\n+   pragma Inline (Class_Wide_Clone);\n    pragma Inline (Class_Wide_Type);\n    pragma Inline (Cloned_Subtype);\n    pragma Inline (Component_Bit_Offset);\n@@ -8634,6 +8633,7 @@ package Einfo is\n    pragma Inline (Is_Character_Type);\n    pragma Inline (Is_Checked_Ghost_Entity);\n    pragma Inline (Is_Child_Unit);\n+   pragma Inline (Is_Class_Wide_Clone);\n    pragma Inline (Is_Class_Wide_Equivalent_Type);\n    pragma Inline (Is_Class_Wide_Type);\n    pragma Inline (Is_Compilation_Unit);\n@@ -8946,8 +8946,7 @@ package Einfo is\n    pragma Inline (Set_Can_Never_Be_Null);\n    pragma Inline (Set_Can_Use_Internal_Rep);\n    pragma Inline (Set_Checks_May_Be_Suppressed);\n-   pragma Inline (Set_Class_Wide_Postconds);\n-   pragma Inline (Set_Class_Wide_Preconds);\n+   pragma Inline (Set_Class_Wide_Clone);\n    pragma Inline (Set_Class_Wide_Type);\n    pragma Inline (Set_Cloned_Subtype);\n    pragma Inline (Set_Component_Bit_Offset);\n@@ -9150,6 +9149,7 @@ package Einfo is\n    pragma Inline (Set_Is_Character_Type);\n    pragma Inline (Set_Is_Checked_Ghost_Entity);\n    pragma Inline (Set_Is_Child_Unit);\n+   pragma Inline (Set_Is_Class_Wide_Clone);\n    pragma Inline (Set_Is_Class_Wide_Equivalent_Type);\n    pragma Inline (Set_Is_Compilation_Unit);\n    pragma Inline (Set_Is_Completely_Hidden);"}, {"sha": "397bf1a2b7300ee85deebf091adcb49f3b2e4b81", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 46, "deletions": 32, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=7a71a7c4bbb2041be244646acec0b2a363bc9282", "patch": "@@ -8275,31 +8275,27 @@ package body Exp_Ch7 is\n \n       function Manages_Sec_Stack (Id : Entity_Id) return Boolean is\n       begin\n-         --  An exception handler with a choice parameter utilizes a dummy\n-         --  block to provide a declarative region. Such a block should not be\n-         --  considered because it never manifests in the tree and can never\n-         --  release the secondary stack.\n-\n-         if Ekind (Id) = E_Block\n-           and then Uses_Sec_Stack (Id)\n-           and then not Is_Exception_Handler (Id)\n-         then\n-            return True;\n+         case Ekind (Id) is\n \n-         --  Loops are intentionally excluded because they undergo special\n-         --  treatment, see Establish_Transient_Scope.\n+            --  An exception handler with a choice parameter utilizes a dummy\n+            --  block to provide a declarative region. Such a block should not\n+            --  be considered because it never manifests in the tree and can\n+            --  never release the secondary stack.\n \n-         elsif Ekind_In (Id, E_Entry,\n-                             E_Entry_Family,\n-                             E_Function,\n-                             E_Procedure)\n-           and then Uses_Sec_Stack (Id)\n-         then\n-            return True;\n+            when E_Block =>\n+               return\n+                 Uses_Sec_Stack (Id) and then not Is_Exception_Handler (Id);\n \n-         else\n-            return False;\n-         end if;\n+            when E_Entry\n+               | E_Entry_Family\n+               | E_Function\n+               | E_Procedure\n+            =>\n+               return Uses_Sec_Stack (Id);\n+\n+            when others =>\n+               return False;\n+         end case;\n       end Manages_Sec_Stack;\n \n       --  Local variables\n@@ -8326,14 +8322,11 @@ package body Exp_Ch7 is\n \n          Scop := Scope (Trans_Id);\n          while Present (Scop) loop\n-            if Scop = Standard_Standard then\n-               exit;\n \n-            --  The transient block must manage the secondary stack when the\n-            --  block appears within a loop in order to reclaim the memory at\n-            --  each iteration.\n+            --  It should not be possible to reach Standard without hitting one\n+            --  of the other cases first unless Standard was manually pushed.\n \n-            elsif Ekind (Scop) = E_Loop then\n+            if Scop = Standard_Standard then\n                exit;\n \n             --  The transient block is within a function which returns on the\n@@ -8351,15 +8344,36 @@ package body Exp_Ch7 is\n                Set_Uses_Sec_Stack (Trans_Id, False);\n                exit;\n \n-            --  When requested, the transient block does not need to manage the\n-            --  secondary stack when there exists an enclosing block, entry,\n-            --  entry family, function, or a procedure which already does that.\n+            --  The transient block must manage the secondary stack when the\n+            --  block appears within a loop in order to reclaim the memory at\n+            --  each iteration.\n+\n+            elsif Ekind (Scop) = E_Loop then\n+               exit;\n+\n+            --  The transient block does not need to manage the secondary stack\n+            --  when there is an enclosing construct which already does that.\n             --  This optimization saves on SS_Mark and SS_Release calls but may\n             --  allow objects to live a little longer than required.\n \n-            elsif Debug_Flag_Dot_S and then Manages_Sec_Stack (Scop) then\n+            --  The transient block must manage the secondary stack when switch\n+            --  -gnatd.s (strict management) is in effect.\n+\n+            elsif Manages_Sec_Stack (Scop) and then not Debug_Flag_Dot_S then\n                Set_Uses_Sec_Stack (Trans_Id, False);\n                exit;\n+\n+            --  Prevent the search from going too far because transient blocks\n+            --  are bounded by packages and subprogram scopes.\n+\n+            elsif Ekind_In (Scop, E_Entry,\n+                                  E_Entry_Family,\n+                                  E_Function,\n+                                  E_Package,\n+                                  E_Procedure,\n+                                  E_Subprogram_Body)\n+            then\n+               exit;\n             end if;\n \n             Scop := Scope (Scop);"}, {"sha": "dc1f884d52517460054a8d9cd0468a33abc16d86", "filename": "gcc/ada/exp_dbug.adb", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fexp_dbug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fexp_dbug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.adb?ref=7a71a7c4bbb2041be244646acec0b2a363bc9282", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1996-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -892,6 +892,27 @@ package body Exp_Dbug is\n          Add_Str_To_Name_Buffer (Suffix);\n       end if;\n \n+      --  Add a special prefix to distinguish Ghost entities. In Ignored Ghost\n+      --  mode, these entities should not leak in the \"living\" space and they\n+      --  should be removed by the compiler in a post-processing pass. Thus,\n+      --  the prefix allows anyone to check that the final executable indeed\n+      --  does not contain such entities, in such a case. Do not insert this\n+      --  prefix for compilation units, whose name is used as a basis for the\n+      --  name of the generated elaboration procedure and (when appropriate)\n+      --  the executable produced. Only insert this prefix once, for Ghost\n+      --  entities declared inside other Ghost entities. Three leading\n+      --  underscores are used so that \"___ghost_\" is a unique substring of\n+      --  names produced for Ghost entities, while \"__ghost_\" can appear in\n+      --  names of entities inside a child/local package called \"Ghost\".\n+\n+      if Is_Ghost_Entity (E)\n+        and then not Is_Compilation_Unit (E)\n+        and then (Name_Len < 9\n+                   or else Name_Buffer (1 .. 9) /= \"___ghost_\")\n+      then\n+         Insert_Str_In_Name_Buffer (\"___ghost_\", 1);\n+      end if;\n+\n       Name_Buffer (Name_Len + 1) := ASCII.NUL;\n    end Get_External_Name;\n "}, {"sha": "53ef033b10474f24ca9eae98df49acdae9af955a", "filename": "gcc/ada/exp_dbug.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fexp_dbug.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fexp_dbug.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.ads?ref=7a71a7c4bbb2041be244646acec0b2a363bc9282", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1996-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -76,6 +76,12 @@ package Exp_Dbug is\n    --  qualification for such entities. In particular this means that direct\n    --  local variables of a procedure are not qualified.\n \n+   --  For Ghost entities, the encoding adds a prefix \"___ghost_\" to aid the\n+   --  detection of leaks of Ignored Ghost entities in the \"living\" space.\n+   --  Ignored Ghost entities and any code associated with them should be\n+   --  removed by the compiler in a post-processing pass. As a result,\n+   --  object files should not contain any occurrences of this prefix.\n+\n    --  As an example of the local name convention, consider a procedure V.W\n    --  with a local variable X, and a nested block Y containing an entity Z.\n    --  The fully qualified names of the entities X and Z are:"}, {"sha": "6ec4718f409f1ab761b7d099b752970d4bea9032", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=7a71a7c4bbb2041be244646acec0b2a363bc9282", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -162,19 +162,23 @@ package body Exp_Prag is\n    ---------------------\n \n    procedure Expand_N_Pragma (N : Node_Id) is\n-      Pname : constant Name_Id := Pragma_Name (N);\n+      Pname   : constant Name_Id   := Pragma_Name (N);\n+      Prag_Id : constant Pragma_Id := Get_Pragma_Id (Pname);\n \n    begin\n       --  Rewrite pragma ignored by Ignore_Pragma to null statement, so that\n-      --  the back end or the expander here does not get overenthusiastic and\n-      --  start processing such a pragma!\n+      --  the back end doesn't see it. The same goes for pragma\n+      --  Default_Scalar_Storage_Order if the -gnatI switch was given.\n \n-      if Should_Ignore_Pragma_Sem (N) then\n+      if Should_Ignore_Pragma_Sem (N)\n+        or else (Prag_Id = Pragma_Default_Scalar_Storage_Order\n+                   and then Ignore_Rep_Clauses)\n+      then\n          Rewrite (N, Make_Null_Statement (Sloc (N)));\n          return;\n       end if;\n \n-      case Get_Pragma_Id (Pname) is\n+      case Prag_Id is\n \n          --  Pragmas requiring special expander action\n "}, {"sha": "bc34202970ad154b938fa0c65196aaed72e13c27", "filename": "gcc/ada/g-dirope.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fg-dirope.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fg-dirope.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-dirope.adb?ref=7a71a7c4bbb2041be244646acec0b2a363bc9282", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1998-2014, AdaCore                     --\n+--                     Copyright (C) 1998-2017, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,6 +29,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Ada.IO_Exceptions;\n with Ada.Characters.Handling;\n with Ada.Strings.Fixed;\n \n@@ -573,6 +574,11 @@ package body GNAT.Directory_Operations is\n    begin\n       Local_Get_Current_Dir (Buffer'Address, Path_Len'Address);\n \n+      if Path_Len = 0 then\n+         raise Ada.IO_Exceptions.Use_Error\n+           with \"current directory does not exist\";\n+      end if;\n+\n       Last :=\n         (if Dir'Length > Path_Len then Dir'First + Path_Len - 1 else Dir'Last);\n "}, {"sha": "566a23480d38fda8f027cdb128fa9f68a5d4ce69", "filename": "gcc/ada/osint.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fosint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fosint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint.adb?ref=7a71a7c4bbb2041be244646acec0b2a363bc9282", "patch": "@@ -1550,6 +1550,10 @@ package body Osint is\n          begin\n             Get_Current_Dir (Buffer'Address, Path_Len'Address);\n \n+            if Path_Len = 0 then\n+               raise Program_Error;\n+            end if;\n+\n             if Buffer (Path_Len) /= Directory_Separator then\n                Path_Len := Path_Len + 1;\n                Buffer (Path_Len) := Directory_Separator;"}, {"sha": "64267430240bd2f52ba5523ca139465834721172", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=7a71a7c4bbb2041be244646acec0b2a363bc9282", "patch": "@@ -292,9 +292,13 @@ begin\n       return Pragma_Node;\n    end if;\n \n-   --  Ignore pragma previously flagged by Ignore_Pragma\n+   --  Ignore pragma if Ignore_Pragma applies. Also ignore pragma\n+   --  Default_Scalar_Storage_Order if the -gnatI switch was given.\n \n-   if Should_Ignore_Pragma_Par (Prag_Name) then\n+   if Should_Ignore_Pragma_Par (Prag_Name)\n+     or else (Prag_Id = Pragma_Default_Scalar_Storage_Order\n+                and then Ignore_Rep_Clauses)\n+   then\n       return Pragma_Node;\n    end if;\n "}, {"sha": "da357e78ddbe70a4c72b8e5c81ebf82b7d961ab3", "filename": "gcc/ada/s-os_lib.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fs-os_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fs-os_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.adb?ref=7a71a7c4bbb2041be244646acec0b2a363bc9282", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1995-2016, AdaCore                     --\n+--                     Copyright (C) 1995-2017, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2191,6 +2191,10 @@ package body System.OS_Lib is\n             begin\n                Get_Current_Dir (Buffer'Address, Path_Len'Address);\n \n+               if Path_Len = 0 then\n+                  raise Program_Error;\n+               end if;\n+\n                if Buffer (Path_Len) /= Directory_Separator then\n                   Path_Len := Path_Len + 1;\n                   Buffer (Path_Len) := Directory_Separator;"}, {"sha": "9cde60eb1801d7e23dc13717a911838e04d20e41", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=7a71a7c4bbb2041be244646acec0b2a363bc9282", "patch": "@@ -654,6 +654,15 @@ package body Sem is\n          =>\n             null;\n \n+         --  A quantified expression with a missing \"all\" or \"some\" qualifier\n+         --  looks identical to an iterated component association. By language\n+         --  definition, the latter must be present within array aggregates. If\n+         --  this is not the case, then the iterated component association is\n+         --  really an illegal quantified expression. Diagnose this scenario.\n+\n+         when N_Iterated_Component_Association =>\n+            Diagnose_Iterated_Component_Association (N);\n+\n          --  For the remaining node types, we generate compiler abort, because\n          --  these nodes are always analyzed within the Sem_Chn routines and\n          --  there should never be a case of making a call to the main Analyze\n@@ -704,7 +713,6 @@ package body Sem is\n             | N_Function_Specification\n             | N_Generic_Association\n             | N_Index_Or_Discriminant_Constraint\n-            | N_Iterated_Component_Association\n             | N_Iteration_Scheme\n             | N_Mod_Clause\n             | N_Modular_Type_Definition"}, {"sha": "6ecb12760f47aa4d7073903c894f7b8cc2cffb30", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=7a71a7c4bbb2041be244646acec0b2a363bc9282", "patch": "@@ -4670,8 +4670,10 @@ package body Sem_Ch13 is\n             when Attribute_Alignment\n                | Attribute_Bit_Order\n                | Attribute_Component_Size\n+               | Attribute_Default_Scalar_Storage_Order\n                | Attribute_Machine_Radix\n                | Attribute_Object_Size\n+               | Attribute_Scalar_Storage_Order\n                | Attribute_Size\n                | Attribute_Small\n                | Attribute_Stream_Size"}, {"sha": "92a0059523f3bb0cb3e9ac590df517a315b09dba", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=7a71a7c4bbb2041be244646acec0b2a363bc9282", "patch": "@@ -3427,13 +3427,14 @@ package body Sem_Prag is\n \n    procedure Analyze_Pragma (N : Node_Id) is\n       Loc     : constant Source_Ptr := Sloc (N);\n-      Prag_Id : Pragma_Id;\n \n       Pname : Name_Id := Pragma_Name (N);\n       --  Name of the source pragma, or name of the corresponding aspect for\n       --  pragmas which originate in a source aspect. In the latter case, the\n       --  name may be different from the pragma name.\n \n+      Prag_Id : constant Pragma_Id := Get_Pragma_Id (Pname);\n+\n       Pragma_Exit : exception;\n       --  This exception is used to exit pragma processing completely. It\n       --  is used when an error is detected, and no further processing is\n@@ -10529,9 +10530,13 @@ package body Sem_Prag is\n \n       Check_Restriction_No_Use_Of_Pragma (N);\n \n-      --  Ignore pragma if Ignore_Pragma applies\n+      --  Ignore pragma if Ignore_Pragma applies. Also ignore pragma\n+      --  Default_Scalar_Storage_Order if the -gnatI switch was given.\n \n-      if Should_Ignore_Pragma_Sem (N) then\n+      if Should_Ignore_Pragma_Sem (N)\n+        or else (Prag_Id = Pragma_Default_Scalar_Storage_Order\n+                   and then Ignore_Rep_Clauses)\n+      then\n          return;\n       end if;\n \n@@ -10557,7 +10562,6 @@ package body Sem_Prag is\n \n       --  Here to start processing for recognized pragma\n \n-      Prag_Id := Get_Pragma_Id (Pname);\n       Pname   := Original_Aspect_Pragma_Name (N);\n \n       --  Capture setting of Opt.Uneval_Old"}, {"sha": "de5053c5158973f03c88f66711f8f3d920624f11", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=7a71a7c4bbb2041be244646acec0b2a363bc9282", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -6102,17 +6102,24 @@ package body Sem_Res is\n          --  If the called function is not declared in the main unit and it\n          --  returns the limited view of type then use the available view (as\n          --  is done in Try_Object_Operation) to prevent back-end confusion;\n-         --  the call must appear in a context where the nonlimited view is\n-         --  available. If the called function is in the extended main unit\n-         --  then no action is needed, because the back end handles this case.\n-\n-         if not In_Extended_Main_Code_Unit (Nam)\n-           and then From_Limited_With (Etype (Nam))\n+         --  for the function entity itself. The call must appear in a context\n+         --  where the nonlimited view is available. If the function entity is\n+         --  in the extended main unit then no action is needed, because the\n+         --  back end handles this case. In either case the type of the call\n+         --  is the nonlimited view.\n+\n+         if From_Limited_With (Etype (Nam))\n+           and then Present (Available_View (Etype (Nam)))\n          then\n-            Set_Etype (Nam, Available_View (Etype (Nam)));\n-         end if;\n+            Set_Etype (N, Available_View (Etype (Nam)));\n \n-         Set_Etype (N, Etype (Nam));\n+            if not In_Extended_Main_Code_Unit (Nam) then\n+               Set_Etype (Nam, Available_View (Etype (Nam)));\n+            end if;\n+\n+         else\n+            Set_Etype (N, Etype (Nam));\n+         end if;\n       end if;\n \n       --  In the case where the call is to an overloaded subprogram, Analyze"}, {"sha": "00dfd6d99fe4a5f37a5691a0f9cff6e3fa5a26d5", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=7a71a7c4bbb2041be244646acec0b2a363bc9282", "patch": "@@ -6023,12 +6023,52 @@ package body Sem_Util is\n       end if;\n    end Designate_Same_Unit;\n \n-   ------------------------------------------\n-   -- function Dynamic_Accessibility_Level --\n-   ------------------------------------------\n+   ---------------------------------------------\n+   -- Diagnose_Iterated_Component_Association --\n+   ---------------------------------------------\n+\n+   procedure Diagnose_Iterated_Component_Association (N : Node_Id) is\n+      Def_Id : constant Entity_Id := Defining_Identifier (N);\n+      Aggr   : Node_Id;\n+\n+   begin\n+      --  Determine whether the iterated component association appears within\n+      --  an aggregate. If this is the case, raise Program_Error because the\n+      --  iterated component association cannot be left in the tree as is and\n+      --  must always be processed by the related aggregate.\n+\n+      Aggr := N;\n+      while Present (Aggr) loop\n+         if Nkind (Aggr) = N_Aggregate then\n+            raise Program_Error;\n+\n+         --  Prevent the search from going too far\n+\n+         elsif Is_Body_Or_Package_Declaration (Aggr) then\n+            exit;\n+         end if;\n+\n+         Aggr := Parent (Aggr);\n+      end loop;\n+\n+      --  At this point it is known that the iterated component association is\n+      --  not within an aggregate. This is really a quantified expression with\n+      --  a missing \"all\" or \"some\" quantifier.\n+\n+      Error_Msg_N (\"missing quantifier\", Def_Id);\n+\n+      --  Rewrite the iterated component association as True to prevent any\n+      --  cascaded errors.\n+\n+      Rewrite (N, New_Occurrence_Of (Standard_True, Sloc (N)));\n+      Analyze (N);\n+   end Diagnose_Iterated_Component_Association;\n+\n+   ---------------------------------\n+   -- Dynamic_Accessibility_Level --\n+   ---------------------------------\n \n    function Dynamic_Accessibility_Level (Expr : Node_Id) return Node_Id is\n-      E : Entity_Id;\n       Loc : constant Source_Ptr := Sloc (Expr);\n \n       function Make_Level_Literal (Level : Uint) return Node_Id;\n@@ -6041,11 +6081,16 @@ package body Sem_Util is\n \n       function Make_Level_Literal (Level : Uint) return Node_Id is\n          Result : constant Node_Id := Make_Integer_Literal (Loc, Level);\n+\n       begin\n          Set_Etype (Result, Standard_Natural);\n          return Result;\n       end Make_Level_Literal;\n \n+      --  Local variables\n+\n+      E : Entity_Id;\n+\n    --  Start of processing for Dynamic_Accessibility_Level\n \n    begin"}, {"sha": "761814645aaaea6c7b03f3a10a47c006aef5f826", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a71a7c4bbb2041be244646acec0b2a363bc9282/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=7a71a7c4bbb2041be244646acec0b2a363bc9282", "patch": "@@ -545,6 +545,10 @@ package Sem_Util is\n    --  these names is supposed to be a selected component name, an expanded\n    --  name, a defining program unit name or an identifier.\n \n+   procedure Diagnose_Iterated_Component_Association (N : Node_Id);\n+   --  Emit an error if iterated component association N is actually an illegal\n+   --  quantified expression lacking a quantifier.\n+\n    function Dynamic_Accessibility_Level (Expr : Node_Id) return Node_Id;\n    --  Expr should be an expression of an access type. Builds an integer\n    --  literal except in cases involving anonymous access types where"}]}