{"sha": "8c9a36b7cac01afb70ca41c1435efb2077202035", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM5YTM2YjdjYWMwMWFmYjcwY2E0MWMxNDM1ZWZiMjA3NzIwMjAzNQ==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2014-08-08T05:31:44Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2014-08-08T05:31:44Z"}, "message": "calls.c (precompute_arguments): Check promoted_for_signed_and_unsigned_p and set the promoted mode.\n\ngcc\n2014-08-08  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\t* calls.c (precompute_arguments): Check\n\t promoted_for_signed_and_unsigned_p and set the promoted mode.\n\t(promoted_for_signed_and_unsigned_p): New function.\n\t(expand_expr_real_1): Check promoted_for_signed_and_unsigned_p\n\tand set the promoted mode.\n\t* expr.h (promoted_for_signed_and_unsigned_p): New function definition.\n\t* cfgexpand.c (expand_gimple_stmt_1): Call emit_move_insn if\n\tSUBREG is promoted with SRP_SIGNED_AND_UNSIGNED.\n\ngcc/testsuite\n2014-08-08  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\t* gcc.dg/zero_sign_ext_test.c: New test.\n\nFrom-SVN: r213750", "tree": {"sha": "564b60254e3780325da325e3491a46fca2b8c908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/564b60254e3780325da325e3491a46fca2b8c908"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c9a36b7cac01afb70ca41c1435efb2077202035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c9a36b7cac01afb70ca41c1435efb2077202035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c9a36b7cac01afb70ca41c1435efb2077202035", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c9a36b7cac01afb70ca41c1435efb2077202035/comments", "author": null, "committer": null, "parents": [{"sha": "362d42dcc965c63977160984292b3429c2d15de7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/362d42dcc965c63977160984292b3429c2d15de7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/362d42dcc965c63977160984292b3429c2d15de7"}], "stats": {"total": 201, "additions": 198, "deletions": 3}, "files": [{"sha": "7980f987a0638df458738f4c95de9512090323ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9a36b7cac01afb70ca41c1435efb2077202035/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9a36b7cac01afb70ca41c1435efb2077202035/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c9a36b7cac01afb70ca41c1435efb2077202035", "patch": "@@ -1,3 +1,15 @@\n+2014-08-08  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* calls.c (precompute_arguments): Check\n+\t promoted_for_signed_and_unsigned_p and set the promoted mode.\n+\t(promoted_for_signed_and_unsigned_p): New function.\n+\t(expand_expr_real_1): Check promoted_for_signed_and_unsigned_p\n+\tand set the promoted mode.\n+\t* expr.h (promoted_for_signed_and_unsigned_p): New function definition.\n+\t* cfgexpand.c (expand_gimple_stmt_1): Call emit_move_insn if\n+\tSUBREG is promoted with SRP_SIGNED_AND_UNSIGNED.\n+\n+\n 2014-08-08  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \t* calls.c (precompute_arguments): Use new SUBREG_PROMOTED_SET"}, {"sha": "4285ec1a6f189fa7567cc3a45956248ee934b85e", "filename": "gcc/calls.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9a36b7cac01afb70ca41c1435efb2077202035/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9a36b7cac01afb70ca41c1435efb2077202035/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=8c9a36b7cac01afb70ca41c1435efb2077202035", "patch": "@@ -1484,7 +1484,10 @@ precompute_arguments (int num_actuals, struct arg_data *args)\n \t      args[i].initial_value\n \t\t= gen_lowpart_SUBREG (mode, args[i].value);\n \t      SUBREG_PROMOTED_VAR_P (args[i].initial_value) = 1;\n-\t      SUBREG_PROMOTED_SET (args[i].initial_value, args[i].unsignedp);\n+\t      if (promoted_for_signed_and_unsigned_p (args[i].tree_value, mode))\n+\t\tSUBREG_PROMOTED_SET (args[i].initial_value, SRP_SIGNED_AND_UNSIGNED);\n+\t      else\n+\t\tSUBREG_PROMOTED_SET (args[i].initial_value, args[i].unsignedp);\n \t    }\n \t}\n     }"}, {"sha": "f6da5d632f441544fdacafc266e9cf17083a825a", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9a36b7cac01afb70ca41c1435efb2077202035/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9a36b7cac01afb70ca41c1435efb2077202035/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=8c9a36b7cac01afb70ca41c1435efb2077202035", "patch": "@@ -3320,7 +3320,13 @@ expand_gimple_stmt_1 (gimple stmt)\n \t\t\t\t\t  GET_MODE (target), temp, unsignedp);\n \t\t  }\n \n-\t\tconvert_move (SUBREG_REG (target), temp, unsignedp);\n+\t\tif ((SUBREG_PROMOTED_GET (target) == SRP_SIGNED_AND_UNSIGNED)\n+\t\t    && (GET_CODE (temp) == SUBREG)\n+\t\t    && (GET_MODE (target) == GET_MODE (temp))\n+\t\t    && (GET_MODE (SUBREG_REG (target)) == GET_MODE (SUBREG_REG (temp))))\n+\t\t  emit_move_insn (SUBREG_REG (target), SUBREG_REG (temp));\n+\t\telse\n+\t\t  convert_move (SUBREG_REG (target), temp, unsignedp);\n \t      }\n \t    else if (nontemporal && emit_storent_insn (target, temp))\n \t      ;"}, {"sha": "58b87ba7ed7eee156b9730b61679af946694e8df", "filename": "gcc/expr.c", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9a36b7cac01afb70ca41c1435efb2077202035/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9a36b7cac01afb70ca41c1435efb2077202035/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=8c9a36b7cac01afb70ca41c1435efb2077202035", "patch": "@@ -68,6 +68,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-address.h\"\n #include \"cfgexpand.h\"\n #include \"builtins.h\"\n+#include \"tree-ssa.h\"\n \n #ifndef STACK_PUSH_CODE\n #ifdef STACK_GROWS_DOWNWARD\n@@ -9224,6 +9225,35 @@ expand_expr_real_2 (sepops ops, rtx target, enum machine_mode tmode,\n }\n #undef REDUCE_BIT_FIELD\n \n+/* Return TRUE if value in SSA is zero and sign extended for wider mode MODE\n+   using value range information stored.  Return FALSE otherwise.\n+\n+   This is used to check if SUBREG is zero and sign extended and to set\n+   promoted mode SRP_SIGNED_AND_UNSIGNED to SUBREG.  */\n+\n+bool\n+promoted_for_signed_and_unsigned_p (tree ssa, enum machine_mode mode)\n+{\n+  wide_int min, max;\n+\n+  if (ssa == NULL_TREE\n+      || TREE_CODE (ssa) != SSA_NAME\n+      || !INTEGRAL_TYPE_P (TREE_TYPE (ssa))\n+      || (TYPE_PRECISION (TREE_TYPE (ssa)) != GET_MODE_PRECISION (mode)))\n+    return false;\n+\n+  /* Return FALSE if value_range is not recorded for SSA.  */\n+  if (get_range_info (ssa, &min, &max) != VR_RANGE)\n+    return false;\n+\n+  /* Return true (to set SRP_SIGNED_AND_UNSIGNED to SUBREG) if MSB of the\n+     smaller mode is not set (i.e.  MSB of ssa is not set).  */\n+  if (!wi::neg_p (min, SIGNED) && !wi::neg_p(max, SIGNED))\n+    return true;\n+  else\n+    return false;\n+\n+}\n \n /* Return TRUE if expression STMT is suitable for replacement.  \n    Never consider memory loads as replaceable, because those don't ever lead \n@@ -9527,7 +9557,10 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \n \t  temp = gen_lowpart_SUBREG (mode, decl_rtl);\n \t  SUBREG_PROMOTED_VAR_P (temp) = 1;\n-\t  SUBREG_PROMOTED_SET (temp, unsignedp);\n+\t  if (promoted_for_signed_and_unsigned_p (ssa_name, mode))\n+\t    SUBREG_PROMOTED_SET (temp, SRP_SIGNED_AND_UNSIGNED);\n+\t  else\n+\t    SUBREG_PROMOTED_SET (temp, unsignedp);\n \t  return temp;\n \t}\n "}, {"sha": "a42950977b19797345369909aef3a39b52f4f5bb", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9a36b7cac01afb70ca41c1435efb2077202035/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9a36b7cac01afb70ca41c1435efb2077202035/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=8c9a36b7cac01afb70ca41c1435efb2077202035", "patch": "@@ -440,6 +440,7 @@ extern rtx expand_expr_real_1 (tree, rtx, enum machine_mode,\n \t\t\t       enum expand_modifier, rtx *, bool);\n extern rtx expand_expr_real_2 (sepops, rtx, enum machine_mode,\n \t\t\t       enum expand_modifier);\n+extern bool promoted_for_signed_and_unsigned_p (tree, enum machine_mode);\n \n /* Generate code for computing expression EXP.\n    An rtx for the computed value is returned.  The value is never null."}, {"sha": "d5343f15d13afa98805507ab45c0d518df5bc28a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9a36b7cac01afb70ca41c1435efb2077202035/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9a36b7cac01afb70ca41c1435efb2077202035/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8c9a36b7cac01afb70ca41c1435efb2077202035", "patch": "@@ -1,3 +1,7 @@\n+2014-08-08  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* gcc.dg/zero_sign_ext_test.c: New test.\n+\n 2014-08-08  Bin Cheng  <bin.cheng@arm.com>\n \n \t* gcc.dg/torture/pr61772.c: Skip lto running."}, {"sha": "6a52678f396c849b64b8e15829405a40a92a06ff", "filename": "gcc/testsuite/gcc.dg/zero_sign_ext_test.c", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9a36b7cac01afb70ca41c1435efb2077202035/gcc%2Ftestsuite%2Fgcc.dg%2Fzero_sign_ext_test.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9a36b7cac01afb70ca41c1435efb2077202035/gcc%2Ftestsuite%2Fgcc.dg%2Fzero_sign_ext_test.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fzero_sign_ext_test.c?ref=8c9a36b7cac01afb70ca41c1435efb2077202035", "patch": "@@ -0,0 +1,136 @@\n+extern void abort (void);\n+\n+/* { dg-options \"-O2\" } */\n+/* { dg-do run } */\n+\n+#define TYPE_MAX(type, sign)\t\\\n+  ((!sign) ? ((1 << (sizeof (type) * 8 - 1)) - 1) :\t\\\n+   ((1 << (sizeof (type) * 8)) - 1))\n+#define TYPE_MIN(type, sign)\t\\\n+  ((!sign) ? -(1 << (sizeof (type) * 8 - 1)) : 0)\n+\n+#define TEST_FN(NAME, ARG_TYPE, RET_TYPE, CAST_TYPE, VAL, VR_MIN, VR_MAX)\\\n+  __attribute__((noinline, noclone)) RET_TYPE\t\t\t\t\\\n+      NAME (ARG_TYPE arg){\t\t\t\t\t\t\\\n+      RET_TYPE ret = VAL;\t\t\t\t\t\t\\\n+      if (arg + 1 < VR_MIN || arg + 1 > VR_MAX) return ret;\t\t\\\n+      /* Value Range of arg at this point will be  [VR_min, VR_max].  */\\\n+      arg = arg + VAL;\t\t\t\t\t\t\t\\\n+      ret = (CAST_TYPE)arg;\t\t\t\t\t\t\\\n+      return arg;\t\t\t\t\t\t\t\\\n+  }\n+\n+/* Signed to signed conversion with value in-range.  */\n+TEST_FN (foo1, short, short, char, 1, TYPE_MIN (char, 0), TYPE_MAX (char, 0));\n+TEST_FN (foo2, short, short, char, 1, TYPE_MIN (char, 0) + 1,\\\n+\tTYPE_MAX (char, 0) - 1);\n+\n+/* Signed to signed conversion with value not in-range.  */\n+TEST_FN (foo3, short, short, char, -1, TYPE_MIN (short, 0) + 1,  100);\n+TEST_FN (foo4, short, short, char, 1, 12, TYPE_MAX (short, 0) + 1);\n+\n+/* Unsigned to unsigned conversion with value in-range.  */\n+TEST_FN (foo5, unsigned short, unsigned short, unsigned char, 1,\\\n+\tTYPE_MIN (char, 1) + 1, TYPE_MAX (char, 1) - 1);\n+TEST_FN (foo6, unsigned short, unsigned short, unsigned char, 1,\\\n+\tTYPE_MIN (char, 1), TYPE_MAX (char, 1));\n+\n+/* Unsigned to unsigned conversion with value not in-range.  */\n+TEST_FN (foo7, unsigned short, unsigned short, unsigned char, 1,\\\n+\tTYPE_MIN (short, 1) + 1, TYPE_MAX (short, 1) - 1);\n+TEST_FN (foo8, unsigned short, unsigned short, unsigned char, 1,\\\n+\tTYPE_MIN (short, 1), TYPE_MAX (short, 1));\n+\n+/* Signed to unsigned conversion with value range positive.  */\n+TEST_FN (foo9, short, short, unsigned char, -1, 1,\\\n+\tTYPE_MAX (char, 1) - 1);\n+TEST_FN (foo10, short, short, unsigned char, 1, 0,\\\n+\tTYPE_MAX (char, 1));\n+\n+/* Signed to unsigned conversion with value range negative.  */\n+TEST_FN (foo11, short, short, unsigned char, 1,\\\n+\tTYPE_MIN (char, 0) + 1, TYPE_MAX (char, 0) - 1);\n+TEST_FN (foo12, short, short, unsigned char, 1,\\\n+\tTYPE_MIN (char, 0), TYPE_MAX (char, 0));\n+\n+/* Unsigned to Signed conversion with value range in signed equiv range.  */\n+TEST_FN (foo13, unsigned short, unsigned short, char, 1,\\\n+\tTYPE_MIN (char, 1) + 1, TYPE_MAX (char, 0) - 1);\n+TEST_FN (foo14, unsigned short, unsigned short, char, 1,\\\n+\tTYPE_MIN (char, 1), TYPE_MAX (char, 0));\n+\n+/* Unsigned to Signed conversion with value range not-in signed range.  */\n+TEST_FN (foo15, unsigned short, unsigned short, char, 1,\\\n+\tTYPE_MIN (char, 1) + 1, TYPE_MAX (char, 1) - 1);\n+TEST_FN (foo16, unsigned short, unsigned short, char, 1,\\\n+\tTYPE_MIN (char, 1), TYPE_MAX (char, 1));\n+\n+int main ()\n+{\n+  /* Signed to signed conversion with value in-range.  */\n+  /* arg + 1.  */\n+  if (foo1 (-32) != -31)\n+    abort ();\n+  /* arg + 1.  */\n+  if (foo2 (32) != 33)\n+    abort ();\n+\n+  /* Signed to signed conversion with value not in-range.  */\n+  /* arg - 1.  */\n+  if (foo3 (-512) != -513)\n+    abort ();\n+  /* arg + 1.  */\n+  if (foo4 (512) != 513)\n+    abort ();\n+\n+  /* Unsigned to unsigned conversion with value in-range.  */\n+  /* arg + 1.  */\n+  if (foo5 (64) != 65)\n+    abort ();\n+  /* arg + 1.  */\n+  if (foo6 (64) != 65)\n+    abort ();\n+\n+  /* Unsigned to unsigned conversion with value not in-range.  */\n+  /* arg + 1.  */\n+  if (foo7 (512) != 513)\n+    abort ();\n+  /* arg + 1.  */\n+  if (foo8 (512) != 513)\n+    abort ();\n+\n+  /* Signed to unsigned conversion with value range positive.  */\n+  /* arg - 1.  */\n+  if (foo9 (2) != 1)\n+    abort ();\n+  /* arg + 1.  */\n+  if (foo10 (2) != 3)\n+    abort ();\n+\n+  /* Signed to unsigned conversion with value range negative.  */\n+  /* arg + 1.  */\n+  if (foo11 (-125) != -124)\n+    abort ();\n+  /* arg + 1.  */\n+  if (foo12 (-125) != -124)\n+    abort ();\n+\n+  /* Unsigned to Signed conversion with value range in signed equiv range.  */\n+  /* arg + 1.  */\n+  if (foo13 (125) != 126)\n+    abort ();\n+  /* arg + 1.  */\n+  if (foo14 (125) != 126)\n+    abort ();\n+\n+  /* Unsigned to Signed conversion with value range not-in signed range.  */\n+  /* arg + 1.  */\n+  if (foo15 (250) != 251)\n+    abort ();\n+  /* arg + 1.  */\n+  if (foo16 (250) != 251)\n+    abort ();\n+\n+  return 0;\n+}\n+"}]}