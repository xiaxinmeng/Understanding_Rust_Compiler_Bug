{"sha": "b878781346e97ade9087d5c010e29ff09492b6fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg3ODc4MTM0NmU5N2FkZTkwODdkNWMwMTBlMjlmZjA5NDkyYjZmYg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-04-24T11:49:52Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-04-24T11:49:52Z"}, "message": "re PR c/61534 (Wlogical-op should not warn when either operand comes from macro expansion)\n\n\tPR c/61534\n\t* input.h (from_macro_expansion_at): Define.\n\n\t* c-common.c (warn_logical_operator): Bail if either operand comes\n\tfrom a macro expansion.\n\n\t* c-c++-common/pr61534-1.c: New test.\n\nFrom-SVN: r222406", "tree": {"sha": "2730887c7a54380acf79d1530758243bbd147d1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2730887c7a54380acf79d1530758243bbd147d1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b878781346e97ade9087d5c010e29ff09492b6fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b878781346e97ade9087d5c010e29ff09492b6fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b878781346e97ade9087d5c010e29ff09492b6fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b878781346e97ade9087d5c010e29ff09492b6fb/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "841e98017e81d5ef253119525e8d189c031a7fa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/841e98017e81d5ef253119525e8d189c031a7fa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/841e98017e81d5ef253119525e8d189c031a7fa2"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "4bb36799a17935f329174cc9c0e71092cd3b24be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b878781346e97ade9087d5c010e29ff09492b6fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b878781346e97ade9087d5c010e29ff09492b6fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b878781346e97ade9087d5c010e29ff09492b6fb", "patch": "@@ -1,3 +1,8 @@\n+2015-04-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/61534\n+\t* input.h (from_macro_expansion_at): Define.\n+\n 2015-04-24  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* config/arm/unknown-elf.h (ASM_OUTPUT_ALIGNED_DECL_LOCAL): fix"}, {"sha": "270ef70e84839328d376b664e47c23e2e1f440ad", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b878781346e97ade9087d5c010e29ff09492b6fb/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b878781346e97ade9087d5c010e29ff09492b6fb/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b878781346e97ade9087d5c010e29ff09492b6fb", "patch": "@@ -1,3 +1,9 @@\n+2015-04-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/61534\n+\t* c-common.c (warn_logical_operator): Bail if either operand comes\n+\tfrom a macro expansion.\n+\n 2015-04-10  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n \n \tPR target/55143"}, {"sha": "b09bbb86f6f62ce0158c23b88ad67a3086a57c63", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b878781346e97ade9087d5c010e29ff09492b6fb/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b878781346e97ade9087d5c010e29ff09492b6fb/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=b878781346e97ade9087d5c010e29ff09492b6fb", "patch": "@@ -1697,6 +1697,13 @@ warn_logical_operator (location_t location, enum tree_code code, tree type,\n       && code != TRUTH_OR_EXPR)\n     return;\n \n+  /* We don't want to warn if either operand comes from a macro\n+     expansion.  ??? This doesn't work with e.g. NEGATE_EXPR yet;\n+     see PR61534.  */\n+  if (from_macro_expansion_at (EXPR_LOCATION (op_left))\n+      || from_macro_expansion_at (EXPR_LOCATION (op_right)))\n+    return;\n+\n   /* Warn if &&/|| are being used in a context where it is\n      likely that the bitwise equivalent was intended by the\n      programmer. That is, an expression such as op && MASK"}, {"sha": "93eb6ed4c32036c2127eaac04f9a6cf6b4b6a246", "filename": "gcc/input.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b878781346e97ade9087d5c010e29ff09492b6fb/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b878781346e97ade9087d5c010e29ff09492b6fb/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=b878781346e97ade9087d5c010e29ff09492b6fb", "patch": "@@ -70,6 +70,10 @@ extern location_t input_location;\n    header, but expanded in a non-system file.  */\n #define in_system_header_at(LOC) \\\n   (linemap_location_in_system_header_p (line_table, LOC))\n+/* Return a positive value if LOCATION is the locus of a token that\n+   comes from a macro expansion, O otherwise.  */\n+#define from_macro_expansion_at(LOC) \\\n+  ((linemap_location_from_macro_expansion_p (line_table, LOC)))\n \n void dump_line_table_statistics (void);\n "}, {"sha": "c493bd83109dc235e19a6da302736e28992ad445", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b878781346e97ade9087d5c010e29ff09492b6fb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b878781346e97ade9087d5c010e29ff09492b6fb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b878781346e97ade9087d5c010e29ff09492b6fb", "patch": "@@ -1,3 +1,8 @@\n+2015-04-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/61534\n+\t* c-c++-common/pr61534-1.c: New test.\n+\n 2015-04-24  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \t    Steven Bosscher <steven@gcc.gnu.org>\n "}, {"sha": "1e304f0bdf3ef0d24a0b0321dc64f2ef78c5b6a0", "filename": "gcc/testsuite/c-c++-common/pr61534-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b878781346e97ade9087d5c010e29ff09492b6fb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr61534-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b878781346e97ade9087d5c010e29ff09492b6fb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr61534-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr61534-1.c?ref=b878781346e97ade9087d5c010e29ff09492b6fb", "patch": "@@ -0,0 +1,13 @@\n+/* PR c/61534 */\n+/* { dg-options \"-Wlogical-op\" } */\n+\n+extern int xxx;\n+#define XXX !xxx\n+int\n+test (void)\n+{\n+  if (XXX && xxx) /* { dg-bogus \"logical\" } */\n+    return 4;\n+  else\n+    return 0;\n+}"}]}