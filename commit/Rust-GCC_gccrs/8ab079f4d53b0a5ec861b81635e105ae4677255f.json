{"sha": "8ab079f4d53b0a5ec861b81635e105ae4677255f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFiMDc5ZjRkNTNiMGE1ZWM4NjFiODE2MzVlMTA1YWU0Njc3MjU1Zg==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2009-10-23T21:38:50Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2009-10-23T21:38:50Z"}, "message": "re PR c++/40808 (member template specialization causes ICE)\n\nFix for PR c++/40808\n\ngcc/cp/ChangeLog:\n\n\tPR c++/40808\n\t* mangle.c (write_template_args): Allow mangling of empty template\n\targument list. Updated function comments.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/40808\n\t* g++.dg/abi/mangle34.C: New test\n\nFrom-SVN: r153517", "tree": {"sha": "e88a83234204b8e75b9b76fa356282a24451f952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e88a83234204b8e75b9b76fa356282a24451f952"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ab079f4d53b0a5ec861b81635e105ae4677255f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ab079f4d53b0a5ec861b81635e105ae4677255f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ab079f4d53b0a5ec861b81635e105ae4677255f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ab079f4d53b0a5ec861b81635e105ae4677255f/comments", "author": null, "committer": null, "parents": [{"sha": "92de1b370201aa7ea0a3cf0343840d08445293ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92de1b370201aa7ea0a3cf0343840d08445293ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92de1b370201aa7ea0a3cf0343840d08445293ba"}], "stats": {"total": 61, "additions": 57, "deletions": 4}, "files": [{"sha": "3ce735b3fe9a6a5d3c0dd34a86a7fc693d7a37a5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab079f4d53b0a5ec861b81635e105ae4677255f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab079f4d53b0a5ec861b81635e105ae4677255f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8ab079f4d53b0a5ec861b81635e105ae4677255f", "patch": "@@ -1,3 +1,9 @@\n+2009-10-23  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/40808\n+\t* mangle.c (write_template_args): Allow mangling of empty template\n+\targument list. Updated function comments.\n+\n 2009-10-23  Jason Merrill  <jason@redhat.com>\n \n \t* semantics.c (lambda_expr_this_capture): Use thisify_lambda_field."}, {"sha": "d4bcbace7278102bbfc1c338c3dbb53ee6232b8a", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab079f4d53b0a5ec861b81635e105ae4677255f/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab079f4d53b0a5ec861b81635e105ae4677255f/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=8ab079f4d53b0a5ec861b81635e105ae4677255f", "patch": "@@ -2284,21 +2284,22 @@ write_class_enum_type (const tree type)\n /* Non-terminal <template-args>.  ARGS is a TREE_VEC of template\n    arguments.\n \n-     <template-args> ::= I <template-arg>+ E  */\n+     <template-args> ::= I <template-arg>* E  */\n \n static void\n write_template_args (tree args)\n {\n   int i;\n-  int length = TREE_VEC_LENGTH (args);\n+  int length = 0;\n \n   MANGLE_TRACE_TREE (\"template-args\", args);\n \n   write_char ('I');\n \n-  gcc_assert (length > 0);\n+  if (args)\n+    length = TREE_VEC_LENGTH (args);\n \n-  if (TREE_CODE (TREE_VEC_ELT (args, 0)) == TREE_VEC)\n+  if (args && TREE_CODE (TREE_VEC_ELT (args, 0)) == TREE_VEC)\n     {\n       /* We have nested template args.  We want the innermost template\n \t argument list.  */"}, {"sha": "c44b4d7e1b5dc2cd1fb236630d8bc6753345f66a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab079f4d53b0a5ec861b81635e105ae4677255f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab079f4d53b0a5ec861b81635e105ae4677255f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ab079f4d53b0a5ec861b81635e105ae4677255f", "patch": "@@ -1,3 +1,8 @@\n+2009-10-23  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/40808\n+\t* g++.dg/abi/mangle34.C: New test\n+\n 2009-10-23  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/lambda/lambda-nested2.C: New."}, {"sha": "08c3bc0a19b69c5a5b9b0f1a9a779e9a2b85f028", "filename": "gcc/testsuite/g++.dg/abi/mangle34.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab079f4d53b0a5ec861b81635e105ae4677255f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab079f4d53b0a5ec861b81635e105ae4677255f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle34.C?ref=8ab079f4d53b0a5ec861b81635e105ae4677255f", "patch": "@@ -0,0 +1,41 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin PR c++/40808\n+// { dg-do compile }\n+// This tests the mangling of empty template argument list in a template\n+// id.\n+// { dg-final { scan-assembler \"_ZNK5DummyclI3GenEENT_3SigIE10ResultTypeERKS2_\" } }\n+\n+\n+struct Void {};\n+\n+template <class R> struct FunType {\n+  typedef R ResultType;\n+};\n+\n+struct WrongNumberOfSigArgs {};\n+\n+template <typename R> struct CFunType {\n+  template <class Dummy1=Void, class Dummy2=Void> struct Sig : public\n+FunType<WrongNumberOfSigArgs> {};\n+  template <class Dummy> struct Sig<Void,Dummy> : public FunType<R> {};\n+};\n+\n+struct Dummy {\n+  template <typename F> typename F::template Sig<>::ResultType operator()(F\n+const& f) const {\n+    return typename F::template Sig<>::ResultType(0);\n+  }\n+};\n+\n+struct Gen: public CFunType<int> {\n+  int operator()() const {return 0;}\n+  Gen() {}\n+};\n+\n+int myfunction() {\n+  return Dummy()(Gen());\n+}\n+\n+int main() {\n+  myfunction();\n+}"}]}