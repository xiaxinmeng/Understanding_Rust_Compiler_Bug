{"sha": "45a9968b378d54ced8f742e1ff8b01c9378b339c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVhOTk2OGIzNzhkNTRjZWQ4Zjc0MmUxZmY4YjAxYzkzNzhiMzM5Yw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2016-11-16T13:09:12Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2016-11-16T13:09:12Z"}, "message": "Fix vec_cmp comparison mode\n\nvec_cmps assign the result of a vector comparison to a mask.\nThe optab was called with the destination having mode mask_mode\nbut with the source (the comparison) having mode VOIDmode,\nwhich led to invalid rtl if the source operand was used directly.\n\ngcc/\n2016-11-15  Richard Sandiford  <richard.sandiford@arm.com>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\n\t* optabs.c (vector_compare_rtx): Add a cmp_mode parameter\n\tand use it in the final call to gen_rtx_fmt_ee.\n\t(expand_vec_cond_expr): Update accordingly.\n\t(expand_vec_cmp_expr): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r242489", "tree": {"sha": "e290e8be32aa91661b4bf839f25ff6e966ac6737", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e290e8be32aa91661b4bf839f25ff6e966ac6737"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45a9968b378d54ced8f742e1ff8b01c9378b339c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45a9968b378d54ced8f742e1ff8b01c9378b339c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45a9968b378d54ced8f742e1ff8b01c9378b339c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45a9968b378d54ced8f742e1ff8b01c9378b339c/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "41c7cac56c4e6fd1f65281ae3a49bc2308be5191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41c7cac56c4e6fd1f65281ae3a49bc2308be5191", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41c7cac56c4e6fd1f65281ae3a49bc2308be5191"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "a49cda325b53de655c235230d9501edfd949b52e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a9968b378d54ced8f742e1ff8b01c9378b339c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a9968b378d54ced8f742e1ff8b01c9378b339c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45a9968b378d54ced8f742e1ff8b01c9378b339c", "patch": "@@ -1,3 +1,12 @@\n+2016-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* optabs.c (vector_compare_rtx): Add a cmp_mode parameter\n+\tand use it in the final call to gen_rtx_fmt_ee.\n+\t(expand_vec_cond_expr): Update accordingly.\n+\t(expand_vec_cmp_expr): Likewise.\n+\n 2016-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "b135c9b3cc2cc8d8f399d7bbbd7f6e20eddaf02b", "filename": "gcc/optabs.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a9968b378d54ced8f742e1ff8b01c9378b339c/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a9968b378d54ced8f742e1ff8b01c9378b339c/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=45a9968b378d54ced8f742e1ff8b01c9378b339c", "patch": "@@ -5283,14 +5283,15 @@ get_rtx_code (enum tree_code tcode, bool unsignedp)\n   return code;\n }\n \n-/* Return comparison rtx for COND. Use UNSIGNEDP to select signed or\n-   unsigned operators.  OPNO holds an index of the first comparison\n-   operand in insn with code ICODE.  Do not generate compare instruction.  */\n+/* Return a comparison rtx of mode CMP_MODE for COND.  Use UNSIGNEDP to\n+   select signed or unsigned operators.  OPNO holds the index of the\n+   first comparison operand for insn ICODE.  Do not generate the\n+   compare instruction itself.  */\n \n static rtx\n-vector_compare_rtx (enum tree_code tcode, tree t_op0, tree t_op1,\n-\t\t    bool unsignedp, enum insn_code icode,\n-\t\t    unsigned int opno)\n+vector_compare_rtx (machine_mode cmp_mode, enum tree_code tcode,\n+\t\t    tree t_op0, tree t_op1, bool unsignedp,\n+\t\t    enum insn_code icode, unsigned int opno)\n {\n   struct expand_operand ops[2];\n   rtx rtx_op0, rtx_op1;\n@@ -5318,7 +5319,7 @@ vector_compare_rtx (enum tree_code tcode, tree t_op0, tree t_op1,\n   create_input_operand (&ops[1], rtx_op1, m1);\n   if (!maybe_legitimize_operands (icode, opno, 2, ops))\n     gcc_unreachable ();\n-  return gen_rtx_fmt_ee (rcode, VOIDmode, ops[0].value, ops[1].value);\n+  return gen_rtx_fmt_ee (rcode, cmp_mode, ops[0].value, ops[1].value);\n }\n \n /* Checks if vec_perm mask SEL is a constant equivalent to a shift of the first\n@@ -5644,7 +5645,8 @@ expand_vec_cond_expr (tree vec_cond_type, tree op0, tree op1, tree op2,\n \treturn 0;\n     }\n \n-  comparison = vector_compare_rtx (tcode, op0a, op0b, unsignedp, icode, 4);\n+  comparison = vector_compare_rtx (VOIDmode, tcode, op0a, op0b, unsignedp,\n+\t\t\t\t   icode, 4);\n   rtx_op1 = expand_normal (op1);\n   rtx_op2 = expand_normal (op2);\n \n@@ -5688,7 +5690,8 @@ expand_vec_cmp_expr (tree type, tree exp, rtx target)\n \treturn 0;\n     }\n \n-  comparison = vector_compare_rtx (tcode, op0a, op0b, unsignedp, icode, 2);\n+  comparison = vector_compare_rtx (mask_mode, tcode, op0a, op0b,\n+\t\t\t\t   unsignedp, icode, 2);\n   create_output_operand (&ops[0], target, mask_mode);\n   create_fixed_operand (&ops[1], comparison);\n   create_fixed_operand (&ops[2], XEXP (comparison, 0));"}]}