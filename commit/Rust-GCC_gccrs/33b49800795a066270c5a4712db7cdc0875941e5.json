{"sha": "33b49800795a066270c5a4712db7cdc0875941e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNiNDk4MDA3OTVhMDY2MjcwYzVhNDcxMmRiN2NkYzA4NzU5NDFlNQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2003-04-05T07:01:51Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2003-04-05T07:01:51Z"}, "message": "dbxout.c (scope_labelno): Add GTY.\n\n2003-04-04  Geoffrey Keating  <geoffk@apple.com>\n\n\t* dbxout.c (scope_labelno): Add GTY.\n\t(have_used_extensions): Add GTY.\n\t(source_label_number): Add GTY.\n\t(lastfile): Add GTY.\n\t(lastfile_is_base): New.\n\t(base_input_file): New.\n\t(dbxout_handle_pch): New.\n\t(dbx_debug_hooks): Add handle_pch.\n\t(xcoff_debug_hooks): Likewise.\n\t(dbxout_function_end): Remove scope_labelno.\n\t(dbxout_init): Set base_input_file.\n\t(dbxout_handle_pch): New.\n\t(dbxout_source_file): Honour lastfile_is_base.\n\t* dwarfout.c (dwarf_debug_hooks): Add dummy handle_pch.\n\t* sdbout.c (sdb_debug_hooks): Add dummy handle_pch.\n\t* vmsdbgout.c (vmsdbg_debug_hooks): Add dummy handle_pch.\n\t* dwarf2out.c (dwarf2_debug_hooks): Add dummy handle_pch.\n\t* debug.c (do_nothing_debug_hooks): Add dummy handle_pch.\n\t* debug.h (struct gcc_debug_hooks): Add handle_pch.\n\t* c-pch.c (pch_init): Don't call start_source_file, but do call\n\thandle_pch.\n\t(c_common_write_pch): Call handle_pch.\n\t(c_common_read_pch): Don't call start_source_file,\n\tor end_source_file.\n\nIndex: gcc/testsuite/ChangeLog\n2003-04-04  Geoffrey Keating  <geoffk@apple.com>\n\n\t* gcc.dg/pch/static-3.c: New.\n\t* gcc.dg/pch/static-3.hs: New.\n\t* gcc.dg/pch/pch.exp: Test with -O0 -g too.\n\nFrom-SVN: r65266", "tree": {"sha": "3da09cdc35a115a5b68c8b9d716e7e83e9721d11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3da09cdc35a115a5b68c8b9d716e7e83e9721d11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33b49800795a066270c5a4712db7cdc0875941e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33b49800795a066270c5a4712db7cdc0875941e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33b49800795a066270c5a4712db7cdc0875941e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33b49800795a066270c5a4712db7cdc0875941e5/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "41a73c4c6ce2c30e81a35d594c9baf8719daf503", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a73c4c6ce2c30e81a35d594c9baf8719daf503", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41a73c4c6ce2c30e81a35d594c9baf8719daf503"}], "stats": {"total": 171, "additions": 134, "deletions": 37}, "files": [{"sha": "8802ff6455f122e6750917139136f75d5a15779c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33b49800795a066270c5a4712db7cdc0875941e5", "patch": "@@ -1,3 +1,30 @@\n+2003-04-04  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* dbxout.c (scope_labelno): Add GTY.\n+\t(have_used_extensions): Add GTY.\n+\t(source_label_number): Add GTY.\n+\t(lastfile): Add GTY.\n+\t(lastfile_is_base): New.\n+\t(base_input_file): New.\n+\t(dbxout_handle_pch): New.\n+\t(dbx_debug_hooks): Add handle_pch.\n+\t(xcoff_debug_hooks): Likewise.\n+\t(dbxout_function_end): Remove scope_labelno.\n+\t(dbxout_init): Set base_input_file.\n+\t(dbxout_handle_pch): New.\n+\t(dbxout_source_file): Honour lastfile_is_base.\n+\t* dwarfout.c (dwarf_debug_hooks): Add dummy handle_pch.\n+\t* sdbout.c (sdb_debug_hooks): Add dummy handle_pch.\n+\t* vmsdbgout.c (vmsdbg_debug_hooks): Add dummy handle_pch.\n+\t* dwarf2out.c (dwarf2_debug_hooks): Add dummy handle_pch.\n+\t* debug.c (do_nothing_debug_hooks): Add dummy handle_pch.\n+\t* debug.h (struct gcc_debug_hooks): Add handle_pch.\n+\t* c-pch.c (pch_init): Don't call start_source_file, but do call\n+\thandle_pch.\n+\t(c_common_write_pch): Call handle_pch.\n+\t(c_common_read_pch): Don't call start_source_file,\n+\tor end_source_file.\t\n+\n Fri Apr  4 17:43:52 2003  Olivier Hainque <hainque@act-europe.fr>\n \n         * emit-rtl.c (get_mem_attrs): Adjust alignment tests determining"}, {"sha": "27a299ffd3ea8cfb1d8f85cc9392f4d3d49ec7c9", "filename": "gcc/c-pch.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pch.c?ref=33b49800795a066270c5a4712db7cdc0875941e5", "patch": "@@ -68,10 +68,6 @@ pch_init ()\n   \n   if (pch_file)\n     {\n-      /* We're precompiling a header file, so when it's actually used,\n-\t it'll be at least one level deep.  */\n-      (*debug_hooks->start_source_file) (lineno, input_filename);\n-\n       f = fopen (pch_file, \"w+b\");\n       if (f == NULL)\n \tfatal_io_error (\"can't open %s\", pch_file);\n@@ -88,6 +84,9 @@ pch_init ()\n \n       asm_file_startpos = ftell (asm_out_file);\n       \n+      /* Let the debugging format deal with the PCHness.  */\n+      (*debug_hooks->handle_pch) (0);\n+\n       cpp_save_state (parse_in, f);\n     }\n }\n@@ -100,6 +99,8 @@ c_common_write_pch ()\n   long written;\n   struct c_pch_header h;\n \n+  (*debug_hooks->handle_pch) (1);\n+\n   cpp_write_pch_deps (parse_in, pch_outfile);\n \n   asm_file_end = ftell (asm_out_file);\n@@ -195,18 +196,14 @@ c_common_read_pch (pfile, name, fd, orig_name)\n      cpp_reader *pfile;\n      const char *name;\n      int fd;\n-     const char *orig_name;\n+     const char *orig_name ATTRIBUTE_UNUSED;\n {\n   FILE *f;\n   struct c_pch_header h;\n   char *buf;\n   unsigned long written;\n   struct save_macro_data *smd;\n   \n-  /* Before we wrote the file, we started a source file, so we have to start\n-     one here to match.  */\n-  (*debug_hooks->start_source_file) (lineno, orig_name);\n-  \n   f = fdopen (fd, \"rb\");\n   if (f == NULL)\n     {\n@@ -243,6 +240,4 @@ c_common_read_pch (pfile, name, fd, orig_name)\n     return;\n \n   fclose (f);\n-\n-  (*debug_hooks->end_source_file) (lineno);\n }"}, {"sha": "3f5ace0648468c59c4234ce730264d9b1c61f8c7", "filename": "gcc/dbxout.c", "status": "modified", "additions": 61, "deletions": 19, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=33b49800795a066270c5a4712db7cdc0875941e5", "patch": "@@ -189,32 +189,41 @@ static GTY(()) struct dbx_file *current_file;\n \n static GTY(()) int next_file_number;\n \n-/* Typical USG systems don't have stab.h, and they also have\n-   no use for DBX-format debugging info.  */\n-\n-#if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n-\n-/* Last source file name mentioned in a NOTE insn.  */\n-\n-static const char *lastfile;\n+/* A counter for dbxout_function_end.  */\n \n-/* Current working directory.  */\n-\n-static const char *cwd;\n+static GTY(()) int scope_labelno;\n \n /* Nonzero if we have actually used any of the GDB extensions\n    to the debugging format.  The idea is that we use them for the\n    first time only if there's a strong reason, but once we have done that,\n    we use them whenever convenient.  */\n \n-static int have_used_extensions = 0;\n+static GTY(()) int have_used_extensions = 0;\n \n /* Number for the next N_SOL filename stabs label.  The number 0 is reserved\n    for the N_SO filename stabs label.  */\n \n-#if defined (DBX_DEBUGGING_INFO) && !defined (DBX_OUTPUT_SOURCE_FILENAME)\n-static int source_label_number = 1;\n-#endif\n+static GTY(()) int source_label_number = 1;\n+\n+/* Last source file name mentioned in a NOTE insn.  */\n+\n+static GTY(()) const char *lastfile;\n+\n+/* Used by PCH machinery to detect if 'lastfile' should be reset to\n+   base_input_file.  */\n+static GTY(()) int lastfile_is_base;\n+\n+/* Typical USG systems don't have stab.h, and they also have\n+   no use for DBX-format debugging info.  */\n+\n+#if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n+\n+/* The original input file name.  */\n+static const char *base_input_file;\n+\n+/* Current working directory.  */\n+\n+static const char *cwd;\n \n #ifdef DEBUG_SYMS_TEXT\n #define FORCE_TEXT function_section (current_function_decl);\n@@ -323,6 +332,7 @@ static void dbxout_begin_function\tPARAMS ((tree));\n static void dbxout_begin_block\t\tPARAMS ((unsigned, unsigned));\n static void dbxout_end_block\t\tPARAMS ((unsigned, unsigned));\n static void dbxout_function_decl\tPARAMS ((tree));\n+static void dbxout_handle_pch\t\tPARAMS ((unsigned));\n \n const struct gcc_debug_hooks dbx_debug_hooks =\n {\n@@ -349,7 +359,8 @@ const struct gcc_debug_hooks dbx_debug_hooks =\n   dbxout_global_decl,\t\t/* global_decl */\n   debug_nothing_tree,\t\t/* deferred_inline_function */\n   debug_nothing_tree,\t\t/* outlining_inline_function */\n-  debug_nothing_rtx\t\t/* label */\n+  debug_nothing_rtx,\t\t/* label */\n+  dbxout_handle_pch\t\t/* handle_pch */\n };\n #endif /* DBX_DEBUGGING_INFO  */\n \n@@ -375,15 +386,15 @@ const struct gcc_debug_hooks xcoff_debug_hooks =\n   dbxout_global_decl,\t\t/* global_decl */\n   debug_nothing_tree,\t\t/* deferred_inline_function */\n   debug_nothing_tree,\t\t/* outlining_inline_function */\n-  debug_nothing_rtx\t\t/* label */\n+  debug_nothing_rtx,\t\t/* label */\n+  dbxout_handle_pch\t\t/* handle_pch */\n };\n #endif /* XCOFF_DEBUGGING_INFO  */\n \f\n #if defined (DBX_DEBUGGING_INFO)\n static void\n dbxout_function_end ()\n {\n-  static int scope_labelno = 0;\n   char lscope_label_name[100];\n   /* Convert Ltext into the appropriate format for local labels in case\n      the system doesn't insert underscores in front of user generated\n@@ -473,7 +484,7 @@ dbxout_init (input_file_name)\n \t   ASM_STABS_OP, STABS_GCC_MARKER, N_OPT);\n #endif\n \n-  lastfile = input_file_name;\n+  base_input_file = lastfile = input_file_name;\n \n   next_type_number = 1;\n \n@@ -559,6 +570,31 @@ dbxout_end_source_file (line)\n #endif\n }\n \n+/* Handle a few odd cases that occur when trying to make PCH files work.  */\n+\n+static void\n+dbxout_handle_pch (unsigned at_end)\n+{\n+  if (! at_end)\n+    {\n+      /* When using the PCH, this file will be included, so we need to output\n+\t a BINCL.  */\n+      dbxout_start_source_file (0, lastfile);\n+\n+      /* The base file when using the PCH won't be the same as\n+\t the base file when it's being generated.  */\n+      lastfile = NULL;\n+    }\n+  else\n+    {\n+      /* ... and an EINCL. */\n+      dbxout_end_source_file (0);\n+\n+      /* Deal with cases where 'lastfile' was never actually changed.  */\n+      lastfile_is_base = lastfile == NULL;\n+    }\n+}\n+\n #if defined (DBX_DEBUGGING_INFO)\n /* Output debugging info to FILE to switch to sourcefile FILENAME.  */\n \n@@ -567,6 +603,12 @@ dbxout_source_file (file, filename)\n      FILE *file;\n      const char *filename;\n {\n+  if (lastfile == 0 && lastfile_is_base)\n+    {\n+      lastfile = base_input_file;\n+      lastfile_is_base = 0;\n+    }\n+\n   if (filename && (lastfile == 0 || strcmp (filename, lastfile)))\n     {\n #ifdef DBX_OUTPUT_SOURCE_FILENAME"}, {"sha": "ca17373dbdd6d517e04d17bc14352fb6aa8dd321", "filename": "gcc/debug.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2Fdebug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2Fdebug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.c?ref=33b49800795a066270c5a4712db7cdc0875941e5", "patch": "@@ -43,7 +43,8 @@ const struct gcc_debug_hooks do_nothing_debug_hooks =\n   debug_nothing_tree,\t\t/* global_decl */\n   debug_nothing_tree,\t\t/* deferred_inline_function */\n   debug_nothing_tree,\t\t/* outlining_inline_function */\n-  debug_nothing_rtx\t\t/* label */\n+  debug_nothing_rtx,\t\t/* label */\n+  debug_nothing_int\t\t/* handle_pch */\n };\n \n /* This file contains implementations of each debug hook that do"}, {"sha": "2793e302115f07ec6c07ead9c54edfd7c6084237", "filename": "gcc/debug.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=33b49800795a066270c5a4712db7cdc0875941e5", "patch": "@@ -101,6 +101,10 @@ struct gcc_debug_hooks\n   /* Called from final_scan_insn for any CODE_LABEL insn whose\n      LABEL_NAME is non-null.  */\n   void (* label) PARAMS ((rtx));\n+\n+  /* Called after the start and before the end of writing a PCH file.  \n+     The parameter is 0 if after the start, 1 if before the end.  */\n+  void (* handle_pch) PARAMS ((unsigned int));\n };\n \n extern const struct gcc_debug_hooks *debug_hooks;"}, {"sha": "8a9b9fd918f0826943f72a26deb3203496f65d58", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=33b49800795a066270c5a4712db7cdc0875941e5", "patch": "@@ -3282,7 +3282,8 @@ const struct gcc_debug_hooks dwarf2_debug_hooks =\n      emitting the abstract description of inline functions until\n      something tries to reference them.  */\n   dwarf2out_abstract_function,\t/* outlining_inline_function */\n-  debug_nothing_rtx\t\t/* label */\n+  debug_nothing_rtx,\t\t/* label */\n+  debug_nothing_int\t\t/* handle_pch */\n };\n #endif\n \f"}, {"sha": "b6d150f04a9a8fdafd9494c5d6a695b36a61c5c8", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=33b49800795a066270c5a4712db7cdc0875941e5", "patch": "@@ -1294,7 +1294,8 @@ const struct gcc_debug_hooks dwarf_debug_hooks =\n   dwarfout_global_decl,\n   dwarfout_deferred_inline_function,\n   debug_nothing_tree,\t\t/* outlining_inline_function */\n-  debug_nothing_rtx\t\t/* label */\n+  debug_nothing_rtx,\t\t/* label */\n+  debug_nothing_int\t\t/* handle_pch */\n };\n \f\n /************************ general utility functions **************************/"}, {"sha": "aaba3601dc462029602fe1b20cbbdd729c4bf68f", "filename": "gcc/sdbout.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=33b49800795a066270c5a4712db7cdc0875941e5", "patch": "@@ -333,7 +333,8 @@ const struct gcc_debug_hooks sdb_debug_hooks =\n   sdbout_global_decl,\t\t/* global_decl */\n   debug_nothing_tree,\t\t/* deferred_inline_function */\n   debug_nothing_tree,\t\t/* outlining_inline_function */\n-  sdbout_label\n+  sdbout_label,\t\t\t/* label */\n+  debug_nothing_int\t\t/* handle_pch */\n };\n \f\n #if 0"}, {"sha": "24f448944a9e922fc160053f6c80fde1f7198de8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=33b49800795a066270c5a4712db7cdc0875941e5", "patch": "@@ -1,3 +1,9 @@\n+2003-04-04  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* gcc.dg/pch/static-3.c: New.\n+\t* gcc.dg/pch/static-3.hs: New.\n+\t* gcc.dg/pch/pch.exp: Test with -O0 -g too.\n+\n 2003-04-04  Richard Henderson  <rth@redhat.com>\n \n \t* g++.dg/eh/forced1.C: Use _Unwind_SjLj_ForcedUnwind as appropriate."}, {"sha": "543d6147d7be2c31a53885e3c65c3c5f25b59a3f", "filename": "gcc/testsuite/gcc.dg/pch/pch.exp", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fpch.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fpch.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fpch.exp?ref=33b49800795a066270c5a4712db7cdc0875941e5", "patch": "@@ -41,8 +41,11 @@ foreach test [lsort [glob -nocomplain $srcdir/$subdir/*.c]] {\n     catch { file delete \"$bname.s-gch\" }\n \n     # We don't try to use the loop-optimizing options, since they are highly\n-    # unlikely to make any difference to PCH.\n-    foreach flags $torture_without_loops {\n+    # unlikely to make any difference to PCH.  However, we do want to\n+    # add -O0 -g, since users who want PCH usually want debugging and quick\n+    # compiles.\n+    set pch_torture [concat [list {-O0 -g}] $torture_without_loops]\n+    foreach flags $pch_torture {\n \tverbose \"Testing $nshort, $flags\" 1\n \n \t# For the header files, the default is to precompile."}, {"sha": "eae0ab078050caaccf77987542ea8e476d4fbb75", "filename": "gcc/testsuite/gcc.dg/pch/static-3.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fstatic-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fstatic-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fstatic-3.c?ref=33b49800795a066270c5a4712db7cdc0875941e5", "patch": "@@ -0,0 +1,8 @@\n+#include \"static-3.h\"\n+int bar(int *a)\n+{\n+  int i, tot;\n+  for (i = tot = 0; i < 100; i++)\n+    tot += a[i];\n+  return tot;\n+}"}, {"sha": "b881945f5eaf671a27a4bb76b8c5d14659721a99", "filename": "gcc/testsuite/gcc.dg/pch/static-3.hs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fstatic-3.hs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fstatic-3.hs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fstatic-3.hs?ref=33b49800795a066270c5a4712db7cdc0875941e5", "patch": "@@ -0,0 +1,7 @@\n+static int foo(int *a)\n+{\n+  int i, tot;\n+  for (i = tot = 0; i < 100; i++)\n+    tot += a[i];\n+  return tot;\n+}"}, {"sha": "7824698ffd280b54683ddce84aa624b41a5fdadf", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b49800795a066270c5a4712db7cdc0875941e5/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=33b49800795a066270c5a4712db7cdc0875941e5", "patch": "@@ -189,7 +189,8 @@ const struct gcc_debug_hooks vmsdbg_debug_hooks\n    vmsdbgout_global_decl,\n    debug_nothing_tree,\t\t/* deferred_inline_function */\n    vmsdbgout_abstract_function,\n-   debug_nothing_rtx\t\t/* label */\n+   debug_nothing_rtx,\t\t/* label */\n+   debug_nothing_int\t\t/* handle_pch */\n };\n \n /* Definitions of defaults for assembler-dependent names of various"}]}