{"sha": "cedcf9372a5b46058a6a01796b9f2871d54b1e70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VkY2Y5MzcyYTViNDYwNThhNmEwMTc5NmI5ZjI4NzFkNTRiMWU3MA==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "1999-03-26T10:45:27Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1999-03-26T10:45:27Z"}, "message": "Move stabs specific target macros out od svr4.h and elfos.h and into dbxelf.h\n\nFrom-SVN: r25995", "tree": {"sha": "ac8c11f67f504a6de40f2ff082ebf6988b3b3424", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac8c11f67f504a6de40f2ff082ebf6988b3b3424"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cedcf9372a5b46058a6a01796b9f2871d54b1e70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cedcf9372a5b46058a6a01796b9f2871d54b1e70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cedcf9372a5b46058a6a01796b9f2871d54b1e70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cedcf9372a5b46058a6a01796b9f2871d54b1e70/comments", "author": null, "committer": null, "parents": [{"sha": "d8e178a02b6adccbbbef668c0374a95b466d11b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e178a02b6adccbbbef668c0374a95b466d11b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8e178a02b6adccbbbef668c0374a95b466d11b0"}], "stats": {"total": 264, "additions": 140, "deletions": 124}, "files": [{"sha": "c469a6ddf838042378ddfb29a249db6b71e24f77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cedcf9372a5b46058a6a01796b9f2871d54b1e70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cedcf9372a5b46058a6a01796b9f2871d54b1e70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cedcf9372a5b46058a6a01796b9f2871d54b1e70", "patch": "@@ -1,3 +1,34 @@\n+Fri Mar 26 10:43:47 1999  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* config/svr4.h: Include new header file dbxelf.h.\n+\t(DBX_DEBUGGING_INFO): Remove definition.\n+\t(DBX_USE_BINCL): Remove definition.\n+\t(DBX_BLOCKS_FUNCTION_RELATIVE): Remove definition.\n+\t(ASM_IDENTIFY_GCC): Remove definition.\n+\t(ASM_IDENTIFY_GCC_AFTER_SOURCE): Remove definition.\n+\t(ASM_OUTPUT_SOURCE_LINE): Remove definition.\n+\t(DBX_FUNCTION_FIRST): Remove definition.\n+\t(DBX_OUTPUT_MAIN_SOURCE_FILE_END): Remove definition.\n+\n+\t* config/elfos.h: Include new header file dbxelf.h.\n+\t(DBX_DEBUGGING_INFO): Remove definition.\n+\t(DBX_BLOCKS_FUNCTION_RELATIVE): Remove definition.\n+\t(ASM_IDENTIFY_GCC): Remove definition.\n+\t(ASM_IDENTIFY_GCC_AFTER_SOURCE): Remove definition.\n+\t(ASM_OUTPUT_SOURCE_LINE): Remove definition.\n+\t(DBX_FUNCTION_FIRST): Remove definition.\n+\n+\t* config/dbxelf.h: New header file.\n+\t(DBX_DEBUGGING_INFO): Define.\n+\t(DBX_BLOCKS_FUNCTION_RELATIVE): Define.\n+\t(DBX_FUNCTION_FIRST): Define.\n+\t(DBX_USE_BINCL): Define.\n+\t(DBX_CONTIN_LENGTH): Define.\n+\t(ASM_IDENTIFY_GCC): Define.\n+\t(ASM_IDENTIFY_GCC_AFTER_SOURCE): Define.\n+\t(ASM_OUTPUT_SOURCE_LINE): Define.\n+\t(DBX_OUTPUT_MAIN_SOURCE_FILE_END): Define.\n+\n Fri Mar 26 01:59:15 1999  \"Charles M. Hannum\" <root@ihack.net>\n \n \t* fold-const.c (fold_truthop): Verify that the lhs and rhs are"}, {"sha": "9472887cc526e9d94ff1987836a072f2a6f5c0f4", "filename": "gcc/config/dbxelf.h", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cedcf9372a5b46058a6a01796b9f2871d54b1e70/gcc%2Fconfig%2Fdbxelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cedcf9372a5b46058a6a01796b9f2871d54b1e70/gcc%2Fconfig%2Fdbxelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdbxelf.h?ref=cedcf9372a5b46058a6a01796b9f2871d54b1e70", "patch": "@@ -0,0 +1,105 @@\n+/* Definitions needed when using stabs embedded in ELF sections.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* This file may be included by any ELF target which wishes to\n+   support -gstabs generating stabs in sections, as produced by gas\n+   and understood by gdb.  */\n+\n+#ifndef __DBX_ELF_H\n+#define __DBX_ELF_H\n+\n+/* Output DBX (stabs) debugging information if doing -gstabs.  */\n+\n+#undef  DBX_DEBUGGING_INFO\n+#define DBX_DEBUGGING_INFO\n+\n+/* Make LBRAC and RBRAC addresses relative to the start of the\n+   function.  The native Solaris stabs debugging format works this\n+   way, gdb expects it, and it reduces the number of relocation\n+   entries...  */\n+\n+#undef  DBX_BLOCKS_FUNCTION_RELATIVE\n+#define DBX_BLOCKS_FUNCTION_RELATIVE 1\n+\n+/* ... but, to make this work, functions must appear prior to line info.  */\n+\n+#undef  DBX_FUNCTION_FIRST\n+#define DBX_FUNCTION_FIRST\n+\n+/* When generating stabs debugging, use N_BINCL entries.  */\n+\n+#undef  DBX_USE_BINCL\n+#define DBX_USE_BINCL\n+\n+/* There is no limit to the length of stabs strings.  */\n+\n+#ifndef DBX_CONTIN_LENGTH\n+#define DBX_CONTIN_LENGTH 0\n+#endif\n+\n+/* When using stabs, gcc2_compiled must be a stabs entry, not an\n+   ordinary symbol, or gdb won't see it.  Furthermore, since gdb reads\n+   the input piecemeal, starting with each N_SO, it's a lot easier if\n+   the gcc2 flag symbol is *after* the N_SO rather than before it.  So\n+   we emit an N_OPT stab there.  */\n+\n+#define ASM_IDENTIFY_GCC(FILE)\t\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    if (write_symbols != DBX_DEBUG)\t\t\t\t\t\\\n+      fputs (\"gcc2_compiled.:\\n\", FILE);\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+#define ASM_IDENTIFY_GCC_AFTER_SOURCE(FILE)\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    if (write_symbols == DBX_DEBUG)\t\t\t\t\t\\\n+      fputs (\"\\t.stabs\\t\\\"gcc2_compiled.\\\", 0x3c, 0, 0, 0\\n\", FILE);\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+/* Like block addresses, stabs line numbers are relative to the\n+   current function.  */\n+\n+#undef  ASM_OUTPUT_SOURCE_LINE\n+#define ASM_OUTPUT_SOURCE_LINE(file, line)\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    static int sym_lineno = 1;\t\t\t\t\t\t\\\n+    fprintf (file, \".stabn 68,0,%d,.LM%d-\",\t\t\t\t\\\n+\t     line, sym_lineno);\t\t\t\t\t\t\\\n+    assemble_name (file,\t\t\t\t\t\t\\\n+\t\t   XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0));\\\n+    fprintf (file, \"\\n.LM%d:\\n\", sym_lineno);\t\t\t\t\\\n+    sym_lineno += 1;\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+/* Generate a blank trailing N_SO to mark the end of the .o file, since\n+   we can't depend upon the linker to mark .o file boundaries with\n+   embedded stabs.  */\n+\n+#undef  DBX_OUTPUT_MAIN_SOURCE_FILE_END\n+#define DBX_OUTPUT_MAIN_SOURCE_FILE_END(FILE, FILENAME)\t\t\t\\\n+  fprintf (FILE,\t\t\t\t\t\t\t\\\n+\t   \"\\t.text\\n\\t.stabs \\\"\\\",%d,0,0,Letext\\nLetext:\\n\", N_SO)\n+\n+#endif /* __DBX_ELF_H */"}, {"sha": "6c107311fd75d5d75664c78c9e5968702008d37d", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 2, "deletions": 53, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cedcf9372a5b46058a6a01796b9f2871d54b1e70/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cedcf9372a5b46058a6a01796b9f2871d54b1e70/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=cedcf9372a5b46058a6a01796b9f2871d54b1e70", "patch": "@@ -75,10 +75,9 @@ do {\t\t\t\t \t\t\t\t\\\n \n #define DWARF2_DEBUGGING_INFO\n \n-/* gas on SVR4 supports the use of .stabs.  Permit -gstabs to be used\n-   in general, although it will only work when using gas.  */\n+/* Also allow them to support STABS debugging.  */\n \n-#define DBX_DEBUGGING_INFO\n+#include \"dbxelf.h\"\n \n /* The GNU tools operate better with stabs.  Since we don't have\n    any native tools to be compatible with, default to stabs.  */\n@@ -87,56 +86,6 @@ do {\t\t\t\t \t\t\t\t\\\n #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n #endif\n \n-/* Make LBRAC and RBRAC addresses relative to the start of the\n-   function.  The native Solaris stabs debugging format works this\n-   way, gdb expects it, and it reduces the number of relocation\n-   entries.  */\n-\n-#define DBX_BLOCKS_FUNCTION_RELATIVE 1\n-\n-/* When using stabs, gcc2_compiled must be a stabs entry, not an\n-   ordinary symbol, or gdb won't see it.  Furthermore, since gdb reads\n-   the input piecemeal, starting with each N_SO, it's a lot easier if\n-   the gcc2 flag symbol is *after* the N_SO rather than before it.  So\n-   we emit an N_OPT stab there.  */\n-\n-#define ASM_IDENTIFY_GCC(FILE)\t\t\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (write_symbols != DBX_DEBUG)\t\t\t\t\t\\\n-      fputs (\"gcc2_compiled.:\\n\", FILE);\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-\n-#define ASM_IDENTIFY_GCC_AFTER_SOURCE(FILE)\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (write_symbols == DBX_DEBUG)\t\t\t\t\t\\\n-      fputs (\"\\t.stabs\\t\\\"gcc2_compiled.\\\", 0x3c, 0, 0, 0\\n\", FILE);\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-\n-/* Like block addresses, stabs line numbers are relative to the\n-   current function.  */\n-\n-#undef  ASM_OUTPUT_SOURCE_LINE\n-#define ASM_OUTPUT_SOURCE_LINE(file, line)\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    static int sym_lineno = 1;\t\t\t\t\t\t\\\n-    fprintf (file, \"\\t.stabn 68,0,%d,.LM%d-\",\t\t\t\t\\\n-\t     line, sym_lineno);\t\t\t\t\t\t\\\n-    assemble_name (file, XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0)); \\\n-    fprintf (file, \"\\n.LM%d:\\n\", sym_lineno);\t\t\t\t\\\n-    sym_lineno += 1;\t\t\t\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-\n-/* In order for relative line numbers to work, we must output the\n-   stabs entry for the function name first.  */\n-\n-#define DBX_FUNCTION_FIRST\n-\n #undef ASM_BYTE_OP\n #define ASM_BYTE_OP\t\".byte\"\n "}, {"sha": "1c8482fd11d68fcf8e9de04fc8e3e61a634ddcbb", "filename": "gcc/config/svr4.h", "status": "modified", "additions": 2, "deletions": 71, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cedcf9372a5b46058a6a01796b9f2871d54b1e70/gcc%2Fconfig%2Fsvr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cedcf9372a5b46058a6a01796b9f2871d54b1e70/gcc%2Fconfig%2Fsvr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr4.h?ref=cedcf9372a5b46058a6a01796b9f2871d54b1e70", "patch": "@@ -261,83 +261,14 @@ do {\t\t\t\t \t\t\t\t\\\n \n #undef DBX_REGISTER_NUMBER\n \n-/* gas on SVR4 supports the use of .stabs.  Permit -gstabs to be used\n-   in general, although it will only work when using gas.  */\n-\n-#define DBX_DEBUGGING_INFO\n-\n-/* When generating stabs debugging, use N_BINCL entries.  */\n-\n-#define DBX_USE_BINCL\n-\n /* Use DWARF debugging info by default.  */\n \n #ifndef PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DWARF_DEBUG\n #endif\n \n-/* Make LBRAC and RBRAC addresses relative to the start of the\n-   function.  The native Solaris stabs debugging format works this\n-   way, gdb expects it, and it reduces the number of relocation\n-   entries.  */\n-\n-#define DBX_BLOCKS_FUNCTION_RELATIVE 1\n-\n-/* When using stabs, gcc2_compiled must be a stabs entry, not an\n-   ordinary symbol, or gdb won't see it.  Furthermore, since gdb reads\n-   the input piecemeal, starting with each N_SO, it's a lot easier if\n-   the gcc2 flag symbol is *after* the N_SO rather than before it.  So\n-   we emit an N_OPT stab there.  */\n-\n-#define ASM_IDENTIFY_GCC(FILE)\t\t\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (write_symbols != DBX_DEBUG)\t\t\t\t\t\\\n-      fputs (\"gcc2_compiled.:\\n\", FILE);\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-\n-#define ASM_IDENTIFY_GCC_AFTER_SOURCE(FILE)\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (write_symbols == DBX_DEBUG)\t\t\t\t\t\\\n-      fputs (\"\\t.stabs\\t\\\"gcc2_compiled.\\\", 0x3c, 0, 0, 0\\n\", FILE);\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-\n-/* Like block addresses, stabs line numbers are relative to the\n-   current function.  */\n-\n-#define ASM_OUTPUT_SOURCE_LINE(file, line)\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    static int sym_lineno = 1;\t\t\t\t\t\t\\\n-    fprintf (file, \".stabn 68,0,%d,.LM%d-\",\t\t\t\t\\\n-\t     line, sym_lineno);\t\t\t\t\t\t\\\n-    assemble_name (file,\t\t\t\t\t\t\\\n-\t\t   XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0));\\\n-    fprintf (file, \"\\n.LM%d:\\n\", sym_lineno);\t\t\t\t\\\n-    sym_lineno += 1;\t\t\t\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-\n-/* In order for relative line numbers to work, we must output the\n-   stabs entry for the function name first.  */\n-\n-#define DBX_FUNCTION_FIRST\n-\n-/* Generate a blank trailing N_SO to mark the end of the .o file, since\n-   we can't depend upon the linker to mark .o file boundaries with\n-   embedded stabs.  */\n-\n-#define DBX_OUTPUT_MAIN_SOURCE_FILE_END(FILE, FILENAME)\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    text_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE,\t\t\t\t\t\t\t\\\n-\t   \"\\t.stabs \\\"\\\",%d,0,0,.Letext\\n.Letext:\\n\", N_SO);\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n+/* But allow STABS to be supoorted as well.  */\n+#include \"dbxelf.h\"\n \n /* Define the actual types of some ANSI-mandated types.  (These\n    definitions should work for most SVR4 systems).  */"}]}