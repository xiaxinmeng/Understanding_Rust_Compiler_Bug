{"sha": "70498da39730338bda786e105ecf980194b9f955", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA0OThkYTM5NzMwMzM4YmRhNzg2ZTEwNWVjZjk4MDE5NGI5Zjk1NQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-05-12T13:26:02Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-05-12T13:26:02Z"}, "message": "rtl.texi: Document zero_extract as a valid destination of a set insn.\n\n\n\t* doc/rtl.texi: Document zero_extract as a valid destination\n\tof a set insn.\n\nFrom-SVN: r66716", "tree": {"sha": "9790ca9c50b886c5137b00f8799d7b57ef7e8ca0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9790ca9c50b886c5137b00f8799d7b57ef7e8ca0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70498da39730338bda786e105ecf980194b9f955", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70498da39730338bda786e105ecf980194b9f955", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70498da39730338bda786e105ecf980194b9f955", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70498da39730338bda786e105ecf980194b9f955/comments", "author": null, "committer": null, "parents": [{"sha": "ce250a2071ac6779bbe9b42d7f323779a07ef24d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce250a2071ac6779bbe9b42d7f323779a07ef24d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce250a2071ac6779bbe9b42d7f323779a07ef24d"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "55480b4f995b3bf9dacf8d3ddf0c25a2303b895a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70498da39730338bda786e105ecf980194b9f955/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70498da39730338bda786e105ecf980194b9f955/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70498da39730338bda786e105ecf980194b9f955", "patch": "@@ -1,3 +1,8 @@\n+2003-05-12  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* doc/rtl.texi: Document zero_extract as a valid destination\n+\tof a set insn.\n+\n 2003-05-12  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm/lib1funcs.asm (LSYM): Define -- on ELF prefix a local symbol with"}, {"sha": "58d181fa569a10b1ae4c290dacfcc3ab6c69b691", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70498da39730338bda786e105ecf980194b9f955/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70498da39730338bda786e105ecf980194b9f955/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=70498da39730338bda786e105ecf980194b9f955", "patch": "@@ -2368,9 +2368,9 @@ the operands of these.\n @item (set @var{lval} @var{x})\n Represents the action of storing the value of @var{x} into the place\n represented by @var{lval}.  @var{lval} must be an expression\n-representing a place that can be stored in: @code{reg} (or @code{subreg}\n-or @code{strict_low_part}), @code{mem}, @code{pc}, @code{parallel}, or\n-@code{cc0}.\n+representing a place that can be stored in: @code{reg} (or @code{subreg},\n+@code{strict_low_part} or @code{zero_extract}), @code{mem}, @code{pc},\n+@code{parallel}, or @code{cc0}.\n \n If @var{lval} is a @code{reg}, @code{subreg} or @code{mem}, it has a\n machine mode; then @var{x} must be valid for that mode.\n@@ -2383,10 +2383,10 @@ rest of the register receives an undefined value.  Likewise, if\n the mode of the register, the rest of the register can be changed in\n an undefined way.\n \n-If @var{lval} is a @code{strict_low_part} of a @code{subreg}, then the\n-part of the register specified by the machine mode of the\n-@code{subreg} is given the value @var{x} and the rest of the register\n-is not changed.\n+If @var{lval} is a @code{strict_low_part} or @code{zero_extract} \n+of a @code{subreg}, then the part of the register specified by the\n+machine mode of the @code{subreg} is given the value @var{x} and\n+the rest of the register is not changed.\n \n If @var{lval} is @code{(cc0)}, it has no machine mode, and @var{x} may\n be either a @code{compare} expression or a value that may have any mode."}]}