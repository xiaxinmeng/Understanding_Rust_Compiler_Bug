{"sha": "03ac8302a60099632ea1f95af14db5dfd83f2970", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNhYzgzMDJhNjAwOTk2MzJlYTFmOTVhZjE0ZGI1ZGZkODNmMjk3MA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-03-05T23:05:38Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-03-05T23:05:38Z"}, "message": "runtime: enable precise GC checks when using stack maps\n    \n    In the runtime there are bad pointer checks that currently don't\n    work with the concervative collector. With stack maps, the GC is\n    precise and the checks should work. Enable them.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/153871\n\nFrom-SVN: r269406", "tree": {"sha": "2d09784730499ce1787c73cf4c43cd8d5d02d6f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d09784730499ce1787c73cf4c43cd8d5d02d6f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03ac8302a60099632ea1f95af14db5dfd83f2970", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03ac8302a60099632ea1f95af14db5dfd83f2970", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03ac8302a60099632ea1f95af14db5dfd83f2970", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03ac8302a60099632ea1f95af14db5dfd83f2970/comments", "author": null, "committer": null, "parents": [{"sha": "934e992600497edec7ca89952d8d6579844a5164", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/934e992600497edec7ca89952d8d6579844a5164", "html_url": "https://github.com/Rust-GCC/gccrs/commit/934e992600497edec7ca89952d8d6579844a5164"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "78dd824fc74e536160dbcf0d514a66432afac8c1", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ac8302a60099632ea1f95af14db5dfd83f2970/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ac8302a60099632ea1f95af14db5dfd83f2970/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=03ac8302a60099632ea1f95af14db5dfd83f2970", "patch": "@@ -1,4 +1,4 @@\n-14e48e756af205a68374c872f3bd03d62ccd70bb\n+3f8ddaa1d773309b6a4b8e4640f8b9675d9764c6\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "dc5e797739ed6ce19ea701e926169dfc689df127", "filename": "libgo/go/runtime/mgcmark.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ac8302a60099632ea1f95af14db5dfd83f2970/libgo%2Fgo%2Fruntime%2Fmgcmark.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ac8302a60099632ea1f95af14db5dfd83f2970/libgo%2Fgo%2Fruntime%2Fmgcmark.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmgcmark.go?ref=03ac8302a60099632ea1f95af14db5dfd83f2970", "patch": "@@ -1106,9 +1106,9 @@ func scanstackblockwithmap(pc, b0, n0 uintptr, ptrmask *uint8, gcw *gcWork) {\n // Preemption must be disabled.\n //go:nowritebarrier\n func shade(b uintptr) {\n-\tif obj, span, objIndex := findObject(b, 0, 0, true); obj != 0 {\n+\tif obj, span, objIndex := findObject(b, 0, 0, !usestackmaps); obj != 0 {\n \t\tgcw := &getg().m.p.ptr().gcw\n-\t\tgreyobject(obj, 0, 0, span, gcw, objIndex, true)\n+\t\tgreyobject(obj, 0, 0, span, gcw, objIndex, !usestackmaps)\n \t}\n }\n "}, {"sha": "bc53de44e666a0b2488fdaade4b11d11afbfcccd", "filename": "libgo/go/runtime/mgcsweep.go", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ac8302a60099632ea1f95af14db5dfd83f2970/libgo%2Fgo%2Fruntime%2Fmgcsweep.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ac8302a60099632ea1f95af14db5dfd83f2970/libgo%2Fgo%2Fruntime%2Fmgcsweep.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmgcsweep.go?ref=03ac8302a60099632ea1f95af14db5dfd83f2970", "patch": "@@ -342,8 +342,10 @@ func (s *mspan) sweep(preserve bool) bool {\n \t// it is not otherwise a problem. So we disable the test for gccgo.\n \tnfreedSigned := int(nfreed)\n \tif nalloc > s.allocCount {\n-\t\t// print(\"runtime: nelems=\", s.nelems, \" nalloc=\", nalloc, \" previous allocCount=\", s.allocCount, \" nfreed=\", nfreed, \"\\n\")\n-\t\t// throw(\"sweep increased allocation count\")\n+\t\tif usestackmaps {\n+\t\t\tprint(\"runtime: nelems=\", s.nelems, \" nalloc=\", nalloc, \" previous allocCount=\", s.allocCount, \" nfreed=\", nfreed, \"\\n\")\n+\t\t\tthrow(\"sweep increased allocation count\")\n+\t\t}\n \n \t\t// For gccgo, adjust the freed count as a signed number.\n \t\tnfreedSigned = int(s.allocCount) - int(nalloc)"}, {"sha": "e2567b35a3f68b48d24226ac4ff5cf5321d440ad", "filename": "libgo/go/runtime/runtime1.go", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ac8302a60099632ea1f95af14db5dfd83f2970/libgo%2Fgo%2Fruntime%2Fruntime1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ac8302a60099632ea1f95af14db5dfd83f2970/libgo%2Fgo%2Fruntime%2Fruntime1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fruntime1.go?ref=03ac8302a60099632ea1f95af14db5dfd83f2970", "patch": "@@ -362,7 +362,9 @@ func parsedebugvars() {\n \t// At that point, if debug.invalidptr is set, we crash.\n \t// This is not a problem, assuming that M1 really is dead and\n \t// the pointer we discovered to it will not be used.\n-\t// debug.invalidptr = 1\n+\tif usestackmaps {\n+\t\tdebug.invalidptr = 1\n+\t}\n \n \tfor p := gogetenv(\"GODEBUG\"); p != \"\"; {\n \t\tfield := \"\""}]}