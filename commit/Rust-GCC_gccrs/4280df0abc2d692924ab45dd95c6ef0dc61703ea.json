{"sha": "4280df0abc2d692924ab45dd95c6ef0dc61703ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI4MGRmMGFiYzJkNjkyOTI0YWI0NWRkOTVjNmVmMGRjNjE3MDNlYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-11-02T08:11:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-11-02T08:11:48Z"}, "message": "tree-vrp.c (evrp_dom_walker::before_dom_children): Call infer_value_range on stmt ops and update value-ranges.\n\n2016-11-02  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vrp.c (evrp_dom_walker::before_dom_children): Call\n\tinfer_value_range on stmt ops and update value-ranges.\n\tDump visited stmts and blocks.\n\t(evrp_dom_walker::push_value_range): Dump changes.\n\t(evrp_dom_walker::pop_value_range): Likewise.\n\t(evrp_dom_walker::try_find_new_range): Avoid noop changes.\n\n\t* gcc.dg/tree-ssa/vrp111.c: New testcase.\n\t* gcc.dg/tree-ssa/pr20702.c: Disable EVRP.\n\t* gcc.dg/tree-ssa/pr21086.c: Likewise.\n\t* gcc.dg/tree-ssa/pr58480.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp08.c: Likewise.\n\nFrom-SVN: r241774", "tree": {"sha": "a595a1c01294129e7de48c90bd9172c950be737f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a595a1c01294129e7de48c90bd9172c950be737f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4280df0abc2d692924ab45dd95c6ef0dc61703ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4280df0abc2d692924ab45dd95c6ef0dc61703ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4280df0abc2d692924ab45dd95c6ef0dc61703ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4280df0abc2d692924ab45dd95c6ef0dc61703ea/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9815687d8e3044e21be5b17fe155299f67c08a01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9815687d8e3044e21be5b17fe155299f67c08a01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9815687d8e3044e21be5b17fe155299f67c08a01"}], "stats": {"total": 160, "additions": 132, "deletions": 28}, "files": [{"sha": "163f5f68ffb416e7195c33923b79212b62de5084", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4280df0abc2d692924ab45dd95c6ef0dc61703ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4280df0abc2d692924ab45dd95c6ef0dc61703ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4280df0abc2d692924ab45dd95c6ef0dc61703ea", "patch": "@@ -1,3 +1,12 @@\n+2016-11-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vrp.c (evrp_dom_walker::before_dom_children): Call\n+\tinfer_value_range on stmt ops and update value-ranges.\n+\tDump visited stmts and blocks.\n+\t(evrp_dom_walker::push_value_range): Dump changes.\n+\t(evrp_dom_walker::pop_value_range): Likewise.\n+\t(evrp_dom_walker::try_find_new_range): Avoid noop changes.\n+\n 2016-11-01  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* emit-rtl.c (prev_nonnote_insn_bb): Change argument type to"}, {"sha": "20ef692bb1963d78625cd80a5bbd5415b154b291", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4280df0abc2d692924ab45dd95c6ef0dc61703ea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4280df0abc2d692924ab45dd95c6ef0dc61703ea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4280df0abc2d692924ab45dd95c6ef0dc61703ea", "patch": "@@ -1,3 +1,11 @@\n+2016-11-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/vrp111.c: New testcase.\n+\t* gcc.dg/tree-ssa/pr20702.c: Disable EVRP.\n+\t* gcc.dg/tree-ssa/pr21086.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr58480.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp08.c: Likewise.\n+\n 2016-11-01  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* gfortran.dg/pr70937.f90: require-effective-target lto."}, {"sha": "c896857748c5a2ff81849b5a75968f52e2ed9bb3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr20702.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4280df0abc2d692924ab45dd95c6ef0dc61703ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20702.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4280df0abc2d692924ab45dd95c6ef0dc61703ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20702.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20702.c?ref=4280df0abc2d692924ab45dd95c6ef0dc61703ea", "patch": "@@ -4,7 +4,7 @@\n    immediate successors of the basic block.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-dominator-opts -fdump-tree-vrp1-details -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fno-tree-dominator-opts -fdisable-tree-evrp -fdump-tree-vrp1-details -fdelete-null-pointer-checks\" } */\n \n extern void bar (int);\n "}, {"sha": "950371ba55d2d1aa1920654b3cf499e7addf431d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21086.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4280df0abc2d692924ab45dd95c6ef0dc61703ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21086.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4280df0abc2d692924ab45dd95c6ef0dc61703ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21086.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21086.c?ref=4280df0abc2d692924ab45dd95c6ef0dc61703ea", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1 -fdump-tree-dce2 -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-vrp1 -fdump-tree-dce2 -fdelete-null-pointer-checks\" } */\n \n int\n foo (int *p)"}, {"sha": "42898e72d4e129e86d0c9b0beb0be812354363b2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr58480.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4280df0abc2d692924ab45dd95c6ef0dc61703ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr58480.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4280df0abc2d692924ab45dd95c6ef0dc61703ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr58480.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr58480.c?ref=4280df0abc2d692924ab45dd95c6ef0dc61703ea", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target { ! keeps_null_pointer_checks } } } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1 -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-vrp1 -fdelete-null-pointer-checks\" } */\n \n extern void eliminate (void);\n extern void* f1 (void *a, void *b) __attribute__((nonnull));"}, {"sha": "c2da30b4b68d1acc110af2d030a7539f4999c7ac", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp08.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4280df0abc2d692924ab45dd95c6ef0dc61703ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp08.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4280df0abc2d692924ab45dd95c6ef0dc61703ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp08.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp08.c?ref=4280df0abc2d692924ab45dd95c6ef0dc61703ea", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-fre -fdump-tree-vrp1-details -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fno-tree-fre -fdisable-tree-evrp -fdump-tree-vrp1-details -fdelete-null-pointer-checks\" } */\n \n /* Compile with -fno-tree-fre -O2 to prevent CSEing *p.  */\n int"}, {"sha": "2511c1964bb4053e2a8b66946d09b69225d30eee", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp111.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4280df0abc2d692924ab45dd95c6ef0dc61703ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp111.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4280df0abc2d692924ab45dd95c6ef0dc61703ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp111.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp111.c?ref=4280df0abc2d692924ab45dd95c6ef0dc61703ea", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-evrp\" } */\n+\n+void foo (void *p) __attribute__((nonnull(1)));\n+\n+void bar (void *p)\n+{\n+  foo (p);\n+  if (!p)\n+    __builtin_abort ();\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"abort\" \"evrp\" } } */"}, {"sha": "68fe2acb99727c0176bb85e3eab4fc2a2d40ef8a", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 98, "deletions": 24, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4280df0abc2d692924ab45dd95c6ef0dc61703ea/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4280df0abc2d692924ab45dd95c6ef0dc61703ea/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=4280df0abc2d692924ab45dd95c6ef0dc61703ea", "patch": "@@ -10650,18 +10650,17 @@ class evrp_dom_walker : public dom_walker\n     }\n   virtual edge before_dom_children (basic_block);\n   virtual void after_dom_children (basic_block);\n-  void push_value_range (const_tree var, value_range *vr);\n-  value_range *pop_value_range (const_tree var);\n+  void push_value_range (tree var, value_range *vr);\n+  value_range *pop_value_range (tree var);\n   value_range *try_find_new_range (tree op, tree_code code, tree limit);\n \n   /* Cond_stack holds the old VR.  */\n-  auto_vec<std::pair <const_tree, value_range*> > stack;\n+  auto_vec<std::pair <tree, value_range*> > stack;\n   bitmap need_eh_cleanup;\n   auto_vec<gimple *> stmts_to_fixup;\n   auto_vec<gimple *> stmts_to_remove;\n };\n \n-\n /*  Find new range for OP such that (OP CODE LIMIT) is true.  */\n \n value_range *\n@@ -10679,6 +10678,10 @@ evrp_dom_walker::try_find_new_range (tree op, tree_code code, tree limit)\n      PUSH old value in the stack with the old VR.  */\n   if (vr.type == VR_RANGE || vr.type == VR_ANTI_RANGE)\n     {\n+      if (old_vr->type == vr.type\n+\t  && vrp_operand_equal_p (old_vr->min, vr.min)\n+\t  && vrp_operand_equal_p (old_vr->max, vr.max))\n+\treturn NULL;\n       value_range *new_vr = vrp_value_range_pool.allocate ();\n       *new_vr = vr;\n       return new_vr;\n@@ -10696,7 +10699,10 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n   edge_iterator ei;\n   edge e;\n \n-  push_value_range (NULL_TREE, NULL);\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    fprintf (dump_file, \"Visiting BB%d\\n\", bb->index);\n+\n+  stack.safe_push (std::make_pair (NULL_TREE, (value_range *)NULL));\n \n   edge pred_e = NULL;\n   FOR_EACH_EDGE (e, ei, bb->preds)\n@@ -10723,6 +10729,11 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n \t  && (INTEGRAL_TYPE_P (TREE_TYPE (gimple_cond_lhs (stmt)))\n \t      || POINTER_TYPE_P (TREE_TYPE (gimple_cond_lhs (stmt)))))\n \t{\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    {\n+\t      fprintf (dump_file, \"Visiting controlling predicate \");\n+\t      print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t    }\n \t  /* Entering a new scope.  Try to see if we can find a VR\n \t     here.  */\n \t  tree op1 = gimple_cond_rhs (stmt);\n@@ -10778,6 +10789,11 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n \tcontinue;\n       value_range vr_result = VR_INITIALIZER;\n       bool interesting = stmt_interesting_for_vrp (phi);\n+      if (interesting && dump_file && (dump_flags & TDF_DETAILS))\n+\t{\n+\t  fprintf (dump_file, \"Visiting PHI node \");\n+\t  print_gimple_stmt (dump_file, phi, 0, 0);\n+\t}\n       if (!has_unvisited_preds\n \t  && interesting)\n \textract_range_from_phi_node (phi, &vr_result);\n@@ -10814,6 +10830,12 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n       bool was_noreturn = (is_gimple_call (stmt)\n \t\t\t   && gimple_call_noreturn_p (stmt));\n \n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t{\n+\t  fprintf (dump_file, \"Visiting stmt \");\n+\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t}\n+\n       if (gcond *cond = dyn_cast <gcond *> (stmt))\n \t{\n \t  vrp_visit_cond_stmt (cond, &taken_edge);\n@@ -10825,6 +10847,7 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n \t\tgimple_cond_make_false (cond);\n \t      else\n \t\tgcc_unreachable ();\n+\t      update_stmt (stmt);\n \t    }\n \t}\n       else if (stmt_interesting_for_vrp (stmt))\n@@ -10873,6 +10896,55 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n       else\n \tset_defs_to_varying (stmt);\n \n+      /* See if we can derive a range for any of STMT's operands.  */\n+      tree op;\n+      ssa_op_iter i;\n+      FOR_EACH_SSA_TREE_OPERAND (op, stmt, i, SSA_OP_USE)\n+\t{\n+\t  tree value;\n+\t  enum tree_code comp_code;\n+\n+\t  /* If OP is used in such a way that we can infer a value\n+\t     range for it, and we don't find a previous assertion for\n+\t     it, create a new assertion location node for OP.  */\n+\t  if (infer_value_range (stmt, op, &comp_code, &value))\n+\t    {\n+\t      /* If we are able to infer a nonzero value range for OP,\n+\t\t then walk backwards through the use-def chain to see if OP\n+\t\t was set via a typecast.\n+\t\t If so, then we can also infer a nonzero value range\n+\t\t for the operand of the NOP_EXPR.  */\n+\t      if (comp_code == NE_EXPR && integer_zerop (value))\n+\t\t{\n+\t\t  tree t = op;\n+\t\t  gimple *def_stmt = SSA_NAME_DEF_STMT (t);\n+\t\t  while (is_gimple_assign (def_stmt)\n+\t\t\t && CONVERT_EXPR_CODE_P\n+\t\t\t      (gimple_assign_rhs_code (def_stmt))\n+\t\t\t && TREE_CODE\n+\t\t\t      (gimple_assign_rhs1 (def_stmt)) == SSA_NAME\n+\t\t\t && POINTER_TYPE_P\n+\t\t\t      (TREE_TYPE (gimple_assign_rhs1 (def_stmt))))\n+\t\t    {\n+\t\t      t = gimple_assign_rhs1 (def_stmt);\n+\t\t      def_stmt = SSA_NAME_DEF_STMT (t);\n+\n+\t\t      /* Add VR when (T COMP_CODE value) condition is\n+\t\t\t true.  */\n+\t\t      value_range *op_range\n+\t\t\t= try_find_new_range (t, comp_code, value);\n+\t\t      if (op_range)\n+\t\t\tpush_value_range (t, op_range);\n+\t\t    }\n+\t\t}\n+\t      /* Add VR when (OP COMP_CODE value) condition is true.  */\n+\t      value_range *op_range = try_find_new_range (op,\n+\t\t\t\t\t\t\t  comp_code, value);\n+\t      if (op_range)\n+\t\tpush_value_range (op, op_range);\n+\t    }\n+\t}\n+\n       /* Try folding stmts with the VR discovered.  */\n       bool did_replace\n \t= replace_uses_in (stmt, op_with_constant_singleton_value_range);\n@@ -10938,42 +11010,44 @@ evrp_dom_walker::after_dom_children (basic_block bb ATTRIBUTE_UNUSED)\n   gcc_checking_assert (!stack.is_empty ());\n   while (stack.last ().first != NULL_TREE)\n     pop_value_range (stack.last ().first);\n-  pop_value_range (stack.last ().first);\n+  stack.pop ();\n }\n \n /* Push the Value Range of VAR to the stack and update it with new VR.  */\n \n void\n-evrp_dom_walker::push_value_range (const_tree var, value_range *vr)\n+evrp_dom_walker::push_value_range (tree var, value_range *vr)\n {\n-  if (vr != NULL)\n+  if (SSA_NAME_VERSION (var) >= num_vr_values)\n+    return;\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n-      unsigned ver = SSA_NAME_VERSION (var);\n-      gcc_checking_assert (vr_value);\n-      stack.safe_push (std::make_pair (var, vr_value[ver]));\n-\n-      if (ver < num_vr_values)\n-\tvr_value[ver] = vr;\n+      fprintf (dump_file, \"pushing new range for \");\n+      print_generic_expr (dump_file, var, 0);\n+      fprintf (dump_file, \": \");\n+      dump_value_range (dump_file, vr);\n+      fprintf (dump_file, \"\\n\");\n     }\n-  else\n-    stack.safe_push (std::make_pair (var, vr));\n+  stack.safe_push (std::make_pair (var, get_value_range (var)));\n+  vr_value[SSA_NAME_VERSION (var)] = vr;\n }\n \n /* Pop the Value Range from the vrp_stack and update VAR with it.  */\n \n value_range *\n-evrp_dom_walker::pop_value_range (const_tree var)\n+evrp_dom_walker::pop_value_range (tree var)\n {\n   value_range *vr = stack.last ().second;\n-  if (vr != NULL)\n+  gcc_checking_assert (var == stack.last ().first);\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n-      unsigned ver = SSA_NAME_VERSION (var);\n-      gcc_checking_assert (var == stack.last ().first);\n-      gcc_checking_assert (vr_value);\n-\n-      if (ver < num_vr_values)\n-\tvr_value[ver] = vr;\n+      fprintf (dump_file, \"popping range for \");\n+      print_generic_expr (dump_file, var, 0);\n+      fprintf (dump_file, \", restoring \");\n+      dump_value_range (dump_file, vr);\n+      fprintf (dump_file, \"\\n\");\n     }\n+  vr_value[SSA_NAME_VERSION (var)] = vr;\n   stack.pop ();\n   return vr;\n }"}]}