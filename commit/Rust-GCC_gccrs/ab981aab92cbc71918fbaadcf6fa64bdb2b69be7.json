{"sha": "ab981aab92cbc71918fbaadcf6fa64bdb2b69be7", "node_id": "C_kwDOANBUbNoAKGFiOTgxYWFiOTJjYmM3MTkxOGZiYWFkY2Y2ZmE2NGJkYjJiNjliZTc", "commit": {"author": {"name": "Arjun Shankar", "email": "arjun@redhat.com", "date": "2022-06-21T10:12:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-06-21T10:13:52Z"}, "message": "match.pd: Remove \"+ 0x80000000\" in int comparisons [PR94899]\n\nExpressions of the form \"X + CST < Y + CST\" where:\n\n* CST is an unsigned integer constant with only the MSB set, and\n* X and Y's types have integer conversion ranks <= CST's\n\ncan be simplified to \"(signed) X < (signed) Y\".\n\nThis is because, assuming a 32-bit signed numbers,\n(unsigned) INT_MIN + 0x80000000 is 0, and\n(unsigned) INT_MAX + 0x80000000 is UINT_MAX.\n\ni.e. the result increases monotonically with signed input.\n\nThis means:\n((signed) X < (signed) Y) iff (X + 0x80000000 < Y + 0x80000000)\n\ngcc/\n\tPR tree-optimization/94899\n\t* match.pd (X + C < Y + C -> (signed) X < (signed) Y, if C is\n\t0x80000000): New simplification.\ngcc/testsuite/\n\t* gcc.dg/pr94899.c: New test.", "tree": {"sha": "f655a675752e9fd0e7a2c0b6f3d07fff26dcd8be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f655a675752e9fd0e7a2c0b6f3d07fff26dcd8be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab981aab92cbc71918fbaadcf6fa64bdb2b69be7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab981aab92cbc71918fbaadcf6fa64bdb2b69be7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab981aab92cbc71918fbaadcf6fa64bdb2b69be7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab981aab92cbc71918fbaadcf6fa64bdb2b69be7/comments", "author": {"login": "submachine", "id": 1934512, "node_id": "MDQ6VXNlcjE5MzQ1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1934512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/submachine", "html_url": "https://github.com/submachine", "followers_url": "https://api.github.com/users/submachine/followers", "following_url": "https://api.github.com/users/submachine/following{/other_user}", "gists_url": "https://api.github.com/users/submachine/gists{/gist_id}", "starred_url": "https://api.github.com/users/submachine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/submachine/subscriptions", "organizations_url": "https://api.github.com/users/submachine/orgs", "repos_url": "https://api.github.com/users/submachine/repos", "events_url": "https://api.github.com/users/submachine/events{/privacy}", "received_events_url": "https://api.github.com/users/submachine/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0c30fe3b888f20215f3e040d21b62b603804ca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0c30fe3b888f20215f3e040d21b62b603804ca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0c30fe3b888f20215f3e040d21b62b603804ca9"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "4a570894b2e91643ad5441dfa2d20f845218d2c2", "filename": "gcc/match.pd", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab981aab92cbc71918fbaadcf6fa64bdb2b69be7/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab981aab92cbc71918fbaadcf6fa64bdb2b69be7/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=ab981aab92cbc71918fbaadcf6fa64bdb2b69be7", "patch": "@@ -2089,6 +2089,19 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (@0))\n        && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@0)))\n    (op @0 @1))))\n+\n+/* As a special case, X + C < Y + C is the same as (signed) X < (signed) Y\n+   when C is an unsigned integer constant with only the MSB set, and X and\n+   Y have types of equal or lower integer conversion rank than C's.  */\n+(for op (lt le ge gt)\n+ (simplify\n+  (op (plus @1 INTEGER_CST@0) (plus @2 @0))\n+  (if (INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+       && TYPE_UNSIGNED (TREE_TYPE (@0))\n+       && wi::only_sign_bit_p (wi::to_wide (@0)))\n+   (with { tree stype = signed_type_for (TREE_TYPE (@0)); }\n+    (op (convert:stype @1) (convert:stype @2))))))\n+\n /* For equality and subtraction, this is also true with wrapping overflow.  */\n (for op (eq ne minus)\n  (simplify"}, {"sha": "9fad057e4d2c3c11583b35b49b8a199f7b7bb12f", "filename": "gcc/testsuite/gcc.dg/pr94899.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab981aab92cbc71918fbaadcf6fa64bdb2b69be7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94899.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab981aab92cbc71918fbaadcf6fa64bdb2b69be7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94899.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94899.c?ref=ab981aab92cbc71918fbaadcf6fa64bdb2b69be7", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+typedef __INT16_TYPE__ int16_t;\n+typedef __INT32_TYPE__ int32_t;\n+typedef __UINT16_TYPE__ uint16_t;\n+typedef __UINT32_TYPE__ uint32_t;\n+\n+#define MAGIC (~ (uint32_t) 0 / 2 + 1)\n+\n+int\n+f_i16_i16 (int16_t x, int16_t y)\n+{\n+  return x + MAGIC < y + MAGIC;\n+}\n+\n+int\n+f_i16_i32 (int16_t x, int32_t y)\n+{\n+  return x + MAGIC < y + MAGIC;\n+}\n+\n+int\n+f_i32_i32 (int32_t x, int32_t y)\n+{\n+  return x + MAGIC < y + MAGIC;\n+}\n+\n+int\n+f_u32_i32 (uint32_t x, int32_t y)\n+{\n+  return x + MAGIC < y + MAGIC;\n+}\n+\n+int\n+f_u32_u32 (uint32_t x, uint32_t y)\n+{\n+  return x + MAGIC < y + MAGIC;\n+}\n+\n+int\n+f_i32_i32_sub (int32_t x, int32_t y)\n+{\n+  return x - MAGIC < y - MAGIC;\n+}\n+\n+/* The addition/subtraction of constants should be optimized away.  */\n+/* { dg-final { scan-tree-dump-not \" \\\\+ \" \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-not \" \\\\- \" \"optimized\"} } */"}]}