{"sha": "f8f5715606a4a455327874847ccc91f4617bb4de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhmNTcxNTYwNmE0YTQ1NTMyNzg3NDg0N2NjYzkxZjQ2MTdiYjRkZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-06-19T08:03:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-06-19T11:36:46Z"}, "message": "tree-optimization/95761 - fix vector insertion place compute\n\nI missed that indeed SLP permutation code generation can end up\nrefering to a non-last vectorized stmt in the last SLP_TREE_VEC_STMTS\nelement as optimization.  So walk them all.\n\n2020-06-19  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/95761\n\t* tree-vect-slp.c (vect_schedule_slp_instance): Walk all\n\tvectorized stmts for finding the last one.\n\n\t* gcc.dg/torture/pr95761.c: New testcase.", "tree": {"sha": "03b587bdd61a18ca7028c70830944bd3e946c630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03b587bdd61a18ca7028c70830944bd3e946c630"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8f5715606a4a455327874847ccc91f4617bb4de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8f5715606a4a455327874847ccc91f4617bb4de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8f5715606a4a455327874847ccc91f4617bb4de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8f5715606a4a455327874847ccc91f4617bb4de/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bafd12cb22e83b7da8946873513a897e48e2900f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bafd12cb22e83b7da8946873513a897e48e2900f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bafd12cb22e83b7da8946873513a897e48e2900f"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "65ee0fc1c11a6fca02888d1431a46dfd584f5262", "filename": "gcc/testsuite/gcc.dg/torture/pr95761.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f5715606a4a455327874847ccc91f4617bb4de/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr95761.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f5715606a4a455327874847ccc91f4617bb4de/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr95761.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr95761.c?ref=f8f5715606a4a455327874847ccc91f4617bb4de", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+\n+typedef int a[10];\n+typedef struct {\n+  a b;\n+  a c;\n+  a d;\n+  a e;\n+} f;\n+f g;\n+int *j;\n+void k() {\n+  for (;;) {\n+    a l;\n+    j[0] = g.b[0];\n+    int *h = g.d;\n+    int i = 0;\n+    for (; i < 10; i++)\n+      h[i] = l[0] - g.e[0];\n+    h = g.e;\n+    i = 0;\n+    for (; i < 10; i++)\n+      h[i] = l[1] + g.e[i];\n+  }\n+}"}, {"sha": "84b97270cd190d93c84f1ef11d0cf04304389fdd", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f5715606a4a455327874847ccc91f4617bb4de/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f5715606a4a455327874847ccc91f4617bb4de/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=f8f5715606a4a455327874847ccc91f4617bb4de", "patch": "@@ -4199,7 +4199,6 @@ vect_schedule_slp_instance (vec_info *vinfo,\n     {\n       /* Or if we do not have 1:1 matching scalar stmts emit after the\n \t children vectorized defs.  */\n-      gimple *last_in_child;\n       gimple *last_stmt = NULL;\n       FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), i, child)\n \t/* ???  With only external defs the following breaks.  Note\n@@ -4208,11 +4207,15 @@ vect_schedule_slp_instance (vec_info *vinfo,\n \tif (SLP_TREE_DEF_TYPE (child) == vect_internal_def)\n \t  {\n \t    /* We are emitting all vectorized stmts in the same place and\n-\t       the last one is the last.  */\n-\t    last_in_child = SLP_TREE_VEC_STMTS (child).last ();\n-\t    if (!last_stmt\n-\t\t|| vect_stmt_dominates_stmt_p (last_stmt, last_in_child))\n-\t      last_stmt = last_in_child;\n+\t       the last one is the last.\n+\t       ???  Unless we have a load permutation applied and that\n+\t       figures to re-use an earlier generated load.  */\n+\t    unsigned j;\n+\t    gimple *vstmt;\n+\t    FOR_EACH_VEC_ELT (SLP_TREE_VEC_STMTS (child), j, vstmt)\n+\t      if (!last_stmt\n+\t\t  || vect_stmt_dominates_stmt_p (last_stmt, vstmt))\n+\t\tlast_stmt = vstmt;\n \t  }\n       if (is_a <gphi *> (last_stmt))\n \tsi = gsi_after_labels (gimple_bb (last_stmt));"}]}