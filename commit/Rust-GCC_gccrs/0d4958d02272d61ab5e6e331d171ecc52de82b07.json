{"sha": "0d4958d02272d61ab5e6e331d171ecc52de82b07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ0OTU4ZDAyMjcyZDYxYWI1ZTZlMzMxZDE3MWVjYzUyZGU4MmIwNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2009-10-22T13:31:48Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2009-10-22T13:31:48Z"}, "message": "re PR tree-optimization/40556 (ICE in IPA-CP with recursion)\n\n\n\t* ipa-cp.c (ipcp_read_summary): Remove now invalid FIXME and\n\tflag_ltrans check.\n\t* ipa-inline.c (cgraph_mark_inline_edge,\n\tcgraph_decide_inlining_of_small_function,\n\tcgraph_decide_inlining, inline_read_summary): Disable indirect inlining\n\tfor WPA for time being.\n\n\tPR tree-optimize/40556                                                                                                                                         \n\t* ipa-inline.c (cgraph_early_inlining): Fix iterations condition.\n\nFix PR number for earlier patch to:\n\tPR lto/41730\n\nFrom-SVN: r153456", "tree": {"sha": "6cd22e449598bc92ae7760c5173f67597c593213", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cd22e449598bc92ae7760c5173f67597c593213"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d4958d02272d61ab5e6e331d171ecc52de82b07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d4958d02272d61ab5e6e331d171ecc52de82b07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d4958d02272d61ab5e6e331d171ecc52de82b07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d4958d02272d61ab5e6e331d171ecc52de82b07/comments", "author": null, "committer": null, "parents": [{"sha": "848af81ed5f0334198c9f8247351191b360dbe2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/848af81ed5f0334198c9f8247351191b360dbe2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/848af81ed5f0334198c9f8247351191b360dbe2d"}], "stats": {"total": 46, "additions": 26, "deletions": 20}, "files": [{"sha": "d93585473e1fec9da4c7602c662f180d0509d5e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4958d02272d61ab5e6e331d171ecc52de82b07/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4958d02272d61ab5e6e331d171ecc52de82b07/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d4958d02272d61ab5e6e331d171ecc52de82b07", "patch": "@@ -1,11 +1,23 @@\n+2009-10-22  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-cp.c (ipcp_read_summary): Remove now invalid FIXME and\n+\tflag_ltrans check.\n+\t* ipa-inline.c (cgraph_mark_inline_edge,\n+\tcgraph_decide_inlining_of_small_function,\n+\tcgraph_decide_inlining, inline_read_summary): Disable indirect inlining\n+\tfor WPA for time being.\n+\n+\tPR tree-optimize/40556                                                                                                                                         \n+\t* ipa-inline.c (cgraph_early_inlining): Fix iterations condition.\n+\n 2009-10-22  Richard Guenther  <rguenther@suse.de>\n \n \t* lto-streamer.h (lto_symtab_clear_resolution): Remove.\n \t* lto-symtab.c (lto_symtab_clear_resolution): Likewise.\n \n 2009-10-22  Jan Hubicka  <jh@suse.cz>\n \n-\tPR tree-optimize/40556\n+\tPR lto/41730\n \t* ipa-reference.c (has_proper_scope_for_analysis): Add fixme about\n \tglobal vars.\n \t(check_call): Handle only indirect calls."}, {"sha": "79ff16e0e7f137c26449e961d2ebbe4a94672eab", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4958d02272d61ab5e6e331d171ecc52de82b07/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4958d02272d61ab5e6e331d171ecc52de82b07/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=0d4958d02272d61ab5e6e331d171ecc52de82b07", "patch": "@@ -1302,13 +1302,7 @@ ipcp_read_summary (void)\n static bool\n cgraph_gate_cp (void)\n {\n-  /* FIXME lto.  IPA-CP does not tolerate running when the inlining decisions\n-     have not been applied.  This happens when WPA modifies the callgraph.\n-     Since those decisions are not applied until after all the IPA passes\n-     have been run in LTRANS, this means that IPA passes may see partially\n-     modified callgraphs.  The solution to this is to apply WPA decisions\n-     early during LTRANS.  */\n-  return flag_ipa_cp && !flag_ltrans;\n+  return flag_ipa_cp;\n }\n \n struct ipa_opt_pass_d pass_ipa_cp ="}, {"sha": "81c3379ca2ec77cecb1daa76fc4b5148627afbdf", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4958d02272d61ab5e6e331d171ecc52de82b07/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4958d02272d61ab5e6e331d171ecc52de82b07/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=0d4958d02272d61ab5e6e331d171ecc52de82b07", "patch": "@@ -310,7 +310,7 @@ cgraph_mark_inline_edge (struct cgraph_edge *e, bool update_original,\n     overall_size -= orig_size;\n   ncalls_inlined++;\n \n-  if (flag_indirect_inlining)\n+  if (flag_indirect_inlining && !flag_wpa)\n     return ipa_propagate_indirect_call_infos (curr, new_edges);\n   else\n     return false;\n@@ -876,7 +876,7 @@ cgraph_decide_inlining_of_small_functions (void)\n   int min_size, max_size;\n   VEC (cgraph_edge_p, heap) *new_indirect_edges = NULL;\n \n-  if (flag_indirect_inlining)\n+  if (flag_indirect_inlining && !flag_wpa)\n     new_indirect_edges = VEC_alloc (cgraph_edge_p, heap, 8);\n \n   if (dump_file)\n@@ -1023,10 +1023,10 @@ cgraph_decide_inlining_of_small_functions (void)\n \t  if (where->global.inlined_to)\n \t    where = where->global.inlined_to;\n \t  if (!cgraph_decide_recursive_inlining (where,\n-\t\t\t\t\t\t flag_indirect_inlining\n+\t\t\t\t\t\t flag_indirect_inlining && !flag_wpa\n \t\t\t\t\t\t ? &new_indirect_edges : NULL))\n \t    continue;\n-\t  if (flag_indirect_inlining)\n+\t  if (flag_indirect_inlining && !flag_wpa)\n \t    add_new_edges_to_heap (heap, new_indirect_edges);\n           update_callee_keys (heap, where, updated_nodes);\n \t}\n@@ -1045,7 +1045,7 @@ cgraph_decide_inlining_of_small_functions (void)\n \t    }\n \t  callee = edge->callee;\n \t  cgraph_mark_inline_edge (edge, true, &new_indirect_edges);\n-\t  if (flag_indirect_inlining)\n+\t  if (flag_indirect_inlining && !flag_wpa)\n \t    add_new_edges_to_heap (heap, new_indirect_edges);\n \n \t  update_callee_keys (heap, callee, updated_nodes);\n@@ -1114,7 +1114,7 @@ cgraph_decide_inlining (void)\n   int initial_size = 0;\n \n   cgraph_remove_function_insertion_hook (function_insertion_hook_holder);\n-  if (in_lto_p && flag_indirect_inlining)\n+  if (in_lto_p && flag_indirect_inlining && !flag_wpa)\n     ipa_update_after_lto_read ();\n \n   max_count = 0;\n@@ -1268,7 +1268,7 @@ cgraph_decide_inlining (void)\n     }\n \n   /* Free ipa-prop structures if they are no longer needed.  */\n-  if (flag_indirect_inlining)\n+  if (flag_indirect_inlining && !flag_wpa)\n     free_all_ipa_structures_after_iinln ();\n \n   if (dump_file)\n@@ -1589,10 +1589,10 @@ cgraph_early_inlining (void)\n \n   if (sorrycount || errorcount)\n     return 0;\n-  while (cgraph_decide_inlining_incrementally (node,\n-  \t\t\t\t\t       iterations\n-\t\t\t\t\t       ? INLINE_SIZE_NORECURSIVE : INLINE_SIZE, 0)\n-\t && iterations < PARAM_VALUE (PARAM_EARLY_INLINER_MAX_ITERATIONS))\n+  while (iterations < PARAM_VALUE (PARAM_EARLY_INLINER_MAX_ITERATIONS)\n+         && cgraph_decide_inlining_incrementally (node,\n+  \t\t\t\t\t          iterations\n+\t\t\t\t\t          ? INLINE_SIZE_NORECURSIVE : INLINE_SIZE, 0))\n     {\n       timevar_push (TV_INTEGRATION);\n       todo |= optimize_inline_calls (current_function_decl);\n@@ -1975,7 +1975,7 @@ inline_transform (struct cgraph_node *node)\n static void \n inline_read_summary (void)\n {\n-  if (flag_indirect_inlining)\n+  if (flag_indirect_inlining && !flag_wpa)\n     {\n       ipa_register_cgraph_hooks ();\n       if (!flag_ipa_cp)"}]}