{"sha": "38302a21028c448f1082f2cad5d1f36c78559138", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgzMDJhMjEwMjhjNDQ4ZjEwODJmMmNhZDVkMWYzNmM3ODU1OTEzOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-05-05T22:48:29Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-05-05T22:48:29Z"}, "message": "re PR target/70873 ([7 Regressio] 20% performance regression at 482.sphinx3 after r235442 with -O2 -m32 on Haswell.)\n\n\tPR target/70873\n\t* config/i386/i386-protos.h (ix86_standard_x87sse_constant_load_p):\n\tNew prototype.\n\t* config/i386/i386.c (ix86_standard_x87sse_constant_load_p): New.\n\t* config/i386/i386.md (push mem splitter): Use find_constant_src in\n\tthe splitter condition.\n\t(FP load splitter): Use ix86_standard_x87sse_constant_load_p in\n\tthe splitter condition.\n\t(FP float_extend load splitter): Ditto.\n\nFrom-SVN: r235936", "tree": {"sha": "479f3afcfd06d291ca297c18fae1dd5a02368f8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/479f3afcfd06d291ca297c18fae1dd5a02368f8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38302a21028c448f1082f2cad5d1f36c78559138", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38302a21028c448f1082f2cad5d1f36c78559138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38302a21028c448f1082f2cad5d1f36c78559138", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38302a21028c448f1082f2cad5d1f36c78559138/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c366c550730c9ac4e2a56506040f0a49adf8f76b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c366c550730c9ac4e2a56506040f0a49adf8f76b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c366c550730c9ac4e2a56506040f0a49adf8f76b"}], "stats": {"total": 77, "additions": 44, "deletions": 33}, "files": [{"sha": "6bf86daa042e472c29599c4e8701cd6e7766eb1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38302a21028c448f1082f2cad5d1f36c78559138/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38302a21028c448f1082f2cad5d1f36c78559138/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38302a21028c448f1082f2cad5d1f36c78559138", "patch": "@@ -1,8 +1,20 @@\n+2016-05-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/70873\n+\t* config/i386/i386-protos.h (ix86_standard_x87sse_constant_load_p):\n+\tNew prototype.\n+\t* config/i386/i386.c (ix86_standard_x87sse_constant_load_p): New.\n+\t* config/i386/i386.md (push mem splitter): Use find_constant_src in\n+\tthe splitter condition.\n+\t(FP load splitter): Use ix86_standard_x87sse_constant_load_p in\n+\tthe splitter condition.\n+\t(FP float_extend load splitter): Ditto.\n+\n 2016-05-05  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (peehole2 patterns): Change true_regnum\n-\tto REGNUM in all peephole2 patterns.\n-\t(post-reload splitters): Change true_regnum to REGNUM in\n+\tto REGNO in all peephole2 patterns.\n+\t(post-reload splitters): Change true_regnum to REGNO in\n \tpost-reload splitters.\n \t(zero_extend splitters): Use general_reg_operand and\n \tnonimmediate_gr_operand predicates."}, {"sha": "447f67e2dff7fa566d399b7b2f95e568652a8fe7", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38302a21028c448f1082f2cad5d1f36c78559138/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38302a21028c448f1082f2cad5d1f36c78559138/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=38302a21028c448f1082f2cad5d1f36c78559138", "patch": "@@ -52,6 +52,7 @@ extern const char *standard_80387_constant_opcode (rtx);\n extern rtx standard_80387_constant_rtx (int);\n extern int standard_sse_constant_p (rtx, machine_mode);\n extern const char *standard_sse_constant_opcode (rtx_insn *, rtx);\n+extern bool ix86_standard_x87sse_constant_load_p (const rtx_insn *, rtx);\n extern bool symbolic_reference_mentioned_p (rtx);\n extern bool extended_reg_mentioned_p (rtx);\n extern bool x86_extended_QIreg_mentioned_p (rtx_insn *);"}, {"sha": "05476f37449e932e6441949343c39186a62b4a3c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38302a21028c448f1082f2cad5d1f36c78559138/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38302a21028c448f1082f2cad5d1f36c78559138/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=38302a21028c448f1082f2cad5d1f36c78559138", "patch": "@@ -11219,6 +11219,26 @@ standard_sse_constant_opcode (rtx_insn *insn, rtx x)\n   gcc_unreachable ();\n }\n \n+/* Returns true if INSN can be transformed from a memory load\n+   to a supported FP constant load.  */\n+\n+bool\n+ix86_standard_x87sse_constant_load_p (const rtx_insn *insn, rtx dst)\n+{\n+  rtx src = find_constant_src (insn);\n+\n+  gcc_assert (REG_P (dst));\n+\n+  if (src == NULL\n+      || (SSE_REGNO_P (REGNO (dst))\n+\t  && standard_sse_constant_p (src, GET_MODE (dst)) != 1)\n+      || (STACK_REGNO_P (REGNO (dst))\n+\t   && standard_80387_constant_p (src) < 1))\n+    return false;\n+\n+  return true;\n+}\n+\n /* Returns true if OP contains a symbol reference */\n \n bool"}, {"sha": "0bf01ab1fadf5a123414ce50d15b82ab991a0597", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 9, "deletions": 31, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38302a21028c448f1082f2cad5d1f36c78559138/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38302a21028c448f1082f2cad5d1f36c78559138/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=38302a21028c448f1082f2cad5d1f36c78559138", "patch": "@@ -3072,14 +3072,10 @@\n (define_split\n   [(set (match_operand:SF 0 \"push_operand\")\n \t(match_operand:SF 1 \"memory_operand\"))]\n-  \"reload_completed\"\n+  \"reload_completed\n+   && find_constant_src (insn)\"\n   [(set (match_dup 0) (match_dup 2))]\n-{\n-  operands[2] = find_constant_src (curr_insn);\n-\n-  if (operands[2] == NULL_RTX)\n-    FAIL;\n-})\n+  \"operands[2] = find_constant_src (curr_insn);\")\n \n (define_split\n   [(set (match_operand 0 \"push_operand\")\n@@ -3601,39 +3597,21 @@\n    && (GET_MODE (operands[0]) == TFmode\n        || GET_MODE (operands[0]) == XFmode\n        || GET_MODE (operands[0]) == DFmode\n-       || GET_MODE (operands[0]) == SFmode)\"\n+       || GET_MODE (operands[0]) == SFmode)\n+   && ix86_standard_x87sse_constant_load_p (insn, operands[0])\"\n   [(set (match_dup 0) (match_dup 2))]\n-{\n-  operands[2] = find_constant_src (curr_insn);\n-\n-  if (operands[2] == NULL_RTX\n-      || (SSE_REGNO_P (REGNO (operands[0]))\n-\t  && standard_sse_constant_p (operands[2],\n-\t\t\t\t      GET_MODE (operands[0])) != 1)\n-      || (STACK_REGNO_P (REGNO (operands[0]))\n-\t   && standard_80387_constant_p (operands[2]) < 1))\n-    FAIL;\n-})\n+  \"operands[2] = find_constant_src (curr_insn);\")\n \n (define_split\n   [(set (match_operand 0 \"any_fp_register_operand\")\n \t(float_extend (match_operand 1 \"memory_operand\")))]\n   \"reload_completed\n    && (GET_MODE (operands[0]) == TFmode\n        || GET_MODE (operands[0]) == XFmode\n-       || GET_MODE (operands[0]) == DFmode)\"\n+       || GET_MODE (operands[0]) == DFmode)\n+   && ix86_standard_x87sse_constant_load_p (insn, operands[0])\"\n   [(set (match_dup 0) (match_dup 2))]\n-{\n-  operands[2] = find_constant_src (curr_insn);\n-\n-  if (operands[2] == NULL_RTX\n-      || (SSE_REGNO_P (REGNO (operands[0]))\n-\t  && standard_sse_constant_p (operands[2],\n-\t\t\t\t      GET_MODE (operands[0])) != 1)\n-      || (STACK_REGNO_P (REGNO (operands[0]))\n-\t   && standard_80387_constant_p (operands[2]) < 1))\n-    FAIL;\n-})\n+  \"operands[2] = find_constant_src (curr_insn);\")\n \n ;; Split the load of -0.0 or -1.0 into fldz;fchs or fld1;fchs sequence\n (define_split"}]}