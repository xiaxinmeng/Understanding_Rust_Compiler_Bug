{"sha": "28cefcd2b6d1d5c7a7683f8c72def31fcc30b89e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhjZWZjZDJiNmQxZDVjN2E3NjgzZjhjNzJkZWYzMWZjYzMwYjg5ZQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@cygnus.co.uk", "date": "2000-01-04T11:49:01Z"}, "committer": {"name": "Bernd Schmidt", "email": "crux@gcc.gnu.org", "date": "2000-01-04T11:49:01Z"}, "message": "Restrict i386 flag setting shift patterns\n\nFrom-SVN: r31202", "tree": {"sha": "de189705fd891e2d5ee0bbd220337e81a37f9952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de189705fd891e2d5ee0bbd220337e81a37f9952"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28cefcd2b6d1d5c7a7683f8c72def31fcc30b89e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28cefcd2b6d1d5c7a7683f8c72def31fcc30b89e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28cefcd2b6d1d5c7a7683f8c72def31fcc30b89e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28cefcd2b6d1d5c7a7683f8c72def31fcc30b89e/comments", "author": null, "committer": null, "parents": [{"sha": "c8b313e75faf4cbf115dac9ae6b50252aef9c0d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8b313e75faf4cbf115dac9ae6b50252aef9c0d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8b313e75faf4cbf115dac9ae6b50252aef9c0d0"}], "stats": {"total": 179, "additions": 62, "deletions": 117}, "files": [{"sha": "7ff670c5351a55660b102eb43e173aa5db2d7908", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28cefcd2b6d1d5c7a7683f8c72def31fcc30b89e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28cefcd2b6d1d5c7a7683f8c72def31fcc30b89e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28cefcd2b6d1d5c7a7683f8c72def31fcc30b89e", "patch": "@@ -1,3 +1,11 @@\n+2000-01-04  Bernd Schmidt  <bernds@cygnus.co.uk>\n+\n+\t* i386.md (ashlsi3_cmpno): Don't accept variables shifts.\n+\t(ashlhi3_cmpno, ashlqi3_cmpno, ashrsi3_cmpno, ashrhi3_cmpno,\n+\tashrqi3_cmpno, lshrsi3_cmpno, lshrhi3_cmpno, lshrqi3_cmpno): Likewise.\n+\t(rotlsi3_cmpno, rotlhi3_cmpno, rotlqi3_cmpno, rotrsi3_cmpno,\n+\trotrhi3_cmpno, rotrqi3_cmpno): Likewise.\n+\n 2000-01-04  Martin von L\ufffdwis  <loewis@informatik.hu-berlin.de>\n \n \t* ginclude/stdbool.h:  Support compilation as C++."}, {"sha": "95bc0750d546e54136a96c8cb2c0f1b2c1453c0b", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 54, "deletions": 117, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28cefcd2b6d1d5c7a7683f8c72def31fcc30b89e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28cefcd2b6d1d5c7a7683f8c72def31fcc30b89e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=28cefcd2b6d1d5c7a7683f8c72def31fcc30b89e", "patch": "@@ -5597,11 +5597,14 @@\n \t\t (match_dup 2)))]\n   \"operands[2] = GEN_INT (1 << INTVAL (operands[2]));\")\n \n+;; This pattern can't accept a variable shift count, since shifts by\n+;; zero don't affect the flags.  We assume that shifts by constant\n+;; zero are optimized away.\n (define_insn \"*ashlsi3_cmpno\"\n   [(set (reg:CCNO 17)\n \t(compare:CCNO\n \t  (ashift:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"cI\"))\n+\t\t     (match_operand:QI 2 \"immediate_operand\" \"I\"))\n \t  (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashift:SI (match_dup 1) (match_dup 2)))]\n@@ -5670,11 +5673,14 @@\n \t   ]\n \t   (const_string \"ishift\")))])\n \n+;; This pattern can't accept a variable shift count, since shifts by\n+;; zero don't affect the flags.  We assume that shifts by constant\n+;; zero are optimized away.\n (define_insn \"*ashlhi3_cmpno\"\n   [(set (reg:CCNO 17)\n \t(compare:CCNO\n \t  (ashift:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"cI\"))\n+\t\t     (match_operand:QI 2 \"immediate_operand\" \"I\"))\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashift:HI (match_dup 1) (match_dup 2)))]\n@@ -5757,11 +5763,14 @@\n \t   ]\n \t   (const_string \"ishift\")))])\n \n+;; This pattern can't accept a variable shift count, since shifts by\n+;; zero don't affect the flags.  We assume that shifts by constant\n+;; zero are optimized away.\n (define_insn \"*ashlqi3_cmpno\"\n   [(set (reg:CCNO 17)\n \t(compare:CCNO\n \t  (ashift:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"cI\"))\n+\t\t     (match_operand:QI 2 \"immediate_operand\" \"I\"))\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(ashift:QI (match_dup 1) (match_dup 2)))]\n@@ -5923,18 +5932,20 @@\n    sar{l}\\\\t{%b2, %0|%0, %b2}\"\n   [(set_attr \"type\" \"ishift\")])\n \n+;; This pattern can't accept a variable shift count, since shifts by\n+;; zero don't affect the flags.  We assume that shifts by constant\n+;; zero are optimized away.\n (define_insn \"*ashrsi3_cmpno\"\n   [(set (reg:CCNO 17)\n \t(compare:CCNO\n-\t  (ashiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t       (match_operand:QI 2 \"nonmemory_operand\" \"I,c\"))\n+\t  (ashiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"immediate_operand\" \"I\"))\n \t  (const_int 0)))\n-   (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,rm\")\n+   (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:SI (match_dup 1) (match_dup 2)))]\n   \"ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"@\n-   sar{l}\\\\t{%2, %0|%0, %2}\n-   sar{l}\\\\t{%b2, %0|%0, %b2}\"\n+   sar{l}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")])\n \n (define_expand \"ashrhi3\"\n@@ -5956,18 +5967,20 @@\n    sar{w}\\\\t{%b2, %0|%0, %b2}\"\n   [(set_attr \"type\" \"ishift\")])\n \n+;; This pattern can't accept a variable shift count, since shifts by\n+;; zero don't affect the flags.  We assume that shifts by constant\n+;; zero are optimized away.\n (define_insn \"*ashrhi3_cmpno\"\n   [(set (reg:CCNO 17)\n \t(compare:CCNO\n-\t  (ashiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t       (match_operand:QI 2 \"nonmemory_operand\" \"I,c\"))\n+\t  (ashiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"immediate_operand\" \"I\"))\n \t  (const_int 0)))\n-   (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,rm\")\n+   (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:HI (match_dup 1) (match_dup 2)))]\n   \"ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n   \"@\n-   sar{w}\\\\t{%2, %0|%0, %2}\n-   sar{w}\\\\t{%b2, %0|%0, %b2}\"\n+   sar{w}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")])\n \n (define_expand \"ashrqi3\"\n@@ -5989,18 +6002,20 @@\n    sar{b}\\\\t{%b2, %0|%0, %b2}\"\n   [(set_attr \"type\" \"ishift\")])\n \n+;; This pattern can't accept a variable shift count, since shifts by\n+;; zero don't affect the flags.  We assume that shifts by constant\n+;; zero are optimized away.\n (define_insn \"*ashrqi3_cmpno\"\n   [(set (reg:CCNO 17)\n \t(compare:CCNO\n-\t  (ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t       (match_operand:QI 2 \"nonmemory_operand\" \"I,c\"))\n+\t  (ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"immediate_operand\" \"I\"))\n \t  (const_int 0)))\n-   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm,rm\")\n+   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:QI (match_dup 1) (match_dup 2)))]\n   \"ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n   \"@\n-   sar{b}\\\\t{%2, %0|%0, %2}\n-   sar{b}\\\\t{%b2, %0|%0, %b2}\"\n+   sar{b}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")])\n \f\n ;; Logical shift instructions\n@@ -6079,18 +6094,20 @@\n    shr{l}\\\\t{%b2, %0|%0, %b2}\"\n   [(set_attr \"type\" \"ishift\")])\n \n+;; This pattern can't accept a variable shift count, since shifts by\n+;; zero don't affect the flags.  We assume that shifts by constant\n+;; zero are optimized away.\n (define_insn \"*lshrsi3_cmpno\"\n   [(set (reg:CCNO 17)\n \t(compare:CCNO\n-\t  (lshiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t       (match_operand:QI 2 \"nonmemory_operand\" \"I,c\"))\n+\t  (lshiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"immediate_operand\" \"I\"))\n \t  (const_int 0)))\n-   (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,rm\")\n+   (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:SI (match_dup 1) (match_dup 2)))]\n   \"ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"@\n-   shr{l}\\\\t{%2, %0|%0, %2}\n-   shr{l}\\\\t{%b2, %0|%0, %b2}\"\n+   shr{l}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")])\n \n (define_expand \"lshrhi3\"\n@@ -6112,18 +6129,20 @@\n    shr{w}\\\\t{%b2, %0|%0, %b2}\"\n   [(set_attr \"type\" \"ishift\")])\n \n+;; This pattern can't accept a variable shift count, since shifts by\n+;; zero don't affect the flags.  We assume that shifts by constant\n+;; zero are optimized away.\n (define_insn \"*lshrhi3_cmpno\"\n   [(set (reg:CCNO 17)\n \t(compare:CCNO\n-\t  (lshiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t       (match_operand:QI 2 \"nonmemory_operand\" \"I,c\"))\n+\t  (lshiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"immediate_operand\" \"I\"))\n \t  (const_int 0)))\n-   (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,rm\")\n+   (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:HI (match_dup 1) (match_dup 2)))]\n   \"ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"@\n-   shr{w}\\\\t{%2, %0|%0, %2}\n-   shr{w}\\\\t{%b2, %0|%0, %b2}\"\n+   shr{w}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")])\n \n (define_expand \"lshrqi3\"\n@@ -6145,18 +6164,20 @@\n    shr{b}\\\\t{%b2, %0|%0, %b2}\"\n   [(set_attr \"type\" \"ishift\")])\n \n+;; This pattern can't accept a variable shift count, since shifts by\n+;; zero don't affect the flags.  We assume that shifts by constant\n+;; zero are optimized away.\n (define_insn \"*lshrqi2_cmpno\"\n   [(set (reg:CCNO 17)\n \t(compare:CCNO\n-\t  (lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t       (match_operand:QI 2 \"nonmemory_operand\" \"I,c\"))\n+\t  (lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"immediate_operand\" \"I\"))\n \t  (const_int 0)))\n-   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm,rm\")\n+   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:QI (match_dup 1) (match_dup 2)))]\n   \"ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n   \"@\n-   shr{b}\\\\t{%2, %0|%0, %2}\n-   shr{b}\\\\t{%b2, %0|%0, %b2}\"\n+   shr{b}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")])\n \f\n ;; Rotate instructions\n@@ -6180,20 +6201,6 @@\n    rol{l}\\\\t{%b2, %0|%0, %b2}\"\n   [(set_attr \"type\" \"ishift\")])\n \n-(define_insn \"*rotlsi3_cmpno\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n-\t  (rotate:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"I,c\"))\n-\t  (const_int 0)))\n-   (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,rm\")\n-\t(rotate:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (ROTATE, SImode, operands)\"\n-  \"@\n-   rol{l}\\\\t{%2, %0|%0, %2}\n-   rol{l}\\\\t{%b2, %0|%0, %b2}\"\n-  [(set_attr \"type\" \"ishift\")])\n-\n (define_expand \"rotlhi3\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n \t(rotate:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n@@ -6213,20 +6220,6 @@\n    rol{w}\\\\t{%b2, %0|%0, %b2}\"\n   [(set_attr \"type\" \"ishift\")])\n \n-(define_insn \"*rotlhi3_cmpno\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n-\t  (rotate:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"I,c\"))\n-\t  (const_int 0)))\n-   (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,rm\")\n-\t(rotate:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (ROTATE, HImode, operands)\"\n-  \"@\n-   rol{w}\\\\t{%2, %0|%0, %2}\n-   rol{w}\\\\t{%b2, %0|%0, %b2}\"\n-  [(set_attr \"type\" \"ishift\")])\n-\n (define_expand \"rotlqi3\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n \t(rotate:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n@@ -6246,20 +6239,6 @@\n    rol{b}\\\\t{%b2, %0|%0, %b2}\"\n   [(set_attr \"type\" \"ishift\")])\n \n-(define_insn \"*rotlqi3_cmpno\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n-\t  (rotate:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"I,c\"))\n-\t  (const_int 0)))\n-   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm,rm\")\n-\t(rotate:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (ROTATE, QImode, operands)\"\n-  \"@\n-   rol{b}\\\\t{%2, %0|%0, %2}\n-   rol{b}\\\\t{%b2, %0|%0, %b2}\"\n-  [(set_attr \"type\" \"ishift\")])\n-\n (define_expand \"rotrsi3\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t(rotatert:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n@@ -6279,20 +6258,6 @@\n    ror{l}\\\\t{%b2, %0|%0, %b2}\"\n   [(set_attr \"type\" \"ishift\")])\n \n-(define_insn \"*rotrsi3_cmpno\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n-\t  (rotatert:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t       (match_operand:QI 2 \"nonmemory_operand\" \"I,c\"))\n-\t  (const_int 0)))\n-   (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,rm\")\n-\t(rotatert:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (ROTATERT, SImode, operands)\"\n-  \"@\n-   ror{l}\\\\t{%2, %0|%0, %2}\n-   ror{l}\\\\t{%b2, %0|%0, %b2}\"\n-  [(set_attr \"type\" \"ishift\")])\n-\n (define_expand \"rotrhi3\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n \t(rotatert:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n@@ -6312,20 +6277,6 @@\n    ror{w}\\\\t{%b2, %0|%0, %b2}\"\n   [(set_attr \"type\" \"ishift\")])\n \n-(define_insn \"*rotrhi3_cmpno\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n-\t  (rotatert:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t       (match_operand:QI 2 \"nonmemory_operand\" \"I,c\"))\n-\t  (const_int 0)))\n-   (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,rm\")\n-\t(rotatert:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (ROTATERT, HImode, operands)\"\n-  \"@\n-   ror{w}\\\\t{%2, %0|%0, %2}\n-   ror{w}\\\\t{%b2, %0|%0, %b2}\"\n-  [(set_attr \"type\" \"ishift\")])\n-\n (define_expand \"rotrqi3\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n \t(rotatert:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n@@ -6344,20 +6295,6 @@\n    ror{b}\\\\t{%2, %0|%0, %2}\n    ror{b}\\\\t{%b2, %0|%0, %b2}\"\n   [(set_attr \"type\" \"ishift\")])\n-\n-(define_insn \"*rotrqi3_cmpno\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n-\t  (rotatert:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t       (match_operand:QI 2 \"nonmemory_operand\" \"I,c\"))\n-\t  (const_int 0)))\n-   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm,rm\")\n-\t(rotatert:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (ROTATERT, QImode, operands)\"\n-  \"@\n-   ror{b}\\\\t{%2, %0|%0, %2}\n-   ror{b}\\\\t{%b2, %0|%0, %b2}\"\n-  [(set_attr \"type\" \"ishift\")])\n \f\n ;; Bit set / bit test instructions\n "}]}