{"sha": "ded17aad241cb2df363f63b514a91dc477d182fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVkMTdhYWQyNDFjYjJkZjM2M2Y2M2I1MTRhOTFkYzQ3N2QxODJmYw==", "commit": {"author": {"name": "Doug Evans", "email": "devans@gcc.gnu.org", "date": "1997-10-20T22:06:10Z"}, "committer": {"name": "Doug Evans", "email": "devans@gcc.gnu.org", "date": "1997-10-20T22:06:10Z"}, "message": "Update sparc docs.\n\nFrom-SVN: r16127", "tree": {"sha": "ecd3d38c86452ae7b14185e461e3f65c4c2a8d73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecd3d38c86452ae7b14185e461e3f65c4c2a8d73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ded17aad241cb2df363f63b514a91dc477d182fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ded17aad241cb2df363f63b514a91dc477d182fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ded17aad241cb2df363f63b514a91dc477d182fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ded17aad241cb2df363f63b514a91dc477d182fc/comments", "author": null, "committer": null, "parents": [{"sha": "ddbd8d361909ab85322137e608bbb1952a7dacc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddbd8d361909ab85322137e608bbb1952a7dacc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddbd8d361909ab85322137e608bbb1952a7dacc7"}], "stats": {"total": 82, "additions": 40, "deletions": 42}, "files": [{"sha": "5934a4375c13b8e06feca2b11f46c2085c18755c", "filename": "gcc/invoke.texi", "status": "modified", "additions": 40, "deletions": 42, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ded17aad241cb2df363f63b514a91dc477d182fc/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ded17aad241cb2df363f63b514a91dc477d182fc/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=ded17aad241cb2df363f63b514a91dc477d182fc", "patch": "@@ -210,15 +210,15 @@ in the following sections.\n -mg  -mgnu  -munix\n \n @emph{SPARC Options}\n--mcpu=@var{cpu  type}\n--mtune=@var{cpu  type}\n+-mcpu=@var{cpu type}\n+-mtune=@var{cpu type}\n+-mcmodel=@var{code model}\n -malign-jumps=@var{num}  -malign-loops=@var{num}\n -malign-functions=@var{num}\n+-m32  -m64\n -mapp-regs  -mbroken-saverestore  -mcypress  -mepilogue\n--mflat  -mfpu  -mfullany  -mhard-float  -mhard-quad-float\n--mimpure-text  -mint32  -mint64  -mlive-g0\n--mlong32  -mlong64  -mmedlow  -mmedany\n--mno-app-regs  -mno-epilogue\n+-mflat  -mfpu  -mhard-float  -mhard-quad-float\n+-mimpure-text  -mlive-g0  -mno-app-regs  -mno-epilogue\n -mno-flat  -mno-fpu  -mno-impure-text\n -mno-stack-bias  -mno-unaligned-doubles\n -msoft-float  -msoft-quad-float  -msparclite  -mstack-bias\n@@ -3080,17 +3080,15 @@ They have been replaced with @samp{-mcpu=xxx}.\n @item -mcpu=@var{cpu_type}\n Set architecture type and instruction scheduling parameters for machine\n type @var{cpu_type}.  Supported values for @var{cpu_type} are\n-@samp{common}, @samp{cypress}, @samp{v8}, @samp{supersparc},\n-@samp{sparclite}, @samp{f930}, @samp{f934},\n-@samp{sparclet}, @samp{90c701}, @samp{v8plus}, @samp{v9},\n-and @samp{ultrasparc}.  Specifying @samp{v9} is only supported on true\n-64 bit targets.\n+@samp{v7}, @samp{cypress}, @samp{v8}, @samp{supersparc},\n+@samp{sparclite}, @samp{f930}, @samp{f934}, @samp{sparclet}, @samp{tsc701},\n+@samp{v8plus}, @samp{v9}, and @samp{ultrasparc}.\n \n @item -mtune=@var{cpu_type}\n Set the instruction scheduling parameters for machine type\n @var{cpu_type}, but do not set the architecture type as the option\n @samp{-mcpu=}@var{cpu_type} would.  The same values for\n-@samp{-mcpu=}@var{cpu_type} are used for @samp{-tune=}@var{cpu_type}.\n+@samp{-mcpu=}@var{cpu_type} are used for @samp{-mtune=}@var{cpu_type}.\n \n @item -malign-loops=@var{num}\n Align loops to a 2 raised to a @var{num} byte boundary.  If\n@@ -3137,36 +3135,36 @@ on SPARC V9 processors in 64 bit environments.\n @item -mlittle-endian\n Generate code for a processor running in little-endian mode.\n \n-@item -mmedlow\n-Generate code for the Medium/Low code model: assume a 32 bit address space.\n-Programs are statically linked, PIC is not supported.  Pointers are still\n-64 bits.\n-\n-It is very likely that a future version of GCC will rename this option.\n-\n-@item -mmedany\n-Generate code for the Medium/Anywhere code model: assume a 32 bit text\n-and a 32 bit data segment, both starting anywhere (determined at link time).\n-Programs are statically linked, PIC is not supported.  Pointers are still\n-64 bits.\n-\n-It is very likely that a future version of GCC will rename this option.\n-\n-@item -mfullany\n-Generate code for the Full/Anywhere code model: assume a full 64 bit\n-address space.  PIC is not supported.\n-\n-It is very likely that a future version of GCC will rename this option.\n-\n-@item -mint64\n-Types long and int are 64 bits.\n-\n-@item -mlong32\n-Types long and int are 32 bits.\n-\n-@item -mlong64\n-@itemx -mint32\n-Type long is 64 bits, and type int is 32 bits.\n+@item -m32\n+@itemx -m64\n+Generate code for a 32 bit or 64 bit environment.\n+The 32 bit environment sets int, long and pointer to 32 bits.\n+The 64 bit environment sets int to 32 bits and long and pointer\n+to 64 bits.\n+\n+@item -mcmodel=medlow\n+Generate code for the Medium/Low code model: the program must be linked\n+in the low 32 bits of the address space.  Pointers are 64 bits.\n+Programs can be statically or dynamically linked.\n+\n+@item -mcmodel=medmid\n+Generate code for the Medium/Middle code model: the program must be linked\n+in the low 44 bits of the address space, the text segment must be less than\n+2G bytes, and data segment must be within 2G of the text segment.\n+Pointers are 64 bits.\n+\n+@item -mcmodel=medany\n+Generate code for the Medium/Anywhere code model: the program may be linked\n+anywhere in the address space, the text segment must be less than\n+2G bytes, and data segment must be within 2G of the text segment.\n+Pointers are 64 bits.\n+\n+@item -mcmodel=embmedany\n+Generate code for the Medium/Anywhere code model for embedded systems:\n+assume a 32 bit text and a 32 bit data segment, both starting anywhere\n+(determined at link time).  Register %g4 points to the base of the\n+data segment.  Pointers still 64 bits.\n+Programs are statically linked, PIC is not supported.\n \n @item -mstack-bias\n @itemx -mno-stack-bias"}]}