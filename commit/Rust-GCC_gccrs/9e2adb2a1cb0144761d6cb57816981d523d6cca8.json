{"sha": "9e2adb2a1cb0144761d6cb57816981d523d6cca8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUyYWRiMmExY2IwMTQ0NzYxZDZjYjU3ODE2OTgxZDUyM2Q2Y2NhOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2001-01-13T21:54:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2001-01-13T21:54:10Z"}, "message": "unroll.c (loop_iterations): If we cannot prove iteration variable is set once in each iteration, punt.\n\n\t* unroll.c (loop_iterations): If we cannot prove iteration variable\n\tis set once in each iteration, punt.\n\nFrom-SVN: r38996", "tree": {"sha": "c409c04d90245a344cb5f9b78de84f492a8190e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c409c04d90245a344cb5f9b78de84f492a8190e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e2adb2a1cb0144761d6cb57816981d523d6cca8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2adb2a1cb0144761d6cb57816981d523d6cca8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e2adb2a1cb0144761d6cb57816981d523d6cca8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2adb2a1cb0144761d6cb57816981d523d6cca8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "63eaee7147226294b3f12223dfe22aecdfa70cef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63eaee7147226294b3f12223dfe22aecdfa70cef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63eaee7147226294b3f12223dfe22aecdfa70cef"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "d775e76da5e77cdf44ec300f8ec0ef6ca705b1d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2adb2a1cb0144761d6cb57816981d523d6cca8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2adb2a1cb0144761d6cb57816981d523d6cca8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e2adb2a1cb0144761d6cb57816981d523d6cca8", "patch": "@@ -1,3 +1,8 @@\n+2001-01-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* unroll.c (loop_iterations): If we cannot prove iteration variable\n+\tis set once in each iteration, punt.\n+\n Sun Jan 14 00:23:15 2001  Denis Chertykov  <denisc@overta.ru>\n \n \t* config/avr/avr.md (\"strlenhi\"): Remove clobber of input address."}, {"sha": "9289595d0397fecf3b5467b1e121189ef5233845", "filename": "gcc/unroll.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2adb2a1cb0144761d6cb57816981d523d6cca8/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2adb2a1cb0144761d6cb57816981d523d6cca8/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=9e2adb2a1cb0144761d6cb57816981d523d6cca8", "patch": "@@ -3577,6 +3577,13 @@ loop_iterations (loop)\n       /* Grab initial value, only useful if it is a constant.  */\n       bl = REG_IV_CLASS (ivs, REGNO (iteration_var));\n       initial_value = bl->initial_value;\n+      if (!bl->biv->always_executed || bl->biv->maybe_multiple)\n+\t{\n+\t  if (loop_dump_stream)\n+\t    fprintf (loop_dump_stream,\n+\t\t     \"Loop iterations: Basic induction var not set once in each iteration.\\n\");\n+\t  return 0;\n+\t}\n \n       increment = biv_total_increment (bl);\n     }\n@@ -3589,6 +3596,14 @@ loop_iterations (loop)\n       if (REGNO (v->src_reg) >= ivs->n_regs)\n \tabort ();\n \n+      if (!v->always_executed || v->maybe_multiple)\n+\t{\n+\t  if (loop_dump_stream)\n+\t    fprintf (loop_dump_stream,\n+\t\t     \"Loop iterations: General induction var not set once in each iteration.\\n\");\n+\t  return 0;\n+\t}\n+\n       bl = REG_IV_CLASS (ivs, REGNO (v->src_reg));\n \n       /* Increment value is mult_val times the increment value of the biv.  */"}]}