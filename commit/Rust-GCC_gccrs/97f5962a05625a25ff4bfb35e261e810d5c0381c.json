{"sha": "97f5962a05625a25ff4bfb35e261e810d5c0381c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdmNTk2MmEwNTYyNWEyNWZmNGJmYjM1ZTI2MWU4MTBkNWMwMzgxYw==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2018-11-02T08:51:04Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2018-11-02T08:51:04Z"}, "message": "Remove SPARC HAVE_AS_REGISTER_PSEUDO_OP\n\n\t* configure.ac (gcc_cv_as_sparc_register_op): Remove.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\t* config/sparc/sparc.c (sparc_output_scratch_registers): Remove\n\tHAVE_AS_REGISTER_PSEUDO_OP guard.\n\t* config/sparc/sparc.h (ASM_ARCH64_SPEC): Remove\n\t!HAVE_AS_REGISTER_PSEUDO_OP support.\n\t(ASM_DECLARE_REGISTER_GLOBAL): Remove HAVE_AS_REGISTER_PSEUDO_OP\n\tguard.\n\nFrom-SVN: r265743", "tree": {"sha": "3db457b82241402dbd522071d2e321d793a94133", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3db457b82241402dbd522071d2e321d793a94133"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97f5962a05625a25ff4bfb35e261e810d5c0381c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97f5962a05625a25ff4bfb35e261e810d5c0381c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97f5962a05625a25ff4bfb35e261e810d5c0381c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97f5962a05625a25ff4bfb35e261e810d5c0381c/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ac67752d795a9d1289c8e893946dc3b6b3a87057", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac67752d795a9d1289c8e893946dc3b6b3a87057", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac67752d795a9d1289c8e893946dc3b6b3a87057"}], "stats": {"total": 64, "additions": 12, "deletions": 52}, "files": [{"sha": "0bfeaf58c5f39f52a86e05113883e362b08ce103", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f5962a05625a25ff4bfb35e261e810d5c0381c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f5962a05625a25ff4bfb35e261e810d5c0381c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97f5962a05625a25ff4bfb35e261e810d5c0381c", "patch": "@@ -1,3 +1,15 @@\n+2018-11-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (gcc_cv_as_sparc_register_op): Remove.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\t* config/sparc/sparc.c (sparc_output_scratch_registers): Remove\n+\tHAVE_AS_REGISTER_PSEUDO_OP guard.\n+\t* config/sparc/sparc.h (ASM_ARCH64_SPEC): Remove\n+\t!HAVE_AS_REGISTER_PSEUDO_OP support.\n+\t(ASM_DECLARE_REGISTER_GLOBAL): Remove HAVE_AS_REGISTER_PSEUDO_OP\n+\tguard.\n+\n 2018-11-02  Richard Biener  <rguenther@suse.de>\n \n \t* dwarf2out.c (build_abbrev_table): Guard lookup_external_ref call"}, {"sha": "67a1e6cfc4cf8021ef5458c5a6bb530d5a8d3305", "filename": "gcc/config.in", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f5962a05625a25ff4bfb35e261e810d5c0381c/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f5962a05625a25ff4bfb35e261e810d5c0381c/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=97f5962a05625a25ff4bfb35e261e810d5c0381c", "patch": "@@ -583,12 +583,6 @@\n #endif\n \n \n-/* Define if your assembler supports .register. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_AS_REGISTER_PSEUDO_OP\n-#endif\n-\n-\n /* Define if your assembler supports R_PPC_REL16 relocs. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_REL16"}, {"sha": "8d982d284f3fbc87b2185dad4628088430e779f9", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f5962a05625a25ff4bfb35e261e810d5c0381c/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f5962a05625a25ff4bfb35e261e810d5c0381c/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=97f5962a05625a25ff4bfb35e261e810d5c0381c", "patch": "@@ -5583,7 +5583,6 @@ sparc_initial_elimination_offset (int to)\n void\n sparc_output_scratch_registers (FILE *file ATTRIBUTE_UNUSED)\n {\n-#ifdef HAVE_AS_REGISTER_PSEUDO_OP\n   int i;\n \n   if (TARGET_ARCH32)\n@@ -5604,7 +5603,6 @@ sparc_output_scratch_registers (FILE *file ATTRIBUTE_UNUSED)\n \t}\n       if (i == 3) i = 5;\n     }\n-#endif\n }\n \n #define PROBE_INTERVAL (1 << STACK_CHECK_PROBE_INTERVAL_EXP)"}, {"sha": "e8d5d2add2031aea5593639f89cf88e0982aae7c", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f5962a05625a25ff4bfb35e261e810d5c0381c/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f5962a05625a25ff4bfb35e261e810d5c0381c/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=97f5962a05625a25ff4bfb35e261e810d5c0381c", "patch": "@@ -365,11 +365,7 @@ extern enum cmodel sparc_cmodel;\n    This is what GAS uses.  Add %(asm_arch) to ASM_SPEC to enable.  */\n \n #define ASM_ARCH32_SPEC \"-32\"\n-#ifdef HAVE_AS_REGISTER_PSEUDO_OP\n #define ASM_ARCH64_SPEC \"-64 -no-undeclared-regs\"\n-#else\n-#define ASM_ARCH64_SPEC \"-64\"\n-#endif\n #define ASM_ARCH_DEFAULT_SPEC \\\n (DEFAULT_ARCH32_P ? ASM_ARCH32_SPEC : ASM_ARCH64_SPEC)\n \n@@ -1197,7 +1193,6 @@ init_cumulative_args (& (CUM), (FNTYPE), (LIBNAME), (FNDECL));\n \n extern GTY(()) char sparc_hard_reg_printed[8];\n \n-#ifdef HAVE_AS_REGISTER_PSEUDO_OP\n #define ASM_DECLARE_REGISTER_GLOBAL(FILE, DECL, REGNO, NAME)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_ARCH64)\t\t\t\t\t\t\t\\\n@@ -1216,8 +1211,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t  }\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n } while (0)\n-#endif\n-\n \f\n /* Emit rtl for profiling.  */\n #define PROFILE_HOOK(LABEL)   sparc_profile_hook (LABEL)"}, {"sha": "a24221d580c26caf16d74cdb87311e3b452d0744", "filename": "gcc/configure", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f5962a05625a25ff4bfb35e261e810d5c0381c/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f5962a05625a25ff4bfb35e261e810d5c0381c/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=97f5962a05625a25ff4bfb35e261e810d5c0381c", "patch": "@@ -25308,38 +25308,6 @@ fi\n     ;;\n \n   sparc*-*-*)\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for .register\" >&5\n-$as_echo_n \"checking assembler for .register... \" >&6; }\n-if ${gcc_cv_as_sparc_register_op+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  gcc_cv_as_sparc_register_op=no\n-  if test x$gcc_cv_as != x; then\n-    $as_echo '.register %g2, #scratch'[] > conftest.s\n-    if { ac_try='$gcc_cv_as $gcc_cv_as_flags  -o conftest.o conftest.s >&5'\n-  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; }; }\n-    then\n-\tgcc_cv_as_sparc_register_op=yes\n-    else\n-      echo \"configure: failed program was\" >&5\n-      cat conftest.s >&5\n-    fi\n-    rm -f conftest.o conftest.s\n-  fi\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_sparc_register_op\" >&5\n-$as_echo \"$gcc_cv_as_sparc_register_op\" >&6; }\n-if test $gcc_cv_as_sparc_register_op = yes; then\n-\n-$as_echo \"#define HAVE_AS_REGISTER_PSEUDO_OP 1\" >>confdefs.h\n-\n-fi\n-\n-\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for -relax option\" >&5\n $as_echo_n \"checking assembler for -relax option... \" >&6; }\n if ${gcc_cv_as_sparc_relax+:} false; then :"}, {"sha": "59585912556b2cdaf4e02d79cec00668759ca6ba", "filename": "gcc/configure.ac", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f5962a05625a25ff4bfb35e261e810d5c0381c/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f5962a05625a25ff4bfb35e261e810d5c0381c/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=97f5962a05625a25ff4bfb35e261e810d5c0381c", "patch": "@@ -4077,11 +4077,6 @@ EOF\n     ;;\n \n   sparc*-*-*)\n-    gcc_GAS_CHECK_FEATURE([.register], gcc_cv_as_sparc_register_op,,,\n-      [.register %g2, #scratch],,\n-      [AC_DEFINE(HAVE_AS_REGISTER_PSEUDO_OP, 1,\n-\t\t[Define if your assembler supports .register.])])\n-\n     gcc_GAS_CHECK_FEATURE([-relax option], gcc_cv_as_sparc_relax,,\n       [-relax], [.text],,\n       [AC_DEFINE(HAVE_AS_RELAX_OPTION, 1,"}]}