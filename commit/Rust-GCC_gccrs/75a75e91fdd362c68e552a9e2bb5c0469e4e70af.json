{"sha": "75a75e91fdd362c68e552a9e2bb5c0469e4e70af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVhNzVlOTFmZGQzNjJjNjhlNTUyYTllMmJiNWMwNDY5ZTRlNzBhZg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2010-07-21T14:17:11Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2010-07-21T14:17:11Z"}, "message": "re PR tree-optimization/44900 (The variable of SSE will be broken)\n\n2010-07-21  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/44900\n\t* tree-sra.c (load_assign_lhs_subreplacements): Updated comments.\n\t(sra_modify_assign): Move gsi to the next statmenent unconditionally.\n\n\t* testsuite/g++.dg/torture/pr44900.C: New test.\n\nFrom-SVN: r162375", "tree": {"sha": "23e177b54c091472acd392ed87007fb1e4b2678b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23e177b54c091472acd392ed87007fb1e4b2678b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75a75e91fdd362c68e552a9e2bb5c0469e4e70af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a75e91fdd362c68e552a9e2bb5c0469e4e70af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75a75e91fdd362c68e552a9e2bb5c0469e4e70af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a75e91fdd362c68e552a9e2bb5c0469e4e70af/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d74d8807cc43f9d05e099eca871a590fb458c245", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74d8807cc43f9d05e099eca871a590fb458c245", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d74d8807cc43f9d05e099eca871a590fb458c245"}], "stats": {"total": 99, "additions": 93, "deletions": 6}, "files": [{"sha": "517ff7462897fb4ea6e53724a158168e2ad796f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a75e91fdd362c68e552a9e2bb5c0469e4e70af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a75e91fdd362c68e552a9e2bb5c0469e4e70af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75a75e91fdd362c68e552a9e2bb5c0469e4e70af", "patch": "@@ -1,3 +1,9 @@\n+2010-07-21  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/44900\n+\t* tree-sra.c (load_assign_lhs_subreplacements): Updated comments.\n+\t(sra_modify_assign): Move gsi to the next statmenent unconditionally.\n+\n 2010-07-21  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR middle-end/44738"}, {"sha": "a6555a898968ce808b0ea170aa97bcef5787a21f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a75e91fdd362c68e552a9e2bb5c0469e4e70af/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a75e91fdd362c68e552a9e2bb5c0469e4e70af/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=75a75e91fdd362c68e552a9e2bb5c0469e4e70af", "patch": "@@ -1,3 +1,8 @@\n+2010-07-21  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/44900\n+\t* g++.dg/torture/pr44900.C: New test.\n+\n 2010-07-21  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR middle-end/44738"}, {"sha": "5c0efcb4b4eb24b9be5d6470304fd7642614fb1b", "filename": "gcc/testsuite/g++.dg/torture/pr44900.C", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a75e91fdd362c68e552a9e2bb5c0469e4e70af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr44900.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a75e91fdd362c68e552a9e2bb5c0469e4e70af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr44900.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr44900.C?ref=75a75e91fdd362c68e552a9e2bb5c0469e4e70af", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-msse\" } */\n+/* { dg-require-effective-target sse } */\n+\n+typedef float __m128 __attribute__ ((__vector_size__ (16), __may_alias__));\n+typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n+\n+extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,\n+__artificial__))\n+_mm_set_ps (const float __Z, const float __Y, const float __X, const float __W)\n+{\n+  return __extension__ (__m128)(__v4sf){ __W, __X, __Y, __Z };\n+}\n+\n+struct vec\n+{\n+        union {\n+                __m128 v;\n+                float  e[4];\n+        };\n+\n+        static const vec & zero()\n+        {\n+                static const vec v = _mm_set_ps(0, 0, 0, 0);\n+                return v;\n+        }\n+\n+        vec() {}\n+        vec(const __m128 & a) : v(a) {}\n+\n+        operator const __m128&() const { return v; }\n+};\n+\n+struct vec2\n+{\n+        vec _v1;\n+        vec _v2;\n+\n+        vec2() {}\n+        vec2(const vec & a, const vec & b) : _v1(a), _v2(b) {}\n+\n+        static vec2 load(const float * a)\n+        {\n+                return vec2(\n+                        __builtin_ia32_loadups(&a[0]),\n+                        __builtin_ia32_loadups(&a[4]));\n+        }\n+\n+        const vec & v1() const { return _v1; }\n+        const vec & v2() const { return _v2; }\n+};\n+\n+extern \"C\" void abort(void);\n+\n+\n+inline bool operator==(const vec & a, const vec & b)\n+{ return 0xf == __builtin_ia32_movmskps(__builtin_ia32_cmpeqps(a, b)); }\n+\n+int main( int argc, char * argv[] )\n+{\n+        __attribute__((aligned(16))) float data[] =\n+        { 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5 };\n+\n+        float * p = &data[2];\n+        vec2 a;\n+\n+        a = vec2::load(p);\n+\n+        vec v1 = a.v1();\n+        vec v2 = a.v2();\n+\n+\tif (v2.e[3] != 7.0)\n+\t  abort();\n+\n+        return 0;\n+}"}, {"sha": "9fd6d2cc5922d45f38caee3d5b9b034398b4e57b", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a75e91fdd362c68e552a9e2bb5c0469e4e70af/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a75e91fdd362c68e552a9e2bb5c0469e4e70af/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=75a75e91fdd362c68e552a9e2bb5c0469e4e70af", "patch": "@@ -2416,9 +2416,11 @@ handle_unscalarized_data_in_subtree (struct access *top_racc, tree lhs,\n    (sub)tree.  If that is not possible, refresh the TOP_RACC base aggregate and\n    load the accesses from it.  LEFT_OFFSET is the offset of the left whole\n    subtree being copied, RIGHT_OFFSET is the same thing for the right subtree.\n-   GSI is stmt iterator used for statement insertions.  *REFRESHED is true iff\n-   the rhs top aggregate has already been refreshed by contents of its scalar\n-   reductions and is set to true if this function has to do it.  */\n+   NEW_GSI is stmt iterator used for statement insertions after the original\n+   assignment, OLD_GSI is used to insert statements before the assignment.\n+   *REFRESHED keeps the information whether we have needed to refresh\n+   replacements of the LHS and from which side of the assignments this takes\n+   place.  */\n \n static void\n load_assign_lhs_subreplacements (struct access *lacc, struct access *top_racc,\n@@ -2722,9 +2724,7 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n \t\t\t\t\t   &orig_gsi, gsi, &refreshed, lhs);\n \t  if (refreshed != SRA_UDH_RIGHT)\n \t    {\n-\t      if (*stmt == gsi_stmt (*gsi))\n-\t\tgsi_next (gsi);\n-\n+\t      gsi_next (gsi);\n \t      unlink_stmt_vdef (*stmt);\n \t      gsi_remove (&orig_gsi, true);\n \t      sra_stats.deleted++;"}]}