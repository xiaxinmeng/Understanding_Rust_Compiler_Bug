{"sha": "e274629ef852151bc3cf9c2b1547ff2108dd3d75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI3NDYyOWVmODUyMTUxYmMzY2Y5YzJiMTU0N2ZmMjEwOGRkM2Q3NQ==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-09-10T06:28:03Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-09-10T06:28:03Z"}, "message": "AVX-512. Extend FMA patterns.\n\ngcc/\n\t* config/i386/sse.md (define_mode_iterator VF_AVX512VL): New.\n\t(define_mode_iterator FMAMODEM): Allow 128/256bit EVEX version.\n\t(define_mode_iterator FMAMODE_AVX512): New.\n\t(define_mode_iterator FMAMODE): Remove conditions.\n\t(define_expand \"fma4i_fmadd_<mode>\"): Use FMAMODE_AVX512 mode iterator.\n\t(define_expand \"<avx512>_fmadd_<mode>_maskz<round_expand_name>\"): Rename\n\tfrom \"<avx512>_fmadd_<mode>_maskz<round_expand_name>\" and use VF_AVX512VL\n\tmode iterator.\n\t(define_mode_iterator FMAMODE_NOVF512): Remove.\n\t(define_insn \"*fma_fmadd_<mode>\"): Rename from\n\t\"<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name><round_name>\" and use\n\tFMAMODE mode iterator.\n\t(define_mode_iterator VF_SF_AVX512VL): New.\n\t(define_insn \"<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name><round_name>\"):\n\tUse VF_SF_AVX512VL mode iterator.\n\t(define_insn \"<avx512>_fmadd_<mode>_mask<round_name>\"): Rename from\n\t\"avx512f_fmadd_<mode>_mask<round_name>\" and use VF_AVX512VL mode\n\titerator.\n\t(define_insn \"<avx512>_fmadd_<mode>_mask3<round_name>\"): Rename from\n\t\"avx512f_fmadd_<mode>_mask3<round_name>\" and use VF_AVX512VL mode\n\titerator.\n\t(define_insn \"*fma_fmsub_<mode>\"): Rename from\n\t\"<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name><round_name>\" and use\n\tFMAMODE mode iterator.\n\t(define_insn \"<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name><round_name>\"):\n\tUse VF_SF_AVX512VL mode iterator.\n\t(define_insn \"<avx512>_fmsub_<mode>_mask<round_name>\"): Rename from\n\t\"avx512f_fmsub_<mode>_mask<round_name>\" and use VF_AVX512VL mode\n\titerator.\n\t(define_insn \"<avx512>_fmsub_<mode>_mask3<round_name>\"): Rename from\n\t\"avx512f_fmsub_<mode>_mask3<round_name>\" and use VF_AVX512VL mode\n\titerator.\n\t(define_insn \"*fma_fnmadd_<mode>\"): Rename from\n\t\"<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name><round_name>\" and\n\tuse FMAMODE mode iterator.\n\t(define_insn \"<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name><round_name>\"):\n\tUse VF_SF_AVX512VL mode iterator.\n\t(define_insn \"<avx512>_fnmadd_<mode>_mask<round_name>\"): Rename from\n\t\"avx512f_fnmadd_<mode>_mask<round_name>\" and use VF_AVX512VL mode\n\titerator.\n\t(define_insn \"<avx512>_fnmadd_<mode>_mask3<round_name>\"): Rename from\n\t\"avx512f_fnmadd_<mode>_mask3<round_name>\" and use VF_AVX512VL mode\n\titerator.\n\t(define_insn \"*fma_fnmsub_<mode>\"): Rename from\n\t\"<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name><round_name>\" and use\n\tFMAMODE mode iterator.\n\t(define_insn \"<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name><round_name>\"):\n\tUse VF_SF_AVX512VL mode iterator.\n\t(define_insn \"<avx512>_fnmsub_<mode>_mask<round_name>\"): Rename from\n\t\"avx512f_fnmsub_<mode>_mask<round_name>\" and use VF_AVX512VL mode\n\titerator.\n\t(define_insn \"<avx512>_fnmsub_<mode>_mask3<round_name>\"): Rename from\n\t\"avx512f_fnmsub_<mode>_mask3<round_name>\" and use VF_AVX512VL mode\n\titerator.\n\t(define_expand \"<avx512>_fmaddsub_<mode>_maskz<round_expand_name>\"):\n\tRename from \"avx512f_fmaddsub_<mode>_maskz<round_expand_name>\" and\n\tuse VF_AVX512VL mode iterator.\n\t(define_insn \"*fma_fmaddsub_<mode>\"): Rename from\n\t\"<sd_mask_codefor>fma_fmaddsub_<mode><sd_maskz_name><round_name>\" and\n\tremove subst usage.\n\t(define_insn \"<sd_mask_codefor>fma_fmaddsub_<mode><sd_maskz_name><round_name>\"):\n\tUse VF_SF_AVX512VL mode iterator.\n\t(define_insn \"<avx512>_fmaddsub_<mode>_mask<round_name>\"): Rename from\n\t\"avx512f_fmaddsub_<mode>_mask<round_name>\" and use VF_AVX512VL mode\n\titerator.\n\t(define_insn \"<avx512>_fmaddsub_<mode>_mask3<round_name>\"): Rename from\n\t\"avx512f_fmaddsub_<mode>_mask3<round_name>\" and use VF_AVX512VL mode\n\titerator.\n\t(define_insn \"*fma_fmsubadd_<mode>\"): Rename from\n\t\"<sd_mask_codefor>fma_fmsubadd_<mode><sd_maskz_name><round_name>\" and\n\tremove usage of subst.\n\t(define_insn \"<sd_mask_codefor>fma_fmsubadd_<mode><sd_maskz_name><round_name>\"):\n\tUse VF_SF_AVX512VL mode iterator.\n\t(define_insn \"<avx512>_fmsubadd_<mode>_mask<round_name>\"): Rename from\n\t\"avx512f_fmsubadd_<mode>_mask<round_name>\" and use VF_AVX512VL mode\n\titerator.\n\t(define_insn \"<avx512>_fmsubadd_<mode>_mask3<round_name>\"): Rename from\n\t\"avx512f_fmsubadd_<mode>_mask3<round_name>\" and use VF_AVX512VL mode\n\titerator.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r215104", "tree": {"sha": "35223e7b2d9b943f84a5c42c0032c7d119b75b4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35223e7b2d9b943f84a5c42c0032c7d119b75b4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e274629ef852151bc3cf9c2b1547ff2108dd3d75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e274629ef852151bc3cf9c2b1547ff2108dd3d75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e274629ef852151bc3cf9c2b1547ff2108dd3d75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e274629ef852151bc3cf9c2b1547ff2108dd3d75/comments", "author": null, "committer": null, "parents": [{"sha": "0876bdf57b6d7a6920723e41952ea1ab7f2503dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0876bdf57b6d7a6920723e41952ea1ab7f2503dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0876bdf57b6d7a6920723e41952ea1ab7f2503dc"}], "stats": {"total": 587, "additions": 337, "deletions": 250}, "files": [{"sha": "9357a6f97481069e03c0009d2c8a828fb8f712be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e274629ef852151bc3cf9c2b1547ff2108dd3d75/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e274629ef852151bc3cf9c2b1547ff2108dd3d75/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e274629ef852151bc3cf9c2b1547ff2108dd3d75", "patch": "@@ -1,3 +1,92 @@\n+2014-09-10  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/sse.md (define_mode_iterator VF_AVX512VL): New.\n+\t(define_mode_iterator FMAMODEM): Allow 128/256bit EVEX version.\n+\t(define_mode_iterator FMAMODE_AVX512): New.\n+\t(define_mode_iterator FMAMODE): Remove conditions.\n+\t(define_expand \"fma4i_fmadd_<mode>\"): Use FMAMODE_AVX512 mode iterator.\n+\t(define_expand \"<avx512>_fmadd_<mode>_maskz<round_expand_name>\"): Rename\n+\tfrom \"<avx512>_fmadd_<mode>_maskz<round_expand_name>\" and use VF_AVX512VL\n+\tmode iterator.\n+\t(define_mode_iterator FMAMODE_NOVF512): Remove.\n+\t(define_insn \"*fma_fmadd_<mode>\"): Rename from\n+\t\"<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name><round_name>\" and use\n+\tFMAMODE mode iterator.\n+\t(define_mode_iterator VF_SF_AVX512VL): New.\n+\t(define_insn \"<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name><round_name>\"):\n+\tUse VF_SF_AVX512VL mode iterator.\n+\t(define_insn \"<avx512>_fmadd_<mode>_mask<round_name>\"): Rename from\n+\t\"avx512f_fmadd_<mode>_mask<round_name>\" and use VF_AVX512VL mode\n+\titerator.\n+\t(define_insn \"<avx512>_fmadd_<mode>_mask3<round_name>\"): Rename from\n+\t\"avx512f_fmadd_<mode>_mask3<round_name>\" and use VF_AVX512VL mode\n+\titerator.\n+\t(define_insn \"*fma_fmsub_<mode>\"): Rename from\n+\t\"<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name><round_name>\" and use\n+\tFMAMODE mode iterator.\n+\t(define_insn \"<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name><round_name>\"):\n+\tUse VF_SF_AVX512VL mode iterator.\n+\t(define_insn \"<avx512>_fmsub_<mode>_mask<round_name>\"): Rename from\n+\t\"avx512f_fmsub_<mode>_mask<round_name>\" and use VF_AVX512VL mode\n+\titerator.\n+\t(define_insn \"<avx512>_fmsub_<mode>_mask3<round_name>\"): Rename from\n+\t\"avx512f_fmsub_<mode>_mask3<round_name>\" and use VF_AVX512VL mode\n+\titerator.\n+\t(define_insn \"*fma_fnmadd_<mode>\"): Rename from\n+\t\"<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name><round_name>\" and\n+\tuse FMAMODE mode iterator.\n+\t(define_insn \"<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name><round_name>\"):\n+\tUse VF_SF_AVX512VL mode iterator.\n+\t(define_insn \"<avx512>_fnmadd_<mode>_mask<round_name>\"): Rename from\n+\t\"avx512f_fnmadd_<mode>_mask<round_name>\" and use VF_AVX512VL mode\n+\titerator.\n+\t(define_insn \"<avx512>_fnmadd_<mode>_mask3<round_name>\"): Rename from\n+\t\"avx512f_fnmadd_<mode>_mask3<round_name>\" and use VF_AVX512VL mode\n+\titerator.\n+\t(define_insn \"*fma_fnmsub_<mode>\"): Rename from\n+\t\"<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name><round_name>\" and use\n+\tFMAMODE mode iterator.\n+\t(define_insn \"<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name><round_name>\"):\n+\tUse VF_SF_AVX512VL mode iterator.\n+\t(define_insn \"<avx512>_fnmsub_<mode>_mask<round_name>\"): Rename from\n+\t\"avx512f_fnmsub_<mode>_mask<round_name>\" and use VF_AVX512VL mode\n+\titerator.\n+\t(define_insn \"<avx512>_fnmsub_<mode>_mask3<round_name>\"): Rename from\n+\t\"avx512f_fnmsub_<mode>_mask3<round_name>\" and use VF_AVX512VL mode\n+\titerator.\n+\t(define_expand \"<avx512>_fmaddsub_<mode>_maskz<round_expand_name>\"):\n+\tRename from \"avx512f_fmaddsub_<mode>_maskz<round_expand_name>\" and\n+\tuse VF_AVX512VL mode iterator.\n+\t(define_insn \"*fma_fmaddsub_<mode>\"): Rename from\n+\t\"<sd_mask_codefor>fma_fmaddsub_<mode><sd_maskz_name><round_name>\" and\n+\tremove subst usage.\n+\t(define_insn \"<sd_mask_codefor>fma_fmaddsub_<mode><sd_maskz_name><round_name>\"):\n+\tUse VF_SF_AVX512VL mode iterator.\n+\t(define_insn \"<avx512>_fmaddsub_<mode>_mask<round_name>\"): Rename from\n+\t\"avx512f_fmaddsub_<mode>_mask<round_name>\" and use VF_AVX512VL mode\n+\titerator.\n+\t(define_insn \"<avx512>_fmaddsub_<mode>_mask3<round_name>\"): Rename from\n+\t\"avx512f_fmaddsub_<mode>_mask3<round_name>\" and use VF_AVX512VL mode\n+\titerator.\n+\t(define_insn \"*fma_fmsubadd_<mode>\"): Rename from\n+\t\"<sd_mask_codefor>fma_fmsubadd_<mode><sd_maskz_name><round_name>\" and\n+\tremove usage of subst.\n+\t(define_insn \"<sd_mask_codefor>fma_fmsubadd_<mode><sd_maskz_name><round_name>\"):\n+\tUse VF_SF_AVX512VL mode iterator.\n+\t(define_insn \"<avx512>_fmsubadd_<mode>_mask<round_name>\"): Rename from\n+\t\"avx512f_fmsubadd_<mode>_mask<round_name>\" and use VF_AVX512VL mode\n+\titerator.\n+\t(define_insn \"<avx512>_fmsubadd_<mode>_mask3<round_name>\"): Rename from\n+\t\"avx512f_fmsubadd_<mode>_mask3<round_name>\" and use VF_AVX512VL mode\n+\titerator.\n+\n 2014-09-10  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \tRevert r213751:"}, {"sha": "604c0dc1c55f1a1a75da5f91cd694ad2ee663b2c", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 248, "deletions": 250, "changes": 498, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e274629ef852151bc3cf9c2b1547ff2108dd3d75/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e274629ef852151bc3cf9c2b1547ff2108dd3d75/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=e274629ef852151bc3cf9c2b1547ff2108dd3d75", "patch": "@@ -239,6 +239,10 @@\n   [V16SI (V8SI  \"TARGET_AVX512VL\") (V4SI  \"TARGET_AVX512VL\")\n    V8DI  (V4DI  \"TARGET_AVX512VL\") (V2DI  \"TARGET_AVX512VL\")])\n \n+(define_mode_iterator VF_AVX512VL\n+  [V16SF (V8SF \"TARGET_AVX512VL\") (V4SF \"TARGET_AVX512VL\")\n+   V8DF (V4DF \"TARGET_AVX512VL\") (V2DF \"TARGET_AVX512VL\")])\n+\n (define_mode_iterator VF2_AVX512VL\n   [V8DF (V4DF \"TARGET_AVX512VL\") (V2DF \"TARGET_AVX512VL\")])\n \n@@ -2960,10 +2964,10 @@\n (define_mode_iterator FMAMODEM\n   [(SF \"TARGET_SSE_MATH && (TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F)\")\n    (DF \"TARGET_SSE_MATH && (TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F)\")\n-   (V4SF \"TARGET_FMA || TARGET_FMA4\")\n-   (V2DF \"TARGET_FMA || TARGET_FMA4\")\n-   (V8SF \"TARGET_FMA || TARGET_FMA4\")\n-   (V4DF \"TARGET_FMA || TARGET_FMA4\")\n+   (V4SF \"TARGET_FMA || TARGET_FMA4 || TARGET_AVX512VL\")\n+   (V2DF \"TARGET_FMA || TARGET_FMA4 || TARGET_AVX512VL\")\n+   (V8SF \"TARGET_FMA || TARGET_FMA4 || TARGET_AVX512VL\")\n+   (V4DF \"TARGET_FMA || TARGET_FMA4 || TARGET_AVX512VL\")\n    (V16SF \"TARGET_AVX512F\")\n    (V8DF \"TARGET_AVX512F\")])\n \n@@ -2996,101 +3000,100 @@\n \t  (neg:FMAMODEM (match_operand:FMAMODEM 3 \"nonimmediate_operand\"))))])\n \n ;; The builtins for intrinsics are not constrained by SSE math enabled.\n+(define_mode_iterator FMAMODE_AVX512\n+ [(SF \"TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F\")\n+  (DF \"TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F\")\n+  (V4SF \"TARGET_FMA || TARGET_FMA4 || TARGET_AVX512VL\")\n+  (V2DF \"TARGET_FMA || TARGET_FMA4 || TARGET_AVX512VL\")\n+  (V8SF \"TARGET_FMA || TARGET_FMA4 || TARGET_AVX512VL\")\n+  (V4DF \"TARGET_FMA || TARGET_FMA4 || TARGET_AVX512VL\")\n+  (V16SF \"TARGET_AVX512F\")\n+  (V8DF \"TARGET_AVX512F\")])\n+\n (define_mode_iterator FMAMODE\n-  [(SF \"TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F\")\n-   (DF \"TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F\")\n-   (V4SF \"TARGET_FMA || TARGET_FMA4\")\n-   (V2DF \"TARGET_FMA || TARGET_FMA4\")\n-   (V8SF \"TARGET_FMA || TARGET_FMA4\")\n-   (V4DF \"TARGET_FMA || TARGET_FMA4\")\n-   (V16SF \"TARGET_AVX512F\")\n-   (V8DF \"TARGET_AVX512F\")])\n+  [SF DF V4SF V2DF V8SF V4DF])\n \n (define_expand \"fma4i_fmadd_<mode>\"\n-  [(set (match_operand:FMAMODE 0 \"register_operand\")\n-\t(fma:FMAMODE\n-\t  (match_operand:FMAMODE 1 \"nonimmediate_operand\")\n-\t  (match_operand:FMAMODE 2 \"nonimmediate_operand\")\n-\t  (match_operand:FMAMODE 3 \"nonimmediate_operand\")))])\n-\n-(define_expand \"avx512f_fmadd_<mode>_maskz<round_expand_name>\"\n-  [(match_operand:VF_512 0 \"register_operand\")\n-   (match_operand:VF_512 1 \"<round_expand_nimm_predicate>\")\n-   (match_operand:VF_512 2 \"<round_expand_nimm_predicate>\")\n-   (match_operand:VF_512 3 \"<round_expand_nimm_predicate>\")\n+  [(set (match_operand:FMAMODE_AVX512 0 \"register_operand\")\n+\t(fma:FMAMODE_AVX512\n+\t  (match_operand:FMAMODE_AVX512 1 \"nonimmediate_operand\")\n+\t  (match_operand:FMAMODE_AVX512 2 \"nonimmediate_operand\")\n+\t  (match_operand:FMAMODE_AVX512 3 \"nonimmediate_operand\")))])\n+\n+(define_expand \"<avx512>_fmadd_<mode>_maskz<round_expand_name>\"\n+  [(match_operand:VF_AVX512VL 0 \"register_operand\")\n+   (match_operand:VF_AVX512VL 1 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VF_AVX512VL 2 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VF_AVX512VL 3 \"<round_expand_nimm_predicate>\")\n    (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n-  \"TARGET_AVX512F\"\n+  \"TARGET_AVX512F && <round_mode512bit_condition>\"\n {\n   emit_insn (gen_fma_fmadd_<mode>_maskz_1<round_expand_name> (\n     operands[0], operands[1], operands[2], operands[3],\n     CONST0_RTX (<MODE>mode), operands[4]<round_expand_operand>));\n   DONE;\n })\n \n-(define_mode_iterator FMAMODE_NOVF512\n-  [(SF \"TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F\")\n-   (DF \"TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F\")\n-   (V4SF \"TARGET_FMA || TARGET_FMA4\")\n-   (V2DF \"TARGET_FMA || TARGET_FMA4\")\n-   (V8SF \"TARGET_FMA || TARGET_FMA4\")\n-   (V4DF \"TARGET_FMA || TARGET_FMA4\")])\n-\n-(define_insn \"<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name><round_name>\"\n-  [(set (match_operand:FMAMODE_NOVF512 0 \"register_operand\" \"=v,v,v,x,x\")\n-\t(fma:FMAMODE_NOVF512\n-\t  (match_operand:FMAMODE_NOVF512 1 \"<round_nimm_predicate>\" \"%0,0,v,x,x\")\n-\t  (match_operand:FMAMODE_NOVF512 2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>,x,m\")\n-\t  (match_operand:FMAMODE_NOVF512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0,xm,x\")))]\n-  \"<sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n+(define_insn \"*fma_fmadd_<mode>\"\n+  [(set (match_operand:FMAMODE 0 \"register_operand\" \"=v,v,v,x,x\")\n+\t(fma:FMAMODE\n+\t  (match_operand:FMAMODE 1 \"nonimmediate_operand\" \"%0,0,v,x,x\")\n+\t  (match_operand:FMAMODE 2 \"nonimmediate_operand\" \"vm,v,vm,x,m\")\n+\t  (match_operand:FMAMODE 3 \"nonimmediate_operand\" \"v,vm,0,xm,x\")))]\n+  \"TARGET_FMA || TARGET_FMA4\"\n   \"@\n-   vfmadd132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n-   vfmadd213<ssemodesuffix>\\t{<round_sd_mask_op4>%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<round_sd_mask_op4>}\n-   vfmadd231<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<round_sd_mask_op4>}\n+   vfmadd132<ssemodesuffix>\\t{%2, %3, %0|%0, %3, %2}\n+   vfmadd213<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n+   vfmadd231<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\n    vfmadd<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n    vfmadd<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f,fma4,fma4\")\n+  [(set_attr \"isa\" \"fma,fma,fma,fma4,fma4\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;; Suppose AVX-512F as baseline\n+(define_mode_iterator VF_SF_AVX512VL\n+  [SF V16SF (V8SF \"TARGET_AVX512VL\") (V4SF \"TARGET_AVX512VL\")\n+   DF V8DF (V4DF \"TARGET_AVX512VL\") (V2DF \"TARGET_AVX512VL\")])\n+\n (define_insn \"<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name><round_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v,v\")\n-\t(fma:VF_512\n-\t  (match_operand:VF_512 1 \"<round_nimm_predicate>\" \"%0,0,v\")\n-\t  (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n-\t  (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\")))]\n-  \"<sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n+  [(set (match_operand:VF_SF_AVX512VL 0 \"register_operand\" \"=v,v,v\")\n+\t(fma:VF_SF_AVX512VL\n+\t  (match_operand:VF_SF_AVX512VL 1 \"<round_nimm_predicate>\" \"%0,0,v\")\n+\t  (match_operand:VF_SF_AVX512VL 2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n+\t  (match_operand:VF_SF_AVX512VL 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\")))]\n+  \"TARGET_AVX512F && <sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    vfmadd132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n    vfmadd213<ssemodesuffix>\\t{<round_sd_mask_op4>%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<round_sd_mask_op4>}\n    vfmadd231<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<round_sd_mask_op4>}\"\n-  [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f\")\n-   (set_attr \"type\" \"ssemuladd\")\n+  [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fmadd_<mode>_mask<round_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v\")\n-\t(vec_merge:VF_512\n-\t  (fma:VF_512\n-\t    (match_operand:VF_512 1 \"register_operand\" \"0,0\")\n-\t    (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\")\n-\t    (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\"))\n+(define_insn \"<avx512>_fmadd_<mode>_mask<round_name>\"\n+  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VF_AVX512VL\n+\t  (fma:VF_AVX512VL\n+\t    (match_operand:VF_AVX512VL 1 \"register_operand\" \"0,0\")\n+\t    (match_operand:VF_AVX512VL 2 \"nonimmediate_operand\" \"<round_constraint>,v\")\n+\t    (match_operand:VF_AVX512VL 3 \"nonimmediate_operand\" \"v,<round_constraint>\"))\n \t  (match_dup 1)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk,Yk\")))]\n-  \"TARGET_AVX512F\"\n+  \"TARGET_AVX512F && <round_mode512bit_condition>\"\n   \"@\n    vfmadd132<ssemodesuffix>\\t{<round_op5>%2, %3, %0%{%4%}|%0%{%4%}, %3, %2<round_op5>}\n    vfmadd213<ssemodesuffix>\\t{<round_op5>%3, %2, %0%{%4%}|%0%{%4%}, %2, %3<round_op5>}\"\n   [(set_attr \"isa\" \"fma_avx512f,fma_avx512f\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fmadd_<mode>_mask3<round_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=x\")\n-\t(vec_merge:VF_512\n-\t  (fma:VF_512\n-\t    (match_operand:VF_512 1 \"register_operand\" \"x\")\n-\t    (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>\")\n-\t    (match_operand:VF_512 3 \"register_operand\" \"0\"))\n+(define_insn \"<avx512>_fmadd_<mode>_mask3<round_name>\"\n+  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=x\")\n+\t(vec_merge:VF_AVX512VL\n+\t  (fma:VF_AVX512VL\n+\t    (match_operand:VF_AVX512VL 1 \"register_operand\" \"x\")\n+\t    (match_operand:VF_AVX512VL 2 \"nonimmediate_operand\" \"<round_constraint>\")\n+\t    (match_operand:VF_AVX512VL 3 \"register_operand\" \"0\"))\n \t  (match_dup 3)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n@@ -3099,48 +3102,47 @@\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name><round_name>\"\n-  [(set (match_operand:FMAMODE_NOVF512 0 \"register_operand\" \"=v,v,v,x,x\")\n-\t(fma:FMAMODE_NOVF512\n-\t  (match_operand:FMAMODE_NOVF512   1 \"<round_nimm_predicate>\" \"%0,0,v,x,x\")\n-\t  (match_operand:FMAMODE_NOVF512   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>,x,m\")\n-\t  (neg:FMAMODE_NOVF512\n-\t    (match_operand:FMAMODE_NOVF512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0,xm,x\"))))]\n-  \"<sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n+(define_insn \"*fma_fmsub_<mode>\"\n+  [(set (match_operand:FMAMODE 0 \"register_operand\" \"=v,v,v,x,x\")\n+\t(fma:FMAMODE\n+\t  (match_operand:FMAMODE   1 \"nonimmediate_operand\" \"%0,0,v,x,x\")\n+\t  (match_operand:FMAMODE   2 \"nonimmediate_operand\" \"vm,v,vm,x,m\")\n+\t  (neg:FMAMODE\n+\t    (match_operand:FMAMODE 3 \"nonimmediate_operand\" \"v,vm,0,xm,x\"))))]\n+  \"TARGET_FMA || TARGET_FMA4\"\n   \"@\n-   vfmsub132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n-   vfmsub213<ssemodesuffix>\\t{<round_sd_mask_op4>%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<round_sd_mask_op4>}\n-   vfmsub231<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<round_sd_mask_op4>}\n+   vfmsub132<ssemodesuffix>\\t{%2, %3, %0|%0, %3, %2}\n+   vfmsub213<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n+   vfmsub231<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\n    vfmsub<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n    vfmsub<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f,fma4,fma4\")\n+  [(set_attr \"isa\" \"fma,fma,fma,fma4,fma4\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name><round_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v,v\")\n-\t(fma:VF_512\n-\t  (match_operand:VF_512   1 \"<round_nimm_predicate>\" \"%0,0,v\")\n-\t  (match_operand:VF_512   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n-\t  (neg:VF_512\n-\t    (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\"))))]\n-  \"<sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n+  [(set (match_operand:VF_SF_AVX512VL 0 \"register_operand\" \"=v,v,v\")\n+\t(fma:VF_SF_AVX512VL\n+\t  (match_operand:VF_SF_AVX512VL   1 \"<round_nimm_predicate>\" \"%0,0,v\")\n+\t  (match_operand:VF_SF_AVX512VL   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n+\t  (neg:VF_SF_AVX512VL\n+\t    (match_operand:VF_SF_AVX512VL 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\"))))]\n+  \"TARGET_AVX512F && <sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    vfmsub132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n    vfmsub213<ssemodesuffix>\\t{<round_sd_mask_op4>%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<round_sd_mask_op4>}\n    vfmsub231<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<round_sd_mask_op4>}\"\n-  [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f\")\n-   (set_attr \"type\" \"ssemuladd\")\n+  [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fmsub_<mode>_mask<round_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v\")\n-\t(vec_merge:VF_512\n-\t  (fma:VF_512\n-\t    (match_operand:VF_512 1 \"register_operand\" \"0,0\")\n-\t    (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\")\n-\t    (neg:VF_512\n-\t      (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\")))\n+(define_insn \"<avx512>_fmsub_<mode>_mask<round_name>\"\n+  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VF_AVX512VL\n+\t  (fma:VF_AVX512VL\n+\t    (match_operand:VF_AVX512VL 1 \"register_operand\" \"0,0\")\n+\t    (match_operand:VF_AVX512VL 2 \"nonimmediate_operand\" \"<round_constraint>,v\")\n+\t    (neg:VF_AVX512VL\n+\t      (match_operand:VF_AVX512VL 3 \"nonimmediate_operand\" \"v,<round_constraint>\")))\n \t  (match_dup 1)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk,Yk\")))]\n   \"TARGET_AVX512F\"\n@@ -3151,154 +3153,152 @@\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fmsub_<mode>_mask3<round_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VF_512\n-\t  (fma:VF_512\n-\t    (match_operand:VF_512 1 \"register_operand\" \"v\")\n-\t    (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>\")\n-\t    (neg:VF_512\n-\t      (match_operand:VF_512 3 \"register_operand\" \"0\")))\n+(define_insn \"<avx512>_fmsub_<mode>_mask3<round_name>\"\n+  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF_AVX512VL\n+\t  (fma:VF_AVX512VL\n+\t    (match_operand:VF_AVX512VL 1 \"register_operand\" \"v\")\n+\t    (match_operand:VF_AVX512VL 2 \"nonimmediate_operand\" \"<round_constraint>\")\n+\t    (neg:VF_AVX512VL\n+\t      (match_operand:VF_AVX512VL 3 \"register_operand\" \"0\")))\n \t  (match_dup 3)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n-  \"TARGET_AVX512F\"\n+  \"TARGET_AVX512F && <round_mode512bit_condition>\"\n   \"vfmsub231<ssemodesuffix>\\t{<round_op5>%2, %1, %0%{%4%}|%0%{%4%}, %1, %2<round_op5>}\"\n   [(set_attr \"isa\" \"fma_avx512f\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name><round_name>\"\n-  [(set (match_operand:FMAMODE_NOVF512 0 \"register_operand\" \"=v,v,v,x,x\")\n-\t(fma:FMAMODE_NOVF512\n-\t  (neg:FMAMODE_NOVF512\n-\t    (match_operand:FMAMODE_NOVF512 1 \"<round_nimm_predicate>\" \"%0,0,v,x,x\"))\n-\t  (match_operand:FMAMODE_NOVF512   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>,x,m\")\n-\t  (match_operand:FMAMODE_NOVF512   3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0,xm,x\")))]\n-  \"<sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n+(define_insn \"*fma_fnmadd_<mode>\"\n+  [(set (match_operand:FMAMODE 0 \"register_operand\" \"=v,v,v,x,x\")\n+\t(fma:FMAMODE\n+\t  (neg:FMAMODE\n+\t    (match_operand:FMAMODE 1 \"nonimmediate_operand\" \"%0,0,v,x,x\"))\n+\t  (match_operand:FMAMODE   2 \"nonimmediate_operand\" \"vm,v,vm,x,m\")\n+\t  (match_operand:FMAMODE   3 \"nonimmediate_operand\" \"v,vm,0,xm,x\")))]\n+  \"TARGET_FMA || TARGET_FMA4\"\n   \"@\n-   vfnmadd132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n-   vfnmadd213<ssemodesuffix>\\t{<round_sd_mask_op4>%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<round_sd_mask_op4>}\n-   vfnmadd231<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<round_sd_mask_op4>}\n+   vfnmadd132<ssemodesuffix>\\t{%2, %3, %0|%0, %3, %2}\n+   vfnmadd213<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n+   vfnmadd231<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\n    vfnmadd<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n    vfnmadd<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f,fma4,fma4\")\n+  [(set_attr \"isa\" \"fma,fma,fma,fma4,fma4\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name><round_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v,v\")\n-\t(fma:VF_512\n-\t  (neg:VF_512\n-\t    (match_operand:VF_512 1 \"<round_nimm_predicate>\" \"%0,0,v\"))\n-\t  (match_operand:VF_512   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n-\t  (match_operand:VF_512   3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\")))]\n-  \"<sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n+  [(set (match_operand:VF_SF_AVX512VL 0 \"register_operand\" \"=v,v,v\")\n+\t(fma:VF_SF_AVX512VL\n+\t  (neg:VF_SF_AVX512VL\n+\t    (match_operand:VF_SF_AVX512VL 1 \"<round_nimm_predicate>\" \"%0,0,v\"))\n+\t  (match_operand:VF_SF_AVX512VL   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n+\t  (match_operand:VF_SF_AVX512VL   3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\")))]\n+  \"TARGET_AVX512F && <sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    vfnmadd132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n    vfnmadd213<ssemodesuffix>\\t{<round_sd_mask_op4>%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<round_sd_mask_op4>}\n    vfnmadd231<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<round_sd_mask_op4>}\"\n-  [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f\")\n-   (set_attr \"type\" \"ssemuladd\")\n+  [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fnmadd_<mode>_mask<round_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v\")\n-\t(vec_merge:VF_512\n-\t  (fma:VF_512\n-\t    (neg:VF_512\n-\t      (match_operand:VF_512 1 \"register_operand\" \"0,0\"))\n-\t    (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\")\n-\t    (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\"))\n+(define_insn \"<avx512>_fnmadd_<mode>_mask<round_name>\"\n+  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VF_AVX512VL\n+\t  (fma:VF_AVX512VL\n+\t    (neg:VF_AVX512VL\n+\t      (match_operand:VF_AVX512VL 1 \"register_operand\" \"0,0\"))\n+\t    (match_operand:VF_AVX512VL 2 \"nonimmediate_operand\" \"<round_constraint>,v\")\n+\t    (match_operand:VF_AVX512VL 3 \"nonimmediate_operand\" \"v,<round_constraint>\"))\n \t  (match_dup 1)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk,Yk\")))]\n-  \"TARGET_AVX512F\"\n+  \"TARGET_AVX512F && <round_mode512bit_condition>\"\n   \"@\n    vfnmadd132<ssemodesuffix>\\t{<round_op5>%2, %3, %0%{%4%}|%0%{%4%}, %3, %2<round_op5>}\n    vfnmadd213<ssemodesuffix>\\t{<round_op5>%3, %2, %0%{%4%}|%0%{%4%}, %2, %3<round_op5>}\"\n   [(set_attr \"isa\" \"fma_avx512f,fma_avx512f\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fnmadd_<mode>_mask3<round_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VF_512\n-\t  (fma:VF_512\n-\t    (neg:VF_512\n-\t      (match_operand:VF_512 1 \"register_operand\" \"v\"))\n-\t    (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>\")\n-\t    (match_operand:VF_512 3 \"register_operand\" \"0\"))\n+(define_insn \"<avx512>_fnmadd_<mode>_mask3<round_name>\"\n+  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF_AVX512VL\n+\t  (fma:VF_AVX512VL\n+\t    (neg:VF_AVX512VL\n+\t      (match_operand:VF_AVX512VL 1 \"register_operand\" \"v\"))\n+\t    (match_operand:VF_AVX512VL 2 \"nonimmediate_operand\" \"<round_constraint>\")\n+\t    (match_operand:VF_AVX512VL 3 \"register_operand\" \"0\"))\n \t  (match_dup 3)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n-  \"TARGET_AVX512F\"\n+  \"TARGET_AVX512F && <round_mode512bit_condition>\"\n   \"vfnmadd231<ssemodesuffix>\\t{<round_op5>%2, %1, %0%{%4%}|%0%{%4%}, %1, %2<round_op5>}\"\n   [(set_attr \"isa\" \"fma_avx512f\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name><round_name>\"\n-  [(set (match_operand:FMAMODE_NOVF512 0 \"register_operand\" \"=v,v,v,x,x\")\n-\t(fma:FMAMODE_NOVF512\n-\t  (neg:FMAMODE_NOVF512\n-\t    (match_operand:FMAMODE_NOVF512 1 \"<round_nimm_predicate>\" \"%0,0,v,x,x\"))\n-\t  (match_operand:FMAMODE_NOVF512   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>,x,m\")\n-\t  (neg:FMAMODE_NOVF512\n-\t    (match_operand:FMAMODE_NOVF512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0,xm,x\"))))]\n-  \"<sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n+(define_insn \"*fma_fnmsub_<mode>\"\n+  [(set (match_operand:FMAMODE 0 \"register_operand\" \"=v,v,v,x,x\")\n+\t(fma:FMAMODE\n+\t  (neg:FMAMODE\n+\t    (match_operand:FMAMODE 1 \"nonimmediate_operand\" \"%0,0,v,x,x\"))\n+\t  (match_operand:FMAMODE   2 \"nonimmediate_operand\" \"vm,v,vm,x,m\")\n+\t  (neg:FMAMODE\n+\t    (match_operand:FMAMODE 3 \"nonimmediate_operand\" \"v,vm,0,xm,x\"))))]\n+  \"TARGET_FMA || TARGET_FMA4\"\n   \"@\n    vfnmsub132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n    vfnmsub213<ssemodesuffix>\\t{<round_sd_mask_op4>%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<round_sd_mask_op4>}\n    vfnmsub231<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<round_sd_mask_op4>}\n    vfnmsub<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n    vfnmsub<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f,fma4,fma4\")\n+  [(set_attr \"isa\" \"fma,fma,fma,fma4,fma4\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name><round_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v,v\")\n-\t(fma:VF_512\n-\t  (neg:VF_512\n-\t    (match_operand:VF_512 1 \"<round_nimm_predicate>\" \"%0,0,v\"))\n-\t  (match_operand:VF_512   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n-\t  (neg:VF_512\n-\t    (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\"))))]\n-  \"<sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n+  [(set (match_operand:VF_SF_AVX512VL 0 \"register_operand\" \"=v,v,v\")\n+\t(fma:VF_SF_AVX512VL\n+\t  (neg:VF_SF_AVX512VL\n+\t    (match_operand:VF_SF_AVX512VL 1 \"<round_nimm_predicate>\" \"%0,0,v\"))\n+\t  (match_operand:VF_SF_AVX512VL 2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n+\t  (neg:VF_SF_AVX512VL\n+\t    (match_operand:VF_SF_AVX512VL 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\"))))]\n+  \"TARGET_AVX512F && <sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    vfnmsub132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n    vfnmsub213<ssemodesuffix>\\t{<round_sd_mask_op4>%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<round_sd_mask_op4>}\n    vfnmsub231<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<round_sd_mask_op4>}\"\n-  [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f\")\n-   (set_attr \"type\" \"ssemuladd\")\n+  [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fnmsub_<mode>_mask<round_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v\")\n-\t(vec_merge:VF_512\n-\t  (fma:VF_512\n-\t    (neg:VF_512\n-\t      (match_operand:VF_512 1 \"register_operand\" \"0,0\"))\n-\t    (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\")\n-\t    (neg:VF_512\n-\t      (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\")))\n+(define_insn \"<avx512>_fnmsub_<mode>_mask<round_name>\"\n+  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VF_AVX512VL\n+\t  (fma:VF_AVX512VL\n+\t    (neg:VF_AVX512VL\n+\t      (match_operand:VF_AVX512VL 1 \"register_operand\" \"0,0\"))\n+\t    (match_operand:VF_AVX512VL 2 \"nonimmediate_operand\" \"<round_constraint>,v\")\n+\t    (neg:VF_AVX512VL\n+\t      (match_operand:VF_AVX512VL 3 \"nonimmediate_operand\" \"v,<round_constraint>\")))\n \t  (match_dup 1)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk,Yk\")))]\n-  \"TARGET_AVX512F\"\n+  \"TARGET_AVX512F && <round_mode512bit_condition>\"\n   \"@\n    vfnmsub132<ssemodesuffix>\\t{<round_op5>%2, %3, %0%{%4%}|%0%{%4%}, %3, %2<round_op5>}\n    vfnmsub213<ssemodesuffix>\\t{<round_op5>%3, %2, %0%{%4%}|%0%{%4%}, %2, %3<round_op5>}\"\n   [(set_attr \"isa\" \"fma_avx512f,fma_avx512f\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fnmsub_<mode>_mask3<round_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VF_512\n-\t  (fma:VF_512\n-\t    (neg:VF_512\n-\t      (match_operand:VF_512 1 \"register_operand\" \"v\"))\n-\t    (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>\")\n-\t    (neg:VF_512\n-\t      (match_operand:VF_512 3 \"register_operand\" \"0\")))\n+(define_insn \"<avx512>_fnmsub_<mode>_mask3<round_name>\"\n+  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF_AVX512VL\n+\t  (fma:VF_AVX512VL\n+\t    (neg:VF_AVX512VL\n+\t      (match_operand:VF_AVX512VL 1 \"register_operand\" \"v\"))\n+\t    (match_operand:VF_AVX512VL 2 \"nonimmediate_operand\" \"<round_constraint>\")\n+\t    (neg:VF_AVX512VL\n+\t      (match_operand:VF_AVX512VL 3 \"register_operand\" \"0\")))\n \t  (match_dup 3)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n@@ -3327,11 +3327,11 @@\n \t  UNSPEC_FMADDSUB))]\n   \"TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F\")\n \n-(define_expand \"avx512f_fmaddsub_<mode>_maskz<round_expand_name>\"\n-  [(match_operand:VF_512 0 \"register_operand\")\n-   (match_operand:VF_512 1 \"<round_expand_nimm_predicate>\")\n-   (match_operand:VF_512 2 \"<round_expand_nimm_predicate>\")\n-   (match_operand:VF_512 3 \"<round_expand_nimm_predicate>\")\n+(define_expand \"<avx512>_fmaddsub_<mode>_maskz<round_expand_name>\"\n+  [(match_operand:VF_AVX512VL 0 \"register_operand\")\n+   (match_operand:VF_AVX512VL 1 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VF_AVX512VL 2 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VF_AVX512VL 3 \"<round_expand_nimm_predicate>\")\n    (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n   \"TARGET_AVX512F\"\n {\n@@ -3341,47 +3341,46 @@\n   DONE;\n })\n \n-(define_insn \"<sd_mask_codefor>fma_fmaddsub_<mode><sd_maskz_name><round_name>\"\n+(define_insn \"*fma_fmaddsub_<mode>\"\n   [(set (match_operand:VF_128_256 0 \"register_operand\" \"=v,v,v,x,x\")\n \t(unspec:VF_128_256\n-\t  [(match_operand:VF_128_256 1 \"<round_nimm_predicate>\" \"%0,0,v,x,x\")\n-\t   (match_operand:VF_128_256 2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>,x,m\")\n-\t   (match_operand:VF_128_256 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0,xm,x\")]\n+\t  [(match_operand:VF_128_256 1 \"nonimmediate_operand\" \"%0,0,v,x,x\")\n+\t   (match_operand:VF_128_256 2 \"nonimmediate_operand\" \"vm,v,vm,x,m\")\n+\t   (match_operand:VF_128_256 3 \"nonimmediate_operand\" \"v,vm,0,xm,x\")]\n \t  UNSPEC_FMADDSUB))]\n-  \"(TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F) && <sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n+  \"TARGET_FMA || TARGET_FMA4\"\n   \"@\n-   vfmaddsub132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n-   vfmaddsub213<ssemodesuffix>\\t{<round_sd_mask_op4>%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<round_sd_mask_op4>}\n-   vfmaddsub231<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<round_sd_mask_op4>}\n+   vfmaddsub132<ssemodesuffix>\\t{%2, %3, %0|%0, %3, %2}\n+   vfmaddsub213<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n+   vfmaddsub231<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\n    vfmaddsub<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n    vfmaddsub<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f,fma4,fma4\")\n+  [(set_attr \"isa\" \"fma,fma,fma,fma4,fma4\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<sd_mask_codefor>fma_fmaddsub_<mode><sd_maskz_name><round_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v,v\")\n-\t(unspec:VF_512\n-\t  [(match_operand:VF_512 1 \"<round_nimm_predicate>\" \"%0,0,v\")\n-\t   (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n-\t   (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\")]\n+  [(set (match_operand:VF_SF_AVX512VL 0 \"register_operand\" \"=v,v,v\")\n+\t(unspec:VF_SF_AVX512VL\n+\t  [(match_operand:VF_SF_AVX512VL 1 \"<round_nimm_predicate>\" \"%0,0,v\")\n+\t   (match_operand:VF_SF_AVX512VL 2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n+\t   (match_operand:VF_SF_AVX512VL 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\")]\n \t  UNSPEC_FMADDSUB))]\n   \"TARGET_AVX512F && <sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    vfmaddsub132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n    vfmaddsub213<ssemodesuffix>\\t{<round_sd_mask_op4>%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<round_sd_mask_op4>}\n    vfmaddsub231<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<round_sd_mask_op4>}\"\n-  [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f\")\n-   (set_attr \"type\" \"ssemuladd\")\n+  [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fmaddsub_<mode>_mask<round_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v\")\n-\t(vec_merge:VF_512\n-\t  (unspec:VF_512\n-\t    [(match_operand:VF_512 1 \"register_operand\" \"0,0\")\n-\t     (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\")\n-\t     (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\")]\n+(define_insn \"<avx512>_fmaddsub_<mode>_mask<round_name>\"\n+  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VF_AVX512VL\n+\t  (unspec:VF_AVX512VL\n+\t    [(match_operand:VF_AVX512VL 1 \"register_operand\" \"0,0\")\n+\t     (match_operand:VF_AVX512VL 2 \"nonimmediate_operand\" \"<round_constraint>,v\")\n+\t     (match_operand:VF_AVX512VL 3 \"nonimmediate_operand\" \"v,<round_constraint>\")]\n \t    UNSPEC_FMADDSUB)\n \t  (match_dup 1)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk,Yk\")))]\n@@ -3393,13 +3392,13 @@\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fmaddsub_<mode>_mask3<round_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VF_512\n-\t  (unspec:VF_512\n-\t    [(match_operand:VF_512 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>\")\n-\t     (match_operand:VF_512 3 \"register_operand\" \"0\")]\n+(define_insn \"<avx512>_fmaddsub_<mode>_mask3<round_name>\"\n+  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF_AVX512VL\n+\t  (unspec:VF_AVX512VL\n+\t    [(match_operand:VF_AVX512VL 1 \"register_operand\" \"v\")\n+\t     (match_operand:VF_AVX512VL 2 \"nonimmediate_operand\" \"<round_constraint>\")\n+\t     (match_operand:VF_AVX512VL 3 \"register_operand\" \"0\")]\n \t    UNSPEC_FMADDSUB)\n \t  (match_dup 3)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n@@ -3409,50 +3408,49 @@\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<sd_mask_codefor>fma_fmsubadd_<mode><sd_maskz_name><round_name>\"\n+(define_insn \"*fma_fmsubadd_<mode>\"\n   [(set (match_operand:VF_128_256 0 \"register_operand\" \"=v,v,v,x,x\")\n \t(unspec:VF_128_256\n-\t  [(match_operand:VF_128_256   1 \"<round_nimm_predicate>\" \"%0,0,v,x,x\")\n-\t   (match_operand:VF_128_256   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>,x,m\")\n+\t  [(match_operand:VF_128_256   1 \"nonimmediate_operand\" \"%0,0,v,x,x\")\n+\t   (match_operand:VF_128_256   2 \"nonimmediate_operand\" \"vm,v,vm,x,m\")\n \t   (neg:VF_128_256\n-\t     (match_operand:VF_128_256 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0,xm,x\"))]\n+\t     (match_operand:VF_128_256 3 \"nonimmediate_operand\" \"v,vm,0,xm,x\"))]\n \t  UNSPEC_FMADDSUB))]\n-  \"(TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F) && <sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n+  \"TARGET_FMA || TARGET_FMA4\"\n   \"@\n-   vfmsubadd132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n-   vfmsubadd213<ssemodesuffix>\\t{<round_sd_mask_op4>%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<round_sd_mask_op4>}\n-   vfmsubadd231<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<round_sd_mask_op4>}\n+   vfmsubadd132<ssemodesuffix>\\t{%2, %3, %0|%0, %3, %2}\n+   vfmsubadd213<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n+   vfmsubadd231<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\n    vfmsubadd<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n    vfmsubadd<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f,fma4,fma4\")\n+  [(set_attr \"isa\" \"fma,fma,fma,fma4,fma4\")\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<sd_mask_codefor>fma_fmsubadd_<mode><sd_maskz_name><round_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v,v\")\n-\t(unspec:VF_512\n-\t  [(match_operand:VF_512   1 \"<round_nimm_predicate>\" \"%0,0,v\")\n-\t   (match_operand:VF_512   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n-\t   (neg:VF_512\n-\t     (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\"))]\n+  [(set (match_operand:VF_SF_AVX512VL 0 \"register_operand\" \"=v,v,v\")\n+\t(unspec:VF_SF_AVX512VL\n+\t  [(match_operand:VF_SF_AVX512VL   1 \"<round_nimm_predicate>\" \"%0,0,v\")\n+\t   (match_operand:VF_SF_AVX512VL   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n+\t   (neg:VF_SF_AVX512VL\n+\t     (match_operand:VF_SF_AVX512VL 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\"))]\n \t  UNSPEC_FMADDSUB))]\n   \"TARGET_AVX512F && <sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    vfmsubadd132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n    vfmsubadd213<ssemodesuffix>\\t{<round_sd_mask_op4>%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<round_sd_mask_op4>}\n    vfmsubadd231<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<round_sd_mask_op4>}\"\n-  [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f\")\n-   (set_attr \"type\" \"ssemuladd\")\n+  [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fmsubadd_<mode>_mask<round_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v\")\n-\t(vec_merge:VF_512\n-\t  (unspec:VF_512\n-\t    [(match_operand:VF_512 1 \"register_operand\" \"0,0\")\n-\t     (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\")\n-\t     (neg:VF_512\n-\t       (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\"))]\n+(define_insn \"<avx512>_fmsubadd_<mode>_mask<round_name>\"\n+  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VF_AVX512VL\n+\t  (unspec:VF_AVX512VL\n+\t    [(match_operand:VF_AVX512VL 1 \"register_operand\" \"0,0\")\n+\t     (match_operand:VF_AVX512VL 2 \"nonimmediate_operand\" \"<round_constraint>,v\")\n+\t     (neg:VF_AVX512VL\n+\t       (match_operand:VF_AVX512VL 3 \"nonimmediate_operand\" \"v,<round_constraint>\"))]\n \t    UNSPEC_FMADDSUB)\n \t  (match_dup 1)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk,Yk\")))]\n@@ -3464,14 +3462,14 @@\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_fmsubadd_<mode>_mask3<round_name>\"\n-  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VF_512\n-\t  (unspec:VF_512\n-\t    [(match_operand:VF_512 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>\")\n-\t     (neg:VF_512\n-\t       (match_operand:VF_512 3 \"register_operand\" \"0\"))]\n+(define_insn \"<avx512>_fmsubadd_<mode>_mask3<round_name>\"\n+  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF_AVX512VL\n+\t  (unspec:VF_AVX512VL\n+\t    [(match_operand:VF_AVX512VL 1 \"register_operand\" \"v\")\n+\t     (match_operand:VF_AVX512VL 2 \"nonimmediate_operand\" \"<round_constraint>\")\n+\t     (neg:VF_AVX512VL\n+\t       (match_operand:VF_AVX512VL 3 \"register_operand\" \"0\"))]\n \t    UNSPEC_FMADDSUB)\n \t  (match_dup 3)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]"}]}