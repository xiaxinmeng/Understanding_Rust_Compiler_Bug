{"sha": "2370b831da45660213c12b3627b450d822ac0e00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM3MGI4MzFkYTQ1NjYwMjEzYzEyYjM2MjdiNDUwZDgyMmFjMGUwMA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-02-20T21:49:07Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-02-20T21:49:07Z"}, "message": "Update mips3 comments.\n\n(TARGET_OPTIONS): Add gp64 and gp32.\n(SECONDARY_MEMORY_NEEDED): Don't allow fp<->gp copy if TARGET_FLOAT64\n!= TARGET_64BIT.\n(CC1_SPEC): Generate correct -mfp* and -mgp* from -mips*\n\nFrom-SVN: r6596", "tree": {"sha": "4796b07817862cd0e240e75be7240307c17fa599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4796b07817862cd0e240e75be7240307c17fa599"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2370b831da45660213c12b3627b450d822ac0e00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2370b831da45660213c12b3627b450d822ac0e00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2370b831da45660213c12b3627b450d822ac0e00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2370b831da45660213c12b3627b450d822ac0e00/comments", "author": null, "committer": null, "parents": [{"sha": "64d8baf943c81f686041e379447431eab3f0a2b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64d8baf943c81f686041e379447431eab3f0a2b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64d8baf943c81f686041e379447431eab3f0a2b1"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "d4af0d830e9b858436518bb45175d55cd3c134d2", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2370b831da45660213c12b3627b450d822ac0e00/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2370b831da45660213c12b3627b450d822ac0e00/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=2370b831da45660213c12b3627b450d822ac0e00", "patch": "@@ -259,7 +259,7 @@ extern char\t       *mktemp ();\n #define MASK_ABICALLS\t0x00000400\t/* emit .abicalls/.cprestore/.cpload */\n #define MASK_HALF_PIC\t0x00000800\t/* Emit OSF-style pic refs to externs*/\n #define MASK_LONG_CALLS\t0x00001000\t/* Always call through a register */\n-#define MASK_64BIT\t0x00002000\t/* Use 64 bit registers and insns */\n+#define MASK_64BIT\t0x00002000\t/* Use 64 bit GP registers and insns */\n #define MASK_UNUSED1\t0x00004000\n #define MASK_UNUSED2\t0x00008000\n #define MASK_UNUSED3\t0x00010000\n@@ -362,6 +362,8 @@ extern char\t       *mktemp ();\n   {\"hard-float\",\t -MASK_SOFT_FLOAT},\t\t\t\t\\\n   {\"fp64\",\t\t  MASK_FLOAT64},\t\t\t\t\\\n   {\"fp32\",\t\t -MASK_FLOAT64},\t\t\t\t\\\n+  {\"gp64\",\t\t  MASK_64BIT},\t\t\t\t\t\\\n+  {\"gp32\",\t\t -MASK_64BIT},\t\t\t\t\t\\\n   {\"abicalls\",\t\t  MASK_ABICALLS},\t\t\t\t\\\n   {\"no-abicalls\",\t -MASK_ABICALLS},\t\t\t\t\\\n   {\"half-pic\",\t\t  MASK_HALF_PIC},\t\t\t\t\\\n@@ -421,18 +423,18 @@ extern char\t       *mktemp ();\n #define BRANCH_LIKELY_P()\t(mips_isa >= 2)\n #define HAVE_SQRT_P()\t\t(mips_isa >= 2)\n \n-/* If mips_isa >= 3, then override_options will set MASK_64BIT\n-   in target_flags.  This is in target_flags, not mips_isa, because\n-   the gen* programs link code that refers to it, and they don't have\n-   mips_isa.  They don't actually use the information in target_flags;\n-   they just refer to it.\n+/* CC1_SPEC causes -mips3 to set -mfp64 and -mgp64; -mips1 or -mips2\n+   sets -mfp32 and -mgp32.  This can be overridden by an explicit\n+   -mfp32, -mfp64, -mgp32 or -mgp64.  -mfp64 sets MASK_FLOAT64 in\n+   target_flags, and -mgp64 sets MASK_64BIT.\n \n-   Setting mips_isa >= 3 will cause gcc to assume that registers are\n-   64 bits wide.  int, long and void * will be 32 bit; this may be\n-   changed with -mint64 or -mlong64.\n+   Setting MASK_64BIT in target_flags will cause gcc to assume that\n+   registers are 64 bits wide.  int, long and void * will be 32 bit;\n+   this may be changed with -mint64 or -mlong64.\n \n-   CC1_SPEC causes -mips3 to set -mfp64, and -mips1 or -mips2 to set -mfp32.\n-   This can be overridden by an explicit -mfp32 or -mfp64.  */\n+   The gen* programs link code that refers to MASK_64BIT.  They don't\n+   actually use the information in target_flags; they just refer to\n+   it.  */\n \f\n /* Switch  Recognition by gcc.c.  Add -G xx support */\n \n@@ -620,7 +622,7 @@ while (0)\n #ifndef CC1_SPEC\n #define CC1_SPEC \"\\\n %{gline:%{!g:%{!g0:%{!g1:%{!g2: -g1}}}}} \\\n-%{mips1:-mfp32}%{mips2:-mfp32}%{mips3:-mfp64} \\\n+%{mips1:-mfp32 -mgp32}%{mips2:-mfp32 -mgp32}%{mips3:-mfp64 -mgp64} \\\n %{G*} \\\n %{pic-none:   -mno-half-pic} \\\n %{pic-lib:    -mhalf-pic} \\\n@@ -1493,10 +1495,13 @@ extern enum reg_class mips_char_to_class[];\n    Do not define this macro if its value would always be zero.  */\n \n #define SECONDARY_MEMORY_NEEDED(CLASS1, CLASS2, MODE)\t\t\t\\\n-  (!TARGET_DEBUG_H_MODE\t\t\t\t\t\t\t\\\n-   && GET_MODE_CLASS (MODE) == MODE_INT\t\t\t\t\t\\\n-   && ((CLASS1 == FP_REGS && CLASS2 == GR_REGS)\t\t\t\t\\\n-       || (CLASS1 == GR_REGS && CLASS2 == FP_REGS)))\n+  ((!TARGET_DEBUG_H_MODE\t\t\t\t\t\t\\\n+    && GET_MODE_CLASS (MODE) == MODE_INT\t\t\t\t\\\n+    && ((CLASS1 == FP_REGS && CLASS2 == GR_REGS)\t\t\t\\\n+\t|| (CLASS1 == GR_REGS && CLASS2 == FP_REGS)))\t\t\t\\\n+   || (TARGET_FLOAT64 && !TARGET_64BIT && (MODE) == DFmode\t\t\\\n+       && ((CLASS1 == GR_REGS && CLASS2 == FP_REGS)\t\t\t\\\n+\t   || (CLASS2 == GR_REGS && CLASS1 == FP_REGS))))\n \n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.  */"}]}