{"sha": "da0f033486c5ba410fac5c4296e562ee22a0a3e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGEwZjAzMzQ4NmM1YmE0MTBmYWM1YzQyOTZlNTYyZWUyMmEwYTNlOQ==", "commit": {"author": {"name": "Gary Benson", "email": "gbenson@redhat.com", "date": "2006-08-07T14:42:48Z"}, "committer": {"name": "Gary Benson", "email": "gary@gcc.gnu.org", "date": "2006-08-07T14:42:48Z"}, "message": "SecurityManager.java (getSecurityContext, [...]): Merge with Classpath.\n\n2006-08-07  Gary Benson  <gbenson@redhat.com>\n\t    Casey Marshall <csm@gnu.org>\n\n\t* java/lang/SecurityManager.java (getSecurityContext,\n\tcheckPermission, checkAccess, checkRead, checkConnect,\n\tcheckPackageAccess, checkPackageDefinition, checkPackageList):\n\tMerge with Classpath.\n\t(SecurityContext): Remove.\n\n\nCo-Authored-By: Casey Marshall <csm@gnu.org>\n\nFrom-SVN: r115998", "tree": {"sha": "001e722f3e9c3ed2a960b6d618506efc6918531a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/001e722f3e9c3ed2a960b6d618506efc6918531a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da0f033486c5ba410fac5c4296e562ee22a0a3e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da0f033486c5ba410fac5c4296e562ee22a0a3e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da0f033486c5ba410fac5c4296e562ee22a0a3e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da0f033486c5ba410fac5c4296e562ee22a0a3e9/comments", "author": null, "committer": null, "parents": [{"sha": "e79e0270c06080eaff1f06afd485beee53626090", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e79e0270c06080eaff1f06afd485beee53626090", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e79e0270c06080eaff1f06afd485beee53626090"}], "stats": {"total": 120, "additions": 61, "deletions": 59}, "files": [{"sha": "9436ff9093a3df22feea43ca6286fcbae240f9ce", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0f033486c5ba410fac5c4296e562ee22a0a3e9/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0f033486c5ba410fac5c4296e562ee22a0a3e9/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=da0f033486c5ba410fac5c4296e562ee22a0a3e9", "patch": "@@ -1,3 +1,12 @@\n+2006-08-07  Gary Benson  <gbenson@redhat.com>\n+\t    Casey Marshall <csm@gnu.org>\n+\n+\t* java/lang/SecurityManager.java (getSecurityContext,\n+\tcheckPermission, checkAccess, checkRead, checkConnect,\n+\tcheckPackageAccess, checkPackageDefinition, checkPackageList):\n+\tMerge with Classpath.\n+\t(SecurityContext): Remove.\n+\n 2006-08-07  Gary Benson  <gbenson@redhat.com>\n \n \t* java/security/VMAccessController.java (pushContext, popContext,"}, {"sha": "c803c5b85540d94cf887f526ebabf665d796688f", "filename": "libjava/java/lang/SecurityManager.java", "status": "modified", "additions": 52, "deletions": 59, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0f033486c5ba410fac5c4296e562ee22a0a3e9/libjava%2Fjava%2Flang%2FSecurityManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0f033486c5ba410fac5c4296e562ee22a0a3e9/libjava%2Fjava%2Flang%2FSecurityManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FSecurityManager.java?ref=da0f033486c5ba410fac5c4296e562ee22a0a3e9", "patch": "@@ -1,5 +1,6 @@\n /* SecurityManager.java -- security checks for privileged actions\n-   Copyright (C) 1998, 1999, 2001, 2002, 2005  Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2001, 2002, 2005, 2006\n+   Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -45,11 +46,15 @@\n import java.lang.reflect.Member;\n import java.net.InetAddress;\n import java.net.SocketPermission;\n+import java.security.AccessController;\n+import java.security.AccessControlContext;\n import java.security.AllPermission;\n import java.security.Permission;\n+import java.security.PrivilegedAction;\n import java.security.Security;\n import java.security.SecurityPermission;\n import java.util.PropertyPermission;\n+import java.util.StringTokenizer;\n \n /**\n  * SecurityManager is a class you can extend to create your own Java\n@@ -315,8 +320,7 @@ protected boolean inClassLoader()\n    */\n   public Object getSecurityContext()\n   {\n-    // XXX Should be: return AccessController.getContext();\n-    return new SecurityContext(getClassContext());\n+    return AccessController.getContext();\n   }\n \n   /**\n@@ -331,8 +335,7 @@ public Object getSecurityContext()\n    */\n   public void checkPermission(Permission perm)\n   {\n-    // XXX Should be: AccessController.checkPermission(perm);\n-    //.throw new SecurityException(\"Operation not allowed\");\n+    AccessController.checkPermission(perm);\n   }\n \n   /**\n@@ -353,11 +356,9 @@ public void checkPermission(Permission perm)\n    */\n   public void checkPermission(Permission perm, Object context)\n   {\n-    // XXX Should be:\n-    // if (! (context instanceof AccessControlContext))\n-    //   throw new SecurityException(\"Missing context\");\n-    // ((AccessControlContext) context).checkPermission(perm);\n-    throw new SecurityException(\"Operation not allowed\");\n+    if (! (context instanceof AccessControlContext))\n+      throw new SecurityException(\"Missing context\");\n+    ((AccessControlContext) context).checkPermission(perm);\n   }\n \n   /**\n@@ -402,7 +403,7 @@ public void checkCreateClassLoader()\n   public void checkAccess(Thread thread)\n   {\n     if (thread.getThreadGroup() != null \n-\t&& thread.getThreadGroup().getParent() != null)\n+\t&& thread.getThreadGroup().getParent() == null)\n       checkPermission(new RuntimePermission(\"modifyThread\"));\n   }\n \n@@ -435,7 +436,7 @@ public void checkAccess(Thread thread)\n    */\n   public void checkAccess(ThreadGroup g)\n   {\n-    if (g.getParent() != null)\n+    if (g.getParent() == null)\n       checkPermission(new RuntimePermission(\"modifyThreadGroup\"));\n   }\n \n@@ -556,12 +557,10 @@ public void checkRead(String filename)\n    */\n   public void checkRead(String filename, Object context)\n   {\n-    // XXX Should be:\n-    // if (! (context instanceof AccessControlContext))\n-    //   throw new SecurityException(\"Missing context\");\n-    // AccessControlContext ac = (AccessControlContext) context;\n-    // ac.checkPermission(new FilePermission(filename, \"read\"));\n-    // throw new SecurityException(\"Cannot read files via file names.\");\n+    if (! (context instanceof AccessControlContext))\n+      throw new SecurityException(\"Missing context\");\n+    AccessControlContext ac = (AccessControlContext) context;\n+    ac.checkPermission(new FilePermission(filename, \"read\"));\n   }\n \n   /**\n@@ -675,17 +674,15 @@ public void checkConnect(String host, int port)\n    */\n   public void checkConnect(String host, int port, Object context)\n   {\n-    // XXX Should be:\n-    // if (! (context instanceof AccessControlContext))\n-    //   throw new SecurityException(\"Missing context\");\n-    // AccessControlContext ac = (AccessControlContext) context;\n-    // if (port == -1)\n-    //   ac.checkPermission(new SocketPermission(host, \"resolve\"));\n-    // else\n-    //   // Use the toString() hack to do the null check.\n-    //   ac.checkPermission(new SocketPermission(host.toString + \":\" +port,\n-    //                                           \"connect\"));\n-    // throw new SecurityException(\"Cannot make network connections.\");\n+    if (! (context instanceof AccessControlContext))\n+      throw new SecurityException(\"Missing context\");\n+    AccessControlContext ac = (AccessControlContext) context;\n+    if (port == -1)\n+      ac.checkPermission(new SocketPermission(host, \"resolve\"));\n+    else\n+      // Use the toString() hack to do the null check.\n+      ac.checkPermission(new SocketPermission(host.toString() + \":\" + port,\n+                                              \"connect\"));\n   }\n \n   /**\n@@ -902,7 +899,7 @@ public void checkAwtEventQueueAccess()\n    */\n   public void checkPackageAccess(String packageName)\n   {\n-    checkPackageList(packageName, \"access\", \"accessClassInPackage.\");\n+    checkPackageList(packageName, \"package.access\", \"accessClassInPackage.\");\n   }\n \n   /**\n@@ -924,7 +921,7 @@ public void checkPackageAccess(String packageName)\n    */\n   public void checkPackageDefinition(String packageName)\n   {\n-    checkPackageList(packageName, \"definition\", \"defineClassInPackage.\");\n+    checkPackageList(packageName, \"package.definition\", \"defineClassInPackage.\");\n   }\n \n   /**\n@@ -1027,38 +1024,34 @@ public ThreadGroup getThreadGroup()\n    * @see #checkPackageAccess(String)\n    * @see #checkPackageDefinition(String)\n    */\n-  void checkPackageList(String packageName, String restriction,\n+  void checkPackageList(String packageName, final String restriction,\n                         String permission)\n   {\n-    // Use the toString() hack to do the null check.\n-    Permission p = new RuntimePermission(permission + packageName.toString());\n-    String list = Security.getProperty(\"package.\" + restriction);\n-    if (list == null)\n+    if (packageName == null)\n+      throw new NullPointerException();\n+\n+    String list = (String)AccessController.doPrivileged(new PrivilegedAction()\n+      {\n+\tpublic Object run()\n+        {\n+\t  return Security.getProperty(restriction);\n+\t}\n+      });\n+\n+    if (list == null || list.equals(\"\"))\n       return;\n-    while (! \"\".equals(packageName))\n+\n+    String packageNamePlusDot = packageName + \".\";\n+\n+    StringTokenizer st = new StringTokenizer(list, \",\");\n+    while (st.hasMoreTokens())\n       {\n-        for (int index = list.indexOf(packageName);\n-             index != -1; index = list.indexOf(packageName, index + 1))\n-          {\n-            // Exploit package visibility for speed.\n-\t    int packageNameCount = packageName.length();\n-            if (index + packageNameCount == list.length()\n-                || list.charAt(index + packageNameCount) == ',')\n-              {\n-                checkPermission(p);\n-                return;\n-              }\n-          }\n-        int index = packageName.lastIndexOf('.');\n-        packageName = index < 0 ? \"\" : packageName.substring(0, index);\n+\tif (packageNamePlusDot.startsWith(st.nextToken()))\n+\t  {\n+\t    Permission p = new RuntimePermission(permission + packageName);\n+\t    checkPermission(p);\n+\t    return;\n+\t  }\n       }\n   }\n-} // class SecurityManager\n-\n-// XXX This class is unnecessary.\n-class SecurityContext {\n-\tClass[] classes;\n-\tSecurityContext(Class[] classes) {\n-\t\tthis.classes = classes;\n-\t}\n }"}]}