{"sha": "6836632e96e894513c605a2eb6e2dfae77a9a069", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgzNjYzMmU5NmU4OTQ1MTNjNjA1YTJlYjZlMmRmYWU3N2E5YTA2OQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-09-12T14:25:17Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-09-12T14:25:17Z"}, "message": "c-common.c (field_decl_cmp, [...]): Move to c/c-decl.c.\n\n\tc-family/\n\t* c-common.c (field_decl_cmp, resort_data, resort_field_decl_cmp,\n\tresort_sorted_fields): Move to c/c-decl.c.\n\t* c-common.h (field_decl_cmp, resort_sorted_fields): Delete.\n\t(struct sorted_fields_type): Move to c/c-lang.h.\n\n\tc/\n\t* c-decl.c (field_decl_cmp, resort_data, resort_field_decl_cmp,\n\tresort_sorted_fields): Moved from c-family/c-common.c.\n\t* c-lang.h (struct sorted_fields_type): Moved from c-family/c-common.h.\n\nFrom-SVN: r252023", "tree": {"sha": "d01c2a6b39749135ebf8d37977e049108baac8f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d01c2a6b39749135ebf8d37977e049108baac8f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6836632e96e894513c605a2eb6e2dfae77a9a069", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6836632e96e894513c605a2eb6e2dfae77a9a069", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6836632e96e894513c605a2eb6e2dfae77a9a069", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6836632e96e894513c605a2eb6e2dfae77a9a069/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "13bdca744bda9321d6e0f4beca7bf9ac2e0870c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13bdca744bda9321d6e0f4beca7bf9ac2e0870c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13bdca744bda9321d6e0f4beca7bf9ac2e0870c0"}], "stats": {"total": 165, "additions": 87, "deletions": 78}, "files": [{"sha": "29037e5af8fcd465ad5ac711a60499c61d05aae9", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6836632e96e894513c605a2eb6e2dfae77a9a069/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6836632e96e894513c605a2eb6e2dfae77a9a069/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=6836632e96e894513c605a2eb6e2dfae77a9a069", "patch": "@@ -1,3 +1,10 @@\n+2017-09-12  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-common.c (field_decl_cmp, resort_data, resort_field_decl_cmp,\n+\tresort_sorted_fields): Move to c/c-decl.c.\n+\t* c-common.h (field_decl_cmp, resort_sorted_fields): Delete.\n+\t(struct sorted_fields_type): Move to c/c-lang.h.\n+\n 2017-09-09  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR c++/81852"}, {"sha": "b3ec3a0f7e6917b1f6cb9bf90d0edda82cb4ef5e", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6836632e96e894513c605a2eb6e2dfae77a9a069/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6836632e96e894513c605a2eb6e2dfae77a9a069/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=6836632e96e894513c605a2eb6e2dfae77a9a069", "patch": "@@ -309,7 +309,6 @@ static bool check_case_bounds (location_t, tree, tree, tree *, tree *,\n \n static void check_nonnull_arg (void *, tree, unsigned HOST_WIDE_INT);\n static bool nonnull_check_p (tree, unsigned HOST_WIDE_INT);\n-static int resort_field_decl_cmp (const void *, const void *);\n \n /* Reserved words.  The third field is a mask: keywords are disabled\n    if they match the mask.\n@@ -5871,73 +5870,6 @@ check_builtin_function_arguments (location_t loc, vec<location_t> arg_loc,\n     }\n }\n \n-/* Function to help qsort sort FIELD_DECLs by name order.  */\n-\n-int\n-field_decl_cmp (const void *x_p, const void *y_p)\n-{\n-  const tree *const x = (const tree *) x_p;\n-  const tree *const y = (const tree *) y_p;\n-\n-  if (DECL_NAME (*x) == DECL_NAME (*y))\n-    /* A nontype is \"greater\" than a type.  */\n-    return (TREE_CODE (*y) == TYPE_DECL) - (TREE_CODE (*x) == TYPE_DECL);\n-  if (DECL_NAME (*x) == NULL_TREE)\n-    return -1;\n-  if (DECL_NAME (*y) == NULL_TREE)\n-    return 1;\n-  if (DECL_NAME (*x) < DECL_NAME (*y))\n-    return -1;\n-  return 1;\n-}\n-\n-static struct {\n-  gt_pointer_operator new_value;\n-  void *cookie;\n-} resort_data;\n-\n-/* This routine compares two fields like field_decl_cmp but using the\n-pointer operator in resort_data.  */\n-\n-static int\n-resort_field_decl_cmp (const void *x_p, const void *y_p)\n-{\n-  const tree *const x = (const tree *) x_p;\n-  const tree *const y = (const tree *) y_p;\n-\n-  if (DECL_NAME (*x) == DECL_NAME (*y))\n-    /* A nontype is \"greater\" than a type.  */\n-    return (TREE_CODE (*y) == TYPE_DECL) - (TREE_CODE (*x) == TYPE_DECL);\n-  if (DECL_NAME (*x) == NULL_TREE)\n-    return -1;\n-  if (DECL_NAME (*y) == NULL_TREE)\n-    return 1;\n-  {\n-    tree d1 = DECL_NAME (*x);\n-    tree d2 = DECL_NAME (*y);\n-    resort_data.new_value (&d1, resort_data.cookie);\n-    resort_data.new_value (&d2, resort_data.cookie);\n-    if (d1 < d2)\n-      return -1;\n-  }\n-  return 1;\n-}\n-\n-/* Resort DECL_SORTED_FIELDS because pointers have been reordered.  */\n-\n-void\n-resort_sorted_fields (void *obj,\n-\t\t      void * ARG_UNUSED (orig_obj),\n-\t\t      gt_pointer_operator new_value,\n-\t\t      void *cookie)\n-{\n-  struct sorted_fields_type *sf = (struct sorted_fields_type *) obj;\n-  resort_data.new_value = new_value;\n-  resort_data.cookie = cookie;\n-  qsort (&sf->elts[0], sf->len, sizeof (tree),\n-\t resort_field_decl_cmp);\n-}\n-\n /* Subroutine of c_parse_error.\n    Return the result of concatenating LHS and RHS. RHS is really\n    a string literal, its first character is indicated by RHS_START and"}, {"sha": "0de549d2412393c27bbfdf7678db05493279746d", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6836632e96e894513c605a2eb6e2dfae77a9a069/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6836632e96e894513c605a2eb6e2dfae77a9a069/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=6836632e96e894513c605a2eb6e2dfae77a9a069", "patch": "@@ -493,13 +493,6 @@ extern const unsigned int num_c_common_reswords;\n \n extern GTY(()) tree c_global_trees[CTI_MAX];\n \n-/* In a RECORD_TYPE, a sorted array of the fields of the type, not a\n-   tree for size reasons.  */\n-struct GTY(()) sorted_fields_type {\n-  int len;\n-  tree GTY((length (\"%h.len\"))) elts[1];\n-};\n-\n /* Mark which labels are explicitly declared.\n    These may be shadowed, and may be referenced from nested functions.  */\n #define C_DECLARED_LABEL_FLAG(label) TREE_LANG_FLAG_1 (label)\n@@ -597,9 +590,6 @@ extern tree build_array_notation_expr (location_t, tree, tree, enum tree_code,\n extern tree build_array_notation_ref (location_t, tree, tree, tree, tree, tree);\n extern tree build_indirect_ref (location_t, tree, ref_operator);\n \n-extern int field_decl_cmp (const void *, const void *);\n-extern void resort_sorted_fields (void *, void *, gt_pointer_operator,\n-\t\t\t\t  void *);\n extern bool has_c_linkage (const_tree decl);\n extern bool c_decl_implicit (const_tree);\n \f"}, {"sha": "d55b5ac42e48085fd7fdc58975e9ea4f29f3f4fb", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6836632e96e894513c605a2eb6e2dfae77a9a069/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6836632e96e894513c605a2eb6e2dfae77a9a069/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=6836632e96e894513c605a2eb6e2dfae77a9a069", "patch": "@@ -1,3 +1,9 @@\n+2017-09-12  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-decl.c (field_decl_cmp, resort_data, resort_field_decl_cmp,\n+\tresort_sorted_fields): Moved from c-family/c-common.c.\n+\t* c-lang.h (struct sorted_fields_type): Moved from c-family/c-common.h.\n+\n 2017-09-01  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/82071"}, {"sha": "712149823290a32bab163fb5de8642b053371f16", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6836632e96e894513c605a2eb6e2dfae77a9a069/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6836632e96e894513c605a2eb6e2dfae77a9a069/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=6836632e96e894513c605a2eb6e2dfae77a9a069", "patch": "@@ -7840,6 +7840,26 @@ warn_cxx_compat_finish_struct (tree fieldlist, enum tree_code code,\n     b->in_struct = 0;\n }\n \n+/* Function to help qsort sort FIELD_DECLs by name order.  */\n+\n+static int\n+field_decl_cmp (const void *x_p, const void *y_p)\n+{\n+  const tree *const x = (const tree *) x_p;\n+  const tree *const y = (const tree *) y_p;\n+\n+  if (DECL_NAME (*x) == DECL_NAME (*y))\n+    /* A nontype is \"greater\" than a type.  */\n+    return (TREE_CODE (*y) == TYPE_DECL) - (TREE_CODE (*x) == TYPE_DECL);\n+  if (DECL_NAME (*x) == NULL_TREE)\n+    return -1;\n+  if (DECL_NAME (*y) == NULL_TREE)\n+    return 1;\n+  if (DECL_NAME (*x) < DECL_NAME (*y))\n+    return -1;\n+  return 1;\n+}\n+\n /* Fill in the fields of a RECORD_TYPE or UNION_TYPE node, T.\n    LOC is the location of the RECORD_TYPE or UNION_TYPE's definition.\n    FIELDLIST is a chain of FIELD_DECL nodes for the fields.\n@@ -8165,6 +8185,53 @@ finish_struct (location_t loc, tree t, tree fieldlist, tree attributes,\n   return t;\n }\n \n+static struct {\n+  gt_pointer_operator new_value;\n+  void *cookie;\n+} resort_data;\n+\n+/* This routine compares two fields like field_decl_cmp but using the\n+pointer operator in resort_data.  */\n+\n+static int\n+resort_field_decl_cmp (const void *x_p, const void *y_p)\n+{\n+  const tree *const x = (const tree *) x_p;\n+  const tree *const y = (const tree *) y_p;\n+\n+  if (DECL_NAME (*x) == DECL_NAME (*y))\n+    /* A nontype is \"greater\" than a type.  */\n+    return (TREE_CODE (*y) == TYPE_DECL) - (TREE_CODE (*x) == TYPE_DECL);\n+  if (DECL_NAME (*x) == NULL_TREE)\n+    return -1;\n+  if (DECL_NAME (*y) == NULL_TREE)\n+    return 1;\n+  {\n+    tree d1 = DECL_NAME (*x);\n+    tree d2 = DECL_NAME (*y);\n+    resort_data.new_value (&d1, resort_data.cookie);\n+    resort_data.new_value (&d2, resort_data.cookie);\n+    if (d1 < d2)\n+      return -1;\n+  }\n+  return 1;\n+}\n+\n+/* Resort DECL_SORTED_FIELDS because pointers have been reordered.  */\n+\n+void\n+resort_sorted_fields (void *obj,\n+\t\t      void * ARG_UNUSED (orig_obj),\n+\t\t      gt_pointer_operator new_value,\n+\t\t      void *cookie)\n+{\n+  struct sorted_fields_type *sf = (struct sorted_fields_type *) obj;\n+  resort_data.new_value = new_value;\n+  resort_data.cookie = cookie;\n+  qsort (&sf->elts[0], sf->len, sizeof (tree),\n+\t resort_field_decl_cmp);\n+}\n+\n /* Lay out the type T, and its element type, and so on.  */\n \n static void"}, {"sha": "8ecafb3cf5ca09fe251c1675dae502a45a37a45b", "filename": "gcc/c/c-lang.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6836632e96e894513c605a2eb6e2dfae77a9a069/gcc%2Fc%2Fc-lang.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6836632e96e894513c605a2eb6e2dfae77a9a069/gcc%2Fc%2Fc-lang.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-lang.h?ref=6836632e96e894513c605a2eb6e2dfae77a9a069", "patch": "@@ -22,6 +22,13 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"c-family/c-common.h\"\n \n+/* In a RECORD_TYPE, a sorted array of the fields of the type, not a\n+   tree for size reasons.  */\n+struct GTY(()) sorted_fields_type {\n+  int len;\n+  tree GTY((length (\"%h.len\"))) elts[1];\n+};\n+\n struct GTY(()) lang_type {\n   /* In a RECORD_TYPE, a sorted array of the fields of the type.  */\n   struct sorted_fields_type * GTY ((reorder (\"resort_sorted_fields\"))) s;"}]}