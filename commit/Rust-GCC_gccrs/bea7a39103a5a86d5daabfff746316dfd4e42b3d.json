{"sha": "bea7a39103a5a86d5daabfff746316dfd4e42b3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVhN2EzOTEwM2E1YTg2ZDVkYWFiZmZmNzQ2MzE2ZGZkNGU0MmIzZA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-30T00:16:24Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-30T00:16:24Z"}, "message": "Daily bump.", "tree": {"sha": "f56f8fddc0ae628e9b5af16d9cd1f653f70f8db1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f56f8fddc0ae628e9b5af16d9cd1f653f70f8db1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bea7a39103a5a86d5daabfff746316dfd4e42b3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea7a39103a5a86d5daabfff746316dfd4e42b3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bea7a39103a5a86d5daabfff746316dfd4e42b3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea7a39103a5a86d5daabfff746316dfd4e42b3d/comments", "author": null, "committer": null, "parents": [{"sha": "a0d007d67c85ecf4030bad8a6cf95f31bc6cb656", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0d007d67c85ecf4030bad8a6cf95f31bc6cb656", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0d007d67c85ecf4030bad8a6cf95f31bc6cb656"}], "stats": {"total": 301, "additions": 300, "deletions": 1}, "files": [{"sha": "754174b457f406101033e9b70651152501543dd6", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea7a39103a5a86d5daabfff746316dfd4e42b3d/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea7a39103a5a86d5daabfff746316dfd4e42b3d/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=bea7a39103a5a86d5daabfff746316dfd4e42b3d", "patch": "@@ -1,3 +1,7 @@\n+2020-07-29  Martin Liska  <mliska@suse.cz>\n+\n+\t* git-backport.py: fix how are ChangeLog paths combined.\n+\n 2020-07-23  Patrick Palka  <ppalka@redhat.com>\n \n \t* vimrc (SetStyle): Also inspect &filetype to determine whether"}, {"sha": "871b97c8543db3a97c3dd3ba93f0ee2d2ad27beb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea7a39103a5a86d5daabfff746316dfd4e42b3d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea7a39103a5a86d5daabfff746316dfd4e42b3d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bea7a39103a5a86d5daabfff746316dfd4e42b3d", "patch": "@@ -1,3 +1,73 @@\n+2020-07-29  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/nvptx/nvptx.md (recip<mode>2): New instruction.\n+\n+2020-07-29  Fangrui Song  <maskray@google.com>\n+\n+\tPR debug/95096\n+\t* opts.c (common_handle_option): Don't make -gsplit-dwarf imply -g.\n+\t* doc/invoke.texi (-gsplit-dwarf): Update documentation.\n+\n+2020-07-29  Joe Ramsay  <joe.ramsay@arm.com>\n+\n+\t* config/arm/arm-protos.h (arm_coproc_mem_operand_no_writeback):\n+\tDeclare prototype.\n+\t(arm_mve_mode_and_operands_type_check): Declare prototype.\n+\t* config/arm/arm.c (arm_coproc_mem_operand): Refactor to use\n+\t_arm_coproc_mem_operand.\n+\t(arm_coproc_mem_operand_wb): New function to cover full, limited\n+\tand no writeback.\n+\t(arm_coproc_mem_operand_no_writeback): New constraint for memory\n+\toperand with no writeback.\n+\t(arm_print_operand): Extend 'E' specifier for memory operand\n+\tthat does not support writeback.\n+\t(arm_mve_mode_and_operands_type_check): New constraint check for\n+\tMVE memory operands.\n+\t* config/arm/constraints.md: Add Uj constraint for VFP vldr.16\n+\tand vstr.16.\n+\t* config/arm/vfp.md (*mov_load_vfp_hf16): New pattern for\n+\tvldr.16.\n+\t(*mov_store_vfp_hf16): New pattern for vstr.16.\n+\t(*mov<mode>_vfp_<mode>16): Remove MVE moves.\n+\n+2020-07-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96349\n+\t* tree-ssa-loop-split.c (stmt_semi_invariant_p_1): When the\n+\tcondition runs into a loop PHI with an abnormal entry value give up.\n+\n+2020-07-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.c (vectorize_loops): Reset the SCEV\n+\tcache if we removed any SIMD UID SSA defs.\n+\t* gimple-loop-interchange.cc (pass_linterchange::execute):\n+\tReset the scev cache if we interchanged a loop.\n+\n+2020-07-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95679\n+\t* tree-ssa-propagate.h\n+\t(substitute_and_fold_engine::propagate_into_phi_args): Return\n+\twhether anything changed.\n+\t* tree-ssa-propagate.c\n+\t(substitute_and_fold_engine::propagate_into_phi_args): Likewise.\n+\t(substitute_and_fold_dom_walker::before_dom_children): Update\n+\tsomething_changed.\n+\n+2020-07-29  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment):\n+\tEnsure that loop variable npeel_tmp advances in each iteration.\n+\n+2020-07-29  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* config/mmix/mmix.h (NO_FUNCTION_CSE): Define to 1.\n+\n+2020-07-29  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* config/mmix/mmix.h (ASM_OUTPUT_EXTERNAL): Define to\n+\tdefault_elf_asm_output_external.\n+\n 2020-07-28  Sergei Trofimovich  <siarheit@google.com>\n \n \tPR ipa/96291"}, {"sha": "35e844018cffea776f0dbf4494e1387b1548767b", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea7a39103a5a86d5daabfff746316dfd4e42b3d/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea7a39103a5a86d5daabfff746316dfd4e42b3d/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=bea7a39103a5a86d5daabfff746316dfd4e42b3d", "patch": "@@ -1 +1 @@\n-20200729\n+20200730"}, {"sha": "274a0048ad398db244de0d9ef68091e68f0b382b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea7a39103a5a86d5daabfff746316dfd4e42b3d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea7a39103a5a86d5daabfff746316dfd4e42b3d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bea7a39103a5a86d5daabfff746316dfd4e42b3d", "patch": "@@ -1,3 +1,26 @@\n+2020-07-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/91427\n+\t* cp-tree.h (IMPLICIT_RVALUE_P): New.\n+\t(enum cp_lvalue_kind_flags): Add clk_implicit_rval.\n+\t(implicit_rvalue_p, set_implicit_rvalue_p): New.\n+\t* call.c (reference_binding): Check clk_implicit_rval.\n+\t(build_over_call): Adjust C++20 implicit move.\n+\t* coroutines.cc (finish_co_return_stmt): Simplify implicit move.\n+\t* except.c (build_throw): Adjust C++20 implicit move.\n+\t* pt.c (tsubst_copy_and_build) [STATIC_CAST_EXPR]: Propagate\n+\tIMPLICIT_RVALUE_P.\n+\t* tree.c (lvalue_kind): Set clk_implicit_rval.\n+\t* typeck.c (treat_lvalue_as_rvalue_p): Overhaul.\n+\t(maybe_warn_pessimizing_move): Adjust.\n+\t(check_return_expr): Adjust C++20 implicit move.\n+\n+2020-07-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/91212\n+\t* call.c (build_over_call): Don't call a const ref\n+\toverload for implicit move.\n+\n 2020-07-28  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-gimplify.c (cp_genericize_r): Set IMPORTED_DECL's context."}, {"sha": "fd1401c9bb6cf1ad8f6481092bd8e39743fef4aa", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea7a39103a5a86d5daabfff746316dfd4e42b3d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea7a39103a5a86d5daabfff746316dfd4e42b3d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bea7a39103a5a86d5daabfff746316dfd4e42b3d", "patch": "@@ -1,3 +1,52 @@\n+2020-07-29  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* dump-parse-tree.c (show_omp_clauses): Handle order(concurrent).\n+\t* gfortran.h (struct gfc_omp_clauses): Add order_concurrent.\n+\t* openmp.c (enum omp_mask1, OMP_DO_CLAUSES, OMP_SIMD_CLAUSES):\n+\tAdd OMP_CLAUSE_ORDER.\n+\t* trans-openmp.c (gfc_trans_omp_clauses, gfc_split_omp_clauses):\n+\tHandle order(concurrent) clause.\n+\n+2020-07-29  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* openmp.c (resolve_omp_clauses): Permit 'omp target data' without\n+\tmap if use_device_{addr,ptr} is present.\n+\n+2020-07-29  Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/96319\n+\t* intrinsic.c (gfc_convert_type_warn):  Add check for\n+\tLOGICAL type so that warnings are not output.\n+\n+2020-07-29  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* module.c (mio_symbol_attribute): Fix indent of previous\n+\tcommit.\n+\n+2020-07-29  Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/53298\n+\t* trans-array.c (gfc_walk_array_ref): If ref->ss.end is set\n+\tcall gfc_get_scalar_ss.\n+\n+2020-07-29  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.h (enum gfc_statement): Add ST_OMP_REQUIRES.\n+\t(enum gfc_omp_requires_kind): New.\n+\t(enum gfc_omp_atomic_op): Add GFC_OMP_ATOMIC_ACQ_REL.\n+\t(struct gfc_namespace): Add omp_requires and omp_target_seen.\n+\t(gfc_omp_requires_add_clause,\n+\t(gfc_check_omp_requires): New.\n+\t* match.h (gfc_match_omp_requires): New.\n+\t* module.c (enum ab_attribute, attr_bits): Add omp requires clauses.\n+\t(mio_symbol_attribute): Read/write them.\n+\t* openmp.c (gfc_check_omp_requires, (gfc_omp_requires_add_clause,\n+\tgfc_match_omp_requires): New.\n+\t(gfc_match_omp_oacc_atomic): Use requires's default mem-order.\n+\t* parse.c (decode_omp_directive): Match requires, set omp_target_seen.\n+\t(gfc_ascii_statement): Handle ST_OMP_REQUIRES.\n+\t* trans-openmp.c (gfc_trans_omp_atomic): Handle GFC_OMP_ATOMIC_ACQ_REL.\n+\n 2020-07-27  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* openmp.c (gfc_resolve_omp_directive): Remove NULL check"}, {"sha": "0cd3014f35dd4e024104f1590afad29df9b385bf", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea7a39103a5a86d5daabfff746316dfd4e42b3d/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea7a39103a5a86d5daabfff746316dfd4e42b3d/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=bea7a39103a5a86d5daabfff746316dfd4e42b3d", "patch": "@@ -1,3 +1,7 @@\n+2020-07-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* ja.po, sv.po: Update.\n+\n 2020-07-27  Joseph Myers  <joseph@codesourcery.com>\n \n \t* be.po, da.po, de.po, el.po, es.po, fi.po, fr.po, hr.po, id.po,"}, {"sha": "c85806d53b4d27edb5c717295f2a32fb2a8e3d8b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea7a39103a5a86d5daabfff746316dfd4e42b3d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea7a39103a5a86d5daabfff746316dfd4e42b3d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bea7a39103a5a86d5daabfff746316dfd4e42b3d", "patch": "@@ -1,3 +1,71 @@\n+2020-07-29  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/nvptx/recip-1.c: New test.\n+\n+2020-07-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/91427\n+\t* g++.dg/coroutines/co-return-syntax-10-movable.C: Extend.\n+\t* g++.dg/cpp0x/Wredundant-move1.C: Adjust for C++20.\n+\t* g++.dg/cpp0x/Wredundant-move7.C: Adjust for C++20.\n+\t* g++.dg/cpp0x/Wredundant-move9.C: Adjust for C++20.\n+\t* g++.dg/cpp0x/elision_neg.C: Adjust for C++20.\n+\t* g++.dg/cpp0x/move-return2.C: Adjust for C++20.\n+\t* g++.dg/cpp0x/ref-qual20.C: Adjust for C++20.\n+\t* g++.dg/cpp2a/implicit-move1.C: New test.\n+\t* g++.dg/cpp2a/implicit-move2.C: New test.\n+\t* g++.dg/cpp2a/implicit-move3.C: New test.\n+\n+2020-07-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/91212\n+\t* g++.dg/cpp0x/move-return3.C: New test.\n+\n+2020-07-29  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/order-3.f90: New test.\n+\t* gfortran.dg/gomp/order-4.f90: New test.\n+\n+2020-07-29  Tiziano M\u00fcller  <tiziano.mueller@chem.uzh.ch>\n+\n+\t* c-c++-common/cpp/has-include-1-traditional.c: New.\n+\n+2020-07-29  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/map-3.f90: New test.\n+\t* gfortran.dg/gomp/map-4.f90: New test.\n+\n+2020-07-29  Joe Ramsay  <joe.ramsay@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/mve-vldstr16-no-writeback.c: New file.\n+\n+2020-07-29  Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/96319\n+\t* gfortran.dg/pr96319.f90: New test.\n+\n+2020-07-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96349\n+\t* gcc.dg/torture/pr96349.c: New testcase.\n+\n+2020-07-29  Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/53298\n+\t* gfortran.dg/pr53298.f90: New test.\n+\n+2020-07-29  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/requires-1.f90: New test.\n+\t* gfortran.dg/gomp/requires-2.f90: New test.\n+\t* gfortran.dg/gomp/requires-3.f90: New test.\n+\t* gfortran.dg/gomp/requires-4.f90: New test.\n+\t* gfortran.dg/gomp/requires-5.f90: New test.\n+\t* gfortran.dg/gomp/requires-6.f90: New test.\n+\t* gfortran.dg/gomp/requires-7.f90: New test.\n+\t* gfortran.dg/gomp/requires-8.f90: New test.\n+\t* gfortran.dg/gomp/requires-9.f90: New test.\n+\n 2020-07-28  Sergei Trofimovich  <siarheit@google.com>\n \n \tPR ipa/96291"}, {"sha": "ad3576079945b1e0f50aea93d48b8cd37edffe73", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea7a39103a5a86d5daabfff746316dfd4e42b3d/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea7a39103a5a86d5daabfff746316dfd4e42b3d/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=bea7a39103a5a86d5daabfff746316dfd4e42b3d", "patch": "@@ -1,3 +1,8 @@\n+2020-07-29  Tiziano M\u00fcller  <tiziano.mueller@chem.uzh.ch>\n+\n+\t* init.c (builtin_array): Add xref comment.\n+\t* traditional.c (fun_like_macro): Add HAS_INCLUDE codes.\n+\n 2020-07-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/96323"}, {"sha": "ea043a331c9dfff8c66f40a5f1787b4b506d7f7d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea7a39103a5a86d5daabfff746316dfd4e42b3d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea7a39103a5a86d5daabfff746316dfd4e42b3d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bea7a39103a5a86d5daabfff746316dfd4e42b3d", "patch": "@@ -1,3 +1,79 @@\n+2020-07-29  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/hashtable_policy.h (_Node_iterator_base()): New.\n+\t(operator==(const _Node_iterator_base&, const _Node_iterator_base&)):\n+\tMake hidden friend.\n+\t(operator!=(const _Node_iterator_base&, const _Node_iterator_base&)):\n+\tMake hidden friend.\n+\t(_Local_iterator_base<>): Inherits _Node_iterator_base.\n+\t(_Local_iterator_base<>::_M_cur): Remove.\n+\t(_Local_iterator_base<>::_M_curr()): Remove.\n+\t(operator==(const _Local_iterator_base&, const _Local_iterator_base&)):\n+\tRemove.\n+\t(operator!=(const _Local_iterator_base&, const _Local_iterator_base&)):\n+\tRemove.\n+\t* include/debug/unordered_map (unordered_map<>::_M_invalidate): Adapt.\n+\t(unordered_multimap<>::_M_invalidate): Adapt.\n+\t* include/debug/unordered_set (unordered_set<>::_M_invalidate): Adapt.\n+\t(unordered_multiset<>::_M_invalidate): Adapt.\n+\n+2020-07-29  David Edelsohn  <dje.gcc@gmail.com>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\t    Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* testsuite/lib/dg-options.exp (add_options_for_libatomic): Add\n+\ttarget powerpc-ibm-aix* and powerpc*-*-darwin*.\n+\t* testsuite/29_atomics/atomic_float/value_init.cc: Add options\n+\tfor libatomic.\n+\n+2020-07-29  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/hashtable.h\n+\t(_Hashtable(_Hashtable&& __ht, __node_alloc_type&& __a, true_type)):\n+\tAdd noexcept qualification.\n+\t(_Hashtable(_Hashtable&&)): Fix noexcept qualification.\n+\t(_Hashtable(_Hashtable&&, const allocator_type&)): Add noexcept\n+\tqualification.\n+\t* include/bits/unordered_map.h\n+\t(unordered_map(unordered_map&&, const allocator_type&)): Add noexcept\n+\tqualification.\n+\t(unordered_multimap(unordered_multimap&&, const allocator_type&)):\n+\tLikewise.\n+\t* include/bits/unordered_set.h\n+\t(unordered_set(unordered_set&&, const allocator_type&)): Likewise.\n+\t(unordered_multiset(unordered_multiset&&, const allocator_type&)):\n+\tLikewise.\n+\t* include/debug/unordered_map\n+\t(unordered_map(unordered_map&&, const allocator_type&)): Likewise.\n+\t(unordered_multimap(unordered_multimap&&, const allocator_type&)):\n+\tLikewise.\n+\t* include/debug/unordered_set\n+\t(unordered_set(unordered_set&&, const allocator_type&)): Likewise.\n+\t(unordered_multiset(unordered_multiset&&, const allocator_type&)):\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_map/allocator/default_init.cc:\n+\tNew test.\n+\t* testsuite/23_containers/unordered_map/cons/noexcept_default_construct.cc:\n+\tNew test.\n+\t* testsuite/23_containers/unordered_map/cons/noexcept_move_construct.cc:\n+\tNew test.\n+\t* testsuite/23_containers/unordered_map/modifiers/move_assign.cc:\n+\tNew test.\n+\t* testsuite/23_containers/unordered_multimap/cons/noexcept_default_construct.cc:\n+\tNew test.\n+\t* testsuite/23_containers/unordered_multimap/cons/noexcept_move_construct.cc:\n+\tNew test.\n+\t* testsuite/23_containers/unordered_multiset/cons/noexcept_default_construct.cc:\n+\tNew test.\n+\t* testsuite/23_containers/unordered_multiset/cons/noexcept_move_construct.cc:\n+\tNew test.\n+\t* testsuite/23_containers/unordered_set/allocator/default_init.cc:\n+\tNew test.\n+\t* testsuite/23_containers/unordered_set/cons/noexcept_default_construct.cc:\n+\tNew test.\n+\t* testsuite/23_containers/unordered_set/cons/noexcept_move_construct.cc:\n+\tNew test.\n+\n 2020-07-28  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/bits/hashtable.h"}]}