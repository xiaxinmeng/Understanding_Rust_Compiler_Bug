{"sha": "5545a9071573a58e858860724cb47ed7a5ef440d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU0NWE5MDcxNTczYTU4ZTg1ODg2MDcyNGNiNDdlZDdhNWVmNDQwZA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-06-06T15:50:23Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-06-06T15:50:23Z"}, "message": "c-typeck.c (comptypes_internal): Handle comparisons of INTEGER_TYPE, FIXED_POINT_TYPE, and REAL_TYPE nodes.\n\n\t* c-typeck.c (comptypes_internal): Handle comparisons of\n\tINTEGER_TYPE, FIXED_POINT_TYPE, and REAL_TYPE nodes.  Don't check\n\tTYPE_REF_CAN_ALIAS_ALL.\n\n\t* c-c++-common/attr-may-alias-1.c: New test.\n\t* c-c++-common/attr-may-alias-2.c: New test.\n\t* gcc.dg/pr39464.c: Turn dg-warning into dg-bogus.\n\nFrom-SVN: r237137", "tree": {"sha": "4f2fdbd263f073b2a4d3d06e36e334555cc43fba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f2fdbd263f073b2a4d3d06e36e334555cc43fba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5545a9071573a58e858860724cb47ed7a5ef440d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5545a9071573a58e858860724cb47ed7a5ef440d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5545a9071573a58e858860724cb47ed7a5ef440d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5545a9071573a58e858860724cb47ed7a5ef440d/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "94229fb6dcd63c2dfaa6c68d6a03ada2697be729", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94229fb6dcd63c2dfaa6c68d6a03ada2697be729", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94229fb6dcd63c2dfaa6c68d6a03ada2697be729"}], "stats": {"total": 87, "additions": 80, "deletions": 7}, "files": [{"sha": "f0b03d2c8d743c9ea4fff1b02daaf715e278331d", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5545a9071573a58e858860724cb47ed7a5ef440d/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5545a9071573a58e858860724cb47ed7a5ef440d/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=5545a9071573a58e858860724cb47ed7a5ef440d", "patch": "@@ -1,3 +1,9 @@\n+2016-06-06  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-typeck.c (comptypes_internal): Handle comparisons of\n+\tINTEGER_TYPE, FIXED_POINT_TYPE, and REAL_TYPE nodes.  Don't check\n+\tTYPE_REF_CAN_ALIAS_ALL.\n+\n 2016-06-03  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* c-typeck.c (c_finish_omp_clauses): Mark OpenACC reduction"}, {"sha": "cee566f8322cc00a020c14f5529495c911d77974", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5545a9071573a58e858860724cb47ed7a5ef440d/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5545a9071573a58e858860724cb47ed7a5ef440d/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=5545a9071573a58e858860724cb47ed7a5ef440d", "patch": "@@ -1105,10 +1105,28 @@ comptypes_internal (const_tree type1, const_tree type2, bool *enum_and_int_p,\n \n   switch (TREE_CODE (t1))\n     {\n+    case INTEGER_TYPE:\n+    case FIXED_POINT_TYPE:\n+    case REAL_TYPE:\n+      /* With these nodes, we can't determine type equivalence by\n+\t looking at what is stored in the nodes themselves, because\n+\t two nodes might have different TYPE_MAIN_VARIANTs but still\n+\t represent the same type.  For example, wchar_t and int could\n+\t have the same properties (TYPE_PRECISION, TYPE_MIN_VALUE,\n+\t TYPE_MAX_VALUE, etc.), but have different TYPE_MAIN_VARIANTs\n+\t and are distinct types.  On the other hand, int and the\n+\t following typedef\n+\n+\t   typedef int INT __attribute((may_alias));\n+\n+\t have identical properties, different TYPE_MAIN_VARIANTs, but\n+\t represent the same type.  The canonical type system keeps\n+\t track of equivalence in this case, so we fall back on it.  */\n+      return TYPE_CANONICAL (t1) == TYPE_CANONICAL (t2);\n+\n     case POINTER_TYPE:\n-      /* Do not remove mode or aliasing information.  */\n-      if (TYPE_MODE (t1) != TYPE_MODE (t2)\n-\t  || TYPE_REF_CAN_ALIAS_ALL (t1) != TYPE_REF_CAN_ALIAS_ALL (t2))\n+      /* Do not remove mode information.  */\n+      if (TYPE_MODE (t1) != TYPE_MODE (t2))\n \tbreak;\n       val = (TREE_TYPE (t1) == TREE_TYPE (t2)\n \t     ? 1 : comptypes_internal (TREE_TYPE (t1), TREE_TYPE (t2),"}, {"sha": "1a7e9eef59bd731bc974e91269b99986d86bae94", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5545a9071573a58e858860724cb47ed7a5ef440d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5545a9071573a58e858860724cb47ed7a5ef440d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5545a9071573a58e858860724cb47ed7a5ef440d", "patch": "@@ -1,3 +1,9 @@\n+2016-06-06  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-c++-common/attr-may-alias-1.c: New test.\n+\t* c-c++-common/attr-may-alias-2.c: New test.\n+\t* gcc.dg/pr39464.c: Turn dg-warning into dg-bogus.\n+\n 2016-06-06  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR c/24414"}, {"sha": "978b9a58faf9102af7d141f0b4c43156744ae07d", "filename": "gcc/testsuite/c-c++-common/attr-may-alias-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5545a9071573a58e858860724cb47ed7a5ef440d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-may-alias-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5545a9071573a58e858860724cb47ed7a5ef440d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-may-alias-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-may-alias-1.c?ref=5545a9071573a58e858860724cb47ed7a5ef440d", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wall\" } */\n+\n+typedef int T __attribute__((may_alias));\n+\n+extern T *p;\n+extern int *p;\n+\n+extern int *p2;\n+extern T *p2;\n+\n+void fn1 (T);\n+void fn1 (int);\n+\n+void fn2 (int);\n+void fn2 (T);\n+\n+/* Ensure that the composite types have may_alias.  */\n+void\n+f (long *i)\n+{\n+  *i = *(__typeof (*p) *) &p;\n+  asm (\"\" : : \"r\" (*p));\n+  *i = *(__typeof (*p2) *) &p2;\n+  asm (\"\" : : \"r\" (*p2));\n+}"}, {"sha": "44ea92657294fba6b984fca13a52f530191f98cc", "filename": "gcc/testsuite/c-c++-common/attr-may-alias-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5545a9071573a58e858860724cb47ed7a5ef440d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-may-alias-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5545a9071573a58e858860724cb47ed7a5ef440d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-may-alias-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-may-alias-2.c?ref=5545a9071573a58e858860724cb47ed7a5ef440d", "patch": "@@ -0,0 +1,17 @@\n+/* We used to reject this because types differentiating only in\n+   TYPE_REF_CAN_ALIAS_ALL were deemed incompatible.  */\n+/* { dg-do compile } */\n+\n+struct sockaddr;\n+struct sockaddr *f (void);\n+\n+struct __attribute__((may_alias)) sockaddr { int j; };\n+struct sockaddr *\n+f (void)\n+{\n+  return\n+#ifndef __cplusplus\n+    (void *)\n+#endif\n+    0;\n+}"}, {"sha": "021c54e60b1057d86f688fb299f6becb03e965b8", "filename": "gcc/testsuite/gcc.dg/pr39464.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5545a9071573a58e858860724cb47ed7a5ef440d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39464.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5545a9071573a58e858860724cb47ed7a5ef440d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39464.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39464.c?ref=5545a9071573a58e858860724cb47ed7a5ef440d", "patch": "@@ -8,10 +8,10 @@ typedef unsigned int U __attribute__((may_alias));\n void\n foo (void *p)\n {\n-  T *a = (int *) p;\t\t/* { dg-warning \"initialization from incompatible pointer type\" } */\n-  int *b = (T *) p;\t\t/* { dg-warning \"initialization from incompatible pointer type\" } */\n-  U *c = (unsigned int *) p;\t/* { dg-warning \"initialization from incompatible pointer type\" } */\n-  unsigned int *d = (U *) p;\t/* { dg-warning \"initialization from incompatible pointer type\" } */\n+  T *a = (int *) p;\t\t/* { dg-bogus \"initialization from incompatible pointer type\" } */\n+  int *b = (T *) p;\t\t/* { dg-bogus \"initialization from incompatible pointer type\" } */\n+  U *c = (unsigned int *) p;\t/* { dg-bogus \"initialization from incompatible pointer type\" } */\n+  unsigned int *d = (U *) p;\t/* { dg-bogus \"initialization from incompatible pointer type\" } */\n   (void) a;\n   (void) b;\n   (void) c;"}]}