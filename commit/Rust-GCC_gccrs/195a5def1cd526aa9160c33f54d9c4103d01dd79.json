{"sha": "195a5def1cd526aa9160c33f54d9c4103d01dd79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk1YTVkZWYxY2Q1MjZhYTkxNjBjMzNmNTRkOWM0MTAzZDAxZGQ3OQ==", "commit": {"author": {"name": "Ira Ruben", "email": "ira@apple.com", "date": "2002-01-10T15:57:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-01-10T15:57:24Z"}, "message": "* decl.c (start_method): Handle attrlist.\n\nFrom-SVN: r48730", "tree": {"sha": "2528f81165f23bb5722ece8b32e2dc6132ce6a53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2528f81165f23bb5722ece8b32e2dc6132ce6a53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/195a5def1cd526aa9160c33f54d9c4103d01dd79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/195a5def1cd526aa9160c33f54d9c4103d01dd79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/195a5def1cd526aa9160c33f54d9c4103d01dd79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/195a5def1cd526aa9160c33f54d9c4103d01dd79/comments", "author": null, "committer": null, "parents": [{"sha": "adc7fcb8cd06a4e408eb7ff275fe5d8c898fa271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adc7fcb8cd06a4e408eb7ff275fe5d8c898fa271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adc7fcb8cd06a4e408eb7ff275fe5d8c898fa271"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "3764b85c63b8cc33be5b942cf8448fd1152c9bf3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/195a5def1cd526aa9160c33f54d9c4103d01dd79/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/195a5def1cd526aa9160c33f54d9c4103d01dd79/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=195a5def1cd526aa9160c33f54d9c4103d01dd79", "patch": "@@ -1,3 +1,7 @@\n+2002-01-10  Ira Ruben\t<ira@apple.com>\n+\n+\t* decl.c (start_method): Handle attrlist.\n+\n 2002-01-10  Jakub Jelinek  <jakub@redhat.com>\n \n \t* decl2.c (max_tinst_depth): Increase default limit to 500.\n@@ -288,6 +292,7 @@\n \n 2002-01-04  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/4122\n \t* class.c (update_vtable_entry_for_fn): Set delta to zero for a\n \tlost primary.\n \n@@ -427,6 +432,7 @@\n \n 2001-12-18  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/3242\n \t* class.c (add_method): Do compare 'this' quals when trying to match a\n \tused function.  Don't defer to another used function.\n \n@@ -770,7 +776,7 @@ Tue Nov 27 09:03:47 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2001-11-25  Aldy Hernandez  <aldyh@redhat.com>\n \n-\t* cp/search.c (lookup_base_r): Declare bk in variable declaration\n+\t* search.c (lookup_base_r): Declare bk in variable declaration\n \tspace.\n \n 2001-11-25  Nathan Sidwell  <nathan@codesourcery.com>\n@@ -937,7 +943,7 @@ Tue Nov 27 09:03:47 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2001-11-12  H.J. Lu <hjl@gnu.org>\n \n-\t* cp/cvt.c (ocp_convert): Don't warn the address of a weak\n+\t* cvt.c (ocp_convert): Don't warn the address of a weak\n \tfunction is always `true'.\n \n 2001-11-09  Neil Booth  <neil@daikokuya.demon.co.uk>"}, {"sha": "944fe93161b7d2e6df3913f51c304384f34fb470", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/195a5def1cd526aa9160c33f54d9c4103d01dd79/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/195a5def1cd526aa9160c33f54d9c4103d01dd79/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=195a5def1cd526aa9160c33f54d9c4103d01dd79", "patch": "@@ -14173,6 +14173,9 @@ start_method (declspecs, declarator, attrlist)\n   if (fndecl == NULL_TREE)\n     return NULL_TREE;\n \n+  if (attrlist)\n+    cplus_decl_attributes (&fndecl, attrlist, 0);\n+\n   /* Pass friends other than inline friend functions back.  */\n   if (fndecl == void_type_node)\n     return fndecl;"}, {"sha": "3ba3ee84cf06d8c2591bb422f6d919084752a9ff", "filename": "gcc/testsuite/g++.dg/ext/member-attr.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/195a5def1cd526aa9160c33f54d9c4103d01dd79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmember-attr.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/195a5def1cd526aa9160c33f54d9c4103d01dd79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmember-attr.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmember-attr.C?ref=195a5def1cd526aa9160c33f54d9c4103d01dd79", "patch": "@@ -0,0 +1,14 @@\n+/* Test to see if__attribute__'s are handled by inline member functions */\n+/* { dg-do compile } */\n+/* { dg-options \"-fmessage-length=0\" } */\n+\n+/* Previously __attribute__'s were handled by the grammar but \"dropped\n+   on the floor\", these effectively ignoring them.  This tests the fix\n+   to see that they are now handled.  In this test it should report\n+   that we have an illegal attribute.  */\n+\n+class T {\n+  public:\n+    __attribute__ ((garbage1)) void member1(int) {} /* { dg-error \"`garbage1' attribute directive ignored\" \"\" } */\n+    void __attribute__ ((garbage2)) member2(int) {} /* { dg-error \"`garbage2' attribute directive ignored\" \"\" } */\n+};"}]}