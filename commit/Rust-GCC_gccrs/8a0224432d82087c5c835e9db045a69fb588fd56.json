{"sha": "8a0224432d82087c5c835e9db045a69fb588fd56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGEwMjI0NDMyZDgyMDg3YzVjODM1ZTlkYjA0NWE2OWZiNTg4ZmQ1Ng==", "commit": {"author": {"name": "John Wehle", "email": "john@feith.com", "date": "1998-05-15T00:29:27Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-05-15T00:29:27Z"}, "message": "i386.h (DATA_ALIGNMENT): Define.\n\n        * i386.h (DATA_ALIGNMENT): Define.\nImprove x86 FP performance.\n\nFrom-SVN: r19765", "tree": {"sha": "2ebdb874e6dabbad734dc962508c255edcf0a845", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ebdb874e6dabbad734dc962508c255edcf0a845"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a0224432d82087c5c835e9db045a69fb588fd56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a0224432d82087c5c835e9db045a69fb588fd56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a0224432d82087c5c835e9db045a69fb588fd56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a0224432d82087c5c835e9db045a69fb588fd56/comments", "author": {"login": "jlwehle", "id": 46985578, "node_id": "MDQ6VXNlcjQ2OTg1NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46985578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlwehle", "html_url": "https://github.com/jlwehle", "followers_url": "https://api.github.com/users/jlwehle/followers", "following_url": "https://api.github.com/users/jlwehle/following{/other_user}", "gists_url": "https://api.github.com/users/jlwehle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlwehle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlwehle/subscriptions", "organizations_url": "https://api.github.com/users/jlwehle/orgs", "repos_url": "https://api.github.com/users/jlwehle/repos", "events_url": "https://api.github.com/users/jlwehle/events{/privacy}", "received_events_url": "https://api.github.com/users/jlwehle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa6498c297e5363a57e274c92d142f17701e4e30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa6498c297e5363a57e274c92d142f17701e4e30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa6498c297e5363a57e274c92d142f17701e4e30"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "b53497c908d8238ea0bb95a8854226616020d4da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0224432d82087c5c835e9db045a69fb588fd56/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0224432d82087c5c835e9db045a69fb588fd56/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a0224432d82087c5c835e9db045a69fb588fd56", "patch": "@@ -1,3 +1,7 @@\n+Fri May 15 01:29:39 1998  John Wehle  (john@feith.com)\n+\n+\t* i386.h (DATA_ALIGNMENT): Define.\n+\n Fri May 15 05:35:37 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* reload1.c (delete_output_reload): Ignore single USE that"}, {"sha": "1053bd9c242291cef31a3028700c59ca5a6344b1", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0224432d82087c5c835e9db045a69fb588fd56/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0224432d82087c5c835e9db045a69fb588fd56/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=8a0224432d82087c5c835e9db045a69fb588fd56", "patch": "@@ -422,6 +422,54 @@ extern int ix86_arch;\n /* align DFmode constants and nonaggregates */\n #define ALIGN_DFmode (!TARGET_386)\n \n+/* If defined, a C expression to compute the alignment for a static\n+   variable.  TYPE is the data type, and ALIGN is the alignment that\n+   the object would ordinarily have.  The value of this macro is used\n+   instead of that alignment to align the object.\n+\n+   If this macro is not defined, then ALIGN is used.\n+\n+   One use of this macro is to increase alignment of medium-size\n+   data to make it all fit in fewer cache lines.  Another is to\n+   cause character arrays to be word-aligned so that `strcpy' calls\n+   that copy constants to character arrays can be done inline.  */\n+\n+#define DATA_ALIGNMENT(TYPE, ALIGN)\t\t\t\t\t\\\n+  ((AGGREGATE_TYPE_P (TYPE)\t\t\t\t\t\t\\\n+    && TYPE_SIZE (TYPE)\t\t\t\t\t\t\t\\\n+    && TREE_CODE (TYPE_SIZE (TYPE)) == INTEGER_CST\t\t\t\\\n+    && (TREE_INT_CST_LOW (TYPE_SIZE (TYPE)) >= 256\t\t\t\\\n+\t|| TREE_INT_CST_HIGH (TYPE_SIZE (TYPE))) && (ALIGN) < 256)\t\\\n+    ? 256\t\t\t\t\t\t\t\t\\\n+    : TREE_CODE (TYPE) == ARRAY_TYPE\t\t\t\t\t\\\n+    ? ((TYPE_MODE (TREE_TYPE (TYPE)) == DFmode && (ALIGN) < 64)\t\\\n+\t? 64\t\t\t\t\t\t\t\t\\\n+   \t: (TYPE_MODE (TREE_TYPE (TYPE)) == XFmode && (ALIGN) < 128)\t\\\n+\t? 128\t\t\t\t\t\t\t\t\\\n+\t: (ALIGN))\t\t\t\t\t\t\t\\\n+    : TREE_CODE (TYPE) == COMPLEX_TYPE\t\t\t\t\t\\\n+    ? ((TYPE_MODE (TYPE) == DCmode && (ALIGN) < 64)\t\t\t\\\n+\t? 64\t\t\t\t\t\t\t\t\\\n+   \t: (TYPE_MODE (TYPE) == XCmode && (ALIGN) < 128)\t\t\t\\\n+\t? 128\t\t\t\t\t\t\t\t\\\n+\t: (ALIGN))\t\t\t\t\t\t\t\\\n+    : ((TREE_CODE (TYPE) == RECORD_TYPE\t\t\t\t\t\\\n+\t|| TREE_CODE (TYPE) == UNION_TYPE\t\t\t\t\\\n+\t|| TREE_CODE (TYPE) == QUAL_UNION_TYPE)\t\t\t\t\\\n+\t&& TYPE_FIELDS (TYPE))\t\t\t\t\t\t\\\n+    ? ((DECL_MODE (TYPE_FIELDS (TYPE)) == DFmode && (ALIGN) < 64)\t\\\n+\t? 64\t\t\t\t\t\t\t\t\\\n+\t: (DECL_MODE (TYPE_FIELDS (TYPE)) == XFmode && (ALIGN) < 128)\t\\\n+\t? 128\t\t\t\t\t\t\t\t\\\n+\t: (ALIGN))\t\t\t\t\t\t\t\\\n+    : TREE_CODE (TYPE) == REAL_TYPE\t\t\t\t\t\\\n+    ? ((TYPE_MODE (TYPE) == DFmode && (ALIGN) < 64)\t\t\t\\\n+\t? 64\t\t\t\t\t\t\t\t\\\n+   \t: (TYPE_MODE (TYPE) == XFmode && (ALIGN) < 128)\t\t\t\\\n+\t? 128\t\t\t\t\t\t\t\t\\\n+\t: (ALIGN))\t\t\t\t\t\t\t\\\n+    : (ALIGN))\n+\n /* Set this non-zero if move instructions will actually fail to work\n    when given unaligned data.  */\n #define STRICT_ALIGNMENT 0"}]}