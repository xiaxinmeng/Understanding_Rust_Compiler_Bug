{"sha": "68607055124d868de0a7a9f1a3a97a8cdc2a090a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg2MDcwNTUxMjRkODY4ZGUwYTdhOWYxYTNhOTdhOGNkYzJhMDkwYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-11-08T17:35:24Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-11-08T17:35:24Z"}, "message": "compiler: Fix bogus init loop error with struct composite literal.\n\nThis should eventually be bug482.go in the master testsuite.\n\nFrom-SVN: r204583", "tree": {"sha": "8e018764c60906923b4368389d32c187887c5e74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e018764c60906923b4368389d32c187887c5e74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68607055124d868de0a7a9f1a3a97a8cdc2a090a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68607055124d868de0a7a9f1a3a97a8cdc2a090a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68607055124d868de0a7a9f1a3a97a8cdc2a090a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68607055124d868de0a7a9f1a3a97a8cdc2a090a/comments", "author": null, "committer": null, "parents": [{"sha": "e15c474a348d9c9e037b1f3d62b58d1c431b8cf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e15c474a348d9c9e037b1f3d62b58d1c431b8cf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e15c474a348d9c9e037b1f3d62b58d1c431b8cf2"}], "stats": {"total": 48, "additions": 45, "deletions": 3}, "files": [{"sha": "aefb51cec5e0be62b55d79efe9beb67e565210fc", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68607055124d868de0a7a9f1a3a97a8cdc2a090a/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68607055124d868de0a7a9f1a3a97a8cdc2a090a/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=68607055124d868de0a7a9f1a3a97a8cdc2a090a", "patch": "@@ -13488,10 +13488,52 @@ class Composite_literal_expression : public Parser_expression\n int\n Composite_literal_expression::do_traverse(Traverse* traverse)\n {\n-  if (this->vals_ != NULL\n-      && this->vals_->traverse(traverse) == TRAVERSE_EXIT)\n+  if (Type::traverse(this->type_, traverse) == TRAVERSE_EXIT)\n     return TRAVERSE_EXIT;\n-  return Type::traverse(this->type_, traverse);\n+\n+  // If this is a struct composite literal with keys, then the keys\n+  // are field names, not expressions.  We don't want to traverse them\n+  // in that case.  If we do, we can give an erroneous error \"variable\n+  // initializer refers to itself.\"  See bug482.go in the testsuite.\n+  if (this->has_keys_ && this->vals_ != NULL)\n+    {\n+      // The type may not be resolvable at this point.\n+      Type* type = this->type_;\n+      while (true)\n+\t{\n+\t  if (type->classification() == Type::TYPE_NAMED)\n+\t    type = type->named_type()->real_type();\n+\t  else if (type->classification() == Type::TYPE_FORWARD)\n+\t    {\n+\t      Type* t = type->forwarded();\n+\t      if (t == type)\n+\t\tbreak;\n+\t      type = t;\n+\t    }\n+\t  else\n+\t    break;\n+\t}\n+\n+      if (type->classification() == Type::TYPE_STRUCT)\n+\t{\n+\t  Expression_list::iterator p = this->vals_->begin();\n+\t  while (p != this->vals_->end())\n+\t    {\n+\t      // Skip key.\n+\t      ++p;\n+\t      go_assert(p != this->vals_->end());\n+\t      if (Expression::traverse(&*p, traverse) == TRAVERSE_EXIT)\n+\t\treturn TRAVERSE_EXIT;\n+\t      ++p;\n+\t    }\n+\t  return TRAVERSE_CONTINUE;\n+\t}\n+    }\n+\n+  if (this->vals_ != NULL)\n+    return this->vals_->traverse(traverse);\n+\n+  return TRAVERSE_CONTINUE;\n }\n \n // Lower a generic composite literal into a specific version based on"}]}