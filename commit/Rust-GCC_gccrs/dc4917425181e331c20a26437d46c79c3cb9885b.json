{"sha": "dc4917425181e331c20a26437d46c79c3cb9885b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM0OTE3NDI1MTgxZTMzMWMyMGEyNjQzN2Q0NmM3OWMzY2I5ODg1Yg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2004-05-15T17:31:51Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2004-05-15T17:31:51Z"}, "message": "lib1funcs.asm (_lshrdi3, [...]): Add ASM implementations for ARM and Thumb.\n\n* arm/lib1funcs.asm (_lshrdi3, _ashrdi3, _ashldi3): Add ASM\nimplementations for ARM and Thumb.\n* arm/t-arm-elf (LIB1ASMFUNCS): Use them.\n\nFrom-SVN: r81889", "tree": {"sha": "1623fb13dbdc712d0ee2d87a71fa1b0aa2719d44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1623fb13dbdc712d0ee2d87a71fa1b0aa2719d44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc4917425181e331c20a26437d46c79c3cb9885b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc4917425181e331c20a26437d46c79c3cb9885b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc4917425181e331c20a26437d46c79c3cb9885b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc4917425181e331c20a26437d46c79c3cb9885b/comments", "author": null, "committer": null, "parents": [{"sha": "d4fa05b90d6647ceaf50b5f1b8504fc0e01fae9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4fa05b90d6647ceaf50b5f1b8504fc0e01fae9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4fa05b90d6647ceaf50b5f1b8504fc0e01fae9c"}], "stats": {"total": 117, "additions": 117, "deletions": 0}, "files": [{"sha": "1a23cf1b35627acb1a7e81c203938cda3b84bae5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc4917425181e331c20a26437d46c79c3cb9885b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc4917425181e331c20a26437d46c79c3cb9885b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc4917425181e331c20a26437d46c79c3cb9885b", "patch": "@@ -1,3 +1,9 @@\n+2004-05-15  Richard Earnshaw  <reanrsha@arm.com>\n+\n+\t* arm/lib1funcs.asm (_lshrdi3, _ashrdi3, _ashldi3): Add ASM \n+\timplementations for ARM and Thumb.\n+\t* arm/t-arm-elf (LIB1ASMFUNCS): Use them.\n+\n 2004-05-15  Thomas Quinot  <quinot@act-europe.fr>\n \n \t* prefix.c (update_path): Replace PREFIX with KEY only"}, {"sha": "9f8b4673702bcc8f221605085e25903428c5d36b", "filename": "gcc/config/arm/lib1funcs.asm", "status": "modified", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc4917425181e331c20a26437d46c79c3cb9885b/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc4917425181e331c20a26437d46c79c3cb9885b/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flib1funcs.asm?ref=dc4917425181e331c20a26437d46c79c3cb9885b", "patch": "@@ -864,6 +864,116 @@ LSYM(Lover12):\n \tFUNC_END div0\n \t\n #endif /* L_dvmd_lnx */\n+/* ------------------------------------------------------------------------ */\n+/* Dword shift operations.  */\n+/* All the following Dword shift variants rely on the fact that\n+\tshft xxx, Reg\n+   is in fact done as\n+\tshft xxx, (Reg & 255)\n+   so for Reg value in (32...63) and (-1...-31) we will get zero (in the\n+   case of logical shifts) or the sign (for asr).  */\n+\n+#ifdef __ARMEB__\n+#define al\tr1\n+#define ah\tr0\n+#else\n+#define al\tr0\n+#define ah\tr1\n+#endif\n+\n+#ifdef L_lshrdi3\n+\n+\tFUNC_START lshrdi3\n+\n+#ifdef __thumb__\n+\tlsr\tal, r2\n+\tmov\tr3, ah\n+\tlsr\tah, r2\n+\tmov\tip, r3\n+\tsub\tr2, #32\n+\tlsr\tr3, r2\n+\torr\tal, r3\n+\tneg\tr2, r2\n+\tmov\tr3, ip\n+\tlsl\tr3, r2\n+\torr\tal, r3\n+\tRET\n+#else\n+\tsubs\tr3, r2, #32\n+\trsb\tip, r2, #32\n+\tmovmi\tal, al, lsr r2\n+\tmovpl\tal, ah, lsr r3\n+\torrmi\tal, al, ah, lsl ip\n+\tmov\tah, ah, lsr r2\n+\tRET\n+#endif\n+\tFUNC_END lshrdi3\n+\n+#endif\n+\t\n+#ifdef L_ashrdi3\n+\t\n+\tFUNC_START ashrdi3\n+#ifdef __thumb__\n+\tlsr\tal, r2\n+\tmov\tr3, ah\n+\tasr\tah, r2\n+\tsub\tr2, #32\n+\t@ If r2 is negative at this point the following step would OR\n+\t@ the sign bit into all of AL.  That's not what we want...\n+\tbmi\t1f\n+\tmov\tip, r3\n+\tasr\tr3, r2\n+\torr\tal, r3\n+\tmov\tr3, ip\n+1:\n+\tneg\tr2, r2\n+\tlsl\tr3, r2\n+\torr\tal, r3\n+\tRET\n+#else\n+\tsubs\tr3, r2, #32\n+\trsb\tip, r2, #32\n+\tmovmi\tal, al, lsr r2\n+\tmovpl\tal, ah, asr r3\n+\torrmi\tal, al, ah, lsl ip\n+\tmov\tah, ah, asr r2\n+\tRET\n+#endif\n+\n+\tFUNC_END ashrdi3\n+\n+#endif\n+\n+#ifdef L_ashldi3\n+\n+\tFUNC_START ashldi3\n+#ifdef __thumb__\n+\tlsl\tah, r2\n+\tmov\tr3, al\n+\tlsl\tal, r2\n+\tmov\tip, r3\n+\tsub\tr2, #32\n+\tlsl\tr3, r2\n+\torr\tah, r3\n+\tneg\tr2, r2\n+\tmov\tr3, ip\n+\tlsr\tr3, r2\n+\torr\tah, r3\n+\tRET\n+#else\n+\tsubs\tr3, r2, #32\n+\trsb\tip, r2, #32\n+\tmovmi\tah, ah, lsl r2\n+\tmovpl\tah, al, lsl r3\n+\torrmi\tah, ah, al, lsr ip\n+\tmov\tal, al, lsl r2\n+\tRET\n+#endif\n+\tFUNC_END ashldi3\n+\n+#endif\n+\n /* ------------------------------------------------------------------------ */\n /* These next two sections are here despite the fact that they contain Thumb \n    assembler because their presence allows interworked code to be linked even"}, {"sha": "ecc24e5cc268077efa19842bb04cb6f0eb10c0f8", "filename": "gcc/config/arm/t-arm-elf", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc4917425181e331c20a26437d46c79c3cb9885b/gcc%2Fconfig%2Farm%2Ft-arm-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc4917425181e331c20a26437d46c79c3cb9885b/gcc%2Fconfig%2Farm%2Ft-arm-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm-elf?ref=dc4917425181e331c20a26437d46c79c3cb9885b", "patch": "@@ -1,6 +1,7 @@\n LIB1ASMSRC = arm/lib1funcs.asm\n LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _bb_init_func \\\n \t_call_via_rX _interwork_call_via_rX \\\n+\t_lshrdi3 _ashrdi3 _ashldi3 \\\n \t_negdf2 _addsubdf3 _muldivdf3 _cmpdf2 _unorddf2 _fixdfsi _fixunsdfsi \\\n \t_truncdfsf2 _negsf2 _addsubsf3 _muldivsf3 _cmpsf2 _unordsf2 \\\n \t_fixsfsi _fixunssfsi"}]}