{"sha": "5f0abdc3ca190343317ef72988e0d49743a34c60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYwYWJkYzNjYTE5MDM0MzMxN2VmNzI5ODhlMGQ0OTc0M2EzNGM2MA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-01T02:59:52Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-01T02:59:52Z"}, "message": "(yylex): Avoid invalid shift for erroneous empty char const.\n\nFrom-SVN: r4292", "tree": {"sha": "c3f35208a0a82966607a7ea183637879706f5834", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3f35208a0a82966607a7ea183637879706f5834"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f0abdc3ca190343317ef72988e0d49743a34c60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0abdc3ca190343317ef72988e0d49743a34c60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f0abdc3ca190343317ef72988e0d49743a34c60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0abdc3ca190343317ef72988e0d49743a34c60/comments", "author": null, "committer": null, "parents": [{"sha": "c141a106c0d76ed3187df9bea5551f1178e4f0d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c141a106c0d76ed3187df9bea5551f1178e4f0d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c141a106c0d76ed3187df9bea5551f1178e4f0d9"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "6c0515bef6086d4751e086b3d3b99e9ff247f643", "filename": "gcc/c-lex.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0abdc3ca190343317ef72988e0d49743a34c60/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0abdc3ca190343317ef72988e0d49743a34c60/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=5f0abdc3ca190343317ef72988e0d49743a34c60", "patch": "@@ -1847,8 +1847,11 @@ yylex ()\n \tif (! wide_flag)\n \t  {\n \t    int num_bits = num_chars * width;\n-\t    if (TREE_UNSIGNED (char_type_node)\n-\t\t|| ((result >> (num_bits - 1)) & 1) == 0)\n+\t    if (num_bits == 0)\n+\t      /* We already got an error; avoid invalid shift.  */\n+\t      yylval.ttype = build_int_2 (0, 0);\n+\t    else if (TREE_UNSIGNED (char_type_node)\n+\t\t     || ((result >> (num_bits - 1)) & 1) == 0)\n \t      yylval.ttype\n \t\t= build_int_2 (result & ((unsigned HOST_WIDE_INT) ~0\n \t\t\t\t\t >> (HOST_BITS_PER_WIDE_INT - num_bits)),"}]}