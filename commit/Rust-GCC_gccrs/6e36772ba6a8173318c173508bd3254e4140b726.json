{"sha": "6e36772ba6a8173318c173508bd3254e4140b726", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUzNjc3MmJhNmE4MTczMzE4YzE3MzUwOGJkMzI1NGU0MTQwYjcyNg==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-12-25T14:40:39Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-12-25T14:40:39Z"}, "message": "PR93685 - ICE in gfc_constructor_append_expr, at fortran/constructor.c:135\n\nFix handling of F2018 enhancements to DATA statements that allows\ninitialization of pointer components to derived types, and adjust error\nhandling for the CHARACTER case.\n\ngcc/fortran/ChangeLog:\n\n\t* data.c (gfc_assign_data_value): Restrict use of\n\tcreate_character_initializer to constant initializers.\n\t* trans-expr.c (gfc_conv_initializer): Ensure that character\n\tinitializer is constant, otherwise fall through to get the same\n\terror handling as for non-character cases.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/pr93685_1.f90: New test.\n\t* gfortran.dg/pr93685_2.f90: New test.", "tree": {"sha": "7a7eac3107d3084aac349172c663baaeca699a0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a7eac3107d3084aac349172c663baaeca699a0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e36772ba6a8173318c173508bd3254e4140b726", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e36772ba6a8173318c173508bd3254e4140b726", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e36772ba6a8173318c173508bd3254e4140b726", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e36772ba6a8173318c173508bd3254e4140b726/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ee8e5949a9b43c05c17667dd26852f5e9d5b98b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ee8e5949a9b43c05c17667dd26852f5e9d5b98b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ee8e5949a9b43c05c17667dd26852f5e9d5b98b"}], "stats": {"total": 57, "additions": 48, "deletions": 9}, "files": [{"sha": "76ddd9dab7f80c7deb53e574f0c3d6982d425fd0", "filename": "gcc/fortran/data.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e36772ba6a8173318c173508bd3254e4140b726/gcc%2Ffortran%2Fdata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e36772ba6a8173318c173508bd3254e4140b726/gcc%2Ffortran%2Fdata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdata.c?ref=6e36772ba6a8173318c173508bd3254e4140b726", "patch": "@@ -546,12 +546,11 @@ gfc_assign_data_value (gfc_expr *lvalue, gfc_expr *rvalue, mpz_t index,\n \treturn false;\n     }\n \n-  if (ref || last_ts->type == BT_CHARACTER)\n+  if (ref || (last_ts->type == BT_CHARACTER\n+\t      && rvalue->expr_type == EXPR_CONSTANT))\n     {\n       /* An initializer has to be constant.  */\n-      if (rvalue->expr_type != EXPR_CONSTANT\n-\t  || (lvalue->ts.u.cl->length == NULL\n-\t      && !(ref && ref->u.ss.length != NULL)))\n+      if (lvalue->ts.u.cl->length == NULL && !(ref && ref->u.ss.length != NULL))\n \treturn false;\n       expr = create_character_initializer (init, last_ts, ref, rvalue);\n     }"}, {"sha": "f66afab85d11b5c3c5af1de467e35314de2e37f6", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e36772ba6a8173318c173508bd3254e4140b726/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e36772ba6a8173318c173508bd3254e4140b726/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=6e36772ba6a8173318c173508bd3254e4140b726", "patch": "@@ -7877,12 +7877,14 @@ gfc_conv_initializer (gfc_expr * expr, gfc_typespec * ts, tree type,\n \t  return se.expr;\n \n \tcase BT_CHARACTER:\n-\t  {\n-\t    tree ctor = gfc_conv_string_init (ts->u.cl->backend_decl,expr);\n-\t    TREE_STATIC (ctor) = 1;\n-\t    return ctor;\n-\t  }\n+\t  if (expr->expr_type == EXPR_CONSTANT)\n+\t    {\n+\t      tree ctor = gfc_conv_string_init (ts->u.cl->backend_decl, expr);\n+\t      TREE_STATIC (ctor) = 1;\n+\t      return ctor;\n+\t    }\n \n+\t  /* Fallthrough.  */\n \tdefault:\n \t  gfc_init_se (&se, NULL);\n \t  gfc_conv_constant (&se, expr);"}, {"sha": "34d6e2cf35598464bb6497b56e6c20f83a68d1d4", "filename": "gcc/testsuite/gfortran.dg/pr93685_1.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e36772ba6a8173318c173508bd3254e4140b726/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93685_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e36772ba6a8173318c173508bd3254e4140b726/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93685_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93685_1.f90?ref=6e36772ba6a8173318c173508bd3254e4140b726", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do run }\n+! PR93685 - ICE in gfc_constructor_append_expr, at fortran/constructor.c:135\n+\n+program p\n+  implicit none\n+  type t\n+     character, pointer :: a\n+  end type t\n+  type u\n+     integer,   pointer :: i\n+  end type u\n+  type(t) :: x\n+  type(u) :: y\n+  character, target :: c = 'c'\n+  integer  , target :: i = 10\n+  data x%a /c/\n+  data y%i /i/\n+  if (x% a /= \"c\") stop 1\n+  if (y% i /= 10)  stop 2\n+end"}, {"sha": "a09ce7e5a2b5ad927cf8e4839bb91f7bf557555b", "filename": "gcc/testsuite/gfortran.dg/pr93685_2.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e36772ba6a8173318c173508bd3254e4140b726/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93685_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e36772ba6a8173318c173508bd3254e4140b726/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93685_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93685_2.f90?ref=6e36772ba6a8173318c173508bd3254e4140b726", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+! PR93685 - ICE in gfc_constructor_append_expr, at fortran/constructor.c:135\n+\n+program p\n+  implicit none\n+  type t\n+     character :: a\n+  end type t\n+  type u\n+     integer   :: i\n+  end type u\n+  type(t) :: x\n+  type(u) :: y\n+  character, target :: c = 'c'\n+  integer  , target :: i = 10\n+  data x%a /c/  ! { dg-error \"non-constant initialization expression\" }\n+  data y%i /i/  ! { dg-error \"non-constant initialization expression\" }\n+end"}]}