{"sha": "ff361cc65f8e90aa77884c93d77e592cc470d6b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYzNjFjYzY1ZjhlOTBhYTc3ODg0YzkzZDc3ZTU5MmNjNDcwZDZiNw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2018-11-14T16:29:41Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2018-11-14T16:29:41Z"}, "message": "* gimple-ssa-evrp-analyze.c\n\t(evrp_range_analyzer::record_ranges_from_incoming_edge): Rename\n\tignore_equivs_equal_p to equal_p.\n\t* ipa-cp.c (meet_with_1): Use equal_p instead of\n\tignore_equivs_equal_p.\n\t* ipa-prop.c (ipa_vr_ggc_hash_traits::equal): Same.\n\t* tree-vrp.c (value_range::ignore_equivs_equal_p): Remove.\n\t(value_range::operator==): Remove.\n\t(value_range::operator!=): Remove.\n\t(vrp_prop::visit_stmt): Use equal_p.\n\t* tree-vrp.h (value_range): Remove operator==, operator!=,\n\tignore_equivs_equal_p.\n\t* vr-values.c (update_value_range): Use equal_p.\n\nFrom-SVN: r266150", "tree": {"sha": "8b95736bf2742adb4c897e564733110891f59e8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b95736bf2742adb4c897e564733110891f59e8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff361cc65f8e90aa77884c93d77e592cc470d6b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff361cc65f8e90aa77884c93d77e592cc470d6b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff361cc65f8e90aa77884c93d77e592cc470d6b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff361cc65f8e90aa77884c93d77e592cc470d6b7/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62ec3fe8f1bb871c19b6d30b3051443293276d54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62ec3fe8f1bb871c19b6d30b3051443293276d54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62ec3fe8f1bb871c19b6d30b3051443293276d54"}], "stats": {"total": 66, "additions": 37, "deletions": 29}, "files": [{"sha": "3efd96b570e8df4f22ec0a07de717ecef8c2ab04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff361cc65f8e90aa77884c93d77e592cc470d6b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff361cc65f8e90aa77884c93d77e592cc470d6b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff361cc65f8e90aa77884c93d77e592cc470d6b7", "patch": "@@ -1,3 +1,19 @@\n+2018-11-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-ssa-evrp-analyze.c\n+\t(evrp_range_analyzer::record_ranges_from_incoming_edge): Rename\n+\tignore_equivs_equal_p to equal_p.\n+\t* ipa-cp.c (meet_with_1): Use equal_p instead of\n+\tignore_equivs_equal_p.\n+\t* ipa-prop.c (ipa_vr_ggc_hash_traits::equal): Same.\n+\t* tree-vrp.c (value_range::ignore_equivs_equal_p): Remove.\n+\t(value_range::operator==): Remove.\n+\t(value_range::operator!=): Remove.\n+\t(vrp_prop::visit_stmt): Use equal_p.\n+\t* tree-vrp.h (value_range): Remove operator==, operator!=,\n+\tignore_equivs_equal_p.\n+\t* vr-values.c (update_value_range): Use equal_p.\n+\n 2018-11-14  Michael Matz  <matz@suse.de>\n \n \tPR middle-end/86575"}, {"sha": "220dde093b53c90f91046adcea29bd0a6dbea17e", "filename": "gcc/gimple-ssa-evrp-analyze.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff361cc65f8e90aa77884c93d77e592cc470d6b7/gcc%2Fgimple-ssa-evrp-analyze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff361cc65f8e90aa77884c93d77e592cc470d6b7/gcc%2Fgimple-ssa-evrp-analyze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp-analyze.c?ref=ff361cc65f8e90aa77884c93d77e592cc470d6b7", "patch": "@@ -209,7 +209,7 @@ evrp_range_analyzer::record_ranges_from_incoming_edge (basic_block bb)\n \t      value_range *old_vr = get_value_range (vrs[i].first);\n \t      value_range tem (old_vr->kind (), old_vr->min (), old_vr->max ());\n \t      tem.intersect (vrs[i].second);\n-\t      if (tem.ignore_equivs_equal_p (*old_vr))\n+\t      if (tem.equal_p (*old_vr, /*ignore_equivs=*/true))\n \t\tcontinue;\n \t      push_value_range (vrs[i].first, vrs[i].second);\n \t      if (is_fallthru"}, {"sha": "6b9dc8cb08fd438ecd034b45057392407039cabc", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff361cc65f8e90aa77884c93d77e592cc470d6b7/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff361cc65f8e90aa77884c93d77e592cc470d6b7/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=ff361cc65f8e90aa77884c93d77e592cc470d6b7", "patch": "@@ -928,7 +928,7 @@ ipcp_vr_lattice::meet_with_1 (const value_range_base *other_vr)\n \n   value_range_base save (m_vr);\n   m_vr.union_ (other_vr);\n-  return !m_vr.ignore_equivs_equal_p (save);\n+  return !m_vr.equal_p (save);\n }\n \n /* Return true if value range information in the lattice is yet unknown.  */"}, {"sha": "74052350ac1d9e90be306ebd9e750690a1871f47", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff361cc65f8e90aa77884c93d77e592cc470d6b7/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff361cc65f8e90aa77884c93d77e592cc470d6b7/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=ff361cc65f8e90aa77884c93d77e592cc470d6b7", "patch": "@@ -121,7 +121,7 @@ struct ipa_vr_ggc_hash_traits : public ggc_cache_remove <value_range_base *>\n   static bool\n   equal (const value_range_base *a, const value_range_base *b)\n     {\n-      return a->ignore_equivs_equal_p (*b);\n+      return a->equal_p (*b);\n     }\n   static void\n   mark_empty (value_range_base *&p)"}, {"sha": "53d5bd6bd0c39d37e1424fd6fd0435474085edb2", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff361cc65f8e90aa77884c93d77e592cc470d6b7/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff361cc65f8e90aa77884c93d77e592cc470d6b7/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=ff361cc65f8e90aa77884c93d77e592cc470d6b7", "patch": "@@ -210,37 +210,27 @@ value_range::check ()\n     }\n }\n \n-/* Returns TRUE if THIS == OTHER.  Ignores the equivalence bitmap if\n-   IGNORE_EQUIVS is TRUE.  */\n-\n-bool\n-value_range::equal_p (const value_range &other, bool ignore_equivs) const\n-{\n-  return (ignore_equivs_equal_p (other)\n-\t  && (ignore_equivs\n-\t      || vrp_bitmap_equal_p (m_equiv, other.m_equiv)));\n-}\n-\n-/* Return equality while ignoring equivalence bitmap.  */\n+/* Equality operator.  We purposely do not overload ==, to avoid\n+   confusion with the equality bitmap in the derived value_range\n+   class.  */\n \n bool\n-value_range_base::ignore_equivs_equal_p (const value_range_base &other) const\n+value_range_base::equal_p (const value_range_base &other) const\n {\n   return (m_kind == other.m_kind\n \t  && vrp_operand_equal_p (m_min, other.m_min)\n \t  && vrp_operand_equal_p (m_max, other.m_max));\n }\n \n-bool\n-value_range::operator== (const value_range &other) const\n-{\n-  return equal_p (other, /*ignore_equivs=*/false);\n-}\n+/* Returns TRUE if THIS == OTHER.  Ignores the equivalence bitmap if\n+   IGNORE_EQUIVS is TRUE.  */\n \n bool\n-value_range::operator!= (const value_range &other) const\n+value_range::equal_p (const value_range &other, bool ignore_equivs) const\n {\n-  return !(*this == other);\n+  return (value_range_base::equal_p (other)\n+\t  && (ignore_equivs\n+\t      || vrp_bitmap_equal_p (m_equiv, other.m_equiv)));\n }\n \n /* Return TRUE if this is a symbolic range.  */\n@@ -5382,7 +5372,7 @@ vrp_prop::visit_stmt (gimple *stmt, edge *taken_edge_p, tree *output_p)\n \t\tvalue_range new_vr;\n \t\textract_range_basic (&new_vr, use_stmt);\n \t\tconst value_range *old_vr = get_value_range (use_lhs);\n-\t\tif (*old_vr != new_vr)\n+\t\tif (!old_vr->equal_p (new_vr, /*ignore_equivs=*/false))\n \t\t  res = SSA_PROP_INTERESTING;\n \t\telse\n \t\t  res = SSA_PROP_NOT_INTERESTING;"}, {"sha": "de3221e401c9fe2481154c49dc3f8a9d8c71b244", "filename": "gcc/tree-vrp.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff361cc65f8e90aa77884c93d77e592cc470d6b7/gcc%2Ftree-vrp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff361cc65f8e90aa77884c93d77e592cc470d6b7/gcc%2Ftree-vrp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.h?ref=ff361cc65f8e90aa77884c93d77e592cc470d6b7", "patch": "@@ -63,7 +63,9 @@ class GTY((for_user)) value_range_base\n \n   void union_ (const value_range_base *);\n \n-  bool ignore_equivs_equal_p (const value_range_base &) const;\n+  bool operator== (const value_range_base &) const /* = delete */;\n+  bool operator!= (const value_range_base &) const /* = delete */;\n+  bool equal_p (const value_range_base &) const;\n \n   /* Misc methods.  */\n   tree type () const;\n@@ -119,10 +121,11 @@ class GTY((user)) value_range : public value_range_base\n   void set_nonnull (tree);\n   void set_null (tree);\n \n-  bool operator== (const value_range &) const;\n-  bool operator!= (const value_range &) const;\n+  bool operator== (const value_range &) const /* = delete */;\n+  bool operator!= (const value_range &) const /* = delete */;\n   void intersect (const value_range *);\n   void union_ (const value_range *);\n+  bool equal_p (const value_range &, bool ignore_equivs) const;\n \n   /* Types of value ranges.  */\n   void set_undefined ();\n@@ -142,7 +145,6 @@ class GTY((user)) value_range : public value_range_base\n   /* Deep-copies bitmap argument.  */\n   void set_equiv (bitmap);\n   void check ();\n-  bool equal_p (const value_range &, bool ignore_equivs) const;\n   void intersect_helper (value_range *, const value_range *);\n \n   /* Set of SSA names whose value ranges are equivalent to this one."}, {"sha": "41862b976010cd50d1a256165d20bb1e633512a8", "filename": "gcc/vr-values.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff361cc65f8e90aa77884c93d77e592cc470d6b7/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff361cc65f8e90aa77884c93d77e592cc470d6b7/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=ff361cc65f8e90aa77884c93d77e592cc470d6b7", "patch": "@@ -180,7 +180,7 @@ vr_values::update_value_range (const_tree var, value_range *new_vr)\n \n   /* Update the value range, if necessary.  */\n   old_vr = get_value_range (var);\n-  is_new = *old_vr != *new_vr;\n+  is_new = !old_vr->equal_p (*new_vr, /*ignore_equivs=*/false);\n \n   if (is_new)\n     {"}]}