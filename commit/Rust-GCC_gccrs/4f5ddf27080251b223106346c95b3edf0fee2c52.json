{"sha": "4f5ddf27080251b223106346c95b3edf0fee2c52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY1ZGRmMjcwODAyNTFiMjIzMTA2MzQ2Yzk1YjNlZGYwZmVlMmM1Mg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-07-20T17:35:04Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-07-20T17:35:04Z"}, "message": "rs6000: Make input_operand use any_memory_operand\n\n\n\t* config/rs6000/predicates.md (input_operand): Allow volatile memory.\n\nFrom-SVN: r273632", "tree": {"sha": "a2184595ca996ba950dafed7c90233851f168882", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2184595ca996ba950dafed7c90233851f168882"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f5ddf27080251b223106346c95b3edf0fee2c52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f5ddf27080251b223106346c95b3edf0fee2c52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f5ddf27080251b223106346c95b3edf0fee2c52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f5ddf27080251b223106346c95b3edf0fee2c52/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "45986ed939d2187a03b6f55721e51e363968f5be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45986ed939d2187a03b6f55721e51e363968f5be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45986ed939d2187a03b6f55721e51e363968f5be"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "33a50fad8bcc0243530477b22a62fcea5c2618ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f5ddf27080251b223106346c95b3edf0fee2c52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f5ddf27080251b223106346c95b3edf0fee2c52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f5ddf27080251b223106346c95b3edf0fee2c52", "patch": "@@ -1,3 +1,7 @@\n+2019-07-20  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/predicates.md (input_operand): Allow volatile memory.\n+\n 2019-07-20  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/predicates.md (lwa_operand): Allow volatile memory."}, {"sha": "7c451df527dc1699910e02d71aeb31226495f43f", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f5ddf27080251b223106346c95b3edf0fee2c52/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f5ddf27080251b223106346c95b3edf0fee2c52/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=4f5ddf27080251b223106346c95b3edf0fee2c52", "patch": "@@ -1031,7 +1031,7 @@\n \t       const_double,const_wide_int,const_vector,const_int\")\n {\n   /* Memory is always valid.  */\n-  if (memory_operand (op, mode))\n+  if (any_memory_operand (op, mode))\n     return 1;\n \n   /* For floating-point, easy constants are valid.  */"}]}