{"sha": "00d30284b84eedd162ed081fe008c459dc7c98e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBkMzAyODRiODRlZWRkMTYyZWQwODFmZTAwOGM0NTlkYzdjOThlMw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-08-31T00:34:22Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-08-31T00:34:22Z"}, "message": "Makefile.in (LIBS): Fix definition so we link with $(CLIB).\n\n\t* Makefile.in (LIBS): Fix definition so we link with $(CLIB).\n\tRemove hacks for stuff which comes from libiberty.\n\n\t* Make-lang.in: Likewise.\n\nFrom-SVN: r28995", "tree": {"sha": "f5ccce1a61f84d7f6d48c1a4872d26b7cfc15a33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5ccce1a61f84d7f6d48c1a4872d26b7cfc15a33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00d30284b84eedd162ed081fe008c459dc7c98e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d30284b84eedd162ed081fe008c459dc7c98e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00d30284b84eedd162ed081fe008c459dc7c98e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d30284b84eedd162ed081fe008c459dc7c98e3/comments", "author": null, "committer": null, "parents": [{"sha": "7d12830c32ccb918b5bb6d682e9d6e9b59247def", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d12830c32ccb918b5bb6d682e9d6e9b59247def", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d12830c32ccb918b5bb6d682e9d6e9b59247def"}], "stats": {"total": 47, "additions": 19, "deletions": 28}, "files": [{"sha": "f0730bc73c2098357691267845320a0eac2a32b3", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d30284b84eedd162ed081fe008c459dc7c98e3/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d30284b84eedd162ed081fe008c459dc7c98e3/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=00d30284b84eedd162ed081fe008c459dc7c98e3", "patch": "@@ -1,3 +1,10 @@\n+1999-08-30  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (LIBS): Fix definition so we link with $(CLIB).\n+\tRemove hacks for stuff which comes from libiberty.\n+\n+\t* Make-lang.in: Likewise.\n+\n Mon Aug 30 16:41:41 1999  Hans-Peter Nilsson  <hp@axis.se>\n \n \t* Makefile.in (xref.o): Depend on xref.c explicitly."}, {"sha": "d0234ff2dd0131ec3bd798f9111c00aebdc03c35", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d30284b84eedd162ed081fe008c459dc7c98e3/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d30284b84eedd162ed081fe008c459dc7c98e3/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=00d30284b84eedd162ed081fe008c459dc7c98e3", "patch": "@@ -97,7 +97,7 @@ $(GCJ)-cross$(exeext): $(GCJ)$(exeext)\n \n # Dependencies here must be kept in sync with dependencies in Makefile.in.\n jvgenmain$(exeext): $(srcdir)/java/jvgenmain.c $(srcdir)/java/mangle.c \\\n-\t\t$(OBSTACK) $(LIBDEPS) $(TREE_H)\n+\t\t$(LIBDEPS) $(TREE_H)\n \tcd java && $(MAKE) $(FLAGS_TO_PASS) $(JAVA_FLAGS_TO_PASS) ../jvgenmain$(exeext)\n \n # This must be kept in sync with dependencies in Makefile.in.\n@@ -112,14 +112,14 @@ gcjh$(exeext): $(GCJH_SOURCES) $(LIBDEPS) $(TREE_H)\n \n # This must be kept in sync with dependencies in Makefile.in.\n JV_SCAN_SOURCES = $(srcdir)/java/parse-scan.y $(srcdir)/java/lex.c \\\n-       $(srcdir)/java/parse.h $(srcdir)/java/lex.h $(srcdir)/java/jv-scan.c $(srcdir)/../libiberty/xmalloc.c $(srcdir)/../libiberty/xstrdup.c\n+       $(srcdir)/java/parse.h $(srcdir)/java/lex.h $(srcdir)/java/jv-scan.c\n \n jv-scan$(exeext): $(JV_SCAN_SOURCES) stamp-objlist $(LIBDEPS)\n \tcd java && $(MAKE) $(FLAGS_TO_PASS) $(JAVA_FLAGS_TO_PASS) ../jv-scan$(exeext)\n \n # This must be kept in sync with dependencies in Makefile.in.\n JCF_DUMP_SOURCES = $(srcdir)/java/jcf-dump.c $(srcdir)/java/jcf-io.c \\\n-       $(srcdir)/java/zextract.c $(srcdir)/../libiberty/memmove.c $(TREE_H)\n+       $(srcdir)/java/zextract.c $(TREE_H)\n \n jcf-dump$(exeext): $(JCF_DUMP_SOURCES)\n \tcd java && $(MAKE) $(FLAGS_TO_PASS) $(JAVA_FLAGS_TO_PASS) ../jcf-dump$(exeext)"}, {"sha": "0b36c236cb28f7e6811c6637bfed7cd25801f996", "filename": "gcc/java/Makefile.in", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d30284b84eedd162ed081fe008c459dc7c98e3/gcc%2Fjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d30284b84eedd162ed081fe008c459dc7c98e3/gcc%2Fjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMakefile.in?ref=00d30284b84eedd162ed081fe008c459dc7c98e3", "patch": "@@ -41,8 +41,6 @@\n # Variables that exist for you to override.\n # See below for how to change them for certain systems.\n \n-ALLOCA =\n-\n # Various ways of specifying flags for compilations:  \n # CFLAGS is for the user to override to, e.g., do a bootstrap with -O2.\n # BOOT_CFLAGS is the value of CFLAGS to pass\n@@ -73,10 +71,6 @@ TEXI2DVI = texi2dvi\n # to compile all the gen* files first by hand to avoid erroneous results.\n P =\n \n-# This is used in the definition of SUBDIR_USE_ALLOCA.\n-# ??? Perhaps it would be better if it just looked for *gcc*.\n-OLDCC = cc\n-\n # This is used instead of ALL_CFLAGS when compiling with GCC_FOR_TARGET.\n # It omits XCFLAGS, and specifies -B./.\n # It also specifies -B$(tooldir)/ to find as and ld for a cross compiler.\n@@ -107,10 +101,6 @@ libgcj_zip = $(datadir)/libgcj.zip\n # Additional system libraries to link with.\n CLIB=\n \n-# Change this to a null string if obstacks are installed in the\n-# system library.\n-OBSTACK=obstack.o\n-\n # Choose the real default target.\n ALL=all\n \n@@ -148,13 +138,13 @@ ALL_CFLAGS = $(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS) $(XCFLAGS) -W\n # Likewise.\n ALL_CPPFLAGS = $(CPPFLAGS) $(X_CPPFLAGS) $(T_CPPFLAGS)\n \n-SUBDIR_OBSTACK = `if [ x$(OBSTACK) != x ]; then echo ../$(OBSTACK); else true; fi`\n-SUBDIR_USE_ALLOCA = `case \"${CC}\" in \"${OLDCC}\") if [ x$(ALLOCA) != x ]; then echo ../$(ALLOCA); else true; fi ;; esac`\n-SUBDIR_MALLOC = `if [ x$(MALLOC) != x ]; then echo ../$(MALLOC); else true; fi`\n+# This is where we get libiberty.a from.\n+LIBIBERTY = ../../libiberty/libiberty.a\n \n # How to link with both our special library facilities\n # and the system's installed libraries.\n-LIBS = $(SUBDIR_OBSTACK) $(SUBDIR_USE_ALLOCA) $(SUBDIR_MALLOC) $(CLIB)\n+LIBS = $(LIBIBERTY) $(CLIB)\n+LIBDEPS = $(LIBIBERTY)\n \n # Specify the directories to be searched for header files.\n # Both . and srcdir are used, in that order,\n@@ -179,31 +169,26 @@ JAVA_OBJS = parse.o class.o decl.o expr.o constants.o lang.o typeck.o \\\n \n JAVA_OBJS_LITE = parse-scan.o jv-scan.o\n \n-LIBS = ../../libiberty/libiberty.a\n-LIBDEPS = $(LIBS)\n-\n # Language-independent object files.\n OBJS = `cat ../stamp-objlist`\n OBJDEPS = ../stamp-objlist\n \n compiler: ../jc1$(exeext) ../jv-scan$(exeext)\n ../jc1$(exeext): $(P) $(JAVA_OBJS) $(OBJDEPS) $(LIBDEPS)\n \trm -f ../jc1$(exeext)\n-\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\\n-\t      $(JAVA_OBJS) $(OBJS) $(SUBDIR_OBSTACK) $(LIBS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(JAVA_OBJS) $(OBJS) $(LIBS)\n ../jv-scan$(exeext): $(P) $(JAVA_OBJS_LITE) $(OBJDEPS) $(LIBDEPS)\n \trm -f ../jv-scan$(exeext)\n-\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\\n-\t      $(JAVA_OBJS_LITE) $(SUBDIR_OBSTACK) $(LIBS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(JAVA_OBJS_LITE) $(LIBS)\n \n ../jcf-dump$(exeext): jcf-dump.o jcf-io.o jcf-depend.o jcf-path.o \\\n-\t\tzextract.o\n+\t\tzextract.o $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ jcf-dump.o jcf-io.o \\\n \t  jcf-depend.o jcf-path.o zextract.o $(LIBS)\n \n # Dependencies here must be kept in sync with dependencies in Make-lang.in.\n ../jvgenmain$(exeext):  jvgenmain.o mangle.o $(LIBDEPS)\n-\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ jvgenmain.o mangle.o ../obstack.o $(LIBS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ jvgenmain.o mangle.o $(LIBS)\n \n ../gcjh$(exeext): gjavah.o jcf-io.o jcf-depend.o jcf-path.o \\\n \t\tzextract.o $(LIBDEPS)\n@@ -282,8 +267,7 @@ gjavah.o : $(CONFIG_H) $(srcdir)/../system.h $(JAVA_TREE_H) gjavah.c \\\n buffer.o : buffer.c $(CONFIG_H) buffer.h $(srcdir)/../gansidecl.h \\\n   $(srcdir)/../system.h $(srcdir)/../toplev.h\n check-init.o : check-init.c $(CONFIG_H) $(srcdir)/../gansidecl.h \\\n-  $(srcdir)/../../include/libiberty.h $(JAVA_TREE_H) \\\n-  $(srcdir)/../system.h $(srcdir)/../toplev.h\n+  $(JAVA_TREE_H) $(srcdir)/../system.h $(srcdir)/../toplev.h\n class.o : class.c $(CONFIG_H) $(JAVA_TREE_H) $(RTL_H) jcf.h $(PARSE_H) \\\n   $(srcdir)/../gansidecl.h $(srcdir)/../toplev.h $(srcdir)/../system.h \\\n   $(srcdir)/../output.h"}]}