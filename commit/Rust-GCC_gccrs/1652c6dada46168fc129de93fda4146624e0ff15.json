{"sha": "1652c6dada46168fc129de93fda4146624e0ff15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY1MmM2ZGFkYTQ2MTY4ZmMxMjlkZTkzZmRhNDE0NjYyNGUwZmYxNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-10-30T17:30:05Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-10-30T17:30:05Z"}, "message": "Makefile.tpl (STAGE1_CONFIGURE_FLAGS): Pass --disable-build-format-warnings.\n\n/\n\t* Makefile.tpl (STAGE1_CONFIGURE_FLAGS): Pass\n\t--disable-build-format-warnings.\ngcc/\n\t* configure.ac (loose_warn): Add -Wno-format if\n\t--disable-build-format-warnings.\n\nFrom-SVN: r204217", "tree": {"sha": "ffac47a77351ae00bcb1907bcc1695d013b7a813", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffac47a77351ae00bcb1907bcc1695d013b7a813"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1652c6dada46168fc129de93fda4146624e0ff15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1652c6dada46168fc129de93fda4146624e0ff15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1652c6dada46168fc129de93fda4146624e0ff15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1652c6dada46168fc129de93fda4146624e0ff15/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "378cd6b1e33e389c62974ae0f248d1e5372de26a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/378cd6b1e33e389c62974ae0f248d1e5372de26a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/378cd6b1e33e389c62974ae0f248d1e5372de26a"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "e9259598d208d68ff26ce2734ff1477b2459a686", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1652c6dada46168fc129de93fda4146624e0ff15/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1652c6dada46168fc129de93fda4146624e0ff15/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=1652c6dada46168fc129de93fda4146624e0ff15", "patch": "@@ -1,3 +1,8 @@\n+2013-10-30  Jason Merrill  <jason@redhat.com>\n+\n+\t* Makefile.tpl (STAGE1_CONFIGURE_FLAGS): Pass\n+\t--disable-build-format-warnings.\n+\n 2013-10-29  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n \n \t* Makefile.def: Add libcilkrts to target_modules.  Make libcilkrts "}, {"sha": "e0ba7848434aeab90b15a52e65203ffc29c60a25", "filename": "Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1652c6dada46168fc129de93fda4146624e0ff15/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1652c6dada46168fc129de93fda4146624e0ff15/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=1652c6dada46168fc129de93fda4146624e0ff15", "patch": "@@ -498,8 +498,10 @@ STAGE1_LANGUAGES = @stage1_languages@\n #   the last argument when conflicting --enable arguments are passed.\n # * Likewise, we force-disable coverage flags, since the installed\n #   compiler probably has never heard of them.\n+# * We also disable -Wformat, since older GCCs don't understand newer %s.\n STAGE1_CONFIGURE_FLAGS = --disable-intermodule $(STAGE1_CHECKING) \\\n-\t  --disable-coverage --enable-languages=\"$(STAGE1_LANGUAGES)\"\n+\t  --disable-coverage --enable-languages=\"$(STAGE1_LANGUAGES)\" \\\n+\t  --disable-build-format-warnings\n \n STAGEprofile_CFLAGS = $(STAGE2_CFLAGS) -fprofile-generate\n STAGEprofile_TFLAGS = $(STAGE2_TFLAGS)"}, {"sha": "65d070b946e82a6bb68c0d0568aa80d3ed06ca25", "filename": "Makefile.tpl", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1652c6dada46168fc129de93fda4146624e0ff15/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1652c6dada46168fc129de93fda4146624e0ff15/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=1652c6dada46168fc129de93fda4146624e0ff15", "patch": "@@ -451,8 +451,10 @@ STAGE1_LANGUAGES = @stage1_languages@\n #   the last argument when conflicting --enable arguments are passed.\n # * Likewise, we force-disable coverage flags, since the installed\n #   compiler probably has never heard of them.\n+# * We also disable -Wformat, since older GCCs don't understand newer %s.\n STAGE1_CONFIGURE_FLAGS = --disable-intermodule $(STAGE1_CHECKING) \\\n-\t  --disable-coverage --enable-languages=\"$(STAGE1_LANGUAGES)\"\n+\t  --disable-coverage --enable-languages=\"$(STAGE1_LANGUAGES)\" \\\n+\t  --disable-build-format-warnings\n \n STAGEprofile_CFLAGS = $(STAGE2_CFLAGS) -fprofile-generate\n STAGEprofile_TFLAGS = $(STAGE2_TFLAGS)"}, {"sha": "9907608a15092092ed361e0fcdc08798c75de5d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1652c6dada46168fc129de93fda4146624e0ff15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1652c6dada46168fc129de93fda4146624e0ff15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1652c6dada46168fc129de93fda4146624e0ff15", "patch": "@@ -1,3 +1,8 @@\n+2013-10-30  Jason Merrill  <jason@redhat.com>\n+\n+\t* configure.ac (loose_warn): Add -Wno-format if\n+\t--disable-build-format-warnings.\n+\n 2013-10-30  David Malcolm  <dmalcolm@redhat.com>\n \n \t* cgraphunit.c (analyze_functions): Split symtab_node"}, {"sha": "ea9190683c5f03e9036153f5f89394b45ed78159", "filename": "gcc/configure", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1652c6dada46168fc129de93fda4146624e0ff15/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1652c6dada46168fc129de93fda4146624e0ff15/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=1652c6dada46168fc129de93fda4146624e0ff15", "patch": "@@ -875,6 +875,7 @@ with_demangler_in_ld\n with_gnu_as\n with_as\n enable_largefile\n+enable_build_format_warnings\n enable_werror_always\n enable_checking\n enable_coverage\n@@ -1569,6 +1570,8 @@ Optional Features:\n                           for creating source tarballs for users without\n                           texinfo bison or flex\n   --disable-largefile     omit support for large files\n+  --disable-build-format-warnings\n+                          don't use -Wformat while building GCC\n   --enable-werror-always  enable -Werror despite compiler version\n   --enable-checking[=LIST]\n                           enable expensive run-time checks. With LIST, enable\n@@ -6270,9 +6273,22 @@ fi\n # * C++11 narrowing conversions in { }\n # So, we only use -pedantic if we can disable those warnings.\n \n+# In stage 1, disable -Wformat warnings from old GCCs about new % codes\n+# Check whether --enable-build-format-warnings was given.\n+if test \"${enable_build_format_warnings+set}\" = set; then :\n+  enableval=$enable_build_format_warnings;\n+else\n+  enable_build_format_warnings=yes\n+fi\n+\n+if test $enable_build_format_warnings = no; then :\n+  wf_opt=-Wno-format\n+else\n+  wf_opt=\n+fi\n loose_warn=\n save_CFLAGS=\"$CFLAGS\"\n-for real_option in -W -Wall -Wno-narrowing -Wwrite-strings -Wcast-qual; do\n+for real_option in -W -Wall -Wno-narrowing -Wwrite-strings -Wcast-qual $wf_opt; do\n   # Do the check with the no- prefix removed since gcc silently\n   # accepts any -Wno-* option on purpose\n   case $real_option in\n@@ -17897,7 +17913,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17900 \"configure\"\n+#line 17916 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18003,7 +18019,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18006 \"configure\"\n+#line 18022 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "3d3b26b28a01fb6171114e9f6b8e69318929e103", "filename": "gcc/configure.ac", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1652c6dada46168fc129de93fda4146624e0ff15/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1652c6dada46168fc129de93fda4146624e0ff15/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=1652c6dada46168fc129de93fda4146624e0ff15", "patch": "@@ -326,8 +326,14 @@ GCC_STDINT_TYPES\n # * C++11 narrowing conversions in { }\n # So, we only use -pedantic if we can disable those warnings.\n \n+# In stage 1, disable -Wformat warnings from old GCCs about new % codes\n+AC_ARG_ENABLE(build-format-warnings,\n+  AS_HELP_STRING([--disable-build-format-warnings],[don't use -Wformat while building GCC]),\n+  [],[enable_build_format_warnings=yes])\n+AS_IF([test $enable_build_format_warnings = no],\n+      [wf_opt=-Wno-format],[wf_opt=])\n ACX_PROG_CC_WARNING_OPTS(\n-\tm4_quote(m4_do([-W -Wall -Wno-narrowing -Wwrite-strings -Wcast-qual])), [loose_warn])\n+\tm4_quote(m4_do([-W -Wall -Wno-narrowing -Wwrite-strings -Wcast-qual $wf_opt])), [loose_warn])\n ACX_PROG_CC_WARNING_OPTS(\n \tm4_quote(m4_do([-Wstrict-prototypes -Wmissing-prototypes])),\n \t[c_loose_warn])"}]}