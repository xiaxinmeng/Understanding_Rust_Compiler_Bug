{"sha": "aa53e58b920d4fe4bbdb26e227401ad827c52a57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE1M2U1OGI5MjBkNGZlNGJiZGIyNmUyMjc0MDFhZDgyN2M1MmE1Nw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-03-28T11:25:53Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-03-28T11:25:53Z"}, "message": "sparc-opts.h: New.\n\n\t* config/sparc/sparc-opts.h: New.\n\t* config/sparc/sparc.c (sparc_handle_option, sparc_select,\n\tsparc_cpu, fpu_option_set, TARGET_HANDLE_OPTION): Remove.\n\t(sparc_option_override): Store processor_type enumeration rather\n\tthan string in cpu_default.  Remove name and enumeration from\n\tcpu_table.  Directly default -mcpu then default -mtune from -mcpu\n\twithout using sparc_select.  Use target_flags_explicit instead of\n\tfpu_option_set.\n\t* config/sparc/sparc.h (enum processor_type): Move to\n\tsparc-opts.h.\n\t(sparc_cpu, struct sparc_cpu_select, sparc_select): Remove.\n\t* config/sparc/sparc.opt (config/sparc/sparc-opts.h): New\n\tHeaderInclude entry.\n\t(mcpu=, mtune=): Use Var and Enum.\n\t(sparc_processor_type): New Enum and EnumValue entries.\n\nFrom-SVN: r171601", "tree": {"sha": "fd5b940125b26255191d47ea74416e97b003bae2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd5b940125b26255191d47ea74416e97b003bae2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa53e58b920d4fe4bbdb26e227401ad827c52a57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa53e58b920d4fe4bbdb26e227401ad827c52a57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa53e58b920d4fe4bbdb26e227401ad827c52a57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa53e58b920d4fe4bbdb26e227401ad827c52a57/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c6d158ae268f4d347c0a3863ca497d5e4f275b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c6d158ae268f4d347c0a3863ca497d5e4f275b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c6d158ae268f4d347c0a3863ca497d5e4f275b4"}], "stats": {"total": 328, "additions": 172, "deletions": 156}, "files": [{"sha": "da0fa52c03bccd205a11498596a258b67ef20247", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53e58b920d4fe4bbdb26e227401ad827c52a57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53e58b920d4fe4bbdb26e227401ad827c52a57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa53e58b920d4fe4bbdb26e227401ad827c52a57", "patch": "@@ -1,3 +1,21 @@\n+2011-03-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/sparc/sparc-opts.h: New.\n+\t* config/sparc/sparc.c (sparc_handle_option, sparc_select,\n+\tsparc_cpu, fpu_option_set, TARGET_HANDLE_OPTION): Remove.\n+\t(sparc_option_override): Store processor_type enumeration rather\n+\tthan string in cpu_default.  Remove name and enumeration from\n+\tcpu_table.  Directly default -mcpu then default -mtune from -mcpu\n+\twithout using sparc_select.  Use target_flags_explicit instead of\n+\tfpu_option_set.\n+\t* config/sparc/sparc.h (enum processor_type): Move to\n+\tsparc-opts.h.\n+\t(sparc_cpu, struct sparc_cpu_select, sparc_select): Remove.\n+\t* config/sparc/sparc.opt (config/sparc/sparc-opts.h): New\n+\tHeaderInclude entry.\n+\t(mcpu=, mtune=): Use Var and Enum.\n+\t(sparc_processor_type): New Enum and EnumValue entries.\n+\n 2011-03-28  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \t    Iain Sandoe  <iains@gcc.gnu.org>\n "}, {"sha": "d925ed3122fc88a508bef2b70e4843647e82fdd5", "filename": "gcc/config/sparc/sparc-opts.h", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53e58b920d4fe4bbdb26e227401ad827c52a57/gcc%2Fconfig%2Fsparc%2Fsparc-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53e58b920d4fe4bbdb26e227401ad827c52a57/gcc%2Fconfig%2Fsparc%2Fsparc-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-opts.h?ref=aa53e58b920d4fe4bbdb26e227401ad827c52a57", "patch": "@@ -0,0 +1,47 @@\n+/* Definitions for option handling for SPARC.\n+   Copyright (C) 1996, 1999, 2002, 2006, 2007, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef SPARC_OPTS_H\n+#define SPARC_OPTS_H\n+\n+/* Processor type.\n+   These must match the values for the cpu attribute in sparc.md and\n+   the table in sparc_option_override.  */\n+enum processor_type {\n+  PROCESSOR_V7,\n+  PROCESSOR_CYPRESS,\n+  PROCESSOR_V8,\n+  PROCESSOR_SUPERSPARC,\n+  PROCESSOR_HYPERSPARC,\n+  PROCESSOR_LEON,\n+  PROCESSOR_SPARCLITE,\n+  PROCESSOR_F930,\n+  PROCESSOR_F934,\n+  PROCESSOR_SPARCLITE86X,\n+  PROCESSOR_SPARCLET,\n+  PROCESSOR_TSC701,\n+  PROCESSOR_V9,\n+  PROCESSOR_ULTRASPARC,\n+  PROCESSOR_ULTRASPARC3,\n+  PROCESSOR_NIAGARA,\n+  PROCESSOR_NIAGARA2\n+};\n+\n+#endif"}, {"sha": "a90cdb324f507f8b904c5600c8f94f69c26696f6", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 47, "deletions": 117, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53e58b920d4fe4bbdb26e227401ad827c52a57/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53e58b920d4fe4bbdb26e227401ad827c52a57/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=aa53e58b920d4fe4bbdb26e227401ad827c52a57", "patch": "@@ -367,8 +367,6 @@ static HOST_WIDE_INT frame_base_offset;\n /* 1 if the next opcode is to be specially indented.  */\n int sparc_indent_opcode = 0;\n \n-static bool sparc_handle_option (struct gcc_options *, struct gcc_options *,\n-\t\t\t\t const struct cl_decoded_option *, location_t);\n static void sparc_option_override (void);\n static void sparc_init_modes (void);\n static void scan_record_type (const_tree, int *, int *, int *);\n@@ -486,21 +484,6 @@ enum cmodel sparc_cmodel;\n \n char sparc_hard_reg_printed[8];\n \n-struct sparc_cpu_select sparc_select[] =\n-{\n-  /* switch\tname,\t\ttune\tarch */\n-  { (char *)0,\t\"default\",\t1,\t1 },\n-  { (char *)0,\t\"-mcpu=\",\t1,\t1 },\n-  { (char *)0,\t\"-mtune=\",\t1,\t0 },\n-  { 0, 0, 0, 0 }\n-};\n-\n-/* CPU type.  This is set from TARGET_CPU_DEFAULT and -m{cpu,tune}=xxx.  */\n-enum processor_type sparc_cpu;\n-\n-/* Whether\fan FPU option was specified.  */\n-static bool fpu_option_set = false;\n-\n /* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n static const struct default_options sparc_option_optimization_table[] =\n   {\n@@ -640,8 +623,6 @@ static const struct default_options sparc_option_optimization_table[] =\n \n #undef TARGET_DEFAULT_TARGET_FLAGS\n #define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n-#undef TARGET_HANDLE_OPTION\n-#define TARGET_HANDLE_OPTION sparc_handle_option\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE sparc_option_override\n #undef TARGET_OPTION_OPTIMIZATION_TABLE\n@@ -677,39 +658,6 @@ static const struct default_options sparc_option_optimization_table[] =\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n-/* Implement TARGET_HANDLE_OPTION.  */\n-\n-static bool\n-sparc_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n-\t\t     const struct cl_decoded_option *decoded,\n-\t\t     location_t loc ATTRIBUTE_UNUSED)\n-{\n-  size_t code = decoded->opt_index;\n-  const char *arg = decoded->arg;\n-\n-  gcc_assert (opts == &global_options);\n-  gcc_assert (opts_set == &global_options_set);\n-\n-  switch (code)\n-    {\n-    case OPT_mfpu:\n-    case OPT_mhard_float:\n-    case OPT_msoft_float:\n-      fpu_option_set = true;\n-      break;\n-\n-    case OPT_mcpu_:\n-      sparc_select[1].string = arg;\n-      break;\n-\n-    case OPT_mtune_:\n-      sparc_select[2].string = arg;\n-      break;\n-    }\n-\n-  return true;\n-}\n-\n /* Validate and override various options, and do some machine dependent\n    initialization.  */\n \n@@ -731,68 +679,64 @@ sparc_option_override (void)\n   /* Map TARGET_CPU_DEFAULT to value for -m{cpu,tune}=.  */\n   static struct cpu_default {\n     const int cpu;\n-    const char *const name;\n+    const enum processor_type processor;\n   } const cpu_default[] = {\n     /* There must be one entry here for each TARGET_CPU value.  */\n-    { TARGET_CPU_sparc, \"cypress\" },\n-    { TARGET_CPU_v8, \"v8\" },\n-    { TARGET_CPU_supersparc, \"supersparc\" },\n-    { TARGET_CPU_hypersparc, \"hypersparc\" },\n-    { TARGET_CPU_leon, \"leon\" },\n-    { TARGET_CPU_sparclite, \"f930\" },\n-    { TARGET_CPU_sparclite86x, \"sparclite86x\" },\n-    { TARGET_CPU_sparclet, \"tsc701\" },\n-    { TARGET_CPU_v9, \"v9\" },\n-    { TARGET_CPU_ultrasparc, \"ultrasparc\" },\n-    { TARGET_CPU_ultrasparc3, \"ultrasparc3\" },\n-    { TARGET_CPU_niagara, \"niagara\" },\n-    { TARGET_CPU_niagara2, \"niagara2\" },\n-    { 0, 0 }\n+    { TARGET_CPU_sparc, PROCESSOR_CYPRESS },\n+    { TARGET_CPU_v8, PROCESSOR_V8 },\n+    { TARGET_CPU_supersparc, PROCESSOR_SUPERSPARC },\n+    { TARGET_CPU_hypersparc, PROCESSOR_HYPERSPARC },\n+    { TARGET_CPU_leon, PROCESSOR_LEON },\n+    { TARGET_CPU_sparclite, PROCESSOR_F930 },\n+    { TARGET_CPU_sparclite86x, PROCESSOR_SPARCLITE86X },\n+    { TARGET_CPU_sparclet, PROCESSOR_TSC701 },\n+    { TARGET_CPU_v9, PROCESSOR_V9 },\n+    { TARGET_CPU_ultrasparc, PROCESSOR_ULTRASPARC },\n+    { TARGET_CPU_ultrasparc3, PROCESSOR_ULTRASPARC3 },\n+    { TARGET_CPU_niagara, PROCESSOR_NIAGARA },\n+    { TARGET_CPU_niagara2, PROCESSOR_NIAGARA2 },\n+    { -1, 0 }\n   };\n   const struct cpu_default *def;\n-  /* Table of values for -m{cpu,tune}=.  */\n+  /* Table of values for -m{cpu,tune}=.  This must match the order of\n+     the PROCESSOR_* enumeration.  */\n   static struct cpu_table {\n-    const char *const name;\n-    const enum processor_type processor;\n     const int disable;\n     const int enable;\n   } const cpu_table[] = {\n-    { \"v7\",         PROCESSOR_V7, MASK_ISA, 0 },\n-    { \"cypress\",    PROCESSOR_CYPRESS, MASK_ISA, 0 },\n-    { \"v8\",         PROCESSOR_V8, MASK_ISA, MASK_V8 },\n+    { MASK_ISA, 0 },\n+    { MASK_ISA, 0 },\n+    { MASK_ISA, MASK_V8 },\n     /* TI TMS390Z55 supersparc */\n-    { \"supersparc\", PROCESSOR_SUPERSPARC, MASK_ISA, MASK_V8 },\n-    { \"hypersparc\", PROCESSOR_HYPERSPARC, MASK_ISA, MASK_V8|MASK_FPU },\n+    { MASK_ISA, MASK_V8 },\n+    { MASK_ISA, MASK_V8|MASK_FPU },\n     /* LEON */\n-    { \"leon\",       PROCESSOR_LEON, MASK_ISA, MASK_V8|MASK_FPU },\n-    { \"sparclite\",  PROCESSOR_SPARCLITE, MASK_ISA, MASK_SPARCLITE },\n+    { MASK_ISA, MASK_V8|MASK_FPU },\n+    { MASK_ISA, MASK_SPARCLITE },\n     /* The Fujitsu MB86930 is the original sparclite chip, with no FPU.  */\n-    { \"f930\",       PROCESSOR_F930, MASK_ISA|MASK_FPU, MASK_SPARCLITE },\n+    { MASK_ISA|MASK_FPU, MASK_SPARCLITE },\n     /* The Fujitsu MB86934 is the recent sparclite chip, with an FPU.  */\n-    { \"f934\",       PROCESSOR_F934, MASK_ISA, MASK_SPARCLITE|MASK_FPU },\n-    { \"sparclite86x\",  PROCESSOR_SPARCLITE86X, MASK_ISA|MASK_FPU,\n-      MASK_SPARCLITE },\n-    { \"sparclet\",   PROCESSOR_SPARCLET, MASK_ISA, MASK_SPARCLET },\n+    { MASK_ISA, MASK_SPARCLITE|MASK_FPU },\n+    { MASK_ISA|MASK_FPU, MASK_SPARCLITE },\n+    { MASK_ISA, MASK_SPARCLET },\n     /* TEMIC sparclet */\n-    { \"tsc701\",     PROCESSOR_TSC701, MASK_ISA, MASK_SPARCLET },\n-    { \"v9\",         PROCESSOR_V9, MASK_ISA, MASK_V9 },\n+    { MASK_ISA, MASK_SPARCLET },\n+    { MASK_ISA, MASK_V9 },\n     /* UltraSPARC I, II, IIi */\n-    { \"ultrasparc\", PROCESSOR_ULTRASPARC, MASK_ISA,\n+    { MASK_ISA,\n     /* Although insns using %y are deprecated, it is a clear win.  */\n       MASK_V9|MASK_DEPRECATED_V8_INSNS},\n     /* UltraSPARC III */\n     /* ??? Check if %y issue still holds true.  */\n-    { \"ultrasparc3\", PROCESSOR_ULTRASPARC3, MASK_ISA,\n+    { MASK_ISA,\n       MASK_V9|MASK_DEPRECATED_V8_INSNS},\n     /* UltraSPARC T1 */\n-    { \"niagara\", PROCESSOR_NIAGARA, MASK_ISA,\n+    { MASK_ISA,\n       MASK_V9|MASK_DEPRECATED_V8_INSNS},\n     /* UltraSPARC T2 */\n-    { \"niagara2\", PROCESSOR_NIAGARA2, MASK_ISA, MASK_V9},\n-    { 0, (enum processor_type) 0, 0, 0 }\n+    { MASK_ISA, MASK_V9},\n   };\n   const struct cpu_table *cpu;\n-  const struct sparc_cpu_select *sel;\n   int fpu;\n \n #ifdef SUBTARGET_OVERRIDE_OPTIONS\n@@ -840,38 +784,24 @@ sparc_option_override (void)\n   fpu = target_flags & MASK_FPU; /* save current -mfpu status */\n \n   /* Set the default CPU.  */\n-  for (def = &cpu_default[0]; def->name; ++def)\n-    if (def->cpu == TARGET_CPU_DEFAULT)\n-      break;\n-  gcc_assert (def->name);\n-  sparc_select[0].string = def->name;\n-\n-  for (sel = &sparc_select[0]; sel->name; ++sel)\n+  if (!global_options_set.x_sparc_cpu_and_features)\n     {\n-      if (sel->string)\n-\t{\n-\t  for (cpu = &cpu_table[0]; cpu->name; ++cpu)\n-\t    if (! strcmp (sel->string, cpu->name))\n-\t      {\n-\t\tif (sel->set_tune_p)\n-\t\t  sparc_cpu = cpu->processor;\n-\n-\t\tif (sel->set_arch_p)\n-\t\t  {\n-\t\t    target_flags &= ~cpu->disable;\n-\t\t    target_flags |= cpu->enable;\n-\t\t  }\n-\t\tbreak;\n-\t      }\n-\n-\t  if (! cpu->name)\n-\t    error (\"bad value (%s) for %s switch\", sel->string, sel->name);\n-\t}\n+      for (def = &cpu_default[0]; def->cpu != -1; ++def)\n+\tif (def->cpu == TARGET_CPU_DEFAULT)\n+\t  break;\n+      gcc_assert (def->cpu != -1);\n+      sparc_cpu_and_features = def->processor;\n     }\n+  if (!global_options_set.x_sparc_cpu)\n+    sparc_cpu = sparc_cpu_and_features;\n+\n+  cpu = &cpu_table[(int) sparc_cpu_and_features];\n+  target_flags &= ~cpu->disable;\n+  target_flags |= cpu->enable;\n \n   /* If -mfpu or -mno-fpu was explicitly used, don't override with\n      the processor default.  */\n-  if (fpu_option_set)\n+  if (target_flags_explicit & MASK_FPU)\n     target_flags = (target_flags & ~MASK_FPU) | fpu;\n \n   /* Don't allow -mvis if FPU is disabled.  */"}, {"sha": "9b68f13f19aa5cee27d1defc30c9ee7895c3c120", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53e58b920d4fe4bbdb26e227401ad827c52a57/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53e58b920d4fe4bbdb26e227401ad827c52a57/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=aa53e58b920d4fe4bbdb26e227401ad827c52a57", "patch": "@@ -513,31 +513,6 @@ extern enum cmodel sparc_cmodel;\n    -mno-app-regs).  */\n #define TARGET_DEFAULT (MASK_APP_REGS + MASK_FPU)\n \n-/* Processor type.\n-   These must match the values for the cpu attribute in sparc.md.  */\n-enum processor_type {\n-  PROCESSOR_V7,\n-  PROCESSOR_CYPRESS,\n-  PROCESSOR_V8,\n-  PROCESSOR_SUPERSPARC,\n-  PROCESSOR_HYPERSPARC,\n-  PROCESSOR_LEON,\n-  PROCESSOR_SPARCLITE,\n-  PROCESSOR_F930,\n-  PROCESSOR_F934,\n-  PROCESSOR_SPARCLITE86X,\n-  PROCESSOR_SPARCLET,\n-  PROCESSOR_TSC701,\n-  PROCESSOR_V9,\n-  PROCESSOR_ULTRASPARC,\n-  PROCESSOR_ULTRASPARC3,\n-  PROCESSOR_NIAGARA,\n-  PROCESSOR_NIAGARA2\n-};\n-\n-/* This is set from -m{cpu,tune}=xxx.  */\n-extern enum processor_type sparc_cpu;\n-\n /* Recast the cpu class to be the cpu attribute.\n    Every file includes us, but not every file includes insn-attr.h.  */\n #define sparc_cpu_attr ((enum attr_cpu) sparc_cpu)\n@@ -551,17 +526,6 @@ extern enum processor_type sparc_cpu;\n   {\"cpu\", \"%{!mcpu=*:-mcpu=%(VALUE)}\" }, \\\n   {\"tune\", \"%{!mtune=*:-mtune=%(VALUE)}\" }, \\\n   {\"float\", \"%{!msoft-float:%{!mhard-float:%{!mfpu:%{!mno-fpu:-m%(VALUE)-float}}}}\" }\n-\n-/* sparc_select[0] is reserved for the default cpu.  */\n-struct sparc_cpu_select\n-{\n-  const char *string;\n-  const char *const name;\n-  const int set_tune_p;\n-  const int set_arch_p;\n-};\n-\n-extern struct sparc_cpu_select sparc_select[];\n \f\n /* target machine storage layout */\n "}, {"sha": "9d8e26b75424739faa366b4b3a33115182bb1c00", "filename": "gcc/config/sparc/sparc.opt", "status": "modified", "additions": 60, "deletions": 3, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa53e58b920d4fe4bbdb26e227401ad827c52a57/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa53e58b920d4fe4bbdb26e227401ad827c52a57/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.opt?ref=aa53e58b920d4fe4bbdb26e227401ad827c52a57", "patch": "@@ -1,6 +1,6 @@\n ; Options for the SPARC port of the compiler\n ;\n-; Copyright (C) 2005, 2007, 2010 Free Software Foundation, Inc.\n+; Copyright (C) 2005, 2007, 2010, 2011 Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -18,6 +18,9 @@\n ; along with GCC; see the file COPYING3.  If not see\n ; <http://www.gnu.org/licenses/>.\n \n+HeaderInclude\n+config/sparc/sparc-opts.h\n+\n mfpu\n Target Report Mask(FPU)\n Use hardware FP\n@@ -83,13 +86,67 @@ Target\n Optimize tail call instructions in assembler and linker\n \n mcpu=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(sparc_cpu_and_features) Enum(sparc_processor_type)\n Use features of and schedule code for given CPU\n \n mtune=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(sparc_cpu) Enum(sparc_processor_type)\n Schedule code for given CPU\n \n+Enum\n+Name(sparc_processor_type) Type(enum processor_type)\n+\n+EnumValue\n+Enum(sparc_processor_type) String(v7) Value(PROCESSOR_V7)\n+\n+EnumValue\n+Enum(sparc_processor_type) String(cypress) Value(PROCESSOR_CYPRESS)\n+\n+EnumValue\n+Enum(sparc_processor_type) String(v8) Value(PROCESSOR_V8)\n+\n+EnumValue\n+Enum(sparc_processor_type) String(supersparc) Value(PROCESSOR_SUPERSPARC)\n+\n+EnumValue\n+Enum(sparc_processor_type) String(hypersparc) Value(PROCESSOR_HYPERSPARC)\n+\n+EnumValue\n+Enum(sparc_processor_type) String(leon) Value(PROCESSOR_LEON)\n+\n+EnumValue\n+Enum(sparc_processor_type) String(sparclite) Value(PROCESSOR_SPARCLITE)\n+\n+EnumValue\n+Enum(sparc_processor_type) String(f930) Value(PROCESSOR_F930)\n+\n+EnumValue\n+Enum(sparc_processor_type) String(f934) Value(PROCESSOR_F934)\n+\n+EnumValue\n+Enum(sparc_processor_type) String(sparclite86x) Value(PROCESSOR_SPARCLITE86X)\n+\n+EnumValue\n+Enum(sparc_processor_type) String(sparclet) Value(PROCESSOR_SPARCLET)\n+\n+EnumValue\n+Enum(sparc_processor_type) String(tsc701) Value(PROCESSOR_TSC701)\n+\n+EnumValue\n+Enum(sparc_processor_type) String(v9) Value(PROCESSOR_V9)\n+\n+EnumValue\n+Enum(sparc_processor_type) String(ultrasparc) Value(PROCESSOR_ULTRASPARC)\n+\n+EnumValue\n+Enum(sparc_processor_type) String(ultrasparc3) Value(PROCESSOR_ULTRASPARC3)\n+\n+EnumValue\n+Enum(sparc_processor_type) String(niagara) Value(PROCESSOR_NIAGARA)\n+\n+EnumValue\n+Enum(sparc_processor_type) String(niagara2) Value(PROCESSOR_NIAGARA2)\n+\n mcmodel=\n Target RejectNegative Joined Var(sparc_cmodel_string)\n Use given SPARC-V9 code model"}]}