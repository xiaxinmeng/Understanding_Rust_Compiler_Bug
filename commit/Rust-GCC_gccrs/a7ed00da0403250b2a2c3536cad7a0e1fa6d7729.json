{"sha": "a7ed00da0403250b2a2c3536cad7a0e1fa6d7729", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdlZDAwZGEwNDAzMjUwYjJhMmMzNTM2Y2FkN2EwZTFmYTZkNzcyOQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-29T02:06:02Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-29T02:06:02Z"}, "message": "m32r-protos.h: Remove the prototype for m32r_setup_incoming_varargs.\n\n\t* config/m32r/m32r-protos.h: Remove the prototype for\n\tm32r_setup_incoming_varargs.\n\t* config/m32r/m32r.c (TARGET_PROMOTE_PROTOTYPES): New.\n\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n\t(TARGET_RETURN_IN_MEMORY): Likewise.\n\t(TARGET_SETUP_INCOMING_VARARGS): Likewise.\n\t(m32r_return_in_memory): New.\n\t(m32r_setup_incoming_varargs): Make it static.\n\t* config/m32r/m32r.h: Remove #undef of\n\tASM_OUTPUT_EXTERNAL_LIBCALL.  Remove the commented-out\n\tdefinitions of PROMOTE_FUNCTION_ARGS and\n\tPROMOTE_FUNCTION_RETURN.\n\t(PROMOTE_PROTOTYPES): Remove.\n\t(RETURN_IN_MEMORY): Likewise.\n\t(STRUCT_VALUE): Likewise.\n\nFrom-SVN: r76834", "tree": {"sha": "7bb57b6e6db635d9623c1232557763be45eeb44e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bb57b6e6db635d9623c1232557763be45eeb44e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7ed00da0403250b2a2c3536cad7a0e1fa6d7729", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7ed00da0403250b2a2c3536cad7a0e1fa6d7729", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7ed00da0403250b2a2c3536cad7a0e1fa6d7729", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7ed00da0403250b2a2c3536cad7a0e1fa6d7729/comments", "author": null, "committer": null, "parents": [{"sha": "8636be86eab0c475bd896a425cb21b2bac7e9756", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8636be86eab0c475bd896a425cb21b2bac7e9756", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8636be86eab0c475bd896a425cb21b2bac7e9756"}], "stats": {"total": 102, "additions": 44, "deletions": 58}, "files": [{"sha": "6cdcc3611f137c2508dd72d331adb71f4dcf110c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ed00da0403250b2a2c3536cad7a0e1fa6d7729/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ed00da0403250b2a2c3536cad7a0e1fa6d7729/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7ed00da0403250b2a2c3536cad7a0e1fa6d7729", "patch": "@@ -1,3 +1,21 @@\n+2004-01-28  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/m32r/m32r-protos.h: Remove the prototype for\n+\tm32r_setup_incoming_varargs.\n+\t* config/m32r/m32r.c (TARGET_PROMOTE_PROTOTYPES): New.\n+\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n+\t(TARGET_RETURN_IN_MEMORY): Likewise.\n+\t(TARGET_SETUP_INCOMING_VARARGS): Likewise.\n+\t(m32r_return_in_memory): New.\n+\t(m32r_setup_incoming_varargs): Make it static.\n+\t* config/m32r/m32r.h: Remove #undef of\n+\tASM_OUTPUT_EXTERNAL_LIBCALL.  Remove the commented-out\n+\tdefinitions of PROMOTE_FUNCTION_ARGS and\n+\tPROMOTE_FUNCTION_RETURN.\n+\t(PROMOTE_PROTOTYPES): Remove.\n+\t(RETURN_IN_MEMORY): Likewise.\n+\t(STRUCT_VALUE): Likewise.\n+\n 2004-01-28  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/m68k/m68k.c (TARGET_PROMOTE_PROTOTYPES): New."}, {"sha": "97247d63143dade797328dbe506d74f126982df2", "filename": "gcc/config/m32r/m32r-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ed00da0403250b2a2c3536cad7a0e1fa6d7729/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ed00da0403250b2a2c3536cad7a0e1fa6d7729/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h?ref=a7ed00da0403250b2a2c3536cad7a0e1fa6d7729", "patch": "@@ -1,5 +1,6 @@\n /* Prototypes for m32r.c functions used in the md file & elsewhere.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+   Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -36,7 +37,6 @@ extern void   m32r_load_pic_register (void);\n extern enum m32r_function_type m32r_compute_function_type (tree);\n \n #ifdef HAVE_MACHINE_MODES\n-extern void   m32r_setup_incoming_varargs (CUMULATIVE_ARGS *, Mmode, tree, int *, int);\n extern int    function_arg_partial_nregs (CUMULATIVE_ARGS *, Mmode, tree, int);\n #endif\n #endif /* TREE_CODE */"}, {"sha": "932c54eef781708f886db63ec498d2bfdce15177", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ed00da0403250b2a2c3536cad7a0e1fa6d7729/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ed00da0403250b2a2c3536cad7a0e1fa6d7729/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=a7ed00da0403250b2a2c3536cad7a0e1fa6d7729", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on the Renesas M32R cpu.\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n    Free Software Foundation, Inc.\n \n    This file is part of GCC.\n@@ -101,6 +101,9 @@ static int    m32r_issue_rate (void);\n \n static void m32r_encode_section_info (tree, rtx, int);\n static bool m32r_in_small_data_p (tree);\n+static bool m32r_return_in_memory (tree, tree);\n+static void m32r_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t\t tree, int *, int);\n static void init_idents (void);\n static bool m32r_rtx_costs (rtx, int, int, int *);\n \f\n@@ -144,6 +147,17 @@ static bool m32r_rtx_costs (rtx, int, int, int *);\n #undef  TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST hook_int_rtx_0\n \n+#undef  TARGET_PROMOTE_PROTOTYPES\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n+\n+#undef  TARGET_STRUCT_VALUE_RTX\n+#define TARGET_STRUCT_VALUE_RTX hook_rtx_tree_int_null\n+#undef  TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY m32r_return_in_memory\n+\n+#undef  TARGET_SETUP_INCOMING_VARARGS\n+#define TARGET_SETUP_INCOMING_VARARGS m32r_setup_incoming_varargs\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Called by OVERRIDE_OPTIONS to initialize various things.  */\n@@ -1348,14 +1362,22 @@ function_arg_partial_nregs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   return ret;\n }\n \n+/* Worker function for TARGET_RETURN_IN_MEMORY.  */\n+\n+static bool\n+m32r_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+{\n+  return m32r_pass_by_reference (type);\n+}\n+\n /* Do any needed setup for a variadic function.  For the M32R, we must\n    create a register parameter block, and then copy any anonymous arguments\n    in registers to memory.\n \n    CUM has not been updated for the last named argument which has type TYPE\n    and mode MODE, and we rely on this fact.  */\n \n-void\n+static void\n m32r_setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t\t\t     tree type, int *pretend_size, int no_rtl)\n {"}, {"sha": "6f4f5c91097dedf26a5b0967c0a2e1599e225ce5", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ed00da0403250b2a2c3536cad7a0e1fa6d7729/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ed00da0403250b2a2c3536cad7a0e1fa6d7729/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=a7ed00da0403250b2a2c3536cad7a0e1fa6d7729", "patch": "@@ -30,7 +30,6 @@\n #undef PTRDIFF_TYPE\n #undef WCHAR_TYPE\n #undef WCHAR_TYPE_SIZE\n-#undef ASM_OUTPUT_EXTERNAL_LIBCALL\n #undef TARGET_VERSION\n #undef CPP_SPEC\n #undef ASM_SPEC\n@@ -500,15 +499,6 @@ extern enum m32r_sdata m32r_sdata;\n       (MODE) = SImode;\t\t\t\t\\\n     }\n \n-/* Define this macro if the promotion described by `PROMOTE_MODE'\n-   should also be done for outgoing function arguments.  */\n-/*#define PROMOTE_FUNCTION_ARGS*/\n-\n-/* Likewise, if the function return value is promoted.\n-   If defined, FUNCTION_VALUE must perform the same promotions done by\n-   PROMOTE_MODE.  */\n-/*#define PROMOTE_FUNCTION_RETURN*/\n-\n /* Allocation boundary (in *bits*) for storing arguments in argument list.  */\n #define PARM_BOUNDARY 32\n \n@@ -1023,9 +1013,6 @@ extern enum reg_class m32r_regno_reg_class[FIRST_PSEUDO_REGISTER];\n \f\n /* Function argument passing.  */\n \n-/* When a prototype says `char' or `short', really pass an `int'.  */\n-#define PROMOTE_PROTOTYPES 1\n-\n /* If defined, the maximum amount of space required for outgoing\n    arguments will be computed and placed into the variable\n    `current_function_outgoing_args_size'.  No space will be pushed\n@@ -1150,36 +1137,6 @@ extern enum reg_class m32r_regno_reg_class[FIRST_PSEUDO_REGISTER];\n    ? PARM_BOUNDARY : 2 * PARM_BOUNDARY)\n #endif\n \n-/* This macro offers an alternative\n-   to using `__builtin_saveregs' and defining the macro\n-   `EXPAND_BUILTIN_SAVEREGS'.  Use it to store the anonymous register\n-   arguments into the stack so that all the arguments appear to have\n-   been passed consecutively on the stack.  Once this is done, you\n-   can use the standard implementation of varargs that works for\n-   machines that pass all their arguments on the stack.\n-\n-   The argument ARGS_SO_FAR is the `CUMULATIVE_ARGS' data structure,\n-   containing the values that obtain after processing of the named\n-   arguments.  The arguments MODE and TYPE describe the last named\n-   argument--its machine mode and its data type as a tree node.\n-\n-   The macro implementation should do two things: first, push onto the\n-   stack all the argument registers *not* used for the named\n-   arguments, and second, store the size of the data thus pushed into\n-   the `int'-valued variable whose name is supplied as the argument\n-   PRETEND_SIZE.  The value that you store here will serve as\n-   additional offset for setting up the stack frame.\n-\n-   If the argument NO_RTL is nonzero, it means that the\n-   arguments of the function are being analyzed for the second time.\n-   This happens for an inline function, which is not actually\n-   compiled until the end of the source file.  The macro\n-   `SETUP_INCOMING_VARARGS' should not generate any instructions in\n-   this case.  */\n-\n-#define SETUP_INCOMING_VARARGS(ARGS_SO_FAR, MODE, TYPE, PRETEND_SIZE, NO_RTL) \\\n-  m32r_setup_incoming_varargs (& ARGS_SO_FAR, MODE, TYPE, & PRETEND_SIZE, NO_RTL)\n-\n /* Implement `va_arg'.  */\n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n   m32r_va_arg (valist, type)\n@@ -1201,19 +1158,8 @@ extern enum reg_class m32r_regno_reg_class[FIRST_PSEUDO_REGISTER];\n /* ??? What about r1 in DI/DF values.  */\n #define FUNCTION_VALUE_REGNO_P(N) ((N) == 0)\n \n-/* A C expression which can inhibit the returning of certain function\n-   values in registers, based on the type of value.  A nonzero value says\n-   to return the function value in memory, just as large structures are\n-   always returned.  Here TYPE will be a C expression of type `tree',\n-   representing the data type of the value.  */\n-#define RETURN_IN_MEMORY(TYPE) m32r_pass_by_reference (TYPE)\n-\n /* Tell GCC to use RETURN_IN_MEMORY.  */\n #define DEFAULT_PCC_STRUCT_RETURN 0\n-\n-/* Register in which address to store a structure value\n-   is passed to a function, or 0 to use `invisible' first argument.  */\n-#define STRUCT_VALUE 0\n \f\n /* Function entry and exit.  */\n "}]}