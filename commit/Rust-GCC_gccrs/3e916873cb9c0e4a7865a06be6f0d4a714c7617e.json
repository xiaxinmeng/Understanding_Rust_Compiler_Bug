{"sha": "3e916873cb9c0e4a7865a06be6f0d4a714c7617e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U5MTY4NzNjYjljMGU0YTc4NjVhMDZiZTZmMGQ0YTcxNGM3NjE3ZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2006-11-10T21:42:04Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2006-11-10T21:42:04Z"}, "message": "cse.c (cse_process_notes): Copy the propagated value.\n\n\t* cse.c (cse_process_notes): Copy the propagated value.\n\t* local-alloc.c (update_equiv_regs): Copy the memory RTX to be used\n\tin REG_EQUIV notes.\n\t* gcse.c (try_replace_reg): Copy the replacement.\n\t* i386.c (emit_i387_cw_initialization): Copy stored_mode\n\t(assign_386_stack_local): Always return copied memory expression\n\t* function.c (instantiate_virtual_regs_in_insn): Copy the operand\n\tduplicates.\n\nFrom-SVN: r118665", "tree": {"sha": "7b0c4d5780c7da1e20a8d73c2051cd1de97dda2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b0c4d5780c7da1e20a8d73c2051cd1de97dda2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e916873cb9c0e4a7865a06be6f0d4a714c7617e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e916873cb9c0e4a7865a06be6f0d4a714c7617e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e916873cb9c0e4a7865a06be6f0d4a714c7617e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e916873cb9c0e4a7865a06be6f0d4a714c7617e/comments", "author": null, "committer": null, "parents": [{"sha": "d8d8121add34439d69187182bacea680468270df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d8121add34439d69187182bacea680468270df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8d8121add34439d69187182bacea680468270df"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "da4b39e3659d9500bfebe2e1da437452ca071542", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e916873cb9c0e4a7865a06be6f0d4a714c7617e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e916873cb9c0e4a7865a06be6f0d4a714c7617e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e916873cb9c0e4a7865a06be6f0d4a714c7617e", "patch": "@@ -1,3 +1,14 @@\n+2006-11-10  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cse.c (cse_process_notes): Copy the propagated value.\n+\t* local-alloc.c (update_equiv_regs): Copy the memory RTX to be used\n+\tin REG_EQUIV notes.\n+\t* gcse.c (try_replace_reg): Copy the replacement.\n+\t* i386.c (emit_i387_cw_initialization): Copy stored_mode\n+\t(assign_386_stack_local): Always return copied memory expression\n+\t* function.c (instantiate_virtual_regs_in_insn): Copy the operand\n+\tduplicates.\n+\n 2006-11-10  Jan Hubicka  <jh@suse.cz>\n \n \t* final.c (final): Walk from first instruction."}, {"sha": "c797ff76a3d86ad096c4f1f34af5829173bb2ff2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e916873cb9c0e4a7865a06be6f0d4a714c7617e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e916873cb9c0e4a7865a06be6f0d4a714c7617e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3e916873cb9c0e4a7865a06be6f0d4a714c7617e", "patch": "@@ -8589,7 +8589,7 @@ emit_i387_cw_initialization (int mode)\n   rtx reg = gen_reg_rtx (HImode);\n \n   emit_insn (gen_x86_fnstcw_1 (stored_mode));\n-  emit_move_insn (reg, stored_mode);\n+  emit_move_insn (reg, copy_rtx (stored_mode));\n \n   if (TARGET_64BIT || TARGET_PARTIAL_REG_STALL || optimize_size)\n     {\n@@ -13520,7 +13520,7 @@ assign_386_stack_local (enum machine_mode mode, enum ix86_stack_slot n)\n \n   for (s = ix86_stack_locals; s; s = s->next)\n     if (s->mode == mode && s->n == n)\n-      return s->rtl;\n+      return copy_rtx (s->rtl);\n \n   s = (struct stack_local_entry *)\n     ggc_alloc (sizeof (struct stack_local_entry));"}, {"sha": "8bd275859417727b4738e04e8cb98063f7e188c8", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e916873cb9c0e4a7865a06be6f0d4a714c7617e/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e916873cb9c0e4a7865a06be6f0d4a714c7617e/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=3e916873cb9c0e4a7865a06be6f0d4a714c7617e", "patch": "@@ -5817,7 +5817,7 @@ cse_process_notes (rtx x, rtx object)\n \t    {\n \t      rtx new = gen_lowpart (GET_MODE (x), ent->const_rtx);\n \t      if (new)\n-\t\treturn new;\n+\t\treturn copy_rtx (new);\n \t    }\n \t}\n "}, {"sha": "cef7fe3f10cb979da1b6accfcf971f4f6142dcbb", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e916873cb9c0e4a7865a06be6f0d4a714c7617e/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e916873cb9c0e4a7865a06be6f0d4a714c7617e/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=3e916873cb9c0e4a7865a06be6f0d4a714c7617e", "patch": "@@ -1540,7 +1540,7 @@ instantiate_virtual_regs_in_insn (rtx insn)\n       /* Propagate operand changes into the duplicates.  */\n       for (i = 0; i < recog_data.n_dups; ++i)\n \t*recog_data.dup_loc[i]\n-\t  = recog_data.operand[(unsigned)recog_data.dup_num[i]];\n+\t  = copy_rtx (recog_data.operand[(unsigned)recog_data.dup_num[i]]);\n \n       /* Force re-recognition of the instruction for validation.  */\n       INSN_CODE (insn) = -1;"}, {"sha": "0518e4c597ac438b00061c32a6b2965904e102ad", "filename": "gcc/gcse.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e916873cb9c0e4a7865a06be6f0d4a714c7617e/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e916873cb9c0e4a7865a06be6f0d4a714c7617e/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=3e916873cb9c0e4a7865a06be6f0d4a714c7617e", "patch": "@@ -2647,6 +2647,11 @@ try_replace_reg (rtx from, rtx to, rtx insn)\n   int success = 0;\n   rtx set = single_set (insn);\n \n+  /* Usually we substitute easy stuff, so we won't copy everything.\n+     We however need to take care to not duplicate non-trivial CONST\n+     expressions.  */\n+  to = copy_rtx (to);\n+\n   validate_replace_src_group (from, to, insn);\n   if (num_changes_pending () && apply_change_group ())\n     success = 1;"}, {"sha": "e6ff69e48a547d2cbd84853f7c4f0c9f2b683552", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e916873cb9c0e4a7865a06be6f0d4a714c7617e/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e916873cb9c0e4a7865a06be6f0d4a714c7617e/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=3e916873cb9c0e4a7865a06be6f0d4a714c7617e", "patch": "@@ -907,7 +907,7 @@ update_equiv_regs (void)\n \t     REG_EQUAL note on the insn.  Since this note would be redundant,\n \t     there's no point creating it earlier than here.  */\n \t  if (! note && ! rtx_varies_p (src, 0))\n-\t    note = set_unique_reg_note (insn, REG_EQUAL, src);\n+\t    note = set_unique_reg_note (insn, REG_EQUAL, copy_rtx (src));\n \n \t  /* Don't bother considering a REG_EQUAL note containing an EXPR_LIST\n \t     since it represents a function call */\n@@ -953,7 +953,8 @@ update_equiv_regs (void)\n \t  if (note == 0 && REG_BASIC_BLOCK (regno) >= 0\n \t      && MEM_P (SET_SRC (set))\n \t      && validate_equiv_mem (insn, dest, SET_SRC (set)))\n-\t    REG_NOTES (insn) = note = gen_rtx_EXPR_LIST (REG_EQUIV, SET_SRC (set),\n+\t    REG_NOTES (insn) = note = gen_rtx_EXPR_LIST (REG_EQUIV,\n+\t\t\t    \t\t\t\t copy_rtx (SET_SRC (set)),\n \t\t\t\t\t\t\t REG_NOTES (insn));\n \n \t  if (note)\n@@ -1061,7 +1062,7 @@ update_equiv_regs (void)\n \t      && ! memref_used_between_p (dest, init_insn, insn))\n \t    {\n \t      REG_NOTES (init_insn)\n-\t\t= gen_rtx_EXPR_LIST (REG_EQUIV, dest,\n+\t\t= gen_rtx_EXPR_LIST (REG_EQUIV, copy_rtx (dest),\n \t\t\t\t     REG_NOTES (init_insn));\n \t      /* This insn makes the equivalence, not the one initializing\n \t\t the register.  */"}]}