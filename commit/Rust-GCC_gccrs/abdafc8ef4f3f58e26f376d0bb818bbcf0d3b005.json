{"sha": "abdafc8ef4f3f58e26f376d0bb818bbcf0d3b005", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJkYWZjOGVmNGYzZjU4ZTI2ZjM3NmQwYmI4MThiYmNmMGQzYjAwNQ==", "commit": {"author": {"name": "Devang Patel", "email": "dpatel@apple.com", "date": "2005-04-29T00:27:44Z"}, "committer": {"name": "Devang Patel", "email": "dpatel@gcc.gnu.org", "date": "2005-04-29T00:27:44Z"}, "message": "dbxout.c (have_used_extensions): Remove.\n\n      * dbxout.c (have_used_extensions): Remove.\n      (dbxout_type_fileds, dbxout_type, dbxout_symbol): Remove use of\n      have_used_extensions.\n\nFrom-SVN: r98958", "tree": {"sha": "c0540e3ffb31b0048705c5ed4fa18437cb751b9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0540e3ffb31b0048705c5ed4fa18437cb751b9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abdafc8ef4f3f58e26f376d0bb818bbcf0d3b005", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abdafc8ef4f3f58e26f376d0bb818bbcf0d3b005", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abdafc8ef4f3f58e26f376d0bb818bbcf0d3b005", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abdafc8ef4f3f58e26f376d0bb818bbcf0d3b005/comments", "author": null, "committer": null, "parents": [{"sha": "191502759b797c24a179ea3f61effd3f76263e78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/191502759b797c24a179ea3f61effd3f76263e78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/191502759b797c24a179ea3f61effd3f76263e78"}], "stats": {"total": 44, "additions": 10, "deletions": 34}, "files": [{"sha": "ac8ac4ee7d1e21ac284e34181b925fcc13657e3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abdafc8ef4f3f58e26f376d0bb818bbcf0d3b005/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abdafc8ef4f3f58e26f376d0bb818bbcf0d3b005/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=abdafc8ef4f3f58e26f376d0bb818bbcf0d3b005", "patch": "@@ -1,3 +1,9 @@\n+2005-04-28  Devang Patel  <dpatel@apple.com>\n+\n+\t* dbxout.c (have_used_extensions): Remove.\n+\t(dbxout_type_fileds, dbxout_type, dbxout_symbol): Remove use of\n+\thave_used_extensions.\n+\t\n 2005-04-28  James E Wilson  <wilson@specifixinc.com>\n \n \t* doc/install.texi: Update -enable-languages info.  Correct path to"}, {"sha": "c4cae3fc7fa57751be3a9e0cb77e0c78280ee868", "filename": "gcc/dbxout.c", "status": "modified", "additions": 4, "deletions": 34, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abdafc8ef4f3f58e26f376d0bb818bbcf0d3b005/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abdafc8ef4f3f58e26f376d0bb818bbcf0d3b005/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=abdafc8ef4f3f58e26f376d0bb818bbcf0d3b005", "patch": "@@ -241,13 +241,6 @@ static GTY(()) int scope_labelno;\n \n static GTY(()) int dbxout_source_line_counter;\n \n-/* Nonzero if we have actually used any of the GDB extensions\n-   to the debugging format.  The idea is that we use them for the\n-   first time only if there's a strong reason, but once we have done that,\n-   we use them whenever convenient.  */\n-\n-static GTY(()) int have_used_extensions = 0;\n-\n /* Number for the next N_SOL filename stabs label.  The number 0 is reserved\n    for the N_SO filename stabs label.  */\n \n@@ -1430,7 +1423,6 @@ dbxout_type_fields (tree type)\n \t      && (TREE_PRIVATE (tem) || TREE_PROTECTED (tem)\n \t\t  || TREE_CODE (tem) != FIELD_DECL))\n \t    {\n-\t      have_used_extensions = 1;\n \t      stabstr_C ('/');\n \t      stabstr_C (DECL_ACCESSIBILITY_CHAR (tem));\n \t    }\n@@ -1445,7 +1437,6 @@ dbxout_type_fields (tree type)\n \t\t{\n \t\t  tree name = DECL_ASSEMBLER_NAME (tem);\n \n-\t\t  have_used_extensions = 1;\n \t\t  stabstr_C (':');\n \t\t  stabstr_I (name);\n \t\t  stabstr_C (';');\n@@ -1860,7 +1851,6 @@ dbxout_type (tree type, int full)\n \t  if (use_gnu_debug_info_extensions\n \t      && TYPE_PRECISION (type) != TYPE_PRECISION (integer_type_node))\n \t    {\n-\t      have_used_extensions = 1;\n \t      stabstr_S (\"@s\");\n \t      stabstr_D (TYPE_PRECISION (type));\n \t      stabstr_C (';');\n@@ -1877,7 +1867,6 @@ dbxout_type (tree type, int full)\n \t  if (use_gnu_debug_info_extensions\n \t      && TYPE_PRECISION (type) != TYPE_PRECISION (integer_type_node))\n \t    {\n-\t      have_used_extensions = 1;\n \t      stabstr_S (\"@s\");\n \t      stabstr_D (TYPE_PRECISION (type));\n \t      stabstr_C (';');\n@@ -1924,7 +1913,6 @@ dbxout_type (tree type, int full)\n     case CHAR_TYPE:\n       if (use_gnu_debug_info_extensions)\n \t{\n-\t  have_used_extensions = 1;\n \t  stabstr_S (\"@s\");\n \t  stabstr_D (BITS_PER_UNIT * int_size_in_bytes (type));\n \t  stabstr_S (\";-20;\");\n@@ -1942,7 +1930,6 @@ dbxout_type (tree type, int full)\n     case BOOLEAN_TYPE:\n       if (use_gnu_debug_info_extensions)\n \t{\n-\t  have_used_extensions = 1;\n \t  stabstr_S (\"@s\");\n \t  stabstr_D (BITS_PER_UNIT * int_size_in_bytes (type));\n \t  stabstr_S (\";-16;\");\n@@ -1988,7 +1975,6 @@ dbxout_type (tree type, int full)\n       /* Make arrays of packed bits look like bitstrings for chill.  */\n       if (TYPE_PACKED (type) && use_gnu_debug_info_extensions)\n \t{\n-\t  have_used_extensions = 1;\n \t  stabstr_S (\"@s\");\n \t  stabstr_D (BITS_PER_UNIT * int_size_in_bytes (type));\n \t  stabstr_S (\";@S;S\");\n@@ -1997,10 +1983,7 @@ dbxout_type (tree type, int full)\n \t}\n \n       if (use_gnu_debug_info_extensions && vector_type)\n-\t{\n-\t  have_used_extensions = 1;\n-\t  stabstr_S (\"@V;\");\n-\t}\n+\tstabstr_S (\"@V;\");\n \n       /* Output \"a\" followed by a range type definition\n \t for the index type of the array\n@@ -2010,7 +1993,6 @@ dbxout_type (tree type, int full)\n \t different from an array of characters.  */\n       if (TYPE_STRING_FLAG (type) && use_gnu_debug_info_extensions)\n \t{\n-\t  have_used_extensions = 1;\n \t  stabstr_S (\"@S;\");\n \t}\n       tem = TYPE_DOMAIN (type);\n@@ -2080,7 +2062,6 @@ dbxout_type (tree type, int full)\n \t      {\n \t\tif (BINFO_N_BASE_BINFOS (binfo))\n \t\t  {\n-\t\t    have_used_extensions = 1;\n \t\t    stabstr_C ('!');\n \t\t    stabstr_U (BINFO_N_BASE_BINFOS (binfo));\n \t\t    stabstr_C (',');\n@@ -2093,7 +2074,6 @@ dbxout_type (tree type, int full)\n \n \t\tif (use_gnu_debug_info_extensions)\n \t\t  {\n-\t\t    have_used_extensions = 1;\n \t\t    stabstr_C (BINFO_VIRTUAL_P (child) ? '1' : '0');\n \t\t    stabstr_C (access == access_public_node ? '2' :\n \t\t\t\t   access == access_protected_node\n@@ -2138,7 +2118,6 @@ dbxout_type (tree type, int full)\n       dbxout_type_fields (type);\n       if (use_gnu_debug_info_extensions && TYPE_METHODS (type) != NULL_TREE)\n \t{\n-\t  have_used_extensions = 1;\n \t  dbxout_type_methods (type);\n \t}\n \n@@ -2148,7 +2127,6 @@ dbxout_type (tree type, int full)\n \t  /* Avoid the ~ if we don't really need it--it confuses dbx.  */\n \t  && TYPE_VFIELD (type))\n \t{\n-\t  have_used_extensions = 1;\n \n \t  /* We need to write out info about what field this class\n \t     uses as its \"main\" vtable pointer field, because if this\n@@ -2179,7 +2157,6 @@ dbxout_type (tree type, int full)\n       if (use_gnu_debug_info_extensions\n \t  && TYPE_PRECISION (type) != TYPE_PRECISION (integer_type_node))\n \t{\n-\t  have_used_extensions = 1;\n \t  stabstr_S (\"@s\");\n \t  stabstr_D (TYPE_PRECISION (type));\n \t  stabstr_C (';');\n@@ -2215,7 +2192,6 @@ dbxout_type (tree type, int full)\n     case METHOD_TYPE:\n       if (use_gnu_debug_info_extensions)\n \t{\n-\t  have_used_extensions = 1;\n \t  stabstr_C ('#');\n \n \t  /* Write the argument types out longhand.  */\n@@ -2233,7 +2209,6 @@ dbxout_type (tree type, int full)\n     case OFFSET_TYPE:\n       if (use_gnu_debug_info_extensions)\n \t{\n-\t  have_used_extensions = 1;\n \t  stabstr_C ('@');\n \t  dbxout_type (TYPE_OFFSET_BASETYPE (type), 0);\n \t  stabstr_C (',');\n@@ -2247,7 +2222,6 @@ dbxout_type (tree type, int full)\n     case REFERENCE_TYPE:\n       if (use_gnu_debug_info_extensions)\n \t{\n-\t  have_used_extensions = 1;\n \t  stabstr_C ('&');\n \t}\n       else\n@@ -2523,7 +2497,7 @@ dbxout_symbol (tree decl, int local ATTRIBUTE_UNUSED)\n \t\t || TREE_CODE (type) == UNION_TYPE\n \t\t || TREE_CODE (type) == QUAL_UNION_TYPE)\n \t\t&& TYPE_NAME (type) == decl\n-\t\t&& !(use_gnu_debug_info_extensions && have_used_extensions)\n+\t\t&& !use_gnu_debug_info_extensions\n \t\t&& !TREE_ASM_WRITTEN (TYPE_NAME (type))\n \t\t/* Distinguish the implicit typedefs of C++\n \t\t   from explicit ones that might be found in C.  */\n@@ -2549,11 +2523,7 @@ dbxout_symbol (tree decl, int local ATTRIBUTE_UNUSED)\n \n \t    dbxout_begin_complex_stabs ();\n \n-\t    /* Output leading class/struct qualifiers.\n-\t       ??? why not set have_used_extensions here ... because\n-\t       then the test of it below would always be true, I\n-\t       guess.  But it's not clear to me why we shouldn't do\n-\t       that always in extended mode.  */\n+\t    /* Output leading class/struct qualifiers.  */\n \t    if (use_gnu_debug_info_extensions)\n \t      dbxout_class_name_qualifiers (decl);\n \n@@ -2570,7 +2540,7 @@ dbxout_symbol (tree decl, int local ATTRIBUTE_UNUSED)\n \t\t   from explicit ones that might be found in C.  */\n \t\t&& DECL_ARTIFICIAL (decl))\n \t      {\n-\t\tif (use_gnu_debug_info_extensions && have_used_extensions)\n+\t\tif (use_gnu_debug_info_extensions)\n \t\t  {\n \t\t    stabstr_C ('T');\n \t\t    TREE_ASM_WRITTEN (TYPE_NAME (type)) = 1;"}]}