{"sha": "b453ace381f3c9b664916076ccd0bd1dbc9d5cc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ1M2FjZTM4MWYzYzliNjY0OTE2MDc2Y2NkMGJkMWRiYzlkNWNjMw==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@redhat.com", "date": "2010-10-04T08:49:59Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2010-10-04T08:49:59Z"}, "message": "acinclude.m4 (GLIBCXX_ENABLE): Properly quote argument to AC_HELP_STRING.\n\n* acinclude.m4 (GLIBCXX_ENABLE): Properly quote argument to\nAC_HELP_STRING.  Double quote expansion of _g_help.\n(GLIBCXX_ENABLE_LIBSTDCXX_TIME): Double quote third argument of\nGLIBCXX_ENABLE.\n(GLIBCXX_ENABLE_CHEADERS): Likewise.\n(GLIBCXX_ENABLE_CLOCALE): Likewise.\n(GLIBCXX_ENABLE_ALLOCATOR): Likewise.\n(GLIBCXX_ENABLE_CSTDIO): Likewise.\n(GLIBCXX_ENABLE_SYMVERS): Likewise.\n* configure: Regenerate.\n\nFrom-SVN: r164927", "tree": {"sha": "c118cbbcab2dc9783b64c6aeefb0de7b1b165eee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c118cbbcab2dc9783b64c6aeefb0de7b1b165eee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b453ace381f3c9b664916076ccd0bd1dbc9d5cc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b453ace381f3c9b664916076ccd0bd1dbc9d5cc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b453ace381f3c9b664916076ccd0bd1dbc9d5cc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b453ace381f3c9b664916076ccd0bd1dbc9d5cc3/comments", "author": null, "committer": null, "parents": [{"sha": "478a1c5b906a165853b77a8dd1c0548b66ace018", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/478a1c5b906a165853b77a8dd1c0548b66ace018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/478a1c5b906a165853b77a8dd1c0548b66ace018"}], "stats": {"total": 58, "additions": 37, "deletions": 21}, "files": [{"sha": "a8259b06c97664398453bb3d41170e0cb013ef8d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b453ace381f3c9b664916076ccd0bd1dbc9d5cc3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b453ace381f3c9b664916076ccd0bd1dbc9d5cc3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b453ace381f3c9b664916076ccd0bd1dbc9d5cc3", "patch": "@@ -1,3 +1,16 @@\n+2010-10-04  Andreas Schwab  <schwab@redhat.com>\n+\n+\t* acinclude.m4 (GLIBCXX_ENABLE): Properly quote argument to\n+\tAC_HELP_STRING.  Double quote expansion of _g_help.\n+\t(GLIBCXX_ENABLE_LIBSTDCXX_TIME): Double quote third argument of\n+\tGLIBCXX_ENABLE.\n+\t(GLIBCXX_ENABLE_CHEADERS): Likewise.\n+\t(GLIBCXX_ENABLE_CLOCALE): Likewise.\n+\t(GLIBCXX_ENABLE_ALLOCATOR): Likewise.\n+\t(GLIBCXX_ENABLE_CSTDIO): Likewise.\n+\t(GLIBCXX_ENABLE_SYMVERS): Likewise.\n+\t* configure: Regenerate.\n+\n 2010-10-02  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR libstdc++/45863"}, {"sha": "18f41af5e3f0d8e5178ea8cd4984cb87090d172c", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b453ace381f3c9b664916076ccd0bd1dbc9d5cc3/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b453ace381f3c9b664916076ccd0bd1dbc9d5cc3/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=b453ace381f3c9b664916076ccd0bd1dbc9d5cc3", "patch": "@@ -776,8 +776,8 @@ dnl See docs/html/17_intro/configury.html#enable for documentation.\n dnl\n m4_define([GLIBCXX_ENABLE],[dnl\n m4_define([_g_switch],[--enable-$1])dnl\n-m4_define([_g_help],[AC_HELP_STRING(_g_switch$3,[$4 @<:@default=$2@:>@])])dnl\n- AC_ARG_ENABLE($1,_g_help,\n+m4_define([_g_help],[AC_HELP_STRING([_g_switch$3],[$4 @<:@default=$2@:>@])])dnl\n+ AC_ARG_ENABLE([$1],m4_dquote(_g_help),\n   m4_bmatch([$5],\n    [^permit ],\n      [[\n@@ -1072,7 +1072,7 @@ dnl\n AC_DEFUN([GLIBCXX_ENABLE_LIBSTDCXX_TIME], [\n \n   AC_MSG_CHECKING([for clock_gettime, nanosleep and sched_yield])\n-  GLIBCXX_ENABLE(libstdcxx-time,$1,[=KIND],\n+  GLIBCXX_ENABLE(libstdcxx-time,$1,[[[=KIND]]],\n     [use KIND for check type],\n     [permit yes|no|rt])\n \n@@ -1684,7 +1684,7 @@ dnl  +  Usage:  GLIBCXX_ENABLE_CHEADERS[(DEFAULT)]\n dnl       Where DEFAULT is either 'c' or 'c_std' or 'c_global'.\n dnl\n AC_DEFUN([GLIBCXX_ENABLE_CHEADERS], [\n-  GLIBCXX_ENABLE(cheaders,$1,[=KIND],\n+  GLIBCXX_ENABLE(cheaders,$1,[[[=KIND]]],\n     [construct \"C\" headers for g++], [permit c|c_std|c_global])\n   AC_MSG_NOTICE(\"C\" header strategy set to $enable_cheaders)\n \n@@ -1710,7 +1710,7 @@ dnl\n dnl Default is generic.\n dnl\n AC_DEFUN([GLIBCXX_ENABLE_CLOCALE], [\n-  GLIBCXX_ENABLE(clocale,auto,[@<:@=MODEL@:>@],\n+  GLIBCXX_ENABLE(clocale,auto,[[[=MODEL]]],\n     [use MODEL for target locale package],\n     [permit generic|gnu|ieee_1003.1-2001|yes|no|auto])\n \n@@ -1915,7 +1915,7 @@ dnl Default is new.\n dnl\n AC_DEFUN([GLIBCXX_ENABLE_ALLOCATOR], [\n   AC_MSG_CHECKING([for std::allocator base class])\n-  GLIBCXX_ENABLE(libstdcxx-allocator,auto,[=KIND],\n+  GLIBCXX_ENABLE(libstdcxx-allocator,auto,[[[=KIND]]],\n     [use KIND for target std::allocator base],\n     [permit new|malloc|mt|bitmap|pool|yes|no|auto])\n \n@@ -2022,7 +2022,7 @@ dnl Default is stdio.\n dnl\n AC_DEFUN([GLIBCXX_ENABLE_CSTDIO], [\n   AC_MSG_CHECKING([for underlying I/O to use])\n-  GLIBCXX_ENABLE(cstdio,stdio,[=PACKAGE],\n+  GLIBCXX_ENABLE(cstdio,stdio,[[[=PACKAGE]]],\n     [use target-specific I/O package], [permit stdio])\n \n   # Now that libio has been removed, you can have any color you want as long\n@@ -2812,7 +2812,7 @@ dnl       'no' disables versioning.\n dnl\n AC_DEFUN([GLIBCXX_ENABLE_SYMVERS], [\n \n-GLIBCXX_ENABLE(symvers,$1,[=STYLE],\n+GLIBCXX_ENABLE(symvers,$1,[[[=STYLE]]],\n   [enables symbol versioning of the shared library],\n   [permit yes|no|gnu|gnu-versioned-namespace|darwin|darwin-export|sun])\n "}, {"sha": "077874532882dd0cb311c16b017a9e4d620daf08", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b453ace381f3c9b664916076ccd0bd1dbc9d5cc3/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b453ace381f3c9b664916076ccd0bd1dbc9d5cc3/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=b453ace381f3c9b664916076ccd0bd1dbc9d5cc3", "patch": "@@ -1492,14 +1492,16 @@ Optional Features:\n                           [default=auto]\n   --enable-libstdcxx-pch  build pre-compiled libstdc++ headers\n                           [default=$is_hosted]\n-  --enable-cstdio=PACKAGE use target-specific I/O package [default=stdio]\n+  --enable-cstdio[=PACKAGE]\n+                          use target-specific I/O package [default=stdio]\n   --enable-clocale[=MODEL]\n                           use MODEL for target locale package [default=auto]\n   --enable-nls            use Native Language Support (default)\n-  --enable-libstdcxx-allocator=KIND\n+  --enable-libstdcxx-allocator[=KIND]\n                           use KIND for target std::allocator base\n                           [default=auto]\n-  --enable-cheaders=KIND  construct \"C\" headers for g++ [default=$c_model]\n+  --enable-cheaders[=KIND]\n+                          construct \"C\" headers for g++ [default=$c_model]\n   --enable-long-long      enable template specializations for 'long long'\n                           [default=yes]\n   --enable-wchar_t        enable template specializations for 'wchar_t'\n@@ -1516,12 +1518,13 @@ Optional Features:\n   --enable-fully-dynamic-string\n                           do not put empty strings in per-process static\n                           memory [default=no]\n-  --enable-libstdcxx-time=KIND\n+  --enable-libstdcxx-time[=KIND]\n                           use KIND for check type [default=no]\n   --enable-tls            Use thread-local storage [default=yes]\n   --disable-rpath         do not hardcode runtime library paths\n   --enable-linux-futex    use the Linux futex system call [default=default]\n-  --enable-symvers=STYLE  enables symbol versioning of the shared library\n+  --enable-symvers[=STYLE]\n+                          enables symbol versioning of the shared library\n                           [default=yes]\n   --enable-visibility     enables visibility safe usage [default=yes]\n   --enable-version-specific-runtime-libs\n@@ -11466,7 +11469,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11469 \"configure\"\n+#line 11472 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11572,7 +11575,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11575 \"configure\"\n+#line 11578 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14912,7 +14915,7 @@ fi\n     #\n     # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 14915 \"configure\"\n+#line 14918 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -15280,7 +15283,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15283 \"configure\"\n+#line 15286 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15317,7 +15320,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15320 \"configure\"\n+#line 15323 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -15354,7 +15357,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15357 \"configure\"\n+#line 15360 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -15392,7 +15395,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15395 \"configure\"\n+#line 15398 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -15468,7 +15471,7 @@ $as_echo \"$as_me: WARNING: Performance of certain classes will degrade as a resu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15471 \"configure\"\n+#line 15474 \"configure\"\n int main()\n {\n   _Decimal32 d1;"}]}