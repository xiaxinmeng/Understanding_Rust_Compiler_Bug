{"sha": "ab40b100d3e1676c60d3ccd0765a45736471beaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI0MGIxMDBkM2UxNjc2YzYwZDNjY2QwNzY1YTQ1NzM2NDcxYmVhZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-04-02T19:51:21Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-04-02T19:51:21Z"}, "message": "mt_allocator.h (__mt_alloc<>::deallocate): Rearrange arithmetic to avoid computing two divisions at each deallocation.\n\n2004-04-02  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/mt_allocator.h (__mt_alloc<>::deallocate):\n\tRearrange arithmetic to avoid computing two divisions at\n\teach deallocation.\n\nFrom-SVN: r80356", "tree": {"sha": "046ad4d64956ce9f400bdfb9a9c27ae074b1c26b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/046ad4d64956ce9f400bdfb9a9c27ae074b1c26b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab40b100d3e1676c60d3ccd0765a45736471beaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab40b100d3e1676c60d3ccd0765a45736471beaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab40b100d3e1676c60d3ccd0765a45736471beaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab40b100d3e1676c60d3ccd0765a45736471beaf/comments", "author": null, "committer": null, "parents": [{"sha": "89c43c0a0bdf4db3e857fc60aecba58793e41107", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89c43c0a0bdf4db3e857fc60aecba58793e41107", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89c43c0a0bdf4db3e857fc60aecba58793e41107"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "3248c3243bcaf963f97320efb3cbb1abe7a48ea3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab40b100d3e1676c60d3ccd0765a45736471beaf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab40b100d3e1676c60d3ccd0765a45736471beaf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ab40b100d3e1676c60d3ccd0765a45736471beaf", "patch": "@@ -1,3 +1,9 @@\n+2004-04-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/mt_allocator.h (__mt_alloc<>::deallocate):\n+\tRearrange arithmetic to avoid computing two divisions at\n+\teach deallocation.\n+\n 2004-04-01  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/ext/mt_allocator.h (__mt_alloc<>::_S_initialize):"}, {"sha": "d69b0e1ebd9152c1ac9246d4b3d7190ca1f73ac0", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab40b100d3e1676c60d3ccd0765a45736471beaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab40b100d3e1676c60d3ccd0765a45736471beaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=ab40b100d3e1676c60d3ccd0765a45736471beaf", "patch": "@@ -434,25 +434,23 @@ namespace __gnu_cxx\n #ifdef __GTHREADS\n       if (__gthread_active_p())\n \t{\n-\t  // Calculate the number of records to remove from our freelist.\n+\t  // Calculate the number of records to remove from our freelist:\n+\t  // in order to avoid too much contention we wait until the\n+\t  // number of records is \"high enough\".\n \t  const size_t __thread_id = _S_get_thread_id();\n-\t  int __remove = (__bin._M_free[__thread_id]\n-\t\t\t  - (__bin._M_used[__thread_id]\n-\t\t\t     / _S_options._M_freelist_headroom));\n-\n-\t  // The calculation above will almost always tell us to\n-\t  // remove one or two records at a time, but this creates too\n-\t  // much contention when locking and therefore we wait until\n-\t  // the number of records is \"high enough\".\n-\t  int __cond1 = static_cast<int>(100 * (_S_bin_size - __which));\n-\t  int __cond2 = static_cast<int>(__bin._M_free[__thread_id]\n-\t\t\t\t\t / _S_options._M_freelist_headroom);\n-\t  if (__remove > __cond1 && __remove > __cond2)\n+\n+\t  long __remove = ((__bin._M_free[__thread_id]\n+\t\t\t    * _S_options._M_freelist_headroom)\n+\t\t\t   - __bin._M_used[__thread_id]);\n+\t  if (__remove > static_cast<long>(100 * (_S_bin_size - __which)\n+\t\t\t\t\t   * _S_options._M_freelist_headroom)\n+\t      && __remove > static_cast<long>(__bin._M_free[__thread_id]))\n \t    {\n \t      __gthread_mutex_lock(__bin._M_mutex);\n \t      _Block_record* __tmp = __bin._M_first[__thread_id];\n \t      _Block_record* __first = __tmp;\n-\t      const int __removed = __remove;\n+\t      __remove /= _S_options._M_freelist_headroom;\n+\t      const long __removed = __remove;\n \t      while (__remove > 1)\n \t\t{\n \t\t  __tmp = __tmp->_M_next;"}]}