{"sha": "c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVjNWJhODlhY2M5NmU0OGJmNmVlZDg3NDg5ZmNkYTNlZmNkN2ZjMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-03-12T12:13:33Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-03-12T12:13:33Z"}, "message": "re PR rtl-optimization/56571 (ICE in copyprop_hardreg_forward_1, at regcprop.c (insn does not satisfy its constraints !))\n\n\tPR middle-end/56571\n\t* valtrack.c (cleanup_auto_inc_dec): Unshare clobbers originating\n\tfrom pseudos.\n\t* emit-rtl.c (verify_rtx_sharing): Likewise.\n\t(copy_insn_1): Likewise.\n\t* rtl.c (copy_rtx): Likewise.\n\tPR middle-end/56571\n\t* gcc.c-torture/compile/pr56571.c: New testcase.\n\nFrom-SVN: r196612", "tree": {"sha": "30e6ccc292873e9eb78fa8523acc6926a4f44121", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30e6ccc292873e9eb78fa8523acc6926a4f44121"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3/comments", "author": null, "committer": null, "parents": [{"sha": "f22e3c85d7529038e1e5621ae1187453d6fef2f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f22e3c85d7529038e1e5621ae1187453d6fef2f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f22e3c85d7529038e1e5621ae1187453d6fef2f6"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "8fad9e630a9bb175fbe49cfa209e0f066cb55431", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3", "patch": "@@ -1,3 +1,12 @@\n+2013-03-11  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/56571\n+\t* valtrack.c (cleanup_auto_inc_dec): Unshare clobbers originating\n+\tfrom pseudos.\n+\t* emit-rtl.c (verify_rtx_sharing): Likewise.\n+\t(copy_insn_1): Likewise.\n+\t* rtl.c (copy_rtx): Likewise.\n+\n 2013-03-11  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/56591"}, {"sha": "59cd38d40f4c296087bb8af9b657aef63c18e689", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3", "patch": "@@ -2580,10 +2580,14 @@ verify_rtx_sharing (rtx orig, rtx insn)\n     case RETURN:\n     case SIMPLE_RETURN:\n     case SCRATCH:\n-      return;\n       /* SCRATCH must be shared because they represent distinct values.  */\n+      return;\n     case CLOBBER:\n-      if (REG_P (XEXP (x, 0)) && REGNO (XEXP (x, 0)) < FIRST_PSEUDO_REGISTER)\n+      /* Share clobbers of hard registers (like cc0), but do not share pseudo reg\n+         clobbers or clobbers of hard registers that originated as pseudos.\n+         This is needed to allow safe register renaming.  */\n+      if (REG_P (XEXP (x, 0)) && REGNO (XEXP (x, 0)) < FIRST_PSEUDO_REGISTER\n+\t  && ORIGINAL_REGNO (XEXP (x, 0)) == REGNO (XEXP (x, 0)))\n \treturn;\n       break;\n \n@@ -2797,7 +2801,11 @@ copy_rtx_if_shared_1 (rtx *orig1)\n       /* SCRATCH must be shared because they represent distinct values.  */\n       return;\n     case CLOBBER:\n-      if (REG_P (XEXP (x, 0)) && REGNO (XEXP (x, 0)) < FIRST_PSEUDO_REGISTER)\n+      /* Share clobbers of hard registers (like cc0), but do not share pseudo reg\n+         clobbers or clobbers of hard registers that originated as pseudos.\n+         This is needed to allow safe register renaming.  */\n+      if (REG_P (XEXP (x, 0)) && REGNO (XEXP (x, 0)) < FIRST_PSEUDO_REGISTER\n+\t  && ORIGINAL_REGNO (XEXP (x, 0)) == REGNO (XEXP (x, 0)))\n \treturn;\n       break;\n \n@@ -5303,7 +5311,11 @@ copy_insn_1 (rtx orig)\n     case SIMPLE_RETURN:\n       return orig;\n     case CLOBBER:\n-      if (REG_P (XEXP (orig, 0)) && REGNO (XEXP (orig, 0)) < FIRST_PSEUDO_REGISTER)\n+      /* Share clobbers of hard registers (like cc0), but do not share pseudo reg\n+         clobbers or clobbers of hard registers that originated as pseudos.\n+         This is needed to allow safe register renaming.  */\n+      if (REG_P (XEXP (orig, 0)) && REGNO (XEXP (orig, 0)) < FIRST_PSEUDO_REGISTER\n+\t  && ORIGINAL_REGNO (XEXP (orig, 0)) == REGNO (XEXP (orig, 0)))\n \treturn orig;\n       break;\n "}, {"sha": "b2d88f783b77e093c4bc1de9e7ad34c023727e6c", "filename": "gcc/rtl.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3", "patch": "@@ -256,7 +256,11 @@ copy_rtx (rtx orig)\n       /* SCRATCH must be shared because they represent distinct values.  */\n       return orig;\n     case CLOBBER:\n-      if (REG_P (XEXP (orig, 0)) && REGNO (XEXP (orig, 0)) < FIRST_PSEUDO_REGISTER)\n+      /* Share clobbers of hard registers (like cc0), but do not share pseudo reg\n+         clobbers or clobbers of hard registers that originated as pseudos.\n+         This is needed to allow safe register renaming.  */\n+      if (REG_P (XEXP (orig, 0)) && REGNO (XEXP (orig, 0)) < FIRST_PSEUDO_REGISTER\n+\t  && ORIGINAL_REGNO (XEXP (orig, 0)) == REGNO (XEXP (orig, 0)))\n \treturn orig;\n       break;\n "}, {"sha": "f4af3d5c34cd34d63e6f05e599516fbd287431c9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3", "patch": "@@ -1,3 +1,8 @@\n+2013-03-11  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/56571\n+\t* gcc.c-torture/compile/pr56571.c: New testcase.\n+\n 2013-03-11  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* gcc.dg/tree-ssa/vector-4.c: Add comment regarding xfail."}, {"sha": "248148c9ff847a9088131477dea582ce2aa05ebc", "filename": "gcc/testsuite/gcc.c-torture/compile/pr56571.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr56571.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr56571.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr56571.c?ref=c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-options \"-funroll-loops -ftracer\" } */\n+int a, b;\n+\n+int f(void)\n+{\n+    (a % b) && f();\n+    a = (0 || a | (a ? : 1));\n+}"}, {"sha": "997f68b50891e9ad24dfef4495bd3ba3f449c7c7", "filename": "gcc/valtrack.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3/gcc%2Fvaltrack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3/gcc%2Fvaltrack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvaltrack.c?ref=c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3", "patch": "@@ -71,7 +71,11 @@ cleanup_auto_inc_dec (rtx src, enum machine_mode mem_mode ATTRIBUTE_UNUSED)\n       /* SCRATCH must be shared because they represent distinct values.  */\n       return x;\n     case CLOBBER:\n-      if (REG_P (XEXP (x, 0)) && REGNO (XEXP (x, 0)) < FIRST_PSEUDO_REGISTER)\n+      /* Share clobbers of hard registers (like cc0), but do not share pseudo reg\n+         clobbers or clobbers of hard registers that originated as pseudos.\n+         This is needed to allow safe register renaming.  */\n+      if (REG_P (XEXP (x, 0)) && REGNO (XEXP (x, 0)) < FIRST_PSEUDO_REGISTER\n+\t  && ORIGINAL_REGNO (XEXP (x, 0)) == REGNO (XEXP (x, 0)))\n \treturn x;\n       break;\n "}]}