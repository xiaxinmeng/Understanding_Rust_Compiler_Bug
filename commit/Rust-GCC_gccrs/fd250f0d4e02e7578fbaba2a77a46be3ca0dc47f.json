{"sha": "fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQyNTBmMGQ0ZTAyZTc1NzhmYmFiYTJhNzdhNDZiZTNjYTBkYzQ3Zg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2017-03-21T21:37:29Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-03-21T21:37:29Z"}, "message": "Use the more formal \"cannot\" instead of the informal \"can't.\"\n\ngcc/ChangeLog:\n\t* doc/extend.texi: Use \"cannot\" instead of \"can't.\"\n\t* doc/hostconfig.texi: Same.\n\t* doc/install.texi: Same.\n\t* doc/invoke.texi: Same.\n\t* doc/loop.texi: Same.\n\t* doc/md.texi: Same.\n\t* doc/objc.texi: Same.\n\t* doc/rtl.texi: Same.\n\t* doc/tm.texi: Same.\n\t* doc/tm.texi.in: Same.\n\t* doc/trouble.texi: Same.\n\nFrom-SVN: r246334", "tree": {"sha": "4e75a6890a73f85e8d458984f34951e7b42eb1f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e75a6890a73f85e8d458984f34951e7b42eb1f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b7fc45a78a9ca5831cc6d51c2795e91ad7c5e0f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7fc45a78a9ca5831cc6d51c2795e91ad7c5e0f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7fc45a78a9ca5831cc6d51c2795e91ad7c5e0f2"}], "stats": {"total": 78, "additions": 46, "deletions": 32}, "files": [{"sha": "1ea0e4d02eb120a904b4b6db0bb0bd1faf308758", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f", "patch": "@@ -1,3 +1,17 @@\n+2017-03-21  Martin Sebor  <msebor@redhat.com>\n+\n+\t* doc/extend.texi: Use \"cannot\" instead of \"can't.\"\n+\t* doc/hostconfig.texi: Same.\n+\t* doc/install.texi: Same.\n+\t* doc/invoke.texi: Same.\n+\t* doc/loop.texi: Same.\n+\t* doc/md.texi: Same.\n+\t* doc/objc.texi: Same.\n+\t* doc/rtl.texi: Same.\n+\t* doc/tm.texi: Same.\n+\t* doc/tm.texi.in: Same.\n+\t* doc/trouble.texi: Same.\n+\n 2017-03-21  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR debug/63238"}, {"sha": "cc436ff78d3e4dee2d1dc90e859578e9a1578941", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f", "patch": "@@ -7513,7 +7513,7 @@ In this case, GCC does not actually output assembler code for the\n function, unless you specify the option @option{-fkeep-inline-functions}.\n If there is a nonintegrated call, then the function is compiled to\n assembler code as usual.  The function must also be compiled as usual if\n-the program refers to its address, because that can't be inlined.\n+the program refers to its address, because that cannot be inlined.\n \n @opindex Winline\n Note that certain usages in a function definition can make it unsuitable\n@@ -9180,7 +9180,7 @@ This results in an incomplete type, much like what you get if you write\n @code{struct foo} without describing the elements.  A later declaration\n that does specify the possible values completes the type.\n \n-You can't allocate variables or storage using the type while it is\n+You cannot allocate variables or storage using the type while it is\n incomplete.  However, you can work with pointers to that type.\n \n This extension may not be very useful, but it makes the handling of"}, {"sha": "860e5c551c361613134b0d112faf47c3cfeb649a", "filename": "gcc/doc/hostconfig.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f/gcc%2Fdoc%2Fhostconfig.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f/gcc%2Fdoc%2Fhostconfig.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fhostconfig.texi?ref=fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f", "patch": "@@ -22,7 +22,7 @@ header.  @xref{System Config}.\n \n @menu\n * Host Common::         Things every host probably needs implemented.\n-* Filesystem::          Your host can't have the letter `a' in filenames?\n+* Filesystem::          Your host cannot have the letter `a' in filenames?\n * Host Misc::           Rare configuration options for hosts.\n @end menu\n "}, {"sha": "6aacbff969d5bfb699526d698eca4395da0be831", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f", "patch": "@@ -3638,7 +3638,7 @@ The libffi library haven't been ported to 64-bit HP-UX@ and doesn't build.\n \n Refer to @uref{binaries.html,,binaries} for information about obtaining\n precompiled GCC binaries for HP-UX@.  Precompiled binaries must be obtained\n-to build the Ada language as it can't be bootstrapped using C@.  Ada is\n+to build the Ada language as it cannot be bootstrapped using C@.  Ada is\n only available for the 32-bit PA-RISC runtime.\n \n Starting with GCC 3.4 an ISO C compiler is required to bootstrap.  The\n@@ -3718,12 +3718,12 @@ Although the HP and GNU linkers are both supported for the\n HP linker be used for link editing on this target.\n \n At this time, the GNU linker does not support the creation of long\n-branch stubs.  As a result, it can't successfully link binaries\n+branch stubs.  As a result, it cannot successfully link binaries\n containing branch offsets larger than 8 megabytes.  In addition,\n there are problems linking shared libraries, linking executables\n with @option{-static}, and with dwarf2 unwind and exception support.\n It also doesn't provide stubs for internal calls to global functions\n-in shared libraries, so these calls can't be overloaded.\n+in shared libraries, so these calls cannot be overloaded.\n \n The HP dynamic loader does not support GNU symbol versioning, so symbol\n versioning is not supported.  It may be necessary to disable symbol"}, {"sha": "6d053a4af9341c4cc18c802bbc2ac25aa1528d53", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f", "patch": "@@ -6471,7 +6471,7 @@ different size.\n @opindex Winvalid-pch\n @opindex Wno-invalid-pch\n Warn if a precompiled header (@pxref{Precompiled Headers}) is found in\n-the search path but can't be used.\n+the search path but cannot be used.\n \n @item -Wlong-long\n @opindex Wlong-long\n@@ -10740,14 +10740,14 @@ more details.  The run-time behavior can be influenced using the\n the available options are shown at startup of the instrumented program.  See\n @url{https://github.com/google/sanitizers/wiki/AddressSanitizerFlags#run-time-flags}\n for a list of supported options.\n-The option can't be combined with @option{-fsanitize=thread}\n+The option cannot be combined with @option{-fsanitize=thread}\n and/or @option{-fcheck-pointer-bounds}.\n \n @item -fsanitize=kernel-address\n @opindex fsanitize=kernel-address\n Enable AddressSanitizer for Linux kernel.\n See @uref{https://github.com/google/kasan/wiki} for more details.\n-The option can't be combined with @option{-fcheck-pointer-bounds}.\n+The option cannot be combined with @option{-fcheck-pointer-bounds}.\n \n @item -fsanitize=thread\n @opindex fsanitize=thread\n@@ -10758,7 +10758,7 @@ details. The run-time behavior can be influenced using the @env{TSAN_OPTIONS}\n environment variable; see\n @url{https://github.com/google/sanitizers/wiki/ThreadSanitizerFlags} for a list of\n supported options.\n-The option can't be combined with @option{-fsanitize=address},\n+The option cannot be combined with @option{-fsanitize=address},\n @option{-fsanitize=leak} and/or @option{-fcheck-pointer-bounds}.\n \n @item -fsanitize=leak\n@@ -10770,7 +10770,7 @@ and other allocator functions.  See\n @uref{https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer} for more\n details.  The run-time behavior can be influenced using the\n @env{LSAN_OPTIONS} environment variable.\n-The option can't be combined with @option{-fsanitize=thread}.\n+The option cannot be combined with @option{-fsanitize=thread}.\n \n @item -fsanitize=undefined\n @opindex fsanitize=undefined\n@@ -10848,14 +10848,14 @@ a++;\n This option enables instrumentation of array bounds.  Various out of bounds\n accesses are detected.  Flexible array members, flexible array member-like\n arrays, and initializers of variables with static storage are not instrumented.\n-The option can't be combined with @option{-fcheck-pointer-bounds}.\n+The option cannot be combined with @option{-fcheck-pointer-bounds}.\n \n @item -fsanitize=bounds-strict\n @opindex fsanitize=bounds-strict\n This option enables strict instrumentation of array bounds.  Most out of bounds\n accesses are detected, including flexible array members and flexible array\n member-like arrays.  Initializers of variables with static storage are not\n-instrumented.  The option can't be combined\n+instrumented.  The option cannot be combined\n with @option{-fcheck-pointer-bounds}.\n \n @item -fsanitize=alignment\n@@ -23171,7 +23171,7 @@ disabled by specifying @option{-mno-zdcbranch}.\n @item -mcbranch-force-delay-slot\n @opindex mcbranch-force-delay-slot\n Force the usage of delay slots for conditional branches, which stuffs the delay\n-slot with a @code{nop} if a suitable instruction can't be found.  By default\n+slot with a @code{nop} if a suitable instruction cannot be found.  By default\n this option is disabled.  It can be enabled to work around hardware bugs as\n found in the original SH7055.\n \n@@ -24696,7 +24696,7 @@ Generate output containing library calls for floating point.\n \n @strong{Warning:} the requisite libraries are not part of GCC@.\n Normally the facilities of the machine's usual C compiler are used, but\n-this can't be done directly in cross-compilation.  You must make your\n+this cannot be done directly in cross-compilation.  You must make your\n own arrangements to provide suitable library functions for\n cross-compilation.\n \n@@ -26600,15 +26600,15 @@ If a standard directory begins with the configured\n @findex COMPILER_PATH\n The value of @env{COMPILER_PATH} is a colon-separated list of\n directories, much like @env{PATH}.  GCC tries the directories thus\n-specified when searching for subprograms, if it can't find the\n+specified when searching for subprograms, if it cannot find the\n subprograms using @env{GCC_EXEC_PREFIX}.\n \n @item LIBRARY_PATH\n @findex LIBRARY_PATH\n The value of @env{LIBRARY_PATH} is a colon-separated list of\n directories, much like @env{PATH}.  When configured as a native compiler,\n GCC tries the directories thus specified when searching for special\n-linker files, if it can't find them using @env{GCC_EXEC_PREFIX}.  Linking\n+linker files, if it cannot find them using @env{GCC_EXEC_PREFIX}.  Linking\n using GCC also uses these directories when searching for ordinary\n libraries for the @option{-l} option (but directories specified with\n @option{-L} come first).\n@@ -26667,7 +26667,7 @@ seen in the compilation.  As it searches for the included file\n compiler looks for a precompiled header in each directory just before it\n looks for the include file in that directory.  The name searched for is\n the name specified in the @code{#include} with @samp{.gch} appended.  If\n-the precompiled header file can't be used, it is ignored.\n+the precompiled header file cannot be used, it is ignored.\n \n For instance, if you have @code{#include \"all.h\"}, and you have\n @file{all.h.gch} in the same directory as @file{all.h}, then the\n@@ -26708,13 +26708,13 @@ A precompiled header file can be used only when these conditions apply:\n Only one precompiled header can be used in a particular compilation.\n \n @item\n-A precompiled header can't be used once the first C token is seen.  You\n+A precompiled header cannot be used once the first C token is seen.  You\n can have preprocessor directives before a precompiled header; you cannot\n include a precompiled header from inside another header.\n \n @item\n The precompiled header file must be produced for the same language as\n-the current compilation.  You can't use a C precompiled header for a C++\n+the current compilation.  You cannot use a C precompiled header for a C++\n compilation.\n \n @item"}, {"sha": "efeb42075e92360a125f17f2f035fcc00e419406", "filename": "gcc/doc/loop.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f/gcc%2Fdoc%2Floop.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f/gcc%2Fdoc%2Floop.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Floop.texi?ref=fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f", "patch": "@@ -567,7 +567,7 @@ relative to @code{p + i}. The access functions of the array are\n @code{@{i_init, + i_step@}_for1} and @code{@{j_init, +, j_step@}_for2}\n relative to @code{a}.\n \n-Usually, the object the pointer refers to is either unknown, or we can't\n+Usually, the object the pointer refers to is either unknown, or we cannot\n prove that the access is confined to the boundaries of a certain object.\n \n Two data references can be compared only if at least one of these two"}, {"sha": "c9d937d7195c54306c2176f0c8f93e616ff18aec", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f", "patch": "@@ -3728,7 +3728,7 @@ Any kind of immediate operand, unless it matches the S0 constraint.\n Memory location with B base register, but not using a long offset.\n \n @item W\n-A memory operand with an address that can't be used in an unaligned access.\n+A memory operand with an address that cannot be used in an unaligned access.\n \n @end ifset\n @item Z"}, {"sha": "a6553b5d01fbaa1d49a86a31a931258e5528abc0", "filename": "gcc/doc/objc.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f/gcc%2Fdoc%2Fobjc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f/gcc%2Fdoc%2Fobjc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fobjc.texi?ref=fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f", "patch": "@@ -1157,7 +1157,7 @@ GCC version 4.6.\n \n The GNU Objective-C runtime provides a hook, called\n @code{__objc_msg_forward2}, which is called by\n-@code{objc_msg_lookup()} when it can't find a method implementation in\n+@code{objc_msg_lookup()} when it cannot find a method implementation in\n the runtime tables and after calling @code{+resolveInstanceMethod:}\n and @code{+resolveClassMethod:} has been attempted and did not succeed\n in dynamically registering the method."}, {"sha": "b02e5a16bfe712170da40d52f102e1ea9635201d", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f", "patch": "@@ -2225,7 +2225,7 @@ Represents the result of subtracting @var{y} from @var{x} for purposes\n of comparison.  The result is computed without overflow, as if with\n infinite precision.\n \n-Of course, machines can't really subtract with infinite precision.\n+Of course, machines cannot really subtract with infinite precision.\n However, they can pretend to do so when only the sign of the result will\n be used, which is the case when the result is stored in the condition\n code.  And that is the @emph{only} way this kind of expression may"}, {"sha": "d59a4b90c54709fdd11be20d1bc83b202fbeac69", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f", "patch": "@@ -2546,7 +2546,7 @@ force @var{x} into a memory location.  For example, rs6000 can load\n immediate values into general-purpose registers, but does not have an\n instruction for loading an immediate value into a floating-point\n register, so @code{PREFERRED_RELOAD_CLASS} returns @code{NO_REGS} when\n-@var{x} is a floating-point constant.  If the constant can't be loaded\n+@var{x} is a floating-point constant.  If the constant cannot be loaded\n into any kind of register, code generation will be better if\n @code{TARGET_LEGITIMATE_CONSTANT_P} makes the constant illegitimate instead\n of using @code{TARGET_PREFERRED_RELOAD_CLASS}.\n@@ -2577,7 +2577,7 @@ to use when it is necessary to be able to hold a value of mode\n ordinarily be used.\n \n Unlike @code{PREFERRED_RELOAD_CLASS}, this macro should be used when\n-there are certain modes that simply can't go in certain reload classes.\n+there are certain modes that simply cannot go in certain reload classes.\n \n The value is a register class; perhaps @var{class}, or perhaps another,\n smaller class.\n@@ -9996,7 +9996,7 @@ floating point operations, but to perform a single precision operation,\n the FPSCR PR bit has to be cleared, while for a double precision\n operation, this bit has to be set.  Changing the PR bit requires a general\n purpose register as a scratch register, hence these FPSCR sets have to\n-be inserted before reload, i.e.@: you can't put this into instruction emitting\n+be inserted before reload, i.e.@: you cannot put this into instruction emitting\n or @code{TARGET_MACHINE_DEPENDENT_REORG}.\n \n You can have multiple entities that are mode-switched, and select at run time"}, {"sha": "88c12dddb2515bcb359f49df470e494d111d28bd", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f", "patch": "@@ -2304,7 +2304,7 @@ force @var{x} into a memory location.  For example, rs6000 can load\n immediate values into general-purpose registers, but does not have an\n instruction for loading an immediate value into a floating-point\n register, so @code{PREFERRED_RELOAD_CLASS} returns @code{NO_REGS} when\n-@var{x} is a floating-point constant.  If the constant can't be loaded\n+@var{x} is a floating-point constant.  If the constant cannot be loaded\n into any kind of register, code generation will be better if\n @code{TARGET_LEGITIMATE_CONSTANT_P} makes the constant illegitimate instead\n of using @code{TARGET_PREFERRED_RELOAD_CLASS}.\n@@ -2326,7 +2326,7 @@ to use when it is necessary to be able to hold a value of mode\n ordinarily be used.\n \n Unlike @code{PREFERRED_RELOAD_CLASS}, this macro should be used when\n-there are certain modes that simply can't go in certain reload classes.\n+there are certain modes that simply cannot go in certain reload classes.\n \n The value is a register class; perhaps @var{class}, or perhaps another,\n smaller class.\n@@ -7266,7 +7266,7 @@ floating point operations, but to perform a single precision operation,\n the FPSCR PR bit has to be cleared, while for a double precision\n operation, this bit has to be set.  Changing the PR bit requires a general\n purpose register as a scratch register, hence these FPSCR sets have to\n-be inserted before reload, i.e.@: you can't put this into instruction emitting\n+be inserted before reload, i.e.@: you cannot put this into instruction emitting\n or @code{TARGET_MACHINE_DEPENDENT_REORG}.\n \n You can have multiple entities that are mode-switched, and select at run time"}, {"sha": "0f0ae9a57d22e48a13d9978251901d5ce570ac93", "filename": "gcc/doc/trouble.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f/gcc%2Fdoc%2Ftrouble.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f/gcc%2Fdoc%2Ftrouble.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftrouble.texi?ref=fd250f0d4e02e7578fbaba2a77a46be3ca0dc47f", "patch": "@@ -25,7 +25,7 @@ where people's opinions differ as to what is best.\n                         This is necessary, but doesn't always work smoothly.\n * Standard Libraries::  GCC uses the system C library, which might not be\n                         compliant with the ISO C standard.\n-* Disappointments::     Regrettable things we can't change, but not quite bugs.\n+* Disappointments::     Regrettable things we cannot change, but not quite bugs.\n * C++ Misunderstandings:: Common misunderstandings with GNU C++.\n * Non-bugs::            Things we think are right, but some others disagree.\n * Warnings and Errors:: Which problems in your code get warnings,\n@@ -743,7 +743,7 @@ In @code{get_i()}, @code{i} is not used in a dependent context, so the\n compiler will look for a name declared at the enclosing namespace scope\n (which is the global scope here).  It will not look into the base class,\n since that is dependent and you may declare specializations of\n-@code{Base} even after declaring @code{Derived}, so the compiler can't\n+@code{Base} even after declaring @code{Derived}, so the compiler cannot\n really know what @code{i} would refer to.  If there is no global\n variable @code{i}, then you will get an error message.\n "}]}