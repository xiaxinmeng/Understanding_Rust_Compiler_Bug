{"sha": "e4faee8d02ec5d65bf418612f7181823eb08c078", "node_id": "C_kwDOANBUbNoAKGU0ZmFlZThkMDJlYzVkNjViZjQxODYxMmY3MTgxODIzZWIwOGMwNzg", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-11-22T09:16:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-11-22T11:04:58Z"}, "message": "tree-optimization/107803 - abnormal cleanup from the SSA propagator\n\nThe SSA propagator is missing abnormal cleanup which shows in a\nsanity check in the uninit engine (and missed CFG verification).\nThe following adds that.\n\n\tPR tree-optimization/107803\n\t* tree-ssa-propagate.cc (substitute_and_fold_dom_walker): Add\n\tneed_ab_cleanup member.\n\t(substitute_and_fold_dom_walker::before_dom_children): When\n\ta stmt can no longer transfer control flow abnormally set\n\tneed_ab_cleanup.\n\t(substitute_and_fold_engine::substitute_and_fold): Cleanup\n\tabnormal control flow.\n\n\t* g++.dg/pr107803.C: New testcase.", "tree": {"sha": "3566deb36f1861114db41b1dc997cc7bac61af76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3566deb36f1861114db41b1dc997cc7bac61af76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4faee8d02ec5d65bf418612f7181823eb08c078", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4faee8d02ec5d65bf418612f7181823eb08c078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4faee8d02ec5d65bf418612f7181823eb08c078", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4faee8d02ec5d65bf418612f7181823eb08c078/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f9659e770304d3c44cfa0e793833a461bc487aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f9659e770304d3c44cfa0e793833a461bc487aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f9659e770304d3c44cfa0e793833a461bc487aa"}], "stats": {"total": 39, "additions": 37, "deletions": 2}, "files": [{"sha": "f814e968b69bb6bab832ca00cf0bce78d8956220", "filename": "gcc/testsuite/g++.dg/pr107803.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4faee8d02ec5d65bf418612f7181823eb08c078/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr107803.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4faee8d02ec5d65bf418612f7181823eb08c078/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr107803.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr107803.C?ref=e4faee8d02ec5d65bf418612f7181823eb08c078", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do compile }\n+// { dg-options \"-O -fno-tree-dominator-opts -fno-tree-fre -Wmaybe-uninitialized\" }\n+\n+void printf(...);\n+void __sigsetjmp_cancel() __attribute__((__returns_twice__));\n+int z, main_ret;\n+void func(void *) {}\n+\n+int\n+main()\n+{\n+  int x;\n+  void (*__cancel_routine)(void *)(func);\n+  __sigsetjmp_cancel();\n+  __cancel_routine(0);\n+  if (main_ret)\n+    x = z;\n+  printf(x);\n+}"}, {"sha": "d8b0aed4564298822f40819d0930fa16465f2e69", "filename": "gcc/tree-ssa-propagate.cc", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4faee8d02ec5d65bf418612f7181823eb08c078/gcc%2Ftree-ssa-propagate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4faee8d02ec5d65bf418612f7181823eb08c078/gcc%2Ftree-ssa-propagate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.cc?ref=e4faee8d02ec5d65bf418612f7181823eb08c078", "patch": "@@ -671,12 +671,14 @@ class substitute_and_fold_dom_walker : public dom_walker\n       stmts_to_remove.create (0);\n       stmts_to_fixup.create (0);\n       need_eh_cleanup = BITMAP_ALLOC (NULL);\n+      need_ab_cleanup = BITMAP_ALLOC (NULL);\n     }\n     ~substitute_and_fold_dom_walker ()\n     {\n       stmts_to_remove.release ();\n       stmts_to_fixup.release ();\n       BITMAP_FREE (need_eh_cleanup);\n+      BITMAP_FREE (need_ab_cleanup);\n     }\n \n     edge before_dom_children (basic_block) final override;\n@@ -689,6 +691,7 @@ class substitute_and_fold_dom_walker : public dom_walker\n     vec<gimple *> stmts_to_remove;\n     vec<gimple *> stmts_to_fixup;\n     bitmap need_eh_cleanup;\n+    bitmap need_ab_cleanup;\n \n     class substitute_and_fold_engine *substitute_and_fold_engine;\n \n@@ -838,8 +841,13 @@ substitute_and_fold_dom_walker::before_dom_children (basic_block bb)\n \t folded.  */\n       did_replace = false;\n       gimple *old_stmt = stmt;\n-      bool was_noreturn = (is_gimple_call (stmt)\n-\t\t\t   && gimple_call_noreturn_p (stmt));\n+      bool was_noreturn = false;\n+      bool can_make_abnormal_goto = false;\n+      if (is_gimple_call (stmt))\n+\t{\n+\t  was_noreturn = gimple_call_noreturn_p (stmt);\n+\t  can_make_abnormal_goto = stmt_can_make_abnormal_goto (stmt);\n+\t}\n \n       /* Replace real uses in the statement.  */\n       did_replace |= substitute_and_fold_engine->replace_uses_in (stmt);\n@@ -905,6 +913,12 @@ substitute_and_fold_dom_walker::before_dom_children (basic_block bb)\n \t  if (maybe_clean_or_replace_eh_stmt (old_stmt, stmt))\n \t    bitmap_set_bit (need_eh_cleanup, bb->index);\n \n+\t  /* If we turned a call with possible abnormal control transfer\n+\t     into one that doesn't, remove abnormal edges.  */\n+\t  if (can_make_abnormal_goto\n+\t      && !stmt_can_make_abnormal_goto (stmt))\n+\t    bitmap_set_bit (need_ab_cleanup, bb->index);\n+\n \t  /* If we turned a not noreturn call into a noreturn one\n \t     schedule it for fixup.  */\n \t  if (!was_noreturn\n@@ -1012,6 +1026,8 @@ substitute_and_fold_engine::substitute_and_fold (basic_block block)\n \n   if (!bitmap_empty_p (walker.need_eh_cleanup))\n     gimple_purge_all_dead_eh_edges (walker.need_eh_cleanup);\n+  if (!bitmap_empty_p (walker.need_ab_cleanup))\n+    gimple_purge_all_dead_abnormal_call_edges (walker.need_ab_cleanup);\n \n   /* Fixup stmts that became noreturn calls.  This may require splitting\n      blocks and thus isn't possible during the dominator walk.  Do this"}]}