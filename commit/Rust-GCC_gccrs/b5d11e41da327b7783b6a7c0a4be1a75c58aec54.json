{"sha": "b5d11e41da327b7783b6a7c0a4be1a75c58aec54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVkMTFlNDFkYTMyN2I3NzgzYjZhN2MwYTRiZTFhNzVjNThhZWM1NA==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1994-09-01T00:15:03Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1994-09-01T00:15:03Z"}, "message": "stor-layout.c (set_alignment): New global.\n\n* stor-layout.c (set_alignment):  New global.\n(layout-type):  Add support for SET_TYPE.\n\nFrom-SVN: r8010", "tree": {"sha": "93310a5edd39928ddbc4237e78b2065826a8ae94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93310a5edd39928ddbc4237e78b2065826a8ae94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5d11e41da327b7783b6a7c0a4be1a75c58aec54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5d11e41da327b7783b6a7c0a4be1a75c58aec54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5d11e41da327b7783b6a7c0a4be1a75c58aec54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5d11e41da327b7783b6a7c0a4be1a75c58aec54/comments", "author": null, "committer": null, "parents": [{"sha": "94d6511c61decde2c932e8800b4469eeaccd5e62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94d6511c61decde2c932e8800b4469eeaccd5e62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94d6511c61decde2c932e8800b4469eeaccd5e62"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "9fdc65100d63f35811cf7c9850703a186ebb550b", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5d11e41da327b7783b6a7c0a4be1a75c58aec54/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5d11e41da327b7783b6a7c0a4be1a75c58aec54/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=b5d11e41da327b7783b6a7c0a4be1a75c58aec54", "patch": "@@ -44,6 +44,10 @@ tree size_one_node;\n    The value is measured in bits.  */\n int maximum_field_alignment;\n \n+/* If non-zero, the alignment of a bitsting or (power-)set value, in bits.\n+   May be overridden by front-ends.  */\n+int set_alignment = 0;\n+\n #define GET_MODE_ALIGNMENT(MODE)   \\\n   MIN (BIGGEST_ALIGNMENT, \t   \\\n        MAX (1, (GET_MODE_UNIT_SIZE (MODE) * BITS_PER_UNIT)))\n@@ -898,6 +902,31 @@ layout_type (type)\n       TYPE_ALIGN (type) = GET_MODE_ALIGNMENT (TYPE_MODE (type));\n       break;\n \n+    case SET_TYPE:\n+      if (TREE_CODE (TYPE_MAX_VALUE (TYPE_DOMAIN (type))) != INTEGER_CST\n+\t  || TREE_CODE (TYPE_MIN_VALUE (TYPE_DOMAIN (type))) != INTEGER_CST)\n+\tabort();\n+      else\n+\t{\n+#ifndef SET_WORD_SIZE\n+#define SET_WORD_SIZE BITS_PER_WORD\n+#endif\n+\t  int alignment = set_alignment ? set_alignment : SET_WORD_SIZE;\n+\t  int size_in_bits =\n+\t    TREE_INT_CST_LOW (TYPE_MAX_VALUE (TYPE_DOMAIN (type)))\n+\t      - TREE_INT_CST_LOW (TYPE_MIN_VALUE (TYPE_DOMAIN (type))) + 1;\n+\t  int rounded_size\n+\t    = ((size_in_bits + alignment - 1) / alignment) * alignment;\n+\t  if (rounded_size > alignment)\n+\t    TYPE_MODE (type) = BLKmode;\n+\t  else\n+\t    TYPE_MODE (type) = mode_for_size (alignment, MODE_INT, 1);\n+\t  TYPE_SIZE (type) = size_int (rounded_size);\n+\t  TYPE_ALIGN (type) = alignment;\n+\t  TYPE_PRECISION (type) = size_in_bits;\n+\t}\n+      break;\n+\n     case FILE_TYPE:\n       /* The size may vary in different languages, so the language front end\n \t should fill in the size.  */"}]}