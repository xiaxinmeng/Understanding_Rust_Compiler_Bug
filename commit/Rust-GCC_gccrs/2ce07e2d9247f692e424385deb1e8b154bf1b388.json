{"sha": "2ce07e2d9247f692e424385deb1e8b154bf1b388", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNlMDdlMmQ5MjQ3ZjY5MmU0MjQzODVkZWIxZThiMTU0YmYxYjM4OA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-03-08T11:21:28Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-03-08T11:21:28Z"}, "message": "c-common.h (make_fname_decl): Declare.\n\ngcc:\n\t* c-common.h (make_fname_decl): Declare.\n\t* c-common.c (make_fname_decl): Define.\n\t(declare_hidden_char_array): Remove.\n\t(declare_function_name): Use make_fname_decl.\n\t* c-decl.c (c_make_fname_decl): New function.\n\t(init_decl_processing): Set make_fname_decl.\n\ngcc/cp:\n\t* decl.c (cp_make_fname_decl): New function.\n\t(wrapup_globals_for_namespace): Don't emit unused static vars.\n\t(init_decl_processing): Remove comment about use of\n\tarray_domain_type. Set make_fname_decl.\n\t(cp_finish_decl): Remove __FUNCTION__ nadgering.\n\t* semantics.c (begin_compound_stmt): Remove\n\tcurrent_function_name_declared flagging.\n\t(expand_stmt): Don't emit unused local statics.\n\t* typeck.c (decay_conversion): Don't treat __FUNCTION__ decls\n\tspecially.\n\nFrom-SVN: r32418", "tree": {"sha": "d0c5ae25c2c3150c4c348ac64a3fdbdef73e015a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0c5ae25c2c3150c4c348ac64a3fdbdef73e015a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ce07e2d9247f692e424385deb1e8b154bf1b388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ce07e2d9247f692e424385deb1e8b154bf1b388", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ce07e2d9247f692e424385deb1e8b154bf1b388", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ce07e2d9247f692e424385deb1e8b154bf1b388/comments", "author": null, "committer": null, "parents": [{"sha": "8ce5ef1923e1bc826b4159ecee825db5fc9b8cd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ce5ef1923e1bc826b4159ecee825db5fc9b8cd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ce5ef1923e1bc826b4159ecee825db5fc9b8cd9"}], "stats": {"total": 219, "additions": 147, "deletions": 72}, "files": [{"sha": "60c467d0f679926d12b05df180568c689884dea1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce07e2d9247f692e424385deb1e8b154bf1b388/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce07e2d9247f692e424385deb1e8b154bf1b388/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ce07e2d9247f692e424385deb1e8b154bf1b388", "patch": "@@ -1,3 +1,12 @@\n+2000-03-08  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* c-common.h (make_fname_decl): Declare.\n+\t* c-common.c (make_fname_decl): Define.\n+\t(declare_hidden_char_array): Remove.\n+\t(declare_function_name): Use make_fname_decl.\n+\t* c-decl.c (c_make_fname_decl): New function.\n+\t(init_decl_processing): Set make_fname_decl.\n+\n Tue Mar  7 23:50:31 2000  Jeffrey A Law  (law@cygnus.com)\n \n \t* cccp.c (handle_directive): Initialize backslash_newlines_p."}, {"sha": "6acc1fd9e8a6491de0e9dd74e1fdb1e1e6e094c1", "filename": "gcc/c-common.c", "status": "modified", "additions": 6, "deletions": 35, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce07e2d9247f692e424385deb1e8b154bf1b388/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce07e2d9247f692e424385deb1e8b154bf1b388/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=2ce07e2d9247f692e424385deb1e8b154bf1b388", "patch": "@@ -135,6 +135,8 @@ enum cpp_token cpp_token;\n \n tree c_global_trees[CTI_MAX];\n \n+tree (*make_fname_decl)                PARAMS ((tree, const char *, int));\n+\n /* Nonzero means the expression being parsed will never be evaluated.\n    This is a count, since unevaluated expressions can nest.  */\n int skip_evaluation;\n@@ -148,7 +150,6 @@ enum attrs {A_PACKED, A_NOCOMMON, A_COMMON, A_NORETURN, A_CONST, A_T_UNION,\n enum format_type { printf_format_type, scanf_format_type,\n \t\t   strftime_format_type };\n \n-static void declare_hidden_char_array\tPARAMS ((const char *, const char *));\n static void add_attribute\t\tPARAMS ((enum attrs, const char *,\n \t\t\t\t\t\t int, int, int));\n static void init_attributes\t\tPARAMS ((void));\n@@ -269,42 +270,12 @@ declare_function_name ()\n \tname = \"\";\n       printable_name = (*decl_printable_name) (current_function_decl, 2);\n     }\n-\n-  declare_hidden_char_array (\"__FUNCTION__\", name);\n-  declare_hidden_char_array (\"__PRETTY_FUNCTION__\", printable_name);\n+  \n+  (*make_fname_decl) (get_identifier (\"__FUNCTION__\"), name, 0);\n+  (*make_fname_decl) (get_identifier (\"__PRETTY_FUNCTION__\"), printable_name, 1);\n   /* The ISO C people \"of course\" couldn't use __FUNCTION__ in the\n      ISO C 99 standard; instead a new variable is invented.  */\n-  declare_hidden_char_array (\"__func__\", name);\n-}\n-\n-static void\n-declare_hidden_char_array (name, value)\n-     const char *name, *value;\n-{\n-  tree decl, type, init;\n-  unsigned int vlen;\n-\n-  /* If the default size of char arrays isn't big enough for the name,\n-     or if we want to give warnings for large objects, make a bigger one.  */\n-  vlen = strlen (value) + 1;\n-  type = char_array_type_node;\n-  if (compare_tree_int (TYPE_MAX_VALUE (TYPE_DOMAIN (type)), vlen) < 0\n-      || warn_larger_than)\n-    type = build_array_type (char_type_node,\n-\t\t\t     build_index_type (build_int_2 (vlen, 0)));\n-\n-  decl = build_decl (VAR_DECL, get_identifier (name), type);\n-  TREE_STATIC (decl) = 1;\n-  TREE_READONLY (decl) = 1;\n-  TREE_ASM_WRITTEN (decl) = 1;\n-  DECL_SOURCE_LINE (decl) = 0;\n-  DECL_ARTIFICIAL (decl) = 1;\n-  DECL_IN_SYSTEM_HEADER (decl) = 1;\n-  DECL_IGNORED_P (decl) = 1;\n-  init = build_string (vlen, value);\n-  TREE_TYPE (init) = type;\n-  DECL_INITIAL (decl) = init;\n-  finish_decl (pushdecl (decl), init, NULL_TREE);\n+  (*make_fname_decl) (get_identifier (\"__func__\"), name, 0);\n }\n \n /* Given a chain of STRING_CST nodes,"}, {"sha": "17db8fbdc402fc26f4daa485462305cd06262add", "filename": "gcc/c-common.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce07e2d9247f692e424385deb1e8b154bf1b388/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce07e2d9247f692e424385deb1e8b154bf1b388/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=2ce07e2d9247f692e424385deb1e8b154bf1b388", "patch": "@@ -74,6 +74,13 @@ extern tree c_global_trees[CTI_MAX];\n #define int_ftype_int\t\t\tc_global_trees[CTI_INT_FTYPE_INT]\n #define ptr_ftype_sizetype\t\tc_global_trees[CTI_PTR_FTYPE_SIZETYPE]\n \n+/* Pointer to function to generate the VAR_DECL for __FUNCTION__ etc.\n+   ID is the identifier to use, NAME is the string.\n+   TYPE_DEP indicates whether it depends on type of the function or not\n+   (i.e. __PRETTY_FUNCTION__).  */\n+\n+extern tree (*make_fname_decl)                  PARAMS ((tree, const char *, int));\n+\n extern void declare_function_name\t\tPARAMS ((void));\n extern void decl_attributes\t\t\tPARAMS ((tree, tree, tree));\n extern void init_function_format_info\t\tPARAMS ((void));"}, {"sha": "8a574601a9cac3954a1ff05afd24a3339fbf6497", "filename": "gcc/c-decl.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce07e2d9247f692e424385deb1e8b154bf1b388/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce07e2d9247f692e424385deb1e8b154bf1b388/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=2ce07e2d9247f692e424385deb1e8b154bf1b388", "patch": "@@ -288,6 +288,7 @@ static tree grokdeclarator\t\tPARAMS ((tree, tree, enum decl_context,\n \t\t\t\t\t\t int));\n static tree grokparms\t\t\tPARAMS ((tree, int));\n static void layout_array_type\t\tPARAMS ((tree));\n+static tree c_make_fname_decl           PARAMS ((tree, const char *, int));\n \f\n /* C-specific option variables.  */\n \n@@ -3059,6 +3060,7 @@ init_decl_processing ()\n   pedantic_lvalues = pedantic;\n \n   /* Create the global bindings for __FUNCTION__ and __PRETTY_FUNCTION__.  */\n+  make_fname_decl = c_make_fname_decl;\n   declare_function_name ();\n \n   start_identifier_warnings ();\n@@ -3085,6 +3087,43 @@ init_decl_processing ()\n   ggc_add_tree_root (&static_dtors, 1);\n }\n \n+/* Create the VAR_DECL for __FUNCTION__ etc. ID is the name to give the\n+   decl, NAME is the initialization string and TYPE_DEP indicates whether\n+   NAME depended on the type of the function.  As we don't yet implement\n+   delayed emission of static data, we mark the decl as emitted\n+   so it is not placed in the output.  Anything using it must therefore pull\n+   out the STRING_CST initializer directly.  This does mean that these names\n+   are string merging candidates, which C99 does not permit.  */\n+\n+static tree\n+c_make_fname_decl (id, name, type_dep)\n+     tree id;\n+     const char *name;\n+     int type_dep ATTRIBUTE_UNUSED;\n+{\n+  tree decl, type, init;\n+  size_t length = strlen (name);\n+\n+  type =  build_array_type\n+          (build_qualified_type (char_type_node, TYPE_QUAL_CONST),\n+\t   build_index_type (build_int_2 (length, 0)));\n+\n+  decl = build_decl (VAR_DECL, id, type);\n+  TREE_STATIC (decl) = 1;\n+  TREE_READONLY (decl) = 1;\n+  TREE_ASM_WRITTEN (decl) = 1;\n+  DECL_SOURCE_LINE (decl) = 0;\n+  DECL_ARTIFICIAL (decl) = 1;\n+  DECL_IN_SYSTEM_HEADER (decl) = 1;\n+  DECL_IGNORED_P (decl) = 1;\n+  init = build_string (length + 1, name);\n+  TREE_TYPE (init) = type;\n+  DECL_INITIAL (decl) = init;\n+  finish_decl (pushdecl (decl), init, NULL_TREE);\n+  \n+  return decl;\n+}\n+\n /* Return a definition for a builtin function named NAME and whose data type\n    is TYPE.  TYPE should be a function type with argument types.\n    FUNCTION_CODE tells later passes how to compile calls to this function."}, {"sha": "c4af8f9e40bc0e33c68faec755c30f4321f2fe70", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce07e2d9247f692e424385deb1e8b154bf1b388/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce07e2d9247f692e424385deb1e8b154bf1b388/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2ce07e2d9247f692e424385deb1e8b154bf1b388", "patch": "@@ -1,3 +1,16 @@\n+2000-03-08  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* decl.c (cp_make_fname_decl): New function.\n+\t(wrapup_globals_for_namespace): Don't emit unused static vars.\n+\t(init_decl_processing): Remove comment about use of\n+\tarray_domain_type. Set make_fname_decl.\n+\t(cp_finish_decl): Remove __FUNCTION__ nadgering.\n+\t* semantics.c (begin_compound_stmt): Remove\n+\tcurrent_function_name_declared flagging.\n+\t(expand_stmt): Don't emit unused local statics.\n+\t* typeck.c (decay_conversion): Don't treat __FUNCTION__ decls\n+\tspecially.\n+\n 2000-03-08  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* typeck.c (convert_for_assignment): Don't look at array"}, {"sha": "63fc93aa0a802aad9e41cde4173755fff58d25a0", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 65, "deletions": 24, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce07e2d9247f692e424385deb1e8b154bf1b388/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce07e2d9247f692e424385deb1e8b154bf1b388/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2ce07e2d9247f692e424385deb1e8b154bf1b388", "patch": "@@ -182,6 +182,7 @@ static tree get_atexit_node PARAMS ((void));\n static tree get_dso_handle_node PARAMS ((void));\n static tree start_cleanup_fn PARAMS ((void));\n static void end_cleanup_fn PARAMS ((void));\n+static tree cp_make_fname_decl PARAMS ((tree, const char *, int));\n \n #if defined (DEBUG_CP_BINDING_LEVELS)\n static void indent PARAMS ((void));\n@@ -1784,7 +1785,15 @@ wrapup_globals_for_namespace (namespace, data)\n      Put them into VEC from back to front, then take out from front.  */\n \n   for (i = 0, decl = globals; i < len; i++, decl = TREE_CHAIN (decl))\n-    vec[len - i - 1] = decl;\n+    {\n+      /* Pretend we've output an unused static variable.  This ensures\n+         that the toplevel __FUNCTION__ etc won't be emitted, unless\n+         needed. */\n+      if (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl)\n+          && !TREE_USED (decl))\n+        TREE_ASM_WRITTEN (decl) = 1;\n+      vec[len - i - 1] = decl;\n+    }\n \n   if (last_time)\n     {\n@@ -6168,9 +6177,7 @@ init_decl_processing ()\n \n   /* Make a type to be the domain of a few array types\n      whose domains don't really matter.\n-     200 is small enough that it always fits in size_t\n-     and large enough that it can hold most function names for the\n-     initializations of __FUNCTION__ and __PRETTY_FUNCTION__.  */\n+     200 is small enough that it always fits in size_t.  */\n   array_domain_type = build_index_type (build_int_2 (200, 0));\n \n   /* Make a type for arrays of characters.\n@@ -6340,6 +6347,7 @@ init_decl_processing ()\n     flag_weak = 0;\n \n   /* Create the global bindings for __FUNCTION__ and __PRETTY_FUNCTION__.  */\n+  make_fname_decl = cp_make_fname_decl;\n   declare_function_name ();\n \n   /* Prepare to check format strings against argument lists.  */\n@@ -6390,6 +6398,59 @@ init_decl_processing ()\n   ggc_add_tree_root (&static_aggregates, 1);\n }\n \n+/* Create the VAR_DECL for __FUNCTION__ etc. ID is the name to give the\n+   decl, NAME is the initialization string and TYPE_DEP indicates whether\n+   NAME depended on the type of the function. We make use of that to detect\n+   __PRETTY_FUNCTION__ inside a template fn.  Because we build a tree for\n+   the function before emitting any of it, we don't need to treat the\n+   VAR_DECL specially. We can decide whether to emit it later, if it was\n+   used.  */\n+\n+static tree\n+cp_make_fname_decl (id, name, type_dep)\n+     tree id;\n+     const char *name;\n+     int type_dep;\n+{\n+  tree decl, type, init;\n+  size_t length = strlen (name);\n+  tree domain = NULL_TREE;\n+  \n+  if (!processing_template_decl)\n+    type_dep = 0;\n+  if (!type_dep)\n+    domain = build_index_type (build_int_2 (length, 0));\n+\n+  type =  build_cplus_array_type\n+          (build_qualified_type (char_type_node, TYPE_QUAL_CONST),\n+\t   domain);\n+\n+  decl = build_lang_decl (VAR_DECL, id, type);\n+  TREE_STATIC (decl) = 1;\n+  TREE_READONLY (decl) = 1;\n+  DECL_SOURCE_LINE (decl) = 0;\n+  DECL_ARTIFICIAL (decl) = 1;\n+  DECL_IN_SYSTEM_HEADER (decl) = 1;\n+  pushdecl (decl);\n+  if (processing_template_decl)\n+    decl = push_template_decl (decl);\n+  if (type_dep)\n+    {\n+      init = build (FUNCTION_NAME, type);\n+      DECL_PRETTY_FUNCTION_P (decl) = 1;\n+    }\n+  else\n+    {\n+      init = build_string (length + 1, name);\n+      TREE_TYPE (init) = type;\n+    }\n+  DECL_INITIAL (decl) = init;\n+  cp_finish_decl (decl, init, NULL_TREE, LOOKUP_ONLYCONVERTING);\n+  \n+  /* We will have to make sure we only emit this, if it is actually used. */\n+  return decl;\n+}\n+\n /* Function to print any language-specific context for an error message.  */\n \n static void\n@@ -7627,26 +7688,6 @@ cp_finish_decl (decl, init, asmspec_tree, flags)\n       return;\n     }\n \n-  /* Handling __FUNCTION__ and its ilk in a template-function requires\n-     some special processing because we are called from\n-     language-independent code.  */\n-  if (cfun && processing_template_decl\n-      && current_function_name_declared == 2)\n-    {\n-      /* Since we're in a template function, we need to\n-\t push_template_decl.  The language-independent code in\n-\t declare_hidden_char_array doesn't know to do this.  */\n-      retrofit_lang_decl (decl);\n-      decl = push_template_decl (decl);\n-\n-      if (strcmp (IDENTIFIER_POINTER (DECL_NAME (decl)),\n-\t\t  \"__PRETTY_FUNCTION__\") == 0)\n-\t{\n-\t  init = build (FUNCTION_NAME, const_string_type_node);\n-\t  DECL_PRETTY_FUNCTION_P (decl) = 1;\n-\t}\n-    }\n-\n   /* If a name was specified, get the string.  */\n   if (asmspec_tree)\n       asmspec = TREE_STRING_POINTER (asmspec_tree);"}, {"sha": "3402d3bb5f4b4d1fda91f94357ffdcef7bf77384", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce07e2d9247f692e424385deb1e8b154bf1b388/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce07e2d9247f692e424385deb1e8b154bf1b388/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=2ce07e2d9247f692e424385deb1e8b154bf1b388", "patch": "@@ -980,13 +980,8 @@ begin_compound_stmt (has_no_scope)\n       && !current_function_name_declared \n       && !has_no_scope)\n     {\n-      /* When we get callbacks from the middle-end, we need to know\n-\t we're in the midst of declaring these variables.  */\n-      current_function_name_declared = 2;\n-      /* Actually insert the declarations.  */\n-      declare_function_name ();\n-      /* And now just remember that we're all done.  */\n       current_function_name_declared = 1;\n+      declare_function_name ();\n     }\n \n   return r;\n@@ -2397,7 +2392,11 @@ expand_stmt (t)\n \t\t  expand_anon_union_decl (decl, NULL_TREE, \n \t\t\t\t\t  DECL_ANON_UNION_ELEMS (decl));\n \t      }\n-\t    else if (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl))\n+\t    else if (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl)\n+\t             && TREE_USED (decl))\n+\t      /* Do not emit unused decls. This is not just an\n+                 optimization. We really do not want to emit\n+                 __PRETTY_FUNCTION__ etc, if they're never used.  */\n \t      make_rtl_for_local_static (decl);\n \t  }\n \t  break;"}, {"sha": "868ebec6a5552d9da4f5fb1c7a09ec3e91979a71", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ce07e2d9247f692e424385deb1e8b154bf1b388/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ce07e2d9247f692e424385deb1e8b154bf1b388/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=2ce07e2d9247f692e424385deb1e8b154bf1b388", "patch": "@@ -1716,12 +1716,8 @@ decay_conversion (exp)\n   /* Replace a nonvolatile const static variable with its value.  We\n      don't do this for arrays, though; we want the address of the\n      first element of the array, not the address of the first element\n-     of its initializing constant.  We *do* replace variables that the\n-     user isn't really supposed to know about; this is a hack to deal\n-     with __PRETTY_FUNCTION__ and the like.  */\n-  else if (TREE_READONLY_DECL_P (exp)\n-\t   && (code != ARRAY_TYPE \n-\t       || (TREE_CODE (exp) == VAR_DECL && DECL_IGNORED_P (exp))))\n+     of its initializing constant.  */\n+  else if (TREE_READONLY_DECL_P (exp) && code != ARRAY_TYPE)\n     {\n       exp = decl_constant_value (exp);\n       type = TREE_TYPE (exp);"}]}