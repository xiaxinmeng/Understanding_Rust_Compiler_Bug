{"sha": "145881069e8d5a19e131b5c1922bdb2e27b708da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ1ODgxMDY5ZThkNWExOWUxMzFiNWMxOTIyYmRiMmUyN2I3MDhkYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-08-20T11:19:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-08-20T11:19:22Z"}, "message": "tree.c (WALK_SUBTREE): Call walk_tree_1.\n\n2007-08-20  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.c (WALK_SUBTREE): Call walk_tree_1.\n\t(walk_type_fields): Take lh parameter.\n\t(walk_tree): Rename to ...\n\t(walk_tree_1): ... this.  Do not call the walk_subtrees\n\tlanghook but the now passed callback.  Pass lh on recursion.\n\t(walk_tree_without_duplicates): Rename to ...\n\t(walk_tree_without_duplicates_1): ... this.  Take lh parameter\n\tand call walk_tree_1.\n\t* tree.h (walk_tree_lh): New typedef.\n\t(walk_tree_1): Declare.\n\t(walk_tree_without_duplicates_1): Likewise.\n\t(walk_tree): New define to walk_tree_1 with NULL lh parameter.\n\t(walk_tree_without_duplicates): New define to\n\twalk_tree_without_duplicates_1 with NULL lh parameter.\n\t* langhooks.c (lhd_tree_inlining_walk_subtrees): Remove.\n\t* langhooks.h (lang_hooks_for_tree_inlining): Remove walk_subtrees\n\tlanghook.\n\t* langhooks-def.h (lhd_tree_inlining_walk_subtrees): Remove.\n\t(LANG_HOOKS_TREE_INLINING_WALK_SUBTREES): Likewise.\n\t(LANG_HOOKS_TREE_INLINING_INITIALIZER): Remove walk_subtrees\n\tinitializer.\n\n\tjava/\n\t* lang.c (java_tree_inlining_walk_subtrees): Remove.\n\t(LANG_HOOKS_TREE_INLINING_WALK_SUBTREES): Remove.\n\n\tcp/\n\t* cp-objcp-common.h (LANG_HOOKS_TREE_INLINING_WALK_SUBTREES):\n\tRemove define.\n\t* tree.h (cp_walk_tree): New define to walk_tree_1 with\n\tcp_walk_subtrees lh parameter.\n\t(cp_walk_tree_without_duplicates): New define to\n\twalk_tree_without_duplicates_1 with cp_walk_subtrees lh parameter.\n\t* tree.c (count_trees): Call\n\tcp_walk_tree_without_duplicates.\n\t(verify_stmt_tree): Call cp_walk_tree.\n\t(break_out_target_exprs): Likewise.\n\t(WALK_SUBTREE): Likewise.\n\t* cp-gimplify.c (cp_genericize): Likewise.\n\t* cp-pt.c (find_parameter_packs_r): Likewise.\n\t(uses_parameter_packs): Likewise.\n\t(make_pack_expansion): Likewise.\n\t(check_for_bare_parameter_packs): Likewise.\n\t(for_each_template_parm): Likewise.\n\t* decl.c (check_default_argument): Call\n\tcp_walk_tree_without_duplicates.\n\t* except.c (build_throw): Likewise.\n\t* decl2.c (type_visibility): Likewise.\n\t* semantics.c (expand_or_defer_fn): Likewise.\n\t(finalize_nrv): Call cp_walk_tree.\n\nFrom-SVN: r127642", "tree": {"sha": "86faaa7d5f8b59c06113801b45f3d5eae539e5f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86faaa7d5f8b59c06113801b45f3d5eae539e5f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/145881069e8d5a19e131b5c1922bdb2e27b708da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/145881069e8d5a19e131b5c1922bdb2e27b708da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/145881069e8d5a19e131b5c1922bdb2e27b708da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/145881069e8d5a19e131b5c1922bdb2e27b708da/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "412bbe81d92ba9c32a2ebd523391bb8f6637a2f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/412bbe81d92ba9c32a2ebd523391bb8f6637a2f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/412bbe81d92ba9c32a2ebd523391bb8f6637a2f7"}], "stats": {"total": 237, "additions": 118, "deletions": 119}, "files": [{"sha": "2e090c1056bd457c481be10830e36f4d635a58b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=145881069e8d5a19e131b5c1922bdb2e27b708da", "patch": "@@ -1,3 +1,27 @@\n+2007-08-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.c (WALK_SUBTREE): Call walk_tree_1.\n+\t(walk_type_fields): Take lh parameter.\n+\t(walk_tree): Rename to ...\n+\t(walk_tree_1): ... this.  Do not call the walk_subtrees\n+\tlanghook but the now passed callback.  Pass lh on recursion.\n+\t(walk_tree_without_duplicates): Rename to ...\n+\t(walk_tree_without_duplicates_1): ... this.  Take lh parameter\n+\tand call walk_tree_1.\n+\t* tree.h (walk_tree_lh): New typedef.\n+\t(walk_tree_1): Declare.\n+\t(walk_tree_without_duplicates_1): Likewise.\n+\t(walk_tree): New define to walk_tree_1 with NULL lh parameter.\n+\t(walk_tree_without_duplicates): New define to\n+\twalk_tree_without_duplicates_1 with NULL lh parameter.\n+\t* langhooks.c (lhd_tree_inlining_walk_subtrees): Remove.\n+\t* langhooks.h (lang_hooks_for_tree_inlining): Remove walk_subtrees\n+\tlanghook.\n+\t* langhooks-def.h (lhd_tree_inlining_walk_subtrees): Remove.\n+\t(LANG_HOOKS_TREE_INLINING_WALK_SUBTREES): Likewise.\n+\t(LANG_HOOKS_TREE_INLINING_INITIALIZER): Remove walk_subtrees\n+\tinitializer.\n+\n 2007-08-20  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR middle-end/30564"}, {"sha": "d9dbda9e988c958565d7fe1a81f8fd644674368a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=145881069e8d5a19e131b5c1922bdb2e27b708da", "patch": "@@ -1,3 +1,29 @@\n+2007-08-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* cp-objcp-common.h (LANG_HOOKS_TREE_INLINING_WALK_SUBTREES):\n+\tRemove define.\n+\t* tree.h (cp_walk_tree): New define to walk_tree_1 with\n+\tcp_walk_subtrees lh parameter.\n+\t(cp_walk_tree_without_duplicates): New define to\n+\twalk_tree_without_duplicates_1 with cp_walk_subtrees lh parameter.\n+\t* tree.c (count_trees): Call\n+\tcp_walk_tree_without_duplicates.\n+\t(verify_stmt_tree): Call cp_walk_tree.\n+\t(break_out_target_exprs): Likewise.\n+\t(WALK_SUBTREE): Likewise.\n+\t* cp-gimplify.c (cp_genericize): Likewise.\n+\t* cp-pt.c (find_parameter_packs_r): Likewise.\n+\t(uses_parameter_packs): Likewise.\n+\t(make_pack_expansion): Likewise.\n+\t(check_for_bare_parameter_packs): Likewise.\n+\t(for_each_template_parm): Likewise.\n+\t* decl.c (check_default_argument): Call\n+\tcp_walk_tree_without_duplicates.\n+\t* except.c (build_throw): Likewise.\n+\t* decl2.c (type_visibility): Likewise.\n+\t* semantics.c (expand_or_defer_fn): Likewise.\n+\t(finalize_nrv): Call cp_walk_tree.\n+\n 2007-08-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/33025"}, {"sha": "6fcc9b02e400a0f31c7717ff75a80aeb0eb23812", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=145881069e8d5a19e131b5c1922bdb2e27b708da", "patch": "@@ -746,7 +746,7 @@ cp_genericize (tree fndecl)\n   /* We do want to see every occurrence of the parms, so we can't just use\n      walk_tree's hash functionality.  */\n   p_set = pointer_set_create ();\n-  walk_tree (&DECL_SAVED_TREE (fndecl), cp_genericize_r, p_set, NULL);\n+  cp_walk_tree (&DECL_SAVED_TREE (fndecl), cp_genericize_r, p_set, NULL);\n   pointer_set_destroy (p_set);\n \n   /* Do everything else.  */"}, {"sha": "9cff31b92ce4d87ab9c8a6850dab5b0c6f2a38ef", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=145881069e8d5a19e131b5c1922bdb2e27b708da", "patch": "@@ -104,9 +104,6 @@ extern tree objcp_tsubst_copy_and_build (tree, tree, tsubst_flags_t,\n #undef LANG_HOOKS_ATTRIBUTE_TABLE\n #define LANG_HOOKS_ATTRIBUTE_TABLE cxx_attribute_table\n \n-#undef LANG_HOOKS_TREE_INLINING_WALK_SUBTREES\n-#define LANG_HOOKS_TREE_INLINING_WALK_SUBTREES \\\n-  cp_walk_subtrees\n #undef LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN\n #define LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN \\\n   cp_cannot_inline_tree_fn"}, {"sha": "c35bb9518b96408bc14891cd30574a7d4ee4d707", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=145881069e8d5a19e131b5c1922bdb2e27b708da", "patch": "@@ -4736,6 +4736,10 @@ extern void verify_stmt_tree\t\t\t(tree);\n extern linkage_kind decl_linkage\t\t(tree);\n extern tree cp_walk_subtrees (tree*, int*, walk_tree_fn,\n \t\t\t      void*, struct pointer_set_t*);\n+#define cp_walk_tree(a,b,c,d) \\\n+\twalk_tree_1 (a, b, c, d, cp_walk_subtrees)\n+#define cp_walk_tree_without_duplicates(a,b,c) \\\n+\twalk_tree_without_duplicates_1 (a, b, c, cp_walk_subtrees)\n extern int cp_cannot_inline_tree_fn\t\t(tree*);\n extern int cp_auto_var_in_fn_p\t\t\t(const_tree, const_tree);\n extern tree fold_if_not_in_template\t\t(tree);"}, {"sha": "a890ee1292e69b0ce5350d69b30857e6419b16a6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=145881069e8d5a19e131b5c1922bdb2e27b708da", "patch": "@@ -9061,8 +9061,7 @@ check_default_argument (tree decl, tree arg)\n \n      The keyword `this' shall not be used in a default argument of a\n      member function.  */\n-  var = walk_tree_without_duplicates (&arg, local_variable_p_walkfn,\n-\t\t\t\t      NULL);\n+  var = cp_walk_tree_without_duplicates (&arg, local_variable_p_walkfn, NULL);\n   if (var)\n     {\n       error (\"default argument %qE uses local variable %qD\", arg, var);"}, {"sha": "97a03c7eb6d36eb42e0c0f088b58b6170436b9fd", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=145881069e8d5a19e131b5c1922bdb2e27b708da", "patch": "@@ -1561,7 +1561,7 @@ static int\n type_visibility (tree type)\n {\n   int vis = VISIBILITY_DEFAULT;\n-  walk_tree_without_duplicates (&type, min_vis_r, &vis);\n+  cp_walk_tree_without_duplicates (&type, min_vis_r, &vis);\n   return vis;\n }\n "}, {"sha": "081dd0fa42211db2dd21439a79c56a7de4ec133c", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=145881069e8d5a19e131b5c1922bdb2e27b708da", "patch": "@@ -782,7 +782,7 @@ build_throw (tree exp)\n \t     we don't have to do them during unwinding.  But first wrap\n \t     them in MUST_NOT_THROW_EXPR, since they are run after the\n \t     exception object is initialized.  */\n-\t  walk_tree_without_duplicates (&temp_expr, wrap_cleanups_r, 0);\n+\t  cp_walk_tree_without_duplicates (&temp_expr, wrap_cleanups_r, 0);\n \t  exp = build2 (COMPOUND_EXPR, TREE_TYPE (exp), temp_expr, exp);\n \t  exp = build1 (CLEANUP_POINT_EXPR, TREE_TYPE (exp), exp);\n \t}"}, {"sha": "3f218e6248a95bc456fbf203513001f0218fa6d7", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=145881069e8d5a19e131b5c1922bdb2e27b708da", "patch": "@@ -2391,7 +2391,7 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n   if (TYPE_P (t))\n     {\n       tree context = TYPE_CONTEXT (t);\n-      walk_tree (&context, &find_parameter_packs_r, ppd, ppd->visited);\n+      cp_walk_tree (&context, &find_parameter_packs_r, ppd, ppd->visited);\n     }\n \n   /* This switch statement will return immediately if we don't find a\n@@ -2405,8 +2405,8 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n \n     case BOUND_TEMPLATE_TEMPLATE_PARM:\n       /* Check the template arguments.  */\n-      walk_tree (&TYPE_TI_ARGS (t), &find_parameter_packs_r, ppd, \n-\t\t ppd->visited);\n+      cp_walk_tree (&TYPE_TI_ARGS (t), &find_parameter_packs_r, ppd, \n+\t\t    ppd->visited);\n \n       /* Dig out the underlying TEMPLATE_TEMPLATE_PARM.  */\n       t = TYPE_TI_TEMPLATE (t);\n@@ -2442,7 +2442,7 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n       if (TYPE_TEMPLATE_INFO (t))\n         {\n           tree args = TREE_VALUE (TYPE_TEMPLATE_INFO (t));\n-          walk_tree (&args, &find_parameter_packs_r, ppd, ppd->visited);\n+          cp_walk_tree (&args, &find_parameter_packs_r, ppd, ppd->visited);\n         }\n \n       *walk_subtrees = 0;\n@@ -2462,8 +2462,8 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n       return NULL_TREE;\n \n     case INTEGER_TYPE:\n-      walk_tree (&TYPE_MAX_VALUE (t), &find_parameter_packs_r, \n-\t\t ppd, ppd->visited);\n+      cp_walk_tree (&TYPE_MAX_VALUE (t), &find_parameter_packs_r, \n+\t\t    ppd, ppd->visited);\n       *walk_subtrees = 0;\n       return NULL_TREE;\n \n@@ -2485,7 +2485,7 @@ uses_parameter_packs (tree t)\n   struct find_parameter_pack_data ppd;\n   ppd.parameter_packs = &parameter_packs;\n   ppd.visited = pointer_set_create ();\n-  walk_tree (&t, &find_parameter_packs_r, &ppd, ppd.visited);\n+  cp_walk_tree (&t, &find_parameter_packs_r, &ppd, ppd.visited);\n   pointer_set_destroy (ppd.visited);\n   return parameter_packs != NULL_TREE;\n }\n@@ -2535,8 +2535,8 @@ make_pack_expansion (tree arg)\n          class expansion.  */\n       ppd.visited = pointer_set_create ();\n       ppd.parameter_packs = &parameter_packs;\n-      walk_tree (&TREE_PURPOSE (arg), &find_parameter_packs_r, \n-                 &ppd, ppd.visited);\n+      cp_walk_tree (&TREE_PURPOSE (arg), &find_parameter_packs_r, \n+                    &ppd, ppd.visited);\n \n       if (parameter_packs == NULL_TREE)\n         {\n@@ -2553,8 +2553,8 @@ make_pack_expansion (tree arg)\n             {\n               /* Determine which parameter packs will be expanded in this\n                  argument.  */\n-              walk_tree (&TREE_VALUE (value), &find_parameter_packs_r, \n-                         &ppd, ppd.visited);\n+              cp_walk_tree (&TREE_VALUE (value), &find_parameter_packs_r, \n+                            &ppd, ppd.visited);\n             }\n         }\n \n@@ -2592,7 +2592,7 @@ make_pack_expansion (tree arg)\n   /* Determine which parameter packs will be expanded.  */\n   ppd.parameter_packs = &parameter_packs;\n   ppd.visited = pointer_set_create ();\n-  walk_tree (&arg, &find_parameter_packs_r, &ppd, ppd.visited);\n+  cp_walk_tree (&arg, &find_parameter_packs_r, &ppd, ppd.visited);\n   pointer_set_destroy (ppd.visited);\n \n   /* Make sure we found some parameter packs.  */\n@@ -2637,7 +2637,7 @@ check_for_bare_parameter_packs (tree t)\n \n   ppd.parameter_packs = &parameter_packs;\n   ppd.visited = pointer_set_create ();\n-  walk_tree (&t, &find_parameter_packs_r, &ppd, ppd.visited);\n+  cp_walk_tree (&t, &find_parameter_packs_r, &ppd, ppd.visited);\n   pointer_set_destroy (ppd.visited);\n \n   if (parameter_packs) \n@@ -5896,10 +5896,10 @@ for_each_template_parm (tree t, tree_fn_t fn, void* data,\n     pfd.visited = visited;\n   else\n     pfd.visited = pointer_set_create ();\n-  result = walk_tree (&t,\n-\t\t      for_each_template_parm_r,\n-\t\t      &pfd,\n-\t\t      pfd.visited) != NULL_TREE;\n+  result = cp_walk_tree (&t,\n+\t\t         for_each_template_parm_r,\n+\t\t         &pfd,\n+\t\t         pfd.visited) != NULL_TREE;\n \n   /* Clean up.  */\n   if (!visited)"}, {"sha": "176e6bea11a694e5a8766f3fc37317e0b1d4b8bb", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=145881069e8d5a19e131b5c1922bdb2e27b708da", "patch": "@@ -3184,9 +3184,9 @@ expand_or_defer_fn (tree fn)\n     }\n \n   /* Replace AGGR_INIT_EXPRs with appropriate CALL_EXPRs.  */\n-  walk_tree_without_duplicates (&DECL_SAVED_TREE (fn),\n-\t\t\t\tsimplify_aggr_init_exprs_r,\n-\t\t\t\tNULL);\n+  cp_walk_tree_without_duplicates (&DECL_SAVED_TREE (fn),\n+\t\t\t\t   simplify_aggr_init_exprs_r,\n+\t\t\t\t   NULL);\n \n   /* If this is a constructor or destructor body, we have to clone\n      it.  */\n@@ -3336,7 +3336,7 @@ finalize_nrv (tree *tp, tree var, tree result)\n   data.var = var;\n   data.result = result;\n   data.visited = htab_create (37, htab_hash_pointer, htab_eq_pointer, NULL);\n-  walk_tree (tp, finalize_nrv_r, &data, 0);\n+  cp_walk_tree (tp, finalize_nrv_r, &data, 0);\n   htab_delete (data.visited);\n }\n \f"}, {"sha": "3edf39f263ef30456a9f06d6b8928f8ec41d9c80", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=145881069e8d5a19e131b5c1922bdb2e27b708da", "patch": "@@ -1282,7 +1282,7 @@ int\n count_trees (tree t)\n {\n   int n_trees = 0;\n-  walk_tree_without_duplicates (&t, count_trees_r, &n_trees);\n+  cp_walk_tree_without_duplicates (&t, count_trees_r, &n_trees);\n   return n_trees;\n }\n \n@@ -1319,7 +1319,7 @@ verify_stmt_tree (tree t)\n {\n   htab_t statements;\n   statements = htab_create (37, htab_hash_pointer, htab_eq_pointer, NULL);\n-  walk_tree (&t, verify_stmt_tree_r, &statements, NULL);\n+  cp_walk_tree (&t, verify_stmt_tree_r, &statements, NULL);\n   htab_delete (statements);\n }\n \n@@ -1521,8 +1521,8 @@ break_out_target_exprs (tree t)\n     target_remap = splay_tree_new (splay_tree_compare_pointers,\n \t\t\t\t   /*splay_tree_delete_key_fn=*/NULL,\n \t\t\t\t   /*splay_tree_delete_value_fn=*/NULL);\n-  walk_tree (&t, bot_manip, target_remap, NULL);\n-  walk_tree (&t, bot_replace, target_remap, NULL);\n+  cp_walk_tree (&t, bot_manip, target_remap, NULL);\n+  cp_walk_tree (&t, bot_replace, target_remap, NULL);\n \n   if (!--target_remap_count)\n     {\n@@ -2290,7 +2290,7 @@ cp_walk_subtrees (tree *tp, int *walk_subtrees_p, walk_tree_fn func,\n #define WALK_SUBTREE(NODE)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      result = walk_tree (&(NODE), func, data, pset);\t\\\n+      result = cp_walk_tree (&(NODE), func, data, pset);\t\\\n       if (result) goto out;\t\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n   while (0)"}, {"sha": "693053b0c07f20546211c7cdef73a387d941cc85", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=145881069e8d5a19e131b5c1922bdb2e27b708da", "patch": "@@ -1,3 +1,8 @@\n+2007-08-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* lang.c (java_tree_inlining_walk_subtrees): Remove.\n+\t(LANG_HOOKS_TREE_INLINING_WALK_SUBTREES): Remove.\n+\n 2007-08-17  Tom Tromey  <tromey@redhat.com>\n \n \t* typeck.c (find_method_in_interfaces): Update."}, {"sha": "dc685eb75dca871667c0be057d64b750648b4489", "filename": "gcc/java/lang.c", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=145881069e8d5a19e131b5c1922bdb2e27b708da", "patch": "@@ -55,8 +55,6 @@ static int java_handle_option (size_t scode, const char *arg, int value);\n static void put_decl_string (const char *, int);\n static void put_decl_node (tree);\n static void java_print_error_function (diagnostic_context *, const char *);\n-static tree java_tree_inlining_walk_subtrees (tree *, int *, walk_tree_fn,\n-\t\t\t\t\t      void *, struct pointer_set_t *);\n static int merge_init_test_initialization (void * *, void *);\n static int inline_init_test_initialization (void * *, void *);\n static bool java_dump_tree (void *, tree);\n@@ -188,9 +186,6 @@ struct language_function GTY(())\n #undef LANG_HOOKS_GIMPLIFY_EXPR\n #define LANG_HOOKS_GIMPLIFY_EXPR java_gimplify_expr\n \n-#undef LANG_HOOKS_TREE_INLINING_WALK_SUBTREES\n-#define LANG_HOOKS_TREE_INLINING_WALK_SUBTREES java_tree_inlining_walk_subtrees\n-\n #undef LANG_HOOKS_DECL_OK_FOR_SIBCALL\n #define LANG_HOOKS_DECL_OK_FOR_SIBCALL java_decl_ok_for_sibcall\n \n@@ -688,45 +683,6 @@ decl_constant_value (tree decl)\n   return decl;\n }\n \n-/* Walk the language specific tree nodes during inlining.  */\n-\n-static tree\n-java_tree_inlining_walk_subtrees (tree *tp ATTRIBUTE_UNUSED,\n-\t\t\t\t  int *subtrees ATTRIBUTE_UNUSED,\n-\t\t\t\t  walk_tree_fn func ATTRIBUTE_UNUSED,\n-\t\t\t\t  void *data ATTRIBUTE_UNUSED,\n-\t\t\t\t  struct pointer_set_t *pset ATTRIBUTE_UNUSED)\n-{\n-  enum tree_code code;\n-  tree result;\n-\n-#define WALK_SUBTREE(NODE)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      result = walk_tree (&(NODE), func, data, pset);\t\\\n-      if (result)\t\t\t\t\t\\\n-\treturn result;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-  tree t = *tp;\n-  if (!t)\n-    return NULL_TREE;\n-\n-  code = TREE_CODE (t);\n-  switch (code)\n-    {\n-    case BLOCK:\n-      WALK_SUBTREE (BLOCK_EXPR_BODY (t));\n-      return NULL_TREE;\n-\n-    default:\n-      return NULL_TREE;\n-    }\n-\n-  #undef WALK_SUBTREE\n-}\n-\n /* Every call to a static constructor has an associated boolean\n    variable which is in the outermost scope of the calling method.\n    This variable is used to avoid multiple calls to the static"}, {"sha": "074e615ba08cff3dfb33306b477b1987655f3b57", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=145881069e8d5a19e131b5c1922bdb2e27b708da", "patch": "@@ -68,8 +68,6 @@ extern tree lhd_expr_to_decl (tree, bool *, bool *, bool *);\n extern tree lhd_builtin_function (tree decl);\n \n /* Declarations of default tree inlining hooks.  */\n-extern tree lhd_tree_inlining_walk_subtrees (tree *, int *, walk_tree_fn,\n-\t\t\t\t\t     void *, struct pointer_set_t*);\n extern int lhd_tree_inlining_cannot_inline_tree_fn (tree *);\n extern int lhd_tree_inlining_disregard_inline_limits (const_tree);\n extern int lhd_tree_inlining_auto_var_in_fn_p (const_tree, const_tree);\n@@ -135,7 +133,6 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n #define LANG_HOOKS_FORMAT_ATTRIBUTE_TABLE\tNULL\n \n /* Tree inlining hooks.  */\n-#define LANG_HOOKS_TREE_INLINING_WALK_SUBTREES lhd_tree_inlining_walk_subtrees\n #define LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN \\\n   lhd_tree_inlining_cannot_inline_tree_fn\n #define LANG_HOOKS_TREE_INLINING_DISREGARD_INLINE_LIMITS \\\n@@ -146,7 +143,6 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n   hook_bool_tree_tree_false\n \n #define LANG_HOOKS_TREE_INLINING_INITIALIZER { \\\n-  LANG_HOOKS_TREE_INLINING_WALK_SUBTREES, \\\n   LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN, \\\n   LANG_HOOKS_TREE_INLINING_DISREGARD_INLINE_LIMITS, \\\n   LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P, \\"}, {"sha": "8260b3135e3193df2ad0bad61e911f66c0066798", "filename": "gcc/langhooks.c", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=145881069e8d5a19e131b5c1922bdb2e27b708da", "patch": "@@ -276,27 +276,6 @@ lhd_types_compatible_p (tree x, tree y)\n   return TYPE_MAIN_VARIANT (x) == TYPE_MAIN_VARIANT (y);\n }\n \n-/* lang_hooks.tree_inlining.walk_subtrees is called by walk_tree()\n-   after handling common cases, but before walking code-specific\n-   sub-trees.  If this hook is overridden for a language, it should\n-   handle language-specific tree codes, as well as language-specific\n-   information associated to common tree codes.  If a tree node is\n-   completely handled within this function, it should set *SUBTREES to\n-   0, so that generic handling isn't attempted.  The generic handling\n-   cannot deal with language-specific tree codes, so make sure it is\n-   set properly.  Both SUBTREES and *SUBTREES is guaranteed to be\n-   nonzero when the function is called.  */\n-\n-tree\n-lhd_tree_inlining_walk_subtrees (tree *tp ATTRIBUTE_UNUSED,\n-\t\t\t\t int *subtrees ATTRIBUTE_UNUSED,\n-\t\t\t\t walk_tree_fn func ATTRIBUTE_UNUSED,\n-\t\t\t\t void *data ATTRIBUTE_UNUSED,\n-\t\t\t\t struct pointer_set_t *pset ATTRIBUTE_UNUSED)\n-{\n-  return NULL_TREE;\n-}\n-\n /* lang_hooks.tree_inlining.cannot_inline_tree_fn is called to\n    determine whether there are language-specific reasons for not\n    inlining a given function.  */"}, {"sha": "299ec8f838ad4b59ef62ae964bc23f96cabf7f6b", "filename": "gcc/langhooks.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=145881069e8d5a19e131b5c1922bdb2e27b708da", "patch": "@@ -35,9 +35,6 @@ typedef void (*lang_print_tree_hook) (FILE *, tree, int indent);\n \n struct lang_hooks_for_tree_inlining\n {\n-  tree (*walk_subtrees) (tree *, int *,\n-\t\t\t tree (*) (tree *, int *, void *),\n-\t\t\t void *, struct pointer_set_t*);\n   int (*cannot_inline_tree_fn) (tree *);\n   int (*disregard_inline_limits) (const_tree);\n   int (*auto_var_in_fn_p) (const_tree, const_tree);"}, {"sha": "61f17de706deaccbfb443aff2af252e84a306b40", "filename": "gcc/tree.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=145881069e8d5a19e131b5c1922bdb2e27b708da", "patch": "@@ -8233,7 +8233,7 @@ num_ending_zeros (const_tree x)\n #define WALK_SUBTREE(NODE)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      result = walk_tree (&(NODE), func, data, pset);\t\\\n+      result = walk_tree_1 (&(NODE), func, data, pset, lh);\t\\\n       if (result)\t\t\t\t\t\\\n \treturn result;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n@@ -8245,7 +8245,7 @@ num_ending_zeros (const_tree x)\n \n static tree\n walk_type_fields (tree type, walk_tree_fn func, void *data,\n-\t\t  struct pointer_set_t *pset)\n+\t\t  struct pointer_set_t *pset, walk_tree_lh lh)\n {\n   tree result = NULL_TREE;\n \n@@ -8325,7 +8325,8 @@ walk_type_fields (tree type, walk_tree_fn func, void *data,\n    and to avoid visiting a node more than once.  */\n \n tree\n-walk_tree (tree *tp, walk_tree_fn func, void *data, struct pointer_set_t *pset)\n+walk_tree_1 (tree *tp, walk_tree_fn func, void *data,\n+\t     struct pointer_set_t *pset, walk_tree_lh lh)\n {\n   enum tree_code code;\n   int walk_subtrees;\n@@ -8372,10 +8373,12 @@ walk_tree (tree *tp, walk_tree_fn func, void *data, struct pointer_set_t *pset)\n \treturn NULL_TREE;\n     }\n \n-  result = lang_hooks.tree_inlining.walk_subtrees (tp, &walk_subtrees, func,\n-\t\t\t\t\t\t   data, pset);\n-  if (result || !walk_subtrees)\n-    return result;\n+  if (lh)\n+    {\n+      result = (*lh) (tp, &walk_subtrees, func, data, pset);\n+      if (result || !walk_subtrees)\n+        return result;\n+    }\n \n   switch (code)\n     {\n@@ -8529,7 +8532,7 @@ walk_tree (tree *tp, walk_tree_fn func, void *data, struct pointer_set_t *pset)\n \t  if (result || !walk_subtrees)\n \t    return result;\n \n-\t  result = walk_type_fields (*type_p, func, data, pset);\n+\t  result = walk_type_fields (*type_p, func, data, pset, lh);\n \t  if (result)\n \t    return result;\n \n@@ -8594,7 +8597,7 @@ walk_tree (tree *tp, walk_tree_fn func, void *data, struct pointer_set_t *pset)\n \t}\n       /* If this is a type, walk the needed fields in the type.  */\n       else if (TYPE_P (*tp))\n-\treturn walk_type_fields (*tp, func, data, pset);\n+\treturn walk_type_fields (*tp, func, data, pset, lh);\n       break;\n     }\n \n@@ -8608,13 +8611,14 @@ walk_tree (tree *tp, walk_tree_fn func, void *data, struct pointer_set_t *pset)\n /* Like walk_tree, but does not walk duplicate nodes more than once.  */\n \n tree\n-walk_tree_without_duplicates (tree *tp, walk_tree_fn func, void *data)\n+walk_tree_without_duplicates_1 (tree *tp, walk_tree_fn func, void *data,\n+\t\t\t\twalk_tree_lh lh)\n {\n   tree result;\n   struct pointer_set_t *pset;\n \n   pset = pointer_set_create ();\n-  result = walk_tree (tp, func, data, pset);\n+  result = walk_tree_1 (tp, func, data, pset, lh);\n   pointer_set_destroy (pset);\n   return result;\n }"}, {"sha": "b8e960b4640a8396381a7f9da808fdfb4f11a2eb", "filename": "gcc/tree.h", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/145881069e8d5a19e131b5c1922bdb2e27b708da/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=145881069e8d5a19e131b5c1922bdb2e27b708da", "patch": "@@ -5026,8 +5026,20 @@ struct pointer_set_t;\n /* The type of a callback function for walking over tree structure.  */\n \n typedef tree (*walk_tree_fn) (tree *, int *, void *);\n-extern tree walk_tree (tree*, walk_tree_fn, void*, struct pointer_set_t*);\n-extern tree walk_tree_without_duplicates (tree*, walk_tree_fn, void*);\n+\n+/* The type of a callback function that represents a custom walk_tree.  */\n+\n+typedef tree (*walk_tree_lh) (tree *, int *, tree (*) (tree *, int *, void *),\n+\t\t\t      void *, struct pointer_set_t*);\n+\n+extern tree walk_tree_1 (tree*, walk_tree_fn, void*, struct pointer_set_t*,\n+\t\t\t walk_tree_lh);\n+extern tree walk_tree_without_duplicates_1 (tree*, walk_tree_fn, void*,\n+\t\t\t\t\t    walk_tree_lh);\n+#define walk_tree(a,b,c,d) \\\n+\twalk_tree_1 (a, b, c, d, NULL)\n+#define walk_tree_without_duplicates(a,b,c) \\\n+\twalk_tree_without_duplicates_1 (a, b, c, NULL)\n \n /* Assign the RTX to declaration.  */\n "}]}