{"sha": "6a4bad955f8ab028190bbb4d3cf3c00721c26bfc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE0YmFkOTU1ZjhhYjAyODE5MGJiYjRkM2NmM2MwMDcyMWMyNmJmYw==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2014-12-05T11:06:26Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2014-12-05T11:06:26Z"}, "message": "cgraph.h (cgraph_node): New method expand_all_artificial_thunks.\n\n2014-12-05  Martin Jambor  <mjambor@suse.cz>\n\n\t* cgraph.h (cgraph_node): New method expand_all_artificial_thunks.\n\t(cgraph_edge): New method redirect_callee_duplicating_thunks.\n\t* cgraphclones.c (duplicate_thunk_for_node): Donot expand newly\n\tcreated thunks.\n\t(redirect_edge_duplicating_thunks): Turned into edge method\n\tredirect_callee_duplicating_thunks.\n\t(cgraph_node::expand_all_artificial_thunks): New method.\n\t(create_clone): Call expand_all_artificial_thunks.\n\t* ipa-cp.c (perhaps_add_new_callers): Call\n\tredirect_callee_duplicating_thunks instead of redirect_callee.\n\tAlso call expand_all_artificial_thunks.\n\nFrom-SVN: r218417", "tree": {"sha": "5535b89bdfdb34a70839578dacb6e9d89a13a6df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5535b89bdfdb34a70839578dacb6e9d89a13a6df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a4bad955f8ab028190bbb4d3cf3c00721c26bfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a4bad955f8ab028190bbb4d3cf3c00721c26bfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a4bad955f8ab028190bbb4d3cf3c00721c26bfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a4bad955f8ab028190bbb4d3cf3c00721c26bfc/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "612b47110ab93289e9d7fb4751e9f46fbd7d3485", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/612b47110ab93289e9d7fb4751e9f46fbd7d3485", "html_url": "https://github.com/Rust-GCC/gccrs/commit/612b47110ab93289e9d7fb4751e9f46fbd7d3485"}], "stats": {"total": 69, "additions": 57, "deletions": 12}, "files": [{"sha": "c0ee60bf9b3f3394e2c9af55e3a5d5162673e92b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4bad955f8ab028190bbb4d3cf3c00721c26bfc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4bad955f8ab028190bbb4d3cf3c00721c26bfc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a4bad955f8ab028190bbb4d3cf3c00721c26bfc", "patch": "@@ -1,3 +1,17 @@\n+2014-12-05  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* cgraph.h (cgraph_node): New method expand_all_artificial_thunks.\n+\t(cgraph_edge): New method redirect_callee_duplicating_thunks.\n+\t* cgraphclones.c (duplicate_thunk_for_node): Donot expand newly\n+\tcreated thunks.\n+\t(redirect_edge_duplicating_thunks): Turned into edge method\n+\tredirect_callee_duplicating_thunks.\n+\t(cgraph_node::expand_all_artificial_thunks): New method.\n+\t(create_clone): Call expand_all_artificial_thunks.\n+\t* ipa-cp.c (perhaps_add_new_callers): Call\n+\tredirect_callee_duplicating_thunks instead of redirect_callee.\n+\tAlso call expand_all_artificial_thunks.\n+\n 2014-12-05  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \tPR target/64056"}, {"sha": "54ee748941671827dc54f85e955532fc7478d1a3", "filename": "gcc/cgraph.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4bad955f8ab028190bbb4d3cf3c00721c26bfc/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4bad955f8ab028190bbb4d3cf3c00721c26bfc/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=6a4bad955f8ab028190bbb4d3cf3c00721c26bfc", "patch": "@@ -908,6 +908,10 @@ struct GTY((tag (\"SYMTAB_FUNCTION\"))) cgraph_node : public symtab_node {\n      thunks that are not lowered.  */\n   bool expand_thunk (bool output_asm_thunks, bool force_gimple_thunk);\n \n+  /*  Call expand_thunk on all callers that are thunks and analyze those\n+      nodes that were expanded.  */\n+  void expand_all_artificial_thunks ();\n+\n   /* Assemble thunks and aliases associated to node.  */\n   void assemble_thunks_and_aliases (void);\n \n@@ -1477,6 +1481,12 @@ struct GTY((chain_next (\"%h.next_caller\"), chain_prev (\"%h.prev_caller\"),\n      call expression.  */\n   void redirect_callee (cgraph_node *n);\n \n+  /* If the edge does not lead to a thunk, simply redirect it to N.  Otherwise\n+     create one or more equivalent thunks for N and redirect E to the first in\n+     the chain.  Note that it is then necessary to call\n+     n->expand_all_artificial_thunks once all callers are redirected.  */\n+  void redirect_callee_duplicating_thunks (cgraph_node *n);\n+\n   /* Make an indirect edge with an unknown callee an ordinary edge leading to\n      CALLEE.  DELTA is an integer constant that is to be added to the this\n      pointer (first parameter) to compensate for skipping"}, {"sha": "1bf0477a48cd60fd11b25799f26a4c94022dab5b", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4bad955f8ab028190bbb4d3cf3c00721c26bfc/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4bad955f8ab028190bbb4d3cf3c00721c26bfc/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=6a4bad955f8ab028190bbb4d3cf3c00721c26bfc", "patch": "@@ -370,28 +370,47 @@ duplicate_thunk_for_node (cgraph_node *thunk, cgraph_node *node)\n \t\t\t\t\t\t  CGRAPH_FREQ_BASE);\n   e->call_stmt_cannot_inline_p = true;\n   symtab->call_edge_duplication_hooks (thunk->callees, e);\n-  if (new_thunk->expand_thunk (false, false))\n-    {\n-      new_thunk->thunk.thunk_p = false;\n-      new_thunk->analyze ();\n-    }\n-\n   symtab->call_cgraph_duplication_hooks (thunk, new_thunk);\n   return new_thunk;\n }\n \n /* If E does not lead to a thunk, simply redirect it to N.  Otherwise create\n    one or more equivalent thunks for N and redirect E to the first in the\n-   chain.  */\n+   chain.  Note that it is then necessary to call\n+   n->expand_all_artificial_thunks once all callers are redirected.  */\n \n void\n-redirect_edge_duplicating_thunks (cgraph_edge *e, cgraph_node *n)\n+cgraph_edge::redirect_callee_duplicating_thunks (cgraph_node *n)\n {\n-  cgraph_node *orig_to = e->callee->ultimate_alias_target ();\n+  cgraph_node *orig_to = callee->ultimate_alias_target ();\n   if (orig_to->thunk.thunk_p)\n     n = duplicate_thunk_for_node (orig_to, n);\n \n-  e->redirect_callee (n);\n+  redirect_callee (n);\n+}\n+\n+/* Call expand_thunk on all callers that are thunks and if analyze those nodes\n+   that were expanded.  */\n+\n+void\n+cgraph_node::expand_all_artificial_thunks ()\n+{\n+  cgraph_edge *e;\n+  for (e = callers; e;)\n+    if (e->caller->thunk.thunk_p)\n+      {\n+\tcgraph_node *thunk = e->caller;\n+\n+\te = e->next_caller;\n+\tif (thunk->expand_thunk (false, false))\n+\t  {\n+\t    thunk->thunk.thunk_p = false;\n+\t    thunk->analyze ();\n+\t  }\n+\tthunk->expand_all_artificial_thunks ();\n+      }\n+    else\n+      e = e->next_caller;\n }\n \n /* Create node representing clone of N executed COUNT times.  Decrease\n@@ -483,8 +502,9 @@ cgraph_node::create_clone (tree decl, gcov_type gcov_count, int freq,\n       if (!e->callee\n \t  || DECL_BUILT_IN_CLASS (e->callee->decl) != BUILT_IN_NORMAL\n \t  || DECL_FUNCTION_CODE (e->callee->decl) != BUILT_IN_UNREACHABLE)\n-        redirect_edge_duplicating_thunks (e, new_node);\n+        e->redirect_callee_duplicating_thunks (new_node);\n     }\n+  new_node->expand_all_artificial_thunks ();\n \n   for (e = callees;e; e=e->next_callee)\n     e->clone (new_node, e->call_stmt, e->lto_stmt_uid, count_scale,"}, {"sha": "9b6784b8b5fc6a2be36b9f573ce1fbf8b7fe5a6d", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4bad955f8ab028190bbb4d3cf3c00721c26bfc/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4bad955f8ab028190bbb4d3cf3c00721c26bfc/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=6a4bad955f8ab028190bbb4d3cf3c00721c26bfc", "patch": "@@ -3912,7 +3912,8 @@ perhaps_add_new_callers (cgraph_node *node, ipcp_value<valtype> *val)\n \t\t\t xstrdup (val->spec_node->name ()),\n \t\t\t val->spec_node->order);\n \n-\t      cs->redirect_callee (val->spec_node);\n+\t      cs->redirect_callee_duplicating_thunks (val->spec_node);\n+\t      val->spec_node->expand_all_artificial_thunks ();\n \t      redirected_sum += cs->count;\n \t    }\n \t  cs = get_next_cgraph_edge_clone (cs);"}]}