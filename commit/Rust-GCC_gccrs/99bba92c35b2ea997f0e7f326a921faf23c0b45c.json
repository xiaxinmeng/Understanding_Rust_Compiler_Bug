{"sha": "99bba92c35b2ea997f0e7f326a921faf23c0b45c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTliYmE5MmMzNWIyZWE5OTdmMGU3ZjMyNmE5MjFmYWYyM2MwYjQ1Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-05-02T08:31:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-05-02T08:31:12Z"}, "message": "[multiple changes]\n\n2017-05-02  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* opt.ads: Add missing GNAT markers in comments.\n\t* opt.adb (Set_Opt_Config_Switches): Do not override earlier\n\tsettings of Optimize_Alignment at the end.\n\n2017-05-02  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* checks.adb (Apply_Constraint_Check): Do not apply\n\ta discriminant check when the associated type is a constrained\n\tsubtype created for an unconstrained nominal type.\n\t* exp_attr.adb: Minor reformatting.\n\n2017-05-02  Bob Duff  <duff@adacore.com>\n\n\t* sem_ch3.adb (OK_For_Limited_Init_In_05): Handle correctly\n\tthe N_Raise_Expression case.\n\t* sem_ch6.adb (Check_Limited_Return): Minor: clarify comment,\n\tand add assertions.\n\n2017-05-02  Yannick Moy  <moy@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Op_Ne): Do not bump parenthese level and\n\toptimize length comparison in GNATprove mode.\n\t* exp_spark.adb (Expand_SPARK_Op_Ne): New function to rewrite\n\toperator /= into negation of operator = when needed.\n\t(Expand_SPARK): Call new\n\tfunction to expand operator /=.\n\n2017-05-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_fixd.adb (Expand_Divide_Fixed_By_Fixed_Giving_Fixed):\n\tSimplify the expression for a fixed-fixed division to remove\n\tdivisions by constants whenever possible, as an optimization\n\tfor restricted targets.\n\nFrom-SVN: r247468", "tree": {"sha": "0f1a1b20cc000596b3e32563078a7f915b340a58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f1a1b20cc000596b3e32563078a7f915b340a58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99bba92c35b2ea997f0e7f326a921faf23c0b45c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99bba92c35b2ea997f0e7f326a921faf23c0b45c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99bba92c35b2ea997f0e7f326a921faf23c0b45c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99bba92c35b2ea997f0e7f326a921faf23c0b45c/comments", "author": null, "committer": null, "parents": [{"sha": "bae8f1562f1145885374113ac4f718d4cf32a609", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae8f1562f1145885374113ac4f718d4cf32a609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bae8f1562f1145885374113ac4f718d4cf32a609"}], "stats": {"total": 228, "additions": 169, "deletions": 59}, "files": [{"sha": "5eff9e254a99f5c866b080e572c15bd136f56370", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99bba92c35b2ea997f0e7f326a921faf23c0b45c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99bba92c35b2ea997f0e7f326a921faf23c0b45c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=99bba92c35b2ea997f0e7f326a921faf23c0b45c", "patch": "@@ -1,3 +1,39 @@\n+2017-05-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* opt.ads: Add missing GNAT markers in comments.\n+\t* opt.adb (Set_Opt_Config_Switches): Do not override earlier\n+\tsettings of Optimize_Alignment at the end.\n+\n+2017-05-02  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* checks.adb (Apply_Constraint_Check): Do not apply\n+\ta discriminant check when the associated type is a constrained\n+\tsubtype created for an unconstrained nominal type.\n+\t* exp_attr.adb: Minor reformatting.\n+\n+2017-05-02  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch3.adb (OK_For_Limited_Init_In_05): Handle correctly\n+\tthe N_Raise_Expression case.\n+\t* sem_ch6.adb (Check_Limited_Return): Minor: clarify comment,\n+\tand add assertions.\n+\n+2017-05-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Op_Ne): Do not bump parenthese level and\n+\toptimize length comparison in GNATprove mode.\n+\t* exp_spark.adb (Expand_SPARK_Op_Ne): New function to rewrite\n+\toperator /= into negation of operator = when needed.\n+\t(Expand_SPARK): Call new\n+\tfunction to expand operator /=.\n+\n+2017-05-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_fixd.adb (Expand_Divide_Fixed_By_Fixed_Giving_Fixed):\n+\tSimplify the expression for a fixed-fixed division to remove\n+\tdivisions by constants whenever possible, as an optimization\n+\tfor restricted targets.\n+\n 2017-05-02  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* checks.adb, sem_ch3.adb, sem_ch6.adb: Minor reformatting."}, {"sha": "e8f38f990e38fb2378ef17c1fff3c6aabddf6392", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99bba92c35b2ea997f0e7f326a921faf23c0b45c/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99bba92c35b2ea997f0e7f326a921faf23c0b45c/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=99bba92c35b2ea997f0e7f326a921faf23c0b45c", "patch": "@@ -1355,8 +1355,13 @@ package body Checks is\n \n             Apply_Range_Check (N, Typ);\n \n+         --  Do not install a discriminant check for a constrained subtype\n+         --  created for an unconstrained nominal type because the subtype\n+         --  has the correct constraints by construction.\n+\n          elsif Has_Discriminants (Base_Type (Desig_Typ))\n-            and then Is_Constrained (Desig_Typ)\n+           and then Is_Constrained (Desig_Typ)\n+           and then not Is_Constr_Subt_For_U_Nominal (Desig_Typ)\n          then\n             Apply_Discriminant_Check (N, Typ);\n          end if;"}, {"sha": "79560ae86c0a9ff4aab7c2715548d43a5b5a5cf7", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 43, "deletions": 51, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99bba92c35b2ea997f0e7f326a921faf23c0b45c/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99bba92c35b2ea997f0e7f326a921faf23c0b45c/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=99bba92c35b2ea997f0e7f326a921faf23c0b45c", "patch": "@@ -83,6 +83,9 @@ package body Exp_Attr is\n    --  value returned is the entity of the constructed function body. We do not\n    --  bother to generate a separate spec for this subprogram.\n \n+   function Build_Disp_Get_Task_Id_Call (Actual : Node_Id) return Node_Id;\n+   --  Build a call to Disp_Get_Task_Id, passing Actual as actual parameter\n+\n    function Build_Record_VS_Func\n      (R_Type : Entity_Id;\n       Nod    : Node_Id) return Entity_Id;\n@@ -354,6 +357,23 @@ package body Exp_Attr is\n       return Func_Id;\n    end Build_Array_VS_Func;\n \n+   ---------------------------------\n+   -- Build_Disp_Get_Task_Id_Call --\n+   ---------------------------------\n+\n+   function Build_Disp_Get_Task_Id_Call (Actual : Node_Id) return Node_Id is\n+      Typ  : constant Entity_Id := Etype (Actual);\n+      Id : constant Node_Id :=\n+        New_Occurrence_Of\n+          (Find_Prim_Op (Typ, Name_uDisp_Get_Task_Id), Sloc (Actual));\n+      Result : constant Node_Id :=\n+        Make_Function_Call (Sloc (Actual),\n+          Name => Id,\n+          Parameter_Associations => New_List (Actual));\n+   begin\n+      return Result;\n+   end Build_Disp_Get_Task_Id_Call;\n+\n    --------------------------\n    -- Build_Record_VS_Func --\n    --------------------------\n@@ -2469,6 +2489,7 @@ package body Exp_Attr is\n       --  Transforms 'Callable attribute into a call to the Callable function\n \n       when Attribute_Callable =>\n+\n          --  We have an object of a task interface class-wide type as a prefix\n          --  to Callable. Generate:\n          --    callable (Task_Id (Pref._disp_get_task_id));\n@@ -2478,29 +2499,18 @@ package body Exp_Attr is\n            and then Is_Interface (Ptyp)\n            and then Is_Task_Interface (Ptyp)\n          then\n-            declare\n-               Id : constant Node_Id :=\n-                 New_Occurrence_Of\n-                   (Find_Prim_Op (Ptyp, Name_uDisp_Get_Task_Id), Loc);\n-               Call : constant Node_Id :=\n-                 Make_Function_Call (Loc,\n-                   Name => Id,\n-                   Parameter_Associations => New_List (Pref));\n-            begin\n-               Rewrite (N,\n-                 Make_Function_Call (Loc,\n-                   Name =>\n-                     New_Occurrence_Of (RTE (RE_Callable), Loc),\n-                   Parameter_Associations => New_List (\n-                     Make_Unchecked_Type_Conversion (Loc,\n-                       Subtype_Mark =>\n-                         New_Occurrence_Of (RTE (RO_ST_Task_Id), Loc),\n-                       Expression => Call))));\n-            end;\n+            Rewrite (N,\n+              Make_Function_Call (Loc,\n+                Name =>\n+                  New_Occurrence_Of (RTE (RE_Callable), Loc),\n+                Parameter_Associations => New_List (\n+                  Make_Unchecked_Type_Conversion (Loc,\n+                    Subtype_Mark =>\n+                      New_Occurrence_Of (RTE (RO_ST_Task_Id), Loc),\n+                    Expression => Build_Disp_Get_Task_Id_Call (Pref)))));\n \n          else\n-            Rewrite (N,\n-              Build_Call_With_Task (Pref, RTE (RE_Callable)));\n+            Rewrite (N, Build_Call_With_Task (Pref, RTE (RE_Callable)));\n          end if;\n \n          Analyze_And_Resolve (N, Standard_Boolean);\n@@ -3581,17 +3591,9 @@ package body Exp_Attr is\n               and then Is_Interface (Ptyp)\n               and then Is_Task_Interface (Ptyp)\n             then\n-               declare\n-                  Id : constant Node_Id :=\n-                    New_Occurrence_Of\n-                      (Find_Prim_Op (Ptyp, Name_uDisp_Get_Task_Id), Loc);\n-                  Call : constant Node_Id :=\n-                    Make_Function_Call (Loc,\n-                      Name => Id,\n-                      Parameter_Associations => New_List (Pref));\n-               begin\n-                  Rewrite (N, Unchecked_Convert_To (Id_Kind, Call));\n-               end;\n+               Rewrite\n+                 (N, Unchecked_Convert_To\n+                       (Id_Kind, Build_Disp_Get_Task_Id_Call (Pref)));\n \n             else\n                Rewrite (N,\n@@ -6278,25 +6280,15 @@ package body Exp_Attr is\n            and then Is_Interface (Ptyp)\n            and then Is_Task_Interface (Ptyp)\n          then\n-            declare\n-               Id : constant Node_Id :=\n-                 New_Occurrence_Of\n-                   (Find_Prim_Op (Ptyp, Name_uDisp_Get_Task_Id), Loc);\n-               Call : constant Node_Id :=\n-                 Make_Function_Call (Loc,\n-                   Name => Id,\n-                   Parameter_Associations => New_List (Pref));\n-            begin\n-               Rewrite (N,\n-                 Make_Function_Call (Loc,\n-                   Name =>\n-                     New_Occurrence_Of (RTE (RE_Terminated), Loc),\n-                   Parameter_Associations => New_List (\n-                     Make_Unchecked_Type_Conversion (Loc,\n-                       Subtype_Mark =>\n-                         New_Occurrence_Of (RTE (RO_ST_Task_Id), Loc),\n-                       Expression => Call))));\n-            end;\n+            Rewrite (N,\n+              Make_Function_Call (Loc,\n+                Name =>\n+                  New_Occurrence_Of (RTE (RE_Terminated), Loc),\n+                Parameter_Associations => New_List (\n+                  Make_Unchecked_Type_Conversion (Loc,\n+                    Subtype_Mark =>\n+                      New_Occurrence_Of (RTE (RO_ST_Task_Id), Loc),\n+                    Expression => Build_Disp_Get_Task_Id_Call (Pref)))));\n \n          elsif Restricted_Profile then\n             Rewrite (N,"}, {"sha": "eccfcd2199368ee2fe120fa763453e3f4ed4902a", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99bba92c35b2ea997f0e7f326a921faf23c0b45c/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99bba92c35b2ea997f0e7f326a921faf23c0b45c/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=99bba92c35b2ea997f0e7f326a921faf23c0b45c", "patch": "@@ -8926,6 +8926,9 @@ package body Exp_Ch4 is\n       --  the same visibility as in the generic unit. This avoids duplicating\n       --  or factoring the complex code for record/array equality tests etc.\n \n+      --  This case is also used for the minimal expansion performed in\n+      --  GNATprove mode.\n+\n       else\n          declare\n             Loc : constant Source_Ptr := Sloc (N);\n@@ -8941,7 +8944,14 @@ package body Exp_Ch4 is\n                   Make_Op_Eq (Loc,\n                     Left_Opnd =>  Left_Opnd (N),\n                     Right_Opnd => Right_Opnd (N)));\n-            Set_Paren_Count (Right_Opnd (Neg), 1);\n+\n+            --  The level of parentheses is useless in GNATprove mode, and\n+            --  bumping its level here leads to wrong columns being used in\n+            --  check messages, hence skip it in this mode.\n+\n+            if not GNATprove_Mode then\n+               Set_Paren_Count (Right_Opnd (Neg), 1);\n+            end if;\n \n             if Scope (Ne) /= Standard_Standard then\n                Set_Entity (Right_Opnd (Neg), Corresponding_Equality (Ne));\n@@ -8958,7 +8968,12 @@ package body Exp_Ch4 is\n          end;\n       end if;\n \n-      Optimize_Length_Comparison (N);\n+      --  No need for optimization in GNATprove mode, where we would rather see\n+      --  the original source expression.\n+\n+      if not GNATprove_Mode then\n+         Optimize_Length_Comparison (N);\n+      end if;\n    end Expand_N_Op_Ne;\n \n    ---------------------"}, {"sha": "6d31eb88031a77cae32413dd7499bdfb4af82ce7", "filename": "gcc/ada/exp_fixd.adb", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99bba92c35b2ea997f0e7f326a921faf23c0b45c/gcc%2Fada%2Fexp_fixd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99bba92c35b2ea997f0e7f326a921faf23c0b45c/gcc%2Fada%2Fexp_fixd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_fixd.adb?ref=99bba92c35b2ea997f0e7f326a921faf23c0b45c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2008,6 +2008,31 @@ package body Exp_Fixd is\n \n       else\n          Do_Divide_Fixed_Fixed (N);\n+\n+         --  A focused optimization: if after constant folding the\n+         --  expression is of the form:  T ((Exp * D) / D), where D is\n+         --  a static constant, return  T (Exp). This form will show up\n+         --  when D is the denominator of the static expression for the\n+         --  'small of fixed-point types involved. This transformation\n+         --  removes a division that may be expensive on some targets.\n+\n+         if Nkind (N) = N_Type_Conversion\n+           and then Nkind (Expression (N)) = N_Op_Divide\n+         then\n+            declare\n+               Num : constant Node_Id := Left_Opnd  (Expression (N));\n+               Den : constant Node_Id := Right_Opnd (Expression (N));\n+\n+            begin\n+               if Nkind (Den) = N_Integer_Literal\n+                 and then Nkind (Num) = N_Op_Multiply\n+                 and then Nkind (Right_Opnd (Num)) = N_Integer_Literal\n+                 and then Intval (Den) = Intval (Right_Opnd (Num))\n+               then\n+                  Rewrite (Expression (N), Left_Opnd (Num));\n+               end if;\n+            end;\n+         end if;\n       end if;\n    end Expand_Divide_Fixed_By_Fixed_Giving_Fixed;\n "}, {"sha": "785652e2a43213dbc6f53cc62b95940a653880ac", "filename": "gcc/ada/exp_spark.adb", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99bba92c35b2ea997f0e7f326a921faf23c0b45c/gcc%2Fada%2Fexp_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99bba92c35b2ea997f0e7f326a921faf23c0b45c/gcc%2Fada%2Fexp_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_spark.adb?ref=99bba92c35b2ea997f0e7f326a921faf23c0b45c", "patch": "@@ -26,6 +26,7 @@\n with Atree;    use Atree;\n with Checks;   use Checks;\n with Einfo;    use Einfo;\n+with Exp_Ch4;\n with Exp_Ch5;  use Exp_Ch5;\n with Exp_Dbug; use Exp_Dbug;\n with Exp_Util; use Exp_Util;\n@@ -62,6 +63,9 @@ package body Exp_SPARK is\n    procedure Expand_SPARK_N_Object_Renaming_Declaration (N : Node_Id);\n    --  Perform name evaluation for a renamed object\n \n+   procedure Expand_SPARK_Op_Ne (N : Node_Id);\n+   --  Rewrite operator /= based on operator = when defined explicitly\n+\n    ------------------\n    -- Expand_SPARK --\n    ------------------\n@@ -125,6 +129,9 @@ package body Exp_SPARK is\n          when N_Object_Renaming_Declaration =>\n             Expand_SPARK_N_Object_Renaming_Declaration (N);\n \n+         when N_Op_Ne =>\n+            Expand_SPARK_Op_Ne (N);\n+\n          when N_Freeze_Entity =>\n             if Is_Type (Entity (N)) then\n                Expand_SPARK_Freeze_Type (Entity (N));\n@@ -291,6 +298,26 @@ package body Exp_SPARK is\n       Evaluate_Name (Name (N));\n    end Expand_SPARK_N_Object_Renaming_Declaration;\n \n+   ------------------------\n+   -- Expand_SPARK_Op_Ne --\n+   ------------------------\n+\n+   procedure Expand_SPARK_Op_Ne (N : Node_Id) is\n+      Typ : constant Entity_Id := Etype (Left_Opnd (N));\n+\n+   begin\n+      --  Case of elementary type with standard operator\n+\n+      if Is_Elementary_Type (Typ)\n+        and then Sloc (Entity (N)) = Standard_Location\n+      then\n+         null;\n+\n+      else\n+         Exp_Ch4.Expand_N_Op_Ne (N);\n+      end if;\n+   end Expand_SPARK_Op_Ne;\n+\n    -------------------------------------\n    -- Expand_SPARK_Potential_Renaming --\n    -------------------------------------"}, {"sha": "91642ed948d2cc2980da0c0850f3bff73e00d5ab", "filename": "gcc/ada/opt.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99bba92c35b2ea997f0e7f326a921faf23c0b45c/gcc%2Fada%2Fopt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99bba92c35b2ea997f0e7f326a921faf23c0b45c/gcc%2Fada%2Fopt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.adb?ref=99bba92c35b2ea997f0e7f326a921faf23c0b45c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -219,11 +219,11 @@ package body Opt is\n          External_Name_Exp_Casing    := As_Is;\n          External_Name_Imp_Casing    := Lowercase;\n          Optimize_Alignment          := 'O';\n+         Optimize_Alignment_Local    := True;\n          Persistent_BSS_Mode         := False;\n          Prefix_Exception_Messages   := True;\n          Uneval_Old                  := 'E';\n          Use_VADS_Size               := False;\n-         Optimize_Alignment_Local    := True;\n \n          --  Note: we do not need to worry about Warnings_As_Errors_Count since\n          --  we do not expect to get any warnings from compiling such a unit.\n@@ -293,7 +293,6 @@ package body Opt is\n       Default_Pool                   := Default_Pool_Config;\n       Exception_Locations_Suppressed := Exception_Locations_Suppressed_Config;\n       Fast_Math                      := Fast_Math_Config;\n-      Optimize_Alignment             := Optimize_Alignment_Config;\n       Polling_Required               := Polling_Required_Config;\n    end Set_Opt_Config_Switches;\n "}, {"sha": "c73b6222ae3d1c10ee730bb048d010b15956bd0b", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99bba92c35b2ea997f0e7f326a921faf23c0b45c/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99bba92c35b2ea997f0e7f326a921faf23c0b45c/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=99bba92c35b2ea997f0e7f326a921faf23c0b45c", "patch": "@@ -1194,10 +1194,12 @@ package Opt is\n    --  type with the semantics that each value does more than the previous one.\n \n    Optimize_Alignment : Character := 'O';\n+   --  GNAT\n    --  Setting of Optimize_Alignment, set to T/S/O for time/space/off. Can\n    --  be modified by use of pragma Optimize_Alignment.\n \n    Optimize_Alignment_Local : Boolean := False;\n+   --  GNAT\n    --  Set True if Optimize_Alignment mode is set by a local configuration\n    --  pragma that overrides the gnat.adc (or other configuration file) default\n    --  so that the unit is not dependent on the default setting. Also always\n@@ -1213,10 +1215,12 @@ package Opt is\n \n    Optimization_Level : Int;\n    pragma Import (C, Optimization_Level, \"optimize\");\n+   --  GNAT\n    --  Constant reflecting the optimization level (0,1,2,3 for -O0,-O1,-O2,-O3)\n \n    Optimize_Size : Int;\n    pragma Import (C, Optimize_Size, \"optimize_size\");\n+   --  GNAT\n    --  Constant reflecting setting of -Os (optimize for size). Set to nonzero\n    --  in -Os mode and set to zero otherwise.\n "}, {"sha": "4f7691bc392cf46471aa41d5b4c015f8b537adc8", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99bba92c35b2ea997f0e7f326a921faf23c0b45c/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99bba92c35b2ea997f0e7f326a921faf23c0b45c/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=99bba92c35b2ea997f0e7f326a921faf23c0b45c", "patch": "@@ -19316,6 +19316,11 @@ package body Sem_Ch3 is\n          when N_Attribute_Reference =>\n             return Attribute_Name (Original_Node (Exp)) = Name_Input;\n \n+         --  \"return raise ...\" is OK\n+\n+         when N_Raise_Expression =>\n+            return True;\n+\n          --  For a case expression, all dependent expressions must be legal\n \n          when N_Case_Expression =>"}, {"sha": "61e4f86c6cacc1b3de915cf24305da5210d67a40", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99bba92c35b2ea997f0e7f326a921faf23c0b45c/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99bba92c35b2ea997f0e7f326a921faf23c0b45c/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=99bba92c35b2ea997f0e7f326a921faf23c0b45c", "patch": "@@ -5996,9 +5996,11 @@ package body Sem_Ch6 is\n                   & \"(RM-2005 6.5(5.5/2))?y?\", Expr);\n             end if;\n \n-         --  Ada 95 mode, compatibility warnings disabled\n+         --  Ada 95 mode, and compatibility warnings disabled\n \n          else\n+            pragma Assert (Ada_Version <= Ada_95);\n+            pragma Assert (not (Warn_On_Ada_2005_Compatibility or GNAT_Mode));\n             return; --  skip continuation messages below\n          end if;\n "}]}