{"sha": "3e2399bafcb068ca3111b6fbc69cff38ed442bb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UyMzk5YmFmY2IwNjhjYTMxMTFiNmZiYzY5Y2ZmMzhlZDQ0MmJiOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-18T08:25:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-18T08:25:27Z"}, "message": "[multiple changes]\n\n2010-06-18  Vincent Celier  <celier@adacore.com>\n\n\t* make.adb (Must_Compile): New Boolean global variable\n\t(Main_On_Command_Line): New Boolean global variable\n\t(Collect_Arguments_And_Compile): Do compile if Must_Compile is True,\n\teven when the project is externally built.\n\t(Start_Compile_If_Possible): Compile in -aL directories if\n\tCheck_Readonly_Files is True. Do compile if Must_Compile is True, even\n\twhen the project is externally built.\n\t(Gnatmake): Set Must_Compile and Check_Readonly_Files to True when\n\tinvoked with -f -u and one or several mains on the command line.\n\t(Scan_Make_Arg): Set Main_On_Command_Line to True when at least one main\n\tis specified on the command line.\n\n2010-06-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Build_Body_For_Inline): Handle extended_return_statements\n\t* exp_ch6.adb (Expand_Inlined_Call): when possible, inline a body\n\tcontaining extented_return statements.\n\t* exp_util.adb (Make_CW_Equivalent_Type): If the root type is already\n\tconstrained, do not build subtype declaration.\n\nFrom-SVN: r160962", "tree": {"sha": "24c9167e266730dd9129781a1ff5f011a25c93a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24c9167e266730dd9129781a1ff5f011a25c93a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e2399bafcb068ca3111b6fbc69cff38ed442bb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e2399bafcb068ca3111b6fbc69cff38ed442bb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e2399bafcb068ca3111b6fbc69cff38ed442bb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e2399bafcb068ca3111b6fbc69cff38ed442bb8/comments", "author": null, "committer": null, "parents": [{"sha": "c28408b78417c388b52a53720ae2fd512514881f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c28408b78417c388b52a53720ae2fd512514881f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c28408b78417c388b52a53720ae2fd512514881f"}], "stats": {"total": 229, "additions": 194, "deletions": 35}, "files": [{"sha": "5577d777cd44ad3eec7107ba9434660cfb8c986b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2399bafcb068ca3111b6fbc69cff38ed442bb8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2399bafcb068ca3111b6fbc69cff38ed442bb8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3e2399bafcb068ca3111b6fbc69cff38ed442bb8", "patch": "@@ -1,3 +1,25 @@\n+2010-06-18  Vincent Celier  <celier@adacore.com>\n+\n+\t* make.adb (Must_Compile): New Boolean global variable\n+\t(Main_On_Command_Line): New Boolean global variable\n+\t(Collect_Arguments_And_Compile): Do compile if Must_Compile is True,\n+\teven when the project is externally built.\n+\t(Start_Compile_If_Possible): Compile in -aL directories if\n+\tCheck_Readonly_Files is True. Do compile if Must_Compile is True, even\n+\twhen the project is externally built.\n+\t(Gnatmake): Set Must_Compile and Check_Readonly_Files to True when\n+\tinvoked with -f -u and one or several mains on the command line.\n+\t(Scan_Make_Arg): Set Main_On_Command_Line to True when at least one main\n+\tis specified on the command line.\n+\n+2010-06-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Build_Body_For_Inline): Handle extended_return_statements\n+\t* exp_ch6.adb (Expand_Inlined_Call): when possible, inline a body\n+\tcontaining extented_return statements.\n+\t* exp_util.adb (Make_CW_Equivalent_Type): If the root type is already\n+\tconstrained, do not build subtype declaration.\n+\n 2010-06-18  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_res.adb (Analyze_Indexed_Component, Analyze_Selected_Component):"}, {"sha": "5a36234d30d848e9b88963a1846d7552b8528403", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 65, "deletions": 3, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2399bafcb068ca3111b6fbc69cff38ed442bb8/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2399bafcb068ca3111b6fbc69cff38ed442bb8/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=3e2399bafcb068ca3111b6fbc69cff38ed442bb8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -3297,6 +3297,9 @@ package body Exp_Ch6 is\n       Temp     : Entity_Id;\n       Temp_Typ : Entity_Id;\n \n+      Return_Object : Entity_Id := Empty;\n+      --  Entity in declaration in an extended_return_statement\n+\n       Is_Unc : constant Boolean :=\n                     Is_Array_Type (Etype (Subp))\n                       and then not Is_Constrained (Etype (Subp));\n@@ -3390,15 +3393,29 @@ package body Exp_Ch6 is\n                   Rewrite (N, New_Copy (A));\n                end if;\n             end if;\n+            return Skip;\n+\n+         elsif Is_Entity_Name (N)\n+           and then Chars (N) = Chars (Return_Object)\n+         then\n+            --  Occurrence within an extended return statement. The return\n+            --  object is local to the body been inlined, and thus the generic\n+            --  copy is not analyzed yet, so we match by name, and replace it\n+            --  with target of call.\n+\n+            if Nkind (Targ) = N_Defining_Identifier then\n+               Rewrite (N, New_Occurrence_Of (Targ, Loc));\n+            else\n+               Rewrite (N, New_Copy_Tree (Targ));\n+            end if;\n \n             return Skip;\n \n          elsif Nkind (N) = N_Simple_Return_Statement then\n             if No (Expression (N)) then\n                Make_Exit_Label;\n                Rewrite (N,\n-                 Make_Goto_Statement (Loc,\n-                   Name => New_Copy (Lab_Id)));\n+                 Make_Goto_Statement (Loc, Name => New_Copy (Lab_Id)));\n \n             else\n                if Nkind (Parent (N)) = N_Handled_Sequence_Of_Statements\n@@ -3456,6 +3473,46 @@ package body Exp_Ch6 is\n \n             return OK;\n \n+         elsif Nkind (N) = N_Extended_Return_Statement then\n+\n+            --  An extended return becomes a block whose first statement is\n+            --  the assignment of the initial expression of the return object\n+            --  to the target of the call itself.\n+\n+            declare\n+               Return_Decl : constant Entity_Id :=\n+                               First (Return_Object_Declarations (N));\n+               Assign      : Node_Id;\n+\n+            begin\n+               Return_Object := Defining_Identifier (Return_Decl);\n+\n+               if Present (Expression (Return_Decl)) then\n+                  if Nkind (Targ) = N_Defining_Identifier then\n+                     Assign :=\n+                       Make_Assignment_Statement (Loc,\n+                         Name => New_Occurrence_Of (Targ, Loc),\n+                         Expression => Expression (Return_Decl));\n+                  else\n+                     Assign :=\n+                       Make_Assignment_Statement (Loc,\n+                         Name => New_Copy (Targ),\n+                         Expression => Expression (Return_Decl));\n+                  end if;\n+\n+                  Set_Assignment_OK (Name (Assign));\n+                  Prepend (Assign,\n+                    Statements (Handled_Statement_Sequence (N)));\n+               end if;\n+\n+               Rewrite (N,\n+                 Make_Block_Statement (Loc,\n+                    Handled_Statement_Sequence =>\n+                      Handled_Statement_Sequence (N)));\n+\n+               return OK;\n+            end;\n+\n          --  Remove pragma Unreferenced since it may refer to formals that\n          --  are not visible in the inlined body, and in any case we will\n          --  not be posting warnings on the inlined body so it is unneeded.\n@@ -3866,6 +3923,11 @@ package body Exp_Ch6 is\n          then\n             Targ := Name (Parent (N));\n \n+         elsif Nkind (Parent (N)) = N_Object_Declaration\n+           and then Is_Limited_Type (Etype (Subp))\n+         then\n+            Targ := Defining_Identifier (Parent (N));\n+\n          else\n             --  Replace call with temporary and create its declaration\n "}, {"sha": "4f72a7a5f8a0cb57692faad6c935854f7ccd4e29", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2399bafcb068ca3111b6fbc69cff38ed442bb8/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2399bafcb068ca3111b6fbc69cff38ed442bb8/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=3e2399bafcb068ca3111b6fbc69cff38ed442bb8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -3751,7 +3751,12 @@ package body Exp_Util is\n       Sizexpr     : Node_Id;\n \n    begin\n-      if not Has_Discriminants (Root_Typ) then\n+      --  If the root type is already constrained, there are no discriminants\n+      --  in the expression.\n+\n+      if not Has_Discriminants (Root_Typ)\n+        or else Is_Constrained (Root_Typ)\n+      then\n          Constr_Root := Root_Typ;\n       else\n          Constr_Root := Make_Temporary (Loc, 'R');"}, {"sha": "3af872f29f02aea4a96bf53dd45d04fca81ec8c3", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 46, "deletions": 16, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2399bafcb068ca3111b6fbc69cff38ed442bb8/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2399bafcb068ca3111b6fbc69cff38ed442bb8/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=3e2399bafcb068ca3111b6fbc69cff38ed442bb8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -202,6 +202,14 @@ package body Make is\n    Unique_Compile_All_Projects : Boolean := False;\n    --  Set to True if -U is used\n \n+   Must_Compile : Boolean := False;\n+   --  True if gnatmake is invoked with -f -u and one or several mains on the\n+   --  command line.\n+\n+   Main_On_Command_Line : Boolean := False;\n+   --  True if gnatmake is invoked with one or several mains on the command\n+   --  line.\n+\n    RTS_Specified : String_Access := null;\n    --  Used to detect multiple --RTS= switches\n \n@@ -2243,12 +2251,14 @@ package body Make is\n             if Arguments_Project = No_Project then\n                Add_Arguments (The_Saved_Gcc_Switches.all);\n \n-            elsif not Arguments_Project.Externally_Built then\n+            elsif not Arguments_Project.Externally_Built\n+              or else Must_Compile\n+            then\n                --  We get the project directory for the relative path\n                --  switches and arguments.\n \n-               Arguments_Project := Ultimate_Extending_Project_Of\n-                 (Arguments_Project);\n+               Arguments_Project :=\n+                 Ultimate_Extending_Project_Of (Arguments_Project);\n \n                --  If building a dynamic or relocatable library, compile with\n                --  PIC option, if it exists.\n@@ -2258,7 +2268,6 @@ package body Make is\n                then\n                   declare\n                      PIC : constant String := MLib.Tgt.PIC_Option;\n-\n                   begin\n                      if PIC /= \"\" then\n                         Add_Arguments ((1 => new String'(PIC)));\n@@ -2726,7 +2735,9 @@ package body Make is\n          --  check for an eventual library project, and use the full path.\n \n          if Arguments_Project /= No_Project then\n-            if not Arguments_Project.Externally_Built then\n+            if not Arguments_Project.Externally_Built\n+              or else Must_Compile\n+            then\n                Prj.Env.Set_Ada_Paths\n                  (Arguments_Project,\n                   Project_Tree,\n@@ -2742,7 +2753,7 @@ package body Make is\n \n                   begin\n                      if Prj.Library\n-                       and then not Prj.Externally_Built\n+                       and then (not Prj.Externally_Built or else Must_Compile)\n                        and then not Prj.Need_To_Build_Lib\n                      then\n                         --  Add to the Q all sources of the project that have\n@@ -3272,8 +3283,9 @@ package body Make is\n                Executable_Obsolete := True;\n             end if;\n \n-            In_Lib_Dir := Full_Lib_File /= No_File\n-              and then In_Ada_Lib_Dir (Full_Lib_File);\n+            In_Lib_Dir := not Check_Readonly_Files\n+                            and then Full_Lib_File /= No_File\n+                            and then In_Ada_Lib_Dir (Full_Lib_File);\n \n             --  Since the following requires a system call, we precompute it\n             --  when needed.\n@@ -3350,6 +3362,7 @@ package body Make is\n \n                if Arguments_Project = No_Project\n                  or else not Arguments_Project.Externally_Built\n+                 or else Must_Compile\n                then\n                   --  Don't waste any time if we have to recompile anyway\n \n@@ -4739,13 +4752,6 @@ package body Make is\n          Display_Version (\"GNATMAKE\", \"1995\");\n       end if;\n \n-      if Main_Project /= No_Project\n-        and then Main_Project.Externally_Built\n-      then\n-         Make_Failed\n-           (\"nothing to do for a main project that is externally built\");\n-      end if;\n-\n       if Osint.Number_Of_Files = 0 then\n          if Main_Project /= No_Project\n            and then Main_Project.Library\n@@ -5182,6 +5188,26 @@ package body Make is\n          end;\n       end if;\n \n+      --  The combination of -f -u and one or several mains on the command line\n+      --  implies -a.\n+\n+      if Force_Compilations\n+        and then Unique_Compile\n+        and then not Unique_Compile_All_Projects\n+        and then Main_On_Command_Line\n+      then\n+         Check_Readonly_Files := True;\n+         Must_Compile := True;\n+      end if;\n+\n+      if Main_Project /= No_Project\n+        and then not Must_Compile\n+        and then Main_Project.Externally_Built\n+      then\n+         Make_Failed\n+           (\"nothing to do for a main project that is externally built\");\n+      end if;\n+\n       --  Get the target parameters, which are only needed for a couple of\n       --  cases in gnatmake. Protect against an exception, such as the case of\n       --  system.ads missing from the library, and fail gracefully.\n@@ -8219,6 +8245,10 @@ package body Make is\n       --  If not a switch it must be a file name\n \n       else\n+         if And_Save then\n+            Main_On_Command_Line := True;\n+         end if;\n+\n          Add_File (Argv);\n          Mains.Add_Main (Argv);\n       end if;"}, {"sha": "2be771a36af749c8a8406a05b4b77c77b46cce1a", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 54, "deletions": 14, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2399bafcb068ca3111b6fbc69cff38ed442bb8/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2399bafcb068ca3111b6fbc69cff38ed442bb8/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=3e2399bafcb068ca3111b6fbc69cff38ed442bb8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -3103,6 +3103,15 @@ package body Sem_Ch6 is\n               and then Has_Excluded_Statement (Statements (S))\n             then\n                return True;\n+\n+            elsif Nkind (S) = N_Extended_Return_Statement then\n+               if Has_Excluded_Statement\n+                  (Statements (Handled_Statement_Sequence (S)))\n+                 or else Present\n+                   (Exception_Handlers (Handled_Statement_Sequence (S)))\n+               then\n+                  return True;\n+               end if;\n             end if;\n \n             Next (S);\n@@ -3170,12 +3179,33 @@ package body Sem_Ch6 is\n                      return Abandon;\n                   end if;\n \n+               --  A return statement within an extended return is a noop\n+               --  after inlining.\n+\n+               elsif No (Expression (N))\n+                 and then Nkind (Parent (Parent (N))) =\n+                 N_Extended_Return_Statement\n+               then\n+                  return OK;\n+\n                else\n                   --  Expression has wrong form\n \n                   return Abandon;\n                end if;\n \n+            --  We can only inline a build-in-place function if\n+            --  it has a single extended return.\n+\n+            elsif Nkind (N) = N_Extended_Return_Statement then\n+               if No (Return_Statement) then\n+                  Return_Statement := N;\n+                  return OK;\n+\n+               else\n+                  return Abandon;\n+               end if;\n+\n             else\n                return OK;\n             end if;\n@@ -3186,11 +3216,18 @@ package body Sem_Ch6 is\n       --  Start of processing for Has_Single_Return\n \n       begin\n-         return Check_All_Returns (N) = OK\n-           and then Present (Declarations (N))\n-           and then Present (First (Declarations (N)))\n-           and then Chars (Expression (Return_Statement)) =\n-                    Chars (Defining_Identifier (First (Declarations (N))));\n+         if Check_All_Returns (N) /= OK then\n+            return False;\n+\n+         elsif Nkind (Return_Statement) = N_Extended_Return_Statement then\n+            return True;\n+\n+         else\n+            return Present (Declarations (N))\n+              and then Present (First (Declarations (N)))\n+              and then Chars (Expression (Return_Statement)) =\n+                 Chars (Defining_Identifier (First (Declarations (N))));\n+         end if;\n       end Has_Single_Return;\n \n       --------------------\n@@ -4444,10 +4481,10 @@ package body Sem_Ch6 is\n             Error_Msg_Sloc := Sloc (Overridden_Subp);\n \n             if Ekind (Subp) = E_Entry then\n-               Error_Msg_NE\n+               Error_Msg_NE -- CODEFIX???\n                  (\"entry & overrides inherited operation #\", Spec, Subp);\n             else\n-               Error_Msg_NE\n+               Error_Msg_NE -- CODEFIX???\n                  (\"subprogram & overrides inherited operation #\", Spec, Subp);\n             end if;\n \n@@ -4498,12 +4535,12 @@ package body Sem_Ch6 is\n                if not Is_Primitive\n                  and then Ekind (Scope (Subp)) /= E_Protected_Type\n                then\n-                  Error_Msg_N\n+                  Error_Msg_N -- CODEFIX???\n                     (\"overriding indicator only allowed \"\n                      & \"if subprogram is primitive\", Subp);\n \n                elsif Can_Override then\n-                  Error_Msg_NE\n+                  Error_Msg_NE -- CODEFIX???\n                     (\"subprogram & overrides predefined operator \",\n                        Spec, Subp);\n                end if;\n@@ -4513,7 +4550,8 @@ package body Sem_Ch6 is\n                   Set_Is_Overriding_Operation (Subp);\n \n                elsif not Can_Override then\n-                  Error_Msg_NE (\"subprogram & is not overriding\", Spec, Subp);\n+                  Error_Msg_NE -- CODEFIX???\n+                    (\"subprogram & is not overriding\", Spec, Subp);\n                end if;\n \n             elsif not Error_Posted (Subp)\n@@ -4542,9 +4580,11 @@ package body Sem_Ch6 is\n \n       elsif Must_Override (Spec) then\n          if Ekind (Subp) = E_Entry then\n-            Error_Msg_NE (\"entry & is not overriding\", Spec, Subp);\n+            Error_Msg_NE -- CODEFIX???\n+              (\"entry & is not overriding\", Spec, Subp);\n          else\n-            Error_Msg_NE (\"subprogram & is not overriding\", Spec, Subp);\n+            Error_Msg_NE -- CODEFIX???\n+              (\"subprogram & is not overriding\", Spec, Subp);\n          end if;\n \n       --  If the operation is marked \"not overriding\" and it's not primitive\n@@ -4557,7 +4597,7 @@ package body Sem_Ch6 is\n         and then Ekind (Subp) /= E_Entry\n         and then Ekind (Scope (Subp)) /= E_Protected_Type\n       then\n-         Error_Msg_N\n+         Error_Msg_N -- CODEFIX???\n            (\"overriding indicator only allowed if subprogram is primitive\",\n             Subp);\n          return;"}]}