{"sha": "254e5d19a177af23a77b67fd51d0d1a25eaabfc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU0ZTVkMTlhMTc3YWYyM2E3N2I2N2ZkNTFkMGQxYTI1ZWFhYmZjNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-22T10:45:32Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-22T12:53:57Z"}, "message": "libstdc++: Restore __gnu_debug::array [PR100682]\n\nAs the PR points out, we removed the debug version of std::array without\nany period of deprecation. Although std::array contains all the actual\ndebug checks now, removing the <debug/arrray> header breaks any code\nthat was using that explicitly. The manual still lists doing that as\nsupported.\n\nThis restores the <debug/array> header, but simply defines\n__gnu_debug::array as an alias for std::array, and declares the alias\nwith the deprecated attribute. The docs are updated to match.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/100682\n\t* doc/xml/manual/debug_mode.xml: Update documentation about\n\tdebug capability of std::array.\n\t* doc/html/*: Regenerate.\n\t* include/debug/array: New file.", "tree": {"sha": "f99151953f0e5b21d72ed5ea912092cfaa70fa1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f99151953f0e5b21d72ed5ea912092cfaa70fa1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/254e5d19a177af23a77b67fd51d0d1a25eaabfc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/254e5d19a177af23a77b67fd51d0d1a25eaabfc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/254e5d19a177af23a77b67fd51d0d1a25eaabfc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/254e5d19a177af23a77b67fd51d0d1a25eaabfc7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3fa77472b78c5ddada03a1052b229bea11cb76f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3fa77472b78c5ddada03a1052b229bea11cb76f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3fa77472b78c5ddada03a1052b229bea11cb76f"}], "stats": {"total": 89, "additions": 77, "deletions": 12}, "files": [{"sha": "35d8aa3ac4b365b136daf84f6f86c831934a613c", "filename": "libstdc++-v3/doc/html/manual/debug_mode_semantics.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254e5d19a177af23a77b67fd51d0d1a25eaabfc7/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdebug_mode_semantics.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254e5d19a177af23a77b67fd51d0d1a25eaabfc7/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdebug_mode_semantics.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdebug_mode_semantics.html?ref=254e5d19a177af23a77b67fd51d0d1a25eaabfc7", "patch": "@@ -35,10 +35,10 @@\n   (N.B. In GCC 3.4.x and 4.0.0, due to a bug,\n   <code class=\"code\">-D_GLIBXX_DEBUG_PEDANTIC</code> was also needed. The problem has\n   been fixed in GCC 4.0.1 and later versions.) </p><p>The following library components provide extra debugging\n-  capabilities in debug mode:</p><div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\"><p><code class=\"code\">std::basic_string</code> (no safe iterators and see note below)</p></li><li class=\"listitem\"><p><code class=\"code\">std::bitset</code></p></li><li class=\"listitem\"><p><code class=\"code\">std::deque</code></p></li><li class=\"listitem\"><p><code class=\"code\">std::list</code></p></li><li class=\"listitem\"><p><code class=\"code\">std::map</code></p></li><li class=\"listitem\"><p><code class=\"code\">std::multimap</code></p></li><li class=\"listitem\"><p><code class=\"code\">std::multiset</code></p></li><li class=\"listitem\"><p><code class=\"code\">std::set</code></p></li><li class=\"listitem\"><p><code class=\"code\">std::vector</code></p></li><li class=\"listitem\"><p><code class=\"code\">std::unordered_map</code></p></li><li class=\"listitem\"><p><code class=\"code\">std::unordered_multimap</code></p></li><li class=\"listitem\"><p><code class=\"code\">std::unordered_set</code></p></li><li class=\"listitem\"><p><code class=\"code\">std::unordered_multiset</code></p></li></ul></div><p>N.B. although there are precondition checks for some string operations,\n+  capabilities in debug mode:</p><div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\"><p><code class=\"code\">std::array</code> (no safe iterators)</p></li><li class=\"listitem\"><p><code class=\"code\">std::basic_string</code> (no safe iterators and see note below)</p></li><li class=\"listitem\"><p><code class=\"code\">std::bitset</code></p></li><li class=\"listitem\"><p><code class=\"code\">std::deque</code></p></li><li class=\"listitem\"><p><code class=\"code\">std::list</code></p></li><li class=\"listitem\"><p><code class=\"code\">std::map</code></p></li><li class=\"listitem\"><p><code class=\"code\">std::multimap</code></p></li><li class=\"listitem\"><p><code class=\"code\">std::multiset</code></p></li><li class=\"listitem\"><p><code class=\"code\">std::set</code></p></li><li class=\"listitem\"><p><code class=\"code\">std::vector</code></p></li><li class=\"listitem\"><p><code class=\"code\">std::unordered_map</code></p></li><li class=\"listitem\"><p><code class=\"code\">std::unordered_multimap</code></p></li><li class=\"listitem\"><p><code class=\"code\">std::unordered_set</code></p></li><li class=\"listitem\"><p><code class=\"code\">std::unordered_multiset</code></p></li></ul></div><p>N.B. although there are precondition checks for some string operations,\n e.g.  <code class=\"code\">operator[]</code>,\n they will not always be run when using the <code class=\"code\">char</code> and\n-<code class=\"code\">wchar_t</code> specialisations (<code class=\"code\">std::string</code> and\n+<code class=\"code\">wchar_t</code> specializations (<code class=\"code\">std::string</code> and\n <code class=\"code\">std::wstring</code>).  This is because libstdc++ uses GCC's\n <code class=\"code\">extern template</code> extension to provide explicit instantiations\n of <code class=\"code\">std::string</code> and <code class=\"code\">std::wstring</code>, and those"}, {"sha": "4deb49801616befe5c5d24f9517c7d6fbd221784", "filename": "libstdc++-v3/doc/html/manual/debug_mode_using.html", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254e5d19a177af23a77b67fd51d0d1a25eaabfc7/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdebug_mode_using.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254e5d19a177af23a77b67fd51d0d1a25eaabfc7/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdebug_mode_using.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdebug_mode_using.html?ref=254e5d19a177af23a77b67fd51d0d1a25eaabfc7", "patch": "@@ -18,6 +18,17 @@\n   mode or with debug mode. The\n   following table provides the names and headers of the debugging\n   containers:\n-</p><div class=\"table\"><a id=\"table.debug_mode_containers\"></a><p class=\"title\"><strong>Table\u00a017.1.\u00a0Debugging Containers</strong></p><div class=\"table-contents\"><table class=\"table\" summary=\"Debugging Containers\" border=\"1\"><colgroup><col align=\"left\" class=\"c1\" /><col align=\"left\" class=\"c2\" /><col align=\"left\" class=\"c3\" /><col align=\"left\" class=\"c4\" /></colgroup><thead><tr><th align=\"left\">Container</th><th align=\"left\">Header</th><th align=\"left\">Debug container</th><th align=\"left\">Debug header</th></tr></thead><tbody><tr><td align=\"left\"><code class=\"classname\">std::bitset</code></td><td align=\"left\"><code class=\"filename\">bitset</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::bitset</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/bitset&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::deque</code></td><td align=\"left\"><code class=\"filename\">deque</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::deque</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/deque&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::list</code></td><td align=\"left\"><code class=\"filename\">list</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::list</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/list&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::map</code></td><td align=\"left\"><code class=\"filename\">map</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::map</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/map&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::multimap</code></td><td align=\"left\"><code class=\"filename\">map</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::multimap</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/map&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::multiset</code></td><td align=\"left\"><code class=\"filename\">set</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::multiset</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/set&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::set</code></td><td align=\"left\"><code class=\"filename\">set</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::set</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/set&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::string</code></td><td align=\"left\"><code class=\"filename\">string</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::string</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/string&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::wstring</code></td><td align=\"left\"><code class=\"filename\">string</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::wstring</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/string&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::basic_string</code></td><td align=\"left\"><code class=\"filename\">string</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::basic_string</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/string&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::vector</code></td><td align=\"left\"><code class=\"filename\">vector</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::vector</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/vector&gt;</code></td></tr></tbody></table></div></div><br class=\"table-break\" /><p>In addition, when compiling in C++11 mode, these additional\n+</p><div class=\"table\"><a id=\"table.debug_mode_containers\"></a><p class=\"title\"><strong>Table\u00a017.1.\u00a0Debugging Containers</strong></p><div class=\"table-contents\"><table class=\"table\" summary=\"Debugging Containers\" border=\"1\"><colgroup><col align=\"left\" class=\"c1\" /><col align=\"left\" class=\"c2\" /><col align=\"left\" class=\"c3\" /><col align=\"left\" class=\"c4\" /></colgroup><thead><tr><th align=\"left\">Container</th><th align=\"left\">Header</th><th align=\"left\">Debug container</th><th align=\"left\">Debug header</th></tr></thead><tbody><tr><td align=\"left\"><code class=\"classname\">std::bitset</code></td><td align=\"left\"><code class=\"filename\">bitset</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::bitset</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/bitset&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::deque</code></td><td align=\"left\"><code class=\"filename\">deque</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::deque</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/deque&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::list</code></td><td align=\"left\"><code class=\"filename\">list</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::list</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/list&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::map</code></td><td align=\"left\"><code class=\"filename\">map</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::map</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/map&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::multimap</code></td><td align=\"left\"><code class=\"filename\">map</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::multimap</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/map&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::multiset</code></td><td align=\"left\"><code class=\"filename\">set</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::multiset</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/set&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::set</code></td><td align=\"left\"><code class=\"filename\">set</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::set</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/set&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::string</code></td><td align=\"left\"><code class=\"filename\">string</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::string</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/string&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::wstring</code></td><td align=\"left\"><code class=\"filename\">string</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::wstring</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/string&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::basic_string</code></td><td align=\"left\"><code class=\"filename\">string</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::basic_string</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/string&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::vector</code></td><td align=\"left\"><code class=\"filename\">vector</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::vector</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/vector&gt;</code></td></tr></tbody></table></div></div><br class=\"table-break\" /><p>When compiling in C++11 mode (or newer), these\n containers have additional debug capability.\n-</p><div class=\"table\"><a id=\"table.debug_mode_containers_cxx11\"></a><p class=\"title\"><strong>Table\u00a017.2.\u00a0Debugging Containers C++11</strong></p><div class=\"table-contents\"><table class=\"table\" summary=\"Debugging Containers C++11\" border=\"1\"><colgroup><col align=\"left\" class=\"c1\" /><col align=\"left\" class=\"c2\" /><col align=\"left\" class=\"c3\" /><col align=\"left\" class=\"c4\" /></colgroup><thead><tr><th align=\"left\">Container</th><th align=\"left\">Header</th><th align=\"left\">Debug container</th><th align=\"left\">Debug header</th></tr></thead><tbody><tr><td align=\"left\"><code class=\"classname\">std::array</code></td><td align=\"left\"><code class=\"filename\">array</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::array</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/array&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::forward_list</code></td><td align=\"left\"><code class=\"filename\">forward_list</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::forward_list</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/forward_list&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::unordered_map</code></td><td align=\"left\"><code class=\"filename\">unordered_map</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::unordered_map</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/unordered_map&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::unordered_multimap</code></td><td align=\"left\"><code class=\"filename\">unordered_map</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::unordered_multimap</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/unordered_map&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::unordered_set</code></td><td align=\"left\"><code class=\"filename\">unordered_set</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::unordered_set</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/unordered_set&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::unordered_multiset</code></td><td align=\"left\"><code class=\"filename\">unordered_set</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::unordered_multiset</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/unordered_set&gt;</code></td></tr></tbody></table></div></div><br class=\"table-break\" /></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"debug_mode_semantics.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"debug_mode.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"debug_mode_design.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Semantics\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../index.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Design</td></tr></table></div></body></html>\n\\ No newline at end of file\n+</p><div class=\"table\"><a id=\"table.debug_mode_containers_cxx11\"></a><p class=\"title\"><strong>Table\u00a017.2.\u00a0Debugging Containers C++11</strong></p><div class=\"table-contents\"><table class=\"table\" summary=\"Debugging Containers C++11\" border=\"1\"><colgroup><col align=\"left\" class=\"c1\" /><col align=\"left\" class=\"c2\" /><col align=\"left\" class=\"c3\" /><col align=\"left\" class=\"c4\" /></colgroup><thead><tr><th align=\"left\">Container</th><th align=\"left\">Header</th><th align=\"left\">Debug container</th><th align=\"left\">Debug header</th></tr></thead><tbody><tr><td align=\"left\"><code class=\"classname\">std::forward_list</code></td><td align=\"left\"><code class=\"filename\">forward_list</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::forward_list</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/forward_list&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::unordered_map</code></td><td align=\"left\"><code class=\"filename\">unordered_map</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::unordered_map</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/unordered_map&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::unordered_multimap</code></td><td align=\"left\"><code class=\"filename\">unordered_map</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::unordered_multimap</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/unordered_map&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::unordered_set</code></td><td align=\"left\"><code class=\"filename\">unordered_set</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::unordered_set</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/unordered_set&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::unordered_multiset</code></td><td align=\"left\"><code class=\"filename\">unordered_set</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::unordered_multiset</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/unordered_set&gt;</code></td></tr></tbody></table></div></div><br class=\"table-break\" /><p>Prior to GCC 11 a debug version of <code class=\"classname\">std::array</code>\n+was available as <code class=\"classname\">__gnu_debug::array</code> in the\n+header <code class=\"filename\">&lt;debug/array&gt;</code>.\n+Because <code class=\"classname\">array::iterator</code> is just a pointer,\n+the debug <code class=\"classname\">array</code> can't check iterator operations,\n+it can only check direct accesses to the container.\n+Starting with GCC 11 all the debug capabilities are available in\n+<code class=\"classname\">std::array</code>, without needing a separate type,\n+so <code class=\"classname\">__gnu_debug::array</code> is just an alias for\n+<code class=\"classname\">std::array</code>.\n+That alias is deprecated and may be removed in a future release.\n+</p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"debug_mode_semantics.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"debug_mode.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"debug_mode_design.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Semantics\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../index.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Design</td></tr></table></div></body></html>\n\\ No newline at end of file"}, {"sha": "dbd5c2b777513f747711cd30ca71c1a68e65142c", "filename": "libstdc++-v3/doc/xml/manual/debug_mode.xml", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254e5d19a177af23a77b67fd51d0d1a25eaabfc7/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fdebug_mode.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254e5d19a177af23a77b67fd51d0d1a25eaabfc7/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fdebug_mode.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fdebug_mode.xml?ref=254e5d19a177af23a77b67fd51d0d1a25eaabfc7", "patch": "@@ -104,6 +104,7 @@\n <para>The following library components provide extra debugging\n   capabilities in debug mode:</para>\n <itemizedlist>\n+  <listitem><para><code>std::array</code> (no safe iterators)</para></listitem>\n   <listitem><para><code>std::basic_string</code> (no safe iterators and see note below)</para></listitem>\n   <listitem><para><code>std::bitset</code></para></listitem>\n   <listitem><para><code>std::deque</code></para></listitem>\n@@ -122,7 +123,7 @@\n <para>N.B. although there are precondition checks for some string operations,\n e.g.  <code>operator[]</code>,\n they will not always be run when using the <code>char</code> and\n-<code>wchar_t</code> specialisations (<code>std::string</code> and\n+<code>wchar_t</code> specializations (<code>std::string</code> and\n <code>std::wstring</code>).  This is because libstdc++ uses GCC's\n <code>extern template</code> extension to provide explicit instantiations\n of <code>std::string</code> and <code>std::wstring</code>, and those\n@@ -263,7 +264,7 @@ which always works correctly.\n </tgroup>\n </table>\n \n-<para>In addition, when compiling in C++11 mode, these additional\n+<para>When compiling in C++11 mode (or newer), these\n containers have additional debug capability.\n </para>\n \n@@ -285,12 +286,6 @@ containers have additional debug capability.\n   </row>\n </thead>\n <tbody>\n-  <row>\n-    <entry><classname>std::array</classname></entry>\n-    <entry><filename class=\"headerfile\">array</filename></entry>\n-    <entry><classname>__gnu_debug::array</classname></entry>\n-    <entry><filename class=\"headerfile\">&lt;debug/array&gt;</filename></entry>\n-  </row>\n   <row>\n     <entry><classname>std::forward_list</classname></entry>\n     <entry><filename class=\"headerfile\">forward_list</filename></entry>\n@@ -324,6 +319,20 @@ containers have additional debug capability.\n </tbody>\n </tgroup>\n </table>\n+\n+<para>Prior to GCC 11 a debug version of <classname>std::array</classname>\n+was available as <classname>__gnu_debug::array</classname> in the\n+header <filename class=\"headerfile\">&lt;debug/array&gt;</filename>.\n+Because <classname>array::iterator</classname> is just a pointer,\n+the debug <classname>array</classname> can't check iterator operations,\n+it can only check direct accesses to the container.\n+Starting with GCC 11 all the debug capabilities are available in\n+<classname>std::array</classname>, without needing a separate type,\n+so <classname>__gnu_debug::array</classname> is just an alias for\n+<classname>std::array</classname>.\n+That alias is deprecated and may be removed in a future release.\n+</para>\n+\n </section>\n </section>\n "}, {"sha": "5cb51dfe8b55a01228132d575736d7ab5c926ffa", "filename": "libstdc++-v3/include/debug/array", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/254e5d19a177af23a77b67fd51d0d1a25eaabfc7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/254e5d19a177af23a77b67fd51d0d1a25eaabfc7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray?ref=254e5d19a177af23a77b67fd51d0d1a25eaabfc7", "patch": "@@ -0,0 +1,45 @@\n+// Redeclaration of std::array in debug namespace -*- C++ -*-\n+\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file debug/array\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n+#ifndef _GLIBCXX_DEBUG_ARRAY\n+#define _GLIBCXX_DEBUG_ARRAY 1\n+\n+#pragma GCC system_header\n+\n+#include <array>\n+\n+namespace __gnu_debug\n+{\n+  template<typename _Tp, std::size_t _Nm>\n+    using array _GLIBCXX_DEPRECATED_SUGGEST(\"std::array\")\n+      = std::array<_Tp, _Nm>;\n+\n+  using std::get;\n+  using std::swap;\n+}\n+#endif // _GLIBCXX_DEBUG_ARRAY"}]}