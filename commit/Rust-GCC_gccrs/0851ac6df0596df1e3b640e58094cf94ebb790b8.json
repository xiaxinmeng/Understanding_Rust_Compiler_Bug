{"sha": "0851ac6df0596df1e3b640e58094cf94ebb790b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg1MWFjNmRmMDU5NmRmMWUzYjY0MGU1ODA5NGNmOTRlYmI3OTBiOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-12T21:43:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-13T12:25:16Z"}, "message": "c++: constexpr, inheritance, and local class [PR91933]\n\nHere we complained about referring to nm3 from the local class member\nfunction because referring to the base class subobject involved taking the\nvariable's address.  Let's shortcut this case to avoid that.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/91933\n\t* class.c (build_base_path): Shortcut simple non-pointer case.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/91933\n\t* g++.dg/cpp0x/constexpr-base7.C: New test.", "tree": {"sha": "932fd95b824b4245356aeac1869e3ebef0335f1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/932fd95b824b4245356aeac1869e3ebef0335f1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0851ac6df0596df1e3b640e58094cf94ebb790b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0851ac6df0596df1e3b640e58094cf94ebb790b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0851ac6df0596df1e3b640e58094cf94ebb790b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0851ac6df0596df1e3b640e58094cf94ebb790b8/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4acb3af3669db4ca79ffc97cd615fcea205bcccb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4acb3af3669db4ca79ffc97cd615fcea205bcccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4acb3af3669db4ca79ffc97cd615fcea205bcccb"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "90b343803a0f931878bfc19ebeb0578335ead9be", "filename": "gcc/cp/class.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0851ac6df0596df1e3b640e58094cf94ebb790b8/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0851ac6df0596df1e3b640e58094cf94ebb790b8/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=0851ac6df0596df1e3b640e58094cf94ebb790b8", "patch": "@@ -330,6 +330,15 @@ build_base_path (enum tree_code code,\n       return error_mark_node;\n     }\n \n+  bool uneval = (cp_unevaluated_operand != 0\n+\t\t || processing_template_decl\n+\t\t || in_template_function ());\n+\n+  /* For a non-pointer simple base reference, express it as a COMPONENT_REF\n+     without taking its address (and so causing lambda capture, 91933).  */\n+  if (code == PLUS_EXPR && !v_binfo && !want_pointer && !has_empty && !uneval)\n+    return build_simple_base_path (expr, binfo);\n+\n   if (!want_pointer)\n     {\n       rvalue = !lvalue_p (expr);\n@@ -357,9 +366,7 @@ build_base_path (enum tree_code code,\n      template (even in instantiate_non_dependent_expr), we don't have vtables\n      set up properly yet, and the value doesn't matter there either; we're\n      just interested in the result of overload resolution.  */\n-  if (cp_unevaluated_operand != 0\n-      || processing_template_decl\n-      || in_template_function ())\n+  if (uneval)\n     {\n       expr = build_nop (ptr_target_type, expr);\n       goto indout;"}, {"sha": "14e026ec20230297f0416d7adc1da8dfa5cbf8d1", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-base7.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0851ac6df0596df1e3b640e58094cf94ebb790b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-base7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0851ac6df0596df1e3b640e58094cf94ebb790b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-base7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-base7.C?ref=0851ac6df0596df1e3b640e58094cf94ebb790b8", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/91933\n+// { dg-do compile { target c++11 } }\n+\n+struct NoMut1 { int a, b; };\n+struct NoMut3 : NoMut1 {\n+  constexpr NoMut3(int a, int b) : NoMut1{a, b} {}\n+};\n+void mutable_subobjects() {\n+  constexpr NoMut3 nm3 = {1, 2};\n+  struct A {\n+    void f() {\n+      static_assert(nm3.a == 1, \"\");\n+    }\n+  };\n+}"}]}