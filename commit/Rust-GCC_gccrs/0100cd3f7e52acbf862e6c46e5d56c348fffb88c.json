{"sha": "0100cd3f7e52acbf862e6c46e5d56c348fffb88c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEwMGNkM2Y3ZTUyYWNiZjg2MmU2YzQ2ZTVkNTZjMzQ4ZmZmYjg4Yw==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@vnet.linux.ibm.com", "date": "2013-07-30T01:01:35Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2013-07-30T01:01:35Z"}, "message": "re PR tree-optimization/57993 (ICE: verify_ssa failed (definition in block n does not dominate use in block m))\n\ngcc:\n\n2013-07-29  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n\n\tPR tree-optimization/57993\n\t* gimple-ssa-strength-reduction.c (replace_mult_candidate): Record\n\treplaced statement in the candidate table.\n\t(phi_add_costs): Return infinite cost when the hidden basis does\n\tnot dominate all phis on which the candidate is dependent.\n\t(replace_one_candidate): Record replaced statement in the\n\tcandidate table.\n\ngcc/testsuite:\n\n2013-07-29  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n\n\tPR tree-optimization/57993\n\t* gcc.dg/torture/pr57993.c: New test.\n\nFrom-SVN: r201325", "tree": {"sha": "f48cb915a6aab755ebca183f4cd81b4740452ff7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f48cb915a6aab755ebca183f4cd81b4740452ff7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0100cd3f7e52acbf862e6c46e5d56c348fffb88c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0100cd3f7e52acbf862e6c46e5d56c348fffb88c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0100cd3f7e52acbf862e6c46e5d56c348fffb88c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0100cd3f7e52acbf862e6c46e5d56c348fffb88c/comments", "author": null, "committer": null, "parents": [{"sha": "ac60ce1da65d0558fb5ae39bc3f1d1f8a39adf4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac60ce1da65d0558fb5ae39bc3f1d1f8a39adf4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac60ce1da65d0558fb5ae39bc3f1d1f8a39adf4c"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "6274a963975f71a2ee92da206b82ca83125094a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0100cd3f7e52acbf862e6c46e5d56c348fffb88c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0100cd3f7e52acbf862e6c46e5d56c348fffb88c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0100cd3f7e52acbf862e6c46e5d56c348fffb88c", "patch": "@@ -1,3 +1,13 @@\n+2013-07-29  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n+\n+\tPR tree-optimization/57993\n+\t* gimple-ssa-strength-reduction.c (replace_mult_candidate): Record\n+\treplaced statement in the candidate table.\n+\t(phi_add_costs): Return infinite cost when the hidden basis does\n+\tnot dominate all phis on which the candidate is dependent.\n+\t(replace_one_candidate): Record replaced statement in the\n+\tcandidate table.\n+\n 2013-07-29  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \t* config/epiphany/epiphany.md (*isub_i+2): New peephole."}, {"sha": "edb1afc0a041b6683f1625d1befe9aff6c37b829", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0100cd3f7e52acbf862e6c46e5d56c348fffb88c/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0100cd3f7e52acbf862e6c46e5d56c348fffb88c/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=0100cd3f7e52acbf862e6c46e5d56c348fffb88c", "patch": "@@ -1882,6 +1882,7 @@ replace_mult_candidate (slsr_cand_t c, tree basis_name, double_int bump)\n \t  gimple_stmt_iterator gsi = gsi_for_stmt (c->cand_stmt);\n \t  gimple_set_location (copy_stmt, gimple_location (c->cand_stmt));\n \t  gsi_replace (&gsi, copy_stmt, false);\n+\t  c->cand_stmt = copy_stmt;\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    stmt_to_print = copy_stmt;\n \t}\n@@ -2179,6 +2180,18 @@ phi_add_costs (gimple phi, slsr_cand_t c, int one_add_cost)\n   int cost = 0;\n   slsr_cand_t phi_cand = base_cand_from_table (gimple_phi_result (phi));\n \n+  /* If we work our way back to a phi that isn't dominated by the hidden\n+     basis, this isn't a candidate for replacement.  Indicate this by\n+     returning an unreasonably high cost.  It's not easy to detect\n+     these situations when determining the basis, so we defer the\n+     decision until now.  */\n+  basic_block phi_bb = gimple_bb (phi);\n+  slsr_cand_t basis = lookup_cand (c->basis);\n+  basic_block basis_bb = gimple_bb (basis->cand_stmt);\n+\n+  if (phi_bb == basis_bb || !dominated_by_p (CDI_DOMINATORS, phi_bb, basis_bb))\n+    return COST_INFINITE;\n+\n   for (i = 0; i < gimple_phi_num_args (phi); i++)\n     {\n       tree arg = gimple_phi_arg_def (phi, i);\n@@ -3226,6 +3239,7 @@ replace_one_candidate (slsr_cand_t c, unsigned i, tree basis_name)\n \t  gimple_stmt_iterator gsi = gsi_for_stmt (c->cand_stmt);\n \t  gimple_set_location (copy_stmt, gimple_location (c->cand_stmt));\n \t  gsi_replace (&gsi, copy_stmt, false);\n+\t  c->cand_stmt = copy_stmt;\n \n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    stmt_to_print = copy_stmt;\n@@ -3238,6 +3252,7 @@ replace_one_candidate (slsr_cand_t c, unsigned i, tree basis_name)\n \t\t\t\t\t\t\t   NULL_TREE);\n \t  gimple_set_location (cast_stmt, gimple_location (c->cand_stmt));\n \t  gsi_replace (&gsi, cast_stmt, false);\n+\t  c->cand_stmt = cast_stmt;\n \n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    stmt_to_print = cast_stmt;"}, {"sha": "bbc2ca6b7371efec452f621debdfe40cc9ea7f54", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0100cd3f7e52acbf862e6c46e5d56c348fffb88c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0100cd3f7e52acbf862e6c46e5d56c348fffb88c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0100cd3f7e52acbf862e6c46e5d56c348fffb88c", "patch": "@@ -1,3 +1,8 @@\n+2013-07-29  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n+\n+\tPR tree-optimization/57993\n+\t* gcc.dg/torture/pr57993.c: New test.\n+\n 2013-07-29  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \t* gcc.dg/tree-ssa/pr44258.c: Disable scan test for Epiphany."}, {"sha": "e73b73f4fa3bf51802f6b7ba3b0c27f419e8e822", "filename": "gcc/testsuite/gcc.dg/torture/pr57993.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0100cd3f7e52acbf862e6c46e5d56c348fffb88c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57993.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0100cd3f7e52acbf862e6c46e5d56c348fffb88c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57993.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57993.c?ref=0100cd3f7e52acbf862e6c46e5d56c348fffb88c", "patch": "@@ -0,0 +1,30 @@\n+/* This ICEd prior to fixing PR57993.  */\n+/* { dg-do compile } */\n+\n+int a, b, c, d;\n+char e;\n+unsigned g;\n+\n+void f(void)\n+{\n+    int h;\n+\n+    for(; d; d++)\n+        if(d)\n+lbl:\n+            g + a || (d = 0);\n+\n+    b && (a = e);\n+\n+    for(h = 0; h < 1; ++h)\n+    {\n+        h = c ? : (d = 0);\n+        g = a = (e | 0);\n+    }\n+\n+    if(a)\n+        goto lbl;\n+\n+    a = e = 0;\n+    goto lbl;\n+}"}]}