{"sha": "8dd8b815f4b1fc0524ac67f10fd7fb98981ad271", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRkOGI4MTVmNGIxZmMwNTI0YWM2N2YxMGZkN2ZiOTg5ODFhZDI3MQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@wasabisystems.com", "date": "2004-01-14T02:32:49Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2004-01-14T02:32:49Z"}, "message": "re PR fortran/6491 ([g77]  Logical operations error on logicals when using -fugly-logint)\n\n\tPR fortran/6491\n\t* expr.c (ffeexpr_reduce_): When handling AND, OR, and XOR, and\n\twhen using -fugly-logint, if both operands are logical, convert\n\tthe result back to logical.\n\t(ffeexpr_reduced_ugly2log_): Add bothlogical parameter.  Change\n\tall callers.  Convert logical operands to integer.\n\nFrom-SVN: r75837", "tree": {"sha": "7856a9635378d94ae6db2615ba8d1dc1d3d6d0db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7856a9635378d94ae6db2615ba8d1dc1d3d6d0db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8dd8b815f4b1fc0524ac67f10fd7fb98981ad271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dd8b815f4b1fc0524ac67f10fd7fb98981ad271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dd8b815f4b1fc0524ac67f10fd7fb98981ad271", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dd8b815f4b1fc0524ac67f10fd7fb98981ad271/comments", "author": null, "committer": null, "parents": [{"sha": "1a793acf78735bd089174860ee0cd86e8f3ea2c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a793acf78735bd089174860ee0cd86e8f3ea2c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a793acf78735bd089174860ee0cd86e8f3ea2c2"}], "stats": {"total": 72, "additions": 65, "deletions": 7}, "files": [{"sha": "a741313c77b162ab817c0dc4206837a95800cbd9", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dd8b815f4b1fc0524ac67f10fd7fb98981ad271/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dd8b815f4b1fc0524ac67f10fd7fb98981ad271/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=8dd8b815f4b1fc0524ac67f10fd7fb98981ad271", "patch": "@@ -1,3 +1,12 @@\n+2004-01-13  Ian Lance Taylor  <ian@wasabisystems.com>\n+\n+\tPR fortran/6491\n+\t* expr.c (ffeexpr_reduce_): When handling AND, OR, and XOR, and\n+\twhen using -fugly-logint, if both operands are logical, convert\n+\tthe result back to logical.\n+\t(ffeexpr_reduced_ugly2log_): Add bothlogical parameter.  Change\n+\tall callers.  Convert logical operands to integer.\n+\n 2004-01-12  Ian Lance Taylor  <ian@wasabisystems.com>\n \n \t* README: Remove."}, {"sha": "ef7661dc3ec3e95e60099e5b716b406fa3b17e3d", "filename": "gcc/f/expr.c", "status": "modified", "additions": 56, "deletions": 7, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dd8b815f4b1fc0524ac67f10fd7fb98981ad271/gcc%2Ff%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dd8b815f4b1fc0524ac67f10fd7fb98981ad271/gcc%2Ff%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fexpr.c?ref=8dd8b815f4b1fc0524ac67f10fd7fb98981ad271", "patch": "@@ -309,7 +309,8 @@ static ffebld ffeexpr_reduced_ugly1log_ (ffebld reduced, ffeexprExpr_ op,\n static ffebld ffeexpr_reduced_ugly2_ (ffebld reduced, ffeexprExpr_ l,\n \t\t\t\t      ffeexprExpr_ op, ffeexprExpr_ r);\n static ffebld ffeexpr_reduced_ugly2log_ (ffebld reduced, ffeexprExpr_ l,\n-\t\t\t\t\t ffeexprExpr_ op, ffeexprExpr_ r);\n+\t\t\t\t\t ffeexprExpr_ op, ffeexprExpr_ r,\n+\t\t\t\t\t bool *);\n static ffelexHandler ffeexpr_find_close_paren_ (ffelexToken t,\n \t\t\t\t\t\tffelexHandler after);\n static ffelexHandler ffeexpr_nil_finished_ (ffelexToken t);\n@@ -8802,6 +8803,7 @@ ffeexpr_reduce_ (void)\n   ffebld expr;\n   ffebld left_expr;\n   bool submag = FALSE;\n+  bool bothlogical;\n \n   operand = ffeexpr_stack_->exprstack;\n   assert (operand != NULL);\n@@ -8993,37 +8995,58 @@ ffeexpr_reduce_ (void)\n \t  reduced = ffebld_new_and (left_expr, expr);\n \t  if (ffe_is_ugly_logint ())\n \t    reduced = ffeexpr_reduced_ugly2log_ (reduced, left_operand, operator,\n-\t\t\t\t\t\t operand);\n+\t\t\t\t\t\t operand, &bothlogical);\n \t  reduced = ffeexpr_reduced_bool2_ (reduced, left_operand, operator,\n \t\t\t\t\t    operand);\n \t  reduced = ffeexpr_collapse_and (reduced, operator->token);\n+\t  if (ffe_is_ugly_logint() && bothlogical)\n+\t    reduced = ffeexpr_convert (reduced, left_operand->token,\n+\t\t\t\t       operator->token,\n+\t\t\t\t       FFEINFO_basictypeLOGICAL,\n+\t\t\t\t       FFEINFO_kindtypeLOGICALDEFAULT, 0,\n+\t\t\t\t       FFETARGET_charactersizeNONE,\n+\t\t\t\t       FFEEXPR_contextLET);\n \t  break;\n \n \tcase FFEEXPR_operatorOR_:\n \t  reduced = ffebld_new_or (left_expr, expr);\n \t  if (ffe_is_ugly_logint ())\n \t    reduced = ffeexpr_reduced_ugly2log_ (reduced, left_operand, operator,\n-\t\t\t\t\t\t operand);\n+\t\t\t\t\t\t operand, &bothlogical);\n \t  reduced = ffeexpr_reduced_bool2_ (reduced, left_operand, operator,\n \t\t\t\t\t    operand);\n \t  reduced = ffeexpr_collapse_or (reduced, operator->token);\n+\t  if (ffe_is_ugly_logint() && bothlogical)\n+\t    reduced = ffeexpr_convert (reduced, left_operand->token,\n+\t\t\t\t       operator->token,\n+\t\t\t\t       FFEINFO_basictypeLOGICAL,\n+\t\t\t\t       FFEINFO_kindtypeLOGICALDEFAULT, 0,\n+\t\t\t\t       FFETARGET_charactersizeNONE,\n+\t\t\t\t       FFEEXPR_contextLET);\n \t  break;\n \n \tcase FFEEXPR_operatorXOR_:\n \t  reduced = ffebld_new_xor (left_expr, expr);\n \t  if (ffe_is_ugly_logint ())\n \t    reduced = ffeexpr_reduced_ugly2log_ (reduced, left_operand, operator,\n-\t\t\t\t\t\t operand);\n+\t\t\t\t\t\t operand, &bothlogical);\n \t  reduced = ffeexpr_reduced_bool2_ (reduced, left_operand, operator,\n \t\t\t\t\t    operand);\n \t  reduced = ffeexpr_collapse_xor (reduced, operator->token);\n+\t  if (ffe_is_ugly_logint() && bothlogical)\n+\t    reduced = ffeexpr_convert (reduced, left_operand->token,\n+\t\t\t\t       operator->token,\n+\t\t\t\t       FFEINFO_basictypeLOGICAL,\n+\t\t\t\t       FFEINFO_kindtypeLOGICALDEFAULT, 0,\n+\t\t\t\t       FFETARGET_charactersizeNONE,\n+\t\t\t\t       FFEEXPR_contextLET);\n \t  break;\n \n \tcase FFEEXPR_operatorEQV_:\n \t  reduced = ffebld_new_eqv (left_expr, expr);\n \t  if (ffe_is_ugly_logint ())\n \t    reduced = ffeexpr_reduced_ugly2log_ (reduced, left_operand, operator,\n-\t\t\t\t\t\t operand);\n+\t\t\t\t\t\t operand, NULL);\n \t  reduced = ffeexpr_reduced_bool2_ (reduced, left_operand, operator,\n \t\t\t\t\t    operand);\n \t  reduced = ffeexpr_collapse_eqv (reduced, operator->token);\n@@ -9033,7 +9056,7 @@ ffeexpr_reduce_ (void)\n \t  reduced = ffebld_new_neqv (left_expr, expr);\n \t  if (ffe_is_ugly_logint ())\n \t    reduced = ffeexpr_reduced_ugly2log_ (reduced, left_operand, operator,\n-\t\t\t\t\t\t operand);\n+\t\t\t\t\t\t operand, NULL);\n \t  reduced = ffeexpr_reduced_bool2_ (reduced, left_operand, operator,\n \t\t\t\t\t    operand);\n \t  reduced = ffeexpr_collapse_neqv (reduced, operator->token);\n@@ -10514,7 +10537,7 @@ ffeexpr_reduced_ugly2_ (ffebld reduced, ffeexprExpr_ l, ffeexprExpr_ op,\n \n static ffebld\n ffeexpr_reduced_ugly2log_ (ffebld reduced, ffeexprExpr_ l, ffeexprExpr_ op,\n-\t\t\t   ffeexprExpr_ r)\n+\t\t\t   ffeexprExpr_ r, bool *bothlogical)\n {\n   ffeinfo linfo, rinfo;\n   ffeinfoBasictype lbt, rbt;\n@@ -10593,6 +10616,32 @@ ffeexpr_reduced_ugly2log_ (ffebld reduced, ffeexprExpr_ l, ffeexprExpr_ op,\n       /* else Leave it alone. */\n     }\n \n+  if (lbt == FFEINFO_basictypeLOGICAL)\n+    {\n+      ffebld_set_left (reduced,\n+\t\t       ffeexpr_convert (ffebld_left (reduced),\n+\t\t\t\t\tl->token, op->token,\n+\t\t\t\t\tFFEINFO_basictypeINTEGER,\n+\t\t\t\t\tFFEINFO_kindtypeINTEGERDEFAULT, 0,\n+\t\t\t\t\tFFETARGET_charactersizeNONE,\n+\t\t\t\t\tFFEEXPR_contextLET));\n+    }\n+\n+  if (rbt == FFEINFO_basictypeLOGICAL)\n+    {\n+      ffebld_set_right (reduced,\n+\t\t\tffeexpr_convert (ffebld_right (reduced),\n+\t\t\t\t\t r->token, op->token,\n+\t\t\t\t\t FFEINFO_basictypeINTEGER,\n+\t\t\t\t\t FFEINFO_kindtypeINTEGERDEFAULT, 0,\n+\t\t\t\t\t FFETARGET_charactersizeNONE,\n+\t\t\t\t\t FFEEXPR_contextLET));\n+    }\n+\n+  if (bothlogical != NULL)\n+    *bothlogical = (lbt == FFEINFO_basictypeLOGICAL\n+\t\t    && rbt == FFEINFO_basictypeLOGICAL);\n+\n   return reduced;\n }\n "}]}