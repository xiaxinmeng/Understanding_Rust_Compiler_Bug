{"sha": "c5c7f763304968fceca1b40a7ffb9851c0df7f7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVjN2Y3NjMzMDQ5NjhmY2VjYTFiNDBhN2ZmYjk4NTFjMGRmN2Y3Yw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2007-04-06T09:21:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-04-06T09:21:24Z"}, "message": "2007-04-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_strm.adb\n\t(Build_Mutable_Record_Write_Procedure): For an Unchecked_Union type, use\n\t discriminant defaults.\n\t(Build_Record_Or_Elementary_Output_Procedure): Ditto.\n\t(Make_Component_List_Attributes): Ditto.\n\nFrom-SVN: r123568", "tree": {"sha": "c3bf9333d359eafbed5740e7cdf296c1512e1ceb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3bf9333d359eafbed5740e7cdf296c1512e1ceb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5c7f763304968fceca1b40a7ffb9851c0df7f7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5c7f763304968fceca1b40a7ffb9851c0df7f7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5c7f763304968fceca1b40a7ffb9851c0df7f7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5c7f763304968fceca1b40a7ffb9851c0df7f7c/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "86109281fd81a6ee378e08c86bec59a3e3a6d34a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86109281fd81a6ee378e08c86bec59a3e3a6d34a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86109281fd81a6ee378e08c86bec59a3e3a6d34a"}], "stats": {"total": 90, "additions": 55, "deletions": 35}, "files": [{"sha": "53f9c577800b608f23c6b48c18a1cc8af7984d17", "filename": "gcc/ada/exp_strm.adb", "status": "modified", "additions": 55, "deletions": 35, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c7f763304968fceca1b40a7ffb9851c0df7f7c/gcc%2Fada%2Fexp_strm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c7f763304968fceca1b40a7ffb9851c0df7f7c/gcc%2Fada%2Fexp_strm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_strm.adb?ref=c5c7f763304968fceca1b40a7ffb9851c0df7f7c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -954,24 +954,34 @@ package body Exp_Strm is\n    is\n       Stms  : List_Id;\n       Disc  : Entity_Id;\n+      D_Ref : Node_Id;\n \n    begin\n       Stms := New_List;\n       Disc := First_Discriminant (Typ);\n \n       --  Generate Writes for the discriminants of the type\n+      --  If the type is an unchecked union, use the default values of\n+      --  the discriminants, because they are not stored.\n \n       while Present (Disc) loop\n+         if Is_Unchecked_Union (Typ) then\n+            D_Ref :=\n+               New_Copy_Tree (Discriminant_Default_Value (Disc));\n+         else\n+            D_Ref :=\n+              Make_Selected_Component (Loc,\n+                Prefix => Make_Identifier (Loc, Name_V),\n+                Selector_Name => New_Occurrence_Of (Disc, Loc));\n+         end if;\n \n          Append_To (Stms,\n            Make_Attribute_Reference (Loc,\n              Prefix => New_Occurrence_Of (Etype (Disc), Loc),\n                Attribute_Name => Name_Write,\n                Expressions => New_List (\n                  Make_Identifier (Loc, Name_S),\n-                 Make_Selected_Component (Loc,\n-                   Prefix => Make_Identifier (Loc, Name_V),\n-                   Selector_Name => New_Occurrence_Of (Disc, Loc)))));\n+                 D_Ref)));\n \n          Next_Discriminant (Disc);\n       end loop;\n@@ -986,15 +996,6 @@ package body Exp_Strm is\n \n       --  Write the discriminants before the rest of the components, so\n       --  that discriminant values are properly set of variants, etc.\n-      --  If this is an unchecked union, the stream procedure is erroneous\n-      --  because there are no discriminants to write.\n-\n-      if Is_Unchecked_Union (Typ) then\n-         Stms :=\n-           New_List (\n-             Make_Raise_Program_Error (Loc,\n-               Reason => PE_Unchecked_Union_Restriction));\n-      end if;\n \n       if Is_Non_Empty_List (\n         Statements (Handled_Statement_Sequence (Decl)))\n@@ -1121,8 +1122,9 @@ package body Exp_Strm is\n       Decl : out Node_Id;\n       Pnam : out Entity_Id)\n    is\n-      Stms : List_Id;\n-      Disc : Entity_Id;\n+      Stms     : List_Id;\n+      Disc     : Entity_Id;\n+      Disc_Ref : Node_Id;\n \n    begin\n       Stms := New_List;\n@@ -1134,16 +1136,29 @@ package body Exp_Strm is\n          Disc := First_Discriminant (Typ);\n \n          while Present (Disc) loop\n+\n+            --  If the type is an unchecked union, it must have default\n+            --  discriminants (this is checked earlier), and those defaults\n+            --  are written out to the stream.\n+\n+            if Is_Unchecked_Union (Typ) then\n+               Disc_Ref := New_Copy_Tree (Discriminant_Default_Value (Disc));\n+\n+            else\n+               Disc_Ref :=\n+                 Make_Selected_Component (Loc,\n+                   Prefix => Make_Identifier (Loc, Name_V),\n+                   Selector_Name => New_Occurrence_Of (Disc, Loc));\n+            end if;\n+\n             Append_To (Stms,\n               Make_Attribute_Reference (Loc,\n                 Prefix =>\n                   New_Occurrence_Of (Stream_Base_Type (Etype (Disc)), Loc),\n                 Attribute_Name => Name_Write,\n                 Expressions => New_List (\n                   Make_Identifier (Loc, Name_S),\n-                  Make_Selected_Component (Loc,\n-                    Prefix => Make_Identifier (Loc, Name_V),\n-                    Selector_Name => New_Occurrence_Of (Disc, Loc)))));\n+                  Disc_Ref)));\n \n             Next_Discriminant (Disc);\n          end loop;\n@@ -1250,25 +1265,18 @@ package body Exp_Strm is\n          V      : Node_Id;\n          DC     : Node_Id;\n          DCH    : List_Id;\n+         D_Ref  : Node_Id;\n \n       begin\n          Result := Make_Field_Attributes (CI);\n \n-         --  If a component is an unchecked union, there is no discriminant\n-         --  and we cannot generate a read/write procedure for it.\n-\n          if Present (VP) then\n-            if Is_Unchecked_Union (Scope (Entity (Name (VP)))) then\n-               return New_List (\n-                 Make_Raise_Program_Error (Sloc (VP),\n-                   Reason => PE_Unchecked_Union_Restriction));\n-            end if;\n+            Alts := New_List;\n \n             V := First_Non_Pragma (Variants (VP));\n-            Alts := New_List;\n             while Present (V) loop\n-\n                DCH := New_List;\n+\n                DC := First (Discrete_Choices (V));\n                while Present (DC) loop\n                   Append_To (DCH, New_Copy_Tree (DC));\n@@ -1287,15 +1295,27 @@ package body Exp_Strm is\n             --  of for the selector, since there are cases in which we make a\n             --  reference to a hidden discriminant that is not visible.\n \n-            Append_To (Result,\n-              Make_Case_Statement (Loc,\n-                Expression =>\n+            --  If the enclosing record is an unchecked_union, we use the\n+            --  default expressions for the discriminant (it must exist)\n+            --  because we cannot generate a reference to it, given that\n+            --  it is not stored..\n+\n+            if Is_Unchecked_Union (Scope (Entity (Name (VP)))) then\n+               D_Ref :=\n+                 New_Copy_Tree\n+                   (Discriminant_Default_Value (Entity (Name (VP))));\n+            else\n+               D_Ref :=\n                   Make_Selected_Component (Loc,\n                     Prefix => Make_Identifier (Loc, Name_V),\n                     Selector_Name =>\n-                      New_Occurrence_Of (Entity (Name (VP)), Loc)),\n-                Alternatives => Alts));\n+                      New_Occurrence_Of (Entity (Name (VP)), Loc));\n+            end if;\n \n+            Append_To (Result,\n+              Make_Case_Statement (Loc,\n+                Expression => D_Ref,\n+                Alternatives => Alts));\n          end if;\n \n          return Result;\n@@ -1323,8 +1343,8 @@ package body Exp_Strm is\n            and then No (Find_Inherited_TSS (Field_Typ, TSS_Names (Nam)))\n          then\n             --  The declaration is illegal per 13.13.2(9/1), and this is\n-            --  enforced in Exp_Ch3.Check_Stream_Attributes. Keep the\n-            --  caller happy by returning a null statement.\n+            --  enforced in Exp_Ch3.Check_Stream_Attributes. Keep the caller\n+            --  happy by returning a null statement.\n \n             return Make_Null_Statement (Loc);\n          end if;"}]}