{"sha": "3e7cf2e6c0ee30b83aa158b7bd2b2eb9a686c1c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U3Y2YyZTZjMGVlMzBiODNhYTE1OGI3YmQyYjJlYjlhNjg2YzFjMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-11-14T01:02:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-11-14T01:02:16Z"}, "message": "re PR ipa/92421 (ICE in inline_small_functions, at ipa-inline.c:2001 since r277759)\n\n\tPR ipa/92421\n\t* g++.dg/torture/pr92421.C: Add -Wno-return-type to\n\tdg-additional-options.  Avoid -Wwrite-string warnings, most of\n\t-Wreturn-type warnings, define bf ctor.  Use struct instead of class\n\twith public: at the start.\n\nFrom-SVN: r278192", "tree": {"sha": "247aff047f32465ad8ba8e8ffc9538fe848793b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/247aff047f32465ad8ba8e8ffc9538fe848793b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e7cf2e6c0ee30b83aa158b7bd2b2eb9a686c1c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e7cf2e6c0ee30b83aa158b7bd2b2eb9a686c1c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e7cf2e6c0ee30b83aa158b7bd2b2eb9a686c1c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e7cf2e6c0ee30b83aa158b7bd2b2eb9a686c1c3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49084d390a9dcc0425dcac07a7cb3cfc2f8d6a27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49084d390a9dcc0425dcac07a7cb3cfc2f8d6a27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49084d390a9dcc0425dcac07a7cb3cfc2f8d6a27"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "d480dacd4698ac2551afad7fd4bb07beee534702", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7cf2e6c0ee30b83aa158b7bd2b2eb9a686c1c3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7cf2e6c0ee30b83aa158b7bd2b2eb9a686c1c3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3e7cf2e6c0ee30b83aa158b7bd2b2eb9a686c1c3", "patch": "@@ -1,5 +1,11 @@\n 2019-11-14  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR ipa/92421\n+\t* g++.dg/torture/pr92421.C: Add -Wno-return-type to\n+\tdg-additional-options.  Avoid -Wwrite-string warnings, most of\n+\t-Wreturn-type warnings, define bf ctor.  Use struct instead of class\n+\twith public: at the start.\n+\n \t* g++.dg/cpp0x/alias-decl-pr92206-3.C: Require effective target c++14\n \trather than c++11.\n "}, {"sha": "2146e9416dbb74286a0f830a3ac3ca6b06e266af", "filename": "gcc/testsuite/g++.dg/torture/pr92421.C", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7cf2e6c0ee30b83aa158b7bd2b2eb9a686c1c3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr92421.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7cf2e6c0ee30b83aa158b7bd2b2eb9a686c1c3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr92421.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr92421.C?ref=3e7cf2e6c0ee30b83aa158b7bd2b2eb9a686c1c3", "patch": "@@ -1,55 +1,49 @@\n-/* { dg-do compile } */\n+// PR ipa/92421\n+// { dg-do compile }\n+// { dg-additional-options \"-Wno-return-type\" }\n+\n typedef long a;\n void *b, *c;\n template <typename, typename> class d {};\n template <typename e, typename f> bool operator!=(d<e, f>, d<e, f>);\n-class g {\n-public:\n-  g(char *);\n+struct g {\n+  g(const char *);\n };\n-class j {\n-public:\n+struct j {\n   j();\n   void h();\n   void i();\n   void aj();\n };\n-class m {\n-public:\n+struct m {\n   m(bool);\n };\n-class n {\n-public:\n+struct n {\n   operator a();\n };\n-class o {\n-public:\n+struct o {\n   long am();\n };\n-class H {\n-public:\n+struct H {\n   class p {};\n   virtual bool accept(const char *, unsigned long, p *, bool);\n };\n-class q : H {\n-public:\n-  class r {\n-  public:\n+struct q : H {\n+  struct r {\n     enum at { au, av, aw };\n   };\n   enum { ax };\n-  virtual void ay(char *, int, const char *, r::at, char *);\n+  virtual void ay(const char *, int, const char *, r::at, const char *);\n   virtual bool az(const g &, unsigned = ax);\n   virtual bool ba(const int &, p *, bool);\n   void bb(char *bc, long bd, char *, long be) {\n-    class bf : public p {\n-    public:\n-      bf(long);\n+    struct bf : public p {\n+      bf(long) {}\n     } bg(be);\n     accept(bc, bd, &bg, true);\n   }\n };\n-class s {\n+struct s {\n   q *bi;\n   bool bj();\n };\n@@ -109,6 +103,7 @@ template <class bk> class t : q {\n     while (kit != df)\n       ;\n     cx();\n+    return false;\n   }\n   bool az(const g &, unsigned) {\n     t dj;\n@@ -157,8 +152,7 @@ template <class bk> class t : q {\n   O db[6];\n   bool bp;\n };\n-class w : q {\n-public:\n+struct w : q {\n   void dn();\n   bool l() {\n     m(true);\n@@ -171,4 +165,5 @@ public:\n bool s::bj() {\n   bi->az(\"\");\n   new t<w>;\n+  return false;\n }"}]}