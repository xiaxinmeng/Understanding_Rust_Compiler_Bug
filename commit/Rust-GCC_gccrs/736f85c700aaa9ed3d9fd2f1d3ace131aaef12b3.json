{"sha": "736f85c700aaa9ed3d9fd2f1d3ace131aaef12b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM2Zjg1YzcwMGFhYTllZDNkOWZkMmYxZDNhY2UxMzFhYWVmMTJiMw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2000-07-26T03:50:56Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2000-07-26T03:50:56Z"}, "message": "c-decl.c (finish_enum): Convert enumerations that fit in an `int' to `int'.\n\n* c-decl.c (finish_enum): Convert enumerations that fit in an\n`int' to `int'.\n(build_enumerator): In pedantic mode, cast to `int' those that\ndon't.\n\nFrom-SVN: r35259", "tree": {"sha": "0f4eaa5bca3fe47755cb48e5e41885c12e4ec465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f4eaa5bca3fe47755cb48e5e41885c12e4ec465"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/736f85c700aaa9ed3d9fd2f1d3ace131aaef12b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/736f85c700aaa9ed3d9fd2f1d3ace131aaef12b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/736f85c700aaa9ed3d9fd2f1d3ace131aaef12b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/736f85c700aaa9ed3d9fd2f1d3ace131aaef12b3/comments", "author": null, "committer": null, "parents": [{"sha": "54ffbc76a662a4c00d2936655fdd505a22337bb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ffbc76a662a4c00d2936655fdd505a22337bb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54ffbc76a662a4c00d2936655fdd505a22337bb7"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "52399578e99212b0a93d181b58b8fdb42f162047", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736f85c700aaa9ed3d9fd2f1d3ace131aaef12b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736f85c700aaa9ed3d9fd2f1d3ace131aaef12b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=736f85c700aaa9ed3d9fd2f1d3ace131aaef12b3", "patch": "@@ -1,3 +1,10 @@\n+2000-07-26  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* c-decl.c (finish_enum): Convert enumerations that fit in an\n+\t`int' to `int'.\n+\t(build_enumerator): In pedantic mode, cast to `int' those that\n+\tdon't.\n+\n 2000-07-25  Rodney Brown  <RodneyBrown@pmsc.com>\n \n \t* config/alpha/osf.h (SIZE_TYPE, PTRDIFF_TYPE): New."}, {"sha": "d80e3d4a5da9b379ba36f097287785f38391b84d", "filename": "gcc/c-decl.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736f85c700aaa9ed3d9fd2f1d3ace131aaef12b3/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736f85c700aaa9ed3d9fd2f1d3ace131aaef12b3/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=736f85c700aaa9ed3d9fd2f1d3ace131aaef12b3", "patch": "@@ -5562,7 +5562,7 @@ finish_enum (enumtype, values, attributes)\n      tree attributes;\n {\n   register tree pair, tem;\n-  tree minnode = 0, maxnode = 0;\n+  tree minnode = 0, maxnode = 0, enum_value_type;\n   int precision, unsign;\n   int toplevel = (global_binding_level == current_binding_level);\n \n@@ -5603,6 +5603,11 @@ finish_enum (enumtype, values, attributes)\n       precision = TYPE_PRECISION (long_long_integer_type_node);\n     }\n \n+  if (precision == TYPE_PRECISION (integer_type_node))\n+    enum_value_type = type_for_size (precision, 0);\n+  else\n+    enum_value_type = enumtype;\n+\n   TYPE_MIN_VALUE (enumtype) = minnode;\n   TYPE_MAX_VALUE (enumtype) = maxnode;\n   TYPE_PRECISION (enumtype) = precision;\n@@ -5629,7 +5634,18 @@ finish_enum (enumtype, values, attributes)\n \t  DECL_ALIGN (enu) = TYPE_ALIGN (enumtype);\n \t  DECL_USER_ALIGN (enu) = TYPE_USER_ALIGN (enumtype);\n \t  DECL_MODE (enu) = TYPE_MODE (enumtype);\n-\t  DECL_INITIAL (enu) = convert (enumtype, DECL_INITIAL (enu));\n+\n+\t  /* The ISO C Standard mandates enumerators to have type int,\n+\t     even though the underlying type of an enum type is\n+\t     unspecified.  Here we convert any enumerators that fit in\n+\t     an int to type int, to avoid promotions to unsigned types\n+\t     when comparing integers with enumerators that fit in the\n+\t     int range.  When -pedantic is given, build_enumerator()\n+\t     would have already taken care of those that don't fit.  */\n+\t  if (int_fits_type_p (DECL_INITIAL (enu), enum_value_type))\n+\t    DECL_INITIAL (enu) = convert (enum_value_type, DECL_INITIAL (enu));\n+\t  else\n+\t    DECL_INITIAL (enu) = convert (enumtype, DECL_INITIAL (enu));\n \n \t  TREE_PURPOSE (pair) = DECL_NAME (enu);\n \t  TREE_VALUE (pair) = DECL_INITIAL (enu);\n@@ -5706,7 +5722,7 @@ build_enumerator (name, value)\n   if (pedantic && ! int_fits_type_p (value, integer_type_node))\n     {\n       pedwarn (\"ANSI C restricts enumerator values to range of `int'\");\n-      value = integer_zero_node;\n+      value = convert (integer_type_node, value);\n     }\n \n   /* Set basis for default for next value.  */"}]}