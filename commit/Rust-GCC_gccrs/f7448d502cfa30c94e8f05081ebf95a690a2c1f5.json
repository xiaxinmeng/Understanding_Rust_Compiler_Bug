{"sha": "f7448d502cfa30c94e8f05081ebf95a690a2c1f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc0NDhkNTAyY2ZhMzBjOTRlOGYwNTA4MWViZjk1YTY5MGEyYzFmNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-03-12T18:34:42Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-03-12T18:34:42Z"}, "message": "reg-stack.c (move_for_stack_reg): Remove local variable push_insn.\n\n\t* reg-stack.c (move_for_stack_reg): Remove local variable\n\tpush_insn.\n\t(compare_for_stack_reg): Remove local variable flags_user.\n\t(convert_regs_1): Remove local variable deleted.\n\nFrom-SVN: r96345", "tree": {"sha": "dcffacad581053ef2603bfd8943b5a74b8376da7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcffacad581053ef2603bfd8943b5a74b8376da7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7448d502cfa30c94e8f05081ebf95a690a2c1f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7448d502cfa30c94e8f05081ebf95a690a2c1f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7448d502cfa30c94e8f05081ebf95a690a2c1f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7448d502cfa30c94e8f05081ebf95a690a2c1f5/comments", "author": null, "committer": null, "parents": [{"sha": "70e2829d25eff23a16058a7dc4843e8b49aff9f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70e2829d25eff23a16058a7dc4843e8b49aff9f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70e2829d25eff23a16058a7dc4843e8b49aff9f8"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "146e988f06ebcc3e2c5ec31ce5e9793603a015bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7448d502cfa30c94e8f05081ebf95a690a2c1f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7448d502cfa30c94e8f05081ebf95a690a2c1f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7448d502cfa30c94e8f05081ebf95a690a2c1f5", "patch": "@@ -29,6 +29,11 @@\n \t* gimplify.c (gimplify_expr): Remove local variables r0 and\n \tr1.\n \n+\t* reg-stack.c (move_for_stack_reg): Remove local variable\n+\tpush_insn.\n+\t(compare_for_stack_reg): Remove local variable flags_user.\n+\t(convert_regs_1): Remove local variable deleted.\n+\n 2005-03-12  Geoffrey Keating  <geoffk@apple.com>\n \n \t* c-lex.c (c_lex_with_flags): Add parameter to call to "}, {"sha": "87fef58cc55accfb595eae1249fcd53b351e863a", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7448d502cfa30c94e8f05081ebf95a690a2c1f5/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7448d502cfa30c94e8f05081ebf95a690a2c1f5/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=f7448d502cfa30c94e8f05081ebf95a690a2c1f5", "patch": "@@ -1132,11 +1132,11 @@ move_for_stack_reg (rtx insn, stack regstack, rtx pat)\n \t     available.  Push the source value here if the register\n \t     stack is not full, and then write the value to memory via\n \t     a pop.  */\n-\t  rtx push_rtx, push_insn;\n+\t  rtx push_rtx;\n \t  rtx top_stack_reg = FP_MODE_REG (FIRST_STACK_REG, GET_MODE (src));\n \n \t  push_rtx = gen_movxf (top_stack_reg, top_stack_reg);\n-\t  push_insn = emit_insn_before (push_rtx, insn);\n+\t  emit_insn_before (push_rtx, insn);\n \t  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_DEAD, top_stack_reg,\n \t\t\t\t\t\tREG_NOTES (insn));\n \t}\n@@ -1308,11 +1308,9 @@ compare_for_stack_reg (rtx insn, stack regstack, rtx pat_src)\n {\n   rtx *src1, *src2;\n   rtx src1_note, src2_note;\n-  rtx flags_user;\n \n   src1 = get_true_reg (&XEXP (pat_src, 0));\n   src2 = get_true_reg (&XEXP (pat_src, 1));\n-  flags_user = next_flags_user (insn);\n \n   /* ??? If fxch turns out to be cheaper than fstp, give priority to\n      registers that die in this insn - move those to stack top first.  */\n@@ -2815,14 +2813,13 @@ convert_regs_1 (FILE *file, basic_block block)\n {\n   struct stack_def regstack;\n   block_info bi = BLOCK_INFO (block);\n-  int deleted, inserted, reg;\n+  int inserted, reg;\n   rtx insn, next;\n   edge e, beste = NULL;\n   bool control_flow_insn_deleted = false;\n   edge_iterator ei;\n \n   inserted = 0;\n-  deleted = 0;\n   any_malformed_asm = false;\n \n   /* Find the edge we will copy stack from.  It should be the most frequent"}]}