{"sha": "f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI3NWQ3M2E1N2YxZTVhMDdmYmQ0OTc4ZjRiNDQ1N2E1ZWFhMWUzOQ==", "commit": {"author": {"name": "Stam Markianos-Wright", "email": "stam.markianos-wright@arm.com", "date": "2020-01-16T14:47:30Z"}, "committer": {"name": "Stam Markianos-Wright", "email": "stam.markianos-wright@arm.com", "date": "2020-01-16T14:47:30Z"}, "message": "[GCC][PATCH][AArch64]Add ACLE intrinsics for bfdot for ARMv8.6 Extension\n\n2020-01-16  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def (aarch64_bfdot,\n\taarch64_bfdot_lane, aarch64_bfdot_laneq): New.\n\t* config/aarch64/aarch64-simd.md (aarch64_bfdot, aarch64_bfdot_lane,\n\taarch64_bfdot_laneq): New.\n\t* config/aarch64/arm_bf16.h (vbfdot_f32, vbfdotq_f32,\n\tvbfdot_lane_f32, vbfdotq_lane_f32, vbfdot_laneq_f32,\n\tvbfdotq_laneq_f32): New.\n\t* config/aarch64/iterators.md (UNSPEC_BFDOT, Vbfdottype,\n\tVBFMLA_W, VBF): New.\n\t(isquadop): Add V4BF, V8BF.\n\n2020-01-16  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/bfdot-1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/bfdot-2.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/bfdot-3.c: New.", "tree": {"sha": "5ffef807bffdd82a7852625e515c0ebf7411af74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ffef807bffdd82a7852625e515c0ebf7411af74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39/comments", "author": {"login": "Stammark", "id": 30555766, "node_id": "MDQ6VXNlcjMwNTU1NzY2", "avatar_url": "https://avatars.githubusercontent.com/u/30555766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stammark", "html_url": "https://github.com/Stammark", "followers_url": "https://api.github.com/users/Stammark/followers", "following_url": "https://api.github.com/users/Stammark/following{/other_user}", "gists_url": "https://api.github.com/users/Stammark/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stammark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stammark/subscriptions", "organizations_url": "https://api.github.com/users/Stammark/orgs", "repos_url": "https://api.github.com/users/Stammark/repos", "events_url": "https://api.github.com/users/Stammark/events{/privacy}", "received_events_url": "https://api.github.com/users/Stammark/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Stammark", "id": 30555766, "node_id": "MDQ6VXNlcjMwNTU1NzY2", "avatar_url": "https://avatars.githubusercontent.com/u/30555766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stammark", "html_url": "https://github.com/Stammark", "followers_url": "https://api.github.com/users/Stammark/followers", "following_url": "https://api.github.com/users/Stammark/following{/other_user}", "gists_url": "https://api.github.com/users/Stammark/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stammark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stammark/subscriptions", "organizations_url": "https://api.github.com/users/Stammark/orgs", "repos_url": "https://api.github.com/users/Stammark/repos", "events_url": "https://api.github.com/users/Stammark/events{/privacy}", "received_events_url": "https://api.github.com/users/Stammark/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d916538965ea260c6bcdb1d46581f6d572017ce8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d916538965ea260c6bcdb1d46581f6d572017ce8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d916538965ea260c6bcdb1d46581f6d572017ce8"}], "stats": {"total": 337, "additions": 332, "deletions": 5}, "files": [{"sha": "d11b8d3e62a34992376d44bbf37a3c608d442053", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39", "patch": "@@ -1,3 +1,16 @@\n+2020-01-16  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (aarch64_bfdot,\n+\taarch64_bfdot_lane, aarch64_bfdot_laneq): New.\n+\t* config/aarch64/aarch64-simd.md (aarch64_bfdot, aarch64_bfdot_lane,\n+\taarch64_bfdot_laneq): New.\n+\t* config/aarch64/arm_bf16.h (vbfdot_f32, vbfdotq_f32,\n+\tvbfdot_lane_f32, vbfdotq_lane_f32, vbfdot_laneq_f32,\n+\tvbfdotq_laneq_f32): New.\n+\t* config/aarch64/iterators.md (UNSPEC_BFDOT, Vbfdottype,\n+\tVBFMLA_W, VBF): New.\n+\t(isquadop): Add V4BF, V8BF.\n+\n 2020-01-16  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n \n \t* config/aarch64/aarch64-builtins.c: (enum aarch64_type_qualifiers):"}, {"sha": "a118f4f121de067c0a80f691b852247b0ab27f7a", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39", "patch": "@@ -687,3 +687,8 @@\n   BUILTIN_VSFDF (UNOP, frint32x, 0)\n   BUILTIN_VSFDF (UNOP, frint64z, 0)\n   BUILTIN_VSFDF (UNOP, frint64x, 0)\n+\n+  /* Implemented by aarch64_bfdot{_lane}{q}<mode>.  */\n+  VAR2 (TERNOP, bfdot, 0, v2sf, v4sf)\n+  VAR2 (QUADOP_LANE_PAIR, bfdot_lane, 0, v2sf, v4sf)\n+  VAR2 (QUADOP_LANE_PAIR, bfdot_laneq, 0, v2sf, v4sf)"}, {"sha": "97f46f96968a6bc2f93bbc812931537b819b3b19", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39", "patch": "@@ -7059,3 +7059,35 @@\n   \"xtn\\t%0.<Vntype>, %1.<Vtype>\"\n   [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n )\n+\n+(define_insn \"aarch64_bfdot<mode>\"\n+  [(set (match_operand:VDQSF 0 \"register_operand\" \"=w\")\n+\t(plus:VDQSF\n+\t  (unspec:VDQSF\n+\t   [(match_operand:<VBFMLA_W> 2 \"register_operand\" \"w\")\n+\t    (match_operand:<VBFMLA_W> 3 \"register_operand\" \"w\")]\n+\t    UNSPEC_BFDOT)\n+\t  (match_operand:VDQSF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_BF16_SIMD\"\n+  \"bfdot\\t%0.<Vtype>, %2.<Vbfdottype>, %3.<Vbfdottype>\"\n+  [(set_attr \"type\" \"neon_dot<q>\")]\n+)\n+\n+(define_insn \"aarch64_bfdot_lane<VBF:isquadop><VDQSF:mode>\"\n+  [(set (match_operand:VDQSF 0 \"register_operand\" \"=w\")\n+\t(plus:VDQSF\n+\t  (unspec:VDQSF\n+\t   [(match_operand:<VDQSF:VBFMLA_W> 2 \"register_operand\" \"w\")\n+\t    (match_operand:VBF 3 \"register_operand\" \"w\")\n+\t    (match_operand:SI 4 \"const_int_operand\" \"n\")]\n+\t    UNSPEC_BFDOT)\n+\t  (match_operand:VDQSF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_BF16_SIMD\"\n+{\n+  int nunits = GET_MODE_NUNITS (<VBF:MODE>mode).to_constant ();\n+  int lane = INTVAL (operands[4]);\n+  operands[4] = gen_int_mode (ENDIAN_LANE_N (nunits / 2, lane), SImode);\n+  return \"bfdot\\t%0.<VDQSF:Vtype>, %2.<VDQSF:Vbfdottype>, %3.2h[%4]\";\n+}\n+  [(set_attr \"type\" \"neon_dot<VDQSF:q>\")]\n+)"}, {"sha": "7f05c3f9eca844b0e7b824a191223a4906c825b1", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39", "patch": "@@ -34611,6 +34611,57 @@ vrnd64xq_f64 (float64x2_t __a)\n \n #include \"arm_bf16.h\"\n \n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.2-a+bf16\")\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbfdot_f32 (float32x2_t __r, bfloat16x4_t __a, bfloat16x4_t __b)\n+{\n+  return __builtin_aarch64_bfdotv2sf (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbfdotq_f32 (float32x4_t __r, bfloat16x8_t __a, bfloat16x8_t __b)\n+{\n+  return __builtin_aarch64_bfdotv4sf (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbfdot_lane_f32 (float32x2_t __r, bfloat16x4_t __a, bfloat16x4_t __b,\n+\t\t const int __index)\n+{\n+  return __builtin_aarch64_bfdot_lanev2sf (__r, __a, __b, __index);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbfdotq_lane_f32 (float32x4_t __r, bfloat16x8_t __a, bfloat16x4_t __b,\n+\t\t  const int __index)\n+{\n+  return __builtin_aarch64_bfdot_lanev4sf (__r, __a, __b, __index);\n+}\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbfdot_laneq_f32 (float32x2_t __r, bfloat16x4_t __a, bfloat16x8_t __b,\n+\t\t  const int __index)\n+{\n+  return __builtin_aarch64_bfdot_laneqv2sf (__r, __a, __b, __index);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbfdotq_laneq_f32 (float32x4_t __r, bfloat16x8_t __a, bfloat16x8_t __b,\n+\t\t   const int __index)\n+{\n+  return __builtin_aarch64_bfdot_laneqv4sf (__r, __a, __b, __index);\n+}\n+\n+#pragma GCC pop_options\n+\n /* AdvSIMD 8-bit Integer Matrix Multiply (I8MM) intrinsics.  */\n \n #pragma GCC push_options"}, {"sha": "661c3e7b4a79e20cabd1ed93d8152108eef90c02", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39", "patch": "@@ -122,6 +122,9 @@\n ;; Quad vector with only 2 element modes.\n (define_mode_iterator VQ_2E [V2DI V2DF])\n \n+;; BFmode vector modes.\n+(define_mode_iterator VBF [V4BF V8BF])\n+\n ;; This mode iterator allows :P to be used for patterns that operate on\n ;; addresses in different modes.  In LP64, only DI will match, while in\n ;; ILP32, either can match.\n@@ -801,6 +804,7 @@\n     UNSPEC_USUBWT\t; Used in aarch64-sve2.md.\n     UNSPEC_USDOT\t; Used in aarch64-simd.md.\n     UNSPEC_SUDOT\t; Used in aarch64-simd.md.\n+    UNSPEC_BFDOT\t; Used in aarch64-simd.md.\n ])\n \n ;; ------------------------------------------------------------------\n@@ -1451,6 +1455,9 @@\n ;; Register suffix for DOTPROD input types from the return type.\n (define_mode_attr Vdottype [(V2SI \"8b\") (V4SI \"16b\")])\n \n+;; Register suffix for BFDOT input types from the return type.\n+(define_mode_attr Vbfdottype [(V2SF \"4h\") (V4SF \"8h\")])\n+\n ;; Sum of lengths of instructions needed to move vector registers of a mode.\n (define_mode_attr insn_count [(OI \"8\") (CI \"12\") (XI \"16\")])\n \n@@ -1461,11 +1468,14 @@\n ;; Width of 2nd and 3rd arguments to fp16 vector multiply add/sub\n (define_mode_attr VFMLA_W [(V2SF \"V4HF\") (V4SF \"V8HF\")])\n \n+;; Width of 2nd and 3rd arguments to bf16 vector multiply add/sub\n+(define_mode_attr VBFMLA_W [(V2SF \"V4BF\") (V4SF \"V8BF\")])\n+\n (define_mode_attr VFMLA_SEL_W [(V2SF \"V2HF\") (V4SF \"V4HF\")])\n \n (define_mode_attr f16quad [(V2SF \"\") (V4SF \"q\")])\n \n-(define_mode_attr isquadop [(V8QI \"\") (V16QI \"q\")])\n+(define_mode_attr isquadop [(V8QI \"\") (V16QI \"q\") (V4BF \"\") (V8BF \"q\")])\n \n (define_code_attr f16mac [(plus \"a\") (minus \"s\")])\n "}, {"sha": "e5963d21333d1166b03a7d264ef80347f5a486d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39", "patch": "@@ -1,9 +1,15 @@\n 2020-01-16  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n \n-\t* gcc.target/aarch64/advsimd-intrinsics/vdot-compile-3-1.c: New test.\n-\t* gcc.target/aarch64/advsimd-intrinsics/vdot-compile-3-2.c: New test.\n-\t* gcc.target/aarch64/advsimd-intrinsics/vdot-compile-3-3.c: New test.\n-\t* gcc.target/aarch64/advsimd-intrinsics/vdot-compile-3-4.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/bfdot-1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/bfdot-2.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/bfdot-3.c: New.\n+\n+2020-01-16  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vdot-3-1.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vdot-3-2.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vdot-3-3.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vdot-3-4.c: New test.\n \n 2020-01-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n "}, {"sha": "ad51507731bbb165de64e583ebfbf8047b4eb781", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/bfdot-1.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfdot-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfdot-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfdot-1.c?ref=f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39", "patch": "@@ -0,0 +1,91 @@\n+/* { dg-do assemble { target { aarch64*-*-* } } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon }  */\n+/* { dg-additional-options \"-save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" {-O[^0]} } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+\n+#include <arm_neon.h>\n+\n+/*\n+**ufoo:\n+**\tbfdot\tv0.2s, (v1.4h, v2.4h|v2.4h, v1.4h)\n+**\tret\n+*/\n+float32x2_t ufoo(float32x2_t r, bfloat16x4_t x, bfloat16x4_t y)\n+{\n+  return vbfdot_f32 (r, x, y);\n+}\n+\n+/*\n+**ufooq:\n+**\tbfdot\tv0.4s, (v1.8h, v2.8h|v2.8h, v1.8h)\n+**\tret\n+*/\n+float32x4_t ufooq(float32x4_t r, bfloat16x8_t x, bfloat16x8_t y)\n+{\n+  return vbfdotq_f32 (r, x, y);\n+}\n+\n+/*\n+**ufoo_lane:\n+**\tbfdot\tv0.2s, v1.4h, v2.2h\\[0\\]\n+**\tret\n+*/\n+float32x2_t ufoo_lane(float32x2_t r, bfloat16x4_t x, bfloat16x4_t y)\n+{\n+  return vbfdot_lane_f32 (r, x, y, 0);\n+}\n+\n+/*\n+**ufooq_laneq:\n+**\tbfdot\tv0.4s, v1.8h, v2.2h\\[2\\]\n+**\tret\n+*/\n+float32x4_t ufooq_laneq(float32x4_t r, bfloat16x8_t x, bfloat16x8_t y)\n+{\n+  return vbfdotq_laneq_f32 (r, x, y, 2);\n+}\n+\n+/*\n+**ufoo_laneq:\n+**\tbfdot\tv0.2s, v1.4h, v2.2h\\[3\\]\n+**\tret\n+*/\n+float32x2_t ufoo_laneq(float32x2_t r, bfloat16x4_t x, bfloat16x8_t y)\n+{\n+  return vbfdot_laneq_f32 (r, x, y, 3);\n+}\n+\n+/*\n+**ufooq_lane:\n+**\tbfdot\tv0.4s, v1.8h, v2.2h\\[1\\]\n+**\tret\n+*/\n+float32x4_t ufooq_lane(float32x4_t r, bfloat16x8_t x, bfloat16x4_t y)\n+{\n+  return vbfdotq_lane_f32 (r, x, y, 1);\n+}\n+\n+/*\n+**ufoo_untied:\n+**\tmov\tv0.8b, v1.8b\n+**\tbfdot\tv0.2s, (v2.4h, v3.4h|v3.4h, v2.4h)\n+**\tret\n+*/\n+float32x2_t ufoo_untied(float32x4_t unused, float32x2_t r, bfloat16x4_t x, bfloat16x4_t y)\n+{\n+  return vbfdot_f32 (r, x, y);\n+}\n+\n+/*\n+**ufooq_lane_untied:\n+**\tmov\tv0.16b, v1.16b\n+**\tbfdot\tv0.4s, v2.8h, v3.2h\\[1\\]\n+**\tret\n+*/\n+float32x4_t ufooq_lane_untied(float32x4_t unused, float32x4_t r, bfloat16x8_t x, bfloat16x4_t y)\n+{\n+  return vbfdotq_lane_f32 (r, x, y, 1);\n+}\n+"}, {"sha": "58bdee5ac9df602b7569724200b3c9ab7c72bb28", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/bfdot-2.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfdot-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfdot-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfdot-2.c?ref=f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39", "patch": "@@ -0,0 +1,91 @@\n+/* { dg-do assemble { target { aarch64*-*-* } } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon }  */\n+/* { dg-additional-options \"-mbig-endian --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" {-O[^0]} } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+\n+#include <arm_neon.h>\n+\n+/*\n+**ufoo:\n+**\tbfdot\tv0.2s, (v1.4h, v2.4h|v2.4h, v1.4h)\n+**\tret\n+*/\n+float32x2_t ufoo(float32x2_t r, bfloat16x4_t x, bfloat16x4_t y)\n+{\n+  return vbfdot_f32 (r, x, y);\n+}\n+\n+/*\n+**ufooq:\n+**\tbfdot\tv0.4s, (v1.8h, v2.8h|v2.8h, v1.8h)\n+**\tret\n+*/\n+float32x4_t ufooq(float32x4_t r, bfloat16x8_t x, bfloat16x8_t y)\n+{\n+  return vbfdotq_f32 (r, x, y);\n+}\n+\n+/*\n+**ufoo_lane:\n+**\tbfdot\tv0.2s, v1.4h, v2.2h\\[0\\]\n+**\tret\n+*/\n+float32x2_t ufoo_lane(float32x2_t r, bfloat16x4_t x, bfloat16x4_t y)\n+{\n+  return vbfdot_lane_f32 (r, x, y, 0);\n+}\n+\n+/*\n+**ufooq_laneq:\n+**\tbfdot\tv0.4s, v1.8h, v2.2h\\[2\\]\n+**\tret\n+*/\n+float32x4_t ufooq_laneq(float32x4_t r, bfloat16x8_t x, bfloat16x8_t y)\n+{\n+  return vbfdotq_laneq_f32 (r, x, y, 2);\n+}\n+\n+/*\n+**ufoo_laneq:\n+**\tbfdot\tv0.2s, v1.4h, v2.2h\\[3\\]\n+**\tret\n+*/\n+float32x2_t ufoo_laneq(float32x2_t r, bfloat16x4_t x, bfloat16x8_t y)\n+{\n+  return vbfdot_laneq_f32 (r, x, y, 3);\n+}\n+\n+/*\n+**ufooq_lane:\n+**\tbfdot\tv0.4s, v1.8h, v2.2h\\[1\\]\n+**\tret\n+*/\n+float32x4_t ufooq_lane(float32x4_t r, bfloat16x8_t x, bfloat16x4_t y)\n+{\n+  return vbfdotq_lane_f32 (r, x, y, 1);\n+}\n+\n+/*\n+**ufoo_untied:\n+**\tmov\tv0.8b, v1.8b\n+**\tbfdot\tv0.2s, (v2.4h, v3.4h|v3.4h, v2.4h)\n+**\tret\n+*/\n+float32x2_t ufoo_untied(float32x4_t unused, float32x2_t r, bfloat16x4_t x, bfloat16x4_t y)\n+{\n+  return vbfdot_f32 (r, x, y);\n+}\n+\n+/*\n+**ufooq_lane_untied:\n+**\tmov\tv0.16b, v1.16b\n+**\tbfdot\tv0.4s, v2.8h, v3.2h\\[1\\]\n+**\tret\n+*/\n+float32x4_t ufooq_lane_untied(float32x4_t unused, float32x4_t r, bfloat16x8_t x, bfloat16x4_t y)\n+{\n+  return vbfdotq_lane_f32 (r, x, y, 1);\n+}\n+"}, {"sha": "607126203b00213d94471a1adefe16f265104af8", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/bfdot-3.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfdot-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfdot-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfdot-3.c?ref=f275d73a57f1e5a07fbd4978f4b4457a5eaa1e39", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do assemble { target { aarch64*-*-* } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon }  */\n+/* { dg-additional-options \"--save-temps\" } */\n+\n+#include <arm_neon.h>\n+\n+float32x2_t ufoo_lane(float32x2_t r, bfloat16x4_t x, bfloat16x4_t y)\n+{\n+  return vbfdot_lane_f32 (r, x, y, -1); /* { dg-error {lane -1 out of range 0 - 1} \"\" { target *-*-* } 0 } */\n+}\n+\n+float32x4_t ufooq_laneq(float32x4_t r, bfloat16x8_t x, bfloat16x8_t y)\n+{\n+  return vbfdotq_laneq_f32 (r, x, y, -1); /* { dg-error {lane -1 out of range 0 - 3} \"\" { target *-*-* } 0 } */\n+}\n+\n+float32x2_t ufoo_laneq(float32x2_t r, bfloat16x4_t x, bfloat16x8_t y)\n+{\n+  return vbfdot_laneq_f32 (r, x, y, 4); /* { dg-error {lane 4 out of range 0 - 3} \"\" { target *-*-* } 0 } */\n+}\n+\n+float32x4_t ufooq_lane(float32x4_t r, bfloat16x8_t x, bfloat16x4_t y)\n+{\n+  return vbfdotq_lane_f32 (r, x, y, 2); /* { dg-error {lane 2 out of range 0 - 1} \"\" { target *-*-* } 0 } */\n+}\n+"}]}