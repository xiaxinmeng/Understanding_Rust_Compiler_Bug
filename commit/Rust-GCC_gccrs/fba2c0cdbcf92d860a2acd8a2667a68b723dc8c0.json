{"sha": "fba2c0cdbcf92d860a2acd8a2667a68b723dc8c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJhMmMwY2RiY2Y5MmQ4NjBhMmFjZDhhMjY2N2E2OGI3MjNkYzhjMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2001-02-23T12:28:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2001-02-23T12:28:07Z"}, "message": "fold-const.c (extract_muldiv): If not MULT_EXPR, check if either operand is divisible by C.\n\n\t* fold-const.c (extract_muldiv) [case PLUS_EXPR]: If not MULT_EXPR,\n\tcheck if either operand is divisible by C.\n\t(multiple_of_p): Handle LSHIFT_EXPR with small constant shift.\n\tIf type is signed, consider negative numbers as well.\n\n\t* gcc.c-torture/execute/20010222-1.c: New test.\n\nFrom-SVN: r39996", "tree": {"sha": "e1f9f314834b3eca87bb067c1aa26c0f4f9580ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1f9f314834b3eca87bb067c1aa26c0f4f9580ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fba2c0cdbcf92d860a2acd8a2667a68b723dc8c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fba2c0cdbcf92d860a2acd8a2667a68b723dc8c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fba2c0cdbcf92d860a2acd8a2667a68b723dc8c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fba2c0cdbcf92d860a2acd8a2667a68b723dc8c0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "487f145008ff00d3d03b0aa1f6d6bcea4a84a404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/487f145008ff00d3d03b0aa1f6d6bcea4a84a404", "html_url": "https://github.com/Rust-GCC/gccrs/commit/487f145008ff00d3d03b0aa1f6d6bcea4a84a404"}], "stats": {"total": 53, "additions": 49, "deletions": 4}, "files": [{"sha": "f3ad2434057f0a29fe7440d80784bbb91d74a054", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba2c0cdbcf92d860a2acd8a2667a68b723dc8c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba2c0cdbcf92d860a2acd8a2667a68b723dc8c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fba2c0cdbcf92d860a2acd8a2667a68b723dc8c0", "patch": "@@ -1,3 +1,10 @@\n+2001-02-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* fold-const.c (extract_muldiv) [case PLUS_EXPR]: If not MULT_EXPR,\n+\tcheck if either operand is divisible by C.\n+\t(multiple_of_p): Handle LSHIFT_EXPR with small constant shift.\n+\tIf type is signed, consider negative numbers as well.\n+\n 2001-02-22  Richard Henderson  <rth@redhat.com>\n \n \t* config/ia64/crtbegin.asm (.fini): Use pc-relative relocs to"}, {"sha": "99a602cd297f944e9a9b9b5c999072461e1ecffa", "filename": "gcc/fold-const.c", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba2c0cdbcf92d860a2acd8a2667a68b723dc8c0/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba2c0cdbcf92d860a2acd8a2667a68b723dc8c0/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=fba2c0cdbcf92d860a2acd8a2667a68b723dc8c0", "patch": "@@ -4487,7 +4487,12 @@ extract_muldiv (t, c, code, wide_type)\n \t constant.  */\n       t1 = extract_muldiv (op0, c, code, wide_type);\n       t2 = extract_muldiv (op1, c, code, wide_type);\n-      if (t1 != 0 && t2 != 0)\n+      if (t1 != 0 && t2 != 0\n+\t  && (code == MULT_EXPR\n+\t      /* If not multiplication, we can only do this if either operand\n+\t\t is divisible by c.  */\n+\t      || multiple_of_p (ctype, op0, c)\n+\t      || multiple_of_p (ctype, op1, c)))\n \treturn fold (build (tcode, ctype, convert (ctype, t1),\n \t\t\t    convert (ctype, t2)));\n \n@@ -7280,6 +7285,25 @@ multiple_of_p (type, top, bottom)\n       return (multiple_of_p (type, TREE_OPERAND (top, 0), bottom)\n \t      && multiple_of_p (type, TREE_OPERAND (top, 1), bottom));\n \n+    case LSHIFT_EXPR:\n+      if (TREE_CODE (TREE_OPERAND (top, 1)) == INTEGER_CST)\n+\t{\n+\t  tree op1, t1;\n+\n+\t  op1 = TREE_OPERAND (top, 1);\n+\t  /* const_binop may not detect overflow correctly,\n+\t     so check for it explicitly here.  */\n+\t  if (TYPE_PRECISION (TREE_TYPE (size_one_node))\n+\t      > TREE_INT_CST_LOW (op1)\n+\t      && TREE_INT_CST_HIGH (op1) == 0\n+\t      && 0 != (t1 = convert (type,\n+\t\t\t\t     const_binop (LSHIFT_EXPR, size_one_node,\n+\t\t\t\t\t\t  op1, 0)))\n+\t      && ! TREE_OVERFLOW (t1))\n+\t    return multiple_of_p (type, t1, bottom);\n+\t}\n+      return 0;\n+\n     case NOP_EXPR:\n       /* Can't handle conversions from non-integral or wider integral type.  */\n       if ((TREE_CODE (TREE_TYPE (TREE_OPERAND (top, 0))) != INTEGER_TYPE)\n@@ -7293,9 +7317,10 @@ multiple_of_p (type, top, bottom)\n       return multiple_of_p (type, TREE_OPERAND (top, 0), bottom);\n \n     case INTEGER_CST:\n-      if ((TREE_CODE (bottom) != INTEGER_CST)\n-\t  || (tree_int_cst_sgn (top) < 0)\n-\t  || (tree_int_cst_sgn (bottom) < 0))\n+      if (TREE_CODE (bottom) != INTEGER_CST\n+\t  || (TREE_UNSIGNED (type)\n+\t      && (tree_int_cst_sgn (top) < 0\n+\t\t  || tree_int_cst_sgn (bottom) < 0)))\n \treturn 0;\n       return integer_zerop (const_binop (TRUNC_MOD_EXPR,\n \t\t\t\t\t top, bottom, 0));"}, {"sha": "be04efbfb8cdc9558cbfcc073167a513d5e75c0c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba2c0cdbcf92d860a2acd8a2667a68b723dc8c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba2c0cdbcf92d860a2acd8a2667a68b723dc8c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fba2c0cdbcf92d860a2acd8a2667a68b723dc8c0", "patch": "@@ -1,3 +1,7 @@\n+2001-02-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/execute/20010222-1.c: New test.\n+\n 2001-02-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.old-deja/g++.other/inline20.C: New test."}, {"sha": "c3a2b18e5f02fe595a053f2dfbdbacb76288ca0f", "filename": "gcc/testsuite/gcc.c-torture/execute/20010222-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba2c0cdbcf92d860a2acd8a2667a68b723dc8c0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010222-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba2c0cdbcf92d860a2acd8a2667a68b723dc8c0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010222-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010222-1.c?ref=fba2c0cdbcf92d860a2acd8a2667a68b723dc8c0", "patch": "@@ -0,0 +1,9 @@\n+int a[2] = { 18, 6 };\n+\n+int main ()\n+{\n+  int b = (-3 * a[0] -3 * a[1]) / 12;\n+  if (b != -6)\n+    abort ();\n+  exit (0);\n+}"}]}