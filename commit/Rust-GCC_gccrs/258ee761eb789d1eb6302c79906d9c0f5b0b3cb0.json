{"sha": "258ee761eb789d1eb6302c79906d9c0f5b0b3cb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU4ZWU3NjFlYjc4OWQxZWI2MzAyYzc5OTA2ZDljMGY1YjBiM2NiMA==", "commit": {"author": {"name": "Barrett Adair", "email": "barrettellisadair@gmail.com", "date": "2017-01-06T15:27:01Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-01-06T15:27:01Z"}, "message": "Use fold expressions to reduce std::variant instantiation depth\n\n2017-01-06  Barrett Adair  <barrettellisadair@gmail.com>\n\t    Jonathan Wakely  <jwakely@redhat.com>\n\n\t* include/std/variant (variant, swap): Replace __and_ usage with fold\n\texpressions.\n\nCo-Authored-By: Jonathan Wakely <jwakely@redhat.com>\n\nFrom-SVN: r244163", "tree": {"sha": "76bf231a2169f6f213e5a26c88069d61b7868ca6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76bf231a2169f6f213e5a26c88069d61b7868ca6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/258ee761eb789d1eb6302c79906d9c0f5b0b3cb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/258ee761eb789d1eb6302c79906d9c0f5b0b3cb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/258ee761eb789d1eb6302c79906d9c0f5b0b3cb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/258ee761eb789d1eb6302c79906d9c0f5b0b3cb0/comments", "author": {"login": "badair", "id": 2570307, "node_id": "MDQ6VXNlcjI1NzAzMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2570307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/badair", "html_url": "https://github.com/badair", "followers_url": "https://api.github.com/users/badair/followers", "following_url": "https://api.github.com/users/badair/following{/other_user}", "gists_url": "https://api.github.com/users/badair/gists{/gist_id}", "starred_url": "https://api.github.com/users/badair/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/badair/subscriptions", "organizations_url": "https://api.github.com/users/badair/orgs", "repos_url": "https://api.github.com/users/badair/repos", "events_url": "https://api.github.com/users/badair/events{/privacy}", "received_events_url": "https://api.github.com/users/badair/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ec62aa9e11eb1f915324634d889e84450b272b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ec62aa9e11eb1f915324634d889e84450b272b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ec62aa9e11eb1f915324634d889e84450b272b1"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "eee7808ab1df32b31ff74c8ca0172e129e8bbc9e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/258ee761eb789d1eb6302c79906d9c0f5b0b3cb0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/258ee761eb789d1eb6302c79906d9c0f5b0b3cb0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=258ee761eb789d1eb6302c79906d9c0f5b0b3cb0", "patch": "@@ -1,3 +1,9 @@\n+2017-01-06  Barrett Adair  <barrettellisadair@gmail.com>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/variant (variant, swap): Replace __and_ usage with fold\n+\texpressions.\n+\n 2017-01-06  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR go/78978"}, {"sha": "3d025a767d750b5b38fd9086776b078cb8c3ab48", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/258ee761eb789d1eb6302c79906d9c0f5b0b3cb0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/258ee761eb789d1eb6302c79906d9c0f5b0b3cb0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=258ee761eb789d1eb6302c79906d9c0f5b0b3cb0", "patch": "@@ -396,7 +396,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       _Variant_base(_Variant_base&& __rhs)\n-      noexcept(__and_<is_nothrow_move_constructible<_Types>...>::value)\n+      noexcept((is_nothrow_move_constructible_v<_Types> && ...))\n       {\n \tif (__rhs._M_valid())\n \t  {\n@@ -459,8 +459,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       _Variant_base&\n       operator=(_Variant_base&& __rhs)\n-      noexcept(__and_<is_nothrow_move_constructible<_Types>...,\n-\t\t      is_nothrow_move_assignable<_Types>...>::value)\n+      noexcept((is_nothrow_move_constructible_v<_Types> && ...)\n+\t  && (is_nothrow_move_assignable_v<_Types> && ...))\n       {\n \tif (this->_M_index == __rhs._M_index)\n \t  {\n@@ -865,8 +865,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { __lhs.swap(__rhs); }\n \n   template<typename... _Types>\n-    enable_if_t<!__and_<is_move_constructible<_Types>...,\n-\t\t\tis_swappable<_Types>...>::value>\n+    enable_if_t<!((is_move_constructible_v<_Types> && ...)\n+\t\t   && (is_swappable_v<_Types> && ...))>\n     swap(variant<_Types...>&, variant<_Types...>&) = delete;\n \n   class bad_variant_access : public exception\n@@ -895,13 +895,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tis_default_constructible_v<\n \t  variant_alternative_t<0, variant<_Types...>>>, variant<_Types...>>,\n       private _Enable_copy_move<\n-\t__and_<is_copy_constructible<_Types>...>::value,\n-\t__and_<is_copy_constructible<_Types>...,\n-\t       is_move_constructible<_Types>...,\n-\t       is_copy_assignable<_Types>...>::value,\n-\t__and_<is_move_constructible<_Types>...>::value,\n-\t__and_<is_move_constructible<_Types>...,\n-\t       is_move_assignable<_Types>...>::value,\n+\t(is_copy_constructible_v<_Types> && ...),\n+\t(is_copy_constructible_v<_Types> && ...)\n+\t     && (is_move_constructible_v<_Types> && ...)\n+\t     && (is_copy_assignable_v<_Types> && ...),\n+\t(is_move_constructible_v<_Types> && ...),\n+\t(is_move_constructible_v<_Types> && ...)\n+\t     && (is_move_assignable_v<_Types> && ...),\n \tvariant<_Types...>>\n     {\n     private:\n@@ -948,8 +948,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       noexcept(is_nothrow_default_constructible_v<__to_type<0>>) = default;\n       variant(const variant&) = default;\n       variant(variant&&)\n-      noexcept(__and_<\n-\tis_nothrow_move_constructible<_Types>...>::value) = default;\n+      noexcept((is_nothrow_move_constructible_v<_Types> && ...)) = default;\n \n       template<typename _Tp,\n \t       typename = enable_if_t<__exactly_once<__accepted_type<_Tp&&>>\n@@ -1003,8 +1002,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       variant& operator=(const variant&) = default;\n       variant& operator=(variant&&)\n-      noexcept(__and_<is_nothrow_move_constructible<_Types>...,\n-\t\t      is_nothrow_move_assignable<_Types>...>::value) = default;\n+      noexcept((is_nothrow_move_constructible_v<_Types> && ...)\n+\t  && (is_nothrow_move_assignable_v<_Types> && ...)) = default;\n \n       template<typename _Tp>\n \tenable_if_t<__exactly_once<__accepted_type<_Tp&&>>\n@@ -1091,7 +1090,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       void\n       swap(variant& __rhs)\n-      noexcept(__and_<__is_nothrow_swappable<_Types>...>::value\n+      noexcept((__is_nothrow_swappable<_Types>::value && ...)\n \t       && is_nothrow_move_constructible_v<variant>)\n       {\n \tif (this->index() == __rhs.index())"}]}