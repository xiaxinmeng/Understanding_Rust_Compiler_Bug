{"sha": "45ce6084c2547d75f1cf5e1d8d12305aa85e02d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVjZTYwODRjMjU0N2Q3NWYxY2Y1ZTFkOGQxMjMwNWFhODVlMDJkOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-10-11T11:57:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-10-11T11:57:23Z"}, "message": "re PR tree-optimization/50204 (Missed fully redundant load found in crafty (SPEC 2k))\n\n2011-10-11  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/50204\n\t* tree-ssa-alias.c (get_continuation_for_phi_1): Split out\n\ttwo argument handling from ...\n\t(get_continuation_for_phi): ... here.  Handle arbitrary number\n\tof PHI args.\n\n\t* gcc.dg/tree-ssa/ssa-fre-36.c: New testcase.\n\nFrom-SVN: r179799", "tree": {"sha": "edbad05931ac311508e282e377a4fb40d209d83b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edbad05931ac311508e282e377a4fb40d209d83b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45ce6084c2547d75f1cf5e1d8d12305aa85e02d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45ce6084c2547d75f1cf5e1d8d12305aa85e02d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45ce6084c2547d75f1cf5e1d8d12305aa85e02d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45ce6084c2547d75f1cf5e1d8d12305aa85e02d8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "12d31b36a87d5b49319bd32e218384ff2a6f0b28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12d31b36a87d5b49319bd32e218384ff2a6f0b28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12d31b36a87d5b49319bd32e218384ff2a6f0b28"}], "stats": {"total": 150, "additions": 107, "deletions": 43}, "files": [{"sha": "8e42253285f4e7f91524921eadab31bf7a76bc7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45ce6084c2547d75f1cf5e1d8d12305aa85e02d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45ce6084c2547d75f1cf5e1d8d12305aa85e02d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45ce6084c2547d75f1cf5e1d8d12305aa85e02d8", "patch": "@@ -1,3 +1,11 @@\n+2011-10-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/50204\n+\t* tree-ssa-alias.c (get_continuation_for_phi_1): Split out\n+\ttwo argument handling from ...\n+\t(get_continuation_for_phi): ... here.  Handle arbitrary number\n+\tof PHI args.\n+\n 2011-10-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/33067"}, {"sha": "06a16b075b2a3137c937cbba225c6fc6912aeff2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45ce6084c2547d75f1cf5e1d8d12305aa85e02d8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45ce6084c2547d75f1cf5e1d8d12305aa85e02d8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=45ce6084c2547d75f1cf5e1d8d12305aa85e02d8", "patch": "@@ -1,3 +1,8 @@\n+2011-10-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/50204\n+\t* gcc.dg/tree-ssa/ssa-fre-36.c: New testcase.\n+\n 2011-10-11  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* gcc.target/s390/20090223-1.c: Add -Wno-attributes."}, {"sha": "a8a2dbaadbe6f9954fece5e6a222237099e8008d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-36.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45ce6084c2547d75f1cf5e1d8d12305aa85e02d8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45ce6084c2547d75f1cf5e1d8d12305aa85e02d8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-36.c?ref=45ce6084c2547d75f1cf5e1d8d12305aa85e02d8", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre1-details\" } */\n+\n+extern int opening;\n+extern int middle_game;\n+int s;\n+extern int d[1];\n+void PreEvaluate(int wtm)\n+{\n+  int i, j;\n+  if (opening) {\n+      d[0]=1;\n+  }\n+  else if (middle_game) {\n+      d[0]=-1;\n+  }\n+  if (4 != opening) {\n+      return;\n+  }\n+  s = 1;\n+}\n+\n+/* We should be able to CSE the second load of opening.  */\n+\n+/* { dg-final { scan-tree-dump \"Replaced opening\" \"fre1\" } } */\n+/* { dg-final { cleanup-tree-dump \"fre1\" } } */"}, {"sha": "c63b5a817b295a7b1091f5e2b72ddcf2d2840ea8", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 68, "deletions": 43, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45ce6084c2547d75f1cf5e1d8d12305aa85e02d8/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45ce6084c2547d75f1cf5e1d8d12305aa85e02d8/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=45ce6084c2547d75f1cf5e1d8d12305aa85e02d8", "patch": "@@ -1875,6 +1875,60 @@ maybe_skip_until (gimple phi, tree target, ao_ref *ref,\n   return true;\n }\n \n+/* For two PHI arguments ARG0 and ARG1 try to skip non-aliasing code\n+   until we hit the phi argument definition that dominates the other one.\n+   Return that, or NULL_TREE if there is no such definition.  */\n+\n+static tree\n+get_continuation_for_phi_1 (gimple phi, tree arg0, tree arg1,\n+\t\t\t    ao_ref *ref, bitmap *visited)\n+{\n+  gimple def0 = SSA_NAME_DEF_STMT (arg0);\n+  gimple def1 = SSA_NAME_DEF_STMT (arg1);\n+  tree common_vuse;\n+\n+  if (arg0 == arg1)\n+    return arg0;\n+  else if (gimple_nop_p (def0)\n+\t   || (!gimple_nop_p (def1)\n+\t       && dominated_by_p (CDI_DOMINATORS,\n+\t\t\t\t  gimple_bb (def1), gimple_bb (def0))))\n+    {\n+      if (maybe_skip_until (phi, arg0, ref, arg1, visited))\n+\treturn arg0;\n+    }\n+  else if (gimple_nop_p (def1)\n+\t   || dominated_by_p (CDI_DOMINATORS,\n+\t\t\t      gimple_bb (def0), gimple_bb (def1)))\n+    {\n+      if (maybe_skip_until (phi, arg1, ref, arg0, visited))\n+\treturn arg1;\n+    }\n+  /* Special case of a diamond:\n+       MEM_1 = ...\n+       goto (cond) ? L1 : L2\n+       L1: store1 = ...    #MEM_2 = vuse(MEM_1)\n+\t   goto L3\n+       L2: store2 = ...    #MEM_3 = vuse(MEM_1)\n+       L3: MEM_4 = PHI<MEM_2, MEM_3>\n+     We were called with the PHI at L3, MEM_2 and MEM_3 don't\n+     dominate each other, but still we can easily skip this PHI node\n+     if we recognize that the vuse MEM operand is the same for both,\n+     and that we can skip both statements (they don't clobber us).\n+     This is still linear.  Don't use maybe_skip_until, that might\n+     potentially be slow.  */\n+  else if ((common_vuse = gimple_vuse (def0))\n+\t   && common_vuse == gimple_vuse (def1))\n+    {\n+      if (!stmt_may_clobber_ref_p_1 (def0, ref)\n+\t  && !stmt_may_clobber_ref_p_1 (def1, ref))\n+\treturn common_vuse;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+\n /* Starting from a PHI node for the virtual operand of the memory reference\n    REF find a continuation virtual operand that allows to continue walking\n    statements dominating PHI skipping only statements that cannot possibly\n@@ -1890,53 +1944,24 @@ get_continuation_for_phi (gimple phi, ao_ref *ref, bitmap *visited)\n   if (nargs == 1)\n     return PHI_ARG_DEF (phi, 0);\n \n-  /* For two arguments try to skip non-aliasing code until we hit\n-     the phi argument definition that dominates the other one.  */\n-  if (nargs == 2)\n+  /* For two or more arguments try to pairwise skip non-aliasing code\n+     until we hit the phi argument definition that dominates the other one.  */\n+  else if (nargs >= 2)\n     {\n       tree arg0 = PHI_ARG_DEF (phi, 0);\n-      tree arg1 = PHI_ARG_DEF (phi, 1);\n-      gimple def0 = SSA_NAME_DEF_STMT (arg0);\n-      gimple def1 = SSA_NAME_DEF_STMT (arg1);\n-      tree common_vuse;\n-\n-      if (arg0 == arg1)\n-\treturn arg0;\n-      else if (gimple_nop_p (def0)\n-\t       || (!gimple_nop_p (def1)\n-\t\t   && dominated_by_p (CDI_DOMINATORS,\n-\t\t\t\t      gimple_bb (def1), gimple_bb (def0))))\n-\t{\n-\t  if (maybe_skip_until (phi, arg0, ref, arg1, visited))\n-\t    return arg0;\n-\t}\n-      else if (gimple_nop_p (def1)\n-\t       || dominated_by_p (CDI_DOMINATORS,\n-\t\t\t\t  gimple_bb (def0), gimple_bb (def1)))\n-\t{\n-\t  if (maybe_skip_until (phi, arg1, ref, arg0, visited))\n-\t    return arg1;\n-\t}\n-      /* Special case of a diamond:\n-\t   MEM_1 = ...\n-\t   goto (cond) ? L1 : L2\n-\t   L1: store1 = ...    #MEM_2 = vuse(MEM_1)\n-\t       goto L3\n-\t   L2: store2 = ...    #MEM_3 = vuse(MEM_1)\n-\t   L3: MEM_4 = PHI<MEM_2, MEM_3>\n-\t We were called with the PHI at L3, MEM_2 and MEM_3 don't\n-\t dominate each other, but still we can easily skip this PHI node\n-\t if we recognize that the vuse MEM operand is the same for both,\n-\t and that we can skip both statements (they don't clobber us).\n-\t This is still linear.  Don't use maybe_skip_until, that might\n-\t potentially be slow.  */\n-      else if ((common_vuse = gimple_vuse (def0))\n-\t       && common_vuse == gimple_vuse (def1))\n+      tree arg1;\n+      unsigned i = 1;\n+      do\n \t{\n-\t  if (!stmt_may_clobber_ref_p_1 (def0, ref)\n-\t      && !stmt_may_clobber_ref_p_1 (def1, ref))\n-\t    return common_vuse;\n+\t  arg1 = PHI_ARG_DEF (phi, i);\n+\t  arg0 = get_continuation_for_phi_1 (phi, arg0, arg1, ref, visited);\n+\t  if (!arg0)\n+\t    return NULL_TREE;\n+\n \t}\n+      while (++i < nargs);\n+\n+      return arg0;\n     }\n \n   return NULL_TREE;"}]}