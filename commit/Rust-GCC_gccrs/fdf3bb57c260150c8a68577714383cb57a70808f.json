{"sha": "fdf3bb57c260150c8a68577714383cb57a70808f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRmM2JiNTdjMjYwMTUwYzhhNjg1Nzc3MTQzODNjYjU3YTcwODA4Zg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2003-04-04T10:38:50Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2003-04-04T10:38:50Z"}, "message": "(expand_prologue): Only use register save helper functions if long calls are not being used.\n\n(expand_prologue): Only use register save helper functions if long calls are\nnot being used.\nAdd a clobber of r11 id using long calls.\n(prolog pattern): Do not use this pattern for v850e's.\n\nFrom-SVN: r65236", "tree": {"sha": "07f10fcb7d4fb0071182c2d907b9da91bb3217cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07f10fcb7d4fb0071182c2d907b9da91bb3217cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdf3bb57c260150c8a68577714383cb57a70808f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf3bb57c260150c8a68577714383cb57a70808f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdf3bb57c260150c8a68577714383cb57a70808f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf3bb57c260150c8a68577714383cb57a70808f/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ad3f5759fed8a446739cebe7d23bbf3610bc69f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad3f5759fed8a446739cebe7d23bbf3610bc69f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad3f5759fed8a446739cebe7d23bbf3610bc69f8"}], "stats": {"total": 68, "additions": 42, "deletions": 26}, "files": [{"sha": "256d4120413d0f95c21597bee8a4fb729de77f32", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf3bb57c260150c8a68577714383cb57a70808f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf3bb57c260150c8a68577714383cb57a70808f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fdf3bb57c260150c8a68577714383cb57a70808f", "patch": "@@ -1,3 +1,13 @@\n+2003-04-04  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/v850/v850.c (expand_prologue): Only use register save\n+\thelper functions if long calls are not being used.\n+\tAdd a clobber of r11 id using long calls.\n+\t(pattern_is_ok_for_prologue): Account for the extra clobber.\n+\t(construct_save_jarl): Likewise.\n+\t* config/v850/v850.md (prolog pattern): Do not use this pattern\n+\tfor v850e's.\n+\n 2003-04-04  Andreas Schwab  <schwab@suse.de>\n \n \t* stor-layout.c (layout_decl): Avoid syntax error in last change"}, {"sha": "879b1898a952b1ec7fc88503d40ca72c5fd19e86", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf3bb57c260150c8a68577714383cb57a70808f/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf3bb57c260150c8a68577714383cb57a70808f/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=fdf3bb57c260150c8a68577714383cb57a70808f", "patch": "@@ -1713,13 +1713,10 @@ expand_prologue ()\n   /* Save arg registers to the stack if necessary.  */\n   else if (current_function_args_info.anonymous_args)\n     {\n-      if (TARGET_PROLOG_FUNCTION)\n-\t{\n-\t  if (TARGET_V850E && ! TARGET_DISABLE_CALLT)\n-\t    emit_insn (gen_save_r6_r9_v850e ());\n-\t  else\n-\t    emit_insn (gen_save_r6_r9 ());\n-\t}\n+      if (TARGET_PROLOG_FUNCTION && TARGET_V850E && !TARGET_DISABLE_CALLT)\n+\temit_insn (gen_save_r6_r9_v850e ());\n+      else if (TARGET_PROLOG_FUNCTION && ! TARGET_LONG_CALLS)\n+\temit_insn (gen_save_r6_r9 ());\n       else\n \t{\n \t  offset = 0;\n@@ -1779,19 +1776,14 @@ expand_prologue ()\n \t{\n \t  save_all = gen_rtx_PARALLEL\n \t    (VOIDmode,\n-\t     rtvec_alloc (num_save + (TARGET_V850 ? 2 : 1)));\n+\t     rtvec_alloc (num_save + 1\n+\t\t\t  + (TARGET_V850 ? (TARGET_LONG_CALLS ? 2 : 1) : 0)));\n \n \t  XVECEXP (save_all, 0, 0)\n \t    = gen_rtx_SET (VOIDmode,\n \t\t\t   stack_pointer_rtx,\n \t\t\t   plus_constant (stack_pointer_rtx, -alloc_stack));\n \n-\t  if (TARGET_V850)\n-\t    {\n-\t      XVECEXP (save_all, 0, num_save+1)\n-\t\t= gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (Pmode, 10));\n-\t    }\n-\n \t  offset = - default_stack;\n \t  for (i = 0; i < num_save; i++)\n \t    {\n@@ -1804,6 +1796,16 @@ expand_prologue ()\n \t      offset -= 4;\n \t    }\n \n+\t  if (TARGET_V850)\n+\t    {\n+\t      XVECEXP (save_all, 0, num_save + 1)\n+\t\t= gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (Pmode, 10));\n+\n+\t      if (TARGET_LONG_CALLS)\n+\t\tXVECEXP (save_all, 0, num_save + 2)\n+\t\t  = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (Pmode, 11));\n+\t    }\n+\n \t  code = recog (save_all, NULL_RTX, NULL);\n \t  if (code >= 0)\n \t    {\n@@ -2631,7 +2633,7 @@ pattern_is_ok_for_prologue (op, mode)\n \n      */\n \n-  for (i = 2; i < count - 1; i++)\n+  for (i = 2; i < count - (TARGET_LONG_CALLS ? 2: 1); i++)\n     {\n       rtx dest;\n       rtx src;\n@@ -2671,14 +2673,18 @@ pattern_is_ok_for_prologue (op, mode)\n \t}\n     }\n \n-  /* Make sure that the last entry in the vector is a clobber.  */\n-  vector_element = XVECEXP (op, 0, i);\n-  \n-  if (GET_CODE (vector_element) != CLOBBER\n-      || GET_CODE (XEXP (vector_element, 0)) != REG\n-      || REGNO (XEXP (vector_element, 0)) != 10)\n-    return 0;\n-  \n+  /* Make sure that the last entries in the vector are clobbers.  */\n+  for (; i < count; i++)\n+    {\n+      vector_element = XVECEXP (op, 0, i);\n+\n+      if (GET_CODE (vector_element) != CLOBBER\n+\t  || GET_CODE (XEXP (vector_element, 0)) != REG\n+\t  || !(REGNO (XEXP (vector_element, 0)) == 10\n+\t       || (TARGET_LONG_CALLS ? (REGNO (XEXP (vector_element, 0)) == 11) : 0 )))\n+\treturn 0;\n+    }\n+\n   return 1;\n }\n \n@@ -2720,7 +2726,7 @@ construct_save_jarl (op)\n   stack_bytes = INTVAL (XEXP (SET_SRC (XVECEXP (op, 0, 0)), 1));\n \n   /* Each push will put 4 bytes from the stack... */\n-  stack_bytes += (count - 2) * 4;\n+  stack_bytes += (count - (TARGET_LONG_CALLS ? 3 : 2)) * 4;\n \n   /* Make sure that the amount we are popping either 0 or 16 bytes.  */\n   if (stack_bytes != 0 && stack_bytes != -16)\n@@ -2731,7 +2737,7 @@ construct_save_jarl (op)\n \n   /* Now compute the bit mask of registers to push.  */\n   mask = 0;\n-  for (i = 1; i < count - 1; i++)\n+  for (i = 1; i < count - (TARGET_LONG_CALLS ? 2 : 1); i++)\n     {\n       rtx vector_element = XVECEXP (op, 0, i);\n       "}, {"sha": "ba058a45e761b91ca7818b0d78050897086fae9c", "filename": "gcc/config/v850/v850.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf3bb57c260150c8a68577714383cb57a70808f/gcc%2Fconfig%2Fv850%2Fv850.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf3bb57c260150c8a68577714383cb57a70808f/gcc%2Fconfig%2Fv850%2Fv850.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.md?ref=fdf3bb57c260150c8a68577714383cb57a70808f", "patch": "@@ -1663,7 +1663,7 @@\n     (set (mem:SI (plus:SI (reg:SI 3)\n \t\t\t   (match_operand:SI 2 \"immediate_operand\" \"i\")))\n \t (match_operand:SI 3 \"register_is_ok_for_epilogue\" \"r\"))])]\n- \"TARGET_PROLOG_FUNCTION\"\n+ \"TARGET_PROLOG_FUNCTION && TARGET_V850\"\n  \"* return construct_save_jarl (operands[0]);\n  \"\n  [(set (attr \"length\") (if_then_else (eq_attr \"long_calls\" \"yes\")"}]}