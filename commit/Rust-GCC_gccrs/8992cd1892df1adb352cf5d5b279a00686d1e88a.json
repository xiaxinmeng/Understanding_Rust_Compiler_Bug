{"sha": "8992cd1892df1adb352cf5d5b279a00686d1e88a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk5MmNkMTg5MmRmMWFkYjM1MmNmNWQ1YjI3OWEwMDY4NmQxZTg4YQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-07-06T20:54:12Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-07-06T20:54:12Z"}, "message": "libstdc++: Add noexcept to std::optional initialization (PR 96036)\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/96036\n\t* include/std/optional (optional): Add noexcept-specifier to\n\tevery constructor, assignment operator, emplace function and\n\tdereference operator.\n\t* testsuite/20_util/optional/assignment/noexcept.cc: New test.\n\t* testsuite/20_util/optional/cons/noexcept.cc: New test.", "tree": {"sha": "c57a3da681c6156507fea11e71a66292521f27ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c57a3da681c6156507fea11e71a66292521f27ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8992cd1892df1adb352cf5d5b279a00686d1e88a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8992cd1892df1adb352cf5d5b279a00686d1e88a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8992cd1892df1adb352cf5d5b279a00686d1e88a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8992cd1892df1adb352cf5d5b279a00686d1e88a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e88218fd5a21e44c77c10dec87af4b11c76f34a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e88218fd5a21e44c77c10dec87af4b11c76f34a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e88218fd5a21e44c77c10dec87af4b11c76f34a0"}], "stats": {"total": 176, "additions": 170, "deletions": 6}, "files": [{"sha": "785c434412dfc5e8cda98782c21824c92b58ee43", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8992cd1892df1adb352cf5d5b279a00686d1e88a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8992cd1892df1adb352cf5d5b279a00686d1e88a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=8992cd1892df1adb352cf5d5b279a00686d1e88a", "patch": "@@ -698,6 +698,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t is_convertible<_Up&&, _Tp>> = true>\n \tconstexpr\n \toptional(_Up&& __t)\n+\tnoexcept(is_nothrow_constructible_v<_Tp, _Up>)\n \t: _Base(std::in_place, std::forward<_Up>(__t)) { }\n \n       template<typename _Up = _Tp,\n@@ -706,6 +707,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t __not_<is_convertible<_Up&&, _Tp>>> = false>\n \texplicit constexpr\n \toptional(_Up&& __t)\n+\tnoexcept(is_nothrow_constructible_v<_Tp, _Up>)\n         : _Base(std::in_place, std::forward<_Up>(__t)) { }\n \n       template<typename _Up,\n@@ -715,6 +717,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t __not_<__converts_from_optional<_Tp, _Up>>> = true>\n \tconstexpr\n \toptional(const optional<_Up>& __t)\n+\tnoexcept(is_nothrow_constructible_v<_Tp, const _Up&>)\n \t{\n \t  if (__t)\n \t    emplace(*__t);\n@@ -727,6 +730,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t __not_<__converts_from_optional<_Tp, _Up>>> = false>\n \texplicit constexpr\n \toptional(const optional<_Up>& __t)\n+\tnoexcept(is_nothrow_constructible_v<_Tp, const _Up&>)\n \t{\n \t  if (__t)\n \t    emplace(*__t);\n@@ -739,6 +743,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t  __not_<__converts_from_optional<_Tp, _Up>>> = true>\n \tconstexpr\n \toptional(optional<_Up>&& __t)\n+\tnoexcept(is_nothrow_constructible_v<_Tp, _Up>)\n \t{\n \t  if (__t)\n \t    emplace(std::move(*__t));\n@@ -751,6 +756,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t  __not_<__converts_from_optional<_Tp, _Up>>> = false>\n \texplicit constexpr\n \toptional(optional<_Up>&& __t)\n+\tnoexcept(is_nothrow_constructible_v<_Tp, _Up>)\n \t{\n \t  if (__t)\n \t    emplace(std::move(*__t));\n@@ -760,6 +766,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       _Requires<is_constructible<_Tp, _Args&&...>> = false>\n \texplicit constexpr\n \toptional(in_place_t, _Args&&... __args)\n+\tnoexcept(is_nothrow_constructible_v<_Tp, _Args...>)\n \t: _Base(std::in_place, std::forward<_Args>(__args)...) { }\n \n       template<typename _Up, typename... _Args,\n@@ -768,8 +775,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t  _Args&&...>> = false>\n \texplicit constexpr\n \toptional(in_place_t, initializer_list<_Up> __il, _Args&&... __args)\n+\tnoexcept(is_nothrow_constructible_v<_Tp, initializer_list<_Up>&,\n+\t\t\t\t\t    _Args...>)\n \t: _Base(std::in_place, __il, std::forward<_Args>(__args)...) { }\n \n+\n       // Assignment operators.\n       optional&\n       operator=(nullopt_t) noexcept\n@@ -786,6 +796,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t    is_assignable<_Tp&, _Up>>,\n \t\t    optional&>\n \toperator=(_Up&& __u)\n+\tnoexcept(__and_v<is_nothrow_constructible<_Tp, _Up>,\n+\t\t\t is_nothrow_assignable<_Tp&, _Up>>)\n \t{\n \t  if (this->_M_is_engaged())\n \t    this->_M_get() = std::forward<_Up>(__u);\n@@ -803,6 +815,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t    __not_<__assigns_from_optional<_Tp, _Up>>>,\n \t\t    optional&>\n \toperator=(const optional<_Up>& __u)\n+\tnoexcept(__and_v<is_nothrow_constructible<_Tp, const _Up&>,\n+\t\t\t is_nothrow_assignable<_Tp&, const _Up&>>)\n \t{\n \t  if (__u)\n \t    {\n@@ -826,6 +840,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t    __not_<__assigns_from_optional<_Tp, _Up>>>,\n \t\t    optional&>\n \toperator=(optional<_Up>&& __u)\n+\tnoexcept(__and_v<is_nothrow_constructible<_Tp, _Up>,\n+\t\t\t is_nothrow_assignable<_Tp&, _Up>>)\n \t{\n \t  if (__u)\n \t    {\n@@ -845,6 +861,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename... _Args>\n \tenable_if_t<is_constructible_v<_Tp, _Args&&...>, _Tp&>\n \templace(_Args&&... __args)\n+\tnoexcept(is_nothrow_constructible_v<_Tp, _Args...>)\n \t{\n \t  this->_M_reset();\n \t  this->_M_construct(std::forward<_Args>(__args)...);\n@@ -855,6 +872,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tenable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&,\n \t\t\t\t       _Args&&...>, _Tp&>\n \templace(initializer_list<_Up> __il, _Args&&... __args)\n+\tnoexcept(is_nothrow_constructible_v<_Tp, initializer_list<_Up>&,\n+\t\t\t\t\t    _Args...>)\n \t{\n \t  this->_M_reset();\n \t  this->_M_construct(__il, std::forward<_Args>(__args)...);\n@@ -887,27 +906,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // Observers.\n       constexpr const _Tp*\n-      operator->() const\n+      operator->() const noexcept\n       { return std::__addressof(this->_M_get()); }\n \n       constexpr _Tp*\n-      operator->()\n+      operator->() noexcept\n       { return std::__addressof(this->_M_get()); }\n \n       constexpr const _Tp&\n-      operator*() const&\n+      operator*() const& noexcept\n       { return this->_M_get(); }\n \n       constexpr _Tp&\n-      operator*()&\n+      operator*()& noexcept\n       { return this->_M_get(); }\n \n       constexpr _Tp&&\n-      operator*()&&\n+      operator*()&& noexcept\n       { return std::move(this->_M_get()); }\n \n       constexpr const _Tp&&\n-      operator*() const&&\n+      operator*() const&& noexcept\n       { return std::move(this->_M_get()); }\n \n       constexpr explicit operator bool() const noexcept"}, {"sha": "45592b2a18c1441a30b2c041caca2124cc9ee926", "filename": "libstdc++-v3/testsuite/20_util/optional/assignment/noexcept.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8992cd1892df1adb352cf5d5b279a00686d1e88a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fassignment%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8992cd1892df1adb352cf5d5b279a00686d1e88a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fassignment%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fassignment%2Fnoexcept.cc?ref=8992cd1892df1adb352cf5d5b279a00686d1e88a", "patch": "@@ -0,0 +1,81 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++17 } }\n+\n+#include <optional>\n+\n+template<bool B>\n+struct X\n+{\n+  X() noexcept(B);\n+\n+  X(const X&) noexcept(B);\n+  X& operator=(const X&) noexcept(B);\n+\n+  X(int) noexcept(B);\n+  X& operator=(int) noexcept(false);\n+\n+  X(void*) noexcept(true);\n+  X& operator=(void*) noexcept(B);\n+\n+  X(const X<!B>&) noexcept(B);\n+  X& operator=(const X<!B>&) noexcept(B);\n+\n+  X(std::initializer_list<int>, int) noexcept(B);\n+};\n+\n+using std::is_nothrow_assignable_v;\n+\n+using Xyes = X<true>;\n+using Xno = X<false>;\n+using Oyes = std::optional<Xyes>;\n+using Ono = std::optional<Xno>;\n+\n+static_assert( is_nothrow_assignable_v<Oyes, std::nullopt_t> );\n+static_assert( is_nothrow_assignable_v<Oyes, const Xyes&> );\n+static_assert( is_nothrow_assignable_v<Oyes, Xyes> );\n+static_assert( ! is_nothrow_assignable_v<Oyes, int> );\n+static_assert( is_nothrow_assignable_v<Oyes, void*> );\n+static_assert( is_nothrow_assignable_v<Oyes, const Ono&> );\n+static_assert( is_nothrow_assignable_v<Oyes, Ono> );\n+\n+static_assert( is_nothrow_assignable_v<Ono, std::nullopt_t> );\n+static_assert( ! is_nothrow_assignable_v<Ono, const Xno&> );\n+static_assert( ! is_nothrow_assignable_v<Ono, Xno> );\n+static_assert( ! is_nothrow_assignable_v<Ono, int> );\n+static_assert( ! is_nothrow_assignable_v<Ono, void*> );\n+static_assert( ! is_nothrow_assignable_v<Ono, const Xyes&> );\n+static_assert( ! is_nothrow_assignable_v<Ono, Xyes> );\n+\n+Xyes xyes;\n+Xno xno;\n+Oyes oyes;\n+Ono ono;\n+static_assert( noexcept(oyes.emplace()) );\n+static_assert( noexcept(oyes.emplace(xyes)) );\n+static_assert( noexcept(oyes.emplace(1)) );\n+static_assert( noexcept(oyes.emplace(nullptr)) );\n+static_assert( noexcept(oyes.emplace(xno)) );\n+static_assert( noexcept(oyes.emplace({1,2,3}, 1)) );\n+\n+static_assert( ! noexcept(ono.emplace()) );\n+static_assert( ! noexcept(ono.emplace(xno)) );\n+static_assert( ! noexcept(ono.emplace(1)) );\n+static_assert( noexcept(ono.emplace(nullptr)) );\n+static_assert( ! noexcept(ono.emplace(xyes)) );\n+static_assert( ! noexcept(ono.emplace({1,2,3}, 1)) );"}, {"sha": "a529f5d39ad76900ca31ab0a978944f1797b56b2", "filename": "libstdc++-v3/testsuite/20_util/optional/cons/noexcept.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8992cd1892df1adb352cf5d5b279a00686d1e88a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fcons%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8992cd1892df1adb352cf5d5b279a00686d1e88a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fcons%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fcons%2Fnoexcept.cc?ref=8992cd1892df1adb352cf5d5b279a00686d1e88a", "patch": "@@ -0,0 +1,64 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++17 } }\n+\n+#include <optional>\n+\n+template<bool B>\n+struct X\n+{\n+  X() noexcept(B);\n+  X(const X&) noexcept(B);\n+\n+  X(int) noexcept(B);\n+  X(std::initializer_list<int>, int) noexcept(B);\n+\n+  X(const X<!B>&) noexcept(B);\n+\n+  X& operator=(const X&) noexcept(false);\n+};\n+\n+using std::is_nothrow_constructible_v;\n+using std::in_place_t;\n+\n+using Xyes = X<true>;\n+using Xno = X<false>;\n+using Oyes = std::optional<Xyes>;\n+using Ono = std::optional<Xno>;\n+\n+static_assert( is_nothrow_constructible_v<Oyes> );\n+static_assert( is_nothrow_constructible_v<Oyes, std::nullopt_t> );\n+static_assert( is_nothrow_constructible_v<Oyes, const Xyes&> );\n+static_assert( is_nothrow_constructible_v<Oyes, Xyes> );\n+static_assert( is_nothrow_constructible_v<Oyes, in_place_t, short> );\n+static_assert( is_nothrow_constructible_v<Oyes, in_place_t,\n+\t\t\t\t\t\tstd::initializer_list<int>,\n+\t\t\t\t\t\tlong> );\n+static_assert( is_nothrow_constructible_v<Oyes, const Ono&> );\n+static_assert( is_nothrow_constructible_v<Oyes, Ono> );\n+\n+static_assert( is_nothrow_constructible_v<Ono> );\n+static_assert( is_nothrow_constructible_v<Ono, std::nullopt_t> );\n+static_assert( ! is_nothrow_constructible_v<Ono, const Xno&> );\n+static_assert( ! is_nothrow_constructible_v<Ono, Xno> );\n+static_assert( ! is_nothrow_constructible_v<Ono, in_place_t, short> );\n+static_assert( ! is_nothrow_constructible_v<Ono, in_place_t,\n+\t\t\t\t\t\t std::initializer_list<int>,\n+\t\t\t\t\t\t long> );\n+static_assert( ! is_nothrow_constructible_v<Ono, const Xyes&> );\n+static_assert( ! is_nothrow_constructible_v<Ono, Xyes> );"}]}