{"sha": "85c9bcd4184b9c088323e1b46d455d5f0b1067a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVjOWJjZDQxODRiOWMwODgzMjNlMWI0NmQ0NTVkNWYwYjEwNjdhMQ==", "commit": {"author": {"name": "Wei Guozhi", "email": "carrot@google.com", "date": "2010-04-10T13:13:47Z"}, "committer": {"name": "Wei Guozhi", "email": "carrot@gcc.gnu.org", "date": "2010-04-10T13:13:47Z"}, "message": "re PR target/42601 (Simplify code to address function static variables with option -fpic)\n\n\tPR target/42601\n\t* config/arm/arm.c (arm_pic_static_addr): New function.\n\t(legitimize_pic_address): Call arm_pic_static_addr when it detects\n\ta static symbol.\n\t(arm_output_addr_const_extra): Output expression for new pattern.\n\t* config/arm/arm.md (UNSPEC_SYMBOL_OFFSET): New unspec symbol.\n\nFrom-SVN: r158189", "tree": {"sha": "ff9cde9f70f3a1da792bdba3fafe8fc41f107836", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff9cde9f70f3a1da792bdba3fafe8fc41f107836"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85c9bcd4184b9c088323e1b46d455d5f0b1067a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85c9bcd4184b9c088323e1b46d455d5f0b1067a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85c9bcd4184b9c088323e1b46d455d5f0b1067a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85c9bcd4184b9c088323e1b46d455d5f0b1067a1/comments", "author": {"login": "weiguozhi", "id": 57237827, "node_id": "MDQ6VXNlcjU3MjM3ODI3", "avatar_url": "https://avatars.githubusercontent.com/u/57237827?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiguozhi", "html_url": "https://github.com/weiguozhi", "followers_url": "https://api.github.com/users/weiguozhi/followers", "following_url": "https://api.github.com/users/weiguozhi/following{/other_user}", "gists_url": "https://api.github.com/users/weiguozhi/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiguozhi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiguozhi/subscriptions", "organizations_url": "https://api.github.com/users/weiguozhi/orgs", "repos_url": "https://api.github.com/users/weiguozhi/repos", "events_url": "https://api.github.com/users/weiguozhi/events{/privacy}", "received_events_url": "https://api.github.com/users/weiguozhi/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "52c1d580dd2a0bb42d4abd8cbf58840c2921b28f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c1d580dd2a0bb42d4abd8cbf58840c2921b28f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52c1d580dd2a0bb42d4abd8cbf58840c2921b28f"}], "stats": {"total": 87, "additions": 70, "deletions": 17}, "files": [{"sha": "68bc18a878ea2344a7d158966f1c1d7d3afb38b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c9bcd4184b9c088323e1b46d455d5f0b1067a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c9bcd4184b9c088323e1b46d455d5f0b1067a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85c9bcd4184b9c088323e1b46d455d5f0b1067a1", "patch": "@@ -1,3 +1,12 @@\n+2010-04-10  Wei Guozhi  <carrot@google.com>\n+\n+\tPR target/42601\n+\t* config/arm/arm.c (arm_pic_static_addr): New function.\n+\t(legitimize_pic_address): Call arm_pic_static_addr when it detects\n+\ta static symbol.\n+\t(arm_output_addr_const_extra): Output expression for new pattern.\n+\t* config/arm/arm.md (UNSPEC_SYMBOL_OFFSET): New unspec symbol.\n+\n 2010-04-10  Bernd Schmidt  <bernd.schmidt@codesourcery.com>\n \n \t* ira-costs.c (record_reg_classes): Ignore alternatives that are"}, {"sha": "1a555b8706b10a7f2eb30fb031f9c1a565b56334", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 59, "deletions": 17, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c9bcd4184b9c088323e1b46d455d5f0b1067a1/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c9bcd4184b9c088323e1b46d455d5f0b1067a1/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=85c9bcd4184b9c088323e1b46d455d5f0b1067a1", "patch": "@@ -224,6 +224,7 @@ static bool arm_can_eliminate (const int, const int);\n static void arm_asm_trampoline_template (FILE *);\n static void arm_trampoline_init (rtx, tree, rtx);\n static rtx arm_trampoline_adjust_address (rtx);\n+static rtx arm_pic_static_addr (rtx orig, rtx reg);\n \n \f\n /* Table of machine attributes.  */\n@@ -4905,29 +4906,16 @@ legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n     {\n       rtx pic_ref, address;\n       rtx insn;\n-      int subregs = 0;\n-\n-      /* If this function doesn't have a pic register, create one now.  */\n-      require_pic_register ();\n \n       if (reg == 0)\n \t{\n \t  gcc_assert (can_create_pseudo_p ());\n \t  reg = gen_reg_rtx (Pmode);\n-\n-\t  subregs = 1;\n+\t  address = gen_reg_rtx (Pmode);\n \t}\n-\n-      if (subregs)\n-\taddress = gen_reg_rtx (Pmode);\n       else\n \taddress = reg;\n \n-      if (TARGET_32BIT)\n-\temit_insn (gen_pic_load_addr_32bit (address, orig));\n-      else /* TARGET_THUMB1 */\n-\temit_insn (gen_pic_load_addr_thumb1 (address, orig));\n-\n       /* VxWorks does not impose a fixed gap between segments; the run-time\n \t gap can be different from the object-file gap.  We therefore can't\n \t use GOTOFF unless we are absolutely sure that the symbol is in the\n@@ -4939,16 +4927,23 @@ legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t       SYMBOL_REF_LOCAL_P (orig)))\n \t  && NEED_GOT_RELOC\n \t  && !TARGET_VXWORKS_RTP)\n-\tpic_ref = gen_rtx_PLUS (Pmode, cfun->machine->pic_reg, address);\n+\tinsn = arm_pic_static_addr (orig, reg);\n       else\n \t{\n+\t  /* If this function doesn't have a pic register, create one now.  */\n+\t  require_pic_register ();\n+\n+\t  if (TARGET_32BIT)\n+\t    emit_insn (gen_pic_load_addr_32bit (address, orig));\n+\t  else /* TARGET_THUMB1 */\n+\t    emit_insn (gen_pic_load_addr_thumb1 (address, orig));\n+\n \t  pic_ref = gen_const_mem (Pmode,\n \t\t\t\t   gen_rtx_PLUS (Pmode, cfun->machine->pic_reg,\n \t\t\t\t\t         address));\n+\t  insn = emit_move_insn (reg, pic_ref);\n \t}\n \n-      insn = emit_move_insn (reg, pic_ref);\n-\n       /* Put a REG_EQUAL note on this insn, so that it can be optimized\n \t by loop.  */\n       set_unique_reg_note (insn, REG_EQUAL, orig);\n@@ -5155,6 +5150,43 @@ arm_load_pic_register (unsigned long saved_regs ATTRIBUTE_UNUSED)\n   emit_use (pic_reg);\n }\n \n+/* Generate code to load the address of a static var when flag_pic is set.  */\n+static rtx\n+arm_pic_static_addr (rtx orig, rtx reg)\n+{\n+  rtx l1, labelno, offset_rtx, insn;\n+\n+  gcc_assert (flag_pic);\n+\n+  /* We use an UNSPEC rather than a LABEL_REF because this label\n+     never appears in the code stream.  */\n+  labelno = GEN_INT (pic_labelno++);\n+  l1 = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, labelno), UNSPEC_PIC_LABEL);\n+  l1 = gen_rtx_CONST (VOIDmode, l1);\n+\n+  /* On the ARM the PC register contains 'dot + 8' at the time of the\n+     addition, on the Thumb it is 'dot + 4'.  */\n+  offset_rtx = plus_constant (l1, TARGET_ARM ? 8 : 4);\n+  offset_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (2, orig, offset_rtx),\n+                               UNSPEC_SYMBOL_OFFSET);\n+  offset_rtx = gen_rtx_CONST (Pmode, offset_rtx);\n+\n+  if (TARGET_32BIT)\n+    {\n+      emit_insn (gen_pic_load_addr_32bit (reg, offset_rtx));\n+      if (TARGET_ARM)\n+        insn = emit_insn (gen_pic_add_dot_plus_eight (reg, reg, labelno));\n+      else\n+        insn = emit_insn (gen_pic_add_dot_plus_four (reg, reg, labelno));\n+    }\n+  else /* TARGET_THUMB1 */\n+    {\n+      emit_insn (gen_pic_load_addr_thumb1 (reg, offset_rtx));\n+      insn = emit_insn (gen_pic_add_dot_plus_four (reg, reg, labelno));\n+    }\n+\n+  return insn;\n+}\n \n /* Return nonzero if X is valid as an ARM state addressing register.  */\n static int\n@@ -21325,6 +21357,16 @@ arm_output_addr_const_extra (FILE *fp, rtx x)\n       fputc (')', fp);\n       return TRUE;\n     }\n+  else if (GET_CODE (x) == UNSPEC && XINT (x, 1) == UNSPEC_SYMBOL_OFFSET)\n+    {\n+      output_addr_const (fp, XVECEXP (x, 0, 0));\n+      if (GOT_PCREL)\n+        fputs (\"+.\", fp);\n+      fputs (\"-(\", fp);\n+      output_addr_const (fp, XVECEXP (x, 0, 1));\n+      fputc (')', fp);\n+      return TRUE;\n+    }\n   else if (GET_CODE (x) == CONST_VECTOR)\n     return arm_emit_vector_const (fp, x);\n "}, {"sha": "c5e2a16e694c27d79b763af03661063ec41caae4", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c9bcd4184b9c088323e1b46d455d5f0b1067a1/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c9bcd4184b9c088323e1b46d455d5f0b1067a1/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=85c9bcd4184b9c088323e1b46d455d5f0b1067a1", "patch": "@@ -101,6 +101,8 @@\n \t\t\t  ; a given symbolic address.\n    (UNSPEC_THUMB1_CASESI 25) ; A Thumb1 compressed dispatch-table call.\n    (UNSPEC_RBIT 26)       ; rbit operation.\n+   (UNSPEC_SYMBOL_OFFSET 27) ; The offset of the start of the symbol from\n+                             ; another symbolic address.\n   ]\n )\n "}]}