{"sha": "05e3bdb9cb230f5d1632400d86ccbbb455e9bc1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVlM2JkYjljYjIzMGY1ZDE2MzI0MDBkODZjY2JiYjQ1NWU5YmMxYQ==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1994-04-26T23:56:21Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1994-04-26T23:56:21Z"}, "message": "Use new macro AGGREGATE_TYPE_P.\n\nFrom-SVN: r7160", "tree": {"sha": "0a0af8b69d0844059cd94a48151d64b40fed58fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a0af8b69d0844059cd94a48151d64b40fed58fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05e3bdb9cb230f5d1632400d86ccbbb455e9bc1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05e3bdb9cb230f5d1632400d86ccbbb455e9bc1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05e3bdb9cb230f5d1632400d86ccbbb455e9bc1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05e3bdb9cb230f5d1632400d86ccbbb455e9bc1a/comments", "author": null, "committer": null, "parents": [{"sha": "947765f9f25ad8b7c6a305246211fd99e6871ab9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/947765f9f25ad8b7c6a305246211fd99e6871ab9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/947765f9f25ad8b7c6a305246211fd99e6871ab9"}], "stats": {"total": 114, "additions": 21, "deletions": 93}, "files": [{"sha": "5fcded2f1011f233fdd7ac688e7dd2c3cd8010b3", "filename": "gcc/calls.c", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e3bdb9cb230f5d1632400d86ccbbb455e9bc1a/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e3bdb9cb230f5d1632400d86ccbbb455e9bc1a/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=05e3bdb9cb230f5d1632400d86ccbbb455e9bc1a", "patch": "@@ -631,11 +631,7 @@ expand_call (exp, target, ignore)\n \n   /* Warn if this value is an aggregate type,\n      regardless of which calling convention we are using for it.  */\n-  if (warn_aggregate_return\n-      && (TREE_CODE (TREE_TYPE (exp)) == RECORD_TYPE\n-\t  || TREE_CODE (TREE_TYPE (exp)) == UNION_TYPE\n-\t  || TREE_CODE (TREE_TYPE (exp)) == QUAL_UNION_TYPE\n-\t  || TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE))\n+  if (warn_aggregate_return && AGGREGATE_TYPE_P (TREE_TYPE (exp)))\n     warning (\"function call has aggregate value\");\n \n   /* Set up a place to return a structure.  */\n@@ -1039,11 +1035,7 @@ expand_call (exp, target, ignore)\n \t\t  copy = assign_stack_temp (TYPE_MODE (type), size, 1);\n \t\t}\n \n-\t      MEM_IN_STRUCT_P (copy)\n-\t\t= (TREE_CODE (type) == RECORD_TYPE\n-\t\t   || TREE_CODE (type) == UNION_TYPE\n-\t\t   || TREE_CODE (type) == QUAL_UNION_TYPE\n-\t\t   || TREE_CODE (type) == ARRAY_TYPE);\n+\t      MEM_IN_STRUCT_P (copy) = AGGREGATE_TYPE_P (type);\n \n \t      store_expr (args[i].tree_value, copy, 0);\n \n@@ -1498,10 +1490,7 @@ expand_call (exp, target, ignore)\n \t  addr = plus_constant (addr, arg_offset);\n \t  args[i].stack = gen_rtx (MEM, args[i].mode, addr);\n \t  MEM_IN_STRUCT_P (args[i].stack)\n-\t    = (TREE_CODE (TREE_TYPE (args[i].tree_value)) == RECORD_TYPE\n-\t       || TREE_CODE (TREE_TYPE (args[i].tree_value)) == UNION_TYPE\n-\t       || TREE_CODE (TREE_TYPE (args[i].tree_value)) == QUAL_UNION_TYPE\n-\t       || TREE_CODE (TREE_TYPE (args[i].tree_value)) == ARRAY_TYPE);\n+\t    = AGGREGATE_TYPE_P (TREE_TYPE (args[i].tree_value));\n \n \t  if (GET_CODE (slot_offset) == CONST_INT)\n \t    addr = plus_constant (arg_reg, INTVAL (slot_offset));\n@@ -1941,11 +1930,7 @@ expand_call (exp, target, ignore)\n \t  target = gen_rtx (MEM, TYPE_MODE (TREE_TYPE (exp)),\n \t\t\t    memory_address (TYPE_MODE (TREE_TYPE (exp)),\n \t\t\t\t\t    structure_value_addr));\n-\t  MEM_IN_STRUCT_P (target)\n-\t    = (TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE\n-\t       || TREE_CODE (TREE_TYPE (exp)) == RECORD_TYPE\n-\t       || TREE_CODE (TREE_TYPE (exp)) == UNION_TYPE\n-\t       || TREE_CODE (TREE_TYPE (exp)) == QUAL_UNION_TYPE);\n+\t  MEM_IN_STRUCT_P (target) = AGGREGATE_TYPE_P (TREE_TYPE (exp));\n \t}\n     }\n   else if (pcc_struct_value)\n@@ -1964,11 +1949,7 @@ expand_call (exp, target, ignore)\n \t\t\t\t\t  int_size_in_bytes (TREE_TYPE (exp)),\n \t\t\t\t\t  0);\n \n-\t      MEM_IN_STRUCT_P (target)\n-\t\t= (TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE\n-\t\t   || TREE_CODE (TREE_TYPE (exp)) == RECORD_TYPE\n-\t\t   || TREE_CODE (TREE_TYPE (exp)) == UNION_TYPE\n-\t\t   || TREE_CODE (TREE_TYPE (exp)) == QUAL_UNION_TYPE);\n+\t      MEM_IN_STRUCT_P (target) = AGGREGATE_TYPE_P (TREE_TYPE (exp));\n \n \t      /* Save this temp slot around the pop below.  */\n \t      preserve_temp_slots (target);"}, {"sha": "b2ec8863a794ab9534c2ce3598f87df3bfaa9bf8", "filename": "gcc/expr.c", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e3bdb9cb230f5d1632400d86ccbbb455e9bc1a/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e3bdb9cb230f5d1632400d86ccbbb455e9bc1a/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=05e3bdb9cb230f5d1632400d86ccbbb455e9bc1a", "patch": "@@ -3915,11 +3915,7 @@ expand_expr (exp, target, tmode, modifier)\n \t    {\n \t      temp\n \t\t= assign_stack_temp (mode, int_size_in_bytes (type), 0);\n-\t      MEM_IN_STRUCT_P (temp)\n-\t\t= (TREE_CODE (type) == RECORD_TYPE\n-\t\t   || TREE_CODE (type) == UNION_TYPE\n-\t\t   || TREE_CODE (type) == QUAL_UNION_TYPE\n-\t\t   || TREE_CODE (type) == ARRAY_TYPE);\n+\t      MEM_IN_STRUCT_P (temp) = AGGREGATE_TYPE_P (type);\n \t    }\n \t  else\n \t    temp = gen_reg_rtx (promote_mode (type, mode, &unsignedp, 0));\n@@ -4106,11 +4102,9 @@ expand_expr (exp, target, tmode, modifier)\n \t\ttarget = gen_reg_rtx (tmode != VOIDmode ? tmode : mode);\n \t      else\n \t\t{\n-\t\t  enum tree_code c = TREE_CODE (type);\n \t\t  target\n \t\t    = assign_stack_temp (mode, int_size_in_bytes (type), 0);\n-\t\t  if (c == RECORD_TYPE || c == UNION_TYPE\n-\t\t      || c == QUAL_UNION_TYPE || c == ARRAY_TYPE)\n+\t\t  if (AGGREGATE_TYPE_P (type))\n \t\t    MEM_IN_STRUCT_P (target) = 1;\n \t\t}\n \t    }\n@@ -4153,16 +4147,10 @@ expand_expr (exp, target, tmode, modifier)\n \tif (TREE_CODE (TREE_OPERAND (exp, 0)) == PLUS_EXPR\n \t    || (TREE_CODE (TREE_OPERAND (exp, 0)) == SAVE_EXPR\n \t\t&& TREE_CODE (TREE_OPERAND (TREE_OPERAND (exp, 0), 0)) == PLUS_EXPR)\n-\t    || TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE\n-\t    || TREE_CODE (TREE_TYPE (exp)) == RECORD_TYPE\n-\t    || TREE_CODE (TREE_TYPE (exp)) == UNION_TYPE\n-\t    || TREE_CODE (TREE_TYPE (exp)) == QUAL_UNION_TYPE\n+\t    || AGGREGATE_TYPE_P (TREE_TYPE (exp))\n \t    || (TREE_CODE (exp1) == ADDR_EXPR\n \t\t&& (exp2 = TREE_OPERAND (exp1, 0))\n-\t\t&& (TREE_CODE (TREE_TYPE (exp2)) == ARRAY_TYPE\n-\t\t    || TREE_CODE (TREE_TYPE (exp2)) == RECORD_TYPE\n-\t\t    || TREE_CODE (TREE_TYPE (exp2)) == UNION_TYPE\n-\t\t    || TREE_CODE (TREE_TYPE (exp2)) == QUAL_UNION_TYPE)))\n+\t\t&& AGGREGATE_TYPE_P (TREE_TYPE (exp2))))\n \t  MEM_IN_STRUCT_P (temp) = 1;\n \tMEM_VOLATILE_P (temp) = TREE_THIS_VOLATILE (exp) | flag_volatile;\n #if 0 /* It is incorrect to set RTX_UNCHANGING_P here, because the fact that\n@@ -5341,11 +5329,7 @@ expand_expr (exp, target, tmode, modifier)\n \t\t\t\t      (TREE_INT_CST_LOW (TYPE_SIZE (type))\n \t\t\t\t       + BITS_PER_UNIT - 1)\n \t\t\t\t      / BITS_PER_UNIT, 0);\n-\t    MEM_IN_STRUCT_P (temp)\n-\t      = (TREE_CODE (type) == RECORD_TYPE\n-\t\t || TREE_CODE (type) == UNION_TYPE\n-\t\t || TREE_CODE (type) == QUAL_UNION_TYPE\n-\t\t || TREE_CODE (type) == ARRAY_TYPE);\n+\t    MEM_IN_STRUCT_P (temp) = AGGREGATE_TYPE_P (type);\n \t  }\n \telse\n \t  temp = gen_reg_rtx (mode);"}, {"sha": "cc9fa5061623ab2e3d99383a353675eec49d3f16", "filename": "gcc/function.c", "status": "modified", "additions": 7, "deletions": 32, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e3bdb9cb230f5d1632400d86ccbbb455e9bc1a/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e3bdb9cb230f5d1632400d86ccbbb455e9bc1a/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=05e3bdb9cb230f5d1632400d86ccbbb455e9bc1a", "patch": "@@ -1218,11 +1218,7 @@ put_reg_into_stack (function, reg, type, promoted_mode, decl_mode)\n \n   /* If this is a memory ref that contains aggregate components,\n      mark it as such for cse and loop optimize.  */\n-  MEM_IN_STRUCT_P (reg)\n-    = (TREE_CODE (type) == ARRAY_TYPE\n-       || TREE_CODE (type) == RECORD_TYPE\n-       || TREE_CODE (type) == UNION_TYPE\n-       || TREE_CODE (type) == QUAL_UNION_TYPE);\n+  MEM_IN_STRUCT_P (reg) = AGGREGATE_TYPE_P (type);\n \n   /* Now make sure that all refs to the variable, previously made\n      when it was a register, are fixed up to be valid again.  */\n@@ -2996,11 +2992,7 @@ aggregate_value_p (exp)\n \n   if (RETURN_IN_MEMORY (type))\n     return 1;\n-  if (flag_pcc_struct_return\n-      && (TREE_CODE (type) == RECORD_TYPE\n-\t  || TREE_CODE (type) == UNION_TYPE\n-\t  || TREE_CODE (type) == QUAL_UNION_TYPE\n-\t  || TREE_CODE (type) == ARRAY_TYPE))\n+  if (flag_pcc_struct_return && AGGREGATE_TYPE_P (type))\n     return 1;\n   /* Make sure we have suitable call-clobbered regs to return\n      the value in; if not, we must return it in memory.  */\n@@ -3119,11 +3111,7 @@ assign_parms (fndecl, second_time)\n \n   for (parm = fnargs; parm; parm = TREE_CHAIN (parm))\n     {\n-      int aggregate\n-\t= (TREE_CODE (TREE_TYPE (parm)) == ARRAY_TYPE\n-\t   || TREE_CODE (TREE_TYPE (parm)) == RECORD_TYPE\n-\t   || TREE_CODE (TREE_TYPE (parm)) == UNION_TYPE\n-\t   || TREE_CODE (TREE_TYPE (parm)) == QUAL_UNION_TYPE);\n+      int aggregate = AGGREGATE_TYPE_P (TREE_TYPE (parm));\n       struct args_size stack_offset;\n       struct args_size arg_size;\n       int passed_pointer = 0;\n@@ -3704,11 +3692,7 @@ assign_parms (fndecl, second_time)\n \t  DECL_RTL (result)\n \t    = gen_rtx (MEM, DECL_MODE (result), DECL_RTL (parm));\n \n-\t  MEM_IN_STRUCT_P (DECL_RTL (result))\n-\t    = (TREE_CODE (restype) == RECORD_TYPE\n-\t       || TREE_CODE (restype) == UNION_TYPE\n-\t       || TREE_CODE (restype) == QUAL_UNION_TYPE\n-\t       || TREE_CODE (restype) == ARRAY_TYPE);\n+\t  MEM_IN_STRUCT_P (DECL_RTL (result)) = AGGREGATE_TYPE_P (restype);\n \t}\n \n       if (TREE_THIS_VOLATILE (parm))\n@@ -4031,10 +4015,7 @@ uninitialized_vars_warning (block)\n \t     because assigning the fields one by one can fail to convince\n \t     flow.c that the entire aggregate was initialized.\n \t     Unions are troublesome because members may be shorter.  */\n-\t  && TREE_CODE (TREE_TYPE (decl)) != RECORD_TYPE\n-\t  && TREE_CODE (TREE_TYPE (decl)) != UNION_TYPE\n-\t  && TREE_CODE (TREE_TYPE (decl)) != QUAL_UNION_TYPE\n-\t  && TREE_CODE (TREE_TYPE (decl)) != ARRAY_TYPE\n+\t  && ! AGGREGATE_TYPE_P (TREE_TYPE (decl))\n \t  && DECL_RTL (decl) != 0\n \t  && GET_CODE (DECL_RTL (decl)) == REG\n \t  && regno_uninitialized (REGNO (DECL_RTL (decl))))\n@@ -4662,10 +4643,7 @@ init_function_start (subr, filename, line)\n   /* Warn if this value is an aggregate type,\n      regardless of which calling convention we are using for it.  */\n   if (warn_aggregate_return\n-      && (TREE_CODE (TREE_TYPE (DECL_RESULT (subr))) == RECORD_TYPE\n-\t  || TREE_CODE (TREE_TYPE (DECL_RESULT (subr))) == UNION_TYPE\n-\t  || TREE_CODE (TREE_TYPE (DECL_RESULT (subr))) == QUAL_UNION_TYPE\n-\t  || TREE_CODE (TREE_TYPE (DECL_RESULT (subr))) == ARRAY_TYPE))\n+      && AGGREGATE_TYPE_P (TREE_TYPE (DECL_RESULT (subr))))\n     warning (\"function returns an aggregate\");\n \n   current_function_returns_pointer\n@@ -4886,10 +4864,7 @@ expand_function_start (subr, parms_have_cleanups)\n \t  DECL_RTL (DECL_RESULT (subr))\n \t    = gen_rtx (MEM, DECL_MODE (DECL_RESULT (subr)), value_address);\n \t  MEM_IN_STRUCT_P (DECL_RTL (DECL_RESULT (subr)))\n-\t    = (TREE_CODE (TREE_TYPE (DECL_RESULT (subr))) == RECORD_TYPE\n-\t       || TREE_CODE (TREE_TYPE (DECL_RESULT (subr))) == UNION_TYPE\n-\t       || TREE_CODE (TREE_TYPE (DECL_RESULT (subr))) == QUAL_UNION_TYPE\n-\t       || TREE_CODE (TREE_TYPE (DECL_RESULT (subr))) == ARRAY_TYPE);\n+\t    = AGGREGATE_TYPE_P (TREE_TYPE (DECL_RESULT (subr)));\n \t}\n     }\n   else if (DECL_MODE (DECL_RESULT (subr)) == VOIDmode)"}, {"sha": "27bc9ec0f7a129366c012c81b1b400499c3d8492", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e3bdb9cb230f5d1632400d86ccbbb455e9bc1a/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e3bdb9cb230f5d1632400d86ccbbb455e9bc1a/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=05e3bdb9cb230f5d1632400d86ccbbb455e9bc1a", "patch": "@@ -3500,11 +3500,7 @@ expand_decl (decl)\n \n       /* If this is a memory ref that contains aggregate components,\n \t mark it as such for cse and loop optimize.  */\n-      MEM_IN_STRUCT_P (DECL_RTL (decl))\n-\t= (TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE\n-\t   || TREE_CODE (TREE_TYPE (decl)) == RECORD_TYPE\n-\t   || TREE_CODE (TREE_TYPE (decl)) == UNION_TYPE\n-\t   || TREE_CODE (TREE_TYPE (decl)) == QUAL_UNION_TYPE);\n+      MEM_IN_STRUCT_P (DECL_RTL (decl)) = AGGREGATE_TYPE_P (TREE_TYPE (decl));\n #if 0\n       /* If this is in memory because of -ffloat-store,\n \t set the volatile bit, to prevent optimizations from\n@@ -3551,11 +3547,7 @@ expand_decl (decl)\n \n       /* If this is a memory ref that contains aggregate components,\n \t mark it as such for cse and loop optimize.  */\n-      MEM_IN_STRUCT_P (DECL_RTL (decl))\n-\t= (TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE\n-\t   || TREE_CODE (TREE_TYPE (decl)) == RECORD_TYPE\n-\t   || TREE_CODE (TREE_TYPE (decl)) == UNION_TYPE\n-\t   || TREE_CODE (TREE_TYPE (decl)) == QUAL_UNION_TYPE);\n+      MEM_IN_STRUCT_P (DECL_RTL (decl)) = AGGREGATE_TYPE_P (TREE_TYPE (decl));\n \n       /* Indicate the alignment we actually gave this variable.  */\n #ifdef STACK_BOUNDARY"}, {"sha": "ba6253c74015d4a2d719b03068471d3a7ff1b252", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e3bdb9cb230f5d1632400d86ccbbb455e9bc1a/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e3bdb9cb230f5d1632400d86ccbbb455e9bc1a/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=05e3bdb9cb230f5d1632400d86ccbbb455e9bc1a", "patch": "@@ -540,10 +540,7 @@ make_decl_rtl (decl, asmspec, top_level)\n \t  if (TREE_READONLY (decl))\n \t    RTX_UNCHANGING_P (DECL_RTL (decl)) = 1;\n \t  MEM_IN_STRUCT_P (DECL_RTL (decl))\n-\t    = (TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE\n-\t       || TREE_CODE (TREE_TYPE (decl)) == RECORD_TYPE\n-\t       || TREE_CODE (TREE_TYPE (decl)) == UNION_TYPE\n-\t       || TREE_CODE (TREE_TYPE (decl)) == QUAL_UNION_TYPE);\n+\t    = AGGREGATE_TYPE_P (TREE_TYPE (decl));\n \n \t  /* Optionally set flags or add text to the name to record information\n \t     such as that it is a function name.\n@@ -2613,8 +2610,7 @@ output_constant_def (exp)\n   TREE_CST_RTL (exp)\n     = gen_rtx (MEM, TYPE_MODE (TREE_TYPE (exp)), def);\n   RTX_UNCHANGING_P (TREE_CST_RTL (exp)) = 1;\n-  if (TREE_CODE (TREE_TYPE (exp)) == RECORD_TYPE\n-      || TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE)\n+  if (AGGREGATE_TYPE_P (TREE_TYPE (exp)))\n     MEM_IN_STRUCT_P (TREE_CST_RTL (exp)) = 1;\n \n   pop_obstacks ();"}]}