{"sha": "14272aec22dcacbb3b937d6c5b86794faaa24620", "node_id": "C_kwDOANBUbNoAKDE0MjcyYWVjMjJkY2FjYmIzYjkzN2Q2YzViODY3OTRmYWFhMjQ2MjA", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-10-20T18:13:10Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-10-20T18:13:10Z"}, "message": "c++: constraint matching, TEMPLATE_ID_EXPR, current inst\n\nHere we're crashing during constraint matching for the instantiated\nhidden friends due to two issues with dependent substitution into a\nTEMPLATE_ID_EXPR that names a template from the current instantiation\n(as for C<1> with T=T from maybe_substitute_reqs_for):\n\n  * tsubst_copy substitutes into such a TEMPLATE_DECL by looking it up\n    from the substituted class scope.  But for this lookup to work when\n    the args are dependent, we need to substitute the class scope with\n    entering_scope=true so that we obtain the primary template type\n    A<T> (which has TYPE_BINFO) instead of the implicit instantiation\n    A<T> (which doesn't).\n  * lookup_and_finish_template_variable shouldn't instantiate a\n    TEMPLATE_ID_EXPR that names a TEMPLATE_DECL which has more than\n    one level of (unsubstituted) parameters (such as A<T>::C).\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (lookup_and_finish_template_variable): Don't\n\tinstantiate if the template's scope is dependent.\n\t(tsubst_copy) <case TEMPLATE_DECL>: Pass entering_scope=true\n\twhen substituting the class scope.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-friend10.C: New test.", "tree": {"sha": "80570cdfc04695bc11f437ce0c264839a0235519", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80570cdfc04695bc11f437ce0c264839a0235519"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14272aec22dcacbb3b937d6c5b86794faaa24620", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14272aec22dcacbb3b937d6c5b86794faaa24620", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14272aec22dcacbb3b937d6c5b86794faaa24620", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14272aec22dcacbb3b937d6c5b86794faaa24620/comments", "author": null, "committer": null, "parents": [{"sha": "1d561e1851c466a4952081caef17747781609b00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d561e1851c466a4952081caef17747781609b00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d561e1851c466a4952081caef17747781609b00"}], "stats": {"total": 38, "additions": 32, "deletions": 6}, "files": [{"sha": "1289aabec758206eae0653940cf1f440d3e944ff", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14272aec22dcacbb3b937d6c5b86794faaa24620/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14272aec22dcacbb3b937d6c5b86794faaa24620/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=14272aec22dcacbb3b937d6c5b86794faaa24620", "patch": "@@ -10398,14 +10398,15 @@ tree\n lookup_and_finish_template_variable (tree templ, tree targs,\n \t\t\t\t     tsubst_flags_t complain)\n {\n-  templ = lookup_template_variable (templ, targs);\n-  if (!any_dependent_template_arguments_p (targs))\n+  tree var = lookup_template_variable (templ, targs);\n+  if (TMPL_PARMS_DEPTH (DECL_TEMPLATE_PARMS (templ)) == 1\n+      && !any_dependent_template_arguments_p (targs))\n     {\n-      templ = finish_template_variable (templ, complain);\n-      mark_used (templ);\n+      var = finish_template_variable (var, complain);\n+      mark_used (var);\n     }\n \n-  return convert_from_reference (templ);\n+  return convert_from_reference (var);\n }\n \n /* If the set of template parameters PARMS contains a template parameter\n@@ -17229,7 +17230,8 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t     TEMPLATE_DECL with `D<T>' as its DECL_CONTEXT.  Now we\n \t     have to substitute this with one having context `D<int>'.  */\n \n-\t  tree context = tsubst (DECL_CONTEXT (t), args, complain, in_decl);\n+\t  tree context = tsubst_aggr_type (DECL_CONTEXT (t), args, complain,\n+\t\t\t\t\t   in_decl, /*entering_scope=*/true);\n \t  return lookup_field (context, DECL_NAME(t), 0, false);\n \t}\n       else"}, {"sha": "fc07120e112a482658a06a42525654d2f054f934", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-friend10.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14272aec22dcacbb3b937d6c5b86794faaa24620/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14272aec22dcacbb3b937d6c5b86794faaa24620/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend10.C?ref=14272aec22dcacbb3b937d6c5b86794faaa24620", "patch": "@@ -0,0 +1,24 @@\n+// Verify we don't crash when matching constraints containing a\n+// TEMPLATE_ID_EXPR that names a template from the current instantiation.\n+// { dg-do compile { target c++20 } }\n+\n+template<class T> static constexpr bool False = false;\n+\n+template<class T>\n+struct A {\n+  template<int N> static constexpr bool C = sizeof(T) > N;\n+  friend constexpr void f(A) requires C<1> { }\n+  friend constexpr void f(A) requires C<1> && False<T> { }\n+};\n+\n+template<class T>\n+struct A<T*> {\n+  template<int N> static constexpr bool D = sizeof(T) > N;\n+  friend constexpr void g(A) requires D<1> { }\n+  friend constexpr void g(A) requires D<1> && False<T> { }\n+};\n+\n+int main() {\n+  f(A<int>{});\n+  g(A<int*>{});\n+}"}]}