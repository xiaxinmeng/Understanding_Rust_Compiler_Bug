{"sha": "2aa5c17ce58d1e54763875dfb10580fbdd871731", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFhNWMxN2NlNThkMWU1NDc2Mzg3NWRmYjEwNTgwZmJkZDg3MTczMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-05-23T01:39:17Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-05-23T01:39:17Z"}, "message": "hashtable_policy.h (_Map_base<,, [...]): Add per DR 761.\n\n2008-05-22  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/tr1_impl/hashtable_policy.h (_Map_base<,,\n\tstd::_Select1st<_Pair>, true,>::at): Add per DR 761. \n\t* testsuite/23_containers/unordered_map/dr761.cc: New.\n\t* doc/xml/manual/intro.xml: Add an entry for DR 761.\n\nFrom-SVN: r135787", "tree": {"sha": "2c9a67492ce868bbbcbe2bf4aaa4bd2eba02688d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c9a67492ce868bbbcbe2bf4aaa4bd2eba02688d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2aa5c17ce58d1e54763875dfb10580fbdd871731", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aa5c17ce58d1e54763875dfb10580fbdd871731", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aa5c17ce58d1e54763875dfb10580fbdd871731", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aa5c17ce58d1e54763875dfb10580fbdd871731/comments", "author": null, "committer": null, "parents": [{"sha": "c63cac4791363e80ccb8fbc59a8bb52ddec1201c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c63cac4791363e80ccb8fbc59a8bb52ddec1201c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c63cac4791363e80ccb8fbc59a8bb52ddec1201c"}], "stats": {"total": 145, "additions": 143, "deletions": 2}, "files": [{"sha": "dac9a8ac7946059687d611cd2681860f2810f37f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa5c17ce58d1e54763875dfb10580fbdd871731/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa5c17ce58d1e54763875dfb10580fbdd871731/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2aa5c17ce58d1e54763875dfb10580fbdd871731", "patch": "@@ -1,3 +1,10 @@\n+2008-05-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/tr1_impl/hashtable_policy.h (_Map_base<,,\n+\tstd::_Select1st<_Pair>, true,>::at): Add per DR 761. \n+\t* testsuite/23_containers/unordered_map/dr761.cc: New.\n+\t* doc/xml/manual/intro.xml: Add an entry for DR 761.\n+\n 2008-05-22  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/26_numerics/complex/dr781.cc: Add test variable."}, {"sha": "3e84b554795a802f9e2b36dab587df849be9f7cc", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa5c17ce58d1e54763875dfb10580fbdd871731/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa5c17ce58d1e54763875dfb10580fbdd871731/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=2aa5c17ce58d1e54763875dfb10580fbdd871731", "patch": "@@ -629,6 +629,12 @@\n     <listitem><para>Make the member functions table and classic_table public.\n     </para></listitem></varlistentry>\n \n+    <varlistentry><term><ulink url=\"lwg-active.html#761\">761</ulink>:\n+        <emphasis>unordered_map needs an at() member function</emphasis>\n+    </term>\n+    <listitem><para>In C++0x mode, add at() and at() const.\n+    </para></listitem></varlistentry>\n+\n     <varlistentry><term><ulink url=\"lwg-active.html#778\">778</ulink>:\n         <emphasis>std::bitset does not have any constructor taking a string literal</emphasis>\n     </term>"}, {"sha": "6677a72d8d2eb3726efdd91d2bc0fa8a1f798e86", "filename": "libstdc++-v3/include/tr1_impl/hashtable_policy.h", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa5c17ce58d1e54763875dfb10580fbdd871731/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa5c17ce58d1e54763875dfb10580fbdd871731/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable_policy.h?ref=2aa5c17ce58d1e54763875dfb10580fbdd871731", "patch": "@@ -1,6 +1,6 @@\n // Internal policy header for TR1 unordered_set and unordered_map -*- C++ -*-\n \n-// Copyright (C) 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -530,12 +530,22 @@ namespace __detail\n     };\n \n   template<typename _Key, typename _Pair, typename _Hashtable>\n-  struct _Map_base<_Key, _Pair, std::_Select1st<_Pair>, true, _Hashtable>\n+    struct _Map_base<_Key, _Pair, std::_Select1st<_Pair>, true, _Hashtable>\n     {\n       typedef typename _Pair::second_type mapped_type;\n       \n       mapped_type&\n       operator[](const _Key& __k);\n+\n+#ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // DR 761. unordered_map needs an at() member function.\n+      mapped_type&\n+      at(const _Key& __k);\n+\n+      const mapped_type&\n+      at(const _Key& __k) const;\n+#endif\n     };\n \n   template<typename _Key, typename _Pair, typename _Hashtable>\n@@ -557,6 +567,44 @@ namespace __detail\n       return (__p->_M_v).second;\n     }\n \n+#ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n+  template<typename _Key, typename _Pair, typename _Hashtable>\n+    typename _Map_base<_Key, _Pair, std::_Select1st<_Pair>,\n+\t\t       true, _Hashtable>::mapped_type&\n+    _Map_base<_Key, _Pair, std::_Select1st<_Pair>, true, _Hashtable>::\n+    at(const _Key& __k)\n+    {\n+      _Hashtable* __h = static_cast<_Hashtable*>(this);\n+      typename _Hashtable::_Hash_code_type __code = __h->_M_hash_code(__k);\n+      std::size_t __n = __h->_M_bucket_index(__k, __code,\n+\t\t\t\t\t     __h->_M_bucket_count);\n+\n+      typename _Hashtable::_Node* __p =\n+\t__h->_M_find_node(__h->_M_buckets[__n], __k, __code);\n+      if (!__p)\n+\t__throw_out_of_range(__N(\"_Map_base::at\"));\n+      return (__p->_M_v).second;\n+    }\n+\n+  template<typename _Key, typename _Pair, typename _Hashtable>\n+    const typename _Map_base<_Key, _Pair, std::_Select1st<_Pair>,\n+\t\t\t     true, _Hashtable>::mapped_type&\n+    _Map_base<_Key, _Pair, std::_Select1st<_Pair>, true, _Hashtable>::\n+    at(const _Key& __k) const\n+    {\n+      const _Hashtable* __h = static_cast<const _Hashtable*>(this);\n+      typename _Hashtable::_Hash_code_type __code = __h->_M_hash_code(__k);\n+      std::size_t __n = __h->_M_bucket_index(__k, __code,\n+\t\t\t\t\t     __h->_M_bucket_count);\n+\n+      typename _Hashtable::_Node* __p =\n+\t__h->_M_find_node(__h->_M_buckets[__n], __k, __code);\n+      if (!__p)\n+\t__throw_out_of_range(__N(\"_Map_base::at\"));\n+      return (__p->_M_v).second;\n+    }\n+#endif\n+\n   // class template _Rehash_base.  Give hashtable the max_load_factor\n   // functions iff the rehash policy is _Prime_rehash_policy.\n   template<typename _RehashPolicy, typename _Hashtable>"}, {"sha": "a582bc4f6eaae7cd8d9f5563acdd0fb274c2e8dc", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/dr761.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa5c17ce58d1e54763875dfb10580fbdd871731/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdr761.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa5c17ce58d1e54763875dfb10580fbdd871731/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdr761.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdr761.cc?ref=2aa5c17ce58d1e54763875dfb10580fbdd871731", "patch": "@@ -0,0 +1,80 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2008-05-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <unordered_map>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+// DR 761. unordered_map needs an at() member function.\n+void test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+  typedef std::unordered_map<int, double> map_type;\n+\n+  {\n+    map_type m;\n+    m[0] = 1.5;\n+\n+    double& rd = m.at(0);\n+    VERIFY( rd == 1.5 );\n+    try\n+      {\n+\tm.at(1);\n+      }\n+    catch(std::out_of_range& obj)\n+      {\n+\t// Expected.\n+      }\n+    catch(...)\n+      {\n+\t// Failed.\n+\tthrow;\n+      }    \n+  }\n+\n+  {\n+    map_type m;\n+    m[1] = 2.5;\n+    const map_type cm(m);\n+\n+    const double& crd = cm.at(1);\n+    VERIFY( crd == 2.5 );\n+    try\n+      {\n+\tcm.at(0);\n+      }\n+    catch(std::out_of_range& obj)\n+      {\n+\t// Expected.\n+      }\n+    catch(...)\n+      {\n+\t// Failed.\n+\tthrow;\n+      }    \n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}