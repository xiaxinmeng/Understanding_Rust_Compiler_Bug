{"sha": "0f97b81b036b13272c350bbb3ff94afe3294ac2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY5N2I4MWIwMzZiMTMyNzJjMzUwYmJiM2ZmOTRhZmUzMjk0YWMyZA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-09-23T11:03:38Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-09-23T11:03:38Z"}, "message": "Do array index calculations in gfc_array_index_type\n\nIt was recently noticed that for a few of the coarray intrinsics array\nindex calculations were done in integer_type_node instead of\ngfc_array_index_type.  This patch fixes this.\n\nRegtested on x86_64-pc-linux-gnu.\n\ngcc/fortran/ChangeLog:\n\n2018-09-23  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\t* trans-expr.c (gfc_caf_get_image_index): Do array index\n\tcalculations in gfc_array_index_type.\n\t* trans-intrinsic.c (conv_intrinsic_event_query): Likewise.\n\t* trans-stmt.c (gfc_trans_lock_unlock): Likewise.\n\t(gfc_trans_event_post_wait): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2018-09-23  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\t* gfortran.dg/coarray_lib_alloc_4.f90: Fix scan patterns.\n\t* gfortran.dg/coarray_lock_7.f90: Likewise.\n\nFrom-SVN: r264513", "tree": {"sha": "64b157df8c46f8fdeafe7720d1aa7c723b7b08a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64b157df8c46f8fdeafe7720d1aa7c723b7b08a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f97b81b036b13272c350bbb3ff94afe3294ac2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f97b81b036b13272c350bbb3ff94afe3294ac2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f97b81b036b13272c350bbb3ff94afe3294ac2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f97b81b036b13272c350bbb3ff94afe3294ac2d/comments", "author": null, "committer": null, "parents": [{"sha": "ee7fb0588c6361b4d77337ab0f7527be64fcdde2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee7fb0588c6361b4d77337ab0f7527be64fcdde2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee7fb0588c6361b4d77337ab0f7527be64fcdde2"}], "stats": {"total": 121, "additions": 61, "deletions": 60}, "files": [{"sha": "be099b7d1a774fc18da8cdcbdceca1be4b794e10", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f97b81b036b13272c350bbb3ff94afe3294ac2d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f97b81b036b13272c350bbb3ff94afe3294ac2d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0f97b81b036b13272c350bbb3ff94afe3294ac2d", "patch": "@@ -1,3 +1,11 @@\n+2018-09-23  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* trans-expr.c (gfc_caf_get_image_index): Do array index\n+\tcalculations in gfc_array_index_type.\n+\t* trans-intrinsic.c (conv_intrinsic_event_query): Likewise.\n+\t* trans-stmt.c (gfc_trans_lock_unlock): Likewise.\n+\t(gfc_trans_event_post_wait): Likewise.\n+\n 2018-09-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/87395"}, {"sha": "edc1c10435a1468401f9fab34495611e96b99c64", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f97b81b036b13272c350bbb3ff94afe3294ac2d/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f97b81b036b13272c350bbb3ff94afe3294ac2d/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=0f97b81b036b13272c350bbb3ff94afe3294ac2d", "patch": "@@ -2095,60 +2095,56 @@ gfc_caf_get_image_index (stmtblock_t *block, gfc_expr *e, tree desc)\n \t\t\t\t  integer_zero_node);\n     }\n \n-  img_idx = integer_zero_node;\n-  extent = integer_one_node;\n+  img_idx = build_zero_cst (gfc_array_index_type);\n+  extent = build_one_cst (gfc_array_index_type);\n   if (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (desc)))\n     for (i = ref->u.ar.dimen; i < ref->u.ar.dimen + ref->u.ar.codimen; i++)\n       {\n \tgfc_init_se (&se, NULL);\n-\tgfc_conv_expr_type (&se, ref->u.ar.start[i], integer_type_node);\n+\tgfc_conv_expr_type (&se, ref->u.ar.start[i], gfc_array_index_type);\n \tgfc_add_block_to_block (block, &se.pre);\n \tlbound = gfc_conv_descriptor_lbound_get (desc, gfc_rank_cst[i]);\n \ttmp = fold_build2_loc (input_location, MINUS_EXPR,\n-\t\t\t       integer_type_node, se.expr,\n-\t\t\t       fold_convert(integer_type_node, lbound));\n-\ttmp = fold_build2_loc (input_location, MULT_EXPR, integer_type_node,\n+\t\t\t       TREE_TYPE (lbound), se.expr, lbound);\n+\ttmp = fold_build2_loc (input_location, MULT_EXPR, TREE_TYPE (tmp),\n \t\t\t       extent, tmp);\n-\timg_idx = fold_build2_loc (input_location, PLUS_EXPR, integer_type_node,\n-\t\t\t\t   img_idx, tmp);\n+\timg_idx = fold_build2_loc (input_location, PLUS_EXPR,\n+\t\t\t\t   TREE_TYPE (tmp), img_idx, tmp);\n \tif (i < ref->u.ar.dimen + ref->u.ar.codimen - 1)\n \t  {\n \t    ubound = gfc_conv_descriptor_ubound_get (desc, gfc_rank_cst[i]);\n \t    tmp = gfc_conv_array_extent_dim (lbound, ubound, NULL);\n-\t    tmp = fold_convert (integer_type_node, tmp);\n \t    extent = fold_build2_loc (input_location, MULT_EXPR,\n-\t\t\t\t      integer_type_node, extent, tmp);\n+\t\t\t\t      TREE_TYPE (tmp), extent, tmp);\n \t  }\n       }\n   else\n     for (i = ref->u.ar.dimen; i < ref->u.ar.dimen + ref->u.ar.codimen; i++)\n       {\n \tgfc_init_se (&se, NULL);\n-\tgfc_conv_expr_type (&se, ref->u.ar.start[i], integer_type_node);\n+\tgfc_conv_expr_type (&se, ref->u.ar.start[i], gfc_array_index_type);\n \tgfc_add_block_to_block (block, &se.pre);\n \tlbound = GFC_TYPE_ARRAY_LBOUND (TREE_TYPE (desc), i);\n-\tlbound = fold_convert (integer_type_node, lbound);\n \ttmp = fold_build2_loc (input_location, MINUS_EXPR,\n-\t\t\t       integer_type_node, se.expr, lbound);\n-\ttmp = fold_build2_loc (input_location, MULT_EXPR, integer_type_node,\n+\t\t\t       TREE_TYPE (lbound), se.expr, lbound);\n+\ttmp = fold_build2_loc (input_location, MULT_EXPR, TREE_TYPE (tmp),\n \t\t\t       extent, tmp);\n-\timg_idx = fold_build2_loc (input_location, PLUS_EXPR, integer_type_node,\n+\timg_idx = fold_build2_loc (input_location, PLUS_EXPR, TREE_TYPE (tmp),\n \t\t\t\t   img_idx, tmp);\n \tif (i < ref->u.ar.dimen + ref->u.ar.codimen - 1)\n \t  {\n \t    ubound = GFC_TYPE_ARRAY_UBOUND (TREE_TYPE (desc), i);\n-\t    ubound = fold_convert (integer_type_node, ubound);\n \t    tmp = fold_build2_loc (input_location, MINUS_EXPR,\n-\t\t\t\t      integer_type_node, ubound, lbound);\n-\t    tmp = fold_build2_loc (input_location, PLUS_EXPR, integer_type_node,\n-\t\t\t\t   tmp, integer_one_node);\n+\t\t\t\t   TREE_TYPE (ubound), ubound, lbound);\n+\t    tmp = fold_build2_loc (input_location, PLUS_EXPR, TREE_TYPE (tmp),\n+\t\t\t\t   tmp, build_one_cst (TREE_TYPE (tmp)));\n \t    extent = fold_build2_loc (input_location, MULT_EXPR,\n-\t\t\t\t      integer_type_node, extent, tmp);\n+\t\t\t\t      TREE_TYPE (tmp), extent, tmp);\n \t  }\n       }\n-  img_idx = fold_build2_loc (input_location, PLUS_EXPR, integer_type_node,\n-\t\t\t     img_idx, integer_one_node);\n-  return img_idx;\n+  img_idx = fold_build2_loc (input_location, PLUS_EXPR, TREE_TYPE (img_idx),\n+\t\t\t     img_idx, build_one_cst (TREE_TYPE (img_idx)));\n+  return fold_convert (integer_type_node, img_idx);\n }\n \n "}, {"sha": "639175ade71342351dc6eaa39a5c3af7005dc093", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f97b81b036b13272c350bbb3ff94afe3294ac2d/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f97b81b036b13272c350bbb3ff94afe3294ac2d/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=0f97b81b036b13272c350bbb3ff94afe3294ac2d", "patch": "@@ -10663,7 +10663,7 @@ conv_intrinsic_event_query (gfc_code *code)\n   if (flag_coarray == GFC_FCOARRAY_LIB)\n     {\n       tree tmp, token, image_index;\n-      tree index = size_zero_node;\n+      tree index = build_zero_cst (gfc_array_index_type);\n \n       if (event_expr->expr_type == EXPR_FUNCTION\n \t  && event_expr->value.function.isym\n@@ -10716,29 +10716,25 @@ conv_intrinsic_event_query (gfc_code *code)\n \t  desc = argse.expr;\n \t  *ar = ar2;\n \n-\t  extent = integer_one_node;\n+\t  extent = build_one_cst (gfc_array_index_type);\n \t  for (i = 0; i < ar->dimen; i++)\n \t    {\n \t      gfc_init_se (&argse, NULL);\n-\t      gfc_conv_expr_type (&argse, ar->start[i], integer_type_node);\n+\t      gfc_conv_expr_type (&argse, ar->start[i], gfc_array_index_type);\n \t      gfc_add_block_to_block (&argse.pre, &argse.pre);\n \t      lbound = gfc_conv_descriptor_lbound_get (desc, gfc_rank_cst[i]);\n \t      tmp = fold_build2_loc (input_location, MINUS_EXPR,\n-\t\t\t\t     integer_type_node, argse.expr,\n-\t\t\t\t     fold_convert(integer_type_node, lbound));\n+\t\t\t\t     TREE_TYPE (lbound), argse.expr, lbound);\n \t      tmp = fold_build2_loc (input_location, MULT_EXPR,\n-\t\t\t\t     integer_type_node, extent, tmp);\n+\t\t\t\t     TREE_TYPE (tmp), extent, tmp);\n \t      index = fold_build2_loc (input_location, PLUS_EXPR,\n-\t\t\t\t       gfc_array_index_type, index,\n-\t\t\t\t       fold_convert (gfc_array_index_type,\n-\t\t\t\t\t\t     tmp));\n+\t\t\t\t       TREE_TYPE (tmp), index, tmp);\n \t      if (i < ar->dimen - 1)\n \t\t{\n \t\t  ubound = gfc_conv_descriptor_ubound_get (desc, gfc_rank_cst[i]);\n \t\t  tmp = gfc_conv_array_extent_dim (lbound, ubound, NULL);\n-\t\t  tmp = fold_convert (integer_type_node, tmp);\n \t\t  extent = fold_build2_loc (input_location, MULT_EXPR,\n-\t\t\t\t\t    integer_type_node, extent, tmp);\n+\t\t\t\t\t    TREE_TYPE (tmp), extent, tmp);\n \t\t}\n \t    }\n \t}"}, {"sha": "ef9e519adc8b6c5407efabf208711270bad9486d", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f97b81b036b13272c350bbb3ff94afe3294ac2d/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f97b81b036b13272c350bbb3ff94afe3294ac2d/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=0f97b81b036b13272c350bbb3ff94afe3294ac2d", "patch": "@@ -841,7 +841,7 @@ gfc_trans_lock_unlock (gfc_code *code, gfc_exec_op op)\n   if (flag_coarray == GFC_FCOARRAY_LIB)\n     {\n       tree tmp, token, image_index, errmsg, errmsg_len;\n-      tree index = size_zero_node;\n+      tree index = build_zero_cst (gfc_array_index_type);\n       tree caf_decl = gfc_get_tree_for_caf_expr (code->expr1);\n \n       if (code->expr1->symtree->n.sym->ts.type != BT_DERIVED\n@@ -884,27 +884,25 @@ gfc_trans_lock_unlock (gfc_code *code, gfc_exec_op op)\n \t  desc = argse.expr;\n \t  *ar = ar2;\n \n-\t  extent = integer_one_node;\n+\t  extent = build_one_cst (gfc_array_index_type);\n \t  for (i = 0; i < ar->dimen; i++)\n \t    {\n \t      gfc_init_se (&argse, NULL);\n-\t      gfc_conv_expr_type (&argse, ar->start[i], integer_type_node);\n+\t      gfc_conv_expr_type (&argse, ar->start[i], gfc_array_index_type);\n \t      gfc_add_block_to_block (&argse.pre, &argse.pre);\n \t      lbound = gfc_conv_descriptor_lbound_get (desc, gfc_rank_cst[i]);\n \t      tmp = fold_build2_loc (input_location, MINUS_EXPR,\n-\t\t\t\t     integer_type_node, argse.expr,\n-\t\t\t\t     fold_convert(integer_type_node, lbound));\n+\t\t\t\t     TREE_TYPE (lbound), argse.expr, lbound);\n \t      tmp = fold_build2_loc (input_location, MULT_EXPR,\n-\t\t\t\t     integer_type_node, extent, tmp);\n+\t\t\t\t     TREE_TYPE (tmp), extent, tmp);\n \t      index = fold_build2_loc (input_location, PLUS_EXPR,\n-\t\t\t\t       integer_type_node, index, tmp);\n+\t\t\t\t       TREE_TYPE (tmp), index, tmp);\n \t      if (i < ar->dimen - 1)\n \t\t{\n \t\t  ubound = gfc_conv_descriptor_ubound_get (desc, gfc_rank_cst[i]);\n \t\t  tmp = gfc_conv_array_extent_dim (lbound, ubound, NULL);\n-\t\t  tmp = fold_convert (integer_type_node, tmp);\n \t\t  extent = fold_build2_loc (input_location, MULT_EXPR,\n-\t\t\t\t\t    integer_type_node, extent, tmp);\n+\t\t\t\t\t    TREE_TYPE (tmp), extent, tmp);\n \t\t}\n \t    }\n \t}\n@@ -938,6 +936,7 @@ gfc_trans_lock_unlock (gfc_code *code, gfc_exec_op op)\n \t  lock_acquired = gfc_create_var (integer_type_node, \"acquired\");\n \t}\n \n+      index = fold_convert (size_type_node, index);\n       if (op == EXEC_LOCK)\n \ttmp = build_call_expr_loc (input_location, gfor_fndecl_caf_lock, 7,\n                                    token, index, image_index,\n@@ -1038,7 +1037,7 @@ gfc_trans_event_post_wait (gfc_code *code, gfc_exec_op op)\n \n   gfc_start_block (&se.pre);\n   tree tmp, token, image_index, errmsg, errmsg_len;\n-  tree index = size_zero_node;\n+  tree index = build_zero_cst (gfc_array_index_type);\n   tree caf_decl = gfc_get_tree_for_caf_expr (code->expr1);\n \n   if (code->expr1->symtree->n.sym->ts.type != BT_DERIVED\n@@ -1083,28 +1082,25 @@ gfc_trans_event_post_wait (gfc_code *code, gfc_exec_op op)\n       desc = argse.expr;\n       *ar = ar2;\n \n-      extent = integer_one_node;\n+      extent = build_one_cst (gfc_array_index_type);\n       for (i = 0; i < ar->dimen; i++)\n \t{\n \t  gfc_init_se (&argse, NULL);\n-\t  gfc_conv_expr_type (&argse, ar->start[i], integer_type_node);\n+\t  gfc_conv_expr_type (&argse, ar->start[i], gfc_array_index_type);\n \t  gfc_add_block_to_block (&argse.pre, &argse.pre);\n \t  lbound = gfc_conv_descriptor_lbound_get (desc, gfc_rank_cst[i]);\n \t  tmp = fold_build2_loc (input_location, MINUS_EXPR,\n-\t\t\t\t integer_type_node, argse.expr,\n-\t\t\t\t fold_convert(integer_type_node, lbound));\n+\t\t\t\t TREE_TYPE (lbound), argse.expr, lbound);\n \t  tmp = fold_build2_loc (input_location, MULT_EXPR,\n-\t\t\t\t integer_type_node, extent, tmp);\n+\t\t\t\t TREE_TYPE (tmp), extent, tmp);\n \t  index = fold_build2_loc (input_location, PLUS_EXPR,\n-\t\t\t\t   gfc_array_index_type, index,\n-\t\t\t\t   fold_convert (gfc_array_index_type, tmp));\n+\t\t\t\t   TREE_TYPE (tmp), index, tmp);\n \t  if (i < ar->dimen - 1)\n \t    {\n \t      ubound = gfc_conv_descriptor_ubound_get (desc, gfc_rank_cst[i]);\n \t      tmp = gfc_conv_array_extent_dim (lbound, ubound, NULL);\n-\t      tmp = fold_convert (integer_type_node, tmp);\n \t      extent = fold_build2_loc (input_location, MULT_EXPR,\n-\t\t\t\t\tinteger_type_node, extent, tmp);\n+\t\t\t\t\tTREE_TYPE (tmp), extent, tmp);\n \t    }\n \t}\n     }"}, {"sha": "07b23e6e0a81d8c3370d260a13e8188d85788c26", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f97b81b036b13272c350bbb3ff94afe3294ac2d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f97b81b036b13272c350bbb3ff94afe3294ac2d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f97b81b036b13272c350bbb3ff94afe3294ac2d", "patch": "@@ -1,3 +1,8 @@\n+2018-09-23  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* gfortran.dg/coarray_lib_alloc_4.f90: Fix scan patterns.\n+\t* gfortran.dg/coarray_lock_7.f90: Likewise.\n+\n 2018-09-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/87395"}, {"sha": "d695faa9eafc6fa87be4d1f9f4bbd070a64d3e4f", "filename": "gcc/testsuite/gfortran.dg/coarray_lib_alloc_4.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f97b81b036b13272c350bbb3ff94afe3294ac2d/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_alloc_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f97b81b036b13272c350bbb3ff94afe3294ac2d/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_alloc_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_alloc_4.f90?ref=0f97b81b036b13272c350bbb3ff94afe3294ac2d", "patch": "@@ -38,7 +38,7 @@ program test_caf_alloc\n   deallocate(xx)\n end\n \n-! { dg-final { scan-tree-dump-times \"_gfortran_caf_is_present \\\\(xx\\\\.token, 2 - \\\\(integer\\\\(kind=4\\\\)\\\\) xx\\\\.dim\\\\\\[0\\\\\\]\\\\.lbound, &caf_ref\\\\.\\[0-9\\]+\\\\)|_gfortran_caf_is_present \\\\(xx\\\\.token, 2 - xx\\\\.dim\\\\\\[0\\\\\\]\\\\.lbound, &caf_ref\\\\.\\[0-9\\]+\\\\)\" 10 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_is_present \\\\(xx\\\\.token, \\\\(integer\\\\(kind=4\\\\)\\\\) \\\\(2 - xx\\\\.dim\\\\\\[0\\\\\\]\\\\.lbound\\\\), &caf_ref\\\\.\\[0-9\\]+\\\\)|_gfortran_caf_is_present \\\\(xx\\\\.token, 2 - xx\\\\.dim\\\\\\[0\\\\\\]\\\\.lbound, &caf_ref\\\\.\\[0-9\\]+\\\\)\" 10 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"_gfortran_caf_register \\\\(\\[0-9\\]+, 1, &xx\\\\.token, \\\\(void \\\\*\\\\) &xx, 0B, 0B, 0\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"_gfortran_caf_register \\\\(\\[0-9\\]+, 7\" 2 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"_gfortran_caf_register \\\\(\\[0-9\\]+, 8\" 2 \"original\" } }"}, {"sha": "363fb30b5d7bc46e1d1873702cc3028d40a58fae", "filename": "gcc/testsuite/gfortran.dg/coarray_lock_7.f90", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f97b81b036b13272c350bbb3ff94afe3294ac2d/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lock_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f97b81b036b13272c350bbb3ff94afe3294ac2d/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lock_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lock_7.f90?ref=0f97b81b036b13272c350bbb3ff94afe3294ac2d", "patch": "@@ -35,12 +35,12 @@\n ! { dg-final { scan-tree-dump-times \"_gfortran_caf_lock \\\\(caf_token.., 0, 0, 0B, 0B, 0B, 0\\\\);\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"_gfortran_caf_unlock \\\\(caf_token.., 0, 0, 0B, 0B, 0\\\\);\" 1 \"original\" } }\n \n-! { dg-final { scan-tree-dump-times \"_gfortran_caf_lock \\\\(caf_token.., \\\\(3 - \\\\(integer\\\\(kind=4\\\\)\\\\) parm...dim\\\\\\[0\\\\\\].lbound\\\\) \\\\+ \\\\(integer\\\\(kind=4\\\\)\\\\) \\\\(MAX_EXPR <parm...dim\\\\\\[0\\\\\\].ubound - parm...dim\\\\\\[0\\\\\\].lbound, -1> \\\\+ 1\\\\) \\\\* \\\\(3 - \\\\(integer\\\\(kind=4\\\\)\\\\) parm...dim\\\\\\[1\\\\\\].lbound\\\\), 0, 0B, &ii, 0B, 0\\\\);|_gfortran_caf_lock \\\\(caf_token.1, \\\\(3 - parm...dim\\\\\\[0\\\\\\].lbound\\\\) \\\\+ \\\\(MAX_EXPR <parm...dim\\\\\\[0\\\\\\].ubound - parm...dim\\\\\\[0\\\\\\].lbound, -1> \\\\+ 1\\\\) \\\\* \\\\(3 - parm...dim\\\\\\[1\\\\\\].lbound\\\\), 0, 0B, &ii, 0B, 0\\\\);\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"_gfortran_caf_unlock \\\\(caf_token.., \\\\(2 - \\\\(integer\\\\(kind=4\\\\)\\\\) parm...dim\\\\\\[0\\\\\\].lbound\\\\) \\\\+ \\\\(integer\\\\(kind=4\\\\)\\\\) \\\\(MAX_EXPR <parm...dim\\\\\\[0\\\\\\].ubound - parm...dim\\\\\\[0\\\\\\].lbound, -1> \\\\+ 1\\\\) \\\\* \\\\(3 - \\\\(integer\\\\(kind=4\\\\)\\\\) parm...dim\\\\\\[1\\\\\\].lbound\\\\), 0, &ii, 0B, 0\\\\);|_gfortran_caf_unlock \\\\(caf_token.., \\\\(2 - parm...dim\\\\\\[0\\\\\\].lbound\\\\) \\\\+ \\\\(MAX_EXPR <parm...dim\\\\\\[0\\\\\\].ubound - parm...dim\\\\\\[0\\\\\\].lbound, -1> \\\\+ 1\\\\) \\\\* \\\\(3 - parm...dim\\\\\\[1\\\\\\].lbound\\\\), 0, &ii, 0B, 0\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_lock \\\\(caf_token.., .*\\\\(\\\\(3 - parm...dim\\\\\\[0\\\\\\].lbound\\\\) \\\\+ \\\\(MAX_EXPR <parm...dim\\\\\\[0\\\\\\].ubound - parm...dim\\\\\\[0\\\\\\].lbound, -1> \\\\+ 1\\\\) \\\\* \\\\(3 - parm...dim\\\\\\[1\\\\\\].lbound\\\\)\\\\), 0, 0B, &ii, 0B, 0\\\\);|_gfortran_caf_lock \\\\(caf_token.1, \\\\(3 - parm...dim\\\\\\[0\\\\\\].lbound\\\\) \\\\+ \\\\(MAX_EXPR <parm...dim\\\\\\[0\\\\\\].ubound - parm...dim\\\\\\[0\\\\\\].lbound, -1> \\\\+ 1\\\\) \\\\* \\\\(3 - parm...dim\\\\\\[1\\\\\\].lbound\\\\), 0, 0B, &ii, 0B, 0\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_unlock \\\\(caf_token.., .*\\\\(\\\\(2 - parm...dim\\\\\\[0\\\\\\].lbound\\\\) \\\\+ \\\\(MAX_EXPR <parm...dim\\\\\\[0\\\\\\].ubound - parm...dim\\\\\\[0\\\\\\].lbound, -1> \\\\+ 1\\\\) \\\\* \\\\(3 - parm...dim\\\\\\[1\\\\\\].lbound\\\\)\\\\), 0, &ii, 0B, 0\\\\);|_gfortran_caf_unlock \\\\(caf_token.., \\\\(2 - parm...dim\\\\\\[0\\\\\\].lbound\\\\) \\\\+ \\\\(MAX_EXPR <parm...dim\\\\\\[0\\\\\\].ubound - parm...dim\\\\\\[0\\\\\\].lbound, -1> \\\\+ 1\\\\) \\\\* \\\\(3 - parm...dim\\\\\\[1\\\\\\].lbound\\\\), 0, &ii, 0B, 0\\\\);\" 1 \"original\" } }\n \n-! { dg-final { scan-tree-dump-times \"_gfortran_caf_lock \\\\(three.token, 0, 5 - \\\\(integer\\\\(kind=4\\\\)\\\\) three.dim\\\\\\[0\\\\\\].lbound, &acquired.\\[0-9\\]+, 0B, 0B, 0\\\\);|_gfortran_caf_lock \\\\(three.token, 0, 5 - three.dim\\\\\\[0\\\\\\].lbound, &acquired.\\[0-9\\]+, 0B, 0B, 0\\\\);\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"_gfortran_caf_unlock \\\\(three.token, 0, 8 - \\\\(integer\\\\(kind=4\\\\)\\\\) three.dim\\\\\\[0\\\\\\].lbound, &ii, 0B, 0\\\\);|_gfortran_caf_unlock \\\\(three.token, 0, 8 - three.dim\\\\\\[0\\\\\\].lbound, &ii, 0B, 0\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_lock \\\\(three.token, 0, \\\\(integer\\\\(kind=4\\\\)\\\\) \\\\(5 - three.dim\\\\\\[0\\\\\\].lbound\\\\), &acquired.\\[0-9\\]+, 0B, 0B, 0\\\\);|_gfortran_caf_lock \\\\(three.token, 0, 5 - three.dim\\\\\\[0\\\\\\].lbound, &acquired.\\[0-9\\]+, 0B, 0B, 0\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_unlock \\\\(three.token, 0, \\\\(integer\\\\(kind=4\\\\)\\\\) \\\\(8 - three.dim\\\\\\[0\\\\\\].lbound\\\\), &ii, 0B, 0\\\\);|_gfortran_caf_unlock \\\\(three.token, 0, 8 - three.dim\\\\\\[0\\\\\\].lbound, &ii, 0B, 0\\\\);\" 1 \"original\" } }\n \n-! { dg-final { scan-tree-dump-times \"_gfortran_caf_lock \\\\(four.token, 1 - \\\\(integer\\\\(kind=4\\\\)\\\\) four.dim\\\\\\[0\\\\\\].lbound, 7 - \\\\(integer\\\\(kind=4\\\\)\\\\) four.dim\\\\\\[1\\\\\\].lbound, &acquired.\\[0-9\\]+, &ii, 0B, 0\\\\);|_gfortran_caf_lock \\\\(four.token, 1 - four.dim\\\\\\[0\\\\\\].lbound, 7 - four.dim\\\\\\[1\\\\\\].lbound, &acquired.\\[0-9\\]+, &ii, 0B, 0\\\\);\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"_gfortran_caf_unlock \\\\(four.token, 2 - \\\\(integer\\\\(kind=4\\\\)\\\\) four.dim\\\\\\[0\\\\\\].lbound, 8 - \\\\(integer\\\\(kind=4\\\\)\\\\) four.dim\\\\\\[1\\\\\\].lbound, 0B, 0B, 0\\\\);|_gfortran_caf_unlock \\\\(four.token, 2 - four.dim\\\\\\[0\\\\\\].lbound, 8 - four.dim\\\\\\[1\\\\\\].lbound, 0B, 0B, 0\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_lock \\\\(four.token, .*\\\\(1 - four.dim\\\\\\[0\\\\\\].lbound\\\\), \\\\(integer\\\\(kind=4\\\\)\\\\) \\\\(7 - four.dim\\\\\\[1\\\\\\].lbound\\\\), &acquired.\\[0-9\\]+, &ii, 0B, 0\\\\);|_gfortran_caf_lock \\\\(four.token, 1 - four.dim\\\\\\[0\\\\\\].lbound, 7 - four.dim\\\\\\[1\\\\\\].lbound, &acquired.\\[0-9\\]+, &ii, 0B, 0\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_unlock \\\\(four.token, .*\\\\(2 - four.dim\\\\\\[0\\\\\\].lbound\\\\), \\\\(integer\\\\(kind=4\\\\)\\\\) \\\\(8 - four.dim\\\\\\[1\\\\\\].lbound\\\\), 0B, 0B, 0\\\\);|_gfortran_caf_unlock \\\\(four.token, 2 - four.dim\\\\\\[0\\\\\\].lbound, 8 - four.dim\\\\\\[1\\\\\\].lbound, 0B, 0B, 0\\\\);\" 1 \"original\" } }\n "}]}