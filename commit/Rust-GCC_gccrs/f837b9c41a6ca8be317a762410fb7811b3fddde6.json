{"sha": "f837b9c41a6ca8be317a762410fb7811b3fddde6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgzN2I5YzQxYTZjYThiZTMxN2E3NjI0MTBmYjc4MTFiM2ZkZGRlNg==", "commit": {"author": {"name": "Cherry Zhang", "email": "cherryyz@google.com", "date": "2019-05-08T00:14:17Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-05-08T00:14:17Z"}, "message": "compiler: add an option to emit optimization diagnostics\n    \n    Add a -fgo-debug-optimization option to emit optimization\n    diagnostics. This can be used for testing optimizations. Apply\n    this to the range clear optimizations of maps and arrays.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/170002\n\ngcc/go:\n\n\t* lang.opt (-fgo-debug-optimization): New option.\n\t* go-c.h (struct go_create_gogo_args): Add debug_optimization\n\tfield.\n\t* go-lang.c (go_langhook_init): Set debug_optimization field.\n\t* gccgo.texi (Invoking gccgo): Document -fgo-debug-optimization.\n\ngcc/testsuite:\n\n\t* go.dg/arrayclear.go: New test.\n\t* go.dg/mapclear.go: New test.\n\nFrom-SVN: r270993", "tree": {"sha": "f8579ea0f1e87d926a24f76f63ead381e96c34be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8579ea0f1e87d926a24f76f63ead381e96c34be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f837b9c41a6ca8be317a762410fb7811b3fddde6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f837b9c41a6ca8be317a762410fb7811b3fddde6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f837b9c41a6ca8be317a762410fb7811b3fddde6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f837b9c41a6ca8be317a762410fb7811b3fddde6/comments", "author": {"login": "cherrymui", "id": 14119929, "node_id": "MDQ6VXNlcjE0MTE5OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/14119929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cherrymui", "html_url": "https://github.com/cherrymui", "followers_url": "https://api.github.com/users/cherrymui/followers", "following_url": "https://api.github.com/users/cherrymui/following{/other_user}", "gists_url": "https://api.github.com/users/cherrymui/gists{/gist_id}", "starred_url": "https://api.github.com/users/cherrymui/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cherrymui/subscriptions", "organizations_url": "https://api.github.com/users/cherrymui/orgs", "repos_url": "https://api.github.com/users/cherrymui/repos", "events_url": "https://api.github.com/users/cherrymui/events{/privacy}", "received_events_url": "https://api.github.com/users/cherrymui/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a88158bc4daca182f0f39a2b667223d13b5a46e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a88158bc4daca182f0f39a2b667223d13b5a46e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a88158bc4daca182f0f39a2b667223d13b5a46e6"}], "stats": {"total": 76, "additions": 75, "deletions": 1}, "files": [{"sha": "a73072f2546e5892e9f476292ca84cd151b59744", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=f837b9c41a6ca8be317a762410fb7811b3fddde6", "patch": "@@ -1,3 +1,11 @@\n+2019-05-07  Cherry Zhang  <cherryyz@google.com>\n+\n+\t* lang.opt (-fgo-debug-optimization): New option.\n+\t* go-c.h (struct go_create_gogo_args): Add debug_optimization\n+\tfield.\n+\t* go-lang.c (go_langhook_init): Set debug_optimization field.\n+\t* gccgo.texi (Invoking gccgo): Document -fgo-debug-optimization.\n+\n 2019-03-06  Ian Lance Taylor  <iant@golang.org>\n \n \tPR go/89227"}, {"sha": "92fd74501ec9a5ed9ed02d4592c0195ab28cfc6b", "filename": "gcc/go/gccgo.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Fgo%2Fgccgo.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Fgo%2Fgccgo.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgccgo.texi?ref=f837b9c41a6ca8be317a762410fb7811b3fddde6", "patch": "@@ -246,6 +246,11 @@ This runs escape analysis only on functions whose names hash to values\n that match the given suffix @var{n}.  This can be used to binary\n search across functions to uncover escape analysis bugs.\n \n+@item -fgo-debug-optimization\n+@cindex @option{-fgo-debug-optimization}\n+@cindex @option{-fno-go-debug-optimization}\n+Output optimization diagnostics.\n+\n @item -fgo-c-header=@var{file}\n @cindex @option{-fgo-c-header}\n Write top-level named Go struct definitions to @var{file} as C code."}, {"sha": "695484cb84f08eaa2f90ff7119f0d8489b13c206", "filename": "gcc/go/go-c.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Fgo%2Fgo-c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Fgo%2Fgo-c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-c.h?ref=f837b9c41a6ca8be317a762410fb7811b3fddde6", "patch": "@@ -49,6 +49,7 @@ struct go_create_gogo_args\n   int debug_escape_level;\n   const char* debug_escape_hash;\n   int64_t nil_check_size_threshold;\n+  bool debug_optimization;\n };\n \n extern void go_create_gogo (const struct go_create_gogo_args*);"}, {"sha": "94f2cb25df3fdd306749add65fa4b3413d6ccb83", "filename": "gcc/go/go-lang.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Fgo%2Fgo-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Fgo%2Fgo-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-lang.c?ref=f837b9c41a6ca8be317a762410fb7811b3fddde6", "patch": "@@ -118,6 +118,7 @@ go_langhook_init (void)\n   args.debug_escape_level = go_debug_escape_level;\n   args.debug_escape_hash = go_debug_escape_hash;\n   args.nil_check_size_threshold = TARGET_AIX ? -1 : 4096;\n+  args.debug_optimization = go_debug_optimization;\n   args.linemap = go_get_linemap();\n   args.backend = go_get_backend();\n   go_create_gogo (&args);"}, {"sha": "aafb52c90ad8b4f271e8d4ee4a30ee5d3e607e08", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=f837b9c41a6ca8be317a762410fb7811b3fddde6", "patch": "@@ -1,4 +1,4 @@\n-4b3015de639cf22ed11ff96097555700909827c8\n+dc9c1b43753f392fdc2045bcb7a4abaa44fe79f1\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "183664a56625df6f3e8241c485a34dd961f78506", "filename": "gcc/go/gofrontend/go.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgo.cc?ref=f837b9c41a6ca8be317a762410fb7811b3fddde6", "patch": "@@ -44,6 +44,8 @@ go_create_gogo(const struct go_create_gogo_args* args)\n   if (args->debug_escape_hash != NULL)\n     ::gogo->set_debug_escape_hash(args->debug_escape_hash);\n   ::gogo->set_nil_check_size_threshold(args->nil_check_size_threshold);\n+  if (args->debug_optimization)\n+    ::gogo->set_debug_optimization(args->debug_optimization);\n }\n \n // Parse the input files."}, {"sha": "9f18e14aecd27a9c6621f363a7b91c4c3abae4d3", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=f837b9c41a6ca8be317a762410fb7811b3fddde6", "patch": "@@ -55,6 +55,7 @@ Gogo::Gogo(Backend* backend, Linemap* linemap, int, int pointer_size)\n     check_divide_overflow_(true),\n     compiling_runtime_(false),\n     debug_escape_level_(0),\n+    debug_optimization_(false),\n     nil_check_size_threshold_(4096),\n     verify_types_(),\n     interface_types_(),"}, {"sha": "cfa238ac6e81a1b0580589379495849bb98f4e8d", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=f837b9c41a6ca8be317a762410fb7811b3fddde6", "patch": "@@ -326,6 +326,16 @@ class Gogo\n   set_debug_escape_hash(const std::string& s)\n   { this->debug_escape_hash_ = s; }\n \n+  // Return whether to output optimization diagnostics.\n+  bool\n+  debug_optimization() const\n+  { return this->debug_optimization_; }\n+\n+  // Set the option to output optimization diagnostics.\n+  void\n+  set_debug_optimization(bool b)\n+  { this->debug_optimization_ = b; }\n+\n   // Return the size threshold used to determine whether to issue\n   // a nil-check for a given pointer dereference. A threshold of -1\n   // implies that all potentially faulting dereference ops should\n@@ -1075,6 +1085,9 @@ class Gogo\n   // -fgo-debug-escape-hash option. The analysis is run only on\n   // functions with names that hash to the matching value.\n   std::string debug_escape_hash_;\n+  // Whether to output optimization diagnostics, from the\n+  // -fgo-debug-optimization option.\n+  bool debug_optimization_;\n   // Nil-check size threshhold.\n   int64_t nil_check_size_threshold_;\n   // A list of types to verify."}, {"sha": "2e2d039afbd99ad68bf31b99898e28bda0f49a93", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=f837b9c41a6ca8be317a762410fb7811b3fddde6", "patch": "@@ -5512,6 +5512,8 @@ For_range_statement::do_lower(Gogo* gogo, Named_object*, Block* enclosing,\n                                                      range_temp, loc);\n       if (clear != NULL)\n         {\n+          if (gogo->debug_optimization())\n+            go_inform(loc, \"map range clear\");\n           temp_block->add_statement(clear);\n           return Statement::make_block_statement(temp_block, loc);\n         }\n@@ -5527,6 +5529,8 @@ For_range_statement::do_lower(Gogo* gogo, Named_object*, Block* enclosing,\n                                                        range_temp, loc);\n       if (clear != NULL)\n         {\n+          if (gogo->debug_optimization())\n+            go_inform(loc, \"array range clear\");\n           temp_block->add_statement(clear);\n           return Statement::make_block_statement(temp_block, loc);\n         }"}, {"sha": "91b8e4631a622f44036cb5a6d882adaef4689c4a", "filename": "gcc/go/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Fgo%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Fgo%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Flang.opt?ref=f837b9c41a6ca8be317a762410fb7811b3fddde6", "patch": "@@ -85,6 +85,10 @@ fgo-debug-escape-hash=\n Go Joined RejectNegative Var(go_debug_escape_hash) Init(0)\n -fgo-debug-escape-hash=<string>\tHash value to debug escape analysis.\n \n+fgo-debug-optimization\n+Go Var(go_debug_optimization) Init(0)\n+Emit optimization diagnostics.\n+\n o\n Go Joined Separate\n ; Documented in common.opt"}, {"sha": "e132b5b8d7f3de2eb8ba74e972c2d12774823471", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f837b9c41a6ca8be317a762410fb7811b3fddde6", "patch": "@@ -1,3 +1,8 @@\n+2019-05-07  Cherry Zhang  <cherryyz@google.com>\n+\n+\t* go.dg/arrayclear.go: New test.\n+\t* go.dg/mapclear.go: New test.\n+\n 2019-05-07  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \tPR target/89765"}, {"sha": "6daebc0b8f59f2886539076490e7038d498ac534", "filename": "gcc/testsuite/go.dg/arrayclear.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Ftestsuite%2Fgo.dg%2Farrayclear.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Ftestsuite%2Fgo.dg%2Farrayclear.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.dg%2Farrayclear.go?ref=f837b9c41a6ca8be317a762410fb7811b3fddde6", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile }\n+// { dg-options \"-fgo-debug-optimization\" }\n+\n+package p\n+\n+var a [10]int\n+\n+func arrayClear() {\n+\tfor i := range a { // { dg-error \"array range clear\" }\n+\t\ta[i] = 0\n+\t}\n+}\n+\n+var s []int\n+\n+func sliceClear() {\n+\tfor i := range s { // { dg-error \"array range clear\" }\n+\t\ts[i] = 0\n+\t}\n+}"}, {"sha": "a3bebe48efad7ae9ab87c11aac1fb646afeebdc7", "filename": "gcc/testsuite/go.dg/mapclear.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Ftestsuite%2Fgo.dg%2Fmapclear.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f837b9c41a6ca8be317a762410fb7811b3fddde6/gcc%2Ftestsuite%2Fgo.dg%2Fmapclear.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.dg%2Fmapclear.go?ref=f837b9c41a6ca8be317a762410fb7811b3fddde6", "patch": "@@ -0,0 +1,10 @@\n+// { dg-do compile }\n+// { dg-options \"-fgo-debug-optimization\" }\n+\n+package p\n+\n+func clear(m map[int]int) {\n+\tfor k := range m { // { dg-error \"map range clear\" }\n+\t\tdelete(m, k)\n+\t}\n+}"}]}