{"sha": "7d187e4f6f582b7589b0201e6be3d2c96abe4d2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QxODdlNGY2ZjU4MmI3NTg5YjAyMDFlNmJlM2QyYzk2YWJlNGQyYQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-01-08T00:16:23Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-01-08T00:16:23Z"}, "message": "Daily bump.", "tree": {"sha": "5fdcceb2b131bc722be197eeadab6784ba1874c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fdcceb2b131bc722be197eeadab6784ba1874c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a/comments", "author": null, "committer": null, "parents": [{"sha": "aa4db31dd2a99b4c902f2a3ac6ef4397f84dd888", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa4db31dd2a99b4c902f2a3ac6ef4397f84dd888", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa4db31dd2a99b4c902f2a3ac6ef4397f84dd888"}], "stats": {"total": 240, "additions": 239, "deletions": 1}, "files": [{"sha": "90c169eecff923b6c1e3de68a20841c7e0ec21f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d187e4f6f582b7589b0201e6be3d2c96abe4d2a", "patch": "@@ -1,3 +1,57 @@\n+2021-01-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/98567\n+\t* config/i386/i386.md (*bmi_blsi_<mode>_cmp, *bmi_blsi_<mode>_ccno):\n+\tNew define_insn patterns.\n+\n+2021-01-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md (@cond_<SVE_INT_UNARY:optab><mode>)\n+\t(*cond_<SVE_INT_UNARY:optab><mode>_2): Extend from SVE_FULL_I to SVE_I.\n+\t(*cond_<SVE_INT_UNARY:optab><mode>_any): Likewise.\n+\n+2021-01-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/98560\n+\t* internal-fn.def (IFN_VCONDU, IFN_VCONDEQ): Use type vec_cond.\n+\t* internal-fn.c (vec_cond_mask_direct): Get the data mode from\n+\targument 1.\n+\t(vec_cond_direct): Likewise argument 2.\n+\t(vec_condu_direct, vec_condeq_direct): Delete.\n+\t(expand_vect_cond_optab_fn): Rename to...\n+\t(expand_vec_cond_optab_fn): ...this, replacing old macro.\n+\t(expand_vec_condu_optab_fn, expand_vec_condeq_optab_fn): Delete.\n+\t(expand_vect_cond_mask_optab_fn): Rename to...\n+\t(expand_vec_cond_mask_optab_fn): ...this, replacing old macro.\n+\t(direct_vec_cond_mask_optab_supported_p): Treat the optab as a\n+\tconvert optab.\n+\t(direct_vec_cond_optab_supported_p): Likewise.\n+\t(direct_vec_condu_optab_supported_p): Delete.\n+\t(direct_vec_condeq_optab_supported_p): Delete.\n+\t* gimple-isel.cc: Include internal-fn.h.\n+\t(gimple_expand_vec_cond_expr): Check that IFN_VCONDEQ is supported\n+\tbefore using it.\n+\n+2021-01-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/98560\n+\t* gimple-isel.cc (gimple_expand_vec_cond_expr): If we fail to use\n+\tIFN_VCOND{,U,EQ}, fall back on IFN_VCOND_MASK.\n+\n+2021-01-07  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (insn): Merge from plusminus_insn, shift_insn,\n+\trotate_insn and optab code attributes.\n+\tUpdate all uses to merged code attribute.\n+\t* config/i386/sse.md: Update all uses to merged code attribute.\n+\t* config/i386/mmx.md: Update all uses to merged code attribute.\n+\n+2021-01-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/98568\n+\t* gimple-ssa-store-merging.c (bswap_view_convert): New function.\n+\t(bswap_replace): Use it.\n+\n 2021-01-06  Vladimir N. Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/97978"}, {"sha": "cb4ae0bba9926ffe03cca9461a89935aa2d3724c", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=7d187e4f6f582b7589b0201e6be3d2c96abe4d2a", "patch": "@@ -1 +1 @@\n-20210107\n+20210108"}, {"sha": "adc332e005df975c9f057e8f268322fe5ca53e9d", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=7d187e4f6f582b7589b0201e6be3d2c96abe4d2a", "patch": "@@ -1,3 +1,30 @@\n+2021-01-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/98580\n+\t* region.cc (decl_region::get_svalue_for_initializer): Gracefully\n+\thandle when LTO writes out DECL_INITIAL as error_mark_node.\n+\n+2021-01-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/97074\n+\t* store.cc (binding_cluster::can_merge_p): Add \"out_store\" param\n+\tand pass to calls to binding_cluster::make_unknown_relative_to.\n+\t(binding_cluster::make_unknown_relative_to): Add \"out_store\"\n+\tparam.  Use it to mark base regions that are pointed to by\n+\tpointers that become unknown as having escaped.\n+\t(store::can_merge_p): Pass out_store to\n+\tbinding_cluster::can_merge_p.\n+\t* store.h (binding_cluster::can_merge_p): Add \"out_store\" param.\n+\t(binding_cluster::make_unknown_relative_to): Likewise.\n+\t* svalue.cc (region_svalue::implicitly_live_p): New vfunc.\n+\t* svalue.h (region_svalue::implicitly_live_p): New vfunc decl.\n+\n+2021-01-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/98564\n+\t* engine.cc (exploded_path::feasible_p): Add missing call to\n+\tbitmap_clear.\n+\n 2021-01-06  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/97072"}, {"sha": "58f98f6fabbab044053f134f40f51468b51a1658", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7d187e4f6f582b7589b0201e6be3d2c96abe4d2a", "patch": "@@ -1,3 +1,10 @@\n+2021-01-07  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/98578\n+\t* c-pretty-print.c (print_mem_ref): Strip array from access type.\n+\tAvoid assuming acces type's size is constant.  Correct condition\n+\tguarding the printing of a parenthesis.\n+\n 2021-01-06  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/95768"}, {"sha": "8a98793e8dc91beaf0d1e66d36d38e24c3b63499", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=7d187e4f6f582b7589b0201e6be3d2c96abe4d2a", "patch": "@@ -1,3 +1,8 @@\n+2021-01-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-parser.c (c_parser_gimple_compound_statement): Only\n+\treallocate loop array if it is too small.\n+\n 2020-12-16  Martin Uecker  <muecker@gwdg.de>\n \n \tPR c/98047"}, {"sha": "b8e291c275a380a417602a9cefcc7e9314dbca55", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7d187e4f6f582b7589b0201e6be3d2c96abe4d2a", "patch": "@@ -1,3 +1,32 @@\n+2021-01-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/98329\n+\t* pt.c (tsubst_copy) <case BIT_CAST_EXPR>: Don't call\n+\tcp_build_bit_cast here, instead just build_min a BIT_CAST_EXPR and set\n+\tits location.\n+\t(tsubst_copy_and_build): Handle BIT_CAST_EXPR.\n+\n+2021-01-07  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/98441\n+\t* decl.c (grokdeclarator): Move the !funcdecl_p check inside the\n+\t!late_return_type block.\n+\n+2021-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.c (cxx_bind_parameters_in_call): Add comment.\n+\t(cxx_eval_store_expression): Add comment.\n+\n+2021-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c (has_next): Factor out from...\n+\t(next_conversion): ...here.\n+\t(strip_standard_conversion): And here.\n+\t(is_subseq): And here.\n+\t(build_conv): Check it.\n+\t(standard_conversion): Don't call build_conv\n+\tfor ck_identity.\n+\n 2021-01-06  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/95768"}, {"sha": "105969113f10f544299bc50c92b5cafd85948749", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=7d187e4f6f582b7589b0201e6be3d2c96abe4d2a", "patch": "@@ -1,3 +1,9 @@\n+2021-01-07  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 9038e64c5.\n+\t* d-builtins.cc (build_frontend_type): Update call to\n+\tParameter::create.\n+\n 2021-01-05  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* dmd/MERGE: Merge upstream dmd a5c86f5b9."}, {"sha": "84d4490b9c77f51fa499d33d5e76189ac7002f5e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7d187e4f6f582b7589b0201e6be3d2c96abe4d2a", "patch": "@@ -1,3 +1,10 @@\n+2021-01-07  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/93701\n+\t* resolve.c (find_array_spec): Put static prototype for\n+\tresolve_assoc_var before this function and call for associate\n+\tvariables.\n+\n 2021-01-06  Harald Anlauf  <anlauf@gmx.de>\n \n \t* resolve.c (resolve_component): Add check for valid CLASS"}, {"sha": "8787eeee4c328a8c20789f59e0d6285ffb0a3545", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d187e4f6f582b7589b0201e6be3d2c96abe4d2a", "patch": "@@ -1,3 +1,81 @@\n+2021-01-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/98329\n+\t* g++.dg/cpp2a/bit-cast10.C: New test.\n+\n+2021-01-07  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/98578\n+\t* gcc.dg/plugin/gil-1.c: Adjust expected output.\n+\t* gcc.dg/uninit-pr98578.c: New test.\n+\n+2021-01-07  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/98441\n+\t* g++.dg/cpp0x/auto55.C: New test.\n+\n+2021-01-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/98580\n+\t* gcc.dg/analyzer/pr98580-a.c: New test.\n+\t* gcc.dg/analyzer/pr98580-b.c: New test.\n+\n+2021-01-07  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/93701\n+\t* gfortran.dg/associate_54.f90: New test.\n+\t* gfortran.dg/associate_55.f90: New test.\n+\t* gfortran.dg/associate_56.f90: New test.\n+\n+2021-01-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/98567\n+\t* gcc.target/i386/pr98567-1.c: New test.\n+\t* gcc.target/i386/pr98567-2.c: New test.\n+\n+2021-01-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/cond_unary_5.c: New test.\n+\t* gcc.target/aarch64/sve/cond_unary_5_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_unary_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_unary_6_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_unary_7.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_unary_7_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_unary_8.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_unary_8_run.c: Likewise.\n+\n+2021-01-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/98560\n+\t* gcc.dg/vect/pr98560-2.c: New test.\n+\n+2021-01-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/98560\n+\t* gcc.dg/vect/pr98560-1.c: New test.\n+\n+2021-01-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/98568\n+\t* g++.dg/torture/pr98568.C: New test.\n+\n+2021-01-07  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* gcc.target/i386/pr92658-avx512bw.c: Add\n+\t-mprefer-vector-width=512 to avoid impact of different default\n+\tmtune which gcc is built with.\n+\t* gcc.target/i386/pr92658-avx512bw-2.c: Ditto.\n+\n+2021-01-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/97074\n+\t* gcc.dg/analyzer/pr97074.c: New test.\n+\n+2021-01-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/98564\n+\t* gcc.dg/analyzer/pr98564.c: New test.\n+\n 2021-01-06  Vladimir N. Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/97978"}, {"sha": "543b93e2cb99313aaf8012d87c307e49f9b437c4", "filename": "libcpp/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a/libcpp%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a/libcpp%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fpo%2FChangeLog?ref=7d187e4f6f582b7589b0201e6be3d2c96abe4d2a", "patch": "@@ -1,3 +1,7 @@\n+2021-01-07  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* es.po: Update.\n+\n 2020-07-20  Joseph Myers  <joseph@codesourcery.com>\n \n \t* cpplib.pot: Regenerate."}, {"sha": "33fdfc16175f028b2407e8f63d5a02b6d26f37ab", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d187e4f6f582b7589b0201e6be3d2c96abe4d2a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7d187e4f6f582b7589b0201e6be3d2c96abe4d2a", "patch": "@@ -1,3 +1,24 @@\n+2021-01-07  Thomas Rodgers  <trodgers@redhat.com>\n+\n+\t* doc/doxygen/user.cfg.in: Add new header.\n+\t* include/Makefile.am (std_headers): likewise.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/precompiled/stdc++.h: Add new header.\n+\t* include/std/barrier: New file.\n+\t* include/std/version: Add __cpp_lib_barrier feature test macro.\n+\t* testsuite/30_threads/barrier/1.cc: New test.\n+\t* testsuite/30_threads/barrier/2.cc: Likewise.\n+\t* testsuite/30_threads/barrier/arrive_and_drop.cc: Likewise.\n+\t* testsuite/30_threads/barrier/arrive_and_wait.cc: Likewise.\n+\t* testsuite/30_threads/barrier/arrive.cc: Likewise.\n+\t* testsuite/30_threads/barrier/completion.cc: Likewise.\n+\n+2021-01-07  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/98384\n+\t* testsuite/20_util/to_chars/long_double.cc: Use nexttowardl\n+\tinstead of the non-standard nextupl and nextdownl.\n+\n 2021-01-05  Samuel Thibault  <samuel.thibault@ens-lyon.org>\n \n \t* configure: Re-generate."}]}