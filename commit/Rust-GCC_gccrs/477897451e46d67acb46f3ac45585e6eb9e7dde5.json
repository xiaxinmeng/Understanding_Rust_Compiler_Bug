{"sha": "477897451e46d67acb46f3ac45585e6eb9e7dde5", "node_id": "C_kwDOANBUbNoAKDQ3Nzg5NzQ1MWU0NmQ2N2FjYjQ2ZjNhYzQ1NTg1ZTZlYjllN2RkZTU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-10T16:10:46Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-23T15:07:39Z"}, "message": "libstdc++: Make std::system_category() recognize Windows error codes\n\nThe std::system_category error category should be used for\nsystem-specific error codes, which means on Windows it should be used\nfor Windows error codes.  Currently that category assumes that the error\nnumbers it deals with are errno numbers, which means that\nERROR_ACCESS_DENIED (which has value 0x5) gets treated as whichever\nerrno number happens to have that value (EIO on mingw32-w64).\n\nThis adds a mapping from known Windows error codes to generic errno\nones. This means we correctly treat ERROR_ACCESS_DENIED as corresponding\nto EACCES.\n\nAlso make std::system_category().message(int) return the right message\nfor Windows errors, by using FormatMessage instead of strerror. The\noutput of FormatMessage includes \".\\r\\n\" at the end, so we strip that\noff to allow the message to be used in contexts where that would be\nproblematic.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++11/system_error.cc (system_error_category) [_WIN32]:\n\tMap Windows error codes to generic POSIX error numbers. Use\n\tFormatMessage instead of strerror.\n\t* testsuite/19_diagnostics/error_category/system_category.cc:\n\tAdjust for new behaviour on Windows.", "tree": {"sha": "eb482e7cf9d8251e5e00bbb6b901d99c4918d5d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb482e7cf9d8251e5e00bbb6b901d99c4918d5d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/477897451e46d67acb46f3ac45585e6eb9e7dde5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477897451e46d67acb46f3ac45585e6eb9e7dde5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/477897451e46d67acb46f3ac45585e6eb9e7dde5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477897451e46d67acb46f3ac45585e6eb9e7dde5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd396a321be5099536af36e64454c1fcf9d67e12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd396a321be5099536af36e64454c1fcf9d67e12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd396a321be5099536af36e64454c1fcf9d67e12"}], "stats": {"total": 174, "additions": 174, "deletions": 0}, "files": [{"sha": "f1cfc03c3de59fc3440e23c03ff746266b7fa50f", "filename": "libstdc++-v3/src/c++11/system_error.cc", "status": "modified", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477897451e46d67acb46f3ac45585e6eb9e7dde5/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477897451e46d67acb46f3ac45585e6eb9e7dde5/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc?ref=477897451e46d67acb46f3ac45585e6eb9e7dde5", "patch": "@@ -32,6 +32,11 @@\n #include <errno.h>\n #undef __sso_string\n \n+#if defined(_WIN32) && !defined(__CYGWIN__)\n+#include <memory>\n+#include <windows.h>\n+#endif\n+\n namespace\n {\n   using std::string;\n@@ -81,9 +86,33 @@ namespace\n     string\n     message(int i) const final\n     {\n+#if defined(_WIN32) && !defined(__CYGWIN__)\n+      char* buf = nullptr;\n+      auto len\n+\t= FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM\n+\t\t\t| FORMAT_MESSAGE_ALLOCATE_BUFFER,\n+\t\t\tnullptr,\n+\t\t\ti,\n+\t\t\tLANG_USER_DEFAULT,\n+\t\t\treinterpret_cast<LPTSTR>(&buf),\n+\t\t\t0,\n+\t\t\tnullptr);\n+      if (len > 0)\n+      {\n+\tstruct deleter {\n+\t  void operator()(void* p) const { ::LocalFree(p); }\n+\t};\n+\tstd::unique_ptr<char[], deleter> guard(buf);\n+\tif (len > 3 && !__builtin_memcmp(buf + len - 3, \".\\r\\n\", 3)) [[likely]]\n+\t  len -= 3;\n+\treturn string(buf, len);\n+      }\n+      return string(\"Unknown error code\");\n+#else\n       // XXX locale issues: how does one get or set loc.\n       // _GLIBCXX_HAVE_STRERROR_L, strerror_l(i, cloc)\n       return string(strerror(i));\n+#endif\n     }\n \n     std::error_condition\n@@ -93,6 +122,132 @@ namespace\n       // and system category otherwise.\n       switch (ev)\n       {\n+#if defined(_WIN32) && !defined(__CYGWIN__)\n+      case 0:\n+\treturn {0, generic_category_instance.obj};\n+\t// Convert Windows error code into a corresponding POSIX errno value.\n+#define X(w, e) case ERROR_##w: return {e, generic_category_instance.obj};\n+\t// This list is based on Cygwin's winsup/cygwin/errno.cc\n+\tX (ACCESS_DENIED,\t\tEACCES);\n+\tX (ACTIVE_CONNECTIONS,\t\tEAGAIN);\n+\tX (ALREADY_EXISTS,\t\tEEXIST);\n+\tX (BAD_DEVICE,\t\t\tENODEV);\n+\tX (BAD_EXE_FORMAT,\t\tENOEXEC);\n+\tX (BAD_NETPATH,\t\t\tENOENT);\n+\tX (BAD_NET_NAME,\t\tENOENT);\n+\tX (BAD_NET_RESP,\t\tENOSYS);\n+\tX (BAD_PATHNAME,\t\tENOENT);\n+\tX (BAD_PIPE,\t\t\tEINVAL);\n+\tX (BAD_UNIT,\t\t\tENODEV);\n+\tX (BAD_USERNAME,\t\tEINVAL);\n+\tX (BEGINNING_OF_MEDIA,\t\tEIO);\n+\tX (BROKEN_PIPE,\t\t\tEPIPE);\n+\tX (BUSY,\t\t\tEBUSY);\n+\tX (BUS_RESET,\t\t\tEIO);\n+\tX (CALL_NOT_IMPLEMENTED,\tENOSYS);\n+\tX (CANCELLED,\t\t\tEINTR);\n+\tX (CANNOT_MAKE,\t\t\tEPERM);\n+\tX (CHILD_NOT_COMPLETE,\t\tEBUSY);\n+\tX (COMMITMENT_LIMIT,\t\tEAGAIN);\n+\tX (CONNECTION_REFUSED,\t\tECONNREFUSED);\n+\tX (CRC,\t\t\t\tEIO);\n+\tX (DEVICE_DOOR_OPEN,\t\tEIO);\n+\tX (DEVICE_IN_USE,\t\tEAGAIN);\n+\tX (DEVICE_REQUIRES_CLEANING,\tEIO);\n+\tX (DEV_NOT_EXIST,\t\tENOENT);\n+\tX (DIRECTORY,\t\t\tENOTDIR);\n+\tX (DIR_NOT_EMPTY,\t\tENOTEMPTY);\n+\tX (DISK_CORRUPT,\t\tEIO);\n+#ifdef ENOSPC\n+\tX (DISK_FULL,\t\t\tENOSPC);\n+#endif\n+\tX (DS_GENERIC_ERROR,\t\tEIO);\n+#ifdef ENOSPC\n+\tX (END_OF_MEDIA,\t\tENOSPC);\n+#endif\n+\tX (EOM_OVERFLOW,\t\tEIO);\n+\tX (EXE_MACHINE_TYPE_MISMATCH,\tENOEXEC);\n+\tX (EXE_MARKED_INVALID,\t\tENOEXEC);\n+\tX (FILEMARK_DETECTED,\t\tEIO);\n+\tX (FILENAME_EXCED_RANGE,\tENAMETOOLONG);\n+\tX (FILE_CORRUPT,\t\tEEXIST);\n+\tX (FILE_EXISTS,\t\t\tEEXIST);\n+\tX (FILE_INVALID,\t\tENXIO);\n+\tX (FILE_NOT_FOUND,\t\tENOENT);\n+#ifdef ENOSPC\n+\tX (HANDLE_DISK_FULL,\t\tENOSPC);\n+#endif\n+\tX (INVALID_ADDRESS,\t\tEINVAL);\n+\tX (INVALID_AT_INTERRUPT_TIME,\tEINTR);\n+\tX (INVALID_BLOCK_LENGTH,\tEIO);\n+\tX (INVALID_DATA,\t\tEINVAL);\n+\tX (INVALID_DRIVE,\t\tENODEV);\n+\tX (INVALID_EA_NAME,\t\tEINVAL);\n+\tX (INVALID_EXE_SIGNATURE,\tENOEXEC);\n+\tX (INVALID_HANDLE,\t\tEBADF);\n+\tX (INVALID_NAME,\t\tENOENT);\n+\tX (INVALID_PARAMETER,\t\tEINVAL);\n+\tX (INVALID_SIGNAL_NUMBER,\tEINVAL);\n+\tX (IOPL_NOT_ENABLED,\t\tENOEXEC);\n+\tX (IO_DEVICE,\t\t\tEIO);\n+\tX (IO_INCOMPLETE,\t\tEAGAIN);\n+\tX (IO_PENDING,\t\t\tEAGAIN);\n+\tX (LOCK_VIOLATION,\t\tEBUSY);\n+\tX (MAX_THRDS_REACHED,\t\tEAGAIN);\n+\tX (META_EXPANSION_TOO_LONG,\tEINVAL);\n+\tX (MOD_NOT_FOUND,\t\tENOENT);\n+\tX (MORE_DATA,\t\t\tEMSGSIZE);\n+\tX (NEGATIVE_SEEK,\t\tEINVAL);\n+\tX (NETNAME_DELETED,\t\tENOENT);\n+\tX (NOACCESS,\t\t\tEFAULT);\n+\tX (NONE_MAPPED,\t\t\tEINVAL);\n+\tX (NONPAGED_SYSTEM_RESOURCES,\tEAGAIN);\n+\tX (NOT_ENOUGH_MEMORY,\t\tENOMEM);\n+\tX (NOT_ENOUGH_QUOTA,\t\tEIO);\n+#ifdef EPERM\n+\tX (NOT_OWNER,\t\t\tEPERM);\n+#else\n+\tX (NOT_OWNER,\t\t\tEACCES);\n+#endif\n+\tX (NOT_SAME_DEVICE,\t\tEXDEV);\n+\tX (NOT_SUPPORTED,\t\tENOSYS);\n+\tX (NO_DATA,\t\t\tEPIPE);\n+\tX (NO_DATA_DETECTED,\t\tEIO);\n+\tX (NO_MORE_SEARCH_HANDLES,\tENFILE);\n+\tX (NO_PROC_SLOTS,\t\tEAGAIN);\n+\tX (NO_SIGNAL_SENT,\t\tEIO);\n+\tX (NO_SYSTEM_RESOURCES,\t\tEFBIG);\n+\tX (NO_TOKEN,\t\t\tEINVAL);\n+\tX (OPEN_FAILED,\t\t\tEIO);\n+\tX (OPEN_FILES,\t\t\tEAGAIN);\n+\tX (OUTOFMEMORY,\t\t\tENOMEM);\n+\tX (PAGED_SYSTEM_RESOURCES,\tEAGAIN);\n+\tX (PAGEFILE_QUOTA,\t\tEAGAIN);\n+\tX (PATH_NOT_FOUND,\t\tENOENT);\n+\tX (PIPE_BUSY,\t\t\tEBUSY);\n+\tX (PIPE_CONNECTED,\t\tEBUSY);\n+\tX (POSSIBLE_DEADLOCK,\t\tEDEADLK);\n+\tX (PRIVILEGE_NOT_HELD,\t\tEPERM);\n+\tX (PROCESS_ABORTED,\t\tEFAULT);\n+\tX (PROC_NOT_FOUND,\t\tESRCH);\n+\tX (SECTOR_NOT_FOUND,\t\tEINVAL);\n+\tX (SEEK,\t\t\tEINVAL);\n+\tX (SERVICE_REQUEST_TIMEOUT,\tEBUSY);\n+\tX (SETMARK_DETECTED,\t\tEIO);\n+\tX (SHARING_BUFFER_EXCEEDED,\tENOLCK);\n+\tX (SHARING_VIOLATION,\t\tEBUSY);\n+\tX (SIGNAL_PENDING,\t\tEBUSY);\n+\tX (SIGNAL_REFUSED,\t\tEIO);\n+\tX (THREAD_1_INACTIVE,\t\tEINVAL);\n+\tX (TIMEOUT,\t\t\tEBUSY);\n+\tX (TOO_MANY_LINKS,\t\tEMLINK);\n+\tX (TOO_MANY_OPEN_FILES,\t\tEMFILE);\n+\tX (UNEXP_NET_ERR,\t\tEIO);\n+\tX (WORKING_SET_QUOTA,\t\tEAGAIN);\n+\tX (WRITE_PROTECT,\t\tEROFS);\n+#undef X\n+\n+#else\n       // List of errno macros from [cerrno.syn].\n       // C11 only defines EDOM, EILSEQ and ERANGE, the rest are from POSIX.\n       // They expand to integer constant expressions with type int,\n@@ -340,6 +495,7 @@ namespace\n \treturn std::error_condition(EINVAL, std::generic_category());\n        */\n \n+#endif\n       default:\n \treturn std::error_condition(ev, *this);\n       }"}, {"sha": "c289d532d4c854736014ab556a23995f972bc912", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_category/system_category.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477897451e46d67acb46f3ac45585e6eb9e7dde5/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fsystem_category.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477897451e46d67acb46f3ac45585e6eb9e7dde5/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fsystem_category.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fsystem_category.cc?ref=477897451e46d67acb46f3ac45585e6eb9e7dde5", "patch": "@@ -34,6 +34,19 @@ test02()\n   const std::error_category& cat = std::system_category();\n   std::error_condition cond;\n \n+#if defined __MING32__ || defined __MINGW64__\n+  cond = cat.default_error_condition(8); // ERROR_NOT_ENOUGH_MEMORY\n+  VERIFY( cond.value() == ENOMEM );\n+  VERIFY( cond.category() == std::generic_category() );\n+  VERIFY( cond == std::errc::not_enough_memory );\n+\n+  cond = cat.default_error_condition(5); // ERROR_ACCESS_DENIED\n+  VERIFY( cond.value() == EACCES );\n+  VERIFY( cond.category() == std::generic_category() );\n+  VERIFY( cond == std::errc::permission_denied );\n+  return;\n+#endif\n+\n   // As of 2011, ISO C only defines EDOM, EILSEQ and ERANGE:\n   cond = cat.default_error_condition(EDOM);\n   VERIFY( cond.value() == EDOM );\n@@ -99,8 +112,13 @@ test03()\n   // set \"C\" locale to get expected message\n   auto loc = std::locale::global(std::locale::classic());\n \n+#if defined __MING32__ || defined __MINGW64__\n+  std::string msg = std::system_category().message(5); // ERROR_ACCESS_DENIED\n+  VERIFY(msg == \"Access denied\");\n+#else\n   std::string msg = std::system_category().message(EBADF);\n   VERIFY( msg.find(\"file\") != std::string::npos );\n+#endif\n \n   std::locale::global(loc);\n }"}]}