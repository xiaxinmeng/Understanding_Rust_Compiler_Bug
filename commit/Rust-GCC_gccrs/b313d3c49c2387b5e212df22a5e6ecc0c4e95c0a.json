{"sha": "b313d3c49c2387b5e212df22a5e6ecc0c4e95c0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMxM2QzYzQ5YzIzODdiNWUyMTJkZjIyYTVlNmVjYzBjNGU5NWMwYQ==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@linux.alibaba.com", "date": "2020-01-21T04:16:16Z"}, "committer": {"name": "Bin Cheng", "email": "bin.cheng@linux.alibaba.com", "date": "2020-01-21T04:16:16Z"}, "message": "Fix false warning messages about missing return in coroutine.\n\nThe patch sets current_function_returns_value flag in templates for\nall co_return/co_yield/co_await cases, as well as for ramp function.\n\ngcc/cp/ChangeLog\n    * coroutines.cc (finish_co_await_expr): Set return value flag.\n    (finish_co_yield_expr, morph_fn_to_coro): Ditto.\n\ngcc/testsuite/ChangeLog\n    * g++.dg/coroutines/co-return-warning-1.C: New test.", "tree": {"sha": "f4dc220f6300557ea83337fa529da0cd118102a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4dc220f6300557ea83337fa529da0cd118102a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b313d3c49c2387b5e212df22a5e6ecc0c4e95c0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b313d3c49c2387b5e212df22a5e6ecc0c4e95c0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b313d3c49c2387b5e212df22a5e6ecc0c4e95c0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b313d3c49c2387b5e212df22a5e6ecc0c4e95c0a/comments", "author": null, "committer": null, "parents": [{"sha": "e0a5b313c1a3edfb33a28b8d8fea92e01490ebb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0a5b313c1a3edfb33a28b8d8fea92e01490ebb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0a5b313c1a3edfb33a28b8d8fea92e01490ebb3"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "2dda8008f04d8a5ff9934b7aefd4bebacd9cd6ab", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b313d3c49c2387b5e212df22a5e6ecc0c4e95c0a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b313d3c49c2387b5e212df22a5e6ecc0c4e95c0a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b313d3c49c2387b5e212df22a5e6ecc0c4e95c0a", "patch": "@@ -1,3 +1,8 @@\n+2020-01-21  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\n+\t* coroutines.cc (finish_co_await_expr): Set return value flag.\n+\t(finish_co_yield_expr, morph_fn_to_coro): Ditto.\n+\n 2020-01-19  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/33799 - destroy return value, take 2."}, {"sha": "8a8c1b9829b93759573699e06e6458f7c519e860", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b313d3c49c2387b5e212df22a5e6ecc0c4e95c0a/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b313d3c49c2387b5e212df22a5e6ecc0c4e95c0a/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=b313d3c49c2387b5e212df22a5e6ecc0c4e95c0a", "patch": "@@ -753,6 +753,8 @@ finish_co_await_expr (location_t kw, tree expr)\n \n   if (processing_template_decl)\n     {\n+      current_function_returns_value = 1;\n+\n       if (check_for_bare_parameter_packs (expr))\n \treturn error_mark_node;\n \n@@ -826,6 +828,8 @@ finish_co_yield_expr (location_t kw, tree expr)\n \n   if (processing_template_decl)\n     {\n+      current_function_returns_value = 1;\n+\n       if (check_for_bare_parameter_packs (expr))\n \treturn error_mark_node;\n \n@@ -2870,6 +2874,9 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n   if (!coro_function_valid_p (orig))\n     return false;\n \n+  /* The ramp function does return a value.  */\n+  current_function_returns_value = 1;\n+\n   /* We can't validly get here with an empty statement list, since there's no\n      way for the FE to decide it's a coroutine in the absence of any code.  */\n   tree fnbody = pop_stmt_list (DECL_SAVED_TREE (orig));"}, {"sha": "a901cf978412a18f933b1f2c7107491de3e60b75", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b313d3c49c2387b5e212df22a5e6ecc0c4e95c0a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b313d3c49c2387b5e212df22a5e6ecc0c4e95c0a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b313d3c49c2387b5e212df22a5e6ecc0c4e95c0a", "patch": "@@ -1,3 +1,7 @@\n+2020-01-20  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\n+\t* g++.dg/coroutines/co-return-warning-1.C: New test.\n+\n 2020-01-21  Kito Cheng  <kito.cheng@sifive.com>\n \n \tPR target/93304"}, {"sha": "69e7690bb975c670e10200e51280549e9bbb59e5", "filename": "gcc/testsuite/g++.dg/coroutines/co-return-warning-1.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b313d3c49c2387b5e212df22a5e6ecc0c4e95c0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fco-return-warning-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b313d3c49c2387b5e212df22a5e6ecc0c4e95c0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fco-return-warning-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fco-return-warning-1.C?ref=b313d3c49c2387b5e212df22a5e6ecc0c4e95c0a", "patch": "@@ -0,0 +1,48 @@\n+//  { dg-additional-options \"-std=c++17 -w\" }\n+\n+#include <coroutine>\n+\n+class resumable {\n+public:\n+  struct promise_type;\n+  using coro_handle = std::coroutine_handle<promise_type>;\n+  resumable(coro_handle handle) : handle_(handle) {}\n+  resumable(resumable&) = delete;\n+  resumable(resumable&&) = delete;\n+  bool resume() {\n+    if (not handle_.done())\n+      handle_.resume();\n+    return not handle_.done();\n+  }\n+  int recent_val();\n+  ~resumable() { handle_.destroy(); }\n+private:\n+  coro_handle handle_;\n+};\n+\n+struct resumable::promise_type {\n+  int value_;\n+\n+  using coro_handle = std::coroutine_handle<promise_type>;\n+  auto get_return_object() {\n+    return coro_handle::from_promise(*this);\n+  }\n+  auto initial_suspend() { return std::suspend_always(); }\n+  auto final_suspend() { return std::suspend_always(); }\n+  void return_value(int v) { value_ = v; }\n+  std::suspend_always yield_value(int v) {\n+    value_ = v;\n+    return std::suspend_always();\n+  }\n+  void unhandled_exception() {}\n+};\n+\n+int resumable::recent_val(){return handle_.promise().value_;}\n+\n+resumable foo(int n){\n+  int x = 1;\n+  co_await std::suspend_always();\n+  int y = 2;\n+  co_yield n + x + y;\n+}\n+"}]}