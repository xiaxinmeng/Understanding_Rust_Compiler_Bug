{"sha": "59e4a38e81a741547be70912d8c7a5f09f060a7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTllNGEzOGU4MWE3NDE1NDdiZTcwOTEyZDhjN2E1ZjA5ZjA2MGE3Yw==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-12-13T17:51:04Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-12-13T17:51:04Z"}, "message": "parse.y (patch_method_invocation): If class_decl is null (e.g.\n\nd\n\t* parse.y (patch_method_invocation):  If class_decl is null\n\t(e.g. an array type), use original type.\n\t* parse.y (check_thrown_exceptions):  Temporary hack to suppress\n\terrors about uncaught exception from clone (of array, specifically).\n\nFrom-SVN: r24299", "tree": {"sha": "a023987c8950e2b68042261e0bf02e1a0c81d923", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a023987c8950e2b68042261e0bf02e1a0c81d923"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59e4a38e81a741547be70912d8c7a5f09f060a7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e4a38e81a741547be70912d8c7a5f09f060a7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59e4a38e81a741547be70912d8c7a5f09f060a7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e4a38e81a741547be70912d8c7a5f09f060a7c/comments", "author": null, "committer": null, "parents": [{"sha": "3e78f871ac08ccf7ebfe20b5cd1f9f4e344acf5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e78f871ac08ccf7ebfe20b5cd1f9f4e344acf5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e78f871ac08ccf7ebfe20b5cd1f9f4e344acf5c"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "527f58843c31f77b578d2ec9c980af43eca62d58", "filename": "gcc/java/parse.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e4a38e81a741547be70912d8c7a5f09f060a7c/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e4a38e81a741547be70912d8c7a5f09f060a7c/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=59e4a38e81a741547be70912d8c7a5f09f060a7c", "patch": "@@ -9278,6 +9278,7 @@ patch_method_invocation (patch, primary, where, is_static, ret_decl)\n \t  /* 2- Do the layout of the class where the last field\n \t     was found, so we can search it. */\n \t  class_decl = resolve_and_layout (type, NULL_TREE);\n+\t  if (class_decl != NULL_TREE)\n \t  type = TREE_TYPE (class_decl);\n \n \t  /* 3- Retrieve a filtered list of method matches, Refine\n@@ -13493,6 +13494,11 @@ check_thrown_exceptions (location, decl)\n        throws = TREE_CHAIN (throws)) \n     if (!check_thrown_exceptions_do (TREE_VALUE (throws)))\n       {\n+#if 1\n+\t/* Temporary hack to suppresses errors about cloning arrays. FIXME */\n+\tif (DECL_NAME (decl) == get_identifier (\"clone\"))\n+\t  continue;\n+#endif\n \tEXPR_WFL_LINECOL (wfl_operator) = location;\n \tparse_error_context \n \t  (wfl_operator, \"Exception `%s' must be caught, or it must be \""}]}