{"sha": "6d6c952527c53637280297b2e6a48d6b21606294", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ2Yzk1MjUyN2M1MzYzNzI4MDI5N2IyZTZhNDhkNmIyMTYwNjI5NA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-07-06T14:05:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-07-06T14:05:54Z"}, "message": "re PR tree-optimization/49645 (g++.dg/tree-ssa/pr8781.C FAILs on Tru64 UNIX)\n\n2011-07-06  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/49645\n\t* c-decl.c (finish_decl): Also set DECL_HARD_REGISTER for global\n\tregister variables.\n\t* tree-ssa-sccvn.c (vn_reference_op_eq): Disregard differences\n\tin type qualification here ...\n\t(copy_reference_ops_from_ref): ... not here.\n\t(vn_reference_lookup_3): ... or here.\n\t(copy_reference_ops_from_ref): Record decl bases as MEM[&decl].\n\t(vn_reference_lookup): Do the lookup with a valueized ao-ref.\n\n\t* g++.dg/tree-ssa/pr8781.C: Disable SRA.\n\nFrom-SVN: r175916", "tree": {"sha": "8be0cce61ef719aebeb7411affb2f4847a356b91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8be0cce61ef719aebeb7411affb2f4847a356b91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d6c952527c53637280297b2e6a48d6b21606294", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d6c952527c53637280297b2e6a48d6b21606294", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d6c952527c53637280297b2e6a48d6b21606294", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d6c952527c53637280297b2e6a48d6b21606294/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d1a6ec10922732aebd828be711062731f51ee2ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1a6ec10922732aebd828be711062731f51ee2ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1a6ec10922732aebd828be711062731f51ee2ff"}], "stats": {"total": 75, "additions": 59, "deletions": 16}, "files": [{"sha": "57c5390edeb2d4f113b72ebcc2aecda6395a1f43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d6c952527c53637280297b2e6a48d6b21606294/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d6c952527c53637280297b2e6a48d6b21606294/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d6c952527c53637280297b2e6a48d6b21606294", "patch": "@@ -1,3 +1,15 @@\n+2011-07-06  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/49645\n+\t* c-decl.c (finish_decl): Also set DECL_HARD_REGISTER for global\n+\tregister variables.\n+\t* tree-ssa-sccvn.c (vn_reference_op_eq): Disregard differences\n+\tin type qualification here ...\n+\t(copy_reference_ops_from_ref): ... not here.\n+\t(vn_reference_lookup_3): ... or here.\n+\t(copy_reference_ops_from_ref): Record decl bases as MEM[&decl].\n+\t(vn_reference_lookup): Do the lookup with a valueized ao-ref.\n+\n 2011-07-06  Ian Lance Taylor  <iant@google.com>\n \n \t* doc/install.texi (Configuration): It's"}, {"sha": "3ed3c46e64c4d9598c8b0f52456a3ac2b7a6b1f2", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d6c952527c53637280297b2e6a48d6b21606294/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d6c952527c53637280297b2e6a48d6b21606294/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=6d6c952527c53637280297b2e6a48d6b21606294", "patch": "@@ -4357,6 +4357,8 @@ finish_decl (tree decl, location_t init_loc, tree init,\n \t       when a tentative file-scope definition is seen.\n \t       But at end of compilation, do output code for them.  */\n \t    DECL_DEFER_OUTPUT (decl) = 1;\n+\t  if (asmspec && C_DECL_REGISTER (decl))\n+\t    DECL_HARD_REGISTER (decl) = 1;\n \t  rest_of_decl_compilation (decl, true, 0);\n \t}\n       else"}, {"sha": "d0254e65a4480f82b5aae5488f2e5b210edc4372", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d6c952527c53637280297b2e6a48d6b21606294/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d6c952527c53637280297b2e6a48d6b21606294/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d6c952527c53637280297b2e6a48d6b21606294", "patch": "@@ -1,3 +1,8 @@\n+2011-07-06  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/49645\n+\t* g++.dg/tree-ssa/pr8781.C: Disable SRA.\n+\n 2011-07-06  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR middle-end/47383"}, {"sha": "cc518a0d25ae83d4a82b54810700132462b87bea", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr8781.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d6c952527c53637280297b2e6a48d6b21606294/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr8781.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d6c952527c53637280297b2e6a48d6b21606294/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr8781.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr8781.C?ref=6d6c952527c53637280297b2e6a48d6b21606294", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-fre1-details\" } */\n+/* { dg-options \"-O -fno-tree-sra -fdump-tree-fre1-details\" } */\n \n int f();\n "}, {"sha": "125d0444f4a72f523d95beb37b3e63213a4db938", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 39, "deletions": 15, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d6c952527c53637280297b2e6a48d6b21606294/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d6c952527c53637280297b2e6a48d6b21606294/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=6d6c952527c53637280297b2e6a48d6b21606294", "patch": "@@ -391,11 +391,15 @@ vn_reference_op_eq (const void *p1, const void *p2)\n   const_vn_reference_op_t const vro1 = (const_vn_reference_op_t) p1;\n   const_vn_reference_op_t const vro2 = (const_vn_reference_op_t) p2;\n \n-  return vro1->opcode == vro2->opcode\n-    && types_compatible_p (vro1->type, vro2->type)\n-    && expressions_equal_p (vro1->op0, vro2->op0)\n-    && expressions_equal_p (vro1->op1, vro2->op1)\n-    && expressions_equal_p (vro1->op2, vro2->op2);\n+  return (vro1->opcode == vro2->opcode\n+\t  /* We do not care for differences in type qualification.  */\n+\t  && (vro1->type == vro2->type\n+\t      || (vro1->type && vro2->type\n+\t\t  && types_compatible_p (TYPE_MAIN_VARIANT (vro1->type),\n+\t\t\t\t\t TYPE_MAIN_VARIANT (vro2->type))))\n+\t  && expressions_equal_p (vro1->op0, vro2->op0)\n+\t  && expressions_equal_p (vro1->op1, vro2->op1)\n+\t  && expressions_equal_p (vro1->op2, vro2->op2));\n }\n \n /* Compute the hash for a reference operand VRO1.  */\n@@ -578,8 +582,7 @@ copy_reference_ops_from_ref (tree ref, VEC(vn_reference_op_s, heap) **result)\n       vn_reference_op_s temp;\n \n       memset (&temp, 0, sizeof (temp));\n-      /* We do not care for spurious type qualifications.  */\n-      temp.type = TYPE_MAIN_VARIANT (TREE_TYPE (ref));\n+      temp.type = TREE_TYPE (ref);\n       temp.opcode = TREE_CODE (ref);\n       temp.op0 = TMR_INDEX (ref);\n       temp.op1 = TMR_STEP (ref);\n@@ -610,8 +613,7 @@ copy_reference_ops_from_ref (tree ref, VEC(vn_reference_op_s, heap) **result)\n       vn_reference_op_s temp;\n \n       memset (&temp, 0, sizeof (temp));\n-      /* We do not care for spurious type qualifications.  */\n-      temp.type = TYPE_MAIN_VARIANT (TREE_TYPE (ref));\n+      temp.type = TREE_TYPE (ref);\n       temp.opcode = TREE_CODE (ref);\n       temp.off = -1;\n \n@@ -676,16 +678,33 @@ copy_reference_ops_from_ref (tree ref, VEC(vn_reference_op_s, heap) **result)\n \t\ttemp.off = off.low;\n \t    }\n \t  break;\n+\tcase VAR_DECL:\n+\t  if (DECL_HARD_REGISTER (ref))\n+\t    {\n+\t      temp.op0 = ref;\n+\t      break;\n+\t    }\n+\t  /* Fallthru.  */\n+\tcase PARM_DECL:\n+\tcase CONST_DECL:\n+\tcase RESULT_DECL:\n+\t  /* Canonicalize decls to MEM[&decl] which is what we end up with\n+\t     when valueizing MEM[ptr] with ptr = &decl.  */\n+\t  temp.opcode = MEM_REF;\n+\t  temp.op0 = build_int_cst (build_pointer_type (TREE_TYPE (ref)), 0);\n+\t  temp.off = 0;\n+\t  VEC_safe_push (vn_reference_op_s, heap, *result, &temp);\n+\t  temp.opcode = ADDR_EXPR;\n+\t  temp.op0 = build_fold_addr_expr (ref);\n+\t  temp.type = TREE_TYPE (temp.op0);\n+\t  temp.off = -1;\n+\t  break;\n \tcase STRING_CST:\n \tcase INTEGER_CST:\n \tcase COMPLEX_CST:\n \tcase VECTOR_CST:\n \tcase REAL_CST:\n \tcase CONSTRUCTOR:\n-\tcase VAR_DECL:\n-\tcase PARM_DECL:\n-\tcase CONST_DECL:\n-\tcase RESULT_DECL:\n \tcase SSA_NAME:\n \t  temp.op0 = ref;\n \t  break;\n@@ -1580,7 +1599,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n       op.op0 = build_int_cst (ptr_type_node, at - rhs_offset);\n       op.off = at - lhs_offset + rhs_offset;\n       VEC_replace (vn_reference_op_s, vr->operands, 0, &op);\n-      op.type = TYPE_MAIN_VARIANT (TREE_TYPE (rhs));\n+      op.type = TREE_TYPE (rhs);\n       op.opcode = TREE_CODE (rhs);\n       op.op0 = rhs;\n       op.off = -1;\n@@ -1692,7 +1711,12 @@ vn_reference_lookup (tree op, tree vuse, vn_lookup_kind kind,\n     {\n       vn_reference_t wvnresult;\n       ao_ref r;\n-      ao_ref_init (&r, op);\n+      /* Make sure to use a valueized reference ...  */\n+      if (!ao_ref_init_from_vn_reference (&r, vr1.set, vr1.type, vr1.operands))\n+\tao_ref_init (&r, op);\n+      else\n+\t/* ... but also preserve a full reference tree for advanced TBAA.  */\n+\tr.ref = op;\n       vn_walk_kind = kind;\n       wvnresult =\n \t(vn_reference_t)walk_non_aliased_vuses (&r, vr1.vuse,"}]}