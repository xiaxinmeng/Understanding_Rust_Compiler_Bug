{"sha": "e6f1c50939a3f0eac91f343216bb5e2ba0153ed8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZmMWM1MDkzOWEzZjBlYWM5MWYzNDMyMTZiYjVlMmJhMDE1M2VkOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-09-27T08:14:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-09-27T08:14:53Z"}, "message": "re PR tree-optimization/58459 (Loop invariant is not hoisted out of loop after r202525.)\n\n2013-09-27  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/58459\n\t* tree-ssa-forwprop.c (forward_propagate_addr_expr): Remove\n\trestriction not propagating into loops.\n\n\t* gcc.dg/tree-ssa/ssa-pre-31.c: New testcase.\n\nFrom-SVN: r202966", "tree": {"sha": "43566716cf6df417737ab326d50a41e4c56607dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43566716cf6df417737ab326d50a41e4c56607dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6f1c50939a3f0eac91f343216bb5e2ba0153ed8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6f1c50939a3f0eac91f343216bb5e2ba0153ed8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6f1c50939a3f0eac91f343216bb5e2ba0153ed8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6f1c50939a3f0eac91f343216bb5e2ba0153ed8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6bda61a27277d1fa39cd6c376e83d3d7a725d7cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bda61a27277d1fa39cd6c376e83d3d7a725d7cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bda61a27277d1fa39cd6c376e83d3d7a725d7cd"}], "stats": {"total": 92, "additions": 68, "deletions": 24}, "files": [{"sha": "5cb2a52165746a9adc04486822ec3ebc44c40fcf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f1c50939a3f0eac91f343216bb5e2ba0153ed8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f1c50939a3f0eac91f343216bb5e2ba0153ed8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6f1c50939a3f0eac91f343216bb5e2ba0153ed8", "patch": "@@ -1,3 +1,9 @@\n+2013-09-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58459\n+\t* tree-ssa-forwprop.c (forward_propagate_addr_expr): Remove\n+\trestriction not propagating into loops.\n+\n 2013-09-26  Florian Weimer  <fw@deneb.enyo.de>\n \n \t* tree-ssa.h (walk_use_def_chains_fn, walk_use_def_chains): Delete."}, {"sha": "094fafc35a7ca862101a34b04ac8188e8ed64ea9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f1c50939a3f0eac91f343216bb5e2ba0153ed8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f1c50939a3f0eac91f343216bb5e2ba0153ed8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e6f1c50939a3f0eac91f343216bb5e2ba0153ed8", "patch": "@@ -1,3 +1,8 @@\n+2013-09-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58459\n+\t* gcc.dg/tree-ssa/ssa-pre-31.c: New testcase.\n+\n 2013-09-26  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR fortran/58113"}, {"sha": "2094de4ca89b4ec4af242f569a756ab376071638", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-31.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f1c50939a3f0eac91f343216bb5e2ba0153ed8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f1c50939a3f0eac91f343216bb5e2ba0153ed8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-31.c?ref=e6f1c50939a3f0eac91f343216bb5e2ba0153ed8", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-pre\" } */\n+\n+typedef struct {\n+    unsigned int key;\n+} S;\n+typedef struct s1  {\n+    unsigned int key;\n+    unsigned int bits;\n+    struct s1 *left, *right;\n+}S1;\n+extern S a[1024];\n+static inline int bar( S* p, S1* n )\n+{\n+  S1 *curr;\n+  S1 *next;\n+\n+  if ( n->left == n )\n+    return (int)(p->key == n->key);\n+\n+  curr = n;\n+  next = n->left;\n+\n+  while (curr->bits > next->bits ) {\n+      curr = next;\n+      if (p->key & (1 << curr->bits))\n+\tnext = curr->right;\n+      else\n+\tnext = curr->left;\n+  }\n+\n+  return (int)(p->key == next->key);\n+\n+}\n+\n+int foo (S1 *root, int N)\n+{\n+  volatile int r;\n+  int i,j;\n+  for (i=0; i<N; i++)\n+    for (j=0;j<1024; j++)\n+      r = bar(&a[j], root);\n+  return 0;\n+} \n+\n+/* { dg-final { scan-tree-dump-times \"key\" 4 \"pre\" } } */\n+/* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "ddcfe4c24be0f2a8ec95f19b46195fd3c7c6e44b", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f1c50939a3f0eac91f343216bb5e2ba0153ed8/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f1c50939a3f0eac91f343216bb5e2ba0153ed8/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=e6f1c50939a3f0eac91f343216bb5e2ba0153ed8", "patch": "@@ -1001,7 +1001,6 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n static bool\n forward_propagate_addr_expr (tree name, tree rhs)\n {\n-  int stmt_loop_depth = bb_loop_depth (gimple_bb (SSA_NAME_DEF_STMT (name)));\n   imm_use_iterator iter;\n   gimple use_stmt;\n   bool all = true;\n@@ -1014,37 +1013,24 @@ forward_propagate_addr_expr (tree name, tree rhs)\n \n       /* If the use is not in a simple assignment statement, then\n \t there is nothing we can do.  */\n-      if (gimple_code (use_stmt) != GIMPLE_ASSIGN)\n+      if (!is_gimple_assign (use_stmt))\n \t{\n \t  if (!is_gimple_debug (use_stmt))\n \t    all = false;\n \t  continue;\n \t}\n \n-      /* If the use is in a deeper loop nest, then we do not want\n-\t to propagate non-invariant ADDR_EXPRs into the loop as that\n-\t is likely adding expression evaluations into the loop.  */\n-      if (bb_loop_depth (gimple_bb (use_stmt)) > stmt_loop_depth\n-\t  && !is_gimple_min_invariant (rhs))\n+      gimple_stmt_iterator gsi = gsi_for_stmt (use_stmt);\n+      result = forward_propagate_addr_expr_1 (name, rhs, &gsi,\n+\t\t\t\t\t      single_use_p);\n+      /* If the use has moved to a different statement adjust\n+\t the update machinery for the old statement too.  */\n+      if (use_stmt != gsi_stmt (gsi))\n \t{\n-\t  all = false;\n-\t  continue;\n+\t  update_stmt (use_stmt);\n+\t  use_stmt = gsi_stmt (gsi);\n \t}\n-\n-      {\n-\tgimple_stmt_iterator gsi = gsi_for_stmt (use_stmt);\n-\tresult = forward_propagate_addr_expr_1 (name, rhs, &gsi,\n-\t\t\t\t\t\tsingle_use_p);\n-\t/* If the use has moved to a different statement adjust\n-\t   the update machinery for the old statement too.  */\n-\tif (use_stmt != gsi_stmt (gsi))\n-\t  {\n-\t    update_stmt (use_stmt);\n-\t    use_stmt = gsi_stmt (gsi);\n-\t  }\n-\n-\tupdate_stmt (use_stmt);\n-      }\n+      update_stmt (use_stmt);\n       all &= result;\n \n       /* Remove intermediate now unused copy and conversion chains.  */"}]}