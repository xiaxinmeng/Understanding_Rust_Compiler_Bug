{"sha": "4fdd8b18ecb46da1b89c00f1ab500fb15106189d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZkZDhiMThlY2I0NmRhMWI4OWMwMGYxYWI1MDBmYjE1MTA2MTg5ZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-05-08T09:35:36Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-05-08T09:35:36Z"}, "message": "[AArch64] Tweak sve/vcond_6.c test\n\nsve/vcond_6.c was effectively testing a three-input logical operation,\nsince the result of BINOP needed to be ANDed with the loop predicate\nbefore loading src[i].  This patch makes it really test a binary\noperation instead.  A later patch will add (and optimise) the\nthree-operand case.\n\n2018-05-08  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/vcond_6.c (LOOP): Unconditionally\n\tload from src[i].\n\nFrom-SVN: r260028", "tree": {"sha": "3ade4980cbefa2515678f71e49237b7485ba41b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ade4980cbefa2515678f71e49237b7485ba41b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fdd8b18ecb46da1b89c00f1ab500fb15106189d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fdd8b18ecb46da1b89c00f1ab500fb15106189d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fdd8b18ecb46da1b89c00f1ab500fb15106189d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fdd8b18ecb46da1b89c00f1ab500fb15106189d/comments", "author": null, "committer": null, "parents": [{"sha": "3e8f909a069d36528b4cfd404db8d857f9a9d95b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e8f909a069d36528b4cfd404db8d857f9a9d95b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e8f909a069d36528b4cfd404db8d857f9a9d95b"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "cc61ffb938ef5d8dfc024175727e66ba99b4b27f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fdd8b18ecb46da1b89c00f1ab500fb15106189d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fdd8b18ecb46da1b89c00f1ab500fb15106189d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4fdd8b18ecb46da1b89c00f1ab500fb15106189d", "patch": "@@ -1,3 +1,8 @@\n+2018-05-08  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* gcc.target/aarch64/sve/vcond_6.c (LOOP): Unconditionally\n+\tload from src[i].\n+\n 2018-05-08  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/80691"}, {"sha": "718afae74a8a7ab1bab8e3bc62140a6551f916b3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_6.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fdd8b18ecb46da1b89c00f1ab500fb15106189d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fdd8b18ecb46da1b89c00f1ab500fb15106189d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_6.c?ref=4fdd8b18ecb46da1b89c00f1ab500fb15106189d", "patch": "@@ -19,9 +19,12 @@\n \t\t\t TYPE fallback, int count)\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     for (int i = 0; i < count; ++i)\t\t\t\t\t\\\n-      dest[i] = (BINOP (__builtin_isunordered (a[i], b[i]),\t\t\\\n-\t\t\t__builtin_isunordered (c[i], d[i]))\t\t\\\n-\t\t ? src[i] : fallback);\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tTYPE srcv = src[i];\t\t\t\t\t\t\\\n+\tdest[i] = (BINOP (__builtin_isunordered (a[i], b[i]),\t\t\\\n+\t\t\t  __builtin_isunordered (c[i], d[i]))\t\t\\\n+\t\t   ? srcv : fallback);\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n   }\n \n #define TEST_BINOP(T, BINOP) \\\n@@ -40,9 +43,7 @@\n \n TEST_ALL (LOOP)\n \n-/* Currently we don't manage to remove ANDs from the other loops.  */\n-/* { dg-final { scan-assembler-times {\\tand\\tp[0-9]+\\.b, p[0-9]+/z, p[0-9]+\\.b, p[0-9]+\\.b} 3 { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler {\\tand\\tp[0-9]+\\.b, p[0-9]+/z, p[0-9]+\\.b, p[0-9]+\\.b} } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tp[0-9]+\\.b, p[0-9]+/z, p[0-9]+\\.b, p[0-9]+\\.b} 3 } } */\n /* { dg-final { scan-assembler-times {\\torr\\tp[0-9]+\\.b, p[0-9]+/z, p[0-9]+\\.b, p[0-9]+\\.b} 3 } } */\n /* { dg-final { scan-assembler-times {\\teor\\tp[0-9]+\\.b, p[0-9]+/z, p[0-9]+\\.b, p[0-9]+\\.b} 3 } } */\n /* { dg-final { scan-assembler-times {\\tnand\\tp[0-9]+\\.b, p[0-9]+/z, p[0-9]+\\.b, p[0-9]+\\.b} 3 } } */"}]}