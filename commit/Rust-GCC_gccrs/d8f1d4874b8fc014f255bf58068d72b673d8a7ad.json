{"sha": "d8f1d4874b8fc014f255bf58068d72b673d8a7ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhmMWQ0ODc0YjhmYzAxNGYyNTViZjU4MDY4ZDcyYjY3M2Q4YTdhZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-23T02:46:21Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-23T02:46:21Z"}, "message": "mrs@cygnus.com\n\nFrom-SVN: r10049", "tree": {"sha": "35828de5201e3b77c83e424e02c0fd80e8260285", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35828de5201e3b77c83e424e02c0fd80e8260285"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8f1d4874b8fc014f255bf58068d72b673d8a7ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8f1d4874b8fc014f255bf58068d72b673d8a7ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8f1d4874b8fc014f255bf58068d72b673d8a7ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8f1d4874b8fc014f255bf58068d72b673d8a7ad/comments", "author": null, "committer": null, "parents": [{"sha": "9fffd09332c475d2eeb704daa7d488e14d7cbf79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fffd09332c475d2eeb704daa7d488e14d7cbf79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fffd09332c475d2eeb704daa7d488e14d7cbf79"}], "stats": {"total": 224, "additions": 217, "deletions": 7}, "files": [{"sha": "c3beb5bd051d0794a8c30a39e63c2a7b96e6681d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 217, "deletions": 7, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8f1d4874b8fc014f255bf58068d72b673d8a7ad/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8f1d4874b8fc014f255bf58068d72b673d8a7ad/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d8f1d4874b8fc014f255bf58068d72b673d8a7ad", "patch": "@@ -1,3 +1,35 @@\n+Thu Jun 22 01:50:42 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+\t* decl.c (start_function): For pre-parsed functions, layout all of\n+\tthe parm decls again.\n+\t(grokvardecl): TREE_PUBLIC depends on DECL_THIS_EXTERN, not\n+\tDECL_EXTERNAL.\n+\n+Mon Jun 19 10:28:14 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+\t* decl.c (finish_function): Clear current_class_decl.\n+\n+\t* typeck.c (build_conditional_expr): Use convert (boolean_type_node\n+\tinstead of truthvalue_conversion.\n+\n+\t* class.c (finish_struct): A data member with the same name as the\n+\tclass doesn't suppress constructors.\n+\n+Fri Jun 16 18:11:39 1995  Gerald Baumgartner  (gb@alexander.cs.purdue.edu)\n+\n+\t* decl.c (start_function): If current_class_decl is a signature\n+\tpointer, don't dereference it but set C_C_D to current_class_decl.\n+\n+Fri Jun 16 17:06:28 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+\t* decl.c (duplicate_decls): Complain about virtual functions\n+\tredeclared to be inline.\n+\n+Fri Jun 16 13:20:38 1995  Mike Stump  <mrs@cygnus.com>\n+\n+\t* decl.c (get_unique_name): New routine to name unnamed namespaces.\n+\t(push_namespace): Use get_unique_name for naming unnamed namespaces.\n+\n Fri Jun 16 15:07:29 1995  Richard Kenner  (kenner@vlsi1.ultra.nyu.edu)\n \n \t* Make-lang.in (DEMANGLER_PROG): Add LIBS.\n@@ -6,6 +38,50 @@ Thu Jun 15 15:00:41 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n \n \t* decl.c (define_function): Don't set DECL_INTERFACE_KNOWN.\n \n+\t* parse.y: Call cplus_decl_attributes with prefix_attributes where\n+        appropriate.\n+\n+Wed Jun 14 19:24:49 1995  Mike Stump  <mrs@cygnus.com>\n+\n+\t* search.c (get_vbase): New routine to switch hierarchies from the\n+\tCLASSTYPE_VBASECLASSES to the normal one.\n+\t(expand_indirect_vtbls_init): Use get_vbase to figure out how we\n+\twant to convert to a vbase pointer.\n+\n+Mon Jun 12 17:50:30 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+\t* pt.c (instantiate_class_template): Add the new instantiation to\n+        template_classes.\n+\t(do_pending_expansions): Call instantiate_member_templates on all of\n+\tthe classes in template_classes.\n+\n+Mon Jun 12 12:36:59 1995  Mike Stump  <mrs@cygnus.com>\n+\n+\t* decl.c (complete_array_type): Fill in the TYPE_DOMAIN of our\n+\tTYPE_MAIN_VARIANT if it is not filled in.\n+\t* init.c (build_delete): If the TYPE_DOMAIN is not set, give an\n+\terror instead of core dumping.\n+\n+Mon Jun 12 10:41:40 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+\t* call.c (can_convert): Also check for distance > 0.\n+\t(can_convert_arg): Ditto.\n+\t(user_harshness): Ditto.\n+\n+Fri Jun  9 19:17:21 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+\t* g++.c (MATH_LIBRARY): Provide default.\n+\t(main): Always link with the math library if we link with libstdc++.\n+\n+\t* decl.c (start_function): Complain about redefinition of a function\n+\teven when the pending_inline version is compiled after the other\n+\tversion.\n+\n+Thu Jun  8 15:44:38 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+\t* gc.c (build_dynamic_cast): Build up a reference to a parameter of\n+\taggregate type.\n+\n Wed Jun  7 20:00:31 1995  Mike Stump  <mrs@cygnus.com>\n \n \t* *.[chy]: Change all callers of finish_decl to cp_finish_decl.\n@@ -23,10 +99,114 @@ Wed Jun  7 19:02:50 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n \t(push_cp_function_context): Save C_C_D.\n \t(pop_cp_function_context): Restore C_C_D.\n \n+Wed Jun  7 15:31:57 1995  Brendan Kehoe  (brendan@lisa.cygnus.com)\n+\n+\t* init.c (build_vec_delete): Resolve an offset ref before we try to\n+\tuse it.\n+\n+Wed Jun  7 14:19:32 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+\t* typeck.c (build_modify_expr): If the class lacks a constructor or\n+\tassignment operator, return error_mark_node.\n+\t(common_type): Use build_cplus_array_type.\n+\n+Tue Jun  6 09:41:27 1995  Mike Stump  <mrs@cygnus.com>\n+\n+\t* class.c (dont_allow_type_definitions): New variable set when types\n+\tcannot be defined.\n+\t(finish_struct): Use it.\n+\t* cp-tree.h (dont_allow_type_definitions): Define it.\n+\t* parse.y (primary, handler_seq): Set it.\n+\n+Mon Jun  5 18:49:38 1995  Mike Stump  <mrs@cygnus.com>\n+\n+\t* method.c (build_opfncall): Use DECL_CHAIN, not TREE_CHAIN for\n+\tresults from lookup_fnfields.  Always give warning/error on bad\n+\tcode.\n+\n+Mon Jun  5 11:39:37 1995  Brendan Kehoe  (brendan@lisa.cygnus.com)\n+\n+\t* init.c (member_init_ok_or_else): Don't allow initialization of\n+\tan ancestor's member from within a constructor.\n+\n+Mon Jun  5 11:20:34 1995  Gerald Baumgartner  (gb@alexander.cs.purdue.edu)\n+\n+\t* sig.c (build_signature_table_constructor): Use DECL_CONTEXT\n+\tinstead of DECL_CLASS_CONTEXT for calculating the vfield offset so\n+\tabstract virtual functions are handled correctly.\n+\n+\t* sig.c (build_signature_table_constructor): Store the correct\n+\tdelta in signature table entries.  It does not yet work for\n+\tclasses with virtual base classes as implementations of signatures.\n+\t(build_signature_method_call): Add the delta to the object_ptr\n+\tbefore generating the function call.\n+\n+\t* call.c (build_method_call): Make instance_ptr the signature\n+\tpointer itself instead of dereferencing the optr.\n+\t* sig.c (build_signature_method_call): Dereference the optr for the\n+\tdirect and virtual calls.\n+\n+\t* sig.c (build_signature_table_constructor): Make the tag for\n+\tdefault implementations -1 instead of 2.\n+\t(build_signature_method_call): Change the generated conditional\n+\texpression correspondingly.\n+\n+\t* sig.c (build_signature_pointer_constructor): Deleted the sorry\n+\tmessage that said we can't handle multiple inheritance for\n+\timplementations of signatures\n+\t(build_signature_method_call): Use the offset from the sigtable\n+\tentry instead of the vptr field from the signature pointer for\n+\tbuilding a virtual function call.\n+\n+\t* class.c (build_vfn_ref): Deleted signature specific code, we don't\n+\tcall this function anymore from build_signature_method_call.\n+\n+\t* cp-tree.h (SIGNATURE_VPTR_NAME): Deleted.  We use the right vptr\n+\tfield in the object now instead of in the signature pointer/ref. \n+\t(build_vptr_ref): Deleted extern declaration.\n+\t* sig.c (build_vptr_ref): Deleted.\n+\t(build_signature_pointer_or_reference_type): Deleted construction of\n+\tthe vptr field.\n+\t(build_signature_pointer_constructor): Deleted initialization of/\n+\tassignment to the vptr field.\n+\n+\t* sig.c (build_signature_table_constructor): Convert the signature\n+\ttable entry fields to their correct types.\n+\n+\t* sig.c (build_signature_table_constructor): Don't call digest_init\n+\tfor the fields of a sigtable entry, it's wasted time.\n+\n+\t* sig.c (build_signature_table_constructor): Correctly set the\n+\toffset and index fields of a sigtable entry.  Build the constructor\n+\tthe way digest_init does, digest_init can't handle initializing an\n+\tanonymous union inside a struct.\n+\t(build_signature_method_call): Use the index field instead of the\n+\tdelta field to get the vtable index.\n+\n+\t* decl.c (init_decl_processing): Fix number of fields for building\n+\tsigtable_entry_type.\n+\n+\t* cp-tree.h (tag_identifier, offset_identifier): Added extern decls.\n+\t(SIGTABLE_CODE_NAME): Renamed to SIGTABLE_TAG_NAME.\n+\t(SIGTABLE_PFN_NAME): Deleted, we'll use VTABLE_PFN_NAME instead.\n+\t* decl.c (tag_identifier, offset_identifier): New variables to\n+\thold the identifiers for the sigtable fields tag and offset.\n+\t(init_decl_processing): Initialize these variables.\n+\t(init_decl_processing): Use these variables to build the\n+\tsigtable_entry_type structure.  Rename the code and offset fields\n+\tto tag and delta, respectively; add offset and index fields. Changed\n+\ttypes of fields from short_integer_type_node to delta_type_node.\n+\t* sig.c (build_signature_table_constructor): Rename code and offset\n+\tto tag and delta, respectively.\n+\t(build_signature_method_call): Ditto.  Use above variables.\n+\n Fri Jun  2 11:05:58 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n \n-\t* decl.c (set_C_C_D): New function.\n-\t(pop_from_top_level, start_function, pop_cp_function_context): Call it.\n+\t* decl.c (set_C_C_D): New function.  suspend_momentary before\n+\tbuilding C_C_D.\n+\t(pop_from_top_level): Call it.\n+\t(start_function): Ditto.\n+\t(pop_cp_function_context): Ditto.\n \n \t* class.c, cp-tree.h, decl.c, decl2.c, parse.y: Lose all references\n \tto current_vtable_decl, CLASSTYPE_INST_VAR and CLASSTYPE_VTBL_PTR.\n@@ -43,6 +223,37 @@ on May 29 12:45:10 1995  Paul Eggert  <eggert@twinsun.com>\n \n \t* Make-lang.in (c++.mostlyclean): Remove $(DEMANGLER_PROG).\n \n+Thu Jun  1 17:03:51 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+\t* decl.c (lookup_name_real): Don't try to look anything up in an\n+\terroneous object.\n+\n+Fri Jun  2 10:30:14 1995  Mike Stump  <mrs@cygnus.com>\n+\n+\t* method.c (build_overload_int): New routine.  Break out\n+\tfunctionality from build_overload_value so we can reuse it.\n+\t(build_overload_value): Handle pointer to member functions as value\n+\tparameters for templates.\n+\t(build_overload_identifier): Since template parameters are shared\n+\tamong all instantiations, we have to substitute in the real types\n+\tin TREE_TYPE (parm).\n+\tpt.c (coerce_template_parms): Ditto.\n+\t(push_template_decls): Ditto.\n+\t(grok_template_type): Deleted as template parameters are shared\n+\tamong all instantiations.\n+\n+Wed May 31 19:10:32 1995  Mike Stump  <mrs@cygnus.com>\n+\n+\t* decl.c (grokdeclarator): Always give errors on constant overflow\n+\tfor array indices.\n+\n+Wed May 31 11:39:43 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n+\n+\t* typeck.c (commonparms): Don't abort if simple_cst_equal returns < 0.\n+\t(build_c_cast): Don't tack on a NON_LVALUE_EXPR when casting to\n+\treference type.\n+\t(build_indirect_ref): Fix check for *&.\n+\n Wed May 24 15:55:18 1995  Richard Kenner  (kenner@vlsi1.ultra.nyu.edu)\n \n \t* decl.c (duplicate_decls): Check simple_cst_equal result against 0.\n@@ -105,14 +316,13 @@ Wed May 17 16:57:53 1995  Mike Stump  <mrs@cygnus.com>\n \n \t* cvt.c (convert_to_reference): Only complain, if complaints are\n \twanted.\n-\ttypeck.c (build_function_call_real): Ditto.  If LOOKUP_SPECULATIVELY\n+\t* typeck.c (build_function_call_real): Ditto.  If LOOKUP_SPECULATIVELY\n \tis set and something won't work, return NULL_TREE.\n-\tcvt.c (cp_convert): Ditto.  Pass flags down to build_method_call.\n+\t* cvt.c (cp_convert): Ditto.  Pass flags down to build_method_call.\n \t(convert): Pass LOOKUP_NORMAL to cp_convert.\n-\ttypeck.c (convert_for_assignment): Ditto.\n+\t* typeck.c (convert_for_assignment): Ditto.\n \t(convert_force): Pass LOOKUP_COMPLAIN to cp_convert.\n-\ttypeck.c (convert_arguments): Get out early if we get an\n-\terror_mark_node.\n+\t(convert_arguments): Get out early if we get an error_mark_node.\n \t(convert_for_initialization): Use cp_convert instead of convert so\n \tthat we can pass flags down.\n \t* cp-tree.h (LOOKUP_SPECULATIVELY): Added documentation."}]}