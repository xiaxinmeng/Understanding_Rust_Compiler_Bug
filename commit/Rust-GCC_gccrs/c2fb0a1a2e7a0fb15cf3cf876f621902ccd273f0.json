{"sha": "c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJmYjBhMWEyZTdhMGZiMTVjZjNjZjg3NmY2MjE5MDJjY2QyNzNmMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-12T19:36:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-12T19:36:00Z"}, "message": "libstdc++: Make self-move well-defined for containers [PR 85828]\n\nThe C++ LWG recently confirmed that self-move assignment should not have\nundefined behaviour for standard containers (see the proposed resolution\nof LWG 2839). The result should be a valid but unspecified value, just\nlike other times when a container is moved from.\n\nOur std::list, std::__cxx11::basic_string and unordered containers all\nhave bugs which result in undefined behaviour.\n\nFor std::list the problem is that we clear the previous contents using\n_M_clear() instead of clear(). This means the _M_next, _M_prev and\n_M_size members are not zeroed, and so after we \"update\" them (with\ntheir existing values), we are left with dangling pointers and a\nnon-zero size, but no elements.\n\nFor the unordered containers the problem is similar. _Hashtable first\ndeallocates the existing contents, then takes ownership of the pointers\nfrom the RHS object (which has just had its contents deallocated so the\npointers are dangling).\n\nFor std::basic_string it's a little more subtle. When the string is\nlocal (i.e. fits in the SSO buffer) we use char_traits::copy to copy the\ncontents from this->data() to __rhs.data(). When &__rhs == this that\ncopy violates the precondition that the ranges don't overlap. We only\nneed to check for self-move for this case where it's local, because the\nonly other case that can be true for self-move is that it's non-local\nbut the allocators compare equal. In that case the data pointer is\nneither deallocated nor leaked, so the result is well-defined.\n\nThis patch also makes a small optimization for std::deque move\nassignment, to use the efficient move when is_always_equal is false, but\nthe allocators compare equal at runtime.\n\nFinally, we need to remove all the Debug Mode checks which abort the\nprogram when a self-move is detected, because it's not undefined to do\nthat.\n\nBefore PR 85828 can be closed we should also look into fixing\nstd::shuffle so it doesn't do any redundant self-swaps.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/85828\n\t* include/bits/basic_string.h (operator=(basic_string&&)): Check\n\tfor self-move before copying with char_traits::copy.\n\t* include/bits/hashtable.h (operator=(_Hashtable&&)): Check for\n\tself-move.\n\t* include/bits/stl_deque.h (_M_move_assign1(deque&&, false_type)):\n\tCheck for equal allocators.\n\t* include/bits/stl_list.h (_M_move_assign(list&&, true_type)):\n\tCall clear() instead of _M_clear().\n\t* include/debug/formatter.h (__msg_self_move_assign): Change\n\tcomment.\n\t* include/debug/macros.h (__glibcxx_check_self_move_assign):\n\t(_GLIBCXX_DEBUG_VERIFY): Remove.\n\t* include/debug/safe_container.h (operator=(_Safe_container&&)):\n\tRemove assertion check for safe move and make it well-defined.\n\t* include/debug/safe_iterator.h (operator=(_Safe_iterator&&)):\n\tRemove assertion check for self-move.\n\t* include/debug/safe_local_iterator.h\n\t(operator=(_Safe_local_iterator&&)): Likewise.\n\t* testsuite/21_strings/basic_string/cons/char/self_move.cc: New test.\n\t* testsuite/23_containers/deque/cons/self_move.cc: New test.\n\t* testsuite/23_containers/forward_list/cons/self_move.cc: New test.\n\t* testsuite/23_containers/list/cons/self_move.cc: New test.\n\t* testsuite/23_containers/set/cons/self_move.cc: New test.\n\t* testsuite/23_containers/unordered_set/cons/self_move.cc: New test.\n\t* testsuite/23_containers/vector/cons/self_move.cc: New test.", "tree": {"sha": "654e502ea77198648cad1146d1d0b53c47a0e809", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/654e502ea77198648cad1146d1d0b53c47a0e809"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d040555a0611bd47cb5878443bbb5097e4259d82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d040555a0611bd47cb5878443bbb5097e4259d82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d040555a0611bd47cb5878443bbb5097e4259d82"}], "stats": {"total": 375, "additions": 356, "deletions": 19}, "files": [{"sha": "a9fe09f2069aad95c5ed49af41ed832b868dc927", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0", "patch": "@@ -717,10 +717,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n \tif (__str._M_is_local())\n \t  {\n-\t    // We've always got room for a short string, just copy it.\n-\t    if (__str.size())\n-\t      this->_S_copy(_M_data(), __str._M_data(), __str.size());\n-\t    _M_set_length(__str.size());\n+\t    // We've always got room for a short string, just copy it\n+\t    // (unless this is a self-move, because that would violate the\n+\t    // char_traits::copy precondition that the ranges don't overlap).\n+\t    if (__builtin_expect(std::__addressof(__str) != this, true))\n+\t      {\n+\t\tif (__str.size())\n+\t\t  this->_S_copy(_M_data(), __str._M_data(), __str.size());\n+\t\t_M_set_length(__str.size());\n+\t      }\n \t  }\n \telse if (_Alloc_traits::_S_propagate_on_move_assign()\n \t    || _Alloc_traits::_S_always_equal()"}, {"sha": "7b772a475e3a78720938b06c4f6e7255f530b0ce", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0", "patch": "@@ -1296,6 +1296,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       _H1, _H2, _Hash, _RehashPolicy, _Traits>::\n     _M_move_assign(_Hashtable&& __ht, true_type)\n     {\n+      if (__builtin_expect(std::__addressof(__ht) == this, false))\n+\treturn;\n+\n       this->_M_deallocate_nodes(_M_begin());\n       _M_deallocate_buckets();\n       __hashtable_base::operator=(std::move(__ht));"}, {"sha": "baebf7a343b2b2613758619f4c9a8c47e2c72849", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0", "patch": "@@ -2156,6 +2156,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       void\n       _M_move_assign1(deque&& __x, /* always equal: */ false_type)\n       {\n+\tif (_M_get_Tp_allocator() == __x._M_get_Tp_allocator())\n+\t  return _M_move_assign1(std::move(__x), true_type());\n+\n \tconstexpr bool __move_storage =\n \t  _Alloc_traits::_S_propagate_on_move_assign();\n \t_M_move_assign2(std::move(__x), __bool_constant<__move_storage>());"}, {"sha": "d63a96562e02293cc4d1742b62d22e8b9a16ab19", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0", "patch": "@@ -1947,7 +1947,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       void\n       _M_move_assign(list&& __x, true_type) noexcept\n       {\n-\tthis->_M_clear();\n+\tthis->clear();\n \tthis->_M_move_nodes(std::move(__x));\n \tstd::__alloc_on_move(this->_M_get_Node_allocator(),\n \t\t\t     __x._M_get_Node_allocator());"}, {"sha": "c4283fe604761b536f2f55e553e28753fb10605b", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0", "patch": "@@ -143,7 +143,7 @@ namespace __gnu_debug\n     // unordered container local iterators\n     __msg_local_iter_compare_bad,\n     __msg_non_empty_range,\n-    // self move assign\n+    // self move assign (no longer used)\n     __msg_self_move_assign,\n     // unordered container buckets\n     __msg_bucket_index_oob,"}, {"sha": "ed606809a4daba65db091e111a41e065953bab98", "filename": "libstdc++-v3/include/debug/macros.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h?ref=c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0", "patch": "@@ -447,12 +447,6 @@ _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_partitioned_upper(\t\t\\\n \t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n \t\t      ._M_string(#_Pred))\n \n-// Verify that the container is not self move assigned\n-#define __glibcxx_check_self_move_assign(_Other)\t\t\t\\\n-_GLIBCXX_DEBUG_VERIFY(this != &_Other,\t\t\t\t\t\\\n-\t\t      _M_message(__gnu_debug::__msg_self_move_assign)\t\\\n-                      ._M_sequence(*this, \"this\"))\n-\n // Verify that load factor is positive\n #define __glibcxx_check_max_load_factor(_F)\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(_F > 0.0f,\t\t\t\t\t\\"}, {"sha": "2059eca98557d651bd3772900a4475007e92f81d", "filename": "libstdc++-v3/include/debug/safe_container.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_container.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_container.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_container.h?ref=c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0", "patch": "@@ -80,7 +80,14 @@ namespace __gnu_debug\n       _Safe_container&\n       operator=(_Safe_container&& __x) noexcept\n       {\n-\t__glibcxx_check_self_move_assign(__x);\n+\tif (std::__addressof(__x) == this)\n+\t  {\n+\t    // Standard containers have a valid but unspecified value after\n+\t    // self-move, so we invalidate all debug iterators even if the\n+\t    // underlying container happens to preserve its contents.\n+\t    this->_M_invalidate_all();\n+\t    return *this;\n+\t  }\n \n \tif (_IsCxx11AllocatorAware)\n \t  {"}, {"sha": "84a9f1d526d6a5dc5a98b3ad079d84154cd56622", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0", "patch": "@@ -263,15 +263,15 @@ namespace __gnu_debug\n       _Safe_iterator&\n       operator=(_Safe_iterator&& __x) noexcept\n       {\n-\t_GLIBCXX_DEBUG_VERIFY(this != &__x,\n-\t\t\t      _M_message(__msg_self_move_assign)\n-\t\t\t      ._M_iterator(*this, \"this\"));\n \t_GLIBCXX_DEBUG_VERIFY(!__x._M_singular()\n \t\t\t      || __x.base() == _Iterator(),\n \t\t\t      _M_message(__msg_copy_singular)\n \t\t\t      ._M_iterator(*this, \"this\")\n \t\t\t      ._M_iterator(__x, \"other\"));\n \n+\tif (std::__addressof(__x) == this)\n+\t  return *this;\n+\n \tif (this->_M_sequence && this->_M_sequence == __x._M_sequence)\n \t  {\n \t    __gnu_cxx::__scoped_lock __l(this->_M_get_mutex());"}, {"sha": "5b051d0ebf95123f261e339a5a1ace02221d8fd7", "filename": "libstdc++-v3/include/debug/safe_local_iterator.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h?ref=c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0", "patch": "@@ -209,15 +209,15 @@ namespace __gnu_debug\n       _Safe_local_iterator&\n       operator=(_Safe_local_iterator&& __x) noexcept\n       {\n-\t_GLIBCXX_DEBUG_VERIFY(this != &__x,\n-\t\t\t      _M_message(__msg_self_move_assign)\n-\t\t\t      ._M_iterator(*this, \"this\"));\n \t_GLIBCXX_DEBUG_VERIFY(!__x._M_singular()\n \t\t\t      || __x.base() == _Iterator(),\n \t\t\t      _M_message(__msg_copy_singular)\n \t\t\t      ._M_iterator(*this, \"this\")\n \t\t\t      ._M_iterator(__x, \"other\"));\n \n+\tif (std::__addressof(__x) == this)\n+\t  return *this;\n+\n \tif (this->_M_sequence && this->_M_sequence == __x._M_sequence)\n \t  {\n \t    __gnu_cxx::__scoped_lock __l(this->_M_get_mutex());"}, {"sha": "456b03353c38cbf81c585c7f49be69819075383c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/self_move.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fself_move.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fself_move.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fself_move.cc?ref=c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0", "patch": "@@ -0,0 +1,52 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <string>\n+#include <debug/string>\n+#include <testsuite_hooks.h>\n+\n+template<typename String>\n+void\n+test(const char* s)\n+{\n+  String s1 = s;\n+  std::string s2 __attribute__((unused)) = s1.c_str();\n+  s1 = std::move(s1);\n+\n+  String s3 __attribute__((unused)) = s1;\n+  s1 = std::move(s1);\n+\n+  s1.begin(); // causes COW string to \"leak\"\n+  s1 = std::move(s1);\n+\n+  String s4 __attribute__((unused)) = s1;\n+  s1 = std::move(s1);\n+\n+  s1.reserve(2 * s1.capacity()); // causes SSO string to be on the heap\n+  s1 = std::move(s1);\n+}\n+\n+int\n+main()\n+{\n+  test<std::string>(\"short\");\n+  test<std::string>(\"very, very, very, VERY long\");\n+  test<__gnu_debug::string>(\"short\");\n+  test<__gnu_debug::string>(\"very, very, very, VERY long\");\n+}"}, {"sha": "e05f43c572f4048309ac07ae10351a90b4ead505", "filename": "libstdc++-v3/testsuite/23_containers/deque/cons/self_move.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2Fself_move.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2Fself_move.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2Fself_move.cc?ref=c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <deque>\n+#include <debug/deque>\n+#include <testsuite_hooks.h>\n+\n+template<typename Container>\n+void\n+test(std::initializer_list<typename Container::value_type> vals)\n+{\n+  Container c{vals};\n+  c = std::move(c);\n+  VERIFY( c == c );\n+\n+  auto it = c.begin();\n+  it = std::move(it);\n+  VERIFY( it == c.begin() );\n+}\n+\n+int\n+main()\n+{\n+  test<std::deque<int>>({1, 2, 3});\n+  test<std::deque<std::deque<int>>>({{1,2}, {3,4}, {5,6}, {7,8}});\n+  test<__gnu_debug::deque<int>>({1, 2, 3});\n+  test<__gnu_debug::deque<std::deque<int>>>({{1,2}, {3,4}});\n+}"}, {"sha": "35525cab26373eaf0288c8ebbfc88b89ba6113c3", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/cons/self_move.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2Fself_move.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2Fself_move.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2Fself_move.cc?ref=c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <forward_list>\n+#include <debug/forward_list>\n+#include <testsuite_hooks.h>\n+\n+template<typename Container>\n+void\n+test(std::initializer_list<typename Container::value_type> vals)\n+{\n+  Container c{vals};\n+  c = std::move(c);\n+  VERIFY( c == c );\n+\n+  auto it = c.begin();\n+  it = std::move(it);\n+  VERIFY( it == c.begin() );\n+}\n+\n+int\n+main()\n+{\n+  test<std::forward_list<int>>({1, 2, 3});\n+  test<std::forward_list<std::forward_list<int>>>({{1,2}, {3,4}, {5,6}, {7,8}});\n+  test<__gnu_debug::forward_list<int>>({1, 2, 3});\n+  test<__gnu_debug::forward_list<std::forward_list<int>>>({{1,2}, {3,4}});\n+}"}, {"sha": "6ff6f1527e74b7663e0a0c2084f710408c8c0122", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/self_move.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fself_move.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fself_move.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fself_move.cc?ref=c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <list>\n+#include <debug/list>\n+#include <testsuite_hooks.h>\n+\n+template<typename Container>\n+void\n+test(std::initializer_list<typename Container::value_type> vals)\n+{\n+  Container c{vals};\n+  c = std::move(c);\n+  VERIFY( c == c );\n+\n+  auto it = c.begin();\n+  it = std::move(it);\n+  VERIFY( it == c.begin() );\n+}\n+\n+int\n+main()\n+{\n+  test<std::list<int>>({1, 2, 3});\n+  test<std::list<std::list<int>>>({{1,2}, {3,4}, {5,6}, {7,8}});\n+  test<__gnu_debug::list<int>>({1, 2, 3});\n+  test<__gnu_debug::list<std::list<int>>>({{1,2}, {3,4}});\n+}"}, {"sha": "9c226622ae6d8c327919ece8e569f255a88f4027", "filename": "libstdc++-v3/testsuite/23_containers/set/cons/self_move.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fself_move.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fself_move.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fself_move.cc?ref=c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <set>\n+#include <debug/set>\n+#include <string>\n+#include <stdlib.h>\n+#include <testsuite_hooks.h>\n+\n+template<typename Container>\n+void\n+test(std::initializer_list<typename Container::value_type> vals)\n+{\n+  Container c{vals};\n+  c = std::move(c);\n+  VERIFY( c == c );\n+\n+  auto it = c.begin();\n+  it = std::move(it);\n+  VERIFY( it == c.begin() );\n+}\n+\n+int\n+main()\n+{\n+  std::string s = \"how long is a piece of SSO string?\";\n+  test<std::set<int>>({1, 2, 3});\n+  test<std::set<std::string>>({s, s, s, s});\n+  test<__gnu_debug::set<int>>({1, 2, 3});\n+  test<__gnu_debug::set<std::string>>({s, s, s, s});\n+}"}, {"sha": "089f2c07b88145a68bf02be2b94f4e317c344667", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/cons/self_move.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fcons%2Fself_move.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fcons%2Fself_move.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fcons%2Fself_move.cc?ref=c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0", "patch": "@@ -0,0 +1,50 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <unordered_set>\n+#include <debug/unordered_set>\n+#include <string>\n+#include <stdlib.h>\n+#include <testsuite_hooks.h>\n+\n+template<typename Container>\n+void\n+test(std::initializer_list<typename Container::value_type> vals)\n+{\n+  Container c{vals};\n+  c = std::move(c);\n+  VERIFY( c == c );\n+\n+  auto it = c.begin();\n+  it = std::move(it);\n+  VERIFY( it == c.begin() );\n+\n+  auto localit = c.begin(0);\n+  localit = std::move(localit);\n+}\n+\n+int\n+main()\n+{\n+  std::string s = \"how long is a piece of SSO string?\";\n+  test<std::unordered_set<int>>({1, 2, 3});\n+  test<std::unordered_set<std::string>>({s, s, s, s});\n+  test<__gnu_debug::unordered_set<int>>({1, 2, 3});\n+  test<__gnu_debug::unordered_set<std::string>>({s, s, s, s});\n+}"}, {"sha": "02159ee62939fd578d1af6e198643a89309bf8d7", "filename": "libstdc++-v3/testsuite/23_containers/vector/cons/self_move.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fself_move.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fself_move.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fself_move.cc?ref=c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <vector>\n+#include <debug/vector>\n+#include <testsuite_hooks.h>\n+\n+template<typename Container>\n+void\n+test(std::initializer_list<typename Container::value_type> vals)\n+{\n+  Container c{vals};\n+  c = std::move(c);\n+  VERIFY( c == c );\n+\n+  auto it = c.begin();\n+  it = std::move(it);\n+  VERIFY( it == c.begin() );\n+}\n+\n+int\n+main()\n+{\n+  test<std::vector<int>>({1, 2, 3});\n+  test<std::vector<std::vector<int>>>({{1,2}, {3,4}, {5,6}, {7,8}});\n+  test<__gnu_debug::vector<int>>({1, 2, 3});\n+  test<__gnu_debug::vector<std::vector<int>>>({{1,2}, {3,4}});\n+}"}]}