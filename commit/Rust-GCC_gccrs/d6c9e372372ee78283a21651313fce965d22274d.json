{"sha": "d6c9e372372ee78283a21651313fce965d22274d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZjOWUzNzIzNzJlZTc4MjgzYTIxNjUxMzEzZmNlOTY1ZDIyMjc0ZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-18T13:12:44Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-18T17:42:54Z"}, "message": "libstdc++: Fix and simplify constraints on std::span constructors\n\nThis makes the constraints consistent with the pre-Prague working paper.\n\n\t* include/std/span (span::__is_compatible_array): Simplify alias\n\ttemplate by using requires-clause.\n\t(span::__is_compatible_ref): New alias template for constraining\n\tconstructors.\n\t(span::__is_compatible_iterator, span::__is_compatible_range): Remove.\n\t(span(It, size_type), span(It, End)): Use __is_compatible_ref.\n\t(span(T(&)[N], span(array<T, N>&), span(const array<T, N>&)): Remove\n\tredundant parentheses.\n\t(span(R&&)): Add missing constraints.", "tree": {"sha": "04b10327e356f2f4d3c9874e9c1dccbe92945b5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04b10327e356f2f4d3c9874e9c1dccbe92945b5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6c9e372372ee78283a21651313fce965d22274d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6c9e372372ee78283a21651313fce965d22274d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6c9e372372ee78283a21651313fce965d22274d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6c9e372372ee78283a21651313fce965d22274d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f09f32427b21127af0ec4c4a48dc9f3b0e696e59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f09f32427b21127af0ec4c4a48dc9f3b0e696e59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f09f32427b21127af0ec4c4a48dc9f3b0e696e59"}], "stats": {"total": 48, "additions": 26, "deletions": 22}, "files": [{"sha": "de0995264a011c3311b82292e0ad113e3da54242", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6c9e372372ee78283a21651313fce965d22274d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6c9e372372ee78283a21651313fce965d22274d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d6c9e372372ee78283a21651313fce965d22274d", "patch": "@@ -1,5 +1,15 @@\n 2020-02-18  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/span (span::__is_compatible_array): Simplify alias\n+\ttemplate by using requires-clause.\n+\t(span::__is_compatible_ref): New alias template for constraining\n+\tconstructors.\n+\t(span::__is_compatible_iterator, span::__is_compatible_range): Remove.\n+\t(span(It, size_type), span(It, End)): Use __is_compatible_ref.\n+\t(span(T(&)[N], span(array<T, N>&), span(const array<T, N>&)): Remove\n+\tredundant parentheses.\n+\t(span(R&&)): Add missing constraints.\n+\n \t* include/std/span (span): Reorder members and rename template\n \tparameters to match declarations in the C++2a working paper.\n "}, {"sha": "21114f1e03836fdff931385b2af29be2dc159f97", "filename": "libstdc++-v3/include/std/span", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6c9e372372ee78283a21651313fce965d22274d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6c9e372372ee78283a21651313fce965d22274d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan?ref=d6c9e372372ee78283a21651313fce965d22274d", "patch": "@@ -123,20 +123,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 3255. span's array constructor is too strict\n       template<typename _Tp, size_t _ArrayExtent>\n-\tusing __is_compatible_array = __and_<\n-\t  bool_constant<(_Extent == dynamic_extent || _ArrayExtent == _Extent)>,\n-\t  __is_array_convertible<_Type, _Tp>>;\n+\trequires (_Extent == dynamic_extent || _ArrayExtent == _Extent)\n+\tusing __is_compatible_array = __is_array_convertible<_Type, _Tp>;\n \n-      template<typename _Iter, typename _Ref = iter_reference_t<_Iter>>\n-\tusing __is_compatible_iterator = __and_<\n-\t  bool_constant<contiguous_iterator<_Iter>>,\n-\t  is_lvalue_reference<iter_reference_t<_Iter>>,\n-\t  is_same<iter_value_t<_Iter>, remove_cvref_t<_Ref>>,\n-\t  __is_array_convertible<_Type, remove_reference_t<_Ref>>>;\n-\n-      template<typename _Range>\n-\tusing __is_compatible_range\n-\t  = __is_compatible_iterator<ranges::iterator_t<_Range>>;\n+      template<typename _Ref>\n+\tusing __is_compatible_ref\n+\t  = __is_array_convertible<_Type, remove_reference_t<_Ref>>;\n \n     public:\n       // member types\n@@ -165,16 +157,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { }\n \n       template<contiguous_iterator _It>\n-\trequires (__is_compatible_iterator<_It>::value)\n+\trequires __is_compatible_ref<iter_reference_t<_It>>::value\n \tconstexpr\n \tspan(_It __first, size_type __count)\n \tnoexcept\n \t: _M_extent(__count), _M_ptr(std::to_address(__first))\n \t{ __glibcxx_assert(_Extent == dynamic_extent || __count == _Extent); }\n \n       template<contiguous_iterator _It, sized_sentinel_for<_It> _End>\n-\t  requires (__is_compatible_iterator<_It>::value)\n-\t    && (!is_convertible_v<_End, size_type>)\n+\trequires __is_compatible_ref<iter_reference_t<_It>>::value\n+\t  && (!is_convertible_v<_End, size_type>)\n \tconstexpr\n \tspan(_It __first, _End __last)\n \tnoexcept(noexcept(__last - __first))\n@@ -186,32 +178,34 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Tp, size_t _ArrayExtent>\n-\trequires (__is_compatible_array<_Tp, _ArrayExtent>::value)\n+\trequires __is_compatible_array<_Tp, _ArrayExtent>::value\n \tconstexpr\n \tspan(_Tp (&__arr)[_ArrayExtent]) noexcept\n \t: span(static_cast<pointer>(__arr), _ArrayExtent)\n \t{ }\n \n       template<typename _Tp, size_t _ArrayExtent>\n-\trequires (__is_compatible_array<_Tp, _ArrayExtent>::value)\n+\trequires __is_compatible_array<_Tp, _ArrayExtent>::value\n \tconstexpr\n \tspan(array<_Tp, _ArrayExtent>& __arr) noexcept\n \t: span(static_cast<pointer>(__arr.data()), _ArrayExtent)\n \t{ }\n \n       template<typename _Tp, size_t _ArrayExtent>\n-\t  requires (__is_compatible_array<const _Tp, _ArrayExtent>::value)\n+\trequires __is_compatible_array<const _Tp, _ArrayExtent>::value\n \tconstexpr\n \tspan(const array<_Tp, _ArrayExtent>& __arr) noexcept\n \t: span(static_cast<pointer>(__arr.data()), _ArrayExtent)\n \t{ }\n \n-      template<ranges::contiguous_range _Range>\n+      template<typename _Range>\n \trequires (_Extent == dynamic_extent)\n+\t  && ranges::contiguous_range<_Range> && ranges::sized_range<_Range>\n+\t  && (ranges::safe_range<_Range> || is_const_v<element_type>)\n \t  && (!__detail::__is_std_span<remove_cvref_t<_Range>>::value)\n \t  && (!__detail::__is_std_array<remove_cvref_t<_Range>>::value)\n-\t  && (!is_array_v<remove_reference_t<_Range>>)\n-\t  && (__is_compatible_range<_Range>::value)\n+\t  && (!is_array_v<remove_cvref_t<_Range>>)\n+\t  && __is_compatible_ref<ranges::range_reference_t<_Range>>::value\n \tconstexpr\n \tspan(_Range&& __range)\n \tnoexcept(noexcept(ranges::data(__range))"}]}