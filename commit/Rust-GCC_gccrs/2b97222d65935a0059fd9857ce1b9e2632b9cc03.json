{"sha": "2b97222d65935a0059fd9857ce1b9e2632b9cc03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI5NzIyMmQ2NTkzNWEwMDU5ZmQ5ODU3Y2UxYjllMjYzMmI5Y2MwMw==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "1999-06-24T21:59:02Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-06-24T21:59:02Z"}, "message": "rs6000.md (movdf_hardfloat32): Revert previous patch.\n\n        * rs6000.md (movdf_hardfloat32): Revert previous patch.\n        Handle LO_SUM the same as offsettable in cases 1 and 2.\n        * rs6000.c (find_addr_reg): Revert previous patch.\n\nCo-Authored-By: Jeffrey A Law <law@cygnus.com>\n\nFrom-SVN: r27752", "tree": {"sha": "55e18cf5ea6ae29577d1e81e983063b3ee445e9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55e18cf5ea6ae29577d1e81e983063b3ee445e9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b97222d65935a0059fd9857ce1b9e2632b9cc03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b97222d65935a0059fd9857ce1b9e2632b9cc03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b97222d65935a0059fd9857ce1b9e2632b9cc03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b97222d65935a0059fd9857ce1b9e2632b9cc03/comments", "author": null, "committer": null, "parents": [{"sha": "c22c8e60a262e715c20521619b99e4386d6b75a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c22c8e60a262e715c20521619b99e4386d6b75a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c22c8e60a262e715c20521619b99e4386d6b75a0"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "4caa20b65f87b5f7ff7973f68a70d0bb3ed17b0e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b97222d65935a0059fd9857ce1b9e2632b9cc03/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b97222d65935a0059fd9857ce1b9e2632b9cc03/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b97222d65935a0059fd9857ce1b9e2632b9cc03", "patch": "@@ -1,3 +1,10 @@\n+Thu Jun 24 22:54:05 1999  David Edelsohn  <edelsohn@gnu.org>\n+\t\t\t  Jeff Law <law@cygnus.com>\n+\n+\t* rs6000.md (movdf_hardfloat32): Revert previous patch.\n+\tHandle LO_SUM the same as offsettable in cases 1 and 2.\n+\t* rs6000.c (find_addr_reg): Revert previous patch.\n+\n Thu Jun 24 22:43:12 1999  Philippe De Muyter  <phdm@macqel.be>\n \n \t* system.h (strstr): New external function declaration."}, {"sha": "7d6faf5cb6c5b681796a96f262882d6dfc2b2790", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b97222d65935a0059fd9857ce1b9e2632b9cc03/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b97222d65935a0059fd9857ce1b9e2632b9cc03/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=2b97222d65935a0059fd9857ce1b9e2632b9cc03", "patch": "@@ -5690,9 +5690,6 @@ struct rtx_def *\n find_addr_reg (addr)\n      rtx addr;\n {\n-  if (GET_CODE (addr) == LO_SUM)\n-    addr = XEXP (addr, 0);\n-\n   while (GET_CODE (addr) == PLUS)\n     {\n       if (GET_CODE (XEXP (addr, 0)) == REG)"}, {"sha": "a74b139ff0838865d31ed867edb4708e70de406a", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b97222d65935a0059fd9857ce1b9e2632b9cc03/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b97222d65935a0059fd9857ce1b9e2632b9cc03/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=2b97222d65935a0059fd9857ce1b9e2632b9cc03", "patch": "@@ -6327,7 +6327,9 @@\n       else\n \treturn \\\"mr %0,%1\\;mr %L0,%L1\\\";\n     case 1:\n-      if (offsettable_memref_p (operands[1]))\n+      if (offsettable_memref_p (operands[1])\n+\t  || (GET_CODE (operands[1]) == MEM\n+\t      && GET_CODE (XEXP (operands[1], 0)) == LO_SUM))\n \t{\n \t  /* If the low-address word is used in the address, we must load\n \t     it last.  Otherwise, load it first.  Note that we cannot have\n@@ -6353,21 +6355,23 @@\n \t\t\t\t operands[1], 0))\n \t    {\n \t      output_asm_insn (\\\"{cal|la} %0,4(%0)\\\", &addreg);\n-\t      output_asm_insn (\\\"{l%X1|lwz%X1} %L0,%1\\\", operands);\n+\t      output_asm_insn (\\\"{lx|lwzx} %L0,%1\\\", operands);\n \t      output_asm_insn (\\\"{cal|la} %0,-4(%0)\\\", &addreg);\n-\t      return \\\"{l%X1|lwz%X1} %0,%1\\\";\n+\t      return \\\"{lx|lwzx} %0,%1\\\";\n \t    }\n \t  else\n \t    {\n-\t      output_asm_insn (\\\"{l%X1|lwz%X1} %0,%1\\\", operands);\n+\t      output_asm_insn (\\\"{lx|lwzx} %0,%1\\\", operands);\n \t      output_asm_insn (\\\"{cal|la} %0,4(%0)\\\", &addreg);\n-\t      output_asm_insn (\\\"{l%X1|lwz%X1} %L0,%1\\\", operands);\n+\t      output_asm_insn (\\\"{lx|lwzx} %L0,%1\\\", operands);\n \t      output_asm_insn (\\\"{cal|la} %0,-4(%0)\\\", &addreg);\n \t      return \\\"\\\";\n \t    }\n \t}\n     case 2:\n-      if (offsettable_memref_p (operands[0]))\n+      if (offsettable_memref_p (operands[0])\n+\t  || (GET_CODE (operands[0]) == MEM\n+\t      && GET_CODE (XEXP (operands[0], 0)) == LO_SUM))\n \treturn \\\"{st%U0|stw%U0} %1,%0\\;{st|stw} %L1,%L0\\\";\n       else\n \t{\n@@ -6378,9 +6382,9 @@\n \t    abort ();\n \n \t  addreg = find_addr_reg (XEXP (operands[0], 0));\n-\t  output_asm_insn (\\\"{st%X0|stw%X0} %1,%0\\\", operands);\n+\t  output_asm_insn (\\\"{stx|stwx} %1,%0\\\", operands);\n \t  output_asm_insn (\\\"{cal|la} %0,4(%0)\\\", &addreg);\n-\t  output_asm_insn (\\\"{st%X0|stw%X0} %L1,%0\\\", operands);\n+\t  output_asm_insn (\\\"{stx|stwx} %L1,%0\\\", operands);\n \t  output_asm_insn (\\\"{cal|la} %0,-4(%0)\\\", &addreg);\n \t  return \\\"\\\";\n \t}"}]}