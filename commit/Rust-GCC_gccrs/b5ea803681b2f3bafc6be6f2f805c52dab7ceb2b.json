{"sha": "b5ea803681b2f3bafc6be6f2f805c52dab7ceb2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVlYTgwMzY4MWIyZjNiYWZjNmJlNmYyZjgwNWM1MmRhYjdjZWIyYg==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-03-02T21:07:21Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-03-02T21:07:21Z"}, "message": "sync.md (atomic_exchange<mode>): New expander.\n\n\t* config/sh/sync.md (atomic_exchange<mode>): New expander.\n\t(atomic_exchange<mode>_soft): New insn.\n\nFrom-SVN: r184827", "tree": {"sha": "112b11a1eb7ee1f35133a17bf01c5520713fa085", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/112b11a1eb7ee1f35133a17bf01c5520713fa085"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5ea803681b2f3bafc6be6f2f805c52dab7ceb2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5ea803681b2f3bafc6be6f2f805c52dab7ceb2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5ea803681b2f3bafc6be6f2f805c52dab7ceb2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5ea803681b2f3bafc6be6f2f805c52dab7ceb2b/comments", "author": null, "committer": null, "parents": [{"sha": "349e6f0526060faefb2e242f157dfe5e2c504121", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/349e6f0526060faefb2e242f157dfe5e2c504121", "html_url": "https://github.com/Rust-GCC/gccrs/commit/349e6f0526060faefb2e242f157dfe5e2c504121"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "c0242a9e62b4b603c1b801a5e113d2ed45025b7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ea803681b2f3bafc6be6f2f805c52dab7ceb2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ea803681b2f3bafc6be6f2f805c52dab7ceb2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5ea803681b2f3bafc6be6f2f805c52dab7ceb2b", "patch": "@@ -1,9 +1,14 @@\n 2012-03-02  Oleg Endo  <olegendo@gcc.gnu.org>\n \n-        * config/sh/sync.md: Update copyright notice dates.\n+\t* config/sh/sync.md (atomic_exchange<mode>): New expander.\n+\t(atomic_exchange<mode>_soft): New insn.\n+\n+2012-03-02  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/sync.md: Update copyright notice dates.\n \t(atomic_compare_and_swap<mode>): Use SImode for return value instead\n \tof QImode.\n-        (atomic_compare_and_swap<mode>_soft): Likewise.\n+\t(atomic_compare_and_swap<mode>_soft): Likewise.\n \n 2012-03-02  Oleg Endo  <olegendo@gcc.gnu.org>\n  "}, {"sha": "5e55947b66b8040d1aa743cca6c647b8382b2ab9", "filename": "gcc/config/sh/sync.md", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ea803681b2f3bafc6be6f2f805c52dab7ceb2b/gcc%2Fconfig%2Fsh%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ea803681b2f3bafc6be6f2f805c52dab7ceb2b/gcc%2Fconfig%2Fsh%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsync.md?ref=b5ea803681b2f3bafc6be6f2f805c52dab7ceb2b", "patch": "@@ -164,6 +164,45 @@\n }\n   [(set_attr \"length\" \"20\")])\n \n+(define_expand \"atomic_exchange<mode>\"\n+  [(match_operand:I124 0 \"register_operand\" \"\")\t\t;; oldval output\n+   (match_operand:I124 1 \"memory_operand\" \"\")\t\t;; memory\n+   (match_operand:I124 2 \"register_operand\" \"\")\t\t;; newval input\n+   (match_operand:SI 3 \"const_int_operand\" \"\")]\t\t;; memory model\n+  \"TARGET_SOFT_ATOMIC && !TARGET_SHMEDIA\"\n+{\n+  rtx addr = force_reg (Pmode, XEXP (operands[1], 0));\n+  emit_insn (gen_atomic_exchange<mode>_soft\n+\t     (operands[0], addr, operands[2]));\n+  if (<MODE>mode == QImode)\n+    emit_insn (gen_zero_extendqisi2 (gen_lowpart (SImode, operands[0]),\n+\t\t\t\t     operands[0]));\n+  else if (<MODE>mode == HImode)\n+    emit_insn (gen_zero_extendhisi2 (gen_lowpart (SImode, operands[0]),\n+\t\t\t\t     operands[0]));\n+  DONE;\n+})\n+\n+(define_insn \"atomic_exchange<mode>_soft\"\n+  [(set (match_operand:I124 0 \"register_operand\" \"=&u\")\n+\t(mem:I124 (match_operand:SI 1 \"register_operand\" \"u\")))\n+   (set (mem:I124 (match_dup 1))\n+\t(unspec:I124\n+\t  [(match_operand:I124 2 \"register_operand\" \"u\")] UNSPEC_ATOMIC))\n+   (clobber (reg:SI R0_REG))\n+   (clobber (reg:SI R1_REG))]\n+  \"TARGET_SOFT_ATOMIC && !TARGET_SHMEDIA\"\n+{\n+  return \"mova\t1f,r0\"\t\t\t\t\"\\n\"\n+\t \"\t.align 2\"\t\t\t\"\\n\"\n+\t \"\tmov\tr15,r1\"\t\t\t\"\\n\"\n+\t \"\tmov\t#(0f-1f),r15\"\t\t\"\\n\"\n+\t \"0:\tmov.<i124suffix>\t@%1,%0\"\t\"\\n\"\n+\t \"\tmov.<i124suffix>\t%2,@%1\"\t\"\\n\"\n+\t \"1:\tmov\tr1,r15\";\n+}\n+  [(set_attr \"length\" \"14\")])\n+\n (define_expand \"atomic_fetch_<fetchop_name><mode>\"\n   [(set (match_operand:I124 0 \"register_operand\" \"\")\n \t(match_operand:I124 1 \"memory_operand\" \"\"))"}]}