{"sha": "1e9d75e87b82126fc5249149e5e85f2f1f308eea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU5ZDc1ZTg3YjgyMTI2ZmM1MjQ5MTQ5ZTVlODVmMmYxZjMwOGVlYQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-03-28T21:03:37Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-03-28T21:03:37Z"}, "message": "sibcall.c (indentify_call_return_value): Find last call in the chain; Allow stack adjustment after function call.\n\n        * sibcall.c (indentify_call_return_value): Find last call in the chain;\n        Allow stack adjustment after function call.\n\nFrom-SVN: r32791", "tree": {"sha": "d6b867a5f1ff4a5ed3b5ea9ff0b96e65058ce239", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6b867a5f1ff4a5ed3b5ea9ff0b96e65058ce239"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e9d75e87b82126fc5249149e5e85f2f1f308eea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e9d75e87b82126fc5249149e5e85f2f1f308eea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e9d75e87b82126fc5249149e5e85f2f1f308eea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e9d75e87b82126fc5249149e5e85f2f1f308eea/comments", "author": null, "committer": null, "parents": [{"sha": "8ba776817544782564c5bc710d6ddb2e3b32a0fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ba776817544782564c5bc710d6ddb2e3b32a0fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ba776817544782564c5bc710d6ddb2e3b32a0fd"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "abbdd6c72467a30f414cf06241ad66368c1b1244", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9d75e87b82126fc5249149e5e85f2f1f308eea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9d75e87b82126fc5249149e5e85f2f1f308eea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e9d75e87b82126fc5249149e5e85f2f1f308eea", "patch": "@@ -25,6 +25,9 @@ Tue Mar 28 11:55:48 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n Tue Mar 28 08:29:46 2000  Jan Hubicka  <jh@suse.cz>\n \n+\t* sibcall.c (indentify_call_return_value): Find last call in the chain;\n+\tAllow stack adjustment after function call.\n+\n \t* regmove.c (struct csa_memlist): Make mem field rtx *.\n \t(record_one_stack_ref): Accept rtx * instead of rtx as parameter.\n \t(try_apply_stack_adjustment): Replace whole MEM rtx."}, {"sha": "34cf5a93348ee67a50fa15e6f3ed47ac0fc6dd38", "filename": "gcc/sibcall.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9d75e87b82126fc5249149e5e85f2f1f308eea/gcc%2Fsibcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9d75e87b82126fc5249149e5e85f2f1f308eea/gcc%2Fsibcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsibcall.c?ref=1e9d75e87b82126fc5249149e5e85f2f1f308eea", "patch": "@@ -53,10 +53,12 @@ identify_call_return_value (cp, p_hard_return, p_soft_return)\n {\n   rtx insn, set, hard, soft;\n \n-  /* Search forward through the \"normal\" call sequence to the CALL insn.  */\n   insn = XEXP (cp, 0);\n-  while (GET_CODE (insn) != CALL_INSN)\n+  /* Search backward through the \"normal\" call sequence to the CALL insn.  */\n+  while (NEXT_INSN (insn))\n     insn = NEXT_INSN (insn);\n+  while (GET_CODE (insn) != CALL_INSN)\n+    insn = PREV_INSN (insn);\n \n   /* Assume the pattern is (set (dest) (call ...)), or that the first\n      member of a parallel is.  This is the hard return register used\n@@ -75,6 +77,11 @@ identify_call_return_value (cp, p_hard_return, p_soft_return)\n   if (GET_CODE (hard) != REG)\n     return 0;\n     \n+  /* Stack adjustment done after call may appear here.  */\n+  insn = skip_stack_adjustment (insn);\n+  if (! insn)\n+    return 0;\n+\n   /* If there's nothing after, there's no soft return value.  */\n   insn = NEXT_INSN (insn);\n   if (! insn)"}]}