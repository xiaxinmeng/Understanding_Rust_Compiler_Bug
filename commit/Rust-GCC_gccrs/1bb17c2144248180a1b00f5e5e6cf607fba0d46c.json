{"sha": "1bb17c2144248180a1b00f5e5e6cf607fba0d46c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJiMTdjMjE0NDI0ODE4MGExYjAwZjVlNWU2Y2Y2MDdmYmEwZDQ2Yw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-10-22T11:58:10Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-10-22T11:58:10Z"}, "message": "re PR debug/12389 ([testcase needed] ICE in gen_subprogram_die for nested function)\n\n\tPR debug/12389\n\t* Makefile.in (dwarf2out.o): Depend on cgraph.h.\n\t* cgraph.c (cgraph_function_possibly_inlined_p): New function.\n\t* cgraph.h (cgraph_function_possibly_inlined_p): Declare.\n\t(cgraph_global_info): Add flag inlined\n\t* dwarf2out.c (gen_subprogram_die, gen_decl_die): Use\n\tcgraph_function_possibly_inded_p\n\t* cgraphunit.c (mark_inline): Set inlined flag.\n\t* toplev.c (rest_of_decl_compilation): Call outlining_inline_function\n\tonly for possibly inlined functions.\n\t* c-decl.c (duplicate_decls): Never output abstract DIE representing old\n\tbody of function.\n\nFrom-SVN: r72795", "tree": {"sha": "9d18905bfe933c3bc24bcf7b89cb85d08790b337", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d18905bfe933c3bc24bcf7b89cb85d08790b337"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bb17c2144248180a1b00f5e5e6cf607fba0d46c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bb17c2144248180a1b00f5e5e6cf607fba0d46c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bb17c2144248180a1b00f5e5e6cf607fba0d46c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bb17c2144248180a1b00f5e5e6cf607fba0d46c/comments", "author": null, "committer": null, "parents": [{"sha": "e97c30aaa713e64309e3c0df2592f56e2a26e70e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97c30aaa713e64309e3c0df2592f56e2a26e70e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e97c30aaa713e64309e3c0df2592f56e2a26e70e"}], "stats": {"total": 62, "additions": 49, "deletions": 13}, "files": [{"sha": "badc59ef865656cdb77d0351c04da51e34f0647d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb17c2144248180a1b00f5e5e6cf607fba0d46c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb17c2144248180a1b00f5e5e6cf607fba0d46c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1bb17c2144248180a1b00f5e5e6cf607fba0d46c", "patch": "@@ -1,3 +1,18 @@\n+2003-10-22  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR debug/12389\n+\t* Makefile.in (dwarf2out.o): Depend on cgraph.h.\n+\t* cgraph.c (cgraph_function_possibly_inlined_p): New function.\n+\t* cgraph.h (cgraph_function_possibly_inlined_p): Declare.\n+\t(cgraph_global_info): Add flag inlined\n+\t* dwarf2out.c (gen_subprogram_die, gen_decl_die): Use\n+\tcgraph_function_possibly_inded_p\n+\t* cgraphunit.c (mark_inline): Set inlined flag.\n+\t* toplev.c (rest_of_decl_compilation): Call outlining_inline_function\n+\tonly for possibly inlined functions.\n+\t* c-decl.c (duplicate_decls): Never output abstract DIE representing old\n+\tbody of function.\n+\n 2003-10-22  Andrew Haley  <aph@redhat.com>\n \n \t* varasm.c (output_constructor): Make constructor annotation"}, {"sha": "0b89ddd7111d064188e54db3f2327d620ea7d26a", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb17c2144248180a1b00f5e5e6cf607fba0d46c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb17c2144248180a1b00f5e5e6cf607fba0d46c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=1bb17c2144248180a1b00f5e5e6cf607fba0d46c", "patch": "@@ -1586,7 +1586,7 @@ dwarf2out.o : dwarf2out.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H)\n    $(RTL_H) dwarf2.h debug.h flags.h insn-config.h reload.h output.h $(DIAGNOSTIC_H) real.h \\\n    hard-reg-set.h $(REGS_H) $(EXPR_H) libfuncs.h toplev.h dwarf2out.h varray.h \\\n    $(GGC_H) except.h dwarf2asm.h $(TM_P_H) langhooks.h $(HASHTAB_H) \\\n-   gt-dwarf2out.h $(TARGET_H)\n+   gt-dwarf2out.h $(TARGET_H) cgraph.h\n dwarf2asm.o : dwarf2asm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) flags.h $(RTL_H) \\\n    $(TREE_H) output.h dwarf2asm.h $(TM_P_H) $(GGC_H) gt-dwarf2asm.h\n vmsdbgout.o : vmsdbgout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\"}, {"sha": "93ce347784d48ec7eaea47ae36696ed883199115", "filename": "gcc/c-decl.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb17c2144248180a1b00f5e5e6cf607fba0d46c/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb17c2144248180a1b00f5e5e6cf607fba0d46c/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=1bb17c2144248180a1b00f5e5e6cf607fba0d46c", "patch": "@@ -1406,7 +1406,10 @@ duplicate_decls (tree newdecl, tree olddecl, int different_binding_level,\n \t been written out yet.  */\n       if (new_is_definition && DECL_INITIAL (olddecl))\n \t{\n-\t  if (TREE_USED (olddecl))\n+\t  if (TREE_USED (olddecl)\n+\t      /* In unit-at-a-time mode we never inline re-defined extern\n+\t         inline functions. */\n+\t      && !flag_unit_at_a_time)\n \t    (*debug_hooks->outlining_inline_function) (olddecl);\n \n \t  /* The new defn must not be inline.  */"}, {"sha": "b28d9f3a6c0cc59df6e1f27025b1550f52d61c77", "filename": "gcc/cgraph.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb17c2144248180a1b00f5e5e6cf607fba0d46c/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb17c2144248180a1b00f5e5e6cf607fba0d46c/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=1bb17c2144248180a1b00f5e5e6cf607fba0d46c", "patch": "@@ -531,5 +531,15 @@ cgraph_varpool_assemble_pending_decls (void)\n   return changed;\n }\n \n+/* Return true when the DECL can possibly be inlined.  */\n+bool\n+cgraph_function_possibly_inlined_p (tree decl)\n+{\n+  if (!flag_unit_at_a_time)\n+    return (DECL_INLINE (decl) && !flag_no_inline);\n+  if (!cgraph_global_info_ready)\n+    abort ();\n+  return cgraph_node (decl)->global.inlined;\n+}\n \n #include \"gt-cgraph.h\""}, {"sha": "a37227e95c93387ebf0e62d6e5778a8ca02077dc", "filename": "gcc/cgraph.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb17c2144248180a1b00f5e5e6cf607fba0d46c/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb17c2144248180a1b00f5e5e6cf607fba0d46c/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=1bb17c2144248180a1b00f5e5e6cf607fba0d46c", "patch": "@@ -59,6 +59,9 @@ struct cgraph_global_info GTY(())\n      Once we inline all calls to the function and the function is local,\n      it is set to false.  */\n   bool will_be_output;\n+\n+  /* Set iff at least one of the caller edges has inline_call flag set.  */\n+  bool inlined;\n };\n \n /* Information about the function that is propagated by the RTL backend.\n@@ -168,6 +171,8 @@ void cgraph_varpool_mark_needed_node (struct cgraph_varpool_node *);\n void cgraph_varpool_finalize_decl (tree);\n bool cgraph_varpool_assemble_pending_decls (void);\n \n+bool cgraph_function_possibly_inlined_p (tree);\n+\n /* In cgraphunit.c  */\n bool cgraph_assemble_pending_functions (void);\n void cgraph_finalize_function (tree, bool);"}, {"sha": "673419fa008fafb376b267918198c6266f21e63b", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb17c2144248180a1b00f5e5e6cf607fba0d46c/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb17c2144248180a1b00f5e5e6cf607fba0d46c/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=1bb17c2144248180a1b00f5e5e6cf607fba0d46c", "patch": "@@ -833,6 +833,7 @@ cgraph_mark_inline (struct cgraph_node *to, struct cgraph_node *what,\n   bool called = false;\n   int new_insns;\n \n+  what->global.inlined = 1;\n   for (e = what->callers; e; e = e->next_caller)\n     {\n       if (e->caller == to)"}, {"sha": "32b9332371675ea3238b7bedac735ecadd550b24", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb17c2144248180a1b00f5e5e6cf607fba0d46c/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb17c2144248180a1b00f5e5e6cf607fba0d46c/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=1bb17c2144248180a1b00f5e5e6cf607fba0d46c", "patch": "@@ -64,6 +64,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"target.h\"\n #include \"langhooks.h\"\n #include \"hashtab.h\"\n+#include \"cgraph.h\"\n \n #ifdef DWARF2_DEBUGGING_INFO\n static void dwarf2out_source_line (unsigned int, const char *);\n@@ -10685,20 +10686,20 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n     }\n   else if (DECL_ABSTRACT (decl))\n     {\n-      if (DECL_INLINE (decl) && !flag_no_inline)\n+      if (DECL_DECLARED_INLINE_P (decl))\n \t{\n-\t  /* ??? Checking DECL_DEFER_OUTPUT is correct for static\n-\t     inline functions, but not for extern inline functions.\n-\t     We can't get this completely correct because information\n-\t     about whether the function was declared inline is not\n-\t     saved anywhere.  */\n-\t  if (DECL_DEFER_OUTPUT (decl))\n+          if (cgraph_function_possibly_inlined_p (decl))\n \t    add_AT_unsigned (subr_die, DW_AT_inline, DW_INL_declared_inlined);\n \t  else\n-\t    add_AT_unsigned (subr_die, DW_AT_inline, DW_INL_inlined);\n+\t    add_AT_unsigned (subr_die, DW_AT_inline, DW_INL_declared_not_inlined);\n \t}\n       else\n-\tadd_AT_unsigned (subr_die, DW_AT_inline, DW_INL_declared_not_inlined);\n+\t{\n+\t  if (cgraph_function_possibly_inlined_p (decl))\n+            add_AT_unsigned (subr_die, DW_AT_inline, DW_INL_inlined);\n+\t  else\n+\t    abort ();\n+\t}\n \n       equate_decl_number_to_die (decl, subr_die);\n     }\n@@ -11800,7 +11801,8 @@ gen_decl_die (tree decl, dw_die_ref context_die)\n \n       /* If we're emitting an out-of-line copy of an inline function,\n \t emit info for the abstract instance and set up to refer to it.  */\n-      else if (DECL_INLINE (decl) && ! DECL_ABSTRACT (decl)\n+      else if (cgraph_function_possibly_inlined_p (decl)\n+\t       && ! DECL_ABSTRACT (decl)\n \t       && ! class_scope_p (context_die)\n \t       /* dwarf2out_abstract_function won't emit a die if this is just\n \t\t  a declaration.  We must avoid setting DECL_ABSTRACT_ORIGIN in"}, {"sha": "219c69931a5e60dc72b732d1de9509bbd6e89ea8", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb17c2144248180a1b00f5e5e6cf607fba0d46c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb17c2144248180a1b00f5e5e6cf607fba0d46c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=1bb17c2144248180a1b00f5e5e6cf607fba0d46c", "patch": "@@ -3177,7 +3177,7 @@ rest_of_compilation (tree decl)\n   /* We are now committed to emitting code for this function.  Do any\n      preparation, such as emitting abstract debug info for the inline\n      before it gets mangled by optimization.  */\n-  if (DECL_INLINE (decl))\n+  if (cgraph_function_possibly_inlined_p (decl))\n     (*debug_hooks->outlining_inline_function) (decl);\n \n   /* Remove any notes we don't need.  That will make iterating"}]}