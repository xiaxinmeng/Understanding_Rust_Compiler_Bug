{"sha": "57bcb97aac8ba7f801c3ce18ef287ae9a4ac6ae9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdiY2I5N2FhYzhiYTdmODAxYzNjZTE4ZWYyODdhZTlhNGFjNmFlOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-09-02T20:01:46Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-09-02T20:01:46Z"}, "message": "stmt.c (expand_asm_operands): Invoke MD_ASM_CLOBBERS if present.\n\n        * stmt.c (expand_asm_operands): Invoke MD_ASM_CLOBBERS if present.\n        * tm.texi (MD_ASM_CLOBBERS): Document it.\n\nFrom-SVN: r29064", "tree": {"sha": "dc5ca7fbf22568057834f64696baefb89b6503d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc5ca7fbf22568057834f64696baefb89b6503d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57bcb97aac8ba7f801c3ce18ef287ae9a4ac6ae9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57bcb97aac8ba7f801c3ce18ef287ae9a4ac6ae9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57bcb97aac8ba7f801c3ce18ef287ae9a4ac6ae9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57bcb97aac8ba7f801c3ce18ef287ae9a4ac6ae9/comments", "author": null, "committer": null, "parents": [{"sha": "773c6f00765f091ee6a69929a19cfd46d7a30c03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/773c6f00765f091ee6a69929a19cfd46d7a30c03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/773c6f00765f091ee6a69929a19cfd46d7a30c03"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "e73dd7dc76fd5ed249e583691d18a9a24a8ff36a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57bcb97aac8ba7f801c3ce18ef287ae9a4ac6ae9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57bcb97aac8ba7f801c3ce18ef287ae9a4ac6ae9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57bcb97aac8ba7f801c3ce18ef287ae9a4ac6ae9", "patch": "@@ -1,3 +1,28 @@\n+Thu Sep  2 13:00:48 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* stmt.c (expand_asm_operands): Invoke MD_ASM_CLOBBERS if present.\n+\t* tm.texi (MD_ASM_CLOBBERS): Document it.\n+\n+Thu Sep  2 10:22:40 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* dwarf2out.c (dwarf2out_line): Constify `lastfile'.\n+\t* except.c (expand_rethrow): Remove unused variable.\n+\t* expr.c (do_jump_by_parts_greater_rtx): Likewise.\n+\t* flow.c (replace_insns): Likewise.\n+\t(create_edge_list, verify_edge_list): Likewise.\n+\t* gcse.c (cprop_cc0_jump): Protect declaration with HAVE_cc0.\n+\n+\t* genemit.c (gen_expand): Only emit `operands[N]' decl if there\n+\tis special code to run.\n+\t(main): Don't define operands to emit_operand.\n+\t* genrecog.c (main): Don't emit an empty peephole2_insn function.\n+\n+\t* rtl.h (NOTE_BASIC_BLOCK): Use X0BBDEF.\n+\n+\t* alpha/alpha.h (normal_memory_operand): Declare.\n+\t(reg_no_subreg_operand): Declare.\n+\t* alpha/elf.h (ASM_DECLARE_OBJECT_NAME): Use HOST_WIDE_INT_PRINT_DEC.\n+\n Thu Sep  2 10:19:20 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* c-parse.in (compstmt_primary_start): New, broken out of first"}, {"sha": "f0548b494edbd87dc4cd806bc93821ec9fa747e7", "filename": "gcc/stmt.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57bcb97aac8ba7f801c3ce18ef287ae9a4ac6ae9/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57bcb97aac8ba7f801c3ce18ef287ae9a4ac6ae9/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=57bcb97aac8ba7f801c3ce18ef287ae9a4ac6ae9", "patch": "@@ -1153,6 +1153,14 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n       return;\n     }\n \n+#ifdef MD_ASM_CLOBBERS\n+  /* Sometimes we wish to automatically clobber registers across an asm.\n+     Case in point is when the i386 backend moved from cc0 to a hard reg --\n+     maintaining source-level compatability means automatically clobbering\n+     the flags register.  */\n+  MD_ASM_CLOBBERS (clobbers);\n+#endif\n+\n   /* Count the number of meaningful clobbered registers, ignoring what\n      we would ignore later.  */\n   nclobbers = 0;"}, {"sha": "eab7b2e4a0bbf63e67aef9879ba9b7fb0ab8e34e", "filename": "gcc/tm.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57bcb97aac8ba7f801c3ce18ef287ae9a4ac6ae9/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57bcb97aac8ba7f801c3ce18ef287ae9a4ac6ae9/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=57bcb97aac8ba7f801c3ce18ef287ae9a4ac6ae9", "patch": "@@ -7713,6 +7713,11 @@ unit may not be bound to undefined symbols in another translation unit\n without user intervention.  For instance, under Microsoft Windows\n symbols must be explicitly imported from shared libraries (DLLs).\n \n+@findex MD_ASM_CLOBBERS\n+@item MD_ASM_CLOBBERS\n+A C statement that adds to @var{CLOBBERS} @code{STRING_CST} trees for\n+any hard regs the port wishes to automatically clobber for all asms.\n+\n @findex ISSUE_RATE\n @item ISSUE_RATE\n A C expression that returns how many instructions can be issued at the"}]}