{"sha": "06712fc68dc9843d9af7c7ac10047f49d305ad76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY3MTJmYzY4ZGM5ODQzZDlhZjdjN2FjMTAwNDdmNDlkMzA1YWQ3Ng==", "commit": {"author": {"name": "Marco Elver", "email": "elver@google.com", "date": "2020-06-10T14:21:21Z"}, "committer": {"name": "Marco Elver", "email": "elver@google.com", "date": "2020-06-12T15:29:45Z"}, "message": "tsan: Add param to disable func-entry-exit instrumentation\n\nAdds param tsan-instrument-func-entry-exit, which controls if\n__tsan_func_{entry,exit} calls should be emitted or not. The default\nbehaviour is to emit the calls.\n\nThis may be required by alternative race detection runtimes. One such\nruntime is the Kernel Concurrency Sanitizer (KCSAN):\n\n\thttps://github.com/google/ktsan/wiki/KCSAN\n\nAfter this change, GCC should satisfy all requirements for KCSAN:\n\n\thttps://lore.kernel.org/lkml/20200515150338.190344-7-elver@google.com/\n\ngcc/ChangeLog:\n\n\t* gimplify.c (gimplify_function_tree): Optimize and do not emit\n\tIFN_TSAN_FUNC_EXIT in a finally block if we do not need it.\n\t* params.opt: Add --param=tsan-instrument-func-entry-exit=.\n\t* tsan.c (instrument_memory_accesses): Make\n\tfentry_exit_instrument bool depend on new param.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/tsan/func_entry_exit.c: New test.\n\t* c-c++-common/tsan/func_entry_exit_disabled.c: New test.", "tree": {"sha": "e8c4e992fbe0a21e10eee6da02bc143cfcdfbe4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8c4e992fbe0a21e10eee6da02bc143cfcdfbe4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06712fc68dc9843d9af7c7ac10047f49d305ad76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06712fc68dc9843d9af7c7ac10047f49d305ad76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06712fc68dc9843d9af7c7ac10047f49d305ad76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06712fc68dc9843d9af7c7ac10047f49d305ad76/comments", "author": {"login": "melver", "id": 795549, "node_id": "MDQ6VXNlcjc5NTU0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795549?v=4", "gravatar_id": "", "url": "https://api.github.com/users/melver", "html_url": "https://github.com/melver", "followers_url": "https://api.github.com/users/melver/followers", "following_url": "https://api.github.com/users/melver/following{/other_user}", "gists_url": "https://api.github.com/users/melver/gists{/gist_id}", "starred_url": "https://api.github.com/users/melver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/melver/subscriptions", "organizations_url": "https://api.github.com/users/melver/orgs", "repos_url": "https://api.github.com/users/melver/repos", "events_url": "https://api.github.com/users/melver/events{/privacy}", "received_events_url": "https://api.github.com/users/melver/received_events", "type": "User", "site_admin": false}, "committer": {"login": "melver", "id": 795549, "node_id": "MDQ6VXNlcjc5NTU0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795549?v=4", "gravatar_id": "", "url": "https://api.github.com/users/melver", "html_url": "https://github.com/melver", "followers_url": "https://api.github.com/users/melver/followers", "following_url": "https://api.github.com/users/melver/following{/other_user}", "gists_url": "https://api.github.com/users/melver/gists{/gist_id}", "starred_url": "https://api.github.com/users/melver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/melver/subscriptions", "organizations_url": "https://api.github.com/users/melver/orgs", "repos_url": "https://api.github.com/users/melver/repos", "events_url": "https://api.github.com/users/melver/events{/privacy}", "received_events_url": "https://api.github.com/users/melver/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1432bc368121eed511a0a004f2e21d89ceaf14ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1432bc368121eed511a0a004f2e21d89ceaf14ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1432bc368121eed511a0a004f2e21d89ceaf14ad"}], "stats": {"total": 69, "additions": 67, "deletions": 2}, "files": [{"sha": "416fb609b940c2fd5c283228b8f348ea0429584a", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06712fc68dc9843d9af7c7ac10047f49d305ad76/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06712fc68dc9843d9af7c7ac10047f49d305ad76/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=06712fc68dc9843d9af7c7ac10047f49d305ad76", "patch": "@@ -15011,7 +15011,8 @@ gimplify_function_tree (tree fndecl)\n       bind = new_bind;\n     }\n \n-  if (sanitize_flags_p (SANITIZE_THREAD))\n+  if (sanitize_flags_p (SANITIZE_THREAD)\n+      && param_tsan_instrument_func_entry_exit)\n     {\n       gcall *call = gimple_build_call_internal (IFN_TSAN_FUNC_EXIT, 0);\n       gimple *tf = gimple_build_try (seq, call, GIMPLE_TRY_FINALLY);"}, {"sha": "e29a44e7712b824a44ab04deddd09b1e8c7d1546", "filename": "gcc/params.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06712fc68dc9843d9af7c7ac10047f49d305ad76/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06712fc68dc9843d9af7c7ac10047f49d305ad76/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=06712fc68dc9843d9af7c7ac10047f49d305ad76", "patch": "@@ -912,6 +912,10 @@ Set the maximum number of instructions executed in parallel in reassociated tree\n Common Joined UInteger Var(param_tsan_distinguish_volatile) IntegerRange(0, 1) Param\n Emit special instrumentation for accesses to volatiles.\n \n+-param=tsan-instrument-func-entry-exit=\n+Common Joined UInteger Var(param_tsan_instrument_func_entry_exit) Init(1) IntegerRange(0, 1) Param\n+Emit instrumentation calls to __tsan_func_entry() and __tsan_func_exit().\n+\n -param=uninit-control-dep-attempts=\n Common Joined UInteger Var(param_uninit_control_dep_attempts) Init(1000) IntegerRange(1, 65536) Param Optimization\n Maximum number of nested calls to search for control dependencies during uninitialized variable analysis."}, {"sha": "9c1b697411cffebacb73b83c55b45268fae15a77", "filename": "gcc/testsuite/c-c++-common/tsan/func_entry_exit.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06712fc68dc9843d9af7c7ac10047f49d305ad76/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ffunc_entry_exit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06712fc68dc9843d9af7c7ac10047f49d305ad76/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ffunc_entry_exit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ffunc_entry_exit.c?ref=06712fc68dc9843d9af7c7ac10047f49d305ad76", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-gimple -fdump-tree-optimized\" } */\n+\n+int x;\n+\n+__attribute__((noinline))\n+void fn1(void)\n+{\n+  x++;\n+}\n+\n+__attribute__((noinline))\n+void fn2(void)\n+{\n+  fn1();\n+}\n+\n+__attribute__((noinline))\n+int main(int argc, char *argv[])\n+{\n+  fn1();\n+  fn2();\n+  return 0;\n+}\n+\n+// { dg-final { scan-tree-dump \"TSAN_FUNC_EXIT\" \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"__tsan_func_entry\" 3 \"optimized\" } }\n+// { dg-final { scan-tree-dump-times \"__tsan_func_exit\" 3 \"optimized\" } }\n+// { dg-final { scan-tree-dump \"__tsan_write\" \"optimized\" } }"}, {"sha": "63cc73b9eba97fead52248a2d72f3b87b4e0910d", "filename": "gcc/testsuite/c-c++-common/tsan/func_entry_exit_disabled.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06712fc68dc9843d9af7c7ac10047f49d305ad76/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ffunc_entry_exit_disabled.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06712fc68dc9843d9af7c7ac10047f49d305ad76/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ffunc_entry_exit_disabled.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ffunc_entry_exit_disabled.c?ref=06712fc68dc9843d9af7c7ac10047f49d305ad76", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"--param=tsan-instrument-func-entry-exit=0 -fdump-tree-gimple -fdump-tree-optimized\" } */\n+\n+int x;\n+\n+__attribute__((noinline))\n+void fn1(void)\n+{\n+  x++;\n+}\n+\n+__attribute__((noinline))\n+void fn2(void)\n+{\n+  fn1();\n+}\n+\n+__attribute__((noinline))\n+int main(int argc, char *argv[])\n+{\n+  fn1();\n+  fn2();\n+  return 0;\n+}\n+\n+// { dg-final { scan-tree-dump-not \"TSAN_FUNC_EXIT\" \"gimple\" } }\n+// { dg-final { scan-tree-dump-not \"__tsan_func_entry\" \"optimized\" } }\n+// { dg-final { scan-tree-dump-not \"__tsan_func_exit\" \"optimized\" } }\n+// { dg-final { scan-tree-dump \"__tsan_write\" \"optimized\" } }"}, {"sha": "4d6223454b576eb0706b514a2493e48c20c94a15", "filename": "gcc/tsan.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06712fc68dc9843d9af7c7ac10047f49d305ad76/gcc%2Ftsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06712fc68dc9843d9af7c7ac10047f49d305ad76/gcc%2Ftsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.c?ref=06712fc68dc9843d9af7c7ac10047f49d305ad76", "patch": "@@ -804,7 +804,9 @@ instrument_memory_accesses (bool *cfg_changed)\n \t      func_exit_seen = true;\n \t    }\n \t  else\n-\t    fentry_exit_instrument |= instrument_gimple (&gsi);\n+\t    fentry_exit_instrument\n+\t      |= (instrument_gimple (&gsi)\n+\t\t  && param_tsan_instrument_func_entry_exit);\n \t}\n       if (gimple_purge_dead_eh_edges (bb))\n \t*cfg_changed = true;"}]}