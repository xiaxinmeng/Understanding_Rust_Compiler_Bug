{"sha": "09fa8841f49c6f3949130406e27e7f7e080cb176", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlmYTg4NDFmNDljNmYzOTQ5MTMwNDA2ZTI3ZTdmN2UwODBjYjE3Ng==", "commit": {"author": {"name": "Bob Wilson", "email": "bob.wilson@acm.org", "date": "2006-11-06T18:50:37Z"}, "committer": {"name": "Bob Wilson", "email": "bwilson@gcc.gnu.org", "date": "2006-11-06T18:50:37Z"}, "message": "longlong.h (__xtensa__): Add definitions for umul_ppmm...\n\n\t* longlong.h (__xtensa__): Add definitions for umul_ppmm, __umulsidi3,\n\tcount_leading_zeros, and count_trailing_zeros.\n\t* config/xtensa/xtensa.c (TARGET_INIT_BUILTINS): Define.\n\t(TARGET_FOLD_BUILTIN): Define.\n\t(TARGET_EXPAND_BUILTIN): Define.\n\t(xtensa_init_builtins): New.\n\t(xtensa_fold_builtin): New.\n\t(xtensa_expand_builtin): New.\n\t(xtensa_rtx_costs): Add CTZ and CLZ.  Adjust costs for MULT.\n\t* config/xtensa/xtensa.h (TARGET_MUL32_HIGH): Define.\n\t(CLZ_DEFINED_VALUE_AT_ZERO): Define.\n\t(CTZ_DEFINED_VALUE_AT_ZERO): Define.\n\t* config/xtensa/xtensa.md (UNSPEC_NSAU): Remove.\n\t(any_extend): New code macro.\n\t(u, su): New code attributes.\n\t(<u>mulsidi3, <u>mulsi3_highpart, clzsi2, ctzsi2): New.\n\t(nsau): Remove; replaced by clzsi2.\n\t(ffssi2): Use clzsi2.\n\t* config/xtensa/t-xtensa (LIB1ASMFUNCS): Add _umulsidi3,\n\t_clzsi2, _ctzsi2, and _ffssi2.  Rename _nsau to _clz.\n\t* config/xtensa/lib1funcs.asm (__mulsi3): Support Mul32 option.\n\t(__umulsidi3, __clzsi2, __ctzsi2, __ffssi2): New.\n\t(__nsau_data): Guard with ifdef L_clz instead of L_nsau.\n\nFrom-SVN: r118524", "tree": {"sha": "268c5b13ed6895e2d3676f31c09e3e720f0c0bec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/268c5b13ed6895e2d3676f31c09e3e720f0c0bec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09fa8841f49c6f3949130406e27e7f7e080cb176", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09fa8841f49c6f3949130406e27e7f7e080cb176", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09fa8841f49c6f3949130406e27e7f7e080cb176", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09fa8841f49c6f3949130406e27e7f7e080cb176/comments", "author": null, "committer": null, "parents": [{"sha": "a548d7b75391323fb617554e965311a6897dd6ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a548d7b75391323fb617554e965311a6897dd6ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a548d7b75391323fb617554e965311a6897dd6ed"}], "stats": {"total": 439, "additions": 418, "deletions": 21}, "files": [{"sha": "967d3c2db8e379d353b00acb96098113962080ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fa8841f49c6f3949130406e27e7f7e080cb176/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fa8841f49c6f3949130406e27e7f7e080cb176/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09fa8841f49c6f3949130406e27e7f7e080cb176", "patch": "@@ -1,3 +1,29 @@\n+2006-11-06  Bob Wilson  <bob.wilson@acm.org>\n+\n+\t* longlong.h (__xtensa__): Add definitions for umul_ppmm, __umulsidi3,\n+\tcount_leading_zeros, and count_trailing_zeros.\n+\t* config/xtensa/xtensa.c (TARGET_INIT_BUILTINS): Define.\n+\t(TARGET_FOLD_BUILTIN): Define.\n+\t(TARGET_EXPAND_BUILTIN): Define.\n+\t(xtensa_init_builtins): New.\n+\t(xtensa_fold_builtin): New.\n+\t(xtensa_expand_builtin): New.\n+\t(xtensa_rtx_costs): Add CTZ and CLZ.  Adjust costs for MULT.\n+\t* config/xtensa/xtensa.h (TARGET_MUL32_HIGH): Define.\n+\t(CLZ_DEFINED_VALUE_AT_ZERO): Define.\n+\t(CTZ_DEFINED_VALUE_AT_ZERO): Define.\n+\t* config/xtensa/xtensa.md (UNSPEC_NSAU): Remove.\n+\t(any_extend): New code macro.\n+\t(u, su): New code attributes.\n+\t(<u>mulsidi3, <u>mulsi3_highpart, clzsi2, ctzsi2): New.\n+\t(nsau): Remove; replaced by clzsi2.\n+\t(ffssi2): Use clzsi2.\n+\t* config/xtensa/t-xtensa (LIB1ASMFUNCS): Add _umulsidi3,\n+\t_clzsi2, _ctzsi2, and _ffssi2.  Rename _nsau to _clz.\n+\t* config/xtensa/lib1funcs.asm (__mulsi3): Support Mul32 option.\n+\t(__umulsidi3, __clzsi2, __ctzsi2, __ffssi2): New.\n+\t(__nsau_data): Guard with ifdef L_clz instead of L_nsau.\n+\n 2006-11-06  Vladimir Prus  <vladimir@codesourcery.com>\n \n \t* config/arm/t-strongarm-pe: (TARGET_LIBGCC2_CFLAGS): Do no"}, {"sha": "69d51a7551c0d2b557a0df2b3f224e8376729edb", "filename": "gcc/config/xtensa/lib1funcs.asm", "status": "modified", "additions": 219, "deletions": 5, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fa8841f49c6f3949130406e27e7f7e080cb176/gcc%2Fconfig%2Fxtensa%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fa8841f49c6f3949130406e27e7f7e080cb176/gcc%2Fconfig%2Fxtensa%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Flib1funcs.asm?ref=09fa8841f49c6f3949130406e27e7f7e080cb176", "patch": "@@ -99,7 +99,10 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n __mulsi3:\n \tleaf_entry sp, 16\n \n-#if XCHAL_HAVE_MUL16\n+#if XCHAL_HAVE_MUL32\n+\tmull\ta2, a2, a3\n+\n+#elif XCHAL_HAVE_MUL16\n \tor\ta4, a2, a3\n \tsrai\ta4, a4, 16\n \tbnez\ta4, .LMUL16\n@@ -124,7 +127,7 @@ __mulsi3:\n \tslli\ta5, a5, 16\n \tadd\ta2, a4, a5\n \n-#else /* !XCHAL_HAVE_MUL16 && !XCHAL_HAVE_MAC16 */\n+#else /* !MUL32 && !MUL16 && !MAC16 */\n \n \t/* Multiply one bit at a time, but unroll the loop 4x to better\n \t   exploit the addx instructions and avoid overhead.\n@@ -188,14 +191,178 @@ __mulsi3:\n \tneg\ta3, a2\n \tmovltz\ta2, a3, a5\n \n-#endif /* !XCHAL_HAVE_MUL16 && !XCHAL_HAVE_MAC16 */\n+#endif /* !MUL32 && !MUL16 && !MAC16 */\n \n \tleaf_return\n \t.size\t__mulsi3,.-__mulsi3\n \n #endif /* L_mulsi3 */\n \n \n+#ifdef L_umulsidi3\n+\t.align\t4\n+\t.global\t__umulsidi3\n+\t.type\t__umulsidi3,@function\n+__umulsidi3:\n+\tleaf_entry sp, 32\n+#if __XTENSA_CALL0_ABI__\n+\taddi\tsp, sp, -32\n+\ts32i\ta12, sp, 16\n+\ts32i\ta13, sp, 20\n+\ts32i\ta14, sp, 24\n+\ts32i\ta15, sp, 28\n+#endif\n+\n+#ifdef __XTENSA_EB__\n+#define wh a2\n+#define wl a3\n+#else\n+#define wh a3\n+#define wl a2\n+#endif /* __XTENSA_EB__ */\n+\n+\t/* This code is taken from the mulsf3 routine in ieee754-sf.S.\n+\t   See more comments there.  */\n+\n+#if XCHAL_HAVE_MUL32_HIGH\n+\tmull\ta6, a2, a3\n+\tmuluh\twh, a2, a3\n+\tmov\twl, a6\n+\n+#else /* ! MUL32_HIGH */\n+\n+#if !XCHAL_HAVE_MUL16 && !XCHAL_HAVE_MUL32 && !XCHAL_HAVE_MAC16\n+\t/* a0 and a8 will be clobbered by calling the multiply function\n+\t   but a8 is not used here and need not be saved.  */\n+\ts32i\ta0, sp, 0\n+#endif\n+\n+#if XCHAL_HAVE_MUL16 || XCHAL_HAVE_MUL32\n+\n+#define a2h a4\n+#define a3h a5\n+\n+\t/* Get the high halves of the inputs into registers.  */\n+\tsrli\ta2h, a2, 16\n+\tsrli\ta3h, a3, 16\n+\n+#define a2l a2\n+#define a3l a3\n+\n+#if XCHAL_HAVE_MUL32 && !XCHAL_HAVE_MUL16\n+\t/* Clear the high halves of the inputs.  This does not matter\n+\t   for MUL16 because the high bits are ignored.  */\n+\textui\ta2, a2, 0, 16\n+\textui\ta3, a3, 0, 16\n+#endif\n+#endif /* MUL16 || MUL32 */\n+\n+\n+#if XCHAL_HAVE_MUL16\n+\n+#define do_mul(dst, xreg, xhalf, yreg, yhalf) \\\n+\tmul16u\tdst, xreg ## xhalf, yreg ## yhalf\n+\n+#elif XCHAL_HAVE_MUL32\n+\n+#define do_mul(dst, xreg, xhalf, yreg, yhalf) \\\n+\tmull\tdst, xreg ## xhalf, yreg ## yhalf\n+\n+#elif XCHAL_HAVE_MAC16\n+\n+/* The preprocessor insists on inserting a space when concatenating after\n+   a period in the definition of do_mul below.  These macros are a workaround\n+   using underscores instead of periods when doing the concatenation.  */\n+#define umul_aa_ll umul.aa.ll\n+#define umul_aa_lh umul.aa.lh\n+#define umul_aa_hl umul.aa.hl\n+#define umul_aa_hh umul.aa.hh\n+\n+#define do_mul(dst, xreg, xhalf, yreg, yhalf) \\\n+\tumul_aa_ ## xhalf ## yhalf\txreg, yreg; \\\n+\trsr\tdst, ACCLO\n+\n+#else /* no multiply hardware */\n+\t\n+#define set_arg_l(dst, src) \\\n+\textui\tdst, src, 0, 16\n+#define set_arg_h(dst, src) \\\n+\tsrli\tdst, src, 16\n+\n+#define do_mul(dst, xreg, xhalf, yreg, yhalf) \\\n+\tset_arg_ ## xhalf (a13, xreg); \\\n+\tset_arg_ ## yhalf (a14, yreg); \\\n+\tcall0\t.Lmul_mulsi3; \\\n+\tmov\tdst, a12\n+#endif\n+\n+\t/* Add pp1 and pp2 into a6 with carry-out in a9.  */\n+\tdo_mul(a6, a2, l, a3, h)\t/* pp 1 */\n+\tdo_mul(a11, a2, h, a3, l)\t/* pp 2 */\n+\tmovi\ta9, 0\n+\tadd\ta6, a6, a11\n+\tbgeu\ta6, a11, 1f\n+\taddi\ta9, a9, 1\n+1:\n+\t/* Shift the high half of a9/a6 into position in a9.  Note that\n+\t   this value can be safely incremented without any carry-outs.  */\n+\tssai\t16\n+\tsrc\ta9, a9, a6\n+\n+\t/* Compute the low word into a6.  */\n+\tdo_mul(a11, a2, l, a3, l)\t/* pp 0 */\n+\tsll\ta6, a6\n+\tadd\ta6, a6, a11\n+\tbgeu\ta6, a11, 1f\n+\taddi\ta9, a9, 1\n+1:\n+\t/* Compute the high word into wh.  */\n+\tdo_mul(wh, a2, h, a3, h)\t/* pp 3 */\n+\tadd\twh, wh, a9\n+\tmov\twl, a6\n+\n+#endif /* !MUL32_HIGH */\n+\n+\tleaf_return\n+\n+#if !XCHAL_HAVE_MUL16 && !XCHAL_HAVE_MUL32 && !XCHAL_HAVE_MAC16\n+\t\n+\t/* For Xtensa processors with no multiply hardware, this simplified\n+\t   version of _mulsi3 is used for multiplying 16-bit chunks of\n+\t   the floating-point mantissas.  It uses a custom ABI:\tthe inputs\n+\t   are passed in a13 and a14, the result is returned in a12, and\n+\t   a8 and a15 are clobbered.  */\n+\t.align\t4\n+.Lmul_mulsi3:\n+\tmovi\ta12, 0\n+.Lmul_mult_loop:\n+\tadd\ta15, a14, a12\n+\textui\ta8, a13, 0, 1\n+\tmovnez\ta12, a15, a8\n+\n+\tdo_addx2 a15, a14, a12, a15\n+\textui\ta8, a13, 1, 1\n+\tmovnez\ta12, a15, a8\n+\n+\tdo_addx4 a15, a14, a12, a15\n+\textui\ta8, a13, 2, 1\n+\tmovnez\ta12, a15, a8\n+\n+\tdo_addx8 a15, a14, a12, a15\n+\textui\ta8, a13, 3, 1\n+\tmovnez\ta12, a15, a8\n+\n+\tsrli\ta13, a13, 4\n+\tslli\ta14, a14, 4\n+\tbnez\ta13, .Lmul_mult_loop\n+\tret\n+#endif /* !MUL16 && !MUL32 && !MAC16 */\n+\n+\t.size\t__umulsidi3,.-__umulsidi3\n+\n+#endif /* L_umulsidi3 */\n+\n+\n /* Define a macro for the NSAU (unsigned normalize shift amount)\n    instruction, which computes the number of leading zero bits,\n    to handle cases where it is not included in the Xtensa processor\n@@ -225,7 +392,7 @@ __mulsi3:\n #endif /* !XCHAL_HAVE_NSA */\n \t.endm\n \n-#ifdef L_nsau\n+#ifdef L_clz\n \t.section .rodata\n \t.align\t4\n \t.global\t__nsau_data\n@@ -251,7 +418,54 @@ __nsau_data:\n #endif /* !XCHAL_HAVE_NSA */\n \t.size\t__nsau_data,.-__nsau_data\n \t.hidden\t__nsau_data\n-#endif /* L_nsau */\n+#endif /* L_clz */\n+\n+\n+#ifdef L_clzsi2\n+\t.align\t4\n+\t.global\t__clzsi2\n+\t.type\t__clzsi2,@function\n+__clzsi2:\n+\tleaf_entry sp, 16\n+\tdo_nsau\ta2, a2, a3, a4\n+\tleaf_return\n+\t.size\t__clzsi2,.-__clzsi2\n+\n+#endif /* L_clzsi2 */\n+\n+\n+#ifdef L_ctzsi2\n+\t.align\t4\n+\t.global\t__ctzsi2\n+\t.type\t__ctzsi2,@function\n+__ctzsi2:\n+\tleaf_entry sp, 16\n+\tneg\ta3, a2\n+\tand\ta3, a3, a2\n+\tdo_nsau\ta2, a3, a4, a5\n+\tneg\ta2, a2\n+\taddi\ta2, a2, 31\n+\tleaf_return\n+\t.size\t__ctzsi2,.-__ctzsi2\n+\n+#endif /* L_ctzsi2 */\n+\n+\n+#ifdef L_ffssi2\n+\t.align\t4\n+\t.global\t__ffssi2\n+\t.type\t__ffssi2,@function\n+__ffssi2:\n+\tleaf_entry sp, 16\n+\tneg\ta3, a2\n+\tand\ta3, a3, a2\n+\tdo_nsau\ta2, a3, a4, a5\n+\tneg\ta2, a2\n+\taddi\ta2, a2, 32\n+\tleaf_return\n+\t.size\t__ffssi2,.-__ffssi2\n+\n+#endif /* L_ffssi2 */\n \n \n #ifdef L_udivsi3"}, {"sha": "efcfe255f3b0bbf1c9040766219c0ac06c351742", "filename": "gcc/config/xtensa/t-xtensa", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fa8841f49c6f3949130406e27e7f7e080cb176/gcc%2Fconfig%2Fxtensa%2Ft-xtensa", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fa8841f49c6f3949130406e27e7f7e080cb176/gcc%2Fconfig%2Fxtensa%2Ft-xtensa", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Ft-xtensa?ref=09fa8841f49c6f3949130406e27e7f7e080cb176", "patch": "@@ -1,5 +1,6 @@\n LIB1ASMSRC = xtensa/lib1funcs.asm\n-LIB1ASMFUNCS = _mulsi3 _nsau _divsi3 _modsi3 _udivsi3 _umodsi3 \\\n+LIB1ASMFUNCS = _mulsi3 _divsi3 _modsi3 _udivsi3 _umodsi3 \\\n+\t_umulsidi3 _clz _clzsi2 _ctzsi2 _ffssi2 \\\n \t_negsf2 _addsubsf3 _mulsf3 _divsf3 _cmpsf2 _fixsfsi _fixsfdi \\\n \t_fixunssfsi _fixunssfdi _floatsisf _floatunsisf \\\n \t_floatdisf _floatundisf \\"}, {"sha": "32c3ff2edbf2ea93f8684823c5b0d838574ada54", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 86, "deletions": 1, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fa8841f49c6f3949130406e27e7f7e080cb176/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fa8841f49c6f3949130406e27e7f7e080cb176/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=09fa8841f49c6f3949130406e27e7f7e080cb176", "patch": "@@ -210,6 +210,9 @@ static bool xtensa_rtx_costs (rtx, int, int, int *);\n static tree xtensa_build_builtin_va_list (void);\n static bool xtensa_return_in_memory (tree, tree);\n static tree xtensa_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n+static void xtensa_init_builtins (void);\n+static tree xtensa_fold_builtin (tree, tree, bool);\n+static rtx xtensa_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n \n static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n   REG_ALLOC_ORDER;\n@@ -265,6 +268,13 @@ static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n #undef TARGET_RETURN_IN_MSB\n #define TARGET_RETURN_IN_MSB xtensa_return_in_msb\n \n+#undef  TARGET_INIT_BUILTINS\n+#define TARGET_INIT_BUILTINS xtensa_init_builtins\n+#undef  TARGET_FOLD_BUILTIN\n+#define TARGET_FOLD_BUILTIN xtensa_fold_builtin\n+#undef  TARGET_EXPAND_BUILTIN\n+#define TARGET_EXPAND_BUILTIN xtensa_expand_builtin\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n \n@@ -2322,6 +2332,74 @@ xtensa_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p,\n }\n \n \n+/* Builtins.  */\n+\n+enum xtensa_builtin\n+{\n+  XTENSA_BUILTIN_UMULSIDI3,\n+  XTENSA_BUILTIN_max\n+};\n+\n+\n+static void\n+xtensa_init_builtins (void)\n+{\n+  tree ftype;\n+\n+  ftype = build_function_type_list (unsigned_intDI_type_node,\n+\t\t\t\t    unsigned_intSI_type_node,\n+\t\t\t\t    unsigned_intSI_type_node, NULL_TREE);\n+\n+  add_builtin_function (\"__builtin_umulsidi3\", ftype,\n+\t\t\tXTENSA_BUILTIN_UMULSIDI3, BUILT_IN_MD,\n+\t\t\t\"__umulsidi3\", NULL_TREE);\n+}\n+\n+\n+static tree\n+xtensa_fold_builtin (tree fndecl, tree arglist, bool ignore ATTRIBUTE_UNUSED)\n+{\n+  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  tree arg0, arg1;\n+\n+  if (fcode == XTENSA_BUILTIN_UMULSIDI3)\n+    {\n+      arg0 = TREE_VALUE (arglist);\n+      arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+      if ((TREE_CODE (arg0) == INTEGER_CST && TREE_CODE (arg1) == INTEGER_CST)\n+\t  || TARGET_MUL32_HIGH)\n+\treturn fold_build2 (MULT_EXPR, unsigned_intDI_type_node,\n+\t\t\t    fold_convert (unsigned_intDI_type_node, arg0),\n+\t\t\t    fold_convert (unsigned_intDI_type_node, arg1));\n+      else\n+\treturn NULL;\n+    }\n+\n+  internal_error (\"bad builtin code\");\n+  return NULL;\n+}\n+\n+\n+static rtx\n+xtensa_expand_builtin (tree exp, rtx target,\n+\t\t       rtx subtarget ATTRIBUTE_UNUSED,\n+\t\t       enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t       int ignore)\n+{\n+  tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n+  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+\n+  /* The umulsidi3 builtin is just a mechanism to avoid calling the real\n+     __umulsidi3 function when the Xtensa configuration can directly\n+     implement it.  If not, just call the function.  */\n+  if (fcode == XTENSA_BUILTIN_UMULSIDI3)\n+    return expand_call (exp, target, ignore);\n+\n+  internal_error (\"bad builtin code\");\n+  return NULL_RTX;\n+}\n+\n+\n enum reg_class\n xtensa_preferred_reload_class (rtx x, enum reg_class class, int isoutput)\n {\n@@ -2530,9 +2608,14 @@ xtensa_rtx_costs (rtx x, int code, int outer_code, int *total)\n       }\n \n     case FFS:\n+    case CTZ:\n       *total = COSTS_N_INSNS (TARGET_NSA ? 5 : 50);\n       return true;\n \n+    case CLZ:\n+      *total = COSTS_N_INSNS (TARGET_NSA ? 1 : 50);\n+      return true;\n+\n     case NOT:\n       *total = COSTS_N_INSNS ((GET_MODE (x) == DImode) ? 3 : 2);\n       return true;\n@@ -2589,8 +2672,10 @@ xtensa_rtx_costs (rtx x, int code, int outer_code, int *total)\n \tenum machine_mode xmode = GET_MODE (x);\n \tif (xmode == SFmode)\n \t  *total = COSTS_N_INSNS (TARGET_HARD_FLOAT ? 4 : 50);\n-\telse if (xmode == DFmode || xmode == DImode)\n+\telse if (xmode == DFmode)\n \t  *total = COSTS_N_INSNS (50);\n+\telse if (xmode == DImode)\n+\t  *total = COSTS_N_INSNS (TARGET_MUL32_HIGH ? 10 : 50);\n \telse if (TARGET_MUL32)\n \t  *total = COSTS_N_INSNS (4);\n \telse if (TARGET_MAC16)"}, {"sha": "0f35da52cdb178cb703bfa7eeaecde22d8b5b775", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fa8841f49c6f3949130406e27e7f7e080cb176/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fa8841f49c6f3949130406e27e7f7e080cb176/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=09fa8841f49c6f3949130406e27e7f7e080cb176", "patch": "@@ -48,6 +48,7 @@ extern unsigned xtensa_current_frame_size;\n #define TARGET_MAC16\t\tXCHAL_HAVE_MAC16\n #define TARGET_MUL16\t\tXCHAL_HAVE_MUL16\n #define TARGET_MUL32\t\tXCHAL_HAVE_MUL32\n+#define TARGET_MUL32_HIGH\tXCHAL_HAVE_MUL32_HIGH\n #define TARGET_DIV32\t\tXCHAL_HAVE_DIV32\n #define TARGET_NSA\t\tXCHAL_HAVE_NSA\n #define TARGET_MINMAX\t\tXCHAL_HAVE_MINMAX\n@@ -1069,6 +1070,9 @@ typedef struct xtensa_args\n    is done just by pretending it is already truncated.  */\n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n \n+#define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE)  ((VALUE) = 32, 1)\n+#define CTZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE)  ((VALUE) = -1, 1)\n+\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */"}, {"sha": "b08f6cbcf1ca922f3020afdfcce87ffef1a8e6db", "filename": "gcc/config/xtensa/xtensa.md", "status": "modified", "additions": 64, "deletions": 14, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fa8841f49c6f3949130406e27e7f7e080cb176/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fa8841f49c6f3949130406e27e7f7e080cb176/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.md?ref=09fa8841f49c6f3949130406e27e7f7e080cb176", "patch": "@@ -1,5 +1,6 @@\n ;; GCC machine description for Tensilica's Xtensa architecture.\n-;; Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+;; Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+;; Free Software Foundation, Inc.\n ;; Contributed by Bob Wilson (bwilson@tensilica.com) at Tensilica.\n \n ;; This file is part of GCC.\n@@ -26,14 +27,24 @@\n   (A7_REG\t\t7)\n   (A8_REG\t\t8)\n \n-  (UNSPEC_NSAU\t\t1)\n   (UNSPEC_NOP\t\t2)\n   (UNSPEC_PLT\t\t3)\n   (UNSPEC_RET_ADDR\t4)\n   (UNSPECV_SET_FP\t1)\n   (UNSPECV_ENTRY\t2)\n ])\n \n+;; This code macro allows signed and unsigned widening multiplications\n+;; to use the same template.\n+(define_code_macro any_extend [sign_extend zero_extend])\n+\n+;; <u> expands to an empty string when doing a signed operation and\n+;; \"u\" when doing an unsigned operation.\n+(define_code_attr u [(sign_extend \"\") (zero_extend \"u\")])\n+\n+;; <su> is like <u>, but the signed form expands to \"s\" rather than \"\".\n+(define_code_attr su [(sign_extend \"s\") (zero_extend \"u\")])\n+\n \f\n ;; Attributes.\n \n@@ -292,6 +303,32 @@\n \f\n ;; Multiplication.\n \n+(define_expand \"<u>mulsidi3\"\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(mult:DI (any_extend:DI (match_operand:SI 1 \"register_operand\"))\n+\t\t (any_extend:DI (match_operand:SI 2 \"register_operand\"))))]\n+  \"TARGET_MUL32_HIGH\"\n+{\n+  emit_insn (gen_mulsi3 (gen_lowpart (SImode, operands[0]),\n+\t\t\t operands[1], operands[2]));\n+  emit_insn (gen_<u>mulsi3_highpart (gen_highpart (SImode, operands[0]),\n+\t\t\t\t     operands[1], operands[2]));\n+  DONE;\n+})\n+\n+(define_insn \"<u>mulsi3_highpart\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n+\t(truncate:SI\n+\t (lshiftrt:DI\n+\t  (mult:DI (any_extend:DI (match_operand:SI 1 \"register_operand\" \"%r\"))\n+\t\t   (any_extend:DI (match_operand:SI 2 \"register_operand\" \"r\")))\n+\t  (const_int 32))))]\n+  \"TARGET_MUL32_HIGH\"\n+  \"mul<su>h\\t%0, %1, %2\"\n+  [(set_attr \"type\"\t\"mul32\")\n+   (set_attr \"mode\"\t\"SI\")\n+   (set_attr \"length\"\t\"3\")])\n+\n (define_insn \"mulsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(mult:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n@@ -541,7 +578,30 @@\n    (set_attr \"length\"\t\"3\")])\n \n \f\n-;; Find first bit.\n+;; Count leading/trailing zeros and find first bit.\n+\n+(define_insn \"clzsi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n+\t(clz:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n+  \"TARGET_NSA\"\n+  \"nsau\\t%0, %1\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")\n+   (set_attr \"length\"\t\"3\")])\n+\n+(define_expand \"ctzsi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(ctz:SI (match_operand:SI 1 \"register_operand\" \"\")))]\n+  \"TARGET_NSA\"\n+{\n+  rtx temp = gen_reg_rtx (SImode);\n+  emit_insn (gen_negsi2 (temp, operands[1]));\n+  emit_insn (gen_andsi3 (temp, temp, operands[1]));\n+  emit_insn (gen_clzsi2 (temp, temp));\n+  emit_insn (gen_negsi2 (temp, temp));\n+  emit_insn (gen_addsi3 (operands[0], temp, GEN_INT (31)));\n+  DONE;\n+})\n \n (define_expand \"ffssi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -551,22 +611,12 @@\n   rtx temp = gen_reg_rtx (SImode);\n   emit_insn (gen_negsi2 (temp, operands[1]));\n   emit_insn (gen_andsi3 (temp, temp, operands[1]));\n-  emit_insn (gen_nsau (temp, temp));\n+  emit_insn (gen_clzsi2 (temp, temp));\n   emit_insn (gen_negsi2 (temp, temp));\n   emit_insn (gen_addsi3 (operands[0], temp, GEN_INT (32)));\n   DONE;\n })\n \n-;; There is no RTL operator corresponding to NSAU.\n-(define_insn \"nsau\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")] UNSPEC_NSAU))]\n-  \"TARGET_NSA\"\n-  \"nsau\\t%0, %1\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"3\")])\n-\n \f\n ;; Negation and one's complement.\n "}, {"sha": "1325b31f0c9061fa0bffd681e218cd296eeac262", "filename": "gcc/longlong.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fa8841f49c6f3949130406e27e7f7e080cb176/gcc%2Flonglong.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fa8841f49c6f3949130406e27e7f7e080cb176/gcc%2Flonglong.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flonglong.h?ref=09fa8841f49c6f3949130406e27e7f7e080cb176", "patch": "@@ -1189,6 +1189,23 @@ UDItype __umulsidi3 (USItype, USItype);\n   } while (0)\n #endif /* __vax__ */\n \n+#if defined (__xtensa__) && W_TYPE_SIZE == 32\n+/* This code is not Xtensa-configuration-specific, so rely on the compiler\n+   to expand builtin functions depending on what configuration features\n+   are available.  This avoids library calls when the operation can be\n+   performed in-line.  */\n+#define umul_ppmm(w1, w0, u, v)\t\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    DWunion __w;\t\t\t\t\t\t\t\\\n+    __w.ll = __builtin_umulsidi3 (u, v);\t\t\t\t\\\n+    w1 = __w.s.high;\t\t\t\t\t\t\t\\\n+    w0 = __w.s.low;\t\t\t\t\t\t\t\\\n+  } while (0)\n+#define __umulsidi3(u, v)\t\t__builtin_umulsidi3 (u, v)\n+#define count_leading_zeros(COUNT, X)\t((COUNT) = __builtin_clz (X))\n+#define count_trailing_zeros(COUNT, X)\t((COUNT) = __builtin_ctz (X))\n+#endif /* __xtensa__ */\n+\n #if defined (__z8000__) && W_TYPE_SIZE == 16\n #define add_ssaaaa(sh, sl, ah, al, bh, bl) \\\n   __asm__ (\"add\t%H1,%H5\\n\\tadc\t%H0,%H3\"\t\t\t\t\\"}]}