{"sha": "a91b983325449c68f2f497a1662a4b85c47ce1a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkxYjk4MzMyNTQ0OWM2OGYyZjQ5N2ExNjYyYTRiODVjNDdjZTFhOQ==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2020-03-13T17:05:13Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-11T09:53:35Z"}, "message": "[Ada] Put_Image attribute\n\n2020-06-11  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* exp_put_image.adb (Build_Record_Put_Image_Procedure): Remove\n\tspecial processing of protected types, because those are handled\n\tby Build_Protected_Put_Image_Call.\n\t(Enable_Put_Image): Use the switch -gnatd_z to control enabling\n\tof Put_Image. Disable Put_Image for types in Remote_Types\n\tpackages.\n\t* debug.adb: Document -gnatd_z switch.\n\t* exp_imgv.adb, libgnat/a-stteou.ads, opt.ads: Minor cleanups.", "tree": {"sha": "5211bd7dec59108c125e1966667539802bc663e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5211bd7dec59108c125e1966667539802bc663e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a91b983325449c68f2f497a1662a4b85c47ce1a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a91b983325449c68f2f497a1662a4b85c47ce1a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a91b983325449c68f2f497a1662a4b85c47ce1a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a91b983325449c68f2f497a1662a4b85c47ce1a9/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99cab17e02c2b34c4a6f5b54f5219b5fed4c7767", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99cab17e02c2b34c4a6f5b54f5219b5fed4c7767", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99cab17e02c2b34c4a6f5b54f5219b5fed4c7767"}], "stats": {"total": 52, "additions": 30, "deletions": 22}, "files": [{"sha": "0c86d96dddd1fe0302831dcd09519c9638aec412", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a91b983325449c68f2f497a1662a4b85c47ce1a9/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a91b983325449c68f2f497a1662a4b85c47ce1a9/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=a91b983325449c68f2f497a1662a4b85c47ce1a9", "patch": "@@ -170,7 +170,7 @@ package body Debug is\n    --  d_w\n    --  d_x\n    --  d_y\n-   --  d_z\n+   --  d_z  Enable Put_Image\n \n    --  d_A  Stop generation of ALI file\n    --  d_B\n@@ -993,6 +993,9 @@ package body Debug is\n    --       a call to routine Ada.Synchronous_Task_Control.Suspend_Until_True\n    --       or Ada.Synchronous_Barriers.Wait_For_Release.\n \n+   --  d_z  The Put_Image attribute is a work in progress, and is disabled by\n+   --       default. This enables it.\n+\n    --  d_A  Do not generate ALI files by setting Opt.Disable_ALI_File.\n \n    --  d_F  The compiler encodes the full path from an invocation construct to"}, {"sha": "d7be8e44a401a7b3982b6fc5bbe758ea0c97f169", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a91b983325449c68f2f497a1662a4b85c47ce1a9/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a91b983325449c68f2f497a1662a4b85c47ce1a9/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=a91b983325449c68f2f497a1662a4b85c47ce1a9", "patch": "@@ -747,7 +747,7 @@ package body Exp_Imgv is\n \n    --    btyp (Value_xx (X))\n \n-   --  where btyp is he base type of the prefix\n+   --  where btyp is the base type of the prefix\n \n    --    For types whose root type is Character\n    --      xx = Character"}, {"sha": "3a6cbc1f6675f7297c8e08c8587ef7d0cb3ff34f", "filename": "gcc/ada/exp_put_image.adb", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a91b983325449c68f2f497a1662a4b85c47ce1a9/gcc%2Fada%2Fexp_put_image.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a91b983325449c68f2f497a1662a4b85c47ce1a9/gcc%2Fada%2Fexp_put_image.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_put_image.adb?ref=a91b983325449c68f2f497a1662a4b85c47ce1a9", "patch": "@@ -24,6 +24,7 @@\n ------------------------------------------------------------------------------\n \n with Atree;    use Atree;\n+with Debug;    use Debug;\n with Einfo;    use Einfo;\n with Exp_Tss;  use Exp_Tss;\n with Lib;      use Lib;\n@@ -323,9 +324,14 @@ package body Exp_Put_Image is\n          --\n          --     Put_Wide_Wide_String (Sink, U_Type'Wide_Wide_Image (Item));\n          --\n-         --  This is a bit of a cheat; we should probably do it the other way\n-         --  around (define '[[Wide_]Wide_]Image in terms of 'Put_Image). But\n-         --  this is expedient for now. We can't do this:\n+         --  It would be more elegant to do it the other way around (define\n+         --  '[[Wide_]Wide_]Image in terms of 'Put_Image). But this is easier\n+         --  to implement, because we already have support for\n+         --  'Wide_Wide_Image. Furthermore, we don't want to remove the\n+         --  existing support for '[[Wide_]Wide_]Image, because we don't\n+         --  currently plan to support 'Put_Image on restricted runtimes.\n+\n+         --  We can't do this:\n          --\n          --     Put_UTF_8 (Sink, U_Type'Image (Item));\n          --\n@@ -689,22 +695,12 @@ package body Exp_Put_Image is\n \n       Stms : constant List_Id := New_List;\n       Rdef : Node_Id;\n-      Typt : Entity_Id;\n-      Type_Decl : Node_Id;\n+      Type_Decl : constant Node_Id :=\n+        Declaration_Node (Base_Type (Underlying_Type (Typ)));\n \n    --  Start of processing for Build_Record_Put_Image_Procedure\n \n    begin\n-      --  For the protected type case, use corresponding record\n-\n-      if Is_Protected_Type (Typ) then\n-         Typt := Corresponding_Record_Type (Typ);\n-      else\n-         Typt := Typ;\n-      end if;\n-\n-      Type_Decl := Declaration_Node (Base_Type (Underlying_Type (Typt)));\n-\n       Append_To (Stms,\n         Make_Procedure_Call_Statement (Loc,\n           Name => New_Occurrence_Of (RTE (RE_Record_Before), Loc),\n@@ -813,7 +809,7 @@ package body Exp_Put_Image is\n \n    function Enable_Put_Image (T : Entity_Id) return Boolean is\n    begin\n-      if True then -- ????True to disable for all types.\n+      if not Debug_Flag_Underscore_Z then -- ????True to disable for all types\n          return False;\n       end if;\n \n@@ -832,6 +828,15 @@ package body Exp_Put_Image is\n       --  scalar types are expanded inline. We certainly want to be able to use\n       --  Integer'Put_Image, for example.\n \n+      --  ???Work around a bug: Put_Image does not work for Remote_Types.\n+      --  We check the containing package, rather than the type itself, because\n+      --  we want to include types in the private part of a Remote_Types\n+      --  package.\n+\n+      if Is_Remote_Types (Scope (T)) then\n+         return False;\n+      end if;\n+\n       --  ???Disable Put_Image on type Sink declared in\n       --  Ada.Strings.Text_Output. Note that we can't call Is_RTU on\n       --  Ada_Strings_Text_Output, because it's not known yet (we might be"}, {"sha": "8aaee461378d62c254251838559f5ca58470a15d", "filename": "gcc/ada/libgnat/a-stteou.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a91b983325449c68f2f497a1662a4b85c47ce1a9/gcc%2Fada%2Flibgnat%2Fa-stteou.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a91b983325449c68f2f497a1662a4b85c47ce1a9/gcc%2Fada%2Flibgnat%2Fa-stteou.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stteou.ads?ref=a91b983325449c68f2f497a1662a4b85c47ce1a9", "patch": "@@ -133,7 +133,7 @@ package Ada.Strings.Text_Output is\n          (UTF_Encoding.Wide_Wide_Strings.Decode (UTF_8_Lines)) = UTF_8_Lines;\n \n    subtype UTF_8 is UTF_8_Lines with\n-     Predicate => (for all C of UTF_8 => C /= NL);\n+     Predicate => (for all UTF_8_Char of UTF_8 => UTF_8_Char /= NL);\n \n    Default_Indent_Amount : constant Natural := 4;\n "}, {"sha": "b08df8d51620aa46fbc4e63d6465c433164b2eeb", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a91b983325449c68f2f497a1662a4b85c47ce1a9/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a91b983325449c68f2f497a1662a4b85c47ce1a9/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=a91b983325449c68f2f497a1662a4b85c47ce1a9", "patch": "@@ -373,9 +373,9 @@ package Opt is\n    Configurable_Run_Time_Mode : Boolean := False;\n    --  GNAT, GNATBIND\n    --  Set True if the compiler is operating in configurable run-time mode.\n-   --  This happens if the flag Targparm.Configurable_Run_TimeMode_On_Target\n-   --  is set True, or if pragma No_Run_Time is used. See the spec of Rtsfind\n-   --  for details on the handling of the latter pragma.\n+   --  This happens if the flag Targparm.Configurable_Run_Time_On_Target is\n+   --  True, or if pragma No_Run_Time is used. See the spec of Rtsfind for\n+   --  details on the handling of the latter pragma.\n \n    Constant_Condition_Warnings : Boolean := False;\n    --  GNAT"}]}