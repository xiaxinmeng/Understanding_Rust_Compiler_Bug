{"sha": "340baef702ea62dfcdc8003ff9c4f4c2bd8322fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQwYmFlZjcwMmVhNjJkZmNkYzgwMDNmZjljNGY0YzJiZDgzMjJmYg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2013-11-29T21:24:14Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2013-11-29T21:24:14Z"}, "message": "re PR c/42262 (internal compiler error: in set_designator, at c-typeck.c:5771)\n\n\tPR c/42262\nc:\n\t* c-typeck.c (process_init_element): Do not treat a string as\n\tinitializing a whole array when used with a designator for an\n\tindividual element.\n\ntestsuite:\n\t* gcc.dg/c99-init-5.c, gcc.dg/c99-init-6.c: New tests.\n\nFrom-SVN: r205543", "tree": {"sha": "7572bf13617b1296fdbc55a439078a888540dc4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7572bf13617b1296fdbc55a439078a888540dc4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/340baef702ea62dfcdc8003ff9c4f4c2bd8322fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/340baef702ea62dfcdc8003ff9c4f4c2bd8322fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/340baef702ea62dfcdc8003ff9c4f4c2bd8322fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/340baef702ea62dfcdc8003ff9c4f4c2bd8322fb/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3163a5cab5300b83bc261da596a2301431505909", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3163a5cab5300b83bc261da596a2301431505909", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3163a5cab5300b83bc261da596a2301431505909"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "a106e64d094a03d79b76adbb392ecf3006e86b7c", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/340baef702ea62dfcdc8003ff9c4f4c2bd8322fb/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/340baef702ea62dfcdc8003ff9c4f4c2bd8322fb/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=340baef702ea62dfcdc8003ff9c4f4c2bd8322fb", "patch": "@@ -1,3 +1,10 @@\n+2013-11-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/42262\n+\t* c-typeck.c (process_init_element): Do not treat a string as\n+\tinitializing a whole array when used with a designator for an\n+\tindividual element.\n+\n 2013-11-29  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/57574"}, {"sha": "4d701045309a2e24adde0c41234a408608040e16", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/340baef702ea62dfcdc8003ff9c4f4c2bd8322fb/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/340baef702ea62dfcdc8003ff9c4f4c2bd8322fb/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=340baef702ea62dfcdc8003ff9c4f4c2bd8322fb", "patch": "@@ -8504,6 +8504,7 @@ process_init_element (struct c_expr value, bool implicit,\n   tree orig_value = value.value;\n   int string_flag = orig_value != 0 && TREE_CODE (orig_value) == STRING_CST;\n   bool strict_string = value.original_code == STRING_CST;\n+  bool was_designated = designator_depth != 0;\n \n   designator_depth = 0;\n   designator_erroneous = 0;\n@@ -8512,6 +8513,7 @@ process_init_element (struct c_expr value, bool implicit,\n      char x[] = {\"foo\"}; */\n   if (string_flag\n       && constructor_type\n+      && !was_designated\n       && TREE_CODE (constructor_type) == ARRAY_TYPE\n       && INTEGRAL_TYPE_P (TREE_TYPE (constructor_type))\n       && integer_zerop (constructor_unfilled_index))"}, {"sha": "f3f610276331468cab74f12e97980abbdb7bef40", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/340baef702ea62dfcdc8003ff9c4f4c2bd8322fb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/340baef702ea62dfcdc8003ff9c4f4c2bd8322fb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=340baef702ea62dfcdc8003ff9c4f4c2bd8322fb", "patch": "@@ -1,3 +1,8 @@\n+2013-11-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/42262\n+\t* gcc.dg/c99-init-5.c, gcc.dg/c99-init-6.c: New tests.\n+\n 2013-11-29  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* lib/asan-dg.exp (asan_link_flags): Properly add path to"}, {"sha": "17bacd90c6a6c5dd9c0e211ff4df332395495123", "filename": "gcc/testsuite/gcc.dg/c99-init-5.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/340baef702ea62dfcdc8003ff9c4f4c2bd8322fb/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-init-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/340baef702ea62dfcdc8003ff9c4f4c2bd8322fb/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-init-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-init-5.c?ref=340baef702ea62dfcdc8003ff9c4f4c2bd8322fb", "patch": "@@ -0,0 +1,9 @@\n+/* Test for designated initializers: string constants used with\n+   designator in character array should not initialize the array as a\n+   whole.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+char g[] = { [7] = \"abcd\" }; /* { dg-error \"initial\" } */\n+char h[10][10] = { [1][1] = \"abcd\" }; /* { dg-error \"initial\" } */\n+char i[10][10] = { [1] = \"abcd\" };"}, {"sha": "6328f82676ff3505f000c8a6a56acd2fa7b91a70", "filename": "gcc/testsuite/gcc.dg/c99-init-6.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/340baef702ea62dfcdc8003ff9c4f4c2bd8322fb/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-init-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/340baef702ea62dfcdc8003ff9c4f4c2bd8322fb/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-init-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-init-6.c?ref=340baef702ea62dfcdc8003ff9c4f4c2bd8322fb", "patch": "@@ -0,0 +1,6 @@\n+/* Test for designated initializers: invalid uses of string constants\n+   should not ICE.  PR 42262.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+int a[] = { [0 ... 1] = \"\", [0] = \"\" }; /* { dg-error \"initial\" } */"}]}