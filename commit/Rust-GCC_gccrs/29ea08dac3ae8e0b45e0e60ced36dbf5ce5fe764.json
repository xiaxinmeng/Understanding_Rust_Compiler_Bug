{"sha": "29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjllYTA4ZGFjM2FlOGUwYjQ1ZTBlNjBjZWQzNmRiZjVjZTVmZTc2NA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-04-25T08:32:21Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-04-25T08:32:21Z"}, "message": "re PR fortran/31668 (%VAL rejected for PROC_MODULE and PROC_INTERNAL procedures)\n\nfortran/\n2007-04-25  Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/31668\n\t* error.c (error_print): Fix %% support.\n\t* intrinsic.c (sort_actual): Improve error message.\n\t* resolve.c (resolve_actual_arglist): Allow %VAL for\n\tinterfaces defined in the module declaration part.\n\ntestsuite/\n2007-04-25  Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/31668\n\t* gfortran.dg/c_by_val_2.f90: Add rejection test of %VAL with\n\tstatement functions.\n\t* gfortran.dg/c_by_val_5.f90: New test.\n\nFrom-SVN: r124147", "tree": {"sha": "7b065d6eb67f726c20b486e1a68e1f05dfb37353", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b065d6eb67f726c20b486e1a68e1f05dfb37353"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764/comments", "author": null, "committer": null, "parents": [{"sha": "bef4d1848d28adf3da938a0857b8132fe3ea50b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bef4d1848d28adf3da938a0857b8132fe3ea50b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bef4d1848d28adf3da938a0857b8132fe3ea50b5"}], "stats": {"total": 129, "additions": 111, "deletions": 18}, "files": [{"sha": "32affbee2135021ac727ceaf2c36da06c70dcf4b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764", "patch": "@@ -1,3 +1,11 @@\n+2007-04-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/31668\n+\t* error.c (error_print): Fix %% support.\n+\t* intrinsic.c (sort_actual): Improve error message.\n+\t* resolve.c (resolve_actual_arglist): Allow %VAL for\n+\tinterfaces defined in the module declaration part.\n+\n 2007-04-25  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR libfortran/31299"}, {"sha": "241c6a41bfc6125bd32239e8dff6a4efb1bb527b", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764", "patch": "@@ -414,7 +414,10 @@ error_print (const char *type, const char *format0, va_list argp)\n \tcontinue;\n \n       if (*format == '%')\n-\tcontinue;\n+\t{\n+\t  format++;\n+\t  continue;\n+\t}\n \n       if (ISDIGIT (*format))\n \t{"}, {"sha": "d77cf5502f9dfd63261bf0c13a3f948ff75bea58", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764", "patch": "@@ -2861,8 +2861,8 @@ sort_actual (const char *name, gfc_actual_arglist **ap,\n       if (f == NULL)\n \t{\n \t  if (a->name[0] == '%')\n-\t    gfc_error (\"Argument list function at %L is not allowed in this \"\n-\t\t       \"context\", where);\n+\t    gfc_error (\"The argument list functions %%VAL, %%LOC or %%REF \"\n+\t\t       \"are not allowed in this context at %L\", where);\n \t  else\n \t    gfc_error (\"Can't find keyword named '%s' in call to '%s' at %L\",\n \t\t       a->name, name, where);"}, {"sha": "55f1390d03b3ff9f07ab64bced8d4708b135b2e6", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764", "patch": "@@ -1040,7 +1040,8 @@ resolve_actual_arglist (gfc_actual_arglist *arg, procedure_type ptype)\n \t\t intrinsic.c.  */\n \t      if (ptype != PROC_UNKNOWN\n \t\t  && ptype != PROC_DUMMY\n-\t\t  && ptype != PROC_EXTERNAL)\n+\t\t  && ptype != PROC_EXTERNAL\n+\t\t  && ptype != PROC_MODULE)\n \t\t{\n \t\t  gfc_error (\"By-value argument at %L is not allowed \"\n \t\t\t     \"in this context\", &e->where);"}, {"sha": "072246348d684238599b2c1dd28a4463f066c86b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764", "patch": "@@ -1,3 +1,10 @@\n+2007-04-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/31668\n+\t* gfortran.dg/c_by_val_2.f90: Add rejection test of %VAL with\n+\tstatement functions.\n+\t* gfortran.dg/c_by_val_5.f90: New test.\n+\n 2007-04-25  Wolfgang Gellerich  <gellerich@de.ibm.com>\n \n \t* gfortran.dg/equiv_6.f90 (set_arrays): Replaced subroutine\n@@ -23,19 +30,19 @@\n \n 2007-04-24  Douglas Gregor  <doug.gregor@gmail.com>\n \n-       * g++.old-deja/g++.pt/defarg6.C: Only run with\n-       -std=gnu++98.\n-       * g++.old-deja/g++.pt/ucnid-1.C: Ditto.\n-       * g++.dg/cpp0x/variadic61.C: Ditto.\n-       * g++.dg/cpp0x/warn_cxx0x.C: Ditto.\n-       * g++.dg/cpp0x/variadic62.C: Ditto.\n-       * g++.dg/template/meminit1.C: Ditto.\n-       * g++.dg/template/operator7.C: Ditto.\n-       * g++.dg/template/static15.C: Ditto.\n-       * g++.dg/template/invalid1.C: Ditto.\n-       * g++.dg/template/shift1.C: Ditto.\n-       * g++.dg/template/error10.C: Ditto.\n-\t\n+\t* g++.old-deja/g++.pt/defarg6.C: Only run with\n+\t-std=gnu++98.\n+\t* g++.old-deja/g++.pt/ucnid-1.C: Ditto.\n+\t* g++.dg/cpp0x/variadic61.C: Ditto.\n+\t* g++.dg/cpp0x/warn_cxx0x.C: Ditto.\n+\t* g++.dg/cpp0x/variadic62.C: Ditto.\n+\t* g++.dg/template/meminit1.C: Ditto.\n+\t* g++.dg/template/operator7.C: Ditto.\n+\t* g++.dg/template/static15.C: Ditto.\n+\t* g++.dg/template/invalid1.C: Ditto.\n+\t* g++.dg/template/shift1.C: Ditto.\n+\t* g++.dg/template/error10.C: Ditto.\n+\n 2007-04-24  Simon Martin  <simartin@users.sourceforge.net>\n \n \tPR diagnostic/25923\n@@ -134,7 +141,7 @@\n \n 2007-04-22  Revital Eres  <eres@il.ibm.com>\n \n-        * gcc.dg/var-expand2.c: New test.\n+\t* gcc.dg/var-expand2.c: New test.\n \n 2007-04-22  Revital Eres  <eres@il.ibm.com>\n "}, {"sha": "5d638cbdaa041073490c49510a979982bd2cd6b8", "filename": "gcc/testsuite/gfortran.dg/c_by_val_2.f90", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_by_val_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_by_val_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_by_val_2.f90?ref=29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764", "patch": "@@ -9,6 +9,11 @@ program c_by_val_2\n   end type mytype\n   type(mytype)  :: z\n   character(8)  :: c = \"blooey\"\n+  real :: stmfun, x\n+  stmfun(x)=x**2\n+\n+  x = 5\n+  print *, stmfun(%VAL(x))   ! { dg-error \"not allowed in this context\" }\n   print *, sin (%VAL(2.0))   ! { dg-error \"not allowed in this context\" }\n   print *, foo (%VAL(1.0))   ! { dg-error \"not allowed in this context\" }\n   call  foobar (%VAL(0.5))   ! { dg-error \"not allowed in this context\" }"}, {"sha": "90ef299aa920bbf1d6ffb485947bf88bcd4ebe5b", "filename": "gcc/testsuite/gfortran.dg/c_by_val_5.f90", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_by_val_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_by_val_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_by_val_5.f90?ref=29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764", "patch": "@@ -0,0 +1,69 @@\n+! { dg-do run }\n+! Overwrite -pedantic setting:\n+! { dg-options \"-Wall\" }\n+!\n+! Tests the fix for PR31668, in which %VAL was rejected for\n+! module and internal procedures.\n+! \n+\n+subroutine bmp_write(nx)\n+  implicit none\n+  integer, value :: nx\n+  if(nx /= 10) call abort()\n+  nx = 11\n+  if(nx /= 11) call abort()\n+end subroutine bmp_write\n+\n+module x\n+ implicit none\n+ ! The following interface does in principle\n+ ! not match the procedure (missing VALUE attribute)\n+ ! However, this occures in real-world code calling\n+ ! C routines where an interface is better than\n+ ! \"external\" only.\n+ interface\n+   subroutine bmp_write(nx)\n+     integer :: nx\n+   end subroutine bmp_write\n+ end interface\n+contains\n+   SUBROUTINE Grid2BMP(NX)\n+     INTEGER, INTENT(IN) :: NX\n+     if(nx /= 10) call abort()\n+     call bmp_write(%val(nx))\n+     if(nx /= 10) call abort()\n+   END SUBROUTINE Grid2BMP\n+END module x\n+\n+! The following test is possible and\n+! accepted by other compilers, but\n+! does not make much sense.\n+! Either one uses VALUE then %VAL is\n+! not needed or the function will give\n+! wrong results.\n+!\n+!subroutine test()\n+!    implicit none\n+!    integer :: n\n+!    n = 5\n+!    if(n /= 5) call abort()\n+!    call test2(%VAL(n))\n+!    if(n /= 5) call abort()\n+!  contains\n+!    subroutine test2(a)\n+!      integer, value :: a\n+!      if(a /= 5) call abort()\n+!      a = 2\n+!      if(a /= 2) call abort()\n+!    end subroutine test2\n+!end subroutine test\n+\n+program main\n+  use x\n+  implicit none\n+!  external test\n+  call Grid2BMP(10)\n+!  call test()\n+end program main\n+\n+! { dg-final { cleanup-modules \"x\" } }"}]}