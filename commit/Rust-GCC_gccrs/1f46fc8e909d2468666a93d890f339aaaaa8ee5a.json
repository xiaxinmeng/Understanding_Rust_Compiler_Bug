{"sha": "1f46fc8e909d2468666a93d890f339aaaaa8ee5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY0NmZjOGU5MDlkMjQ2ODY2NmE5M2Q4OTBmMzM5YWFhYWE4ZWU1YQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-07-04T02:39:02Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-07-04T02:39:02Z"}, "message": "localefwd.h: Format.\n\n\n2001-07-03  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/localefwd.h: Format.\n\t* include/bits/locale_facts.tcc (locale::combine): Adjust.\n\t* src/locale.cc (locale::locale::(_Impl)): Don't call\n\t_M_add_reference.\n\t(locale::facet::_M_remove_reference): Simplify.\n\t* src/globals.cc (locale_impl_c): New. Format.\n\t(locale_c): New.\n\t* src/ios.cc (ios_base::Init::Init): Increment _S_ios_base_init last.\n\nFrom-SVN: r43747", "tree": {"sha": "f612347829a52ea680a008783a91a7871961466f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f612347829a52ea680a008783a91a7871961466f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f46fc8e909d2468666a93d890f339aaaaa8ee5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f46fc8e909d2468666a93d890f339aaaaa8ee5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f46fc8e909d2468666a93d890f339aaaaa8ee5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f46fc8e909d2468666a93d890f339aaaaa8ee5a/comments", "author": null, "committer": null, "parents": [{"sha": "ec97333e0964727112d5304b07980b9e0cdd94d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec97333e0964727112d5304b07980b9e0cdd94d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec97333e0964727112d5304b07980b9e0cdd94d4"}], "stats": {"total": 124, "additions": 70, "deletions": 54}, "files": [{"sha": "c0e29494450e49e9267a0a03bb3f9ebeefc7e080", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f46fc8e909d2468666a93d890f339aaaaa8ee5a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f46fc8e909d2468666a93d890f339aaaaa8ee5a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1f46fc8e909d2468666a93d890f339aaaaa8ee5a", "patch": "@@ -1,3 +1,14 @@\n+2001-07-03  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/localefwd.h: Format.\t\n+\t* include/bits/locale_facts.tcc (locale::combine): Adjust.\n+\t* src/locale.cc (locale::locale::(_Impl)): Don't call\n+\t_M_add_reference.\n+\t(locale::facet::_M_remove_reference): Simplify.\n+\t* src/globals.cc (locale_impl_c): New. Format.\n+\t(locale_c): New.\n+\t* src/ios.cc (ios_base::Init::Init): Increment _S_ios_base_init last.\n+\n 2001-07-02  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* acinclude.m4 (GLIBCPP_ENABLE_THREADS): Protect variable from shell"}, {"sha": "982914fb5f46e0955f5ad001835c529fd9ef63ed", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f46fc8e909d2468666a93d890f339aaaaa8ee5a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f46fc8e909d2468666a93d890f339aaaaa8ee5a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=1f46fc8e909d2468666a93d890f339aaaaa8ee5a", "patch": "@@ -48,7 +48,7 @@ namespace std\n     locale\n     locale::combine(const locale& __other)\n     {\n-      _Impl* __tmp = new _Impl(*_M_impl, 0);\n+      _Impl* __tmp = new _Impl(*_M_impl, 1);\n       __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);\n       return locale(__tmp);\n     }"}, {"sha": "b24ff0736064ab617370770f3007143b615c1fd9", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f46fc8e909d2468666a93d890f339aaaaa8ee5a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f46fc8e909d2468666a93d890f339aaaaa8ee5a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=1f46fc8e909d2468666a93d890f339aaaaa8ee5a", "patch": "@@ -451,9 +451,4 @@ namespace std\n     has_facet(const locale& __loc) throw();\n } // namespace std\n \n-#endif\t/* _CPP_BITS_LOCCORE_H */\n-\n-// Local Variables:\n-// mode:c++\n-// End:\n-\n+#endif"}, {"sha": "d7a733e5daa62ef7ddda8d8bb644eff1c717f758", "filename": "libstdc++-v3/src/globals.cc", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f46fc8e909d2468666a93d890f339aaaaa8ee5a/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f46fc8e909d2468666a93d890f339aaaaa8ee5a/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc?ref=1f46fc8e909d2468666a93d890f339aaaaa8ee5a", "patch": "@@ -44,6 +44,17 @@\n // allocate the actual file buffers in this file.\n namespace std \n {\n+  // Standard \"C\" locale.\n+  typedef char fake_locale_Impl[sizeof(locale::_Impl)]\n+  __attribute__ ((aligned(__alignof__(locale::_Impl))));\n+  fake_locale_Impl locale_impl_c;\n+\n+  typedef char fake_locale[sizeof(locale)]\n+  __attribute__ ((aligned(__alignof__(locale))));\n+  fake_locale locale_c;\n+  \n+\n+  // Standard stream objects.\n   typedef char fake_istream[sizeof(istream)]\n   __attribute__ ((aligned(__alignof__(istream))));\n   typedef char fake_ostream[sizeof(ostream)] \n@@ -76,30 +87,28 @@ namespace std\n   fake_wfilebuf buf_wcerr;\n #endif\n \n-// Globals for once-only runtime initialization of mutex objects.  This\n-// allows static initialization of these objects on systems that need a\n-// function call to initialize a mutex.  For example, see stl_threads.h.\n+\n+  // Globals for once-only runtime initialization of mutex objects.  This\n+  // allows static initialization of these objects on systems that need a\n+  // function call to initialize a mutex.  For example, see stl_threads.h.\n #if __GTHREADS\n #ifdef __GTHREAD_MUTEX_INIT\n-// This path is not needed since static initialization of mutexs works\n-// on this platform.\n+  // This path is not needed since static initialization of mutexs works\n+  // on this platform.\n #elif defined(__GTHREAD_MUTEX_INIT_FUNCTION)\n-__gthread_once_t _GLIBCPP_once = __GTHREAD_ONCE_INIT;\n-__gthread_mutex_t _GLIBCPP_mutex;\n-__gthread_mutex_t *_GLIBCPP_mutex_address;\n+  __gthread_once_t _GLIBCPP_once = __GTHREAD_ONCE_INIT;\n+  __gthread_mutex_t _GLIBCPP_mutex;\n+  __gthread_mutex_t *_GLIBCPP_mutex_address;\n+  \n+  // Once-only initializer function for _GLIBCPP_mutex.  \n+  void\n+  _GLIBCPP_mutex_init ()\n+  { __GTHREAD_MUTEX_INIT_FUNCTION (&_GLIBCPP_mutex); }\n \n-// Once-only initializer function for _GLIBCPP_mutex.  \n-void\n-_GLIBCPP_mutex_init ()\n-{\n-  __GTHREAD_MUTEX_INIT_FUNCTION (&_GLIBCPP_mutex);\n-}\n-// Once-only initializer function for _GLIBCPP_mutex_address.  \n-void\n-_GLIBCPP_mutex_address_init ()\n-{\n-  __GTHREAD_MUTEX_INIT_FUNCTION (_GLIBCPP_mutex_address);\n-}\n-#endif\n+  // Once-only initializer function for _GLIBCPP_mutex_address.  \n+  void\n+  _GLIBCPP_mutex_address_init ()\n+  { __GTHREAD_MUTEX_INIT_FUNCTION (_GLIBCPP_mutex_address); }\n #endif\n+#endif // __GTHREADS\n }"}, {"sha": "faa11fbeea16d575438908bb21df48b8371490d2", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f46fc8e909d2468666a93d890f339aaaaa8ee5a/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f46fc8e909d2468666a93d890f339aaaaa8ee5a/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=1f46fc8e909d2468666a93d890f339aaaaa8ee5a", "patch": "@@ -205,12 +205,13 @@ namespace std\n \n   ios_base::Init::Init()\n   {\n-    if (++_S_ios_base_init == 1)\n+    if (_S_ios_base_init == 0)\n       {\n \t// Standard streams default to synced with \"C\" operations.\n \tios_base::Init::_S_synced_with_stdio = true;\n \t_S_ios_create(ios_base::Init::_S_synced_with_stdio);\n       }\n+    ++_S_ios_base_init;\n   }\n \n   ios_base::Init::~Init()"}, {"sha": "0d4020065a25f516645b8955eded7c77fb73ec1e", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f46fc8e909d2468666a93d890f339aaaaa8ee5a/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f46fc8e909d2468666a93d890f339aaaaa8ee5a/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=1f46fc8e909d2468666a93d890f339aaaaa8ee5a", "patch": "@@ -43,6 +43,10 @@\n \n namespace std \n {\n+  // Defined in globals.cc.\n+  extern locale::_Impl locale_impl_c;\n+  extern locale locale_c;\n+\n   // Definitions for static const data members of locale.\n   const locale::category \tlocale::none;\n   const locale::category \tlocale::ctype;\n@@ -362,10 +366,10 @@ namespace std\n   locale::locale(const locale& __other) throw()\n   { (_M_impl = __other._M_impl)->_M_add_reference(); }\n \n-  // This is used to initialize global and classic locales.\n-  locale::locale(_Impl* __ip) throw()\n-  : _M_impl(__ip)\n-  { __ip->_M_add_reference(); }\n+  // This is used to initialize global and classic locales, and\n+  // assumes that the _Impl objects are constructed correctly.\n+  locale::locale(_Impl* __ip) throw() : _M_impl(__ip)\n+  { }\n \n   locale::locale(const char* __s)\n   {\n@@ -415,13 +419,18 @@ namespace std\n   {\n     // XXX MT\n     _S_initialize();\n-    locale __old(_S_global);\n+    _Impl* __old = _S_global;\n     __other._M_impl->_M_add_reference();\n-    _S_global->_M_remove_reference();\n     _S_global = __other._M_impl; \n     if (_S_global->_M_check_same_name() && _S_global->_M_names[0] != \"*\")\n       setlocale(LC_ALL, __other.name().c_str());\n-    return __old;\n+\n+    // Reference count sanity check: one reference removed for the\n+    // subsition of __other locale, one added by return-by-value. Net\n+    // difference: zero. When the returned locale object's destrutor\n+    // is called, then the reference count is decremented and possibly\n+    // destroyed.\n+    return locale(__old);\n   }\n \n   string\n@@ -446,34 +455,28 @@ namespace std\n   locale const&\n   locale::classic()\n   {\n-    static locale* __classic_locale;\n     // XXX MT\n     if (!_S_classic)\n       {\n \ttry \n \t  {\n \t    // 26 Standard facets, 2 references.\n \t    // One reference for _M_classic, one for _M_global\n-\t    _S_classic = new _Impl(\"C\", 2);\n+\t    _S_classic = new (&locale_impl_c) _Impl(\"C\", 2);\n \t    _S_global = _S_classic; \t    \n-\n-\t    // Finesse static init order hassles\n-\t    __classic_locale = new locale(_S_classic);\n+\t    new (&locale_c) locale(_S_classic);\n \t  }\n \tcatch(...) \n \t  {\n-\t    delete __classic_locale;\n+\t    // Just call destructor, so that locale_impl_c's memory is\n+\t    // not deallocated via a call to delete.\n \t    if (_S_classic)\n-\t      {\n-\t\t_S_classic->_M_remove_reference();\n-\t\t_S_global->_M_remove_reference();\n-\t      }\n+\t      _S_classic->~_Impl();\n \t    _S_classic = _S_global = 0;\n-\t    // XXX MT\n \t    __throw_exception_again;\n \t  }\n       }\n-    return *__classic_locale;\n+    return locale_c;\n   }\n \n   locale::category\n@@ -518,8 +521,7 @@ namespace std\n   }\n \n   locale::facet::\n-  facet(size_t __refs) throw()\n-  : _M_references(__refs) \n+  facet(size_t __refs) throw() : _M_references(__refs) \n   { }\n \n   void  \n@@ -531,12 +533,10 @@ namespace std\n   locale::facet::\n   _M_remove_reference() throw()\n   {\n-    if (_M_references)\n-      --_M_references;\n-    else\n+    if (_M_references-- == 0)\n       {\n         try \n-\t  { delete this; }  // XXX MT\n+\t  { delete this; }  \n \tcatch (...) \n \t  { }\n       }"}]}