{"sha": "eabec4d3c56af2e8959c8329b5257a81c606da60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFiZWM0ZDNjNTZhZjJlODk1OWM4MzI5YjUyNTdhODFjNjA2ZGE2MA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2018-11-24T06:51:26Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-11-24T06:51:26Z"}, "message": "re PR rtl-optimization/87468 (ice \"wrong amount of branch edges after conditional jump in bb\")\n\n\tPR rtl-optimization/87468\n\t* tree-ssa-threadupdate.c (create_block_for_threading): Clear\n\tEDGE_IGNORE on all outgoing edges of the duplicate block.\n\nFrom-SVN: r266426", "tree": {"sha": "7b9dd79c18254c90d7d3c7966dbf1844935513fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b9dd79c18254c90d7d3c7966dbf1844935513fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eabec4d3c56af2e8959c8329b5257a81c606da60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eabec4d3c56af2e8959c8329b5257a81c606da60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eabec4d3c56af2e8959c8329b5257a81c606da60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eabec4d3c56af2e8959c8329b5257a81c606da60/comments", "author": null, "committer": null, "parents": [{"sha": "bdcd6cae1200660b26fb63ac50affab559c38213", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdcd6cae1200660b26fb63ac50affab559c38213", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdcd6cae1200660b26fb63ac50affab559c38213"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "f9a12f88a609617e09b668ae816eed98b09e7dbd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eabec4d3c56af2e8959c8329b5257a81c606da60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eabec4d3c56af2e8959c8329b5257a81c606da60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eabec4d3c56af2e8959c8329b5257a81c606da60", "patch": "@@ -1,3 +1,9 @@\n+2018-11-23  Jeff Law  <law@redhat.com>\n+\n+\tPR rtl-optimization/87468\n+\t* tree-ssa-threadupdate.c (create_block_for_threading): Clear\n+\tEDGE_IGNORE on all outgoing edges of the duplicate block.\n+\n 2018-11-23  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR bootstrap/88157"}, {"sha": "587526e7443bff9002661773767aba7ae1e4874a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eabec4d3c56af2e8959c8329b5257a81c606da60/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eabec4d3c56af2e8959c8329b5257a81c606da60/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eabec4d3c56af2e8959c8329b5257a81c606da60", "patch": "@@ -1,3 +1,8 @@\n+2018-11-23  Jeff Law  <law@redhat.com>\n+\n+\tPR rtl-optimization/84768\n+\t* gcc.c-torture/compile/pr84768.c: New test.\n+\n 2018-11-23  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* gcc.target/powerpc/pr70669.c: Use unary minus instead of"}, {"sha": "2f5cf80bf9f44441b7fbb7f2e2d7dffa7c3bc240", "filename": "gcc/testsuite/gcc.c-torture/compile/pr87468.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eabec4d3c56af2e8959c8329b5257a81c606da60/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr87468.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eabec4d3c56af2e8959c8329b5257a81c606da60/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr87468.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr87468.c?ref=eabec4d3c56af2e8959c8329b5257a81c606da60", "patch": "@@ -0,0 +1,15 @@\n+a;\n+b() {\n+  int c = 1;\n+  for (; c <= 3;) {\n+    int d = e() && !0;\n+    switch (c)\n+    case 1:\n+      if (d)\n+      case 2:\n+      case 3:\n+        f();\n+    if (a)\n+      c++;\n+  }\n+}"}, {"sha": "e7c7ca6fb1591527f9561157a8592297a700bcc1", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eabec4d3c56af2e8959c8329b5257a81c606da60/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eabec4d3c56af2e8959c8329b5257a81c606da60/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=eabec4d3c56af2e8959c8329b5257a81c606da60", "patch": "@@ -336,7 +336,17 @@ create_block_for_threading (basic_block bb,\n   rd->dup_blocks[count] = duplicate_block (bb, NULL, NULL);\n \n   FOR_EACH_EDGE (e, ei, rd->dup_blocks[count]->succs)\n-    e->aux = NULL;\n+    {\n+      e->aux = NULL;\n+\n+      /* If we duplicate a block with an outgoing edge marked as\n+\t EDGE_IGNORE, we must clear EDGE_IGNORE so that it doesn't\n+\t leak out of the current pass.\n+\n+\t It would be better to simplify switch statements and remove\n+\t the edges before we get here, but the sequencing is nontrivial.  */\n+      e->flags &= ~EDGE_IGNORE;\n+    }\n \n   /* Zero out the profile, since the block is unreachable for now.  */\n   rd->dup_blocks[count]->count = profile_count::uninitialized ();"}]}