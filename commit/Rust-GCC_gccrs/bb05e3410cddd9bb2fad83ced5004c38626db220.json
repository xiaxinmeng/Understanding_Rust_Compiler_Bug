{"sha": "bb05e3410cddd9bb2fad83ced5004c38626db220", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIwNWUzNDEwY2RkZDliYjJmYWQ4M2NlZDUwMDRjMzg2MjZkYjIyMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-11-06T17:39:56Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-11-06T17:39:56Z"}, "message": "sparc.c (function_arg_record_value_1): Skip fields with zero length.\n\n\t* config/sparc/sparc.c (function_arg_record_value_1): Skip\n\tfields with zero length.\n\t(function_arg_record_value_2): Likewise.\n\t(function_arg_record_value_3): Use smallest_mode_for_size\n\tinstead of mode_for_size.\n\t(function_arg_union_value): Return naked register for unions\n\twith zero length.\n\nFrom-SVN: r90180", "tree": {"sha": "99b39b57afa574f87067235b2cd7787c9eaa4071", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99b39b57afa574f87067235b2cd7787c9eaa4071"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb05e3410cddd9bb2fad83ced5004c38626db220", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb05e3410cddd9bb2fad83ced5004c38626db220", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb05e3410cddd9bb2fad83ced5004c38626db220", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb05e3410cddd9bb2fad83ced5004c38626db220/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "45261626da8e061958c44be098de4c38cca60acf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45261626da8e061958c44be098de4c38cca60acf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45261626da8e061958c44be098de4c38cca60acf"}], "stats": {"total": 40, "additions": 32, "deletions": 8}, "files": [{"sha": "1c0215796d3d783296faa7786605f6bb3669641b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb05e3410cddd9bb2fad83ced5004c38626db220/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb05e3410cddd9bb2fad83ced5004c38626db220/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb05e3410cddd9bb2fad83ced5004c38626db220", "patch": "@@ -1,3 +1,13 @@\n+2004-11-06  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* config/sparc/sparc.c (function_arg_record_value_1): Skip\n+\tfields with zero length.\n+\t(function_arg_record_value_2): Likewise.\n+\t(function_arg_record_value_3): Use smallest_mode_for_size\n+\tinstead of mode_for_size.\n+\t(function_arg_union_value): Return naked register for unions\n+\twith zero length.\n+\n 2004-11-06  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sparc/sparc.c (scan_record_type): Handle vector types."}, {"sha": "5c5b3267b4e261924a4a3e28ce3711836e82a006", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb05e3410cddd9bb2fad83ced5004c38626db220/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb05e3410cddd9bb2fad83ced5004c38626db220/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=bb05e3410cddd9bb2fad83ced5004c38626db220", "patch": "@@ -5262,9 +5262,14 @@ function_arg_record_value_1 (tree type, HOST_WIDE_INT startbitpos,\n \t{\n \t  HOST_WIDE_INT bitpos = startbitpos;\n \n-\t  if (DECL_SIZE (field) != 0\n-\t      && host_integerp (bit_position (field), 1))\n-\t    bitpos += int_bit_position (field);\n+\t  if (DECL_SIZE (field) != 0)\n+\t    {\n+\t      if (integer_zerop (DECL_SIZE (field)))\n+\t\tcontinue;\n+\n+\t      if (host_integerp (bit_position (field), 1))\n+\t\tbitpos += int_bit_position (field);\n+\t    }\n \n \t  /* ??? FIXME: else assume zero offset.  */\n \n@@ -5355,8 +5360,8 @@ function_arg_record_value_3 (HOST_WIDE_INT bitpos,\n      at the moment but may wish to revisit.  */\n \n   if (intoffset % BITS_PER_WORD != 0)\n-    mode = mode_for_size (BITS_PER_WORD - intoffset % BITS_PER_WORD,\n-\t\t\t  MODE_INT, 0);\n+    mode = smallest_mode_for_size (BITS_PER_WORD - intoffset % BITS_PER_WORD,\n+\t\t\t  \t   MODE_INT);\n   else\n     mode = word_mode;\n \n@@ -5405,9 +5410,14 @@ function_arg_record_value_2 (tree type, HOST_WIDE_INT startbitpos,\n \t{\n \t  HOST_WIDE_INT bitpos = startbitpos;\n \n-\t  if (DECL_SIZE (field) != 0\n-\t      && host_integerp (bit_position (field), 1))\n-\t    bitpos += int_bit_position (field);\n+\t  if (DECL_SIZE (field) != 0)\n+\t    {\n+\t      if (integer_zerop (DECL_SIZE (field)))\n+\t\tcontinue;\n+\n+\t      if (host_integerp (bit_position (field), 1))\n+\t\tbitpos += int_bit_position (field);\n+\t    }\n \n \t  /* ??? FIXME: else assume zero offset.  */\n \n@@ -5588,6 +5598,10 @@ function_arg_union_value (int size, enum machine_mode mode, int regno)\n   int nwords = ROUND_ADVANCE (size), i;\n   rtx regs;\n \n+  /* See comment in previous function for empty structures.  */\n+  if (nwords == 0)\n+    return gen_rtx_REG (mode, regno);\n+\n   regs = gen_rtx_PARALLEL (mode, rtvec_alloc (nwords));\n \n   for (i = 0; i < nwords; i++)"}]}