{"sha": "05210ba63707fd3dc120f0f5a76add5ca172881e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUyMTBiYTYzNzA3ZmQzZGMxMjBmMGY1YTc2YWRkNWNhMTcyODgxZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-12-16T14:13:03Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-12-16T14:13:03Z"}, "message": "poly_int: MACRO_MODE\n\nThis patch uses a MACRO_MODE wrapper for the target macro invocations\nin targhooks.c and address.h, so that macros for non-AArch64 targets\ncan continue to treat modes as fixed-size.\n\nIt didn't seem worth converting the address macros to hooks since\n(a) they're heavily used, (b) they should be probably be replaced\nwith a different interface rather than converted to hooks as-is,\nand most importantly (c) addresses.h already localises the problem.\n\n2017-12-16  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* machmode.h (MACRO_MODE): New macro.\n\t* addresses.h (base_reg_class, ok_for_base_p_1): Use it.\n\t* targhooks.c (default_libcall_value, default_secondary_reload)\n\t(default_memory_move_cost, default_register_move_cost)\n\t(default_class_max_nregs): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r255744", "tree": {"sha": "0932d4f8ba3dd51e383d00346fdcab38cc45d073", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0932d4f8ba3dd51e383d00346fdcab38cc45d073"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05210ba63707fd3dc120f0f5a76add5ca172881e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05210ba63707fd3dc120f0f5a76add5ca172881e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05210ba63707fd3dc120f0f5a76add5ca172881e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05210ba63707fd3dc120f0f5a76add5ca172881e/comments", "author": null, "committer": null, "parents": [{"sha": "8fcc61f8964aa9aa2e6fc08cb961f9dc2a5add77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fcc61f8964aa9aa2e6fc08cb961f9dc2a5add77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fcc61f8964aa9aa2e6fc08cb961f9dc2a5add77"}], "stats": {"total": 50, "additions": 38, "deletions": 12}, "files": [{"sha": "98f02e8bf086e7286b91a8142229634bdf3b976d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05210ba63707fd3dc120f0f5a76add5ca172881e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05210ba63707fd3dc120f0f5a76add5ca172881e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05210ba63707fd3dc120f0f5a76add5ca172881e", "patch": "@@ -1,3 +1,13 @@\n+2017-12-16  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* machmode.h (MACRO_MODE): New macro.\n+\t* addresses.h (base_reg_class, ok_for_base_p_1): Use it.\n+\t* targhooks.c (default_libcall_value, default_secondary_reload)\n+\t(default_memory_move_cost, default_register_move_cost)\n+\t(default_class_max_nregs): Likewise.\n+\n 2017-12-16  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "b0103d2a3ba8599d5954f29924c6e8a0ca23c2cd", "filename": "gcc/addresses.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05210ba63707fd3dc120f0f5a76add5ca172881e/gcc%2Faddresses.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05210ba63707fd3dc120f0f5a76add5ca172881e/gcc%2Faddresses.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Faddresses.h?ref=05210ba63707fd3dc120f0f5a76add5ca172881e", "patch": "@@ -31,14 +31,15 @@ base_reg_class (machine_mode mode ATTRIBUTE_UNUSED,\n \t\tenum rtx_code index_code ATTRIBUTE_UNUSED)\n {\n #ifdef MODE_CODE_BASE_REG_CLASS\n-  return MODE_CODE_BASE_REG_CLASS (mode, as, outer_code, index_code);\n+  return MODE_CODE_BASE_REG_CLASS (MACRO_MODE (mode), as, outer_code,\n+\t\t\t\t   index_code);\n #else\n #ifdef MODE_BASE_REG_REG_CLASS\n   if (index_code == REG)\n-    return MODE_BASE_REG_REG_CLASS (mode);\n+    return MODE_BASE_REG_REG_CLASS (MACRO_MODE (mode));\n #endif\n #ifdef MODE_BASE_REG_CLASS\n-  return MODE_BASE_REG_CLASS (mode);\n+  return MODE_BASE_REG_CLASS (MACRO_MODE (mode));\n #else\n   return BASE_REG_CLASS;\n #endif\n@@ -58,15 +59,15 @@ ok_for_base_p_1 (unsigned regno ATTRIBUTE_UNUSED,\n \t\t enum rtx_code index_code ATTRIBUTE_UNUSED)\n {\n #ifdef REGNO_MODE_CODE_OK_FOR_BASE_P\n-  return REGNO_MODE_CODE_OK_FOR_BASE_P (regno, mode, as,\n+  return REGNO_MODE_CODE_OK_FOR_BASE_P (regno, MACRO_MODE (mode), as,\n \t\t\t\t\touter_code, index_code);\n #else\n #ifdef REGNO_MODE_OK_FOR_REG_BASE_P\n   if (index_code == REG)\n-    return REGNO_MODE_OK_FOR_REG_BASE_P (regno, mode);\n+    return REGNO_MODE_OK_FOR_REG_BASE_P (regno, MACRO_MODE (mode));\n #endif\n #ifdef REGNO_MODE_OK_FOR_BASE_P\n-  return REGNO_MODE_OK_FOR_BASE_P (regno, mode);\n+  return REGNO_MODE_OK_FOR_BASE_P (regno, MACRO_MODE (mode));\n #else\n   return REGNO_OK_FOR_BASE_P (regno);\n #endif"}, {"sha": "0c5c01c0a6efcd1e19787e251c5fce002eb24753", "filename": "gcc/machmode.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05210ba63707fd3dc120f0f5a76add5ca172881e/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05210ba63707fd3dc120f0f5a76add5ca172881e/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=05210ba63707fd3dc120f0f5a76add5ca172881e", "patch": "@@ -685,6 +685,17 @@ fixed_size_mode::includes_p (machine_mode)\n   return true;\n }\n \n+/* Wrapper for mode arguments to target macros, so that if a target\n+   doesn't need polynomial-sized modes, its header file can continue\n+   to treat everything as fixed_size_mode.  This should go away once\n+   macros are moved to target hooks.  It shouldn't be used in other\n+   contexts.  */\n+#if NUM_POLY_INT_COEFFS == 1\n+#define MACRO_MODE(MODE) (as_a <fixed_size_mode> (MODE))\n+#else\n+#define MACRO_MODE(MODE) (MODE)\n+#endif\n+\n extern opt_machine_mode mode_for_size (unsigned int, enum mode_class, int);\n \n /* Return the machine mode to use for a MODE_INT of SIZE bits, if one"}, {"sha": "4a90e81ebe40ee4203e1767ae31ccbf61d815319", "filename": "gcc/targhooks.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05210ba63707fd3dc120f0f5a76add5ca172881e/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05210ba63707fd3dc120f0f5a76add5ca172881e/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=05210ba63707fd3dc120f0f5a76add5ca172881e", "patch": "@@ -977,7 +977,7 @@ default_libcall_value (machine_mode mode ATTRIBUTE_UNUSED,\n \t\t       const_rtx fun ATTRIBUTE_UNUSED)\n {\n #ifdef LIBCALL_VALUE\n-  return LIBCALL_VALUE (mode);\n+  return LIBCALL_VALUE (MACRO_MODE (mode));\n #else\n   gcc_unreachable ();\n #endif\n@@ -1107,11 +1107,13 @@ default_secondary_reload (bool in_p ATTRIBUTE_UNUSED, rtx x ATTRIBUTE_UNUSED,\n     }\n #ifdef SECONDARY_INPUT_RELOAD_CLASS\n   if (in_p)\n-    rclass = SECONDARY_INPUT_RELOAD_CLASS (reload_class, reload_mode, x);\n+    rclass = SECONDARY_INPUT_RELOAD_CLASS (reload_class,\n+\t\t\t\t\t   MACRO_MODE (reload_mode), x);\n #endif\n #ifdef SECONDARY_OUTPUT_RELOAD_CLASS\n   if (! in_p)\n-    rclass = SECONDARY_OUTPUT_RELOAD_CLASS (reload_class, reload_mode, x);\n+    rclass = SECONDARY_OUTPUT_RELOAD_CLASS (reload_class,\n+\t\t\t\t\t    MACRO_MODE (reload_mode), x);\n #endif\n   if (rclass != NO_REGS)\n     {\n@@ -1639,7 +1641,7 @@ default_memory_move_cost (machine_mode mode ATTRIBUTE_UNUSED,\n #ifndef MEMORY_MOVE_COST\n     return (4 + memory_move_secondary_cost (mode, (enum reg_class) rclass, in));\n #else\n-    return MEMORY_MOVE_COST (mode, (enum reg_class) rclass, in);\n+    return MEMORY_MOVE_COST (MACRO_MODE (mode), (enum reg_class) rclass, in);\n #endif\n }\n \n@@ -1654,7 +1656,8 @@ default_register_move_cost (machine_mode mode ATTRIBUTE_UNUSED,\n #ifndef REGISTER_MOVE_COST\n   return 2;\n #else\n-  return REGISTER_MOVE_COST (mode, (enum reg_class) from, (enum reg_class) to);\n+  return REGISTER_MOVE_COST (MACRO_MODE (mode),\n+\t\t\t     (enum reg_class) from, (enum reg_class) to);\n #endif\n }\n \n@@ -1843,7 +1846,8 @@ default_class_max_nregs (reg_class_t rclass ATTRIBUTE_UNUSED,\n \t\t\t machine_mode mode ATTRIBUTE_UNUSED)\n {\n #ifdef CLASS_MAX_NREGS\n-  return (unsigned char) CLASS_MAX_NREGS ((enum reg_class) rclass, mode);\n+  return (unsigned char) CLASS_MAX_NREGS ((enum reg_class) rclass,\n+\t\t\t\t\t  MACRO_MODE (mode));\n #else\n   return ((GET_MODE_SIZE (mode) + UNITS_PER_WORD - 1) / UNITS_PER_WORD);\n #endif"}]}