{"sha": "28c9500b057a89356f1bf6a5f68ad29f1fb26a1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhjOTUwMGIwNTdhODkzNTZmMWJmNmE1ZjY4YWQyOWYxZmIyNmExZQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-01-20T01:16:59Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-01-20T01:16:59Z"}, "message": "(update_reg_dead_notes): New function.\n\n(fill_simple_delay_slots): Call new function when moving\ninstruction forward into a delay slot.\n\nFrom-SVN: r3291", "tree": {"sha": "0726149d7bd82e946b7b70e9749e9e5bfbc637c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0726149d7bd82e946b7b70e9749e9e5bfbc637c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28c9500b057a89356f1bf6a5f68ad29f1fb26a1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28c9500b057a89356f1bf6a5f68ad29f1fb26a1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28c9500b057a89356f1bf6a5f68ad29f1fb26a1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28c9500b057a89356f1bf6a5f68ad29f1fb26a1e/comments", "author": null, "committer": null, "parents": [{"sha": "edaf97c444037ec44ed25543d5909e10589d7e7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edaf97c444037ec44ed25543d5909e10589d7e7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edaf97c444037ec44ed25543d5909e10589d7e7c"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "9189724ad98617008f717ecd31cf0694c6b80ef2", "filename": "gcc/reorg.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c9500b057a89356f1bf6a5f68ad29f1fb26a1e/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c9500b057a89356f1bf6a5f68ad29f1fb26a1e/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=28c9500b057a89356f1bf6a5f68ad29f1fb26a1e", "patch": "@@ -211,6 +211,7 @@ static int max_uid;\n \n static int redundant_insn_p ();\n static void update_block ();\n+static void update_reg_dead_notes ();\n \f\n /* Given X, some rtl, and RES, a pointer to a `struct resource', mark\n    which resources are references by the insn.  If INCLUDE_CALLED_ROUTINE\n@@ -1830,6 +1831,43 @@ update_block (insn, where)\n   if (b != -1)\n     bb_ticks[b]++;\n }\n+\n+/* Called when INSN is being moved forward into a delay slot of DELAYED_INSN.\n+   We check every instruction between INSN and DELAYED_INSN for REG_DEAD notes\n+   that reference values used in INSN.  If we find one, then we move the\n+   REG_DEAD note to INSN.\n+\n+   This is needed to handle the case where an later insn (after INSN) has a\n+   REG_DEAD note for a register used by INSN, and this later insn subsequently\n+   gets moved before a CODE_LABEL because it is a redundant insn.  In this\n+   case, mark_target_live_regs may be confused into thinking the register\n+   is dead because it sees a REG_DEAD note immediately before a CODE_LABEL.  */\n+\n+static void\n+update_reg_dead_notes (insn, delayed_insn)\n+     rtx insn, delayed_insn;\n+{\n+  rtx p, link, next;\n+\n+  for (p = next_nonnote_insn (insn); p != delayed_insn;\n+       p = next_nonnote_insn (p))\n+    for (link = REG_NOTES (p); link; link = next)\n+      {\n+\tnext = XEXP (link, 1);\n+\n+\tif (REG_NOTE_KIND (link) != REG_DEAD\n+\t    || GET_CODE (XEXP (link, 0)) != REG)\n+\t  continue;\n+\n+\tif (reg_referenced_p (XEXP (link, 0), PATTERN (insn)))\n+\t  {\n+\t    /* Move the REG_DEAD note from P to INSN.  */\n+\t    remove_note (p, link);\n+\t    XEXP (link, 1) = REG_NOTES (insn);\n+\t    REG_NOTES (insn) = link;\n+\t  }\n+      }\n+}\n \f\n /* Marks registers possibly live at the current place being scanned by\n    mark_target_live_regs.  Used only by next two function.    */\n@@ -2412,6 +2450,7 @@ fill_simple_delay_slots (first, non_jumps_p)\n \t\t\t to put them at the head, rather than the\n \t\t\t tail, of the list.  */\n \n+\t\t      update_reg_dead_notes (trial, insn);\n \t\t      delay_list = gen_rtx (INSN_LIST, VOIDmode,\n \t\t\t\t\t    trial, delay_list);\n \t\t      update_block (trial, trial);"}]}