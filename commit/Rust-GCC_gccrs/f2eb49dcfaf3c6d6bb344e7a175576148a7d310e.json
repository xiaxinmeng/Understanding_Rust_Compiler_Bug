{"sha": "f2eb49dcfaf3c6d6bb344e7a175576148a7d310e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJlYjQ5ZGNmYWYzYzZkNmJiMzQ0ZTdhMTc1NTc2MTQ4YTdkMzEwZQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2007-04-17T15:29:34Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2007-04-17T15:29:34Z"}, "message": "re PR rtl-optimization/10692 ([m68k] miscompilation of perl with -O2 -fPIC)\n\n\t* reload1.c (delete_output_reload): Don't count output in n_inherited.\n\n\tRevert\n\t2005-01-05  Richard Henderson  <rth@redhat.com>\n\tPR rtl-opt/10692\n\t* reload1.c (do_input_reload): Restrict the optimization deleteing\n\ta previous output reload to RELOAD_FOR_INPUT.\n\nFrom-SVN: r123913", "tree": {"sha": "fd0b64bc3ce899a06a2c0e1d070967984f1085ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd0b64bc3ce899a06a2c0e1d070967984f1085ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2eb49dcfaf3c6d6bb344e7a175576148a7d310e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2eb49dcfaf3c6d6bb344e7a175576148a7d310e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2eb49dcfaf3c6d6bb344e7a175576148a7d310e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2eb49dcfaf3c6d6bb344e7a175576148a7d310e/comments", "author": null, "committer": null, "parents": [{"sha": "710a179f8acbd09a88742b2fde7d3887a327736b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/710a179f8acbd09a88742b2fde7d3887a327736b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/710a179f8acbd09a88742b2fde7d3887a327736b"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "a315b6f4eb498060c082753f3b3ddf2a59fa7d27", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2eb49dcfaf3c6d6bb344e7a175576148a7d310e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2eb49dcfaf3c6d6bb344e7a175576148a7d310e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2eb49dcfaf3c6d6bb344e7a175576148a7d310e", "patch": "@@ -1,3 +1,13 @@\n+2007-04-17  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* reload1.c (delete_output_reload): Don't count output in n_inherited.\n+\n+\tRevert\n+\t2005-01-05  Richard Henderson  <rth@redhat.com>\n+\tPR rtl-opt/10692\n+\t* reload1.c (do_input_reload): Restrict the optimization deleteing\n+\ta previous output reload to RELOAD_FOR_INPUT.\n+\n 2007-04-17  Dorit Nuzman  <dorit@il.ibm.com>\n \n \t* tree-vectorizer.h (stmt_vec_info_type): Add enum value"}, {"sha": "8c698ef3399c3ed46112f967aa1556399df4f15e", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2eb49dcfaf3c6d6bb344e7a175576148a7d310e/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2eb49dcfaf3c6d6bb344e7a175576148a7d310e/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=f2eb49dcfaf3c6d6bb344e7a175576148a7d310e", "patch": "@@ -7156,10 +7156,6 @@ do_input_reload (struct insn_chain *chain, struct reload *rl, int j)\n      actually no need to store the old value in it.  */\n \n   if (optimize\n-      /* Only attempt this for input reloads; for RELOAD_OTHER we miss\n-\t that there may be multiple uses of the previous output reload.\n-\t Restricting to RELOAD_FOR_INPUT is mostly paranoia.  */\n-      && rl->when_needed == RELOAD_FOR_INPUT\n       && (reload_inherited[j] || reload_override_in[j])\n       && rl->reg_rtx\n       && REG_P (rl->reg_rtx)\n@@ -8010,16 +8006,7 @@ delete_output_reload (rtx insn, int j, int last_reload_reg)\n       if (rtx_equal_p (reg2, reg))\n \t{\n \t  if (reload_inherited[k] || reload_override_in[k] || k == j)\n-\t    {\n-\t      n_inherited++;\n-\t      reg2 = rld[k].out_reg;\n-\t      if (! reg2)\n-\t\tcontinue;\n-\t      while (GET_CODE (reg2) == SUBREG)\n-\t\treg2 = XEXP (reg2, 0);\n-\t      if (rtx_equal_p (reg2, reg))\n-\t\tn_inherited++;\n-\t    }\n+\t    n_inherited++;\n \t  else\n \t    return;\n \t}"}]}