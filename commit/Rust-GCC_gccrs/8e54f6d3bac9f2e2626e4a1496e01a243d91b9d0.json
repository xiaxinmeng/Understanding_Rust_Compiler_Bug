{"sha": "8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU1NGY2ZDNiYWM5ZjJlMjYyNmU0YTE0OTZlMDFhMjQzZDkxYjlkMA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-08-15T15:10:15Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-08-15T15:10:15Z"}, "message": "re PR fortran/44054 (Handle -Werror, -Werror=, -fdiagnostics-show-option, !GCC$ diagnostic (pragmas) and color)\n\n2014-08-15  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR fortran/44054\ngcc/\n\t* diagnostic.c (build_message_string): Make it extern.\n\t* diagnostic.h (build_message_string): Make it extern.\nc-family/\n\t* c-format.c: Handle Fortran flags.\nfortran/\n\t* gfortran.h: Define GCC_DIAG_STYLE.\n\t(gfc_diagnostics_init,gfc_warning_cmdline): Declare.\n\t* trans-array.c: Include gfortran.h before diagnostic-core.h.\n\t* trans-expr.c: Likewise.\n\t* trans-openmp.c: Likewise.\n\t* trans-const.c: Likewise.\n\t* trans.c: Likewise.\n\t* trans-types.c: Likewise.\n\t* f95-lang.c: Likewise.\n\t* trans-decl.c: Likewise.\n\t* trans-io.c: Likewise.\n\t* trans-intrinsic.c: Likewise.\n\t* error.c: Include diagnostic.h and diagnostic-color.h.\n\t(gfc_diagnostic_build_prefix): New.\n\t(gfc_diagnostic_starter): New.\n\t(gfc_diagnostic_finalizer): New.\n\t(gfc_warning_cmdline): New.\n\t(gfc_diagnostics_init): New.\n\t* gfc-diagnostic.def: New.\n\t* options.c (gfc_init_options): Call gfc_diagnostics_init.\n\t(gfc_post_options): Use gfc_warning_cmdline.\n\nFrom-SVN: r214024", "tree": {"sha": "ff48278d43446ffb9145fbbac3289b0d898cacfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff48278d43446ffb9145fbbac3289b0d898cacfa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/comments", "author": null, "committer": null, "parents": [{"sha": "363785f63edd6a56427b6aa3f256ffac9a2d376d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/363785f63edd6a56427b6aa3f256ffac9a2d376d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/363785f63edd6a56427b6aa3f256ffac9a2d376d"}], "stats": {"total": 258, "additions": 222, "deletions": 36}, "files": [{"sha": "e3018e54a656660d0b4e32632076a0a14f5ece96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0", "patch": "@@ -1,3 +1,9 @@\n+2014-08-15  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR fortran/44054\n+\t* diagnostic.c (build_message_string): Make it extern.\n+\t* diagnostic.h (build_message_string): Make it extern.\n+\n 2014-08-15  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* config/rs6000/rs6000.c (rs6000_emit_move): Use SDmode for"}, {"sha": "b7b9c2afc5e81d72d7367a7f4786e924a88619d7", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0", "patch": "@@ -1,3 +1,8 @@\n+2014-08-15  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR fortran/44054\n+\t* c-format.c: Handle Fortran flags.\n+\n 2014-08-12  Igor Zamyatin  <igor.zamyatin@intel.com>\n \n \tPR other/61962"}, {"sha": "9f541f52525c5b060fd848988804764db7e4db1e", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0", "patch": "@@ -510,11 +510,7 @@ static const format_flag_pair gcc_diag_flag_pairs[] =\n #define gcc_tdiag_flag_pairs gcc_diag_flag_pairs\n #define gcc_cdiag_flag_pairs gcc_diag_flag_pairs\n #define gcc_cxxdiag_flag_pairs gcc_diag_flag_pairs\n-\n-static const format_flag_pair gcc_gfc_flag_pairs[] =\n-{\n-  { 0, 0, 0, 0 }\n-};\n+#define gcc_gfc_flag_pairs gcc_diag_flag_pairs\n \n static const format_flag_spec gcc_diag_flag_specs[] =\n {\n@@ -529,6 +525,7 @@ static const format_flag_spec gcc_diag_flag_specs[] =\n #define gcc_tdiag_flag_specs gcc_diag_flag_specs\n #define gcc_cdiag_flag_specs gcc_diag_flag_specs\n #define gcc_cxxdiag_flag_specs gcc_diag_flag_specs\n+#define gcc_gfc_flag_specs gcc_diag_flag_specs\n \n static const format_flag_spec scanf_flag_specs[] =\n {\n@@ -741,7 +738,7 @@ static const format_char_info gcc_gfc_char_table[] =\n   { \"di\",  0, STD_C89, { T89_I,   BADLEN,  BADLEN,  T89_L,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"\", NULL },\n   { \"u\",   0, STD_C89, { T89_UI,  BADLEN,  BADLEN,  T89_UL,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"\", NULL },\n   { \"c\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"\", NULL },\n-  { \"s\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"cR\", NULL },\n+  { \"s\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\", \"cR\", NULL },\n \n   /* gfc conversion specifiers.  */\n \n@@ -750,6 +747,8 @@ static const format_char_info gcc_gfc_char_table[] =\n   /* This will require a \"locus\" at runtime.  */\n   { \"L\",   0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"R\", NULL },\n \n+  /* These will require nothing.  */\n+  { \"<>\",0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n   { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n \n@@ -846,8 +845,8 @@ static const format_kind_info format_types_orig[] =\n     0, 0, 'p', 0, 'L', 0,\n     NULL, &integer_type_node\n   },\n-  { \"gcc_gfc\", gcc_gfc_length_specs, gcc_gfc_char_table, \"\", NULL,\n-    NULL, gcc_gfc_flag_pairs,\n+  { \"gcc_gfc\", gcc_gfc_length_specs, gcc_gfc_char_table, \"q+#\", NULL,\n+    gcc_gfc_flag_specs, gcc_gfc_flag_pairs,\n     FMT_FLAG_ARG_CONVERT,\n     0, 0, 0, 0, 0, 0,\n     NULL, NULL"}, {"sha": "b457e5aa2d9d8bfe36f430e33890659931b1ace7", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0", "patch": "@@ -41,8 +41,6 @@ along with GCC; see the file COPYING3.  If not see\n #define permissive_error_option(DC) ((DC)->opt_permissive)\n \n /* Prototypes.  */\n-static char *build_message_string (const char *, ...) ATTRIBUTE_PRINTF_1;\n-\n static void error_recursion (diagnostic_context *) ATTRIBUTE_NORETURN;\n \n static void diagnostic_action_after_output (diagnostic_context *,\n@@ -59,7 +57,7 @@ diagnostic_context *global_dc = &global_diagnostic_context;\n \f\n /* Return a malloc'd string containing MSG formatted a la printf.  The\n    caller is responsible for freeing the memory.  */\n-static char *\n+char *\n build_message_string (const char *msg, ...)\n {\n   char *str;"}, {"sha": "0d69de5aedc122b059aae6bb00f5fbf39bac0d91", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0", "patch": "@@ -296,4 +296,7 @@ void diagnostic_file_cache_fini (void);\n /* Pure text formatting support functions.  */\n extern char *file_name_as_prefix (diagnostic_context *, const char *);\n \n+extern char *build_message_string (const char *, ...) ATTRIBUTE_PRINTF_1;\n+\n+\n #endif /* ! GCC_DIAGNOSTIC_H */"}, {"sha": "2663b0a29efa528ae84ee89ad3f07ca214b4c9e1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0", "patch": "@@ -1,3 +1,28 @@\n+2014-08-15  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR fortran/44054\n+\t* gfortran.h: Define GCC_DIAG_STYLE.\n+\t(gfc_diagnostics_init,gfc_warning_cmdline): Declare.\n+\t* trans-array.c: Include gfortran.h before diagnostic-core.h.\n+\t* trans-expr.c: Likewise.\n+\t* trans-openmp.c: Likewise.\n+\t* trans-const.c: Likewise.\n+\t* trans.c: Likewise.\n+\t* trans-types.c: Likewise.\n+\t* f95-lang.c: Likewise.\n+\t* trans-decl.c: Likewise.\n+\t* trans-io.c: Likewise.\n+\t* trans-intrinsic.c: Likewise.\n+\t* error.c: Include diagnostic.h and diagnostic-color.h.\n+\t(gfc_diagnostic_build_prefix): New.\n+\t(gfc_diagnostic_starter): New.\n+\t(gfc_diagnostic_finalizer): New.\n+\t(gfc_warning_cmdline): New.\n+\t(gfc_diagnostics_init): New.\n+\t* gfc-diagnostic.def: New.\n+\t* options.c (gfc_init_options): Call gfc_diagnostics_init.\n+\t(gfc_post_options): Use gfc_warning_cmdline.\n+\n 2014-08-15  Jakub Jelinek  <jakub@redhat.com>\n \t    Tobias Burnus  <burnus@net-b.de>\n "}, {"sha": "e3f44f755052b0db5b07ec31466c74840daa14f7", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0", "patch": "@@ -38,6 +38,8 @@ along with GCC; see the file COPYING3.  If not see\n # include <sys/ioctl.h>\n #endif\n \n+#include \"diagnostic.h\"\n+#include \"diagnostic-color.h\"\n \n static int suppress_errors = 0;\n \n@@ -956,6 +958,83 @@ gfc_warning_now (const char *gmsgid, ...)\n   buffer_flag = i;\n }\n \n+/* Return a malloc'd string describing a location.  The caller is\n+   responsible for freeing the memory.  */\n+static char *\n+gfc_diagnostic_build_prefix (diagnostic_context *context,\n+\t\t\t     const diagnostic_info *diagnostic)\n+{\n+  static const char *const diagnostic_kind_text[] = {\n+#define DEFINE_DIAGNOSTIC_KIND(K, T, C) (T),\n+#include \"gfc-diagnostic.def\"\n+#undef DEFINE_DIAGNOSTIC_KIND\n+    \"must-not-happen\"\n+  };\n+  static const char *const diagnostic_kind_color[] = {\n+#define DEFINE_DIAGNOSTIC_KIND(K, T, C) (C),\n+#include \"gfc-diagnostic.def\"\n+#undef DEFINE_DIAGNOSTIC_KIND\n+    NULL\n+  };\n+  gcc_assert (diagnostic->kind < DK_LAST_DIAGNOSTIC_KIND);\n+  const char *text = _(diagnostic_kind_text[diagnostic->kind]);\n+  const char *text_cs = \"\", *text_ce = \"\";\n+  pretty_printer *pp = context->printer;\n+\n+  if (diagnostic_kind_color[diagnostic->kind])\n+    {\n+      text_cs = colorize_start (pp_show_color (pp),\n+\t\t\t\tdiagnostic_kind_color[diagnostic->kind]);\n+      text_ce = colorize_stop (pp_show_color (pp));\n+    }\n+  const char *locus_cs = colorize_start (pp_show_color (pp), \"locus\");\n+  const char *locus_ce = colorize_stop (pp_show_color (pp));\n+\n+  expanded_location s = expand_location_to_spelling_point (diagnostic->location);\n+  if (diagnostic->override_column)\n+    s.column = diagnostic->override_column;\n+\n+  return (s.file == NULL\n+\t  ? build_message_string (\"%s%s:%s %s%s%s: \", locus_cs, progname, locus_ce,\n+\t\t\t\t  text_cs, text, text_ce)\n+\t  : !strcmp (s.file, N_(\"<built-in>\"))\n+\t  ? build_message_string (\"%s%s:%s %s%s%s: \", locus_cs, s.file, locus_ce,\n+\t\t\t     text_cs, text, text_ce)\n+\t  : context->show_column\n+\t  ? build_message_string (\"%s%s:%d:%d:%s %s%s%s: \", locus_cs, s.file, s.line,\n+\t\t\t\t  s.column, locus_ce, text_cs, text, text_ce)\n+\t  : build_message_string (\"%s%s:%d:%s %s%s%s: \", locus_cs, s.file, s.line, locus_ce,\n+\t\t\t\t  text_cs, text, text_ce));\n+}\n+\n+static void\n+gfc_diagnostic_starter (diagnostic_context *context,\n+\t\t\tdiagnostic_info *diagnostic)\n+{\n+  pp_set_prefix (context->printer, gfc_diagnostic_build_prefix (context,\n+\t\t\t\t\t\t\t\tdiagnostic));\n+}\n+\n+static void\n+gfc_diagnostic_finalizer (diagnostic_context *context ATTRIBUTE_UNUSED,\n+\t\t\t  diagnostic_info *diagnostic ATTRIBUTE_UNUSED)\n+{\n+}\n+\n+/* Give a warning about the command-line.  */\n+\n+void\n+gfc_warning_cmdline (const char *gmsgid, ...)\n+{\n+  va_list argp;\n+  diagnostic_info diagnostic;\n+\n+  va_start (argp, gmsgid);\n+  diagnostic_set_info (&diagnostic, gmsgid, &argp, UNKNOWN_LOCATION,\n+\t\t       DK_WARNING);\n+  report_diagnostic (&diagnostic);\n+  va_end (argp);\n+}\n \n /* Clear the warning flag.  */\n \n@@ -1205,3 +1284,10 @@ gfc_errors_to_warnings (int f)\n {\n   warnings_not_errors = (f == 1) ? 1 : 0;\n }\n+\n+void\n+gfc_diagnostics_init (void)\n+{\n+  diagnostic_starter (global_dc) = gfc_diagnostic_starter;\n+  diagnostic_finalizer (global_dc) = gfc_diagnostic_finalizer;\n+}"}, {"sha": "da3a0d090cfcbcce45bb6fc7e32e0c36f7440c38", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ansidecl.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"gfortran.h\"\n #include \"tree.h\"\n #include \"flags.h\"\n #include \"langhooks.h\"\n@@ -38,10 +39,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"toplev.h\"\n #include \"target.h\"\n #include \"debug.h\"\n-#include \"diagnostic.h\"\n+#include \"diagnostic.h\" /* For errorcount/warningcount */\n #include \"dumpfile.h\"\n #include \"cgraph.h\"\n-#include \"gfortran.h\"\n #include \"cpp.h\"\n #include \"trans.h\"\n #include \"trans-types.h\""}, {"sha": "0f1044de9ca62bfdec511334241707e09c4072de", "filename": "gcc/fortran/gfc-diagnostic.def", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Fgfc-diagnostic.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Fgfc-diagnostic.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfc-diagnostic.def?ref=8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0", "patch": "@@ -0,0 +1,47 @@\n+/* Copyright (C) 2001-2014 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* DK_UNSPECIFIED must be first so it has a value of zero.  We never\n+   assign this kind to an actual diagnostic, we only use this in\n+   variables that can hold a kind, to mean they have yet to have a\n+   kind specified.  I.e. they're uninitialized.  Within the diagnostic\n+   machinery, this kind also means \"don't change the existing kind\",\n+   meaning \"no change is specified\".  */\n+DEFINE_DIAGNOSTIC_KIND (DK_UNSPECIFIED, \"\", NULL)\n+\n+/* If a diagnostic is set to DK_IGNORED, it won't get reported at all.\n+   This is used by the diagnostic machinery when it wants to disable a\n+   diagnostic without disabling the option which causes it.  */\n+DEFINE_DIAGNOSTIC_KIND (DK_IGNORED, \"\", NULL)\n+\n+/* The remainder are real diagnostic types.  */\n+DEFINE_DIAGNOSTIC_KIND (DK_FATAL, \"fatal error\", \"error\")\n+DEFINE_DIAGNOSTIC_KIND (DK_ICE, \"internal compiler error\", \"error\")\n+DEFINE_DIAGNOSTIC_KIND (DK_ERROR, \"Error\", \"error\")\n+DEFINE_DIAGNOSTIC_KIND (DK_SORRY, \"sorry, unimplemented\", \"error\")\n+DEFINE_DIAGNOSTIC_KIND (DK_WARNING, \"Warning\", \"warning\")\n+DEFINE_DIAGNOSTIC_KIND (DK_ANACHRONISM, \"anachronism\", \"warning\")\n+DEFINE_DIAGNOSTIC_KIND (DK_NOTE, \"note\", \"note\")\n+DEFINE_DIAGNOSTIC_KIND (DK_DEBUG, \"debug\", \"note\")\n+/* These two would be re-classified as DK_WARNING or DK_ERROR, so the\n+prefix does not matter.  */\n+DEFINE_DIAGNOSTIC_KIND (DK_PEDWARN, \"pedwarn\", NULL)\n+DEFINE_DIAGNOSTIC_KIND (DK_PERMERROR, \"permerror\", NULL)\n+/* This one is just for counting DK_WARNING promoted to DK_ERROR\n+   due to -Werror and -Werror=warning.  */\n+DEFINE_DIAGNOSTIC_KIND (DK_WERROR, \"error\", NULL)"}, {"sha": "d6fcceea59e2faa40be8be94a53bce4114607b25", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0", "patch": "@@ -31,6 +31,19 @@ along with GCC; see the file COPYING3.  If not see\n #error \"gfortran.h must be included after coretypes.h\"\n #endif\n \n+/* In order for the format checking to accept the Fortran front end\n+   diagnostic framework extensions, you must include this file before\n+   diagnostic-core.h, not after.  We override the definition of GCC_DIAG_STYLE\n+   in c-common.h.  */\n+#undef GCC_DIAG_STYLE\n+#define GCC_DIAG_STYLE __gcc_gfc__\n+#if defined(GCC_DIAGNOSTIC_CORE_H)\n+#error \\\n+In order for the format checking to accept the Fortran front end diagnostic \\\n+framework extensions, you must include this file before diagnostic-core.h, \\\n+not after.\n+#endif\n+\n /* Declarations common to the front-end and library are put in\n    libgfortran/libgfortran_frontend.h  */\n #include \"libgfortran.h\"\n@@ -2672,12 +2685,15 @@ typedef struct gfc_error_buf\n } gfc_error_buf;\n \n void gfc_error_init_1 (void);\n+void gfc_diagnostics_init(void);\n void gfc_buffer_error (int);\n \n const char *gfc_print_wide_char (gfc_char_t);\n \n void gfc_warning (const char *, ...) ATTRIBUTE_GCC_GFC(1,2);\n void gfc_warning_now (const char *, ...) ATTRIBUTE_GCC_GFC(1,2);\n+void gfc_warning_cmdline (const char *gmsgid, ...) ATTRIBUTE_GCC_GFC(1,2);\n+\n void gfc_clear_warning (void);\n void gfc_warning_check (void);\n "}, {"sha": "508a01c57f87ba74645a25b16bfd793adf2305d7", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0", "patch": "@@ -173,6 +173,7 @@ gfc_init_options (unsigned int decoded_options_count,\n \n   /* Initialize cpp-related options.  */\n   gfc_cpp_init_options (decoded_options_count, decoded_options);\n+  gfc_diagnostics_init ();\n }\n \n \n@@ -352,8 +353,8 @@ gfc_post_options (const char **pfilename)\n       if (gfc_current_form == FORM_UNKNOWN)\n \t{\n \t  gfc_current_form = FORM_FREE;\n-\t  gfc_warning_now (\"Reading file '%s' as free form\", \n-\t\t\t   (filename[0] == '\\0') ? \"<stdin>\" : filename);\n+\t  gfc_warning_cmdline (\"Reading file %qs as free form\", \n+\t\t\t       (filename[0] == '\\0') ? \"<stdin>\" : filename);\n \t}\n     }\n \n@@ -362,10 +363,10 @@ gfc_post_options (const char **pfilename)\n   if (gfc_current_form == FORM_FREE)\n     {\n       if (gfc_option.flag_d_lines == 0)\n-\tgfc_warning_now (\"'-fd-lines-as-comments' has no effect \"\n-\t\t\t \"in free form\");\n+\tgfc_warning_cmdline (\"%<-fd-lines-as-comments%> has no effect \"\n+\t\t\t     \"in free form\");\n       else if (gfc_option.flag_d_lines == 1)\n-\tgfc_warning_now (\"'-fd-lines-as-code' has no effect in free form\");\n+\tgfc_warning_cmdline (\"%<-fd-lines-as-code%> has no effect in free form\");\n     }\n \n   /* If -pedantic, warn about the use of GNU extensions.  */\n@@ -383,21 +384,21 @@ gfc_post_options (const char **pfilename)\n \n   if (!gfc_option.flag_automatic && gfc_option.flag_max_stack_var_size != -2\n       && gfc_option.flag_max_stack_var_size != 0)\n-    gfc_warning_now (\"Flag -fno-automatic overwrites -fmax-stack-var-size=%d\",\n-\t\t     gfc_option.flag_max_stack_var_size);\n+    gfc_warning_cmdline (\"Flag %<-fno-automatic%> overwrites %<-fmax-stack-var-size=%d%>\",\n+\t\t\t gfc_option.flag_max_stack_var_size);\n   else if (!gfc_option.flag_automatic && gfc_option.flag_recursive)\n-    gfc_warning_now (\"Flag -fno-automatic overwrites -frecursive\");\n+    gfc_warning_cmdline (\"Flag %<-fno-automatic%> overwrites %<-frecursive%>\");\n   else if (!gfc_option.flag_automatic && gfc_option.gfc_flag_openmp)\n-    gfc_warning_now (\"Flag -fno-automatic overwrites -frecursive implied by \"\n-\t\t     \"-fopenmp\");\n+    gfc_warning_cmdline (\"Flag %<-fno-automatic%> overwrites %<-frecursive%> implied by \"\n+\t\t\t \"%<-fopenmp%>\");\n   else if (gfc_option.flag_max_stack_var_size != -2\n \t   && gfc_option.flag_recursive)\n-    gfc_warning_now (\"Flag -frecursive overwrites -fmax-stack-var-size=%d\",\n-\t\t     gfc_option.flag_max_stack_var_size);\n+    gfc_warning_cmdline (\"Flag %<-frecursive%> overwrites %<-fmax-stack-var-size=%d%>\",\n+\t\t\t gfc_option.flag_max_stack_var_size);\n   else if (gfc_option.flag_max_stack_var_size != -2\n \t   && gfc_option.gfc_flag_openmp)\n-    gfc_warning_now (\"Flag -fmax-stack-var-size=%d overwrites -frecursive \"\n-\t\t     \"implied by -fopenmp\", \n+    gfc_warning_cmdline (\"Flag %<-fmax-stack-var-size=%d%> overwrites %<-frecursive%> \"\n+\t\t\t \"implied by %<-fopenmp%>\", \n \t\t     gfc_option.flag_max_stack_var_size);\n \n   /* Implement -frecursive as -fmax-stack-var-size=-1.  */"}, {"sha": "123df5d484edbf2b64be924b2c0fc0500b56f0dd", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0", "patch": "@@ -78,11 +78,11 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"gfortran.h\"\n #include \"tree.h\"\n #include \"gimple-expr.h\"\n #include \"diagnostic-core.h\"\t/* For internal_error/fatal_error.  */\n #include \"flags.h\"\n-#include \"gfortran.h\"\n #include \"constructor.h\"\n #include \"trans.h\"\n #include \"trans-stmt.h\""}, {"sha": "9135f29fa3d76bfd498c25e34a24e3683c50fe5b", "filename": "gcc/fortran/trans-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Ftrans-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Ftrans-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.c?ref=8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0", "patch": "@@ -23,12 +23,12 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"gfortran.h\"\n #include \"tree.h\"\n #include \"stor-layout.h\"\n #include \"realmpfr.h\"\n #include \"diagnostic-core.h\"\t/* For fatal_error.  */\n #include \"double-int.h\"\n-#include \"gfortran.h\"\n #include \"trans.h\"\n #include \"trans-const.h\"\n #include \"trans-types.h\""}, {"sha": "25ab419809b196bf2e3e4984a5a00fd94319536b", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"gfortran.h\"\n #include \"tree.h\"\n #include \"stringpool.h\"\n #include \"stor-layout.h\"\n@@ -39,7 +40,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"cgraph.h\"\n #include \"debug.h\"\n-#include \"gfortran.h\"\n #include \"hash-set.h\"\n #include \"constructor.h\"\n #include \"trans.h\""}, {"sha": "544fc765beda3d5f5bc789a63b0d2c84709fcb7c", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0", "patch": "@@ -24,12 +24,12 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"gfortran.h\"\n #include \"tree.h\"\n #include \"stringpool.h\"\n #include \"diagnostic-core.h\"\t/* For fatal_error.  */\n #include \"langhooks.h\"\n #include \"flags.h\"\n-#include \"gfortran.h\"\n #include \"arith.h\"\n #include \"constructor.h\"\n #include \"trans.h\""}, {"sha": "fd3c46a14b69499f12f28df5d7bc7cb011e3e932", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0", "patch": "@@ -30,10 +30,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-nested.h\"\n #include \"stor-layout.h\"\n #include \"ggc.h\"\n+#include \"gfortran.h\"\n #include \"diagnostic-core.h\"\t/* For internal_error.  */\n #include \"toplev.h\"\t/* For rest_of_decl_compilation.  */\n #include \"flags.h\"\n-#include \"gfortran.h\"\n #include \"arith.h\"\n #include \"intrinsic.h\"\n #include \"trans.h\""}, {"sha": "cbe54ab7fc228ff17287b146e621fd4b24c4b7df", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0", "patch": "@@ -26,8 +26,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stringpool.h\"\n #include \"stor-layout.h\"\n #include \"ggc.h\"\n-#include \"diagnostic-core.h\"\t/* For internal_error.  */\n #include \"gfortran.h\"\n+#include \"diagnostic-core.h\"\t/* For internal_error.  */\n #include \"trans.h\"\n #include \"trans-stmt.h\"\n #include \"trans-array.h\""}, {"sha": "c8028ab269a535b12e92e036da03c37096959b8d", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0", "patch": "@@ -26,8 +26,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-expr.h\"\n #include \"gimplify.h\"\t/* For create_tmp_var_raw.  */\n #include \"stringpool.h\"\n-#include \"diagnostic-core.h\"\t/* For internal_error.  */\n #include \"gfortran.h\"\n+#include \"diagnostic-core.h\"\t/* For internal_error.  */\n #include \"trans.h\"\n #include \"trans-stmt.h\"\n #include \"trans-types.h\""}, {"sha": "d455bf4ca2e45ff78a09e8d8bd6ae6b820f39161", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0", "patch": "@@ -39,9 +39,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\t/* For iso-c-bindings.def.  */\n #include \"target.h\"\n #include \"ggc.h\"\n+#include \"gfortran.h\"\n #include \"diagnostic-core.h\"  /* For fatal_error.  */\n #include \"toplev.h\"\t/* For rest_of_decl_compilation.  */\n-#include \"gfortran.h\"\n #include \"trans.h\"\n #include \"trans-types.h\"\n #include \"trans-const.h\""}, {"sha": "2cc701e8f3032b2c2bd0cf627763015bab09f5fa", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=8e54f6d3bac9f2e2626e4a1496e01a243d91b9d0", "patch": "@@ -21,13 +21,13 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"gfortran.h\"\n #include \"tree.h\"\n #include \"gimple-expr.h\"\t/* For create_tmp_var_raw.  */\n #include \"stringpool.h\"\n #include \"tree-iterator.h\"\n #include \"diagnostic-core.h\"  /* For internal_error.  */\n #include \"flags.h\"\n-#include \"gfortran.h\"\n #include \"trans.h\"\n #include \"trans-stmt.h\"\n #include \"trans-array.h\""}]}