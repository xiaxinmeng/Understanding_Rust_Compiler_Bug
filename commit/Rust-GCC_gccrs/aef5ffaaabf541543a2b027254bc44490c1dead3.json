{"sha": "aef5ffaaabf541543a2b027254bc44490c1dead3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVmNWZmYWFhYmY1NDE1NDNhMmIwMjcyNTRiYzQ0NDkwYzFkZWFkMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-11-20T12:54:23Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-11-20T12:54:23Z"}, "message": "i386.c (ix86_expand_call): Emit CLOBBERs in VOIDmode.\n\n\t* config/i386/i386.c (ix86_expand_call): Emit CLOBBERs in VOIDmode.\n\nFrom-SVN: r193660", "tree": {"sha": "fdee27bcbf0ef863579808e7399da1b43fb03425", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdee27bcbf0ef863579808e7399da1b43fb03425"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aef5ffaaabf541543a2b027254bc44490c1dead3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aef5ffaaabf541543a2b027254bc44490c1dead3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aef5ffaaabf541543a2b027254bc44490c1dead3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aef5ffaaabf541543a2b027254bc44490c1dead3/comments", "author": null, "committer": null, "parents": [{"sha": "47c9ac72414bb26cf9ec67aa24e115b037205b56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47c9ac72414bb26cf9ec67aa24e115b037205b56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47c9ac72414bb26cf9ec67aa24e115b037205b56"}], "stats": {"total": 36, "additions": 16, "deletions": 20}, "files": [{"sha": "77d13fb1779dec559174f8db3e532b11e21c6179", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aef5ffaaabf541543a2b027254bc44490c1dead3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aef5ffaaabf541543a2b027254bc44490c1dead3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aef5ffaaabf541543a2b027254bc44490c1dead3", "patch": "@@ -1,3 +1,7 @@\n+2012-11-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_expand_call): Emit CLOBBERs in VOIDmode.\n+\n 2012-11-20  Nick Clifton  <nickc@redhat.com>\n \n \t* config/rx/rx.c (rx_function_arg_boundary): When using the RX ABI\n@@ -20,8 +24,7 @@\n \tas it causes too much reload pressure.\n \t* config/rx/rx.opt (mgcc-abi): New option.\n \t(mrx-abi): New option.\n-\t* config/rx/t-rx (MULTILIB_OPTIONS): Show how to add an ABI\n-\tmultilib.\n+\t* config/rx/t-rx (MULTILIB_OPTIONS): Show how to add an ABI multilib.\n \t(MULTILIB_DIRNAMES): Likewise.\n \n 2012-11-20  James Greenhalgh  <james.greenhalgh@arm.com>\n@@ -156,8 +159,7 @@\n \t(expand_regions_1): Same.\n \t(expand_region): Same.\n \t(execute_tm_mark): Pass new argument to expand_regions.\n-\t(expand_block_edges): Pass new argument to\n-\tget_bb_regions_instrumented.\n+\t(expand_block_edges): Pass new argument to get_bb_regions_instrumented.\n \n 2012-11-19  Sofiane Naci  <sofiane.naci@arm.com>\n \n@@ -397,8 +399,7 @@\n \t(stack_vec_register_index): New.\n \t(unregister_stack_vec): New.\n \t(vec_assert_fail): Remove.\n-\t* vec.h: Conditionally include ggc.h.  Document conditional\n-\thackery.\n+\t* vec.h: Conditionally include ggc.h.  Document conditional hackery.\n \tUpdate top-level documentation.\n \t(ALONE_VEC_CHECK_INFO): Remove.\n \t(VEC_CHECK_INFO): Remove.\n@@ -407,8 +408,7 @@\n \t(ALONE_VEC_CHECK_PASS): Remove.\n \t(VEC_CHECK_PASS): Remove.\n \t(VEC_ASSERT): Remove.\n-\t(vec_prefix): Add friends va_gc, va_gc_atomic, va_heap and\n-\tva_stack.\n+\t(vec_prefix): Add friends va_gc, va_gc_atomic, va_heap and va_stack.\n \tMark fields alloc_ and num_ as protected.\n \t(struct vec_t): Remove.  Remove all function members.\n \t(struct vl_embed): Declare.\n@@ -580,10 +580,8 @@\n \tCall create_user_defined_type when parsing GTY((user)).\n \t* gengtype-state.c (type_lineloc): handle TYPE_UNDEFINED.\n \t(write_state_undefined_type): New.\n-\t(write_state_type): Call write_state_undefined_type for\n-\tTYPE_UNDEFINED.\n-\t(read_state_type): Call read_state_undefined_type for\n-\tTYPE_UNDEFINED.\n+\t(write_state_type): Call write_state_undefined_type for TYPE_UNDEFINED.\n+\t(read_state_type): Call read_state_undefined_type for TYPE_UNDEFINED.\n \t* gengtype.c (dbgprint_count_type_at): Handle TYPE_UNDEFINED.\n \t(create_user_defined_type): Make extern.\n \t(type_for_name): Factor out of resolve_typedef.\n@@ -596,8 +594,7 @@\n \tEmit an error for TYPE_UNDEFINED unless LEVEL is GC_UNUSED or\n \tALLOWED_UNDEFINED_TYPES is set.\n \tSet ALLOWED_UNDEFINED_TYPES to true for TYPE_USER_STRUCT.\n-\t(filter_type_name): Accept templates with more than one\n-\targument.\n+\t(filter_type_name): Accept templates with more than one argument.\n \t(output_mangled_typename): Handle TYPE_UNDEFINED\n \t(walk_type): Likewise.\n \t(write_types_process_field): Likewise.\n@@ -610,8 +607,7 @@\n \t(write_root): Reject user-defined types that are not pointers.\n \tHandle TYPE_NONE, TYPE_UNDEFINED, TYPE_UNION, TYPE_LANG_STRUCT\n \tand TYPE_PARAM_STRUCT.\n-\t(output_typename): Handle TYPE_NONE, TYPE_UNDEFINED, and\n-\tTYPE_ARRAY.\n+\t(output_typename): Handle TYPE_NONE, TYPE_UNDEFINED, and TYPE_ARRAY.\n \t(dump_typekind): Handle TYPE_UNDEFINED.\n \t* gengtype.h (enum typekind): Add TYPE_UNDEFINED.\n \t(create_user_defined_type): Declare.\n@@ -913,7 +909,8 @@\n \n 2012-11-16  Jan Hubicka  <jh@suse.cz>\n \n-\t* params.def (max-peeled-insns, max-completely-peeled-insns): Reduce to 100.\n+\t* params.def (max-peeled-insns, max-completely-peeled-insns): Reduce\n+\tto 100.\n \n 2012-11-16  Simon Baldwin  <simonb@google.com>\n "}, {"sha": "84cc5c94e5164d71ee318bfe84b035db1d4d4616", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aef5ffaaabf541543a2b027254bc44490c1dead3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aef5ffaaabf541543a2b027254bc44490c1dead3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=aef5ffaaabf541543a2b027254bc44490c1dead3", "patch": "@@ -23528,9 +23528,8 @@ ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,\n \t\t\t\t       UNSPEC_MS_TO_SYSV_CALL);\n \n       for (i = 0; i < ARRAY_SIZE (clobbered_registers); i++)\n-        vec[vec_len++]\n-\t  = gen_rtx_CLOBBER (SSE_REGNO_P (clobbered_registers[i])\n-\t\t\t     ? TImode : DImode,\n+\tvec[vec_len++]\n+\t  = gen_rtx_CLOBBER (VOIDmode,\n \t\t\t     gen_rtx_REG (SSE_REGNO_P (clobbered_registers[i])\n \t\t\t\t\t  ? TImode : DImode,\n \t\t\t\t\t  clobbered_registers[i]));"}]}