{"sha": "3697a5b8db822f91fad4516b3c625ff2f48993ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY5N2E1YjhkYjgyMmY5MWZhZDQ1MTZiM2M2MjVmZjJmNDg5OTNjZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-07-17T18:32:36Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-07-17T18:32:36Z"}, "message": "i386.md (*add<dwi>3_doubleword): Remove redundant constraints.\n\n\t* config/i386/i386.md (*add<dwi>3_doubleword):\n\tRemove redundant constraints.\n\t(*add<mode>_1): Ditto.\n\t(*addhi_1): Ditto.\n\t(*addqi_1): Ditto.\n\t(*addqi_1_slp): Ditto.\n\t(*add<mode>_2): Ditto.\n\t(*addv<mode>4): Ditto.\n\t(*sub<dwi>3_doubleword): Ditto.\n\t(*sub<mode>_1): Ditto.\n\t(*subqi_1_slp): Ditto.\n\t(*sub<mode>_2): Ditto.\n\t(*subv<mode>4): Ditto.\n\t(*sub<mode>_3): Ditto.\n\t(@add<mode>3_carry): Ditto.\n\t(@sub<mode>3_carry): Ditto.\n\t(*add<mode>3_cc_overflow_1): Ditto.\n\t(*add<mode>3_zext_cc_overflow_2): Ditto.\n\t(*anddi_1): Ditto.\n\t(*and<mode>_1): Ditto.\n\t(*andqi_1): Ditto.\n\t(*andqi_1_slp): Ditto.\n\t(*anddi_2): Ditto.\n\t(*andqi_2_maybe_si): Ditto.\n\t(*and<mode>_2): Ditto.\n\t(*andqi_2_slp): Ditto.\n\t(*<code><mode>_1): Ditto.\n\t(*<code>qi_1): Ditto.\n\t(*<code>qi_1_slp): Ditto.\n\t(*<code><mode>_2): Ditto.\n\t(*<code>qi_2_slp): Ditto.\n\nFrom-SVN: r273554", "tree": {"sha": "7e96f7f29f1ac9d58791530c92272213927ec8db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e96f7f29f1ac9d58791530c92272213927ec8db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3697a5b8db822f91fad4516b3c625ff2f48993ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3697a5b8db822f91fad4516b3c625ff2f48993ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3697a5b8db822f91fad4516b3c625ff2f48993ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3697a5b8db822f91fad4516b3c625ff2f48993ce/comments", "author": null, "committer": null, "parents": [{"sha": "d767a594c6818c1de586dba4f9c6b0a5cc6cae19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d767a594c6818c1de586dba4f9c6b0a5cc6cae19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d767a594c6818c1de586dba4f9c6b0a5cc6cae19"}], "stats": {"total": 141, "additions": 85, "deletions": 56}, "files": [{"sha": "c43cf95f4e08192fb4e03166d734890cd213fa94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3697a5b8db822f91fad4516b3c625ff2f48993ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3697a5b8db822f91fad4516b3c625ff2f48993ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3697a5b8db822f91fad4516b3c625ff2f48993ce", "patch": "@@ -1,7 +1,41 @@\n+2019-07-17  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*add<dwi>3_doubleword):\n+\tRemove redundant constraints.\n+\t(*add<mode>_1): Ditto.\n+\t(*addhi_1): Ditto.\n+\t(*addqi_1): Ditto.\n+\t(*addqi_1_slp): Ditto.\n+\t(*add<mode>_2): Ditto.\n+\t(*addv<mode>4): Ditto.\n+\t(*sub<dwi>3_doubleword): Ditto.\n+\t(*sub<mode>_1): Ditto.\n+\t(*subqi_1_slp): Ditto.\n+\t(*sub<mode>_2): Ditto.\n+\t(*subv<mode>4): Ditto.\n+\t(*sub<mode>_3): Ditto.\n+\t(@add<mode>3_carry): Ditto.\n+\t(@sub<mode>3_carry): Ditto.\n+\t(*add<mode>3_cc_overflow_1): Ditto.\n+\t(*add<mode>3_zext_cc_overflow_2): Ditto.\n+\t(*anddi_1): Ditto.\n+\t(*and<mode>_1): Ditto.\n+\t(*andqi_1): Ditto.\n+\t(*andqi_1_slp): Ditto.\n+\t(*anddi_2): Ditto.\n+\t(*andqi_2_maybe_si): Ditto.\n+\t(*and<mode>_2): Ditto.\n+\t(*andqi_2_slp): Ditto.\n+\t(*<code><mode>_1): Ditto.\n+\t(*<code>qi_1): Ditto.\n+\t(*<code>qi_1_slp): Ditto.\n+\t(*<code><mode>_2): Ditto.\n+\t(*<code>qi_2_slp): Ditto.\n+\n 2019-07-17  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* alias.c (record_component_aliases): Do not simplify pointed-to\n-\ttypes of ODR types \n+\ttypes of ODR types.\n \n 2019-07-17  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "62485c34a96a1c16b2849d355b4a6288321b304a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 50, "deletions": 55, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3697a5b8db822f91fad4516b3c625ff2f48993ce/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3697a5b8db822f91fad4516b3c625ff2f48993ce/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3697a5b8db822f91fad4516b3c625ff2f48993ce", "patch": "@@ -5337,11 +5337,10 @@\n   \"ix86_expand_binary_operator (PLUS, <MODE>mode, operands); DONE;\")\n \n (define_insn_and_split \"*add<dwi>3_doubleword\"\n-  [(set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=r,o\")\n+  [(set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=ro,r\")\n \t(plus:<DWI>\n \t  (match_operand:<DWI> 1 \"nonimmediate_operand\" \"%0,0\")\n-\t  (match_operand:<DWI> 2 \"x86_64_hilo_general_operand\"\n-\t\t\t\t\t\t\t\"ro<di>,r<di>\")))\n+\t  (match_operand:<DWI> 2 \"x86_64_hilo_general_operand\" \"r<di>,o\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (PLUS, <DWI>mode, operands)\"\n   \"#\"\n@@ -5369,10 +5368,10 @@\n })\n \n (define_insn \"*add<mode>_1\"\n-  [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=r,rm,r,r\")\n+  [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm,r,r,r\")\n \t(plus:SWI48\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"%0,0,r,r\")\n-\t  (match_operand:SWI48 2 \"x86_64_general_operand\" \"rme,re,0,le\")))\n+\t  (match_operand:SWI48 2 \"x86_64_general_operand\" \"re,m,0,le\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n {\n@@ -5475,7 +5474,7 @@\n (define_insn \"*addhi_1\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r,r,Yp\")\n \t(plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,r,Yp\")\n-\t\t (match_operand:HI 2 \"general_operand\" \"rn,rm,0,ln\")))\n+\t\t (match_operand:HI 2 \"general_operand\" \"rn,m,0,ln\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (PLUS, HImode, operands)\"\n {\n@@ -5524,7 +5523,7 @@\n (define_insn \"*addqi_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q,q,r,r,Yp\")\n \t(plus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,q,0,r,Yp\")\n-\t\t (match_operand:QI 2 \"general_operand\" \"qn,qm,0,rn,0,ln\")))\n+\t\t (match_operand:QI 2 \"general_operand\" \"qn,m,0,rn,0,ln\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (PLUS, QImode, operands)\"\n {\n@@ -5587,7 +5586,7 @@\n (define_insn \"*addqi_1_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,q\"))\n \t(plus:QI (match_dup 0)\n-\t\t (match_operand:QI 1 \"general_operand\" \"qn,qm\")))\n+\t\t (match_operand:QI 1 \"general_operand\" \"qn,m\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"(! TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n@@ -5680,9 +5679,9 @@\n \t(compare\n \t  (plus:SWI\n \t    (match_operand:SWI 1 \"nonimmediate_operand\" \"%0,0,<r>\")\n-\t    (match_operand:SWI 2 \"<general_operand>\" \"<g>,<r><i>,0\"))\n+\t    (match_operand:SWI 2 \"<general_operand>\" \"<r><i>,m,0\"))\n \t  (const_int 0)))\n-   (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>,<r>m,<r>\")\n+   (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>,<r>\")\n \t(plus:SWI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n@@ -6073,11 +6072,10 @@\n \t\t   (sign_extend:<DWI>\n \t\t      (match_operand:SWI 1 \"nonimmediate_operand\" \"%0,0\"))\n \t\t   (sign_extend:<DWI>\n-\t\t      (match_operand:SWI 2 \"<general_sext_operand>\"\n-\t\t\t\t\t   \"<r>mWe,<r>We\")))\n+\t\t      (match_operand:SWI 2 \"<general_sext_operand>\" \"<r>We,m\")))\n \t\t(sign_extend:<DWI>\n \t\t   (plus:SWI (match_dup 1) (match_dup 2)))))\n-   (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>,<r>m\")\n+   (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n \t(plus:SWI (match_dup 1) (match_dup 2)))]\n   \"ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n   \"add{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n@@ -6091,9 +6089,9 @@\n \t\t      (match_operand:SWI 1 \"nonimmediate_operand\" \"0\"))\n \t\t   (match_operand:<DWI> 3 \"const_int_operand\" \"i\"))\n \t\t(sign_extend:<DWI>\n-\t\t   (plus:SWI (match_dup 1)\n-\t\t\t     (match_operand:SWI 2 \"x86_64_immediate_operand\"\n-\t\t\t\t\t\t  \"<i>\")))))\n+\t\t   (plus:SWI\n+\t\t     (match_dup 1)\n+\t\t     (match_operand:SWI 2 \"x86_64_immediate_operand\" \"<i>\")))))\n    (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m\")\n \t(plus:SWI (match_dup 1) (match_dup 2)))]\n   \"ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\n@@ -6297,11 +6295,10 @@\n   \"ix86_expand_binary_operator (MINUS, <MODE>mode, operands); DONE;\")\n \n (define_insn_and_split \"*sub<dwi>3_doubleword\"\n-  [(set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=r,o\")\n+  [(set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=ro,r\")\n \t(minus:<DWI>\n \t  (match_operand:<DWI> 1 \"nonimmediate_operand\" \"0,0\")\n-\t  (match_operand:<DWI> 2 \"x86_64_hilo_general_operand\"\n-\t\t\t\t\t\t\t\"ro<di>,r<di>\")))\n+\t  (match_operand:<DWI> 2 \"x86_64_hilo_general_operand\" \"r<di>,o\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\"\n   \"#\"\n@@ -6330,7 +6327,7 @@\n   [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n \t(minus:SWI\n \t  (match_operand:SWI 1 \"nonimmediate_operand\" \"0,0\")\n-\t  (match_operand:SWI 2 \"<general_operand>\" \"<r><i>,<r>m\")))\n+\t  (match_operand:SWI 2 \"<general_operand>\" \"<r><i>,m\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\"\n   \"sub{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n@@ -6351,7 +6348,7 @@\n (define_insn \"*subqi_1_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,q\"))\n \t(minus:QI (match_dup 0)\n-\t\t  (match_operand:QI 1 \"general_operand\" \"qn,qm\")))\n+\t\t  (match_operand:QI 1 \"general_operand\" \"qn,m\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"(! TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n@@ -6364,7 +6361,7 @@\n \t(compare\n \t  (minus:SWI\n \t    (match_operand:SWI 1 \"nonimmediate_operand\" \"0,0\")\n-\t    (match_operand:SWI 2 \"<general_operand>\" \"<r><i>,<r>m\"))\n+\t    (match_operand:SWI 2 \"<general_operand>\" \"<r><i>,m\"))\n \t  (const_int 0)))\n    (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n \t(minus:SWI (match_dup 1) (match_dup 2)))]\n@@ -6422,8 +6419,7 @@\n \t\t   (sign_extend:<DWI>\n \t\t      (match_operand:SWI 1 \"nonimmediate_operand\" \"0,0\"))\n \t\t   (sign_extend:<DWI>\n-\t\t      (match_operand:SWI 2 \"<general_sext_operand>\"\n-\t\t\t\t\t   \"<r>We,<r>m\")))\n+\t\t      (match_operand:SWI 2 \"<general_sext_operand>\" \"<r>We,m\")))\n \t\t(sign_extend:<DWI>\n \t\t   (minus:SWI (match_dup 1) (match_dup 2)))))\n    (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n@@ -6440,9 +6436,9 @@\n \t\t      (match_operand:SWI 1 \"nonimmediate_operand\" \"0\"))\n \t\t   (match_operand:<DWI> 3 \"const_int_operand\" \"i\"))\n \t\t(sign_extend:<DWI>\n-\t\t   (minus:SWI (match_dup 1)\n-\t\t\t      (match_operand:SWI 2 \"x86_64_immediate_operand\"\n-\t\t\t\t\t\t   \"<i>\")))))\n+\t\t   (minus:SWI\n+\t\t     (match_dup 1)\n+\t\t     (match_operand:SWI 2 \"x86_64_immediate_operand\" \"<i>\")))))\n    (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m\")\n \t(minus:SWI (match_dup 1) (match_dup 2)))]\n   \"ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\n@@ -6475,7 +6471,7 @@\n (define_insn \"*sub<mode>_3\"\n   [(set (reg FLAGS_REG)\n \t(compare (match_operand:SWI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t (match_operand:SWI 2 \"<general_operand>\" \"<r><i>,<r>m\")))\n+\t\t (match_operand:SWI 2 \"<general_operand>\" \"<r><i>,m\")))\n    (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n \t(minus:SWI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCmode)\n@@ -6518,7 +6514,7 @@\n \t    (match_operator:SWI 4 \"ix86_carry_flag_operator\"\n \t     [(match_operand 3 \"flags_reg_operand\") (const_int 0)])\n \t    (match_operand:SWI 1 \"nonimmediate_operand\" \"%0,0\"))\n-\t  (match_operand:SWI 2 \"<general_operand>\" \"<r><i>,<r>m\")))\n+\t  (match_operand:SWI 2 \"<general_operand>\" \"<r><i>,m\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n   \"adc{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n@@ -6618,7 +6614,7 @@\n \t    (match_operand:SWI 1 \"nonimmediate_operand\" \"0,0\")\n \t    (match_operator:SWI 4 \"ix86_carry_flag_operator\"\n \t     [(match_operand 3 \"flags_reg_operand\") (const_int 0)]))\n-\t  (match_operand:SWI 2 \"<general_operand>\" \"<r><i>,<r>m\")))\n+\t  (match_operand:SWI 2 \"<general_operand>\" \"<r><i>,m\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\"\n   \"sbb{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n@@ -6783,7 +6779,7 @@\n \t(compare:CCC\n \t    (plus:SWI\n \t\t(match_operand:SWI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t(match_operand:SWI 2 \"<general_operand>\" \"<r><i>,<r>m\"))\n+\t\t(match_operand:SWI 2 \"<general_operand>\" \"<r><i>,m\"))\n \t    (match_dup 1)))\n    (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n \t(plus:SWI (match_dup 1) (match_dup 2)))]\n@@ -6824,7 +6820,7 @@\n \t(compare:CCC\n \t    (plus:SWI\n \t\t(match_operand:SWI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t(match_operand:SWI 2 \"<general_operand>\" \"<r><i>,<r>m\"))\n+\t\t(match_operand:SWI 2 \"<general_operand>\" \"<r><i>,m\"))\n \t    (match_dup 2)))\n    (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n \t(plus:SWI (match_dup 1) (match_dup 2)))]\n@@ -8431,7 +8427,7 @@\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,rm,r,r\")\n \t(and:DI\n \t (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0,qm\")\n-\t (match_operand:DI 2 \"x86_64_szext_general_operand\" \"Z,re,rm,L\")))\n+\t (match_operand:DI 2 \"x86_64_szext_general_operand\" \"Z,re,m,L\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (AND, DImode, operands)\"\n   \"@\n@@ -8516,7 +8512,7 @@\n (define_insn \"*and<mode>_1\"\n   [(set (match_operand:SWI24 0 \"nonimmediate_operand\" \"=rm,r,Ya\")\n \t(and:SWI24 (match_operand:SWI24 1 \"nonimmediate_operand\" \"%0,0,qm\")\n-\t\t   (match_operand:SWI24 2 \"<general_operand>\" \"r<i>,rm,L\")))\n+\t\t   (match_operand:SWI24 2 \"<general_operand>\" \"r<i>,m,L\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (AND, <MODE>mode, operands)\"\n   \"@\n@@ -8537,7 +8533,7 @@\n (define_insn \"*andqi_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q,r\")\n \t(and:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-\t\t(match_operand:QI 2 \"general_operand\" \"qn,qmn,rn\")))\n+\t\t(match_operand:QI 2 \"general_operand\" \"qn,m,rn\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (AND, QImode, operands)\"\n   \"@\n@@ -8555,7 +8551,7 @@\n (define_insn \"*andqi_1_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,q\"))\n \t(and:QI (match_dup 0)\n-\t\t(match_operand:QI 1 \"general_operand\" \"qn,qmn\")))\n+\t\t(match_operand:QI 1 \"general_operand\" \"qn,m\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n@@ -8644,9 +8640,9 @@\n \t(compare\n \t (and:DI\n \t  (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-\t  (match_operand:DI 2 \"x86_64_szext_general_operand\" \"Z,rem,re\"))\n+\t  (match_operand:DI 2 \"x86_64_szext_general_operand\" \"Z,re,m\"))\n \t (const_int 0)))\n-   (set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,rm\")\n+   (set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,rm,r\")\n \t(and:DI (match_dup 1) (match_dup 2)))]\n   \"TARGET_64BIT\n    && ix86_match_ccmode\n@@ -8687,9 +8683,9 @@\n   [(set (reg FLAGS_REG)\n \t(compare (and:QI\n \t\t  (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-\t\t  (match_operand:QI 2 \"general_operand\" \"qmn,qn,n\"))\n+\t\t  (match_operand:QI 2 \"general_operand\" \"qn,m,n\"))\n \t\t (const_int 0)))\n-   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,qm,r\")\n+   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q,r\")\n \t(and:QI (match_dup 1) (match_dup 2)))]\n   \"ix86_binary_operator_ok (AND, QImode, operands)\n    && ix86_match_ccmode (insn,\n@@ -8716,9 +8712,9 @@\n   [(set (reg FLAGS_REG)\n \t(compare (and:SWI124\n \t\t  (match_operand:SWI124 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t  (match_operand:SWI124 2 \"<general_operand>\" \"<g>,<r><i>\"))\n+\t\t  (match_operand:SWI124 2 \"<general_operand>\" \"<r><i>,m\"))\n \t\t (const_int 0)))\n-   (set (match_operand:SWI124 0 \"nonimmediate_operand\" \"=<r>,<r>m\")\n+   (set (match_operand:SWI124 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n \t(and:SWI124 (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCNOmode)\n    && ix86_binary_operator_ok (AND, <MODE>mode, operands)\"\n@@ -8728,9 +8724,8 @@\n \n (define_insn \"*andqi_2_slp\"\n   [(set (reg FLAGS_REG)\n-\t(compare (and:QI\n-\t\t   (match_operand:QI 0 \"nonimmediate_operand\" \"+q,qm\")\n-\t\t   (match_operand:QI 1 \"nonimmediate_operand\" \"qmn,qn\"))\n+\t(compare (and:QI (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,q\")\n+\t\t \t (match_operand:QI 1 \"nonimmediate_operand\" \"qn,m\"))\n \t\t (const_int 0)))\n    (set (strict_low_part (match_dup 0))\n \t(and:QI (match_dup 0) (match_dup 1)))]\n@@ -9006,10 +9001,10 @@\n })\n \n (define_insn \"*<code><mode>_1\"\n-  [(set (match_operand:SWI248 0 \"nonimmediate_operand\" \"=r,rm\")\n+  [(set (match_operand:SWI248 0 \"nonimmediate_operand\" \"=rm,r\")\n \t(any_or:SWI248\n \t (match_operand:SWI248 1 \"nonimmediate_operand\" \"%0,0\")\n-\t (match_operand:SWI248 2 \"<general_operand>\" \"<g>,r<i>\")))\n+\t (match_operand:SWI248 2 \"<general_operand>\" \"r<i>,m\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"<logic>{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n@@ -9086,9 +9081,9 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*<code>qi_1\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,m,r\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q,r\")\n \t(any_or:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-\t\t   (match_operand:QI 2 \"general_operand\" \"qmn,qn,rn\")))\n+\t\t   (match_operand:QI 2 \"general_operand\" \"qn,m,rn\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, QImode, operands)\"\n   \"@\n@@ -9104,9 +9099,9 @@\n \t   (symbol_ref \"true\")))])\n \n (define_insn \"*<code>qi_1_slp\"\n-  [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+q,m\"))\n+  [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,q\"))\n \t(any_or:QI (match_dup 0)\n-\t\t   (match_operand:QI 1 \"general_operand\" \"qmn,qn\")))\n+\t\t   (match_operand:QI 1 \"general_operand\" \"qn,m\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n@@ -9118,9 +9113,9 @@\n   [(set (reg FLAGS_REG)\n \t(compare (any_or:SWI\n \t\t  (match_operand:SWI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t  (match_operand:SWI 2 \"<general_operand>\" \"<g>,<r><i>\"))\n+\t\t  (match_operand:SWI 2 \"<general_operand>\" \"<r><i>,m\"))\n \t\t (const_int 0)))\n-   (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>,<r>m\")\n+   (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n \t(any_or:SWI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCNOmode)\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n@@ -9159,8 +9154,8 @@\n \n (define_insn \"*<code>qi_2_slp\"\n   [(set (reg FLAGS_REG)\n-\t(compare (any_or:QI (match_operand:QI 0 \"nonimmediate_operand\" \"+q,qm\")\n-\t\t\t    (match_operand:QI 1 \"general_operand\" \"qmn,qn\"))\n+\t(compare (any_or:QI (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,q\")\n+\t\t\t    (match_operand:QI 1 \"general_operand\" \"qn,m\"))\n \t\t (const_int 0)))\n    (set (strict_low_part (match_dup 0))\n \t(any_or:QI (match_dup 0) (match_dup 1)))]"}]}