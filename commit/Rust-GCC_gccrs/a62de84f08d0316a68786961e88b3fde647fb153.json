{"sha": "a62de84f08d0316a68786961e88b3fde647fb153", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTYyZGU4NGYwOGQwMzE2YTY4Nzg2OTYxZTg4YjNmZGU2NDdmYjE1Mw==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1997-04-01T14:13:57Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1997-04-01T14:13:57Z"}, "message": "(ADJUST_COSTS): Define.\n\nFrom-SVN: r13825", "tree": {"sha": "9997609cfd2c54a6c49b25207a7f54e70b15820e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9997609cfd2c54a6c49b25207a7f54e70b15820e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a62de84f08d0316a68786961e88b3fde647fb153", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a62de84f08d0316a68786961e88b3fde647fb153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a62de84f08d0316a68786961e88b3fde647fb153", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a62de84f08d0316a68786961e88b3fde647fb153/comments", "author": null, "committer": null, "parents": [{"sha": "86144b75fef3ae7025d389ea751422cbca1285d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86144b75fef3ae7025d389ea751422cbca1285d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86144b75fef3ae7025d389ea751422cbca1285d5"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "e88fa08be8931c725f55be73166c895d29e31435", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a62de84f08d0316a68786961e88b3fde647fb153/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a62de84f08d0316a68786961e88b3fde647fb153/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=a62de84f08d0316a68786961e88b3fde647fb153", "patch": "@@ -1730,7 +1730,36 @@ extern int pragma_interrupt;\n    clear if this would give better code.  If implemented, should check for\n    compatibility problems.  */\n \n-/* ??? Define ADJUST_COSTS?  */\n+/* A C statement (sans semicolon) to update the integer variable COST\n+   based on the relationship between INSN that is dependent on\n+   DEP_INSN through the dependence LINK.  The default is to make no\n+   adjustment to COST.  This can be used for example to specify to\n+   the scheduler that an output- or anti-dependence does not incur\n+   the same cost as a data-dependence.  */\n+\n+/* ??? Should anticipate the effect of delayed branch scheduling\n+   and arrange for a second instruction to be put between the\n+   load of the function's address and the call.  */\n+\n+#define ADJUST_COST(insn,link,dep_insn,cost)\t\t\t\t\\\n+  if (GET_CODE(insn) == CALL_INSN)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      /* The only input for a call that is timing-critical is the\t\\\n+\t function's address.  */\t\t\t\t\t\\\n+      rtx call = PATTERN (insn);\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      if (GET_CODE (call) == PARALLEL)\t\t\t\t\t\\\n+\tcall = XVECEXP (call, 0 ,0);\t\t\t\t\t\\\n+      if (GET_CODE (call) == SET)\t\t\t\t\t\\\n+\tcall = SET_SRC (call);\t\t\t\t\t\t\\\n+      if (GET_CODE (call) == CALL && GET_CODE (XEXP (call, 0)) == MEM)\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  rtx set = single_set (dep_insn);\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t  if (set && ! rtx_equal_p (SET_DEST (set), XEXP (XEXP (call, 0), 0)))\\\n+\t    (cost) = 0;\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      }\n \n /* Since the SH architecture lacks negative address offsets,\n    the givs should be sorted smallest to largest so combine_givs"}]}