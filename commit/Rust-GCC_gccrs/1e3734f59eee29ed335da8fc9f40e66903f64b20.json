{"sha": "1e3734f59eee29ed335da8fc9f40e66903f64b20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUzNzM0ZjU5ZWVlMjllZDMzNWRhOGZjOWY0MGU2NjkwM2Y2NGIyMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-10-22T21:11:01Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-10-22T21:11:01Z"}, "message": "Make more use of HWI_COMPUTABLE_MODE_P\n\nThis patch uses HWI_COMPUTABLE_MODE_P (X) instead of\nGET_MODE_PRECISION (X) <= HOST_BITS_PER_WIDE_INT in cases\nwhere X also needs to be a scalar integer.\n\n2017-10-22  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* combine.c (simplify_comparison): Use HWI_COMPUTABLE_MODE_P.\n\t(record_promoted_value): Likewise.\n\t* expr.c (expand_expr_real_2): Likewise.\n\t* ree.c (update_reg_equal_equiv_notes): Likewise.\n\t(combine_set_extension): Likewise.\n\t* rtlanal.c (low_bitmask_len): Likewise.\n\t* simplify-rtx.c (neg_const_int): Likewise.\n\t(simplify_binary_operation_1): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r253990", "tree": {"sha": "51203651e08ac8824d7052d06963b16ff7492539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51203651e08ac8824d7052d06963b16ff7492539"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e3734f59eee29ed335da8fc9f40e66903f64b20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e3734f59eee29ed335da8fc9f40e66903f64b20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e3734f59eee29ed335da8fc9f40e66903f64b20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e3734f59eee29ed335da8fc9f40e66903f64b20/comments", "author": null, "committer": null, "parents": [{"sha": "e10326ff910ab337741d0781a536435d51c5f044", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e10326ff910ab337741d0781a536435d51c5f044", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e10326ff910ab337741d0781a536435d51c5f044"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "29cd5907c58174b732179eaf4da99d1a94d821a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3734f59eee29ed335da8fc9f40e66903f64b20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3734f59eee29ed335da8fc9f40e66903f64b20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e3734f59eee29ed335da8fc9f40e66903f64b20", "patch": "@@ -1,3 +1,16 @@\n+2017-10-22  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* combine.c (simplify_comparison): Use HWI_COMPUTABLE_MODE_P.\n+\t(record_promoted_value): Likewise.\n+\t* expr.c (expand_expr_real_2): Likewise.\n+\t* ree.c (update_reg_equal_equiv_notes): Likewise.\n+\t(combine_set_extension): Likewise.\n+\t* rtlanal.c (low_bitmask_len): Likewise.\n+\t* simplify-rtx.c (neg_const_int): Likewise.\n+\t(simplify_binary_operation_1): Likewise.\n+\n 2017-10-22  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "3b912faa30d8f6117ab6ff7352827afb7de3ecce", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3734f59eee29ed335da8fc9f40e66903f64b20/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3734f59eee29ed335da8fc9f40e66903f64b20/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=1e3734f59eee29ed335da8fc9f40e66903f64b20", "patch": "@@ -11976,10 +11976,9 @@ simplify_comparison (enum rtx_code code, rtx *pop0, rtx *pop1)\n \n \t  if (paradoxical_subreg_p (inner_op0)\n \t      && GET_CODE (inner_op1) == SUBREG\n+\t      && HWI_COMPUTABLE_MODE_P (GET_MODE (SUBREG_REG (inner_op0)))\n \t      && (GET_MODE (SUBREG_REG (inner_op0))\n \t\t  == GET_MODE (SUBREG_REG (inner_op1)))\n-\t      && (GET_MODE_PRECISION (GET_MODE (SUBREG_REG (inner_op0)))\n-\t\t  <= HOST_BITS_PER_WIDE_INT)\n \t      && (0 == ((~c0) & nonzero_bits (SUBREG_REG (inner_op0),\n \t\t\t\t\t     GET_MODE (SUBREG_REG (inner_op0)))))\n \t      && (0 == ((~c1) & nonzero_bits (SUBREG_REG (inner_op1),\n@@ -13318,7 +13317,7 @@ record_promoted_value (rtx_insn *insn, rtx subreg)\n   unsigned int regno = REGNO (SUBREG_REG (subreg));\n   machine_mode mode = GET_MODE (subreg);\n \n-  if (GET_MODE_PRECISION (mode) > HOST_BITS_PER_WIDE_INT)\n+  if (!HWI_COMPUTABLE_MODE_P (mode))\n     return;\n \n   for (links = LOG_LINKS (insn); links;)"}, {"sha": "cdf7ca2cf5c6fb575513a6a8d6a498f71485b4af", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3734f59eee29ed335da8fc9f40e66903f64b20/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3734f59eee29ed335da8fc9f40e66903f64b20/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=1e3734f59eee29ed335da8fc9f40e66903f64b20", "patch": "@@ -8453,7 +8453,7 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \t  if (modifier == EXPAND_STACK_PARM)\n \t    target = 0;\n \t  if (TREE_CODE (treeop0) == INTEGER_CST\n-\t      && GET_MODE_PRECISION (mode) <= HOST_BITS_PER_WIDE_INT\n+\t      && HWI_COMPUTABLE_MODE_P (mode)\n \t      && TREE_CONSTANT (treeop1))\n \t    {\n \t      rtx constant_part;\n@@ -8476,7 +8476,7 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \t    }\n \n \t  else if (TREE_CODE (treeop1) == INTEGER_CST\n-\t\t   && GET_MODE_PRECISION (mode) <= HOST_BITS_PER_WIDE_INT\n+\t\t   && HWI_COMPUTABLE_MODE_P (mode)\n \t\t   && TREE_CONSTANT (treeop0))\n \t    {\n \t      rtx constant_part;"}, {"sha": "811de5a0795abd8b5a8adcc64b364bda8d2e66f8", "filename": "gcc/ree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3734f59eee29ed335da8fc9f40e66903f64b20/gcc%2Free.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3734f59eee29ed335da8fc9f40e66903f64b20/gcc%2Free.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Free.c?ref=1e3734f59eee29ed335da8fc9f40e66903f64b20", "patch": "@@ -269,7 +269,7 @@ update_reg_equal_equiv_notes (rtx_insn *insn, machine_mode new_mode,\n \t  /* Update equivalency constants.  Recall that RTL constants are\n \t     sign-extended.  */\n \t  if (GET_CODE (orig_src) == CONST_INT\n-\t      && HOST_BITS_PER_WIDE_INT >= GET_MODE_BITSIZE (new_mode))\n+\t      && HWI_COMPUTABLE_MODE_P (new_mode))\n \t    {\n \t      if (INTVAL (orig_src) >= 0 || code == SIGN_EXTEND)\n \t\t/* Nothing needed.  */;\n@@ -337,7 +337,7 @@ combine_set_extension (ext_cand *cand, rtx_insn *curr_insn, rtx *orig_set)\n   /* Merge constants by directly moving the constant into the register under\n      some conditions.  Recall that RTL constants are sign-extended.  */\n   if (GET_CODE (orig_src) == CONST_INT\n-      && HOST_BITS_PER_WIDE_INT >= GET_MODE_BITSIZE (cand->mode))\n+      && HWI_COMPUTABLE_MODE_P (cand->mode))\n     {\n       if (INTVAL (orig_src) >= 0 || cand->code == SIGN_EXTEND)\n \tnew_set = gen_rtx_SET (new_reg, orig_src);"}, {"sha": "92fc7b81cebb44d6722145a17645d1ca9171fa5b", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3734f59eee29ed335da8fc9f40e66903f64b20/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3734f59eee29ed335da8fc9f40e66903f64b20/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=1e3734f59eee29ed335da8fc9f40e66903f64b20", "patch": "@@ -5810,7 +5810,7 @@ low_bitmask_len (machine_mode mode, unsigned HOST_WIDE_INT m)\n {\n   if (mode != VOIDmode)\n     {\n-      if (GET_MODE_PRECISION (mode) > HOST_BITS_PER_WIDE_INT)\n+      if (!HWI_COMPUTABLE_MODE_P (mode))\n \treturn -1;\n       m &= GET_MODE_MASK (mode);\n     }"}, {"sha": "ba6b225b731be269330eef1f322d7601a9681fae", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3734f59eee29ed335da8fc9f40e66903f64b20/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3734f59eee29ed335da8fc9f40e66903f64b20/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=1e3734f59eee29ed335da8fc9f40e66903f64b20", "patch": "@@ -62,7 +62,7 @@ neg_const_int (machine_mode mode, const_rtx i)\n {\n   unsigned HOST_WIDE_INT val = -UINTVAL (i);\n   \n-  if (GET_MODE_PRECISION (mode) > HOST_BITS_PER_WIDE_INT\n+  if (!HWI_COMPUTABLE_MODE_P (mode)\n       && val == UINTVAL (i))\n     return simplify_const_unary_operation (NEG, mode, CONST_CAST_RTX (i),\n \t\t\t\t\t   mode);\n@@ -3341,7 +3341,8 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n       if (trueop0 == CONST0_RTX (mode) && ! side_effects_p (op1))\n \treturn op0;\n       /* Rotating ~0 always results in ~0.  */\n-      if (CONST_INT_P (trueop0) && width <= HOST_BITS_PER_WIDE_INT\n+      if (CONST_INT_P (trueop0)\n+\t  && HWI_COMPUTABLE_MODE_P (mode)\n \t  && UINTVAL (trueop0) == GET_MODE_MASK (mode)\n \t  && ! side_effects_p (op1))\n \treturn op0;\n@@ -3420,7 +3421,7 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n       goto canonicalize_shift;\n \n     case SMIN:\n-      if (width <= HOST_BITS_PER_WIDE_INT\n+      if (HWI_COMPUTABLE_MODE_P (mode)\n \t  && mode_signbit_p (mode, trueop1)\n \t  && ! side_effects_p (op0))\n \treturn op1;\n@@ -3432,7 +3433,7 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n       break;\n \n     case SMAX:\n-      if (width <= HOST_BITS_PER_WIDE_INT\n+      if (HWI_COMPUTABLE_MODE_P (mode)\n \t  && CONST_INT_P (trueop1)\n \t  && (UINTVAL (trueop1) == GET_MODE_MASK (mode) >> 1)\n \t  && ! side_effects_p (op0))"}]}