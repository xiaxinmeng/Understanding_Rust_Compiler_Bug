{"sha": "5e0231c231404677aa1b90e499b54cc1ff6328a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUwMjMxYzIzMTQwNDY3N2FhMWI5MGU0OTliNTRjYzFmZjYzMjhhNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-08-23T06:51:58Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-08-23T06:51:58Z"}, "message": "Allow non-constexpr variable templates.\n\n\t* decl2.c (note_variable_template_instantiation): New.\n\t* cp-tree.h: Declare it.\n\t* pt.c (instantiate_decl): Call it.\n\t(push_template_decl_real): Allow non-constexpr variable templates.\n\t* semantics.c (finish_id_expression): Mark the variable template\n\tinstantiation as used.\n\t* mangle.c (write_mangled_name): Variable template instantiations\n\tare mangled.\n\t* parser.c (cp_parser_init_declarator): Complain about\n\tnon-function implicit templates.\n\nFrom-SVN: r214396", "tree": {"sha": "c98497e8bebb0ca8566b2a4a78834a6b21529061", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c98497e8bebb0ca8566b2a4a78834a6b21529061"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e0231c231404677aa1b90e499b54cc1ff6328a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e0231c231404677aa1b90e499b54cc1ff6328a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e0231c231404677aa1b90e499b54cc1ff6328a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e0231c231404677aa1b90e499b54cc1ff6328a4/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a545cacd6840d61110cb2d4b17444bf95fe64959", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a545cacd6840d61110cb2d4b17444bf95fe64959", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a545cacd6840d61110cb2d4b17444bf95fe64959"}], "stats": {"total": 94, "additions": 64, "deletions": 30}, "files": [{"sha": "04b0e00b6cacccaecffa05097fa368062fcaa76d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0231c231404677aa1b90e499b54cc1ff6328a4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0231c231404677aa1b90e499b54cc1ff6328a4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5e0231c231404677aa1b90e499b54cc1ff6328a4", "patch": "@@ -1,3 +1,17 @@\n+2014-08-23  Jason Merrill  <jason@redhat.com>\n+\n+\tAllow non-constexpr variable templates.\n+\t* decl2.c (note_variable_template_instantiation): New.\n+\t* cp-tree.h: Declare it.\n+\t* pt.c (instantiate_decl): Call it.\n+\t(push_template_decl_real): Allow non-constexpr variable templates.\n+\t* semantics.c (finish_id_expression): Mark the variable template\n+\tinstantiation as used.\n+\t* mangle.c (write_mangled_name): Variable template instantiations\n+\tare mangled.\n+\t* parser.c (cp_parser_init_declarator): Complain about\n+\tnon-function implicit templates.\n+\n 2014-08-22  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/62199"}, {"sha": "5d4df6ba7dbd03a4c671ca8d203f86abd34f3f0c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0231c231404677aa1b90e499b54cc1ff6328a4/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0231c231404677aa1b90e499b54cc1ff6328a4/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5e0231c231404677aa1b90e499b54cc1ff6328a4", "patch": "@@ -5051,6 +5051,8 @@ variable_template_p (tree t)\n {\n   if (TREE_CODE (t) != TEMPLATE_DECL)\n     return false;\n+  if (!PRIMARY_TEMPLATE_P (t))\n+    return false;\n   if (tree r = DECL_TEMPLATE_RESULT (t))\n     return VAR_P (r);\n   return false;\n@@ -5393,6 +5395,7 @@ extern tree get_tls_wrapper_fn\t\t\t(tree);\n extern void mark_needed\t\t\t\t(tree);\n extern bool decl_needed_p\t\t\t(tree);\n extern void note_vague_linkage_fn\t\t(tree);\n+extern void note_variable_template_instantiation (tree);\n extern tree build_artificial_parm\t\t(tree, tree);\n extern bool possibly_inlined_p\t\t\t(tree);\n extern int parm_index                           (tree);"}, {"sha": "74a10fb74fbdef4943ccec9be6d64848c95ec214", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0231c231404677aa1b90e499b54cc1ff6328a4/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0231c231404677aa1b90e499b54cc1ff6328a4/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=5e0231c231404677aa1b90e499b54cc1ff6328a4", "patch": "@@ -787,6 +787,14 @@ note_vague_linkage_fn (tree decl)\n   vec_safe_push (deferred_fns, decl);\n }\n \n+/* As above, but for variable template instantiations.  */\n+\n+void\n+note_variable_template_instantiation (tree decl)\n+{\n+  vec_safe_push (pending_statics, decl);\n+}\n+\n /* We have just processed the DECL, which is a static data member.\n    The other parameters are as for cp_finish_decl.  */\n "}, {"sha": "283983fbe02c066ea7aef89f22f04b221f5ca86b", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0231c231404677aa1b90e499b54cc1ff6328a4/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0231c231404677aa1b90e499b54cc1ff6328a4/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=5e0231c231404677aa1b90e499b54cc1ff6328a4", "patch": "@@ -667,6 +667,8 @@ write_mangled_name (const tree decl, bool top_level)\n \t}\n     }\n   else if (VAR_P (decl)\n+\t   /* Variable template instantiations are mangled.  */\n+\t   && !(DECL_LANG_SPECIFIC (decl) && DECL_TEMPLATE_INFO (decl))\n \t   /* The names of non-static global variables aren't mangled.  */\n \t   && DECL_EXTERNAL_LINKAGE_P (decl)\n \t   && (CP_DECL_CONTEXT (decl) == global_namespace"}, {"sha": "7d8b7101cd19aacb8ecc6c4cbcce5a661dc18a48", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0231c231404677aa1b90e499b54cc1ff6328a4/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0231c231404677aa1b90e499b54cc1ff6328a4/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5e0231c231404677aa1b90e499b54cc1ff6328a4", "patch": "@@ -16779,6 +16779,8 @@ cp_parser_init_declarator (cp_parser* parser,\n   /* Peek at the next token.  */\n   token = cp_lexer_peek_token (parser->lexer);\n \n+  bool bogus_implicit_tmpl = false;\n+\n   if (function_declarator_p (declarator))\n     {\n       /* Check to see if the token indicates the start of a\n@@ -16831,6 +16833,19 @@ cp_parser_init_declarator (cp_parser* parser,\n \t  return decl;\n \t}\n     }\n+  else if (parser->fully_implicit_function_template_p)\n+    {\n+      /* A non-template declaration involving a function parameter list\n+\t containing an implicit template parameter will be made into a\n+\t template.  If the resulting declaration is not going to be an\n+\t actual function then finish the template scope here to prevent it.\n+\t An error message will be issued once we have a decl to talk about.\n+\n+         FIXME probably we should do type deduction rather than create an\n+         implicit template, but the standard currently doesn't allow it. */\n+      bogus_implicit_tmpl = true;\n+      finish_fully_implicit_template (parser, NULL_TREE);\n+    }\n \n   /* [dcl.dcl]\n \n@@ -16996,21 +17011,10 @@ cp_parser_init_declarator (cp_parser* parser,\n       warning (OPT_Wattributes,\n \t       \"attributes after parenthesized initializer ignored\");\n \n-  /* A non-template declaration involving a function parameter list containing\n-     an implicit template parameter will have been made into a template.  If it\n-     turns out that the resulting declaration is not an actual function then\n-     finish the template declaration here.  An error message will already have\n-     been issued.  */\n-  if (parser->fully_implicit_function_template_p)\n-    if (!function_declarator_p (declarator))\n-      {\n-\tif (pushed_scope)\n-\t  {\n-\t    pop_scope (pushed_scope);\n-\t    pushed_scope = 0;\n-\t  }\n-\tfinish_fully_implicit_template (parser, /*member_decl_opt=*/0);\n-      }\n+  /* And now complain about a non-function implicit template.  */\n+  if (bogus_implicit_tmpl)\n+    error_at (DECL_SOURCE_LOCATION (decl),\n+\t      \"non-function %qD declared as implicit template\", decl);\n \n   /* For an in-class declaration, use `grokfield' to create the\n      declaration.  */"}, {"sha": "14b5bfb190a498292ac9015e1e74ba20dca5256a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0231c231404677aa1b90e499b54cc1ff6328a4/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0231c231404677aa1b90e499b54cc1ff6328a4/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5e0231c231404677aa1b90e499b54cc1ff6328a4", "patch": "@@ -4777,14 +4777,7 @@ push_template_decl_real (tree decl, bool is_friend)\n \t/* alias-declaration */\n \tgcc_assert (!DECL_ARTIFICIAL (decl));\n       else if (VAR_P (decl))\n-        {\n-          if (!DECL_DECLARED_CONSTEXPR_P (decl))\n-            {\n-              sorry (\"template declaration of non-constexpr variable %qD\",\n-\t\t     decl);\n-              return error_mark_node;\n-            }\n-        }\n+\t/* C++14 variable template. */;\n       else\n \t{\n \t  error (\"template declaration of %q#D\", decl);\n@@ -20106,6 +20099,9 @@ instantiate_decl (tree d, int defer_ok,\n \n       if (enter_context)\n         pop_nested_class ();\n+\n+      if (variable_template_p (td))\n+\tnote_variable_template_instantiation (d);\n     }\n   else if (TREE_CODE (d) == FUNCTION_DECL && DECL_DEFAULTED_FN (code_pattern))\n     synthesize_method (d);"}, {"sha": "aed820cdda560ebda43589ce3f9f832a15edc4f1", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0231c231404677aa1b90e499b54cc1ff6328a4/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0231c231404677aa1b90e499b54cc1ff6328a4/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=5e0231c231404677aa1b90e499b54cc1ff6328a4", "patch": "@@ -3512,6 +3512,7 @@ finish_id_expression (tree id_expression,\n \t       && variable_template_p (TREE_OPERAND (decl, 0)))\n \t{\n \t  decl = finish_template_variable (decl);\n+\t  mark_used (decl);\n \t}\n       else if (scope)\n \t{"}, {"sha": "ce90483ce8c619cde42eb021750bd56ad239fac6", "filename": "gcc/testsuite/g++.dg/cpp1y/pr59638.C", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0231c231404677aa1b90e499b54cc1ff6328a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59638.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0231c231404677aa1b90e499b54cc1ff6328a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59638.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59638.C?ref=5e0231c231404677aa1b90e499b54cc1ff6328a4", "patch": "@@ -1,13 +1,12 @@\n // PR c++/59638\n // { dg-do compile { target c++1y } }\n // { dg-options \"\" }\n-// { dg-excess-errors \"sorry\" }\n \n-void (*a)(auto);         // { dg-error \"\" \"\" { xfail *-*-* } }\n+void (*a)(auto);         // { dg-error \"\" }\n \n-void (*b)(auto) = 0;     // { dg-error \"\" \"\" { xfail *-*-* } }\n+void (*b)(auto) = 0;     // { dg-error \"\" }\n \n-typedef void (*f)(auto); // { dg-error \"template declaration\" }\n+typedef void (*f)(auto); // { dg-error \"\" }\n \n struct A\n {"}, {"sha": "314d6dacf10fba4a5dbcbeb1da5598d4cd903900", "filename": "gcc/testsuite/g++.dg/cpp1y/pr60626.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0231c231404677aa1b90e499b54cc1ff6328a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60626.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0231c231404677aa1b90e499b54cc1ff6328a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60626.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60626.C?ref=5e0231c231404677aa1b90e499b54cc1ff6328a4", "patch": "@@ -4,4 +4,4 @@\n \n struct A {};\n \n-void (*A::p)(auto) = 0;  // { dg-error \"static member|non-template\" }\n+void (*A::p)(auto) = 0;  // { dg-error \"static member|template\" }"}, {"sha": "1e59cf42738c34f88c0ed48d6c01df189b0a981b", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ7.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0231c231404677aa1b90e499b54cc1ff6328a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0231c231404677aa1b90e499b54cc1ff6328a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ7.C?ref=5e0231c231404677aa1b90e499b54cc1ff6328a4", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile { target c++1y } }\n+\n+template <class T> T var = 0;\n+\n+int main()\n+{\n+  var<int> = 42;\n+}"}, {"sha": "08d65e9a8272c076b39a019ae15ec93baed7815e", "filename": "gcc/testsuite/g++.old-deja/g++.pt/var1.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0231c231404677aa1b90e499b54cc1ff6328a4/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fvar1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0231c231404677aa1b90e499b54cc1ff6328a4/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fvar1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fvar1.C?ref=5e0231c231404677aa1b90e499b54cc1ff6328a4", "patch": "@@ -1,5 +1,4 @@\n // { dg-do assemble  }\n // Origin: Jason Merrill <jason@cygnus.com>\n-// { dg-excess-errors \"sorry\" }\n \n-template <class T> T t; // template declaration of t\n+template <class T> T t; // { dg-error \"\" \"\" { target { ! c++1y } } } template declaration of t"}]}