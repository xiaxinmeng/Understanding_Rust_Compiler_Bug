{"sha": "5e606ed90a1bed878071b6b5a3ef9b97b3d99838", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU2MDZlZDkwYTFiZWQ4NzgwNzFiNmI1YTNlZjliOTdiM2Q5OTgzOA==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-02-03T08:06:11Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-02-03T08:06:11Z"}, "message": "slp: Split out patterns away from using SLP_ONLY into their own flag\n\nPreviously the SLP pattern matcher was using STMT_VINFO_SLP_VECT_ONLY as a way\nto dissolve the SLP only patterns during SLP cancellation.  However it seems\nlike the semantics for STMT_VINFO_SLP_VECT_ONLY are slightly different than what\nI expected.\n\nNamely that the non-SLP path can still use a statement marked\nSTMT_VINFO_SLP_VECT_ONLY.  One such example is masked loads which are used both\nin the SLP and non-SLP path.\n\nTo fix this I now introduce a new flag STMT_VINFO_SLP_VECT_ONLY_PATTERN which is\nused only by the pattern matcher.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/98928\n\t* tree-vect-loop.c (vect_analyze_loop_2): Change\n\tSTMT_VINFO_SLP_VECT_ONLY to STMT_VINFO_SLP_VECT_ONLY_PATTERN.\n\t* tree-vect-slp-patterns.c (complex_pattern::build): Likewise.\n\t* tree-vectorizer.h (STMT_VINFO_SLP_VECT_ONLY_PATTERN): New.\n\t(class _stmt_vec_info): Add slp_vect_pattern_only_p.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/98928\n\t* gcc.target/i386/pr98928.c: New test.", "tree": {"sha": "2a6db1e9b76837733e48a50349a76c1e4bd014d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a6db1e9b76837733e48a50349a76c1e4bd014d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e606ed90a1bed878071b6b5a3ef9b97b3d99838", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e606ed90a1bed878071b6b5a3ef9b97b3d99838", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e606ed90a1bed878071b6b5a3ef9b97b3d99838", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e606ed90a1bed878071b6b5a3ef9b97b3d99838/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "548b75d82229cf30052db3ad13e34115335cd9d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/548b75d82229cf30052db3ad13e34115335cd9d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/548b75d82229cf30052db3ad13e34115335cd9d8"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "9503b579a88d95c427d3e3e5a71565b0c048c125", "filename": "gcc/testsuite/gcc.target/i386/pr98928.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e606ed90a1bed878071b6b5a3ef9b97b3d99838/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98928.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e606ed90a1bed878071b6b5a3ef9b97b3d99838/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98928.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98928.c?ref=5e606ed90a1bed878071b6b5a3ef9b97b3d99838", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Ofast -march=skylake-avx512 -fwhole-program -w\" } */\n+\n+typedef float MagickRealType;\n+typedef short Quantum;\n+float InterpolateMagickPixelPacket_alpha[1];\n+int InterpolateMagickPixelPacket_i;\n+\n+void InterpolateMagickPixelPacket();\n+\n+void main() { InterpolateMagickPixelPacket(); }\n+\n+typedef struct {\n+  MagickRealType red, green, blue, opacity, index;\n+} MagickPixelPacket;\n+typedef struct {\n+  Quantum blue, green, red, opacity;\n+} PixelPacket;\n+struct _Image {\n+  int colorspace;\n+  int matte;\n+} GetMagickPixelPacket(MagickPixelPacket *pixel) {\n+  pixel->red = pixel->green = pixel->blue = 0.0;\n+}\n+int AlphaBlendMagickPixelPacket(struct _Image *image, PixelPacket *color,\n+                            Quantum *indexes, MagickPixelPacket *pixel,\n+                            MagickRealType *alpha) {\n+  if (image->matte) {\n+    *alpha = pixel->red = pixel->green = pixel->blue = pixel->opacity =\n+        color->opacity;\n+    pixel->index = 0.0;\n+    if (image->colorspace)\n+      pixel->index = *indexes;\n+    return 0;\n+  }\n+  *alpha = 1.0 / 0.2;\n+  pixel->red = *alpha * color->red;\n+  pixel->green = *alpha * color->green;\n+  pixel->blue = *alpha * color->blue;\n+  pixel->opacity = pixel->index = 0.0;\n+  if (image->colorspace && indexes)\n+    pixel->index = *indexes;\n+}\n+MagickPixelPacket InterpolateMagickPixelPacket_pixels[1];\n+PixelPacket InterpolateMagickPixelPacket_p;\n+\n+void\n+InterpolateMagickPixelPacket(struct _Image *image) {\n+  Quantum *indexes;\n+  for (; InterpolateMagickPixelPacket_i; InterpolateMagickPixelPacket_i++) {\n+    GetMagickPixelPacket(InterpolateMagickPixelPacket_pixels +\n+                         InterpolateMagickPixelPacket_i);\n+    AlphaBlendMagickPixelPacket(\n+        image, &InterpolateMagickPixelPacket_p + InterpolateMagickPixelPacket_i,\n+        indexes + InterpolateMagickPixelPacket_i,\n+        InterpolateMagickPixelPacket_pixels + InterpolateMagickPixelPacket_i,\n+        InterpolateMagickPixelPacket_alpha + InterpolateMagickPixelPacket_i);\n+  }\n+}"}, {"sha": "200ed27b32ef4aa54c6783afa1864924b6f55582", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e606ed90a1bed878071b6b5a3ef9b97b3d99838/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e606ed90a1bed878071b6b5a3ef9b97b3d99838/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=5e606ed90a1bed878071b6b5a3ef9b97b3d99838", "patch": "@@ -2700,7 +2700,7 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal, unsigned *n_stmts)\n \t    {\n \t      stmt_vec_info pattern_stmt_info\n \t\t= STMT_VINFO_RELATED_STMT (stmt_info);\n-\t      if (STMT_VINFO_SLP_VECT_ONLY (pattern_stmt_info))\n+\t      if (STMT_VINFO_SLP_VECT_ONLY_PATTERN (pattern_stmt_info))\n \t\tSTMT_VINFO_IN_PATTERN_P (stmt_info) = false;\n \n \t      gimple *pattern_def_seq = STMT_VINFO_PATTERN_DEF_SEQ (stmt_info);"}, {"sha": "f0817da9f622d22e3df2e30410d1cf610b4ffa1d", "filename": "gcc/tree-vect-slp-patterns.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e606ed90a1bed878071b6b5a3ef9b97b3d99838/gcc%2Ftree-vect-slp-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e606ed90a1bed878071b6b5a3ef9b97b3d99838/gcc%2Ftree-vect-slp-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp-patterns.c?ref=5e606ed90a1bed878071b6b5a3ef9b97b3d99838", "patch": "@@ -599,7 +599,7 @@ complex_pattern::build (vec_info *vinfo)\n \t the call there.  */\n       vect_mark_pattern_stmts (vinfo, stmt_info, call_stmt,\n \t\t\t       SLP_TREE_VECTYPE (node));\n-      STMT_VINFO_SLP_VECT_ONLY (call_stmt_info) = true;\n+      STMT_VINFO_SLP_VECT_ONLY_PATTERN (call_stmt_info) = true;\n \n       /* Since we are replacing all the statements in the group with the same\n \t thing it doesn't really matter.  So just set it every time a new stmt"}, {"sha": "e564fcf835a46a8c1aa6b5fb52f7ecd60bcb1bc9", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e606ed90a1bed878071b6b5a3ef9b97b3d99838/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e606ed90a1bed878071b6b5a3ef9b97b3d99838/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=5e606ed90a1bed878071b6b5a3ef9b97b3d99838", "patch": "@@ -1215,6 +1215,10 @@ class _stmt_vec_info {\n \n   /* True if this is only suitable for SLP vectorization.  */\n   bool slp_vect_only_p;\n+\n+  /* True if this is a pattern that can only be handled by SLP\n+     vectorization.  */\n+  bool slp_vect_pattern_only_p;\n };\n \n /* Information about a gather/scatter call.  */\n@@ -1301,6 +1305,7 @@ struct gather_scatter_info {\n #define STMT_VINFO_REDUC_VECTYPE(S)     (S)->reduc_vectype\n #define STMT_VINFO_REDUC_VECTYPE_IN(S)  (S)->reduc_vectype_in\n #define STMT_VINFO_SLP_VECT_ONLY(S)     (S)->slp_vect_only_p\n+#define STMT_VINFO_SLP_VECT_ONLY_PATTERN(S) (S)->slp_vect_pattern_only_p\n \n #define DR_GROUP_FIRST_ELEMENT(S) \\\n   (gcc_checking_assert ((S)->dr_aux.dr), (S)->first_element)"}]}