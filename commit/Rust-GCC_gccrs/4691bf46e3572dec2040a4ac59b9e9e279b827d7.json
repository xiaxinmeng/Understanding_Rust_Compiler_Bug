{"sha": "4691bf46e3572dec2040a4ac59b9e9e279b827d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY5MWJmNDZlMzU3MmRlYzIwNDBhNGFjNTliOWU5ZTI3OWI4MjdkNw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2019-12-04T23:26:10Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2019-12-04T23:26:10Z"}, "message": "Fix C handling of use of lvalues of incomplete types (PR c/36941, PR c/88827).\n\nBug 88827 points out that GCC should not be rejecting C code that\ndereferences a pointer to an incomplete type in the case that uses &*\nto take the address of the resulting lvalue, because no constraint is\nviolated in that case (other than for C90 when the incomplete type is\nunqualified void, which we already handle correctly) and as the lvalue\nnever gets converted to an rvalue there is no undefined behavior\neither.\n\nThis means that the diagnostic for such a dereference is bogus and\nshould be removed; if the lvalue gets converted to an rvalue, there\nshould be an appropriate error later for the use of the incomplete\ntype.  In most cases, there is, but bug 36941 points out the lack of a\ndiagnostic when the incomplete (non-void) type gets cast to void\n(where a diagnostic seems appropriate for this undefined behavior as a\nmatter of quality of implementation).\n\nThis patch removes the bogus diagnostic (and C_TYPE_ERROR_REPORTED\nwhich was only used in the code that is removed - only that one, bogus\ndiagnostic had this duplicate suppression, not any of the other, more\nlegitimate diagnostics for use of incomplete types) and makes\nconvert_lvalue_to_rvalue call require_complete_type for arguments not\nof void types, so that all relevant code paths (possibly except some\nfor ObjC) get incomplete types diagnosed.  It's possible that this\nmakes some other checks for incomplete types obsolete, but no attempt\nis made to remove any such checks.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\n\tPR c/36941\n\tPR c/88827\ngcc/c:\n\t* c-typeck.c (convert_lvalue_to_rvalue): Call\n\trequire_complete_type for arguments not of void types.\n\t(build_indirect_ref): Do not diagnose dereferencing pointers to\n\tincomplete types.\n\t* c-tree.h (C_TYPE_ERROR_REPORTED): Remove.\n\ngcc/testsuite:\n\t* gcc.dg/lvalue-9.c, gcc.dg/lvalue-10.c: New tests.\n\t* gcc.dg/array-8.c, gcc.dg/enum-incomplete-1.c,\n\tgcc.dg/enum-incomplete-3.c, gcc.dg/noncompile/incomplete-3.c,\n\tgcc.dg/pr48552-1.c, gcc.dg/pr48552-2.c, gcc.dg/pr63543.c,\n\tgcc.dg/pr69796.c: Update expected diagnostics.\n\nFrom-SVN: r278976", "tree": {"sha": "0bc763be30e740b45f4af65fde1f52977102431c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bc763be30e740b45f4af65fde1f52977102431c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4691bf46e3572dec2040a4ac59b9e9e279b827d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4691bf46e3572dec2040a4ac59b9e9e279b827d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4691bf46e3572dec2040a4ac59b9e9e279b827d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4691bf46e3572dec2040a4ac59b9e9e279b827d7/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f30025bb34ca110653f517efd6d6193cc8bac1aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f30025bb34ca110653f517efd6d6193cc8bac1aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f30025bb34ca110653f517efd6d6193cc8bac1aa"}], "stats": {"total": 181, "additions": 146, "deletions": 35}, "files": [{"sha": "f9c6293d9e5ec1f221be8e6d3bcc8484d6f5948b", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=4691bf46e3572dec2040a4ac59b9e9e279b827d7", "patch": "@@ -1,3 +1,13 @@\n+2019-12-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/36941\n+\tPR c/88827\n+\t* c-typeck.c (convert_lvalue_to_rvalue): Call\n+\trequire_complete_type for arguments not of void types.\n+\t(build_indirect_ref): Do not diagnose dereferencing pointers to\n+\tincomplete types.\n+\t* c-tree.h (C_TYPE_ERROR_REPORTED): Remove.\n+\n 2019-12-03  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/88704"}, {"sha": "ff2345dbe686da9d6227355c508569eafaf09d66", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=4691bf46e3572dec2040a4ac59b9e9e279b827d7", "patch": "@@ -55,9 +55,6 @@ along with GCC; see the file COPYING3.  If not see\n    This is used for -Wc++-compat. */\n #define C_TYPE_DEFINED_IN_STRUCT(TYPE) TYPE_LANG_FLAG_2 (TYPE)\n \n-/* Record whether an \"incomplete type\" error was given for the type.  */\n-#define C_TYPE_ERROR_REPORTED(TYPE) TYPE_LANG_FLAG_3 (TYPE)\n-\n /* Record whether a typedef for type `int' was actually `signed int'.  */\n #define C_TYPEDEF_EXPLICITLY_SIGNED(EXP) DECL_LANG_FLAG_1 (EXP)\n "}, {"sha": "36aedc063d295c136c2b5fab6b268a909cb16685", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=4691bf46e3572dec2040a4ac59b9e9e279b827d7", "patch": "@@ -2054,6 +2054,8 @@ convert_lvalue_to_rvalue (location_t loc, struct c_expr exp,\n     mark_exp_read (exp.value);\n   if (convert_p)\n     exp = default_function_array_conversion (loc, exp);\n+  if (!VOID_TYPE_P (TREE_TYPE (exp.value)))\n+    exp.value = require_complete_type (loc, exp.value);\n   if (really_atomic_lvalue (exp.value))\n     {\n       vec<tree, va_gc> *params;\n@@ -2550,16 +2552,6 @@ build_indirect_ref (location_t loc, tree ptr, ref_operator errstring)\n \n \t  ref = build1 (INDIRECT_REF, t, pointer);\n \n-\t  if (!COMPLETE_OR_VOID_TYPE_P (t) && TREE_CODE (t) != ARRAY_TYPE)\n-\t    {\n-\t      if (!C_TYPE_ERROR_REPORTED (TREE_TYPE (ptr)))\n-\t\t{\n-\t\t  error_at (loc, \"dereferencing pointer to incomplete type \"\n-\t\t\t    \"%qT\", t);\n-\t\t  C_TYPE_ERROR_REPORTED (TREE_TYPE (ptr)) = 1;\n-\t\t}\n-\t      return error_mark_node;\n-\t    }\n \t  if (VOID_TYPE_P (t) && c_inhibit_evaluation_warnings == 0)\n \t    warning_at (loc, 0, \"dereferencing %<void *%> pointer\");\n "}, {"sha": "48a6d4501ad260b330f647ef111b05c8678c6900", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4691bf46e3572dec2040a4ac59b9e9e279b827d7", "patch": "@@ -1,3 +1,13 @@\n+2019-12-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/36941\n+\tPR c/88827\n+\t* gcc.dg/lvalue-9.c, gcc.dg/lvalue-10.c: New tests.\n+\t* gcc.dg/array-8.c, gcc.dg/enum-incomplete-1.c,\n+\tgcc.dg/enum-incomplete-3.c, gcc.dg/noncompile/incomplete-3.c,\n+\tgcc.dg/pr48552-1.c, gcc.dg/pr48552-2.c, gcc.dg/pr63543.c,\n+\tgcc.dg/pr69796.c: Update expected diagnostics.\n+\n 2019-12-04  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/acle/general/whilelt_5.c: New test."}, {"sha": "71c98038b86d6c3023223aa40b7ceb9b66fb3f63", "filename": "gcc/testsuite/gcc.dg/array-8.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Ftestsuite%2Fgcc.dg%2Farray-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Ftestsuite%2Fgcc.dg%2Farray-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-8.c?ref=4691bf46e3572dec2040a4ac59b9e9e279b827d7", "patch": "@@ -43,6 +43,5 @@ g (void)\n   pv[0]; /* { dg-warning \"dereferencing 'void \\\\*' pointer\" } */\n   0[pv]; /* { dg-warning \"dereferencing 'void \\\\*' pointer\" } */\n   sip[0]; /* { dg-error \"invalid use of undefined type 'struct si'\" } */\n-  /* { dg-error \"dereferencing pointer to incomplete type\" \"incomplete\" { target *-*-* } .-1 } */\n   0[sip]; /* { dg-error \"invalid use of undefined type 'struct si'\" } */\n }"}, {"sha": "2da3b58f54cfc6a8ba91d4648353f34682c19295", "filename": "gcc/testsuite/gcc.dg/enum-incomplete-1.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-incomplete-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-incomplete-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-incomplete-1.c?ref=4691bf46e3572dec2040a4ac59b9e9e279b827d7", "patch": "@@ -13,14 +13,16 @@ f0 (int i)\n {\n   ve; /* { dg-error \"incomplete\" } */\n   vs; /* { dg-error \"incomplete\" } */\n-  (void) ve;\n-  (void) vs;\n+  (void) ve; /* { dg-error \"incomplete\" } */\n+  (void) vs; /* { dg-error \"incomplete\" } */\n   (void) (i ? ve : ve); /* { dg-error \"incomplete\" } */\n   (void) (i ? vs : vs); /* { dg-error \"incomplete\" } */\n   (void) (ve = ve); /* { dg-error \"incomplete\" } */\n   (void) (vs = vs); /* { dg-error \"incomplete\" } */\n-  (void) ve, (void) ve;\n-  (void) vs, (void) vs;\n+  (void) ve, /* { dg-error \"incomplete\" } */\n+    (void) ve; /* { dg-error \"incomplete\" } */\n+  (void) vs, /* { dg-error \"incomplete\" } */\n+    (void) vs; /* { dg-error \"incomplete\" } */\n   p = &ve;\n   p = &vs;\n   (void) sizeof (ve); /* { dg-error \"incomplete\" } */"}, {"sha": "12280db61fbd996ea1ea11e86b9cb43d8c889fec", "filename": "gcc/testsuite/gcc.dg/enum-incomplete-3.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-incomplete-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-incomplete-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-incomplete-3.c?ref=4691bf46e3572dec2040a4ac59b9e9e279b827d7", "patch": "@@ -4,17 +4,17 @@\n \n enum E e; /* { dg-error \"storage size\" } */\n \n-void bar (int [e]); /* { dg-error \"size of unnamed array has incomplete type\" } */\n-void bar2 (int [][e]); /* { dg-error \"size of unnamed array has incomplete type\" } */\n+void bar (int [e]); /* { dg-error \"has an incomplete type\" } */\n+void bar2 (int [][e]); /* { dg-error \"has an incomplete type\" } */\n \n void\n foo (void)\n {\n-  int a1[e]; /* { dg-error \"size of array .a1. has incomplete type\" } */\n-  int a2[e][3]; /* { dg-error \"size of array .a2. has incomplete type\" } */\n+  int a1[e]; /* { dg-error \"has an incomplete type\" } */\n+  int a2[e][3]; /* { dg-error \"has an incomplete type\" } */\n \n   struct S\n   {\n-    int a3[e]; /* { dg-error \"size of array .a3. has incomplete type\" } */\n+    int a3[e]; /* { dg-error \"has an incomplete type\" } */\n   };\n }"}, {"sha": "cc5f37ba9648e124677347e48c3d9bd5d80f9e20", "filename": "gcc/testsuite/gcc.dg/lvalue-10.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Ftestsuite%2Fgcc.dg%2Flvalue-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Ftestsuite%2Fgcc.dg%2Flvalue-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flvalue-10.c?ref=4691bf46e3572dec2040a4ac59b9e9e279b827d7", "patch": "@@ -0,0 +1,22 @@\n+/* Test handling of lvalues of incomplete types.  Bugs 36941, 88647\n+   (invalid), 88827.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+struct S;\n+\n+extern struct S var;\n+extern struct S *vp;\n+\n+void\n+f8 (void)\n+{\n+  /* These are valid because there is no constraint violation and the\n+     result of '*' is never converted from an lvalue to an rvalue\n+     (which would yield undefined behavior).  */\n+  &var;\n+  &*vp;\n+  &(var);\n+  &(*vp);\n+  &*&*vp;\n+}"}, {"sha": "382b3ffa903320de4fc86bfa58767617dbcd16cd", "filename": "gcc/testsuite/gcc.dg/lvalue-9.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Ftestsuite%2Fgcc.dg%2Flvalue-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Ftestsuite%2Fgcc.dg%2Flvalue-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flvalue-9.c?ref=4691bf46e3572dec2040a4ac59b9e9e279b827d7", "patch": "@@ -0,0 +1,77 @@\n+/* Test handling of lvalues of incomplete types.  Bugs 36941, 88647\n+   (invalid), 88827.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+struct S;\n+\n+extern struct S var;\n+extern struct S *vp;\n+extern int i;\n+\n+void\n+f1 (void)\n+{\n+  var; /* { dg-error \"has an incomplete type\" } */\n+  var, (void) 0; /* { dg-error \"has an incomplete type\" } */\n+  (i\n+   ? var /* { dg-error \"has an incomplete type\" } */\n+   : var); /* { dg-error \"has an incomplete type\" } */\n+}\n+\n+void\n+f2 (void)\n+{\n+  (void) var; /* { dg-error \"has an incomplete type\" } */\n+  (void) (var, (void) 0); /* { dg-error \"has an incomplete type\" } */\n+  (void) (i\n+\t  ? var /* { dg-error \"has an incomplete type\" } */\n+\t  : var); /* { dg-error \"has an incomplete type\" } */\n+}\n+\n+void\n+f3 (void)\n+{\n+  (const void) var; /* { dg-error \"has an incomplete type\" } */\n+  (const void) (var, (void) 0); /* { dg-error \"has an incomplete type\" } */\n+  (const void) (i\n+\t\t? var /* { dg-error \"has an incomplete type\" } */\n+\t\t: var); /* { dg-error \"has an incomplete type\" } */\n+}\n+\n+void\n+f4 (void)\n+{\n+  *vp; /* { dg-error \"invalid use of undefined type\" } */\n+  *vp, (void) 0; /* { dg-error \"invalid use of undefined type\" } */\n+  (i\n+   ? *vp /* { dg-error \"invalid use of undefined type\" } */\n+   : *vp); /* { dg-error \"invalid use of undefined type\" } */\n+}\n+\n+void\n+f5 (void)\n+{\n+  (void) *vp; /* { dg-error \"invalid use of undefined type\" } */\n+  (void) (*vp, (void) 0); /* { dg-error \"invalid use of undefined type\" } */\n+  (void) (i\n+\t  ? *vp /* { dg-error \"invalid use of undefined type\" } */\n+\t  : *vp); /* { dg-error \"invalid use of undefined type\" } */\n+}\n+\n+void\n+f6 (void)\n+{\n+  (const void) *vp; /* { dg-error \"invalid use of undefined type\" } */\n+  (const void) (*vp, (void) 0); /* { dg-error \"invalid use of undefined type\" } */\n+  (const void) (i\n+\t\t? *vp /* { dg-error \"invalid use of undefined type\" } */\n+\t\t: *vp); /* { dg-error \"invalid use of undefined type\" } */\n+}\n+\n+void\n+f7 (void)\n+{\n+  /* This is invalid because of the constraints on [].  */\n+  &vp[0]; /* { dg-error \"invalid use of undefined type\" } */\n+}"}, {"sha": "0618b4d81705a75f73ac1b125cce53b102c87502", "filename": "gcc/testsuite/gcc.dg/noncompile/incomplete-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fincomplete-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fincomplete-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fincomplete-3.c?ref=4691bf46e3572dec2040a4ac59b9e9e279b827d7", "patch": "@@ -5,5 +5,5 @@ int foo (void)\n {\n   b_t d;\n   struct b_t *c = &d;\t/* { dg-warning \"incompatible pointer type\" } */\n-  c->a;\t\t\t/* { dg-error \"incomplete type\" } */\n+  c->a;\t\t\t/* { dg-error \"invalid use of undefined type\" } */\n }"}, {"sha": "11ee401e0307400f7489574ddf0f287d9e4eedb7", "filename": "gcc/testsuite/gcc.dg/pr48552-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-1.c?ref=4691bf46e3572dec2040a4ac59b9e9e279b827d7", "patch": "@@ -43,11 +43,12 @@ f6 (void *x)\n void\n f7 (struct S *x)\n {\n-  __asm volatile (\"\" : : \"r\" (*x));\t/* { dg-error \"dereferencing pointer to incomplete type\" } */\n+  __asm volatile (\"\" : : \"r\" (*x));\t/* { dg-error \"invalid use of undefined type\" } */\n }\n \n void\n f8 (struct S *x)\n {\n-  __asm volatile (\"\" : \"=r\" (*x));\t/* { dg-error \"invalid lvalue in 'asm' output 0\" } */\n+  __asm volatile (\"\" : \"=r\" (*x));\t/* { dg-error \"impossible constraint in 'asm'\" } */\n+  /* { dg-error \"non-memory output 0 must stay in memory\" \"memory\" { target *-*-* } .-1 } */\n }"}, {"sha": "2d2a00c43b70456948843b8a2caca670d3739e3f", "filename": "gcc/testsuite/gcc.dg/pr48552-2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-2.c?ref=4691bf46e3572dec2040a4ac59b9e9e279b827d7", "patch": "@@ -43,11 +43,12 @@ f6 (void *x)\n void\n f7 (struct S *x)\n {\n-  __asm (\"\" : : \"r\" (*x));\t/* { dg-error \"dereferencing pointer to incomplete type\" } */\n+  __asm (\"\" : : \"r\" (*x));\t/* { dg-error \"invalid use of undefined type\" } */\n }\n \n void\n f8 (struct S *x)\n {\n-  __asm (\"\" : \"=r\" (*x));\t/* { dg-error \"invalid lvalue in 'asm' output 0\" } */\n+  __asm (\"\" : \"=r\" (*x));\t/* { dg-error \"impossible constraint in 'asm'\" } */\n+  /* { dg-error \"non-memory output 0 must stay in memory\" \"memory\" { target *-*-* } .-1 } */\n }"}, {"sha": "d85e10d2021eb4d8a88503a0b50d4324e079ff65", "filename": "gcc/testsuite/gcc.dg/pr63543.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63543.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63543.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63543.c?ref=4691bf46e3572dec2040a4ac59b9e9e279b827d7", "patch": "@@ -7,15 +7,15 @@ union U;\n int\n f1 (struct S *s)\n {\n-  return s->a /* { dg-error \"dereferencing pointer to incomplete type .struct S.\" } */\n-\t + s->b\n-\t + s->c;\n+  return s->a /* { dg-error \"invalid use of undefined type .struct S.\" } */\n+\t + s->b /* { dg-error \"invalid use of undefined type .struct S.\" } */\n+\t + s->c; /* { dg-error \"invalid use of undefined type .struct S.\" } */\n }\n \n int\n f2 (union U *u)\n {\n-  return u->a /* { dg-error \"dereferencing pointer to incomplete type .union U.\" } */\n-\t + u->a\n-\t + u->a;\n+  return u->a /* { dg-error \"invalid use of undefined type .union U.\" } */\n+\t + u->a /* { dg-error \"invalid use of undefined type .union U.\" } */\n+\t + u->a; /* { dg-error \"invalid use of undefined type .union U.\" } */\n }"}, {"sha": "4b725a50767181d5a902fb00de1e82083f701cef", "filename": "gcc/testsuite/gcc.dg/pr69796.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69796.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4691bf46e3572dec2040a4ac59b9e9e279b827d7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69796.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69796.c?ref=4691bf46e3572dec2040a4ac59b9e9e279b827d7", "patch": "@@ -6,5 +6,5 @@ struct S s;\t/* { dg-error \"storage size of 's' isn't known\" } */\n void\n foo ()\n {\n-  s a;\t/* { dg-error \"expression statement has incomplete type|expected\" } */\n+  s a;\t/* { dg-error \"has an incomplete type|expected\" } */\n }"}]}