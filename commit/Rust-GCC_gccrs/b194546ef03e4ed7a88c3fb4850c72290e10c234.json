{"sha": "b194546ef03e4ed7a88c3fb4850c72290e10c234", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE5NDU0NmVmMDNlNGVkN2E4OGMzZmI0ODUwYzcyMjkwZTEwYzIzNA==", "commit": {"author": {"name": "Pascal Obry", "email": "obry@gnat.com", "date": "2004-10-27T13:55:31Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-10-27T13:55:31Z"}, "message": "tracebak.c (IS_BAD_PTR): Use IsBadCodePtr on Win32 to check for ptr validity (process must have read access).\n\n2004-10-26  Pascal Obry  <obry@gnat.com>\n\n\t* tracebak.c (IS_BAD_PTR): Use IsBadCodePtr on Win32 to check for ptr\n\tvalidity (process must have read access). Set to 0 in all other cases.\n\t(STOP_FRAME): Now check for ptr validity to avoid a segmentation\n\tviolation on Win32.\n\t(VALID_STACK_FRAME): Check for ptr validity on Win32 to avoid a\n\tsegmentation violation.\n\nFrom-SVN: r89675", "tree": {"sha": "0ad4ed1d7f614706088903e9bd92f2b630672add", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ad4ed1d7f614706088903e9bd92f2b630672add"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b194546ef03e4ed7a88c3fb4850c72290e10c234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b194546ef03e4ed7a88c3fb4850c72290e10c234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b194546ef03e4ed7a88c3fb4850c72290e10c234", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b194546ef03e4ed7a88c3fb4850c72290e10c234/comments", "author": null, "committer": null, "parents": [{"sha": "130c236a6af56ccee2579b8d9b960d4473d8b339", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/130c236a6af56ccee2579b8d9b960d4473d8b339", "html_url": "https://github.com/Rust-GCC/gccrs/commit/130c236a6af56ccee2579b8d9b960d4473d8b339"}], "stats": {"total": 48, "additions": 31, "deletions": 17}, "files": [{"sha": "ac0b0a5f55945d754fbccb01e441b98ef1648418", "filename": "gcc/ada/s-fatgen.adb", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b194546ef03e4ed7a88c3fb4850c72290e10c234/gcc%2Fada%2Fs-fatgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b194546ef03e4ed7a88c3fb4850c72290e10c234/gcc%2Fada%2Fs-fatgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fatgen.adb?ref=b194546ef03e4ed7a88c3fb4850c72290e10c234", "patch": "@@ -81,7 +81,10 @@ package body System.Fat_Gen is\n    -----------------------\n \n    procedure Decompose (XX : T; Frac : out T; Expo : out UI);\n-   --  Decomposes a floating-point number into fraction and exponent parts\n+   --  Decomposes a floating-point number into fraction and exponent parts.\n+   --  Both results are signed, with Frac having the sign of XX, and UI has\n+   --  the sign of the exponent. The absolute value of Frac is in the range\n+   --  0.0 <= Frac < 1.0. If Frac = 0.0 or -0.0, then Expo is always zero.\n \n    function Gradual_Scaling  (Adjustment : UI) return T;\n    --  Like Scaling with a first argument of 1.0, but returns the smallest\n@@ -131,7 +134,6 @@ package body System.Fat_Gen is\n    function Compose (Fraction : T; Exponent : UI) return T is\n       Arg_Frac : T;\n       Arg_Exp  : UI;\n-\n    begin\n       Decompose (Fraction, Arg_Frac, Arg_Exp);\n       return Scaling (Arg_Frac, Exponent);\n@@ -306,7 +308,6 @@ package body System.Fat_Gen is\n          Y  := 2.0 ** T'Machine_Emin;\n          Y1 := Y;\n          Ex := Ex - T'Machine_Emin;\n-\n          while Ex < 0 loop\n             Y := T'Machine (Y / 2.0);\n \n@@ -346,7 +347,6 @@ package body System.Fat_Gen is\n          Z := Scaling (Y, L);\n          return Z;\n       end if;\n-\n    end Leading_Part;\n \n    -------------\n@@ -361,7 +361,6 @@ package body System.Fat_Gen is\n    function Machine (X : T) return T is\n       Temp : T;\n       pragma Volatile (Temp);\n-\n    begin\n       Temp := X;\n       return Temp;\n@@ -406,10 +405,14 @@ package body System.Fat_Gen is\n          --  two, then we want to subtract half of what we would otherwise\n          --  subtract, since the exponent is going to be reduced.\n \n-         if X_Frac = 0.5 and then X > 0.0 then\n+         --  Note that X_Frac has the same sign as X, so if X_Frac is 0.5,\n+         --  then we know that we have a positive number (and hence a\n+         --  positive power of 2).\n+\n+         if X_Frac = 0.5 then\n             return X - Gradual_Scaling (X_Exp - T'Machine_Mantissa - 1);\n \n-         --  Otherwise the exponent stays the same\n+         --  Otherwise the exponent is unchanged\n \n          else\n             return X - Gradual_Scaling (X_Exp - T'Machine_Mantissa);\n@@ -495,7 +498,6 @@ package body System.Fat_Gen is\n       end if;\n \n       return Sign_X * IEEE_Rem;\n-\n    end Remainder;\n \n    --------------\n@@ -525,7 +527,6 @@ package body System.Fat_Gen is\n       else\n          return X;\n       end if;\n-\n    end Rounding;\n \n    -------------\n@@ -590,6 +591,7 @@ package body System.Fat_Gen is\n \n             --  Ex = 0\n          end if;\n+\n          return Y;\n       end;\n    end Scaling;\n@@ -629,10 +631,14 @@ package body System.Fat_Gen is\n          --  two, then we want to add half of what we would otherwise add,\n          --  since the exponent is going to be reduced.\n \n-         if X_Frac = 0.5 and then X < 0.0 then\n+         --  Note that X_Frac has the same sign as X, so if X_Frac is -0.5,\n+         --  then we know that we have a ngeative number (and hence a\n+         --  negative power of 2).\n+\n+         if X_Frac = -0.5 then\n             return X + Gradual_Scaling (X_Exp - T'Machine_Mantissa - 1);\n \n-         --  Otherwise the exponent stays the same\n+         --  Otherwise the exponent is unchanged\n \n          else\n             return X + Gradual_Scaling (X_Exp - T'Machine_Mantissa);"}, {"sha": "83d51ccfd287c4b140208410c62a4dabf251db82", "filename": "gcc/ada/tracebak.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b194546ef03e4ed7a88c3fb4850c72290e10c234/gcc%2Fada%2Ftracebak.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b194546ef03e4ed7a88c3fb4850c72290e10c234/gcc%2Fada%2Ftracebak.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftracebak.c?ref=b194546ef03e4ed7a88c3fb4850c72290e10c234", "patch": "@@ -278,6 +278,13 @@ struct layout\n \n #elif defined (i386)\n \n+#ifdef __WIN32\n+#include <windows.h>\n+#define IS_BAD_PTR(ptr) (IsBadCodePtr((void *)ptr))\n+#else\n+#define IS_BAD_PTR(ptr) 0\n+#endif\n+\n #define USE_GENERIC_UNWINDER\n \n struct layout\n@@ -291,7 +298,8 @@ struct layout\n #define FRAME_OFFSET 0\n #define PC_ADJUST -2\n #define STOP_FRAME(CURRENT, TOP_STACK) \\\n-  ((unsigned int)(CURRENT)->return_address < LOWEST_ADDR \\\n+  (IS_BAD_PTR((long)(CURRENT)->return_address) \\\n+   || (unsigned int)(CURRENT)->return_address < LOWEST_ADDR \\\n    || (CURRENT)->return_address == 0|| (CURRENT)->next == 0  \\\n    || (void *) (CURRENT) < (TOP_STACK))\n \n@@ -310,10 +318,11 @@ struct layout\n */\n \n #define VALID_STACK_FRAME(ptr) \\\n-   (((*((ptr) - 3) & 0xff) == 0xe8) \\\n-    || ((*((ptr) - 5) & 0xff) == 0x9a) \\\n-    || ((*((ptr) - 1) & 0xff) == 0xff) \\\n-    || (((*(ptr) & 0xd0ff) == 0xd0ff)))\n+   (!IS_BAD_PTR(ptr) \\\n+    && (((*((ptr) - 3) & 0xff) == 0xe8) \\\n+        || ((*((ptr) - 5) & 0xff) == 0x9a) \\\n+        || ((*((ptr) - 1) & 0xff) == 0xff) \\\n+        || (((*(ptr) & 0xd0ff) == 0xd0ff))))\n \n /*------------------------------- mips-irix -------------------------------*/\n \n@@ -324,7 +333,6 @@ struct layout\n \n #endif\n \n-\n /*---------------------------------------------------------------------*\n  *--      The post GCC 3.3 infrastructure based implementation       --*\n  *---------------------------------------------------------------------*/"}]}