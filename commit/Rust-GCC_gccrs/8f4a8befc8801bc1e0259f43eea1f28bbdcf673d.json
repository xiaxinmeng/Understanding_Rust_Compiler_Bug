{"sha": "8f4a8befc8801bc1e0259f43eea1f28bbdcf673d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY0YThiZWZjODgwMWJjMWUwMjU5ZjQzZWVhMWYyOGJiZGNmNjczZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T10:06:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T10:06:32Z"}, "message": "[multiple changes]\n\n2014-08-04  Thomas Quinot  <quinot@adacore.com>\n\n\t* s-fatgen.adb: Minor reformatting.\n\n2014-08-04  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_util.adb (Is_Possibly_Unaligned_Object): Always return\n\tFalse on .NET.\n\n2014-08-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Loop_Statement): Set properly the kind of\n\tthe loop parameter for element iterators over containers and\n\tarrays, so that improper uses of it are detected in the loop\n\tbody when expansion is disabled.\n\t* exp_ch5.adb (Expand_Iterator_Loop): The entity kind of the\n\tgenerated cursor is that of the analyzed loop parameter.\n\nFrom-SVN: r213558", "tree": {"sha": "bb09752881459e1e36bad9c6d7dec0935e1d881a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb09752881459e1e36bad9c6d7dec0935e1d881a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f4a8befc8801bc1e0259f43eea1f28bbdcf673d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f4a8befc8801bc1e0259f43eea1f28bbdcf673d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f4a8befc8801bc1e0259f43eea1f28bbdcf673d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f4a8befc8801bc1e0259f43eea1f28bbdcf673d/comments", "author": null, "committer": null, "parents": [{"sha": "e7a45277aa2ed5b30f96ac55bf9c1de47cb36f95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7a45277aa2ed5b30f96ac55bf9c1de47cb36f95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7a45277aa2ed5b30f96ac55bf9c1de47cb36f95"}], "stats": {"total": 67, "additions": 55, "deletions": 12}, "files": [{"sha": "5db6af9fe446ad32e07ed9f098794eae3985e55b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4a8befc8801bc1e0259f43eea1f28bbdcf673d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4a8befc8801bc1e0259f43eea1f28bbdcf673d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8f4a8befc8801bc1e0259f43eea1f28bbdcf673d", "patch": "@@ -1,3 +1,21 @@\n+2014-08-04  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* s-fatgen.adb: Minor reformatting.\n+\n+2014-08-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_util.adb (Is_Possibly_Unaligned_Object): Always return\n+\tFalse on .NET.\n+\n+2014-08-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Loop_Statement): Set properly the kind of\n+\tthe loop parameter for element iterators over containers and\n+\tarrays, so that improper uses of it are detected in the loop\n+\tbody when expansion is disabled.\n+\t* exp_ch5.adb (Expand_Iterator_Loop): The entity kind of the\n+\tgenerated cursor is that of the analyzed loop parameter.\n+\n 2014-08-04  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch3.adb (Build_CPP_Init_Procedure): Remove"}, {"sha": "591e1d3d56c825517fe78e2e37d75d7d2d613fc4", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4a8befc8801bc1e0259f43eea1f28bbdcf673d/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4a8befc8801bc1e0259f43eea1f28bbdcf673d/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=8f4a8befc8801bc1e0259f43eea1f28bbdcf673d", "patch": "@@ -3200,6 +3200,7 @@ package body Exp_Ch5 is\n \n       Container     : constant Node_Id   := Name (I_Spec);\n       Container_Typ : constant Entity_Id := Base_Type (Etype (Container));\n+      I_Kind        : constant Entity_Kind := Ekind (Id);\n       Cursor        : Entity_Id;\n       Iterator      : Entity_Id;\n       New_Loop      : Node_Id;\n@@ -3481,7 +3482,7 @@ package body Exp_Ch5 is\n \n          else\n             Cursor := Id;\n-            Set_Ekind (Cursor, E_Variable);\n+            --  Set_Ekind (Cursor, E_Variable);\n          end if;\n \n          Iterator := Make_Temporary (Loc, 'I');\n@@ -3527,6 +3528,7 @@ package body Exp_Ch5 is\n               Make_Assignment_Statement (Loc,\n                  Name       => New_Occurrence_Of (Cursor, Loc),\n                  Expression => Rhs));\n+            Set_Assignment_OK (Name (Last (Stats)));\n          end;\n \n          --  Generate:\n@@ -3592,12 +3594,15 @@ package body Exp_Ch5 is\n \n             --  The cursor is only modified in expanded code, so it appears\n             --  as unassigned to the warning machinery. We must suppress\n-            --  this spurious warning explicitly.\n+            --  this spurious warning explicitly. The cursor's kind is that of\n+            --  the original loop parameter (it is a constant if the doamin of\n+            --  iteration is constant).\n \n             Set_Warnings_Off (Cursor);\n             Set_Assignment_OK (Decl);\n \n             Insert_Action (N, Decl);\n+            Set_Ekind (Cursor, I_Kind);\n          end;\n \n          --  If the range of iteration is given by a function call that"}, {"sha": "bfba40331d8be2b2e13b8886bfd6af4ab5fecf35", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4a8befc8801bc1e0259f43eea1f28bbdcf673d/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4a8befc8801bc1e0259f43eea1f28bbdcf673d/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=8f4a8befc8801bc1e0259f43eea1f28bbdcf673d", "patch": "@@ -5146,6 +5146,12 @@ package body Exp_Util is\n       T  : constant Entity_Id := Etype (N);\n \n    begin\n+      --  Objects are never unaligned on VMs\n+\n+      if VM_Target /= No_VM then\n+         return False;\n+      end if;\n+\n       --  If renamed object, apply test to underlying object\n \n       if Is_Entity_Name (N)"}, {"sha": "b5cd9f56266736477fca5d6420b6b2f7fb580a12", "filename": "gcc/ada/s-fatgen.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4a8befc8801bc1e0259f43eea1f28bbdcf673d/gcc%2Fada%2Fs-fatgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4a8befc8801bc1e0259f43eea1f28bbdcf673d/gcc%2Fada%2Fs-fatgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fatgen.adb?ref=8f4a8befc8801bc1e0259f43eea1f28bbdcf673d", "patch": "@@ -892,7 +892,7 @@ package body System.Fat_Gen is\n       for R'Address use XA;\n       --  R is a view of the input floating-point parameter. Note that we\n       --  must avoid copying the actual bits of this parameter in float\n-      --  form (since it may be a signalling NaN.\n+      --  form (since it may be a signalling NaN).\n \n       E  : constant IEEE_Exponent_Range :=\n              Integer ((R (Most_Significant_Word) and Exponent_Mask) /"}, {"sha": "8552a7caaa0d1cb07867d64120f2b7633b5d93b4", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4a8befc8801bc1e0259f43eea1f28bbdcf673d/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4a8befc8801bc1e0259f43eea1f28bbdcf673d/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=8f4a8befc8801bc1e0259f43eea1f28bbdcf673d", "patch": "@@ -3114,25 +3114,39 @@ package body Sem_Ch5 is\n       --  If the expander is not active, or in SPARK mode, then we want to\n       --  analyze the loop body now even in the Ada 2012 iterator case, since\n       --  the rewriting will not be done. Insert the loop variable in the\n-      --  current scope, if not done when analysing the iteration scheme.\n+      --  current scope, if not done when analysing the iteration scheme. Set\n+      --  is kind properly to detect improper uses in the loop body.\n \n-      if No (Iter)\n-        or else No (Iterator_Specification (Iter))\n-        or else not Expander_Active\n+      if Present (Iter)\n+        and then Present (Iterator_Specification (Iter))\n       then\n-         if Present (Iter)\n-           and then Present (Iterator_Specification (Iter))\n-         then\n+         if not Expander_Active then\n             declare\n-               Id : constant Entity_Id :=\n-                      Defining_Identifier (Iterator_Specification (Iter));\n+               I_Spec : constant Node_Id   := Iterator_Specification (Iter);\n+               Id     : constant Entity_Id := Defining_Identifier (I_Spec);\n+\n             begin\n                if Scope (Id) /= Current_Scope then\n                   Enter_Name (Id);\n                end if;\n+\n+               --  In an element iterator, The loop parameter is a variable if\n+               --  the domain of iteration (container or array) is a variable.\n+\n+               if not Of_Present (I_Spec)\n+                 or else not Is_Variable (Name (I_Spec))\n+               then\n+                  Set_Ekind (Id, E_Loop_Parameter);\n+               end if;\n             end;\n+\n+            Analyze_Statements (Statements (N));\n          end if;\n \n+      else\n+\n+         --  Pre-Ada2012 for-loops and while loops.\n+\n          Analyze_Statements (Statements (N));\n       end if;\n "}]}