{"sha": "f5c3dc96c341e300248c37f76067b5a02d61bffb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVjM2RjOTZjMzQxZTMwMDI0OGMzN2Y3NjA2N2I1YTAyZDYxYmZmYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2007-04-27T04:11:47Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2007-04-27T04:11:47Z"}, "message": "re PR target/28675 (ICE in extract_insn, at recog.c:2084 (unrecognizable insn) [arm])\n\ngcc/:\n\tPR target/28675\n\t* reload.c (find_reloads_subreg_address): If the address was valid\n\tin the original mode but not in the new mode, reload the whole\n\taddress.\ntestsuite/:\n\tPR target/28675\n\t* gcc.c-torture/compile/pr28675.c: New test.\n\nFrom-SVN: r124211", "tree": {"sha": "8c11ae004937c006a4b4b23a9a29439c32f3beee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c11ae004937c006a4b4b23a9a29439c32f3beee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5c3dc96c341e300248c37f76067b5a02d61bffb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5c3dc96c341e300248c37f76067b5a02d61bffb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5c3dc96c341e300248c37f76067b5a02d61bffb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5c3dc96c341e300248c37f76067b5a02d61bffb/comments", "author": null, "committer": null, "parents": [{"sha": "d333b74f9446e22d8c35a6713b3934f97e96a8aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d333b74f9446e22d8c35a6713b3934f97e96a8aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d333b74f9446e22d8c35a6713b3934f97e96a8aa"}], "stats": {"total": 79, "additions": 75, "deletions": 4}, "files": [{"sha": "526c390d4c15aa4fef871400a284c13a471d47e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c3dc96c341e300248c37f76067b5a02d61bffb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c3dc96c341e300248c37f76067b5a02d61bffb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5c3dc96c341e300248c37f76067b5a02d61bffb", "patch": "@@ -1,3 +1,10 @@\n+2007-04-26  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR target/28675\n+\t* reload.c (find_reloads_subreg_address): If the address was valid\n+\tin the original mode but not in the new mode, reload the whole\n+\taddress.\n+\n 2007-04-27  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \t* tree-cfgcleanup.c (cfgcleanup_altered_bbs): New global variable."}, {"sha": "de6093b03395140fbac8039580ffc9cbbc3c6e72", "filename": "gcc/reload.c", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c3dc96c341e300248c37f76067b5a02d61bffb/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c3dc96c341e300248c37f76067b5a02d61bffb/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=f5c3dc96c341e300248c37f76067b5a02d61bffb", "patch": "@@ -6006,6 +6006,8 @@ find_reloads_subreg_address (rtx x, int force_replace, int opnum,\n \t      unsigned inner_size = GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)));\n \t      int offset;\n \t      rtx orig = tem;\n+\t      enum machine_mode orig_mode = GET_MODE (orig);\n+\t      int reloaded;\n \n \t      /* For big-endian paradoxical subregs, SUBREG_BYTE does not\n \t\t hold the correct (negative) byte offset.  */\n@@ -6038,13 +6040,32 @@ find_reloads_subreg_address (rtx x, int force_replace, int opnum,\n \t\t    return x;\n \t\t}\n \n-\t      find_reloads_address (GET_MODE (tem), &tem, XEXP (tem, 0),\n-\t\t\t\t    &XEXP (tem, 0), opnum, type,\n-\t\t\t\t    ind_levels, insn);\n+\t      reloaded = find_reloads_address (GET_MODE (tem), &tem,\n+\t\t\t\t\t       XEXP (tem, 0), &XEXP (tem, 0),\n+\t\t\t\t\t       opnum, type, ind_levels, insn);\n \t      /* ??? Do we need to handle nonzero offsets somehow?  */\n \t      if (!offset && !rtx_equal_p (tem, orig))\n \t\tpush_reg_equiv_alt_mem (regno, tem);\n \n+\t      /* For some processors an address may be valid in the\n+\t\t original mode but not in a smaller mode.  For\n+\t\t example, ARM accepts a scaled index register in\n+\t\t SImode but not in HImode.  find_reloads_address\n+\t\t assumes that we pass it a valid address, and doesn't\n+\t\t force a reload.  This will probably be fine if\n+\t\t find_reloads_address finds some reloads.  But if it\n+\t\t doesn't find any, then we may have just converted a\n+\t\t valid address into an invalid one.  Check for that\n+\t\t here.  */\n+\t      if (reloaded != 1\n+\t\t  && strict_memory_address_p (orig_mode, XEXP (tem, 0))\n+\t\t  && !strict_memory_address_p (GET_MODE (tem),\n+\t\t\t\t\t       XEXP (tem, 0)))\n+\t\tpush_reload (XEXP (tem, 0), NULL_RTX, &XEXP (tem, 0), (rtx*) 0,\n+\t\t\t     base_reg_class (GET_MODE (tem), MEM, SCRATCH),\n+\t\t\t     GET_MODE (XEXP (tem, 0)), VOIDmode, 0, 0,\n+\t\t\t     opnum, type);\n+\n \t      /* If this is not a toplevel operand, find_reloads doesn't see\n \t\t this substitution.  We have to emit a USE of the pseudo so\n \t\t that delete_output_reload can see it.  */"}, {"sha": "40c811bb7aa4b62a71f01ee077700834d0e73fe8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c3dc96c341e300248c37f76067b5a02d61bffb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c3dc96c341e300248c37f76067b5a02d61bffb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f5c3dc96c341e300248c37f76067b5a02d61bffb", "patch": "@@ -1,3 +1,8 @@\n+2007-04-26  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR target/28675\n+\t* gcc.c-torture/compile/pr28675.c: New test.\n+\n 2007-04-26  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR C++/30016\n@@ -79,7 +84,7 @@\n \n 2007-04-24  Ian Lance Taylor  <iant@google.com>\n \n-\tPR tree-optimizatoin/31605\n+\tPR tree-optimization/31605\n \t* gcc.c-torture/execute/pr31605.c: New test.\n \n 2007-04-24  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>"}, {"sha": "0d78353739c2bf22ccfa446cc92e5faa7b96f40f", "filename": "gcc/testsuite/gcc.c-torture/compile/pr28675.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c3dc96c341e300248c37f76067b5a02d61bffb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr28675.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c3dc96c341e300248c37f76067b5a02d61bffb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr28675.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr28675.c?ref=f5c3dc96c341e300248c37f76067b5a02d61bffb", "patch": "@@ -0,0 +1,38 @@\n+struct fb_cmap {\n+ unsigned int start;\n+ unsigned int len;\n+ unsigned short *red;\n+ unsigned short *green;\n+ unsigned short *blue;\n+ unsigned short *transp;\n+};\n+\n+typedef struct {\n+    int r;\n+    int g;\n+    int b;\n+    int a;\n+} rgba_t;\n+\n+static unsigned int cmap_len;\n+\n+extern unsigned int red_len, green_len, blue_len, alpha_len;\n+extern struct fb_cmap fb_cmap;\n+extern rgba_t *clut;\n+extern int fb_set_cmap(void);\n+\n+void directcolor_update_cmap(void)\n+{\n+    unsigned int i;\n+\n+    for (i = 0; i < cmap_len; i++) {\n+      if (i < red_len)\n+\tfb_cmap.red[i] = clut[i].r;\n+      if (i < green_len)\n+\tfb_cmap.green[i] = clut[i].g;\n+      if (i < blue_len)\n+\tfb_cmap.blue[i] = clut[i].b;\n+      if (fb_cmap.transp && i < alpha_len)\n+\tfb_cmap.transp[i] = clut[i].a;\n+    }\n+}"}]}