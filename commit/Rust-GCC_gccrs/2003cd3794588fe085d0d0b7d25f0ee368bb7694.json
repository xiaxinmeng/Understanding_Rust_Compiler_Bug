{"sha": "2003cd3794588fe085d0d0b7d25f0ee368bb7694", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAwM2NkMzc5NDU4OGZlMDg1ZDBkMGI3ZDI1ZjBlZTM2OGJiNzY5NA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-11-26T07:20:13Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-11-26T07:20:13Z"}, "message": "empty11.C: New test.\n\n\t* testsuite/g++.dg/abi/empty11.C: New test.\n\t* testsuite/g++.dg/rtti/cv1.C: New test.\n\n\t* tree.c (cp_build_qualified_type_real): Correct handling of\n\tarray types.\n\t* class.c (walk_subobject_offsets): Fix thinko.\n\t(build_base_field): Record offsets of empty bases in primary\n\tvirtual bases.\n\t(layout_class_type): Record offsets of empty bases in fields.\n\nFrom-SVN: r59497", "tree": {"sha": "e33275eb6e613357e38a3107b8118e25a168ba55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e33275eb6e613357e38a3107b8118e25a168ba55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2003cd3794588fe085d0d0b7d25f0ee368bb7694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2003cd3794588fe085d0d0b7d25f0ee368bb7694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2003cd3794588fe085d0d0b7d25f0ee368bb7694", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2003cd3794588fe085d0d0b7d25f0ee368bb7694/comments", "author": null, "committer": null, "parents": [{"sha": "cbad89c4e2c9f6fdb510bf9f2878ffcd31c91e2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbad89c4e2c9f6fdb510bf9f2878ffcd31c91e2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbad89c4e2c9f6fdb510bf9f2878ffcd31c91e2f"}], "stats": {"total": 97, "additions": 84, "deletions": 13}, "files": [{"sha": "5557d2bb5b158c42dc87527c59e991e72b0b94b1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2003cd3794588fe085d0d0b7d25f0ee368bb7694/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2003cd3794588fe085d0d0b7d25f0ee368bb7694/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2003cd3794588fe085d0d0b7d25f0ee368bb7694", "patch": "@@ -1,5 +1,12 @@\n 2002-11-25  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* tree.c (cp_build_qualified_type_real): Correct handling of\n+\tarray types.\n+\t* class.c (walk_subobject_offsets): Fix thinko.\n+\t(build_base_field): Record offsets of empty bases in primary\n+\tvirtual bases.\n+\t(layout_class_type): Record offsets of empty bases in fields.\n+\t\n \t* search.c (is_subobject_of_p_1): Fix thinko.\n \t(lookup_field_queue_p): Likewise.\n "}, {"sha": "fdd9c479a8374e3d9ce54a84035f45dd03f4f49c", "filename": "gcc/cp/class.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2003cd3794588fe085d0d0b7d25f0ee368bb7694/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2003cd3794588fe085d0d0b7d25f0ee368bb7694/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=2003cd3794588fe085d0d0b7d25f0ee368bb7694", "patch": "@@ -3391,8 +3391,8 @@ check_subobject_offset (type, offset, offsets)\n \n /* Walk through all the subobjects of TYPE (located at OFFSET).  Call\n    F for every subobject, passing it the type, offset, and table of\n-   OFFSETS.  If VBASES_P is nonzero, then even virtual non-primary\n-   bases should be traversed; otherwise, they are ignored.  \n+   OFFSETS.  If VBASES_P is one, then virtual non-primary bases should\n+   be traversed.\n \n    If MAX_OFFSET is non-NULL, then subobjects with an offset greater\n    than MAX_OFFSET will not be walked.\n@@ -3480,6 +3480,8 @@ walk_subobject_offsets (type, f, offset, offsets, max_offset, vbases_p)\n \t\t\t\t\t  offsets,\n \t\t\t\t\t  max_offset,\n \t\t\t\t\t  /*vbases_p=*/0);\n+\t      if (r)\n+\t\treturn r;\n \t    }\n \t}\n \n@@ -3851,6 +3853,27 @@ build_base_field (record_layout_info rli, tree binfo,\n \t\t\t    offsets, \n \t\t\t    /*vbases_p=*/0);\n \n+  if (abi_version_at_least (2))\n+    {\n+      /* If BINFO has a primary virtual base that is really going to\n+\t be located at the same offset as binfo, it will have been\n+\t skipped -- but we should record empty bases from there too.  */\n+      while (true) \n+\t{\n+\t  tree b;\n+\n+\t  b = get_primary_binfo (binfo);\n+\t  if (!b || BINFO_PRIMARY_BASE_OF (b) != binfo)\n+\t    break;\n+\t  if (TREE_VIA_VIRTUAL (b))\n+\t    record_subobject_offsets (BINFO_TYPE (b),\n+\t\t\t\t      BINFO_OFFSET (b),\n+\t\t\t\t      offsets,\n+\t\t\t\t      /*vbases_p=*/0);\n+\t  binfo = b;\n+\t}\n+    }\n+\n   return next_field;\n }\n \n@@ -4940,6 +4963,13 @@ layout_class_type (tree t, tree *virtuals_p)\n       layout_nonempty_base_or_field (rli, field, NULL_TREE,\n \t\t\t\t     empty_base_offsets);\n \n+      /* Remember the location of any empty classes in FIELD.  */\n+      if (abi_version_at_least (2))\n+\trecord_subobject_offsets (TREE_TYPE (field), \n+\t\t\t\t  byte_position(field),\n+\t\t\t\t  empty_base_offsets,\n+\t\t\t\t  /*vbases_p=*/1);\n+\n       /* If a bit-field does not immediately follow another bit-field,\n \t and yet it starts in the middle of a byte, we have failed to\n \t comply with the ABI.  */"}, {"sha": "b101ac6ba0449406cd12474b65174d886b048cc9", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2003cd3794588fe085d0d0b7d25f0ee368bb7694/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2003cd3794588fe085d0d0b7d25f0ee368bb7694/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=2003cd3794588fe085d0d0b7d25f0ee368bb7694", "patch": "@@ -650,17 +650,10 @@ cp_build_qualified_type_real (type, type_quals, complain)\n       if (element_type == error_mark_node)\n \treturn error_mark_node;\n \n-      /* See if we already have an identically qualified type.  */\n-      t = get_qualified_type (type, type_quals);\n-\n-      /* If we didn't already have it, create it now.  */\n-      if (!t)\n-\t{\n-\t  /* Make a new array type, just like the old one, but with the\n-\t     appropriately qualified element type.  */\n-\t  t = build_type_copy (type);\n-\t  TREE_TYPE (t) = element_type;\n-\t}\n+      /* Make a new array type, just like the old one, but with the\n+\t appropriately qualified element type.  */\n+      t = build_type_copy (type);\n+      TREE_TYPE (t) = element_type;\n \n       /* Even if we already had this variant, we update\n \t TYPE_NEEDS_CONSTRUCTING and TYPE_HAS_NONTRIVIAL_DESTRUCTOR in case"}, {"sha": "70ada4e3047a99912ab6a4530bc6bbfffa1e32bc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2003cd3794588fe085d0d0b7d25f0ee368bb7694/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2003cd3794588fe085d0d0b7d25f0ee368bb7694/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2003cd3794588fe085d0d0b7d25f0ee368bb7694", "patch": "@@ -1,3 +1,8 @@\n+2002-11-25  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* testsuite/g++.dg/abi/empty11.C: New test.\n+\t* testsuite/g++.dg/rtti/cv1.C: New test.\n+\n 2002-11-25  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* lib/prune.exp: Prune more -fpic/-fPIC warnings."}, {"sha": "b35363f5bf6c5205f8e8c8fc4f91ed2a4b4ab5af", "filename": "gcc/testsuite/g++.dg/abi/empty11.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2003cd3794588fe085d0d0b7d25f0ee368bb7694/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2003cd3794588fe085d0d0b7d25f0ee368bb7694/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty11.C?ref=2003cd3794588fe085d0d0b7d25f0ee368bb7694", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do run }\n+// { dg-options \"-w -fabi-version=0\" }\n+\n+struct E {};\n+struct E2 : public E {};\n+struct E3 : public E, public E2 {};\n+struct E4 : public E, public E2, public E3 { };\n+struct E5 : public E, public E2, public E3, public E4 {};\n+\n+struct S : public virtual E5 {\n+  E e;\n+};\n+\n+S s;\n+\n+int main () {\n+  if ((char*)(E4*)&s - (char*)&s == 0)\n+    return 1;\n+}"}, {"sha": "59dd6592c9da7932e0ea0d7697f7bdff48195e62", "filename": "gcc/testsuite/g++.dg/rtti/cv1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2003cd3794588fe085d0d0b7d25f0ee368bb7694/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fcv1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2003cd3794588fe085d0d0b7d25f0ee368bb7694/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fcv1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fcv1.C?ref=2003cd3794588fe085d0d0b7d25f0ee368bb7694", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do run }\n+\n+#include <typeinfo>\n+#include <string.h>\n+\n+struct S {};\n+\n+typedef S volatile T[4];\n+\n+T t[3];\n+\n+const std::type_info& ti = typeid (t);\n+\n+int main () {\n+  if (strcmp (ti.name (), \"A3_A4_1S\") != 0)\n+    return 1;\n+}"}]}