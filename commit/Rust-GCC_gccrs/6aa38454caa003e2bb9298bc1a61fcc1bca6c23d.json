{"sha": "6aa38454caa003e2bb9298bc1a61fcc1bca6c23d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFhMzg0NTRjYWEwMDNlMmJiOTI5OGJjMWE2MWZjYzFiY2E2YzIzZA==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2007-11-30T04:18:05Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-11-30T04:18:05Z"}, "message": "re PR fortran/34230 (Expressions of parameters evaluated with too high precision)\n\n2007-11-29  Steven G. Kargl  <kargls@comcast.net>\n\n\tPR fortran/34230\n\t* gfortran.dg/real_const_3.f90: Fix up for new range-check handling.\n\nFrom-SVN: r130532", "tree": {"sha": "eb2cc5c712566ded4015072b838ea362cbefce1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb2cc5c712566ded4015072b838ea362cbefce1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6aa38454caa003e2bb9298bc1a61fcc1bca6c23d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa38454caa003e2bb9298bc1a61fcc1bca6c23d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aa38454caa003e2bb9298bc1a61fcc1bca6c23d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa38454caa003e2bb9298bc1a61fcc1bca6c23d/comments", "author": null, "committer": null, "parents": [{"sha": "786a435680acbafe679f3509a705e98ae89b3645", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786a435680acbafe679f3509a705e98ae89b3645", "html_url": "https://github.com/Rust-GCC/gccrs/commit/786a435680acbafe679f3509a705e98ae89b3645"}], "stats": {"total": 75, "additions": 46, "deletions": 29}, "files": [{"sha": "50468f9463ff43793b836c7280e63964076377c8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa38454caa003e2bb9298bc1a61fcc1bca6c23d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa38454caa003e2bb9298bc1a61fcc1bca6c23d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6aa38454caa003e2bb9298bc1a61fcc1bca6c23d", "patch": "@@ -1,3 +1,8 @@\n+2007-11-29  Steven G. Kargl  <kargls@comcast.net>\n+\n+\tPR fortran/34230\n+\t* gfortran.dg/real_const_3.f90: Fix up for new range-check handling.\n+\n 2007-11-29  Zdenek Dvorak  <ook@ucw.cz>\n \n \tPR tree-optimization/34244"}, {"sha": "d9cb3580a609b68c3fea45c4b699667a43d1a6c5", "filename": "gcc/testsuite/gfortran.dg/gamma_5.f90", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa38454caa003e2bb9298bc1a61fcc1bca6c23d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa38454caa003e2bb9298bc1a61fcc1bca6c23d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_5.f90?ref=6aa38454caa003e2bb9298bc1a61fcc1bca6c23d", "patch": "@@ -1,5 +1,4 @@\n ! { dg-do run }\n-! { dg-xfail-if \"\" { \"*-*-freebsd*\" } { \"*\" }  { \"\" } }\n ! PR 33683 - we used to pick up the wrong gamma function\n ! from the library on some systems.\n program main"}, {"sha": "0a2efcf91ef4022404cf692c84500e2b354a2375", "filename": "gcc/testsuite/gfortran.dg/real_const_3.f90", "status": "modified", "additions": 41, "deletions": 28, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa38454caa003e2bb9298bc1a61fcc1bca6c23d/gcc%2Ftestsuite%2Fgfortran.dg%2Freal_const_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa38454caa003e2bb9298bc1a61fcc1bca6c23d/gcc%2Ftestsuite%2Fgfortran.dg%2Freal_const_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Freal_const_3.f90?ref=6aa38454caa003e2bb9298bc1a61fcc1bca6c23d", "patch": "@@ -3,39 +3,52 @@\n ! PR19310 and PR19904, allow disabling range check during compile.\n ! Contributed by Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n program main\n+  character(len=80) str\n   real, parameter :: zero=0, nan=0/zero\n   complex :: z = (-0.1,-2.2)/(0.0,0.0)\n   complex :: z2 = (0.1,1)/0\n-  complex :: z3 = (1e300, -2e-200)/1234e-325\n-  complex :: z4 = (1e-300, -2e-200)/1234e325\n+  complex :: z3 = (1e35, -2e3)/1.234e-37\n+  complex :: z4 = (1e-35, -2e-35)/1234e34\n   real :: a\n   a = exp(1000.0)\n   b = 1/exp(1000.0)\n-  print *, a\n-  print *, b\n-  print *, -1.0/b\n-  print *, b/0.0\n-  print *, 0.0/0.0\n-  print *, 1.0/-0.0\n-  print *, -2.0/0.0\n-  print *, 3.0/0.0\n-  print *, nan\n-  print *, z\n-  print *, z2\n-  print *, z3\n-  print *, z4\n+\n+  write(str,*) a\n+  if (trim(adjustl(str)) .ne. '+Infinity') call abort\n+\n+  if (b .ne. 0.) call abort\n+\n+  write(str,*) -1.0/b\n+  if (trim(adjustl(str)) .ne. '-Infinity') call abort\n+\n+  write(str,*) b/0.0\n+  if (trim(adjustl(str)) .ne. 'NaN') call abort\n+\n+  write(str,*) 0.0/0.0\n+  if (trim(adjustl(str)) .ne. 'NaN') call abort\n+\n+  write(str,*) 1.0/-0.\n+  if (trim(adjustl(str)) .ne. '-Infinity') call abort\n+\n+  write(str,*) -2.0/0.\n+  if (trim(adjustl(str)) .ne. '-Infinity') call abort\n+\n+  write(str,*) 3.0/0.\n+  if (trim(adjustl(str)) .ne. '+Infinity') call abort\n+\n+  write(str,*)  nan\n+  if (trim(adjustl(str)) .ne. 'NaN') call abort\n+\n+  write(str,*) z\n+  if (trim(adjustl(str)) .ne. '(            NaN,            NaN)') call abort\n+\n+  write(str,*) z2\n+  if (trim(adjustl(str)) .ne. '(            NaN,            NaN)') call abort\n+\n+  write(str,*) z3\n+  if (trim(adjustl(str)) .ne. '(      +Infinity,      -Infinity)') call abort\n+\n+  write(str,*) z4\n+  if (trim(adjustl(str)) .ne. '(  0.0000000    , -0.0000000    )') call abort\n \n end program main\n-!{ dg-output \"      \\\\+Infinity(\\n|\\r\\n|\\r)\" }\n-!{ dg-output \"   0.0000000    (\\n|\\r\\n|\\r)\" }\n-!{ dg-output \"       -Infinity(\\n|\\r\\n|\\r)\" }\n-!{ dg-output \"             NaN(\\n|\\r\\n|\\r)\" }\n-!{ dg-output \"             NaN(\\n|\\r\\n|\\r)\" }\n-!{ dg-output \"       -Infinity(\\n|\\r\\n|\\r)\" }\n-!{ dg-output \"       -Infinity(\\n|\\r\\n|\\r)\" }\n-!{ dg-output \"       \\\\+Infinity(\\n|\\r\\n|\\r)\" }\n-!{ dg-output \"             NaN(\\n|\\r\\n|\\r)\" }\n-!{ dg-output \" \\\\(            NaN,            NaN\\\\)(\\n|\\r\\n|\\r)\" }\n-!{ dg-output \" \\\\(            NaN,            NaN\\\\)(\\n|\\r\\n|\\r)\" }\n-!{ dg-output \" \\\\(      \\\\+Infinity,      -Infinity\\\\)(\\n|\\r\\n|\\r)\" }\n-!{ dg-output \" \\\\(  0.0000000    , -0.0000000    \\\\)(\\n|\\r\\n|\\r)\" }"}]}