{"sha": "eee5d6f5271132ac65553c0accae401f17f91182", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVlNWQ2ZjUyNzExMzJhYzY1NTUzYzBhY2NhZTQwMWYxN2Y5MTE4Mg==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-10-29T07:13:01Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-10-29T07:13:01Z"}, "message": "AVX-512. 88/n. Add missed avx512bw/avx512vl cmp intrinsics.\n\ngcc/\n\t* config/i386/avx512bwintrin.h: Add new intrinsics.\n\t* config/i386/avx512vlbwintrin.h: Ditto.\n\t* config/i386/avx512vlintrin.h: Ditto.\ngcc/testsuite/\n\t* gcc.target/i386/avx512bw-vpcmpequb-1.c: New.\n\t* gcc.target/i386/avx512bw-vpcmpequb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpequw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpequw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpgeb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpgeb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpgeub-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpgeub-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpgeuw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpgeuw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpgew-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpgew-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpgtub-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpgtub-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpgtuw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpgtuw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpleb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpleb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpleub-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpleub-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpleuw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpleuw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmplew-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmplew-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpltb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpltb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpltub-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpltub-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpltuw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpltuw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpltw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpltw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpneqb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpneqb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpnequb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpnequb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpnequw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpnequw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpneqw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpneqw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpequb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpequd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpequd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpequq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpequq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpequw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpged-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpgeq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpgeud-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpgeuq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpgtub-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpgtud-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpgtud-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpgtuq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpgtuq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpgtuw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpled-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpleq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpleud-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpleuq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpltd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpltq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpltud-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpltuq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpneqd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpneqq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpnequd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpnequq-1.c: Ditto.\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r216819", "tree": {"sha": "14d00dbf58f563b71fd13055cc94135e80e24909", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14d00dbf58f563b71fd13055cc94135e80e24909"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eee5d6f5271132ac65553c0accae401f17f91182", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eee5d6f5271132ac65553c0accae401f17f91182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eee5d6f5271132ac65553c0accae401f17f91182", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eee5d6f5271132ac65553c0accae401f17f91182/comments", "author": null, "committer": null, "parents": [{"sha": "6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6df7579fb01935f9cf70b3e8e9bb6fac904cf709"}], "stats": {"total": 3399, "additions": 3399, "deletions": 0}, "files": [{"sha": "e28043f2225031c41f768aa55df9068a4d24896a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -1,3 +1,16 @@\n+2014-10-29  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/avx512bwintrin.h: Add new intrinsics.\n+\t* config/i386/avx512vlbwintrin.h: Ditto.\n+\t* config/i386/avx512vlintrin.h: Ditto.\n+\n 2014-10-28  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n         * godump.c (precision_to_units): New helper function."}, {"sha": "d70cae0e9a07dec9a42d46bbcf65edbed66186e4", "filename": "gcc/config/i386/avx512bwintrin.h", "status": "modified", "additions": 360, "deletions": 0, "changes": 360, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -1373,6 +1373,15 @@ _mm512_maskz_unpacklo_epi16 (__mmask32 __U, __m512i __A, __m512i __B)\n \t\t\t\t\t\t     (__mmask32) __U);\n }\n \n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpeq_epu8_mask (__m512i __A, __m512i __B)\n+{\n+  return (__mmask64) __builtin_ia32_ucmpb512_mask ((__v64qi) __A,\n+\t\t\t\t\t\t    (__v64qi) __B, 0,\n+\t\t\t\t\t\t    (__mmask64) -1);\n+}\n+\n extern __inline __mmask64\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_cmpeq_epi8_mask (__m512i __A, __m512i __B)\n@@ -1382,6 +1391,15 @@ _mm512_cmpeq_epi8_mask (__m512i __A, __m512i __B)\n \t\t\t\t\t\t     (__mmask64) -1);\n }\n \n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpeq_epu8_mask (__mmask64 __U, __m512i __A, __m512i __B)\n+{\n+  return (__mmask64) __builtin_ia32_ucmpb512_mask ((__v64qi) __A,\n+\t\t\t\t\t\t    (__v64qi) __B, 0,\n+\t\t\t\t\t\t    __U);\n+}\n+\n extern __inline __mmask64\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_cmpeq_epi8_mask (__mmask64 __U, __m512i __A, __m512i __B)\n@@ -1391,6 +1409,15 @@ _mm512_mask_cmpeq_epi8_mask (__mmask64 __U, __m512i __A, __m512i __B)\n \t\t\t\t\t\t     __U);\n }\n \n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpeq_epu16_mask (__m512i __A, __m512i __B)\n+{\n+  return (__mmask32) __builtin_ia32_ucmpw512_mask ((__v32hi) __A,\n+\t\t\t\t\t\t    (__v32hi) __B, 0,\n+\t\t\t\t\t\t    (__mmask32) -1);\n+}\n+\n extern __inline __mmask32\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_cmpeq_epi16_mask (__m512i __A, __m512i __B)\n@@ -1400,6 +1427,15 @@ _mm512_cmpeq_epi16_mask (__m512i __A, __m512i __B)\n \t\t\t\t\t\t     (__mmask32) -1);\n }\n \n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpeq_epu16_mask (__mmask32 __U, __m512i __A, __m512i __B)\n+{\n+  return (__mmask32) __builtin_ia32_ucmpw512_mask ((__v32hi) __A,\n+\t\t\t\t\t\t    (__v32hi) __B, 0,\n+\t\t\t\t\t\t    __U);\n+}\n+\n extern __inline __mmask32\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_cmpeq_epi16_mask (__mmask32 __U, __m512i __A, __m512i __B)\n@@ -1409,6 +1445,15 @@ _mm512_mask_cmpeq_epi16_mask (__mmask32 __U, __m512i __A, __m512i __B)\n \t\t\t\t\t\t     __U);\n }\n \n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpgt_epu8_mask (__m512i __A, __m512i __B)\n+{\n+  return (__mmask64) __builtin_ia32_ucmpb512_mask ((__v64qi) __A,\n+\t\t\t\t\t\t    (__v64qi) __B, 6,\n+\t\t\t\t\t\t    (__mmask64) -1);\n+}\n+\n extern __inline __mmask64\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_cmpgt_epi8_mask (__m512i __A, __m512i __B)\n@@ -1418,6 +1463,15 @@ _mm512_cmpgt_epi8_mask (__m512i __A, __m512i __B)\n \t\t\t\t\t\t     (__mmask64) -1);\n }\n \n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpgt_epu8_mask (__mmask64 __U, __m512i __A, __m512i __B)\n+{\n+  return (__mmask64) __builtin_ia32_ucmpb512_mask ((__v64qi) __A,\n+\t\t\t\t\t\t    (__v64qi) __B, 6,\n+\t\t\t\t\t\t    __U);\n+}\n+\n extern __inline __mmask64\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_cmpgt_epi8_mask (__mmask64 __U, __m512i __A, __m512i __B)\n@@ -1427,6 +1481,15 @@ _mm512_mask_cmpgt_epi8_mask (__mmask64 __U, __m512i __A, __m512i __B)\n \t\t\t\t\t\t     __U);\n }\n \n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpgt_epu16_mask (__m512i __A, __m512i __B)\n+{\n+  return (__mmask32) __builtin_ia32_ucmpw512_mask ((__v32hi) __A,\n+\t\t\t\t\t\t    (__v32hi) __B, 6,\n+\t\t\t\t\t\t    (__mmask32) -1);\n+}\n+\n extern __inline __mmask32\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_cmpgt_epi16_mask (__m512i __A, __m512i __B)\n@@ -1436,6 +1499,15 @@ _mm512_cmpgt_epi16_mask (__m512i __A, __m512i __B)\n \t\t\t\t\t\t     (__mmask32) -1);\n }\n \n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpgt_epu16_mask (__mmask32 __U, __m512i __A, __m512i __B)\n+{\n+  return (__mmask32) __builtin_ia32_ucmpw512_mask ((__v32hi) __A,\n+\t\t\t\t\t\t    (__v32hi) __B, 6,\n+\t\t\t\t\t\t    __U);\n+}\n+\n extern __inline __mmask32\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_cmpgt_epi16_mask (__mmask32 __U, __m512i __A, __m512i __B)\n@@ -2083,6 +2155,294 @@ _mm512_maskz_abs_epi16 (__mmask32 __U, __m512i __A)\n \t\t\t\t\t\t (__mmask32) __U);\n }\n \n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpneq_epu8_mask (__mmask64 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask64) __builtin_ia32_ucmpb512_mask ((__v64qi) __X,\n+\t\t\t\t\t\t   (__v64qi) __Y, 4,\n+\t\t\t\t\t\t   (__mmask64) __M);\n+}\n+\n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmplt_epu8_mask (__mmask64 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask64) __builtin_ia32_ucmpb512_mask ((__v64qi) __X,\n+\t\t\t\t\t\t   (__v64qi) __Y, 1,\n+\t\t\t\t\t\t   (__mmask64) __M);\n+}\n+\n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpge_epu8_mask (__mmask64 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask64) __builtin_ia32_ucmpb512_mask ((__v64qi) __X,\n+\t\t\t\t\t\t   (__v64qi) __Y, 5,\n+\t\t\t\t\t\t   (__mmask64) __M);\n+}\n+\n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmple_epu8_mask (__mmask64 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask64) __builtin_ia32_ucmpb512_mask ((__v64qi) __X,\n+\t\t\t\t\t\t   (__v64qi) __Y, 2,\n+\t\t\t\t\t\t   (__mmask64) __M);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpneq_epu16_mask (__mmask32 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask32) __builtin_ia32_ucmpw512_mask ((__v32hi) __X,\n+\t\t\t\t\t\t   (__v32hi) __Y, 4,\n+\t\t\t\t\t\t   (__mmask32) __M);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmplt_epu16_mask (__mmask32 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask32) __builtin_ia32_ucmpw512_mask ((__v32hi) __X,\n+\t\t\t\t\t\t   (__v32hi) __Y, 1,\n+\t\t\t\t\t\t   (__mmask32) __M);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpge_epu16_mask (__mmask32 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask32) __builtin_ia32_ucmpw512_mask ((__v32hi) __X,\n+\t\t\t\t\t\t   (__v32hi) __Y, 5,\n+\t\t\t\t\t\t   (__mmask32) __M);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmple_epu16_mask (__mmask32 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask32) __builtin_ia32_ucmpw512_mask ((__v32hi) __X,\n+\t\t\t\t\t\t   (__v32hi) __Y, 2,\n+\t\t\t\t\t\t   (__mmask32) __M);\n+}\n+\n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpneq_epi8_mask (__mmask64 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask64) __builtin_ia32_cmpb512_mask ((__v64qi) __X,\n+\t\t\t\t\t\t  (__v64qi) __Y, 4,\n+\t\t\t\t\t\t  (__mmask64) __M);\n+}\n+\n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmplt_epi8_mask (__mmask64 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask64) __builtin_ia32_cmpb512_mask ((__v64qi) __X,\n+\t\t\t\t\t\t  (__v64qi) __Y, 1,\n+\t\t\t\t\t\t  (__mmask64) __M);\n+}\n+\n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpge_epi8_mask (__mmask64 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask64) __builtin_ia32_cmpb512_mask ((__v64qi) __X,\n+\t\t\t\t\t\t  (__v64qi) __Y, 5,\n+\t\t\t\t\t\t  (__mmask64) __M);\n+}\n+\n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmple_epi8_mask (__mmask64 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask64) __builtin_ia32_cmpb512_mask ((__v64qi) __X,\n+\t\t\t\t\t\t  (__v64qi) __Y, 2,\n+\t\t\t\t\t\t  (__mmask64) __M);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpneq_epi16_mask (__mmask32 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask32) __builtin_ia32_cmpw512_mask ((__v32hi) __X,\n+\t\t\t\t\t\t  (__v32hi) __Y, 4,\n+\t\t\t\t\t\t  (__mmask32) __M);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmplt_epi16_mask (__mmask32 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask32) __builtin_ia32_cmpw512_mask ((__v32hi) __X,\n+\t\t\t\t\t\t  (__v32hi) __Y, 1,\n+\t\t\t\t\t\t  (__mmask32) __M);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpge_epi16_mask (__mmask32 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask32) __builtin_ia32_cmpw512_mask ((__v32hi) __X,\n+\t\t\t\t\t\t  (__v32hi) __Y, 5,\n+\t\t\t\t\t\t  (__mmask32) __M);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmple_epi16_mask (__mmask32 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask32) __builtin_ia32_cmpw512_mask ((__v32hi) __X,\n+\t\t\t\t\t\t  (__v32hi) __Y, 2,\n+\t\t\t\t\t\t  (__mmask32) __M);\n+}\n+\n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpneq_epu8_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask64) __builtin_ia32_ucmpb512_mask ((__v64qi) __X,\n+\t\t\t\t\t\t   (__v64qi) __Y, 4,\n+\t\t\t\t\t\t   (__mmask64) - 1);\n+}\n+\n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmplt_epu8_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask64) __builtin_ia32_ucmpb512_mask ((__v64qi) __X,\n+\t\t\t\t\t\t   (__v64qi) __Y, 1,\n+\t\t\t\t\t\t   (__mmask64) - 1);\n+}\n+\n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpge_epu8_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask64) __builtin_ia32_ucmpb512_mask ((__v64qi) __X,\n+\t\t\t\t\t\t   (__v64qi) __Y, 5,\n+\t\t\t\t\t\t   (__mmask64) - 1);\n+}\n+\n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmple_epu8_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask64) __builtin_ia32_ucmpb512_mask ((__v64qi) __X,\n+\t\t\t\t\t\t   (__v64qi) __Y, 2,\n+\t\t\t\t\t\t   (__mmask64) - 1);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpneq_epu16_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask32) __builtin_ia32_ucmpw512_mask ((__v32hi) __X,\n+\t\t\t\t\t\t   (__v32hi) __Y, 4,\n+\t\t\t\t\t\t   (__mmask32) - 1);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmplt_epu16_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask32) __builtin_ia32_ucmpw512_mask ((__v32hi) __X,\n+\t\t\t\t\t\t   (__v32hi) __Y, 1,\n+\t\t\t\t\t\t   (__mmask32) - 1);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpge_epu16_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask32) __builtin_ia32_ucmpw512_mask ((__v32hi) __X,\n+\t\t\t\t\t\t   (__v32hi) __Y, 5,\n+\t\t\t\t\t\t   (__mmask32) - 1);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmple_epu16_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask32) __builtin_ia32_ucmpw512_mask ((__v32hi) __X,\n+\t\t\t\t\t\t   (__v32hi) __Y, 2,\n+\t\t\t\t\t\t   (__mmask32) - 1);\n+}\n+\n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpneq_epi8_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask64) __builtin_ia32_cmpb512_mask ((__v64qi) __X,\n+\t\t\t\t\t\t  (__v64qi) __Y, 4,\n+\t\t\t\t\t\t  (__mmask64) - 1);\n+}\n+\n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmplt_epi8_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask64) __builtin_ia32_cmpb512_mask ((__v64qi) __X,\n+\t\t\t\t\t\t  (__v64qi) __Y, 1,\n+\t\t\t\t\t\t  (__mmask64) - 1);\n+}\n+\n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpge_epi8_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask64) __builtin_ia32_cmpb512_mask ((__v64qi) __X,\n+\t\t\t\t\t\t  (__v64qi) __Y, 5,\n+\t\t\t\t\t\t  (__mmask64) - 1);\n+}\n+\n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmple_epi8_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask64) __builtin_ia32_cmpb512_mask ((__v64qi) __X,\n+\t\t\t\t\t\t  (__v64qi) __Y, 2,\n+\t\t\t\t\t\t  (__mmask64) - 1);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpneq_epi16_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask32) __builtin_ia32_cmpw512_mask ((__v32hi) __X,\n+\t\t\t\t\t\t  (__v32hi) __Y, 4,\n+\t\t\t\t\t\t  (__mmask32) - 1);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmplt_epi16_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask32) __builtin_ia32_cmpw512_mask ((__v32hi) __X,\n+\t\t\t\t\t\t  (__v32hi) __Y, 1,\n+\t\t\t\t\t\t  (__mmask32) - 1);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpge_epi16_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask32) __builtin_ia32_cmpw512_mask ((__v32hi) __X,\n+\t\t\t\t\t\t  (__v32hi) __Y, 5,\n+\t\t\t\t\t\t  (__mmask32) - 1);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmple_epi16_mask (__m512i __X, __m512i __Y)\n+{\n+  return (__mmask32) __builtin_ia32_cmpw512_mask ((__v32hi) __X,\n+\t\t\t\t\t\t  (__v32hi) __Y, 2,\n+\t\t\t\t\t\t  (__mmask32) - 1);\n+}\n+\n #ifdef __OPTIMIZE__\n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "a2255800cc7a6e704a922a409a3311870d55ba01", "filename": "gcc/config/i386/avx512vlbwintrin.h", "status": "modified", "additions": 430, "deletions": 0, "changes": 430, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Fconfig%2Fi386%2Favx512vlbwintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Fconfig%2Fi386%2Favx512vlbwintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vlbwintrin.h?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -3053,6 +3053,24 @@ _mm_cmpeq_epi8_mask (__m128i __A, __m128i __B)\n \t\t\t\t\t\t     (__mmask16) -1);\n }\n \n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cmpeq_epu8_mask (__m128i __A, __m128i __B)\n+{\n+  return (__mmask16) __builtin_ia32_ucmpb128_mask ((__v16qi) __A,\n+\t\t\t\t\t\t    (__v16qi) __B, 0,\n+\t\t\t\t\t\t    (__mmask16) -1);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmpeq_epu8_mask (__mmask16 __U, __m128i __A, __m128i __B)\n+{\n+  return (__mmask16) __builtin_ia32_ucmpb128_mask ((__v16qi) __A,\n+\t\t\t\t\t\t    (__v16qi) __B, 0,\n+\t\t\t\t\t\t    __U);\n+}\n+\n extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cmpeq_epi8_mask (__mmask16 __U, __m128i __A, __m128i __B)\n@@ -3062,6 +3080,15 @@ _mm_mask_cmpeq_epi8_mask (__mmask16 __U, __m128i __A, __m128i __B)\n \t\t\t\t\t\t     __U);\n }\n \n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cmpeq_epu8_mask (__m256i __A, __m256i __B)\n+{\n+  return (__mmask32) __builtin_ia32_ucmpb256_mask ((__v32qi) __A,\n+\t\t\t\t\t\t    (__v32qi) __B, 0,\n+\t\t\t\t\t\t    (__mmask32) -1);\n+}\n+\n extern __inline __mmask32\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmpeq_epi8_mask (__m256i __A, __m256i __B)\n@@ -3071,6 +3098,15 @@ _mm256_cmpeq_epi8_mask (__m256i __A, __m256i __B)\n \t\t\t\t\t\t     (__mmask32) -1);\n }\n \n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmpeq_epu8_mask (__mmask32 __U, __m256i __A, __m256i __B)\n+{\n+  return (__mmask32) __builtin_ia32_ucmpb256_mask ((__v32qi) __A,\n+\t\t\t\t\t\t    (__v32qi) __B, 0,\n+\t\t\t\t\t\t    __U);\n+}\n+\n extern __inline __mmask32\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_cmpeq_epi8_mask (__mmask32 __U, __m256i __A, __m256i __B)\n@@ -3080,6 +3116,15 @@ _mm256_mask_cmpeq_epi8_mask (__mmask32 __U, __m256i __A, __m256i __B)\n \t\t\t\t\t\t     __U);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cmpeq_epu16_mask (__m128i __A, __m128i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpw128_mask ((__v8hi) __A,\n+\t\t\t\t\t\t   (__v8hi) __B, 0,\n+\t\t\t\t\t\t   (__mmask8) -1);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpeq_epi16_mask (__m128i __A, __m128i __B)\n@@ -3089,6 +3134,14 @@ _mm_cmpeq_epi16_mask (__m128i __A, __m128i __B)\n \t\t\t\t\t\t    (__mmask8) -1);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmpeq_epu16_mask (__mmask8 __U, __m128i __A, __m128i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpw128_mask ((__v8hi) __A,\n+\t\t\t\t\t\t   (__v8hi) __B, 0, __U);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cmpeq_epi16_mask (__mmask8 __U, __m128i __A, __m128i __B)\n@@ -3097,6 +3150,15 @@ _mm_mask_cmpeq_epi16_mask (__mmask8 __U, __m128i __A, __m128i __B)\n \t\t\t\t\t\t    (__v8hi) __B, __U);\n }\n \n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cmpeq_epu16_mask (__m256i __A, __m256i __B)\n+{\n+  return (__mmask16) __builtin_ia32_ucmpw256_mask ((__v16hi) __A,\n+\t\t\t\t\t\t    (__v16hi) __B, 0,\n+\t\t\t\t\t\t    (__mmask16) -1);\n+}\n+\n extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmpeq_epi16_mask (__m256i __A, __m256i __B)\n@@ -3106,6 +3168,15 @@ _mm256_cmpeq_epi16_mask (__m256i __A, __m256i __B)\n \t\t\t\t\t\t     (__mmask16) -1);\n }\n \n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmpeq_epu16_mask (__mmask16 __U, __m256i __A, __m256i __B)\n+{\n+  return (__mmask16) __builtin_ia32_ucmpw256_mask ((__v16hi) __A,\n+\t\t\t\t\t\t    (__v16hi) __B, 0,\n+\t\t\t\t\t\t    __U);\n+}\n+\n extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_cmpeq_epi16_mask (__mmask16 __U, __m256i __A, __m256i __B)\n@@ -3115,6 +3186,15 @@ _mm256_mask_cmpeq_epi16_mask (__mmask16 __U, __m256i __A, __m256i __B)\n \t\t\t\t\t\t     __U);\n }\n \n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cmpgt_epu8_mask (__m128i __A, __m128i __B)\n+{\n+  return (__mmask16) __builtin_ia32_ucmpb128_mask ((__v16qi) __A,\n+\t\t\t\t\t\t    (__v16qi) __B, 6,\n+\t\t\t\t\t\t    (__mmask16) -1);\n+}\n+\n extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpgt_epi8_mask (__m128i __A, __m128i __B)\n@@ -3124,6 +3204,15 @@ _mm_cmpgt_epi8_mask (__m128i __A, __m128i __B)\n \t\t\t\t\t\t     (__mmask16) -1);\n }\n \n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmpgt_epu8_mask (__mmask16 __U, __m128i __A, __m128i __B)\n+{\n+  return (__mmask16) __builtin_ia32_ucmpb128_mask ((__v16qi) __A,\n+\t\t\t\t\t\t    (__v16qi) __B, 6,\n+\t\t\t\t\t\t    __U);\n+}\n+\n extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cmpgt_epi8_mask (__mmask16 __U, __m128i __A, __m128i __B)\n@@ -3133,6 +3222,15 @@ _mm_mask_cmpgt_epi8_mask (__mmask16 __U, __m128i __A, __m128i __B)\n \t\t\t\t\t\t     __U);\n }\n \n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cmpgt_epu8_mask (__m256i __A, __m256i __B)\n+{\n+  return (__mmask32) __builtin_ia32_ucmpb256_mask ((__v32qi) __A,\n+\t\t\t\t\t\t    (__v32qi) __B, 6,\n+\t\t\t\t\t\t    (__mmask32) -1);\n+}\n+\n extern __inline __mmask32\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmpgt_epi8_mask (__m256i __A, __m256i __B)\n@@ -3142,6 +3240,15 @@ _mm256_cmpgt_epi8_mask (__m256i __A, __m256i __B)\n \t\t\t\t\t\t     (__mmask32) -1);\n }\n \n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmpgt_epu8_mask (__mmask32 __U, __m256i __A, __m256i __B)\n+{\n+  return (__mmask32) __builtin_ia32_ucmpb256_mask ((__v32qi) __A,\n+\t\t\t\t\t\t    (__v32qi) __B, 6,\n+\t\t\t\t\t\t    __U);\n+}\n+\n extern __inline __mmask32\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_cmpgt_epi8_mask (__mmask32 __U, __m256i __A, __m256i __B)\n@@ -3151,6 +3258,15 @@ _mm256_mask_cmpgt_epi8_mask (__mmask32 __U, __m256i __A, __m256i __B)\n \t\t\t\t\t\t     __U);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cmpgt_epu16_mask (__m128i __A, __m128i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpw128_mask ((__v8hi) __A,\n+\t\t\t\t\t\t   (__v8hi) __B, 6,\n+\t\t\t\t\t\t   (__mmask8) -1);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpgt_epi16_mask (__m128i __A, __m128i __B)\n@@ -3160,6 +3276,14 @@ _mm_cmpgt_epi16_mask (__m128i __A, __m128i __B)\n \t\t\t\t\t\t    (__mmask8) -1);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmpgt_epu16_mask (__mmask8 __U, __m128i __A, __m128i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpw128_mask ((__v8hi) __A,\n+\t\t\t\t\t\t   (__v8hi) __B, 6, __U);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cmpgt_epi16_mask (__mmask8 __U, __m128i __A, __m128i __B)\n@@ -3168,6 +3292,15 @@ _mm_mask_cmpgt_epi16_mask (__mmask8 __U, __m128i __A, __m128i __B)\n \t\t\t\t\t\t    (__v8hi) __B, __U);\n }\n \n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cmpgt_epu16_mask (__m256i __A, __m256i __B)\n+{\n+  return (__mmask16) __builtin_ia32_ucmpw256_mask ((__v16hi) __A,\n+\t\t\t\t\t\t    (__v16hi) __B, 6,\n+\t\t\t\t\t\t    (__mmask16) -1);\n+}\n+\n extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmpgt_epi16_mask (__m256i __A, __m256i __B)\n@@ -3177,6 +3310,15 @@ _mm256_cmpgt_epi16_mask (__m256i __A, __m256i __B)\n \t\t\t\t\t\t     (__mmask16) -1);\n }\n \n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmpgt_epu16_mask (__mmask16 __U, __m256i __A, __m256i __B)\n+{\n+  return (__mmask16) __builtin_ia32_ucmpw256_mask ((__v16hi) __A,\n+\t\t\t\t\t\t    (__v16hi) __B, 6,\n+\t\t\t\t\t\t    __U);\n+}\n+\n extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_cmpgt_epi16_mask (__mmask16 __U, __m256i __A, __m256i __B)\n@@ -4216,6 +4358,294 @@ _mm_mask_packs_epi32 (__m128i __W, __mmask16 __M, __m128i __A,\n \t\t\t\t\t\t    (__v8hi) __W, __M);\n }\n \n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmpneq_epu8_mask (__mmask16 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask16) __builtin_ia32_ucmpb128_mask ((__v16qi) __X,\n+\t\t\t\t\t\t   (__v16qi) __Y, 4,\n+\t\t\t\t\t\t   (__mmask16) __M);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmplt_epu8_mask (__mmask16 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask16) __builtin_ia32_ucmpb128_mask ((__v16qi) __X,\n+\t\t\t\t\t\t   (__v16qi) __Y, 1,\n+\t\t\t\t\t\t   (__mmask16) __M);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmpge_epu8_mask (__mmask16 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask16) __builtin_ia32_ucmpb128_mask ((__v16qi) __X,\n+\t\t\t\t\t\t   (__v16qi) __Y, 5,\n+\t\t\t\t\t\t   (__mmask16) __M);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmple_epu8_mask (__mmask16 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask16) __builtin_ia32_ucmpb128_mask ((__v16qi) __X,\n+\t\t\t\t\t\t   (__v16qi) __Y, 2,\n+\t\t\t\t\t\t   (__mmask16) __M);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmpneq_epu16_mask (__mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpw128_mask ((__v8hi) __X,\n+\t\t\t\t\t\t  (__v8hi) __Y, 4,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmplt_epu16_mask (__mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpw128_mask ((__v8hi) __X,\n+\t\t\t\t\t\t  (__v8hi) __Y, 1,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmpge_epu16_mask (__mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpw128_mask ((__v8hi) __X,\n+\t\t\t\t\t\t  (__v8hi) __Y, 5,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmple_epu16_mask (__mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpw128_mask ((__v8hi) __X,\n+\t\t\t\t\t\t  (__v8hi) __Y, 2,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmpneq_epi8_mask (__mmask16 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask16) __builtin_ia32_cmpb128_mask ((__v16qi) __X,\n+\t\t\t\t\t\t  (__v16qi) __Y, 4,\n+\t\t\t\t\t\t  (__mmask16) __M);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmplt_epi8_mask (__mmask16 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask16) __builtin_ia32_cmpb128_mask ((__v16qi) __X,\n+\t\t\t\t\t\t  (__v16qi) __Y, 1,\n+\t\t\t\t\t\t  (__mmask16) __M);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmpge_epi8_mask (__mmask16 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask16) __builtin_ia32_cmpb128_mask ((__v16qi) __X,\n+\t\t\t\t\t\t  (__v16qi) __Y, 5,\n+\t\t\t\t\t\t  (__mmask16) __M);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmple_epi8_mask (__mmask16 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask16) __builtin_ia32_cmpb128_mask ((__v16qi) __X,\n+\t\t\t\t\t\t  (__v16qi) __Y, 2,\n+\t\t\t\t\t\t  (__mmask16) __M);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmpneq_epi16_mask (__mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpw128_mask ((__v8hi) __X,\n+\t\t\t\t\t\t (__v8hi) __Y, 4,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmplt_epi16_mask (__mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpw128_mask ((__v8hi) __X,\n+\t\t\t\t\t\t (__v8hi) __Y, 1,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmpge_epi16_mask (__mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpw128_mask ((__v8hi) __X,\n+\t\t\t\t\t\t (__v8hi) __Y, 5,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmple_epi16_mask (__mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpw128_mask ((__v8hi) __X,\n+\t\t\t\t\t\t (__v8hi) __Y, 2,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmpneq_epu8_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpb256_mask ((__v32qi) __X,\n+\t\t\t\t\t\t  (__v32qi) __Y, 4,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmplt_epu8_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpb256_mask ((__v32qi) __X,\n+\t\t\t\t\t\t  (__v32qi) __Y, 1,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmpge_epu8_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpb256_mask ((__v32qi) __X,\n+\t\t\t\t\t\t  (__v32qi) __Y, 5,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmple_epu8_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpb256_mask ((__v32qi) __X,\n+\t\t\t\t\t\t  (__v32qi) __Y, 2,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmpneq_epu16_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpw256_mask ((__v16hi) __X,\n+\t\t\t\t\t\t  (__v16hi) __Y, 4,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmplt_epu16_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpw256_mask ((__v16hi) __X,\n+\t\t\t\t\t\t  (__v16hi) __Y, 1,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmpge_epu16_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpw256_mask ((__v16hi) __X,\n+\t\t\t\t\t\t  (__v16hi) __Y, 5,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmple_epu16_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpw256_mask ((__v16hi) __X,\n+\t\t\t\t\t\t  (__v16hi) __Y, 2,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmpneq_epi8_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpb256_mask ((__v32qi) __X,\n+\t\t\t\t\t\t (__v32qi) __Y, 4,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmplt_epi8_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpb256_mask ((__v32qi) __X,\n+\t\t\t\t\t\t (__v32qi) __Y, 1,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmpge_epi8_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpb256_mask ((__v32qi) __X,\n+\t\t\t\t\t\t (__v32qi) __Y, 5,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmple_epi8_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpb256_mask ((__v32qi) __X,\n+\t\t\t\t\t\t (__v32qi) __Y, 2,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmpneq_epi16_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpw256_mask ((__v16hi) __X,\n+\t\t\t\t\t\t (__v16hi) __Y, 4,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmplt_epi16_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpw256_mask ((__v16hi) __X,\n+\t\t\t\t\t\t (__v16hi) __Y, 1,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmpge_epi16_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpw256_mask ((__v16hi) __X,\n+\t\t\t\t\t\t (__v16hi) __Y, 5,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmple_epi16_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpw256_mask ((__v16hi) __X,\n+\t\t\t\t\t\t (__v16hi) __Y, 2,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n #ifdef __DISABLE_AVX512VLBW__\n #undef __DISABLE_AVX512VLBW__\n #pragma GCC pop_options"}, {"sha": "f39f7f386af8efc8fa449a19f583bb9336386723", "filename": "gcc/config/i386/avx512vlintrin.h", "status": "modified", "additions": 424, "deletions": 0, "changes": 424, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -5358,6 +5358,15 @@ _mm256_maskz_unpacklo_epi64 (__mmask8 __U, __m256i __A, __m256i __B)\n \t\t\t\t\t\t      (__mmask8) __U);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cmpeq_epu32_mask (__m128i __A, __m128i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpd128_mask ((__v4si) __A,\n+\t\t\t\t\t\t   (__v4si) __B, 0,\n+\t\t\t\t\t\t   (__mmask8) -1);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpeq_epi32_mask (__m128i __A, __m128i __B)\n@@ -5367,6 +5376,14 @@ _mm_cmpeq_epi32_mask (__m128i __A, __m128i __B)\n \t\t\t\t\t\t    (__mmask8) -1);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmpeq_epu32_mask (__mmask8 __U, __m128i __A, __m128i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpd128_mask ((__v4si) __A,\n+\t\t\t\t\t\t   (__v4si) __B, 0, __U);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cmpeq_epi32_mask (__mmask8 __U, __m128i __A, __m128i __B)\n@@ -5375,6 +5392,15 @@ _mm_mask_cmpeq_epi32_mask (__mmask8 __U, __m128i __A, __m128i __B)\n \t\t\t\t\t\t    (__v4si) __B, __U);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cmpeq_epu32_mask (__m256i __A, __m256i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpd256_mask ((__v8si) __A,\n+\t\t\t\t\t\t   (__v8si) __B, 0,\n+\t\t\t\t\t\t   (__mmask8) -1);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmpeq_epi32_mask (__m256i __A, __m256i __B)\n@@ -5384,6 +5410,14 @@ _mm256_cmpeq_epi32_mask (__m256i __A, __m256i __B)\n \t\t\t\t\t\t    (__mmask8) -1);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmpeq_epu32_mask (__mmask8 __U, __m256i __A, __m256i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpd256_mask ((__v8si) __A,\n+\t\t\t\t\t\t   (__v8si) __B, 0, __U);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_cmpeq_epi32_mask (__mmask8 __U, __m256i __A, __m256i __B)\n@@ -5392,6 +5426,15 @@ _mm256_mask_cmpeq_epi32_mask (__mmask8 __U, __m256i __A, __m256i __B)\n \t\t\t\t\t\t    (__v8si) __B, __U);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cmpeq_epu64_mask (__m128i __A, __m128i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq128_mask ((__v2di) __A,\n+\t\t\t\t\t\t   (__v2di) __B, 0,\n+\t\t\t\t\t\t   (__mmask8) -1);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpeq_epi64_mask (__m128i __A, __m128i __B)\n@@ -5401,6 +5444,14 @@ _mm_cmpeq_epi64_mask (__m128i __A, __m128i __B)\n \t\t\t\t\t\t    (__mmask8) -1);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmpeq_epu64_mask (__mmask8 __U, __m128i __A, __m128i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq128_mask ((__v2di) __A,\n+\t\t\t\t\t\t   (__v2di) __B, 0, __U);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cmpeq_epi64_mask (__mmask8 __U, __m128i __A, __m128i __B)\n@@ -5409,6 +5460,15 @@ _mm_mask_cmpeq_epi64_mask (__mmask8 __U, __m128i __A, __m128i __B)\n \t\t\t\t\t\t    (__v2di) __B, __U);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cmpeq_epu64_mask (__m256i __A, __m256i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq256_mask ((__v4di) __A,\n+\t\t\t\t\t\t   (__v4di) __B, 0,\n+\t\t\t\t\t\t   (__mmask8) -1);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmpeq_epi64_mask (__m256i __A, __m256i __B)\n@@ -5418,6 +5478,14 @@ _mm256_cmpeq_epi64_mask (__m256i __A, __m256i __B)\n \t\t\t\t\t\t    (__mmask8) -1);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmpeq_epu64_mask (__mmask8 __U, __m256i __A, __m256i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq256_mask ((__v4di) __A,\n+\t\t\t\t\t\t   (__v4di) __B, 0, __U);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_cmpeq_epi64_mask (__mmask8 __U, __m256i __A, __m256i __B)\n@@ -5426,6 +5494,15 @@ _mm256_mask_cmpeq_epi64_mask (__mmask8 __U, __m256i __A, __m256i __B)\n \t\t\t\t\t\t    (__v4di) __B, __U);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cmpgt_epu32_mask (__m128i __A, __m128i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpd128_mask ((__v4si) __A,\n+\t\t\t\t\t\t   (__v4si) __B, 6,\n+\t\t\t\t\t\t   (__mmask8) -1);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpgt_epi32_mask (__m128i __A, __m128i __B)\n@@ -5435,6 +5512,14 @@ _mm_cmpgt_epi32_mask (__m128i __A, __m128i __B)\n \t\t\t\t\t\t    (__mmask8) -1);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmpgt_epu32_mask (__mmask8 __U, __m128i __A, __m128i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpd128_mask ((__v4si) __A,\n+\t\t\t\t\t\t   (__v4si) __B, 6, __U);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cmpgt_epi32_mask (__mmask8 __U, __m128i __A, __m128i __B)\n@@ -5443,6 +5528,15 @@ _mm_mask_cmpgt_epi32_mask (__mmask8 __U, __m128i __A, __m128i __B)\n \t\t\t\t\t\t    (__v4si) __B, __U);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cmpgt_epu32_mask (__m256i __A, __m256i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpd256_mask ((__v8si) __A,\n+\t\t\t\t\t\t   (__v8si) __B, 6,\n+\t\t\t\t\t\t   (__mmask8) -1);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmpgt_epi32_mask (__m256i __A, __m256i __B)\n@@ -5452,6 +5546,14 @@ _mm256_cmpgt_epi32_mask (__m256i __A, __m256i __B)\n \t\t\t\t\t\t    (__mmask8) -1);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmpgt_epu32_mask (__mmask8 __U, __m256i __A, __m256i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpd256_mask ((__v8si) __A,\n+\t\t\t\t\t\t   (__v8si) __B, 6, __U);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_cmpgt_epi32_mask (__mmask8 __U, __m256i __A, __m256i __B)\n@@ -5460,6 +5562,15 @@ _mm256_mask_cmpgt_epi32_mask (__mmask8 __U, __m256i __A, __m256i __B)\n \t\t\t\t\t\t    (__v8si) __B, __U);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cmpgt_epu64_mask (__m128i __A, __m128i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq128_mask ((__v2di) __A,\n+\t\t\t\t\t\t   (__v2di) __B, 6,\n+\t\t\t\t\t\t   (__mmask8) -1);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpgt_epi64_mask (__m128i __A, __m128i __B)\n@@ -5469,6 +5580,14 @@ _mm_cmpgt_epi64_mask (__m128i __A, __m128i __B)\n \t\t\t\t\t\t    (__mmask8) -1);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmpgt_epu64_mask (__mmask8 __U, __m128i __A, __m128i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq128_mask ((__v2di) __A,\n+\t\t\t\t\t\t   (__v2di) __B, 6, __U);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cmpgt_epi64_mask (__mmask8 __U, __m128i __A, __m128i __B)\n@@ -5477,6 +5596,15 @@ _mm_mask_cmpgt_epi64_mask (__mmask8 __U, __m128i __A, __m128i __B)\n \t\t\t\t\t\t    (__v2di) __B, __U);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cmpgt_epu64_mask (__m256i __A, __m256i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq256_mask ((__v4di) __A,\n+\t\t\t\t\t\t   (__v4di) __B, 6,\n+\t\t\t\t\t\t   (__mmask8) -1);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmpgt_epi64_mask (__m256i __A, __m256i __B)\n@@ -5486,6 +5614,14 @@ _mm256_cmpgt_epi64_mask (__m256i __A, __m256i __B)\n \t\t\t\t\t\t    (__mmask8) -1);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmpgt_epu64_mask (__mmask8 __U, __m256i __A, __m256i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq256_mask ((__v4di) __A,\n+\t\t\t\t\t\t   (__v4di) __B, 6, __U);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_cmpgt_epi64_mask (__mmask8 __U, __m256i __A, __m256i __B)\n@@ -11671,6 +11807,15 @@ _mm256_permutex_pd (__m256d __X, const int __M)\n \t\t\t\t\t\t  (__mmask8) -1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmpneq_epu32_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpd256_mask ((__v8si) __X,\n+\t\t\t\t\t\t  (__v8si) __Y, 4,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmpneq_epu32_mask (__m256i __X, __m256i __Y)\n@@ -11680,6 +11825,15 @@ _mm256_cmpneq_epu32_mask (__m256i __X, __m256i __Y)\n \t\t\t\t\t\t  (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmplt_epu32_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpd256_mask ((__v8si) __X,\n+\t\t\t\t\t\t  (__v8si) __Y, 1,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmplt_epu32_mask (__m256i __X, __m256i __Y)\n@@ -11689,6 +11843,15 @@ _mm256_cmplt_epu32_mask (__m256i __X, __m256i __Y)\n \t\t\t\t\t\t  (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmpge_epu32_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpd256_mask ((__v8si) __X,\n+\t\t\t\t\t\t  (__v8si) __Y, 5,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmpge_epu32_mask (__m256i __X, __m256i __Y)\n@@ -11698,6 +11861,15 @@ _mm256_cmpge_epu32_mask (__m256i __X, __m256i __Y)\n \t\t\t\t\t\t  (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmple_epu32_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpd256_mask ((__v8si) __X,\n+\t\t\t\t\t\t  (__v8si) __Y, 2,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmple_epu32_mask (__m256i __X, __m256i __Y)\n@@ -11707,6 +11879,15 @@ _mm256_cmple_epu32_mask (__m256i __X, __m256i __Y)\n \t\t\t\t\t\t  (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmpneq_epu64_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq256_mask ((__v4di) __X,\n+\t\t\t\t\t\t  (__v4di) __Y, 4,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmpneq_epu64_mask (__m256i __X, __m256i __Y)\n@@ -11716,6 +11897,15 @@ _mm256_cmpneq_epu64_mask (__m256i __X, __m256i __Y)\n \t\t\t\t\t\t  (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmplt_epu64_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq256_mask ((__v4di) __X,\n+\t\t\t\t\t\t  (__v4di) __Y, 1,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmplt_epu64_mask (__m256i __X, __m256i __Y)\n@@ -11725,6 +11915,15 @@ _mm256_cmplt_epu64_mask (__m256i __X, __m256i __Y)\n \t\t\t\t\t\t  (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmpge_epu64_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq256_mask ((__v4di) __X,\n+\t\t\t\t\t\t  (__v4di) __Y, 5,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmpge_epu64_mask (__m256i __X, __m256i __Y)\n@@ -11734,6 +11933,15 @@ _mm256_cmpge_epu64_mask (__m256i __X, __m256i __Y)\n \t\t\t\t\t\t  (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmple_epu64_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq256_mask ((__v4di) __X,\n+\t\t\t\t\t\t  (__v4di) __Y, 2,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmple_epu64_mask (__m256i __X, __m256i __Y)\n@@ -11743,6 +11951,15 @@ _mm256_cmple_epu64_mask (__m256i __X, __m256i __Y)\n \t\t\t\t\t\t  (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmpneq_epi32_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpd256_mask ((__v8si) __X,\n+\t\t\t\t\t\t (__v8si) __Y, 4,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmpneq_epi32_mask (__m256i __X, __m256i __Y)\n@@ -11752,6 +11969,15 @@ _mm256_cmpneq_epi32_mask (__m256i __X, __m256i __Y)\n \t\t\t\t\t\t (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmplt_epi32_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpd256_mask ((__v8si) __X,\n+\t\t\t\t\t\t (__v8si) __Y, 1,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmplt_epi32_mask (__m256i __X, __m256i __Y)\n@@ -11761,6 +11987,15 @@ _mm256_cmplt_epi32_mask (__m256i __X, __m256i __Y)\n \t\t\t\t\t\t (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmpge_epi32_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpd256_mask ((__v8si) __X,\n+\t\t\t\t\t\t (__v8si) __Y, 5,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmpge_epi32_mask (__m256i __X, __m256i __Y)\n@@ -11770,6 +12005,15 @@ _mm256_cmpge_epi32_mask (__m256i __X, __m256i __Y)\n \t\t\t\t\t\t (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmple_epi32_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpd256_mask ((__v8si) __X,\n+\t\t\t\t\t\t (__v8si) __Y, 2,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmple_epi32_mask (__m256i __X, __m256i __Y)\n@@ -11779,6 +12023,15 @@ _mm256_cmple_epi32_mask (__m256i __X, __m256i __Y)\n \t\t\t\t\t\t (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmpneq_epi64_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpq256_mask ((__v4di) __X,\n+\t\t\t\t\t\t (__v4di) __Y, 4,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmpneq_epi64_mask (__m256i __X, __m256i __Y)\n@@ -11788,6 +12041,15 @@ _mm256_cmpneq_epi64_mask (__m256i __X, __m256i __Y)\n \t\t\t\t\t\t (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmplt_epi64_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpq256_mask ((__v4di) __X,\n+\t\t\t\t\t\t (__v4di) __Y, 1,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmplt_epi64_mask (__m256i __X, __m256i __Y)\n@@ -11797,6 +12059,15 @@ _mm256_cmplt_epi64_mask (__m256i __X, __m256i __Y)\n \t\t\t\t\t\t (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmpge_epi64_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpq256_mask ((__v4di) __X,\n+\t\t\t\t\t\t (__v4di) __Y, 5,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmpge_epi64_mask (__m256i __X, __m256i __Y)\n@@ -11806,6 +12077,15 @@ _mm256_cmpge_epi64_mask (__m256i __X, __m256i __Y)\n \t\t\t\t\t\t (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cmple_epi64_mask (__mmask8 __M, __m256i __X, __m256i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpq256_mask ((__v4di) __X,\n+\t\t\t\t\t\t (__v4di) __Y, 2,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cmple_epi64_mask (__m256i __X, __m256i __Y)\n@@ -11815,6 +12095,15 @@ _mm256_cmple_epi64_mask (__m256i __X, __m256i __Y)\n \t\t\t\t\t\t (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmpneq_epu32_mask (__mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpd128_mask ((__v4si) __X,\n+\t\t\t\t\t\t  (__v4si) __Y, 4,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpneq_epu32_mask (__m128i __X, __m128i __Y)\n@@ -11824,6 +12113,15 @@ _mm_cmpneq_epu32_mask (__m128i __X, __m128i __Y)\n \t\t\t\t\t\t  (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmplt_epu32_mask (__mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpd128_mask ((__v4si) __X,\n+\t\t\t\t\t\t  (__v4si) __Y, 1,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmplt_epu32_mask (__m128i __X, __m128i __Y)\n@@ -11833,6 +12131,15 @@ _mm_cmplt_epu32_mask (__m128i __X, __m128i __Y)\n \t\t\t\t\t\t  (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmpge_epu32_mask (__mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpd128_mask ((__v4si) __X,\n+\t\t\t\t\t\t  (__v4si) __Y, 5,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpge_epu32_mask (__m128i __X, __m128i __Y)\n@@ -11842,6 +12149,15 @@ _mm_cmpge_epu32_mask (__m128i __X, __m128i __Y)\n \t\t\t\t\t\t  (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmple_epu32_mask (__mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpd128_mask ((__v4si) __X,\n+\t\t\t\t\t\t  (__v4si) __Y, 2,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmple_epu32_mask (__m128i __X, __m128i __Y)\n@@ -11851,6 +12167,15 @@ _mm_cmple_epu32_mask (__m128i __X, __m128i __Y)\n \t\t\t\t\t\t  (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmpneq_epu64_mask (__mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq128_mask ((__v2di) __X,\n+\t\t\t\t\t\t  (__v2di) __Y, 4,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpneq_epu64_mask (__m128i __X, __m128i __Y)\n@@ -11860,6 +12185,15 @@ _mm_cmpneq_epu64_mask (__m128i __X, __m128i __Y)\n \t\t\t\t\t\t  (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmplt_epu64_mask (__mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq128_mask ((__v2di) __X,\n+\t\t\t\t\t\t  (__v2di) __Y, 1,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmplt_epu64_mask (__m128i __X, __m128i __Y)\n@@ -11869,6 +12203,15 @@ _mm_cmplt_epu64_mask (__m128i __X, __m128i __Y)\n \t\t\t\t\t\t  (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmpge_epu64_mask (__mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq128_mask ((__v2di) __X,\n+\t\t\t\t\t\t  (__v2di) __Y, 5,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpge_epu64_mask (__m128i __X, __m128i __Y)\n@@ -11878,6 +12221,15 @@ _mm_cmpge_epu64_mask (__m128i __X, __m128i __Y)\n \t\t\t\t\t\t  (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmple_epu64_mask (__mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq128_mask ((__v2di) __X,\n+\t\t\t\t\t\t  (__v2di) __Y, 2,\n+\t\t\t\t\t\t  (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmple_epu64_mask (__m128i __X, __m128i __Y)\n@@ -11887,6 +12239,15 @@ _mm_cmple_epu64_mask (__m128i __X, __m128i __Y)\n \t\t\t\t\t\t  (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmpneq_epi32_mask (__mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpd128_mask ((__v4si) __X,\n+\t\t\t\t\t\t (__v4si) __Y, 4,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpneq_epi32_mask (__m128i __X, __m128i __Y)\n@@ -11896,6 +12257,15 @@ _mm_cmpneq_epi32_mask (__m128i __X, __m128i __Y)\n \t\t\t\t\t\t (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmplt_epi32_mask (__mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpd128_mask ((__v4si) __X,\n+\t\t\t\t\t\t (__v4si) __Y, 1,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmplt_epi32_mask (__m128i __X, __m128i __Y)\n@@ -11905,6 +12275,15 @@ _mm_cmplt_epi32_mask (__m128i __X, __m128i __Y)\n \t\t\t\t\t\t (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmpge_epi32_mask (__mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpd128_mask ((__v4si) __X,\n+\t\t\t\t\t\t (__v4si) __Y, 5,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpge_epi32_mask (__m128i __X, __m128i __Y)\n@@ -11914,6 +12293,15 @@ _mm_cmpge_epi32_mask (__m128i __X, __m128i __Y)\n \t\t\t\t\t\t (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmple_epi32_mask (__mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpd128_mask ((__v4si) __X,\n+\t\t\t\t\t\t (__v4si) __Y, 2,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmple_epi32_mask (__m128i __X, __m128i __Y)\n@@ -11923,6 +12311,15 @@ _mm_cmple_epi32_mask (__m128i __X, __m128i __Y)\n \t\t\t\t\t\t (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmpneq_epi64_mask (__mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpq128_mask ((__v2di) __X,\n+\t\t\t\t\t\t (__v2di) __Y, 4,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpneq_epi64_mask (__m128i __X, __m128i __Y)\n@@ -11932,6 +12329,15 @@ _mm_cmpneq_epi64_mask (__m128i __X, __m128i __Y)\n \t\t\t\t\t\t (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmplt_epi64_mask (__mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpq128_mask ((__v2di) __X,\n+\t\t\t\t\t\t (__v2di) __Y, 1,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmplt_epi64_mask (__m128i __X, __m128i __Y)\n@@ -11941,6 +12347,15 @@ _mm_cmplt_epi64_mask (__m128i __X, __m128i __Y)\n \t\t\t\t\t\t (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmpge_epi64_mask (__mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpq128_mask ((__v2di) __X,\n+\t\t\t\t\t\t (__v2di) __Y, 5,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpge_epi64_mask (__m128i __X, __m128i __Y)\n@@ -11950,6 +12365,15 @@ _mm_cmpge_epi64_mask (__m128i __X, __m128i __Y)\n \t\t\t\t\t\t (__mmask8) - 1);\n }\n \n+extern __inline __mmask8\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmple_epi64_mask (__mmask8 __M, __m128i __X, __m128i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpq128_mask ((__v2di) __X,\n+\t\t\t\t\t\t (__v2di) __Y, 2,\n+\t\t\t\t\t\t (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n   __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmple_epi64_mask (__m128i __X, __m128i __Y)"}, {"sha": "1a4f1865aec6d6bfcbb8b8fb0dd52fc3533d7c2b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -1,3 +1,81 @@\n+2014-10-20  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* gcc.target/i386/avx512bw-vpcmpequb-1.c: New.\n+\t* gcc.target/i386/avx512bw-vpcmpequb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpequw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpequw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpgeb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpgeb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpgeub-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpgeub-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpgeuw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpgeuw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpgew-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpgew-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpgtub-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpgtub-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpgtuw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpgtuw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpleb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpleb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpleub-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpleub-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpleuw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpleuw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmplew-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmplew-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpltb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpltb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpltub-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpltub-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpltuw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpltuw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpltw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpltw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpneqb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpneqb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpnequb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpnequb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpnequw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpnequw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpneqw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpneqw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpequb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpequd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpequd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpequq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpequq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpequw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpged-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpgeq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpgeud-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpgeuq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpgtub-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpgtud-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpgtud-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpgtuq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpgtuq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpgtuw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpled-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpleq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpleud-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpleuq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpltd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpltq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpltud-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpltuq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpneqd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpneqq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpnequd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpnequq-1.c: Ditto.\n+\n 2014-10-29  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "6ec32e6b2cf92da666d5dc09577cb176c4775a68", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpequb-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpequb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpequb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpequb-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+volatile __mmask64 m64;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m16 = _mm_cmpeq_epu8_mask (x128, x128);\n+  m32 = _mm256_cmpeq_epu8_mask (x256, x256);\n+  m64 = _mm512_cmpeq_epu8_mask (x512, x512);\n+  m16 = _mm_mask_cmpeq_epu8_mask (3, x128, x128);\n+  m32 = _mm256_mask_cmpeq_epu8_mask (3, x256, x256);\n+  m64 = _mm512_mask_cmpeq_epu8_mask (3, x512, x512);\n+}"}, {"sha": "06f1c99986d9f001d93f9382730996f9c1ab9f23", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpequb-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpequb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpequb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpequb-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, unsigned char *s1, unsigned char *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] == s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_b) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  res1 = 0;\n+  res2 = 0;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpeq_epu8_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpeq_epu8_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "2cd140ec3b2b66a0795961f07b178a80e11386ca", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpequw-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpequw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpequw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpequw-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m8;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m8 = _mm_cmpeq_epu16_mask (x128, x128);\n+  m8 = _mm_mask_cmpeq_epu16_mask (3, x128, x128);\n+  m16 = _mm256_cmpeq_epu16_mask (x256, x256);\n+  m16 = _mm256_mask_cmpeq_epu16_mask (3, x256, x256);\n+  m32 = _mm512_mask_cmpeq_epu16_mask (3, x512, x512);\n+  m32 = _mm512_cmpeq_epu16_mask (x512, x512);\n+}"}, {"sha": "3fc0e7dc1506b6e7a687765458485b347a0a5861", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpequw-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpequw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpequw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpequw-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, unsigned short *s1, unsigned short *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] == s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_w) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpeq_epu16_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpeq_epu16_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "b5345e04b2e5b3573fceae3cae3d0a90073f57b8", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpgeb-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgeb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgeb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgeb-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+volatile __mmask64 m64;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m16 = _mm_cmpge_epi8_mask (x128, x128);\n+  m32 = _mm256_cmpge_epi8_mask (x256, x256);\n+  m64 = _mm512_cmpge_epi8_mask (x512, x512);\n+  m16 = _mm_mask_cmpge_epi8_mask (3, x128, x128);\n+  m32 = _mm256_mask_cmpge_epi8_mask (3, x256, x256);\n+  m64 = _mm512_mask_cmpge_epi8_mask (3, x512, x512);\n+}"}, {"sha": "fe28ffb5d3ac9008d7e17526b87c874fa441f305", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpgeb-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgeb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgeb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgeb-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, char *s1, char *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] >= s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_b) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpge_epi8_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpge_epi8_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "93155d7c80cd13e5359d9d529bde76649ee9f58e", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpgeub-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgeub-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgeub-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgeub-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+volatile __mmask64 m64;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m16 = _mm_cmpge_epu8_mask (x128, x128);\n+  m32 = _mm256_cmpge_epu8_mask (x256, x256);\n+  m64 = _mm512_cmpge_epu8_mask (x512, x512);\n+  m16 = _mm_mask_cmpge_epu8_mask (3, x128, x128);\n+  m32 = _mm256_mask_cmpge_epu8_mask (3, x256, x256);\n+  m64 = _mm512_mask_cmpge_epu8_mask (3, x512, x512);\n+}"}, {"sha": "29a88c91b5e6bf19a02ce68b0ceca026a254a8d5", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpgeub-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgeub-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgeub-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgeub-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, unsigned char *s1, unsigned char *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] >= s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_b) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpge_epu8_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpge_epu8_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "b2b1b8c4998dc41f457cccafadc4714e3e7fe661", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpgeuw-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgeuw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgeuw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgeuw-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m8;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m8 = _mm_cmpge_epu16_mask (x128, x128);\n+  m16 = _mm256_cmpge_epu16_mask (x256, x256);\n+  m32 = _mm512_cmpge_epu16_mask (x512, x512);\n+  m8 = _mm_mask_cmpge_epu16_mask (3, x128, x128);\n+  m16 = _mm256_mask_cmpge_epu16_mask (3, x256, x256);\n+  m32 = _mm512_mask_cmpge_epu16_mask (3, x512, x512);\n+}"}, {"sha": "b0105aad2971850caf303d5d4263439b4f53d777", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpgeuw-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgeuw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgeuw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgeuw-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, unsigned short *s1, unsigned short *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] >= s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_w) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpge_epu16_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpge_epu16_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "1b9b3a3beccf0b1d2fc881247402f202944515a5", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpgew-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgew-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgew-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgew-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m8;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m8 = _mm_cmpge_epi16_mask (x128, x128);\n+  m16 = _mm256_cmpge_epi16_mask (x256, x256);\n+  m32 = _mm512_cmpge_epi16_mask (x512, x512);\n+  m8 = _mm_mask_cmpge_epi16_mask (3, x128, x128);\n+  m16 = _mm256_mask_cmpge_epi16_mask (3, x256, x256);\n+  m32 = _mm512_mask_cmpge_epi16_mask (3, x512, x512);\n+}"}, {"sha": "6b94030b9f55e10b6819450f4ae18a906ded71fd", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpgew-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgew-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgew-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgew-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, short *s1, short *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] >= s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_w) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpge_epi16_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpge_epi16_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "c2a78c4a34ee60b79450775a6fcb11cb4d960a73", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpgtub-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtub-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtub-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtub-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+volatile __mmask64 m64;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m16 = _mm_cmpgt_epu8_mask (x128, x128);\n+  m32 = _mm256_cmpgt_epu8_mask (x256, x256);\n+  m64 = _mm512_cmpgt_epu8_mask (x512, x512);\n+  m16 = _mm_mask_cmpgt_epu8_mask (3, x128, x128);\n+  m32 = _mm256_mask_cmpgt_epu8_mask (3, x256, x256);\n+  m64 = _mm512_mask_cmpgt_epu8_mask (3, x512, x512);\n+}"}, {"sha": "a0f1508ef7999e91b8b243f1b27bb75437bbcb89", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpgtub-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtub-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtub-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtub-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, unsigned char *s1, unsigned char *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] > s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_b) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpgt_epu8_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpgt_epu8_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "7b86082dc6b15089a16f1f3106abf3c184381727", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpgtuw-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtuw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtuw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtuw-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m8;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m8 = _mm_cmpgt_epu16_mask (x128, x128);\n+  m16 = _mm256_cmpgt_epu16_mask (x256, x256);\n+  m32 = _mm512_cmpgt_epu16_mask (x512, x512);\n+  m8 = _mm_mask_cmpgt_epu16_mask (3, x128, x128);\n+  m16 = _mm256_mask_cmpgt_epu16_mask (3, x256, x256);\n+  m32 = _mm512_mask_cmpgt_epu16_mask (3, x512, x512);\n+}"}, {"sha": "e11be516074c87b73677eb221b7dafdf0caa485b", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpgtuw-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtuw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtuw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtuw-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, unsigned short *s1, unsigned short *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] > s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_w) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpgt_epu16_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpgt_epu16_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "bb8fb3413f5bb463c6eaee573d34d3aa2553cb2f", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpleb-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpleb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpleb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpleb-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+volatile __mmask64 m64;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m16 = _mm_cmple_epi8_mask (x128, x128);\n+  m32 = _mm256_cmple_epi8_mask (x256, x256);\n+  m64 = _mm512_cmple_epi8_mask (x512, x512);\n+  m16 = _mm_mask_cmple_epi8_mask (3, x128, x128);\n+  m32 = _mm256_mask_cmple_epi8_mask (3, x256, x256);\n+  m64 = _mm512_mask_cmple_epi8_mask (3, x512, x512);\n+}"}, {"sha": "45caba4478ecbe9eadd8723b22d6547a71e16897", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpleb-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpleb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpleb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpleb-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, char *s1, char *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] <= s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_b) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmple_epi8_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmple_epi8_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "15eb02adff3f2a293303b4ef471847aec147df72", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpleub-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpleub-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpleub-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpleub-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+volatile __mmask64 m64;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m16 = _mm_cmple_epu8_mask (x128, x128);\n+  m32 = _mm256_cmple_epu8_mask (x256, x256);\n+  m64 = _mm512_cmple_epu8_mask (x512, x512);\n+  m16 = _mm_mask_cmple_epu8_mask (3, x128, x128);\n+  m32 = _mm256_mask_cmple_epu8_mask (3, x256, x256);\n+  m64 = _mm512_mask_cmple_epu8_mask (3, x512, x512);\n+}"}, {"sha": "1145dd53dd041ccc8a237ba8ed71c992ac41be95", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpleub-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpleub-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpleub-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpleub-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, unsigned  char *s1, unsigned char *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] <= s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_b) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmple_epu8_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmple_epu8_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "e26cd6fcb4cff6a41ea7fa118791e35cb9907c25", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpleuw-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpleuw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpleuw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpleuw-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m8;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m8 = _mm_cmple_epu16_mask (x128, x128);\n+  m16 = _mm256_cmple_epu16_mask (x256, x256);\n+  m32 = _mm512_cmple_epu16_mask (x512, x512);\n+  m8 = _mm_mask_cmple_epu16_mask (3, x128, x128);\n+  m16 = _mm256_mask_cmple_epu16_mask (3, x256, x256);\n+  m32 = _mm512_mask_cmple_epu16_mask (3, x512, x512);\n+}"}, {"sha": "64028367ff65b4847a3a6ba387f4e51190a9d4af", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpleuw-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpleuw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpleuw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpleuw-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, unsigned short *s1, unsigned short *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] <= s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_w) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmple_epu16_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmple_epu16_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "5e3b1231f4f9007f6cb7ad47869b1fdb9c4dd301", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmplew-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmplew-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmplew-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmplew-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m8;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m8 = _mm_cmple_epi16_mask (x128, x128);\n+  m16 = _mm256_cmple_epi16_mask (x256, x256);\n+  m32 = _mm512_cmple_epi16_mask (x512, x512);\n+  m8 = _mm_mask_cmple_epi16_mask (3, x128, x128);\n+  m16 = _mm256_mask_cmple_epi16_mask (3, x256, x256);\n+  m32 = _mm512_mask_cmple_epi16_mask (3, x512, x512);\n+}"}, {"sha": "5ee845a40530dfdc96731155791ce6bebf9290f2", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmplew-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmplew-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmplew-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmplew-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, short *s1, short *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] <= s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_w) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmple_epi16_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmple_epi16_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "9760cf625f91b92fb890807d3c8bf0c02a9412a1", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpltb-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpltb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpltb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpltb-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+volatile __mmask64 m64;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m16 = _mm_cmplt_epi8_mask (x128, x128);\n+  m32 = _mm256_cmplt_epi8_mask (x256, x256);\n+  m64 = _mm512_cmplt_epi8_mask (x512, x512);\n+  m16 = _mm_mask_cmplt_epi8_mask (3, x128, x128);\n+  m32 = _mm256_mask_cmplt_epi8_mask (3, x256, x256);\n+  m64 = _mm512_mask_cmplt_epi8_mask (3, x512, x512);\n+}"}, {"sha": "a53dd2d54f336bc90559acaf9f2bb65d716c3214", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpltb-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpltb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpltb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpltb-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, char *s1, char *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] < s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_b) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmplt_epi8_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmplt_epi8_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "9da0db18628cb32d60cd90130582bf4646924321", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpltub-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpltub-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpltub-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpltub-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+volatile __mmask64 m64;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m16 = _mm_cmplt_epu8_mask (x128, x128);\n+  m32 = _mm256_cmplt_epu8_mask (x256, x256);\n+  m64 = _mm512_cmplt_epu8_mask (x512, x512);\n+  m16 = _mm_mask_cmplt_epu8_mask (3, x128, x128);\n+  m32 = _mm256_mask_cmplt_epu8_mask (3, x256, x256);\n+  m64 = _mm512_mask_cmplt_epu8_mask (3, x512, x512);\n+}"}, {"sha": "3d83967886fe40042af9e9ea364a23ffe9e768df", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpltub-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpltub-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpltub-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpltub-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, unsigned char *s1, unsigned char *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] < s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_b) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmplt_epu8_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmplt_epu8_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "18e8d3009f0cc047927bcf960b2c50e680958b4e", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpltuw-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpltuw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpltuw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpltuw-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m8;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m8 = _mm_cmplt_epu16_mask (x128, x128);\n+  m16 = _mm256_cmplt_epu16_mask (x256, x256);\n+  m32 = _mm512_cmplt_epu16_mask (x512, x512);\n+  m8 = _mm_mask_cmplt_epu16_mask (3, x128, x128);\n+  m16 = _mm256_mask_cmplt_epu16_mask (3, x256, x256);\n+  m32 = _mm512_mask_cmplt_epu16_mask (3, x512, x512);\n+}"}, {"sha": "82b997c8ef3f5090b59164795d9673e7bd41fac7", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpltuw-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpltuw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpltuw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpltuw-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, unsigned short *s1, unsigned short *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] < s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_w) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmplt_epu16_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmplt_epu16_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "222fbff57dbbe801b390b29befc10bce89767286", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpltw-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpltw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpltw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpltw-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m8;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m8 = _mm_cmplt_epi16_mask (x128, x128);\n+  m16 = _mm256_cmplt_epi16_mask (x256, x256);\n+  m32 = _mm512_cmplt_epi16_mask (x512, x512);\n+  m8 = _mm_mask_cmplt_epi16_mask (3, x128, x128);\n+  m16 = _mm256_mask_cmplt_epi16_mask (3, x256, x256);\n+  m32 = _mm512_mask_cmplt_epi16_mask (3, x512, x512);\n+}"}, {"sha": "387d7bbc9ead8a569d86363b84904fa7e84b5b65", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpltw-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpltw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpltw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpltw-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, short *s1, short *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] < s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_w) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmplt_epi16_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmplt_epi16_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "0c13660707d3f25590bb9a5ea84f3b4f90efac85", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpneqb-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpneqb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpneqb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpneqb-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+volatile __mmask64 m64;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m16 = _mm_cmpneq_epi8_mask (x128, x128);\n+  m32 = _mm256_cmpneq_epi8_mask (x256, x256);\n+  m64 = _mm512_cmpneq_epi8_mask (x512, x512);\n+  m16 = _mm_mask_cmpneq_epi8_mask (3, x128, x128);\n+  m32 = _mm256_mask_cmpneq_epi8_mask (3, x256, x256);\n+  m64 = _mm512_mask_cmpneq_epi8_mask (3, x512, x512);\n+}"}, {"sha": "db43880c2a76c3aedcb2f1e97a891d44bd7155fe", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpneqb-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpneqb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpneqb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpneqb-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, char *s1, char *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] != s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_b) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpneq_epi8_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpneq_epi8_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "6a671fe0d2255ac1f018e9c972fd26629e27be01", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpnequb-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpnequb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpnequb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpnequb-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+volatile __mmask64 m64;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m16 = _mm_cmpneq_epu8_mask (x128, x128);\n+  m32 = _mm256_cmpneq_epu8_mask (x256, x256);\n+  m64 = _mm512_cmpneq_epu8_mask (x512, x512);\n+  m16 = _mm_mask_cmpneq_epu8_mask (3, x128, x128);\n+  m32 = _mm256_mask_cmpneq_epu8_mask (3, x256, x256);\n+  m64 = _mm512_mask_cmpneq_epu8_mask (3, x512, x512);\n+}"}, {"sha": "da13d7c31ba829f7195c573f3312ee1fb53e5d94", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpnequb-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpnequb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpnequb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpnequb-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, unsigned char *s1, unsigned char *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] != s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_b) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpneq_epu8_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpneq_epu8_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "7ca8cfcbadbf77e852d8bdae5ba1813d17da3231", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpnequw-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpnequw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpnequw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpnequw-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m8;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m8 = _mm_cmpneq_epu16_mask (x128, x128);\n+  m16 = _mm256_cmpneq_epu16_mask (x256, x256);\n+  m32 = _mm512_cmpneq_epu16_mask (x512, x512);\n+  m8 = _mm_mask_cmpneq_epu16_mask (3, x128, x128);\n+  m16 = _mm256_mask_cmpneq_epu16_mask (3, x256, x256);\n+  m32 = _mm512_mask_cmpneq_epu16_mask (3, x512, x512);\n+}"}, {"sha": "e8b8c6109cad37afb57c5d7e3f343b63ae3da625", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpnequw-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpnequw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpnequw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpnequw-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, unsigned short *s1, unsigned short *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] != s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_w) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpneq_epu16_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpneq_epu16_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "46188e4af8112b5b744fa58f146f65f4a6930211", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpneqw-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpneqw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpneqw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpneqw-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m8;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m8 = _mm_cmpneq_epi16_mask (x128, x128);\n+  m16 = _mm256_cmpneq_epi16_mask (x256, x256);\n+  m32 = _mm512_cmpneq_epi16_mask (x512, x512);\n+  m8 = _mm_mask_cmpneq_epi16_mask (3, x128, x128);\n+  m16 = _mm256_mask_cmpneq_epi16_mask (3, x256, x256);\n+  m32 = _mm512_mask_cmpneq_epi16_mask (3, x512, x512);\n+}"}, {"sha": "0b5005f8eaf3d2f5a44ba4b3d81a0654d6123b3a", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpneqw-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpneqw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpneqw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpneqw-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, short *s1, short *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] != s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_w) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpneq_epi16_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpneq_epi16_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "87c7d47908a82d2744077b827936c708ee0eabc8", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpequb-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpequb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpequb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpequb-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl -DAVX512VL\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpequb-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpequb-2.c\""}, {"sha": "b4727080f261596c27a5a7ba601abebb3bececb5", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpequd-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpequd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpequd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpequd-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  m = _mm_cmpeq_epu32_mask (x128, x128);\n+  m = _mm256_cmpeq_epu32_mask (x256, x256);\n+  m = _mm_mask_cmpeq_epu32_mask (3, x128, x128);\n+  m = _mm256_mask_cmpeq_epu32_mask (3, x256, x256);\n+}"}, {"sha": "364c45e7bd31be43cb056cbcb7ed960da11ceb12", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpequd-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpequd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpequd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpequd-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -DAVX512VL\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpcmpequd-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpcmpequd-2.c\""}, {"sha": "4b4c6c887c46a9ee1a1e04ed8ec2635700380bd8", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpequq-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpequq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpequq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpequq-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  m = _mm_cmpeq_epu64_mask (x128, x128);\n+  m = _mm256_cmpeq_epu64_mask (x256, x256);\n+  m = _mm_mask_cmpeq_epu64_mask (3, x128, x128);\n+  m = _mm256_mask_cmpeq_epu64_mask (3, x256, x256);\n+}"}, {"sha": "32a9b1f42032434d2af327edd1cb409b4a2b599f", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpequq-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpequq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpequq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpequq-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -DAVX512VL\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpcmpequq-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpcmpequq-2.c\""}, {"sha": "e903c49a680f97301e07e51a20c44ec244f3197c", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpequw-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpequw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpequw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpequw-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl -DAVX512VL\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpequw-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpequw-2.c\""}, {"sha": "077c58b2d92e7c15610ecebe18757e08e772e85f", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpged-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpged-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpged-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpged-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  m = _mm_cmpge_epi32_mask (x128, x128);\n+  m = _mm256_cmpge_epi32_mask (x256, x256);\n+  m = _mm_mask_cmpge_epi32_mask (3, x128, x128);\n+  m = _mm256_mask_cmpge_epi32_mask (3, x256, x256);\n+}"}, {"sha": "13d18fe513b487ad233c3e6b95ed1d2afb19fc0b", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpgeq-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgeq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgeq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgeq-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  m = _mm_cmpge_epi64_mask (x128, x128);\n+  m = _mm256_cmpge_epi64_mask (x256, x256);\n+  m = _mm_mask_cmpge_epi64_mask (3, x128, x128);\n+  m = _mm256_mask_cmpge_epi64_mask (3, x256, x256);\n+}"}, {"sha": "4084cadc2f44c30d3e6d9ace5d9ea7fea57f58df", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpgeud-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgeud-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgeud-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgeud-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  m = _mm_cmpge_epu32_mask (x128, x128);\n+  m = _mm256_cmpge_epu32_mask (x256, x256);\n+  m = _mm_mask_cmpge_epu32_mask (3, x128, x128);\n+  m = _mm256_mask_cmpge_epu32_mask (3, x256, x256);\n+}"}, {"sha": "bd8aa311e230b29b848dcd07d3188ac55f37b0b4", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpgeuq-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgeuq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgeuq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgeuq-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  m = _mm_cmpge_epu64_mask (x128, x128);\n+  m = _mm256_cmpge_epu64_mask (x256, x256);\n+  m = _mm_mask_cmpge_epu64_mask (3, x128, x128);\n+  m = _mm256_mask_cmpge_epu64_mask (3, x256, x256);\n+}"}, {"sha": "f4fa61afecb4db5222a4c07639a70a8949692809", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpgtub-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgtub-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgtub-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgtub-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl -DAVX512VL\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpgtub-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpgtub-2.c\""}, {"sha": "273781a0fa60ded88d1840fbc10920a8e5046a8f", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpgtud-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgtud-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgtud-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgtud-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  m = _mm_cmpgt_epu32_mask (x128, x128);\n+  m = _mm256_cmpgt_epu32_mask (x256, x256);\n+  m = _mm_mask_cmpgt_epu32_mask (3, x128, x128);\n+  m = _mm256_mask_cmpgt_epu32_mask (3, x256, x256);\n+}"}, {"sha": "7a9117fdb3173fd5e5163f58e449c36c36458cc4", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpgtud-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgtud-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgtud-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgtud-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -DAVX512VL\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpcmpgtud-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpcmpgtud-2.c\""}, {"sha": "2d6e64ce5d8a6b1f43a746e230e6d38355fa990a", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpgtuq-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgtuq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgtuq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgtuq-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  m = _mm_cmpgt_epu64_mask (x128, x128);\n+  m = _mm256_cmpgt_epu64_mask (x256, x256);\n+  m = _mm_mask_cmpgt_epu64_mask (3, x128, x128);\n+  m = _mm256_mask_cmpgt_epu64_mask (3, x256, x256);\n+}"}, {"sha": "c0bf472ee61204a3d55e02367ea0e64a8d2861d7", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpgtuq-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgtuq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgtuq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgtuq-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -DAVX512VL\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpcmpgtuq-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpcmpgtuq-2.c\""}, {"sha": "b516b66bb53f8d071bf93d729c08d4803544dd0f", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpgtuw-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgtuw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgtuw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgtuw-2.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl -DAVX512VL\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpgtuw-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-vpcmpgtuw-2.c\""}, {"sha": "928e836e26b87efe79fbf02aa8c4d98c26a8dc07", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpled-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpled-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpled-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpled-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  m = _mm_cmple_epi32_mask (x128, x128);\n+  m = _mm256_cmple_epi32_mask (x256, x256);\n+  m = _mm_mask_cmple_epi32_mask (3, x128, x128);\n+  m = _mm256_mask_cmple_epi32_mask (3, x256, x256);\n+}"}, {"sha": "0a8270b87cadbb71435f7242495deb51103553cb", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpleq-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpleq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpleq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpleq-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  m = _mm_cmple_epi64_mask (x128, x128);\n+  m = _mm256_cmple_epi64_mask (x256, x256);\n+  m = _mm_mask_cmple_epi64_mask (3, x128, x128);\n+  m = _mm256_mask_cmple_epi64_mask (3, x256, x256);\n+}"}, {"sha": "fb93bac92b2734adbe3a23be3df4e86da9b6f39e", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpleud-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpleud-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpleud-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpleud-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  m = _mm_cmple_epu32_mask (x128, x128);\n+  m = _mm256_cmple_epu32_mask (x256, x256);\n+  m = _mm_mask_cmple_epu32_mask (3, x128, x128);\n+  m = _mm256_mask_cmple_epu32_mask (3, x256, x256);\n+}"}, {"sha": "2f73af82b8d0aeba1ae133cdabc53f322c92dfb6", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpleuq-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpleuq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpleuq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpleuq-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  m = _mm_cmple_epu64_mask (x128, x128);\n+  m = _mm256_cmple_epu64_mask (x256, x256);\n+  m = _mm_mask_cmple_epu64_mask (3, x128, x128);\n+  m = _mm256_mask_cmple_epu64_mask (3, x256, x256);\n+}"}, {"sha": "9b1c8aa31f5d081dcdb6955662353f278bbeccd6", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpltd-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpltd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpltd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpltd-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  m = _mm_cmplt_epi32_mask (x128, x128);\n+  m = _mm256_cmplt_epi32_mask (x256, x256);\n+  m = _mm_mask_cmplt_epi32_mask (3, x128, x128);\n+  m = _mm256_mask_cmplt_epi32_mask (3, x256, x256);\n+}"}, {"sha": "187cf9ee4e454390ef09acd5070a84395dba864a", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpltq-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpltq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpltq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpltq-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  m = _mm_cmplt_epi64_mask (x128, x128);\n+  m = _mm256_cmplt_epi64_mask (x256, x256);\n+  m = _mm_mask_cmplt_epi64_mask (3, x128, x128);\n+  m = _mm256_mask_cmplt_epi64_mask (3, x256, x256);\n+}"}, {"sha": "74680334db3b793d8fb9c2c94d79ddb50f6d8e89", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpltud-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpltud-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpltud-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpltud-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  m = _mm_cmplt_epu32_mask (x128, x128);\n+  m = _mm256_cmplt_epu32_mask (x256, x256);\n+  m = _mm_mask_cmplt_epu32_mask (3, x128, x128);\n+  m = _mm256_mask_cmplt_epu32_mask (3, x256, x256);\n+}"}, {"sha": "d3af5e4d3a85ef2ac19b6e0be2171e77e7dec064", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpltuq-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpltuq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpltuq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpltuq-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  m = _mm_cmplt_epu64_mask (x128, x128);\n+  m = _mm256_cmplt_epu64_mask (x256, x256);\n+  m = _mm_mask_cmplt_epu64_mask (3, x128, x128);\n+  m = _mm256_mask_cmplt_epu64_mask (3, x256, x256);\n+}"}, {"sha": "6b57ac0a0ad6301c266185c182d9377c6dff0e1b", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpneqd-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpneqd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpneqd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpneqd-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  m = _mm_cmpneq_epi32_mask (x128, x128);\n+  m = _mm256_cmpneq_epi32_mask (x256, x256);\n+  m = _mm_mask_cmpneq_epi32_mask (3, x128, x128);\n+  m = _mm256_mask_cmpneq_epi32_mask (3, x256, x256);\n+}"}, {"sha": "eeacd087ecee07679757a2ce58c4d0b5c640da8e", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpneqq-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpneqq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpneqq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpneqq-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  m = _mm_cmpneq_epi64_mask (x128, x128);\n+  m = _mm256_cmpneq_epi64_mask (x256, x256);\n+  m = _mm_mask_cmpneq_epi64_mask (3, x128, x128);\n+  m = _mm256_mask_cmpneq_epi64_mask (3, x256, x256);\n+}"}, {"sha": "f83402939c4d503a67491f601ca59510e1d1f57e", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpnequd-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpnequd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpnequd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpnequd-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  m = _mm_cmpneq_epu32_mask (x128, x128);\n+  m = _mm256_cmpneq_epu32_mask (x256, x256);\n+  m = _mm_mask_cmpneq_epu32_mask (3, x128, x128);\n+  m = _mm256_mask_cmpneq_epu32_mask (3, x256, x256);\n+}"}, {"sha": "a2472ab0d81f499ad6d2d21c0edcaf45090ee0f0", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpnequq-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpnequq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee5d6f5271132ac65553c0accae401f17f91182/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpnequq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpnequq-1.c?ref=eee5d6f5271132ac65553c0accae401f17f91182", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  m = _mm_cmpneq_epu64_mask (x128, x128);\n+  m = _mm256_cmpneq_epu64_mask (x256, x256);\n+  m = _mm_mask_cmpneq_epu64_mask (3, x128, x128);\n+  m = _mm256_mask_cmpneq_epu64_mask (3, x256, x256);\n+}"}]}