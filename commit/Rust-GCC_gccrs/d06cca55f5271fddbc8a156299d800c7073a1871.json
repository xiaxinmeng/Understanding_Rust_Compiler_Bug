{"sha": "d06cca55f5271fddbc8a156299d800c7073a1871", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA2Y2NhNTVmNTI3MWZkZGJjOGExNTYyOTlkODAwYzcwNzNhMTg3MQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-28T23:07:48Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-28T23:07:48Z"}, "message": "(TRAMPOLINE_SIZE): Install real implementation.\n\n(INITIALIZE_TRAMPOLINE, TRAMPOLINE_TEMPLATE): Likewise.\n\nFrom-SVN: r8356", "tree": {"sha": "e4483dae831c76967f560dfe282095898223a977", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4483dae831c76967f560dfe282095898223a977"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d06cca55f5271fddbc8a156299d800c7073a1871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d06cca55f5271fddbc8a156299d800c7073a1871", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d06cca55f5271fddbc8a156299d800c7073a1871", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d06cca55f5271fddbc8a156299d800c7073a1871/comments", "author": null, "committer": null, "parents": [{"sha": "9a517e7b868cfc79d7b6118591ec059f53f603c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a517e7b868cfc79d7b6118591ec059f53f603c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a517e7b868cfc79d7b6118591ec059f53f603c9"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "b0cab19fa4ae3cf1524bfd67d045a6606734a712", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d06cca55f5271fddbc8a156299d800c7073a1871/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d06cca55f5271fddbc8a156299d800c7073a1871/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=d06cca55f5271fddbc8a156299d800c7073a1871", "patch": "@@ -1242,19 +1242,38 @@ fprintf (FILE, \"$help$: . = .+8 ; space for tmp moves!\\n\")\t\\\n \n #define ASM_OUTPUT_DOUBLE_INT(a,b)\tfprintf(a,\"%d\", b)\n \n-/* trampoline - how should i do it in separate i+d ? */\n-#define TRAMPOLINE_SIZE 0\n+/* trampoline - how should i do it in separate i+d ? \n+   have some allocate_trampoline magic??? \n \n-#define INITIALIZE_TRAMPOLINE(x,y,z)\t\\\n+   the following should work for shared I/D: */\n+\n+/* lets see whether this works as trampoline:\n+MV\t#STATIC, $4\t0x940Y\t0x0000 <- STATIC; Y = STATIC_CHAIN_REGNUM\n+JMP\tFUNCTION\t0x0058  0x0000 <- FUNCTION\n+*/\n+\n+#define TRAMPOLINE_TEMPLATE(FILE)\t\\\n {\t\t\t\t\t\\\n-abort();\t\t\t\t\\\n+  ASM_OUTPUT_INT (FILE, gen_rtx(CONST_INT, VOIDmode, 0x9400+STATIC_CHAIN_REGNUM)); \\\n+  ASM_OUTPUT_INT (FILE, const0_rtx);\t\t\t\t\\\n+  ASM_OUTPUT_INT (FILE, gen_rtx(CONST_INT, VOIDmode, 0x0058));\t\\\n+  ASM_OUTPUT_INT (FILE, const0_rtx);\t\t\t\t\\\n }\n \n-#define TRAMPOLINE_TEMPLATE(FILE)\t\\\n+#define TRAMPOLINE_SIZE 8\n+#define TRAMPOLINE_ALIGN 16\n+\n+/* Emit RTL insns to initialize the variable parts of a trampoline.\n+   FNADDR is an RTX for the address of the function's pure code.\n+   CXT is an RTX for the static chain value for the function.  */\n+\n+#define INITIALIZE_TRAMPOLINE(TRAMP,FNADDR,CXT)\t\\\n {\t\t\t\t\t\\\n-abort();\t\t\t\t\\\n+  emit_move_insn (gen_rtx (MEM, HImode, plus_constant (TRAMP, 2)), CXT); \\\n+  emit_move_insn (gen_rtx (MEM, HImode, plus_constant (TRAMP, 6)), FNADDR); \\\n }\n \n+\n /* Some machines may desire to change what optimizations are\n    performed for various optimization levels.   This macro, if\n    defined, is executed once just after the optimization level is"}]}