{"sha": "63d182b29306e582bfb151cf762820211ea1cc7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNkMTgyYjI5MzA2ZTU4MmJmYjE1MWNmNzYyODIwMjExZWExY2M3ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-05-31T16:36:25Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-06-02T18:40:20Z"}, "message": "c++: missing dtor with -fno-elide-constructors [PR100838]\n\ntf_no_cleanup only applies to the outermost TARGET_EXPR, and we already\nclear it for nested calls in build_over_call, but in this case both\nconstructor calls came from convert_like, so we need to clear it in the\nrecursive call as well.  This revealed that we were adding an extra\nck_rvalue in direct-initialization cases where it was wrong.\n\n\tPR c++/100838\n\ngcc/cp/ChangeLog:\n\n\t* call.c (convert_like_internal): Clear tf_no_cleanup when\n\trecursing.\n\t(build_user_type_conversion_1): Only add ck_rvalue if\n\tLOOKUP_ONLYCONVERTING.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/init/no-elide2.C: New test.", "tree": {"sha": "920f37acf7dc517abab88adcdb035293a121d340", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/920f37acf7dc517abab88adcdb035293a121d340"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63d182b29306e582bfb151cf762820211ea1cc7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d182b29306e582bfb151cf762820211ea1cc7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63d182b29306e582bfb151cf762820211ea1cc7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d182b29306e582bfb151cf762820211ea1cc7e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "659cc7d6320aae7ab390b5886f0efed22f78e244", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/659cc7d6320aae7ab390b5886f0efed22f78e244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/659cc7d6320aae7ab390b5886f0efed22f78e244"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "17fc60cd4afa6f4e16f85870e48cf45d9c54a938", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d182b29306e582bfb151cf762820211ea1cc7e/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d182b29306e582bfb151cf762820211ea1cc7e/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=63d182b29306e582bfb151cf762820211ea1cc7e", "patch": "@@ -4110,7 +4110,7 @@ build_user_type_conversion_1 (tree totype, tree expr, int flags,\n \t{\n \t  cand->second_conv = build_identity_conv (totype, NULL_TREE);\n \n-\t  /* If totype isn't a reference, and LOOKUP_NO_TEMP_BIND isn't\n+\t  /* If totype isn't a reference, and LOOKUP_ONLYCONVERTING is\n \t     set, then this is copy-initialization.  In that case, \"The\n \t     result of the call is then used to direct-initialize the\n \t     object that is the destination of the copy-initialization.\"\n@@ -4119,6 +4119,8 @@ build_user_type_conversion_1 (tree totype, tree expr, int flags,\n \t     We represent this in the conversion sequence with an\n \t     rvalue conversion, which means a constructor call.  */\n \t  if (!TYPE_REF_P (totype)\n+\t      && cxx_dialect < cxx17\n+\t      && (flags & LOOKUP_ONLYCONVERTING)\n \t      && !(convflags & LOOKUP_NO_TEMP_BIND))\n \t    cand->second_conv\n \t      = build_conv (ck_rvalue, totype, cand->second_conv);\n@@ -7800,7 +7802,7 @@ convert_like_internal (conversion *convs, tree expr, tree fn, int argnum,\n   expr = convert_like (next_conversion (convs), expr, fn, argnum,\n \t\t       convs->kind == ck_ref_bind\n \t\t       ? issue_conversion_warnings : false,\n-\t\t       c_cast_p, complain);\n+\t\t       c_cast_p, complain & ~tf_no_cleanup);\n   if (expr == error_mark_node)\n     return error_mark_node;\n "}, {"sha": "9a0ba1936ab7b9ad879f9ab2237d52b3fcd30c03", "filename": "gcc/testsuite/g++.dg/init/no-elide2.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d182b29306e582bfb151cf762820211ea1cc7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fno-elide2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d182b29306e582bfb151cf762820211ea1cc7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fno-elide2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fno-elide2.C?ref=63d182b29306e582bfb151cf762820211ea1cc7e", "patch": "@@ -0,0 +1,32 @@\n+// PR c++/100838\n+// { dg-do run }\n+// { dg-additional-options -fno-elide-constructors }\n+\n+extern \"C\" int puts (const char *);\n+\n+int c,d;\n+class MyString {\n+public:\n+  MyString(const char* s = \"\") {\n+    puts (\"ctor\");\n+    ++c;\n+  }\n+  ~MyString() {\n+    puts (\"dtor\");\n+    ++d;\n+  }\n+  MyString(const MyString& s) {\n+    puts (\"copy ctor\");\n+    ++c;\n+  }\n+  MyString& operator=(const MyString& s);\n+};\n+\n+int main() {\n+  {\n+    MyString s1 = \"Hello\";\n+    puts (\"main\");\n+  }\n+  if (c != d)\n+    __builtin_abort();\n+}"}]}