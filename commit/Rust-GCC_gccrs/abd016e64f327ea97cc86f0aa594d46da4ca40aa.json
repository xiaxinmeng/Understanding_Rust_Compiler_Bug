{"sha": "abd016e64f327ea97cc86f0aa594d46da4ca40aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJkMDE2ZTY0ZjMyN2VhOTdjYzg2ZjBhYTU5NGQ0NmRhNGNhNDBhYQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-04-05T12:28:41Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-04-05T12:28:41Z"}, "message": "rx-opts.h: New.\n\n\t* config/rx/rx-opts.h: New.\n\t* config/rx/rx.c (rx_cpu_type): Remove.\n\t(rx_handle_option): Don't assert that global structures are in\n\tuse.  Access variables via opts pointer.  Defer most handling of\n\tOPT_mint_register_.  Use error_at.\n\t(rx_option_override): Handle deferred OPT_mint_register_ here.\n\t* config/rx/rx.h (enum rx_cpu_types): Move to rx-opts.h.\n\t* config/rx/rx.opt (config/rx/rx-opts.h: New HeaderInclude.\n\t(mcpu=): Use Enum and specifiy rx_cpu_type with Var.\n\t(rx_cpu_types): New Enum and EnumValue entries.\n\t(mint-register=): Use Defer and use Var accordingly.\n\nFrom-SVN: r171984", "tree": {"sha": "912285a69e7c732c6efe87efbd2432dd41d8de5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/912285a69e7c732c6efe87efbd2432dd41d8de5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abd016e64f327ea97cc86f0aa594d46da4ca40aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abd016e64f327ea97cc86f0aa594d46da4ca40aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abd016e64f327ea97cc86f0aa594d46da4ca40aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abd016e64f327ea97cc86f0aa594d46da4ca40aa/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b8c1a3f49fbb96b55d872397234210d0cca6763", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8c1a3f49fbb96b55d872397234210d0cca6763", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b8c1a3f49fbb96b55d872397234210d0cca6763"}], "stats": {"total": 158, "additions": 109, "deletions": 49}, "files": [{"sha": "a0fea0d551c883653dce106c5ee4eb531bf91146", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd016e64f327ea97cc86f0aa594d46da4ca40aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd016e64f327ea97cc86f0aa594d46da4ca40aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=abd016e64f327ea97cc86f0aa594d46da4ca40aa", "patch": "@@ -1,3 +1,17 @@\n+2011-04-05  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/rx/rx-opts.h: New.\n+\t* config/rx/rx.c (rx_cpu_type): Remove.\n+\t(rx_handle_option): Don't assert that global structures are in\n+\tuse.  Access variables via opts pointer.  Defer most handling of\n+\tOPT_mint_register_.  Use error_at.\n+\t(rx_option_override): Handle deferred OPT_mint_register_ here.\n+\t* config/rx/rx.h (enum rx_cpu_types): Move to rx-opts.h.\n+\t* config/rx/rx.opt (config/rx/rx-opts.h: New HeaderInclude.\n+\t(mcpu=): Use Enum and specifiy rx_cpu_type with Var.\n+\t(rx_cpu_types): New Enum and EnumValue entries.\n+\t(mint-register=): Use Defer and use Var accordingly.\n+\n 2011-04-05  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* debug.h (debug_flush_symbol_queue, debug_queue_symbol): Delete."}, {"sha": "a1d071be242367da776720a9b1faa7f42b2edc8c", "filename": "gcc/config/rx/rx-opts.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd016e64f327ea97cc86f0aa594d46da4ca40aa/gcc%2Fconfig%2Frx%2Frx-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd016e64f327ea97cc86f0aa594d46da4ca40aa/gcc%2Fconfig%2Frx%2Frx-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx-opts.h?ref=abd016e64f327ea97cc86f0aa594d46da4ca40aa", "patch": "@@ -0,0 +1,30 @@\n+/* GCC option-handling definitions for the Renesas RX processor.\n+   Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef RX_OPTS_H\n+#define RX_OPTS_H\n+\n+enum rx_cpu_types\n+{\n+  RX600,\n+  RX610,\n+  RX200\n+};\n+\n+#endif"}, {"sha": "4d16cc3cab0405ce6b300f705738828a40a5efbf", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 48, "deletions": 38, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd016e64f327ea97cc86f0aa594d46da4ca40aa/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd016e64f327ea97cc86f0aa594d46da4ca40aa/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=abd016e64f327ea97cc86f0aa594d46da4ca40aa", "patch": "@@ -62,8 +62,6 @@ static void rx_print_operand (FILE *, rtx, int);\n \n static unsigned int flags_from_mode (enum machine_mode mode);\n static unsigned int flags_from_code (enum rtx_code code);\n-\n-enum rx_cpu_types  rx_cpu_type = RX600;\n \f\n /* Return true if OP is a reference to an object in a small data area.  */\n \n@@ -2268,60 +2266,34 @@ const struct attribute_spec rx_attribute_table[] =\n /* Extra processing for target specific command line options.  */\n \n static bool\n-rx_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+rx_handle_option (struct gcc_options *opts,\n+\t\t  struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n \t\t  const struct cl_decoded_option *decoded,\n-\t\t  location_t loc ATTRIBUTE_UNUSED)\n+\t\t  location_t loc)\n {\n   size_t code = decoded->opt_index;\n-  const char *arg = decoded->arg;\n   int value = decoded->value;\n \n-  gcc_assert (opts == &global_options);\n-  gcc_assert (opts_set == &global_options_set);\n-\n   switch (code)\n     {\n     case OPT_mint_register_:\n-      switch (value)\n-\t{\n-\tcase 4:\n-\t  fixed_regs[10] = call_used_regs [10] = 1;\n-\t  /* Fall through.  */\n-\tcase 3:\n-\t  fixed_regs[11] = call_used_regs [11] = 1;\n-\t  /* Fall through.  */\n-\tcase 2:\n-\t  fixed_regs[12] = call_used_regs [12] = 1;\n-\t  /* Fall through.  */\n-\tcase 1:\n-\t  fixed_regs[13] = call_used_regs [13] = 1;\n-\t  /* Fall through.  */\n-\tcase 0:\n-\t  return true;\n-\tdefault:\n-\t  return false;\n-\t}\n+      /* Make sure that the -mint-register option is in range.  Other\n+\t handling in rx_option_override.  */\n+      return value >= 0 && value <= 4;\n       break;\n \n     case OPT_mmax_constant_size_:\n       /* Make sure that the -mmax-constant_size option is in range.  */\n       return value >= 0 && value <= 4;\n \n     case OPT_mcpu_:\n-      if (strcmp (arg, \"rx610\") == 0)\n-\trx_cpu_type = RX610;\n-      else if (strcmp (arg, \"rx200\") == 0)\n-\t{\n-\t  target_flags |= MASK_NO_USE_FPU;\n-\t  rx_cpu_type = RX200;\n-\t}\n-      else if (strcmp (arg, \"rx600\") != 0)\n-\twarning (0, \"unrecognized argument '%s' to -mcpu= option\", arg);\n+      if ((enum rx_cpu_types) value == RX200)\n+\topts->x_target_flags |= MASK_NO_USE_FPU;\n       break;\n       \n     case OPT_fpu:\n-      if (rx_cpu_type == RX200)\n-\terror (\"the RX200 cpu does not have FPU hardware\");\n+      if (opts->x_rx_cpu_type == RX200)\n+\terror_at (loc, \"the RX200 cpu does not have FPU hardware\");\n       break;\n \n     default:\n@@ -2361,6 +2333,44 @@ rx_override_options_after_change (void)\n static void\n rx_option_override (void)\n {\n+  unsigned int i;\n+  cl_deferred_option *opt;\n+  VEC(cl_deferred_option,heap) *vec\n+    = (VEC(cl_deferred_option,heap) *) rx_deferred_options;\n+\n+  FOR_EACH_VEC_ELT (cl_deferred_option, vec, i, opt)\n+    {\n+      switch (opt->opt_index)\n+\t{\n+\tcase OPT_mint_register_:\n+\t  switch (opt->value)\n+\t    {\n+\t    case 4:\n+\t      fixed_regs[10] = call_used_regs [10] = 1;\n+\t      /* Fall through.  */\n+\t    case 3:\n+\t      fixed_regs[11] = call_used_regs [11] = 1;\n+\t      /* Fall through.  */\n+\t    case 2:\n+\t      fixed_regs[12] = call_used_regs [12] = 1;\n+\t      /* Fall through.  */\n+\t    case 1:\n+\t      fixed_regs[13] = call_used_regs [13] = 1;\n+\t      /* Fall through.  */\n+\t    case 0:\n+\t      break;\n+\t    default:\n+\t      /* Error message already given because rx_handle_option\n+\t\t returned false.  */\n+\t      break;\n+\t    }\n+\t  break;\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+    }\n+\n   /* This target defaults to strict volatile bitfields.  */\n   if (flag_strict_volatile_bitfields < 0)\n     flag_strict_volatile_bitfields = 1;"}, {"sha": "c4436d70e4a61c397e12c0976364c8c3451a6f6c", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd016e64f327ea97cc86f0aa594d46da4ca40aa/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd016e64f327ea97cc86f0aa594d46da4ca40aa/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=abd016e64f327ea97cc86f0aa594d46da4ca40aa", "patch": "@@ -52,15 +52,6 @@\n     }                                           \\\n   while (0)\n \n-enum rx_cpu_types\n-{\n-  RX600,\n-  RX610,\n-  RX200\n-};\n-\n-extern enum rx_cpu_types  rx_cpu_type;\n-\n #undef  CC1_SPEC\n #define CC1_SPEC \"\\\n   %{mas100-syntax:%{gdwarf*:%e-mas100-syntax is incompatible with -gdwarf}} \\"}, {"sha": "b51ca3f677cb118934db8407defe1e02efbeec57", "filename": "gcc/config/rx/rx.opt", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd016e64f327ea97cc86f0aa594d46da4ca40aa/gcc%2Fconfig%2Frx%2Frx.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd016e64f327ea97cc86f0aa594d46da4ca40aa/gcc%2Fconfig%2Frx%2Frx.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.opt?ref=abd016e64f327ea97cc86f0aa594d46da4ca40aa", "patch": "@@ -19,6 +19,9 @@\n ; <http://www.gnu.org/licenses/>.\n ;---------------------------------------------------\n \n+HeaderInclude\n+config/rx/rx-opts.h\n+\n ; The default is -fpu -m32bit-doubles.\n \n m64bit-doubles\n@@ -43,9 +46,21 @@ Enable the use of RX FPU instructions.  This is the default.\n ;---------------------------------------------------\n \n mcpu=\n-Target RejectNegative Joined Var(rx_cpu_name) Report ToLower\n+Target RejectNegative Joined Var(rx_cpu_type) Report ToLower Enum(rx_cpu_types) Init(RX600)\n Specify the target RX cpu type.\n \n+Enum\n+Name(rx_cpu_types) Type(enum rx_cpu_types)\n+\n+EnumValue\n+Name(rx_cpu_types) String(rx610) Value(RX610)\n+\n+EnumValue\n+Name(rx_cpu_types) String(rx200) Value(RX200)\n+\n+EnumValue\n+Name(rx_cpu_types) String(rx600) Value(RX600)\n+\n ;---------------------------------------------------\n \n mbig-endian-data\n@@ -89,7 +104,7 @@ Maximum size in bytes of constant values allowed as operands.\n ;---------------------------------------------------\n \n mint-register=\n-Target RejectNegative Joined UInteger Var(rx_interrupt_registers) Init(0)\n+Target RejectNegative Joined UInteger Var(rx_deferred_options) Defer\n Specifies the number of registers to reserve for interrupt handlers.\n \n ;---------------------------------------------------"}]}