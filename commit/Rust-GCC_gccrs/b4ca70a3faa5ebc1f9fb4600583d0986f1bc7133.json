{"sha": "b4ca70a3faa5ebc1f9fb4600583d0986f1bc7133", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRjYTcwYTNmYWE1ZWJjMWY5ZmI0NjAwNTgzZDA5ODZmMWJjNzEzMw==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2020-07-21T16:24:04Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2020-07-21T16:32:06Z"}, "message": "MSP430: Remove do_no_relax_short_jumps\n\nThis is an old cludge from from when the Binutils linker could not relax\nBR to JMP and vice-versa when shuffling \"either\" sections between upper\nand lower memory. This has been fixed since at least Binutils 2.30.\n\ngcc/ChangeLog:\n\n\t* config/msp430/msp430-protos.h (msp430_do_not_relax_short_jumps):\n\tRemove.\n\t* config/msp430/msp430.c (msp430_do_not_relax_short_jumps): Likewise.\n\t* config/msp430/msp430.md (cbranchhi4_real): Remove special case for\n\tmsp430_do_not_relax_short_jumps.", "tree": {"sha": "6a9a443680f577a3e02b1e1dc80ad7c45e22fa27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a9a443680f577a3e02b1e1dc80ad7c45e22fa27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4ca70a3faa5ebc1f9fb4600583d0986f1bc7133", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4ca70a3faa5ebc1f9fb4600583d0986f1bc7133", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4ca70a3faa5ebc1f9fb4600583d0986f1bc7133", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4ca70a3faa5ebc1f9fb4600583d0986f1bc7133/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa360dd1c882b943066ba088861c0bfac9df930d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa360dd1c882b943066ba088861c0bfac9df930d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa360dd1c882b943066ba088861c0bfac9df930d"}], "stats": {"total": 45, "additions": 4, "deletions": 41}, "files": [{"sha": "a13a94cb92c31619397e74d553bb6c036e80321d", "filename": "gcc/config/msp430/msp430-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4ca70a3faa5ebc1f9fb4600583d0986f1bc7133/gcc%2Fconfig%2Fmsp430%2Fmsp430-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4ca70a3faa5ebc1f9fb4600583d0986f1bc7133/gcc%2Fconfig%2Fmsp430%2Fmsp430-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430-protos.h?ref=b4ca70a3faa5ebc1f9fb4600583d0986f1bc7133", "patch": "@@ -21,7 +21,6 @@\n #ifndef GCC_MSP430_PROTOS_H\n #define GCC_MSP430_PROTOS_H\n \n-bool\tmsp430_do_not_relax_short_jumps (void);\n rtx\tmsp430_eh_return_stackadj_rtx (void);\n void\tmsp430_expand_eh_return (rtx);\n void\tmsp430_expand_epilogue (int);"}, {"sha": "455b4af3dad4e41c2c800c0c5f4c59c088176bd0", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4ca70a3faa5ebc1f9fb4600583d0986f1bc7133/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4ca70a3faa5ebc1f9fb4600583d0986f1bc7133/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=b4ca70a3faa5ebc1f9fb4600583d0986f1bc7133", "patch": "@@ -2161,19 +2161,6 @@ msp430_file_end (void)\n #endif\n }\n \n-bool\n-msp430_do_not_relax_short_jumps (void)\n-{\n-  /* When placing code into \"either\" low or high memory we do not want the\n-     linker to grow the size of sections, which it can do if it is encounters a\n-     branch to a label that is too far away.  So we tell the cbranch patterns to\n-     avoid using short jumps when there is a chance that the instructions will\n-     end up in a low section.  */\n-  return\n-    msp430_code_region == MSP430_REGION_EITHER\n-    || has_attr (ATTR_EITHER, current_function_decl);\n-}\n-\n enum msp430_builtin\n {\n   MSP430_BUILTIN_BIC_SR,"}, {"sha": "ed21eb02868caa1c52f4a815df2982e4e2b31bf1", "filename": "gcc/config/msp430/msp430.md", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4ca70a3faa5ebc1f9fb4600583d0986f1bc7133/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4ca70a3faa5ebc1f9fb4600583d0986f1bc7133/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.md?ref=b4ca70a3faa5ebc1f9fb4600583d0986f1bc7133", "patch": "@@ -1309,33 +1309,10 @@\n    (clobber (reg:BI CARRY))\n    ]\n   \"\"\n-  \"*\n-    /* This is nasty.  If we are splitting code between low and high memory\n-       then we do not want the linker to increase the size of sections by\n-       relaxing out of range jump instructions.  (Since relaxation occurs\n-       after section placement).  So we have to generate pessimal branches\n-       here.  But we only want to do this when really necessary.\n-\n-       FIXME: Do we need code in the other cbranch patterns ?  */\n-    if (msp430_do_not_relax_short_jumps () && get_attr_length (insn) > 6)\n-      {\n-        return which_alternative == 0 ?\n-            \\\"CMP.W\\t%2, %1 { J%r0 1f { BRA #%l3 { 1:\\\" :\n-\t    \\\"CMPX.W\\t%2, %1 { J%r0 1f { BRA #%l3 { 1:\\\";\n-      }\n-\n-    return which_alternative == 0 ?\n-         \\\"CMP.W\\t%2, %1 { J%0\\t%l3\\\" :\n-\t \\\"CMPX.W\\t%2, %1 { J%0\\t%l3\\\";\n-  \"\n-  [(set (attr \"length\")\n-\t(if_then_else\n-\t  (and (ge (minus (match_dup 3) (pc)) (const_int -510))\n-\t       (le (minus (match_dup 3) (pc)) (const_int 510)))\n-\t  (const_int 6)\n-\t  (const_int 10))\n-\t)]\n-  )\n+  \"@\n+   CMP.W\\t%2, %1 { J%0\\t%l3\n+   CMPX.W\\t%2, %1 { J%0\\t%l3\"\n+)\n \n (define_insn \"cbranchpsi4_reversed\"\n   [(set (pc) (if_then_else"}]}