{"sha": "3c2a0097066b2f122d4ae0a70bde6e8f1721081a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MyYTAwOTcwNjZiMmYxMjJkNGFlMGE3MGJkZTZlOGYxNzIxMDgxYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-03-06T03:54:30Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-03-06T03:54:30Z"}, "message": "decl2.c (setup_initp): Give statics with no priority the default priority here.\n\n\t* decl2.c (setup_initp): Give statics with no priority the default\n\tpriority here.\n\t(do_dtors, do_ctors, finish_file): Remove special handling of\n\tnon-prioritized statics.\n\nFrom-SVN: r25613", "tree": {"sha": "2fa5cbf1361cdf86c927c6af51e496b33870023e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fa5cbf1361cdf86c927c6af51e496b33870023e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c2a0097066b2f122d4ae0a70bde6e8f1721081a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c2a0097066b2f122d4ae0a70bde6e8f1721081a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c2a0097066b2f122d4ae0a70bde6e8f1721081a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c2a0097066b2f122d4ae0a70bde6e8f1721081a/comments", "author": null, "committer": null, "parents": [{"sha": "15d1c8cfe6ecf22457f463b324de7e08a5ba4f5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15d1c8cfe6ecf22457f463b324de7e08a5ba4f5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15d1c8cfe6ecf22457f463b324de7e08a5ba4f5a"}], "stats": {"total": 82, "additions": 45, "deletions": 37}, "files": [{"sha": "c85bebf64c3161297ff9ef473dc10b9ff1c3272d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c2a0097066b2f122d4ae0a70bde6e8f1721081a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c2a0097066b2f122d4ae0a70bde6e8f1721081a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3c2a0097066b2f122d4ae0a70bde6e8f1721081a", "patch": "@@ -1,3 +1,10 @@\n+1999-03-06  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl2.c (setup_initp): Give statics with no priority the default\n+\tpriority here.\n+\t(do_dtors, do_ctors, finish_file): Remove special handling of\n+\tnon-prioritized statics.\n+\n 1999-03-05  Mark Mitchell  <mark@markmitchell.com>\n \n \t* cp-tree.h (ANON_UNION_TYPE_P): Robustify."}, {"sha": "d9c1591edad5b08953e23e62cef568931bf4a4b4", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 38, "deletions": 37, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c2a0097066b2f122d4ae0a70bde6e8f1721081a/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c2a0097066b2f122d4ae0a70bde6e8f1721081a/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=3c2a0097066b2f122d4ae0a70bde6e8f1721081a", "patch": "@@ -2859,33 +2859,54 @@ static void\n setup_initp ()\n {\n   tree t, *p, next_t;\n+  tree default_pri = build_int_2 (DEFAULT_INIT_PRIORITY, 0);\n+  int saw_default;\n \n   /* First, remove any entries from static_aggregates that are also in\n-     static_aggregates_initp, and update the entries in _initp to\n-     include the initializer.  */\n+     static_aggregates_initp, and update the entries in _initp to include\n+     the initializer.  For entries not in static_aggregates_initp, update\n+     them in place to look the same way.  */\n   p = &static_aggregates;\n   for (; *p; )\n     {\n       t = value_member (TREE_VALUE (*p), static_aggregates_initp);\n \n       if (t)\n \t{\n+\t  /* We found an entry in s_a_initp; replace that entry with the\n+\t     format we want and remove the entry in s_a.  */\n \t  TREE_VALUE (t) = *p;\n \t  *p = TREE_CHAIN (*p);\n \t  TREE_CHAIN (TREE_VALUE (t)) = NULL_TREE;\n \t}\n       else\n-\tp = &TREE_CHAIN (*p);\n+\t{\n+\t  /* We didn't find an entry in s_a_i; replace the entry in s_a\n+\t     with the format we want.  */\n+\t  *p = perm_tree_cons (default_pri, *p, TREE_CHAIN (*p));\n+\t  TREE_CHAIN (TREE_VALUE (*p)) = NULL_TREE;\n+\t  p = &TREE_CHAIN (*p);\n+\t}\n     }\n \n+  /* And then attach the two lists.  By doing it this way, ctors with an\n+     explicit priority equal to the default are run before ctors with no\n+     explicit priority (i.e. the ones in s_a).  */\n+  static_aggregates_initp = chainon (static_aggregates,\n+\t\t\t\t     static_aggregates_initp);\n+  static_aggregates = NULL_TREE;\n+\n   /* Then, group static_aggregates_initp.  After this step, there will only\n      be one entry for each priority, with a chain coming off it.  */\n   t = static_aggregates_initp;\n   static_aggregates_initp = NULL_TREE;\n \n+  saw_default = 0;\n   for (; t; t = next_t)\n     {\n       next_t = TREE_CHAIN (t);\n+      if (TREE_INT_CST_LOW (TREE_PURPOSE (t)) == DEFAULT_INIT_PRIORITY)\n+\tsaw_default = 1;\n \n       for (p = &static_aggregates_initp; ; p = &TREE_CHAIN (*p))\n \t{\n@@ -2905,6 +2926,10 @@ setup_initp ()\n \t}\n     }\n \n+  if (! saw_default)\n+    static_aggregates_initp = perm_tree_cons (default_pri, error_mark_node,\n+\t\t\t\t\t      static_aggregates_initp);\n+\n   /* Reverse each list to preserve the order (currently reverse declaration\n      order, for destructors).  */\n   for (t = static_aggregates_initp; t; t = TREE_CHAIN (t))\n@@ -3027,18 +3052,10 @@ do_dtors (start)\n   tree vars;\n   int initp;\n \n-  if (start)\n-    {\n-      initp = TREE_INT_CST_LOW (TREE_PURPOSE (start));\n-      vars = TREE_VALUE (start);\n-    }\n-  else\n-    {\n-      initp = DEFAULT_INIT_PRIORITY;\n-      vars = static_aggregates;\n-    }\n+  initp = TREE_INT_CST_LOW (TREE_PURPOSE (start));\n+  vars = TREE_VALUE (start);\n \n-  for (; vars; vars = TREE_CHAIN (vars))\n+  for (; vars && vars != error_mark_node; vars = TREE_CHAIN (vars))\n     {\n       tree decl = TREE_VALUE (vars);\n       tree type = TREE_TYPE (decl);\n@@ -3115,21 +3132,13 @@ do_ctors (start)\n   tree vars;\n   int initp;\n \n-  if (start)\n-    {\n-      initp = TREE_INT_CST_LOW (TREE_PURPOSE (start));\n-      vars = TREE_VALUE (start);\n-    }\n-  else\n-    {\n-      initp = DEFAULT_INIT_PRIORITY;\n-      vars = static_aggregates;\n-    }\n+  initp = TREE_INT_CST_LOW (TREE_PURPOSE (start));\n+  vars = TREE_VALUE (start);\n \n   /* Reverse the list so it's in the right order for ctors.  */\n   vars = nreverse (vars);\n \n-  for (; vars; vars = TREE_CHAIN (vars))\n+  for (; vars && vars != error_mark_node; vars = TREE_CHAIN (vars))\n     {\n       tree decl = TREE_VALUE (vars);\n       tree init = TREE_PURPOSE (vars);\n@@ -3322,21 +3331,13 @@ finish_file ()\n   /* After setup_initp, the aggregates are listed in reverse declaration\n      order, for cleaning.  */\n   if (needs_cleaning)\n-    {\n-      do_dtors (NULL_TREE);\n-\n-      for (vars = static_aggregates_initp; vars; vars = TREE_CHAIN (vars))\n-\tdo_dtors (vars);\n-    }\n+    for (vars = static_aggregates_initp; vars; vars = TREE_CHAIN (vars))\n+      do_dtors (vars);\n \n   /* do_ctors will reverse the lists for messing up.  */\n   if (needs_messing_up)\n-    {\n-      do_ctors (NULL_TREE);\n-\n-      for (vars = static_aggregates_initp; vars; vars = TREE_CHAIN (vars))\n-\tdo_ctors (vars);\n-  }\n+    for (vars = static_aggregates_initp; vars; vars = TREE_CHAIN (vars))\n+      do_ctors (vars);\n \n   permanent_allocation (1);\n "}]}