{"sha": "770a2449e8e3b7c9c8a9627ce5d57c3bcd99177c", "node_id": "C_kwDOANBUbNoAKDc3MGEyNDQ5ZThlM2I3YzljOGE5NjI3Y2U1ZDU3YzNiY2Q5OTE3N2M", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-09-27T11:19:43Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-09-27T11:24:37Z"}, "message": "Fix duplicated function generation on higher ranked trait bounds\n\nDeuplicate function elimination can fail when we compile helpers during\nhigher ranked trait bound monomorphization. This because the\nTyTy::BaseType info can be lost/reset during the compilation process. This\nadds a second mechanism to match based on the manged names which is a bit\nmore reliable. This patch is required since the query based refactor of\nthe type system so this issue was likely hidden to to using duplicated type\ninfo for higher ranked trait bounds.", "tree": {"sha": "45bae69df12f0122937373504701f25745cb70b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45bae69df12f0122937373504701f25745cb70b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/770a2449e8e3b7c9c8a9627ce5d57c3bcd99177c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/770a2449e8e3b7c9c8a9627ce5d57c3bcd99177c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/770a2449e8e3b7c9c8a9627ce5d57c3bcd99177c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/770a2449e8e3b7c9c8a9627ce5d57c3bcd99177c/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a24dde2e7adec97243b95c79ea7877698f17c19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a24dde2e7adec97243b95c79ea7877698f17c19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a24dde2e7adec97243b95c79ea7877698f17c19"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "415b13e5bd969861c8e842ab6aea47286cdba597", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770a2449e8e3b7c9c8a9627ce5d57c3bcd99177c/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770a2449e8e3b7c9c8a9627ce5d57c3bcd99177c/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=770a2449e8e3b7c9c8a9627ce5d57c3bcd99177c", "patch": "@@ -148,7 +148,8 @@ class Context\n   }\n \n   bool lookup_function_decl (HirId id, tree *fn, DefId dId = UNKNOWN_DEFID,\n-\t\t\t     const TyTy::BaseType *ref = nullptr)\n+\t\t\t     const TyTy::BaseType *ref = nullptr,\n+\t\t\t     const std::string &asm_name = std::string ())\n   {\n     // for for any monomorphized fns\n     if (ref != nullptr)\n@@ -163,11 +164,29 @@ class Context\n \t  {\n \t    const TyTy::BaseType *r = e.first;\n \t    tree f = e.second;\n+\n \t    if (ref->is_equal (*r))\n \t      {\n \t\t*fn = f;\n \t\treturn true;\n \t      }\n+\n+\t    if (DECL_ASSEMBLER_NAME_SET_P (f) && !asm_name.empty ())\n+\t      {\n+\t\ttree raw = DECL_ASSEMBLER_NAME_RAW (f);\n+\t\tconst char *rptr = IDENTIFIER_POINTER (raw);\n+\n+\t\tbool lengths_match_p\n+\t\t  = IDENTIFIER_LENGTH (raw) == asm_name.size ();\n+\t\tif (lengths_match_p\n+\t\t    && strncmp (rptr, asm_name.c_str (),\n+\t\t\t\tIDENTIFIER_LENGTH (raw))\n+\t\t\t == 0)\n+\t\t  {\n+\t\t    *fn = f;\n+\t\t    return true;\n+\t\t  }\n+\t      }\n \t  }\n \treturn false;\n       }"}, {"sha": "27f3e640e5264acc96a4fa742aef74d0718e4e2a", "filename": "gcc/rust/backend/rust-compile-item.cc", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770a2449e8e3b7c9c8a9627ce5d57c3bcd99177c/gcc%2Frust%2Fbackend%2Frust-compile-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770a2449e8e3b7c9c8a9627ce5d57c3bcd99177c/gcc%2Frust%2Fbackend%2Frust-compile-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.cc?ref=770a2449e8e3b7c9c8a9627ce5d57c3bcd99177c", "patch": "@@ -134,11 +134,18 @@ CompileItem::visit (HIR::Function &function)\n \t}\n     }\n \n+  const Resolver::CanonicalPath *canonical_path = nullptr;\n+  bool ok = ctx->get_mappings ()->lookup_canonical_path (\n+    function.get_mappings ().get_nodeid (), &canonical_path);\n+  rust_assert (ok);\n+\n+  const std::string asm_name = ctx->mangle_item (fntype, *canonical_path);\n+\n   // items can be forward compiled which means we may not need to invoke this\n   // code. We might also have already compiled this generic function as well.\n   tree lookup = NULL_TREE;\n   if (ctx->lookup_function_decl (fntype->get_ty_ref (), &lookup,\n-\t\t\t\t fntype->get_id (), fntype))\n+\t\t\t\t fntype->get_id (), fntype, asm_name))\n     {\n       // has this been added to the list then it must be finished\n       if (ctx->function_completed (lookup))\n@@ -160,11 +167,6 @@ CompileItem::visit (HIR::Function &function)\n       fntype->override_context ();\n     }\n \n-  const Resolver::CanonicalPath *canonical_path = nullptr;\n-  bool ok = ctx->get_mappings ()->lookup_canonical_path (\n-    function.get_mappings ().get_nodeid (), &canonical_path);\n-  rust_assert (ok);\n-\n   if (function.get_qualifiers ().is_const ())\n     ctx->push_const_context ();\n "}]}