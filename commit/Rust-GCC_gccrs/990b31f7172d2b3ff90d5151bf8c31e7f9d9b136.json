{"sha": "990b31f7172d2b3ff90d5151bf8c31e7f9d9b136", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkwYjMxZjcxNzJkMmIzZmY5MGQ1MTUxYmY4YzMxZTdmOWQ5YjEzNg==", "commit": {"author": {"name": "Jiangning Liu", "email": "jiangning.liu@arm.com", "date": "2011-08-26T12:50:19Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2011-08-26T12:50:19Z"}, "message": "Commit for Jiangning. \n\nAdd conditional compare support for Thumb2.\n\nFrom-SVN: r178102", "tree": {"sha": "a8632433085d67b682925e9e7305e5c1a41f0d49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8632433085d67b682925e9e7305e5c1a41f0d49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/990b31f7172d2b3ff90d5151bf8c31e7f9d9b136", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/990b31f7172d2b3ff90d5151bf8c31e7f9d9b136", "html_url": "https://github.com/Rust-GCC/gccrs/commit/990b31f7172d2b3ff90d5151bf8c31e7f9d9b136", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/990b31f7172d2b3ff90d5151bf8c31e7f9d9b136/comments", "author": null, "committer": null, "parents": [{"sha": "8840ae2b0930c8150b7b55285dae91557cc3c872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8840ae2b0930c8150b7b55285dae91557cc3c872", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8840ae2b0930c8150b7b55285dae91557cc3c872"}], "stats": {"total": 422, "additions": 340, "deletions": 82}, "files": [{"sha": "471c9ee78921caaee1bcbfb099c4da862afef9fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990b31f7172d2b3ff90d5151bf8c31e7f9d9b136/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990b31f7172d2b3ff90d5151bf8c31e7f9d9b136/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=990b31f7172d2b3ff90d5151bf8c31e7f9d9b136", "patch": "@@ -1,3 +1,12 @@\n+2011-08-26  Jiangning Liu  <jiangning.liu@arm.com>\n+\n+       * config/arm/arm.md (*ior_scc_scc): Enable for Thumb2 as well.\n+       (*ior_scc_scc_cmp): Likewise\n+       (*and_scc_scc): Likewise.\n+       (*and_scc_scc_cmp): Likewise.\n+       (*and_scc_scc_nodom): Likewise.\n+       (*cmp_ite0, *cmp_ite1, *cmp_and, *cmp_ior): Handle Thumb2.\n+\n 2011-08-26  Jakub Jelinek  <jakub@redhat.com>\n \n \t* rtlanal.c (nonzero_bits1): Handle CLRSB."}, {"sha": "40341bd7c038b177389fcefd310ef2948e52ac68", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 274, "deletions": 82, "changes": 356, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990b31f7172d2b3ff90d5151bf8c31e7f9d9b136/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990b31f7172d2b3ff90d5151bf8c31e7f9d9b136/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=990b31f7172d2b3ff90d5151bf8c31e7f9d9b136", "patch": "@@ -49,6 +49,15 @@\n    (DOM_CC_X_OR_Y   2)\n   ]\n )\n+;; conditional compare combination\n+(define_constants\n+  [(CMP_CMP 0)\n+   (CMN_CMP 1)\n+   (CMP_CMN 2)\n+   (CMN_CMN 3)\n+   (NUM_OF_COND_CMP 4)\n+  ]\n+)\n \n ;; UNSPEC Usage:\n ;; Note: sin and cos are no-longer used.\n@@ -8984,146 +8993,329 @@\n    (set_attr \"length\" \"8,12\")]\n )\n \n-;; ??? Is it worth using these conditional patterns in Thumb-2 mode?\n (define_insn \"*cmp_ite0\"\n   [(set (match_operand 6 \"dominant_cc_register\" \"\")\n \t(compare\n \t (if_then_else:SI\n \t  (match_operator 4 \"arm_comparison_operator\"\n-\t   [(match_operand:SI 0 \"s_register_operand\" \"r,r,r,r\")\n-\t    (match_operand:SI 1 \"arm_add_operand\" \"rI,L,rI,L\")])\n+\t   [(match_operand:SI 0 \"s_register_operand\"\n+\t        \"l,l,l,r,r,r,r,r,r\")\n+\t    (match_operand:SI 1 \"arm_add_operand\"\n+\t        \"lPy,lPy,lPy,rI,L,rI,L,rI,L\")])\n \t  (match_operator:SI 5 \"arm_comparison_operator\"\n-\t   [(match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\")\n-\t    (match_operand:SI 3 \"arm_add_operand\" \"rI,rI,L,L\")])\n+\t   [(match_operand:SI 2 \"s_register_operand\"\n+\t        \"l,r,r,l,l,r,r,r,r\")\n+\t    (match_operand:SI 3 \"arm_add_operand\"\n+\t        \"lPy,rI,L,lPy,lPy,rI,rI,L,L\")])\n \t  (const_int 0))\n \t (const_int 0)))]\n-  \"TARGET_ARM\"\n+  \"TARGET_32BIT\"\n   \"*\n   {\n-    static const char * const opcodes[4][2] =\n+    static const char * const cmp1[NUM_OF_COND_CMP][2] =\n     {\n-      {\\\"cmp\\\\t%2, %3\\;cmp%d5\\\\t%0, %1\\\",\n-       \\\"cmp\\\\t%0, %1\\;cmp%d4\\\\t%2, %3\\\"},\n-      {\\\"cmp\\\\t%2, %3\\;cmn%d5\\\\t%0, #%n1\\\",\n-       \\\"cmn\\\\t%0, #%n1\\;cmp%d4\\\\t%2, %3\\\"},\n-      {\\\"cmn\\\\t%2, #%n3\\;cmp%d5\\\\t%0, %1\\\",\n-       \\\"cmp\\\\t%0, %1\\;cmn%d4\\\\t%2, #%n3\\\"},\n-      {\\\"cmn\\\\t%2, #%n3\\;cmn%d5\\\\t%0, #%n1\\\",\n-       \\\"cmn\\\\t%0, #%n1\\;cmn%d4\\\\t%2, #%n3\\\"}\n+      {\\\"cmp%d5\\\\t%0, %1\\\",\n+       \\\"cmp%d4\\\\t%2, %3\\\"},\n+      {\\\"cmn%d5\\\\t%0, #%n1\\\",\n+       \\\"cmp%d4\\\\t%2, %3\\\"},\n+      {\\\"cmp%d5\\\\t%0, %1\\\",\n+       \\\"cmn%d4\\\\t%2, #%n3\\\"},\n+      {\\\"cmn%d5\\\\t%0, #%n1\\\",\n+       \\\"cmn%d4\\\\t%2, #%n3\\\"}\n     };\n+    static const char * const cmp2[NUM_OF_COND_CMP][2] =\n+    {\n+      {\\\"cmp\\\\t%2, %3\\\",\n+       \\\"cmp\\\\t%0, %1\\\"},\n+      {\\\"cmp\\\\t%2, %3\\\",\n+       \\\"cmn\\\\t%0, #%n1\\\"},\n+      {\\\"cmn\\\\t%2, #%n3\\\",\n+       \\\"cmp\\\\t%0, %1\\\"},\n+      {\\\"cmn\\\\t%2, #%n3\\\",\n+       \\\"cmn\\\\t%0, #%n1\\\"}\n+    };\n+    static const char * const ite[2] =\n+    {\n+      \\\"it\\\\t%d5\\\",\n+      \\\"it\\\\t%d4\\\"\n+    };\n+    static const int cmp_idx[9] = {CMP_CMP, CMP_CMP, CMP_CMN,\n+                                   CMP_CMP, CMN_CMP, CMP_CMP,\n+                                   CMN_CMP, CMP_CMN, CMN_CMN};\n     int swap =\n       comparison_dominates_p (GET_CODE (operands[5]), GET_CODE (operands[4]));\n \n-    return opcodes[which_alternative][swap];\n+    output_asm_insn (cmp2[cmp_idx[which_alternative]][swap], operands);\n+    if (TARGET_THUMB2) {\n+      output_asm_insn (ite[swap], operands);\n+    }\n+    output_asm_insn (cmp1[cmp_idx[which_alternative]][swap], operands);\n+    return \\\"\\\";\n   }\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"arch\" \"t2,t2,t2,t2,t2,any,any,any,any\")\n+   (set_attr_alternative \"length\"\n+      [(const_int 6)\n+       (const_int 8)\n+       (const_int 8)\n+       (const_int 8)\n+       (const_int 8)\n+       (if_then_else (eq_attr \"is_thumb\" \"no\")\n+           (const_int 8)\n+           (const_int 10))\n+       (if_then_else (eq_attr \"is_thumb\" \"no\")\n+           (const_int 8)\n+           (const_int 10))\n+       (if_then_else (eq_attr \"is_thumb\" \"no\")\n+           (const_int 8)\n+           (const_int 10))\n+       (if_then_else (eq_attr \"is_thumb\" \"no\")\n+           (const_int 8)\n+           (const_int 10))])]\n )\n \n (define_insn \"*cmp_ite1\"\n   [(set (match_operand 6 \"dominant_cc_register\" \"\")\n \t(compare\n \t (if_then_else:SI\n \t  (match_operator 4 \"arm_comparison_operator\"\n-\t   [(match_operand:SI 0 \"s_register_operand\" \"r,r,r,r\")\n-\t    (match_operand:SI 1 \"arm_add_operand\" \"rI,L,rI,L\")])\n+\t   [(match_operand:SI 0 \"s_register_operand\"\n+\t        \"l,l,l,r,r,r,r,r,r\")\n+\t    (match_operand:SI 1 \"arm_add_operand\"\n+\t        \"lPy,lPy,lPy,rI,L,rI,L,rI,L\")])\n \t  (match_operator:SI 5 \"arm_comparison_operator\"\n-\t   [(match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\")\n-\t    (match_operand:SI 3 \"arm_add_operand\" \"rI,rI,L,L\")])\n+\t   [(match_operand:SI 2 \"s_register_operand\"\n+\t        \"l,r,r,l,l,r,r,r,r\")\n+\t    (match_operand:SI 3 \"arm_add_operand\"\n+\t        \"lPy,rI,L,lPy,lPy,rI,rI,L,L\")])\n \t  (const_int 1))\n \t (const_int 0)))]\n-  \"TARGET_ARM\"\n+  \"TARGET_32BIT\"\n   \"*\n   {\n-    static const char * const opcodes[4][2] =\n+    static const char * const cmp1[NUM_OF_COND_CMP][2] =\n+    {\n+      {\\\"cmp\\\\t%0, %1\\\",\n+       \\\"cmp\\\\t%2, %3\\\"},\n+      {\\\"cmn\\\\t%0, #%n1\\\",\n+       \\\"cmp\\\\t%2, %3\\\"},\n+      {\\\"cmp\\\\t%0, %1\\\",\n+       \\\"cmn\\\\t%2, #%n3\\\"},\n+      {\\\"cmn\\\\t%0, #%n1\\\",\n+       \\\"cmn\\\\t%2, #%n3\\\"}\n+    };\n+    static const char * const cmp2[NUM_OF_COND_CMP][2] =\n+    {\n+      {\\\"cmp%d4\\\\t%2, %3\\\",\n+       \\\"cmp%D5\\\\t%0, %1\\\"},\n+      {\\\"cmp%d4\\\\t%2, %3\\\",\n+       \\\"cmn%D5\\\\t%0, #%n1\\\"},\n+      {\\\"cmn%d4\\\\t%2, #%n3\\\",\n+       \\\"cmp%D5\\\\t%0, %1\\\"},\n+      {\\\"cmn%d4\\\\t%2, #%n3\\\",\n+       \\\"cmn%D5\\\\t%0, #%n1\\\"}\n+    };\n+    static const char * const ite[2] =\n     {\n-      {\\\"cmp\\\\t%0, %1\\;cmp%d4\\\\t%2, %3\\\",\n-       \\\"cmp\\\\t%2, %3\\;cmp%D5\\\\t%0, %1\\\"},\n-      {\\\"cmn\\\\t%0, #%n1\\;cmp%d4\\\\t%2, %3\\\",\n-       \\\"cmp\\\\t%2, %3\\;cmn%D5\\\\t%0, #%n1\\\"},\n-      {\\\"cmp\\\\t%0, %1\\;cmn%d4\\\\t%2, #%n3\\\",\n-       \\\"cmn\\\\t%2, #%n3\\;cmp%D5\\\\t%0, %1\\\"},\n-      {\\\"cmn\\\\t%0, #%n1\\;cmn%d4\\\\t%2, #%n3\\\",\n-       \\\"cmn\\\\t%2, #%n3\\;cmn%D5\\\\t%0, #%n1\\\"}\n+      \\\"it\\\\t%d4\\\",\n+      \\\"it\\\\t%D5\\\"\n     };\n+    static const int cmp_idx[9] = {CMP_CMP, CMP_CMP, CMP_CMN,\n+                                   CMP_CMP, CMN_CMP, CMP_CMP,\n+                                   CMN_CMP, CMP_CMN, CMN_CMN};\n     int swap =\n       comparison_dominates_p (GET_CODE (operands[5]),\n \t\t\t      reverse_condition (GET_CODE (operands[4])));\n \n-    return opcodes[which_alternative][swap];\n+    output_asm_insn (cmp1[cmp_idx[which_alternative]][swap], operands);\n+    if (TARGET_THUMB2) {\n+      output_asm_insn (ite[swap], operands);\n+    }\n+    output_asm_insn (cmp2[cmp_idx[which_alternative]][swap], operands);\n+    return \\\"\\\";\n   }\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"arch\" \"t2,t2,t2,t2,t2,any,any,any,any\")\n+   (set_attr_alternative \"length\"\n+      [(const_int 6)\n+       (const_int 8)\n+       (const_int 8)\n+       (const_int 8)\n+       (const_int 8)\n+       (if_then_else (eq_attr \"is_thumb\" \"no\")\n+           (const_int 8)\n+           (const_int 10))\n+       (if_then_else (eq_attr \"is_thumb\" \"no\")\n+           (const_int 8)\n+           (const_int 10))\n+       (if_then_else (eq_attr \"is_thumb\" \"no\")\n+           (const_int 8)\n+           (const_int 10))\n+       (if_then_else (eq_attr \"is_thumb\" \"no\")\n+           (const_int 8)\n+           (const_int 10))])]\n )\n \n (define_insn \"*cmp_and\"\n   [(set (match_operand 6 \"dominant_cc_register\" \"\")\n \t(compare\n \t (and:SI\n \t  (match_operator 4 \"arm_comparison_operator\"\n-\t   [(match_operand:SI 0 \"s_register_operand\" \"r,r,r,r\")\n-\t    (match_operand:SI 1 \"arm_add_operand\" \"rI,L,rI,L\")])\n+\t   [(match_operand:SI 0 \"s_register_operand\" \n+\t        \"l,l,l,r,r,r,r,r,r\")\n+\t    (match_operand:SI 1 \"arm_add_operand\" \n+\t        \"lPy,lPy,lPy,rI,L,rI,L,rI,L\")])\n \t  (match_operator:SI 5 \"arm_comparison_operator\"\n-\t   [(match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\")\n-\t    (match_operand:SI 3 \"arm_add_operand\" \"rI,rI,L,L\")]))\n+\t   [(match_operand:SI 2 \"s_register_operand\" \n+\t        \"l,r,r,l,l,r,r,r,r\")\n+\t    (match_operand:SI 3 \"arm_add_operand\" \n+\t        \"lPy,rI,L,lPy,lPy,rI,rI,L,L\")]))\n \t (const_int 0)))]\n-  \"TARGET_ARM\"\n+  \"TARGET_32BIT\"\n   \"*\n   {\n-    static const char *const opcodes[4][2] =\n+    static const char *const cmp1[NUM_OF_COND_CMP][2] =\n+    {\n+      {\\\"cmp%d5\\\\t%0, %1\\\",\n+       \\\"cmp%d4\\\\t%2, %3\\\"},\n+      {\\\"cmn%d5\\\\t%0, #%n1\\\",\n+       \\\"cmp%d4\\\\t%2, %3\\\"},\n+      {\\\"cmp%d5\\\\t%0, %1\\\",\n+       \\\"cmn%d4\\\\t%2, #%n3\\\"},\n+      {\\\"cmn%d5\\\\t%0, #%n1\\\",\n+       \\\"cmn%d4\\\\t%2, #%n3\\\"}\n+    };\n+    static const char *const cmp2[NUM_OF_COND_CMP][2] =\n+    {\n+      {\\\"cmp\\\\t%2, %3\\\",\n+       \\\"cmp\\\\t%0, %1\\\"},\n+      {\\\"cmp\\\\t%2, %3\\\",\n+       \\\"cmn\\\\t%0, #%n1\\\"},\n+      {\\\"cmn\\\\t%2, #%n3\\\",\n+       \\\"cmp\\\\t%0, %1\\\"},\n+      {\\\"cmn\\\\t%2, #%n3\\\",\n+       \\\"cmn\\\\t%0, #%n1\\\"}\n+    };\n+    static const char *const ite[2] =\n     {\n-      {\\\"cmp\\\\t%2, %3\\;cmp%d5\\\\t%0, %1\\\",\n-       \\\"cmp\\\\t%0, %1\\;cmp%d4\\\\t%2, %3\\\"},\n-      {\\\"cmp\\\\t%2, %3\\;cmn%d5\\\\t%0, #%n1\\\",\n-       \\\"cmn\\\\t%0, #%n1\\;cmp%d4\\\\t%2, %3\\\"},\n-      {\\\"cmn\\\\t%2, #%n3\\;cmp%d5\\\\t%0, %1\\\",\n-       \\\"cmp\\\\t%0, %1\\;cmn%d4\\\\t%2, #%n3\\\"},\n-      {\\\"cmn\\\\t%2, #%n3\\;cmn%d5\\\\t%0, #%n1\\\",\n-       \\\"cmn\\\\t%0, #%n1\\;cmn%d4\\\\t%2, #%n3\\\"}\n+      \\\"it\\\\t%d5\\\",\n+      \\\"it\\\\t%d4\\\"\n     };\n+    static const int cmp_idx[9] = {CMP_CMP, CMP_CMP, CMP_CMN,\n+                                   CMP_CMP, CMN_CMP, CMP_CMP,\n+                                   CMN_CMP, CMP_CMN, CMN_CMN};\n     int swap =\n       comparison_dominates_p (GET_CODE (operands[5]), GET_CODE (operands[4]));\n \n-    return opcodes[which_alternative][swap];\n+    output_asm_insn (cmp2[cmp_idx[which_alternative]][swap], operands);\n+    if (TARGET_THUMB2) {\n+      output_asm_insn (ite[swap], operands);\n+    }\n+    output_asm_insn (cmp1[cmp_idx[which_alternative]][swap], operands);\n+    return \\\"\\\";\n   }\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"predicable\" \"no\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"arch\" \"t2,t2,t2,t2,t2,any,any,any,any\")\n+   (set_attr_alternative \"length\"\n+      [(const_int 6)\n+       (const_int 8)\n+       (const_int 8)\n+       (const_int 8)\n+       (const_int 8)\n+       (if_then_else (eq_attr \"is_thumb\" \"no\")\n+           (const_int 8)\n+           (const_int 10))\n+       (if_then_else (eq_attr \"is_thumb\" \"no\")\n+           (const_int 8)\n+           (const_int 10))\n+       (if_then_else (eq_attr \"is_thumb\" \"no\")\n+           (const_int 8)\n+           (const_int 10))\n+       (if_then_else (eq_attr \"is_thumb\" \"no\")\n+           (const_int 8)\n+           (const_int 10))])]\n )\n \n (define_insn \"*cmp_ior\"\n   [(set (match_operand 6 \"dominant_cc_register\" \"\")\n \t(compare\n \t (ior:SI\n \t  (match_operator 4 \"arm_comparison_operator\"\n-\t   [(match_operand:SI 0 \"s_register_operand\" \"r,r,r,r\")\n-\t    (match_operand:SI 1 \"arm_add_operand\" \"rI,L,rI,L\")])\n+\t   [(match_operand:SI 0 \"s_register_operand\"\n+\t        \"l,l,l,r,r,r,r,r,r\")\n+\t    (match_operand:SI 1 \"arm_add_operand\"\n+\t        \"lPy,lPy,lPy,rI,L,rI,L,rI,L\")])\n \t  (match_operator:SI 5 \"arm_comparison_operator\"\n-\t   [(match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\")\n-\t    (match_operand:SI 3 \"arm_add_operand\" \"rI,rI,L,L\")]))\n+\t   [(match_operand:SI 2 \"s_register_operand\"\n+\t        \"l,r,r,l,l,r,r,r,r\")\n+\t    (match_operand:SI 3 \"arm_add_operand\"\n+\t        \"lPy,rI,L,lPy,lPy,rI,rI,L,L\")]))\n \t (const_int 0)))]\n-  \"TARGET_ARM\"\n+  \"TARGET_32BIT\"\n   \"*\n-{\n-  static const char *const opcodes[4][2] =\n   {\n-    {\\\"cmp\\\\t%0, %1\\;cmp%D4\\\\t%2, %3\\\",\n-     \\\"cmp\\\\t%2, %3\\;cmp%D5\\\\t%0, %1\\\"},\n-    {\\\"cmn\\\\t%0, #%n1\\;cmp%D4\\\\t%2, %3\\\",\n-     \\\"cmp\\\\t%2, %3\\;cmn%D5\\\\t%0, #%n1\\\"},\n-    {\\\"cmp\\\\t%0, %1\\;cmn%D4\\\\t%2, #%n3\\\",\n-     \\\"cmn\\\\t%2, #%n3\\;cmp%D5\\\\t%0, %1\\\"},\n-    {\\\"cmn\\\\t%0, #%n1\\;cmn%D4\\\\t%2, #%n3\\\",\n-     \\\"cmn\\\\t%2, #%n3\\;cmn%D5\\\\t%0, #%n1\\\"}\n-  };\n-  int swap =\n-    comparison_dominates_p (GET_CODE (operands[5]), GET_CODE (operands[4]));\n-\n-  return opcodes[which_alternative][swap];\n-}\n-\"\n+    static const char *const cmp1[NUM_OF_COND_CMP][2] =\n+    {\n+      {\\\"cmp\\\\t%0, %1\\\",\n+       \\\"cmp\\\\t%2, %3\\\"},\n+      {\\\"cmn\\\\t%0, #%n1\\\",\n+       \\\"cmp\\\\t%2, %3\\\"},\n+      {\\\"cmp\\\\t%0, %1\\\",\n+       \\\"cmn\\\\t%2, #%n3\\\"},\n+      {\\\"cmn\\\\t%0, #%n1\\\",\n+       \\\"cmn\\\\t%2, #%n3\\\"}\n+    };\n+    static const char *const cmp2[NUM_OF_COND_CMP][2] =\n+    {\n+      {\\\"cmp%D4\\\\t%2, %3\\\",\n+       \\\"cmp%D5\\\\t%0, %1\\\"},\n+      {\\\"cmp%D4\\\\t%2, %3\\\",\n+       \\\"cmn%D5\\\\t%0, #%n1\\\"},\n+      {\\\"cmn%D4\\\\t%2, #%n3\\\",\n+       \\\"cmp%D5\\\\t%0, %1\\\"},\n+      {\\\"cmn%D4\\\\t%2, #%n3\\\",\n+       \\\"cmn%D5\\\\t%0, #%n1\\\"}\n+    };\n+    static const char *const ite[2] =\n+    {\n+      \\\"it\\\\t%D4\\\",\n+      \\\"it\\\\t%D5\\\"\n+    };\n+    static const int cmp_idx[9] = {CMP_CMP, CMP_CMP, CMP_CMN,\n+                                   CMP_CMP, CMN_CMP, CMP_CMP,\n+                                   CMN_CMP, CMP_CMN, CMN_CMN};\n+    int swap =\n+      comparison_dominates_p (GET_CODE (operands[5]), GET_CODE (operands[4]));\n+\n+    output_asm_insn (cmp1[cmp_idx[which_alternative]][swap], operands);\n+    if (TARGET_THUMB2) {\n+      output_asm_insn (ite[swap], operands);\n+    }\n+    output_asm_insn (cmp2[cmp_idx[which_alternative]][swap], operands);\n+    return \\\"\\\";\n+  }\n+  \"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"arch\" \"t2,t2,t2,t2,t2,any,any,any,any\")\n+   (set_attr_alternative \"length\"\n+      [(const_int 6)\n+       (const_int 8)\n+       (const_int 8)\n+       (const_int 8)\n+       (const_int 8)\n+       (if_then_else (eq_attr \"is_thumb\" \"no\")\n+           (const_int 8)\n+           (const_int 10))\n+       (if_then_else (eq_attr \"is_thumb\" \"no\")\n+           (const_int 8)\n+           (const_int 10))\n+       (if_then_else (eq_attr \"is_thumb\" \"no\")\n+           (const_int 8)\n+           (const_int 10))\n+       (if_then_else (eq_attr \"is_thumb\" \"no\")\n+           (const_int 8)\n+           (const_int 10))])]\n )\n \n (define_insn_and_split \"*ior_scc_scc\"\n@@ -9135,11 +9327,11 @@\n \t\t [(match_operand:SI 4 \"s_register_operand\" \"r\")\n \t\t  (match_operand:SI 5 \"arm_add_operand\" \"rIL\")])))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_ARM\n+  \"TARGET_32BIT\n    && (arm_select_dominance_cc_mode (operands[3], operands[6], DOM_CC_X_OR_Y)\n        != CCmode)\"\n   \"#\"\n-  \"TARGET_ARM && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 7)\n \t(compare\n \t (ior:SI\n@@ -9168,9 +9360,9 @@\n    (set (match_operand:SI 7 \"s_register_operand\" \"=r\")\n \t(ior:SI (match_op_dup 3 [(match_dup 1) (match_dup 2)])\n \t\t(match_op_dup 6 [(match_dup 4) (match_dup 5)])))]\n-  \"TARGET_ARM\"\n+  \"TARGET_32BIT\"\n   \"#\"\n-  \"TARGET_ARM && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 0)\n \t(compare\n \t (ior:SI\n@@ -9191,11 +9383,11 @@\n \t\t [(match_operand:SI 4 \"s_register_operand\" \"r\")\n \t\t  (match_operand:SI 5 \"arm_add_operand\" \"rIL\")])))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_ARM\n+  \"TARGET_32BIT\n    && (arm_select_dominance_cc_mode (operands[3], operands[6], DOM_CC_X_AND_Y)\n        != CCmode)\"\n   \"#\"\n-  \"TARGET_ARM && reload_completed\n+  \"TARGET_32BIT && reload_completed\n    && (arm_select_dominance_cc_mode (operands[3], operands[6], DOM_CC_X_AND_Y)\n        != CCmode)\"\n   [(set (match_dup 7)\n@@ -9226,9 +9418,9 @@\n    (set (match_operand:SI 7 \"s_register_operand\" \"=r\")\n \t(and:SI (match_op_dup 3 [(match_dup 1) (match_dup 2)])\n \t\t(match_op_dup 6 [(match_dup 4) (match_dup 5)])))]\n-  \"TARGET_ARM\"\n+  \"TARGET_32BIT\"\n   \"#\"\n-  \"TARGET_ARM && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 0)\n \t(compare\n \t (and:SI\n@@ -9253,11 +9445,11 @@\n \t\t [(match_operand:SI 4 \"s_register_operand\" \"r,r,r\")\n \t\t  (match_operand:SI 5 \"arm_add_operand\" \"rIL,rIL,rIL\")])))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_ARM\n+  \"TARGET_32BIT\n    && (arm_select_dominance_cc_mode (operands[3], operands[6], DOM_CC_X_AND_Y)\n        == CCmode)\"\n   \"#\"\n-  \"TARGET_ARM && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(parallel [(set (match_dup 0)\n \t\t   (match_op_dup 3 [(match_dup 1) (match_dup 2)]))\n \t      (clobber (reg:CC CC_REGNUM))])"}, {"sha": "a088e4d47d0f0a0ded768f9d418df6ef132a9b93", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990b31f7172d2b3ff90d5151bf8c31e7f9d9b136/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990b31f7172d2b3ff90d5151bf8c31e7f9d9b136/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=990b31f7172d2b3ff90d5151bf8c31e7f9d9b136", "patch": "@@ -1,3 +1,10 @@\n+2011-08-26  Jiangning Liu  <jiangning.liu@arm.com>\n+\n+       * gcc.target/arm/thumb2-cond-cmp-1.c: New.\n+       * gcc.target/arm/thumb2-cond-cmp-2.c: Likewise.\n+       * gcc.target/arm/thumb2-cond-cmp-3.c: Likewise.\n+       * gcc.target/arm/thumb2-cond-cmp-4.c: Likewise.\n+\n 2011-08-26  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* gcc.target/arm/thumb2-replicated-constant1.c: New file."}, {"sha": "45ab605e72ea725b2da4bf7c74e81b3690f6bc7c", "filename": "gcc/testsuite/gcc.target/arm/thumb2-cond-cmp-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990b31f7172d2b3ff90d5151bf8c31e7f9d9b136/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-cond-cmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990b31f7172d2b3ff90d5151bf8c31e7f9d9b136/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-cond-cmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-cond-cmp-1.c?ref=990b31f7172d2b3ff90d5151bf8c31e7f9d9b136", "patch": "@@ -0,0 +1,13 @@\n+/* Use conditional compare */\n+/* { dg-options \"-O2\" } */\n+/* { dg-skip-if \"\" { arm_thumb1_ok } } */\n+/* { dg-final { scan-assembler \"cmpne\" } } */\n+\n+int f(int i, int j) \n+{\n+  if ( (i == '+') || (j == '-') ) {\n+    return 1;\n+  } else {\n+    return 0;\n+  }\n+}"}, {"sha": "17d9a8f76d6bc4db228bb1e7074fc829aa98aa90", "filename": "gcc/testsuite/gcc.target/arm/thumb2-cond-cmp-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990b31f7172d2b3ff90d5151bf8c31e7f9d9b136/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-cond-cmp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990b31f7172d2b3ff90d5151bf8c31e7f9d9b136/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-cond-cmp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-cond-cmp-2.c?ref=990b31f7172d2b3ff90d5151bf8c31e7f9d9b136", "patch": "@@ -0,0 +1,13 @@\n+/* Use conditional compare */                                                                                         \n+/* { dg-options \"-O2\" } */\n+/* { dg-skip-if \"\" { arm_thumb1_ok } } */\n+/* { dg-final { scan-assembler \"cmpeq\" } } */\n+\n+int f(int i, int j) \n+{\n+  if ( (i == '+') && (j == '-') ) {\n+    return 1;\n+  } else {\n+    return 0;\n+  }\n+}"}, {"sha": "6b2a79b1a9efa3675b2e81958151b9dcd9db36d4", "filename": "gcc/testsuite/gcc.target/arm/thumb2-cond-cmp-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990b31f7172d2b3ff90d5151bf8c31e7f9d9b136/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-cond-cmp-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990b31f7172d2b3ff90d5151bf8c31e7f9d9b136/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-cond-cmp-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-cond-cmp-3.c?ref=990b31f7172d2b3ff90d5151bf8c31e7f9d9b136", "patch": "@@ -0,0 +1,12 @@\n+/* Use conditional compare */                                                                                         \n+/* { dg-options \"-O2\" } */\n+/* { dg-skip-if \"\" { arm_thumb1_ok } } */\n+/* { dg-final { scan-assembler \"cmpgt\" } } */\n+\n+int f(int i, int j)\n+{\n+  if ( (i >= '+') ? (j > '-') : 0)\n+    return 1;\n+  else\n+    return 0;\n+}"}, {"sha": "80e1076fd13d8390d2297fec4324c08d44afe5a8", "filename": "gcc/testsuite/gcc.target/arm/thumb2-cond-cmp-4.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990b31f7172d2b3ff90d5151bf8c31e7f9d9b136/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-cond-cmp-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990b31f7172d2b3ff90d5151bf8c31e7f9d9b136/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-cond-cmp-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-cond-cmp-4.c?ref=990b31f7172d2b3ff90d5151bf8c31e7f9d9b136", "patch": "@@ -0,0 +1,12 @@\n+/* Use conditional compare */                                                                                         \n+/* { dg-options \"-O2\" } */\n+/* { dg-skip-if \"\" { arm_thumb1_ok } } */\n+/* { dg-final { scan-assembler \"cmpgt\" } } */\n+\n+int f(int i, int j)\n+{\n+  if ( (i >= '+') ? (j <= '-') : 1)\n+    return 1;\n+  else\n+    return 0;\n+}"}]}