{"sha": "fd93038859364e252533c5ecd0c5c171288ed6ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ5MzAzODg1OTM2NGUyNTI1MzNjNWVjZDBjNWMxNzEyODhlZDZlZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2010-09-28T22:40:07Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2010-09-28T22:40:07Z"}, "message": "Implement TARGET_BUILTIN_DECL for alpha.\n\nFrom-SVN: r164707", "tree": {"sha": "32b2a4c7d8164a0a4c95bf2e3dfb3980933c38f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32b2a4c7d8164a0a4c95bf2e3dfb3980933c38f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd93038859364e252533c5ecd0c5c171288ed6ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd93038859364e252533c5ecd0c5c171288ed6ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd93038859364e252533c5ecd0c5c171288ed6ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd93038859364e252533c5ecd0c5c171288ed6ef/comments", "author": null, "committer": null, "parents": [{"sha": "6b79b1b74a1a43c6d7c6468ee3bd83e346d895e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b79b1b74a1a43c6d7c6468ee3bd83e346d895e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b79b1b74a1a43c6d7c6468ee3bd83e346d895e0"}], "stats": {"total": 76, "additions": 52, "deletions": 24}, "files": [{"sha": "9d5e0509fcd7262eae434da53550a7cd752d67ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd93038859364e252533c5ecd0c5c171288ed6ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd93038859364e252533c5ecd0c5c171288ed6ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd93038859364e252533c5ecd0c5c171288ed6ef", "patch": "@@ -1,3 +1,10 @@\n+2010-09-28  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (alpha_builtins): New.\n+\t(alpha_builtin_decl, TARGET_BUILTIN_DECL): New.\n+\t(alpha_builtin_function): New.\n+\t(alpha_add_builtins, alpha_init_builtins): Use it.\n+\n 2010-09-28  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* doc/standards.texi (Standards): Expanded the section on"}, {"sha": "fda8c75dbd76d0fa691f782ee2b1736626166bdd", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 45, "deletions": 24, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd93038859364e252533c5ecd0c5c171288ed6ef/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd93038859364e252533c5ecd0c5c171288ed6ef/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=fd93038859364e252533c5ecd0c5c171288ed6ef", "patch": "@@ -6634,33 +6634,56 @@ static GTY(()) tree alpha_v8qi_s;\n static GTY(()) tree alpha_v4hi_u;\n static GTY(()) tree alpha_v4hi_s;\n \n+static GTY(()) tree alpha_builtins[(int) ALPHA_BUILTIN_max];\n+\n+/* Return the alpha builtin for CODE.  */\n+\n+static tree\n+alpha_builtin_decl (unsigned code, bool initialize_p ATTRIBUTE_UNUSED)\n+{\n+  if (code >= ALPHA_BUILTIN_max)\n+    return error_mark_node;\n+  return alpha_builtins[code];\n+}\n+\n+/* Helper function of alpha_init_builtins.  Add the built-in specified\n+   by NAME, TYPE, CODE, and ECF.  */\n+\n+static void\n+alpha_builtin_function (const char *name, tree ftype,\n+\t\t\tenum alpha_builtin code, unsigned ecf)\n+{\n+  tree decl = add_builtin_function (name, ftype, (int) code,\n+\t\t\t\t    BUILT_IN_MD, NULL, NULL_TREE);\n+\n+  if (ecf & ECF_CONST)\n+    TREE_READONLY (decl) = 1;\n+  if (ecf & ECF_NOTHROW)\n+    TREE_NOTHROW (decl) = 1;\n+\n+  alpha_builtins [(int) code] = decl;\n+}\n+\n /* Helper function of alpha_init_builtins.  Add the COUNT built-in\n    functions pointed to by P, with function type FTYPE.  */\n \n static void\n alpha_add_builtins (const struct alpha_builtin_def *p, size_t count,\n \t\t    tree ftype)\n {\n-  tree decl;\n   size_t i;\n \n   for (i = 0; i < count; ++i, ++p)\n     if ((target_flags & p->target_mask) == p->target_mask)\n-      {\n-\tdecl = add_builtin_function (p->name, ftype, p->code, BUILT_IN_MD,\n-\t\t\t\t     NULL, NULL);\n-\tif (p->is_const)\n-\t  TREE_READONLY (decl) = 1;\n-\tTREE_NOTHROW (decl) = 1;\n-      }\n+      alpha_builtin_function (p->name, ftype, p->code,\n+\t\t\t      (p->is_const ? ECF_CONST : 0) | ECF_NOTHROW);\n }\n \n-\n static void\n alpha_init_builtins (void)\n {\n   tree dimode_integer_type_node;\n-  tree ftype, decl;\n+  tree ftype;\n \n   dimode_integer_type_node = lang_hooks.types.type_for_mode (DImode, 0);\n \n@@ -6686,30 +6709,26 @@ alpha_init_builtins (void)\n \t\t      ftype);\n \n   ftype = build_function_type (ptr_type_node, void_list_node);\n-  decl = add_builtin_function (\"__builtin_thread_pointer\", ftype,\n-\t\t\t       ALPHA_BUILTIN_THREAD_POINTER, BUILT_IN_MD,\n-\t\t\t       NULL, NULL);\n-  TREE_NOTHROW (decl) = 1;\n+  alpha_builtin_function (\"__builtin_thread_pointer\", ftype,\n+\t\t\t  ALPHA_BUILTIN_THREAD_POINTER, ECF_NOTHROW);\n \n   ftype = build_function_type_list (void_type_node, ptr_type_node, NULL_TREE);\n-  decl = add_builtin_function (\"__builtin_set_thread_pointer\", ftype,\n-\t\t\t       ALPHA_BUILTIN_SET_THREAD_POINTER, BUILT_IN_MD,\n-\t\t\t       NULL, NULL);\n-  TREE_NOTHROW (decl) = 1;\n+  alpha_builtin_function (\"__builtin_set_thread_pointer\", ftype,\n+\t\t\t  ALPHA_BUILTIN_SET_THREAD_POINTER, ECF_NOTHROW);\n \n   if (TARGET_ABI_OPEN_VMS)\n     {\n       ftype = build_function_type_list (ptr_type_node, ptr_type_node,\n \t\t\t\t\tNULL_TREE);\n-      add_builtin_function (\"__builtin_establish_vms_condition_handler\", ftype,\n-\t\t\t    ALPHA_BUILTIN_ESTABLISH_VMS_CONDITION_HANDLER,\n-\t\t\t    BUILT_IN_MD, NULL, NULL_TREE);\n+      alpha_builtin_function (\"__builtin_establish_vms_condition_handler\",\n+\t\t\t      ftype,\n+\t\t\t      ALPHA_BUILTIN_ESTABLISH_VMS_CONDITION_HANDLER,\n+\t\t\t      0);\n \n       ftype = build_function_type_list (ptr_type_node, void_type_node,\n \t\t\t\t\tNULL_TREE);\n-      add_builtin_function (\"__builtin_revert_vms_condition_handler\", ftype,\n-\t\t\t    ALPHA_BUILTIN_REVERT_VMS_CONDITION_HANDLER,\n-\t\t\t     BUILT_IN_MD, NULL, NULL_TREE);\n+      alpha_builtin_function (\"__builtin_revert_vms_condition_handler\", ftype,\n+\t\t\t      ALPHA_BUILTIN_REVERT_VMS_CONDITION_HANDLER, 0);\n     }\n \n   alpha_v8qi_u = build_vector_type (unsigned_intQI_type_node, 8);\n@@ -11082,6 +11101,8 @@ alpha_init_libfuncs (void)\n #undef TARGET_HAVE_TLS\n #define TARGET_HAVE_TLS HAVE_AS_TLS\n \n+#undef  TARGET_BUILTIN_DECL\n+#define TARGET_BUILTIN_DECL  alpha_builtin_decl\n #undef  TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS alpha_init_builtins\n #undef  TARGET_EXPAND_BUILTIN"}]}