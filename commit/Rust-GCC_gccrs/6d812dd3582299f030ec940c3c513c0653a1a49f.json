{"sha": "6d812dd3582299f030ec940c3c513c0653a1a49f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ4MTJkZDM1ODIyOTlmMDMwZWM5NDBjM2M1MTNjMDY1M2ExYTQ5Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-06-22T04:36:55Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-06-22T04:36:55Z"}, "message": "* typeck.c (comp_except_specs): Fix ce_derived with noexcept.\n\nFrom-SVN: r161130", "tree": {"sha": "93a38e3444c2c25ffd26aa4f87c19fd13083885a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93a38e3444c2c25ffd26aa4f87c19fd13083885a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d812dd3582299f030ec940c3c513c0653a1a49f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d812dd3582299f030ec940c3c513c0653a1a49f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d812dd3582299f030ec940c3c513c0653a1a49f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d812dd3582299f030ec940c3c513c0653a1a49f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f94ae9875d386e651defd8f8c802cb41e77a6ba0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f94ae9875d386e651defd8f8c802cb41e77a6ba0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f94ae9875d386e651defd8f8c802cb41e77a6ba0"}], "stats": {"total": 112, "additions": 87, "deletions": 25}, "files": [{"sha": "5d36ad3c9778857722802ff4445245c2c84ebb5f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d812dd3582299f030ec940c3c513c0653a1a49f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d812dd3582299f030ec940c3c513c0653a1a49f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6d812dd3582299f030ec940c3c513c0653a1a49f", "patch": "@@ -1,5 +1,7 @@\n 2010-06-21  Jason Merrill  <jason@redhat.com>\n \n+\t* typeck.c (comp_except_specs): Fix ce_derived with noexcept.\n+\n \t* semantics.c (check_trait_type): Check COMPLETE_TYPE_P for array\n \telement type.\n "}, {"sha": "4383ef560a797b70019ad34fcf4fe3bc43a6e7ef", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d812dd3582299f030ec940c3c513c0653a1a49f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d812dd3582299f030ec940c3c513c0653a1a49f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=6d812dd3582299f030ec940c3c513c0653a1a49f", "patch": "@@ -993,35 +993,37 @@ comp_except_specs (const_tree t1, const_tree t2, int exact)\n   const_tree probe;\n   const_tree base;\n   int  length = 0;\n-  const_tree noexcept_spec = NULL_TREE;\n-  const_tree other_spec;\n \n   if (t1 == t2)\n     return true;\n \n-  /* First test noexcept compatibility.  */\n-  if (t1 && TREE_PURPOSE (t1))\n-    noexcept_spec = t1, other_spec = t2;\n-  else if (t2 && TREE_PURPOSE (t2))\n-    noexcept_spec = t2, other_spec = t1;\n-  if (noexcept_spec)\n-    {\n-      tree p = TREE_PURPOSE (noexcept_spec);\n-      /* Two noexcept-specs are equivalent iff their exprs are.  */\n-      if (other_spec && TREE_PURPOSE (other_spec))\n-\treturn cp_tree_equal (p, TREE_PURPOSE (other_spec));\n-      /* noexcept(true) is compatible with throw().  */\n-      else if (exact < ce_exact && p == boolean_true_node)\n-\treturn nothrow_spec_p (other_spec);\n-      /* noexcept(false) is compatible with any throwing\n-\t dynamic-exception-spec.  */\n-      else if (exact < ce_exact && p == boolean_false_node)\n-\treturn !nothrow_spec_p (other_spec);\n-      /* A dependent noexcept-spec is not compatible with any\n-\t dynamic-exception-spec.  */\n-      else\n-\treturn false;\n-    }\n+  /* First handle noexcept.  */\n+  if (exact < ce_exact)\n+    {\n+      /* noexcept(false) is compatible with any throwing dynamic-exc-spec\n+\t and stricter than any spec.  */\n+      if (t1 == noexcept_false_spec)\n+\treturn !nothrow_spec_p (t2) || exact == ce_derived;\n+      /* Even a derived noexcept(false) is compatible with a throwing\n+\t dynamic spec.  */\n+      if (t2 == noexcept_false_spec)\n+\treturn !nothrow_spec_p (t1);\n+\n+      /* Otherwise, if we aren't looking for an exact match, noexcept is\n+\t equivalent to throw().  */\n+      if (t1 == noexcept_true_spec)\n+\tt1 = empty_except_spec;\n+      if (t2 == noexcept_true_spec)\n+\tt2 = empty_except_spec;\n+    }\n+\n+  /* If any noexcept is left, it is only comparable to itself;\n+     either we're looking for an exact match or we're redeclaring a\n+     template with dependent noexcept.  */\n+  if ((t1 && TREE_PURPOSE (t1))\n+      || (t2 && TREE_PURPOSE (t2)))\n+    return (t1 && t2\n+\t    && cp_tree_equal (TREE_PURPOSE (t1), TREE_PURPOSE (t2)));\n \n   if (t1 == NULL_TREE)\t\t\t   /* T1 is ...  */\n     return t2 == NULL_TREE || exact == ce_derived;"}, {"sha": "54d13fd22c5845c1652d765366413ab58a9f9ce9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d812dd3582299f030ec940c3c513c0653a1a49f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d812dd3582299f030ec940c3c513c0653a1a49f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d812dd3582299f030ec940c3c513c0653a1a49f", "patch": "@@ -1,5 +1,7 @@\n 2010-06-21  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/noexcept08.C: New.\n+\n \t* g++.dg/ext/unary_trait_incomplete.C: Adjust.\n \n 2010-06-21  H.J. Lu  <hongjiu.lu@intel.com>"}, {"sha": "c45033246eba1238267a5ab662876396d7447d5b", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept08.C", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d812dd3582299f030ec940c3c513c0653a1a49f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept08.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d812dd3582299f030ec940c3c513c0653a1a49f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept08.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept08.C?ref=6d812dd3582299f030ec940c3c513c0653a1a49f", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-prune-output \"overriding\" }\n+\n+struct A\n+{\n+  virtual void f();\n+  virtual void g() throw();\n+  virtual void h() noexcept;\n+  virtual void i() noexcept(false);\n+  virtual void j() throw(int);\n+};\n+\n+struct B: A\n+{\n+  void f() noexcept;\n+  void g() noexcept;\n+  void h() noexcept;\n+  void i() noexcept;\n+  void j() noexcept;\n+};\n+\n+struct C: A\n+{\n+  void f() throw();\n+  void g() throw();\n+  void h() throw();\n+  void i() throw();\n+  void j() throw();\n+};\n+\n+struct D: A\n+{\n+  void f() noexcept(false);\n+  void g() noexcept(false);\t// { dg-error \"looser\" }\n+  void h() noexcept(false);\t// { dg-error \"looser\" }\n+  void i() noexcept(false);\n+  void j() noexcept(false);\t// compatible; treated as throw(int)\n+};\n+\n+struct E: A\n+{\n+  void f() throw(int);\n+  void g() throw(int);\t\t// { dg-error \"looser\" }\n+  void h() throw(int);\t\t// { dg-error \"looser\" }\n+  void i() throw(int);\n+  void j() throw(int);\n+};\n+\n+struct F: A\n+{\n+  void f();\n+  void g();\t\t\t// { dg-error \"looser\" }\n+  void h();\t\t\t// { dg-error \"looser\" }\n+  void i();\n+  void j();\t\t\t// { dg-error \"looser\" }\n+};"}]}