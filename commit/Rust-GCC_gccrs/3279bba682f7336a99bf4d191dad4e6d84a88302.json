{"sha": "3279bba682f7336a99bf4d191dad4e6d84a88302", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI3OWJiYTY4MmY3MzM2YTk5YmY0ZDE5MWRhZDRlNmQ4NGE4ODMwMg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-12-31T22:38:58Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-12-31T22:38:58Z"}, "message": "(do_spec_1): Propagate failure from recursive calls.\n\nFrom-SVN: r3033", "tree": {"sha": "cbee4c1977d7cb479766478518e81fe8923f7893", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbee4c1977d7cb479766478518e81fe8923f7893"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3279bba682f7336a99bf4d191dad4e6d84a88302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3279bba682f7336a99bf4d191dad4e6d84a88302", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3279bba682f7336a99bf4d191dad4e6d84a88302", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3279bba682f7336a99bf4d191dad4e6d84a88302/comments", "author": null, "committer": null, "parents": [{"sha": "7e1909ee7f0706d38eaba1a9f5d75cb06299239c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e1909ee7f0706d38eaba1a9f5d75cb06299239c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e1909ee7f0706d38eaba1a9f5d75cb06299239c"}], "stats": {"total": 61, "additions": 46, "deletions": 15}, "files": [{"sha": "7aaf1593d7fe7bc1db31bd9a9fbfcf9d5ac8e15c", "filename": "gcc/gcc.c", "status": "modified", "additions": 46, "deletions": 15, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3279bba682f7336a99bf4d191dad4e6d84a88302/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3279bba682f7336a99bf4d191dad4e6d84a88302/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=3279bba682f7336a99bf4d191dad4e6d84a88302", "patch": "@@ -2364,6 +2364,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n   register int c;\n   int i;\n   char *string;\n+  int value;\n \n   while (c = *p++)\n     /* If substituting a switch, treat all chars like letters.\n@@ -2407,7 +2408,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \n \tif (argbuf_index > 0)\n \t  {\n-\t    int value = execute ();\n+\t    value = execute ();\n \t    if (value)\n \t      return value;\n \t  }\n@@ -2730,39 +2731,57 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t       a certain constant string as a spec.  */\n \n \t  case '1':\n-\t    do_spec_1 (cc1_spec, 0, NULL_PTR);\n+\t    value = do_spec_1 (cc1_spec, 0, NULL_PTR);\n+\t    if (value != 0)\n+\t      return value;\n \t    break;\n \n \t  case '2':\n-\t    do_spec_1 (cc1plus_spec, 0, NULL_PTR);\n+\t    value = do_spec_1 (cc1plus_spec, 0, NULL_PTR);\n+\t    if (value != 0)\n+\t      return value;\n \t    break;\n \n \t  case 'a':\n-\t    do_spec_1 (asm_spec, 0, NULL_PTR);\n+\t    value = do_spec_1 (asm_spec, 0, NULL_PTR);\n+\t    if (value != 0)\n+\t      return value;\n \t    break;\n \n \t  case 'A':\n-\t    do_spec_1 (asm_final_spec, 0, NULL_PTR);\n+\t    value = do_spec_1 (asm_final_spec, 0, NULL_PTR);\n+\t    if (value != 0)\n+\t      return value;\n \t    break;\n \n \t  case 'c':\n-\t    do_spec_1 (signed_char_spec, 0, NULL_PTR);\n+\t    value = do_spec_1 (signed_char_spec, 0, NULL_PTR);\n+\t    if (value != 0)\n+\t      return value;\n \t    break;\n \n \t  case 'C':\n-\t    do_spec_1 (cpp_spec, 0, NULL_PTR);\n+\t    value = do_spec_1 (cpp_spec, 0, NULL_PTR);\n+\t    if (value != 0)\n+\t      return value;\n \t    break;\n \n \t  case 'E':\n-\t    do_spec_1 (endfile_spec, 0, NULL_PTR);\n+\t    value = do_spec_1 (endfile_spec, 0, NULL_PTR);\n+\t    if (value != 0)\n+\t      return value;\n \t    break;\n \n \t  case 'l':\n-\t    do_spec_1 (link_spec, 0, NULL_PTR);\n+\t    value = do_spec_1 (link_spec, 0, NULL_PTR);\n+\t    if (value != 0)\n+\t      return value;\n \t    break;\n \n \t  case 'L':\n-\t    do_spec_1 (lib_spec, 0, NULL_PTR);\n+\t    value = do_spec_1 (lib_spec, 0, NULL_PTR);\n+\t    if (value != 0)\n+\t      return value;\n \t    break;\n \n \t  case 'p':\n@@ -2789,7 +2808,9 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \n \t      *x = 0;\n \n-\t      do_spec_1 (buf, 0, NULL_PTR);\n+\t      value = do_spec_1 (buf, 0, NULL_PTR);\n+\t      if (value != 0)\n+\t\treturn value;\n \t    }\n \t    break;\n \n@@ -2895,12 +2916,16 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \n \t      *x = 0;\n \n-\t      do_spec_1 (buf, 0, NULL_PTR);\n+\t      value = do_spec_1 (buf, 0, NULL_PTR);\n+\t      if (value != 0)\n+\t\treturn value;\n \t    }\n \t    break;\n \n \t  case 'S':\n-\t    do_spec_1 (startfile_spec, 0, NULL_PTR);\n+\t    value = do_spec_1 (startfile_spec, 0, NULL_PTR);\n+\t    if (value != 0)\n+\t      return value;\n \t    break;\n \n \t    /* Here we define characters other than letters and digits.  */\n@@ -2948,7 +2973,11 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t      if (sl)\n \t\t{\n \t\t  if (c == '(')\n-\t\t    do_spec_1 (name, 0, NULL_PTR);\n+\t\t    {\n+\t\t      value = do_spec_1 (name, 0, NULL_PTR);\n+\t\t      if (value != 0)\n+\t\t\treturn value;\n+\t\t    }\n \t\t  else\n \t\t    {\n \t\t      char *x = (char *) alloca (strlen (name) * 2 + 1);\n@@ -2981,7 +3010,9 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t\t\t}\n \t\t      *x = 0;\n \n-\t\t      do_spec_1 (buf, 0, NULL_PTR);\n+\t\t      value = do_spec_1 (buf, 0, NULL_PTR);\n+\t\t      if (value != 0)\n+\t\t\treturn value;\n \t\t    }\n \t\t}\n "}]}