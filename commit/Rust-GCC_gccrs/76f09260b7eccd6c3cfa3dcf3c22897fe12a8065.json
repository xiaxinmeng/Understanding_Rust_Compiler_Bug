{"sha": "76f09260b7eccd6c3cfa3dcf3c22897fe12a8065", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZmMDkyNjBiN2VjY2Q2YzNjZmEzZGNmM2MyMjg5N2ZlMTJhODA2NQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-03-31T21:34:47Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-04-01T05:17:23Z"}, "message": "c++: Fix DMI with lambda 'this' capture [PR94205]\n\nWe represent 'this' in a default member initializer with a PLACEHOLDER_EXPR.\nNormally in constexpr evaluation when we encounter one it refers to\nctx->ctor, but when we're creating a temporary of class type, that replaces\nctx->ctor, so a PLACEHOLDER_EXPR that refers to the type of the member being\ninitialized needs to be replaced before that happens.\n\ngcc/cp/ChangeLog\n2020-03-31  Jason Merrill  <jason@redhat.com>\n\n\tPR c++/94205\n\t* constexpr.c (cxx_eval_constant_expression) [TARGET_EXPR]: Call\n\treplace_placeholders.\n\t* typeck2.c (store_init_value): Fix arguments to\n\tfold_non_dependent_expr.", "tree": {"sha": "d51c2df1204ac7e061b58945552282bbcb104167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d51c2df1204ac7e061b58945552282bbcb104167"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76f09260b7eccd6c3cfa3dcf3c22897fe12a8065", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76f09260b7eccd6c3cfa3dcf3c22897fe12a8065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76f09260b7eccd6c3cfa3dcf3c22897fe12a8065", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76f09260b7eccd6c3cfa3dcf3c22897fe12a8065/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "595f1b1274b1cb86c74c72b9cc297e6981fe4549", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/595f1b1274b1cb86c74c72b9cc297e6981fe4549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/595f1b1274b1cb86c74c72b9cc297e6981fe4549"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "3b522e8278c2a3e60de63eafa13048c2889a5f7e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f09260b7eccd6c3cfa3dcf3c22897fe12a8065/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f09260b7eccd6c3cfa3dcf3c22897fe12a8065/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=76f09260b7eccd6c3cfa3dcf3c22897fe12a8065", "patch": "@@ -1,3 +1,11 @@\n+2020-03-31  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/94205\n+\t* constexpr.c (cxx_eval_constant_expression) [TARGET_EXPR]: Call\n+\treplace_placeholders.\n+\t* typeck2.c (store_init_value): Fix arguments to\n+\tfold_non_dependent_expr.\n+\n 2020-03-31  Jason Merrill  <jason@redhat.com>\n \n \t* constexpr.c (cxx_eval_constant_expression) [TARGET_EXPR]: Use"}, {"sha": "91f0c3ba269ec1d1ee4600e2152f06143fac1f8e", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f09260b7eccd6c3cfa3dcf3c22897fe12a8065/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f09260b7eccd6c3cfa3dcf3c22897fe12a8065/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=76f09260b7eccd6c3cfa3dcf3c22897fe12a8065", "patch": "@@ -5553,6 +5553,12 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \ttree init = TARGET_EXPR_INITIAL (t);\n \tif ((AGGREGATE_TYPE_P (type) || VECTOR_TYPE_P (type)))\n \t  {\n+\t    if (ctx->object)\n+\t      /* If the initializer contains any PLACEHOLDER_EXPR, we need to\n+\t\t resolve them before we create a new CONSTRUCTOR for the\n+\t\t temporary.  */\n+\t      init = replace_placeholders (init, ctx->object);\n+\n \t    /* We're being expanded without an explicit target, so start\n \t       initializing a new object; expansion with an explicit target\n \t       strips the TARGET_EXPR before we get here.  */"}, {"sha": "5eb0dcd717addb77612a893a482860b3d2347495", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f09260b7eccd6c3cfa3dcf3c22897fe12a8065/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f09260b7eccd6c3cfa3dcf3c22897fe12a8065/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=76f09260b7eccd6c3cfa3dcf3c22897fe12a8065", "patch": "@@ -3239,7 +3239,7 @@ replace_placeholders_r (tree* t, int* walk_subtrees, void* data_)\n    a PLACEHOLDER_EXPR has been encountered.  */\n \n tree\n-replace_placeholders (tree exp, tree obj, bool *seen_p)\n+replace_placeholders (tree exp, tree obj, bool *seen_p /*= NULL*/)\n {\n   /* This is only relevant for C++14.  */\n   if (cxx_dialect < cxx14)"}, {"sha": "cf1cb5ace665be84c55ffdc8645de16484994824", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f09260b7eccd6c3cfa3dcf3c22897fe12a8065/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f09260b7eccd6c3cfa3dcf3c22897fe12a8065/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=76f09260b7eccd6c3cfa3dcf3c22897fe12a8065", "patch": "@@ -871,7 +871,7 @@ store_init_value (tree decl, tree init, vec<tree, va_gc>** cleanups, int flags)\n     {\n       bool const_init;\n       tree oldval = value;\n-      value = fold_non_dependent_expr (value);\n+      value = fold_non_dependent_expr (value, tf_warning_or_error, true, decl);\n       if (DECL_DECLARED_CONSTEXPR_P (decl)\n \t  || (DECL_IN_AGGR_P (decl)\n \t      && DECL_INITIALIZED_IN_CLASS_P (decl)))"}, {"sha": "c51f734a1346bb3078ae5229a669952bc544695c", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-nsdmi2.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f09260b7eccd6c3cfa3dcf3c22897fe12a8065/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-nsdmi2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f09260b7eccd6c3cfa3dcf3c22897fe12a8065/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-nsdmi2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-nsdmi2.C?ref=76f09260b7eccd6c3cfa3dcf3c22897fe12a8065", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/94205\n+// { dg-do compile { target c++14 } }\n+\n+struct S\n+{\n+  struct A\n+  {\n+    S *p;\n+    constexpr A(S* p): p(p) {}\n+    constexpr operator int() { p->i = 5; return 6; }\n+  };\n+  int i;\n+  int a = A(this);\n+};\n+\n+\n+constexpr S s = {};\n+\n+#define SA(X) static_assert((X),#X)\n+SA(s.i == 5 && s.a == 6);"}, {"sha": "5d96879149158708c49fc2e4ebb4681465781458", "filename": "gcc/testsuite/g++.dg/cpp1z/lambda-this4.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f09260b7eccd6c3cfa3dcf3c22897fe12a8065/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Flambda-this4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f09260b7eccd6c3cfa3dcf3c22897fe12a8065/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Flambda-this4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Flambda-this4.C?ref=76f09260b7eccd6c3cfa3dcf3c22897fe12a8065", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/94205\n+// { dg-do compile { target c++17 } }\n+\n+struct S\n+{\n+  int i;\n+  int a = [this] { this->i = 5; return 6; } ();\n+};\n+\n+\n+constexpr S s = {};\n+\n+static_assert (s.i == 5 && s.a == 6);"}]}