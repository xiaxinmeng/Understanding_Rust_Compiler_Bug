{"sha": "9c82d7b68ed064386dcfa78d8894c7fb39f4eddb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM4MmQ3YjY4ZWQwNjQzODZkY2ZhNzhkODg5NGM3ZmIzOWY0ZWRkYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-11T11:06:26Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-11T11:06:26Z"}, "message": "name-lookup.h (pop_binding): Rename to pop_local_binding.\n\n\t* name-lookup.h (pop_binding): Rename to pop_local_binding.\n\t(getdecls): Rename to get_local_decls.\n\t* name-lookup.c (pop_binding): Rename to ...\n\t(pop_local_binding): ... here.\n\t(pop_bindings_and_leave_scope): Adjust.\n\t(getdecls): Rename to ...\n\t(get_local_decls): ... here.  Assert local scope.\n\t* decl.c (poplevel): Assert not namespace.  Adjust and simplify\n\tlogic.\n\t(store_parm_decls): Adjust get_local_decls call.\n\t(parser.c (synthesize_implicit_template_parm): Likewise.\n\nFrom-SVN: r247901", "tree": {"sha": "209eb175f0e2550a51dc83c016a2ceaa4a44eab9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/209eb175f0e2550a51dc83c016a2ceaa4a44eab9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c82d7b68ed064386dcfa78d8894c7fb39f4eddb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c82d7b68ed064386dcfa78d8894c7fb39f4eddb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c82d7b68ed064386dcfa78d8894c7fb39f4eddb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c82d7b68ed064386dcfa78d8894c7fb39f4eddb/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "67ac9a9db1b63e93fcdc2d959325c984edd521b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67ac9a9db1b63e93fcdc2d959325c984edd521b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67ac9a9db1b63e93fcdc2d959325c984edd521b8"}], "stats": {"total": 80, "additions": 42, "deletions": 38}, "files": [{"sha": "78695f7cea143c434512342d8a6904f9d2baf8bb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c82d7b68ed064386dcfa78d8894c7fb39f4eddb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c82d7b68ed064386dcfa78d8894c7fb39f4eddb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9c82d7b68ed064386dcfa78d8894c7fb39f4eddb", "patch": "@@ -1,3 +1,17 @@\n+2017-05-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* name-lookup.h (pop_binding): Rename to pop_local_binding.\n+\t(getdecls): Rename to get_local_decls.\n+\t* name-lookup.c (pop_binding): Rename to ...\n+\t(pop_local_binding): ... here.\n+\t(pop_bindings_and_leave_scope): Adjust.\n+\t(getdecls): Rename to ...\n+\t(get_local_decls): ... here.  Assert local scope.\n+\t* decl.c (poplevel): Assert not namespace.  Adjust and simplify\n+\tlogic.\n+\t(store_parm_decls): Adjust get_local_decls call.\n+\t(parser.c (synthesize_implicit_template_parm): Likewise.\n+\n 2017-05-11  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR c++/80682"}, {"sha": "9e913f399d6ee9ec90ea9f363258454bb68a74bb", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c82d7b68ed064386dcfa78d8894c7fb39f4eddb/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c82d7b68ed064386dcfa78d8894c7fb39f4eddb/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9c82d7b68ed064386dcfa78d8894c7fb39f4eddb", "patch": "@@ -582,7 +582,8 @@ poplevel (int keep, int reverse, int functionbody)\n \n   block = NULL_TREE;\n \n-  gcc_assert (current_binding_level->kind != sk_class);\n+  gcc_assert (current_binding_level->kind != sk_class\n+\t      && current_binding_level->kind != sk_namespace);\n \n   if (current_binding_level->kind == sk_cleanup)\n     functionbody = 0;\n@@ -644,12 +645,13 @@ poplevel (int keep, int reverse, int functionbody)\n   if ((warn_unused_variable || warn_unused_but_set_variable)\n       && current_binding_level->kind != sk_template_parms\n       && !processing_template_decl)\n-    for (tree d = getdecls (); d; d = TREE_CHAIN (d))\n+    for (tree d = get_local_decls (); d; d = TREE_CHAIN (d))\n       {\n \t/* There are cases where D itself is a TREE_LIST.  See in\n \t   push_local_binding where the list of decls returned by\n \t   getdecls is built.  */\n \tdecl = TREE_CODE (d) == TREE_LIST ? TREE_VALUE (d) : d;\n+\n \ttree type = TREE_TYPE (decl);\n \tif (VAR_P (decl)\n \t    && (! TREE_USED (decl) || !DECL_READ_P (decl))\n@@ -680,14 +682,15 @@ poplevel (int keep, int reverse, int functionbody)\n   /* Remove declarations for all the DECLs in this level.  */\n   for (link = decls; link; link = TREE_CHAIN (link))\n     {\n-      if (leaving_for_scope && VAR_P (link)\n+      decl = TREE_CODE (link) == TREE_LIST ? TREE_VALUE (link) : link;\n+      tree name = DECL_NAME (OVL_CURRENT (decl));\n+\n+      if (leaving_for_scope && VAR_P (decl)\n \t  /* It's hard to make this ARM compatibility hack play nicely with\n \t     lambdas, and it really isn't necessary in C++11 mode.  */\n \t  && cxx_dialect < cxx11\n-\t  && DECL_NAME (link))\n+\t  && name)\n \t{\n-\t  tree name = DECL_NAME (link);\n-\n \t  cxx_binding *ob = outer_binding (name,\n \t\t\t\t\t   IDENTIFIER_BINDING (name),\n \t\t\t\t\t   /*class_p=*/true);\n@@ -703,7 +706,7 @@ poplevel (int keep, int reverse, int functionbody)\n \n \t       and we are leaving the `for' scope.  There's no reason to\n \t       keep the binding of the inner `i' in this case.  */\n-\t    pop_binding (name, link);\n+\t    ;\n \t  else if ((ob && (TREE_CODE (ob->value) == TYPE_DECL))\n \t\t   || (ns_binding && TREE_CODE (ns_binding) == TYPE_DECL))\n \t    /* Here, we have something like:\n@@ -716,7 +719,7 @@ poplevel (int keep, int reverse, int functionbody)\n \n \t       We must pop the for-scope binding so we know what's a\n \t       type and what isn't.  */\n-\t    pop_binding (name, link);\n+\t    ;\n \t  else\n \t    {\n \t      /* Mark this VAR_DECL as dead so that we can tell we left it\n@@ -742,32 +745,20 @@ poplevel (int keep, int reverse, int functionbody)\n \t\t its SCOPE since the scope is going away now.  */\n \t      IDENTIFIER_BINDING (name)->scope\n \t\t= current_binding_level->level_chain;\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  tree name;\n-\n-\t  /* Remove the binding.  */\n-\t  decl = link;\n \n-\t  if (TREE_CODE (decl) == TREE_LIST)\n-\t    decl = TREE_VALUE (decl);\n-\t  name = decl;\n-\n-\t  if (TREE_CODE (name) == OVERLOAD)\n-\t    name = OVL_FUNCTION (name);\n-\n-\t  gcc_assert (DECL_P (name));\n-\t  pop_binding (DECL_NAME (name), decl);\n+\t      /* Don't remove the binding. */\n+\t      name = NULL_TREE;\n+\t    }\n \t}\n+      /* Remove the binding.  */\n+      pop_local_binding (name, decl);\n     }\n \n   /* Remove declarations for any `for' variables from inner scopes\n      that we kept around.  */\n   FOR_EACH_VEC_SAFE_ELT_REVERSE (current_binding_level->dead_vars_from_for,\n \t\t\t         ix, decl)\n-    pop_binding (DECL_NAME (decl), decl);\n+    pop_local_binding (DECL_NAME (decl), decl);\n \n   /* Restore the IDENTIFIER_TYPE_VALUEs.  */\n   for (link = current_binding_level->type_shadowed;\n@@ -15231,7 +15222,7 @@ store_parm_decls (tree current_function_parms)\n       /* Get the decls in their original chain order and record in the\n \t function.  This is all and only the PARM_DECLs that were\n \t pushed into scope by the loop above.  */\n-      DECL_ARGUMENTS (fndecl) = getdecls ();\n+      DECL_ARGUMENTS (fndecl) = get_local_decls ();\n     }\n   else\n     DECL_ARGUMENTS (fndecl) = NULL_TREE;"}, {"sha": "041a5f6e7edadcd88ffebd78a6489c0edeaacd02", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c82d7b68ed064386dcfa78d8894c7fb39f4eddb/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c82d7b68ed064386dcfa78d8894c7fb39f4eddb/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=9c82d7b68ed064386dcfa78d8894c7fb39f4eddb", "patch": "@@ -936,7 +936,7 @@ push_binding (tree id, tree decl, cp_binding_level* level)\n    for ID.  */\n \n void\n-pop_binding (tree id, tree decl)\n+pop_local_binding (tree id, tree decl)\n {\n   cxx_binding *binding;\n \n@@ -979,8 +979,8 @@ pop_binding (tree id, tree decl)\n void\n pop_bindings_and_leave_scope (void)\n {\n-  for (tree t = getdecls (); t; t = DECL_CHAIN (t))\n-    pop_binding (DECL_NAME (t), t);\n+  for (tree t = get_local_decls (); t; t = DECL_CHAIN (t))\n+    pop_local_binding (DECL_NAME (t), t);\n   leave_scope ();\n }\n \n@@ -2367,14 +2367,13 @@ keep_next_level (bool keep)\n   keep_next_level_flag = keep;\n }\n \n-/* Return the list of declarations of the current level.\n-   Note that this list is in reverse order unless/until\n-   you nreverse it; and when you do nreverse it, you must\n-   store the result back using `storedecls' or you will lose.  */\n+/* Return the list of declarations of the current local scope.  */\n \n tree\n-getdecls (void)\n+get_local_decls (void)\n {\n+  gcc_assert (current_binding_level->kind != sk_namespace\n+\t      && current_binding_level->kind != sk_class);\n   return current_binding_level->names;\n }\n "}, {"sha": "97501966e77bcb67633b27af67d6542abb780b36", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c82d7b68ed064386dcfa78d8894c7fb39f4eddb/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c82d7b68ed064386dcfa78d8894c7fb39f4eddb/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=9c82d7b68ed064386dcfa78d8894c7fb39f4eddb", "patch": "@@ -89,7 +89,7 @@ struct GTY(()) cxx_saved_binding {\n extern tree identifier_type_value (tree);\n extern void set_identifier_type_value (tree, tree);\n extern void push_binding (tree, tree, cp_binding_level*);\n-extern void pop_binding (tree, tree);\n+extern void pop_local_binding (tree, tree);\n extern void pop_bindings_and_leave_scope (void);\n extern tree constructor_name (tree);\n extern bool constructor_name_p (tree, tree);\n@@ -324,7 +324,7 @@ extern void push_local_binding (tree, tree, int);\n extern bool pushdecl_class_level (tree);\n extern tree pushdecl_namespace_level (tree, bool);\n extern bool push_class_level_binding (tree, tree);\n-extern tree getdecls (void);\n+extern tree get_local_decls ();\n extern int function_parm_depth (void);\n extern tree cp_namespace_decls (tree);\n extern void set_decl_namespace (tree, tree, bool);"}, {"sha": "f82a90c43d2f58127507e69022d4662c8c667a1d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c82d7b68ed064386dcfa78d8894c7fb39f4eddb/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c82d7b68ed064386dcfa78d8894c7fb39f4eddb/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9c82d7b68ed064386dcfa78d8894c7fb39f4eddb", "patch": "@@ -38970,7 +38970,7 @@ synthesize_implicit_template_parm  (cp_parser *parser, tree constr)\n   else\n     parser->implicit_template_parms = new_parm;\n \n-  tree new_decl = getdecls ();\n+  tree new_decl = get_local_decls ();\n   if (non_type)\n     /* Return the TEMPLATE_PARM_INDEX, not the PARM_DECL.  */\n     new_decl = DECL_INITIAL (new_decl);"}]}