{"sha": "961e89f297ee15a1fa8ce510a98f34fc7062e52d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYxZTg5ZjI5N2VlMTVhMWZhOGNlNTEwYTk4ZjM0ZmM3MDYyZTUyZA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2014-04-04T21:58:34Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2014-04-04T21:58:34Z"}, "message": "builtin-bswap-6.c: Adjust return value to disable GCC optimization.\n\n2014-04-04  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* gcc.dg/builtin-bswap-6.c: Adjust return value to disable GCC\n\toptimization.\n\t* gcc.dg/builtin-bswap-7.c: Likewise.\n\nFrom-SVN: r209132", "tree": {"sha": "d313906c609b3accba15f2d13e13ccce8359ad21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d313906c609b3accba15f2d13e13ccce8359ad21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/961e89f297ee15a1fa8ce510a98f34fc7062e52d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/961e89f297ee15a1fa8ce510a98f34fc7062e52d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/961e89f297ee15a1fa8ce510a98f34fc7062e52d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/961e89f297ee15a1fa8ce510a98f34fc7062e52d/comments", "author": null, "committer": null, "parents": [{"sha": "090ec70209ce4d706bb618d5efbc1325ade0341f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/090ec70209ce4d706bb618d5efbc1325ade0341f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/090ec70209ce4d706bb618d5efbc1325ade0341f"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "7d030fd64a8913bba44da6604a2cb966527b47bf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/961e89f297ee15a1fa8ce510a98f34fc7062e52d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/961e89f297ee15a1fa8ce510a98f34fc7062e52d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=961e89f297ee15a1fa8ce510a98f34fc7062e52d", "patch": "@@ -1,3 +1,9 @@\n+2014-04-04  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* gcc.dg/builtin-bswap-6.c: Adjust return value to disable GCC\n+\toptimization.\n+\t* gcc.dg/builtin-bswap-7.c: Likewise.\n+\n 2014-04-04  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58207"}, {"sha": "6f0c782a85633c37e2c85f54bfc784f69a4dd0e9", "filename": "gcc/testsuite/gcc.dg/builtin-bswap-6.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/961e89f297ee15a1fa8ce510a98f34fc7062e52d/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/961e89f297ee15a1fa8ce510a98f34fc7062e52d/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-6.c?ref=961e89f297ee15a1fa8ce510a98f34fc7062e52d", "patch": "@@ -3,6 +3,10 @@\n /* { dg-options \"-O -fdump-rtl-combine\" } */\n /* { dg-options \"-O -fdump-rtl-combine -march=z900\" { target s390-*-* } } */\n \n+/* The test intentionally returns 1/2 instead of the obvious 0/1 to\n+   prevent GCC from calculating the return value with arithmetic\n+   instead of a comparison.  */\n+\n #include <stdint.h>\n \n #define BS(X) __builtin_bswap32(X)\n@@ -11,28 +15,28 @@ int foo1 (uint32_t a)\n {\n   if (BS (a) == 0xA0000)\n     return 1;\n-  return 0;\n+  return 2;\n }\n \n int foo2 (uint32_t a)\n {\n   if (BS (a) != 0xA0000)\n     return 1;\n-  return 0;\n+  return 2;\n }\n \n int foo3 (uint32_t a, uint32_t b)\n {\n   if (BS (a) == BS (b))\n     return 1;\n-  return 0;\n+  return 2;\n }\n \n int foo4 (uint32_t a, uint32_t b)\n {\n   if (BS (a) != BS (b))\n     return 1;\n-  return 0;\n+  return 2;\n }\n \n /* { dg-final { scan-rtl-dump-not \"bswapsi\" \"combine\" } } */"}, {"sha": "0eecdd8bea52ef67fbcb150f04cc828aca3a561a", "filename": "gcc/testsuite/gcc.dg/builtin-bswap-7.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/961e89f297ee15a1fa8ce510a98f34fc7062e52d/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/961e89f297ee15a1fa8ce510a98f34fc7062e52d/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-7.c?ref=961e89f297ee15a1fa8ce510a98f34fc7062e52d", "patch": "@@ -3,6 +3,10 @@\n /* { dg-require-effective-target lp64 } */\n /* { dg-options \"-O -fdump-rtl-combine\" } */\n \n+/* The test intentionally returns 1/2 instead of the obvious 0/1 to\n+   prevent GCC from calculating the return value with arithmetic\n+   instead of a comparison.  */\n+\n #include <stdint.h>\n \n #define BS(X) __builtin_bswap64(X)\n@@ -11,28 +15,28 @@ int foo1 (uint64_t a)\n {\n   if (BS (a) == 0xA00000000)\n     return 1;\n-  return 0;\n+  return 2;\n }\n \n int foo2 (uint64_t a)\n {\n   if (BS (a) != 0xA00000000)\n     return 1;\n-  return 0;\n+  return 2;\n }\n \n int foo3 (uint64_t a, uint64_t b)\n {\n   if (BS (a) == BS (b))\n     return 1;\n-  return 0;\n+  return 2;\n }\n \n int foo4 (uint64_t a, uint64_t b)\n {\n   if (BS (a) != BS (b))\n     return 1;\n-  return 0;\n+  return 2;\n }\n \n /* { dg-final { scan-rtl-dump-not \"bswapdi\" \"combine\" } } */"}]}