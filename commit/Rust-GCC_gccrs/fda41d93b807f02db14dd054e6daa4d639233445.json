{"sha": "fda41d93b807f02db14dd054e6daa4d639233445", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRhNDFkOTNiODA3ZjAyZGIxNGRkMDU0ZTZkYWE0ZDYzOTIzMzQ0NQ==", "commit": {"author": {"name": "Rask Ingemann Lambertsen", "email": "rask@sygehus.dk", "date": "2007-07-04T13:27:37Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2007-07-04T13:27:37Z"}, "message": "v850.c (expand_prologue): Make sure GEN_INT() argument is sign extended rather than zero extended.\n\n* config/gcc/v850/v850.c (expand_prologue): Make sure GEN_INT() argument is sign extended rather than zero extended.\n  (expand_epilogue): Likewise.\n  (output_move_double): Delete.\n* config/gcc/v850/v850-protos.h (output_move_double): Delete.\n* config/gcc/v850/v850.md (movdi): Delete.\n  (movdi_internal): Delete.\n  (movdf): Delete.\n  (movdf_internal): Delete.\n\nFrom-SVN: r126318", "tree": {"sha": "a971ddbdcf6eb8af8aed4bb12508aff76e98fae9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a971ddbdcf6eb8af8aed4bb12508aff76e98fae9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fda41d93b807f02db14dd054e6daa4d639233445", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fda41d93b807f02db14dd054e6daa4d639233445", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fda41d93b807f02db14dd054e6daa4d639233445", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fda41d93b807f02db14dd054e6daa4d639233445/comments", "author": null, "committer": null, "parents": [{"sha": "f0025c1ff517c6e041dfdf3b9d1afbd6bf8a9ff1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0025c1ff517c6e041dfdf3b9d1afbd6bf8a9ff1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0025c1ff517c6e041dfdf3b9d1afbd6bf8a9ff1"}], "stats": {"total": 162, "additions": 19, "deletions": 143}, "files": [{"sha": "39da2887dab53eb32d5aff14ae2982dd14c035fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda41d93b807f02db14dd054e6daa4d639233445/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda41d93b807f02db14dd054e6daa4d639233445/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fda41d93b807f02db14dd054e6daa4d639233445", "patch": "@@ -1,3 +1,15 @@\n+2007-07-04  Rask Ingemann Lambertsen  <rask@sygehus.dk>\n+\n+\t* config/gcc/v850/v850.c (expand_prologue): Make sure\n+\tGEN_INT() argument is sign extended rather than zero extended.\n+\t(expand_epilogue): Likewise.\n+\t(output_move_double): Delete.\n+\t* config/gcc/v850/v850-protos.h (output_move_double): Delete.\n+\t* config/gcc/v850/v850.md (movdi): Delete.\n+\t(*movdi_internal): Delete.\n+\t(movdf): Delete.\n+\t(*movdf_internal): Delete.\n+\n 2007-07-04  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config/sh/vxworks.h (SUBTARGET_OVERRIDE_OPTIONS): Reject -mrelax"}, {"sha": "f7d41f1f201536eb45b5dc2680ab106ec713627f", "filename": "gcc/config/v850/v850-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda41d93b807f02db14dd054e6daa4d639233445/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda41d93b807f02db14dd054e6daa4d639233445/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-protos.h?ref=fda41d93b807f02db14dd054e6daa4d639233445", "patch": "@@ -1,5 +1,6 @@\n /* Prototypes for v850.c functions used in the md file & elsewhere.\n-   Copyright (C) 1999, 2000, 2002, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2002, 2004, 2005, 2007\n+   Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -37,7 +38,6 @@ extern int    v850_output_addr_const_extra  (FILE *, rtx);\n extern rtx    v850_return_addr              (int);\n extern void   print_operand                 (FILE *, rtx, int );\n extern void   print_operand_address         (FILE *, rtx);\n-extern const char *output_move_double       (rtx *);\n extern const char *output_move_single       (rtx *);\n extern void   notice_update_cc              (rtx, rtx);\n extern char * construct_save_jarl           (rtx);"}, {"sha": "2db97b1859a16beeb6ebcbc783f7c939c1dc20e1", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 4, "deletions": 82, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda41d93b807f02db14dd054e6daa4d639233445/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda41d93b807f02db14dd054e6daa4d639233445/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=fda41d93b807f02db14dd054e6daa4d639233445", "patch": "@@ -938,84 +938,6 @@ output_move_single (rtx * operands)\n   return \"\";\n }\n \n-\f\n-/* Return appropriate code to load up an 8 byte integer or\n-   floating point value */\n-\n-const char *\n-output_move_double (rtx * operands)\n-{\n-  enum machine_mode mode = GET_MODE (operands[0]);\n-  rtx dst = operands[0];\n-  rtx src = operands[1];\n-\n-  if (register_operand (dst, mode)\n-      && register_operand (src, mode))\n-    {\n-      if (REGNO (src) + 1 == REGNO (dst))\n-\treturn \"mov %R1,%R0\\n\\tmov %1,%0\";\n-      else\n-\treturn \"mov %1,%0\\n\\tmov %R1,%R0\";\n-    }\n-\n-  /* Storing 0 */\n-  if (GET_CODE (dst) == MEM\n-      && ((GET_CODE (src) == CONST_INT && INTVAL (src) == 0)\n-\t  || (GET_CODE (src) == CONST_DOUBLE && CONST_DOUBLE_OK_FOR_G (src))))\n-    return \"st.w %.,%0\\n\\tst.w %.,%R0\";\n-\n-  if (GET_CODE (src) == CONST_INT || GET_CODE (src) == CONST_DOUBLE)\n-    {\n-      HOST_WIDE_INT high_low[2];\n-      int i;\n-      rtx xop[10];\n-\n-      if (GET_CODE (src) == CONST_DOUBLE)\n-\tconst_double_split (src, &high_low[1], &high_low[0]);\n-      else\n-\t{\n-\t  high_low[0] = INTVAL (src);\n-\t  high_low[1] = (INTVAL (src) >= 0) ? 0 : -1;\n-\t}\n-\n-      for (i = 0; i < 2; i++)\n-\t{\n-\t  xop[0] = gen_rtx_REG (SImode, REGNO (dst)+i);\n-\t  xop[1] = GEN_INT (high_low[i]);\n-\t  output_asm_insn (output_move_single (xop), xop);\n-\t}\n-\n-      return \"\";\n-    }\n-\n-  if (GET_CODE (src) == MEM)\n-    {\n-      int ptrreg = -1;\n-      int dreg = REGNO (dst);\n-      rtx inside = XEXP (src, 0);\n-\n-      if (GET_CODE (inside) == REG)\n- \tptrreg = REGNO (inside);\n-      else if (GET_CODE (inside) == SUBREG)\n-\tptrreg = subreg_regno (inside);\n-      else if (GET_CODE (inside) == PLUS)\n-\tptrreg = REGNO (XEXP (inside, 0));\n-      else if (GET_CODE (inside) == LO_SUM)\n-\tptrreg = REGNO (XEXP (inside, 0));\n-\n-      if (dreg == ptrreg)\n-\treturn \"ld.w %R1,%R0\\n\\tld.w %1,%0\";\n-    }\n-\n-  if (GET_CODE (src) == MEM)\n-    return \"ld.w %1,%0\\n\\tld.w %R1,%R0\";\n-  \n-  if (GET_CODE (dst) == MEM)\n-    return \"st.w %1,%0\\n\\tst.w %R1,%R0\";\n-\n-  return \"mov %1,%0\\n\\tmov %R1,%R0\";\n-}\n-\n \f\n /* Return maximum offset supported for a short EP memory reference of mode\n    MODE and signedness UNSIGNEDP.  */\n@@ -1746,7 +1668,7 @@ Saved %d bytes via prologue function (%d vs. %d) for function %s\\n\",\n \t  if (init_stack_alloc)\n \t    emit_insn (gen_addsi3 (stack_pointer_rtx,\n \t\t\t\t   stack_pointer_rtx,\n-\t\t\t\t   GEN_INT (-init_stack_alloc)));\n+\t\t\t\t   GEN_INT (- (signed) init_stack_alloc)));\n \t  \n \t  /* Save the return pointer first.  */\n \t  if (num_save > 0 && REGNO (save_regs[num_save-1]) == LINK_POINTER_REGNUM)\n@@ -1800,7 +1722,7 @@ expand_epilogue (void)\n   int offset;\n   unsigned int size = get_frame_size ();\n   long reg_saved = 0;\n-  unsigned int actual_fsize = compute_frame_size (size, &reg_saved);\n+  int actual_fsize = compute_frame_size (size, &reg_saved);\n   unsigned int init_stack_free = 0;\n   rtx restore_regs[32];\n   rtx restore_all;\n@@ -1844,7 +1766,7 @@ expand_epilogue (void)\n   \n   if (TARGET_PROLOG_FUNCTION\n       && num_restore > 0\n-      && actual_fsize >= default_stack\n+      && actual_fsize >= (signed) default_stack\n       && !interrupt_handler)\n     {\n       int alloc_stack = (4 * num_restore) + default_stack;\n@@ -1933,7 +1855,7 @@ Saved %d bytes via epilogue function (%d vs. %d) in function %s\\n\",\n       if (actual_fsize && !CONST_OK_FOR_K (-actual_fsize))\n \tinit_stack_free = 4 * num_restore;\n       else\n-\tinit_stack_free = actual_fsize;\n+\tinit_stack_free = (signed) actual_fsize;\n \n       /* Deallocate the rest of the stack if it is > 32K.  */\n       if (actual_fsize > init_stack_free)"}, {"sha": "122ca212ec0db9d4ec26ab6a88e5fd6e75c4f5bd", "filename": "gcc/config/v850/v850.md", "status": "modified", "additions": 1, "deletions": 59, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda41d93b807f02db14dd054e6daa4d639233445/gcc%2Fconfig%2Fv850%2Fv850.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda41d93b807f02db14dd054e6daa4d639233445/gcc%2Fconfig%2Fv850%2Fv850.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.md?ref=fda41d93b807f02db14dd054e6daa4d639233445", "patch": "@@ -1,5 +1,5 @@\n ;; GCC machine description for NEC V850\n-;; Copyright (C) 1996, 1997, 1998, 1999, 2002, 2004, 2005\n+;; Copyright (C) 1996, 1997, 1998, 1999, 2002, 2004, 2005, 2007\n ;; Free Software Foundation, Inc.\n ;; Contributed by Jeff Law (law@cygnus.com).\n \n@@ -212,42 +212,6 @@\n    (set_attr \"cc\" \"none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit\")\n    (set_attr \"type\" \"other,other,other,load,other,load,other,other,other\")])\n \n-\n-\n-(define_expand \"movdi\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"\")\n-\t(match_operand:DI 1 \"general_operand\" \"\"))]\n-  \"\"\n-  \"\n-{\n-  /* One of the ops has to be in a register or 0 */\n-  if (!register_operand (operand0, DImode)\n-      && !reg_or_0_operand (operand1, DImode))\n-    operands[1] = copy_to_mode_reg (DImode, operand1);\n-}\")\n-\n-(define_insn \"*movdi_internal\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"=r,r,r,r,r,m,m,r\")\n-\t(match_operand:DI 1 \"general_operand\" \"Jr,K,L,i,m,r,IG,iF\"))]\n-  \"register_operand (operands[0], DImode)\n-   || reg_or_0_operand (operands[1], DImode)\"\n-  \"* return output_move_double (operands);\"\n-  [(set_attr \"length\" \"4,8,8,16,8,8,8,16\")\n-   (set_attr \"cc\" \"none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit\")\n-   (set_attr \"type\" \"other,other,other,other,load,other,other,other\")])\n-\n-(define_expand \"movsf\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"\")\n-\t(match_operand:SF 1 \"general_operand\" \"\"))]\n-  \"\"\n-  \"\n-{\n-  /* One of the ops has to be in a register or 0 */\n-  if (!register_operand (operand0, SFmode)\n-      && !reg_or_0_operand (operand1, SFmode))\n-    operands[1] = copy_to_mode_reg (SFmode, operand1);\n-}\")\n-\n (define_insn \"*movsf_internal\"\n   [(set (match_operand:SF 0 \"general_operand\" \"=r,r,r,r,r,Q,r,m,m,r\")\n \t(match_operand:SF 1 \"general_operand\" \"Jr,K,L,n,Q,Ir,m,r,IG,iF\"))]\n@@ -258,28 +222,6 @@\n    (set_attr \"cc\" \"none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit\")\n    (set_attr \"type\" \"other,other,other,other,load,other,load,other,other,other\")])\n \n-(define_expand \"movdf\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"\")\n-\t(match_operand:DF 1 \"general_operand\" \"\"))]\n-  \"\"\n-  \"\n-{\n-  /* One of the ops has to be in a register or 0 */\n-  if (!register_operand (operand0, DFmode)\n-      && !reg_or_0_operand (operand1, DFmode))\n-    operands[1] = copy_to_mode_reg (DFmode, operand1);\n-}\")\n-\n-(define_insn \"*movdf_internal\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=r,r,r,r,r,m,m,r\")\n-\t(match_operand:DF 1 \"general_operand\" \"Jr,K,L,i,m,r,IG,iF\"))]\n-  \"register_operand (operands[0], DFmode)\n-   || reg_or_0_operand (operands[1], DFmode)\"\n-  \"* return output_move_double (operands);\"\n-  [(set_attr \"length\" \"4,8,8,16,8,8,8,16\")\n-   (set_attr \"cc\" \"none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit\")\n-   (set_attr \"type\" \"other,other,other,other,load,other,other,other\")])\n-\n \f\n ;; ----------------------------------------------------------------------\n ;; TEST INSTRUCTIONS"}]}