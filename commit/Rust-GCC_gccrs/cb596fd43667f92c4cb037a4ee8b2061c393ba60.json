{"sha": "cb596fd43667f92c4cb037a4ee8b2061c393ba60", "node_id": "C_kwDOANBUbNoAKGNiNTk2ZmQ0MzY2N2Y5MmM0Y2IwMzdhNGVlOGIyMDYxYzM5M2JhNjA", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-10-28T17:31:17Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-10-29T14:31:56Z"}, "message": "Perform on-entry propagation after range_of_stmt on a gcond.\n\nPropagation is automatically done by the temporal cache when defs are\nout of date from the names on the RHS, but a gcond has no LHS, and any\nupdates on the RHS are never propagated.  Always propagate them.\n\n\tgcc/\n\tPR tree-optimization/102983\n\t* gimple-range-cache.h (propagate_updated_value): Make public.\n\t* gimple-range.cc (gimple_ranger::range_of_stmt): Propagate exports\n\twhen processing gcond stmts.\n\n\tgcc/testsuite/\n\t* gcc.dg/pr102983.c: New.", "tree": {"sha": "77c58262cba2b191ffba14ee461ab4aee6a401a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77c58262cba2b191ffba14ee461ab4aee6a401a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb596fd43667f92c4cb037a4ee8b2061c393ba60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb596fd43667f92c4cb037a4ee8b2061c393ba60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb596fd43667f92c4cb037a4ee8b2061c393ba60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb596fd43667f92c4cb037a4ee8b2061c393ba60/comments", "author": null, "committer": null, "parents": [{"sha": "b8ef019ab938471f7f877a1eee3a6374fd8a6ae9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8ef019ab938471f7f877a1eee3a6374fd8a6ae9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8ef019ab938471f7f877a1eee3a6374fd8a6ae9"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "75105008338552b3328a32fb2e52525b394dcbd1", "filename": "gcc/gimple-range-cache.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb596fd43667f92c4cb037a4ee8b2061c393ba60/gcc%2Fgimple-range-cache.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb596fd43667f92c4cb037a4ee8b2061c393ba60/gcc%2Fgimple-range-cache.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.h?ref=cb596fd43667f92c4cb037a4ee8b2061c393ba60", "patch": "@@ -103,6 +103,8 @@ class ranger_cache : public range_query\n   bool get_non_stale_global_range (irange &r, tree name);\n   void set_global_range (tree name, const irange &r);\n \n+  void propagate_updated_value (tree name, basic_block bb);\n+\n   non_null_ref m_non_null;\n   gori_compute m_gori;\n \n@@ -120,8 +122,6 @@ class ranger_cache : public range_query\n   void entry_range (irange &r, tree expr, basic_block bb);\n   void exit_range (irange &r, tree expr, basic_block bb);\n \n-  void propagate_updated_value (tree name, basic_block bb);\n-\n   bitmap m_propfail;\n   vec<basic_block> m_workback;\n   vec<basic_block> m_update_list;"}, {"sha": "2c9715a6f2c1072611660ec4b1cd719344b17670", "filename": "gcc/gimple-range.cc", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb596fd43667f92c4cb037a4ee8b2061c393ba60/gcc%2Fgimple-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb596fd43667f92c4cb037a4ee8b2061c393ba60/gcc%2Fgimple-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.cc?ref=cb596fd43667f92c4cb037a4ee8b2061c393ba60", "patch": "@@ -256,7 +256,17 @@ gimple_ranger::range_of_stmt (irange &r, gimple *s, tree name)\n \n   // If no name, simply call the base routine.\n   if (!name)\n-    res = fold_range_internal (r, s, NULL_TREE);\n+    {\n+      res = fold_range_internal (r, s, NULL_TREE);\n+      if (res && is_a <gcond *> (s))\n+\t{\n+\t  // Update any exports in the cache if this is a gimple cond statement.\n+\t  tree exp;\n+\t  basic_block bb = gimple_bb (s);\n+\t  FOR_EACH_GORI_EXPORT_NAME (m_cache.m_gori, bb, exp)\n+\t    m_cache.propagate_updated_value (exp, bb);\n+\t}\n+    }\n   else if (!gimple_range_ssa_p (name))\n     res = get_tree_range (r, name, NULL);\n   // Check if the stmt has already been processed, and is not stale."}, {"sha": "ef58af6def08df562fa27ba1f135f675ec01e23e", "filename": "gcc/testsuite/gcc.dg/pr102983.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb596fd43667f92c4cb037a4ee8b2061c393ba60/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102983.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb596fd43667f92c4cb037a4ee8b2061c393ba60/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102983.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102983.c?ref=cb596fd43667f92c4cb037a4ee8b2061c393ba60", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-evrp\" } */\n+void foo(void);\n+\n+static int a = 1;\n+\n+int main() {\n+  int c = 0;\n+  for (int b = 0; b <= 0; b++) {\n+    if (!a)\n+      foo();\n+    if (b > c){\n+      if (c)\n+        continue;\n+      a = 0;\n+    }\n+    c = 1;\n+  }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Folding predicate c_.* to 1\" 1 \"evrp\" } } */"}]}