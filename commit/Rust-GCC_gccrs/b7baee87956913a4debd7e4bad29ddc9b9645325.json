{"sha": "b7baee87956913a4debd7e4bad29ddc9b9645325", "node_id": "C_kwDOANBUbNoAKGI3YmFlZTg3OTU2OTEzYTRkZWJkN2U0YmFkMjlkZGM5Yjk2NDUzMjU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-17T12:47:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-17T12:47:18Z"}, "message": "Merge #1037\n\n1037: Support placeholders becoming slices r=philberty a=philberty\n\nWhen we setup trait-impls the type-alias are allowed to become any type\r\nthis interface was missing a visitor. We also need to support constraining\r\ntype-parameters behind slices.\r\n\r\nThe get_root interface is currently unsafe, it needs a flag for allowing\r\nunsized and for keeping a map of adjustments along the way. This will\r\nbe added down the line when we support unsized method resolution.\r\n\r\nFixes #1034\r\nAddresses #849 \n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "63a37bbdbd7781e6248446bb24cf79083bed16d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63a37bbdbd7781e6248446bb24cf79083bed16d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7baee87956913a4debd7e4bad29ddc9b9645325", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiMy3WCRBK7hj4Ov3rIwAAfS8IAF8b75xBM6MhG9WJzL9uI+Gr\nG0n1Equtlz9UBqR6g80lmUcEQfTB4V7Ixh20MfDDOw6uG5D++1CyAlZZrBfbSVsR\n15UiI0rU1DZVOeBHI8JSLNN/roH/pg3zDE8ffVpFXeXQLOaK5dtY0BPATTrEQaDa\nctwv8XdJRjyq6Nf9PwczF+sPd9NvXCQf9H4PDW2M1tM0OvijeZ09S8L7m8Ng+u0i\nEtyIqoWk8CZYjULQHSzJtKyICdZEcngIrTG1/qt26JrWwfGardFcZC1ZGYVr2yDA\nAQkzWtIpiUlTevzZwqXQqtMEjrzxJD4wK4jRuJNqo6WaAhQrcwAr7bdZMvL/aG8=\n=QkNE\n-----END PGP SIGNATURE-----\n", "payload": "tree 63a37bbdbd7781e6248446bb24cf79083bed16d5\nparent e48bce446cc7ee4f1fb6980209720582def6e4e0\nparent f6c86fc8cdea9db5259ae67a62618b13a57ea9a1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1647521238 +0000\ncommitter GitHub <noreply@github.com> 1647521238 +0000\n\nMerge #1037\n\n1037: Support placeholders becoming slices r=philberty a=philberty\n\nWhen we setup trait-impls the type-alias are allowed to become any type\r\nthis interface was missing a visitor. We also need to support constraining\r\ntype-parameters behind slices.\r\n\r\nThe get_root interface is currently unsafe, it needs a flag for allowing\r\nunsized and for keeping a map of adjustments along the way. This will\r\nbe added down the line when we support unsized method resolution.\r\n\r\nFixes #1034\r\nAddresses #849 \n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7baee87956913a4debd7e4bad29ddc9b9645325", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7baee87956913a4debd7e4bad29ddc9b9645325", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7baee87956913a4debd7e4bad29ddc9b9645325/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e48bce446cc7ee4f1fb6980209720582def6e4e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e48bce446cc7ee4f1fb6980209720582def6e4e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e48bce446cc7ee4f1fb6980209720582def6e4e0"}, {"sha": "f6c86fc8cdea9db5259ae67a62618b13a57ea9a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6c86fc8cdea9db5259ae67a62618b13a57ea9a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6c86fc8cdea9db5259ae67a62618b13a57ea9a1"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "1b14693aa8d1732409d63345430136e4a79403dc", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7baee87956913a4debd7e4bad29ddc9b9645325/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7baee87956913a4debd7e4bad29ddc9b9645325/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=b7baee87956913a4debd7e4bad29ddc9b9645325", "patch": "@@ -258,7 +258,6 @@ class TypeCheckExpr : public TypeCheckBase\n     // Get the adjusted self\n     Adjuster adj (receiver_tyty);\n     TyTy::BaseType *adjusted_self = adj.adjust_type (candidate.adjustments);\n-    adjusted_self->debug ();\n \n     // store the adjustments for code-generation to know what to do\n     context->insert_autoderef_mappings (expr.get_mappings ().get_hirid (),"}, {"sha": "f1b5e35450e362707463de7fe1074311d594644d", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7baee87956913a4debd7e4bad29ddc9b9645325/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7baee87956913a4debd7e4bad29ddc9b9645325/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=b7baee87956913a4debd7e4bad29ddc9b9645325", "patch": "@@ -440,8 +440,6 @@ class TypeCheckImplItemWithTrait : public TypeCheckImplItem\n \n   void visit (HIR::TypeAlias &type) override\n   {\n-    // resolved_trait_item = trait_reference.lookup_trait_item (\n-    //   type.get_new_type_name (), TraitItemReference::TraitItemType::TYPE);\n     trait_reference.lookup_trait_item_by_type (\n       type.get_new_type_name (), TraitItemReference::TraitItemType::TYPE,\n       &resolved_trait_item);"}, {"sha": "afc928da110f963423670d38e8129184d96ad20f", "filename": "gcc/rust/typecheck/rust-tyty-cmp.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7baee87956913a4debd7e4bad29ddc9b9645325/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7baee87956913a4debd7e4bad29ddc9b9645325/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h?ref=b7baee87956913a4debd7e4bad29ddc9b9645325", "patch": "@@ -1444,6 +1444,8 @@ class PlaceholderCmp : public BaseCmp\n \n   void visit (const NeverType &) override { ok = true; }\n \n+  void visit (const SliceType &) override { ok = true; }\n+\n   void visit (const PlaceholderType &type) override\n   {\n     ok = base->get_symbol ().compare (type.get_symbol ()) == 0;"}, {"sha": "1d197f5a8459a7813d02a85020755aa680c6fb0e", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7baee87956913a4debd7e4bad29ddc9b9645325/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7baee87956913a4debd7e4bad29ddc9b9645325/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=b7baee87956913a4debd7e4bad29ddc9b9645325", "patch": "@@ -201,6 +201,7 @@ BaseType::inherit_bounds (\n const BaseType *\n BaseType::get_root () const\n {\n+  // FIXME this needs to be it its own visitor class with a vector adjustments\n   const TyTy::BaseType *root = this;\n   if (get_kind () == TyTy::REF)\n     {\n@@ -212,6 +213,19 @@ BaseType::get_root () const\n       const PointerType *r = static_cast<const PointerType *> (root);\n       root = r->get_base ()->get_root ();\n     }\n+\n+  // these are an unsize\n+  else if (get_kind () == TyTy::SLICE)\n+    {\n+      const SliceType *r = static_cast<const SliceType *> (root);\n+      root = r->get_element_type ()->get_root ();\n+    }\n+  // else if (get_kind () == TyTy::ARRAY)\n+  //   {\n+  //     const ArrayType *r = static_cast<const ArrayType *> (root);\n+  //     root = r->get_element_type ()->get_root ();\n+  //   }\n+\n   return root;\n }\n "}, {"sha": "23d7700545244221232ed6560da7107fe82cba68", "filename": "gcc/testsuite/rust/compile/issue-1034.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7baee87956913a4debd7e4bad29ddc9b9645325/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1034.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7baee87956913a4debd7e4bad29ddc9b9645325/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1034.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1034.rs?ref=b7baee87956913a4debd7e4bad29ddc9b9645325", "patch": "@@ -0,0 +1,16 @@\n+trait Foo<T> {\n+    type Output;\n+\n+    fn test(self, slice: &T) -> &Self::Output;\n+}\n+\n+struct Bar<T>(T);\n+// { dg-warning \"struct is never constructed\" \"\" { target *-*-* } .-1 }\n+\n+impl<T> Foo<[T]> for Bar<usize> {\n+    type Output = [T];\n+\n+    fn test(self, slice: &[T]) -> &[T] {\n+        slice\n+    }\n+}"}]}