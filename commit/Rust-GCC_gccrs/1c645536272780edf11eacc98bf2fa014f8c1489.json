{"sha": "1c645536272780edf11eacc98bf2fa014f8c1489", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM2NDU1MzYyNzI3ODBlZGYxMWVhY2M5OGJmMmZhMDE0ZjhjMTQ4OQ==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2015-12-29T13:20:37Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2015-12-29T13:20:37Z"}, "message": "re PR fortran/69011 ([OOP] ICE in gfc_advance_chain for ALLOCATE with SOURCE)\n\ngcc/testsuite/ChangeLog:\n\n2015-12-29  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/69011\n\t* gfortran.dg/allocate_with_source_16.f90: New test.\n\n\ngcc/fortran/ChangeLog:\n\n2015-12-29  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/69011\n\t* trans-stmt.c (gfc_trans_allocate): Unwrap a NOP_EXPR to make sure\n\tthe actual type of the source=-expr is used when it is of class type.\n\tFurthermore prevent an ICE.\n\nFrom-SVN: r231992", "tree": {"sha": "5b56e6b444300ad8bd312805de4757146582d64c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b56e6b444300ad8bd312805de4757146582d64c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c645536272780edf11eacc98bf2fa014f8c1489", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c645536272780edf11eacc98bf2fa014f8c1489", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c645536272780edf11eacc98bf2fa014f8c1489", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c645536272780edf11eacc98bf2fa014f8c1489/comments", "author": null, "committer": null, "parents": [{"sha": "0bf0df50e5a18e7b707ba0091cb86e1bd388d4b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bf0df50e5a18e7b707ba0091cb86e1bd388d4b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bf0df50e5a18e7b707ba0091cb86e1bd388d4b3"}], "stats": {"total": 104, "additions": 102, "deletions": 2}, "files": [{"sha": "668a04302dbb1a8872cc78b6a758f7b5b06815f5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c645536272780edf11eacc98bf2fa014f8c1489/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c645536272780edf11eacc98bf2fa014f8c1489/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1c645536272780edf11eacc98bf2fa014f8c1489", "patch": "@@ -1,3 +1,10 @@\n+2015-12-29  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/69011\n+\t* trans-stmt.c (gfc_trans_allocate): Unwrap a NOP_EXPR to make sure\n+\tthe actual type of the source=-expr is used when it is of class type.\n+\tFurthermore prevent an ICE.\n+\n 2015-12-18  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/68196"}, {"sha": "3c6fae1e9a554dd386978b8b4b0d01be824b0646", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c645536272780edf11eacc98bf2fa014f8c1489/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c645536272780edf11eacc98bf2fa014f8c1489/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=1c645536272780edf11eacc98bf2fa014f8c1489", "patch": "@@ -5377,7 +5377,20 @@ gfc_trans_allocate (gfc_code * code)\n \t      if (code->ext.alloc.arr_spec_from_expr3 || code->expr3->rank != 0)\n \t\tgfc_conv_expr_descriptor (&se, code->expr3);\n \t      else\n-\t\tgfc_conv_expr_reference (&se, code->expr3);\n+\t\t{\n+\t\t  gfc_conv_expr_reference (&se, code->expr3);\n+\n+\t\t  /* gfc_conv_expr_reference wraps POINTER_PLUS_EXPR in a\n+\t\t     NOP_EXPR, which prevents gfortran from getting the vptr\n+\t\t     from the source=-expression.  Remove the NOP_EXPR and go\n+\t\t     with the POINTER_PLUS_EXPR in this case.  */\n+\t\t  if (code->expr3->ts.type == BT_CLASS\n+\t\t      && TREE_CODE (se.expr) == NOP_EXPR\n+\t\t      && TREE_CODE (TREE_OPERAND (se.expr, 0))\n+\t\t\t\t\t\t\t   == POINTER_PLUS_EXPR)\n+\t\t      //&& ! GFC_CLASS_TYPE_P (TREE_TYPE (se.expr)))\n+\t\t    se.expr = TREE_OPERAND (se.expr, 0);\n+\t\t}\n \t      /* Create a temp variable only for component refs to prevent\n \t\t having to go through the full deref-chain each time and to\n \t\t simplfy computation of array properties.  */\n@@ -5494,7 +5507,6 @@ gfc_trans_allocate (gfc_code * code)\n \t     expr3 may be a temporary array declaration, therefore check for\n \t     GFC_CLASS_TYPE_P before trying to get the _vptr component.  */\n \t  if (tmp != NULL_TREE\n-\t      && TREE_CODE (tmp) != POINTER_PLUS_EXPR\n \t      && (e3_is == E3_DESC\n \t\t  || (GFC_CLASS_TYPE_P (TREE_TYPE (tmp))\n \t\t      && (VAR_P (tmp) || !code->expr3->ref))"}, {"sha": "65ec5c55da43ee2308fa2c0e7cf26040c03ff816", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c645536272780edf11eacc98bf2fa014f8c1489/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c645536272780edf11eacc98bf2fa014f8c1489/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c645536272780edf11eacc98bf2fa014f8c1489", "patch": "@@ -1,3 +1,8 @@\n+2015-12-29  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/69011\n+\t* gfortran.dg/allocate_with_source_16.f90: New test.\n+\n 2015-12-28  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/*.c: Remove extra braces from target selectors."}, {"sha": "cb5f16f2745dd936f23b0cdc44c10658041d05e9", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_16.f90", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c645536272780edf11eacc98bf2fa014f8c1489/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c645536272780edf11eacc98bf2fa014f8c1489/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_16.f90?ref=1c645536272780edf11eacc98bf2fa014f8c1489", "patch": "@@ -0,0 +1,76 @@\n+! { dg-do run }\n+! Test the fix for pr69011, preventing an ICE and making sure\n+! that the correct dynamic type is used.\n+!\n+! Contributed by Thomas Koenig  <tkoenig@gcc.gnu.org>\n+!                Andre Vehreschild  <vehre@gcc.gnu.org>\n+!\n+ \n+module m1\n+implicit none\n+private\n+public :: basetype\n+\n+type:: basetype\n+  integer :: i\n+  contains\n+endtype basetype\n+\n+abstract interface\n+endinterface\n+\n+endmodule m1\n+\n+module m2\n+use m1, only : basetype\n+implicit none\n+integer, parameter :: I_P = 4\n+\n+private\n+public :: factory, exttype\n+\n+type, extends(basetype) :: exttype\n+  integer :: i2\n+  contains\n+endtype exttype\n+\n+type :: factory\n+  integer(I_P) :: steps=-1 \n+  contains\n+    procedure, pass(self), public :: construct\n+endtype factory\n+contains\n+\n+  function construct(self, previous)\n+  class(basetype), intent(INOUT) :: previous(1:)\n+  class(factory), intent(IN) :: self\n+  class(basetype), pointer :: construct\n+  allocate(construct, source=previous(self%steps))\n+  endfunction construct\n+endmodule m2\n+\n+  use m2\n+  use m1\n+  class(factory), allocatable :: c1\n+  class(exttype), allocatable :: prev(:)\n+  class(basetype), pointer :: d\n+\n+  allocate(c1)\n+  allocate(prev(2))\n+  prev(:)%i = [ 2, 3]\n+  prev(:)%i2 = [ 5, 6]\n+  c1%steps= 1\n+  d=> c1%construct(prev)\n+\n+  if (.not. associated(d) ) call abort()\n+  select type (d)\n+    class is (exttype)\n+      if (d%i2 /= 5) call abort()\n+    class default\n+      call abort()\n+  end select \n+  if (d%i /= 2) call abort()\n+  deallocate(c1)\n+  deallocate(prev)\n+  deallocate(d)\n+end"}]}