{"sha": "1305135257484958d6c75e6d4a05a3de2541f287", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMwNTEzNTI1NzQ4NDk1OGQ2Yzc1ZTZkNGEwNWEzZGUyNTQxZjI4Nw==", "commit": {"author": {"name": "Fritz Reese", "email": "fritzoreese@gmail.com", "date": "2017-11-11T00:47:53Z"}, "committer": {"name": "Fritz Reese", "email": "foreese@gcc.gnu.org", "date": "2017-11-11T00:47:53Z"}, "message": "re PR fortran/82886 (ICE with -finit-derived in gfc_conv_expr, at fortran/trans-expr.c:7807)\n\n2017-11-10  Fritz Reese <fritzoreese@gmail.com>\n\n    PR fortran/82886\n\n    gcc/fortran/ChangeLog:\n\n\tPR fortran/82886\n\t* gfortran.h (gfc_build_init_expr): New prototype.\n\t* invoke.texi (finit-derived): Update documentation.\n\t* expr.c (gfc_build_init_expr): New, from gfc_build_default_init_expr.\n\t(gfc_build_default_init_expr): Redirect to gfc_build_init_expr(,,false)\n\t(component_initializer): Force building initializers using\n\tgfc_build_init_expr(,,true).\n\n    gcc/testsuite/ChangeLog:\n\n\tPR fortran/82886\n\t* gfortran.dg/init_flag_16.f03: New testcase.\n\nFrom-SVN: r254648", "tree": {"sha": "24d67784c3f642e15609c713623204c17320ea25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24d67784c3f642e15609c713623204c17320ea25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1305135257484958d6c75e6d4a05a3de2541f287", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1305135257484958d6c75e6d4a05a3de2541f287", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1305135257484958d6c75e6d4a05a3de2541f287", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1305135257484958d6c75e6d4a05a3de2541f287/comments", "author": {"login": "fritzr", "id": 2230564, "node_id": "MDQ6VXNlcjIyMzA1NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2230564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzr", "html_url": "https://github.com/fritzr", "followers_url": "https://api.github.com/users/fritzr/followers", "following_url": "https://api.github.com/users/fritzr/following{/other_user}", "gists_url": "https://api.github.com/users/fritzr/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzr/subscriptions", "organizations_url": "https://api.github.com/users/fritzr/orgs", "repos_url": "https://api.github.com/users/fritzr/repos", "events_url": "https://api.github.com/users/fritzr/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2392736c513251f4965378c0ceeb28493473b726", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2392736c513251f4965378c0ceeb28493473b726", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2392736c513251f4965378c0ceeb28493473b726"}], "stats": {"total": 94, "additions": 81, "deletions": 13}, "files": [{"sha": "1e4348db255ddc51831a7bec3d8a86ccf3591c52", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1305135257484958d6c75e6d4a05a3de2541f287/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1305135257484958d6c75e6d4a05a3de2541f287/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1305135257484958d6c75e6d4a05a3de2541f287", "patch": "@@ -1,3 +1,13 @@\n+2017-11-10  Fritz Reese <fritzoreese@gmail.com>\n+\n+\tPR fortran/82886\n+\t* gfortran.h (gfc_build_init_expr): New prototype.\n+\t* invoke.texi (finit-derived): Update documentation.\n+\t* expr.c (gfc_build_init_expr): New, from gfc_build_default_init_expr.\n+\t(gfc_build_default_init_expr): Redirect to gfc_build_init_expr(,,false)\n+\t(component_initializer): Force building initializers using\n+\tgfc_build_init_expr(,,true).\n+\n 2017-11-10  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/81117"}, {"sha": "09abacf83ecb7e66fea8900fa0dfec107545f09e", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1305135257484958d6c75e6d4a05a3de2541f287/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1305135257484958d6c75e6d4a05a3de2541f287/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=1305135257484958d6c75e6d4a05a3de2541f287", "patch": "@@ -4013,13 +4013,22 @@ gfc_check_assign_symbol (gfc_symbol *sym, gfc_component *comp, gfc_expr *rvalue)\n   return true;\n }\n \n+/* Invoke gfc_build_init_expr to create an initializer expression, but do not\n+ * require that an expression be built.  */\n+\n+gfc_expr *\n+gfc_build_default_init_expr (gfc_typespec *ts, locus *where)\n+{\n+  return gfc_build_init_expr (ts, where, false);\n+}\n \n /* Build an initializer for a local integer, real, complex, logical, or\n    character variable, based on the command line flags finit-local-zero,\n-   finit-integer=, finit-real=, finit-logical=, and finit-character=.  */\n+   finit-integer=, finit-real=, finit-logical=, and finit-character=.\n+   With force, an initializer is ALWAYS generated.  */\n \n gfc_expr *\n-gfc_build_default_init_expr (gfc_typespec *ts, locus *where)\n+gfc_build_init_expr (gfc_typespec *ts, locus *where, bool force)\n {\n   int char_len;\n   gfc_expr *init_expr;\n@@ -4028,13 +4037,24 @@ gfc_build_default_init_expr (gfc_typespec *ts, locus *where)\n   /* Try to build an initializer expression.  */\n   init_expr = gfc_get_constant_expr (ts->type, ts->kind, where);\n \n+  /* If we want to force generation, make sure we default to zero.  */\n+  gfc_init_local_real init_real = flag_init_real;\n+  int init_logical = gfc_option.flag_init_logical;\n+  if (force)\n+    {\n+      if (init_real == GFC_INIT_REAL_OFF)\n+\tinit_real = GFC_INIT_REAL_ZERO;\n+      if (init_logical == GFC_INIT_LOGICAL_OFF)\n+\tinit_logical = GFC_INIT_LOGICAL_FALSE;\n+    }\n+\n   /* We will only initialize integers, reals, complex, logicals, and\n      characters, and only if the corresponding command-line flags\n      were set.  Otherwise, we free init_expr and return null.  */\n   switch (ts->type)\n     {\n     case BT_INTEGER:\n-      if (gfc_option.flag_init_integer != GFC_INIT_INTEGER_OFF)\n+      if (force || gfc_option.flag_init_integer != GFC_INIT_INTEGER_OFF)\n         mpz_set_si (init_expr->value.integer,\n                          gfc_option.flag_init_integer_value);\n       else\n@@ -4045,7 +4065,7 @@ gfc_build_default_init_expr (gfc_typespec *ts, locus *where)\n       break;\n \n     case BT_REAL:\n-      switch (flag_init_real)\n+      switch (init_real)\n         {\n         case GFC_INIT_REAL_SNAN:\n           init_expr->is_snan = 1;\n@@ -4074,7 +4094,7 @@ gfc_build_default_init_expr (gfc_typespec *ts, locus *where)\n       break;\n \n     case BT_COMPLEX:\n-      switch (flag_init_real)\n+      switch (init_real)\n         {\n         case GFC_INIT_REAL_SNAN:\n           init_expr->is_snan = 1;\n@@ -4106,9 +4126,9 @@ gfc_build_default_init_expr (gfc_typespec *ts, locus *where)\n       break;\n \n     case BT_LOGICAL:\n-      if (gfc_option.flag_init_logical == GFC_INIT_LOGICAL_FALSE)\n+      if (init_logical == GFC_INIT_LOGICAL_FALSE)\n         init_expr->value.logical = 0;\n-      else if (gfc_option.flag_init_logical == GFC_INIT_LOGICAL_TRUE)\n+      else if (init_logical == GFC_INIT_LOGICAL_TRUE)\n         init_expr->value.logical = 1;\n       else\n         {\n@@ -4120,7 +4140,7 @@ gfc_build_default_init_expr (gfc_typespec *ts, locus *where)\n     case BT_CHARACTER:\n       /* For characters, the length must be constant in order to\n          create a default initializer.  */\n-      if (gfc_option.flag_init_character == GFC_INIT_CHARACTER_ON\n+      if ((force || gfc_option.flag_init_character == GFC_INIT_CHARACTER_ON)\n           && ts->u.cl->length\n           && ts->u.cl->length->expr_type == EXPR_CONSTANT)\n         {\n@@ -4136,7 +4156,8 @@ gfc_build_default_init_expr (gfc_typespec *ts, locus *where)\n           gfc_free_expr (init_expr);\n           init_expr = NULL;\n         }\n-      if (!init_expr && gfc_option.flag_init_character == GFC_INIT_CHARACTER_ON\n+      if (!init_expr\n+\t  && (force || gfc_option.flag_init_character == GFC_INIT_CHARACTER_ON)\n           && ts->u.cl->length && flag_max_stack_var_size != 0)\n         {\n           gfc_actual_arglist *arg;\n@@ -4391,7 +4412,8 @@ component_initializer (gfc_typespec *ts, gfc_component *c, bool generate)\n   /* Treat simple components like locals.  */\n   else\n     {\n-      init = gfc_build_default_init_expr (&c->ts, &c->loc);\n+      /* We MUST give an initializer, so force generation.  */\n+      init = gfc_build_init_expr (&c->ts, &c->loc, true);\n       gfc_apply_init (&c->ts, &c->attr, init);\n     }\n "}, {"sha": "a57676a2be10c203033cca0a8ce6fb1f71ceb9f9", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1305135257484958d6c75e6d4a05a3de2541f287/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1305135257484958d6c75e6d4a05a3de2541f287/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=1305135257484958d6c75e6d4a05a3de2541f287", "patch": "@@ -3174,6 +3174,7 @@ bool gfc_check_pointer_assign (gfc_expr *, gfc_expr *);\n bool gfc_check_assign_symbol (gfc_symbol *, gfc_component *, gfc_expr *);\n \n gfc_expr *gfc_build_default_init_expr (gfc_typespec *, locus *);\n+gfc_expr *gfc_build_init_expr (gfc_typespec *, locus *, bool);\n void gfc_apply_init (gfc_typespec *, symbol_attribute *, gfc_expr *);\n bool gfc_has_default_initializer (gfc_symbol *);\n gfc_expr *gfc_default_initializer (gfc_typespec *);"}, {"sha": "f3a8b34a26b52fc94565c53c3ed51666f6a7f726", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1305135257484958d6c75e6d4a05a3de2541f287/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1305135257484958d6c75e6d4a05a3de2541f287/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=1305135257484958d6c75e6d4a05a3de2541f287", "patch": "@@ -1714,9 +1714,14 @@ initialization options are provided by the\n the real and imaginary parts of local @code{COMPLEX} variables),\n @option{-finit-logical=@var{<true|false>}}, and\n @option{-finit-character=@var{n}} (where @var{n} is an ASCII character\n-value) options.  Components of derived type variables will be initialized\n-according to these flags only with @option{-finit-derived}.  These options do\n-not initialize\n+value) options.\n+\n+With @option{-finit-derived}, components of derived type variables will be\n+initialized according to these flags.  Components whose type is not covered by\n+an explicit @option{-finit-*} flag will be treated as described above with\n+@option{-finit-local-zero}.\n+\n+These options do not initialize\n @itemize @bullet\n @item\n objects with the POINTER attribute"}, {"sha": "d3e15cf7a00652cad47020e203ec88dbfd0b5264", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1305135257484958d6c75e6d4a05a3de2541f287/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1305135257484958d6c75e6d4a05a3de2541f287/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1305135257484958d6c75e6d4a05a3de2541f287", "patch": "@@ -1,3 +1,8 @@\n+2017-11-10  Fritz Reese <fritzoreese@gmail.com>\n+\n+\tPR fortran/82886\n+\t* gfortran.dg/init_flag_16.f03: New testcase.\n+\n 2017-11-10  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/p9-xxbr-3.c: New test."}, {"sha": "a39df63d7723c1c8070c1545ad848d2b05de8b7d", "filename": "gcc/testsuite/gfortran.dg/init_flag_16.f03", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1305135257484958d6c75e6d4a05a3de2541f287/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_16.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1305135257484958d6c75e6d4a05a3de2541f287/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_16.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_flag_16.f03?ref=1305135257484958d6c75e6d4a05a3de2541f287", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do compile }\n+! { dg-options \"-finit-derived\" }\n+!\n+! PR fortran/82886\n+!\n+! Test a regression which caused an ICE when -finit-derived was given without\n+! other -finit-* flags, especially for derived-type components with potentially\n+! hidden basic integer components.\n+!\n+\n+program pr82886\n+\n+  use, intrinsic :: iso_c_binding, only: c_ptr, c_null_ptr\n+  type t\n+    type(c_ptr) :: my_c_ptr\n+  end type\n+\n+contains\n+\n+  subroutine sub0() bind(c)\n+    type(t), target :: my_f90_type\n+    my_f90_type%my_c_ptr = c_null_ptr\n+  end subroutine\n+\n+end"}]}