{"sha": "7f9844caf1ebd513d8720afa3ce857fada9e94c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y5ODQ0Y2FmMWViZDUxM2Q4NzIwYWZhM2NlODU3ZmFkYTllOTRjNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-04-24T05:51:57Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-04-24T05:51:57Z"}, "message": "2007-xx-xx Chao-ying Fu <fu@mips.com> Richard Sandiford <richard@nildram.co.uk>\n\ngcc/\n2007-xx-xx  Chao-ying Fu  <fu@mips.com>\n\t    Richard Sandiford  <richard@nildram.co.uk>\n\n\t* doc/md.texi (madd@var{m}@var{n}4, umadd@var{m}@var{n}4): Document.\n\t* optabs.h (OTI_smadd_widen, OTI_umadd_widen): New optab_indexes.\n\t(smadd_widen_optab, umadd_widen_optab): Define.\n\t* optabs.c (init_optabs): Initialize smadd_widen_optab and\n\tumadd_widen_optab.\n\t* genopinit.c (optabs): Fill in smadd_widen_optab and\n\tumadd_widen_optab.\n\t* expr.c (expand_expr_real_1): Try to use smadd_widen_optab\n\tand umadd_widen_optab to implement multiply-add sequences.\n\t* config/mips/mips.md (*<su>mul_acc_di): Rename to...\n\t(<u>maddsidi4): ...this.  Extend condition to include\n\tGENERATE_MADD_MSUB and TARGET_DSPR2.  Change the constraint\n\tof operand 0 to \"ka\" and use the three-operand form of madd<u>\n\tfor TARGET_DSPR2.\n\t* config/mips/mips-dspr2.md (mips_madd, mips_maddu): Convert\n\tto define_expands.\n\t* config/mips/constraints.md (ka): New register constraint.\n\ngcc/testsuite/\n2007-xx-xx  Richard Sandiford  <richard@nildram.co.uk>\n\n\t* gcc.target/mips/madd-1.c, gcc.target/mips/madd-2.c,\n\t* gcc.target/mips/madd-3.c, gcc.target/mips/madd-4.c,\n\t* gcc.target/mips/maddu-1.c, gcc.target/mips/maddu-2.c,\n\t* gcc.target/mips/maddu-3.c, gcc.target/mips/maddu-4.c: New tests.\n\nFrom-SVN: r124095", "tree": {"sha": "414ebf4e011654eddd3531c3e652690d778992c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/414ebf4e011654eddd3531c3e652690d778992c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f9844caf1ebd513d8720afa3ce857fada9e94c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f9844caf1ebd513d8720afa3ce857fada9e94c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f9844caf1ebd513d8720afa3ce857fada9e94c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f9844caf1ebd513d8720afa3ce857fada9e94c6/comments", "author": null, "committer": null, "parents": [{"sha": "ec9ac2bc429d48bfd2466d56ddea4244ebfba990", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec9ac2bc429d48bfd2466d56ddea4244ebfba990", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec9ac2bc429d48bfd2466d56ddea4244ebfba990"}], "stats": {"total": 359, "additions": 329, "deletions": 30}, "files": [{"sha": "3983b4279381ceb20b64f29d491b57b8739c3c05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f9844caf1ebd513d8720afa3ce857fada9e94c6", "patch": "@@ -1,3 +1,24 @@\n+2007-04-24  Chao-ying Fu  <fu@mips.com>\n+\t    Richard Sandiford  <richard@nildram.co.uk>\n+\n+\t* doc/md.texi (madd@var{m}@var{n}4, umadd@var{m}@var{n}4): Document.\n+\t* optabs.h (OTI_smadd_widen, OTI_umadd_widen): New optab_indexes.\n+\t(smadd_widen_optab, umadd_widen_optab): Define.\n+\t* optabs.c (init_optabs): Initialize smadd_widen_optab and\n+\tumadd_widen_optab.\n+\t* genopinit.c (optabs): Fill in smadd_widen_optab and\n+\tumadd_widen_optab.\n+\t* expr.c (expand_expr_real_1): Try to use smadd_widen_optab\n+\tand umadd_widen_optab to implement multiply-add sequences.\n+\t* config/mips/mips.md (*<su>mul_acc_di): Rename to...\n+\t(<u>maddsidi4): ...this.  Extend condition to include\n+\tGENERATE_MADD_MSUB and TARGET_DSPR2.  Change the constraint\n+\tof operand 0 to \"ka\" and use the three-operand form of madd<u>\n+\tfor TARGET_DSPR2.\n+\t* config/mips/mips-dspr2.md (mips_madd, mips_maddu): Convert\n+\tto define_expands.\n+\t* config/mips/constraints.md (ka): New register constraint.\n+\n 2007-04-24  Jan Hubicka  <j@suse.cz>\n \n \tRevert:"}, {"sha": "1388fc2cca1ed227bbd2b8c705bb2b5261e9cbce", "filename": "gcc/config/mips/constraints.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Fconfig%2Fmips%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Fconfig%2Fmips%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fconstraints.md?ref=7f9844caf1ebd513d8720afa3ce857fada9e94c6", "patch": "@@ -78,6 +78,11 @@\n (define_register_constraint \"D\" \"COP3_REGS\"\n   \"@internal\")\n \n+;; Registers that can be used as the target of multiply-accumulate\n+;; instructions.  The core MIPS32 ISA provides a hi/lo madd,\n+;; but the DSPr2 version allows any accumulator target.\n+(define_register_constraint \"ka\" \"TARGET_DSPR2 ? ACC_REGS : MD_REGS\")\n+\n ;; Integer constraints\n \n (define_constraint \"I\""}, {"sha": "dd0aab553a1fbdfdbce8561db56f6117dd2b2dfb", "filename": "gcc/config/mips/mips-dspr2.md", "status": "modified", "additions": 6, "deletions": 25, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Fconfig%2Fmips%2Fmips-dspr2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Fconfig%2Fmips%2Fmips-dspr2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-dspr2.md?ref=7f9844caf1ebd513d8720afa3ce857fada9e94c6", "patch": "@@ -154,31 +154,13 @@\n   [(set_attr \"type\"\t\"imadd\")\n    (set_attr \"mode\"\t\"SI\")])\n \n-(define_insn \"mips_madd\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n+(define_expand \"mips_madd<u>\"\n+  [(set (match_operand:DI 0 \"register_operand\")\n \t(plus:DI\n-\t (mult:DI (sign_extend:DI\n-\t\t   (match_operand:SI 2 \"register_operand\" \"d\"))\n-\t\t  (sign_extend:DI\n-\t\t   (match_operand:SI 3 \"register_operand\" \"d\")))\n-\t (match_operand:DI 1 \"register_operand\" \"0\")))]\n-  \"TARGET_DSPR2 && !TARGET_64BIT\"\n-  \"madd\\t%q0,%2,%3\"\n-  [(set_attr \"type\"\t\"imadd\")\n-   (set_attr \"mode\"\t\"SI\")])\n-\n-(define_insn \"mips_maddu\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n-\t(plus:DI\n-\t (mult:DI (zero_extend:DI\n-\t\t   (match_operand:SI 2 \"register_operand\" \"d\"))\n-\t\t  (zero_extend:DI\n-\t\t   (match_operand:SI 3 \"register_operand\" \"d\")))\n-\t (match_operand:DI 1 \"register_operand\" \"0\")))]\n-  \"TARGET_DSPR2 && !TARGET_64BIT\"\n-  \"maddu\\t%q0,%2,%3\"\n-  [(set_attr \"type\"\t\"imadd\")\n-   (set_attr \"mode\"\t\"SI\")])\n+\t (mult:DI (any_extend:DI (match_operand:SI 2 \"register_operand\"))\n+\t\t  (any_extend:DI (match_operand:SI 3 \"register_operand\")))\n+\t (match_operand:DI 1 \"register_operand\")))]\n+  \"TARGET_DSPR2 && !TARGET_64BIT\")\n \n (define_insn \"mips_msub\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n@@ -623,4 +605,3 @@\n   \"dpsqx_sa.w.ph\\t%q0,%z2,%z3\"\n   [(set_attr \"type\"\t\"imadd\")\n    (set_attr \"mode\"\t\"SI\")])\n-"}, {"sha": "e44b919ccb9eb17f1d7983865ff712ceac6b5dd1", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=7f9844caf1ebd513d8720afa3ce857fada9e94c6", "patch": "@@ -1767,18 +1767,20 @@\n   [(set_attr \"type\"\t\"imadd\")\n    (set_attr \"mode\"\t\"SI\")])\n \n-(define_insn \"*<su>mul_acc_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=x\")\n+(define_insn \"<u>maddsidi4\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=ka\")\n \t(plus:DI\n \t (mult:DI (any_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n \t\t  (any_extend:DI (match_operand:SI 2 \"register_operand\" \"d\")))\n \t (match_operand:DI 3 \"register_operand\" \"0\")))]\n-  \"(TARGET_MAD || ISA_HAS_MACC)\n+  \"(TARGET_MAD || ISA_HAS_MACC || GENERATE_MADD_MSUB || TARGET_DSPR2)\n    && !TARGET_64BIT\"\n {\n   if (TARGET_MAD)\n     return \"mad<u>\\t%1,%2\";\n-  else if (TARGET_MIPS5500)\n+  else if (TARGET_DSPR2)\n+    return \"madd<u>\\t%q0,%1,%2\";\n+  else if (GENERATE_MADD_MSUB || TARGET_MIPS5500)\n     return \"madd<u>\\t%1,%2\";\n   else\n     /* See comment in *macc.  */"}, {"sha": "56cc60f2e1e8d7120a029965946f55c33f5d7aea", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=7f9844caf1ebd513d8720afa3ce857fada9e94c6", "patch": "@@ -3669,6 +3669,24 @@ The least significant half of the product is discarded.\n @item @samp{umul@var{m}3_highpart}\n Similar, but the multiplication is unsigned.\n \n+@cindex @code{madd@var{m}@var{n}4} instruction pattern\n+@item @samp{madd@var{m}@var{n}4}\n+Multiply operands 1 and 2, sign-extend them to mode @var{n}, add\n+operand 3, and store the result in operand 0.  Operands 1 and 2\n+have mode @var{m} and operands 0 and 3 have mode @var{n}.\n+Both modes must be integer modes and @var{n} must be twice\n+the size of @var{m}.\n+\n+In other words, @code{madd@var{m}@var{n}4} is like\n+@code{mul@var{m}@var{n}3} except that it also adds operand 3.\n+\n+These instructions are not allowed to @code{FAIL}.\n+\n+@cindex @code{umadd@var{m}@var{n}4} instruction pattern\n+@item @samp{umadd@var{m}@var{n}4}\n+Like @code{madd@var{m}@var{n}4}, but zero-extend the multiplication\n+operands instead of sign-extending them.\n+\n @cindex @code{divmod@var{m}4} instruction pattern\n @item @samp{divmod@var{m}4}\n Signed division that produces both a quotient and a remainder."}, {"sha": "34cc0aa6553a28ca2662c5232b30af3c2b4ea6bd", "filename": "gcc/expr.c", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=7f9844caf1ebd513d8720afa3ce857fada9e94c6", "patch": "@@ -6824,7 +6824,7 @@ static rtx\n expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t\t    enum expand_modifier modifier, rtx *alt_rtl)\n {\n-  rtx op0, op1, temp, decl_rtl;\n+  rtx op0, op1, op2, temp, decl_rtl;\n   tree type;\n   int unsignedp;\n   enum machine_mode mode;\n@@ -7977,6 +7977,47 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       return op0;\n \n     case PLUS_EXPR:\n+      /* Check if this is a case for multiplication and addition.  */\n+      if (TREE_CODE (type) == INTEGER_TYPE\n+\t  && TREE_CODE (TREE_OPERAND (exp, 0)) == MULT_EXPR)\n+\t{\n+\t  tree subsubexp0, subsubexp1;\n+\t  enum tree_code code0, code1;\n+\n+\t  subexp0 = TREE_OPERAND (exp, 0);\n+\t  subsubexp0 = TREE_OPERAND (subexp0, 0);\n+\t  subsubexp1 = TREE_OPERAND (subexp0, 1);\n+\t  code0 = TREE_CODE (subsubexp0);\n+\t  code1 = TREE_CODE (subsubexp1);\n+\t  if (code0 == NOP_EXPR && code1 == NOP_EXPR\n+\t      && (TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (subsubexp0, 0)))\n+\t\t  < TYPE_PRECISION (TREE_TYPE (subsubexp0)))\n+\t      && (TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (subsubexp0, 0)))\n+\t\t  == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (subsubexp1, 0))))\n+\t      && (TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (subsubexp0, 0)))\n+\t\t  == TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (subsubexp1, 0)))))\n+\t    {\n+\t      tree op0type = TREE_TYPE (TREE_OPERAND (subsubexp0, 0));\n+\t      enum machine_mode innermode = TYPE_MODE (op0type);\n+\t      bool zextend_p = TYPE_UNSIGNED (op0type);\n+\t      this_optab = zextend_p ? umadd_widen_optab : smadd_widen_optab;\n+\t      if (mode == GET_MODE_2XWIDER_MODE (innermode)\n+\t\t  && (this_optab->handlers[(int) mode].insn_code\n+\t\t      != CODE_FOR_nothing))\n+\t\t{\n+\t\t  expand_operands (TREE_OPERAND (subsubexp0, 0),\n+\t\t\t\t   TREE_OPERAND (subsubexp1, 0),\n+\t\t\t\t   NULL_RTX, &op0, &op1, EXPAND_NORMAL);\n+\t\t  op2 = expand_expr (TREE_OPERAND (exp, 1), subtarget,\n+\t\t\t\t     VOIDmode, 0);\n+\t\t  temp = expand_ternary_op (mode, this_optab, op0, op1, op2,\n+\t\t\t\t\t    target, unsignedp);\n+\t\t  gcc_assert (temp);\n+\t\t  return REDUCE_BIT_FIELD (temp);\n+\t\t}\n+\t    }\n+\t}\n+\n       /* If we are adding a constant, a VAR_DECL that is sp, fp, or ap, and\n \t something else, make sure we add the register to the constant and\n \t then to the other thing.  This case can occur during strength"}, {"sha": "992981aa8c02ee3e30a84ea5cc7b8cfec3f2015b", "filename": "gcc/genopinit.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=7f9844caf1ebd513d8720afa3ce857fada9e94c6", "patch": "@@ -85,6 +85,8 @@ static const char * const optabs[] =\n   \"smul_widen_optab->handlers[$B].insn_code = CODE_FOR_$(mul$a$b3$)$N\",\n   \"umul_widen_optab->handlers[$B].insn_code = CODE_FOR_$(umul$a$b3$)$N\",\n   \"usmul_widen_optab->handlers[$B].insn_code = CODE_FOR_$(usmul$a$b3$)$N\",\n+  \"smadd_widen_optab->handlers[$B].insn_code = CODE_FOR_$(madd$a$b4$)$N\",\n+  \"umadd_widen_optab->handlers[$B].insn_code = CODE_FOR_$(umadd$a$b4$)$N\",\n   \"sdiv_optab->handlers[$A].insn_code = CODE_FOR_$(div$a3$)\",\n   \"sdivv_optab->handlers[$A].insn_code = CODE_FOR_$(div$V$I$a3$)\",\n   \"udiv_optab->handlers[$A].insn_code = CODE_FOR_$(udiv$I$a3$)\","}, {"sha": "49e01217414eb8633ffdf054b60a7f69d7d3c018", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=7f9844caf1ebd513d8720afa3ce857fada9e94c6", "patch": "@@ -5439,6 +5439,8 @@ init_optabs (void)\n   smul_widen_optab = init_optab (UNKNOWN);\n   umul_widen_optab = init_optab (UNKNOWN);\n   usmul_widen_optab = init_optab (UNKNOWN);\n+  smadd_widen_optab = init_optab (UNKNOWN);\n+  umadd_widen_optab = init_optab (UNKNOWN);\n   sdiv_optab = init_optab (DIV);\n   sdivv_optab = init_optabv (DIV);\n   sdivmod_optab = init_optab (UNKNOWN);"}, {"sha": "e5bbef89e4c035e01e6cb020b3a0faafe8ba2e2a", "filename": "gcc/optabs.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=7f9844caf1ebd513d8720afa3ce857fada9e94c6", "patch": "@@ -86,6 +86,12 @@ enum optab_index\n   OTI_umul_widen,\n   /* Widening multiply of one unsigned and one signed operand.  */\n   OTI_usmul_widen,\n+  /* Signed multiply and add with the result and addend one machine mode\n+     wider than the multiplicand and multiplier.  */\n+  OTI_smadd_widen,\n+  /* Unigned multiply and add with the result and addend one machine mode\n+     wider than the multiplicand and multiplier.  */\n+  OTI_umadd_widen,\n \n   /* Signed divide */\n   OTI_sdiv,\n@@ -309,6 +315,8 @@ extern GTY(()) optab optab_table[OTI_MAX];\n #define smul_widen_optab (optab_table[OTI_smul_widen])\n #define umul_widen_optab (optab_table[OTI_umul_widen])\n #define usmul_widen_optab (optab_table[OTI_usmul_widen])\n+#define smadd_widen_optab (optab_table[OTI_smadd_widen])\n+#define umadd_widen_optab (optab_table[OTI_umadd_widen])\n #define sdiv_optab (optab_table[OTI_sdiv])\n #define smulv_optab (optab_table[OTI_smulv])\n #define sdivv_optab (optab_table[OTI_sdivv])"}, {"sha": "d94dc90c33d5e9834e7a87c7d937f1f577990265", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7f9844caf1ebd513d8720afa3ce857fada9e94c6", "patch": "@@ -1,3 +1,10 @@\n+2007-04-24  Richard Sandiford  <richard@nildram.co.uk>\n+\n+\t* gcc.target/mips/madd-1.c, gcc.target/mips/madd-2.c,\n+\t* gcc.target/mips/madd-3.c, gcc.target/mips/madd-4.c,\n+\t* gcc.target/mips/maddu-1.c, gcc.target/mips/maddu-2.c,\n+\t* gcc.target/mips/maddu-3.c, gcc.target/mips/maddu-4.c: New tests.\n+\n 2007-04-23  Simon Baldwin  <simonb@google.com>\n \n \t* g++.dg/other/error15.C: New."}, {"sha": "e5223396e8d5a39d43022ab08bacfea32e982c65", "filename": "gcc/testsuite/gcc.target/mips/madd-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-1.c?ref=7f9844caf1ebd513d8720afa3ce857fada9e94c6", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-O2 -march=vr4130 -mgp32\" } */\n+/* { dg-final { scan-assembler-times \"\\tmacc\\t\\\\\\$1,\" 3 } } */\n+\n+long long\n+f1 (int x, int y, long long z)\n+{\n+  return (long long) x * y + z;\n+}\n+\n+long long\n+f2 (int x, int y, long long z)\n+{\n+  return z + (long long) y * x;\n+}\n+\n+long long\n+f3 (int x, int y, long long z)\n+{\n+  long long t = (long long) x * y;\n+  int temp = 5;\n+  if (temp == 5)\n+    z += t;\n+  return z;\n+}"}, {"sha": "4c761ed6ca4e902c13add4e5dc4ffcd0f30ec436", "filename": "gcc/testsuite/gcc.target/mips/madd-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-2.c?ref=7f9844caf1ebd513d8720afa3ce857fada9e94c6", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-O2 -march=vr5500 -mgp32\" } */\n+/* { dg-final { scan-assembler-times \"\\tmadd\\t\" 3 } } */\n+\n+long long\n+f1 (int x, int y, long long z)\n+{\n+  return (long long) x * y + z;\n+}\n+\n+long long\n+f2 (int x, int y, long long z)\n+{\n+  return z + (long long) y * x;\n+}\n+\n+long long\n+f3 (int x, int y, long long z)\n+{\n+  long long t = (long long) x * y;\n+  int temp = 5;\n+  if (temp == 5)\n+    z += t;\n+  return z;\n+}"}, {"sha": "6fc30e57a6b742d04e6aab3f5ba55c7f22a3af54", "filename": "gcc/testsuite/gcc.target/mips/madd-3.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-3.c?ref=7f9844caf1ebd513d8720afa3ce857fada9e94c6", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-O2 -mips32 -mgp32\" } */\n+/* { dg-final { scan-assembler-times \"\\tmadd\\t\" 3 } } */\n+\n+long long\n+f1 (int x, int y, long long z)\n+{\n+  return (long long) x * y + z;\n+}\n+\n+long long\n+f2 (int x, int y, long long z)\n+{\n+  return z + (long long) y * x;\n+}\n+\n+long long\n+f3 (int x, int y, long long z)\n+{\n+  long long t = (long long) x * y;\n+  int temp = 5;\n+  if (temp == 5)\n+    z += t;\n+  return z;\n+}"}, {"sha": "28b5534b6f3b5b133fe38f0fbc54b7991fae0c0c", "filename": "gcc/testsuite/gcc.target/mips/madd-4.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-4.c?ref=7f9844caf1ebd513d8720afa3ce857fada9e94c6", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-O2 -mips32r2 -mdspr2 -mgp32\" } */\n+/* { dg-final { scan-assembler-times \"\\tmadd\\t\\\\\\$ac\" 3 } } */\n+\n+long long\n+f1 (int x, int y, long long z)\n+{\n+  return (long long) x * y + z;\n+}\n+\n+long long\n+f2 (int x, int y, long long z)\n+{\n+  return z + (long long) y * x;\n+}\n+\n+long long\n+f3 (int x, int y, long long z)\n+{\n+  long long t = (long long) x * y;\n+  int temp = 5;\n+  if (temp == 5)\n+    z += t;\n+  return z;\n+}"}, {"sha": "961e49bcb3c9f49e058148a48cdc136e547aaf61", "filename": "gcc/testsuite/gcc.target/mips/maddu-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmaddu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmaddu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmaddu-1.c?ref=7f9844caf1ebd513d8720afa3ce857fada9e94c6", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-O2 -march=vr4130 -mgp32\" } */\n+/* { dg-final { scan-assembler-times \"\\tmaccu\\t\\\\\\$1,\" 3 } } */\n+\n+typedef unsigned int ui;\n+typedef unsigned long long ull;\n+\n+ull\n+f1 (ui x, ui y, ull z)\n+{\n+  return (ull) x * y + z;\n+}\n+\n+ull\n+f2 (ui x, ui y, ull z)\n+{\n+  return z + (ull) y * x;\n+}\n+\n+ull\n+f3 (ui x, ui y, ull z)\n+{\n+  ull t = (ull) x * y;\n+  int temp = 5;\n+  if (temp == 5)\n+    z += t;\n+  return z;\n+}"}, {"sha": "2add97410ef56d81ba4f900fde6d67097f0b271e", "filename": "gcc/testsuite/gcc.target/mips/maddu-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmaddu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmaddu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmaddu-2.c?ref=7f9844caf1ebd513d8720afa3ce857fada9e94c6", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-O2 -march=vr5500 -mgp32\" } */\n+/* { dg-final { scan-assembler-times \"\\tmaddu\\t\" 3 } } */\n+\n+typedef unsigned int ui;\n+typedef unsigned long long ull;\n+\n+ull\n+f1 (ui x, ui y, ull z)\n+{\n+  return (ull) x * y + z;\n+}\n+\n+ull\n+f2 (ui x, ui y, ull z)\n+{\n+  return z + (ull) y * x;\n+}\n+\n+ull\n+f3 (ui x, ui y, ull z)\n+{\n+  ull t = (ull) x * y;\n+  int temp = 5;\n+  if (temp == 5)\n+    z += t;\n+  return z;\n+}"}, {"sha": "d89c450bb680db92f713089d080de696bdf13ecf", "filename": "gcc/testsuite/gcc.target/mips/maddu-3.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmaddu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmaddu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmaddu-3.c?ref=7f9844caf1ebd513d8720afa3ce857fada9e94c6", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-O2 -mips32 -mgp32\" } */\n+/* { dg-final { scan-assembler-times \"\\tmaddu\\t\" 3 } } */\n+\n+typedef unsigned int ui;\n+typedef unsigned long long ull;\n+\n+ull\n+f1 (ui x, ui y, ull z)\n+{\n+  return (ull) x * y + z;\n+}\n+\n+ull\n+f2 (ui x, ui y, ull z)\n+{\n+  return z + (ull) y * x;\n+}\n+\n+ull\n+f3 (ui x, ui y, ull z)\n+{\n+  ull t = (ull) x * y;\n+  int temp = 5;\n+  if (temp == 5)\n+    z += t;\n+  return z;\n+}"}, {"sha": "f208713ef8a2c95687aa4b640f13898e699e5f47", "filename": "gcc/testsuite/gcc.target/mips/maddu-4.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmaddu-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9844caf1ebd513d8720afa3ce857fada9e94c6/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmaddu-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmaddu-4.c?ref=7f9844caf1ebd513d8720afa3ce857fada9e94c6", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-O2 -mips32r2 -mdspr2 -mgp32\" } */\n+/* { dg-final { scan-assembler-times \"\\tmaddu\\t\\\\\\$ac\" 3 } } */\n+\n+typedef unsigned int ui;\n+typedef unsigned long long ull;\n+\n+ull\n+f1 (ui x, ui y, ull z)\n+{\n+  return (ull) x * y + z;\n+}\n+\n+ull\n+f2 (ui x, ui y, ull z)\n+{\n+  return z + (ull) y * x;\n+}\n+\n+ull\n+f3 (ui x, ui y, ull z)\n+{\n+  ull t = (ull) x * y;\n+  int temp = 5;\n+  if (temp == 5)\n+    z += t;\n+  return z;\n+}"}]}