{"sha": "017e1b43f9a203228c25da74d49ce5367eaee65b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE3ZTFiNDNmOWEyMDMyMjhjMjVkYTc0ZDQ5Y2U1MzY3ZWFlZTY1Yg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-06-09T03:21:56Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-06-09T03:21:56Z"}, "message": "expr.h (EXPAND_MEMORY): New.\n\n        * expr.h (EXPAND_MEMORY): New.\n        * expr.c (expand_expr): Check it.\n        * stmt.c (expand_asm_operands): Provide it when the constraint\n        requires a memory.  Warn for memory input constraints without\n        a memory operand.\n\n        * gcc.dg/20011029-2.c: Fix the array reference.\n        * gcc.dg/asm-7.c: New.\n\nFrom-SVN: r67645", "tree": {"sha": "09f0b6ed28e40cc9846facf74e75892be87ef0f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09f0b6ed28e40cc9846facf74e75892be87ef0f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/017e1b43f9a203228c25da74d49ce5367eaee65b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/017e1b43f9a203228c25da74d49ce5367eaee65b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/017e1b43f9a203228c25da74d49ce5367eaee65b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/017e1b43f9a203228c25da74d49ce5367eaee65b/comments", "author": null, "committer": null, "parents": [{"sha": "f8950e171a6d42bb28412e3c9c5c1afa84d79976", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8950e171a6d42bb28412e3c9c5c1afa84d79976", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8950e171a6d42bb28412e3c9c5c1afa84d79976"}], "stats": {"total": 113, "additions": 80, "deletions": 33}, "files": [{"sha": "23a4ae54f5ec31e3ef55e927d5d044b9643ca479", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017e1b43f9a203228c25da74d49ce5367eaee65b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017e1b43f9a203228c25da74d49ce5367eaee65b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=017e1b43f9a203228c25da74d49ce5367eaee65b", "patch": "@@ -1,3 +1,11 @@\n+2003-06-08  Richard Henderson  <rth@redhat.com>\n+\n+\t* expr.h (EXPAND_MEMORY): New.\n+\t* expr.c (expand_expr): Check it.\n+\t* stmt.c (expand_asm_operands): Provide it when the constraint\n+\trequires a memory.  Warn for memory input constraints without\n+\ta memory operand.\n+\n 2003-06-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* varasm.c: Don't include c-tree.h."}, {"sha": "4bcd978d58f260dbacfe1dcafd44d55dcb301068", "filename": "gcc/expr.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017e1b43f9a203228c25da74d49ce5367eaee65b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017e1b43f9a203228c25da74d49ce5367eaee65b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=017e1b43f9a203228c25da74d49ce5367eaee65b", "patch": "@@ -7326,7 +7326,9 @@ expand_expr (exp, target, tmode, modifier)\n \t   Don't fold if this is for wide characters since it's too\n \t   difficult to do correctly and this is a very rare case.  */\n \n-\tif (modifier != EXPAND_CONST_ADDRESS && modifier != EXPAND_INITIALIZER\n+\tif (modifier != EXPAND_CONST_ADDRESS\n+\t    && modifier != EXPAND_INITIALIZER\n+\t    && modifier != EXPAND_MEMORY\n \t    && TREE_CODE (array) == STRING_CST\n \t    && TREE_CODE (index) == INTEGER_CST\n \t    && compare_tree_int (index, TREE_STRING_LENGTH (array)) < 0\n@@ -7340,8 +7342,11 @@ expand_expr (exp, target, tmode, modifier)\n \t   we have an explicit constructor and when our operand is a variable\n \t   that was declared const.  */\n \n-\tif (modifier != EXPAND_CONST_ADDRESS && modifier != EXPAND_INITIALIZER\n-\t    && TREE_CODE (array) == CONSTRUCTOR && ! TREE_SIDE_EFFECTS (array)\n+\tif (modifier != EXPAND_CONST_ADDRESS\n+\t    && modifier != EXPAND_INITIALIZER\n+\t    && modifier != EXPAND_MEMORY\n+\t    && TREE_CODE (array) == CONSTRUCTOR\n+\t    && ! TREE_SIDE_EFFECTS (array)\n \t    && TREE_CODE (index) == INTEGER_CST\n \t    && 0 > compare_tree_int (index,\n \t\t\t\t     list_length (CONSTRUCTOR_ELTS\n@@ -7362,6 +7367,7 @@ expand_expr (exp, target, tmode, modifier)\n \telse if (optimize >= 1\n \t\t && modifier != EXPAND_CONST_ADDRESS\n \t\t && modifier != EXPAND_INITIALIZER\n+\t\t && modifier != EXPAND_MEMORY\n \t\t && TREE_READONLY (array) && ! TREE_SIDE_EFFECTS (array)\n \t\t && TREE_CODE (array) == VAR_DECL && DECL_INITIAL (array)\n \t\t && TREE_CODE (DECL_INITIAL (array)) != ERROR_MARK)"}, {"sha": "1e50320cafbe16507450c655ce549f579079b082", "filename": "gcc/expr.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017e1b43f9a203228c25da74d49ce5367eaee65b/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017e1b43f9a203228c25da74d49ce5367eaee65b/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=017e1b43f9a203228c25da74d49ce5367eaee65b", "patch": "@@ -51,9 +51,12 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    EXPAND_INITIALIZER is similar but also record any labels on forced_labels.\n    EXPAND_CONST_ADDRESS means it is ok to return a MEM whose address\n     is a constant that is not a legitimate address.\n-   EXPAND_WRITE means we are only going to write to the resulting rtx.  */\n+   EXPAND_WRITE means we are only going to write to the resulting rtx.\n+   EXPAND_MEMORY means we are interested in a memory result, even if\n+    the memory is constant and we could have propagated a constant value.  */\n enum expand_modifier {EXPAND_NORMAL = 0, EXPAND_STACK_PARM = 2, EXPAND_SUM,\n-\t\t      EXPAND_CONST_ADDRESS, EXPAND_INITIALIZER, EXPAND_WRITE};\n+\t\t      EXPAND_CONST_ADDRESS, EXPAND_INITIALIZER, EXPAND_WRITE,\n+\t\t      EXPAND_MEMORY};\n \n /* Prevent the compiler from deferring stack pops.  See\n    inhibit_defer_pop for more information.  */"}, {"sha": "3407f33be4c3896cf1ed99341f7e30ae4ad7ade2", "filename": "gcc/stmt.c", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017e1b43f9a203228c25da74d49ce5367eaee65b/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017e1b43f9a203228c25da74d49ce5367eaee65b/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=017e1b43f9a203228c25da74d49ce5367eaee65b", "patch": "@@ -1748,7 +1748,9 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \n       val = TREE_VALUE (tail);\n       type = TREE_TYPE (val);\n-      op = expand_expr (val, NULL_RTX, VOIDmode, 0);\n+      op = expand_expr (val, NULL_RTX, VOIDmode,\n+\t\t\t(allows_mem && !allows_reg\n+\t\t\t ? EXPAND_MEMORY : EXPAND_NORMAL));\n \n       /* Never pass a CONCAT to an ASM.  */\n       if (GET_CODE (op) == CONCAT)\n@@ -1763,38 +1765,35 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t  else if (!allows_mem)\n \t    warning (\"asm operand %d probably doesn't match constraints\",\n \t\t     i + noutputs);\n-\t  else if (CONSTANT_P (op))\n-\t    {\n-\t      op = force_const_mem (TYPE_MODE (type), op);\n-\t      op = validize_mem (op);\n-\t    }\n-\t  else if (GET_CODE (op) == REG\n-\t\t   || GET_CODE (op) == SUBREG\n-\t\t   || GET_CODE (op) == ADDRESSOF\n-\t\t   || GET_CODE (op) == CONCAT)\n-\t    {\n-\t      tree qual_type = build_qualified_type (type,\n-\t\t\t\t\t\t     (TYPE_QUALS (type)\n-\t\t\t\t\t\t      | TYPE_QUAL_CONST));\n-\t      rtx memloc = assign_temp (qual_type, 1, 1, 1);\n-\t      memloc = validize_mem (memloc);\n-\t      emit_move_insn (memloc, op);\n-\t      op = memloc;\n-\t    }\n-\n \t  else if (GET_CODE (op) == MEM && MEM_VOLATILE_P (op))\n \t    {\n \t      /* We won't recognize volatile memory as available a\n \t\t memory_operand at this point.  Ignore it.  */\n \t    }\n-\t  else if (queued_subexp_p (op))\n-\t    ;\n \t  else\n-\t    /* ??? Leave this only until we have experience with what\n-\t       happens in combine and elsewhere when constraints are\n-\t       not satisfied.  */\n-\t    warning (\"asm operand %d probably doesn't match constraints\",\n-\t\t     i + noutputs);\n+\t    {\n+\t      warning (\"asm operand %d uses deprecated memory input \"\n+\t\t       \"without lvalue\", i + noutputs);\n+\n+\t      if (CONSTANT_P (op))\n+\t\t{\n+\t\t  op = force_const_mem (TYPE_MODE (type), op);\n+\t\t  op = validize_mem (op);\n+\t\t}\n+\t      else if (GET_CODE (op) == REG\n+\t\t       || GET_CODE (op) == SUBREG\n+\t\t       || GET_CODE (op) == ADDRESSOF\n+\t\t       || GET_CODE (op) == CONCAT)\n+\t\t{\n+\t\t  tree qual_type = build_qualified_type (type,\n+\t\t\t\t\t\t\t (TYPE_QUALS (type)\n+\t\t\t\t\t\t\t  | TYPE_QUAL_CONST));\n+\t\t  rtx memloc = assign_temp (qual_type, 1, 1, 1);\n+\t\t  memloc = validize_mem (memloc);\n+\t\t  emit_move_insn (memloc, op);\n+\t\t  op = memloc;\n+\t\t}\n+\t    }\n \t}\n \n       generating_concat_p = old_generating_concat_p;"}, {"sha": "ab67d7519d3f8d9451ff27adfd8d07132a8668a3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017e1b43f9a203228c25da74d49ce5367eaee65b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017e1b43f9a203228c25da74d49ce5367eaee65b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=017e1b43f9a203228c25da74d49ce5367eaee65b", "patch": "@@ -1,3 +1,8 @@\n+2003-06-08  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.dg/20011029-2.c: Fix the array reference.\n+\t* gcc.dg/asm-7.c: New.\n+\n 2003-06-08  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* gcc.c-torture/compile/20000804-1.x: Dsiable on h8300 port."}, {"sha": "6fdc6216678a8954a6d7b77db53d05ce4655fa1d", "filename": "gcc/testsuite/gcc.dg/20011029-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017e1b43f9a203228c25da74d49ce5367eaee65b/gcc%2Ftestsuite%2Fgcc.dg%2F20011029-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017e1b43f9a203228c25da74d49ce5367eaee65b/gcc%2Ftestsuite%2Fgcc.dg%2F20011029-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20011029-2.c?ref=017e1b43f9a203228c25da74d49ce5367eaee65b", "patch": "@@ -16,7 +16,7 @@ int foo (int s)\n         continue;\n       else if (({ register char r;\n \t\t  __asm__ __volatile__ (\"\" : \"=q\" (r)\n-\t\t\t\t\t: \"r\" (0), \"m\" (a)\n+\t\t\t\t\t: \"r\" (0), \"m\" (a[0])\n \t\t\t\t\t: \"cc\"); r; }))\n         continue;\n     }"}, {"sha": "a3b6c759823c471ed80605242ba6f711ce8e4607", "filename": "gcc/testsuite/gcc.dg/asm-7.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017e1b43f9a203228c25da74d49ce5367eaee65b/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017e1b43f9a203228c25da74d49ce5367eaee65b/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-7.c?ref=017e1b43f9a203228c25da74d49ce5367eaee65b", "patch": "@@ -0,0 +1,26 @@\n+/* Gcc 3.3.1 deprecates memory inputs of non-lvalues.  */\n+/* { dg-do compile } */\n+\n+void test(void)\n+{\n+  register int r;\n+  register int r2;\n+  int i;\n+  static int m;\n+\n+  __asm__ (\"\" : : \"m\"(r));\t/* { dg-warning \"address of register\" } */\n+  __asm__ (\"\" : : \"m\"(i));\n+  __asm__ (\"\" : : \"m\"(m));\n+  __asm__ (\"\" : : \"m\"(0));\t/* { dg-warning \"deprecated memory input\" } */\n+  __asm__ (\"\" : : \"m\"(i+1));\t/* { dg-warning \"deprecated memory input\" } */\n+\n+  __asm__ (\"\" : : \"g\"(r));\n+  __asm__ (\"\" : : \"g\"(i));\n+  __asm__ (\"\" : : \"g\"(m));\n+  __asm__ (\"\" : : \"g\"(0));\n+  __asm__ (\"\" : : \"g\"(i+1));\n+\n+  __asm__ (\"\" : \"=m\"(r2));\t/* { dg-warning \"address of register\" } */\n+  __asm__ (\"\" : \"=m\"(i));\n+  __asm__ (\"\" : \"=m\"(m));\n+}"}]}