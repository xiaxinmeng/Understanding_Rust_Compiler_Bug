{"sha": "e562bf36b644ab3403fc28a5e41bee94fcca1deb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU2MmJmMzZiNjQ0YWIzNDAzZmMyOGE1ZTQxYmVlOTRmY2NhMWRlYg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-05-02T15:22:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-05-02T15:22:54Z"}, "message": "varasm.c (output_constructor_regular_field): Compute zero-based index with double-ints.\n\n2011-05-02  Richard Guenther  <rguenther@suse.de>\n\n\t* varasm.c (output_constructor_regular_field): Compute zero-based\n\tindex with double-ints.  Make sure to ICE instead of producing\n\twrong code.\n\t* cgraph.c (cgraph_add_thunk): Do not create new tree nodes\n\tin asserts.  Properly use a signed type.\n\nFrom-SVN: r173255", "tree": {"sha": "aba2d31b13dea7131e7eb941ca9a452f462c9085", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aba2d31b13dea7131e7eb941ca9a452f462c9085"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e562bf36b644ab3403fc28a5e41bee94fcca1deb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e562bf36b644ab3403fc28a5e41bee94fcca1deb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e562bf36b644ab3403fc28a5e41bee94fcca1deb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e562bf36b644ab3403fc28a5e41bee94fcca1deb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6bec6c98971cd984623fcdab094ded3912fb69af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bec6c98971cd984623fcdab094ded3912fb69af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bec6c98971cd984623fcdab094ded3912fb69af"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "26b40acba53221d072ee7cf27371c9367ff24878", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e562bf36b644ab3403fc28a5e41bee94fcca1deb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e562bf36b644ab3403fc28a5e41bee94fcca1deb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e562bf36b644ab3403fc28a5e41bee94fcca1deb", "patch": "@@ -1,3 +1,11 @@\n+2011-05-02  Richard Guenther  <rguenther@suse.de>\n+\n+\t* varasm.c (output_constructor_regular_field): Compute zero-based\n+\tindex with double-ints.  Make sure to ICE instead of producing\n+\twrong code.\n+\t* cgraph.c (cgraph_add_thunk): Do not create new tree nodes\n+\tin asserts.  Properly use a signed type.\n+\n 2011-05-02  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sse.md (V): New mode iterator."}, {"sha": "91805e30b73651c14f405fb2aa30a1a2ae9d2f17", "filename": "gcc/cgraph.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e562bf36b644ab3403fc28a5e41bee94fcca1deb/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e562bf36b644ab3403fc28a5e41bee94fcca1deb/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=e562bf36b644ab3403fc28a5e41bee94fcca1deb", "patch": "@@ -613,8 +613,9 @@ cgraph_add_thunk (struct cgraph_node *decl_node, tree alias, tree decl,\n   node = cgraph_same_body_alias_1 (decl_node, alias, decl);\n   gcc_assert (node);\n   gcc_checking_assert (!virtual_offset\n-\t\t       || tree_int_cst_equal (virtual_offset,\n-\t\t\t\t\t      size_int (virtual_value)));\n+\t\t       || double_int_equal_p\n+\t\t            (tree_to_double_int (virtual_offset),\n+\t\t\t     shwi_to_double_int (virtual_value)));\n   node->thunk.fixed_offset = fixed_offset;\n   node->thunk.this_adjusting = this_adjusting;\n   node->thunk.virtual_value = virtual_value;"}, {"sha": "b4f38058e224cc3fe3288cc52aa7430403225436", "filename": "gcc/varasm.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e562bf36b644ab3403fc28a5e41bee94fcca1deb/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e562bf36b644ab3403fc28a5e41bee94fcca1deb/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=e562bf36b644ab3403fc28a5e41bee94fcca1deb", "patch": "@@ -4711,9 +4711,13 @@ output_constructor_regular_field (oc_local_state *local)\n   unsigned int align2;\n \n   if (local->index != NULL_TREE)\n-    fieldpos = (tree_low_cst (TYPE_SIZE_UNIT (TREE_TYPE (local->val)), 1)\n-\t\t* ((tree_low_cst (local->index, 0)\n-\t\t    - tree_low_cst (local->min_index, 0))));\n+    {\n+      double_int idx = double_int_sub (tree_to_double_int (local->index),\n+\t\t\t\t       tree_to_double_int (local->min_index));\n+      gcc_assert (double_int_fits_in_shwi_p (idx));\n+      fieldpos = (tree_low_cst (TYPE_SIZE_UNIT (TREE_TYPE (local->val)), 1)\n+\t\t  * idx.low);\n+    }\n   else if (local->field != NULL_TREE)\n     fieldpos = int_byte_position (local->field);\n   else\n@@ -4760,13 +4764,8 @@ output_constructor_regular_field (oc_local_state *local)\n \t     better be last.  */\n \t  gcc_assert (!fieldsize || !DECL_CHAIN (local->field));\n \t}\n-      else if (DECL_SIZE_UNIT (local->field))\n-\t{\n-\t  /* ??? This can't be right.  If the decl size overflows\n-\t     a host integer we will silently emit no data.  */\n-\t  if (host_integerp (DECL_SIZE_UNIT (local->field), 1))\n-\t    fieldsize = tree_low_cst (DECL_SIZE_UNIT (local->field), 1);\n-\t}\n+      else\n+\tfieldsize = tree_low_cst (DECL_SIZE_UNIT (local->field), 1);\n     }\n   else\n     fieldsize = int_size_in_bytes (TREE_TYPE (local->type));"}]}