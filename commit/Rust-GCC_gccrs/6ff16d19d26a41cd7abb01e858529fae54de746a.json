{"sha": "6ff16d19d26a41cd7abb01e858529fae54de746a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZmMTZkMTlkMjZhNDFjZDdhYmIwMWU4NTg1MjlmYWU1NGRlNzQ2YQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-10-31T18:29:08Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-10-31T18:29:08Z"}, "message": "[C++ PATCH] overloaded operator fns [4/N]\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-10/msg02362.html\n\t* lex.c (init_operators): Allow NULL operator name.  Don't add\n\tspecial cases.\n\t* operators.def: Use NULL for mangling only operators.  Move to\n\tafter regular operators but move assignment operators last.\n\nFrom-SVN: r254276", "tree": {"sha": "b5f9c6877345f85a017e592001a440eeed218448", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5f9c6877345f85a017e592001a440eeed218448"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ff16d19d26a41cd7abb01e858529fae54de746a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff16d19d26a41cd7abb01e858529fae54de746a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ff16d19d26a41cd7abb01e858529fae54de746a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff16d19d26a41cd7abb01e858529fae54de746a/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e02e8a0a588d0dbd64c375dd604fecc8fde2f83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e02e8a0a588d0dbd64c375dd604fecc8fde2f83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e02e8a0a588d0dbd64c375dd604fecc8fde2f83"}], "stats": {"total": 87, "additions": 27, "deletions": 60}, "files": [{"sha": "edc806edf8ea9ab7268dcdb324994ee2223f202d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff16d19d26a41cd7abb01e858529fae54de746a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff16d19d26a41cd7abb01e858529fae54de746a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6ff16d19d26a41cd7abb01e858529fae54de746a", "patch": "@@ -1,5 +1,10 @@\n 2017-10-31  Nathan Sidwell  <nathan@acm.org>\n \n+\t* lex.c (init_operators): Allow NULL operator name.  Don't add\n+\tspecial cases.\n+\t* operators.def: Use NULL for mangling only operators.  Move to\n+\tafter regular operators but move assignment operators last.\n+\n \t* cp-tree.h (enum ovl_op_flags): New.\n \t(struct operator_name_info_t): Rename arity to flags.\n \t* lex.c (set_operator_ident): New."}, {"sha": "fed44a164298772da72541ef5bfd96311a49c059", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 5, "deletions": 39, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff16d19d26a41cd7abb01e858529fae54de746a/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff16d19d26a41cd7abb01e858529fae54de746a/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=6ff16d19d26a41cd7abb01e858529fae54de746a", "patch": "@@ -143,48 +143,14 @@ init_operators (void)\n   oni->name = NAME;\t\t\t\t\t\t\t\\\n   oni->mangled_name = MANGLING;\t\t\t\t\t\t\\\n   oni->flags = FLAGS;\t\t\t\t\t\t\t\\\n-  identifier = set_operator_ident (oni);\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  if (KIND != cik_simple_op || !IDENTIFIER_ANY_OP_P (identifier))\t\\\n-    set_identifier_kind (identifier, KIND);\n+  if (NAME) {\t\t\t\t\t\t\t\t\\\n+    identifier = set_operator_ident (oni);\t\t\t\t\\\n+    if (KIND != cik_simple_op || !IDENTIFIER_ANY_OP_P (identifier))\t\\\n+      set_identifier_kind (identifier, KIND);\t\t\t\t\\\n+  }\n \n #include \"operators.def\"\n #undef DEF_OPERATOR\n-\n-  operator_name_info[(int) TYPE_EXPR] = operator_name_info[(int) CAST_EXPR];\n-  operator_name_info[(int) ERROR_MARK].identifier\n-    = get_identifier (\"<invalid operator>\");\n-\n-  /* Handle some special cases.  These operators are not defined in\n-     the language, but can be produced internally.  We may need them\n-     for error-reporting.  (Eventually, we should ensure that this\n-     does not happen.  Error messages involving these operators will\n-     be confusing to users.)  */\n-\n-  operator_name_info [(int) INIT_EXPR].name\n-    = operator_name_info [(int) MODIFY_EXPR].name;\n-\n-  operator_name_info [(int) EXACT_DIV_EXPR].name = \"(ceiling /)\";\n-  operator_name_info [(int) CEIL_DIV_EXPR].name = \"(ceiling /)\";\n-  operator_name_info [(int) FLOOR_DIV_EXPR].name = \"(floor /)\";\n-  operator_name_info [(int) ROUND_DIV_EXPR].name = \"(round /)\";\n-  operator_name_info [(int) CEIL_MOD_EXPR].name = \"(ceiling %)\";\n-  operator_name_info [(int) FLOOR_MOD_EXPR].name = \"(floor %)\";\n-  operator_name_info [(int) ROUND_MOD_EXPR].name = \"(round %)\";\n-\n-  operator_name_info [(int) ABS_EXPR].name = \"abs\";\n-  operator_name_info [(int) TRUTH_AND_EXPR].name = \"strict &&\";\n-  operator_name_info [(int) TRUTH_OR_EXPR].name = \"strict ||\";\n-  operator_name_info [(int) RANGE_EXPR].name = \"...\";\n-  operator_name_info [(int) UNARY_PLUS_EXPR].name = \"+\";\n-\n-  assignment_operator_name_info [(int) EXACT_DIV_EXPR].name = \"(exact /=)\";\n-  assignment_operator_name_info [(int) CEIL_DIV_EXPR].name = \"(ceiling /=)\";\n-  assignment_operator_name_info [(int) FLOOR_DIV_EXPR].name = \"(floor /=)\";\n-  assignment_operator_name_info [(int) ROUND_DIV_EXPR].name = \"(round /=)\";\n-  assignment_operator_name_info [(int) CEIL_MOD_EXPR].name = \"(ceiling %=)\";\n-  assignment_operator_name_info [(int) FLOOR_MOD_EXPR].name = \"(floor %=)\";\n-  assignment_operator_name_info [(int) ROUND_MOD_EXPR].name = \"(round %=)\";\n }\n \n /* Initialize the reserved words.  */"}, {"sha": "51d2c3a09f42a90b127f92b09ed4b4b15ebd98fd", "filename": "gcc/cp/operators.def", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff16d19d26a41cd7abb01e858529fae54de746a/gcc%2Fcp%2Foperators.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff16d19d26a41cd7abb01e858529fae54de746a/gcc%2Fcp%2Foperators.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foperators.def?ref=6ff16d19d26a41cd7abb01e858529fae54de746a", "patch": "@@ -100,13 +100,6 @@ DEF_SIMPLE_OPERATOR (\"alignof\", ALIGNOF_EXPR, \"az\", OVL_OP_FLAG_UNARY)\n DEF_SIMPLE_OPERATOR (\"__imag__\", IMAGPART_EXPR, \"v18__imag__\", OVL_OP_FLAG_UNARY)\n DEF_SIMPLE_OPERATOR (\"__real__\", REALPART_EXPR, \"v18__real__\", OVL_OP_FLAG_UNARY)\n \n-/* The cast operators.  */\n-DEF_SIMPLE_OPERATOR (\"\", CAST_EXPR, \"cv\", OVL_OP_FLAG_UNARY)\n-DEF_SIMPLE_OPERATOR (\"dynamic_cast\", DYNAMIC_CAST_EXPR, \"dc\", OVL_OP_FLAG_UNARY)\n-DEF_SIMPLE_OPERATOR (\"reinterpret_cast\", REINTERPRET_CAST_EXPR, \"rc\", OVL_OP_FLAG_UNARY)\n-DEF_SIMPLE_OPERATOR (\"const_cast\", CONST_CAST_EXPR, \"cc\", OVL_OP_FLAG_UNARY)\n-DEF_SIMPLE_OPERATOR (\"static_cast\", STATIC_CAST_EXPR, \"sc\", OVL_OP_FLAG_UNARY)\n-\n /* Binary operators.  */\n DEF_SIMPLE_OPERATOR (\"+\", PLUS_EXPR, \"pl\", OVL_OP_FLAG_BINARY)\n DEF_SIMPLE_OPERATOR (\"-\", MINUS_EXPR, \"mi\", OVL_OP_FLAG_BINARY)\n@@ -133,8 +126,23 @@ DEF_SIMPLE_OPERATOR (\"->\", COMPONENT_REF, \"pt\", OVL_OP_FLAG_BINARY)\n DEF_SIMPLE_OPERATOR (\"[]\", ARRAY_REF, \"ix\", OVL_OP_FLAG_BINARY)\n DEF_SIMPLE_OPERATOR (\"++\", POSTINCREMENT_EXPR, \"pp\", OVL_OP_FLAG_BINARY)\n DEF_SIMPLE_OPERATOR (\"--\", POSTDECREMENT_EXPR, \"mm\", OVL_OP_FLAG_BINARY)\n-/* This one is needed for mangling.  */\n-DEF_SIMPLE_OPERATOR (\"::\", SCOPE_REF, \"sr\", OVL_OP_FLAG_BINARY)\n+\n+/* Miscellaneous.  */\n+DEF_SIMPLE_OPERATOR (\"?:\", COND_EXPR, \"qu\", OVL_OP_FLAG_NONE)\n+DEF_SIMPLE_OPERATOR (\"()\", CALL_EXPR, \"cl\", OVL_OP_FLAG_NONE)\n+\n+/* Operators needed for mangling.  */\n+DEF_SIMPLE_OPERATOR (NULL, CAST_EXPR, \"cv\", OVL_OP_FLAG_NONE)\n+DEF_SIMPLE_OPERATOR (NULL, DYNAMIC_CAST_EXPR, \"dc\", OVL_OP_FLAG_NONE)\n+DEF_SIMPLE_OPERATOR (NULL, REINTERPRET_CAST_EXPR, \"rc\", OVL_OP_FLAG_NONE)\n+DEF_SIMPLE_OPERATOR (NULL, CONST_CAST_EXPR, \"cc\", OVL_OP_FLAG_NONE)\n+DEF_SIMPLE_OPERATOR (NULL, STATIC_CAST_EXPR, \"sc\", OVL_OP_FLAG_NONE)\n+DEF_SIMPLE_OPERATOR (NULL, SCOPE_REF, \"sr\", OVL_OP_FLAG_NONE)\n+DEF_SIMPLE_OPERATOR (NULL, EXPR_PACK_EXPANSION, \"sp\", OVL_OP_FLAG_NONE)\n+DEF_SIMPLE_OPERATOR (NULL, UNARY_LEFT_FOLD_EXPR, \"fl\", OVL_OP_FLAG_NONE)\n+DEF_SIMPLE_OPERATOR (NULL, UNARY_RIGHT_FOLD_EXPR, \"fr\", OVL_OP_FLAG_NONE)\n+DEF_SIMPLE_OPERATOR (NULL, BINARY_LEFT_FOLD_EXPR, \"fL\", OVL_OP_FLAG_NONE)\n+DEF_SIMPLE_OPERATOR (NULL, BINARY_RIGHT_FOLD_EXPR, \"fR\", OVL_OP_FLAG_NONE)\n \n /* Assignment operators.  */\n DEF_ASSN_OPERATOR (\"=\", NOP_EXPR, \"aS\", OVL_OP_FLAG_BINARY)\n@@ -149,15 +157,3 @@ DEF_ASSN_OPERATOR (\"^=\", BIT_XOR_EXPR, \"eO\", OVL_OP_FLAG_BINARY)\n DEF_ASSN_OPERATOR (\"<<=\", LSHIFT_EXPR, \"lS\", OVL_OP_FLAG_BINARY)\n DEF_ASSN_OPERATOR (\">>=\", RSHIFT_EXPR, \"rS\", OVL_OP_FLAG_BINARY)\n \n-/* Ternary operators.  */\n-DEF_SIMPLE_OPERATOR (\"?:\", COND_EXPR, \"qu\", OVL_OP_FLAG_NONE)\n-\n-/* Miscellaneous.  */\n-DEF_SIMPLE_OPERATOR (\"()\", CALL_EXPR, \"cl\", OVL_OP_FLAG_NONE)\n-\n-/* Variadic templates extension. */\n-DEF_SIMPLE_OPERATOR (\"...\", EXPR_PACK_EXPANSION, \"sp\", OVL_OP_FLAG_UNARY)\n-DEF_SIMPLE_OPERATOR (\"... +\", UNARY_LEFT_FOLD_EXPR, \"fl\", OVL_OP_FLAG_BINARY)\n-DEF_SIMPLE_OPERATOR (\"+ ...\", UNARY_RIGHT_FOLD_EXPR, \"fr\", OVL_OP_FLAG_BINARY)\n-DEF_SIMPLE_OPERATOR (\"+ ... +\", BINARY_LEFT_FOLD_EXPR, \"fL\", OVL_OP_FLAG_NONE)\n-DEF_SIMPLE_OPERATOR (\"+ ... +\", BINARY_RIGHT_FOLD_EXPR, \"fR\", OVL_OP_FLAG_NONE)"}]}