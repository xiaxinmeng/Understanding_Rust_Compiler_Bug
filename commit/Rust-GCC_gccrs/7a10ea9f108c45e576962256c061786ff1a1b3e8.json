{"sha": "7a10ea9f108c45e576962256c061786ff1a1b3e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ExMGVhOWYxMDhjNDVlNTc2OTYyMjU2YzA2MTc4NmZmMWExYjNlOA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-05-27T10:56:25Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-05-27T10:56:25Z"}, "message": "[ARM] Vectorise bswap* in aarch32.\n\n\t* config/arm/neon.md (neon_bswap<mode>): New pattern.\n\t* config/arm/arm.c (neon_itype): Add NEON_BSWAP.\n\t(arm_init_neon_builtins): Handle NEON_BSWAP.\n\tDefine required type nodes.\n\t(arm_expand_neon_builtin): Handle NEON_BSWAP.\n\t(arm_builtin_vectorized_function): Handle BUILTIN_BSWAP builtins.\n\t* config/arm/arm_neon_builtins.def (bswap): Define builtins.\n\t* config/arm/iterators.md (VDQHSD): New mode iterator.\n\n\t* lib/target-supports.exp (check_effective_target_vect_bswap):\n\tSpecify arm*-*-* support.\n\nFrom-SVN: r210967", "tree": {"sha": "b7c5eab3dc01907e3d66be6a8a775c390caa8e3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7c5eab3dc01907e3d66be6a8a775c390caa8e3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a10ea9f108c45e576962256c061786ff1a1b3e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a10ea9f108c45e576962256c061786ff1a1b3e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a10ea9f108c45e576962256c061786ff1a1b3e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a10ea9f108c45e576962256c061786ff1a1b3e8/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "597f59975ce15635260a58533e436748c9600c36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/597f59975ce15635260a58533e436748c9600c36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/597f59975ce15635260a58533e436748c9600c36"}], "stats": {"total": 125, "additions": 112, "deletions": 13}, "files": [{"sha": "8845c8858c2d0f14bb90487991f16c6dff170e06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a10ea9f108c45e576962256c061786ff1a1b3e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a10ea9f108c45e576962256c061786ff1a1b3e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a10ea9f108c45e576962256c061786ff1a1b3e8", "patch": "@@ -1,3 +1,14 @@\n+2014-05-27  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/neon.md (neon_bswap<mode>): New pattern.\n+\t* config/arm/arm.c (neon_itype): Add NEON_BSWAP.\n+\t(arm_init_neon_builtins): Handle NEON_BSWAP.\n+\tDefine required type nodes.\n+\t(arm_expand_neon_builtin): Handle NEON_BSWAP.\n+\t(arm_builtin_vectorized_function): Handle BUILTIN_BSWAP builtins.\n+\t* config/arm/arm_neon_builtins.def (bswap): Define builtins.\n+\t* config/arm/iterators.md (VDQHSD): New mode iterator.\n+\n 2014-05-27  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vrp.c (vrp_evaluate_conditional_warnv_with_ops_using_ranges):"}, {"sha": "48c8091bd6da5165f881745ec017b42ac5398ba2", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 80, "deletions": 12, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a10ea9f108c45e576962256c061786ff1a1b3e8/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a10ea9f108c45e576962256c061786ff1a1b3e8/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=7a10ea9f108c45e576962256c061786ff1a1b3e8", "patch": "@@ -23065,6 +23065,7 @@ typedef enum {\n   NEON_BINOP,\n   NEON_TERNOP,\n   NEON_UNOP,\n+  NEON_BSWAP,\n   NEON_GETLANE,\n   NEON_SETLANE,\n   NEON_CREATE,\n@@ -23531,14 +23532,19 @@ arm_init_neon_builtins (void)\n \n   tree V8QI_type_node;\n   tree V4HI_type_node;\n+  tree V4UHI_type_node;\n   tree V4HF_type_node;\n   tree V2SI_type_node;\n+  tree V2USI_type_node;\n   tree V2SF_type_node;\n   tree V16QI_type_node;\n   tree V8HI_type_node;\n+  tree V8UHI_type_node;\n   tree V4SI_type_node;\n+  tree V4USI_type_node;\n   tree V4SF_type_node;\n   tree V2DI_type_node;\n+  tree V2UDI_type_node;\n \n   tree intUQI_type_node;\n   tree intUHI_type_node;\n@@ -23613,36 +23619,45 @@ arm_init_neon_builtins (void)\n   const_intDI_pointer_node = build_pointer_type (const_intDI_node);\n   const_float_pointer_node = build_pointer_type (const_float_node);\n \n+  /* Unsigned integer types for various mode sizes.  */\n+  intUQI_type_node = make_unsigned_type (GET_MODE_PRECISION (QImode));\n+  intUHI_type_node = make_unsigned_type (GET_MODE_PRECISION (HImode));\n+  intUSI_type_node = make_unsigned_type (GET_MODE_PRECISION (SImode));\n+  intUDI_type_node = make_unsigned_type (GET_MODE_PRECISION (DImode));\n+  neon_intUTI_type_node = make_unsigned_type (GET_MODE_PRECISION (TImode));\n   /* Now create vector types based on our NEON element types.  */\n   /* 64-bit vectors.  */\n   V8QI_type_node =\n     build_vector_type_for_mode (neon_intQI_type_node, V8QImode);\n   V4HI_type_node =\n     build_vector_type_for_mode (neon_intHI_type_node, V4HImode);\n+  V4UHI_type_node =\n+    build_vector_type_for_mode (intUHI_type_node, V4HImode);\n   V4HF_type_node =\n     build_vector_type_for_mode (neon_floatHF_type_node, V4HFmode);\n   V2SI_type_node =\n     build_vector_type_for_mode (neon_intSI_type_node, V2SImode);\n+  V2USI_type_node =\n+    build_vector_type_for_mode (intUSI_type_node, V2SImode);\n   V2SF_type_node =\n     build_vector_type_for_mode (neon_float_type_node, V2SFmode);\n   /* 128-bit vectors.  */\n   V16QI_type_node =\n     build_vector_type_for_mode (neon_intQI_type_node, V16QImode);\n   V8HI_type_node =\n     build_vector_type_for_mode (neon_intHI_type_node, V8HImode);\n+  V8UHI_type_node =\n+    build_vector_type_for_mode (intUHI_type_node, V8HImode);\n   V4SI_type_node =\n     build_vector_type_for_mode (neon_intSI_type_node, V4SImode);\n+  V4USI_type_node =\n+    build_vector_type_for_mode (intUSI_type_node, V4SImode);\n   V4SF_type_node =\n     build_vector_type_for_mode (neon_float_type_node, V4SFmode);\n   V2DI_type_node =\n     build_vector_type_for_mode (neon_intDI_type_node, V2DImode);\n-\n-  /* Unsigned integer types for various mode sizes.  */\n-  intUQI_type_node = make_unsigned_type (GET_MODE_PRECISION (QImode));\n-  intUHI_type_node = make_unsigned_type (GET_MODE_PRECISION (HImode));\n-  intUSI_type_node = make_unsigned_type (GET_MODE_PRECISION (SImode));\n-  intUDI_type_node = make_unsigned_type (GET_MODE_PRECISION (DImode));\n-  neon_intUTI_type_node = make_unsigned_type (GET_MODE_PRECISION (TImode));\n+  V2UDI_type_node =\n+    build_vector_type_for_mode (intUDI_type_node, V2DImode);\n \n \n   (*lang_hooks.types.register_builtin_type) (intUQI_type_node,\n@@ -23677,8 +23692,6 @@ arm_init_neon_builtins (void)\n \n   if (TARGET_CRYPTO && TARGET_HARD_FLOAT)\n   {\n-    tree V4USI_type_node =\n-      build_vector_type_for_mode (intUSI_type_node, V4SImode);\n \n     tree V16UQI_type_node =\n       build_vector_type_for_mode (intUQI_type_node, V16QImode);\n@@ -24023,6 +24036,31 @@ arm_init_neon_builtins (void)\n \t    ftype = build_function_type_list (return_type, eltype, NULL);\n \t    break;\n \t  }\n+\tcase NEON_BSWAP:\n+\t{\n+\t    tree eltype = NULL_TREE;\n+\t    switch (insn_data[d->code].operand[1].mode)\n+\t    {\n+\t      case V4HImode:\n+\t        eltype = V4UHI_type_node;\n+\t        break;\n+\t      case V8HImode:\n+\t        eltype = V8UHI_type_node;\n+\t        break;\n+\t      case V2SImode:\n+\t        eltype = V2USI_type_node;\n+\t        break;\n+\t      case V4SImode:\n+\t        eltype = V4USI_type_node;\n+\t        break;\n+\t      case V2DImode:\n+\t        eltype = V2UDI_type_node;\n+\t        break;\n+\t      default: gcc_unreachable ();\n+\t    }\n+\t    ftype = build_function_type_list (eltype, eltype, NULL);\n+\t    break;\n+\t}\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n@@ -25197,6 +25235,7 @@ arm_expand_neon_builtin (int fcode, tree exp, rtx target)\n     case NEON_SPLIT:\n     case NEON_FLOAT_WIDEN:\n     case NEON_FLOAT_NARROW:\n+    case NEON_BSWAP:\n     case NEON_REINTERP:\n       return arm_expand_neon_args (target, icode, 1, type_mode, exp, fcode,\n         NEON_ARG_COPY_TO_REG, NEON_ARG_STOP);\n@@ -29677,8 +29716,7 @@ arm_builtin_vectorized_function (tree fndecl, tree type_out, tree type_in)\n   int in_n, out_n;\n \n   if (TREE_CODE (type_out) != VECTOR_TYPE\n-      || TREE_CODE (type_in) != VECTOR_TYPE\n-      || !(TARGET_NEON && TARGET_FPU_ARMV8 && flag_unsafe_math_optimizations))\n+      || TREE_CODE (type_in) != VECTOR_TYPE)\n     return NULL_TREE;\n \n   out_mode = TYPE_MODE (TREE_TYPE (type_out));\n@@ -29690,7 +29728,13 @@ arm_builtin_vectorized_function (tree fndecl, tree type_out, tree type_in)\n    decl of the vectorized builtin for the appropriate vector mode.\n    NULL_TREE is returned if no such builtin is available.  */\n #undef ARM_CHECK_BUILTIN_MODE\n-#define ARM_CHECK_BUILTIN_MODE(C) \\\n+#define ARM_CHECK_BUILTIN_MODE(C)    \\\n+  (TARGET_NEON && TARGET_FPU_ARMV8   \\\n+   && flag_unsafe_math_optimizations \\\n+   && ARM_CHECK_BUILTIN_MODE_1 (C))\n+\n+#undef ARM_CHECK_BUILTIN_MODE_1\n+#define ARM_CHECK_BUILTIN_MODE_1(C) \\\n   (out_mode == SFmode && out_n == C \\\n    && in_mode == SFmode && in_n == C)\n \n@@ -29715,6 +29759,30 @@ arm_builtin_vectorized_function (tree fndecl, tree type_out, tree type_in)\n             return ARM_FIND_VRINT_VARIANT (vrintz);\n           case BUILT_IN_ROUNDF:\n             return ARM_FIND_VRINT_VARIANT (vrinta);\n+#undef ARM_CHECK_BUILTIN_MODE\n+#define ARM_CHECK_BUILTIN_MODE(C, N) \\\n+  (out_mode == N##Imode && out_n == C \\\n+   && in_mode == N##Imode && in_n == C)\n+          case BUILT_IN_BSWAP16:\n+            if (ARM_CHECK_BUILTIN_MODE (4, H))\n+              return arm_builtin_decl (ARM_BUILTIN_NEON_bswapv4hi, false);\n+            else if (ARM_CHECK_BUILTIN_MODE (8, H))\n+              return arm_builtin_decl (ARM_BUILTIN_NEON_bswapv8hi, false);\n+            else\n+              return NULL_TREE;\n+          case BUILT_IN_BSWAP32:\n+            if (ARM_CHECK_BUILTIN_MODE (2, S))\n+              return arm_builtin_decl (ARM_BUILTIN_NEON_bswapv2si, false);\n+            else if (ARM_CHECK_BUILTIN_MODE (4, S))\n+              return arm_builtin_decl (ARM_BUILTIN_NEON_bswapv4si, false);\n+            else\n+              return NULL_TREE;\n+          case BUILT_IN_BSWAP64:\n+            if (ARM_CHECK_BUILTIN_MODE (2, D))\n+              return arm_builtin_decl (ARM_BUILTIN_NEON_bswapv2di, false);\n+            else\n+              return NULL_TREE;\n+\n           default:\n             return NULL_TREE;\n         }"}, {"sha": "f4531f36e7aa0bff4d33bb78eb68a480bf389d47", "filename": "gcc/config/arm/arm_neon_builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a10ea9f108c45e576962256c061786ff1a1b3e8/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a10ea9f108c45e576962256c061786ff1a1b3e8/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def?ref=7a10ea9f108c45e576962256c061786ff1a1b3e8", "patch": "@@ -88,6 +88,7 @@ VAR8 (UNOP, vneg, v8qi, v4hi, v2si, v2sf, v16qi, v8hi, v4si, v4sf),\n VAR6 (UNOP, vqneg, v8qi, v4hi, v2si, v16qi, v8hi, v4si),\n VAR6 (UNOP, vcls, v8qi, v4hi, v2si, v16qi, v8hi, v4si),\n VAR6 (UNOP, vclz, v8qi, v4hi, v2si, v16qi, v8hi, v4si),\n+VAR5 (BSWAP, bswap, v4hi, v8hi, v2si, v4si, v2di),\n VAR2 (UNOP, vcnt, v8qi, v16qi),\n VAR4 (UNOP, vrecpe, v2si, v2sf, v4si, v4sf),\n VAR4 (UNOP, vrsqrte, v2si, v2sf, v4si, v4sf),"}, {"sha": "892e5f328b968c84442830dd7a2850e672fd7d69", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a10ea9f108c45e576962256c061786ff1a1b3e8/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a10ea9f108c45e576962256c061786ff1a1b3e8/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=7a10ea9f108c45e576962256c061786ff1a1b3e8", "patch": "@@ -116,6 +116,9 @@\n ;; Vector modes including 64-bit integer elements, but no floats.\n (define_mode_iterator VDQIX [V8QI V16QI V4HI V8HI V2SI V4SI DI V2DI])\n \n+;; Vector modes for H, S and D types.\n+(define_mode_iterator VDQHSD [V4HI V8HI V2SI V4SI V2DI])\n+\n ;; Vector modes for float->int conversions.\n (define_mode_iterator VCVTF [V2SF V4SF])\n "}, {"sha": "83970618a6987c565a37a3facd5e669e7ca537be", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a10ea9f108c45e576962256c061786ff1a1b3e8/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a10ea9f108c45e576962256c061786ff1a1b3e8/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=7a10ea9f108c45e576962256c061786ff1a1b3e8", "patch": "@@ -2547,6 +2547,14 @@\n   [(set_attr \"type\" \"neon_qabs<q>\")]\n )\n \n+(define_insn \"neon_bswap<mode>\"\n+  [(set (match_operand:VDQHSD 0 \"register_operand\" \"=w\")\n+        (bswap:VDQHSD (match_operand:VDQHSD 1 \"register_operand\" \"w\")))]\n+  \"TARGET_NEON\"\n+  \"vrev<V_sz_elem>.8\\\\t%<V_reg>0, %<V_reg>1\"\n+  [(set_attr \"type\" \"neon_rev<q>\")]\n+)\n+\n (define_expand \"neon_vneg<mode>\"\n   [(match_operand:VDQW 0 \"s_register_operand\" \"\")\n    (match_operand:VDQW 1 \"s_register_operand\" \"\")"}, {"sha": "3491f6ec087f9577bbc5a35ea651065d40b12c3b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a10ea9f108c45e576962256c061786ff1a1b3e8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a10ea9f108c45e576962256c061786ff1a1b3e8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7a10ea9f108c45e576962256c061786ff1a1b3e8", "patch": "@@ -1,3 +1,8 @@\n+2014-05-27  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_vect_bswap):\n+\tSpecify arm*-*-* support.\n+\n 2014-05-27  Dominique d'Humieres <dominiq@lps.ens.fr>\n \n \tPR testsuite/61319"}, {"sha": "5ec16088355d82b4a71f23d76f42bb0b32155dae", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a10ea9f108c45e576962256c061786ff1a1b3e8/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a10ea9f108c45e576962256c061786ff1a1b3e8/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=7a10ea9f108c45e576962256c061786ff1a1b3e8", "patch": "@@ -3306,7 +3306,10 @@ proc check_effective_target_vect_bswap { } {\n \tverbose \"check_effective_target_vect_bswap: using cached result\" 2\n     } else {\n \tset et_vect_bswap_saved 0\n-\tif { [istarget aarch64*-*-*] } {\n+\tif { [istarget aarch64*-*-*]\n+             || ([istarget arm*-*-*]\n+                && [check_effective_target_arm_neon])\n+\t   } {\n \t   set et_vect_bswap_saved 1\n \t}\n     }"}]}