{"sha": "267e265c52284184b5b8ddaa72adc79f9e9db681", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY3ZTI2NWM1MjI4NDE4NGI1YjhkZGFhNzJhZGM3OWY5ZTlkYjY4MQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-01-27T19:47:28Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-01-27T19:47:28Z"}, "message": "re PR c++/37554 (ICE with invalid cast)\n\n/cp\n2009-01-27  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/37554\n\t* call.c (build_over_call): If convert_for_arg_passing returns\n\terror_mark_node unconditionally return it.\n\n/testsuite\n2009-01-27  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/37554\n\t* g++.dg/parse/crash51.C: New.\n\t* g++.old-deja/g++.pt/crash9.C: Adjust.\n\nFrom-SVN: r143711", "tree": {"sha": "88b094338a91a4e3a858e1fb44517f34a69c455c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88b094338a91a4e3a858e1fb44517f34a69c455c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/267e265c52284184b5b8ddaa72adc79f9e9db681", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/267e265c52284184b5b8ddaa72adc79f9e9db681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/267e265c52284184b5b8ddaa72adc79f9e9db681", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/267e265c52284184b5b8ddaa72adc79f9e9db681/comments", "author": null, "committer": null, "parents": [{"sha": "79e5286cbab0f3bf252de42e3fc39b924001d903", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79e5286cbab0f3bf252de42e3fc39b924001d903", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79e5286cbab0f3bf252de42e3fc39b924001d903"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "ff63c619a7ae741a80ef66ee86537db93c0f7632", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/267e265c52284184b5b8ddaa72adc79f9e9db681/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/267e265c52284184b5b8ddaa72adc79f9e9db681/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=267e265c52284184b5b8ddaa72adc79f9e9db681", "patch": "@@ -1,3 +1,9 @@\n+2009-01-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/37554\n+\t* call.c (build_over_call): If convert_for_arg_passing returns\n+\terror_mark_node unconditionally return it.\n+\n 2009-01-22  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* class.c (check_field_decls): Also inherit packed for bitfields"}, {"sha": "f13e3bdb8e29e36a76bae1906211a3c7d6ad26b9", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/267e265c52284184b5b8ddaa72adc79f9e9db681/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/267e265c52284184b5b8ddaa72adc79f9e9db681/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=267e265c52284184b5b8ddaa72adc79f9e9db681", "patch": "@@ -5276,7 +5276,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t(conv, TREE_VALUE (arg), fn, i - is_method, complain);\n \n       val = convert_for_arg_passing (type, val);\n-      if ((complain == tf_none) && val == error_mark_node)\n+      if (val == error_mark_node)\n         return error_mark_node;\n       else\n         argarray[j++] = val;"}, {"sha": "8f1ceb8d2a07c1a2ff272d839cfc11718353354c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/267e265c52284184b5b8ddaa72adc79f9e9db681/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/267e265c52284184b5b8ddaa72adc79f9e9db681/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=267e265c52284184b5b8ddaa72adc79f9e9db681", "patch": "@@ -1,3 +1,9 @@\n+2009-01-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/37554\n+\t* g++.dg/parse/crash51.C: New.\n+\t* g++.old-deja/g++.pt/crash9.C: Adjust.\n+\n 2009-01-27  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/38883"}, {"sha": "03fcd3613368c3b3788c71a29ea6ea70c825bcc0", "filename": "gcc/testsuite/g++.dg/parse/crash51.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/267e265c52284184b5b8ddaa72adc79f9e9db681/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash51.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/267e265c52284184b5b8ddaa72adc79f9e9db681/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash51.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash51.C?ref=267e265c52284184b5b8ddaa72adc79f9e9db681", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/37554\n+\n+struct A {};\n+class B : A {};\n+\n+void foo(B b)\n+{\n+  (A)b; // { dg-error \"inaccessible base\" }\n+}"}, {"sha": "20bd7584fdd8aae56b9817032c8844982d8f19a6", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash9.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/267e265c52284184b5b8ddaa72adc79f9e9db681/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/267e265c52284184b5b8ddaa72adc79f9e9db681/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash9.C?ref=267e265c52284184b5b8ddaa72adc79f9e9db681", "patch": "@@ -1,11 +1,11 @@\n // { dg-do assemble  }\n \n template <class T>\n-void f(T) {} // { dg-error \"\" } parameter has incomplete type\n+void f(T) {}\n \n-class C;    // { dg-error \"\" } forward declaration\n+class C;    // { dg-error \"forward declaration\" }\n \n void g(const C& c)\n {\n-  f(c); // { dg-error \"\" } invalid use of undefined type\n+  f(c); // { dg-error \"invalid use of incomplete type|initializing argument\" }\n }"}]}