{"sha": "15c55b96a721721e944f8617ae59bdcb273477e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVjNTViOTZhNzIxNzIxZTk0NGY4NjE3YWU1OWJkY2IyNzM0NzdlNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-05-25T08:04:10Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-05-25T08:07:04Z"}, "message": "Fix incorrect handling of Component_Size\n\nThe compiler can mishandle a Component_Size clause on an array type\nspecifying a size multiple of the storage unit, when this size is\nnot a multiple of the alignment of the component type.\n\ngcc/ada/ChangeLog\n\t* gcc-interface/decl.c (gnat_to_gnu_component_type): Cap alignment\n\tof the component type according to the component size.\n\ngcc/testsuite/ChangeLog\n\t* gnat.dg/array40.adb: New test.\n\t* gnat.dg/array40_pkg.ads: New helper.", "tree": {"sha": "40aa466d1503dd1bba7908b0160e7acd51950a3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40aa466d1503dd1bba7908b0160e7acd51950a3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15c55b96a721721e944f8617ae59bdcb273477e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c55b96a721721e944f8617ae59bdcb273477e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15c55b96a721721e944f8617ae59bdcb273477e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c55b96a721721e944f8617ae59bdcb273477e6/comments", "author": null, "committer": null, "parents": [{"sha": "deea3defc9802fcf3f8ea4e45f29dd1ad8fb3cef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deea3defc9802fcf3f8ea4e45f29dd1ad8fb3cef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deea3defc9802fcf3f8ea4e45f29dd1ad8fb3cef"}], "stats": {"total": 65, "additions": 62, "deletions": 3}, "files": [{"sha": "e4892ee5229a861620566f217a4b014463cdd726", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c55b96a721721e944f8617ae59bdcb273477e6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c55b96a721721e944f8617ae59bdcb273477e6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=15c55b96a721721e944f8617ae59bdcb273477e6", "patch": "@@ -1,3 +1,8 @@\n+2020-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_component_type): Cap the alignment\n+\tof the component type according to the component size.\n+\n 2020-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Type>: Add a\n@@ -11,6 +16,7 @@\n \tfat pointer types and tidy up accordingly.\n \t* gcc-interface/utils.c (build_unc_object_type): Do not set the\n \tcontext on the template type.\n+\t(gnat_pushdecl): Mark the canonical fat pointer types as artificial.\n \n 2020-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "ab6e79ce3c19895510f551e39ba7df3acd45d034", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c55b96a721721e944f8617ae59bdcb273477e6/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c55b96a721721e944f8617ae59bdcb273477e6/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=15c55b96a721721e944f8617ae59bdcb273477e6", "patch": "@@ -5153,7 +5153,7 @@ gnat_to_gnu_component_type (Entity_Id gnat_array, bool definition,\n   unsigned int max_align;\n \n   /* If an alignment is specified, use it as a cap on the component type\n-     so that it can be honored for the whole type.  But ignore it for the\n+     so that it can be honored for the whole type, but ignore it for the\n      original type of packed array types.  */\n   if (No (Packed_Array_Impl_Type (gnat_array))\n       && Known_Alignment (gnat_array))\n@@ -5200,15 +5200,30 @@ gnat_to_gnu_component_type (Entity_Id gnat_array, bool definition,\n   if (gnu_comp_size && !is_bit_packed)\n     {\n       tree orig_type = gnu_type;\n+      unsigned int gnu_comp_align;\n \n       gnu_type = make_type_from_size (gnu_type, gnu_comp_size, false);\n       if (max_align > 0 && TYPE_ALIGN (gnu_type) > max_align)\n \tgnu_type = orig_type;\n       else\n \torig_type = gnu_type;\n \n-      gnu_type = maybe_pad_type (gnu_type, gnu_comp_size, 0, gnat_array,\n-\t\t\t\t true, definition, true);\n+      /* We need to make sure that the size is a multiple of the alignment.\n+\t But we do not misalign the component type because of the alignment\n+\t of the array type here; this either must have been done earlier in\n+\t the packed case or should be rejected in the non-packed case.  */\n+      if (TREE_CODE (gnu_comp_size) == INTEGER_CST)\n+\t{\n+\t  const unsigned HOST_WIDE_INT int_size = tree_to_uhwi (gnu_comp_size);\n+\t  gnu_comp_align = int_size & -int_size;\n+\t  if (gnu_comp_align > TYPE_ALIGN (gnu_type))\n+\t    gnu_comp_align = 0;\n+\t}\n+       else\n+\t gnu_comp_align = 0;\n+\n+      gnu_type = maybe_pad_type (gnu_type, gnu_comp_size, gnu_comp_align,\n+\t\t\t\t gnat_array, true, definition, true);\n \n       /* If a padding record was made, declare it now since it will never be\n \t declared otherwise.  This is necessary to ensure that its subtrees"}, {"sha": "6e839c1262e926cbe79e719a1fb26fde9cbccc35", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c55b96a721721e944f8617ae59bdcb273477e6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c55b96a721721e944f8617ae59bdcb273477e6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=15c55b96a721721e944f8617ae59bdcb273477e6", "patch": "@@ -1,3 +1,8 @@\n+2020-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/array40.adb: New test.\n+\t* gnat.dg/array40_pkg.ads: New helper.\n+\n 2020-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/array39.adb: New test."}, {"sha": "227288d368f8703cea316dea1c63d839081b2563", "filename": "gcc/testsuite/gnat.dg/array40.adb", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c55b96a721721e944f8617ae59bdcb273477e6/gcc%2Ftestsuite%2Fgnat.dg%2Farray40.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c55b96a721721e944f8617ae59bdcb273477e6/gcc%2Ftestsuite%2Fgnat.dg%2Farray40.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray40.adb?ref=15c55b96a721721e944f8617ae59bdcb273477e6", "patch": "@@ -0,0 +1,21 @@\n+-- { dg-do run }\n+-- { dg-options \"-gnatws\" }\n+\n+with System.Storage_Elements;\n+with Array40_Pkg; use Array40_Pkg;\n+\n+procedure Array40 is\n+\n+  use System;\n+  use System.Storage_Elements;\n+\n+begin\n+  if A(1)'Size /= 40 then\n+    raise Program_Error;\n+  end if;\n+\n+  if (A(2)'Address - A(1)'Address) * System.Storage_Unit /= 40 then\n+    raise Program_Error;\n+  end if;\n+\n+end;"}, {"sha": "a3cec8b43f47f559d2249a8e356502721730491e", "filename": "gcc/testsuite/gnat.dg/array40_pkg.ads", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c55b96a721721e944f8617ae59bdcb273477e6/gcc%2Ftestsuite%2Fgnat.dg%2Farray40_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c55b96a721721e944f8617ae59bdcb273477e6/gcc%2Ftestsuite%2Fgnat.dg%2Farray40_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray40_pkg.ads?ref=15c55b96a721721e944f8617ae59bdcb273477e6", "patch": "@@ -0,0 +1,12 @@\n+package Array40_Pkg is\n+\n+  type Rec is record\n+    I : Integer;\n+  end record;\n+\n+  type Arr is array (1 .. 4) of Rec;\n+  for Arr'Component_Size use 40;\n+\n+  A : Arr;\n+\n+end Array40_Pkg;"}]}