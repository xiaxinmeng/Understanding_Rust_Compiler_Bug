{"sha": "d3e1e89e50a64005a622759d5b2c4a8d1a77393f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNlMWU4OWU1MGE2NDAwNWE2MjI3NTlkNWIyYzRhOGQxYTc3MzkzZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-08-01T02:26:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-08-01T02:26:13Z"}, "message": "typeck.c (build_address): Do fold away ADDR_EXPR of INDIRECT_REF.\n\n\t* typeck.c (build_address): Do fold away ADDR_EXPR of INDIRECT_REF.\n\t* tree.c (rvalue): Use cp_build_qualified_type, not TYPE_MAIN_VARIANT.\n\nFrom-SVN: r150324", "tree": {"sha": "99e6a94266b3834a4322ff190d6b10230426c4a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99e6a94266b3834a4322ff190d6b10230426c4a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3e1e89e50a64005a622759d5b2c4a8d1a77393f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3e1e89e50a64005a622759d5b2c4a8d1a77393f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3e1e89e50a64005a622759d5b2c4a8d1a77393f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3e1e89e50a64005a622759d5b2c4a8d1a77393f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "924d0c888da15a8914eea28616b6c93cffa4768e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/924d0c888da15a8914eea28616b6c93cffa4768e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/924d0c888da15a8914eea28616b6c93cffa4768e"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "1f5725140ef49531348848b4c1cfaba0247a61ad", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e1e89e50a64005a622759d5b2c4a8d1a77393f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e1e89e50a64005a622759d5b2c4a8d1a77393f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d3e1e89e50a64005a622759d5b2c4a8d1a77393f", "patch": "@@ -1,3 +1,8 @@\n+2009-07-31  Jason Merrill  <jason@redhat.com>\n+\n+\t* typeck.c (build_address): Do fold away ADDR_EXPR of INDIRECT_REF.\n+\t* tree.c (rvalue): Use cp_build_qualified_type, not TYPE_MAIN_VARIANT.\n+\n 2009-07-29  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/14912"}, {"sha": "cbadf0438b66a282eb442297d597e2f67b2fafc3", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e1e89e50a64005a622759d5b2c4a8d1a77393f/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e1e89e50a64005a622759d5b2c4a8d1a77393f/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=d3e1e89e50a64005a622759d5b2c4a8d1a77393f", "patch": "@@ -530,7 +530,7 @@ rvalue (tree expr)\n      Non-class rvalues always have cv-unqualified types.  */\n   type = TREE_TYPE (expr);\n   if (!CLASS_TYPE_P (type) && cp_type_quals (type))\n-    type = TYPE_MAIN_VARIANT (type);\n+    type = cp_build_qualified_type (type, TYPE_UNQUALIFIED);\n \n   /* We need to do this for rvalue refs as well to get the right answer\n      from decltype; see c++/36628.  */"}, {"sha": "35c82d637a7b7796aac796ff679634a2a120c814", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e1e89e50a64005a622759d5b2c4a8d1a77393f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e1e89e50a64005a622759d5b2c4a8d1a77393f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=d3e1e89e50a64005a622759d5b2c4a8d1a77393f", "patch": "@@ -4276,21 +4276,18 @@ condition_conversion (tree expr)\n   return t;\n }\n \n-/* Return an ADDR_EXPR giving the address of T.  This function\n-   attempts no optimizations or simplifications; it is a low-level\n-   primitive.  */\n+/* Returns the address of T.  This function will fold away\n+   ADDR_EXPR of INDIRECT_REF.  */\n \n tree\n build_address (tree t)\n {\n-  tree addr;\n-\n   if (error_operand_p (t) || !cxx_mark_addressable (t))\n     return error_mark_node;\n-\n-  addr = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (t)), t);\n-\n-  return addr;\n+  t = build_fold_addr_expr (t);\n+  if (TREE_CODE (t) != ADDR_EXPR)\n+    t = rvalue (t);\n+  return t;\n }\n \n /* Return a NOP_EXPR converting EXPR to TYPE.  */"}]}