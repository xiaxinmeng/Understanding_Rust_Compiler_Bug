{"sha": "b4fcd7d228c190ca0ad22d263f7b579583b277ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRmY2Q3ZDIyOGMxOTBjYTBhZDIyZDI2M2Y3YjU3OTU4M2IyNzdlZg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2001-12-06T23:15:17Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-12-06T23:15:17Z"}, "message": "memcheck: Delete entire directory.\n\n\t* gcc.c-torture/execute/memcheck: Delete entire directory.\n\t(files: blkarg.c blkarg.x driver.c driver.h t1.c t2.c t3.c\n\tt4.c t5.c t6.c t7.c t8.c t9.c template memcheck.exp)\n\nFrom-SVN: r47736", "tree": {"sha": "2af8410b1debc6bf62e1d34c2e9910bd8a2cd38d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2af8410b1debc6bf62e1d34c2e9910bd8a2cd38d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4fcd7d228c190ca0ad22d263f7b579583b277ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4fcd7d228c190ca0ad22d263f7b579583b277ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4fcd7d228c190ca0ad22d263f7b579583b277ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4fcd7d228c190ca0ad22d263f7b579583b277ef/comments", "author": null, "committer": null, "parents": [{"sha": "5412ef6bba5b252ccb88f778025e6c21cc075883", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5412ef6bba5b252ccb88f778025e6c21cc075883", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5412ef6bba5b252ccb88f778025e6c21cc075883"}], "stats": {"total": 772, "additions": 6, "deletions": 766}, "files": [{"sha": "d182cda9bd4208a23be0aa578c1856f51b043355", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4fcd7d228c190ca0ad22d263f7b579583b277ef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4fcd7d228c190ca0ad22d263f7b579583b277ef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b4fcd7d228c190ca0ad22d263f7b579583b277ef", "patch": "@@ -1,3 +1,9 @@\n+2001-12-06  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* gcc.c-torture/execute/memcheck: Delete entire directory.\n+\t(files: blkarg.c blkarg.x driver.c driver.h t1.c t2.c t3.c\n+\tt4.c t5.c t6.c t7.c t8.c t9.c template memcheck.exp)\n+\n 2001-12-05  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* gcc.dg/Wshadow-1.c: New test."}, {"sha": "4f448d661d6709feecca9927a6fc4ae82fb476b3", "filename": "gcc/testsuite/gcc.c-torture/execute/memcheck/blkarg.c", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Fblkarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Fblkarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Fblkarg.c?ref=5412ef6bba5b252ccb88f778025e6c21cc075883", "patch": "@@ -1,75 +0,0 @@\n-/* Must define:\n-   int expect_error;\n-   void test ();\n-   void setup () NOCHECK; */\n-\n-#include \"driver.h\"\n-\n-/* Test permissions of BLKmode arguments constructed purely on the\n-   stack.\n-\n-   Maybe we can't guarantee that we'll always wind up with stack args,\n-   but if we don't, they're in registers, and permissions should just\n-   always yield success.  So while this test may not be effective on\n-   all platforms, failure probably does indicate a real bug.\n-\n-   Note that because of the implementation, we do want to test BLKmode\n-   arguments that live purely on the stack and are constructed there.\n-   We want to test other situations of function arguments, of course,\n-   but don't assume this case would be covered by using one monster\n-   argument that is read from memory (including using constructor\n-   syntax but constant values), or may live partially in registers.  */\n-\n-int expect_error = 0;\n-\n-/* Must be BLKmode.  Using only two fields gets TImode on Alpha.  */\n-struct S\n-{\n-  unsigned long long ll;\n-  long               xx;\n-  long               yy;\n-};\n-\n-unsigned long long   x = 0x12345689ULL;\n-#define I2\t     42\n-\n-static int first_time = 1;\n-\n-/* Leading ten arguments force struct S onto the stack on both Alpha and MIPS.  */\n-int\n-foo (int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10,\n-     struct S s)\n-{\n-  if (a1 != 1 || a2 != 2 || a3 != 3 || a4 != 4 || a5 != 5 || a6 != 6 || a7 != 7\n-      || a8 != 8 || a9 !=9 || a10 != 10)\n-    abort ();\n-  \n-  if (first_time)\n-    {\n-      if (s.ll != x || s.xx != I2 || s.yy != 0)\n-\tabort ();\n-      \n-      first_time = 0;\n-    }\n-  else\n-    {\n-      if (s.ll != 0 || s.xx != 0 || s.yy != 0)\n-\tabort ();\n-    }\n-  \n-  return 0;\n-}\n-\n-void\n-test ()\n-{\n-  foo (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, (struct S) { x, I2 });\n-  foo (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, (struct S) { 0 });\n-}\n-\n-void\n-setup () /* NOCHECK */\n-{\n-  mark_region (&x, sizeof (x), ACCESS_RO);\n-  mark_region (&first_time, sizeof (first_time), ACCESS_RW);\n-}"}, {"sha": "a56e2ca59b76c9a713d8585df2001a1021a7f833", "filename": "gcc/testsuite/gcc.c-torture/execute/memcheck/blkarg.x", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Fblkarg.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Fblkarg.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Fblkarg.x?ref=5412ef6bba5b252ccb88f778025e6c21cc075883", "patch": "@@ -1,10 +0,0 @@\n-# The memory checking code does not mark the stack as readable or writable\n-# so this test fails.  Ideally the memory checking library ought to \n-# cooperate with the host OS to mark the stack as it is used or individual\n-# function prologues and epilogues ought to mark their pieces of stack as \n-# writable and readable-after-written.\n-\n-# Setting XFAIL here creates noise because the test passes at\n-# random optimization levels for quite a number of targets.\n-# Don't run the test at all.\n-return 1"}, {"sha": "26803d84b34978d13712c4c1cd69cbc968751dbd", "filename": "gcc/testsuite/gcc.c-torture/execute/memcheck/driver.c", "status": "removed", "additions": 0, "deletions": 272, "changes": 272, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Fdriver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Fdriver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Fdriver.c?ref=5412ef6bba5b252ccb88f778025e6c21cc075883", "patch": "@@ -1,272 +0,0 @@\n-/* GNU C dependencies:\n-   Checker support hooks\n-   ISO C99 array element initialization\n-   void-pointer arithmetic */\n-\n-#include \"driver.h\"\n-\n-int verbose = 0;\n-int debug = 0;\n-int bad_accesses = 0;\n-\n-const char *const memory_use_strings[] =\n-{\n-#define INIT(x)\t\t[x] = #x\n-  INIT (MEMORY_USE_BAD),\n-  INIT (MEMORY_USE_DONT),\n-  INIT (MEMORY_USE_RO),\n-  INIT (MEMORY_USE_RW),\n-  INIT (MEMORY_USE_TW),\n-  INIT (MEMORY_USE_WO),\n-#undef INIT\n-};\n-\n-/* This won't be used for any really huge test cases, so a simple\n-   linked list is adequate.  We won't even worry about overlapping\n-   regions; the matching entry that comes up first wins.  */\n-const char *const access_mode_strings[] =\n-{\n-  \"none\", \"ro\", \"wo\", \"rw\",\n-};\n-struct access_node\n-{\n-  struct access_node *next;\n-  const void *addr;\n-  size_t sz;\n-  enum access_mode mode;\n-};\n-\n-static struct access_node *access_list;\n-\n-void\n-mark_region (const void *addr, size_t sz, enum access_mode mode)\n-{\n-  struct access_node *a;\n-  if (debug)\n-    printf (\"mark_region (%p, %ld, %s)\\n\", addr, (long) sz,\n-\t    access_mode_strings[mode]);\n-  a = malloc (sizeof (struct access_node));\n-  a->next = access_list;\n-  a->addr = addr;\n-  a->sz = sz;\n-  a->mode = mode;\n-  access_list = a;\n-}\n-\n-void report_bad_access (void *, size_t, enum memory_use_mode) NOCHECK;\n-void\n-report_bad_access (void *addr, size_t sz, enum memory_use_mode mode)\n-{\n-  if (++bad_accesses > 100)\n-    bad_accesses = 100;\n-  if (verbose)\n-    {\n-      static char x[100];\n-      const char *mode_str;\n-      if (mode >= 0\n-\t  && mode < sizeof (memory_use_strings) / sizeof (*memory_use_strings)\n-\t  && memory_use_strings[mode] != 0)\n-\tmode_str = memory_use_strings[mode];\n-      else\n-\t{\n-\t  sprintf (x, \"<bad mode %d>\", mode);\n-\t  mode_str = x;\n-\t}\n-      printf (\"bad access (%p, %ld, %s)\\n\", addr, (long) sz, mode_str);\n-    }\n-}\n-\n-int verify1 (void *, size_t, enum access_mode, struct access_node *) NOCHECK;\n-int\n-verify1 (void *addr, size_t sz, enum access_mode mode,\n-\t struct access_node *a)\n-{\n-  while (a && (addr + sz <= a->addr || addr >= a->addr + a->sz))\n-    a = a->next;\n-  if (a == 0)\n-    return 0;\n-\n-  if (debug)\n-    printf (\"verify1 (%p, %ld, %s)\\n\", addr, (long) sz,\n-\t    access_mode_strings[mode]);\n-\n-  if (mode & ~a->mode)\n-    return 0;\n-\n-  if (addr < a->addr)\n-    if (verify1 (a, a->addr - addr, mode, a->next) == 0)\n-      return 0;\n-  if (addr + sz > a->addr + a->sz)\n-    if (verify1 (a->addr + a->sz, (addr + sz) - (a->addr + a->sz), mode, a->next) == 0)\n-      return 0;\n-\n-  /* All regions okay.  */\n-  return 1;\n-}\n-\n-int verify_range_permission (void *, size_t, enum access_mode) NOCHECK;\n-int\n-verify_range_permission (void *addr, size_t sz, enum access_mode mode)\n-{\n-  if (debug)\n-    printf (\"verify_range_permission (%p, %ld, %s)\\n\", addr, (long) sz,\n-\t    access_mode_strings[mode]);\n-  return verify1 (addr, sz, mode, access_list);\n-}\n-\n-void chkr_check_addr (void *, size_t, int) NOCHECK;\n-void\n-chkr_check_addr (void *addr, size_t sz, int mode)\n-{\n-  switch (mode)\n-    {\n-    case MEMORY_USE_BAD:\n-    case MEMORY_USE_DONT:\n-    default:\n-      report_bad_access (addr, sz, mode);\n-      return;\n-    case MEMORY_USE_RO:\n-      /* verify range readable */\n-      if (!verify_range_permission (addr, sz, ACCESS_RO))\n-\treport_bad_access (addr, sz, mode);\n-      return;\n-    case MEMORY_USE_WO:\n-      /* verify writeable, set writeable and readable */\n-      if (!verify_range_permission (addr, sz, ACCESS_WO))\n-\treport_bad_access (addr, sz, mode);\n-      mark_region (addr, sz, ACCESS_RW);\n-      return;\n-    case MEMORY_USE_RW:\n-      /* verify readable and writeable, no change */\n-      if (!verify_range_permission (addr, sz, ACCESS_RW))\n-\treport_bad_access (addr, sz, mode);\n-      return;\n-    case MEMORY_USE_TW:\n-      /* verify writeable, no change */\n-      if (!verify_range_permission (addr, sz, ACCESS_WO))\n-\treport_bad_access (addr, sz, mode);\n-      return;\n-    }\n-  /* All branches should return.  */\n-  abort ();\n-}\n-\n-void copy1 (void *, void *, size_t, struct access_node *) NOCHECK;\n-void\n-copy1 (void *dest, void *src, size_t sz, struct access_node *a)\n-{\n-  while (a && (src + sz <= a->addr || src >= a->addr + a->sz))\n-    a = a->next;\n-  if (a == 0)\n-    {\n-      report_bad_access (src, sz, MEMORY_USE_RO);\n-      return;\n-    }\n-\n-  if (debug)\n-    printf (\"copy1 (%p, %p, %ld)\\n\", dest, src, (long) sz);\n-\n-  {\n-    void *start, *end;\n-    start = src;\n-    if (start < a->addr)\n-      start = a->addr;\n-    end = src + sz;\n-    if (end > a->addr + a->sz)\n-      end = a->addr + a->sz;\n-    mark_region (dest + (start - src), end - start, a->mode);\n-  }\n-\n-  if (src < a->addr)\n-    copy1 (dest, src, a->addr - src, a->next);\n-  if (src + sz > a->addr + a->sz)\n-    copy1 (dest + (a->addr + a->sz - src), a->addr + a->sz,\n-\t   (src + sz) - (a->addr + a->sz), a->next);\n-}\n-\n-void chkr_copy_bitmap (void *, void *, size_t) NOCHECK;\n-void\n-chkr_copy_bitmap (void *dest, void *src, size_t sz)\n-{\n-  if (verify_range_permission (dest, sz, MEMORY_USE_WO) == 0)\n-    report_bad_access (dest, sz, MEMORY_USE_WO);\n-  copy1 (dest, src, sz, access_list);\n-}\n-\n-void chkr_set_right (void *, size_t, enum access_mode) NOCHECK;\n-void\n-chkr_set_right (void *addr, size_t sz, enum access_mode mode)\n-{\n-  mark_region (addr, sz, mode);\n-}\n-\n-int main () NOCHECK;\n-int\n-main ()\n-{\n-  setup ();\n-  test ();\n-  bad_accesses = !!bad_accesses; /* get 0 or 1 */\n-  \n-  if (bad_accesses == expect_error)\n-    exit (0);\n-  else\n-    abort ();\n-  \n-  return 0;\n-}\n-\n-struct malloc_node\n-{\n-  struct malloc_node *next;\n-  void *addr;\n-  size_t sz;\n-  unsigned is_free : 1;\n-};\n-static struct malloc_node *malloc_list;\n-\n-void *\n-c_malloc (size_t sz)\n-{\n-  void *p;\n-  struct malloc_node *m;\n-  if (sz == 0)\n-    return 0;\n-  p = malloc (sz);\n-  if (p == 0)\n-    {\n-      if (verbose)\n-\tprintf (\"malloc(%ld) failed\\n\", (long) sz);\n-      exit (1);\n-    }\n-  m = malloc (sizeof (struct malloc_node));\n-  if (m == 0)\n-    {\n-      if (verbose)\n-\tprintf (\"malloc(%ld) failed\\n\", (long) sizeof (struct malloc_node));\n-      exit (1);\n-    }\n-  mark_region (p, sz, ACCESS_WO);\n-  m->addr = p;\n-  m->sz = sz;\n-  m->is_free = 0;\n-  m->next = malloc_list;\n-  malloc_list = m;\n-  return p;\n-}\n-\n-void\n-c_free (void *p)\n-{\n-  struct malloc_node *m;\n-  if (p == 0)\n-    return;\n-  for (m = malloc_list; m; m = m->next)\n-    if (m->addr == p)\n-      break;\n-  if (m == 0 || m->is_free)\n-    /* Test is broken.  */\n-    abort ();\n-  m->is_free = 1;\n-  free (p);\n-}"}, {"sha": "33086598cc91bcab481ab473dbaaa280791df573", "filename": "gcc/testsuite/gcc.c-torture/execute/memcheck/driver.h", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Fdriver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Fdriver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Fdriver.h?ref=5412ef6bba5b252ccb88f778025e6c21cc075883", "patch": "@@ -1,28 +0,0 @@\n-/* GNU C dependencies:\n-   Checker support hooks\n-   ISO C99 array element initialization\n-   void-pointer arithmetic */\n-\n-typedef __SIZE_TYPE__ size_t;\n-\n-extern void *malloc (size_t);\n-extern int printf (const char *, ...);\n-\n-/* This comes from gcc internals.  Should be exported.  */\n-enum memory_use_mode {MEMORY_USE_BAD = 0, MEMORY_USE_RO = 1,\n-\t\t      MEMORY_USE_WO = 2, MEMORY_USE_RW = 3,\n-\t\t      MEMORY_USE_TW = 6, MEMORY_USE_DONT = 99};\n-\n-enum access_mode {\n-  ACCESS_NONE = 0, ACCESS_RO = 1, ACCESS_WO = 2, ACCESS_RW = 3\n-};\n-\n-#define NOCHECK __attribute__ ((no_check_memory_usage))\n-\n-void mark_region (const void *, size_t, enum access_mode) NOCHECK;\n-void setup () NOCHECK;\n-void test ();\n-extern int expect_error;\n-\n-void *c_malloc (size_t) NOCHECK;\n-void c_free (void *) NOCHECK;"}, {"sha": "06d6a552c74ed0b1b53aaf31ba3c875e83653482", "filename": "gcc/testsuite/gcc.c-torture/execute/memcheck/memcheck.exp", "status": "removed", "additions": 0, "deletions": 87, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Fmemcheck.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Fmemcheck.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Fmemcheck.exp?ref=5412ef6bba5b252ccb88f778025e6c21cc075883", "patch": "@@ -1,87 +0,0 @@\n-# Copyright (C) 1991, 92-93, 95, 97, 1998 Free Software Foundation, Inc.\n-\n-# This program is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 2 of the License, or\n-# (at your option) any later version.\n-# \n-# This program is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-# \n-# You should have received a copy of the GNU General Public License\n-# along with this program; if not, write to the Free Software\n-# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. \n-\n-# This file was written by Rob Savoye. (rob@cygnus.com)\n-# Modified and maintained by Jeffrey Wheat (cassidy@cygnus.com)\n-\n-#\n-# These tests come from Torbjorn Granlund (tege@cygnus.com)\n-# C torture test suite.\n-#\n-\n-if $tracelevel then {\n-    strace $tracelevel\n-}\n-\n-# load support procs\n-load_lib c-torture.exp\n-\n-#\n-# main test loop\n-#\n-\n-set tests [lsort [glob -nocomplain $srcdir/$subdir/*.c]]\n-set idx [lsearch $tests */driver.c]\n-if $idx>=0 {\n-    set tests [lreplace $tests $idx $idx]\n-} else {\n-    error \"list can't find driver.c in $srcdir/$subdir\"\n-}\n-\n-# These don't work on AIX.  The constructors get run by a program built\n-# with -fcheck-memory-usage, which confuses the driver so much that\n-# they don't even link.\n-if { [istarget \"powerpc-*-aix*\"] \n-     || [istarget \"rs6000-*-aix*\"] } { \n-    set tests \"\" \n-}\n-\n-# Compiling driver.c on a remote host requires our ability to also\n-# find its driver.h header.\n-if [is_remote host] {\n-    remote_download host $srcdir/$subdir/driver.h\n-}\n-\n-#\n-#  Do the compile.\n-#\n-gcc_target_compile $srcdir/$subdir/driver.c driver.o object {additional_flags=-w additional_flags=-g}\n-\n-# In target.exp:default_target_compile, we download the resulting a.out\n-# to our local driver.o file, and delete a.out on the host.  This doesn't\n-# work for this set of tests, since each test needs to link against driver.o.\n-# So, to get around this we put it back.  This was chosen instead of actually\n-# modifying target.exp to somehow provide the option to keep the file on\n-# the remote host, since there aren't yet (in late 1999) enough tests\n-# doing this to warrant the change. \n-if [is_remote host] {\n-    remote_download host driver.o\n-}\n-\n-foreach src $tests {\n-    # If we're only testing specific files and this isn't one of them, skip it.\n-    if ![runtest_file_p $runtests $src] then {\n-\tcontinue\n-    }\n-\n-    c-torture-execute $src \"-fcheck-memory-usage driver.o\"\n-}\n-\n-# Clean up after ourselves.\n-if [is_remote host] {\n-    remote_file host delete driver.o\n-}\n-"}, {"sha": "d386eb7ebb144f1b8463abee56709d5cce1ad57c", "filename": "gcc/testsuite/gcc.c-torture/execute/memcheck/t2.c", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ft2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ft2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ft2.c?ref=5412ef6bba5b252ccb88f778025e6c21cc075883", "patch": "@@ -1,26 +0,0 @@\n-/* Must define:\n-   int expect_error;\n-   void test ();\n-   void setup () NOCHECK; */\n-\n-#include \"driver.h\"\n-\n-int expect_error = 1;\n-\n-int *ip;\n-\n-void test ()\n-{\n-  ip = c_malloc (sizeof (int));\n-  t2 ();\n-}\n-\n-int t2 ()\n-{\n-  return *ip;\n-}\n-\n-void setup () /* NOCHECK */\n-{\n-  mark_region (&ip, sizeof (ip), ACCESS_RW);\n-}"}, {"sha": "5b6333d4e8efd0a35602f353d20cfd04122fdd2d", "filename": "gcc/testsuite/gcc.c-torture/execute/memcheck/t3.c", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ft3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ft3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ft3.c?ref=5412ef6bba5b252ccb88f778025e6c21cc075883", "patch": "@@ -1,25 +0,0 @@\n-/* Must define:\n-   int expect_error;\n-   void test ();\n-   void setup () NOCHECK; */\n-\n-#include \"driver.h\"\n-\n-int expect_error = 0;\n-\n-int *ip;\n-\n-void test ()\n-{\n-  ip = c_malloc (sizeof (int));\n-  t2 (ip);\n-}\n-\n-int t2 (int *ip)\n-{\n-}\n-\n-void setup () /* NOCHECK */\n-{\n-  mark_region (&ip, sizeof (ip), ACCESS_RW);\n-}"}, {"sha": "25010a068184fed0071e88b9d6143f56024ccf50", "filename": "gcc/testsuite/gcc.c-torture/execute/memcheck/t4.c", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ft4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ft4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ft4.c?ref=5412ef6bba5b252ccb88f778025e6c21cc075883", "patch": "@@ -1,34 +0,0 @@\n-/* Must define:\n-   int expect_error;\n-   void test ();\n-   void setup () NOCHECK; */\n-\n-#include \"driver.h\"\n-\n-int expect_error = 0;\n-\n-struct s {\n-  char c;\n-  int a, b;\n-};\n-\n-struct s *sp;\n-\n-void test ()\n-{\n-  sp = c_malloc (sizeof (struct s));\n-  sp->c = 0;\n-  sp->a = 12;\n-  sp->b = 47;\n-  foo (sp);\n-}\n-\n-int foo (struct s *sp)\n-{\n-  return sp->c + sp->a + sp->b;\n-}\n-\n-void setup () /* NOCHECK */\n-{\n-  mark_region (&sp, sizeof (sp), ACCESS_RW);\n-}"}, {"sha": "c3bbf640517d9870483bd05e92faadafd5ddd2f2", "filename": "gcc/testsuite/gcc.c-torture/execute/memcheck/t5.c", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ft5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ft5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ft5.c?ref=5412ef6bba5b252ccb88f778025e6c21cc075883", "patch": "@@ -1,33 +0,0 @@\n-/* Must define:\n-   int expect_error;\n-   void test ();\n-   void setup () NOCHECK; */\n-\n-#include \"driver.h\"\n-\n-int expect_error = 1;\n-\n-struct s {\n-  char c;\n-  int a, b;\n-};\n-\n-struct s *sp;\n-\n-void test ()\n-{\n-  sp = c_malloc (sizeof (struct s));\n-  sp->c = 0;\n-  sp->b = 47;\n-  foo (sp);\n-}\n-\n-int foo (struct s *sp)\n-{\n-  return sp->c + sp->a + sp->b;\n-}\n-\n-void setup () /* NOCHECK */\n-{\n-  mark_region (&sp, sizeof (sp), ACCESS_RW);\n-}"}, {"sha": "652d33d0f8c620e5f938403e7710c8d12d779440", "filename": "gcc/testsuite/gcc.c-torture/execute/memcheck/t6.c", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ft6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ft6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ft6.c?ref=5412ef6bba5b252ccb88f778025e6c21cc075883", "patch": "@@ -1,39 +0,0 @@\n-/* Must define:\n-   int expect_error;\n-   void test ();\n-   void setup () NOCHECK; */\n-\n-#include \"driver.h\"\n-\n-int expect_error = 1;\n-\n-struct s {\n-  char c;\n-  int a, b;\n-};\n-\n-struct s *sp;\n-\n-void test ()\n-{\n-  sp = c_malloc (sizeof (struct s) * 2);\n-  sp->c = 0;\n-  sp->b = 47;\n-  cp (sp);\n-  foo (sp);\n-}\n-\n-int foo (struct s *sp)\n-{\n-  return sp[1].c + sp[1].a + sp[1].b;\n-}\n-\n-int cp (struct s *sp)\n-{\n-  sp[1] = sp[0];\n-}\n-\n-void setup () /* NOCHECK */\n-{\n-  mark_region (&sp, sizeof (sp), ACCESS_RW);\n-}"}, {"sha": "a7c6f5127ed8584bcb7149aca0aba87e254159bd", "filename": "gcc/testsuite/gcc.c-torture/execute/memcheck/t7.c", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ft7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ft7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ft7.c?ref=5412ef6bba5b252ccb88f778025e6c21cc075883", "patch": "@@ -1,40 +0,0 @@\n-/* Must define:\n-   int expect_error;\n-   void test ();\n-   void setup () NOCHECK; */\n-\n-#include \"driver.h\"\n-\n-int expect_error = 0;\n-\n-struct s {\n-  char c;\n-  int a, b;\n-};\n-\n-struct s *sp;\n-\n-void test ()\n-{\n-  sp = c_malloc (sizeof (struct s) * 2);\n-  sp->c = 0;\n-  sp->a = 13;\n-  sp->b = 47;\n-  cp (sp);\n-  foo (sp);\n-}\n-\n-int foo (struct s *sp)\n-{\n-  return sp[1].c + sp[1].a + sp[1].b;\n-}\n-\n-int cp (struct s *sp)\n-{\n-  sp[1] = sp[0];\n-}\n-\n-void setup () /* NOCHECK */\n-{\n-  mark_region (&sp, sizeof (sp), ACCESS_RW);\n-}"}, {"sha": "01c167247f8606e660ab0e12e40c14c9bcb07da2", "filename": "gcc/testsuite/gcc.c-torture/execute/memcheck/t8.c", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ft8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ft8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ft8.c?ref=5412ef6bba5b252ccb88f778025e6c21cc075883", "patch": "@@ -1,41 +0,0 @@\n-/* Must define:\n-   int expect_error;\n-   void test ();\n-   void setup () NOCHECK; */\n-\n-#include \"driver.h\"\n-\n-int expect_error = 0;\n-\n-typedef struct {\n-  short a;\n-  char b;\n-} S1;\n-typedef struct {\n-  struct { int x; S1 *s1p; } *p;\n-} S2;\n-\n-S1 *s1;\n-S2 *s2;\n-\n-void test ()\n-{\n-  s1 = c_malloc (sizeof (S1));\n-  s2 = c_malloc (sizeof (S2));\n-  s2->p = c_malloc (sizeof (*s2->p));\n-  s2->p->s1p = s1;\n-  s1->a = 47;\n-  s1->b = 3;\n-  foo ();\n-}\n-\n-int foo ()\n-{\n-  return s2->p->s1p->b;\n-}\n-\n-void setup () /* NOCHECK */\n-{\n-  mark_region (&s1, sizeof (s1), ACCESS_RW);\n-  mark_region (&s2, sizeof (s2), ACCESS_RW);\n-}"}, {"sha": "f32ca011dd83412fb84242f956063a5948959670", "filename": "gcc/testsuite/gcc.c-torture/execute/memcheck/t9.c", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ft9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ft9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ft9.c?ref=5412ef6bba5b252ccb88f778025e6c21cc075883", "patch": "@@ -1,40 +0,0 @@\n-/* Must define:\n-   int expect_error;\n-   void test ();\n-   void setup () NOCHECK; */\n-\n-#include \"driver.h\"\n-\n-int expect_error = 1;\n-\n-typedef struct {\n-  short a;\n-  char b;\n-} S1;\n-typedef struct {\n-  struct { int x; S1 *s1p; } *p;\n-} S2;\n-\n-S1 *s1;\n-S2 *s2;\n-\n-void test ()\n-{\n-  s1 = c_malloc (sizeof (S1));\n-  s2 = c_malloc (sizeof (S2));\n-  s2->p = c_malloc (sizeof (*s2->p));\n-  s2->p->s1p = s1;\n-  s1->a = 47;\n-  foo ();\n-}\n-\n-int foo ()\n-{\n-  return s2->p->s1p->b;\n-}\n-\n-void setup () /* NOCHECK */\n-{\n-  mark_region (&s1, sizeof (s1), ACCESS_RW);\n-  mark_region (&s2, sizeof (s2), ACCESS_RW);\n-}"}, {"sha": "37ebb137c87fb9076ef880a4ec2b9ca122dddabc", "filename": "gcc/testsuite/gcc.c-torture/execute/memcheck/template", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ftemplate", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5412ef6bba5b252ccb88f778025e6c21cc075883/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ftemplate", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcheck%2Ftemplate?ref=5412ef6bba5b252ccb88f778025e6c21cc075883", "patch": "@@ -1,16 +0,0 @@\n-/* Must define:\n-   int expect_error;\n-   void test ();\n-   void setup () NOCHECK; */\n-\n-#include \"driver.h\"\n-\n-int expect_error = ;\n-\n-void test ()\n-{\n-}\n-\n-void setup () /* NOCHECK */\n-{\n-}"}]}