{"sha": "71152e6da2bee37e9f90d4da37cd6514826ed379", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzExNTJlNmRhMmJlZTM3ZTlmOTBkNGRhMzdjZDY1MTQ4MjZlZDM3OQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "1999-11-05T10:38:01Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1999-11-05T10:38:01Z"}, "message": "Create proc to test for alias attribute support from targets.\n\nUse this test to disable ecos tests for alias support if the target does not\nsupport them.\n\nFrom-SVN: r30415", "tree": {"sha": "992def5c6c86b53800439bfca8098f38c9ae8b0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/992def5c6c86b53800439bfca8098f38c9ae8b0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71152e6da2bee37e9f90d4da37cd6514826ed379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71152e6da2bee37e9f90d4da37cd6514826ed379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71152e6da2bee37e9f90d4da37cd6514826ed379", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71152e6da2bee37e9f90d4da37cd6514826ed379/comments", "author": null, "committer": null, "parents": [{"sha": "8c36698e5207d286292375e844faf9c95c35ce42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c36698e5207d286292375e844faf9c95c35ce42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c36698e5207d286292375e844faf9c95c35ce42"}], "stats": {"total": 148, "additions": 120, "deletions": 28}, "files": [{"sha": "eef48413fe70174ff684b70099b87fea7f3e14fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71152e6da2bee37e9f90d4da37cd6514826ed379/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71152e6da2bee37e9f90d4da37cd6514826ed379/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=71152e6da2bee37e9f90d4da37cd6514826ed379", "patch": "@@ -1,5 +1,18 @@\n 1999-11-05  Nick Clifton  <nickc@cygnus.com>\n \n+\t* lib/target-supports.exp: New file: Provide procs to test for \n+\tfeatures supported by the target.\n+\t(check_weak_available): Moved here from ecos.exp.\n+\t(check_alias_available): New proc: Determine of the target\n+\ttoolchain supports the alias attribute.\n+\t\n+\t* gcc.dg/special/ecos.exp: Move check_weak_available to\n+\ttarget-supports.exp. \n+\t(alias-1.c): Only perform the test if the target supports\n+\taliases. \n+\t(wkali-1.c): Only perform the test if the target supports\n+\taliases. \n+\n \t* gcc.dg/990506-0.c: Expect error messages from cross\n \ttargets as well as native targets.\n "}, {"sha": "f944de92c3f20836786399074315a81a7da5603d", "filename": "gcc/testsuite/gcc.dg/special/ecos.exp", "status": "modified", "additions": 11, "deletions": 28, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71152e6da2bee37e9f90d4da37cd6514826ed379/gcc%2Ftestsuite%2Fgcc.dg%2Fspecial%2Fecos.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71152e6da2bee37e9f90d4da37cd6514826ed379/gcc%2Ftestsuite%2Fgcc.dg%2Fspecial%2Fecos.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspecial%2Fecos.exp?ref=71152e6da2bee37e9f90d4da37cd6514826ed379", "patch": "@@ -32,32 +32,7 @@ load_lib gcc-dg.exp\n ###############################\n # proc check_weak_available { }\n ###############################\n-\n-# weak symbols are only supported in some configs/object formats\n-# this proc returns 1 if they're support, 0 if they're not, or -1 if unsure\n-\n-proc check_weak_available { } {\n-    global target_cpu\n-\n-    # All mips targets should support it\n-    \n-    if { [ string first \"mips\" $target_cpu ] >= 0 } {\n-        return 1\n-    }\n-\n-    # ELF and ECOFF support it. a.out does with gas/gld but may also with\n-    # other linkers, so we should try it\n-\n-    set objformat [gcc_target_object_format]\n-\n-    switch $objformat {\n-        elf      { return 1 }\n-        ecoff    { return 1 }\n-        a.out    { return 1 }\n-        unknown  { return -1 }\n-        default  { return 0 }\n-    }\n-}\n+# has been moved to:  gcc/testsuite/lib/target-supports.exp\n \n ##########\n # weak-1.c\n@@ -111,15 +86,23 @@ if { [ check_weak_available ] == 1 } {\n ###########\n \n dg-init\n-dg-runtest \"$srcdir/$subdir/alias-1.c\" \"\" \"\"\n+switch [check_alias_available \"$srcdir/$subdir/alias-1.c\"] {\n+    yes     { dg-runtest \"$srcdir/$subdir/alias-1.c\" \"\" \"\" }\n+    no      { unsupported \"alias-1.c\" }\n+    default { fail \"alias-1.c\" }\n+}\n dg-finish\n \n ###########\n # wkali-1.c\n ###########\n \n dg-init\n-dg-runtest \"$srcdir/$subdir/wkali-1.c\" \"\" \"\"\n+switch [check_alias_available \"$srcdir/$subdir/wkali-1.c\"] {\n+    yes     { dg-runtest \"$srcdir/$subdir/wkali-1.c\" \"\" \"\" }\n+    no      { unsupported \"wkali-1.c\" }\n+    default { fail \"wkali-1.c\" }\n+}\n dg-finish\n \n ###########"}, {"sha": "35f1188035a7ba4c2c45c2f89ef4f8da0924551a", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71152e6da2bee37e9f90d4da37cd6514826ed379/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71152e6da2bee37e9f90d4da37cd6514826ed379/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=71152e6da2bee37e9f90d4da37cd6514826ed379", "patch": "@@ -0,0 +1,96 @@\n+#   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+# Please email any bugs, comments, and/or additions to this file to:\n+# gcc-patches@gcc.gnu.org\n+\n+# This file defines procs for determining features supported by the target.\n+\n+###############################\n+# proc check_weak_available { }\n+###############################\n+\n+# weak symbols are only supported in some configs/object formats\n+# this proc returns 1 if they're supported, 0 if they're not, or -1 if unsure\n+\n+proc check_weak_available { } {\n+    global target_cpu\n+\n+    # All mips targets should support it\n+    \n+    if { [ string first \"mips\" $target_cpu ] >= 0 } {\n+        return 1\n+    }\n+\n+    # ELF and ECOFF support it. a.out does with gas/gld but may also with\n+    # other linkers, so we should try it\n+\n+    set objformat [gcc_target_object_format]\n+\n+    switch $objformat {\n+        elf      { return 1 }\n+        ecoff    { return 1 }\n+        a.out    { return 1 }\n+        unknown  { return -1 }\n+        default  { return 0 }\n+    }\n+}\n+\n+###############################\n+# proc check_alias_available { }\n+###############################\n+\n+# Determine if the target toolchain supports the alias attribute.\n+# Parameter is the pathname of a file that can be used to test the alias support.\n+# Returns yes if it does.\n+# Returns no if it does not.\n+# Returns dontknow if something went wrong\n+# For an example of the use of this function, see gcc.dg/special/ecos.exp\n+\n+proc check_alias_available { testfile } {\n+    global alias_available_saved\n+    \n+    if [info exists alias_available_saved] {\n+        verbose \"check_alias_available  returning saved $alias_available_saved\" 2\n+    } else {\n+        verbose \"check_alias_available  compiling testfile $testfile\" 2\n+\tset lines [gcc_target_compile $testfile \"tmp.o\" object \"\"]\n+\t\n+\tif [string match \"\" $lines] then {\n+\t    # No error messages, everything is OK.\n+\t    set alias_available_saved yes\n+\t} else {\n+\t    if [regexp \"alias definitions not supported\" $lines] {\n+\t\tverbose \"check_alias_available  target does not support aliases\" 2\n+\n+\t\tset objformat [gcc_target_object_format]\n+\n+\t\tif { $objformat == \"elf\" } {\n+\t\t    verbose \"check_alias_available  but target uses ELF format, so it ought to\" 2\n+\t\t    set alias_available_saved dontknow\n+\t\t} else {\n+\t\t    set alias_available_saved no\n+\t\t}\n+\t    } else {\n+\t\tset alias_available_saved dontknow\n+\t    }\n+\t}\n+\t\n+\tverbose \"check_alias_available  returning $alias_available_saved\" 2\n+    }\n+\n+    return $alias_available_saved\n+}"}]}