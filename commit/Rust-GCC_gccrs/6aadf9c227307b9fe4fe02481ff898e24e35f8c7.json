{"sha": "6aadf9c227307b9fe4fe02481ff898e24e35f8c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFhZGY5YzIyNzMwN2I5ZmU0ZmUwMjQ4MWZmODk4ZTI0ZTM1ZjhjNw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-26T23:29:45Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-26T23:29:45Z"}, "message": "(___builtin_saveregs): New alternative for __PARAGON__.\n\nFrom-SVN: r5907", "tree": {"sha": "9c0797a8a344eec274891ada555a2b0ed3e3dd0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c0797a8a344eec274891ada555a2b0ed3e3dd0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6aadf9c227307b9fe4fe02481ff898e24e35f8c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aadf9c227307b9fe4fe02481ff898e24e35f8c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aadf9c227307b9fe4fe02481ff898e24e35f8c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aadf9c227307b9fe4fe02481ff898e24e35f8c7/comments", "author": null, "committer": null, "parents": [{"sha": "237157dc44a08e04d867f5fe0b627f32216b4a52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/237157dc44a08e04d867f5fe0b627f32216b4a52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/237157dc44a08e04d867f5fe0b627f32216b4a52"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "5feeffd1bb2dece0fd291176eca5f54b4f53a4d9", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aadf9c227307b9fe4fe02481ff898e24e35f8c7/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aadf9c227307b9fe4fe02481ff898e24e35f8c7/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=6aadf9c227307b9fe4fe02481ff898e24e35f8c7", "patch": "@@ -1189,6 +1189,73 @@ asm (\"___builtin_saveregs:\");\n \tasm (\"\tst.l\t%r28,12(%r16)\"); /* pointer to overflow args */\n \n #else /* not __svr4__ */\n+#if defined(__PARAGON__)\n+\t/*\n+\t *\twe'll use SVR4-ish varargs but need SVR3.2 assembler syntax,\n+\t *\tand we stand a better chance of hooking into libraries\n+\t *\tcompiled by PGI.  [andyp@ssd.intel.com]\n+\t */\n+\tasm (\"\t.text\");\n+\tasm (\"\t.align\t4\");\n+\tasm (\".globl\t__builtin_saveregs\");\n+asm (\"__builtin_saveregs:\");\n+\tasm (\".globl\t___builtin_saveregs\");\n+asm (\"___builtin_saveregs:\");\n+\n+        asm (\"\tandnot\t0x0f,sp,sp\");\t/* round down to 16-byte boundary */\n+\tasm (\"\tadds\t-96,sp,sp\");\t/* allocate stack space for reg save\n+\t\t\t\t\t   area and also for a new va_list\n+\t\t\t\t\t   structure */\n+\t/* Save all argument registers in the arg reg save area.  The\n+\t   arg reg save area must have the following layout (according\n+\t   to the svr4 ABI):\n+\n+\t\tstruct {\n+\t\t  union  {\n+\t\t    float freg[8];\n+\t\t    double dreg[4];\n+\t\t  } float_regs;\n+\t\t  long\tireg[12];\n+\t\t};\n+\t*/\n+\n+\tasm (\"\tfst.q\tf8,  0(sp)\");\n+\tasm (\"\tfst.q\tf12,16(sp)\"); \n+\tasm (\"\tst.l\tr16,32(sp)\");\n+\tasm (\"\tst.l\tr17,36(sp)\"); \n+\tasm (\"\tst.l\tr18,40(sp)\");\n+\tasm (\"\tst.l\tr19,44(sp)\");\n+\tasm (\"\tst.l\tr20,48(sp)\");\n+\tasm (\"\tst.l\tr21,52(sp)\");\n+\tasm (\"\tst.l\tr22,56(sp)\");\n+\tasm (\"\tst.l\tr23,60(sp)\");\n+\tasm (\"\tst.l\tr24,64(sp)\");\n+\tasm (\"\tst.l\tr25,68(sp)\");\n+\tasm (\"\tst.l\tr26,72(sp)\");\n+\tasm (\"\tst.l\tr27,76(sp)\");\n+\n+\tasm (\"\tadds\t80,sp,r16\");  /* compute the address of the new\n+\t\t\t\t\t   va_list structure.  Put in into\n+\t\t\t\t\t   r16 so that it will be returned\n+\t\t\t\t\t   to the caller.  */\n+\n+\t/* Initialize all fields of the new va_list structure.  This\n+\t   structure looks like:\n+\n+\t\ttypedef struct {\n+\t\t    unsigned long\tireg_used;\n+\t\t    unsigned long\tfreg_used;\n+\t\t    long\t\t*reg_base;\n+\t\t    long\t\t*mem_ptr;\n+\t\t} va_list;\n+\t*/\n+\n+\tasm (\"\tst.l\tr0, 0(r16)\"); /* nfixed */\n+\tasm (\"\tst.l\tr0, 4(r16)\"); /* nfloating */\n+\tasm (\"  st.l    sp, 8(r16)\"); /* __va_ctl points to __va_struct.  */\n+\tasm (\"\tbri\tr1\");\t\t/* delayed return */\n+\tasm (\"\t st.l\tr28,12(r16)\"); /* pointer to overflow args */\n+#else /* not __PARAGON__ */\n \tasm (\"\t.text\");\n \tasm (\"\t.align\t4\");\n \n@@ -1226,6 +1293,7 @@ asm (\"___builtin_saveregs:\");\n \tasm (\"\tmov\tr30,sp\");\n \t\t\t\t/* recover stack and pass address to start \n \t\t\t\t   of data.  */\n+#endif /* not __PARAGON__ */\n #endif /* not __svr4__ */\n #else /* not __i860__ */\n #ifdef __sparc__"}]}