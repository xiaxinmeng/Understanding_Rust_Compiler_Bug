{"sha": "94c40e19af4ca5fe57c990df7f7abec48f5aa3af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRjNDBlMTlhZjRjYTVmZTU3Yzk5MGRmN2Y3YWJlYzQ4ZjVhYTNhZg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-12-17T21:25:36Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-12-17T21:25:36Z"}, "message": "C FE: improvements to ranges of bad return values\n\ngcc/c/ChangeLog:\n\t* c-parser.c (c_parser_statement_after_labels): When calling\n\tc_finish_return, Use the return expression's location if it has\n\tone, falling back to the location of the first token within it.\n\t* c-typeck.c (c_finish_return): When issuing warnings about\n\tthe incorrect presence/absence of a return value, issue a note\n\tshowing the declaration of the function.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/diagnostic-range-bad-return.c: New test case.\n\nFrom-SVN: r231786", "tree": {"sha": "4c095463412043a04cc04af52d434df35a82c396", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c095463412043a04cc04af52d434df35a82c396"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94c40e19af4ca5fe57c990df7f7abec48f5aa3af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94c40e19af4ca5fe57c990df7f7abec48f5aa3af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94c40e19af4ca5fe57c990df7f7abec48f5aa3af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94c40e19af4ca5fe57c990df7f7abec48f5aa3af/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f"}], "stats": {"total": 96, "additions": 87, "deletions": 9}, "files": [{"sha": "7c1247d120e25a2920bcbe15d4194fadbe6753f2", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94c40e19af4ca5fe57c990df7f7abec48f5aa3af/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94c40e19af4ca5fe57c990df7f7abec48f5aa3af/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=94c40e19af4ca5fe57c990df7f7abec48f5aa3af", "patch": "@@ -1,3 +1,12 @@\n+2015-12-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-parser.c (c_parser_statement_after_labels): When calling\n+\tc_finish_return, Use the return expression's location if it has\n+\tone, falling back to the location of the first token within it.\n+\t* c-typeck.c (c_finish_return): When issuing warnings about\n+\tthe incorrect presence/absence of a return value, issue a note\n+\tshowing the declaration of the function.\n+\n 2015-12-16  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-parser.c (struct c_parser): Expand array \"tokens_buf\" from 2"}, {"sha": "353e3da5377b18dba21da0615717027b3a4d2364", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94c40e19af4ca5fe57c990df7f7abec48f5aa3af/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94c40e19af4ca5fe57c990df7f7abec48f5aa3af/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=94c40e19af4ca5fe57c990df7f7abec48f5aa3af", "patch": "@@ -5179,7 +5179,8 @@ c_parser_statement_after_labels (c_parser *parser, vec<tree> *chain)\n \t      location_t xloc = c_parser_peek_token (parser)->location;\n \t      struct c_expr expr = c_parser_expression_conv (parser);\n \t      mark_exp_read (expr.value);\n-\t      stmt = c_finish_return (xloc, expr.value, expr.original_type);\n+\t      stmt = c_finish_return (EXPR_LOC_OR_LOC (expr.value, xloc),\n+\t\t\t\t      expr.value, expr.original_type);\n \t      goto expect_semicolon;\n \t    }\n \t  break;"}, {"sha": "b605f81fb43b504c277e37802cd8a547708b229b", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94c40e19af4ca5fe57c990df7f7abec48f5aa3af/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94c40e19af4ca5fe57c990df7f7abec48f5aa3af/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=94c40e19af4ca5fe57c990df7f7abec48f5aa3af", "patch": "@@ -9545,24 +9545,36 @@ c_finish_return (location_t loc, tree retval, tree origtype)\n       if ((warn_return_type || flag_isoc99)\n \t  && valtype != 0 && TREE_CODE (valtype) != VOID_TYPE)\n \t{\n+\t  bool warned_here;\n \t  if (flag_isoc99)\n-\t    pedwarn (loc, 0, \"%<return%> with no value, in \"\n-\t\t     \"function returning non-void\");\n+\t    warned_here = pedwarn\n+\t      (loc, 0,\n+\t       \"%<return%> with no value, in function returning non-void\");\n \t  else\n-\t    warning_at (loc, OPT_Wreturn_type, \"%<return%> with no value, \"\n-\t\t\t\"in function returning non-void\");\n+\t    warned_here = warning_at\n+\t      (loc, OPT_Wreturn_type,\n+\t       \"%<return%> with no value, in function returning non-void\");\n \t  no_warning = true;\n+\t  if (warned_here)\n+\t    inform (DECL_SOURCE_LOCATION (current_function_decl),\n+\t\t    \"declared here\");\n \t}\n     }\n   else if (valtype == 0 || TREE_CODE (valtype) == VOID_TYPE)\n     {\n       current_function_returns_null = 1;\n+      bool warned_here;\n       if (TREE_CODE (TREE_TYPE (retval)) != VOID_TYPE)\n-\tpedwarn (xloc, 0,\n-\t\t \"%<return%> with a value, in function returning void\");\n+\twarned_here = pedwarn\n+\t  (xloc, 0,\n+\t   \"%<return%> with a value, in function returning void\");\n       else\n-\tpedwarn (xloc, OPT_Wpedantic, \"ISO C forbids \"\n-\t\t \"%<return%> with expression, in function returning void\");\n+\twarned_here = pedwarn\n+\t  (xloc, OPT_Wpedantic, \"ISO C forbids \"\n+\t   \"%<return%> with expression, in function returning void\");\n+      if (warned_here)\n+\tinform (DECL_SOURCE_LOCATION (current_function_decl),\n+\t\t\"declared here\");\n     }\n   else\n     {"}, {"sha": "2cbde3b85527813172873d1ad12c7f402fdc6cc7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94c40e19af4ca5fe57c990df7f7abec48f5aa3af/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94c40e19af4ca5fe57c990df7f7abec48f5aa3af/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=94c40e19af4ca5fe57c990df7f7abec48f5aa3af", "patch": "@@ -1,3 +1,7 @@\n+2015-12-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/diagnostic-range-bad-return.c: New test case.\n+\n 2015-12-17  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/68946"}, {"sha": "063fdf1f6360b38177691836e519c6fbad521be6", "filename": "gcc/testsuite/gcc.dg/diagnostic-range-bad-return.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94c40e19af4ca5fe57c990df7f7abec48f5aa3af/gcc%2Ftestsuite%2Fgcc.dg%2Fdiagnostic-range-bad-return.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94c40e19af4ca5fe57c990df7f7abec48f5aa3af/gcc%2Ftestsuite%2Fgcc.dg%2Fdiagnostic-range-bad-return.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdiagnostic-range-bad-return.c?ref=94c40e19af4ca5fe57c990df7f7abec48f5aa3af", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-options \"-fdiagnostics-show-caret -Wreturn-local-addr\" } */\n+\n+int *address_of_local (void)\n+{\n+  int some_local;\n+  return &some_local; /* { dg-warning \"function returns address of local variable\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   return &some_local;\n+          ^~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+void surplus_return_when_void_1 (void)\n+{\n+  return 500; /* { dg-warning \"'return' with a value, in function returning void\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   return 500;\n+          ^~~\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ void surplus_return_when_void_1 (void)\n+      ^~~~~~~~~~~~~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+void surplus_return_when_void_2 (int i, int j)\n+{\n+  return i * j; /* { dg-warning \"'return' with a value, in function returning void\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   return i * j;\n+          ~~^~~\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ void surplus_return_when_void_2 (int i, int j)\n+      ^~~~~~~~~~~~~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+int missing_return_value (void)\n+{\n+  return; /* { dg-warning \"'return' with no value, in function returning non-void\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   return;\n+   ^~~~~~\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ int missing_return_value (void)\n+     ^~~~~~~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+/* TODO: ideally we'd underline the return type i.e. \"int\", but that\n+   location isn't captured.  */\n+}"}]}