{"sha": "fa23b182095ab7bd85605c62f2209c439b8a8018", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEyM2IxODIwOTVhYjdiZDg1NjA1YzYyZjIyMDljNDM5YjhhODAxOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-01-16T16:42:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-01-16T16:42:37Z"}, "message": "re PR fortran/46416 (libquadmath: missing functions)\n\n\tPR fortran/46416\n\t* quadmath.h (cacosq, cacoshq, casinq, casinhq, catanq, catanhq):\n\tNew prototypes.\n\t(M_Eq, M_LOG2Eq, M_LOG10Eq, M_LN2q, M_LN10q, M_PIq, M_PI_2q, M_PI_4q,\n\tM_1_PIq, M_2_PIq, M_2_SQRTPIq, M_SQRT2q, M_SQRT1_2q): Define.\n\t* quadmath_weak.h (cacosq, cacoshq, casinq, casinhq, catanq,\n\tcatanhq): Add.\n\t* quadmath-imp.h (fpclassifyq, QUADFP_NAN, QUADFP_INFINITE,\n\tQUADFP_ZERO, QUADFP_SUBNORMAL, QUADFP_NORMAL): Define.\n\t* quadmath.map (QUADMATH_1.0): Add cacosq, cacoshq, casinq, casinhq,\n\tcatanq and catanhq.\n\t* Makefile.am (libquadmath_la_SOURCES): Add math/cacosq.c,\n\tmath/cacoshq.c, math/casinq.c, math/casinhq.c, math/catanq.c\n\tand math/catanhq.c.\n\t* Makefile.in: Regenerated.\n\t* libquadmath.texi (cacosq, cacoshq, casinq, casinhq,\n\tcatanq, catanhq): Add.\n\t* math/cacoshq.c: New file.\n\t* math/cacosq.c: New file.\n\t* math/catanq.c: New file.\n\t* math/catanhq.c: New file.\n\t* math/casinq.c: New file.\n\t* math/casinhq.c: New file.\n\n\t* math/hypotq.c (hypotq): Use Q suffix instead of L.\n\t* math/atan2q.c (tiny, pi_o_4, pi_o_2, pi, pi_lo, atan2q): Likewise.\n\t* math/cosq.c (cosq): Likewise.\n\nFrom-SVN: r168853", "tree": {"sha": "d5f9fa3730934400e8a107bce022ccd7da1bcf83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5f9fa3730934400e8a107bce022ccd7da1bcf83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa23b182095ab7bd85605c62f2209c439b8a8018", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa23b182095ab7bd85605c62f2209c439b8a8018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa23b182095ab7bd85605c62f2209c439b8a8018", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa23b182095ab7bd85605c62f2209c439b8a8018/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e8d42d280e1be1670d0ef09eb7bd78574082b5f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8d42d280e1be1670d0ef09eb7bd78574082b5f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8d42d280e1be1670d0ef09eb7bd78574082b5f0"}], "stats": {"total": 556, "additions": 540, "deletions": 16}, "files": [{"sha": "b7b7a43aa6b10fdfd628e10a1247bc3d641993de", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=fa23b182095ab7bd85605c62f2209c439b8a8018", "patch": "@@ -1,5 +1,33 @@\n 2011-01-16  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR fortran/46416\n+\t* quadmath.h (cacosq, cacoshq, casinq, casinhq, catanq, catanhq):\n+\tNew prototypes.\n+\t(M_Eq, M_LOG2Eq, M_LOG10Eq, M_LN2q, M_LN10q, M_PIq, M_PI_2q, M_PI_4q,\n+\tM_1_PIq, M_2_PIq, M_2_SQRTPIq, M_SQRT2q, M_SQRT1_2q): Define.\n+\t* quadmath_weak.h (cacosq, cacoshq, casinq, casinhq, catanq,\n+\tcatanhq): Add.\n+\t* quadmath-imp.h (fpclassifyq, QUADFP_NAN, QUADFP_INFINITE,\n+\tQUADFP_ZERO, QUADFP_SUBNORMAL, QUADFP_NORMAL): Define.\n+\t* quadmath.map (QUADMATH_1.0): Add cacosq, cacoshq, casinq, casinhq,\n+\tcatanq and catanhq.\n+\t* Makefile.am (libquadmath_la_SOURCES): Add math/cacosq.c,\n+\tmath/cacoshq.c, math/casinq.c, math/casinhq.c, math/catanq.c\n+\tand math/catanhq.c.\n+\t* Makefile.in: Regenerated.\n+\t* libquadmath.texi (cacosq, cacoshq, casinq, casinhq,\n+\tcatanq, catanhq): Add.\n+\t* math/cacoshq.c: New file.\n+\t* math/cacosq.c: New file.\n+\t* math/catanq.c: New file.\n+\t* math/catanhq.c: New file.\n+\t* math/casinq.c: New file.\n+\t* math/casinhq.c: New file.\n+\n+\t* math/hypotq.c (hypotq): Use Q suffix instead of L.\n+\t* math/atan2q.c (tiny, pi_o_4, pi_o_2, pi, pi_lo, atan2q): Likewise.\n+\t* math/cosq.c (cosq): Likewise.\n+\n \tPR fortran/46402\n \t* quadmath.map (QUADMATH_1.0): Add fmaq.\n \t* configure.ac: Check for fenv.h, feholdexcept, fesetround,"}, {"sha": "0a5c27f4875e3cf54d8df32e45fa9efaf60fbf08", "filename": "libquadmath/Makefile.am", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FMakefile.am?ref=fa23b182095ab7bd85605c62f2209c439b8a8018", "patch": "@@ -61,7 +61,9 @@ libquadmath_la_SOURCES = \\\n   math/erfq.c math/logq.c math/sqrtq.c math/expm1q.c math/lroundq.c \\\n   math/tanhq.c math/expq.c math/modfq.c math/tanq.c math/fabsq.c \\\n   math/nanq.c math/tgammaq.c math/finiteq.c math/nextafterq.c \\\n-  math/truncq.c math/floorq.c math/powq.c math/fmaq.c\n+  math/truncq.c math/floorq.c math/powq.c math/fmaq.c \\\n+  math/cacoshq.c math/cacosq.c math/casinhq.c math/casinq.c \\\n+  math/catanhq.c math/catanq.c\n \n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and"}, {"sha": "2fdebebbd7e5675991497c61b8f676e7d75b0c1a", "filename": "libquadmath/Makefile.in", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FMakefile.in?ref=fa23b182095ab7bd85605c62f2209c439b8a8018", "patch": "@@ -122,7 +122,10 @@ am__dirstamp = $(am__leading_dot)dirstamp\n @BUILD_LIBQUADMATH_TRUE@\tmath/nanq.lo math/tgammaq.lo \\\n @BUILD_LIBQUADMATH_TRUE@\tmath/finiteq.lo math/nextafterq.lo \\\n @BUILD_LIBQUADMATH_TRUE@\tmath/truncq.lo math/floorq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/powq.lo math/fmaq.lo\n+@BUILD_LIBQUADMATH_TRUE@\tmath/powq.lo math/fmaq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/cacoshq.lo math/cacosq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/casinhq.lo math/casinq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/catanhq.lo math/catanq.lo\n libquadmath_la_OBJECTS = $(am_libquadmath_la_OBJECTS)\n libquadmath_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \\\n \t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\\n@@ -324,7 +327,9 @@ AUTOMAKE_OPTIONS = 1.8 foreign\n @BUILD_LIBQUADMATH_TRUE@  math/erfq.c math/logq.c math/sqrtq.c math/expm1q.c math/lroundq.c \\\n @BUILD_LIBQUADMATH_TRUE@  math/tanhq.c math/expq.c math/modfq.c math/tanq.c math/fabsq.c \\\n @BUILD_LIBQUADMATH_TRUE@  math/nanq.c math/tgammaq.c math/finiteq.c math/nextafterq.c \\\n-@BUILD_LIBQUADMATH_TRUE@  math/truncq.c math/floorq.c math/powq.c math/fmaq.c\n+@BUILD_LIBQUADMATH_TRUE@  math/truncq.c math/floorq.c math/powq.c math/fmaq.c \\\n+@BUILD_LIBQUADMATH_TRUE@  math/cacoshq.c math/cacosq.c math/casinhq.c math/casinq.c \\\n+@BUILD_LIBQUADMATH_TRUE@  math/catanhq.c math/catanq.c\n \n \n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n@@ -570,6 +575,12 @@ math/truncq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n math/floorq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n math/powq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n math/fmaq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/cacoshq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/cacosq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/casinhq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/casinq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/catanhq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/catanq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n libquadmath.la: $(libquadmath_la_OBJECTS) $(libquadmath_la_DEPENDENCIES) \n \t$(libquadmath_la_LINK) $(am_libquadmath_la_rpath) $(libquadmath_la_OBJECTS) $(libquadmath_la_LIBADD) $(LIBS)\n \n@@ -617,6 +628,18 @@ mostlyclean-compile:\n \t-rm -f math/atanhq.lo\n \t-rm -f math/atanq.$(OBJEXT)\n \t-rm -f math/atanq.lo\n+\t-rm -f math/cacoshq.$(OBJEXT)\n+\t-rm -f math/cacoshq.lo\n+\t-rm -f math/cacosq.$(OBJEXT)\n+\t-rm -f math/cacosq.lo\n+\t-rm -f math/casinhq.$(OBJEXT)\n+\t-rm -f math/casinhq.lo\n+\t-rm -f math/casinq.$(OBJEXT)\n+\t-rm -f math/casinq.lo\n+\t-rm -f math/catanhq.$(OBJEXT)\n+\t-rm -f math/catanhq.lo\n+\t-rm -f math/catanq.$(OBJEXT)\n+\t-rm -f math/catanq.lo\n \t-rm -f math/cbrtq.$(OBJEXT)\n \t-rm -f math/cbrtq.lo\n \t-rm -f math/ceilq.$(OBJEXT)\n@@ -745,6 +768,12 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/atan2q.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/atanhq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/atanq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/cacoshq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/cacosq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/casinhq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/casinq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/catanhq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/catanq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/cbrtq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/ceilq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/complex.Plo@am__quote@"}, {"sha": "50b9e62e495ad295fd66cde575cd7705504a1ba3", "filename": "libquadmath/libquadmath.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Flibquadmath.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Flibquadmath.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Flibquadmath.texi?ref=fa23b182095ab7bd85605c62f2209c439b8a8018", "patch": "@@ -154,17 +154,23 @@ The following mathematical functions are available:\n @item @code{ynq}: Bessel function of the second kind, @var{n}-th order\n @item @code{cabsq} complex absolute value function:\n @item @code{cargq}: calculate the argument\n+@item @code{cacoshq}: complex arc hyperbolic cosine function\n+@item @code{cacosq}: complex arc cosine function\n+@item @code{casinhq}: complex arc hyperbolic sine function\n+@item @code{casinq}: complex arc sine function\n+@item @code{catanhq}: complex arc hyperbolic tangent function\n+@item @code{catanq}: complex arc tangent function\n @item @code{ccosq} complex cosine function:\n @item @code{ccoshq}: complex hyperbolic cosine function\n @item @code{cexpq}: complex exponential function\n+@need 800\n @item @code{cexpiq}: computes the exponential function of ``i'' times a\n                      real value\n @item @code{clogq}: complex natural logarithm\n @item @code{clog10q}: complex base 10 logarithm\n @item @code{cpowq}: complex power function\n @item @code{csinq}: complex sine function\n @item @code{csinhq}: complex hyperbolic sine function\n-@need 800\n @item @code{csqrtq}: complex square root\n @item @code{ctanq}: complex tangent function\n @item @code{ctanhq}: complex hyperbolic tangent function"}, {"sha": "fbe64d62b954afac6dc4f49f22f600d145448dbf", "filename": "libquadmath/math/atan2q.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fmath%2Fatan2q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fmath%2Fatan2q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fatan2q.c?ref=fa23b182095ab7bd85605c62f2209c439b8a8018", "patch": "@@ -43,12 +43,12 @@\n #include \"quadmath-imp.h\"\n \n static const __float128\n-tiny  = 1.0e-4900L,\n+tiny  = 1.0e-4900Q,\n zero  = 0.0,\n-pi_o_4  = 7.85398163397448309615660845819875699e-01L, /* 3ffe921fb54442d18469898cc51701b8 */\n-pi_o_2  = 1.57079632679489661923132169163975140e+00L, /* 3fff921fb54442d18469898cc51701b8 */\n-pi      = 3.14159265358979323846264338327950280e+00L, /* 4000921fb54442d18469898cc51701b8 */\n-pi_lo   = 8.67181013012378102479704402604335225e-35L; /* 3f8dcd129024e088a67cc74020bbea64 */\n+pi_o_4  = 7.85398163397448309615660845819875699e-01Q, /* 3ffe921fb54442d18469898cc51701b8 */\n+pi_o_2  = 1.57079632679489661923132169163975140e+00Q, /* 3fff921fb54442d18469898cc51701b8 */\n+pi      = 3.14159265358979323846264338327950280e+00Q, /* 4000921fb54442d18469898cc51701b8 */\n+pi_lo   = 8.67181013012378102479704402604335225e-35Q; /* 3f8dcd129024e088a67cc74020bbea64 */\n \n __float128\n atan2q (__float128 y, __float128 x)\n@@ -64,7 +64,7 @@ atan2q (__float128 y, __float128 x)\n \tif(((ix|((lx|-lx)>>63))>0x7fff000000000000LL)||\n \t   ((iy|((ly|-ly)>>63))>0x7fff000000000000LL))\t/* x or y is NaN */\n \t   return x+y;\n-\tif(((hx-0x3fff000000000000LL)|lx)==0) return atanq(y);   /* x=1.0L */\n+\tif(((hx-0x3fff000000000000LL)|lx)==0) return atanq(y);   /* x=1.0Q */\n \tm = ((hy>>63)&1)|((hx>>62)&2);\t/* 2*sign(x)+sign(y) */\n \n     /* when y = 0 */\n@@ -85,8 +85,8 @@ atan2q (__float128 y, __float128 x)\n \t\tswitch(m) {\n \t\t    case 0: return  pi_o_4+tiny;/* atan(+INF,+INF) */\n \t\t    case 1: return -pi_o_4-tiny;/* atan(-INF,+INF) */\n-\t\t    case 2: return  3.0L*pi_o_4+tiny;/*atan(+INF,-INF)*/\n-\t\t    case 3: return -3.0L*pi_o_4-tiny;/*atan(-INF,-INF)*/\n+\t\t    case 2: return  3.0Q*pi_o_4+tiny;/*atan(+INF,-INF)*/\n+\t\t    case 3: return -3.0Q*pi_o_4-tiny;/*atan(-INF,-INF)*/\n \t\t}\n \t    } else {\n \t\tswitch(m) {\n@@ -102,8 +102,8 @@ atan2q (__float128 y, __float128 x)\n \n     /* compute y/x */\n \tk = (iy-ix)>>48;\n-\tif(k > 120) z=pi_o_2+0.5L*pi_lo; \t/* |y/x| >  2**120 */\n-\telse if(hx<0&&k<-120) z=0.0L; \t\t/* |y|/x < -2**120 */\n+\tif(k > 120) z=pi_o_2+0.5Q*pi_lo; \t/* |y/x| >  2**120 */\n+\telse if(hx<0&&k<-120) z=0.0Q; \t\t/* |y|/x < -2**120 */\n \telse z=atanq(fabsq(y/x));\t\t/* safe to do y/x */\n \tswitch (m) {\n \t    case 0: return       z  ;\t/* atan(+,+) */"}, {"sha": "8acc570de76ab11e309da43be8406a0c58103a70", "filename": "libquadmath/math/cacoshq.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fmath%2Fcacoshq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fmath%2Fcacoshq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcacoshq.c?ref=fa23b182095ab7bd85605c62f2209c439b8a8018", "patch": "@@ -0,0 +1,89 @@\n+/* Return arc hyperbole cosine for __float128 value.\n+   Copyright (C) 1997, 1998, 2006 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.  */\n+\n+#include \"quadmath-imp.h\"\n+\n+\n+__complex128\n+cacoshq (__complex128 x)\n+{\n+  __complex128 res;\n+  int rcls = fpclassifyq (__real__ x);\n+  int icls = fpclassifyq (__imag__ x);\n+\n+  if (rcls <= QUADFP_INFINITE || icls <= QUADFP_INFINITE)\n+    {\n+      if (icls == QUADFP_INFINITE)\n+\t{\n+\t  __real__ res = HUGE_VALQ;\n+\n+\t  if (rcls == QUADFP_NAN)\n+\t    __imag__ res = nanq (\"\");\n+\t  else\n+\t    __imag__ res = copysignq ((rcls == QUADFP_INFINITE\n+\t\t\t\t       ? (__real__ x < 0.0\n+\t\t\t\t\t  ? M_PIq - M_PI_4q : M_PI_4q)\n+\t\t\t\t       : M_PI_2q), __imag__ x);\n+\t}\n+      else if (rcls == QUADFP_INFINITE)\n+\t{\n+\t  __real__ res = HUGE_VALQ;\n+\n+\t  if (icls >= QUADFP_ZERO)\n+\t    __imag__ res = copysignq (signbitq (__real__ x) ? M_PIq : 0.0,\n+\t\t\t\t      __imag__ x);\n+\t  else\n+\t    __imag__ res = nanq (\"\");\n+\t}\n+      else\n+\t{\n+\t  __real__ res = nanq (\"\");\n+\t  __imag__ res = nanq (\"\");\n+\t}\n+    }\n+  else if (rcls == QUADFP_ZERO && icls == QUADFP_ZERO)\n+    {\n+      __real__ res = 0.0;\n+      __imag__ res = copysignq (M_PI_2q, __imag__ x);\n+    }\n+  else\n+    {\n+      __complex128 y;\n+\n+      __real__ y = (__real__ x - __imag__ x) * (__real__ x + __imag__ x) - 1.0;\n+      __imag__ y = 2.0 * __real__ x * __imag__ x;\n+\n+      y = csqrtq (y);\n+\n+      if (__real__ x < 0.0)\n+\ty = -y;\n+\n+      __real__ y += __real__ x;\n+      __imag__ y += __imag__ x;\n+\n+      res = clogq (y);\n+\n+      /* We have to use the positive branch.  */\n+      if (__real__ res < 0.0)\n+\tres = -res;\n+    }\n+\n+  return res;\n+}"}, {"sha": "3c257b029bffcde510fb5d7bb8a458de2feb4606", "filename": "libquadmath/math/cacosq.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fmath%2Fcacosq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fmath%2Fcacosq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcacosq.c?ref=fa23b182095ab7bd85605c62f2209c439b8a8018", "patch": "@@ -0,0 +1,35 @@\n+/* Return cosine of complex __float128 value.\n+   Copyright (C) 1997, 1998 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.  */\n+\n+#include \"quadmath-imp.h\"\n+\n+__complex128\n+cacosq (__complex128 x)\n+{\n+  __complex128 y;\n+  __complex128 res;\n+\n+  y = casinq (x);\n+\n+  __real__ res = M_PI_2q - __real__ y;\n+  __imag__ res = -__imag__ y;\n+\n+  return res;\n+}"}, {"sha": "ffa45fa81d93f937b8d106ba17ab3ae7b315fbce", "filename": "libquadmath/math/casinhq.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fmath%2Fcasinhq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fmath%2Fcasinhq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcasinhq.c?ref=fa23b182095ab7bd85605c62f2209c439b8a8018", "patch": "@@ -0,0 +1,78 @@\n+/* Return arc hyperbole sine for __float128 value.\n+   Copyright (C) 1997, 1998 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.  */\n+\n+#include \"quadmath-imp.h\"\n+\n+\n+__complex128\n+casinhq (__complex128 x)\n+{\n+  __complex128 res;\n+  int rcls = fpclassifyq (__real__ x);\n+  int icls = fpclassifyq (__imag__ x);\n+\n+  if (rcls <= QUADFP_INFINITE || icls <= QUADFP_INFINITE)\n+    {\n+      if (icls == QUADFP_INFINITE)\n+\t{\n+\t  __real__ res = copysignq (HUGE_VALQ, __real__ x);\n+\n+\t  if (rcls == QUADFP_NAN)\n+\t    __imag__ res = nanq (\"\");\n+\t  else\n+\t    __imag__ res = copysignq (rcls >= QUADFP_ZERO ? M_PI_2q : M_PI_4q,\n+\t\t\t\t      __imag__ x);\n+\t}\n+      else if (rcls <= QUADFP_INFINITE)\n+\t{\n+\t  __real__ res = __real__ x;\n+\t  if ((rcls == QUADFP_INFINITE && icls >= QUADFP_ZERO)\n+\t      || (rcls == QUADFP_NAN && icls == QUADFP_ZERO))\n+\t    __imag__ res = copysignq (0.0, __imag__ x);\n+\t  else\n+\t    __imag__ res = nanq (\"\");\n+\t}\n+      else\n+\t{\n+\t  __real__ res = nanq (\"\");\n+\t  __imag__ res = nanq (\"\");\n+\t}\n+    }\n+  else if (rcls == QUADFP_ZERO && icls == QUADFP_ZERO)\n+    {\n+      res = x;\n+    }\n+  else\n+    {\n+      __complex128 y;\n+\n+      __real__ y = (__real__ x - __imag__ x) * (__real__ x + __imag__ x) + 1.0;\n+      __imag__ y = 2.0 * __real__ x * __imag__ x;\n+\n+      y = csqrtq (y);\n+\n+      __real__ y += __real__ x;\n+      __imag__ y += __imag__ x;\n+\n+      res = clogq (y);\n+    }\n+\n+  return res;\n+}"}, {"sha": "122ef5d85ae0fb0fe85afd5ddad0762627d4be1f", "filename": "libquadmath/math/casinq.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fmath%2Fcasinq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fmath%2Fcasinq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcasinq.c?ref=fa23b182095ab7bd85605c62f2209c439b8a8018", "patch": "@@ -0,0 +1,60 @@\n+/* Return arc sine of complex __float128 value.\n+   Copyright (C) 1997 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.  */\n+\n+#include \"quadmath-imp.h\"\n+\n+\n+__complex128\n+casinq (__complex128 x)\n+{\n+  __complex128 res;\n+\n+  if (isnanq (__real__ x) || isnanq (__imag__ x))\n+    {\n+      if (__real__ x == 0.0)\n+\t{\n+\t  res = x;\n+\t}\n+      else if (isinfq (__real__ x) || isinfq (__imag__ x))\n+\t{\n+\t  __real__ res = nanq (\"\");\n+\t  __imag__ res = copysignq (HUGE_VALQ, __imag__ x);\n+\t}\n+      else\n+\t{\n+\t  __real__ res = nanq (\"\");\n+\t  __imag__ res = nanq (\"\");\n+\t}\n+    }\n+  else\n+    {\n+      __complex128 y;\n+\n+      __real__ y = -__imag__ x;\n+      __imag__ y = __real__ x;\n+\n+      y = casinhq (y);\n+\n+      __real__ res = __imag__ y;\n+      __imag__ res = -__real__ y;\n+    }\n+\n+  return res;\n+}"}, {"sha": "6a86e2d0202d3c4073d78d722a00e173a1e66b7a", "filename": "libquadmath/math/catanhq.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fmath%2Fcatanhq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fmath%2Fcatanhq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcatanhq.c?ref=fa23b182095ab7bd85605c62f2209c439b8a8018", "patch": "@@ -0,0 +1,76 @@\n+/* Return arc hyperbole tangent for __float128 value.\n+   Copyright (C) 1997, 1998 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.  */\n+\n+#include \"quadmath-imp.h\"\n+\n+\n+__complex128\n+catanhq (__complex128 x)\n+{\n+  __complex128 res;\n+  int rcls = fpclassifyq (__real__ x);\n+  int icls = fpclassifyq (__imag__ x);\n+\n+  if (rcls <= QUADFP_INFINITE || icls <= QUADFP_INFINITE)\n+    {\n+      if (icls == QUADFP_INFINITE)\n+\t{\n+\t  __real__ res = copysignq (0.0, __real__ x);\n+\t  __imag__ res = copysignq (M_PI_2q, __imag__ x);\n+\t}\n+      else if (rcls == QUADFP_INFINITE || rcls == QUADFP_ZERO)\n+\t{\n+\t  __real__ res = copysignq (0.0, __real__ x);\n+\t  if (icls >= QUADFP_ZERO)\n+\t    __imag__ res = copysignq (M_PI_2q, __imag__ x);\n+\t  else\n+\t    __imag__ res = nanq (\"\");\n+\t}\n+      else\n+\t{\n+\t  __real__ res = nanq (\"\");\n+\t  __imag__ res = nanq (\"\");\n+\t}\n+    }\n+  else if (rcls == QUADFP_ZERO && icls == QUADFP_ZERO)\n+    {\n+      res = x;\n+    }\n+  else\n+    {\n+      __float128 i2, num, den;\n+\n+      i2 = __imag__ x * __imag__ x;\n+\n+      num = 1.0 + __real__ x;\n+      num = i2 + num * num;\n+\n+      den = 1.0 - __real__ x;\n+      den = i2 + den * den;\n+\n+      __real__ res = 0.25 * (logq (num) - logq (den));\n+\n+      den = 1 - __real__ x * __real__ x - i2;\n+\n+      __imag__ res = 0.5 * atan2q (2.0 * __imag__ x, den);\n+    }\n+\n+  return res;\n+}"}, {"sha": "a9c92579734b52c0dbaae9c71a9f724c5fda9e26", "filename": "libquadmath/math/catanq.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fmath%2Fcatanq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fmath%2Fcatanq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcatanq.c?ref=fa23b182095ab7bd85605c62f2209c439b8a8018", "patch": "@@ -0,0 +1,81 @@\n+/* Return arc tangent of complex __float128 value.\n+   Copyright (C) 1997, 1998 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.  */\n+\n+#include \"quadmath-imp.h\"\n+\n+\n+__complex128\n+catanq (__complex128 x)\n+{\n+  __complex128 res;\n+  int rcls = fpclassifyq (__real__ x);\n+  int icls = fpclassifyq (__imag__ x);\n+\n+  if (rcls <= QUADFP_INFINITE || icls <= QUADFP_INFINITE)\n+    {\n+      if (rcls == QUADFP_INFINITE)\n+\t{\n+\t  __real__ res = copysignq (M_PI_2q, __real__ x);\n+\t  __imag__ res = copysignq (0.0, __imag__ x);\n+\t}\n+      else if (icls == QUADFP_INFINITE)\n+\t{\n+\t  if (rcls >= QUADFP_ZERO)\n+\t    __real__ res = copysignq (M_PI_2q, __real__ x);\n+\t  else\n+\t    __real__ res = nanq (\"\");\n+\t  __imag__ res = copysignq (0.0, __imag__ x);\n+\t}\n+      else if (icls == QUADFP_ZERO || icls == QUADFP_INFINITE)\n+\t{\n+\t  __real__ res = nanq (\"\");\n+\t  __imag__ res = copysignq (0.0, __imag__ x);\n+\t}\n+      else\n+\t{\n+\t  __real__ res = nanq (\"\");\n+\t  __imag__ res = nanq (\"\");\n+\t}\n+    }\n+  else if (rcls == QUADFP_ZERO && icls == QUADFP_ZERO)\n+    {\n+      res = x;\n+    }\n+  else\n+    {\n+      __float128 r2, num, den;\n+\n+      r2 = __real__ x * __real__ x;\n+\n+      den = 1 - r2 - __imag__ x * __imag__ x;\n+\n+      __real__ res = 0.5 * atan2q (2.0 * __real__ x, den);\n+\n+      num = __imag__ x + 1.0;\n+      num = r2 + num * num;\n+\n+      den = __imag__ x - 1.0;\n+      den = r2 + den * den;\n+\n+      __imag__ res = 0.25 * logq (num / den);\n+    }\n+\n+  return res;\n+}"}, {"sha": "dc321a27d177f90367030f898565d3270ab23c46", "filename": "libquadmath/math/cosq.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fmath%2Fcosq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fmath%2Fcosq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcosq.c?ref=fa23b182095ab7bd85605c62f2209c439b8a8018", "patch": "@@ -49,7 +49,7 @@\n __float128\n cosq (__float128 x)\n {\n-\t__float128 y[2],z=0.0L;\n+\t__float128 y[2],z=0.0Q;\n \tint64_t n, ix;\n \n     /* High word of x. */"}, {"sha": "2df317f3681e9ee8e1f59124cd8a829e0150109d", "filename": "libquadmath/math/hypotq.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fmath%2Fhypotq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fmath%2Fhypotq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fhypotq.c?ref=fa23b182095ab7bd85605c62f2209c439b8a8018", "patch": "@@ -116,7 +116,7 @@ hypotq (__float128 x, __float128 y)\n   }\n   if(k!=0) {\n       uint64_t high;\n-      t1 = 1.0L;\n+      t1 = 1.0Q;\n       GET_FLT128_MSW64(high,t1);\n       SET_FLT128_MSW64(t1,high+(k<<48));\n       return t1*w;"}, {"sha": "5404c9eef994e518daecea764058a9ee2efc3e35", "filename": "libquadmath/quadmath-imp.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fquadmath-imp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fquadmath-imp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath-imp.h?ref=fa23b182095ab7bd85605c62f2209c439b8a8018", "patch": "@@ -164,5 +164,13 @@ do {                                   \\\n \n #define IEEE854_FLOAT128_BIAS 0x3fff\n \n+#define QUADFP_NAN\t\t0\n+#define QUADFP_INFINITE\t\t1\n+#define QUADFP_ZERO\t\t2\n+#define QUADFP_SUBNORMAL\t3\n+#define QUADFP_NORMAL\t\t4\n+#define fpclassifyq(x) \\\n+  __builtin_fpclassify (QUADFP_NAN, QUADFP_INFINITE, QUADFP_NORMAL, \\\n+\t\t\tQUADFP_SUBNORMAL, QUADFP_ZERO, x)\n \n #endif"}, {"sha": "bc4133755602d12558b99f62084c8edb8ac9b9f7", "filename": "libquadmath/quadmath.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fquadmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fquadmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath.h?ref=fa23b182095ab7bd85605c62f2209c439b8a8018", "patch": "@@ -90,6 +90,12 @@ extern __float128 ynq (int, __float128);\n // Prototypes for complex functions\n extern __float128 cabsq (__complex128);\n extern __float128 cargq (__complex128);\n+extern __complex128 cacosq (__complex128);\n+extern __complex128 cacoshq (__complex128);\n+extern __complex128 casinq (__complex128);\n+extern __complex128 casinhq (__complex128);\n+extern __complex128 catanq (__complex128);\n+extern __complex128 catanhq (__complex128);\n extern __complex128 ccosq (__complex128);\n extern __complex128 ccoshq (__complex128);\n extern __complex128 cexpq (__complex128);\n@@ -126,4 +132,18 @@ extern void quadmath_dtoaq (char *, size_t, size_t, __float128);\n    (floating constant exceeds range of \u2018__float128\u2019)  */\n /* #define HUGE_VALQ (__extension__ 0x1.0p32767Q) */\n \n+#define M_Eq\t\t2.7182818284590452353602874713526625Q  /* e */\n+#define M_LOG2Eq\t1.4426950408889634073599246810018921Q  /* log_2 e */\n+#define M_LOG10Eq\t0.4342944819032518276511289189166051Q  /* log_10 e */\n+#define M_LN2q\t\t0.6931471805599453094172321214581766Q  /* log_e 2 */\n+#define M_LN10q\t\t2.3025850929940456840179914546843642Q  /* log_e 10 */\n+#define M_PIq\t\t3.1415926535897932384626433832795029Q  /* pi */\n+#define M_PI_2q\t\t1.5707963267948966192313216916397514Q  /* pi/2 */\n+#define M_PI_4q\t\t0.7853981633974483096156608458198757Q  /* pi/4 */\n+#define M_1_PIq\t\t0.3183098861837906715377675267450287Q  /* 1/pi */\n+#define M_2_PIq\t\t0.6366197723675813430755350534900574Q  /* 2/pi */\n+#define M_2_SQRTPIq\t1.1283791670955125738961589031215452Q  /* 2/sqrt(pi) */\n+#define M_SQRT2q\t1.4142135623730950488016887242096981Q  /* sqrt(2) */\n+#define M_SQRT1_2q\t0.7071067811865475244008443621048490Q  /* 1/sqrt(2) */\n+\n #endif"}, {"sha": "2a6628751d77a7e0795e56a27dedb407810080b7", "filename": "libquadmath/quadmath.map", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fquadmath.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fquadmath.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath.map?ref=fa23b182095ab7bd85605c62f2209c439b8a8018", "patch": "@@ -7,6 +7,12 @@ QUADMATH_1.0 {\n     atanq;\n     atanhq;\n     atan2q;\n+    cacoshq;\n+    cacosq;\n+    casinhq;\n+    casinq;\n+    catanhq;\n+    catanq;\n     cbrtq;\n     ceilq;\n     copysignq;"}, {"sha": "d2c3d86d4a2a63a97be0818b6449cd118bd86548", "filename": "libquadmath/quadmath_weak.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fquadmath_weak.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa23b182095ab7bd85605c62f2209c439b8a8018/libquadmath%2Fquadmath_weak.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath_weak.h?ref=fa23b182095ab7bd85605c62f2209c439b8a8018", "patch": "@@ -97,6 +97,12 @@ __qmath3 (ynq)\n // Prototypes for complex functions\n __qmath3 (cabsq)\n __qmath3 (cargq)\n+__qmath3 (cacosq)\n+__qmath3 (cacoshq)\n+__qmath3 (casinq)\n+__qmath3 (casinhq)\n+__qmath3 (catanq)\n+__qmath3 (catanhq)\n __qmath3 (ccosq)\n __qmath3 (ccoshq)\n __qmath3 (cexpq)"}]}