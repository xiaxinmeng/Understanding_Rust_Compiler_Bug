{"sha": "bafc9e1d9844e54d24656a2da4de4aabcb1d2f47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFmYzllMWQ5ODQ0ZTU0ZDI0NjU2YTJkYTRkZTRhYWJjYjFkMmY0Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-15T12:18:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-15T12:18:14Z"}, "message": "[multiple changes]\n\n2009-04-15  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_eval.adb (Get_Static_Length): Go to origin node for array bounds\n\tin case they were rewritten by expander (Force_Evaluation).\n\n\t* targparm.adb (Get_Target_Parameters): Correct check for\n\tSuppress_Exception_Locations.\n\n2009-04-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch6.adb (Expand_Inlined_Call): If an in-parameter in a call to be\n\tinlined  is of an array type that is not bit-packed, use a renaming\n\tdeclaration to capture its value, rather than a constant declaration.\n\nFrom-SVN: r146104", "tree": {"sha": "611708cb44aa4c1ecc5d5494b6c656f0040e4c7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/611708cb44aa4c1ecc5d5494b6c656f0040e4c7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bafc9e1d9844e54d24656a2da4de4aabcb1d2f47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bafc9e1d9844e54d24656a2da4de4aabcb1d2f47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bafc9e1d9844e54d24656a2da4de4aabcb1d2f47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bafc9e1d9844e54d24656a2da4de4aabcb1d2f47/comments", "author": null, "committer": null, "parents": [{"sha": "443614e35f5f491ae123ca92778947c47d3418f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/443614e35f5f491ae123ca92778947c47d3418f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/443614e35f5f491ae123ca92778947c47d3418f3"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "23d1a3e2ca3562a5d6c17a152e4bb5cdffa21806", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bafc9e1d9844e54d24656a2da4de4aabcb1d2f47/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bafc9e1d9844e54d24656a2da4de4aabcb1d2f47/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bafc9e1d9844e54d24656a2da4de4aabcb1d2f47", "patch": "@@ -1,3 +1,17 @@\n+2009-04-15  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_eval.adb (Get_Static_Length): Go to origin node for array bounds\n+\tin case they were rewritten by expander (Force_Evaluation).\n+\n+\t* targparm.adb (Get_Target_Parameters): Correct check for\n+\tSuppress_Exception_Locations.\n+\n+2009-04-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Inlined_Call): If an in-parameter in a call to be\n+\tinlined  is of an array type that is not bit-packed, use a renaming\n+\tdeclaration to capture its value, rather than a constant declaration.\n+\n 2009-04-15  Robert Dewar  <dewar@adacore.com>\n \n \t* rtsfind.adb: Minor reformatting."}, {"sha": "edb08c37b7d87c21219fb5f55e9a454d9b545cde", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bafc9e1d9844e54d24656a2da4de4aabcb1d2f47/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bafc9e1d9844e54d24656a2da4de4aabcb1d2f47/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=bafc9e1d9844e54d24656a2da4de4aabcb1d2f47", "patch": "@@ -3795,9 +3795,18 @@ package body Exp_Ch6 is\n             --  its value is captured in a renaming declaration. Otherwise\n             --  declare a local constant initialized with the actual.\n \n+            --  We also  use a renaming declaration for expressions of an\n+            --  array type that is not bit-packed, both for efficiency reasons\n+            --  and to respect the semantics of the call: in most cases the\n+            --  original call will pass the parameter by reference, and thus\n+            --  the inlined code will have the same semantics.\n+\n             if Ekind (F) = E_In_Parameter\n               and then not Is_Limited_Type (Etype (A))\n               and then not Is_Tagged_Type  (Etype (A))\n+              and then\n+               (not Is_Array_Type (Etype (A))\n+                 or else Is_Bit_Packed_Array (Etype (A)))\n             then\n                Decl :=\n                  Make_Object_Declaration (Loc,"}, {"sha": "596b4aff1be10adf98e536c26f47b3eae3e0dce0", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bafc9e1d9844e54d24656a2da4de4aabcb1d2f47/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bafc9e1d9844e54d24656a2da4de4aabcb1d2f47/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=bafc9e1d9844e54d24656a2da4de4aabcb1d2f47", "patch": "@@ -2504,8 +2504,10 @@ package body Sem_Eval is\n                --  Start of processing for Extract_Length\n \n                begin\n-                  Decompose_Expr (Type_Low_Bound  (T), Ent1, Kind1, Cons1);\n-                  Decompose_Expr (Type_High_Bound (T), Ent2, Kind2, Cons2);\n+                  Decompose_Expr\n+                    (Original_Node (Type_Low_Bound  (T)), Ent1, Kind1, Cons1);\n+                  Decompose_Expr\n+                    (Original_Node (Type_High_Bound (T)), Ent2, Kind2, Cons2);\n \n                   if Present (Ent1)\n                     and then Kind1 = Kind2"}, {"sha": "da42ba8b7b5ae611b62277320fce462bece68480", "filename": "gcc/ada/targparm.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bafc9e1d9844e54d24656a2da4de4aabcb1d2f47/gcc%2Fada%2Ftargparm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bafc9e1d9844e54d24656a2da4de4aabcb1d2f47/gcc%2Fada%2Ftargparm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.adb?ref=bafc9e1d9844e54d24656a2da4de4aabcb1d2f47", "patch": "@@ -408,10 +408,10 @@ package body Targparm is\n \n          --  Suppress_Exception_Locations\n \n-         elsif System_Text (P .. P + 34) =\n-                                \"pragma Suppress_Exception_Locations;\"\n+         elsif System_Text (P .. P + 35) =\n+                                   \"pragma Suppress_Exception_Locations;\"\n          then\n-            P := P + 35;\n+            P := P + 36;\n             Opt.Exception_Locations_Suppressed := True;\n             goto Line_Loop_Continue;\n "}]}