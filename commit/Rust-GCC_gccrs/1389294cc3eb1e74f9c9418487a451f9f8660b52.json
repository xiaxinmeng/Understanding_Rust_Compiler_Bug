{"sha": "1389294cc3eb1e74f9c9418487a451f9f8660b52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM4OTI5NGNjM2ViMWU3NGY5Yzk0MTg0ODdhNDUxZjlmODY2MGI1Mg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-09-18T21:25:29Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-09-18T21:25:29Z"}, "message": "re PR tree-optimization/45605 (Missed devirtualization)\n\n\n\tPR tree-optimization/45605\n\t* cgraphunit.c (cgraph_analyze_functions): Allocate bitmap obstack.\n\t* gimple-fold.c (static_object_in_other_unit_p): New function.\n\t(canonicalize_constructor_val): Use it.\n\t(get_symbol_constant_value): Be reaqdy for canonicalize_constructor_val\n\treturning NULL.\n\t(gimple_fold_obj_type_ref_known_binfo): Use static_object_in_other_unit_p.\n\nFrom-SVN: r164402", "tree": {"sha": "e751694fc67828e19064bc55f35a8e2b55757c5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e751694fc67828e19064bc55f35a8e2b55757c5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1389294cc3eb1e74f9c9418487a451f9f8660b52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1389294cc3eb1e74f9c9418487a451f9f8660b52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1389294cc3eb1e74f9c9418487a451f9f8660b52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1389294cc3eb1e74f9c9418487a451f9f8660b52/comments", "author": null, "committer": null, "parents": [{"sha": "6eb208a69cd0b7d93c3f22f4298062ccdc2f7c83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eb208a69cd0b7d93c3f22f4298062ccdc2f7c83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eb208a69cd0b7d93c3f22f4298062ccdc2f7c83"}], "stats": {"total": 81, "additions": 76, "deletions": 5}, "files": [{"sha": "f6508998fc49b96ebbc4d0e8b647f4cd5b70d38c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1389294cc3eb1e74f9c9418487a451f9f8660b52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1389294cc3eb1e74f9c9418487a451f9f8660b52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1389294cc3eb1e74f9c9418487a451f9f8660b52", "patch": "@@ -1,3 +1,13 @@\n+2010-09-18  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimization/45605\n+\t* cgraphunit.c (cgraph_analyze_functions): Allocate bitmap obstack.\n+\t* gimple-fold.c (static_object_in_other_unit_p): New function.\n+\t(canonicalize_constructor_val): Use it.\n+\t(get_symbol_constant_value): Be reaqdy for canonicalize_constructor_val\n+\treturning NULL.\n+\t(gimple_fold_obj_type_ref_known_binfo): Use static_object_in_other_unit_p.\n+\n 2010-09-18  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/45709"}, {"sha": "f296fe05604a673894b3e328ff8168f5bd964d0b", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1389294cc3eb1e74f9c9418487a451f9f8660b52/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1389294cc3eb1e74f9c9418487a451f9f8660b52/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=1389294cc3eb1e74f9c9418487a451f9f8660b52", "patch": "@@ -861,6 +861,7 @@ cgraph_analyze_functions (void)\n   static struct varpool_node *first_analyzed_var;\n   struct cgraph_node *node, *next;\n \n+  bitmap_obstack_initialize (NULL);\n   process_function_and_variable_attributes (first_processed,\n \t\t\t\t\t    first_analyzed_var);\n   first_processed = cgraph_nodes;\n@@ -971,6 +972,7 @@ cgraph_analyze_functions (void)\n       fprintf (cgraph_dump_file, \"\\n\\nReclaimed \");\n       dump_cgraph (cgraph_dump_file);\n     }\n+  bitmap_obstack_release (NULL);\n   first_analyzed = cgraph_nodes;\n   ggc_collect ();\n }"}, {"sha": "14031c8a9608984d3cc280201dbc11565e9cffbd", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 64, "deletions": 5, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1389294cc3eb1e74f9c9418487a451f9f8660b52/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1389294cc3eb1e74f9c9418487a451f9f8660b52/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=1389294cc3eb1e74f9c9418487a451f9f8660b52", "patch": "@@ -31,6 +31,61 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-propagate.h\"\n #include \"target.h\"\n \n+/* Return true when DECL is static object in other partition.\n+   In that case we must prevent folding as we can't refer to\n+   the symbol.\n+\n+   We can get into it in two ways:\n+     1) When analyzing C++ virtual tables.\n+\tC++ virtual tables do have known constructors even\n+\twhen they are keyed to other compilation unit.\n+\tThose tables can contain pointers to methods and vars\n+\tin other units.  Those methods have both STATIC and EXTERNAL\n+\tset.\n+     2) In WHOPR mode devirtualization might lead to reference\n+\tto method that was partitioned elsehwere.\n+\tIn this case we have static VAR_DECL or FUNCTION_DECL\n+\tthat has no corresponding callgraph/varpool node\n+\tdeclaring the body.  */\n+\t\n+static bool\n+static_object_in_other_unit_p (tree decl)\n+{\n+  struct varpool_node *vnode;\n+  struct cgraph_node *node;\n+\n+  if (!TREE_STATIC (decl)\n+      || TREE_PUBLIC (decl) || DECL_COMDAT (decl))\n+    return false;\n+  /* External flag is set, so we deal with C++ reference\n+     to static object from other file.  */\n+  if (DECL_EXTERNAL (decl))\n+    {\n+      /* Just be sure it is not big in frontend setting\n+\t flags incorrectly.  Those variables should never\n+\t be finalized.  */\n+      gcc_checking_assert (!(vnode = varpool_get_node (decl))\n+\t\t\t   || !vnode->finalized);\n+      return true;\n+    }\n+  /* We are not at ltrans stage; so don't worry about WHOPR.  */\n+  if (!flag_ltrans)\n+    return false;\n+  if (TREE_CODE (decl) == FUNCTION_DECL)\n+    {\n+      node = cgraph_get_node (decl);\n+      if (!node || !node->analyzed)\n+\treturn true;\n+    }\n+  else if (TREE_CODE (decl) == VAR_DECL)\n+    {\n+      vnode = varpool_get_node (decl);\n+      if (!vnode || !vnode->finalized)\n+\treturn true;\n+    }\n+  return false;\n+}\n+\n /* CVAL is value taken from DECL_INITIAL of variable.  Try to transorm it into\n    acceptable form for is_gimple_min_invariant.   */\n \n@@ -50,6 +105,11 @@ canonicalize_constructor_val (tree cval)\n   if (TREE_CODE (cval) == ADDR_EXPR)\n     {\n       tree base = get_base_address (TREE_OPERAND (cval, 0));\n+      if (base\n+\t  && (TREE_CODE (base) == VAR_DECL\n+\t      || TREE_CODE (base) == FUNCTION_DECL)\n+\t  && static_object_in_other_unit_p (base))\n+\treturn NULL_TREE;\n       if (base && TREE_CODE (base) == VAR_DECL)\n \tadd_referenced_var (base);\n     }\n@@ -70,8 +130,10 @@ get_symbol_constant_value (tree sym)\n       if (val)\n \t{\n \t  val = canonicalize_constructor_val (val);\n-\t  if (is_gimple_min_invariant (val))\n+\t  if (val && is_gimple_min_invariant (val))\n \t    return val;\n+\t  else\n+\t    return NULL_TREE;\n \t}\n       /* Variables declared 'const' without an initializer\n \t have zero as the initializer if they may not be\n@@ -1370,7 +1432,6 @@ gimple_fold_obj_type_ref_known_binfo (HOST_WIDE_INT token, tree known_binfo)\n {\n   HOST_WIDE_INT i;\n   tree v, fndecl;\n-  struct cgraph_node *node;\n \n   v = BINFO_VIRTUALS (known_binfo);\n   i = 0;\n@@ -1382,13 +1443,11 @@ gimple_fold_obj_type_ref_known_binfo (HOST_WIDE_INT token, tree known_binfo)\n     }\n \n   fndecl = TREE_VALUE (v);\n-  node = cgraph_get_node (fndecl);\n   /* When cgraph node is missing and function is not public, we cannot\n      devirtualize.  This can happen in WHOPR when the actual method\n      ends up in other partition, because we found devirtualization\n      possibility too late.  */\n-  if ((!node || (!node->analyzed && !node->in_other_partition))\n-      && (!TREE_PUBLIC (fndecl) || DECL_COMDAT (fndecl)))\n+  if (static_object_in_other_unit_p (fndecl))\n     return NULL;\n   return build_fold_addr_expr (fndecl);\n }"}]}