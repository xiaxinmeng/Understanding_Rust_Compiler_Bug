{"sha": "504d14c971d6fb0605e0f624d650cda52f168781", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA0ZDE0Yzk3MWQ2ZmIwNjA1ZTBmNjI0ZDY1MGNkYTUyZjE2ODc4MQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain.sandoe@sandoe-acoustics.co.uk", "date": "2010-04-27T00:08:28Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2010-04-27T00:08:28Z"}, "message": "re PR objc/35165 (Massive failures of objc on i686-apple-darwin9)\n\n2010-04-26  Iain Sandoe  <iain.sandoe@sandoe-acoustics.co.uk>\n\n\tPR testsuite/35165\n\t* obj-c++.dg/stubify-2.mm: Restrict to ilp32 targets.  Require\n\tDarwin8/OSX10.4 - compatible code generation.\n\tUse scan-rtl-dump.\n\t* obj-c++.dg/stubify-1.mm: Ditto.\n\t* lib/objc-torture.exp: Do not require link success for\n\t\"trivial.m\" in the runtime checks when dowhat = 'compile'.\n\t* lib/dg-pch.exp: (dg-flags-pch): New Proc.\n\t* objc.dg/stubify-1.m:  Restrict to ilp32 targets.  Require\n\tDarwin8/OSX10.4 - compatible code generation.\n\t* objc.dg/stubify-2.m: Ditto.\n\t* objc.dg/symtab-1.m: Match '.quad' for m64 code.\n\t* objc.dg/next-runtime-1.m: Ditto.\n\t* objc.dg/stret-2.m: Restrict to ilp32 targets.\n\t* objc.dg/pch/pch.exp: Apply tests to both Gnu and NeXT\n\truntimes on Darwin.\n\nFrom-SVN: r158752", "tree": {"sha": "c510b84e36ae371eb8991fa3934bb8c3ef43c763", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c510b84e36ae371eb8991fa3934bb8c3ef43c763"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/504d14c971d6fb0605e0f624d650cda52f168781", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/504d14c971d6fb0605e0f624d650cda52f168781", "html_url": "https://github.com/Rust-GCC/gccrs/commit/504d14c971d6fb0605e0f624d650cda52f168781", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/504d14c971d6fb0605e0f624d650cda52f168781/comments", "author": null, "committer": null, "parents": [{"sha": "d63fd21d33f87f9e6ebaba39a3e3e4336718e589", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d63fd21d33f87f9e6ebaba39a3e3e4336718e589", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d63fd21d33f87f9e6ebaba39a3e3e4336718e589"}], "stats": {"total": 153, "additions": 114, "deletions": 39}, "files": [{"sha": "4351007c3a4bcfc8da4c9980abc67583f74a0912", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504d14c971d6fb0605e0f624d650cda52f168781/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504d14c971d6fb0605e0f624d650cda52f168781/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=504d14c971d6fb0605e0f624d650cda52f168781", "patch": "@@ -1,3 +1,22 @@\n+2010-04-26  Iain Sandoe  <iain.sandoe@sandoe-acoustics.co.uk>\n+\n+\tPR testsuite/35165\n+\t* obj-c++.dg/stubify-2.mm: Restrict to ilp32 targets.  Require\n+\tDarwin8/OSX10.4 - compatible code generation.\n+\tUse scan-rtl-dump.\n+\t* obj-c++.dg/stubify-1.mm: Ditto.\n+\t* lib/objc-torture.exp: Do not require link success for\n+\t\"trivial.m\" in the runtime checks when dowhat = 'compile'.\n+\t* lib/dg-pch.exp: (dg-flags-pch): New Proc.\n+\t* objc.dg/stubify-1.m:  Restrict to ilp32 targets.  Require\n+\tDarwin8/OSX10.4 - compatible code generation.\n+\t* objc.dg/stubify-2.m: Ditto.\n+\t* objc.dg/symtab-1.m: Match '.quad' for m64 code.\n+\t* objc.dg/next-runtime-1.m: Ditto.\n+\t* objc.dg/stret-2.m: Restrict to ilp32 targets.\n+\t* objc.dg/pch/pch.exp: Apply tests to both Gnu and NeXT\n+\truntimes on Darwin.\n+\n 2010-04-26  Jack Howarth <howarth@bromo.med.uc.edu>\n \n \tPR 43715"}, {"sha": "2e0631fdc94b22e43416109c6a6e6c9efbe9e64d", "filename": "gcc/testsuite/lib/dg-pch.exp", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504d14c971d6fb0605e0f624d650cda52f168781/gcc%2Ftestsuite%2Flib%2Fdg-pch.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504d14c971d6fb0605e0f624d650cda52f168781/gcc%2Ftestsuite%2Flib%2Fdg-pch.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fdg-pch.exp?ref=504d14c971d6fb0605e0f624d650cda52f168781", "patch": "@@ -16,7 +16,7 @@\n \n load_lib copy-file.exp\n \n-proc dg-pch { subdir test options suffix } {\n+proc dg-flags-pch { subdir test otherflags options suffix } {\n     global runtests dg-do-what-default\n \n     # If we're only testing specific files and this isn't one of them, skip it.\n@@ -33,13 +33,13 @@ proc dg-pch { subdir test options suffix } {\n     # We don't try to use the loop-optimizing options, since they are highly\n     # unlikely to make any difference to PCH.\n     foreach flags $options {\n-\tverbose \"Testing $nshort, $flags\" 1\n+\tverbose \"Testing $nshort, $otherflags $flags\" 1\n \n \t# For the header files, the default is to precompile.\n \tset dg-do-what-default precompile\n \tcatch { file_on_host delete \"$bname$suffix\" }\n \tgcc_copy_files \"[file rootname $test]${suffix}s\" \"$bname$suffix\"\n-\tdg-test -keep-output \"./$bname$suffix\" $flags \"\"\n+\tdg-test -keep-output \"./$bname$suffix\" \"$otherflags $flags\" \"\"\n \n \t# For the rest, the default is to compile to .s.\n \tset dg-do-what-default compile\n@@ -50,23 +50,23 @@ proc dg-pch { subdir test options suffix } {\n \t    # Ensure that the PCH file is used, not the original header.\n \t    file_on_host delete \"$bname$suffix\"\n \n-\t    dg-test -keep-output $test \"$flags -I.\" \"\"\n+\t    dg-test -keep-output $test \"$otherflags $flags -I.\" \"\"\n \t    file_on_host delete \"$bname$suffix.gch\"\n \t    if { !$have_errs } {\n \t\tif { [ file_on_host exists \"$bname.s\" ] } {\n \t\t    remote_upload host \"$bname.s\" \"$bname.s-gch\"\n \t\t    remote_download host \"$bname.s-gch\"\n \t\t    gcc_copy_files \"[file rootname $test]${suffix}s\" \"$bname$suffix\"\n-\t\t    dg-test -keep-output $test $flags \"-I.\"\n+\t\t    dg-test -keep-output $test \"$otherflags $flags -I.\" \"\"\n \t\t    remote_upload host \"$bname.s\"\n \t\t    set tmp [ diff \"$bname.s\" \"$bname.s-gch\" ]\n \t\t    if { $tmp == 0 } {\n \t\t\tverbose -log \"assembly file '$bname.s', '$bname.s-gch' comparison error\"\n-\t\t\tfail \"$nshort $flags assembly comparison\"\n+\t\t\tfail \"$nshort $otherflags $flags assembly comparison\"\n \t\t    } elseif { $tmp == 1 } {\n-\t\t\tpass \"$nshort $flags assembly comparison\"\n+\t\t\tpass \"$nshort $otherflags $flags assembly comparison\"\n \t\t    } else {\n-\t\t\tfail \"$nshort $flags assembly comparison\"\n+\t\t\tfail \"$nshort $otherflags $flags assembly comparison\"\n \t\t    }\n \t\t    file_on_host delete \"$bname$suffix\"\n \t\t    file_on_host delete \"$bname.s\"\n@@ -86,3 +86,7 @@ proc dg-pch { subdir test options suffix } {\n \t}\n     }\n }\n+\n+proc dg-pch { subdir test options suffix } {\n+  return [dg-flags-pch $subdir $test \"\" $options $suffix]\n+}\n\\ No newline at end of file"}, {"sha": "a3d1ef2446e35a2dfaab383e5dd9932489fc80b4", "filename": "gcc/testsuite/lib/objc-torture.exp", "status": "modified", "additions": 46, "deletions": 19, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504d14c971d6fb0605e0f624d650cda52f168781/gcc%2Ftestsuite%2Flib%2Fobjc-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504d14c971d6fb0605e0f624d650cda52f168781/gcc%2Ftestsuite%2Flib%2Fobjc-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobjc-torture.exp?ref=504d14c971d6fb0605e0f624d650cda52f168781", "patch": "@@ -46,28 +46,55 @@ proc objc-set-runtime-options { dowhat args } {\n \t    lappend options $args\n \t}\n \tverbose \"options $options\"\n-\tset test_obj \"trivial.exe\"\n-\tset comp_output [objc_target_compile \\\n-\t\"$srcdir/$subdir/trivial.m\" $test_obj executable $options]\n-\n-\t# If we get any error, then we failed.\n-\tif ![string match \"\" $comp_output] then {\n-\t    remote_file build delete $test_obj\n-\t    continue;\n-\t}\n \tif [info exists dowhat] {\n-\t    if { $dowhat == \"execute\" } {\n-\t\tset result [objc_load \"$tmpdir/$test_obj\" \"\" \"\"]\n-\t\tset status [lindex $result 0]\n-\t\tset output [lindex $result 1]\n-\t\tif { $status != \"pass\" } {\n-\t\t    remote_file build delete $test_obj\n-\t\t    verbose -log \"trivial execute failed with $status $output\"\n-\t\t    continue;\n-\t\t}\n+          switch $dowhat {\n+\t    \"compile\" {\n+\t      set compile_type \"assembly\"\n+\t      set output_file \"trivial.s\"\n+\t      set comp_output [objc_target_compile \\\n+\t        \"$srcdir/$subdir/trivial.m\" \"$output_file\" \"$compile_type\" $options]\n+\n+\t      remote_file build delete $output_file\n+\t      # If we get any error, then we failed.\n+\t      if ![string match \"\" $comp_output] then {\n+\t        continue;\n+\t      }\n+\t    }\n+\t    \"execute\" {\n+\t      set test_obj \"trivial.exe\"\n+\t      set comp_output [objc_target_compile \\\n+\t        \"$srcdir/$subdir/trivial.m\" $test_obj \"executable\" $options]\n+\n+\t      # If we get any error, then we failed.\n+\t      if ![string match \"\" $comp_output] then {\n+\t        remote_file build delete $test_obj\n+\t        continue;\n+\t      }\n+\t      set result [objc_load \"$tmpdir/$test_obj\" \"\" \"\"]\n+\t      set status [lindex $result 0]\n+\t      set output [lindex $result 1]\n+\t      remote_file build delete $test_obj\n+\t      if { $status != \"pass\" } {\n+\t        verbose -log \"trivial execute failed with $status $output\"\n+\t        continue;\n+\t      }\n+\t    }\n+\t    default {\n+\t      perror \"$dowhat: not a valid objc-torture action\"\n+\t      return \"\"\n \t    }\n+\t  }\n+\t} else {\n+\t  set test_obj \"trivial.exe\"\n+\t  set comp_output [objc_target_compile \\\n+\t  \"$srcdir/$subdir/trivial.m\" $test_obj executable $options]\n+\n+\t  # If we get any error, then we failed.\n+\t  remote_file build delete $test_obj\n+\t  if ![string match \"\" $comp_output] then {\n+\t      continue;\n+\t  }\n \t}\n-\tremote_file build delete $test_obj\n \tlappend OBJC_RUNTIME_OPTIONS $type\n     }\n "}, {"sha": "687739ceccd9dffd73158f0ff81f442c1618d0dc", "filename": "gcc/testsuite/obj-c++.dg/stubify-1.mm", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504d14c971d6fb0605e0f624d650cda52f168781/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstubify-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504d14c971d6fb0605e0f624d650cda52f168781/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstubify-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstubify-1.mm?ref=504d14c971d6fb0605e0f624d650cda52f168781", "patch": "@@ -1,8 +1,10 @@\n /* All calls must be properly stubified.  Complain about any \"call\n    _objc_msgSend<end-of-line>\" without the $stub suffix.  */\n \n-/* { dg-do compile { target powerpc*-*-darwin* } } */\n-/* { dg-options \"-Os -mdynamic-no-pic -fno-exceptions\" } */\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-Os -mdynamic-no-pic -fno-exceptions -mmacosx-version-min=10.4\" } */\n \n typedef struct objc_object { } *id ;\n int x = 41 ;"}, {"sha": "9968672ed344917e51c3a6948d9a21c7aa754374", "filename": "gcc/testsuite/obj-c++.dg/stubify-2.mm", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504d14c971d6fb0605e0f624d650cda52f168781/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstubify-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504d14c971d6fb0605e0f624d650cda52f168781/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstubify-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstubify-2.mm?ref=504d14c971d6fb0605e0f624d650cda52f168781", "patch": "@@ -2,7 +2,9 @@\n /* Testcase extracted from TextEdit:Document.m.  */\n \n /* { dg-do compile { target *-*-darwin* } } */\n-/* { dg-options \"-mdynamic-no-pic -fdump-rtl-jump\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-mdynamic-no-pic -fdump-rtl-jump -mmacosx-version-min=10.4\" } */\n \n typedef struct objc_object { } *id ;\n int x = 41 ;\n@@ -27,5 +29,5 @@ - (void)willEndCloseSheet:(void *)sheet returnCode:(int)returnCode contextInfo:(\n @end\n \n /* Any symbol_ref of an un-stubified objc_msgSend is an error; look\n-   for \"objc_msgSend\" in quotes, without the $stub suffix.  */\n-/* { dg-final { scan-file-not stubify-2.mm.147r.jump \"symbol_ref.*\\\"objc_msgSend\\\"\" } } */\n+   for \"objc_msgSend\" in quotes, without the $stub suffix. */\n+/* { dg-final {  scan-rtl-dump-not \"symbol_ref.*\\\"objc_msgSend\\\"\" \"jump\" } } */"}, {"sha": "9a0951cabee313ea2bd470c2b5c8235767b914a3", "filename": "gcc/testsuite/objc.dg/next-runtime-1.m", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504d14c971d6fb0605e0f624d650cda52f168781/gcc%2Ftestsuite%2Fobjc.dg%2Fnext-runtime-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504d14c971d6fb0605e0f624d650cda52f168781/gcc%2Ftestsuite%2Fobjc.dg%2Fnext-runtime-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fnext-runtime-1.m?ref=504d14c971d6fb0605e0f624d650cda52f168781", "patch": "@@ -15,4 +15,5 @@ @implementation FooBar\n - (void)boo { }\n @end\n \n-/* { dg-final { scan-assembler \"L_OBJC_MODULES:\\n\\[ \\t\\]*\\.long\\t6\\n\" } } */\n+/* { dg-final { scan-assembler \"L_OBJC_MODULES:\\n\\[ \\t\\]*\\.long\\t6\\n\" { target { *-*-darwin* && { ! lp64 } } } } } */\n+/* { dg-final { scan-assembler \"L_OBJC_MODULES:\\n\\[ \\t\\]*\\.quad\\t6\\n\" { target { *-*-darwin* && {  lp64 } } } } } */"}, {"sha": "ca406fd94da7bf66cee1c037bb721a9ed7366690", "filename": "gcc/testsuite/objc.dg/pch/pch.exp", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504d14c971d6fb0605e0f624d650cda52f168781/gcc%2Ftestsuite%2Fobjc.dg%2Fpch%2Fpch.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504d14c971d6fb0605e0f624d650cda52f168781/gcc%2Ftestsuite%2Fobjc.dg%2Fpch%2Fpch.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fpch%2Fpch.exp?ref=504d14c971d6fb0605e0f624d650cda52f168781", "patch": "@@ -26,19 +26,34 @@ load_lib torture-options.exp\n dg-init\n \n torture-init\n+\n set-torture-options $DG_TORTURE_OPTIONS\n \n set old_dg_do_what_default \"${dg-do-what-default}\"\n \n+global torture_without_loops\n+set mytorture [concat [list {-O0 -g}] $torture_without_loops]\n+\n # Main loop.\n foreach test [lsort [glob -nocomplain $srcdir/$subdir/*.m]] {\n+\n+    # We don't try to use the loop-optimizing options, since they are highly\n+    # unlikely to make any difference to PCH.  However, we do want to\n+    # add -O0 -g, since users who want PCH usually want debugging and quick\n+    # compiles.\n+    dg-flags-pch $subdir $test \"-fgnu-runtime\" $mytorture \".h\"\n+}\n+\n+if [istarget \"*-*-darwin*\" ] {\n+  foreach test [lsort [glob -nocomplain $srcdir/$subdir/*.m]] {\n     global torture_without_loops\n \n     # We don't try to use the loop-optimizing options, since they are highly\n     # unlikely to make any difference to PCH.  However, we do want to\n     # add -O0 -g, since users who want PCH usually want debugging and quick\n     # compiles.\n-    dg-pch $subdir $test [concat [list {-O0 -g}] $torture_without_loops] \".h\"\n+    dg-flags-pch $subdir $test \"-fnext-runtime\" $mytorture \".h\"\n+  }\n }\n \n set dg-do-what-default \"$old_dg_do_what_default\""}, {"sha": "fccda3234334d6bd8c2b0fc39c6391ea7c05366b", "filename": "gcc/testsuite/objc.dg/stret-2.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504d14c971d6fb0605e0f624d650cda52f168781/gcc%2Ftestsuite%2Fobjc.dg%2Fstret-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504d14c971d6fb0605e0f624d650cda52f168781/gcc%2Ftestsuite%2Fobjc.dg%2Fstret-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstret-2.m?ref=504d14c971d6fb0605e0f624d650cda52f168781", "patch": "@@ -4,6 +4,7 @@\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-do compile { target *-*-darwin* } } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* { dg-require-effective-target ilp32 } */\n \n #include \"../objc-obj-c++-shared/Object1.h\"\n "}, {"sha": "91bf73a14f7afe24adac55b734eb2501acaaf1f9", "filename": "gcc/testsuite/objc.dg/stubify-1.m", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504d14c971d6fb0605e0f624d650cda52f168781/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504d14c971d6fb0605e0f624d650cda52f168781/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-1.m?ref=504d14c971d6fb0605e0f624d650cda52f168781", "patch": "@@ -3,7 +3,8 @@\n \n /* { dg-do compile { target *-*-darwin* } } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n-/* { dg-options \"-Os -mdynamic-no-pic\" } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-Os -mdynamic-no-pic -mmacosx-version-min=10.4\" } */\n \n typedef struct objc_object { } *id ;\n int x = 41 ;"}, {"sha": "eaf4b964e4b313967a46321d3138fe2205ce75f5", "filename": "gcc/testsuite/objc.dg/stubify-2.m", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504d14c971d6fb0605e0f624d650cda52f168781/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504d14c971d6fb0605e0f624d650cda52f168781/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-2.m?ref=504d14c971d6fb0605e0f624d650cda52f168781", "patch": "@@ -1,9 +1,10 @@\n-/* All calls must be properly stubified.  */\n+/* All calls must be properly stubified, m32 only.  */\n /* Testcase extracted from TextEdit:Document.m.  */\n \n-/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-do compile { target powerpc*-*-darwin* } } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n-/* { dg-options \"-mdynamic-no-pic -fdump-rtl-jump\" } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-mdynamic-no-pic -fdump-rtl-jump -mmacosx-version-min=10.4\" } */\n \n typedef struct objc_object { } *id ;\n int x = 41 ;"}, {"sha": "90a79691721866736bdbe5a8b2e163cee560e2b0", "filename": "gcc/testsuite/objc.dg/symtab-1.m", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504d14c971d6fb0605e0f624d650cda52f168781/gcc%2Ftestsuite%2Fobjc.dg%2Fsymtab-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504d14c971d6fb0605e0f624d650cda52f168781/gcc%2Ftestsuite%2Fobjc.dg%2Fsymtab-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fsymtab-1.m?ref=504d14c971d6fb0605e0f624d650cda52f168781", "patch": "@@ -22,4 +22,6 @@ @implementation Derived\n -(void)checkValues { }\n @end\n \n-/* { dg-final { scan-assembler \"L_OBJC_SYMBOLS.*:\\n\\t.long\\t0\\n\\t.long\\t0\\n\\t.short\\t2\\n\\t.short\\t0\\n\\t.long\\tL_OBJC_CLASS_Derived.*\\n\\t.long\\tL_OBJC_CLASS_Base.*\\n\" } } */\n+/* { dg-final { scan-assembler \"L_OBJC_SYMBOLS.*:\\n\\t.long\\t0\\n\\t.long\\t0\\n\\t.word\\t2\\n\\t.word\\t0\\n\\t.long\\tL_OBJC_CLASS_Derived.*\\n\\t.long\\tL_OBJC_CLASS_Base.*\\n\" { target { i?86-*-darwin* && { ! lp64 } } } } } */\n+/* { dg-final { scan-assembler \"L_OBJC_SYMBOLS.*:\\n\\t.long\\t0\\n\\t.long\\t0\\n\\t.short\\t2\\n\\t.short\\t0\\n\\t.long\\tL_OBJC_CLASS_Derived.*\\n\\t.long\\tL_OBJC_CLASS_Base.*\\n\" { target { powerpc-*-darwin* && { ! lp64 } } } } } */\n+/* { dg-final { scan-assembler \"L_OBJC_SYMBOLS.*:\\n\\t.quad\\t0\\n\\t.long\\t0\\n\\t.space 4\\n\\t.word\\t2\\n\\t.word\\t0\\n\\t.space 4\\n\\t.quad\\tL_OBJC_CLASS_Derived.*\\n\\t.quad\\tL_OBJC_CLASS_Base.*\\n\" { target { *-*-darwin* && { lp64 } } } } } */"}]}