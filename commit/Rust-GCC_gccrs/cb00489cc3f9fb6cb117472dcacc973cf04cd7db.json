{"sha": "cb00489cc3f9fb6cb117472dcacc973cf04cd7db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IwMDQ4OWNjM2Y5ZmI2Y2IxMTc0NzJkY2FjYzk3M2NmMDRjZDdkYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2012-07-15T16:26:48Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2012-07-15T16:26:48Z"}, "message": "mips.md (move_type): Replace mfhilo and mthilo with mflo and mtlo.\n\ngcc/\n\t* config/mips/mips.md (move_type): Replace mfhilo and mthilo\n\twith mflo and mtlo.\n\t(type): Split mfhilo into mfhi and mflo.  Split mthilo into mthi\n\tand mtlo.  Adjust move_type->type mapping.\n\t(may_clobber_hilo): Split mthilo into mthi and mtlo.\n\t(*movdi_32bit, *movdi_32bit_mips16, *movdi_64bit, *movdi_64bit_mips16)\n\t(*mov<mode>_internal, *mov<mode>_mips16, *movhi_internal)\n\t(*movhi_mips16, *movqi_internal, *movqi_mips16): Use mtlo and mflo\n\tinstead of mthilo and mfhilo.\n\t(mfhi<GPR:mode>_<HILO:mode>): Use mfhi instead of mfhilo.\n\t(mthi<GPR:mode>_<HILO:mode>): Use mthi instead of mthilo.\n\t* config/mips/mips-dsp.md (mips_extr_w, mips_extr_r_w, mips_extr_rs_w)\n\t(mips_extr_s_h, mips_extp, mips_extpdp, mips_shilo, mips_mthlip):\n\tUse mflo instead of mfhilo.\n\t* config/mips/10000.md (r10k_arith): Split mthilo.\n\t(r10k_mfhi, r10k_mflo): Use mfhi and mflo directly.\n\t* config/mips/sb1.md (ir_sb1_mfhi, ir_sb1_mflo): Likewise.\n\t(ir_sb1_mthilo): Split mthilo into mthi and mtlo.\n\t* config/mips/20kc.md (r20kc_imthilo, r20kc_imfhilo): Split\n\tmthilo and mfhilo.\n\t* config/mips/24k.md (r24k_int_mfhilo, r24k_int_mthilo): Likewise.\n\t* config/mips/4130.md (vr4130_class, vr4130_mfhilo, vr4130_mthilo):\n\tLikewise.\n\t* config/mips/4k.md (r4k_int_mthilo, r4k_int_mfhilo): Likewise.\n\t* config/mips/5400.md (ir_vr54_hilo): Likewise.\n\t* config/mips/5500.md (ir_vr55_mthilo, ir_vr55_mfhilo): Likewise.\n\t* config/mips/5k.md (r5k_int_mthilo, r5k_int_mfhilo): Likewise.\n\t* config/mips/7000.md (rm7_mthilo, rm7_mfhilo): Likewise.\n\t* config/mips/74k.md (r74k_int_mfhilo, r74k_int_mthilo): Likewise.\n\t* config/mips/9000.md (rm9k_mfhilo, rm9k_mthilo): Likewise.\n\t* config/mips/generic.md (generic_hilo): Likewise.\n\t* config/mips/loongson2ef.md (ls2_alu): Likewise.\n\t* config/mips/loongson3a.md (ls3a_mfhilo): Likewise.\n\t* config/mips/octeon.md (octeon_imul_o1, octeon_imul_o2)\n\t(octeon_mfhilo_o1, octeon_mfhilo_o2): Likewise.\n\t* config/mips/sr71k.md (ir_sr70_hilo): Likewise.\n\t* config/mips/xlr.md (xlr_hilo): Likewise.\n\nFrom-SVN: r189496", "tree": {"sha": "846ab8c6d5cfb28d81663ba734f61630889563f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/846ab8c6d5cfb28d81663ba734f61630889563f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb00489cc3f9fb6cb117472dcacc973cf04cd7db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb00489cc3f9fb6cb117472dcacc973cf04cd7db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb00489cc3f9fb6cb117472dcacc973cf04cd7db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b7e331f886b3e4564527cffb5a2f2e1a3b09213d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e331f886b3e4564527cffb5a2f2e1a3b09213d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7e331f886b3e4564527cffb5a2f2e1a3b09213d"}], "stats": {"total": 180, "additions": 109, "deletions": 71}, "files": [{"sha": "676707e57f60a1d58a3120d45d8dc0f4b64608f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb00489cc3f9fb6cb117472dcacc973cf04cd7db", "patch": "@@ -1,3 +1,43 @@\n+2012-07-15  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/mips/mips.md (move_type): Replace mfhilo and mthilo\n+\twith mflo and mtlo.\n+\t(type): Split mfhilo into mfhi and mflo.  Split mthilo into mthi\n+\tand mtlo.  Adjust move_type->type mapping.\n+\t(may_clobber_hilo): Split mthilo into mthi and mtlo.\n+\t(*movdi_32bit, *movdi_32bit_mips16, *movdi_64bit, *movdi_64bit_mips16)\n+\t(*mov<mode>_internal, *mov<mode>_mips16, *movhi_internal)\n+\t(*movhi_mips16, *movqi_internal, *movqi_mips16): Use mtlo and mflo\n+\tinstead of mthilo and mfhilo.\n+\t(mfhi<GPR:mode>_<HILO:mode>): Use mfhi instead of mfhilo.\n+\t(mthi<GPR:mode>_<HILO:mode>): Use mthi instead of mthilo.\n+\t* config/mips/mips-dsp.md (mips_extr_w, mips_extr_r_w, mips_extr_rs_w)\n+\t(mips_extr_s_h, mips_extp, mips_extpdp, mips_shilo, mips_mthlip):\n+\tUse mflo instead of mfhilo.\n+\t* config/mips/10000.md (r10k_arith): Split mthilo.\n+\t(r10k_mfhi, r10k_mflo): Use mfhi and mflo directly.\n+\t* config/mips/sb1.md (ir_sb1_mfhi, ir_sb1_mflo): Likewise.\n+\t(ir_sb1_mthilo): Split mthilo into mthi and mtlo.\n+\t* config/mips/20kc.md (r20kc_imthilo, r20kc_imfhilo): Split\n+\tmthilo and mfhilo.\n+\t* config/mips/24k.md (r24k_int_mfhilo, r24k_int_mthilo): Likewise.\n+\t* config/mips/4130.md (vr4130_class, vr4130_mfhilo, vr4130_mthilo):\n+\tLikewise.\n+\t* config/mips/4k.md (r4k_int_mthilo, r4k_int_mfhilo): Likewise.\n+\t* config/mips/5400.md (ir_vr54_hilo): Likewise.\n+\t* config/mips/5500.md (ir_vr55_mthilo, ir_vr55_mfhilo): Likewise.\n+\t* config/mips/5k.md (r5k_int_mthilo, r5k_int_mfhilo): Likewise.\n+\t* config/mips/7000.md (rm7_mthilo, rm7_mfhilo): Likewise.\n+\t* config/mips/74k.md (r74k_int_mfhilo, r74k_int_mthilo): Likewise.\n+\t* config/mips/9000.md (rm9k_mfhilo, rm9k_mthilo): Likewise.\n+\t* config/mips/generic.md (generic_hilo): Likewise.\n+\t* config/mips/loongson2ef.md (ls2_alu): Likewise.\n+\t* config/mips/loongson3a.md (ls3a_mfhilo): Likewise.\n+\t* config/mips/octeon.md (octeon_imul_o1, octeon_imul_o2)\n+\t(octeon_mfhilo_o1, octeon_mfhilo_o2): Likewise.\n+\t* config/mips/sr71k.md (ir_sr70_hilo): Likewise.\n+\t* config/mips/xlr.md (xlr_hilo): Likewise.\n+\n 2012-07-14  Andrew Stubbs  <ams@codesourcery.com>\n \t    Sandra Loosemore  <sandra@codesourcery.com>\n "}, {"sha": "589cd1b6a117928bbc2e867ab7a9b68100fe63b0", "filename": "gcc/config/mips/10000.md", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2F10000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2F10000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F10000.md?ref=cb00489cc3f9fb6cb117472dcacc973cf04cd7db", "patch": "@@ -68,21 +68,19 @@\n ;; Miscellaneous arith goes here too (this is a guess).\n (define_insn_reservation \"r10k_arith\" 1\n   (and (eq_attr \"cpu\" \"r10000\")\n-       (eq_attr \"type\" \"arith,mthilo,slt,clz,const,nop,trap,logical\"))\n+       (eq_attr \"type\" \"arith,mthi,mtlo,slt,clz,const,nop,trap,logical\"))\n   \"r10k_alu1 | r10k_alu2\")\n \n ;; We treat mfhilo differently, because we need to know when\n ;; it's HI and when it's LO.\n (define_insn_reservation \"r10k_mfhi\" 1\n   (and (eq_attr \"cpu\" \"r10000\")\n-       (and (eq_attr \"type\" \"mfhilo\")\n-            (not (match_operand 1 \"lo_operand\"))))\n+       (eq_attr \"type\" \"mfhi\"))\n   \"r10k_alu1 | r10k_alu2\")\n \n (define_insn_reservation \"r10k_mflo\" 1\n   (and (eq_attr \"cpu\" \"r10000\")\n-       (and (eq_attr \"type\" \"mfhilo\")\n-            (match_operand 1 \"lo_operand\")))\n+       (eq_attr \"type\" \"mflo\"))\n   \"r10k_alu1 | r10k_alu2\")\n \n "}, {"sha": "6581f5d943a8fa8e4cc5e5b086fa2648b1afaed0", "filename": "gcc/config/mips/20kc.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2F20kc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2F20kc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F20kc.md?ref=cb00489cc3f9fb6cb117472dcacc973cf04cd7db", "patch": "@@ -195,12 +195,12 @@\n ;; cycle latency.  Repeat rate is 3 for both.\n (define_insn_reservation \"r20kc_imthilo\" 3 \n \t\t\t (and (eq_attr \"cpu\" \"20kc\")\n-\t\t\t      (eq_attr \"type\" \"mthilo\"))\n+\t\t\t      (eq_attr \"type\" \"mthi,mtlo\"))\n \t\t\t \"r20kc_impydiv+(r20kc_impydiv_iter*3)\")\n \n (define_insn_reservation \"r20kc_imfhilo\" 1\n \t\t\t (and (eq_attr \"cpu\" \"20kc\")\n-\t\t\t      (eq_attr \"type\" \"mfhilo\"))\n+\t\t\t      (eq_attr \"type\" \"mfhi,mflo\"))\n \t\t\t \"r20kc_impydiv+(r20kc_impydiv_iter*3)\")\n \n ;; Move to fp coprocessor."}, {"sha": "1d701e76ba8508982f96353104097e204ff72257", "filename": "gcc/config/mips/24k.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2F24k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2F24k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F24k.md?ref=cb00489cc3f9fb6cb117472dcacc973cf04cd7db", "patch": "@@ -94,13 +94,13 @@\n ;; mfhi, mflo, mflhxu - deliver result to gpr in 5 cycles\n (define_insn_reservation \"r24k_int_mfhilo\" 5\n   (and (eq_attr \"cpu\" \"24kc,24kf2_1,24kf1_1\")\n-       (eq_attr \"type\" \"mfhilo\"))\n+       (eq_attr \"type\" \"mfhi,mflo\"))\n   \"r24k_iss+(r24k_mul3a|r24k_mul3b|r24k_mul3c)\")\n \n ;; mthi, mtlo, mtlhx - deliver result to hi/lo, thence madd, handled as bypass\n (define_insn_reservation \"r24k_int_mthilo\" 1\n   (and (eq_attr \"cpu\" \"24kc,24kf2_1,24kf1_1\")\n-       (eq_attr \"type\" \"mthilo\"))\n+       (eq_attr \"type\" \"mthi,mtlo\"))\n   \"r24k_iss+(r24k_mul3a|r24k_mul3b|r24k_mul3c)\")\n \n ;; div - default to 36 cycles for 32bit operands.  Faster for 24bit, 16bit and"}, {"sha": "da9ff7e43075f5fa2924d94f615f00d68745607c", "filename": "gcc/config/mips/4130.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2F4130.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2F4130.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F4130.md?ref=cb00489cc3f9fb6cb117472dcacc973cf04cd7db", "patch": "@@ -72,7 +72,7 @@\n   (cond [(eq_attr \"type\" \"load,store\")\n \t (const_string \"mem\")\n \n-\t (eq_attr \"type\" \"mfhilo,mthilo,imul,imul3,imadd,idiv\")\n+\t (eq_attr \"type\" \"mfhi,mflo,mthi,mtlo,imul,imul3,imadd,idiv\")\n \t (const_string \"mul\")]\n \t(const_string \"alu\")))\n \n@@ -98,12 +98,12 @@\n \n (define_insn_reservation \"vr4130_mfhilo\" 3\n   (and (eq_attr \"cpu\" \"r4130\")\n-       (eq_attr \"type\" \"mfhilo\"))\n+       (eq_attr \"type\" \"mfhi,mflo\"))\n   \"vr4130_muldiv\")\n \n (define_insn_reservation \"vr4130_mthilo\" 1\n   (and (eq_attr \"cpu\" \"r4130\")\n-       (eq_attr \"type\" \"mthilo\"))\n+       (eq_attr \"type\" \"mthi,mtlo\"))\n   \"vr4130_muldiv\")\n \n ;; The product is available in LO & HI after one cycle.  Moving the result"}, {"sha": "2494c6328cbcdedeea39e5d09e362878b817dbb0", "filename": "gcc/config/mips/4k.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2F4k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2F4k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F4k.md?ref=cb00489cc3f9fb6cb117472dcacc973cf04cd7db", "patch": "@@ -114,13 +114,13 @@\n ;; Move to HI/LO -> MADD/MSUB,MFHI/MFLO has a 1 cycle latency.\n (define_insn_reservation \"r4k_int_mthilo\" 1\n   (and (eq_attr \"cpu\" \"4kc,4kp\")\n-       (eq_attr \"type\" \"mthilo\"))\n+       (eq_attr \"type\" \"mthi,mtlo\"))\n   \"r4k_ixu_arith+r4k_ixu_mpydiv\")\n \n ;; Move from HI/LO -> integer operation has a 2 cycle latency.\n (define_insn_reservation \"r4k_int_mfhilo\" 2\n   (and (eq_attr \"cpu\" \"4kc,4kp\")\n-       (eq_attr \"type\" \"mfhilo\"))\n+       (eq_attr \"type\" \"mfhi,mflo\"))\n   \"r4k_ixu_arith+r4k_ixu_mpydiv\")\n \n ;; All other integer insns."}, {"sha": "40e7e36beee7481cd33e1c17bed0927d41a4586c", "filename": "gcc/config/mips/5400.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2F5400.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2F5400.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F5400.md?ref=cb00489cc3f9fb6cb117472dcacc973cf04cd7db", "patch": "@@ -73,7 +73,7 @@\n \n (define_insn_reservation \"ir_vr54_hilo\" 1\n   (and (eq_attr \"cpu\" \"r5400\")\n-       (eq_attr \"type\" \"mthilo,mfhilo\"))\n+       (eq_attr \"type\" \"mthi,mtlo,mfhi,mflo\"))\n   \"vr54_dp0|vr54_dp1\")\n \n (define_insn_reservation \"ir_vr54_arith\" 1"}, {"sha": "6467fad38be70b70213e5c8e328efc8916bc0ef4", "filename": "gcc/config/mips/5500.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2F5500.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2F5500.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F5500.md?ref=cb00489cc3f9fb6cb117472dcacc973cf04cd7db", "patch": "@@ -84,12 +84,12 @@\n \n (define_insn_reservation \"ir_vr55_mthilo\" 1\n   (and (eq_attr \"cpu\" \"r5500\")\n-       (eq_attr \"type\" \"mthilo\"))\n+       (eq_attr \"type\" \"mthi,mtlo\"))\n   \"vr55_mac\")\n \n (define_insn_reservation \"ir_vr55_mfhilo\" 5\n   (and (eq_attr \"cpu\" \"r5500\")\n-       (eq_attr \"type\" \"mfhilo\"))\n+       (eq_attr \"type\" \"mfhi,mflo\"))\n   \"vr55_mac\")\n \n ;; The default latency is for the GPR result of a mul.  Bypasses handle the"}, {"sha": "956d0e4e6799484c9a8c08daf9598589c78df90e", "filename": "gcc/config/mips/5k.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2F5k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2F5k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F5k.md?ref=cb00489cc3f9fb6cb117472dcacc973cf04cd7db", "patch": "@@ -88,13 +88,13 @@\n ;; Move to HI/LO -> MADD/MSUB,MFHI/MFLO has a 1 cycle latency.\n (define_insn_reservation \"r5k_int_mthilo\" 1\n   (and (eq_attr \"cpu\" \"5kc,5kf\")\n-       (eq_attr \"type\" \"mthilo\"))\n+       (eq_attr \"type\" \"mthi,mtlo\"))\n   \"r5k_ixu_arith+r5k_ixu_mpydiv\")\n \n ;; Move from HI/LO -> integer operation has a 2 cycle latency.\n (define_insn_reservation \"r5k_int_mfhilo\" 2\n   (and (eq_attr \"cpu\" \"5kc,5kf\")\n-       (eq_attr \"type\" \"mfhilo\"))\n+       (eq_attr \"type\" \"mfhi,mflo\"))\n   \"r5k_ixu_arith+r5k_ixu_mpydiv\")\n \n ;; All other integer insns."}, {"sha": "b348f936c3cbc1334d68bd39ef9a7ad2817db3e8", "filename": "gcc/config/mips/7000.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2F7000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2F7000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F7000.md?ref=cb00489cc3f9fb6cb117472dcacc973cf04cd7db", "patch": "@@ -134,12 +134,12 @@\n ;; Move to/from HI/LO.\n (define_insn_reservation \"rm7_mthilo\" 3\n   (and (eq_attr \"cpu\" \"r7000\")\n-       (eq_attr \"type\" \"mthilo\"))\n+       (eq_attr \"type\" \"mthi,mtlo\"))\n   \"rm7_impydiv\")\n \n (define_insn_reservation \"rm7_mfhilo\" 1\n   (and (eq_attr \"cpu\" \"r7000\")\n-       (eq_attr \"type\" \"mfhilo\"))\n+       (eq_attr \"type\" \"mfhi,mflo\"))\n   \"rm7_impydiv\")\n \n ;; Move to/from fp coprocessor."}, {"sha": "b643b65d353942986d14250f06a634e0665cb4d0", "filename": "gcc/config/mips/74k.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2F74k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2F74k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F74k.md?ref=cb00489cc3f9fb6cb117472dcacc973cf04cd7db", "patch": "@@ -80,13 +80,13 @@\n ;; mfhi, mflo, mflhxu - deliver result to gpr in 7 cycles\n (define_insn_reservation \"r74k_int_mfhilo\" 7\n   (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1,74kf3_2\")\n-       (eq_attr \"type\" \"mfhilo\"))\n+       (eq_attr \"type\" \"mfhi,mflo\"))\n   \"r74k_alu+r74k_mul\")\n \n ;; mthi, mtlo, mtlhx - deliver result to hi/lo, thence madd, handled as bypass\n (define_insn_reservation \"r74k_int_mthilo\" 7\n   (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1,74kf3_2\")\n-       (eq_attr \"type\" \"mthilo\"))\n+       (eq_attr \"type\" \"mthi,mtlo\"))\n   \"r74k_alu+r74k_mul\")\n \n ;; div - default to 50 cycles for 32bit operands.  Faster for 8 bit,"}, {"sha": "6712aeb2b55d8bb579571ff80cde434f1c82f5f4", "filename": "gcc/config/mips/9000.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2F9000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2F9000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F9000.md?ref=cb00489cc3f9fb6cb117472dcacc973cf04cd7db", "patch": "@@ -87,12 +87,12 @@\n \n (define_insn_reservation \"rm9k_mfhilo\" 1\n   (and (eq_attr \"cpu\" \"r9000\")\n-       (eq_attr \"type\" \"mfhilo\"))\n+       (eq_attr \"type\" \"mfhi,mflo\"))\n   \"rm9k_f_int\")\n \n (define_insn_reservation \"rm9k_mthilo\" 5\n   (and (eq_attr \"cpu\" \"r9000\")\n-       (eq_attr \"type\" \"mthilo\"))\n+       (eq_attr \"type\" \"mthi,mtlo\"))\n   \"rm9k_f_int\")\n \n (define_insn_reservation \"rm9k_xfer\" 2"}, {"sha": "ffbe4eb6d661a447218bbd17ebe75d1cbc909ebe", "filename": "gcc/config/mips/generic.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2Fgeneric.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2Fgeneric.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fgeneric.md?ref=cb00489cc3f9fb6cb117472dcacc973cf04cd7db", "patch": "@@ -43,7 +43,7 @@\n   \"alu\")\n \n (define_insn_reservation \"generic_hilo\" 1\n-  (eq_attr \"type\" \"mfhilo,mthilo\")\n+  (eq_attr \"type\" \"mfhi,mflo,mthi,mtlo\")\n   \"imuldiv*3\")\n \n (define_insn_reservation \"generic_imul\" 17"}, {"sha": "5b635c9dab2927ba29ee81ffb8bfdd4a596b8a45", "filename": "gcc/config/mips/loongson2ef.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2Floongson2ef.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2Floongson2ef.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Floongson2ef.md?ref=cb00489cc3f9fb6cb117472dcacc973cf04cd7db", "patch": "@@ -154,8 +154,8 @@\n ;; Reservation for integer instructions.\n (define_insn_reservation \"ls2_alu\" 2\n   (and (eq_attr \"cpu\" \"loongson_2e,loongson_2f\")\n-       (eq_attr \"type\" \"arith,condmove,const,logical,mfhilo,move,\n-                        mthilo,nop,shift,signext,slt\"))\n+       (eq_attr \"type\" \"arith,condmove,const,logical,mfhi,mflo,move,\n+                        mthi,mtlo,nop,shift,signext,slt\"))\n   \"ls2_alu\")\n \n ;; Reservation for branch instructions."}, {"sha": "deaf10e0ab8e95a1f97639e872a0b85cd4f5b209", "filename": "gcc/config/mips/loongson3a.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2Floongson3a.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2Floongson3a.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Floongson3a.md?ref=cb00489cc3f9fb6cb117472dcacc973cf04cd7db", "patch": "@@ -53,7 +53,7 @@\n \n (define_insn_reservation \"ls3a_mfhilo\" 1\n   (and (eq_attr \"cpu\" \"loongson_3a\")\n-       (eq_attr \"type\" \"mfhilo,mthilo\"))\n+       (eq_attr \"type\" \"mfhi,mflo,mthi,mtlo\"))\n   \"ls3a_alu2\")\n \n ;; Operation imul3nc is fully pipelined."}, {"sha": "c2a89e1b5a34dd1712881024ffb1e523f41e46b2", "filename": "gcc/config/mips/mips-dsp.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2Fmips-dsp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2Fmips-dsp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-dsp.md?ref=cb00489cc3f9fb6cb117472dcacc973cf04cd7db", "patch": "@@ -909,7 +909,7 @@\n     }\n   return \"extrv.w\\t%0,%q1,%2\";\n }\n-  [(set_attr \"type\"\t\"mfhilo\")\n+  [(set_attr \"type\"\t\"mflo\")\n    (set_attr \"mode\"\t\"SI\")])\n \n (define_insn \"mips_extr_r_w\"\n@@ -930,7 +930,7 @@\n     }\n   return \"extrv_r.w\\t%0,%q1,%2\";\n }\n-  [(set_attr \"type\"\t\"mfhilo\")\n+  [(set_attr \"type\"\t\"mflo\")\n    (set_attr \"mode\"\t\"SI\")])\n \n (define_insn \"mips_extr_rs_w\"\n@@ -951,7 +951,7 @@\n     }\n   return \"extrv_rs.w\\t%0,%q1,%2\";\n }\n-  [(set_attr \"type\"\t\"mfhilo\")\n+  [(set_attr \"type\"\t\"mflo\")\n    (set_attr \"mode\"\t\"SI\")])\n \n ;; EXTR*_S.H\n@@ -973,7 +973,7 @@\n     }\n   return \"extrv_s.h\\t%0,%q1,%2\";\n }\n-  [(set_attr \"type\"\t\"mfhilo\")\n+  [(set_attr \"type\"\t\"mflo\")\n    (set_attr \"mode\"\t\"SI\")])\n \n ;; EXTP*\n@@ -996,7 +996,7 @@\n     }\n   return \"extpv\\t%0,%q1,%2\";\n }\n-  [(set_attr \"type\"\t\"mfhilo\")\n+  [(set_attr \"type\"\t\"mflo\")\n    (set_attr \"mode\"\t\"SI\")])\n \n (define_insn \"mips_extpdp\"\n@@ -1021,7 +1021,7 @@\n     }\n   return \"extpdpv\\t%0,%q1,%2\";\n }\n-  [(set_attr \"type\"\t\"mfhilo\")\n+  [(set_attr \"type\"\t\"mflo\")\n    (set_attr \"mode\"\t\"SI\")])\n \n ;; SHILO*\n@@ -1040,7 +1040,7 @@\n     }\n   return \"shilov\\t%q0,%2\";\n }\n-  [(set_attr \"type\"\t\"mfhilo\")\n+  [(set_attr \"type\"\t\"mflo\")\n    (set_attr \"mode\"\t\"SI\")])\n \n ;; MTHLIP*\n@@ -1056,7 +1056,7 @@\n \t\t\t (reg:CCDSP CCDSP_PO_REGNUM)] UNSPEC_MTHLIP))])]\n   \"ISA_HAS_DSP && !TARGET_64BIT\"\n   \"mthlip\\t%2,%q0\"\n-  [(set_attr \"type\"\t\"mfhilo\")\n+  [(set_attr \"type\"\t\"mflo\")\n    (set_attr \"mode\"\t\"SI\")])\n \n ;; WRDSP"}, {"sha": "77bc00996a3f5fd87db521c82a7c047028e0547e", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=cb00489cc3f9fb6cb117472dcacc973cf04cd7db", "patch": "@@ -201,7 +201,7 @@\n ;; the split instructions; in some cases, it is more appropriate for the\n ;; scheduling type to be \"multi\" instead.\n (define_attr \"move_type\"\n-  \"unknown,load,fpload,store,fpstore,mtc,mfc,mthilo,mfhilo,move,fmove,\n+  \"unknown,load,fpload,store,fpstore,mtc,mfc,mtlo,mflo,move,fmove,\n    const,constN,signext,ext_ins,logical,arith,sll0,andi,loadpool,\n    shift_shift,lui_movf\"\n   (const_string \"unknown\"))\n@@ -239,8 +239,10 @@\n ;; condmove\tconditional moves\n ;; mtc\t\ttransfer to coprocessor\n ;; mfc\t\ttransfer from coprocessor\n-;; mthilo\ttransfer to hi/lo registers\n-;; mfhilo\ttransfer from hi/lo registers\n+;; mthi\t\ttransfer to a hi register\n+;; mtlo\t\ttransfer to a lo register\n+;; mfhi\t\ttransfer from a hi register\n+;; mflo\t\ttransfer from a lo register\n ;; const\tload constant\n ;; arith\tinteger arithmetic instructions\n ;; logical      integer logical instructions\n@@ -278,7 +280,7 @@\n ;; ghost\tan instruction that produces no real code\n (define_attr \"type\"\n   \"unknown,branch,jump,call,load,fpload,fpidxload,store,fpstore,fpidxstore,\n-   prefetch,prefetchx,condmove,mtc,mfc,mthilo,mfhilo,const,arith,logical,\n+   prefetch,prefetchx,condmove,mtc,mfc,mthi,mtlo,mfhi,mflo,const,arith,logical,\n    shift,slt,signext,clz,pop,trap,imul,imul3,imul3nc,imadd,idiv,idiv3,move,\n    fmove,fadd,fmul,fmadd,fdiv,frdiv,frdiv1,frdiv2,fabs,fneg,fcmp,fcvt,fsqrt,\n    frsqrt,frsqrt1,frsqrt2,multi,nop,ghost\"\n@@ -298,8 +300,8 @@\n \t (eq_attr \"move_type\" \"fpstore\") (const_string \"fpstore\")\n \t (eq_attr \"move_type\" \"mtc\") (const_string \"mtc\")\n \t (eq_attr \"move_type\" \"mfc\") (const_string \"mfc\")\n-\t (eq_attr \"move_type\" \"mthilo\") (const_string \"mthilo\")\n-\t (eq_attr \"move_type\" \"mfhilo\") (const_string \"mfhilo\")\n+\t (eq_attr \"move_type\" \"mtlo\") (const_string \"mtlo\")\n+\t (eq_attr \"move_type\" \"mflo\") (const_string \"mflo\")\n \n \t ;; These types of move are always single insns.\n \t (eq_attr \"move_type\" \"fmove\") (const_string \"fmove\")\n@@ -475,7 +477,7 @@\n \n \t  ;; Check for doubleword moves that are decomposed into two\n \t  ;; instructions.\n-\t  (and (eq_attr \"move_type\" \"mtc,mfc,mthilo,mfhilo,move\")\n+\t  (and (eq_attr \"move_type\" \"mtc,mfc,mtlo,mflo,move\")\n \t       (eq_attr \"dword_mode\" \"yes\"))\n \t  (const_int 8)\n \n@@ -557,7 +559,7 @@\n \t      (match_test \"TARGET_FIX_R4000\"))\n \t (const_string \"hilo\")\n \n-\t (and (eq_attr \"type\" \"mfhilo\")\n+\t (and (eq_attr \"type\" \"mfhi,mflo\")\n \t      (not (match_test \"ISA_HAS_HILO_INTERLOCKS\")))\n \t (const_string \"hilo\")]\n \t(const_string \"none\")))\n@@ -585,7 +587,7 @@\n ;; True if an instruction might assign to hi or lo when reloaded.\n ;; This is used by the TUNE_MACC_CHAINS code.\n (define_attr \"may_clobber_hilo\" \"no,yes\"\n-  (if_then_else (eq_attr \"type\" \"imul,imul3,imadd,idiv,mthilo\")\n+  (if_then_else (eq_attr \"type\" \"imul,imul3,imadd,idiv,mthi,mtlo\")\n \t\t(const_string \"yes\")\n \t\t(const_string \"no\")))\n \n@@ -4115,7 +4117,7 @@\n    && (register_operand (operands[0], DImode)\n        || reg_or_0_operand (operands[1], DImode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"move_type\" \"move,const,load,store,mthilo,mfhilo,mtc,fpload,mfc,fpstore,mtc,fpload,mfc,fpstore\")\n+  [(set_attr \"move_type\" \"move,const,load,store,mtlo,mflo,mtc,fpload,mfc,fpstore,mtc,fpload,mfc,fpstore\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*movdi_32bit_mips16\"\n@@ -4125,7 +4127,7 @@\n    && (register_operand (operands[0], DImode)\n        || register_operand (operands[1], DImode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"move_type\" \"move,move,move,const,constN,load,store,mfhilo\")\n+  [(set_attr \"move_type\" \"move,move,move,const,constN,load,store,mflo\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*movdi_64bit\"\n@@ -4135,7 +4137,7 @@\n    && (register_operand (operands[0], DImode)\n        || reg_or_0_operand (operands[1], DImode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"move_type\" \"move,const,const,load,store,mtc,fpload,mfc,fpstore,mthilo,mfhilo,mtc,fpload,mfc,fpstore\")\n+  [(set_attr \"move_type\" \"move,const,const,load,store,mtc,fpload,mfc,fpstore,mtlo,mflo,mtc,fpload,mfc,fpstore\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*movdi_64bit_mips16\"\n@@ -4145,7 +4147,7 @@\n    && (register_operand (operands[0], DImode)\n        || register_operand (operands[1], DImode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"move_type\" \"move,move,move,const,constN,const,loadpool,load,store,mfhilo\")\n+  [(set_attr \"move_type\" \"move,move,move,const,constN,const,loadpool,load,store,mflo\")\n    (set_attr \"mode\" \"DI\")])\n \n ;; On the mips16, we can split ld $r,N($r) into an add and a load,\n@@ -4213,7 +4215,7 @@\n    && (register_operand (operands[0], <MODE>mode)\n        || reg_or_0_operand (operands[1], <MODE>mode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"move_type\" \"move,const,const,load,store,mtc,fpload,mfc,fpstore,mfc,mtc,mthilo,mfhilo,mtc,fpload,mfc,fpstore\")\n+  [(set_attr \"move_type\" \"move,const,const,load,store,mtc,fpload,mfc,fpstore,mfc,mtc,mtlo,mflo,mtc,fpload,mfc,fpstore\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*mov<mode>_mips16\"\n@@ -4223,7 +4225,7 @@\n    && (register_operand (operands[0], <MODE>mode)\n        || register_operand (operands[1], <MODE>mode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"move_type\" \"move,move,move,const,constN,const,loadpool,load,store,mfhilo\")\n+  [(set_attr \"move_type\" \"move,move,move,const,constN,const,loadpool,load,store,mflo\")\n    (set_attr \"mode\" \"SI\")])\n \n ;; On the mips16, we can split lw $r,N($r) into an add and a load,\n@@ -4400,7 +4402,7 @@\n    && (register_operand (operands[0], HImode)\n        || reg_or_0_operand (operands[1], HImode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"move_type\" \"move,const,load,store,mthilo,mfhilo\")\n+  [(set_attr \"move_type\" \"move,const,load,store,mtlo,mflo\")\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*movhi_mips16\"\n@@ -4410,7 +4412,7 @@\n    && (register_operand (operands[0], HImode)\n        || register_operand (operands[1], HImode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"move_type\" \"move,move,move,const,constN,load,store,mfhilo\")\n+  [(set_attr \"move_type\" \"move,move,move,const,constN,load,store,mflo\")\n    (set_attr \"mode\" \"HI\")])\n \n ;; On the mips16, we can split lh $r,N($r) into an add and a load,\n@@ -4475,7 +4477,7 @@\n    && (register_operand (operands[0], QImode)\n        || reg_or_0_operand (operands[1], QImode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"move_type\" \"move,const,load,store,mthilo,mfhilo\")\n+  [(set_attr \"move_type\" \"move,const,load,store,mtlo,mflo\")\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*movqi_mips16\"\n@@ -4485,7 +4487,7 @@\n    && (register_operand (operands[0], QImode)\n        || register_operand (operands[1], QImode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"move_type\" \"move,move,move,const,constN,load,store,mfhilo\")\n+  [(set_attr \"move_type\" \"move,move,move,const,constN,load,store,mflo\")\n    (set_attr \"mode\" \"QI\")])\n \n ;; On the mips16, we can split lb $r,N($r) into an add and a load,\n@@ -4616,7 +4618,7 @@\n    && (register_operand (operands[0], TImode)\n        || reg_or_0_operand (operands[1], TImode))\"\n   \"#\"\n-  [(set_attr \"move_type\" \"move,const,load,store,mthilo,mfhilo\")\n+  [(set_attr \"move_type\" \"move,const,load,store,mtlo,mflo\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*movti_mips16\"\n@@ -4627,7 +4629,7 @@\n    && (register_operand (operands[0], TImode)\n        || register_operand (operands[1], TImode))\"\n   \"#\"\n-  [(set_attr \"move_type\" \"move,move,move,const,constN,load,store,mfhilo\")\n+  [(set_attr \"move_type\" \"move,move,move,const,constN,load,store,mflo\")\n    (set_attr \"mode\" \"TI\")])\n \n ;; 128-bit floating point moves\n@@ -4734,7 +4736,7 @@\n \t\t    UNSPEC_MFHI))]\n   \"\"\n   { return ISA_HAS_MACCHI ? \"<GPR:d>macchi\\t%0,%.,%.\" : \"mfhi\\t%0\"; }\n-  [(set_attr \"move_type\" \"mfhilo\")\n+  [(set_attr \"type\" \"mfhi\")\n    (set_attr \"mode\" \"<GPR:MODE>\")])\n \n ;; Set the high part of a HI/LO value, given that the low part has\n@@ -4747,7 +4749,7 @@\n \t\t     UNSPEC_MTHI))]\n   \"\"\n   \"mthi\\t%z1\"\n-  [(set_attr \"move_type\" \"mthilo\")\n+  [(set_attr \"type\" \"mthi\")\n    (set_attr \"mode\" \"SI\")])\n \n ;; Emit a doubleword move in which exactly one of the operands is"}, {"sha": "ff6b657aaf4889f77e76aaaebc461cb0ed45b57c", "filename": "gcc/config/mips/octeon.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2Focteon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2Focteon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Focteon.md?ref=cb00489cc3f9fb6cb117472dcacc973cf04cd7db", "patch": "@@ -83,22 +83,22 @@\n \n (define_insn_reservation \"octeon_imul_o1\" 2\n   (and (eq_attr \"cpu\" \"octeon\")\n-       (eq_attr \"type\" \"imul,mthilo\"))\n+       (eq_attr \"type\" \"imul,mthi,mtlo\"))\n   \"(octeon_pipe0 | octeon_pipe1) + octeon_mult, octeon_mult\")\n \n (define_insn_reservation \"octeon_imul_o2\" 1\n   (and (eq_attr \"cpu\" \"octeon2\")\n-       (eq_attr \"type\" \"imul,mthilo\"))\n+       (eq_attr \"type\" \"imul,mthi,mtlo\"))\n   \"octeon_pipe1 + octeon_mult\")\n \n (define_insn_reservation \"octeon_mfhilo_o1\" 5\n   (and (eq_attr \"cpu\" \"octeon\")\n-       (eq_attr \"type\" \"mfhilo\"))\n+       (eq_attr \"type\" \"mfhi,mflo\"))\n   \"(octeon_pipe0 | octeon_pipe1) + octeon_mult\")\n \n (define_insn_reservation \"octeon_mfhilo_o2\" 6\n   (and (eq_attr \"cpu\" \"octeon2\")\n-       (eq_attr \"type\" \"mfhilo\"))\n+       (eq_attr \"type\" \"mfhi,mflo\"))\n   \"octeon_pipe1 + octeon_mult\")\n \n (define_insn_reservation \"octeon_imadd_o1\" 4"}, {"sha": "f0df6f991ba314db1a14becef7a75ec6dfe0d194", "filename": "gcc/config/mips/sb1.md", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2Fsb1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2Fsb1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsb1.md?ref=cb00489cc3f9fb6cb117472dcacc973cf04cd7db", "patch": "@@ -295,21 +295,19 @@\n \n (define_insn_reservation \"ir_sb1_mfhi\" 1\n   (and (eq_attr \"cpu\" \"sb1,sb1a\")\n-       (and (eq_attr \"type\" \"mfhilo\")\n-\t    (not (match_operand 1 \"lo_operand\"))))\n+       (eq_attr \"type\" \"mfhi\"))\n   \"sb1_ex1\")\n \n (define_insn_reservation \"ir_sb1_mflo\" 1\n   (and (eq_attr \"cpu\" \"sb1,sb1a\")\n-       (and (eq_attr \"type\" \"mfhilo\")\n-\t    (match_operand 1 \"lo_operand\")))\n+       (eq_attr \"type\" \"mflo\"))\n   \"sb1_ex1\")\n \n ;; mt{hi,lo} to mul/div is 4 cycles.\n \n (define_insn_reservation \"ir_sb1_mthilo\" 4\n   (and (eq_attr \"cpu\" \"sb1,sb1a\")\n-       (eq_attr \"type\" \"mthilo\"))\n+       (eq_attr \"type\" \"mthi,mtlo\"))\n   \"sb1_ex1\")\n \n ;; mt{hi,lo} to mf{hi,lo} is 3 cycles."}, {"sha": "fb0c853b2ada1dc507168b3ad562f8010969fec6", "filename": "gcc/config/mips/sr71k.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2Fsr71k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2Fsr71k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsr71k.md?ref=cb00489cc3f9fb6cb117472dcacc973cf04cd7db", "patch": "@@ -201,7 +201,7 @@\n \n (define_insn_reservation \"ir_sr70_hilo\" 1\n   (and (eq_attr \"cpu\" \"sr71000\")\n-       (eq_attr \"type\" \"mthilo,mfhilo\"))\n+       (eq_attr \"type\" \"mthi,mtlo,mfhi,mflo\"))\n   \"ri_insns\")\n \n (define_insn_reservation \"ir_sr70_arith\" 1"}, {"sha": "e433d85b7564e48ebdf94b14878c3f4fc664bf27", "filename": "gcc/config/mips/xlr.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2Fxlr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb00489cc3f9fb6cb117472dcacc973cf04cd7db/gcc%2Fconfig%2Fmips%2Fxlr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fxlr.md?ref=cb00489cc3f9fb6cb117472dcacc973cf04cd7db", "patch": "@@ -85,5 +85,5 @@\n \n (define_insn_reservation \"xlr_hilo\" 2\n   (and (eq_attr \"cpu\" \"xlr\") \n-       (eq_attr \"type\" \"mfhilo,mthilo\"))\n+       (eq_attr \"type\" \"mfhi,mflo,mthi,mtlo\"))\n   \"xlr_imuldiv_nopipe\")"}]}