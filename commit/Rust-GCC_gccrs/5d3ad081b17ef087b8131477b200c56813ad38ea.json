{"sha": "5d3ad081b17ef087b8131477b200c56813ad38ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQzYWQwODFiMTdlZjA4N2I4MTMxNDc3YjIwMGM1NjgxM2FkMzhlYQ==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-04-29T13:08:46Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-04-29T13:08:46Z"}, "message": "Add execution + assembler tests of the AArch64 ZIP Intrinsics.\n\n\t* gcc.target/aarch64/simd/simd.exp: New file.\n\t* gcc.target/aarch64/simd/vzipf32_1.c: New file.\n\t* gcc.target/aarch64/simd/vzipf32.x: New file.\n\t* gcc.target/aarch64/simd/vzipp16_1.c: New file.\n\t* gcc.target/aarch64/simd/vzipp16.x: New file.\n\t* gcc.target/aarch64/simd/vzipp8_1.c: New file.\n\t* gcc.target/aarch64/simd/vzipp8.x: New file.\n\t* gcc.target/aarch64/simd/vzipqf32_1.c: New file.\n\t* gcc.target/aarch64/simd/vzipqf32.x: New file.\n\t* gcc.target/aarch64/simd/vzipqp16_1.c: New file.\n\t* gcc.target/aarch64/simd/vzipqp16.x: New file.\n\t* gcc.target/aarch64/simd/vzipqp8_1.c: New file.\n\t* gcc.target/aarch64/simd/vzipqp8.x: New file.\n\t* gcc.target/aarch64/simd/vzipqs16_1.c: New file.\n\t* gcc.target/aarch64/simd/vzipqs16.x: New file.\n\t* gcc.target/aarch64/simd/vzipqs32_1.c: New file.\n\t* gcc.target/aarch64/simd/vzipqs32.x: New file.\n\t* gcc.target/aarch64/simd/vzipqs8_1.c: New file.\n\t* gcc.target/aarch64/simd/vzipqs8.x: New file.\n\t* gcc.target/aarch64/simd/vzipqu16_1.c: New file.\n\t* gcc.target/aarch64/simd/vzipqu16.x: New file.\n\t* gcc.target/aarch64/simd/vzipqu32_1.c: New file.\n\t* gcc.target/aarch64/simd/vzipqu32.x: New file.\n\t* gcc.target/aarch64/simd/vzipqu8_1.c: New file.\n\t* gcc.target/aarch64/simd/vzipqu8.x: New file.\n\t* gcc.target/aarch64/simd/vzips16_1.c: New file.\n\t* gcc.target/aarch64/simd/vzips16.x: New file.\n\t* gcc.target/aarch64/simd/vzips32_1.c: New file.\n\t* gcc.target/aarch64/simd/vzips32.x: New file.\n\t* gcc.target/aarch64/simd/vzips8_1.c: New file.\n\t* gcc.target/aarch64/simd/vzips8.x: New file.\n\t* gcc.target/aarch64/simd/vzipu16_1.c: New file.\n\t* gcc.target/aarch64/simd/vzipu16.x: New file.\n\t* gcc.target/aarch64/simd/vzipu32_1.c: New file.\n\t* gcc.target/aarch64/simd/vzipu32.x: New file.\n\t* gcc.target/aarch64/simd/vzipu8_1.c: New file.\n\t* gcc.target/aarch64/simd/vzipu8.x: New file.\n\nFrom-SVN: r209893", "tree": {"sha": "ed68fae58b0c7558701ff8284f5fdb171287bb5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed68fae58b0c7558701ff8284f5fdb171287bb5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d3ad081b17ef087b8131477b200c56813ad38ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d3ad081b17ef087b8131477b200c56813ad38ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d3ad081b17ef087b8131477b200c56813ad38ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d3ad081b17ef087b8131477b200c56813ad38ea/comments", "author": null, "committer": null, "parents": [{"sha": "e3f613cbbc91e2101e8ef6a89caf70aa28057e69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3f613cbbc91e2101e8ef6a89caf70aa28057e69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3f613cbbc91e2101e8ef6a89caf70aa28057e69"}], "stats": {"total": 775, "additions": 775, "deletions": 0}, "files": [{"sha": "ef61cfefd6676d8e8cd34b39b2bad7bc36c73efb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -1,3 +1,43 @@\n+2014-04-29  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gcc.target/aarch64/simd/simd.exp: New file.\n+\t* gcc.target/aarch64/simd/vzipf32_1.c: New file.\n+\t* gcc.target/aarch64/simd/vzipf32.x: New file.\n+\t* gcc.target/aarch64/simd/vzipp16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vzipp16.x: New file.\n+\t* gcc.target/aarch64/simd/vzipp8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vzipp8.x: New file.\n+\t* gcc.target/aarch64/simd/vzipqf32_1.c: New file.\n+\t* gcc.target/aarch64/simd/vzipqf32.x: New file.\n+\t* gcc.target/aarch64/simd/vzipqp16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vzipqp16.x: New file.\n+\t* gcc.target/aarch64/simd/vzipqp8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vzipqp8.x: New file.\n+\t* gcc.target/aarch64/simd/vzipqs16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vzipqs16.x: New file.\n+\t* gcc.target/aarch64/simd/vzipqs32_1.c: New file.\n+\t* gcc.target/aarch64/simd/vzipqs32.x: New file.\n+\t* gcc.target/aarch64/simd/vzipqs8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vzipqs8.x: New file.\n+\t* gcc.target/aarch64/simd/vzipqu16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vzipqu16.x: New file.\n+\t* gcc.target/aarch64/simd/vzipqu32_1.c: New file.\n+\t* gcc.target/aarch64/simd/vzipqu32.x: New file.\n+\t* gcc.target/aarch64/simd/vzipqu8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vzipqu8.x: New file.\n+\t* gcc.target/aarch64/simd/vzips16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vzips16.x: New file.\n+\t* gcc.target/aarch64/simd/vzips32_1.c: New file.\n+\t* gcc.target/aarch64/simd/vzips32.x: New file.\n+\t* gcc.target/aarch64/simd/vzips8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vzips8.x: New file.\n+\t* gcc.target/aarch64/simd/vzipu16_1.c: New file.\n+\t* gcc.target/aarch64/simd/vzipu16.x: New file.\n+\t* gcc.target/aarch64/simd/vzipu32_1.c: New file.\n+\t* gcc.target/aarch64/simd/vzipu32.x: New file.\n+\t* gcc.target/aarch64/simd/vzipu8_1.c: New file.\n+\t* gcc.target/aarch64/simd/vzipu8.x: New file.\n+\n 2014-04-29  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n \n \t* gcc.target/aarch64/fcsel_1.c: New test case."}, {"sha": "097d29a9e131764793cac6488717e930d45e5d24", "filename": "gcc/testsuite/gcc.target/aarch64/simd/simd.exp", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fsimd.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fsimd.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fsimd.exp?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,45 @@\n+#  Specific regression driver for AArch64 SIMD instructions.\n+#  Copyright (C) 2014 Free Software Foundation, Inc.\n+#  Contributed by ARM Ltd.\n+#\n+#  This file is part of GCC.\n+#\n+#  GCC is free software; you can redistribute it and/or modify it\n+#  under the terms of the GNU General Public License as published by\n+#  the Free Software Foundation; either version 3, or (at your option)\n+#  any later version.\n+#\n+#  GCC is distributed in the hope that it will be useful, but\n+#  WITHOUT ANY WARRANTY; without even the implied warranty of\n+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+#  General Public License for more details.\n+#\n+#  You should have received a copy of the GNU General Public License\n+#  along with GCC; see the file COPYING3.  If not see\n+#  <http://www.gnu.org/licenses/>.  */\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't an AArch64 target.\n+if {![istarget aarch64*-*-*] } then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "cc69b892a02ae3de51f390982792458075eb9ebc", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipf32.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipf32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipf32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipf32.x?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+float32x2x2_t\n+test_vzipf32 (float32x2_t _a, float32x2_t _b)\n+{\n+  return vzip_f32 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  float32_t first[] = {1, 2};\n+  float32_t second[] = {3, 4};\n+  float32x2x2_t result = test_vzipf32 (vld1_f32 (first), vld1_f32 (second));\n+  float32x2_t res1 = result.val[0], res2 = result.val[1];\n+  float32_t exp1[] = {1, 3};\n+  float32_t exp2[] = {2, 4};\n+  float32x2_t expected1 = vld1_f32 (exp1);\n+  float32x2_t expected2 = vld1_f32 (exp2);\n+\n+  for (i = 0; i < 2; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "df3395a034e3d3d8dcd11d93c77fc127983b0aca", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipf32_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipf32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipf32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipf32_1.c?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vzip_f32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vzipf32.x\"\n+\n+/* { dg-final { scan-assembler-times \"zip1\\[ \\t\\]+v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"zip2\\[ \\t\\]+v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "6bdb3e66ac6ae4d549ddd6812e7a48c869c4a029", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipp16.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipp16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipp16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipp16.x?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+poly16x4x2_t\n+test_vzipp16 (poly16x4_t _a, poly16x4_t _b)\n+{\n+  return vzip_p16 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  poly16_t first[] = {1, 2, 3, 4};\n+  poly16_t second[] = {5, 6, 7, 8};\n+  poly16x4x2_t result = test_vzipp16 (vld1_p16 (first), vld1_p16 (second));\n+  poly16x4_t res1 = result.val[0], res2 = result.val[1];\n+  poly16_t exp1[] = {1, 5, 2, 6};\n+  poly16_t exp2[] = {3, 7, 4, 8};\n+  poly16x4_t expected1 = vld1_p16 (exp1);\n+  poly16x4_t expected2 = vld1_p16 (exp2);\n+\n+  for (i = 0; i < 4; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "e626a7877b360d259c72aeb68d9b043753fdefee", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipp16_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipp16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipp16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipp16_1.c?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vzip_p16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vzipp16.x\"\n+\n+/* { dg-final { scan-assembler-times \"zip1\\[ \\t\\]+v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"zip2\\[ \\t\\]+v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "5e8297eee4bf3f55ac2d1603c04968929dda85cd", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipp8.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipp8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipp8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipp8.x?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+poly8x8x2_t\n+test_vzipp8 (poly8x8_t _a, poly8x8_t _b)\n+{\n+  return vzip_p8 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  poly8_t first[] = {1, 2, 3, 4, 5, 6, 7, 8};\n+  poly8_t second[] = {9, 10, 11, 12, 13, 14, 15, 16};\n+  poly8x8x2_t result = test_vzipp8 (vld1_p8 (first), vld1_p8 (second));\n+  poly8x8_t res1 = result.val[0], res2 = result.val[1];\n+  poly8_t exp1[] = {1, 9, 2, 10, 3, 11, 4, 12};\n+  poly8_t exp2[] = {5, 13, 6, 14, 7, 15, 8, 16};\n+  poly8x8_t expected1 = vld1_p8 (exp1);\n+  poly8x8_t expected2 = vld1_p8 (exp2);\n+\n+  for (i = 0; i < 8; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "f99cb70211bc1240d8e997d471405c24dc0695ea", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipp8_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipp8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipp8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipp8_1.c?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vzip_p8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vzipp8.x\"\n+\n+/* { dg-final { scan-assembler-times \"zip1\\[ \\t\\]+v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"zip2\\[ \\t\\]+v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "e220aeaeb14e649a69673a688e248085c7cd78bf", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipqf32.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqf32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqf32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqf32.x?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+float32x4x2_t\n+test_vzipqf32 (float32x4_t _a, float32x4_t _b)\n+{\n+  return vzipq_f32 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  float32_t first[] = {1, 2, 3, 4};\n+  float32_t second[] = {5, 6, 7, 8};\n+  float32x4x2_t result = test_vzipqf32 (vld1q_f32 (first), vld1q_f32 (second));\n+  float32x4_t res1 = result.val[0], res2 = result.val[1];\n+  float32_t exp1[] = {1, 5, 2, 6};\n+  float32_t exp2[] = {3, 7, 4, 8};\n+  float32x4_t expected1 = vld1q_f32 (exp1);\n+  float32x4_t expected2 = vld1q_f32 (exp2);\n+\n+  for (i = 0; i < 4; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "74dae27dda0b9c83f147546473d47936c928cbc1", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipqf32_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqf32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqf32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqf32_1.c?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vzipq_f32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vzipqf32.x\"\n+\n+/* { dg-final { scan-assembler-times \"zip1\\[ \\t\\]+v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"zip2\\[ \\t\\]+v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "640d7a2513f302d8caa821c3621f3c9fecd38538", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipqp16.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqp16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqp16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqp16.x?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+poly16x8x2_t\n+test_vzipqp16 (poly16x8_t _a, poly16x8_t _b)\n+{\n+  return vzipq_p16 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  poly16_t first[] = {1, 2, 3, 4, 5, 6, 7, 8};\n+  poly16_t second[] = {9, 10, 11, 12, 13, 14, 15, 16};\n+  poly16x8x2_t result = test_vzipqp16 (vld1q_p16 (first), vld1q_p16 (second));\n+  poly16x8_t res1 = result.val[0], res2 = result.val[1];\n+  poly16_t exp1[] = {1, 9, 2, 10, 3, 11, 4, 12};\n+  poly16_t exp2[] = {5, 13, 6, 14, 7, 15, 8, 16};\n+  poly16x8_t expected1 = vld1q_p16 (exp1);\n+  poly16x8_t expected2 = vld1q_p16 (exp2);\n+\n+  for (i = 0; i < 8; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "0bfd4f1a53b520b1b018cb5c40ee66eeed844aa9", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipqp16_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqp16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqp16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqp16_1.c?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vzipq_p16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vzipqp16.x\"\n+\n+/* { dg-final { scan-assembler-times \"zip1\\[ \\t\\]+v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"zip2\\[ \\t\\]+v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "b211b4e532f1e0fd2497cf5094933738926610b5", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipqp8.x", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqp8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqp8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqp8.x?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,29 @@\n+extern void abort (void);\n+\n+poly8x16x2_t\n+test_vzipqp8 (poly8x16_t _a, poly8x16_t _b)\n+{\n+  return vzipq_p8 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  poly8_t first[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n+  poly8_t second[] =\n+      {17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};\n+  poly8x16x2_t result = test_vzipqp8 (vld1q_p8 (first), vld1q_p8 (second));\n+  poly8x16_t res1 = result.val[0], res2 = result.val[1];\n+  poly8_t exp1[] = {1, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23, 8, 24};\n+  poly8_t exp2[] =\n+      {9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 31, 16, 32};\n+  poly8x16_t expected1 = vld1q_p8 (exp1);\n+  poly8x16_t expected2 = vld1q_p8 (exp2);\n+\n+  for (i = 0; i < 16; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "fb2450634912606bfe5e581a7c2a123e6a11fcff", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipqp8_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqp8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqp8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqp8_1.c?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vzipq_p8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vzipqp8.x\"\n+\n+/* { dg-final { scan-assembler-times \"zip1\\[ \\t\\]+v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"zip2\\[ \\t\\]+v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "97ee6b5bde6d0b703f950a43959eb3bb0aeae38d", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipqs16.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqs16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqs16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqs16.x?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+int16x8x2_t\n+test_vzipqs16 (int16x8_t _a, int16x8_t _b)\n+{\n+  return vzipq_s16 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int16_t first[] = {1, 2, 3, 4, 5, 6, 7, 8};\n+  int16_t second[] = {9, 10, 11, 12, 13, 14, 15, 16};\n+  int16x8x2_t result = test_vzipqs16 (vld1q_s16 (first), vld1q_s16 (second));\n+  int16x8_t res1 = result.val[0], res2 = result.val[1];\n+  int16_t exp1[] = {1, 9, 2, 10, 3, 11, 4, 12};\n+  int16_t exp2[] = {5, 13, 6, 14, 7, 15, 8, 16};\n+  int16x8_t expected1 = vld1q_s16 (exp1);\n+  int16x8_t expected2 = vld1q_s16 (exp2);\n+\n+  for (i = 0; i < 8; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "3ff551cceb2777d3bee39f72acf98012b616d0c6", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipqs16_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqs16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqs16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqs16_1.c?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vzipq_s16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vzipqs16.x\"\n+\n+/* { dg-final { scan-assembler-times \"zip1\\[ \\t\\]+v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"zip2\\[ \\t\\]+v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "45f490d7350395b235f3621f11c1c309013f841c", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipqs32.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqs32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqs32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqs32.x?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+int32x4x2_t\n+test_vzipqs32 (int32x4_t _a, int32x4_t _b)\n+{\n+  return vzipq_s32 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int32_t first[] = {1, 2, 3, 4};\n+  int32_t second[] = {5, 6, 7, 8};\n+  int32x4x2_t result = test_vzipqs32 (vld1q_s32 (first), vld1q_s32 (second));\n+  int32x4_t res1 = result.val[0], res2 = result.val[1];\n+  int32_t exp1[] = {1, 5, 2, 6};\n+  int32_t exp2[] = {3, 7, 4, 8};\n+  int32x4_t expected1 = vld1q_s32 (exp1);\n+  int32x4_t expected2 = vld1q_s32 (exp2);\n+\n+  for (i = 0; i < 4; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "51681581bc9d4d04d9cd12a7df72e76ad9306e46", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipqs32_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqs32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqs32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqs32_1.c?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vzipq_s32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vzipqs32.x\"\n+\n+/* { dg-final { scan-assembler-times \"zip1\\[ \\t\\]+v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"zip2\\[ \\t\\]+v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "68cc84b7e86f317e6214b2c76378c75124fe7b71", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipqs8.x", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqs8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqs8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqs8.x?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,29 @@\n+extern void abort (void);\n+\n+int8x16x2_t\n+test_vzipqs8 (int8x16_t _a, int8x16_t _b)\n+{\n+  return vzipq_s8 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int8_t first[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n+  int8_t second[] =\n+      {17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};\n+  int8x16x2_t result = test_vzipqs8 (vld1q_s8 (first), vld1q_s8 (second));\n+  int8x16_t res1 = result.val[0], res2 = result.val[1];\n+  int8_t exp1[] = {1, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23, 8, 24};\n+  int8_t exp2[] =\n+      {9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 31, 16, 32};\n+  int8x16_t expected1 = vld1q_s8 (exp1);\n+  int8x16_t expected2 = vld1q_s8 (exp2);\n+\n+  for (i = 0; i < 16; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "ec035f3247d6397b2a3706b678fbcc1d0031411d", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipqs8_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqs8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqs8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqs8_1.c?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vzipq_s8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vzipqs8.x\"\n+\n+/* { dg-final { scan-assembler-times \"zip1\\[ \\t\\]+v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"zip2\\[ \\t\\]+v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "dc4e1462d791e1905a4f82e3b40bc4c9569c7a2c", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipqu16.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqu16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqu16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqu16.x?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+uint16x8x2_t\n+test_vzipqu16 (uint16x8_t _a, uint16x8_t _b)\n+{\n+  return vzipq_u16 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint16_t first[] = {1, 2, 3, 4, 5, 6, 7, 8};\n+  uint16_t second[] = {9, 10, 11, 12, 13, 14, 15, 16};\n+  uint16x8x2_t result = test_vzipqu16 (vld1q_u16 (first), vld1q_u16 (second));\n+  uint16x8_t res1 = result.val[0], res2 = result.val[1];\n+  uint16_t exp1[] = {1, 9, 2, 10, 3, 11, 4, 12};\n+  uint16_t exp2[] = {5, 13, 6, 14, 7, 15, 8, 16};\n+  uint16x8_t expected1 = vld1q_u16 (exp1);\n+  uint16x8_t expected2 = vld1q_u16 (exp2);\n+\n+  for (i = 0; i < 8; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "b540c8236a6aba46af1b730f6a8f8784c3e9a4c1", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipqu16_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqu16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqu16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqu16_1.c?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vzipq_u16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vzipqu16.x\"\n+\n+/* { dg-final { scan-assembler-times \"zip1\\[ \\t\\]+v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"zip2\\[ \\t\\]+v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h, ?v\\[0-9\\]+\\.8h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "8dde7e9bd620f131ad9eb22ab8bd1f00dc17af6a", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipqu32.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqu32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqu32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqu32.x?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+uint32x4x2_t\n+test_vzipqu32 (uint32x4_t _a, uint32x4_t _b)\n+{\n+  return vzipq_u32 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint32_t first[] = {1, 2, 3, 4};\n+  uint32_t second[] = {5, 6, 7, 8};\n+  uint32x4x2_t result = test_vzipqu32 (vld1q_u32 (first), vld1q_u32 (second));\n+  uint32x4_t res1 = result.val[0], res2 = result.val[1];\n+  uint32_t exp1[] = {1, 5, 2, 6};\n+  uint32_t exp2[] = {3, 7, 4, 8};\n+  uint32x4_t expected1 = vld1q_u32 (exp1);\n+  uint32x4_t expected2 = vld1q_u32 (exp2);\n+\n+  for (i = 0; i < 4; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "ca907b34523da5018eaeaceade85a441ddea0fcd", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipqu32_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqu32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqu32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqu32_1.c?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vzipq_u32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vzipqu32.x\"\n+\n+/* { dg-final { scan-assembler-times \"zip1\\[ \\t\\]+v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"zip2\\[ \\t\\]+v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s, ?v\\[0-9\\]+\\.4s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "8f2603bfebe732567a2452c323f49498022ebc4f", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipqu8.x", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqu8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqu8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqu8.x?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,29 @@\n+extern void abort (void);\n+\n+uint8x16x2_t\n+test_vzipqu8 (uint8x16_t _a, uint8x16_t _b)\n+{\n+  return vzipq_u8 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint8_t first[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n+  uint8_t second[] =\n+      {17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32};\n+  uint8x16x2_t result = test_vzipqu8 (vld1q_u8 (first), vld1q_u8 (second));\n+  uint8x16_t res1 = result.val[0], res2 = result.val[1];\n+  uint8_t exp1[] = {1, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23, 8, 24};\n+  uint8_t exp2[] =\n+      {9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 31, 16, 32};\n+  uint8x16_t expected1 = vld1q_u8 (exp1);\n+  uint8x16_t expected2 = vld1q_u8 (exp2);\n+\n+  for (i = 0; i < 16; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "16ada581746d25a02d50330371dea33ee39abbc3", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipqu8_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqu8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqu8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipqu8_1.c?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vzipq_u8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vzipqu8.x\"\n+\n+/* { dg-final { scan-assembler-times \"zip1\\[ \\t\\]+v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"zip2\\[ \\t\\]+v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b, ?v\\[0-9\\]+\\.16b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "71ee4687f3d09c9924ae98b778c0a68b88cbf6ac", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzips16.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzips16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzips16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzips16.x?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+int16x4x2_t\n+test_vzips16 (int16x4_t _a, int16x4_t _b)\n+{\n+  return vzip_s16 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int16_t first[] = {1, 2, 3, 4};\n+  int16_t second[] = {5, 6, 7, 8};\n+  int16x4x2_t result = test_vzips16 (vld1_s16 (first), vld1_s16 (second));\n+  int16x4_t res1 = result.val[0], res2 = result.val[1];\n+  int16_t exp1[] = {1, 5, 2, 6};\n+  int16_t exp2[] = {3, 7, 4, 8};\n+  int16x4_t expected1 = vld1_s16 (exp1);\n+  int16x4_t expected2 = vld1_s16 (exp2);\n+\n+  for (i = 0; i < 4; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "04a975469226db8516a63c31b50aff69e1a3e8f1", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzips16_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzips16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzips16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzips16_1.c?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vzip_s16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vzips16.x\"\n+\n+/* { dg-final { scan-assembler-times \"zip1\\[ \\t\\]+v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"zip2\\[ \\t\\]+v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "25bee1c2846d4ca87e0dd45ec3252eaca628e577", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzips32.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzips32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzips32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzips32.x?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+int32x2x2_t\n+test_vzips32 (int32x2_t _a, int32x2_t _b)\n+{\n+  return vzip_s32 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int32_t first[] = {1, 2};\n+  int32_t second[] = {3, 4};\n+  int32x2x2_t result = test_vzips32 (vld1_s32 (first), vld1_s32 (second));\n+  int32x2_t res1 = result.val[0], res2 = result.val[1];\n+  int32_t exp1[] = {1, 3};\n+  int32_t exp2[] = {2, 4};\n+  int32x2_t expected1 = vld1_s32 (exp1);\n+  int32x2_t expected2 = vld1_s32 (exp2);\n+\n+  for (i = 0; i < 2; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "1c44f64453e1906e9a1da849aaec35b524c3e1d3", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzips32_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzips32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzips32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzips32_1.c?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vzip_s32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vzips32.x\"\n+\n+/* { dg-final { scan-assembler-times \"zip1\\[ \\t\\]+v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"zip2\\[ \\t\\]+v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "4f04d731abe623f932eb6bef79f1c598e94e1d49", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzips8.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzips8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzips8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzips8.x?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+int8x8x2_t\n+test_vzips8 (int8x8_t _a, int8x8_t _b)\n+{\n+  return vzip_s8 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  int8_t first[] = {1, 2, 3, 4, 5, 6, 7, 8};\n+  int8_t second[] = {9, 10, 11, 12, 13, 14, 15, 16};\n+  int8x8x2_t result = test_vzips8 (vld1_s8 (first), vld1_s8 (second));\n+  int8x8_t res1 = result.val[0], res2 = result.val[1];\n+  int8_t exp1[] = {1, 9, 2, 10, 3, 11, 4, 12};\n+  int8_t exp2[] = {5, 13, 6, 14, 7, 15, 8, 16};\n+  int8x8_t expected1 = vld1_s8 (exp1);\n+  int8x8_t expected2 = vld1_s8 (exp2);\n+\n+  for (i = 0; i < 8; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "5ab7230aa041a6b3a217a631e0eb4239b836becb", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzips8_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzips8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzips8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzips8_1.c?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vzip_s8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vzips8.x\"\n+\n+/* { dg-final { scan-assembler-times \"zip1\\[ \\t\\]+v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"zip2\\[ \\t\\]+v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "f8dd2ceea98d841828994377a02253416bb5af96", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipu16.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipu16.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipu16.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipu16.x?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+uint16x4x2_t\n+test_vzipu16 (uint16x4_t _a, uint16x4_t _b)\n+{\n+  return vzip_u16 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint16_t first[] = {1, 2, 3, 4};\n+  uint16_t second[] = {5, 6, 7, 8};\n+  uint16x4x2_t result = test_vzipu16 (vld1_u16 (first), vld1_u16 (second));\n+  uint16x4_t res1 = result.val[0], res2 = result.val[1];\n+  uint16_t exp1[] = {1, 5, 2, 6};\n+  uint16_t exp2[] = {3, 7, 4, 8};\n+  uint16x4_t expected1 = vld1_u16 (exp1);\n+  uint16x4_t expected2 = vld1_u16 (exp2);\n+\n+  for (i = 0; i < 4; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "abf7365a733f2aa26eefd664701a29755fb5e7df", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipu16_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipu16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipu16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipu16_1.c?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vzip_u16' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vzipu16.x\"\n+\n+/* { dg-final { scan-assembler-times \"zip1\\[ \\t\\]+v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"zip2\\[ \\t\\]+v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h, ?v\\[0-9\\]+\\.4h!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "0579fc4a8bed97859f41c8a40b9d4506065c220f", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipu32.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipu32.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipu32.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipu32.x?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+uint32x2x2_t\n+test_vzipu32 (uint32x2_t _a, uint32x2_t _b)\n+{\n+  return vzip_u32 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint32_t first[] = {1, 2};\n+  uint32_t second[] = {3, 4};\n+  uint32x2x2_t result = test_vzipu32 (vld1_u32 (first), vld1_u32 (second));\n+  uint32x2_t res1 = result.val[0], res2 = result.val[1];\n+  uint32_t exp1[] = {1, 3};\n+  uint32_t exp2[] = {2, 4};\n+  uint32x2_t expected1 = vld1_u32 (exp1);\n+  uint32x2_t expected2 = vld1_u32 (exp2);\n+\n+  for (i = 0; i < 2; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "d994cb29c4fe23cb0dfb8b5d65de93b5f920af3e", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipu32_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipu32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipu32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipu32_1.c?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vzip_u32' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vzipu32.x\"\n+\n+/* { dg-final { scan-assembler-times \"zip1\\[ \\t\\]+v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"zip2\\[ \\t\\]+v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s, ?v\\[0-9\\]+\\.2s!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "28d9205c4f51d844697a98720e8075cd479c0720", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipu8.x", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipu8.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipu8.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipu8.x?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,27 @@\n+extern void abort (void);\n+\n+uint8x8x2_t\n+test_vzipu8 (uint8x8_t _a, uint8x8_t _b)\n+{\n+  return vzip_u8 (_a, _b);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+  uint8_t first[] = {1, 2, 3, 4, 5, 6, 7, 8};\n+  uint8_t second[] = {9, 10, 11, 12, 13, 14, 15, 16};\n+  uint8x8x2_t result = test_vzipu8 (vld1_u8 (first), vld1_u8 (second));\n+  uint8x8_t res1 = result.val[0], res2 = result.val[1];\n+  uint8_t exp1[] = {1, 9, 2, 10, 3, 11, 4, 12};\n+  uint8_t exp2[] = {5, 13, 6, 14, 7, 15, 8, 16};\n+  uint8x8_t expected1 = vld1_u8 (exp1);\n+  uint8x8_t expected2 = vld1_u8 (exp2);\n+\n+  for (i = 0; i < 8; i++)\n+    if ((res1[i] != expected1[i]) || (res2[i] != expected2[i]))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "990186a33f127eef91bbb09dd3275acb9b2dc3a0", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vzipu8_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipu8_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3ad081b17ef087b8131477b200c56813ad38ea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipu8_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvzipu8_1.c?ref=5d3ad081b17ef087b8131477b200c56813ad38ea", "patch": "@@ -0,0 +1,11 @@\n+/* Test the `vzip_u8' AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+#include \"vzipu8.x\"\n+\n+/* { dg-final { scan-assembler-times \"zip1\\[ \\t\\]+v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"zip2\\[ \\t\\]+v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b, ?v\\[0-9\\]+\\.8b!?\\(?:\\[ \\t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}]}