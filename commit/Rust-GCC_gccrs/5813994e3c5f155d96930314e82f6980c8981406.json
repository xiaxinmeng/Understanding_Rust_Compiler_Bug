{"sha": "5813994e3c5f155d96930314e82f6980c8981406", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgxMzk5NGUzYzVmMTU1ZDk2OTMwMzE0ZTgyZjY5ODBjODk4MTQwNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-10-23T09:34:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-10-23T09:34:46Z"}, "message": "re PR tree-optimization/41778 (missed dead store elimination)\n\n2009-10-23  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/41778\n\t* tree-ssa-pre.c (do_regular_insertion): Only insert if a\n\tredundancy along a path in the CFG we want to optimize for speed\n\tis going to be removed.\n\t(execute_pre): Do partial-PRE only if the function is to be\n\toptimized for speed.\n\t(gate_pre): Do not turn off all of PRE when not optimizing a\n\tfunction for speed.\n\n\t* gcc.dg/tree-ssa/ssa-pre-26.c: New testcase.\n\nFrom-SVN: r153491", "tree": {"sha": "eb96d46ea128145da9820a137b39b70dcb5a20d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb96d46ea128145da9820a137b39b70dcb5a20d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5813994e3c5f155d96930314e82f6980c8981406", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5813994e3c5f155d96930314e82f6980c8981406", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5813994e3c5f155d96930314e82f6980c8981406", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5813994e3c5f155d96930314e82f6980c8981406/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "17e72e5d2226f0853033c033c2132bec15a63a8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17e72e5d2226f0853033c033c2132bec15a63a8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17e72e5d2226f0853033c033c2132bec15a63a8a"}], "stats": {"total": 58, "additions": 53, "deletions": 5}, "files": [{"sha": "e0f70c4884385c05dd531f25b1af15373e060387", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5813994e3c5f155d96930314e82f6980c8981406/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5813994e3c5f155d96930314e82f6980c8981406/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5813994e3c5f155d96930314e82f6980c8981406", "patch": "@@ -1,3 +1,14 @@\n+2009-10-23  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/41778\n+\t* tree-ssa-pre.c (do_regular_insertion): Only insert if a\n+\tredundancy along a path in the CFG we want to optimize for speed\n+\tis going to be removed.\n+\t(execute_pre): Do partial-PRE only if the function is to be\n+\toptimized for speed.\n+\t(gate_pre): Do not turn off all of PRE when not optimizing a\n+\tfunction for speed.\n+\n 2009-10-23  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* builtins.c (fold_builtin_cabs): Use validate_arg()."}, {"sha": "aa2522805c285d37f9c2e04fd13d847f2187f1fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5813994e3c5f155d96930314e82f6980c8981406/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5813994e3c5f155d96930314e82f6980c8981406/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5813994e3c5f155d96930314e82f6980c8981406", "patch": "@@ -1,3 +1,8 @@\n+2009-10-23  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/41778\n+\t* gcc.dg/tree-ssa/ssa-pre-26.c: New testcase.\n+\n 2009-10-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/41791"}, {"sha": "978b7abab3af2a00722b6d1c33f169dd0a39589e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-26.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5813994e3c5f155d96930314e82f6980c8981406/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5813994e3c5f155d96930314e82f6980c8981406/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-26.c?ref=5813994e3c5f155d96930314e82f6980c8981406", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -fdump-tree-pre-details\" } */\n+\n+typedef union\n+{\n+  int* data;\n+} SA;\n+\n+typedef struct\n+{\n+  int reserved;\n+  char* array;\n+}SB;\n+\n+typedef struct\n+{\n+  int status;\n+}SC;\n+\n+void foo(SA* pResult, SB* method, SC* self)\n+{\n+  if (method->array[0] == 'L' && !self->status && pResult->data != 0)\n+    pResult->data = pResult->data;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Deleted redundant store\" \"pre\" } } */\n+/* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "6ae05b5a866294f32d4b457d52cfaf20f917e289", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5813994e3c5f155d96930314e82f6980c8981406/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5813994e3c5f155d96930314e82f6980c8981406/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=5813994e3c5f155d96930314e82f6980c8981406", "patch": "@@ -3405,6 +3405,7 @@ do_regular_insertion (basic_block block, basic_block dom)\n \t  pre_expr eprime = NULL;\n \t  edge_iterator ei;\n \t  pre_expr edoubleprime = NULL;\n+\t  bool do_insertion = false;\n \n \t  val = get_expr_value_id (expr);\n \t  if (bitmap_set_contains_value (PHI_GEN (block), val))\n@@ -3456,6 +3457,10 @@ do_regular_insertion (basic_block block, basic_block dom)\n \t\t{\n \t\t  avail[bprime->index] = edoubleprime;\n \t\t  by_some = true;\n+\t\t  /* We want to perform insertions to remove a redundancy on\n+\t\t     a path in the CFG we want to optimize for speed.  */\n+\t\t  if (optimize_edge_for_speed_p (pred))\n+\t\t    do_insertion = true;\n \t\t  if (first_s == NULL)\n \t\t    first_s = edoubleprime;\n \t\t  else if (!pre_expr_eq (first_s, edoubleprime))\n@@ -3466,7 +3471,8 @@ do_regular_insertion (basic_block block, basic_block dom)\n \t     already existing along every predecessor, and\n \t     it's defined by some predecessor, it is\n \t     partially redundant.  */\n-\t  if (!cant_insert && !all_same && by_some && dbg_cnt (treepre_insert))\n+\t  if (!cant_insert && !all_same && by_some && do_insertion\n+\t      && dbg_cnt (treepre_insert))\n \t    {\n \t      if (insert_into_preds_of_block (block, get_expression_id (expr),\n \t\t\t\t\t      avail))\n@@ -4526,11 +4532,11 @@ fini_pre (bool do_fre)\n    only wants to do full redundancy elimination.  */\n \n static unsigned int\n-execute_pre (bool do_fre ATTRIBUTE_UNUSED)\n+execute_pre (bool do_fre)\n {\n   unsigned int todo = 0;\n \n-  do_partial_partial = optimize > 2;\n+  do_partial_partial = optimize > 2 && optimize_function_for_speed_p (cfun);\n \n   /* This has to happen before SCCVN runs because\n      loop_optimizer_init may create new phis, etc.  */\n@@ -4615,8 +4621,7 @@ do_pre (void)\n static bool\n gate_pre (void)\n {\n-  /* PRE tends to generate bigger code.  */\n-  return flag_tree_pre != 0 && optimize_function_for_speed_p (cfun);\n+  return flag_tree_pre != 0;\n }\n \n struct gimple_opt_pass pass_pre ="}]}