{"sha": "12a22e76d64eca6e3b54949121b5c5820e189ee1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJhMjJlNzZkNjRlY2E2ZTNiNTQ5NDkxMjFiNWM1ODIwZTE4OWVlMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-03-09T20:34:52Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-03-09T20:34:52Z"}, "message": "tree.h (struct tree_common): Rename raises_flag to nothrow_flag.\n\n        * tree.h (struct tree_common): Rename raises_flag to nothrow_flag.\n        (TREE_NOTHROW): Rename from TREE_RAISES.\n        * toplev.c (rest_of_compilation): Set it.\n        * print-tree.c (print_node): Adjust.\n        * tree.c (stabilize_reference, build, build1): Don't set TREE_RAISES.\n        (stabilize_reference_1, get_unwidened, get_narrower): Likewise.\n        * calls.c (emit_call_1): Add 'nothrow' parm.  Add\n        REG_EH_REGION note as appropriate.\n        (libfunc_nothrow): New fn.\n        (emit_library_call, emit_library_call_value): Use it.\n        (expand_call): Check TREE_NOTHROW.\n\ncp:\n        * call.c (build_call): Set TREE_NOTHROW on the CALL_EXPR as\n        appropriate.\n        * decl.c (define_function): Set TREE_NOTHROW on the FUNCTION_DECL.\n        * except.c (call_eh_info, alloc_eh_object, expand_throw): Set\n        TREE_NOTHROW or TREE_THIS_VOLATILE on the function as appropriate.\n        * rtti.c (build_runtime_decl, get_tinfo_decl, build_dynamic_cast_1,\n        expand_si_desc, expand_class_desc, expand_ptr_desc, expand_attr_desc,\n        expand_generic_desc): Likewise.\n\nFrom-SVN: r32453", "tree": {"sha": "d6b66c9ef5d6a7003c13b1e76cfe2cc51c1fe8f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6b66c9ef5d6a7003c13b1e76cfe2cc51c1fe8f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12a22e76d64eca6e3b54949121b5c5820e189ee1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12a22e76d64eca6e3b54949121b5c5820e189ee1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12a22e76d64eca6e3b54949121b5c5820e189ee1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12a22e76d64eca6e3b54949121b5c5820e189ee1/comments", "author": null, "committer": null, "parents": [{"sha": "217ab4b7e745db9ff5d1fd4ec8ad364f7060a388", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/217ab4b7e745db9ff5d1fd4ec8ad364f7060a388", "html_url": "https://github.com/Rust-GCC/gccrs/commit/217ab4b7e745db9ff5d1fd4ec8ad364f7060a388"}], "stats": {"total": 142, "additions": 108, "deletions": 34}, "files": [{"sha": "57c48028c1ecae3164a56d976263517e4281067f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a22e76d64eca6e3b54949121b5c5820e189ee1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a22e76d64eca6e3b54949121b5c5820e189ee1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12a22e76d64eca6e3b54949121b5c5820e189ee1", "patch": "@@ -1,11 +1,23 @@\n 2000-03-09  Jason Merrill  <jason@casey.cygnus.com>\n \n+\t* tree.h (struct tree_common): Rename raises_flag to nothrow_flag.\n+\t(TREE_NOTHROW): Rename from TREE_RAISES.\n+\t* toplev.c (rest_of_compilation): Set it.\n+\t* print-tree.c (print_node): Adjust.\n+\t* tree.c (stabilize_reference, build, build1): Don't set TREE_RAISES.\n+\t(stabilize_reference_1, get_unwidened, get_narrower): Likewise.\n+\t* calls.c (emit_call_1): Add 'nothrow' parm.  Add \n+\tREG_EH_REGION note as appropriate.\n+\t(libfunc_nothrow): New fn.\n+\t(emit_library_call, emit_library_call_value): Use it.\n+\t(expand_call): Check TREE_NOTHROW.\n+\n \t* varasm.c (make_decl_rtl): Skip initial '*' when setting\n \tDECL_ASSEMBLER_NAME.\n \n 2000-03-09  Andreas Jaeger  <aj@suse.de>\n \n-\t* config/mips/linux.h (NO_IMPLICIT_EXTERN_C): Define.\n+\t* mips/linux.h (NO_IMPLICIT_EXTERN_C): Define.\n \t(TARGET_MEM_FUNCTIONS): Define.\n \n 2000-03-09  Jason Merrill  <jason@casey.cygnus.com>"}, {"sha": "60d551323dac9a8edf0043f2ad2262ecd0d26fc3", "filename": "gcc/calls.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a22e76d64eca6e3b54949121b5c5820e189ee1/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a22e76d64eca6e3b54949121b5c5820e189ee1/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=12a22e76d64eca6e3b54949121b5c5820e189ee1", "patch": "@@ -134,7 +134,7 @@ static int calls_function\tPARAMS ((tree, int));\n static int calls_function_1\tPARAMS ((tree, int));\n static void emit_call_1\t\tPARAMS ((rtx, tree, tree, HOST_WIDE_INT,\n \t\t\t\t\t HOST_WIDE_INT, HOST_WIDE_INT, rtx,\n-\t\t\t\t\t rtx, int, rtx, int));\n+\t\t\t\t\t rtx, int, rtx, int, int));\n static void precompute_register_parameters\tPARAMS ((int,\n \t\t\t\t\t\t\t struct arg_data *,\n \t\t\t\t\t\t\t int *));\n@@ -163,6 +163,7 @@ static void compute_argument_addresses\t\tPARAMS ((struct arg_data *,\n static rtx rtx_for_function_call\t\tPARAMS ((tree, tree));\n static void load_register_parameters\t\tPARAMS ((struct arg_data *,\n \t\t\t\t\t\t\t int, rtx *));\n+static int libfunc_nothrow\t\t\tPARAMS ((rtx));\n \n #if defined(ACCUMULATE_OUTGOING_ARGS) && defined(REG_PARM_STACK_SPACE)\n static rtx save_fixed_argument_area\tPARAMS ((int, rtx, int *, int *));\n@@ -383,7 +384,7 @@ prepare_call_address (funexp, fndecl, call_fusage, reg_parm_seen)\n static void\n emit_call_1 (funexp, fndecl, funtype, stack_size, rounded_stack_size,\n \t     struct_value_size, next_arg_reg, valreg, old_inhibit_defer_pop,\n-\t     call_fusage, is_const)\n+\t     call_fusage, is_const, nothrow)\n      rtx funexp;\n      tree fndecl ATTRIBUTE_UNUSED;\n      tree funtype ATTRIBUTE_UNUSED;\n@@ -394,7 +395,7 @@ emit_call_1 (funexp, fndecl, funtype, stack_size, rounded_stack_size,\n      rtx valreg;\n      int old_inhibit_defer_pop;\n      rtx call_fusage;\n-     int is_const;\n+     int is_const, nothrow;\n {\n   rtx rounded_stack_size_rtx = GEN_INT (rounded_stack_size);\n #if defined (HAVE_call) && defined (HAVE_call_value)\n@@ -491,6 +492,12 @@ emit_call_1 (funexp, fndecl, funtype, stack_size, rounded_stack_size,\n   if (is_const)\n     CONST_CALL_P (call_insn) = 1;\n \n+  /* If this call can't throw, attach a REG_EH_REGION reg note to that\n+     effect.  */\n+  if (nothrow)\n+    REG_NOTES (call_insn) = gen_rtx_EXPR_LIST (REG_EH_REGION, GEN_INT (-1),\n+\t\t\t\t\t       REG_NOTES (call_insn));\n+\n   /* Restore this now, so that we do defer pops for this call's args\n      if the context of the call as a whole permits.  */\n   inhibit_defer_pop = old_inhibit_defer_pop;\n@@ -1682,6 +1689,8 @@ expand_call (exp, target, ignore)\n   int is_const = 0;\n   /* Nonzero if this is a call to a `volatile' function.  */\n   int is_volatile = 0;\n+  /* Nonzero if this is a call to a function that won't throw an exception.  */\n+  int nothrow = TREE_NOTHROW (exp);\n #if defined(ACCUMULATE_OUTGOING_ARGS) && defined(REG_PARM_STACK_SPACE)\n   /* Define the boundary of the register parm stack space that needs to be\n      save, if any.  */\n@@ -1756,6 +1765,9 @@ expand_call (exp, target, ignore)\n \n \t  if (TREE_THIS_VOLATILE (fndecl))\n \t    is_volatile = 1;\n+\n+\t  if (TREE_NOTHROW (fndecl))\n+\t    nothrow = 1;\n \t}\n     }\n \n@@ -2418,7 +2430,7 @@ expand_call (exp, target, ignore)\n   emit_call_1 (funexp, fndecl, funtype, unadjusted_args_size,\n \t       args_size.constant, struct_value_size,\n \t       FUNCTION_ARG (args_so_far, VOIDmode, void_type_node, 1),\n-\t       valreg, old_inhibit_defer_pop, call_fusage, is_const);\n+\t       valreg, old_inhibit_defer_pop, call_fusage, is_const, nothrow);\n \n   /* If call is cse'able, make appropriate pair of reg-notes around it.\n      Test valreg so we don't crash; may safely ignore `const'\n@@ -2666,6 +2678,22 @@ expand_call (exp, target, ignore)\n   return target;\n }\n \f\n+/* Returns nonzero if FUN is the symbol for a library function which can\n+   not throw.  */\n+\n+static int\n+libfunc_nothrow (fun)\n+     rtx fun;\n+{\n+  if (fun == throw_libfunc\n+      || fun == rethrow_libfunc\n+      || fun == sjthrow_libfunc\n+      || fun == sjpopnthrow_libfunc)\n+    return 0;\n+\n+  return 1;\n+}\n+\n /* Output a library call to function FUN (a SYMBOL_REF rtx)\n    (emitting the queue unless NO_QUEUE is nonzero),\n    for a value of mode OUTMODE,\n@@ -2714,6 +2742,7 @@ emit_library_call VPARAMS((rtx orgfun, int no_queue, enum machine_mode outmode,\n   int old_inhibit_defer_pop = inhibit_defer_pop;\n   rtx call_fusage = 0;\n   int reg_parm_stack_space = 0;\n+  int nothrow;\n #if defined(ACCUMULATE_OUTGOING_ARGS) && defined(REG_PARM_STACK_SPACE)\n   /* Define the boundary of the register parm stack space that needs to be\n      save, if any.  */\n@@ -2747,6 +2776,8 @@ emit_library_call VPARAMS((rtx orgfun, int no_queue, enum machine_mode outmode,\n \n   fun = orgfun;\n \n+  nothrow = libfunc_nothrow (fun);\n+\n   /* Copy all the libcall-arguments out of the varargs data\n      and into a vector ARGVEC.\n \n@@ -3139,7 +3170,7 @@ emit_library_call VPARAMS((rtx orgfun, int no_queue, enum machine_mode outmode,\n \t       original_args_size.constant, args_size.constant, 0,\n \t       FUNCTION_ARG (args_so_far, VOIDmode, void_type_node, 1),\n \t       outmode != VOIDmode ? hard_libcall_value (outmode) : NULL_RTX,\n-\t       old_inhibit_defer_pop + 1, call_fusage, no_queue);\n+\t       old_inhibit_defer_pop + 1, call_fusage, no_queue, nothrow);\n \n   pop_temp_slots ();\n \n@@ -3234,6 +3265,7 @@ emit_library_call_value VPARAMS((rtx orgfun, rtx value, int no_queue,\n   int struct_value_size = 0;\n   int is_const;\n   int reg_parm_stack_space = 0;\n+  int nothrow;\n #ifdef ACCUMULATE_OUTGOING_ARGS\n   int needed;\n #endif\n@@ -3272,6 +3304,8 @@ emit_library_call_value VPARAMS((rtx orgfun, rtx value, int no_queue,\n   is_const = no_queue;\n   fun = orgfun;\n \n+  nothrow = libfunc_nothrow (fun);\n+\n #ifdef PREFERRED_STACK_BOUNDARY\n   /* Ensure current function's preferred stack boundary is at least\n      what we need.  */\n@@ -3737,7 +3771,7 @@ emit_library_call_value VPARAMS((rtx orgfun, rtx value, int no_queue,\n \t       struct_value_size,\n \t       FUNCTION_ARG (args_so_far, VOIDmode, void_type_node, 1),\n \t       mem_value == 0 ? hard_libcall_value (outmode) : NULL_RTX,\n-\t       old_inhibit_defer_pop + 1, call_fusage, is_const);\n+\t       old_inhibit_defer_pop + 1, call_fusage, is_const, nothrow);\n \n   /* Now restore inhibit_defer_pop to its actual original value.  */\n   OK_DEFER_POP;"}, {"sha": "27b823e902b738603da390443cc453de0ed98b7e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a22e76d64eca6e3b54949121b5c5820e189ee1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a22e76d64eca6e3b54949121b5c5820e189ee1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=12a22e76d64eca6e3b54949121b5c5820e189ee1", "patch": "@@ -1,3 +1,14 @@\n+2000-03-09  Jason Merrill  <jason@casey.cygnus.com>\n+\n+\t* call.c (build_call): Set TREE_NOTHROW on the CALL_EXPR as\n+\tappropriate.\n+\t* decl.c (define_function): Set TREE_NOTHROW on the FUNCTION_DECL.\n+\t* except.c (call_eh_info, alloc_eh_object, expand_throw): Set\n+\tTREE_NOTHROW or TREE_THIS_VOLATILE on the function as appropriate.\n+\t* rtti.c (build_runtime_decl, get_tinfo_decl, build_dynamic_cast_1,\n+\texpand_si_desc, expand_class_desc, expand_ptr_desc, expand_attr_desc,\n+\texpand_generic_desc): Likewise.\n+\n 2000-03-08  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* exception.cc (__cp_pop_exception): Cleanup the original object."}, {"sha": "e15d4f0de018607498eb2733efc0cdba21102948", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a22e76d64eca6e3b54949121b5c5820e189ee1/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a22e76d64eca6e3b54949121b5c5820e189ee1/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=12a22e76d64eca6e3b54949121b5c5820e189ee1", "patch": "@@ -368,6 +368,7 @@ build_call (function, result_type, parms)\n      tree function, result_type, parms;\n {\n   int is_constructor = 0;\n+  int nothrow;\n   tree tmp;\n   tree decl;\n \n@@ -385,6 +386,11 @@ build_call (function, result_type, parms)\n   else\n     decl = NULL_TREE;\n \n+  /* We check both the decl and the type; a function may be known not to\n+     throw without being declared throw().  */\n+  nothrow = ((decl && TREE_NOTHROW (decl))\n+\t     || TYPE_NOTHROW_P (TREE_TYPE (TREE_TYPE (function))));\n+  \n   if (decl && DECL_CONSTRUCTOR_P (decl))\n     is_constructor = 1;\n \n@@ -408,6 +414,7 @@ build_call (function, result_type, parms)\n   TREE_HAS_CONSTRUCTOR (function) = is_constructor;\n   TREE_TYPE (function) = result_type;\n   TREE_SIDE_EFFECTS (function) = 1;\n+  TREE_NOTHROW (function) = nothrow;\n   \n   return function;\n }"}, {"sha": "b16d9d84d1a2e7d46afe9a04ab179612091bc817", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a22e76d64eca6e3b54949121b5c5820e189ee1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a22e76d64eca6e3b54949121b5c5820e189ee1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=12a22e76d64eca6e3b54949121b5c5820e189ee1", "patch": "@@ -6479,6 +6479,10 @@ define_function (name, type, pfn, library_name)\n   TREE_PUBLIC (decl) = 1;\n   DECL_ARTIFICIAL (decl) = 1;\n \n+  /* If no exception specifier was given, assume it doesn't throw.  */\n+  if (TYPE_RAISES_EXCEPTIONS (type) == NULL_TREE)\n+    TREE_NOTHROW (decl) = 1;\n+\n   my_friendly_assert (DECL_CONTEXT (decl) == NULL_TREE, 392);\n   DECL_CONTEXT (decl) = FROB_CONTEXT (current_namespace);\n "}, {"sha": "b8d4fa2e709d862f415fa02c8b92e747fdee5df1", "filename": "gcc/cp/except.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a22e76d64eca6e3b54949121b5c5820e189ee1/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a22e76d64eca6e3b54949121b5c5820e189ee1/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=12a22e76d64eca6e3b54949121b5c5820e189ee1", "patch": "@@ -258,6 +258,7 @@ call_eh_info ()\n       DECL_EXTERNAL (fn) = 1;\n       TREE_PUBLIC (fn) = 1;\n       DECL_ARTIFICIAL (fn) = 1;\n+      TREE_NOTHROW (fn) = 1;\n       pushdecl_top_level (fn);\n       make_function_rtl (fn);\n     }\n@@ -805,6 +806,7 @@ alloc_eh_object (type)\n       DECL_EXTERNAL (fn) = 1;\n       TREE_PUBLIC (fn) = 1;\n       DECL_ARTIFICIAL (fn) = 1;\n+      TREE_NOTHROW (fn) = 1;\n       pushdecl_top_level (fn);\n       make_function_rtl (fn);\n     }\n@@ -857,6 +859,7 @@ expand_throw (exp)\n \t  DECL_EXTERNAL (fn) = 1;\n \t  TREE_PUBLIC (fn) = 1;\n \t  DECL_ARTIFICIAL (fn) = 1;\n+\t  TREE_THIS_VOLATILE (fn) = 1;\n \t  pushdecl_top_level (fn);\n \t  make_function_rtl (fn);\n \t}\n@@ -976,6 +979,7 @@ expand_throw (exp)\n \t  DECL_EXTERNAL (fn) = 1;\n \t  TREE_PUBLIC (fn) = 1;\n \t  DECL_ARTIFICIAL (fn) = 1;\n+\t  TREE_NOTHROW (fn) = 1;\n \t  pushdecl_top_level (fn);\n \t  make_function_rtl (fn);\n \t}\n@@ -1005,6 +1009,7 @@ expand_throw (exp)\n \t  DECL_EXTERNAL (fn) = 1;\n \t  TREE_PUBLIC (fn) = 1;\n \t  DECL_ARTIFICIAL (fn) = 1;\n+\t  TREE_NOTHROW (fn) = 1;\n \t  pushdecl_top_level (fn);\n \t  make_function_rtl (fn);\n \t}"}, {"sha": "f29da8c5b145055d07cc557618c5e8b863b30039", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a22e76d64eca6e3b54949121b5c5820e189ee1/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a22e76d64eca6e3b54949121b5c5820e189ee1/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=12a22e76d64eca6e3b54949121b5c5820e189ee1", "patch": "@@ -185,6 +185,7 @@ build_runtime_decl (name, type)\n       DECL_EXTERNAL (d) = 1;\n       TREE_PUBLIC (d) = 1;\n       DECL_ARTIFICIAL (d) = 1;\n+      TREE_THIS_VOLATILE (d) = 1;\n       pushdecl_top_level (d);\n       make_function_rtl (d);\n     }\n@@ -423,6 +424,7 @@ get_tinfo_decl (type)\n       DECL_EXTERNAL (d) = 1;\n       TREE_PUBLIC (d) = 1;\n       DECL_ARTIFICIAL (d) = 1;\n+      TREE_NOTHROW (d) = 1;\n       DECL_NOT_REALLY_EXTERN (d) = 1;\n       SET_DECL_TINFO_FN_P (d);\n       TREE_TYPE (name) = type;\n@@ -818,9 +820,10 @@ build_dynamic_cast_1 (type, expr)\n \t      DECL_EXTERNAL (dcast_fn) = 1;\n \t      TREE_PUBLIC (dcast_fn) = 1;\n \t      DECL_ARTIFICIAL (dcast_fn) = 1;\n+\t      TREE_NOTHROW (dcast_fn) = 1;\n \t      pushdecl (dcast_fn);\n \t      if (new_abi_rtti_p ())\n-\t        /* We want it's name mangling.  */\n+\t        /* We want its name mangling.  */\n \t        set_mangled_name_for_decl (dcast_fn);\n \t      make_function_rtl (dcast_fn);\n               pop_nested_namespace (ns);\n@@ -915,6 +918,7 @@ expand_si_desc (tdecl, type)\n       DECL_EXTERNAL (fn) = 1;\n       TREE_PUBLIC (fn) = 1;\n       DECL_ARTIFICIAL (fn) = 1;\n+      TREE_NOTHROW (fn) = 1;\n       pushdecl_top_level (fn);\n       make_function_rtl (fn);\n     }\n@@ -1074,6 +1078,7 @@ expand_class_desc (tdecl, type)\n       DECL_EXTERNAL (fn) = 1;\n       TREE_PUBLIC (fn) = 1;\n       DECL_ARTIFICIAL (fn) = 1;\n+      TREE_NOTHROW (fn) = 1;\n       pushdecl_top_level (fn);\n       make_function_rtl (fn);\n     }\n@@ -1118,6 +1123,7 @@ expand_ptr_desc (tdecl, type)\n       DECL_EXTERNAL (fn) = 1;\n       TREE_PUBLIC (fn) = 1;\n       DECL_ARTIFICIAL (fn) = 1;\n+      TREE_NOTHROW (fn) = 1;\n       pushdecl_top_level (fn);\n       make_function_rtl (fn);\n     }\n@@ -1163,6 +1169,7 @@ expand_attr_desc (tdecl, type)\n       DECL_EXTERNAL (fn) = 1;\n       TREE_PUBLIC (fn) = 1;\n       DECL_ARTIFICIAL (fn) = 1;\n+      TREE_NOTHROW (fn) = 1;\n       pushdecl_top_level (fn);\n       make_function_rtl (fn);\n     }\n@@ -1200,6 +1207,7 @@ expand_generic_desc (tdecl, type, fnname)\n       DECL_EXTERNAL (fn) = 1;\n       TREE_PUBLIC (fn) = 1;\n       DECL_ARTIFICIAL (fn) = 1;\n+      TREE_NOTHROW (fn) = 1;\n       pushdecl_top_level (fn);\n       make_function_rtl (fn);\n     }"}, {"sha": "2ffd4424a1394686c87b55887d71dbc5507a45e7", "filename": "gcc/print-tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a22e76d64eca6e3b54949121b5c5820e189ee1/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a22e76d64eca6e3b54949121b5c5820e189ee1/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=12a22e76d64eca6e3b54949121b5c5820e189ee1", "patch": "@@ -301,8 +301,8 @@ print_node (file, prefix, node, indent)\n     fputs (\" asm_written\", file);\n   if (TREE_USED (node))\n     fputs (\" used\", file);\n-  if (TREE_RAISES (node))\n-    fputs (\" raises\", file);\n+  if (TREE_NOTHROW (node))\n+    fputs (\" nothrow\", file);\n   if (!ggc_p && TREE_PERMANENT (node))\n     fputs (\" permanent\", file);\n   if (TREE_PUBLIC (node))"}, {"sha": "55b03a42a878d6b13a592eaf1248be9738e8e9d1", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a22e76d64eca6e3b54949121b5c5820e189ee1/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a22e76d64eca6e3b54949121b5c5820e189ee1/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=12a22e76d64eca6e3b54949121b5c5820e189ee1", "patch": "@@ -3679,6 +3679,10 @@ rest_of_compilation (decl)\n #endif\n \n   current_function_nothrow = nothrow_function_p ();\n+  if (current_function_nothrow)\n+    /* Now we know that this can't throw; set the flag for the benefit\n+       of other functions later in this translation unit.  */\n+    TREE_NOTHROW (current_function_decl) = 1;\n \n   /* Now turn the rtl into assembler code.  */\n "}, {"sha": "a4159467a15fd3718bcacb72c62393c45f31f847", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a22e76d64eca6e3b54949121b5c5820e189ee1/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a22e76d64eca6e3b54949121b5c5820e189ee1/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=12a22e76d64eca6e3b54949121b5c5820e189ee1", "patch": "@@ -3025,7 +3025,6 @@ stabilize_reference (ref)\n   TREE_READONLY (result) = TREE_READONLY (ref);\n   TREE_SIDE_EFFECTS (result) = TREE_SIDE_EFFECTS (ref);\n   TREE_THIS_VOLATILE (result) = TREE_THIS_VOLATILE (ref);\n-  TREE_RAISES (result) = TREE_RAISES (ref);\n \n   return result;\n }\n@@ -3108,7 +3107,6 @@ stabilize_reference_1 (e)\n   TREE_READONLY (result) = TREE_READONLY (e);\n   TREE_SIDE_EFFECTS (result) = TREE_SIDE_EFFECTS (e);\n   TREE_THIS_VOLATILE (result) = TREE_THIS_VOLATILE (e);\n-  TREE_RAISES (result) = TREE_RAISES (e);\n \n   return result;\n }\n@@ -3161,15 +3159,11 @@ build VPARAMS ((enum tree_code code, tree tt, ...))\n \t{\n \t  if (TREE_SIDE_EFFECTS (arg0))\n \t    TREE_SIDE_EFFECTS (t) = 1;\n-\t  if (TREE_RAISES (arg0))\n-\t    TREE_RAISES (t) = 1;\n \t}\n       if (arg1 && fro > 1)\n \t{\n \t  if (TREE_SIDE_EFFECTS (arg1))\n \t    TREE_SIDE_EFFECTS (t) = 1;\n-\t  if (TREE_RAISES (arg1))\n-\t    TREE_RAISES (t) = 1;\n \t}\n     }\n   else if (length == 1)\n@@ -3184,7 +3178,6 @@ build VPARAMS ((enum tree_code code, tree tt, ...))\n \t{\n \t  if (arg0 && TREE_SIDE_EFFECTS (arg0))\n \t    TREE_SIDE_EFFECTS (t) = 1;\n-\t  TREE_RAISES (t) = (arg0 && TREE_RAISES (arg0));\n \t}\n     }\n   else\n@@ -3197,8 +3190,6 @@ build VPARAMS ((enum tree_code code, tree tt, ...))\n \t    {\n \t      if (TREE_SIDE_EFFECTS (operand))\n \t\tTREE_SIDE_EFFECTS (t) = 1;\n-\t      if (TREE_RAISES (operand))\n-\t\tTREE_RAISES (t) = 1;\n \t    }\n \t}\n     }\n@@ -3254,8 +3245,6 @@ build1 (code, type, node)\n     {\n       if (TREE_SIDE_EFFECTS (node))\n \tTREE_SIDE_EFFECTS (t) = 1;\n-      if (TREE_RAISES (node))\n-\tTREE_RAISES (t) = 1;\n     }\n \n   switch (code)\n@@ -4827,7 +4816,6 @@ get_unwidened (op, for_type)\n \t\t       TREE_OPERAND (op, 1));\n \t  TREE_SIDE_EFFECTS (win) = TREE_SIDE_EFFECTS (op);\n \t  TREE_THIS_VOLATILE (win) = TREE_THIS_VOLATILE (op);\n-\t  TREE_RAISES (win) = TREE_RAISES (op);\n \t}\n     }\n   return win;\n@@ -4914,7 +4902,6 @@ get_narrower (op, unsignedp_ptr)\n \t\t       TREE_OPERAND (op, 1));\n \t  TREE_SIDE_EFFECTS (win) = TREE_SIDE_EFFECTS (op);\n \t  TREE_THIS_VOLATILE (win) = TREE_THIS_VOLATILE (op);\n-\t  TREE_RAISES (win) = TREE_RAISES (op);\n \t}\n     }\n   *unsignedp_ptr = uns;"}, {"sha": "cfb8e8e25e8dd19e439dd13c6f9ab13757dd4813", "filename": "gcc/tree.h", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a22e76d64eca6e3b54949121b5c5820e189ee1/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a22e76d64eca6e3b54949121b5c5820e189ee1/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=12a22e76d64eca6e3b54949121b5c5820e189ee1", "patch": "@@ -206,7 +206,7 @@ struct tree_common\n   unsigned asm_written_flag: 1;\n \n   unsigned used_flag : 1;\n-  unsigned raises_flag : 1;\n+  unsigned nothrow_flag : 1;\n   unsigned static_flag : 1;\n   unsigned public_flag : 1;\n   unsigned private_flag : 1;\n@@ -322,10 +322,10 @@ struct tree_common\n        TREE_USED in\n            expressions, IDENTIFIER_NODE\n \n-   raises_flag:\n+   nothrow_flag:\n \n-       TREE_RAISES in\n-           expressions\n+       TREE_NOTHROW in\n+           CALL_EXPR, FUNCTION_DECL\n \n \t\t\t\t\t\t\t  */\n /* Define accessors for the fields that all tree nodes have\n@@ -599,9 +599,9 @@ extern void tree_class_check_failed PARAMS ((const tree, char,\n    was used.  */\n #define TREE_USED(NODE) ((NODE)->common.used_flag)\n \n-/* Nonzero for a tree node whose evaluation could result\n-   in the raising of an exception.  Not implemented yet.  */\n-#define TREE_RAISES(NODE) ((NODE)->common.raises_flag)\n+/* In a FUNCTION_DECL, nonzero means a call to the function cannot throw\n+   an exception.  In a CALL_EXPR, nonzero means the call cannot throw.  */\n+#define TREE_NOTHROW(NODE) ((NODE)->common.nothrow_flag)\n \n /* Used in classes in C++.  */\n #define TREE_PRIVATE(NODE) ((NODE)->common.private_flag)\n@@ -1300,15 +1300,17 @@ struct tree_type\n    contour that restored a stack level and which is now exited.  */\n #define DECL_TOO_LATE(NODE) (DECL_CHECK (NODE)->decl.bit_field_flag)\n \n-/* In a FUNCTION_DECL, nonzero means a built in function.  */\n-#define DECL_BUILT_IN(NODE) (DECL_BUILT_IN_CLASS (NODE) != NOT_BUILT_IN)\n-/* For a builtin function, identify which part of the compiler defined it.  */\n-#define DECL_BUILT_IN_CLASS(NODE) (DECL_CHECK (NODE)->decl.built_in_class)\n+/* Unused in FUNCTION_DECL.  */\n \n /* In a VAR_DECL that's static,\n    nonzero if the space is in the text section.  */\n #define DECL_IN_TEXT_SECTION(NODE) (DECL_CHECK (NODE)->decl.bit_field_flag)\n \n+/* In a FUNCTION_DECL, nonzero means a built in function.  */\n+#define DECL_BUILT_IN(NODE) (DECL_BUILT_IN_CLASS (NODE) != NOT_BUILT_IN)\n+/* For a builtin function, identify which part of the compiler defined it.  */\n+#define DECL_BUILT_IN_CLASS(NODE) (DECL_CHECK (NODE)->decl.built_in_class)\n+\n /* Used in VAR_DECLs to indicate that the variable is a vtable.\n    Used in FIELD_DECLs for vtable pointers.\n    Used in FUNCTION_DECLs to indicate that the function is virtual.  */"}]}