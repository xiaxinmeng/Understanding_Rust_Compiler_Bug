{"sha": "dbb138cef6cf3587d60d9bdfa273a605be9ef18d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJiMTM4Y2VmNmNmMzU4N2Q2MGQ5YmRmYTI3M2E2MDViZTllZjE4ZA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2003-10-15T14:07:57Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2003-10-15T14:07:57Z"}, "message": "re PR target/12598 (Invalid size optimization on volatile memory reference)\n\n\tPR target/12598\n\t* config/cris/cris.md (define_split \"*mov_sidesi_biap_mem\"+1)\n\t(define_splits \"*mov_sidesi_mem\"+1, \"casesi\"+9, +10, +11, +12):\n\tUse cris_mem_op and replace_equiv_address, not gen_rtx_MEM.\n\t(\"call\", \"call_value\", define_split \"*mov_sidesi_mem\"+19, +20)\n\t(define_split \"*mov_sidesi_mem\"+21, +22, +23, +24, +25, +26, +27)\n\t(define_split \"*mov_sidesi_mem\"+28, +29, +30): Use\n\treplace_equiv_address, not gen_rtx_MEM.\n\t* config/cris/cris.c (cris_mem_op): New match_operator function.\n\t* config/cris/cris.h (PREDICATE_CODES): Add cris_mem_op.\n\nFrom-SVN: r72521", "tree": {"sha": "d427569d9d8399c73a71c60805d985cdd9dcd4e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d427569d9d8399c73a71c60805d985cdd9dcd4e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbb138cef6cf3587d60d9bdfa273a605be9ef18d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbb138cef6cf3587d60d9bdfa273a605be9ef18d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbb138cef6cf3587d60d9bdfa273a605be9ef18d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbb138cef6cf3587d60d9bdfa273a605be9ef18d/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c546e1855c4c19b0d093839c31639f224fa71b16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c546e1855c4c19b0d093839c31639f224fa71b16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c546e1855c4c19b0d093839c31639f224fa71b16"}], "stats": {"total": 149, "additions": 92, "deletions": 57}, "files": [{"sha": "376a23d7f8a8ec8aa1cc8bddf449feda9b5fdc2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb138cef6cf3587d60d9bdfa273a605be9ef18d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb138cef6cf3587d60d9bdfa273a605be9ef18d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbb138cef6cf3587d60d9bdfa273a605be9ef18d", "patch": "@@ -1,3 +1,16 @@\n+2003-10-15  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\tPR target/12598\n+\t* config/cris/cris.md (define_split \"*mov_sidesi_biap_mem\"+1)\n+\t(define_splits \"*mov_sidesi_mem\"+1, \"casesi\"+9, +10, +11, +12):\n+\tUse cris_mem_op and replace_equiv_address, not gen_rtx_MEM.\n+\t(\"call\", \"call_value\", define_split \"*mov_sidesi_mem\"+19, +20)\n+\t(define_split \"*mov_sidesi_mem\"+21, +22, +23, +24, +25, +26, +27)\n+\t(define_split \"*mov_sidesi_mem\"+28, +29, +30): Use\n+\treplace_equiv_address, not gen_rtx_MEM.\n+\t* config/cris/cris.c (cris_mem_op): New match_operator function.\n+\t* config/cris/cris.h (PREDICATE_CODES): Add cris_mem_op.\n+\n 2003-10-15  Bernardo Innocenti <bernie@develer.com>\n \n \t* config/m68k/m68k.h (MASK_SEP_DATA, TARGET_SEP_DATA,"}, {"sha": "79b194b2d95f7d418ae2cf18484e986ef1eb505c", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb138cef6cf3587d60d9bdfa273a605be9ef18d/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb138cef6cf3587d60d9bdfa273a605be9ef18d/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=dbb138cef6cf3587d60d9bdfa273a605be9ef18d", "patch": "@@ -374,6 +374,19 @@ cris_plus_or_bound_operator (rtx x, enum machine_mode mode)\n     (GET_MODE (x) == mode && (code == UMIN || code == PLUS));\n }\n \n+/* Used as an operator to get a handle on a already-known-valid MEM rtx:es\n+   (no need to validate the address), where some address expression parts\n+   have their own match_operand.  */\n+\n+int\n+cris_mem_op (rtx x, enum machine_mode mode)\n+{\n+  if (mode == VOIDmode)\n+    mode = GET_MODE (x);\n+\n+  return GET_MODE (x) == mode && GET_CODE (x) == MEM;\n+}\n+\n /* Since with -fPIC, not all symbols are valid PIC symbols or indeed\n    general_operands, we have to have a predicate that matches it for the\n    \"movsi\" expander.  */\n@@ -1962,8 +1975,8 @@ cris_notice_update_cc (rtx exp, rtx insn)\n \t\t     value1=rz and value2=[rx] */\n \t\t  cc_status.value1 = XEXP (XVECEXP (exp, 0, 0), 0);\n \t\t  cc_status.value2\n-\t\t    = gen_rtx_MEM (GET_MODE (XEXP (XVECEXP (exp, 0, 0), 0)),\n-\t\t\t\t   XEXP (XVECEXP (exp, 0, 1), 0));\n+\t\t    = replace_equiv_address (XEXP (XVECEXP (exp, 0, 0), 1),\n+\t\t\t\t\t     XEXP (XVECEXP (exp, 0, 1), 0));\n \t\t  cc_status.flags = 0;\n \n \t\t  /* Huh?  A side-effect cannot change the destination"}, {"sha": "288be199713b780d883268a7f29da4c6189886e2", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb138cef6cf3587d60d9bdfa273a605be9ef18d/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb138cef6cf3587d60d9bdfa273a605be9ef18d/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=dbb138cef6cf3587d60d9bdfa273a605be9ef18d", "patch": "@@ -1613,6 +1613,8 @@ call_ ## FUNC (void)\t\t\t\t\t\t\\\n   {ZERO_EXTEND, SIGN_EXTEND}},\t\t\t\t\\\n  {\"cris_plus_or_bound_operator\",\t\t\t\\\n   {PLUS, UMIN}},\t\t\t\t\t\\\n+ {\"cris_mem_op\",\t\t\t\t\t\\\n+  {MEM}},\t\t\t\t\t\t\\\n  {\"cris_bdap_operand\",\t\t\t\t\t\\\n   {SUBREG, REG, LABEL_REF, SYMBOL_REF, MEM, CONST_INT,\t\\\n    CONST_DOUBLE, CONST, SIGN_EXTEND}},\t\t\t\\"}, {"sha": "ea347fd74fa25f6c87363ed3c7d1220abe5e8b55", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 62, "deletions": 55, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbb138cef6cf3587d60d9bdfa273a605be9ef18d/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbb138cef6cf3587d60d9bdfa273a605be9ef18d/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=dbb138cef6cf3587d60d9bdfa273a605be9ef18d", "patch": "@@ -640,10 +640,12 @@\n \n (define_split\n   [(parallel\n-    [(set (mem (plus:SI\n-\t\t(mult:SI (match_operand:SI 0 \"register_operand\" \"\")\n-\t\t\t (match_operand:SI 1 \"const_int_operand\" \"\"))\n-\t\t(match_operand:SI 2 \"register_operand\" \"\")))\n+    [(set (match_operator\n+\t   6 \"cris_mem_op\"\n+\t   [(plus:SI\n+\t     (mult:SI (match_operand:SI 0 \"register_operand\" \"\")\n+\t\t      (match_operand:SI 1 \"const_int_operand\" \"\"))\n+\t     (match_operand:SI 2 \"register_operand\" \"\"))])\n \t  (match_operand 3 \"register_operand\" \"\"))\n      (set (match_operand:SI 4 \"register_operand\" \"\")\n \t  (plus:SI (mult:SI (match_dup 0)\n@@ -657,11 +659,12 @@\n \t\t\t  (match_dup 1))\n \t\t (match_dup 4)))]\n   \"operands[5]\n-     = gen_rtx_MEM (GET_MODE (operands[3]),\n-\t\t    gen_rtx_PLUS (SImode,\n-\t\t\t\t  gen_rtx_MULT (SImode,\n-\t\t\t\t\t\toperands[0], operands[1]),\n-\t\t\t\t  operands[2]));\")\n+     = replace_equiv_address (operands[6],\n+\t\t\t      gen_rtx_PLUS (SImode,\n+\t\t\t\t\t    gen_rtx_MULT (SImode,\n+\t\t\t\t\t\t\t  operands[0],\n+\t\t\t\t\t\t\t  operands[1]),\n+\t\t\t\t\t    operands[2]));\")\n \f\n ;; move.s rx,[ry=rz+i]\n ;; FIXME: These could have anonymous mode for operand 2.\n@@ -747,19 +750,19 @@\n \n (define_split\n   [(parallel\n-    [(set (mem (plus:SI\n-\t\t(match_operand:SI 0 \"cris_bdap_operand\" \"\")\n-\t\t(match_operand:SI 1 \"cris_bdap_operand\" \"\")))\n+    [(set (match_operator\n+\t   4 \"cris_mem_op\"\n+\t   [(plus:SI\n+\t     (match_operand:SI 0 \"cris_bdap_operand\" \"\")\n+\t     (match_operand:SI 1 \"cris_bdap_operand\" \"\"))])\n \t  (match_operand 2 \"register_operand\" \"\"))\n      (set (match_operand:SI 3 \"register_operand\" \"\")\n \t  (plus:SI (match_dup 0) (match_dup 1)))])]\n   \"reload_completed && reg_overlap_mentioned_p (operands[3], operands[2])\"\n   [(set (match_dup 4) (match_dup 2))\n    (set (match_dup 3) (match_dup 0))\n    (set (match_dup 3) (plus:SI (match_dup 3) (match_dup 1)))]\n-  \"operands[4]\n-     = gen_rtx_MEM (GET_MODE (operands[2]),\n-\t\t    gen_rtx_PLUS (SImode, operands[0], operands[1]));\")\n+  \"\")\n \f\n ;; Clear memory side-effect patterns.  It is hard to get to the mode if\n ;; the MEM was anonymous, so there will be one for each mode.\n@@ -3833,7 +3836,7 @@\n \t  else\n \t    abort ();\n \n-\t  operands[0] = gen_rtx_MEM (GET_MODE (operands[0]), op0);\n+\t  operands[0] = replace_equiv_address (operands[0], op0);\n \t}\n     }\n }\")\n@@ -3898,7 +3901,7 @@\n \t  else\n \t    abort ();\n \n-\t  operands[1] = gen_rtx_MEM (GET_MODE (operands[1]), op1);\n+\t  operands[1] = replace_equiv_address (operands[1], op1);\n \t}\n     }\n }\")\n@@ -4201,10 +4204,12 @@\n (define_split\n   [(parallel\n     [(set (match_operand 0 \"register_operand\" \"\")\n-\t   (mem (plus:SI\n-\t\t (mult:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t\t  (match_operand:SI 2 \"const_int_operand\" \"\"))\n-\t\t (match_operand:SI 3 \"register_operand\" \"\"))))\n+\t  (match_operator\n+\t   6 \"cris_mem_op\"\n+\t   [(plus:SI\n+\t     (mult:SI (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t      (match_operand:SI 2 \"const_int_operand\" \"\"))\n+\t     (match_operand:SI 3 \"register_operand\" \"\"))]))\n      (set (match_operand:SI 4 \"register_operand\" \"\")\n \t   (plus:SI (mult:SI (match_dup 1)\n \t\t\t     (match_dup 2))\n@@ -4214,34 +4219,37 @@\n   [(set (match_dup 4) (plus:SI (mult:SI (match_dup 1) (match_dup 2))\n \t\t\t\t(match_dup 3)))\n    (set (match_dup 0) (match_dup 5))]\n-  \"operands[5] = gen_rtx_MEM (GET_MODE (operands[0]), operands[3]);\")\n+  \"operands[5] = replace_equiv_address (operands[6], operands[3]);\")\n \n ;; move.S1 [rx=rx+i],ry\n \n (define_split\n   [(parallel\n     [(set (match_operand 0 \"register_operand\" \"\")\n-\t   (mem\n-\t    (plus:SI (match_operand:SI 1 \"cris_bdap_operand\" \"\")\n-\t\t     (match_operand:SI 2 \"cris_bdap_operand\" \"\"))))\n+\t  (match_operator\n+\t   5 \"cris_mem_op\"\n+\t   [(plus:SI (match_operand:SI 1 \"cris_bdap_operand\" \"\")\n+\t\t     (match_operand:SI 2 \"cris_bdap_operand\" \"\"))]))\n      (set (match_operand:SI 3 \"register_operand\" \"\")\n \t   (plus:SI (match_dup 1)\n \t\t    (match_dup 2)))])]\n   \"(rtx_equal_p (operands[3], operands[1])\n     || rtx_equal_p (operands[3], operands[2]))\"\n   [(set (match_dup 3) (plus:SI (match_dup 1) (match_dup 2)))\n    (set (match_dup 0) (match_dup 4))]\n-  \"operands[4] = gen_rtx_MEM (GET_MODE (operands[0]), operands[3]);\")\n+  \"operands[4] = replace_equiv_address (operands[5], operands[3]);\")\n \n ;; move.S1 ry,[rx=rx+rz.S2]\n \n (define_split\n   [(parallel\n-    [(set (mem (plus:SI\n-\t\t (mult:SI (match_operand:SI 0 \"register_operand\" \"\")\n-\t\t\t  (match_operand:SI 1 \"const_int_operand\" \"\"))\n-\t\t (match_operand:SI 2 \"register_operand\" \"\")))\n-\t   (match_operand 3 \"register_operand\" \"\"))\n+    [(set (match_operator\n+\t   6 \"cris_mem_op\"\n+\t   [(plus:SI\n+\t     (mult:SI (match_operand:SI 0 \"register_operand\" \"\")\n+\t\t      (match_operand:SI 1 \"const_int_operand\" \"\"))\n+\t     (match_operand:SI 2 \"register_operand\" \"\"))])\n+\t  (match_operand 3 \"register_operand\" \"\"))\n      (set (match_operand:SI 4 \"register_operand\" \"\")\n \t   (plus:SI (mult:SI (match_dup 0)\n \t\t\t     (match_dup 1))\n@@ -4251,24 +4259,25 @@\n   [(set (match_dup 4) (plus:SI (mult:SI (match_dup 0) (match_dup 1))\n \t\t\t\t(match_dup 2)))\n    (set (match_dup 5) (match_dup 3))]\n-  \"operands[5] = gen_rtx_MEM (GET_MODE (operands[3]), operands[4]);\")\n+  \"operands[5] = replace_equiv_address (operands[6], operands[4]);\")\n \n ;; move.S1 ry,[rx=rx+i]\n \n (define_split\n   [(parallel\n-    [(set (mem\n-\t   (plus:SI (match_operand:SI 0 \"cris_bdap_operand\" \"\")\n-\t\t    (match_operand:SI 1 \"cris_bdap_operand\" \"\")))\n-\t   (match_operand 2 \"register_operand\" \"\"))\n+    [(set (match_operator\n+\t   6 \"cris_mem_op\"\n+\t   [(plus:SI (match_operand:SI 0 \"cris_bdap_operand\" \"\")\n+\t\t     (match_operand:SI 1 \"cris_bdap_operand\" \"\"))])\n+\t  (match_operand 2 \"register_operand\" \"\"))\n      (set (match_operand:SI 3 \"register_operand\" \"\")\n \t   (plus:SI (match_dup 0)\n \t\t   (match_dup 1)))])]\n   \"(rtx_equal_p (operands[3], operands[0])\n     || rtx_equal_p (operands[3], operands[1]))\"\n   [(set (match_dup 3) (plus:SI (match_dup 0) (match_dup 1)))\n    (set (match_dup 5) (match_dup 2))]\n-  \"operands[5] = gen_rtx_MEM (GET_MODE (operands[2]), operands[3]);\")\n+  \"operands[5] = replace_equiv_address (operands[6], operands[3]);\")\n \n ;; clear.d [rx=rx+rz.S2]\n \n@@ -4402,8 +4411,7 @@\n   [(set (match_dup 4) (plus:SI (mult:SI (match_dup 1) (match_dup 2))\n \t\t\t\t(match_dup 3)))\n    (set (match_dup 0) (match_op_dup 5 [(match_dup 6)]))]\n-  \"operands[6] = gen_rtx_MEM (GET_MODE (XEXP (operands[5],0)),\n-\t\t\t   operands[4]);\")\n+  \"operands[6] = replace_equiv_address (XEXP (operands[5], 0), operands[4]);\")\n \n ;; mov(s|u).S1 [rx=rx+i],ry\n \n@@ -4422,8 +4430,7 @@\n     || rtx_equal_p (operands[2], operands[3]))\"\n   [(set (match_dup 3) (plus:SI (match_dup 1) (match_dup 2)))\n    (set (match_dup 0) (match_op_dup 4 [(match_dup 5)]))]\n-  \"operands[5] = gen_rtx_MEM (GET_MODE (XEXP (operands[4], 0)),\n-\t\t\t  operands[3]);\")\n+  \"operands[5] = replace_equiv_address (XEXP (operands[4], 0), operands[3]);\")\n \n ;; op.S1 [rx=rx+i],ry\n \n@@ -4443,7 +4450,7 @@\n     || rtx_equal_p (operands[4], operands[3]))\"\n   [(set (match_dup 4) (plus:SI (match_dup 2) (match_dup 3)))\n    (set (match_dup 0) (match_op_dup 5 [(match_dup 1) (match_dup 6)]))]\n-  \"operands[6] = gen_rtx_MEM (GET_MODE (operands[0]), operands[4]);\")\n+  \"operands[6] = replace_equiv_address (XEXP (operands[5], 1), operands[4]);\")\n \n ;; op.S1 [rx=rx+rz.S2],ry\n \n@@ -4467,7 +4474,7 @@\n   [(set (match_dup 5) (plus:SI (mult:SI (match_dup 2) (match_dup 3))\n \t\t\t\t(match_dup 4)))\n    (set (match_dup 0) (match_op_dup 6 [(match_dup 1) (match_dup 7)]))]\n-  \"operands[7] = gen_rtx_MEM (GET_MODE (operands[0]), operands[5]);\")\n+  \"operands[7] = replace_equiv_address (XEXP (operands[6], 1), operands[5]);\")\n \n ;; op.S1 [rx=rx+rz.S2],ry (swapped)\n \n@@ -4491,7 +4498,7 @@\n   [(set (match_dup 5) (plus:SI (mult:SI (match_dup 2) (match_dup 3))\n \t\t\t       (match_dup 4)))\n    (set (match_dup 0) (match_op_dup 6 [(match_dup 7) (match_dup 1)]))]\n-  \"operands[7] = gen_rtx_MEM (GET_MODE (operands[0]), operands[5]);\")\n+  \"operands[7] = replace_equiv_address (XEXP (operands[6], 0), operands[5]);\")\n \n ;; op.S1 [rx=rx+i],ry (swapped)\n \n@@ -4511,7 +4518,7 @@\n     || rtx_equal_p (operands[4], operands[3]))\"\n   [(set (match_dup 4) (plus:SI (match_dup 2) (match_dup 3)))\n    (set (match_dup 0) (match_op_dup 5 [(match_dup 6) (match_dup 1)]))]\n-  \"operands[6] = gen_rtx_MEM (GET_MODE (operands[0]), operands[4]);\")\n+  \"operands[6] = replace_equiv_address (XEXP (operands[5], 0), operands[4]);\")\n \n ;; op(s|u).S1 [rx=rx+rz.S2],ry\n \n@@ -4538,8 +4545,8 @@\n \t\t\t       (match_dup 4)))\n    (set (match_dup 0) (match_op_dup 6 [(match_dup 1) (match_dup 8)]))]\n   \"operands[8] = gen_rtx (GET_CODE (operands[7]), GET_MODE (operands[7]),\n-\t\t\t  gen_rtx_MEM (GET_MODE (XEXP (operands[7], 0)),\n-\t\t\t\t   operands[5]));\")\n+\t\t\t  replace_equiv_address (XEXP (operands[7], 0),\n+\t\t\t\t\t\t operands[5]));\")\n \n ;; op(s|u).S1 [rx=rx+i],ry\n \n@@ -4563,8 +4570,8 @@\n   [(set (match_dup 4) (plus:SI (match_dup 2) (match_dup 3)))\n    (set (match_dup 0) (match_op_dup 5 [(match_dup 1) (match_dup 7)]))]\n   \"operands[7] = gen_rtx (GET_CODE (operands[6]), GET_MODE (operands[6]),\n-\t\t\t   gen_rtx_MEM (GET_MODE (XEXP (operands[6], 0)),\n-\t\t\t\t    operands[4]));\")\n+\t\t\t  replace_equiv_address (XEXP (operands[6], 0),\n+\t\t\t\t\t\t operands[4]));\")\n \n ;; op(s|u).S1 [rx=rx+rz.S2],ry (swapped, plus or bound)\n \n@@ -4590,8 +4597,8 @@\n \t\t\t       (match_dup 4)))\n    (set (match_dup 0) (match_op_dup 6 [(match_dup 8) (match_dup 1)]))]\n   \"operands[8] = gen_rtx (GET_CODE (operands[6]), GET_MODE (operands[6]),\n-\t\t\t  gen_rtx_MEM (GET_MODE (XEXP (operands[6], 0)),\n-\t\t\t\t   operands[5]));\")\n+\t\t\t  replace_equiv_address (XEXP (operands[6], 0),\n+\t\t\t\t\t\t operands[5]));\")\n \n ;; op(s|u).S1 [rx=rx+i],ry (swapped, plus or bound)\n \n@@ -4614,8 +4621,8 @@\n   [(set (match_dup 4) (plus:SI (match_dup 2) (match_dup 3)))\n    (set (match_dup 0) (match_op_dup 6 [(match_dup 7) (match_dup 1)]))]\n   \"operands[7] = gen_rtx (GET_CODE (operands[5]), GET_MODE (operands[5]),\n-\t\t\t  gen_rtx_MEM (GET_MODE (XEXP (operands[5], 0)),\n-\t\t\t\t   operands[4]));\")\n+\t\t\t  replace_equiv_address (XEXP (operands[5], 0),\n+\t\t\t\t\t\t operands[4]));\")\n \f\n ;; Splits for addressing prefixes that have no side-effects, so we can\n ;; fill a delay slot.  Never split if we lose something, though.\n@@ -4643,7 +4650,7 @@\n   [(set (match_dup 2) (match_dup 4))\n    (set (match_dup 0) (match_dup 3))]\n   \"operands[2] = gen_rtx_REG (Pmode, REGNO (operands[0]));\n-   operands[3] = gen_rtx_MEM (GET_MODE (operands[0]), operands[2]);\n+   operands[3] = replace_equiv_address (operands[1], operands[2]);\n    operands[4] = XEXP (operands[1], 0);\")\n \n ;; As the above, but MOVS and MOVU.\n@@ -4661,7 +4668,7 @@\n   [(set (match_dup 2) (match_dup 5))\n    (set (match_dup 0) (match_op_dup 4 [(match_dup 3)]))]\n   \"operands[2] = gen_rtx_REG (Pmode, REGNO (operands[0]));\n-   operands[3] = gen_rtx_MEM (GET_MODE (XEXP (operands[4], 0)), operands[2]);\n+   operands[3] = replace_equiv_address (XEXP (operands[4], 0), operands[2]);\n    operands[5] = XEXP (operands[1], 0);\")\n \f\n ;; Various peephole optimizations."}]}