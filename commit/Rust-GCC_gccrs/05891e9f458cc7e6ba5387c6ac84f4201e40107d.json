{"sha": "05891e9f458cc7e6ba5387c6ac84f4201e40107d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU4OTFlOWY0NThjYzdlNmJhNTM4N2M2YWM4NGY0MjAxZTQwMTA3ZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-06-18T20:17:44Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-06-18T20:17:44Z"}, "message": "LWG 2975 ensure construct(pair<T,U>*, ...) used to construct pairs\n\n\t* include/std/scoped_allocator (__not_pair): Define SFINAE helper.\n\t(construct(_Tp*, _Args&&...)): Remove from overload set when _Tp is\n\ta specialization of std::pair.\n\t* testsuite/20_util/scoped_allocator/construct_pair.cc: Ensure\n\tpair elements are constructed correctly.\n\nFrom-SVN: r261716", "tree": {"sha": "ab76f552250e0e08a3463e2120eee14ecf0fd391", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab76f552250e0e08a3463e2120eee14ecf0fd391"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05891e9f458cc7e6ba5387c6ac84f4201e40107d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05891e9f458cc7e6ba5387c6ac84f4201e40107d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05891e9f458cc7e6ba5387c6ac84f4201e40107d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05891e9f458cc7e6ba5387c6ac84f4201e40107d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df0b55f090b8591746d350a474d5f2291a9202be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df0b55f090b8591746d350a474d5f2291a9202be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df0b55f090b8591746d350a474d5f2291a9202be"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "89bcf2f5d5c0a4765f5f9830979301c561751daa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05891e9f458cc7e6ba5387c6ac84f4201e40107d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05891e9f458cc7e6ba5387c6ac84f4201e40107d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=05891e9f458cc7e6ba5387c6ac84f4201e40107d", "patch": "@@ -1,5 +1,12 @@\n 2018-06-18  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tLWG 2975 ensure construct(pair<T,U>*, ...) used to construct pairs\n+\t* include/std/scoped_allocator (__not_pair): Define SFINAE helper.\n+\t(construct(_Tp*, _Args&&...)): Remove from overload set when _Tp is\n+\ta specialization of std::pair.\n+\t* testsuite/20_util/scoped_allocator/construct_pair.cc: Ensure\n+\tpair elements are constructed correctly.\n+\n \tLWG 2989 hide path iostream operators from normal lookup\n \t* include/bits/fs_path.h (operator<<, operator>>): Define inline as\n \tfriends."}, {"sha": "ea62f11351702962fdffd389d2e6172b5e3843e6", "filename": "libstdc++-v3/include/std/scoped_allocator", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05891e9f458cc7e6ba5387c6ac84f4201e40107d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05891e9f458cc7e6ba5387c6ac84f4201e40107d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator?ref=05891e9f458cc7e6ba5387c6ac84f4201e40107d", "patch": "@@ -241,6 +241,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n             is_constructible<_OuterAlloc, _Alloc>::value\n           >::type;\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2975. Missing case for pair construction in scoped [...] allocators\n+      template<typename _Tp>\n+\tstruct __not_pair { using type = void; };\n+\n+      template<typename _Tp, typename _Up>\n+\tstruct __not_pair<pair<_Tp, _Up>> { };\n+\n     public:\n       typedef _OuterAlloc                       outer_allocator_type;\n       typedef typename __inner_type::__type     inner_allocator_type;\n@@ -348,13 +356,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return __traits::max_size(outer_allocator()); }\n \n       template<typename _Tp, typename... _Args>\n-        void construct(_Tp* __p, _Args&&... __args)\n-        {\n-          auto& __inner = inner_allocator();\n-          auto __use_tag\n-            = __use_alloc<_Tp, inner_allocator_type, _Args...>(__inner);\n-          _M_construct(__use_tag, __p, std::forward<_Args>(__args)...);\n-        }\n+\ttypename __not_pair<_Tp>::type\n+\tconstruct(_Tp* __p, _Args&&... __args)\n+\t{\n+\t  auto& __inner = inner_allocator();\n+\t  auto __use_tag\n+\t    = __use_alloc<_Tp, inner_allocator_type, _Args...>(__inner);\n+\t  _M_construct(__use_tag, __p, std::forward<_Args>(__args)...);\n+\t}\n \n       template<typename _T1, typename _T2, typename... _Args1,\n \t       typename... _Args2>"}, {"sha": "b34efc88798279388c6705e28c9ba58f350586f5", "filename": "libstdc++-v3/testsuite/20_util/scoped_allocator/construct_pair.cc", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05891e9f458cc7e6ba5387c6ac84f4201e40107d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2Fconstruct_pair.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05891e9f458cc7e6ba5387c6ac84f4201e40107d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2Fconstruct_pair.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2Fconstruct_pair.cc?ref=05891e9f458cc7e6ba5387c6ac84f4201e40107d", "patch": "@@ -73,9 +73,37 @@ test03()\n   a.deallocate(ptr, 1);\n }\n \n+void\n+test04()\n+{\n+  struct X\n+  {\n+    using allocator_type = std::allocator<int>;\n+    X() = default;\n+    X(const X&) { throw 1; }\n+    X(const X&, const allocator_type&) { }\n+  };\n+\n+  struct Y\n+  {\n+    using allocator_type = std::allocator<int>;\n+    Y() = default;\n+    Y(const Y&) = delete;\n+    Y(std::allocator_arg_t, const allocator_type&, const Y&) { }\n+  };\n+\n+  using pair_type = std::pair<X, Y>;\n+  std::scoped_allocator_adaptor<std::allocator<pair_type>> a;\n+  auto ptr = a.allocate(1);\n+  /* not const */ pair_type p;\n+  a.construct(ptr, p); // LWG 2975\n+  a.deallocate(ptr, 1);\n+}\n+\n int main()\n {\n   test01();\n   test02();\n   test03();\n+  test04();\n }"}]}