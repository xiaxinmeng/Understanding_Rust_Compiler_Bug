{"sha": "2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM1NDk5YjU3Y2Y0YTY4ZWJjOGRlY2NlOTBkM2ViMWUyODFjMzFhOQ==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@wdc.com", "date": "2020-08-28T15:05:56Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-10-01T02:47:48Z"}, "message": "libgo: add 32-bit RISC-V (RV32) support\n\nAdd support for the 32-bit RISC-V (RV32) ISA matching the 64-bit RISC-V\n(RV64) port except for async preemption added as a stub only.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/251179", "tree": {"sha": "a53f1214796df28a6c081cdcd556c5bdd1bda5c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a53f1214796df28a6c081cdcd556c5bdd1bda5c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/comments", "author": null, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dd7b93778d551b6981c8086ecb38e26f677bd2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dd7b93778d551b6981c8086ecb38e26f677bd2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dd7b93778d551b6981c8086ecb38e26f677bd2b"}], "stats": {"total": 135, "additions": 114, "deletions": 21}, "files": [{"sha": "8d9fda54619d8243f238d8a20f3bd296c813cd00", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "patch": "@@ -1,4 +1,4 @@\n-9e55baf44ab63ba06af0b57038e7b3aab8216222\n+c9c084bce713e258721e12041a351ec8ad33ad17\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "641d060ffac231b584b02db9ea6091a32f34e360", "filename": "libgo/configure", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "patch": "@@ -14226,8 +14226,21 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n     ;;\n-  riscv64-*-*)\n-    GOARCH=riscv64\n+  riscv*-*-*)\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+#if __riscv_xlen == 64\n+#error 64-bit\n+#endif\n+\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  GOARCH=riscv\n+else\n+  GOARCH=riscv64\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n     ;;\n   s390*-*-*)\n     cat confdefs.h - <<_ACEOF >conftest.$ac_ext"}, {"sha": "f15f8d830bb272dd34f54af1a9df64e282d15df5", "filename": "libgo/configure.ac", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "patch": "@@ -342,8 +342,14 @@ AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n [GOARCH=ppc64le],\n [GOARCH=ppc64])])\n     ;;\n-  riscv64-*-*)\n-    GOARCH=riscv64\n+  riscv*-*-*)\n+    AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n+#if __riscv_xlen == 64\n+#error 64-bit\n+#endif\n+])],\n+[GOARCH=riscv],\n+[GOARCH=riscv64])\n     ;;\n   s390*-*-*)\n     AC_COMPILE_IFELSE([AC_LANG_SOURCE(["}, {"sha": "6de6d69ce6c832d39502bd40400b41946adb4bcc", "filename": "libgo/go/cmd/cgo/main.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fcmd%2Fcgo%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fcmd%2Fcgo%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fcgo%2Fmain.go?ref=2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "patch": "@@ -184,6 +184,7 @@ var ptrSizeMap = map[string]int64{\n \t\"ppc\":         4,\n \t\"ppc64\":       8,\n \t\"ppc64le\":     8,\n+\t\"riscv\":       4,\n \t\"riscv64\":     8,\n \t\"s390\":        4,\n \t\"s390x\":       8,\n@@ -210,6 +211,7 @@ var intSizeMap = map[string]int64{\n \t\"ppc\":         4,\n \t\"ppc64\":       8,\n \t\"ppc64le\":     8,\n+\t\"riscv\":       4,\n \t\"riscv64\":     8,\n \t\"s390\":        4,\n \t\"s390x\":       8,"}, {"sha": "3030ee924ffabe04bd9261294c31397b3f0a3573", "filename": "libgo/go/cmd/go/testdata/script/link_syso_issue33139.txt", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Flink_syso_issue33139.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Flink_syso_issue33139.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Ftestdata%2Fscript%2Flink_syso_issue33139.txt?ref=2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "patch": "@@ -8,8 +8,9 @@\n # See: https://github.com/golang/go/issues/8912\n [linux] [ppc64] skip\n \n-# External linking is not supported on linux/riscv64.\n+# External linking is not supported on linux/riscv, linux/riscv64.\n # See: https://github.com/golang/go/issues/36739\n+[linux] [riscv] skip\n [linux] [riscv64] skip\n \n cc -c -o syso/objTestImpl.syso syso/src/objTestImpl.c"}, {"sha": "60a3b3c8ecdc9ac5564f821557b56d68e54efdee", "filename": "libgo/go/cmd/internal/sys/arch.go", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fcmd%2Finternal%2Fsys%2Farch.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fcmd%2Finternal%2Fsys%2Farch.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Finternal%2Fsys%2Farch.go?ref=2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "patch": "@@ -19,6 +19,7 @@ const (\n \tMIPS\n \tMIPS64\n \tPPC64\n+\tRISCV\n \tRISCV64\n \tS390X\n \tWasm\n@@ -143,6 +144,15 @@ var ArchPPC64LE = &Arch{\n \tMinLC:     4,\n }\n \n+var ArchRISCV = &Arch{\n+\tName:      \"riscv\",\n+\tFamily:    RISCV,\n+\tByteOrder: binary.LittleEndian,\n+\tPtrSize:   4,\n+\tRegSize:   4,\n+\tMinLC:     4,\n+}\n+\n var ArchRISCV64 = &Arch{\n \tName:      \"riscv64\",\n \tFamily:    RISCV64,\n@@ -181,6 +191,7 @@ var Archs = [...]*Arch{\n \tArchMIPS64LE,\n \tArchPPC64,\n \tArchPPC64LE,\n+\tArchRISCV,\n \tArchRISCV64,\n \tArchS390X,\n \tArchWasm,"}, {"sha": "48178d480d76b1cd1b476d07744b32c0cb430a3c", "filename": "libgo/go/debug/elf/file.go", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fdebug%2Felf%2Ffile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fdebug%2Felf%2Ffile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Felf%2Ffile.go?ref=2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "patch": "@@ -617,6 +617,8 @@ func (f *File) applyRelocations(dst []byte, rels []byte) error {\n \t\treturn f.applyRelocationsMIPS(dst, rels)\n \tcase f.Class == ELFCLASS64 && f.Machine == EM_MIPS:\n \t\treturn f.applyRelocationsMIPS64(dst, rels)\n+\tcase f.Class == ELFCLASS32 && f.Machine == EM_RISCV:\n+\t\treturn f.applyRelocationsRISCV(dst, rels)\n \tcase f.Class == ELFCLASS64 && f.Machine == EM_RISCV:\n \t\treturn f.applyRelocationsRISCV64(dst, rels)\n \tcase f.Class == ELFCLASS64 && f.Machine == EM_S390:\n@@ -1008,6 +1010,47 @@ func (f *File) applyRelocationsMIPS64(dst []byte, rels []byte) error {\n \treturn nil\n }\n \n+func (f *File) applyRelocationsRISCV(dst []byte, rels []byte) error {\n+\t// 12 is the size of Rela32.\n+\tif len(rels)%12 != 0 {\n+\t\treturn errors.New(\"length of relocation section is not a multiple of 12\")\n+\t}\n+\n+\tsymbols, _, err := f.getSymbols(SHT_SYMTAB)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\tb := bytes.NewReader(rels)\n+\tvar rela Rela32\n+\n+\tfor b.Len() > 0 {\n+\t\tbinary.Read(b, f.ByteOrder, &rela)\n+\t\tsymNo := rela.Info >> 8\n+\t\tt := R_RISCV(rela.Info & 0xff)\n+\n+\t\tif symNo == 0 || symNo > uint32(len(symbols)) {\n+\t\t\tcontinue\n+\t\t}\n+\t\tsym := &symbols[symNo-1]\n+\t\tneeded, val := relocSymbolTargetOK(sym)\n+\t\tif !needed {\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tswitch t {\n+\t\tcase R_RISCV_32:\n+\t\t\tif rela.Off+4 >= uint32(len(dst)) || rela.Addend < 0 {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tval32 := uint32(val) + uint32(rela.Addend)\n+\t\t\tf.ByteOrder.PutUint32(dst[rela.Off:rela.Off+4], val32)\n+\t\t}\n+\t}\n+\n+\treturn nil\n+}\n+\n func (f *File) applyRelocationsRISCV64(dst []byte, rels []byte) error {\n \t// 24 is the size of Rela64.\n \tif len(rels)%24 != 0 {"}, {"sha": "4787b242cc02ac65d49a2349bc4394eaf7bb5b29", "filename": "libgo/go/go/types/sizes.go", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fgo%2Ftypes%2Fsizes.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fgo%2Ftypes%2Fsizes.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Fsizes.go?ref=2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "patch": "@@ -167,6 +167,7 @@ var gcArchSizes = map[string]*StdSizes{\n \t\"mips64le\": {8, 8},\n \t\"ppc64\":    {8, 8},\n \t\"ppc64le\":  {8, 8},\n+\t\"riscv\":    {4, 4},\n \t\"riscv64\":  {8, 8},\n \t\"s390x\":    {8, 8},\n \t\"sparc64\":  {8, 8},\n@@ -180,7 +181,8 @@ var gcArchSizes = map[string]*StdSizes{\n //\n // Supported architectures for compiler \"gc\":\n // \"386\", \"arm\", \"arm64\", \"amd64\", \"amd64p32\", \"mips\", \"mipsle\",\n-// \"mips64\", \"mips64le\", \"ppc64\", \"ppc64le\", \"riscv64\", \"s390x\", \"sparc64\", \"wasm\".\n+// \"mips64\", \"mips64le\", \"ppc64\", \"ppc64le\", \"riscv\", \"riscv64\",\n+// \"s390x\", \"sparc64\", \"wasm\".\n func SizesFor(compiler, arch string) Sizes {\n \tvar m map[string]*StdSizes\n \tswitch compiler {"}, {"sha": "891cb98b455711ffad4b5aa98746a0be62e6ad91", "filename": "libgo/go/golang.org/x/sys/cpu/cpu_riscv.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_riscv.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_riscv.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_riscv.go?ref=2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "patch": "@@ -0,0 +1,7 @@\n+// Copyright 2020 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// +build riscv\n+\n+package cpu"}, {"sha": "0f521503ac6ada60f1fef3d6d046036f10401731", "filename": "libgo/go/golang.org/x/tools/go/analysis/passes/asmdecl/asmdecl.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fgolang.org%2Fx%2Ftools%2Fgo%2Fanalysis%2Fpasses%2Fasmdecl%2Fasmdecl.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fgolang.org%2Fx%2Ftools%2Fgo%2Fanalysis%2Fpasses%2Fasmdecl%2Fasmdecl.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgolang.org%2Fx%2Ftools%2Fgo%2Fanalysis%2Fpasses%2Fasmdecl%2Fasmdecl.go?ref=2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "patch": "@@ -87,6 +87,7 @@ var (\n \tasmArchMips64LE = asmArch{name: \"mips64le\", bigEndian: false, stack: \"R29\", lr: true}\n \tasmArchPpc64    = asmArch{name: \"ppc64\", bigEndian: true, stack: \"R1\", lr: true}\n \tasmArchPpc64LE  = asmArch{name: \"ppc64le\", bigEndian: false, stack: \"R1\", lr: true}\n+\tasmArchRISCV    = asmArch{name: \"riscv\", bigEndian: false, stack: \"SP\", lr: true}\n \tasmArchRISCV64  = asmArch{name: \"riscv64\", bigEndian: false, stack: \"SP\", lr: true}\n \tasmArchS390X    = asmArch{name: \"s390x\", bigEndian: true, stack: \"R15\", lr: true}\n \tasmArchWasm     = asmArch{name: \"wasm\", bigEndian: false, stack: \"SP\", lr: false}\n@@ -102,6 +103,7 @@ var (\n \t\t&asmArchMips64LE,\n \t\t&asmArchPpc64,\n \t\t&asmArchPpc64LE,\n+\t\t&asmArchRISCV,\n \t\t&asmArchRISCV64,\n \t\t&asmArchS390X,\n \t\t&asmArchWasm,"}, {"sha": "46325dd7f07273e4e41c4639dfe58522d4bd071f", "filename": "libgo/go/internal/bytealg/indexbyte_generic.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Finternal%2Fbytealg%2Findexbyte_generic.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Finternal%2Fbytealg%2Findexbyte_generic.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fbytealg%2Findexbyte_generic.go?ref=2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "patch": "@@ -3,7 +3,7 @@\n // license that can be found in the LICENSE file.\n \n // +build ignore_for_gccgo\n-// +build !386,!amd64,!s390x,!arm,!arm64,!ppc64,!ppc64le,!mips,!mipsle,!mips64,!mips64le,!riscv64,!wasm\n+// +build !386,!amd64,!s390x,!arm,!arm64,!ppc64,!ppc64le,!mips,!mipsle,!mips64,!mips64le,!riscv,!riscv64,!wasm\n \n package bytealg\n "}, {"sha": "c427e669bbd34cddc93d8b5dc020d9f721fd810c", "filename": "libgo/go/internal/bytealg/indexbyte_native.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Finternal%2Fbytealg%2Findexbyte_native.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Finternal%2Fbytealg%2Findexbyte_native.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fbytealg%2Findexbyte_native.go?ref=2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// -build 386 amd64 s390x arm arm64 ppc64 ppc64le mips mipsle mips64 mips64le riscv64 wasm\n+// -build 386 amd64 s390x arm arm64 ppc64 ppc64le mips mipsle mips64 mips64le riscv riscv64 wasm\n \n package bytealg\n "}, {"sha": "3d34fdb73e38e2dae6563d68572666a62d20ce27", "filename": "libgo/go/internal/syscall/unix/sysnum_linux_generic.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fsysnum_linux_generic.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fsysnum_linux_generic.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fsysnum_linux_generic.go?ref=2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "patch": "@@ -9,7 +9,7 @@ package unix\n \n // This file is named \"generic\" because at a certain point Linux started\n // standardizing on system call numbers across architectures. So far this\n-// means only arm64, nios2 and riscv use the standard numbers.\n+// means only arm64, nios2, riscv and riscv64 use the standard numbers.\n \n const (\n \tgetrandomTrap     uintptr = 278"}, {"sha": "c26f411153fe659bb3e056b757c8e14a35056ce9", "filename": "libgo/go/runtime/gcinfo_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fruntime%2Fgcinfo_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fruntime%2Fgcinfo_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fgcinfo_test.go?ref=2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "patch": "@@ -157,7 +157,7 @@ type BigStruct struct {\n \n func infoBigStruct() []byte {\n \tswitch runtime.GOARCH {\n-\tcase \"386\", \"arm\", \"mips\", \"mipsle\":\n+\tcase \"386\", \"arm\", \"mips\", \"mipsle\", \"riscv\":\n \t\treturn []byte{\n \t\t\ttypePointer,                                                // q *int\n \t\t\ttypeScalar, typeScalar, typeScalar, typeScalar, typeScalar, // w byte; e [17]byte"}, {"sha": "89efc1cde5c44cb8fbf3dd8d49fd9bd033955c99", "filename": "libgo/go/runtime/hash32.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fruntime%2Fhash32.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fruntime%2Fhash32.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fhash32.go?ref=2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "patch": "@@ -6,7 +6,7 @@\n //   xxhash: https://code.google.com/p/xxhash/\n // cityhash: https://code.google.com/p/cityhash/\n \n-// +build 386 arm armbe m68k mips mipsle nios2 ppc s390 sh shbe sparc\n+// +build 386 arm armbe m68k mips mipsle nios2 ppc riscv s390 sh shbe sparc\n \n package runtime\n "}, {"sha": "b3194dc76685a82970b8b91e9d1cae47124526df", "filename": "libgo/go/runtime/lfstack_32bit.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fruntime%2Flfstack_32bit.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fruntime%2Flfstack_32bit.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Flfstack_32bit.go?ref=2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build 386 amd64p32 arm armbe m68k mips mipsle mips64p32 mips64p32le nios2 ppc s390 sh shbe sparc\n+// +build 386 amd64p32 arm armbe m68k mips mipsle mips64p32 mips64p32le nios2 ppc riscv s390 sh shbe sparc\n \n package runtime\n "}, {"sha": "268941d353205eac4701e662f5b8335e60b375c2", "filename": "libgo/go/runtime/mkpreempt.go", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fruntime%2Fmkpreempt.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fruntime%2Fmkpreempt.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmkpreempt.go?ref=2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "patch": "@@ -83,6 +83,7 @@ var arches = map[string]func(){\n \t\"mips64x\": func() { genMIPS(true) },\n \t\"mipsx\":   func() { genMIPS(false) },\n \t\"ppc64x\":  genPPC64,\n+\t\"riscv\":   genRISCV,\n \t\"riscv64\": genRISCV64,\n \t\"s390x\":   genS390X,\n \t\"wasm\":    genWasm,\n@@ -501,6 +502,11 @@ func genPPC64() {\n \tp(\"JMP (CTR)\")\n }\n \n+func genRISCV() {\n+\tp(\"// No async preemption on riscv - see issue 36711\")\n+\tp(\"UNDEF\")\n+}\n+\n func genRISCV64() {\n \t// X0 (zero), X1 (LR), X2 (SP), X4 (g), X31 (TMP) are special.\n \tvar l = layout{sp: \"X2\", stack: 8}"}, {"sha": "249b5fea01b4324e383dda8536ad2e6942f66627", "filename": "libgo/go/runtime/mpagealloc_32bit.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fruntime%2Fmpagealloc_32bit.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fruntime%2Fmpagealloc_32bit.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmpagealloc_32bit.go?ref=2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build 386 arm mips mipsle wasm darwin,arm64 amd64p32 armbe m68k mips64p32 mips64p32le nios2 ppc s390 sh shbe sparc\n+// +build 386 arm mips mipsle wasm darwin,arm64 amd64p32 armbe m68k mips64p32 mips64p32le nios2 ppc riscv s390 sh shbe sparc\n \n // wasm is a treated as a 32-bit architecture for the purposes of the page\n // allocator, even though it has 64-bit pointers. This is because any wasm"}, {"sha": "22cac17ef117cfe1481c4c881775f4c024b24391", "filename": "libgo/go/syscall/endian_little.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fsyscall%2Fendian_little.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fgo%2Fsyscall%2Fendian_little.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fendian_little.go?ref=2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n //\n-// +build 386 alpha amd64 amd64p32 arm arm64 ia64 mips64le mipsle mips64p32le nios2 ppc64le riscv64 sh wasm\n+// +build 386 alpha amd64 amd64p32 arm arm64 ia64 mips64le mipsle mips64p32le nios2 ppc64le riscv riscv64 sh wasm\n \n package syscall\n "}, {"sha": "6f7b368f8bfd0151f16036e3edd042a80478c332", "filename": "libgo/match.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fmatch.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fmatch.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmatch.sh?ref=2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "patch": "@@ -116,7 +116,7 @@ for f in $gofiles; do\n \taix | android | darwin | dragonfly | freebsd | illumos | hurd | js | linux | nacl | netbsd | openbsd | plan9 | solaris | windows)\n \t    tag1=nonmatchingtag\n \t    ;;\n-\t386 | amd64 | amd64p32 | arm | armbe | arm64 | arm64be | alpha | ia64 | m68k | mips | mipsle | mips64 | mips64le | mips64p32 | mips64p32le | nios2 | ppc | ppc64 | ppc64le | riscv64 | s390 | s390x | sh | shbe | sparc | sparc64 | wasm)\n+\t386 | amd64 | amd64p32 | arm | armbe | arm64 | arm64be | alpha | ia64 | m68k | mips | mipsle | mips64 | mips64le | mips64p32 | mips64p32le | nios2 | ppc | ppc64 | ppc64le | riscv | riscv64 | s390 | s390x | sh | shbe | sparc | sparc64 | wasm)\n \t    tag1=nonmatchingtag\n \t    ;;\n     esac\n@@ -128,7 +128,7 @@ for f in $gofiles; do\n \taix | android | darwin | dragonfly | freebsd | hurd | illumos | js | linux | nacl | netbsd | openbsd | plan9 | solaris | windows)\n \t    tag2=nonmatchingtag\n \t    ;;\n-\t386 | amd64 | amd64p32 | arm | armbe | arm64 | arm64be | alpha | ia64 | m68k | mips | mipsle | mips64 | mips64le | mips64p32 | mips64p32le | nios2 | ppc | ppc64 | ppc64le | riscv64 | s390 | s390x | sh | shbe | sparc | sparc64 | wasm)\n+\t386 | amd64 | amd64p32 | arm | armbe | arm64 | arm64be | alpha | ia64 | m68k | mips | mipsle | mips64 | mips64le | mips64p32 | mips64p32le | nios2 | ppc | ppc64 | ppc64le | riscv | riscv64 | s390 | s390x | sh | shbe | sparc | sparc64 | wasm)\n \t    tag2=nonmatchingtag\n \t    ;;\n     esac"}, {"sha": "3b53e1ceea24f42d95cbf9cf4a2a5284636c421b", "filename": "libgo/misc/cgo/testcshared/testdata/libgo2/dup2.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fmisc%2Fcgo%2Ftestcshared%2Ftestdata%2Flibgo2%2Fdup2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fmisc%2Fcgo%2Ftestcshared%2Ftestdata%2Flibgo2%2Fdup2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmisc%2Fcgo%2Ftestcshared%2Ftestdata%2Flibgo2%2Fdup2.go?ref=2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux,!arm64,!riscv64 netbsd openbsd\n+// +build darwin dragonfly freebsd linux,!arm64,!riscv,!riscv64 netbsd openbsd\n \n package main\n "}, {"sha": "79a37730c8425b8a7f18ba30375b45ca70638a20", "filename": "libgo/misc/cgo/testcshared/testdata/libgo2/dup3.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fmisc%2Fcgo%2Ftestcshared%2Ftestdata%2Flibgo2%2Fdup3.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Fmisc%2Fcgo%2Ftestcshared%2Ftestdata%2Flibgo2%2Fdup3.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmisc%2Fcgo%2Ftestcshared%2Ftestdata%2Flibgo2%2Fdup3.go?ref=2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build linux,arm64 linux,riscv64\n+// +build linux,arm64 linux,riscv,riscv64\n \n package main\n "}, {"sha": "5bb27ec1631a7d97b6241d22f41d82d7c1b4b077", "filename": "libgo/testsuite/gotest", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Ftestsuite%2Fgotest", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5499b57cf4a68ebc8decce90d3eb1e281c31a9/libgo%2Ftestsuite%2Fgotest", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Ftestsuite%2Fgotest?ref=2c5499b57cf4a68ebc8decce90d3eb1e281c31a9", "patch": "@@ -308,7 +308,7 @@ x)\n \t    aix | android | darwin | dragonfly | freebsd | hurd | illumos | js | linux | nacl | netbsd | openbsd | plan9 | solaris | windows)\n \t\ttag1=nonmatchingtag\n \t\t;;\n-\t    386 | amd64 | amd64p32 | arm | armbe | arm64 | arm64be | alpha | ia64 | m68k | mips | mipsle | mips64 | mips64le | mips64p32 | mips64p32le | nios2 | ppc | ppc64 | ppc64le | riscv64 | s390 | s390x | sh | shbe | sparc | sparc64 | wasm)\n+\t    386 | amd64 | amd64p32 | arm | armbe | arm64 | arm64be | alpha | ia64 | m68k | mips | mipsle | mips64 | mips64le | mips64p32 | mips64p32le | nios2 | ppc | ppc64 | ppc64le | riscv | riscv64 | s390 | s390x | sh | shbe | sparc | sparc64 | wasm)\n \t\ttag1=nonmatchingtag\n \t\t;;\n \t    esac\n@@ -320,7 +320,7 @@ x)\n \t    aix | android | darwin | dragonfly | freebsd | hurd | illumos | js | linux | nacl | netbsd | openbsd | plan9 | solaris | windows)\n \t\ttag2=nonmatchingtag\n \t\t;;\n-\t    386 | amd64 | amd64p32 | arm | armbe | arm64 | arm64be | alpha | ia64 | m68k | mips | mipsle | mips64 | mips64le | mips64p32 | mips64p32le | nios2 | ppc | ppc64 | ppc64le | riscv64 | s390 | s390x | sh | shbe | sparc | sparc64 | wasm)\n+\t    386 | amd64 | amd64p32 | arm | armbe | arm64 | arm64be | alpha | ia64 | m68k | mips | mipsle | mips64 | mips64le | mips64p32 | mips64p32le | nios2 | ppc | ppc64 | ppc64le | riscv | riscv64 | s390 | s390x | sh | shbe | sparc | sparc64 | wasm)\n \t\ttag2=nonmatchingtag\n \t\t;;\n \t    esac"}]}