{"sha": "be06a8b00ab3d1f410ecd447d8f3a7a6d00e3dad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUwNmE4YjAwYWIzZDFmNDEwZWNkNDQ3ZDhmM2E3YTZkMDBlM2RhZA==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-10-09T18:59:11Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-10-09T18:59:11Z"}, "message": "re PR target/54760 ([SH] Add __builtin_thread_pointer, __builtin_set_thread_pointer)\n\n\tPR target/54760\n\t* doc/extend.texi (Target Builtins): Add SH built-in section.\n\tDocument __builtin_thread_pointer and __builtin_set_thread_pointer.\n\nFrom-SVN: r192269", "tree": {"sha": "7b45262e3efcdf9eae5e8a87f6e7c3fc258e92c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b45262e3efcdf9eae5e8a87f6e7c3fc258e92c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be06a8b00ab3d1f410ecd447d8f3a7a6d00e3dad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be06a8b00ab3d1f410ecd447d8f3a7a6d00e3dad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be06a8b00ab3d1f410ecd447d8f3a7a6d00e3dad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be06a8b00ab3d1f410ecd447d8f3a7a6d00e3dad/comments", "author": null, "committer": null, "parents": [{"sha": "3cedb9108b399c52167810df29b71b5f5c8b9d9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cedb9108b399c52167810df29b71b5f5c8b9d9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cedb9108b399c52167810df29b71b5f5c8b9d9e"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "3ee1d6b0da99582fe68705f9d1a11e2bcd21a8e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be06a8b00ab3d1f410ecd447d8f3a7a6d00e3dad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be06a8b00ab3d1f410ecd447d8f3a7a6d00e3dad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be06a8b00ab3d1f410ecd447d8f3a7a6d00e3dad", "patch": "@@ -1,3 +1,9 @@\n+2012-10-09  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/54760\n+\t* doc/extend.texi (Target Builtins): Add SH built-in section.\n+\tDocument __builtin_thread_pointer and __builtin_set_thread_pointer.\n+\n 2012-10-09  Venkataramanan Kumar  <venkataramanan.kumar@amd.com>\n \n \tPR middle-end/53397"}, {"sha": "9fd2f27b0fdd7f7af8e3904705b9097c9cf5e81c", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be06a8b00ab3d1f410ecd447d8f3a7a6d00e3dad/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be06a8b00ab3d1f410ecd447d8f3a7a6d00e3dad/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=be06a8b00ab3d1f410ecd447d8f3a7a6d00e3dad", "patch": "@@ -8651,6 +8651,7 @@ instructions, but allow the compiler to schedule those calls.\n * PowerPC Built-in Functions::\n * PowerPC AltiVec/VSX Built-in Functions::\n * RX Built-in Functions::\n+* SH Built-in Functions::\n * SPARC VIS Built-in Functions::\n * SPU Built-in Functions::\n * TI C6X Built-in Functions::\n@@ -13687,6 +13688,41 @@ if the VSX instruction set is available.  The @samp{vec_vsx_ld} and\n @samp{vec_vsx_st} builtins will always generate the VSX @samp{LXVD2X},\n @samp{LXVW4X}, @samp{STXVD2X}, and @samp{STXVW4X} instructions.\n \n+@node SH Built-in Functions\n+@subsection SH Built-in Functions\n+The following built-in functions are supported on the SH1, SH2, SH3 and SH4\n+families of processors:\n+\n+@deftypefn {Built-in Function} {void} __builtin_set_thread_pointer (void *@var{ptr})\n+Sets the @samp{GBR} register to the specified value @var{ptr}.  This is usually\n+used by system code that manages threads and execution contexts.  The compiler\n+normally will not generate code that modifies the contents of @samp{GBR} and\n+thus the value is preserved across function calls.  Changing the @samp{GBR}\n+value in user code must be done with caution, since the compiler might use\n+@samp{GBR} in order to access thread local variables.\n+\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} {void *} __builtin_thread_pointer (void)\n+Returns the value that is currently set in the @samp{GBR} register.\n+Memory loads and stores that use the thread pointer as a base address will be\n+turned into @samp{GBR} based displacement loads and stores, if possible.\n+For example:\n+@smallexample\n+struct my_tcb\n+@{\n+   int a, b, c, d, e;\n+@};\n+\n+int get_tcb_value (void)\n+@{\n+  // Generate @samp{mov.l @@(8,gbr),r0} instruction\n+  return ((my_tcb*)__builtin_thread_pointer ())->c;\n+@}\n+\n+@end smallexample\n+@end deftypefn\n+\n @node RX Built-in Functions\n @subsection RX Built-in Functions\n GCC supports some of the RX instructions which cannot be expressed in"}]}