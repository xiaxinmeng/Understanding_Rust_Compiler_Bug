{"sha": "d7e2a1c13835e77ea0e8b380f8502c3377dd724e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdlMmExYzEzODM1ZTc3ZWEwZThiMzgwZjg1MDJjMzM3N2RkNzI0ZQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2011-06-10T15:28:46Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2011-06-10T15:28:46Z"}, "message": "re PR lto/49302 (FAIL: gcc.dg/lto/20110201-1 c_lto_20110201-1_0.o-c_lto_20110201-1_0.o)\n\n2011-06-10  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR lto/49302\n\t* tree-ssa-math-opts.c (powi_as_mults): Minor cleanup.\n\t(build_and_insert_call): Likewise.\n\t(build_and_insert_ref): New.\n\t(gimple_expand_builtin_pow): Minor cleanup.\n\t(gimple_expand_builtin_cabs): New.\n\t(execute_cse_sincos): Add case for BUILT_IN_CABS.\n\nFrom-SVN: r174912", "tree": {"sha": "2be9928ef65b8339b96deb942043be58444b179a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2be9928ef65b8339b96deb942043be58444b179a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7e2a1c13835e77ea0e8b380f8502c3377dd724e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7e2a1c13835e77ea0e8b380f8502c3377dd724e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7e2a1c13835e77ea0e8b380f8502c3377dd724e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7e2a1c13835e77ea0e8b380f8502c3377dd724e/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "749f25d8a774f7786bd0258d79ee10a309df8dfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/749f25d8a774f7786bd0258d79ee10a309df8dfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/749f25d8a774f7786bd0258d79ee10a309df8dfb"}], "stats": {"total": 83, "additions": 80, "deletions": 3}, "files": [{"sha": "7ed5cc6ac132e0fc8ddb6a2c605421893ddf3bc0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7e2a1c13835e77ea0e8b380f8502c3377dd724e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7e2a1c13835e77ea0e8b380f8502c3377dd724e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7e2a1c13835e77ea0e8b380f8502c3377dd724e", "patch": "@@ -1,3 +1,13 @@\n+2011-06-10  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR lto/49302\n+\t* tree-ssa-math-opts.c (powi_as_mults): Minor cleanup.\n+\t(build_and_insert_call): Likewise.\n+\t(build_and_insert_ref): New.\n+\t(gimple_expand_builtin_pow): Minor cleanup.\n+\t(gimple_expand_builtin_cabs): New.\n+\t(execute_cse_sincos): Add case for BUILT_IN_CABS.\n+\t\n 2011-06-10  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-cp.c (ipcp_versionable_function_p): Aliases are not versionable."}, {"sha": "bffd7f26c43754eb6f07462a9ca1cb3206a5d5b5", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 70, "deletions": 3, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7e2a1c13835e77ea0e8b380f8502c3377dd724e/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7e2a1c13835e77ea0e8b380f8502c3377dd724e/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=d7e2a1c13835e77ea0e8b380f8502c3377dd724e", "patch": "@@ -987,7 +987,7 @@ powi_as_mults (gimple_stmt_iterator *gsi, location_t loc,\n   memset (cache, 0,  sizeof (cache));\n   cache[1] = arg0;\n \n-  target = create_tmp_var (type, \"powmult\");\n+  target = create_tmp_reg (type, \"powmult\");\n   add_referenced_var (target);\n \n   result = powi_as_mults_1 (gsi, loc, type, (n < 0) ? -n : n, cache, target);\n@@ -1041,7 +1041,7 @@ build_and_insert_call (gimple_stmt_iterator *gsi, location_t loc,\n \n   if (!*var)\n     {\n-      *var = create_tmp_var (TREE_TYPE (arg), \"powroot\");\n+      *var = create_tmp_reg (TREE_TYPE (arg), \"powroot\");\n       add_referenced_var (*var);\n     }\n \n@@ -1070,6 +1070,22 @@ build_and_insert_binop (gimple_stmt_iterator *gsi, location_t loc,\n   return result;\n }\n \n+/* Build a gimple reference operation with the given CODE and argument\n+   ARG, assigning the result to a new SSA name for variable TARGET.  \n+   Insert the statement prior to GSI's current position, and return\n+   the fresh SSA name.  */\n+\n+static inline tree\n+build_and_insert_ref (gimple_stmt_iterator *gsi, location_t loc, tree type,\n+\t\t      tree target, enum tree_code code, tree arg0)\n+{\n+  tree result = make_ssa_name (target, NULL);\n+  gimple stmt = gimple_build_assign (result, build1 (code, type, arg0));\n+  gimple_set_location (stmt, loc);\n+  gsi_insert_before (gsi, stmt, GSI_SAME_STMT);\n+  return result;\n+}\n+\n /* ARG0 and ARG1 are the two arguments to a pow builtin call in GSI\n    with location info LOC.  If possible, create an equivalent and\n    less expensive sequence of statements prior to GSI, and return an\n@@ -1124,7 +1140,7 @@ gimple_expand_builtin_pow (gimple_stmt_iterator *gsi, location_t loc,\n      if we don't have a hardware sqrt insn.  */\n   dconst1_4 = dconst1;\n   SET_REAL_EXP (&dconst1_4, REAL_EXP (&dconst1_4) - 2);\n-  hw_sqrt_exists = optab_handler(sqrt_optab, mode) != CODE_FOR_nothing;\n+  hw_sqrt_exists = optab_handler (sqrt_optab, mode) != CODE_FOR_nothing;\n \n   if (flag_unsafe_math_optimizations\n       && sqrtfn\n@@ -1306,6 +1322,42 @@ gimple_expand_builtin_pow (gimple_stmt_iterator *gsi, location_t loc,\n   return NULL_TREE;\n }\n \n+/* ARG is the argument to a cabs builtin call in GSI with location info\n+   LOC.  Create a sequence of statements prior to GSI that calculates\n+   sqrt(R*R + I*I), where R and I are the real and imaginary components\n+   of ARG, respectively.  Return an expression holding the result.  */\n+\n+static tree\n+gimple_expand_builtin_cabs (gimple_stmt_iterator *gsi, location_t loc, tree arg)\n+{\n+  tree target, real_part, imag_part, addend1, addend2, sum, result;\n+  tree type = TREE_TYPE (TREE_TYPE (arg));\n+  tree sqrtfn = mathfn_built_in (type, BUILT_IN_SQRT);\n+  enum machine_mode mode = TYPE_MODE (type);\n+\n+  if (!flag_unsafe_math_optimizations\n+      || !optimize_bb_for_speed_p (gimple_bb (gsi_stmt (*gsi)))\n+      || !sqrtfn\n+      || optab_handler (sqrt_optab, mode) == CODE_FOR_nothing)\n+    return NULL_TREE;\n+\n+  target = create_tmp_reg (type, \"cabs\");\n+  add_referenced_var (target);\n+\n+  real_part = build_and_insert_ref (gsi, loc, type, target,\n+\t\t\t\t    REALPART_EXPR, arg);\n+  addend1 = build_and_insert_binop (gsi, loc, target, MULT_EXPR,\n+\t\t\t\t    real_part, real_part);\n+  imag_part = build_and_insert_ref (gsi, loc, type, target, \n+\t\t\t\t    IMAGPART_EXPR, arg);\n+  addend2 = build_and_insert_binop (gsi, loc, target, MULT_EXPR,\n+\t\t\t\t    imag_part, imag_part);\n+  sum = build_and_insert_binop (gsi, loc, target, PLUS_EXPR, addend1, addend2);\n+  result = build_and_insert_call (gsi, loc, &target, sqrtfn, sum);\n+\n+  return result;\n+}\n+\n /* Go through all calls to sin, cos and cexpi and call execute_cse_sincos_1\n    on the SSA_NAME argument of each of them.  Also expand powi(x,n) into\n    an optimal number of multiplies, when n is a constant.  */\n@@ -1388,6 +1440,21 @@ execute_cse_sincos (void)\n \t\t    }\n \t\t  break;\n \n+\t\tCASE_FLT_FN (BUILT_IN_CABS):\n+\t\t  arg0 = gimple_call_arg (stmt, 0);\n+\t\t  loc = gimple_location (stmt);\n+\t\t  result = gimple_expand_builtin_cabs (&gsi, loc, arg0);\n+\n+\t\t  if (result)\n+\t\t    {\n+\t\t      tree lhs = gimple_get_lhs (stmt);\n+\t\t      gimple new_stmt = gimple_build_assign (lhs, result);\n+\t\t      gimple_set_location (new_stmt, loc);\n+\t\t      unlink_stmt_vdef (stmt);\n+\t\t      gsi_replace (&gsi, new_stmt, true);\n+\t\t    }\n+\t\t  break;\n+\n \t\tdefault:;\n \t\t}\n \t    }"}]}