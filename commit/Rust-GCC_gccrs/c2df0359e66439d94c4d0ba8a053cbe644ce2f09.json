{"sha": "c2df0359e66439d94c4d0ba8a053cbe644ce2f09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJkZjAzNTllNjY0MzlkOTRjNGQwYmE4YTA1M2NiZTY0NGNlMmYwOQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-08-09T22:02:32Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-08-09T22:02:32Z"}, "message": "re PR fortran/32987 (TAB in FORMAT: accept extension, warn with -std=f*)\n\n2007-08-09  Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/32987\n\t* io.c (format_token): Add FMT_ERROR.\n\t(next_char_not_space): Print error/warning when\n\t'\\t' are used in format specifications.\n\t(format_lex): Propagate error.\n\t(check_format): Ditto.\n\n2007-08-09  Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/32987\n\t* io/format.c (next_char): Treat '\\t' as ' ' in format specification.\n\n2007-08-09  Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/32987\n\t* gfortran.dg/fmt_tab_1.f90: New.\n\t* gfortran.dg/fmt_tab_2.f90: New.\n\nFrom-SVN: r127324", "tree": {"sha": "fd7c7032837d13a2af6250e5cbd87ae0af551aa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd7c7032837d13a2af6250e5cbd87ae0af551aa7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2df0359e66439d94c4d0ba8a053cbe644ce2f09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2df0359e66439d94c4d0ba8a053cbe644ce2f09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2df0359e66439d94c4d0ba8a053cbe644ce2f09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2df0359e66439d94c4d0ba8a053cbe644ce2f09/comments", "author": null, "committer": null, "parents": [{"sha": "eafaa67539cbcdf8d8ecbe8b907e719f66cade05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eafaa67539cbcdf8d8ecbe8b907e719f66cade05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eafaa67539cbcdf8d8ecbe8b907e719f66cade05"}], "stats": {"total": 122, "additions": 108, "deletions": 14}, "files": [{"sha": "94dfd9790b47a2f14aeec161a32cc464e2027f75", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2df0359e66439d94c4d0ba8a053cbe644ce2f09/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2df0359e66439d94c4d0ba8a053cbe644ce2f09/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c2df0359e66439d94c4d0ba8a053cbe644ce2f09", "patch": "@@ -1,3 +1,12 @@\n+2007-08-09  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/32987\n+\t* io.c (format_token): Add FMT_ERROR.\n+\t(next_char_not_space): Print error/warning when\n+\t'\\t' are used in format specifications.\n+\t(format_lex): Propagate error.\n+\t(check_format): Ditto.\n+\n 2007-08-09  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/33001"}, {"sha": "ef1b88e5d77f61dfc1eb48790d8f048782d415f6", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 72, "deletions": 11, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2df0359e66439d94c4d0ba8a053cbe644ce2f09/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2df0359e66439d94c4d0ba8a053cbe644ce2f09/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=c2df0359e66439d94c4d0ba8a053cbe644ce2f09", "patch": "@@ -97,7 +97,7 @@ typedef enum\n   FMT_NONE, FMT_UNKNOWN, FMT_SIGNED_INT, FMT_ZERO, FMT_POSINT, FMT_PERIOD,\n   FMT_COMMA, FMT_COLON, FMT_SLASH, FMT_DOLLAR, FMT_POS, FMT_LPAREN,\n   FMT_RPAREN, FMT_X, FMT_SIGN, FMT_BLANK, FMT_CHAR, FMT_P, FMT_IBOZ, FMT_F,\n-  FMT_E, FMT_EXT, FMT_G, FMT_L, FMT_A, FMT_D, FMT_H, FMT_END\n+  FMT_E, FMT_EXT, FMT_G, FMT_L, FMT_A, FMT_D, FMT_H, FMT_END, FMT_ERROR\n }\n format_token;\n \n@@ -175,12 +175,23 @@ unget_char (void)\n /* Eat up the spaces and return a character.  */\n \n static char\n-next_char_not_space (void)\n+next_char_not_space (bool *error)\n {\n   char c;\n   do\n     {\n       c = next_char (0);\n+      if (c == '\\t')\n+\t{\n+\t  if (gfc_option.allow_std & GFC_STD_GNU)\n+\t    gfc_warning (\"Extension: Tab character in format at %C\");\n+\t  else\n+\t    {\n+\t      gfc_error (\"Extension: Tab character in format at %C\");\n+\t      *error = true;\n+\t      return c;\n+\t    }\n+\t}\n     }\n   while (gfc_is_whitespace (c));\n   return c;\n@@ -198,6 +209,7 @@ format_lex (void)\n   char c, delim;\n   int zflag;\n   int negative_flag;\n+  bool error = false;\n \n   if (saved_token != FMT_NONE)\n     {\n@@ -206,15 +218,15 @@ format_lex (void)\n       return token;\n     }\n \n-  c = next_char_not_space ();\n+  c = next_char_not_space (&error);\n   \n   negative_flag = 0;\n   switch (c)\n     {\n     case '-':\n       negative_flag = 1;\n     case '+':\n-      c = next_char_not_space ();\n+      c = next_char_not_space (&error);\n       if (!ISDIGIT (c))\n \t{\n \t  token = FMT_UNKNOWN;\n@@ -225,7 +237,7 @@ format_lex (void)\n \n       do\n \t{\n-\t  c = next_char_not_space ();\n+\t  c = next_char_not_space (&error);\n \t  if (ISDIGIT (c))\n \t    value = 10 * value + c - '0';\n \t}\n@@ -255,7 +267,7 @@ format_lex (void)\n \n       do\n \t{\n-\t  c = next_char_not_space ();\n+\t  c = next_char_not_space (&error);\n \t  if (ISDIGIT (c))\n \t    {\n \t      value = 10 * value + c - '0';\n@@ -290,7 +302,7 @@ format_lex (void)\n       break;\n \n     case 'T':\n-      c = next_char_not_space ();\n+      c = next_char_not_space (&error);\n       if (c != 'L' && c != 'R')\n \tunget_char ();\n \n@@ -310,15 +322,15 @@ format_lex (void)\n       break;\n \n     case 'S':\n-      c = next_char_not_space ();\n+      c = next_char_not_space (&error);\n       if (c != 'P' && c != 'S')\n \tunget_char ();\n \n       token = FMT_SIGN;\n       break;\n \n     case 'B':\n-      c = next_char_not_space ();\n+      c = next_char_not_space (&error);\n       if (c == 'N' || c == 'Z')\n \ttoken = FMT_BLANK;\n       else\n@@ -380,7 +392,7 @@ format_lex (void)\n       break;\n \n     case 'E':\n-      c = next_char_not_space ();\n+      c = next_char_not_space (&error);\n       if (c == 'N' || c == 'S')\n \ttoken = FMT_EXT;\n       else\n@@ -420,6 +432,9 @@ format_lex (void)\n       break;\n     }\n \n+  if (error)\n+    return FMT_ERROR;\n+\n   return token;\n }\n \n@@ -450,26 +465,34 @@ check_format (bool is_input)\n   rv = SUCCESS;\n \n   t = format_lex ();\n+  if (t == FMT_ERROR)\n+    goto fail;\n   if (t != FMT_LPAREN)\n     {\n       error = _(\"Missing leading left parenthesis\");\n       goto syntax;\n     }\n \n   t = format_lex ();\n+  if (t == FMT_ERROR)\n+    goto fail;\n   if (t == FMT_RPAREN)\n     goto finished;\t\t/* Empty format is legal */\n   saved_token = t;\n \n format_item:\n   /* In this state, the next thing has to be a format item.  */\n   t = format_lex ();\n+  if (t == FMT_ERROR)\n+    goto fail;\n format_item_1:\n   switch (t)\n     {\n     case FMT_POSINT:\n       repeat = value;\n       t = format_lex ();\n+      if (t == FMT_ERROR)\n+\tgoto fail;\n       if (t == FMT_LPAREN)\n \t{\n \t  level++;\n@@ -489,6 +512,8 @@ check_format (bool is_input)\n     case FMT_ZERO:\n       /* Signed integer can only precede a P format.  */\n       t = format_lex ();\n+      if (t == FMT_ERROR)\n+\tgoto fail;\n       if (t != FMT_P)\n \t{\n \t  error = _(\"Expected P edit descriptor\");\n@@ -523,6 +548,8 @@ check_format (bool is_input)\n \n     case FMT_DOLLAR:\n       t = format_lex ();\n+      if (t == FMT_ERROR)\n+\tgoto fail;\n \n       if (gfc_notify_std (GFC_STD_GNU, \"Extension: $ descriptor at %C\")\n \t  == FAILURE)\n@@ -570,6 +597,8 @@ check_format (bool is_input)\n       if (pedantic)\n \t{\n \t  t = format_lex ();\n+\t  if (t == FMT_ERROR)\n+\t    goto fail;\n \t  if (t == FMT_POSINT)\n \t    {\n \t      error = _(\"Repeat count cannot follow P descriptor\");\n@@ -584,6 +613,8 @@ check_format (bool is_input)\n     case FMT_POS:\n     case FMT_L:\n       t = format_lex ();\n+      if (t == FMT_ERROR)\n+\tgoto fail;\n       if (t == FMT_POSINT)\n \tbreak;\n \n@@ -610,6 +641,8 @@ check_format (bool is_input)\n \n     case FMT_A:\n       t = format_lex ();\n+      if (t == FMT_ERROR)\n+\tgoto fail;\n       if (t != FMT_POSINT)\n \tsaved_token = t;\n       break;\n@@ -619,13 +652,17 @@ check_format (bool is_input)\n     case FMT_G:\n     case FMT_EXT:\n       u = format_lex ();\n+      if (u == FMT_ERROR)\n+\tgoto fail;\n       if (u != FMT_POSINT)\n \t{\n \t  error = posint_required;\n \t  goto syntax;\n \t}\n \n       u = format_lex ();\n+      if (u == FMT_ERROR)\n+\tgoto fail;\n       if (u != FMT_PERIOD)\n \t{\n \t  /* Warn if -std=legacy, otherwise error.  */\n@@ -638,6 +675,8 @@ check_format (bool is_input)\n \t}\n \n       u = format_lex ();\n+      if (u == FMT_ERROR)\n+\tgoto fail;\n       if (u != FMT_ZERO && u != FMT_POSINT)\n \t{\n \t  error = nonneg_required;\n@@ -649,13 +688,17 @@ check_format (bool is_input)\n \n       /* Look for optional exponent.  */\n       u = format_lex ();\n+      if (u == FMT_ERROR)\n+\tgoto fail;\n       if (u != FMT_E)\n \t{\n \t  saved_token = u;\n \t}\n       else\n \t{\n \t  u = format_lex ();\n+\t  if (u == FMT_ERROR)\n+\t    goto fail;\n \t  if (u != FMT_POSINT)\n \t    {\n \t      error = _(\"Positive exponent width required\");\n@@ -667,6 +710,8 @@ check_format (bool is_input)\n \n     case FMT_F:\n       t = format_lex ();\n+      if (t == FMT_ERROR)\n+\tgoto fail;\n       if (t != FMT_ZERO && t != FMT_POSINT)\n \t{\n \t  error = nonneg_required;\n@@ -679,6 +724,8 @@ check_format (bool is_input)\n \t}\n \n       t = format_lex ();\n+      if (t == FMT_ERROR)\n+\tgoto fail;\n       if (t != FMT_PERIOD)\n \t{\n \t  /* Warn if -std=legacy, otherwise error.  */\n@@ -691,6 +738,8 @@ check_format (bool is_input)\n \t}\n \n       t = format_lex ();\n+      if (t == FMT_ERROR)\n+\tgoto fail;\n       if (t != FMT_ZERO && t != FMT_POSINT)\n \t{\n \t  error = nonneg_required;\n@@ -721,6 +770,8 @@ check_format (bool is_input)\n \n     case FMT_IBOZ:\n       t = format_lex ();\n+      if (t == FMT_ERROR)\n+\tgoto fail;\n       if (t != FMT_ZERO && t != FMT_POSINT)\n \t{\n \t  error = nonneg_required;\n@@ -733,13 +784,17 @@ check_format (bool is_input)\n \t}\n \n       t = format_lex ();\n+      if (t == FMT_ERROR)\n+\tgoto fail;\n       if (t != FMT_PERIOD)\n \t{\n \t  saved_token = t;\n \t}\n       else\n \t{\n \t  t = format_lex ();\n+\t  if (t == FMT_ERROR)\n+\t    goto fail;\n \t  if (t != FMT_ZERO && t != FMT_POSINT)\n \t    {\n \t      error = nonneg_required;\n@@ -757,6 +812,8 @@ check_format (bool is_input)\n between_desc:\n   /* Between a descriptor and what comes next.  */\n   t = format_lex ();\n+  if (t == FMT_ERROR)\n+    goto fail;\n   switch (t)\n     {\n \n@@ -788,6 +845,8 @@ check_format (bool is_input)\n   /* Optional comma is a weird between state where we've just finished\n      reading a colon, slash, dollar or P descriptor.  */\n   t = format_lex ();\n+  if (t == FMT_ERROR)\n+    goto fail;\n optional_comma_1:\n   switch (t)\n     {\n@@ -811,6 +870,8 @@ check_format (bool is_input)\n extension_optional_comma:\n   /* As a GNU extension, permit a missing comma after a string literal.  */\n   t = format_lex ();\n+  if (t == FMT_ERROR)\n+    goto fail;\n   switch (t)\n     {\n     case FMT_COMMA:\n@@ -842,7 +903,7 @@ check_format (bool is_input)\n \n syntax:\n   gfc_error (\"%s in format string at %C\", error);\n-\n+fail:\n   /* TODO: More elaborate measures are needed to show where a problem\n      is within a format string that has been calculated.  */\n   rv = FAILURE;"}, {"sha": "a293fa4c83aa1178bc56e3dd1b84b5e9efa955ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2df0359e66439d94c4d0ba8a053cbe644ce2f09/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2df0359e66439d94c4d0ba8a053cbe644ce2f09/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c2df0359e66439d94c4d0ba8a053cbe644ce2f09", "patch": "@@ -1,3 +1,9 @@\n+2007-08-09  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/32987\n+\t* gfortran.dg/fmt_tab_1.f90: New.\n+\t* gfortran.dg/fmt_tab_2.f90: New.\n+\n 2007-08-09  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR c/32796\n@@ -17,8 +23,8 @@\n \t* gcc.target/mips/code-readable-3.c: Likewise.\n \n 2007-08-08  Vladimir Yanovsky  <yanov@il.ibm.com>\n-            Revital Eres  <eres@il.ibm.com>\n- \n+\t    Revital Eres  <eres@il.ibm.com>\n+\n \t* gfortran.dg/sms-1.f90: Add comment.\n \t* gfortran.dg/sms-2.f90: New.\n "}, {"sha": "cd95da203772f1c4b41ed6f36a917b4385c119d2", "filename": "gcc/testsuite/gfortran.dg/fmt_tab_1.f90", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2df0359e66439d94c4d0ba8a053cbe644ce2f09/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_tab_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2df0359e66439d94c4d0ba8a053cbe644ce2f09/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_tab_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_tab_1.f90?ref=c2df0359e66439d94c4d0ba8a053cbe644ce2f09", "patch": "@@ -0,0 +1,6 @@\n+! { dg-do run }\n+! PR fortran/32987\n+      program TestFormat\n+        write (*, 10)\n+ 10     format ('Hello ',\t'bug!') ! { dg-warning \"Extension: Tab character in format\" }\n+      end"}, {"sha": "17acf86fb8ea53039d31f19c35f24eaa522b7bb8", "filename": "gcc/testsuite/gfortran.dg/fmt_tab_2.f90", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2df0359e66439d94c4d0ba8a053cbe644ce2f09/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_tab_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2df0359e66439d94c4d0ba8a053cbe644ce2f09/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_tab_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_tab_2.f90?ref=c2df0359e66439d94c4d0ba8a053cbe644ce2f09", "patch": "@@ -0,0 +1,7 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n+! PR fortran/32987\n+      program TestFormat\n+        write (*, 10) ! { dg-error \"FORMAT label 10 at .1. not defined\" }\n+ 10     format ('Hello ',\t'bug!') ! { dg-error \"Extension: Tab character in format\" }\n+      end"}, {"sha": "04b0ecf6ac6e7eb46f61d2d6899580980995bfa1", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2df0359e66439d94c4d0ba8a053cbe644ce2f09/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2df0359e66439d94c4d0ba8a053cbe644ce2f09/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=c2df0359e66439d94c4d0ba8a053cbe644ce2f09", "patch": "@@ -1,3 +1,8 @@\n+2007-08-09  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/32987\n+\t* io/format.c (next_char): Treat '\\t' as ' ' in format specification.\n+\n 2007-08-06  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/30947"}, {"sha": "d6afa0aaf457a657a53a9cc3ec1681e5c93bb907", "filename": "libgfortran/io/format.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2df0359e66439d94c4d0ba8a053cbe644ce2f09/libgfortran%2Fio%2Fformat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2df0359e66439d94c4d0ba8a053cbe644ce2f09/libgfortran%2Fio%2Fformat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fformat.c?ref=c2df0359e66439d94c4d0ba8a053cbe644ce2f09", "patch": "@@ -92,7 +92,7 @@ next_char (format_data *fmt, int literal)\n       fmt->format_string_len--;\n       c = toupper (*fmt->format_string++);\n     }\n-  while (c == ' ' && !literal);\n+  while ((c == ' ' || c == '\\t') && !literal);\n \n   return c;\n }"}]}