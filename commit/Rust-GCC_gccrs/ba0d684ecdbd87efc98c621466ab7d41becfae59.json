{"sha": "ba0d684ecdbd87efc98c621466ab7d41becfae59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmEwZDY4NGVjZGJkODdlZmM5OGM2MjE0NjZhYjdkNDFiZWNmYWU1OQ==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@google.com", "date": "2012-05-31T18:01:15Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2012-05-31T18:01:15Z"}, "message": "Add new skeleton ChangeLog file generator to contrib/\n\nThis script analyzes a .diff file and generates a skeleton ChangeLog\nentry for it.  It tries fairly hard to find function names, so it's\nimportant to use the -p switch with diff.\n\nI wrote the initial code a while ago.  Cary added a bunch of smarts to\nmake it understand C++ and guess the function names better than the\noriginal version.\n\n2012-05-31   Diego Novillo  <dnovillo@google.com>\n\t     Cary Coutant  <ccoutant@google.com>\n\n\t* mklog: New.\n\nCo-Authored-By: Cary Coutant <ccoutant@google.com>\n\nFrom-SVN: r188072", "tree": {"sha": "e9be7733fb83dfa4a427b1fcec2d0cdf8cc3e872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9be7733fb83dfa4a427b1fcec2d0cdf8cc3e872"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba0d684ecdbd87efc98c621466ab7d41becfae59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba0d684ecdbd87efc98c621466ab7d41becfae59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba0d684ecdbd87efc98c621466ab7d41becfae59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba0d684ecdbd87efc98c621466ab7d41becfae59/comments", "author": {"login": "dnovillo", "id": 7295335, "node_id": "MDQ6VXNlcjcyOTUzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7295335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnovillo", "html_url": "https://github.com/dnovillo", "followers_url": "https://api.github.com/users/dnovillo/followers", "following_url": "https://api.github.com/users/dnovillo/following{/other_user}", "gists_url": "https://api.github.com/users/dnovillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnovillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnovillo/subscriptions", "organizations_url": "https://api.github.com/users/dnovillo/orgs", "repos_url": "https://api.github.com/users/dnovillo/repos", "events_url": "https://api.github.com/users/dnovillo/events{/privacy}", "received_events_url": "https://api.github.com/users/dnovillo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "621dfb1e584367d1d62c52e82cf4351a7ae174d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/621dfb1e584367d1d62c52e82cf4351a7ae174d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/621dfb1e584367d1d62c52e82cf4351a7ae174d2"}], "stats": {"total": 156, "additions": 156, "deletions": 0}, "files": [{"sha": "7c4cfda5e84f64c2cee6c5464430bb01254f164d", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba0d684ecdbd87efc98c621466ab7d41becfae59/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba0d684ecdbd87efc98c621466ab7d41becfae59/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=ba0d684ecdbd87efc98c621466ab7d41becfae59", "patch": "@@ -1,3 +1,8 @@\n+2012-05-31   Diego Novillo  <dnovillo@google.com>\n+\t     Cary Coutant  <ccoutant@google.com>\n+\n+\t* mklog: New.\n+\n 2012-05-25  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/53472"}, {"sha": "70308ab44a26dae8adc712259507f8cb110b9f4e", "filename": "contrib/mklog", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba0d684ecdbd87efc98c621466ab7d41becfae59/contrib%2Fmklog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba0d684ecdbd87efc98c621466ab7d41becfae59/contrib%2Fmklog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fmklog?ref=ba0d684ecdbd87efc98c621466ab7d41becfae59", "patch": "@@ -0,0 +1,151 @@\n+#!/usr/bin/perl\n+# Copyright (C) 2012 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING.  If not, write to\n+# the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+# Boston, MA 02110-1301, USA.\n+\n+# This script parses a .diff file generated with 'diff -up' or 'diff -cp'\n+# and writes a skeleton ChangeLog file to stdout. It does not try to be\n+# very smart when parsing function names, but it produces a reasonable\n+# approximation.\n+#\n+# Author: Diego Novillo <dnovillo@google.com> and\n+#         Cary Coutant <ccoutant@google.com>\n+\n+# Change these settings to reflect your profile.\n+$username = $ENV{'USER'};\n+$name = `finger $username | grep -o 'Name: .*'`;\n+@n = split(/:/, $name);\n+$name = @n[1]; chop($name);\n+$addr = $username . \"\\@my.domain.org\";\n+$date = `date +%Y-%m-%d`; chop ($date);\n+\n+\n+#-----------------------------------------------------------------------------\n+# Program starts here. You should not need to edit anything below this\n+# line.\n+#-----------------------------------------------------------------------------\n+if ( $#ARGV != 0 ) {\n+    $prog = `basename $0`; chop ($prog);\n+    print \"usage: $prog file.diff\\n\\n\";\n+    print \"Adds a ChangeLog template to the start of file.diff\\n\";\n+    print \"It assumes that file.diff has been created with -up or -cp.\\n\";\n+    exit 1;\n+}\n+\n+$diff = $ARGV[0];\n+$dir = `dirname $diff`; chop ($dir);\n+$basename = `basename $diff`; chop ($basename);\n+$cl = `mktemp /tmp/$basename.XXXXXX` || exit 1; chop ($cl);\n+$hdrline = \"$date  $name  <$addr>\";\n+\n+open (CLFILE, \">$cl\") or die \"Could not open file $cl for writing\";\n+\n+print CLFILE \"$hdrline\\n\\n\";\n+\n+# For every file in the .diff print all the function names in ChangeLog\n+# format.\n+$bof = 0;\n+open (DFILE, $diff) or die \"Could not open file $diff for reading\";\n+while (<DFILE>) {\n+    # Check if we found a new file.\n+    if (/^\\+\\+\\+ (b\\/)?(\\S+)/) {\n+\t# If we have not seen any function names in the previous file (ie,\n+\t# $bof == 1), we just write out a ':' before starting the next\n+\t# file.\n+\tif ($bof == 1) {\n+\t    print CLFILE \":\\n\";\n+\t}\n+\t$filename = $2;\n+\tprint CLFILE \"\\t* $filename\";\n+\t$bof = 1;\n+    }\n+\n+    # Remember the last line in a unified diff block that might start\n+    # a new function.\n+    if (/^[-+ ]([a-zA-Z0-9_].*)/) {\n+        $save_fn = $1;\n+    }\n+\n+    # If we find a new function, print it in brackets.  Special case if\n+    # this is the first function in a file.  \n+    #\n+    # Note that we don't try too hard to find good matches.  This should\n+    # return a superset of the actual set of functions in the .diff file.\n+    #\n+    # The first two patterns work with context diff files (diff -c). The\n+    # third pattern works with unified diff files (diff -u).\n+    #\n+    # The fourth pattern looks for the starts of functions or classes\n+    # within a unified diff block.\n+\n+    if (/^\\*\\*\\*\\*\\*\\** ([a-zA-Z0-9_].*)/\n+        || /^[\\-\\+\\!] ([a-zA-Z0-9_]+)[ \\t]*\\(.*/\n+\t|| /^@@ .* @@ ([a-zA-Z0-9_].*)/\n+\t|| /^[-+ ](\\{)/)\n+      {\n+\t$_ = $1;\n+\tmy $fn;\n+\tif (/^\\{/) {\n+\t    # Beginning of a new function.\n+\t    $_ = $save_fn;\n+\t} else {\n+\t    $save_fn = \"\";\n+\t}\n+\tif (/;$/) {\n+\t    # No usable function name found.\n+\t} elsif (/^((class|struct|union|enum) [a-zA-Z0-9_]+)/) {\n+\t    # Discard stuff after the class/struct/etc. tag.\n+\t    $fn = $1;\n+\t} elsif (/([a-zA-Z0-9_][^(]*)\\(/) {\n+\t    # Discard template and function parameters.\n+\t    $fn = $1;\n+\t    1 while ($fn =~ s/<[^<>]*>//);\n+\t    $fn =~ s/[ \\t]*$//;\n+\t}\n+\tif ($fn && $seen_names{$fn} == 0) {\n+\t    # If this is the first function in the file, we display it next\n+\t    # to the filename, so we need an extra space before the opening\n+\t    # brace.\n+\t    if ($bof) {\n+\t\tprint CLFILE \" \";\n+\t\t$bof = 0;\n+\t    } else {\n+\t\tprint CLFILE \"\\t\";\n+\t    }\n+\n+\t    print CLFILE \"($fn):\\n\";\n+\t    $seen_names{$fn} = 1;\n+\t}\n+    }\n+}\n+\n+# If we have not seen any function names (ie, $bof == 1), we just\n+# write out a ':'. This happens when there is only one file with no\n+# functions.\n+if ($bof == 1) {\n+    print CLFILE \":\\n\";\n+}\n+\n+print CLFILE \"\\n\";\n+close (DFILE);\n+\n+# Concatenate the ChangeLog template and the original .diff file.\n+system (\"cat $diff >>$cl && mv $cl $diff\") == 0\n+    or die \"Could not add the ChangeLog entry to $diff\";\n+\n+exit 0;"}]}