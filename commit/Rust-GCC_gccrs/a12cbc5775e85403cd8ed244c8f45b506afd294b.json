{"sha": "a12cbc5775e85403cd8ed244c8f45b506afd294b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTEyY2JjNTc3NWU4NTQwM2NkOGVkMjQ0YzhmNDViNTA2YWZkMjk0Yg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2015-09-04T15:15:59Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-09-04T15:15:59Z"}, "message": "[PATCH] Minor cleanup of const_and_copies stack\n\n\t* tree-ssa-scopedtables.c (const_and_copies::const_and_copies): Remove\n\tunnecessary constructor.  It's now trivial and implemented inside...\n\t* tree-ssa-scopedtables.h (const_and_copies): Implement trivial\n\tconstructor.  Add comments to various methods.  Remove unused\n\tprivate fields.\n\t* tree-ssa-dom.c (pass_dominator::execute): Corresponding changes.\n\t* tree-vrp.c (identify_jump_threads): Likewise.\n\t* tree-ssa-threadedge.c (thread_through_normal_block): Fix minor\n\tindentation issues.\n\t(thread_across_edge): Similarly.\n\t(record_temporary_equivalences_from_stmts_at_dest): Remove unused\n\targuments in constructor call.\n\nFrom-SVN: r227493", "tree": {"sha": "118616fb2c9da24c0c8d264650464a0fdf898a55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/118616fb2c9da24c0c8d264650464a0fdf898a55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a12cbc5775e85403cd8ed244c8f45b506afd294b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a12cbc5775e85403cd8ed244c8f45b506afd294b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a12cbc5775e85403cd8ed244c8f45b506afd294b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a12cbc5775e85403cd8ed244c8f45b506afd294b/comments", "author": null, "committer": null, "parents": [{"sha": "0417fe49d6be14bb9ebf25b08f67d6a936958d25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0417fe49d6be14bb9ebf25b08f67d6a936958d25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0417fe49d6be14bb9ebf25b08f67d6a936958d25"}], "stats": {"total": 55, "additions": 39, "deletions": 16}, "files": [{"sha": "a6f9f8f14acd4bacb7459190bda4bc3a4f09e215", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a12cbc5775e85403cd8ed244c8f45b506afd294b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a12cbc5775e85403cd8ed244c8f45b506afd294b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a12cbc5775e85403cd8ed244c8f45b506afd294b", "patch": "@@ -1,3 +1,18 @@\n+2015-09-04  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-scopedtables.c (const_and_copies::const_and_copies): Remove\n+\tunnecessary constructor.  It's now trivial and implemented inside...\n+\t* tree-ssa-scopedtables.h (const_and_copies): Implement trivial\n+\tconstructor.  Add comments to various methods.  Remove unused\n+\tprivate fields.\n+\t* tree-ssa-dom.c (pass_dominator::execute): Corresponding changes.\n+\t* tree-vrp.c (identify_jump_threads): Likewise.\n+\t* tree-ssa-threadedge.c (thread_through_normal_block): Fix minor\n+\tindentation issues.\n+\t(thread_across_edge): Similarly.\n+\t(record_temporary_equivalences_from_stmts_at_dest): Remove unused\n+\targuments in constructor call.\n+\n 2015-09-04  Jonas Hahnfeld  <Hahnfeld@itc.rwth-aachen.de>\n \n \t* config/i386/intelmic-mkoffload.c (prepare_target_image): Fix if the"}, {"sha": "f0b19ffe1e4f163f8fd6b5bac2e2f4206669f73f", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a12cbc5775e85403cd8ed244c8f45b506afd294b/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a12cbc5775e85403cd8ed244c8f45b506afd294b/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=a12cbc5775e85403cd8ed244c8f45b506afd294b", "patch": "@@ -1168,7 +1168,7 @@ pass_dominator::execute (function *fun)\n   /* Create our hash tables.  */\n   avail_exprs = new hash_table<expr_elt_hasher> (1024);\n   avail_exprs_stack.create (20);\n-  const_and_copies = new class const_and_copies (dump_file, dump_flags);\n+  const_and_copies = new class const_and_copies ();\n   need_eh_cleanup = BITMAP_ALLOC (NULL);\n   need_noreturn_fixup.create (0);\n "}, {"sha": "1fea69a7967b84577bfa5d9922c38df0b8aa353c", "filename": "gcc/tree-ssa-scopedtables.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a12cbc5775e85403cd8ed244c8f45b506afd294b/gcc%2Ftree-ssa-scopedtables.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a12cbc5775e85403cd8ed244c8f45b506afd294b/gcc%2Ftree-ssa-scopedtables.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-scopedtables.c?ref=a12cbc5775e85403cd8ed244c8f45b506afd294b", "patch": "@@ -28,13 +28,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-scopedtables.h\"\n #include \"tree-ssa-threadedge.h\"\n \n-const_and_copies::const_and_copies (FILE *file, int flags)\n-{\n-  stack.create (20);\n-  dump_file = file;\n-  dump_flags = flags;\n-}\n-\n /* Pop entries off the stack until we hit the NULL marker.\n    For each entry popped, use the SRC/DEST pair to restore\n    SRC to its prior value.  */"}, {"sha": "564c24d42899879419cfdd837433cabc92c79bd9", "filename": "gcc/tree-ssa-scopedtables.h", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a12cbc5775e85403cd8ed244c8f45b506afd294b/gcc%2Ftree-ssa-scopedtables.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a12cbc5775e85403cd8ed244c8f45b506afd294b/gcc%2Ftree-ssa-scopedtables.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-scopedtables.h?ref=a12cbc5775e85403cd8ed244c8f45b506afd294b", "patch": "@@ -23,18 +23,31 @@ along with GCC; see the file COPYING3.  If not see\n class const_and_copies\n {\n  public:\n-  const_and_copies (FILE *, int);\n+  const_and_copies (void) { stack.create (20); };\n   ~const_and_copies (void) { stack.release (); }\n+\n+  /* Push the unwinding marker onto the stack.  */\n   void push_marker (void) { stack.safe_push (NULL_TREE); }\n+\n+  /* Restore the const/copies table to its state whe the last marker\n+     was pushed.  */\n   void pop_to_marker (void);\n+\n+  /* Record a single const/copy pair that can be unwound.  */\n   void record_const_or_copy (tree, tree);\n+\n+  /* Special entry point when we want to provide an explicit previous\n+     value for the first argument.  Try to get rid of this in the future.  */\n   void record_const_or_copy (tree, tree, tree);\n+\n+  /* When threading we need to invalidate certain equivalences after\n+     following a loop backedge.  The entries we need to invalidate will\n+     always be in this unwindable stack.  This entry point handles\n+     finding and invalidating those entries.  */\n   void invalidate (tree);\n \n  private:\n   vec<tree> stack;\n-  FILE *dump_file;\n-  int dump_flags;\n };\n \n #endif /* GCC_TREE_SSA_SCOPED_TABLES_H */"}, {"sha": "0ad24834feb678de80c5e1380fd88b822a001fda", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a12cbc5775e85403cd8ed244c8f45b506afd294b/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a12cbc5775e85403cd8ed244c8f45b506afd294b/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=a12cbc5775e85403cd8ed244c8f45b506afd294b", "patch": "@@ -432,7 +432,8 @@ record_temporary_equivalences_from_stmts_at_dest (edge e,\n       if (cached_lhs\n \t  && (TREE_CODE (cached_lhs) == SSA_NAME\n \t      || is_gimple_min_invariant (cached_lhs)))\n-\tconst_and_copies->record_const_or_copy (gimple_get_lhs (stmt), cached_lhs);\n+\tconst_and_copies->record_const_or_copy (gimple_get_lhs (stmt),\n+\t\t\t\t\t\tcached_lhs);\n       else if (backedge_seen)\n \tconst_and_copies->invalidate (gimple_get_lhs (stmt));\n     }\n@@ -1208,7 +1209,8 @@ thread_through_normal_block (edge e,\n   /* Now walk each statement recording any context sensitive\n      temporary equivalences we can detect.  */\n   gimple stmt\n-    = record_temporary_equivalences_from_stmts_at_dest (e, const_and_copies, simplify,\n+    = record_temporary_equivalences_from_stmts_at_dest (e, const_and_copies,\n+\t\t\t\t\t\t\tsimplify,\n \t\t\t\t\t\t\t*backedge_seen_p);\n \n   /* There's two reasons STMT might be null, and distinguishing\n@@ -1474,8 +1476,8 @@ thread_across_edge (gcond *dummy_cond,\n \tif (!found)\n \t  found = thread_through_normal_block (path->last ()->e, dummy_cond,\n \t\t\t\t\t       handle_dominating_asserts,\n-\t\t\t\t\t       const_and_copies, simplify, path, visited,\n-\t\t\t\t\t       &backedge_seen) > 0;\n+\t\t\t\t\t       const_and_copies, simplify, path,\n+\t\t\t\t\t       visited, &backedge_seen) > 0;\n \n \t/* If we were able to thread through a successor of E->dest, then\n \t   record the jump threading opportunity.  */"}, {"sha": "d7615e104ed09e223d554916e6b2249f4cda45fc", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a12cbc5775e85403cd8ed244c8f45b506afd294b/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a12cbc5775e85403cd8ed244c8f45b506afd294b/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=a12cbc5775e85403cd8ed244c8f45b506afd294b", "patch": "@@ -10149,7 +10149,7 @@ identify_jump_threads (void)\n \n   /* Allocate our unwinder stack to unwind any temporary equivalences\n      that might be recorded.  */\n-  equiv_stack = new const_and_copies (dump_file, dump_flags);\n+  equiv_stack = new const_and_copies ();\n \n   /* To avoid lots of silly node creation, we create a single\n      conditional and just modify it in-place when attempting to"}]}