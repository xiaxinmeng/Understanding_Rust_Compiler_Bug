{"sha": "2b01c3263e9ac407b5fbf43e0bff85c6fb6e97e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIwMWMzMjYzZTlhYzQwN2I1ZmJmNDNlMGJmZjg1YzZmYjZlOTdlOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-22T15:30:04Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-22T15:30:04Z"}, "message": "(convert_move): Replace explicit checks for FP extend ops with use of can_extend_p.\n\n(convert_move): Replace explicit checks for FP extend ops with use of\ncan_extend_p.\nAdd missing tests for FP trunc operations.\n\nFrom-SVN: r12771", "tree": {"sha": "3ebed40be52de1a0b3f2c7cd0a8664ad7c13e594", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ebed40be52de1a0b3f2c7cd0a8664ad7c13e594"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b01c3263e9ac407b5fbf43e0bff85c6fb6e97e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b01c3263e9ac407b5fbf43e0bff85c6fb6e97e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b01c3263e9ac407b5fbf43e0bff85c6fb6e97e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b01c3263e9ac407b5fbf43e0bff85c6fb6e97e8/comments", "author": null, "committer": null, "parents": [{"sha": "6ba95bc92ae2b73b7ab89dc9b50e117f5e044940", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ba95bc92ae2b73b7ab89dc9b50e117f5e044940", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ba95bc92ae2b73b7ab89dc9b50e117f5e044940"}], "stats": {"total": 146, "additions": 39, "deletions": 107}, "files": [{"sha": "ff1037558bfd14b92ed06874040c924af9cac360", "filename": "gcc/expr.c", "status": "modified", "additions": 39, "deletions": 107, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b01c3263e9ac407b5fbf43e0bff85c6fb6e97e8/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b01c3263e9ac407b5fbf43e0bff85c6fb6e97e8/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=2b01c3263e9ac407b5fbf43e0bff85c6fb6e97e8", "patch": "@@ -611,115 +611,17 @@ convert_move (to, from, unsignedp)\n     {\n       rtx value;\n \n-#ifdef HAVE_extendqfhf2\n-      if (HAVE_extendqfhf2 && from_mode == QFmode && to_mode == HFmode)\n+      if (GET_MODE_BITSIZE (from_mode) < GET_MODE_BITSIZE (to_mode))\n \t{\n-\t  emit_unop_insn (CODE_FOR_extendqfhf2, to, from, UNKNOWN);\n-\t  return;\n-\t}\n-#endif\n-#ifdef HAVE_extendqfsf2\n-      if (HAVE_extendqfsf2 && from_mode == QFmode && to_mode == SFmode)\n-\t{\n-\t  emit_unop_insn (CODE_FOR_extendqfsf2, to, from, UNKNOWN);\n-\t  return;\n-\t}\n-#endif\n-#ifdef HAVE_extendqfdf2\n-      if (HAVE_extendqfdf2 && from_mode == QFmode && to_mode == DFmode)\n-\t{\n-\t  emit_unop_insn (CODE_FOR_extendqfdf2, to, from, UNKNOWN);\n-\t  return;\n-\t}\n-#endif\n-#ifdef HAVE_extendqfxf2\n-      if (HAVE_extendqfxf2 && from_mode == QFmode && to_mode == XFmode)\n-\t{\n-\t  emit_unop_insn (CODE_FOR_extendqfxf2, to, from, UNKNOWN);\n-\t  return;\n-\t}\n-#endif\n-#ifdef HAVE_extendqftf2\n-      if (HAVE_extendqftf2 && from_mode == QFmode && to_mode == TFmode)\n-\t{\n-\t  emit_unop_insn (CODE_FOR_extendqftf2, to, from, UNKNOWN);\n-\t  return;\n-\t}\n-#endif\n-\n-#ifdef HAVE_extendhftqf2\n-      if (HAVE_extendhftqf2 && from_mode == HFmode && to_mode == TQFmode)\n-\t{\n-\t  emit_unop_insn (CODE_FOR_extendhftqf2, to, from, UNKNOWN);\n-\t  return;\n-\t}\n-#endif\n-\n-#ifdef HAVE_extendhfsf2\n-      if (HAVE_extendhfsf2 && from_mode == HFmode && to_mode == SFmode)\n-\t{\n-\t  emit_unop_insn (CODE_FOR_extendhfsf2, to, from, UNKNOWN);\n-\t  return;\n-\t}\n-#endif\n-#ifdef HAVE_extendhfdf2\n-      if (HAVE_extendhfdf2 && from_mode == HFmode && to_mode == DFmode)\n-\t{\n-\t  emit_unop_insn (CODE_FOR_extendhfdf2, to, from, UNKNOWN);\n-\t  return;\n-\t}\n-#endif\n-#ifdef HAVE_extendhfxf2\n-      if (HAVE_extendhfxf2 && from_mode == HFmode && to_mode == XFmode)\n-\t{\n-\t  emit_unop_insn (CODE_FOR_extendhfxf2, to, from, UNKNOWN);\n-\t  return;\n-\t}\n-#endif\n-#ifdef HAVE_extendhftf2\n-      if (HAVE_extendhftf2 && from_mode == HFmode && to_mode == TFmode)\n-\t{\n-\t  emit_unop_insn (CODE_FOR_extendhftf2, to, from, UNKNOWN);\n-\t  return;\n-\t}\n-#endif\n-\n-#ifdef HAVE_extendsfdf2\n-      if (HAVE_extendsfdf2 && from_mode == SFmode && to_mode == DFmode)\n-\t{\n-\t  emit_unop_insn (CODE_FOR_extendsfdf2, to, from, UNKNOWN);\n-\t  return;\n-\t}\n-#endif\n-#ifdef HAVE_extendsfxf2\n-      if (HAVE_extendsfxf2 && from_mode == SFmode && to_mode == XFmode)\n-\t{\n-\t  emit_unop_insn (CODE_FOR_extendsfxf2, to, from, UNKNOWN);\n-\t  return;\n-\t}\n-#endif\n-#ifdef HAVE_extendsftf2\n-      if (HAVE_extendsftf2 && from_mode == SFmode && to_mode == TFmode)\n-\t{\n-\t  emit_unop_insn (CODE_FOR_extendsftf2, to, from, UNKNOWN);\n-\t  return;\n-\t}\n-#endif\n-#ifdef HAVE_extenddfxf2\n-      if (HAVE_extenddfxf2 && from_mode == DFmode && to_mode == XFmode)\n-\t{\n-\t  emit_unop_insn (CODE_FOR_extenddfxf2, to, from, UNKNOWN);\n-\t  return;\n-\t}\n-#endif\n-#ifdef HAVE_extenddftf2\n-      if (HAVE_extenddftf2 && from_mode == DFmode && to_mode == TFmode)\n-\t{\n-\t  emit_unop_insn (CODE_FOR_extenddftf2, to, from, UNKNOWN);\n-\t  return;\n+\t  /* Try converting directly if the insn is supported.  */\n+\t  if ((code = can_extend_p (to_mode, from_mode, 0))\n+\t      != CODE_FOR_nothing)\n+\t    {\n+\t      emit_unop_insn (code, to, from, UNKNOWN);\n+\t      return;\n+\t    }\n \t}\n-#endif\n-\n+ \n #ifdef HAVE_trunchfqf2\n       if (HAVE_trunchfqf2 && from_mode == HFmode && to_mode == QFmode)\n \t{\n@@ -791,6 +693,36 @@ convert_move (to, from, unsignedp)\n \t  return;\n \t}\n #endif\n+\n+#ifdef HAVE_truncsftqf2\n+      if (HAVE_truncsftqf2 && from_mode == SFmode && to_mode == TQFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_truncsftqf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n+#ifdef HAVE_truncdftqf2\n+      if (HAVE_truncdftqf2 && from_mode == DFmode && to_mode == TQFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_truncdftqf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n+#ifdef HAVE_truncxftqf2\n+      if (HAVE_truncxftqf2 && from_mode == XFmode && to_mode == TQFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_truncxftqf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n+#ifdef HAVE_trunctftqf2\n+      if (HAVE_trunctftqf2 && from_mode == TFmode && to_mode == TQFmode)\n+\t{\n+\t  emit_unop_insn (CODE_FOR_trunctftqf2, to, from, UNKNOWN);\n+\t  return;\n+\t}\n+#endif\n+\n #ifdef HAVE_truncdfsf2\n       if (HAVE_truncdfsf2 && from_mode == DFmode && to_mode == SFmode)\n \t{"}]}