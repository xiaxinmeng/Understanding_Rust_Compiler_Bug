{"sha": "f471fe729f9c1a3a182818c7789a3a1893a00107", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ3MWZlNzI5ZjljMWEzYTE4MjgxOGM3Nzg5YTNhMTg5M2EwMDEwNw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-03-22T11:12:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-03-22T11:12:57Z"}, "message": "gimple.c (gimple_rhs_class_table): POLYNOMIAL_CHREC is not a valid RHS.\n\n2011-03-22  Richard Guenther  <rguenther@suse.de>\n\n\t* gimple.c (gimple_rhs_class_table): POLYNOMIAL_CHREC is not\n\ta valid RHS.  Make DOT_PROD_EXPR and REALIGN_LOAD_EXPR ternary.\n\t* tree-cfg.c (verify_gimple_assign_ternary): Allow DOT_PROD_EXPR\n\tand REALIGN_LOAD_EXPR.\n\t(verify_gimple_assign_single): Do not allow POLYNOMIAL_CHREC,\n\tDOT_PROD_EXPR or REALIGN_LOAD_EXPR.\n\t* expr.c (expand_expr_real_1): Move REALIGN_LOAD_EXPR and\n\tDOT_PROD_EXPR case ...\n\t(expand_expr_real_2): ... here.\n\t* gimple-pretty-print.c (dump_ternary_rhs): Handle DOT_PROD_EXPR\n\tand REALIGN_LOAD_EXPR.\n\t* tree-data-ref.c (split_constant_offset): Bail out for all CHRECs.\n\t* tree-vect-loop.c (vect_model_reduction_cost): Handle ternaries.\n\t(vect_create_epilog_for_reduction): Likewise.\n\t(vectorizable_reduction): Likewise.\n\t* tree-vect-patterns.c (vect_recog_dot_prod_pattern): Adjust.\n\t* tree-vect-stmts.c (vectorizable_load): Likewise.\n\nFrom-SVN: r171284", "tree": {"sha": "3711abed3ce4b0f3906eade82ded0eb8a2423e3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3711abed3ce4b0f3906eade82ded0eb8a2423e3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f471fe729f9c1a3a182818c7789a3a1893a00107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f471fe729f9c1a3a182818c7789a3a1893a00107", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f471fe729f9c1a3a182818c7789a3a1893a00107", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f471fe729f9c1a3a182818c7789a3a1893a00107/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d1d879b1f457f88bde4053b39606f698e7c3cc94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1d879b1f457f88bde4053b39606f698e7c3cc94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1d879b1f457f88bde4053b39606f698e7c3cc94"}], "stats": {"total": 149, "additions": 101, "deletions": 48}, "files": [{"sha": "ab8ea93caf72195b2ab0e78ba1d2d5a8bae658cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f471fe729f9c1a3a182818c7789a3a1893a00107/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f471fe729f9c1a3a182818c7789a3a1893a00107/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f471fe729f9c1a3a182818c7789a3a1893a00107", "patch": "@@ -1,3 +1,23 @@\n+2011-03-22  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gimple.c (gimple_rhs_class_table): POLYNOMIAL_CHREC is not\n+\ta valid RHS.  Make DOT_PROD_EXPR and REALIGN_LOAD_EXPR ternary.\n+\t* tree-cfg.c (verify_gimple_assign_ternary): Allow DOT_PROD_EXPR\n+\tand REALIGN_LOAD_EXPR.\n+\t(verify_gimple_assign_single): Do not allow POLYNOMIAL_CHREC,\n+\tDOT_PROD_EXPR or REALIGN_LOAD_EXPR.\n+\t* expr.c (expand_expr_real_1): Move REALIGN_LOAD_EXPR and\n+\tDOT_PROD_EXPR case ...\n+\t(expand_expr_real_2): ... here.\n+\t* gimple-pretty-print.c (dump_ternary_rhs): Handle DOT_PROD_EXPR\n+\tand REALIGN_LOAD_EXPR.\n+\t* tree-data-ref.c (split_constant_offset): Bail out for all CHRECs.\n+\t* tree-vect-loop.c (vect_model_reduction_cost): Handle ternaries.\n+\t(vect_create_epilog_for_reduction): Likewise.\n+\t(vectorizable_reduction): Likewise.\n+\t* tree-vect-patterns.c (vect_recog_dot_prod_pattern): Adjust.\n+\t* tree-vect-stmts.c (vectorizable_load): Likewise.\n+\n 2011-03-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gimplify.c (gimplify_cond_expr): Gimplify COMPOUND_EXPR conditions."}, {"sha": "2c0378c12e70a87c450c7e116e7190f49a4fd036", "filename": "gcc/expr.c", "status": "modified", "additions": 30, "deletions": 31, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f471fe729f9c1a3a182818c7789a3a1893a00107/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f471fe729f9c1a3a182818c7789a3a1893a00107/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f471fe729f9c1a3a182818c7789a3a1893a00107", "patch": "@@ -8259,6 +8259,36 @@ expand_expr_real_2 (sepops ops, rtx target, enum machine_mode tmode,\n       mode = TYPE_MODE (TREE_TYPE (treeop0));\n       goto binop;\n \n+    case DOT_PROD_EXPR:\n+      {\n+\ttree oprnd0 = treeop0;\n+\ttree oprnd1 = treeop1;\n+\ttree oprnd2 = treeop2;\n+\trtx op2;\n+\n+\texpand_operands (oprnd0, oprnd1, NULL_RTX, &op0, &op1, EXPAND_NORMAL);\n+\top2 = expand_normal (oprnd2);\n+\ttarget = expand_widen_pattern_expr (ops, op0, op1, op2,\n+\t\t\t\t\t    target, unsignedp);\n+\treturn target;\n+      }\n+\n+    case REALIGN_LOAD_EXPR:\n+      {\n+        tree oprnd0 = treeop0;\n+        tree oprnd1 = treeop1;\n+        tree oprnd2 = treeop2;\n+        rtx op2;\n+\n+        this_optab = optab_for_tree_code (code, type, optab_default);\n+        expand_operands (oprnd0, oprnd1, NULL_RTX, &op0, &op1, EXPAND_NORMAL);\n+        op2 = expand_normal (oprnd2);\n+        temp = expand_ternary_op (mode, this_optab, op0, op1, op2,\n+\t\t\t\t  target, unsignedp);\n+        gcc_assert (temp);\n+        return temp;\n+      }\n+\n     default:\n       gcc_unreachable ();\n     }\n@@ -8288,7 +8318,6 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n   int unsignedp;\n   enum machine_mode mode;\n   enum tree_code code = TREE_CODE (exp);\n-  optab this_optab;\n   rtx subtarget, original_target;\n   int ignore;\n   tree context;\n@@ -9697,36 +9726,6 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       return expand_expr_real (treeop0, original_target, tmode,\n \t\t\t       modifier, alt_rtl);\n \n-    case REALIGN_LOAD_EXPR:\n-      {\n-        tree oprnd0 = treeop0;\n-        tree oprnd1 = treeop1;\n-        tree oprnd2 = treeop2;\n-        rtx op2;\n-\n-        this_optab = optab_for_tree_code (code, type, optab_default);\n-        expand_operands (oprnd0, oprnd1, NULL_RTX, &op0, &op1, EXPAND_NORMAL);\n-        op2 = expand_normal (oprnd2);\n-        temp = expand_ternary_op (mode, this_optab, op0, op1, op2,\n-\t\t\t\t  target, unsignedp);\n-        gcc_assert (temp);\n-        return temp;\n-      }\n-\n-    case DOT_PROD_EXPR:\n-      {\n-\ttree oprnd0 = treeop0;\n-\ttree oprnd1 = treeop1;\n-\ttree oprnd2 = treeop2;\n-\trtx op2;\n-\n-\texpand_operands (oprnd0, oprnd1, NULL_RTX, &op0, &op1, EXPAND_NORMAL);\n-\top2 = expand_normal (oprnd2);\n-\ttarget = expand_widen_pattern_expr (&ops, op0, op1, op2,\n-\t\t\t\t\t    target, unsignedp);\n-\treturn target;\n-      }\n-\n     case COMPOUND_LITERAL_EXPR:\n       {\n \t/* Initialize the anonymous variable declared in the compound"}, {"sha": "d841929fd84321dcd502beaa45913cdb3f219112", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f471fe729f9c1a3a182818c7789a3a1893a00107/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f471fe729f9c1a3a182818c7789a3a1893a00107/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=f471fe729f9c1a3a182818c7789a3a1893a00107", "patch": "@@ -408,6 +408,26 @@ dump_ternary_rhs (pretty_printer *buffer, gimple gs, int spc, int flags)\n       dump_generic_node (buffer, gimple_assign_rhs3 (gs), spc, flags, false);\n       break;\n \n+    case DOT_PROD_EXPR:\n+      pp_string (buffer, \"DOT_PROD_EXPR <\");\n+      dump_generic_node (buffer, gimple_assign_rhs1 (gs), spc, flags, false);\n+      pp_string (buffer, \", \");\n+      dump_generic_node (buffer, gimple_assign_rhs2 (gs), spc, flags, false);\n+      pp_string (buffer, \", \");\n+      dump_generic_node (buffer, gimple_assign_rhs3 (gs), spc, flags, false);\n+      pp_string (buffer, \">\");\n+      break;\n+\n+    case REALIGN_LOAD_EXPR:\n+      pp_string (buffer, \"REALIGN_LOAD <\");\n+      dump_generic_node (buffer, gimple_assign_rhs1 (gs), spc, flags, false);\n+      pp_string (buffer, \", \");\n+      dump_generic_node (buffer, gimple_assign_rhs2 (gs), spc, flags, false);\n+      pp_string (buffer, \", \");\n+      dump_generic_node (buffer, gimple_assign_rhs3 (gs), spc, flags, false);\n+      pp_string (buffer, \">\");\n+      break;\n+\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "5af3cd463a19fdd3782153f793a7f9c1f460b502", "filename": "gcc/gimple.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f471fe729f9c1a3a182818c7789a3a1893a00107/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f471fe729f9c1a3a182818c7789a3a1893a00107/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=f471fe729f9c1a3a182818c7789a3a1893a00107", "patch": "@@ -2514,6 +2514,8 @@ get_gimple_rhs_num_ops (enum tree_code code)\n    : (SYM) == TRUTH_NOT_EXPR ? GIMPLE_UNARY_RHS\t\t\t\t    \\\n    : ((SYM) == WIDEN_MULT_PLUS_EXPR\t\t\t\t\t    \\\n       || (SYM) == WIDEN_MULT_MINUS_EXPR\t\t\t\t\t    \\\n+      || (SYM) == DOT_PROD_EXPR\t\t\t\t\t\t    \\\n+      || (SYM) == REALIGN_LOAD_EXPR\t\t\t\t\t    \\\n       || (SYM) == FMA_EXPR) ? GIMPLE_TERNARY_RHS\t\t\t    \\\n    : ((SYM) == COND_EXPR\t\t\t\t\t\t    \\\n       || (SYM) == CONSTRUCTOR\t\t\t\t\t\t    \\\n@@ -2522,10 +2524,7 @@ get_gimple_rhs_num_ops (enum tree_code code)\n       || (SYM) == ADDR_EXPR\t\t\t\t\t\t    \\\n       || (SYM) == WITH_SIZE_EXPR\t\t\t\t\t    \\\n       || (SYM) == SSA_NAME\t\t\t\t\t\t    \\\n-      || (SYM) == POLYNOMIAL_CHREC\t\t\t\t\t    \\\n-      || (SYM) == DOT_PROD_EXPR\t\t\t\t\t\t    \\\n-      || (SYM) == VEC_COND_EXPR\t\t\t\t\t\t    \\\n-      || (SYM) == REALIGN_LOAD_EXPR) ? GIMPLE_SINGLE_RHS\t\t    \\\n+      || (SYM) == VEC_COND_EXPR) ? GIMPLE_SINGLE_RHS\t\t\t    \\\n    : GIMPLE_INVALID_RHS),\n #define END_OF_BASE_TREE_CODES (unsigned char) GIMPLE_INVALID_RHS,\n "}, {"sha": "6fe6b90e5245a4f21d713ecc98139496424d07cd", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f471fe729f9c1a3a182818c7789a3a1893a00107/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f471fe729f9c1a3a182818c7789a3a1893a00107/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=f471fe729f9c1a3a182818c7789a3a1893a00107", "patch": "@@ -3669,6 +3669,11 @@ verify_gimple_assign_ternary (gimple stmt)\n \t}\n       break;\n \n+    case DOT_PROD_EXPR:\n+    case REALIGN_LOAD_EXPR:\n+      /* FIXME.  */\n+      return false;\n+\n     default:\n       gcc_unreachable ();\n     }\n@@ -3799,10 +3804,7 @@ verify_gimple_assign_single (gimple stmt)\n     case OBJ_TYPE_REF:\n     case ASSERT_EXPR:\n     case WITH_SIZE_EXPR:\n-    case POLYNOMIAL_CHREC:\n-    case DOT_PROD_EXPR:\n     case VEC_COND_EXPR:\n-    case REALIGN_LOAD_EXPR:\n       /* FIXME.  */\n       return res;\n "}, {"sha": "62d024d531634f5d295c9d2d083e58cb8fb87e0d", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f471fe729f9c1a3a182818c7789a3a1893a00107/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f471fe729f9c1a3a182818c7789a3a1893a00107/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=f471fe729f9c1a3a182818c7789a3a1893a00107", "patch": "@@ -686,7 +686,7 @@ split_constant_offset (tree exp, tree *var, tree *off)\n   *off = ssize_int (0);\n   STRIP_NOPS (exp);\n \n-  if (automatically_generated_chrec_p (exp))\n+  if (tree_is_chrec (exp))\n     return;\n \n   otype = TREE_TYPE (exp);"}, {"sha": "690d9b7401eabc309709a7aa6068209ef2ed3460", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f471fe729f9c1a3a182818c7789a3a1893a00107/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f471fe729f9c1a3a182818c7789a3a1893a00107/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=f471fe729f9c1a3a182818c7789a3a1893a00107", "patch": "@@ -2498,6 +2498,9 @@ vect_model_reduction_cost (stmt_vec_info stmt_info, enum tree_code reduc_code,\n     case GIMPLE_BINARY_RHS:\n       reduction_op = gimple_assign_rhs2 (stmt);\n       break;\n+    case GIMPLE_TERNARY_RHS:\n+      reduction_op = gimple_assign_rhs3 (stmt);\n+      break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -3191,7 +3194,7 @@ vect_create_epilog_for_reduction (VEC (tree, heap) *vect_defs, gimple stmt,\n     {\n     case GIMPLE_SINGLE_RHS:\n       gcc_assert (TREE_OPERAND_LENGTH (gimple_assign_rhs1 (stmt))\n-                                       == ternary_op);\n+\t\t  == ternary_op);\n       reduction_op = TREE_OPERAND (gimple_assign_rhs1 (stmt), reduc_index);\n       break;\n     case GIMPLE_UNARY_RHS:\n@@ -3201,6 +3204,9 @@ vect_create_epilog_for_reduction (VEC (tree, heap) *vect_defs, gimple stmt,\n       reduction_op = reduc_index ?\n                      gimple_assign_rhs2 (stmt) : gimple_assign_rhs1 (stmt);\n       break;\n+    case GIMPLE_TERNARY_RHS:\n+      reduction_op = gimple_op (stmt, reduc_index + 1);\n+      break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -4026,6 +4032,15 @@ vectorizable_reduction (gimple stmt, gimple_stmt_iterator *gsi,\n       ops[1] = gimple_assign_rhs2 (stmt);\n       break;\n \n+    case GIMPLE_TERNARY_RHS:\n+      code = gimple_assign_rhs_code (stmt);\n+      op_type = TREE_CODE_LENGTH (code);\n+      gcc_assert (op_type == ternary_op);\n+      ops[0] = gimple_assign_rhs1 (stmt);\n+      ops[1] = gimple_assign_rhs2 (stmt);\n+      ops[2] = gimple_assign_rhs3 (stmt);\n+      break;\n+\n     case GIMPLE_UNARY_RHS:\n       return false;\n "}, {"sha": "c241ee028d6b77bdbc4f1be1fab5cf6250cb61d4", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f471fe729f9c1a3a182818c7789a3a1893a00107/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f471fe729f9c1a3a182818c7789a3a1893a00107/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=f471fe729f9c1a3a182818c7789a3a1893a00107", "patch": "@@ -179,7 +179,7 @@ vect_recog_dot_prod_pattern (gimple last_stmt, tree *type_in, tree *type_out)\n   tree prod_type;\n   loop_vec_info loop_info = STMT_VINFO_LOOP_VINFO (stmt_vinfo);\n   struct loop *loop = LOOP_VINFO_LOOP (loop_info);\n-  tree var, rhs;\n+  tree var;\n \n   if (!is_gimple_assign (last_stmt))\n     return NULL;\n@@ -311,8 +311,8 @@ vect_recog_dot_prod_pattern (gimple last_stmt, tree *type_in, tree *type_out)\n \n   /* Pattern detected. Create a stmt to be used to replace the pattern: */\n   var = vect_recog_temp_ssa_var (type, NULL);\n-  rhs =\tbuild3 (DOT_PROD_EXPR, type, oprnd00, oprnd01, oprnd1),\n-  pattern_stmt = gimple_build_assign (var, rhs);\n+  pattern_stmt = gimple_build_assign_with_ops3 (DOT_PROD_EXPR, var,\n+\t\t\t\t\t\toprnd00, oprnd01, oprnd1);\n \n   if (vect_print_dump_info (REPORT_DETAILS))\n     {"}, {"sha": "069a8eeeabd43d97977893ad40725a4758fd4588", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f471fe729f9c1a3a182818c7789a3a1893a00107/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f471fe729f9c1a3a182818c7789a3a1893a00107/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=f471fe729f9c1a3a182818c7789a3a1893a00107", "patch": "@@ -4236,15 +4236,13 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t  if (alignment_support_scheme == dr_explicit_realign_optimized\n \t      || alignment_support_scheme == dr_explicit_realign)\n \t    {\n-\t      tree tmp;\n-\n \t      lsq = gimple_assign_lhs (new_stmt);\n \t      if (!realignment_token)\n \t\trealignment_token = dataref_ptr;\n \t      vec_dest = vect_create_destination_var (scalar_dest, vectype);\n-\t      tmp = build3 (REALIGN_LOAD_EXPR, vectype, msq, lsq,\n-\t\t\t    realignment_token);\n-\t      new_stmt = gimple_build_assign (vec_dest, tmp);\n+\t      new_stmt\n+\t\t= gimple_build_assign_with_ops3 (REALIGN_LOAD_EXPR, vec_dest,\n+\t\t\t\t\t\t msq, lsq, realignment_token);\n \t      new_temp = make_ssa_name (vec_dest, new_stmt);\n \t      gimple_assign_set_lhs (new_stmt, new_temp);\n \t      vect_finish_stmt_generation (stmt, new_stmt, gsi);"}]}