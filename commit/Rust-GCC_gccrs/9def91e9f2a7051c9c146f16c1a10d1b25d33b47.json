{"sha": "9def91e9f2a7051c9c146f16c1a10d1b25d33b47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRlZjkxZTlmMmE3MDUxYzljMTQ2ZjE2YzFhMTBkMWIyNWQzM2I0Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-19T21:56:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-19T21:56:20Z"}, "message": "c: Fix up cfun->function_end_locus from the C FE [PR94029]\n\nOn the following testcase we ICE because while\n      DECL_STRUCT_FUNCTION (current_function_decl)->function_start_locus\n        = c_parser_peek_token (parser)->location;\nand similarly DECL_SOURCE_LOCATION (fndecl) is set from some token's\nlocation, the end is set as:\n  /* Store the end of the function, so that we get good line number\n     info for the epilogue.  */\n  cfun->function_end_locus = input_location;\nand the thing is that input_location is only very rarely set in the C FE\n(the primary spot that changes it is the cb_line_change/fe_file_change).\nWhich means, e.g. for pretty much all C functions that are on a single line,\nfunction_start_locus column is > than function_end_locus column, and the\ntestcase even has smaller line in function_end_locus because cb_line_change\nisn't performed while parsing multi-line arguments of a function-like macro.\n\nAttached are two possible fixes to achieve what the C++ FE does, in\nparticular that cfun->function_end_locus is the locus of the closing } of\nthe function.  The first one updates input_location when we see a closing }\nof a compound statement (though any, not just the function body) and thus\ninput_location in the finish_function call is what we need.\nThe second instead propagates the location_t from the parsing of the\noutermost compound statement (the function body) to finish_function.\nThe second one is this version.\n\n2020-03-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR gcov-profile/94029\n\t* c-tree.h (finish_function): Add location_t argument defaulted to\n\tinput_location.\n\t* c-parser.c (c_parser_compound_statement): Add endlocp argument and\n\tset it to the locus of closing } if non-NULL.\n\t(c_parser_compound_statement_nostart): Return locus of closing }.\n\t(c_parser_parse_rtl_body): Likewise.\n\t(c_parser_declaration_or_fndef): Propagate locus of closing } to\n\tfinish_function.\n\t* c-decl.c (finish_function): Add end_loc argument, use it instead of\n\tinput_location to set function_end_locus.\n\n\t* gcc.misc-tests/gcov-pr94029.c: New test.", "tree": {"sha": "53ce53c9c692194b29966258b3d4c0ef7ea4c3d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53ce53c9c692194b29966258b3d4c0ef7ea4c3d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9def91e9f2a7051c9c146f16c1a10d1b25d33b47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9def91e9f2a7051c9c146f16c1a10d1b25d33b47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9def91e9f2a7051c9c146f16c1a10d1b25d33b47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9def91e9f2a7051c9c146f16c1a10d1b25d33b47/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37482edc3f7f19110da7178d0d4c3003ea5272f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37482edc3f7f19110da7178d0d4c3003ea5272f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37482edc3f7f19110da7178d0d4c3003ea5272f3"}], "stats": {"total": 90, "additions": 66, "deletions": 24}, "files": [{"sha": "c0b65a5b91d368bfdaa204da5684b5318870f2a5", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9def91e9f2a7051c9c146f16c1a10d1b25d33b47/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9def91e9f2a7051c9c146f16c1a10d1b25d33b47/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=9def91e9f2a7051c9c146f16c1a10d1b25d33b47", "patch": "@@ -1,3 +1,17 @@\n+2020-03-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR gcov-profile/94029\n+\t* c-tree.h (finish_function): Add location_t argument defaulted to\n+\tinput_location.\n+\t* c-parser.c (c_parser_compound_statement): Add endlocp argument and\n+\tset it to the locus of closing } if non-NULL.\n+\t(c_parser_compound_statement_nostart): Return locus of closing }.\n+\t(c_parser_parse_rtl_body): Likewise.\n+\t(c_parser_declaration_or_fndef): Propagate locus of closing } to\n+\tfinish_function.\n+\t* c-decl.c (finish_function): Add end_loc argument, use it instead of\n+\tinput_location to set function_end_locus.\n+\n 2020-03-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/94172"}, {"sha": "80fe3186759adbbc0dc05ffcadb82f06612d05b7", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9def91e9f2a7051c9c146f16c1a10d1b25d33b47/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9def91e9f2a7051c9c146f16c1a10d1b25d33b47/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=9def91e9f2a7051c9c146f16c1a10d1b25d33b47", "patch": "@@ -9851,7 +9851,7 @@ temp_pop_parm_decls (void)\n    This is called after parsing the body of the function definition.  */\n \n void\n-finish_function (void)\n+finish_function (location_t end_loc)\n {\n   tree fndecl = current_function_decl;\n   \n@@ -9947,7 +9947,7 @@ finish_function (void)\n \n   /* Store the end of the function, so that we get good line number\n      info for the epilogue.  */\n-  cfun->function_end_locus = input_location;\n+  cfun->function_end_locus = end_loc;\n \n   /* Finalize the ELF visibility for the function.  */\n   c_determine_visibility (fndecl);"}, {"sha": "4b068a938fbfbd1aca7e42f547d29d276bdc18e3", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9def91e9f2a7051c9c146f16c1a10d1b25d33b47/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9def91e9f2a7051c9c146f16c1a10d1b25d33b47/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=9def91e9f2a7051c9c146f16c1a10d1b25d33b47", "patch": "@@ -1487,8 +1487,8 @@ static struct c_expr c_parser_braced_init (c_parser *, tree, bool,\n static void c_parser_initelt (c_parser *, struct obstack *);\n static void c_parser_initval (c_parser *, struct c_expr *,\n \t\t\t      struct obstack *);\n-static tree c_parser_compound_statement (c_parser *);\n-static void c_parser_compound_statement_nostart (c_parser *);\n+static tree c_parser_compound_statement (c_parser *, location_t * = NULL);\n+static location_t c_parser_compound_statement_nostart (c_parser *);\n static void c_parser_label (c_parser *);\n static void c_parser_statement (c_parser *, bool *, location_t * = NULL);\n static void c_parser_statement_after_labels (c_parser *, bool *,\n@@ -1583,8 +1583,7 @@ static void c_parser_objc_at_synthesize_declaration (c_parser *);\n static void c_parser_objc_at_dynamic_declaration (c_parser *);\n static bool c_parser_objc_diagnose_bad_element_prefix\n   (c_parser *, struct c_declspecs *);\n-\n-static void c_parser_parse_rtl_body (c_parser *parser, char *start_with_pass);\n+static location_t c_parser_parse_rtl_body (c_parser *, char *);\n \n /* Parse a translation unit (C90 6.7, C99 6.9, C11 6.9).\n \n@@ -2472,12 +2471,13 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n \tc_finish_oacc_routine (oacc_routine_data, current_function_decl, true);\n       DECL_STRUCT_FUNCTION (current_function_decl)->function_start_locus\n \t= c_parser_peek_token (parser)->location;\n+      location_t endloc;\n \n       /* If the definition was marked with __RTL, use the RTL parser now,\n \t consuming the function body.  */\n       if (specs->declspec_il == cdil_rtl)\n \t{\n-\t  c_parser_parse_rtl_body (parser, specs->gimple_or_rtl_pass);\n+\t  endloc = c_parser_parse_rtl_body (parser, specs->gimple_or_rtl_pass);\n \n \t  /* Normally, store_parm_decls sets next_is_function_body,\n \t     anticipating a function body.  We need a push_scope/pop_scope\n@@ -2486,7 +2486,7 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n \t  push_scope ();\n \t  pop_scope ();\n \n-\t  finish_function ();\n+\t  finish_function (endloc);\n \t  return;\n \t}\n       /* If the definition was marked with __GIMPLE then parse the\n@@ -2499,9 +2499,11 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n \t\t\t\t      specs->declspec_il,\n \t\t\t\t      specs->entry_bb_count);\n \t  in_late_binary_op = saved;\n+\t  struct function *fun = DECL_STRUCT_FUNCTION (current_function_decl);\n+\t  endloc = fun->function_start_locus;\n \t}\n       else\n-\tfnbody = c_parser_compound_statement (parser);\n+\tfnbody = c_parser_compound_statement (parser, &endloc);\n       tree fndecl = current_function_decl;\n       if (nested)\n \t{\n@@ -2512,15 +2514,15 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n \t     by initializer_constant_valid_p.  See gcc.dg/nested-fn-2.c.  */\n \t  DECL_STATIC_CHAIN (decl) = 1;\n \t  add_stmt (fnbody);\n-\t  finish_function ();\n+\t  finish_function (endloc);\n \t  c_pop_function_context ();\n \t  add_stmt (build_stmt (DECL_SOURCE_LOCATION (decl), DECL_EXPR, decl));\n \t}\n       else\n \t{\n \t  if (fnbody)\n \t    add_stmt (fnbody);\n-\t  finish_function ();\n+\t  finish_function (endloc);\n \t}\n       /* Get rid of the empty stmt list for GIMPLE/RTL.  */\n       if (specs->declspec_il != cdil_none)\n@@ -5599,7 +5601,7 @@ c_parser_initval (c_parser *parser, struct c_expr *after,\n      cancellation-point-directive  */\n \n static tree\n-c_parser_compound_statement (c_parser *parser)\n+c_parser_compound_statement (c_parser *parser, location_t *endlocp)\n {\n   tree stmt;\n   location_t brace_loc;\n@@ -5613,7 +5615,9 @@ c_parser_compound_statement (c_parser *parser)\n       return error_mark_node;\n     }\n   stmt = c_begin_compound_stmt (true);\n-  c_parser_compound_statement_nostart (parser);\n+  location_t end_loc = c_parser_compound_statement_nostart (parser);\n+  if (endlocp)\n+    *endlocp = end_loc;\n \n   return c_end_compound_stmt (brace_loc, stmt, true);\n }\n@@ -5622,7 +5626,7 @@ c_parser_compound_statement (c_parser *parser)\n    used for parsing both compound statements and statement expressions\n    (which follow different paths to handling the opening).  */\n \n-static void\n+static location_t\n c_parser_compound_statement_nostart (c_parser *parser)\n {\n   bool last_stmt = false;\n@@ -5631,9 +5635,10 @@ c_parser_compound_statement_nostart (c_parser *parser)\n   location_t label_loc = UNKNOWN_LOCATION;  /* Quiet warning.  */\n   if (c_parser_next_token_is (parser, CPP_CLOSE_BRACE))\n     {\n-      add_debug_begin_stmt (c_parser_peek_token (parser)->location);\n+      location_t endloc = c_parser_peek_token (parser)->location;\n+      add_debug_begin_stmt (endloc);\n       c_parser_consume_token (parser);\n-      return;\n+      return endloc;\n     }\n   mark_valid_location_for_stdc_pragma (true);\n   if (c_parser_next_token_is_keyword (parser, RID_LABEL))\n@@ -5674,8 +5679,9 @@ c_parser_compound_statement_nostart (c_parser *parser)\n     {\n       mark_valid_location_for_stdc_pragma (save_valid_for_pragma);\n       c_parser_error (parser, \"expected declaration or statement\");\n+      location_t endloc = c_parser_peek_token (parser)->location;\n       c_parser_consume_token (parser);\n-      return;\n+      return endloc;\n     }\n   while (c_parser_next_token_is_not (parser, CPP_CLOSE_BRACE))\n     {\n@@ -5773,15 +5779,15 @@ c_parser_compound_statement_nostart (c_parser *parser)\n \t{\n \t  mark_valid_location_for_stdc_pragma (save_valid_for_pragma);\n \t  c_parser_error (parser, \"expected declaration or statement\");\n-\t  return;\n+\t  return c_parser_peek_token (parser)->location;\n \t}\n       else if (c_parser_next_token_is_keyword (parser, RID_ELSE))\n         {\n           if (parser->in_if_block)\n             {\n \t      mark_valid_location_for_stdc_pragma (save_valid_for_pragma);\n \t      error_at (loc, \"expected %<}%> before %<else%>\");\n-              return;\n+\t      return c_parser_peek_token (parser)->location;\n             }\n           else\n             {\n@@ -5804,9 +5810,11 @@ c_parser_compound_statement_nostart (c_parser *parser)\n     }\n   if (last_label)\n     error_at (label_loc, \"label at end of compound statement\");\n+  location_t endloc = c_parser_peek_token (parser)->location;\n   c_parser_consume_token (parser);\n   /* Restore the value we started with.  */\n   mark_valid_location_for_stdc_pragma (save_valid_for_pragma);\n+  return endloc;\n }\n \n /* Parse all consecutive labels, possibly preceded by standard\n@@ -21725,13 +21733,13 @@ c_parse_file (void)\n \n    Take ownership of START_WITH_PASS, if non-NULL.  */\n \n-void\n+location_t\n c_parser_parse_rtl_body (c_parser *parser, char *start_with_pass)\n {\n   if (!c_parser_require (parser, CPP_OPEN_BRACE, \"expected %<{%>\"))\n     {\n       free (start_with_pass);\n-      return;\n+      return c_parser_peek_token (parser)->location;\n     }\n \n   location_t start_loc = c_parser_peek_token (parser)->location;\n@@ -21753,7 +21761,7 @@ c_parser_parse_rtl_body (c_parser *parser, char *start_with_pass)\n \tcase CPP_EOF:\n \t  error_at (start_loc, \"no closing brace\");\n \t  free (start_with_pass);\n-\t  return;\n+\t  return c_parser_peek_token (parser)->location;\n \tdefault:\n \t  break;\n \t}\n@@ -21771,12 +21779,13 @@ c_parser_parse_rtl_body (c_parser *parser, char *start_with_pass)\n   if (!read_rtl_function_body_from_file_range (start_loc, end_loc))\n     {\n       free (start_with_pass);\n-      return;\n+      return end_loc;\n     }\n \n  /*  Run the backend on the cfun created above, transferring ownership of\n      START_WITH_PASS.  */\n   run_rtl_passes (start_with_pass);\n+  return end_loc;\n }\n \n #include \"gt-c-c-parser.h\""}, {"sha": "2015827dbb1589e48fa26737e68a40b195befb80", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9def91e9f2a7051c9c146f16c1a10d1b25d33b47/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9def91e9f2a7051c9c146f16c1a10d1b25d33b47/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=9def91e9f2a7051c9c146f16c1a10d1b25d33b47", "patch": "@@ -580,7 +580,7 @@ extern bool c_check_switch_jump_warnings (struct c_spot_bindings *,\n \t\t\t\t\t  location_t, location_t);\n extern void finish_decl (tree, location_t, tree, tree, tree);\n extern tree finish_enum (tree, tree, tree);\n-extern void finish_function (void);\n+extern void finish_function (location_t = input_location);\n extern tree finish_struct (location_t, tree, tree, tree,\n \t\t\t   class c_struct_parse_info *);\n extern tree c_simulate_enum_decl (location_t, const char *,"}, {"sha": "bde605d2b2fb40ad02917ed6373f31212ed931e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9def91e9f2a7051c9c146f16c1a10d1b25d33b47/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9def91e9f2a7051c9c146f16c1a10d1b25d33b47/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9def91e9f2a7051c9c146f16c1a10d1b25d33b47", "patch": "@@ -1,3 +1,8 @@\n+2020-03-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR gcov-profile/94029\n+\t* gcc.misc-tests/gcov-pr94029.c: New test.\n+\n 2020-03-19  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/92372"}, {"sha": "84d9b9b2749a142ba8183ff26a0d4702449e6d41", "filename": "gcc/testsuite/gcc.misc-tests/gcov-pr94029.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9def91e9f2a7051c9c146f16c1a10d1b25d33b47/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-pr94029.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9def91e9f2a7051c9c146f16c1a10d1b25d33b47/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-pr94029.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-pr94029.c?ref=9def91e9f2a7051c9c146f16c1a10d1b25d33b47", "patch": "@@ -0,0 +1,14 @@\n+/* PR gcov-profile/94029 */\n+/* { dg-options \"-ftest-coverage\" } */\n+/* { dg-do compile } */\n+\n+#define impl_test(name) void test_##name() { }\n+impl_test(t1\n+) impl_test(t2)\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { run-gcov remove-gcda gcov-pr94029.c } } */"}]}