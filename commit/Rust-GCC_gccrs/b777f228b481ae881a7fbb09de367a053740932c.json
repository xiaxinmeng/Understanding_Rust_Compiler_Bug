{"sha": "b777f228b481ae881a7fbb09de367a053740932c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc3N2YyMjhiNDgxYWU4ODFhN2ZiYjA5ZGUzNjdhMDUzNzQwOTMyYw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-08-17T14:24:26Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-08-20T08:07:03Z"}, "message": "gcov: fix output location for JSON mode.\n\n\tPR gcov-profile/89961\n\ngcc/ChangeLog:\n\n\t* gcov.c (make_gcov_file_name): Rewrite using std::string.\n\t(mangle_name): Simplify, do not used the second argument.\n\t(strip_extention): New function.\n\t(get_md5sum): Likewise.\n\t(get_gcov_intermediate_filename): Handle properly -p and -x\n\toptions.\n\t(output_gcov_file): Use string type.\n\t(generate_results): Likewise.\n\t(md5sum_to_hex): Remove.", "tree": {"sha": "2f2a2fe288ee27214c62e02e9ac320d6b35134ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f2a2fe288ee27214c62e02e9ac320d6b35134ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b777f228b481ae881a7fbb09de367a053740932c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b777f228b481ae881a7fbb09de367a053740932c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b777f228b481ae881a7fbb09de367a053740932c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b777f228b481ae881a7fbb09de367a053740932c/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2883be3c8e7b5fd17925ea67b99b7330e1a4f72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2883be3c8e7b5fd17925ea67b99b7330e1a4f72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2883be3c8e7b5fd17925ea67b99b7330e1a4f72"}], "stats": {"total": 158, "additions": 79, "deletions": 79}, "files": [{"sha": "cf0a49d8c30562233516d62da571d0ee3a487a47", "filename": "gcc/gcov.c", "status": "modified", "additions": 79, "deletions": 79, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b777f228b481ae881a7fbb09de367a053740932c/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b777f228b481ae881a7fbb09de367a053740932c/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=b777f228b481ae881a7fbb09de367a053740932c", "patch": "@@ -662,8 +662,8 @@ static void accumulate_line_counts (source_info *);\n static void output_gcov_file (const char *, source_info *);\n static int output_branch_count (FILE *, int, const arc_info *);\n static void output_lines (FILE *, const source_info *);\n-static char *make_gcov_file_name (const char *, const char *);\n-static char *mangle_name (const char *, char *);\n+static string make_gcov_file_name (const char *, const char *);\n+static char *mangle_name (const char *);\n static void release_structures (void);\n extern int main (int, char **);\n \n@@ -1134,6 +1134,41 @@ output_intermediate_json_line (json::array *object,\n   object->append (lineo);\n }\n \n+/* Strip filename extension in STR.  */\n+\n+static string\n+strip_extention (string str)\n+{\n+  string::size_type pos = str.rfind ('.');\n+  if (pos != string::npos)\n+    str = str.substr (0, pos);\n+\n+  return str;\n+}\n+\n+/* Calcualte md5sum for INPUT string and return it in hex string format.  */\n+\n+static string\n+get_md5sum (const char *input)\n+{\n+  md5_ctx ctx;\n+  char md5sum[16];\n+  string str;\n+\n+  md5_init_ctx (&ctx);\n+  md5_process_bytes (input, strlen (input), &ctx);\n+  md5_finish_ctx (&ctx, md5sum);\n+\n+  for (unsigned i = 0; i < 16; i++)\n+    {\n+      char b[3];\n+      sprintf (b, \"%02x\", (unsigned char)md5sum[i]);\n+      str += b;\n+    }\n+\n+  return str;\n+}\n+\n /* Get the name of the gcov file.  The return value must be free'd.\n \n    It appends the '.gcov' extension to the *basename* of the file.\n@@ -1143,20 +1178,26 @@ output_intermediate_json_line (json::array *object,\n    input: foo.da,       output: foo.da.gcov\n    input: a/b/foo.cc,   output: foo.cc.gcov  */\n \n-static char *\n-get_gcov_intermediate_filename (const char *file_name)\n+static string\n+get_gcov_intermediate_filename (const char *input_file_name)\n {\n-  const char *gcov = \".gcov.json.gz\";\n-  char *result;\n-  const char *cptr;\n+  string base = basename (input_file_name);\n+  string str = strip_extention (base);\n \n-  /* Find the 'basename'.  */\n-  cptr = lbasename (file_name);\n-\n-  result = XNEWVEC (char, strlen (cptr) + strlen (gcov) + 1);\n-  sprintf (result, \"%s%s\", cptr, gcov);\n+  if (flag_hash_filenames)\n+    {\n+      str += \"##\";\n+      str += get_md5sum (input_file_name);\n+    }\n+  else if (flag_preserve_paths && base != input_file_name)\n+    {\n+      str += \"##\";\n+      str += mangle_path (input_file_name);\n+      str = strip_extention (str);\n+    }\n \n-  return result;\n+  str += \".gcov.json.gz\";\n+  return str.c_str ();\n }\n \n /* Output the result in JSON intermediate format.\n@@ -1416,7 +1457,9 @@ process_all_functions (void)\n static void\n output_gcov_file (const char *file_name, source_info *src)\n {\n-  char *gcov_file_name = make_gcov_file_name (file_name, src->coverage.name);\n+  string gcov_file_name_str\n+    = make_gcov_file_name (file_name, src->coverage.name);\n+  const char *gcov_file_name = gcov_file_name_str.c_str ();\n \n   if (src->coverage.lines)\n     {\n@@ -1438,13 +1481,12 @@ output_gcov_file (const char *file_name, source_info *src)\n       unlink (gcov_file_name);\n       fnotice (stdout, \"Removing '%s'\\n\", gcov_file_name);\n     }\n-  free (gcov_file_name);\n }\n \n static void\n generate_results (const char *file_name)\n {\n-  char *gcov_intermediate_filename;\n+  string gcov_intermediate_filename;\n \n   for (vector<function_info *>::iterator it = functions.begin ();\n        it != functions.end (); it++)\n@@ -1547,19 +1589,21 @@ generate_results (const char *file_name)\n \t  root->print (&pp);\n \t  pp_formatted_text (&pp);\n \n-\t  gzFile output = gzopen (gcov_intermediate_filename, \"w\");\n+\t  fnotice (stdout, \"Creating '%s'\\n\",\n+\t\t   gcov_intermediate_filename.c_str ());\n+\t  gzFile output = gzopen (gcov_intermediate_filename.c_str (), \"w\");\n \t  if (output == NULL)\n \t    {\n \t      fnotice (stderr, \"Cannot open JSON output file %s\\n\",\n-\t\t       gcov_intermediate_filename);\n+\t\t       gcov_intermediate_filename.c_str ());\n \t      return;\n \t    }\n \n \t  if (gzputs (output, pp_formatted_text (&pp)) == EOF\n \t      || gzclose (output))\n \t    {\n \t      fnotice (stderr, \"Error writing JSON output file %s\\n\",\n-\t\t       gcov_intermediate_filename);\n+\t\t       gcov_intermediate_filename.c_str ());\n \t      return;\n \t    }\n \t}\n@@ -2546,15 +2590,6 @@ canonicalize_name (const char *name)\n   return result;\n }\n \n-/* Print hex representation of 16 bytes from SUM and write it to BUFFER.  */\n-\n-static void\n-md5sum_to_hex (const char *sum, char *buffer)\n-{\n-  for (unsigned i = 0; i < 16; i++)\n-    sprintf (buffer + (2 * i), \"%02x\", (unsigned char)sum[i]);\n-}\n-\n /* Generate an output file name. INPUT_NAME is the canonicalized main\n    input file and SRC_NAME is the canonicalized file name.\n    LONG_OUTPUT_NAMES and PRESERVE_PATHS affect name generation.  With\n@@ -2567,77 +2602,42 @@ md5sum_to_hex (const char *sum, char *buffer)\n    component.  (Remember, the canonicalized name will already have\n    elided '.' components and converted \\\\ separators.)  */\n \n-static char *\n+static string\n make_gcov_file_name (const char *input_name, const char *src_name)\n {\n-  char *ptr;\n-  char *result;\n-\n-  if (flag_long_names && input_name && strcmp (src_name, input_name))\n-    {\n-      /* Generate the input filename part.  */\n-      result = XNEWVEC (char, strlen (input_name) + strlen (src_name) + 10);\n-\n-      ptr = result;\n-      ptr = mangle_name (input_name, ptr);\n-      ptr[0] = ptr[1] = '#';\n-      ptr += 2;\n-    }\n-  else\n-    {\n-      result = XNEWVEC (char, strlen (src_name) + 10);\n-      ptr = result;\n-    }\n-\n-  ptr = mangle_name (src_name, ptr);\n-  strcpy (ptr, \".gcov\");\n+  string str;\n \n   /* When hashing filenames, we shorten them by only using the filename\n      component and appending a hash of the full (mangled) pathname.  */\n   if (flag_hash_filenames)\n+    str = (string (mangle_name (src_name)) + \"##\"\n+\t   + get_md5sum (src_name) + \".gcov\");\n+  else\n     {\n-      md5_ctx ctx;\n-      char md5sum[16];\n-      char md5sum_hex[33];\n-\n-      md5_init_ctx (&ctx);\n-      md5_process_bytes (src_name, strlen (src_name), &ctx);\n-      md5_finish_ctx (&ctx, md5sum);\n-      md5sum_to_hex (md5sum, md5sum_hex);\n-      free (result);\n+      if (flag_long_names && input_name && strcmp (src_name, input_name) != 0)\n+\t{\n+\t  str += mangle_name (input_name);\n+\t  str += \"##\";\n+\t}\n \n-      result = XNEWVEC (char, strlen (src_name) + 50);\n-      ptr = result;\n-      ptr = mangle_name (src_name, ptr);\n-      ptr[0] = ptr[1] = '#';\n-      ptr += 2;\n-      memcpy (ptr, md5sum_hex, 32);\n-      ptr += 32;\n-      strcpy (ptr, \".gcov\");\n+      str += mangle_name (src_name);\n+      str += \".gcov\";\n     }\n \n-  return result;\n+  return str;\n }\n \n /* Mangle BASE name, copy it at the beginning of PTR buffer and\n    return address of the \\0 character of the buffer.  */\n \n static char *\n-mangle_name (char const *base, char *ptr)\n+mangle_name (char const *base)\n {\n-  size_t len;\n-\n   /* Generate the source filename part.  */\n   if (!flag_preserve_paths)\n-    base = lbasename (base);\n+    return xstrdup (lbasename (base));\n   else\n-    base = mangle_path (base);\n-\n-  len = strlen (base);\n-  memcpy (ptr, base, len);\n-  ptr += len;\n-\n-  return ptr;\n+    return mangle_path (base);\n }\n \n /* Scan through the bb_data for each line in the block, increment"}]}