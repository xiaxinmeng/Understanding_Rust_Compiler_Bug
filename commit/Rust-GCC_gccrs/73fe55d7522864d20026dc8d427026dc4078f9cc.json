{"sha": "73fe55d7522864d20026dc8d427026dc4078f9cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNmZTU1ZDc1MjI4NjRkMjAwMjZkYzhkNDI3MDI2ZGM0MDc4ZjljYw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-02-06T20:46:00Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-02-06T20:46:00Z"}, "message": "re PR go/89199 (libgo regression in implementation of CompareAndSwap functions resulting in intermittent testcase failures on ppc64le power9 after r268458)\n\n\tPR go/89199\n    sync/atomic: use strong form of atomic_compare_exchange_n\n    \n    In the recent change to use atomic_compare_exchange_n I thought we\n    could use the weak form, which can spuriously fail. But that is not\n    how it is implemented in the gc library, and it is not what the rest\n    of the library expects.\n    \n    Thanks to Lynn Boger for identifying the problem.\n    \n    Fixes https://gcc.gnu.org/PR89199\n    \n    Reviewed-on: https://go-review.googlesource.com/c/161359\n\nFrom-SVN: r268591", "tree": {"sha": "e70328d426f425d14f9064eb8c7cc43c12f1772f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e70328d426f425d14f9064eb8c7cc43c12f1772f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73fe55d7522864d20026dc8d427026dc4078f9cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73fe55d7522864d20026dc8d427026dc4078f9cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73fe55d7522864d20026dc8d427026dc4078f9cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73fe55d7522864d20026dc8d427026dc4078f9cc/comments", "author": null, "committer": null, "parents": [{"sha": "16e2bcd5b9371ca6062bf035bc1d6b88540841d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16e2bcd5b9371ca6062bf035bc1d6b88540841d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16e2bcd5b9371ca6062bf035bc1d6b88540841d1"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "63499b36d195029ca532dfbefb7b616515afd005", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73fe55d7522864d20026dc8d427026dc4078f9cc/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73fe55d7522864d20026dc8d427026dc4078f9cc/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=73fe55d7522864d20026dc8d427026dc4078f9cc", "patch": "@@ -1,4 +1,4 @@\n-74ffeddbe6fef446129af65581b3a9094715bc22\n+d89db31db68d09aa13a6137122cc096c1d92597b\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "90a4ff3f9224639a70ea3d4f5bba4f3dd14df50c", "filename": "libgo/go/sync/atomic/atomic.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73fe55d7522864d20026dc8d427026dc4078f9cc/libgo%2Fgo%2Fsync%2Fatomic%2Fatomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73fe55d7522864d20026dc8d427026dc4078f9cc/libgo%2Fgo%2Fsync%2Fatomic%2Fatomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsync%2Fatomic%2Fatomic.c?ref=73fe55d7522864d20026dc8d427026dc4078f9cc", "patch": "@@ -69,7 +69,7 @@ _Bool CompareAndSwapInt32 (int32_t *, int32_t, int32_t)\n _Bool\n CompareAndSwapInt32 (int32_t *val, int32_t old, int32_t new)\n {\n-  return __atomic_compare_exchange_n (val, &old, new, true, __ATOMIC_SEQ_CST,\n+  return __atomic_compare_exchange_n (val, &old, new, false, __ATOMIC_SEQ_CST,\n \t\t\t\t      __ATOMIC_RELAXED);\n }\n \n@@ -82,7 +82,7 @@ CompareAndSwapInt64 (int64_t *val, int64_t old, int64_t new)\n {\n   if (((uintptr_t) val & 7) != 0)\n     val = NULL;\n-  return __atomic_compare_exchange_n (val, &old, new, true, __ATOMIC_SEQ_CST,\n+  return __atomic_compare_exchange_n (val, &old, new, false, __ATOMIC_SEQ_CST,\n \t\t\t\t      __ATOMIC_RELAXED);\n }\n \n@@ -93,7 +93,7 @@ _Bool CompareAndSwapUint32 (uint32_t *, uint32_t, uint32_t)\n _Bool\n CompareAndSwapUint32 (uint32_t *val, uint32_t old, uint32_t new)\n {\n-  return __atomic_compare_exchange_n (val, &old, new, true, __ATOMIC_SEQ_CST,\n+  return __atomic_compare_exchange_n (val, &old, new, false, __ATOMIC_SEQ_CST,\n \t\t\t\t      __ATOMIC_RELAXED);\n }\n \n@@ -106,7 +106,7 @@ CompareAndSwapUint64 (uint64_t *val, uint64_t old, uint64_t new)\n {\n   if (((uintptr_t) val & 7) != 0)\n     val = NULL;\n-  return __atomic_compare_exchange_n (val, &old, new, true, __ATOMIC_SEQ_CST,\n+  return __atomic_compare_exchange_n (val, &old, new, false, __ATOMIC_SEQ_CST,\n \t\t\t\t      __ATOMIC_RELAXED);\n }\n \n@@ -117,7 +117,7 @@ _Bool CompareAndSwapUintptr (uintptr_t *, uintptr_t, uintptr_t)\n _Bool\n CompareAndSwapUintptr (uintptr_t *val, uintptr_t old, uintptr_t new)\n {\n-  return __atomic_compare_exchange_n (val, &old, new, true, __ATOMIC_SEQ_CST,\n+  return __atomic_compare_exchange_n (val, &old, new, false, __ATOMIC_SEQ_CST,\n \t\t\t\t      __ATOMIC_RELAXED);\n }\n "}]}