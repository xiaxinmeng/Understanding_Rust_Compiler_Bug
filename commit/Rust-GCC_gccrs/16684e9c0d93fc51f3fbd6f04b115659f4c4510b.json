{"sha": "16684e9c0d93fc51f3fbd6f04b115659f4c4510b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY2ODRlOWMwZDkzZmM1MWYzZmJkNmYwNGIxMTU2NTlmNGM0NTEwYg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2010-11-03T01:59:07Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2010-11-03T01:59:07Z"}, "message": "chrono: Use typedefs.\n\n2010-11-02  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/std/chrono: Use typedefs.\n\t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: Adjust\n\tline numbers.\n\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Same.\n\t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Same.\n\t* testsuite/20_util/ratio/cons/cons_overflow_neg.cc: Same.\n\nFrom-SVN: r166229", "tree": {"sha": "fc68d8b12fc42dbd933a2e59f85058ad7a799562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc68d8b12fc42dbd933a2e59f85058ad7a799562"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16684e9c0d93fc51f3fbd6f04b115659f4c4510b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16684e9c0d93fc51f3fbd6f04b115659f4c4510b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16684e9c0d93fc51f3fbd6f04b115659f4c4510b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16684e9c0d93fc51f3fbd6f04b115659f4c4510b/comments", "author": null, "committer": null, "parents": [{"sha": "298cee0100c8e41a8ea63d195dc25085ae5098dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/298cee0100c8e41a8ea63d195dc25085ae5098dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/298cee0100c8e41a8ea63d195dc25085ae5098dd"}], "stats": {"total": 250, "additions": 139, "deletions": 111}, "files": [{"sha": "0b7d3c2866002d7ee677a0989d4ad282f48e09ee", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16684e9c0d93fc51f3fbd6f04b115659f4c4510b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16684e9c0d93fc51f3fbd6f04b115659f4c4510b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=16684e9c0d93fc51f3fbd6f04b115659f4c4510b", "patch": "@@ -1,3 +1,12 @@\n+2010-11-02  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/std/chrono: Use typedefs.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg1.cc: Adjust\n+\tline numbers.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc: Same.\n+\t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Same.\n+\t* testsuite/20_util/ratio/cons/cons_overflow_neg.cc: Same.\n+\n 2010-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/c_global/cmath (fpclassify, isfinite, isinf, isnan,"}, {"sha": "c4dcbd5f67fe7b31c16333383175424f182c138c", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 125, "deletions": 107, "changes": 232, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16684e9c0d93fc51f3fbd6f04b115659f4c4510b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16684e9c0d93fc51f3fbd6f04b115659f4c4510b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=16684e9c0d93fc51f3fbd6f04b115659f4c4510b", "patch": "@@ -60,7 +60,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     template<typename _Rep, typename _Period = ratio<1>>\n       struct duration;\n \n-    template<typename _Clock, typename _Duration = typename _Clock::duration>\n+    template<typename _Clock, typename _Dur = typename _Clock::duration>\n       struct time_point;\n   }\n \n@@ -69,71 +69,81 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     struct common_type<chrono::duration<_Rep1, _Period1>,\n \t\t       chrono::duration<_Rep2, _Period2>>\n     {\n-      typedef chrono::duration<typename common_type<_Rep1, _Rep2>::type,\n-\tratio<__static_gcd<_Period1::num, _Period2::num>::value,\n-\t(_Period1::den / __static_gcd<_Period1::den, _Period2::den>::value)\n-\t* _Period2::den>> type;\n+    private:\n+      typedef __static_gcd<_Period1::num, _Period2::num> \t__gcd_num;\n+      typedef __static_gcd<_Period1::den, _Period2::den> \t__gcd_den;\n+      typedef typename common_type<_Rep1, _Rep2>::type\t\t__cr;\n+      typedef ratio<__gcd_num::value,\n+\t\t    (_Period1::den / __gcd_den::value) * _Period2::den> __r;\n+\n+    public:\n+      typedef chrono::duration<__cr, __r> \t\t\ttype;\n     };\n \n   // 20.8.2.3 specialization of common_type (for time_point)\n-  template<typename _Clock, typename _Duration1, typename _Duration2>\n-    struct common_type<chrono::time_point<_Clock, _Duration1>,\n-\t\t       chrono::time_point<_Clock, _Duration2>>\n+  template<typename _Clock, typename _Dur1, typename _Dur2>\n+    struct common_type<chrono::time_point<_Clock, _Dur1>,\n+\t\t       chrono::time_point<_Clock, _Dur2>>\n     {\n-      typedef chrono::time_point<_Clock,\n-\ttypename common_type<_Duration1, _Duration2>::type> type;\n+    private:\n+      typedef typename common_type<_Dur1, _Dur2>::type \t\t__ct;\n+\n+    public:\n+      typedef chrono::time_point<_Clock, __ct> \t\t\ttype;\n     };\n \n   namespace chrono\n   {\n     // Primary template for duration_cast impl.\n-    template<typename _ToDuration, typename _CF, typename _CR,\n+    template<typename _ToDur, typename _CF, typename _CR,\n \t     bool _NumIsOne = false, bool _DenIsOne = false>\n       struct __duration_cast_impl\n       {\n \ttemplate<typename _Rep, typename _Period>\n-\t  static constexpr _ToDuration \n+\t  static constexpr _ToDur\n \t  __cast(const duration<_Rep, _Period>& __d)\n \t  {\n-\t    return _ToDuration(static_cast<\n-\t      typename _ToDuration::rep>(static_cast<_CR>(__d.count())\n+\t    typedef typename _ToDur::rep\t\t\t__to_rep;\n+\t    return _ToDur(static_cast<__to_rep>(static_cast<_CR>(__d.count())\n \t      * static_cast<_CR>(_CF::num)\n \t      / static_cast<_CR>(_CF::den)));\n \t  }\n       };\n \n-    template<typename _ToDuration, typename _CF, typename _CR>\n-      struct __duration_cast_impl<_ToDuration, _CF, _CR, true, true>\n+    template<typename _ToDur, typename _CF, typename _CR>\n+      struct __duration_cast_impl<_ToDur, _CF, _CR, true, true>\n       {\n \ttemplate<typename _Rep, typename _Period>\n-\t  static constexpr _ToDuration \n+\t  static constexpr _ToDur\n \t  __cast(const duration<_Rep, _Period>& __d)\n \t  {\n-\t    return _ToDuration(\n-\t      static_cast<typename _ToDuration::rep>(__d.count()));\n+\t    typedef typename _ToDur::rep\t\t\t__to_rep;\n+\t    return _ToDur(static_cast<__to_rep>(__d.count()));\n \t  }\n       };\n \n-    template<typename _ToDuration, typename _CF, typename _CR>\n-      struct __duration_cast_impl<_ToDuration, _CF, _CR, true, false>\n+    template<typename _ToDur, typename _CF, typename _CR>\n+      struct __duration_cast_impl<_ToDur, _CF, _CR, true, false>\n       {\n \ttemplate<typename _Rep, typename _Period>\n-\t  static constexpr _ToDuration \n+\t  static constexpr _ToDur\n \t  __cast(const duration<_Rep, _Period>& __d)\n \t  {\n-\t    return _ToDuration(static_cast<typename _ToDuration::rep>(\n+\t    typedef typename _ToDur::rep\t\t\t__to_rep;\n+\t    return _ToDur(static_cast<__to_rep>(\n \t      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));\n \t  }\n       };\n \n-    template<typename _ToDuration, typename _CF, typename _CR>\n-      struct __duration_cast_impl<_ToDuration, _CF, _CR, false, true>\n+    template<typename _ToDur, typename _CF, typename _CR>\n+      struct __duration_cast_impl<_ToDur, _CF, _CR, false, true>\n       {\n \ttemplate<typename _Rep, typename _Period>\n-\t  static constexpr _ToDuration \n+\t  static constexpr _ToDur\n \t  __cast(const duration<_Rep, _Period>& __d)\n \t  {\n-\t    return _ToDuration(static_cast<typename _ToDuration::rep>(\n+\t    typedef typename _ToDur::rep\t\t\t__to_rep;\n+\t    return _ToDur(static_cast<__to_rep>(\n \t      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));\n \t  }\n       };\n@@ -149,18 +159,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { };\n \n     /// duration_cast\n-    template<typename _ToDuration, typename _Rep, typename _Period>\n-      inline constexpr typename enable_if<__is_duration<_ToDuration>::value,\n-\t\t\t\t_ToDuration>::type\n+    template<typename _ToDur, typename _Rep, typename _Period>\n+      inline constexpr typename enable_if<__is_duration<_ToDur>::value,\n+\t\t\t\t_ToDur>::type\n       duration_cast(const duration<_Rep, _Period>& __d)\n       {\n-\ttypedef typename\n-\t  ratio_divide<_Period, typename _ToDuration::period>::type __cf;\n-\ttypedef typename\n-\t  common_type<typename _ToDuration::rep, _Rep, intmax_t>::type __cr;\n-\n-\treturn __duration_cast_impl<_ToDuration, __cf, __cr,\n-\t  __cf::num == 1, __cf::den == 1>::__cast(__d);\n+\ttypedef typename _ToDur::period\t\t\t\t__to_period;\n+\ttypedef typename _ToDur::rep\t\t\t\t__to_rep;\n+\ttypedef ratio_divide<_Period, __to_period> \t\t__r_div;\n+\ttypedef typename __r_div::type \t\t\t\t__cf;\n+\ttypedef typename common_type<__to_rep, _Rep, intmax_t>::type\n+\t  \t\t\t\t\t\t\t__cr;\n+\ttypedef  __duration_cast_impl<_ToDur, __cf, __cr,\n+\t\t\t\t      __cf::num == 1, __cf::den == 1> __dc;\n+\treturn __dc::__cast(__d);\n       }\n \n     /// treat_as_floating_point\n@@ -200,8 +212,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     template<typename _Rep, typename _Period>\n       struct duration\n       {\n-\ttypedef _Rep    rep;\n-\ttypedef _Period period;\n+\ttypedef _Rep    \t\t\t\t\trep;\n+\ttypedef _Period \t\t\t\t\tperiod;\n \n \tstatic_assert(!__is_duration<_Rep>::value, \"rep cannot be a duration\");\n \tstatic_assert(__is_ratio<_Period>::value,\n@@ -336,8 +348,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       operator+(const duration<_Rep1, _Period1>& __lhs,\n \t\tconst duration<_Rep2, _Period2>& __rhs)\n       {\n-\ttypedef typename common_type<duration<_Rep1, _Period1>,\n-\t\t\t\t     duration<_Rep2, _Period2>>::type __ct;\n+\ttypedef duration<_Rep1, _Period1>\t\t\t__dur1;\n+\ttypedef duration<_Rep2, _Period2>\t\t\t__dur2;\n+\ttypedef typename common_type<__dur1,__dur2>::type\t__ct;\n \treturn __ct(__lhs) += __rhs;\n       }\n \n@@ -348,8 +361,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       operator-(const duration<_Rep1, _Period1>& __lhs,\n \t\tconst duration<_Rep2, _Period2>& __rhs)\n       {\n-\ttypedef typename common_type<duration<_Rep1, _Period1>,\n-\t\t\t\t     duration<_Rep2, _Period2>>::type __ct;\n+\ttypedef duration<_Rep1, _Period1>\t\t\t__dur1;\n+\ttypedef duration<_Rep2, _Period2>\t\t\t__dur2;\n+\ttypedef typename common_type<__dur1,__dur2>::type\t__ct;\n \treturn __ct(__lhs) -= __rhs;\n       }\n \n@@ -366,7 +380,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       inline duration<typename __common_rep_type<_Rep1, _Rep2>::type, _Period>\n       operator*(const duration<_Rep1, _Period>& __d, const _Rep2& __s)\n       {\n-\ttypedef typename common_type<_Rep1, _Rep2>::type __cr;\n+\ttypedef typename common_type<_Rep1, _Rep2>::type \t__cr;\n \treturn duration<__cr, _Period>(__d) *= __s;\n       }\n \n@@ -380,7 +394,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tenable_if<!__is_duration<_Rep2>::value, _Rep2>::type>::type, _Period>\n       operator/(const duration<_Rep1, _Period>& __d, const _Rep2& __s)\n       {\n-\ttypedef typename common_type<_Rep1, _Rep2>::type __cr;\n+\ttypedef typename common_type<_Rep1, _Rep2>::type \t__cr;\n \treturn duration<__cr, _Period>(__d) /= __s;\n       }\n \n@@ -390,8 +404,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       operator/(const duration<_Rep1, _Period1>& __lhs,\n \t\tconst duration<_Rep2, _Period2>& __rhs)\n       {\n-\ttypedef typename common_type<duration<_Rep1, _Period1>,\n-\t\t\t\t     duration<_Rep2, _Period2>>::type __ct;\n+\ttypedef duration<_Rep1, _Period1>\t\t\t__dur1;\n+\ttypedef duration<_Rep2, _Period2>\t\t\t__dur2;\n+\ttypedef typename common_type<__dur1,__dur2>::type\t__ct;\n \treturn __ct(__lhs).count() / __ct(__rhs).count();\n       }\n \n@@ -401,7 +416,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tenable_if<!__is_duration<_Rep2>::value, _Rep2>::type>::type, _Period>\n       operator%(const duration<_Rep1, _Period>& __d, const _Rep2& __s)\n       {\n-\ttypedef typename common_type<_Rep1, _Rep2>::type __cr;\n+\ttypedef typename common_type<_Rep1, _Rep2>::type \t__cr;\n \treturn duration<__cr, _Period>(__d) %= __s;\n       }\n \n@@ -412,8 +427,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       operator%(const duration<_Rep1, _Period1>& __lhs,\n \t\tconst duration<_Rep2, _Period2>& __rhs)\n       {\n-\ttypedef typename common_type<duration<_Rep1, _Period1>,\n-\t\t\t\t     duration<_Rep2, _Period2>>::type __ct;\n+\ttypedef duration<_Rep1, _Period1>\t\t\t__dur1;\n+\ttypedef duration<_Rep2, _Period2>\t\t\t__dur2;\n+\ttypedef typename common_type<__dur1,__dur2>::type\t__ct;\n \treturn __ct(__lhs) %= __rhs;\n       }\n \n@@ -424,8 +440,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       operator==(const duration<_Rep1, _Period1>& __lhs,\n \t\t const duration<_Rep2, _Period2>& __rhs)\n       {\n-\ttypedef typename common_type<duration<_Rep1, _Period1>,\n-\t\t\t\t     duration<_Rep2, _Period2>>::type __ct;\n+\ttypedef duration<_Rep1, _Period1>\t\t\t__dur1;\n+\ttypedef duration<_Rep2, _Period2>\t\t\t__dur2;\n+\ttypedef typename common_type<__dur1,__dur2>::type\t__ct;\n \treturn __ct(__lhs).count() == __ct(__rhs).count();\n       }\n \n@@ -435,8 +452,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       operator<(const duration<_Rep1, _Period1>& __lhs,\n \t\tconst duration<_Rep2, _Period2>& __rhs)\n       {\n-\ttypedef typename common_type<duration<_Rep1, _Period1>,\n-\t\t\t\t     duration<_Rep2, _Period2>>::type __ct;\n+\ttypedef duration<_Rep1, _Period1>\t\t\t__dur1;\n+\ttypedef duration<_Rep2, _Period2>\t\t\t__dur2;\n+\ttypedef typename common_type<__dur1,__dur2>::type\t__ct;\n \treturn __ct(__lhs).count() < __ct(__rhs).count();\n       }\n \n@@ -487,13 +505,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     typedef duration<int, ratio<3600>> \thours;\n \n     /// time_point\n-    template<typename _Clock, typename _Duration>\n+    template<typename _Clock, typename _Dur>\n       struct time_point\n       {\n-\ttypedef _Clock\t\t\t  \tclock;\n-\ttypedef _Duration\t\t  \tduration;\n-\ttypedef typename duration::rep\t  \trep;\n-\ttypedef typename duration::period\tperiod;\n+\ttypedef _Clock\t\t\t  \t\t\tclock;\n+\ttypedef _Dur\t\t  \t\t\t\tduration;\n+\ttypedef typename duration::rep\t  \t\t\trep;\n+\ttypedef typename duration::period\t\t\tperiod;\n \n \tconstexpr time_point() : __d(duration::zero())\n \t{ }\n@@ -503,8 +521,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t{ }\n \n \t// conversions\n-\ttemplate<typename _Duration2>\n-\t  constexpr time_point(const time_point<clock, _Duration2>& __t)\n+\ttemplate<typename _Dur2>\n+\t  constexpr time_point(const time_point<clock, _Dur2>& __t)\n \t  : __d(__t.time_since_epoch())\n \t  { }\n \n@@ -542,84 +560,84 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       };\n \n     /// time_point_cast\n-    template<typename _ToDuration, typename _Clock, typename _Duration>\n-      inline constexpr typename enable_if<__is_duration<_ToDuration>::value,\n-\t\t\t\ttime_point<_Clock, _ToDuration>>::type\n-      time_point_cast(const time_point<_Clock, _Duration>& __t)\n+    template<typename _ToDur, typename _Clock, typename _Dur>\n+      inline constexpr typename enable_if<__is_duration<_ToDur>::value,\n+\t\t\t\ttime_point<_Clock, _ToDur>>::type\n+      time_point_cast(const time_point<_Clock, _Dur>& __t)\n       {\n-\treturn time_point<_Clock, _ToDuration>(\n-\t  duration_cast<_ToDuration>(__t.time_since_epoch()));\n+\ttypedef time_point<_Clock, _ToDur> \t\t\t__time_point;\n+\treturn __time_point(duration_cast<_ToDur>(__t.time_since_epoch()));\n       }\n \n-    template<typename _Clock, typename _Duration1,\n+    template<typename _Clock, typename _Dur1,\n \t     typename _Rep2, typename _Period2>\n       inline time_point<_Clock,\n-\ttypename common_type<_Duration1, duration<_Rep2, _Period2>>::type>\n-      operator+(const time_point<_Clock, _Duration1>& __lhs,\n+\ttypename common_type<_Dur1, duration<_Rep2, _Period2>>::type>\n+      operator+(const time_point<_Clock, _Dur1>& __lhs,\n \t\tconst duration<_Rep2, _Period2>& __rhs)\n       {\n-\ttypedef time_point<_Clock,\n-\t  typename common_type<_Duration1,\n-\t\t\t       duration<_Rep2, _Period2>>::type> __ct;\n-\treturn __ct(__lhs) += __rhs;\n+\ttypedef duration<_Rep2, _Period2>\t\t\t__dur2;\n+\ttypedef typename common_type<_Dur1,__dur2>::type\t__ct;\n+\ttypedef time_point<_Clock, __ct> \t\t\t__time_point;\n+\treturn __time_point(__lhs) += __rhs;\n       }\n \n     template<typename _Rep1, typename _Period1,\n-\t     typename _Clock, typename _Duration2>\n+\t     typename _Clock, typename _Dur2>\n       inline time_point<_Clock,\n-\ttypename common_type<duration<_Rep1, _Period1>, _Duration2>::type>\n+\ttypename common_type<duration<_Rep1, _Period1>, _Dur2>::type>\n       operator+(const duration<_Rep1, _Period1>& __lhs,\n-\t\tconst time_point<_Clock, _Duration2>& __rhs)\n+\t\tconst time_point<_Clock, _Dur2>& __rhs)\n       { return __rhs + __lhs; }\n \n-    template<typename _Clock, typename _Duration1,\n+    template<typename _Clock, typename _Dur1,\n \t     typename _Rep2, typename _Period2>\n       inline time_point<_Clock,\n-\ttypename common_type<_Duration1, duration<_Rep2, _Period2>>::type>\n-      operator-(const time_point<_Clock, _Duration1>& __lhs,\n+\ttypename common_type<_Dur1, duration<_Rep2, _Period2>>::type>\n+      operator-(const time_point<_Clock, _Dur1>& __lhs,\n \t\tconst duration<_Rep2, _Period2>& __rhs)\n       { return __lhs + (-__rhs); }\n \n-    template<typename _Clock, typename _Duration1, typename _Duration2>\n-      inline typename common_type<_Duration1, _Duration2>::type\n-      operator-(const time_point<_Clock, _Duration1>& __lhs,\n-\t\tconst time_point<_Clock, _Duration2>& __rhs)\n+    template<typename _Clock, typename _Dur1, typename _Dur2>\n+      inline typename common_type<_Dur1, _Dur2>::type\n+      operator-(const time_point<_Clock, _Dur1>& __lhs,\n+\t\tconst time_point<_Clock, _Dur2>& __rhs)\n       { return __lhs.time_since_epoch() - __rhs.time_since_epoch(); }\n \n-    template<typename _Clock, typename _Duration1, typename _Duration2>\n+    template<typename _Clock, typename _Dur1, typename _Dur2>\n       inline constexpr bool\n-      operator==(const time_point<_Clock, _Duration1>& __lhs,\n-\t\t const time_point<_Clock, _Duration2>& __rhs)\n+      operator==(const time_point<_Clock, _Dur1>& __lhs,\n+\t\t const time_point<_Clock, _Dur2>& __rhs)\n       { return __lhs.time_since_epoch() == __rhs.time_since_epoch(); }\n \n-    template<typename _Clock, typename _Duration1, typename _Duration2>\n+    template<typename _Clock, typename _Dur1, typename _Dur2>\n       inline constexpr bool\n-      operator!=(const time_point<_Clock, _Duration1>& __lhs,\n-\t\t const time_point<_Clock, _Duration2>& __rhs)\n+      operator!=(const time_point<_Clock, _Dur1>& __lhs,\n+\t\t const time_point<_Clock, _Dur2>& __rhs)\n       { return !(__lhs == __rhs); }\n \n-    template<typename _Clock, typename _Duration1, typename _Duration2>\n+    template<typename _Clock, typename _Dur1, typename _Dur2>\n       inline constexpr bool\n-      operator<(const time_point<_Clock, _Duration1>& __lhs,\n-\t\tconst time_point<_Clock, _Duration2>& __rhs)\n+      operator<(const time_point<_Clock, _Dur1>& __lhs,\n+\t\tconst time_point<_Clock, _Dur2>& __rhs)\n       { return  __lhs.time_since_epoch() < __rhs.time_since_epoch(); }\n \n-    template<typename _Clock, typename _Duration1, typename _Duration2>\n+    template<typename _Clock, typename _Dur1, typename _Dur2>\n       inline constexpr bool\n-      operator<=(const time_point<_Clock, _Duration1>& __lhs,\n-\t\t const time_point<_Clock, _Duration2>& __rhs)\n+      operator<=(const time_point<_Clock, _Dur1>& __lhs,\n+\t\t const time_point<_Clock, _Dur2>& __rhs)\n       { return !(__rhs < __lhs); }\n \n-    template<typename _Clock, typename _Duration1, typename _Duration2>\n+    template<typename _Clock, typename _Dur1, typename _Dur2>\n       inline constexpr bool\n-      operator>(const time_point<_Clock, _Duration1>& __lhs,\n-\t\tconst time_point<_Clock, _Duration2>& __rhs)\n+      operator>(const time_point<_Clock, _Dur1>& __lhs,\n+\t\tconst time_point<_Clock, _Dur2>& __rhs)\n       { return __rhs < __lhs; }\n \n-    template<typename _Clock, typename _Duration1, typename _Duration2>\n+    template<typename _Clock, typename _Dur1, typename _Dur2>\n       inline constexpr bool\n-      operator>=(const time_point<_Clock, _Duration1>& __lhs,\n-\t\t const time_point<_Clock, _Duration2>& __rhs)\n+      operator>=(const time_point<_Clock, _Dur1>& __lhs,\n+\t\t const time_point<_Clock, _Dur2>& __rhs)\n       { return !(__lhs < __rhs); }\n \n     /// system_clock\n@@ -650,16 +668,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       static std::time_t\n       to_time_t(const time_point& __t)\n       {\n-\treturn std::time_t(\n-\t  duration_cast<chrono::seconds>(__t.time_since_epoch()).count());\n+\treturn std::time_t(duration_cast<chrono::seconds>\n+\t\t\t   (__t.time_since_epoch()).count());\n       }\n \n       static time_point\n       from_time_t(std::time_t __t)\n       {\n-\treturn time_point_cast<system_clock::duration>(\n-\t  chrono::time_point<system_clock, chrono::seconds>(\n-\t    chrono::seconds(__t)));\n+\ttypedef chrono::time_point<system_clock, seconds>\t__from;\n+\treturn time_point_cast<system_clock::duration>\n+\t       (__from(chrono::seconds(__t)));\n       }\n     };\n "}, {"sha": "e33c5131f4aae0bd9460af88f4020e2167fc5970", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16684e9c0d93fc51f3fbd6f04b115659f4c4510b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16684e9c0d93fc51f3fbd6f04b115659f4c4510b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg1.cc?ref=16684e9c0d93fc51f3fbd6f04b115659f4c4510b", "patch": "@@ -31,5 +31,5 @@ void test01()\n   test_type d;\n }\n \n-// { dg-error \"rep cannot be a duration\" \"\" { target *-*-* } 206 }\n+// { dg-error \"rep cannot be a duration\" \"\" { target *-*-* } 218 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 31 }"}, {"sha": "a865effb6dde6265f67c5f6064b07cae75cf8950", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16684e9c0d93fc51f3fbd6f04b115659f4c4510b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16684e9c0d93fc51f3fbd6f04b115659f4c4510b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc?ref=16684e9c0d93fc51f3fbd6f04b115659f4c4510b", "patch": "@@ -32,6 +32,6 @@ void test01()\n   test_type d;\n }\n \n-// { dg-error \"must be a specialization of ratio\" \"\" { target *-*-* } 207 }\n+// { dg-error \"must be a specialization of ratio\" \"\" { target *-*-* } 219 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 32 }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "c168357edd173459253177175599e0d9b876d62e", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16684e9c0d93fc51f3fbd6f04b115659f4c4510b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16684e9c0d93fc51f3fbd6f04b115659f4c4510b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg3.cc?ref=16684e9c0d93fc51f3fbd6f04b115659f4c4510b", "patch": "@@ -33,5 +33,5 @@ void test01()\n   test_type d;\n }\n \n-// { dg-error \"period must be positive\" \"\" { target *-*-* } 209 }\n+// { dg-error \"period must be positive\" \"\" { target *-*-* } 221 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 33 }"}, {"sha": "fa4c85ee77ef9e4ddb43d41148e965c6830ec5d8", "filename": "libstdc++-v3/testsuite/20_util/ratio/cons/cons_overflow_neg.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16684e9c0d93fc51f3fbd6f04b115659f4c4510b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16684e9c0d93fc51f3fbd6f04b115659f4c4510b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc?ref=16684e9c0d93fc51f3fbd6f04b115659f4c4510b", "patch": "@@ -51,6 +51,7 @@ test04()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 46 }\n // { dg-error \"denominator cannot be zero\" \"\" { target *-*-* } 153 }\n // { dg-error \"out of range\" \"\" { target *-*-* } 154 }\n-// { dg-error \"constant expression\" \"\" { target *-*-* } 59 }\n+// { dg-error \"non-constant expression\" \"\" { target *-*-* } 59 }\n+// { dg-error \"is not a constant expression\" \"\" { target *-*-* } 59 }\n // { dg-error \"not a member\" \"\" { target *-*-* } 162 }\n // { dg-error \"not a valid template argument\" \"\" { target *-*-* } 164 }"}]}