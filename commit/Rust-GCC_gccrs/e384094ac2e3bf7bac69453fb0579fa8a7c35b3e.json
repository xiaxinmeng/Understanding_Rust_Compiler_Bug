{"sha": "e384094ac2e3bf7bac69453fb0579fa8a7c35b3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM4NDA5NGFjMmUzYmY3YmFjNjk0NTNmYjA1NzlmYThhN2MzNWIzZQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2018-12-06T18:41:46Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2018-12-06T18:41:46Z"}, "message": "re PR target/88282 (ICE in df_install_refs at gcc/df-scan.c:2379)\n\n2018-12-06  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/88282\n\t* ira.c (ira_init_register_move_cost): Use info from\n\thard_regno_mode_ok instead of contains_reg_of_mode.\n\t* ira-costs.c (contains_reg_of_mode): Don't use cost from bigger\n\thard register class for some fixed hard registers.\n\nFrom-SVN: r266862", "tree": {"sha": "2bce7236e1397dd1d66b05e14857892d6e6a6abe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bce7236e1397dd1d66b05e14857892d6e6a6abe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e384094ac2e3bf7bac69453fb0579fa8a7c35b3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e384094ac2e3bf7bac69453fb0579fa8a7c35b3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e384094ac2e3bf7bac69453fb0579fa8a7c35b3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e384094ac2e3bf7bac69453fb0579fa8a7c35b3e/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5da8ebe9c61f304107b1bcb5146e068093b72d0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5da8ebe9c61f304107b1bcb5146e068093b72d0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5da8ebe9c61f304107b1bcb5146e068093b72d0d"}], "stats": {"total": 39, "additions": 17, "deletions": 22}, "files": [{"sha": "52393571a761b83983225bf4d19ddf991975e9de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e384094ac2e3bf7bac69453fb0579fa8a7c35b3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e384094ac2e3bf7bac69453fb0579fa8a7c35b3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e384094ac2e3bf7bac69453fb0579fa8a7c35b3e", "patch": "@@ -1,3 +1,11 @@\n+2018-12-06  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/88282\n+\t* ira.c (ira_init_register_move_cost): Use info from\n+\thard_regno_mode_ok instead of contains_reg_of_mode.\n+\t* ira-costs.c (contains_reg_of_mode): Don't use cost from bigger\n+\thard register class for some fixed hard registers.\n+\n 2018-12-06  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* doc/extend.texi (Using Assembly Language with C): Document asm inline."}, {"sha": "d0f097bb2d545bff554bdd591a6cd5d42d5b558f", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e384094ac2e3bf7bac69453fb0579fa8a7c35b3e/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e384094ac2e3bf7bac69453fb0579fa8a7c35b3e/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=e384094ac2e3bf7bac69453fb0579fa8a7c35b3e", "patch": "@@ -1323,14 +1323,6 @@ record_operand_costs (rtx_insn *insn, enum reg_class *pref)\n \t  move_costs = ira_register_move_cost[mode];\n \t  hard_reg_class = REGNO_REG_CLASS (other_regno);\n \t  bigger_hard_reg_class = ira_pressure_class_translate[hard_reg_class];\n-\t  if (bigger_hard_reg_class == NO_REGS\n-\t      && (other_regno == STACK_POINTER_REGNUM\n-#ifdef STATIC_CHAIN_REGNUM\n-\t\t  || other_regno == STATIC_CHAIN_REGNUM\n-#endif\n-\t\t  || other_regno == FRAME_POINTER_REGNUM\n-\t\t  || other_regno == HARD_FRAME_POINTER_REGNUM))\n-\t    bigger_hard_reg_class = GENERAL_REGS;\n \t  /* Target code may return any cost for mode which does not\n \t     fit the the hard reg class (e.g. DImode for AREG on\n \t     i386).  Check this and use a bigger class to get the\n@@ -1345,17 +1337,6 @@ record_operand_costs (rtx_insn *insn, enum reg_class *pref)\n \t      cost = (i == 0\n \t\t      ? move_costs[hard_reg_class][rclass]\n \t\t      : move_costs[rclass][hard_reg_class]);\n-\t      /* Target code might define wrong big costs for smaller\n-\t\t reg classes or reg classes containing only fixed hard\n-\t\t regs.  Try a bigger class.  */\n-\t      if (bigger_hard_reg_class != hard_reg_class)\n-\t\t{\n-\t\t  int cost2 = (i == 0\n-\t\t\t       ? move_costs[bigger_hard_reg_class][rclass]\n-\t\t\t       : move_costs[rclass][bigger_hard_reg_class]);\n-\t\t  if (cost2 < cost)\n-\t\t    cost = cost2;\n-\t\t}\n \t      \n \t      op_costs[i]->cost[k] = cost * frequency;\n \t      /* If we have assigned a class to this allocno in our"}, {"sha": "c8f2df43dd12640b98132886479418ae82e37842", "filename": "gcc/ira.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e384094ac2e3bf7bac69453fb0579fa8a7c35b3e/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e384094ac2e3bf7bac69453fb0579fa8a7c35b3e/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=e384094ac2e3bf7bac69453fb0579fa8a7c35b3e", "patch": "@@ -1573,11 +1573,17 @@ ira_init_register_move_cost (machine_mode mode)\n {\n   static unsigned short last_move_cost[N_REG_CLASSES][N_REG_CLASSES];\n   bool all_match = true;\n-  unsigned int cl1, cl2;\n+  unsigned int i, cl1, cl2;\n+  HARD_REG_SET ok_regs;\n \n   ira_assert (ira_register_move_cost[mode] == NULL\n \t      && ira_may_move_in_cost[mode] == NULL\n \t      && ira_may_move_out_cost[mode] == NULL);\n+  CLEAR_HARD_REG_SET (ok_regs);\n+  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+    if (targetm.hard_regno_mode_ok (i, mode))\n+      SET_HARD_REG_BIT (ok_regs, i);\n+\n   /* Note that we might be asked about the move costs of modes that\n      cannot be stored in any hard register, for example if an inline\n      asm tries to create a register operand with an impossible mode.\n@@ -1586,8 +1592,8 @@ ira_init_register_move_cost (machine_mode mode)\n     for (cl2 = 0; cl2 < N_REG_CLASSES; cl2++)\n       {\n \tint cost;\n-\tif (!contains_reg_of_mode[cl1][mode]\n-\t    || !contains_reg_of_mode[cl2][mode])\n+\tif (!hard_reg_set_intersect_p (ok_regs, reg_class_contents[cl1])\n+\t    || !hard_reg_set_intersect_p (ok_regs, reg_class_contents[cl2]))\n \t  {\n \t    if ((ira_reg_class_max_nregs[cl1][mode]\n \t\t > ira_class_hard_regs_num[cl1])"}]}