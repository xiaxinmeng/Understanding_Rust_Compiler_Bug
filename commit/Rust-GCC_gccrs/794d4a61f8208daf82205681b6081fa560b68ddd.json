{"sha": "794d4a61f8208daf82205681b6081fa560b68ddd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk0ZDRhNjFmODIwOGRhZjgyMjA1NjgxYjYwODFmYTU2MGI2OGRkZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-11-13T09:39:11Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-11-13T09:39:11Z"}, "message": "decl.c (duplicate_decls): Propagate DECL_DEFER_OUTPUT.\n\n\t* decl.c (duplicate_decls): Propagate DECL_DEFER_OUTPUT.\n\t* decl2.c (comdat_linkage): Set DECL_DEFER_OUTPUT.\n\t* rtti.c (get_tinfo_fn_unused): Split out from get_tinfo_fn.\n\t* class.c (set_rtti_entry): Use it.\n\nFrom-SVN: r30523", "tree": {"sha": "45520d80ba13438efbfeed405494e430fddd89e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45520d80ba13438efbfeed405494e430fddd89e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/794d4a61f8208daf82205681b6081fa560b68ddd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/794d4a61f8208daf82205681b6081fa560b68ddd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/794d4a61f8208daf82205681b6081fa560b68ddd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/794d4a61f8208daf82205681b6081fa560b68ddd/comments", "author": null, "committer": null, "parents": [{"sha": "78df89edfa46a674d81fa6a21170037a28d6a36e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78df89edfa46a674d81fa6a21170037a28d6a36e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78df89edfa46a674d81fa6a21170037a28d6a36e"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "8bd88f372e5fbff91c5020c4465271cc5a1ab52c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794d4a61f8208daf82205681b6081fa560b68ddd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794d4a61f8208daf82205681b6081fa560b68ddd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=794d4a61f8208daf82205681b6081fa560b68ddd", "patch": "@@ -1,3 +1,10 @@\n+1999-11-13  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (duplicate_decls): Propagate DECL_DEFER_OUTPUT.\n+\t* decl2.c (comdat_linkage): Set DECL_DEFER_OUTPUT.\n+\t* rtti.c (get_tinfo_fn_unused): Split out from get_tinfo_fn.\n+\t* class.c (set_rtti_entry): Use it.\n+\n 1999-11-12  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (cplus_expand_expr_stmt): Don't call break_out_cleanups"}, {"sha": "73a9dc9271612d08e6c747271b391b3c9dc70b14", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794d4a61f8208daf82205681b6081fa560b68ddd/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794d4a61f8208daf82205681b6081fa560b68ddd/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=794d4a61f8208daf82205681b6081fa560b68ddd", "patch": "@@ -652,7 +652,7 @@ set_rtti_entry (virtuals, offset, type)\n     return;\n \n   if (flag_rtti)\n-    fn = get_tinfo_fn (type);\n+    fn = get_tinfo_fn_unused (type);\n   else\n     /* If someone tries to get RTTI information for a type compiled\n        without RTTI, they're out of luck.  By calling __pure_virtual"}, {"sha": "ac9d37aba41b1e9485dcc5d54a3f5aacb6e332a3", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794d4a61f8208daf82205681b6081fa560b68ddd/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794d4a61f8208daf82205681b6081fa560b68ddd/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=794d4a61f8208daf82205681b6081fa560b68ddd", "patch": "@@ -3792,6 +3792,7 @@ extern tree get_tinfo_fn_dynamic\t\tPROTO((tree));\n extern tree build_typeid\t\t\tPROTO((tree));\n extern tree build_x_typeid\t\t\tPROTO((tree));\n extern tree get_tinfo_fn\t\t\tPROTO((tree));\n+extern tree get_tinfo_fn_unused\t\t\tPROTO((tree));\n extern tree get_typeid\t\t\t\tPROTO((tree));\n extern tree get_typeid_1\t\t\tPROTO((tree));\n extern tree build_dynamic_cast\t\t\tPROTO((tree, tree));"}, {"sha": "f01d4de466fa4996bfee4c79fd05ea5dc8b166dc", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794d4a61f8208daf82205681b6081fa560b68ddd/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794d4a61f8208daf82205681b6081fa560b68ddd/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=794d4a61f8208daf82205681b6081fa560b68ddd", "patch": "@@ -3408,6 +3408,7 @@ duplicate_decls (newdecl, olddecl)\n   /* Merge the storage class information.  */\n   DECL_WEAK (newdecl) |= DECL_WEAK (olddecl);\n   DECL_ONE_ONLY (newdecl) |= DECL_ONE_ONLY (olddecl);\n+  DECL_DEFER_OUTPUT (newdecl) |= DECL_DEFER_OUTPUT (olddecl);\n   TREE_PUBLIC (newdecl) = TREE_PUBLIC (olddecl);\n   TREE_STATIC (olddecl) = TREE_STATIC (newdecl) |= TREE_STATIC (olddecl);\n   if (! DECL_EXTERNAL (olddecl))"}, {"sha": "2d57b78da3d6edebdca1d75b6370a9274f50c4a3", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794d4a61f8208daf82205681b6081fa560b68ddd/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794d4a61f8208daf82205681b6081fa560b68ddd/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=794d4a61f8208daf82205681b6081fa560b68ddd", "patch": "@@ -2355,6 +2355,9 @@ comdat_linkage (decl)\n \n   if (DECL_LANG_SPECIFIC (decl))\n     DECL_COMDAT (decl) = 1;\n+\n+  if (TREE_CODE (decl) == FUNCTION_DECL)\n+    DECL_DEFER_OUTPUT (decl) = 1;\n }\n \n /* For win32 we also want to put explicit instantiations in"}, {"sha": "71a00009e8aa7765e5a2e007143c3136cc13dfb3", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794d4a61f8208daf82205681b6081fa560b68ddd/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794d4a61f8208daf82205681b6081fa560b68ddd/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=794d4a61f8208daf82205681b6081fa560b68ddd", "patch": "@@ -361,8 +361,19 @@ get_tinfo_var (type)\n   return tdecl;\n }\n \n+/* Returns the decl for a function which will return a type_info node for\n+   TYPE.  This version does not mark the function used, for use in\n+   set_rtti_entry; for the vtable case, we'll get marked in\n+   finish_vtable_vardecl, when we know that we want to be emitted.\n+\n+   We do this to avoid emitting the tinfo node itself, since we don't\n+   currently support DECL_DEFER_OUTPUT for variables.  Also, we don't\n+   associate constant pools with their functions properly, so we would\n+   emit string constants and such even though we don't emit the actual\n+   function.  When those bugs are fixed, this function should go away.  */\n+\n tree\n-get_tinfo_fn (type)\n+get_tinfo_fn_unused (type)\n      tree type;\n {\n   tree name;\n@@ -391,13 +402,23 @@ get_tinfo_fn (type)\n \n   pushdecl_top_level (d);\n   make_function_rtl (d);\n-  mark_used (d);\n   mark_inline_for_output (d);\n   pop_obstacks ();\n \n   return d;\n }\n \n+/* Likewise, but also mark it used.  Called by various EH and RTTI code.  */\n+\n+tree\n+get_tinfo_fn (type)\n+     tree type;\n+{\n+  tree d = get_tinfo_fn_unused (type);\n+  mark_used (d);\n+  return d;\n+}\n+\n tree\n get_typeid_1 (type)\n      tree type;"}]}