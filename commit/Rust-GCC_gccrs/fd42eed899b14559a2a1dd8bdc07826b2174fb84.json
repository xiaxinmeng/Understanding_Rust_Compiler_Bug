{"sha": "fd42eed899b14559a2a1dd8bdc07826b2174fb84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ0MmVlZDg5OWIxNDU1OWEyYTFkZDhiZGMwNzgyNmIyMTc0ZmI4NA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2016-01-10T13:18:54Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2016-01-10T13:18:54Z"}, "message": "re PR fortran/69154 (ICE in gfc_trans_where_2, at fortran/trans-stmt.c:5005 on *-linux)\n\n2016-01-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/69154\n\t* frontend-passes.c (in_where):  New variable.\n\t(inline_matmul_assign):  Don't try this if we are within\n\ta WHERE statement.\n\t(gfc_code_walker):  Keep track of in_where.\n\n2016-01-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/69154\n\t* gfortran.dg/inline_matmul_12.f90:  New test.\n\nFrom-SVN: r232201", "tree": {"sha": "cfc4e968b1e2ecb79eccd2c64621a4280d22842c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfc4e968b1e2ecb79eccd2c64621a4280d22842c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd42eed899b14559a2a1dd8bdc07826b2174fb84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd42eed899b14559a2a1dd8bdc07826b2174fb84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd42eed899b14559a2a1dd8bdc07826b2174fb84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd42eed899b14559a2a1dd8bdc07826b2174fb84/comments", "author": null, "committer": null, "parents": [{"sha": "4f90ee6c7780cab416adee0830074c9a315206d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f90ee6c7780cab416adee0830074c9a315206d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f90ee6c7780cab416adee0830074c9a315206d0"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "051c6ede82c6cf82c08d51a39210ec298b42bc74", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd42eed899b14559a2a1dd8bdc07826b2174fb84/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd42eed899b14559a2a1dd8bdc07826b2174fb84/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fd42eed899b14559a2a1dd8bdc07826b2174fb84", "patch": "@@ -1,3 +1,11 @@\n+2016-01-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/69154\n+\t* frontend-passes.c (in_where):  New variable.\n+\t(inline_matmul_assign):  Don't try this if we are within\n+\ta WHERE statement.\n+\t(gfc_code_walker):  Keep track of in_where.\n+\n 2016-01-10  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/67779"}, {"sha": "9fad41d85b3b9dba1811816d4324a8a0fd0e2b4b", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd42eed899b14559a2a1dd8bdc07826b2174fb84/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd42eed899b14559a2a1dd8bdc07826b2174fb84/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=fd42eed899b14559a2a1dd8bdc07826b2174fb84", "patch": "@@ -78,6 +78,10 @@ static int forall_level;\n \n static bool in_omp_workshare;\n \n+/* Keep track of whether we are within a WHERE statement.  */\n+\n+static bool in_where;\n+\n /* Keep track of iterators for array constructors.  */\n \n static int iterator_level;\n@@ -2790,6 +2794,9 @@ inline_matmul_assign (gfc_code **c, int *walk_subtrees,\n   if (co->op != EXEC_ASSIGN)\n     return 0;\n \n+  if (in_where)\n+    return 0;\n+\n   expr1 = co->expr1;\n   expr2 = co->expr2;\n   if (expr2->expr_type != EXPR_FUNCTION\n@@ -3268,12 +3275,14 @@ gfc_code_walker (gfc_code **c, walk_code_fn_t codefn, walk_expr_fn_t exprfn,\n \t  gfc_code *co;\n \t  gfc_association_list *alist;\n \t  bool saved_in_omp_workshare;\n+\t  bool saved_in_where;\n \n \t  /* There might be statement insertions before the current code,\n \t     which must not affect the expression walker.  */\n \n \t  co = *c;\n \t  saved_in_omp_workshare = in_omp_workshare;\n+\t  saved_in_where = in_where;\n \n \t  switch (co->op)\n \t    {\n@@ -3301,6 +3310,10 @@ gfc_code_walker (gfc_code **c, walk_code_fn_t codefn, walk_expr_fn_t exprfn,\n \t      WALK_SUBEXPR (co->ext.iterator->step);\n \t      break;\n \n+\t    case EXEC_WHERE:\n+\t      in_where = true;\n+\t      break;\n+\n \t    case EXEC_CALL:\n \t    case EXEC_ASSIGN_CALL:\n \t      for (a = co->ext.actual; a; a = a->next)\n@@ -3554,6 +3567,7 @@ gfc_code_walker (gfc_code **c, walk_code_fn_t codefn, walk_expr_fn_t exprfn,\n \t    doloop_level --;\n \n \t  in_omp_workshare = saved_in_omp_workshare;\n+\t  in_where = saved_in_where;\n \t}\n     }\n   return 0;"}, {"sha": "f233bb923efbe4b1b26c8b8e427c6245f963b2f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd42eed899b14559a2a1dd8bdc07826b2174fb84/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd42eed899b14559a2a1dd8bdc07826b2174fb84/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fd42eed899b14559a2a1dd8bdc07826b2174fb84", "patch": "@@ -1,3 +1,8 @@\n+2016-01-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/69154\n+\t* gfortran.dg/inline_matmul_12.f90:  New test.\n+\n 2016-01-10  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/67779"}, {"sha": "cc6fabdcd9ef557a82f8a4231833ee090c1c6327", "filename": "gcc/testsuite/gfortran.dg/inline_matmul_12.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd42eed899b14559a2a1dd8bdc07826b2174fb84/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd42eed899b14559a2a1dd8bdc07826b2174fb84/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_12.f90?ref=fd42eed899b14559a2a1dd8bdc07826b2174fb84", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do compile }\n+! { dg-options \"-ffrontend-optimize -fdump-tree-original\" }\n+! PR 69154 - inlined matmul used to cause an ICE inside a WHERE.\n+MODULE m_numeric_tools\n+ INTEGER, PARAMETER :: dp=8\n+CONTAINS\n+subroutine llsfit_svd(xx,yy,sigma,nfuncs,funcs,chisq,par,var,cov,info)\n+ real(dp),intent(in) :: xx(:),yy(:),sigma(:)\n+ real(dp),dimension(SIZE(xx)) :: bb,sigm1\n+ real(dp) :: tmp(nfuncs)\n+ real(dp),allocatable :: work(:),Vt(:,:),U(:,:),S(:)\n+ real(dp),dimension(3,3) :: a, b, c\n+ WHERE (S>TOL_*MAXVAL(S))\n+  tmp=MATMUL(bb,U)/S\n+ END WHERE\n+ call random_number(a)\n+ call random_number(b)\n+ c = matmul(a,b)\n+end subroutine llsfit_svd\n+\n+END MODULE m_numeric_tools\n+! { dg-final { scan-tree-dump-times \"matmul_r8\" 1 \"original\" } }"}]}