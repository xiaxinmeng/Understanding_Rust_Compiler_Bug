{"sha": "05d3a4fc009c12089e8d5127f6d0c682566876ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVkM2E0ZmMwMDljMTIwODllOGQ1MTI3ZjZkMGM2ODI1NjY4NzZjZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-04-29T16:44:53Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-04-29T16:44:53Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r859", "tree": {"sha": "f5da8548388b193a989e0ca070c8c1ae5c54b237", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5da8548388b193a989e0ca070c8c1ae5c54b237"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05d3a4fc009c12089e8d5127f6d0c682566876ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05d3a4fc009c12089e8d5127f6d0c682566876ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05d3a4fc009c12089e8d5127f6d0c682566876ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05d3a4fc009c12089e8d5127f6d0c682566876ce/comments", "author": null, "committer": null, "parents": [{"sha": "75791cee29f5b566cb14a227fcbb0eaeaa78bfe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75791cee29f5b566cb14a227fcbb0eaeaa78bfe5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75791cee29f5b566cb14a227fcbb0eaeaa78bfe5"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "c10bce4f2d7d4b182577d045656bd0cb38b9dff3", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05d3a4fc009c12089e8d5127f6d0c682566876ce/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05d3a4fc009c12089e8d5127f6d0c682566876ce/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=05d3a4fc009c12089e8d5127f6d0c682566876ce", "patch": "@@ -350,7 +350,7 @@ enum reg_class { NO_REGS, GENERAL_REGS, FP_REGS, ALL_REGS, LIM_REG_CLASSES };\n    integer register to an FP register.  If we are trying to put a \n    non-zero floating-point constant into some register, use an integer\n    register if the constant is SFmode and GENERAL_REGS is one of our options.\n-   Otherwise, put the constant intoo memory.  */\n+   Otherwise, put the constant into memory.  */\n \n #define PREFERRED_RELOAD_CLASS(X,CLASS)  \\\n   ((CLASS) == ALL_REGS && GET_CODE (X) == CONST_INT ? GENERAL_REGS\t\\"}]}