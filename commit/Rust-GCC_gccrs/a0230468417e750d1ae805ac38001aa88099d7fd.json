{"sha": "a0230468417e750d1ae805ac38001aa88099d7fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAyMzA0Njg0MTdlNzUwZDFhZTgwNWFjMzgwMDFhYTg4MDk5ZDdmZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2008-09-01T23:24:09Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2008-09-01T23:24:09Z"}, "message": "type_traits (__make_unsigned_selector<>): Consider enums of size smaller than short.\n\n\t* include/std/type_traits (__make_unsigned_selector<>): Consider\n\tenums of size smaller than short.\n\t(__make_signed_selector<>): Likewise.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n\tAdjust line numbers.\n\t* testsuite/20_util/make_usigned/requirements/typedefs_neg.cc:\n\tAdjust line numbers.\n\t* testsuite/20_util/make_signed/requirements/typedefs-2.cc:\n\tEnsure test_enum is the same size as short.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs-2.cc:\n\tEnsure test_enum is the same size as short.\n\nFrom-SVN: r139875", "tree": {"sha": "d88bccb56445aaca3ce7c9b6d4bf65c1efba8031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d88bccb56445aaca3ce7c9b6d4bf65c1efba8031"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0230468417e750d1ae805ac38001aa88099d7fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0230468417e750d1ae805ac38001aa88099d7fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0230468417e750d1ae805ac38001aa88099d7fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0230468417e750d1ae805ac38001aa88099d7fd/comments", "author": null, "committer": null, "parents": [{"sha": "26272ba2c429064f8b39f38771d879fc913114cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26272ba2c429064f8b39f38771d879fc913114cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26272ba2c429064f8b39f38771d879fc913114cc"}], "stats": {"total": 56, "additions": 39, "deletions": 17}, "files": [{"sha": "0b2f5b94d637c028d8ed5ab463e48ad313d6d9c4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0230468417e750d1ae805ac38001aa88099d7fd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0230468417e750d1ae805ac38001aa88099d7fd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a0230468417e750d1ae805ac38001aa88099d7fd", "patch": "@@ -1,3 +1,17 @@\n+2008-09-01  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* include/std/type_traits (__make_unsigned_selector<>): Consider\n+\tenums of size smaller than short.\n+\t(__make_signed_selector<>): Likewise.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n+\tAdjust line numbers.\n+\t* testsuite/20_util/make_usigned/requirements/typedefs_neg.cc:\n+\tAdjust line numbers.\n+\t* testsuite/20_util/make_signed/requirements/typedefs-2.cc:\n+\tEnsure test_enum is the same size as short.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs-2.cc:\n+\tEnsure test_enum is the same size as short.\n+\n 2008-08-31  Aaron W. LaFramboise  <aaronavay62@aaronwl.com>\n \n \t* acinclude.m4 <enable_symvers>: Don't use symvers on Windows."}, {"sha": "87fdff146bce230cef12804eafbbff862bed779b", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0230468417e750d1ae805ac38001aa88099d7fd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0230468417e750d1ae805ac38001aa88099d7fd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=a0230468417e750d1ae805ac38001aa88099d7fd", "patch": "@@ -455,15 +455,18 @@ namespace std\n     struct __make_unsigned_selector<_Tp, false, true>\n     {\n     private:\n-      // GNU enums start with sizeof short.\n-      typedef unsigned short __smallest;\n-      static const bool __b1 = sizeof(_Tp) <= sizeof(__smallest);\n+      // With -fshort-enums, an enum may be as small as a char.\n+      typedef unsigned char __smallest;\n+      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);\n+      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned short);\n       static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned int);\n-      typedef conditional<__b2, unsigned int, unsigned long> __cond;\n-      typedef typename __cond::type __cond_type;\n+      typedef conditional<__b2, unsigned int, unsigned long> __cond2;\n+      typedef typename __cond2::type __cond2_type;\n+      typedef conditional<__b1, unsigned short, __cond2_type> __cond1;\n+      typedef typename __cond1::type __cond1_type;\n \n     public:\n-      typedef typename conditional<__b1, __smallest, __cond_type>::type __type;\n+      typedef typename conditional<__b0, __smallest, __cond1_type>::type __type;\n     };\n \n   // Given an integral/enum type, return the corresponding unsigned\n@@ -530,15 +533,18 @@ namespace std\n     struct __make_signed_selector<_Tp, false, true>\n     {\n     private:\n-      // GNU enums start with sizeof short.\n-      typedef signed short __smallest;\n-      static const bool __b1 = sizeof(_Tp) <= sizeof(__smallest);\n+      // With -fshort-enums, an enum may be as small as a char.\n+      typedef signed char __smallest;\n+      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);\n+      static const bool __b1 = sizeof(_Tp) <= sizeof(signed short);\n       static const bool __b2 = sizeof(_Tp) <= sizeof(signed int);\n-      typedef conditional<__b2, signed int, signed long> __cond;\n-      typedef typename __cond::type __cond_type;\n+      typedef conditional<__b2, signed int, signed long> __cond2;\n+      typedef typename __cond2::type __cond2_type;\n+      typedef conditional<__b1, signed short, __cond2_type> __cond1;\n+      typedef typename __cond1::type __cond1_type;\n \n     public:\n-      typedef typename conditional<__b1, __smallest, __cond_type>::type __type;\n+      typedef typename conditional<__b0, __smallest, __cond1_type>::type __type;\n     };\n \n   // Given an integral/enum type, return the corresponding signed"}, {"sha": "b0f93b08293c3d69f67a77af54712599208fd0cd", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs-2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0230468417e750d1ae805ac38001aa88099d7fd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0230468417e750d1ae805ac38001aa88099d7fd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc?ref=a0230468417e750d1ae805ac38001aa88099d7fd", "patch": "@@ -24,7 +24,8 @@\n #include <type_traits>\n #include <testsuite_hooks.h>\n \n-enum test_enum { first_selection };\n+// Ensure that this enum has \"short\" as its underlying type.\n+enum test_enum { first_selection = ((unsigned char)-1) + 1 };\n \n void test01()\n {"}, {"sha": "59f679801c03c957fedf8a70e16b767a0b61e0fe", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0230468417e750d1ae805ac38001aa88099d7fd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0230468417e750d1ae805ac38001aa88099d7fd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=a0230468417e750d1ae805ac38001aa88099d7fd", "patch": "@@ -49,8 +49,8 @@ void test01()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 41 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 43 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 549 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 515 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 555 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 518 }\n \n // { dg-excess-errors \"At global scope\" }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "4f6412090cac10732007c65d13491a4268212728", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs-2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0230468417e750d1ae805ac38001aa88099d7fd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0230468417e750d1ae805ac38001aa88099d7fd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc?ref=a0230468417e750d1ae805ac38001aa88099d7fd", "patch": "@@ -24,7 +24,8 @@\n #include <type_traits>\n #include <testsuite_hooks.h>\n \n-enum test_enum { first_selection };\n+// Ensure that this enum has \"short\" as its underlying type.\n+enum test_enum { first_selection = ((unsigned char)-1) + 1 };\n \n void test01()\n {"}, {"sha": "170183dd868c02109411c6c1098adb8df3e2dac0", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0230468417e750d1ae805ac38001aa88099d7fd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0230468417e750d1ae805ac38001aa88099d7fd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=a0230468417e750d1ae805ac38001aa88099d7fd", "patch": "@@ -49,7 +49,7 @@ void test01()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 41 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 43 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 474 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 477 }\n // { dg-error \"declaration of\" \"\" { target *-*-* } 440 }\n \n // { dg-excess-errors \"At global scope\" }"}]}