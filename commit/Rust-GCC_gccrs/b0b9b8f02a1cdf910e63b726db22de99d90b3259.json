{"sha": "b0b9b8f02a1cdf910e63b726db22de99d90b3259", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBiOWI4ZjAyYTFjZGY5MTBlNjNiNzI2ZGIyMmRlOTlkOTBiMzI1OQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-03T00:16:25Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-03T00:16:25Z"}, "message": "Daily bump.", "tree": {"sha": "7d3a86f64181f2a984e44c77c68ddb0c605368ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d3a86f64181f2a984e44c77c68ddb0c605368ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0b9b8f02a1cdf910e63b726db22de99d90b3259", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0b9b8f02a1cdf910e63b726db22de99d90b3259", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0b9b8f02a1cdf910e63b726db22de99d90b3259", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0b9b8f02a1cdf910e63b726db22de99d90b3259/comments", "author": null, "committer": null, "parents": [{"sha": "9885183c08138752a954b68a3328e749976d8f93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9885183c08138752a954b68a3328e749976d8f93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9885183c08138752a954b68a3328e749976d8f93"}], "stats": {"total": 570, "additions": 569, "deletions": 1}, "files": [{"sha": "131b253b7d510330e247b016644c22b2081f368b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 372, "deletions": 0, "changes": 372, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b9b8f02a1cdf910e63b726db22de99d90b3259/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b9b8f02a1cdf910e63b726db22de99d90b3259/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0b9b8f02a1cdf910e63b726db22de99d90b3259", "patch": "@@ -1,3 +1,375 @@\n+2020-10-02  David Edelsohn  <dje.gcc@gmail.com>\n+\t    Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* config/rs6000/rs6000.c: Include ssa.h. Reorder some headers.\n+\t* config/rs6000/rs6000-call.c: Same.\n+\n+2020-10-02  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* params.opt (ipa-cp-large-unit-insns): New parameter.\n+\t* ipa-cp.c (get_max_overall_size): Use the new parameter.\n+\n+2020-10-02  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-cp.c (estimate_local_effects): Add overeall_size to dumped\n+\tstring.\n+\t(decide_about_value): Add dumping new overall_size.\n+\n+2020-10-02  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-fnsummary.h (ipa_freqcounting_predicate): New type.\n+\t(ipa_fn_summary): Change the type of loop_iterations and loop_strides\n+\tto vectors of ipa_freqcounting_predicate.\n+\t(ipa_fn_summary::ipa_fn_summary): Construct the new vectors.\n+\t(ipa_call_estimates): New fields loops_with_known_iterations and\n+\tloops_with_known_strides.\n+\t* ipa-cp.c (hint_time_bonus): Multiply param_ipa_cp_loop_hint_bonus\n+\twith the expected frequencies of loops with known iteration count or\n+\tstride.\n+\t* ipa-fnsummary.c (add_freqcounting_predicate): New function.\n+\t(ipa_fn_summary::~ipa_fn_summary): Release the new vectors instead of\n+\tjust two predicates.\n+\t(remap_hint_predicate_after_duplication): Replace with function\n+\tremap_freqcounting_preds_after_dup.\n+\t(ipa_fn_summary_t::duplicate): Use it or duplicate new vectors.\n+\t(ipa_dump_fn_summary): Dump the new vectors.\n+\t(analyze_function_body): Compute the loop property vectors.\n+\t(ipa_call_context::estimate_size_and_time): Calculate also\n+\tloops_with_known_iterations and loops_with_known_strides.  Adjusted\n+\tdumping accordinly.\n+\t(remap_hint_predicate): Replace with function\n+\tremap_freqcounting_predicate.\n+\t(ipa_merge_fn_summary_after_inlining): Use it.\n+\t(inline_read_section): Stream loopcounting vectors instead of two\n+\tsimple predicates.\n+\t(ipa_fn_summary_write): Likewise.\n+\t* params.opt (ipa-max-loop-predicates): New parameter.\n+\t* doc/invoke.texi (ipa-max-loop-predicates): Document new param.\n+\n+2020-10-02  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-inline-analysis.c (do_estimate_edge_time): Adjusted to use\n+\tipa_call_estimates.\n+\t(do_estimate_edge_size): Likewise.\n+\t(do_estimate_edge_hints): Likewise.\n+\t* ipa-fnsummary.h (struct ipa_call_estimates): New type.\n+\t(ipa_call_context::estimate_size_and_time): Adjusted declaration.\n+\t(estimate_ipcp_clone_size_and_time): Likewise.\n+\t* ipa-cp.c (hint_time_bonus): Changed the type of the second argument\n+\tto ipa_call_estimates.\n+\t(perform_estimation_of_a_value): Adjusted to use ipa_call_estimates.\n+\t(estimate_local_effects): Likewise.\n+\t* ipa-fnsummary.c (ipa_call_context::estimate_size_and_time): Adjusted\n+\tto return estimates in a single ipa_call_estimates parameter.\n+\t(estimate_ipcp_clone_size_and_time): Likewise.\n+\n+2020-10-02  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-fnsummary.h (ipa_cached_call_context): New forward declaration\n+\tand class.\n+\t(class ipa_call_context): Make friend ipa_cached_call_context.  Moved\n+\tmethods duplicate_from and release to it too.\n+\t* ipa-fnsummary.c (ipa_call_context::duplicate_from): Moved to class\n+\tipa_cached_call_context.\n+\t(ipa_call_context::release): Likewise, removed the parameter.\n+\t* ipa-inline-analysis.c (node_context_cache_entry): Change the type of\n+\tctx to ipa_cached_call_context.\n+\t(do_estimate_edge_time): Remove parameter from the call to\n+\tipa_cached_call_context::release.\n+\n+2020-10-02  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-prop.h (ipa_auto_call_arg_values): New type.\n+\t(class ipa_call_arg_values): Likewise.\n+\t(ipa_get_indirect_edge_target): Replaced vector arguments with\n+\tipa_call_arg_values in declaration.  Added an overload for\n+\tipa_auto_call_arg_values.\n+\t* ipa-fnsummary.h (ipa_call_context): Removed members m_known_vals,\n+\tm_known_contexts, m_known_aggs, duplicate_from, release and equal_to,\n+\tnew members m_avals, store_to_cache and equivalent_to_p.  Adjusted\n+\tconstrucotr arguments.\n+\t(estimate_ipcp_clone_size_and_time): Replaced vector arguments\n+\twith ipa_auto_call_arg_values in declaration.\n+\t(evaluate_properties_for_edge): Likewise.\n+\t* ipa-cp.c (ipa_get_indirect_edge_target): Adjusted to work on\n+\tipa_call_arg_values rather than on separate vectors.  Added an\n+\toverload for ipa_auto_call_arg_values.\n+\t(devirtualization_time_bonus): Adjusted to work on\n+\tipa_auto_call_arg_values rather than on separate vectors.\n+\t(gather_context_independent_values): Adjusted to work on\n+\tipa_auto_call_arg_values rather than on separate vectors.\n+\t(perform_estimation_of_a_value): Likewise.\n+\t(estimate_local_effects): Likewise.\n+\t(modify_known_vectors_with_val): Adjusted both variants to work on\n+\tipa_auto_call_arg_values and rename them to\n+\tcopy_known_vectors_add_val.\n+\t(decide_about_value): Adjusted to work on ipa_call_arg_values rather\n+\tthan on separate vectors.\n+\t(decide_whether_version_node): Likewise.\n+\t* ipa-fnsummary.c (evaluate_conditions_for_known_args): Likewise.\n+\t(evaluate_properties_for_edge): Likewise.\n+\t(ipa_fn_summary_t::duplicate): Likewise.\n+\t(estimate_edge_devirt_benefit): Adjusted to work on\n+\tipa_call_arg_values rather than on separate vectors.\n+\t(estimate_edge_size_and_time): Likewise.\n+\t(estimate_calls_size_and_time_1): Likewise.\n+\t(summarize_calls_size_and_time): Adjusted calls to\n+\testimate_edge_size_and_time.\n+\t(estimate_calls_size_and_time): Adjusted to work on\n+\tipa_call_arg_values rather than on separate vectors.\n+\t(ipa_call_context::ipa_call_context): Construct from a pointer to\n+\tipa_auto_call_arg_values instead of inividual vectors.\n+\t(ipa_call_context::duplicate_from): Adjusted to access vectors within\n+\tm_avals.\n+\t(ipa_call_context::release): Likewise.\n+\t(ipa_call_context::equal_to): Likewise.\n+\t(ipa_call_context::estimate_size_and_time): Adjusted to work on\n+\tipa_call_arg_values rather than on separate vectors.\n+\t(estimate_ipcp_clone_size_and_time): Adjusted to work with\n+\tipa_auto_call_arg_values rather than on separate vectors.\n+\t(ipa_merge_fn_summary_after_inlining): Likewise.  Adjusted call to\n+\testimate_edge_size_and_time.\n+\t(ipa_update_overall_fn_summary): Adjusted call to\n+\testimate_edge_size_and_time.\n+\t* ipa-inline-analysis.c (do_estimate_edge_time): Adjusted to work with\n+\tipa_auto_call_arg_values rather than with separate vectors.\n+\t(do_estimate_edge_size): Likewise.\n+\t(do_estimate_edge_hints): Likewise.\n+\t* ipa-prop.c (ipa_auto_call_arg_values::~ipa_auto_call_arg_values):\n+\tNew destructor.\n+\n+2020-10-02  Joe Ramsay  <joe.ramsay@arm.com>\n+\n+\t* config/arm/arm_mve.h (__arm_vmaxnmavq): Remove coercion of scalar\n+\targument.\n+\t(__arm_vmaxnmvq): Likewise.\n+\t(__arm_vminnmavq): Likewise.\n+\t(__arm_vminnmvq): Likewise.\n+\t(__arm_vmaxnmavq_p): Likewise.\n+\t(__arm_vmaxnmvq_p): Likewise (and delete duplicate definition).\n+\t(__arm_vminnmavq_p): Likewise.\n+\t(__arm_vminnmvq_p): Likewise.\n+\t(__arm_vmaxavq): Likewise.\n+\t(__arm_vmaxavq_p): Likewise.\n+\t(__arm_vmaxvq): Likewise.\n+\t(__arm_vmaxvq_p): Likewise.\n+\t(__arm_vminavq): Likewise.\n+\t(__arm_vminavq_p): Likewise.\n+\t(__arm_vminvq): Likewise.\n+\t(__arm_vminvq_p): Likewise.\n+\n+2020-10-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.c (neoversev1_tunings): Define.\n+\t* config/aarch64/aarch64-cores.def (zeus): Use it.\n+\t(neoverse-v1): Likewise.\n+\n+2020-10-02  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* attr-fnspec.h: Update documentation.\n+\t(attr_fnsec::return_desc_size): Set to 2\n+\t(attr_fnsec::arg_desc_size): Set to 2\n+\t* builtin-attrs.def (STR1): Update fnspec.\n+\t* internal-fn.def (UBSAN_NULL): Update fnspec.\n+\t(UBSAN_VPTR): Update fnspec.\n+\t(UBSAN_PTR): Update fnspec.\n+\t(ASAN_CHECK): Update fnspec.\n+\t(GOACC_DIM_SIZE): Remove fnspec.\n+\t(GOACC_DIM_POS): Remove fnspec.\n+\t* tree-ssa-alias.c (attr_fnspec::verify): Update verification.\n+\n+2020-10-02  Jan Hubicka  <jh@suse.cz>\n+\n+\t* attr-fnspec.h: New file.\n+\t* calls.c (decl_return_flags): Use attr_fnspec.\n+\t* gimple.c (gimple_call_arg_flags): Use attr_fnspec.\n+\t(gimple_call_return_flags): Use attr_fnspec.\n+\t* tree-into-ssa.c (pass_build_ssa::execute): Use attr_fnspec.\n+\t* tree-ssa-alias.c (attr_fnspec::verify): New member fuction.\n+\n+2020-10-02  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-ssa-alias.c (ao_ref_init_from_ptr_and_range): Break out from ...\n+\t(ao_ref_init_from_ptr_and_size): ... here.\n+\n+2020-10-02  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* data-streamer-in.c (streamer_read_poly_int64): New function.\n+\t* data-streamer-out.c (streamer_write_poly_int64): New function.\n+\t* data-streamer.h (streamer_write_poly_int64): Declare.\n+\t(streamer_read_poly_int64): Declare.\n+\n+2020-10-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_sve_pred_dominates_p):\n+\tDelete.\n+\t* config/aarch64/aarch64.c (aarch64_sve_pred_dominates_p): Likewise.\n+\t* config/aarch64/aarch64-sve.md: Add banner comment describing\n+\thow merging predicated FP operations are represented.\n+\t(*cond_<SVE_COND_FP_UNARY:optab><mode>_2): Split into...\n+\t(*cond_<SVE_COND_FP_UNARY:optab><mode>_2_relaxed): ...this and...\n+\t(*cond_<SVE_COND_FP_UNARY:optab><mode>_2_strict): ...this.\n+\t(*cond_<SVE_COND_FP_UNARY:optab><mode>_any): Split into...\n+\t(*cond_<SVE_COND_FP_UNARY:optab><mode>_any_relaxed): ...this and...\n+\t(*cond_<SVE_COND_FP_UNARY:optab><mode>_any_strict): ...this.\n+\t(*cond_<SVE_COND_FP_BINARY_INT:optab><mode>_2): Split into...\n+\t(*cond_<SVE_COND_FP_BINARY_INT:optab><mode>_2_relaxed): ...this and...\n+\t(*cond_<SVE_COND_FP_BINARY_INT:optab><mode>_2_strict): ...this.\n+\t(*cond_<SVE_COND_FP_BINARY_INT:optab><mode>_any): Split into...\n+\t(*cond_<SVE_COND_FP_BINARY_INT:optab><mode>_any_relaxed): ...this\n+\tand...\n+\t(*cond_<SVE_COND_FP_BINARY_INT:optab><mode>_any_strict): ...this.\n+\t(*cond_<SVE_COND_FP_BINARY:optab><mode>_2): Split into...\n+\t(*cond_<SVE_COND_FP_BINARY:optab><mode>_2_relaxed): ...this and...\n+\t(*cond_<SVE_COND_FP_BINARY:optab><mode>_2_strict): ...this.\n+\t(*cond_<SVE_COND_FP_BINARY_I1:optab><mode>_2_const): Split into...\n+\t(*cond_<SVE_COND_FP_BINARY_I1:optab><mode>_2_const_relaxed): ...this\n+\tand...\n+\t(*cond_<SVE_COND_FP_BINARY_I1:optab><mode>_2_const_strict): ...this.\n+\t(*cond_<SVE_COND_FP_BINARY:optab><mode>_3): Split into...\n+\t(*cond_<SVE_COND_FP_BINARY:optab><mode>_3_relaxed): ...this and...\n+\t(*cond_<SVE_COND_FP_BINARY:optab><mode>_3_strict): ...this.\n+\t(*cond_<SVE_COND_FP_BINARY:optab><mode>_any): Split into...\n+\t(*cond_<SVE_COND_FP_BINARY:optab><mode>_any_relaxed): ...this and...\n+\t(*cond_<SVE_COND_FP_BINARY:optab><mode>_any_strict): ...this.\n+\t(*cond_<SVE_COND_FP_BINARY_I1:optab><mode>_any_const): Split into...\n+\t(*cond_<SVE_COND_FP_BINARY_I1:optab><mode>_any_const_relaxed): ...this\n+\tand...\n+\t(*cond_<SVE_COND_FP_BINARY_I1:optab><mode>_any_const_strict): ...this.\n+\t(*cond_add<mode>_2_const): Split into...\n+\t(*cond_add<mode>_2_const_relaxed): ...this and...\n+\t(*cond_add<mode>_2_const_strict): ...this.\n+\t(*cond_add<mode>_any_const): Split into...\n+\t(*cond_add<mode>_any_const_relaxed): ...this and...\n+\t(*cond_add<mode>_any_const_strict): ...this.\n+\t(*cond_<SVE_COND_FCADD:optab><mode>_2): Split into...\n+\t(*cond_<SVE_COND_FCADD:optab><mode>_2_relaxed): ...this and...\n+\t(*cond_<SVE_COND_FCADD:optab><mode>_2_strict): ...this.\n+\t(*cond_<SVE_COND_FCADD:optab><mode>_any): Split into...\n+\t(*cond_<SVE_COND_FCADD:optab><mode>_any_relaxed): ...this and...\n+\t(*cond_<SVE_COND_FCADD:optab><mode>_any_strict): ...this.\n+\t(*cond_sub<mode>_3_const): Split into...\n+\t(*cond_sub<mode>_3_const_relaxed): ...this and...\n+\t(*cond_sub<mode>_3_const_strict): ...this.\n+\t(*aarch64_pred_abd<mode>): Split into...\n+\t(*aarch64_pred_abd<mode>_relaxed): ...this and...\n+\t(*aarch64_pred_abd<mode>_strict): ...this.\n+\t(*aarch64_cond_abd<mode>_2): Split into...\n+\t(*aarch64_cond_abd<mode>_2_relaxed): ...this and...\n+\t(*aarch64_cond_abd<mode>_2_strict): ...this.\n+\t(*aarch64_cond_abd<mode>_3): Split into...\n+\t(*aarch64_cond_abd<mode>_3_relaxed): ...this and...\n+\t(*aarch64_cond_abd<mode>_3_strict): ...this.\n+\t(*aarch64_cond_abd<mode>_any): Split into...\n+\t(*aarch64_cond_abd<mode>_any_relaxed): ...this and...\n+\t(*aarch64_cond_abd<mode>_any_strict): ...this.\n+\t(*cond_<SVE_COND_FP_TERNARY:optab><mode>_2): Split into...\n+\t(*cond_<SVE_COND_FP_TERNARY:optab><mode>_2_relaxed): ...this and...\n+\t(*cond_<SVE_COND_FP_TERNARY:optab><mode>_2_strict): ...this.\n+\t(*cond_<SVE_COND_FP_TERNARY:optab><mode>_4): Split into...\n+\t(*cond_<SVE_COND_FP_TERNARY:optab><mode>_4_relaxed): ...this and...\n+\t(*cond_<SVE_COND_FP_TERNARY:optab><mode>_4_strict): ...this.\n+\t(*cond_<SVE_COND_FP_TERNARY:optab><mode>_any): Split into...\n+\t(*cond_<SVE_COND_FP_TERNARY:optab><mode>_any_relaxed): ...this and...\n+\t(*cond_<SVE_COND_FP_TERNARY:optab><mode>_any_strict): ...this.\n+\t(*cond_<SVE_COND_FCMLA:optab><mode>_4): Split into...\n+\t(*cond_<SVE_COND_FCMLA:optab><mode>_4_relaxed): ...this and...\n+\t(*cond_<SVE_COND_FCMLA:optab><mode>_4_strict): ...this.\n+\t(*cond_<SVE_COND_FCMLA:optab><mode>_any): Split into...\n+\t(*cond_<SVE_COND_FCMLA:optab><mode>_any_relaxed): ...this and...\n+\t(*cond_<SVE_COND_FCMLA:optab><mode>_any_strict): ...this.\n+\t(*aarch64_pred_fac<cmp_op><mode>): Split into...\n+\t(*aarch64_pred_fac<cmp_op><mode>_relaxed): ...this and...\n+\t(*aarch64_pred_fac<cmp_op><mode>_strict): ...this.\n+\t(*cond_<optab>_nontrunc<SVE_FULL_F:mode><SVE_FULL_HSDI:mode>): Split\n+\tinto...\n+\t(*cond_<optab>_nontrunc<SVE_FULL_F:mode><SVE_FULL_HSDI:mode>_relaxed):\n+\t...this and...\n+\t(*cond_<optab>_nontrunc<SVE_FULL_F:mode><SVE_FULL_HSDI:mode>_strict):\n+\t...this.\n+\t(*cond_<optab>_nonextend<SVE_FULL_HSDI:mode><SVE_FULL_F:mode>): Split\n+\tinto...\n+\t(*cond_<optab>_nonextend<SVE_FULL_HSDI:mode><SVE_FULL_F:mode>_relaxed):\n+\t...this and...\n+\t(*cond_<optab>_nonextend<SVE_FULL_HSDI:mode><SVE_FULL_F:mode>_strict):\n+\t...this.\n+\t* config/aarch64/aarch64-sve2.md\n+\t(*cond_<SVE2_COND_FP_UNARY_LONG:optab><mode>): Split into...\n+\t(*cond_<SVE2_COND_FP_UNARY_LONG:optab><mode>_relaxed): ...this and...\n+\t(*cond_<SVE2_COND_FP_UNARY_LONG:optab><mode>_strict): ...this.\n+\t(*cond_<SVE2_COND_FP_UNARY_NARROWB:optab><mode>_any): Split into...\n+\t(*cond_<SVE2_COND_FP_UNARY_NARROWB:optab><mode>_any_relaxed): ...this\n+\tand...\n+\t(*cond_<SVE2_COND_FP_UNARY_NARROWB:optab><mode>_any_strict): ...this.\n+\t(*cond_<SVE2_COND_INT_UNARY_FP:optab><mode>): Split into...\n+\t(*cond_<SVE2_COND_INT_UNARY_FP:optab><mode>_relaxed): ...this and...\n+\t(*cond_<SVE2_COND_INT_UNARY_FP:optab><mode>_strict): ...this.\n+\n+2020-10-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/arm/neon.md (*sub<VDQ:mode>3_neon): Use the new mode macros\n+\tfor the insn condition.\n+\t(sub<VH:mode>3, *mul<VDQW:mode>3_neon): Likewise.\n+\t(mul<VDQW:mode>3add<VDQW:mode>_neon): Likewise.\n+\t(mul<VH:mode>3add<VH:mode>_neon): Likewise.\n+\t(mul<VDQW:mode>3neg<VDQW:mode>add<VDQW:mode>_neon): Likewise.\n+\t(fma<VCVTF:mode>4, fma<VH:mode>4, *fmsub<VCVTF:mode>4): Likewise.\n+\t(quad_halves_<code>v4sf, reduc_plus_scal_<VD:mode>): Likewise.\n+\t(reduc_plus_scal_<VQ:mode>, reduc_smin_scal_<VD:mode>): Likewise.\n+\t(reduc_smin_scal_<VQ:mode>, reduc_smax_scal_<VD:mode>): Likewise.\n+\t(reduc_smax_scal_<VQ:mode>, mul<VH:mode>3): Likewise.\n+\t(neon_vabd<VF:mode>_2, neon_vabd<VF:mode>_3): Likewise.\n+\t(fma<VH:mode>4_intrinsic): Delete.\n+\t(neon_vadd<VCVTF:mode>): Use the new mode macros to decide which\n+\tform of instruction to generate.\n+\t(neon_vmla<VDQW:mode>, neon_vmls<VDQW:mode>): Likewise.\n+\t(neon_vsub<VCVTF:mode>): Likewise.\n+\t(neon_vfma<VH:mode>): Generate the main fma<mode>4 form instead\n+\tof using fma<mode>4_intrinsic.\n+\n+2020-10-02  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/97193\n+\t* coverage.c (coverage_init): GCDA note files should not be\n+\tmangled and should end in output directory.\n+\n+2020-10-02  Jason Merril  <jason@redhat.com>\n+\n+\t* gimple.h (gimple_call_operator_delete_p): Rename from\n+\tgimple_call_replaceable_operator_delete_p.\n+\t* gimple.c (gimple_call_operator_delete_p): Likewise.\n+\t* tree.h (DECL_IS_REPLACEABLE_OPERATOR_DELETE_P): Remove.\n+\t* tree-ssa-dce.c (mark_all_reaching_defs_necessary_1): Adjust.\n+\t(propagate_necessity): Likewise.\n+\t(eliminate_unnecessary_stmts): Likewise.\n+\t* tree-ssa-structalias.c (find_func_aliases_for_call): Likewise.\n+\n+2020-10-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple.h (GF_CALL_FROM_NEW_OR_DELETE): New call flag.\n+\t(gimple_call_set_from_new_or_delete): New.\n+\t(gimple_call_from_new_or_delete): Likewise.\n+\t* gimple.c (gimple_build_call_from_tree): Set\n+\tGF_CALL_FROM_NEW_OR_DELETE appropriately.\n+\t* ipa-icf-gimple.c (func_checker::compare_gimple_call):\n+\tCompare gimple_call_from_new_or_delete.\n+\t* tree-ssa-dce.c (mark_all_reaching_defs_necessary_1): Make\n+\tsure to only consider new/delete calls from new or delete\n+\texpressions.\n+\t(propagate_necessity): Likewise.\n+\t(eliminate_unnecessary_stmts): Likewise.\n+\t* tree-ssa-structalias.c (find_func_aliases_for_call):\n+\tLikewise.\n+\n+2020-10-02  Jason Merril  <jason@redhat.com>\n+\n+\t* tree.h (CALL_FROM_NEW_OR_DELETE_P): Move from cp-tree.h.\n+\t* tree-core.h: Document new usage of protected_flag.\n+\n+2020-10-02  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.h (irange::fits_p): New.\n+\n 2020-10-01  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000.c (rs6000_legitimize_address): Use"}, {"sha": "c28ca09d2312b39293dc6ce5e656b09ff04f994d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b9b8f02a1cdf910e63b726db22de99d90b3259/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b9b8f02a1cdf910e63b726db22de99d90b3259/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=b0b9b8f02a1cdf910e63b726db22de99d90b3259", "patch": "@@ -1 +1 @@\n-20201002\n+20201003"}, {"sha": "472fcbe7e26151aa52ca0aef87b388785889e4ee", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b9b8f02a1cdf910e63b726db22de99d90b3259/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b9b8f02a1cdf910e63b726db22de99d90b3259/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b0b9b8f02a1cdf910e63b726db22de99d90b3259", "patch": "@@ -1,3 +1,68 @@\n+2020-10-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97014\n+\t* cxx-pretty-print.c (pp_cxx_template_argument_list): If the\n+\targument is template_parm_object_p, print its DECL_INITIAL.\n+\n+2020-10-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (lang_decl_base): anticipated_p is not used for\n+\tanticipatedness.\n+\t(DECL_ANTICIPATED): Delete.\n+\t* decl.c (duplicate_decls): Delete DECL_ANTICIPATED_management,\n+\tuse was_hidden.\n+\t(cxx_builtin_function): Drop DECL_ANTICIPATED setting.\n+\t(xref_tag_1): Drop DECL_ANTICIPATED assert.\n+\t* name-lookup.c (name_lookup::adl_class_only): Drop\n+\tDECL_ANTICIPATED check.\n+\t(name_lookup::search_adl): Always dedup.\n+\t(anticipated_builtin_p): Reimplement.\n+\t(do_pushdecl): Drop DECL_ANTICIPATED asserts & update.\n+\t(lookup_elaborated_type_1): Drop DECL_ANTICIPATED update.\n+\t(do_pushtag): Drop DECL_ANTICIPATED setting.\n+\t* pt.c (push_template_decl): Likewise.\n+\t(tsubst_friend_class): Likewise.\n+\n+2020-10-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* name-lookup.c (consider_decl): New, broken out of ...\n+\t(consider_binding_level): ... here.  Iterate the hash table for\n+\tnamespace bindings.\n+\n+2020-10-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (base_ctor_omit_inherited_parms): Declare.\n+\t* class.c (add_method): Refactor main loop, only pass fns to\n+\tctor_omit_inherited_parms.\n+\t(build_cdtor_clones): Rename bool parms.\n+\t(clone_cdtor): Call base_ctor_omit_inherited_parms.\n+\t* method.c (base_ctor_omit_inherited_parms): New, broken out of\n+\t...\n+\t(ctor_omit_inherited_parms): ... here, call it with\n+\tDECL_CLONED_FUNCTION.\n+\n+2020-10-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (cp_fname_init): Delete declaration.\n+\t* decl.c (cp_fname_init): Merge into only caller ...\n+\t(cp_make_fname): ... here & refactor.\n+\n+2020-10-02  Jason Merril  <jason@redhat.com>\n+\n+\t* call.c (build_operator_new_call): Set CALL_FROM_NEW_OR_DELETE_P.\n+\t(build_op_delete_call): Likewise.\n+\t* init.c (build_new_1, build_vec_delete_1, build_delete): Not here.\n+\t(build_delete):\n+\n+2020-10-02  Jason Merril  <jason@redhat.com>\n+\n+\t* lambda.c (call_from_lambda_thunk_p): New.\n+\t* cp-gimplify.c (cp_genericize_r): Use it.\n+\t* pt.c (tsubst_copy_and_build): Use it.\n+\t* typeck.c (check_return_expr): Use it.\n+\t* cp-tree.h: Declare it.\n+\t(CALL_FROM_NEW_OR_DELETE_P): Move to gcc/tree.h.\n+\n 2020-10-01  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (DECL_ANTICIPATED): Adjust comment."}, {"sha": "af9cc746fdc305d4391f8bcd402b988f26fbd308", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b9b8f02a1cdf910e63b726db22de99d90b3259/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b9b8f02a1cdf910e63b726db22de99d90b3259/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b0b9b8f02a1cdf910e63b726db22de99d90b3259", "patch": "@@ -1,3 +1,12 @@\n+2020-10-02  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* trans-decl.c (gfc_build_library_function_decl_with_spec): Verify\n+\tfnspec.\n+\t(gfc_build_intrinsic_function_decls): Update fnspecs.\n+\t(gfc_build_builtin_function_decls): Update fnspecs.\n+\t* trans-io.c (gfc_build_io_library_fndecls): Update fnspecs.\n+\t* trans-types.c (create_fn_spec): Update fnspecs.\n+\n 2020-09-30  Jan Hubicka  <jh@suse.cz>\n \n \t* trans-decl.c (gfc_build_intrinsic_function_decls): Add traling dots"}, {"sha": "e84bf8ef8869a4013fee97a2cff9458e08c9d234", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b9b8f02a1cdf910e63b726db22de99d90b3259/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b9b8f02a1cdf910e63b726db22de99d90b3259/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b0b9b8f02a1cdf910e63b726db22de99d90b3259", "patch": "@@ -1,3 +1,95 @@\n+2020-10-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-c++-common/spellcheck-reserved.c: Adjust diagnostic.\n+\t* g++.dg/spellcheck-typenames.C: Adjust diagnostic.\n+\n+2020-10-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/inherit/pr97268.C: New.\n+\n+2020-10-02  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* gcc.dg/ipa/ipcp-loophint-1.c: New test.\n+\n+2020-10-02  Joe Ramsay  <Joe.Ramsay@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vmaxavq_p_s16.c: Add test for mismatched\n+\twidth of scalar argument.\n+\t* gcc.target/arm/mve/intrinsics/vmaxavq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxavq_p_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxavq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxavq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxavq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxvq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxvq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxvq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxvq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxvq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxvq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminavq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminavq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminavq_p_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminavq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminavq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminavq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmavq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmavq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmavq_p_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmavq_p_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmvq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmvq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmvq_p_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmvq_p_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminvq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminvq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminvq_p_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminvq_p_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminvq_p_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminvq_p_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminvq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminvq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminvq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminvq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminvq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminvq_u8.c: Likewise.\n+\n+2020-10-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/arm/armv8_2-fp16-arith-2.c (float16_t): Use _Float16_t\n+\trather than __fp16.\n+\t(float16x4_t, float16x4_t): Likewise.\n+\t(fp16_abs): Use __builtin_fabsf16.\n+\n+2020-10-02  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* gcc.target/aarch64/extend-syntax.c: Fix assembler checks for\n+\tilp32, disable check-function-bodies on ilp32.\n+\t* gcc.target/aarch64/subsp.c: Only check second scan-assembler\n+\ton lp64 since the code on ilp32 is missing the optimization\n+\tneeded for this test to pass.\n+\n+2020-10-02  Jason Merril  <jason@redhat.com>\n+\n+\t* g++.dg/pr94314.C: new/delete no longer omitted.\n+\n+2020-10-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* g++.dg/tree-ssa/pta-delete-1.C: New testcase.\n+\n 2020-10-01  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* lib/target-supports.exp (check_effective_target_vect_cond_mixed): Add"}, {"sha": "243a1f943a4e8efbcb16e03c43c172b033413da1", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b9b8f02a1cdf910e63b726db22de99d90b3259/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b9b8f02a1cdf910e63b726db22de99d90b3259/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=b0b9b8f02a1cdf910e63b726db22de99d90b3259", "patch": "@@ -1,3 +1,7 @@\n+2020-10-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* libcp1plugin.cc (libcp1plugin.cc): Drop DECL_ANTICIPATED test.\n+\n 2020-09-25  Nathan Sidwell  <nathan@acm.org>\n \n \t* libcp1plugin.cc (supplement_binding): Use DECL_BULTIN_P."}, {"sha": "67c29edabae2f089ebd2260928b9f01ed39105c8", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b9b8f02a1cdf910e63b726db22de99d90b3259/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b9b8f02a1cdf910e63b726db22de99d90b3259/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=b0b9b8f02a1cdf910e63b726db22de99d90b3259", "patch": "@@ -1,3 +1,10 @@\n+2020-10-02  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* Makefile.in: Regenerate with automake 1.15.1.\n+\t* aclocal.m4: Likewise.\n+\t* configure: Likewise.\n+\t* testsuite/Makefile.in: Likewise.\n+\n 2020-09-30  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* parallel.c (gomp_resolve_num_threads): Ignore nest_var on nvptx"}, {"sha": "a53d8f4ba2c0c9764a9a5d288d16be96c19262eb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b9b8f02a1cdf910e63b726db22de99d90b3259/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b9b8f02a1cdf910e63b726db22de99d90b3259/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b0b9b8f02a1cdf910e63b726db22de99d90b3259", "patch": "@@ -1,3 +1,22 @@\n+2020-10-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/29_atomics/atomic_float/value_init.cc: Use float\n+\tinstead of double so that __atomic_load_8 isn't needed.\n+\n+2020-10-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/18_support/96817.cc: Use terminate handler that\n+\tcalls _Exit(0).\n+\n+2020-10-02  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/stl_iterator.h (reverse_iterator::iter_move):\n+\tDefine for C++20 as per P0896.\n+\t(reverse_iterator::iter_swap): Likewise.\n+\t(move_iterator::operator*): Apply P0896 changes for C++20.\n+\t(move_iterator::operator[]): Likewise.\n+\t* testsuite/24_iterators/reverse_iterator/cust.cc: New test.\n+\n 2020-10-01  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* config/cpu/arm/cxxabi_tweaks.h (_GLIBCXX_GUARD_TEST_AND_ACQUIRE):"}]}