{"sha": "ca5e04b2074f0d7c6454eaaca2ea6acaaf624daf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E1ZTA0YjIwNzRmMGQ3YzY0NTRlYWFjYTJlYTZhY2FhZjYyNGRhZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-06-30T09:46:01Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-06-30T09:46:01Z"}, "message": "parse.y (expr_no_comma_rangle): New non-terminal.\n\n\t* parse.y (expr_no_comma_rangle): New non-terminal.\n\t(template_parm): Use it for default parameter case.\n\t(template_arg): Use it.\n\t(expr_no_commas): Remove commented out undefined extensions.\n\t* Makefile.in (CONFLICTS): Adjust to 33 s/r & 48 r/r.\n\t* parse.h, parse.c: Rebuilt.\n\nFrom-SVN: r34806", "tree": {"sha": "7ecd9fb182292687cfa646171a6222d8d68cafb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ecd9fb182292687cfa646171a6222d8d68cafb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca5e04b2074f0d7c6454eaaca2ea6acaaf624daf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca5e04b2074f0d7c6454eaaca2ea6acaaf624daf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca5e04b2074f0d7c6454eaaca2ea6acaaf624daf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca5e04b2074f0d7c6454eaaca2ea6acaaf624daf/comments", "author": null, "committer": null, "parents": [{"sha": "3139472f7ac7f5869a7b1b4d063f9dc70c6dd383", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3139472f7ac7f5869a7b1b4d063f9dc70c6dd383", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3139472f7ac7f5869a7b1b4d063f9dc70c6dd383"}], "stats": {"total": 8980, "additions": 4608, "deletions": 4372}, "files": [{"sha": "c98bf630fda946b8b3063bbb6dd1bdfb04475a15", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5e04b2074f0d7c6454eaaca2ea6acaaf624daf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5e04b2074f0d7c6454eaaca2ea6acaaf624daf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ca5e04b2074f0d7c6454eaaca2ea6acaaf624daf", "patch": "@@ -1,3 +1,12 @@\n+2000-06-30  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* parse.y (expr_no_comma_rangle): New non-terminal.\n+\t(template_parm): Use it for default parameter case.\n+\t(template_arg): Use it.\n+\t(expr_no_commas): Remove commented out undefined extensions.\n+\t* Makefile.in (CONFLICTS): Adjust to 33 s/r & 48 r/r.\n+\t* parse.h, parse.c: Rebuilt.\n+\n 2000-06-30  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (struct language_function): Remove temp_name_counter."}, {"sha": "2232986fcb6c22f834248a1f5700f0b77e822c54", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5e04b2074f0d7c6454eaaca2ea6acaaf624daf/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5e04b2074f0d7c6454eaaca2ea6acaaf624daf/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=ca5e04b2074f0d7c6454eaaca2ea6acaaf624daf", "patch": "@@ -219,7 +219,7 @@ parse.o : $(PARSE_C) $(CXX_TREE_H) $(srcdir)/../flags.h lex.h \\\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(BIG_SWITCHFLAG) \\\n   `echo $(PARSE_C) | sed 's,^\\./,,'`\n \n-CONFLICTS = expect 32 shift/reduce conflicts and 58 reduce/reduce conflicts.\n+CONFLICTS = expect 33 shift/reduce conflicts and 58 reduce/reduce conflicts.\n $(PARSE_H) : $(PARSE_C)\n $(PARSE_C) : $(srcdir)/parse.y\n \t@echo $(CONFLICTS)"}, {"sha": "bbde2f92f57e060ab1cf491facfe0197e9587f2c", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 4541, "deletions": 4355, "changes": 8896, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5e04b2074f0d7c6454eaaca2ea6acaaf624daf/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5e04b2074f0d7c6454eaaca2ea6acaaf624daf/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=ca5e04b2074f0d7c6454eaaca2ea6acaaf624daf"}, {"sha": "c0d51b59de9d9f5dfc52a85930047948e6f47bdb", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 57, "deletions": 16, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5e04b2074f0d7c6454eaaca2ea6acaaf624daf/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5e04b2074f0d7c6454eaaca2ea6acaaf624daf/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=ca5e04b2074f0d7c6454eaaca2ea6acaaf624daf", "patch": "@@ -325,7 +325,8 @@ cp_parse_init ()\n %type <ttype> identifier IDENTIFIER TYPENAME CONSTANT expr nonnull_exprlist\n %type <ttype> PFUNCNAME maybe_identifier\n %type <ttype> paren_expr_or_null nontrivial_exprlist SELFNAME\n-%type <ttype> expr_no_commas cast_expr unary_expr primary string STRING\n+%type <ttype> expr_no_commas expr_no_comma_rangle\n+%type <ttype> cast_expr unary_expr primary string STRING\n %type <ttype> reserved_declspecs boolean.literal\n %type <ttype> reserved_typespecquals\n %type <ttype> SCSPEC TYPESPEC CV_QUALIFIER maybe_cv_qualifier\n@@ -641,7 +642,7 @@ template_parm:\n \t\t{ $$ = build_tree_list (groktypename ($3.t), $1); }\n \t| parm\n \t\t{ $$ = build_tree_list (NULL_TREE, $1.t); }\n-\t| parm '=' expr_no_commas  %prec ARITHCOMPARE\n+\t| parm '=' expr_no_comma_rangle\n \t\t{ $$ = build_tree_list ($3, $1.t); }\n \t| template_template_parm\n \t\t{ $$ = build_tree_list (NULL_TREE, $1); }\n@@ -1065,7 +1066,7 @@ template_arg:\n \t\t  if (DECL_TEMPLATE_TEMPLATE_PARM_P ($$))\n \t\t    $$ = TREE_TYPE ($$);\n \t\t}\n-\t| expr_no_commas  %prec ARITHCOMPARE\n+\t| expr_no_comma_rangle\n \t;\n \n unop:\n@@ -1368,19 +1369,59 @@ expr_no_commas:\n \t\t{ $$ = build_throw (NULL_TREE); }\n \t| THROW expr_no_commas\n \t\t{ $$ = build_throw ($2); }\n-/* These extensions are not defined.  The second arg to build_m_component_ref\n-   is old, build_m_component_ref now does an implicit\n-   build_indirect_ref (x, NULL_PTR) on the second argument.\n-\t| object '&' expr_no_commas  %prec UNARY\n-\t\t{ $$ = build_m_component_ref ($$, build_x_unary_op (ADDR_EXPR, $3)); }\n-\t| object unop expr_no_commas  %prec UNARY\n-\t\t{ $$ = build_m_component_ref ($$, build_x_unary_op ($2, $3)); }\n-\t| object '(' type_id ')' expr_no_commas  %prec UNARY\n-\t\t{ tree type = groktypename ($3.t);\n-\t\t  $$ = build_m_component_ref ($$, build_c_cast (type, $5)); }\n-\t| object primary_no_id  %prec UNARY\n-\t\t{ $$ = build_m_component_ref ($$, $2); }\n-*/\n+\t;\n+\n+expr_no_comma_rangle:\n+\t  cast_expr\n+\t/* Handle general members.  */\n+\t| expr_no_comma_rangle POINTSAT_STAR expr_no_comma_rangle\n+\t\t{ $$ = build_x_binary_op (MEMBER_REF, $$, $3); }\n+\t| expr_no_comma_rangle DOT_STAR expr_no_comma_rangle\n+\t\t{ $$ = build_m_component_ref ($$, $3); }\n+\t| expr_no_comma_rangle '+' expr_no_comma_rangle\n+\t\t{ $$ = build_x_binary_op ($2, $$, $3); }\n+\t| expr_no_comma_rangle '-' expr_no_comma_rangle\n+\t\t{ $$ = build_x_binary_op ($2, $$, $3); }\n+\t| expr_no_comma_rangle '*' expr_no_comma_rangle\n+\t\t{ $$ = build_x_binary_op ($2, $$, $3); }\n+\t| expr_no_comma_rangle '/' expr_no_comma_rangle\n+\t\t{ $$ = build_x_binary_op ($2, $$, $3); }\n+\t| expr_no_comma_rangle '%' expr_no_comma_rangle\n+\t\t{ $$ = build_x_binary_op ($2, $$, $3); }\n+\t| expr_no_comma_rangle LSHIFT expr_no_comma_rangle\n+\t\t{ $$ = build_x_binary_op ($2, $$, $3); }\n+\t| expr_no_comma_rangle RSHIFT expr_no_comma_rangle\n+\t\t{ $$ = build_x_binary_op ($2, $$, $3); }\n+\t| expr_no_comma_rangle ARITHCOMPARE expr_no_comma_rangle\n+\t\t{ $$ = build_x_binary_op ($2, $$, $3); }\n+\t| expr_no_comma_rangle '<' expr_no_comma_rangle\n+\t\t{ $$ = build_x_binary_op (LT_EXPR, $$, $3); }\n+\t| expr_no_comma_rangle EQCOMPARE expr_no_comma_rangle\n+\t\t{ $$ = build_x_binary_op ($2, $$, $3); }\n+\t| expr_no_comma_rangle MIN_MAX expr_no_comma_rangle\n+\t\t{ $$ = build_x_binary_op ($2, $$, $3); }\n+\t| expr_no_comma_rangle '&' expr_no_comma_rangle\n+\t\t{ $$ = build_x_binary_op ($2, $$, $3); }\n+\t| expr_no_comma_rangle '|' expr_no_comma_rangle\n+\t\t{ $$ = build_x_binary_op ($2, $$, $3); }\n+\t| expr_no_comma_rangle '^' expr_no_comma_rangle\n+\t\t{ $$ = build_x_binary_op ($2, $$, $3); }\n+\t| expr_no_comma_rangle ANDAND expr_no_comma_rangle\n+\t\t{ $$ = build_x_binary_op (TRUTH_ANDIF_EXPR, $$, $3); }\n+\t| expr_no_comma_rangle OROR expr_no_comma_rangle\n+\t\t{ $$ = build_x_binary_op (TRUTH_ORIF_EXPR, $$, $3); }\n+\t| expr_no_comma_rangle '?' xexpr ':' expr_no_comma_rangle\n+\t\t{ $$ = build_x_conditional_expr ($$, $3, $5); }\n+\t| expr_no_comma_rangle '=' expr_no_comma_rangle\n+\t\t{ $$ = build_x_modify_expr ($$, NOP_EXPR, $3);\n+\t\t  if ($$ != error_mark_node)\n+                    C_SET_EXP_ORIGINAL_CODE ($$, MODIFY_EXPR); }\n+\t| expr_no_comma_rangle ASSIGN expr_no_comma_rangle\n+\t\t{ $$ = build_x_modify_expr ($$, $2, $3); }\n+\t| THROW\n+\t\t{ $$ = build_throw (NULL_TREE); }\n+\t| THROW expr_no_comma_rangle\n+\t\t{ $$ = build_throw ($2); }\n \t;\n \n notype_unqualified_id:"}]}