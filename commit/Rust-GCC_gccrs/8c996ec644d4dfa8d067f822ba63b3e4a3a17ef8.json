{"sha": "8c996ec644d4dfa8d067f822ba63b3e4a3a17ef8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM5OTZlYzY0NGQ0ZGZhOGQwNjdmODIyYmE2M2IzZTRhM2ExN2VmOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-04-16T07:55:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-04-16T07:55:41Z"}, "message": "re PR tree-optimization/56049 (Simplification to constants not done)\n\n2019-04-16  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/56049\n\t* tree-ssa-loop-im.c (mem_ref_hasher::equal): Elide alias-set\n\tequality check if alias-set zero will prevail.\n\n\t* gfortran.dg/pr56049.f90: New testcase.\n\nFrom-SVN: r270378", "tree": {"sha": "1cbc2c80ede9e67a31e5a00d72cb176dda0fbced", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cbc2c80ede9e67a31e5a00d72cb176dda0fbced"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c996ec644d4dfa8d067f822ba63b3e4a3a17ef8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c996ec644d4dfa8d067f822ba63b3e4a3a17ef8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c996ec644d4dfa8d067f822ba63b3e4a3a17ef8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c996ec644d4dfa8d067f822ba63b3e4a3a17ef8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d71d6f24fee0385acfec934d4337061eb863c0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d71d6f24fee0385acfec934d4337061eb863c0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d71d6f24fee0385acfec934d4337061eb863c0f"}], "stats": {"total": 52, "additions": 51, "deletions": 1}, "files": [{"sha": "393e176175299f52483c4defb4ee88d54947e91e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c996ec644d4dfa8d067f822ba63b3e4a3a17ef8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c996ec644d4dfa8d067f822ba63b3e4a3a17ef8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c996ec644d4dfa8d067f822ba63b3e4a3a17ef8", "patch": "@@ -1,3 +1,9 @@\n+2019-04-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56049\n+\t* tree-ssa-loop-im.c (mem_ref_hasher::equal): Elide alias-set\n+\tequality check if alias-set zero will prevail.\n+\n 2019-04-15  Jeff Law  <law@redhat.com>\n \n \t* config/microblaze/microblaze.c (microblaze_expand_block_move): Treat"}, {"sha": "9f89fba152e61ea6ef799fd58a4caeb164f04eb5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c996ec644d4dfa8d067f822ba63b3e4a3a17ef8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c996ec644d4dfa8d067f822ba63b3e4a3a17ef8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8c996ec644d4dfa8d067f822ba63b3e4a3a17ef8", "patch": "@@ -1,3 +1,8 @@\n+2019-04-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56049\n+\t* gfortran.dg/pr56049.f90: New testcase.\n+\n 2019-04-15  Richard Biener  <rguenther@suse.de>\n \n \tPR debug/90074"}, {"sha": "d760320cd671718dc6b0a06bf7738dd11d36a9a0", "filename": "gcc/testsuite/gfortran.dg/pr56049.f90", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c996ec644d4dfa8d067f822ba63b3e4a3a17ef8/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr56049.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c996ec644d4dfa8d067f822ba63b3e4a3a17ef8/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr56049.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr56049.f90?ref=8c996ec644d4dfa8d067f822ba63b3e4a3a17ef8", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do compile }\n+! { dg-options \"-O3 -fdump-tree-optimized\" }\n+\n+program inline\n+\n+    integer i\n+    integer a(8,8), b(8,8)\n+\n+    a = 0\n+    do i = 1, 10000000\n+        call add(b, a, 1)\n+        a = b\n+    end do\n+\n+    print *, a\n+\n+contains\n+\n+    subroutine add(b, a, o)\n+        integer, intent(inout) :: b(8,8)\n+        integer, intent(in) :: a(8,8), o\n+        b = a + o\n+    end subroutine add\n+\n+end program inline\n+\n+! Check there's no loop left, just two bb 2 in two functions.\n+! { dg-final { scan-tree-dump-times \"<bb \\[0-9\\]*>\" 2 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"<bb 2>\" 2 \"optimized\" } }"}, {"sha": "56d8e8e4330b9d013d4559fccdf19b768cbd86fb", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c996ec644d4dfa8d067f822ba63b3e4a3a17ef8/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c996ec644d4dfa8d067f822ba63b3e4a3a17ef8/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=8c996ec644d4dfa8d067f822ba63b3e4a3a17ef8", "patch": "@@ -178,7 +178,17 @@ mem_ref_hasher::equal (const im_mem_ref *mem1, const ao_ref *obj2)\n \t    && known_eq (mem1->mem.size, obj2->size)\n \t    && known_eq (mem1->mem.max_size, obj2->max_size)\n \t    && mem1->mem.volatile_p == obj2->volatile_p\n-\t    && mem1->mem.ref_alias_set == obj2->ref_alias_set\n+\t    && (mem1->mem.ref_alias_set == obj2->ref_alias_set\n+\t\t/* We are not canonicalizing alias-sets but for the\n+\t\t   special-case we didn't canonicalize yet and the\n+\t\t   incoming ref is a alias-set zero MEM we pick\n+\t\t   the correct one already.  */\n+\t\t|| (!mem1->ref_canonical\n+\t\t    && (TREE_CODE (obj2->ref) == MEM_REF\n+\t\t\t|| TREE_CODE (obj2->ref) == TARGET_MEM_REF)\n+\t\t    && obj2->ref_alias_set == 0)\n+\t\t/* Likewise if there's a canonical ref with alias-set zero.  */\n+\t\t|| (mem1->ref_canonical && mem1->mem.ref_alias_set == 0))\n \t    && types_compatible_p (TREE_TYPE (mem1->mem.ref),\n \t\t\t\t   TREE_TYPE (obj2->ref)));\n   else"}]}