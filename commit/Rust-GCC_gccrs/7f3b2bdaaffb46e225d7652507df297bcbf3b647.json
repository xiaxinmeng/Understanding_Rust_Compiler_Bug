{"sha": "7f3b2bdaaffb46e225d7652507df297bcbf3b647", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YzYjJiZGFhZmZiNDZlMjI1ZDc2NTI1MDdkZjI5N2JjYmYzYjY0Nw==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2005-07-03T01:14:56Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2005-07-03T01:14:56Z"}, "message": "re PR c++/18279 (missing function bodies from -fdump-translation-unit)\n\n        PR c++/18279\n        * c-decl.c (c_write_global_declarations): Dump contents of\n        external scope to.\n        * tree-dump.c (dequeue_and_dump): Dump abstract origin of a\n        decl.\n        <TRY_FINALLY_EXPR>, <RETURN_EXPR>, <CASE_LABEL_EXPR>,\n        <LABEL_EXPR>,\n        <GOTO_EXPR>, <SWITCH_EXPR>: Add.\n        (dump_enabled_p): Return TRUE if PHASE is TDI_all and any dump\n        is enabled.\n\nCo-Authored-By: Christian Ehrhardt <ehrhardt@mathematik.uni-ulm.de>\n\nFrom-SVN: r101544", "tree": {"sha": "8a78cec45f0a8ab8c42a0303b9473ffe104c02fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a78cec45f0a8ab8c42a0303b9473ffe104c02fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f3b2bdaaffb46e225d7652507df297bcbf3b647", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f3b2bdaaffb46e225d7652507df297bcbf3b647", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f3b2bdaaffb46e225d7652507df297bcbf3b647", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f3b2bdaaffb46e225d7652507df297bcbf3b647/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ea40ba9c04882ea2ddf987e2783f98cc38bac081", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea40ba9c04882ea2ddf987e2783f98cc38bac081", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea40ba9c04882ea2ddf987e2783f98cc38bac081"}], "stats": {"total": 78, "additions": 75, "deletions": 3}, "files": [{"sha": "3ef3f0856e763f25f4d7caf80f880c118754118d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3b2bdaaffb46e225d7652507df297bcbf3b647/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3b2bdaaffb46e225d7652507df297bcbf3b647/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f3b2bdaaffb46e225d7652507df297bcbf3b647", "patch": "@@ -1,3 +1,15 @@\n+2005-07-02  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+            Christian Ehrhardt <ehrhardt@mathematik.uni-ulm.de>\n+\n+\tPR c++/18279\n+\t* c-decl.c (c_write_global_declarations): Dump contents of\n+\texternal scope to.\n+\t* tree-dump.c (dequeue_and_dump): Dump abstract origin of a decl.\n+\t<TRY_FINALLY_EXPR>, <RETURN_EXPR>, <CASE_LABEL_EXPR>, <LABEL_EXPR>,\n+\t<GOTO_EXPR>, <SWITCH_EXPR>: Add.\n+\t(dump_enabled_p): Return TRUE if PHASE is TDI_all and any dump\n+\tis enabled.\n+\t\n 2005-07-03  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* c-common.h (GCC_DIAG_STYLE): Define."}, {"sha": "d516ffeb3bbca365ff5b299bb92d30e370a7e33a", "filename": "gcc/c-decl.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3b2bdaaffb46e225d7652507df297bcbf3b647/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3b2bdaaffb46e225d7652507df297bcbf3b647/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=7f3b2bdaaffb46e225d7652507df297bcbf3b647", "patch": "@@ -7541,6 +7541,17 @@ c_write_global_declarations (void)\n      through wrapup_global_declarations and check_global_declarations.  */\n   for (t = all_translation_units; t; t = TREE_CHAIN (t))\n     c_write_global_declarations_1 (BLOCK_VARS (DECL_INITIAL (t)));\n+  if (ext_block)\n+    {\n+      tree tmp = BLOCK_VARS (ext_block);\n+      int flags;\n+      FILE * stream = dump_begin (TDI_tu, &flags);\n+      if (stream && tmp)\n+        {\n+          dump_node (tmp, flags & ~TDF_SLIM, stream);\n+          dump_end (TDI_tu, stream);\n+        }\n+    }\n   c_write_global_declarations_1 (BLOCK_VARS (ext_block));\n \n   /* Generate functions to call static constructors and destructors"}, {"sha": "b31c7b73862987b05652defa093f2143728e283e", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 52, "deletions": 3, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f3b2bdaaffb46e225d7652507df297bcbf3b647/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f3b2bdaaffb46e225d7652507df297bcbf3b647/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=7f3b2bdaaffb46e225d7652507df297bcbf3b647", "patch": "@@ -322,6 +322,8 @@ dequeue_and_dump (dump_info_p di)\n       if (DECL_ASSEMBLER_NAME_SET_P (t)\n \t  && DECL_ASSEMBLER_NAME (t) != DECL_NAME (t))\n \tdump_child (\"mngl\", DECL_ASSEMBLER_NAME (t));\n+      if (DECL_ABSTRACT_ORIGIN (t))\n+        dump_child (\"orig\", DECL_ABSTRACT_ORIGIN (t));\n       /* And types.  */\n       queue_and_dump_type (di, t);\n       dump_child (\"scpe\", DECL_CONTEXT (t));\n@@ -572,6 +574,11 @@ dequeue_and_dump (dump_info_p di)\n       dump_child (\"op 2\", TREE_OPERAND (t, 2));\n       break;\n \n+    case TRY_FINALLY_EXPR:\n+      dump_child (\"op 0\", TREE_OPERAND (t, 0));\n+      dump_child (\"op 1\", TREE_OPERAND (t, 1));\n+      break;\n+\n     case CALL_EXPR:\n       dump_child (\"fn\", TREE_OPERAND (t, 0));\n       dump_child (\"args\", TREE_OPERAND (t, 1));\n@@ -594,6 +601,10 @@ dequeue_and_dump (dump_info_p di)\n       dump_child (\"cond\", TREE_OPERAND (t, 0));\n       break;\n \n+    case RETURN_EXPR:\n+      dump_child (\"expr\", TREE_OPERAND (t, 0));\n+      break;\n+\n     case TARGET_EXPR:\n       dump_child (\"decl\", TREE_OPERAND (t, 0));\n       dump_child (\"init\", TREE_OPERAND (t, 1));\n@@ -605,6 +616,29 @@ dequeue_and_dump (dump_info_p di)\n       dump_child (\"init\", TREE_OPERAND (t, 3));\n       break;\n \n+    case CASE_LABEL_EXPR:\n+      dump_child (\"name\", CASE_LABEL (t));\n+      if (CASE_LOW (t)) {\n+        dump_child (\"low \", CASE_LOW (t));\n+\tif (CASE_HIGH (t)) {\n+\t  dump_child (\"high\", CASE_HIGH (t));\n+\t}\n+      }\n+      break;\n+    case LABEL_EXPR:\n+      dump_child (\"name\", TREE_OPERAND (t,0));\n+      break;\n+    case GOTO_EXPR:\n+      dump_child (\"labl\", TREE_OPERAND (t, 0));\n+      break;\n+    case SWITCH_EXPR:\n+      dump_child (\"cond\", TREE_OPERAND (t, 0));\n+      dump_child (\"body\", TREE_OPERAND (t, 1));\n+      if (TREE_OPERAND (t, 2))\n+        {\n+      \t  dump_child (\"labl\", TREE_OPERAND (t,2));\n+        }\n+      break;\n     default:\n       /* There are no additional fields to print.  */\n       break;\n@@ -859,13 +893,28 @@ dump_begin (enum tree_dump_index phase, int *flag_ptr)\n   return stream;\n }\n \n-/* Returns nonzero if tree dump PHASE is enabled.  */\n+/* Returns nonzero if tree dump PHASE is enabled.  If PHASE is\n+   TDI_tree_all, return nonzero if any dump is enabled.  */\n \n int\n dump_enabled_p (enum tree_dump_index phase)\n {\n-  struct dump_file_info *dfi = get_dump_file_info (phase);\n-  return dfi->state;\n+  if (phase == TDI_tree_all)\n+    {\n+      size_t i;\n+      for (i = TDI_none + 1; i < (size_t) TDI_end; i++)\n+\tif (dump_files[i].state)\n+\t  return 1;\n+      for (i = 0; i < extra_dump_files_in_use; i++)\n+\tif (extra_dump_files[i].state)\n+\t  return 1;\n+      return 0;\n+    }\n+  else\n+    {\n+      struct dump_file_info *dfi = get_dump_file_info (phase);\n+      return dfi->state;\n+    }\n }\n \n /* Returns nonzero if tree dump PHASE has been initialized.  */"}]}