{"sha": "6f56efa94e845db0d5c934ca202295019bf334c1", "node_id": "C_kwDOANBUbNoAKDZmNTZlZmE5NGU4NDVkYjBkNWM5MzRjYTIwMjI5NTAxOWJmMzM0YzE", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-05-11T18:38:49Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-05-26T21:11:07Z"}, "message": "c++: improve -Waddress warnings with *_cast [PR105569]\n\nThis patch improves the diagnostic for -Waddress when it warns for\n\n  if (dynamic_cast<A*>(&ref))\n    // ...\n\nwhere 'ref' is a reference, which cannot be null.  In particular, it\nchanges\nwarning: comparing the result of pointer addition '(((A*)ref) + ((sizetype)(*(long int*)((& ref)->B::_vptr.B + -24))))' and NULL\nto\nwarning: the compiler can assume that the address of 'ref' will never be NULL\n\n\tPR c++/105569\n\ngcc/cp/ChangeLog:\n\n\t* typeck.cc (warn_for_null_address): Improve the warning when\n\tthe POINTER_PLUS_EXPR's base is of reference type.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/warn/Waddress-9.C: New test.", "tree": {"sha": "b23418750a1e6000006263be1144f8c877d9b716", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b23418750a1e6000006263be1144f8c877d9b716"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f56efa94e845db0d5c934ca202295019bf334c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f56efa94e845db0d5c934ca202295019bf334c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f56efa94e845db0d5c934ca202295019bf334c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f56efa94e845db0d5c934ca202295019bf334c1/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3397563ad6c8fc5d9675faf507e52dd2ed284202", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3397563ad6c8fc5d9675faf507e52dd2ed284202", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3397563ad6c8fc5d9675faf507e52dd2ed284202"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "190d710cd271e50eb2479ed803308c5c32d56951", "filename": "gcc/cp/typeck.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f56efa94e845db0d5c934ca202295019bf334c1/gcc%2Fcp%2Ftypeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f56efa94e845db0d5c934ca202295019bf334c1/gcc%2Fcp%2Ftypeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.cc?ref=6f56efa94e845db0d5c934ca202295019bf334c1", "patch": "@@ -4757,8 +4757,16 @@ warn_for_null_address (location_t location, tree op, tsubst_flags_t complain)\n       tree off = TREE_OPERAND (cop, 1);\n       if (!integer_zerop (off)\n \t  && !warning_suppressed_p (cop, OPT_Waddress))\n-\twarning_at (location, OPT_Waddress, \"comparing the result of pointer \"\n-\t\t    \"addition %qE and NULL\", cop);\n+\t{\n+\t  tree base = TREE_OPERAND (cop, 0);\n+\t  STRIP_NOPS (base);\n+\t  if (TYPE_REF_P (TREE_TYPE (base)))\n+\t    warning_at (location, OPT_Waddress, \"the compiler can assume that \"\n+\t\t\t\"the address of %qE will never be NULL\", base);\n+\t  else\n+\t    warning_at (location, OPT_Waddress, \"comparing the result of \"\n+\t\t\t\"pointer addition %qE and NULL\", cop);\n+\t}\n       return;\n     }\n   else if (CONVERT_EXPR_P (op)"}, {"sha": "d3e469734b83226f8de335eda6c31c92f039e648", "filename": "gcc/testsuite/g++.dg/warn/Waddress-9.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f56efa94e845db0d5c934ca202295019bf334c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f56efa94e845db0d5c934ca202295019bf334c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-9.C?ref=6f56efa94e845db0d5c934ca202295019bf334c1", "patch": "@@ -0,0 +1,31 @@\n+// PR c++/105569\n+// { dg-do compile { target c++11 } }\n+// { dg-options -Waddress }\n+\n+class A {};\n+\n+class B : public virtual A {};\n+\n+class C : public A {};\n+\n+int main() {\n+    B* object = new B();\n+    B &ref = *object;\n+\n+    bool b = nullptr == dynamic_cast<A*>(&ref); // { dg-warning \"the address of 'ref' will never be NULL\" }\n+    bool b4 = nullptr == static_cast<A*>(&ref); // { dg-warning \"the address of 'ref' will never be NULL\" }\n+    if (dynamic_cast<A*>(&ref)) // { dg-warning \"the address of 'ref' will never be NULL\" }\n+      {\n+      }\n+    if (static_cast<A*>(&ref)) // { dg-warning \"the address of 'ref' will never be NULL\" }\n+      {\n+      }\n+\n+    auto ptr = dynamic_cast<A*>(&ref);\n+    bool b2 = ptr == nullptr;\n+\n+    C* cobject = new C();\n+    C &cref = *cobject;\n+\n+    bool b3 = nullptr == dynamic_cast<A*>(&cref);\n+}"}]}