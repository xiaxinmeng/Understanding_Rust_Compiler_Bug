{"sha": "232c80f2d134d37a3d7b33113bffb03262ed1559", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMyYzgwZjJkMTM0ZDM3YTNkN2IzMzExM2JmZmIwMzI2MmVkMTU1OQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-11-13T09:06:26Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-11-13T09:06:26Z"}, "message": "GCOV: remove typedef for arc_t\n\n2017-11-13  Martin Liska  <mliska@suse.cz>\n\n\t* gcov.c (struct arc_info): Remove typedef for arc_t.\n\t(struct line_info): Likewise.\n\t(add_branch_counts): Likewise.\n\t(output_branch_count): Likewise.\n\t(function_info::~function_info): Likewise.\n\t(circuit): Likewise.\n\t(output_intermediate_line): Likewise.\n\t(read_graph_file): Likewise.\n\t(solve_flow_graph): Likewise.\n\t(find_exception_blocks): Likewise.\n\t(add_line_counts): Likewise.\n\t(accumulate_line_info): Likewise.\n\t(output_line_details): Likewise.\n\t(output_function_details): Likewise.\n\nFrom-SVN: r254676", "tree": {"sha": "5ba464214968ada8a1e8b7e61246bcbc87fabe22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ba464214968ada8a1e8b7e61246bcbc87fabe22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/232c80f2d134d37a3d7b33113bffb03262ed1559", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/232c80f2d134d37a3d7b33113bffb03262ed1559", "html_url": "https://github.com/Rust-GCC/gccrs/commit/232c80f2d134d37a3d7b33113bffb03262ed1559", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/232c80f2d134d37a3d7b33113bffb03262ed1559/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cb8758b2020069a521ba7fc0e0a82f18945982c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb8758b2020069a521ba7fc0e0a82f18945982c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb8758b2020069a521ba7fc0e0a82f18945982c9"}], "stats": {"total": 75, "additions": 46, "deletions": 29}, "files": [{"sha": "86fcfd2c0e3aea955bc64dffa12f974bc90f238d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/232c80f2d134d37a3d7b33113bffb03262ed1559/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/232c80f2d134d37a3d7b33113bffb03262ed1559/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=232c80f2d134d37a3d7b33113bffb03262ed1559", "patch": "@@ -1,3 +1,20 @@\n+2017-11-13  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcov.c (struct arc_info): Remove typedef for arc_t.\n+\t(struct line_info): Likewise.\n+\t(add_branch_counts): Likewise.\n+\t(output_branch_count): Likewise.\n+\t(function_info::~function_info): Likewise.\n+\t(circuit): Likewise.\n+\t(output_intermediate_line): Likewise.\n+\t(read_graph_file): Likewise.\n+\t(solve_flow_graph): Likewise.\n+\t(find_exception_blocks): Likewise.\n+\t(add_line_counts): Likewise.\n+\t(accumulate_line_info): Likewise.\n+\t(output_line_details): Likewise.\n+\t(output_function_details): Likewise.\n+\n 2017-11-13  Martin Liska  <mliska@suse.cz>\n \n \t* gcov.c (struct function_info): Remove typedef for function_t."}, {"sha": "49652b7eafa9ebce0f6725d2f0cadc20a4c479c6", "filename": "gcc/gcov.c", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/232c80f2d134d37a3d7b33113bffb03262ed1559/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/232c80f2d134d37a3d7b33113bffb03262ed1559/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=232c80f2d134d37a3d7b33113bffb03262ed1559", "patch": "@@ -79,7 +79,7 @@ struct source_info;\n \n /* Describes an arc between two basic blocks.  */\n \n-typedef struct arc_info\n+struct arc_info\n {\n   /* source and destination blocks.  */\n   struct block_info *src;\n@@ -113,7 +113,7 @@ typedef struct arc_info\n   /* Links to next arc on src and dst lists.  */\n   struct arc_info *succ_next;\n   struct arc_info *pred_next;\n-} arc_t;\n+};\n \n /* Describes which locations (lines and files) are associated with\n    a basic block.  */\n@@ -137,8 +137,8 @@ typedef struct block_info\n   block_info ();\n \n   /* Chain of exit and entry arcs.  */\n-  arc_t *succ;\n-  arc_t *pred;\n+  arc_info *succ;\n+  arc_info *pred;\n \n   /* Number of unprocessed exit and entry arcs.  */\n   gcov_type num_succ;\n@@ -166,7 +166,7 @@ typedef struct block_info\n   {\n     /* Single line graph cycle workspace.  Used for all-blocks\n        mode.  */\n-    arc_t *arc;\n+    arc_info *arc;\n     unsigned ident;\n   } cycle; /* Used in all-blocks mode, after blocks are linked onto\n \t     lines.  */\n@@ -200,7 +200,7 @@ struct line_info\n   gcov_type count;\n \n   /* Branches from blocks that end on this line.  */\n-  vector<arc_t *> branches;\n+  vector<arc_info *> branches;\n \n   /* blocks which start on this line.  Used in all-blocks mode.  */\n   vector<block_t *> blocks;\n@@ -544,14 +544,14 @@ static void read_graph_file (void);\n static int read_count_file (void);\n static void solve_flow_graph (function_info *);\n static void find_exception_blocks (function_info *);\n-static void add_branch_counts (coverage_t *, const arc_t *);\n+static void add_branch_counts (coverage_t *, const arc_info *);\n static void add_line_counts (coverage_t *, function_info *);\n static void executed_summary (unsigned, unsigned);\n static void function_summary (const coverage_t *, const char *);\n static const char *format_gcov (gcov_type, gcov_type, int);\n static void accumulate_line_counts (source_info *);\n static void output_gcov_file (const char *, source_info *);\n-static int output_branch_count (FILE *, int, const arc_t *);\n+static int output_branch_count (FILE *, int, const arc_info *);\n static void output_lines (FILE *, const source_info *);\n static char *make_gcov_file_name (const char *, const char *);\n static char *mangle_name (const char *, char *);\n@@ -570,7 +570,7 @@ function_info::~function_info ()\n {\n   for (int i = blocks.size () - 1; i >= 0; i--)\n     {\n-      arc_t *arc, *arc_n;\n+      arc_info *arc, *arc_n;\n \n       for (arc = blocks[i].succ; arc; arc = arc_n)\n \t{\n@@ -600,7 +600,7 @@ bool function_info::group_line_p (unsigned n, unsigned src_idx)\n    simple paths)--the node is unblocked only when it participates in a cycle.\n    */\n \n-typedef vector<arc_t *> arc_vector_t;\n+typedef vector<arc_info *> arc_vector_t;\n typedef vector<const block_t *> block_vector_t;\n \n /* Enum with types of loop in CFG.  */\n@@ -682,7 +682,7 @@ circuit (block_t *v, arc_vector_t &path, block_t *start,\n   blocked.push_back (v);\n   block_lists.push_back (block_vector_t ());\n \n-  for (arc_t *arc = v->succ; arc; arc = arc->succ_next)\n+  for (arc_info *arc = v->succ; arc; arc = arc->succ_next)\n     {\n       block_t *w = arc->dst;\n       if (w < start || !linfo.has_block (w))\n@@ -701,7 +701,7 @@ circuit (block_t *v, arc_vector_t &path, block_t *start,\n   if (result != NO_LOOP)\n     unblock (v, blocked, block_lists);\n   else\n-    for (arc_t *arc = v->succ; arc; arc = arc->succ_next)\n+    for (arc_info *arc = v->succ; arc; arc = arc->succ_next)\n       {\n \tblock_t *w = arc->dst;\n \tif (w < start || !linfo.has_block (w))\n@@ -973,7 +973,7 @@ output_intermediate_line (FILE *f, line_info *line, unsigned line_num)\n \t   format_gcov (line->count, 0, -1),\n \t   line->has_unexecuted_block);\n \n-  vector<arc_t *>::const_iterator it;\n+  vector<arc_info *>::const_iterator it;\n   if (flag_branches)\n     for (it = line->branches.begin (); it != line->branches.end ();\n \t it++)\n@@ -1621,7 +1621,7 @@ read_graph_file (void)\n \n \t      if (dest >= fn->blocks.size ())\n \t\tgoto corrupt;\n-\t      arc = XCNEW (arc_t);\n+\t      arc = XCNEW (arc_info);\n \n \t      arc->dst = &fn->blocks[dest];\n \t      arc->src = src_blk;\n@@ -1840,7 +1840,7 @@ static void\n solve_flow_graph (function_info *fn)\n {\n   unsigned ix;\n-  arc_t *arc;\n+  arc_info *arc;\n   gcov_type *count_ptr = &fn->counts.front ();\n   block_t *blk;\n   block_t *valid_blocks = NULL;    /* valid, but unpropagated blocks.  */\n@@ -1849,7 +1849,7 @@ solve_flow_graph (function_info *fn)\n   /* The arcs were built in reverse order.  Fix that now.  */\n   for (ix = fn->blocks.size (); ix--;)\n     {\n-      arc_t *arc_p, *arc_n;\n+      arc_info *arc_p, *arc_n;\n \n       for (arc_p = NULL, arc = fn->blocks[ix].succ; arc;\n \t   arc_p = arc, arc = arc_n)\n@@ -1942,12 +1942,12 @@ solve_flow_graph (function_info *fn)\n \t smart sort.  */\n       if (out_of_order)\n \t{\n-\t  arc_t *start = blk->succ;\n+\t  arc_info *start = blk->succ;\n \t  unsigned changes = 1;\n \n \t  while (changes)\n \t    {\n-\t      arc_t *arc, *arc_p, *arc_n;\n+\t      arc_info *arc, *arc_p, *arc_n;\n \n \t      changes = 0;\n \t      for (arc_p = NULL, arc = start; (arc_n = arc->succ_next);)\n@@ -1985,7 +1985,7 @@ solve_flow_graph (function_info *fn)\n       while ((blk = invalid_blocks))\n \t{\n \t  gcov_type total = 0;\n-\t  const arc_t *arc;\n+\t  const arc_info *arc;\n \n \t  invalid_blocks = blk->chain;\n \t  blk->invalid_chain = 0;\n@@ -2007,7 +2007,7 @@ solve_flow_graph (function_info *fn)\n       while ((blk = valid_blocks))\n \t{\n \t  gcov_type total;\n-\t  arc_t *arc, *inv_arc;\n+\t  arc_info *arc, *inv_arc;\n \n \t  valid_blocks = blk->chain;\n \t  blk->valid_chain = 0;\n@@ -2115,7 +2115,7 @@ find_exception_blocks (function_info *fn)\n   for (ix = 1; ix;)\n     {\n       block_t *block = queue[--ix];\n-      const arc_t *arc;\n+      const arc_info *arc;\n \n       for (arc = block->succ; arc; arc = arc->succ_next)\n \tif (!arc->fake && !arc->is_throw && arc->dst->exceptional)\n@@ -2130,7 +2130,7 @@ find_exception_blocks (function_info *fn)\n /* Increment totals in COVERAGE according to arc ARC.  */\n \n static void\n-add_branch_counts (coverage_t *coverage, const arc_t *arc)\n+add_branch_counts (coverage_t *coverage, const arc_info *arc)\n {\n   if (arc->is_call_non_return)\n     {\n@@ -2547,7 +2547,7 @@ add_line_counts (coverage_t *coverage, function_info *fn)\n \n \t      if (flag_branches)\n \t\t{\n-\t\t  arc_t *arc;\n+\t\t  arc_info *arc;\n \n \t\t  for (arc = block->succ; arc; arc = arc->succ_next)\n \t\t    line->branches.push_back (arc);\n@@ -2585,10 +2585,10 @@ static void accumulate_line_info (line_info *line, source_info *src,\n       for (vector<block_t *>::iterator it = line->blocks.begin ();\n \t   it != line->blocks.end (); it++)\n \t{\n-\t  for (arc_t *arc = (*it)->pred; arc; arc = arc->pred_next)\n+\t  for (arc_info *arc = (*it)->pred; arc; arc = arc->pred_next)\n \t    if (!line->has_block (arc->src))\n \t      count += arc->count;\n-\t  for (arc_t *arc = (*it)->succ; arc; arc = arc->succ_next)\n+\t  for (arc_info *arc = (*it)->succ; arc; arc = arc->succ_next)\n \t    arc->cs_count = arc->count;\n \t}\n \n@@ -2673,7 +2673,7 @@ accumulate_line_counts (source_info *src)\n    anything is output.  */\n \n static int\n-output_branch_count (FILE *gcov_file, int ix, const arc_t *arc)\n+output_branch_count (FILE *gcov_file, int ix, const arc_info *arc)\n {\n   if (arc->is_call_non_return)\n     {\n@@ -2842,7 +2842,7 @@ output_line_details (FILE *f, const line_info *line, unsigned line_num)\n {\n   if (flag_all_blocks)\n     {\n-      arc_t *arc;\n+      arc_info *arc;\n       int ix, jx;\n \n       ix = jx = 0;\n@@ -2870,7 +2870,7 @@ output_line_details (FILE *f, const line_info *line, unsigned line_num)\n       int ix;\n \n       ix = 0;\n-      for (vector<arc_t *>::const_iterator it = line->branches.begin ();\n+      for (vector<arc_info *>::const_iterator it = line->branches.begin ();\n \t   it != line->branches.end (); it++)\n \tix += output_branch_count (f, ix, (*it));\n     }\n@@ -2884,7 +2884,7 @@ output_function_details (FILE *f, const function_info *fn)\n   if (!flag_branches)\n     return;\n \n-  arc_t *arc = fn->blocks[EXIT_BLOCK].pred;\n+  arc_info *arc = fn->blocks[EXIT_BLOCK].pred;\n   gcov_type return_count = fn->blocks[EXIT_BLOCK].count;\n   gcov_type called_count = fn->blocks[ENTRY_BLOCK].count;\n "}]}