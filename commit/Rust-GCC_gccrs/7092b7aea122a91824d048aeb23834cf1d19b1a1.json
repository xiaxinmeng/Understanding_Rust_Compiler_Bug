{"sha": "7092b7aea122a91824d048aeb23834cf1d19b1a1", "node_id": "C_kwDOANBUbNoAKDcwOTJiN2FlYTEyMmE5MTgyNGQwNDhhZWIyMzgzNGNmMWQxOWIxYTE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-22T11:38:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-22T11:38:11Z"}, "message": "rtlanal: Fix up replace_rtx [PR105333]\n\nThe following testcase FAILs, because replace_rtx replaces a REG with\nCONST_WIDE_INT inside of a SUBREG, which is an invalid transformation\nbecause a SUBREG relies on SUBREG_REG having non-VOIDmode but\nCONST_WIDE_INT has VOIDmode.\n\nreplace_rtx already has code to deal with it, but it was doing\nit only for CONST_INTs.  The following patch does it also for\nVOIDmode CONST_DOUBLE or CONST_WIDE_INT.\n\n2022-04-22  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR rtl-optimization/105333\n\t* rtlanal.cc (replace_rtx): Use simplify_subreg or\n\tsimplify_unary_operation if CONST_SCALAR_INT_P rather than just\n\tCONST_INT_P.\n\n\t* gcc.dg/pr105333.c: New test.", "tree": {"sha": "eb6712fec07d8cb32129652226f5be2eade6d0c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb6712fec07d8cb32129652226f5be2eade6d0c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7092b7aea122a91824d048aeb23834cf1d19b1a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7092b7aea122a91824d048aeb23834cf1d19b1a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7092b7aea122a91824d048aeb23834cf1d19b1a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7092b7aea122a91824d048aeb23834cf1d19b1a1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1a9cf679153719d066f1ec79154c406e1e48cdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1a9cf679153719d066f1ec79154c406e1e48cdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1a9cf679153719d066f1ec79154c406e1e48cdf"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "c436c640c376ab6f1b4515305c91528a6dbf9d43", "filename": "gcc/rtlanal.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7092b7aea122a91824d048aeb23834cf1d19b1a1/gcc%2Frtlanal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7092b7aea122a91824d048aeb23834cf1d19b1a1/gcc%2Frtlanal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.cc?ref=7092b7aea122a91824d048aeb23834cf1d19b1a1", "patch": "@@ -3390,7 +3390,7 @@ replace_rtx (rtx x, rtx from, rtx to, bool all_regs)\n     {\n       rtx new_rtx = replace_rtx (SUBREG_REG (x), from, to, all_regs);\n \n-      if (CONST_INT_P (new_rtx))\n+      if (CONST_SCALAR_INT_P (new_rtx))\n \t{\n \t  x = simplify_subreg (GET_MODE (x), new_rtx,\n \t\t\t       GET_MODE (SUBREG_REG (x)),\n@@ -3406,7 +3406,7 @@ replace_rtx (rtx x, rtx from, rtx to, bool all_regs)\n     {\n       rtx new_rtx = replace_rtx (XEXP (x, 0), from, to, all_regs);\n \n-      if (CONST_INT_P (new_rtx))\n+      if (CONST_SCALAR_INT_P (new_rtx))\n \t{\n \t  x = simplify_unary_operation (ZERO_EXTEND, GET_MODE (x),\n \t\t\t\t\tnew_rtx, GET_MODE (XEXP (x, 0)));"}, {"sha": "bd8bd4cd56ce03f8b803ca5ab6923440d879a953", "filename": "gcc/testsuite/gcc.dg/pr105333.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7092b7aea122a91824d048aeb23834cf1d19b1a1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105333.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7092b7aea122a91824d048aeb23834cf1d19b1a1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105333.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105333.c?ref=7092b7aea122a91824d048aeb23834cf1d19b1a1", "patch": "@@ -0,0 +1,21 @@\n+/* PR rtl-optimization/105333 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-Og -fno-tree-coalesce-vars -fno-tree-fre\" } */\n+\n+int g;\n+short s;\n+\n+static inline unsigned short\n+bar (short a, __int128 b)\n+{\n+  b ^= (unsigned long) -a;\n+  __builtin_strncpy ((void *) &s, (void *) &a, 1);\n+  b *= 14;\n+  return b;\n+}\n+\n+void\n+foo (void)\n+{\n+  g *= (__int128) bar (1, 1);\n+}"}]}