{"sha": "afe006ad4deda8faeb9648913310c819aa250760", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZlMDA2YWQ0ZGVkYThmYWViOTY0ODkxMzMxMGM4MTlhYTI1MDc2MA==", "commit": {"author": {"name": "Terry Guo", "email": "terry.guo@arm.com", "date": "2015-02-26T04:03:22Z"}, "committer": {"name": "Xuepeng Guo", "email": "xguo@gcc.gnu.org", "date": "2015-02-26T04:03:22Z"}, "message": "arm-cores.def (cortex-m7): Add flag FL_NO_VOLATILE_CE.\n\ngcc/\n\t* config/arm/arm-cores.def (cortex-m7): Add flag FL_NO_VOLATILE_CE.\n\t* config/arm/arm-protos.h (FL_NO_VOLATILE_CE): New flag.\n\t(arm_arch_no_volatile_ce): Declare new global variable.\n\t* config/arm/arm.c (arm_arch_no_volatile_ce): New global variable.\n\t(arm_option_override): Assign value to arm_arch_no_volatile_ce.\n\t* config/arm/arm.h (arm_arch_no_volatile_ce): Declare it.\n\t(TARGET_NO_VOLATILE_CE): New macro.\n\t* config/arm/arm.md (arm_comparison_operator): Disabled if not allow\n\tvolatile memory access in IT block\n\ngcc/testsuite/\n\t* gcc.target/arm/no-volatile-in-it.c: New test.\n\nFrom-SVN: r220999", "tree": {"sha": "29ed4ec80774fd5f0bf585efeac1bd41e8f3a457", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29ed4ec80774fd5f0bf585efeac1bd41e8f3a457"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afe006ad4deda8faeb9648913310c819aa250760", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afe006ad4deda8faeb9648913310c819aa250760", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afe006ad4deda8faeb9648913310c819aa250760", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afe006ad4deda8faeb9648913310c819aa250760/comments", "author": null, "committer": null, "parents": [{"sha": "f2903bd861442c816bfcdeeffe2ae6d518c54783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2903bd861442c816bfcdeeffe2ae6d518c54783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2903bd861442c816bfcdeeffe2ae6d518c54783"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "1ff9ac6f2c54ea7d54e3efcdde6e7d93e8818baa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe006ad4deda8faeb9648913310c819aa250760/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe006ad4deda8faeb9648913310c819aa250760/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=afe006ad4deda8faeb9648913310c819aa250760", "patch": "@@ -1,3 +1,15 @@\n+2015-02-26  Terry Guo  <terry.guo@arm.com>\n+\n+\t* config/arm/arm-cores.def (cortex-m7): Add flag FL_NO_VOLATILE_CE.\n+\t* config/arm/arm-protos.h (FL_NO_VOLATILE_CE): New flag.\n+\t(arm_arch_no_volatile_ce): Declare new global variable.\n+\t* config/arm/arm.c (arm_arch_no_volatile_ce): New global variable.\n+\t(arm_option_override): Assign value to arm_arch_no_volatile_ce.\n+\t* config/arm/arm.h (arm_arch_no_volatile_ce): Declare it.\n+\t(TARGET_NO_VOLATILE_CE): New macro.\n+\t* config/arm/arm.md (arm_comparison_operator): Disabled if not allow\n+\tvolatile memory access in IT block\n+\n 2015-02-25  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/47230"}, {"sha": "b22ea7fd6d4c39d22f16cdff9f07ee1677961601", "filename": "gcc/config/arm/arm-cores.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe006ad4deda8faeb9648913310c819aa250760/gcc%2Fconfig%2Farm%2Farm-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe006ad4deda8faeb9648913310c819aa250760/gcc%2Fconfig%2Farm%2Farm-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cores.def?ref=afe006ad4deda8faeb9648913310c819aa250760", "patch": "@@ -155,7 +155,7 @@ ARM_CORE(\"cortex-r4\",\t\tcortexr4, cortexr4,\t\t7R,  FL_LDSCHED, cortex)\n ARM_CORE(\"cortex-r4f\",\t\tcortexr4f, cortexr4f,\t\t7R,  FL_LDSCHED, cortex)\n ARM_CORE(\"cortex-r5\",\t\tcortexr5, cortexr5,\t\t7R,  FL_LDSCHED | FL_ARM_DIV, cortex)\n ARM_CORE(\"cortex-r7\",\t\tcortexr7, cortexr7,\t\t7R,  FL_LDSCHED | FL_ARM_DIV, cortex)\n-ARM_CORE(\"cortex-m7\",\t\tcortexm7, cortexm7,\t\t7EM, FL_LDSCHED, cortex_m7)\n+ARM_CORE(\"cortex-m7\",\t\tcortexm7, cortexm7,\t\t7EM, FL_LDSCHED | FL_NO_VOLATILE_CE, cortex_m7)\n ARM_CORE(\"cortex-m4\",\t\tcortexm4, cortexm4,\t\t7EM, FL_LDSCHED, v7m)\n ARM_CORE(\"cortex-m3\",\t\tcortexm3, cortexm3,\t\t7M,  FL_LDSCHED, v7m)\n ARM_CORE(\"marvell-pj4\",\t\tmarvell_pj4, marvell_pj4,\t7A,  FL_LDSCHED, 9e)"}, {"sha": "28ffe52e8e7fab97d8c8e4243f8dc9fd7060b196", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe006ad4deda8faeb9648913310c819aa250760/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe006ad4deda8faeb9648913310c819aa250760/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=afe006ad4deda8faeb9648913310c819aa250760", "patch": "@@ -360,6 +360,7 @@ extern bool arm_is_constant_pool_ref (rtx);\n #define FL_CRC32      (1 << 25)\t      /* ARMv8 CRC32 instructions.  */\n \n #define FL_SMALLMUL   (1 << 26)       /* Small multiply supported.  */\n+#define FL_NO_VOLATILE_CE   (1 << 27) /* No volatile memory in IT block.  */\n \n #define FL_IWMMXT     (1 << 29)\t      /* XScale v2 or \"Intel Wireless MMX technology\".  */\n #define FL_IWMMXT2    (1 << 30)       /* \"Intel Wireless MMX2 technology\".  */\n@@ -482,6 +483,9 @@ extern int arm_arch_thumb2;\n extern int arm_arch_arm_hwdiv;\n extern int arm_arch_thumb_hwdiv;\n \n+/* Nonzero if chip disallows volatile memory access in IT block.  */\n+extern int arm_arch_no_volatile_ce;\n+\n /* Nonzero if we should use Neon to handle 64-bits operations rather\n    than core registers.  */\n extern int prefer_neon_for_64bits;"}, {"sha": "f7063bc06fa7c1bb289ba098b77573f07b188b02", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe006ad4deda8faeb9648913310c819aa250760/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe006ad4deda8faeb9648913310c819aa250760/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=afe006ad4deda8faeb9648913310c819aa250760", "patch": "@@ -866,6 +866,9 @@ int arm_arch_thumb2;\n int arm_arch_arm_hwdiv;\n int arm_arch_thumb_hwdiv;\n \n+/* Nonzero if chip disallows volatile memory access in IT block.  */\n+int arm_arch_no_volatile_ce;\n+\n /* Nonzero if we should use Neon to handle 64-bits operations rather\n    than core registers.  */\n int prefer_neon_for_64bits = 0;\n@@ -2859,6 +2862,7 @@ arm_option_override (void)\n   arm_arch_iwmmxt2 = (insn_flags & FL_IWMMXT2) != 0;\n   arm_arch_thumb_hwdiv = (insn_flags & FL_THUMB_DIV) != 0;\n   arm_arch_arm_hwdiv = (insn_flags & FL_ARM_DIV) != 0;\n+  arm_arch_no_volatile_ce = (insn_flags & FL_NO_VOLATILE_CE) != 0;\n   arm_tune_cortex_a9 = (arm_tune == cortexa9) != 0;\n   arm_arch_crc = (insn_flags & FL_CRC32) != 0;\n   arm_m_profile_small_mul = (insn_flags & FL_SMALLMUL) != 0;"}, {"sha": "8c10ea3c9053e89b8eae1e5353b92d6020499409", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe006ad4deda8faeb9648913310c819aa250760/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe006ad4deda8faeb9648913310c819aa250760/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=afe006ad4deda8faeb9648913310c819aa250760", "patch": "@@ -383,6 +383,9 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n #define TARGET_IDIV\t\t((TARGET_ARM && arm_arch_arm_hwdiv) \\\n \t\t\t\t || (TARGET_THUMB2 && arm_arch_thumb_hwdiv))\n \n+/* Nonzero if disallow volatile memory access in IT block.  */\n+#define TARGET_NO_VOLATILE_CE\t\t(arm_arch_no_volatile_ce)\n+\n /* Should NEON be used for 64-bits bitops.  */\n #define TARGET_PREFER_NEON_64BITS (prefer_neon_for_64bits)\n \n@@ -568,6 +571,9 @@ extern int arm_arch_arm_hwdiv;\n /* Nonzero if chip supports integer division instruction in Thumb mode.  */\n extern int arm_arch_thumb_hwdiv;\n \n+/* Nonzero if chip disallows volatile memory access in IT block.  */\n+extern int arm_arch_no_volatile_ce;\n+\n /* Nonzero if we should use Neon to handle 64-bits operations rather\n    than core registers.  */\n extern int prefer_neon_for_64bits;"}, {"sha": "164ac13a26289bf755c89e78a8a5f751883c6039", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe006ad4deda8faeb9648913310c819aa250760/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe006ad4deda8faeb9648913310c819aa250760/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=afe006ad4deda8faeb9648913310c819aa250760", "patch": "@@ -10755,7 +10755,8 @@\n   [(match_operator 0 \"arm_comparison_operator\"\n     [(match_operand 1 \"cc_register\" \"\")\n      (const_int 0)])]\n-  \"TARGET_32BIT\"\n+  \"TARGET_32BIT\n+   && (!TARGET_NO_VOLATILE_CE || !volatile_refs_p (PATTERN (insn)))\"\n   \"\"\n [(set_attr \"predicated\" \"yes\")]\n )"}, {"sha": "faece1f1dacf1c9070661b314dc05ca55c430f25", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe006ad4deda8faeb9648913310c819aa250760/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe006ad4deda8faeb9648913310c819aa250760/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=afe006ad4deda8faeb9648913310c819aa250760", "patch": "@@ -1,3 +1,7 @@\n+2015-02-26  Terry Guo  <terry.guo@arm.com>\n+\n+\t* gcc.target/arm/no-volatile-in-it.c: New test.\n+\n 2015-02-25  Peter Bergner  <bergner@vnet.ibm.com>\n \n \t* gcc.target/powerpc/htm-builtin-1.c (dg-do) Change to assemble."}, {"sha": "206afdbd0fd1bddf6ea126d993201219eab25a1d", "filename": "gcc/testsuite/gcc.target/arm/no-volatile-in-it.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe006ad4deda8faeb9648913310c819aa250760/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fno-volatile-in-it.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe006ad4deda8faeb9648913310c819aa250760/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fno-volatile-in-it.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fno-volatile-in-it.c?ref=afe006ad4deda8faeb9648913310c819aa250760", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_thumb2_ok } */\n+/* { dg-options \"-Os -mthumb -mcpu=cortex-m7\" } */\n+\n+int\n+foo (int a, int b, volatile int *c, volatile int *d)\n+{\n+  if (a > b)\n+    return c[0];\n+  else\n+    return d[0];\n+}\n+\n+/* { dg-final { scan-assembler-not \"ldrgt\" } } */"}]}