{"sha": "65444786bebc03fd4f639801aecc8a25047d33f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU0NDQ3ODZiZWJjMDNmZDRmNjM5ODAxYWVjYzhhMjUwNDdkMzNmOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-04-02T08:36:32Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-04-02T08:36:32Z"}, "message": "ada-tree.h (DECL_TAFT_TYPE_P): New flag.\n\n\t* gcc-interface/ada-tree.h (DECL_TAFT_TYPE_P): New flag.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Incomplete_Type>: Set it\n\tif this is a Taft amendment type and the full declaration is available.\n\t* gcc-interface/trans.c (process_type): Likewise.\n\tIf there is an old type, mark the new one as used if DECL_TAFT_TYPE_P.\n\t(process_freeze_entity): Likewise.\n\t* gcc-interface/utils.c (dummy_global): New static variable.\n\t(gnat_write_global_declarations): If there are types declared as used\n\tat the global level, insert them in the global hash table.\n\nFrom-SVN: r171881", "tree": {"sha": "881fb3f82762fd6dd981e1216e6623745d035a07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/881fb3f82762fd6dd981e1216e6623745d035a07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65444786bebc03fd4f639801aecc8a25047d33f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65444786bebc03fd4f639801aecc8a25047d33f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65444786bebc03fd4f639801aecc8a25047d33f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65444786bebc03fd4f639801aecc8a25047d33f8/comments", "author": null, "committer": null, "parents": [{"sha": "1aeb40dd6d0e8d5a62d25679fa6b0533d72fd4dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aeb40dd6d0e8d5a62d25679fa6b0533d72fd4dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aeb40dd6d0e8d5a62d25679fa6b0533d72fd4dd"}], "stats": {"total": 73, "additions": 63, "deletions": 10}, "files": [{"sha": "ac3d0131713e8603b512bdc20861ed548c0414e2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65444786bebc03fd4f639801aecc8a25047d33f8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65444786bebc03fd4f639801aecc8a25047d33f8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=65444786bebc03fd4f639801aecc8a25047d33f8", "patch": "@@ -1,3 +1,15 @@\n+2011-04-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/ada-tree.h (DECL_TAFT_TYPE_P): New flag.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Incomplete_Type>: Set it\n+\tif this is a Taft amendment type and the full declaration is available.\n+\t* gcc-interface/trans.c (process_type): Likewise.\n+\tIf there is an old type, mark the new one as used if DECL_TAFT_TYPE_P.\n+\t(process_freeze_entity): Likewise.\n+\t* gcc-interface/utils.c (dummy_global): New static variable.\n+\t(gnat_write_global_declarations): If there are types declared as used\n+\tat the global level, insert them in the global hash table.\n+\n 2011-04-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/gigi.h (record_builtin_type): Add ARTIFICIAL_P param."}, {"sha": "de47afcebc0cbaa85389027920b5919c952bc45b", "filename": "gcc/ada/gcc-interface/ada-tree.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65444786bebc03fd4f639801aecc8a25047d33f8/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65444786bebc03fd4f639801aecc8a25047d33f8/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-tree.h?ref=65444786bebc03fd4f639801aecc8a25047d33f8", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2010, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2011, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -336,6 +336,10 @@ do {\t\t\t\t\t\t   \\\n    pair of INDIRECT_REFs is needed to access the object.  */\n #define DECL_BY_DOUBLE_REF_P(NODE) DECL_LANG_FLAG_0 (PARM_DECL_CHECK (NODE))\n \n+/* Nonzero in a TYPE_DECL if this is the declaration of a Taft amendment type\n+   in the main unit, i.e. the full declaration is available.  */\n+#define DECL_TAFT_TYPE_P(NODE) DECL_LANG_FLAG_0 (TYPE_DECL_CHECK (NODE))\n+\n /* Nonzero in a DECL if it is always used by reference, i.e. an INDIRECT_REF\n    is needed to access the object.  */\n #define DECL_BY_REF_P(NODE) DECL_LANG_FLAG_1 (NODE)"}, {"sha": "9c79d65530ab9aa1889793e660b5bdb590ceb55d", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65444786bebc03fd4f639801aecc8a25047d33f8/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65444786bebc03fd4f639801aecc8a25047d33f8/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=65444786bebc03fd4f639801aecc8a25047d33f8", "patch": "@@ -4469,6 +4469,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t   we can do any needed updates when we see it.  */\n \tgnu_type = make_dummy_type (gnat_entity);\n \tgnu_decl = TYPE_STUB_DECL (gnu_type);\n+\tif (Has_Completion_In_Body (gnat_entity))\n+\t  DECL_TAFT_TYPE_P (gnu_decl) = 1;\n \tsave_gnu_tree (full_view, gnu_decl, 0);\n \tbreak;\n       }"}, {"sha": "9622625a7ec2cca05dfa333c281b7334831ed7a5", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65444786bebc03fd4f639801aecc8a25047d33f8/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65444786bebc03fd4f639801aecc8a25047d33f8/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=65444786bebc03fd4f639801aecc8a25047d33f8", "patch": "@@ -6609,11 +6609,17 @@ process_freeze_entity (Node_Id gnat_node)\n       && Root_Type (Class_Wide_Type (gnat_entity)) == gnat_entity)\n     save_gnu_tree (Class_Wide_Type (gnat_entity), gnu_new, false);\n \n-  /* If we've made any pointers to the old version of this type, we\n-     have to update them.  */\n+  /* If we have an old type and we've made pointers to this type, update those\n+     pointers.  If this is a Taft amendment type in the main unit, we need to\n+     mark the type as used since other units referencing it don't see the full\n+     declaration and, therefore, cannot mark it as used themselves.  */\n   if (gnu_old)\n-    update_pointer_to (TYPE_MAIN_VARIANT (TREE_TYPE (gnu_old)),\n-\t\t       TREE_TYPE (gnu_new));\n+    {\n+      update_pointer_to (TYPE_MAIN_VARIANT (TREE_TYPE (gnu_old)),\n+\t\t\t TREE_TYPE (gnu_new));\n+      if (DECL_TAFT_TYPE_P (gnu_old))\n+\tused_types_insert (TREE_TYPE (gnu_new));\n+    }\n }\n \f\n /* Elaborate decls in the lists GNAT_DECLS and GNAT_DECLS2, if present.\n@@ -7456,7 +7462,11 @@ process_type (Entity_Id gnat_entity)\n \t  save_gnu_tree (gnat_entity, gnu_decl, false);\n \t  if (IN (Ekind (gnat_entity), Incomplete_Or_Private_Kind)\n \t      && Present (Full_View (gnat_entity)))\n-\t    save_gnu_tree (Full_View (gnat_entity), gnu_decl, false);\n+\t    {\n+\t      if (Has_Completion_In_Body (gnat_entity))\n+\t\tDECL_TAFT_TYPE_P (gnu_decl) = 1;\n+\t      save_gnu_tree (Full_View (gnat_entity), gnu_decl, false);\n+\t    }\n \t}\n \n       return;\n@@ -7478,11 +7488,17 @@ process_type (Entity_Id gnat_entity)\n   gnu_new = gnat_to_gnu_entity (gnat_entity, NULL_TREE, 1);\n   gcc_assert (TREE_CODE (gnu_new) == TYPE_DECL);\n \n-  /* If we have an old type and we've made pointers to this type,\n-     update those pointers.  */\n+  /* If we have an old type and we've made pointers to this type, update those\n+     pointers.  If this is a Taft amendment type in the main unit, we need to\n+     mark the type as used since other units referencing it don't see the full\n+     declaration and, therefore, cannot mark it as used themselves.  */\n   if (gnu_old)\n-    update_pointer_to (TYPE_MAIN_VARIANT (TREE_TYPE (gnu_old)),\n-\t\t       TREE_TYPE (gnu_new));\n+    {\n+      update_pointer_to (TYPE_MAIN_VARIANT (TREE_TYPE (gnu_old)),\n+\t\t\t TREE_TYPE (gnu_new));\n+      if (DECL_TAFT_TYPE_P (gnu_old))\n+\tused_types_insert (TREE_TYPE (gnu_new));\n+    }\n \n   /* If this is a record type corresponding to a task or protected type\n      that is a completion of an incomplete type, perform a similar update"}, {"sha": "31172723b4f8ffcd1bdbbf66609dba8c9bdde8ea", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65444786bebc03fd4f639801aecc8a25047d33f8/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65444786bebc03fd4f639801aecc8a25047d33f8/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=65444786bebc03fd4f639801aecc8a25047d33f8", "patch": "@@ -4736,9 +4736,28 @@ smaller_form_type_p (tree type, tree orig_type)\n \n /* Perform final processing on global variables.  */\n \n+static GTY (()) tree dummy_global;\n+\n void\n gnat_write_global_declarations (void)\n {\n+  /* If we have declared types as used at the global level, insert them in\n+     the global hash table.  We use a dummy variable for this purpose.  */\n+  if (!VEC_empty (tree, types_used_by_cur_var_decl))\n+    {\n+      dummy_global\n+\t= build_decl (BUILTINS_LOCATION, VAR_DECL, NULL_TREE, void_type_node);\n+      TREE_STATIC (dummy_global) = 1;\n+      TREE_ASM_WRITTEN (dummy_global) = 1;\n+      varpool_mark_needed_node (varpool_node (dummy_global));\n+\n+      while (!VEC_empty (tree, types_used_by_cur_var_decl))\n+\t{\n+\t  tree t = VEC_pop (tree, types_used_by_cur_var_decl);\n+\t  types_used_by_var_decl_insert (t, dummy_global);\n+\t}\n+    }\n+\n   /* Proceed to optimize and emit assembly.\n      FIXME: shouldn't be the front end's responsibility to call this.  */\n   cgraph_finalize_compilation_unit ();"}]}