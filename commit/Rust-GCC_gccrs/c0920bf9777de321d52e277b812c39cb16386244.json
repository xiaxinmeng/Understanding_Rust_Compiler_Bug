{"sha": "c0920bf9777de321d52e277b812c39cb16386244", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA5MjBiZjk3NzdkZTMyMWQ1MmUyNzdiODEyYzM5Y2IxNjM4NjI0NA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-29T03:47:34Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-29T03:47:34Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r621", "tree": {"sha": "d16ddf3775e88bc533db7a41a364316a8fdfcf36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d16ddf3775e88bc533db7a41a364316a8fdfcf36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0920bf9777de321d52e277b812c39cb16386244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0920bf9777de321d52e277b812c39cb16386244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0920bf9777de321d52e277b812c39cb16386244", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0920bf9777de321d52e277b812c39cb16386244/comments", "author": null, "committer": null, "parents": [{"sha": "b1166faeb09066cb5f8106b02cb100a129679bd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1166faeb09066cb5f8106b02cb100a129679bd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1166faeb09066cb5f8106b02cb100a129679bd1"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "9001373cd81c7c79d0c3b97093f40049b5640fca", "filename": "gcc/print-tree.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0920bf9777de321d52e277b812c39cb16386244/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0920bf9777de321d52e277b812c39cb16386244/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=c0920bf9777de321d52e277b812c39cb16386244", "patch": "@@ -343,8 +343,12 @@ print_node (file, prefix, node, indent)\n \n       print_node (file, \"size\", DECL_SIZE (node), indent + 4);\n       indent_to (file, indent + 3);\n-      fprintf (file, \" align %d\", DECL_ALIGN (node));\n-      fprintf (file, \" frame_size %d\", DECL_FRAME_SIZE (node));\n+      if (TREE_CODE (node) != FUNCTION_DECL)\n+\tfprintf (file, \" align %d\", DECL_ALIGN (node));\n+      else if (TREE_INLINE (node))\n+\tfprintf (file, \" frame_size %d\", DECL_FRAME_SIZE (node));\n+      else if (DECL_BUILT_IN (node))\n+\tfprintf (file, \" built-in code %d\", DECL_FUNCTION_CODE (node));\n       if (TREE_CODE (node) == FIELD_DECL)\n \tprint_node (file, \"bitpos\", DECL_FIELD_BITPOS (node), indent + 4);\n       print_node_brief (file, \"context\", DECL_CONTEXT (node), indent + 4);"}, {"sha": "c6a74a11c6dfa2040568edd3f7562e5a9307c95f", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0920bf9777de321d52e277b812c39cb16386244/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0920bf9777de321d52e277b812c39cb16386244/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=c0920bf9777de321d52e277b812c39cb16386244", "patch": "@@ -859,7 +859,8 @@ make_node (code)\n       break;\n \n     case 'd':\n-      DECL_ALIGN (t) = 1;\n+      if (code != FUNCTION_DECL)\n+\tDECL_ALIGN (t) = 1;\n       DECL_SOURCE_LINE (t) = lineno;\n       DECL_SOURCE_FILE (t) = (input_filename) ? input_filename : \"<built-in>\";\n       break;"}, {"sha": "dd01f6e967c75196e796fe161182748733b55f1a", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0920bf9777de321d52e277b812c39cb16386244/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0920bf9777de321d52e277b812c39cb16386244/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=c0920bf9777de321d52e277b812c39cb16386244", "patch": "@@ -666,7 +666,7 @@ struct tree_type\n    Need not be constant.  */\n #define DECL_SIZE(NODE) ((NODE)->decl.size)\n /* Holds the alignment required for the datum.  */\n-#define DECL_ALIGN(NODE) ((NODE)->decl.align)\n+#define DECL_ALIGN(NODE) ((NODE)->decl.frame_size)\n /* Holds the machine mode of a variable or field.  */\n #define DECL_MODE(NODE) ((NODE)->decl.mode)\n /* Holds the RTL expression for the value of a variable or function.  */\n@@ -771,7 +771,6 @@ struct tree_decl\n #else\n   enum machine_mode mode : 8;\n #endif\n-  unsigned char align;\n \n   unsigned external_flag : 1;\n   unsigned nonlocal_flag : 1;\n@@ -801,7 +800,10 @@ struct tree_decl\n   union tree_node *assembler_name;\n   struct rtx_def *rtl;\t/* acts as link to register transfer language\n \t\t\t\t   (rtl) info */\n-  int frame_size;\t\t/* For FUNCTION_DECLs: size of stack frame */\n+  /* For a FUNCTION_DECL, if inline, this is the size of frame needed.\n+     If built-in, this is the code for which built-in function.\n+     For any other kind of decl, this is the alignment.  */\n+  int frame_size;\n   struct rtx_def *saved_insns;\t/* For FUNCTION_DECLs: points to insn that\n \t\t\t\t   constitutes its definition on the\n \t\t\t\t   permanent obstack.  */"}]}