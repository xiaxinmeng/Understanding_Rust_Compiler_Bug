{"sha": "eeab4d81a61970e9079dbd9a8033d13e0cc27980", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVhYjRkODFhNjE5NzBlOTA3OWRiZDlhODAzM2QxM2UwY2MyNzk4MA==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@apple.com", "date": "2004-05-19T02:11:42Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2004-05-19T02:11:42Z"}, "message": "tm.texi (TARGET_ASM_EMIT_UNWIND_LABEL): Add argument to indicate if this label is for eh.\n\n\t* doc/tm.texi (TARGET_ASM_EMIT_UNWIND_LABEL): Add argument to indicate\n\tif this label is for eh.\n\t* config/darwin-protos.h (darwin_emit_unwind_label): Likewise.\n\t* config/darwin.c (darwin_emit_unwind_label): Likewise.\n\t* dwarf2out.c (output_call_frame_info): Likewise.\n\t* output.h (default_emit_unwind_label): Likewise.\n\t* target.h (unwind_label): Likewise.\n\t* varasm.c (default_emit_unwind_label): Likewise.\n\n\t* config/darwin.h (DWARF2_DEBUGGING_INFO, PREFERRED_DEBUGGING_TYPE,\n\tDEBUG_FRAME_SECTION, DEBUG_INFO_SECTION, DEBUG_ABBREV_SECTION,\n\tDEBUG_ARANGES_SECTION, DEBUG_MACINFO_SECTION, DEBUG_LINE_SECTION,\n\tDEBUG_LOC_SECTION, DEBUG_PUBNAMES_SECTION, DEBUG_STR_SECTION,\n\tDEBUG_RANGES_SECTION): Define.\n\nRadar 3657068.\n\nCo-Authored-By: Devang Patel <dpatel@apple.com>\n\nFrom-SVN: r82016", "tree": {"sha": "4adbc5fe821c2a82672b65131f45055c866c807e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4adbc5fe821c2a82672b65131f45055c866c807e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eeab4d81a61970e9079dbd9a8033d13e0cc27980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeab4d81a61970e9079dbd9a8033d13e0cc27980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeab4d81a61970e9079dbd9a8033d13e0cc27980", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeab4d81a61970e9079dbd9a8033d13e0cc27980/comments", "author": null, "committer": null, "parents": [{"sha": "bb9a388dad84486a075d822e4bed05a74faab780", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb9a388dad84486a075d822e4bed05a74faab780", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb9a388dad84486a075d822e4bed05a74faab780"}], "stats": {"total": 68, "additions": 55, "deletions": 13}, "files": [{"sha": "331c634c1005bbad6ee09b2d594fc56db490dd78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeab4d81a61970e9079dbd9a8033d13e0cc27980/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeab4d81a61970e9079dbd9a8033d13e0cc27980/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eeab4d81a61970e9079dbd9a8033d13e0cc27980", "patch": "@@ -1,3 +1,21 @@\n+2004-05-18  Mike Stump  <mrs@apple.com>\n+\t    Devang Patel  <dpatel@apple.com>\n+\n+\t* doc/tm.texi (TARGET_ASM_EMIT_UNWIND_LABEL): Add argument to indicate\n+\tif this label is for eh.\n+\t* config/darwin-protos.h (darwin_emit_unwind_label): Likewise.\n+\t* config/darwin.c (darwin_emit_unwind_label): Likewise.\n+\t* dwarf2out.c (output_call_frame_info): Likewise.\n+\t* output.h (default_emit_unwind_label): Likewise.\n+\t* target.h (unwind_label): Likewise.\n+\t* varasm.c (default_emit_unwind_label): Likewise.\n+\n+\t* config/darwin.h (DWARF2_DEBUGGING_INFO, PREFERRED_DEBUGGING_TYPE,\n+\tDEBUG_FRAME_SECTION, DEBUG_INFO_SECTION, DEBUG_ABBREV_SECTION,\n+\tDEBUG_ARANGES_SECTION, DEBUG_MACINFO_SECTION, DEBUG_LINE_SECTION,\n+\tDEBUG_LOC_SECTION, DEBUG_PUBNAMES_SECTION, DEBUG_STR_SECTION,\n+\tDEBUG_RANGES_SECTION): Define.\n+\n 2004-05-18  Zack Weinberg  <zack@codesourcery.com>\n \n \t* cgraph.c (hash_node, eq_node, cgraph_node, cgraph_remove_node)"}, {"sha": "1cfdd73223cd88132ca6080f9345f68775040706", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeab4d81a61970e9079dbd9a8033d13e0cc27980/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeab4d81a61970e9079dbd9a8033d13e0cc27980/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=eeab4d81a61970e9079dbd9a8033d13e0cc27980", "patch": "@@ -76,7 +76,7 @@ extern void darwin_asm_named_section (const char *, unsigned int);\n extern unsigned int darwin_section_type_flags (tree, const char *, int);\n extern void darwin_non_lazy_pcrel (FILE *, rtx);\n \n-extern void darwin_emit_unwind_label(FILE *, tree, int);\n+extern void darwin_emit_unwind_label (FILE *, tree, int, int);\n \n extern void darwin_pragma_ignore (struct cpp_reader *);\n extern void darwin_pragma_options (struct cpp_reader *);"}, {"sha": "89e11ded2e65f35442e2760298d6c40e781d2993", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeab4d81a61970e9079dbd9a8033d13e0cc27980/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeab4d81a61970e9079dbd9a8033d13e0cc27980/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=eeab4d81a61970e9079dbd9a8033d13e0cc27980", "patch": "@@ -1334,10 +1334,12 @@ darwin_unique_section (tree decl, int reloc ATTRIBUTE_UNUSED)\n }\n \n /* Emit a label for an FDE, making it global and/or weak if appropriate. \n-   The third parameter is nonzero if this is just a placeholder for an\n+   The third parameter is nonzero if this is for exception handling.\n+   The fourth parameter is nonzero if this is just a placeholder for an\n    FDE that we are omitting. */\n+\n void \n-darwin_emit_unwind_label(FILE *file, tree decl, int empty)\n+darwin_emit_unwind_label (FILE *file, tree decl, int for_eh, int empty)\n {\n   tree id = DECL_ASSEMBLER_NAME (decl)\n     ? DECL_ASSEMBLER_NAME (decl)\n@@ -1350,12 +1352,15 @@ darwin_emit_unwind_label(FILE *file, tree decl, int empty)\n   unsigned int base_len = IDENTIFIER_LENGTH (id);\n \n   const char *suffix = \".eh\";\n-  unsigned int suffix_len = 3;\n \n   int need_quotes = name_needs_quotes (base);\n   int quotes_len = need_quotes ? 2 : 0;\n+  char *lab;\n+\n+  if (! for_eh)\n+    suffix = \".eh1\";\n \n-  char *lab = xmalloc (prefix_len + base_len + suffix_len + quotes_len + 1);\n+  lab = xmalloc (prefix_len + base_len + strlen (suffix) + quotes_len + 1);\n   lab[0] = '\\0';\n \n   if (need_quotes)\n@@ -1385,6 +1390,7 @@ darwin_emit_unwind_label(FILE *file, tree decl, int empty)\n }\n \n /* Generate a PC-relative reference to a Mach-O non-lazy-symbol.  */ \n+\n void\n darwin_non_lazy_pcrel (FILE *file, rtx addr)\n {"}, {"sha": "67bb29434bb72810f3fbbda59296099b657cf6ba", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeab4d81a61970e9079dbd9a8033d13e0cc27980/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeab4d81a61970e9079dbd9a8033d13e0cc27980/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=eeab4d81a61970e9079dbd9a8033d13e0cc27980", "patch": "@@ -304,6 +304,21 @@ Boston, MA 02111-1307, USA.  */\n \n #define DBX_DEBUGGING_INFO 1\n \n+/* Also enable Dwarf 2 as an option.  */\n+#define DWARF2_DEBUGGING_INFO\n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+\n+#define DEBUG_FRAME_SECTION   \"__DWARFA,__debug_frame,coalesced,no_toc+strip_static_syms\"\n+#define DEBUG_INFO_SECTION    \"__DWARFA,__debug_info\"\n+#define DEBUG_ABBREV_SECTION  \"__DWARFA,__debug_abbrev\"\n+#define DEBUG_ARANGES_SECTION \"__DWARFA,__debug_aranges\"\n+#define DEBUG_MACINFO_SECTION \"__DWARFA,__debug_macinfo\"\n+#define DEBUG_LINE_SECTION    \"__DWARFA,__debug_line\"\n+#define DEBUG_LOC_SECTION     \"__DWARFA,__debug_loc\"\n+#define DEBUG_PUBNAMES_SECTION        \"__DWARFA,__debug_pubnames\"\n+#define DEBUG_STR_SECTION     \"__DWARFA,__debug_str\"\n+#define DEBUG_RANGES_SECTION  \"__DWARFA,__debug_ranges\"\n+\n /* When generating stabs debugging, use N_BINCL entries.  */\n \n #define DBX_USE_BINCL"}, {"sha": "43543a811035281755527fa86d3216896aaf3866", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeab4d81a61970e9079dbd9a8033d13e0cc27980/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeab4d81a61970e9079dbd9a8033d13e0cc27980/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=eeab4d81a61970e9079dbd9a8033d13e0cc27980", "patch": "@@ -7493,13 +7493,14 @@ If this macro is not defined, nothing special is output at the end of\n the jump-table.\n @end defmac\n \n-@deftypefn {Target Hook} void TARGET_ASM_EMIT_UNWIND_LABEL (@var{stream}, @var{decl}, @var{empty})\n+@deftypefn {Target Hook} void TARGET_ASM_EMIT_UNWIND_LABEL (@var{stream}, @var{decl}, @var{for_eh}, @var{empty})\n This target hook emits a label at the beginning of each FDE.  It\n should be defined on targets where FDEs need special labels, and it\n should write the appropriate label, for the FDE associated with the\n function declaration @var{decl}, to the stdio stream @var{stream}.\n-The third argument, @var{empty}, is a boolean: true if this is a\n-placeholder label for an omitted FDE.\n+The third argument, @var{for_eh}, is a boolean: true if this is for an\n+exception table.  The fourth argument, @var{empty}, is a boolean:\n+true if this is a placeholder label for an omitted FDE.\n \n The default is that FDEs are not given nonlocal labels.\n @end deftypefn"}, {"sha": "92767ab0ed5f64cd77bc33d42ed9d7f6a907768f", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeab4d81a61970e9079dbd9a8033d13e0cc27980/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeab4d81a61970e9079dbd9a8033d13e0cc27980/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=eeab4d81a61970e9079dbd9a8033d13e0cc27980", "patch": "@@ -1959,7 +1959,7 @@ output_call_frame_info (int for_eh)\n           && !fde_table[i].uses_eh_lsda\n \t  && ! DECL_ONE_ONLY (fde_table[i].decl))\n \ttargetm.asm_out.unwind_label (asm_out_file, fde_table[i].decl,\n-\t\t\t\t\t /* empty */ 1);\n+\t\t\t\t      for_eh, /* empty */ 1);\n \n   /* If we don't have any functions we'll want to unwind out of, don't\n      emit any EH unwind information.  Note that if exceptions aren't\n@@ -2123,7 +2123,7 @@ output_call_frame_info (int for_eh)\n \t  && !fde->uses_eh_lsda)\n \tcontinue;\n \n-      targetm.asm_out.unwind_label (asm_out_file, fde->decl, /* empty */ 0);\n+      targetm.asm_out.unwind_label (asm_out_file, fde->decl, for_eh, /* empty */ 0);\n       targetm.asm_out.internal_label (asm_out_file, FDE_LABEL, for_eh + i * 2);\n       ASM_GENERATE_INTERNAL_LABEL (l1, FDE_AFTER_SIZE_LABEL, for_eh + i * 2);\n       ASM_GENERATE_INTERNAL_LABEL (l2, FDE_END_LABEL, for_eh + i * 2);"}, {"sha": "8ea3d12af99459290b61d8548358a999b9bd68bb", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeab4d81a61970e9079dbd9a8033d13e0cc27980/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeab4d81a61970e9079dbd9a8033d13e0cc27980/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=eeab4d81a61970e9079dbd9a8033d13e0cc27980", "patch": "@@ -515,7 +515,7 @@ extern const char *default_strip_name_encoding (const char *);\n extern bool default_binds_local_p (tree);\n extern bool default_binds_local_p_1 (tree, int);\n extern void default_globalize_label (FILE *, const char *);\n-extern void default_emit_unwind_label (FILE *, tree, int);\n+extern void default_emit_unwind_label (FILE *, tree, int, int);\n extern void default_internal_label (FILE *, const char *, unsigned long);\n extern void default_file_start (void);\n extern void file_end_indicate_exec_stack (void);"}, {"sha": "8e0b592291a9399170bccb56eded8c92ebe39af8", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeab4d81a61970e9079dbd9a8033d13e0cc27980/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeab4d81a61970e9079dbd9a8033d13e0cc27980/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=eeab4d81a61970e9079dbd9a8033d13e0cc27980", "patch": "@@ -76,9 +76,10 @@ struct gcc_target\n \n     /* Output code that will emit a label for unwind info, if this\n        target requires such labels.  Second argument is the decl the\n-       unwind info is associated with, third is is a boolean: true if\n+       unwind info is associated with, third is a boolean: true if\n+       this is for exception handling, fourth is a boolean: true if\n        this is only a placeholder for an omitted FDE. */\n-    void (* unwind_label ) (FILE *, tree, int);\n+    void (* unwind_label) (FILE *, tree, int, int);\n \n     /* Output an internal label.  */\n     void (* internal_label) (FILE *, const char *, unsigned long);"}, {"sha": "beace4ed8d46ad4bdcfd50d06bcafceaf3ae8d06", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeab4d81a61970e9079dbd9a8033d13e0cc27980/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeab4d81a61970e9079dbd9a8033d13e0cc27980/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=eeab4d81a61970e9079dbd9a8033d13e0cc27980", "patch": "@@ -5000,6 +5000,7 @@ default_globalize_label (FILE * stream, const char *name)\n void\n default_emit_unwind_label (FILE * stream ATTRIBUTE_UNUSED,\n \t\t\t   tree decl ATTRIBUTE_UNUSED,\n+\t\t\t   int for_eh ATTRIBUTE_UNUSED,\n \t\t\t   int empty ATTRIBUTE_UNUSED)\n { \n }"}]}