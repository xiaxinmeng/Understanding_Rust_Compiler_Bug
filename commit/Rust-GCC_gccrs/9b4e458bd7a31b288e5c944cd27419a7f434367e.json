{"sha": "9b4e458bd7a31b288e5c944cd27419a7f434367e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI0ZTQ1OGJkN2EzMWIyODhlNWM5NDRjZDI3NDE5YTdmNDM0MzY3ZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-11-27T23:29:15Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-11-27T23:29:15Z"}, "message": "compiler: record final type for numeric expressions\n    \n    Inlinable function bodies are generated after the determine_types pass,\n    so we know the type for all constants.  Rather than try to determine\n    it again when inlining, record the type in the export data, using a\n    $convert expression.  Reduce the number of explicit $convert\n    expressions by recording a type context with the expected type in\n    cases where that type is known.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/150071\n\nFrom-SVN: r266534", "tree": {"sha": "64a5c3a3eacb60fdeed40da0d460c6c6a27647f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64a5c3a3eacb60fdeed40da0d460c6c6a27647f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b4e458bd7a31b288e5c944cd27419a7f434367e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4e458bd7a31b288e5c944cd27419a7f434367e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b4e458bd7a31b288e5c944cd27419a7f434367e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4e458bd7a31b288e5c944cd27419a7f434367e/comments", "author": null, "committer": null, "parents": [{"sha": "da29d2a36ef4bc2d6459267ce21ac932ddfbad6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da29d2a36ef4bc2d6459267ce21ac932ddfbad6a"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "9ce86dea723bf042d44fe6a9832328adf33773af", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4e458bd7a31b288e5c944cd27419a7f434367e/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4e458bd7a31b288e5c944cd27419a7f434367e/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=9b4e458bd7a31b288e5c944cd27419a7f434367e", "patch": "@@ -1,4 +1,4 @@\n-5d0c788cd6099c2bb28bb0ff6a04d94006fbfca8\n+267d91b41571329e71a88f56df46444b305482da\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "69fbd6e3bdb1a5e73d4d1382a1b42e31994aa9d2", "filename": "gcc/go/gofrontend/export.h", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4e458bd7a31b288e5c944cd27419a7f434367e/gcc%2Fgo%2Fgofrontend%2Fexport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4e458bd7a31b288e5c944cd27419a7f434367e/gcc%2Fgo%2Fgofrontend%2Fexport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.h?ref=9b4e458bd7a31b288e5c944cd27419a7f434367e", "patch": "@@ -303,7 +303,7 @@ class Export_function_body : public String_dump\n {\n  public:\n   Export_function_body(Export* exp, int indent)\n-    : exp_(exp), indent_(indent)\n+    : exp_(exp), type_context_(NULL), indent_(indent)\n   { }\n \n   // Write a character to the body.\n@@ -326,6 +326,16 @@ class Export_function_body : public String_dump\n   write_type(const Type* type)\n   { this->exp_->write_type_to(type, this); }\n \n+  // Return the current type context.\n+  Type*\n+  type_context() const\n+  { return this->type_context_; }\n+\n+  // Set the current type context.\n+  void\n+  set_type_context(Type* type)\n+  { this->type_context_ = type; }\n+\n   // Append as many spaces as the current indentation level.\n   void\n   indent()\n@@ -354,6 +364,8 @@ class Export_function_body : public String_dump\n   Export* exp_;\n   // The body we are building.\n   std::string body_;\n+  // Current type context.  Used to avoid duplicate type conversions.\n+  Type* type_context_;\n   // Current indentation level: the number of spaces before each statement.\n   int indent_;\n };"}, {"sha": "5f00eff5655f6955c901b628fa52b787855a6513", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4e458bd7a31b288e5c944cd27419a7f434367e/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4e458bd7a31b288e5c944cd27419a7f434367e/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=9b4e458bd7a31b288e5c944cd27419a7f434367e", "patch": "@@ -2142,11 +2142,25 @@ Integer_expression::export_integer(String_dump* exp, const mpz_t val)\n void\n Integer_expression::do_export(Export_function_body* efb) const\n {\n+  bool added_type = false;\n+  if (this->type_ != NULL\n+      && !this->type_->is_abstract()\n+      && this->type_ != efb->type_context())\n+    {\n+      efb->write_c_string(\"$convert(\");\n+      efb->write_type(this->type_);\n+      efb->write_c_string(\", \");\n+      added_type = true;\n+    }\n+\n   Integer_expression::export_integer(efb, this->val_);\n   if (this->is_character_constant_)\n     efb->write_c_string(\"'\");\n   // A trailing space lets us reliably identify the end of the number.\n   efb->write_c_string(\" \");\n+\n+  if (added_type)\n+    efb->write_c_string(\")\");\n }\n \n // Import an integer, floating point, or complex value.  This handles\n@@ -2509,9 +2523,23 @@ Float_expression::export_float(String_dump *exp, const mpfr_t val)\n void\n Float_expression::do_export(Export_function_body* efb) const\n {\n+  bool added_type = false;\n+  if (this->type_ != NULL\n+      && !this->type_->is_abstract()\n+      && this->type_ != efb->type_context())\n+    {\n+      efb->write_c_string(\"$convert(\");\n+      efb->write_type(this->type_);\n+      efb->write_c_string(\", \");\n+      added_type = true;\n+    }\n+\n   Float_expression::export_float(efb, this->val_);\n   // A trailing space lets us reliably identify the end of the number.\n   efb->write_c_string(\" \");\n+\n+  if (added_type)\n+    efb->write_c_string(\")\");\n }\n \n // Dump a floating point number to the dump file.\n@@ -2699,9 +2727,23 @@ Complex_expression::export_complex(String_dump* exp, const mpc_t val)\n void\n Complex_expression::do_export(Export_function_body* efb) const\n {\n+  bool added_type = false;\n+  if (this->type_ != NULL\n+      && !this->type_->is_abstract()\n+      && this->type_ != efb->type_context())\n+    {\n+      efb->write_c_string(\"$convert(\");\n+      efb->write_type(this->type_);\n+      efb->write_c_string(\", \");\n+      added_type = true;\n+    }\n+\n   Complex_expression::export_complex(efb, this->val_);\n   // A trailing space lets us reliably identify the end of the number.\n   efb->write_c_string(\" \");\n+\n+  if (added_type)\n+    efb->write_c_string(\")\");\n }\n \n // Dump a complex expression to the dump file.\n@@ -3620,7 +3662,14 @@ Type_conversion_expression::do_export(Export_function_body* efb) const\n   efb->write_c_string(\"$convert(\");\n   efb->write_type(this->type_);\n   efb->write_c_string(\", \");\n+\n+  Type* old_context = efb->type_context();\n+  efb->set_type_context(this->type_);\n+\n   this->expr_->export_expression(efb);\n+\n+  efb->set_type_context(old_context);\n+\n   efb->write_c_string(\")\");\n }\n "}, {"sha": "5654e30849d3bde6b321d16437d5df91e88465a1", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4e458bd7a31b288e5c944cd27419a7f434367e/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4e458bd7a31b288e5c944cd27419a7f434367e/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=9b4e458bd7a31b288e5c944cd27419a7f434367e", "patch": "@@ -7635,6 +7635,8 @@ Named_constant::export_const(Export* exp, const std::string& name) const\n   exp->write_c_string(\"= \");\n \n   Export_function_body efb(exp, 0);\n+  if (!this->type_->is_abstract())\n+    efb.set_type_context(this->type_);\n   this->expr()->export_expression(&efb);\n   exp->write_string(efb.body());\n "}, {"sha": "a50156c2a2bafac9f45a09bb70e2ef1bec6bbcfc", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4e458bd7a31b288e5c944cd27419a7f434367e/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4e458bd7a31b288e5c944cd27419a7f434367e/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=9b4e458bd7a31b288e5c944cd27419a7f434367e", "patch": "@@ -7552,6 +7552,7 @@ Array_type::do_export(Export* exp) const\n   if (this->length_ != NULL)\n     {\n       Export_function_body efb(exp, 0);\n+      efb.set_type_context(this->length_->type());\n       this->length_->export_expression(&efb);\n       exp->write_string(efb.body());\n     }"}]}