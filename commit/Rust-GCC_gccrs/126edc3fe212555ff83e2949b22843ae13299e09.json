{"sha": "126edc3fe212555ff83e2949b22843ae13299e09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI2ZWRjM2ZlMjEyNTU1ZmY4M2UyOTQ5YjIyODQzYWUxMzI5OWUwOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-09-10T09:23:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-09-10T09:23:16Z"}, "message": "flag-types.h (enum sanitize_code): Add SANITIZE_NONNULL_ATTRIBUTE and SANITIZE_RETURNS_NONNULL_ATTRIBUTE...\n\ngcc/\n\t* flag-types.h (enum sanitize_code): Add SANITIZE_NONNULL_ATTRIBUTE\n\tand SANITIZE_RETURNS_NONNULL_ATTRIBUTE, or them into SANITIZE_UNDEFINED.\n\t* opts.c (common_handle_option): Handle SANITIZE_NONNULL_ATTRIBUTE and\n\tSANITIZE_RETURNS_NONNULL_ATTRIBUTE and disable\n\tflag_delete_null_pointer_checks for them.\n\t* sanitizer.def (BUILT_IN_UBSAN_HANDLE_NONNULL_ARG,\n\tBUILT_IN_UBSAN_HANDLE_NONNULL_ARG_ABORT,\n\tBUILT_IN_UBSAN_HANDLE_NONNULL_RETURN,\n\tBUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_ABORT): New.\n\t* ubsan.c (instrument_bool_enum_load): Set *gsi back to\n\tstmt's iterator.\n\t(instrument_nonnull_arg, instrument_nonnull_return): New functions.\n\t(pass_ubsan::gate): Return true even for SANITIZE_NONNULL_ATTRIBUTE\n\tor SANITIZE_RETURNS_NONNULL_ATTRIBUTE.\n\t(pass_ubsan::execute): Call instrument_nonnull_{arg,return}.\n\t* doc/invoke.texi (-fsanitize=nonnull-attribute,\n\t-fsanitize=returns-nonnull-attribute): Document.\ngcc/testsuite/\n\t* c-c++-common/ubsan/attrib-3.c: New test.\n\t* c-c++-common/ubsan/nonnull-1.c: New test.\n\t* c-c++-common/ubsan/nonnull-2.c: New test.\n\t* c-c++-common/ubsan/nonnull-3.c: New test.\n\t* c-c++-common/ubsan/nonnull-4.c: New test.\n\t* c-c++-common/ubsan/nonnull-5.c: New test.\nlibsanitizer/\n\t* ubsan/ubsan_handlers.cc, ubsan/ubsan_handlers.h: Cherry pick\n\tupstream r215485, r217389, r217391 and r217400.\n\nFrom-SVN: r215118", "tree": {"sha": "303e23d283cab6629b540e2e4d7e2702600c3851", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/303e23d283cab6629b540e2e4d7e2702600c3851"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/126edc3fe212555ff83e2949b22843ae13299e09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/126edc3fe212555ff83e2949b22843ae13299e09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/126edc3fe212555ff83e2949b22843ae13299e09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/126edc3fe212555ff83e2949b22843ae13299e09/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "570a11fe5a60f3012f1c2548745de10fd96b787e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/570a11fe5a60f3012f1c2548745de10fd96b787e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/570a11fe5a60f3012f1c2548745de10fd96b787e"}], "stats": {"total": 475, "additions": 471, "deletions": 4}, "files": [{"sha": "5da8e477f5deb14c9a013a58b5fc54c6604583e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=126edc3fe212555ff83e2949b22843ae13299e09", "patch": "@@ -1,5 +1,23 @@\n 2014-09-10  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* flag-types.h (enum sanitize_code): Add SANITIZE_NONNULL_ATTRIBUTE\n+\tand SANITIZE_RETURNS_NONNULL_ATTRIBUTE, or them into SANITIZE_UNDEFINED.\n+\t* opts.c (common_handle_option): Handle SANITIZE_NONNULL_ATTRIBUTE and\n+\tSANITIZE_RETURNS_NONNULL_ATTRIBUTE and disable\n+\tflag_delete_null_pointer_checks for them.\n+\t* sanitizer.def (BUILT_IN_UBSAN_HANDLE_NONNULL_ARG,\n+\tBUILT_IN_UBSAN_HANDLE_NONNULL_ARG_ABORT,\n+\tBUILT_IN_UBSAN_HANDLE_NONNULL_RETURN,\n+\tBUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_ABORT): New.\n+\t* ubsan.c (instrument_bool_enum_load): Set *gsi back to\n+\tstmt's iterator.\n+\t(instrument_nonnull_arg, instrument_nonnull_return): New functions.\n+\t(pass_ubsan::gate): Return true even for SANITIZE_NONNULL_ATTRIBUTE\n+\tor SANITIZE_RETURNS_NONNULL_ATTRIBUTE.\n+\t(pass_ubsan::execute): Call instrument_nonnull_{arg,return}.\n+\t* doc/invoke.texi (-fsanitize=nonnull-attribute,\n+\t-fsanitize=returns-nonnull-attribute): Document.\n+\n \t* ubsan.h (struct ubsan_mismatch_data): Removed.\n \t(ubsan_create_data): Remove MISMATCH argument, add LOCCNT argument.\n \t* ubsan.c (ubsan_source_location): For unknown locations,"}, {"sha": "863b382e8684dd11e63384c1e591fee847c48389", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=126edc3fe212555ff83e2949b22843ae13299e09", "patch": "@@ -5582,6 +5582,20 @@ This option enables floating-point type to integer conversion checking.\n We check that the result of the conversion does not overflow.\n This option does not work well with @code{FE_INVALID} exceptions enabled.\n \n+@item -fsanitize=nonnull-attribute\n+@opindex fsanitize=nonnull-attribute\n+\n+This option enables instrumentation of calls, checking whether null values\n+are not passed to arguments marked as requiring a non-null value by the\n+@code{nonnull} function attribute.\n+\n+@item -fsanitize=returns-nonnull-attribute\n+@opindex fsanitize=returns-nonnull-attribute\n+\n+This option enables instrumentation of return statements in functions\n+marked with @code{returns_nonnull} function attribute, to detect returning\n+of null values from such functions.\n+\n @end table\n \n While @option{-ftrapv} causes traps for signed overflows to be emitted,"}, {"sha": "d0818e56825d8533509187013887106614cfbbc1", "filename": "gcc/flag-types.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=126edc3fe212555ff83e2949b22843ae13299e09", "patch": "@@ -234,10 +234,14 @@ enum sanitize_code {\n   SANITIZE_FLOAT_CAST = 1 << 15,\n   SANITIZE_BOUNDS = 1 << 16,\n   SANITIZE_ALIGNMENT = 1 << 17,\n+  SANITIZE_NONNULL_ATTRIBUTE = 1 << 18,\n+  SANITIZE_RETURNS_NONNULL_ATTRIBUTE = 1 << 19,\n   SANITIZE_UNDEFINED = SANITIZE_SHIFT | SANITIZE_DIVIDE | SANITIZE_UNREACHABLE\n \t\t       | SANITIZE_VLA | SANITIZE_NULL | SANITIZE_RETURN\n \t\t       | SANITIZE_SI_OVERFLOW | SANITIZE_BOOL | SANITIZE_ENUM\n-\t\t       | SANITIZE_BOUNDS | SANITIZE_ALIGNMENT,\n+\t\t       | SANITIZE_BOUNDS | SANITIZE_ALIGNMENT\n+\t\t       | SANITIZE_NONNULL_ATTRIBUTE\n+\t\t       | SANITIZE_RETURNS_NONNULL_ATTRIBUTE,\n   SANITIZE_NONDEFAULT = SANITIZE_FLOAT_DIVIDE | SANITIZE_FLOAT_CAST\n };\n "}, {"sha": "0a49bc0b32fbaf6bfb5158334826d74dc1121cd4", "filename": "gcc/opts.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=126edc3fe212555ff83e2949b22843ae13299e09", "patch": "@@ -1499,6 +1499,11 @@ common_handle_option (struct gcc_options *opts,\n \t\tsizeof \"float-cast-overflow\" - 1 },\n \t      { \"bounds\", SANITIZE_BOUNDS, sizeof \"bounds\" - 1 },\n \t      { \"alignment\", SANITIZE_ALIGNMENT, sizeof \"alignment\" - 1 },\n+\t      { \"nonnull-attribute\", SANITIZE_NONNULL_ATTRIBUTE,\n+\t\tsizeof \"nonnull-attribute\" - 1 },\n+\t      { \"returns-nonnull-attribute\",\n+\t\tSANITIZE_RETURNS_NONNULL_ATTRIBUTE,\n+\t\tsizeof \"returns-nonnull-attribute\" - 1 },\n \t      { NULL, 0, 0 }\n \t    };\n \t    const char *comma;\n@@ -1542,7 +1547,8 @@ common_handle_option (struct gcc_options *opts,\n \n \t/* When instrumenting the pointers, we don't want to remove\n \t   the null pointer checks.  */\n-\tif (flag_sanitize & SANITIZE_NULL)\n+\tif (flag_sanitize & (SANITIZE_NULL | SANITIZE_NONNULL_ATTRIBUTE\n+\t\t\t     | SANITIZE_RETURNS_NONNULL_ATTRIBUTE))\n \t  opts->x_flag_delete_null_pointer_checks = 0;\n \n \t/* Kernel ASan implies normal ASan but does not yet support"}, {"sha": "bba28bde33487e5487c50fd5ffe311d2270e74a7", "filename": "gcc/sanitizer.def", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2Fsanitizer.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2Fsanitizer.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanitizer.def?ref=126edc3fe212555ff83e2949b22843ae13299e09", "patch": "@@ -417,3 +417,19 @@ DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS_ABORT,\n \t\t      \"__ubsan_handle_out_of_bounds_abort\",\n \t\t      BT_FN_VOID_PTR_PTR,\n \t\t      ATTR_COLD_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_NONNULL_ARG,\n+\t\t      \"__ubsan_handle_nonnull_arg\",\n+\t\t      BT_FN_VOID_PTR_PTRMODE,\n+\t\t      ATTR_COLD_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_NONNULL_ARG_ABORT,\n+\t\t      \"__ubsan_handle_nonnull_arg_abort\",\n+\t\t      BT_FN_VOID_PTR_PTRMODE,\n+\t\t      ATTR_COLD_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN,\n+\t\t      \"__ubsan_handle_nonnull_return\",\n+\t\t      BT_FN_VOID_PTR,\n+\t\t      ATTR_COLD_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_ABORT,\n+\t\t      \"__ubsan_handle_nonnull_return_abort\",\n+\t\t      BT_FN_VOID_PTR,\n+\t\t      ATTR_COLD_NORETURN_NOTHROW_LEAF_LIST)"}, {"sha": "b6b96fddcdec8a8d598bbb8d77095e7459b2dcc9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=126edc3fe212555ff83e2949b22843ae13299e09", "patch": "@@ -1,3 +1,12 @@\n+2014-09-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/ubsan/attrib-3.c: New test.\n+\t* c-c++-common/ubsan/nonnull-1.c: New test.\n+\t* c-c++-common/ubsan/nonnull-2.c: New test.\n+\t* c-c++-common/ubsan/nonnull-3.c: New test.\n+\t* c-c++-common/ubsan/nonnull-4.c: New test.\n+\t* c-c++-common/ubsan/nonnull-5.c: New test.\n+\n 2014-09-10  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* g++.dg/lto/pr63166_0.ii: New testcase."}, {"sha": "3aaf49d85a581b8f0109c3c0788ba774c969dc2c", "filename": "gcc/testsuite/c-c++-common/ubsan/attrib-3.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fattrib-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fattrib-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fattrib-3.c?ref=126edc3fe212555ff83e2949b22843ae13299e09", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize=undefined\" } */\n+\n+/* Test that we don't instrument functions marked with\n+   no_sanitize_undefined attribute.  */\n+\n+__attribute__((no_sanitize_undefined, returns_nonnull))\n+char *\n+foo (char *x)\n+{\n+  return x;\n+}\n+\n+__attribute__((nonnull)) void bar (char *, int, char *);\n+\n+__attribute__((no_sanitize_undefined))\n+void\n+baz (char *x, int y, char *z)\n+{\n+  bar (x, y, z);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ubsan_handle\" } } */"}, {"sha": "d3063ca4a6fcb890186e3fcd152ac63fc1a3cb40", "filename": "gcc/testsuite/c-c++-common/ubsan/nonnull-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnonnull-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnonnull-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnonnull-1.c?ref=126edc3fe212555ff83e2949b22843ae13299e09", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=nonnull-attribute,returns-nonnull-attribute\" } */\n+\n+int q, r;\n+void *a, *b, *c = (void *) &q, *d, *e, *f = (void *) &q, *g, *h;\n+\n+__attribute__((returns_nonnull, nonnull (1, 3)))\n+void *\n+foo (void *p, void *q, void *r)\n+{\n+  a = p;\n+  b = r;\n+  return q;\n+}\n+\n+int\n+bar (const void *a, const void *b)\n+{\n+  int c = *(const int *) a;\n+  int d = *(const int *) b;\n+  return c - d;\n+}\n+\n+int\n+main ()\n+{\n+  asm volatile (\"\" : : : \"memory\");\n+  d = foo (c, b, c);\n+  e = foo (e, c, f);\n+  g = foo (c, f, g);\n+  __builtin_memset (d, '\\0', q);\n+  return 0;\n+}\n+\n+/* { dg-output \"\\.c:13:\\[0-9]*:\\[^\\n\\r]*null pointer returned from function declared to never return null\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*\\.c:29:\\[0-9]*:\\[^\\n\\r]*null pointer passed as argument 1, which is declared to never be null\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*\\.c:30:\\[0-9]*:\\[^\\n\\r]*null pointer passed as argument 3, which is declared to never be null\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*\\.c:31:\\[0-9]*:\\[^\\n\\r]*null pointer passed as argument 1, which is declared to never be null\" } */"}, {"sha": "49a5cf208e0c0e828bddcf90a997ae60c18eab1a", "filename": "gcc/testsuite/c-c++-common/ubsan/nonnull-2.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnonnull-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnonnull-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnonnull-2.c?ref=126edc3fe212555ff83e2949b22843ae13299e09", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"ubsan\" } */\n+/* { dg-options \"-fsanitize=undefined -fno-sanitize-recover\" } */\n+\n+int q, r;\n+void *a, *b, *c = (void *) &q, *d, *e, *f = (void *) &q, *g, *h;\n+\n+__attribute__((returns_nonnull, nonnull (1, 3)))\n+void *\n+foo (void *p, void *q, void *r)\n+{\n+  a = p;\n+  b = r;\n+  return q;\n+}\n+\n+int\n+bar (const void *a, const void *b)\n+{\n+  int c = *(const int *) a;\n+  int d = *(const int *) b;\n+  return c - d;\n+}\n+\n+int\n+main ()\n+{\n+  asm volatile (\"\" : : : \"memory\");\n+  d = foo (c, b, c);\n+  e = foo (e, c, f);\n+  g = foo (c, f, g);\n+  __builtin_memset (d, '\\0', q);\n+  return 0;\n+}\n+\n+/* { dg-output \"\\.c:14:\\[0-9]*:\\[^\\n\\r]*null pointer returned from function declared to never return null\" } */"}, {"sha": "80018c2ef26e648d5666d1fdb7d1d3af15e6feb6", "filename": "gcc/testsuite/c-c++-common/ubsan/nonnull-3.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnonnull-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnonnull-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnonnull-3.c?ref=126edc3fe212555ff83e2949b22843ae13299e09", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"ubsan\" } */\n+/* { dg-options \"-fsanitize=undefined -fno-sanitize-recover\" } */\n+\n+int q, r;\n+void *a, *b, *c = (void *) &q, *d, *e, *f = (void *) &q, *g, *h;\n+\n+__attribute__((returns_nonnull, nonnull (1, 3)))\n+void *\n+foo (void *p, void *q, void *r)\n+{\n+  a = p;\n+  b = r;\n+  return q;\n+}\n+\n+int\n+bar (const void *a, const void *b)\n+{\n+  int c = *(const int *) a;\n+  int d = *(const int *) b;\n+  return c - d;\n+}\n+\n+int\n+main ()\n+{\n+  asm volatile (\"\" : : : \"memory\");\n+  d = foo (c, (void *) &r, c);\n+  e = foo (e, c, f);\n+  g = foo (c, f, g);\n+  __builtin_memset (d, '\\0', q);\n+  return 0;\n+}\n+\n+/* { dg-output \"\\.c:30:\\[0-9]*:\\[^\\n\\r]*null pointer passed as argument 1, which is declared to never be null\" } */"}, {"sha": "b49c72e345c2933ecebf5bc8a800396c49673862", "filename": "gcc/testsuite/c-c++-common/ubsan/nonnull-4.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnonnull-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnonnull-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnonnull-4.c?ref=126edc3fe212555ff83e2949b22843ae13299e09", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"ubsan\" } */\n+/* { dg-options \"-fsanitize=undefined -fsanitize-undefined-trap-on-error\" } */\n+\n+int q, r;\n+void *a, *b, *c = (void *) &q, *d, *e, *f = (void *) &q, *g, *h;\n+\n+__attribute__((returns_nonnull, nonnull (1, 3)))\n+void *\n+foo (void *p, void *q, void *r)\n+{\n+  a = p;\n+  b = r;\n+  return q;\n+}\n+\n+int\n+bar (const void *a, const void *b)\n+{\n+  int c = *(const int *) a;\n+  int d = *(const int *) b;\n+  return c - d;\n+}\n+\n+int\n+main ()\n+{\n+  asm volatile (\"\" : : : \"memory\");\n+  d = foo (c, b, c);\n+  e = foo (e, c, f);\n+  g = foo (c, f, g);\n+  __builtin_memset (d, '\\0', q);\n+  return 0;\n+}"}, {"sha": "fefbdc3b4ca564513941a998a08b762e0a5a4d15", "filename": "gcc/testsuite/c-c++-common/ubsan/nonnull-5.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnonnull-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnonnull-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fnonnull-5.c?ref=126edc3fe212555ff83e2949b22843ae13299e09", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"ubsan\" } */\n+/* { dg-options \"-fsanitize=undefined -fsanitize-undefined-trap-on-error\" } */\n+\n+int q, r;\n+void *a, *b, *c = (void *) &q, *d, *e, *f = (void *) &q, *g, *h;\n+\n+__attribute__((returns_nonnull, nonnull (1, 3)))\n+void *\n+foo (void *p, void *q, void *r)\n+{\n+  a = p;\n+  b = r;\n+  return q;\n+}\n+\n+int\n+bar (const void *a, const void *b)\n+{\n+  int c = *(const int *) a;\n+  int d = *(const int *) b;\n+  return c - d;\n+}\n+\n+int\n+main ()\n+{\n+  asm volatile (\"\" : : : \"memory\");\n+  d = foo (c, (void *) &r, c);\n+  e = foo (e, c, f);\n+  g = foo (c, f, g);\n+  __builtin_memset (d, '\\0', q);\n+  return 0;\n+}"}, {"sha": "e3128ad6177027f75f3c036abcebd674a33d61dd", "filename": "gcc/ubsan.c", "status": "modified", "additions": 139, "deletions": 2, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126edc3fe212555ff83e2949b22843ae13299e09/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=126edc3fe212555ff83e2949b22843ae13299e09", "patch": "@@ -1090,6 +1090,7 @@ instrument_bool_enum_load (gimple_stmt_iterator *gsi)\n     }\n   gimple_set_location (g, loc);\n   gsi_insert_before (&gsi2, g, GSI_SAME_STMT);\n+  *gsi = gsi_for_stmt (stmt);\n }\n \n /* Instrument float point-to-integer conversion.  TYPE is an integer type of\n@@ -1215,6 +1216,122 @@ ubsan_instrument_float_cast (location_t loc, tree type, tree expr)\n \t\t      fn, integer_zero_node);\n }\n \n+/* Instrument values passed to function arguments with nonnull attribute.  */\n+\n+static void\n+instrument_nonnull_arg (gimple_stmt_iterator *gsi)\n+{\n+  gimple stmt = gsi_stmt (*gsi);\n+  location_t loc[2];\n+  /* infer_nonnull_range needs flag_delete_null_pointer_checks set,\n+     while for nonnull sanitization it is clear.  */\n+  int save_flag_delete_null_pointer_checks = flag_delete_null_pointer_checks;\n+  flag_delete_null_pointer_checks = 1;\n+  loc[0] = gimple_location (stmt);\n+  loc[1] = UNKNOWN_LOCATION;\n+  for (unsigned int i = 0; i < gimple_call_num_args (stmt); i++)\n+    {\n+      tree arg = gimple_call_arg (stmt, i);\n+      if (POINTER_TYPE_P (TREE_TYPE (arg))\n+\t  && infer_nonnull_range (stmt, arg, false, true))\n+\t{\n+\t  gimple g;\n+\t  if (!is_gimple_val (arg))\n+\t    {\n+\t      g = gimple_build_assign (make_ssa_name (TREE_TYPE (arg), NULL),\n+\t\t\t\t       arg);\n+\t      gimple_set_location (g, loc[0]);\n+\t      gsi_insert_before (gsi, g, GSI_SAME_STMT);\n+\t      arg = gimple_assign_lhs (g);\n+\t    }\n+\n+\t  basic_block then_bb, fallthru_bb;\n+\t  *gsi = create_cond_insert_point (gsi, true, false, true,\n+\t\t\t\t\t   &then_bb, &fallthru_bb);\n+\t  g = gimple_build_cond (EQ_EXPR, arg,\n+\t\t\t\t build_zero_cst (TREE_TYPE (arg)),\n+\t\t\t\t NULL_TREE, NULL_TREE);\n+\t  gimple_set_location (g, loc[0]);\n+\t  gsi_insert_after (gsi, g, GSI_NEW_STMT);\n+\n+\t  *gsi = gsi_after_labels (then_bb);\n+\t  if (flag_sanitize_undefined_trap_on_error)\n+\t    g = gimple_build_call (builtin_decl_explicit (BUILT_IN_TRAP), 0);\n+\t  else\n+\t    {\n+\t      tree data = ubsan_create_data (\"__ubsan_nonnull_arg_data\",\n+\t\t\t\t\t     2, loc, NULL_TREE,\n+\t\t\t\t\t     build_int_cst (integer_type_node,\n+\t\t\t\t\t\t\t    i + 1),\n+\t\t\t\t\t     NULL_TREE);\n+\t      data = build_fold_addr_expr_loc (loc[0], data);\n+\t      enum built_in_function bcode\n+\t\t= flag_sanitize_recover\n+\t\t  ? BUILT_IN_UBSAN_HANDLE_NONNULL_ARG\n+\t\t  : BUILT_IN_UBSAN_HANDLE_NONNULL_ARG_ABORT;\n+\t      tree fn = builtin_decl_explicit (bcode);\n+\n+\t      g = gimple_build_call (fn, 1, data);\n+\t    }\n+\t  gimple_set_location (g, loc[0]);\n+\t  gsi_insert_before (gsi, g, GSI_SAME_STMT);\n+\t}\n+      *gsi = gsi_for_stmt (stmt);\n+    }\n+  flag_delete_null_pointer_checks = save_flag_delete_null_pointer_checks;\n+}\n+\n+/* Instrument returns in functions with returns_nonnull attribute.  */\n+\n+static void\n+instrument_nonnull_return (gimple_stmt_iterator *gsi)\n+{\n+  gimple stmt = gsi_stmt (*gsi);\n+  location_t loc[2];\n+  tree arg = gimple_return_retval (stmt);\n+  /* infer_nonnull_range needs flag_delete_null_pointer_checks set,\n+     while for nonnull return sanitization it is clear.  */\n+  int save_flag_delete_null_pointer_checks = flag_delete_null_pointer_checks;\n+  flag_delete_null_pointer_checks = 1;\n+  loc[0] = gimple_location (stmt);\n+  loc[1] = UNKNOWN_LOCATION;\n+  if (arg\n+      && POINTER_TYPE_P (TREE_TYPE (arg))\n+      && is_gimple_val (arg)\n+      && infer_nonnull_range (stmt, arg, false, true))\n+    {\n+      basic_block then_bb, fallthru_bb;\n+      *gsi = create_cond_insert_point (gsi, true, false, true,\n+\t\t\t\t       &then_bb, &fallthru_bb);\n+      gimple g = gimple_build_cond (EQ_EXPR, arg,\n+\t\t\t\t    build_zero_cst (TREE_TYPE (arg)),\n+\t\t\t\t    NULL_TREE, NULL_TREE);\n+      gimple_set_location (g, loc[0]);\n+      gsi_insert_after (gsi, g, GSI_NEW_STMT);\n+\n+      *gsi = gsi_after_labels (then_bb);\n+      if (flag_sanitize_undefined_trap_on_error)\n+\tg = gimple_build_call (builtin_decl_explicit (BUILT_IN_TRAP), 0);\n+      else\n+\t{\n+\t  tree data = ubsan_create_data (\"__ubsan_nonnull_return_data\",\n+\t\t\t\t\t 2, loc, NULL_TREE, NULL_TREE);\n+\t  data = build_fold_addr_expr_loc (loc[0], data);\n+\t  enum built_in_function bcode\n+\t    = flag_sanitize_recover\n+\t      ? BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN\n+\t      : BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_ABORT;\n+\t  tree fn = builtin_decl_explicit (bcode);\n+\n+\t  g = gimple_build_call (fn, 1, data);\n+\t}\n+      gimple_set_location (g, loc[0]);\n+      gsi_insert_before (gsi, g, GSI_SAME_STMT);\n+      *gsi = gsi_for_stmt (stmt);\n+    }\n+  flag_delete_null_pointer_checks = save_flag_delete_null_pointer_checks;\n+}\n+\n namespace {\n \n const pass_data pass_data_ubsan =\n@@ -1242,7 +1359,9 @@ class pass_ubsan : public gimple_opt_pass\n     {\n       return flag_sanitize & (SANITIZE_NULL | SANITIZE_SI_OVERFLOW\n \t\t\t      | SANITIZE_BOOL | SANITIZE_ENUM\n-\t\t\t      | SANITIZE_ALIGNMENT)\n+\t\t\t      | SANITIZE_ALIGNMENT\n+\t\t\t      | SANITIZE_NONNULL_ATTRIBUTE\n+\t\t\t      | SANITIZE_RETURNS_NONNULL_ATTRIBUTE)\n \t     && current_function_decl != NULL_TREE\n \t     && !lookup_attribute (\"no_sanitize_undefined\",\n \t\t\t\t   DECL_ATTRIBUTES (current_function_decl));\n@@ -1285,7 +1404,25 @@ pass_ubsan::execute (function *fun)\n \n \t  if (flag_sanitize & (SANITIZE_BOOL | SANITIZE_ENUM)\n \t      && gimple_assign_load_p (stmt))\n-\t    instrument_bool_enum_load (&gsi);\n+\t    {\n+\t      instrument_bool_enum_load (&gsi);\n+\t      bb = gimple_bb (stmt);\n+\t    }\n+\n+\t  if ((flag_sanitize & SANITIZE_NONNULL_ATTRIBUTE)\n+\t      && is_gimple_call (stmt)\n+\t      && !gimple_call_internal_p (stmt))\n+\t    {\n+\t      instrument_nonnull_arg (&gsi);\n+\t      bb = gimple_bb (stmt);\n+\t    }\n+\n+\t  if ((flag_sanitize & SANITIZE_RETURNS_NONNULL_ATTRIBUTE)\n+\t      && gimple_code (stmt) == GIMPLE_RETURN)\n+\t    {\n+\t      instrument_nonnull_return (&gsi);\n+\t      bb = gimple_bb (stmt);\n+\t    }\n \n \t  gsi_next (&gsi);\n \t}"}, {"sha": "7b9d84c86ad6ed04ea23fad2b4872a201fbe5056", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126edc3fe212555ff83e2949b22843ae13299e09/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126edc3fe212555ff83e2949b22843ae13299e09/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=126edc3fe212555ff83e2949b22843ae13299e09", "patch": "@@ -1,3 +1,8 @@\n+2014-09-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* ubsan/ubsan_handlers.cc, ubsan/ubsan_handlers.h: Cherry pick\n+\tupstream r215485, r217389, r217391 and r217400.\n+\n 2014-06-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* sanitizer_common/sanitizer_common_interceptors.inc:"}, {"sha": "42f948ae2e6c89a7673b7931a93eec1aad6f4678", "filename": "libsanitizer/ubsan/ubsan_handlers.cc", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126edc3fe212555ff83e2949b22843ae13299e09/libsanitizer%2Fubsan%2Fubsan_handlers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126edc3fe212555ff83e2949b22843ae13299e09/libsanitizer%2Fubsan%2Fubsan_handlers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_handlers.cc?ref=126edc3fe212555ff83e2949b22843ae13299e09", "patch": "@@ -277,3 +277,43 @@ void __ubsan::__ubsan_handle_function_type_mismatch_abort(\n   __ubsan_handle_function_type_mismatch(Data, Function);\n   Die();\n }\n+\n+static void handleNonnullReturn(NonNullReturnData *Data) {\n+  SourceLocation Loc = Data->Loc.acquire();\n+  if (Loc.isDisabled())\n+    return;\n+\n+  Diag(Loc, DL_Error, \"null pointer returned from function declared to never \"\n+                      \"return null\");\n+  if (!Data->AttrLoc.isInvalid())\n+    Diag(Data->AttrLoc, DL_Note, \"returns_nonnull attribute specified here\");\n+}\n+\n+void __ubsan::__ubsan_handle_nonnull_return(NonNullReturnData *Data) {\n+  handleNonnullReturn(Data);\n+}\n+\n+void __ubsan::__ubsan_handle_nonnull_return_abort(NonNullReturnData *Data) {\n+  handleNonnullReturn(Data);\n+  Die();\n+}\n+\n+static void handleNonNullArg(NonNullArgData *Data) {\n+  SourceLocation Loc = Data->Loc.acquire();\n+  if (Loc.isDisabled())\n+    return;\n+\n+  Diag(Loc, DL_Error, \"null pointer passed as argument %0, which is declared to \"\n+       \"never be null\") << Data->ArgIndex;\n+  if (!Data->AttrLoc.isInvalid())\n+    Diag(Data->AttrLoc, DL_Note, \"nonnull attribute specified here\");\n+}\n+\n+void __ubsan::__ubsan_handle_nonnull_arg(NonNullArgData *Data) {\n+  handleNonNullArg(Data);\n+}\n+\n+void __ubsan::__ubsan_handle_nonnull_arg_abort(NonNullArgData *Data) {\n+  handleNonNullArg(Data);\n+  Die();\n+}"}, {"sha": "641fbfe993f97ad91ff9718c73b0c3ee3f47b4fc", "filename": "libsanitizer/ubsan/ubsan_handlers.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126edc3fe212555ff83e2949b22843ae13299e09/libsanitizer%2Fubsan%2Fubsan_handlers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126edc3fe212555ff83e2949b22843ae13299e09/libsanitizer%2Fubsan%2Fubsan_handlers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_handlers.h?ref=126edc3fe212555ff83e2949b22843ae13299e09", "patch": "@@ -119,6 +119,23 @@ RECOVERABLE(function_type_mismatch,\n             FunctionTypeMismatchData *Data,\n             ValueHandle Val)\n \n+struct NonNullReturnData {\n+  SourceLocation Loc;\n+  SourceLocation AttrLoc;\n+};\n+\n+/// \\brief Handle returning null from function with returns_nonnull attribute.\n+RECOVERABLE(nonnull_return, NonNullReturnData *Data)\n+\n+struct NonNullArgData {\n+  SourceLocation Loc;\n+  SourceLocation AttrLoc;\n+  int ArgIndex;\n+};\n+\n+/// \\brief Handle passing null pointer to function with nonnull attribute.\n+RECOVERABLE(nonnull_arg, NonNullArgData *Data)\n+\n }\n \n #endif // UBSAN_HANDLERS_H"}]}