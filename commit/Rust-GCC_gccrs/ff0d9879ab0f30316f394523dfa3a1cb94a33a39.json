{"sha": "ff0d9879ab0f30316f394523dfa3a1cb94a33a39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYwZDk4NzlhYjBmMzAzMTZmMzk0NTIzZGZhM2ExY2I5NGEzM2EzOQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2005-11-19T21:56:17Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2005-11-19T21:56:17Z"}, "message": "re PR middle-end/24912 (m68k build failure: ICE: in reload_cse_simplify_operands)\n\n\tPR middle-end/24912\n\tPR middle-end/24750\n\t* reload.c (find_reloads_address_1): Mention dependency on\n\tgen_reload.\n\t* reload1.c (gen_reload): For IN with an unary operation, try\n\tmoving inner expression to OUT if trivial SET is not valid.\n\tConfirm that the result is valid.  Move common code block into...\n\t(emit_insn_if_valid_for_reload): New function.\n\nFrom-SVN: r107231", "tree": {"sha": "a4c70facc1afd964e0a764c2ee6dc7d1a06b87d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4c70facc1afd964e0a764c2ee6dc7d1a06b87d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff0d9879ab0f30316f394523dfa3a1cb94a33a39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff0d9879ab0f30316f394523dfa3a1cb94a33a39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff0d9879ab0f30316f394523dfa3a1cb94a33a39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff0d9879ab0f30316f394523dfa3a1cb94a33a39/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "152f76ec3df4c21d3ffe641728cad33336912d8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/152f76ec3df4c21d3ffe641728cad33336912d8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/152f76ec3df4c21d3ffe641728cad33336912d8f"}], "stats": {"total": 130, "additions": 95, "deletions": 35}, "files": [{"sha": "a06adad06cae3bedd56eac7473c5ab02985dcff8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff0d9879ab0f30316f394523dfa3a1cb94a33a39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff0d9879ab0f30316f394523dfa3a1cb94a33a39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff0d9879ab0f30316f394523dfa3a1cb94a33a39", "patch": "@@ -1,3 +1,14 @@\n+2005-11-19  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\tPR middle-end/24912\n+\tPR middle-end/24750\n+\t* reload.c (find_reloads_address_1): Mention dependency on\n+\tgen_reload.\n+\t* reload1.c (gen_reload): For IN with an unary operation, try\n+\tmoving inner expression to OUT if trivial SET is not valid.\n+\tConfirm that the result is valid.  Move common code block into...\n+\t(emit_insn_if_valid_for_reload): New function.\n+\n 2005-11-19  Richard Guenther  <rguenther@suse.de>\n \n \t* fold-const.c (fold_indirect_ref_1): Make sure we fold"}, {"sha": "ed8aca5e86b4df38a0936b723889f4b2f5153d6b", "filename": "gcc/reload.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff0d9879ab0f30316f394523dfa3a1cb94a33a39/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff0d9879ab0f30316f394523dfa3a1cb94a33a39/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=ff0d9879ab0f30316f394523dfa3a1cb94a33a39", "patch": "@@ -5311,7 +5311,9 @@ update_auto_inc_notes (rtx insn ATTRIBUTE_UNUSED, int regno ATTRIBUTE_UNUSED,\n    occurs as part of an address.\n    Also, this is not fully machine-customizable; it works for machines\n    such as VAXen and 68000's and 32000's, but other possible machines\n-   could have addressing modes that this does not handle right.  */\n+   could have addressing modes that this does not handle right.\n+   If you add push_reload calls here, you need to make sure gen_reload\n+   handles those cases gracefully.  */\n \n static int\n find_reloads_address_1 (enum machine_mode mode, rtx x, int context,"}, {"sha": "4a7d22dcfb5a172acc7ea2eba99229177706e6a8", "filename": "gcc/reload1.c", "status": "modified", "additions": 81, "deletions": 34, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff0d9879ab0f30316f394523dfa3a1cb94a33a39/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff0d9879ab0f30316f394523dfa3a1cb94a33a39/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=ff0d9879ab0f30316f394523dfa3a1cb94a33a39", "patch": "@@ -437,6 +437,7 @@ static void add_auto_inc_notes (rtx, rtx);\n static void copy_eh_notes (rtx, rtx);\n static int reloads_conflict (int, int);\n static rtx gen_reload (rtx, rtx, int, enum reload_type);\n+static rtx emit_insn_if_valid_for_reload (rtx);\n \f\n /* Initialize the reload pass once per compilation.  */\n \n@@ -7449,6 +7450,32 @@ emit_reload_insns (struct insn_chain *chain)\n   IOR_HARD_REG_SET (reg_reloaded_dead, reg_reloaded_died);\n }\n \f\n+/* Go through the motions to emit INSN and test if it is strictly valid.\n+   Return the emitted insn if valid, else return NULL.  */\n+\n+static rtx\n+emit_insn_if_valid_for_reload (rtx insn)\n+{\n+  rtx last = get_last_insn ();\n+  int code;\n+\n+  insn = emit_insn (insn);\n+  code = recog_memoized (insn);\n+\n+  if (code >= 0)\n+    {\n+      extract_insn (insn);\n+      /* We want constrain operands to treat this insn strictly in its\n+\t validity determination, i.e., the way it would after reload has\n+\t completed.  */\n+      if (constrain_operands (1))\n+\treturn insn;\n+    }\n+\n+  delete_insns_since (last);\n+  return NULL;\n+}\n+\n /* Emit code to perform a reload from IN (which may be a reload register) to\n    OUT (which may also be a reload register).  IN or OUT is from operand\n    OPNUM with reload type TYPE.\n@@ -7485,6 +7512,12 @@ gen_reload (rtx out, rtx in, int opnum, enum reload_type type)\n      trying to emit a single insn to perform the add.  If it is not valid,\n      we use a two insn sequence.\n \n+     Or we can be asked to reload an unary operand that was a fragment of\n+     an addressing mode, into a register.  If it isn't recognized as-is,\n+     we try making the unop operand and the reload-register the same:\n+     (set reg:X (unop:X expr:Y))\n+     -> (set reg:Y expr:Y) (set reg:X (unop:X reg:Y)).\n+\n      Finally, we could be called to handle an 'o' constraint by putting\n      an address into a register.  In that case, we first try to do this\n      with a named pattern of \"reload_load_address\".  If no such pattern\n@@ -7542,20 +7575,9 @@ gen_reload (rtx out, rtx in, int opnum, enum reload_type type)\n       if (op0 != XEXP (in, 0) || op1 != XEXP (in, 1))\n \tin = gen_rtx_PLUS (GET_MODE (in), op0, op1);\n \n-      insn = emit_insn (gen_rtx_SET (VOIDmode, out, in));\n-      code = recog_memoized (insn);\n-\n-      if (code >= 0)\n-\t{\n-\t  extract_insn (insn);\n-\t  /* We want constrain operands to treat this insn strictly in\n-\t     its validity determination, i.e., the way it would after reload\n-\t     has completed.  */\n-\t  if (constrain_operands (1))\n-\t    return insn;\n-\t}\n-\n-      delete_insns_since (last);\n+      insn = emit_insn_if_valid_for_reload (gen_rtx_SET (VOIDmode, out, in));\n+      if (insn)\n+\treturn insn;\n \n       /* If that failed, we must use a conservative two-insn sequence.\n \n@@ -7591,29 +7613,17 @@ gen_reload (rtx out, rtx in, int opnum, enum reload_type type)\n       if (rtx_equal_p (op0, op1))\n \top1 = out;\n \n-      insn = emit_insn (gen_add2_insn (out, op1));\n-\n-      /* If that failed, copy the address register to the reload register.\n-\t Then add the constant to the reload register.  */\n-\n-      code = recog_memoized (insn);\n-\n-      if (code >= 0)\n+      insn = emit_insn_if_valid_for_reload (gen_add2_insn (out, op1));\n+      if (insn)\n \t{\n-\t  extract_insn (insn);\n-\t  /* We want constrain operands to treat this insn strictly in\n-\t     its validity determination, i.e., the way it would after reload\n-\t     has completed.  */\n-\t  if (constrain_operands (1))\n-\t    {\n-\t      /* Add a REG_EQUIV note so that find_equiv_reg can find it.  */\n-\t      REG_NOTES (insn)\n-\t\t= gen_rtx_EXPR_LIST (REG_EQUIV, in, REG_NOTES (insn));\n-\t      return insn;\n-\t    }\n+\t  /* Add a REG_EQUIV note so that find_equiv_reg can find it.  */\n+\t  REG_NOTES (insn)\n+\t    = gen_rtx_EXPR_LIST (REG_EQUIV, in, REG_NOTES (insn));\n+\t  return insn;\n \t}\n \n-      delete_insns_since (last);\n+      /* If that failed, copy the address register to the reload register.\n+\t Then add the constant to the reload register.  */\n \n       gen_reload (out, op1, opnum, type);\n       insn = emit_insn (gen_add2_insn (out, op0));\n@@ -7643,7 +7653,44 @@ gen_reload (rtx out, rtx in, int opnum, enum reload_type type)\n       gen_reload (out, loc, opnum, type);\n     }\n #endif\n+  else if (REG_P (out) && UNARY_P (in))\n+    {\n+      rtx insn;\n+      rtx op1;\n+      rtx out_moded;\n+      rtx set;\n+\n+      /* First, try a plain SET.  */\n+      set = emit_insn_if_valid_for_reload (gen_rtx_SET (VOIDmode, out, in));\n+      if (set)\n+\treturn set;\n+\n+      /* If that failed, move the inner operand to the reload\n+\t register, and try the same unop with the inner expression\n+\t replaced with the reload register.  */\n+      op1 = XEXP (in, 0);\n+\n+      if (GET_MODE (op1) != GET_MODE (out))\n+\tout_moded = gen_rtx_REG (GET_MODE (op1), REGNO (out));\n+      else\n+\tout_moded = out;\n \n+      gen_reload (out_moded, op1, opnum, type);\n+\n+      insn\n+\t= gen_rtx_SET (VOIDmode, out,\n+\t\t       gen_rtx_fmt_e (GET_CODE (in), GET_MODE (in),\n+\t\t\t\t      out_moded));\n+      insn = emit_insn_if_valid_for_reload (insn);\n+      if (insn)\n+\t{\n+\t  REG_NOTES (insn)\n+\t    = gen_rtx_EXPR_LIST (REG_EQUIV, in, REG_NOTES (insn));\n+\t  return insn;\n+\t}\n+\n+      fatal_insn (\"Failure trying to reload:\", set);\n+    }\n   /* If IN is a simple operand, use gen_move_insn.  */\n   else if (OBJECT_P (in) || GET_CODE (in) == SUBREG)\n     emit_insn (gen_move_insn (out, in));"}]}