{"sha": "0596c4485c684abe3ad34d81c8cbc79d2787c42b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU5NmM0NDg1YzY4NGFiZTNhZDM0ZDgxYzhjYmM3OWQyNzg3YzQyYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-07-08T21:31:59Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-07-08T21:31:59Z"}, "message": "* lambda.c (maybe_add_lambda_conv_op): Fix null object argument.\n\nFrom-SVN: r238180", "tree": {"sha": "29a4c9dc0259d5b83217d2467644b8e8c180be4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29a4c9dc0259d5b83217d2467644b8e8c180be4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0596c4485c684abe3ad34d81c8cbc79d2787c42b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0596c4485c684abe3ad34d81c8cbc79d2787c42b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0596c4485c684abe3ad34d81c8cbc79d2787c42b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0596c4485c684abe3ad34d81c8cbc79d2787c42b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d13835b668ac64ae062fa0c765476d229b6b2c22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d13835b668ac64ae062fa0c765476d229b6b2c22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d13835b668ac64ae062fa0c765476d229b6b2c22"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "d6f9914b2c103f4daeacf3b9447ddff7a662bf32", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0596c4485c684abe3ad34d81c8cbc79d2787c42b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0596c4485c684abe3ad34d81c8cbc79d2787c42b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0596c4485c684abe3ad34d81c8cbc79d2787c42b", "patch": "@@ -1,5 +1,7 @@\n 2016-07-08  Jason Merrill  <jason@redhat.com>\n \n+\t* lambda.c (maybe_add_lambda_conv_op): Fix null object argument.\n+\n \tP0145R2: Refining Expression Order for C++.\n \t* cp-gimplify.c (lvalue_has_side_effects): New.\n \t(cp_gimplify_expr): Implement assignment ordering."}, {"sha": "3822882accad7b32b1dded529ebb4c0ef9ffe290", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0596c4485c684abe3ad34d81c8cbc79d2787c42b/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0596c4485c684abe3ad34d81c8cbc79d2787c42b/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=0596c4485c684abe3ad34d81c8cbc79d2787c42b", "patch": "@@ -904,14 +904,17 @@ maybe_add_lambda_conv_op (tree type)\n   tree optype = TREE_TYPE (callop);\n   tree fn_result = TREE_TYPE (optype);\n \n+  tree thisarg = build_nop (TREE_TYPE (DECL_ARGUMENTS (callop)),\n+\t\t\t    null_pointer_node);\n   if (generic_lambda_p)\n     {\n       /* Prepare the dependent member call for the static member function\n \t '_FUN' and, potentially, prepare another call to be used in a decltype\n \t return expression for a deduced return call op to allow for simple\n \t implementation of the conversion operator.  */\n \n-      tree instance = build_nop (type, null_pointer_node);\n+      tree instance = cp_build_indirect_ref (thisarg, RO_NULL,\n+\t\t\t\t\t     tf_warning_or_error);\n       tree objfn = build_min (COMPONENT_REF, NULL_TREE,\n \t\t\t      instance, DECL_NAME (callop), NULL_TREE);\n       int nargs = list_length (DECL_ARGUMENTS (callop)) - 1;\n@@ -923,9 +926,7 @@ maybe_add_lambda_conv_op (tree type)\n   else\n     {\n       direct_argvec = make_tree_vector ();\n-      direct_argvec->quick_push (build1 (NOP_EXPR,\n-\t\t\t\t\t TREE_TYPE (DECL_ARGUMENTS (callop)),\n-\t\t\t\t\t null_pointer_node));\n+      direct_argvec->quick_push (thisarg);\n     }\n \n   /* Copy CALLOP's argument list (as per 'copy_list') as FN_ARGS in order to"}]}