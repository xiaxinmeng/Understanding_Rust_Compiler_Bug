{"sha": "5b8d9367684f266c30c280b4d3c98830a88c70ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI4ZDkzNjc2ODRmMjY2YzMwYzI4MGI0ZDNjOTg4MzBhODhjNzBhYg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2019-11-25T13:45:42Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2019-11-25T13:45:42Z"}, "message": "Prevent all uses of DFP when unsupported (PR c/91985).\n\nCode that directly uses _Decimal* types on architectures not\nsupporting DFP is properly diagnosed (\"error: decimal floating-point\nnot supported for this target\"), via a call to\ntargetm.decimal_float_supported_p, if the _Decimal32, _Decimal64 or\n_Decimal128 keywords are used to access it.  Use via mode attributes\nis also diagnosed (\"unable to emulate 'SD'\"); so is use of the\nFLOAT_CONST_DECIMAL64 pragma.  However, it is possible to access those\ntypes via typeof applied to constants or built-in functions without\nsuch an error.  I expect that there are ways to get an ICE from this;\ncertainly it uses a completely undefined ABI.\n\nThis patch arranges for the types not to exist in the compiler at all\nwhen DFP is not supported.  As is done with unsupported _FloatN /\n_FloatNx types, the global tree nodes are left as NULL_TREE, and the\nbuilt-in function machinery is made to use error_mark_node for them in\nthat case in builtin-types.def, so that the built-in functions are\nunavailable.  Code handling constants is adjusted to give an error,\nand other code that might not work with the global tree nodes being\nNULL_TREE is also updated.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.  Also tested\nwith no regressions for cross to aarch64-linux-gnu, as a configuration\nwithout DFP support.\n\n\tPR c/91985\ngcc:\n\t* builtin-types.def (BT_DFLOAT32, BT_DFLOAT64, BT_DFLOAT128)\n\t(BT_DFLOAT32_PTR, BT_DFLOAT64_PTR, BT_DFLOAT128_PTR): Define to\n\terror_mark_node if corresponding global tree node is NULL.\n\t* tree.c (build_common_tree_nodes): Do not initialize\n\tdfloat32_type_node, dfloat64_type_node or dfloat128_type_node if\n\tdecimal floating-point not supported.\n\ngcc/c:\n\t* c-decl.c (finish_declspecs): Use int instead of decimal\n\tfloating-point types if decimal floating-point not supported.\n\ngcc/c-family:\n\t* c-common.c (c_common_type_for_mode): Handle decimal\n\tfloating-point types being NULL_TREE.\n\t* c-format.c (get_format_for_type_1): Handle specified types being\n\tNULL_TREE.\n\t* c-lex.c (interpret_float): Give an error for decimal\n\tfloating-point constants when decimal floating-point not\n\tsupported.\n\ngcc/lto:\n\t* lto-lang.c (lto_type_for_mode): Handle decimal floating-point\n\ttypes being NULL_TREE.\n\ngcc/testsuite:\n\t* gcc.dg/c2x-no-dfp-1.c, gcc.dg/gnu2x-builtins-no-dfp-1.c: New\n\ttests.\n\t* gcc.dg/fltconst-pedantic-dfp.c: Expect errors when decimal\n\tfloating-point not supported.\n\nFrom-SVN: r278684", "tree": {"sha": "f3d44301e44a62097c89ae2d9b87cb97780f5d94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3d44301e44a62097c89ae2d9b87cb97780f5d94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b8d9367684f266c30c280b4d3c98830a88c70ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b8d9367684f266c30c280b4d3c98830a88c70ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b8d9367684f266c30c280b4d3c98830a88c70ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b8d9367684f266c30c280b4d3c98830a88c70ab/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1723e1bedb9545c45619c4023729755243524584", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1723e1bedb9545c45619c4023729755243524584", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1723e1bedb9545c45619c4023729755243524584"}], "stats": {"total": 166, "additions": 134, "deletions": 32}, "files": [{"sha": "2b63623f56dc482b2db3c724cfb8414a9beb41b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b8d9367684f266c30c280b4d3c98830a88c70ab", "patch": "@@ -1,3 +1,13 @@\n+2019-11-25  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/91985\n+\t* builtin-types.def (BT_DFLOAT32, BT_DFLOAT64, BT_DFLOAT128)\n+\t(BT_DFLOAT32_PTR, BT_DFLOAT64_PTR, BT_DFLOAT128_PTR): Define to\n+\terror_mark_node if corresponding global tree node is NULL.\n+\t* tree.c (build_common_tree_nodes): Do not initialize\n+\tdfloat32_type_node, dfloat64_type_node or dfloat128_type_node if\n+\tdecimal floating-point not supported.\n+\n 2019-11-25  Joseph Myers  <joseph@codesourcery.com>\n \n \t* attribs.c (decl_attributes): Do not ignore C++11 attributes on"}, {"sha": "800b751de6daca63d920c0750c8e478bd9f2c6e1", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=5b8d9367684f266c30c280b4d3c98830a88c70ab", "patch": "@@ -136,12 +136,24 @@ DEF_PRIMITIVE_TYPE (BT_WINT, wint_type_node)\n DEF_PRIMITIVE_TYPE (BT_STRING, string_type_node)\n DEF_PRIMITIVE_TYPE (BT_CONST_STRING, const_string_type_node)\n \n-DEF_PRIMITIVE_TYPE (BT_DFLOAT32, dfloat32_type_node)\n-DEF_PRIMITIVE_TYPE (BT_DFLOAT64, dfloat64_type_node)\n-DEF_PRIMITIVE_TYPE (BT_DFLOAT128, dfloat128_type_node)\n-DEF_PRIMITIVE_TYPE (BT_DFLOAT32_PTR, dfloat32_ptr_type_node)\n-DEF_PRIMITIVE_TYPE (BT_DFLOAT64_PTR, dfloat64_ptr_type_node)\n-DEF_PRIMITIVE_TYPE (BT_DFLOAT128_PTR, dfloat128_ptr_type_node)\n+DEF_PRIMITIVE_TYPE (BT_DFLOAT32, (dfloat32_type_node\n+\t\t\t\t  ? dfloat32_type_node\n+\t\t\t\t  : error_mark_node))\n+DEF_PRIMITIVE_TYPE (BT_DFLOAT64, (dfloat64_type_node\n+\t\t\t\t  ? dfloat64_type_node\n+\t\t\t\t  : error_mark_node))\n+DEF_PRIMITIVE_TYPE (BT_DFLOAT128, (dfloat128_type_node\n+\t\t\t\t   ? dfloat128_type_node\n+\t\t\t\t   : error_mark_node))\n+DEF_PRIMITIVE_TYPE (BT_DFLOAT32_PTR, (dfloat32_ptr_type_node\n+\t\t\t\t      ? dfloat32_ptr_type_node\n+\t\t\t\t      : error_mark_node))\n+DEF_PRIMITIVE_TYPE (BT_DFLOAT64_PTR, (dfloat64_ptr_type_node\n+\t\t\t\t      ? dfloat64_ptr_type_node\n+\t\t\t\t      : error_mark_node))\n+DEF_PRIMITIVE_TYPE (BT_DFLOAT128_PTR, (dfloat128_ptr_type_node\n+\t\t\t\t       ? dfloat128_ptr_type_node\n+\t\t\t\t       : error_mark_node))\n \n DEF_PRIMITIVE_TYPE (BT_VALIST_REF, va_list_ref_type_node)\n DEF_PRIMITIVE_TYPE (BT_VALIST_ARG, va_list_arg_type_node)"}, {"sha": "30b5b6a4e07b11b5245c37ebfbb237f4666d51af", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=5b8d9367684f266c30c280b4d3c98830a88c70ab", "patch": "@@ -1,3 +1,14 @@\n+2019-11-25  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/91985\n+\t* c-common.c (c_common_type_for_mode): Handle decimal\n+\tfloating-point types being NULL_TREE.\n+\t* c-format.c (get_format_for_type_1): Handle specified types being\n+\tNULL_TREE.\n+\t* c-lex.c (interpret_float): Give an error for decimal\n+\tfloating-point constants when decimal floating-point not\n+\tsupported.\n+\n 2019-11-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/83859"}, {"sha": "5b9af1a34b33cd74aa0635a2f4e8486eea2b4b4c", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=5b8d9367684f266c30c280b4d3c98830a88c70ab", "patch": "@@ -2321,11 +2321,14 @@ c_common_type_for_mode (machine_mode mode, int unsignedp)\n \treturn build_vector_type_for_mode (inner_type, mode);\n     }\n \n-  if (mode == TYPE_MODE (dfloat32_type_node))\n+  if (dfloat32_type_node != NULL_TREE\n+      && mode == TYPE_MODE (dfloat32_type_node))\n     return dfloat32_type_node;\n-  if (mode == TYPE_MODE (dfloat64_type_node))\n+  if (dfloat64_type_node != NULL_TREE\n+      && mode == TYPE_MODE (dfloat64_type_node))\n     return dfloat64_type_node;\n-  if (mode == TYPE_MODE (dfloat128_type_node))\n+  if (dfloat128_type_node != NULL_TREE\n+      && mode == TYPE_MODE (dfloat128_type_node))\n     return dfloat128_type_node;\n \n   if (ALL_SCALAR_FIXED_POINT_MODE_P (mode))"}, {"sha": "519bc8f0af119e8cc7a2d111568986c3ea0566c9", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=5b8d9367684f266c30c280b4d3c98830a88c70ab", "patch": "@@ -4390,7 +4390,7 @@ get_format_for_type_1 (const format_kind_info *fki, tree arg_type,\n       for (int i = 0; i < FMT_LEN_MAX; i++)\n \t{\n \t  const format_type_detail *ftd = &spec->types[i];\n-\t  if (!ftd->type)\n+\t  if (!ftd->type || *ftd->type == NULL_TREE)\n \t    continue;\n \t  if (matching_type_p (*ftd->type, effective_arg_type))\n \t    {"}, {"sha": "107c4c3e9311c3c6f2053c70413b0b696039be14", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=5b8d9367684f266c30c280b4d3c98830a88c70ab", "patch": "@@ -877,7 +877,12 @@ interpret_float (const cpp_token *token, unsigned int flags,\n \n   /* Decode type based on width and properties. */\n   if (flags & CPP_N_DFLOAT)\n-    if ((flags & CPP_N_WIDTH) == CPP_N_LARGE)\n+    if (!targetm.decimal_float_supported_p ())\n+      {\n+\terror (\"decimal floating-point not supported for this target\");\n+\treturn error_mark_node;\n+      }\n+    else if ((flags & CPP_N_WIDTH) == CPP_N_LARGE)\n       type = dfloat128_type_node;\n     else if ((flags & CPP_N_WIDTH) == CPP_N_SMALL)\n       type = dfloat32_type_node;"}, {"sha": "b9ec9777dd2097c4b780c794bd0dfb0854e01155", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=5b8d9367684f266c30c280b4d3c98830a88c70ab", "patch": "@@ -1,3 +1,9 @@\n+2019-11-25  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/91985\n+\t* c-decl.c (finish_declspecs): Use int instead of decimal\n+\tfloating-point types if decimal floating-point not supported.\n+\n 2019-11-25  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-tree.h (struct c_declarator): Use a structure for id member."}, {"sha": "292a4cc849b416b3767de605dd7335f64864d084", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=5b8d9367684f266c30c280b4d3c98830a88c70ab", "patch": "@@ -11633,7 +11633,9 @@ finish_declspecs (struct c_declspecs *specs)\n     case cts_dfloat128:\n       gcc_assert (!specs->long_p && !specs->long_long_p && !specs->short_p\n \t\t  && !specs->signed_p && !specs->unsigned_p && !specs->complex_p);\n-      if (specs->typespec_word == cts_dfloat32)\n+      if (!targetm.decimal_float_supported_p ())\n+\tspecs->type = integer_type_node;\n+      else if (specs->typespec_word == cts_dfloat32)\n \tspecs->type = dfloat32_type_node;\n       else if (specs->typespec_word == cts_dfloat64)\n \tspecs->type = dfloat64_type_node;"}, {"sha": "df9ddfa34324f8122b80ec77257857a14c25eeab", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=5b8d9367684f266c30c280b4d3c98830a88c70ab", "patch": "@@ -1,3 +1,9 @@\n+2019-11-25  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/91985\n+\t* lto-lang.c (lto_type_for_mode): Handle decimal floating-point\n+\ttypes being NULL_TREE.\n+\n 2019-11-22  Jan Hubicka  <jh@suse.cz>\n \t\n \t* lto.c (lto_wpa_write_files): Call memory_block_pool::trim."}, {"sha": "f8278676d5d7acd687d0571b0d283be090e06418", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=5b8d9367684f266c30c280b4d3c98830a88c70ab", "patch": "@@ -1051,11 +1051,14 @@ lto_type_for_mode (machine_mode mode, int unsigned_p)\n \treturn build_vector_type_for_mode (inner_type, mode);\n     }\n \n-  if (mode == TYPE_MODE (dfloat32_type_node))\n+  if (dfloat32_type_node != NULL_TREE\n+      && mode == TYPE_MODE (dfloat32_type_node))\n     return dfloat32_type_node;\n-  if (mode == TYPE_MODE (dfloat64_type_node))\n+  if (dfloat64_type_node != NULL_TREE\n+      && mode == TYPE_MODE (dfloat64_type_node))\n     return dfloat64_type_node;\n-  if (mode == TYPE_MODE (dfloat128_type_node))\n+  if (dfloat128_type_node != NULL_TREE\n+      && mode == TYPE_MODE (dfloat128_type_node))\n     return dfloat128_type_node;\n \n   if (ALL_SCALAR_FIXED_POINT_MODE_P (mode))"}, {"sha": "6431a093b52b4de2c9059eb11322c1c53ce13d9c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5b8d9367684f266c30c280b4d3c98830a88c70ab", "patch": "@@ -1,3 +1,11 @@\n+2019-11-25  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/91985\n+\t* gcc.dg/c2x-no-dfp-1.c, gcc.dg/gnu2x-builtins-no-dfp-1.c: New\n+\ttests.\n+\t* gcc.dg/fltconst-pedantic-dfp.c: Expect errors when decimal\n+\tfloating-point not supported.\n+\n 2019-11-25  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/gnu2x-attrs-1.c: Do not expect message about attributes"}, {"sha": "2cfbb6cad26992de39325ff50cc39f1b9e59c1d3", "filename": "gcc/testsuite/gcc.dg/c2x-no-dfp-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-no-dfp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-no-dfp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-no-dfp-1.c?ref=5b8d9367684f266c30c280b4d3c98830a88c70ab", "patch": "@@ -0,0 +1,12 @@\n+/* Test DFP types and constants rejected if no DFP support.  Bug\n+   91985.  */\n+/* { dg-do compile { target { ! dfp } } } */\n+/* { dg-options \"-std=c2x\" } */\n+\n+_Decimal32 d32a; /* { dg-error \"not supported\" } */\n+_Decimal64 d64a; /* { dg-error \"not supported\" } */\n+_Decimal128 d128a; /* { dg-error \"not supported\" } */\n+\n+_Bool d32b = 1.0DF; /* { dg-error \"not supported\" } */\n+_Bool d64b = 1.0DD; /* { dg-error \"not supported\" } */\n+_Bool d128b = 1.0DL; /* { dg-error \"not supported\" } */"}, {"sha": "6ff3091ce6a84a53ab049555ed1fee11264a99f5", "filename": "gcc/testsuite/gcc.dg/fltconst-pedantic-dfp.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Ftestsuite%2Fgcc.dg%2Ffltconst-pedantic-dfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Ftestsuite%2Fgcc.dg%2Ffltconst-pedantic-dfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffltconst-pedantic-dfp.c?ref=5b8d9367684f266c30c280b4d3c98830a88c70ab", "patch": "@@ -2,5 +2,8 @@\n /* { dg-options \"-pedantic\" } */\n \n double a = 1.dl;\t/* { dg-warning \"decimal float\" } */\n+/* { dg-error \"not supported for this target\" \"not supported\" { target { ! dfp } } .-1 } */\n double b = 1.df;\t/* { dg-warning \"decimal float\" } */\n+/* { dg-error \"not supported for this target\" \"not supported\" { target { ! dfp } } .-1 } */\n double c = 1.dd;\t/* { dg-warning \"decimal float\" } */\n+/* { dg-error \"not supported for this target\" \"not supported\" { target { ! dfp } } .-1 } */"}, {"sha": "853a56e9a85503e87f78f1cf16ae0a08b04a593d", "filename": "gcc/testsuite/gcc.dg/gnu2x-builtins-no-dfp-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-builtins-no-dfp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-builtins-no-dfp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-builtins-no-dfp-1.c?ref=5b8d9367684f266c30c280b4d3c98830a88c70ab", "patch": "@@ -0,0 +1,18 @@\n+/* Test C2x built-in functions: test DFP built-in functions are not\n+   available when no DFP support.  Bug 91985.  */\n+/* { dg-do compile { target { ! dfp } } } */\n+/* { dg-options \"-std=gnu2x\" } */\n+\n+int fabsd32 (void);\n+int fabsd64 (void);\n+int fabsd128 (void);\n+int nand32 (void);\n+int nand64 (void);\n+int nand128 (void);\n+\n+__typeof__ (__builtin_fabsd32 (0)) d32; /* { dg-warning \"implicit\" } */\n+__typeof__ (__builtin_fabsd64 (0)) d64; /* { dg-warning \"implicit\" } */\n+__typeof__ (__builtin_fabsd128 (0)) d128; /* { dg-warning \"implicit\" } */\n+__typeof__ (__builtin_nand32 (0)) d32n; /* { dg-warning \"implicit\" } */\n+__typeof__ (__builtin_nand64 (0)) d64n; /* { dg-warning \"implicit\" } */\n+__typeof__ (__builtin_nand128 (0)) d128n; /* { dg-warning \"implicit\" } */"}, {"sha": "5ae250ee595150d523db9b1beae507b26edb0997", "filename": "gcc/tree.c", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8d9367684f266c30c280b4d3c98830a88c70ab/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=5b8d9367684f266c30c280b4d3c98830a88c70ab", "patch": "@@ -10334,23 +10334,26 @@ build_common_tree_nodes (bool signed_char)\n   uint64_type_node = make_or_reuse_type (64, 1);\n \n   /* Decimal float types. */\n-  dfloat32_type_node = make_node (REAL_TYPE);\n-  TYPE_PRECISION (dfloat32_type_node) = DECIMAL32_TYPE_SIZE;\n-  SET_TYPE_MODE (dfloat32_type_node, SDmode);\n-  layout_type (dfloat32_type_node);\n-  dfloat32_ptr_type_node = build_pointer_type (dfloat32_type_node);\n-\n-  dfloat64_type_node = make_node (REAL_TYPE);\n-  TYPE_PRECISION (dfloat64_type_node) = DECIMAL64_TYPE_SIZE;\n-  SET_TYPE_MODE (dfloat64_type_node, DDmode);\n-  layout_type (dfloat64_type_node);\n-  dfloat64_ptr_type_node = build_pointer_type (dfloat64_type_node);\n-\n-  dfloat128_type_node = make_node (REAL_TYPE);\n-  TYPE_PRECISION (dfloat128_type_node) = DECIMAL128_TYPE_SIZE;\n-  SET_TYPE_MODE (dfloat128_type_node, TDmode);\n-  layout_type (dfloat128_type_node);\n-  dfloat128_ptr_type_node = build_pointer_type (dfloat128_type_node);\n+  if (targetm.decimal_float_supported_p ())\n+    {\n+      dfloat32_type_node = make_node (REAL_TYPE);\n+      TYPE_PRECISION (dfloat32_type_node) = DECIMAL32_TYPE_SIZE;\n+      SET_TYPE_MODE (dfloat32_type_node, SDmode);\n+      layout_type (dfloat32_type_node);\n+      dfloat32_ptr_type_node = build_pointer_type (dfloat32_type_node);\n+\n+      dfloat64_type_node = make_node (REAL_TYPE);\n+      TYPE_PRECISION (dfloat64_type_node) = DECIMAL64_TYPE_SIZE;\n+      SET_TYPE_MODE (dfloat64_type_node, DDmode);\n+      layout_type (dfloat64_type_node);\n+      dfloat64_ptr_type_node = build_pointer_type (dfloat64_type_node);\n+\n+      dfloat128_type_node = make_node (REAL_TYPE);\n+      TYPE_PRECISION (dfloat128_type_node) = DECIMAL128_TYPE_SIZE;\n+      SET_TYPE_MODE (dfloat128_type_node, TDmode);\n+      layout_type (dfloat128_type_node);\n+      dfloat128_ptr_type_node = build_pointer_type (dfloat128_type_node);\n+    }\n \n   complex_integer_type_node = build_complex_type (integer_type_node, true);\n   complex_float_type_node = build_complex_type (float_type_node, true);"}]}