{"sha": "fc6ef90173478521982e9df3831a06ea85b4f41e", "node_id": "C_kwDOANBUbNoAKGZjNmVmOTAxNzM0Nzg1MjE5ODJlOWRmMzgzMWEwNmVhODViNGY0MWU", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-08-03T08:07:36Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-08-03T08:07:36Z"}, "message": "PR target/47949: Use xchg to move from/to AX_REG with -Oz on x86.\n\nThis patch adds a peephole2 to i386.md to implement the suggestion in\nPR target/47949, of using xchg instead of mov for moving values to/from\nthe %rax/%eax register, controlled by -Oz, as the xchg instruction is\none byte shorter than the move it is replacing.\n\nThe new test case is taken from the PR:\nint foo(int x) { return x; }\n\nwhere previously we'd generate:\nfoo:\tmov %edi,%eax  // 2 bytes\n\tret\n\nbut with this patch, using -Oz, we generate:\nfoo:\txchg %eax,%edi\t// 1 byte\n\tret\n\nOn the CSiBE benchmark, this saves a total of 10238 bytes (reducing\nthe -Oz total from 3661796 bytes to 3651558 bytes, a 0.28% saving).\n\nInterestingly, some modern architectures (such as Zen 3) implement\nxchg using zero latency register renaming (just like mov), so in theory\nthis transformation could be enabled when optimizing for speed, if\nbenchmarking shows the improved code density produces consistently\nbetter performance.  However, this is architecture dependent, and\nthere may be interactions using xchg (instead a single_set) in the\nlate RTL passes (such as cprop_hardreg), so for now I've restricted\nthis to -Oz.\n\n2022-08-03  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog\n\tPR target/47949\n\t* config/i386/i386.md (peephole2): New peephole2 to convert\n\tSWI48 moves to/from %rax/%eax where the src is dead to xchg,\n\twhen optimizing for minimal size with -Oz.\n\ngcc/testsuite/ChangeLog\n\tPR target/47949\n\t* gcc.target/i386/pr47949.c: New test case.", "tree": {"sha": "562250d51d579ef789a7a9dea2684db8f468ad21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/562250d51d579ef789a7a9dea2684db8f468ad21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc6ef90173478521982e9df3831a06ea85b4f41e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6ef90173478521982e9df3831a06ea85b4f41e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc6ef90173478521982e9df3831a06ea85b4f41e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6ef90173478521982e9df3831a06ea85b4f41e/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6b011bcfd52c245978ccd540e3f929571c59471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6b011bcfd52c245978ccd540e3f929571c59471", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6b011bcfd52c245978ccd540e3f929571c59471"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "298e4b303486fcc864c5676be574af30024b92f1", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6ef90173478521982e9df3831a06ea85b4f41e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6ef90173478521982e9df3831a06ea85b4f41e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=fc6ef90173478521982e9df3831a06ea85b4f41e", "patch": "@@ -3027,6 +3027,18 @@\n   [(parallel [(set (match_dup 1) (match_dup 2))\n \t      (set (match_dup 2) (match_dup 1))])])\n \n+;; Convert moves to/from AX_REG into xchg with -Oz.\n+(define_peephole2\n+  [(set (match_operand:SWI48 0 \"general_reg_operand\")\n+\t(match_operand:SWI48 1 \"general_reg_operand\"))]\n+ \"optimize_size > 1\n+  && (REGNO (operands[0]) == AX_REG\n+      || REGNO (operands[1]) == AX_REG)\n+  && optimize_insn_for_size_p ()\n+  && peep2_reg_dead_p (1, operands[1])\"\n+  [(parallel [(set (match_dup 0) (match_dup 1))\n+\t      (set (match_dup 1) (match_dup 0))])])\n+\n (define_expand \"movstrict<mode>\"\n   [(set (strict_low_part (match_operand:SWI12 0 \"register_operand\"))\n \t(match_operand:SWI12 1 \"general_operand\"))]"}, {"sha": "a0524b1f00d389146f337332e9bb8cbcc456d6e2", "filename": "gcc/testsuite/gcc.target/i386/pr47949.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6ef90173478521982e9df3831a06ea85b4f41e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr47949.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6ef90173478521982e9df3831a06ea85b4f41e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr47949.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr47949.c?ref=fc6ef90173478521982e9df3831a06ea85b4f41e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Oz\" } */\n+/* { dg-additional-options \"-mregparm=2\" { target ia32 } } */\n+\n+int foo(int x, int y)\n+{\n+  return y;\n+}\n+\n+long bar(long x, long y)\n+{\n+  return y;\n+}\n+\n+/* { dg-final { scan-assembler-times \"xchg\" 2 } } */"}]}