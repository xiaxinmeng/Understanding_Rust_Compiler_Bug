{"sha": "1266778548e20de82983b6446f3cb685068cfb1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI2Njc3ODU0OGUyMGRlODI5ODNiNjQ0NmYzY2I2ODUwNjhjZmIxZQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-05-06T15:20:38Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-05-06T15:20:38Z"}, "message": "[AArch64] Use __getauxval instead of getauxval in LSE detection code in libgcc\n\nThis version of the fix uses __getauxval instead of getauxval.\nThe whole thing is guarded simply on __gnu_linux__.\n__getauxval was introduced in 2.16 but the aarch64 port was added in 2.17 so in practice I expect all aarch64 glibcs to support __getauxval.\n\nBootstrapped and tested on aarch64-none-linux-gnu.\nAlso tested on aarch64-none-elf.\n\n2020-05-06  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* config/aarch64/lse-init.c (init_have_lse_atomics): Use __getauxval\n\tinstead of getauxval.\n\t(AT_HWCAP): Define.\n\t(HWCAP_ATOMICS): Define.\n\tGuard detection on __gnu_linux__.", "tree": {"sha": "1592b3347f4d077db559634404e622fd715a0cbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1592b3347f4d077db559634404e622fd715a0cbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1266778548e20de82983b6446f3cb685068cfb1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1266778548e20de82983b6446f3cb685068cfb1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1266778548e20de82983b6446f3cb685068cfb1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1266778548e20de82983b6446f3cb685068cfb1e/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e849a74a8512cb313831a5929501ac2a735b7e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e849a74a8512cb313831a5929501ac2a735b7e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e849a74a8512cb313831a5929501ac2a735b7e1"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "8e63e43b756f4b3aa0eef3aba55bead65ed36fe4", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1266778548e20de82983b6446f3cb685068cfb1e/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1266778548e20de82983b6446f3cb685068cfb1e/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=1266778548e20de82983b6446f3cb685068cfb1e", "patch": "@@ -1,3 +1,11 @@\n+2020-05-06  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/lse-init.c (init_have_lse_atomics): Use __getauxval\n+\tinstead of getauxval.\n+\t(AT_HWCAP): Define.\n+\t(HWCAP_ATOMICS): Define.\n+\tGuard detection on __gnu_linux__.\n+\n 2020-05-05  Michael Meissner  <meissner@linux.ibm.com>\n \n \t* config.host: Delete changes meant for a private branch."}, {"sha": "00e9ab8cd1c8ced650743fb696f4cc84782e3980", "filename": "libgcc/config/aarch64/lse-init.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1266778548e20de82983b6446f3cb685068cfb1e/libgcc%2Fconfig%2Faarch64%2Flse-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1266778548e20de82983b6446f3cb685068cfb1e/libgcc%2Fconfig%2Faarch64%2Flse-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Flse-init.c?ref=1266778548e20de82983b6446f3cb685068cfb1e", "patch": "@@ -29,19 +29,20 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n _Bool __aarch64_have_lse_atomics\n   __attribute__((visibility(\"hidden\"), nocommon));\n \n-/* Disable initialization of __aarch64_have_lse_atomics during bootstrap.  */\n-#if !defined(inhibit_libc) && defined(HAVE_SYS_AUXV_H)\n-# include <sys/auxv.h>\n+/* Gate availability of __getauxval on glibc.  All AArch64-supporting glibc\n+   versions support it.  */\n+#ifdef __gnu_linux__\n \n-/* Disable initialization if the system headers are too old.  */\n-# if defined(AT_HWCAP) && defined(HWCAP_ATOMICS)\n+# define AT_HWCAP\t16\n+# define HWCAP_ATOMICS\t(1 << 8)\n+\n+unsigned long int __getauxval (unsigned long int);\n \n static void __attribute__((constructor))\n init_have_lse_atomics (void)\n {\n-  unsigned long hwcap = getauxval (AT_HWCAP);\n+  unsigned long hwcap = __getauxval (AT_HWCAP);\n   __aarch64_have_lse_atomics = (hwcap & HWCAP_ATOMICS) != 0;\n }\n \n-# endif /* HWCAP */\n-#endif /* inhibit_libc */\n+#endif /* __gnu_linux__  */"}]}