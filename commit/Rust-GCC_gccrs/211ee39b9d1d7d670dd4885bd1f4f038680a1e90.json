{"sha": "211ee39b9d1d7d670dd4885bd1f4f038680a1e90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjExZWUzOWI5ZDFkN2Q2NzBkZDQ4ODViZDFmNGYwMzg2ODBhMWU5MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-07-31T14:23:48Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-07-31T14:23:48Z"}, "message": "[24/46] Make stmt_info_for_cost use a stmt_vec_info\n\nThis patch makes stmt_info_for_cost carry a stmt_vec_info instead\nof a gimple stmt.  The structure is internal to the vectoriser,\nso targets aren't affected.\n\n2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vectorizer.h (stmt_info_for_cost::stmt): Replace with...\n\t(stmt_info_for_cost::stmt_info): ...this new field.\n\t(add_stmt_costs): Update accordingly.\n\t* tree-vect-loop.c (vect_compute_single_scalar_iteration_cost)\n\t(vect_get_known_peeling_cost): Likewise.\n\t(vect_estimate_min_profitable_iters): Likewise.\n\t* tree-vect-stmts.c (record_stmt_cost): Likewise.\n\nFrom-SVN: r263139", "tree": {"sha": "39cc3b566dd8b7db1122b5f3ec283ba082495f7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39cc3b566dd8b7db1122b5f3ec283ba082495f7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/211ee39b9d1d7d670dd4885bd1f4f038680a1e90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/211ee39b9d1d7d670dd4885bd1f4f038680a1e90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/211ee39b9d1d7d670dd4885bd1f4f038680a1e90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/211ee39b9d1d7d670dd4885bd1f4f038680a1e90/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7bcbf2d83269394899f27695e19715dca8f098bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bcbf2d83269394899f27695e19715dca8f098bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bcbf2d83269394899f27695e19715dca8f098bf"}], "stats": {"total": 87, "additions": 33, "deletions": 54}, "files": [{"sha": "e67403d1ca2c32126486737c0b8575c994320f32", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211ee39b9d1d7d670dd4885bd1f4f038680a1e90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211ee39b9d1d7d670dd4885bd1f4f038680a1e90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=211ee39b9d1d7d670dd4885bd1f4f038680a1e90", "patch": "@@ -1,3 +1,13 @@\n+2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (stmt_info_for_cost::stmt): Replace with...\n+\t(stmt_info_for_cost::stmt_info): ...this new field.\n+\t(add_stmt_costs): Update accordingly.\n+\t* tree-vect-loop.c (vect_compute_single_scalar_iteration_cost)\n+\t(vect_get_known_peeling_cost): Likewise.\n+\t(vect_estimate_min_profitable_iters): Likewise.\n+\t* tree-vect-stmts.c (record_stmt_cost): Likewise.\n+\n 2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vectorizer.h (_loop_vec_info::may_misalign_stmts): Change"}, {"sha": "f6b2b4554f5cd759e38138888b0efe7e2fdc203f", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 20, "deletions": 46, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211ee39b9d1d7d670dd4885bd1f4f038680a1e90/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211ee39b9d1d7d670dd4885bd1f4f038680a1e90/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=211ee39b9d1d7d670dd4885bd1f4f038680a1e90", "patch": "@@ -1136,13 +1136,9 @@ vect_compute_single_scalar_iteration_cost (loop_vec_info loop_vinfo)\n   int j;\n   FOR_EACH_VEC_ELT (LOOP_VINFO_SCALAR_ITERATION_COST (loop_vinfo),\n \t\t    j, si)\n-    {\n-      struct _stmt_vec_info *stmt_info\n-\t= si->stmt ? vinfo_for_stmt (si->stmt) : NULL_STMT_VEC_INFO;\n-      (void) add_stmt_cost (target_cost_data, si->count,\n-\t\t\t    si->kind, stmt_info, si->misalign,\n-\t\t\t    vect_body);\n-    }\n+    (void) add_stmt_cost (target_cost_data, si->count,\n+\t\t\t  si->kind, si->stmt_info, si->misalign,\n+\t\t\t  vect_body);\n   unsigned dummy, body_cost = 0;\n   finish_cost (target_cost_data, &dummy, &body_cost, &dummy);\n   destroy_cost_data (target_cost_data);\n@@ -3344,24 +3340,16 @@ vect_get_known_peeling_cost (loop_vec_info loop_vinfo, int peel_iters_prologue,\n   int j;\n   if (peel_iters_prologue)\n     FOR_EACH_VEC_ELT (*scalar_cost_vec, j, si)\n-\t{\n-\t  stmt_vec_info stmt_info\n-\t    = si->stmt ? vinfo_for_stmt (si->stmt) : NULL_STMT_VEC_INFO;\n-\t  retval += record_stmt_cost (prologue_cost_vec,\n-\t\t\t\t      si->count * peel_iters_prologue,\n-\t\t\t\t      si->kind, stmt_info, si->misalign,\n-\t\t\t\t      vect_prologue);\n-\t}\n+      retval += record_stmt_cost (prologue_cost_vec,\n+\t\t\t\t  si->count * peel_iters_prologue,\n+\t\t\t\t  si->kind, si->stmt_info, si->misalign,\n+\t\t\t\t  vect_prologue);\n   if (*peel_iters_epilogue)\n     FOR_EACH_VEC_ELT (*scalar_cost_vec, j, si)\n-\t{\n-\t  stmt_vec_info stmt_info\n-\t    = si->stmt ? vinfo_for_stmt (si->stmt) : NULL_STMT_VEC_INFO;\n-\t  retval += record_stmt_cost (epilogue_cost_vec,\n-\t\t\t\t      si->count * *peel_iters_epilogue,\n-\t\t\t\t      si->kind, stmt_info, si->misalign,\n-\t\t\t\t      vect_epilogue);\n-\t}\n+      retval += record_stmt_cost (epilogue_cost_vec,\n+\t\t\t\t  si->count * *peel_iters_epilogue,\n+\t\t\t\t  si->kind, si->stmt_info, si->misalign,\n+\t\t\t\t  vect_epilogue);\n \n   return retval;\n }\n@@ -3497,13 +3485,9 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n \t  int j;\n \t  FOR_EACH_VEC_ELT (LOOP_VINFO_SCALAR_ITERATION_COST (loop_vinfo),\n \t\t\t    j, si)\n-\t    {\n-\t      struct _stmt_vec_info *stmt_info\n-\t\t= si->stmt ? vinfo_for_stmt (si->stmt) : NULL_STMT_VEC_INFO;\n-\t      (void) add_stmt_cost (target_cost_data, si->count,\n-\t\t\t\t    si->kind, stmt_info, si->misalign,\n-\t\t\t\t    vect_epilogue);\n-\t    }\n+\t    (void) add_stmt_cost (target_cost_data, si->count,\n+\t\t\t\t  si->kind, si->stmt_info, si->misalign,\n+\t\t\t\t  vect_epilogue);\n \t}\n     }\n   else if (npeel < 0)\n@@ -3535,15 +3519,13 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n       int j;\n       FOR_EACH_VEC_ELT (LOOP_VINFO_SCALAR_ITERATION_COST (loop_vinfo), j, si)\n \t{\n-\t  struct _stmt_vec_info *stmt_info\n-\t    = si->stmt ? vinfo_for_stmt (si->stmt) : NULL_STMT_VEC_INFO;\n \t  (void) add_stmt_cost (target_cost_data,\n \t\t\t\tsi->count * peel_iters_prologue,\n-\t\t\t\tsi->kind, stmt_info, si->misalign,\n+\t\t\t\tsi->kind, si->stmt_info, si->misalign,\n \t\t\t\tvect_prologue);\n \t  (void) add_stmt_cost (target_cost_data,\n \t\t\t\tsi->count * peel_iters_epilogue,\n-\t\t\t\tsi->kind, stmt_info, si->misalign,\n+\t\t\t\tsi->kind, si->stmt_info, si->misalign,\n \t\t\t\tvect_epilogue);\n \t}\n     }\n@@ -3566,20 +3548,12 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n \t\t\t\t\t  &epilogue_cost_vec);\n \n       FOR_EACH_VEC_ELT (prologue_cost_vec, j, si)\n-\t{\n-\t  struct _stmt_vec_info *stmt_info\n-\t    = si->stmt ? vinfo_for_stmt (si->stmt) : NULL_STMT_VEC_INFO;\n-\t  (void) add_stmt_cost (data, si->count, si->kind, stmt_info,\n-\t\t\t\tsi->misalign, vect_prologue);\n-\t}\n+\t(void) add_stmt_cost (data, si->count, si->kind, si->stmt_info,\n+\t\t\t      si->misalign, vect_prologue);\n \n       FOR_EACH_VEC_ELT (epilogue_cost_vec, j, si)\n-\t{\n-\t  struct _stmt_vec_info *stmt_info\n-\t    = si->stmt ? vinfo_for_stmt (si->stmt) : NULL_STMT_VEC_INFO;\n-\t  (void) add_stmt_cost (data, si->count, si->kind, stmt_info,\n-\t\t\t\tsi->misalign, vect_epilogue);\n-\t}\n+\t(void) add_stmt_cost (data, si->count, si->kind, si->stmt_info,\n+\t\t\t      si->misalign, vect_epilogue);\n \n       prologue_cost_vec.release ();\n       epilogue_cost_vec.release ();"}, {"sha": "18b242c3ed607350791a8c6a552581dc7d638e9a", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211ee39b9d1d7d670dd4885bd1f4f038680a1e90/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211ee39b9d1d7d670dd4885bd1f4f038680a1e90/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=211ee39b9d1d7d670dd4885bd1f4f038680a1e90", "patch": "@@ -98,9 +98,7 @@ record_stmt_cost (stmt_vector_for_cost *body_cost_vec, int count,\n       && STMT_VINFO_GATHER_SCATTER_P (stmt_info))\n     kind = vector_scatter_store;\n \n-  stmt_info_for_cost si = { count, kind, where,\n-      stmt_info ? STMT_VINFO_STMT (stmt_info) : NULL,\n-      misalign };\n+  stmt_info_for_cost si = { count, kind, where, stmt_info, misalign };\n   body_cost_vec->safe_push (si);\n \n   tree vectype = stmt_info ? stmt_vectype (stmt_info) : NULL_TREE;"}, {"sha": "fa206a2e87133841e8e02259f35007ea7adbf843", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211ee39b9d1d7d670dd4885bd1f4f038680a1e90/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211ee39b9d1d7d670dd4885bd1f4f038680a1e90/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=211ee39b9d1d7d670dd4885bd1f4f038680a1e90", "patch": "@@ -116,7 +116,7 @@ struct stmt_info_for_cost {\n   int count;\n   enum vect_cost_for_stmt kind;\n   enum vect_cost_model_location where;\n-  gimple *stmt;\n+  stmt_vec_info stmt_info;\n   int misalign;\n };\n \n@@ -1282,10 +1282,7 @@ add_stmt_costs (void *data, stmt_vector_for_cost *cost_vec)\n   stmt_info_for_cost *cost;\n   unsigned i;\n   FOR_EACH_VEC_ELT (*cost_vec, i, cost)\n-    add_stmt_cost (data, cost->count, cost->kind,\n-\t\t   (cost->stmt\n-\t\t    ? vinfo_for_stmt (cost->stmt)\n-\t\t    : NULL_STMT_VEC_INFO),\n+    add_stmt_cost (data, cost->count, cost->kind, cost->stmt_info,\n \t\t   cost->misalign, cost->where);\n }\n "}]}