{"sha": "7aa80c82ecf3a320faca276b22b4a4286bbebacf", "node_id": "C_kwDOANBUbNoAKDdhYTgwYzgyZWNmM2EzMjBmYWNhMjc2YjIyYjRhNDI4NmJiZWJhY2Y", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-13T15:18:07Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-13T15:18:07Z"}, "message": "libstdc++: Implement LWG 3569 changes to join_view::_Iterator\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (join_view::_Iterator::_M_satisfy):\n\tAdjust resetting _M_inner as per LWG 3569.\n\t(join_view::_Iterator::_M_inner): Wrap in std::optional\n\tas per LWG 3569.\n\t(join_view::_Iterator::_Iterator): Relax constraints as\n\tper LWG 3569.\n\t(join_view::_Iterator::operator*): Adjust as per LWG 3569.\n\t(join_view::_Iterator::operator->): Likewise.\n\t(join_view::_Iterator::operator++): Likewise.\n\t(join_view::_Iterator::operator--): Likewise.\n\t(join_view::_Iterator::iter_move): Likewise.\n\t(join_view::_Iterator::iter_swap): Likewise.\n\t* testsuite/std/ranges/adaptors/join.cc (test14): New test.", "tree": {"sha": "3cea2c4f6bb3316b9289c8a3abec59390065f7be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cea2c4f6bb3316b9289c8a3abec59390065f7be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7aa80c82ecf3a320faca276b22b4a4286bbebacf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aa80c82ecf3a320faca276b22b4a4286bbebacf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aa80c82ecf3a320faca276b22b4a4286bbebacf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aa80c82ecf3a320faca276b22b4a4286bbebacf/comments", "author": null, "committer": null, "parents": [{"sha": "edf6fe7800369136c1a8ddcaf75a042a3a938c84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edf6fe7800369136c1a8ddcaf75a042a3a938c84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edf6fe7800369136c1a8ddcaf75a042a3a938c84"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "6297ce7cee3a289cbce5801ae583fa24d69569f2", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa80c82ecf3a320faca276b22b4a4286bbebacf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa80c82ecf3a320faca276b22b4a4286bbebacf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=7aa80c82ecf3a320faca276b22b4a4286bbebacf", "patch": "@@ -2746,7 +2746,7 @@ namespace views::__adaptor\n \t      }\n \n \t    if constexpr (_S_ref_is_glvalue)\n-\t      _M_inner = _Inner_iter();\n+\t      _M_inner.reset();\n \t  }\n \n \t  static constexpr auto\n@@ -2769,7 +2769,7 @@ namespace views::__adaptor\n \t  using _Inner_iter = join_view::_Inner_iter<_Const>;\n \n \t  _Outer_iter _M_outer = _Outer_iter();\n-\t  _Inner_iter _M_inner = _Inner_iter();\n+\t  optional<_Inner_iter> _M_inner;\n \t  _Parent* _M_parent = nullptr;\n \n \tpublic:\n@@ -2780,9 +2780,7 @@ namespace views::__adaptor\n \t    = common_type_t<range_difference_t<_Base>,\n \t\t\t    range_difference_t<range_reference_t<_Base>>>;\n \n-\t  _Iterator() requires (default_initializable<_Outer_iter>\n-\t\t\t\t&& default_initializable<_Inner_iter>)\n-\t    = default;\n+\t  _Iterator() requires default_initializable<_Outer_iter> = default;\n \n \t  constexpr\n \t  _Iterator(_Parent* __parent, _Outer_iter __outer)\n@@ -2801,15 +2799,15 @@ namespace views::__adaptor\n \n \t  constexpr decltype(auto)\n \t  operator*() const\n-\t  { return *_M_inner; }\n+\t  { return **_M_inner; }\n \n \t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t  // 3500. join_view::iterator::operator->() is bogus\n \t  constexpr _Inner_iter\n \t  operator->() const\n \t    requires __detail::__has_arrow<_Inner_iter>\n \t      && copyable<_Inner_iter>\n-\t  { return _M_inner; }\n+\t  { return *_M_inner; }\n \n \t  constexpr _Iterator&\n \t  operator++()\n@@ -2820,7 +2818,7 @@ namespace views::__adaptor\n \t      else\n \t\treturn *_M_parent->_M_inner;\n \t    }();\n-\t    if (++_M_inner == ranges::end(__inner_range))\n+\t    if (++*_M_inner == ranges::end(__inner_range))\n \t      {\n \t\t++_M_outer;\n \t\t_M_satisfy();\n@@ -2850,9 +2848,9 @@ namespace views::__adaptor\n \t  {\n \t    if (_M_outer == ranges::end(_M_parent->_M_base))\n \t      _M_inner = ranges::end(*--_M_outer);\n-\t    while (_M_inner == ranges::begin(*_M_outer))\n-\t      _M_inner = ranges::end(*--_M_outer);\n-\t    --_M_inner;\n+\t    while (*_M_inner == ranges::begin(*_M_outer))\n+\t      *_M_inner = ranges::end(*--_M_outer);\n+\t    --*_M_inner;\n \t    return *this;\n \t  }\n \n@@ -2879,14 +2877,14 @@ namespace views::__adaptor\n \n \t  friend constexpr decltype(auto)\n \t  iter_move(const _Iterator& __i)\n-\t  noexcept(noexcept(ranges::iter_move(__i._M_inner)))\n-\t  { return ranges::iter_move(__i._M_inner); }\n+\t  noexcept(noexcept(ranges::iter_move(*__i._M_inner)))\n+\t  { return ranges::iter_move(*__i._M_inner); }\n \n \t  friend constexpr void\n \t  iter_swap(const _Iterator& __x, const _Iterator& __y)\n-\t    noexcept(noexcept(ranges::iter_swap(__x._M_inner, __y._M_inner)))\n+\t    noexcept(noexcept(ranges::iter_swap(*__x._M_inner, *__y._M_inner)))\n \t    requires indirectly_swappable<_Inner_iter>\n-\t  { return ranges::iter_swap(__x._M_inner, __y._M_inner); }\n+\t  { return ranges::iter_swap(*__x._M_inner, *__y._M_inner); }\n \n \t  friend _Iterator<!_Const>;\n \t  template<bool> friend struct _Sentinel;"}, {"sha": "afc11d4bd7a5e6c34787256c3e645aa99001965d", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/join.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa80c82ecf3a320faca276b22b4a4286bbebacf/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa80c82ecf3a320faca276b22b4a4286bbebacf/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin.cc?ref=7aa80c82ecf3a320faca276b22b4a4286bbebacf", "patch": "@@ -21,6 +21,7 @@\n #include <algorithm>\n #include <array>\n #include <ranges>\n+#include <sstream>\n #include <string>\n #include <string_view>\n #include <vector>\n@@ -217,6 +218,21 @@ test13()\n   std::vector<std::vector<int>> v{{5, 6, 7}};\n   v | l | std::views::join;\n }\n+\n+void\n+test14()\n+{\n+  // LWG 3569: join_view fails to support ranges of ranges with\n+  // non-default_initializable iterators\n+  auto ss = std::istringstream{\"1 2 3\"};\n+  auto v = views::single(views::istream<int>(ss));\n+  using inner = ranges::range_reference_t<decltype(v)>;\n+  static_assert(ranges::input_range<inner>\n+\t\t&& !ranges::forward_range<inner>\n+\t\t&& !std::default_initializable<ranges::iterator_t<inner>>);\n+  VERIFY( ranges::equal(v | views::join, (int[]){1, 2, 3}) );\n+}\n+\n int\n main()\n {\n@@ -233,4 +249,5 @@ main()\n   test11();\n   test12();\n   test13();\n+  test14();\n }"}]}