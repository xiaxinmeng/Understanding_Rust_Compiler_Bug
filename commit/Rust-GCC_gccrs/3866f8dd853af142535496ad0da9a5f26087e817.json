{"sha": "3866f8dd853af142535496ad0da9a5f26087e817", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg2NmY4ZGQ4NTNhZjE0MjUzNTQ5NmFkMGRhOWE1ZjI2MDg3ZTgxNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-04-06T12:47:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-04-06T12:47:19Z"}, "message": "i386.c (ix86_simd_clone_compute_vecsize_and_simdlen): Add support for AVX512F clones...\n\n\t* config/i386/i386.c (ix86_simd_clone_compute_vecsize_and_simdlen):\n\tAdd support for AVX512F clones, include them by default for\n\texported OpenMP declare simd functions.  For AVX2 allow simdlen 32\n\tand use it if charasteric type is 8-bit, for AVX512F allow simdlen\n\tup to 128.\n\n\t* lib/target-supports.exp (check_effective_target_vect_simd_clones):\n\tCheck for avx512f effective targets instead of avx2.\n\t* gcc.dg/gomp/declare-simd-1.c: Add scan-assembler-times directives\n\tfor AVX512F clones.\n\t* gcc.dg/gomp/declare-simd-3.c: Likewise.\n\t* g++.dg/gomp/declare-simd-1.C: Likewise.\n\t* g++.dg/gomp/declare-simd-3.C: Likewise.\n\t* g++.dg/gomp/declare-simd-4.C: Likewise.\n\nFrom-SVN: r234780", "tree": {"sha": "f9e52ca91c57890fcb31de6ac2fdfcf043d27c05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9e52ca91c57890fcb31de6ac2fdfcf043d27c05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3866f8dd853af142535496ad0da9a5f26087e817", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3866f8dd853af142535496ad0da9a5f26087e817", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3866f8dd853af142535496ad0da9a5f26087e817", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3866f8dd853af142535496ad0da9a5f26087e817/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ec35ea455c30c14700dbb7a2cbbd3379e0212e96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec35ea455c30c14700dbb7a2cbbd3379e0212e96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec35ea455c30c14700dbb7a2cbbd3379e0212e96"}], "stats": {"total": 101, "additions": 94, "deletions": 7}, "files": [{"sha": "0f7447c37d2acfd14166045eae6ae097adac5a43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3866f8dd853af142535496ad0da9a5f26087e817/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3866f8dd853af142535496ad0da9a5f26087e817/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3866f8dd853af142535496ad0da9a5f26087e817", "patch": "@@ -1,5 +1,11 @@\n 2016-04-06  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* config/i386/i386.c (ix86_simd_clone_compute_vecsize_and_simdlen):\n+\tAdd support for AVX512F clones, include them by default for\n+\texported OpenMP declare simd functions.  For AVX2 allow simdlen 32\n+\tand use it if charasteric type is 8-bit, for AVX512F allow simdlen\n+\tup to 128.\n+\n \tPR middle-end/70550\n \t* tree.h (OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT): Define.\n \t* gimplify.c (gimplify_adjust_omp_clauses_1): Set it for implicit"}, {"sha": "72af7129e81d9019d4f22f7d8359e8bed186efd7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3866f8dd853af142535496ad0da9a5f26087e817/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3866f8dd853af142535496ad0da9a5f26087e817/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3866f8dd853af142535496ad0da9a5f26087e817", "patch": "@@ -53761,7 +53761,7 @@ ix86_simd_clone_compute_vecsize_and_simdlen (struct cgraph_node *node,\n \n   if (clonei->simdlen\n       && (clonei->simdlen < 2\n-\t  || clonei->simdlen > 16\n+\t  || clonei->simdlen > 128\n \t  || (clonei->simdlen & (clonei->simdlen - 1)) != 0))\n     {\n       warning_at (DECL_SOURCE_LOCATION (node->decl), 0,\n@@ -53819,7 +53819,9 @@ ix86_simd_clone_compute_vecsize_and_simdlen (struct cgraph_node *node,\n     {\n       /* If the function isn't exported, we can pick up just one ISA\n \t for the clones.  */\n-      if (TARGET_AVX2)\n+      if (TARGET_AVX512F)\n+\tclonei->vecsize_mangle = 'e';\n+      else if (TARGET_AVX2)\n \tclonei->vecsize_mangle = 'd';\n       else if (TARGET_AVX)\n \tclonei->vecsize_mangle = 'c';\n@@ -53829,8 +53831,8 @@ ix86_simd_clone_compute_vecsize_and_simdlen (struct cgraph_node *node,\n     }\n   else\n     {\n-      clonei->vecsize_mangle = \"bcd\"[num];\n-      ret = 3;\n+      clonei->vecsize_mangle = \"bcde\"[num];\n+      ret = 4;\n     }\n   switch (clonei->vecsize_mangle)\n     {\n@@ -53846,6 +53848,10 @@ ix86_simd_clone_compute_vecsize_and_simdlen (struct cgraph_node *node,\n       clonei->vecsize_int = 256;\n       clonei->vecsize_float = 256;\n       break;\n+    case 'e':\n+      clonei->vecsize_int = 512;\n+      clonei->vecsize_float = 512;\n+      break;\n     }\n   if (clonei->simdlen == 0)\n     {\n@@ -53854,9 +53860,24 @@ ix86_simd_clone_compute_vecsize_and_simdlen (struct cgraph_node *node,\n       else\n \tclonei->simdlen = clonei->vecsize_float;\n       clonei->simdlen /= GET_MODE_BITSIZE (TYPE_MODE (base_type));\n-      if (clonei->simdlen > 16)\n-\tclonei->simdlen = 16;\n     }\n+  else if (clonei->simdlen > 16)\n+    switch (clonei->vecsize_int)\n+      {\n+      case 512:\n+\t/* For AVX512-F, support VLEN up to 128.  */\n+\tbreak;\n+      case 256:\n+\t/* For AVX2, support VLEN up to 32.  */\n+\tif (clonei->simdlen <= 32)\n+\t  break;\n+\t/* FALLTHRU */\n+      default:\n+\t/* Otherwise, support VLEN up to 16.  */\n+\twarning_at (DECL_SOURCE_LOCATION (node->decl), 0,\n+\t\t    \"unsupported simdlen %d\", clonei->simdlen);\n+\treturn 0;\n+      }\n   return ret;\n }\n \n@@ -53881,6 +53902,10 @@ ix86_simd_clone_adjust (struct cgraph_node *node)\n       if (!TARGET_AVX2)\n \tstr = \"avx2\";\n       break;\n+    case 'e':\n+      if (!TARGET_AVX512F)\n+\tstr = \"avx512f\";\n+      break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -53920,6 +53945,10 @@ ix86_simd_clone_usable (struct cgraph_node *node)\n       if (!TARGET_AVX2)\n \treturn -1;\n       return 0;\n+    case 'e':\n+      if (!TARGET_AVX512F)\n+\treturn -1;\n+      return 0;\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "a39a9d54dbe0c0fe0653f64e0db5a3f4b9a33d88", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3866f8dd853af142535496ad0da9a5f26087e817/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3866f8dd853af142535496ad0da9a5f26087e817/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3866f8dd853af142535496ad0da9a5f26087e817", "patch": "@@ -1,5 +1,14 @@\n 2016-04-06  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* lib/target-supports.exp (check_effective_target_vect_simd_clones):\n+\tCheck for avx512f effective targets instead of avx2.\n+\t* gcc.dg/gomp/declare-simd-1.c: Add scan-assembler-times directives\n+\tfor AVX512F clones.\n+\t* gcc.dg/gomp/declare-simd-3.c: Likewise.\n+\t* g++.dg/gomp/declare-simd-1.C: Likewise.\n+\t* g++.dg/gomp/declare-simd-3.C: Likewise.\n+\t* g++.dg/gomp/declare-simd-4.C: Likewise.\n+\n \tPR middle-end/70550\n \t* c-c++-common/gomp/pr70550-1.c: New test.\n \t* c-c++-common/gomp/pr70550-2.c: New test."}, {"sha": "d2659e183392f69d797fdefa6d867fc34ecd80c7", "filename": "gcc/testsuite/g++.dg/gomp/declare-simd-1.C", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3866f8dd853af142535496ad0da9a5f26087e817/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3866f8dd853af142535496ad0da9a5f26087e817/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-1.C?ref=3866f8dd853af142535496ad0da9a5f26087e817", "patch": "@@ -20,6 +20,8 @@ int f2 (int a, int *b, int c)\n // { dg-final { scan-assembler-times \"_ZGVcN8uva32l4__Z2f2iPii:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVdM8uva32l4__Z2f2iPii:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVdN8uva32l4__Z2f2iPii:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeM8uva32l4__Z2f2iPii:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeN8uva32l4__Z2f2iPii:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n \n #pragma omp declare simd uniform (c) aligned (b : 4 * sizeof (int)) linear (a : 4) simdlen (4)\n template <typename T>\n@@ -85,6 +87,8 @@ namespace N1\n // { dg-final { scan-assembler-times \"_ZGVcN2va16__ZN2N12N23f10EPx:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVdM2va16__ZN2N12N23f10EPx:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVdN2va16__ZN2N12N23f10EPx:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeM2va16__ZN2N12N23f10EPx:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeN2va16__ZN2N12N23f10EPx:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n \n struct A\n {\n@@ -193,6 +197,8 @@ int B<int>::f25<7> (int a, int *b, int c)\n // { dg-final { scan-assembler-times \"_ZGVcN8vuva32u__ZN1BIiE3f25ILi7EEEiiPii:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVdM8vuva32u__ZN1BIiE3f25ILi7EEEiiPii:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVdN8vuva32u__ZN1BIiE3f25ILi7EEEiiPii:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeM8vuva32u__ZN1BIiE3f25ILi7EEEiiPii:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeN8vuva32u__ZN1BIiE3f25ILi7EEEiiPii:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n \n #pragma omp declare simd simdlen (4) aligned (b : 8 * sizeof (int)) linear (a, c : 2)\n template <>\n@@ -208,6 +214,8 @@ int B<int>::f26<-1> (int a, int *b, int c)\n // { dg-final { scan-assembler-times \"_ZGVcN4vl2va32__ZN1BIiE3f26ILin1EEEiiPii:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVdM4vl2va32__ZN1BIiE3f26ILin1EEEiiPii:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVdN4vl2va32__ZN1BIiE3f26ILin1EEEiiPii:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeM4vl2va32__ZN1BIiE3f26ILin1EEEiiPii:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeN4vl2va32__ZN1BIiE3f26ILin1EEEiiPii:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n \n int\n f27 (int x)\n@@ -237,6 +245,8 @@ f30 (int x)\n // { dg-final { scan-assembler-times \"_ZGVcN16v__Z3f30i:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVdM16v__Z3f30i:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVdN16v__Z3f30i:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeM16v__Z3f30i:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeN16v__Z3f30i:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n \n template <int N>\n struct C"}, {"sha": "32cdc581b6e67171d1124d0e9a2bdb13c6908510", "filename": "gcc/testsuite/g++.dg/gomp/declare-simd-3.C", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3866f8dd853af142535496ad0da9a5f26087e817/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3866f8dd853af142535496ad0da9a5f26087e817/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-3.C?ref=3866f8dd853af142535496ad0da9a5f26087e817", "patch": "@@ -19,6 +19,8 @@ int f1 (int a, int b, int c, int &d, int &e, int &f)\n // { dg-final { scan-assembler-times \"_ZGVcN4vulLUR4__Z2f1iiiRiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVdM8vulLUR4__Z2f1iiiRiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVdN8vulLUR4__Z2f1iiiRiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeM16vulLUR4__Z2f1iiiRiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeN16vulLUR4__Z2f1iiiRiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n \n #pragma omp declare simd uniform(b) linear(c, d) linear(uval(e)) linear(ref(f))\n int f2 (int a, int b, int c, int &d, int &e, int &f)\n@@ -44,6 +46,8 @@ int f2 (int a, int b, int c, int &d, int &e, int &f)\n // { dg-final { scan-assembler-times \"_ZGVcN4vulLUR4__Z2f2iiiRiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVdM8vulLUR4__Z2f2iiiRiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVdN8vulLUR4__Z2f2iiiRiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeM16vulLUR4__Z2f2iiiRiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeN16vulLUR4__Z2f2iiiRiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n \n #pragma omp declare simd uniform(b) linear(c, d) linear(uval(e)) linear(ref(f))\n int f3 (const int a, const int b, const int c, const int &d, const int &e, const int &f)\n@@ -57,6 +61,8 @@ int f3 (const int a, const int b, const int c, const int &d, const int &e, const\n // { dg-final { scan-assembler-times \"_ZGVcN4vulLUR4__Z2f3iiiRKiS0_S0_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVdM8vulLUR4__Z2f3iiiRKiS0_S0_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVdN8vulLUR4__Z2f3iiiRKiS0_S0_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeM16vulLUR4__Z2f3iiiRKiS0_S0_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeN16vulLUR4__Z2f3iiiRKiS0_S0_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n \n #pragma omp declare simd uniform(b) linear(c, d) linear(uval(e)) linear(ref(f))\n int f4 (const int a, const int b, const int c, const int &d, const int &e, const int &f)\n@@ -76,3 +82,5 @@ int f4 (const int a, const int b, const int c, const int &d, const int &e, const\n // { dg-final { scan-assembler-times \"_ZGVcN4vulLUR4__Z2f4iiiRKiS0_S0_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVdM8vulLUR4__Z2f4iiiRKiS0_S0_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVdN8vulLUR4__Z2f4iiiRKiS0_S0_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeM16vulLUR4__Z2f4iiiRKiS0_S0_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeN16vulLUR4__Z2f4iiiRKiS0_S0_:\" 1 { target { i?86-*-* x86_64-*-* } } } }"}, {"sha": "acf03d99e82e7b442a8870a03f8b7ad7c1c3c7f4", "filename": "gcc/testsuite/g++.dg/gomp/declare-simd-4.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3866f8dd853af142535496ad0da9a5f26087e817/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3866f8dd853af142535496ad0da9a5f26087e817/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-4.C?ref=3866f8dd853af142535496ad0da9a5f26087e817", "patch": "@@ -11,6 +11,8 @@ f1 (int *p, int *q, short *s)\n // { dg-final { scan-assembler-times \"_ZGVcN4l4ln4ln6__Z2f1PiS_Ps:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVdM8l4ln4ln6__Z2f1PiS_Ps:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVdN8l4ln4ln6__Z2f1PiS_Ps:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeM16l4ln4ln6__Z2f1PiS_Ps:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeN16l4ln4ln6__Z2f1PiS_Ps:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n \n #pragma omp declare simd linear(p:s) linear(q:t) uniform (s) linear(r:s) notinbranch simdlen(8) uniform(t)\n int\n@@ -22,6 +24,7 @@ f2 (int *p, short *q, int s, int r, int &t)\n // { dg-final { scan-assembler-times \"_ZGVbN8ls2ls4uls2u__Z2f2PiPsiiRi:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVcN8ls2ls4uls2u__Z2f2PiPsiiRi:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVdN8ls2ls4uls2u__Z2f2PiPsiiRi:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeN8ls2ls4uls2u__Z2f2PiPsiiRi:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n \n #pragma omp declare simd linear(ref(p):s) linear(val(q):t) uniform (s) linear(uval(r):s) notinbranch simdlen(8) uniform(t)\n int\n@@ -33,3 +36,4 @@ f3 (int &p, short &q, int s, int &r, int &t)\n // { dg-final { scan-assembler-times \"_ZGVbN8Rs2Ls4uUs2u__Z2f3RiRsiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVcN8Rs2Ls4uUs2u__Z2f3RiRsiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVdN8Rs2Ls4uUs2u__Z2f3RiRsiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVeN8Rs2Ls4uUs2u__Z2f3RiRsiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }"}, {"sha": "5022fbbc057ec4fc56d6348591f64c3294f3c315", "filename": "gcc/testsuite/gcc.dg/gomp/declare-simd-1.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3866f8dd853af142535496ad0da9a5f26087e817/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fdeclare-simd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3866f8dd853af142535496ad0da9a5f26087e817/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fdeclare-simd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fdeclare-simd-1.c?ref=3866f8dd853af142535496ad0da9a5f26087e817", "patch": "@@ -19,6 +19,8 @@ int f2 (int a, int *b, int c)\n /* { dg-final { scan-assembler-times \"_ZGVcN8uva32l4_f2:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVdM8uva32l4_f2:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVdN8uva32l4_f2:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVeM8uva32l4_f2:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVeN8uva32l4_f2:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n \n #pragma omp declare simd uniform (a) aligned (b : 8 * sizeof (long long)) linear (c : 4) simdlen (8)\n __extension__\n@@ -53,6 +55,8 @@ f7 (int x)\n /* { dg-final { scan-assembler-times \"_ZGVcN16v_f7:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVdM16v_f7:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVdN16v_f7:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVeM16v_f7:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVeN16v_f7:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n \n int\n f9 (int x)\n@@ -82,6 +86,8 @@ f13 (int c; int *b; int a; int a, int *b, int c)\n /* { dg-final { scan-assembler-times \"_ZGVcN8uva32l4_f13:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVdM8uva32l4_f13:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVdN8uva32l4_f13:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVeM8uva32l4_f13:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVeN8uva32l4_f13:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n \n #pragma omp declare simd uniform (a) aligned (b : 8 * sizeof (int)) linear (c : 4) simdlen (8)\n int\n@@ -98,6 +104,8 @@ f14 (a, b, c)\n /* { dg-final { scan-assembler-times \"_ZGVcN8uva32l4_f14:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVdM8uva32l4_f14:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVdN8uva32l4_f14:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVeM8uva32l4_f14:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVeN8uva32l4_f14:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n \n #pragma omp declare simd uniform (a) aligned (b : 8 * sizeof (int)) linear (c : 4) simdlen (8)\n int\n@@ -112,6 +120,8 @@ f15 (int a, int *b, int c)\n /* { dg-final { scan-assembler-times \"_ZGVcN8uva32l4_f15:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVdM8uva32l4_f15:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVdN8uva32l4_f15:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVeM8uva32l4_f15:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVeN8uva32l4_f15:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n \n #pragma omp declare simd uniform (d) aligned (e : 8 * sizeof (int)) linear (f : 4) simdlen (8)\n int f15 (int d, int *e, int f);\n@@ -131,12 +141,16 @@ int f17 (int g, long *h)\n /* { dg-final { scan-assembler-times \"_ZGVcN4l20va8_f17:\" 1 { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVdM4l20va8_f17:\" 1 { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVdN4l20va8_f17:\" 1 { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVeM4l20va8_f17:\" 1 { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVeN4l20va8_f17:\" 1 { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVbM4l12va4_f17:\" 1 { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVbN4l12va4_f17:\" 1 { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVcM4l12va4_f17:\" 1 { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVcN4l12va4_f17:\" 1 { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVdM4l12va4_f17:\" 1 { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVdN4l12va4_f17:\" 1 { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVeM4l12va4_f17:\" 1 { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVeN4l12va4_f17:\" 1 { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n \n #pragma omp declare simd aligned (i : sizeof (*i)) linear (j : 2 * sizeof (i[0]) + sizeof (j)) simdlen (4)\n int\n@@ -153,9 +167,13 @@ f18 (j, i)\n /* { dg-final { scan-assembler-times \"_ZGVcN4l20va8_f18:\" 1 { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVdM4l20va8_f18:\" 1 { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVdN4l20va8_f18:\" 1 { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVeM4l20va8_f18:\" 1 { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVeN4l20va8_f18:\" 1 { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVbM4l12va4_f18:\" 1 { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVbN4l12va4_f18:\" 1 { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVcM4l12va4_f18:\" 1 { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVcN4l12va4_f18:\" 1 { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVdM4l12va4_f18:\" 1 { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVdN4l12va4_f18:\" 1 { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVeM4l12va4_f18:\" 1 { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVeN4l12va4_f18:\" 1 { target { { i?86-*-* x86_64-*-* } && ilp32 } } } } */"}, {"sha": "9b8546dbe769880d90b565bd17eaf098066f4b4f", "filename": "gcc/testsuite/gcc.dg/gomp/declare-simd-3.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3866f8dd853af142535496ad0da9a5f26087e817/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fdeclare-simd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3866f8dd853af142535496ad0da9a5f26087e817/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fdeclare-simd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fdeclare-simd-3.c?ref=3866f8dd853af142535496ad0da9a5f26087e817", "patch": "@@ -11,6 +11,8 @@ f1 (int *p, int *q, short *s)\n /* { dg-final { scan-assembler-times \"_ZGVcN4l4ln4ln6_f1:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVdM8l4ln4ln6_f1:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVdN8l4ln4ln6_f1:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVeM16l4ln4ln6_f1:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVeN16l4ln4ln6_f1:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n \n #pragma omp declare simd linear(p:s) linear(q:t) uniform (s) linear(r:s) notinbranch simdlen(8) uniform(t)\n int\n@@ -22,3 +24,4 @@ f2 (int *p, short *q, int s, int r, int t)\n /* { dg-final { scan-assembler-times \"_ZGVbN8ls2ls4uls2u_f2:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVcN8ls2ls4uls2u_f2:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVdN8ls2ls4uls2u_f2:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-assembler-times \"_ZGVeN8ls2ls4uls2u_f2:\" 1 { target { i?86-*-* x86_64-*-* } } } } */"}, {"sha": "a3a7107cdf7df3390b5df0ca802de28358aeb950", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3866f8dd853af142535496ad0da9a5f26087e817/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3866f8dd853af142535496ad0da9a5f26087e817/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=3866f8dd853af142535496ad0da9a5f26087e817", "patch": "@@ -2603,7 +2603,7 @@ proc check_effective_target_vect_simd_clones { } {\n \t    # avx2 clone.  Only the right clone for the specified arch will be\n \t    # chosen, but still we need to at least be able to assemble\n \t    # avx2.\n-\t    if { [check_effective_target_avx2] } {\n+\t    if { [check_effective_target_avx512f] } {\n \t\tset et_vect_simd_clones_saved 1\n \t    }\n \t}"}]}