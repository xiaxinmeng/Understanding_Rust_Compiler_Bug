{"sha": "e4692319fd5fc7d740436e8bb338f44cb8df6c58", "node_id": "C_kwDOANBUbNoAKGU0NjkyMzE5ZmQ1ZmM3ZDc0MDQzNmU4YmIzMzhmNDRjYjhkZjZjNTg", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-03-06T23:06:39Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-03-07T15:13:53Z"}, "message": "c++: noexcept and copy elision [PR109030]\n\nWhen processing a noexcept, constructors aren't elided: build_over_call\nhas\n\t /* It's unsafe to elide the constructor when handling\n\t    a noexcept-expression, it may evaluate to the wrong\n\t    value (c++/53025).  */\n\t && (force_elide || cp_noexcept_operand == 0))\nso the assert I added recently needs to be relaxed a little bit.\n\n\tPR c++/109030\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.cc (cxx_eval_call_expression): Relax assert.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/noexcept77.C: New test.", "tree": {"sha": "5b6a208abfe92c5d9bfa244c80c2e3dd830f5031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b6a208abfe92c5d9bfa244c80c2e3dd830f5031"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4692319fd5fc7d740436e8bb338f44cb8df6c58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4692319fd5fc7d740436e8bb338f44cb8df6c58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4692319fd5fc7d740436e8bb338f44cb8df6c58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4692319fd5fc7d740436e8bb338f44cb8df6c58/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e09bc034d1b4d692b409fa5af52ae34480a6f4dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e09bc034d1b4d692b409fa5af52ae34480a6f4dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e09bc034d1b4d692b409fa5af52ae34480a6f4dc"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "8683c00596aef0f9f040f95055b1476580129a22", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4692319fd5fc7d740436e8bb338f44cb8df6c58/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4692319fd5fc7d740436e8bb338f44cb8df6c58/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=e4692319fd5fc7d740436e8bb338f44cb8df6c58", "patch": "@@ -2869,7 +2869,11 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \n   /* We used to shortcut trivial constructor/op= here, but nowadays\n      we can only get a trivial function here with -fno-elide-constructors.  */\n-  gcc_checking_assert (!trivial_fn_p (fun) || !flag_elide_constructors);\n+  gcc_checking_assert (!trivial_fn_p (fun)\n+\t\t       || !flag_elide_constructors\n+\t\t       /* We don't elide constructors when processing\n+\t\t\t  a noexcept-expression.  */\n+\t\t       || cp_noexcept_operand);\n \n   bool non_constant_args = false;\n   new_call.bindings"}, {"sha": "16db8eb79eeb2a898c438234c25da6f506c56c7f", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept77.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4692319fd5fc7d740436e8bb338f44cb8df6c58/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept77.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4692319fd5fc7d740436e8bb338f44cb8df6c58/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept77.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept77.C?ref=e4692319fd5fc7d740436e8bb338f44cb8df6c58", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/109030\n+// { dg-do compile { target c++11 } }\n+\n+struct foo { };\n+\n+struct __as_receiver {\n+  foo empty_env;\n+};\n+void sched(foo __fun) noexcept(noexcept(__as_receiver{__fun})) { }"}]}