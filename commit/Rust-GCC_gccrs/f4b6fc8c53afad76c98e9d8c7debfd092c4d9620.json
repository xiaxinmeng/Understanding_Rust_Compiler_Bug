{"sha": "f4b6fc8c53afad76c98e9d8c7debfd092c4d9620", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRiNmZjOGM1M2FmYWQ3NmM5OGU5ZDhjN2RlYmZkMDkyYzRkOTYyMA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2018-12-02T11:47:49Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2018-12-02T11:47:49Z"}, "message": "Merge dmd upstream 5220ad51e\n\nBackports Ddoc fix that is present in upstream, but did not make its way\ninto the C++ port of the D front-end implementation.\n\nThe old special types for C long, unsigned long, and long double have\nalso been removed as neither the compiler nor druntime bindings support\nhandling it anymore.\n\nCommits merged from dmd.\n\n\tBackport Issue 14633: Fixed false DDoc warnings\n\thttps://github.com/dlang/dmd/pull/9027\n\n\tRemove old support code for struct __c_long/ulong/long_double\n\thttps://github.com/dlang/dmd/pull/9028\n\nFrom-SVN: r266719", "tree": {"sha": "a62e9c7a765575db1f43be17ddd0cc84a20392e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a62e9c7a765575db1f43be17ddd0cc84a20392e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4b6fc8c53afad76c98e9d8c7debfd092c4d9620", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4b6fc8c53afad76c98e9d8c7debfd092c4d9620", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4b6fc8c53afad76c98e9d8c7debfd092c4d9620", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4b6fc8c53afad76c98e9d8c7debfd092c4d9620/comments", "author": null, "committer": null, "parents": [{"sha": "bb567ea30776994f691557d7f3cd80e332d68295", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb567ea30776994f691557d7f3cd80e332d68295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb567ea30776994f691557d7f3cd80e332d68295"}], "stats": {"total": 171, "additions": 125, "deletions": 46}, "files": [{"sha": "223ffbdc3582bf3203a7fd81bc62594f87fa7da6", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b6fc8c53afad76c98e9d8c7debfd092c4d9620/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b6fc8c53afad76c98e9d8c7debfd092c4d9620/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=f4b6fc8c53afad76c98e9d8c7debfd092c4d9620", "patch": "@@ -1,4 +1,4 @@\n-6243fa6d2ceab4615a9fe21c5bc9484e52bb2d1e\n+5220ad51eebe06754e6881d9bd5aab89dba2b065\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "ad88242d820e632906aa8df87fb5689470f0ad4f", "filename": "gcc/d/dmd/cppmangle.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b6fc8c53afad76c98e9d8c7debfd092c4d9620/gcc%2Fd%2Fdmd%2Fcppmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b6fc8c53afad76c98e9d8c7debfd092c4d9620/gcc%2Fd%2Fdmd%2Fcppmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcppmangle.c?ref=f4b6fc8c53afad76c98e9d8c7debfd092c4d9620", "patch": "@@ -952,15 +952,6 @@ class CppMangleVisitor : public Visitor\n         if (t->isImmutable() || t->isShared())\n             return error(t);\n \n-        /* __c_long and __c_ulong get special mangling\n-         */\n-        Identifier *id = t->sym->ident;\n-        //printf(\"struct id = '%s'\\n\", id->toChars());\n-        if (id == Id::__c_long)\n-            return writeBasicType(t, 0, 'l');\n-        else if (id == Id::__c_ulong)\n-            return writeBasicType(t, 0, 'm');\n-\n         //printf(\"TypeStruct %s\\n\", t->toChars());\n         doSymbol(t);\n     }"}, {"sha": "797991ee2c48febd816d959008297be510fde075", "filename": "gcc/d/dmd/doc.c", "status": "modified", "additions": 80, "deletions": 11, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b6fc8c53afad76c98e9d8c7debfd092c4d9620/gcc%2Fd%2Fdmd%2Fdoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b6fc8c53afad76c98e9d8c7debfd092c4d9620/gcc%2Fd%2Fdmd%2Fdoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdoc.c?ref=f4b6fc8c53afad76c98e9d8c7debfd092c4d9620", "patch": "@@ -133,6 +133,25 @@ bool isCVariadicParameter(Dsymbols *a, const utf8_t *p, size_t len)\n     return false;\n }\n \n+/****************************************************\n+ */\n+static Parameter *isFunctionParameter(Dsymbol *s, const utf8_t *p, size_t len)\n+{\n+    TypeFunction *tf = isTypeFunction(s);\n+    if (tf && tf->parameters)\n+    {\n+        for (size_t k = 0; k < tf->parameters->dim; k++)\n+        {\n+            Parameter *fparam = (*tf->parameters)[k];\n+            if (fparam->ident && cmp(fparam->ident->toChars(), p, len) == 0)\n+            {\n+                return fparam;\n+            }\n+        }\n+    }\n+    return NULL;\n+}\n+\n static Dsymbol *getEponymousMember(TemplateDeclaration *td)\n {\n     if (!td->onemember)\n@@ -150,6 +169,54 @@ static Dsymbol *getEponymousMember(TemplateDeclaration *td)\n     return NULL;\n }\n \n+/****************************************************\n+ */\n+static Parameter *isEponymousFunctionParameter(Dsymbols *a, const utf8_t *p, size_t len)\n+{\n+    for (size_t i = 0; i < a->dim; i++)\n+    {\n+        TemplateDeclaration *td = (*a)[i]->isTemplateDeclaration();\n+        if (td && td->onemember)\n+        {\n+            /* Case 1: we refer to a template declaration inside the template\n+\n+               /// ...ddoc...\n+               template case1(T) {\n+                 void case1(R)() {}\n+               }\n+             */\n+            td = td->onemember->isTemplateDeclaration();\n+        }\n+        if (!td)\n+        {\n+            /* Case 2: we're an alias to a template declaration\n+\n+               /// ...ddoc...\n+               alias case2 = case1!int;\n+             */\n+            AliasDeclaration *ad = (*a)[i]->isAliasDeclaration();\n+            if (ad && ad->aliassym)\n+            {\n+                td = ad->aliassym->isTemplateDeclaration();\n+            }\n+        }\n+        while (td)\n+        {\n+            Dsymbol *sym = getEponymousMember(td);\n+            if (sym)\n+            {\n+                Parameter *fparam = isFunctionParameter(sym, p, len);\n+                if (fparam)\n+                {\n+                    return fparam;\n+                }\n+            }\n+            td = td->overnext;\n+        }\n+    }\n+    return NULL;\n+}\n+\n static TemplateDeclaration *getEponymousParent(Dsymbol *s)\n {\n     if (!s->parent)\n@@ -1590,6 +1657,12 @@ void ParamSection::write(Loc loc, DocComment *, Scope *sc, Dsymbols *a, OutBuffe\n                 {\n                     size_t o = buf->offset;\n                     Parameter *fparam = isFunctionParameter(a, namestart, namelen);\n+                    if (!fparam)\n+                    {\n+                        // Comments on a template might refer to function parameters within.\n+                        // Search the parameters of nested eponymous functions (with the same name.)\n+                        fparam = isEponymousFunctionParameter(a, namestart, namelen);\n+                    }\n                     bool isCVariadic = isCVariadicParameter(a, namestart, namelen);\n                     if (isCVariadic)\n                     {\n@@ -2085,17 +2158,10 @@ Parameter *isFunctionParameter(Dsymbols *a, const utf8_t *p, size_t len)\n {\n     for (size_t i = 0; i < a->dim; i++)\n     {\n-        TypeFunction *tf = isTypeFunction((*a)[i]);\n-        if (tf && tf->parameters)\n+        Parameter *fparam = isFunctionParameter((*a)[i], p, len);\n+        if (fparam)\n         {\n-            for (size_t k = 0; k < tf->parameters->dim; k++)\n-            {\n-                Parameter *fparam = (*tf->parameters)[k];\n-                if (fparam->ident && cmp(fparam->ident->toChars(), p, len) == 0)\n-                {\n-                    return fparam;\n-                }\n-            }\n+            return fparam;\n         }\n     }\n     return NULL;\n@@ -2108,7 +2174,10 @@ TemplateParameter *isTemplateParameter(Dsymbols *a, const utf8_t *p, size_t len)\n {\n     for (size_t i = 0; i < a->dim; i++)\n     {\n-        TemplateDeclaration *td = getEponymousParent((*a)[i]);\n+        TemplateDeclaration *td = (*a)[i]->isTemplateDeclaration();\n+        // Check for the parent, if the current symbol is not a template declaration.\n+        if (!td)\n+            td = getEponymousParent((*a)[i]);\n         if (td && td->origParameters)\n         {\n             for (size_t k = 0; k < td->origParameters->dim; k++)"}, {"sha": "1c547613c44500ca565cc40bc93aeb3dd3d55e74", "filename": "gcc/testsuite/gdc.test/compilable/ddoc10236.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b6fc8c53afad76c98e9d8c7debfd092c4d9620/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc10236.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b6fc8c53afad76c98e9d8c7debfd092c4d9620/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc10236.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc10236.d?ref=f4b6fc8c53afad76c98e9d8c7debfd092c4d9620", "patch": "@@ -1,5 +1,5 @@\n // PERMUTE_ARGS:\n-// REQUIRED_ARGS: -D -Dd${RESULTS_DIR}/compilable -w -o-\n+// REQUIRED_ARGS: -D -Dd${RESULTS_DIR}/compilable -wi -o-\n \n /*\n TEST_OUTPUT:"}, {"sha": "065ced0936c0ae91cfa3d0494dfe189ecdd2e5ae", "filename": "gcc/testsuite/gdc.test/compilable/ddoc10236b.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b6fc8c53afad76c98e9d8c7debfd092c4d9620/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc10236b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b6fc8c53afad76c98e9d8c7debfd092c4d9620/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc10236b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc10236b.d?ref=f4b6fc8c53afad76c98e9d8c7debfd092c4d9620", "patch": "@@ -1,5 +1,5 @@\n // PERMUTE_ARGS:\n-// REQUIRED_ARGS: -D -Dd${RESULTS_DIR}/compilable -w -o-\n+// REQUIRED_ARGS: -D -Dd${RESULTS_DIR}/compilable -wi -o-\n \n /*\n TEST_OUTPUT:"}, {"sha": "93f383fea9f114d03d7aaaa5414c472e6edfa6b9", "filename": "gcc/testsuite/gdc.test/compilable/ddoc13502.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b6fc8c53afad76c98e9d8c7debfd092c4d9620/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc13502.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b6fc8c53afad76c98e9d8c7debfd092c4d9620/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc13502.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc13502.d?ref=f4b6fc8c53afad76c98e9d8c7debfd092c4d9620", "patch": "@@ -1,5 +1,5 @@\n // PERMUTE_ARGS:\n-// REQUIRED_ARGS: -D -Dd${RESULTS_DIR}/compilable -w -o-\n+// REQUIRED_ARGS: -D -Dd${RESULTS_DIR}/compilable -wi -o-\n /*\n TEST_OUTPUT:\n ---"}, {"sha": "b5cfa86367c1a232014044a11a73d95a23598c5e", "filename": "gcc/testsuite/gdc.test/compilable/ddoc4899.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b6fc8c53afad76c98e9d8c7debfd092c4d9620/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc4899.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b6fc8c53afad76c98e9d8c7debfd092c4d9620/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc4899.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fddoc4899.d?ref=f4b6fc8c53afad76c98e9d8c7debfd092c4d9620", "patch": "@@ -1,5 +1,5 @@\n // PERMUTE_ARGS:\n-// REQUIRED_ARGS: -D -Dd${RESULTS_DIR}/compilable -w -o-\n+// REQUIRED_ARGS: -D -Dd${RESULTS_DIR}/compilable -wi -o-\n \n /*\n TEST_OUTPUT:"}, {"sha": "82b93adf1f65306c6d6940af4617e2bca68ae0cd", "filename": "gcc/testsuite/gdc.test/runnable/cppa.d", "status": "modified", "additions": 40, "deletions": 21, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b6fc8c53afad76c98e9d8c7debfd092c4d9620/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fcppa.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b6fc8c53afad76c98e9d8c7debfd092c4d9620/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fcppa.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fcppa.d?ref=f4b6fc8c53afad76c98e9d8c7debfd092c4d9620", "patch": "@@ -612,13 +612,7 @@ extern(C++)\n \n version (CRuntime_Microsoft)\n {\n-    struct __c_long_double\n-    {\n-        this(double d) { ld = d; }\n-        double ld;\n-        alias ld this;\n-    }\n-\n+    enum __c_long_double : double;\n     alias __c_long_double myld;\n }\n else\n@@ -655,20 +649,8 @@ else\n   }\n }\n \n-struct __c_long\n-{\n-    this(x_long d) { ld = d; }\n-    x_long ld;\n-    alias ld this;\n-}\n-\n-struct __c_ulong\n-{\n-    this(x_ulong d) { ld = d; }\n-    x_ulong ld;\n-    alias ld this;\n-}\n-\n+enum __c_long : x_long;\n+enum __c_ulong : x_ulong;\n alias __c_long mylong;\n alias __c_ulong myulong;\n \n@@ -688,6 +670,43 @@ void test16()\n     ld = testul(ld);\n     assert(ld == 5 + myulong.sizeof);\n   }\n+\n+  static if (__c_long.sizeof == long.sizeof)\n+  {\n+    static assert(__c_long.max == long.max);\n+    static assert(__c_long.min == long.min);\n+    static assert(__c_long.init == long.init);\n+    static assert(__c_ulong.max == ulong.max);\n+    static assert(__c_ulong.min == ulong.min);\n+    static assert(__c_ulong.init == ulong.init);\n+    __c_long cl = 0;\n+    cl = cl + 1;\n+    long l = cl;\n+    cl = l;\n+    __c_ulong cul = 0;\n+    cul = cul + 1;\n+    ulong ul = cul;\n+    cul = ul;\n+  }\n+  else static if (__c_long.sizeof == int.sizeof)\n+  {\n+    static assert(__c_long.max == int.max);\n+    static assert(__c_long.min == int.min);\n+    static assert(__c_long.init == int.init);\n+    static assert(__c_ulong.max == uint.max);\n+    static assert(__c_ulong.min == uint.min);\n+    static assert(__c_ulong.init == uint.init);\n+    __c_long cl = 0;\n+    cl = cl + 1;\n+    int i = cl;\n+    cl = i;\n+    __c_ulong cul = 0;\n+    cul = cul + 1;\n+    uint u = cul;\n+    cul = u;\n+  }\n+  else\n+    static assert(0);\n }\n \n /****************************************/"}]}