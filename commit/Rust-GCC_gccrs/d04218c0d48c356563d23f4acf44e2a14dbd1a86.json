{"sha": "d04218c0d48c356563d23f4acf44e2a14dbd1a86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA0MjE4YzBkNDhjMzU2NTYzZDIzZjRhY2Y0NGUyYTE0ZGJkMWE4Ng==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-06-17T00:18:44Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-06-17T00:18:44Z"}, "message": "expr.c (expand_expr, [...]): If taking address of SAVE_EXPR, use put_var_into_stack.\n\n\t* expr.c (expand_expr, case ADDR_EXPR): If taking address of SAVE_EXPR,\n\tuse put_var_into_stack.\n\nFrom-SVN: r43423", "tree": {"sha": "22007ec64d1ed8a75a584fdbb4dc6fbe487786c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22007ec64d1ed8a75a584fdbb4dc6fbe487786c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d04218c0d48c356563d23f4acf44e2a14dbd1a86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d04218c0d48c356563d23f4acf44e2a14dbd1a86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d04218c0d48c356563d23f4acf44e2a14dbd1a86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d04218c0d48c356563d23f4acf44e2a14dbd1a86/comments", "author": null, "committer": null, "parents": [{"sha": "eaea542ac23577f776afa97cdc13d1901d0db7c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaea542ac23577f776afa97cdc13d1901d0db7c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaea542ac23577f776afa97cdc13d1901d0db7c2"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "e0092a4900b089972e89ce2f238aa6351bbb3d2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04218c0d48c356563d23f4acf44e2a14dbd1a86/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04218c0d48c356563d23f4acf44e2a14dbd1a86/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d04218c0d48c356563d23f4acf44e2a14dbd1a86", "patch": "@@ -1,3 +1,8 @@\n+Sat Jun 16 20:20:39 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* expr.c (expand_expr, case ADDR_EXPR): If taking address of SAVE_EXPR,\n+\tuse put_var_into_stack.\n+\n 2001-06-16  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n \n \t* gccspec.c (lang_specific_driver): If compiling ObjC, add"}, {"sha": "230cf9f1e6e498e6605aed598e7b4f6217f480f8", "filename": "gcc/expr.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04218c0d48c356563d23f4acf44e2a14dbd1a86/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04218c0d48c356563d23f4acf44e2a14dbd1a86/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d04218c0d48c356563d23f4acf44e2a14dbd1a86", "patch": "@@ -7034,14 +7034,22 @@ expand_expr (exp, target, tmode, modifier)\n \t    if (GET_CODE (op0) == REG || GET_CODE (op0) == SUBREG\n \t\t|| GET_CODE (op0) == CONCAT || GET_CODE (op0) == ADDRESSOF)\n \t      {\n-\t\ttree nt = build_qualified_type (TREE_TYPE (tem),\n-\t\t\t\t\t\t(TYPE_QUALS (TREE_TYPE (tem))\n-\t\t\t\t\t\t | TYPE_QUAL_CONST));\n-\t\trtx memloc = assign_temp (nt, 1, 1, 1);\n+\t\t/* If the operand is a SAVE_EXPR, we can deal with this by\n+\t\t   forcing the SAVE_EXPR into memory.  */\n+\t\tif (TREE_CODE (TREE_OPERAND (exp, 0)) == SAVE_EXPR)\n+\t\t  put_var_into_stack (TREE_OPERAND (exp, 0));\n+\t\telse\n+\t\t  {\n+\t\t    tree nt\n+\t\t      = build_qualified_type (TREE_TYPE (tem),\n+\t\t\t\t\t      (TYPE_QUALS (TREE_TYPE (tem))\n+\t\t\t\t\t       | TYPE_QUAL_CONST));\n+\t\t    rtx memloc = assign_temp (nt, 1, 1, 1);\n \n-\t\tmark_temp_addr_taken (memloc);\n-\t\temit_move_insn (memloc, op0);\n-\t\top0 = memloc;\n+\t\t    mark_temp_addr_taken (memloc);\n+\t\t    emit_move_insn (memloc, op0);\n+\t\t    op0 = memloc;\n+\t\t  }\n \t      }\n \n \t    if (GET_CODE (op0) != MEM)"}]}