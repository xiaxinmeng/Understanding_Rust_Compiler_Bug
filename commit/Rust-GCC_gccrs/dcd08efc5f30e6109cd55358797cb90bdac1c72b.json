{"sha": "dcd08efc5f30e6109cd55358797cb90bdac1c72b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNkMDhlZmM1ZjMwZTYxMDljZDU1MzU4Nzk3Y2I5MGJkYWMxYzcyYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-06-28T00:13:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-06-28T00:13:17Z"}, "message": "error.c (dump_type_real): Handle TREE_LIST again.\n\n\t* error.c (dump_type_real): Handle TREE_LIST again.\n\t* typeck.c (comp_target_parms): Don't complain about\n\tconverting from () to (...) if !flag_strict_prototype.\n\t* decl.c (grokdeclarator): Update the names of all variants when\n\tde-anonymizing.\n\nFrom-SVN: r27792", "tree": {"sha": "8840883f8d26af5281d68cb5290779d7f977230b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8840883f8d26af5281d68cb5290779d7f977230b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcd08efc5f30e6109cd55358797cb90bdac1c72b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcd08efc5f30e6109cd55358797cb90bdac1c72b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcd08efc5f30e6109cd55358797cb90bdac1c72b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcd08efc5f30e6109cd55358797cb90bdac1c72b/comments", "author": null, "committer": null, "parents": [{"sha": "9da8a3ae97750a437a1197bdafdae642db7471fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9da8a3ae97750a437a1197bdafdae642db7471fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9da8a3ae97750a437a1197bdafdae642db7471fb"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "ff7df31d9f4c2d4aa56e02cc68a4511aa8e3313e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd08efc5f30e6109cd55358797cb90bdac1c72b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd08efc5f30e6109cd55358797cb90bdac1c72b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dcd08efc5f30e6109cd55358797cb90bdac1c72b", "patch": "@@ -1,3 +1,13 @@\n+1999-06-28  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* error.c (dump_type_real): Handle TREE_LIST again.\n+\n+\t* typeck.c (comp_target_parms): Don't complain about \n+\tconverting from () to (...) if !flag_strict_prototype.\n+\n+\t* decl.c (grokdeclarator): Update the names of all variants when\n+\tde-anonymizing.\n+\n 1999-06-21  Mark Mitchell  <mark@codesourcery.com>\n \n \t* init.c (expand_aggr_vbase_init): Rename to"}, {"sha": "9f98840aa9bd4fe8ab72f90514efb89ca673b45c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd08efc5f30e6109cd55358797cb90bdac1c72b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd08efc5f30e6109cd55358797cb90bdac1c72b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=dcd08efc5f30e6109cd55358797cb90bdac1c72b", "patch": "@@ -11066,18 +11066,17 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t  && TREE_CODE (TYPE_NAME (type)) == TYPE_DECL\n \t  && ANON_AGGRNAME_P (TYPE_IDENTIFIER (type)))\n \t{\n+\t  tree oldname = TYPE_NAME (type);\n+\t  tree t;\n+\n \t  /* FIXME: This is bogus; we should not be doing this for\n \t            cv-qualified types.  */\n \n-\t  /* For anonymous structs that are cv-qualified, need to use\n-             TYPE_MAIN_VARIANT so that name will mangle correctly. As\n-             type not referenced after this block, don't bother\n-             resetting type to original type, ie. TREE_TYPE (decl). */\n-\t  type = TYPE_MAIN_VARIANT (type);\n-\n \t  /* Replace the anonymous name with the real name everywhere.  */\n \t  lookup_tag_reverse (type, declarator);\n-\t  TYPE_NAME (type) = decl;\n+\t  for (t = TYPE_MAIN_VARIANT (type); t; t = TYPE_NEXT_VARIANT (t))\n+\t    if (TYPE_NAME (t) == oldname)\n+\t      TYPE_NAME (t) = decl;\n \n \t  if (TYPE_LANG_SPECIFIC (type))\n \t    TYPE_WAS_ANONYMOUS (type) = 1;"}, {"sha": "544e66e8e3b0813ec9346ea5095c45c91e50efbb", "filename": "gcc/cp/error.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd08efc5f30e6109cd55358797cb90bdac1c72b/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd08efc5f30e6109cd55358797cb90bdac1c72b/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=dcd08efc5f30e6109cd55358797cb90bdac1c72b", "patch": "@@ -211,6 +211,11 @@ dump_type_real (t, v, canonical_name)\n       OB_PUTS (\"{unknown type}\");\n       break;\n \n+    case TREE_LIST:\n+      /* A list of function parms.  */\n+      dump_parameters (t, 0, canonical_name);\n+      break;\n+\n     case IDENTIFIER_NODE:\n       OB_PUTID (t);\n       break;"}, {"sha": "9e41af3f38d18aa3b07a45f8ec44650d3b59d3bc", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd08efc5f30e6109cd55358797cb90bdac1c72b/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd08efc5f30e6109cd55358797cb90bdac1c72b/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=dcd08efc5f30e6109cd55358797cb90bdac1c72b", "patch": "@@ -1357,8 +1357,13 @@ comp_target_parms (parms1, parms2, strict)\n \n   if (t1 == 0 && t2 != 0)\n     {\n-      cp_pedwarn (\"ANSI C++ prohibits conversion from `(%#T)' to `(...)'\",\n-\t\t  parms2);\n+      if (! flag_strict_prototype && t2 == void_list_node)\n+\t/* t1 might be the arglist of a function pointer in extern \"C\"\n+\t   declared to take (), which we fudged to (...).  Don't make the\n+\t   user pay for our mistake.  */;\n+      else\n+\tcp_pedwarn (\"ANSI C++ prohibits conversion from `%#T' to `(...)'\",\n+\t\t    parms2);\n       return self_promoting_args_p (t2);\n     }\n   if (t2 == 0)"}]}