{"sha": "4d6b8d4213376e8a2405782c7e360b03d4a2b04a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ2YjhkNDIxMzM3NmU4YTI0MDU3ODJjN2UzNjBiMDNkNGEyYjA0YQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-13T12:17:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-13T14:19:49Z"}, "message": "improve VN PHI hashing\n\nThis reduces the number of collisions for PHIs in the VN hashtable\nby always hashing the number of predecessors and separately hashing\nthe block number when we never merge PHIs from different blocks.\n\nThis improves collisions seen for the PR69609 testcase dramatically.\n\n2020-11-13  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (vn_phi_compute_hash): Always hash the\n\tnumber of predecessors.  Hash the block number also for\n\tloop header PHIs.\n\t(expressions_equal_p): Short-cut SSA name compares, remove\n\ttest for NULL operands.\n\t(vn_phi_eq): Cache number of predecessors, change inlined\n\ttest from expressions_equal_p.", "tree": {"sha": "f599a9e8d807d6e27554e3dcadfd719a2a254d55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f599a9e8d807d6e27554e3dcadfd719a2a254d55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d6b8d4213376e8a2405782c7e360b03d4a2b04a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d6b8d4213376e8a2405782c7e360b03d4a2b04a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d6b8d4213376e8a2405782c7e360b03d4a2b04a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d6b8d4213376e8a2405782c7e360b03d4a2b04a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be6169045edab396ab80b2ae72ca551c893bf922", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be6169045edab396ab80b2ae72ca551c893bf922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be6169045edab396ab80b2ae72ca551c893bf922"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "4d78054b1e00a78afc71779d6ef27660d72f1a5f", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d6b8d4213376e8a2405782c7e360b03d4a2b04a/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d6b8d4213376e8a2405782c7e360b03d4a2b04a/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=4d6b8d4213376e8a2405782c7e360b03d4a2b04a", "patch": "@@ -4126,13 +4126,27 @@ vn_nary_op_insert_stmt (gimple *stmt, tree result)\n static inline hashval_t\n vn_phi_compute_hash (vn_phi_t vp1)\n {\n-  inchash::hash hstate (EDGE_COUNT (vp1->block->preds) > 2\n-\t\t\t? vp1->block->index : EDGE_COUNT (vp1->block->preds));\n+  inchash::hash hstate;\n   tree phi1op;\n   tree type;\n   edge e;\n   edge_iterator ei;\n \n+  hstate.add_int (EDGE_COUNT (vp1->block->preds));\n+  switch (EDGE_COUNT (vp1->block->preds))\n+    {\n+    case 1:\n+      break;\n+    case 2:\n+      if (vp1->block->loop_father->header == vp1->block)\n+\t;\n+      else\n+\tbreak;\n+      /* Fallthru.  */\n+    default:\n+      hstate.add_int (vp1->block->index);\n+    }\n+\n   /* If all PHI arguments are constants we need to distinguish\n      the PHI node via its type.  */\n   type = vp1->type;\n@@ -4277,11 +4291,12 @@ vn_phi_eq (const_vn_phi_t const vp1, const_vn_phi_t const vp2)\n \n   /* Any phi in the same block will have it's arguments in the\n      same edge order, because of how we store phi nodes.  */\n-  for (unsigned i = 0; i < EDGE_COUNT (vp1->block->preds); ++i)\n+  unsigned nargs = EDGE_COUNT (vp1->block->preds);\n+  for (unsigned i = 0; i < nargs; ++i)\n     {\n       tree phi1op = vp1->phiargs[i];\n       tree phi2op = vp2->phiargs[i];\n-      if (phi1op == VN_TOP || phi2op == VN_TOP)\n+      if (phi1op == phi2op)\n \tcontinue;\n       if (!expressions_equal_p (phi1op, phi2op))\n \treturn false;\n@@ -5612,8 +5627,8 @@ expressions_equal_p (tree e1, tree e2)\n   if (e1 == VN_TOP || e2 == VN_TOP)\n     return true;\n \n-  /* If only one of them is null, they cannot be equal.  */\n-  if (!e1 || !e2)\n+  /* SSA_NAME compare pointer equal.  */\n+  if (TREE_CODE (e1) == SSA_NAME || TREE_CODE (e2) == SSA_NAME)\n     return false;\n \n   /* Now perform the actual comparison.  */"}]}