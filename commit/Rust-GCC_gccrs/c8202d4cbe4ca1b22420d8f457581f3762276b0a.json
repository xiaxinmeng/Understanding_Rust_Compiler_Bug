{"sha": "c8202d4cbe4ca1b22420d8f457581f3762276b0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgyMDJkNGNiZTRjYTFiMjI0MjBkOGY0NTc1ODFmMzc2MjI3NmIwYQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-10-18T18:29:25Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-10-18T18:29:25Z"}, "message": "attr-noinline.c, [...]: New tests.\n\n* gcc.dg/attr-noinline.c, gcc.dg/attr-used.c: New tests.\n* gcc.dg/attr-invalid.c: Likewise.\n\nFrom-SVN: r46335", "tree": {"sha": "673e59e65cf4e63246e3df599bc7224a96704a11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/673e59e65cf4e63246e3df599bc7224a96704a11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8202d4cbe4ca1b22420d8f457581f3762276b0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8202d4cbe4ca1b22420d8f457581f3762276b0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8202d4cbe4ca1b22420d8f457581f3762276b0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8202d4cbe4ca1b22420d8f457581f3762276b0a/comments", "author": null, "committer": null, "parents": [{"sha": "9162542e3d0cd270ab972615f66d7da16662466d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9162542e3d0cd270ab972615f66d7da16662466d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9162542e3d0cd270ab972615f66d7da16662466d"}], "stats": {"total": 140, "additions": 140, "deletions": 0}, "files": [{"sha": "ba9ae2a9386eea67f60a7f296bb5d306e55de9bf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8202d4cbe4ca1b22420d8f457581f3762276b0a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8202d4cbe4ca1b22420d8f457581f3762276b0a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c8202d4cbe4ca1b22420d8f457581f3762276b0a", "patch": "@@ -1,3 +1,8 @@\n+2001-10-18  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* gcc.dg/attr-noinline.c, gcc.dg/attr-used.c: New tests.\n+\t* gcc.dg/attr-invalid.c: Likewise.\n+\n 2001-10-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/gcc.dg/20011015-1.c: New test."}, {"sha": "768921d8b18c9a85a9e2f24e04a5f1a4c9b721ad", "filename": "gcc/testsuite/gcc.dg/attr-invalid.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8202d4cbe4ca1b22420d8f457581f3762276b0a/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-invalid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8202d4cbe4ca1b22420d8f457581f3762276b0a/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-invalid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-invalid.c?ref=c8202d4cbe4ca1b22420d8f457581f3762276b0a", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+#define CONCAT_(A,B) A ## B\n+#define CONCAT(A,B) CONCAT_(A,B)\n+\n+#define ATTR __attribute__((AT))\n+#define ATSYM(suf) CONCAT (AT, CONCAT_ (_, suf))\n+\n+#define AT noinline\n+\n+typedef int ATSYM(type) ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n+\n+typedef int (*ATSYM(fntype))(void) ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n+\n+struct ATSYM(struct) {\n+  char dummy ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n+} ATTR; /* { dg-warning \"does not apply to types\" \"\" } */\n+\n+int ATSYM(var) ATTR;  /* { dg-warning \"attribute ignored\" \"\" } */\n+\n+int ATSYM(fn_knrarg) (arg)\n+  int arg ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n+{}\n+\n+int ATSYM(fn_isoarg) (int arg ATTR) {} /* { dg-warning \"attribute ignored\" \"\" } */\n+\n+int ATSYM(fn_vars) (void) {\n+  static int svar ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n+  auto int lvar ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n+}\n+\n+\n+#undef AT\n+#define AT used\n+\n+typedef int ATSYM(type) ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n+\n+typedef int (*ATSYM(fntype))(void) ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n+\n+struct ATSYM(struct) {\n+  char dummy ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n+} ATTR; /* { dg-warning \"does not apply to types\" \"\" } */\n+\n+int ATSYM(var) ATTR;  /* { dg-warning \"attribute ignored\" \"\" } */\n+\n+int ATSYM(fn_knrarg) (arg)\n+  int arg ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n+{}\n+\n+int ATSYM(fn_isoarg) (int arg ATTR) {} /* { dg-warning \"attribute ignored\" \"\" } */\n+\n+int ATSYM(fn_vars) (void) {\n+  static int svar ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n+  auto int lvar ATTR; /* { dg-warning \"attribute ignored\" \"\" } */\n+}"}, {"sha": "903959e09f174e538900cabac0956b7a7f183c95", "filename": "gcc/testsuite/gcc.dg/attr-noinline.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8202d4cbe4ca1b22420d8f457581f3762276b0a/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-noinline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8202d4cbe4ca1b22420d8f457581f3762276b0a/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-noinline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-noinline.c?ref=c8202d4cbe4ca1b22420d8f457581f3762276b0a", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -finline-functions\" } */\n+\n+static inline void __attribute__((__noinline__)) function_definition(void) {} /* { dg-warning \"inline function \\[^\\n\\]* given attribute noinline\" \"\" } */\n+\n+static inline void __attribute__((__noinline__)) function_declaration_both_before(void); /* { dg-warning \"inline function \\[^\\n\\]* given attribute noinline\" \"\" } */\n+\n+static void function_declaration_both_before(void) {}\n+\n+static void function_declaration_both_after(void);\n+\n+static inline void __attribute__((__noinline__)) function_declaration_both_after(void); /* { dg-warning \"(inline function \\[^\\n\\]* given attribute noinline|declared inline after its definition)\" \"\" } */\n+\n+static void function_declaration_both_after(void) {}\n+\n+static void function_declaration_noinline_before(void) __attribute__((__noinline__)); /* { dg-warning \"previous declaration \\[^\\n\\]* with attribute noinline\" \"\" } */\n+\n+static inline void function_declaration_noinline_before(void) {} /* { dg-warning \"function \\[^\\n\\]* redeclared as inline\" \"\" } */\n+\n+static inline void function_declaration_noinline_after(void) {} /* { dg-warning \"previous declaration \\[^\\n\\]* was inline\" \"\" } */\n+\n+static void function_declaration_noinline_after(void) __attribute__((__noinline__)); /* { dg-warning \"function \\[^\\n\\]* redeclared with attribute noinline\" \"\" } */\n+\n+static inline void function_declaration_inline_before(void); /* { dg-warning \"previous declaration \\[^\\n\\]* was inline\" \"\" } */\n+\n+static void __attribute__((__noinline__)) function_declaration_inline_before(void) {} /* { dg-warning \"function \\[^\\n\\]* redeclared with attribute noinline\" \"\" } */\n+\n+static inline void function_declaration_inline_noinline_before(void); /* { dg-warning \"previous declaration \\[^\\n\\]* was inline\" \"\" } */\n+\n+static void function_declaration_inline_noinline_before(void) __attribute__((__noinline__)); /* { dg-warning \"function \\[^\\n\\]* redeclared with attribute noinline\" \"\" } */\n+\n+static void function_declaration_inline_noinline_before(void) {}\n+\n+static inline void function_declaration_inline_noinline_after(void);\n+\n+static void function_declaration_inline_noinline_after(void) {} /* { dg-warning \"previous declaration \\[^\\n\\]* was inline\" \"\" } */\n+\n+static void function_declaration_inline_noinline_after(void) __attribute__((__noinline__)); /* { dg-warning \"function \\[^\\n\\]* redeclared with attribute noinline\" \"\" } */\n+\n+static void function_declaration_noinline_inline_before(void) __attribute__((__noinline__)); /* { dg-warning \"previous declaration\\[^\\n\\]* with attribute noinline\" \"\" } */\n+\n+static inline void function_declaration_noinline_inline_before(void); /* { dg-warning \"function \\[^\\n\\]* redeclared as inline\" \"\" } */\n+\n+static void function_declaration_noinline_inline_before(void) {}\n+\n+int f () {\n+  function_definition ();\n+  function_declaration_both_before ();\n+  function_declaration_both_after ();\n+  function_declaration_noinline_before ();\n+  function_declaration_noinline_after ();\n+  function_declaration_inline_before ();\n+  function_declaration_inline_noinline_before ();\n+  function_declaration_inline_noinline_after ();\n+  function_declaration_noinline_inline_before ();\n+}\n+\n+/* { dg-final { scan-assembler \"function_definition\" } } */\n+/* { dg-final { scan-assembler \"function_declaration_both_before\" } } */\n+/* { dg-final { scan-assembler \"function_declaration_both_after\" } } */\n+/* { dg-final { scan-assembler \"function_declaration_noinline_before\" } } */\n+/* { dg-final { scan-assembler \"function_declaration_noinline_after\" } } */\n+/* { dg-final { scan-assembler \"function_declaration_inline_before\" } } */\n+/* { dg-final { scan-assembler \"function_declaration_inline_noinline_before\" } } */\n+/* { dg-final { scan-assembler \"function_declaration_inline_noinline_after\" } } */\n+/* { dg-final { scan-assembler \"function_declaration_noinline_inline_before\" } } */"}, {"sha": "ba7705aaa77263c6fe3a6083a1b68a986b004bd7", "filename": "gcc/testsuite/gcc.dg/attr-used.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8202d4cbe4ca1b22420d8f457581f3762276b0a/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-used.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8202d4cbe4ca1b22420d8f457581f3762276b0a/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-used.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-used.c?ref=c8202d4cbe4ca1b22420d8f457581f3762276b0a", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+static void function_declaration_before(void) __attribute__((__used__));\n+\n+static void function_declaration_before(void) {}\n+\n+static void function_declaration_after(void) {}\n+\n+static void function_declaration_after(void) __attribute__((__used__));\n+\n+/* { dg-final { scan-assembler \"function_declaration_before\" } } */\n+/* { dg-final { scan-assembler \"function_declaration_after\" } } */"}]}