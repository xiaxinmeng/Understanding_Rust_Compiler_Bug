{"sha": "3e7d4e82dc9fecb051e9ac422c312b26206d5ecd", "node_id": "C_kwDOANBUbNoAKDNlN2Q0ZTgyZGM5ZmVjYjA1MWU5YWM0MjJjMzEyYjI2MjA2ZDVlY2Q", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-01-13T12:13:44Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-02-10T09:10:44Z"}, "message": "[nvptx] Handle pre-sm_7x shared atomic store using atomic exchange\n\nThe ptx isa specifies (for pre-sm_7x) that atomic operations on shared memory\nlocations do not guarantee atomicity with respect to normal store instructions\nto the same address.\n\nThis can be fixed by:\n- inserting barriers between normal stores and atomic operations to a common\n  address\n- using atom.exch to store to locations accessed by other atomic operations.\n\nIt's not clearly spelled out which barriers are needed, and a barrier seem more\nexpensive than atomic exchange.\n\nImplement the pre-sm_7x shared atomic store using atomic exchange.\n\nThat includes stores using generic addressing, since those may also point to\nshared memory.\n\nTested on x86-64 with nvptx accelerator.\n\ngcc/ChangeLog:\n\n2022-02-02  Tom de Vries  <tdevries@suse.de>\n\n\t* config/nvptx/nvptx-protos.h (nvptx_mem_maybe_shared_p): Declare.\n\t* config/nvptx/nvptx.cc (nvptx_mem_data_area): New static function.\n\t(nvptx_mem_maybe_shared_p): New function.\n\t* config/nvptx/nvptx.md (define_expand \"atomic_store<mode>\"): New\n\tdefine_expand.\n\ngcc/testsuite/ChangeLog:\n\n2022-02-02  Tom de Vries  <tdevries@suse.de>\n\n\t* gcc.target/nvptx/atomic-store-1.c: New test.\n\t* gcc.target/nvptx/atomic-store-3.c: New test.\n\t* gcc.target/nvptx/stack-atomics-run.c: Update.", "tree": {"sha": "c936837997675c954294872736c8ea5ba16b0daf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c936837997675c954294872736c8ea5ba16b0daf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e7d4e82dc9fecb051e9ac422c312b26206d5ecd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e7d4e82dc9fecb051e9ac422c312b26206d5ecd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e7d4e82dc9fecb051e9ac422c312b26206d5ecd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e7d4e82dc9fecb051e9ac422c312b26206d5ecd/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b2d679bbbcc2b976c6e228ba63afdf67c33164e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b2d679bbbcc2b976c6e228ba63afdf67c33164e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b2d679bbbcc2b976c6e228ba63afdf67c33164e"}], "stats": {"total": 110, "additions": 109, "deletions": 1}, "files": [{"sha": "0bf9af406a22d73ee16eab40218cd15b162d5aa9", "filename": "gcc/config/nvptx/nvptx-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7d4e82dc9fecb051e9ac422c312b26206d5ecd/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7d4e82dc9fecb051e9ac422c312b26206d5ecd/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h?ref=3e7d4e82dc9fecb051e9ac422c312b26206d5ecd", "patch": "@@ -60,5 +60,6 @@ extern const char *nvptx_output_simt_exit (rtx);\n extern const char *nvptx_output_red_partition (rtx, rtx);\n extern const char *nvptx_output_atomic_insn (const char *, rtx *, int, int);\n extern bool nvptx_mem_local_p (rtx);\n+extern bool nvptx_mem_maybe_shared_p (const_rtx);\n #endif\n #endif"}, {"sha": "5b26c0f4c7dd595ae0e37a3d4a4b5a20186518b5", "filename": "gcc/config/nvptx/nvptx.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7d4e82dc9fecb051e9ac422c312b26206d5ecd/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7d4e82dc9fecb051e9ac422c312b26206d5ecd/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc?ref=3e7d4e82dc9fecb051e9ac422c312b26206d5ecd", "patch": "@@ -76,6 +76,7 @@\n #include \"intl.h\"\n #include \"opts.h\"\n #include \"tree-pretty-print.h\"\n+#include \"rtl-iter.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -2787,6 +2788,27 @@ nvptx_print_operand_address (FILE *file, machine_mode mode, rtx addr)\n   nvptx_print_address_operand (file, addr, mode);\n }\n \n+static nvptx_data_area\n+nvptx_mem_data_area (const_rtx x)\n+{\n+  gcc_assert (GET_CODE (x) == MEM);\n+\n+  const_rtx addr = XEXP (x, 0);\n+  subrtx_iterator::array_type array;\n+  FOR_EACH_SUBRTX (iter, array, addr, ALL)\n+    if (SYMBOL_REF_P (*iter))\n+      return SYMBOL_DATA_AREA (*iter);\n+\n+  return DATA_AREA_GENERIC;\n+}\n+\n+bool\n+nvptx_mem_maybe_shared_p (const_rtx x)\n+{\n+  nvptx_data_area area = nvptx_mem_data_area (x);\n+  return area == DATA_AREA_SHARED || area == DATA_AREA_GENERIC;\n+}\n+\n /* Print an operand, X, to FILE, with an optional modifier in CODE.\n \n    Meaning of CODE:"}, {"sha": "1a283b4192265c755bb2496cfed4ef34069adb5f", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7d4e82dc9fecb051e9ac422c312b26206d5ecd/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7d4e82dc9fecb051e9ac422c312b26206d5ecd/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=3e7d4e82dc9fecb051e9ac422c312b26206d5ecd", "patch": "@@ -2051,6 +2051,36 @@\n   }\n   [(set_attr \"atomic\" \"true\")])\n \n+(define_expand \"atomic_store<mode>\"\n+  [(match_operand:SDIM 0 \"memory_operand\" \"=m\")\t\t  ;; memory\n+   (match_operand:SDIM 1 \"nvptx_nonmemory_operand\" \"Ri\")  ;; input\n+   (match_operand:SI 2 \"const_int_operand\")]\t\t  ;; model\n+  \"\"\n+{\n+  struct address_info info;\n+  decompose_mem_address (&info, operands[0]);\n+  if (info.base != NULL && REG_P (*info.base)\n+      && REGNO_PTR_FRAME_P (REGNO (*info.base)))\n+    {\n+      emit_insn (gen_mov<mode> (operands[0], operands[1]));\n+      DONE;\n+    }\n+\n+  if (TARGET_SM70)\n+    /* Fall back to expand_atomic_store.  */\n+    FAIL;\n+\n+  bool maybe_shared_p = nvptx_mem_maybe_shared_p (operands[0]);\n+  if (!maybe_shared_p)\n+    /* Fall back to expand_atomic_store.  */\n+    FAIL;\n+\n+  rtx tmpreg = gen_reg_rtx (<MODE>mode);\n+  emit_insn (gen_atomic_exchange<mode> (tmpreg, operands[0], operands[1],\n+\t\t\t\t\toperands[2]));\n+  DONE;\n+})\n+\n (define_insn \"atomic_fetch_add<mode>\"\n   [(set (match_operand:SDIM 1 \"memory_operand\" \"+m\")\n \t(unspec_volatile:SDIM"}, {"sha": "cee3815eda5196954f59822a8a254376f79ed50d", "filename": "gcc/testsuite/gcc.target/nvptx/atomic-store-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7d4e82dc9fecb051e9ac422c312b26206d5ecd/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-store-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7d4e82dc9fecb051e9ac422c312b26206d5ecd/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-store-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-store-1.c?ref=3e7d4e82dc9fecb051e9ac422c312b26206d5ecd", "patch": "@@ -0,0 +1,26 @@\n+/* Test the atomic store expansion for sm <= sm_6x targets,\n+   shared state space.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-misa=sm_53\" } */\n+\n+enum memmodel\n+{\n+  MEMMODEL_SEQ_CST = 5\n+};\n+\n+unsigned int u32 __attribute__((shared));\n+unsigned long long int u64 __attribute__((shared));\n+\n+int\n+main()\n+{\n+  __atomic_store_n (&u32, 0, MEMMODEL_SEQ_CST);\n+  __atomic_store_n (&u64, 0, MEMMODEL_SEQ_CST);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"atom.shared.exch.b32\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.shared.exch.b64\" 1 } } */\n+/* { dg-final { scan-assembler-times \"membar.cta\" 4 } } */"}, {"sha": "cc0264f2b0629520951e5e814bc3285aef2edce5", "filename": "gcc/testsuite/gcc.target/nvptx/atomic-store-3.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7d4e82dc9fecb051e9ac422c312b26206d5ecd/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-store-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7d4e82dc9fecb051e9ac422c312b26206d5ecd/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-store-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-store-3.c?ref=3e7d4e82dc9fecb051e9ac422c312b26206d5ecd", "patch": "@@ -0,0 +1,25 @@\n+/* Test the atomic store expansion, global state space.  */\n+\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Wno-long-long\" } */\n+\n+enum memmodel\n+{\n+  MEMMODEL_SEQ_CST = 5\n+};\n+\n+unsigned int u32;\n+unsigned long long int u64;\n+\n+int\n+main()\n+{\n+  __atomic_store_n (&u32, 0, MEMMODEL_SEQ_CST);\n+  __atomic_store_n (&u64, 0, MEMMODEL_SEQ_CST);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"st.global.u32\" 1 } } */\n+/* { dg-final { scan-assembler-times \"st.global.u64\" 1 } } */\n+/* { dg-final { scan-assembler-times \"membar.sys\" 4 } } */"}, {"sha": "cd045964dfe63df4b36199858dc810ff990484e8", "filename": "gcc/testsuite/gcc.target/nvptx/stack-atomics-run.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7d4e82dc9fecb051e9ac422c312b26206d5ecd/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fstack-atomics-run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7d4e82dc9fecb051e9ac422c312b26206d5ecd/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fstack-atomics-run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fstack-atomics-run.c?ref=3e7d4e82dc9fecb051e9ac422c312b26206d5ecd", "patch": "@@ -39,6 +39,10 @@ main (void)\n   if (b != 1)\n     __builtin_abort ();\n \n-  \n+  a = 1;\n+  __atomic_store_n (&a, 0, MEMMODEL_RELAXED);\n+  if (a != 0)\n+    __builtin_abort ();\n+\n   return 0;\n }"}]}