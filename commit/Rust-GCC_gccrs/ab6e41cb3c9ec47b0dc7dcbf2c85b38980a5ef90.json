{"sha": "ab6e41cb3c9ec47b0dc7dcbf2c85b38980a5ef90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI2ZTQxY2IzYzllYzQ3YjBkYzdkY2JmMmM4NWIzODk4MGE1ZWY5MA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2016-02-14T01:37:40Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2016-02-14T01:37:40Z"}, "message": "PRE_INC with invalid hard reg\n\n\tPR target/68973\n\t* reloads.c (find_reloads_address_1): For pre/post-inc/dec\n\twith an invalid hard reg, reload just the reg not the entire\n\tpre/post-inc/dec address expression.\n\nFrom-SVN: r233406", "tree": {"sha": "4f99dbb06bd95b603d114ce66f9c8f87a902e324", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f99dbb06bd95b603d114ce66f9c8f87a902e324"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab6e41cb3c9ec47b0dc7dcbf2c85b38980a5ef90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab6e41cb3c9ec47b0dc7dcbf2c85b38980a5ef90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab6e41cb3c9ec47b0dc7dcbf2c85b38980a5ef90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab6e41cb3c9ec47b0dc7dcbf2c85b38980a5ef90/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "114e2b5198205e586a2115f4e81f587add87e4db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/114e2b5198205e586a2115f4e81f587add87e4db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/114e2b5198205e586a2115f4e81f587add87e4db"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "1561dbad2827d2ef47178c7d4083f06bda38a331", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6e41cb3c9ec47b0dc7dcbf2c85b38980a5ef90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6e41cb3c9ec47b0dc7dcbf2c85b38980a5ef90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab6e41cb3c9ec47b0dc7dcbf2c85b38980a5ef90", "patch": "@@ -1,3 +1,10 @@\n+2016-02-14  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/68973\n+\t* reloads.c (find_reloads_address_1): For pre/post-inc/dec\n+\twith an invalid hard reg, reload just the reg not the entire\n+\tpre/post-inc/dec address expression.\n+\n 2016-02-13  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/67260"}, {"sha": "06426d92332d18b26bd4d5a5de069553b163b7a2", "filename": "gcc/reload.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6e41cb3c9ec47b0dc7dcbf2c85b38980a5ef90/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6e41cb3c9ec47b0dc7dcbf2c85b38980a5ef90/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=ab6e41cb3c9ec47b0dc7dcbf2c85b38980a5ef90", "patch": "@@ -5834,14 +5834,16 @@ find_reloads_address_1 (machine_mode mode, addr_space_t as,\n \t\t\t   ? XEXP (x, 0)\n \t\t\t   : reg_equiv_mem (regno));\n \t      enum insn_code icode = optab_handler (add_optab, GET_MODE (x));\n-\t      if (insn && NONJUMP_INSN_P (insn) && equiv\n-\t\t  && memory_operand (equiv, GET_MODE (equiv))\n+\t      if (insn && NONJUMP_INSN_P (insn)\n #if HAVE_cc0\n \t\t  && ! sets_cc0_p (PATTERN (insn))\n #endif\n-\t\t  && ! (icode != CODE_FOR_nothing\n-\t\t\t&& insn_operand_matches (icode, 0, equiv)\n-\t\t\t&& insn_operand_matches (icode, 1, equiv))\n+\t\t  && (regno < FIRST_PSEUDO_REGISTER\n+\t\t      || (equiv\n+\t\t\t  && memory_operand (equiv, GET_MODE (equiv))\n+\t\t\t  && ! (icode != CODE_FOR_nothing\n+\t\t\t\t&& insn_operand_matches (icode, 0, equiv)\n+\t\t\t\t&& insn_operand_matches (icode, 1, equiv))))\n \t\t  /* Using RELOAD_OTHER means we emit this and the reload we\n \t\t     made earlier in the wrong order.  */\n \t\t  && !reloaded_inner_of_autoinc)"}]}