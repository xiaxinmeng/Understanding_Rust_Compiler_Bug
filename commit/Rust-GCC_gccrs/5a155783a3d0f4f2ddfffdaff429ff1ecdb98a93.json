{"sha": "5a155783a3d0f4f2ddfffdaff429ff1ecdb98a93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWExNTU3ODNhM2QwZjRmMmRkZmZmZGFmZjQyOWZmMWVjZGI5OGE5Mw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-01-02T09:54:37Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-01-02T09:54:37Z"}, "message": "re PR fortran/51682 (Coarray ICEs when compiling with -fdefault-integer-8)\n\n2012-01-02  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/51682\n        * trans-intrinsic.c (trans_this_image, trans_image_index,\n        trans_num_images, conv_intrinsic_cobound): Fold_convert the\n        caf_num_images/caf_this_images variables to the correct int kind.\n\n2012-01-02  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/51682\n        * gfortran.dg/coarray/image_index_3.f90: New.\n\nFrom-SVN: r182781", "tree": {"sha": "79c3b0ec38a841b428f684759e0364e6c5ed1df6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79c3b0ec38a841b428f684759e0364e6c5ed1df6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a155783a3d0f4f2ddfffdaff429ff1ecdb98a93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a155783a3d0f4f2ddfffdaff429ff1ecdb98a93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a155783a3d0f4f2ddfffdaff429ff1ecdb98a93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a155783a3d0f4f2ddfffdaff429ff1ecdb98a93/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e7ff14fe1a5719532b8ccaf539885a4d891d398", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e7ff14fe1a5719532b8ccaf539885a4d891d398", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e7ff14fe1a5719532b8ccaf539885a4d891d398"}], "stats": {"total": 131, "additions": 125, "deletions": 6}, "files": [{"sha": "af5fd93a6f047816d49afa222e3554b3e9f7a06c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a155783a3d0f4f2ddfffdaff429ff1ecdb98a93/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a155783a3d0f4f2ddfffdaff429ff1ecdb98a93/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5a155783a3d0f4f2ddfffdaff429ff1ecdb98a93", "patch": "@@ -1,3 +1,10 @@\n+2012-01-02  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/51682\n+\t* trans-intrinsic.c (trans_this_image, trans_image_index,\n+\ttrans_num_images, conv_intrinsic_cobound): Fold_convert the\n+\tcaf_num_images/caf_this_images variables to the correct int kind.\n+\n 2012-01-01  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gfortranspec.c (lang_specific_driver): Update copyright notice"}, {"sha": "2bc628d40f29e5c26fc480d697d6ad8e7a0cd9d0", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a155783a3d0f4f2ddfffdaff429ff1ecdb98a93/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a155783a3d0f4f2ddfffdaff429ff1ecdb98a93/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=5a155783a3d0f4f2ddfffdaff429ff1ecdb98a93", "patch": "@@ -978,7 +978,8 @@ trans_this_image (gfc_se * se, gfc_expr *expr)\n   /* Argument-free version: THIS_IMAGE().  */\n   if (expr->value.function.actual->expr == NULL)\n     {\n-      se->expr = gfort_gvar_caf_this_image;\n+      se->expr = fold_convert (gfc_get_int_type (gfc_default_integer_kind),\n+\t\t\t       gfort_gvar_caf_this_image);\n       return;\n     }\n \n@@ -1053,7 +1054,7 @@ trans_this_image (gfc_se * se, gfc_expr *expr)\n   /* Used algorithm; cf. Fortran 2008, C.10. Note, due to the scalarizer,\n      one always has a dim_arg argument.\n \n-     m = this_images() - 1\n+     m = this_image() - 1\n      if (corank == 1)\n        {\n \t sub(1) = m + lcobound(corank)\n@@ -1289,7 +1290,7 @@ trans_image_index (gfc_se * se, gfc_expr *expr)\n   else\n     {\n       gfc_init_coarray_decl (false);\n-      num_images = gfort_gvar_caf_num_images;\n+      num_images = fold_convert (type, gfort_gvar_caf_num_images);\n     }\n \n   tmp = gfc_create_var (type, NULL);\n@@ -1309,7 +1310,8 @@ static void\n trans_num_images (gfc_se * se)\n {\n   gfc_init_coarray_decl (false);\n-  se->expr = gfort_gvar_caf_num_images;\n+  se->expr = fold_convert (gfc_get_int_type (gfc_default_integer_kind),\n+\t\t\t   gfort_gvar_caf_num_images);\n }\n \n \n@@ -1614,7 +1616,8 @@ conv_intrinsic_cobound (gfc_se * se, gfc_expr * expr)\n \n \t  tmp = fold_build2_loc (input_location, MINUS_EXPR,\n \t\t\t\t gfc_array_index_type,\n-\t\t\t\t gfort_gvar_caf_num_images,\n+\t\t\t\t fold_convert (gfc_array_index_type,\n+\t\t\t\t\t       gfort_gvar_caf_num_images),\n \t\t\t\t build_int_cst (gfc_array_index_type, 1));\n \t  tmp = fold_build2_loc (input_location, TRUNC_DIV_EXPR,\n \t\t\t\t gfc_array_index_type, tmp,\n@@ -1628,7 +1631,8 @@ conv_intrinsic_cobound (gfc_se * se, gfc_expr * expr)\n \t  gfc_init_coarray_decl (false);\n \t  tmp = fold_build2_loc (input_location, MINUS_EXPR,\n \t\t\t\t gfc_array_index_type,\n-\t\t\t\t gfort_gvar_caf_num_images,\n+\t\t\t\t fold_convert (gfc_array_index_type,\n+\t\t\t\t\t       gfort_gvar_caf_num_images),\n \t\t\t\t build_int_cst (gfc_array_index_type, 1));\n \t  resbound = fold_build2_loc (input_location, PLUS_EXPR,\n \t\t\t\t      gfc_array_index_type, resbound, tmp);"}, {"sha": "d8bcb9a001febabc98350fe70b2c8b1fbf9c76da", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a155783a3d0f4f2ddfffdaff429ff1ecdb98a93/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a155783a3d0f4f2ddfffdaff429ff1ecdb98a93/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a155783a3d0f4f2ddfffdaff429ff1ecdb98a93", "patch": "@@ -1,3 +1,8 @@\n+2012-01-02  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/51682\n+\t* gfortran.dg/coarray/image_index_3.f90: New.\n+\n 2012-01-01  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/16603"}, {"sha": "9bfa02db3e635701c23e8de2015c2658f60427ea", "filename": "gcc/testsuite/gfortran.dg/coarray/image_index_3.f90", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a155783a3d0f4f2ddfffdaff429ff1ecdb98a93/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fimage_index_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a155783a3d0f4f2ddfffdaff429ff1ecdb98a93/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fimage_index_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fimage_index_3.f90?ref=5a155783a3d0f4f2ddfffdaff429ff1ecdb98a93", "patch": "@@ -0,0 +1,103 @@\n+! { dg-do run }\n+! { dg-options \"-fdefault-integer-8\" }\n+!\n+! As image_index_1.f90 but with -fdefault-integer-8\n+! PR fortran/51682\n+!\n+! Run-time test for IMAGE_INDEX with cobounds only known at\n+! the compile time, suitable for any number of NUM_IMAGES()\n+! For compile-time cobounds, the -fcoarray=lib version still\n+! needs to run-time evalulation if image_index returns > 1\n+! as image_index is 0 if the index would exceed num_images().\n+!\n+! Please set num_images() to >= 13, if possible.\n+!\n+! PR fortran/18918\n+!\n+\n+program test_image_index\n+implicit none\n+integer :: index1, index2, index3\n+logical :: one\n+\n+integer, allocatable :: a(:)[:,:,:], b(:)[:,:], c(:,:)[:]\n+integer, save :: d(2)[-1:3, *]\n+integer, save :: e(2)[-1:-1, 3:*]\n+\n+one = num_images() == 1\n+\n+allocate(a(1)[3:3, -4:-3, 88:*])\n+allocate(b(2)[-1:0,0:*])\n+allocate(c(3,3)[*])\n+\n+index1 = image_index(a, [3, -4, 88] )\n+index2 = image_index(b, [-1, 0] )\n+index3 = image_index(c, [1] )\n+if (index1 /= 1 .or. index2 /= 1 .or. index3 /= 1) call abort()\n+\n+\n+index1 = image_index(a, [3, -3, 88] )\n+index2 = image_index(b, [0, 0] )\n+index3 = image_index(c, [2] )\n+\n+if (one .and. (index1 /= 0 .or. index2 /= 0 .or. index3 /= 0)) &\n+  call abort()\n+if (.not. one .and. (index1 /= 2 .or. index2 /= 2 .or. index3 /= 2)) &\n+  call abort()\n+\n+\n+index1 = image_index(d, [-1, 1] )\n+index2 = image_index(d, [0, 1] )\n+\n+if (one .and. (index1 /= 1 .or. index2 /= 0)) &\n+  call abort()\n+if (.not. one .and. (index1 /= 1 .or. index2 /= 2)) &\n+  call abort()\n+\n+index1 = image_index(e, [-1, 3] )\n+index2 = image_index(e, [-1, 4] )\n+\n+if (one .and. (index1 /= 1 .or. index2 /= 0)) &\n+  call abort()\n+if (.not. one .and. (index1 /= 1 .or. index2 /= 2)) &\n+  call abort()\n+\n+call test(1, a,b,c)\n+\n+! The following test is in honour of the F2008 standard:\n+deallocate(a)\n+allocate(a (10) [10, 0:9, 0:*])\n+\n+index1 = image_index(a, [1, 0, 0] )\n+index2 = image_index(a, [3, 1, 2] )  ! = 213, yeah!\n+index3 = image_index(a, [3, 1, 0] )  ! = 13\n+\n+if (num_images() < 13 .and. (index1 /= 1 .or. index2 /= 0 .or. index3 /= 0)) &\n+  call abort()\n+if (num_images() >= 213 .and. (index1 /= 1 .or. index2 /= 213 .or. index3 /= 13)) &\n+  call abort()\n+if (num_images() >= 13 .and. (index1 /= 1 .or. index2 /= 0 .or. index3 /= 13)) &\n+  call abort()\n+\n+\n+contains\n+subroutine test(n, a, b, c)\n+  integer :: n\n+  integer :: a(1)[3*n:3*n, -4*n:-3*n, 88*n:*], b(2)[-1*n:0*n,0*n:*], c(3*n,3*n)[*]\n+\n+  index1 = image_index(a, [3, -4, 88] )\n+  index2 = image_index(b, [-1, 0] )\n+  index3 = image_index(c, [1] )\n+  if (index1 /= 1 .or. index2 /= 1 .or. index3 /= 1) call abort()\n+\n+\n+  index1 = image_index(a, [3, -3, 88] )\n+  index2 = image_index(b, [0, 0] )\n+  index3 = image_index(c, [2] )\n+\n+  if (one .and. (index1 /= 0 .or. index2 /= 0 .or. index3 /= 0)) &\n+    call abort()\n+  if (.not. one .and. (index1 /= 2 .or. index2 /= 2 .or. index3 /= 2)) &\n+    call abort()\n+end subroutine test\n+end program test_image_index"}]}