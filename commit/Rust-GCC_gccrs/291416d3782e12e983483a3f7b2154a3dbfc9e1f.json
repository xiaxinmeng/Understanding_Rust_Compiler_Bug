{"sha": "291416d3782e12e983483a3f7b2154a3dbfc9e1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkxNDE2ZDM3ODJlMTJlOTgzNDgzYTNmN2IyMTU0YTNkYmZjOWUxZg==", "commit": {"author": {"name": "Xi Ruoyao", "email": "xry111@mengyan1223.wang", "date": "2021-07-10T09:46:29Z"}, "committer": {"name": "Xi Ruoyao", "email": "xry111@mengyan1223.wang", "date": "2021-07-30T07:43:38Z"}, "message": "ipa-devirt: check precision mismatch of enum values [PR101396]\n\nWe are comparing enum values (in wide_int) to check ODR violation.\nHowever, if we compare two wide_int values with different precision,\nwe'll trigger an assert, leading to ICE.  With enum-base introduced\nin C++11, it's easy to sink into this situation.\n\nTo fix the issue, we need to explicitly check this kind of mismatch,\nand emit a proper warning message if there is such one.\n\ngcc/\n\n\tPR ipa/101396\n\t* ipa-devirt.c (ipa_odr_read_section): Compare the precision of\n\t  enum values, and emit a warning if they mismatch.\n\ngcc/testsuite/\n\n\tPR ipa/101396\n\t* g++.dg/lto/pr101396_0.C: New test.\n\t* g++.dg/lto/pr101396_1.C: New test.", "tree": {"sha": "5c434a2b48ab252e5f65bcfeb7b1e028aa839353", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c434a2b48ab252e5f65bcfeb7b1e028aa839353"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/291416d3782e12e983483a3f7b2154a3dbfc9e1f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEEunTLnZqV9wGnXaw2V5HFsy7NNwFAmEDraoACgkQ2V5HFsy7\nNNxkqQ/7BECjUukgi4W3M28Js7C86Pu7ThyJyma1YjqArHv+BXdjzI5jCOAP4/qT\n+W7cuM1HjmYP7gyU8JDRSeajWod6X+7gVAi/ONMfJwel3sSZk4fqH2GPO9ewD2um\nL495HH7LapoI4RcoDkFaHS3dbdbgrgtp1uXrUf9dAsKtccyJJYSeMk8YNe3z4S7B\nBt6VF9u/IuVEfZG1HX9tOhQLKSJHBtdF8zhptHPY9YbvkJCFDtbw1IqGZyY+vUcN\nsljSLEJhM0oiviGiC2dv/NyOps2JP2JwE9PcfQCsaJz7fuo9soMFPeCnX72TbFWD\nZBHU0RIW6jcJPfcEdCVN7eDF22FNp5VLdaIAMFbYXnaDPn/6xSv4NI190LWXOKfD\nrz7c9wyQ9rxY/eUlMPtnn6Js4EMMzxnHz/ilNnh3KAqLbp2eaujfrlC8BTVKz1dO\nw2dLw8US68XLmTP+uxWmiPAyOgfjeA0aOmAUkC69RHlvKI7MD4BYrtZD+93Ul3Bl\nvs8IEdZS8C0u/P9OlPLz+Gs46ekgjQYUR9yeKKhOxCFGx6LBlPkH2Da+fh4UwQfL\nHtlehgomv/HUgo6DlnWoCdcAxj0wThaB724ZKp2z7vBU/XglN2cUfhWnkiyIfnJP\niU/QnkqrQFpVr6JlPcSxFcNvT3ObXeBN/sU6cwpsYnC2dc3If9E=\n=uKln\n-----END PGP SIGNATURE-----", "payload": "tree 5c434a2b48ab252e5f65bcfeb7b1e028aa839353\nparent e41ba804ba5f5ca433e09238d561b1b4c8b10985\nauthor Xi Ruoyao <xry111@mengyan1223.wang> 1625910389 +0800\ncommitter Xi Ruoyao <xry111@mengyan1223.wang> 1627631018 +0800\n\nipa-devirt: check precision mismatch of enum values [PR101396]\n\nWe are comparing enum values (in wide_int) to check ODR violation.\nHowever, if we compare two wide_int values with different precision,\nwe'll trigger an assert, leading to ICE.  With enum-base introduced\nin C++11, it's easy to sink into this situation.\n\nTo fix the issue, we need to explicitly check this kind of mismatch,\nand emit a proper warning message if there is such one.\n\ngcc/\n\n\tPR ipa/101396\n\t* ipa-devirt.c (ipa_odr_read_section): Compare the precision of\n\t  enum values, and emit a warning if they mismatch.\n\ngcc/testsuite/\n\n\tPR ipa/101396\n\t* g++.dg/lto/pr101396_0.C: New test.\n\t* g++.dg/lto/pr101396_1.C: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/291416d3782e12e983483a3f7b2154a3dbfc9e1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/291416d3782e12e983483a3f7b2154a3dbfc9e1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/291416d3782e12e983483a3f7b2154a3dbfc9e1f/comments", "author": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e41ba804ba5f5ca433e09238d561b1b4c8b10985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e41ba804ba5f5ca433e09238d561b1b4c8b10985", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e41ba804ba5f5ca433e09238d561b1b4c8b10985"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "8deec75b2dff1dce0e24ab3be09fe99bf9ceb41c", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/291416d3782e12e983483a3f7b2154a3dbfc9e1f/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/291416d3782e12e983483a3f7b2154a3dbfc9e1f/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=291416d3782e12e983483a3f7b2154a3dbfc9e1f", "patch": "@@ -4193,6 +4193,8 @@ ipa_odr_read_section (struct lto_file_decl_data *file_data, const char *data,\n \t      if (do_warning != -1 || j >= this_enum.vals.length ())\n \t\tcontinue;\n \t      if (strcmp (id, this_enum.vals[j].name)\n+\t\t  || (val.get_precision() !=\n+\t\t      this_enum.vals[j].val.get_precision())\n \t\t  || val != this_enum.vals[j].val)\n \t\t{\n \t\t  warn_name = xstrdup (id);\n@@ -4260,6 +4262,13 @@ ipa_odr_read_section (struct lto_file_decl_data *file_data, const char *data,\n \t\t\t    \"name %qs differs from name %qs defined\"\n \t\t\t    \" in another translation unit\",\n \t\t\t    this_enum.vals[j].name, warn_name);\n+\t\t  else if (this_enum.vals[j].val.get_precision() !=\n+\t\t\t   warn_value.get_precision())\n+\t\t    inform (this_enum.vals[j].locus,\n+\t\t\t    \"name %qs is defined as %u-bit while another \"\n+\t\t\t    \"translation unit defines it as %u-bit\",\n+\t\t\t    warn_name, this_enum.vals[j].val.get_precision(),\n+\t\t\t    warn_value.get_precision());\n \t\t  /* FIXME: In case there is easy way to print wide_ints,\n \t\t     perhaps we could do it here instead of overflow check.  */\n \t\t  else if (wi::fits_shwi_p (this_enum.vals[j].val)"}, {"sha": "b7a2947a8809146df1ff5edb417305c3c6a5a962", "filename": "gcc/testsuite/g++.dg/lto/pr101396_0.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/291416d3782e12e983483a3f7b2154a3dbfc9e1f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr101396_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/291416d3782e12e983483a3f7b2154a3dbfc9e1f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr101396_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr101396_0.C?ref=291416d3782e12e983483a3f7b2154a3dbfc9e1f", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-lto-do link } */\n+\n+enum A : __UINT32_TYPE__ { // { dg-lto-warning \"6: type 'A' violates the C\\\\+\\\\+ One Definition Rule\" }\n+  a, // { dg-lto-note \"3: name 'a' is defined as 32-bit while another translation unit defines it as 64-bit\" }\n+  b,\n+  c\n+};\n+\n+int main()\n+{\n+  return (int) A::a;\n+}"}, {"sha": "a6d032d694d99258ab4d0e1d4bd57a45c39ce591", "filename": "gcc/testsuite/g++.dg/lto/pr101396_1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/291416d3782e12e983483a3f7b2154a3dbfc9e1f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr101396_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/291416d3782e12e983483a3f7b2154a3dbfc9e1f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr101396_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr101396_1.C?ref=291416d3782e12e983483a3f7b2154a3dbfc9e1f", "patch": "@@ -0,0 +1,10 @@\n+enum A : __UINT64_TYPE__ { // { dg-lto-note \"6: an enum with different value name is defined in another translation unit\" }\n+  a, // { dg-lto-note \"3: mismatching definition\" }\n+  b,\n+  c\n+};\n+\n+int f(enum A x)\n+{\n+  return (int) x;\n+}"}]}