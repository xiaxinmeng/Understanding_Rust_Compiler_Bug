{"sha": "046585534ecd87d9ecc21aa178616f63233cdaf2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ2NTg1NTM0ZWNkODdkOWVjYzIxYWExNzg2MTZmNjMyMzNjZGFmMg==", "commit": {"author": {"name": "Loren J. Rittle", "email": "ljrittle@acm.org", "date": "2001-01-10T02:08:16Z"}, "committer": {"name": "Gerald Pfeifer", "email": "gerald@gcc.gnu.org", "date": "2001-01-10T02:08:16Z"}, "message": "ctype_inline.h (is): (Make right code path:) Remove magic constants and restructure to handle...\n\n\t* config/os/bsd/freebsd/bits/ctype_inline.h (is): (Make right\n\tcode path:) Remove magic constants and restructure to handle\n\tctype.h bit mask layout changes more gracefully.  (Make fast\n\tcode path:) Use __maskrune (), if available.\n\t(is): Remove special case for digit and xdigit masks.\n\nFrom-SVN: r38847", "tree": {"sha": "316193645de0a4a1c936165cb373eae45e02fa37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/316193645de0a4a1c936165cb373eae45e02fa37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/046585534ecd87d9ecc21aa178616f63233cdaf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/046585534ecd87d9ecc21aa178616f63233cdaf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/046585534ecd87d9ecc21aa178616f63233cdaf2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/046585534ecd87d9ecc21aa178616f63233cdaf2/comments", "author": null, "committer": null, "parents": [{"sha": "9088c6fcf67fc7eaf11ba1a09499e40125d6ac50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9088c6fcf67fc7eaf11ba1a09499e40125d6ac50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9088c6fcf67fc7eaf11ba1a09499e40125d6ac50"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "1e77ef5c708de4c05eef02e391d25b3d34454d1b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046585534ecd87d9ecc21aa178616f63233cdaf2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046585534ecd87d9ecc21aa178616f63233cdaf2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=046585534ecd87d9ecc21aa178616f63233cdaf2", "patch": "@@ -1,3 +1,10 @@\n+2001-01-10  Loren J. Rittle  <ljrittle@acm.org>\n+\n+\t* config/os/bsd/freebsd/bits/ctype_inline.h (is): (Make right\n+\tcode path:) Remove magic constants and restructure to handle\n+\tctype.h bit mask layout changes more gracefully.  (Make fast\n+\tcode path:) Use __maskrune (), if available.\n+\t(is): Remove special case for digit and xdigit masks.\n \n 2001-01-09  Robert Lipe <robertlipe@usa.net>\n "}, {"sha": "b4ba03f30f5f6db75db8bc38af663ab628053465", "filename": "libstdc++-v3/config/os/bsd/freebsd/bits/ctype_inline.h", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046585534ecd87d9ecc21aa178616f63233cdaf2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046585534ecd87d9ecc21aa178616f63233cdaf2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fctype_inline.h?ref=046585534ecd87d9ecc21aa178616f63233cdaf2", "patch": "@@ -38,28 +38,34 @@\n   ctype<char>::\n   is(mask __m, char __c) const\n   { \n-    if (__m & (digit | xdigit))\n-      return __isctype(__c, __m);\n-    else\n-      return __istype(__c, __m);\n+    return __istype(__c, __m);\n   }\n \n   const char*\n   ctype<char>::\n   is(const char* __low, const char* __high, mask* __vec) const\n   {\n-    const int __bitmasksize = 11; // Highest bitmask in ctype_base == 10\n     for (;__low < __high; ++__vec, ++__low)\n       {\n+#if defined (_CTYPE_S) || defined (__istype)\n+\t*__vec = __maskrune (*__low, upper | lower | alpha | digit | xdigit\n+\t\t\t     | space | print | graph | cntrl | punct | alnum);\n+#else\n \tmask __m = 0;\n-\tint __i = 0; // Lowest bitmask in ctype_base == 0\n-\tfor (;__i < __bitmasksize; ++__i)\n-\t  {\n-\t    mask __bit = static_cast<mask>(1 << __i);\n-\t    if (this->is(__bit, *__low))\n-\t      __m |= __bit;\n-\t  }\n+\tif (this->is(upper, *__low)) __m |= upper;\n+\tif (this->is(lower, *__low)) __m |= lower;\n+\tif (this->is(alpha, *__low)) __m |= alpha;\n+\tif (this->is(digit, *__low)) __m |= digit;\n+\tif (this->is(xdigit, *__low)) __m |= xdigit;\n+\tif (this->is(space, *__low)) __m |= space;\n+\tif (this->is(print, *__low)) __m |= print;\n+\tif (this->is(graph, *__low)) __m |= graph;\n+\tif (this->is(cntrl, *__low)) __m |= cntrl;\n+\tif (this->is(punct, *__low)) __m |= punct;\n+\t// Do not include explicit line for alnum mask since it is a\n+\t// pure composite of masks on FreeBSD.\n \t*__vec = __m;\n+#endif\n       }\n     return __high;\n   }"}]}