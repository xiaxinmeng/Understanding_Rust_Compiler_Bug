{"sha": "0d569849e6a8c783c2e2331417e85c3a40a3b980", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ1Njk4NDllNmE4Yzc4M2MyZTIzMzE0MTdlODVjM2E0MGEzYjk4MA==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2003-05-31T18:45:31Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2003-05-31T18:45:31Z"}, "message": "function.c (trampoline_address): Remove ALLOCATE_TRAMPOLINE usage.\n\n        * function.c (trampoline_address): Remove ALLOCATE_TRAMPOLINE\n        usage.\n\n        * doc/tm.texi (Trampolines): Remove ALLOCATE_TRAMPOLINE.\n\n        * config/d30v/d30v.h: Remove traces of ALLOCATE_TRAMPOLINE.\n\n        * system.h: Poison ALLOCATE_TRAMPOLINE.\n\n        * doc/tm.texi (Misc): Remove HANDLE_PRAGMA.\n        * system.h: Poison HANDLE_PRAGMA.\n\n\tIn f/\n        * lex.c (ffelex_hash_): Remove HANDLE_PRAGMA and\n        HANDLE_GENERIC_PRAGMA dependend code, remove #if 0 code.\n        (pragma_getc): Removed.\n        (pragma_ungetc): Removed.\n\nFrom-SVN: r67274", "tree": {"sha": "e51a63762d9808d04eaa7cef419df116b60f75da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e51a63762d9808d04eaa7cef419df116b60f75da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d569849e6a8c783c2e2331417e85c3a40a3b980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d569849e6a8c783c2e2331417e85c3a40a3b980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d569849e6a8c783c2e2331417e85c3a40a3b980", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d569849e6a8c783c2e2331417e85c3a40a3b980/comments", "author": null, "committer": null, "parents": [{"sha": "c79af3fafd7f53e110ae9286f221032cd11a1ac6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c79af3fafd7f53e110ae9286f221032cd11a1ac6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c79af3fafd7f53e110ae9286f221032cd11a1ac6"}], "stats": {"total": 131, "additions": 32, "deletions": 99}, "files": [{"sha": "e95b22c757a80ea09f7e18e31af710e3a621e7f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d569849e6a8c783c2e2331417e85c3a40a3b980/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d569849e6a8c783c2e2331417e85c3a40a3b980/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d569849e6a8c783c2e2331417e85c3a40a3b980", "patch": "@@ -1,3 +1,17 @@\n+2003-05-31  Andreas Jaeger  <aj@suse.de>\n+\n+\t* function.c (trampoline_address): Remove ALLOCATE_TRAMPOLINE\n+\tusage.\n+\n+\t* doc/tm.texi (Trampolines): Remove ALLOCATE_TRAMPOLINE.\n+\n+\t* config/d30v/d30v.h: Remove traces of ALLOCATE_TRAMPOLINE.\n+\n+\t* system.h: Poison ALLOCATE_TRAMPOLINE.\n+\n+\t* doc/tm.texi (Misc): Remove HANDLE_PRAGMA.\n+\t* system.h: Poison HANDLE_PRAGMA.\n+\n 2003-05-31  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* doc/invoke.texi: Update dump file names.\n@@ -14,7 +28,7 @@\n \t* toplev.c (flag_wrapv): Declare the variable with default false.\n \t(lang_independent_options): New option \"-fwrapv\" to set the above.\n \n-\t* fold-const.c (extract_muldiv_1): Disable optimization of (2*x)/2 \n+\t* fold-const.c (extract_muldiv_1): Disable optimization of (2*x)/2\n \tas x, when signed arithmetic overflow wraps around.\n \t(fold): Optimize \"-A - B\" as \"-B - A\" if overflow wraps around.\n \t* loop.c (basic_induction_var): Ignore BIVs that rely on undefined\n@@ -2876,7 +2890,7 @@ Mon May 12 11:32:53 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t\t* config/mips/mips.c (mips_symbol_insns): Rework.  Fix handling\n \t\tof unaligned offsets.\n \n-\t       \t* config/mips/mips.c (mips_splittable_symbol_p): Fix handling\n+\t\t* config/mips/mips.c (mips_splittable_symbol_p): Fix handling\n \t\tof SYMBOL_GENERAL.\n \n \t2003-03-22  Richard Sandiford  <rsandifo@redhat.com>\n@@ -3064,7 +3078,7 @@ Mon May 12 11:32:53 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t2003-02-02  Eric Christopher  <echristo@redhat.com>\n \n-\t       \t* config/mips/mips.c (mips_sign_extend): Remove.\n+\t\t* config/mips/mips.c (mips_sign_extend): Remove.\n \t\t* config/mips/mips-protos.h: Ditto.\n \t\t* config/mips/mips.md (movdi_internal2_extend): Remove.\n \t\t(extendsidi2): Fix mode of convert_memory_address.\n@@ -3152,7 +3166,7 @@ Mon May 12 11:32:53 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t\tsimple_memory_operand, double_memory_operand, mips_check_split,\n \t\tmips_address_cost, pic_address_needs_scratch, mips16_gp_offset,\n \t\tmips16_gp_offset_p, mips16_output_gp_offset,\n-\t       \tmips16_constant_after_function_p, mips16_constant): Remove.\n+\t\tmips16_constant_after_function_p, mips16_constant): Remove.\n \t\t(call_insn_operand): Be more fussy about symbolic constants.\n \t\tUse register_operand.\n \t\t(move_operand): Use mips_symbolic_address_p to check symbolic\n@@ -3380,7 +3394,7 @@ Mon May 12 11:32:53 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t\t* cnfig/mips/mips.md (reload_incc): Change destination prediate\n \t\tto fcc_register_operand.  Remove misleading source constraint.\n \t\tUse mips_emit_fcc_reload.\n-       \t\t(reload_outcc): Duplicate reload_incc.\n+\t\t(reload_outcc): Duplicate reload_incc.\n \n \n 2003-04-30  Diego Novillo  <dnovillo@redhat.com>"}, {"sha": "57a90fe65d06676ca459b2480a642f494d53389a", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d569849e6a8c783c2e2331417e85c3a40a3b980/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d569849e6a8c783c2e2331417e85c3a40a3b980/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=0d569849e6a8c783c2e2331417e85c3a40a3b980", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for Mitsubishi D30V.\n-   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n    Free Software Foundation, Inc.\n    Contributed by Cygnus Solutions.\n \n@@ -2024,25 +2024,6 @@ typedef struct machine_function GTY(())\n #define INITIALIZE_TRAMPOLINE(ADDR, FNADDR, STATIC_CHAIN) \\\n   d30v_initialize_trampoline (ADDR, FNADDR, STATIC_CHAIN)\n \n-/* A C expression to allocate run-time space for a trampoline.  The expression\n-   value should be an RTX representing a memory reference to the space for the\n-   trampoline.\n-\n-   If this macro is not defined, by default the trampoline is allocated as a\n-   stack slot.  This default is right for most machines.  The exceptions are\n-   machines where it is impossible to execute instructions in the stack area.\n-   On such machines, you may have to implement a separate stack, using this\n-   macro in conjunction with output_function_prologue () and\n-   output_function_epilogue ().\n-\n-   FP points to a data structure, a `struct function', which describes the\n-   compilation status of the immediate containing function of the function\n-   which the trampoline is for.  Normally (when `ALLOCATE_TRAMPOLINE' is not\n-   defined), the stack slot for the trampoline is in the stack frame of this\n-   containing function.  Other allocation strategies probably must do something\n-   analogous with this information.  */\n-/* #define ALLOCATE_TRAMPOLINE(FP) */\n-\n /* Implementing trampolines is difficult on many machines because they have\n    separate instruction and data caches.  Writing into a stack location fails\n    to clear the memory in the instruction cache, so when the program jumps to"}, {"sha": "322374fcd45bc6e8f4b3bd6cb6337460ee566bfa", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d569849e6a8c783c2e2331417e85c3a40a3b980/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d569849e6a8c783c2e2331417e85c3a40a3b980/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=0d569849e6a8c783c2e2331417e85c3a40a3b980", "patch": "@@ -4599,12 +4599,6 @@ the template was stored, the different address should be assigned to\n @var{addr}.  If this macro is not defined, @var{addr} will be used for\n function calls.\n \n-@findex ALLOCATE_TRAMPOLINE\n-@item ALLOCATE_TRAMPOLINE (@var{fp})\n-A C expression to allocate run-time space for a trampoline.  The\n-expression value should be an RTX representing a memory reference to the\n-space for the trampoline.\n-\n @cindex @code{TARGET_ASM_FUNCTION_EPILOGUE} and trampolines\n @cindex @code{TARGET_ASM_FUNCTION_PROLOGUE} and trampolines\n If this macro is not defined, by default the trampoline is allocated as\n@@ -4616,8 +4610,7 @@ and @code{TARGET_ASM_FUNCTION_EPILOGUE}.\n \n @var{fp} points to a data structure, a @code{struct function}, which\n describes the compilation status of the immediate containing function of\n-the function which the trampoline is for.  Normally (when\n-@code{ALLOCATE_TRAMPOLINE} is not defined), the stack slot for the\n+the function which the trampoline is for.  The stack slot for the\n trampoline is in the stack frame of this containing function.  Other\n allocation strategies probably must do something analogous with this\n information.\n@@ -8929,11 +8922,6 @@ This macro inhibits the usual method of using system header files in\n C++, which is to pretend that the file's contents are enclosed in\n @samp{extern \"C\" @{@dots{}@}}.\n \n-@findex HANDLE_PRAGMA\n-@item HANDLE_PRAGMA (@var{getc}, @var{ungetc}, @var{name})\n-This macro is no longer supported.  You must use\n-@code{REGISTER_TARGET_PRAGMAS} instead.\n-\n @findex REGISTER_TARGET_PRAGMAS\n @findex #pragma\n @findex pragma"}, {"sha": "02e22ddb86c842c8dd58f1c3435df934323ec7e6", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d569849e6a8c783c2e2331417e85c3a40a3b980/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d569849e6a8c783c2e2331417e85c3a40a3b980/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=0d569849e6a8c783c2e2331417e85c3a40a3b980", "patch": "@@ -1,3 +1,10 @@\n+2003-05-31  Andreas Jaeger  <aj@suse.de>\n+\n+\t* lex.c (ffelex_hash_): Remove HANDLE_PRAGMA and\n+\tHANDLE_GENERIC_PRAGMA dependend code, remove #if 0 code.\n+\t(pragma_getc): Removed.\n+\t(pragma_ungetc): Removed.\n+\n 2003-05-30  Roger Sayle  <roger@eyesopen.com>\n \n \t* com.c (ffecom_init_0): Define built-in functions for tan and atan.\n@@ -92,7 +99,7 @@\n \n 2003-05-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n- \t* lex.c (ffelex_file_pop_): Adjust file_stack member use.\n+\t* lex.c (ffelex_file_pop_): Adjust file_stack member use.\n \t(ffelex_file_push_): Likewise.\n \t(ffelex_hash_): Likewise.\n "}, {"sha": "29ff43e98dc49fc678e4577f194102be0442b778", "filename": "gcc/f/lex.c", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d569849e6a8c783c2e2331417e85c3a40a3b980/gcc%2Ff%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d569849e6a8c783c2e2331417e85c3a40a3b980/gcc%2Ff%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flex.c?ref=0d569849e6a8c783c2e2331417e85c3a40a3b980", "patch": "@@ -997,22 +997,6 @@ ffelex_get_directive_line_ (char **text, FILE *finput)\n \n    Returns the next character unhandled, which is always newline or EOF.  */\n \n-#if defined HANDLE_PRAGMA\n-/* Local versions of these macros, that can be passed as function pointers.  */\n-static int\n-pragma_getc ()\n-{\n-  return getc (finput);\n-}\n-\n-static void\n-pragma_ungetc (arg)\n-     int arg;\n-{\n-  ungetc (arg, finput);\n-}\n-#endif /* HANDLE_PRAGMA */\n-\n static int\n ffelex_hash_ (FILE *finput)\n {\n@@ -1041,42 +1025,6 @@ ffelex_hash_ (FILE *finput)\n \t      && ((c = getc (finput)) == ' ' || c == '\\t' || c == '\\n'\n \t\t  || c == EOF))\n \t    {\n-#if 0\t/* g77 doesn't handle pragmas, so ignores them FOR NOW. */\n-\t      static char buffer [128];\n-\t      char * buff = buffer;\n-\n-\t      /* Read the pragma name into a buffer.\n-\t\t ISSPACE() may evaluate its argument more than once!  */\n-\t      while (((c = getc (finput)), ISSPACE(c)))\n-\t\tcontinue;\n-\n-\t      do\n-\t\t{\n-\t\t  * buff ++ = c;\n-\t\t  c = getc (finput);\n-\t\t}\n-\t      while (c != EOF && ! ISSPACE (c) && c != '\\n'\n-\t\t     && buff < buffer + 128);\n-\n-\t      pragma_ungetc (c);\n-\n-\t      * -- buff = 0;\n-#ifdef HANDLE_PRAGMA\n-\t      if (HANDLE_PRAGMA (pragma_getc, pragma_ungetc, buffer))\n-\t\tgoto skipline;\n-#endif /* HANDLE_PRAGMA */\n-#ifdef HANDLE_GENERIC_PRAGMAS\n-\t      if (handle_generic_pragma (buffer))\n-\t\tgoto skipline;\n-#endif /* !HANDLE_GENERIC_PRAGMAS */\n-\n-\t      /* Issue a warning message if we have been asked to do so.\n-\t\t Ignoring unknown pragmas in system header file unless\n-\t\t an explcit -Wunknown-pragmas has been given. */\n-\t      if (warn_unknown_pragmas > 1\n-\t\t  || (warn_unknown_pragmas && ! in_system_header))\n-\t\twarning (\"ignoring pragma: %s\", token_buffer);\n-#endif /* 0 */\n \t      goto skipline;\n \t    }\n \t}"}, {"sha": "c6d485d3013adbe883d7f2525d3673509d1c45ec", "filename": "gcc/function.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d569849e6a8c783c2e2331417e85c3a40a3b980/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d569849e6a8c783c2e2331417e85c3a40a3b980/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=0d569849e6a8c783c2e2331417e85c3a40a3b980", "patch": "@@ -5844,17 +5844,12 @@ trampoline_address (function)\n \n   /* Allocate run-time space for this trampoline\n      (usually in the defining function's stack frame).  */\n-#ifdef ALLOCATE_TRAMPOLINE\n-  tramp = ALLOCATE_TRAMPOLINE (fp);\n-#else\n   /* If rounding needed, allocate extra space\n      to ensure we have TRAMPOLINE_SIZE bytes left after rounding up.  */\n #define TRAMPOLINE_REAL_SIZE \\\n   (TRAMPOLINE_SIZE + (TRAMPOLINE_ALIGNMENT / BITS_PER_UNIT) - 1)\n   tramp = assign_stack_local_1 (BLKmode, TRAMPOLINE_REAL_SIZE, 0,\n \t\t\t\tfp ? fp : cfun);\n-#endif\n-\n   /* Record the trampoline for reuse and note it for later initialization\n      by expand_function_end.  */\n   if (fp != 0)"}, {"sha": "145e775642f8c9982a3dddc8bb57dbec0a480a4a", "filename": "gcc/system.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d569849e6a8c783c2e2331417e85c3a40a3b980/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d569849e6a8c783c2e2331417e85c3a40a3b980/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=0d569849e6a8c783c2e2331417e85c3a40a3b980", "patch": "@@ -57,7 +57,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    HAVE_DECL_PUTC_UNLOCKED actually indicates whether or not the stdio\n    code is multi-thread safe by default.  If it is set to 0, then do\n    not worry about using the _unlocked functions.\n-   \n+\n    fputs_unlocked, fwrite_unlocked, and fprintf_unlocked are\n    extensions and need to be prototyped by hand (since we do not\n    define _GNU_SOURCE).  */\n@@ -99,7 +99,7 @@ extern int fprintf_unlocked PARAMS ((FILE *, const char *, ...));\n \n #endif\n \n-/* ??? Glibc's fwrite/fread_unlocked macros cause \n+/* ??? Glibc's fwrite/fread_unlocked macros cause\n    \"warning: signed and unsigned type in conditional expression\".  */\n #undef fread_unlocked\n #undef fwrite_unlocked\n@@ -641,7 +641,7 @@ typedef char _Bool;\n \tFUNCTION_BLOCK_PROFILER_EXIT MACHINE_STATE_SAVE\t\t\t   \\\n \tMACHINE_STATE_RESTORE SCCS_DIRECTIVE SECTION_ASM_OP\t\t   \\\n \tASM_OUTPUT_DEFINE_LABEL_DIFFERENCE_SYMBOL ASM_OUTPUT_INTERNAL_LABEL \\\n-\tOBJC_PROLOGUE\n+\tOBJC_PROLOGUE ALLOCATE_TRAMPOLINE HANDLE_PRAGMA\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}]}