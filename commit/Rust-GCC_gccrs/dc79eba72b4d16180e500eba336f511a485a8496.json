{"sha": "dc79eba72b4d16180e500eba336f511a485a8496", "node_id": "C_kwDOANBUbNoAKGRjNzllYmE3MmI0ZDE2MTgwZTUwMGViYTMzNmY1MTFhNDg1YTg0OTY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-02-10T23:16:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-02-16T10:24:45Z"}, "message": "libstdc++: Fix uses of non-reserved names in headers\n\nThe non-reserved names 'val' and 'dest' were being used in our headers\nbut haven't been added to the 17_intro/names.cc test. That's because\nthey are used by <asm-generic/posix_types.h> and <netinet/tcp.h>\nrespecitvely on glibc-based systems.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/fs_ops.h (create_directory): Use reserved name\n\tfor parameter.\n\t* include/bits/ranges_algo.h (__contains_subrange_fn):\n\tLikewise.\n\t* include/bits/regex_automaton.h (_State_base::_M_print):\n\tLikewise.\n\t* include/bits/regex_automaton.tcc(_State_base::_M_print):\n\tLikewise.\n\t* include/bits/regex_scanner.tcc(_Scanner::_M_print): Likewise.\n\t* include/experimental/bits/fs_ops.h (create_directory):\n\tLikewise.\n\t* include/std/mutex (timed_mutex::_M_clocklock): Likewise.\n\t(recursive_timed_mutex:_M_clocklock): Likewise.\n\t* include/std/tuple (basic_common_reference): Likewise.\n\t* libsupc++/cxxabi_init_exception.h\n\t(__cxa_init_primary_exception): Likewise.\n\t* testsuite/17_intro/names.cc: Add checks.", "tree": {"sha": "d04fcf23593c201f4ad3f3be7b3f065d8b261094", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d04fcf23593c201f4ad3f3be7b3f065d8b261094"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc79eba72b4d16180e500eba336f511a485a8496", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc79eba72b4d16180e500eba336f511a485a8496", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc79eba72b4d16180e500eba336f511a485a8496", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc79eba72b4d16180e500eba336f511a485a8496/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55db240d28d29aac90a2d2af3768283ba6288752", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55db240d28d29aac90a2d2af3768283ba6288752", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55db240d28d29aac90a2d2af3768283ba6288752"}], "stats": {"total": 136, "additions": 77, "deletions": 59}, "files": [{"sha": "e0b87c9fa00b7e9a58d8265724315274b7f7299d", "filename": "libstdc++-v3/include/bits/fs_ops.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc79eba72b4d16180e500eba336f511a485a8496/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_ops.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc79eba72b4d16180e500eba336f511a485a8496/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_ops.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_ops.h?ref=dc79eba72b4d16180e500eba336f511a485a8496", "patch": "@@ -90,8 +90,8 @@ namespace filesystem\n   bool create_directory(const path& __p);\n   bool create_directory(const path& __p, error_code& __ec) noexcept;\n \n-  bool create_directory(const path& __p, const path& attributes);\n-  bool create_directory(const path& __p, const path& attributes,\n+  bool create_directory(const path& __p, const path& __attributes);\n+  bool create_directory(const path& __p, const path& __attributes,\n \t\t\terror_code& __ec) noexcept;\n \n   void create_directory_symlink(const path& __to, const path& __new_symlink);"}, {"sha": "5d039bd1cd45b9f2ca05ec64e17d259e8f0c7b6b", "filename": "libstdc++-v3/include/bits/ranges_algo.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc79eba72b4d16180e500eba336f511a485a8496/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc79eba72b4d16180e500eba336f511a485a8496/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h?ref=dc79eba72b4d16180e500eba336f511a485a8496", "patch": "@@ -3490,11 +3490,11 @@ namespace ranges\n     template<forward_iterator _Iter1, sentinel_for<_Iter1> _Sent1,\n \t     forward_iterator _Iter2, sentinel_for<_Iter2> _Sent2,\n \t     typename _Pred = ranges::equal_to,\n-\t     typename Proj1 = identity, typename Proj2 = identity>\n-      requires indirectly_comparable<_Iter1, _Iter2, _Pred, Proj1, Proj2>\n+\t     typename _Proj1 = identity, typename _Proj2 = identity>\n+      requires indirectly_comparable<_Iter1, _Iter2, _Pred, _Proj1, _Proj2>\n       constexpr bool\n       operator()(_Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2,\n-\t\t _Pred __pred = {}, Proj1 __proj1 = {}, Proj2 __proj2 = {}) const\n+\t\t _Pred __pred = {}, _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n \treturn __first2 == __last2\n \t  || !ranges::search(__first1, __last1, __first2, __last2,"}, {"sha": "ef336d5883b6b873118d7811d30f39d3077768c1", "filename": "libstdc++-v3/include/bits/regex_automaton.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc79eba72b4d16180e500eba336f511a485a8496/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc79eba72b4d16180e500eba336f511a485a8496/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h?ref=dc79eba72b4d16180e500eba336f511a485a8496", "patch": "@@ -110,7 +110,7 @@ namespace __detail\n \n #ifdef _GLIBCXX_DEBUG\n     std::ostream&\n-    _M_print(std::ostream& ostr) const;\n+    _M_print(std::ostream& __ostr) const;\n \n     // Prints graphviz dot commands for state.\n     std::ostream&"}, {"sha": "f25f7b33263e123d64a081c5fcf15fd33ebb4094", "filename": "libstdc++-v3/include/bits/regex_automaton.tcc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc79eba72b4d16180e500eba336f511a485a8496/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc79eba72b4d16180e500eba336f511a485a8496/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc?ref=dc79eba72b4d16180e500eba336f511a485a8496", "patch": "@@ -36,34 +36,34 @@ namespace __detail\n {\n #ifdef _GLIBCXX_DEBUG\n   inline std::ostream&\n-  _State_base::_M_print(std::ostream& ostr) const\n+  _State_base::_M_print(std::ostream& __ostr) const\n   {\n     switch (_M_opcode)\n     {\n       case _S_opcode_alternative:\n       case _S_opcode_repeat:\n-\tostr << \"alt next=\" << _M_next << \" alt=\" << _M_alt;\n+\t__ostr << \"alt next=\" << _M_next << \" alt=\" << _M_alt;\n \tbreak;\n       case _S_opcode_subexpr_begin:\n-\tostr << \"subexpr begin next=\" << _M_next << \" index=\" << _M_subexpr;\n+\t__ostr << \"subexpr begin next=\" << _M_next << \" index=\" << _M_subexpr;\n \tbreak;\n       case _S_opcode_subexpr_end:\n-\tostr << \"subexpr end next=\" << _M_next << \" index=\" << _M_subexpr;\n+\t__ostr << \"subexpr end next=\" << _M_next << \" index=\" << _M_subexpr;\n \tbreak;\n       case _S_opcode_backref:\n-\tostr << \"backref next=\" << _M_next << \" index=\" << _M_backref_index;\n+\t__ostr << \"backref next=\" << _M_next << \" index=\" << _M_backref_index;\n \tbreak;\n       case _S_opcode_match:\n-\tostr << \"match next=\" << _M_next;\n+\t__ostr << \"match next=\" << _M_next;\n \tbreak;\n       case _S_opcode_accept:\n-\tostr << \"accept next=\" << _M_next;\n+\t__ostr << \"accept next=\" << _M_next;\n \tbreak;\n       default:\n-\tostr << \"unknown next=\" << _M_next;\n+\t__ostr << \"unknown next=\" << _M_next;\n \tbreak;\n     }\n-    return ostr;\n+    return __ostr;\n   }\n \n   // Prints graphviz dot commands for state."}, {"sha": "137617845de2a448665e06459f5fa272ceb51890", "filename": "libstdc++-v3/include/bits/regex_scanner.tcc", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc79eba72b4d16180e500eba336f511a485a8496/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc79eba72b4d16180e500eba336f511a485a8496/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc?ref=dc79eba72b4d16180e500eba336f511a485a8496", "patch": "@@ -484,98 +484,98 @@ namespace __detail\n   template<typename _CharT>\n     std::ostream&\n     _Scanner<_CharT>::\n-    _M_print(std::ostream& ostr)\n+    _M_print(std::ostream& __ostr)\n     {\n       switch (_M_token)\n       {\n       case _S_token_anychar:\n-\tostr << \"any-character\\n\";\n+\t__ostr << \"any-character\\n\";\n \tbreak;\n       case _S_token_backref:\n-\tostr << \"backref\\n\";\n+\t__ostr << \"backref\\n\";\n \tbreak;\n       case _S_token_bracket_begin:\n-\tostr << \"bracket-begin\\n\";\n+\t__ostr << \"bracket-begin\\n\";\n \tbreak;\n       case _S_token_bracket_neg_begin:\n-\tostr << \"bracket-neg-begin\\n\";\n+\t__ostr << \"bracket-neg-begin\\n\";\n \tbreak;\n       case _S_token_bracket_end:\n-\tostr << \"bracket-end\\n\";\n+\t__ostr << \"bracket-end\\n\";\n \tbreak;\n       case _S_token_char_class_name:\n-\tostr << \"char-class-name \\\"\" << _M_value << \"\\\"\\n\";\n+\t__ostr << \"char-class-name \\\"\" << _M_value << \"\\\"\\n\";\n \tbreak;\n       case _S_token_closure0:\n-\tostr << \"closure0\\n\";\n+\t__ostr << \"closure0\\n\";\n \tbreak;\n       case _S_token_closure1:\n-\tostr << \"closure1\\n\";\n+\t__ostr << \"closure1\\n\";\n \tbreak;\n       case _S_token_collsymbol:\n-\tostr << \"collsymbol \\\"\" << _M_value << \"\\\"\\n\";\n+\t__ostr << \"collsymbol \\\"\" << _M_value << \"\\\"\\n\";\n \tbreak;\n       case _S_token_comma:\n-\tostr << \"comma\\n\";\n+\t__ostr << \"comma\\n\";\n \tbreak;\n       case _S_token_dup_count:\n-\tostr << \"dup count: \" << _M_value << \"\\n\";\n+\t__ostr << \"dup count: \" << _M_value << \"\\n\";\n \tbreak;\n       case _S_token_eof:\n-\tostr << \"EOF\\n\";\n+\t__ostr << \"EOF\\n\";\n \tbreak;\n       case _S_token_equiv_class_name:\n-\tostr << \"equiv-class-name \\\"\" << _M_value << \"\\\"\\n\";\n+\t__ostr << \"equiv-class-name \\\"\" << _M_value << \"\\\"\\n\";\n \tbreak;\n       case _S_token_interval_begin:\n-\tostr << \"interval begin\\n\";\n+\t__ostr << \"interval begin\\n\";\n \tbreak;\n       case _S_token_interval_end:\n-\tostr << \"interval end\\n\";\n+\t__ostr << \"interval end\\n\";\n \tbreak;\n       case _S_token_line_begin:\n-\tostr << \"line begin\\n\";\n+\t__ostr << \"line begin\\n\";\n \tbreak;\n       case _S_token_line_end:\n-\tostr << \"line end\\n\";\n+\t__ostr << \"line end\\n\";\n \tbreak;\n       case _S_token_opt:\n-\tostr << \"opt\\n\";\n+\t__ostr << \"opt\\n\";\n \tbreak;\n       case _S_token_or:\n-\tostr << \"or\\n\";\n+\t__ostr << \"or\\n\";\n \tbreak;\n       case _S_token_ord_char:\n-\tostr << \"ordinary character: \\\"\" << _M_value << \"\\\"\\n\";\n+\t__ostr << \"ordinary character: \\\"\" << _M_value << \"\\\"\\n\";\n \tbreak;\n       case _S_token_subexpr_begin:\n-\tostr << \"subexpr begin\\n\";\n+\t__ostr << \"subexpr begin\\n\";\n \tbreak;\n       case _S_token_subexpr_no_group_begin:\n-\tostr << \"no grouping subexpr begin\\n\";\n+\t__ostr << \"no grouping subexpr begin\\n\";\n \tbreak;\n       case _S_token_subexpr_lookahead_begin:\n-\tostr << \"lookahead subexpr begin\\n\";\n+\t__ostr << \"lookahead subexpr begin\\n\";\n \tbreak;\n       case _S_token_subexpr_end:\n-\tostr << \"subexpr end\\n\";\n+\t__ostr << \"subexpr end\\n\";\n \tbreak;\n       case _S_token_unknown:\n-\tostr << \"-- unknown token --\\n\";\n+\t__ostr << \"-- unknown token --\\n\";\n \tbreak;\n       case _S_token_oct_num:\n-\tostr << \"oct number \" << _M_value << \"\\n\";\n+\t__ostr << \"oct number \" << _M_value << \"\\n\";\n \tbreak;\n       case _S_token_hex_num:\n-\tostr << \"hex number \" << _M_value << \"\\n\";\n+\t__ostr << \"hex number \" << _M_value << \"\\n\";\n \tbreak;\n       case _S_token_quoted_class:\n-\tostr << \"quoted class \" << \"\\\\\" << _M_value << \"\\n\";\n+\t__ostr << \"quoted class \" << \"\\\\\" << _M_value << \"\\n\";\n \tbreak;\n       default:\n \t_GLIBCXX_DEBUG_ASSERT(false);\n       }\n-      return ostr;\n+      return __ostr;\n     }\n #endif\n "}, {"sha": "b3303afdb20f347aa78ee581a7d03fbdb4b5b52a", "filename": "libstdc++-v3/include/experimental/bits/fs_ops.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc79eba72b4d16180e500eba336f511a485a8496/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_ops.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc79eba72b4d16180e500eba336f511a485a8496/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_ops.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_ops.h?ref=dc79eba72b4d16180e500eba336f511a485a8496", "patch": "@@ -98,8 +98,8 @@ inline namespace v1\n   bool create_directory(const path& __p);\n   bool create_directory(const path& __p, error_code& __ec) noexcept;\n \n-  bool create_directory(const path& __p, const path& attributes);\n-  bool create_directory(const path& __p, const path& attributes,\n+  bool create_directory(const path& __p, const path& __attributes);\n+  bool create_directory(const path& __p, const path& __attributes,\n \t\t\terror_code& __ec) noexcept;\n \n   void create_directory_symlink(const path& __to, const path& __new_symlink);"}, {"sha": "79420388abc51c5bb7f469966113dc4ec3b7df93", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc79eba72b4d16180e500eba336f511a485a8496/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc79eba72b4d16180e500eba336f511a485a8496/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=dc79eba72b4d16180e500eba336f511a485a8496", "patch": "@@ -294,8 +294,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if _GLIBCXX_USE_PTHREAD_MUTEX_CLOCKLOCK\n       bool\n-      _M_clocklock(clockid_t clockid, const __gthread_time_t& __ts)\n-      { return !pthread_mutex_clocklock(&_M_mutex, clockid, &__ts); }\n+      _M_clocklock(clockid_t __clockid, const __gthread_time_t& __ts)\n+      { return !pthread_mutex_clocklock(&_M_mutex, __clockid, &__ts); }\n #endif\n   };\n \n@@ -372,8 +372,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #ifdef _GLIBCXX_USE_PTHREAD_MUTEX_CLOCKLOCK\n       bool\n-      _M_clocklock(clockid_t clockid, const __gthread_time_t& __ts)\n-      { return !pthread_mutex_clocklock(&_M_mutex, clockid, &__ts); }\n+      _M_clocklock(clockid_t __clockid, const __gthread_time_t& __ts)\n+      { return !pthread_mutex_clocklock(&_M_mutex, __clockid, &__ts); }\n #endif\n   };\n "}, {"sha": "0e47abed573e6f832ca5bf14de43e9ea409de1f5", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc79eba72b4d16180e500eba336f511a485a8496/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc79eba72b4d16180e500eba336f511a485a8496/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=dc79eba72b4d16180e500eba336f511a485a8496", "patch": "@@ -2328,10 +2328,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus > 202002L\n   template<typename... _TTypes, typename... _UTypes,\n-\t   template<typename> class TQual, template<typename> class UQual>\n-    requires requires { typename tuple<common_reference_t<TQual<_TTypes>, UQual<_UTypes>>...>; }\n-  struct basic_common_reference<tuple<_TTypes...>, tuple<_UTypes...>, TQual, UQual>\n-  { using type = tuple<common_reference_t<TQual<_TTypes>, UQual<_UTypes>>...>; };\n+\t   template<typename> class _TQual, template<typename> class _UQual>\n+    requires requires { typename tuple<common_reference_t<_TQual<_TTypes>, _UQual<_UTypes>>...>; }\n+  struct basic_common_reference<tuple<_TTypes...>, tuple<_UTypes...>, _TQual, _UQual>\n+  { using type = tuple<common_reference_t<_TQual<_TTypes>, _UQual<_UTypes>>...>; };\n \n   template<typename... _TTypes, typename... _UTypes>\n     requires requires { typename tuple<common_type_t<_TTypes, _UTypes>...>; }"}, {"sha": "d9b0e1bd42133a12318c9317efab6bd96aad2228", "filename": "libstdc++-v3/libsupc++/cxxabi_init_exception.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc79eba72b4d16180e500eba336f511a485a8496/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi_init_exception.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc79eba72b4d16180e500eba336f511a485a8496/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi_init_exception.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi_init_exception.h?ref=dc79eba72b4d16180e500eba336f511a485a8496", "patch": "@@ -67,8 +67,9 @@ namespace __cxxabiv1\n \n       // Initialize exception (this is a GNU extension)\n       __cxa_refcounted_exception*\n-      __cxa_init_primary_exception(void *object, std::type_info *tinfo,\n-                void (_GLIBCXX_CDTOR_CALLABI *dest) (void *)) _GLIBCXX_NOTHROW;\n+      __cxa_init_primary_exception(void *__object, std::type_info *__tinfo,\n+                void (_GLIBCXX_CDTOR_CALLABI *__dest) (void *))\n+\t_GLIBCXX_NOTHROW;\n \n     }\n } // namespace __cxxabiv1"}, {"sha": "afa749128f519e7da728116bf033a924068b42bb", "filename": "libstdc++-v3/testsuite/17_intro/names.cc", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc79eba72b4d16180e500eba336f511a485a8496/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fnames.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc79eba72b4d16180e500eba336f511a485a8496/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fnames.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fnames.cc?ref=dc79eba72b4d16180e500eba336f511a485a8496", "patch": "@@ -30,7 +30,7 @@\n #define F (\n #define G (\n #define H (\n-#define I (\n+// <complex.h> defines I\n #define J (\n #define K (\n #define L (\n@@ -108,9 +108,18 @@\n #endif\n #define z (\n \n+#define attributes (\n+#define bin_op (\n+#define clockid (\n #define func (\n-#define tmp (\n+#define max_val (\n+#define min_val (\n+#define object (\n+#define ostr (\n+#define policy (\n #define sz (\n+#define tinfo (\n+#define tmp (\n #define token (\n #define value_t (\n \n@@ -156,6 +165,7 @@\n #define Alloc\t\t\tAlloc is not a reserved name\n #define BinaryFunction1\t\tBinaryFunction1 is not a reserved name\n #define BinaryFunction2\t\tBinaryFunction2 is not a reserved name\n+#define BinaryOperation\t\tBinaryOperation is not a reserved name\n #define Char\t\t\tChar is not a reserved name\n #define CharT\t\t\tCharT is not a reserved name\n #define Cmp\t\t\tCmp is not a reserved name\n@@ -179,6 +189,7 @@\n #define H1\t\t\tH1 is not a reserved name\n #define H2\t\t\tH2 is not a reserved name\n #define Head\t\t\tHead is not a reserved name\n+#define IsVector\t\tIsVector is not a reserved name\n #define It\t\t\tIt is not a reserved name\n #define Iter\t\t\tIter is not a reserved name\n #define Iterator\t\tIterator is not a reserved name\n@@ -191,16 +202,22 @@\n #define Pointer\t\t\tPointer is not a reserved name\n #define Policy\t\t\tPolicy is not a reserved name\n #define Pred\t\t\tPred is not a reserved name\n+#define Proj\t\t\tProj is not a reserved name\n+#define Proj1\t\t\tProj1 is not a reserved name\n+#define Proj2\t\t\tProj2 is not a reserved name\n #define Ptr\t\t\tPtr is not a reserved name\n #define Reference\t\tReference is not a reserved name\n #define Seq\t\t\tSeq is not a reserved name\n #define Seq_RAIter\t\tSeq_RAIter is not a reserved name\n #define Series\t\t\tSeries is not a reserved name\n #define Set\t\t\tSet is not a reserved name\n+#define Size\t\t\tSize is not a reserved name\n #define String\t\t\tString is not a reserved name\n #define Tp\t\t\tTp is not a reserved name\n+#define TQual\t\t\tTQual is not a reserved name\n #define Traits\t\t\tTraits is not a reserved name\n #define Type\t\t\tType is not a reserved name\n+#define UQual\t\t\tUQual is not a reserved name\n #define Value\t\t\tValue is not a reserved name\n #define ValueT\t\t\tValueT is not a reserved name\n #define ValueType\t\tValueType is not a reserved name"}]}