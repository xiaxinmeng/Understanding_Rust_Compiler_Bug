{"sha": "f20ca7258739d74b12cf381293b10f72125732c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIwY2E3MjU4NzM5ZDc0YjEyY2YzODEyOTNiMTBmNzIxMjU3MzJjNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-04-12T10:44:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-04-12T10:44:15Z"}, "message": "re PR tree-optimization/46076 (constant propagation and compile-time math no longer happening versus 4.4 and 4.5)\n\n2011-04-12  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/46076\n\t* gimple.h (struct gimple_statement_call): Add fntype field.\n\t(gimple_call_fntype): Adjust.\n\t(gimple_call_set_fntype): New function.\n\t* gimple.c (gimple_build_call_1): Set the call function type.\n\t* gimplify.c (gimplify_call_expr): Preserve the function\n\ttype the frontend used for the call.\n\t(gimplify_modify_expr): Likewise.\n\t* lto-streamer-in.c (input_gimple_stmt): Input the call stmts\n\tfunction type.\n\t* lto-streamer-out.c (output_gimple_stmt): Output the call stmts\n\tfunction type.\n\t* tree-ssa.c (useless_type_conversion_p): Function pointer\n\tconversions are useless.\n\n\t* gcc.dg/tree-ssa/pr46076.c: Un-XFAIL.\n\nFrom-SVN: r172310", "tree": {"sha": "e792618dd649e3a0226cbeeef5d614d64ccfe552", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e792618dd649e3a0226cbeeef5d614d64ccfe552"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f20ca7258739d74b12cf381293b10f72125732c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f20ca7258739d74b12cf381293b10f72125732c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f20ca7258739d74b12cf381293b10f72125732c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f20ca7258739d74b12cf381293b10f72125732c5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "78a869ec7471a7c86d992a4cd3a506f5538995fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78a869ec7471a7c86d992a4cd3a506f5538995fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78a869ec7471a7c86d992a4cd3a506f5538995fc"}], "stats": {"total": 92, "additions": 68, "deletions": 24}, "files": [{"sha": "00108150bf402cb07f4b0f24faa51d28df2bd372", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20ca7258739d74b12cf381293b10f72125732c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20ca7258739d74b12cf381293b10f72125732c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f20ca7258739d74b12cf381293b10f72125732c5", "patch": "@@ -1,3 +1,20 @@\n+2011-04-12  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/46076\n+\t* gimple.h (struct gimple_statement_call): Add fntype field.\n+\t(gimple_call_fntype): Adjust.\n+\t(gimple_call_set_fntype): New function.\n+\t* gimple.c (gimple_build_call_1): Set the call function type.\n+\t* gimplify.c (gimplify_call_expr): Preserve the function\n+\ttype the frontend used for the call.\n+\t(gimplify_modify_expr): Likewise.\n+\t* lto-streamer-in.c (input_gimple_stmt): Input the call stmts\n+\tfunction type.\n+\t* lto-streamer-out.c (output_gimple_stmt): Output the call stmts\n+\tfunction type.\n+\t* tree-ssa.c (useless_type_conversion_p): Function pointer\n+\tconversions are useless.\n+\n 2011-04-12  Martin Jambor  <mjambor@suse.cz>\n \n \t* cgraph.h (cgraph_node): Remove function declaration."}, {"sha": "090fc94dd2f6df9edbefa8c80710ac89a7923de6", "filename": "gcc/gimple.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20ca7258739d74b12cf381293b10f72125732c5/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20ca7258739d74b12cf381293b10f72125732c5/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=f20ca7258739d74b12cf381293b10f72125732c5", "patch": "@@ -231,6 +231,7 @@ gimple_build_call_1 (tree fn, unsigned nargs)\n   if (TREE_CODE (fn) == FUNCTION_DECL)\n     fn = build_fold_addr_expr (fn);\n   gimple_set_op (s, 1, fn);\n+  gimple_call_set_fntype (s, TREE_TYPE (TREE_TYPE (fn)));\n   gimple_call_reset_alias_info (s);\n   return s;\n }"}, {"sha": "572cabcc57fb77263f755ecc2db30b534aac431b", "filename": "gcc/gimple.h", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20ca7258739d74b12cf381293b10f72125732c5/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20ca7258739d74b12cf381293b10f72125732c5/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=f20ca7258739d74b12cf381293b10f72125732c5", "patch": "@@ -405,7 +405,10 @@ struct GTY(()) gimple_statement_call\n   struct pt_solution call_used;\n   struct pt_solution call_clobbered;\n \n-  /* [ WORD 13 ]\n+  /* [ WORD 13 ]  */\n+  tree fntype;\n+\n+  /* [ WORD 14 ]\n      Operand vector.  NOTE!  This must always be the last field\n      of this structure.  In particular, this means that this\n      structure cannot be embedded inside another one.  */\n@@ -2001,22 +2004,33 @@ gimple_call_set_lhs (gimple gs, tree lhs)\n }\n \n \n-/* Return the tree node representing the function called by call\n-   statement GS.  */\n+/* Return the function type of the function called by GS.  */\n \n static inline tree\n-gimple_call_fn (const_gimple gs)\n+gimple_call_fntype (const_gimple gs)\n {\n   GIMPLE_CHECK (gs, GIMPLE_CALL);\n-  return gimple_op (gs, 1);\n+  return gs->gimple_call.fntype;\n }\n \n-/* Return the function type of the function called by GS.  */\n+/* Set the type of the function called by GS to FNTYPE.  */\n+\n+static inline void\n+gimple_call_set_fntype (gimple gs, tree fntype)\n+{\n+  GIMPLE_CHECK (gs, GIMPLE_CALL);\n+  gs->gimple_call.fntype = fntype;\n+}\n+\n+\n+/* Return the tree node representing the function called by call\n+   statement GS.  */\n \n static inline tree\n-gimple_call_fntype (const_gimple gs)\n+gimple_call_fn (const_gimple gs)\n {\n-  return TREE_TYPE (TREE_TYPE (gimple_call_fn (gs)));\n+  GIMPLE_CHECK (gs, GIMPLE_CALL);\n+  return gimple_op (gs, 1);\n }\n \n /* Return a pointer to the tree node representing the function called by call"}, {"sha": "47bcb821f71538371f06dc582d813af0581632c8", "filename": "gcc/gimplify.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20ca7258739d74b12cf381293b10f72125732c5/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20ca7258739d74b12cf381293b10f72125732c5/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=f20ca7258739d74b12cf381293b10f72125732c5", "patch": "@@ -2290,7 +2290,7 @@ gimplify_arg (tree *arg_p, gimple_seq *pre_p, location_t call_location)\n static enum gimplify_status\n gimplify_call_expr (tree *expr_p, gimple_seq *pre_p, bool want_value)\n {\n-  tree fndecl, parms, p;\n+  tree fndecl, parms, p, fnptrtype;\n   enum gimplify_status ret;\n   int i, nargs;\n   gimple call;\n@@ -2349,6 +2349,9 @@ gimplify_call_expr (tree *expr_p, gimple_seq *pre_p, bool want_value)\n \t}\n     }\n \n+  /* Remember the original function pointer type.  */\n+  fnptrtype = TREE_TYPE (CALL_EXPR_FN (*expr_p));\n+\n   /* There is a sequence point before the call, so any side effects in\n      the calling expression must occur before the actual call.  Force\n      gimplify_expr to use an internal post queue.  */\n@@ -2436,7 +2439,7 @@ gimplify_call_expr (tree *expr_p, gimple_seq *pre_p, bool want_value)\n \n   /* Verify the function result.  */\n   if (want_value && fndecl\n-      && VOID_TYPE_P (TREE_TYPE (TREE_TYPE (fndecl))))\n+      && VOID_TYPE_P (TREE_TYPE (TREE_TYPE (fnptrtype))))\n     {\n       error_at (loc, \"using result of function returning %<void%>\");\n       ret = GS_ERROR;\n@@ -2488,11 +2491,16 @@ gimplify_call_expr (tree *expr_p, gimple_seq *pre_p, bool want_value)\n \t have to do is replicate it as a GIMPLE_CALL tuple.  */\n       gimple_stmt_iterator gsi;\n       call = gimple_build_call_from_tree (*expr_p);\n+      gimple_call_set_fntype (call, TREE_TYPE (fnptrtype));\n       gimplify_seq_add_stmt (pre_p, call);\n       gsi = gsi_last (*pre_p);\n       fold_stmt (&gsi);\n       *expr_p = NULL_TREE;\n     }\n+  else\n+    /* Remember the original function type.  */\n+    CALL_EXPR_FN (*expr_p) = build1 (NOP_EXPR, fnptrtype,\n+\t\t\t\t     CALL_EXPR_FN (*expr_p));\n \n   return ret;\n }\n@@ -4607,7 +4615,11 @@ gimplify_modify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n     {\n       /* Since the RHS is a CALL_EXPR, we need to create a GIMPLE_CALL\n \t instead of a GIMPLE_ASSIGN.  */\n+      tree fnptrtype = TREE_TYPE (CALL_EXPR_FN (*from_p));\n+      CALL_EXPR_FN (*from_p) = TREE_OPERAND (CALL_EXPR_FN (*from_p), 0);\n+      STRIP_USELESS_TYPE_CONVERSION (CALL_EXPR_FN (*from_p));\n       assign = gimple_build_call_from_tree (*from_p);\n+      gimple_call_set_fntype (assign, TREE_TYPE (fnptrtype));\n       if (!gimple_call_noreturn_p (assign))\n \tgimple_call_set_lhs (assign, *to_p);\n     }"}, {"sha": "b250023143e9f22d9bf33e5a0397f70629151633", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20ca7258739d74b12cf381293b10f72125732c5/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20ca7258739d74b12cf381293b10f72125732c5/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=f20ca7258739d74b12cf381293b10f72125732c5", "patch": "@@ -1062,6 +1062,8 @@ input_gimple_stmt (struct lto_input_block *ib, struct data_in *data_in,\n \t      op = TREE_OPERAND (op, 0);\n \t    }\n \t}\n+      if (is_gimple_call (stmt))\n+\tgimple_call_set_fntype (stmt, lto_input_tree (ib, data_in));\n       break;\n \n     case GIMPLE_NOP:"}, {"sha": "a29cdd5fccf01bb7697156ebc933a1d442a2152b", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20ca7258739d74b12cf381293b10f72125732c5/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20ca7258739d74b12cf381293b10f72125732c5/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=f20ca7258739d74b12cf381293b10f72125732c5", "patch": "@@ -1759,6 +1759,8 @@ output_gimple_stmt (struct output_block *ob, gimple stmt)\n \t    }\n \t  lto_output_tree_ref (ob, op);\n \t}\n+      if (is_gimple_call (stmt))\n+\tlto_output_tree_ref (ob, gimple_call_fntype (stmt));\n       break;\n \n     case GIMPLE_NOP:"}, {"sha": "105a162f541749995d847662b9c56280a47ea87a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20ca7258739d74b12cf381293b10f72125732c5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20ca7258739d74b12cf381293b10f72125732c5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f20ca7258739d74b12cf381293b10f72125732c5", "patch": "@@ -1,3 +1,8 @@\n+2011-04-12  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/46076\n+\t* gcc.dg/tree-ssa/pr46076.c: Un-XFAIL.\n+\n 2011-04-12  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR testsuite/21164"}, {"sha": "a2777a604b9b8627f274d8124660f7c68ec78d32", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr46076.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20ca7258739d74b12cf381293b10f72125732c5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr46076.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20ca7258739d74b12cf381293b10f72125732c5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr46076.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr46076.c?ref=f20ca7258739d74b12cf381293b10f72125732c5", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do link } */\n /* { dg-options \"-O2\" } */\n \n-extern void link_error (void) { /* XFAIL */ }\n+extern void link_error (void);\n \n typedef unsigned char(*Calculable)(void);\n "}, {"sha": "4cd86c6781f6cb2a639ad96af440710924f32945", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20ca7258739d74b12cf381293b10f72125732c5/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20ca7258739d74b12cf381293b10f72125732c5/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=f20ca7258739d74b12cf381293b10f72125732c5", "patch": "@@ -1239,17 +1239,8 @@ useless_type_conversion_p (tree outer_type, tree inner_type)\n \t  && TYPE_RESTRICT (outer_type))\n \treturn false;\n \n-      /* If the outer type is (void *) or a pointer to an incomplete\n-\t record type or a pointer to an unprototyped function,\n-\t then the conversion is not necessary.  */\n-      if (VOID_TYPE_P (TREE_TYPE (outer_type))\n-\t  || ((TREE_CODE (TREE_TYPE (outer_type)) == FUNCTION_TYPE\n-\t       || TREE_CODE (TREE_TYPE (outer_type)) == METHOD_TYPE)\n-\t      && (TREE_CODE (TREE_TYPE (outer_type))\n-\t\t  == TREE_CODE (TREE_TYPE (inner_type)))\n-\t      && !prototype_p (TREE_TYPE (outer_type))\n-\t      && useless_type_conversion_p (TREE_TYPE (TREE_TYPE (outer_type)),\n-\t\t\t\t\t    TREE_TYPE (TREE_TYPE (inner_type)))))\n+      /* If the outer type is (void *), the conversion is not necessary.  */\n+      if (VOID_TYPE_P (TREE_TYPE (outer_type)))\n \treturn true;\n     }\n \n@@ -1305,8 +1296,8 @@ useless_type_conversion_p (tree outer_type, tree inner_type)\n       /* Do not lose casts to function pointer types.  */\n       if ((TREE_CODE (TREE_TYPE (outer_type)) == FUNCTION_TYPE\n \t   || TREE_CODE (TREE_TYPE (outer_type)) == METHOD_TYPE)\n-\t  && !useless_type_conversion_p (TREE_TYPE (outer_type),\n-\t\t\t\t\t TREE_TYPE (inner_type)))\n+\t  && !(TREE_CODE (TREE_TYPE (inner_type)) == FUNCTION_TYPE\n+\t       || TREE_CODE (TREE_TYPE (inner_type)) == METHOD_TYPE))\n \treturn false;\n \n       /* We do not care for const qualification of the pointed-to types"}]}