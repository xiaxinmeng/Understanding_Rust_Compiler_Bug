{"sha": "7f09067fef14f06c19e4625d089de69d05fef232", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YwOTA2N2ZlZjE0ZjA2YzE5ZTQ2MjVkMDg5ZGU2OWQwNWZlZjIzMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-06-25T01:23:17Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-06-25T01:23:17Z"}, "message": "random (class normal_distribution<>): Add.\n\n2006-06-24  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/random (class normal_distribution<>): Add.\n\t* include/tr1/random.tcc (normal_distribution<>::operator()): Define.\n\t\n\t* include/tr1/random.tcc (struct _Max): Remove, \"inline\" in the\n\tonly user, mersenne_twister<>::max().\n\n\t* include/tr1/random.tcc (struct _Shift): Move...\n\t* include/tr1/random: ... here.\n\n\t* include/tr1/random.tcc (linear_congruential<>::\n\tlinear_congruential(unsigned long), linear_congruential<>::\n\tlinear_congruential(_Gen&), mersenne_twister<>::max())): Move inline...\n\t* include/tr1/random: ... here.\n\n\t* include/tr1/random (exponential_distribution<>::\n\texponential_distribution(const result_type&)): Add missing\n\t_GLIBCXX_DEBUG_ASSERT.\n\n\t* testsuite/tr1/5_numerical_facilities/random/\n\texponential_distribution/requirements/typedefs.cc: New.\n\t* testsuite/tr1/5_numerical_facilities/random/\n\tnormal_distribution/requirements/typedefs.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/\n\tbernoulli_distribution/requirements/typedefs.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilities/random/\n\tgeometric_distribution/requirements/typedefs.cc: Likewise.\n\nFrom-SVN: r114982", "tree": {"sha": "efd9125c97aa7a75d3e6952f2bdde152fed6cd61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efd9125c97aa7a75d3e6952f2bdde152fed6cd61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f09067fef14f06c19e4625d089de69d05fef232", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f09067fef14f06c19e4625d089de69d05fef232", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f09067fef14f06c19e4625d089de69d05fef232", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f09067fef14f06c19e4625d089de69d05fef232/comments", "author": null, "committer": null, "parents": [{"sha": "762bd0488f42401559c0a3b161143f111921dce3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/762bd0488f42401559c0a3b161143f111921dce3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/762bd0488f42401559c0a3b161143f111921dce3"}], "stats": {"total": 387, "additions": 338, "deletions": 49}, "files": [{"sha": "6979a436842e9d8b3ad16d7c6a0ff58aba3e14c5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f09067fef14f06c19e4625d089de69d05fef232/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f09067fef14f06c19e4625d089de69d05fef232/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7f09067fef14f06c19e4625d089de69d05fef232", "patch": "@@ -1,3 +1,32 @@\n+2006-06-24  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/random (class normal_distribution<>): Add.\n+\t* include/tr1/random.tcc (normal_distribution<>::operator()): Define.\n+\t\n+\t* include/tr1/random.tcc (struct _Max): Remove, \"inline\" in the\n+\tonly user, mersenne_twister<>::max().\n+\n+\t* include/tr1/random.tcc (struct _Shift): Move...\n+\t* include/tr1/random: ... here.\n+\n+\t* include/tr1/random.tcc (linear_congruential<>::\n+\tlinear_congruential(unsigned long), linear_congruential<>::\n+\tlinear_congruential(_Gen&), mersenne_twister<>::max())): Move inline...\n+\t* include/tr1/random: ... here.\n+\n+\t* include/tr1/random (exponential_distribution<>::\n+\texponential_distribution(const result_type&)): Add missing\n+\t_GLIBCXX_DEBUG_ASSERT.\n+\n+\t* testsuite/tr1/5_numerical_facilities/random/\n+\texponential_distribution/requirements/typedefs.cc: New.\n+\t* testsuite/tr1/5_numerical_facilities/random/\n+\tnormal_distribution/requirements/typedefs.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/\n+\tbernoulli_distribution/requirements/typedefs.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilities/random/\n+\tgeometric_distribution/requirements/typedefs.cc: Likewise.\n+\n 2006-06-23  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/27984"}, {"sha": "7eb8f670b75ac65f46bc76a38074ee9f09d52eb1", "filename": "libstdc++-v3/include/tr1/random", "status": "modified", "additions": 118, "deletions": 4, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f09067fef14f06c19e4625d089de69d05fef232/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f09067fef14f06c19e4625d089de69d05fef232/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=7f09067fef14f06c19e4625d089de69d05fef232", "patch": "@@ -124,6 +124,15 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       \treturn __return_value;\n       }\n \n+    template<typename _UIntType, int __w, bool = \n+\t     __w != std::numeric_limits<_UIntType>::digits>\n+      struct _Shift\n+      { static const _UIntType __value = 0; };\n+\n+    template<typename _UIntType, int __w>\n+      struct _Shift<_UIntType, __w, true>\n+      { static const _UIntType __value = _UIntType(1) << __w; };\n+\n   } // namespace std::tr1::_Private\n \n \n@@ -301,7 +310,9 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        *\n        * @param __s The initial seed value.\n        */\n-      explicit linear_congruential(unsigned long __s = 1);\n+      explicit\n+      linear_congruential(unsigned long __x0 = 1)\n+      { this->seed(__x0); }\n \n       /**\n        * Constructs a %linear_congruential random number generator engine\n@@ -310,7 +321,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        * @param __g The seed generator function.\n        */\n       template<class _Gen>\n-        linear_congruential(_Gen& __g);\n+        linear_congruential(_Gen& __g)\n+        { this->seed(__g); }\n \n       /**\n        * Reseeds the %linear_congruential random number generator engine\n@@ -513,7 +525,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       { return 0; };\n \n       result_type\n-      max() const;\n+      max() const\n+      { return _Private::_Shift<_UIntType, __w>::__value - 1; }\n \n       result_type\n       operator()();\n@@ -1657,7 +1670,10 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        */\n       explicit\n       exponential_distribution(const result_type& __lambda = result_type(1))\n-      : _M_lambda(__lambda) { }\n+      : _M_lambda(__lambda)\n+      { \n+\t_GLIBCXX_DEBUG_ASSERT(_M_lambda > 0);\n+      }\n \n       /**\n        * Gets the inverse scale parameter of the distribution.\n@@ -1714,6 +1730,104 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       result_type _M_lambda;\n     };\n \n+\n+  /**\n+   * @brief A normal continuous distribution for random numbers.\n+   *\n+   * The formula for the normal probability mass function is \n+   * @f$ p(x) = \\frac{1}{\\sigma \\sqrt{2 \\pi}} \n+   *            e^{- \\frac{{x - mean}^ {2}}{2 \\sigma ^ {2}} } @f$.\n+   */\n+  template<typename _RealType = double>\n+    class normal_distribution\n+    {\n+    public:\n+      // types\n+      typedef _RealType input_type;\n+      typedef _RealType result_type;\n+\n+    public:\n+      /**\n+       * Constructs a normal distribution with parameters @f$ mean @f$ and\n+       * @f$ \\sigma @f$.\n+       */\n+      explicit\n+      normal_distribution(const result_type& __mean = result_type(0),\n+\t\t\t  const result_type& __sigma = result_type(1))\n+      : _M_mean(__mean), _M_sigma(__sigma), _M_saved_available(false)\n+      { \n+\t_GLIBCXX_DEBUG_ASSERT(_M_sigma > 0);\n+      }\n+\n+      /**\n+       * Gets the mean of the distribution.\n+       */\n+      _RealType\n+      mean() const\n+      { return _M_mean; }\n+\n+      /**\n+       * Gets the @f$ \\sigma @f$ of the distribution.\n+       */\n+      _RealType\n+      sigma() const\n+      { return _M_sigma; }\n+\n+      /**\n+       * Resets the distribution.\n+       */\n+      void\n+      reset()\n+      { _M_saved_available = false; }\n+\n+      template<class _UniformRandomNumberGenerator>\n+        result_type\n+        operator()(_UniformRandomNumberGenerator& __urng);\n+\n+      /**\n+       * Inserts a %normal_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %normal_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _CharT, typename _Traits>\n+        friend std::basic_ostream<_CharT, _Traits>&\n+        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const normal_distribution& __x)\n+        { \n+\t  return __os << __x.mean() << \" \" << __x.sigma()\n+\t\t      << \" \" << __x._M_saved << \" \" << __x._M_saved_available;\n+\t}\n+\n+      /**\n+       * Extracts a %normal_distribution random number distribution\n+       * @p __u from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __u  A %normal_distribution random number generator engine.\n+       *\n+       * @returns The input stream with @p __u extracted or in an error state.\n+       */\n+      template<typename _CharT, typename _Traits>\n+        friend std::basic_istream<_CharT, _Traits>&\n+        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   normal_distribution& __u)\n+        {\n+\t  return __is >> __u._M_mean >> __u._M_sigma\n+\t\t      >> __u._M_saved >> __u._M_saved_available;\n+\t}\n+\n+    private:\n+      result_type _M_mean;\n+      result_type _M_sigma;\n+      result_type _M_saved;\n+      bool        _M_saved_available;     \n+    };\n+\n   /* @} */ // group tr1_random_distributions_continuous\n   /* @} */ // group tr1_random_distributions\n   /* @} */ // group tr1_random"}, {"sha": "d4f2464b90d4f220bf8b1d93a528e085cd30db5c", "filename": "libstdc++-v3/include/tr1/random.tcc", "status": "modified", "additions": 42, "deletions": 44, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f09067fef14f06c19e4625d089de69d05fef232/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f09067fef14f06c19e4625d089de69d05fef232/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc?ref=7f09067fef14f06c19e4625d089de69d05fef232", "patch": "@@ -27,8 +27,6 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include <limits>\n-\n namespace std\n {\n _GLIBCXX_BEGIN_NAMESPACE(tr1)\n@@ -96,40 +94,9 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       __mod(_Tp __x)\n       { return _Mod<_Tp, __a, __c, __m, __m == 0>::__calc(__x); }\n \n-    template<typename _UIntType, int __w, bool = \n-\t     __w != std::numeric_limits<_UIntType>::digits>\n-      struct _Shift\n-      { static const _UIntType __value = 0; };\n-\n-    template<typename _UIntType, int __w>\n-      struct _Shift<_UIntType, __w, true>\n-      { static const _UIntType __value = _UIntType(1) << __w; };\n-\n-    // The maximum value that will fit in @p __w bits of @p _UIntType.\n-    template<typename _UIntType, int __w>\n-      struct _Max\n-      { static const _UIntType __value = _Shift<_UIntType, __w>::__value - 1; };\n-\n   } // namespace _Private\n \n \n-  /**\n-   * Constructs the LCR engine with integral seed @p __x0.\n-   */\n-  template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n-    linear_congruential<_UIntType, __a, __c, __m>::\n-    linear_congruential(unsigned long __x0)\n-    { this->seed(__x0); }\n-\n-  /**\n-   * Constructs the LCR engine with seed generated from @p __g.\n-   */\n-  template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n-    template<class _Gen>\n-      linear_congruential<_UIntType, __a, __c, __m>::\n-      linear_congruential(_Gen& __g)\n-      { this->seed(__g); }\n-\n   /**\n    * Seeds the LCR with integral value @p __x0, adjusted so that the \n    * ring identity is never a member of the convergence set.\n@@ -239,17 +206,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t_M_p = state_size;\n       }\n \n-  template<class _UIntType, int __w, int __n, int __m, int __r,\n-\t   _UIntType __a, int __u, int __s,\n-\t   _UIntType __b, int __t, _UIntType __c, int __l>\n-    typename\n-    mersenne_twister<_UIntType, __w, __n, __m, __r, __a, __u, __s,\n-\t\t     __b, __t, __c, __l>::result_type\n-    mersenne_twister<_UIntType, __w, __n, __m, __r, __a, __u, __s,\n-\t\t     __b, __t, __c, __l>::\n-    max() const\n-    { return _Private::_Max<_UIntType, __w>::__value; }\n-\n   template<class _UIntType, int __w, int __n, int __m, int __r,\n \t   _UIntType __a, int __u, int __s,\n \t   _UIntType __b, int __t, _UIntType __c, int __l>\n@@ -396,5 +352,47 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return _M_b();\n     }\n \n+\n+  /**\n+   * Classic Box-Muller method.\n+   *\n+   * Reference:\n+   * Box, G. E. P. and Muller, M. E. \"A Note on the Generation of\n+   * Random Normal Deviates.\" Ann. Math. Stat. 29, 610-611, 1958.\n+   */\n+  template<typename _RealType>\n+    template<class _UniformRandomNumberGenerator>\n+      typename normal_distribution<_RealType>::result_type\n+      normal_distribution<_RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng)\n+      {\n+\tresult_type __ret;\n+\n+\tif (_M_saved_available)\n+\t  {\n+\t    _M_saved_available = false;\n+\t    __ret = _M_saved;\n+\t  }\n+\telse\n+\t  {\n+\t    result_type __x, __y, __r2;\n+\t    do\n+\t      {\n+\t\t__x = result_type(2.0) * __urng() - result_type(1.0);\n+\t\t__y = result_type(2.0) * __urng() - result_type(1.0);\n+\t\t__r2 = __x * __x + __y * __y;\n+\t      }\n+\t    while (__r2 > result_type(1.0) || __r2 == result_type(0));\n+\n+\t    const result_type __mult = std::sqrt(-result_type(2.0)\n+\t\t\t\t\t\t * std::log(__r2) / __r2);\n+\t    _M_saved = __x * __mult;\n+\t    _M_saved_available = true;\n+\t    __ret = __y * __mult;\n+\t  }\n+\n+\treturn __ret * _M_sigma + _M_mean;\n+      }\n+\n _GLIBCXX_END_NAMESPACE\n }"}, {"sha": "aca11a438537032a7cc7eb1a80a3a54707493a8a", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/bernoulli_distribution/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f09067fef14f06c19e4625d089de69d05fef232/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fbernoulli_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f09067fef14f06c19e4625d089de69d05fef232/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fbernoulli_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fbernoulli_distribution%2Frequirements%2Ftypedefs.cc?ref=7f09067fef14f06c19e4625d089de69d05fef232", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do compile }\n+//\n+// 2006-06-24  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.7.2 Class template bernoulli_distribution [tr.rand.dist.bern]\n+// 5.1.1 [7] Table 17\n+\n+#include <tr1/random>\n+\n+void\n+test01() \n+{ \n+  using namespace std::tr1;\n+\n+  typedef bernoulli_distribution test_type;\n+\n+  typedef test_type::input_type  input_type;\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "1bc5b3f8dffd583cdfa14bf12df084e1a7bb7f31", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/exponential_distribution/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f09067fef14f06c19e4625d089de69d05fef232/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fexponential_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f09067fef14f06c19e4625d089de69d05fef232/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fexponential_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fexponential_distribution%2Frequirements%2Ftypedefs.cc?ref=7f09067fef14f06c19e4625d089de69d05fef232", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do compile }\n+//\n+// 2006-06-24  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.7.7 Class template exponential_distribution [tr.rand.dist.exp]\n+// 5.1.1 [7] Table 17\n+\n+#include <tr1/random>\n+\n+void\n+test01() \n+{ \n+  using namespace std::tr1;\n+\n+  typedef exponential_distribution<double> test_type;\n+\n+  typedef test_type::input_type  input_type;\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "525ca64556ff746763b132834bc1258f309fd456", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/geometric_distribution/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f09067fef14f06c19e4625d089de69d05fef232/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fgeometric_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f09067fef14f06c19e4625d089de69d05fef232/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fgeometric_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fgeometric_distribution%2Frequirements%2Ftypedefs.cc?ref=7f09067fef14f06c19e4625d089de69d05fef232", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do compile }\n+//\n+// 2006-06-24  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.7.3 Class template geometric_distribution [tr.rand.dist.geom]\n+// 5.1.1 [7] Table 17\n+\n+#include <tr1/random>\n+\n+void\n+test01() \n+{ \n+  using namespace std::tr1;\n+\n+  typedef geometric_distribution<int, double> test_type;\n+\n+  typedef test_type::input_type  input_type;\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "22094646c37d438172fc3656ee2744c55d0a8246", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/normal_distribution/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f09067fef14f06c19e4625d089de69d05fef232/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fnormal_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f09067fef14f06c19e4625d089de69d05fef232/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fnormal_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fnormal_distribution%2Frequirements%2Ftypedefs.cc?ref=7f09067fef14f06c19e4625d089de69d05fef232", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do compile }\n+//\n+// 2006-06-24  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.7.8 Class template normal_distribution [tr.rand.dist.norm]\n+// 5.1.1 [7] Table 17\n+\n+#include <tr1/random>\n+\n+void\n+test01() \n+{ \n+  using namespace std::tr1;\n+\n+  typedef normal_distribution<double> test_type;\n+\n+  typedef test_type::input_type  input_type;\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "65bcbd7f3bad7f54c35afe595a7ed4dcbcc651e5", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/uniform_real/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f09067fef14f06c19e4625d089de69d05fef232/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Funiform_real%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f09067fef14f06c19e4625d089de69d05fef232/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Funiform_real%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Funiform_real%2Frequirements%2Ftypedefs.cc?ref=7f09067fef14f06c19e4625d089de69d05fef232", "patch": "@@ -20,7 +20,7 @@\n // Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n // USA.\n \n-// 5.1.7.6 Class template uniform_int [tr.rand.dist.runif]\n+// 5.1.7.6 Class template uniform_real [tr.rand.dist.runif]\n // 5.1.1 [7] Table 17\n \n #include <tr1/random>"}]}