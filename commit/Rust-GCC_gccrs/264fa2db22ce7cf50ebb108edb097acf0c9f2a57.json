{"sha": "264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY0ZmEyZGIyMmNlN2NmNTBlYmIxMDhlZGIwOTdhY2YwYzlmMmE1Nw==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2003-09-25T01:26:01Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2003-09-25T01:26:01Z"}, "message": "MERGE OF objc-improvements-branch into MAINLINE.\n\n2003-09-24  Ziemowit Laski  <zlaski@apple.com>\n\n        MERGE OF objc-improvements-branch into MAINLINE.\n\tSee 'gcc/ChangeLog' and 'gcc/testsuite/ChangeLog' for\n\tthe gory details.\n\nFrom-SVN: r71748", "tree": {"sha": "1052b4d25cc404c17e6402e22b8183026f4d4263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1052b4d25cc404c17e6402e22b8183026f4d4263"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/comments", "author": null, "committer": null, "parents": [{"sha": "3b6fdb2fa04453ebf17ec1dfd3ef62b413442430", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b6fdb2fa04453ebf17ec1dfd3ef62b413442430", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b6fdb2fa04453ebf17ec1dfd3ef62b413442430"}], "stats": {"total": 7243, "additions": 5749, "deletions": 1494}, "files": [{"sha": "b869d0b9d9328a195486dbd86f6089bbf843f59c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 229, "deletions": 0, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -1,3 +1,232 @@\n+2003-09-24  Ziemowit Laski  <zlaski@apple.com>\n+\n+\tMERGE OF objc-improvements-branch into MAINLINE:\n+\t* Makefile.in (C_OBJS): Add in stub-objc.o.\n+\t(c-parse.y): Change sed demarcations to begin with '@@'.\n+\t(stub-objc.o): New rule.\n+\t* c-common.c (flag_nil_receivers, flag_objc_exceptions, flag_zero_link,\n+\tflag_replace_objc_classes): New flags.\n+\t* c-common.h (RID_AT_THROW, RID_AT_TRY, RID_AT_CATCH, RID_AT_FINALLY,\n+\tRID_AT_SYNCHRONIZED): New keywords.\n+\t(flag_nil_receivers, flag_objc_exceptions, flag_zero_link,\n+\tflag_replace_objc_classes): New flags.\n+\t(lookup_interface, is_class_name, objc_is_object_ptr, objc_check_decl,\n+\tobjc_comptypes, objc_message_selector, lookup_objc_ivar,\n+\tget_current_scope, objc_mark_locals_volatile): New prototypes,\n+\tsome moved from c-tree.h.\n+\t* c-decl.c (get_current_scope, objc_mark_locals_volatile): New functions.\n+\t(finish_decl): Adjust where objc_check_decl() gets called.\n+\t* c-lang.c (lookup_interface, is_class_name, objc_is_id,  objc_check_decl,\n+\tobjc_comptypes, objc_message_selector, lookup_objc_ivar): Remove stubs.\n+\t* c-opts.c (c_common_handle_option): Add handling for  flag_nil_receivers,\n+\tflag_objc_exceptions, flag_replace_objc_classes and flag_zero_link.\n+\t* c-parse.in: Replace 'ifc' and 'end ifc' sed markers with '@@ifc' and\n+\t'@@end_ifc', respectively.\n+\t(AT_THROW, AT_TRY, AT_CATCH, AT_FINALLY, AT_SYNCHRONIZED): New %tokens.\n+\t(objc_try_stmt, superclass, class_ivars, objc_try_catch-stmt,\n+\tobjc_finally_block): New rules.\n+\t(component_decl_list2): Clean up semantic action for @defs construct.\n+\t(component_decl, c99_block_start): Remove call to add_objc_decls().\n+\t(poplevel): Add call to objc_clear_super_receiver().\n+\t(stmt): Add rules for @throw, @try..@catch..@finally and @synchronized\n+\tconstructs.\n+\t(classdef, methodprotolist): Clean up/simplify.\n+\t(methodprotolist2): Eliminate.\n+\t(methodproto): Call add_method() instead of add_class_method() and\n+\tadd_instance_method().\n+\t(receiver): Add TYPENAME production.\n+\t(reswords): Add \"throw\", \"try\", \"catch\", \"finally\" and \"synchronized\".\n+\t(rid_to_yy): Add AT_THROW, AT_TRY, AT_CATCH, AT_FINALLY and\n+\tAT_SYNCHRONIZED.\n+\t* c-tree.h (lookup_interface, is_class_name, objc_is_id, objc_check_decl,\n+\tobjc_comptypes, objc_message_selector)\n+\t* c-typeck.c (comptypes): In ObjC mode, call objc_comptypes() for\n+\tstruct and pointer types.\n+\t(build_c_cast): Do not discard ObjC protocol qualifiers.\n+\t(convert_for_assignment): Cache result of comp_target_types() instead\n+\tof calling it more than once.\n+\t* c.opt (fnext-runtime): Update description string.\n+\t(fnil-receivers, fobjc-exceptions, freplace-objc-classes, fzero-link):\n+\tNew ObjC/ObjC++-specific flags.\n+\t* function.h (GCC_FUNCTION_H): Header guard.\n+\t* gengtype-lex.l: Teach lexer about new @@... sed demarcations.\n+\t* stub-objc.c: New file, to be used to satisfy references to ObjC\n+\tfunctions by the C and C++ front-ends.\n+\t* config/darwin.c (_OBJC_IMAGE_INFO): New global metadata.\n+\t* config/darwin.h (FUNCTION): Add in_objc_image_info.\n+\t(SECTION_FUNCTION): Add objc_image_info_section.\n+\t* doc/invoke.texi: Link to GCC web site for Objective-C information.\n+\t(-fconstant-string-class): Update documentation.\n+\t(-fno-nil-receivers, -fobjc-exceptions, -freplace-objc-classes,\n+\t-fzero-link): New documentation.\n+\t* objc/Make-lang.in (objc-parse.y): Change sed demarcations to begin\n+\twith '@@'.\n+\t* objc/lang-specs.h (@objective-c-header): Fix -E spec.\n+\t* objc/objc/objc-act.c: Replace TYPE_NAME with OBJC_TYPE_NAME\n+\tthroughout; provide casts for return values from memory allocation\n+\tfunctions (xmalloc, alloca, ggc_alloc, etc.).\n+\t(OBJC_VOID_AT_END): New macro.\n+\t(rtl.h): Do not #include any more.\n+\t(STRING_OBJECT_GLOBAL_NAME): Replaced with STRING_OBJECT_GLOBAL_FORMAT.\n+\t(TAG_MSGSEND_STRET, TAG_MSGSENDSUPER_STRET, TAG_MSGSEND_NONNIL,\n+\tTAG_MSGSEND_NONNIL_STRET, TAG_EXCEPTIONEXTRACT, TAG_EXCEPTIONTRYENTER,\n+\tTAG_EXCEPTIONTRYEXIT, TAG_EXCEPTIONMATCH, TAG_EXCEPTIONTHROW,\n+\tTAG_SYNCENTER, TAG_SYNCEXIT): New NeXT runtime entry points.\n+\t(struct val_stack, catch_count_stack, exc_binding_stack,  val_stack_push,\n+\tval_stack_pop): New.\n+\t(objc_check_decl): Fix precondition for error message, along with\n+\tthe message itself.\n+\t(lookup_and_install_protocols): Remove nonexistent protocols from\n+\tprotocol list instead of returning error_mark_node.\n+\t(create_builtin_decl): Use DECL_ARTIFICIAL only for VAR_DECLs.\n+\t(setup_string_decl): Generalize to use STRING_OBJECT_GLOBAL_FORMAT.\n+\t(synth_module_prologue): General clean-up; construct NeXT-specific\n+\truntime API prototypes if needed.\n+\t(build_string_class_template): Remove.\n+\t(check_string_class_template, string_layout_checked): New.\n+\t(build_objc_string_object): Generalize to work with\n+\t-fconstant-string-class.\n+\t(build_objc_symtab_template): Fix layout for the NeXT runtime.\n+\t(build_metadata_decl): New.\n+\t(forward_declare_categories): Call build_metadata_decl() instead of\n+\tcreate_builtin_decl() et al.\n+\t(build_module_descriptor): Use OBJC_VOID_AT_END instead of\n+\tvoid_list_node_1.\n+\t(build_selector_reference_decl, build_class_reference_decl,\n+\tbuild_objc_string_decl): Do not set TREE_READONLY.\n+\t(get_proto_encoding): Do not call hack_method_prototype().\n+\t(get_class_reference): Add failure mode for invalid class names;\n+\tsupport -fzero-link; defer if in an ObjC++ template declaration.\n+\t(objc_declare_alias, objc_declare_class): Fix up duplicate name\n+\tlookup; check for global scope if in ObjC++.\n+\t(is_class_name): Generalize to work with various tree nodes (TYPE_DECL,\n+\tRECORD_TYPE, IDENTIFIER_NODE, etc.)\n+\t(objc_is_id): Removed.\n+\t(objc_is_object_ptr): New function.\n+\t(get_class_ivars_from_name): New function, used for @defs construct.\n+\t(get_class_ivars): Add option to return raw ivars; create a\n+\tClASS_OWN_IVARS list for each class as needed.\n+\t(objc_enter_block, objc_exit_block, objc_declare_variable,\n+\tobjc_build_throw_stmt, val_stack_push, val_stack_pop,\n+\tobjc_build_try_enter_fragment, objc_build_extract_expr,\n+\tobjc_build_try_exit_fragment, objc_build_extract_fragment,\n+\tobjc_build_try_prologue, objc_build_try_epilogue,\n+\tobjc_build_catch_stmt, objc_build_catch_epilogue,\n+\tobjc_build_finally_prologue, objc_build_finally_epilogue,\n+\tobjc_build_try_catch_finally_stmt, objc_build_synchronized_prologue,\n+\tobjc_build_synchronized_epilogue, build_objc_exception_stuff):\n+\tNew functions.\n+\t(_JBLEN): _setjmp jmpbuf size (needs to be made a target hook in\n+\tthe future).\n+\t(build_private_template): Fix up calls to get_class_ivars().\n+\t(offset_is_register, forwarding_offset): Remove.\n+\t(objc_method_parm_type, objc_encoded_type_size): New functions.\n+\t(encode_method_prototype): Simplify to no longer depend on\n+\tback-end information.\n+\t(build_tmp_function_decl_xxx, build_tmp_function_decl,\n+\thack_method_prototype): Removed.\n+\t(generate_protocol_references): Remove calls to\n+\tbuild_tmp_function_decl().\n+\t(generate_protocols): Adjust calls to encode_method_prototype().\n+\t(build_class_template): Generate sel_id' and 'gc_object_type' fields\n+\tfor the NeXT runtime.\n+\t(synth_forward_declarations): Call build_metadata_decl().\n+\t(check_ivars): Check that the number of ivars matches also.\n+\t(build_super_template): Modify super_type directly; disable debugging\n+\toutput while generating decl.\n+\t(build_ivar_list_initializer): Skip list elements that are not\n+\tFIELD_DECLs.\n+\t(ivar_list_length): New function.\n+\t(generate_ivar_lists): Call ivar_list_length() instead of list_length()\n+\tand encode_method_prototype() instead of encode_method_def().\n+\t(build_shared_structure_initializer): Generate 'sel_id' field for\n+\tthe NeXT runtime.\n+\t(generate_category): Do not set TREE_USED.\n+\t(build_keyword_selector): Ditto; transform into a function argument\n+\tchain.\n+\t(get_arg_type_list): If there are no user-specified arguments, use\n+\t'...'; use OBJC_VOID_AT_END.\n+\t(check_duplicates): Add a parameter indicating whether methods or\n+\tselectors are being checked.\n+\t(receiver_is_class_object): Add parameters indicating whether\n+\treceiver is 'self' or 'super'; robustify.\n+\t(build_message_expr): Defer call to finish_message_expr() if\n+\tinside an ObjC++ template.\n+\t(lookup_method_in_hash_lists): New function.\n+\t(finish_message_expr): Complete rewrite/fix.\n+\t(build_objc_method_call): Ditto; factor out commonalities between\n+\tthe GNU and NeXT runtimes; acccommodate ..._stret and ...NonNil\n+\tmessenger variants on the NeXT.\n+\t(lookup_instance_method_static, lookup_class_method_static):\n+\tFold into a single lookup_method_static() function with an\n+\tadditional parameter.\n+\t(add_class_method, add_instance_method): Fold into a single\n+\tadd_method() function with an additional parameter.\n+\t(add_category): Make duplicate categories a hard error in ObjC++.\n+\t(add_instance_variable): Properly handle unnamed ivars, arrays of\n+\tzero or no size and bitfields.  In ObjC++, check for nontrivial\n+\tC++ class instances.\n+\t(is_public): Allow C functions to access non-@public ivars, with\n+\ta warning.\n+\t(start_class): Move common initializations to\n+\tsynth_module_prologue(); check for global scope if in ObjC++.\n+\t(continue_class): Fix calls to finish_struct().\n+\t(objc_declare_protocols, start_protocol): Check for global scope\n+\tif in ObjC++.\n+\t(encode_pointer): Encode 'BOOL *' specially on the NeXT.\n+\t(encode_aggregate_within): Rewrite to properly distinguish\n+\tstruct tags from typedefs in both ObjC and ObjC++.\n+\t(encode_bitfield, encode_complete_bitfield): Remove.\n+\t(encode_next_bitfield, encode_gnu_bitfield): New functions.\n+\t(encode_field_decl): Call encode_next_bitfield() or\n+\tencode_gnu_bitfield() as needed.\n+\t(synth_self_and_ucmd_args): New function.\n+\t(start_method_def): Use it.\n+\t(objc_types_are_equivalent): New function.\n+\t(comp_proto_with_proto): Use it instead of comptypes(), since\n+\twe need symmetry.\n+\t(really_start_method): Use lookup_method_static() instead of\n+\tlookup_class_method_static() and lookup_instance_method_static();\n+\tEmit 'extern \"C\"' if in ObjC++ mode.\n+\t(add_objc_decls): Removed.\n+\t(UOBJC_SUPER_scope): New variable.\n+\t(get_super_receiver): Move construction of 'super' from\n+\tadd_objc_decls(); remove dependency on struct objc_class.\n+\t(encode_method_def): Removed; encode_method_prototype() is\n+\tused instead.\n+\t(objc_clear_super_receiver): New function.\n+\t(objc_expand_function_end): Do not do anything for ordinary\n+\tC functions.\n+\t(finish_method_def): Mark ObjC methods as un-inlinable.\n+\t(gen_declaration_1): Emit widths of bitfields.\n+\t(finish_objc): Call generate_objc_image_info() if needed;\n+\tuse check_duplicates() when checking for selector duplicates.\n+\t(generate_objc_image_info): New function.\n+\t* objc/objc-act.h (add_instance_method, add_class_method,\n+\tget_class_ivars): Remove prototypes.\n+\t(objc_build_throw_stmt, objc_build_try_catch_finally_stmt,\n+\tobjc_build_synchronized_prologue, objc_build_synchronized_epilogue,\n+\tobjc_build_catch_stmt, objc_build_catch_epilogue,\n+\tobjc_build_finally_prologue, objc_build_finally_epilogue,\n+\tadd_method, get_class_ivars_from_name): New prototypes.\n+\t(CLASS_BINFO_ELTS, PROTOCOL_BINFO_ELTS): New.\n+\t(TYPE_PROTOCOL_LIST): Robustify to distinguish from\n+\tTRANSLATION_UNIT_DECLs.\n+\t(OBJC_TYPE_NAME): New.\n+\t(objc_tree_code): Ensure that either <c-tree.h> or <cp/cp-tree.h>\n+\tgot included.\n+\t(IS_SUPER): Robustify.\n+\t(umsg_stret_decl, umsg_super_stret_decl, umsg_nonnil_decl,\n+\tumsg_nonnil_stret_decl, objc_storage_class, objc_exception_extract_decl,\n+\tobjc_exception_try_enter_decl, objc_exception_try_exit_decl,\n+\tobjc_exception_match_decl, objc_exception_throw_decl,\n+\tobjc_sync_enter_decl, objc_sync_exit_decl, objc_exception_data_template,\n+\tobjc_setjmp_decl, objc_stack_exception_data, objc_caught_exception,\n+\tobjc_rethrow_exception, objc_eval_once, objc_exception_block_stack,\n+\tobjc_catch_type): New ObjC/ObjC++ roots.\n+\t* objc/objc-tree.def (MESSAGE_SEND_EXPR, CLASS_REFERENCE_EXPR): New\n+\tObjC/ObjC++ tree node codes.\n+ \n 2003-09-24  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* cpplib.c (do_pragma): Reintroduce cb_line_change call in the"}, {"sha": "962951c9a86740965eef2992d73939e09735d3c1", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -821,7 +821,7 @@ C_AND_OBJC_OBJS = attribs.o c-errors.o c-lex.o c-pragma.o c-decl.o c-typeck.o \\\n   c-objc-common.o c-dump.o c-pch.o libcpp.a $(C_TARGET_OBJS)\n \n # Language-specific object files for C.\n-C_OBJS = c-parse.o c-lang.o c-pretty-print.o $(C_AND_OBJC_OBJS)\n+C_OBJS = c-parse.o c-lang.o c-pretty-print.o stub-objc.o $(C_AND_OBJC_OBJS)\n \n # Language-independent object files.\n \n@@ -1263,8 +1263,8 @@ $(parsedir)/c-parse.c: $(parsedir)/c-parse.y\n \n $(parsedir)/c-parse.y: c-parse.in\n \techo '/*WARNING: This file is automatically generated!*/' >tmp-c-parse.y\n-\tsed -e \"/^ifobjc$$/,/^end ifobjc$$/d\" \\\n-\t  -e \"/^ifc$$/d\" -e \"/^end ifc$$/d\" \\\n+\tsed -e \"/^@@ifobjc.*/,/^@@end_ifobjc.*/d\" \\\n+\t  -e \"/^@@ifc.*/d\" -e \"/^@@end_ifc.*/d\" \\\n \t  $(srcdir)/c-parse.in >>tmp-c-parse.y\n \t$(SHELL) $(srcdir)/move-if-change tmp-c-parse.y $(parsedir)/c-parse.y\n \n@@ -1281,6 +1281,7 @@ c-typeck.o : c-typeck.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(\n c-lang.o : c-lang.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(C_TREE_H) $(C_PRETTY_PRINT_H) $(DIAGNOSTIC_H) \\\n     $(GGC_H) langhooks.h $(LANGHOOKS_DEF_H) $(C_COMMON_H) gtype-c.h\n+stub-objc.o : stub-objc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) $(C_COMMON_H)\n c-lex.o : c-lex.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(RTL_H) debug.h $(C_TREE_H) $(C_COMMON_H) real.h c-incpath.h cppdefault.h \\\n     c-pragma.h input.h intl.h flags.h toplev.h output.h \\"}, {"sha": "cef633aac88214169be52d3fd97e842477a3bc39", "filename": "gcc/c-common.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -346,7 +346,25 @@ int warn_format_nonliteral;\n \n int warn_format_security;\n \n-\n+/* Zero means that faster, ...NonNil variants of objc_msgSend...\n+   calls will be used in ObjC; passing nil receivers to such calls\n+   will most likely result in crashes.  */\n+int flag_nil_receivers = 1;\n+\n+/* Nonzero means that we will allow new ObjC exception syntax (@throw,\n+   @try, etc.) in source code.  */\n+int flag_objc_exceptions = 0;\n+\n+/* Nonzero means that code generation will be altered to support\n+   \"zero-link\" execution.  This currently affects ObjC only, but may\n+   affect other languages in the future.  */\n+int flag_zero_link = 0;\n+\n+/* Nonzero means emit an '__OBJC, __image_info' for the current translation\n+   unit.  It will inform the ObjC runtime that class definition(s) herein\n+   contained are to replace one(s) previously loaded.  */\n+int flag_replace_objc_classes = 0;\n+   \n /* C/ObjC language option variables.  */\n \n "}, {"sha": "c8a0ecc9c6d5a1b651a9d3f6afaf20f7b6797e8c", "filename": "gcc/c-common.h", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -99,7 +99,10 @@ enum rid\n   RID_ID,          RID_AT_ENCODE,    RID_AT_END,\n   RID_AT_CLASS,    RID_AT_ALIAS,     RID_AT_DEFS,\n   RID_AT_PRIVATE,  RID_AT_PROTECTED, RID_AT_PUBLIC,\n-  RID_AT_PROTOCOL, RID_AT_SELECTOR,  RID_AT_INTERFACE,\n+  RID_AT_PROTOCOL, RID_AT_SELECTOR,  \n+  RID_AT_THROW,\t   RID_AT_TRY,       RID_AT_CATCH,\n+  RID_AT_FINALLY,  RID_AT_SYNCHRONIZED,\n+  RID_AT_INTERFACE,\n   RID_AT_IMPLEMENTATION,\n \n   RID_MAX,\n@@ -354,6 +357,25 @@ extern void resort_sorted_fields (void *, void *, gt_pointer_operator,\n \n extern int flag_preprocess_only;\n \n+/* Zero means that faster, ...NonNil variants of objc_msgSend...\n+   calls will be used in ObjC; passing nil receivers to such calls\n+   will most likely result in crashes.  */\n+extern int flag_nil_receivers;\n+\n+/* Nonzero means that we will allow new ObjC exception syntax (@throw,\n+   @try, etc.) in source code.  */\n+extern int flag_objc_exceptions;\n+\n+/* Nonzero means that code generation will be altered to support\n+   \"zero-link\" execution.  This currently affects ObjC only, but may\n+   affect other languages in the future.  */\n+extern int flag_zero_link;\n+\n+/* Nonzero means emit an '__OBJC, __image_info' for the current translation\n+   unit.  It will inform the ObjC runtime that class definition(s) herein\n+   contained are to replace one(s) previously loaded.  */\n+extern int flag_replace_objc_classes;\n+\n /* Nonzero means don't output line number information.  */\n \n extern char flag_no_line_commands;\n@@ -1309,6 +1331,19 @@ extern void fe_file_change (const struct line_map *);\n extern int c_estimate_num_insns (tree decl);\n extern bool c_decl_uninit (tree t);\n \n+/* The following have been moved here from c-tree.h, since they're needed\n+   in the ObjC++ world, too.  What is more, stub-objc.c could use a few\n+   prototypes.  */\n+extern tree lookup_interface (tree);\n+extern tree is_class_name (tree);\n+extern tree objc_is_object_ptr (tree);\n+extern void objc_check_decl (tree);\n+extern int objc_comptypes (tree, tree, int);\n+extern tree objc_message_selector (void);\n+extern tree lookup_objc_ivar (tree);\n+extern void *get_current_scope (void);\n+extern void objc_mark_locals_volatile (void *);\n+\n /* In c-ppoutput.c  */\n extern void init_pp_output (FILE *);\n extern void preprocess_file (cpp_reader *);"}, {"sha": "bb1c4b0646250aa091abcc70d7e865258744026b", "filename": "gcc/c-decl.c", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -410,6 +410,39 @@ pop_scope (void)\n   scope_freelist = scope;\n }\n \n+/* The Objective-C front-end often needs to determine the current scope.  */\n+\n+void *\n+get_current_scope (void)\n+{\n+  return current_scope;\n+}\n+\n+/* The following function is used only by Objective-C.  It needs to live here\n+   because it accesses the innards of c_scope.  */\n+\n+void\n+objc_mark_locals_volatile (void *enclosing_blk)\n+{\n+  struct c_scope *scope;\n+  \n+  for (scope = current_scope; \n+       scope && scope != enclosing_blk;\n+       scope = scope->outer)\n+    {\n+      tree decl;\n+      \n+      for (decl = scope->names; decl; decl = TREE_CHAIN (decl))\n+\t{\n+\t  DECL_REGISTER (decl) = 0;\n+\t  TREE_THIS_VOLATILE (decl) = 1;\n+\t}\n+      /* Do not climb up past the current function.  */\n+      if (scope->function_body)\n+\tbreak;\n+    }\t\n+}     \n+  \n /* Nonzero if we are currently in the global scope.  */\n \n int\n@@ -2718,6 +2751,11 @@ finish_decl (tree decl, tree init, tree asmspec_tree)\n   if (init)\n     store_init_value (decl, init);\n \n+  if (c_dialect_objc () && (TREE_CODE (decl) == VAR_DECL\n+\t\t    || TREE_CODE (decl) == FUNCTION_DECL\n+\t\t    || TREE_CODE (decl) == FIELD_DECL))\n+    objc_check_decl (decl);\n+\n   /* Deduce size of array from initialization, if not already known */\n   if (TREE_CODE (type) == ARRAY_TYPE\n       && TYPE_DOMAIN (type) == 0\n@@ -2909,12 +2947,7 @@ finish_decl (tree decl, tree init, tree asmspec_tree)\n     mark_referenced (DECL_ASSEMBLER_NAME (decl));\n \n   if (TREE_CODE (decl) == TYPE_DECL)\n-    {\n-      /* This is a no-op in c-lang.c or something real in objc-act.c.  */\n-      if (c_dialect_objc ())\n-\tobjc_check_decl (decl);\n-      rest_of_decl_compilation (decl, NULL, DECL_FILE_SCOPE_P (decl), 0);\n-    }\n+    rest_of_decl_compilation (decl, NULL, DECL_FILE_SCOPE_P (decl), 0);\n \n   /* At the end of a declaration, throw away any variable type sizes\n      of types defined inside that declaration.  There is no use\n@@ -4778,8 +4811,6 @@ grokfield (tree declarator, tree declspecs, tree width)\n   finish_decl (value, NULL_TREE, NULL_TREE);\n   DECL_INITIAL (value) = width;\n \n-  if (c_dialect_objc ())\n-    objc_check_decl (value);\n   return value;\n }\n \f"}, {"sha": "1a097e27797952679c7976421d806981c1798057", "filename": "gcc/c-lang.c", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -179,52 +179,6 @@ const char *const tree_code_name[] = {\n };\n #undef DEFTREECODE\n \n-/* Used by c-lex.c, but only for objc.  */\n-\n-tree\n-lookup_interface (tree arg ATTRIBUTE_UNUSED)\n-{\n-  return 0;\n-}\n-\n-tree\n-is_class_name (tree arg ATTRIBUTE_UNUSED)\n-{\n-  return 0;\n-}\n-\n-tree\n-objc_is_id (tree arg ATTRIBUTE_UNUSED)\n-{\n-  return 0;\n-}\n-\n-void\n-objc_check_decl (tree decl ATTRIBUTE_UNUSED)\n-{\n-}\n-\n-int\n-objc_comptypes (tree lhs ATTRIBUTE_UNUSED, tree rhs ATTRIBUTE_UNUSED,\n-\t\tint reflexive ATTRIBUTE_UNUSED)\n-{\n-  return -1;\n-}\n-\n-tree\n-objc_message_selector (void)\n-{\n-  return 0;\n-}\n-\n-/* Used by c-typeck.c (build_external_ref), but only for objc.  */\n-\n-tree\n-lookup_objc_ivar (tree id ATTRIBUTE_UNUSED)\n-{\n-  return 0;\n-}\n-\n void\n finish_file (void)\n {\n@@ -244,5 +198,4 @@ c_initialize_diagnostics (diagnostic_context *context)\n   free (base);\n }\n \n-\n #include \"gtype-c.h\""}, {"sha": "7763702262ac899099dc5857235e9e53eb6414d1", "filename": "gcc/c-opts.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -847,10 +847,18 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       flag_next_runtime = value;\n       break;\n \n+    case OPT_fnil_receivers:\n+      flag_nil_receivers = value;\n+      break;\n+\n     case OPT_fnonansi_builtins:\n       flag_no_nonansi_builtin = !value;\n       break;\n \n+    case OPT_fobjc_exceptions:\n+      flag_objc_exceptions = value;\n+      break;\n+\n     case OPT_foperator_names:\n       cpp_opts->operator_names = value;\n       break;\n@@ -871,6 +879,10 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       cpp_opts->preprocessed = value;\n       break;\n \n+    case OPT_freplace_objc_classes:\n+      flag_replace_objc_classes = value;\n+      break;\n+      \n     case OPT_frepo:\n       flag_use_repository = value;\n       if (value)\n@@ -915,6 +927,10 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       flag_weak = value;\n       break;\n \n+    case OPT_fzero_link:\n+      flag_zero_link = value;\n+      break;\n+\n     case OPT_gen_decls:\n       flag_gen_declaration = 1;\n       break;"}, {"sha": "3d14d916b076ee60f87941ad27281798d3651024", "filename": "gcc/c-parse.in", "status": "modified", "additions": 142, "deletions": 160, "changes": 302, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -20,17 +20,17 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n /* This file defines the grammar of C and that of Objective C.\n-   ifobjc ... end ifobjc  conditionals contain code for Objective C only.\n-   ifc ... end ifc  conditionals contain code for C only.\n+   @@ifobjc ... @@end_ifobjc  conditionals contain code for Objective C only.\n+   @@ifc ... @@end_ifc  conditionals contain code for C only.\n    Sed commands in Makefile.in are used to convert this file into\n    c-parse.y and into objc-parse.y.  */\n \n /* To whomever it may concern: I have heard that such a thing was once\n    written by AT&T, but I have never seen it.  */\n \n-ifc\n+@@ifc\n %expect 10 /* shift/reduce conflicts, and no reduce/reduce conflicts.  */\n-end ifc\n+@@end_ifc\n \n %{\n #include \"config.h\"\n@@ -50,9 +50,9 @@ end ifc\n #include \"toplev.h\"\n #include \"ggc.h\"\n \n-ifobjc\n+@@ifobjc\n #include \"objc-act.h\"\n-end ifobjc\n+@@end_ifobjc\n \n /* Like YYERROR but do call yyerror.  */\n #define YYERROR1 { yyerror (\"syntax error\"); YYERROR; }\n@@ -175,6 +175,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    Objective C, so that the token codes are the same in both.  */\n %token INTERFACE IMPLEMENTATION END SELECTOR DEFS ENCODE\n %token CLASSNAME PUBLIC PRIVATE PROTECTED PROTOCOL OBJECTNAME CLASS ALIAS\n+%token AT_THROW AT_TRY AT_CATCH AT_FINALLY AT_SYNCHRONIZED\n %token OBJC_STRING\n \n %type <code> unop\n@@ -233,7 +234,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n %type <location> save_location\n \f\n-ifobjc\n+@@ifobjc\n /* the Objective-C nonterminals */\n \n %type <ttype> ivar_decl_list ivar_decls ivar_decl ivars ivar_declarator\n@@ -245,7 +246,10 @@ ifobjc\n %type <ttype> non_empty_protocolrefs protocolrefs identifier_list objcprotocolexpr\n \n %type <ttype> CLASSNAME OBJECTNAME OBJC_STRING\n-end ifobjc\n+\n+%type <ttype> objc_try_stmt superclass\n+%type <itype> objc_try_catch_stmt objc_finally_block\n+@@end_ifobjc\n \f\n %{\n /* Number of statements (loosely speaking) and compound statements\n@@ -306,7 +310,7 @@ static GTY(()) tree declspec_stack;\n     flag_iso = (val >> 3) & 1;\t\t\t\\\n   } while (0)\n \n-ifobjc\n+@@ifobjc\n /* Objective-C specific parser/lexer information */\n \n static enum tree_code objc_inherit_code;\n@@ -318,11 +322,11 @@ static int objc_pq_context = 0, objc_public_flag = 0;\n    exists.  */\n static int objc_need_raw_identifier;\n #define OBJC_NEED_RAW_IDENTIFIER(VAL)\tobjc_need_raw_identifier = VAL\n-end ifobjc\n+@@end_ifobjc\n \n-ifc\n+@@ifc\n #define OBJC_NEED_RAW_IDENTIFIER(VAL)\t/* nothing */\n-end ifc\n+@@end_ifc\n \n static bool parsing_iso_function_signature;\n \n@@ -371,9 +375,9 @@ extdef:\n extdef_1:\n \tfndef\n \t| datadef\n-ifobjc\n+@@ifobjc\n \t| objcdef\n-end ifobjc\n+@@end_ifobjc\n \t| ASM_KEYWORD '(' expr ')' ';'\n \t\t{ STRIP_NOPS ($3);\n \t\t  if ((TREE_CODE ($3) == ADDR_EXPR\n@@ -452,10 +456,10 @@ fndef:\n identifier:\n \tIDENTIFIER\n \t| TYPENAME\n-ifobjc\n+@@ifobjc\n \t| OBJECTNAME\n \t| CLASSNAME\n-end ifobjc\n+@@end_ifobjc\n \t;\n \n unop:     '&'\n@@ -464,10 +468,10 @@ unop:     '&'\n \t\t{ $$ = NEGATE_EXPR; }\n \t| '+'\n \t\t{ $$ = CONVERT_EXPR;\n-ifc\n+@@ifc\n   if (warn_traditional && !in_system_header)\n     warning (\"traditional C rejects the unary plus operator\");\n-end ifc\n+@@end_ifc\n \t\t}\n \t| PLUSPLUS\n \t\t{ $$ = PREINCREMENT_EXPR; }\n@@ -708,29 +712,29 @@ primary:\n \t\t{ $$ = build_array_ref ($1, $3); }\n \t| primary '.' identifier\n \t\t{\n-ifobjc\n+@@ifobjc\n \t\t    if (!is_public ($1, $3))\n \t\t      $$ = error_mark_node;\n \t\t    else\n-end ifobjc\n+@@end_ifobjc\n \t\t      $$ = build_component_ref ($1, $3);\n \t\t}\n \t| primary POINTSAT identifier\n \t\t{\n                   tree expr = build_indirect_ref ($1, \"->\");\n \n-ifobjc\n+@@ifobjc\n \t\t      if (!is_public (expr, $3))\n \t\t\t$$ = error_mark_node;\n \t\t      else\n-end ifobjc\n+@@end_ifobjc\n \t\t\t$$ = build_component_ref (expr, $3);\n \t\t}\n \t| primary PLUSPLUS\n \t\t{ $$ = build_unary_op (POSTINCREMENT_EXPR, $1, 0); }\n \t| primary MINUSMINUS\n \t\t{ $$ = build_unary_op (POSTDECREMENT_EXPR, $1, 0); }\n-ifobjc\n+@@ifobjc\n \t| objcmessageexpr\n \t\t{ $$ = build_message_expr ($1); }\n \t| objcselectorexpr\n@@ -741,7 +745,7 @@ ifobjc\n \t\t{ $$ = build_encode_expr ($1); }\n \t| OBJC_STRING\n \t\t{ $$ = build_objc_string_object ($1); }\n-end ifobjc\n+@@end_ifobjc\n \t;\n \n old_style_parm_decls:\n@@ -1356,7 +1360,7 @@ typespec_nonreserved_nonattr:\n \t\t{ /* For a typedef name, record the meaning, not the name.\n \t\t     In case of `foo foo, bar;'.  */\n \t\t  $$ = lookup_name ($1); }\n-ifobjc\n+@@ifobjc\n \t| CLASSNAME protocolrefs\n \t\t{ $$ = get_static_reference ($1, $2); }\n \t| OBJECTNAME protocolrefs\n@@ -1366,7 +1370,7 @@ ifobjc\n    - nisse@lysator.liu.se */\n         | non_empty_protocolrefs\n                 { $$ = get_object_reference ($1); }\n-end ifobjc\n+@@end_ifobjc\n \t| typeof '(' expr ')'\n \t\t{ skip_evaluation--; $$ = TREE_TYPE ($3); }\n \t| typeof '(' typename ')'\n@@ -1632,9 +1636,9 @@ after_type_declarator:\n \t| '*' maybe_type_quals_attrs after_type_declarator  %prec UNARY\n \t\t{ $$ = make_pointer_declarator ($2, $3); }\n \t| TYPENAME\n-ifobjc\n+@@ifobjc\n \t| OBJECTNAME\n-end ifobjc\n+@@end_ifobjc\n \t;\n \n /* Kinds of declarator that can appear in a parameter list\n@@ -1655,9 +1659,9 @@ parm_declarator_starttypename:\n \t| parm_declarator_starttypename array_declarator  %prec '.'\n \t\t{ $$ = set_array_declarator_type ($2, $1, 0); }\n \t| TYPENAME\n-ifobjc\n+@@ifobjc\n \t| OBJECTNAME\n-end ifobjc\n+@@end_ifobjc\n \t;\n \n parm_declarator_nostarttypename:\n@@ -1806,22 +1810,11 @@ component_decl_list2:\t/* empty */\n \t| component_decl_list2 ';'\n \t\t{ if (pedantic)\n \t\t    pedwarn (\"extra semicolon in struct or union specified\"); }\n-ifobjc\n+@@ifobjc\n \t/* foo(sizeof(struct{ @defs(ClassName)})); */\n \t| DEFS '(' CLASSNAME ')'\n-\t\t{\n-\t\t  tree interface = lookup_interface ($3);\n-\n-\t\t  if (interface)\n-\t\t    $$ = nreverse (get_class_ivars (interface));\n-\t\t  else\n-\t\t    {\n-\t\t      error (\"cannot find interface declaration for `%s'\",\n-\t\t\t     IDENTIFIER_POINTER ($3));\n-\t\t      $$ = NULL_TREE;\n-\t\t    }\n-\t\t}\n-end ifobjc\n+\t\t{ $$ = nreverse (get_class_ivars_from_name ($3)); }\n+@@end_ifobjc\n \t;\n \n component_decl:\n@@ -2056,15 +2049,17 @@ pushlevel:  /* empty */\n \t\t{ pushlevel (0);\n \t\t  clear_last_expr ();\n \t\t  add_scope_stmt (/*begin_p=*/1, /*partial_p=*/0);\n-ifobjc\n-\t\t  if (objc_method_context)\n-\t\t    add_objc_decls ();\n-end ifobjc\n \t\t}\n \t;\n \n poplevel:  /* empty */\n-                { $$ = add_scope_stmt (/*begin_p=*/0, /*partial_p=*/0); }\n+                { \n+@@ifobjc\n+\t\t  if (c_dialect_objc ())\n+\t\t    objc_clear_super_receiver ();\n+@@end_ifobjc\n+\t\t  $$ = add_scope_stmt (/*begin_p=*/0, /*partial_p=*/0); \n+\t\t}\n         ;\n \n /* Start and end blocks created for the new scopes of C99.  */\n@@ -2075,10 +2070,6 @@ c99_block_start: /* empty */\n \t\t      pushlevel (0);\n \t\t      clear_last_expr ();\n \t\t      add_scope_stmt (/*begin_p=*/1, /*partial_p=*/0);\n-ifobjc\n-\t\t      if (objc_method_context)\n-\t\t\tadd_objc_decls ();\n-end ifobjc\n \t\t    }\n \t\t  else\n \t\t    $$ = NULL_TREE;\n@@ -2404,6 +2395,59 @@ stmt:\n \t\t  $$ = add_stmt (build_stmt (GOTO_STMT, $3)); }\n \t| ';'\n \t\t{ $$ = NULL_TREE; }\n+@@ifobjc\n+\t| AT_THROW expr ';'\n+\t\t{ stmt_count++; \n+\t\t  $$ = objc_build_throw_stmt ($2); \n+\t\t}\n+\t| AT_THROW ';'\n+\t\t{ stmt_count++; \n+\t\t  $$ = objc_build_throw_stmt (NULL_TREE); \n+\t\t}\n+\t| objc_try_catch_stmt \n+\t\t{ objc_build_finally_prologue (); }\n+\t  objc_finally_block\n+\t\t{ $$ = objc_build_try_catch_finally_stmt ($1, $3); }\n+\t| AT_SYNCHRONIZED '(' expr ')' \n+\t\t{ objc_build_synchronized_prologue ($3); }\n+\t  compstmt\n+\t\t{ $$ = objc_build_synchronized_epilogue (); }\n+\t;\n+\n+objc_try_catch_stmt:\n+\t  objc_try_stmt\n+\t\t{ objc_build_try_epilogue (1); }\n+\t  objc_catch_list\n+\t\t{ objc_build_catch_epilogue (); $$ = 1; }\n+\t| objc_try_stmt\n+\t\t{ objc_build_try_epilogue (0); $$ = 0; }\n+\t;\n+\n+\n+objc_try_stmt:\n+\t  AT_TRY \n+\t\t{ objc_build_try_prologue (); }\n+\t  compstmt \n+\t;\n+\t\n+objc_catch_list:\n+\t  objc_catch_list objc_catch_block\n+\t| objc_catch_block\n+\t;\n+\n+objc_catch_block:\n+\t  AT_CATCH '(' parm ')' \n+\t\t{ objc_build_catch_stmt ($3); }\n+\t  compstmt\n+\t\t{ stmt_count++; }\n+\t;\n+\n+objc_finally_block:\n+\t  AT_FINALLY compstmt\n+\t    { $$ = 1; }\n+\t| /* NULL */\n+\t    { $$ = 0; }\n+@@end_ifobjc\n \t;\n \n /* Any kind of label, including jump labels and case labels.\n@@ -2648,7 +2692,7 @@ extension:\n \t\t  flag_iso = 0; }\n \t;\n \f\n-ifobjc\n+@@ifobjc\n /* Objective-C productions.  */\n \n objcdef:\n@@ -2692,115 +2736,52 @@ aliasdecl:\n \t\t}\n \t;\n \n-classdef:\n-\t  INTERFACE identifier protocolrefs '{'\n-\t\t{\n-\t\t  objc_interface_context = objc_ivar_context\n-\t\t    = start_class (CLASS_INTERFACE_TYPE, $2, NULL_TREE, $3);\n-                  objc_public_flag = 0;\n-\t\t}\n-\t  ivar_decl_list '}'\n-\t\t{\n-                  continue_class (objc_interface_context);\n-\t\t}\n-\t  methodprotolist\n-\t  END\n-\t\t{\n-\t\t  finish_class (objc_interface_context);\n-\t\t  objc_interface_context = NULL_TREE;\n-\t\t}\n+superclass:\n+\t  ':' identifier { $$ = $2; }\n+\t| /* NULL */ %prec HYPERUNARY    { $$ = NULL_TREE; }\n+\t;\n \n-\t| INTERFACE identifier protocolrefs\n-\t\t{\n-\t\t  objc_interface_context\n-\t\t    = start_class (CLASS_INTERFACE_TYPE, $2, NULL_TREE, $3);\n-                  continue_class (objc_interface_context);\n-\t\t}\n-\t  methodprotolist\n-\t  END\n-\t\t{\n-\t\t  finish_class (objc_interface_context);\n-\t\t  objc_interface_context = NULL_TREE;\n-\t\t}\n+class_ivars:\n+\t  '{' ivar_decl_list '}'\n+\t| /* NULL */\n+\t;\n \n-\t| INTERFACE identifier ':' identifier protocolrefs '{'\n+classdef:\n+\t  INTERFACE identifier superclass protocolrefs\n \t\t{\n \t\t  objc_interface_context = objc_ivar_context\n-\t\t    = start_class (CLASS_INTERFACE_TYPE, $2, $4, $5);\n+\t\t    = start_class (CLASS_INTERFACE_TYPE, $2, $3, $4);\n                   objc_public_flag = 0;\n \t\t}\n-\t  ivar_decl_list '}'\n+\t  class_ivars\n \t\t{\n                   continue_class (objc_interface_context);\n \t\t}\n-\t  methodprotolist\n-\t  END\n-\t\t{\n-\t\t  finish_class (objc_interface_context);\n-\t\t  objc_interface_context = NULL_TREE;\n-\t\t}\n-\n-\t| INTERFACE identifier ':' identifier protocolrefs\n-\t\t{\n-\t\t  objc_interface_context\n-\t\t    = start_class (CLASS_INTERFACE_TYPE, $2, $4, $5);\n-                  continue_class (objc_interface_context);\n-\t\t}\n-\t  methodprotolist\n-\t  END\n+\t  methodprotolist END\n \t\t{\n \t\t  finish_class (objc_interface_context);\n \t\t  objc_interface_context = NULL_TREE;\n \t\t}\n \n-\t| IMPLEMENTATION identifier '{'\n-\t\t{\n-\t\t  objc_implementation_context = objc_ivar_context\n-\t\t    = start_class (CLASS_IMPLEMENTATION_TYPE, $2, NULL_TREE, NULL_TREE);\n-                  objc_public_flag = 0;\n-\t\t}\n-\t  ivar_decl_list '}'\n-\t\t{\n-                  objc_ivar_chain\n-\t\t    = continue_class (objc_implementation_context);\n-\t\t}\n-\n-\t| IMPLEMENTATION identifier\n-\t\t{\n-\t\t  objc_implementation_context\n-\t\t    = start_class (CLASS_IMPLEMENTATION_TYPE, $2, NULL_TREE, NULL_TREE);\n-                  objc_ivar_chain\n-\t\t    = continue_class (objc_implementation_context);\n-\t\t}\n-\n-\t| IMPLEMENTATION identifier ':' identifier '{'\n+\t| IMPLEMENTATION identifier superclass\n \t\t{\n \t\t  objc_implementation_context = objc_ivar_context\n-\t\t    = start_class (CLASS_IMPLEMENTATION_TYPE, $2, $4, NULL_TREE);\n+\t\t    = start_class (CLASS_IMPLEMENTATION_TYPE, $2, $3, NULL_TREE);\n                   objc_public_flag = 0;\n \t\t}\n-\t  ivar_decl_list '}'\n+\t  class_ivars\n \t\t{\n                   objc_ivar_chain\n \t\t    = continue_class (objc_implementation_context);\n \t\t}\n \n-\t| IMPLEMENTATION identifier ':' identifier\n-\t\t{\n-\t\t  objc_implementation_context\n-\t\t    = start_class (CLASS_IMPLEMENTATION_TYPE, $2, $4, NULL_TREE);\n-                  objc_ivar_chain\n-\t\t    = continue_class (objc_implementation_context);\n-\t\t}\n-\n \t| INTERFACE identifier '(' identifier ')' protocolrefs\n \t\t{\n \t\t  objc_interface_context\n \t\t    = start_class (CATEGORY_INTERFACE_TYPE, $2, $4, $6);\n                   continue_class (objc_interface_context);\n \t\t}\n-\t  methodprotolist\n-\t  END\n+\t  methodprotolist END\n \t\t{\n \t\t  finish_class (objc_interface_context);\n \t\t  objc_interface_context = NULL_TREE;\n@@ -2947,10 +2928,7 @@ methoddef:\n \t  methoddecl\n \t\t{\n \t\t  objc_pq_context = 0;\n-\t\t  if (objc_inherit_code == CLASS_METHOD_DECL)\n-\t\t    add_class_method (objc_implementation_context, $3);\n-\t\t  else\n-\t\t    add_instance_method (objc_implementation_context, $3);\n+\t\t  add_method (objc_implementation_context, $3, objc_inherit_code == CLASS_METHOD_DECL);\n \t\t  start_method_def ($3);\n \t\t}\n \t  optarglist\n@@ -2969,14 +2947,8 @@ methoddef:\n \n methodprotolist:\n \t  /* empty  */\n-\t| {$<ttype>$ = NULL_TREE; } methodprotolist2\n-\t;\n-\n-methodprotolist2:\t\t /* eliminates a shift/reduce conflict */\n-\t   methodproto\n-\t|  datadef\n-\t| methodprotolist2 methodproto\n-\t| methodprotolist2 {$<ttype>$ = NULL_TREE; } datadef\n+\t| methodprotolist methodproto\n+\t| methodprotolist { $<ttype>$ = NULL_TREE; } datadef\n \t;\n \n semi_or_error:\n@@ -2994,10 +2966,7 @@ methodproto:\n \t\t{\n \t\t  /* Forget protocol qualifiers here.  */\n \t\t  objc_pq_context = 0;\n-\t\t  if (objc_inherit_code == CLASS_METHOD_DECL)\n-\t\t    add_class_method (objc_interface_context, $3);\n-\t\t  else\n-\t\t    add_instance_method (objc_interface_context, $3);\n+\t\t  add_method (objc_interface_context, $3, objc_inherit_code == CLASS_METHOD_DECL);\n \t\t}\n \t  semi_or_error\n \t;\n@@ -3194,6 +3163,10 @@ receiver:\n \t\t{\n \t\t  $$ = get_class_reference ($1);\n \t\t}\n+\t| TYPENAME\n+\t\t{\n+\t\t  $$ = get_class_reference ($1);\n+\t\t}\n \t;\n \n objcmessageexpr:\n@@ -3248,7 +3221,7 @@ objcencodeexpr:\n \t\t}\n \t;\n \n-end ifobjc\n+@@end_ifobjc\n %%\n \n /* yylex() is a thin wrapper around c_lex(), all it does is translate\n@@ -3350,7 +3323,7 @@ static const struct resword reswords[] =\n   { \"void\",\t\tRID_VOID,\t0 },\n   { \"volatile\",\t\tRID_VOLATILE,\t0 },\n   { \"while\",\t\tRID_WHILE,\t0 },\n-ifobjc\n+@@ifobjc\n   { \"id\",\t\tRID_ID,\t\t\tD_OBJC },\n \n   /* These objc keywords are recognized only immediately after\n@@ -3367,7 +3340,11 @@ ifobjc\n   { \"protocol\",\t\tRID_AT_PROTOCOL,\tD_OBJC },\n   { \"public\",\t\tRID_AT_PUBLIC,\t\tD_OBJC },\n   { \"selector\",\t\tRID_AT_SELECTOR,\tD_OBJC },\n-\n+  { \"throw\",\t\tRID_AT_THROW,\t\tD_OBJC },\n+  { \"try\",\t\tRID_AT_TRY,\t\tD_OBJC },\n+  { \"catch\",\t\tRID_AT_CATCH,\t\tD_OBJC },\n+  { \"finally\",\t\tRID_AT_FINALLY,\t\tD_OBJC },\n+  { \"synchronized\",\tRID_AT_SYNCHRONIZED,\tD_OBJC },\n   /* These are recognized only in protocol-qualifier context\n      (see above) */\n   { \"bycopy\",\t\tRID_BYCOPY,\t\tD_OBJC },\n@@ -3376,7 +3353,7 @@ ifobjc\n   { \"inout\",\t\tRID_INOUT,\t\tD_OBJC },\n   { \"oneway\",\t\tRID_ONEWAY,\t\tD_OBJC },\n   { \"out\",\t\tRID_OUT,\t\tD_OBJC },\n-end ifobjc\n+@@end_ifobjc\n };\n #define N_reswords (sizeof reswords / sizeof (struct resword))\n \n@@ -3503,6 +3480,11 @@ static const short rid_to_yy[RID_MAX] =\n   /* RID_AT_PUBLIC */\t\tPUBLIC,\n   /* RID_AT_PROTOCOL */\t\tPROTOCOL,\n   /* RID_AT_SELECTOR */\t\tSELECTOR,\n+  /* RID_AT_THROW */\t\tAT_THROW,\n+  /* RID_AT_TRY */\t\tAT_TRY,\n+  /* RID_AT_CATCH */\t\tAT_CATCH,\n+  /* RID_AT_FINALLY */\t\tAT_FINALLY,\n+  /* RID_AT_SYNCHRONIZED */\tAT_SYNCHRONIZED,\n   /* RID_AT_INTERFACE */\tINTERFACE,\n   /* RID_AT_IMPLEMENTATION */\tIMPLEMENTATION\n };\n@@ -3567,16 +3549,16 @@ yylexname (void)\n {\n   tree decl;\n \n-ifobjc\n+@@ifobjc\n   int objc_force_identifier = objc_need_raw_identifier;\n   OBJC_NEED_RAW_IDENTIFIER (0);\n-end ifobjc\n+@@end_ifobjc\n \n   if (C_IS_RESERVED_WORD (yylval.ttype))\n     {\n       enum rid rid_code = C_RID_CODE (yylval.ttype);\n \n-ifobjc\n+@@ifobjc\n       /* Turn non-typedefed refs to \"id\" into plain identifiers; this\n \t allows constructs like \"void foo(id id);\" to work.  */\n       if (rid_code == RID_ID)\n@@ -3588,7 +3570,7 @@ ifobjc\n \n       if (!OBJC_IS_AT_KEYWORD (rid_code)\n \t  && (!OBJC_IS_PQ_KEYWORD (rid_code) || objc_pq_context))\n-end ifobjc\n+@@end_ifobjc\n       {\n \t/* Return the canonical spelling for this keyword.  */\n \tyylval.ttype = ridpointers[(int) rid_code];\n@@ -3602,7 +3584,7 @@ end ifobjc\n       if (TREE_CODE (decl) == TYPE_DECL)\n \treturn TYPENAME;\n     }\n-ifobjc\n+@@ifobjc\n   else\n     {\n       tree objc_interface_decl = is_class_name (yylval.ttype);\n@@ -3616,7 +3598,7 @@ ifobjc\n \t  return CLASSNAME;\n \t}\n     }\n-end ifobjc\n+@@end_ifobjc\n \n   return IDENTIFIER;\n }"}, {"sha": "96faf84ac9bc95976d00bffe663b86212bf07b80", "filename": "gcc/c-tree.h", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -152,17 +152,6 @@ struct lang_type GTY(())\n #define KEEP_YES\t1\n #define KEEP_MAYBE\t2\n \n-\f\n-/* in c-lang.c and objc-act.c */\n-extern tree lookup_interface (tree);\n-extern tree is_class_name (tree);\n-extern tree objc_is_id (tree);\n-extern void objc_check_decl (tree);\n-extern int objc_comptypes (tree, tree, int);\n-extern tree objc_message_selector (void);\n-extern tree lookup_objc_ivar (tree);\n-extern void c_expand_body (tree);\n-\n \f\n /* in c-parse.in */\n extern void c_parse_init (void);\n@@ -177,6 +166,7 @@ extern void pushlevel (int);\n extern void insert_block (tree);\n extern void set_block (tree);\n extern tree pushdecl (tree);\n+extern void c_expand_body (tree);\n \n extern void c_init_decl_processing (void);\n extern void c_dup_lang_specific_decl (tree);\n@@ -306,6 +296,8 @@ extern int system_header_p;\n \n /* In c-decl.c */\n extern void c_finish_incomplete_decl (tree);\n+extern void *get_current_scope (void);\n+extern void objc_mark_locals_volatile (void *);\n extern void c_write_global_declarations (void);\n \n extern GTY(()) tree static_ctors;"}, {"sha": "51887599caa439674cfb514dee16659a0ff03497", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -511,8 +511,12 @@ comptypes (tree type1, tree type2, int flags)\n   switch (TREE_CODE (t1))\n     {\n     case POINTER_TYPE:\n+      /* We must give ObjC the first crack at comparing pointers, since\n+\t   protocol qualifiers may be involved.  */\n+      if (c_dialect_objc () && (val = objc_comptypes (t1, t2, 0)) >= 0)\n+\tbreak;\n       val = (TREE_TYPE (t1) == TREE_TYPE (t2)\n-\t      ? 1 : comptypes (TREE_TYPE (t1), TREE_TYPE (t2), flags));\n+\t     ? 1 : comptypes (TREE_TYPE (t1), TREE_TYPE (t2), flags));\n       break;\n \n     case FUNCTION_TYPE:\n@@ -560,6 +564,8 @@ comptypes (tree type1, tree type2, int flags)\n       }\n \n     case RECORD_TYPE:\n+      /* We are dealing with two distinct structs.  In assorted Objective-C\n+\t corner cases, however, these can still be deemed equivalent.  */\n       if (c_dialect_objc () && objc_comptypes (t1, t2, 0) == 1)\n \tval = 1;\n \n@@ -2927,7 +2933,7 @@ build_c_cast (tree type, tree expr)\n   /* The ObjC front-end uses TYPE_MAIN_VARIANT to tie together types differing\n      only in <protocol> qualifications.  But when constructing cast expressions,\n      the protocols do matter and must be kept around.  */\n-  if (!c_dialect_objc () || !objc_is_id (type))\n+  if (!c_dialect_objc () || !objc_is_object_ptr (type))\n     type = TYPE_MAIN_VARIANT (type);\n \n   if (TREE_CODE (type) == ARRAY_TYPE)\n@@ -3488,6 +3494,7 @@ convert_for_assignment (tree type, tree rhs, const char *errtype,\n       tree ttl = TREE_TYPE (type);\n       tree ttr = TREE_TYPE (rhstype);\n       bool is_opaque_pointer;\n+      int target_cmp = 0;   /* Cache comp_target_types () result.  */\n \n       /* Opaque pointers are treated like void pointers.  */\n       is_opaque_pointer = ((*targetm.vector_opaque_p) (type)\n@@ -3499,7 +3506,7 @@ convert_for_assignment (tree type, tree rhs, const char *errtype,\n \t and vice versa; otherwise, targets must be the same.\n \t Meanwhile, the lhs target must have all the qualifiers of the rhs.  */\n       if (VOID_TYPE_P (ttl) || VOID_TYPE_P (ttr)\n-\t  || comp_target_types (type, rhstype, 0)\n+\t  || (target_cmp = comp_target_types (type, rhstype, 0))\n \t  || is_opaque_pointer\n \t  || (c_common_unsigned_type (TYPE_MAIN_VARIANT (ttl))\n \t      == c_common_unsigned_type (TYPE_MAIN_VARIANT (ttr))))\n@@ -3525,7 +3532,7 @@ convert_for_assignment (tree type, tree rhs, const char *errtype,\n \t      /* If this is not a case of ignoring a mismatch in signedness,\n \t\t no warning.  */\n \t      else if (VOID_TYPE_P (ttl) || VOID_TYPE_P (ttr)\n-\t\t       || comp_target_types (type, rhstype, 0))\n+\t\t       || target_cmp)\n \t\t;\n \t      /* If there is a mismatch, do warn.  */\n \t      else if (pedantic)"}, {"sha": "4f9859f6a7a7fe352f0cd92c36e221d38ab8029a", "filename": "gcc/c.opt", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -551,14 +551,22 @@ C++ ObjC++\n \n fnext-runtime\n ObjC ObjC++\n-Generate code for NeXT runtime environment\n+Generate code for NeXT (Apple Mac OS X) runtime environment\n+\n+fnil-receivers\n+ObjC ObjC++\n+Assume that receivers of Objective-C messages may be nil\n \n fnonansi-builtins\n C++ ObjC++\n \n fnonnull-objects\n C++ ObjC++\n \n+fobjc-exceptions\n+ObjC ObjC++\n+Enable Objective-C exception and synchronization syntax\n+\n foperator-names\n C++ ObjC++\n Recognize C++ kewords like \\\"compl\\\" and \\\"xor\\\"\n@@ -578,6 +586,10 @@ fpreprocessed\n C ObjC C++ ObjC++\n Treat the input file as already preprocessed\n \n+freplace-objc-classes\n+ObjC ObjC++\n+Used in Fix-and-Continue mode to indicate that object files may be swapped in at runtime\n+\n frepo\n C++ ObjC++\n Enable automatic template instantiation\n@@ -666,6 +678,10 @@ fxref\n C++ ObjC++\n Emit cross referencing information\n \n+fzero-link\n+ObjC ObjC++\n+Generate lazy class lookup (via objc_getClass()) for use in Zero-Link mode\n+\n gen-decls\n ObjC ObjC++\n Dump declarations to a .decl file"}, {"sha": "dc864628a20a16fe40883fc6095682676e730efc", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -1214,6 +1214,8 @@ machopic_select_section (tree exp, int reloc,\n \tobjc_symbols_section ();\n       else if (!strncmp (name, \"_OBJC_MODULES\", 13))\n \tobjc_module_info_section ();\n+      else if (!strncmp (name, \"_OBJC_IMAGE_INFO\", 16))\n+\tobjc_image_info_section ();\n       else if (!strncmp (name, \"_OBJC_PROTOCOL_INSTANCE_METHODS_\", 32))\n \tobjc_cat_inst_meth_section ();\n       else if (!strncmp (name, \"_OBJC_PROTOCOL_CLASS_METHODS_\", 29))"}, {"sha": "35415159e497a4b24f1656a1ad1c6759928113bd", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -510,6 +510,7 @@ FUNCTION (void)\t\t\t\t\t\t\t\t\\\n   in_objc_symbols, in_objc_module_info,\t\t\t\\\n   in_objc_protocol, in_objc_string_object,\t\t\\\n   in_objc_constant_string_object,\t\t\t\\\n+  in_objc_image_info,\t\t\t\t\t\\\n   in_objc_class_names, in_objc_meth_var_names,\t\t\\\n   in_objc_meth_var_types, in_objc_cls_refs,\t\t\\\n   in_machopic_nl_symbol_ptr,\t\t\t\t\\\n@@ -599,6 +600,10 @@ SECTION_FUNCTION (objc_string_object_section,\t\\\n SECTION_FUNCTION (objc_constant_string_object_section,\t\\\n \t\t  in_objc_constant_string_object,\t\\\n \t\t  \".section __OBJC, __cstring_object\", 1)\t\\\n+/* Fix-and-Continue image marker.  */\t\t\\\n+SECTION_FUNCTION (objc_image_info_section,\t\\\n+                  in_objc_image_info,\t\t\\\n+                  \".section __OBJC, __image_info\", 1)\t\\\n SECTION_FUNCTION (objc_class_names_section,\t\\\n \t\tin_objc_class_names,\t\t\\\n \t\t\".objc_class_names\", 1)\t\\"}, {"sha": "0bd16fb15f3b81b9d48840e82a511adee95243b8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 137, "deletions": 3, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -193,8 +193,14 @@ in the following sections.\n \n @item Objective-C Language Options\n @xref{Objective-C Dialect Options,,Options Controlling Objective-C Dialect}.\n-@gccoptlist{-fconstant-string-class=@var{class-name} @gol\n--fgnu-runtime  -fnext-runtime  -gen-decls @gol\n+@gccoptlist{\n+-fconstant-string-class=@var{class-name} @gol\n+-fgnu-runtime  -fnext-runtime @gol\n+-fno-nil-receivers @gol\n+-fobjc-exceptions @gol\n+-freplace-objc-classes @gol\n+-fzero-link @gol\n+-gen-decls @gol\n -Wno-protocol  -Wselector -Wundeclared-selector}\n \n @item Language Independent Options\n@@ -1743,6 +1749,9 @@ In this example, G++ will synthesize a default @samp{A& operator =\n @cindex compiler options, Objective-C\n @cindex Objective-C options, command line\n @cindex options, Objective-C\n+(NOTE: This manual does not describe the Objective-C language itself.  See\n+@w{@uref{http://gcc.gnu.org/readings.html}} for references.)\n+\n This section describes the command-line options that are only meaningful\n for Objective-C programs, but you can also use most of the GNU compiler\n options regardless of what language your program is in.  For example,\n@@ -1765,7 +1774,11 @@ programs:\n @opindex fconstant-string-class\n Use @var{class-name} as the name of the class to instantiate for each\n literal string specified with the syntax @code{@@\"@dots{}\"}.  The default\n-class name is @code{NXConstantString}.\n+class name is @code{NXConstantString} if the GNU runtime is being used, and\n+@code{NSConstantString} if the NeXT runtime is being used (see below).  The\n+@option{-fconstant-cfstrings} option, if also present, will override the\n+@option{-fconstant-string-class} setting and cause @code{@@\"@dots{}\"} literals\n+to be laid out as constant CoreFoundation strings.\n \n @item -fgnu-runtime\n @opindex fgnu-runtime\n@@ -1779,6 +1792,127 @@ for NeXT-based systems, including Darwin and Mac OS X@.  The macro\n @code{__NEXT_RUNTIME__} is predefined if (and only if) this option is\n used.\n \n+@item -fno-nil-receivers\n+@opindex -fno-nil-receivers\n+Assume that all Objective-C message dispatches (e.g., \n+@code{[receiver message:arg]}) in this translation unit ensure that the receiver \n+is not @code{nil}.  This allows for more efficient entry points in the runtime to be \n+used.  Currently, this option is only available in conjunciton with \n+the NeXT runtime on Mac OS X 10.3 and later.\n+\n+@item -fobjc-exceptions\n+@opindex -fobjc-exceptions\n+Enable syntactic support for structured exception handling in Objective-C, \n+similar to what is offered by C++ and Java.  Currently, this option is only \n+available in conjunciton with the NeXT runtime on Mac OS X 10.3 and later. \n+\n+@smallexample\n+  @@try @{\n+    @dots{}\n+       @@throw expr;\n+    @dots{}\n+  @}\n+  @@catch (AnObjCClass *exc) @{\n+    @dots{}\n+      @@throw expr;\n+    @dots{}\n+      @@throw;\n+    @dots{}\n+  @}\n+  @@catch (AnotherClass *exc) @{\n+    @dots{}\n+  @}\n+  @@catch (id allOthers) @{\n+    @dots{}\n+  @}\n+  @@finally @{\n+    @dots{}\n+      @@throw expr;\n+    @dots{}\n+  @}\n+@end smallexample\n+\n+The @code{@@throw} statement may appear anywhere in an Objective-C or\n+Objective-C++ program; when used inside of a @code{@@catch} block, the \n+@code{@@throw} may appear without an argument (as shown above), in which case \n+the object caught by the @code{@@catch} will be rethrown.\n+\n+Note that only (pointers to) Objective-C objects may be thrown and\n+caught using this scheme.  When an object is thrown, it will be caught\n+by the nearest @code{@@catch} clause capable of handling objects of that type,\n+analogously to how @code{catch} blocks work in C++ and Java.  A \n+@code{@@catch(id @dots{})} clause (as shown above) may also be provided to catch \n+any and all Objective-C exceptions not caught by previous @code{@@catch}\n+clauses (if any).\n+\n+The @code{@@finally} clause, if present, will be executed upon exit from the\n+immediately preceding @code{@@try @dots{} @@catch} section.  This will happen\n+regardless of whether any exceptions are thrown, caught or rethrown\n+inside the @code{@@try @dots{} @@catch} section, analogously to the behavior\n+of the @code{finally} clause in Java.\n+\n+There are several caveats to using the new exception mechanism:\n+\n+@itemize @bullet\n+@item\n+Although currently designed to be binary compatible with @code{NS_HANDLER}-style \n+idioms provided by the @code{NSException} class, the new\n+exceptions can only be used on Mac OS X 10.3 (Panther) and later\n+systems, due to additional functionality needed in the (NeXT) Objective-C\n+runtime.\n+\n+@item\n+As mentioned above, the new exceptions do not support handling\n+types other than Objective-C objects.   Furthermore, when used from \n+Objective-C++, the Objective-C exception model does not interoperate with C++\n+exceptions at this time.  This means you cannot @code{@@throw} an exception\n+from Objective-C and @code{catch} it in C++, or vice versa \n+(i.e., @code{throw @dots{} @@catch}).\n+@end itemize\n+ \n+The @option{-fobjc-exceptions} switch also enables the use of synchronization\n+blocks for thread-safe execution:\n+\n+@smallexample\n+  @@synchronized (ObjCClass *guard) @{\n+    @dots{}\n+  @}\n+@end smallexample\n+\n+Upon entering the @code{@@synchronized} block, a thread of execution shall\n+first check whether a lock has been placed on the corresponding @code{guard}\n+object by another thread.  If it has, the current thread shall wait until\n+the other thread relinquishes its lock.  Once @code{guard} becomes available, \n+the current thread will place its own lock on it, execute the code contained in\n+the @code{@@synchronized} block, and finally relinquish the lock (thereby\n+making @code{guard} available to other threads).\n+\n+Unlike Java, Objective-C does not allow for entire methods to be marked\n+@code{@@synchronized}.  Note that throwing exceptions out of\n+@code{@@synchronized} blocks is allowed, and will cause the guarding object\n+to be unlocked properly.\n+\n+@item -freplace-objc-classes\n+@opindex -freplace-objc-classes\n+Emit a special marker instructing @command{ld(1)} not to statically link in\n+the resulting object file, and allow @command{dyld(1)} to load it in at\n+run time instead.  This is used in conjunction with the Fix-and-Continue\n+debugging mode, where the object file in question may be recompiled and \n+dynamically reloaded in the course of program execution, without the need\n+to restart the program itself.  Currently, Fix-and-Continue functionality\n+is only available in conjunciton withthe NeXT runtime on Mac OS X 10.3 \n+and later.\n+\n+@item -fzero-link\n+@opindex -fzero-link\n+When compiling for the NeXT runtime, the compiler ordinarily replaces calls\n+to @code{objc_getClass(\"@dots{}\")} (when the name of the class is known at\n+compile time) with static class references that get initialized at load time,\n+which improves run-time performance.  Specifying the @option{-fzero-link} flag\n+suppresses this behavior and causes calls to @code{objc_getClass(\"@dots{}\")}\n+to be retained.  This is useful in Zero-Link debugging mode, since it allows \n+for individual class implementations to be modified during program execution.\n+\n @item -gen-decls\n @opindex gen-decls\n Dump interface declarations for all classes seen in the source file to a"}, {"sha": "9c06d95a09582e757d034be9bab4d10c2f7363af", "filename": "gcc/function.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -19,6 +19,9 @@ along with GCC; see the file COPYING.  If not, write to the Free\n Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n+#ifndef GCC_FUNCTION_H\n+#define GCC_FUNCTION_H\n+\n struct var_refs_queue GTY(())\n {\n   rtx modified;\n@@ -628,3 +631,5 @@ extern void init_virtual_regs (struct emit_status *);\n \n /* Called once, at initialization, to initialize function.c.  */\n extern void init_function_once (void);\n+\n+#endif  /* GCC_FUNCTION_H */"}, {"sha": "bbdf9913be489493c5ec791d945a20da0880a220", "filename": "gcc/gengtype-lex.l", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fgengtype-lex.l", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fgengtype-lex.l", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-lex.l?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -194,6 +194,8 @@ ITYPE\t{IWORD}({WS}{IWORD})*\n \n ^\"%{\"\t\t\t\t{ BEGIN(in_yacc_escape); }\n \n+^\"@@\".*\t\t\t\t/* Used for c-parse.in C/ObjC demarcation.  */\n+\n {WS}\t\t\t\t{ update_lineno (yytext, yyleng); }\n \n \"const\"/[^[:alnum:]_]\t\t/* don't care */"}, {"sha": "c716e73c73ff03ee496ed92bdeb78b8cf96574ce", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -86,8 +86,8 @@ $(parsedir)/objc/objc-parse.c : $(parsedir)/objc/objc-parse.y\n \n $(parsedir)/objc/objc-parse.y: $(srcdir)/c-parse.in\n \techo '/*WARNING: This file is automatically generated!*/' >tmp-objc-prs.y\n-\tsed -e \"/^ifc$$/,/^end ifc$$/d\" \\\n-\t  -e \"/^ifobjc$$/d\" -e \"/^end ifobjc$$/d\" \\\n+\tsed -e \"/^@@ifc.*/,/^@@end_ifc.*/d\" \\\n+\t  -e \"/^@@ifobjc.*/d\" -e \"/^@@end_ifobjc.*/d\" \\\n \t  $(srcdir)/c-parse.in >>tmp-objc-prs.y\n \t$(SHELL) $(srcdir)/move-if-change tmp-objc-prs.y $(parsedir)/objc/objc-parse.y\n "}, {"sha": "39cbe5ca39c4ef986de3fbb4190cb3c8373c0b32", "filename": "gcc/objc/lang-specs.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fobjc%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fobjc%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Flang-specs.h?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -39,8 +39,8 @@ Boston, MA 02111-1307, USA.  */\n      \"%{!M:%{!MM:%{!E:cc1obj -fpreprocessed %i %(cc1_options) %{gen-decls}\\\n \t\t\t     %{!fsyntax-only:%(invoke_as)}}}}\", 0},\n   {\"@objective-c-header\",\n-     \"%{E|M|MM:%(trad_capable_cpp)\\\n-          -lang-objc %(cpp_options) %(cpp_debug_options)}\\\n+     \"%{E|M|MM:cc1obj -E %{traditional|ftraditional|traditional-cpp:-traditional-cpp}\\\n+          %(cpp_options) %(cpp_debug_options)}\\\n       %{!E:%{!M:%{!MM:\\\n \t%{traditional|ftraditional|traditional-cpp:\\\n %eGNU Objective C no longer supports traditional compilation}\\"}, {"sha": "40c7004f7846d5155deb9fd24f5ef995d7c6cb9b", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 2037, "deletions": 1214, "changes": 3251, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57"}, {"sha": "0dade33c091d8c6e300752cc71c6921a88c559d5", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 80, "deletions": 11, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -38,16 +38,26 @@ void continue_method_def (void);\n void finish_method_def (void);\n tree start_protocol (enum tree_code, tree, tree);\n void finish_protocol (tree);\n-void add_objc_decls (void);\n+\n+tree objc_build_throw_stmt (tree);\n+tree objc_build_try_catch_finally_stmt (int, int);\n+void objc_build_synchronized_prologue (tree);\n+tree objc_build_synchronized_epilogue (void);\n+tree objc_build_try_prologue (void);\n+void objc_build_try_epilogue (int);\n+void objc_build_catch_stmt (tree);\n+void objc_build_catch_epilogue (void);\n+tree objc_build_finally_prologue (void);\n+tree objc_build_finally_epilogue (void);\n \n tree is_ivar (tree, tree);\n int is_private (tree);\n int is_public (tree, tree);\n tree add_instance_variable (tree, int, tree, tree, tree);\n-tree add_class_method (tree, tree);\n-tree add_instance_method (tree, tree);\n+tree add_method (tree, tree, int);\n tree get_super_receiver (void);\n-tree get_class_ivars (tree);\n+void objc_clear_super_receiver (void);\n+tree get_class_ivars_from_name (tree);\n tree get_class_reference (tree);\n tree get_static_reference (tree, tree);\n tree get_object_reference (tree);\n@@ -75,6 +85,9 @@ tree build_encode_expr (tree);\n \n /* Objective-C structures */\n \n+#define CLASS_BINFO_ELTS\t\t6\n+#define PROTOCOL_BINFO_ELTS\t\t2\n+\n /* KEYWORD_DECL */\n #define KEYWORD_KEY_NAME(DECL) ((DECL)->decl.name)\n #define KEYWORD_ARG_NAME(DECL) ((DECL)->decl.arguments)\n@@ -105,26 +118,33 @@ tree build_encode_expr (tree);\n #define PROTOCOL_CLS_METHODS(CLASS) ((CLASS)->type.maxval)\n #define PROTOCOL_FORWARD_DECL(CLASS) TREE_VEC_ELT (TYPE_BINFO (CLASS), 1)\n #define PROTOCOL_DEFINED(CLASS) TREE_USED (CLASS)\n-#define TYPE_PROTOCOL_LIST(TYPE)\t\t\t\t\t\\\n-  ((!TYPE_CHECK (TYPE)->type.context\t\t\t\t\t\\\n-    || TREE_CODE ((TYPE)->type.context) == TRANSLATION_UNIT_DECL)\t\\\n-   ? NULL_TREE : (TYPE)->type.context)\n+/* We need to distinguish TYPE_PROTOCOL_LISTs from TYPE_CONTEXTs, both of which\n+   are stored in the same accessor slot.  */\n+#define TYPE_PROTOCOL_LIST(TYPE)\t\t\t\t\\\n+\t((TYPE_CHECK (TYPE)->type.context\t\t\t\\\n+\t  && TREE_CODE ((TYPE)->type.context) == TREE_LIST)\t\\\n+\t ? (TYPE)->type.context : NULL_TREE)\n #define SET_TYPE_PROTOCOL_LIST(TYPE, P) (TYPE_CHECK (TYPE)->type.context = (P))\n \n /* Set by `continue_class' and checked by `is_public'.  */\n \n #define TREE_STATIC_TEMPLATE(record_type) (TREE_PUBLIC (record_type))\n #define TYPED_OBJECT(type) \\\n        (TREE_CODE (type) == RECORD_TYPE && TREE_STATIC_TEMPLATE (type))\n+#define OBJC_TYPE_NAME(type) TYPE_NAME(type)\n \n /* Define the Objective-C or Objective-C++ language-specific tree codes.  */\n \n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) SYM,\n enum objc_tree_code {\n-#ifdef OBJCPLUS\n+#if defined (GCC_CP_TREE_H)\n   LAST_BASE_TREE_CODE = LAST_CPLUS_TREE_CODE,\n-#else\n+#else \n+#if defined (GCC_C_TREE_H)\n   LAST_BASE_TREE_CODE = LAST_C_TREE_CODE,\n+#else\n+  #error You must include <c-tree.h> or <cp/cp-tree.h> before <objc/objc-act.h>\n+#endif\n #endif\n #include \"objc-tree.def\"\n   LAST_OBJC_TREE_CODE\n@@ -182,6 +202,8 @@ enum objc_tree_index\n     OCTI_SELF_DECL,\n     OCTI_UMSG_DECL,\n     OCTI_UMSG_SUPER_DECL,\n+    OCTI_UMSG_STRET_DECL,\n+    OCTI_UMSG_SUPER_STRET_DECL,\n     OCTI_GET_CLASS_DECL,\n     OCTI_GET_MCLASS_DECL,\n     OCTI_SUPER_TYPE,\n@@ -245,6 +267,24 @@ enum objc_tree_index\n     OCTI_CNST_STR_GLOB_ID,\n     OCTI_STRING_CLASS_DECL,\n     OCTI_SUPER_DECL,\n+    OCTI_UMSG_NONNIL_DECL,\n+    OCTI_UMSG_NONNIL_STRET_DECL,\n+    OCTI_STORAGE_CLS,\n+    OCTI_EXCEPTION_EXTRACT_DECL,\n+    OCTI_EXCEPTION_TRY_ENTER_DECL,\n+    OCTI_EXCEPTION_TRY_EXIT_DECL,\n+    OCTI_EXCEPTION_MATCH_DECL,\n+    OCTI_EXCEPTION_THROW_DECL,\n+    OCTI_SYNC_ENTER_DECL,\n+    OCTI_SYNC_EXIT_DECL,\n+    OCTI_SETJMP_DECL,\n+    OCTI_EXCDATA_TEMPL,\n+    OCTI_STACK_EXCEPTION_DATA_DECL,\n+    OCTI_LOCAL_EXCEPTION_DECL,\n+    OCTI_RETHROW_EXCEPTION_DECL,\n+    OCTI_EVAL_ONCE_DECL,\n+    OCTI_EXCEPTION_BLK_STACK,\n+    OCTI_CATCH_TYPE,\n \n     OCTI_MAX\n };\n@@ -267,6 +307,8 @@ extern GTY(()) tree objc_global_trees[OCTI_MAX];\n #define self_decl\t\tobjc_global_trees[OCTI_SELF_DECL]\n #define umsg_decl\t\tobjc_global_trees[OCTI_UMSG_DECL]\n #define umsg_super_decl\t\tobjc_global_trees[OCTI_UMSG_SUPER_DECL]\n+#define umsg_stret_decl\t\tobjc_global_trees[OCTI_UMSG_STRET_DECL]\n+#define umsg_super_stret_decl\tobjc_global_trees[OCTI_UMSG_SUPER_STRET_DECL]\n #define objc_get_class_decl\tobjc_global_trees[OCTI_GET_CLASS_DECL]\n #define objc_get_meta_class_decl\t\t\t\\\n \t\t\t\tobjc_global_trees[OCTI_GET_MCLASS_DECL]\n@@ -285,7 +327,7 @@ extern GTY(()) tree objc_global_trees[OCTI_MAX];\n #define IS_PROTOCOL_QUALIFIED_ID(TYPE) \\\n   (IS_ID (TYPE) && TYPE_PROTOCOL_LIST (TYPE))\n #define IS_SUPER(TYPE) \\\n-  (super_type && TYPE_MAIN_VARIANT (TYPE) == TYPE_MAIN_VARIANT (super_type))\n+  (TREE_CODE (TYPE) == POINTER_TYPE && TREE_TYPE (TYPE) == objc_super_template)\n \n #define class_chain\t\tobjc_global_trees[OCTI_CLS_CHAIN]\n #define alias_chain\t\tobjc_global_trees[OCTI_ALIAS_CHAIN]\n@@ -339,6 +381,33 @@ extern GTY(()) tree objc_global_trees[OCTI_MAX];\n #define ucls_super_ref\t\tobjc_global_trees[OCTI_UCLS_SUPER_REF]\n #define uucls_super_ref\t\tobjc_global_trees[OCTI_UUCLS_SUPER_REF]\n \n+#define umsg_nonnil_decl\tobjc_global_trees[OCTI_UMSG_NONNIL_DECL]\n+#define umsg_nonnil_stret_decl\tobjc_global_trees[OCTI_UMSG_NONNIL_STRET_DECL]\n+#define objc_storage_class\tobjc_global_trees[OCTI_STORAGE_CLS]\n+#define objc_exception_extract_decl\t\t\\\n+\t\t\t\tobjc_global_trees[OCTI_EXCEPTION_EXTRACT_DECL]\n+#define objc_exception_try_enter_decl\t\t\\\n+\t\t\t\tobjc_global_trees[OCTI_EXCEPTION_TRY_ENTER_DECL]\n+#define objc_exception_try_exit_decl\t\t\\\n+\t\t\t\tobjc_global_trees[OCTI_EXCEPTION_TRY_EXIT_DECL]\n+#define objc_exception_match_decl\t\t\\\n+\t\t\t\tobjc_global_trees[OCTI_EXCEPTION_MATCH_DECL]\n+#define objc_exception_throw_decl\t\t\\\n+\t\t\t\tobjc_global_trees[OCTI_EXCEPTION_THROW_DECL]\n+#define objc_sync_enter_decl\tobjc_global_trees[OCTI_SYNC_ENTER_DECL]\n+#define objc_sync_exit_decl\tobjc_global_trees[OCTI_SYNC_EXIT_DECL]\n+#define objc_exception_data_template\t\t\\\n+\t\t\t\tobjc_global_trees[OCTI_EXCDATA_TEMPL]\n+#define objc_setjmp_decl\tobjc_global_trees[OCTI_SETJMP_DECL]\n+#define objc_stack_exception_data\t\t\\\n+\t\t\t\tobjc_global_trees[OCTI_STACK_EXCEPTION_DATA_DECL]\n+#define objc_caught_exception\tobjc_global_trees[OCTI_LOCAL_EXCEPTION_DECL]\t\n+#define objc_rethrow_exception\tobjc_global_trees[OCTI_RETHROW_EXCEPTION_DECL]\t\n+#define objc_eval_once\t\tobjc_global_trees[OCTI_EVAL_ONCE_DECL]\t\n+#define objc_exception_block_stack\t\t\\\n+\t\t\t\tobjc_global_trees[OCTI_EXCEPTION_BLK_STACK]\n+#define objc_catch_type\t\tobjc_global_trees[OCTI_CATCH_TYPE]\n+\n #define objc_method_template\tobjc_global_trees[OCTI_METH_TEMPL]\n #define objc_ivar_template\tobjc_global_trees[OCTI_IVAR_TEMPL]\n #define objc_symtab_template\tobjc_global_trees[OCTI_SYMTAB_TEMPL]"}, {"sha": "aa2e40feb0b02b440cbfeff73b8ddb918c63b0f6", "filename": "gcc/objc/objc-tree.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fobjc%2Fobjc-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fobjc%2Fobjc-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-tree.def?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -33,3 +33,7 @@ DEFTREECODE (PROTOCOL_INTERFACE_TYPE, \"protocol_interface_type\", 't', 0)\n DEFTREECODE (KEYWORD_DECL, \"keyword_decl\", 'd', 0)\n DEFTREECODE (INSTANCE_METHOD_DECL, \"instance_method_decl\", 'd', 0)\n DEFTREECODE (CLASS_METHOD_DECL, \"class_method_decl\", 'd', 0)\n+\n+/* Objective-C expressions.  */\n+DEFTREECODE (MESSAGE_SEND_EXPR, \"message_send_expr\", 'e', 3)\n+DEFTREECODE (CLASS_REFERENCE_EXPR, \"class_reference_expr\", 'e', 1)"}, {"sha": "4e7a1987a3905bbff73d236740ea935161a9b806", "filename": "gcc/stub-objc.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstub-objc.c?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,71 @@\n+/* Stub functions for Objective-C and Objective-C++ routines\n+   that are called from within the C and C++ front-ends,\n+   respectively.\n+   Copyright (C) 1991, 1995, 1997, 1998,\n+   1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tree.h\"\n+#include \"c-common.h\"\n+\n+tree\n+lookup_interface (tree arg ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+tree\n+is_class_name (tree arg ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+tree\n+objc_is_object_ptr (tree arg ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+tree\n+lookup_objc_ivar (tree arg ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+void\n+objc_check_decl (tree decl ATTRIBUTE_UNUSED)\n+{\n+}\n+   \n+int\n+objc_comptypes (tree lhs ATTRIBUTE_UNUSED, tree rhs ATTRIBUTE_UNUSED,\n+                int reflexive ATTRIBUTE_UNUSED)\n+{ \n+  return -1;\n+}\n+\n+tree\n+objc_message_selector (void)\n+{ \n+  return 0;\n+}\n+"}, {"sha": "dd4c187e043c9a2eab24895ba590e690fda47801", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -1,3 +1,31 @@\n+2003-09-24  Ziemowit Laski  <zlaski@apple.com>\n+\n+\tMERGE OF objc-improvements-branch into MAINLINE:\n+\t* lib/objc.exp (objc_target_compile): Do not point at libobjc headers\n+\tif libobjc has not been built.\n+\t* objc/execute/IMP.m, objc/execute/_cmd.m, objc/execute/bf-common.h,\n+\tobjc/execute/bycopy-3.m, objc/execute/class-{1-14}.m, objc/execute/class-self-2.m,\n+\tobjc/execute/many_args_method.m, objc/execute/nested-3.m, objc/execute/np-2.m,\n+\tobjc/execute/object_is_class.m, objc/execute/object_is_meta_class.m,\n+\tobjc/execute/redefining_self.m, objc/execute/root_methods.m,\n+\tobjc/execute/static-{1-2}.m, objc/execute/string-{1-4}.m, objc/execute/va_method.m,\n+\tobjc.dg/comp-types-4.m, objc.dg/headers.m, objc.dg/special/unclaimed-category-1.h,\n+\tobjc.dg/special/unclaimed-category-1.m: Make usable with NeXT as well as GNU runtime.\n+\t* execute/next_mapping.h: New header, for GNU->NeXT impedance matching.\n+\t* execute/cascading-1.m, execute/function-message-1.m, objc.dg/anon-1.m,\n+\tobjc.dg/bitfield-{3-4}.m, objc.dg/call-super-{1-3}.m, objc.dg/category-1.m,\n+\tobjc.dg/const-str-{3-6}.m, objc.dg/encode-{1-4}.m, objc.dg/func-ptr-1.m,\n+\tobjc.dg/gnu-runtime-1.m, objc.dg/image-info.m, objc.dg/method-{3-12}.m,\n+\tobjc.dg/missing-proto-{1-3}.m, objc.dg/nested-func-1.m, objc.dg/proto-lossage-2.m,\n+\tobjc.dg/proto-qual-1.m, objc.dg/sizeof-1.m, objc.dg/static-1.m, objc.dg/symtab-1.m,\n+\tobjc.dg/try-catch-{1-4}.m, objc.dg/type-size-{1-2}.m, objc.dg/zero-link-{1-2}.m:\n+\tNew test cases.\n+\t* objc.dg/bitfield-2.m: Run only on Darwin.\n+\t* objc.dg/class-2.m, objc.dg/comp-types-1.m, objc.dg/desig-init-1.m,\n+\tobjc.dg/method-{1-2}.m, objc.dg/proto-hier-1.m, objc.dg/proto-lossage-1.m:\n+\tAdjust for message wording changes.\n+\t* objc.dg/const-str-1.m: Fix constant string layout.\n+ \n 2003-09-24  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* gcc.dg/cpp/Wunknown-pragmas-1.c: New test."}, {"sha": "1817c7022e86337a9aea1a9cb992e060968352cf", "filename": "gcc/testsuite/lib/objc.exp", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobjc.exp?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -168,13 +168,15 @@ proc objc_target_compile { source dest type options } {\n \tset options [concat \"additional_flags=$TOOL_OPTIONS\" $options];\n     }\n \n-    # Point to the ObjC headers in libobjc.\n-    set objc_include_dir \"${srcdir}/../../libobjc\"\n-    lappend options \"additional_flags=-I${objc_include_dir}\"\n+    # If we have built libobjc along with the compiler (which usually\n+    # _is not_ the case on Mac OS X systems), point the test harness\n+    # at it (and associated headers).\n \n     set objcpath \"[get_multilibs]\"\n     set libobjc_dir [lookfor_file ${objcpath} libobjc/.libs/libobjc.a]\n     if { $libobjc_dir != \"\" } {\n+\tset objc_include_dir \"${srcdir}/../../libobjc\"\n+\tlappend options \"additional_flags=-I${objc_include_dir}\"\n \tset libobjc_dir [file dirname ${libobjc_dir}]\n \tset objc_link_flags \"-L${libobjc_dir}\"\n \tlappend options \"additional_flags=${objc_link_flags}\""}, {"sha": "5f10f7d60261fd7ce3495cae83c11f785cdcffad", "filename": "gcc/testsuite/objc.dg/anon-1.m", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fanon-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fanon-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fanon-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,14 @@\n+/* Test for graceful handling of anonymous ivars.  */\n+/* { dg-do compile } */\n+\n+@interface Foo {\n+   unsigned char : 1;\n+   int e: 3;\n+   signed: 2;\n+   float f;\n+}\n+@end\n+\n+@implementation Foo\n+@end\n+"}, {"sha": "83b317483711f05abb8f193ec0e1d0c6ecba5fd5", "filename": "gcc/testsuite/objc.dg/bitfield-2.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-2.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -2,7 +2,7 @@\n    the NeXT runtime is used.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n /* { dg-options \"-fnext-runtime -fsigned-char\" } */\n-/* { dg-do run } */\n+/* { dg-do run { target *-*-darwin* } } */\n \n struct objc_object { struct objc_class *class_pointer; } *id;\n "}, {"sha": "f427a3018ad00944e990c7d07415adba3cbaa4c1", "filename": "gcc/testsuite/objc.dg/bitfield-3.m", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-3.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,50 @@\n+/* Check if the @defs() construct preserves the correct\n+   layout of bitfields.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-options \"-lobjc -Wpadded\" } */\n+/* { dg-do run } */\n+\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+\n+extern void abort(void);\n+extern int strcmp(const char *str1, const char *str2);\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+enum Enum { one, two, three, four };\n+\n+@interface Base: Object {\n+  unsigned a: 2;\n+  int b: 3;\n+  enum Enum c: 4;\n+  unsigned d: 5;\n+} /* { dg-warning \"padding struct size to alignment boundary\" } */\n+@end\n+\n+@interface Derived: Base {\n+  signed e: 5;\n+  int f: 4;\n+  enum Enum g: 3;\n+} /* { dg-warning \"padding struct size to alignment boundary\" } */\n+@end\n+  \n+/* Note that the semicolon after @defs(...) is optional.  */\n+\n+typedef struct { @defs(Base) } Base_t;  /* { dg-warning \"padding struct size to alignment boundary\" } */\n+typedef struct { @defs(Derived); } Derived_t;  /* { dg-warning \"padding struct size to alignment boundary\" } */\n+\n+int main(void)\n+{\n+  CHECK_IF(sizeof(Base_t) == sizeof(Base));\n+  CHECK_IF(sizeof(Derived_t) == sizeof(Derived));\n+\n+#ifdef __NEXT_RUNTIME__\n+  CHECK_IF(!strcmp(@encode(Base), \"{Base=#b2b3b4b5}\"));\n+  CHECK_IF(!strcmp(@encode(Derived), \"{Derived=#b2b3b4b5b5b4b3}\"));\n+\n+  CHECK_IF(!strcmp(@encode(Base_t), \"{?=#b2b3b4b5}\"));\n+  CHECK_IF(!strcmp(@encode(Derived_t), \"{?=#b2b3b4b5b5b4b3}\"));\n+#endif /* __NEXT_RUNTIME__ */\n+\n+  return 0;\n+}"}, {"sha": "858bac2b00391b99dd2384ff0eff9729e5301577", "filename": "gcc/testsuite/objc.dg/bitfield-4.m", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-4.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,29 @@\n+/* Make sure that bitfield types are printed correctly, and that ivar redeclaration\n+  (@interface vs. @implementation) checks take the bitfield width into account.  */\n+/* Author: Ziemowit Laski   <zlaski@apple.com>  */\n+/* { dg-do compile } */\n+\n+@interface Base {\n+  int i;\n+}\n+@end\n+\n+@interface WithBitfields: Base {\n+  void *isa;\n+  unsigned a: 3;\n+  signed b: 4;\n+  int c: 5;\n+}\n+@end\n+\n+@implementation WithBitfields {\n+  char *isa;  /* { dg-error \"conflicting instance variable type .char \\\\*isa.\" } */\n+  /* { dg-error \"previous declaration of .void \\\\*isa.\" \"\" { target *-*-* } 12 } */\n+  unsigned a: 5;  /* { dg-error \"conflicting instance variable type .unsigned a: 5.\" } */\n+  /* { dg-error \"previous declaration of .unsigned a: 3.\" \"\" { target *-*-* } 13 } */                     \n+  signed b: 4;  /* This one is fine. */\n+  int c: 3;  /* { dg-error \"conflicting instance variable type .int c: 3.\" } */\n+  /* { dg-error \"previous declaration of .int c: 5.\" \"\" { target *-*-* } 15 } */ \n+}\n+@end\n+"}, {"sha": "19e0d4900dde66cda06388059106dce0654a0705", "filename": "gcc/testsuite/objc.dg/call-super-1.m", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,76 @@\n+/* Check if objc_super stack variables are created correctly (and\n+   not clobbered by other values).  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-options \"-std=c99 -lobjc\" } */\n+/* { dg-do run } */\n+\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+\n+extern void abort(void);\n+\n+#define CHECK_IF(expr) if(!(expr)) abort();\n+\n+typedef struct _Point { \n+  float x; \n+  float y; \n+} Point; \n+\n+Point MakePoint ( float x , float y ) { \n+  Point p; \n+  p.x = x; \n+  p.y = y; \n+  return p; \n+} \n+\n+@interface Base: Object \n+- ( void ) translateOriginToPoint : ( Point ) translation ; \n+@end\n+\n+@interface Derived : Base \n+- ( void ) scrollToPoint : ( Point ) newOrigin ; \n+- ( void ) translateOriginToPoint : ( Point ) translation ;\n+@end \n+\n+int blort;\n+float result;\n+\n+@implementation Base\n+- ( void ) translateOriginToPoint : ( Point ) translation  {\n+  result = translation.x + translation.y;\n+}\n+@end\n+\n+@implementation Derived\n+- ( void ) scrollToPoint : ( Point ) newOrigin { \n+  float transDeltaX =newOrigin.x, transDeltaY =newOrigin.y ; \n+  Point w;\n+  if ( ! blort ) {\n+    w.x = transDeltaX ; w.y = transDeltaY ;\n+    [ super translateOriginToPoint : w ] ; \n+    return;\n+  } \n+  [ super translateOriginToPoint : MakePoint ( transDeltaX , transDeltaY ) ] ; \n+  return; \n+} \n+- (void) translateOriginToPoint : ( Point ) translation  {\n+  /* This should never be called.  */\n+  CHECK_IF(0);\n+}\n+@end \n+\n+int main(void) {\n+  Derived *v = [Derived new];\n+  float r0 = 1.5 + 1.5;\n+  blort = 1;\n+  [v scrollToPoint: MakePoint(1.5, 1.5)];\n+  CHECK_IF(result == r0);\n+  blort = 0;\n+  [v scrollToPoint: MakePoint(1.5, 1.5)];\n+  CHECK_IF(result == r0);\n+  blort = 1;\n+  [v scrollToPoint: MakePoint(1.5, 1.5)];\n+  CHECK_IF(result == r0);\n+  [v free];\n+  return 0;\n+}"}, {"sha": "cd7db41bffe728e247222ea89622d1d397eda77c", "filename": "gcc/testsuite/objc.dg/call-super-2.m", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-2.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,139 @@\n+/* Check if casting 'self' or 'super' affects message lookup in the\n+   correct way.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+\n+#ifdef __NEXT_RUNTIME__\n+#define OBJC_GETCLASS objc_getClass\n+#else\n+#define OBJC_GETCLASS objc_get_class\n+#endif\n+\n+@protocol Func\n++ (int) class_func0;\n+- (int) instance_func0;\n+@end\n+\n+@interface Derived: Object\n++ (int) class_func1;\n++ (int) class_func2;\n++ (int) class_func3;\n++ (int) class_func4;\n++ (int) class_func5;\n++ (int) class_func6;\n++ (int) class_func7;\n+- (int) instance_func1;\n+- (int) instance_func2;\n+- (int) instance_func3;\n+- (int) instance_func4;\n+- (int) instance_func5;\n+- (int) instance_func6;\n+- (int) instance_func7;\n+@end\n+\n+@interface Derived (Categ)\n++ (int) categ_class_func1;\n++ (int) categ_class_func2;\n+- (int) categ_instance_func1;\n+- (int) categ_instance_func2;\n+@end\n+\n+@implementation Derived\n++ (int) class_func1\n+{\n+   int i = (int)[self class_func0];       /* { dg-warning \".Derived. may not respond to .\\\\+class_func0.\" } */\n+       /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 47 } */\n+       /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 47 } */\n+       /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 47 } */\n+   return i + (int)[super class_func0];   /* { dg-warning \".Object. may not respond to .\\\\+class_func0.\" } */\n+}\n++ (int) class_func2\n+{\n+   int i = [(id <Func>)self class_func0];\n+   return i + [(id <Func>)super class_func0];\n+}\n++ (int) class_func3\n+{\n+   return [(Object <Func> *)super class_func0];\n+}\n++ (int) class_func4\n+{\n+   return [(Derived <Func> *)super class_func0];\n+}   \n++ (int) class_func5\n+{\n+   int i = (int)[Derived class_func0];    /* { dg-warning \".Derived. may not respond to .\\\\+class_func0.\" } */\n+   return i + (int)[Object class_func0];  /* { dg-warning \".Object. may not respond to .\\\\+class_func0.\" } */\n+}\n++ (int) class_func6\n+{\n+   return (int)[OBJC_GETCLASS(\"Object\") class_func1];  /* { dg-warning \".Object. may not respond to .\\\\+class_func1.\" } */\n+}\n++ (int) class_func7\n+{\n+   return [OBJC_GETCLASS(\"Derived\") class_func1];\n+}\n+- (int) instance_func1\n+{\n+   int i = (int)[self instance_func0];     /* { dg-warning \".Derived. may not respond to .\\\\-instance_func0.\" } */\n+   return i + (int)[super instance_func0]; /* { dg-warning \".Object. may not respond to .\\\\-instance_func0.\" } */\n+}\n+- (int) instance_func2\n+{\n+   return [(id <Func>)super instance_func0];\n+}\n+- (int) instance_func3\n+{\n+   return [(Object <Func> *)super instance_func0];\n+}\n+- (int) instance_func4\n+{\n+   return [(Derived <Func> *)super instance_func0];\n+}   \n+- (int) instance_func5\n+{\n+   int i = (int)[Derived instance_func1]; /* { dg-warning \".Derived. may not respond to .\\\\+instance_func1.\" } */\n+   return i + (int)[Object instance_func1]; /* { dg-warning \".Object. may not respond to .\\\\+instance_func1.\" } */\n+}\n+- (int) instance_func6\n+{\n+   return (int)[OBJC_GETCLASS(\"Object\") class_func1]; /* { dg-warning \".Object. may not respond to .\\\\+class_func1.\" } */\n+}\n+- (int) instance_func7\n+{\n+   return [OBJC_GETCLASS(\"Derived\") class_func1];\n+}\n+@end\n+\n+@implementation Derived (Categ)\n++ (int) categ_class_func1\n+{\n+   int i = (int)[self class_func0];       /* { dg-warning \".Derived. may not respond to .\\\\+class_func0.\" } */\n+   i += [self class_func1];\n+   i += [self categ_class_func2];\n+   i += (int)[self categ_instance_func1]; /* { dg-warning \".Derived. may not respond to .\\\\+categ_instance_func1.\" } */\n+   return i + (int)[super class_func0];   /* { dg-warning \".Object. may not respond to .\\\\+class_func0.\" } */\n+}\n++ (int) categ_class_func2\n+{\n+   int i = [(id <Func>)self class_func0];\n+   return i + [(id <Func>)super class_func0];\n+}\n+- (int) categ_instance_func1\n+{\n+   int i = (int)[self instance_func0];    /* { dg-warning \".Derived. may not respond to .\\\\-instance_func0.\" } */\n+   i += [(Derived <Func> *)self categ_instance_func2];\n+   i += (int)[(Object <Func> *)self categ_instance_func2]; /* { dg-warning \".Object. may not respond to .\\\\-categ_instance_func2.\" } */\n+   /* { dg-warning \".\\\\-categ_instance_func2. not implemented by protocol\" \"\" { target *-*-* } 129 } */\n+   i += (int)[(id <Func>)self categ_instance_func2];  /* { dg-warning \".\\\\-categ_instance_func2. not implemented by protocol\" } */\n+   i += [(id)self categ_instance_func2];\n+   return i + (int)[super instance_func0];   /* { dg-warning \".Object. may not respond to .\\\\-instance_func0.\" } */\n+}\n+- (int) categ_instance_func2\n+{\n+   return [(id <Func>)super instance_func0];\n+}\n+@end"}, {"sha": "05b6233ff5f301190c27b9b5978b65d5c895e18e", "filename": "gcc/testsuite/objc.dg/call-super-3.m", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-3.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,54 @@\n+/* Check if sending messages to super does not interfere with sending messages\n+   to classes. */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-do run } */\n+/* { dg-options \"-lobjc\" } */\n+\n+#include <objc/Object.h>\n+\n+extern void abort(void);\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+@interface Base: Object\n++ (int) class_func1;\n+- (int) instance_func1;\n+@end\n+\n+@interface Derived: Base\n++ (int) class_func1;\n+@end\n+\n+@interface Derived (Categ)\n+- (int) instance_func1;\n+@end\n+\n+@implementation Base\n++ (int) class_func1 { return 234; }\n+- (int) instance_func1 { return 345; }\n+@end\n+\n+@implementation Derived\n++ (int) class_func1 { \n+  int i = [super class_func1];\n+  i += [Base class_func1];\n+  return i;\n+}\n+@end\n+\n+@implementation Derived (Categ)\n+- (int) instance_func1 { \n+  int i = [super instance_func1];\n+  i += [Base class_func1];  /* { dg-bogus \"invalid receiver type\" } */\n+  return i;\n+}\n+@end\n+\n+int main(void) {\n+  Base *base = [[Base alloc] init];  /* { dg-bogus \"invalid receiver type\" } */\n+  Derived *derived = [[Derived alloc] init];\n+  CHECK_IF([Base class_func1] == 234);  /* { dg-bogus \"invalid receiver type\" } */\n+  CHECK_IF([Derived class_func1] == 234 + 234);\n+  CHECK_IF([base instance_func1] == 345);\n+  CHECK_IF([derived instance_func1] == 234 + 345);\n+  return 0;\n+}"}, {"sha": "1d29e374aea99c92a55f37acbdc320ed4fde9fd2", "filename": "gcc/testsuite/objc.dg/category-1.m", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fcategory-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fcategory-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcategory-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,43 @@\n+/* Test class methods inside categories.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-options \"-lobjc\" } */\n+/* { dg-do run } */\n+\n+#include <objc/Object.h>\n+\n+#ifdef __NEXT_RUNTIME__\n+#define SUPERCLASS superclass\n+#else\n+#define SUPERCLASS superClass\n+#endif\n+\n+extern int strcmp(const char *s1, const char *s2);\n+extern void abort(void);\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+@interface MyObject: Object\n++ (Class)whatever1;\n+@end\n+\n+@implementation MyObject\n++ (Class)whatever1 { return [super SUPERCLASS]; }\n+@end\n+\n+@interface MyObject (ThisWontCompile)\n++(Class)whatever2;\n+@end\n+ \n+@implementation MyObject (ThisWontCompile)\n++(Class)whatever2 { return [super SUPERCLASS]; }\n+@end\n+\n+int main (int argc, const char * argv[])\n+{\n+  Class w1 = [MyObject whatever1];\n+  Class w2 = [MyObject whatever2];\n+\n+  CHECK_IF(!strcmp(w1->name, \"Object\"));\n+  CHECK_IF(!strcmp(w2->name, \"Object\"));\n+  return 0;\n+}\n+"}, {"sha": "b98d117f54c5f9df08b21e9dea968a26ed2081ec", "filename": "gcc/testsuite/objc.dg/class-2.m", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fclass-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fclass-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fclass-2.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -10,6 +10,5 @@ @interface supclass2\n @interface class1 : supclass1\n @end\n \n-@implementation class1 : supclass2\n-@end  /* { dg-error \"conflicting super class name\" } */\n-/* { dg-error \"previous declaration\" \"\" { target *-*-* } 14 } */\n+@implementation class1 : supclass2 /* { dg-error \"conflicting super class name\" } */\n+@end /* { dg-error \"previous declaration\" \"\" { target *-*-* } 13 } */"}, {"sha": "310b22634c0fe04dafd1f734c0129ce44f386166", "filename": "gcc/testsuite/objc.dg/comp-types-1.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -41,7 +41,7 @@ int main()\n      MyProtocol), but not from an 'id' or from a 'MyOtherClass *'\n      (which implements MyProtocol).  */\n   obj_p = obj;    /* Ok */\n-  obj_p = obj_c;  /* { dg-warning \"does not implement\" } */ /*FIXME: Duplicated*/\n+  obj_p = obj_c;  /* { dg-warning \"does not implement\" } */\n   obj_p = obj_cp; /* Ok  */\n   obj_p = obj_C;  /* { dg-warning \"incompatible pointer type\" } */\n "}, {"sha": "f15390a38d3527060de2d1d007a920664d04cbba", "filename": "gcc/testsuite/objc.dg/comp-types-4.m", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-4.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -3,6 +3,11 @@\n /* { dg-do compile } */\n #include <objc/objc.h>\n \n+/* The NeXT runtime headers do not define NULL.  */\n+#ifndef NULL\n+#define NULL ((void *)0)\n+#endif\n+\n @protocol MyProtocol\n - (void) method;\n @end"}, {"sha": "e4cac2e57ecdf7702acefbf75311892e33a855e5", "filename": "gcc/testsuite/objc.dg/const-str-1.m", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -2,12 +2,21 @@\n /* { dg-do compile } */\n /* { dg-options \"-fgnu-runtime\" } */\n \n+#ifdef __cplusplus\n+extern void baz(...);\n+#endif\n+\n void foo()\n {\n   baz(@\"hiya\");  /* { dg-error \"annot find interface declaration\" } */\n }\n \n @interface NXConstantString\n+{\n+  void *isa;\n+  char *str;\n+  int len;\n+}\n @end\n \n void bar()"}, {"sha": "edc03ff62c7df80ebd4fdd9c66bfc465d31931bd", "filename": "gcc/testsuite/objc.dg/const-str-3.m", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-3.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,46 @@\n+/* Test the -fconstant-string-class=Foo option under the NeXT\n+   runtime.  */\n+/* Developed by Markus Hitter <mah@jump-ing.de>.  */\n+\n+/* { dg-options \"-fnext-runtime -fconstant-string-class=Foo -lobjc\" } */\n+/* { dg-do run { target *-*-darwin* } } */\n+\n+#include <stdio.h>\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+\n+@interface Foo: Object {\n+  char *cString;\n+  unsigned int len;\n+}\n+- (char *)customString;\n+@end\n+\n+struct objc_class _FooClassReference;\n+\n+@implementation Foo : Object\n+- (char *)customString {\n+  return cString;\n+}\n+@end\n+\n+int main () {\n+  Foo *string = @\"bla\";\n+  Foo *string2 = @\"bla\";\n+\n+  if(string != string2)\n+    abort();\n+  printf(\"Strings are being uniqued properly\\n\");\n+\n+  /* This memcpy has to be done before the first message is sent to a\n+     constant string object. Can't be moved to +initialize since _that_\n+     is already a message. */\n+\n+  memcpy(&_FooClassReference, objc_getClass(\"Foo\"), sizeof(_FooClassReference));\n+  if (strcmp ([string customString], \"bla\")) {\n+    abort ();\n+  }\n+\n+  printf([@\"This is a working constant string object\\n\" customString]);\n+  return 0;\n+}"}, {"sha": "c178bfc4a0c57d67a5ccb40369e6b3634a214973", "filename": "gcc/testsuite/objc.dg/const-str-4.m", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-4.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,31 @@\n+/* Ensure that the preprocessor handles ObjC string constants gracefully. */\n+/* Author: Ziemowit Laski <zlaski@apple.com> */\n+/* { dg-options \"-fnext-runtime -fconstant-string-class=MyString -lobjc\" } */ \n+/* { dg-do run { target *-*-darwin* } } */\n+\n+extern void abort(void);\n+\n+@interface MyString\n+{\n+  void *isa;\n+  char *str;\n+  int len;\n+}\n+@end\n+\n+#define kMyStringMacro1 \"My String\"\n+#define kMyStringMacro2 @\"My String\"\n+\n+void *_MyStringClassReference;\n+\n+@implementation MyString\n+@end\n+\n+int main(void) {\n+  MyString* aString1 = @kMyStringMacro1;\n+  MyString* aString2 = kMyStringMacro2;\n+  if(aString1 != aString2) {\n+    abort();\n+  }\n+  return 0;\n+}"}, {"sha": "186edcfceb22635af5b6f6ca2f9d803cbd170782", "filename": "gcc/testsuite/objc.dg/const-str-5.m", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-5.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,27 @@\n+/* Positive test case for constant string layout.  */\n+/* Contributed by Ziemowit Laski  <zlaski@apple.com>.  */\n+\n+/* { dg-options \"-fconstant-string-class=MyConstantString\" } */\n+/* { dg-do compile } */\n+\n+@interface MyBase {\n+  const char *p;\n+}\n+@end\n+\n+@interface MyConstantString: MyBase {\n+  union {\n+    void     *u;\n+    unsigned char   *c;\n+  } _contents;\n+  unsigned int  _count;\n+}\n+@end\n+\n+/* The NeXT runtime initializes the 'isa' pointer of string constants at\n+   compile time.  */\n+#ifdef __NEXT_RUNTIME__\n+extern void *_MyConstantStringClassReference;\n+#endif\n+\n+MyConstantString *str = @\"Hello\";"}, {"sha": "a7cbbf7141a79efa7dafffaf7f98393f4c8da1e2", "filename": "gcc/testsuite/objc.dg/const-str-6.m", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-6.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,27 @@\n+/* Negative test case for constant string layout.  */\n+/* Contributed by Ziemowit Laski  <zlaski@apple.com>.  */\n+\n+/* { dg-options \"-fconstant-string-class=MyConstantString\" } */\n+/* { dg-do compile } */\n+\n+@interface MyBase {\n+  char p;\n+}\n+@end\n+\n+@interface MyConstantString: MyBase {\n+  union {\n+    void     *u;\n+    unsigned char   *c;\n+  } _contents;\n+  char  _count;\n+}\n+@end\n+\n+/* The NeXT runtime initializes the 'isa' pointer of string constants at\n+   compile time.  */\n+#ifdef __NEXT_RUNTIME__\n+extern void *_MyConstantStringClassReference;\n+#endif\n+\n+MyConstantString *str = @\"Hello\"; /* { dg-error \"interface .MyConstantString. does not have valid constant string layout\" } */"}, {"sha": "44abe440d7bc7d0dc6167b81413752ff6f31801c", "filename": "gcc/testsuite/objc.dg/desig-init-1.m", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fdesig-init-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fdesig-init-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fdesig-init-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -22,7 +22,10 @@ + (void) doTests {\n     0, \n     [Cls meth1], \n     [2 + 1] = 3, \n-    [2 * 2 ... 5] = [0 meth2], /* { dg-warning \"invalid receiver type\" } */ \n+    [2 * 2 ... 5] = (int)[0 meth2], /* { dg-warning \"invalid receiver type\" } */ \n+       /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 25 } */\n+       /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 25 } */\n+       /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 25 } */\n     [2] [Cls meth2]\n   };\n "}, {"sha": "868c3254753eeeb558f3a4524c53af74c144ddb3", "filename": "gcc/testsuite/objc.dg/encode-1.m", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,25 @@\n+/* Test if the Objective-C @encode machinery distinguishes between\n+   'BOOL *' (which should be encoded as a pointer to BOOL) and 'char *' (which\n+   should be encoded as '*').  This is somewhat tricky wrt the NeXT runtime,\n+   where we have 'typedef char BOOL'.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-options \"-fnext-runtime -lobjc\" } */\n+/* { dg-do run } */\n+\n+#include <string.h>           \n+#include <stdlib.h>\n+#include <objc/objc.h>\n+\n+int main(void) {\n+  const char *BOOL_ptr = @encode(BOOL *);\n+  const char *BOOL_ = @encode(BOOL);\n+  const char *char_ptr = @encode(char *);\n+\n+  if(*BOOL_ptr != '^' || strcmp(BOOL_ptr + 1, BOOL_))\n+    abort();\n+\n+  if(strcmp(char_ptr, \"*\"))\n+    abort();\n+\n+  return 0;\n+}"}, {"sha": "ebfd8d3fa2d108572644635523269233043cfeab", "filename": "gcc/testsuite/objc.dg/encode-2.m", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-2.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,97 @@\n+/* Test Objective-C method encodings. */\n+\n+/* The _encoded_ parameter offsets for Objective-C methods are \n+   computed inductively as follows:\n+    - The first paramter (self) has offset 0;\n+    - The k-th parameter (k > 1) has offset equal to the\n+      sum of:\n+        - the offset of the k-1-st paramter\n+        - the int-promoted size of the k-1-st parameter.\n+\n+   Note that the encoded offsets need not correspond\n+   to the actual placement of parameters (relative to 'self')\n+   on the stack!  Your target's ABI may have very different\n+   opinions on the matter.  */\n+\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-do run } */\n+\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+\n+#ifdef __NEXT_RUNTIME__\n+#define METHOD Method\n+#define OBJC_GETCLASS objc_getClass\n+#define CLASS_GETINSTANCEMETHOD class_getInstanceMethod\n+#else\n+#include <objc/objc-api.h>\n+#define METHOD Method_t\n+#define OBJC_GETCLASS objc_get_class\n+#define CLASS_GETINSTANCEMETHOD class_get_instance_method\n+#endif\n+\n+extern int sscanf(const char *str, const char *format, ...);\n+extern void abort(void);\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+@interface Foo: Object\n+typedef struct { float x, y; } XXPoint;\n+typedef struct { float width, height; } XXSize;\n+typedef struct _XXRect { XXPoint origin; XXSize size; } XXRect;\n+-(id)setRect:(XXRect)r withInt:(int)i;\n+-(void) char:(char)c float:(float)f double:(double)d long:(long)l;\n+@end\n+\n+XXRect my_rect;\n+unsigned offs1, offs2, offs3, offs4, offs5, offs6, offs7;\n+\n+@implementation Foo\n+-(id)setRect:(XXRect)r withInt:(int)i {\n+  unsigned offs = sizeof(self);\n+  CHECK_IF(offs == offs3);\n+  offs += sizeof(_cmd);\n+  CHECK_IF(offs == offs4);\n+  offs += sizeof(r);\n+  CHECK_IF(offs == offs5);\n+  offs += sizeof(i); \n+  CHECK_IF(offs == offs1); \n+  return nil; \n+}\n+-(void) char:(char)c float:(float)f double:(double)d long:(long)l {\n+  unsigned offs = sizeof(self);\n+  CHECK_IF(offs == offs3);\n+  offs += sizeof(_cmd);\n+  CHECK_IF(offs == offs4);\n+  offs += sizeof((int)c);\n+  CHECK_IF(offs == offs5);\n+  offs += sizeof(f);\n+  CHECK_IF(offs == offs6);\n+  offs += sizeof(d);\n+  CHECK_IF(offs == offs7);\n+  offs += sizeof(l);\n+  CHECK_IF(offs == offs1);\n+}\n+@end\n+\n+\n+int main(void) {\n+  Foo *foo = [[Foo alloc] init];\n+  Class fooClass = OBJC_GETCLASS(\"Foo\");\n+  METHOD meth;\n+\n+  meth = CLASS_GETINSTANCEMETHOD(fooClass, @selector(setRect:withInt:));\n+  offs2 = 9999;\n+  sscanf(meth->method_types, \"@%u@%u:%u{_XXRect={?=ff}{?=ff}}%ui%u\", &offs1, &offs2, &offs3,\n+      &offs4, &offs5);\n+  CHECK_IF(!offs2);\n+  [foo setRect:my_rect withInt:123];\n+\n+  meth = CLASS_GETINSTANCEMETHOD(fooClass, @selector(char:float:double:long:));\n+  offs2 = 9999;\n+  sscanf(meth->method_types, \"v%u@%u:%uc%uf%ud%ul%u\", &offs1, &offs2, &offs3,  \n+      &offs4, &offs5, &offs6, &offs7);\n+  CHECK_IF(!offs2);\n+  [foo char:'c' float:2.3 double:3.5 long:2345L];\n+\n+  return 0;\n+}  "}, {"sha": "b30b956b157c398b1a021f5b5c8ff03233684857", "filename": "gcc/testsuite/objc.dg/encode-3.m", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-3.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,66 @@\n+/* Method encoding tests for stand-alone @protocol declarations.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-do run } */\n+\n+#include <objc/Protocol.h>\n+#ifdef __cplusplus\n+#define ProtoBool bool\n+#else\n+#define ProtoBool _Bool\n+#endif\n+\n+#ifndef __NEXT_RUNTIME__\n+#include <objc/objc-api.h>\n+#endif\n+\n+extern int sscanf(const char *str, const char *format, ...);\n+extern void abort(void);\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+enum Enum {\n+  zero, one, two, three\n+};\n+typedef enum Enum Enum;\n+typedef signed char ObjCBool; /* as used by the NeXT runtime */\n+\n+@protocol Proto\n+union __XXAngle { unsigned int alpha, beta; };\n+typedef struct { float x, y; union __XXAngle a; } XXPoint;\n+typedef struct { double width, height; } XXSize;\n+typedef struct _XXRect { XXPoint origin; XXSize size; struct _XXRect *next; } XXRect;\n+- (void) char:(char)c float:(float)f double:(double)d unsigned:(unsigned)u short:(short)s long:(long)l;\n+- (void *)setRect:(XXRect)r withBool:(ProtoBool)b withInt:(int)i;\n++ (Enum *)getEnum:(XXPoint *)pt enum:(enum Enum)e bool:(ObjCBool)b;\n++ (ProtoBool **)getBool:(ObjCBool **)b;\n+@end\n+\n+Protocol *proto = @protocol(Proto);\n+struct objc_method_description *meth;\n+unsigned totsize, offs0, offs1, offs2, offs3, offs4, offs5, offs6, offs7;\n+\n+static void scan_initial(const char *pattern) {\n+  totsize = offs0 = offs1 = offs2 = offs3 = offs4 = offs5 = offs6 = offs7 = (unsigned)-1;\n+  sscanf(meth->types, pattern, &totsize, &offs0, &offs1, &offs2, &offs3,\n+      &offs4, &offs5, &offs6, &offs7);\n+  CHECK_IF(!offs0 && offs1 == sizeof(id) && offs2 == offs1 + sizeof(SEL) && totsize >= offs2);\n+}\n+\n+int main(void) {\n+  meth = [proto descriptionForInstanceMethod: @selector(char:float:double:unsigned:short:long:)];\n+  scan_initial(\"v%u@%u:%uc%uf%ud%uI%us%ul%u\");\n+  CHECK_IF(offs3 == offs2 + sizeof(int) && offs4 == offs3 + sizeof(float));\n+  CHECK_IF(offs5 == offs4 + sizeof(double) && offs6 == offs5 + sizeof(unsigned));\n+  CHECK_IF(offs7 == offs6 + sizeof(int) && totsize == offs7 + sizeof(long));\n+  meth = [proto descriptionForInstanceMethod: @selector(setRect:withBool:withInt:)];\n+  scan_initial(\"^v%u@%u:%u{_XXRect={?=ff(__XXAngle=II)}{?=dd}^{_XXRect}}%uB%ui%u\");\n+  CHECK_IF(offs3 == offs2 + sizeof(XXRect) && offs4 == offs3 + sizeof(int));\n+  CHECK_IF(totsize == offs4 + sizeof(int));\n+  meth = [proto descriptionForClassMethod: @selector(getEnum:enum:bool:)];\n+  scan_initial(\"^i%u@%u:%u^{?=ff(__XXAngle=II)}%ui%uc%u\");\n+  CHECK_IF(offs3 == offs2 + sizeof(XXPoint *) && offs4 == offs3 + sizeof(enum Enum));\n+  CHECK_IF(totsize == offs4 + sizeof(int));  /* 'ObjCBool' is really 'char' */\n+  meth = [proto descriptionForClassMethod: @selector(getBool:)];         \n+  scan_initial(\"^^B%u@%u:%u^*%u\");\n+  CHECK_IF(totsize == offs2 + sizeof(ObjCBool **));\n+  return 0;\n+}"}, {"sha": "1f179e1dad5ef01e138b3748eb07fd09e1c29b3b", "filename": "gcc/testsuite/objc.dg/encode-4.m", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-4.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,73 @@\n+/* Encoding tests for ObjC class layouts.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-options \"-lobjc\" } */\n+/* { dg-do run } */\n+\n+#include <objc/Object.h>\n+#ifdef __NEXT_RUNTIME__\n+#include <objc/objc-class.h>\n+#define OBJC_GETCLASS objc_getClass\n+#else\n+#include <objc/objc-api.h>\n+#define OBJC_GETCLASS objc_get_class\n+#endif\n+\n+extern void abort(void);\n+extern int strcmp(const char *s1, const char *s2);\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+@class Int1, Int2;\n+struct Nested;\n+\n+struct Innermost {\n+  unsigned char a, b;\n+  struct Nested *encl;\n+};\n+\n+struct Nested {\n+  float a, b;\n+  Int1 *next;\n+  struct Innermost innermost;\n+};\n+\n+@interface Int1: Object {\n+  char a, b;\n+  Int2 *int2;\n+  struct Nested nested;\n+}\n+@end\n+\n+@interface Int2: Int1 {\n+  struct Innermost *innermost;\n+  Int1 *base;\n+}\n+@end\n+\n+@implementation Int1\n+@end\n+\n+@implementation Int2\n+@end\n+\n+struct objc_ivar *ivar;\n+\n+static void check_ivar(const char *name, const char *type) {\n+  CHECK_IF(!strcmp(ivar->ivar_name, name));\n+  CHECK_IF(!strcmp(ivar->ivar_type, type));\n+  ivar++;\n+}\n+\n+int main(void) {\n+  ivar = ((Class)OBJC_GETCLASS(\"Int1\"))->ivars->ivar_list;\n+  check_ivar(\"a\", \"c\");\n+  check_ivar(\"b\", \"c\");\n+  check_ivar(\"int2\", \"@\\\"Int2\\\"\");\n+  check_ivar(\"nested\", \n+    \"{Nested=\\\"a\\\"f\\\"b\\\"f\\\"next\\\"@\\\"Int1\\\"\\\"innermost\\\"{Innermost=\\\"a\\\"C\\\"b\\\"C\\\"encl\\\"^{Nested}}}\");\n+    \n+  ivar = ((Class)OBJC_GETCLASS(\"Int2\"))->ivars->ivar_list;\n+  check_ivar(\"innermost\", \"^{Innermost=CC^{Nested}}\");\n+  check_ivar(\"base\", \"@\\\"Int1\\\"\");\n+  \n+  return 0;\n+}"}, {"sha": "015d3ac292d61696d5a9648982e8ebd6f08ddc40", "filename": "gcc/testsuite/objc.dg/func-ptr-1.m", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Ffunc-ptr-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Ffunc-ptr-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ffunc-ptr-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,48 @@\n+/* Test for handling of function pointer ivars */\n+/* { dg-do run } */\n+\n+#include <objc/Object.h>\n+\n+extern int strcmp(const char *, const char *);\n+extern void abort(void);\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+typedef float (*floatfunc)(float, float);\n+\n+@interface MyObject : Object\n+{\n+@public\n+  int (*ivar)(int, int, int);\n+  floatfunc ffunc;\n+}\n+- init;\n+@end\n+\n+int foo(int a, int b, int c) {\n+  return a + b + c;\n+}\n+\n+float bar(float a, float b) {\n+  return a * b;\n+}\n+\n+@implementation MyObject\n+- init {\n+  [super init];\n+  ivar = foo;\n+  ffunc = bar;\n+  return self;\n+}\n+@end\n+\n+int main ()\n+{\n+  MyObject *obj = [[MyObject alloc] init];\n+  const char *enc = @encode(MyObject);\n+\n+  CHECK_IF(obj->ivar(4, 5, 6) == 15);\n+  CHECK_IF(obj->ffunc(34.0, 45.0) == 34.0 * 45.0);\n+  CHECK_IF(!strcmp(enc, \"{MyObject=#^?^?}\"));\n+  return(0);\n+}\n+"}, {"sha": "dab921554f190d4af6a445981890454e7308df17", "filename": "gcc/testsuite/objc.dg/gnu-runtime-1.m", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-runtime-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-runtime-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-runtime-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,19 @@\n+/* Test that compiling for the GNU runtime works (regardless of\n+   the system runtime used).  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>  */\n+/* { dg-do compile } */\n+/* { dg-options \"-fgnu-runtime\" } */\n+\n+#include <objc/Object.h>\n+\n+@interface FooBar: Object\n+- (void)boo;\n+@end\n+\n+int main ()\n+{\n+  id fooBarInst = [[FooBar alloc] init];\n+  [fooBarInst boo];\n+  return 0;\n+}\n+"}, {"sha": "4c61e1e552480c9da8143e355b13b4d2b2702620", "filename": "gcc/testsuite/objc.dg/headers.m", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fheaders.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fheaders.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fheaders.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -3,14 +3,29 @@\n // { dg-options \"-Wall -Wpointer-arith -Wcast-qual -Wstrict-prototypes -Wshadow\" }\n // { dg-do compile }\n \n+#ifdef __NEXT_RUNTIME__\n+#include <Foundation/NSString.h>\n+#else\n #include <objc/NXConstStr.h>\n+#endif\n #include <objc/Object.h>\n #include <objc/Protocol.h>\n+#ifdef __NEXT_RUNTIME__\n+#include <objc/objc-runtime.h>\n+#else\n #include <objc/encoding.h>\n #include <objc/hash.h>\n+#endif\n+\n #include <objc/objc-api.h>\n+#ifndef __NEXT_RUNTIME__\n #include <objc/objc-list.h>\n+#endif\n+\n #include <objc/objc.h>\n+\n+#ifndef __NEXT_RUNTIME__\n #include <objc/sarray.h>\n #include <objc/thr.h>\n #include <objc/typedstream.h>\n+#endif"}, {"sha": "84e6ad8d0e27a59dcca8ce15ad3201478af03a2a", "filename": "gcc/testsuite/objc.dg/image-info.m", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fimage-info.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fimage-info.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fimage-info.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,38 @@\n+/* Check if the '-freplace-objc-classes' option causes the\n+   __OBJC,__image_info section to be emitted.  This is only\n+   usable on MacOS X 10.3 and later. */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-options \"-freplace-objc-classes\" } */\n+/* { dg-do compile { target *-*-darwin* } } */\n+\n+#ifndef __NEXT_RUNTIME__\n+#error Feature not currently supported by the GNU runtime\n+#endif\n+\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+\n+extern void abort(void);\n+\n+#define CHECK_IF(expr) if(!(expr)) abort();\n+\n+@interface Base: Object {\n+@public\n+  int a;\n+  float b;\n+  char c;\n+}\n+- init;\n+@end\n+\n+@implementation Base\n+- init {\n+  [super init];\n+  a = 123;\n+  b = 1.23;\n+  c = 'c';\n+  return self;\n+}\n+@end\n+\n+/* { dg-final { scan-assembler \"\\n.data\\n.section __OBJC, __image_info\\n\\t.align.*\\nL_OBJC_IMAGE_INFO:\\n\\t.long\\t0\\n\\t.long\\t1\\n.data\\n.objc_module_info\\n\" } } */"}, {"sha": "391ee629c70b3f6ab3cb502e44a58beac3dc4469", "filename": "gcc/testsuite/objc.dg/method-1.m", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -3,12 +3,12 @@\n \n @interface class1\n - (int) meth1;\n-- (void) meth1;  /* { dg-error \"duplicate declaration of instance method\" } */\n+- (void) meth1;  /* { dg-error \"duplicate declaration of method .\\\\-meth1.\" } */\n @end\n \n @interface class2\n + (void) meth1;\n-+ (int) meth1;  /* { dg-error \"duplicate declaration of class method\" } */\n++ (int) meth1;  /* { dg-error \"duplicate declaration of method .\\\\+meth1.\" } */\n @end\n \n @interface class3\n@@ -17,8 +17,7 @@ - (int) meth1;\n \n @implementation class3\n - (int) meth1 { return 0; }\n-- (int) meth1 { return 0; }  /* { dg-error \"duplicate definition of instance method\" } */\n-/* { dg-error \"redefinition of\" \"\" { target *-*-* } 20 } */\n+- (int) meth1 { return 0; } /* { dg-error \"redefinition of\" } */\n /* { dg-error \"previously defined here\" \"\" { target *-*-* } 19 } */\n @end\n \n@@ -28,7 +27,6 @@ + (void) meth1;\n \n @implementation class4\n + (void) meth1 {}\n-+ (void) meth1 {}  /* { dg-error \"duplicate definition of class method\" } */\n-/* { dg-error \"redefinition of\" \"\" { target *-*-* } 31 } */\n-/* { dg-error \"previously defined here\" \"\" { target *-*-* } 30 } */\n++ (void) meth1 {} /* { dg-error \"redefinition of\" } */\n+/* { dg-error \"previously defined here\" \"\" { target *-*-* } 29 } */\n @end"}, {"sha": "5a2a1db34629381749e4b6197324b5abfdc5359e", "filename": "gcc/testsuite/objc.dg/method-10.m", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-10.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-10.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-10.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,32 @@\n+/* When there is only one candidate method available, make sure the\n+   compiler uses its argument/return types when constructing the\n+   message sends (so that proper C/C++ argument conversions may\n+   take place).  */\n+/* { dg-do run } */\n+\n+#include <objc/Object.h>\n+extern void abort(void);\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+static double d = 4.5920234e2;\n+\n+@interface Foo : Object\n+-(void) brokenType: (int)x floatingPoint: (double)y;\n+@end\n+\n+\n+@implementation Foo\n+-(void) brokenType: (int)x floatingPoint: (double)y\n+{\n+\tCHECK_IF(x == 459);\n+\tCHECK_IF(y == d);\n+}\n+@end\n+\n+int main(void)\n+{\n+\tFoo *foo=[Foo new];\n+\t[foo brokenType: d floatingPoint: d];\n+\treturn 0;\n+}\n+"}, {"sha": "5921292c1ba2ee806d49a0c3daac3d3e3a3b34ed", "filename": "gcc/testsuite/objc.dg/method-11.m", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-11.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-11.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-11.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,33 @@\n+/* Ensure that we indeed cannot obtain the value of a message send\n+   if the chosen method signature returns 'void'.  There used to\n+   exist a cheesy hack that allowed it.  While at it, check that\n+   the first lexically occurring method signature gets picked\n+   when sending messages to 'id'.  */ \n+/* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@interface Object1\n+- (void)initWithData:(Object1 *)data;\n+@end\n+\n+@interface Object2\n+- (id)initWithData:(Object1 *)data;\n+@end\n+\n+@interface Object3\n+- (id)initWithData:(Object2 *)data;\n+@end\n+\n+void foo(void) {\n+  id obj1, obj2 = 0;\n+  obj2 = [obj1 initWithData: obj2];\n+     /* { dg-warning \"multiple methods named .\\\\-initWithData:. found\" \"\" { target *-*-* } 25 } */\n+     /* { dg-warning \"using .\\\\-\\\\(void\\\\)initWithData:\\\\(Object1 \\\\*\\\\)data.\" \"\" { target *-*-* } 12 } */\n+     /* { dg-warning \"also found .\\\\-\\\\(id\\\\)initWithData:\\\\(Object1 \\\\*\\\\)data.\" \"\" { target *-*-* } 16 } */\n+     /* { dg-warning \"also found .\\\\-\\\\(id\\\\)initWithData:\\\\(Object2 \\\\*\\\\)data.\" \"\" { target *-*-* } 20 } */\n+\n+     /* The following error is a consequence of picking the \"wrong\" method signature.  */\n+     /* { dg-error \"void value not ignored as it ought to be\" \"\" { target *-*-* } 25 } */\n+}"}, {"sha": "d6e6ce58a4fbfe8e3b003b03132184c5c5b453f3", "filename": "gcc/testsuite/objc.dg/method-12.m", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-12.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-12.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-12.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,25 @@\n+/* Contributed by Igor Seleznev <selez@mail.ru>.  */\n+/* This used to be broken.  */\n+\n+#include <objc/objc-api.h>\n+\n+@interface A\n++ (A *)currentContext;\n+@end\n+\n+@interface B\n++ (B *)currentContext;\n+@end\n+\n+int main()\n+{\n+    [A currentContext];  /* { dg-bogus \"multiple declarations\" }  */\n+    return 0;\n+}\n+\n+@implementation A\n++ (A *)currentContext { return nil; }\n+@end\n+@implementation B\n++ (B *)currentContext { return nil; }\n+@end"}, {"sha": "8bf211f870039194f1bdf241c2e8be8b88882eb0", "filename": "gcc/testsuite/objc.dg/method-2.m", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-2.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -22,10 +22,11 @@ + (void) classMethod {                    /* If a class method is not found, the\n     [self rootInstanceMethod];            /* class is searched for an instance method  */\n     [MyIntermediate rootInstanceMethod];  /* with the same name.                       */\n \n-    [self instanceMethod];       /* { dg-warning \"cannot find class\" } */\n-    /* { dg-warning \"defaults to id\" \"\" { target *-*-* } 25 } */\n-    [MyDerived instanceMethod];  /* { dg-warning \"cannot find class\" } */\n-    /* { dg-warning \"defaults to id\" \"\" { target *-*-* } 27 } */ \n+    [self instanceMethod];   /* { dg-warning \".MyDerived. may not respond to .\\\\+instanceMethod.\" } */\n+       /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 25 } */\n+       /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 25 } */\n+       /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 25 } */\n+    [MyDerived instanceMethod];   /* { dg-warning \".MyDerived. may not respond to .\\\\+instanceMethod.\" } */\n }\n @end\n "}, {"sha": "65031b0aa5bdabcd5a3bd1369d8378a7e7ce460f", "filename": "gcc/testsuite/objc.dg/method-3.m", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-3.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,45 @@\n+/* Test for sending messages to aliased classes (and instances thereof).  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-options \"-lobjc\" } */\n+/* { dg-do run } */\n+\n+#include <objc/Object.h>\n+\n+extern void abort(void);\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+@interface Int1: Object\n++ (int) classMeth;\n+- (int) instanceMeth;\n+@end\n+\n+@interface Int2: Object\n++ (int) classMeth;      \n+- (int) instanceMeth;\n+@end\n+\n+@implementation Int1\n++ (int) classMeth { return 345; }\n+- (int) instanceMeth { return 697; }\n+@end\n+\n+@implementation Int2\n++ (int) classMeth { return 1345; }\n+- (int) instanceMeth { return 1697; }\n+@end\n+\n+typedef Int1 Int1Typedef;\n+@compatibility_alias Int1Alias Int1Typedef;\n+@compatibility_alias Int2Alias Int2;\n+typedef Int2Alias Int2Typedef;                  \n+\n+int main(void) {\n+  Int1Alias *int1alias = [[Int1Typedef alloc] init];\n+  Int2Typedef *int2typedef = [[Int2Alias alloc] init];\n+\n+  CHECK_IF([Int1Typedef classMeth] == 345 && [Int2Alias classMeth] == 1345);\n+  CHECK_IF([int1alias instanceMeth] == 697 && [int2typedef instanceMeth] == 1697);\n+  CHECK_IF([(Int2Typedef *)int1alias instanceMeth] == 697);\n+  CHECK_IF([(Int1Alias *)int2typedef instanceMeth] == 1697);\n+  return 0;\n+}"}, {"sha": "c8d092df74de893a36b80c218781b73d0ded625a", "filename": "gcc/testsuite/objc.dg/method-4.m", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-4.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,25 @@\n+/* Check if class references (generated for the NeXT runtime) are appropriately \n+   folded.  This test is safe to run on all targets.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-options \"-fnext-runtime\" } */\n+/* { dg-do compile } */\n+\n+#include <objc/Object.h>\n+\n+typedef Object ObjectTypedef1;\n+typedef ObjectTypedef1 ObjectTypedef2;\n+@compatibility_alias ObjectAlias1 ObjectTypedef2;\n+@compatibility_alias ObjectAlias2 ObjectAlias1;\n+typedef ObjectAlias2 ObjectTypedef3;\n+\n+void foo(void) {\n+  id obj = [Object new];\n+  obj = [ObjectTypedef1 new];\n+  obj = [ObjectTypedef2 new];\n+  obj = [ObjectTypedef3 new];\n+  obj = [ObjectAlias1 new];\n+  obj = [ObjectAlias2 new];\n+}\n+\n+/* { dg-final { scan-assembler \"_OBJC_CLASS_REFERENCES_0\" } } */\n+/* { dg-final { scan-assembler-not \"_OBJC_CLASS_REFERENCES_1\" } } */"}, {"sha": "e2332ea8bd7377b39a21b26e27cd1d4639e1a468", "filename": "gcc/testsuite/objc.dg/method-5.m", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-5.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,18 @@\n+/* Check if sending messages to \"underspecified\" objects is handled gracefully.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-do compile } */\n+\n+@class UnderSpecified;\n+typedef struct NotAClass {\n+  int a, b;\n+} NotAClass;\n+\n+void foo(UnderSpecified *u, NotAClass *n) {\n+  [n nonexistent_method];    /* { dg-warning \"invalid receiver type\" } */\n+       /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 11 } */\n+       /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 11 } */\n+       /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 11 } */\n+  [NotAClass nonexistent_method]; /* { dg-error \".NotAClass. is not an Objective\\\\-C class name or alias\" } */\n+  [u nonexistent_method]; /* { dg-warning \".UnderSpecified. may not respond to .\\\\-nonexistent_method.\" } */\n+  [UnderSpecified nonexistent_method]; /* { dg-warning \".UnderSpecified. may not respond to .\\\\+nonexistent_method.\" } */\n+}"}, {"sha": "212958b55c7dc4445dd0ddcabc66c60629faa375", "filename": "gcc/testsuite/objc.dg/method-6.m", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-6.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,26 @@\n+/* Check that sending messages to variables of type 'Class' does not involve instance methods.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>  */\n+/* { dg-do compile } */\n+\n+#include <objc/Protocol.h>\n+\n+@interface Base\n+- (unsigned)port;\n+- (id)starboard;\n+@end\n+\n+@interface Derived: Base\n+- (Object *)port;\n++ (Protocol *)port;\n+@end\n+\n+id foo(void) {\n+  Class receiver;\n+  id p = [receiver port];  /* there should be no warnings here! */\n+  p = [receiver starboard];  /* { dg-warning \".Class. may not respond to .\\\\+starboard.\" } */\n+       /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 20 } */\n+       /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 20 } */\n+       /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 20 } */\n+  p = [Class port];  /* { dg-error \".Class. is not an Objective\\\\-C class name or alias\" } */\n+  return p;\n+}"}, {"sha": "f84759c2169f1522a3937c6143298ce27b6fda07", "filename": "gcc/testsuite/objc.dg/method-7.m", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-7.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,27 @@\n+/* Check if finding multiple signatures for a method is handled gracefully.  */\n+/* Author:  Ziemowit Laski <zlaski@apple.com>  */\n+/* { dg-do compile } */\n+\n+#include <objc/Object.h>\n+\n+@interface Class1\n+- (void)setWindow:(Object *)wdw;\n+@end\n+\n+@interface Class2\n+- (void)setWindow:(Class1 *)window;\n+@end\n+\n+id foo(void) {\n+  Object *obj = [[Object alloc] init];\n+  id obj2 = obj;\n+  [obj setWindow:nil];  /* { dg-warning \".Object. may not respond to .\\\\-setWindow:.\" } */\n+       /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 18 } */\n+       /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 18 } */\n+       /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 18 } */\n+  [obj2 setWindow:nil]; /* { dg-warning \"multiple methods named .\\\\-setWindow:. found\" } */\n+       /* { dg-warning \"using .\\\\-\\\\(void\\\\)setWindow:\\\\(Object \\\\*\\\\)wdw.\" \"\" { target *-*-* } 8 } */\n+       /* { dg-warning \"also found .\\\\-\\\\(void\\\\)setWindow:\\\\(Class1 \\\\*\\\\)window.\" \"\" { target *-*-* } 12 } */\n+\n+  return obj;\n+}"}, {"sha": "4a13b7d6cbb57575022ddf16852d29750785f00f", "filename": "gcc/testsuite/objc.dg/method-8.m", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-8.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-8.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-8.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,14 @@\n+/* Check if casting the receiver type causes method lookup to succeed.  This was broken\n+   in Objective-C++.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n+/* { dg-do compile } */\n+\n+@interface A\n+@end\n+\n+@interface B: A\n+- (void)f;\n+@end\n+\n+void g(A *p) { [(B *)p f];  }\n+"}, {"sha": "ba832840062c3e2f366f75ce900036767f0dd855", "filename": "gcc/testsuite/objc.dg/method-9.m", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-9.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-9.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-9.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,43 @@\n+/* Check if finding multiple signatures for a method is handled gracefully\n+   when method lookup succeeds (see also method-7.m).  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n+/* { dg-do compile } */\n+\n+#include <objc/Object.h>\n+\n+@protocol MyObject\n+- (id)initWithData:(Object *)data;\n+@end\n+\n+@protocol SomeOther\n+- (id)initWithData:(int)data;\n+@end\n+\n+@protocol MyCoding\n+- (id)initWithData:(id<MyObject, MyCoding>)data;\n+@end\n+\n+@interface NTGridDataObject: Object <MyCoding>\n+{\n+    Object<MyCoding> *_data;\n+}\n++ (NTGridDataObject*)dataObject:(id<MyObject, MyCoding>)data;\n+@end\n+\n+@implementation NTGridDataObject\n+- (id)initWithData:(id<MyObject, MyCoding>)data {\n+  return data;\n+}\n++ (NTGridDataObject*)dataObject:(id<MyObject, MyCoding>)data\n+{\n+    NTGridDataObject *result = [[NTGridDataObject alloc] initWithData:data];\n+     /* { dg-warning \"multiple methods named .\\\\-initWithData:. found\" \"\" { target *-*-* } 33 } */\n+     /* { dg-warning \"using .\\\\-\\\\(id\\\\)initWithData:\\\\(Object \\\\*\\\\)data.\" \"\" { target *-*-* } 9 } */\n+     /* { dg-warning \"also found .\\\\-\\\\(id\\\\)initWithData:\\\\(id <MyObject, MyCoding>\\\\)data.\" \"\" { target *-*-* } 17 } */\n+     /* { dg-warning \"also found .\\\\-\\\\(id\\\\)initWithData:\\\\(int\\\\)data.\" \"\" { target *-*-* } 13 } */\n+\n+     /* The following warning is a consequence of picking the \"wrong\" method signature.  */\n+     /* { dg-warning \"passing arg 1 of .initWithData:. from incompatible pointer type\" \"\" { target *-*-* } 33 } */\n+    return result;\n+}\n+@end"}, {"sha": "7132ead4bef65fbc379793ad311a06ff9951f99c", "filename": "gcc/testsuite/objc.dg/missing-proto-1.m", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmissing-proto-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmissing-proto-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmissing-proto-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,6 @@\n+/* Test for graceful handling of missing protocol declarations.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-do compile } */\n+\n+@interface Foo <Missing> /* { dg-error \"cannot find protocol declaration for .Missing.\" } */\n+@end"}, {"sha": "cb121b496e95846e539e46c323c20a203acaa13f", "filename": "gcc/testsuite/objc.dg/missing-proto-2.m", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmissing-proto-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmissing-proto-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmissing-proto-2.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,5 @@\n+/* Test for graceful handling of missing protocol declarations.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-do compile } */\n+\n+void *protRef = @protocol(Missing); /* { dg-error \"cannot find protocol declaration for .Missing.\" } */"}, {"sha": "6c610ce35c90466c12e401253fde81b8e6ea586c", "filename": "gcc/testsuite/objc.dg/missing-proto-3.m", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmissing-proto-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fmissing-proto-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmissing-proto-3.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,26 @@\n+/* Ensure that the compiler gracefully handles missing protocol declarations.\n+   In addition to not crashing :-), the compiler should properly handle\n+   valid protocol references, even when they're mixed with invalid ones.  */\n+/* { dg-do compile } */\n+ \n+#include <objc/objc.h>\n+\n+@protocol DefinedProtocol\n+- (id) missingMethod1;\n+@end\n+\n+@interface MyClass <UndefinedProtocol, DefinedProtocol>\n+/* { dg-error \"cannot find protocol declaration for .UndefinedProtocol.\" \"\" { target *-*-* } 12 } */\n+@end\n+\n+@implementation MyClass\n++(Class)class\n+{\n+  return self;\n+}\n+@end\n+\n+/* { dg-warning \"incomplete implementation of class .MyClass.\" \"\" { target *-*-* } 21 } */\n+/* { dg-warning \"method definition for .\\\\-missingMethod1. not found\" \"\" { target *-*-* } 21 } */\n+/* { dg-warning \"class .MyClass. does not fully implement the .DefinedProtocol. protocol\" \"\" { target *-*-* } 21 } */\n+"}, {"sha": "7a182bd938e6872b964fd0646f392ab8095e6d9c", "filename": "gcc/testsuite/objc.dg/nested-func-1.m", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fnested-func-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fnested-func-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fnested-func-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,37 @@\n+/* Test basic nested C function functionality within ObjC\n+   methods.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-options \"-lobjc\" } */\n+/* { dg-do run } */\n+#include <stdio.h>\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+\n+int bappy (int (*blargh) (int a, int b, int c))\n+{\n+  return blargh (4, 7, 2) + 3;\n+}\n+\n+@interface Foo: Object\n++ (int)foo;\n+@end\n+\n+@implementation Foo\n++ (int)foo\n+{\n+  int blargh (int a, int b, int c)\n+  {\n+    return a * b + c;\n+  }\n+  return bappy (blargh);\n+}\n+@end\n+\n+int main () \n+{\n+  int f = [Foo foo];\n+  if (f != 33)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "154e6b62d737b7f57c8a0208ad1a119e82ee5b8b", "filename": "gcc/testsuite/objc.dg/proto-hier-1.m", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-hier-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-hier-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-hier-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -48,7 +48,9 @@ int foo(void) {\n   id<Booing, Fooing> stupidVar;\n   [stupidVar boo];\n   [stupidVar foo];\n-  [stupidVar anotherMsg]; /* { dg-warning \"not implemented by protocol\" } */\n-  /* { dg-warning \"return type defaults to id\" \"\" { target *-*-* } 51 } */\n+  [stupidVar anotherMsg]; /* { dg-warning \".\\-anotherMsg. not implemented by protocol\" } */\n+       /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 51 } */\n+       /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 51 } */\n+       /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 51 } */\n   return 0;\n }"}, {"sha": "1186f8fd9ff68d1e5c28fa23e417747a7a115891", "filename": "gcc/testsuite/objc.dg/proto-lossage-1.m", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -35,7 +35,12 @@ @implementation Foo\n   return (id <NSObject>)plate1; /* { dg-bogus \"does not conform\" } */\n }\n - (int) getValue {\n-  int i = [plate1 someValue];   /* { dg-warning \"not implemented by protocol\" } */\n+  int i = [plate1 someValue];   /* { dg-warning \".\\\\-someValue. not implemented by protocol\\\\(s\\\\)\" } */\n+     /* { dg-warning \"\\\\(Messages without a matching method signature\" \"\" { target *-*-* } 38 } */\n+     /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 38 } */\n+     /* { dg-warning \".\\.\\.\\.. as arguments\\.\\\\)\" \"\" { target *-*-* } 38 } */\n+     /* { dg-warning \"initialization makes integer from pointer without a cast\" \"\" { target *-*-* } 38 } */\n+\n   int j = [(id <NSObject>)plate1 someValue];  /* { dg-bogus \"not implemented by protocol\" } */\n   int k = [(id)plate1 someValue]; /* { dg-bogus \"not implemented by protocol\" } */\n   return i + j + k;"}, {"sha": "b3ab9681f6273ef5d1a727a15a9cb006b7a3fba8", "filename": "gcc/testsuite/objc.dg/proto-lossage-2.m", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-2.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,20 @@\n+/* Don't forget to look in protocols if a class (and its superclasses) do not\n+   provide a suitable method.  */\n+/* { dg-do compile } */\n+\n+#include <objc/Object.h>\n+\n+@protocol Zot\n+-(void) zot;\n+@end\n+\n+@interface Foo : Object <Zot>\n+@end\n+\n+int foo()\n+{\n+\tFoo *f=nil;\n+\t[f zot]; /* There should be no warnings here! */\n+\treturn 0;\n+}\n+"}, {"sha": "6ae12909380c571a49a340cf58edfb7c381b85cc", "filename": "gcc/testsuite/objc.dg/proto-qual-1.m", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-qual-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-qual-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-qual-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,48 @@\n+/* Check that protocol qualifiers are compiled and encoded properly.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>  */\n+/* { dg-options \"-lobjc\" } */\n+/* { dg-do run } */\n+\n+#include <objc/Protocol.h>\n+#ifndef __NEXT_RUNTIME__\n+#include <objc/objc-api.h>\n+#endif\n+\n+extern int sscanf(const char *str, const char *format, ...);\n+extern void abort(void);\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+@protocol Retain\n++ (oneway void)retainArgument:(out bycopy id)arg1 with:(in signed char **)arg2;\n+- (bycopy) address:(byref inout id)location with:(out short unsigned **)arg2;\n+@end\n+\n+@interface Foo <Retain>\n++ (oneway void)retainArgument:(out bycopy id)arg with:(in signed char **)arg2;\n+@end\n+\n+@implementation Foo\n++ (oneway void)retainArgument:(out bycopy id)arg1 with:(in signed char **)arg2 { }\n+- (bycopy) address:(byref inout id)location with:(out short unsigned **)arg2 { return nil; }\n+@end\n+\n+Protocol *proto = @protocol(Retain);\n+struct objc_method_description *meth;\n+unsigned totsize, offs0, offs1, offs2, offs3, offs4, offs5, offs6, offs7;\n+\n+static void scan_initial(const char *pattern) {\n+  totsize = offs0 = offs1 = offs2 = offs3 = offs4 = offs5 = offs6 = offs7 = (unsigned)-1;\n+  sscanf(meth->types, pattern, &totsize, &offs0, &offs1, &offs2, &offs3,\n+      &offs4, &offs5, &offs6, &offs7);\n+  CHECK_IF(!offs0 && offs1 == sizeof(id) && offs2 == offs1 + sizeof(SEL) && totsize >= offs2);\n+}\n+\n+int main(void) {\n+  meth = [proto descriptionForInstanceMethod: @selector(address:with:)];\n+  scan_initial(\"O@%u@%u:%uNR@%uo^^S%u\");\n+  CHECK_IF(offs3 == offs2 + sizeof(id) && totsize == offs3 + sizeof(unsigned));\n+  meth = [proto descriptionForClassMethod: @selector(retainArgument:with:)];\n+  scan_initial(\"Vv%u@%u:%uOo@%un^*%u\");\n+  CHECK_IF(offs3 == offs2 + sizeof(id) && totsize == offs3 + sizeof(char **));\n+  return 0;\n+}"}, {"sha": "5d8def16afe989b61167c7f0faaab29fb8db8fdf", "filename": "gcc/testsuite/objc.dg/sizeof-1.m", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fsizeof-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fsizeof-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fsizeof-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,33 @@\n+/* Check that the sizeof() operator works with ObjC classes and their aliases. */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-options \"-lobjc\" } */\n+/* { dg-do run } */\n+\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+\n+extern void abort(void);\n+#define CHECK_IF(expr) if(!(expr)) abort();\n+\n+@interface Foo: Object {\n+  int a, b;\n+  float c, d;\n+}\n+@end\n+\n+@implementation Foo\n+@end\n+\n+typedef Object MyObject;\n+typedef struct Foo Foo_type;\n+\n+@compatibility_alias AliasObject Object;\n+\n+int main(void) {\n+  CHECK_IF(sizeof(Foo) > sizeof(Object) && sizeof(Object) > 0);\n+  CHECK_IF(sizeof(Foo) == sizeof(Foo_type));\n+  CHECK_IF(sizeof(Object) == sizeof(MyObject));\n+  CHECK_IF(sizeof(Object) == sizeof(AliasObject));\n+  return 0;\n+}\n+"}, {"sha": "52586f0152160ead9c1e46bc1e1b0d9baaaaecda", "filename": "gcc/testsuite/objc.dg/special/unclaimed-category-1.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fspecial%2Funclaimed-category-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fspecial%2Funclaimed-category-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fspecial%2Funclaimed-category-1.h?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -2,6 +2,11 @@\n #include <objc/objc.h>\n #include <objc/Object.h>\n \n+#ifdef __NEXT_RUNTIME__\n+#define objc_get_class(C)\t\t\tobjc_getClass(C)\n+#define class_create_instance(C)\t\tclass_createInstance(C, 0)\n+#endif\n+\n /* Test loading unclaimed categories - categories of a class defined\n    separately from the class itself.  */\n "}, {"sha": "8b8af5ed3073408825beb28398d19014f6478097", "filename": "gcc/testsuite/objc.dg/special/unclaimed-category-1.m", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fspecial%2Funclaimed-category-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fspecial%2Funclaimed-category-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fspecial%2Funclaimed-category-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -21,6 +21,9 @@ - (int)D\n {\n   return 4;\n }\n+#ifdef __NEXT_RUNTIME__                                   \n++ initialize { return self; }\n+#endif\n @end\n \n "}, {"sha": "d6201585939a75a0a877369362f387c795930bbf", "filename": "gcc/testsuite/objc.dg/static-1.m", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fstatic-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fstatic-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstatic-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,33 @@\n+/* Test out static (non-heap) allocations of ObjC class instances.\n+   These should elicit errors.  */\n+/* Developed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-do compile } */\n+\n+@interface Object {\n+  struct objc_class *isa;\n+}\n+@end\n+\n+@compatibility_alias MyObject Object;\n+\n+@interface Foo: Object {\n+  int a;\n+  Object *b;\n+  Object c; /* { dg-error \"statically allocated instance of Objective-C class .Object.\" } */\n+}\n+@end\n+\n+@compatibility_alias MyFoo Foo;\n+\n+typedef Foo FooAlias1;\n+typedef FooAlias1 FooAlias2;\n+typedef Object ObjectAlias1;\n+typedef struct Object ObjectAlias2;\n+Object staticObject1;   /* { dg-error \"statically allocated instance of Objective-C class .Object.\" } */\n+struct Object staticObject2;   /* { dg-error \"statically allocated instance of Objective-C class .Object.\" } */\n+static ObjectAlias1 staticObject3;   /* { dg-error \"statically allocated instance of Objective-C class .Object.\" } */\n+FooAlias1 staticFoo1;  /* { dg-error \"statically allocated instance of Objective-C class .Foo.\" } */\n+extern FooAlias2 externFoo1;  /* { dg-error \"statically allocated instance of Objective-C class .Foo.\" } */\n+static Foo staticFoo2;  /* { dg-error \"statically allocated instance of Objective-C class .Foo.\" } */\n+MyObject staticMyObject1;  /* { dg-error \"statically allocated instance of Objective-C class .Object.\" } */\n+MyFoo staticMyFoo1;  /* { dg-error \"statically allocated instance of Objective-C class .Foo.\" } */"}, {"sha": "44e7b5aab3409ecf179a5c639c77a11dbb6c5e2d", "filename": "gcc/testsuite/objc.dg/symtab-1.m", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fsymtab-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fsymtab-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fsymtab-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,24 @@\n+/* Check if the objc_symtab descriptor is being laid out correctly.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-options \"-fnext-runtime\" } */\n+/* { dg-do compile { target *-*-darwin* } } */\n+\n+#include <objc/Object.h>\n+\n+@interface Base: Object \n+- (void)setValues;\n+@end\n+\n+@interface Derived: Base\n+- (void)checkValues;\n+@end\n+\n+@implementation Base\n+-(void)setValues { }\n+@end\n+\n+@implementation Derived\n+-(void)checkValues { }\n+@end\n+\n+/* { dg-final { scan-assembler \"L_OBJC_SYMBOLS:\\n\\t.long\\t0\\n\\t.long\\t0\\n\\t.short\\t2\\n\\t.short\\t0\\n\\t.long\\tL_OBJC_CLASS_Derived\\n\\t.long\\tL_OBJC_CLASS_Base\\n\" } } */"}, {"sha": "e40fdf85994edc182244cce95f431dec64be483a", "filename": "gcc/testsuite/objc.dg/try-catch-1.m", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,44 @@\n+/* Test if the compiler accepts @throw / @try..@catch..@finally \n+   syntax.  This will only be usable on MacOS X 10.3 and later.  */\n+/* Developed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-options \"-fobjc-exceptions\" } */\n+/* { dg-do compile { target *-*-darwin* } } */\n+\n+#include <objc/objc.h>\n+#include <objc/objc-runtime.h>\n+#include <objc/Object.h>\n+#include <stdio.h>\n+#include <setjmp.h>\n+\n+@interface Frob: Object\n+@end\n+\n+@implementation Frob: Object\n+@end\n+\n+static int exc_control = 0;\n+\n+int proc() {\n+  if(exc_control) {\n+    printf (\"Throwing (%d)... \", exc_control);\n+    @throw [Frob new];\n+  }\n+  return 1;\n+}\n+\n+int foo()\n+{\n+        @try {\n+                return proc();\n+        }\n+        @catch (Frob* ex) {\n+\t\tif(exc_control > 1) {\n+\t\t  printf(\"Rethrowing (%d)... \", exc_control);\n+\t\t  @throw;\n+\t\t}\n+\t\treturn 0;\n+        }\n+\t@finally {\n+\t\tprintf(\"In @finally block (%d)... \", exc_control);\n+\t}\n+}"}, {"sha": "fc314f3f128edfb8e009aecbb8ae52bd0ab6ddc7", "filename": "gcc/testsuite/objc.dg/try-catch-2.m", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-2.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,85 @@\n+/* Test out '@catch(id foo) {...}', which should catch\n+   all uncaught exceptions.  */\n+/* Developed by Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* { dg-options \"-fobjc-exceptions -lobjc\" } */\n+/* { dg-do run { target *-*-darwin[789]* } } */\n+\n+#include <objc/objc.h>\n+#include <objc/objc-runtime.h>\n+#include <objc/Object.h>\n+#include <stdio.h>\n+\n+/* The following is not required in actual user code; we include it\n+   here to check that the compiler generates an internal definition of\n+   _setjmp that is consistent with what <setjmp.h> provides.  */\n+#include <setjmp.h>\n+\n+extern void abort(void);\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+@interface Frob: Object\n+@end\n+\n+@implementation Frob: Object\n+@end\n+\n+static Frob* _connection = nil;\n+\n+//--------------------------------------------------------------------\n+\n+\n+void test (Object* sendPort)\n+{\n+\tint cleanupPorts = 1;\n+\tFrob* receivePort = nil;\n+\t\n+\t@try {\n+\t\tprintf (\"receivePort = %p\\n\", receivePort);\n+\t\tprintf (\"sendPort = %p\\n\", sendPort);\n+\t\tprintf (\"cleanupPorts = %d\\n\", cleanupPorts);\n+\t\tprintf (\"---\\n\");\n+\t\t\n+\t\treceivePort = (Frob *) -1;\n+\t\t_connection = (Frob *) -1;\n+\t\tprintf (\"receivePort = %p\\n\", receivePort);\n+\t\tprintf (\"sendPort = %p\\n\", sendPort);\n+\t\tprintf (\"cleanupPorts = %d\\n\", cleanupPorts);\n+\t\tprintf (\"---\\n\");\n+\t\t\n+\t\treceivePort = nil;\n+\t\tsendPort = nil;\n+\t\tcleanupPorts = 0;\n+\t\t\n+\t\tprintf (\"receivePort = %p\\n\", receivePort);\n+\t\tprintf (\"sendPort = %p\\n\", sendPort);\n+\t\tprintf (\"cleanupPorts = %d\\n\", cleanupPorts);\n+\t\tprintf (\"---\\n\");\t\t\n+\t\t\n+\t\t@throw [Object new];\n+\t}\n+\t@catch(Frob *obj) {\n+\t\tprintf (\"Exception caught by incorrect handler!\\n\");\n+\t\tCHECK_IF(0);\n+\t}\n+\t@catch(id exc) {\n+\t\tprintf (\"Exception caught by correct handler.\\n\");\n+\t\tprintf (\"receivePort = %p (expected 0x0)\\n\", receivePort);\n+\t\tprintf (\"sendPort = %p (expected 0x0)\\n\", sendPort);\n+\t\tprintf (\"cleanupPorts = %d (expected 0)\\n\", cleanupPorts);\n+\t\tprintf (\"---\");\n+\t\tCHECK_IF(!receivePort);\n+\t\tCHECK_IF(!sendPort);\n+\t\tCHECK_IF(!cleanupPorts);\n+\t}\n+        @catch(Object *obj) { /* { dg-warning \"Exception already handled by preceding .\\\\@catch\\\\(id\\\\).\" } */\n+                printf (\"Exception caught by incorrect handler!\\n\");\n+                CHECK_IF(0);\n+        }\n+}\n+\n+int main (void) {\n+\n+\ttest((Object *)-1);\n+\treturn 0;\n+}"}, {"sha": "f49362fbf3191a9da0229afb0cd278a9f4098934", "filename": "gcc/testsuite/objc.dg/try-catch-3.m", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-3.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,19 @@\n+/* Test if caught exception objects are accessible inside the\n+   @catch block.  (Yes, I managed to break this.)  */\n+/* Author: Ziemowit Laski <zlaski@apple.com> */\n+\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-options \"-fobjc-exceptions\" } */\n+\n+#include <objc/Object.h>\n+\n+const char *foo(void)\n+{\n+    @try {\n+        return \"foo\";\n+    }\n+    @catch (Object* theException) {\n+          return [theException name];\n+    }\n+}\n+"}, {"sha": "54aea233fed2e8c8518d1e10058c3ab1ed3de63f", "filename": "gcc/testsuite/objc.dg/try-catch-4.m", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-4.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,26 @@\n+/* Check that the compiler does not incorrectly complain about\n+   exceptions being caught by previous @catch blocks.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com> */\n+\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-options \"-Wall -fobjc-exceptions\" } */\n+\n+@interface Exception\n+@end\n+\n+@interface FooException : Exception\n+@end\n+\n+extern void foo();\n+\n+void test()\n+{\n+    @try {\n+        foo();\n+    }\n+    @catch (FooException* fe) {\n+    }\n+    @catch (Exception* e) {\n+    }\n+}\n+"}, {"sha": "f2fdae5c382c01c1460893e66ba218896cec9bb4", "filename": "gcc/testsuite/objc.dg/type-size-1.m", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-size-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-size-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-size-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,17 @@\n+/* Reject ivars with an unknown size.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-do compile } */\n+\n+struct unknownStruct;\n+\n+@interface ArrayTest\n+{\n+    short   unknownSize[unknownValue];  /* { dg-error \".unknownValue. (undeclared|was not declared)\" } */\n+    /* { dg-error \"instance variable .unknownSize. has unknown size\" \"\" { target *-*-* } 9 } */\n+    struct unknownStruct unknownObj;  /* { dg-error \"field .unknownObj. has incomplete type\" } */\n+    /* { dg-error \"instance variable .unknownObj. has unknown size\" \"\" { target *-*-* } 11 } */\n+    long    knownSize[3];     /* ok */\n+    char    zeroSize[2 - 2];  /* ok (apparently) */\n+    int     missingSize[];  /* { dg-error \"instance variable .missingSize. has unknown size\" } */\n+}\n+@end"}, {"sha": "446de48345a17fff504d212f23f08956a61484ef", "filename": "gcc/testsuite/objc.dg/type-size-2.m", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-size-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-size-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-size-2.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,58 @@\n+/* Make sure that array arguments to methods are given the size of pointers.  */\n+/* As in the case of ivars, arrays without size (e.g., 'int []') are\n+   encoded as pointers as well.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-do run } */\n+\n+#include <objc/objc.h>\n+#ifdef __NEXT_RUNTIME__\n+#include <objc/objc-runtime.h>\n+#define OBJC_GETCLASS objc_getClass\n+#define CLASS_GETINSTANCEMETHOD class_getInstanceMethod\n+#else\n+#include <objc/objc-api.h>\n+#define OBJC_GETCLASS objc_get_class\n+#define CLASS_GETINSTANCEMETHOD class_get_instance_method\n+#endif\n+\n+extern int sscanf(const char *str, const char *format, ...);\n+extern void abort(void);\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+enum Enum { one, two, three, four };\n+\n+@interface ArrayTest\n+- (const char *)str:(signed char [])arg1 with:(unsigned char *)arg2 and:(enum Enum[4])en;\n+- (int)meth1:(int [])arg1 with:(int [0])arg2 with:(int [2])arg3;\n+@end\n+\n+@implementation ArrayTest\n+- (int)meth1:(int [])arg1 with:(int [0])arg2 with:(int [2])arg3 { return 0; }\n+- (const char *)str:(signed char [])arg1 with:(unsigned char *)arg2 and:(enum Enum[4])en { return \"str\"; }\n+@end\n+\n+Class cls;\n+struct objc_method *meth;\n+unsigned totsize, offs0, offs1, offs2, offs3, offs4, offs5, offs6, offs7;\n+\n+static void scan_initial(const char *pattern) {\n+  totsize = offs0 = offs1 = offs2 = offs3 = offs4 = offs5 = offs6 = offs7 = (unsigned)-1;\n+  sscanf(meth->method_types, pattern, &totsize, &offs0, &offs1, &offs2, &offs3,\n+      &offs4, &offs5, &offs6, &offs7);\n+  CHECK_IF(!offs0 && offs1 == sizeof(id) && offs2 == offs1 + sizeof(SEL) && totsize >= offs2);\n+}\n+\n+int main(void) {\n+  cls = OBJC_GETCLASS(\"ArrayTest\");\n+\n+  meth = CLASS_GETINSTANCEMETHOD(cls, @selector(str:with:and:));\n+  scan_initial(\"r*%u@%u:%u*%u*%u[4i]%u\");\n+  CHECK_IF(offs3 == offs2 + sizeof(signed char *) && offs4 == offs3 + sizeof(unsigned char *));\n+  CHECK_IF(totsize == offs4 + sizeof(enum Enum *));\n+  meth = CLASS_GETINSTANCEMETHOD(cls, @selector(meth1:with:with:));\n+  scan_initial(\"i%u@%u:%u^i%u[0i]%u[2i]%u\");\n+  CHECK_IF(offs3 == offs2 + sizeof(int *) && offs4 == offs3 + sizeof(int *));\n+  CHECK_IF(totsize == offs4 + sizeof(int *));                                           \n+  return 0;\n+}\n+"}, {"sha": "96fd0c290d38ff4ab476116f801a822d33f8a378", "filename": "gcc/testsuite/objc.dg/zero-link-1.m", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,28 @@\n+/* Check if the '-fzero-link' flag correctly emits an objc_getClass() call. */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-options \"-fnext-runtime -fzero-link\" } */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+\n+extern void abort(void);\n+#define CHECK_IF(expr) if(!(expr)) abort();\n+\n+@interface Base: Object\n++ (int) getValue;\n+@end\n+\n+@implementation Base\n++ (int) getValue { return 1593; }\n+@end\n+\n+int main(void) {\n+  int val = [Base getValue];\n+  CHECK_IF(val == 1593);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"_OBJC_CLASS_REFERENCES_0\" } } */\n+/* { dg-final { scan-assembler \"objc_getClass\" } } */\n+"}, {"sha": "92b4ab11b0c254798676eb30f7d1b22e5a901dd0", "filename": "gcc/testsuite/objc.dg/zero-link-2.m", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-2.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,28 @@\n+/* Check if the '-fno-zero-link' flag correctly _omits_ an objc_getClass() call. */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-options \"-fnext-runtime -fno-zero-link\" } */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+\n+extern void abort(void);\n+#define CHECK_IF(expr) if(!(expr)) abort();\n+\n+@interface Base: Object\n++ (int) getValue;\n+@end\n+\n+@implementation Base\n++ (int) getValue { return 1593; }\n+@end\n+\n+int main(void) {\n+  int val = [Base getValue];\n+  CHECK_IF(val == 1593);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"_OBJC_CLASS_REFERENCES_0\" } } */\n+/* { dg-final { scan-assembler-not \"objc_getClass\" } } */\n+"}, {"sha": "99f619339263ffc5c6c1b9ad7b0268bd1a857952", "filename": "gcc/testsuite/objc/execute/IMP.m", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2FIMP.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2FIMP.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2FIMP.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -2,6 +2,8 @@\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n+#include \"next_mapping.h\"\n+\n /* Test getting and calling the IMP of a method */\n \n @interface TestClass"}, {"sha": "f2b05b6527b7a6e81ffd9daa4ddb390e00e2f55a", "filename": "gcc/testsuite/objc/execute/_cmd.m", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2F_cmd.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2F_cmd.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2F_cmd.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -2,6 +2,8 @@\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n+#include \"next_mapping.h\"\n+\n /* Test the hidden argument _cmd to method calls */\n \n @interface TestClass \n@@ -16,6 +18,9 @@ + (const char*) method;\n {\n   return sel_get_name (_cmd);\n }\n+#ifdef __NEXT_RUNTIME__\n++ initialize { return self; }\n+#endif\n @end\n \n "}, {"sha": "6cf7a0696b6e405d42d4b4082553e1514b07bc1c", "filename": "gcc/testsuite/objc/execute/bf-common.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbf-common.h?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -1,5 +1,7 @@\n+#ifndef __NEXT_RUNTIME__\n #include <objc/encoding.h>\n-\n+#endif\n+#include \"next_mapping.h\"\n \n void print_ivars (Class class)\n {\n@@ -59,7 +61,7 @@ int main ()\n       @defs (MyObject);\n     };\n   int size1, size2;\n-  Class class = [MyObject class];\n+  Class class = objc_get_class (\"MyObject\");\n \n   printf (\"type = %s\\n\", @encode (struct class_vars));\n   print_ivars (class);"}, {"sha": "60acde52b59550b167c549c5953dd7f43b92193f", "filename": "gcc/testsuite/objc/execute/bycopy-3.m", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbycopy-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbycopy-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fbycopy-3.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -12,7 +12,11 @@\n #include <objc/objc.h>\n #include <objc/Object.h>\n #include <objc/Protocol.h>\n+\n+#ifndef __NEXT_RUNTIME__\n #include <objc/encoding.h>\n+#endif\n+#include \"next_mapping.h\"\n \n @protocol MyProtocol\n + (bycopy id<MyProtocol>) bycopyMethod;"}, {"sha": "67988a5db2a859ae3027dd84afcada2df3fa0263", "filename": "gcc/testsuite/objc/execute/cascading-1.m", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fcascading-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fcascading-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fcascading-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,33 @@\n+#include <objc/Object.h>\n+\n+@interface Foo : Object\n++ foo;\n++ bar;\n+@end\n+\n+int foocalled = 0;\n+int barcalled = 0;\n+\n+\n+@implementation Foo\n++ foo\n+{\n+    if (foocalled)\n+      abort ();\n+    foocalled = 1;\n+    return self;\n+}\n++ bar\n+{\n+    if (barcalled)\n+      abort ();\n+    barcalled = 1;\n+    return self;\n+}\n+@end\n+\n+int main(int argc,char **argv)\n+{\n+    [[Foo foo] bar];\n+    return 0;\n+}"}, {"sha": "5fd9aa8e038b1f7753b4aacaa899db9fe68019a5", "filename": "gcc/testsuite/objc/execute/class-1.m", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -2,6 +2,8 @@\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n+#include \"next_mapping.h\"\n+\n /* Tests creating a RootClass */\n \n @interface RootClass"}, {"sha": "d984d62ac9996435eecfa20302df916e1ce8f5b3", "filename": "gcc/testsuite/objc/execute/class-10.m", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-10.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-10.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-10.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -2,6 +2,8 @@\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n+#include \"next_mapping.h\"\n+\n /* Tests creating a root class and a subclass with an ivar and\n    accessor methods and a subclass overriding the superclass'\n    implementation, and using self to call another method of itself */\n@@ -13,6 +15,9 @@ @interface RootClass\n @end\n \n @implementation RootClass\n+#ifdef __NEXT_RUNTIME__                                   \n++ initialize { return self; }\n+#endif\n @end\n \n @interface SubClass : RootClass"}, {"sha": "00c488bd1b9369cfa69f763592bd54aba223db44", "filename": "gcc/testsuite/objc/execute/class-11.m", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-11.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-11.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-11.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -2,6 +2,8 @@\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n+#include \"next_mapping.h\"\n+\n /* Tests creating a root class and a subclass with an ivar and\n    accessor methods and a subclass overriding the superclass'\n    implementation and using self to call another method of itself - in\n@@ -14,6 +16,9 @@ @interface RootClass\n @end\n \n @implementation RootClass\n+#ifdef __NEXT_RUNTIME__                                   \n++ initialize { return self; }\n+#endif\n @end\n \n @interface SubClass : RootClass"}, {"sha": "fcab65b2d369e34591e23f68cc76135a1398a3cd", "filename": "gcc/testsuite/objc/execute/class-12.m", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-12.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-12.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-12.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -2,6 +2,8 @@\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n+#include \"next_mapping.h\"\n+\n /* Tests creating a root class and a subclass with a class methods */\n \n @interface RootClass\n@@ -11,6 +13,9 @@ @interface RootClass\n @end\n \n @implementation RootClass\n+#ifdef __NEXT_RUNTIME__                                   \n++ initialize { return self; }\n+#endif\n @end\n \n static int class_variable = 0;"}, {"sha": "98cf0ccd7299ebbde92487ccce7f79d2340f9eec", "filename": "gcc/testsuite/objc/execute/class-13.m", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-13.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-13.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-13.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -2,6 +2,8 @@\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n+#include \"next_mapping.h\"\n+\n /* Tests creating a root class and a subclass with a class accessor\n    methods and a subclass overriding the superclass' implementation\n    but reusing it with super */\n@@ -13,6 +15,9 @@ @interface RootClass\n @end\n \n @implementation RootClass\n+#ifdef __NEXT_RUNTIME__                                   \n++ initialize { return self; }\n+#endif\n @end\n \n static int class_variable = 0;"}, {"sha": "7d02c36df7aea6d1c4de5cda644555b7eba33220", "filename": "gcc/testsuite/objc/execute/class-14.m", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-14.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-14.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-14.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -2,6 +2,8 @@\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n+#include \"next_mapping.h\"\n+\n /* Tests creating a root class and a subclass with a class accessor\n    methods and a subclass overriding the superclass' implementation,\n    and using self to call another method of itself */\n@@ -13,6 +15,9 @@ @interface RootClass\n @end\n \n @implementation RootClass\n+#ifdef __NEXT_RUNTIME__                                   \n++ initialize { return self; }\n+#endif\n @end\n \n static int class_variable = 0;"}, {"sha": "350a583e9b5bdf6c266a1ef4738fe48645db93cb", "filename": "gcc/testsuite/objc/execute/class-2.m", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-2.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -2,6 +2,8 @@\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n+#include \"next_mapping.h\"\n+\n /* Tests creating a root class and a subclass */\n \n @interface RootClass"}, {"sha": "5ce83376c4646ee5db0f5258dec531f92887c8b3", "filename": "gcc/testsuite/objc/execute/class-3.m", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-3.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -2,6 +2,8 @@\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n+#include \"next_mapping.h\"\n+\n /* Tests creating a root class and a minimal subclass tree */\n \n @interface RootClass"}, {"sha": "34d414b12295164c035fd42d6d46c0f94e7013ef", "filename": "gcc/testsuite/objc/execute/class-4.m", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-4.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -2,6 +2,8 @@\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n+#include \"next_mapping.h\"\n+\n /* Tests creating a root class and a subclass with an ivar and\n    accessor methods */\n \n@@ -12,6 +14,9 @@ @interface RootClass\n @end\n \n @implementation RootClass\n+#ifdef __NEXT_RUNTIME__                                   \n++ initialize { return self; }\n+#endif\n @end\n \n @interface SubClass : RootClass"}, {"sha": "e2b750ac01d01698b100b2aab6d4ab6500c2a157", "filename": "gcc/testsuite/objc/execute/class-5.m", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-5.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -2,6 +2,8 @@\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n+#include \"next_mapping.h\"\n+\n /* Tests creating a root class and a subclass with an ivar and\n    accessor methods and a subclass overriding the superclass'\n    implementation */\n@@ -13,6 +15,9 @@ @interface RootClass\n @end\n \n @implementation RootClass\n+#ifdef __NEXT_RUNTIME__                                   \n++ initialize { return self; }\n+#endif\n @end\n \n @interface SubClass : RootClass"}, {"sha": "fb2d64b431426ad1121bf9671fa6cd5fc417e929", "filename": "gcc/testsuite/objc/execute/class-6.m", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-6.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -2,6 +2,8 @@\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n+#include \"next_mapping.h\"\n+\n /* Tests creating a root class and a subclass with an ivar and\n    accessor methods and a subclass overriding the superclass'\n    implementation but reusing it with super */\n@@ -13,6 +15,9 @@ @interface RootClass\n @end\n \n @implementation RootClass\n+#ifdef __NEXT_RUNTIME__                                   \n++ initialize { return self; }\n+#endif\n @end\n \n @interface SubClass : RootClass"}, {"sha": "3fddca77065e64734d8c3a78efdd8740b29b9355", "filename": "gcc/testsuite/objc/execute/class-7.m", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-7.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -2,6 +2,8 @@\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n+#include \"next_mapping.h\"\n+\n /* Tests creating a root class and a subclass with an ivar and\n    accessor methods; accessor methods implemented in a separate\n    category */\n@@ -13,6 +15,9 @@ @interface RootClass\n @end\n \n @implementation RootClass\n+#ifdef __NEXT_RUNTIME__                                   \n++ initialize { return self; }\n+#endif\n @end\n \n @interface SubClass : RootClass\n@@ -49,6 +54,13 @@ int main (void)\n   SubClass *object;\n \n   test_class_with_superclass (\"SubClass\", \"RootClass\");\n+\n+  /* The NeXT runtime's category implementation is lazy: categories are not attached \n+     to classes until the class is initialized (at +initialize time).  */\n+#ifdef __NEXT_RUNTIME__\n+  [SubClass initialize];\n+#endif\n+\n   test_that_class_has_instance_method (\"SubClass\", @selector (setState:));\n   test_that_class_has_instance_method (\"SubClass\", @selector (state));\n "}, {"sha": "806db03687c1a21faa0332e2ebd06a95b6ad175d", "filename": "gcc/testsuite/objc/execute/class-8.m", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-8.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-8.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-8.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -2,6 +2,8 @@\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n+#include \"next_mapping.h\"\n+\n /* Tests creating a root class and a subclass with an ivar and\n    accessor methods and a subclass overriding the superclass'\n    implementation - in a category */\n@@ -13,6 +15,9 @@ @interface RootClass\n @end\n \n @implementation RootClass\n+#ifdef __NEXT_RUNTIME__                                   \n++ initialize { return self; }\n+#endif\n @end\n \n @interface SubClass : RootClass"}, {"sha": "d32362bdd5728101587d17e0bebb19505a5da7bd", "filename": "gcc/testsuite/objc/execute/class-9.m", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-9.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-9.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-9.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -2,6 +2,8 @@\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n \n+#include \"next_mapping.h\"\n+\n /* Tests creating a root class and a subclass with an ivar and\n    accessor methods and a subclass overriding the superclass'\n    implementation but reusing it with super - in a category */\n@@ -13,6 +15,9 @@ @interface RootClass\n @end\n \n @implementation RootClass\n+#ifdef __NEXT_RUNTIME__                                   \n++ initialize { return self; }\n+#endif\n @end\n \n @interface SubClass : RootClass"}, {"sha": "cc14abb4343d54a2a3d6c975564b70e883c429a6", "filename": "gcc/testsuite/objc/execute/class-tests-2.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-tests-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-tests-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-tests-2.h?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -62,6 +62,6 @@ void test_accessor_method (TYPE_OF_OBJECT_WITH_ACCESSOR_METHOD object,\n       abort ();\n     }  \n }\n-#endif CLASS_WITH_ACCESSOR_METHOD\n+#endif /* CLASS_WITH_ACCESSOR_METHOD */\n \n "}, {"sha": "1690f8f6bbc3f06db27e82f569441a5c85a3ae45", "filename": "gcc/testsuite/objc/execute/class_self-1.m", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass_self-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass_self-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass_self-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -51,6 +51,9 @@ + (int) method\n {\n   return 4;\n }\n+#ifdef __NEXT_RUNTIME__                                   \n++ initialize { return self; }\n+#endif\n @end\n \n "}, {"sha": "7fa54906cce7b659afcd10e2a02d3e1dc738f522", "filename": "gcc/testsuite/objc/execute/class_self-2.m", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass_self-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass_self-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass_self-2.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -32,6 +32,9 @@ + (struct d) method\n   \n   return u;\n }\n+#ifdef __NEXT_RUNTIME__                                   \n++ initialize { return self; }\n+#endif\n @end\n \n /* The second class */\n@@ -54,6 +57,9 @@ + (void) test\n     }\n }\n \n+#ifdef __NEXT_RUNTIME__                                   \n++ initialize { return self; }\n+#endif\n @end\n \n "}, {"sha": "2c8c002d9e829f2e7d7f6f7bb237897011848645", "filename": "gcc/testsuite/objc/execute/function-message-1.m", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Ffunction-message-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Ffunction-message-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Ffunction-message-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,33 @@\n+#include <objc/Object.h>\n+\n+@interface Foo : Object\n++ bar;\n+@end\n+\n+int foocalled = 0;\n+int barcalled = 0;\n+\n+\n+id foo()\n+{\n+    if (foocalled)\n+      abort ();\n+    foocalled = 1;\n+    return [Foo class];\n+}\n+\n+@implementation Foo\n++ bar\n+{\n+    if (barcalled)\n+      abort ();\n+    barcalled = 1;\n+    return self;\n+}\n+@end\n+\n+int main(int argc,char **argv)\n+{\n+    [foo() bar];\n+    return 0;\n+}"}, {"sha": "6cc2e2535edc9e454074ffe4eb503b415e67e21d", "filename": "gcc/testsuite/objc/execute/many_args_method.m", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fmany_args_method.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fmany_args_method.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fmany_args_method.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -30,6 +30,9 @@ + (int) sum: (int)a   : (int)b  : (int)c\n {\n   return [self sumInteger: a  withInteger: b  withInteger: c];\n }\n+#ifdef __NEXT_RUNTIME__                                   \n++ initialize { return self; }\n+#endif\n @end\n \n "}, {"sha": "5462fd5ef7ad9b62c236199ab24063cbd5db7ad2", "filename": "gcc/testsuite/objc/execute/nested-3.m", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnested-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnested-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnested-3.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -22,6 +22,9 @@ int test (void)\n   return test ();\n }\n \n+#ifdef __NEXT_RUNTIME__                                   \n++ initialize { return self; }\n+#endif\n @end\n \n int main (void)"}, {"sha": "67c2ce342573ec841c38820855f57d0d205adbc0", "filename": "gcc/testsuite/objc/execute/next_mapping.h", "status": "added", "additions": 851, "deletions": 0, "changes": 851, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnext_mapping.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnext_mapping.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnext_mapping.h?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -0,0 +1,851 @@\n+/* This file \"renames\" various ObjC GNU runtime entry points\n+   (and fakes the existence of several others)\n+   if the NeXT runtime is being used.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>  */\n+\n+#ifdef __NEXT_RUNTIME__\n+#include <objc/objc-class.h>\n+#include <ctype.h>\n+\n+#define objc_get_class(C)\t\t\tobjc_getClass(C)\n+#define objc_get_meta_class(C)\t\t\tobjc_getMetaClass(C)\n+#define class_get_class_method(C, S)\t\tclass_getClassMethod(C, S)\n+#define class_get_instance_method(C, S)\t\tclass_getInstanceMethod(C, S)\n+#define method_get_imp(M)\t\t\t(((Method)M)->method_imp)\n+#define sel_get_name(S)\t\t\t\tsel_getName(S)\n+#define class_create_instance(C)\t\tclass_createInstance(C, 0)\n+#define\tclass_get_class_name(C)\t\t\tobject_getClassName(C)\n+#define class_get_super_class(C)\t\t(((struct objc_class *)C)->super_class)\n+#define object_get_super_class(O)\t\tclass_get_super_class(*(struct objc_class **)O)\n+#define objc_lookup_class(N)\t\t\tobjc_lookUpClass(N)\n+#define object_get_class(O)\t\t\t(*(struct objc_class **)O)\n+#define class_is_class(C)\t\t\t(CLS_GETINFO((struct objc_class *)C, CLS_CLASS)? YES: NO)\n+#define class_is_meta_class(C)\t\t\t(CLS_GETINFO((struct objc_class *)C, CLS_META)? YES: NO)\n+#define object_is_class(O)\t\t\tclass_is_meta_class(*(struct objc_class **)O)\n+#define object_is_meta_class(O)\t\t\t(class_is_meta_class(O) && class_is_meta_class(*(struct objc_class **)O))\n+\n+/* You need either an empty +initialize method or an empty -forward:: method. \n+   The NeXT runtime unconditionally sends +initialize to classes when they are \n+   first used, and unconditionally tries to forward methods that the class \n+   doesn't understand (including +initialize). If you have neither +initialize \n+   nor -forward::, the runtime complains.  \n+\n+   The simplest workaround is to add\n+\n+      + initialize { return self; }\n+\n+   to every root class @implementation.  */\n+\n+#ifndef NULL\n+#define NULL 0\n+#endif\n+\n+/* The following is necessary to \"cover\" the bf*.m test cases on NeXT.  */\n+\n+#undef  MAX\n+#define MAX(X, Y)                    \\\n+  ({ typeof (X) __x = (X), __y = (Y); \\\n+     (__x > __y ? __x : __y); })\n+\n+#undef  MIN\n+#define MIN(X, Y)                    \\\n+  ({ typeof (X) __x = (X), __y = (Y); \\\n+     (__x < __y ? __x : __y); })\n+  \n+#undef  ROUND\n+#define ROUND(V, A) \\\n+  ({ typeof (V) __v = (V); typeof (A) __a = (A); \\\n+     __a * ((__v+__a - 1)/__a); })\n+\n+#define BITS_PER_UNIT __CHAR_BIT__\n+#define STRUCTURE_SIZE_BOUNDARY (BITS_PER_UNIT * sizeof (struct{char a;}))\n+\n+/* Not sure why the following are missing from NeXT objc headers... */\n+\n+#ifndef _C_LNG_LNG\n+#define _C_LNG_LNG  'q'\n+#endif\n+#ifndef _C_ULNG_LNG\n+#define _C_ULNG_LNG 'Q'\n+#endif\n+#ifndef _C_ATOM\n+#define _C_ATOM     '%'\n+#endif\n+#ifndef _C_BOOL\n+#define _C_BOOL     'B'\n+#endif\n+\n+#define _C_CONST        'r'\n+#define _C_IN           'n'\n+#define _C_INOUT        'N'\n+#define _C_OUT          'o'\n+#define _C_BYCOPY       'O'\n+#define _C_BYREF        'R'\n+#define _C_ONEWAY       'V'\n+#define _C_GCINVISIBLE  '!'\n+   \n+#define _F_CONST        0x01\n+#define _F_IN           0x01\n+#define _F_OUT          0x02\n+#define _F_INOUT        0x03\n+#define _F_BYCOPY       0x04  \n+#define _F_BYREF        0x08  \n+#define _F_ONEWAY       0x10\n+#define _F_GCINVISIBLE  0x20\n+\n+struct objc_struct_layout\n+{\n+  const char *original_type;\n+  const char *type;\n+  const char *prev_type;\n+  unsigned int record_size; \n+  unsigned int record_align;\n+};\n+\n+typedef union {\n+  char *arg_ptr;\n+  char arg_regs[sizeof (char*)];\n+} *arglist_t;                   /* argument frame */\n+\n+const char *objc_skip_typespec (const char *type);\n+void objc_layout_structure_get_info (struct objc_struct_layout *layout,\n+    unsigned int *offset, unsigned int *align, const char **type);\n+void objc_layout_structure (const char *type,\n+    struct objc_struct_layout *layout);\n+BOOL objc_layout_structure_next_member (struct objc_struct_layout *layout);\n+void objc_layout_finish_structure (struct objc_struct_layout *layout,\n+    unsigned int *size, unsigned int *align);\n+\n+/*\n+  return the size of an object specified by type\n+*/\n+\n+int\n+objc_sizeof_type (const char *type)\n+{\n+  /* Skip the variable name if any */\n+  if (*type == '\"')\n+    {\n+      for (type++; *type++ != '\"';)\n+\t/* do nothing */;\n+    }\n+\n+  switch (*type) {\n+  case _C_ID:\n+    return sizeof (id);\n+    break;\n+\n+  case _C_CLASS:\n+    return sizeof (Class);\n+    break;\n+\n+  case _C_SEL:\n+    return sizeof (SEL);\n+    break;\n+\n+  case _C_CHR:\n+    return sizeof (char);\n+    break;\n+\n+  case _C_UCHR:\n+    return sizeof (unsigned char);\n+    break;\n+\n+  case _C_SHT:\n+    return sizeof (short);\n+    break;\n+\n+  case _C_USHT:\n+    return sizeof (unsigned short);\n+    break;\n+\n+  case _C_INT:\n+    return sizeof (int);\n+    break;\n+\n+  case _C_UINT:\n+    return sizeof (unsigned int);\n+    break;\n+\n+  case _C_LNG:\n+    return sizeof (long);\n+    break;\n+\n+  case _C_ULNG:\n+    return sizeof (unsigned long);\n+    break;\n+\n+  case _C_LNG_LNG:\n+    return sizeof (long long);\n+    break;\n+\n+  case _C_ULNG_LNG:\n+    return sizeof (unsigned long long);\n+    break;\n+\n+  case _C_FLT:\n+    return sizeof (float);\n+    break;\n+\n+  case _C_DBL:\n+    return sizeof (double);\n+    break;\n+\n+  case _C_VOID:\n+    return sizeof (void);\n+    break;\n+\n+  case _C_PTR:\n+  case _C_ATOM:\n+  case _C_CHARPTR:\n+    return sizeof (char *);\n+    break;\n+\n+  case _C_ARY_B:\n+    {\n+      int len = atoi (type + 1);\n+      while (isdigit ((unsigned char)*++type))\n+\t;\n+      return len * objc_aligned_size (type);\n+    }\n+    break;\n+\n+  case _C_BFLD:\n+    {\n+      /* The NeXT encoding of bitfields is _still_: b 'size' */\n+      int size = atoi (type + 1);\n+      /* Return an upper bound on byte size */\n+      return (size + BITS_PER_UNIT - 1) / BITS_PER_UNIT;\n+    }\n+\n+  case _C_STRUCT_B:\n+    {\n+      struct objc_struct_layout layout;\n+      unsigned int size;\n+\n+      objc_layout_structure (type, &layout);\n+      while (objc_layout_structure_next_member (&layout))\n+        /* do nothing */ ;\n+      objc_layout_finish_structure (&layout, &size, NULL);\n+\n+      return size;\n+    }\n+\n+  case _C_UNION_B:\n+    {\n+      int max_size = 0;\n+      while (*type != _C_UNION_E && *type++ != '=')\n+\t/* do nothing */;\n+      while (*type != _C_UNION_E)\n+\t{\n+\t  /* Skip the variable name if any */\n+\t  if (*type == '\"')\n+\t    {\n+\t      for (type++; *type++ != '\"';)\n+\t\t/* do nothing */;\n+\t    }\n+\t  max_size = MAX (max_size, objc_sizeof_type (type));\n+\t  type = objc_skip_typespec (type);\n+\t}\n+      return max_size;\n+    }\n+  }\n+  return 0; /* error */\n+}\n+\n+\n+/*\n+  Return the alignment of an object specified by type\n+*/\n+\n+int\n+objc_alignof_type (const char *type)\n+{\n+  /* Skip the variable name if any */\n+  if (*type == '\"')\n+    {\n+      for (type++; *type++ != '\"';)\n+\t/* do nothing */;\n+    }\n+  switch (*type) {\n+  case _C_ID:\n+    return __alignof__ (id);\n+    break;\n+\n+  case _C_CLASS:\n+    return __alignof__ (Class);\n+    break;\n+\n+  case _C_SEL:\n+    return __alignof__ (SEL);\n+    break;\n+\n+  case _C_CHR:\n+    return __alignof__ (char);\n+    break;\n+\n+  case _C_UCHR:\n+    return __alignof__ (unsigned char);\n+    break;\n+\n+  case _C_SHT:\n+    return __alignof__ (short);\n+    break;\n+\n+  case _C_USHT:\n+    return __alignof__ (unsigned short);\n+    break;\n+\n+  case _C_INT:\n+  case _C_BFLD: /* This is for the NeXT only */\n+    return __alignof__ (int);\n+    break;\n+\n+  case _C_UINT:\n+    return __alignof__ (unsigned int);\n+    break;\n+\n+  case _C_LNG:\n+    return __alignof__ (long);\n+    break;\n+\n+  case _C_ULNG:\n+    return __alignof__ (unsigned long);\n+    break;\n+\n+  case _C_LNG_LNG:\n+    return __alignof__ (long long);\n+    break;\n+\n+  case _C_ULNG_LNG:\n+    return __alignof__ (unsigned long long);\n+    break;\n+\n+  case _C_FLT:\n+    return __alignof__ (float);\n+    break;\n+\n+  case _C_DBL:\n+    return __alignof__ (double);\n+    break;\n+\n+  case _C_PTR:\n+  case _C_ATOM:\n+  case _C_CHARPTR:\n+    return __alignof__ (char *);\n+    break;\n+\n+  case _C_ARY_B:\n+    while (isdigit ((unsigned char)*++type))\n+      /* do nothing */;\n+    return objc_alignof_type (type);\n+\n+  case _C_STRUCT_B:\n+    {\n+      struct objc_struct_layout layout;\n+      unsigned int align;\n+\n+      objc_layout_structure (type, &layout);\n+      while (objc_layout_structure_next_member (&layout))\n+        /* do nothing */;\n+      objc_layout_finish_structure (&layout, NULL, &align);\n+\n+      return align;\n+    }\n+\n+  case _C_UNION_B:\n+    {\n+      int maxalign = 0;\n+      while (*type != _C_UNION_E && *type++ != '=')\n+\t/* do nothing */;\n+      while (*type != _C_UNION_E)\n+\t{\n+\t  /* Skip the variable name if any */\n+\t  if (*type == '\"')\n+\t    {\n+\t      for (type++; *type++ != '\"';)\n+\t\t/* do nothing */;\n+\t    }\n+\t  maxalign = MAX (maxalign, objc_alignof_type (type));\n+\t  type = objc_skip_typespec (type);\n+\t}\n+      return maxalign;\n+    }\n+  }\n+  return 0; /* error */\n+}\n+\n+/*\n+  The aligned size if the size rounded up to the nearest alignment.\n+*/\n+\n+int\n+objc_aligned_size (const char *type)\n+{\n+  int size, align;\n+\n+  /* Skip the variable name */\n+  if (*type == '\"')\n+    {\n+      for (type++; *type++ != '\"';)\n+\t/* do nothing */;\n+    }\n+\n+  size = objc_sizeof_type (type);\n+  align = objc_alignof_type (type);\n+\n+  return ROUND (size, align);\n+}\n+\n+/*\n+  The size rounded up to the nearest integral of the wordsize, taken\n+  to be the size of a void *.\n+*/\n+\n+int\n+objc_promoted_size (const char *type)\n+{\n+  int size, wordsize;\n+\n+  /* Skip the variable name */\n+  if (*type == '\"')\n+    {\n+      for (type++; *type++ != '\"';)\n+\t/* do nothing */;\n+    }\n+\n+  size = objc_sizeof_type (type);\n+  wordsize = sizeof (void *);\n+\n+  return ROUND (size, wordsize);\n+}\n+\n+/*\n+  Skip type qualifiers.  These may eventually precede typespecs\n+  occurring in method prototype encodings.\n+*/\n+\n+inline const char *\n+objc_skip_type_qualifiers (const char *type)\n+{\n+  while (*type == _C_CONST\n+\t || *type == _C_IN\n+\t || *type == _C_INOUT\n+\t || *type == _C_OUT\n+\t || *type == _C_BYCOPY\n+         || *type == _C_BYREF\n+\t || *type == _C_ONEWAY\n+\t || *type == _C_GCINVISIBLE)\n+    {\n+      type += 1;\n+    }\n+  return type;\n+}\n+\n+\n+/*\n+  Skip one typespec element.  If the typespec is prepended by type\n+  qualifiers, these are skipped as well.\n+*/\n+\n+const char *\n+objc_skip_typespec (const char *type)\n+{\n+  /* Skip the variable name if any */\n+  if (*type == '\"')\n+    {\n+      for (type++; *type++ != '\"';)\n+\t/* do nothing */;\n+    }\n+\n+  type = objc_skip_type_qualifiers (type);\n+\n+  switch (*type) {\n+\n+  case _C_ID:\n+    /* An id may be annotated by the actual type if it is known\n+       with the @\"ClassName\" syntax */\n+\n+    if (*++type != '\"')\n+      return type;\n+    else\n+      {\n+\twhile (*++type != '\"')\n+\t  /* do nothing */;\n+\treturn type + 1;\n+      }\n+\n+    /* The following are one character type codes */\n+  case _C_CLASS:\n+  case _C_SEL:\n+  case _C_CHR:\n+  case _C_UCHR:\n+  case _C_CHARPTR:\n+  case _C_ATOM:\n+  case _C_SHT:\n+  case _C_USHT:\n+  case _C_INT:\n+  case _C_UINT:\n+  case _C_LNG:\n+  case _C_ULNG:\n+  case _C_LNG_LNG:\n+  case _C_ULNG_LNG:\n+  case _C_FLT:\n+  case _C_DBL:\n+  case _C_VOID:\n+  case _C_UNDEF:\n+    return ++type;\n+    break;\n+\n+  case _C_ARY_B:\n+    /* skip digits, typespec and closing ']' */\n+\n+    while (isdigit ((unsigned char)*++type))\n+      ;\n+    type = objc_skip_typespec (type);\n+    if (*type == _C_ARY_E)\n+      return ++type;\n+    else\n+      break; /* error */\n+\n+  case _C_BFLD:\n+      /* The NeXT encoding for bitfields is _still_: b 'size' */\n+    while (isdigit ((unsigned char)*++type))\n+      ;\t/* skip type and size */\n+    return type;\n+\n+  case _C_STRUCT_B:\n+    /* skip name, and elements until closing '}'  */\n+\n+    while (*type != _C_STRUCT_E && *type++ != '=')\n+      ;\n+    while (*type != _C_STRUCT_E)\n+      {\n+\ttype = objc_skip_typespec (type);\n+      }\n+    return ++type;\n+\n+  case _C_UNION_B:\n+    /* skip name, and elements until closing ')'  */\n+\n+    while (*type != _C_UNION_E && *type++ != '=')\n+      ;\n+    while (*type != _C_UNION_E)\n+      {\n+\ttype = objc_skip_typespec (type);\n+      }\n+    return ++type;\n+\n+  case _C_PTR:\n+    /* Just skip the following typespec */\n+\n+    return objc_skip_typespec (++type);\n+  }\n+  return 0; /* error */\n+}\n+\n+/*\n+  Skip an offset as part of a method encoding.  This is prepended by a\n+  '+' if the argument is passed in registers.\n+*/\n+inline const char *\n+objc_skip_offset (const char *type)\n+{\n+  if (*type == '+')\n+    type++;\n+  while (isdigit ((unsigned char) *++type))\n+    ;\n+  return type;\n+}\n+\n+/*\n+  Skip an argument specification of a method encoding.\n+*/\n+const char *\n+objc_skip_argspec (const char *type)\n+{\n+  type = objc_skip_typespec (type);\n+  type = objc_skip_offset (type);\n+  return type;\n+}\n+\n+/*\n+  Return the number of arguments that the method MTH expects.\n+  Note that all methods need two implicit arguments `self' and\n+  `_cmd'.\n+*/\n+int\n+method_get_number_of_arguments (struct objc_method *mth)\n+{\n+  int i = 0;\n+  const char *type = mth->method_types;\n+  while (*type)\n+    {\n+      type = objc_skip_argspec (type);\n+      i += 1;\n+    }\n+  return i - 1;\n+}\n+\n+/*\n+  Return the size of the argument block needed on the stack to invoke\n+  the method MTH.  This may be zero, if all arguments are passed in\n+  registers.\n+*/\n+\n+int\n+method_get_sizeof_arguments (struct objc_method *mth)\n+{\n+  const char *type = objc_skip_typespec (mth->method_types);\n+  return atoi (type);\n+}\n+\n+/*\n+  Return a pointer to the next argument of ARGFRAME.  type points to\n+  the last argument.  Typical use of this look like:\n+\n+  {\n+    char *datum, *type;\n+    for (datum = method_get_first_argument (method, argframe, &type);\n+         datum; datum = method_get_next_argument (argframe, &type))\n+      {\n+        unsigned flags = objc_get_type_qualifiers (type);\n+        type = objc_skip_type_qualifiers (type);\n+\tif (*type != _C_PTR)\n+          [portal encodeData: datum ofType: type];\n+\telse\n+\t  {\n+\t    if ((flags & _F_IN) == _F_IN)\n+              [portal encodeData: *(char **) datum ofType: ++type];\n+\t  }\n+      }\n+  }\n+*/\n+\n+char *\n+method_get_next_argument (arglist_t argframe, const char **type)\n+{\n+  const char *t = objc_skip_argspec (*type);\n+\n+  if (*t == '\\0')\n+    return 0;\n+\n+  *type = t;\n+  t = objc_skip_typespec (t);\n+\n+  if (*t == '+')\n+    return argframe->arg_regs + atoi (++t);\n+  else\n+    return argframe->arg_ptr + atoi (t);\n+}\n+\n+/*\n+  Return a pointer to the value of the first argument of the method\n+  described in M with the given argumentframe ARGFRAME.  The type\n+  is returned in TYPE.  type must be passed to successive calls of\n+  method_get_next_argument.\n+*/\n+char *\n+method_get_first_argument (struct objc_method *m,\n+\t\t\t   arglist_t argframe,\n+\t\t\t   const char **type)\n+{\n+  *type = m->method_types;\n+  return method_get_next_argument (argframe, type);\n+}\n+\n+/*\n+   Return a pointer to the ARGth argument of the method\n+   M from the frame ARGFRAME.  The type of the argument\n+   is returned in the value-result argument TYPE\n+*/\n+\n+char *\n+method_get_nth_argument (struct objc_method *m,\n+\t\t\t arglist_t argframe, int arg,\n+\t\t\t const char **type)\n+{\n+  const char *t = objc_skip_argspec (m->method_types);\n+\n+  if (arg > method_get_number_of_arguments (m))\n+    return 0;\n+\n+  while (arg--)\n+    t = objc_skip_argspec (t);\n+\n+  *type = t;\n+  t = objc_skip_typespec (t);\n+\n+  if (*t == '+')\n+    return argframe->arg_regs + atoi (++t);\n+  else\n+    return argframe->arg_ptr + atoi (t);\n+}\n+\n+unsigned\n+objc_get_type_qualifiers (const char *type)\n+{\n+  unsigned res = 0;\n+  BOOL flag = YES;\n+\n+  while (flag)\n+    switch (*type++)\n+      {\n+      case _C_CONST:\tres |= _F_CONST; break;\n+      case _C_IN:\tres |= _F_IN; break;\n+      case _C_INOUT:\tres |= _F_INOUT; break;\n+      case _C_OUT:\tres |= _F_OUT; break;\n+      case _C_BYCOPY:\tres |= _F_BYCOPY; break;\n+      case _C_BYREF:  res |= _F_BYREF; break;\n+      case _C_ONEWAY:\tres |= _F_ONEWAY; break;\n+      case _C_GCINVISIBLE: res |= _F_GCINVISIBLE; break;\n+      default: flag = NO;\n+    }\n+\n+  return res;\n+}\n+\n+\n+/* The following three functions can be used to determine how a\n+   structure is laid out by the compiler. For example:\n+\n+  struct objc_struct_layout layout;\n+  int i;\n+\n+  objc_layout_structure (type, &layout);\n+  while (objc_layout_structure_next_member (&layout))\n+    {\n+      int position, align;\n+      const char *type;\n+\n+      objc_layout_structure_get_info (&layout, &position, &align, &type);\n+      printf (\"element %d has offset %d, alignment %d\\n\",\n+              i++, position, align);\n+    }\n+\n+  These functions are used by objc_sizeof_type and objc_alignof_type\n+  functions to compute the size and alignment of structures. The\n+  previous method of computing the size and alignment of a structure\n+  was not working on some architectures, particulary on AIX, and in\n+  the presence of bitfields inside the structure. */\n+void\n+objc_layout_structure (const char *type,\n+                           struct objc_struct_layout *layout)\n+{\n+  const char *ntype;\n+\n+  layout->original_type = ++type;\n+\n+  /* Skip \"<name>=\" if any. Avoid embedded structures and unions. */\n+  ntype = type;\n+  while (*ntype != _C_STRUCT_E && *ntype != _C_STRUCT_B && *ntype != _C_UNION_B\n+         && *ntype++ != '=')\n+    /* do nothing */;\n+\n+  /* If there's a \"<name>=\", ntype - 1 points to '='; skip the the name */\n+  if (*(ntype - 1) == '=')\n+    type = ntype;\n+\n+  layout->type = type;\n+  layout->prev_type = NULL;\n+  layout->record_size = 0;\n+  layout->record_align = MAX (BITS_PER_UNIT, STRUCTURE_SIZE_BOUNDARY);\n+}\n+\n+\n+BOOL\n+objc_layout_structure_next_member (struct objc_struct_layout *layout)\n+{\n+  register int desired_align = 0;\n+\n+  /* The current type without the type qualifiers */\n+  const char *type;\n+\n+  /* Add the size of the previous field to the size of the record.  */\n+  if (layout->prev_type)\n+    {\n+      type = objc_skip_type_qualifiers (layout->prev_type);\n+\n+      if (*type != _C_BFLD)\n+        layout->record_size += objc_sizeof_type (type) * BITS_PER_UNIT;\n+      else\n+\tlayout->record_size += atoi (++type);\n+    }\n+\n+  if (*layout->type == _C_STRUCT_E)\n+    return NO;\n+\n+  /* Skip the variable name if any */\n+  if (*layout->type == '\"')\n+    {\n+      for (layout->type++; *layout->type++ != '\"';)\n+        /* do nothing */;\n+    }\n+\n+  type = objc_skip_type_qualifiers (layout->type);\n+\n+  desired_align = objc_alignof_type (type) * BITS_PER_UNIT;\n+\n+  /* Record must have at least as much alignment as any field.\n+     Otherwise, the alignment of the field within the record\n+     is meaningless.  */\n+  layout->record_align = MAX (layout->record_align, desired_align);\n+\n+  if (*type == _C_BFLD)\n+    {\n+      int bfld_size = atoi (++type);\n+      int int_align = __alignof__ (int) * BITS_PER_UNIT;\n+      /* If this bitfield would traverse a word alignment boundary, push it out \n+\t to that boundary instead.  */\n+      if (layout->record_size % int_align\n+\t  && (layout->record_size / int_align\n+\t      < (layout->record_size + bfld_size - 1) / int_align))\n+\tlayout->record_size = ROUND (layout->record_size, int_align);\n+    }\n+  else if (layout->record_size % desired_align != 0)\n+    {\n+      /* We need to skip space before this field.\n+         Bump the cumulative size to multiple of field alignment.  */\n+      layout->record_size = ROUND (layout->record_size, desired_align);\n+    }\n+\n+  /* Jump to the next field in record. */\n+\n+  layout->prev_type = layout->type;\n+  layout->type = objc_skip_typespec (layout->type);      /* skip component */\n+\n+  return YES;\n+}\n+\n+\n+void objc_layout_finish_structure (struct objc_struct_layout *layout,\n+                                   unsigned int *size,\n+                                   unsigned int *align)\n+{\n+  if (layout->type && *layout->type == _C_STRUCT_E)\n+    {\n+      /* Round the size up to be a multiple of the required alignment */\n+      layout->record_size = ROUND (layout->record_size, layout->record_align);\n+      layout->type = NULL;\n+    }\n+  if (size)\n+    *size = layout->record_size / BITS_PER_UNIT;\n+  if (align)\n+    *align = layout->record_align / BITS_PER_UNIT;\n+}\n+\n+\n+void objc_layout_structure_get_info (struct objc_struct_layout *layout,\n+                                     unsigned int *offset,\n+                                     unsigned int *align,\n+                                     const char **type)\n+{\n+  if (offset)\n+    *offset = layout->record_size / BITS_PER_UNIT;\n+  if (align)\n+    *align = layout->record_align / BITS_PER_UNIT;\n+  if (type)\n+    *type = layout->prev_type;\n+}\n+\n+#endif  /* #ifdef __NEXT_RUNTIME__ */"}, {"sha": "85aa203ca5ceaa87f699d19fb0bc8cc77e62a98d", "filename": "gcc/testsuite/objc/execute/np-2.m", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnp-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnp-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnp-2.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -17,6 +17,9 @@ + (oneway void) methodA\n {\n   printf (\"methodA\\n\");\n }\n+#ifdef __NEXT_RUNTIME__                                   \n++ initialize { return self; }\n+#endif\n @end\n \n int main (void)"}, {"sha": "87deb986497eecc73ea6bab140b5f44593fe1e7e", "filename": "gcc/testsuite/objc/execute/object_is_class.m", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fobject_is_class.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fobject_is_class.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fobject_is_class.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -3,6 +3,8 @@\n #include <objc/objc-api.h>\n #include <objc/Object.h>\n \n+#include \"next_mapping.h\"\n+\n /* This test demonstrate a failure in object_is_class which was fixed */\n \n /* Create a class whose instance variables mirror the struct used for"}, {"sha": "aeb129ef4e524f92e65968661a41f323617796c1", "filename": "gcc/testsuite/objc/execute/object_is_meta_class.m", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fobject_is_meta_class.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fobject_is_meta_class.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fobject_is_meta_class.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -3,6 +3,8 @@\n #include <objc/objc-api.h>\n #include <objc/Object.h>\n \n+#include \"next_mapping.h\"\n+\n /* This test demonstrate a failure in object_is_meta_class which was fixed */\n \n @interface EvilClass : Object"}, {"sha": "ddb2eb2e3d0ed925c82ce2f9d76773280dea2280", "filename": "gcc/testsuite/objc/execute/redefining_self.m", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fredefining_self.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fredefining_self.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fredefining_self.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -17,6 +17,9 @@ + (Class) class\n \n   return self;\n }\n+#ifdef __NEXT_RUNTIME__                                   \n++ initialize { return self; }\n+#endif\n @end\n \n "}, {"sha": "c18ceb07284e7a68eb720b9a64cb649278eccb28", "filename": "gcc/testsuite/objc/execute/root_methods.m", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Froot_methods.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Froot_methods.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Froot_methods.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -1,6 +1,8 @@\n /* Contributed by Nicola Pero - Thu Mar  8 16:27:46 CET 2001 */\n #include <objc/objc.h>\n \n+#include \"next_mapping.h\"\n+\n /* Test that instance methods of root classes are available as class \n    methods to other classes as well */\n \n@@ -16,6 +18,9 @@ - (id) self\n {\n   return self;\n }\n+#ifdef __NEXT_RUNTIME__                                   \n++ initialize { return self; }\n+#endif\n @end\n \n @interface NormalClass : RootClass"}, {"sha": "a778b722c15a37fe3ffb1dd01e1057e58f747589", "filename": "gcc/testsuite/objc/execute/static-1.m", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstatic-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstatic-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstatic-1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -19,6 +19,9 @@ + (int) test\n   return test;\n }\n \n+#ifdef __NEXT_RUNTIME__                                   \n++ initialize { return self; }\n+#endif\n @end\n \n int main (void)"}, {"sha": "4d7e7449bff16c6b7ba875af7c72588d252cda29", "filename": "gcc/testsuite/objc/execute/static-2.m", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstatic-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstatic-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstatic-2.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -22,6 +22,9 @@ + (int) test\n   return test ();\n }\n \n+#ifdef __NEXT_RUNTIME__                                   \n++ initialize { return self; }\n+#endif\n @end\n \n int main (void)"}, {"sha": "58a603c1f1f9348753160069b7ec89a473df1348", "filename": "gcc/testsuite/objc/execute/string1.m", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring1.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -2,7 +2,12 @@\n \n #include <string.h>\n #include <stdlib.h>\n+\n+#ifdef __NEXT_RUNTIME__\n+#import <Foundation/NSString.h>\n+#else\n #include <objc/NXConstStr.h>\n+#endif\n \n int main(int argc, void **args)\n {"}, {"sha": "01fb85c11893746be84a1014d5b5d27ca5173122", "filename": "gcc/testsuite/objc/execute/string2.m", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring2.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -2,7 +2,12 @@\n \n #include <string.h>\n #include <stdlib.h>\n+\n+#ifdef __NEXT_RUNTIME__\n+#import <Foundation/NSString.h>\n+#else\n #include <objc/NXConstStr.h>\n+#endif\n \n int main(int argc, void **args)\n {"}, {"sha": "a8d2969689968e7a56adfe2be26cc5bbbc8a8bfd", "filename": "gcc/testsuite/objc/execute/string3.m", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring3.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -2,7 +2,12 @@\n \n #include <string.h>\n #include <stdlib.h>\n+\n+#ifdef __NEXT_RUNTIME__\n+#import <Foundation/NSString.h>\n+#else\n #include <objc/NXConstStr.h>\n+#endif\n \n #define STRING \"this is a string\"\n "}, {"sha": "16025cbaed618e5104bb10ca52304a01c41ee22d", "filename": "gcc/testsuite/objc/execute/string4.m", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstring4.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -2,7 +2,12 @@\n \n #include <string.h>\n #include <stdlib.h>\n+\n+#ifdef __NEXT_RUNTIME__\n+#import <Foundation/NSString.h>\n+#else\n #include <objc/NXConstStr.h>\n+#endif\n \n int main(int argc, void **args)\n {"}, {"sha": "51619b8d3130377c0010261ead08f7545b94c318", "filename": "gcc/testsuite/objc/execute/va_method.m", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fva_method.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264fa2db22ce7cf50ebb108edb097acf0c9f2a57/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fva_method.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fva_method.m?ref=264fa2db22ce7cf50ebb108edb097acf0c9f2a57", "patch": "@@ -1,6 +1,7 @@\n /* Contributed by Nicola Pero - Thu Mar  8 16:27:46 CET 2001 */\n #include <objc/objc.h>\n #include <objc/objc-api.h>\n+#include <stdarg.h>\n \n /* Test method with variable number of arguments */\n \n@@ -31,6 +32,9 @@ + (int) sum: (int)firstNumber, ...\n \n   return sum;\n }\n+#ifdef __NEXT_RUNTIME__                                   \n++ initialize { return self; }\n+#endif\n @end\n \n int main (void)"}]}