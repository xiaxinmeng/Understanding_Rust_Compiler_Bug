{"sha": "9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE3OTQ1MmQ0Y2FkNmMzNGU5ZmY3YzQzNzAxNTdiYjFkNmFkODg2OQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2014-09-23T00:48:46Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2014-09-23T00:48:46Z"}, "message": "Remove LIBGCC2_LONG_DOUBLE_TYPE_SIZE target macro.\n\nThis patch removes the target macro LIBGCC2_LONG_DOUBLE_TYPE_SIZE.\n\nAfter recent changes, this macro was used in two ways in libgcc: to\ndetermine the mode of long double in dfp-bit.h, and to determine\nwhether a particular mode has excess precision for use in complex\nmultiplication.\n\nThe former is concerned specifically with long double: it relates to\nuse of strtold for converting between decimal and binary floating\npoint.  This is replaced by comparing __LDBL_MANT_DIG__ with the\nappropriate __LIBGCC_*_MANT_DIG__ macro.  The latter is replaced\n__LIBGCC_*_EXCESS_PRECISION__ predefined macros.\n\nRemarks:\n\n* Comparing (__LDBL_MANT_DIG__ == __LIBGCC_XF_MANT_DIG__) is more\n  fragile than it looks; it's possible for XFmode to have 53-bit\n  mantissa (TARGET_96_ROUND_53_LONG_DOUBLE, on FreeBSD and\n  DragonFlyBSD 32-bit), in which case such a comparison would not\n  distinguish XFmode and DFmode as possible modes for long double.\n  Fortunately, no target supporting that form of XFmode also supports\n  long double = double (but if some target did, we'd need e.g. an\n  additional macro giving the exponent range of each mode).\n\n  Furthermore, this code doesn't actually get used for x86 (or any\n  other target with XFmode support), because x86 uses BID not DPD and\n  BID has its own conversion code (which handles conversions for both\n  XFmode and TFmode without needing to go via strtold).  And FreeBSD\n  and DragonFlyBSD aren't among the targets with DFP support.  So\n  while in principle this code is fragile and it's a deficiency that\n  it can't support both XFmode and TFmode at once (something that\n  can't be solved with the string conversion approach without libc\n  having TS 18661 functions such as strtof128), all these issues\n  should not be a problem in practice.\n\n* If other cases of excess precision are supported in future, the code\n  for defining __LIBGCC_*_EXCESS_PRECISION__ may need updating.\n  Although the most likely such cases might not actually involve\n  excess precision for any mode used in libgcc - FLT_EVAL_METHOD being\n  32 to do _Float16 arithmetic on _Float32 should have the effect of\n  _Complex _Float16 arithmetic using __mulsc3 and __divsc3, rather\n  than currently nonexistent __mulhc3 and __divhc3 as in bug 63250 for\n  ARM.\n\n* As has been noted in the context of simultaneous support for\n  __float128 and __ibm128 on Power, the semantics of macros such as\n  LONG_DOUBLE_TYPE_SIZE are problematic because they rely on a\n  poorly-defined precision value for floating-point modes (which seems\n  to be intended as the number of significant bits in the\n  representation, e.g. 80 for XFmode which may be either 12 or 16\n  bytes) uniquely identifying a mode (although defining an arbitrarily\n  different value for one of the modes you wish to distinguish may\n  work as a hack).  It would be cleaner to have a target hook that\n  gives a machine mode directly for float, double and long double,\n  rather than going via these precision values.  By eliminating all\n  use of these macros (FLOAT_TYPE_SIZE, DOUBLE_TYPE_SIZE,\n  LONG_DOUBLE_TYPE_SIZE) from code built for the target, this patch\n  facilitates such a conversion to a hook (which I suppose would take\n  some suitable enum as an argument to identify which of the three\n  types to return a mode for).\n\n  (The issue of multiple type support for DFP conversions would apply\n  in that Power case.\n  <https://gcc.gnu.org/ml/gcc-patches/2014-07/msg01084.html> doesn't\n  seem to touch on it, but it would seem reasonable to punt on it\n  initially as hard to fix.  There would also be the issue of getting\n  functions such as __powikf2, __mulkc3, __divkc3 defined, but that's\n  rather easier to address.)\n\nBootstrapped with no regressions on x86_64-unknown-linux-gnu.\n\ngcc:\n\t* doc/tm.texi.in (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n\t* doc/tm.texi: Regenerate.\n\t* system.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Poison.\n\t* config/alpha/alpha.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n\t* config/i386/i386-interix.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE):\n\tRemove.\n\t* config/i386/i386.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n\t* config/i386/rtemself.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n\t* config/ia64/ia64.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n\t* config/m68k/m68k.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n\t* config/m68k/netbsd-elf.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE):\n\tRemove.\n\t* config/mips/mips.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n\t* config/mips/n32-elf.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n\t* config/msp430/msp430.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n\t* config/rl78/rl78.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n\t* config/rs6000/rs6000.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n\t* config/rx/rx.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n\t* config/s390/s390.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n\t* config/sparc/freebsd.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n\t* config/sparc/linux.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n\t* config/sparc/linux64.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n\t* config/sparc/netbsd-elf.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE):\n\tRemove.\n\ngcc/c-family:\n\t* c-cppbuiltin.c (c_cpp_builtins): Define\n\t__LIBGCC_*_EXCESS_PRECISION__ macros for supported floating-point\n\tmodes.\n\nlibgcc:\n\t* dfp-bit.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n\t(__LIBGCC_XF_MANT_DIG__): Define if not already defined.\n\t(LONG_DOUBLE_HAS_XF_MODE): Define in terms of\n\t__LIBGCC_XF_MANT_DIG__.\n\t(__LIBGCC_TF_MANT_DIG__): Define if not already defined.\n\t(LONG_DOUBLE_HAS_TF_MODE): Define in terms of\n\t__LIBGCC_TF_MANT_DIG__.\n\t* libgcc2.c (NOTRUNC): Define in terms of\n\t__LIBGCC_*_EXCESS_PRECISION__, not LIBGCC2_LONG_DOUBLE_TYPE_SIZE.\n\t* libgcc2.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n\nFrom-SVN: r215491", "tree": {"sha": "b856d45ce77cbdaa24295e19ce10446dab3f4dae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b856d45ce77cbdaa24295e19ce10446dab3f4dae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c499348bcb15bc1697bb1d2c3acc257d4294457", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c499348bcb15bc1697bb1d2c3acc257d4294457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c499348bcb15bc1697bb1d2c3acc257d4294457"}], "stats": {"total": 239, "additions": 84, "deletions": 155}, "files": [{"sha": "f91e231f2e6c3c65c7ddb8d11455ba9390eef7bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -1,3 +1,30 @@\n+2014-09-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* doc/tm.texi.in (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n+\t* doc/tm.texi: Regenerate.\n+\t* system.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Poison.\n+\t* config/alpha/alpha.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n+\t* config/i386/i386-interix.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE):\n+\tRemove.\n+\t* config/i386/i386.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n+\t* config/i386/rtemself.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n+\t* config/ia64/ia64.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n+\t* config/m68k/m68k.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n+\t* config/m68k/netbsd-elf.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE):\n+\tRemove.\n+\t* config/mips/mips.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n+\t* config/mips/n32-elf.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n+\t* config/msp430/msp430.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n+\t* config/rl78/rl78.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n+\t* config/rs6000/rs6000.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n+\t* config/rx/rx.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n+\t* config/s390/s390.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n+\t* config/sparc/freebsd.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n+\t* config/sparc/linux.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n+\t* config/sparc/linux64.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n+\t* config/sparc/netbsd-elf.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE):\n+\tRemove.\n+\n 2014-09-22  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree-ssa-ccp.c (prop_value_d): Rename to ..."}, {"sha": "468c78bfa2642bcbb9285981719d2f58eb18ffa3", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -1,3 +1,9 @@\n+2014-09-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): Define\n+\t__LIBGCC_*_EXCESS_PRECISION__ macros for supported floating-point\n+\tmodes.\n+\n 2014-09-18  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-cppbuiltin.c (c_cpp_builtins): Define __LIBGCC_*_FUNC_EXT__"}, {"sha": "6748db435ede0008838620884400218dcdb62e2e", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -978,6 +978,30 @@ c_cpp_builtins (cpp_reader *pfile)\n \t  else\n \t    gcc_unreachable ();\n \t  builtin_define_with_value (macro_name, suffix, 0);\n+\t  bool excess_precision = false;\n+\t  if (TARGET_FLT_EVAL_METHOD != 0\n+\t      && mode != TYPE_MODE (long_double_type_node)\n+\t      && (mode == TYPE_MODE (float_type_node)\n+\t\t  || mode == TYPE_MODE (double_type_node)))\n+\t    switch (TARGET_FLT_EVAL_METHOD)\n+\t      {\n+\t      case -1:\n+\t      case 2:\n+\t\texcess_precision = true;\n+\t\tbreak;\n+\n+\t      case 1:\n+\t\texcess_precision = mode == TYPE_MODE (float_type_node);\n+\t\tbreak;\n+\n+\t      default:\n+\t\tgcc_unreachable ();\n+\t      }\n+\t  macro_name = (char *) alloca (strlen (name)\n+\t\t\t\t\t+ sizeof (\"__LIBGCC__EXCESS_\"\n+\t\t\t\t\t\t  \"PRECISION__\"));\n+\t  sprintf (macro_name, \"__LIBGCC_%s_EXCESS_PRECISION__\", name);\n+\t  builtin_define_with_int_value (macro_name, excess_precision);\n \t}\n \n       /* For libgcc crtstuff.c and libgcc2.c.  */"}, {"sha": "ea5fd13af191d7344cd6641f4937fb299731e779", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -203,14 +203,6 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n #define DOUBLE_TYPE_SIZE 64\n #define LONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_128 ? 128 : 64)\n \n-/* Define this to set long double type size to use in libgcc2.c, which can\n-   not depend on target_flags.  */\n-#ifdef __LONG_DOUBLE_128__\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 128\n-#else\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n-#endif\n-\n /* Work around target_flags dependency in ada/targtyps.c.  */\n #define WIDEST_HARDWARE_FP_SIZE 64\n "}, {"sha": "98b8ae1466009638bb8c98d9430a36f58a1b8757", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -140,8 +140,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Turn off long double being 96 bits.  */\n #undef LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE 64\n-#undef LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n \n #define IX86_NO_LIBGCC_TFMODE\n "}, {"sha": "63005460783f91fd1e8067f0da7bba79414bec73", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -694,16 +694,6 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define LONG_DOUBLE_TYPE_SIZE \\\n   (TARGET_LONG_DOUBLE_64 ? 64 : (TARGET_LONG_DOUBLE_128 ? 128 : 80))\n \n-/* Define this to set long double type size to use in libgcc2.c, which can\n-   not depend on target_flags.  */\n-#ifdef __LONG_DOUBLE_64__\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n-#elif defined (__LONG_DOUBLE_128__)\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 128\n-#else\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 80\n-#endif\n-\n #define WIDEST_HARDWARE_FP_SIZE 80\n \n #if defined (TARGET_BI_ARCH) || TARGET_64BIT_DEFAULT"}, {"sha": "1461a9e9c4d1f13568e21940d63f6ee7f2779af1", "filename": "gcc/config/i386/rtemself.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fi386%2Frtemself.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fi386%2Frtemself.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Frtemself.h?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -32,11 +32,4 @@ along with GCC; see the file COPYING3.  If not see\n #undef LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE (TARGET_80387 ? 80 : 64)\n \n-#undef LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n-#ifdef _SOFT_FLOAT\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n-#else\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 80\n-#endif\n-\n #define IX86_NO_LIBGCC_TFMODE"}, {"sha": "372bee740a7d7ecd7ea02962ae37ae07dca6d958", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -253,10 +253,6 @@ while (0)\n    : TARGET_ABI_OPEN_VMS ? 64 \\\n    : 80)\n \n-/* We always want the XFmode operations from libgcc2.c, except on VMS\n-   where this yields references to unimplemented \"insns\".  */\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE  (TARGET_ABI_OPEN_VMS ? 64 : 80)\n-\n \n #define DEFAULT_SIGNED_CHAR 1\n "}, {"sha": "a621b627a39ea559019cfd9330ea373ab96f8def", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -280,14 +280,6 @@ along with GCC; see the file COPYING3.  If not see\n #define LONG_DOUBLE_TYPE_SIZE\t\t\t\\\n   ((TARGET_COLDFIRE || TARGET_FIDOA) ? 64 : 80)\n \n-/* We need to know the size of long double at compile-time in libgcc2.  */\n-\n-#if defined(__mcoldfire__) || defined(__mfido__)\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n-#else\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 80\n-#endif\n-\n /* Set the value of FLT_EVAL_METHOD in float.h.  When using 68040 fp\n    instructions, we get proper intermediate rounding, otherwise we\n    get extended precision results.  */"}, {"sha": "eade5b4192142cca71e59711055f71b5a1fe3cdd", "filename": "gcc/config/m68k/netbsd-elf.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -39,13 +39,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE (TARGET_68020 ? 80 : 64)\n \n-#undef LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n-#ifdef __mc68010__\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n-#else\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 80\n-#endif\n-\n #undef SUBTARGET_EXTRA_SPECS\n #define SUBTARGET_EXTRA_SPECS \\\n   { \"netbsd_entry_point\",   NETBSD_ENTRY_POINT },"}, {"sha": "c7b998bf758ec4af372e76d32b1b9f06946c66be", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -1399,15 +1399,6 @@ struct mips_cpu_info {\n    support long double, we also want a 128-bit integer type.  */\n #define MAX_FIXED_MODE_SIZE LONG_DOUBLE_TYPE_SIZE\n \n-#ifdef IN_LIBGCC2\n-#if ((defined _ABIN32 && _MIPS_SIM == _ABIN32) \\\n-     || (defined _ABI64 && _MIPS_SIM == _ABI64))\n-#  define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 128\n-# else\n-#  define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n-# endif\n-#endif\n-\n /* Width in bits of a pointer.  */\n #ifndef POINTER_SIZE\n #define POINTER_SIZE ((TARGET_LONG64 && TARGET_64BIT) ? 64 : 32)"}, {"sha": "a611a9e404af169f212ccfcfca61735bffcbc11a", "filename": "gcc/config/mips/n32-elf.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fmips%2Fn32-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fmips%2Fn32-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fn32-elf.h?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -28,8 +28,3 @@ along with GCC; see the file COPYING3.  If not see\n /* Force n32 to use 64-bit long doubles.  */\n #undef LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE 64\n-\n-#ifdef IN_LIBGCC2\n-#undef LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n-#endif"}, {"sha": "70196e2e7d97fe6f03de2953664ce20402c1ce56", "filename": "gcc/config/msp430/msp430.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.h?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -111,8 +111,6 @@ extern bool msp430x;\n #define DOUBLE_TYPE_SIZE \t\t64\n #define LONG_DOUBLE_TYPE_SIZE\t\t64 /*DOUBLE_TYPE_SIZE*/\n \n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE   64\n-\n #define DEFAULT_SIGNED_CHAR\t\t0\n \n #define STRICT_ALIGNMENT \t\t1"}, {"sha": "c3cae69275a620d40f574e8e70796bdd88bf566a", "filename": "gcc/config/rl78/rl78.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Frl78%2Frl78.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Frl78%2Frl78.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.h?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -98,8 +98,6 @@\n #define DOUBLE_TYPE_SIZE \t\t32 /*64*/\n #define LONG_DOUBLE_TYPE_SIZE\t\t64 /*DOUBLE_TYPE_SIZE*/\n \n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE   64\n-\n #define DEFAULT_SIGNED_CHAR\t\t0\n \n #define STRICT_ALIGNMENT \t\t1"}, {"sha": "1fd4f2aa021c1fa7bc42ae07acb1ce52d990ad65", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -820,14 +820,6 @@ extern unsigned char rs6000_recip_bits[];\n    words.  */\n #define LONG_DOUBLE_TYPE_SIZE rs6000_long_double_type_size\n \n-/* Define this to set long double type size to use in libgcc2.c, which can\n-   not depend on target_flags.  */\n-#ifdef __LONG_DOUBLE_128__\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 128\n-#else\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n-#endif\n-\n /* Work around rs6000_long_double_type_size dependency in ada/targtyps.c.  */\n #define WIDEST_HARDWARE_FP_SIZE 64\n "}, {"sha": "57a24e6dd209160f0b1de044f8c0c0ab4e842c80", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -130,12 +130,6 @@\n #define DOUBLE_TYPE_SIZE \t\t(TARGET_64BIT_DOUBLES ? 64 : 32)\n #define LONG_DOUBLE_TYPE_SIZE\t\tDOUBLE_TYPE_SIZE\n \n-#ifdef __RX_32BIT_DOUBLES__\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE   32\n-#else\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE   64\n-#endif\n-\n #define DEFAULT_SIGNED_CHAR\t\t0\n \n /* RX load/store instructions can handle unaligned addresses.  */"}, {"sha": "c5edace139bd1c0bfe629e94faf8023d9877816e", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -252,14 +252,6 @@ enum processor_flags\n #define DOUBLE_TYPE_SIZE 64\n #define LONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_128 ? 128 : 64)\n \n-/* Define this to set long double type size to use in libgcc2.c, which can\n-   not depend on target_flags.  */\n-#ifdef __LONG_DOUBLE_128__\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 128\n-#else\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n-#endif\n-\n /* Work around target_flags dependency in ada/targtyps.c.  */\n #define WIDEST_HARDWARE_FP_SIZE 64\n "}, {"sha": "d89f11491f5a5d2cf3d95c1a945d5cd690a4f4f6", "filename": "gcc/config/sparc/freebsd.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fsparc%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fsparc%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ffreebsd.h?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -71,14 +71,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef  LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_128 ? 128 : 64)\n \n-/* Define this to set long double type size to use in libgcc2.c, which can\n-   not depend on target_flags.  */\n-#if defined(__arch64__) || defined(__LONG_DOUBLE_128__)\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 128\n-#else\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n-#endif\n-\n /* Definitions for 64-bit SPARC running systems with ELF. */\n \n #define TARGET_ELF\t\t1"}, {"sha": "277e49a5f4981dceb5604a32363a67fd50a101ba", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -122,14 +122,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    SPARC ABI says that long double is 4 words.  */\n #define LONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_128 ? 128 : 64)\n \n-/* Define this to set long double type size to use in libgcc2.c, which can\n-   not depend on target_flags.  */\n-#ifdef __LONG_DOUBLE_128__\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 128\n-#else\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n-#endif\n-\n #undef DITF_CONVERSION_LIBFUNCS\n #define DITF_CONVERSION_LIBFUNCS 1\n \f"}, {"sha": "7f1288126c0cbd3aba4fb600cae69c744e812fdc", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -70,14 +70,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_128 ? 128 : 64)\n \n-/* Define this to set long double type size to use in libgcc2.c, which can\n-   not depend on target_flags.  */\n-#if defined(__arch64__) || defined(__LONG_DOUBLE_128__)\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 128\n-#else\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n-#endif\n-\n #undef CPP_SUBTARGET_SPEC\n #define CPP_SUBTARGET_SPEC \"\\\n %{posix:-D_POSIX_SOURCE} \\"}, {"sha": "5c74464269c68f2b7e9693b753aec10a3e501cca", "filename": "gcc/config/sparc/netbsd-elf.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -168,12 +168,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE (TARGET_LONG_DOUBLE_128 ? 128 : 64)\n \n-#if defined(__arch64__) || defined(__LONG_DOUBLE_128__)\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 128\n-#else\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n-#endif\n-\n #undef  CC1_SPEC\n #if DEFAULT_ARCH32_P\n #define CC1_SPEC CC1_SPEC32\n@@ -195,9 +189,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE 128\n \n-#undef LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 128\n-\n #undef  CC1_SPEC\n #define CC1_SPEC CC1_SPEC64\n \n@@ -210,9 +201,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE 64\n \n-#undef LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n-\n #undef  CC1_SPEC\n #define CC1_SPEC CC1_SPEC32\n "}, {"sha": "10af50e1b8bec19ab64a9dcfc9b7e56360695d3f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -1542,13 +1542,6 @@ the target machine.  If you don't define this, the default is\n @code{BITS_PER_UNIT * 16}.\n @end defmac\n \n-@defmac LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n-Define this macro if @code{LONG_DOUBLE_TYPE_SIZE} is not constant or\n-if you want routines in @file{libgcc2.a} for a size other than\n-@code{LONG_DOUBLE_TYPE_SIZE}.  If you don't define this, the\n-default is @code{LONG_DOUBLE_TYPE_SIZE}.\n-@end defmac\n-\n @defmac LIBGCC2_GNU_PREFIX\n This macro corresponds to the @code{TARGET_LIBFUNC_GNU_PREFIX} target\n hook and should be defined if that hook is overriden to be true.  It"}, {"sha": "f6f241b5093f0785cba5ae63b6b7c1abf4da694f", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -1384,13 +1384,6 @@ the target machine.  If you don't define this, the default is\n @code{BITS_PER_UNIT * 16}.\n @end defmac\n \n-@defmac LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n-Define this macro if @code{LONG_DOUBLE_TYPE_SIZE} is not constant or\n-if you want routines in @file{libgcc2.a} for a size other than\n-@code{LONG_DOUBLE_TYPE_SIZE}.  If you don't define this, the\n-default is @code{LONG_DOUBLE_TYPE_SIZE}.\n-@end defmac\n-\n @defmac LIBGCC2_GNU_PREFIX\n This macro corresponds to the @code{TARGET_LIBFUNC_GNU_PREFIX} target\n hook and should be defined if that hook is overriden to be true.  It"}, {"sha": "dbe1ceb3d8ad94455bc995dff8a3c12ee5b6ef87", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -936,7 +936,8 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tEXTRA_CONSTRAINT_STR EXTRA_MEMORY_CONSTRAINT\t\t\t   \\\n \tEXTRA_ADDRESS_CONSTRAINT CONST_DOUBLE_OK_FOR_CONSTRAINT_P\t   \\\n \tCALLER_SAVE_PROFITABLE LARGEST_EXPONENT_IS_NORMAL\t\t   \\\n-\tROUND_TOWARDS_ZERO SF_SIZE DF_SIZE XF_SIZE TF_SIZE LIBGCC2_TF_CEXT\n+\tROUND_TOWARDS_ZERO SF_SIZE DF_SIZE XF_SIZE TF_SIZE LIBGCC2_TF_CEXT \\\n+\tLIBGCC2_LONG_DOUBLE_TYPE_SIZE\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}, {"sha": "b43307062e8e9de8a6a422ae288fa494bf72c2a6", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -1,3 +1,16 @@\n+2014-09-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* dfp-bit.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n+\t(__LIBGCC_XF_MANT_DIG__): Define if not already defined.\n+\t(LONG_DOUBLE_HAS_XF_MODE): Define in terms of\n+\t__LIBGCC_XF_MANT_DIG__.\n+\t(__LIBGCC_TF_MANT_DIG__): Define if not already defined.\n+\t(LONG_DOUBLE_HAS_TF_MODE): Define in terms of\n+\t__LIBGCC_TF_MANT_DIG__.\n+\t* libgcc2.c (NOTRUNC): Define in terms of\n+\t__LIBGCC_*_EXCESS_PRECISION__, not LIBGCC2_LONG_DOUBLE_TYPE_SIZE.\n+\t* libgcc2.h (LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Remove.\n+\n 2014-09-22  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR target/63312"}, {"sha": "7a90a7298e55ae2bfb427f1bf414213669a0d037", "filename": "libgcc/dfp-bit.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/libgcc%2Fdfp-bit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/libgcc%2Fdfp-bit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fdfp-bit.h?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -34,19 +34,21 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"tm.h\"\n #include \"libgcc_tm.h\"\n \n-#ifndef LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE LONG_DOUBLE_TYPE_SIZE\n-#endif\n-\n /* We need to know the size of long double that the C library supports.\n    Don't use LIBGCC2_HAS_XF_MODE or LIBGCC2_HAS_TF_MODE here because\n    some targets set both of those.  */\n \n+#ifndef __LIBGCC_XF_MANT_DIG__\n+#define __LIBGCC_XF_MANT_DIG__ 0\n+#endif\n #define LONG_DOUBLE_HAS_XF_MODE \\\n-  (BITS_PER_UNIT == 8 && LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 80)\n+  (__LDBL_MANT_DIG__ == __LIBGCC_XF_MANT_DIG__)\n \n+#ifndef __LIBGCC_TF_MANT_DIG__\n+#define __LIBGCC_TF_MANT_DIG__ 0\n+#endif\n #define LONG_DOUBLE_HAS_TF_MODE \\\n-  (BITS_PER_UNIT == 8 && LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 128)\n+  (__LDBL_MANT_DIG__ == __LIBGCC_TF_MANT_DIG__)\n \n /* Depending on WIDTH, define a number of macros:\n "}, {"sha": "46d6a2ef030ff98a944935f77529cee9c05fb326", "filename": "libgcc/libgcc2.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/libgcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/libgcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcc2.c?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -1866,29 +1866,25 @@ NAME (TYPE x, int m)\n # define CTYPE\tSCtype\n # define MODE\tsc\n # define CEXT\t__LIBGCC_SF_FUNC_EXT__\n-# define NOTRUNC __FLT_EVAL_METHOD__ == 0\n+# define NOTRUNC __LIBGCC_SF_EXCESS_PRECISION__\n #elif defined(L_muldc3) || defined(L_divdc3)\n # define MTYPE\tDFtype\n # define CTYPE\tDCtype\n # define MODE\tdc\n # define CEXT\t__LIBGCC_DF_FUNC_EXT__\n-# if LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 64\n-#  define NOTRUNC 1\n-# else\n-#  define NOTRUNC __FLT_EVAL_METHOD__ == 0 || __FLT_EVAL_METHOD__ == 1\n-# endif\n+# define NOTRUNC __LIBGCC_DF_EXCESS_PRECISION__\n #elif defined(L_mulxc3) || defined(L_divxc3)\n # define MTYPE\tXFtype\n # define CTYPE\tXCtype\n # define MODE\txc\n # define CEXT\t__LIBGCC_XF_FUNC_EXT__\n-# define NOTRUNC 1\n+# define NOTRUNC __LIBGCC_XF_EXCESS_PRECISION__\n #elif defined(L_multc3) || defined(L_divtc3)\n # define MTYPE\tTFtype\n # define CTYPE\tTCtype\n # define MODE\ttc\n # define CEXT\t__LIBGCC_TF_FUNC_EXT__\n-# define NOTRUNC 1\n+# define NOTRUNC __LIBGCC_TF_EXCESS_PRECISION__\n #else\n # error\n #endif"}, {"sha": "c9ddce2876b213f7b28c2ed8b9a9bc7f82f1d595", "filename": "libgcc/libgcc2.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/libgcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79452d4cad6c34e9ff7c4370157bb1d6ad8869/libgcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcc2.h?ref=9a79452d4cad6c34e9ff7c4370157bb1d6ad8869", "patch": "@@ -34,10 +34,6 @@ extern void __clear_cache (char *, char *);\n extern void __eprintf (const char *, const char *, unsigned int, const char *)\n   __attribute__ ((__noreturn__));\n \n-#ifndef LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE LONG_DOUBLE_TYPE_SIZE\n-#endif\n-\n #ifdef __LIBGCC_HAS_SF_MODE__\n #define LIBGCC2_HAS_SF_MODE 1\n #else"}]}