{"sha": "db716bdeca770228efaa5fb807079ff22e5e356b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI3MTZiZGVjYTc3MDIyOGVmYWE1ZmI4MDcwNzlmZjIyZTVlMzU2Yg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2014-09-19T09:14:59Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2014-09-19T09:14:59Z"}, "message": "re PR target/62662 (Miscompilation of Qt on s390x)\n\n2014-09-19  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\tPR target/62662\n\t* config/s390/s390.c (s390_emit_epilogue): When doing the return\n\taddress load optimization force s390_optimize_prologue to leave it\n\tthat way.  Only do the optimization if we already decided to push\n\tr14 into a stack slot.\n\nFrom-SVN: r215381", "tree": {"sha": "8de291d8052bb6e067402faf7288083b41b64ae3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8de291d8052bb6e067402faf7288083b41b64ae3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db716bdeca770228efaa5fb807079ff22e5e356b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db716bdeca770228efaa5fb807079ff22e5e356b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db716bdeca770228efaa5fb807079ff22e5e356b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db716bdeca770228efaa5fb807079ff22e5e356b/comments", "author": null, "committer": null, "parents": [{"sha": "f434eb6997a825387bc5c068b0bd812c04c8e0d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f434eb6997a825387bc5c068b0bd812c04c8e0d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f434eb6997a825387bc5c068b0bd812c04c8e0d8"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "f9a32f69ae1c36ab468c6cd79e941f9e88fbd68a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db716bdeca770228efaa5fb807079ff22e5e356b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db716bdeca770228efaa5fb807079ff22e5e356b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db716bdeca770228efaa5fb807079ff22e5e356b", "patch": "@@ -1,3 +1,11 @@\n+2014-09-19  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\tPR target/62662\n+\t* config/s390/s390.c (s390_emit_epilogue): When doing the return\n+\taddress load optimization force s390_optimize_prologue to leave it\n+\tthat way.  Only do the optimization if we already decided to push\n+\tr14 into a stack slot.\n+\n 2014-09-19  Marat Zakirov  <m.zakirov@samsung.com>\n \n \t* asan.c (build_check_stmt): Alignment arg was added."}, {"sha": "481cd44a756402fe94eee3879a1e4009e47abfdd", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db716bdeca770228efaa5fb807079ff22e5e356b/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db716bdeca770228efaa5fb807079ff22e5e356b/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=db716bdeca770228efaa5fb807079ff22e5e356b", "patch": "@@ -9083,11 +9083,14 @@ s390_emit_epilogue (bool sibcall)\n       if (! sibcall)\n \t{\n \t  /* Fetch return address from stack before load multiple,\n-\t     this will do good for scheduling.  */\n-\n-\t  if (cfun_frame_layout.save_return_addr_p\n-\t      || (cfun_frame_layout.first_restore_gpr < BASE_REGNUM\n-\t\t  && cfun_frame_layout.last_restore_gpr > RETURN_REGNUM))\n+\t     this will do good for scheduling.\n+\n+\t     Only do this if we already decided that r14 needs to be\n+\t     saved to a stack slot. (And not just because r14 happens to\n+\t     be in between two GPRs which need saving.)  Otherwise it\n+\t     would be difficult to take that decision back in\n+\t     s390_optimize_prologue.  */\n+\t  if (cfun_gpr_save_slot (RETURN_REGNUM) == -1)\n \t    {\n \t      int return_regnum = find_unused_clobbered_reg();\n \t      if (!return_regnum)\n@@ -9102,6 +9105,13 @@ s390_emit_epilogue (bool sibcall)\n \t      addr = gen_rtx_MEM (Pmode, addr);\n \t      set_mem_alias_set (addr, get_frame_alias_set ());\n \t      emit_move_insn (return_reg, addr);\n+\n+\t      /* Once we did that optimization we have to make sure\n+\t\t s390_optimize_prologue does not try to remove the\n+\t\t store of r14 since we will not be able to find the\n+\t\t load issued here.  */\n+\t      cfun_frame_layout.save_return_addr_p = true;\n+\t      cfun_gpr_save_slot (RETURN_REGNUM) = -1;\n \t    }\n \t}\n "}]}