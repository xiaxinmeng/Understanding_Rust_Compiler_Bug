{"sha": "0fad54f0a88160e81c3150b63c91fd9809665474", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZhZDU0ZjBhODgxNjBlODFjMzE1MGI2M2M5MWZkOTgwOTY2NTQ3NA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2019-12-09T13:59:24Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2019-12-09T13:59:24Z"}, "message": "Fix libdecnumber handling of non-canonical BID significands (PR middle-end/91226).\n\nAs reported in bug 91226, the libdecnumber code used on the host to\ninterpret DFP values in the BID encoding fails, for _Decimal64 and\n_Decimal128, to check for the case where a significand is too large\nand so specified in IEEE 754 to be a non-canonical encoding of the\nzero significand.  This patch adds the required handling of that case,\ntogether with tests both using -O2 (testing this host code) and -O0\n(testing libgcc code, which already worked before the patch); the\ntests also cover _Decimal32, which already had the required check.\n\nIn the _Decimal128 case, where the code previously completely ignored\nthe case where the first four bits of the combination field are 1100,\n1101 or 1110, the logic for determining the correct quantum exponent\nin that case is also newly added by this patch, so tests are added for\nthat as well (again, libgcc already handled it correctly when the\nconversion was done at runtime rather than at compile time).\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\n\tPR middle-end/91226\nlibdecnumber:\n\t* bid/bid2dpd_dpd2bid.c (_bid_to_dpd64): Handle non-canonical\n\tsignificands.\n\t(_bid_to_dpd128): Likewise.  Check for case where combination\n\tfield starts 1100, 1101 or 1110.\n\ngcc/testsuite:\n\t* gcc.dg/dfp/bid-non-canonical-d128-1.c,\n\tgcc.dg/dfp/bid-non-canonical-d128-2.c,\n\tgcc.dg/dfp/bid-non-canonical-d128-3.c,\n\tgcc.dg/dfp/bid-non-canonical-d128-4.c,\n\tgcc.dg/dfp/bid-non-canonical-d32-1.c,\n\tgcc.dg/dfp/bid-non-canonical-d32-2.c,\n\tgcc.dg/dfp/bid-non-canonical-d64-1.c,\n\tgcc.dg/dfp/bid-non-canonical-d64-2.c: New tests.\n\nFrom-SVN: r279129", "tree": {"sha": "950d485dda0093ffc3c0d8df0ffdd7264b1ef61d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/950d485dda0093ffc3c0d8df0ffdd7264b1ef61d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fad54f0a88160e81c3150b63c91fd9809665474", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fad54f0a88160e81c3150b63c91fd9809665474", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fad54f0a88160e81c3150b63c91fd9809665474", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fad54f0a88160e81c3150b63c91fd9809665474/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d106dd51fac1a524ede3019769c214668021350", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d106dd51fac1a524ede3019769c214668021350", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d106dd51fac1a524ede3019769c214668021350"}], "stats": {"total": 187, "additions": 184, "deletions": 3}, "files": [{"sha": "6cda5be58f90257f18d1ec389758c9476300b8f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fad54f0a88160e81c3150b63c91fd9809665474/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fad54f0a88160e81c3150b63c91fd9809665474/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0fad54f0a88160e81c3150b63c91fd9809665474", "patch": "@@ -1,3 +1,15 @@\n+2019-12-09  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR middle-end/91226\n+\t* gcc.dg/dfp/bid-non-canonical-d128-1.c,\n+\tgcc.dg/dfp/bid-non-canonical-d128-2.c,\n+\tgcc.dg/dfp/bid-non-canonical-d128-3.c,\n+\tgcc.dg/dfp/bid-non-canonical-d128-4.c,\n+\tgcc.dg/dfp/bid-non-canonical-d32-1.c,\n+\tgcc.dg/dfp/bid-non-canonical-d32-2.c,\n+\tgcc.dg/dfp/bid-non-canonical-d64-1.c,\n+\tgcc.dg/dfp/bid-non-canonical-d64-2.c: New tests.\n+\n 2019-12-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \tPR middle-end/92410"}, {"sha": "eee5471cae0d46a7d43bf9550ca2f940e0324b9e", "filename": "gcc/testsuite/gcc.dg/dfp/bid-non-canonical-d128-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fad54f0a88160e81c3150b63c91fd9809665474/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fad54f0a88160e81c3150b63c91fd9809665474/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d128-1.c?ref=0fad54f0a88160e81c3150b63c91fd9809665474", "patch": "@@ -0,0 +1,30 @@\n+/* Test non-canonical BID significands: _Decimal128.  Bug 91226.  */\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && lp64 } } } */\n+/* { dg-options \"-std=gnu2x -O2\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+union u\n+{\n+  _Decimal128 d128;\n+  unsigned __int128 u128;\n+};\n+\n+#define U128(hi, lo) (((unsigned __int128) lo) \\\n+\t\t      | (((unsigned __int128) hi) << 64))\n+\n+int\n+main (void)\n+{\n+  unsigned __int128 i = U128 (0x3041ed09bead87c0ULL, 0x378d8e6400000001ULL);\n+  union u x;\n+  _Decimal128 d128;\n+  x.u128 = i;\n+  d128 = x.d128;\n+  volatile double d = d128;\n+  if (d == 0)\n+    exit (0);\n+  else\n+    abort ();\n+}"}, {"sha": "626712153b4b1301615ecf7cfaf553379eb7f9ba", "filename": "gcc/testsuite/gcc.dg/dfp/bid-non-canonical-d128-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fad54f0a88160e81c3150b63c91fd9809665474/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d128-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fad54f0a88160e81c3150b63c91fd9809665474/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d128-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d128-2.c?ref=0fad54f0a88160e81c3150b63c91fd9809665474", "patch": "@@ -0,0 +1,42 @@\n+/* Test non-canonical BID significands: _Decimal128, case where\n+   combination field starts 11.  Bug 91226.  */\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && lp64 } } } */\n+/* { dg-options \"-std=gnu2x -O2\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+union u\n+{\n+  _Decimal128 d128;\n+  unsigned __int128 u128;\n+};\n+\n+#define U128(hi, lo) (((unsigned __int128) lo) \\\n+\t\t      | (((unsigned __int128) hi) << 64))\n+\n+int\n+main (void)\n+{\n+  unsigned __int128 i = U128 (0x6e79000000000000ULL, 0x1ULL);\n+  union u x;\n+  _Decimal128 d128;\n+  x.u128 = i;\n+  d128 = x.d128;\n+  volatile double d = d128;\n+  if (d != 0)\n+    abort ();\n+  /* The above number should have quantum exponent 1234.  */\n+  _Decimal128 t1233 = 0.e1233DL, t1234 = 0.e1234DL, t1235 = 0.e1235DL;\n+  _Decimal128 dx;\n+  dx = d128 + t1233;\n+  if (__builtin_memcmp (&dx, &t1233, 16) != 0)\n+    abort ();\n+  dx = d128 + t1234;\n+  if (__builtin_memcmp (&dx, &t1234, 16) != 0)\n+    abort ();\n+  dx = d128 + t1235;\n+  if (__builtin_memcmp (&dx, &t1234, 16) != 0)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "9190daedaf6fbeb1635505f94b949718dfb919fc", "filename": "gcc/testsuite/gcc.dg/dfp/bid-non-canonical-d128-3.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fad54f0a88160e81c3150b63c91fd9809665474/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d128-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fad54f0a88160e81c3150b63c91fd9809665474/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d128-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d128-3.c?ref=0fad54f0a88160e81c3150b63c91fd9809665474", "patch": "@@ -0,0 +1,5 @@\n+/* Test non-canonical BID significands: _Decimal128.  Bug 91226.  */\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && lp64 } } } */\n+/* { dg-options \"-std=gnu2x -O0\" } */\n+\n+#include \"bid-non-canonical-d128-1.c\""}, {"sha": "b148ce445e742fa169c57cfab1b50af654c16608", "filename": "gcc/testsuite/gcc.dg/dfp/bid-non-canonical-d128-4.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fad54f0a88160e81c3150b63c91fd9809665474/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d128-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fad54f0a88160e81c3150b63c91fd9809665474/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d128-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d128-4.c?ref=0fad54f0a88160e81c3150b63c91fd9809665474", "patch": "@@ -0,0 +1,6 @@\n+/* Test non-canonical BID significands: _Decimal128, case where\n+   combination field starts 11.  Bug 91226.  */\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && lp64 } } } */\n+/* { dg-options \"-std=gnu2x -O0\" } */\n+\n+#include \"bid-non-canonical-d128-2.c\""}, {"sha": "b46b71cc3fcc0a6af94bb4945e971e1baa6b0cb7", "filename": "gcc/testsuite/gcc.dg/dfp/bid-non-canonical-d32-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fad54f0a88160e81c3150b63c91fd9809665474/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fad54f0a88160e81c3150b63c91fd9809665474/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d32-1.c?ref=0fad54f0a88160e81c3150b63c91fd9809665474", "patch": "@@ -0,0 +1,26 @@\n+/* Test non-canonical BID significands: _Decimal32.  Bug 91226.  */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-std=gnu2x -O2\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+union u\n+{\n+  _Decimal32 d32;\n+  unsigned int u32;\n+};\n+\n+int\n+main (void)\n+{\n+  union u x;\n+  _Decimal32 d32;\n+  x.u32 = 0x6cb89681U;\n+  d32 = x.d32;\n+  volatile double d = d32;\n+  if (d == 0)\n+    exit (0);\n+  else\n+    abort ();\n+}"}, {"sha": "11d64dce19339aa7c13726012739cf5712f98956", "filename": "gcc/testsuite/gcc.dg/dfp/bid-non-canonical-d32-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fad54f0a88160e81c3150b63c91fd9809665474/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fad54f0a88160e81c3150b63c91fd9809665474/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d32-2.c?ref=0fad54f0a88160e81c3150b63c91fd9809665474", "patch": "@@ -0,0 +1,5 @@\n+/* Test non-canonical BID significands: _Decimal32.  Bug 91226.  */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-std=gnu2x -O0\" } */\n+\n+#include \"bid-non-canonical-d32-1.c\""}, {"sha": "87b106945d42c1d6fd137dea856c60c111114172", "filename": "gcc/testsuite/gcc.dg/dfp/bid-non-canonical-d64-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fad54f0a88160e81c3150b63c91fd9809665474/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fad54f0a88160e81c3150b63c91fd9809665474/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d64-1.c?ref=0fad54f0a88160e81c3150b63c91fd9809665474", "patch": "@@ -0,0 +1,26 @@\n+/* Test non-canonical BID significands: _Decimal64.  Bug 91226.  */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-std=gnu2x -O2\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+union u\n+{\n+  _Decimal64 d64;\n+  unsigned long long int u64;\n+};\n+\n+int\n+main (void)\n+{\n+  union u x;\n+  _Decimal64 d64;\n+  x.u64 = 0x6c7386f26fc10001ULL;\n+  d64 = x.d64;\n+  volatile double d = d64;\n+  if (d == 0)\n+    exit (0);\n+  else\n+    abort ();\n+}"}, {"sha": "3c10145a314a9df0ad2d186eb06e857f0f3305a8", "filename": "gcc/testsuite/gcc.dg/dfp/bid-non-canonical-d64-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fad54f0a88160e81c3150b63c91fd9809665474/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fad54f0a88160e81c3150b63c91fd9809665474/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbid-non-canonical-d64-2.c?ref=0fad54f0a88160e81c3150b63c91fd9809665474", "patch": "@@ -0,0 +1,5 @@\n+/* Test non-canonical BID significands: _Decimal64.  Bug 91226.  */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-std=gnu2x -O0\" } */\n+\n+#include \"bid-non-canonical-d64-1.c\""}, {"sha": "6c617881d25e3a14004886544b94da4d2388e8ca", "filename": "libdecnumber/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fad54f0a88160e81c3150b63c91fd9809665474/libdecnumber%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fad54f0a88160e81c3150b63c91fd9809665474/libdecnumber%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FChangeLog?ref=0fad54f0a88160e81c3150b63c91fd9809665474", "patch": "@@ -1,3 +1,11 @@\n+2019-12-09  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR middle-end/91226\n+\t* bid/bid2dpd_dpd2bid.c (_bid_to_dpd64): Handle non-canonical\n+\tsignificands.\n+\t(_bid_to_dpd128): Likewise.  Check for case where combination\n+\tfield starts 1100, 1101 or 1110.\n+\n 2019-01-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "36aa56c540d30a84254af7ccff832e8b690f36dd", "filename": "libdecnumber/bid/bid2dpd_dpd2bid.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fad54f0a88160e81c3150b63c91fd9809665474/libdecnumber%2Fbid%2Fbid2dpd_dpd2bid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fad54f0a88160e81c3150b63c91fd9809665474/libdecnumber%2Fbid%2Fbid2dpd_dpd2bid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fbid%2Fbid2dpd_dpd2bid.c?ref=0fad54f0a88160e81c3150b63c91fd9809665474", "patch": "@@ -189,6 +189,8 @@ _bid_to_dpd64 (_Decimal64 *pres, _Decimal64 *px) {\n   if ((comb & 0xc00) == 0xc00) { /* G0..G1 = 11 -> exp is G2..G11 */\n     exp = (comb) & 0x3ff;\n     bcoeff = (x & 0x0007ffffffffffffull) | 0x0020000000000000ull;\n+    if (bcoeff >= 10000000000000000ull)\n+      bcoeff = 0;\n   } else {\n     exp = (comb >> 2) & 0x3ff;\n     bcoeff = (x & 0x001fffffffffffffull);\n@@ -298,9 +300,23 @@ _bid_to_dpd128 (_Decimal128 *pres, _Decimal128 *px) {\n   if ((comb & 0x1e000) == 0x1e000) {\n     res = x;\n   } else { /* normal number */\n-    exp = ((x.w[1] & 0x7fff000000000000ull) >> 49) & 0x3fff;\n-    bcoeff.w[1] = (x.w[1] & 0x0001ffffffffffffull);\n-    bcoeff.w[0] = x.w[0];\n+    if ((comb & 0x18000) == 0x18000) {\n+      /* Noncanonical significand (prepending 8 or 9 to any 110-bit\n+\t trailing significand field produces a value above 10^34).  */\n+      exp = (comb & 0x7fff) >> 1;\n+      bcoeff.w[1] = 0;\n+      bcoeff.w[0] = 0;\n+    } else {\n+      exp = ((x.w[1] & 0x7fff000000000000ull) >> 49) & 0x3fff;\n+      bcoeff.w[1] = (x.w[1] & 0x0001ffffffffffffull);\n+      bcoeff.w[0] = x.w[0];\n+      if (bcoeff.w[1] > 0x1ed09bead87c0ull\n+\t  || (bcoeff.w[1] == 0x1ed09bead87c0ull\n+\t      && bcoeff.w[0] >= 0x378d8e6400000000ull)) {\n+\tbcoeff.w[1] = 0;\n+\tbcoeff.w[0] = 0;\n+      }\n+    }\n     d1018 = reciprocals10_128[18];\n     __mul_128x128_high (BH, bcoeff, d1018);\n     amount = recip_scale[18];"}]}