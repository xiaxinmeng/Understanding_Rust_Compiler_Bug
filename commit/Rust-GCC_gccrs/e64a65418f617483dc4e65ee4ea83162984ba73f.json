{"sha": "e64a65418f617483dc4e65ee4ea83162984ba73f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY0YTY1NDE4ZjYxNzQ4M2RjNGU2NWVlNGVhODMxNjI5ODRiYTczZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-03-28T04:37:36Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-03-28T04:37:36Z"}, "message": "gthr-single.h (UNUSED): New.\n\n        * gthr-single.h (UNUSED): New.  Distinguish between how C\n        and C++ mark unused function arguments.  Use throughout.\n\nFrom-SVN: r40903", "tree": {"sha": "fc5b54dcf5d35c2f7ebcd768cab21e1ae6b8d347", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc5b54dcf5d35c2f7ebcd768cab21e1ae6b8d347"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e64a65418f617483dc4e65ee4ea83162984ba73f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e64a65418f617483dc4e65ee4ea83162984ba73f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e64a65418f617483dc4e65ee4ea83162984ba73f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e64a65418f617483dc4e65ee4ea83162984ba73f/comments", "author": null, "committer": null, "parents": [{"sha": "c1e9f663099abd31015872fe845ef203781b33a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1e9f663099abd31015872fe845ef203781b33a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1e9f663099abd31015872fe845ef203781b33a3"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "a773d3ebc7c25800b2b3239241bd297f691872aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64a65418f617483dc4e65ee4ea83162984ba73f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64a65418f617483dc4e65ee4ea83162984ba73f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e64a65418f617483dc4e65ee4ea83162984ba73f", "patch": "@@ -4,6 +4,9 @@\n \tjump.c, toplev.c:\n \tRename asynchronous_exceptions to flag_non_call_exceptions.\n \n+\t* gthr-single.h (UNUSED): New.  Distinguish between how C \n+\tand C++ mark unused function arguments.  Use throughout.\n+\n 2001-03-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* configure.in: Don't check for bcopy."}, {"sha": "fa7737171906aaac2edde86d1201c46a77170543", "filename": "gcc/gthr-single.h", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64a65418f617483dc4e65ee4ea83162984ba73f/gcc%2Fgthr-single.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64a65418f617483dc4e65ee4ea83162984ba73f/gcc%2Fgthr-single.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-single.h?ref=e64a65418f617483dc4e65ee4ea83162984ba73f", "patch": "@@ -35,6 +35,12 @@ typedef int __gthread_mutex_t;\n \n #define __GTHREAD_MUTEX_INIT 0\n \n+#ifdef __cplusplus\n+#define UNUSED(x)\n+#else\n+#define UNUSED(x) x __attribute__((unused))\n+#endif\n+\n #ifdef _LIBOBJC\n \n /* Thread local storage for a single thread */\n@@ -62,15 +68,15 @@ __gthread_objc_close_thread_system(void)\n \n /* Create a new thread of execution. */\n static inline objc_thread_t\n-__gthread_objc_thread_detach(void (*func)(void *arg), void *arg)\n+__gthread_objc_thread_detach(void (* func)(void *), void * UNUSED(arg))\n {\n   /* No thread support available */\n   return NULL;\n }\n \n /* Set the current thread's priority. */\n static inline int\n-__gthread_objc_thread_set_priority(int priority)\n+__gthread_objc_thread_set_priority(int UNUSED(priority))\n {\n   /* No thread support available */\n   return -1;\n@@ -127,37 +133,37 @@ __gthread_objc_thread_get_data(void)\n \n /* Allocate a mutex. */\n static inline int\n-__gthread_objc_mutex_allocate(objc_mutex_t mutex)\n+__gthread_objc_mutex_allocate(objc_mutex_t UNUSED(mutex))\n {\n   return 0;\n }\n \n /* Deallocate a mutex. */\n static inline int\n-__gthread_objc_mutex_deallocate(objc_mutex_t mutex)\n+__gthread_objc_mutex_deallocate(objc_mutex_t UNUSED(mutex))\n {\n   return 0;\n }\n \n /* Grab a lock on a mutex. */\n static inline int\n-__gthread_objc_mutex_lock(objc_mutex_t mutex)\n+__gthread_objc_mutex_lock(objc_mutex_t UNUSED(mutex))\n {\n   /* There can only be one thread, so we always get the lock */\n   return 0;\n }\n \n /* Try to grab a lock on a mutex. */\n static inline int\n-__gthread_objc_mutex_trylock(objc_mutex_t mutex)\n+__gthread_objc_mutex_trylock(objc_mutex_t UNUSED(mutex))\n {\n   /* There can only be one thread, so we always get the lock */\n   return 0;\n }\n \n /* Unlock the mutex */\n static inline int\n-__gthread_objc_mutex_unlock(objc_mutex_t mutex)\n+__gthread_objc_mutex_unlock(objc_mutex_t UNUSED(mutex))\n {\n   return 0;\n }\n@@ -166,35 +172,36 @@ __gthread_objc_mutex_unlock(objc_mutex_t mutex)\n \n /* Allocate a condition. */\n static inline int\n-__gthread_objc_condition_allocate(objc_condition_t condition)\n+__gthread_objc_condition_allocate(objc_condition_t UNUSED(condition))\n {\n   return 0;\n }\n \n /* Deallocate a condition. */\n static inline int\n-__gthread_objc_condition_deallocate(objc_condition_t condition)\n+__gthread_objc_condition_deallocate(objc_condition_t UNUSED(condition))\n {\n   return 0;\n }\n \n /* Wait on the condition */\n static inline int\n-__gthread_objc_condition_wait(objc_condition_t condition, objc_mutex_t mutex)\n+__gthread_objc_condition_wait(objc_condition_t UNUSED(condition),\n+\t\t\t      objc_mutex_t UNUSED(mutex))\n {\n   return 0;\n }\n \n /* Wake up all threads waiting on this condition. */\n static inline int\n-__gthread_objc_condition_broadcast(objc_condition_t condition)\n+__gthread_objc_condition_broadcast(objc_condition_t UNUSED(condition))\n {\n   return 0;\n }\n \n /* Wake up one thread waiting on this condition. */\n static inline int\n-__gthread_objc_condition_signal(objc_condition_t condition)\n+__gthread_objc_condition_signal(objc_condition_t UNUSED(condition))\n {\n   return 0;\n }\n@@ -208,23 +215,25 @@ __gthread_active_p (void)\n }\n \n static inline int\n-__gthread_mutex_lock (__gthread_mutex_t *mutex __attribute__ ((__unused__)))\n+__gthread_mutex_lock (__gthread_mutex_t * UNUSED(mutex))\n {\n   return 0;\n }\n \n static inline int\n-__gthread_mutex_trylock (__gthread_mutex_t *mutex __attribute__ ((__unused__)))\n+__gthread_mutex_trylock (__gthread_mutex_t * UNUSED(mutex))\n {\n   return 0;\n }\n \n static inline int\n-__gthread_mutex_unlock (__gthread_mutex_t *mutex __attribute__ ((__unused__)))\n+__gthread_mutex_unlock (__gthread_mutex_t * UNUSED(mutex))\n {\n   return 0;\n }\n \n #endif /* _LIBOBJC */\n \n+#undef UNUSED\n+\n #endif /* not __gthr_single_h */"}]}