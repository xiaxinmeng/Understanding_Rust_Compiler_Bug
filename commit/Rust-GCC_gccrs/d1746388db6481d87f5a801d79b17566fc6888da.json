{"sha": "d1746388db6481d87f5a801d79b17566fc6888da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE3NDYzODhkYjY0ODFkODdmNWE4MDFkNzliMTc1NjZmYzY4ODhkYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-16T13:25:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-16T14:21:24Z"}, "message": "further optimize non-store-motion LIM\n\nThis removes useless work from LIM when store-motion is disabled.\n\n2020-11-16   Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-loop-im.c (analyze_memory_references): Add\n\tstore_motion parameter and elide unnecessary work.\n\t(tree_ssa_lim_initialize): Likewise.\n\t(loop_invariant_motion_in_fun): Pass down store_motion.", "tree": {"sha": "d48fc1af2249bc8cdb9fe4365d6c8694e5f3ebdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d48fc1af2249bc8cdb9fe4365d6c8694e5f3ebdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1746388db6481d87f5a801d79b17566fc6888da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1746388db6481d87f5a801d79b17566fc6888da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1746388db6481d87f5a801d79b17566fc6888da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1746388db6481d87f5a801d79b17566fc6888da/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f473f4b065d3cc0cb044db357e666109f227e94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f473f4b065d3cc0cb044db357e666109f227e94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f473f4b065d3cc0cb044db357e666109f227e94"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "92e5a8dd7742f24f83b942ff5eb4958ef9289adc", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1746388db6481d87f5a801d79b17566fc6888da/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1746388db6481d87f5a801d79b17566fc6888da/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=d1746388db6481d87f5a801d79b17566fc6888da", "patch": "@@ -1622,7 +1622,7 @@ sort_locs_in_loop_postorder_cmp (const void *loc1_, const void *loc2_,\n /* Gathers memory references in loops.  */\n \n static void\n-analyze_memory_references (void)\n+analyze_memory_references (bool store_motion)\n {\n   gimple_stmt_iterator bsi;\n   basic_block bb, *bbs;\n@@ -1665,6 +1665,9 @@ analyze_memory_references (void)\n \n   free (bbs);\n \n+  if (!store_motion)\n+    return;\n+\n   /* Propagate the information about accessed memory references up\n      the loop hierarchy.  */\n   FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n@@ -3010,7 +3013,7 @@ fill_always_executed_in (void)\n /* Compute the global information needed by the loop invariant motion pass.  */\n \n static void\n-tree_ssa_lim_initialize (void)\n+tree_ssa_lim_initialize (bool store_motion)\n {\n   class loop *loop;\n   unsigned i;\n@@ -3032,17 +3035,22 @@ tree_ssa_lim_initialize (void)\n   memory_accesses.refs_loaded_in_loop.quick_grow (number_of_loops (cfun));\n   memory_accesses.refs_stored_in_loop.create (number_of_loops (cfun));\n   memory_accesses.refs_stored_in_loop.quick_grow (number_of_loops (cfun));\n-  memory_accesses.all_refs_stored_in_loop.create (number_of_loops (cfun));\n-  memory_accesses.all_refs_stored_in_loop.quick_grow (number_of_loops (cfun));\n+  if (store_motion)\n+    {\n+      memory_accesses.all_refs_stored_in_loop.create (number_of_loops (cfun));\n+      memory_accesses.all_refs_stored_in_loop.quick_grow\n+\t\t\t\t\t\t      (number_of_loops (cfun));\n+    }\n \n   for (i = 0; i < number_of_loops (cfun); i++)\n     {\n       bitmap_initialize (&memory_accesses.refs_loaded_in_loop[i],\n \t\t\t &lim_bitmap_obstack);\n       bitmap_initialize (&memory_accesses.refs_stored_in_loop[i],\n \t\t\t &lim_bitmap_obstack);\n-      bitmap_initialize (&memory_accesses.all_refs_stored_in_loop[i],\n-\t\t\t &lim_bitmap_obstack);\n+      if (store_motion)\n+\tbitmap_initialize (&memory_accesses.all_refs_stored_in_loop[i],\n+\t\t\t   &lim_bitmap_obstack);\n     }\n \n   memory_accesses.ttae_cache = NULL;\n@@ -3097,10 +3105,10 @@ loop_invariant_motion_in_fun (function *fun, bool store_motion)\n {\n   unsigned int todo = 0;\n \n-  tree_ssa_lim_initialize ();\n+  tree_ssa_lim_initialize (store_motion);\n \n   /* Gathers information about memory accesses in the loops.  */\n-  analyze_memory_references ();\n+  analyze_memory_references (store_motion);\n \n   /* Fills ALWAYS_EXECUTED_IN information for basic blocks.  */\n   fill_always_executed_in ();"}]}