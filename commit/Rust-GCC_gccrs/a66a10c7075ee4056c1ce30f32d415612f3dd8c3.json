{"sha": "a66a10c7075ee4056c1ce30f32d415612f3dd8c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY2YTEwYzcwNzVlZTQwNTZjMWNlMzBmMzJkNDE1NjEyZjNkZDhjMw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-04-11T18:46:06Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-04-11T18:46:06Z"}, "message": "(can_combine_p):  Don't move an UNSPEC_VOLATILE.\n\nFrom-SVN: r4085", "tree": {"sha": "921912f547c6795e195ee78698f79064d43b0ba6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/921912f547c6795e195ee78698f79064d43b0ba6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a66a10c7075ee4056c1ce30f32d415612f3dd8c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a66a10c7075ee4056c1ce30f32d415612f3dd8c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a66a10c7075ee4056c1ce30f32d415612f3dd8c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a66a10c7075ee4056c1ce30f32d415612f3dd8c3/comments", "author": null, "committer": null, "parents": [{"sha": "c8cfe1f62b3678d548e6003f0d077aedb640b339", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8cfe1f62b3678d548e6003f0d077aedb640b339", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8cfe1f62b3678d548e6003f0d077aedb640b339"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "86f920cf5c5716eee53cd1e410720b74b46e2ab0", "filename": "gcc/combine.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a66a10c7075ee4056c1ce30f32d415612f3dd8c3/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a66a10c7075ee4056c1ce30f32d415612f3dd8c3/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=a66a10c7075ee4056c1ce30f32d415612f3dd8c3", "patch": "@@ -825,10 +825,12 @@ can_combine_p (insn, i3, pred, succ, pdest, psrc)\n \t If the insns are adjacent, a use can't cross a set even though we\n \t think it might (this can happen for a sequence of insns each setting\n \t the same destination; reg_last_set of that register might point to\n-\t a NOTE).  Also, don't move a volatile asm across any other insns.  */\n+\t a NOTE).  Also, don't move a volatile asm or UNSPEC_VOLATILE across\n+\t any other insns.  */\n       || (! all_adjacent\n \t  && (use_crosses_set_p (src, INSN_CUID (insn))\n-\t      || (GET_CODE (src) == ASM_OPERANDS && MEM_VOLATILE_P (src))))\n+\t      || (GET_CODE (src) == ASM_OPERANDS && MEM_VOLATILE_P (src))\n+\t      || GET_CODE (src) == UNSPEC_VOLATILE))\n       /* If there is a REG_NO_CONFLICT note for DEST in I3 or SUCC, we get\n \t better register allocation by not doing the combine.  */\n       || find_reg_note (i3, REG_NO_CONFLICT, dest)"}]}