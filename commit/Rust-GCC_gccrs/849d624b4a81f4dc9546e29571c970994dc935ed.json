{"sha": "849d624b4a81f4dc9546e29571c970994dc935ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ5ZDYyNGI0YTgxZjRkYzk1NDZlMjk1NzFjOTcwOTk0ZGM5MzVlZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-04-12T21:39:39Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-04-12T21:39:39Z"}, "message": "fold-const.c (build_range_check): Properly deal with enumeral and boolean base types.\n\n\t* fold-const.c (build_range_check): Properly deal with enumeral and\n\tboolean base types.\n\nFrom-SVN: r145988", "tree": {"sha": "3526746cc33223821d95bafdc40b7cb9e1597f03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3526746cc33223821d95bafdc40b7cb9e1597f03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/849d624b4a81f4dc9546e29571c970994dc935ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/849d624b4a81f4dc9546e29571c970994dc935ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/849d624b4a81f4dc9546e29571c970994dc935ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/849d624b4a81f4dc9546e29571c970994dc935ed/comments", "author": null, "committer": null, "parents": [{"sha": "3906a4a1bc19a4618625cfa6064d647cd7d78686", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3906a4a1bc19a4618625cfa6064d647cd7d78686", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3906a4a1bc19a4618625cfa6064d647cd7d78686"}], "stats": {"total": 63, "additions": 52, "deletions": 11}, "files": [{"sha": "22204cb7224797e202bb8f1ce82dc522766910a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/849d624b4a81f4dc9546e29571c970994dc935ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/849d624b4a81f4dc9546e29571c970994dc935ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=849d624b4a81f4dc9546e29571c970994dc935ed", "patch": "@@ -1,3 +1,8 @@\n+2009-04-12 Eric Botcazou <ebotcazou@adacore.com>\n+\n+\t* fold-const.c (build_range_check): Properly deal with enumeral and\n+\tboolean base types.\n+\n 2009-04-12  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* doc/invoke.texi (max_gcse_passes): Remove documentation."}, {"sha": "bd5e97df4a92b622ae27c6620ee500b197ecf6d1", "filename": "gcc/fold-const.c", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/849d624b4a81f4dc9546e29571c970994dc935ed/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/849d624b4a81f4dc9546e29571c970994dc935ed/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=849d624b4a81f4dc9546e29571c970994dc935ed", "patch": "@@ -4671,8 +4671,8 @@ make_range (tree exp, int *pin_p, tree *plow, tree *phigh,\n static tree\n build_range_check (tree type, tree exp, int in_p, tree low, tree high)\n {\n-  tree etype = TREE_TYPE (exp);\n-  tree value;\n+  tree etype = TREE_TYPE (exp), value;\n+  enum tree_code code;\n \n #ifdef HAVE_canonicalize_funcptr_for_compare\n   /* Disable this optimization for function pointer expressions\n@@ -4756,20 +4756,25 @@ build_range_check (tree type, tree exp, int in_p, tree low, tree high)\n \n   /* Optimize (c>=low) && (c<=high) into (c-low>=0) && (c-low<=high-low).\n      This requires wrap-around arithmetics for the type of the expression.  */\n-  switch (TREE_CODE (etype))\n+  code = TREE_CODE (etype);\n+  switch (code)\n     {\n     case INTEGER_TYPE:\n+    case ENUMERAL_TYPE:\n+    case BOOLEAN_TYPE:\n       /* There is no requirement that LOW be within the range of ETYPE\n \t if the latter is a subtype.  It must, however, be within the base\n \t type of ETYPE.  So be sure we do the subtraction in that type.  */\n-      if (TREE_TYPE (etype))\n-\tetype = TREE_TYPE (etype);\n-      break;\n+      if (code == INTEGER_TYPE && TREE_TYPE (etype))\n+\t{\n+\t  etype = TREE_TYPE (etype);\n+\t  /* But not in an enumeral or boolean type though.  */\n+\t  code = TREE_CODE (etype);\n+\t}\n \n-    case ENUMERAL_TYPE:\n-    case BOOLEAN_TYPE:\n-      etype = lang_hooks.types.type_for_size (TYPE_PRECISION (etype),\n-\t\t\t\t\t      TYPE_UNSIGNED (etype));\n+      if (code != INTEGER_TYPE)\n+\tetype = lang_hooks.types.type_for_size (TYPE_PRECISION (etype),\n+\t\t\t\t\t\tTYPE_UNSIGNED (etype));\n       break;\n \n     default:"}, {"sha": "876431a6b754b60b72d2656891aa66d6bc570464", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/849d624b4a81f4dc9546e29571c970994dc935ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/849d624b4a81f4dc9546e29571c970994dc935ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=849d624b4a81f4dc9546e29571c970994dc935ed", "patch": "@@ -1,4 +1,9 @@\n-009-04-12  Uros Bizjak  <ubizjak@gmail.com>\n+2009-04-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/enum1.adb: New test.\n+\t* gnat.dg/enum1_pkg.ads: New helper.\n+\n+2009-04-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/39740\n \t* gcc.target/alpha/pr39740.c: New test."}, {"sha": "f751d24a782600037243e46d1e8c05ab23a29494", "filename": "gcc/testsuite/gnat.dg/enum1.adb", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/849d624b4a81f4dc9546e29571c970994dc935ed/gcc%2Ftestsuite%2Fgnat.dg%2Fenum1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/849d624b4a81f4dc9546e29571c970994dc935ed/gcc%2Ftestsuite%2Fgnat.dg%2Fenum1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fenum1.adb?ref=849d624b4a81f4dc9546e29571c970994dc935ed", "patch": "@@ -0,0 +1,17 @@\n+-- { dg-do run }\n+-- { dg-options \"-O2\" }\n+\n+with Enum1_Pkg; use Enum1_Pkg;\n+\n+procedure Enum1 is\n+\n+  function Cond return Boolean is\n+  begin\n+    return My_N = Two or My_N = Three;\n+  end;\n+\n+begin\n+  if Cond then\n+    raise Constraint_Error;\n+  end if;\n+end;"}, {"sha": "ff090869c427a4dd044a867e858e07ce380283f1", "filename": "gcc/testsuite/gnat.dg/enum1_pkg.ads", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/849d624b4a81f4dc9546e29571c970994dc935ed/gcc%2Ftestsuite%2Fgnat.dg%2Fenum1_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/849d624b4a81f4dc9546e29571c970994dc935ed/gcc%2Ftestsuite%2Fgnat.dg%2Fenum1_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fenum1_pkg.ads?ref=849d624b4a81f4dc9546e29571c970994dc935ed", "patch": "@@ -0,0 +1,9 @@\n+package Enum1_Pkg is\n+\n+  type Enum is (One, Two, Three);\n+\n+  subtype Sub_Enum is Enum;\n+\n+  My_N : Sub_Enum := One;\n+\n+end Enum1_Pkg;"}]}