{"sha": "4de8668e9c5dbabf27190c65ae105f0d735c0da2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRlODY2OGU5YzVkYmFiZjI3MTkwYzY1YWUxMDVmMGQ3MzVjMGRhMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-06-16T13:15:37Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-06-16T13:15:37Z"}, "message": "cp-tree.h: Follow spelling conventions.\n\n\t* cp-tree.h: Follow spelling conventions.\n\t* mangle.c: Likewise.\n\t* method.c: Likewise.\n\t* parser.c: Likewise.\n\nFrom-SVN: r68015", "tree": {"sha": "c17c08728aba17ad732901aab8725402f4b0767f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c17c08728aba17ad732901aab8725402f4b0767f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4de8668e9c5dbabf27190c65ae105f0d735c0da2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4de8668e9c5dbabf27190c65ae105f0d735c0da2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4de8668e9c5dbabf27190c65ae105f0d735c0da2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4de8668e9c5dbabf27190c65ae105f0d735c0da2/comments", "author": null, "committer": null, "parents": [{"sha": "08dca707dac5ecd13eb4c3db47907b39c940cba9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08dca707dac5ecd13eb4c3db47907b39c940cba9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08dca707dac5ecd13eb4c3db47907b39c940cba9"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "a85022ecd63cd0488ea10d7eaf5432963256f034", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de8668e9c5dbabf27190c65ae105f0d735c0da2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de8668e9c5dbabf27190c65ae105f0d735c0da2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4de8668e9c5dbabf27190c65ae105f0d735c0da2", "patch": "@@ -1,3 +1,10 @@\n+2003-06-16  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* cp-tree.h: Follow spelling conventions.\n+\t* mangle.c: Likewise.\n+\t* method.c: Likewise.\n+\t* parser.c: Likewise.\n+\n 2003-06-14  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* decl.c (start_function): Adjust init_function_start call."}, {"sha": "6ed177ea957528eba8e4f259f4807c302845454d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de8668e9c5dbabf27190c65ae105f0d735c0da2/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de8668e9c5dbabf27190c65ae105f0d735c0da2/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4de8668e9c5dbabf27190c65ae105f0d735c0da2", "patch": "@@ -849,7 +849,7 @@ struct language_function GTY(())\n \n #define doing_semantic_analysis_p() (!expanding_p)\n \n-/* Non-zero if we are processing a base initializer.  Zero elsewhere.  */\n+/* Nonzero if we are processing a base initializer.  Zero elsewhere.  */\n #define in_base_initializer cp_function_chain->in_base_initializer\n \n #define in_function_try_handler cp_function_chain->in_function_try_handler"}, {"sha": "2c2a8be1e789391f85328298ab2e171c821f2ec5", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de8668e9c5dbabf27190c65ae105f0d735c0da2/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de8668e9c5dbabf27190c65ae105f0d735c0da2/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=4de8668e9c5dbabf27190c65ae105f0d735c0da2", "patch": "@@ -2610,7 +2610,7 @@ mangle_call_offset (fixed_offset, virtual_offset)\n    covariant thunk to FN_DECL.  FIXED_OFFSET is the initial adjustment\n    to this used to find the vptr.  If VIRTUAL_OFFSET is non-NULL, this\n    is a virtual thunk, and it is the vtbl offset in\n-   bytes. THIS_ADJUSTING is non-zero for a this adjusting thunk and\n+   bytes. THIS_ADJUSTING is nonzero for a this adjusting thunk and\n    zero for a covariant thunk. Note, that FN_DECL might be a covariant\n    thunk itself. A covariant thunk name always includes the adjustment\n    for the this pointer, even if there is none."}, {"sha": "2a08f70305b755a3d82082eef925c3d03e424f6f", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de8668e9c5dbabf27190c65ae105f0d735c0da2/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de8668e9c5dbabf27190c65ae105f0d735c0da2/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=4de8668e9c5dbabf27190c65ae105f0d735c0da2", "patch": "@@ -309,7 +309,7 @@ finish_thunk (tree thunk)\n \n /* Adjust PTR by the constant FIXED_OFFSET, and by the vtable\n    offset indicated by VIRTUAL_OFFSET, if that is\n-   non-null. THIS_ADJUSTING is non-zero for a this adjusting thunk and\n+   non-null. THIS_ADJUSTING is nonzero for a this adjusting thunk and\n    zero for a result adjusting thunk. */\n \n static tree"}, {"sha": "ffb0bf876e1e4518a906c2e2110b8eafccce5556", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de8668e9c5dbabf27190c65ae105f0d735c0da2/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de8668e9c5dbabf27190c65ae105f0d735c0da2/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4de8668e9c5dbabf27190c65ae105f0d735c0da2", "patch": "@@ -384,7 +384,7 @@ cp_lexer_new_from_tokens (cp_token_cache *tokens)\n   return lexer;\n }\n \n-/* Returns non-zero if debugging information should be output.  */\n+/* Returns nonzero if debugging information should be output.  */\n \n static inline bool\n cp_lexer_debugging_p (cp_lexer *lexer)\n@@ -419,7 +419,7 @@ cp_lexer_next_token (cp_lexer* lexer, cp_token* token)\n   return token;\n }\n \n-/* Non-zero if we are presently saving tokens.  */\n+/* nonzero if we are presently saving tokens.  */\n \n static int\n cp_lexer_saving_tokens (const cp_lexer* lexer)\n@@ -1756,23 +1756,23 @@ static bool cp_parser_is_keyword\n static tree cp_parser_scope_through_which_access_occurs\n   (tree, tree, tree);\n \n-/* Returns non-zero if we are parsing tentatively.  */\n+/* Returns nonzero if we are parsing tentatively.  */\n \n static inline bool\n cp_parser_parsing_tentatively (cp_parser* parser)\n {\n   return parser->context->next != NULL;\n }\n \n-/* Returns non-zero if TOKEN is a string literal.  */\n+/* Returns nonzero if TOKEN is a string literal.  */\n \n static bool\n cp_parser_is_string_literal (cp_token* token)\n {\n   return (token->type == CPP_STRING || token->type == CPP_WSTRING);\n }\n \n-/* Returns non-zero if TOKEN is the indicated KEYWORD.  */\n+/* Returns nonzero if TOKEN is the indicated KEYWORD.  */\n \n static bool\n cp_parser_is_keyword (cp_token* token, enum rid keyword)\n@@ -14632,7 +14632,7 @@ cp_parser_committed_to_tentative_parse (cp_parser* parser)\n \t  && parser->context->status == CP_PARSER_STATUS_KIND_COMMITTED);\n }\n \n-/* Returns non-zero iff an error has occurred during the most recent\n+/* Returns nonzero iff an error has occurred during the most recent\n    tentative parse.  */\n    \n static bool\n@@ -14642,7 +14642,7 @@ cp_parser_error_occurred (cp_parser* parser)\n \t  && parser->context->status == CP_PARSER_STATUS_KIND_ERROR);\n }\n \n-/* Returns non-zero if GNU extensions are allowed.  */\n+/* Returns nonzero if GNU extensions are allowed.  */\n \n static bool\n cp_parser_allow_gnu_extensions_p (cp_parser* parser)"}]}