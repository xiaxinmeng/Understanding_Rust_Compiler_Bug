{"sha": "b12b5029cbf1a802565598511dd073f1afbe2840", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEyYjUwMjljYmYxYTgwMjU2NTU5ODUxMWRkMDczZjFhZmJlMjg0MA==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2012-09-07T14:17:34Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2012-09-07T14:17:34Z"}, "message": "v850.h (DBX_DEBUGGING_INFO): Define.\n\n\t* config/v850/v850.h (DBX_DEBUGGING_INFO): Define.\n\t(ASM_GENERATE_INTERNAL_LABEL): Define if not already provided.\n\t* config/v850/v850.c (compute_register_save_size): Always include\n\tthe link pointer.\n\t(increment_stack): New function - emits insns to increment or\n\tdecrement the stack pointer.\n\t(expand_prologue, expand_epilogue): Use it.\n\t(expand_prologue): Set the function stack size, if requested.\n\t(v850_debug_unwind_info): New function.\n\t(TARGET_DEBUG_UNWIND_INFO): Define.\n\nFrom-SVN: r191076", "tree": {"sha": "dcbb2b476db6371aa7e4b207b621325701e20603", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcbb2b476db6371aa7e4b207b621325701e20603"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b12b5029cbf1a802565598511dd073f1afbe2840", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b12b5029cbf1a802565598511dd073f1afbe2840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b12b5029cbf1a802565598511dd073f1afbe2840", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b12b5029cbf1a802565598511dd073f1afbe2840/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c6c36e7310e6b67f2c37f0dabc6852c2b50c7a3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6c36e7310e6b67f2c37f0dabc6852c2b50c7a3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6c36e7310e6b67f2c37f0dabc6852c2b50c7a3c"}], "stats": {"total": 141, "additions": 72, "deletions": 69}, "files": [{"sha": "f78102ca4e3e8b2d8b7e0eb365e0693146e3aaa1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12b5029cbf1a802565598511dd073f1afbe2840/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12b5029cbf1a802565598511dd073f1afbe2840/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b12b5029cbf1a802565598511dd073f1afbe2840", "patch": "@@ -1,3 +1,16 @@\n+2012-09-07  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/v850/v850.h (DBX_DEBUGGING_INFO): Define.\n+\t(ASM_GENERATE_INTERNAL_LABEL): Define if not already provided.\n+\t* config/v850/v850.c (compute_register_save_size): Always include\n+\tthe link pointer.\n+\t(increment_stack): New function - emits insns to increment or\n+\tdecrement the stack pointer.\n+\t(expand_prologue, expand_epilogue): Use it.\n+\t(expand_prologue): Set the function stack size, if requested.\n+\t(v850_debug_unwind_info): New function.\n+\t(TARGET_DEBUG_UNWIND_INFO): Define.\n+\n 2012-09-07  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR tree-ssa/54295"}, {"sha": "404b89e25da1b9fbc2ac5cfa916c727618710952", "filename": "gcc/config/v850/predicates.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12b5029cbf1a802565598511dd073f1afbe2840/gcc%2Fconfig%2Fv850%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12b5029cbf1a802565598511dd073f1afbe2840/gcc%2Fconfig%2Fv850%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fpredicates.md?ref=b12b5029cbf1a802565598511dd073f1afbe2840", "patch": "@@ -497,5 +497,3 @@\n \n   return op == CONST0_RTX(mode);\n })\n-\n-"}, {"sha": "fc06675c6f58d6972b3dd1164930df6690fa2c7a", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 51, "deletions": 63, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12b5029cbf1a802565598511dd073f1afbe2840/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12b5029cbf1a802565598511dd073f1afbe2840/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=b12b5029cbf1a802565598511dd073f1afbe2840", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines for insn-output.c for NEC V850 series\n    Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-   2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+   2006, 2007, 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n    This file is part of GCC.\n@@ -375,13 +375,13 @@ v850_print_operand (FILE * file, rtx x, int code)\n   switch (code)\n     {\n     case 'c':\n-      /* We use 'c' operands with symbols for .vtinherit */\n+      /* We use 'c' operands with symbols for .vtinherit.  */\n       if (GET_CODE (x) == SYMBOL_REF)\n         {\n           output_addr_const(file, x);\n           break;\n         }\n-      /* fall through */\n+      /* Fall through.  */\n     case 'b':\n     case 'B':\n     case 'C':\n@@ -428,7 +428,7 @@ v850_print_operand (FILE * file, rtx x, int code)\n \t    gcc_unreachable ();\n \t}\n       break;\n-    case 'F':\t\t\t/* high word of CONST_DOUBLE */\n+    case 'F':\t\t\t/* High word of CONST_DOUBLE.  */\n       switch (GET_CODE (x))\n \t{\n \tcase CONST_INT:\n@@ -444,7 +444,7 @@ v850_print_operand (FILE * file, rtx x, int code)\n \t  gcc_unreachable ();\n \t}\n       break;\n-    case 'G':\t\t\t/* low word of CONST_DOUBLE */\n+    case 'G':\t\t\t/* Low word of CONST_DOUBLE.  */\n       switch (GET_CODE (x))\n \t{\n \tcase CONST_INT:\n@@ -537,7 +537,7 @@ v850_print_operand (FILE * file, rtx x, int code)\n \n         break;\n       }\n-    case 'W':\t\t\t/* print the instruction suffix */\n+    case 'W':\t\t\t/* Print the instruction suffix.  */\n       switch (GET_MODE (x))\n \t{\n \tdefault:\n@@ -549,11 +549,11 @@ v850_print_operand (FILE * file, rtx x, int code)\n \tcase SFmode: fputs (\".w\", file); break;\n \t}\n       break;\n-    case '.':\t\t\t/* register r0 */\n+    case '.':\t\t\t/* Register r0.  */\n       fputs (reg_names[0], file);\n       break;\n-    case 'z':\t\t\t/* reg or zero */\n-      if (GET_CODE (x) == REG)\n+    case 'z':\t\t\t/* Reg or zero.  */\n+      if (REG_P (x))\n \tfputs (reg_names[REGNO (x)], file);\n       else if ((GET_MODE(x) == SImode\n \t\t|| GET_MODE(x) == DFmode\n@@ -1448,13 +1448,13 @@ compute_register_save_size (long * p_reg_saved)\n   int call_p = df_regs_ever_live_p (LINK_POINTER_REGNUM);\n   long reg_saved = 0;\n \n-  /* Count the return pointer if we need to save it.  */\n-  if (crtl->profile && !call_p)\n+  /* Always save the link pointer - we cannot rely upon df_regs_ever_live_p.  */\n+  if (!call_p)\n     {\n       df_set_regs_ever_live (LINK_POINTER_REGNUM, true);\n       call_p = 1;\n     }\n- \n+\n   /* Count space for the register saves.  */\n   if (interrupt_handler)\n     {\n@@ -1589,6 +1589,27 @@ use_prolog_function (int num_save, int frame_size)\n   return ((save_func_len + restore_func_len) < (save_normal_len + restore_normal_len));\n }\n \n+static void\n+increment_stack (unsigned int amount)\n+{\n+  rtx inc;\n+\n+  if (amount == 0)\n+    return;\n+\n+  inc = GEN_INT (amount);\n+\n+  if (! CONST_OK_FOR_K (amount))\n+    {\n+      rtx reg = gen_rtx_REG (Pmode, 12);\n+\n+      emit_move_insn (reg, inc);\n+      inc = reg;\n+    }\n+\n+  emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx, inc));\n+}\n+\n void\n expand_prologue (void)\n {\n@@ -1605,6 +1626,9 @@ expand_prologue (void)\n \n   actual_fsize = compute_frame_size (size, &reg_saved);\n \n+  if (flag_stack_usage_info)\n+    current_function_static_stack_size = actual_fsize;\n+\n   /* Save/setup global registers for interrupt functions right now.  */\n   if (interrupt_handler)\n     {\n@@ -1710,9 +1734,7 @@ expand_prologue (void)\n \t  offset = init_stack_alloc - 4;\n \t  \n \t  if (init_stack_alloc)\n-\t    emit_insn (gen_addsi3 (stack_pointer_rtx,\n-\t\t\t\t   stack_pointer_rtx,\n-\t\t\t\t   GEN_INT (- (signed) init_stack_alloc)));\n+\t    increment_stack (- (signed) init_stack_alloc);\n \t  \n \t  /* Save the return pointer first.  */\n \t  if (num_save > 0 && REGNO (save_regs[num_save-1]) == LINK_POINTER_REGNUM)\n@@ -1743,16 +1765,8 @@ expand_prologue (void)\n   if (actual_fsize > init_stack_alloc)\n     {\n       int diff = actual_fsize - init_stack_alloc;\n-      if (CONST_OK_FOR_K (-diff))\n-\temit_insn (gen_addsi3 (stack_pointer_rtx,\n-\t\t\t       stack_pointer_rtx,\n-\t\t\t       GEN_INT (-diff)));\n-      else\n-\t{\n-\t  rtx reg = gen_rtx_REG (Pmode, 12);\n-\t  emit_move_insn (reg, GEN_INT (-diff));\n-\t  emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx, reg));\n-\t}\n+\n+      increment_stack (- diff);\n     }\n \n   /* If we need a frame pointer, set it up now.  */\n@@ -1837,25 +1851,10 @@ expand_epilogue (void)\n \t      rtx insn;\n \n \t      actual_fsize -= alloc_stack;\n-\t      if (actual_fsize)\n-\t\t{\n-\t\t  if (CONST_OK_FOR_K (actual_fsize))\n-\t\t    emit_insn (gen_addsi3 (stack_pointer_rtx,\n-\t\t\t\t\t   stack_pointer_rtx,\n-\t\t\t\t\t   GEN_INT (actual_fsize)));\n-\t\t  else\n-\t\t    {\n-\t\t      rtx reg = gen_rtx_REG (Pmode, 12);\n-\t\t      emit_move_insn (reg, GEN_INT (actual_fsize));\n-\t\t      emit_insn (gen_addsi3 (stack_pointer_rtx,\n-\t\t\t\t\t     stack_pointer_rtx,\n-\t\t\t\t\t     reg));\n-\t\t    }\n-\t\t}\n+\t      increment_stack (actual_fsize);\n \n \t      insn = emit_jump_insn (restore_all);\n \t      INSN_CODE (insn) = code;\n-\n \t    }\n \t  else\n \t    restore_all = NULL_RTX;\n@@ -1878,24 +1877,7 @@ expand_epilogue (void)\n \n       /* Deallocate the rest of the stack if it is > 32K.  */\n       if ((unsigned int) actual_fsize > init_stack_free)\n-\t{\n-\t  int diff;\n-\n-\t  diff = actual_fsize - init_stack_free;\n-\n-\t  if (CONST_OK_FOR_K (diff))\n-\t    emit_insn (gen_addsi3 (stack_pointer_rtx,\n-\t\t\t\t   stack_pointer_rtx,\n-\t\t\t\t   GEN_INT (diff)));\n-\t  else\n-\t    {\n-\t      rtx reg = gen_rtx_REG (Pmode, 12);\n-\t      emit_move_insn (reg, GEN_INT (diff));\n-\t      emit_insn (gen_addsi3 (stack_pointer_rtx,\n-\t\t\t\t     stack_pointer_rtx,\n-\t\t\t\t     reg));\n-\t    }\n-\t}\n+\tincrement_stack (actual_fsize - init_stack_free);\n \n       /* Special case interrupt functions that save all registers\n \t for a call.  */\n@@ -1936,10 +1918,7 @@ expand_epilogue (void)\n \t    }\n \n \t  /* Cut back the remainder of the stack.  */\n-\t  if (init_stack_free)\n-\t    emit_insn (gen_addsi3 (stack_pointer_rtx,\n-\t\t\t\t   stack_pointer_rtx,\n-\t\t\t\t   GEN_INT (init_stack_free)));\n+\t  increment_stack (init_stack_free);\n \t}\n \n       /* And return or use reti for interrupt handlers.  */\n@@ -3088,6 +3067,15 @@ static const struct attribute_spec v850_attribute_table[] =\n   { NULL,                0, 0, false, false, false, NULL, false }\n };\n \f\n+static enum unwind_info_type\n+v850_debug_unwind_info (void)\n+{\n+  return UI_NONE;\n+}\n+\n+#undef  TARGET_DEBUG_UNWIND_INFO\n+#define TARGET_DEBUG_UNWIND_INFO\tv850_debug_unwind_info\n+\f\n /* Initialize the GCC target structure.  */\n \n #undef  TARGET_MEMORY_MOVE_COST"}, {"sha": "298c03acba2ca4805bac61f722bee4e8b8ab1d40", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12b5029cbf1a802565598511dd073f1afbe2840/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12b5029cbf1a802565598511dd073f1afbe2840/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=b12b5029cbf1a802565598511dd073f1afbe2840", "patch": "@@ -786,8 +786,14 @@ typedef enum\n #define DEFAULT_GDB_EXTENSIONS 1\n \n /* Use stabs debugging info by default.  */\n-#undef PREFERRED_DEBUGGING_TYPE\n-#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+#undef  PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE  DBX_DEBUG\n+#define DBX_DEBUGGING_INFO        1\n+\n+#ifndef ASM_GENERATE_INTERNAL_LABEL\n+#define ASM_GENERATE_INTERNAL_LABEL(STRING, PREFIX, NUM)  \\\n+  sprintf (STRING, \"*.%s%u\", PREFIX, (unsigned int)(NUM))\n+#endif\n \n /* Specify the machine mode that this machine uses\n    for the index in the tablejump instruction.  */"}, {"sha": "ab6b8667501e8926fd0db9ce2aa4bf92b51cc831", "filename": "gcc/config/v850/v850.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12b5029cbf1a802565598511dd073f1afbe2840/gcc%2Fconfig%2Fv850%2Fv850.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12b5029cbf1a802565598511dd073f1afbe2840/gcc%2Fconfig%2Fv850%2Fv850.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.md?ref=b12b5029cbf1a802565598511dd073f1afbe2840", "patch": "@@ -2689,5 +2689,3 @@\n   \"jarl __restore_all_interrupt,r10\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"clobber\")])\n-\n-"}]}