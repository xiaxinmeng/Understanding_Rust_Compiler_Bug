{"sha": "5672fe9da4ab4e8787c288b64008251065c67c98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY3MmZlOWRhNGFiNGU4Nzg3YzI4OGI2NDAwODI1MTA2NWM2N2M5OA==", "commit": {"author": {"name": "Senthil Kumar Selvaraj", "email": "saaadhu@gcc.gnu.org", "date": "2021-04-30T16:34:11Z"}, "committer": {"name": "Senthil Kumar Selvaraj", "email": "saaadhu@gcc.gnu.org", "date": "2021-04-30T17:15:23Z"}, "message": "AVR cc0 conversion - adjust peepholes\n\nThis patch adjusts peepholes to match and generate parallels with\na clobber of REG_CC.\n\nIt also sets mov<mode>_insn as the name of the pattern for the split\ninsn (rather than the define_insn_and_split), so that\navr_2word_insn_p, which looks for CODE_FOR_mov<mode>_insn, works\ncorrectly. This is required for the *cpse.eq peephole to fire, and\nalso helps generate better code for avr_out_sbxx_branch.\n\ngcc/ChangeLog:\n\n\t* config/avr/avr.md: Adjust peepholes to match and\n\tgenerate parallels with clobber of REG_CC.\n\t(mov<mode>_insn): Rename to mov<mode>_insn_split.\n\t(*mov<mode>_insn): Rename to mov<mode>_insn.", "tree": {"sha": "8e1c36449931e38b7fd11f160369773faa0b2f56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e1c36449931e38b7fd11f160369773faa0b2f56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5672fe9da4ab4e8787c288b64008251065c67c98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5672fe9da4ab4e8787c288b64008251065c67c98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5672fe9da4ab4e8787c288b64008251065c67c98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5672fe9da4ab4e8787c288b64008251065c67c98/comments", "author": {"login": "saaadhu", "id": 532256, "node_id": "MDQ6VXNlcjUzMjI1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/532256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saaadhu", "html_url": "https://github.com/saaadhu", "followers_url": "https://api.github.com/users/saaadhu/followers", "following_url": "https://api.github.com/users/saaadhu/following{/other_user}", "gists_url": "https://api.github.com/users/saaadhu/gists{/gist_id}", "starred_url": "https://api.github.com/users/saaadhu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saaadhu/subscriptions", "organizations_url": "https://api.github.com/users/saaadhu/orgs", "repos_url": "https://api.github.com/users/saaadhu/repos", "events_url": "https://api.github.com/users/saaadhu/events{/privacy}", "received_events_url": "https://api.github.com/users/saaadhu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saaadhu", "id": 532256, "node_id": "MDQ6VXNlcjUzMjI1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/532256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saaadhu", "html_url": "https://github.com/saaadhu", "followers_url": "https://api.github.com/users/saaadhu/followers", "following_url": "https://api.github.com/users/saaadhu/following{/other_user}", "gists_url": "https://api.github.com/users/saaadhu/gists{/gist_id}", "starred_url": "https://api.github.com/users/saaadhu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saaadhu/subscriptions", "organizations_url": "https://api.github.com/users/saaadhu/orgs", "repos_url": "https://api.github.com/users/saaadhu/repos", "events_url": "https://api.github.com/users/saaadhu/events{/privacy}", "received_events_url": "https://api.github.com/users/saaadhu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc4202bd24fcc13dab80c4520cb53a2302c49929", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc4202bd24fcc13dab80c4520cb53a2302c49929", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc4202bd24fcc13dab80c4520cb53a2302c49929"}], "stats": {"total": 524, "additions": 308, "deletions": 216}, "files": [{"sha": "a1a325b7a8cea69e4469e56f3793e9dc31f72e81", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 308, "deletions": 216, "changes": 524, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5672fe9da4ab4e8787c288b64008251065c67c98/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5672fe9da4ab4e8787c288b64008251065c67c98/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=5672fe9da4ab4e8787c288b64008251065c67c98", "patch": "@@ -724,9 +724,7 @@\n ;; are call-saved registers, and most of LD_REGS are call-used registers,\n ;; so this may still be a win for registers live across function calls.\n \n-;; \"movqi_insn\"\n-;; \"movqq_insn\" \"movuqq_insn\"\n-(define_insn_and_split \"mov<mode>_insn\"\n+(define_insn_and_split \"mov<mode>_insn_split\"\n   [(set (match_operand:ALL1 0 \"nonimmediate_operand\" \"=r    ,d    ,Qm   ,r ,q,r,*r\")\n         (match_operand:ALL1 1 \"nox_general_operand\"   \"r Y00,n Ynn,r Y00,Qm,r,q,i\"))]\n   \"register_operand (operands[0], <MODE>mode)\n@@ -737,7 +735,9 @@\n                    (match_dup 1))\n               (clobber (reg:CC REG_CC))])])\n \n-(define_insn \"*mov<mode>_insn\"\n+;; \"movqi_insn\"\n+;; \"movqq_insn\" \"movuqq_insn\"\n+(define_insn \"mov<mode>_insn\"\n   [(set (match_operand:ALL1 0 \"nonimmediate_operand\" \"=r    ,d    ,Qm   ,r ,q,r,*r\")\n         (match_operand:ALL1 1 \"nox_general_operand\"   \"r Y00,n Ynn,r Y00,Qm,r,q,i\"))\n    (clobber (reg:CC REG_CC))]\n@@ -758,23 +758,26 @@\n (define_insn \"*reload_in<mode>\"\n   [(set (match_operand:ALL1 0 \"register_operand\"    \"=l\")\n         (match_operand:ALL1 1 \"const_operand\"        \"i\"))\n-   (clobber (match_operand:QI 2 \"register_operand\" \"=&d\"))]\n+   (clobber (match_operand:QI 2 \"register_operand\" \"=&d\"))\n+   (clobber (reg:CC REG_CC))]\n   \"reload_completed\"\n   \"ldi %2,lo8(%1)\n \tmov %0,%2\"\n   [(set_attr \"length\" \"2\")])\n \n (define_peephole2\n   [(match_scratch:QI 2 \"d\")\n-   (set (match_operand:ALL1 0 \"l_register_operand\" \"\")\n-        (match_operand:ALL1 1 \"const_operand\" \"\"))]\n+   (parallel [(set (match_operand:ALL1 0 \"l_register_operand\" \"\")\n+                   (match_operand:ALL1 1 \"const_operand\" \"\"))\n+              (clobber (reg:CC REG_CC))])]\n   ; No need for a clobber reg for 0x0, 0x01 or 0xff\n   \"!satisfies_constraint_Y00 (operands[1])\n    && !satisfies_constraint_Y01 (operands[1])\n    && !satisfies_constraint_Ym1 (operands[1])\"\n   [(parallel [(set (match_dup 0)\n                    (match_dup 1))\n-              (clobber (match_dup 2))])])\n+              (clobber (match_dup 2))\n+              (clobber (reg:CC REG_CC))])])\n \n ;;============================================================================\n ;; move word (16 bit)\n@@ -804,12 +807,14 @@\n \n (define_peephole2\n   [(match_scratch:QI 2 \"d\")\n-   (set (match_operand:ALL2 0 \"l_register_operand\" \"\")\n-        (match_operand:ALL2 1 \"const_or_immediate_operand\" \"\"))]\n+   (parallel [(set (match_operand:ALL2 0 \"l_register_operand\" \"\")\n+                   (match_operand:ALL2 1 \"const_or_immediate_operand\" \"\"))\n+              (clobber (reg:CC REG_CC))])]\n   \"operands[1] != CONST0_RTX (<MODE>mode)\"\n   [(parallel [(set (match_dup 0)\n                    (match_dup 1))\n-              (clobber (match_dup 2))])])\n+              (clobber (match_dup 2))\n+              (clobber (reg:CC REG_CC))])])\n \n ;; '*' because it is not used in rtl generation, only in above peephole\n ;; \"*reload_inhi\"\n@@ -855,30 +860,36 @@\n    (set_attr \"adjust_len\" \"mov16\")])\n \n (define_peephole2 ; movw\n-  [(set (match_operand:ALL1 0 \"even_register_operand\" \"\")\n-        (match_operand:ALL1 1 \"even_register_operand\" \"\"))\n-   (set (match_operand:ALL1 2 \"odd_register_operand\" \"\")\n-        (match_operand:ALL1 3 \"odd_register_operand\" \"\"))]\n+  [(parallel [(set (match_operand:ALL1 0 \"even_register_operand\" \"\")\n+                   (match_operand:ALL1 1 \"even_register_operand\" \"\"))\n+              (clobber (reg:CC REG_CC))])\n+   (parallel [(set (match_operand:ALL1 2 \"odd_register_operand\" \"\")\n+                   (match_operand:ALL1 3 \"odd_register_operand\" \"\"))\n+              (clobber (reg:CC REG_CC))])]\n   \"AVR_HAVE_MOVW\n    && REGNO (operands[0]) == REGNO (operands[2]) - 1\n    && REGNO (operands[1]) == REGNO (operands[3]) - 1\"\n-  [(set (match_dup 4)\n-        (match_dup 5))]\n+  [(parallel [(set (match_dup 4)\n+                   (match_dup 5))\n+              (clobber (reg:CC REG_CC))])]\n   {\n     operands[4] = gen_rtx_REG (HImode, REGNO (operands[0]));\n     operands[5] = gen_rtx_REG (HImode, REGNO (operands[1]));\n   })\n \n (define_peephole2 ; movw_r\n-  [(set (match_operand:ALL1 0 \"odd_register_operand\" \"\")\n-        (match_operand:ALL1 1 \"odd_register_operand\" \"\"))\n-   (set (match_operand:ALL1 2 \"even_register_operand\" \"\")\n-        (match_operand:ALL1 3 \"even_register_operand\" \"\"))]\n+  [(parallel [(set (match_operand:ALL1 0 \"odd_register_operand\" \"\")\n+                   (match_operand:ALL1 1 \"odd_register_operand\" \"\"))\n+              (clobber (reg:CC REG_CC))])\n+   (parallel [(set (match_operand:ALL1 2 \"even_register_operand\" \"\")\n+                   (match_operand:ALL1 3 \"even_register_operand\" \"\"))\n+              (clobber (reg:CC REG_CC))])]\n   \"AVR_HAVE_MOVW\n    && REGNO (operands[2]) == REGNO (operands[0]) - 1\n    && REGNO (operands[3]) == REGNO (operands[1]) - 1\"\n-  [(set (match_dup 4)\n-        (match_dup 5))]\n+  [(parallel [(set (match_dup 4)\n+                   (match_dup 5))\n+              (clobber (reg:CC REG_CC))])]\n   {\n     operands[4] = gen_rtx_REG (HImode, REGNO (operands[2]));\n     operands[5] = gen_rtx_REG (HImode, REGNO (operands[3]));\n@@ -919,8 +930,9 @@\n \n (define_peephole2 ; *reload_inpsi\n   [(match_scratch:QI 2 \"d\")\n-   (set (match_operand:PSI 0 \"l_register_operand\" \"\")\n-        (match_operand:PSI 1 \"immediate_operand\" \"\"))\n+   (parallel [(set (match_operand:PSI 0 \"l_register_operand\" \"\")\n+                   (match_operand:PSI 1 \"immediate_operand\" \"\"))\n+              (clobber (reg:CC REG_CC))])\n    (match_dup 2)]\n   \"operands[1] != const0_rtx\n    && operands[1] != constm1_rtx\"\n@@ -973,8 +985,9 @@\n \n (define_peephole2 ; *reload_insi\n   [(match_scratch:QI 2 \"d\")\n-   (set (match_operand:ALL4 0 \"l_register_operand\" \"\")\n-        (match_operand:ALL4 1 \"immediate_operand\" \"\"))\n+   (parallel [(set (match_operand:ALL4 0 \"l_register_operand\" \"\")\n+                   (match_operand:ALL4 1 \"immediate_operand\" \"\"))\n+              (clobber (reg:CC REG_CC))])\n    (match_dup 2)]\n   \"operands[1] != CONST0_RTX (<MODE>mode)\"\n   [(parallel [(set (match_dup 0)\n@@ -1055,8 +1068,9 @@\n \n (define_peephole2 ; *reload_insf\n   [(match_scratch:QI 2 \"d\")\n-   (set (match_operand:SF 0 \"l_register_operand\" \"\")\n-        (match_operand:SF 1 \"const_double_operand\" \"\"))\n+   (parallel [(set (match_operand:SF 0 \"l_register_operand\" \"\")\n+                   (match_operand:SF 1 \"const_double_operand\" \"\"))\n+              (clobber (reg:CC REG_CC))])\n    (match_dup 2)]\n   \"operands[1] != CONST0_RTX (SFmode)\"\n   [(parallel [(set (match_dup 0)\n@@ -1603,16 +1617,19 @@\n ;; itself because that insn is special to reload.\n \n (define_peephole2 ; addhi3_clobber\n-  [(set (match_operand:ALL2 0 \"d_register_operand\" \"\")\n-        (match_operand:ALL2 1 \"const_operand\" \"\"))\n-   (set (match_operand:ALL2 2 \"l_register_operand\" \"\")\n-        (plus:ALL2 (match_dup 2)\n-                   (match_dup 0)))]\n+  [(parallel [(set (match_operand:ALL2 0 \"d_register_operand\" \"\")\n+                   (match_operand:ALL2 1 \"const_operand\" \"\"))\n+              (clobber (reg:CC REG_CC))])\n+   (parallel [(set (match_operand:ALL2 2 \"l_register_operand\" \"\")\n+                   (plus:ALL2 (match_dup 2)\n+                              (match_dup 0)))\n+              (clobber (reg:CC REG_CC))])]\n   \"peep2_reg_dead_p (2, operands[0])\"\n   [(parallel [(set (match_dup 2)\n                    (plus:ALL2 (match_dup 2)\n                               (match_dup 1)))\n-              (clobber (match_dup 3))])]\n+              (clobber (match_dup 3))\n+              (clobber (reg:CC REG_CC))])]\n   {\n     operands[3] = simplify_gen_subreg (QImode, operands[0], <MODE>mode, 0);\n   })\n@@ -1623,15 +1640,18 @@\n (define_peephole2 ; addhi3_clobber\n   [(parallel [(set (match_operand:ALL2 0 \"l_register_operand\" \"\")\n                    (match_operand:ALL2 1 \"const_operand\" \"\"))\n-              (clobber (match_operand:QI 2 \"d_register_operand\" \"\"))])\n-   (set (match_operand:ALL2 3 \"l_register_operand\" \"\")\n-        (plus:ALL2 (match_dup 3)\n-                   (match_dup 0)))]\n+              (clobber (match_operand:QI 2 \"d_register_operand\" \"\"))\n+              (clobber (reg:CC REG_CC))])\n+   (parallel [(set (match_operand:ALL2 3 \"l_register_operand\" \"\")\n+                   (plus:ALL2 (match_dup 3)\n+                              (match_dup 0)))\n+              (clobber (reg:CC REG_CC))])]\n   \"peep2_reg_dead_p (2, operands[0])\"\n   [(parallel [(set (match_dup 3)\n                    (plus:ALL2 (match_dup 3)\n                               (match_dup 1)))\n-              (clobber (match_dup 2))])])\n+              (clobber (match_dup 2))\n+              (clobber (reg:CC REG_CC))])])\n \n ;; \"addhi3_clobber\"\n ;; \"addhq3_clobber\" \"adduhq3_clobber\"\n@@ -4387,14 +4407,17 @@\n    (set_attr \"adjust_len\" \"*,out_bitop,out_bitop,out_bitop\")])\n \n (define_peephole2 ; andi\n-  [(set (match_operand:QI 0 \"d_register_operand\" \"\")\n-        (and:QI (match_dup 0)\n-                (match_operand:QI 1 \"const_int_operand\" \"\")))\n-   (set (match_dup 0)\n-        (and:QI (match_dup 0)\n-                (match_operand:QI 2 \"const_int_operand\" \"\")))]\n+  [(parallel [(set (match_operand:QI 0 \"d_register_operand\" \"\")\n+                   (and:QI (match_dup 0)\n+                           (match_operand:QI 1 \"const_int_operand\" \"\")))\n+              (clobber (reg:CC REG_CC))])\n+   (parallel [(set (match_dup 0)\n+                   (and:QI (match_dup 0)\n+                           (match_operand:QI 2 \"const_int_operand\" \"\")))\n+              (clobber (reg:CC REG_CC))])]\n   \"\"\n-  [(set (match_dup 0) (and:QI (match_dup 0) (match_dup 1)))]\n+  [(parallel [(set (match_dup 0) (and:QI (match_dup 0) (match_dup 1)))\n+              (clobber (reg:CC REG_CC))])]\n   {\n     operands[1] = GEN_INT (INTVAL (operands[1]) & INTVAL (operands[2]));\n   })\n@@ -5140,13 +5163,15 @@\n ;; No need to compute it, map to 8-bit shift.\n \n (define_peephole2\n-  [(set (match_operand:HI 0 \"register_operand\" \"\")\n-        (ashift:HI (match_dup 0)\n-                   (match_operand:QI 1 \"register_operand\" \"\")))]\n+  [(parallel [(set (match_operand:HI 0 \"register_operand\" \"\")\n+                   (ashift:HI (match_dup 0)\n+                              (match_operand:QI 1 \"register_operand\" \"\")))\n+              (clobber (reg:CC REG_CC))])]\n   \"\"\n-  [(set (match_dup 2)\n-        (ashift:QI (match_dup 2)\n-                   (match_dup 1)))\n+  [(parallel [(set (match_dup 2)\n+                   (ashift:QI (match_dup 2)\n+                              (match_dup 1)))\n+              (clobber (reg:CC REG_CC))])\n    (clobber (match_dup 3))]\n   {\n     operands[3] = simplify_gen_subreg (QImode, operands[0], HImode, 1);\n@@ -5188,56 +5213,72 @@\n ;; Optimize if a scratch register from LD_REGS happens to be available.\n \n (define_peephole2 ; ashlqi3_l_const4\n-  [(set (match_operand:ALL1 0 \"l_register_operand\" \"\")\n-        (ashift:ALL1 (match_dup 0)\n-                     (const_int 4)))\n+  [(parallel [(set (match_operand:ALL1 0 \"l_register_operand\" \"\")\n+                   (ashift:ALL1 (match_dup 0)\n+                                (const_int 4)))\n+              (clobber (reg:CC REG_CC))])\n    (match_scratch:QI 1 \"d\")]\n   \"\"\n-  [(set (match_dup 2) (rotate:QI (match_dup 2) (const_int 4)))\n-   (set (match_dup 1) (const_int -16))\n-   (set (match_dup 2) (and:QI (match_dup 2) (match_dup 1)))]\n+  [(parallel [(set (match_dup 2) (rotate:QI (match_dup 2) (const_int 4)))\n+              (clobber (reg:CC REG_CC))])\n+   (parallel [(set (match_dup 1) (const_int -16))\n+              (clobber (reg:CC REG_CC))])\n+   (parallel [(set (match_dup 2) (and:QI (match_dup 2) (match_dup 1)))\n+              (clobber (reg:CC REG_CC))])]\n   {\n     operands[2] = avr_to_int_mode (operands[0]);\n   })\n \n (define_peephole2 ; ashlqi3_l_const5\n-  [(set (match_operand:ALL1 0 \"l_register_operand\" \"\")\n-        (ashift:ALL1 (match_dup 0)\n-                     (const_int 5)))\n+  [(parallel [(set (match_operand:ALL1 0 \"l_register_operand\" \"\")\n+                   (ashift:ALL1 (match_dup 0)\n+                                (const_int 5)))\n+              (clobber (reg:CC REG_CC))])\n    (match_scratch:QI 1 \"d\")]\n   \"\"\n-  [(set (match_dup 2) (rotate:QI (match_dup 2) (const_int 4)))\n-   (set (match_dup 2) (ashift:QI (match_dup 2) (const_int 1)))\n-   (set (match_dup 1) (const_int -32))\n-   (set (match_dup 2) (and:QI (match_dup 2) (match_dup 1)))]\n+  [(parallel [(set (match_dup 2) (rotate:QI (match_dup 2) (const_int 4)))\n+                   (clobber (reg:CC REG_CC))])\n+   (parallel [(set (match_dup 2) (ashift:QI (match_dup 2) (const_int 1)))\n+              (clobber (reg:CC REG_CC))])\n+   (parallel [(set (match_dup 1) (const_int -32))\n+              (clobber (reg:CC REG_CC))])\n+   (parallel [(set (match_dup 2) (and:QI (match_dup 2) (match_dup 1)))\n+              (clobber (reg:CC REG_CC))])]\n   {\n     operands[2] = avr_to_int_mode (operands[0]);\n   })\n \n (define_peephole2 ; ashlqi3_l_const6\n-  [(set (match_operand:ALL1 0 \"l_register_operand\" \"\")\n-        (ashift:ALL1 (match_dup 0)\n-                     (const_int 6)))\n+  [(parallel [(set (match_operand:ALL1 0 \"l_register_operand\" \"\")\n+                   (ashift:ALL1 (match_dup 0)\n+                                (const_int 6)))\n+              (clobber (reg:CC REG_CC))])\n    (match_scratch:QI 1 \"d\")]\n   \"\"\n-  [(set (match_dup 2) (rotate:QI (match_dup 2) (const_int 4)))\n-   (set (match_dup 2) (ashift:QI (match_dup 2) (const_int 2)))\n-   (set (match_dup 1) (const_int -64))\n-   (set (match_dup 2) (and:QI (match_dup 2) (match_dup 1)))]\n+  [(parallel [(set (match_dup 2) (rotate:QI (match_dup 2) (const_int 4)))\n+              (clobber (reg:CC REG_CC))])\n+   (parallel [(set (match_dup 2) (ashift:QI (match_dup 2) (const_int 2)))\n+              (clobber (reg:CC REG_CC))])\n+   (parallel [(set (match_dup 1) (const_int -64))\n+              (clobber (reg:CC REG_CC))])\n+   (parallel [(set (match_dup 2) (and:QI (match_dup 2) (match_dup 1)))\n+              (clobber (reg:CC REG_CC))])]\n   {\n     operands[2] = avr_to_int_mode (operands[0]);\n   })\n \n (define_peephole2\n   [(match_scratch:QI 3 \"d\")\n-   (set (match_operand:ALL2 0 \"register_operand\" \"\")\n-        (ashift:ALL2 (match_operand:ALL2 1 \"register_operand\" \"\")\n-                     (match_operand:QI 2 \"const_int_operand\" \"\")))]\n+   (parallel [(set (match_operand:ALL2 0 \"register_operand\" \"\")\n+                   (ashift:ALL2 (match_operand:ALL2 1 \"register_operand\" \"\")\n+                                (match_operand:QI 2 \"const_int_operand\" \"\")))\n+              (clobber (reg:CC REG_CC))])]\n   \"\"\n   [(parallel [(set (match_dup 0)\n                    (ashift:ALL2 (match_dup 1)\n                                 (match_dup 2)))\n-              (clobber (match_dup 3))])])\n+              (clobber (match_dup 3))\n+              (clobber (reg:CC REG_CC))])])\n \n ;; \"*ashlhi3_const\"\n ;; \"*ashlhq3_const\"  \"*ashluhq3_const\"\n@@ -5271,14 +5312,16 @@\n \n (define_peephole2\n   [(match_scratch:QI 3 \"d\")\n-   (set (match_operand:ALL4 0 \"register_operand\" \"\")\n-        (ashift:ALL4 (match_operand:ALL4 1 \"register_operand\" \"\")\n-                     (match_operand:QI 2 \"const_int_operand\" \"\")))]\n+   (parallel [(set (match_operand:ALL4 0 \"register_operand\" \"\")\n+                   (ashift:ALL4 (match_operand:ALL4 1 \"register_operand\" \"\")\n+                                (match_operand:QI 2 \"const_int_operand\" \"\")))\n+              (clobber (reg:CC REG_CC))])]\n   \"\"\n   [(parallel [(set (match_dup 0)\n                    (ashift:ALL4 (match_dup 1)\n                                 (match_dup 2)))\n-              (clobber (match_dup 3))])])\n+              (clobber (match_dup 3))\n+              (clobber (reg:CC REG_CC))])])\n \n ;; \"*ashlsi3_const\"\n ;; \"*ashlsq3_const\"  \"*ashlusq3_const\"\n@@ -5476,14 +5519,16 @@\n \n (define_peephole2\n   [(match_scratch:QI 3 \"d\")\n-   (set (match_operand:ALL2 0 \"register_operand\" \"\")\n-        (ashiftrt:ALL2 (match_operand:ALL2 1 \"register_operand\" \"\")\n-                       (match_operand:QI 2 \"const_int_operand\" \"\")))]\n+   (parallel [(set (match_operand:ALL2 0 \"register_operand\" \"\")\n+                   (ashiftrt:ALL2 (match_operand:ALL2 1 \"register_operand\" \"\")\n+                                  (match_operand:QI 2 \"const_int_operand\" \"\")))\n+              (clobber (reg:CC REG_CC))])]\n   \"\"\n   [(parallel [(set (match_dup 0)\n                    (ashiftrt:ALL2 (match_dup 1)\n                                   (match_dup 2)))\n-              (clobber (match_dup 3))])])\n+              (clobber (match_dup 3))\n+              (clobber (reg:CC REG_CC))])])\n \n ;; \"*ashrhi3_const\"\n ;; \"*ashrhq3_const\"  \"*ashruhq3_const\"\n@@ -5517,14 +5562,16 @@\n \n (define_peephole2\n   [(match_scratch:QI 3 \"d\")\n-   (set (match_operand:ALL4 0 \"register_operand\" \"\")\n-        (ashiftrt:ALL4 (match_operand:ALL4 1 \"register_operand\" \"\")\n-                       (match_operand:QI 2 \"const_int_operand\" \"\")))]\n+   (parallel [(set (match_operand:ALL4 0 \"register_operand\" \"\")\n+                   (ashiftrt:ALL4 (match_operand:ALL4 1 \"register_operand\" \"\")\n+                                  (match_operand:QI 2 \"const_int_operand\" \"\")))\n+              (clobber (reg:CC REG_CC))])]\n   \"\"\n   [(parallel [(set (match_dup 0)\n                    (ashiftrt:ALL4 (match_dup 1)\n                                   (match_dup 2)))\n-              (clobber (match_dup 3))])])\n+              (clobber (match_dup 3))\n+              (clobber (reg:CC REG_CC))])])\n \n ;; \"*ashrsi3_const\"\n ;; \"*ashrsq3_const\"  \"*ashrusq3_const\"\n@@ -5715,56 +5762,72 @@\n ;; Optimize if a scratch register from LD_REGS happens to be available.\n \n (define_peephole2 ; lshrqi3_l_const4\n-  [(set (match_operand:ALL1 0 \"l_register_operand\" \"\")\n-        (lshiftrt:ALL1 (match_dup 0)\n-                       (const_int 4)))\n+  [(parallel [(set (match_operand:ALL1 0 \"l_register_operand\" \"\")\n+                   (lshiftrt:ALL1 (match_dup 0)\n+                                  (const_int 4)))\n+              (clobber (reg:CC REG_CC))])\n    (match_scratch:QI 1 \"d\")]\n   \"\"\n-  [(set (match_dup 2) (rotate:QI (match_dup 2) (const_int 4)))\n-   (set (match_dup 1) (const_int 15))\n-   (set (match_dup 2) (and:QI (match_dup 2) (match_dup 1)))]\n+  [(parallel [(set (match_dup 2) (rotate:QI (match_dup 2) (const_int 4)))\n+              (clobber (reg:CC REG_CC))])\n+   (parallel [(set (match_dup 1) (const_int 15))\n+              (clobber (reg:CC REG_CC))])\n+   (parallel [(set (match_dup 2) (and:QI (match_dup 2) (match_dup 1)))\n+              (clobber (reg:CC REG_CC))])]\n   {\n     operands[2] = avr_to_int_mode (operands[0]);\n   })\n \n (define_peephole2 ; lshrqi3_l_const5\n-  [(set (match_operand:ALL1 0 \"l_register_operand\" \"\")\n-        (lshiftrt:ALL1 (match_dup 0)\n-                       (const_int 5)))\n+  [(parallel [(set (match_operand:ALL1 0 \"l_register_operand\" \"\")\n+                   (lshiftrt:ALL1 (match_dup 0)\n+                                  (const_int 5)))\n+              (clobber (reg:CC REG_CC))])\n    (match_scratch:QI 1 \"d\")]\n   \"\"\n-  [(set (match_dup 2) (rotate:QI (match_dup 2) (const_int 4)))\n-   (set (match_dup 2) (lshiftrt:QI (match_dup 2) (const_int 1)))\n-   (set (match_dup 1) (const_int 7))\n-   (set (match_dup 2) (and:QI (match_dup 2) (match_dup 1)))]\n+  [(parallel [(set (match_dup 2) (rotate:QI (match_dup 2) (const_int 4)))\n+              (clobber (reg:CC REG_CC))])\n+   (parallel [(set (match_dup 2) (lshiftrt:QI (match_dup 2) (const_int 1)))\n+              (clobber (reg:CC REG_CC))])\n+   (parallel [(set (match_dup 1) (const_int 7))\n+              (clobber (reg:CC REG_CC))])\n+   (parallel [(set (match_dup 2) (and:QI (match_dup 2) (match_dup 1)))\n+              (clobber (reg:CC REG_CC))])]\n   {\n     operands[2] = avr_to_int_mode (operands[0]);\n   })\n \n (define_peephole2 ; lshrqi3_l_const6\n-  [(set (match_operand:ALL1 0 \"l_register_operand\" \"\")\n-        (lshiftrt:ALL1 (match_dup 0)\n-                       (const_int 6)))\n+  [(parallel [(set (match_operand:ALL1 0 \"l_register_operand\" \"\")\n+                   (lshiftrt:ALL1 (match_dup 0)\n+                                  (const_int 6)))\n+              (clobber (reg:CC REG_CC))])\n    (match_scratch:QI 1 \"d\")]\n   \"\"\n-  [(set (match_dup 2) (rotate:QI (match_dup 2) (const_int 4)))\n-   (set (match_dup 2) (lshiftrt:QI (match_dup 2) (const_int 2)))\n-   (set (match_dup 1) (const_int 3))\n-   (set (match_dup 2) (and:QI (match_dup 2) (match_dup 1)))]\n+  [(parallel [(set (match_dup 2) (rotate:QI (match_dup 2) (const_int 4)))\n+              (clobber (reg:CC REG_CC))])\n+   (parallel [(set (match_dup 2) (lshiftrt:QI (match_dup 2) (const_int 2)))\n+              (clobber (reg:CC REG_CC))])\n+   (parallel [(set (match_dup 1) (const_int 3))\n+              (clobber (reg:CC REG_CC))])\n+   (parallel [(set (match_dup 2) (and:QI (match_dup 2) (match_dup 1)))\n+              (clobber (reg:CC REG_CC))])]\n   {\n     operands[2] = avr_to_int_mode (operands[0]);\n   })\n \n (define_peephole2\n   [(match_scratch:QI 3 \"d\")\n-   (set (match_operand:ALL2 0 \"register_operand\" \"\")\n-        (lshiftrt:ALL2 (match_operand:ALL2 1 \"register_operand\" \"\")\n-                       (match_operand:QI 2 \"const_int_operand\" \"\")))]\n+   (parallel [(set (match_operand:ALL2 0 \"register_operand\" \"\")\n+                   (lshiftrt:ALL2 (match_operand:ALL2 1 \"register_operand\" \"\")\n+                                  (match_operand:QI 2 \"const_int_operand\" \"\")))\n+              (clobber (reg:CC REG_CC))])]\n   \"\"\n   [(parallel [(set (match_dup 0)\n                    (lshiftrt:ALL2 (match_dup 1)\n                                   (match_dup 2)))\n-              (clobber (match_dup 3))])])\n+              (clobber (match_dup 3))\n+              (clobber (reg:CC REG_CC))])])\n \n ;; \"*lshrhi3_const\"\n ;; \"*lshrhq3_const\"  \"*lshruhq3_const\"\n@@ -5798,14 +5861,16 @@\n \n (define_peephole2\n   [(match_scratch:QI 3 \"d\")\n-   (set (match_operand:ALL4 0 \"register_operand\" \"\")\n-        (lshiftrt:ALL4 (match_operand:ALL4 1 \"register_operand\" \"\")\n-                       (match_operand:QI 2 \"const_int_operand\" \"\")))]\n+   (parallel [(set (match_operand:ALL4 0 \"register_operand\" \"\")\n+                   (lshiftrt:ALL4 (match_operand:ALL4 1 \"register_operand\" \"\")\n+                                  (match_operand:QI 2 \"const_int_operand\" \"\")))\n+              (clobber (reg:CC REG_CC))])]\n   \"\"\n   [(parallel [(set (match_dup 0)\n                    (lshiftrt:ALL4 (match_dup 1)\n                                   (match_dup 2)))\n-              (clobber (match_dup 3))])])\n+              (clobber (match_dup 3))\n+              (clobber (reg:CC REG_CC))])])\n \n ;; \"*lshrsi3_const\"\n ;; \"*lshrsq3_const\"  \"*lshrusq3_const\"\n@@ -6817,83 +6882,95 @@\n (define_peephole2\n   [(set (reg:CC REG_CC) (compare:CC (match_operand:QI 0 \"register_operand\" \"\")\n                        (const_int 0)))\n-   (set (pc) (if_then_else (ge (reg:CC REG_CC) (const_int 0))\n-                           (label_ref (match_operand 1 \"\" \"\"))\n-                           (pc)))]\n+   (parallel [(set (pc) (if_then_else (ge (reg:CC REG_CC) (const_int 0))\n+                                      (label_ref (match_operand 1 \"\" \"\"))\n+                                      (pc)))\n+              (clobber (reg:CC REG_CC))])]\n   \"\"\n-  [(set (pc) (if_then_else (eq (zero_extract:HI (match_dup 0)\n-                                                (const_int 1)\n-                                                (const_int 7))\n-                               (const_int 0))\n-                           (label_ref (match_dup 1))\n-                           (pc)))])\n+  [(parallel [(set (pc) (if_then_else (eq (zero_extract:HI (match_dup 0)\n+                                                           (const_int 1)\n+                                                           (const_int 7))\n+                                          (const_int 0))\n+                                      (label_ref (match_dup 1))\n+                                      (pc)))\n+              (clobber (reg:CC REG_CC))])])\n \n (define_peephole2\n   [(set (reg:CC REG_CC) (compare:CC (match_operand:QI 0 \"register_operand\" \"\")\n                        (const_int 0)))\n-   (set (pc) (if_then_else (lt (reg:CC REG_CC) (const_int 0))\n-                           (label_ref (match_operand 1 \"\" \"\"))\n-                           (pc)))]\n+   (parallel [(set (pc) (if_then_else (lt (reg:CC REG_CC) (const_int 0))\n+                                      (label_ref (match_operand 1 \"\" \"\"))\n+                                      (pc)))\n+              (clobber (reg:CC REG_CC))])]\n   \"\"\n-  [(set (pc) (if_then_else (ne (zero_extract:HI (match_dup 0)\n-                                                (const_int 1)\n-                                                (const_int 7))\n-                               (const_int 0))\n-                           (label_ref (match_dup 1))\n-                           (pc)))])\n+  [(parallel [(set (pc) (if_then_else (ne (zero_extract:HI (match_dup 0)\n+                                                           (const_int 1)\n+                                                           (const_int 7))\n+                                          (const_int 0))\n+                                      (label_ref (match_dup 1))\n+                                      (pc)))\n+              (clobber (reg:CC REG_CC))])])\n \n (define_peephole2\n   [(parallel [(set (reg:CC REG_CC) (compare:CC (match_operand:HI 0 \"register_operand\" \"\")\n                                   (const_int 0)))\n               (clobber (match_operand:HI 2 \"\"))])\n-   (set (pc) (if_then_else (ge (reg:CC REG_CC) (const_int 0))\n-                           (label_ref (match_operand 1 \"\" \"\"))\n-                           (pc)))]\n+   (parallel [(set (pc) (if_then_else (ge (reg:CC REG_CC) (const_int 0))\n+                                      (label_ref (match_operand 1 \"\" \"\"))\n+                                      (pc)))\n+              (clobber (reg:CC REG_CC))])]\n   \"\"\n-  [(set (pc) (if_then_else (eq (and:HI (match_dup 0) (const_int -32768))\n-                               (const_int 0))\n-                           (label_ref (match_dup 1))\n-                           (pc)))])\n+  [(parallel [(set (pc) (if_then_else (eq (and:HI (match_dup 0) (const_int -32768))\n+                                          (const_int 0))\n+                                      (label_ref (match_dup 1))\n+                                      (pc)))\n+              (clobber (reg:CC REG_CC))])])\n \n (define_peephole2\n   [(parallel [(set (reg:CC REG_CC) (compare:CC (match_operand:HI 0 \"register_operand\" \"\")\n                                   (const_int 0)))\n               (clobber (match_operand:HI 2 \"\"))])\n-   (set (pc) (if_then_else (lt (reg:CC REG_CC) (const_int 0))\n-                           (label_ref (match_operand 1 \"\" \"\"))\n-                           (pc)))]\n+   (parallel [(set (pc) (if_then_else (lt (reg:CC REG_CC) (const_int 0))\n+                                      (label_ref (match_operand 1 \"\" \"\"))\n+                                      (pc)))\n+              (clobber (reg:CC REG_CC))])]\n   \"\"\n-  [(set (pc) (if_then_else (ne (and:HI (match_dup 0) (const_int -32768))\n-                               (const_int 0))\n-                           (label_ref (match_dup 1))\n-                           (pc)))])\n+  [(parallel [(set (pc) (if_then_else (ne (and:HI (match_dup 0) (const_int -32768))\n+                                          (const_int 0))\n+                                      (label_ref (match_dup 1))\n+                                      (pc)))\n+              (clobber (reg:CC REG_CC))])])\n \n (define_peephole2\n   [(parallel [(set (reg:CC REG_CC) (compare:CC (match_operand:SI 0 \"register_operand\" \"\")\n                                   (const_int 0)))\n               (clobber (match_operand:SI 2 \"\"))])\n-   (set (pc) (if_then_else (ge (reg:CC REG_CC) (const_int 0))\n-                           (label_ref (match_operand 1 \"\" \"\"))\n-                           (pc)))]\n-  \"\"\n-  [(set (pc) (if_then_else (eq (and:SI (match_dup 0) (match_dup 2))\n-                               (const_int 0))\n-                           (label_ref (match_dup 1))\n-                           (pc)))]\n+   (parallel [(set (pc) (if_then_else (ge (reg:CC REG_CC) (const_int 0))\n+                                      (label_ref (match_operand 1 \"\" \"\"))\n+                                      (pc)))\n+              (clobber (reg:CC REG_CC))])]\n+  \"\"\n+  [(parallel [(set (pc) (if_then_else (eq (and:SI (match_dup 0) (match_dup 2))\n+                                          (const_int 0))\n+                                      (label_ref (match_dup 1))\n+                                      (pc)))\n+              (clobber (reg:CC REG_CC))])]\n   \"operands[2] = gen_int_mode (-2147483647 - 1, SImode);\")\n \n (define_peephole2\n   [(parallel [(set (reg:CC REG_CC) (compare:CC (match_operand:SI 0 \"register_operand\" \"\")\n                                   (const_int 0)))\n               (clobber (match_operand:SI 2 \"\"))])\n-   (set (pc) (if_then_else (lt (reg:CC REG_CC) (const_int 0))\n-                           (label_ref (match_operand 1 \"\" \"\"))\n-                           (pc)))]\n-  \"\"\n-  [(set (pc) (if_then_else (ne (and:SI (match_dup 0) (match_dup 2))\n-                               (const_int 0))\n-                           (label_ref (match_dup 1))\n-                           (pc)))]\n+   (parallel [(set (pc) (if_then_else (lt (reg:CC REG_CC) (const_int 0))\n+                                      (label_ref (match_operand 1 \"\" \"\"))\n+                                      (pc)))\n+              (clobber (reg:CC REG_CC))])]\n+  \"\"\n+  [(parallel [(set (pc) (if_then_else (ne (and:SI (match_dup 0) (match_dup 2))\n+                                          (const_int 0))\n+                                      (label_ref (match_dup 1))\n+                                      (pc)))\n+              (clobber (reg:CC REG_CC))])]\n   \"operands[2] = gen_int_mode (-2147483647 - 1, SImode);\")\n \n ;; ************************************************************************\n@@ -7575,16 +7652,18 @@\n   [(parallel [(set (match_operand:SI 0 \"d_register_operand\" \"\")\n                    (plus:SI (match_dup 0)\n                             (const_int -1)))\n-              (clobber (scratch:QI))])\n+              (clobber (scratch:QI))\n+              (clobber (reg:CC REG_CC))])\n    (parallel [(set (reg:CC REG_CC)\n                    (compare:CC (match_dup 0)\n                             (const_int -1)))\n               (clobber (match_operand:QI 1 \"d_register_operand\" \"\"))])\n-   (set (pc)\n-        (if_then_else (eqne (reg:CC REG_CC)\n-                            (const_int 0))\n-                      (label_ref (match_operand 2 \"\" \"\"))\n-                      (pc)))]\n+   (parallel [(set (pc)\n+                   (if_then_else (eqne (reg:CC REG_CC)\n+                                       (const_int 0))\n+                                 (label_ref (match_operand 2 \"\" \"\"))\n+                                 (pc)))\n+              (clobber (reg:CC REG_CC))])]\n   \"\"\n   {\n     const char *op;\n@@ -7616,18 +7695,20 @@\n   })\n \n (define_peephole ; \"*dec-and-branchhi!=-1\"\n-  [(set (match_operand:HI 0 \"d_register_operand\" \"\")\n-        (plus:HI (match_dup 0)\n-                 (const_int -1)))\n+  [(parallel [(set (match_operand:HI 0 \"d_register_operand\" \"\")\n+                   (plus:HI (match_dup 0)\n+                            (const_int -1)))\n+              (clobber (reg:CC REG_CC))])\n    (parallel [(set (reg:CC REG_CC)\n                    (compare:CC (match_dup 0)\n                             (const_int -1)))\n               (clobber (match_operand:QI 1 \"d_register_operand\" \"\"))])\n-   (set (pc)\n-        (if_then_else (eqne (reg:CC REG_CC)\n-                            (const_int 0))\n-                      (label_ref (match_operand 2 \"\" \"\"))\n-                      (pc)))]\n+   (parallel [(set (pc)\n+                   (if_then_else (eqne (reg:CC REG_CC)\n+                                       (const_int 0))\n+                                 (label_ref (match_operand 2 \"\" \"\"))\n+                                 (pc)))\n+              (clobber (reg:CC REG_CC))])]\n   \"\"\n   {\n     const char *op;\n@@ -7659,16 +7740,18 @@\n   [(parallel [(set (match_operand:HI 0 \"d_register_operand\" \"\")\n                    (plus:HI (match_dup 0)\n                             (const_int -1)))\n-              (clobber (scratch:QI))])\n+              (clobber (scratch:QI))\n+              (clobber (reg:CC REG_CC))])\n    (parallel [(set (reg:CC REG_CC)\n                    (compare:CC (match_dup 0)\n                             (const_int -1)))\n               (clobber (match_operand:QI 1 \"d_register_operand\" \"\"))])\n-   (set (pc)\n-        (if_then_else (eqne (reg:CC REG_CC)\n-                            (const_int 0))\n-                      (label_ref (match_operand 2 \"\" \"\"))\n-                      (pc)))]\n+   (parallel [(set (pc)\n+                   (if_then_else (eqne (reg:CC REG_CC)\n+                                       (const_int 0))\n+                                 (label_ref (match_operand 2 \"\" \"\"))\n+                                 (pc)))\n+              (clobber (reg:CC REG_CC))])]\n   \"\"\n   {\n     const char *op;\n@@ -7700,16 +7783,18 @@\n   [(parallel [(set (match_operand:HI 0 \"l_register_operand\" \"\")\n                    (plus:HI (match_dup 0)\n                             (const_int -1)))\n-              (clobber (match_operand:QI 3 \"d_register_operand\" \"\"))])\n+              (clobber (match_operand:QI 3 \"d_register_operand\" \"\"))\n+              (clobber (reg:CC REG_CC))])\n    (parallel [(set (reg:CC REG_CC)\n                    (compare:CC (match_dup 0)\n                             (const_int -1)))\n               (clobber (match_operand:QI 1 \"d_register_operand\" \"\"))])\n-   (set (pc)\n-        (if_then_else (eqne (reg:CC REG_CC)\n-                            (const_int 0))\n-                      (label_ref (match_operand 2 \"\" \"\"))\n-                      (pc)))]\n+   (parallel [(set (pc)\n+                   (if_then_else (eqne (reg:CC REG_CC)\n+                                       (const_int 0))\n+                                 (label_ref (match_operand 2 \"\" \"\"))\n+                                 (pc)))\n+              (clobber (reg:CC REG_CC))])]\n   \"\"\n   {\n     const char *op;\n@@ -7735,17 +7820,19 @@\n   })\n \n (define_peephole ; \"*dec-and-branchqi!=-1\"\n-  [(set (match_operand:QI 0 \"d_register_operand\" \"\")\n-        (plus:QI (match_dup 0)\n-                 (const_int -1)))\n+  [(parallel [(set (match_operand:QI 0 \"d_register_operand\" \"\")\n+                   (plus:QI (match_dup 0)\n+                            (const_int -1)))\n+              (clobber (reg:CC REG_CC))])\n    (set (reg:CC REG_CC)\n         (compare:CC (match_dup 0)\n                  (const_int -1)))\n-   (set (pc)\n-        (if_then_else (eqne (reg:CC REG_CC)\n-                            (const_int 0))\n-                      (label_ref (match_operand 1 \"\" \"\"))\n-                      (pc)))]\n+   (parallel [(set (pc)\n+                   (if_then_else (eqne (reg:CC REG_CC)\n+                                       (const_int 0))\n+                                 (label_ref (match_operand 1 \"\" \"\"))\n+                                 (pc)))\n+              (clobber (reg:CC REG_CC))])]\n   \"\"\n   {\n     const char *op;\n@@ -7773,11 +7860,12 @@\n   [(set (reg:CC REG_CC)\n         (compare:CC (match_operand:ALL1 1 \"register_operand\" \"r,r\")\n                  (match_operand:ALL1 2 \"reg_or_0_operand\" \"r,Y00\")))\n-   (set (pc)\n-        (if_then_else (eq (reg:CC REG_CC)\n-                          (const_int 0))\n-                      (label_ref (match_operand 0 \"\" \"\"))\n-                      (pc)))]\n+   (parallel [(set (pc)\n+                   (if_then_else (eq (reg:CC REG_CC)\n+                                     (const_int 0))\n+                                 (label_ref (match_operand 0 \"\" \"\"))\n+                                 (pc)))\n+              (clobber (reg:CC REG_CC))])]\n   \"jump_over_one_insn_p (insn, operands[0])\"\n   \"@\n \tcpse %1,%2\n@@ -7808,11 +7896,12 @@\n   [(set (reg:CC REG_CC)\n         (compare:CC (match_operand:ALL1 1 \"register_operand\" \"\")\n                  (match_operand:ALL1 2 \"reg_or_0_operand\" \"\")))\n-   (set (pc)\n-        (if_then_else (ne (reg:CC REG_CC)\n-                          (const_int 0))\n-                      (label_ref (match_operand 0 \"\" \"\"))\n-                      (pc)))]\n+   (parallel [(set (pc)\n+                   (if_then_else (ne (reg:CC REG_CC)\n+                                     (const_int 0))\n+                                 (label_ref (match_operand 0 \"\" \"\"))\n+                                 (pc)))\n+              (clobber (reg:CC REG_CC))])]\n   \"!AVR_HAVE_JMP_CALL\n    || !TARGET_SKIP_BUG\"\n   {\n@@ -9391,14 +9480,17 @@\n \n \n (define_peephole2\n-  [(set (match_operand:QI 0 \"register_operand\")\n-        (const_int 0))\n-   (set (match_dup 0)\n-        (ior:QI (match_dup 0)\n-                (match_operand:QI 1 \"register_operand\")))]\n+  [(parallel [(set (match_operand:QI 0 \"register_operand\")\n+                   (const_int 0))\n+              (clobber (reg:CC REG_CC))])\n+   (parallel [(set (match_dup 0)\n+                   (ior:QI (match_dup 0)\n+                           (match_operand:QI 1 \"register_operand\")))\n+              (clobber (reg:CC REG_CC))])]\n   \"\"\n-  [(set (match_dup 0)\n-        (match_dup 1))])\n+  [(parallel [(set (match_dup 0)\n+                   (match_dup 1))\n+              (clobber (reg:CC REG_CC))])])\n \n \n (define_expand \"extzv\""}]}