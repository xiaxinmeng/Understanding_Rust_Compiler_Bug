{"sha": "75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzViZTVkYzBhMWFlNjgxMDZkMWEwNDdkMGMwYzhmYWRhNGJmZWM4Yw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2007-08-26T18:11:42Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-08-26T18:11:42Z"}, "message": "re PR fortran/32980 (Vendor extension: Intrinsic functions (D)GAMMA, LGAMMA (ALGAMA/DLGAMA))\n\n2007-08-26  Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/32980\n\t* intrinsic.h (gfc_simplify_gamma,gfc_simplify_lgamma,\n\tgfc_resolve_gamma,gfc_resolve_lgamma): New function declations.\n\t* mathbuiltins.def: Define GAMMA and LGAMMA.\n\t* intrinsic.c (add_functions): Add GAMMA, DGAMMA, LGAMMA, ALGAMA\n\tand DLGAMA.\n\t* simplify.c (gfc_simplify_gamma,gfc_simplify_lgamma): New functions.\n\t* iresolve.c (gfc_resolve_gamma,gfc_resolve_lgamma): New functions.\n\t* intrinsic.texi: Add documentation for GAMMA and LGAMMA.\n\n2007-08-26  Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/32980\n\t* gfortran.dg/gamma_1.f90: New.\n\t* gfortran.dg/gamma_2.f90: New.\n\t* gfortran.dg/gamma_3.f90: New.\n\nFrom-SVN: r127809", "tree": {"sha": "733ec1028c30f2c08fd86083c385b58defdd716b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/733ec1028c30f2c08fd86083c385b58defdd716b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c5b9117ecabde0a935e826afff0728b04c1d47c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5b9117ecabde0a935e826afff0728b04c1d47c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5b9117ecabde0a935e826afff0728b04c1d47c9"}], "stats": {"total": 316, "additions": 316, "deletions": 0}, "files": [{"sha": "259716415b2aa64282407e9f65ca04d00f7010c7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c", "patch": "@@ -1,3 +1,15 @@\n+2007-08-26  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/32980\n+\t* intrinsic.h (gfc_simplify_gamma,gfc_simplify_lgamma,\n+\tgfc_resolve_gamma,gfc_resolve_lgamma): New function declations.\n+\t* mathbuiltins.def: Define GAMMA and LGAMMA.\n+\t* intrinsic.c (add_functions): Add GAMMA, DGAMMA, LGAMMA, ALGAMA\n+\tand DLGAMA.\n+\t* simplify.c (gfc_simplify_gamma,gfc_simplify_lgamma): New functions.\n+\t* iresolve.c (gfc_resolve_gamma,gfc_resolve_lgamma): New functions.\n+\t* intrinsic.texi: Add documentation for GAMMA and LGAMMA.\n+\n 2007-08-26  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/33188"}, {"sha": "d273f8061116b601fa95f15132c323f14e653e8f", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c", "patch": "@@ -1453,6 +1453,16 @@ add_functions (void)\n \n   make_generic (\"fput\", GFC_ISYM_FPUT, GFC_STD_GNU);\n \n+  add_sym_1 (\"gamma\", GFC_ISYM_GAMMA, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n+\t     gfc_check_fn_r, gfc_simplify_gamma, gfc_resolve_gamma,\n+\t     x, BT_REAL, dr, REQUIRED);\n+\n+  add_sym_1 (\"dgamma\", GFC_ISYM_GAMMA, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n+\t     gfc_check_fn_r, gfc_simplify_gamma, gfc_resolve_gamma,\n+\t     x, BT_REAL, dr, REQUIRED);\n+\n+  make_generic (\"gamma\", GFC_ISYM_GAMMA, GFC_STD_GNU);\n+\n   /* Unix IDs (g77 compatibility)  */\n   add_sym_1 (\"getcwd\", GFC_ISYM_GETCWD, NO_CLASS, ACTUAL_NO, BT_INTEGER, di,  GFC_STD_GNU,\n \t     NULL, NULL, gfc_resolve_getcwd,\n@@ -1690,6 +1700,21 @@ add_functions (void)\n \n   make_generic (\"len_trim\", GFC_ISYM_LEN_TRIM, GFC_STD_F95);\n \n+  add_sym_1 (\"lgamma\", GFC_ISYM_LGAMMA, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n+\t     gfc_check_fn_r, gfc_simplify_lgamma, gfc_resolve_lgamma,\n+\t     x, BT_REAL, dr, REQUIRED);\n+\n+  add_sym_1 (\"algama\", GFC_ISYM_LGAMMA, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n+\t     gfc_check_fn_r, gfc_simplify_lgamma, gfc_resolve_lgamma,\n+\t     x, BT_REAL, dr, REQUIRED);\n+\n+  add_sym_1 (\"dlgama\", GFC_ISYM_LGAMMA, CLASS_ELEMENTAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n+\t     gfc_check_fn_r, gfc_simplify_lgamma, gfc_resolve_lgamma,\n+\t     x, BT_REAL, dr, REQUIRED);\n+\n+  make_generic (\"lgamma\", GFC_ISYM_LGAMMA, GFC_STD_GNU);\n+\n+\n   add_sym_2 (\"lge\", GFC_ISYM_LGE, CLASS_ELEMENTAL, ACTUAL_NO, BT_LOGICAL, dl, GFC_STD_F77,\n \t     NULL, gfc_simplify_lge, NULL,\n \t     sta, BT_CHARACTER, dc, REQUIRED, stb, BT_CHARACTER, dc, REQUIRED);"}, {"sha": "e284a6c7177549f5b2f2d5934f63f279ae328cd1", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c", "patch": "@@ -221,6 +221,7 @@ gfc_expr *gfc_simplify_exponent (gfc_expr *);\n gfc_expr *gfc_simplify_float (gfc_expr *);\n gfc_expr *gfc_simplify_floor (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_fraction (gfc_expr *);\n+gfc_expr *gfc_simplify_gamma (gfc_expr *);\n gfc_expr *gfc_simplify_huge (gfc_expr *);\n gfc_expr *gfc_simplify_iachar (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_iand (gfc_expr *, gfc_expr *);\n@@ -243,6 +244,7 @@ gfc_expr *gfc_simplify_kind (gfc_expr *);\n gfc_expr *gfc_simplify_lbound (gfc_expr *, gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_len (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_len_trim (gfc_expr *, gfc_expr *);\n+gfc_expr *gfc_simplify_lgamma (gfc_expr *);\n gfc_expr *gfc_simplify_lge (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_lgt (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_lle (gfc_expr *, gfc_expr *);\n@@ -354,6 +356,7 @@ void gfc_resolve_fget (gfc_expr *, gfc_expr *);\n void gfc_resolve_fputc (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_fput (gfc_expr *, gfc_expr *);\n void gfc_resolve_g77_math1 (gfc_expr *, gfc_expr *);\n+void gfc_resolve_gamma (gfc_expr *, gfc_expr *);\n void gfc_resolve_getcwd (gfc_expr *, gfc_expr *);\n void gfc_resolve_getgid (gfc_expr *);\n void gfc_resolve_getpid (gfc_expr *);\n@@ -384,6 +387,7 @@ void gfc_resolve_kill (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_lbound (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_len (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_len_trim (gfc_expr *, gfc_expr *, gfc_expr *);\n+void gfc_resolve_lgamma (gfc_expr *, gfc_expr *);\n void gfc_resolve_link (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_loc (gfc_expr *, gfc_expr *);\n void gfc_resolve_log (gfc_expr *, gfc_expr *);"}, {"sha": "e94a7e3023b9c7f10f2767801169f4e4d571d429", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c", "patch": "@@ -121,6 +121,7 @@ Some basic guidelines for editing this document:\n * @code{FSEEK}:         FSEEK,     Low level file positioning subroutine\n * @code{FSTAT}:         FSTAT,     Get file status\n * @code{FTELL}:         FTELL,     Current stream position\n+* @code{GAMMA}:         GAMMA,     Gamma function\n * @code{GERROR}:        GERROR,    Get last system error message\n * @code{GETARG}:        GETARG,    Get command line arguments\n * @code{GET_COMMAND}:   GET_COMMAND, Get the entire command line\n@@ -161,6 +162,7 @@ Some basic guidelines for editing this document:\n * @code{LBOUND}:        LBOUND,    Lower dimension bounds of an array\n * @code{LEN}:           LEN,       Length of a character entity\n * @code{LEN_TRIM}:      LEN_TRIM,  Length of a character entity without trailing blank characters\n+* @code{LGAMMA}:        LGAMMA,    Logarithm of the Gamma function\n * @code{LGE}:           LGE,       Lexical greater than or equal\n * @code{LGT}:           LGT,       Lexical greater than\n * @code{LINK}:          LINK,      Create a hard link\n@@ -4484,6 +4486,65 @@ END PROGRAM\n \n \n \n+@node GAMMA\n+@section @code{GAMMA} --- Gamma function\n+@fnindex GAMMA\n+@fnindex DGAMMA\n+@cindex Gamma function\n+@cindex Factorial function\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{GAMMA(X)} computes Gamma (@math{\\Gamma}) of @var{X}. For positive,\n+integer values of @var{X} the Gamma function simplifies to the factorial\n+function @math{\\Gamma(x)=(x-1)!}.\n+\n+@tex\n+$$\n+\\Gamma(x) = \\int_0^\\infty t^{x-1}{\\rm e}^{-t}\\,{\\rm d}t\n+$$\n+@end tex\n+\n+@item @emph{Standard}:\n+GNU Extension\n+\n+@item @emph{Class}:\n+Elemental function\n+\n+@item @emph{Syntax}:\n+@code{X = GAMMA(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{X} @tab Shall be of type @code{REAL} and neither zero\n+nor a negative integer.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{REAL} of the same kind as @var{X}.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_gamma\n+  real :: x = 1.0\n+  x = gamma(x) ! returns 1.0\n+end program test_gamma\n+@end smallexample\n+\n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name             @tab Argument         @tab Return type       @tab Standard\n+@item @code{GAMMA(X)}  @tab @code{REAL(4) X} @tab @code{REAL(4)}    @tab GNU Extension\n+@item @code{DGAMMA(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)}    @tab GNU Extension\n+@end multitable\n+\n+@item @emph{See also}:\n+Logarithm of the Gamma function: @ref{LGAMMA}\n+\n+@end table\n+\n+\n+\n @node GERROR\n @section @code{GERROR} --- Get last system error message\n @fnindex GERROR\n@@ -6230,6 +6291,60 @@ The return value is of type @code{INTEGER} and of kind @var{KIND}. If\n \n \n \n+@node LGAMMA\n+@section @code{LGAMMA} --- Logarithm of the Gamma function\n+@fnindex GAMMA\n+@fnindex ALGAMA\n+@fnindex DLGAMA\n+@cindex Gamma function, logarithm of\n+@cindex \n+\n+@table @asis\n+@item @emph{Description}:\n+@code{GAMMA(X)} computes the natural logrithm of the absolute value of the\n+Gamma (@math{\\Gamma}) function.\n+\n+@item @emph{Standard}:\n+GNU Extension\n+\n+@item @emph{Class}:\n+Elemental function\n+\n+@item @emph{Syntax}:\n+@code{X = LGAMMA(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{X} @tab Shall be of type @code{REAL} and neither zero\n+nor a negative integer.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{REAL} of the same kind as @var{X}.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_log_gamma\n+  real :: x = 1.0\n+  x = lgamma(x) ! returns 0.0\n+end program test_log_gamma\n+@end smallexample\n+\n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name             @tab Argument         @tab Return type       @tab Standard\n+@item @code{LGAMMA(X)} @tab @code{REAL(4) X} @tab @code{REAL(4)}    @tab GNU Extension\n+@item @code{ALGAMA(X)} @tab @code{REAL(4) X} @tab @code{REAL(4)}    @tab GNU Extension\n+@item @code{DLGAMA(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)}    @tab GNU Extension\n+@end multitable\n+\n+@item @emph{See also}:\n+Gamma function: @ref{GAMMA}\n+\n+@end table\n+\n+\n+\n @node LGE\n @section @code{LGE} --- Lexical greater than or equal\n @fnindex LGE"}, {"sha": "7948b14eeb9ddfb2d89754f5bef47b973453c75a", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c", "patch": "@@ -756,6 +756,15 @@ gfc_resolve_g77_math1 (gfc_expr *f, gfc_expr *x)\n }\n \n \n+void\n+gfc_resolve_gamma (gfc_expr *f, gfc_expr *x)\n+{\n+  f->ts = x->ts;\n+  f->value.function.name\n+    = gfc_get_string (\"__gamma_%d\", x->ts.kind);\n+}\n+\n+\n void\n gfc_resolve_getcwd (gfc_expr *f, gfc_expr *n ATTRIBUTE_UNUSED)\n {\n@@ -1113,6 +1122,15 @@ gfc_resolve_len_trim (gfc_expr *f, gfc_expr *string, gfc_expr *kind)\n }\n \n \n+void\n+gfc_resolve_lgamma (gfc_expr *f, gfc_expr *x)\n+{\n+  f->ts = x->ts;\n+  f->value.function.name\n+    = gfc_get_string (\"__lgamma_%d\", x->ts.kind);\n+}\n+\n+\n void\n gfc_resolve_link (gfc_expr *f, gfc_expr *p1 ATTRIBUTE_UNUSED,\n \t\t  gfc_expr *p2 ATTRIBUTE_UNUSED)"}, {"sha": "33e87d142900d21942ece86a87ece500236372af", "filename": "gcc/fortran/mathbuiltins.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c/gcc%2Ffortran%2Fmathbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c/gcc%2Ffortran%2Fmathbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmathbuiltins.def?ref=75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c", "patch": "@@ -30,3 +30,5 @@ DEFINE_MATH_BUILTIN   (Y1,    \"y1\",     0)\n DEFINE_MATH_BUILTIN   (YN,    \"yn\",     2)\n DEFINE_MATH_BUILTIN   (ERF,   \"erf\",    0)\n DEFINE_MATH_BUILTIN   (ERFC,  \"erfc\",   0)\n+DEFINE_MATH_BUILTIN   (GAMMA, \"gamma\",  0)\n+DEFINE_MATH_BUILTIN   (LGAMMA,\"lgamma\", 0)"}, {"sha": "5e129ae18de08206a4cf5395feefe05b93b53317", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c", "patch": "@@ -1182,6 +1182,24 @@ gfc_simplify_fraction (gfc_expr *x)\n }\n \n \n+gfc_expr *\n+gfc_simplify_gamma (gfc_expr *x)\n+{\n+  gfc_expr *result;\n+\n+  if (x->expr_type != EXPR_CONSTANT)\n+    return NULL;\n+\n+  result = gfc_constant_result (x->ts.type, x->ts.kind, &x->where);\n+\n+  gfc_set_model_kind (x->ts.kind);\n+\n+  mpfr_gamma (result->value.real, x->value.real, GFC_RND_MODE);\n+\n+  return range_check (result, \"GAMMA\");\n+}\n+\n+\n gfc_expr *\n gfc_simplify_huge (gfc_expr *e)\n {\n@@ -2212,6 +2230,27 @@ gfc_simplify_len_trim (gfc_expr *e, gfc_expr *kind)\n   return range_check (result, \"LEN_TRIM\");\n }\n \n+gfc_expr *\n+gfc_simplify_lgamma (gfc_expr *x __attribute__((unused)))\n+{\n+#if MPFR_VERSION >= MPFR_VERSION_NUM(2,3,0)\n+  gfc_expr *result;\n+\n+  if (x->expr_type != EXPR_CONSTANT)\n+    return NULL;\n+\n+  result = gfc_constant_result (x->ts.type, x->ts.kind, &x->where);\n+\n+  gfc_set_model_kind (x->ts.kind);\n+\n+  mpfr_lgamma (result->value.real, x->value.real, GFC_RND_MODE);\n+\n+  return range_check (result, \"LGAMMA\");\n+#else\n+  return NULL;\n+#endif\n+}\n+\n \n gfc_expr *\n gfc_simplify_lge (gfc_expr *a, gfc_expr *b)"}, {"sha": "8dbd4c2c9e7e526c4fe49ef4af35dc3194a73374", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c", "patch": "@@ -1,3 +1,10 @@\n+2007-08-26  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/32980\n+\t* gfortran.dg/gamma_1.f90: New.\n+\t* gfortran.dg/gamma_2.f90: New.\n+\t* gfortran.dg/gamma_3.f90: New.\n+\n 2007-08-26  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/33188"}, {"sha": "819f467217657410645e27852c4eace0d20f4e7a", "filename": "gcc/testsuite/gfortran.dg/gamma_1.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_1.f90?ref=75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do run }\n+!\n+! Test the vendor intrinsic (d)gamma, lgamma and algama/dlgama\n+! gamma is also part of the Fortran 2008 draft; lgamma is called\n+! log_gamma in the Fortran 2008 draft.\n+!\n+! PR fortran/32980\n+!\n+program gamma_test\n+implicit none\n+intrinsic :: gamma, lgamma\n+integer, parameter :: sp = kind(1.0)\n+integer, parameter :: dp = kind(1.0d0)\n+integer, parameter :: qp = selected_real_kind(p=15,r=900)\n+\n+real(sp) :: rsp\n+real(dp) :: rdp\n+real(dp) :: rqp\n+\n+if (abs(gamma(1.0_sp)  - 1.0_sp) > tiny(1.0_sp)) call abort()\n+if (abs(gamma(1.0_dp)  - 1.0_dp) > tiny(1.0_dp)) call abort()\n+if (abs(gamma(1.0_qp)  - 1.0_qp) > tiny(1.0_qp)) call abort()\n+if (abs(dgamma(1.0_dp) - 1.0_dp) > tiny(1.0_dp)) call abort()\n+\n+if (abs(lgamma(1.0_sp)) > tiny(1.0_sp)) call abort()\n+if (abs(lgamma(1.0_dp)) > tiny(1.0_dp)) call abort()\n+if (abs(lgamma(1.0_qp)) > tiny(1.0_qp)) call abort()\n+if (abs(algama(1.0_sp)) > tiny(1.0_sp)) call abort()\n+if (abs(dlgama(1.0_dp)) > tiny(1.0_dp)) call abort()\n+end program gamma_test\n+"}, {"sha": "b15696fe350f646f0529951bfb37b30cef79ee25", "filename": "gcc/testsuite/gfortran.dg/gamma_2.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_2.f90?ref=75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003 -Wall\" }\n+!\n+! Test the vendor intrinsic (d)gamma, lgamma and algama/dlgama\n+! gamma is also part of the Fortran 2008 draft; lgamma is called\n+! log_gamma in the Fortran 2008 draft.\n+!\n+! PR fortran/32980\n+!\n+subroutine foo()\n+intrinsic :: gamma\n+intrinsic :: dgamma\n+intrinsic :: lgamma\n+intrinsic :: algama\n+intrinsic :: dlgama\n+\n+integer, parameter :: sp = kind(1.0)\n+integer, parameter :: dp = kind(1.0d0)\n+integer, parameter :: qp = selected_real_kind(p=15,r=900)\n+\n+real(sp) :: rsp = 1.0_sp\n+real(dp) :: rdp = 1.0_dp\n+real(dp) :: rqp = 1.0_qp\n+\n+rsp = gamma(rsp)  ! FIXME:  \"is not included in the selected standard\"\n+rdp = gamma(rdp)  ! FIXME:  \"is not included in the selected standard\"\n+rqp = gamma(rqp)  ! FIXME:  \"is not included in the selected standard\"\n+rdp = dgamma(rdp) ! { dg-error \"is not included in the selected standard\" }\n+\n+rsp = lgamma(rsp) ! FIXME:  \"is not included in the selected standard\"\n+rdp = lgamma(rdp) ! FIXME:  \"is not included in the selected standard\"\n+rqp = lgamma(rqp) ! FIXME:  \"is not included in the selected standard\"\n+rsp = algama(rsp) ! { dg-error \"is not included in the selected standard\" }\n+rdp = dlgama(rdp) ! { dg-error \"is not included in the selected standard\" }\n+end subroutine foo\n+end"}, {"sha": "b35596fa5a95d6f4d2548b5e56f6e26534590fb3", "filename": "gcc/testsuite/gfortran.dg/gamma_3.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgamma_3.f90?ref=75be5dc0a1ae68106d1a047d0c0c8fada4bfec8c", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do compile }\n+!\n+! Test the vendor intrinsic (d)gamma, lgamma and algama/dlgama\n+! gamma is also part of the Fortran 2008 draft; lgamma is called\n+! log_gamma in the Fortran 2008 draft.\n+!\n+! PR fortran/32980\n+!\n+program gamma_test\n+implicit none\n+intrinsic :: gamma, lgamma\n+real :: x\n+\n+x = gamma(cmplx(1.0,0.0))            ! { dg-error \"is not consistent with a specific intrinsic interface\" }\n+x = dgamma(cmplx(1.0,0.0,kind(0d0))) ! { dg-error \"must be REAL\" }\n+x = gamma(int(1))                    ! { dg-error \"is not consistent with a specific intrinsic interface\" }\n+x = dgamma(int(1))                   ! { dg-error \"must be REAL\" }\n+\n+x = lgamma(cmplx(1.0,0.0))           ! { dg-error \"is not consistent with a specific intrinsic interface\" }\n+x = algama(cmplx(1.0,0.0))           ! { dg-error \"must be REAL\" }\n+x = dlgama(cmplx(1.0,0.0,kind(0d0))) ! { dg-error \"must be REAL\" }\n+\n+x = lgamma(int(1))                   ! { dg-error \"is not consistent with a specific intrinsic interface\" }\n+x = algama(int(1))                   ! { dg-error \"must be REAL\" }\n+x = dlgama(int(1))                   ! { dg-error \"must be REAL\" }\n+end program gamma_test\n+"}]}