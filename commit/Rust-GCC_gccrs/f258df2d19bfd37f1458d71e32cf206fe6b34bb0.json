{"sha": "f258df2d19bfd37f1458d71e32cf206fe6b34bb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI1OGRmMmQxOWJmZDM3ZjE0NThkNzFlMzJjZjIwNmZlNmIzNGJiMA==", "commit": {"author": {"name": "Igor Shevlyakov", "email": "igor.shevlyakov@gmail.com", "date": "2013-10-24T18:55:12Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2013-10-24T18:55:12Z"}, "message": "tree-ssa-loop-ivopts.c (multiplier_allowed_in_address_p ): Check both [reg+mult*reg] and [mult*reg] to determine if multiplier is allowed.\n\n\t* tree-ssa-loop-ivopts.c (multiplier_allowed_in_address_p ): Check both\n\t[reg+mult*reg] and [mult*reg] to determine if multiplier is allowed.\n\nFrom-SVN: r204031", "tree": {"sha": "79a4c847d9fe83459e20ee3e311470c35ffa772b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79a4c847d9fe83459e20ee3e311470c35ffa772b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f258df2d19bfd37f1458d71e32cf206fe6b34bb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f258df2d19bfd37f1458d71e32cf206fe6b34bb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f258df2d19bfd37f1458d71e32cf206fe6b34bb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f258df2d19bfd37f1458d71e32cf206fe6b34bb0/comments", "author": null, "committer": null, "parents": [{"sha": "247dbcf4ab40703cb68ed7c7c593493ee0d7ec80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/247dbcf4ab40703cb68ed7c7c593493ee0d7ec80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/247dbcf4ab40703cb68ed7c7c593493ee0d7ec80"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "1b3b1ea9aaef9fe0baf39bb09d58cba3649d7756", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f258df2d19bfd37f1458d71e32cf206fe6b34bb0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f258df2d19bfd37f1458d71e32cf206fe6b34bb0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f258df2d19bfd37f1458d71e32cf206fe6b34bb0", "patch": "@@ -1,3 +1,8 @@\n+2013-10-24  Igor Shevlyakov  <igor.shevlyakov@gmail.com>\n+\n+\t* tree-ssa-loop-ivopts.c (multiplier_allowed_in_address_p ): Check both\n+\t[reg+mult*reg] and [mult*reg] to determine if multiplier is allowed.\n+\n 2013-10-24  Cong Hou  <congh@google.com>\n \n \t* convert.c (convert_to_real): Guard those unsafe math function"}, {"sha": "bd2e6297785525ffa9201df632bbfd3bc054ae3b", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f258df2d19bfd37f1458d71e32cf206fe6b34bb0/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f258df2d19bfd37f1458d71e32cf206fe6b34bb0/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=f258df2d19bfd37f1458d71e32cf206fe6b34bb0", "patch": "@@ -3120,16 +3120,19 @@ multiplier_allowed_in_address_p (HOST_WIDE_INT ratio, enum machine_mode mode,\n     {\n       enum machine_mode address_mode = targetm.addr_space.address_mode (as);\n       rtx reg1 = gen_raw_REG (address_mode, LAST_VIRTUAL_REGISTER + 1);\n-      rtx addr;\n+      rtx reg2 = gen_raw_REG (address_mode, LAST_VIRTUAL_REGISTER + 2);\n+      rtx addr, scaled;\n       HOST_WIDE_INT i;\n \n       valid_mult = sbitmap_alloc (2 * MAX_RATIO + 1);\n       bitmap_clear (valid_mult);\n-      addr = gen_rtx_fmt_ee (MULT, address_mode, reg1, NULL_RTX);\n+      scaled = gen_rtx_fmt_ee (MULT, address_mode, reg1, NULL_RTX);\n+      addr = gen_rtx_fmt_ee (PLUS, address_mode, scaled, reg2);\n       for (i = -MAX_RATIO; i <= MAX_RATIO; i++)\n \t{\n-\t  XEXP (addr, 1) = gen_int_mode (i, address_mode);\n-\t  if (memory_address_addr_space_p (mode, addr, as))\n+\t  XEXP (scaled, 1) = gen_int_mode (i, address_mode);\n+\t  if (memory_address_addr_space_p (mode, addr, as)\n+\t      || memory_address_addr_space_p (mode, scaled, as))\n \t    bitmap_set_bit (valid_mult, i + MAX_RATIO);\n \t}\n "}]}