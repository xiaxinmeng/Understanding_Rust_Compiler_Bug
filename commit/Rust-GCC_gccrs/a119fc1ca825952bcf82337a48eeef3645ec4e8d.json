{"sha": "a119fc1ca825952bcf82337a48eeef3645ec4e8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTExOWZjMWNhODI1OTUyYmNmODIzMzdhNDhlZWVmMzY0NWVjNGU4ZA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2006-07-30T20:48:00Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-07-30T20:48:00Z"}, "message": "intrinsic.c (add_functions): Add ACCESS, CHMOD, RSHIFT, LSHIFT.\n\n\t* intrinsic.c (add_functions): Add ACCESS, CHMOD, RSHIFT, LSHIFT.\n\t(add_subroutines): Add LTIME, GMTIME and CHMOD.\n\t* intrinsic.h (gfc_check_access_func, gfc_check_chmod,\n\tgfc_check_chmod_sub, gfc_check_ltime_gmtime, gfc_simplify_rshift,\n\tgfc_simplify_lshift, gfc_resolve_access, gfc_resolve_chmod,\n\tgfc_resolve_rshift, gfc_resolve_lshift, gfc_resolve_chmod_sub,\n\tgfc_resolve_gmtime, gfc_resolve_ltime): Add prototypes.\n\t* gfortran.h (gfc_generic_isym_id): Add GFC_ISYM_ACCESS,\n\tGFC_ISYM_CHMOD, GFC_ISYM_LSHIFT, GFC_ISYM_RSHIFT.\n\t* iresolve.c (gfc_resolve_access, gfc_resolve_chmod,\n\tgfc_resolve_rshift, gfc_resolve_lshift, gfc_resolve_chmod_sub,\n\tgfc_resolve_gmtime, gfc_resolve_ltime): New functions.\n\t* check.c (gfc_check_access_func, gfc_check_chmod,\n\tgfc_check_chmod_sub, gfc_check_ltime_gmtime): New functions.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_rlshift): New function.\n\t(gfc_conv_intrinsic_function): Add cases for the new GFC_ISYM_*.\n\n\t* intrinsics/date_and_time.c: Add functions for GMTIME and LTIME.\n\t* intrinsics/access.c: New file.\n\t* intrinsics/chmod.c: New file.\n\t* configure.ac: Add checks for <sys/wait.h>, access, fork,execl\n\tand wait.\n\t* Makefile.am: Add new files intrinsics/access.c and\n\tintrinsics/chmod.c.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\t* Makefile.in: Regenerate.\n\n\t* gcc/testsuite/gfortran.dg/chmod_3.f90: New test.\n\t* gcc/testsuite/gfortran.dg/ltime_gmtime_1.f90: New test.\n\t* gcc/testsuite/gfortran.dg/ltime_gmtime_2.f90: New test.\n\t* gcc/testsuite/gfortran.dg/lrshift_1.f90: New test.\n\t* gcc/testsuite/gfortran.dg/chmod_1.f90: New test.\n\t* gcc/testsuite/gfortran.dg/chmod_2.f90: New test.\n\nFrom-SVN: r115825", "tree": {"sha": "42900f38bd309eacda612a5027a33176a6f75fb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42900f38bd309eacda612a5027a33176a6f75fb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a119fc1ca825952bcf82337a48eeef3645ec4e8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a119fc1ca825952bcf82337a48eeef3645ec4e8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a119fc1ca825952bcf82337a48eeef3645ec4e8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a119fc1ca825952bcf82337a48eeef3645ec4e8d/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd11bebe1b23ef6604982e3bc4e64e7f3adda83b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd11bebe1b23ef6604982e3bc4e64e7f3adda83b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd11bebe1b23ef6604982e3bc4e64e7f3adda83b"}], "stats": {"total": 1032, "additions": 960, "deletions": 72}, "files": [{"sha": "bb84735d21a980c3423f0b287b662f73075a9c34", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a119fc1ca825952bcf82337a48eeef3645ec4e8d", "patch": "@@ -1,3 +1,22 @@\n+2006-07-30  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* intrinsic.c (add_functions): Add ACCESS, CHMOD, RSHIFT, LSHIFT.\n+\t(add_subroutines): Add LTIME, GMTIME and CHMOD.\n+\t* intrinsic.h (gfc_check_access_func, gfc_check_chmod,\n+\tgfc_check_chmod_sub, gfc_check_ltime_gmtime, gfc_simplify_rshift,\n+\tgfc_simplify_lshift, gfc_resolve_access, gfc_resolve_chmod,\n+\tgfc_resolve_rshift, gfc_resolve_lshift, gfc_resolve_chmod_sub,\n+\tgfc_resolve_gmtime, gfc_resolve_ltime): Add prototypes.\n+\t* gfortran.h (gfc_generic_isym_id): Add GFC_ISYM_ACCESS,\n+\tGFC_ISYM_CHMOD, GFC_ISYM_LSHIFT, GFC_ISYM_RSHIFT.\n+\t* iresolve.c (gfc_resolve_access, gfc_resolve_chmod,\n+\tgfc_resolve_rshift, gfc_resolve_lshift, gfc_resolve_chmod_sub,\n+\tgfc_resolve_gmtime, gfc_resolve_ltime): New functions.\n+\t* check.c (gfc_check_access_func, gfc_check_chmod,\n+\tgfc_check_chmod_sub, gfc_check_ltime_gmtime): New functions.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_rlshift): New function.\n+\t(gfc_conv_intrinsic_function): Add cases for the new GFC_ISYM_*.\n+\n 2006-07-28  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \t* Make-lang.in: Use $(HEADER_H) instead of header.h in dependencies."}, {"sha": "23658221705bc5764c431bfadf8299c9b6021fd6", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=a119fc1ca825952bcf82337a48eeef3645ec4e8d", "patch": "@@ -442,6 +442,22 @@ gfc_check_achar (gfc_expr * a)\n }\n \n \n+try\n+gfc_check_access_func (gfc_expr * name, gfc_expr * mode)\n+{\n+  if (type_check (name, 0, BT_CHARACTER) == FAILURE\n+      || scalar_check (name, 0) == FAILURE)\n+    return FAILURE;\n+\n+\n+  if (type_check (mode, 1, BT_CHARACTER) == FAILURE\n+      || scalar_check (mode, 1) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n try\n gfc_check_all_any (gfc_expr * mask, gfc_expr * dim)\n {\n@@ -677,6 +693,41 @@ gfc_check_chdir_sub (gfc_expr * dir, gfc_expr * status)\n }\n \n \n+try\n+gfc_check_chmod (gfc_expr * name, gfc_expr * mode)\n+{\n+  if (type_check (name, 0, BT_CHARACTER) == FAILURE)\n+    return FAILURE;\n+\n+  if (type_check (mode, 1, BT_CHARACTER) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n+try\n+gfc_check_chmod_sub (gfc_expr * name, gfc_expr * mode, gfc_expr * status)\n+{\n+  if (type_check (name, 0, BT_CHARACTER) == FAILURE)\n+    return FAILURE;\n+\n+  if (type_check (mode, 1, BT_CHARACTER) == FAILURE)\n+    return FAILURE;\n+\n+  if (status == NULL)\n+    return SUCCESS;\n+\n+  if (type_check (status, 2, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  if (scalar_check (status, 2) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n try\n gfc_check_cmplx (gfc_expr * x, gfc_expr * y, gfc_expr * kind)\n {\n@@ -3084,6 +3135,37 @@ gfc_check_itime_idate (gfc_expr * values)\n }\n \n \n+try\n+gfc_check_ltime_gmtime (gfc_expr * time, gfc_expr * values)\n+{\n+  if (type_check (time, 0, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  if (kind_value_check(time, 0, gfc_default_integer_kind) == FAILURE)\n+    return FAILURE;\n+\n+  if (scalar_check (time, 0) == FAILURE)\n+    return FAILURE;\n+\n+  if (array_check (values, 1) == FAILURE)\n+    return FAILURE;\n+\n+  if (rank_check (values, 1, 1) == FAILURE)\n+    return FAILURE;\n+\n+  if (variable_check (values, 1) == FAILURE)\n+    return FAILURE;\n+\n+  if (type_check (values, 1, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  if (kind_value_check(values, 1, gfc_default_integer_kind) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n try\n gfc_check_ttynam_sub (gfc_expr * unit, gfc_expr * name)\n {"}, {"sha": "7335d942d48cbac69797fb3754a69497cd81c296", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=a119fc1ca825952bcf82337a48eeef3645ec4e8d", "patch": "@@ -304,6 +304,7 @@ enum gfc_generic_isym_id\n      the backend (eg. KIND).  */\n   GFC_ISYM_NONE = 0,\n   GFC_ISYM_ABS,\n+  GFC_ISYM_ACCESS,\n   GFC_ISYM_ACHAR,\n   GFC_ISYM_ACOS,\n   GFC_ISYM_ACOSH,\n@@ -332,6 +333,7 @@ enum gfc_generic_isym_id\n   GFC_ISYM_CEILING,\n   GFC_ISYM_CHAR,\n   GFC_ISYM_CHDIR,\n+  GFC_ISYM_CHMOD,\n   GFC_ISYM_CMPLX,\n   GFC_ISYM_COMMAND_ARGUMENT_COUNT,\n   GFC_ISYM_COMPLEX,\n@@ -398,6 +400,7 @@ enum gfc_generic_isym_id\n   GFC_ISYM_LOG10,\n   GFC_ISYM_LOGICAL,\n   GFC_ISYM_LONG,\n+  GFC_ISYM_LSHIFT,\n   GFC_ISYM_LSTAT,\n   GFC_ISYM_MALLOC,\n   GFC_ISYM_MATMUL,\n@@ -424,6 +427,7 @@ enum gfc_generic_isym_id\n   GFC_ISYM_RENAME,\n   GFC_ISYM_REPEAT,\n   GFC_ISYM_RESHAPE,\n+  GFC_ISYM_RSHIFT,\n   GFC_ISYM_RRSPACING,\n   GFC_ISYM_SCALE,\n   GFC_ISYM_SCAN,"}, {"sha": "53f157e3c904c05d6e507372b0247bc51f22909a", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=a119fc1ca825952bcf82337a48eeef3645ec4e8d", "patch": "@@ -880,7 +880,7 @@ add_functions (void)\n     *x = \"x\", *sh = \"shift\", *stg = \"string\", *ssg = \"substring\",\n     *y = \"y\", *sz = \"size\", *sta = \"string_a\", *stb = \"string_b\",\n     *z = \"z\", *ln = \"len\", *ut = \"unit\", *han = \"handler\",\n-    *num = \"number\", *tm = \"time\";\n+    *num = \"number\", *tm = \"time\", *nm = \"name\", *md = \"mode\";\n \n   int di, dr, dd, dl, dc, dz, ii;\n \n@@ -916,6 +916,12 @@ add_functions (void)\n \n   make_generic (\"abs\", GFC_ISYM_ABS, GFC_STD_F77);\n \n+  add_sym_2 (\"access\", 0, 1, BT_INTEGER, di, GFC_STD_GNU,\n+\t     gfc_check_access_func, NULL, gfc_resolve_access,\n+\t     nm, BT_CHARACTER, dc, REQUIRED, md, BT_CHARACTER, dc, REQUIRED);\n+\n+  make_generic (\"access\", GFC_ISYM_ACCESS, GFC_STD_GNU);\n+\n   add_sym_1 (\"achar\", 1, 1, BT_CHARACTER, dc, GFC_STD_F95,\n \t     gfc_check_achar, gfc_simplify_achar, NULL,\n \t     i, BT_INTEGER, di, REQUIRED);\n@@ -1152,7 +1158,13 @@ add_functions (void)\n \t     a, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"chdir\", GFC_ISYM_CHDIR, GFC_STD_GNU);\n-  \n+\n+  add_sym_2 (\"chmod\", 0, 1, BT_INTEGER, di, GFC_STD_GNU,\n+\t     gfc_check_chmod, NULL, gfc_resolve_chmod,\n+\t     nm, BT_CHARACTER, dc, REQUIRED, md, BT_CHARACTER, dc, REQUIRED);\n+\n+  make_generic (\"chmod\", GFC_ISYM_CHMOD, GFC_STD_GNU);\n+\n   add_sym_3 (\"cmplx\", 1, 1, BT_COMPLEX, dz, GFC_STD_F77,\n \t     gfc_check_cmplx, gfc_simplify_cmplx, gfc_resolve_cmplx,\n \t     x, BT_UNKNOWN, dr, REQUIRED, y, BT_UNKNOWN, dr, OPTIONAL,\n@@ -1580,6 +1592,18 @@ add_functions (void)\n \n   make_generic (\"isatty\", GFC_ISYM_ISATTY, GFC_STD_GNU);\n \n+  add_sym_2 (\"rshift\", 1, 1, BT_INTEGER, di, GFC_STD_GNU,\n+\t     gfc_check_ishft, NULL, gfc_resolve_rshift,\n+\t     i, BT_INTEGER, di, REQUIRED, sh, BT_INTEGER, di, REQUIRED);\n+\n+  make_generic (\"rshift\", GFC_ISYM_RSHIFT, GFC_STD_GNU);\n+\n+  add_sym_2 (\"lshift\", 1, 1, BT_INTEGER, di, GFC_STD_GNU,\n+\t     gfc_check_ishft, NULL, gfc_resolve_lshift,\n+\t     i, BT_INTEGER, di, REQUIRED, sh, BT_INTEGER, di, REQUIRED);\n+\n+  make_generic (\"lshift\", GFC_ISYM_LSHIFT, GFC_STD_GNU);\n+\n   add_sym_2 (\"ishft\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ishft, gfc_simplify_ishft, gfc_resolve_ishft,\n \t     i, BT_INTEGER, di, REQUIRED, sh, BT_INTEGER, di, REQUIRED);\n@@ -2256,7 +2280,7 @@ add_subroutines (void)\n     *com = \"command\", *length = \"length\", *st = \"status\",\n     *val = \"value\", *num = \"number\", *name = \"name\",\n     *trim_name = \"trim_name\", *ut = \"unit\", *han = \"handler\",\n-    *sec = \"seconds\", *res = \"result\", *of = \"offset\";\n+    *sec = \"seconds\", *res = \"result\", *of = \"offset\", *md = \"mode\";\n \n   int di, dr, dc, dl, ii;\n \n@@ -2288,6 +2312,14 @@ add_subroutines (void)\n \t      gfc_check_itime_idate, NULL, gfc_resolve_itime,\n \t      vl, BT_INTEGER, 4, REQUIRED);\n \n+  add_sym_2s (\"ltime\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+\t      gfc_check_ltime_gmtime, NULL, gfc_resolve_ltime,\n+\t      tm, BT_INTEGER, di, REQUIRED, vl, BT_INTEGER, di, REQUIRED);\n+\n+  add_sym_2s (\"gmtime\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+\t      gfc_check_ltime_gmtime, NULL, gfc_resolve_gmtime,\n+\t      tm, BT_INTEGER, di, REQUIRED, vl, BT_INTEGER, di, REQUIRED);\n+\n   add_sym_1s (\"second\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_second_sub, NULL, gfc_resolve_second_sub,\n \t      tm, BT_REAL, dr, REQUIRED);\n@@ -2296,6 +2328,11 @@ add_subroutines (void)\n               gfc_check_chdir_sub, NULL, gfc_resolve_chdir_sub,\n \t      name, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n+  add_sym_3s (\"chmod\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+              gfc_check_chmod_sub, NULL, gfc_resolve_chmod_sub,\n+\t      name, BT_CHARACTER, dc, REQUIRED, md, BT_CHARACTER, dc, REQUIRED,\n+\t      st, BT_INTEGER, di, OPTIONAL);\n+\n   add_sym_4s (\"date_and_time\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n \t      gfc_check_date_and_time, NULL, NULL,\n \t      dt, BT_CHARACTER, dc, OPTIONAL, tm, BT_CHARACTER, dc, OPTIONAL,"}, {"sha": "c325a0555a0f8cab762f06e811b21ae6f18a31a3", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=a119fc1ca825952bcf82337a48eeef3645ec4e8d", "patch": "@@ -32,6 +32,7 @@ try gfc_check_a_xkind (gfc_expr *, gfc_expr *);\n try gfc_check_a_p (gfc_expr *, gfc_expr *);\n \n try gfc_check_abs (gfc_expr *);\n+try gfc_check_access_func (gfc_expr *, gfc_expr *);\n try gfc_check_achar (gfc_expr *);\n try gfc_check_all_any (gfc_expr *, gfc_expr *);\n try gfc_check_allocated (gfc_expr *);\n@@ -41,6 +42,7 @@ try gfc_check_besn (gfc_expr *, gfc_expr *);\n try gfc_check_btest (gfc_expr *, gfc_expr *);\n try gfc_check_char (gfc_expr *, gfc_expr *);\n try gfc_check_chdir (gfc_expr *);\n+try gfc_check_chmod (gfc_expr *, gfc_expr *);\n try gfc_check_cmplx (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_complex (gfc_expr *, gfc_expr *);\n try gfc_check_count (gfc_expr *, gfc_expr *);\n@@ -139,6 +141,7 @@ try gfc_check_x (gfc_expr *);\n /* Intrinsic subroutines.  */\n try gfc_check_alarm_sub (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_chdir_sub (gfc_expr *, gfc_expr *);\n+try gfc_check_chmod_sub (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_cpu_time (gfc_expr *);\n try gfc_check_ctime_sub (gfc_expr *, gfc_expr *);\n try gfc_check_system_clock (gfc_expr *, gfc_expr *, gfc_expr *);\n@@ -162,6 +165,7 @@ try gfc_check_getcwd_sub (gfc_expr *, gfc_expr *);\n try gfc_check_hostnm_sub (gfc_expr *, gfc_expr *);\n try gfc_check_itime_idate (gfc_expr *);\n try gfc_check_kill_sub (gfc_expr *, gfc_expr *, gfc_expr *);\n+try gfc_check_ltime_gmtime (gfc_expr *, gfc_expr *);\n try gfc_check_perror (gfc_expr *);\n try gfc_check_rename_sub (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_link_sub (gfc_expr *, gfc_expr *, gfc_expr *);\n@@ -293,6 +297,7 @@ gfc_expr *gfc_convert_constant (gfc_expr *, bt, int);\n \n /* Resolution functions.  */\n void gfc_resolve_abs (gfc_expr *, gfc_expr *);\n+void gfc_resolve_access (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_acos (gfc_expr *, gfc_expr *);\n void gfc_resolve_acosh (gfc_expr *, gfc_expr *);\n void gfc_resolve_aimag (gfc_expr *, gfc_expr *);\n@@ -313,6 +318,7 @@ void gfc_resolve_btest (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_ceiling (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_char (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_chdir (gfc_expr *, gfc_expr *);\n+void gfc_resolve_chmod (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_cmplx (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_dcmplx (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_complex (gfc_expr *, gfc_expr *, gfc_expr *);\n@@ -361,6 +367,8 @@ void gfc_resolve_int8 (gfc_expr *, gfc_expr *);\n void gfc_resolve_long (gfc_expr *, gfc_expr *);\n void gfc_resolve_ior (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_isatty (gfc_expr *, gfc_expr *);\n+void gfc_resolve_rshift (gfc_expr *, gfc_expr *, gfc_expr *);\n+void gfc_resolve_lshift (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_ishft (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_ishftc (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_kill (gfc_expr *, gfc_expr *, gfc_expr *);\n@@ -436,6 +444,7 @@ void gfc_resolve_xor (gfc_expr *, gfc_expr *, gfc_expr *);\n /* Intrinsic subroutine resolution.  */\n void gfc_resolve_alarm_sub (gfc_code *);\n void gfc_resolve_chdir_sub (gfc_code *);\n+void gfc_resolve_chmod_sub (gfc_code *);\n void gfc_resolve_cpu_time (gfc_code *);\n void gfc_resolve_ctime_sub (gfc_code *);\n void gfc_resolve_exit (gfc_code *);\n@@ -455,11 +464,13 @@ void gfc_resolve_getlog (gfc_code *);\n void gfc_resolve_get_command (gfc_code *);\n void gfc_resolve_get_command_argument (gfc_code *);\n void gfc_resolve_get_environment_variable (gfc_code *);\n+void gfc_resolve_gmtime (gfc_code *);\n void gfc_resolve_hostnm_sub (gfc_code *);\n void gfc_resolve_idate (gfc_code *);\n void gfc_resolve_itime (gfc_code *);\n-void gfc_resolve_lstat_sub (gfc_code *);\n void gfc_resolve_kill_sub (gfc_code *);\n+void gfc_resolve_lstat_sub (gfc_code *);\n+void gfc_resolve_ltime (gfc_code *);\n void gfc_resolve_mvbits (gfc_code *);\n void gfc_resolve_perror (gfc_code *);\n void gfc_resolve_random_number (gfc_code *);"}, {"sha": "a9a98588c492c99335d8ebaeedb3b6b00c662e91", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 71, "deletions": 2, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=a119fc1ca825952bcf82337a48eeef3645ec4e8d", "patch": "@@ -89,6 +89,16 @@ gfc_resolve_abs (gfc_expr * f, gfc_expr * a)\n }\n \n \n+void\n+gfc_resolve_access (gfc_expr * f, gfc_expr * name ATTRIBUTE_UNUSED,\n+\t            gfc_expr * mode ATTRIBUTE_UNUSED)\n+{\n+  f->ts.type = BT_INTEGER;\n+  f->ts.kind = gfc_c_int_kind;\n+  f->value.function.name = PREFIX(\"access_func\");\n+}\n+\n+\n void\n gfc_resolve_acos (gfc_expr * f, gfc_expr * x)\n {\n@@ -352,6 +362,32 @@ gfc_resolve_chdir_sub (gfc_code * c)\n }\n \n \n+void\n+gfc_resolve_chmod (gfc_expr * f, gfc_expr * name ATTRIBUTE_UNUSED,\n+\t\t   gfc_expr * mode ATTRIBUTE_UNUSED)\n+{\n+  f->ts.type = BT_INTEGER;\n+  f->ts.kind = gfc_c_int_kind;\n+  f->value.function.name = PREFIX(\"chmod_func\");\n+}\n+\n+\n+void\n+gfc_resolve_chmod_sub (gfc_code * c)\n+{\n+  const char *name;\n+  int kind;\n+\n+  if (c->ext.actual->next->next->expr != NULL)\n+    kind = c->ext.actual->next->next->expr->ts.kind;\n+  else\n+    kind = gfc_default_integer_kind;\n+\n+  name = gfc_get_string (PREFIX(\"chmod_i%d_sub\"), kind);\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n+}\n+\n+\n void\n gfc_resolve_cmplx (gfc_expr * f, gfc_expr * x, gfc_expr * y, gfc_expr * kind)\n {\n@@ -918,6 +954,24 @@ gfc_resolve_ishft (gfc_expr * f, gfc_expr * i, gfc_expr * shift)\n }\n \n \n+void\n+gfc_resolve_rshift (gfc_expr * f, gfc_expr * i, gfc_expr * shift)\n+{\n+  f->ts = i->ts;\n+  f->value.function.name =\n+    gfc_get_string (\"__rshift_%d_%d\", i->ts.kind, shift->ts.kind);\n+}\n+\n+\n+void\n+gfc_resolve_lshift (gfc_expr * f, gfc_expr * i, gfc_expr * shift)\n+{\n+  f->ts = i->ts;\n+  f->value.function.name =\n+    gfc_get_string (\"__lshift_%d_%d\", i->ts.kind, shift->ts.kind);\n+}\n+\n+\n void\n gfc_resolve_ishftc (gfc_expr * f, gfc_expr * i, gfc_expr * shift,\n \t\t    gfc_expr * size)\n@@ -2398,7 +2452,7 @@ gfc_resolve_etime_sub (gfc_code * c)\n }\n \n \n-/* G77 compatibility subroutines itime() and idate().  */\n+/* G77 compatibility subroutines itime(), idate(), ltime() and gmtime().  */\n \n void\n gfc_resolve_itime (gfc_code * c)\n@@ -2408,7 +2462,6 @@ gfc_resolve_itime (gfc_code * c)\n \t\t\t\t       gfc_default_integer_kind));\n }\n \n-\n void\n gfc_resolve_idate (gfc_code * c)\n {\n@@ -2417,6 +2470,22 @@ gfc_resolve_idate (gfc_code * c)\n \t\t\t\t       gfc_default_integer_kind));\n }\n \n+void\n+gfc_resolve_ltime (gfc_code * c)\n+{\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol\n+\t\t      (gfc_get_string (PREFIX(\"ltime_i%d\"),\n+\t\t\t\t       gfc_default_integer_kind));\n+}\n+\n+void\n+gfc_resolve_gmtime (gfc_code * c)\n+{\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol\n+\t\t      (gfc_get_string (PREFIX(\"gmtime_i%d\"),\n+\t\t\t\t       gfc_default_integer_kind));\n+}\n+\n \n /* G77 compatibility subroutine second().  */\n "}, {"sha": "cef767d40d6bf5da5ce5713285fb1801ea49fdb9", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=a119fc1ca825952bcf82337a48eeef3645ec4e8d", "patch": "@@ -2110,6 +2110,22 @@ gfc_conv_intrinsic_ibits (gfc_se * se, gfc_expr * expr)\n   se->expr = fold_build2 (BIT_AND_EXPR, type, tmp, mask);\n }\n \n+/* RSHIFT (I, SHIFT) = I >> SHIFT\n+   LSHIFT (I, SHIFT) = I << SHIFT  */\n+static void\n+gfc_conv_intrinsic_rlshift (gfc_se * se, gfc_expr * expr, int right_shift)\n+{\n+  tree arg;\n+  tree arg2;\n+\n+  arg = gfc_conv_intrinsic_function_args (se, expr);\n+  arg2 = TREE_VALUE (TREE_CHAIN (arg));\n+  arg = TREE_VALUE (arg);\n+\n+  se->expr = fold_build2 (right_shift ? RSHIFT_EXPR : LSHIFT_EXPR,\n+\t\t\t  TREE_TYPE (arg), arg, arg2);\n+}\n+\n /* ISHFT (I, SHIFT) = (abs (shift) >= BIT_SIZE (i))\n                         ? 0\n \t \t        : ((shift >= 0) ? i << shift : i >> -shift)\n@@ -3581,6 +3597,14 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       gfc_conv_intrinsic_bitop (se, expr, BIT_IOR_EXPR);\n       break;\n \n+    case GFC_ISYM_LSHIFT:\n+      gfc_conv_intrinsic_rlshift (se, expr, 0);\n+      break;\n+\n+    case GFC_ISYM_RSHIFT:\n+      gfc_conv_intrinsic_rlshift (se, expr, 1);\n+      break;\n+\n     case GFC_ISYM_ISHFT:\n       gfc_conv_intrinsic_ishft (se, expr);\n       break;\n@@ -3716,7 +3740,9 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       gfc_conv_intrinsic_loc (se, expr);\n       break;\n \n+    case GFC_ISYM_ACCESS:\n     case GFC_ISYM_CHDIR:\n+    case GFC_ISYM_CHMOD:\n     case GFC_ISYM_ETIME:\n     case GFC_ISYM_FGET:\n     case GFC_ISYM_FGETC:"}, {"sha": "e9ea27f1b1dc6c30423f0d59d4115b24c088d931", "filename": "gcc/testsuite/gfortran.dg/chmod_1.f90", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ftestsuite%2Fgfortran.dg%2Fchmod_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ftestsuite%2Fgfortran.dg%2Fchmod_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchmod_1.f90?ref=a119fc1ca825952bcf82337a48eeef3645ec4e8d", "patch": "@@ -0,0 +1,34 @@\n+! { dg-do run }\n+! { dg-options \"-std=gnu\" }\n+  implicit none\n+  character(len=*), parameter :: n = \"foobar_file\"\n+  integer :: i\n+\n+  open (10,file=n)\n+  close (10,status=\"delete\")\n+\n+  open (10,file=n)\n+  close (10,status=\"keep\")\n+\n+  if (access(n,\"\") /= 0 .or. access(n,\" \") /= 0 .or. access(n,\"r\") /= 0 .or. &\n+      access(n,\"R\") /= 0 .or. access(n,\"w\") /= 0 .or. access(n,\"W\") /= 0) &\n+    call abort\n+\n+  call chmod (n, \"a+x\", i)\n+  if (i == 0) then\n+    if (access(n,\"x\") /= 0 .or. access(n,\"X\") /= 0) call abort\n+  end if\n+\n+  call chmod (n, \"a-w\", i)\n+  if (i == 0) then\n+    if (access(n,\"w\") == 0 .or. access(n,\"W\") == 0) call abort\n+  end if\n+\n+  open (10,file=n)\n+  close (10,status=\"delete\")\n+\n+  if (access(n,\"\") == 0 .or. access(n,\" \") == 0 .or. access(n,\"r\") == 0 .or. &\n+      access(n,\"R\") == 0 .or. access(n,\"w\") == 0 .or. access(n,\"W\") == 0) &\n+    call abort\n+\n+  end"}, {"sha": "e413fcad8f3c7e76c1c131275081344593172f60", "filename": "gcc/testsuite/gfortran.dg/chmod_2.f90", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ftestsuite%2Fgfortran.dg%2Fchmod_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ftestsuite%2Fgfortran.dg%2Fchmod_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchmod_2.f90?ref=a119fc1ca825952bcf82337a48eeef3645ec4e8d", "patch": "@@ -0,0 +1,34 @@\n+! { dg-do run }\n+! { dg-options \"-std=gnu\" }\n+  implicit none\n+  character(len=*), parameter :: n = \"foobar_file\"\n+  integer :: i\n+\n+  open (10,file=n)\n+  close (10,status=\"delete\")\n+\n+  open (10,file=n)\n+  close (10,status=\"keep\")\n+\n+  if (access(n,\"\") /= 0 .or. access(n,\" \") /= 0 .or. access(n,\"r\") /= 0 .or. &\n+      access(n,\"R\") /= 0 .or. access(n,\"w\") /= 0 .or. access(n,\"W\") /= 0) &\n+    call abort\n+\n+  i = chmod (n, \"a+x\")\n+  if (i == 0) then\n+    if (access(n,\"x\") /= 0 .or. access(n,\"X\") /= 0) call abort\n+  end if\n+\n+  i = chmod (n, \"a-w\")\n+  if (i == 0) then\n+    if (access(n,\"w\") == 0 .or. access(n,\"W\") == 0) call abort\n+  end if\n+\n+  open (10,file=n)\n+  close (10,status=\"delete\")\n+\n+  if (access(n,\"\") == 0 .or. access(n,\" \") == 0 .or. access(n,\"r\") == 0 .or. &\n+      access(n,\"R\") == 0 .or. access(n,\"w\") == 0 .or. access(n,\"W\") == 0) &\n+    call abort\n+\n+  end"}, {"sha": "4ea34eb8cf46fc2a5ec76c5561a9021a10ee8bc8", "filename": "gcc/testsuite/gfortran.dg/chmod_3.f90", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ftestsuite%2Fgfortran.dg%2Fchmod_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ftestsuite%2Fgfortran.dg%2Fchmod_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchmod_3.f90?ref=a119fc1ca825952bcf82337a48eeef3645ec4e8d", "patch": "@@ -0,0 +1,34 @@\n+! { dg-do run }\n+! { dg-options \"-std=gnu -fdefault-integer-8\" }\n+  implicit none\n+  character(len=*), parameter :: n = \"foobar_file\"\n+  integer :: i\n+\n+  open (10,file=n)\n+  close (10,status=\"delete\")\n+\n+  open (10,file=n)\n+  close (10,status=\"keep\")\n+\n+  if (access(n,\"\") /= 0 .or. access(n,\" \") /= 0 .or. access(n,\"r\") /= 0 .or. &\n+      access(n,\"R\") /= 0 .or. access(n,\"w\") /= 0 .or. access(n,\"W\") /= 0) &\n+    call abort\n+\n+  i = chmod (n, \"a+x\")\n+  if (i == 0) then\n+    if (access(n,\"x\") /= 0 .or. access(n,\"X\") /= 0) call abort\n+  end if\n+\n+  i = chmod (n, \"a-w\")\n+  if (i == 0) then\n+    if (access(n,\"w\") == 0 .or. access(n,\"W\") == 0) call abort\n+  end if\n+\n+  open (10,file=n)\n+  close (10,status=\"delete\")\n+\n+  if (access(n,\"\") == 0 .or. access(n,\" \") == 0 .or. access(n,\"r\") == 0 .or. &\n+      access(n,\"R\") == 0 .or. access(n,\"w\") == 0 .or. access(n,\"W\") == 0) &\n+    call abort\n+\n+  end"}, {"sha": "7feed2962ea7af2358e2572aec92b7d1b4a3b554", "filename": "gcc/testsuite/gfortran.dg/lrshift_1.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ftestsuite%2Fgfortran.dg%2Flrshift_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ftestsuite%2Fgfortran.dg%2Flrshift_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flrshift_1.f90?ref=a119fc1ca825952bcf82337a48eeef3645ec4e8d", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do run }\n+! { dg-options \"-std=gnu -w\" }\n+! { dg-additional-sources lrshift_1.c }\n+program test_rshift_lshift\n+  implicit none\n+  integer :: i(15), j, n\n+  integer, external :: c_lshift, c_rshift\n+\n+  i = (/ -huge(i), -huge(i)/2, -129, -128, -127, -2, -1, 0, &\n+         1, 2, 127, 128, 129, huge(i)/2, huge(i) /)\n+\n+  do n = 1, size(i)\n+    do j = -30, 30\n+      if (lshift(i(n),j) /= c_lshift(i(n),j)) call abort\n+      if (rshift(i(n),j) /= c_rshift(i(n),j)) call abort\n+    end do\n+  end do\n+end program test_rshift_lshift"}, {"sha": "9babbaf1e5d8a60e99bcda25129df215ccf34e97", "filename": "gcc/testsuite/gfortran.dg/ltime_gmtime_1.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ftestsuite%2Fgfortran.dg%2Fltime_gmtime_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ftestsuite%2Fgfortran.dg%2Fltime_gmtime_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fltime_gmtime_1.f90?ref=a119fc1ca825952bcf82337a48eeef3645ec4e8d", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do run }\n+! { dg-options \"-std=gnu\" }\n+  integer :: x(9), y(9), t\n+\n+  t = time()\n+  call ltime(t,x)\n+  call gmtime(t,y)\n+  if (x(1) /= y(1) .or. x(2) /= y(2)) call abort\n+  end"}, {"sha": "870f011692e5d4bf35fe5dce0789dbc315facf0f", "filename": "gcc/testsuite/gfortran.dg/ltime_gmtime_2.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ftestsuite%2Fgfortran.dg%2Fltime_gmtime_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a119fc1ca825952bcf82337a48eeef3645ec4e8d/gcc%2Ftestsuite%2Fgfortran.dg%2Fltime_gmtime_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fltime_gmtime_2.f90?ref=a119fc1ca825952bcf82337a48eeef3645ec4e8d", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do run }\n+! { dg-options \"-fdefault-integer-8 -std=gnu\" }\n+  integer :: x(9), y(9), t\n+\n+  t = time()\n+  call ltime(t,x)\n+  call gmtime(t,y)\n+  if (x(1) /= y(1) .or. x(2) /= y(2)) call abort\n+  end"}, {"sha": "cae0f8a50b183331b87eddc7679ec65f62241adb", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a119fc1ca825952bcf82337a48eeef3645ec4e8d/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a119fc1ca825952bcf82337a48eeef3645ec4e8d/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=a119fc1ca825952bcf82337a48eeef3645ec4e8d", "patch": "@@ -41,10 +41,12 @@ io/io.h\n gfor_helper_src= \\\n intrinsics/associated.c \\\n intrinsics/abort.c \\\n+intrinsics/access.c \\\n intrinsics/args.c \\\n intrinsics/bessel.c \\\n intrinsics/c99_functions.c \\\n intrinsics/chdir.c \\\n+intrinsics/chmod.c \\\n intrinsics/clock.c \\\n intrinsics/cpu_time.c \\\n intrinsics/cshift0.c \\"}, {"sha": "1a0665e0ee4716bfb2e529d55519a6a024445dc1", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a119fc1ca825952bcf82337a48eeef3645ec4e8d/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a119fc1ca825952bcf82337a48eeef3645ec4e8d/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=a119fc1ca825952bcf82337a48eeef3645ec4e8d", "patch": "@@ -161,9 +161,9 @@ am__objects_28 = $(am__objects_2) $(am__objects_3) $(am__objects_4) \\\n am__objects_29 = close.lo file_pos.lo format.lo inquire.lo \\\n \tlist_read.lo lock.lo open.lo read.lo size_from_kind.lo \\\n \ttransfer.lo unit.lo unix.lo write.lo\n-am__objects_30 = associated.lo abort.lo args.lo bessel.lo \\\n-\tc99_functions.lo chdir.lo clock.lo cpu_time.lo cshift0.lo \\\n-\tctime.lo date_and_time.lo env.lo erf.lo eoshift0.lo \\\n+am__objects_30 = associated.lo abort.lo access.lo args.lo bessel.lo \\\n+\tc99_functions.lo chdir.lo chmod.lo clock.lo cpu_time.lo \\\n+\tcshift0.lo ctime.lo date_and_time.lo env.lo erf.lo eoshift0.lo \\\n \teoshift2.lo etime.lo exit.lo fget.lo flush.lo fnum.lo ftell.lo \\\n \tgerror.lo getcwd.lo getlog.lo getXid.lo hyper.lo hostnm.lo \\\n \tkill.lo ierrno.lo ishftc.lo link.lo malloc.lo mvbits.lo \\\n@@ -385,10 +385,12 @@ io/io.h\n gfor_helper_src = \\\n intrinsics/associated.c \\\n intrinsics/abort.c \\\n+intrinsics/access.c \\\n intrinsics/args.c \\\n intrinsics/bessel.c \\\n intrinsics/c99_functions.c \\\n intrinsics/chdir.c \\\n+intrinsics/chmod.c \\\n intrinsics/clock.c \\\n intrinsics/cpu_time.c \\\n intrinsics/cshift0.c \\\n@@ -2204,6 +2206,9 @@ associated.lo: intrinsics/associated.c\n abort.lo: intrinsics/abort.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o abort.lo `test -f 'intrinsics/abort.c' || echo '$(srcdir)/'`intrinsics/abort.c\n \n+access.lo: intrinsics/access.c\n+\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o access.lo `test -f 'intrinsics/access.c' || echo '$(srcdir)/'`intrinsics/access.c\n+\n args.lo: intrinsics/args.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o args.lo `test -f 'intrinsics/args.c' || echo '$(srcdir)/'`intrinsics/args.c\n \n@@ -2216,6 +2221,9 @@ c99_functions.lo: intrinsics/c99_functions.c\n chdir.lo: intrinsics/chdir.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o chdir.lo `test -f 'intrinsics/chdir.c' || echo '$(srcdir)/'`intrinsics/chdir.c\n \n+chmod.lo: intrinsics/chmod.c\n+\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o chmod.lo `test -f 'intrinsics/chmod.c' || echo '$(srcdir)/'`intrinsics/chmod.c\n+\n clock.lo: intrinsics/clock.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o clock.lo `test -f 'intrinsics/clock.c' || echo '$(srcdir)/'`intrinsics/clock.c\n "}, {"sha": "11f8e72e1bc62a6e9a8ef1c8803cedf5d711ec84", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a119fc1ca825952bcf82337a48eeef3645ec4e8d/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a119fc1ca825952bcf82337a48eeef3645ec4e8d/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=a119fc1ca825952bcf82337a48eeef3645ec4e8d", "patch": "@@ -6,6 +6,9 @@\n /* Define to 0 if the target shouldn't use #pragma weak */\n #undef GTHREAD_USE_WEAK\n \n+/* Define to 1 if you have the `access' function. */\n+#undef HAVE_ACCESS\n+\n /* libm includes acos */\n #undef HAVE_ACOS\n \n@@ -279,6 +282,9 @@\n /* libm includes erfl */\n #undef HAVE_ERFL\n \n+/* Define to 1 if you have the `execl' function. */\n+#undef HAVE_EXECL\n+\n /* libm includes exp */\n #undef HAVE_EXP\n \n@@ -321,6 +327,9 @@\n /* libm includes floorl */\n #undef HAVE_FLOORL\n \n+/* Define to 1 if you have the `fork' function. */\n+#undef HAVE_FORK\n+\n /* Define if you have fpsetmask. */\n #undef HAVE_FPSETMASK\n \n@@ -582,6 +591,9 @@\n /* Define to 1 if you have the <sys/types.h> header file. */\n #undef HAVE_SYS_TYPES_H\n \n+/* Define to 1 if you have the <sys/wait.h> header file. */\n+#undef HAVE_SYS_WAIT_H\n+\n /* libm includes tan */\n #undef HAVE_TAN\n \n@@ -630,6 +642,9 @@\n /* Define if target can unlink open files. */\n #undef HAVE_UNLINK_OPEN_FILE\n \n+/* Define to 1 if you have the `wait' function. */\n+#undef HAVE_WAIT\n+\n /* Define if target has a reliable stat. */\n #undef HAVE_WORKING_STAT\n "}, {"sha": "7af0b3209e157fd6ae1e33ad3d40fcb2e1025425", "filename": "libgfortran/configure", "status": "modified", "additions": 122, "deletions": 61, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a119fc1ca825952bcf82337a48eeef3645ec4e8d/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a119fc1ca825952bcf82337a48eeef3645ec4e8d/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=a119fc1ca825952bcf82337a48eeef3645ec4e8d", "patch": "@@ -6114,7 +6114,8 @@ done\n \n \n \n-for ac_header in sys/types.h sys/stat.h floatingpoint.h ieeefp.h\n+\n+for ac_header in sys/types.h sys/stat.h sys/wait.h floatingpoint.h ieeefp.h\n do\n as_ac_Header=`echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n@@ -6897,9 +6898,8 @@ fi\n   break\n done\n if test \"$acx_cv_header_stdint\" = stddef.h; then\n-  acx_cv_header_stdint_kind=\"(lacks uintmax_t)\"\n+  acx_cv_header_stdint_kind=\"(lacks uintptr_t)\"\n   for i in stdint.h $inttype_headers; do\n-    unset ac_cv_type_uintptr_t\n     unset ac_cv_type_uint32_t\n     unset ac_cv_type_uint64_t\n     echo $ECHO_N \"looking for an incomplete stdint.h in $i, $ECHO_C\" >&6\n@@ -7025,65 +7025,11 @@ rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n fi\n echo \"$as_me:$LINENO: result: $ac_cv_type_uint64_t\" >&5\n echo \"${ECHO_T}$ac_cv_type_uint64_t\" >&6\n-\n-    echo \"$as_me:$LINENO: checking for uintptr_t\" >&5\n-echo $ECHO_N \"checking for uintptr_t... $ECHO_C\" >&6\n-if test \"${ac_cv_type_uintptr_t+set}\" = set; then\n-  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n-else\n-  cat >conftest.$ac_ext <<_ACEOF\n-/* confdefs.h.  */\n-_ACEOF\n-cat confdefs.h >>conftest.$ac_ext\n-cat >>conftest.$ac_ext <<_ACEOF\n-/* end confdefs.h.  */\n-#include <sys/types.h>\n-#include <$i>\n-\n-int\n-main ()\n-{\n-if ((uintptr_t *) 0)\n-  return 0;\n-if (sizeof (uintptr_t))\n-  return 0;\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-rm -f conftest.$ac_objext\n-if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n-  (eval $ac_compile) 2>conftest.er1\n-  ac_status=$?\n-  grep -v '^ *+' conftest.er1 >conftest.err\n-  rm -f conftest.er1\n-  cat conftest.err >&5\n-  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n-  (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\n-\t\t\t || test ! -s conftest.err'\n-  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n-  (exit $ac_status); }; } &&\n-\t { ac_try='test -s conftest.$ac_objext'\n-  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n-  (exit $ac_status); }; }; then\n-  ac_cv_type_uintptr_t=yes\n+if test $ac_cv_type_uint64_t = yes; then\n+  :\n else\n-  echo \"$as_me: failed program was:\" >&5\n-sed 's/^/| /' conftest.$ac_ext >&5\n-\n-ac_cv_type_uintptr_t=no\n-fi\n-rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+  acx_cv_header_stdint_kind=\"(lacks uintptr_t and uint64_t)\"\n fi\n-echo \"$as_me:$LINENO: result: $ac_cv_type_uintptr_t\" >&5\n-echo \"${ECHO_T}$ac_cv_type_uintptr_t\" >&6\n \n     break\n   done\n@@ -7216,6 +7162,11 @@ rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n fi\n echo \"$as_me:$LINENO: result: $ac_cv_type_u_int64_t\" >&5\n echo \"${ECHO_T}$ac_cv_type_u_int64_t\" >&6\n+if test $ac_cv_type_u_int64_t = yes; then\n+  :\n+else\n+  acx_cv_header_stdint_kind=\"(u_intXX_t style, lacks u_int64_t)\"\n+fi\n \n     break\n   done\n@@ -9976,7 +9927,117 @@ done\n \n \n \n-for ac_func in sleep time ttyname signal alarm ctime clock\n+\n+\n+\n+for ac_func in sleep time ttyname signal alarm ctime clock access fork execl\n+do\n+as_ac_var=`echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n+echo \"$as_me:$LINENO: checking for $ac_func\" >&5\n+echo $ECHO_N \"checking for $ac_func... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_var+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+/* Define $ac_func to an innocuous variant, in case <limits.h> declares $ac_func.\n+   For example, HP-UX 11i <limits.h> declares gettimeofday.  */\n+#define $ac_func innocuous_$ac_func\n+\n+/* System header to define __stub macros and hopefully few prototypes,\n+    which can conflict with char $ac_func (); below.\n+    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since\n+    <limits.h> exists even on freestanding compilers.  */\n+\n+#ifdef __STDC__\n+# include <limits.h>\n+#else\n+# include <assert.h>\n+#endif\n+\n+#undef $ac_func\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+{\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char $ac_func ();\n+/* The GNU C library defines this for functions which it implements\n+    to always fail with ENOSYS.  Some functions are actually named\n+    something starting with __ and the normal name is an alias.  */\n+#if defined (__stub_$ac_func) || defined (__stub___$ac_func)\n+choke me\n+#else\n+char (*f) () = $ac_func;\n+#endif\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+int\n+main ()\n+{\n+return f != $ac_func;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  eval \"$as_ac_var=yes\"\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+eval \"$as_ac_var=no\"\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_var'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_var'}'`\" >&6\n+if test `eval echo '${'$as_ac_var'}'` = yes; then\n+  cat >>confdefs.h <<_ACEOF\n+#define `echo \"HAVE_$ac_func\" | $as_tr_cpp` 1\n+_ACEOF\n+\n+fi\n+done\n+\n+\n+for ac_func in wait\n do\n as_ac_var=`echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n echo \"$as_me:$LINENO: checking for $ac_func\" >&5"}, {"sha": "5e8efd49b355f84d19c014ab8a29c81b6e4c5deb", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a119fc1ca825952bcf82337a48eeef3645ec4e8d/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a119fc1ca825952bcf82337a48eeef3645ec4e8d/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=a119fc1ca825952bcf82337a48eeef3645ec4e8d", "patch": "@@ -159,7 +159,7 @@ AC_TYPE_OFF_T\n AC_STDC_HEADERS\n AC_HAVE_HEADERS(stdlib.h stdio.h string.h stddef.h math.h unistd.h signal.h)\n AC_CHECK_HEADERS(time.h sys/params.h sys/time.h sys/times.h sys/resource.h)\n-AC_CHECK_HEADERS(sys/types.h sys/stat.h floatingpoint.h ieeefp.h)\n+AC_CHECK_HEADERS(sys/types.h sys/stat.h sys/wait.h floatingpoint.h ieeefp.h)\n AC_CHECK_HEADERS(fenv.h fptrap.h float.h)\n AC_CHECK_HEADER([complex.h],[AC_DEFINE([HAVE_COMPLEX_H], [1], [complex.h exists])])\n GCC_HEADER_STDINT(gstdint.h)\n@@ -171,7 +171,8 @@ AC_CHECK_MEMBERS([struct stat.st_rdev])\n # Check for library functions.\n AC_CHECK_FUNCS(getrusage times mkstemp strtof strtold snprintf ftruncate chsize)\n AC_CHECK_FUNCS(chdir strerror getlogin gethostname kill link symlink perror)\n-AC_CHECK_FUNCS(sleep time ttyname signal alarm ctime clock)\n+AC_CHECK_FUNCS(sleep time ttyname signal alarm ctime clock access fork execl)\n+AC_CHECK_FUNCS(wait)\n \n # Check libc for getgid, getpid, getuid\n AC_CHECK_LIB([c],[getgid],[AC_DEFINE([HAVE_GETGID],[1],[libc includes getgid])])"}, {"sha": "b0af0475f6260fdd265bbfe62050e651b0a10fc5", "filename": "libgfortran/intrinsics/access.c", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a119fc1ca825952bcf82337a48eeef3645ec4e8d/libgfortran%2Fintrinsics%2Faccess.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a119fc1ca825952bcf82337a48eeef3645ec4e8d/libgfortran%2Fintrinsics%2Faccess.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Faccess.c?ref=a119fc1ca825952bcf82337a48eeef3645ec4e8d", "patch": "@@ -0,0 +1,99 @@\n+/* Implementation of the ACCESS intrinsic.\n+   Copyright (C) 2006 Free Software Foundation, Inc.\n+   Contributed by Fran\u00e7ois-Xavier Coudert <coudert@clipper.ens.fr>\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+#include \"config.h\"\n+#include \"libgfortran.h\"\n+\n+#include <errno.h>\n+\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#endif\n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+\n+/* INTEGER FUNCTION ACCESS(NAME, MODE)\n+   CHARACTER(len=*), INTENT(IN) :: NAME, MODE  */\n+\n+#ifdef HAVE_ACCESS\n+extern int access_func (char *, char *, gfc_charlen_type, gfc_charlen_type);\n+export_proto(access_func);\n+\n+int\n+access_func (char *name, char *mode, gfc_charlen_type name_len,\n+\t     gfc_charlen_type mode_len)\n+{\n+  char * file;\n+  gfc_charlen_type i;\n+  int m;\n+\n+  /* Parse the MODE string.  */\n+  m = F_OK;\n+  for (i = 0; i < mode_len && mode[i]; i++)\n+    switch (mode[i])\n+      {\n+\tcase ' ':\n+\t  break;\n+\n+\tcase 'r':\n+\tcase 'R':\n+\t  m |= R_OK;\n+\t  break;\n+\n+\tcase 'w':\n+\tcase 'W':\n+\t  m |= W_OK;\n+\t  break;\n+\n+\tcase 'x':\n+\tcase 'X':\n+\t  m |= X_OK;\n+\t  break;\n+\n+\tdefault:\n+\t  return -1;\n+\t  break;\n+      }\n+\n+  /* Trim trailing spaces from NAME argument.  */\n+  while (name_len > 0 && name[name_len - 1] == ' ')\n+    name_len--;\n+\n+  /* Make a null terminated copy of the string.  */\n+  file = gfc_alloca (name_len + 1);\n+  memcpy (file, name, name_len);\n+  file[name_len] = '\\0';\n+\n+  /* And make the call to access().  */\n+  return (access (file, m) == 0 ? 0 : errno);\n+}\n+export(access_func);\n+#endif"}, {"sha": "abc5b99a1a205260d50c89a3ce1249ccde7aef6e", "filename": "libgfortran/intrinsics/chmod.c", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a119fc1ca825952bcf82337a48eeef3645ec4e8d/libgfortran%2Fintrinsics%2Fchmod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a119fc1ca825952bcf82337a48eeef3645ec4e8d/libgfortran%2Fintrinsics%2Fchmod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fchmod.c?ref=a119fc1ca825952bcf82337a48eeef3645ec4e8d", "patch": "@@ -0,0 +1,131 @@\n+/* Implementation of the CHMOD intrinsic.\n+   Copyright (C) 2006 Free Software Foundation, Inc.\n+   Contributed by Fran\u00e7ois-Xavier Coudert <coudert@clipper.ens.fr>\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+#include \"config.h\"\n+#include \"libgfortran.h\"\n+\n+#include <errno.h>\n+\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#endif\n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+#ifdef HAVE_SYS_TYPES_H\n+#include <sys/types.h>\n+#endif\n+#ifdef  HAVE_SYS_WAIT_H\n+#include <sys/wait.h>\n+#endif\n+\n+/* INTEGER FUNCTION ACCESS(NAME, MODE)\n+   CHARACTER(len=*), INTENT(IN) :: NAME, MODE  */\n+\n+#if defined(HAVE_FORK) && defined(HAVE_EXECL) && defined(HAVE_WAIT)\n+\n+extern int chmod_func (char *, char *, gfc_charlen_type, gfc_charlen_type);\n+export_proto(chmod_func);\n+\n+int\n+chmod_func (char *name, char *mode, gfc_charlen_type name_len,\n+\t    gfc_charlen_type mode_len)\n+{\n+  char * file, * m;\n+  pid_t pid;\n+  int status;\n+\n+  /* Trim trailing spaces.  */\n+  while (name_len > 0 && name[name_len - 1] == ' ')\n+    name_len--;\n+  while (mode_len > 0 && mode[mode_len - 1] == ' ')\n+    mode_len--;\n+\n+  /* Make a null terminated copy of the strings.  */\n+  file = gfc_alloca (name_len + 1);\n+  memcpy (file, name, name_len);\n+  file[name_len] = '\\0';\n+\n+  m = gfc_alloca (mode_len + 1);\n+  memcpy (m, mode, mode_len);\n+  m[mode_len]= '\\0';\n+\n+  /* Execute /bin/chmod.  */\n+  if ((pid = fork()) < 0)\n+    return errno;\n+  if (pid == 0)\n+    {\n+      /* Child process.  */\n+      execl (\"/bin/chmod\", \"chmod\", m, file, (char *) NULL);\n+      return errno;\n+    }\n+  else\n+    wait (&status);\n+\n+  if (WIFEXITED(status))\n+    return WEXITSTATUS(status);\n+  else\n+    return -1;\n+}\n+\n+\n+\n+extern void chmod_i4_sub (char *, char *, GFC_INTEGER_4 *,\n+\t\t\t  gfc_charlen_type, gfc_charlen_type);\n+export_proto(chmod_i4_sub);\n+\n+void\n+chmod_i4_sub (char *name, char *mode, GFC_INTEGER_4 * status,\n+\t      gfc_charlen_type name_len, gfc_charlen_type mode_len)\n+{\n+  int val;\n+\n+  val = chmod_func (name, mode, name_len, mode_len);\n+  if (status)\n+    *status = val;\n+}\n+\n+\n+extern void chmod_i8_sub (char *, char *, GFC_INTEGER_8 *,\n+\t\t\t  gfc_charlen_type, gfc_charlen_type);\n+export_proto(chmod_i8_sub);\n+\n+void\n+chmod_i8_sub (char *name, char *mode, GFC_INTEGER_8 * status,\n+\t      gfc_charlen_type name_len, gfc_charlen_type mode_len)\n+{\n+  int val;\n+\n+  val = chmod_func (name, mode, name_len, mode_len);\n+  if (status)\n+    *status = val;\n+}\n+\n+#endif"}, {"sha": "6a4131f7ddc698a2fbc792e89c3c955849cf879f", "filename": "libgfortran/intrinsics/date_and_time.c", "status": "modified", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a119fc1ca825952bcf82337a48eeef3645ec4e8d/libgfortran%2Fintrinsics%2Fdate_and_time.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a119fc1ca825952bcf82337a48eeef3645ec4e8d/libgfortran%2Fintrinsics%2Fdate_and_time.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fdate_and_time.c?ref=a119fc1ca825952bcf82337a48eeef3645ec4e8d", "patch": "@@ -521,3 +521,188 @@ idate_i8 (gfc_array_i8 *__values)\n   for (i = 0; i < 3; i++, vptr += delta)\n     *vptr = x[i];\n }\n+\n+\n+\n+/* GMTIME(STIME, TARRAY) - Non-standard\n+\n+   Description: Given a system time value STime, fills TArray with values\n+   extracted from it appropriate to the GMT time zone using gmtime(3).\n+\n+   The array elements are as follows:\n+\n+      1. Seconds after the minute, range 0-59 or 0-61 to allow for leap seconds\n+      2. Minutes after the hour, range 0-59\n+      3. Hours past midnight, range 0-23\n+      4. Day of month, range 0-31\n+      5. Number of months since January, range 0-11\n+      6. Years since 1900\n+      7. Number of days since Sunday, range 0-6\n+      8. Days since January 1\n+      9. Daylight savings indicator: positive if daylight savings is in effect,\n+         zero if not, and negative if the information isn't available.  */\n+\n+static void\n+gmtime_0 (const time_t * t, int x[9])\n+{\n+  struct tm lt;\n+\n+  lt = *gmtime (t);\n+  x[0] = lt.tm_sec;\n+  x[1] = lt.tm_min;\n+  x[2] = lt.tm_hour;\n+  x[3] = lt.tm_mday;\n+  x[4] = lt.tm_mon;\n+  x[5] = lt.tm_year;\n+  x[6] = lt.tm_wday;\n+  x[7] = lt.tm_yday;\n+  x[8] = lt.tm_isdst;\n+}\n+\n+extern void gmtime_i4 (GFC_INTEGER_4 *, gfc_array_i4 *);\n+export_proto(gmtime_i4);\n+\n+void\n+gmtime_i4 (GFC_INTEGER_4 * t, gfc_array_i4 * tarray)\n+{\n+  int x[9], i;\n+  size_t len, delta;\n+  GFC_INTEGER_4 *vptr;\n+  time_t tt;\n+  \n+  /* Call helper function.  */\n+  tt = (time_t) *t;\n+  gmtime_0(&tt, x);\n+\n+  /* Copy the values into the array.  */\n+  len = tarray->dim[0].ubound + 1 - tarray->dim[0].lbound;\n+  assert (len >= 9);\n+  delta = tarray->dim[0].stride;\n+  if (delta == 0)\n+    delta = 1;\n+\n+  vptr = tarray->data;\n+  for (i = 0; i < 9; i++, vptr += delta)\n+    *vptr = x[i];\n+}\n+\n+extern void gmtime_i8 (GFC_INTEGER_8 *, gfc_array_i8 *);\n+export_proto(gmtime_i8);\n+\n+void\n+gmtime_i8 (GFC_INTEGER_8 * t, gfc_array_i8 * tarray)\n+{\n+  int x[9], i;\n+  size_t len, delta;\n+  GFC_INTEGER_8 *vptr;\n+  time_t tt;\n+  \n+  /* Call helper function.  */\n+  tt = (time_t) *t;\n+  gmtime_0(&tt, x);\n+\n+  /* Copy the values into the array.  */\n+  len = tarray->dim[0].ubound + 1 - tarray->dim[0].lbound;\n+  assert (len >= 9);\n+  delta = tarray->dim[0].stride;\n+  if (delta == 0)\n+    delta = 1;\n+\n+  vptr = tarray->data;\n+  for (i = 0; i < 9; i++, vptr += delta)\n+    *vptr = x[i];\n+}\n+\n+\n+\n+\n+/* LTIME(STIME, TARRAY) - Non-standard\n+\n+   Description: Given a system time value STime, fills TArray with values\n+   extracted from it appropriate to the local time zone using localtime(3).\n+\n+   The array elements are as follows:\n+\n+      1. Seconds after the minute, range 0-59 or 0-61 to allow for leap seconds\n+      2. Minutes after the hour, range 0-59\n+      3. Hours past midnight, range 0-23\n+      4. Day of month, range 0-31\n+      5. Number of months since January, range 0-11\n+      6. Years since 1900\n+      7. Number of days since Sunday, range 0-6\n+      8. Days since January 1\n+      9. Daylight savings indicator: positive if daylight savings is in effect,\n+         zero if not, and negative if the information isn't available.  */\n+\n+static void\n+ltime_0 (const time_t * t, int x[9])\n+{\n+  struct tm lt;\n+\n+  lt = *localtime (t);\n+  x[0] = lt.tm_sec;\n+  x[1] = lt.tm_min;\n+  x[2] = lt.tm_hour;\n+  x[3] = lt.tm_mday;\n+  x[4] = lt.tm_mon;\n+  x[5] = lt.tm_year;\n+  x[6] = lt.tm_wday;\n+  x[7] = lt.tm_yday;\n+  x[8] = lt.tm_isdst;\n+}\n+\n+extern void ltime_i4 (GFC_INTEGER_4 *, gfc_array_i4 *);\n+export_proto(ltime_i4);\n+\n+void\n+ltime_i4 (GFC_INTEGER_4 * t, gfc_array_i4 * tarray)\n+{\n+  int x[9], i;\n+  size_t len, delta;\n+  GFC_INTEGER_4 *vptr;\n+  time_t tt;\n+  \n+  /* Call helper function.  */\n+  tt = (time_t) *t;\n+  ltime_0(&tt, x);\n+\n+  /* Copy the values into the array.  */\n+  len = tarray->dim[0].ubound + 1 - tarray->dim[0].lbound;\n+  assert (len >= 9);\n+  delta = tarray->dim[0].stride;\n+  if (delta == 0)\n+    delta = 1;\n+\n+  vptr = tarray->data;\n+  for (i = 0; i < 9; i++, vptr += delta)\n+    *vptr = x[i];\n+}\n+\n+extern void ltime_i8 (GFC_INTEGER_8 *, gfc_array_i8 *);\n+export_proto(ltime_i8);\n+\n+void\n+ltime_i8 (GFC_INTEGER_8 * t, gfc_array_i8 * tarray)\n+{\n+  int x[9], i;\n+  size_t len, delta;\n+  GFC_INTEGER_8 *vptr;\n+  time_t tt;\n+  \n+  /* Call helper function.  */\n+  tt = (time_t) * t;\n+  ltime_0(&tt, x);\n+\n+  /* Copy the values into the array.  */\n+  len = tarray->dim[0].ubound + 1 - tarray->dim[0].lbound;\n+  assert (len >= 9);\n+  delta = tarray->dim[0].stride;\n+  if (delta == 0)\n+    delta = 1;\n+\n+  vptr = tarray->data;\n+  for (i = 0; i < 9; i++, vptr += delta)\n+    *vptr = x[i];\n+}\n+\n+"}]}