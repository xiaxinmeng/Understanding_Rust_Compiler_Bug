{"sha": "cf74e7b57bc2e94fdd752d824fa221d1d529fad8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y3NGU3YjU3YmMyZTk0ZmRkNzUyZDgyNGZhMjIxZDFkNTI5ZmFkOA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-19T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-19T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "18bbe99a0e0937f19abefe83adf50da33702f0e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18bbe99a0e0937f19abefe83adf50da33702f0e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf74e7b57bc2e94fdd752d824fa221d1d529fad8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf74e7b57bc2e94fdd752d824fa221d1d529fad8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf74e7b57bc2e94fdd752d824fa221d1d529fad8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf74e7b57bc2e94fdd752d824fa221d1d529fad8/comments", "author": null, "committer": null, "parents": [{"sha": "e9d8fcabd032b873bf3fe14ae8afd8970827c0cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9d8fcabd032b873bf3fe14ae8afd8970827c0cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9d8fcabd032b873bf3fe14ae8afd8970827c0cb"}], "stats": {"total": 450, "additions": 449, "deletions": 1}, "files": [{"sha": "5de7cf2b8f46c98bb4e6e4e7fa1f61b46b5f25c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 282, "deletions": 0, "changes": 282, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf74e7b57bc2e94fdd752d824fa221d1d529fad8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf74e7b57bc2e94fdd752d824fa221d1d529fad8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf74e7b57bc2e94fdd752d824fa221d1d529fad8", "patch": "@@ -1,3 +1,285 @@\n+2021-09-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree.h (OMP_CLAUSE_ORDER_UNCONSTRAINED): Define.\n+\t* tree-pretty-print.c (dump_omp_clause): Print unconstrained:\n+\tfor OMP_CLAUSE_ORDER_UNCONSTRAINED.\n+\n+2021-09-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/i386-features.c (remove_partial_avx_dependency):\n+\tRestrict TARGET_USE_VECTOR_FP_CONVERTS and\n+\tTARGET_USE_VECTOR_CONVERTS to conversion instructions only.\n+\n+2021-09-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gimplify.c (omp_default_clause): For C/C++ default({,first}private),\n+\tif file/namespace scope variable doesn't have predetermined sharing,\n+\ttreat it as if there was default(none).\n+\n+2021-09-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h (_mm_fmadd_sh):\n+\tNew intrinsic.\n+\t(_mm_mask_fmadd_sh): Likewise.\n+\t(_mm_mask3_fmadd_sh): Likewise.\n+\t(_mm_maskz_fmadd_sh): Likewise.\n+\t(_mm_fmadd_round_sh): Likewise.\n+\t(_mm_mask_fmadd_round_sh): Likewise.\n+\t(_mm_mask3_fmadd_round_sh): Likewise.\n+\t(_mm_maskz_fmadd_round_sh): Likewise.\n+\t(_mm_fnmadd_sh): Likewise.\n+\t(_mm_mask_fnmadd_sh): Likewise.\n+\t(_mm_mask3_fnmadd_sh): Likewise.\n+\t(_mm_maskz_fnmadd_sh): Likewise.\n+\t(_mm_fnmadd_round_sh): Likewise.\n+\t(_mm_mask_fnmadd_round_sh): Likewise.\n+\t(_mm_mask3_fnmadd_round_sh): Likewise.\n+\t(_mm_maskz_fnmadd_round_sh): Likewise.\n+\t(_mm_fmsub_sh): Likewise.\n+\t(_mm_mask_fmsub_sh): Likewise.\n+\t(_mm_mask3_fmsub_sh): Likewise.\n+\t(_mm_maskz_fmsub_sh): Likewise.\n+\t(_mm_fmsub_round_sh): Likewise.\n+\t(_mm_mask_fmsub_round_sh): Likewise.\n+\t(_mm_mask3_fmsub_round_sh): Likewise.\n+\t(_mm_maskz_fmsub_round_sh): Likewise.\n+\t(_mm_fnmsub_sh): Likewise.\n+\t(_mm_mask_fnmsub_sh): Likewise.\n+\t(_mm_mask3_fnmsub_sh): Likewise.\n+\t(_mm_maskz_fnmsub_sh): Likewise.\n+\t(_mm_fnmsub_round_sh): Likewise.\n+\t(_mm_mask_fnmsub_round_sh): Likewise.\n+\t(_mm_mask3_fnmsub_round_sh): Likewise.\n+\t(_mm_maskz_fnmsub_round_sh): Likewise.\n+\t* config/i386/i386-builtin-types.def\n+\t(V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT): New builtin type.\n+\t* config/i386/i386-builtin.def: Add new builtins.\n+\t* config/i386/i386-expand.c: Handle new builtin type.\n+\t* config/i386/sse.md (fmai_vmfmadd_<mode><round_name>):\n+\tAjdust to support FP16.\n+\t(fmai_vmfmsub_<mode><round_name>): Ditto.\n+\t(fmai_vmfnmadd_<mode><round_name>): Ditto.\n+\t(fmai_vmfnmsub_<mode><round_name>): Ditto.\n+\t(*fmai_fmadd_<mode>): Ditto.\n+\t(*fmai_fmsub_<mode>): Ditto.\n+\t(*fmai_fnmadd_<mode><round_name>): Ditto.\n+\t(*fmai_fnmsub_<mode><round_name>): Ditto.\n+\t(avx512f_vmfmadd_<mode>_mask<round_name>): Ditto.\n+\t(avx512f_vmfmadd_<mode>_mask3<round_name>): Ditto.\n+\t(avx512f_vmfmadd_<mode>_maskz<round_expand_name>): Ditto.\n+\t(avx512f_vmfmadd_<mode>_maskz_1<round_name>): Ditto.\n+\t(*avx512f_vmfmsub_<mode>_mask<round_name>): Ditto.\n+\t(avx512f_vmfmsub_<mode>_mask3<round_name>): Ditto.\n+\t(*avx512f_vmfmsub_<mode>_maskz_1<round_name>): Ditto.\n+\t(*avx512f_vmfnmsub_<mode>_mask<round_name>): Ditto.\n+\t(*avx512f_vmfnmsub_<mode>_mask3<round_name>): Ditto.\n+\t(*avx512f_vmfnmsub_<mode>_mask<round_name>): Ditto.\n+\t(*avx512f_vmfnmadd_<mode>_mask<round_name>): Renamed to ...\n+\t(avx512f_vmfnmadd_<mode>_mask<round_name>) ... this, and\n+\tadjust to support FP16.\n+\t(avx512f_vmfnmadd_<mode>_mask3<round_name>): Ditto.\n+\t(avx512f_vmfnmadd_<mode>_maskz_1<round_name>): Ditto.\n+\t(avx512f_vmfnmadd_<mode>_maskz<round_expand_name>): New\n+\texpander.\n+\n+2021-09-18  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* config/i386/sse.md (avx512fmaskmodelower): Extend to support\n+\tHF modes.\n+\t(maskload<mode><avx512fmaskmodelower>): Ditto.\n+\t(maskstore<mode><avx512fmaskmodelower>): Ditto.\n+\n+2021-09-18  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* config/i386/i386-expand.c (ix86_expand_fp_absneg_operator):\n+\tHandle HFmode.\n+\t(ix86_expand_copysign): Ditto.\n+\t(ix86_expand_xorsign): Ditto.\n+\t* config/i386/i386.c (ix86_build_const_vector): Handle HF vector\n+\tmodes.\n+\t(ix86_build_signbit_mask): Ditto.\n+\t(ix86_can_change_mode_class): Ditto.\n+\t* config/i386/i386.md\n+\t(SSEMODEF): Add HFmode.\n+\t(ssevecmodef): Ditto.\n+\t(<code>hf2): New define_expand.\n+\t(*<code>hf2_1): New define_insn_and_split.\n+\t(copysign<mode>): Extend to support HFmode under AVX512FP16.\n+\t(xorsign<mode>): Ditto.\n+\t* config/i386/sse.md (VFB): New mode iterator.\n+\t(VFB_128_256): Ditto.\n+\t(VFB_512): Ditto.\n+\t(sseintvecmode2): Support HF vector mode.\n+\t(<code><mode>2): Use new mode iterator.\n+\t(*<code><mode>2): Ditto.\n+\t(copysign<mode>3): Ditto.\n+\t(xorsign<mode>3): Ditto.\n+\t(<code><mode>3<mask_name>): Ditto.\n+\t(<code><mode>3<mask_name>): Ditto.\n+\t(<sse>_andnot<mode>3<mask_name>): Adjust for HF vector mode.\n+\t(<sse>_andnot<mode>3<mask_name>): Ditto.\n+\t(*<code><mode>3<mask_name>): Ditto.\n+\t(*<code><mode>3<mask_name>): Ditto.\n+\n+2021-09-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h (_mm512_mask_fmadd_ph):\n+\tNew intrinsic.\n+\t(_mm512_mask3_fmadd_ph): Likewise.\n+\t(_mm512_maskz_fmadd_ph): Likewise.\n+\t(_mm512_fmadd_round_ph): Likewise.\n+\t(_mm512_mask_fmadd_round_ph): Likewise.\n+\t(_mm512_mask3_fmadd_round_ph): Likewise.\n+\t(_mm512_maskz_fmadd_round_ph): Likewise.\n+\t(_mm512_fnmadd_ph): Likewise.\n+\t(_mm512_mask_fnmadd_ph): Likewise.\n+\t(_mm512_mask3_fnmadd_ph): Likewise.\n+\t(_mm512_maskz_fnmadd_ph): Likewise.\n+\t(_mm512_fnmadd_round_ph): Likewise.\n+\t(_mm512_mask_fnmadd_round_ph): Likewise.\n+\t(_mm512_mask3_fnmadd_round_ph): Likewise.\n+\t(_mm512_maskz_fnmadd_round_ph): Likewise.\n+\t(_mm512_fmsub_ph): Likewise.\n+\t(_mm512_mask_fmsub_ph): Likewise.\n+\t(_mm512_mask3_fmsub_ph): Likewise.\n+\t(_mm512_maskz_fmsub_ph): Likewise.\n+\t(_mm512_fmsub_round_ph): Likewise.\n+\t(_mm512_mask_fmsub_round_ph): Likewise.\n+\t(_mm512_mask3_fmsub_round_ph): Likewise.\n+\t(_mm512_maskz_fmsub_round_ph): Likewise.\n+\t(_mm512_fnmsub_ph): Likewise.\n+\t(_mm512_mask_fnmsub_ph): Likewise.\n+\t(_mm512_mask3_fnmsub_ph): Likewise.\n+\t(_mm512_maskz_fnmsub_ph): Likewise.\n+\t(_mm512_fnmsub_round_ph): Likewise.\n+\t(_mm512_mask_fnmsub_round_ph): Likewise.\n+\t(_mm512_mask3_fnmsub_round_ph): Likewise.\n+\t(_mm512_maskz_fnmsub_round_ph): Likewise.\n+\t* config/i386/avx512fp16vlintrin.h (_mm256_fmadd_ph):\n+\tNew intrinsic.\n+\t(_mm256_mask_fmadd_ph): Likewise.\n+\t(_mm256_mask3_fmadd_ph): Likewise.\n+\t(_mm256_maskz_fmadd_ph): Likewise.\n+\t(_mm_fmadd_ph): Likewise.\n+\t(_mm_mask_fmadd_ph): Likewise.\n+\t(_mm_mask3_fmadd_ph): Likewise.\n+\t(_mm_maskz_fmadd_ph): Likewise.\n+\t(_mm256_fnmadd_ph): Likewise.\n+\t(_mm256_mask_fnmadd_ph): Likewise.\n+\t(_mm256_mask3_fnmadd_ph): Likewise.\n+\t(_mm256_maskz_fnmadd_ph): Likewise.\n+\t(_mm_fnmadd_ph): Likewise.\n+\t(_mm_mask_fnmadd_ph): Likewise.\n+\t(_mm_mask3_fnmadd_ph): Likewise.\n+\t(_mm_maskz_fnmadd_ph): Likewise.\n+\t(_mm256_fmsub_ph): Likewise.\n+\t(_mm256_mask_fmsub_ph): Likewise.\n+\t(_mm256_mask3_fmsub_ph): Likewise.\n+\t(_mm256_maskz_fmsub_ph): Likewise.\n+\t(_mm_fmsub_ph): Likewise.\n+\t(_mm_mask_fmsub_ph): Likewise.\n+\t(_mm_mask3_fmsub_ph): Likewise.\n+\t(_mm_maskz_fmsub_ph): Likewise.\n+\t(_mm256_fnmsub_ph): Likewise.\n+\t(_mm256_mask_fnmsub_ph): Likewise.\n+\t(_mm256_mask3_fnmsub_ph): Likewise.\n+\t(_mm256_maskz_fnmsub_ph): Likewise.\n+\t(_mm_fnmsub_ph): Likewise.\n+\t(_mm_mask_fnmsub_ph): Likewise.\n+\t(_mm_mask3_fnmsub_ph): Likewise.\n+\t(_mm_maskz_fnmsub_ph): Likewise.\n+\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n+\t* config/i386/sse.md\n+\t(<avx512>_fmadd_<mode>_maskz<round_expand_name>): Adjust to\n+\tsupport HF vector modes.\n+\t(<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name><round_name>):\n+\tDitto.\n+\t(*<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name>_bcst_1): Ditto.\n+\t(*<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name>_bcst_2): Ditto.\n+\t(*<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name>_bcst_3): Ditto.\n+\t(<avx512>_fmadd_<mode>_mask<round_name>): Ditto.\n+\t(<avx512>_fmadd_<mode>_mask3<round_name>): Ditto.\n+\t(<avx512>_fmsub_<mode>_maskz<round_expand_name>): Ditto.\n+\t(<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name><round_name>):\n+\tDitto.\n+\t(*<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>_bcst_1): Ditto.\n+\t(*<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>_bcst_2): Ditto.\n+\t(*<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>_bcst_3): Ditto.\n+\t(<avx512>_fmsub_<mode>_mask<round_name>): Ditto.\n+\t(<avx512>_fmsub_<mode>_mask3<round_name>): Ditto.\n+\t(<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name><round_name>):\n+\tDitto.\n+\t(*<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>_bcst_1): Ditto.\n+\t(*<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>_bcst_2): Ditto.\n+\t(*<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>_bcst_3): Ditto.\n+\t(<avx512>_fnmadd_<mode>_mask<round_name>): Ditto.\n+\t(<avx512>_fnmadd_<mode>_mask3<round_name>): Ditto.\n+\t(<avx512>_fnmsub_<mode>_maskz<round_expand_name>): Ditto.\n+\t(<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name><round_name>):\n+\tDitto.\n+\t(*<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name>_bcst_1): Ditto.\n+\t(*<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name>_bcst_2): Ditto.\n+\t(*<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name>_bcst_3): Ditto.\n+\t(<avx512>_fnmsub_<mode>_mask<round_name>): Ditto.\n+\t(<avx512>_fnmsub_<mode>_mask3<round_name>): Ditto.\n+\n+2021-09-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h (_mm512_fmaddsub_ph):\n+\tNew intrinsic.\n+\t(_mm512_mask_fmaddsub_ph): Likewise.\n+\t(_mm512_mask3_fmaddsub_ph): Likewise.\n+\t(_mm512_maskz_fmaddsub_ph): Likewise.\n+\t(_mm512_fmaddsub_round_ph): Likewise.\n+\t(_mm512_mask_fmaddsub_round_ph): Likewise.\n+\t(_mm512_mask3_fmaddsub_round_ph): Likewise.\n+\t(_mm512_maskz_fmaddsub_round_ph): Likewise.\n+\t(_mm512_mask_fmsubadd_ph): Likewise.\n+\t(_mm512_mask3_fmsubadd_ph): Likewise.\n+\t(_mm512_maskz_fmsubadd_ph): Likewise.\n+\t(_mm512_fmsubadd_round_ph): Likewise.\n+\t(_mm512_mask_fmsubadd_round_ph): Likewise.\n+\t(_mm512_mask3_fmsubadd_round_ph): Likewise.\n+\t(_mm512_maskz_fmsubadd_round_ph): Likewise.\n+\t* config/i386/avx512fp16vlintrin.h (_mm256_fmaddsub_ph):\n+\tNew intrinsic.\n+\t(_mm256_mask_fmaddsub_ph): Likewise.\n+\t(_mm256_mask3_fmaddsub_ph): Likewise.\n+\t(_mm256_maskz_fmaddsub_ph): Likewise.\n+\t(_mm_fmaddsub_ph): Likewise.\n+\t(_mm_mask_fmaddsub_ph): Likewise.\n+\t(_mm_mask3_fmaddsub_ph): Likewise.\n+\t(_mm_maskz_fmaddsub_ph): Likewise.\n+\t(_mm256_fmsubadd_ph): Likewise.\n+\t(_mm256_mask_fmsubadd_ph): Likewise.\n+\t(_mm256_mask3_fmsubadd_ph): Likewise.\n+\t(_mm256_maskz_fmsubadd_ph): Likewise.\n+\t(_mm_fmsubadd_ph): Likewise.\n+\t(_mm_mask_fmsubadd_ph): Likewise.\n+\t(_mm_mask3_fmsubadd_ph): Likewise.\n+\t(_mm_maskz_fmsubadd_ph): Likewise.\n+\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n+\t* config/i386/sse.md (VFH_SF_AVX512VL): New mode iterator.\n+\t* (<avx512>_fmsubadd_<mode>_maskz<round_expand_name>): New expander.\n+\t* (<avx512>_fmaddsub_<mode>_maskz<round_expand_name>): Use\n+\tVFH_SF_AVX512VL.\n+\t* (<sd_mask_codefor>fma_fmaddsub_<mode><sd_maskz_name><round_name>):\n+\tDitto.\n+\t* (<avx512>_fmaddsub_<mode>_mask<round_name>): Ditto.\n+\t* (<avx512>_fmaddsub_<mode>_mask3<round_name>): Ditto.\n+\t* (<sd_mask_codefor>fma_fmsubadd_<mode><sd_maskz_name><round_name>):\n+\tDitto.\n+\t* (<avx512>_fmsubadd_<mode>_mask<round_name>): Ditto.\n+\t* (<avx512>_fmsubadd_<mode>_mask3<round_name>): Ditto.\n+\n+2021-09-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/87767\n+\t* config/i386/i386.c (ix86_print_operand): Handle\n+\tV8HF/V16HF/V32HFmode.\n+\t* config/i386/i386.h (VALID_BCST_MODE_P): Add HFmode.\n+\t* config/i386/sse.md (avx512bcst): Remove.\n+\n 2021-09-17  Martin Sebor  <msebor@redhat.com>\n \n \t* Makefile.in (OBJS): Add gimple-predicate-analysis.o."}, {"sha": "2c8e6df035019eb4fa371c3a32f8fb5738ce9f37", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf74e7b57bc2e94fdd752d824fa221d1d529fad8/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf74e7b57bc2e94fdd752d824fa221d1d529fad8/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=cf74e7b57bc2e94fdd752d824fa221d1d529fad8", "patch": "@@ -1 +1 @@\n-20210918\n+20210919"}, {"sha": "73a3180bca444d85463a45c080f52d7b4742f9d3", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf74e7b57bc2e94fdd752d824fa221d1d529fad8/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf74e7b57bc2e94fdd752d824fa221d1d529fad8/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=cf74e7b57bc2e94fdd752d824fa221d1d529fad8", "patch": "@@ -1,3 +1,8 @@\n+2021-09-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-omp.c (c_omp_split_clauses): Split order clause also to\n+\tdistribute construct.  Copy over OMP_CLAUSE_ORDER_UNCONSTRAINED.\n+\n 2021-09-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-omp.c (c_finish_omp_atomic): Avoid creating"}, {"sha": "794cbe7ea2f8b32c777074dc61012046ede643c6", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf74e7b57bc2e94fdd752d824fa221d1d529fad8/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf74e7b57bc2e94fdd752d824fa221d1d529fad8/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=cf74e7b57bc2e94fdd752d824fa221d1d529fad8", "patch": "@@ -1,3 +1,14 @@\n+2021-09-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (c_parser_omp_clause_order): Parse unconstrained\n+\tand reproducible modifiers.\n+\t(OMP_DISTRIBUTE_CLAUSE_MASK): Add order clause.\n+\n+2021-09-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (c_parser_omp_clause_default): Handle private and\n+\tfirstprivate arguments, adjust diagnostics on unknown argument.\n+\n 2021-09-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.c (c_parser_omp_atomic): Reject atomic swap if capture"}, {"sha": "d04d84fb0f522cb6ec50d1fe193e25d7ae6e1d46", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf74e7b57bc2e94fdd752d824fa221d1d529fad8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf74e7b57bc2e94fdd752d824fa221d1d529fad8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cf74e7b57bc2e94fdd752d824fa221d1d529fad8", "patch": "@@ -1,3 +1,29 @@\n+2021-09-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_parser_omp_clause_order): Parse unconstrained\n+\tand reproducible modifiers.\n+\t(OMP_DISTRIBUTE_CLAUSE_MASK): Add order clause.\n+\n+2021-09-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_parser_omp_clause_default): Handle private and\n+\tfirstprivate arguments, adjust diagnostics on unknown argument.\n+\t* cp-gimplify.c (cxx_omp_finish_clause): Handle OMP_CLAUSE_PRIVATE.\n+\n+2021-09-18  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h (dependentish_scope_p): Declare.\n+\t* pt.c (dependentish_scope_p): New.\n+\t* parser.c (cp_parser_lookup_name): Return a TYPENAME_TYPE\n+\tfor lookup of a type in a dependent object.\n+\t(cp_parser_template_id): Handle TYPENAME_TYPE.\n+\t(cp_parser_template_name): If we're looking for a type,\n+\ta name followed by < names a template.\n+\n+2021-09-18  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h: Fix typo in LANG_FLAG list.\n+\n 2021-09-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* cp-tree.h (finish_omp_atomic): Add r and weak arguments."}, {"sha": "ecc1a8edce0a0aab789a3ac37db4f9c7ba9ba27c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf74e7b57bc2e94fdd752d824fa221d1d529fad8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf74e7b57bc2e94fdd752d824fa221d1d529fad8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cf74e7b57bc2e94fdd752d824fa221d1d529fad8", "patch": "@@ -1,3 +1,120 @@\n+2021-09-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/order-1.c (f2): Add tests for distribute\n+\twith order clause.\n+\t(f3): Remove.\n+\t* c-c++-common/gomp/order-2.c: Don't expect error for distribute\n+\twith order clause.\n+\t* c-c++-common/gomp/order-5.c: New test.\n+\t* c-c++-common/gomp/order-6.c: New test.\n+\t* c-c++-common/gomp/clause-dups-1.c (f1): Add tests for\n+\tduplicated order clause.\n+\t(f9): New function.\n+\t* c-c++-common/gomp/clauses-1.c (baz, bar): Don't mix copyin and\n+\torder(concurrent) clauses on the same composite construct combined\n+\twith distribute, instead split it into two tests, one without\n+\tcopyin and one without order(concurrent).  Add order(concurrent)\n+\tclauses to {,{,target} teams} distribute.\n+\t* g++.dg/gomp/attrs-1.C (baz, bar): Likewise.\n+\t* g++.dg/gomp/attrs-2.C (baz, bar): Likewise.\n+\n+2021-09-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/default-2.c: New test.\n+\t* c-c++-common/gomp/default-3.c: New test.\n+\t* g++.dg/gomp/default-1.C: New test.\n+\n+2021-09-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-vfmaddXXXsh-1a.c: New test.\n+\t* gcc.target/i386/avx512fp16-vfmaddXXXsh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfmsubXXXsh-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfmsubXXXsh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfnmaddXXXsh-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfnmaddXXXsh-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfnmsubXXXsh-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfnmsubXXXsh-1b.c: Ditto.\n+\n+2021-09-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\n+2021-09-18  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/i386/avx512fp16-xorsign-1.c: New test.\n+\n+2021-09-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-neg-1a.c: New test.\n+\t* gcc.target/i386/avx512fp16-neg-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-scalar-bitwise-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-scalar-bitwise-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vector-bitwise-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vector-bitwise-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-neg-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-neg-1b.c: Ditto.\n+\n+2021-09-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-vfmaddXXXph-1a.c: New test.\n+\t* gcc.target/i386/avx512fp16-vfmaddXXXph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfmsubXXXph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfmsubXXXph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfnmaddXXXph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfnmaddXXXph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfnmsubXXXph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfnmsubXXXph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vfmaddXXXph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vfmaddXXXph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vfmsubXXXph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vfmsubXXXph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vfnmaddXXXph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vfnmaddXXXph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vfnmsubXXXph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vfnmsubXXXph-1b.c: Ditto.\n+\n+2021-09-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Add test fot new intrinsics.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\n+2021-09-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-vfmaddsubXXXph-1a.c: New test.\n+\t* gcc.target/i386/avx512fp16-vfmaddsubXXXph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfmsubaddXXXph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vfmsubaddXXXph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vfmaddsubXXXph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vfmaddsubXXXph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vfmsubaddXXXph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vfmsubaddXXXph-1b.c: Ditto.\n+\n+2021-09-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\n+2021-09-18  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-broadcast-1.c: New test.\n+\t* gcc.target/i386/avx512fp16-broadcast-2.c: New test.\n+\n+2021-09-18  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/template/dtor5.C: Adjust expected error.\n+\t* g++.dg/cpp23/lookup2.C: New test.\n+\t* g++.dg/template/dtor11.C: New test.\n+\n 2021-09-17  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/102366"}, {"sha": "d648771f4f3cbb8ebb46d4660f50a75d869f3577", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf74e7b57bc2e94fdd752d824fa221d1d529fad8/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf74e7b57bc2e94fdd752d824fa221d1d529fad8/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=cf74e7b57bc2e94fdd752d824fa221d1d529fad8", "patch": "@@ -1,3 +1,10 @@\n+2021-09-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c++/default-1.C: New test.\n+\t* testsuite/libgomp.c-c++-common/default-1.c: New test.\n+\t* libgomp.texi (OpenMP 5.1): Mark \"private and firstprivate argument\n+\tto default clause in C and C++\" as implemented.\n+\n 2021-09-17  Julian Brown  <julian@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-c-c++-common/broadcast-many.c: Update."}]}