{"sha": "d0b952edd3f5753332ea234ef261711a81e87229", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBiOTUyZWRkM2Y1NzUzMzMyZWEyMzRlZjI2MTcxMWE4MWU4NzIyOQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-08-03T05:22:11Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-08-03T11:27:52Z"}, "message": "Add cond_add/sub/mul for vector integer modes.\n\ngcc/ChangeLog:\n\n\t* config/i386/sse.md (cond_<insn><mode>): New expander.\n\t(cond_mul<mode>): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/cond_op_addsubmul_d-1.c: New test.\n\t* gcc.target/i386/cond_op_addsubmul_d-2.c: New test.\n\t* gcc.target/i386/cond_op_addsubmul_q-1.c: New test.\n\t* gcc.target/i386/cond_op_addsubmul_q-2.c: New test.\n\t* gcc.target/i386/cond_op_addsubmul_w-1.c: New test.\n\t* gcc.target/i386/cond_op_addsubmul_w-2.c: New test.", "tree": {"sha": "f36d7ab8293ea32e4fdb782c1506b465646da0ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f36d7ab8293ea32e4fdb782c1506b465646da0ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0b952edd3f5753332ea234ef261711a81e87229", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b952edd3f5753332ea234ef261711a81e87229", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0b952edd3f5753332ea234ef261711a81e87229", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b952edd3f5753332ea234ef261711a81e87229/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "759f3854f0fdb4add2961bfafd1ee793f392f70a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/759f3854f0fdb4add2961bfafd1ee793f392f70a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/759f3854f0fdb4add2961bfafd1ee793f392f70a"}], "stats": {"total": 218, "additions": 210, "deletions": 8}, "files": [{"sha": "52b2b4214d7a1ff45313ba56b46b7662fdb00a2a", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 80, "deletions": 8, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b952edd3f5753332ea234ef261711a81e87229/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b952edd3f5753332ea234ef261711a81e87229/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=d0b952edd3f5753332ea234ef261711a81e87229", "patch": "@@ -333,6 +333,14 @@\n   [V16SI (V8SI  \"TARGET_AVX512VL\") (V4SI  \"TARGET_AVX512VL\")\n    V8DI  (V4DI  \"TARGET_AVX512VL\") (V2DI  \"TARGET_AVX512VL\")])\n \n+(define_mode_iterator VI1248_AVX512VLBW\n+  [(V64QI \"TARGET_AVX512BW\") (V32QI \"TARGET_AVX512VL && TARGET_AVX512BW\")\n+   (V16QI \"TARGET_AVX512VL && TARGET_AVX512BW\")\n+   (V32HI \"TARGET_AVX512BW\") (V16HI \"TARGET_AVX512VL && TARGET_AVX512BW\")\n+   (V8HI \"TARGET_AVX512VL && TARGET_AVX512BW\")\n+   V16SI (V8SI \"TARGET_AVX512VL\") (V4SI \"TARGET_AVX512VL\")\n+   V8DI (V4DI \"TARGET_AVX512VL\") (V2DI \"TARGET_AVX512VL\")])\n+\n (define_mode_iterator VF_AVX512VL\n   [V16SF (V8SF \"TARGET_AVX512VL\") (V4SF \"TARGET_AVX512VL\")\n    V8DF (V4DF \"TARGET_AVX512VL\") (V2DF \"TARGET_AVX512VL\")])\n@@ -11803,6 +11811,24 @@\n   \"TARGET_SSE2\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n+(define_expand \"cond_<insn><mode>\"\n+  [(set (match_operand:VI1248_AVX512VLBW 0 \"register_operand\")\n+\t(vec_merge:VI1248_AVX512VLBW\n+\t  (plusminus:VI1248_AVX512VLBW\n+\t    (match_operand:VI1248_AVX512VLBW 2 \"nonimmediate_operand\")\n+\t    (match_operand:VI1248_AVX512VLBW 3 \"nonimmediate_operand\"))\n+\t  (match_operand:VI1248_AVX512VLBW 4 \"nonimm_or_0_operand\")\n+\t  (match_operand:<avx512fmaskmode> 1 \"register_operand\")))]\n+  \"TARGET_AVX512F\"\n+{\n+  emit_insn (gen_<insn><mode>3_mask (operands[0],\n+\t\t\t\t     operands[2],\n+\t\t\t\t     operands[3],\n+\t\t\t\t     operands[4],\n+\t\t\t\t     operands[1]));\n+  DONE;\n+})\n+\n (define_expand \"<insn><mode>3_mask\"\n   [(set (match_operand:VI48_AVX512VL 0 \"register_operand\")\n \t(vec_merge:VI48_AVX512VL\n@@ -11929,6 +11955,24 @@\n   DONE;\n })\n \n+(define_expand \"cond_mul<mode>\"\n+  [(set (match_operand:VI2_AVX512VL 0 \"register_operand\")\n+\t(vec_merge:VI2_AVX512VL\n+\t  (mult:VI2_AVX512VL\n+\t    (match_operand:VI2_AVX512VL 2 \"vector_operand\")\n+\t    (match_operand:VI2_AVX512VL 3 \"vector_operand\"))\n+\t  (match_operand:VI2_AVX512VL 4 \"nonimm_or_0_operand\")\n+\t  (match_operand:<avx512fmaskmode> 1 \"register_operand\")))]\n+  \"TARGET_AVX512BW\"\n+{\n+  emit_insn (gen_mul<mode>3_mask (operands[0],\n+\t\t\t\t  operands[2],\n+\t\t\t\t  operands[3],\n+\t\t\t\t  operands[4],\n+\t\t\t\t  operands[1]));\n+  DONE;\n+})\n+\n (define_expand \"mul<mode>3<mask_name>\"\n   [(set (match_operand:VI2_AVX2 0 \"register_operand\")\n \t(mult:VI2_AVX2 (match_operand:VI2_AVX2 1 \"vector_operand\")\n@@ -12363,6 +12407,24 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_expand \"cond_mul<mode>\"\n+  [(set (match_operand:VI8_AVX512VL 0 \"register_operand\")\n+\t(vec_merge:VI8_AVX512VL\n+\t  (mult:VI8_AVX512VL\n+\t    (match_operand:VI8_AVX512VL 2 \"vector_operand\")\n+\t    (match_operand:VI8_AVX512VL 3 \"vector_operand\"))\n+\t  (match_operand:VI8_AVX512VL 4 \"nonimm_or_0_operand\")\n+\t  (match_operand:<avx512fmaskmode> 1 \"register_operand\")))]\n+  \"TARGET_AVX512DQ\"\n+{\n+  emit_insn (gen_avx512dq_mul<mode>3_mask (operands[0],\n+\t\t\t\t\t   operands[2],\n+\t\t\t\t\t   operands[3],\n+\t\t\t\t\t   operands[4],\n+\t\t\t\t\t   operands[1]));\n+  DONE;\n+})\n+\n (define_insn \"avx512dq_mul<mode>3<mask_name>\"\n   [(set (match_operand:VI8_AVX512VL 0 \"register_operand\" \"=v\")\n \t(mult:VI8_AVX512VL\n@@ -12375,6 +12437,24 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_expand \"cond_mul<mode>\"\n+  [(set (match_operand:VI4_AVX512VL 0 \"register_operand\")\n+\t(vec_merge:VI4_AVX512VL\n+\t  (mult:VI4_AVX512VL\n+\t    (match_operand:VI4_AVX512VL 2 \"vector_operand\")\n+\t    (match_operand:VI4_AVX512VL 3 \"vector_operand\"))\n+\t  (match_operand:VI4_AVX512VL 4 \"nonimm_or_0_operand\")\n+\t  (match_operand:<avx512fmaskmode> 1 \"register_operand\")))]\n+  \"TARGET_AVX512F\"\n+{\n+  emit_insn (gen_mul<mode>3_mask (operands[0],\n+\t\t\t\t  operands[2],\n+\t\t\t\t  operands[3],\n+\t\t\t\t  operands[4],\n+\t\t\t\t  operands[1]));\n+  DONE;\n+})\n+\n (define_expand \"mul<mode>3<mask_name>\"\n   [(set (match_operand:VI4_AVX512F 0 \"register_operand\")\n \t(mult:VI4_AVX512F\n@@ -14043,14 +14123,6 @@\n \t      ]\n \t      (const_string \"<sseinsnmode>\")))])\n \n-(define_mode_iterator VI1248_AVX512VLBW\n-  [(V64QI \"TARGET_AVX512BW\") (V32QI \"TARGET_AVX512VL && TARGET_AVX512BW\")\n-   (V16QI \"TARGET_AVX512VL && TARGET_AVX512BW\")\n-   (V32HI \"TARGET_AVX512BW\") (V16HI \"TARGET_AVX512VL && TARGET_AVX512BW\")\n-   (V8HI \"TARGET_AVX512VL && TARGET_AVX512BW\")\n-   V16SI (V8SI \"TARGET_AVX512VL\") (V4SI \"TARGET_AVX512VL\")\n-   V8DI (V4DI \"TARGET_AVX512VL\") (V2DI \"TARGET_AVX512VL\")])\n-\n (define_mode_iterator AVX512ZEXTMASK\n   [(DI \"TARGET_AVX512BW\") (SI \"TARGET_AVX512BW\") HI])\n "}, {"sha": "c506fa566f4e23a63eb6d952470b413371e5812c", "filename": "gcc/testsuite/gcc.target/i386/cond_op_addsubmul_d-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b952edd3f5753332ea234ef261711a81e87229/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmul_d-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b952edd3f5753332ea234ef261711a81e87229/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmul_d-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmul_d-1.c?ref=d0b952edd3f5753332ea234ef261711a81e87229", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=skylake-avx512 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump \".COND_ADD\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \".COND_SUB\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \".COND_MUL\" \"optimized\" } } */\n+#ifndef NUM\n+#define NUM 800\n+#endif\n+#ifndef TYPE\n+#define TYPE int\n+#endif\n+\n+TYPE a[NUM], b[NUM], c[NUM], d[NUM], e[NUM], j[NUM];\n+#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))\n+#define MAX(X,Y) ((X) < (Y) ? (Y) : (X))\n+\n+#define BIN(OPNAME, OP)\t\t\t\t\\\n+  void\t\t\t\t\t\t\\\n+  __attribute__ ((noipa,optimize (\"O3\")))\t\\\n+  foo_##OPNAME ()\t\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    for (int i = 0; i != NUM; i++)\t\t\\\n+      if (b[i] < c[i])\t\t\t\t\\\n+\ta[i] = d[i] OP e[i];\t\t\t\\\n+      else\t\t\t\t\t\\\n+\ta[i] = MAX(d[i], e[i]);\t\t\t\\\n+  }\n+\n+\n+BIN (add, +);\n+BIN (sub, -);\n+BIN (mul, *);"}, {"sha": "490f4afbf18044525be5ad9e347a572e441741d0", "filename": "gcc/testsuite/gcc.target/i386/cond_op_addsubmul_d-2.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b952edd3f5753332ea234ef261711a81e87229/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmul_d-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b952edd3f5753332ea234ef261711a81e87229/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmul_d-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmul_d-2.c?ref=d0b952edd3f5753332ea234ef261711a81e87229", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mprefer-vector-width=256\" } */\n+#define AVX512VL\n+#ifndef CHECK\n+#define CHECK \"avx512f-helper.h\"\n+#endif\n+\n+#include CHECK\n+\n+#include \"cond_op_addsubmul_d-1.c\"\n+#define BINO2(OPNAME, OP)\t\t\t\\\n+  void\t\t\t\t\t\t\\\n+  __attribute__ ((noipa,optimize (\"O2\")))\t\\\n+  foo_o2_##OPNAME ()\t\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    for (int i = 0; i != NUM; i++)\t\t\\\n+      if (b[i] < c[i])\t\t\t\t\\\n+\tj[i] = d[i] OP e[i];\t\t\t\\\n+      else\t\t\t\t\t\\\n+\tj[i] = MAX(d[i], e[i]);\t\t\t\\\n+  }\n+\n+BINO2 (add, +);\n+BINO2 (sub, -);\n+BINO2 (mul, *);\n+\n+static void\n+test_256 (void)\n+{\n+  int sign = -1;\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      a[i] = 0;\n+      d[i] = i * 2;\n+      e[i] = i * i * 3 - i * 9 + 153;\n+      b[i] = i * 83;\n+      c[i] = b[i] + sign;\n+      sign *= -1;\n+      j[i] = 1;\n+    }\n+  foo_add ();\n+  foo_o2_add ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+\tabort ();\n+      a[i] = 0;\n+      b[i] = 1;\n+    }\n+\n+  foo_sub ();\n+  foo_o2_sub ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+  \tabort ();\n+      a[i] = 0;\n+      j[i] = 1;\n+    }\n+\n+  foo_mul ();\n+  foo_o2_mul ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+\tabort ();\n+      a[i] = 0;\n+      j[i] = 1;\n+    }\n+}\n+\n+static void\n+test_128 ()\n+{\n+  \n+}"}, {"sha": "5e25350b8b636f5bb963f48bcd014c9e0f190628", "filename": "gcc/testsuite/gcc.target/i386/cond_op_addsubmul_q-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b952edd3f5753332ea234ef261711a81e87229/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmul_q-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b952edd3f5753332ea234ef261711a81e87229/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmul_q-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmul_q-1.c?ref=d0b952edd3f5753332ea234ef261711a81e87229", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -march=skylake-avx512 -DTYPE=long -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump \".COND_ADD\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \".COND_SUB\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \".COND_MUL\" \"optimized\" } } */\n+#define AVX512DQ\n+#include \"cond_op_addsubmul_d-1.c\""}, {"sha": "09a87deb529c1142c7751474faf7b724fe73aa03", "filename": "gcc/testsuite/gcc.target/i386/cond_op_addsubmul_q-2.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b952edd3f5753332ea234ef261711a81e87229/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmul_q-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b952edd3f5753332ea234ef261711a81e87229/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmul_q-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmul_q-2.c?ref=d0b952edd3f5753332ea234ef261711a81e87229", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512vl -mprefer-vector-width=256 -mavx512dq -DTYPE=long\" } */\n+\n+#include \"cond_op_addsubmul_d-2.c\""}, {"sha": "80d78d9b704ed2e86c81c23525a3c2f359bba30c", "filename": "gcc/testsuite/gcc.target/i386/cond_op_addsubmul_w-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b952edd3f5753332ea234ef261711a81e87229/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmul_w-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b952edd3f5753332ea234ef261711a81e87229/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmul_w-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmul_w-1.c?ref=d0b952edd3f5753332ea234ef261711a81e87229", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=skylake-avx512 -DTYPE=short -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump \".COND_ADD\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \".COND_SUB\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \".COND_MUL\" \"optimized\" } } */\n+#include \"cond_op_addsubmul_d-1.c\""}, {"sha": "fdcdb34346c04e540ee2ac36934e82681bba4a4a", "filename": "gcc/testsuite/gcc.target/i386/cond_op_addsubmul_w-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b952edd3f5753332ea234ef261711a81e87229/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmul_w-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b952edd3f5753332ea234ef261711a81e87229/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmul_w-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_addsubmul_w-2.c?ref=d0b952edd3f5753332ea234ef261711a81e87229", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mprefer-vector-width=256 -mavx512bw -DTYPE=short\" } */\n+\n+#define AVX512BW\n+#include \"cond_op_addsubmul_d-2.c\""}]}