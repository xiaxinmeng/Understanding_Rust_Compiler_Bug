{"sha": "91d80cf4bd2827dd9c40fe6a7c719c909d79083d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFkODBjZjRiZDI4MjdkZDljNDBmZTZhN2M3MTljOTA5ZDc5MDgzZA==", "commit": {"author": {"name": "Duan bo", "email": "duanbo3@huawei.com", "date": "2020-10-12T11:32:57Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-10-12T11:32:57Z"}, "message": "vect: Fix an ICE in vect_recog_mask_conversion_pattern\n\nWhen processing the cond expression, vect_recog_mask_conversion_pattern\ndoesn't consider the situation that two operands of rhs1 are different\nvectypes, leading to a vect ICE. This patch adds the identification and\nhandling of the situation to fix the problem.\n\ngcc/ChangeLog:\n\n\tPR target/96757\n\t* tree-vect-patterns.c (vect_recog_mask_conversion_pattern): Add\n\tthe identification and handling of the dropped situation in the\n\tcond expression processing phase.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/96757\n\t* gcc.target/aarch64/pr96757.c: New test.", "tree": {"sha": "4a0251704df6535689ca97a985db341f07459c88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a0251704df6535689ca97a985db341f07459c88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91d80cf4bd2827dd9c40fe6a7c719c909d79083d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91d80cf4bd2827dd9c40fe6a7c719c909d79083d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91d80cf4bd2827dd9c40fe6a7c719c909d79083d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91d80cf4bd2827dd9c40fe6a7c719c909d79083d/comments", "author": null, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91e4e16b550540723cca824b9674c7d8c43f4849", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91e4e16b550540723cca824b9674c7d8c43f4849", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91e4e16b550540723cca824b9674c7d8c43f4849"}], "stats": {"total": 74, "additions": 68, "deletions": 6}, "files": [{"sha": "122e39dca0e410d5ec82bbe8fb8bdb9918196162", "filename": "gcc/testsuite/gcc.target/aarch64/pr96757.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91d80cf4bd2827dd9c40fe6a7c719c909d79083d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr96757.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91d80cf4bd2827dd9c40fe6a7c719c909d79083d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr96757.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr96757.c?ref=91d80cf4bd2827dd9c40fe6a7c719c909d79083d", "patch": "@@ -0,0 +1,23 @@\n+/* PR target/96757 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+short \n+fun1(short i, short j)\n+{ \n+  return i * j; \n+}\n+\n+int \n+fun(int a, int b, int c) \n+{\n+  int *v, z, k, m;\n+  short f, d;\n+  for (int i=0; i<c; i++) \n+  {\n+    f= 4 <= d;\n+    k= a > m;\n+    z = f > k;\n+    *v += fun1(z,b);\n+  }\n+}"}, {"sha": "bc5f2e6500172ab74d6a9e518ab2bb153db9faaa", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 45, "deletions": 6, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91d80cf4bd2827dd9c40fe6a7c719c909d79083d/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91d80cf4bd2827dd9c40fe6a7c719c909d79083d/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=91d80cf4bd2827dd9c40fe6a7c719c909d79083d", "patch": "@@ -4245,6 +4245,8 @@ vect_recog_mask_conversion_pattern (vec_info *vinfo,\n   tree lhs = NULL_TREE, rhs1, rhs2, tmp, rhs1_type, rhs2_type;\n   tree vectype1, vectype2;\n   stmt_vec_info pattern_stmt_info;\n+  tree rhs1_op0 = NULL_TREE, rhs1_op1 = NULL_TREE;\n+  tree rhs1_op0_type = NULL_TREE, rhs1_op1_type = NULL_TREE;\n \n   /* Check for MASK_LOAD ans MASK_STORE calls requiring mask conversion.  */\n   if (is_gimple_call (last_stmt)\n@@ -4344,9 +4346,37 @@ vect_recog_mask_conversion_pattern (vec_info *vinfo,\n \n \t     it is better for b1 and b2 to use the mask type associated\n \t     with int elements rather bool (byte) elements.  */\n-\t  rhs1_type = integer_type_for_mask (TREE_OPERAND (rhs1, 0), vinfo);\n-\t  if (!rhs1_type)\n-\t    rhs1_type = TREE_TYPE (TREE_OPERAND (rhs1, 0));\n+\t  rhs1_op0 = TREE_OPERAND (rhs1, 0);\n+\t  rhs1_op1 = TREE_OPERAND (rhs1, 1);\n+\t  if (!rhs1_op0 || !rhs1_op1)\n+\t    return NULL;\n+\t  rhs1_op0_type = integer_type_for_mask (rhs1_op0, vinfo);\n+\t  rhs1_op1_type = integer_type_for_mask (rhs1_op1, vinfo);\n+\n+\t  if (!rhs1_op0_type)\n+\t    rhs1_type = TREE_TYPE (rhs1_op0);\n+\t  else if (!rhs1_op1_type)\n+\t    rhs1_type = TREE_TYPE (rhs1_op1);\n+\t  else if (TYPE_PRECISION (rhs1_op0_type)\n+\t\t   != TYPE_PRECISION (rhs1_op1_type))\n+\t    {\n+\t      int tmp0 = (int) TYPE_PRECISION (rhs1_op0_type)\n+\t\t\t - (int) TYPE_PRECISION (TREE_TYPE (lhs));\n+\t      int tmp1 = (int) TYPE_PRECISION (rhs1_op1_type)\n+\t\t\t - (int) TYPE_PRECISION (TREE_TYPE (lhs));\n+\t      if ((tmp0 > 0 && tmp1 > 0) || (tmp0 < 0 && tmp1 < 0))\n+\t\t{\n+\t\t  if (abs (tmp0) > abs (tmp1))\n+\t\t    rhs1_type = rhs1_op1_type;\n+\t\t  else\n+\t\t    rhs1_type = rhs1_op0_type;\n+\t\t}\n+\t      else\n+\t\trhs1_type = build_nonstandard_integer_type\n+\t\t  (TYPE_PRECISION (TREE_TYPE (lhs)), 1);\n+\t    }\n+\t  else\n+\t    rhs1_type = rhs1_op0_type;\n \t}\n       else\n \treturn NULL;\n@@ -4364,8 +4394,8 @@ vect_recog_mask_conversion_pattern (vec_info *vinfo,\n \t name from the outset.  */\n       if (known_eq (TYPE_VECTOR_SUBPARTS (vectype1),\n \t\t    TYPE_VECTOR_SUBPARTS (vectype2))\n-\t  && (TREE_CODE (rhs1) == SSA_NAME\n-\t      || rhs1_type == TREE_TYPE (TREE_OPERAND (rhs1, 0))))\n+\t  && !rhs1_op0_type\n+\t  && !rhs1_op1_type)\n \treturn NULL;\n \n       /* If rhs1 is invariant and we can promote it leave the COND_EXPR\n@@ -4397,7 +4427,16 @@ vect_recog_mask_conversion_pattern (vec_info *vinfo,\n       if (TREE_CODE (rhs1) != SSA_NAME)\n \t{\n \t  tmp = vect_recog_temp_ssa_var (TREE_TYPE (rhs1), NULL);\n-\t  pattern_stmt = gimple_build_assign (tmp, rhs1);\n+\t  if (rhs1_op0_type\n+\t      && TYPE_PRECISION (rhs1_op0_type) != TYPE_PRECISION (rhs1_type))\n+\t    rhs1_op0 = build_mask_conversion (vinfo, rhs1_op0,\n+\t\t\t\t\t      vectype2, stmt_vinfo);\n+\t  if (rhs1_op1_type\n+\t      && TYPE_PRECISION (rhs1_op1_type) != TYPE_PRECISION (rhs1_type))\n+\t    rhs1_op1 = build_mask_conversion (vinfo, rhs1_op1,\n+\t\t\t\t      vectype2, stmt_vinfo);\n+\t  pattern_stmt = gimple_build_assign (tmp, TREE_CODE (rhs1),\n+\t\t\t\t\t      rhs1_op0, rhs1_op1);\n \t  rhs1 = tmp;\n \t  append_pattern_def_seq (vinfo, stmt_vinfo, pattern_stmt, vectype2,\n \t\t\t\t  rhs1_type);"}]}