{"sha": "37dac03995186a0404c5f17a39d69c8bb248dfc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdkYWMwMzk5NTE4NmEwNDA0YzVmMTdhMzlkNjljOGJiMjQ4ZGZjOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1997-09-02T21:33:28Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-09-02T21:33:28Z"}, "message": "method.c (build_overload_value): Add in_template parm.\n\n\t* method.c (build_overload_value): Add in_template parm.\n\t(build_overload_int): Likewise.\n\t(build_overload_identifier): Pass it.\n\n\t* decl.c (duplicate_decls): Don't bash a previous template\n \tdefinition with a redeclaration.\n\nFrom-SVN: r15040", "tree": {"sha": "7229aa1bf3cddb9b1b794928616ef39229804291", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7229aa1bf3cddb9b1b794928616ef39229804291"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37dac03995186a0404c5f17a39d69c8bb248dfc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37dac03995186a0404c5f17a39d69c8bb248dfc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37dac03995186a0404c5f17a39d69c8bb248dfc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37dac03995186a0404c5f17a39d69c8bb248dfc9/comments", "author": null, "committer": null, "parents": [{"sha": "ca79f85d9db6e768bfa918ea4d490692ff996c41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca79f85d9db6e768bfa918ea4d490692ff996c41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca79f85d9db6e768bfa918ea4d490692ff996c41"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "cef8c96dc7c707e75de1fd44c90b70e3935ccb8a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37dac03995186a0404c5f17a39d69c8bb248dfc9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37dac03995186a0404c5f17a39d69c8bb248dfc9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=37dac03995186a0404c5f17a39d69c8bb248dfc9", "patch": "@@ -1,5 +1,12 @@\n Tue Sep  2 12:09:13 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* method.c (build_overload_value): Add in_template parm.\n+\t(build_overload_int): Likewise.\n+\t(build_overload_identifier): Pass it.\n+\n+\t* decl.c (duplicate_decls): Don't bash a previous template\n+ \tdefinition with a redeclaration.\n+\n \t* pt.c (unify): float doesn't match double.\n \n \t* pt.c (do_type_instantiation): Handle getting a _TYPE or a"}, {"sha": "eb574e81a91a3f9af3b206ba178caef7bd326007", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37dac03995186a0404c5f17a39d69c8bb248dfc9/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37dac03995186a0404c5f17a39d69c8bb248dfc9/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=37dac03995186a0404c5f17a39d69c8bb248dfc9", "patch": "@@ -2698,9 +2698,12 @@ duplicate_decls (newdecl, olddecl)\n \n   if (TREE_CODE (newdecl) == TEMPLATE_DECL)\n     {\n-      TREE_TYPE (olddecl) = TREE_TYPE (newdecl);\n-      DECL_TEMPLATE_RESULT (olddecl) = DECL_TEMPLATE_RESULT (newdecl);\n-      DECL_TEMPLATE_PARMS (olddecl) = DECL_TEMPLATE_PARMS (newdecl);\n+      if (DECL_INITIAL (DECL_TEMPLATE_RESULT (olddecl)) == NULL_TREE)\n+\t{\n+\t  TREE_TYPE (olddecl) = TREE_TYPE (newdecl);\n+\t  DECL_TEMPLATE_RESULT (olddecl) = DECL_TEMPLATE_RESULT (newdecl);\n+\t  DECL_TEMPLATE_PARMS (olddecl) = DECL_TEMPLATE_PARMS (newdecl);\n+\t}\n       return 1;\n     }\n "}, {"sha": "45108ea9d0c2272b72d53e5f064418e8402bef4c", "filename": "gcc/cp/method.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37dac03995186a0404c5f17a39d69c8bb248dfc9/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37dac03995186a0404c5f17a39d69c8bb248dfc9/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=37dac03995186a0404c5f17a39d69c8bb248dfc9", "patch": "@@ -63,10 +63,10 @@ static void dicat PROTO((HOST_WIDE_INT, HOST_WIDE_INT));\n static void flush_repeats PROTO((tree));\n static void build_overload_identifier PROTO((tree));\n static void build_overload_nested_name PROTO((tree));\n-static void build_overload_int PROTO((tree));\n+static void build_overload_int PROTO((tree, int));\n static void build_overload_identifier PROTO((tree));\n static void build_qualified_name PROTO((tree));\n-static void build_overload_value PROTO((tree, tree));\n+static void build_overload_value PROTO((tree, tree, int));\n static char *thunk_printable_name PROTO((tree));\n static void do_build_assign_ref PROTO((tree));\n static void do_build_copy_constructor PROTO((tree));\n@@ -409,8 +409,9 @@ build_overload_nested_name (decl)\n /* Encoding for an INTEGER_CST value.  */\n \n static void\n-build_overload_int (value)\n+build_overload_int (value, in_template)\n      tree value;\n+     int in_template;\n {\n   if (TREE_CODE (value) == TEMPLATE_CONST_PARM)\n     {\n@@ -422,7 +423,7 @@ build_overload_int (value)\n \tOB_PUTC ('_');\n       return;\n     }\n-  else if (processing_template_decl\n+  else if (in_template\n \t   && TREE_CODE (value) != INTEGER_CST)\n     /* We don't ever want this output, but it's inconvenient not to\n        be able to build the string.  This should cause assembler\n@@ -451,8 +452,9 @@ build_overload_int (value)\n }\n \n static void\n-build_overload_value (type, value)\n+build_overload_value (type, value, in_template)\n      tree type, value;\n+     int in_template;\n {\n   while (TREE_CODE (value) == NON_LVALUE_EXPR\n \t || TREE_CODE (value) == NOP_EXPR)\n@@ -488,7 +490,7 @@ build_overload_value (type, value)\n     case ENUMERAL_TYPE:\n     case BOOLEAN_TYPE:\n       {\n-\tbuild_overload_int (value);\n+\tbuild_overload_int (value, in_template);\n \tnumeric_output_need_bar = 1;\n \treturn;\n       }\n@@ -574,9 +576,9 @@ build_overload_value (type, value)\n \t      if (TREE_CODE (a1) == INTEGER_CST\n \t\t  && TREE_CODE (a2) == INTEGER_CST)\n \t\t{\n-\t\t  build_overload_int (a1);\n+\t\t  build_overload_int (a1, in_template);\n \t\t  OB_PUTC ('_');\n-\t\t  build_overload_int (a2);\n+\t\t  build_overload_int (a2, in_template);\n \t\t  OB_PUTC ('_');\n \t\t  if (TREE_CODE (a3) == ADDR_EXPR)\n \t\t    {\n@@ -591,7 +593,7 @@ build_overload_value (type, value)\n \t\t  else if (TREE_CODE (a3) == INTEGER_CST)\n \t\t    {\n \t\t      OB_PUTC ('i');\n-\t\t      build_overload_int (a3);\n+\t\t      build_overload_int (a3, in_template);\n \t\t      numeric_output_need_bar = 1;\n \t\t      return;\n \t\t    }\n@@ -603,7 +605,7 @@ build_overload_value (type, value)\n       if (TREE_CODE (value) == INTEGER_CST\n \t  || TREE_CODE (value) == TEMPLATE_CONST_PARM)\n \t{\n-\t  build_overload_int (value);\n+\t  build_overload_int (value, in_template);\n \t  numeric_output_need_bar = 1;\n \t  return;\n \t}\n@@ -668,7 +670,7 @@ build_overload_identifier (name)\n \t\t\t     TREE_VEC_LENGTH (arglist), NULL_TREE);\n \t      /* It's a PARM_DECL.  */\n \t      build_overload_name (TREE_TYPE (parm), 0, 0);\n-\t      build_overload_value (parm, arg);\n+\t      build_overload_value (parm, arg, uses_template_parms (arglist));\n \t    }\n \t}\n     }"}]}