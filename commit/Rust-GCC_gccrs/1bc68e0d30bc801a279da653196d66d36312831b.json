{"sha": "1bc68e0d30bc801a279da653196d66d36312831b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJjNjhlMGQzMGJjODAxYTI3OWRhNjUzMTk2ZDY2ZDM2MzEyODMxYg==", "commit": {"author": {"name": "Claire Dross", "email": "dross@adacore.com", "date": "2019-07-10T09:02:36Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-10T09:02:36Z"}, "message": "[Ada] Fix possible crashes in GNATprove analysis of pointers\n\nThe new analysis of SPARK pointer rules could crash on some constructs.\nNow fixed.\n\nThere is no impact on compilation.\n\n2019-07-10  Claire Dross  <dross@adacore.com>\n\ngcc/ada/\n\n\t* sem_spark.adb (Check_Expression): Allow digits constraints as\n\tinput.\n\t(Illegal_Global_Usage): Pass in the entity.\n\t(Is_Subpath_Expression): New function to allow different nodes\n\tas inner parts of a path expression.\n\t(Read_Indexes): Allow concatenation and aggregates with box\n\texpressions.  Allow attributes Update and Loop_Entry.\n\t(Check_Expression): Allow richer membership test.\n\t(Check_Node): Ignore bodies of generics.\n\t(Get_Root_Object): Allow concatenation and attributes.\n\nFrom-SVN: r273348", "tree": {"sha": "a3e22ec7b1a7ecaecd2d30eba79e5e4cce854a75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3e22ec7b1a7ecaecd2d30eba79e5e4cce854a75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bc68e0d30bc801a279da653196d66d36312831b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bc68e0d30bc801a279da653196d66d36312831b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bc68e0d30bc801a279da653196d66d36312831b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bc68e0d30bc801a279da653196d66d36312831b/comments", "author": {"login": "clairedross", "id": 8180017, "node_id": "MDQ6VXNlcjgxODAwMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/8180017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clairedross", "html_url": "https://github.com/clairedross", "followers_url": "https://api.github.com/users/clairedross/followers", "following_url": "https://api.github.com/users/clairedross/following{/other_user}", "gists_url": "https://api.github.com/users/clairedross/gists{/gist_id}", "starred_url": "https://api.github.com/users/clairedross/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clairedross/subscriptions", "organizations_url": "https://api.github.com/users/clairedross/orgs", "repos_url": "https://api.github.com/users/clairedross/repos", "events_url": "https://api.github.com/users/clairedross/events{/privacy}", "received_events_url": "https://api.github.com/users/clairedross/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d036b2b8c29f8d53787417a1c0b0ddf814ab8b6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d036b2b8c29f8d53787417a1c0b0ddf814ab8b6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d036b2b8c29f8d53787417a1c0b0ddf814ab8b6b"}], "stats": {"total": 144, "additions": 124, "deletions": 20}, "files": [{"sha": "2ef2faf627ab4363c3f94ef91a72dbca42ef2ebe", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc68e0d30bc801a279da653196d66d36312831b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc68e0d30bc801a279da653196d66d36312831b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1bc68e0d30bc801a279da653196d66d36312831b", "patch": "@@ -1,3 +1,16 @@\n+2019-07-10  Claire Dross  <dross@adacore.com>\n+\n+\t* sem_spark.adb (Check_Expression): Allow digits constraints as\n+\tinput.\n+\t(Illegal_Global_Usage): Pass in the entity.\n+\t(Is_Subpath_Expression): New function to allow different nodes\n+\tas inner parts of a path expression.\n+\t(Read_Indexes): Allow concatenation and aggregates with box\n+\texpressions.  Allow attributes Update and Loop_Entry.\n+\t(Check_Expression): Allow richer membership test.\n+\t(Check_Node): Ignore bodies of generics.\n+\t(Get_Root_Object): Allow concatenation and attributes.\n+\n 2019-07-10  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch6.adb (Check_Discriminant_Conformance): Use Find_Type to"}, {"sha": "150433321ee97ea840c64f1ad90059eeebd325fe", "filename": "gcc/ada/sem_spark.adb", "status": "modified", "additions": 111, "deletions": 20, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc68e0d30bc801a279da653196d66d36312831b/gcc%2Fada%2Fsem_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc68e0d30bc801a279da653196d66d36312831b/gcc%2Fada%2Fsem_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_spark.adb?ref=1bc68e0d30bc801a279da653196d66d36312831b", "patch": "@@ -640,7 +640,8 @@ package body Sem_SPARK is\n    procedure Check_Expression (Expr : Node_Id; Mode : Extended_Checking_Mode);\n    pragma Precondition (Nkind_In (Expr, N_Index_Or_Discriminant_Constraint,\n                                         N_Range_Constraint,\n-                                        N_Subtype_Indication)\n+                                        N_Subtype_Indication,\n+                                        N_Digits_Constraint)\n                         or else Nkind (Expr) in N_Subexpr);\n \n    procedure Check_Globals (Subp : Entity_Id);\n@@ -738,7 +739,7 @@ package body Sem_SPARK is\n    --  the debugger to look into a hash table.\n    pragma Unreferenced (Hp);\n \n-   procedure Illegal_Global_Usage (N : Node_Or_Entity_Id);\n+   procedure Illegal_Global_Usage (N : Node_Or_Entity_Id; E : Entity_Id);\n    pragma No_Return (Illegal_Global_Usage);\n    --  A procedure that is called when deep globals or aliased globals are used\n    --  without any global aspect.\n@@ -750,6 +751,9 @@ package body Sem_SPARK is\n    function Is_Path_Expression (Expr : Node_Id) return Boolean;\n    --  Return whether Expr corresponds to a path\n \n+   function Is_Subpath_Expression (Expr : Node_Id) return Boolean;\n+   --  Return True if Expr can be part of a path expression\n+\n    function Is_Prefix_Or_Almost (Pref, Expr : Node_Id) return Boolean;\n    --  Determine if the candidate Prefix is indeed a prefix of Expr, or almost\n    --  a prefix, in the sense that they could still refer to overlapping memory\n@@ -1302,7 +1306,9 @@ package body Sem_SPARK is\n    begin\n       --  Only SPARK bodies are analyzed\n \n-      if No (Prag) or else Get_SPARK_Mode_From_Annotation (Prag) /= Opt.On then\n+      if No (Prag)\n+        or else Get_SPARK_Mode_From_Annotation (Prag) /= Opt.On\n+      then\n          return;\n       end if;\n \n@@ -1312,9 +1318,8 @@ package body Sem_SPARK is\n         and then Is_Anonymous_Access_Type (Etype (Spec_Id))\n         and then not Is_Traversal_Function (Spec_Id)\n       then\n-         Error_Msg_N\n-           (\"anonymous access type for result only allowed for traveral \"\n-            & \"functions\", Spec_Id);\n+         Error_Msg_N (\"anonymous access type for result only allowed for \"\n+                      & \"traveral functions\", Spec_Id);\n          return;\n       end if;\n \n@@ -1568,7 +1573,7 @@ package body Sem_SPARK is\n       --  Start of processing for Read_Indexes\n \n       begin\n-         if not Is_Path_Expression (Expr) then\n+         if not Is_Subpath_Expression (Expr) then\n             Error_Msg_N (\"name expected here for move/borrow/observe\", Expr);\n             return;\n          end if;\n@@ -1603,6 +1608,10 @@ package body Sem_SPARK is\n                Read_Params (Expr);\n                Check_Globals (Get_Called_Entity (Expr));\n \n+            when N_Op_Concat =>\n+               Read_Expression (Left_Opnd (Expr));\n+               Read_Expression (Right_Opnd (Expr));\n+\n             when N_Qualified_Expression\n                | N_Type_Conversion\n                | N_Unchecked_Type_Conversion\n@@ -1644,7 +1653,8 @@ package body Sem_SPARK is\n                      --  There can be only one element for a value of deep type\n                      --  in order to avoid aliasing.\n \n-                     if Is_Deep (Etype (Expression (Assoc)))\n+                     if not (Box_Present (Assoc))\n+                       and then Is_Deep (Etype (Expression (Assoc)))\n                        and then not Is_Singleton_Choice (CL)\n                      then\n                         Error_Msg_F\n@@ -1655,7 +1665,9 @@ package body Sem_SPARK is\n                      --  The subexpressions of an aggregate are moved as part\n                      --  of the implicit assignments.\n \n-                     Move_Expression (Expression (Assoc));\n+                     if not Box_Present (Assoc) then\n+                        Move_Expression (Expression (Assoc));\n+                     end if;\n \n                      Next (Assoc);\n                   end loop;\n@@ -1689,12 +1701,28 @@ package body Sem_SPARK is\n                      --  The subexpressions of an aggregate are moved as part\n                      --  of the implicit assignments.\n \n-                     Move_Expression (Expression (Assoc));\n+                     if not Box_Present (Assoc) then\n+                        Move_Expression (Expression (Assoc));\n+                     end if;\n \n                      Next (Assoc);\n                   end loop;\n                end;\n \n+            when N_Attribute_Reference =>\n+               pragma Assert\n+                 (Get_Attribute_Id (Attribute_Name (Expr)) =\n+                    Attribute_Loop_Entry\n+                  or else\n+                  Get_Attribute_Id (Attribute_Name (Expr)) = Attribute_Update);\n+\n+               Read_Expression (Prefix (Expr));\n+\n+               if Get_Attribute_Id (Attribute_Name (Expr)) = Attribute_Update\n+               then\n+                  Read_Expression_List (Expressions (Expr));\n+               end if;\n+\n             when others =>\n                raise Program_Error;\n          end case;\n@@ -1758,6 +1786,13 @@ package body Sem_SPARK is\n             end if;\n             return;\n \n+         when N_Digits_Constraint =>\n+            Read_Expression (Digits_Expression (Expr));\n+            if Present (Range_Constraint (Expr)) then\n+               Read_Expression (Range_Constraint (Expr));\n+            end if;\n+            return;\n+\n          when others =>\n             null;\n       end case;\n@@ -1767,12 +1802,28 @@ package body Sem_SPARK is\n       case N_Subexpr'(Nkind (Expr)) is\n \n          when N_Binary_Op\n-            | N_Membership_Test\n             | N_Short_Circuit\n          =>\n             Read_Expression (Left_Opnd (Expr));\n             Read_Expression (Right_Opnd (Expr));\n \n+         when N_Membership_Test =>\n+            Read_Expression (Left_Opnd (Expr));\n+            if Present (Right_Opnd (Expr)) then\n+               Read_Expression (Right_Opnd (Expr));\n+            else\n+               declare\n+                  Cases    : constant List_Id := Alternatives (Expr);\n+                  Cur_Case : Node_Id := First (Cases);\n+\n+               begin\n+                  while Present (Cur_Case) loop\n+                     Read_Expression (Cur_Case);\n+                     Next (Cur_Case);\n+                  end loop;\n+               end;\n+            end if;\n+\n          when N_Unary_Op =>\n             Read_Expression (Right_Opnd (Expr));\n \n@@ -1856,6 +1907,14 @@ package body Sem_SPARK is\n                   when Attribute_Modulus =>\n                      null;\n \n+                  --  The following attributes apply to types; there are no\n+                  --  expressions to read.\n+\n+                  when Attribute_Class\n+                     | Attribute_Storage_Size\n+                  =>\n+                     null;\n+\n                   --  Postconditions should not be analyzed\n \n                   when Attribute_Old\n@@ -2418,13 +2477,17 @@ package body Sem_SPARK is\n             Check_Call_Statement (N);\n \n          when N_Package_Body =>\n-            Check_Package_Body (N);\n+            if not Is_Generic_Unit (Unique_Defining_Entity (N)) then\n+               Check_Package_Body (N);\n+            end if;\n \n          when N_Subprogram_Body\n             | N_Entry_Body\n             | N_Task_Body\n          =>\n-            Check_Callable_Body (N);\n+            if not Is_Generic_Unit (Unique_Defining_Entity (N)) then\n+               Check_Callable_Body (N);\n+            end if;\n \n          when N_Protected_Body =>\n             Check_List (Declarations (N));\n@@ -3399,7 +3462,7 @@ package body Sem_SPARK is\n                if not Inside_Elaboration\n                  and then C = null\n                then\n-                  Illegal_Global_Usage (N);\n+                  Illegal_Global_Usage (N, N);\n                end if;\n \n                return (R => Unfolded, Tree_Access => C);\n@@ -3498,7 +3561,7 @@ package body Sem_SPARK is\n       Through_Traversal : Boolean := True) return Entity_Id\n    is\n    begin\n-      if not Is_Path_Expression (Expr) then\n+      if not Is_Subpath_Expression (Expr) then\n          Error_Msg_N (\"name expected here for path\", Expr);\n          return Empty;\n       end if;\n@@ -3517,12 +3580,13 @@ package body Sem_SPARK is\n             return Get_Root_Object (Prefix (Expr), Through_Traversal);\n \n          --  There is no root object for an (extension) aggregate, allocator,\n-         --  or NULL.\n+         --  concat, or NULL.\n \n          when N_Aggregate\n             | N_Allocator\n             | N_Extension_Aggregate\n             | N_Null\n+            | N_Op_Concat\n          =>\n             return Empty;\n \n@@ -3545,6 +3609,15 @@ package body Sem_SPARK is\n          =>\n             return Get_Root_Object (Expression (Expr), Through_Traversal);\n \n+         when N_Attribute_Reference =>\n+            pragma Assert\n+              (Get_Attribute_Id (Attribute_Name (Expr)) =\n+                 Attribute_Loop_Entry\n+               or else\n+               Get_Attribute_Id (Attribute_Name (Expr)) =\n+                 Attribute_Update);\n+            return Empty;\n+\n          when others =>\n             raise Program_Error;\n       end case;\n@@ -3646,9 +3719,10 @@ package body Sem_SPARK is\n    -- Illegal_Global_Usage --\n    --------------------------\n \n-   procedure Illegal_Global_Usage (N : Node_Or_Entity_Id)  is\n+   procedure Illegal_Global_Usage (N : Node_Or_Entity_Id; E : Entity_Id)\n+   is\n    begin\n-      Error_Msg_NE (\"cannot use global variable & of deep type\", N, N);\n+      Error_Msg_NE (\"cannot use global variable & of deep type\", N, E);\n       Error_Msg_N (\"\\without prior declaration in a Global aspect\", N);\n       Errout.Finalize (Last_Call => True);\n       Errout.Output_Messages;\n@@ -3668,7 +3742,7 @@ package body Sem_SPARK is\n          when E_Array_Type\n             | E_Array_Subtype\n          =>\n-            return Is_Deep (Component_Type (Typ));\n+            return Is_Deep (Component_Type (Underlying_Type (Typ)));\n \n          when Record_Kind =>\n             declare\n@@ -3860,6 +3934,23 @@ package body Sem_SPARK is\n       end if;\n    end Is_Prefix_Or_Almost;\n \n+   ---------------------------\n+   -- Is_Subpath_Expression --\n+   ---------------------------\n+\n+   function Is_Subpath_Expression (Expr : Node_Id) return Boolean is\n+   begin\n+      return Is_Path_Expression (Expr)\n+        or else (Nkind (Expr) = N_Attribute_Reference\n+                  and then\n+                    (Get_Attribute_Id (Attribute_Name (Expr)) =\n+                       Attribute_Update\n+                     or else\n+                     Get_Attribute_Id (Attribute_Name (Expr)) =\n+                       Attribute_Loop_Entry))\n+       or else Nkind (Expr) = N_Op_Concat;\n+   end Is_Subpath_Expression;\n+\n    ---------------------------\n    -- Is_Traversal_Function --\n    ---------------------------\n@@ -4397,7 +4488,7 @@ package body Sem_SPARK is\n       if not Inside_Elaboration\n         and then Get (Current_Perm_Env, Root) = null\n       then\n-         Illegal_Global_Usage (Expr);\n+         Illegal_Global_Usage (Expr, Root);\n       end if;\n \n       --  During elaboration, only the validity of operations is checked, no"}]}