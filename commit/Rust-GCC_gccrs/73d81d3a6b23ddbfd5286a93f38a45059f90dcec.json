{"sha": "73d81d3a6b23ddbfd5286a93f38a45059f90dcec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNkODFkM2E2YjIzZGRiZmQ1Mjg2YTkzZjM4YTQ1MDU5ZjkwZGNlYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-04-28T13:21:54Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-04-28T13:21:54Z"}, "message": "re PR libstdc++/60333 (type_traits make_signed, make_unsigned missing support for long long enumerations)\n\n\tPR libstdc++/60333\n\t* include/std/type_traits (__make_unsigned_selector<_Tp, false, true>):\n\tHandle enumeration types larger than sizeof(long).\n\t(__make_signed_selector<_Tp, false, true>): Find unsigned type then\n\tmake it signed.\n\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust dg-error.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n\tLikewise.\n\t* testsuite/20_util/make_signed/requirements/typedefs-3.cc: New.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc: Adjust\n\tdg-error.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs-3.cc: New.\n\nFrom-SVN: r222526", "tree": {"sha": "81b826e6a1419361116b156d8b653fa70d9ab700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81b826e6a1419361116b156d8b653fa70d9ab700"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73d81d3a6b23ddbfd5286a93f38a45059f90dcec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73d81d3a6b23ddbfd5286a93f38a45059f90dcec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73d81d3a6b23ddbfd5286a93f38a45059f90dcec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73d81d3a6b23ddbfd5286a93f38a45059f90dcec/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "956d18149eb636d0dd5987c7020873314a869a98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/956d18149eb636d0dd5987c7020873314a869a98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/956d18149eb636d0dd5987c7020873314a869a98"}], "stats": {"total": 177, "additions": 161, "deletions": 16}, "files": [{"sha": "a38b6e3370358040cf2cd3ff1b7096dc15072c45", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d81d3a6b23ddbfd5286a93f38a45059f90dcec/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d81d3a6b23ddbfd5286a93f38a45059f90dcec/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=73d81d3a6b23ddbfd5286a93f38a45059f90dcec", "patch": "@@ -1,5 +1,18 @@\n 2015-04-28  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/60333\n+\t* include/std/type_traits (__make_unsigned_selector<_Tp, false, true>):\n+\tHandle enumeration types larger than sizeof(long).\n+\t(__make_signed_selector<_Tp, false, true>): Find unsigned type then\n+\tmake it signed.\n+\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust dg-error.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\t* testsuite/20_util/make_signed/requirements/typedefs-3.cc: New.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc: Adjust\n+\tdg-error.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs-3.cc: New.\n+\n \tPR libstdc++/61645\n \t* include/bits/forward_list.h (forward_list::splice_after): Add\n \tnoexcept."}, {"sha": "b8ec61f6892a31e5d02f591b54aa9b4c04654c4d", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d81d3a6b23ddbfd5286a93f38a45059f90dcec/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d81d3a6b23ddbfd5286a93f38a45059f90dcec/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=73d81d3a6b23ddbfd5286a93f38a45059f90dcec", "patch": "@@ -1739,13 +1739,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);\n       static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned short);\n       static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned int);\n-      typedef conditional<__b2, unsigned int, unsigned long> __cond2;\n+      static const bool __b3 = sizeof(_Tp) <= sizeof(unsigned long);\n+      typedef conditional<__b3, unsigned long, unsigned long long> __cond3;\n+      typedef typename __cond3::type __cond3_type;\n+      typedef conditional<__b2, unsigned int, __cond3_type> __cond2;\n       typedef typename __cond2::type __cond2_type;\n       typedef conditional<__b1, unsigned short, __cond2_type> __cond1;\n       typedef typename __cond1::type __cond1_type;\n \n+      typedef typename conditional<__b0, __smallest, __cond1_type>::type\n+\t__unsigned_type;\n+      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;\n+\n     public:\n-      typedef typename conditional<__b0, __smallest, __cond1_type>::type __type;\n+      typedef typename __cv_unsigned::__type __type;\n     };\n \n   // Given an integral/enum type, return the corresponding unsigned\n@@ -1846,18 +1853,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     class __make_signed_selector<_Tp, false, true>\n     {\n-      // With -fshort-enums, an enum may be as small as a char.\n-      typedef signed char __smallest;\n-      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);\n-      static const bool __b1 = sizeof(_Tp) <= sizeof(signed short);\n-      static const bool __b2 = sizeof(_Tp) <= sizeof(signed int);\n-      typedef conditional<__b2, signed int, signed long> __cond2;\n-      typedef typename __cond2::type __cond2_type;\n-      typedef conditional<__b1, signed short, __cond2_type> __cond1;\n-      typedef typename __cond1::type __cond1_type;\n+      typedef typename __make_unsigned_selector<_Tp>::__type __unsigned_type;\n \n     public:\n-      typedef typename conditional<__b0, __smallest, __cond1_type>::type __type;\n+      typedef typename __make_signed_selector<__unsigned_type>::__type __type;\n     };\n \n   // Given an integral/enum type, return the corresponding signed"}, {"sha": "263fff2d4df8aab51b7d5d170e0ac1541f5aae75", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d81d3a6b23ddbfd5286a93f38a45059f90dcec/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d81d3a6b23ddbfd5286a93f38a45059f90dcec/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc?ref=73d81d3a6b23ddbfd5286a93f38a45059f90dcec", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 2204 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 2203 }\n \n #include <utility>\n "}, {"sha": "b4862866cea9922bfd7d4a4633ca7b0fa0da326f", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs-3.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d81d3a6b23ddbfd5286a93f38a45059f90dcec/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d81d3a6b23ddbfd5286a93f38a45059f90dcec/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-3.cc?ref=73d81d3a6b23ddbfd5286a93f38a45059f90dcec", "patch": "@@ -0,0 +1,67 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+template<typename T, typename I0, typename... I>\n+struct smallest_rank\n+: std::conditional< sizeof(T) == sizeof(I0),\n+                    I0,\n+                    typename smallest_rank<T, I...>::type >\n+{ };\n+\n+template<typename T, typename I0>\n+struct smallest_rank<T, I0>\n+{ using type = I0; };\n+\n+template<typename T>\n+using smallest_rank_t\n+  = typename smallest_rank<typename std::remove_cv<T>::type,\n+                           signed char, signed short, signed int,\n+                           signed long, signed long long>::type;\n+\n+using std::make_signed;\n+using std::is_same;\n+\n+enum E1 : char { };\n+using I1 = smallest_rank_t<E1>;\n+static_assert(is_same<make_signed<E1>::type,       I1>::value, \"\");\n+static_assert(is_same<make_signed<E1 const>::type, I1 const>::value, \"\");\n+\n+enum E2 : short { };\n+using I2 = smallest_rank_t<E2>;\n+static_assert(is_same<make_signed<E2>::type,       I2>::value, \"\");\n+static_assert(is_same<make_signed<E2 const>::type, I2 const>::value, \"\");\n+\n+enum E3 : int { };\n+using I3 = smallest_rank_t<E3>;\n+static_assert(is_same<make_signed<E3>::type,       I3>::value, \"\");\n+static_assert(is_same<make_signed<E3 const>::type, I3 const>::value, \"\");\n+\n+enum E4 : long { };\n+using I4 = smallest_rank_t<E4>;\n+static_assert(is_same<make_signed<E4>::type,       I4>::value, \"\");\n+static_assert(is_same<make_signed<E4 const>::type, I4 const>::value, \"\");\n+\n+// PI libstdc++/60333\n+enum E5 : long long { };\n+using I5 = smallest_rank_t<E5>;\n+static_assert(is_same<make_signed<E5>::type, I5>::value, \"\");\n+static_assert(is_same<make_signed<E5 const>::type, I5 const>::value, \"\");"}, {"sha": "5fbf311516a78cb39a83a5a0e971ab10d35101a3", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d81d3a6b23ddbfd5286a93f38a45059f90dcec/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d81d3a6b23ddbfd5286a93f38a45059f90dcec/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=73d81d3a6b23ddbfd5286a93f38a45059f90dcec", "patch": "@@ -48,5 +48,4 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1869 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1833 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1868 }"}, {"sha": "07c35bcc5ccae91ec72f60c5f20b3838b49093f5", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs-3.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d81d3a6b23ddbfd5286a93f38a45059f90dcec/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d81d3a6b23ddbfd5286a93f38a45059f90dcec/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-3.cc?ref=73d81d3a6b23ddbfd5286a93f38a45059f90dcec", "patch": "@@ -0,0 +1,67 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+template<typename T, typename I0, typename... I>\n+struct smallest_rank\n+: std::conditional< sizeof(T) == sizeof(I0),\n+                    I0,\n+                    typename smallest_rank<T, I...>::type >\n+{ };\n+\n+template<typename T, typename I0>\n+struct smallest_rank<T, I0>\n+{ using type = I0; };\n+\n+template<typename T>\n+using smallest_rank_t\n+  = typename smallest_rank<typename std::remove_cv<T>::type,\n+                           unsigned char, unsigned short, unsigned int,\n+                           unsigned long, unsigned long long>::type;\n+\n+using std::make_unsigned;\n+using std::is_same;\n+\n+enum E1 : char { };\n+using I1 = smallest_rank_t<E1>;\n+static_assert(is_same<make_unsigned<E1>::type, I1>::value, \"\");\n+static_assert(is_same<make_unsigned<E1 const>::type, I1 const>::value, \"\");\n+\n+enum E2 : short { };\n+using I2 = smallest_rank_t<E2>;\n+static_assert(is_same<make_unsigned<E2>::type, I2>::value, \"\");\n+static_assert(is_same<make_unsigned<E2 const>::type, I2 const>::value, \"\");\n+\n+enum E3 : int { };\n+using I3 = smallest_rank_t<E3>;\n+static_assert(is_same<make_unsigned<E3>::type, I3>::value, \"\");\n+static_assert(is_same<make_unsigned<E3 const>::type, I3 const>::value, \"\");\n+\n+enum E4 : long { };\n+using I4 = smallest_rank_t<E4>;\n+static_assert(is_same<make_unsigned<E4>::type, I4>::value, \"\");\n+static_assert(is_same<make_unsigned<E4 const>::type, I4 const>::value, \"\");\n+\n+// PI libstdc++/60333\n+enum E5 : long long { };\n+using I5 = smallest_rank_t<E5>;\n+static_assert(is_same<make_unsigned<E5>::type, I5>::value, \"\");\n+static_assert(is_same<make_unsigned<E5 const>::type, I5 const>::value, \"\");"}, {"sha": "4e54b1842d79602648e0f3a84a65252b412cb8b9", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d81d3a6b23ddbfd5286a93f38a45059f90dcec/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d81d3a6b23ddbfd5286a93f38a45059f90dcec/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=73d81d3a6b23ddbfd5286a93f38a45059f90dcec", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1757 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1764 }\n // { dg-error \"declaration of\" \"\" { target *-*-* } 1721 }"}]}