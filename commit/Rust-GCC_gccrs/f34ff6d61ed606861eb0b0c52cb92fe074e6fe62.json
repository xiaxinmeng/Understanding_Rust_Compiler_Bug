{"sha": "f34ff6d61ed606861eb0b0c52cb92fe074e6fe62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM0ZmY2ZDYxZWQ2MDY4NjFlYjBiMGM1MmNiOTJmZTA3NGU2ZmU2Mg==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "2000-12-10T05:32:49Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2000-12-10T05:32:49Z"}, "message": "Top level ChangeLog:\n\n2000-12-09  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n\t* libjava: Imported from /cvs/java.\n\t* libffi: Likewise.\n\t* Boehm-gc: Likewise.\n\nlibjava/ChangeLog:\n\n2000-12-09  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n\t* Makefile.am (data_DATA): libgcj.jar replaces libgcj.zip.\n\t(ZIP): Points at fastjar instead of zip.\n\t(libgcj_la_DEPENDENCIES): libgcj.jar replaces libgcj.zip.\n\t(libgcj_la_LDFLAGS): Correctly point at libsupc++.\n\t(libgcjx_la_DEPENDENCIES): libgcj.jar replaces libgcj.zip.\n\t(libgcjx_la_LDFLAGS): Correctly point at libsupc++.\n\t($(java_source_files:.java=.class):): libgcj.jar replaces libgcj.zip.\n\t($(x_java_source_files:.java=.class):): Likewise.\n\t(libgcj.jar:): Replaces libgcj.zip:, builds libgcj.jar and uses\n\tfastar's flags.\n\t(CLEANFILES): libgcj.jar replaces libgcj.zip.\n\t(java/lang/ClassLoader.h:): Depends on libgcj.jar.\n\t(gnu/gcj/runtime/FirstThread.h:, java/lang/Thread.h:,\n\tjava/lang/String.h:, java/lang/reflect/Constructor.h:,\n\tjava/lang/reflect/Field.h:, java/lang/reflect/Method.h:,\n\tgnu/gcj/runtime/VMClassLoader.h:,\n\tjava/io/ObjectInputStream$$GetField.h:,\n\tjava/io/ObjectOutputStream$$PutField.h:, header-check:): Likewise.\n\t(Makefile.in): Rebuilt.\n\ngcc/java/ChangeLog:\n\n2000-12-09  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n\t* Make-lang.in (java/jcf-path.o:): libgcj.jar replaces libgcj.zip.\n\tjcf-path.c: Likewise.\n\nFrom-SVN: r38167", "tree": {"sha": "3ba705331b477782724956856cd993cf566c0995", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ba705331b477782724956856cd993cf566c0995"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f34ff6d61ed606861eb0b0c52cb92fe074e6fe62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f34ff6d61ed606861eb0b0c52cb92fe074e6fe62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f34ff6d61ed606861eb0b0c52cb92fe074e6fe62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f34ff6d61ed606861eb0b0c52cb92fe074e6fe62/comments", "author": null, "committer": null, "parents": [{"sha": "bfcafa4fbe7ee3063f359b2e26db81a96f4bfa9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfcafa4fbe7ee3063f359b2e26db81a96f4bfa9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfcafa4fbe7ee3063f359b2e26db81a96f4bfa9c"}], "stats": {"total": 159, "additions": 98, "deletions": 61}, "files": [{"sha": "585cfb9cf57cdee19899b8b34f6ae966e65e24d2", "filename": "ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f34ff6d61ed606861eb0b0c52cb92fe074e6fe62/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f34ff6d61ed606861eb0b0c52cb92fe074e6fe62/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=f34ff6d61ed606861eb0b0c52cb92fe074e6fe62", "patch": "@@ -1,3 +1,9 @@\n+2000-12-09  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* libjava: Imported from /cvs/java.\n+\t* libffi: Likewise.\n+\t* Boehm-gc: Likewise.\n+\n 2000-12-09  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* configure.in (target_libs): Revert 2000-12-08 patch."}, {"sha": "c5fcd7980d8651ed1d36326f5b5ccc232e97f796", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f34ff6d61ed606861eb0b0c52cb92fe074e6fe62/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f34ff6d61ed606861eb0b0c52cb92fe074e6fe62/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=f34ff6d61ed606861eb0b0c52cb92fe074e6fe62", "patch": "@@ -1,3 +1,8 @@\n+2000-12-09  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* Make-lang.in (java/jcf-path.o:): libgcj.jar replaces libgcj.zip.\n+\tjcf-path.c: Likewise.\n+\n 2000-12-09  Anthony Green  <green@redhat.com>\n \n \t* zipfile.h (ZipDirectory): Declare size, uncompressed_size,"}, {"sha": "7de2de8ff766b1d6ab0235ce6238b931f6bc25ab", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f34ff6d61ed606861eb0b0c52cb92fe074e6fe62/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f34ff6d61ed606861eb0b0c52cb92fe074e6fe62/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=f34ff6d61ed606861eb0b0c52cb92fe074e6fe62", "patch": "@@ -271,6 +271,6 @@ java/jcf-io.o: java/jcf-io.c $(CONFIG_H) system.h $(JAVA_TREE_H)\n # jcf-path.o needs a -D.\n java/jcf-path.o: java/jcf-path.c $(CONFIG_H) system.h java/jcf.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t  -DLIBGCJ_ZIP_FILE='\"$(prefix)/share/libgcj.zip\"' \\\n+\t  -DLIBGCJ_ZIP_FILE='\"$(prefix)/share/libgcj.jar\"' \\\n \t  $(srcdir)/java/jcf-path.c $(OUTPUT_OPTION)\n "}, {"sha": "a9e1bda70aa99dedfc77910475d5cb70d8017f04", "filename": "gcc/java/jcf-path.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f34ff6d61ed606861eb0b0c52cb92fe074e6fe62/gcc%2Fjava%2Fjcf-path.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f34ff6d61ed606861eb0b0c52cb92fe074e6fe62/gcc%2Fjava%2Fjcf-path.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-path.c?ref=f34ff6d61ed606861eb0b0c52cb92fe074e6fe62", "patch": "@@ -69,7 +69,7 @@ static void add_path PARAMS ((struct entry **, const char *, int));\n \n /* We support several different ways to set the class path.\n \n-   built-in system directory (only libgcj.zip)\n+   built-in system directory (only libgcj.jar)\n    CLASSPATH environment variable\n    -CLASSPATH overrides CLASSPATH\n    -classpath option - overrides CLASSPATH, -CLASSPATH, and built-in\n@@ -155,7 +155,7 @@ add_entry (entp, filename, is_system)\n     {\n       n->flags |= FLAG_ZIP;\n       /* If the user uses -classpath then he'll have to include\n-\t libgcj.zip in the value.  We check for this in a simplistic\n+\t libgcj.jar in the value.  We check for this in a simplistic\n \t way.  Symlinks will fool this test.  This is only used for\n \t -MM and -MMD, so it probably isn't terribly important.  */\n       if (! strcmp (filename, LIBGCJ_ZIP_FILE))\n@@ -254,7 +254,7 @@ jcf_path_init ()\n \n       strcpy (try + len, \"share\");\n       strcat (try, sep);\n-      strcat (try, \"libgcj.zip\");\n+      strcat (try, \"libgcj.jar\");\n       if (! stat (try, &stat_b))\n \t{\n \t  add_entry (&sys_dirs, try, 1);\n@@ -266,7 +266,7 @@ jcf_path_init ()\n \t  strcat (try, sep);\n \t  strcat (try, \"share\");\n \t  strcat (try, sep);\n-\t  strcat (try, \"libgcj.zip\");\n+\t  strcat (try, \"libgcj.jar\");\n \t  if (! stat (try, &stat_b))\n \t    {\n \t      add_entry (&sys_dirs, try, 1);"}, {"sha": "6ce3331b7ac8222da35ad3d3d46e01b3b1017e9b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f34ff6d61ed606861eb0b0c52cb92fe074e6fe62/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f34ff6d61ed606861eb0b0c52cb92fe074e6fe62/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f34ff6d61ed606861eb0b0c52cb92fe074e6fe62", "patch": "@@ -1,3 +1,25 @@\n+2000-12-09  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* Makefile.am (data_DATA): libgcj.jar replaces libgcj.zip.\n+\t(ZIP): Points at fastjar instead of zip.\n+\t(libgcj_la_DEPENDENCIES): libgcj.jar replaces libgcj.zip.\n+\t(libgcj_la_LDFLAGS): Correctly point at libsupc++.\n+\t(libgcjx_la_DEPENDENCIES): libgcj.jar replaces libgcj.zip.\n+\t(libgcjx_la_LDFLAGS): Correctly point at libsupc++.\n+\t($(java_source_files:.java=.class):): libgcj.jar replaces libgcj.zip.\n+\t($(x_java_source_files:.java=.class):): Likewise.\n+\t(libgcj.jar:): Replaces libgcj.zip:, builds libgcj.jar and uses\n+\tfastar's flags.\n+\t(CLEANFILES): libgcj.jar replaces libgcj.zip.\n+\t(java/lang/ClassLoader.h:): Depends on libgcj.jar.\n+\t(gnu/gcj/runtime/FirstThread.h:, java/lang/Thread.h:,\n+\tjava/lang/String.h:, java/lang/reflect/Constructor.h:,\n+\tjava/lang/reflect/Field.h:, java/lang/reflect/Method.h:,\n+\tgnu/gcj/runtime/VMClassLoader.h:,\n+\tjava/io/ObjectInputStream$$GetField.h:, \n+\tjava/io/ObjectOutputStream$$PutField.h:, header-check:): Likewise.\n+\t(Makefile.in): Rebuilt.\n+\t\n 2000-12-08  Tom Tromey  <tromey@redhat.com>\n \n \tFrom Phil Edwards:"}, {"sha": "18881188d5df1ce210c30268af3f52233a793543", "filename": "libjava/Makefile.am", "status": "modified", "additions": 33, "deletions": 31, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f34ff6d61ed606861eb0b0c52cb92fe074e6fe62/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f34ff6d61ed606861eb0b0c52cb92fe074e6fe62/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=f34ff6d61ed606861eb0b0c52cb92fe074e6fe62", "patch": "@@ -31,7 +31,7 @@ endif\n \n toolexeclib_LTLIBRARIES = libgcj.la $(cond_x_ltlibrary)\n toolexeclib_DATA = libgcj.spec\n-data_DATA = libgcj.zip\n+data_DATA = libgcj.jar\n \n if NEEDS_DATA_START\n toolexeclib_LIBRARIES = libgcjdata.a\n@@ -57,9 +57,9 @@ if CANADIAN\n if NULL_TARGET\n ## In this case, gcj is found outside the build tree.  However, zip is\n ## found in the build tree.\n-ZIP = $(MULTIBUILDTOP)../$(COMPPATH)/zip/zip$(EXEEXT)\n+ZIP = $(MULTIBUILDTOP)../$(COMPPATH)/fastjar/fastjar$(EXEEXT)\n else\n-ZIP = zip\n+ZIP = fastjar\n endif\n GCJH = gcjh\n else # CANADIAN\n@@ -68,7 +68,7 @@ else # CANADIAN\n ## definition of GCJ won't work; instead we resort to this ugly\n ## definition that gives us absolute paths.\n GCJH = $(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n-ZIP = $(MULTIBUILDTOP)../$(COMPPATH)/zip/zip$(EXEEXT)\n+ZIP = $(MULTIBUILDTOP)../$(COMPPATH)/fastjar/fastjar$(EXEEXT)\n endif # CANADIAN\n \n GCJCOMPILE = $(LIBTOOL) --tag=GCJ --mode=compile $(GCJ) -fassume-compiled -fclasspath=$(here) -L$(here) $(JC1FLAGS) -MD -MT $@ -MF $(@:.lo=.d) -c\n@@ -108,7 +108,7 @@ INCLUDES = -I$(top_srcdir) -Iinclude -I$(top_srcdir)/include \\\n ## ################################################################\n \n ##\n-## How to build libgcj.a and libgcj.zip\n+## How to build libgcj.a and libgcj.jar\n ##\n \n ## Objects from C++ sources in subdirs.\n@@ -129,21 +129,23 @@ libgcj_la_SOURCES = prims.cc posix.cc jni.cc exception.cc \\\n \t$(nat_source_files)\n EXTRA_libgcj_la_SOURCES = boehm.cc nogc.cc posix-threads.cc no-threads.cc \\\n \t$(c_source_files) $(java_source_files) $(built_java_source_files)\n-libgcj_la_DEPENDENCIES = libgcj.zip $(javao_files) \\\n+libgcj_la_DEPENDENCIES = libgcj.jar $(javao_files) \\\n \t$(c_files) $(GCOBJS) $(THREADOBJS) $(LIBLTDL)\n libgcj_la_LIBADD = $(javao_files) $(c_files) $(GCOBJS) \\\n \t$(THREADOBJS) $(libffi_files) $(LIBLTDL)\n-libgcj_la_LDFLAGS = -lsupc++ -rpath $(toolexeclibdir) \\\n+libgcj_la_LDFLAGS = -L$(here)/../libstdc++-v3/libsupc++ -lsupc++ \\\n+\t-rpath $(toolexeclibdir) \\\n ## The mysterious backslash is consumed by make.\n \t-version-info `grep -v '^\\#' $(srcdir)/libtool-version`\n libgcj_la_LINK = $(LIBLINK)\n \n libgcjx_la_SOURCES = $(x_nat_source_files)\n EXTRA_libgcjx_la_SOURCES = $(x_java_source_files)\n-libgcjx_la_DEPENDENCIES = libgcj.zip $(x_javao_files)\n+libgcjx_la_DEPENDENCIES = libgcj.jar $(x_javao_files)\n libgcjx_la_LIBADD = $(x_javao_files)\n libgcjx_la_LDFLAGS = @X_PRE_LIBS@ @X_LIBS@ -lX11 @X_EXTRA_LIBS@ \\\n-        -lsupc++ -rpath $(toolexeclibdir) \\\n+        -L$(here)/../libstdc++-v3/libsupc++ -lsupc++ \\\n+        -rpath $(toolexeclibdir) \\\n ## The mysterious backslash is consumed by make.\n         -version-info `grep -v '^\\#' $(srcdir)/libtool-version`\n libgcjx_la_LINK = $(LIBLINK)\n@@ -162,12 +164,12 @@ install-exec-hook:\n ## a .java file with some other class which is caught.  Note that we\n ## only want to create headers for those files which do not have\n ## hand-maintained headers.\n-$(java_source_files:.java=.class): libgcj.zip\n+$(java_source_files:.java=.class): libgcj.jar\n \n-## The .class files for X will not be included in libgcj.zip, but the\n-## rule for libgcj.zip will cause all out-of-date .class files to be\n+## The .class files for X will not be included in libgcj.jar, but the\n+## rule for libgcj.jar will cause all out-of-date .class files to be\n ## built. We need this to generate headers for the nat-files.\n-$(x_java_source_files:.java=.class): libgcj.zip\n+$(x_java_source_files:.java=.class): libgcj.jar\n \n ## FIXME: this isn't really correct.\n $(built_java_source_files:.java=.class): $(built_java_source_files)\n@@ -182,11 +184,11 @@ $(built_java_source_files:.java=.class): $(built_java_source_files)\n \n ## We have the zip file depend on the java sources and not the class\n ## files, because we don't know the names of all the class files.\n-## FIXME: this method fails in a peculiar case: if libgcj.zip is\n+## FIXME: this method fails in a peculiar case: if libgcj.jar is\n ## up-to-date, and foo.class is removed, and bar.java is touched, then\n-## `make libgcj.zip' will not rebuilt foo.class.  That's because\n-## libgcj.zip is not out-of-date with respect to foo.java.\n-libgcj.zip: $(java_source_files) $(x_java_source_files)\n+## `make libgcj.jar' will not rebuilt foo.class.  That's because\n+## libgcj.jar is not out-of-date with respect to foo.java.\n+libgcj.jar: $(java_source_files) $(x_java_source_files)\n ## Create a list of all Java sources, without exceeding any shell limits.\n \t@: $(shell echo Creating list of files to compile...) $(shell rm -f tmp-list || :) $(shell touch tmp-list) $(foreach source,$(subst $(srcdir)/,,$?),$(shell echo $(source) >> tmp-list))\n ## FIXME: this ought to depend on built_java_source_files, but right\n@@ -202,14 +204,14 @@ libgcj.zip: $(java_source_files) $(x_java_source_files)\n \t    || case \"$$amf\" in *=*) exit 1;; *k*) fail=yes ;; *) exit 1;; esac; \\\n \tdone; \\\n \ttest \"$$fail\" = no\n-\t-@rm -f tmp-list libgcj.zip\n+\t-@rm -f tmp-list libgcj.jar\n ## Note that we explicitly want to include directory information.\n \tfind java gnu -type d -o -type f -name '*.class' | \\\n \t  sed -e '/\\/\\./d' -e '/\\/xlib/d' | \\\n-\t  $(ZIP) libgcj -@ -n .class\n+\t  $(ZIP) cfM0E@ $@\n \n MOSTLYCLEANFILES = $(javao_files) $(nat_files) $(nat_headers) $(c_files) $(x_javao_files) $(x_nat_files) $(x_nat_headers)\n-CLEANFILES = tmp-list libgcj.zip\n+CLEANFILES = tmp-list libgcj.jar\n \n clean-local:\n ## We just remove every .class file that was created.\n@@ -265,20 +267,20 @@ nat_headers = $(ordinary_java_source_files:.java=.h) \\\n \n x_nat_headers = $(x_java_source_files:.java=.h)\n \n-java/lang/ClassLoader.h: java/lang/ClassLoader.class libgcj.zip\n+java/lang/ClassLoader.h: java/lang/ClassLoader.class libgcj.jar\n \t$(GCJH) -classpath $(top_builddir) \\\n \t\t-friend 'jclass _Jv_FindClass (_Jv_Utf8Const *name, java::lang::ClassLoader *loader);' \\\n \t\t-friend 'void _Jv_RunMain (const char *name, int argc, const char **argv, bool is_jar);' \\\n \t\t$(basename $<)\n \n ## Our internal main program needs to be able to create a FirstThread.\n-gnu/gcj/runtime/FirstThread.h: gnu/gcj/runtime/FirstThread.class libgcj.zip\n+gnu/gcj/runtime/FirstThread.h: gnu/gcj/runtime/FirstThread.class libgcj.jar\n \t$(GCJH) -classpath $(top_builddir) \\\n \t\t-friend 'void JvRunMain (jclass, int, const char **);' \\\n \t\t-friend 'void _Jv_RunMain (const char*, int, const char **);' \\\n \t\t$(basename $<)\n \n-java/lang/Thread.h: java/lang/Thread.class libgcj.zip\n+java/lang/Thread.h: java/lang/Thread.class libgcj.jar\n \t$(GCJH) -classpath $(top_builddir) \\\n \t\t-prepend 'class _Jv_JNIEnv;' \\\n \t\t-prepend 'extern \"Java\" { namespace gnu { namespace gcj { namespace jni { class NativeThread; } } } };' \\\n@@ -289,7 +291,7 @@ java/lang/Thread.h: java/lang/Thread.class libgcj.zip\n \t\t-friend 'class gnu::gcj::jni::NativeThread;' \\\n \t\t$(basename $<)\n \n-java/lang/String.h: java/lang/String.class libgcj.zip\n+java/lang/String.h: java/lang/String.class libgcj.jar\n \t$(GCJH) -classpath $(top_builddir) \\\n \t    -friend 'jchar* _Jv_GetStringChars (jstring str);' \\\n \t    -friend 'jstring* _Jv_StringFindSlot (jchar*, jint, jint);' \\\n@@ -299,37 +301,37 @@ java/lang/String.h: java/lang/String.class libgcj.zip\n \t    -friend 'jstring _Jv_AllocString (jsize);' \\\n \t    $(basename $<)\n \n-java/lang/reflect/Constructor.h: java/lang/reflect/Constructor.class libgcj.zip\n+java/lang/reflect/Constructor.h: java/lang/reflect/Constructor.class libgcj.jar\n \t$(GCJH) -classpath $(top_builddir) \\\n \t    -friend 'jmethodID _Jv_FromReflectedConstructor (java::lang::reflect::Constructor *);' \\\n \t    -friend 'class java::lang::Class;' \\\n \t    -friend 'jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);' \\\n \t    $(basename $<)\n \n-java/lang/reflect/Field.h: java/lang/reflect/Field.class libgcj.zip\n+java/lang/reflect/Field.h: java/lang/reflect/Field.class libgcj.jar\n \t$(GCJH) -classpath $(top_builddir) \\\n \t    -friend 'jfieldID _Jv_FromReflectedField (java::lang::reflect::Field *);' \\\n \t    -friend 'jobject _Jv_JNI_ToReflectedField (_Jv_JNIEnv*, jclass, jfieldID, jboolean);' \\\n \t    -friend 'class java::lang::Class;' \\\n \t    $(basename $<)\n \n-java/lang/reflect/Method.h: java/lang/reflect/Method.class libgcj.zip\n+java/lang/reflect/Method.h: java/lang/reflect/Method.class libgcj.jar\n \t$(GCJH) -classpath $(top_builddir) \\\n \t    -friend 'jmethodID _Jv_FromReflectedMethod (java::lang::reflect::Method *);' \\\n \t    -friend 'class java::lang::Class;' \\\n \t    -friend 'jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);' \\\n \t    $(basename $<)\n \n-gnu/gcj/runtime/VMClassLoader.h: gnu/gcj/runtime/VMClassLoader.class libgcj.zip\n+gnu/gcj/runtime/VMClassLoader.h: gnu/gcj/runtime/VMClassLoader.class libgcj.jar\n \t$(GCJH) -classpath $(top_builddir) \\\n \t    -friend 'class java::lang::ClassLoader;' \\\n \t    $(basename $<)\n \n-java/io/ObjectInputStream$$GetField.h: libgcj.zip\n+java/io/ObjectInputStream$$GetField.h: libgcj.jar\n \t$(GCJH) -classpath $(top_builddir) \\\n \t'java/io/ObjectInputStream$$GetField'\n \n-java/io/ObjectOutputStream$$PutField.h: libgcj.zip\n+java/io/ObjectOutputStream$$PutField.h: libgcj.jar\n \t$(GCJH) -classpath $(top_builddir) \\\n \t'java/io/ObjectOutputStream$$PutField'\n \n@@ -370,7 +372,7 @@ maintainer-check: libgcj.la\n \n ## This rule can be used to see if the headers are more or less\n ## correct.\n-header-check: libgcj.zip $(nat_headers)\n+header-check: libgcj.jar $(nat_headers)\n \trm -f htest.cc; \\\n \tfor h in $(nat_headers); do \\\n \t  echo \"#include \\\"$$h\\\"\" >> htest.cc; \\"}, {"sha": "6bc235e9e2fe597a2a740effb3ddbb6dd6e1dc29", "filename": "libjava/Makefile.in", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f34ff6d61ed606861eb0b0c52cb92fe074e6fe62/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f34ff6d61ed606861eb0b0c52cb92fe074e6fe62/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=f34ff6d61ed606861eb0b0c52cb92fe074e6fe62", "patch": "@@ -136,7 +136,7 @@ AUTOMAKE_OPTIONS = foreign no-installinfo\n \n toolexeclib_LTLIBRARIES = libgcj.la $(cond_x_ltlibrary)\n toolexeclib_DATA = libgcj.spec\n-data_DATA = libgcj.zip\n+data_DATA = libgcj.jar\n \n @NEEDS_DATA_START_TRUE@toolexeclib_LIBRARIES = \\\n @NEEDS_DATA_START_TRUE@libgcjdata.a\n@@ -148,11 +148,11 @@ data_DATA = libgcj.zip\n \n bin_SCRIPTS = addr2name.awk\n @CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = \\\n-@CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/zip/zip$(EXEEXT)\n+@CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/fastjar$(EXEEXT)\n @CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = \\\n-@CANADIAN_TRUE@@NULL_TARGET_FALSE@zip\n+@CANADIAN_TRUE@@NULL_TARGET_FALSE@fastjar\n @CANADIAN_FALSE@ZIP = \\\n-@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/zip/zip$(EXEEXT)\n+@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/fastjar$(EXEEXT)\n @CANADIAN_TRUE@GCJH = \\\n @CANADIAN_TRUE@gcjh\n @CANADIAN_FALSE@GCJH = \\\n@@ -203,29 +203,31 @@ libgcj_la_SOURCES = prims.cc posix.cc jni.cc exception.cc \\\n EXTRA_libgcj_la_SOURCES = boehm.cc nogc.cc posix-threads.cc no-threads.cc \\\n \t$(c_source_files) $(java_source_files) $(built_java_source_files)\n \n-libgcj_la_DEPENDENCIES = libgcj.zip $(javao_files) \\\n+libgcj_la_DEPENDENCIES = libgcj.jar $(javao_files) \\\n \t$(c_files) $(GCOBJS) $(THREADOBJS) $(LIBLTDL)\n \n libgcj_la_LIBADD = $(javao_files) $(c_files) $(GCOBJS) \\\n \t$(THREADOBJS) $(libffi_files) $(LIBLTDL)\n \n-libgcj_la_LDFLAGS = -lsupc++ -rpath $(toolexeclibdir) \\\n+libgcj_la_LDFLAGS = -L$(here)/../libstdc++-v3/libsupc++ -lsupc++ \\\n+\t-rpath $(toolexeclibdir) \\\n \t-version-info `grep -v '^\\#' $(srcdir)/libtool-version`\n \n libgcj_la_LINK = $(LIBLINK)\n \n libgcjx_la_SOURCES = $(x_nat_source_files)\n EXTRA_libgcjx_la_SOURCES = $(x_java_source_files)\n-libgcjx_la_DEPENDENCIES = libgcj.zip $(x_javao_files)\n+libgcjx_la_DEPENDENCIES = libgcj.jar $(x_javao_files)\n libgcjx_la_LIBADD = $(x_javao_files)\n libgcjx_la_LDFLAGS = @X_PRE_LIBS@ @X_LIBS@ -lX11 @X_EXTRA_LIBS@ \\\n-        -lsupc++ -rpath $(toolexeclibdir) \\\n+        -L$(here)/../libstdc++-v3/libsupc++ -lsupc++ \\\n+        -rpath $(toolexeclibdir) \\\n         -version-info `grep -v '^\\#' $(srcdir)/libtool-version`\n \n libgcjx_la_LINK = $(LIBLINK)\n \n MOSTLYCLEANFILES = $(javao_files) $(nat_files) $(nat_headers) $(c_files) $(x_javao_files) $(x_nat_files) $(x_nat_headers)\n-CLEANFILES = tmp-list libgcj.zip\n+CLEANFILES = tmp-list libgcj.jar\n \n SUFFIXES = .class .java .h\n \n@@ -2296,9 +2298,9 @@ install-exec-hook:\n \t  $(LN_S) libgcjx.la gnu-awt-xlib.la; \\\n \tfi\n \n-$(java_source_files:.java=.class): libgcj.zip\n+$(java_source_files:.java=.class): libgcj.jar\n \n-$(x_java_source_files:.java=.class): libgcj.zip\n+$(x_java_source_files:.java=.class): libgcj.jar\n \n $(built_java_source_files:.java=.class): $(built_java_source_files)\n \t@javac=\"$(JAVAC)\"; \\\n@@ -2308,7 +2310,7 @@ $(built_java_source_files:.java=.class): $(built_java_source_files)\n \t  -d $(here) $$f; \\\n \tdone\n \n-libgcj.zip: $(java_source_files) $(x_java_source_files)\n+libgcj.jar: $(java_source_files) $(x_java_source_files)\n \t@: $(shell echo Creating list of files to compile...) $(shell rm -f tmp-list || :) $(shell touch tmp-list) $(foreach source,$(subst $(srcdir)/,,$?),$(shell echo $(source) >> tmp-list))\n \t$(MAKE) $(built_java_source_files:.java=.class)\n \t@set fnord $(MAKEFLAGS); amf=$$2; fail=no; \\\n@@ -2319,10 +2321,10 @@ libgcj.zip: $(java_source_files) $(x_java_source_files)\n \t    || case \"$$amf\" in *=*) exit 1;; *k*) fail=yes ;; *) exit 1;; esac; \\\n \tdone; \\\n \ttest \"$$fail\" = no\n-\t-@rm -f tmp-list libgcj.zip\n+\t-@rm -f tmp-list libgcj.jar\n \tfind java gnu -type d -o -type f -name '*.class' | \\\n \t  sed -e '/\\/\\./d' -e '/\\/xlib/d' | \\\n-\t  $(ZIP) libgcj -@ -n .class\n+\t  $(ZIP) cfM0E@ $@\n \n clean-local:\n \tfind . -name '*.class' -print | xargs rm -f\n@@ -2354,19 +2356,19 @@ $(javao_files) $(x_javao_files): %.lo: %.java\n .class.h:\n \t$(GCJH) -classpath $(top_builddir) $(basename $<)\n \n-java/lang/ClassLoader.h: java/lang/ClassLoader.class libgcj.zip\n+java/lang/ClassLoader.h: java/lang/ClassLoader.class libgcj.jar\n \t$(GCJH) -classpath $(top_builddir) \\\n \t\t-friend 'jclass _Jv_FindClass (_Jv_Utf8Const *name, java::lang::ClassLoader *loader);' \\\n \t\t-friend 'void _Jv_RunMain (const char *name, int argc, const char **argv, bool is_jar);' \\\n \t\t$(basename $<)\n \n-gnu/gcj/runtime/FirstThread.h: gnu/gcj/runtime/FirstThread.class libgcj.zip\n+gnu/gcj/runtime/FirstThread.h: gnu/gcj/runtime/FirstThread.class libgcj.jar\n \t$(GCJH) -classpath $(top_builddir) \\\n \t\t-friend 'void JvRunMain (jclass, int, const char **);' \\\n \t\t-friend 'void _Jv_RunMain (const char*, int, const char **);' \\\n \t\t$(basename $<)\n \n-java/lang/Thread.h: java/lang/Thread.class libgcj.zip\n+java/lang/Thread.h: java/lang/Thread.class libgcj.jar\n \t$(GCJH) -classpath $(top_builddir) \\\n \t\t-prepend 'class _Jv_JNIEnv;' \\\n \t\t-prepend 'extern \"Java\" { namespace gnu { namespace gcj { namespace jni { class NativeThread; } } } };' \\\n@@ -2377,7 +2379,7 @@ java/lang/Thread.h: java/lang/Thread.class libgcj.zip\n \t\t-friend 'class gnu::gcj::jni::NativeThread;' \\\n \t\t$(basename $<)\n \n-java/lang/String.h: java/lang/String.class libgcj.zip\n+java/lang/String.h: java/lang/String.class libgcj.jar\n \t$(GCJH) -classpath $(top_builddir) \\\n \t    -friend 'jchar* _Jv_GetStringChars (jstring str);' \\\n \t    -friend 'jstring* _Jv_StringFindSlot (jchar*, jint, jint);' \\\n@@ -2387,37 +2389,37 @@ java/lang/String.h: java/lang/String.class libgcj.zip\n \t    -friend 'jstring _Jv_AllocString (jsize);' \\\n \t    $(basename $<)\n \n-java/lang/reflect/Constructor.h: java/lang/reflect/Constructor.class libgcj.zip\n+java/lang/reflect/Constructor.h: java/lang/reflect/Constructor.class libgcj.jar\n \t$(GCJH) -classpath $(top_builddir) \\\n \t    -friend 'jmethodID _Jv_FromReflectedConstructor (java::lang::reflect::Constructor *);' \\\n \t    -friend 'class java::lang::Class;' \\\n \t    -friend 'jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);' \\\n \t    $(basename $<)\n \n-java/lang/reflect/Field.h: java/lang/reflect/Field.class libgcj.zip\n+java/lang/reflect/Field.h: java/lang/reflect/Field.class libgcj.jar\n \t$(GCJH) -classpath $(top_builddir) \\\n \t    -friend 'jfieldID _Jv_FromReflectedField (java::lang::reflect::Field *);' \\\n \t    -friend 'jobject _Jv_JNI_ToReflectedField (_Jv_JNIEnv*, jclass, jfieldID, jboolean);' \\\n \t    -friend 'class java::lang::Class;' \\\n \t    $(basename $<)\n \n-java/lang/reflect/Method.h: java/lang/reflect/Method.class libgcj.zip\n+java/lang/reflect/Method.h: java/lang/reflect/Method.class libgcj.jar\n \t$(GCJH) -classpath $(top_builddir) \\\n \t    -friend 'jmethodID _Jv_FromReflectedMethod (java::lang::reflect::Method *);' \\\n \t    -friend 'class java::lang::Class;' \\\n \t    -friend 'jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);' \\\n \t    $(basename $<)\n \n-gnu/gcj/runtime/VMClassLoader.h: gnu/gcj/runtime/VMClassLoader.class libgcj.zip\n+gnu/gcj/runtime/VMClassLoader.h: gnu/gcj/runtime/VMClassLoader.class libgcj.jar\n \t$(GCJH) -classpath $(top_builddir) \\\n \t    -friend 'class java::lang::ClassLoader;' \\\n \t    $(basename $<)\n \n-java/io/ObjectInputStream$$GetField.h: libgcj.zip\n+java/io/ObjectInputStream$$GetField.h: libgcj.jar\n \t$(GCJH) -classpath $(top_builddir) \\\n \t'java/io/ObjectInputStream$$GetField'\n \n-java/io/ObjectOutputStream$$PutField.h: libgcj.zip\n+java/io/ObjectOutputStream$$PutField.h: libgcj.jar\n \t$(GCJH) -classpath $(top_builddir) \\\n \t'java/io/ObjectOutputStream$$PutField'\n \n@@ -2437,7 +2439,7 @@ maintainer-check: libgcj.la\n \t  | grep -v 'Jv' \\\n \t  | grep -v 'terminate__Fv' | grep -v 'unexpected__Fv'\n \n-header-check: libgcj.zip $(nat_headers)\n+header-check: libgcj.jar $(nat_headers)\n \trm -f htest.cc; \\\n \tfor h in $(nat_headers); do \\\n \t  echo \"#include \\\"$$h\\\"\" >> htest.cc; \\"}]}