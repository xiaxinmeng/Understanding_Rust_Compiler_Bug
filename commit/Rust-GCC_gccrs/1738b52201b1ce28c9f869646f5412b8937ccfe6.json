{"sha": "1738b52201b1ce28c9f869646f5412b8937ccfe6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTczOGI1MjIwMWIxY2UyOGM5Zjg2OTY0NmY1NDEyYjg5MzdjY2ZlNg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2019-03-07T16:03:34Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2019-03-07T16:03:34Z"}, "message": "Relax cgraph_node::clone_of_p to also look through former clones\n\n2019-03-07  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/88235\n\t* cgraph.h (cgraph_node): New inline method former_thunk_p.\n\t* cgraph.c (cgraph_node::dump): Dump a note if node is a former thunk.\n\t(clone_of_p): Treat expanded thunks like thunks, be optimistic if they\n\thave multiple callees.  At the end check if declarations match as\n\topposed to cgraph_nodes.\n\n\ttestsuite/\n\t* g++.dg/ipa/pr88235.C: New test.\n\nFrom-SVN: r269462", "tree": {"sha": "cdb71e52faf06fd59ef5c90c4cebf832ea238b09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdb71e52faf06fd59ef5c90c4cebf832ea238b09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1738b52201b1ce28c9f869646f5412b8937ccfe6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1738b52201b1ce28c9f869646f5412b8937ccfe6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1738b52201b1ce28c9f869646f5412b8937ccfe6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1738b52201b1ce28c9f869646f5412b8937ccfe6/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "606711a1671cc63713b893c4557df967a5a6ac20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/606711a1671cc63713b893c4557df967a5a6ac20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/606711a1671cc63713b893c4557df967a5a6ac20"}], "stats": {"total": 98, "additions": 95, "deletions": 3}, "files": [{"sha": "b8774f253919c3653161d2f943ffbdd2f0119bcc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1738b52201b1ce28c9f869646f5412b8937ccfe6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1738b52201b1ce28c9f869646f5412b8937ccfe6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1738b52201b1ce28c9f869646f5412b8937ccfe6", "patch": "@@ -1,3 +1,12 @@\n+2019-03-07  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/88235\n+\t* cgraph.h (cgraph_node): New inline method former_thunk_p.\n+\t* cgraph.c (cgraph_node::dump): Dump a note if node is a former thunk.\n+\t(clone_of_p): Treat expanded thunks like thunks, be optimistic if they\n+\thave multiple callees.  At the end check if declarations match as\n+\topposed to cgraph_nodes.\n+\n 2019-03-07  Martin Liska  <mliska@suse.cz>\n \n \t* cgraph.c (cgraph_node::verify_node): Verify with a neighbour"}, {"sha": "9f0d603a1cf3bbfeb18e7802b27601e4691cec89", "filename": "gcc/cgraph.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1738b52201b1ce28c9f869646f5412b8937ccfe6/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1738b52201b1ce28c9f869646f5412b8937ccfe6/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=1738b52201b1ce28c9f869646f5412b8937ccfe6", "patch": "@@ -2109,6 +2109,8 @@ cgraph_node::dump (FILE *f)\n \t       (int)thunk.indirect_offset,\n \t       (int)thunk.virtual_offset_p);\n     }\n+  else if (former_thunk_p ())\n+    fprintf (f, \"  Former thunk\");\n   if (alias && thunk.alias\n       && DECL_P (thunk.alias))\n     {\n@@ -2963,7 +2965,9 @@ cgraph_node::collect_callers (void)\n   return redirect_callers;\n }\n \n-/* Return TRUE if NODE2 a clone of NODE or is equivalent to it.  */\n+\n+/* Return TRUE if NODE2 a clone of NODE or is equivalent to it.  Return\n+   optimistically true if this cannot be determined.  */\n \n static bool\n clone_of_p (cgraph_node *node, cgraph_node *node2)\n@@ -2975,12 +2979,17 @@ clone_of_p (cgraph_node *node, cgraph_node *node2)\n   /* There are no virtual clones of thunks so check former_clone_of or if we\n      might have skipped thunks because this adjustments are no longer\n      necessary.  */\n-  while (node->thunk.thunk_p)\n+  while (node->thunk.thunk_p || node->former_thunk_p ())\n     {\n       if (node2->former_clone_of == node->decl)\n \treturn true;\n       if (!node->thunk.this_adjusting)\n \treturn false;\n+      /* In case of instrumented expanded thunks, which can have multiple calls\n+\t in them, we do not know how to continue and just have to be\n+\t optimistic.  */\n+      if (node->callees->next_callee)\n+\treturn true;\n       node = node->callees->callee->ultimate_alias_target ();\n       skipped_thunk = true;\n     }\n@@ -2996,7 +3005,7 @@ clone_of_p (cgraph_node *node, cgraph_node *node2)\n \treturn false;\n     }\n \n-  while (node != node2 && node2)\n+  while (node2 && node->decl != node2->decl)\n     node2 = node2->clone_of;\n   return node2 != NULL;\n }"}, {"sha": "9a19d83fffb294479bbec5f7383dd7a07085eaf3", "filename": "gcc/cgraph.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1738b52201b1ce28c9f869646f5412b8937ccfe6/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1738b52201b1ce28c9f869646f5412b8937ccfe6/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=1738b52201b1ce28c9f869646f5412b8937ccfe6", "patch": "@@ -1283,6 +1283,9 @@ struct GTY((tag (\"SYMTAB_FUNCTION\"))) cgraph_node : public symtab_node {\n      Note that at WPA stage, the function body may not be present in memory.  */\n   inline bool has_gimple_body_p (void);\n \n+  /* Return true if this node represents a former, i.e. an expanded, thunk.  */\n+  inline bool former_thunk_p (void);\n+\n   /* Return true if function should be optimized for size.  */\n   bool optimize_for_size_p (void);\n \n@@ -2921,6 +2924,17 @@ cgraph_node::has_gimple_body_p (void)\n   return definition && !thunk.thunk_p && !alias;\n }\n \n+/* Return true if this node represents a former, i.e. an expanded, thunk.  */\n+\n+inline bool\n+cgraph_node::former_thunk_p (void)\n+{\n+  return (!thunk.thunk_p\n+\t  && (thunk.fixed_offset\n+\t      || thunk.virtual_offset_p\n+\t      || thunk.indirect_offset));\n+}\n+\n /* Walk all functions with body defined.  */\n #define FOR_EACH_FUNCTION_WITH_GIMPLE_BODY(node) \\\n    for ((node) = symtab->first_function_with_gimple_body (); (node); \\"}, {"sha": "d0bd73432e0d60fa30e1596bc0124aa6adbd2f70", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1738b52201b1ce28c9f869646f5412b8937ccfe6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1738b52201b1ce28c9f869646f5412b8937ccfe6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1738b52201b1ce28c9f869646f5412b8937ccfe6", "patch": "@@ -1,3 +1,8 @@\n+2019-03-07  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/88235\n+\t* g++.dg/ipa/pr88235.C: New test.\n+\n 2019-04-07  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/89618"}, {"sha": "29f3252b8286207578050e829671a04321d143cd", "filename": "gcc/testsuite/g++.dg/ipa/pr88235.C", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1738b52201b1ce28c9f869646f5412b8937ccfe6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr88235.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1738b52201b1ce28c9f869646f5412b8937ccfe6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr88235.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr88235.C?ref=1738b52201b1ce28c9f869646f5412b8937ccfe6", "patch": "@@ -0,0 +1,55 @@\n+// { dg-do compile }\n+// { dg-options \"-O1 -fdevirtualize -finline-small-functions -fipa-cp -fipa-cp-clone --param ipa-cp-eval-threshold=125 --param max-inline-insns-single=4\" }\n+\n+extern \"C\" int printf (const char *, ...);\n+enum E { vf_request, vf_event } want;\n+\n+int errs = 0;\n+\n+class ivResource {\n+public:\n+  virtual ~ivResource () { }\n+};\n+\n+class ivHandler   : public ivResource   {\n+public:\n+  virtual void event() { }\n+};\n+\n+class ivGlyph   : public ivResource   {\n+public:\n+  virtual ~ivGlyph  () { }\n+  virtual void request () {\n+    if (want!=vf_request)\n+      ++errs;\n+  }\n+};\n+\n+class ItemView : public ivGlyph, public ivHandler {\n+public:\n+  virtual void event () {\n+    if (want!=vf_event)\n+      ++errs;\n+  }\n+} a;\n+\n+ivGlyph *bar() {\n+  return &a;\n+}\n+\n+ivHandler *bar2() {\n+  return &a;\n+}\n+\n+int main() {\n+  want=vf_request;\n+  bar()->request();\n+  want=vf_event;\n+  bar2()->event();\n+  if (errs) {\n+    printf(\"FAIL\\n\");\n+    return 1;\n+  }\n+  printf(\"PASS\\n\");\n+  return 0;\n+}"}]}