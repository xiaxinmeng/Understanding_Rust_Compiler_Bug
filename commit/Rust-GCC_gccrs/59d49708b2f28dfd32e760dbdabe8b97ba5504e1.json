{"sha": "59d49708b2f28dfd32e760dbdabe8b97ba5504e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlkNDk3MDhiMmYyOGRmZDMyZTc2MGRiZGFiZThiOTdiYTU1MDRlMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-02-03T16:28:07Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-02-03T16:28:07Z"}, "message": "re PR c++/35652 (offset warning should be given in the front-end)\n\n\tPR c++/35652\n\t* builtins.c (c_strlen): Use EXPR_LOCATION in diagnostics.\n\nFrom-SVN: r156469", "tree": {"sha": "65f55d088c341eb4bc1ca12f65d19dddbb3ac8c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65f55d088c341eb4bc1ca12f65d19dddbb3ac8c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59d49708b2f28dfd32e760dbdabe8b97ba5504e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d49708b2f28dfd32e760dbdabe8b97ba5504e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59d49708b2f28dfd32e760dbdabe8b97ba5504e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d49708b2f28dfd32e760dbdabe8b97ba5504e1/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5440c0e74197052ca981f29b74df9f187f88385e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5440c0e74197052ca981f29b74df9f187f88385e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5440c0e74197052ca981f29b74df9f187f88385e"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "8e5b7bc75f6c3fd8f6cd349b08d97e2ebe388043", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59d49708b2f28dfd32e760dbdabe8b97ba5504e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59d49708b2f28dfd32e760dbdabe8b97ba5504e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59d49708b2f28dfd32e760dbdabe8b97ba5504e1", "patch": "@@ -1,3 +1,8 @@\n+2010-02-03  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/35652\n+\t* builtins.c (c_strlen): Use EXPR_LOCATION in diagnostics.\n+\n 2010-02-03  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/42896"}, {"sha": "b6fd1ead0fb9d28bbc318024da289bc164bd67ec", "filename": "gcc/builtins.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59d49708b2f28dfd32e760dbdabe8b97ba5504e1/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59d49708b2f28dfd32e760dbdabe8b97ba5504e1/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=59d49708b2f28dfd32e760dbdabe8b97ba5504e1", "patch": "@@ -433,6 +433,7 @@ c_strlen (tree src, int only_value)\n   HOST_WIDE_INT offset;\n   int max;\n   const char *ptr;\n+  location_t loc;\n \n   STRIP_NOPS (src);\n   if (TREE_CODE (src) == COND_EXPR\n@@ -450,6 +451,11 @@ c_strlen (tree src, int only_value)\n       && (only_value || !TREE_SIDE_EFFECTS (TREE_OPERAND (src, 0))))\n     return c_strlen (TREE_OPERAND (src, 1), only_value);\n \n+  if (EXPR_HAS_LOCATION (src))\n+    loc = EXPR_LOCATION (src);\n+  else\n+    loc = input_location;\n+\n   src = string_constant (src, &offset_node);\n   if (src == 0)\n     return NULL_TREE;\n@@ -475,7 +481,7 @@ c_strlen (tree src, int only_value)\n \t and return that.  This would perhaps not be valid if we were dealing\n \t with named arrays in addition to literal string constants.  */\n \n-      return size_diffop_loc (input_location, size_int (max), offset_node);\n+      return size_diffop_loc (loc, size_int (max), offset_node);\n     }\n \n   /* We have a known offset into the string.  Start searching there for\n@@ -494,7 +500,7 @@ c_strlen (tree src, int only_value)\n      /* Suppress multiple warnings for propagated constant strings.  */\n       if (! TREE_NO_WARNING (src))\n         {\n-          warning (0, \"offset outside bounds of constant string\");\n+          warning_at (loc, 0, \"offset outside bounds of constant string\");\n           TREE_NO_WARNING (src) = 1;\n         }\n       return NULL_TREE;"}, {"sha": "302772795cdbb73b9a7eb20ba01404b3a4b66987", "filename": "gcc/testsuite/g++.dg/warn/string1.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59d49708b2f28dfd32e760dbdabe8b97ba5504e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fstring1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59d49708b2f28dfd32e760dbdabe8b97ba5504e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fstring1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fstring1.C?ref=59d49708b2f28dfd32e760dbdabe8b97ba5504e1", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/35652\n+// { dg-options \"-O\" }\n+\n+#include <string>\n+int main() {\n+  // blank line padding, could also be code...\n+  //\n+  //\n+  //\n+  //\n+  //\n+  //\n+  //\n+  //\n+  //\n+  std::string s = \"\";\n+  s += 'x' + \"y\";\t      // { dg-warning \"bounds of constant string\" }\n+}"}]}