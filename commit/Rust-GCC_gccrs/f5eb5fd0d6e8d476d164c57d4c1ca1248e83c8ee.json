{"sha": "f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVlYjVmZDBkNmU4ZDQ3NmQxNjRjNTdkNGMxY2ExMjQ4ZTgzYzhlZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-03-28T12:25:21Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-03-28T12:25:21Z"}, "message": "rtlanal.c: Include flags.h\n\n\t* rtlanal.c: Include flags.h\n\t(may_trap_p): Do not mark FP operations if trapping\n\tif !flag_trapping_math\n\t* Makefile.in (rtlanal.o): Add dependency on flag.h\n\t* ifcvt.c (noce_operand_ok): Avoid the lameness.\n\nFrom-SVN: r51508", "tree": {"sha": "c975b4080bd3d5dadf4179b7b9ad2f7233bac1f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c975b4080bd3d5dadf4179b7b9ad2f7233bac1f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee/comments", "author": null, "committer": null, "parents": [{"sha": "ac43cbb50723665947ac875f70f0035e09f00680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac43cbb50723665947ac875f70f0035e09f00680", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac43cbb50723665947ac875f70f0035e09f00680"}], "stats": {"total": 66, "additions": 31, "deletions": 35}, "files": [{"sha": "e1dcc5d3cddcf7708b3a02606c84c4161d51edec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee", "patch": "@@ -1,3 +1,11 @@\n+Thu Mar 28 13:21:53 CET 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* rtlanal.c: Include flags.h\n+\t(may_trap_p): Do not mark FP operations if trapping\n+\tif !flag_trapping_math\n+\t* Makefile.in (rtlanal.o): Add dependency on flag.h\n+\t* ifcvt.c (noce_operand_ok): Avoid the lameness.\n+\n 2002-03-27  Zack Weinberg  <zack@codesourcery.com>\n \n \t* mips.md: Use dconst1, not 1.0, as first argument of"}, {"sha": "c5192e9642254c03c724d46724d3ef7e616df78d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee", "patch": "@@ -1366,7 +1366,7 @@ print-rtl.o : print-rtl.c $(GCONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) \\\n \t$(CC) -c $(ALL_CFLAGS) -DGENERATOR_FILE $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n rtlanal.o : rtlanal.c $(CONFIG_H) $(SYSTEM_H) toplev.h $(RTL_H) \\\n-   hard-reg-set.h $(TM_P_H) insn-config.h $(RECOG_H)\n+   hard-reg-set.h $(TM_P_H) insn-config.h $(RECOG_H) flags.h\n \n errors.o : errors.c $(GCONFIG_H) $(SYSTEM_H) errors.h\n \t$(CC) -c $(ALL_CFLAGS) -DGENERATOR_FILE $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)"}, {"sha": "f31f168f7b51736ed9b520d382273394fef8caa1", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee", "patch": "@@ -1467,6 +1467,7 @@ try_crossjump_bb (mode, bb)\n {\n   edge e, e2, nexte2, nexte, fallthru;\n   bool changed;\n+  int n = 0;\n \n   /* Nothing to do if there is not at least two incoming edges.  */\n   if (!bb->pred || !bb->pred->pred_next)\n@@ -1475,9 +1476,13 @@ try_crossjump_bb (mode, bb)\n   /* It is always cheapest to redirect a block that ends in a branch to\n      a block that falls through into BB, as that adds no branches to the\n      program.  We'll try that combination first.  */\n-  for (fallthru = bb->pred; fallthru; fallthru = fallthru->pred_next)\n-    if (fallthru->flags & EDGE_FALLTHRU)\n-      break;\n+  for (fallthru = bb->pred; fallthru; fallthru = fallthru->pred_next, n++)\n+    {\n+      if (fallthru->flags & EDGE_FALLTHRU)\n+\tbreak;\n+      if (n > 100)\n+\treturn false;\n+    }\n \n   changed = false;\n   for (e = bb->pred; e; e = nexte)"}, {"sha": "f912654da219ef3fe9ac0db21b4027694156c25e", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee", "patch": "@@ -1554,35 +1554,6 @@ noce_operand_ok (op)\n   if (side_effects_p (op))\n     return FALSE;\n \n-  /* ??? Unfortuantely may_trap_p can't look at flag_trapping_math, due to\n-     being linked into the genfoo programs.  This is probably a mistake.\n-     With finite operands, most fp operations don't trap.  */\n-  if (!flag_trapping_math && FLOAT_MODE_P (GET_MODE (op)))\n-    switch (GET_CODE (op))\n-      {\n-      case DIV:\n-      case MOD:\n-      case UDIV:\n-      case UMOD:\n-\t/* ??? This is kinda lame -- almost every target will have forced\n-\t   the constant into a register first.  But given the expense of\n-\t   division, this is probably for the best.  */\n-\treturn (CONSTANT_P (XEXP (op, 1))\n-\t\t&& XEXP (op, 1) != CONST0_RTX (GET_MODE (op))\n-\t\t&& ! may_trap_p (XEXP (op, 0)));\n-\n-      default:\n-\tswitch (GET_RTX_CLASS (GET_CODE (op)))\n-\t  {\n-\t  case '1':\n-\t    return ! may_trap_p (XEXP (op, 0));\n-\t  case 'c':\n-\t  case '2':\n-\t    return ! may_trap_p (XEXP (op, 0)) && ! may_trap_p (XEXP (op, 1));\n-\t  }\n-\tbreak;\n-      }\n-\n   return ! may_trap_p (op);\n }\n "}, {"sha": "c1d3908a7119eaeab36d738a1fc954f4a8841199", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee", "patch": "@@ -1,3 +1,7 @@\n+Thu Mar 28 13:22:22 CET 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* java/lang.c (java_init_options): Set flag_trapping_math to 0.\n+\n 2002-03-28  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \t* parse.y (resolve_package): Initialize \"decl\"."}, {"sha": "fd197235cd42f02a469419617696145475d6343f", "filename": "gcc/java/lang.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee", "patch": "@@ -752,4 +752,7 @@ java_init_options ()\n   flag_bounds_check = 1;\n   flag_exceptions = 1;\n   flag_non_call_exceptions = 1;\n+\n+  /* In Java floating point operations never trap.  */\n+  flag_trapping_math = 0;\n }"}, {"sha": "9348fd01d118d75f0959351fcde942a5e9d2b6a4", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=f5eb5fd0d6e8d476d164c57d4c1ca1248e83c8ee", "patch": "@@ -28,6 +28,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"insn-config.h\"\n #include \"recog.h\"\n #include \"tm_p.h\"\n+#include \"flags.h\"\n \n /* Forward declarations */\n static int global_reg_mentioned_p_1 PARAMS ((rtx *, void *));\n@@ -2348,7 +2349,8 @@ may_trap_p (x)\n     case UDIV:\n     case UMOD:\n       if (! CONSTANT_P (XEXP (x, 1))\n-\t  || GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT)\n+\t  || (GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT\n+\t      && flag_trapping_math))\n \treturn 1;\n       /* This was const0_rtx, but by not using that,\n \t we can link this file into other programs.  */\n@@ -2367,6 +2369,8 @@ may_trap_p (x)\n     case LT:\n     case COMPARE:\n       /* Some floating point comparisons may trap.  */\n+      if (!flag_trapping_math)\n+\tbreak;\n       /* ??? There is no machine independent way to check for tests that trap\n \t when COMPARE is used, though many targets do make this distinction.\n \t For instance, sparc uses CCFPE for compares which generate exceptions\n@@ -2387,7 +2391,8 @@ may_trap_p (x)\n \n     default:\n       /* Any floating arithmetic may trap.  */\n-      if (GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT)\n+      if (GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT\n+\t  && flag_trapping_math)\n \treturn 1;\n     }\n "}]}