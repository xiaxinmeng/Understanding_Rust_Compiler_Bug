{"sha": "4ced1d6de8b7ad914c4ea6fdb3121487d298c9e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNlZDFkNmRlOGI3YWQ5MTRjNGVhNmZkYjMxMjE0ODdkMjk4YzllMA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2012-11-20T00:55:58Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2012-11-20T00:55:58Z"}, "message": "rs6000.md (movdf_hardfloat32): Reorder move constraints so that the traditional floating point loads...\n\n2012-11-19  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.md (movdf_hardfloat32): Reorder move\n\tconstraints so that the traditional floating point loads, stores,\n\tand moves are done first, then the VSX loads, stores, and moves,\n\tand finally the GPR loads, stores, and moves so that reload\n\tchooses FPRs over GPRs, and uses the traditional load/store\n\tinstructions which provide an offset.\n\t(movdf_hardfloat64): Likewise.\n\nFrom-SVN: r193645", "tree": {"sha": "d0120bad9c05d5b131a64b5fb98aba34ba15439b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0120bad9c05d5b131a64b5fb98aba34ba15439b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ced1d6de8b7ad914c4ea6fdb3121487d298c9e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ced1d6de8b7ad914c4ea6fdb3121487d298c9e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ced1d6de8b7ad914c4ea6fdb3121487d298c9e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ced1d6de8b7ad914c4ea6fdb3121487d298c9e0/comments", "author": null, "committer": null, "parents": [{"sha": "6b1328eb3c6d94a907bd1fc7c1b6554174e01408", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b1328eb3c6d94a907bd1fc7c1b6554174e01408", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b1328eb3c6d94a907bd1fc7c1b6554174e01408"}], "stats": {"total": 84, "additions": 39, "deletions": 45}, "files": [{"sha": "27bcf010fdbdbfb14d7f6791718d1febb65044b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ced1d6de8b7ad914c4ea6fdb3121487d298c9e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ced1d6de8b7ad914c4ea6fdb3121487d298c9e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ced1d6de8b7ad914c4ea6fdb3121487d298c9e0", "patch": "@@ -1,3 +1,13 @@\n+2012-11-19  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.md (movdf_hardfloat32): Reorder move\n+\tconstraints so that the traditional floating point loads, stores,\n+\tand moves are done first, then the VSX loads, stores, and moves,\n+\tand finally the GPR loads, stores, and moves so that reload\n+\tchooses FPRs over GPRs, and uses the traditional load/store\n+\tinstructions which provide an offset.\n+\t(movdf_hardfloat64): Likewise.\n+\n 2012-11-19  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tPR middle-end/55359"}, {"sha": "dc5a5710a592ca59a735c2ce074c828efe70a955", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 29, "deletions": 45, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ced1d6de8b7ad914c4ea6fdb3121487d298c9e0/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ced1d6de8b7ad914c4ea6fdb3121487d298c9e0/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=4ced1d6de8b7ad914c4ea6fdb3121487d298c9e0", "patch": "@@ -8019,46 +8019,30 @@\n ;; less efficient than loading the constant into an FP register, since\n ;; it will probably be used there.\n (define_insn \"*movdf_hardfloat32\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=Y,r,!r,ws,?wa,ws,?wa,Z,?Z,m,d,d,wa,!r,!r,!r\")\n-\t(match_operand:DF 1 \"input_operand\" \"r,Y,r,ws,wa,Z,Z,ws,wa,d,m,d,j,G,H,F\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=m,d,d,ws,?wa,Z,?Z,ws,?wa,wa,Y,r,!r,!r,!r,!r\")\n+\t(match_operand:DF 1 \"input_operand\" \"d,m,d,Z,Z,ws,wa,ws,wa,j,r,Y,r,G,H,F\"))]\n   \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n    && (gpc_reg_operand (operands[0], DFmode)\n        || gpc_reg_operand (operands[1], DFmode))\"\n-  \"*\n-{\n-  switch (which_alternative)\n-    {\n-    default:\n-      gcc_unreachable ();\n-    case 0:\n-    case 1:\n-    case 2:\n-      return \\\"#\\\";\n-    case 3:\n-    case 4:\n-      return \\\"xxlor %x0,%x1,%x1\\\";\n-    case 5:\n-    case 6:\n-      return \\\"lxsd%U1x %x0,%y1\\\";\n-    case 7:\n-    case 8:\n-      return \\\"stxsd%U0x %x1,%y0\\\";\n-    case 9:\n-      return \\\"stfd%U0%X0 %1,%0\\\";\n-    case 10:\n-      return \\\"lfd%U1%X1 %0,%1\\\";\n-    case 11:\n-      return \\\"fmr %0,%1\\\";\n-    case 12:\n-      return \\\"xxlxor %x0,%x0,%x0\\\";\n-    case 13:\n-    case 14:\n-    case 15:\n-      return \\\"#\\\";\n-    }\n-}\"\n-  [(set_attr \"type\" \"store,load,two,fp,fp,fpload,fpload,fpstore,fpstore,fpstore,fpload,fp,vecsimple,*,*,*\")\n-   (set_attr \"length\" \"8,8,8,4,4,4,4,4,4,4,4,4,4,8,12,16\")])\n+  \"@\n+   stfd%U0%X0 %1,%0\n+   lfd%U1%X1 %0,%1\n+   fmr %0,%1\n+   lxsd%U1x %x0,%y1\n+   lxsd%U1x %x0,%y1\n+   stxsd%U0x %x1,%y0\n+   stxsd%U0x %x1,%y0\n+   xxlor %x0,%x1,%x1\n+   xxlor %x0,%x1,%x1\n+   xxlxor %x0,%x0,%x0\n+   #\n+   #\n+   #\n+   #\n+   #\n+   #\"\n+  [(set_attr \"type\" \"fpstore,fpload,fp,fpload,fpload,fpstore,fpstore,vecsimple,vecsimple,vecsimple,store,load,two,fp,fp,*\")\n+   (set_attr \"length\" \"4,4,4,4,4,4,4,4,4,4,8,8,8,8,12,16\")])\n \n (define_insn \"*movdf_softfloat32\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=Y,r,r,r,r,r\")\n@@ -8131,33 +8115,33 @@\n ; ld/std require word-aligned displacements -> 'Y' constraint.\n ; List Y->r and r->Y before r->r for reload.\n (define_insn \"*movdf_hardfloat64\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=Y,r,!r,ws,?wa,ws,?wa,Z,?Z,m,d,d,wa,*c*l,!r,*h,!r,!r,!r\")\n-\t(match_operand:DF 1 \"input_operand\" \"r,Y,r,ws,wa,Z,Z,ws,wa,d,m,d,j,r,h,0,G,H,F\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=m,d,d,Y,r,!r,ws,?wa,Z,?Z,ws,?wa,wa,*c*l,!r,*h,!r,!r,!r\")\n+\t(match_operand:DF 1 \"input_operand\" \"d,m,d,r,Y,r,Z,Z,ws,wa,ws,wa,j,r,h,0,G,H,F\"))]\n   \"TARGET_POWERPC64 && !TARGET_MFPGPR && TARGET_HARD_FLOAT && TARGET_FPRS \n    && TARGET_DOUBLE_FLOAT\n    && (gpc_reg_operand (operands[0], DFmode)\n        || gpc_reg_operand (operands[1], DFmode))\"\n   \"@\n+   stfd%U0%X0 %1,%0\n+   lfd%U1%X1 %0,%1\n+   fmr %0,%1\n    std%U0%X0 %1,%0\n    ld%U1%X1 %0,%1\n    mr %0,%1\n-   xxlor %x0,%x1,%x1\n-   xxlor %x0,%x1,%x1\n    lxsd%U1x %x0,%y1\n    lxsd%U1x %x0,%y1\n    stxsd%U0x %x1,%y0\n    stxsd%U0x %x1,%y0\n-   stfd%U0%X0 %1,%0\n-   lfd%U1%X1 %0,%1\n-   fmr %0,%1\n+   xxlor %x0,%x1,%x1\n+   xxlor %x0,%x1,%x1\n    xxlxor %x0,%x0,%x0\n    mt%0 %1\n    mf%1 %0\n    nop\n    #\n    #\n    #\"\n-  [(set_attr \"type\" \"store,load,*,fp,fp,fpload,fpload,fpstore,fpstore,fpstore,fpload,fp,vecsimple,mtjmpr,mfjmpr,*,*,*,*\")\n+  [(set_attr \"type\" \"fpstore,fpload,fp,store,load,*,fpload,fpload,fpstore,fpstore,vecsimple,vecsimple,vecsimple,mtjmpr,mfjmpr,*,*,*,*\")\n    (set_attr \"length\" \"4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,8,12,16\")])\n \n (define_insn \"*movdf_softfloat64\""}]}