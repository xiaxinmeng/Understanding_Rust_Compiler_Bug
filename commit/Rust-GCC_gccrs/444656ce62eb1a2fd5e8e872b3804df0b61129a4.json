{"sha": "444656ce62eb1a2fd5e8e872b3804df0b61129a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ0NjU2Y2U2MmViMWEyZmQ1ZThlODcyYjM4MDRkZjBiNjExMjlhNA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2016-06-22T09:48:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-22T09:48:49Z"}, "message": "exp_ch4.adb (In_Range_Chec)): New predicate, subsidiary of Expand_N_In...\n\n2016-06-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch4.adb (In_Range_Chec)): New predicate, subsidiary of\n\tExpand_N_In: within an expanded range check that might raise\n\tConstraint_Error do not generate a predicate check as well. It\n\tis redundant because the context will add an explicit predicate\n\tcheck, and it will raise the wrong exception if it fails.\n\t* lib-xref-spark_specific.adb (Add_SPARK_File): Remove useless checks\n\tsince dependency units always have an associated compilation unit.\n\nFrom-SVN: r237683", "tree": {"sha": "f7fd287584aed6bd788beac32689d69cce0c5294", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7fd287584aed6bd788beac32689d69cce0c5294"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/444656ce62eb1a2fd5e8e872b3804df0b61129a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/444656ce62eb1a2fd5e8e872b3804df0b61129a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/444656ce62eb1a2fd5e8e872b3804df0b61129a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/444656ce62eb1a2fd5e8e872b3804df0b61129a4/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3bb91f983bc2d530e31ca3615cde2fb1c563005a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bb91f983bc2d530e31ca3615cde2fb1c563005a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bb91f983bc2d530e31ca3615cde2fb1c563005a"}], "stats": {"total": 88, "additions": 65, "deletions": 23}, "files": [{"sha": "5703832c6f5651722a64c3e62a53254f4e4d9224", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444656ce62eb1a2fd5e8e872b3804df0b61129a4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444656ce62eb1a2fd5e8e872b3804df0b61129a4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=444656ce62eb1a2fd5e8e872b3804df0b61129a4", "patch": "@@ -1,3 +1,13 @@\n+2016-06-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (In_Range_Chec)): New predicate, subsidiary of\n+\tExpand_N_In: within an expanded range check that might raise\n+\tConstraint_Error do not generate a predicate check as well. It\n+\tis redundant because the context will add an explicit predicate\n+\tcheck, and it will raise the wrong exception if it fails.\n+\t* lib-xref-spark_specific.adb (Add_SPARK_File): Remove useless checks\n+\tsince dependency units always have an associated compilation unit.\n+\n 2016-06-22  Arnaud Charlet  <charlet@adacore.com>\n \n \t* lib.ads: Code cleanup."}, {"sha": "1cdfa1ac880ea7b7298235258b31d0f63dab4975", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444656ce62eb1a2fd5e8e872b3804df0b61129a4/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444656ce62eb1a2fd5e8e872b3804df0b61129a4/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=444656ce62eb1a2fd5e8e872b3804df0b61129a4", "patch": "@@ -6107,18 +6107,60 @@ package body Exp_Ch4 is\n       --  (the check is only done when the right operand is a subtype; see\n       --  RM12-4.5.2 (28.1/3-30/3)).\n \n-      declare\n+      Predicate_Check : declare\n+         function In_Range_Check return Boolean;\n+         --  Within an expanded range check that may raise Constraint_Error do\n+         --  not generate a predicate check as well. It is redundant because\n+         --  the context will add an explicit predicate check, and it will\n+         --  raise the wrong exception if it fails.\n+\n+         --------------------\n+         -- In_Range_Check --\n+         --------------------\n+\n+         function In_Range_Check return Boolean is\n+            P : Node_Id;\n+         begin\n+            P := Parent (N);\n+            while Present (P) loop\n+               if Nkind (P) = N_Raise_Constraint_Error then\n+                  return True;\n+\n+               elsif Nkind (P) in N_Statement_Other_Than_Procedure_Call\n+                 or else Nkind (P) = N_Procedure_Call_Statement\n+                 or else Nkind (P) in N_Declaration\n+               then\n+                  return False;\n+               end if;\n+\n+               P := Parent (P);\n+            end loop;\n+\n+            return False;\n+         end In_Range_Check;\n+\n+         --  Local variables\n+\n          PFunc : constant Entity_Id := Predicate_Function (Rtyp);\n+         R_Op  : Node_Id;\n+\n+      --  Start of processing for Predicate_Check\n \n       begin\n          if Present (PFunc)\n            and then Current_Scope /= PFunc\n            and then Nkind (Rop) /= N_Range\n          then\n+            if not In_Range_Check then\n+               R_Op := Make_Predicate_Call (Rtyp, Lop, Mem => True);\n+            else\n+               R_Op := New_Occurrence_Of (Standard_True, Loc);\n+            end if;\n+\n             Rewrite (N,\n               Make_And_Then (Loc,\n                 Left_Opnd  => Relocate_Node (N),\n-                Right_Opnd => Make_Predicate_Call (Rtyp, Lop, Mem => True)));\n+                Right_Opnd => R_Op));\n \n             --  Analyze new expression, mark left operand as analyzed to\n             --  avoid infinite recursion adding predicate calls. Similarly,\n@@ -6131,7 +6173,7 @@ package body Exp_Ch4 is\n \n             return;\n          end if;\n-      end;\n+      end Predicate_Check;\n    end Expand_N_In;\n \n    --------------------------------"}, {"sha": "062e50c262289c883ed3010e5ffa17a6bf306f84", "filename": "gcc/ada/lib-xref-spark_specific.adb", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444656ce62eb1a2fd5e8e872b3804df0b61129a4/gcc%2Fada%2Flib-xref-spark_specific.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444656ce62eb1a2fd5e8e872b3804df0b61129a4/gcc%2Fada%2Flib-xref-spark_specific.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-spark_specific.adb?ref=444656ce62eb1a2fd5e8e872b3804df0b61129a4", "patch": "@@ -153,35 +153,26 @@ package body SPARK_Specific is\n       --  Subunits are traversed as part of the top-level unit to which they\n       --  belong.\n \n-      if Present (Cunit (Ubody))\n-        and then Nkind (Unit (Cunit (Ubody))) = N_Subunit\n-      then\n+      if Nkind (Unit (Cunit (Ubody))) = N_Subunit then\n          return;\n       end if;\n \n       From := SPARK_Scope_Table.Last + 1;\n \n-      --  Unit might not have an associated compilation unit, as seen in code\n-      --  filling Sdep_Table in Write_ALI.\n-\n-      if Present (Cunit (Ubody)) then\n-         Traverse_Compilation_Unit\n-           (CU           => Cunit (Ubody),\n-            Process      => Detect_And_Add_SPARK_Scope'Access,\n-            Inside_Stubs => True);\n-      end if;\n+      Traverse_Compilation_Unit\n+        (CU           => Cunit (Ubody),\n+         Process      => Detect_And_Add_SPARK_Scope'Access,\n+         Inside_Stubs => True);\n \n       --  When two units are present for the same compilation unit, as it\n       --  happens for library-level instantiations of generics, then add all\n       --  scopes to the same SPARK file.\n \n       if Ubody /= Uspec then\n-         if Present (Cunit (Uspec)) then\n-            Traverse_Compilation_Unit\n-              (CU           => Cunit (Uspec),\n-               Process      => Detect_And_Add_SPARK_Scope'Access,\n-               Inside_Stubs => True);\n-         end if;\n+         Traverse_Compilation_Unit\n+           (CU           => Cunit (Uspec),\n+            Process      => Detect_And_Add_SPARK_Scope'Access,\n+            Inside_Stubs => True);\n       end if;\n \n       --  Update scope numbers\n@@ -209,8 +200,7 @@ package body SPARK_Specific is\n       --  For subunits, also retrieve the file name of the unit. Only do so if\n       --  unit has an associated compilation unit.\n \n-      if Present (Cunit (Uspec))\n-        and then Present (Cunit (Unit (File)))\n+      if Present (Cunit (Unit (File)))\n         and then Nkind (Unit (Cunit (Unit (File)))) = N_Subunit\n       then\n          Get_Name_String (Reference_Name (Main_Source_File));"}]}