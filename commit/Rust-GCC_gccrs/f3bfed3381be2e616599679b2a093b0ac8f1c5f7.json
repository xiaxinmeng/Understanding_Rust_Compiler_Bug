{"sha": "f3bfed3381be2e616599679b2a093b0ac8f1c5f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNiZmVkMzM4MWJlMmU2MTY1OTk2NzliMmEwOTNiMGFjOGYxYzVmNw==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@orcam.me.uk", "date": "2021-04-21T21:33:11Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@orcam.me.uk", "date": "2021-04-27T18:02:06Z"}, "message": "VAX: Fix ill-formed `jbb<ccss>i<mode>' insn operands\n\nThe insn has extraneous operand #3 that is aliased in RTL to operand #0\nwith a constraint.  The operands specify a single-bit field in memory\nthat the machine instruction produced boths reads for the purpose of\ndetermining whether to branch or not and either clears or sets according\nto the machine operation selected with the `ccss' iterator.  The caller\nof the insn is supposed to supply the same rtx for both operands.\n\nThis odd arrangement happens to work with old reload, but breaks with\nlibatomic if LRA is used instead:\n\n.../libatomic/flag.c: In function 'atomic_flag_test_and_set':\n.../libatomic/flag.c:36:1: error: unable to generate reloads for:\n   36 | }\n      | ^\n(jump_insn 7 6 19 2 (unspec_volatile [\n            (set (pc)\n                (if_then_else (eq (zero_extract:SI (mem/v:QI (reg:SI 27) [-1  S1 A8])\n                            (const_int 1 [0x1])\n                            (const_int 0 [0]))\n                        (const_int 1 [0x1]))\n                    (label_ref:SI 25)\n                    (pc)))\n            (set (zero_extract:SI (mem/v:QI (reg:SI 28) [-1  S1 A8])\n                    (const_int 1 [0x1])\n                    (const_int 0 [0]))\n                (const_int 1 [0x1]))\n        ] 100) \".../libatomic/flag.c\":35:10 669 {jbbssiqi}\n     (nil)\n -> 25)\nduring RTL pass: reload\n.../libatomic/flag.c:36:1: internal compiler error: in curr_insn_transform, at lra-constraints.c:4098\n0x1112c587 _fatal_insn(char const*, rtx_def const*, char const*, int, char const*)\n\t.../gcc/rtl-error.c:108\n0x10ee6563 curr_insn_transform\n\t.../gcc/lra-constraints.c:4098\n0x10eeaf87 lra_constraints(bool)\n\t.../gcc/lra-constraints.c:5133\n0x10ec97e3 lra(_IO_FILE*)\n\t.../gcc/lra.c:2336\n0x10e4633f do_reload\n\t.../gcc/ira.c:5827\n0x10e46b27 execute\n\t.../gcc/ira.c:6013\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nPlease include the complete backtrace with any bug report.\nSee <https://gcc.gnu.org/bugs/> for instructions.\n\nSwitch to using `match_dup' as expected then for a machine instruction\nthat in its encoding only has one actual operand in for the single-bit\nfield.\n\n\tgcc/\n\t* config/vax/builtins.md (jbb<ccss>i<mode>): Remove operand #3.\n\t(sync_lock_test_and_set<mode>): Adjust accordingly.\n\t(sync_lock_release<mode>): Likewise.", "tree": {"sha": "64c77b0d127966406873a1ecc90738f0ec32fd47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64c77b0d127966406873a1ecc90738f0ec32fd47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3bfed3381be2e616599679b2a093b0ac8f1c5f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3bfed3381be2e616599679b2a093b0ac8f1c5f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3bfed3381be2e616599679b2a093b0ac8f1c5f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3bfed3381be2e616599679b2a093b0ac8f1c5f7/comments", "author": null, "committer": null, "parents": [{"sha": "436e6f7d85cbd744c3f3aa393043e615dca1d36f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/436e6f7d85cbd744c3f3aa393043e615dca1d36f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/436e6f7d85cbd744c3f3aa393043e615dca1d36f"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "ff97ff355cd7ad51f2268a8066b6697c8e05c114", "filename": "gcc/config/vax/builtins.md", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bfed3381be2e616599679b2a093b0ac8f1c5f7/gcc%2Fconfig%2Fvax%2Fbuiltins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bfed3381be2e616599679b2a093b0ac8f1c5f7/gcc%2Fconfig%2Fvax%2Fbuiltins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fbuiltins.md?ref=f3bfed3381be2e616599679b2a093b0ac8f1c5f7", "patch": "@@ -174,8 +174,7 @@\n \n   label = gen_label_rtx ();\n   emit_move_insn (operands[0], const1_rtx);\n-  emit_jump_insn (gen_jbbssi<mode> (operands[1], const0_rtx, label,\n-\t\t\t\t    operands[1]));\n+  emit_jump_insn (gen_jbbssi<mode> (operands[1], const0_rtx, label));\n   emit_move_insn (operands[0], const0_rtx);\n   emit_label (label);\n   DONE;\n@@ -193,8 +192,7 @@\n     FAIL;\n \n   label = gen_label_rtx ();\n-  emit_jump_insn (gen_jbbcci<mode> (operands[0], const0_rtx, label,\n-\t\t\t\t    operands[0]));\n+  emit_jump_insn (gen_jbbcci<mode> (operands[0], const0_rtx, label));\n   emit_label (label);\n   DONE;\n }\")\n@@ -204,13 +202,13 @@\n     [(set (pc)\n \t  (if_then_else\n \t    (eq (zero_extract:SI\n-\t\t  (match_operand:VAXint 0 \"any_memory_operand\" \"<bb_mem>\")\n+\t\t  (match_operand:VAXint 0 \"any_memory_operand\" \"+<bb_mem>\")\n \t\t  (const_int 1)\n \t\t  (match_operand:SI 1 \"general_operand\" \"nrmT\"))\n \t\t(const_int bit))\n \t    (label_ref (match_operand 2 \"\" \"\"))\n \t    (pc)))\n-     (set (zero_extract:SI (match_operand:VAXint 3 \"any_memory_operand\" \"+0\")\n+     (set (zero_extract:SI (match_dup 0)\n \t\t\t   (const_int 1)\n \t\t\t   (match_dup 1))\n \t  (const_int bit))]"}]}