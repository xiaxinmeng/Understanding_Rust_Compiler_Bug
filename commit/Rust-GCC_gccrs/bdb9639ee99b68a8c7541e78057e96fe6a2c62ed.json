{"sha": "bdb9639ee99b68a8c7541e78057e96fe6a2c62ed", "node_id": "C_kwDOANBUbNoAKGJkYjk2MzllZTk5YjY4YThjNzU0MWU3ODA1N2U5NmZlNmEyYzYyZWQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-04-11T09:20:40Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-04-11T16:59:08Z"}, "message": "libstdc++: Improve behaviour of std::stacktrace::current\n\nThis prevents inlining the current() function to guarantee that it is\npresent in the stacktrace, then tells libbacktrace to skip that frame.\n\nTo avoid overflow in the int argument to __glibcxx_backtrace_simple, we\nneed to check if the skip parameter exceeds INT_MAX (which is possible\nfor 16-bit targets where short and int have the same width). We also\nneed to limit the size of the returned value to the max_depth parameter,\nwhich was missing previously.\n\nThis also fixes basic_stacktrace::max_size() to not exceed the maximum\nsize supported by the allocator, which might be smaller than the maximum\nvalue of size_type.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/stacktrace (basic_stacktrace::current): Duplicate\n\timplementation into each overload. Add noinline attribute and\n\tskip current frame.\n\t(basic_stacktrace::max_size()): Call _Impl::_S_max_size.\n\t(basic_stacktrace::_S_curr_cb()): New function defining lambda.\n\t(basic_stacktrace::_Impl::_S_max_size): New function defining\n\tmaximum size in terms of allocator and size_type.\n\t(basic_stacktrace::_Impl::_M_allocate): Check against\n\tmax_size().\n\t* testsuite/19_diagnostics/stacktrace/entry.cc: Call function\n\tfor non-constexpr checks. Check line number is correct.", "tree": {"sha": "ac012f710ff6d4f7bc6dec67892fa61c0d9bfebc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac012f710ff6d4f7bc6dec67892fa61c0d9bfebc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdb9639ee99b68a8c7541e78057e96fe6a2c62ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdb9639ee99b68a8c7541e78057e96fe6a2c62ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdb9639ee99b68a8c7541e78057e96fe6a2c62ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdb9639ee99b68a8c7541e78057e96fe6a2c62ed/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab0f04e4df1b7b312a4c9fa9b4d675778a0bae86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab0f04e4df1b7b312a4c9fa9b4d675778a0bae86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab0f04e4df1b7b312a4c9fa9b4d675778a0bae86"}], "stats": {"total": 98, "additions": 73, "deletions": 25}, "files": [{"sha": "4e271cef3f3155e21720005b72de577e256701d1", "filename": "libstdc++-v3/include/std/stacktrace", "status": "modified", "additions": 69, "deletions": 22, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb9639ee99b68a8c7541e78057e96fe6a2c62ed/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstacktrace", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb9639ee99b68a8c7541e78057e96fe6a2c62ed/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstacktrace", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstacktrace?ref=bdb9639ee99b68a8c7541e78057e96fe6a2c62ed", "patch": "@@ -36,6 +36,7 @@\n #include <bits/stl_algo.h>\n #include <bits/stl_iterator.h>\n #include <bits/stl_uninitialized.h>\n+#include <ext/numeric_traits.h>\n #include <cxxabi.h>\n \n struct __glibcxx_backtrace_state;\n@@ -232,19 +233,42 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // [stacktrace.basic.ctor], creation and assignment\n \n+      [[__gnu__::__noinline__]]\n       static basic_stacktrace\n       current(const allocator_type& __alloc = allocator_type()) noexcept\n       {\n-\treturn current(0, size_type(-1), __alloc);\n+\tauto __state = stacktrace_entry::_S_init();\n+\tbasic_stacktrace __ret(__alloc);\n+\tif (!__ret._M_reserve(64)) [[unlikely]]\n+\t  return __ret;\n+\n+\tif (__glibcxx_backtrace_simple(__state, 1, _S_curr_cb(),\n+\t\t\t\t       nullptr, std::__addressof(__ret)))\n+\t  __ret._M_clear();\n+\n+\treturn __ret;\n       }\n \n+      [[__gnu__::__noinline__]]\n       static basic_stacktrace\n       current(size_type __skip,\n \t      const allocator_type& __alloc = allocator_type()) noexcept\n       {\n-\treturn current(__skip, size_type(-1), __alloc);\n+\tauto __state = stacktrace_entry::_S_init();\n+\tbasic_stacktrace __ret(__alloc);\n+\tif (__skip >= __INT_MAX__) [[unlikely]]\n+\t  return __ret;\n+\tif (!__ret._M_reserve(64)) [[unlikely]]\n+\t  return __ret;\n+\n+\tif (__glibcxx_backtrace_simple(__state, __skip + 1, _S_curr_cb(),\n+\t\t\t\t       nullptr, std::__addressof(__ret)))\n+\t  __ret._M_clear();\n+\n+\treturn __ret;\n       }\n \n+      [[__gnu__::__noinline__]]\n       static basic_stacktrace\n       current(size_type __skip, size_type __max_depth,\n \t      const allocator_type& __alloc = allocator_type()) noexcept\n@@ -253,23 +277,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \tauto __state = stacktrace_entry::_S_init();\n \tbasic_stacktrace __ret(__alloc);\n-\tif (!__ret._M_reserve(std::min<int>(__max_depth, 64)))\n+\tif (__max_depth == 0 || __skip >= __INT_MAX__) [[unlikely]]\n+\t  return __ret;\n+\tif (!__ret._M_reserve(std::min<int>(__max_depth, 64))) [[unlikely]]\n \t  return __ret;\n \n-\tauto __cb = [](void* __data, uintptr_t __pc) {\n-\t  auto& __s = *static_cast<basic_stacktrace*>(__data);\n-\t  stacktrace_entry __f;\n-\t  __f._M_pc = __pc;\n-\t  if (__s._M_push_back(__f))\n-\t    return 0;\n-\t  return 1;\n-\t};\n+\tif (__glibcxx_backtrace_simple(__state, __skip + 1, _S_curr_cb(),\n+\t\t\t\t       nullptr, std::__addressof(__ret)))\n+\t  __ret._M_clear();\n+\telse if (__ret.size() > __max_depth)\n+\t  __ret.resize(__max_depth);\n \n-\tif (__glibcxx_backtrace_simple(__state, __skip, +__cb, nullptr,\n-\t\t\t\t       std::__addressof(__ret)))\n-\t  {\n-\t    __ret._M_clear();\n-\t  }\n \treturn __ret;\n       }\n \n@@ -443,7 +461,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       [[nodiscard]] bool empty() const noexcept { return size() == 0; }\n       size_type size() const noexcept { return _M_impl._M_size; }\n-      size_type max_size() const noexcept { return size_type(-1); }\n+\n+      size_type\n+      max_size() const noexcept\n+      { return _Impl::_S_max_size(_M_impl._M_alloc); }\n \n       const_reference\n       operator[](size_type __n) const noexcept\n@@ -507,6 +528,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_impl._M_deallocate(_M_alloc);\n       }\n \n+      static auto\n+      _S_curr_cb() noexcept\n+      -> int (*) (void*, uintptr_t)\n+      {\n+\treturn [](void* __data, uintptr_t __pc) {\n+\t  auto& __s = *static_cast<basic_stacktrace*>(__data);\n+\t  stacktrace_entry __f;\n+\t  __f._M_pc = __pc;\n+\t  if (__s._M_push_back(__f))\n+\t    return 0;\n+\t  return 1;\n+\t};\n+      }\n+\n       struct _Impl\n       {\n \tusing pointer = typename _AllocTraits::pointer;\n@@ -515,21 +550,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tsize_type _M_size     = 0;\n \tsize_type _M_capacity = 0;\n \n+\tstatic size_type\n+\t_S_max_size(const allocator_type& __alloc) noexcept\n+\t{\n+\t  const size_t __size_max = __gnu_cxx::__int_traits<size_type>::__max;\n+\t  const size_t __alloc_max = _AllocTraits::max_size(__alloc);\n+\t  return std::min(__size_max, __alloc_max);\n+\t}\n+\n \t// Precondition: _M_frames == nullptr\n \tpointer\n \t_M_allocate(allocator_type& __alloc, size_type __n) noexcept\n \t{\n \t  __try\n \t    {\n-\t      _M_frames = __n ? __alloc.allocate(__n) : nullptr;\n-\t      _M_capacity = __n;\n+\t      if (0 < __n && __n <= _S_max_size(__alloc)) [[unlikely]]\n+\t\t{\n+\t\t  _M_frames = __alloc.allocate(__n);\n+\t\t  _M_capacity = __n;\n+\t\t  return _M_frames;\n+\t\t}\n \t    }\n \t  __catch (...)\n \t    {\n-\t      _M_frames = nullptr;\n-\t      _M_capacity = 0;\n \t    }\n-\t  return _M_frames;\n+\t  _M_frames = nullptr;\n+\t  _M_capacity = 0;\n+\t  return nullptr;;\n \t}\n \n \tvoid"}, {"sha": "a222c425b20a4e5ca30999f70f60b6a4dc810fbd", "filename": "libstdc++-v3/testsuite/19_diagnostics/stacktrace/entry.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb9639ee99b68a8c7541e78057e96fe6a2c62ed/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fstacktrace%2Fentry.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb9639ee99b68a8c7541e78057e96fe6a2c62ed/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fstacktrace%2Fentry.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fstacktrace%2Fentry.cc?ref=bdb9639ee99b68a8c7541e78057e96fe6a2c62ed", "patch": "@@ -36,18 +36,19 @@ test_members()\n   VERIFY( e1 != e2 );\n   VERIFY( e1.description() == e2.description() );\n   VERIFY( e1.source_file() == e2.source_file() );\n-  VERIFY( e1.source_line() != e2.source_line() );\n+  VERIFY( e1.source_line() == (__LINE__ - 5) );\n+  VERIFY( e2.source_line() == (__LINE__ - 5) );\n \n   std::stacktrace_entry e3 = []{\n     return std::stacktrace::current().at(0);\n   }();\n   VERIFY( e1 != e3 );\n   VERIFY( e1.description() != e3.description() );\n   VERIFY( e1.source_file() == e3.source_file() );\n-  VERIFY( e1.source_line() != e3.source_line() );\n+  VERIFY( e3.source_line() == (__LINE__ - 5) );\n }\n \n int main()\n {\n-  test_constexpr();\n+  test_members();\n }"}]}