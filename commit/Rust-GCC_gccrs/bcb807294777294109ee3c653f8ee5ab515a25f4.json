{"sha": "bcb807294777294109ee3c653f8ee5ab515a25f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNiODA3Mjk0Nzc3Mjk0MTA5ZWUzYzY1M2Y4ZWU1YWI1MTVhMjVmNA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-06-08T17:52:39Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-06-08T17:52:39Z"}, "message": "Warning fixes:\n\n        * Makefile.in (decl2.o): Depend on dwarf2out.h and dwarfout.h.\n        * cp-tree.h: Add prototype for `maybe_print_template_context' and\n        `maybe_make_one_only'.\n        * decl.c (auto_function): Remove unused variable `decl'.\n        * decl2.c: Include dwarf2out.h and dwarfout.h.\n        * lex.c: Remove redundant declarations of `set_float_handler' and\n        `asm_out_file'.\n\nFrom-SVN: r20349", "tree": {"sha": "c81997c63f7cc2ac23e02cecea61ea4ea83b9624", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c81997c63f7cc2ac23e02cecea61ea4ea83b9624"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcb807294777294109ee3c653f8ee5ab515a25f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcb807294777294109ee3c653f8ee5ab515a25f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcb807294777294109ee3c653f8ee5ab515a25f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcb807294777294109ee3c653f8ee5ab515a25f4/comments", "author": null, "committer": null, "parents": [{"sha": "cb92366029011ef6ee679a2540a2c6a77ad7372e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb92366029011ef6ee679a2540a2c6a77ad7372e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb92366029011ef6ee679a2540a2c6a77ad7372e"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "794665eded7ea29677d79a5edec09457aa84409e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb807294777294109ee3c653f8ee5ab515a25f4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb807294777294109ee3c653f8ee5ab515a25f4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bcb807294777294109ee3c653f8ee5ab515a25f4", "patch": "@@ -1,3 +1,17 @@\n+Mon Jun  8 20:45:52 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (decl2.o): Depend on dwarf2out.h and dwarfout.h.\n+\n+\t* cp-tree.h: Add prototype for `maybe_print_template_context' and\n+ \t`maybe_make_one_only'.\n+\n+\t* decl.c (auto_function): Remove unused variable `decl'.\n+\n+\t* decl2.c: Include dwarf2out.h and dwarfout.h.\n+\n+\t* lex.c: Remove redundant declarations of `set_float_handler' and\n+ \t`asm_out_file'.\n+\n 1998-06-08  Andrew MacLeod  <amacleod@cygnus.com>\n \n \t* except.c (init_exception_processing): Remove NEW_EH_MODEL compile "}, {"sha": "4b44500ab3ac0311e195be1c0ec8b341488380f8", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb807294777294109ee3c653f8ee5ab515a25f4/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb807294777294109ee3c653f8ee5ab515a25f4/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=bcb807294777294109ee3c653f8ee5ab515a25f4", "patch": "@@ -250,7 +250,7 @@ decl.o : decl.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \\\n decl2.o : decl2.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \\\n   lex.h decl.h $(srcdir)/../expr.h ../insn-codes.h $(srcdir)/../except.h \\\n   $(srcdir)/../output.h $(srcdir)/../except.h $(srcdir)/../system.h \\\n-  $(srcdir)/../toplev.h\n+  $(srcdir)/../toplev.h $(srcdir)/../dwarf2out.h $(srcdir)/../dwarfout.h\n typeck2.o : typeck2.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \\\n   $(srcdir)/../system.h $(srcdir)/../toplev.h\n typeck.o : typeck.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h $(RTL_H) \\"}, {"sha": "d5c46173701dfbc7bc2dd0222ebcb1a8b56c145e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb807294777294109ee3c653f8ee5ab515a25f4/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb807294777294109ee3c653f8ee5ab515a25f4/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=bcb807294777294109ee3c653f8ee5ab515a25f4", "patch": "@@ -1819,6 +1819,8 @@ struct tinst_level\n \n extern int minimal_parse_mode;\n \n+extern void maybe_print_template_context\tPROTO ((void));\n+\n /* in class.c */\n extern tree current_class_name;\n extern tree current_class_type;\n@@ -2420,6 +2422,7 @@ extern tree grok_method_quals\t\t\tPROTO((tree, tree, tree));\n extern void warn_if_unknown_interface\t\tPROTO((tree));\n extern tree grok_x_components\t\t\tPROTO((tree, tree));\n extern void maybe_retrofit_in_chrg\t\tPROTO((tree));\n+extern void maybe_make_one_only\t\t\tPROTO((tree));\n extern void grokclassfn\t\t\t\tPROTO((tree, tree, tree, enum overload_flags, tree));\n extern tree grok_alignof\t\t\tPROTO((tree));\n extern tree grok_array_decl\t\t\tPROTO((tree, tree));"}, {"sha": "4804c9f70fc43d2630cc2acafc8492ee727fe7b9", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb807294777294109ee3c653f8ee5ab515a25f4/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb807294777294109ee3c653f8ee5ab515a25f4/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=bcb807294777294109ee3c653f8ee5ab515a25f4", "patch": "@@ -5194,7 +5194,6 @@ auto_function (name, type, code)\n void\n init_decl_processing ()\n {\n-  tree decl;\n   register tree endlink, int_endlink, double_endlink, unsigned_endlink;\n   tree fields[20];\n   /* Data type of memcpy.  */"}, {"sha": "25488c2df4c7358b67eb15819c7544ccceec6b8f", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb807294777294109ee3c653f8ee5ab515a25f4/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb807294777294109ee3c653f8ee5ab515a25f4/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=bcb807294777294109ee3c653f8ee5ab515a25f4", "patch": "@@ -40,6 +40,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"expr.h\"\n #include \"defaults.h\"\n #include \"toplev.h\"\n+#include \"dwarf2out.h\"\n+#include \"dwarfout.h\"\n \n static tree get_sentry PROTO((tree));\n static void mark_vtable_entries PROTO((tree));"}, {"sha": "9444d695e19baf2e38971e2ea72a54585f2bd622", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb807294777294109ee3c653f8ee5ab515a25f4/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb807294777294109ee3c653f8ee5ab515a25f4/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=bcb807294777294109ee3c653f8ee5ab515a25f4", "patch": "@@ -61,7 +61,6 @@ extern struct obstack permanent_obstack;\n extern struct obstack *current_obstack, *saveable_obstack;\n \n extern void yyprint PROTO((FILE *, int, YYSTYPE));\n-extern void set_float_handler PROTO((jmp_buf));\n extern void compiler_error PROTO((char *, HOST_WIDE_INT,\n \t\t\t\t  HOST_WIDE_INT));\n \n@@ -297,9 +296,6 @@ int interface_unknown;\t\t/* whether or not we know this class\n \n /* lexical analyzer */\n \n-/* File used for outputting assembler code.  */\n-extern FILE *asm_out_file;\n-\n #ifndef WCHAR_TYPE_SIZE\n #ifdef INT_TYPE_SIZE\n #define WCHAR_TYPE_SIZE INT_TYPE_SIZE\n@@ -2338,9 +2334,6 @@ check_newline ()\n \t      && getch () == 't'\n \t      && ((c = getch ()) == ' ' || c == '\\t'))\n \t    {\n-#ifdef ASM_OUTPUT_IDENT\n-              extern FILE *asm_out_file;\n-#endif\n \t      /* #ident.  The pedantic warning is now in cccp.c.  */\n \n \t      /* Here we have just seen `#ident '."}]}