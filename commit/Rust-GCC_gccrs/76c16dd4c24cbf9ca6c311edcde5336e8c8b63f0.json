{"sha": "76c16dd4c24cbf9ca6c311edcde5336e8c8b63f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZjMTZkZDRjMjRjYmY5Y2E2YzMxMWVkY2RlNTMzNmU4YzhiNjNmMA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-03-10T13:21:38Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-03-10T13:21:38Z"}, "message": "2003-03-10  Michael Koch  <konqueror@gmx.de>\n\n\t* java/awt/FocusTraversalPolicy.java\n\t(FocusTraversalPolicy): Documentation added.\n\t(getComponentAfter): Documentation added.\n\t(getComponentBefore): Documentation added.\n\t(getFirstComponent): Documentation added.\n\t(getLastComponent): Documentation added.\n\t(getDefaultComponent): Documentation added.\n\t(getInitialComponent): Documentation added.\n\t* java/awt/ScrollPaneAdjustable.java\n\t(sp): New member variable.\n\t(orientation): New member variable.\n\t(value): New member variable.\n\t(minimum): New member variable.\n\t(maximum): New member variable.\n\t(visibleAmount): New member variable.\n\t(unitIncrement): New member variable.\n\t(blockIncrement): New member variable.\n\t(adjustmentListener): New member variable.\n\t(ScrollPaneAdjustable): Rewrote.\n\t(addAdjustmentListener): New method.\n\t(removeAdjustmentListener): New method.\n\t(getAdjustmentListeners): New method.\n\t(getBlockIncrement): New method.\n\t(getMaximum): New method.\n\t(getMinimum): New method.\n\t(getOrientation): New method.\n\t(getUnitIncrement): New method.\n\t(getValue): New method.\n\t(getVisibleAmount): New method.\n\t(setBlockIncrement): New method.\n\t(setUnitIncrement): New method.\n\t(setMaximum): Implemented.\n\t(setMinimum): Implemented.\n\t(setValue): New method.\n\t(setVisibleAmount): Implemented.\n\t(paramString): New method.\n\t* java/awt/Window.java\n\t(show): Use setVisible(true) instead of super.show().\n\t(hide): Use sevVisible(false) instead of super.hide().\n\t(processWindowEvent): Added cases for WINDOW_GAINED_FOCUS,\n\tWINDOW_LOST_FOCUS and WINDOW_STATE_CHANGED.\n\t(postEvent): Deprecated.\n\t(applyResourceBundle): Deprecated.\n\t(processWindowFocusEvent): New method.\n\t(processWindowStateEvent): New method.\n\t* java/awt/datatransfer/DataFlavor.java: Reindented.\n\t* java/awt/font/TextHitInfo.java\n\t(charIndex): New member variable.\n\t(leadingEdge): New member variable.\n\t(TextHitInfo): New constructor.\n\t(getCharIndex): Implemented.\n\t(isLeadingEdge): Implemented.\n\t(getInsertionIndex): Implemented.\n\t(hashCode): Access charIndex directly.\n\t(equals): Reformated.\n\t(leading): Implemented.\n\t(trailing): Implemented.\n\t(beforeOffset): Implemented.\n\t(afterOffset): Implemented.\n\t(getOtherHit): Implemented.\n\t(getOffsetHit): Implemented.\n\t(toString): Implemented.\n\t* java/awt/image/BufferedImage.java\n\t(BufferedImage): Implements WritableRenderedImage.\n\t(observers): New member variable.\n\t(addTileObserver): New method.\n\t(removeTileObserver): New method.\n\nFrom-SVN: r64078", "tree": {"sha": "8824e3ad925c3c75bbbaea307806393f90008db6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8824e3ad925c3c75bbbaea307806393f90008db6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76c16dd4c24cbf9ca6c311edcde5336e8c8b63f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76c16dd4c24cbf9ca6c311edcde5336e8c8b63f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76c16dd4c24cbf9ca6c311edcde5336e8c8b63f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76c16dd4c24cbf9ca6c311edcde5336e8c8b63f0/comments", "author": null, "committer": null, "parents": [{"sha": "e0fd3e7af44dbea3d01bbc8df3a1f3114d993f4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0fd3e7af44dbea3d01bbc8df3a1f3114d993f4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0fd3e7af44dbea3d01bbc8df3a1f3114d993f4e"}], "stats": {"total": 886, "additions": 518, "deletions": 368}, "files": [{"sha": "9d4f506ccee1955e053c73fa88d444f26944d8fb", "filename": "libjava/ChangeLog", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c16dd4c24cbf9ca6c311edcde5336e8c8b63f0/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c16dd4c24cbf9ca6c311edcde5336e8c8b63f0/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=76c16dd4c24cbf9ca6c311edcde5336e8c8b63f0", "patch": "@@ -1,3 +1,73 @@\n+2003-03-10  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/awt/FocusTraversalPolicy.java\n+\t(FocusTraversalPolicy): Documentation added.\n+\t(getComponentAfter): Documentation added.\n+\t(getComponentBefore): Documentation added.\n+\t(getFirstComponent): Documentation added.\n+\t(getLastComponent): Documentation added.\n+\t(getDefaultComponent): Documentation added.\n+\t(getInitialComponent): Documentation added.\n+\t* java/awt/ScrollPaneAdjustable.java\n+\t(sp): New member variable.\n+\t(orientation): New member variable.\n+\t(value): New member variable.\n+\t(minimum): New member variable.\n+\t(maximum): New member variable.\n+\t(visibleAmount): New member variable.\n+\t(unitIncrement): New member variable.\n+\t(blockIncrement): New member variable.\n+\t(adjustmentListener): New member variable.\n+\t(ScrollPaneAdjustable): Rewrote.\n+\t(addAdjustmentListener): New method.\n+\t(removeAdjustmentListener): New method.\n+\t(getAdjustmentListeners): New method.\n+\t(getBlockIncrement): New method.\n+\t(getMaximum): New method.\n+\t(getMinimum): New method.\n+\t(getOrientation): New method.\n+\t(getUnitIncrement): New method.\n+\t(getValue): New method.\n+\t(getVisibleAmount): New method.\n+\t(setBlockIncrement): New method.\n+\t(setUnitIncrement): New method.\n+\t(setMaximum): Implemented.\n+\t(setMinimum): Implemented.\n+\t(setValue): New method.\n+\t(setVisibleAmount): Implemented.\n+\t(paramString): New method.\n+\t* java/awt/Window.java\n+\t(show): Use setVisible(true) instead of super.show().\n+\t(hide): Use sevVisible(false) instead of super.hide().\n+\t(processWindowEvent): Added cases for WINDOW_GAINED_FOCUS,\n+\tWINDOW_LOST_FOCUS and WINDOW_STATE_CHANGED.\n+\t(postEvent): Deprecated.\n+\t(applyResourceBundle): Deprecated.\n+\t(processWindowFocusEvent): New method.\n+\t(processWindowStateEvent): New method.\n+\t* java/awt/datatransfer/DataFlavor.java: Reindented.\n+\t* java/awt/font/TextHitInfo.java\n+\t(charIndex): New member variable.\n+\t(leadingEdge): New member variable.\n+\t(TextHitInfo): New constructor.\n+\t(getCharIndex): Implemented.\n+\t(isLeadingEdge): Implemented.\n+\t(getInsertionIndex): Implemented.\n+\t(hashCode): Access charIndex directly.\n+\t(equals): Reformated.\n+\t(leading): Implemented.\n+\t(trailing): Implemented.\n+\t(beforeOffset): Implemented.\n+\t(afterOffset): Implemented.\n+\t(getOtherHit): Implemented.\n+\t(getOffsetHit): Implemented.\n+\t(toString): Implemented.\n+\t* java/awt/image/BufferedImage.java\n+\t(BufferedImage): Implements WritableRenderedImage.\n+\t(observers): New member variable.\n+\t(addTileObserver): New method.\n+\t(removeTileObserver): New method.\n+\n 2003-03-09  Tom Tromey  <tromey@redhat.com>\n \n \tPR libgcj/9934:"}, {"sha": "0354a7fe1a29137cc47afcdab9e7fe95bd4d74fe", "filename": "libjava/java/awt/FocusTraversalPolicy.java", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c16dd4c24cbf9ca6c311edcde5336e8c8b63f0/libjava%2Fjava%2Fawt%2FFocusTraversalPolicy.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c16dd4c24cbf9ca6c311edcde5336e8c8b63f0/libjava%2Fjava%2Fawt%2FFocusTraversalPolicy.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FFocusTraversalPolicy.java?ref=76c16dd4c24cbf9ca6c311edcde5336e8c8b63f0", "patch": "@@ -39,26 +39,63 @@\n package java.awt;\n \n /**\n- * STUB CLASS ONLY\n+ * @since 1.4\n  */\n public abstract class FocusTraversalPolicy\n {\n+  /**\n+   * Creates a <code>FocusTraversalPolicy</code> object.\n+   */\n   public FocusTraversalPolicy()\n   {\n+    // Do nothing in here.\n   }\n \n+  /**\n+   * Returns the Component that should receive the focus after a Component.\n+   *\n+   * @exception IllegalArgumentException If root or current is null,\n+   * or if root is not a focus cycle root of current.\n+   */\n   public abstract Component getComponentAfter(Container root,\n                                               Component current);\n \n+  /**\n+   * Returns the Component that should receive the focus before a Component.\n+   *\n+   * @exception IllegalArgumentException If root or current is null,\n+   * or if root is not a focus cycle root of current.\n+   */\n   public abstract Component getComponentBefore(Container root,\n                                                Component current);\n \n+  /**\n+   * Returns the first Component in the traversal cycle.\n+   *\n+   * @exception IllegalArgumentException If root is null.\n+   */\n   public abstract Component getFirstComponent(Container root);\n \n+  /**\n+   * Returns the last Component in the traversal cycle.\n+   *\n+   * @exception IllegalArgumentException If root is null.\n+   */\n   public abstract Component getLastComponent(Container root);\n \n+  /**\n+   * Returns the default Component to focus.\n+   *\n+   * @exception IllegalArgumentException If root is null.\n+   */\n   public abstract Component getDefaultComponent(Container root);\n \n+  /**\n+   * Returns the Component that should receive the focus when a Window is made\n+   * visible for the first time.\n+   *\n+   * @exception IllegalArgumentException If window is null.\n+   */\n   public Component getInitialComponent(Window window)\n   {\n     return getDefaultComponent(window);"}, {"sha": "e98c5edb3fa6859bf6d92329cf900ca86982508f", "filename": "libjava/java/awt/Window.java", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c16dd4c24cbf9ca6c311edcde5336e8c8b63f0/libjava%2Fjava%2Fawt%2FWindow.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c16dd4c24cbf9ca6c311edcde5336e8c8b63f0/libjava%2Fjava%2Fawt%2FWindow.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FWindow.java?ref=76c16dd4c24cbf9ca6c311edcde5336e8c8b63f0", "patch": "@@ -503,30 +503,30 @@ protected void processWindowEvent(WindowEvent evt)\n   {\n     if (windowListener != null)\n       {\n-\tswitch (evt.getID())\n-\t  {\n-\t  case WindowEvent.WINDOW_ACTIVATED:\n-\t    windowListener.windowActivated(evt);\n-\t    break;\n-\t  case WindowEvent.WINDOW_CLOSED:\n-\t    windowListener.windowClosed(evt);\n-\t    break;\n-\t  case WindowEvent.WINDOW_CLOSING:\n-\t    windowListener.windowClosing(evt);\n-\t    break;\n-\t  case WindowEvent.WINDOW_DEACTIVATED:\n-\t    windowListener.windowDeactivated(evt);\n-\t    break;\n-\t  case WindowEvent.WINDOW_DEICONIFIED:\n-\t    windowListener.windowDeiconified(evt);\n-\t    break;\n-\t  case WindowEvent.WINDOW_ICONIFIED:\n-\t    windowListener.windowIconified(evt);\n-\t    break;\n-\t  case WindowEvent.WINDOW_OPENED:\n-\t    windowListener.windowOpened(evt);\n-\t    break;\n-\t  }\n+        switch (evt.getID())\n+          {\n+          case WindowEvent.WINDOW_ACTIVATED:\n+            windowListener.windowActivated(evt);\n+            break;\n+          case WindowEvent.WINDOW_CLOSED:\n+            windowListener.windowClosed(evt);\n+            break;\n+          case WindowEvent.WINDOW_CLOSING:\n+            windowListener.windowClosing(evt);\n+            break;\n+          case WindowEvent.WINDOW_DEACTIVATED:\n+            windowListener.windowDeactivated(evt);\n+            break;\n+          case WindowEvent.WINDOW_DEICONIFIED:\n+            windowListener.windowDeiconified(evt);\n+            break;\n+          case WindowEvent.WINDOW_ICONIFIED:\n+            windowListener.windowIconified(evt);\n+            break;\n+          case WindowEvent.WINDOW_OPENED:\n+            windowListener.windowOpened(evt);\n+            break;\n+          }\n       }\n   }\n "}, {"sha": "51b610b8ae50261f94f47b846eed4e4a7695e881", "filename": "libjava/java/awt/datatransfer/DataFlavor.java", "status": "modified", "additions": 325, "deletions": 324, "changes": 649, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c16dd4c24cbf9ca6c311edcde5336e8c8b63f0/libjava%2Fjava%2Fawt%2Fdatatransfer%2FDataFlavor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c16dd4c24cbf9ca6c311edcde5336e8c8b63f0/libjava%2Fjava%2Fawt%2Fdatatransfer%2FDataFlavor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdatatransfer%2FDataFlavor.java?ref=76c16dd4c24cbf9ca6c311edcde5336e8c8b63f0", "patch": "@@ -51,11 +51,11 @@\n import java.nio.CharBuffer;\n \n /**\n-  * This class represents a particular data format used for transferring\n-  * data via the clipboard.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n+ * This class represents a particular data format used for transferring\n+ * data via the clipboard.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n public class DataFlavor implements java.io.Externalizable, Cloneable\n {\n   static final long serialVersionUID = 8367026044764648243L;\n@@ -67,50 +67,50 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n  */\n \n /**\n-  * This is the data flavor used for tranferring plain text.  The MIME\n-  * type is \"text/plain; charset=unicode\".  The representation class\n-  * is <code>java.io.InputStream</code>.\n-  *\n-  * @deprecated The charset unicode is platform specific and InputStream\n-  * deals with bytes not chars. Use <code>getRederForText()</code>.\n-  */\n+ * This is the data flavor used for tranferring plain text.  The MIME\n+ * type is \"text/plain; charset=unicode\".  The representation class\n+ * is <code>java.io.InputStream</code>.\n+ *\n+ * @deprecated The charset unicode is platform specific and InputStream\n+ * deals with bytes not chars. Use <code>getRederForText()</code>.\n+ */\n public static final DataFlavor plainTextFlavor;\n \n /**\n-  * This is the data flavor used for transferring Java strings.  The\n-  * MIME type is \"application/x-java-serialized-object\" and the \n-  * representation class is <code>java.lang.String</code>.\n-  */\n+ * This is the data flavor used for transferring Java strings.  The\n+ * MIME type is \"application/x-java-serialized-object\" and the \n+ * representation class is <code>java.lang.String</code>.\n+ */\n public static final DataFlavor stringFlavor;\n \n /**\n-  * This is a data flavor used for transferring lists of files.  The\n-  * representation type is a <code>java.util.List</code>, with each element of \n-  * the list being a <code>java.io.File</code>.\n-  */\n+ * This is a data flavor used for transferring lists of files.  The\n+ * representation type is a <code>java.util.List</code>, with each element of \n+ * the list being a <code>java.io.File</code>.\n+ */\n public static final DataFlavor javaFileListFlavor;\n \n public static final DataFlavor imageFlavor;\n \n /**\n-  * This is the MIME type used for transferring a serialized object.\n-  * The representation class is the type of object be deserialized.\n-  */\n+ * This is the MIME type used for transferring a serialized object.\n+ * The representation class is the type of object be deserialized.\n+ */\n public static final String javaSerializedObjectMimeType =\n   \"application/x-java-serialized-object\";\n \n /**\n-  * This is the MIME type used to transfer a Java object reference within\n-  * the same JVM.  The representation class is the class of the object\n-  * being transferred.\n-  */\n+ * This is the MIME type used to transfer a Java object reference within\n+ * the same JVM.  The representation class is the class of the object\n+ * being transferred.\n+ */\n public static final String javaJVMLocalObjectMimeType =\n   \"application/x-java-jvm-local-object\";\n \n /**\n-  * This is the MIME type used to transfer a link to a remote object.\n-  * The representation class is the type of object being linked to.\n-  */\n+ * This is the MIME type used to transfer a link to a remote object.\n+ * The representation class is the type of object being linked to.\n+ */\n public static final String javaRemoteObjectMimeType =\n   \"application/x-java-remote-object\";\n \n@@ -158,17 +158,17 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n  */\n \n /**\n-  * This method attempts to load the named class.  The following class\n-  * loaders are searched in order: the bootstrap class loader, the\n-  * system class loader, the context class loader (if it exists), and\n-  * the specified fallback class loader.\n-  *\n-  * @param className The name of the class to load.\n-  * @param classLoader The class loader to use if all others fail, which\n-  * may be <code>null</code>.\n-  *\n-  * @exception ClassNotFoundException If the class cannot be loaded.\n-  */\n+ * This method attempts to load the named class.  The following class\n+ * loaders are searched in order: the bootstrap class loader, the\n+ * system class loader, the context class loader (if it exists), and\n+ * the specified fallback class loader.\n+ *\n+ * @param className The name of the class to load.\n+ * @param classLoader The class loader to use if all others fail, which\n+ * may be <code>null</code>.\n+ *\n+ * @exception ClassNotFoundException If the class cannot be loaded.\n+ */\n protected static final Class\n tryToLoadClass(String className, ClassLoader classLoader)\n                throws ClassNotFoundException\n@@ -214,9 +214,9 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n  */\n \n /**\n-  * Empty public constructor needed for externalization.\n-  * Should not be used for normal instantiation.\n-  */\n+ * Empty public constructor needed for externalization.\n+ * Should not be used for normal instantiation.\n+ */\n public\n DataFlavor()\n {\n@@ -228,8 +228,8 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n /*************************************************************************/\n \n /**\n-  * Private constructor.\n-  */\n+ * Private constructor.\n+ */\n private\n DataFlavor(Class representationClass,\n \t   String mimeType,\n@@ -246,15 +246,15 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n /*************************************************************************/\n \n /**\n-  * Initializes a new instance of <code>DataFlavor</code>.  The class\n-  * and human readable name are specified, the MIME type will be\n-  * \"application/x-java-serialized-object\". If the human readable name\n-  * is not specified (<code>null</code>) then the human readable name\n-  * will be the same as the MIME type.\n-  *\n-  * @param representationClass The representation class for this object.\n-  * @param humanPresentableName The display name of the object.\n-  */\n+ * Initializes a new instance of <code>DataFlavor</code>.  The class\n+ * and human readable name are specified, the MIME type will be\n+ * \"application/x-java-serialized-object\". If the human readable name\n+ * is not specified (<code>null</code>) then the human readable name\n+ * will be the same as the MIME type.\n+ *\n+ * @param representationClass The representation class for this object.\n+ * @param humanPresentableName The display name of the object.\n+ */\n public\n DataFlavor(Class representationClass, String humanPresentableName)\n {\n@@ -268,23 +268,23 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n /*************************************************************************/\n \n /**\n-  * Initializes a new instance of <code>DataFlavor</code> with the\n-  * specified MIME type and description.  If the MIME type has a\n-  * \"class=<rep class>\" parameter then the representation class will\n-  * be the class name specified. Otherwise the class defaults to\n-  * <code>java.io.InputStream</code>. If the human readable name\n-  * is not specified (<code>null</code>) then the human readable name\n-  * will be the same as the MIME type.\n-  *\n-  * @param mimeType The MIME type for this flavor.\n-  * @param humanPresentableName The display name of this flavor.\n-  * @param classLoader The class loader for finding classes if the default\n-  * class loaders do not work.\n-  *\n-  * @exception IllegalArgumentException If the representation class\n-  * specified cannot be loaded.\n-  * @exception ClassNotFoundException If the class is not loaded.\n-  */\n+ * Initializes a new instance of <code>DataFlavor</code> with the\n+ * specified MIME type and description.  If the MIME type has a\n+ * \"class=<rep class>\" parameter then the representation class will\n+ * be the class name specified. Otherwise the class defaults to\n+ * <code>java.io.InputStream</code>. If the human readable name\n+ * is not specified (<code>null</code>) then the human readable name\n+ * will be the same as the MIME type.\n+ *\n+ * @param mimeType The MIME type for this flavor.\n+ * @param humanPresentableName The display name of this flavor.\n+ * @param classLoader The class loader for finding classes if the default\n+ * class loaders do not work.\n+ *\n+ * @exception IllegalArgumentException If the representation class\n+ * specified cannot be loaded.\n+ * @exception ClassNotFoundException If the class is not loaded.\n+ */\n public\n DataFlavor(String mimeType, String humanPresentableName, \n            ClassLoader classLoader) throws ClassNotFoundException\n@@ -317,22 +317,22 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n /*************************************************************************/\n \n /**\n-  * Initializes a new instance of <code>DataFlavor</code> with the\n-  * specified MIME type and description.  If the MIME type has a\n-  * \"class=<rep class>\" parameter then the representation class will\n-  * be the class name specified. Otherwise the class defaults to\n-  * <code>java.io.InputStream</code>. If the human readable name\n-  * is not specified (<code>null</code>) then the human readable name\n-  * will be the same as the MIME type. This is the same as calling\n-  * <code>new DataFlavor(mimeType, humanPresentableName, null)</code>.\n-  *\n-  * @param mimeType The MIME type for this flavor.\n-  * @param humanPresentableName The display name of this flavor.\n-  * @param classLoader The class loader for finding classes.\n-  *\n-  * @exception IllegalArgumentException If the representation class\n-  * specified cannot be loaded.\n-  */\n+ * Initializes a new instance of <code>DataFlavor</code> with the\n+ * specified MIME type and description.  If the MIME type has a\n+ * \"class=<rep class>\" parameter then the representation class will\n+ * be the class name specified. Otherwise the class defaults to\n+ * <code>java.io.InputStream</code>. If the human readable name\n+ * is not specified (<code>null</code>) then the human readable name\n+ * will be the same as the MIME type. This is the same as calling\n+ * <code>new DataFlavor(mimeType, humanPresentableName, null)</code>.\n+ *\n+ * @param mimeType The MIME type for this flavor.\n+ * @param humanPresentableName The display name of this flavor.\n+ * @param classLoader The class loader for finding classes.\n+ *\n+ * @exception IllegalArgumentException If the representation class\n+ * specified cannot be loaded.\n+ */\n public\n DataFlavor(String mimeType, String humanPresentableName)\n            throws ClassNotFoundException\n@@ -343,19 +343,19 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n /*************************************************************************/\n \n /**\n-  * Initializes a new instance of <code>DataFlavor</code> with the specified\n-  * MIME type.  This type can have a \"class=\" parameter to specify the\n-  * representation class, and then the class must exist or an exception will\n-  * be thrown. If there is no \"class=\" parameter then the representation class\n-  * will be <code>java.io.InputStream</code>. This is the same as calling\n-  * <code>new DataFlavor(mimeType, null)</code>.\n-  *\n-  * @param mimeType The MIME type for this flavor.\n-  *\n-  * @exception IllegalArgumentException If a class is not specified in\n-  * the MIME type.\n-  * @exception ClassNotFoundException If the class cannot be loaded.\n-  */\n+ * Initializes a new instance of <code>DataFlavor</code> with the specified\n+ * MIME type.  This type can have a \"class=\" parameter to specify the\n+ * representation class, and then the class must exist or an exception will\n+ * be thrown. If there is no \"class=\" parameter then the representation class\n+ * will be <code>java.io.InputStream</code>. This is the same as calling\n+ * <code>new DataFlavor(mimeType, null)</code>.\n+ *\n+ * @param mimeType The MIME type for this flavor.\n+ *\n+ * @exception IllegalArgumentException If a class is not specified in\n+ * the MIME type.\n+ * @exception ClassNotFoundException If the class cannot be loaded.\n+ */\n public\n DataFlavor(String mimeType) throws ClassNotFoundException\n {\n@@ -365,10 +365,10 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n /*************************************************************************/\n \n /**\n-  * Returns the MIME type of this flavor.\n-  *\n-  * @return The MIME type for this flavor.\n-  */\n+ * Returns the MIME type of this flavor.\n+ *\n+ * @return The MIME type for this flavor.\n+ */\n public String\n getMimeType()\n {\n@@ -378,10 +378,10 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n /*************************************************************************/\n \n /**\n-  * Returns the representation class for this flavor.\n-  *\n-  * @return The representation class for this flavor.\n-  */\n+ * Returns the representation class for this flavor.\n+ *\n+ * @return The representation class for this flavor.\n+ */\n public Class\n getRepresentationClass()\n {\n@@ -391,10 +391,10 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n /*************************************************************************/\n \n /**\n-  * Returns the human presentable name for this flavor.\n-  *\n-  * @return The human presentable name for this flavor.\n-  */\n+ * Returns the human presentable name for this flavor.\n+ *\n+ * @return The human presentable name for this flavor.\n+ */\n public String\n getHumanPresentableName()\n {\n@@ -404,10 +404,10 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n /*************************************************************************/\n \n /**\n-  * Returns the primary MIME type for this flavor.\n-  *\n-  * @return The primary MIME type for this flavor.\n-  */\n+ * Returns the primary MIME type for this flavor.\n+ *\n+ * @return The primary MIME type for this flavor.\n+ */\n public String\n getPrimaryType()\n {\n@@ -421,10 +421,10 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n /*************************************************************************/\n \n /**\n-  * Returns the MIME subtype for this flavor.\n-  *\n-  * @return The MIME subtype for this flavor.\n-  */\n+ * Returns the MIME subtype for this flavor.\n+ *\n+ * @return The MIME subtype for this flavor.\n+ */\n public String\n getSubType()\n {\n@@ -444,15 +444,15 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n /*************************************************************************/\n \n /**\n-  * Returns the value of the named MIME type parameter, or <code>null</code>\n-  * if the parameter does not exist. Given the parameter name and the mime\n-  * string.\n-  *\n-  * @param paramName The name of the parameter.\n-  * @param mimeString The mime string from where the name should be found.\n-  *\n-  * @return The value of the parameter or null.\n-  */\n+ * Returns the value of the named MIME type parameter, or <code>null</code>\n+ * if the parameter does not exist. Given the parameter name and the mime\n+ * string.\n+ *\n+ * @param paramName The name of the parameter.\n+ * @param mimeString The mime string from where the name should be found.\n+ *\n+ * @return The value of the parameter or null.\n+ */\n private static String\n getParameter(String paramName, String mimeString)\n {\n@@ -470,14 +470,15 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n }\n \n /*************************************************************************/\n+\n /**\n-  * Returns the value of the named MIME type parameter, or <code>null</code>\n-  * if the parameter does not exist.\n-  *\n-  * @param paramName The name of the paramter.\n-  *\n-  * @return The value of the parameter.\n-  */\n+ * Returns the value of the named MIME type parameter, or <code>null</code>\n+ * if the parameter does not exist.\n+ *\n+ * @param paramName The name of the paramter.\n+ *\n+ * @return The value of the parameter.\n+ */\n public String\n getParameter(String paramName)\n {\n@@ -487,10 +488,10 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n /*************************************************************************/\n \n /**\n-  * Sets the human presentable name to the specified value.\n-  *\n-  * @param humanPresentableName The new display name.\n-  */\n+ * Sets the human presentable name to the specified value.\n+ *\n+ * @param humanPresentableName The new display name.\n+ */\n public void\n setHumanPresentableName(String humanPresentableName)\n {\n@@ -500,16 +501,16 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n /*************************************************************************/\n \n /**\n-  * Tests the MIME type of this object for equality against the specified\n-  * MIME type.\n-  *\n-  * @param mimeType The MIME type to test against.\n-  *\n-  * @return <code>true</code> if the MIME type is equal to this object's\n-  * MIME type, <code>false</code> otherwise.\n-  *\n-  * @exception NullPointerException If mimeType is null.\n-  */\n+ * Tests the MIME type of this object for equality against the specified\n+ * MIME type.\n+ *\n+ * @param mimeType The MIME type to test against.\n+ *\n+ * @return <code>true</code> if the MIME type is equal to this object's\n+ * MIME type, <code>false</code> otherwise.\n+ *\n+ * @exception NullPointerException If mimeType is null.\n+ */\n public boolean\n isMimeTypeEqual(String mimeType)\n {\n@@ -521,14 +522,14 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n /*************************************************************************/\n \n /**\n-  * Tests the MIME type of this object for equality against the specified\n-  * data flavor's MIME type\n-  *\n-  * @param flavor The flavor to test against.\n-  *\n-  * @return <code>true</code> if the flavor's MIME type is equal to this \n-  * object's MIME type, <code>false</code> otherwise.\n-  */\n+ * Tests the MIME type of this object for equality against the specified\n+ * data flavor's MIME type\n+ *\n+ * @param flavor The flavor to test against.\n+ *\n+ * @return <code>true</code> if the flavor's MIME type is equal to this \n+ * object's MIME type, <code>false</code> otherwise.\n+ */\n public boolean\n isMimeTypeEqual(DataFlavor flavor)\n {\n@@ -538,11 +539,11 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n /*************************************************************************/\n \n /**\n-  * Tests whether or not this flavor represents a serialized object.\n-  *\n-  * @return <code>true</code> if this flavor represents a serialized\n-  * object, <code>false</code> otherwise.\n-  */\n+ * Tests whether or not this flavor represents a serialized object.\n+ *\n+ * @return <code>true</code> if this flavor represents a serialized\n+ * object, <code>false</code> otherwise.\n+ */\n public boolean\n isMimeTypeSerializedObject()\n {\n@@ -552,12 +553,12 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n /*************************************************************************/\n \n /**\n-  * Tests whether or not this flavor has a representation class of\n-  * <code>java.io.InputStream</code>.\n-  *\n-  * @param <code>true</code> if the representation class of this flavor\n-  * is <code>java.io.InputStream</code>, <code>false</code> otherwise.\n-  */\n+ * Tests whether or not this flavor has a representation class of\n+ * <code>java.io.InputStream</code>.\n+ *\n+ * @param <code>true</code> if the representation class of this flavor\n+ * is <code>java.io.InputStream</code>, <code>false</code> otherwise.\n+ */\n public boolean\n isRepresentationClassInputStream()\n {\n@@ -567,12 +568,12 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n /*************************************************************************/\n \n /**\n-  * Tests whether the representation class for this flavor is\n-  * serializable.\n-  *\n-  * @param <code>true</code> if the representation class is serializable,\n-  * <code>false</code> otherwise.\n-  */\n+ * Tests whether the representation class for this flavor is\n+ * serializable.\n+ *\n+ * @param <code>true</code> if the representation class is serializable,\n+ * <code>false</code> otherwise.\n+ */\n public boolean\n isRepresentationClassSerializable()\n {\n@@ -592,11 +593,11 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n /*************************************************************************/\n \n /**\n-  * Tests whether the representation class for his flavor is remote.\n-  *\n-  * @return <code>true</code> if the representation class is remote,\n-  * <code>false</code> otherwise.\n-  */\n+ * Tests whether the representation class for his flavor is remote.\n+ *\n+ * @return <code>true</code> if the representation class is remote,\n+ * <code>false</code> otherwise.\n+ */\n public boolean\n isRepresentationClassRemote()\n {\n@@ -607,11 +608,11 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n /*************************************************************************/\n \n /**\n-  * Tests whether or not this flavor represents a serialized object.\n-  *\n-  * @return <code>true</code> if this flavor represents a serialized\n-  * object, <code>false</code> otherwise.\n-  */\n+ * Tests whether or not this flavor represents a serialized object.\n+ *\n+ * @return <code>true</code> if this flavor represents a serialized\n+ * object, <code>false</code> otherwise.\n+ */\n public boolean\n isFlavorSerializedObjectType()\n {\n@@ -622,11 +623,11 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n /*************************************************************************/\n \n /**\n-  * Tests whether or not this flavor represents a remote object.\n-  *\n-  * @return <code>true</code> if this flavor represents a remote object,\n-  * <code>false</code> otherwise.\n-  */\n+ * Tests whether or not this flavor represents a remote object.\n+ *\n+ * @return <code>true</code> if this flavor represents a remote object,\n+ * <code>false</code> otherwise.\n+ */\n public boolean\n isFlavorRemoteObjectType()\n {\n@@ -636,11 +637,11 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n /*************************************************************************/\n \n /**\n-  * Tests whether or not this flavor represents a list of files.\n-  *\n-  * @return <code>true</code> if this flavor represents a list of files,\n-  * <code>false</code> otherwise.\n-  */\n+ * Tests whether or not this flavor represents a list of files.\n+ *\n+ * @return <code>true</code> if this flavor represents a list of files,\n+ * <code>false</code> otherwise.\n+ */\n public boolean\n isFlavorJavaFileListType()\n {\n@@ -654,14 +655,14 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n /*************************************************************************/\n \n /**\n-  * Returns a copy of this object.\n-  *\n-  * @return A copy of this object.\n-  *\n-  * @exception CloneNotSupportedException If the object's class does not support\n-  * the Cloneable interface. Subclasses that override the clone method can also\n-  * throw this exception to indicate that an instance cannot be cloned.\n-  */\n+ * Returns a copy of this object.\n+ *\n+ * @return A copy of this object.\n+ *\n+ * @exception CloneNotSupportedException If the object's class does not support\n+ * the Cloneable interface. Subclasses that override the clone method can also\n+ * throw this exception to indicate that an instance cannot be cloned.\n+ */\n public Object clone () throws CloneNotSupportedException\n {\n   try\n@@ -677,15 +678,15 @@ public Object clone () throws CloneNotSupportedException\n /*************************************************************************/\n \n /**\n-  * This method test the specified <code>DataFlavor</code> for equality\n-  * against this object.  This will be true if the MIME type and\n-  * representation type are the equal.\n-  *\n-  * @param flavor The <code>DataFlavor</code> to test against.\n-  *\n-  * @return <code>true</code> if the flavor is equal to this object,\n-  * <code>false</code> otherwise.\n-  */\n+ * This method test the specified <code>DataFlavor</code> for equality\n+ * against this object.  This will be true if the MIME type and\n+ * representation type are the equal.\n+ *\n+ * @param flavor The <code>DataFlavor</code> to test against.\n+ *\n+ * @return <code>true</code> if the flavor is equal to this object,\n+ * <code>false</code> otherwise.\n+ */\n public boolean\n equals(DataFlavor flavor)\n {\n@@ -704,22 +705,22 @@ public Object clone () throws CloneNotSupportedException\n /*************************************************************************/\n \n /**\n-  * This method test the specified <code>Object</code> for equality\n-  * against this object.  This will be true if the following conditions\n-  * are met:\n-  * <p>\n-  * <ul>\n-  * <li>The object is not <code>null</code>.\n-  * <li>The object is an instance of <code>DataFlavor</code>.\n-  * <li>The object's MIME type and representation class are equal to\n-  * this object's.\n-  * </ul>\n-  *\n-  * @param obj The <code>Object</code> to test against.\n-  *\n-  * @return <code>true</code> if the flavor is equal to this object,\n-  * <code>false</code> otherwise.\n-  */\n+ * This method test the specified <code>Object</code> for equality\n+ * against this object.  This will be true if the following conditions\n+ * are met:\n+ * <p>\n+ * <ul>\n+ * <li>The object is not <code>null</code>.\n+ * <li>The object is an instance of <code>DataFlavor</code>.\n+ * <li>The object's MIME type and representation class are equal to\n+ * this object's.\n+ * </ul>\n+ *\n+ * @param obj The <code>Object</code> to test against.\n+ *\n+ * @return <code>true</code> if the flavor is equal to this object,\n+ * <code>false</code> otherwise.\n+ */\n public boolean\n equals(Object obj)\n {\n@@ -735,17 +736,17 @@ public Object clone () throws CloneNotSupportedException\n /*************************************************************************/\n \n /**\n-  * Tests whether or not the specified string is equal to the MIME type\n-  * of this object.\n-  *\n-  * @param str The string to test against.\n-  *\n-  * @return <code>true</code> if the string is equal to this object's MIME\n-  * type, <code>false</code> otherwise.\n-  *\n-  * @deprecated Not compatible with <code>hashCode()</code>.\n-  *             Use <code>isMimeTypeEqual()</code>\n-  */\n+ * Tests whether or not the specified string is equal to the MIME type\n+ * of this object.\n+ *\n+ * @param str The string to test against.\n+ *\n+ * @return <code>true</code> if the string is equal to this object's MIME\n+ * type, <code>false</code> otherwise.\n+ *\n+ * @deprecated Not compatible with <code>hashCode()</code>.\n+ *             Use <code>isMimeTypeEqual()</code>\n+ */\n public boolean\n equals(String str)\n {\n@@ -755,10 +756,10 @@ public Object clone () throws CloneNotSupportedException\n /*************************************************************************/\n \n /**\n-  * Returns the hash code for this data flavor.\n-  * The hash code is based on the (lower case) mime type and the\n-  * representation class.\n-  */\n+ * Returns the hash code for this data flavor.\n+ * The hash code is based on the (lower case) mime type and the\n+ * representation class.\n+ */\n public int\n hashCode()\n {\n@@ -768,9 +769,9 @@ public Object clone () throws CloneNotSupportedException\n /*************************************************************************/\n \n /**\n-  * Returns <code>true</code> when the given <code>DataFlavor</code>\n-  * matches this one.\n-  */\n+ * Returns <code>true</code> when the given <code>DataFlavor</code>\n+ * matches this one.\n+ */\n public boolean\n match(DataFlavor dataFlavor)\n {\n@@ -781,16 +782,16 @@ public Object clone () throws CloneNotSupportedException\n /*************************************************************************/\n \n /**\n-  * This method exists for backward compatibility.  It simply returns\n-  * the same name/value pair passed in.\n-  *\n-  * @param name The parameter name.\n-  * @param value The parameter value.\n-  *\n-  * @return The name/value pair.\n-  *\n-  * @deprecated\n-  */\n+ * This method exists for backward compatibility.  It simply returns\n+ * the same name/value pair passed in.\n+ *\n+ * @param name The parameter name.\n+ * @param value The parameter value.\n+ *\n+ * @return The name/value pair.\n+ *\n+ * @deprecated\n+ */\n protected String\n normalizeMimeTypeParameter(String name, String value)\n {\n@@ -800,15 +801,15 @@ public Object clone () throws CloneNotSupportedException\n /*************************************************************************/\n \n /**\n-  * This method exists for backward compatibility.  It simply returns\n-  * the MIME type string unchanged.\n-  *\n-  * @param type The MIME type.\n-  * \n-  * @return The MIME type.\n-  *\n-  * @deprecated\n-  */\n+ * This method exists for backward compatibility.  It simply returns\n+ * the MIME type string unchanged.\n+ *\n+ * @param type The MIME type.\n+ * \n+ * @return The MIME type.\n+ *\n+ * @deprecated\n+ */\n protected String\n normalizeMimeType(String type)\n {\n@@ -818,12 +819,12 @@ public Object clone () throws CloneNotSupportedException\n /*************************************************************************/\n \n /**\n-  * Serialize this class.\n-  *\n-  * @param stream The <code>ObjectOutput</code> stream to serialize to.\n-  *\n-  * @exception IOException If an error occurs.\n-  */\n+ * Serialize this class.\n+ *\n+ * @param stream The <code>ObjectOutput</code> stream to serialize to.\n+ *\n+ * @exception IOException If an error occurs.\n+ */\n public void\n writeExternal(ObjectOutput stream) throws IOException\n {\n@@ -833,14 +834,14 @@ public Object clone () throws CloneNotSupportedException\n /*************************************************************************/\n \n /**\n-  * De-serialize this class.\n-  *\n-  * @param stream The <code>ObjectInput</code> stream to deserialize from.\n-  *\n-  * @exception IOException If an error ocurs.\n-  * @exception ClassNotFoundException If the class for an object being restored\n-  * cannot be found.\n-  */\n+ * De-serialize this class.\n+ *\n+ * @param stream The <code>ObjectInput</code> stream to deserialize from.\n+ *\n+ * @exception IOException If an error ocurs.\n+ * @exception ClassNotFoundException If the class for an object being restored\n+ * cannot be found.\n+ */\n public void\n readExternal(ObjectInput stream) throws IOException, ClassNotFoundException\n {\n@@ -850,9 +851,9 @@ public Object clone () throws CloneNotSupportedException\n /*************************************************************************/\n \n /**\n-  * Returns a string representation of this DataFlavor. Including the\n-  * representation class name, MIME type and human presentable name.\n-  */\n+ * Returns a string representation of this DataFlavor. Including the\n+ * representation class name, MIME type and human presentable name.\n+ */\n public String\n toString()\n {\n@@ -867,8 +868,8 @@ public Object clone () throws CloneNotSupportedException\n /*************************************************************************/\n \n /**\n-  * XXX - Currently returns <code>plainTextFlavor</code>.\n-  */\n+ * XXX - Currently returns <code>plainTextFlavor</code>.\n+ */\n public static final DataFlavor\n getTextPlainUnicodeFlavor()\n {\n@@ -878,10 +879,10 @@ public Object clone () throws CloneNotSupportedException\n /*************************************************************************/\n \n /**\n-  * XXX - Currently returns <code>java.io.InputStream</code>.\n-  *\n-  * @since 1.3\n-  */\n+ * XXX - Currently returns <code>java.io.InputStream</code>.\n+ *\n+ * @since 1.3\n+ */\n public final Class\n getDefaultRepresentationClass()\n {\n@@ -890,8 +891,8 @@ public Object clone () throws CloneNotSupportedException\n /*************************************************************************/\n \n /**\n-  * XXX - Currently returns <code>java.io.InputStream</code>.\n-  */\n+ * XXX - Currently returns <code>java.io.InputStream</code>.\n+ */\n public final String\n getDefaultRepresentationClassAsString()\n {\n@@ -901,15 +902,15 @@ public Object clone () throws CloneNotSupportedException\n /*************************************************************************/\n \n /**\n-  * Selects the best supported text flavor on this implementation.\n-  * Returns <code>null</code> when none of the given flavors is liked.\n-  *\n-  * The <code>DataFlavor</code> returned the first data flavor in the\n-  * array that has either a representation class which is (a subclass of)\n-  * <code>Reader</code> or <code>String</code>, or has a representation\n-  * class which is (a subclass of) <code>InputStream</code> and has a\n-  * primary MIME type of \"text\" and has an supported encoding.\n-  */\n+ * Selects the best supported text flavor on this implementation.\n+ * Returns <code>null</code> when none of the given flavors is liked.\n+ *\n+ * The <code>DataFlavor</code> returned the first data flavor in the\n+ * array that has either a representation class which is (a subclass of)\n+ * <code>Reader</code> or <code>String</code>, or has a representation\n+ * class which is (a subclass of) <code>InputStream</code> and has a\n+ * primary MIME type of \"text\" and has an supported encoding.\n+ */\n public static final DataFlavor\n selectBestTextFlavor(DataFlavor[] availableFlavors)\n {\n@@ -952,30 +953,30 @@ public Object clone () throws CloneNotSupportedException\n /*************************************************************************/\n \n /**\n-  * Creates a <code>Reader</code> for a given <code>Transferable</code>.\n-  *\n-  * If the representation class is a (subclass of) <code>Reader</code>\n-  * then an instance of the representation class is returned. If the\n-  * representatation class is a <code>String</code> then a\n-  * <code>StringReader</code> is returned. And if the representation class\n-  * is a (subclass of) <code>InputStream</code> and the primary MIME type\n-  * is \"text\" then a <code>InputStreamReader</code> for the correct charset\n-  * encoding is returned.\n-  *\n-  * @param transferable The <code>Transferable</code> for which a text\n-  *                     <code>Reader</code> is requested.\n-  *\n-  * @exception IllegalArgumentException If the representation class is not one\n-  * of the seven listed above or the Transferable has null data.\n-  * @exception NullPointerException If the Transferable is null.\n-  * @exception UnsupportedFlavorException when the transferable doesn't\n-  * support this <code>DataFlavor</code>. Or if the representable class\n-  * isn't a (subclass of) <code>Reader</code>, <code>String</code>,\n-  * <code>InputStream</code> and/or the primary MIME type isn't \"text\".\n-  * @exception IOException when any IOException occurs.\n-  * @exception UnsupportedEncodingException if the \"charset\" isn't supported\n-  * on this platform.\n-  */\n+ * Creates a <code>Reader</code> for a given <code>Transferable</code>.\n+ *\n+ * If the representation class is a (subclass of) <code>Reader</code>\n+ * then an instance of the representation class is returned. If the\n+ * representatation class is a <code>String</code> then a\n+ * <code>StringReader</code> is returned. And if the representation class\n+ * is a (subclass of) <code>InputStream</code> and the primary MIME type\n+ * is \"text\" then a <code>InputStreamReader</code> for the correct charset\n+ * encoding is returned.\n+ *\n+ * @param transferable The <code>Transferable</code> for which a text\n+ *                     <code>Reader</code> is requested.\n+ *\n+ * @exception IllegalArgumentException If the representation class is not one\n+ * of the seven listed above or the Transferable has null data.\n+ * @exception NullPointerException If the Transferable is null.\n+ * @exception UnsupportedFlavorException when the transferable doesn't\n+ * support this <code>DataFlavor</code>. Or if the representable class\n+ * isn't a (subclass of) <code>Reader</code>, <code>String</code>,\n+ * <code>InputStream</code> and/or the primary MIME type isn't \"text\".\n+ * @exception IOException when any IOException occurs.\n+ * @exception UnsupportedEncodingException if the \"charset\" isn't supported\n+ * on this platform.\n+ */\n public Reader getReaderForText(Transferable transferable)\n   throws UnsupportedFlavorException, IOException\n {"}, {"sha": "daeb7c689b369696524c02e193c8b6af62bedf78", "filename": "libjava/java/awt/font/TextHitInfo.java", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c16dd4c24cbf9ca6c311edcde5336e8c8b63f0/libjava%2Fjava%2Fawt%2Ffont%2FTextHitInfo.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c16dd4c24cbf9ca6c311edcde5336e8c8b63f0/libjava%2Fjava%2Fawt%2Ffont%2FTextHitInfo.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Ffont%2FTextHitInfo.java?ref=76c16dd4c24cbf9ca6c311edcde5336e8c8b63f0", "patch": "@@ -39,76 +39,87 @@\n \n /**\n  * @author John Leuner <jewel@debian.org>\n- *\n- *\n  */\n-\n-public final class TextHitInfo {\n-\n+public final class TextHitInfo\n+{\n+  private int charIndex;\n+  private boolean leadingEdge;\n+  \n+  TextHitInfo (int charIndex, boolean leadingEdge)\n+  {\n+    this.charIndex = charIndex;\n+    this.leadingEdge = leadingEdge;\n+  }\n+  \n   public int getCharIndex()\n   {\n-    return -1;\n+    return charIndex;\n   }\n \n   public boolean isLeadingEdge()\n   {\n-    return false;\n+    return leadingEdge;\n   }\n \n   public int getInsertionIndex()\n   {\n-    return -1;\n+    return (leadingEdge ? charIndex : charIndex + 1);\n   }\n \n   public int hashCode()\n   {\n-    return getCharIndex();\n+    return charIndex;\n   }\n \n   public boolean equals(Object obj)\n   {\n     if(obj instanceof TextHitInfo)\n       return this.equals((TextHitInfo) obj);\n+    \n     return false;\n   }\n \n   public boolean equals(TextHitInfo hitInfo)\n   {\n-    return (getCharIndex() == hitInfo.getCharIndex()) && (isLeadingEdge() == hitInfo.isLeadingEdge());\n+    return (charIndex == hitInfo.getCharIndex ())\n+            && (leadingEdge == hitInfo.isLeadingEdge ());\n   }\n \n   public static TextHitInfo leading(int charIndex)\n   {\n-    return new TextHitInfo();\n+    return new TextHitInfo (charIndex, true);\n   }\n \n   public static TextHitInfo trailing(int charIndex)\n   {\n-    return new TextHitInfo();\n+    return new TextHitInfo (charIndex, false);\n   }\n \n   public static TextHitInfo beforeOffset(int offset)\n   {\n-    return new TextHitInfo();\n+    return new TextHitInfo (offset, false);\n   }\n \n   public static TextHitInfo afterOffset(int offset)\n   {\n-    return new TextHitInfo();\n+    return new TextHitInfo (offset, true);\n   }\n \n   public TextHitInfo getOtherHit()\n   {\n-    return new TextHitInfo();\n+    return (leadingEdge ? trailing (charIndex - 1) : leading (charIndex + 1));\n   }\n \n   public TextHitInfo getOffsetHit(int offset)\n   {\n-    return new TextHitInfo();\n+    return new TextHitInfo (charIndex + offset, leadingEdge);\n   }\n \n   public String toString()\n   {\n-    return \"\";\n+    return \"TextHitInfo[\"\n+            + charIndex\n+            + (leadingEdge ? \"L\" : \"T\" )\n+            + \"]\";\n   }\n }"}, {"sha": "5d72288f589307938441b9ba2a8e5e7bffa76b0e", "filename": "libjava/java/awt/image/BufferedImage.java", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c16dd4c24cbf9ca6c311edcde5336e8c8b63f0/libjava%2Fjava%2Fawt%2Fimage%2FBufferedImage.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c16dd4c24cbf9ca6c311edcde5336e8c8b63f0/libjava%2Fjava%2Fawt%2Fimage%2FBufferedImage.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2FBufferedImage.java?ref=76c16dd4c24cbf9ca6c311edcde5336e8c8b63f0", "patch": "@@ -53,8 +53,8 @@\n  * \n  * @author Rolf W. Rasmussen <rolfwr@ii.uib.no>\n  */\n-public class BufferedImage extends java.awt.Image\n-    //implements java.awt.image.WritableRenderedImage\n+public class BufferedImage extends Image\n+  implements WritableRenderedImage\n {\n   public static final int TYPE_CUSTOM         =  0,\n                           TYPE_INT_RGB        =  1,\n@@ -88,6 +88,8 @@ public class BufferedImage extends java.awt.Image\n \t\t\t\t   0x03e0,\n \t\t\t\t   0x001f,\n \t\t\t\t   DataBuffer.TYPE_USHORT};\n+\n+  Vector observers;\n   \n   public BufferedImage(int w, int h, int type)\n   {\n@@ -569,4 +571,33 @@ public String toString()\n     // FIXME: implement:\n     return super.toString();\n   }\n+\n+  /**\n+   * Adds a tile observer. If the observer is already present, it receives\n+   * multiple notifications.\n+   *\n+   * @param to The TileObserver to add.\n+   */\n+  public void addTileObserver (TileObserver to)\n+  {\n+    if (observers == null)\n+      observers = new Vector ();\n+\t\n+    observers.add (to);\n+  }\n+\t\n+  /**\n+   * Removes a tile observer. If the observer was not registered,\n+   * nothing happens. If the observer was registered for multiple\n+   * notifications, it is now registered for one fewer notification.\n+   *\n+   * @param to The TileObserver to remove.\n+   */\n+  public void removeTileObserver (TileObserver to)\n+  {\n+    if (observers == null)\n+      return;\n+\t\n+    observers.remove (to);\n+  }\n }"}]}