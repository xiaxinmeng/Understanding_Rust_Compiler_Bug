{"sha": "e582248c938e55da60398a735932dd0462f85530", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU4MjI0OGM5MzhlNTVkYTYwMzk4YTczNTkzMmRkMDQ2MmY4NTUzMA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-01-09T14:45:44Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-01-09T14:45:44Z"}, "message": "cppinit.c (OPT_MD, OPT_MMD): Restore.\n\n        * cppinit.c (OPT_MD, OPT_MMD): Restore.\n        (cpp_handle_option): Handle them.\n        (cpp_post_options): Ensure one of -M or -MM is specified with\n        any other -M? option.\n        (init_dependency_output): Suppress output with -MG.\n        * cpp.texi: Update.\n        * invoke.texi: Update.\n\nFrom-SVN: r38833", "tree": {"sha": "b4a470a5974f15c498eca49d5b0654405fafd6e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4a470a5974f15c498eca49d5b0654405fafd6e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e582248c938e55da60398a735932dd0462f85530", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e582248c938e55da60398a735932dd0462f85530", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e582248c938e55da60398a735932dd0462f85530", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e582248c938e55da60398a735932dd0462f85530/comments", "author": null, "committer": null, "parents": [{"sha": "7894cb27533072c0c2f49e39d937722dd62ef7c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7894cb27533072c0c2f49e39d937722dd62ef7c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7894cb27533072c0c2f49e39d937722dd62ef7c2"}], "stats": {"total": 300, "additions": 218, "deletions": 82}, "files": [{"sha": "5f348c99bbeea870634622bb94434ad43f7a5dd5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e582248c938e55da60398a735932dd0462f85530/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e582248c938e55da60398a735932dd0462f85530/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e582248c938e55da60398a735932dd0462f85530", "patch": "@@ -1,3 +1,16 @@\n+2001-01-09  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * cppinit.c (OPT_MD, OPT_MMD): Restore.\n+        (cpp_handle_option): Handle them.\n+        (cpp_post_options): Ensure one of -M or -MM is specified with\n+        any other -M? option.\n+        (init_dependency_output): Suppress output with -MG.\n+\n+2001-01-09  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * cpp.texi: Update.\n+        * invoke.texi: Update.\n+\n 2001-01-09  Bernd Schmidt  <bernds@redhat.com>\n \n \t* sh.md (reload_outsf): Generate recognizable patterns for"}, {"sha": "3d48cdd6c17e5b33a09d31a44c03cc81dc3b3b38", "filename": "gcc/cpp.texi", "status": "modified", "additions": 33, "deletions": 32, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e582248c938e55da60398a735932dd0462f85530/gcc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e582248c938e55da60398a735932dd0462f85530/gcc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.texi?ref=e582248c938e55da60398a735932dd0462f85530", "patch": "@@ -3092,7 +3092,8 @@ cpp [@samp{-P}] [@samp{-C}] [@samp{-gcc}] [@samp{-traditional}]\n     [@samp{-W}@var{warn}...] [@samp{-I}@var{dir}...]\n     [@samp{-D}@var{macro}[=@var{defn}]...] [@samp{-U}@var{macro}]\n     [@samp{-A}@var{predicate}(@var{answer})]\n-    [@samp{-M}|@samp{-MM}|@samp{-MD}|@samp{-MMD} [@samp{-MG}]]\n+    [@samp{-M}|@samp{-MM}][@samp{-MG}][@samp{-MF}@var{filename}]\n+    [@samp{-MP}][@samp{-MQ}@var{target}...][@samp{-MT}@var{target}...]\n     [@samp{-x} @var{language}] [@samp{-std=}@var{standard}]\n     @var{infile} @var{outfile}\n \n@@ -3347,6 +3348,9 @@ Do not search the standard system directories for header files.\n Only the directories you have specified with @samp{-I} options\n (and the current directory, if appropriate) are searched.\n \n+By using both @samp{-nostdinc} and @samp{-I-}, you can limit the include-file\n+search path to only those directories you specify explicitly.\n+\n @item -nostdinc++\n @findex -nostdinc++\n Do not search for header files in the C++-specific standard directories,\n@@ -3375,11 +3379,17 @@ spaces that have a meaning in the shell syntax.  If you use more than\n one @samp{-D} for the same @var{name}, the rightmost definition takes\n effect.\n \n+Any @samp{-D} and @samp{-U} options on the command line are processed in\n+order, and always before @samp{-imacros @var{file}}, regardless of the\n+order in which they are written.\n+\n @item -U @var{name}\n @findex -U\n-Do not predefine @var{name}.  If both @samp{-U} and @samp{-D} are\n-specified for one name, whichever one appears later on the command line\n-wins.\n+Do not predefine @var{name}.\n+\n+Any @samp{-D} and @samp{-U} options on the command line are processed in\n+order, and always before @samp{-imacros @var{file}}, regardless of the\n+order in which they are written.\n \n @item -undef\n @findex -undef\n@@ -3436,7 +3446,7 @@ Like @samp{-dD}, but emit only the macro names, not their expansions.\n Output @samp{#include} directives in addition to the result of\n preprocessing.\n \n-@item -M [-MG]\n+@item -M\n @findex -M\n Instead of outputting the result of preprocessing, output a rule\n suitable for @code{make} describing the dependencies of the main source\n@@ -3445,43 +3455,34 @@ object file name for that source file, a colon, and the names of all the\n included files.  If there are many included files then the rule is split\n into several lines using @samp{\\}-newline.\n \n-@samp{-MG} says to treat missing header files as generated files and\n-assume they live in the same directory as the source file.  It must be\n-specified in addition to @samp{-M}.\n-\n-This feature is used in automatic updating of makefiles.\n-\n-@item -MM [-MG]\n+@item -MM\n @findex -MM\n-Like @samp{-M} but mention only the files included with @samp{#include\n+Like @samp{-M}, but mention only the files included with @samp{#include\n \"@var{file}\"}.  System header files included with @samp{#include\n <@var{file}>} are omitted.\n \n-@item -MD @var{file}\n-@findex -MD\n-Like @samp{-M} but the dependency information is written to @var{file}.\n-This is in addition to compiling the file as specified --- @samp{-MD}\n-does not inhibit ordinary compilation the way @samp{-M} does.\n-\n-When invoking @code{gcc}, do not specify the @var{file} argument.\n-@code{gcc} will create file names made by replacing \".c\" with \".d\" at\n-the end of the input file names.\n+@item -MF @var{file}\n+@findex -MF\n+When used with @samp{-M} or @samp{-MM}, specifies a file to write the\n+dependencies to.  This allows the preprocessor to write the preprocessed\n+file to stdout normally.  If no @samp{-MF} switch is given, CPP sends\n+the rules to stdout and suppresses normal preprocessed output.\n \n-In Mach, you can use the utility @code{md} to merge multiple dependency\n-files into a single dependency file suitable for using with the\n-@samp{make} command.\n+@item -MG\n+@findex -MG\n+When used with @samp{-M} or @samp{-MM}, @samp{-MG} says to treat missing\n+header files as generated files and assume they live in the same\n+directory as the source file.  It suppresses preprocessed output, as a\n+missing header file is ordinarily an error.\n \n-@item -MMD @var{file}\n-@findex -MMD\n-Like @samp{-MD} except mention only user header files, not system\n-header files.\n+This feature is used in automatic updating of makefiles.\n \n @item -MP\n @findex -MP\n This option instructs CPP to add a phony target for each dependency\n other than the main file, causing each to depend on nothing.  These\n-dummy rules work around errors MAKE gives if you remove header files\n-without updating the Makefile to match.\n+dummy rules work around errors @code{make} gives if you remove header\n+files without updating the @code{Makefile} to match.\n \n This is typical output:-\n \n@@ -3493,8 +3494,8 @@ This is typical output:-\n \n @item -MQ @var{target}\n @item -MT @var{target}\n-@findex -MT\n @findex -MQ\n+@findex -MT\n By default CPP uses the main file name, including any path, and appends\n the object suffix, normally ``.o'', to it to obtain the name of the\n target for dependency generation.  With @samp{-MT} you can specify a"}, {"sha": "0c43a239e3fec0b64fa896691a962cd6c1009ba9", "filename": "gcc/cppinit.c", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e582248c938e55da60398a735932dd0462f85530/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e582248c938e55da60398a735932dd0462f85530/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=e582248c938e55da60398a735932dd0462f85530", "patch": "@@ -1042,9 +1042,11 @@ new_pending_directive (pend, text, handler)\n   DEF_OPT(\"H\",                        0,      OPT_H)                          \\\n   DEF_OPT(\"I\",                        no_dir, OPT_I)                          \\\n   DEF_OPT(\"M\",                        0,      OPT_M)                          \\\n+  DEF_OPT(\"MD\",                       no_fil, OPT_MD)                         \\\n   DEF_OPT(\"MF\",                       no_fil, OPT_MF)                         \\\n   DEF_OPT(\"MG\",                       0,      OPT_MG)                         \\\n   DEF_OPT(\"MM\",                       0,      OPT_MM)                         \\\n+  DEF_OPT(\"MMD\",                      no_fil, OPT_MMD)                        \\\n   DEF_OPT(\"MP\",                       0,      OPT_MP)                         \\\n   DEF_OPT(\"MQ\",                       no_tgt, OPT_MQ)                         \\\n   DEF_OPT(\"MT\",                       no_tgt, OPT_MT)                         \\\n@@ -1461,6 +1463,21 @@ cpp_handle_option (pfile, argc, argv)\n \t  deps_add_target (pfile->deps, arg, opt_code == OPT_MQ);\n \t  break;\n \n+\t  /* -MD and -MMD for cpp0 are deprecated and undocumented\n+\t     (use -M or -MM with -MF instead), and probably should be\n+\t     removed with the next major GCC version.  For the moment\n+\t     we allow these for the benefit of Automake 1.4, which\n+\t     uses these when dependency tracking is enabled.  Automake\n+\t     1.5 will fix this.  */\n+\tcase OPT_MD:\n+\t  CPP_OPTION (pfile, print_deps) = 2;\n+\t  CPP_OPTION (pfile, deps_file) = arg;\n+\t  break;\n+\tcase OPT_MMD:\n+\t  CPP_OPTION (pfile, print_deps) = 1;\n+\t  CPP_OPTION (pfile, deps_file) = arg;\n+\t  break;\n+\n \tcase OPT_A:\n \t  if (arg[0] == '-')\n \t    {\n@@ -1673,12 +1690,13 @@ cpp_post_options (pfile)\n      set its callbacks correctly before calling cpp_start_read.  */\n   init_dependency_output (pfile);\n \n-  /* -MG doesn't select the form of output and must be specified with\n-     one of -M or -MM.  -MG doesn't make sense unless preprocessed\n-     output (and compilation) is inhibited.  */\n-  if (CPP_OPTION (pfile, print_deps_missing_files)\n-      && CPP_OPTION (pfile, print_deps) == 0)\n-    cpp_fatal (pfile, \"-MG must be specified with one of -M or -MM\");\n+  /* After checking the environment variables, check if -M or -MM has\n+     not been specified, but other -M options have.  */\n+  if (CPP_OPTION (pfile, print_deps) == 0 &&\n+      (CPP_OPTION (pfile, print_deps_missing_files)\n+       || CPP_OPTION (pfile, deps_file)\n+       || CPP_OPTION (pfile, deps_phony_targets)))\n+    cpp_fatal (pfile, \"you must additionally specify either -M or -MM\");\n }\n \n /* Set up dependency-file output.  */\n@@ -1726,10 +1744,12 @@ init_dependency_output (pfile)\n       CPP_OPTION (pfile, print_deps_append) = 1;\n     }\n \n-  /* If dependencies go to standard output, we need to suppress\n-     output.  The user may be requesting other stuff to stdout, with\n-     -dM, -v etc.  We let them shoot themselves in the foot.  */\n-  if (CPP_OPTION (pfile, deps_file) == 0)\n+  /* If dependencies go to standard output, or -MG is used, we should\n+     suppress output.  The user may be requesting other stuff to\n+     stdout, with -dM, -v etc.  We let them shoot themselves in the\n+     foot.  */\n+  if (CPP_OPTION (pfile, deps_file) == 0\n+      || CPP_OPTION (pfile, print_deps_missing_files))\n     CPP_OPTION (pfile, no_output) = 1;\n }\n "}, {"sha": "8babed27f7ae21a4195b70a8ee003cc856d1e5ac", "filename": "gcc/invoke.texi", "status": "modified", "additions": 142, "deletions": 40, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e582248c938e55da60398a735932dd0462f85530/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e582248c938e55da60398a735932dd0462f85530/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=e582248c938e55da60398a735932dd0462f85530", "patch": "@@ -255,14 +255,15 @@ in the following sections.\n @item Preprocessor Options\n @xref{Preprocessor Options,,Options Controlling the Preprocessor}.\n @smallexample\n--A@var{question}(@var{answer})  -C  -dD  -dM  -dN\n+-$  -A@var{question}=@var{answer}  -A-@var{question}[=@var{answer}]\n+-C  -dD  -dI  -dM  -dN\n -D@var{macro}@r{[}=@var{defn}@r{]}  -E  -H\n -idirafter @var{dir}\n -include @var{file}  -imacros @var{file}\n -iprefix @var{file}  -iwithprefix @var{dir}\n -iwithprefixbefore @var{dir}  -isystem @var{dir} -isystem-c++ @var{dir}\n--M  -MD  -MM  -MMD  -MG  -nostdinc  -P  -trigraphs\n--undef  -U@var{macro}  -Wp,@var{option}\n+-M  -MM  -MF  -MG  -MP  -MQ  -MT  -nostdinc  -P  -remap\n+-trigraphs  -undef  -U@var{macro}  -Wp,@var{option}\n @end smallexample\n \n @item Assembler Option\n@@ -3222,12 +3223,8 @@ Process @var{file} as input, discarding the resulting output, before\n processing the regular input file.  Because the output generated from\n @var{file} is discarded, the only effect of @samp{-imacros @var{file}}\n is to make the macros defined in @var{file} available for use in the\n-main input.\n-\n-Any @samp{-D} and @samp{-U} options on the command line are always\n-processed before @samp{-imacros @var{file}}, regardless of the order in\n-which they are written.  All the @samp{-include} and @samp{-imacros}\n-options are processed in the order in which they are written.\n+main input.  All the @samp{-include} and @samp{-imacros} options are\n+processed in the order in which they are written.\n \n @item -idirafter @var{dir}\n @cindex second include path\n@@ -3266,6 +3263,15 @@ Options}, for information on @samp{-I}.\n By using both @samp{-nostdinc} and @samp{-I-}, you can limit the include-file\n search path to only those directories you specify explicitly.\n \n+@item -remap\n+@findex -remap\n+When searching for a header file in a directory, remap file names if a\n+file named @file{header.gcc} exists in that directory.  This can be used\n+to work around limitations of file systems with file name restrictions.\n+The @file{header.gcc} file should contain a series of lines with two\n+tokens on each line: the first token is the name to map, and the second\n+token is the actual name to use.\n+\n @item -undef\n Do not predefine any nonstandard macros.  (Including architecture flags).\n \n@@ -3285,44 +3291,86 @@ Used with the @samp{-E} option.\n @cindex make\n @cindex dependencies, make\n @item -M\n-Tell the preprocessor to output a rule suitable for @code{make}\n-describing the dependencies of each object file.  For each source file,\n-the preprocessor outputs one @code{make}-rule whose target is the object\n-file name for that source file and whose dependencies are all the\n-@code{#include} header files it uses.  This rule may be a single line or\n-may be continued with @samp{\\}-newline if it is long.  The list of rules\n-is printed on standard output instead of the preprocessed C program.\n+@findex -M\n+Instead of outputting the result of preprocessing, output a rule\n+suitable for @code{make} describing the dependencies of the main source\n+file.  The preprocessor outputs one @code{make} rule containing the\n+object file name for that source file, a colon, and the names of all the\n+included files.  If there are many included files then the rule is split\n+into several lines using @samp{\\}-newline.\n \n @samp{-M} implies @samp{-E}.\n \n+@item -MM\n+@findex -MM\n+Like @samp{-M}, but mention only the files included with @samp{#include\n+\"@var{file}\"}.  System header files included with @samp{#include\n+<@var{file}>} are omitted.\n+\n+@item -MF @var{file}\n+@findex -MF\n+When used with @samp{-M} or @samp{-MM}, specifies a file to write the\n+dependencies to.  This allows the preprocessor to write the preprocessed\n+file to stdout normally.  If no @samp{-MF} switch is given, CPP sends\n+the rules to stdout and suppresses normal preprocessed output.\n+\n Another way to specify output of a @code{make} rule is by setting\n the environment variable @code{DEPENDENCIES_OUTPUT} (@pxref{Environment\n Variables}).\n \n-@item -MM\n-Like @samp{-M} but the output mentions only the user header files\n-included with @samp{#include \"@var{file}\"}.  System header files\n-included with @samp{#include <@var{file}>} are omitted.\n-\n-@item -MD\n-Like @samp{-M} but the dependency information is written to a file made by\n-replacing \".c\" with \".d\" at the end of the input file names.\n-This is in addition to compiling the file as specified---@samp{-MD} does\n-not inhibit ordinary compilation the way @samp{-M} does.\n-\n-In Mach, you can use the utility @code{md} to merge multiple dependency\n-files into a single dependency file suitable for using with the @samp{make}\n-command.\n-\n-@item -MMD\n-Like @samp{-MD} except mention only user header files, not system\n-header files.\n-\n @item -MG\n-Treat missing header files as generated files and assume they live in the\n-same directory as the source file.  If you specify @samp{-MG}, you\n-must also specify either @samp{-M} or @samp{-MM}.  @samp{-MG} is not\n-supported with @samp{-MD} or @samp{-MMD}.\n+@findex -MG\n+When used with @samp{-M} or @samp{-MM}, @samp{-MG} says to treat missing\n+header files as generated files and assume they live in the same\n+directory as the source file.  It suppresses preprocessed output, as a\n+missing header file is ordinarily an error.\n+\n+This feature is used in automatic updating of makefiles.\n+\n+@item -MP\n+@findex -MP\n+This option instructs CPP to add a phony target for each dependency\n+other than the main file, causing each to depend on nothing.  These\n+dummy rules work around errors @code{make} gives if you remove header\n+files without updating the @code{Makefile} to match.\n+\n+This is typical output:-\n+\n+@smallexample\n+/tmp/test.o: /tmp/test.c /tmp/test.h\n+\n+/tmp/test.h:\n+@end smallexample\n+\n+@item -MQ @var{target}\n+@item -MT @var{target}\n+@findex -MQ\n+@findex -MT\n+By default CPP uses the main file name, including any path, and appends\n+the object suffix, normally ``.o'', to it to obtain the name of the\n+target for dependency generation.  With @samp{-MT} you can specify a\n+target yourself, overriding the default one.\n+\n+If you want multiple targets, you can specify them as a single argument\n+to @samp{-MT}, or use multiple @samp{-MT} options.\n+\n+The targets you specify are output in the order they appear on the\n+command line.  @samp{-MQ} is identical to @samp{-MT}, except that the\n+target name is quoted for Make, but with @samp{-MT} it isn't.  For\n+example, -MT '$(objpfx)foo.o' gives\n+\n+@smallexample\n+$(objpfx)foo.o: /tmp/foo.c\n+@end smallexample\n+\n+but -MQ '$(objpfx)foo.o' gives\n+\n+@smallexample\n+$$(objpfx)foo.o: /tmp/foo.c\n+@end smallexample\n+\n+The default target is automatically quoted, as if it were given with\n+@samp{-MQ}.\n \n @item -H\n Print the name of each header file used, in addition to other normal\n@@ -3341,11 +3389,19 @@ Define macro @var{macro} with the string @samp{1} as its definition.\n Define macro @var{macro} as @var{defn}.  All instances of @samp{-D} on\n the command line are processed before any @samp{-U} options.\n \n+Any @samp{-D} and @samp{-U} options on the command line are processed in\n+order, and always before @samp{-imacros @var{file}}, regardless of the\n+order in which they are written.\n+\n @item -U@var{macro}\n Undefine macro @var{macro}.  @samp{-U} options are evaluated after all\n @samp{-D} options, but before any @samp{-include} and @samp{-imacros}\n options.\n \n+Any @samp{-D} and @samp{-U} options on the command line are processed in\n+order, and always before @samp{-imacros @var{file}}, regardless of the\n+order in which they are written.\n+\n @item -dM\n Tell the preprocessor to output only a list of the macro definitions\n that are in effect at the end of preprocessing.  Used with the @samp{-E}\n@@ -3359,8 +3415,54 @@ their proper sequence in the rest of the output.\n Like @samp{-dD} except that the macro arguments and contents are omitted.\n Only @samp{#define @var{name}} is included in the output.\n \n+@item -dI\n+@findex -dI\n+Output @samp{#include} directives in addition to the result of\n+preprocessing.\n+\n @item -trigraphs\n-Support ISO C trigraphs.  The @samp{-ansi} option also has this effect.\n+@findex -trigraphs\n+Process ISO standard trigraph sequences.  These are three-character\n+sequences, all starting with @samp{??}, that are defined by ISO C to\n+stand for single characters.  For example, @samp{??/} stands for\n+@samp{\\}, so @samp{'??/n'} is a character constant for a newline.  By\n+default, GCC ignores trigraphs, but in standard-conforming modes it\n+converts them.  See the @samp{-std} and @samp{-ansi} options.\n+\n+The nine trigraph sequences are\n+@table @samp\n+@item ??(\n+-> @samp{[}\n+\n+@item ??)\n+-> @samp{]}\n+\n+@item ??<\n+-> @samp{@{}\n+\n+@item ??>\n+-> @samp{@}}\n+\n+@item ??=\n+-> @samp{#}\n+\n+@item ??/\n+-> @samp{\\}\n+\n+@item ??'\n+-> @samp{^}\n+\n+@item ??!\n+-> @samp{|}\n+\n+@item ??-\n+-> @samp{~}\n+\n+@end table\n+\n+Trigraph support is not popular, so many compilers do not implement it\n+properly.  Portable code should not rely on trigraphs being either\n+converted or ignored.\n \n @item -Wp,@var{option}\n Pass @var{option} as an option to the preprocessor.  If @var{option}"}]}