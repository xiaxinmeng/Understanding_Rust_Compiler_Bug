{"sha": "b16a3dea1d1bfa3dde556af84b3592140320b605", "node_id": "C_kwDOANBUbNoAKGIxNmEzZGVhMWQxYmZhM2RkZTU1NmFmODRiMzU5MjE0MDMyMGI2MDU", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-01-28T10:04:06Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-01-28T10:06:20Z"}, "message": "Fix wrong operator for universal_integer operands in instance\n\nThis is a regression present on mainline and 11 branch: the transformation\napplied during expansion by Narrow_Large_Operation would incorrectly perform\nname resolution for the operator again.\n\ngcc/ada/\n\tPR ada/104258\n\t* exp_ch4.adb (Narrow_Large_Operation): Also copy the entity, if\n\tany, when rewriting the operator node.\n\ngcc/testsuite/\n\t* gnat.dg/generic_comp.adb: New test.", "tree": {"sha": "d16eec4f2dfe9f63cc624c317f1a9d7fb4a15b4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d16eec4f2dfe9f63cc624c317f1a9d7fb4a15b4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b16a3dea1d1bfa3dde556af84b3592140320b605", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b16a3dea1d1bfa3dde556af84b3592140320b605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b16a3dea1d1bfa3dde556af84b3592140320b605", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b16a3dea1d1bfa3dde556af84b3592140320b605/comments", "author": null, "committer": null, "parents": [{"sha": "6da86c254aa4d68aab2b1f501a88d53f8777178b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6da86c254aa4d68aab2b1f501a88d53f8777178b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6da86c254aa4d68aab2b1f501a88d53f8777178b"}], "stats": {"total": 45, "additions": 44, "deletions": 1}, "files": [{"sha": "2506c67e9367b1763f9e53068c85d34a3acb43de", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16a3dea1d1bfa3dde556af84b3592140320b605/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16a3dea1d1bfa3dde556af84b3592140320b605/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=b16a3dea1d1bfa3dde556af84b3592140320b605", "patch": "@@ -14314,9 +14314,13 @@ package body Exp_Ch4 is\n          return;\n       end if;\n \n-      --  Finally, rewrite the operation in the narrower type\n+      --  Finally, rewrite the operation in the narrower type, but make sure\n+      --  not to perform name resolution for the operator again.\n \n       Nop := New_Op_Node (Kind, Sloc (N));\n+      if Nkind (N) in N_Has_Entity then\n+         Set_Entity (Nop, Entity (N));\n+      end if;\n \n       if Binary then\n          Set_Left_Opnd (Nop, Convert_To (Ntyp, L));"}, {"sha": "8c7b16f8aae58baf33482f7ef6bf41c3b4d73eda", "filename": "gcc/testsuite/gnat.dg/generic_comp.adb", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16a3dea1d1bfa3dde556af84b3592140320b605/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_comp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16a3dea1d1bfa3dde556af84b3592140320b605/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_comp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_comp.adb?ref=b16a3dea1d1bfa3dde556af84b3592140320b605", "patch": "@@ -0,0 +1,39 @@\n+-- { dg-do run }\n+\n+procedure Generic_Comp is\n+\n+   generic\n+      type Element_Type is private;\n+      type Index_Type is (<>);\n+      type Array_Type is array (Index_Type range <>) of Element_Type;\n+      with function \">\" (Left, Right : Element_Type) return Boolean is <>;\n+   procedure Gen (Data: in out Array_Type);\n+\n+   procedure Gen (Data: in out Array_Type) is\n+   begin\n+      if not (Data'Length > 1)\n+        or else not (Integer'(Data'Length) > 1)\n+        or else not Standard.\">\" (Data'Length, 1)\n+        or else not Standard.\">\" (Integer'(Data'Length), 1)\n+      then\n+         raise Program_Error;\n+      end if;\n+   end;\n+\n+   type My_Array is array (Positive range <>) of Integer;\n+\n+   function Less_Than (L, R : Integer) return Boolean is\n+   begin\n+      return L < R;\n+   end;\n+\n+   procedure Chk_Down is new Gen (Element_Type => Integer,\n+                                  Index_Type   => Positive,\n+                                  Array_Type   => My_Array,\n+                                  \">\"          => Less_Than);\n+\n+   Data : My_Array (1 .. 2);\n+\n+begin\n+   Chk_Down (Data);\n+end;"}]}