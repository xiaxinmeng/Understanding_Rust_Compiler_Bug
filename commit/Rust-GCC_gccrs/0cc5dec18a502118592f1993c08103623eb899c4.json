{"sha": "0cc5dec18a502118592f1993c08103623eb899c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNjNWRlYzE4YTUwMjExODU5MmYxOTkzYzA4MTAzNjIzZWI4OTljNA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-11-30T02:34:56Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-11-30T02:34:56Z"}, "message": "reg-stack.c (change_stack): Improve algorithm used to pop regs off the stack to maximize ffreep usage and...\n\n\n\t* reg-stack.c (change_stack): Improve algorithm used to pop regs\n\toff the stack to maximize ffreep usage and reduce fxch count.\n\nFrom-SVN: r91506", "tree": {"sha": "47b89458332f6451d363ae2fe1ba25b30d151a12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47b89458332f6451d363ae2fe1ba25b30d151a12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cc5dec18a502118592f1993c08103623eb899c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cc5dec18a502118592f1993c08103623eb899c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cc5dec18a502118592f1993c08103623eb899c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cc5dec18a502118592f1993c08103623eb899c4/comments", "author": null, "committer": null, "parents": [{"sha": "c54d30fae2e101b5b4ac7e88e159216cfa9b9afa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54d30fae2e101b5b4ac7e88e159216cfa9b9afa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c54d30fae2e101b5b4ac7e88e159216cfa9b9afa"}], "stats": {"total": 69, "additions": 65, "deletions": 4}, "files": [{"sha": "701b7c5a54728b47ac6a0c971e626328c310175a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cc5dec18a502118592f1993c08103623eb899c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cc5dec18a502118592f1993c08103623eb899c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0cc5dec18a502118592f1993c08103623eb899c4", "patch": "@@ -1,3 +1,8 @@\n+2004-11-29  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* reg-stack.c (change_stack): Improve algorithm used to pop regs\n+\toff the stack to maximize ffreep usage and reduce fxch count.\n+\n 2004-11-30  James A. Morrison  <phython@gcc.gnu.org>\n \n \tPR middle-end/18596"}, {"sha": "11dd8495e88b913ca25abd8ff0199bbae0038b9b", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 60, "deletions": 4, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cc5dec18a502118592f1993c08103623eb899c4/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cc5dec18a502118592f1993c08103623eb899c4/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=0cc5dec18a502118592f1993c08103623eb899c4", "patch": "@@ -2367,10 +2367,66 @@ change_stack (rtx insn, stack old, stack new, enum emit_where where)\n \n   /* Pop any registers that are not needed in the new block.  */\n \n-  for (reg = old->top; reg >= 0; reg--)\n-    if (! TEST_HARD_REG_BIT (new->reg_set, old->reg[reg]))\n-      emit_pop_insn (insn, old, FP_MODE_REG (old->reg[reg], DFmode),\n-\t\t     EMIT_BEFORE);\n+  /* If the destination block's stack already has a specified layout\n+     and contains two or more registers, use a more intelligent algorithm\n+     to pop registers that minimizes the number number of fxchs below.  */\n+  if (new->top > 0)\n+    {\n+      bool slots[REG_STACK_SIZE];\n+      int pops[REG_STACK_SIZE];\n+      int next, dest;\n+\n+      /* First pass to determine the free slots.  */\n+      for (reg = 0; reg <= new->top; reg++)\n+\tslots[reg] = TEST_HARD_REG_BIT (new->reg_set, old->reg[reg]);\n+\n+      /* Second pass to allocate preferred slots.  */\n+      for (reg = old->top; reg > new->top; reg--)\n+\tif (TEST_HARD_REG_BIT (new->reg_set, old->reg[reg]))\n+\t  {\n+\t    dest = -1;\n+\t    for (next = 0; next <= new->top; next++)\n+\t      if (!slots[next] && new->reg[next] == old->reg[reg])\n+\t\t{\n+\t\t  slots[next] = true;\n+\t\t  dest = next;\n+\t\t  break;\n+\t\t}\n+\t    pops[reg] = dest;\n+\t  }\n+\telse\n+\t  pops[reg] = reg;\n+\n+      /* Third pass allocates remaining slots and emits pop insns.  */\n+      next = 0;\n+      for (reg = old->top; reg > new->top; reg--)\n+\t{\n+\t  dest = pops[reg];\n+\t  if (dest == -1)\n+\t    {\n+\t      /* Find next free slot.  */\n+\t      while (slots[next])\n+\t\tnext++;\n+\t      dest = next++;\n+\t    }\n+\t  emit_pop_insn (insn, old, FP_MODE_REG (old->reg[dest], DFmode),\n+\t\t\t EMIT_BEFORE);\n+\t}\n+    }\n+  else\n+    /* The following loop attempts to maximize the number of times we\n+       pop the top of the stack, as this permits the use of the faster\n+       ffreep instruction on platforms that support it.  */\n+    for (reg = 0; reg <= old->top; reg++)\n+      if (! TEST_HARD_REG_BIT (new->reg_set, old->reg[reg]))\n+\t{\n+\t  while (old->top > reg\n+\t\t && ! TEST_HARD_REG_BIT (new->reg_set, old->reg[old->top]))\n+\t    emit_pop_insn (insn, old, FP_MODE_REG (old->reg[old->top], DFmode),\n+\t\t\t   EMIT_BEFORE);\n+\t  emit_pop_insn (insn, old, FP_MODE_REG (old->reg[reg], DFmode),\n+\t\t\t EMIT_BEFORE);\n+\t}\n \n   if (new->top == -2)\n     {"}]}