{"sha": "72170b2269ee7e1217686b7b29e541ee1950491f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzIxNzBiMjI2OWVlN2UxMjE3Njg2YjdiMjllNTQxZWUxOTUwNDkxZg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-11-18T19:46:58Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-11-18T19:46:58Z"}, "message": "install-old.texi: Move some sections out to ...\n\n\t* doc/install-old.texi: Move some sections out to ...\n\t* doc/collect2.texi, doc/configfiles.texi, doc/headerdirs.texi:\n\t... here.  New files.  Make into chapters rather than sections.\n\t* doc/gcc.texi: Include the new files and add menu entries for\n\tthem.\n\t* Makefile.in ($(docdir)/gcc.info, gcc.dvi): Update dependencies.\n\nFrom-SVN: r47150", "tree": {"sha": "28d134a7ca2f965ab42d305350309991639ac8cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28d134a7ca2f965ab42d305350309991639ac8cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72170b2269ee7e1217686b7b29e541ee1950491f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72170b2269ee7e1217686b7b29e541ee1950491f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72170b2269ee7e1217686b7b29e541ee1950491f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72170b2269ee7e1217686b7b29e541ee1950491f/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3d321205faccb3dc6c1360fe96b80b44f0682ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3d321205faccb3dc6c1360fe96b80b44f0682ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3d321205faccb3dc6c1360fe96b80b44f0682ab"}], "stats": {"total": 357, "additions": 190, "deletions": 167}, "files": [{"sha": "af43a7e3acbf4211952ccbd5910d484950aeb288", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72170b2269ee7e1217686b7b29e541ee1950491f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72170b2269ee7e1217686b7b29e541ee1950491f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72170b2269ee7e1217686b7b29e541ee1950491f", "patch": "@@ -1,3 +1,12 @@\n+2001-11-18  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* doc/install-old.texi: Move some sections out to ...\n+\t* doc/collect2.texi, doc/configfiles.texi, doc/headerdirs.texi:\n+\t... here.  New files.  Make into chapters rather than sections.\n+\t* doc/gcc.texi: Include the new files and add menu entries for\n+\tthem.\n+\t* Makefile.in ($(docdir)/gcc.info, gcc.dvi): Update dependencies.\n+\n Sun Nov 18 14:13:52 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* tree.h (TYPE_ALIGN_OK): New flag."}, {"sha": "ee1668ae3cf5eadb45b573ab86a38043e1f355d8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72170b2269ee7e1217686b7b29e541ee1950491f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72170b2269ee7e1217686b7b29e541ee1950491f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=72170b2269ee7e1217686b7b29e541ee1950491f", "patch": "@@ -2325,7 +2325,8 @@ $(docdir)/gcc.info: $(docdir)/gcc.texi $(docdir)/extend.texi \\\n \t $(docdir)/fragments.texi $(docdir)/hostconfig.texi \\\n \t $(docdir)/gnu.texi $(docdir)/interface.texi \\\n \t $(docdir)/makefile.texi $(docdir)/passes.texi \\\n-\t $(docdir)/portability.texi\n+\t $(docdir)/portability.texi $(docdir)/collect2.texi \\\n+\t $(docdir)/configfiles.texi $(docdir)/headerdirs.texi\n \tcd $(srcdir) && $(MAKEINFO) $(MAKEINFOFLAGS) -I doc -I doc/include -o doc/gcc.info doc/gcc.texi\n \n $(docdir)/cppinternals.info: $(docdir)/cppinternals.texi\n@@ -2350,7 +2351,8 @@ gcc.dvi: $(docdir)/gcc.texi $(docdir)/extend.texi $(docdir)/install-old.texi \\\n \t $(docdir)/fragments.texi $(docdir)/hostconfig.texi \\\n \t $(docdir)/gnu.texi $(docdir)/interface.texi \\\n \t $(docdir)/makefile.texi $(docdir)/passes.texi \\\n-\t $(docdir)/portability.texi\n+\t $(docdir)/portability.texi $(docdir)/collect2.texi \\\n+\t $(docdir)/configfiles.texi $(docdir)/headerdirs.texi\n \t$(TEXI2DVI) -I $(docdir) -I $(docdir)/include $(docdir)/gcc.texi\n \n cppinternals.dvi: $(docdir)/cppinternals.texi"}, {"sha": "2cd1d3c0d5a15660a45157e2c445996111e8ad8b", "filename": "gcc/doc/collect2.texi", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72170b2269ee7e1217686b7b29e541ee1950491f/gcc%2Fdoc%2Fcollect2.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72170b2269ee7e1217686b7b29e541ee1950491f/gcc%2Fdoc%2Fcollect2.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcollect2.texi?ref=72170b2269ee7e1217686b7b29e541ee1950491f", "patch": "@@ -0,0 +1,85 @@\n+@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@node Collect2\n+@chapter @code{collect2}\n+\n+GNU CC uses a utility called @code{collect2} on nearly all systems to arrange\n+to call various initialization functions at start time.\n+\n+The program @code{collect2} works by linking the program once and\n+looking through the linker output file for symbols with particular names\n+indicating they are constructor functions.  If it finds any, it\n+creates a new temporary @samp{.c} file containing a table of them,\n+compiles it, and links the program a second time including that file.\n+\n+@findex __main\n+@cindex constructors, automatic calls\n+The actual calls to the constructors are carried out by a subroutine\n+called @code{__main}, which is called (automatically) at the beginning\n+of the body of @code{main} (provided @code{main} was compiled with GNU\n+CC)@.  Calling @code{__main} is necessary, even when compiling C code, to\n+allow linking C and C++ object code together.  (If you use\n+@option{-nostdlib}, you get an unresolved reference to @code{__main},\n+since it's defined in the standard GCC library.  Include @option{-lgcc} at\n+the end of your compiler command line to resolve this reference.)\n+\n+The program @code{collect2} is installed as @code{ld} in the directory\n+where the passes of the compiler are installed.  When @code{collect2}\n+needs to find the @emph{real} @code{ld}, it tries the following file\n+names:\n+\n+@itemize @bullet\n+@item\n+@file{real-ld} in the directories listed in the compiler's search\n+directories.\n+\n+@item\n+@file{real-ld} in the directories listed in the environment variable\n+@code{PATH}.\n+\n+@item\n+The file specified in the @code{REAL_LD_FILE_NAME} configuration macro,\n+if specified.\n+\n+@item\n+@file{ld} in the compiler's search directories, except that\n+@code{collect2} will not execute itself recursively.\n+\n+@item\n+@file{ld} in @code{PATH}.\n+@end itemize\n+\n+``The compiler's search directories'' means all the directories where\n+@code{gcc} searches for passes of the compiler.  This includes\n+directories that you specify with @option{-B}.\n+\n+Cross-compilers search a little differently:\n+\n+@itemize @bullet\n+@item\n+@file{real-ld} in the compiler's search directories.\n+\n+@item\n+@file{@var{target}-real-ld} in @code{PATH}.\n+\n+@item\n+The file specified in the @code{REAL_LD_FILE_NAME} configuration macro,\n+if specified.\n+\n+@item\n+@file{ld} in the compiler's search directories.\n+\n+@item\n+@file{@var{target}-ld} in @code{PATH}.\n+@end itemize\n+\n+@code{collect2} explicitly avoids running @code{ld} using the file name\n+under which @code{collect2} itself was invoked.  In fact, it remembers\n+up a list of such names---in case one copy of @code{collect2} finds\n+another copy (or version) of @code{collect2} installed as @code{ld} in a\n+second place in the search path.\n+\n+@code{collect2} searches for the utilities @code{nm} and @code{strip}\n+using the same algorithm as above for @code{ld}."}, {"sha": "ca0a3a409ef6b324a81c6a8da8a3aa888da9b83f", "filename": "gcc/doc/configfiles.texi", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72170b2269ee7e1217686b7b29e541ee1950491f/gcc%2Fdoc%2Fconfigfiles.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72170b2269ee7e1217686b7b29e541ee1950491f/gcc%2Fdoc%2Fconfigfiles.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fconfigfiles.texi?ref=72170b2269ee7e1217686b7b29e541ee1950491f", "patch": "@@ -0,0 +1,53 @@\n+@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@node Configuration Files\n+@chapter Files Created by @code{configure}\n+\n+Here we spell out what files will be set up by @code{configure}.  Normally\n+you need not be concerned with these files.\n+\n+@itemize @bullet\n+@item\n+@ifset INTERNALS\n+A file named @file{config.h} is created that contains a @samp{#include}\n+of the top-level config file for the machine you will run the compiler\n+on (@pxref{Config}).  This file is responsible for defining information\n+about the host machine.  It includes @file{tm.h}.\n+@end ifset\n+@ifclear INTERNALS\n+A file named @file{config.h} is created that contains a @samp{#include}\n+of the top-level config file for the machine you will run the compiler\n+on (@pxref{Config,,The Configuration File, gcc.info, Using and Porting\n+GCC}).  This file is responsible for defining information about the host\n+machine.  It includes @file{tm.h}.\n+@end ifclear\n+\n+The top-level config file is located in the subdirectory @file{config}.\n+Its name is always @file{xm-@var{something}.h}; usually\n+@file{xm-@var{machine}.h}, but there are some exceptions.\n+\n+If your system does not support symbolic links, you might want to\n+set up @file{config.h} to contain a @samp{#include} command which\n+refers to the appropriate file.\n+\n+@item\n+A file named @file{tconfig.h} is created which includes the top-level config\n+file for your target machine.  This is used for compiling certain\n+programs to run on that machine.\n+\n+@item\n+A file named @file{tm.h} is created which includes the\n+machine-description macro file for your target machine.  It should be in\n+the subdirectory @file{config} and its name is often\n+@file{@var{machine}.h}.\n+\n+@item\n+The command file @file{configure} also constructs the file\n+@file{Makefile} by adding some text to the template file\n+@file{Makefile.in}.  The additional text comes from files in the\n+@file{config} directory, named @file{t-@var{target}} and\n+@file{x-@var{host}}.  If these files do not exist, it means nothing\n+needs to be added for a given target or host.\n+@end itemize"}, {"sha": "ffd2affe9f46f68104d90f4d44a0fa0fb6d13613", "filename": "gcc/doc/gcc.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72170b2269ee7e1217686b7b29e541ee1950491f/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72170b2269ee7e1217686b7b29e541ee1950491f/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=72170b2269ee7e1217686b7b29e541ee1950491f", "patch": "@@ -262,6 +262,9 @@ bugs.  It corresponds to GCC version 3.1.\n * Target Macros::   How to write the machine description C macros and functions.\n * Config::          Writing the @file{xm-@var{machine}.h} file.\n * Fragments::       Writing the @file{t-@var{target}} and @file{x-@var{host}} files.\n+* Configuration Files::  Files created by running @code{configure}.\n+* Collect2::        How @code{collect2} works; how it finds @code{ld}.\n+* Header Dirs::     Understanding the standard header file directories.\n @end ifset\n \n * Funding::         How to help assure funding for free software.\n@@ -318,6 +321,9 @@ bugs.  It corresponds to GCC version 3.1.\n @include tm.texi\n @include hostconfig.texi\n @include fragments.texi\n+@include configfiles.texi\n+@include collect2.texi\n+@include headerdirs.texi\n @end ifset\n \n @include funding.texi"}, {"sha": "17db57f056013ac246eca12e433bf809900a90b8", "filename": "gcc/doc/headerdirs.texi", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72170b2269ee7e1217686b7b29e541ee1950491f/gcc%2Fdoc%2Fheaderdirs.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72170b2269ee7e1217686b7b29e541ee1950491f/gcc%2Fdoc%2Fheaderdirs.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fheaderdirs.texi?ref=72170b2269ee7e1217686b7b29e541ee1950491f", "patch": "@@ -0,0 +1,33 @@\n+@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@node Header Dirs\n+@chapter Standard Header File Directories\n+\n+@code{GCC_INCLUDE_DIR} means the same thing for native and cross.  It is\n+where GNU CC stores its private include files, and also where GNU CC\n+stores the fixed include files.  A cross compiled GNU CC runs\n+@code{fixincludes} on the header files in @file{$(tooldir)/include}.\n+(If the cross compilation header files need to be fixed, they must be\n+installed before GNU CC is built.  If the cross compilation header files\n+are already suitable for ISO C and GNU CC, nothing special need be\n+done).\n+\n+@code{GPLUSPLUS_INCLUDE_DIR} means the same thing for native and cross.  It\n+is where @code{g++} looks first for header files.  The C++ library\n+installs only target independent header files in that directory.\n+\n+@code{LOCAL_INCLUDE_DIR} is used only by native compilers.  GNU CC\n+doesn't install anything there.  It is normally\n+@file{/usr/local/include}.  This is where local additions to a packaged\n+system should place header files.\n+\n+@code{CROSS_INCLUDE_DIR} is used only by cross compilers.  GNU CC\n+doesn't install anything there.\n+\n+@code{TOOL_INCLUDE_DIR} is used for both native and cross compilers.  It\n+is the place for other packages to install header files that GNU CC will\n+use.  For a cross-compiler, this is the equivalent of\n+@file{/usr/include}.  When you build a cross-compiler,\n+@code{fixincludes} processes any header files in this directory."}, {"sha": "4bb526aa1510eb291758c1b8fe3f6324fd4a3f58", "filename": "gcc/doc/install-old.texi", "status": "modified", "additions": 0, "deletions": 165, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72170b2269ee7e1217686b7b29e541ee1950491f/gcc%2Fdoc%2Finstall-old.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72170b2269ee7e1217686b7b29e541ee1950491f/gcc%2Fdoc%2Finstall-old.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall-old.texi?ref=72170b2269ee7e1217686b7b29e541ee1950491f", "patch": "@@ -11,12 +11,9 @@ new GCC install manual @file{gcc/doc/install.texi}.  It is\n provided for historical reference only.\n \n @menu\n-* Configuration Files::  Files created by running @code{configure}.\n * Configurations::    Configurations Supported by GNU CC.\n * Cross-Compiler::   Building and installing a cross-compiler.\n * VMS Install::   See below for installation on VMS.\n-* Collect2::\t  How @code{collect2} works; how it finds @code{ld}.\n-* Header Dirs::   Understanding the standard header file directories.\n @end menu\n \n Here is the procedure for installing GNU CC on a GNU or Unix system.\n@@ -86,56 +83,6 @@ section before proceeding any further with the installation of GNU CC@.\n \n @end enumerate\n \n-@node Configuration Files\n-@section Files Created by @code{configure}\n-\n-Here we spell out what files will be set up by @code{configure}.  Normally\n-you need not be concerned with these files.\n-\n-@itemize @bullet\n-@item\n-@ifset INTERNALS\n-A file named @file{config.h} is created that contains a @samp{#include}\n-of the top-level config file for the machine you will run the compiler\n-on (@pxref{Config}).  This file is responsible for defining information\n-about the host machine.  It includes @file{tm.h}.\n-@end ifset\n-@ifclear INTERNALS\n-A file named @file{config.h} is created that contains a @samp{#include}\n-of the top-level config file for the machine you will run the compiler\n-on (@pxref{Config,,The Configuration File, gcc.info, Using and Porting\n-GCC}).  This file is responsible for defining information about the host\n-machine.  It includes @file{tm.h}.\n-@end ifclear\n-\n-The top-level config file is located in the subdirectory @file{config}.\n-Its name is always @file{xm-@var{something}.h}; usually\n-@file{xm-@var{machine}.h}, but there are some exceptions.\n-\n-If your system does not support symbolic links, you might want to\n-set up @file{config.h} to contain a @samp{#include} command which\n-refers to the appropriate file.\n-\n-@item\n-A file named @file{tconfig.h} is created which includes the top-level config\n-file for your target machine.  This is used for compiling certain\n-programs to run on that machine.\n-\n-@item\n-A file named @file{tm.h} is created which includes the\n-machine-description macro file for your target machine.  It should be in\n-the subdirectory @file{config} and its name is often\n-@file{@var{machine}.h}.\n-\n-@item\n-The command file @file{configure} also constructs the file\n-@file{Makefile} by adding some text to the template file\n-@file{Makefile.in}.  The additional text comes from files in the\n-@file{config} directory, named @file{t-@var{target}} and\n-@file{x-@var{host}}.  If these files do not exist, it means nothing\n-needs to be added for a given target or host.\n-@end itemize\n-\n @node Configurations\n @section Configurations Supported by GNU CC\n @cindex configurations supported by GNU CC\n@@ -724,115 +671,3 @@ by @file{vmsconfig.com}) to define the macro @code{QSORT_WORKAROUND}.\n @code{QSORT_WORKAROUND} is always defined when GNU CC is compiled with\n VAX C, to avoid a problem in case @file{gcclib.olb} is not yet\n available.\n-\n-@node Collect2\n-@section @code{collect2}\n-\n-GNU CC uses a utility called @code{collect2} on nearly all systems to arrange\n-to call various initialization functions at start time.\n-\n-The program @code{collect2} works by linking the program once and\n-looking through the linker output file for symbols with particular names\n-indicating they are constructor functions.  If it finds any, it\n-creates a new temporary @samp{.c} file containing a table of them,\n-compiles it, and links the program a second time including that file.\n-\n-@findex __main\n-@cindex constructors, automatic calls\n-The actual calls to the constructors are carried out by a subroutine\n-called @code{__main}, which is called (automatically) at the beginning\n-of the body of @code{main} (provided @code{main} was compiled with GNU\n-CC)@.  Calling @code{__main} is necessary, even when compiling C code, to\n-allow linking C and C++ object code together.  (If you use\n-@option{-nostdlib}, you get an unresolved reference to @code{__main},\n-since it's defined in the standard GCC library.  Include @option{-lgcc} at\n-the end of your compiler command line to resolve this reference.)\n-\n-The program @code{collect2} is installed as @code{ld} in the directory\n-where the passes of the compiler are installed.  When @code{collect2}\n-needs to find the @emph{real} @code{ld}, it tries the following file\n-names:\n-\n-@itemize @bullet\n-@item\n-@file{real-ld} in the directories listed in the compiler's search\n-directories.\n-\n-@item\n-@file{real-ld} in the directories listed in the environment variable\n-@code{PATH}.\n-\n-@item\n-The file specified in the @code{REAL_LD_FILE_NAME} configuration macro,\n-if specified.\n-\n-@item\n-@file{ld} in the compiler's search directories, except that\n-@code{collect2} will not execute itself recursively.\n-\n-@item\n-@file{ld} in @code{PATH}.\n-@end itemize\n-\n-``The compiler's search directories'' means all the directories where\n-@code{gcc} searches for passes of the compiler.  This includes\n-directories that you specify with @option{-B}.\n-\n-Cross-compilers search a little differently:\n-\n-@itemize @bullet\n-@item\n-@file{real-ld} in the compiler's search directories.\n-\n-@item\n-@file{@var{target}-real-ld} in @code{PATH}.\n-\n-@item\n-The file specified in the @code{REAL_LD_FILE_NAME} configuration macro,\n-if specified.\n-\n-@item\n-@file{ld} in the compiler's search directories.\n-\n-@item\n-@file{@var{target}-ld} in @code{PATH}.\n-@end itemize\n-\n-@code{collect2} explicitly avoids running @code{ld} using the file name\n-under which @code{collect2} itself was invoked.  In fact, it remembers\n-up a list of such names---in case one copy of @code{collect2} finds\n-another copy (or version) of @code{collect2} installed as @code{ld} in a\n-second place in the search path.\n-\n-@code{collect2} searches for the utilities @code{nm} and @code{strip}\n-using the same algorithm as above for @code{ld}.\n-\n-@node Header Dirs\n-@section Standard Header File Directories\n-\n-@code{GCC_INCLUDE_DIR} means the same thing for native and cross.  It is\n-where GNU CC stores its private include files, and also where GNU CC\n-stores the fixed include files.  A cross compiled GNU CC runs\n-@code{fixincludes} on the header files in @file{$(tooldir)/include}.\n-(If the cross compilation header files need to be fixed, they must be\n-installed before GNU CC is built.  If the cross compilation header files\n-are already suitable for ISO C and GNU CC, nothing special need be\n-done).\n-\n-@code{GPLUSPLUS_INCLUDE_DIR} means the same thing for native and cross.  It\n-is where @code{g++} looks first for header files.  The C++ library\n-installs only target independent header files in that directory.\n-\n-@code{LOCAL_INCLUDE_DIR} is used only by native compilers.  GNU CC\n-doesn't install anything there.  It is normally\n-@file{/usr/local/include}.  This is where local additions to a packaged\n-system should place header files.\n-\n-@code{CROSS_INCLUDE_DIR} is used only by cross compilers.  GNU CC\n-doesn't install anything there.\n-\n-@code{TOOL_INCLUDE_DIR} is used for both native and cross compilers.  It\n-is the place for other packages to install header files that GNU CC will\n-use.  For a cross-compiler, this is the equivalent of\n-@file{/usr/include}.  When you build a cross-compiler,\n-@code{fixincludes} processes any header files in this directory."}]}