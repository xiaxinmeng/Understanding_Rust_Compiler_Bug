{"sha": "abcb651bac5a4aeadca671b7ed76d396788cfa10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJjYjY1MWJhYzVhNGFlYWRjYTY3MWI3ZWQ3NmQzOTY3ODhjZmExMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2015-10-23T13:10:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-23T13:10:35Z"}, "message": "gnat_rm.texi, [...]: Regenerate.\n\n2015-10-23  Arnaud Charlet  <charlet@adacore.com>\n        \n\t* gnat_rm.texi, gnat_ugn.texi: Regenerate.\n\t* doc/share/ada_pygments.py, doc/gnat_ugn/gnat_project_manager.rst,\n\tdoc/gnat_ugn/building_executable_programs_with_gnat.rst,\n\tdoc/gnat_ugn/gnat_and_program_execution.rst,\n\tdoc/gnat_rm/implementation_defined_attributes.rst,\n\tdoc/gnat_rm/standard_and_implementation_defined_restrictions.rst,\n\tdoc/gnat_rm/representation_clauses_and_pragmas.rst,\n\tdoc/gnat_rm/implementation_defined_pragmas.rst,\n\tdoc/gnat_rm/about_this_guide.rst,\n\tdoc/gnat_rm/implementation_of_ada_2012_features.rst,\n\tdoc/gnat_rm/implementation_of_specific_ada_features.rst,\n\tdoc/gnat_rm/implementation_defined_aspects.rst,\n\tdoc/gnat_rm/implementation_advice.rst: Update documentation.\n\nFrom-SVN: r229254", "tree": {"sha": "5ce6497a1cd980922a90866947d722440d2d5484", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ce6497a1cd980922a90866947d722440d2d5484"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abcb651bac5a4aeadca671b7ed76d396788cfa10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abcb651bac5a4aeadca671b7ed76d396788cfa10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abcb651bac5a4aeadca671b7ed76d396788cfa10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abcb651bac5a4aeadca671b7ed76d396788cfa10/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "879ac954ef76a1af1888abfaa44257f6f728372b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/879ac954ef76a1af1888abfaa44257f6f728372b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/879ac954ef76a1af1888abfaa44257f6f728372b"}], "stats": {"total": 2148, "additions": 1228, "deletions": 920}, "files": [{"sha": "d94db513a2e816f4564ad70a5da66442a5724ff9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=abcb651bac5a4aeadca671b7ed76d396788cfa10", "patch": "@@ -1,3 +1,19 @@\n+2015-10-23  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat_rm.texi, gnat_ugn.texi: Regenerate.\n+\t* doc/share/ada_pygments.py, doc/gnat_ugn/gnat_project_manager.rst,\n+\tdoc/gnat_ugn/building_executable_programs_with_gnat.rst,\n+\tdoc/gnat_ugn/gnat_and_program_execution.rst,\n+\tdoc/gnat_rm/implementation_defined_attributes.rst,\n+\tdoc/gnat_rm/standard_and_implementation_defined_restrictions.rst,\n+\tdoc/gnat_rm/representation_clauses_and_pragmas.rst,\n+\tdoc/gnat_rm/implementation_defined_pragmas.rst,\n+\tdoc/gnat_rm/about_this_guide.rst,\n+\tdoc/gnat_rm/implementation_of_ada_2012_features.rst,\n+\tdoc/gnat_rm/implementation_of_specific_ada_features.rst,\n+\tdoc/gnat_rm/implementation_defined_aspects.rst,\n+\tdoc/gnat_rm/implementation_advice.rst: Update documentation.\n+\n 2015-10-23  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* contracts.ads, contracts.adb: New unit."}, {"sha": "11450c421b835527ad945c29a71f6dcdbf34cb7e", "filename": "gcc/ada/doc/gnat_rm/about_this_guide.rst", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fabout_this_guide.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fabout_this_guide.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fabout_this_guide.rst?ref=abcb651bac5a4aeadca671b7ed76d396788cfa10", "patch": "@@ -29,6 +29,7 @@ different compilers on different platforms.\n However, since Ada is designed to be used in a\n wide variety of applications, it also contains a number of system\n dependent features to be used in interfacing to the external world.\n+\n .. index:: Implementation-dependent features\n \n .. index:: Portability"}, {"sha": "c505e31b97c97ea7e3458c8c11f5d4138b169a8e", "filename": "gcc/ada/doc/gnat_rm/implementation_advice.rst", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_advice.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_advice.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_advice.rst?ref=abcb651bac5a4aeadca671b7ed76d396788cfa10", "patch": "@@ -294,8 +294,8 @@ RM 13.1 (21-24): Representation Clauses\n   qualified as follows:\n \n   An implementation need not support representation items containing\n-  non-static expressions, except that an implementation should support a\n-  representation item for a given entity if each non-static expression in\n+  nonstatic expressions, except that an implementation should support a\n+  representation item for a given entity if each nonstatic expression in\n   the representation item is a name that statically denotes a constant\n   declared before the entity.\"\n \n@@ -318,7 +318,7 @@ For example:\n   constraints on the subtype and its composite subcomponents (if any) are\n   all static constraints.\"\n \n-Followed.  Size Clauses are not permitted on non-static components, as\n+Followed.  Size Clauses are not permitted on nonstatic components, as\n described above.\n \n "}, {"sha": "b0c5ef68b9698b24237397ffbfa9515cb466aeda", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_aspects.rst", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst?ref=abcb651bac5a4aeadca671b7ed76d396788cfa10", "patch": "@@ -98,6 +98,12 @@ Aspect Async_Writers\n \n This boolean aspect is equivalent to pragma `Async_Writers`.\n \n+Aspect Constant_After_Elaboration\n+=================================\n+.. index:: Constant_After_Elaboration\n+\n+This aspect is equivalent to pragma `Constant_After_Elaboration`.\n+\n Aspect Contract_Cases\n =====================\n .. index:: Contract_Cases\n@@ -112,6 +118,12 @@ Aspect Depends\n \n This aspect is equivalent to pragma `Depends`.\n \n+Aspect Default_Initial_Condition\n+================================\n+.. index:: Default_Initial_Condition\n+\n+This aspect is equivalent to pragma `Default_Initial_Condition`.\n+\n Aspect Dimension\n ================\n .. index:: Dimension\n@@ -223,12 +235,24 @@ Aspect Effective_Writes\n \n This aspect is equivalent to pragma `Effective_Writes`.\n \n+Aspect Extensions_Visible\n+=========================\n+.. index:: Extensions_Visible\n+\n+This aspect is equivalent to pragma `Extensions_Visible`.\n+\n Aspect Favor_Top_Level\n ======================\n .. index:: Favor_Top_Level\n \n This boolean aspect is equivalent to pragma `Favor_Top_Level`.\n \n+Aspect Ghost\n+=============\n+.. index:: Ghost\n+\n+This aspect is equivalent to pragma `Ghost`.\n+\n Aspect Global\n =============\n .. index:: Global\n@@ -527,6 +551,12 @@ Aspect Volatile_Full_Access\n \n This boolean aspect is equivalent to pragma `Volatile_Full_Access`.\n \n+Aspect Volatile_Function\n+===========================\n+.. index:: Volatile_Function\n+\n+This boolean aspect is equivalent to pragma `Volatile_Function`.\n+\n Aspect Warnings\n ===============\n .. index:: Warnings"}, {"sha": "601ca78e6ae84ba0a6e08f130c42257a072f7158", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_attributes.rst", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst?ref=abcb651bac5a4aeadca671b7ed76d396788cfa10", "patch": "@@ -44,7 +44,7 @@ Attribute Address_Size\n prefix) is a static constant giving the number of bits in an\n `Address`. It is the same value as System.Address'Size,\n but has the advantage of being static, while a direct\n-reference to System.Address'Size is non-static because Address\n+reference to System.Address'Size is nonstatic because Address\n is a private type.\n \n Attribute Asm_Input\n@@ -233,7 +233,7 @@ Attribute Descriptor_Size\n \n .. index:: Descriptor_Size\n \n-Non-static attribute `Descriptor_Size` returns the size in bits of the\n+Nonstatic attribute `Descriptor_Size` returns the size in bits of the\n descriptor allocated for a type.  The result is non-zero only for unconstrained\n array types and the returned value is of type universal integer.  In GNAT, an\n array descriptor contains bounds information and is located immediately before\n@@ -760,7 +760,7 @@ Attribute Passed_By_Reference\n a value of type `Boolean` value that is `True` if the type is\n normally passed by reference and `False` if the type is normally\n passed by copy in calls.  For scalar types, the result is always `False`\n-and is static.  For non-scalar types, the result is non-static.\n+and is static.  For non-scalar types, the result is nonstatic.\n \n Attribute Pool_Address\n ======================\n@@ -1145,7 +1145,7 @@ a static expression, then the result of the attribute is a\n static expression.  This means that such an expression can be\n used in contexts (e.g., preelaborable packages) which require a\n static expression and where the function call could not be used\n-(since the function call is always non-static, even if its\n+(since the function call is always nonstatic, even if its\n argument is static). The argument must be in the range\n -(2**(m-1) .. 2**m-1, where m is the memory size\n (typically 32 or 64). Negative values are intepreted in a\n@@ -1203,17 +1203,6 @@ Attribute TypeCode\n This internal attribute is used for the generation of remote subprogram\n stubs in the context of the Distributed Systems Annex.\n \n-Attribute UET_Address\n-=====================\n-.. index:: UET_Address\n-\n-The `UET_Address` attribute can only be used for a prefix which\n-denotes a library package.  It yields the address of the unit exception\n-table when zero cost exception handling is used.  This attribute is\n-intended only for use within the GNAT implementation.  See the unit\n-`Ada.Exceptions` in files :file:`a-except.ads` and :file:`a-except.adb`\n-for details on how this attribute is used in the implementation.\n-\n Attribute Unconstrained_Array\n =============================\n .. index:: Unconstrained_Array"}, {"sha": "7bde3f38f29cd6488b5713244e6aefb7409f1a43", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=abcb651bac5a4aeadca671b7ed76d396788cfa10", "patch": "@@ -1057,6 +1057,12 @@ If the alignment for a record or array type is not specified (using\n pragma `Pack`, pragma `Component_Alignment`, or a record rep\n clause), the GNAT uses the default alignment as described previously.\n \n+Pragma Constant_After_Elaboration\n+=================================\n+\n+For the description of this pragma, see SPARK 2014 Reference Manual,\n+section 3.3.1.\n+\n Pragma Contract_Cases\n =====================\n .. index:: Contract cases\n@@ -1310,6 +1316,12 @@ This pragma is standard in Ada 2012, but is available in all earlier\n versions of Ada as an implementation-defined pragma.\n See Ada 2012 Reference Manual for details.\n \n+Pragma Default_Initial_Condition\n+================================\n+\n+For the description of this pragma, see SPARK 2014 Reference Manual,\n+section 7.3.3.\n+\n Pragma Debug\n ============\n \n@@ -1962,6 +1974,12 @@ of GNAT specific extensions are recognized as follows:\n   is constrained.\n \n \n+Pragma Extensions_Visible\n+=========================\n+\n+For the description of this pragma, see SPARK 2014 Reference Manual,\n+section 6.1.7.\n+\n Pragma External\n ===============\n \n@@ -2158,6 +2176,12 @@ be `IEEE_Float` to specify the use of IEEE format, as follows:\n *\n   No other value of digits is permitted.\n \n+Pragma Ghost\n+============\n+\n+For the description of this pragma, see SPARK 2014 Reference Manual,\n+section 6.9.\n+\n Pragma Global\n =============\n \n@@ -5376,7 +5400,7 @@ Pragma Source_File_Name_Project\n ===============================\n \n This pragma has the same syntax and semantics as pragma Source_File_Name.\n-It is only allowed as a stand alone configuration pragma.\n+It is only allowed as a stand-alone configuration pragma.\n It cannot appear after a :ref:`Pragma_Source_File_Name`, and\n most importantly, once pragma Source_File_Name_Project appears,\n no further Source_File_Name pragmas are allowed.\n@@ -6568,6 +6592,12 @@ the same object.\n It is not permissible to specify `Volatile_Full_Access` for a composite\n (record or array) type or object that has at least one `Aliased` component.\n \n+Pragma Volatile_Function\n+========================\n+\n+For the description of this pragma, see SPARK 2014 Reference Manual,\n+section 7.1.2.\n+\n Pragma Warning_As_Error\n =======================\n "}, {"sha": "303b425c459913cdbc4b61facc3201471c9ce822", "filename": "gcc/ada/doc/gnat_rm/implementation_of_ada_2012_features.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_of_ada_2012_features.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_of_ada_2012_features.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_of_ada_2012_features.rst?ref=abcb651bac5a4aeadca671b7ed76d396788cfa10", "patch": "@@ -422,7 +422,7 @@ Supported Aspect                    Source\n * *AI-0220 Needed components for aggregates (0000-00-00)*\n \n   This AI addresses a wording problem in the RM that appears to permit some\n-  complex cases of aggregates with non-static discriminants. GNAT has always\n+  complex cases of aggregates with nonstatic discriminants. GNAT has always\n   implemented the intended semantics.\n \n   RM References:  4.03.01 (17)"}, {"sha": "4ba0926065b3e378a414969f8c21489ac66adb92", "filename": "gcc/ada/doc/gnat_rm/implementation_of_specific_ada_features.rst", "status": "modified", "additions": 41, "deletions": 43, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_of_specific_ada_features.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_of_specific_ada_features.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_of_specific_ada_features.rst?ref=abcb651bac5a4aeadca671b7ed76d396788cfa10", "patch": "@@ -17,17 +17,17 @@ Machine Code Insertions\n Package `Machine_Code` provides machine code support as described\n in the Ada Reference Manual in two separate forms:\n \n-* \n+*\n   Machine code statements, consisting of qualified expressions that\n   fit the requirements of RM section 13.8.\n-* \n+*\n   An intrinsic callable procedure, providing an alternative mechanism of\n   including machine instructions in a subprogram.\n \n The two features are similar, and both are closely related to the mechanism\n provided by the asm instruction in the GNU C compiler.  Full understanding\n and use of the facilities in this package requires understanding the asm\n-instruction, see the section on Extended Asm in \n+instruction, see the section on Extended Asm in\n :title:`Using_the_GNU_Compiler_Collection_(GCC)`.\n \n Calls to the function `Asm` and the procedure `Asm` have identical\n@@ -40,7 +40,7 @@ Consider this C `asm` instruction:\n ::\n \n      asm (\"fsinx %1 %0\" : \"=f\" (result) : \"f\" (angle));\n-  \n+\n \n The equivalent can be written for GNAT as:\n \n@@ -49,7 +49,7 @@ The equivalent can be written for GNAT as:\n   Asm (\"fsinx %1 %0\",\n        My_Float'Asm_Output (\"=f\", result),\n        My_Float'Asm_Input  (\"f\",  angle));\n-  \n+\n \n The first argument to `Asm` is the assembler template, and is\n identical to what is used in GNU C.  This string must be a static\n@@ -62,7 +62,7 @@ The `Asm_Output` attribute denotes a function that takes two\n parameters.  The first is a string, the second is the name of a variable\n of the type designated by the attribute prefix.  The first (string)\n argument is required to be a static expression and designates the\n-constraint (see the section on Constraints in \n+constraint (see the section on Constraints in\n :title:`Using_the_GNU_Compiler_Collection_(GCC)`)\n for the parameter; e.g., what kind of register is required.  The second\n argument is the variable to be written or updated with the\n@@ -129,7 +129,7 @@ appear as aggregates of the form:\n \n   Asm_Insn'(Asm (...));\n   Asm_Insn'(Asm_Volatile (...));\n-  \n+\n In accordance with RM rules, such code statements are allowed only\n within subprograms whose entire body consists of such statements.  It is\n not permissible to intermix such statements with other Ada statements.\n@@ -165,7 +165,7 @@ normal rules for use of positional and named arguments:\n \n   INPUT_OPERAND_ATTRIBUTE ::=\n     SUBTYPE_MARK'Asm_Input (static_string_EXPRESSION, EXPRESSION)\n-  \n+\n The identifiers `No_Input_Operands` and `No_Output_Operands`\n are declared in the package `Machine_Code` and must be referenced\n according to normal visibility rules. In particular if there is no\n@@ -215,27 +215,28 @@ kernel.  For example, in the case of VxWorks, one Ada task = one VxWorks task.\n In addition Ada task priorities map onto the underlying thread priorities.\n Mapping Ada tasks onto the underlying kernel threads has several advantages:\n \n-* \n+*\n   The underlying scheduler is used to schedule the Ada tasks.  This\n   makes Ada tasks as efficient as kernel threads from a scheduling\n   standpoint.\n \n-* \n+*\n   Interaction with code written in C containing threads is eased\n   since at the lowest level Ada tasks and C threads map onto the same\n   underlying kernel concept.\n \n-* \n+*\n   When an Ada task is blocked during I/O the remaining Ada tasks are\n   able to proceed.\n \n-* \n+*\n   On multiprocessor systems Ada tasks can execute in parallel.\n \n Some threads libraries offer a mechanism to fork a new process, with the\n child process duplicating the threads from the parent.\n GNAT does not\n support this functionality when the parent contains more than one task.\n+\n .. index:: Forking a new process\n \n .. _Ensuring_Compliance_with_the_Real-Time_Annex:\n@@ -291,14 +292,14 @@ GNAT Implementation of Shared Passive Packages\n \n .. index:: Shared passive packages\n \n-GNAT fully implements the pragma `Shared_Passive` for\n-.. index:: pragma `Shared_Passive`\n-\n+GNAT fully implements the :index:`pragma <pragma Shared_Passive>`\n+`Shared_Passive` for\n the purpose of designating shared passive packages.\n This allows the use of passive partitions in the\n context described in the Ada Reference Manual; i.e., for communication\n between separate partitions of a distributed application using the\n features in Annex E.\n+\n .. index:: Annex E\n \n .. index:: Distribution Systems Annex\n@@ -348,7 +349,7 @@ will have the names:\n \n   /stemp/x.y\n   /stemp/x.z\n-  \n+\n \n These files are created when a value is initially written to the object, and\n the files are retained until manually deleted. This provides the persistence\n@@ -411,7 +412,7 @@ For the declarations:\n \n       type One_Dim is array (1..10) of integer;\n       ar0 : constant One_Dim := (1, 2, 3, 4, 5, 6, 7, 8, 9, 0);\n-  \n+\n \n GNAT generates no executable code: the constant ar0 is placed in static memory.\n The same is true for constant aggregates with named associations:\n@@ -421,15 +422,15 @@ The same is true for constant aggregates with named associations:\n \n       Cr1 : constant One_Dim := (4 => 16, 2 => 4, 3 => 9, 1 => 1, 5 .. 10 => 0);\n       Cr3 : constant One_Dim := (others => 7777);\n-  \n+\n \n The same is true for multidimensional constant arrays such as:\n \n .. code-block:: ada\n \n       type two_dim is array (1..3, 1..3) of integer;\n       Unit : constant two_dim := ( (1,0,0), (0,1,0), (0,0,1));\n-  \n+\n \n The same is true for arrays of one-dimensional arrays: the following are\n static:\n@@ -441,7 +442,7 @@ static:\n   type ar_ar is array (1..3) of ar1b;\n   None  : constant ar1b := (others => false);     --  fully static\n   None2 : constant ar_ar := (1..3 => None);       --  fully static\n-  \n+\n \n However, for multidimensional aggregates with named associations, GNAT will\n generate assignments and loops, even if all associations are static.  The\n@@ -453,7 +454,7 @@ individual component assignments for the second dimension:\n \n   Zero1: constant two_dim := (1..3 => (1..3 => 0));\n   Zero2: constant two_dim := (others => (others => 0));\n-  \n+\n \n .. _Constant_aggregates_with_unconstrained_nominal_types:\n \n@@ -470,7 +471,7 @@ aggregate statically as well.  No code is generated for the following:\n \n       type One_Unc is array (natural range <>) of integer;\n       Cr_Unc : constant One_Unc := (12,24,36);\n-  \n+\n \n .. _Aggregates_with_static_bounds:\n \n@@ -487,7 +488,7 @@ object.  The declarations\n \n          Cr_Var1 : One_Dim := (2, 5, 7, 11, 0, 0, 0, 0, 0, 0);\n          Cr_Var2 : One_Dim := (others > -1);\n-  \n+\n \n generate the equivalent of\n \n@@ -502,11 +503,11 @@ generate the equivalent of\n          for I in Cr_Var2'range loop\n             Cr_Var2 (I) := -1;\n          end loop;\n-  \n \n-.. _Aggregates_with_non-static_bounds:\n \n-Aggregates with non-static bounds\n+.. _Aggregates_with_nonstatic_bounds:\n+\n+Aggregates with nonstatic bounds\n ---------------------------------\n \n If the bounds of the aggregate are not statically compatible with the bounds\n@@ -529,7 +530,7 @@ component assignments.  For example, consider the simple case:\n .. code-block:: ada\n \n           A := (A(2), A(1));\n-  \n+\n \n This cannot be converted into:\n \n@@ -538,16 +539,16 @@ This cannot be converted into:\n \n           A(1) := A(2);\n           A(2) := A(1);\n-  \n+\n \n So the aggregate has to be built first in a separate location, and then\n copied into the target.  GNAT recognizes simple cases where this intermediate\n step is not required, and the assignments can be performed in place, directly\n into the target.  The following sufficient criteria are applied:\n \n-* \n+*\n   The bounds of the aggregate are static, and the associations are static.\n-* \n+*\n   The components of the aggregate are static constants, names of\n   simple variables that are not renamings, or expressions not involving\n   indexed components whose operands obey these rules.\n@@ -575,7 +576,7 @@ constraint:\n   end T;\n \n   Word : Rec;\n-  \n+\n \n Such an object is said to be *unconstrained*.\n The discriminant of the object\n@@ -648,17 +649,15 @@ Strict Conformance to the Ada Reference Manual\n The dynamic semantics defined by the Ada Reference Manual impose a set of\n run-time checks to be generated. By default, the GNAT compiler will insert many\n run-time checks into the compiled code, including most of those required by the\n-Ada Reference Manual. However, there are three checks that are not enabled\n-in the default mode for efficiency reasons: arithmetic overflow checking for\n-integer operations (including division by zero), checks for access before\n-elaboration on subprogram calls, and stack overflow checking (most operating\n-systems do not perform this check by default).\n-\n-Strict conformance to the Ada Reference Manual can be achieved by adding\n-three compiler options for overflow checking for integer operations\n-(*-gnato*), dynamic checks for access-before-elaboration on subprogram\n-calls and generic instantiations (*-gnatE*), and stack overflow\n-checking (*-fstack-check*).\n+Ada Reference Manual. However, there are two checks that are not enabled in\n+the default mode for efficiency reasons: checks for access before elaboration\n+on subprogram calls, and stack overflow checking (most operating systems do not\n+perform this check by default).\n+\n+Strict conformance to the Ada Reference Manual can be achieved by adding two\n+compiler options for dynamic checks for access-before-elaboration on subprogram\n+calls and generic instantiations (*-gnatE*), and stack overflow checking\n+(*-fstack-check*).\n \n Note that the result of a floating point arithmetic operation in overflow and\n invalid situations, when the `Machine_Overflows` attribute of the result\n@@ -668,4 +667,3 @@ machines that are not fully compliant with this standard, such as Alpha, the\n *-mieee* compiler flag must be used for achieving IEEE confirming\n behavior (although at the cost of a significant performance penalty), so\n infinite and NaN values are properly generated.\n-"}, {"sha": "ca2744327cf91a61596466dc28f417f92b19d29e", "filename": "gcc/ada/doc/gnat_rm/representation_clauses_and_pragmas.rst", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst?ref=abcb651bac5a4aeadca671b7ed76d396788cfa10", "patch": "@@ -1477,7 +1477,7 @@ as found in RM 13.1(22):\n    a constant declared before the entity.\"\n \n In practice this is applicable only to address clauses, since this is the\n-only case in which a non-static expression is permitted by the syntax.  As\n+only case in which a nonstatic expression is permitted by the syntax.  As\n the AARM notes in sections 13.1 (22.a-22.h):\n \n    22.a   Reason: This is to avoid the following sort of thing:\n@@ -1509,7 +1509,7 @@ the AARM notes in sections 13.1 (22.a-22.h):\n    might be known at compile time anyway in many\n    cases.\n \n-GNAT does indeed permit many additional cases of non-static expressions.  In\n+GNAT does indeed permit many additional cases of nonstatic expressions.  In\n particular, if the type involved is elementary there are no restrictions\n (since in this case, holding a temporary copy of the initialization value,\n if one is present, is inexpensive).  In addition, if there is no implicit or\n@@ -1524,7 +1524,7 @@ only the case where all three of these conditions hold:\n   Note that access values are always implicitly initialized.\n \n *\n-  The address value is non-static.  Here GNAT is more permissive than the\n+  The address value is nonstatic.  Here GNAT is more permissive than the\n   RM, and allows the address value to be the address of a previously declared\n   stand-alone variable, as long as it does not itself have an address clause.\n \n@@ -1537,9 +1537,9 @@ only the case where all three of these conditions hold:\n   However, the prefix of the address clause cannot be an array component, or\n   a component of a discriminated record.\n \n-As noted above in section 22.h, address values are typically non-static.  In\n+As noted above in section 22.h, address values are typically nonstatic.  In\n particular the To_Address function, even if applied to a literal value, is\n-a non-static function call.  To avoid this minor annoyance, GNAT provides\n+a nonstatic function call.  To avoid this minor annoyance, GNAT provides\n the implementation defined attribute 'To_Address.  The following two\n expressions have identical values:\n "}, {"sha": "c820cb7877db7cee32d0d4156a7c1db8b0321bab", "filename": "gcc/ada/doc/gnat_rm/standard_and_implementation_defined_restrictions.rst", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst?ref=abcb651bac5a4aeadca671b7ed76d396788cfa10", "patch": "@@ -459,6 +459,19 @@ intermediate temporary, and without generating a loop to initialize individual\n components. Otherwise, a loop is created for arrays larger than about 5000\n scalar components.\n \n+No_Implicit_Protected_Object_Allocations\n+----------------------------------------\n+.. index: No_Implicit_Protected_Object_Allocations\n+\n+[GNAT] No constructs are allowed to cause implicit heap allocation of a\n+protected object.\n+\n+No_Implicit_Task_Allocations\n+----------------------------\n+.. index: No_Implicit_Task_Allocations\n+\n+[GNAT] No constructs are allowed to cause implicit heap allocation of a task.\n+\n No_Initialize_Scalars\n ---------------------\n .. index:: No_Initialize_Scalars\n@@ -666,6 +679,15 @@ No_Task_Allocators\n [RM D.7] There are no allocators for task types\n or types containing task subcomponents.\n \n+No_Task_At_Interrupt_Priority\n+-----------------------------\n+.. index:: No_Task_At_Interrupt_Priority\n+\n+[GNAT] This restriction ensures at compile time that there is no\n+Interrupt_Priority aspect or pragma for a task or a task type. As\n+a consequence, the tasks are always created with a priority below\n+that an interrupt priority.\n+\n No_Task_Attributes_Package\n --------------------------\n .. index:: No_Task_Attributes_Package\n@@ -1003,7 +1025,7 @@ restriction is in force:\n * No object renaming\n * No use clause\n * Aggregates must be qualified\n-* Non-static choice in array aggregates not allowed\n+* Nonstatic choice in array aggregates not allowed\n * The only view conversions which are allowed as in-out parameters are conversions of a tagged type to an ancestor type\n * No mixing of positional and named association in aggregate, no multi choice\n * AND, OR and XOR for arrays only allowed when operands have same static bounds\n@@ -1024,7 +1046,7 @@ restriction is in force:\n * Untagged record cannot be null\n * No class-wide operations\n * Initialization expressions must respect SPARK restrictions\n-* Non-static ranges not allowed except in iteration schemes\n+* Nonstatic ranges not allowed except in iteration schemes\n * String subtypes must have lower bound of 1\n * Subtype of Boolean cannot have constraint\n * At most one tagged type or extension per package"}, {"sha": "9351465c5385b4030b6108c40c05eace7fe5e1e1", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 42, "deletions": 25, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=abcb651bac5a4aeadca671b7ed76d396788cfa10", "patch": "@@ -2953,7 +2953,7 @@ of the pragma in the :title:`GNAT_Reference_manual`).\n .. index:: -gnatw.e  (gcc)\n \n :samp:`-gnatw.e`\n-  *Activate every optional warning*\n+  *Activate every optional warning.*\n \n   .. index:: Warnings, activate every optional warning\n \n@@ -3016,7 +3016,7 @@ of the pragma in the :title:`GNAT_Reference_manual`).\n .. index:: -gnatw.g  (gcc)\n \n :samp:`-gnatw.g`\n-  *Warnings used for GNAT sources*\n+  *Warnings used for GNAT sources.*\n \n   This switch sets the warning categories that are used by the standard\n   GNAT style. Currently this is equivalent to\n@@ -3143,16 +3143,18 @@ of the pragma in the :title:`GNAT_Reference_manual`).\n   Second, the restriction does flag uses of package `ASCII`.\n \n \n+.. index:: -gnatwJ  (gcc)\n+\n :samp:`-gnatwJ`\n   *Suppress warnings on obsolescent features (Annex J).*\n-  .. index:: -gnatwJ  (gcc)\n \n   This switch disables warnings on use of obsolescent features.\n \n \n+.. index:: -gnatwk  (gcc)\n+\n :samp:`-gnatwk`\n   *Activate warnings on variables that could be constants.*\n-  .. index:: -gnatwk  (gcc)\n \n   This switch activates warnings for variables that are initialized but\n   never modified, and then could be declared constants. The default is that\n@@ -3724,7 +3726,7 @@ of the pragma in the :title:`GNAT_Reference_manual`).\n .. index:: Warnings Off control\n \n :samp:`-gnatw.w`\n-  *Activate warnings on Warnings Off pragmas*\n+  *Activate warnings on Warnings Off pragmas.*\n \n   This switch activates warnings for use of `pragma Warnings (Off, entity)`\n   where either the pragma is entirely useless (because it suppresses no\n@@ -3739,7 +3741,7 @@ of the pragma in the :title:`GNAT_Reference_manual`).\n .. index:: -gnatw.W  (gcc)\n \n :samp:`-gnatw.W`\n-  *Suppress warnings on unnecessary Warnings Off pragmas*\n+  *Suppress warnings on unnecessary Warnings Off pragmas.*\n \n   This switch suppresses warnings for use of `pragma Warnings (Off, ...)`.\n \n@@ -3820,7 +3822,7 @@ of the pragma in the :title:`GNAT_Reference_manual`).\n .. index:: Package spec needing body\n \n :samp:`-gnatw.y`\n-  *Activate information messages for why package spec needs body*\n+  *Activate information messages for why package spec needs body.*\n \n   There are a number of cases in which a package spec needs a body.\n   For example, the use of pragma Elaborate_Body, or the declaration\n@@ -3835,7 +3837,7 @@ of the pragma in the :title:`GNAT_Reference_manual`).\n .. index:: No information messages for why package spec needs body\n \n :samp:`-gnatw.Y`\n-  *Disable information messages for why package spec needs body*\n+  *Disable information messages for why package spec needs body.*\n \n   This switch suppresses the output of information messages showing why\n   a package specification needs a body.\n@@ -4188,7 +4190,7 @@ to the default checks required by Ada as described above.\n .. index:: -gnatVi  (gcc)\n \n :samp:`-gnatVi`\n-  *Validity checks for `in* mode parameters`\n+  *Validity checks for `in` mode parameters.*\n \n   Arguments for parameters of mode `in` are validity checked in function\n   and procedure calls at the point of call.\n@@ -4197,7 +4199,7 @@ to the default checks required by Ada as described above.\n .. index:: -gnatVm  (gcc)\n \n :samp:`-gnatVm`\n-  *Validity checks for `in out* mode parameters.`\n+  *Validity checks for `in out` mode parameters.*\n \n   Arguments for parameters of mode `in out` are validity checked in\n   procedure calls at the point of call. The `'m'` here stands for\n@@ -4220,9 +4222,10 @@ to the default checks required by Ada as described above.\n   is used, it cancels any other *-gnatV* previously issued.\n \n \n+.. index:: -gnatVo  (gcc)\n+\n :samp:`-gnatVo`\n   *Validity checks for operator and attribute operands.*\n-  .. index:: -gnatVo  (gcc)\n \n   Arguments for predefined operators and attributes are validity checked.\n   This includes all operators in package `Standard`,\n@@ -4796,7 +4799,7 @@ checks to be performed. The following checks are defined:\n .. index:: -gnatyy (gcc)\n \n :samp:`-gnatyy`\n-  *Set all standard style check options*\n+  *Set all standard style check options.*\n \n   This is equivalent to `gnaty3aAbcefhiklmnprst`, that is all checking\n   options enabled with the exception of *-gnatyB*, *-gnatyd*,\n@@ -4807,7 +4810,7 @@ checks to be performed. The following checks are defined:\n .. index:: -gnaty- (gcc)\n \n :samp:`-gnaty-`\n-  *Remove style check options*\n+  *Remove style check options.*\n \n   This causes any subsequent options in the string to act as canceling the\n   corresponding style check option. To cancel maximum nesting level control,\n@@ -4821,7 +4824,7 @@ checks to be performed. The following checks are defined:\n .. index:: -gnaty+ (gcc)\n \n :samp:`-gnaty+`\n-  *Enable style check options*\n+  *Enable style check options.*\n \n   This causes any subsequent options in the string to enable the corresponding\n   style check option. That is, it cancels the effect of a previous -,\n@@ -5145,7 +5148,7 @@ indicate Ada 83 compatibility mode.\n .. index:: ACVC, Ada 83 tests\n .. index:: Ada 83 mode\n \n-:samp:`-gnat83 (Ada 83 Compatibility Mode)`\n+:samp:`-gnat83` (Ada 83 Compatibility Mode)\n   Although GNAT is primarily an Ada 95 / Ada 2005 compiler, this switch\n   specifies that the program is to be compiled in Ada 83 mode. With\n   *-gnat83*, GNAT rejects most post-Ada 83 extensions and applies Ada 83\n@@ -5159,9 +5162,8 @@ indicate Ada 83 compatibility mode.\n   using only Ada 83 features.\n \n   With few exceptions (most notably the need to use `<>` on\n-  .. index:: Generic formal parameters\n-\n-  unconstrained generic formal parameters, the use of the new Ada 95 / Ada 2005\n+  unconstrained :index:`generic formal parameters <Generic formal parameters>`,\n+  the use of the new Ada 95 / Ada 2005\n   reserved words, and the use of packages\n   with optional bodies), it is not necessary to specify the\n   *-gnat83* switch when compiling Ada 83 programs, because, with rare\n@@ -6058,17 +6060,32 @@ be presented in subsequent sections.\n   Output complete list of elaboration-order dependencies.\n \n \n-.. index:: -E  (gnatbind)\n+.. index:: -Ea  (gnatbind)\n \n-:samp:`-E`\n+:samp:`-Ea`\n   Store tracebacks in exception occurrences when the target supports it.\n+  The \"a\" is for \"address\"; tracebacks will contain hexadecimal addresses,\n+  unless symbolic tracebacks are enabled.\n \n   See also the packages `GNAT.Traceback` and\n   `GNAT.Traceback.Symbolic` for more information.\n   Note that on x86 ports, you must not use *-fomit-frame-pointer*\n   *gcc* option.\n \n \n+.. index:: -Es  (gnatbind)\n+\n+:samp:`-Es`\n+  Store tracebacks in exception occurrences when the target supports it.\n+  The \"s\" is for \"symbolic\"; symbolic tracebacks are enabled.\n+\n+\n+.. index:: -E  (gnatbind)\n+\n+:samp:`-E`\n+  Currently the same as `-Ea`.\n+\n+\n .. index:: -F  (gnatbind)\n \n :samp:`-F`\n@@ -6084,7 +6101,7 @@ be presented in subsequent sections.\n .. index:: -h  (gnatbind)\n \n :samp:`-h`\n-  Output usage (help) information\n+  Output usage (help) information.\n \n \n   .. index:: -H32  (gnatbind)\n@@ -6194,7 +6211,7 @@ be presented in subsequent sections.\n   .. index:: -p  (gnatbind)\n \n :samp:`-p`\n-  Pessimistic (worst-case) elaboration order\n+  Pessimistic (worst-case) elaboration order.\n \n \n   .. index:: -P  (gnatbind)\n@@ -6229,7 +6246,7 @@ be presented in subsequent sections.\n   objects with pragma Initialize_Scalars.\n   The `xxx` string specified with the switch is one of:\n \n-  * ``in`` for an invalid value*.\n+  * ``in`` for an invalid value.\n \n     If zero is invalid for the discrete type in question,\n     then the scalar value is set to all zero bits.\n@@ -6289,7 +6306,7 @@ be presented in subsequent sections.\n   .. index:: -t  (gnatbind)\n \n :samp:`-t`\n-  Tolerate time stamp and other consistency errors\n+  Tolerate time stamp and other consistency errors.\n \n \n   .. index:: -T  (gnatbind)\n@@ -6336,7 +6353,7 @@ be presented in subsequent sections.\n   .. index:: -w  (gnatbind)\n \n :samp:`-w{x}`\n-  Warning mode; `x` = s/e for suppress/treat as error\n+  Warning mode; `x` = s/e for suppress/treat as error.\n \n \n   .. index:: -Wx  (gnatbind)"}, {"sha": "6f33d0b4ce34fe72e3f826d525e5978244ab5ae2", "filename": "gcc/ada/doc/gnat_ugn/gnat_and_program_execution.rst", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst?ref=abcb651bac5a4aeadca671b7ed76d396788cfa10", "patch": "@@ -1101,6 +1101,15 @@ information. Here is an example:\n       end STB;\n \n \n+.. rubric:: Automatic Symbolic Tracebacks\n+\n+Symbolic tracebacks may also be enabled by using the -Es switch to gnatbind (as\n+in `gprbuild -g ... -bargs -Es`).\n+This will cause the Exception_Information to contain a symbolic traceback,\n+which will also be printed if an unhandled exception terminates the\n+program.\n+\n+\n .. index:: Code Coverage\n .. index:: Profiling\n \n@@ -3211,8 +3220,11 @@ This retains compatibility with previous versions of\n GNAT which suppressed overflow checks by default and always\n used the base type for computation of intermediate results.\n \n-The switch *-gnato* (with no digits following) is equivalent to\n-.. index:: -gnato (gcc)\n+.. Sphinx allows no emphasis within :index: role. As a workaround we\n+   point the index to \"switch\" and use emphasis for \"-gnato\".\n+\n+The :index:`switch <-gnato (gcc)>` *-gnato* (with no digits following)\n+is equivalent to\n \n   ::\n \n@@ -4184,7 +4196,3 @@ execution of this erroneous program:\n \n   The allocation root #1 of the first example has been split in 2 roots #1\n   and #3, thanks to the more precise associated backtrace.\n-\n-\n-\n-"}, {"sha": "1fdb1f5406058b1310d9509377cedea29904aaef", "filename": "gcc/ada/doc/gnat_ugn/gnat_project_manager.rst", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_project_manager.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_project_manager.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_project_manager.rst?ref=abcb651bac5a4aeadca671b7ed76d396788cfa10", "patch": "@@ -3983,12 +3983,20 @@ Project Level Attributes\n     Value is the name of the target platform. Taken into account only in the main\n     project.\n \n+    Note that when the target is specified on the command line (usually with\n+    a switch --target=), the value of attribute reference 'Target is the one\n+    specified on the command line.\n+\n   * **Runtime**: single, indexed, case-insensitive index\n \n     Index is a language name. Indicates the runtime directory that is to be used\n     when using the compiler of the language. Taken into account only in the main\n     project.\n \n+    Note that when the runtime is specified for a language on the command line\n+    (usually with a switch --RTS), the value of attribute reference 'Runtime\n+    for this language is the one specified on the command line.\n+\n * **Configuration - Libraries**\n \n   * **Library_Builder**: single"}, {"sha": "c23005dd2901962551595484543c255ee6df0704", "filename": "gcc/ada/doc/share/ada_pygments.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fshare%2Fada_pygments.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fdoc%2Fshare%2Fada_pygments.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fshare%2Fada_pygments.py?ref=abcb651bac5a4aeadca671b7ed76d396788cfa10", "patch": "@@ -62,7 +62,7 @@ def get_lexer_tokens(tag_highlighting=False, project_support=False):\n              r'Version|Value_Size|Value|Valid_Scalars|VADS_Size|Valid|Val|'\n              r'Update|Unrestricted_Access|Universal_Literal_String|'\n              r'Unconstrained_Array|Unchecked_Access|Unbiased_Rounding|'\n-             r'UET_Address|Truncation|Type_Class|To_Address|Tick|Terminated|'\n+             r'Truncation|Type_Class|To_Address|Tick|Terminated|'\n              r'Target_Name|Tag|System_Allocator_Alignment|Succ|Stub_Type|'\n              r'Stream_Size|Storage_Unit|Storage_Size|Storage_Pool|Small|Size|'\n              r'Simple_Storage_Pool|Signed_Zeros|Scaling|Scale|'"}, {"sha": "d3eb6a90c578bc2ac663f816b744d20e3e808d56", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 918, "deletions": 790, "changes": 1708, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=abcb651bac5a4aeadca671b7ed76d396788cfa10"}, {"sha": "1f465ae6035f68fab8553eca993c379e7b42903c", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 89, "deletions": 28, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abcb651bac5a4aeadca671b7ed76d396788cfa10/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=abcb651bac5a4aeadca671b7ed76d396788cfa10", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT User's Guide for Native Platforms , October 20, 2015\n+GNAT User's Guide for Native Platforms , October 23, 2015\n \n AdaCore\n \n@@ -11028,7 +11028,7 @@ are not treated as errors if this switch is present.\n \n @item @code{-gnatw.e}\n \n-@emph{Activate every optional warning}\n+@emph{Activate every optional warning.}\n \n @geindex Warnings\n @geindex activate every optional warning\n@@ -11114,7 +11114,7 @@ This switch suppresses warnings for unrecognized pragmas.\n \n @item @code{-gnatw.g}\n \n-@emph{Warnings used for GNAT sources}\n+@emph{Warnings used for GNAT sources.}\n \n This switch sets the warning categories that are used by the standard\n GNAT style. Currently this is equivalent to\n@@ -11276,18 +11276,28 @@ Note that this warning option functions differently from the\n restriction @cite{No_Obsolescent_Features} in two respects.\n First, the restriction applies only to annex J features.\n Second, the restriction does flag uses of package @cite{ASCII}.\n+@end table\n+\n+@geindex -gnatwJ (gcc)\n+\n+\n+@table @asis\n \n @item @code{-gnatwJ}\n \n @emph{Suppress warnings on obsolescent features (Annex J).}\n-.. index:: -gnatwJ  (gcc)\n \n This switch disables warnings on use of obsolescent features.\n+@end table\n+\n+@geindex -gnatwk (gcc)\n+\n+\n+@table @asis\n \n @item @code{-gnatwk}\n \n @emph{Activate warnings on variables that could be constants.}\n-.. index:: -gnatwk  (gcc)\n \n This switch activates warnings for variables that are initialized but\n never modified, and then could be declared constants. The default is that\n@@ -12076,7 +12086,7 @@ procedure K (S : String) is\n \n @item @code{-gnatw.w}\n \n-@emph{Activate warnings on Warnings Off pragmas}\n+@emph{Activate warnings on Warnings Off pragmas.}\n \n This switch activates warnings for use of @cite{pragma Warnings (Off@comma{} entity)}\n where either the pragma is entirely useless (because it suppresses no\n@@ -12095,7 +12105,7 @@ The default is that these warnings are not given.\n \n @item @code{-gnatw.W}\n \n-@emph{Suppress warnings on unnecessary Warnings Off pragmas}\n+@emph{Suppress warnings on unnecessary Warnings Off pragmas.}\n \n This switch suppresses warnings for use of @cite{pragma Warnings (Off@comma{} ...)}.\n @end table\n@@ -12204,7 +12214,7 @@ incompatibilities between Ada language versions.\n \n @item @code{-gnatw.y}\n \n-@emph{Activate information messages for why package spec needs body}\n+@emph{Activate information messages for why package spec needs body.}\n \n There are a number of cases in which a package spec needs a body.\n For example, the use of pragma Elaborate_Body, or the declaration\n@@ -12224,7 +12234,7 @@ body. The default is that such information messages are not output.\n \n @item @code{-gnatw.Y}\n \n-@emph{Disable information messages for why package spec needs body}\n+@emph{Disable information messages for why package spec needs body.}\n \n This switch suppresses the output of information messages showing why\n a package specification needs a body.\n@@ -12692,7 +12702,7 @@ options. For example, @emph{-gnatVif} or @emph{-gnatVfi}\n \n @item @code{-gnatVi}\n \n-@emph{Validity checks for `in} mode parameters`\n+@emph{Validity checks for `in` mode parameters.}\n \n Arguments for parameters of mode @cite{in} are validity checked in function\n and procedure calls at the point of call.\n@@ -12705,7 +12715,7 @@ and procedure calls at the point of call.\n \n @item @code{-gnatVm}\n \n-@emph{Validity checks for `in out} mode parameters.`\n+@emph{Validity checks for `in out` mode parameters.}\n \n Arguments for parameters of mode @cite{in out} are validity checked in\n procedure calls at the point of call. The @cite{'m'} here stands for\n@@ -12730,11 +12740,16 @@ for case statements and left hand side subscripts. Note that the use of\n the switch @emph{-gnatp} suppresses all run-time checks, including\n validity checks, and thus implies @emph{-gnatVn}. When this switch\n is used, it cancels any other @emph{-gnatV} previously issued.\n+@end table\n+\n+@geindex -gnatVo (gcc)\n+\n+\n+@table @asis\n \n @item @code{-gnatVo}\n \n @emph{Validity checks for operator and attribute operands.}\n-.. index:: -gnatVo  (gcc)\n \n Arguments for predefined operators and attributes are validity checked.\n This includes all operators in package @cite{Standard},\n@@ -13469,7 +13484,7 @@ around conditions in @cite{if} statements, @cite{while} statements and\n \n @item @code{-gnatyy}\n \n-@emph{Set all standard style check options}\n+@emph{Set all standard style check options.}\n \n This is equivalent to @cite{gnaty3aAbcefhiklmnprst}, that is all checking\n options enabled with the exception of @emph{-gnatyB}, @emph{-gnatyd},\n@@ -13484,7 +13499,7 @@ options enabled with the exception of @emph{-gnatyB}, @emph{-gnatyd},\n \n @item @code{-gnaty-}\n \n-@emph{Remove style check options}\n+@emph{Remove style check options.}\n \n This causes any subsequent options in the string to act as canceling the\n corresponding style check option. To cancel maximum nesting level control,\n@@ -13502,7 +13517,7 @@ allowed after @emph{-}.\n \n @item @code{-gnaty+}\n \n-@emph{Enable style check options}\n+@emph{Enable style check options.}\n \n This causes any subsequent options in the string to enable the corresponding\n style check option. That is, it cancels the effect of a previous -,\n@@ -13888,7 +13903,7 @@ indicate Ada 83 compatibility mode.\n \n @table @asis\n \n-@item @code{-gnat83 (Ada 83 Compatibility Mode)}\n+@item @code{-gnat83} (Ada 83 Compatibility Mode)\n \n Although GNAT is primarily an Ada 95 / Ada 2005 compiler, this switch\n specifies that the program is to be compiled in Ada 83 mode. With\n@@ -13903,9 +13918,10 @@ where, due to contractual reasons, existing code needs to be maintained\n using only Ada 83 features.\n \n With few exceptions (most notably the need to use @cite{<>} on\n-.. index:: Generic formal parameters\n-\n-unconstrained generic formal parameters, the use of the new Ada 95 / Ada 2005\n+unconstrained \n+@geindex Generic formal parameters\n+generic formal parameters,\n+the use of the new Ada 95 / Ada 2005\n reserved words, and the use of packages\n with optional bodies), it is not necessary to specify the\n @emph{-gnat83} switch when compiling Ada 83 programs, because, with rare\n@@ -15133,21 +15149,44 @@ size of the environment task's secondary stack.\n Output complete list of elaboration-order dependencies.\n @end table\n \n-@geindex -E (gnatbind)\n+@geindex -Ea (gnatbind)\n \n \n @table @asis\n \n-@item @code{-E}\n+@item @code{-Ea}\n \n Store tracebacks in exception occurrences when the target supports it.\n+The \"a\" is for \"address\"; tracebacks will contain hexadecimal addresses,\n+unless symbolic tracebacks are enabled.\n \n See also the packages @cite{GNAT.Traceback} and\n @cite{GNAT.Traceback.Symbolic} for more information.\n Note that on x86 ports, you must not use @emph{-fomit-frame-pointer}\n @emph{gcc} option.\n @end table\n \n+@geindex -Es (gnatbind)\n+\n+\n+@table @asis\n+\n+@item @code{-Es}\n+\n+Store tracebacks in exception occurrences when the target supports it.\n+The \"s\" is for \"symbolic\"; symbolic tracebacks are enabled.\n+@end table\n+\n+@geindex -E (gnatbind)\n+\n+\n+@table @asis\n+\n+@item @code{-E}\n+\n+Currently the same as @cite{-Ea}.\n+@end table\n+\n @geindex -F (gnatbind)\n \n \n@@ -15171,7 +15210,7 @@ flag checks are generated.\n \n @item @code{-h}\n \n-Output usage (help) information\n+Output usage (help) information.\n \n @geindex -H32 (gnatbind)\n \n@@ -15280,7 +15319,7 @@ Output object list (to standard output or to the named file).\n \n @item @code{-p}\n \n-Pessimistic (worst-case) elaboration order\n+Pessimistic (worst-case) elaboration order.\n \n @geindex -P (gnatbind)\n \n@@ -15319,7 +15358,7 @@ The @cite{xxx} string specified with the switch is one of:\n @itemize *\n \n @item \n-@code{in} for an invalid value*.\n+@code{in} for an invalid value.\n \n If zero is invalid for the discrete type in question,\n then the scalar value is set to all zero bits.\n@@ -15388,7 +15427,7 @@ Link against a shared GNAT run time when available.\n \n @item @code{-t}\n \n-Tolerate time stamp and other consistency errors\n+Tolerate time stamp and other consistency errors.\n \n @geindex -T (gnatbind)\n \n@@ -15435,7 +15474,7 @@ Values stored this way can be retrieved at run time using\n \n @item @code{-w@emph{x}}\n \n-Warning mode; @cite{x} = s/e for suppress/treat as error\n+Warning mode; @cite{x} = s/e for suppress/treat as error.\n \n @geindex -Wx (gnatbind)\n \n@@ -21187,12 +21226,20 @@ case-insensitive values are \"false\" and \"true\" (the default).\n Value is the name of the target platform. Taken into account only in the main\n project.\n \n+Note that when the target is specified on the command line (usually with\n+a switch --target=), the value of attribute reference 'Target is the one\n+specified on the command line.\n+\n @item \n @strong{Runtime}: single, indexed, case-insensitive index\n \n Index is a language name. Indicates the runtime directory that is to be used\n when using the compiler of the language. Taken into account only in the main\n project.\n+\n+Note that when the runtime is specified for a language on the command line\n+(usually with a switch --RTS), the value of attribute reference 'Runtime\n+for this language is the one specified on the command line.\n @end itemize\n \n @item \n@@ -26331,6 +26378,15 @@ end STB;\n @end example\n @end quotation\n \n+@subsubheading Automatic Symbolic Tracebacks\n+\n+\n+Symbolic tracebacks may also be enabled by using the -Es switch to gnatbind (as\n+in @cite{gprbuild -g ... -bargs -Es}).\n+This will cause the Exception_Information to contain a symbolic traceback,\n+which will also be printed if an unhandled exception terminates the\n+program.\n+\n @geindex Code Coverage\n \n @geindex Profiling\n@@ -28474,8 +28530,13 @@ This retains compatibility with previous versions of\n GNAT which suppressed overflow checks by default and always\n used the base type for computation of intermediate results.\n \n-The switch @emph{-gnato} (with no digits following) is equivalent to\n-.. index:: -gnato (gcc)\n+@c Sphinx allows no emphasis within :index: role. As a workaround we\n+@c point the index to \"switch\" and use emphasis for \"-gnato\".\n+\n+The \n+@geindex -gnato (gcc)\n+switch @emph{-gnato} (with no digits following)\n+is equivalent to\n \n @quotation\n "}]}