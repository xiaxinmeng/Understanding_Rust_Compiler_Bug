{"sha": "4fd18c782de4833736d9b3604a3b031f74429f5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZkMThjNzgyZGU0ODMzNzM2ZDliMzYwNGEzYjAzMWY3NDQyOWY1Yw==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2017-05-11T14:13:31Z"}, "committer": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2017-05-11T14:13:31Z"}, "message": "cmpb-1.c: New test.\n\ngcc/testsuite/ChangeLog:\n\n2017-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* gcc.target/powerpc/cmpb-1.c: New test.\n\t* gcc.target/powerpc/cmpb-2.c: New test.\n\t* gcc.target/powerpc/cmpb-3.c: New test.\n\t* gcc.target/powerpc/cmpb32-1.c: New test.\n\t* gcc.target/powerpc/cmpb32-2.c: New test.\n\ngcc/ChangeLog:\n\n2017-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add\n\tarray entries to represent two legal parameterizations of the\n\toverloaded __builtin_cmpb function, as represented by the\n\tP6_OV_BUILTIN_CMPB constant.\n\t(altivec_resolve_overloaded_builtin): Add special case handling\n\tfor the __builtin_cmpb function, as represented by the\n\tP6_OV_BUILTIN_CMPB constant.\n\t* config/rs6000/rs6000-builtin.def (BU_P6_2): New macro.\n\t(BU_P6_64BIT_2): New macro.\n\t(BU_P6_OVERLOAD_2): New macro\n\t(CMPB_32): Add 32-bit compare-bytes support for 32-bit only targets.\n\t(CMPB): Add 64-bit compare-bytes support for 32-bit and 64-bit targets.\n\t(CMPB): Add overload support to represent both 32-bit and 64-bit\n\tcompare-bytes function.\n\t* config/rs6000/rs6000.c (rs6000_builtin_mask_calculate): Add\n\tsupport for TARGET_CMPB.\n\t* config/rs6000/rs6000.h: Add support for RS6000_BTM_CMPB.\n\t* doc/extend.texi (PowerPC AltiVec Built-in Functions): Add\n\tdocumentation of the __builtin_cmpb overloaded built-in function.\n\nFrom-SVN: r247907", "tree": {"sha": "650ce85d5076fced2e6e671c2ff13a4c72a6ea00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/650ce85d5076fced2e6e671c2ff13a4c72a6ea00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fd18c782de4833736d9b3604a3b031f74429f5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fd18c782de4833736d9b3604a3b031f74429f5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fd18c782de4833736d9b3604a3b031f74429f5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fd18c782de4833736d9b3604a3b031f74429f5c/comments", "author": null, "committer": null, "parents": [{"sha": "43b883a99006138770d42067d385347fbae21334", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b883a99006138770d42067d385347fbae21334", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43b883a99006138770d42067d385347fbae21334"}], "stats": {"total": 309, "additions": 298, "deletions": 11}, "files": [{"sha": "447f72f95ec839061d09363a6bd63ae616e6e33c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd18c782de4833736d9b3604a3b031f74429f5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd18c782de4833736d9b3604a3b031f74429f5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4fd18c782de4833736d9b3604a3b031f74429f5c", "patch": "@@ -1,3 +1,25 @@\n+2017-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add\n+\tarray entries to represent two legal parameterizations of the\n+\toverloaded __builtin_cmpb function, as represented by the\n+\tP6_OV_BUILTIN_CMPB constant.\n+\t(altivec_resolve_overloaded_builtin): Add special case handling\n+\tfor the __builtin_cmpb function, as represented by the\n+\tP6_OV_BUILTIN_CMPB constant.\n+\t* config/rs6000/rs6000-builtin.def (BU_P6_2): New macro.\n+\t(BU_P6_64BIT_2): New macro.\n+\t(BU_P6_OVERLOAD_2): New macro\n+\t(CMPB_32): Add 32-bit compare-bytes support for 32-bit only targets.\n+\t(CMPB): Add 64-bit compare-bytes support for 32-bit and 64-bit targets.\n+\t(CMPB): Add overload support to represent both 32-bit and 64-bit\n+\tcompare-bytes function.\n+\t* config/rs6000/rs6000.c (rs6000_builtin_mask_calculate): Add\n+\tsupport for TARGET_CMPB.\n+\t* config/rs6000/rs6000.h: Add support for RS6000_BTM_CMPB.\n+\t* doc/extend.texi (PowerPC AltiVec Built-in Functions): Add\n+\tdocumentation of the __builtin_cmpb overloaded built-in function.\n+\n 2017-05-11  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/80705"}, {"sha": "e5ab9d3255cf4e390dbc3242787bf23897c41bdf", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd18c782de4833736d9b3604a3b031f74429f5c/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd18c782de4833736d9b3604a3b031f74429f5c/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=4fd18c782de4833736d9b3604a3b031f74429f5c", "patch": "@@ -339,6 +339,34 @@\n \t\t     | RS6000_BTC_SPECIAL),\t\t\t\t\\\n \t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n \n+/* ISA 2.05 (power6) convenience macros. */\n+/* For functions that depend on the CMPB instruction */\n+#define BU_P6_2(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n+  RS6000_BUILTIN_2 (P6_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_p6_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_CMPB,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n+/* For functions that depend on 64-BIT support and on the CMPB instruction */\n+#define BU_P6_64BIT_2(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n+  RS6000_BUILTIN_2 (P6_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_p6_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_CMPB\t\t\t   \t\t\\\n+\t\t      | RS6000_BTM_64BIT,\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n+#define BU_P6_OVERLOAD_2(ENUM, NAME)\t\t\t\t\t\\\n+  RS6000_BUILTIN_2 (P6_OV_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_CMPB,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_OVERLOADED\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n+\t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n+\n /* ISA 2.07 (power8) vector convenience macros.  */\n /* For the instructions that are encoded as altivec instructions use\n    __builtin_altivec_ as the builtin name.  */\n@@ -1787,6 +1815,10 @@ BU_VSX_OVERLOAD_X (ST,\t     \"st\")\n BU_VSX_OVERLOAD_X (XL,\t     \"xl\")\n BU_VSX_OVERLOAD_X (XST,\t     \"xst\")\n \f\n+/* 2 argument CMPB instructions added in ISA 2.05. */\n+BU_P6_2 (CMPB_32,        \"cmpb_32\",\tCONST,\tcmpbsi3)\n+BU_P6_64BIT_2 (CMPB,     \"cmpb\",\tCONST,\tcmpbdi3)\n+\n /* 1 argument VSX instructions added in ISA 2.07.  */\n BU_P8V_VSX_1 (XSCVSPDPN,      \"xscvspdpn\",\tCONST,\tvsx_xscvspdpn)\n BU_P8V_VSX_1 (XSCVDPSPN,      \"xscvdpspn\",\tCONST,\tvsx_xscvdpspn)\n@@ -1873,6 +1905,9 @@ BU_P8V_AV_P (VCMPEQUD_P,\t\"vcmpequd_p\",\tCONST,\tvector_eq_v2di_p)\n BU_P8V_AV_P (VCMPGTSD_P,\t\"vcmpgtsd_p\",\tCONST,\tvector_gt_v2di_p)\n BU_P8V_AV_P (VCMPGTUD_P,\t\"vcmpgtud_p\",\tCONST,\tvector_gtu_v2di_p)\n \n+/* ISA 2.05 overloaded 2 argument functions.  */\n+BU_P6_OVERLOAD_2 (CMPB, \"cmpb\")\n+\n /* ISA 2.07 vector overloaded 1 argument functions.  */\n BU_P8V_OVERLOAD_1 (VUPKHSW,\t\"vupkhsw\")\n BU_P8V_OVERLOAD_1 (VUPKLSW,\t\"vupklsw\")"}, {"sha": "ccf9cac1db8ba5dc13b4e96c976bf461b5f30f16", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 67, "deletions": 11, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd18c782de4833736d9b3604a3b031f74429f5c/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd18c782de4833736d9b3604a3b031f74429f5c/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=4fd18c782de4833736d9b3604a3b031f74429f5c", "patch": "@@ -5362,6 +5362,11 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI,\n     RS6000_BTI_unsigned_V1TI, 0 },\n \n+  { P6_OV_BUILTIN_CMPB, P6_BUILTIN_CMPB_32,\n+    RS6000_BTI_UINTSI, RS6000_BTI_UINTSI, RS6000_BTI_UINTSI, 0 },\n+  { P6_OV_BUILTIN_CMPB, P6_BUILTIN_CMPB,\n+    RS6000_BTI_UINTDI, RS6000_BTI_UINTDI, RS6000_BTI_UINTDI, 0 },\n+\n   { P8V_BUILTIN_VEC_VUPKHSW, P8V_BUILTIN_VUPKHSW,\n     RS6000_BTI_V2DI, RS6000_BTI_V4SI, 0, 0 },\n   { P8V_BUILTIN_VEC_VUPKHSW, P8V_BUILTIN_VUPKHSW,\n@@ -6424,25 +6429,76 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n     for (desc = altivec_overloaded_builtins;\n \t desc->code && desc->code != fcode; desc++)\n       continue;\n-    \n-    /* For arguments after the last, we have RS6000_BTI_NOT_OPAQUE in\n-       the opX fields.  */\n-    for (; desc->code == fcode; desc++)\n+\n+    /* Need to special case __builtin_cmp because the overloaded forms\n+       of this function take (unsigned int, unsigned int) or (unsigned\n+       long long int, unsigned long long int).  Since C conventions\n+       allow the respective argument types to be implicitly coerced into\n+       each other, the default handling does not provide adequate\n+       discrimination between the desired forms of the function.  */\n+    if (fcode == P6_OV_BUILTIN_CMPB)\n       {\n-\tif ((desc->op1 == RS6000_BTI_NOT_OPAQUE\n-\t     || rs6000_builtin_type_compatible (types[0], desc->op1))\n-\t    && (desc->op2 == RS6000_BTI_NOT_OPAQUE\n-\t\t|| rs6000_builtin_type_compatible (types[1], desc->op2))\n-\t    && (desc->op3 == RS6000_BTI_NOT_OPAQUE\n-\t\t|| rs6000_builtin_type_compatible (types[2], desc->op3)))\n+\tint overloaded_code;\n+\tint arg1_mode = TYPE_MODE (types[0]);\n+\tint arg2_mode = TYPE_MODE (types[1]);\n+\n+\tif (nargs != 2)\n+\t  {\n+\t    error (\"__builtin_cmpb only accepts 2 arguments\");\n+\t    return error_mark_node;\n+\t  }\n+\n+\t/* If any supplied arguments are wider than 32 bits, resolve to\n+\t   64-bit variant of built-in function.  */\n+\tif ((GET_MODE_PRECISION (arg1_mode) > 32)\n+\t    || (GET_MODE_PRECISION (arg2_mode) > 32))\n+\t  {\n+\t    /* Assure all argument and result types are compatible with\n+\t       the built-in function represented by P6_BUILTIN_CMPB.  */\n+\t    overloaded_code = P6_BUILTIN_CMPB;\n+\t  }\n+\telse\n+\t  {\n+\t    /* Assure all argument and result types are compatible with\n+\t       the built-in function represented by P6_BUILTIN_CMPB_32.  */\n+\t    overloaded_code = P6_BUILTIN_CMPB_32;\n+\t  }\n+\n+\twhile (desc->code && desc->code == fcode &&\n+\t       desc->overloaded_code != overloaded_code)\n+\t  desc++;\n+\n+\tif (desc->code && (desc->code == fcode)\n+\t    && rs6000_builtin_type_compatible (types[0], desc->op1)\n+\t    && rs6000_builtin_type_compatible (types[1], desc->op2))\n \t  {\n \t    if (rs6000_builtin_decls[desc->overloaded_code] != NULL_TREE)\n \t      return altivec_build_resolved_builtin (args, n, desc);\n \t    else\n \t      unsupported_builtin = true;\n \t  }\n       }\n-    \n+    else\n+      {\n+\t/* For arguments after the last, we have RS6000_BTI_NOT_OPAQUE in\n+\t   the opX fields.  */\n+\tfor (; desc->code == fcode; desc++)\n+\t  {\n+\t    if ((desc->op1 == RS6000_BTI_NOT_OPAQUE\n+\t\t || rs6000_builtin_type_compatible (types[0], desc->op1))\n+\t\t&& (desc->op2 == RS6000_BTI_NOT_OPAQUE\n+\t\t    || rs6000_builtin_type_compatible (types[1], desc->op2))\n+\t\t&& (desc->op3 == RS6000_BTI_NOT_OPAQUE\n+\t\t    || rs6000_builtin_type_compatible (types[2], desc->op3)))\n+\t      {\n+\t\tif (rs6000_builtin_decls[desc->overloaded_code] != NULL_TREE)\n+\t\t  return altivec_build_resolved_builtin (args, n, desc);\n+\t\telse\n+\t\t  unsupported_builtin = true;\n+\t      }\n+\t  }\n+      }\n+\n     if (unsupported_builtin)\n       {\n \tconst char *name = rs6000_overloaded_builtin_name (fcode);"}, {"sha": "d55e552f492b41610c6365c01d11c9d45cfbf3d9", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd18c782de4833736d9b3604a3b031f74429f5c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd18c782de4833736d9b3604a3b031f74429f5c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4fd18c782de4833736d9b3604a3b031f74429f5c", "patch": "@@ -3873,6 +3873,7 @@ HOST_WIDE_INT\n rs6000_builtin_mask_calculate (void)\n {\n   return (((TARGET_ALTIVEC)\t\t    ? RS6000_BTM_ALTIVEC   : 0)\n+\t  | ((TARGET_CMPB)\t\t    ? RS6000_BTM_CMPB\t   : 0)\n \t  | ((TARGET_VSX)\t\t    ? RS6000_BTM_VSX\t   : 0)\n \t  | ((TARGET_SPE)\t\t    ? RS6000_BTM_SPE\t   : 0)\n \t  | ((TARGET_PAIRED_FLOAT)\t    ? RS6000_BTM_PAIRED\t   : 0)"}, {"sha": "c4e98dd2f133cab1624db64a77a10515ee0bc322", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd18c782de4833736d9b3604a3b031f74429f5c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd18c782de4833736d9b3604a3b031f74429f5c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=4fd18c782de4833736d9b3604a3b031f74429f5c", "patch": "@@ -2717,6 +2717,7 @@ extern int frame_pointer_needed;\n    aren't in target_flags.  */\n #define RS6000_BTM_ALWAYS\t0\t\t/* Always enabled.  */\n #define RS6000_BTM_ALTIVEC\tMASK_ALTIVEC\t/* VMX/altivec vectors.  */\n+#define RS6000_BTM_CMPB\t\tMASK_CMPB\t/* ISA 2.05: compare bytes.  */\n #define RS6000_BTM_VSX\t\tMASK_VSX\t/* VSX (vector/scalar).  */\n #define RS6000_BTM_P8_VECTOR\tMASK_P8_VECTOR\t/* ISA 2.07 vector.  */\n #define RS6000_BTM_P9_VECTOR\tMASK_P9_VECTOR\t/* ISA 3.0 vector.  */"}, {"sha": "a16396155efa9e3def1ac5e42ffca4744585ffa0", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd18c782de4833736d9b3604a3b031f74429f5c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd18c782de4833736d9b3604a3b031f74429f5c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=4fd18c782de4833736d9b3604a3b031f74429f5c", "patch": "@@ -15106,6 +15106,24 @@ Similar to @code{__builtin_nans}, except the return type is @code{__float128}.\n @findex __builtin_nansq\n @end table\n \n+The following built-in functions are available for the PowerPC family\n+of processors, starting with ISA 2.05 or later (@option{-mcpu=power6}\n+or @option{-mcmpb}):\n+@smallexample\n+unsigned long long __builtin_cmpb (unsigned long long int, unsigned long long int);\n+unsigned int __builtin_cmpb (unsigned int, unsigned int);\n+@end smallexample\n+\n+The @code{__builtin_cmpb} function\n+performs a byte-wise compare on the contents of its two arguments,\n+returning the result of the byte-wise comparison as the returned\n+value.  For each byte comparison, the corresponding byte of the return\n+value holds 0xff if the input bytes are equal and 0 if the input bytes\n+are not equal.  If either of the arguments to this built-in function\n+is wider than 32 bits, the function call expands into the form that\n+expects @code{unsigned long long int} arguments\n+which is only available on 64-bit targets.\n+\n The following built-in functions are available for the PowerPC family\n of processors, starting with ISA 2.06 or later (@option{-mcpu=power7}\n or @option{-mpopcntd}):"}, {"sha": "411996f279456b0c6a88b138d1250fe379ca47be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd18c782de4833736d9b3604a3b031f74429f5c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd18c782de4833736d9b3604a3b031f74429f5c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4fd18c782de4833736d9b3604a3b031f74429f5c", "patch": "@@ -1,3 +1,11 @@\n+2017-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/cmpb-1.c: New test.\n+\t* gcc.target/powerpc/cmpb-2.c: New test.\n+\t* gcc.target/powerpc/cmpb-3.c: New test.\n+\t* gcc.target/powerpc/cmpb32-1.c: New test.\n+\t* gcc.target/powerpc/cmpb32-2.c: New test.\n+\n 2017-05-11  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/80705"}, {"sha": "1f04a76e7e3190a3f37c7c3b0f9321476f55cf25", "filename": "gcc/testsuite/gcc.target/powerpc/cmpb-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd18c782de4833736d9b3604a3b031f74429f5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcmpb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd18c782de4833736d9b3604a3b031f74429f5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcmpb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcmpb-1.c?ref=4fd18c782de4833736d9b3604a3b031f74429f5c", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power6\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target dfp_hw } */\n+/* { dg-options \"-mcpu=power6\" } */\n+\n+void abort ();\n+\n+unsigned long long int\n+do_compare (unsigned long long int a, unsigned long long int b)\n+{\n+  return __builtin_cmpb (a, b);\n+}\n+\n+void\n+expect (unsigned long long int pattern, unsigned long long int value)\n+{\n+  if (pattern != value)\n+    abort ();\n+}\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  expect (0xff00000000000000LL,\n+\t  do_compare (0x0123456789abcdefLL, 0x0100000000000000LL));\n+  expect (0x00ffffffffffffff,\n+\t  do_compare (0x0123456789abcdefLL, 0x0023456789abcdefLL));\n+  expect (0x00000000000000ff,\n+\t  do_compare (0x00000000000000efLL, 0x0123456789abcdefLL));\n+}"}, {"sha": "4dde1742cab7482f01b78d1491cb8b63e3890573", "filename": "gcc/testsuite/gcc.target/powerpc/cmpb-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd18c782de4833736d9b3604a3b031f74429f5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcmpb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd18c782de4833736d9b3604a3b031f74429f5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcmpb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcmpb-2.c?ref=4fd18c782de4833736d9b3604a3b031f74429f5c", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power5\" } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target powerpc_popcntb_ok } */\n+/* { dg-options \"-mcpu=power5\" } */\n+\n+void abort ();\n+\n+unsigned long long int\n+do_compare (unsigned long long int a, unsigned long long int b)\n+{\n+  return __builtin_cmpb (a, b);\t/* { dg-warning \"implicit declaration of function '__builtin_cmpb'\" } */\n+}\n+\n+void\n+expect (unsigned long long int pattern, unsigned long long int value)\n+{\n+  if (pattern != value)\n+    abort ();\n+}\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  expect (0xff00000000000000LL,\n+\t  do_compare (0x0123456789abcdefLL, 0x0100000000000000LL));\n+  expect (0x00ffffffffffffff,\n+\t  do_compare (0x0123456789abcdefLL, 0x0023456789abcdefLL));\n+  expect (0x00000000000000ff,\n+\t  do_compare (0x00000000000000efLL, 0x0123456789abcdefLL));\n+}"}, {"sha": "edb62f19b83688a2dc965ed2159cfcda9480be7e", "filename": "gcc/testsuite/gcc.target/powerpc/cmpb-3.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd18c782de4833736d9b3604a3b031f74429f5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcmpb-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd18c782de4833736d9b3604a3b031f74429f5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcmpb-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcmpb-3.c?ref=4fd18c782de4833736d9b3604a3b031f74429f5c", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power6\" } } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-require-effective-target powerpc_popcntb_ok } */\n+/* { dg-options \"-mcpu=power6\" } */\n+\n+void abort ();\n+\n+long long int\n+do_compare (long long int a, long long int b)\n+{\n+  return __builtin_cmpb (a, b);\t/* { dg-error \"Builtin function __builtin_cmpb not supported in this compiler configuration\" } */\n+}\n+\n+void expect (long long int pattern, long long int value)\n+{\n+  if (pattern != value)\n+    abort ();\n+}\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  expect (0xff00000000000000LL,\n+\t  do_compare (0x0123456789abcdefLL, 0x0100000000000000LL));\n+  expect (0x00ffffffffffffff,\n+\t  do_compare (0x0123456789abcdefLL, 0x0023456789abcdefLL));\n+  expect (0x00000000000000ff,\n+\t  do_compare (0x00000000000000efLL, 0x0123456789abcdefLL));\n+}"}, {"sha": "6338ccf0cb34aeb6e877f7261df70aacf7695bf3", "filename": "gcc/testsuite/gcc.target/powerpc/cmpb32-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd18c782de4833736d9b3604a3b031f74429f5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcmpb32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd18c782de4833736d9b3604a3b031f74429f5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcmpb32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcmpb32-1.c?ref=4fd18c782de4833736d9b3604a3b031f74429f5c", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power6\" } } */\n+/* { dg-require-effective-target dfp_hw } */\n+/* { dg-options \"-mcpu=power6\" } */\n+\n+void abort ();\n+\n+unsigned int\n+do_compare (unsigned int a, unsigned int b)\n+{\n+  return __builtin_cmpb (a, b);\n+}\n+\n+void\n+expect (unsigned int pattern, unsigned int value)\n+{\n+  if (pattern != value)\n+    abort ();\n+}\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  expect (0xff000000, do_compare (0x12345678, 0x12000000));\n+  expect (0x00ffffff, do_compare (0x12345678, 0x00345678));\n+  expect (0x000000ff, do_compare (0x00000078, 0x12345678));\n+}"}, {"sha": "30403a1482f2e36dde96b7e5fec512302ce672a8", "filename": "gcc/testsuite/gcc.target/powerpc/cmpb32-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd18c782de4833736d9b3604a3b031f74429f5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcmpb32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd18c782de4833736d9b3604a3b031f74429f5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcmpb32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcmpb32-2.c?ref=4fd18c782de4833736d9b3604a3b031f74429f5c", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power5\" } } */\n+/* { dg-require-effective-target powerpc_popcntb_ok } */\n+/* { dg-options \"-mcpu=power5\" } */\n+\n+void abort ();\n+\n+unsigned int\n+do_compare (unsigned int a, unsigned int b)\n+{\n+  return __builtin_cmpb (a, b);  /* { dg-warning \"implicit declaration of function '__builtin_cmpb'\" } */\n+}\n+\n+void\n+expect (unsigned int pattern, unsigned int value)\n+{\n+  if (pattern != value)\n+    abort ();\n+}\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  expect (0xff000000, do_compare (0x12345678, 0x12000000));\n+  expect (0x00ffffff, do_compare (0x12345678, 0x00345678));\n+  expect (0x000000ff, do_compare (0x00000078, 0x12345678));\n+}"}]}