{"sha": "6b9ef867ec3230abcfb67cbe93f3e7dd5ecfbf47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI5ZWY4NjdlYzMyMzBhYmNmYjY3Y2JlOTNmM2U3ZGQ1ZWNmYmY0Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-12-11T17:47:56Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-12-11T17:47:56Z"}, "message": "decl.c (grokvardecl): Add location_t parameter and use it in build_lang_decl_loc and build_decl calls.\n\n/cp\n2018-12-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (grokvardecl): Add location_t parameter and use it\n\tin build_lang_decl_loc and build_decl calls.\n\t(grokdeclarator): Move up loc declaration and use it in the\n\tgrokvardecl call too.\n\n/testsuite\n2018-12-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/pr53037-4.C: Test the first two locations too.\n\nFrom-SVN: r267029", "tree": {"sha": "6ffee2874d3117bbb498d78689a0ce84e5618d71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ffee2874d3117bbb498d78689a0ce84e5618d71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b9ef867ec3230abcfb67cbe93f3e7dd5ecfbf47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b9ef867ec3230abcfb67cbe93f3e7dd5ecfbf47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b9ef867ec3230abcfb67cbe93f3e7dd5ecfbf47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b9ef867ec3230abcfb67cbe93f3e7dd5ecfbf47/comments", "author": null, "committer": null, "parents": [{"sha": "f214a6415ad5f2a2124b94b7c4abcfe04861595f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f214a6415ad5f2a2124b94b7c4abcfe04861595f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f214a6415ad5f2a2124b94b7c4abcfe04861595f"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "3a53af4f8666178a4d019d5606801a02f6921490", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9ef867ec3230abcfb67cbe93f3e7dd5ecfbf47/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9ef867ec3230abcfb67cbe93f3e7dd5ecfbf47/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6b9ef867ec3230abcfb67cbe93f3e7dd5ecfbf47", "patch": "@@ -68,7 +68,7 @@ static int decl_jump_unsafe (tree);\n static void require_complete_types_for_parms (tree);\n static tree grok_reference_init (tree, tree, tree, int);\n static tree grokvardecl (tree, tree, tree, const cp_decl_specifier_seq *,\n-\t\t\t int, int, int, bool, int, tree);\n+\t\t\t int, int, int, bool, int, tree, location_t);\n static void check_static_variable_definition (tree, tree);\n static void record_unknown_type (tree, const char *);\n static tree builtin_function_1 (tree, tree, bool);\n@@ -9282,7 +9282,8 @@ grokvardecl (tree type,\n \t     int inlinep,\n \t     bool conceptp,\n \t     int template_count,\n-\t     tree scope)\n+\t     tree scope,\n+\t     location_t location)\n {\n   tree decl;\n   tree explicit_scope;\n@@ -9318,9 +9319,9 @@ grokvardecl (tree type,\n \t  /* Similarly for explicit specializations.  */\n \t  || (orig_declarator\n \t      && TREE_CODE (orig_declarator) == TEMPLATE_ID_EXPR)))\n-    decl = build_lang_decl (VAR_DECL, name, type);\n+    decl = build_lang_decl_loc (location, VAR_DECL, name, type);\n   else\n-    decl = build_decl (input_location, VAR_DECL, name, type);\n+    decl = build_decl (location, VAR_DECL, name, type);\n \n   if (explicit_scope && TREE_CODE (explicit_scope) == NAMESPACE_DECL)\n     set_decl_namespace (decl, explicit_scope, 0);\n@@ -12200,6 +12201,7 @@ grokdeclarator (const cp_declarator *declarator,\n \n   {\n     tree decl = NULL_TREE;\n+    location_t loc = declarator ? declarator->id_loc : input_location;\n \n     if (decl_context == PARM)\n       {\n@@ -12216,13 +12218,13 @@ grokdeclarator (const cp_declarator *declarator,\n \tif (!staticp && !friendp && TREE_CODE (type) != METHOD_TYPE)\n \t  if (tree auto_node = type_uses_auto (type))\n \t    {\n-\t      location_t loc = declspecs->locations[ds_type_spec];\n+\t      location_t tloc = declspecs->locations[ds_type_spec];\n \t      if (CLASS_PLACEHOLDER_TEMPLATE (auto_node))\n-\t\terror_at (loc, \"invalid use of template-name %qE without an \"\n+\t\terror_at (tloc, \"invalid use of template-name %qE without an \"\n \t\t\t  \"argument list\",\n \t\t\t  CLASS_PLACEHOLDER_TEMPLATE (auto_node));\n \t      else\n-\t\terror_at (loc, \"non-static data member declared with \"\n+\t\terror_at (tloc, \"non-static data member declared with \"\n \t\t\t  \"placeholder %qT\", auto_node);\n \t      type = error_mark_node;\n \t    }\n@@ -12487,7 +12489,6 @@ grokdeclarator (const cp_declarator *declarator,\n \n \tif (decl == NULL_TREE)\n \t  {\n-\t    location_t loc = declarator ? declarator->id_loc : input_location;\n \t    if (staticp)\n \t      {\n \t\t/* C++ allows static class members.  All other work\n@@ -12704,7 +12705,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t    inlinep,\n \t\t\t    concept_p,\n \t\t\t    template_count,\n-\t\t\t    ctype ? ctype : in_namespace);\n+\t\t\t    ctype ? ctype : in_namespace,\n+\t\t\t    loc);\n \tif (decl == NULL_TREE)\n \t  return error_mark_node;\n "}]}