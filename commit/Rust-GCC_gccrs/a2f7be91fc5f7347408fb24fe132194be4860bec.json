{"sha": "a2f7be91fc5f7347408fb24fe132194be4860bec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJmN2JlOTFmYzVmNzM0NzQwOGZiMjRmZTEzMjE5NGJlNDg2MGJlYw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-07-22T16:24:53Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-07-22T16:24:53Z"}, "message": "hashtable.c (approx_sqrt): Make static.\n\n\t* hashtable.c (approx_sqrt): Make static.\n\t* hashtable.h: Don't prototype approx_sqrt.\n\t* line-map.c (init_line_maps): Rename linemap_init.\n\t(free_line_maps): Rename linemap_free.\n\t(add_line_map): Rename linemap_add.\n\t(lookup_line): Rename linemap_lookup.\n\t(print_containing_files): Rename linemap_print_containing_files.\n\t* linemap.h: Update to match.\n\n\t* cpperror.c, cppinit.c, cpplib.c, cppmacro.c: Update calls to\n\tlinemap routines to use new names.\n\nFrom-SVN: r69672", "tree": {"sha": "f17d769828f9016a03c5e139b2664c5e6bed6bec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f17d769828f9016a03c5e139b2664c5e6bed6bec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2f7be91fc5f7347408fb24fe132194be4860bec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2f7be91fc5f7347408fb24fe132194be4860bec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2f7be91fc5f7347408fb24fe132194be4860bec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2f7be91fc5f7347408fb24fe132194be4860bec/comments", "author": null, "committer": null, "parents": [{"sha": "bef89e9e0929d4c17cfa23c0ab8c8cc3315a88c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bef89e9e0929d4c17cfa23c0ab8c8cc3315a88c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bef89e9e0929d4c17cfa23c0ab8c8cc3315a88c9"}], "stats": {"total": 67, "additions": 40, "deletions": 27}, "files": [{"sha": "065c768ee80370f297041b95489da81fedc5cd89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f7be91fc5f7347408fb24fe132194be4860bec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f7be91fc5f7347408fb24fe132194be4860bec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2f7be91fc5f7347408fb24fe132194be4860bec", "patch": "@@ -1,3 +1,17 @@\n+2003-07-22  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* hashtable.c (approx_sqrt): Make static.\n+\t* hashtable.h: Don't prototype approx_sqrt.\n+\t* line-map.c (init_line_maps): Rename linemap_init.\n+\t(free_line_maps): Rename linemap_free.\n+\t(add_line_map): Rename linemap_add.\n+\t(lookup_line): Rename linemap_lookup.\n+\t(print_containing_files): Rename linemap_print_containing_files.\n+\t* linemap.h: Update to match.\n+\n+\t* cpperror.c, cppinit.c, cpplib.c, cppmacro.c: Update calls to\n+\tlinemap routines to use new names.\n+\n 2003-07-16  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* c-common.c (handle_packed_attribute): Don't pack a struct via a\n@@ -77,7 +91,7 @@ Tue Jul 22 00:42:12 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-07-17  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n-        PR optimization/11536\n+\tPR optimization/11536\n \t* unroll.c (loop_iterations): Do not replace a register holding\n \tthe final value by its equivalent before the loop if it is not\n \tinvariant.\n@@ -93,7 +107,7 @@ Tue Jul 22 00:42:12 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-07-20  Lisa M. Goldstein  <opus@gnu.org>\n \n-        * doc/invoke.texi: Fixes to style, grammar and diction.\n+\t* doc/invoke.texi: Fixes to style, grammar and diction.\n \n 2003-07-20  Roger Sayle  <roger@eyesopen.com>\n "}, {"sha": "310631d80be66e42f40af3423a105fa6f86ebc17", "filename": "gcc/cpperror.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f7be91fc5f7347408fb24fe132194be4860bec/gcc%2Fcpperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f7be91fc5f7347408fb24fe132194be4860bec/gcc%2Fcpperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpperror.c?ref=a2f7be91fc5f7347408fb24fe132194be4860bec", "patch": "@@ -44,8 +44,8 @@ print_location (cpp_reader *pfile, unsigned int line, unsigned int col)\n     {\n       const struct line_map *map;\n \n-      map = lookup_line (&pfile->line_maps, line);\n-      print_containing_files (&pfile->line_maps, map);\n+      map = linemap_lookup (&pfile->line_maps, line);\n+      linemap_print_containing_files (&pfile->line_maps, map);\n \n       line = SOURCE_LINE (map, line);\n       if (col == 0)"}, {"sha": "e5011ef891bb2f3c29dc6f7a10fe72577c64ebb8", "filename": "gcc/cppinit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f7be91fc5f7347408fb24fe132194be4860bec/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f7be91fc5f7347408fb24fe132194be4860bec/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=a2f7be91fc5f7347408fb24fe132194be4860bec", "patch": "@@ -163,7 +163,7 @@ cpp_create_reader (enum c_lang lang, hash_table *table)\n \n   /* Initialize the line map.  Start at logical line 1, so we can use\n      a line number of zero for special states.  */\n-  init_line_maps (&pfile->line_maps);\n+  linemap_init (&pfile->line_maps);\n \n   /* Initialize lexer state.  */\n   pfile->state.save_comments = ! CPP_OPTION (pfile, discard_comments);\n@@ -252,7 +252,7 @@ cpp_destroy (cpp_reader *pfile)\n       free (context);\n     }\n \n-  free_line_maps (&pfile->line_maps);\n+  linemap_free (&pfile->line_maps);\n   free (pfile);\n }\n "}, {"sha": "b732c305aa3f6f497d2b246bdfd36612cb3178dc", "filename": "gcc/cpplib.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f7be91fc5f7347408fb24fe132194be4860bec/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f7be91fc5f7347408fb24fe132194be4860bec/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=a2f7be91fc5f7347408fb24fe132194be4860bec", "patch": "@@ -898,8 +898,8 @@ _cpp_do_file_change (cpp_reader *pfile, enum lc_reason reason,\n \t\t     const char *to_file, unsigned int file_line,\n \t\t     unsigned int sysp)\n {\n-  pfile->map = add_line_map (&pfile->line_maps, reason, sysp,\n-\t\t\t     pfile->line, to_file, file_line);\n+  pfile->map = linemap_add (&pfile->line_maps, reason, sysp,\n+\t\t\t    pfile->line, to_file, file_line);\n \n   if (pfile->cb.file_change)\n     pfile->cb.file_change (pfile, pfile->map);"}, {"sha": "045d4e3718589bf5d3e88687ef799471461f3596", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f7be91fc5f7347408fb24fe132194be4860bec/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f7be91fc5f7347408fb24fe132194be4860bec/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=a2f7be91fc5f7347408fb24fe132194be4860bec", "patch": "@@ -80,7 +80,7 @@ _cpp_warn_if_unused_macro (cpp_reader *pfile, cpp_hashnode *node,\n       cpp_macro *macro = node->value.macro;\n \n       if (!macro->used\n-\t  && MAIN_FILE_P (lookup_line (&pfile->line_maps, macro->line)))\n+\t  && MAIN_FILE_P (linemap_lookup (&pfile->line_maps, macro->line)))\n \tcpp_error_with_line (pfile, DL_WARNING, macro->line, 0,\n \t\t\t     \"macro \\\"%s\\\" is not used\", NODE_NAME (node));\n     }"}, {"sha": "5254882379da4ef0864ab63e699572b87e84c141", "filename": "gcc/hashtable.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f7be91fc5f7347408fb24fe132194be4860bec/gcc%2Fhashtable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f7be91fc5f7347408fb24fe132194be4860bec/gcc%2Fhashtable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhashtable.c?ref=a2f7be91fc5f7347408fb24fe132194be4860bec", "patch": "@@ -32,6 +32,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n static unsigned int calc_hash (const unsigned char *, unsigned int);\n static void ht_expand (hash_table *);\n+static double approx_sqrt (double);\n \n /* Calculate the hash of the string STR of length LEN.  */\n \n@@ -275,7 +276,7 @@ ht_dump_statistics (hash_table *table)\n \n /* Return the approximate positive square root of a number N.  This is for\n    statistical reports, not code generation.  */\n-double\n+static double\n approx_sqrt (double x)\n {\n   double s, d;"}, {"sha": "dd7c0b142d7dc7b0b82059131d42cce5031b98f5", "filename": "gcc/hashtable.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f7be91fc5f7347408fb24fe132194be4860bec/gcc%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f7be91fc5f7347408fb24fe132194be4860bec/gcc%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhashtable.h?ref=a2f7be91fc5f7347408fb24fe132194be4860bec", "patch": "@@ -78,8 +78,4 @@ extern void ht_forall (hash_table *, ht_cb, const void *);\n /* Dump allocation statistics to stderr.  */\n extern void ht_dump_statistics (hash_table *);\n \n-/* Approximate positive square root of a host double.  This is for\n-   statistical reports, not code generation.  */\n-extern double approx_sqrt (double);\n-\n #endif /* GCC_HASHTABLE_H */"}, {"sha": "f3c2369dc9cb0fe6920d7f1fb07a36412a2f06f1", "filename": "gcc/line-map.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f7be91fc5f7347408fb24fe132194be4860bec/gcc%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f7be91fc5f7347408fb24fe132194be4860bec/gcc%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fline-map.c?ref=a2f7be91fc5f7347408fb24fe132194be4860bec", "patch": "@@ -30,7 +30,7 @@ static void trace_include (const struct line_maps *, const struct line_map *);\n /* Initialize a line map set.  */\n \n void\n-init_line_maps (struct line_maps *set)\n+linemap_init (struct line_maps *set)\n {\n   set->maps = 0;\n   set->allocated = 0;\n@@ -43,7 +43,7 @@ init_line_maps (struct line_maps *set)\n /* Free a line map set.  */\n \n void\n-free_line_maps (struct line_maps *set)\n+linemap_free (struct line_maps *set)\n {\n   if (set->maps)\n     {\n@@ -68,9 +68,9 @@ free_line_maps (struct line_maps *set)\n    function.  */\n \n const struct line_map *\n-add_line_map (struct line_maps *set, enum lc_reason reason,\n-\t      unsigned int sysp, unsigned int from_line,\n-\t      const char *to_file, unsigned int to_line)\n+linemap_add (struct line_maps *set, enum lc_reason reason,\n+\t     unsigned int sysp, unsigned int from_line,\n+\t     const char *to_file, unsigned int to_line)\n {\n   struct line_map *map;\n \n@@ -151,7 +151,7 @@ add_line_map (struct line_maps *set, enum lc_reason reason,\n    the list is sorted and we can use a binary search.  */\n \n const struct line_map *\n-lookup_line (struct line_maps *set, unsigned int line)\n+linemap_lookup (struct line_maps *set, unsigned int line)\n {\n   unsigned int md, mn = 0, mx = set->used;\n \n@@ -175,7 +175,8 @@ lookup_line (struct line_maps *set, unsigned int line)\n    the most recently listed stack is the same as the current one.  */\n \n void\n-print_containing_files (struct line_maps *set, const struct line_map *map)\n+linemap_print_containing_files (struct line_maps *set,\n+\t\t\t\tconst struct line_map *map)\n {\n   if (MAIN_FILE_P (map) || set->last_listed == map->included_from)\n     return;"}, {"sha": "1176743eedebca6a065e783b95dbdcc760a3d6b1", "filename": "gcc/line-map.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f7be91fc5f7347408fb24fe132194be4860bec/gcc%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f7be91fc5f7347408fb24fe132194be4860bec/gcc%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fline-map.h?ref=a2f7be91fc5f7347408fb24fe132194be4860bec", "patch": "@@ -68,10 +68,10 @@ struct line_maps\n };\n \n /* Initialize a line map set.  */\n-extern void init_line_maps (struct line_maps *);\n+extern void linemap_init (struct line_maps *);\n \n /* Free a line map set.  */\n-extern void free_line_maps (struct line_maps *);\n+extern void linemap_free (struct line_maps *);\n \n /* Add a mapping of logical source line to physical source file and\n    line number.  The text pointed to by TO_FILE must have a lifetime\n@@ -82,19 +82,20 @@ extern void free_line_maps (struct line_maps *);\n    FROM_LINE should be monotonic increasing across calls to this\n    function.  A call to this function can relocate the previous set of\n    maps, so any stored line_map pointers should not be used.  */\n-extern const struct line_map *add_line_map\n+extern const struct line_map *linemap_add\n   (struct line_maps *, enum lc_reason, unsigned int sysp,\n    unsigned int from_line, const char *to_file, unsigned int to_line);\n \n /* Given a logical line, returns the map from which the corresponding\n    (source file, line) pair can be deduced.  */\n-extern const struct line_map *lookup_line (struct line_maps *, unsigned int);\n+extern const struct line_map *linemap_lookup (struct line_maps *,\n+\t\t\t\t\t      unsigned int);\n \n /* Print the file names and line numbers of the #include commands\n    which led to the map MAP, if any, to stderr.  Nothing is output if\n    the most recently listed stack is the same as the current one.  */\n-extern void print_containing_files (struct line_maps *,\n-\t\t\t\t    const struct line_map *);\n+extern void linemap_print_containing_files (struct line_maps *,\n+\t\t\t\t\t    const struct line_map *);\n \n /* Converts a map and logical line to source line.  */\n #define SOURCE_LINE(MAP, LINE) ((LINE) + (MAP)->to_line - (MAP)->from_line)"}]}