{"sha": "7876a41423b46245f7eec641217c8330ded8734a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg3NmE0MTQyM2I0NjI0NWY3ZWVjNjQxMjE3YzgzMzBkZWQ4NzM0YQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2005-07-19T12:09:49Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2005-07-19T12:09:49Z"}, "message": "re PR c++/22476 (-Wmissing-format-attribute should pick out function pointer candidates also)\n\n\tPR c/22476\n\t* c-common.c (check_function_arguments): Call\n\t'check_function_format' if either -Wformat or\n\t-Wmissing-format-attribute are specified.\n\t* c-format.c (check_function_format): Check -Wformat before\n\tcalling 'check_format_info'.\n\t* c-opts.c (c_common_post_options): Don't warn for\n\t-Wmissing-format-attribute without -Wformat.\n\t* c-typeck.c (convert_for_assignment): Detect additional cases for\n\t-Wmissing-format-attribute.\n\t* doc/invoke.texi (-Wmissing-format-attribute): Document new\n\tbehavior.\n\ntestsuite:\n\t* gcc.dg/format/miss-1.c, gcc.dg/format/miss-2.c: Don't\n\tspecify -Wformat for these tests.\n\t* gcc.dg/format/miss-3.c, gcc.dg/format/miss-4.c,\n\tgcc.dg/format/miss-5.c, gcc.dg/format/miss-6.c: New.\n\t* gcc.dg/format/opt-6.c: Delete.\n\nFrom-SVN: r102155", "tree": {"sha": "dca43bd0a0db3df3cbcc88768c895067aa836aba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dca43bd0a0db3df3cbcc88768c895067aa836aba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7876a41423b46245f7eec641217c8330ded8734a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7876a41423b46245f7eec641217c8330ded8734a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7876a41423b46245f7eec641217c8330ded8734a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7876a41423b46245f7eec641217c8330ded8734a/comments", "author": null, "committer": null, "parents": [{"sha": "98ea74375f446196ce2ff7a3d5f7f9587b3ced52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ea74375f446196ce2ff7a3d5f7f9587b3ced52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98ea74375f446196ce2ff7a3d5f7f9587b3ced52"}], "stats": {"total": 256, "additions": 233, "deletions": 23}, "files": [{"sha": "f87dac13ae8d4e3e81234ea8b2c3e3c42b466b5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7876a41423b46245f7eec641217c8330ded8734a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7876a41423b46245f7eec641217c8330ded8734a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7876a41423b46245f7eec641217c8330ded8734a", "patch": "@@ -1,3 +1,18 @@\n+2005-07-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\tPR c/22476\n+\t* c-common.c (check_function_arguments): Call\n+\t'check_function_format' if either -Wformat or\n+\t-Wmissing-format-attribute are specified.\n+\t* c-format.c (check_function_format): Check -Wformat before\n+\tcalling 'check_format_info'.\n+\t* c-opts.c (c_common_post_options): Don't warn for\n+\t-Wmissing-format-attribute without -Wformat.\n+\t* c-typeck.c (convert_for_assignment): Detect additional cases for\n+\t-Wmissing-format-attribute.\n+\t* doc/invoke.texi (-Wmissing-format-attribute): Document new\n+\tbehavior.\n+\n 2005-07-19  Richard Guenther  <rguenther@suse.de>\n \n \t* config/i386/i386.md (lrint<mode>2): Use temporary"}, {"sha": "90a373cfa661e1f318de35b6737a5ee4a69a1c2d", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7876a41423b46245f7eec641217c8330ded8734a/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7876a41423b46245f7eec641217c8330ded8734a/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=7876a41423b46245f7eec641217c8330ded8734a", "patch": "@@ -5505,11 +5505,11 @@ check_function_arguments (tree attrs, tree params, tree typelist)\n \n   /* Check for errors in format strings.  */\n \n-  if (warn_format)\n-    {\n+  if (warn_format || warn_missing_format_attribute)\n       check_function_format (attrs, params);\n-      check_function_sentinel (attrs, params, typelist);\n-    }\n+\n+  if (warn_format)\n+    check_function_sentinel (attrs, params, typelist);\n }\n \n /* Generic argument checking recursion routine.  PARAM is the argument to"}, {"sha": "587f15e9c6be2bf7ba5f5c41d4568e881aae079d", "filename": "gcc/c-format.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7876a41423b46245f7eec641217c8330ded8734a/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7876a41423b46245f7eec641217c8330ded8734a/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=7876a41423b46245f7eec641217c8330ded8734a", "patch": "@@ -864,7 +864,8 @@ check_function_format (tree attrs, tree params)\n \t  /* Yup; check it.  */\n \t  function_format_info info;\n \t  decode_format_attr (TREE_VALUE (a), &info, 1);\n-\t  check_format_info (&info, params);\n+\t  if (warn_format)\n+\t    check_format_info (&info, params);\n \t  if (warn_missing_format_attribute && info.first_arg_num == 0\n \t      && (format_types[info.format_type].flags\n \t\t  & (int) FMT_FLAG_ARG_CONVERT))"}, {"sha": "e3531193e6e9971bb9a1824ca2f3d3a19ca113e4", "filename": "gcc/c-opts.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7876a41423b46245f7eec641217c8330ded8734a/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7876a41423b46245f7eec641217c8330ded8734a/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=7876a41423b46245f7eec641217c8330ded8734a", "patch": "@@ -991,8 +991,6 @@ c_common_post_options (const char **pfilename)\n \t       \"-Wformat-nonliteral ignored without -Wformat\");\n       warning (OPT_Wformat_security,\n \t       \"-Wformat-security ignored without -Wformat\");\n-      warning (OPT_Wmissing_format_attribute,\n-\t       \"-Wmissing-format-attribute ignored without -Wformat\");\n     }\n \n   /* C99 requires special handling of complex multiplication and division;"}, {"sha": "928084f43978c1e3a9d1eab30b83eca0d83b981e", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7876a41423b46245f7eec641217c8330ded8734a/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7876a41423b46245f7eec641217c8330ded8734a/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=7876a41423b46245f7eec641217c8330ded8734a", "patch": "@@ -3793,6 +3793,55 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n         warning (OPT_Wc___compat, \"request for implicit conversion from \"\n                  \"%qT to %qT not permitted in C++\", rhstype, type);\n \n+      /* Check if the right-hand side has a format attribute but the\n+\t left-hand side doesn't.  */\n+      if (warn_missing_format_attribute)\n+        {\n+\t  tree rattrs = TYPE_ATTRIBUTES (ttr), ra;\n+\t  for (ra = rattrs; ra; ra = TREE_CHAIN (ra))\n+\t    {\n+\t      if (is_attribute_p (\"format\", TREE_PURPOSE (ra)))\n+\t\tbreak;\n+\t    }\n+\t  if (ra)\n+\t    {\n+\t      tree lattrs = TYPE_ATTRIBUTES (ttl), la;\n+\t      for (la = lattrs; la; la = TREE_CHAIN (la))\n+\t      {\n+\t\tif (is_attribute_p (\"format\", TREE_PURPOSE (la)))\n+\t\t  break;\n+\t      }\n+\t      if (!la)\n+\t\tswitch (errtype)\n+\t\t  {\n+\t\t  case ic_argpass:\n+\t\t  case ic_argpass_nonproto:\n+\t\t    warning (OPT_Wmissing_format_attribute,\n+\t\t\t     \"argument %d of %qE might be \"\n+\t\t\t     \"a candidate for a format attribute\",\n+\t\t\t     parmnum, rname);\n+\t\t    break;\n+\t\t  case ic_assign:\n+\t\t    warning (OPT_Wmissing_format_attribute,\n+\t\t\t     \"assignment left-hand side might be \"\n+\t\t\t     \"a candidate for a format attribute\");\n+\t\t    break;\n+\t\t  case ic_init:\n+\t\t    warning (OPT_Wmissing_format_attribute,\n+\t\t\t     \"initialization left-hand side might be \"\n+\t\t\t     \"a candidate for a format attribute\");\n+\t\t    break;\n+\t\t  case ic_return:\n+\t\t    warning (OPT_Wmissing_format_attribute,\n+\t\t\t     \"return type might be \"\n+\t\t\t     \"a candidate for a format attribute\");\n+\t\t    break;\n+\t\t  default:\n+\t\t    gcc_unreachable ();\n+\t\t  }\n+\t    }\n+\t}\n+      \n       /* Any non-function converts to a [const][volatile] void *\n \t and vice versa; otherwise, targets must be the same.\n \t Meanwhile, the lhs target must have all the qualifiers of the rhs.  */"}, {"sha": "d4a504b8691f476bb8c0c124e1a8b36fd141666f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7876a41423b46245f7eec641217c8330ded8734a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7876a41423b46245f7eec641217c8330ded8734a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7876a41423b46245f7eec641217c8330ded8734a", "patch": "@@ -3126,14 +3126,23 @@ hosted C environments.\n @item -Wmissing-format-attribute\n @opindex Wmissing-format-attribute\n @opindex Wformat\n-If @option{-Wformat} is enabled, also warn about functions which might be\n-candidates for @code{format} attributes.  Note these are only possible\n-candidates, not absolute ones.  GCC will guess that @code{format}\n-attributes might be appropriate for any function that calls a function\n-like @code{vprintf} or @code{vscanf}, but this might not always be the\n+Warn about function pointers which might be candidates for @code{format}\n+attributes.  Note these are only possible candidates, not absolute ones.\n+GCC will guess that function pointers with @code{format} attributes that\n+are used in assignment, initialization, parameter passing or return\n+statements should have a corresponding @code{format} attribute in the\n+resulting type.  I.e.@: the left-hand side of the assignment or\n+initialization, the type of the parameter variable, or the return type\n+of the containing function respectively should also have a @code{format}\n+attribute to avoid the warning.\n+\n+GCC will also warn about function definitions which might be\n+candidates for @code{format} attributes.  Again, these are only\n+possible candidates.  GCC will guess that @code{format} attributes\n+might be appropriate for any function that calls a function like\n+@code{vprintf} or @code{vscanf}, but this might not always be the\n case, and some functions for which @code{format} attributes are\n-appropriate may not be detected.  This option has no effect unless\n-@option{-Wformat} is enabled (possibly by @option{-Wall}).\n+appropriate may not be detected.\n \n @item -Wno-multichar\n @opindex Wno-multichar"}, {"sha": "3032a0afda5dfcae3bf2c8468d8dadb00e945b22", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7876a41423b46245f7eec641217c8330ded8734a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7876a41423b46245f7eec641217c8330ded8734a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7876a41423b46245f7eec641217c8330ded8734a", "patch": "@@ -1,3 +1,11 @@\n+2005-07-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/format/miss-1.c, gcc.dg/format/miss-2.c: Don't\n+\tspecify -Wformat for these tests.\n+\t* gcc.dg/format/miss-3.c, gcc.dg/format/miss-4.c,\n+\tgcc.dg/format/miss-5.c, gcc.dg/format/miss-6.c: New.\n+\t* gcc.dg/format/opt-6.c: Delete.\n+\n 2005-07-18  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* gcc.dg/tree-ssa/sra-2.c: Pass --param sra-max-structure-size."}, {"sha": "839f2963ae7cfb51e8fc28bfa5aeddb471fb6c65", "filename": "gcc/testsuite/gcc.dg/format/miss-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7876a41423b46245f7eec641217c8330ded8734a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7876a41423b46245f7eec641217c8330ded8734a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-1.c?ref=7876a41423b46245f7eec641217c8330ded8734a", "patch": "@@ -1,7 +1,7 @@\n /* Test for warnings for missing format attributes.  */\n /* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99 -Wformat -Wmissing-format-attribute\" } */\n+/* { dg-options \"-std=gnu99 -Wmissing-format-attribute\" } */\n \n #include \"format.h\"\n "}, {"sha": "241b22d2c06fb8ca686e6bf5408ec46a0bcf8889", "filename": "gcc/testsuite/gcc.dg/format/miss-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7876a41423b46245f7eec641217c8330ded8734a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7876a41423b46245f7eec641217c8330ded8734a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-2.c?ref=7876a41423b46245f7eec641217c8330ded8734a", "patch": "@@ -2,7 +2,7 @@\n    relevant parameters for a format attribute; see c/1017.  */\n /* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99 -Wformat -Wmissing-format-attribute\" } */\n+/* { dg-options \"-std=gnu99 -Wmissing-format-attribute\" } */\n \n #include \"format.h\"\n "}, {"sha": "c588bed3519424ddc9da15d8c30c2f77d9d4f31c", "filename": "gcc/testsuite/gcc.dg/format/miss-3.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7876a41423b46245f7eec641217c8330ded8734a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7876a41423b46245f7eec641217c8330ded8734a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-3.c?ref=7876a41423b46245f7eec641217c8330ded8734a", "patch": "@@ -0,0 +1,26 @@\n+/* Test warnings for missing format attributes on function pointers.  */\n+/* Origin: Kaveh Ghazi <ghazi@caip.rutgers.edu> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wmissing-format-attribute\" } */\n+\n+#include \"format.h\"\n+\n+typedef void (*noattr_t) (const char *, ...);\n+typedef noattr_t __attribute__ ((__format__(__printf__, 1, 2))) attr_t;\n+\n+typedef void (*vnoattr_t) (const char *, va_list);\n+typedef vnoattr_t __attribute__ ((__format__(__printf__, 1, 0))) vattr_t;\n+\n+void\n+foo1 (noattr_t na, attr_t a, vnoattr_t vna, vattr_t va)\n+{\n+  noattr_t na1 = na;\n+  noattr_t na2 = a; /* { dg-warning \"candidate\" \"initialization warning\" } */\n+  attr_t a1 = na;\n+  attr_t a2 = a;\n+  \n+  vnoattr_t vna1 = vna;\n+  vnoattr_t vna2 = va; /* { dg-warning \"candidate\" \"initialization warning\" } */\n+  vattr_t va1 = vna;\n+  vattr_t va2 = va;\n+}"}, {"sha": "9be5e4df4e5a309ea9e1e0cf9579fcbd21f7c5b8", "filename": "gcc/testsuite/gcc.dg/format/miss-4.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7876a41423b46245f7eec641217c8330ded8734a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7876a41423b46245f7eec641217c8330ded8734a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-4.c?ref=7876a41423b46245f7eec641217c8330ded8734a", "patch": "@@ -0,0 +1,32 @@\n+/* Test warnings for missing format attributes on function pointers.  */\n+/* Origin: Kaveh Ghazi <ghazi@caip.rutgers.edu> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wmissing-format-attribute\" } */\n+\n+#include \"format.h\"\n+\n+typedef void (*noattr_t) (const char *, ...);\n+typedef noattr_t __attribute__ ((__format__(__printf__, 1, 2))) attr_t;\n+\n+typedef void (*vnoattr_t) (const char *, va_list);\n+typedef vnoattr_t __attribute__ ((__format__(__printf__, 1, 0))) vattr_t;\n+\n+void\n+foo1 (noattr_t na, attr_t a, vnoattr_t vna, vattr_t va)\n+{\n+  noattr_t na1, na2;\n+  attr_t a1, a2;\n+  \n+  vnoattr_t vna1, vna2;\n+  vattr_t va1, va2;\n+\n+  na1 = na;\n+  na2 = a; /* { dg-warning \"candidate\" \"assignment warning\" } */\n+  a1 = na;\n+  a2 = a;\n+  \n+  vna1 = vna;\n+  vna2 = va; /* { dg-warning \"candidate\" \"assignment warning\" } */\n+  va1 = vna;\n+  va1 = va;\n+}"}, {"sha": "eaf1473ddc1bc23a152cfc5cf1ec223e46afc612", "filename": "gcc/testsuite/gcc.dg/format/miss-5.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7876a41423b46245f7eec641217c8330ded8734a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7876a41423b46245f7eec641217c8330ded8734a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-5.c?ref=7876a41423b46245f7eec641217c8330ded8734a", "patch": "@@ -0,0 +1,48 @@\n+/* Test warnings for missing format attributes on function pointers.  */\n+/* Origin: Kaveh Ghazi <ghazi@caip.rutgers.edu> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wmissing-format-attribute\" } */\n+\n+#include \"format.h\"\n+\n+typedef void (*noattr_t) (const char *, ...);\n+typedef noattr_t __attribute__ ((__format__(__printf__, 1, 2))) attr_t;\n+\n+typedef void (*vnoattr_t) (const char *, va_list);\n+typedef vnoattr_t __attribute__ ((__format__(__printf__, 1, 0))) vattr_t;\n+\n+noattr_t\n+foo1 (noattr_t na, attr_t a, int i)\n+{\n+  if (i)\n+    return na;\n+  else\n+    return a; /* { dg-warning \"candidate\" \"return type warning\" } */\n+}\n+\n+attr_t\n+foo2 (noattr_t na, attr_t a, int i)\n+{\n+  if (i)\n+    return na;\n+  else\n+    return a;\n+}\n+\n+vnoattr_t\n+foo3 (vnoattr_t vna, vattr_t va, int i)\n+{\n+  if (i)\n+    return vna;\n+  else\n+    return va; /* { dg-warning \"candidate\" \"return type warning\" } */\n+}\n+\n+vattr_t\n+foo4 (vnoattr_t vna, vattr_t va, int i)\n+{\n+  if (i)\n+    return vna;\n+  else\n+    return va;\n+}"}, {"sha": "abe221f917f79cdf6f3f9952960714918d6c16f1", "filename": "gcc/testsuite/gcc.dg/format/miss-6.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7876a41423b46245f7eec641217c8330ded8734a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7876a41423b46245f7eec641217c8330ded8734a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmiss-6.c?ref=7876a41423b46245f7eec641217c8330ded8734a", "patch": "@@ -0,0 +1,31 @@\n+/* Test warnings for missing format attributes on function pointers.  */\n+/* Origin: Kaveh Ghazi <ghazi@caip.rutgers.edu> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wmissing-format-attribute\" } */\n+\n+#include \"format.h\"\n+\n+typedef void (*noattr_t) (const char *, ...);\n+typedef noattr_t __attribute__ ((__format__(__printf__, 1, 2))) attr_t;\n+\n+typedef void (*vnoattr_t) (const char *, va_list);\n+typedef vnoattr_t __attribute__ ((__format__(__printf__, 1, 0))) vattr_t;\n+\n+extern void foo1 (noattr_t);\n+extern void foo2 (attr_t);\n+extern void foo3 (vnoattr_t);\n+extern void foo4 (vattr_t);\n+\n+void\n+foo (noattr_t na, attr_t a, vnoattr_t vna, vattr_t va)\n+{\n+  foo1 (na);\n+  foo1 (a); /* { dg-warning \"candidate\" \"parameter passing warning\" } */\n+  foo2 (na);\n+  foo2 (a);\n+  \n+  foo3 (vna);\n+  foo3 (va); /* { dg-warning \"candidate\" \"parameter passing warning\" } */\n+  foo4 (vna);\n+  foo4 (va);\n+}"}, {"sha": "140da30c1f8ac6d0262ae9702e9e74d33f248d4e", "filename": "gcc/testsuite/gcc.dg/format/opt-6.c", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ea74375f446196ce2ff7a3d5f7f9587b3ced52/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ea74375f446196ce2ff7a3d5f7f9587b3ced52/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-6.c?ref=98ea74375f446196ce2ff7a3d5f7f9587b3ced52", "patch": "@@ -1,7 +0,0 @@\n-/* Test diagnostics for options used on their own without\n-   -Wformat.  -Wmissing-format-attribute.  */\n-/* Origin: Joseph Myers <joseph@codesourcery.com> */\n-/* { dg-do compile } */\n-/* { dg-options \"-Wmissing-format-attribute\" } */\n-\n-/* { dg-warning \"warning: -Wmissing-format-attribute ignored without -Wformat\" \"ignored\" { target *-*-* } 0 } */"}]}