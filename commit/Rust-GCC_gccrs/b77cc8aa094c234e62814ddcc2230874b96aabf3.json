{"sha": "b77cc8aa094c234e62814ddcc2230874b96aabf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc3Y2M4YWEwOTRjMjM0ZTYyODE0ZGRjYzIyMzA4NzRiOTZhYWJmMw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-11-07T22:08:49Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-11-07T22:08:49Z"}, "message": "simplify-rtx: simplify_logical_relational_operation\n\nThis introduces simplify_logical_relational_operation.  Currently the\nonly thing implemented it can simplify is the IOR of two CONDs of the\nsame arguments.\n\n\n\t* simplify-rtx.c (comparison_to_mask): New function.\n\t(mask_to_comparison): New function.\n\t(simplify_logical_relational_operation): New function.\n\t(simplify_binary_operation_1): Call\n\tsimplify_logical_relational_operation.\n\nFrom-SVN: r277931", "tree": {"sha": "51ef317605c4ddf6c88a3a384c2010832272f493", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51ef317605c4ddf6c88a3a384c2010832272f493"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b77cc8aa094c234e62814ddcc2230874b96aabf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b77cc8aa094c234e62814ddcc2230874b96aabf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b77cc8aa094c234e62814ddcc2230874b96aabf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b77cc8aa094c234e62814ddcc2230874b96aabf3/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "87496ad88e0fa227fcdb2cd88e3e501f96aaf2f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87496ad88e0fa227fcdb2cd88e3e501f96aaf2f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87496ad88e0fa227fcdb2cd88e3e501f96aaf2f2"}], "stats": {"total": 138, "additions": 138, "deletions": 0}, "files": [{"sha": "8c0a25e9c02a5790fdb4059dc977330327b7e741", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77cc8aa094c234e62814ddcc2230874b96aabf3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77cc8aa094c234e62814ddcc2230874b96aabf3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b77cc8aa094c234e62814ddcc2230874b96aabf3", "patch": "@@ -1,3 +1,11 @@\n+2018-11-07  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* simplify-rtx.c (comparison_to_mask): New function.\n+\t(mask_to_comparison): New function.\n+\t(simplify_logical_relational_operation): New function.\n+\t(simplify_binary_operation_1): Call\n+\tsimplify_logical_relational_operation.\n+\n 2019-11-07  Peter Bergner <bergner@linux.ibm.com>\n \n \tPR other/92090"}, {"sha": "b2ba9222ce3980d695796f1bc3474d67ae6b97fb", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77cc8aa094c234e62814ddcc2230874b96aabf3/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77cc8aa094c234e62814ddcc2230874b96aabf3/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=b77cc8aa094c234e62814ddcc2230874b96aabf3", "patch": "@@ -2125,6 +2125,132 @@ simplify_associative_operation (enum rtx_code code, machine_mode mode,\n   return 0;\n }\n \n+/* Return a mask describing the COMPARISON.  */\n+static int\n+comparison_to_mask (enum rtx_code comparison)\n+{\n+  switch (comparison)\n+    {\n+    case LT:\n+      return 8;\n+    case GT:\n+      return 4;\n+    case EQ:\n+      return 2;\n+    case UNORDERED:\n+      return 1;\n+\n+    case LTGT:\n+      return 12;\n+    case LE:\n+      return 10;\n+    case GE:\n+      return 6;\n+    case UNLT:\n+      return 9;\n+    case UNGT:\n+      return 5;\n+    case UNEQ:\n+      return 3;\n+\n+    case ORDERED:\n+      return 14;\n+    case NE:\n+      return 13;\n+    case UNLE:\n+      return 11;\n+    case UNGE:\n+      return 7;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n+/* Return a comparison corresponding to the MASK.  */\n+static enum rtx_code\n+mask_to_comparison (int mask)\n+{\n+  switch (mask)\n+    {\n+    case 8:\n+      return LT;\n+    case 4:\n+      return GT;\n+    case 2:\n+      return EQ;\n+    case 1:\n+      return UNORDERED;\n+\n+    case 12:\n+      return LTGT;\n+    case 10:\n+      return LE;\n+    case 6:\n+      return GE;\n+    case 9:\n+      return UNLT;\n+    case 5:\n+      return UNGT;\n+    case 3:\n+      return UNEQ;\n+\n+    case 14:\n+      return ORDERED;\n+    case 13:\n+      return NE;\n+    case 11:\n+      return UNLE;\n+    case 7:\n+      return UNGE;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n+/* Simplify a logical operation CODE with result mode MODE, operating on OP0\n+   and OP1, which should be both relational operations.  Return 0 if no such\n+   simplification is possible.  */\n+rtx\n+simplify_logical_relational_operation (enum rtx_code code, machine_mode mode,\n+\t\t\t\t       rtx op0, rtx op1)\n+{\n+  /* We only handle IOR of two relational operations.  */\n+  if (code != IOR)\n+    return 0;\n+\n+  if (!(COMPARISON_P (op0) && COMPARISON_P (op1)))\n+    return 0;\n+\n+  if (!(rtx_equal_p (XEXP (op0, 0), XEXP (op1, 0))\n+\t&& rtx_equal_p (XEXP (op0, 1), XEXP (op1, 1))))\n+    return 0;\n+\n+  enum rtx_code code0 = GET_CODE (op0);\n+  enum rtx_code code1 = GET_CODE (op1);\n+\n+  /* We don't handle unsigned comparisons currently.  */\n+  if (code0 == LTU || code0 == GTU || code0 == LEU || code0 == GEU)\n+    return 0;\n+  if (code1 == LTU || code1 == GTU || code1 == LEU || code1 == GEU)\n+    return 0;\n+\n+  int mask0 = comparison_to_mask (code0);\n+  int mask1 = comparison_to_mask (code1);\n+\n+  int mask = mask0 | mask1;\n+\n+  if (mask == 15)\n+    return const_true_rtx;\n+\n+  code = mask_to_comparison (mask);\n+\n+  op0 = XEXP (op1, 0);\n+  op1 = XEXP (op1, 1);\n+\n+  return simplify_gen_relational (code, mode, VOIDmode, op0, op1);\n+}\n \n /* Simplify a binary operation CODE with result mode MODE, operating on OP0\n    and OP1.  Return 0 if no simplification is possible.\n@@ -2886,6 +3012,10 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \treturn tem;\n \n       tem = simplify_associative_operation (code, mode, op0, op1);\n+      if (tem)\n+\treturn tem;\n+\n+      tem = simplify_logical_relational_operation (code, mode, op0, op1);\n       if (tem)\n \treturn tem;\n       break;"}]}