{"sha": "43b7dd91fb0df9cdb7708581089bd3cd36f14a43", "node_id": "C_kwDOANBUbNoAKDQzYjdkZDkxZmIwZGY5Y2RiNzcwODU4MTA4OWJkM2NkMzZmMTRhNDM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-25T12:19:54Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-25T13:51:26Z"}, "message": "Fix warnings on diagnostics", "tree": {"sha": "8022decec0ee50de00c443fd254c0af967b5fdd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8022decec0ee50de00c443fd254c0af967b5fdd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43b7dd91fb0df9cdb7708581089bd3cd36f14a43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b7dd91fb0df9cdb7708581089bd3cd36f14a43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43b7dd91fb0df9cdb7708581089bd3cd36f14a43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b7dd91fb0df9cdb7708581089bd3cd36f14a43/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c52268c6d22bcecef596dffd3c31b78d225f59b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c52268c6d22bcecef596dffd3c31b78d225f59b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c52268c6d22bcecef596dffd3c31b78d225f59b6"}], "stats": {"total": 103, "additions": 54, "deletions": 49}, "files": [{"sha": "f2e3e51c4ab3464fadac126d9dbde701fa5a32b2", "filename": "gcc/rust/backend/rust-constexpr.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b7dd91fb0df9cdb7708581089bd3cd36f14a43/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b7dd91fb0df9cdb7708581089bd3cd36f14a43/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-constexpr.cc?ref=43b7dd91fb0df9cdb7708581089bd3cd36f14a43", "patch": "@@ -4539,10 +4539,14 @@ is_valid_constexpr_fn (tree fun, bool complain)\n \tret = false;\n \tif (complain)\n \t  {\n-\t    auto_diagnostic_group d;\n-\t    error (\"invalid type for parameter %d of %<constexpr%> \"\n-\t\t   \"function %q+#D\",\n-\t\t   DECL_PARM_INDEX (parm), fun);\n+\t    // auto_diagnostic_group d;\n+\t    // error (\"invalid type for parameter %d of %<constexpr%> \"\n+\t    //        \"function %q+#D\",\n+\t    //        DECL_PARM_INDEX (parm), fun);\n+\t    Location locus = Location (DECL_SOURCE_LOCATION (fun));\n+\t    rust_error_at (\n+\t      locus, \"invalid type for parameter %d of %<constexpr%> function\",\n+\t      DECL_PARM_INDEX (parm));\n \t  }\n       }\n "}, {"sha": "9dac0dce53dfc78643d4d574560b1cd31c73f766", "filename": "gcc/rust/backend/rust-tree.cc", "status": "modified", "additions": 46, "deletions": 45, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b7dd91fb0df9cdb7708581089bd3cd36f14a43/gcc%2Frust%2Fbackend%2Frust-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b7dd91fb0df9cdb7708581089bd3cd36f14a43/gcc%2Frust%2Fbackend%2Frust-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-tree.cc?ref=43b7dd91fb0df9cdb7708581089bd3cd36f14a43", "patch": "@@ -3269,19 +3269,19 @@ check_for_uninitialized_const_var (tree decl, bool constexpr_context_p,\n \n       if (show_notes && CLASS_TYPE_P (type) && (complain & tf_error))\n \t{\n-\t  tree defaulted_ctor;\n-\n-\t  inform (DECL_SOURCE_LOCATION (TYPE_MAIN_DECL (type)),\n-\t\t  \"%q#T has no user-provided default constructor\", type);\n-\t  defaulted_ctor = in_class_defaulted_default_constructor (type);\n-\t  if (defaulted_ctor)\n-\t    inform (DECL_SOURCE_LOCATION (defaulted_ctor),\n-\t\t    \"constructor is not user-provided because it is \"\n-\t\t    \"explicitly defaulted in the class body\");\n-\t  inform (DECL_SOURCE_LOCATION (field),\n-\t\t  \"and the implicitly-defined constructor does not \"\n-\t\t  \"initialize %q#D\",\n-\t\t  field);\n+\t  // tree defaulted_ctor;\n+\n+\t  // inform (DECL_SOURCE_LOCATION (TYPE_MAIN_DECL (type)),\n+\t  //         \"%q#T has no user-provided default constructor\", type);\n+\t  // defaulted_ctor = in_class_defaulted_default_constructor (type);\n+\t  // if (defaulted_ctor)\n+\t  //   inform (DECL_SOURCE_LOCATION (defaulted_ctor),\n+\t  //           \"constructor is not user-provided because it is \"\n+\t  //           \"explicitly defaulted in the class body\");\n+\t  // inform (DECL_SOURCE_LOCATION (field),\n+\t  //         \"and the implicitly-defined constructor does not \"\n+\t  //         \"initialize %q#D\",\n+\t  //         field);\n \t}\n \n       return false;\n@@ -3823,24 +3823,24 @@ strip_top_quals (tree t)\n \n /* Print an inform about the declaration of the incomplete type TYPE.  */\n \n-void\n-cxx_incomplete_type_inform (const_tree type)\n-{\n-  if (!TYPE_MAIN_DECL (type))\n-    return;\n-\n-  location_t loc = DECL_SOURCE_LOCATION (TYPE_MAIN_DECL (type));\n-  tree ptype = strip_top_quals (CONST_CAST_TREE (type));\n-\n-  if (current_class_type && TYPE_BEING_DEFINED (current_class_type)\n-      && same_type_p (ptype, current_class_type))\n-    inform (loc,\n-\t    \"definition of %q#T is not complete until \"\n-\t    \"the closing brace\",\n-\t    ptype);\n-  else\n-    inform (loc, \"forward declaration of %q#T\", ptype);\n-}\n+// void\n+// cxx_incomplete_type_inform (const_tree type)\n+// {\n+//   if (!TYPE_MAIN_DECL (type))\n+//     return;\n+\n+//   location_t loc = DECL_SOURCE_LOCATION (TYPE_MAIN_DECL (type));\n+//   tree ptype = strip_top_quals (CONST_CAST_TREE (type));\n+\n+//   if (current_class_type && TYPE_BEING_DEFINED (current_class_type)\n+//       && same_type_p (ptype, current_class_type))\n+//     inform (loc,\n+// \t    \"definition of %q#T is not complete until \"\n+// \t    \"the closing brace\",\n+// \t    ptype);\n+//   else\n+//     inform (loc, \"forward declaration of %q#T\", ptype);\n+// }\n \n // forked from gcc/cp/typeck2.cc cxx_incomplete_type_diagnostic\n \n@@ -3853,7 +3853,7 @@ void\n cxx_incomplete_type_diagnostic (location_t loc, const_tree value,\n \t\t\t\tconst_tree type, diagnostic_t diag_kind)\n {\n-  bool is_decl = false, complained = false;\n+  //  bool is_decl = false, complained = false;\n \n   gcc_assert (diag_kind == DK_WARNING || diag_kind == DK_PEDWARN\n \t      || diag_kind == DK_ERROR);\n@@ -3869,26 +3869,27 @@ cxx_incomplete_type_diagnostic (location_t loc, const_tree value,\n       if (VAR_P (value) || TREE_CODE (value) == PARM_DECL\n \t  || TREE_CODE (value) == FIELD_DECL)\n \t{\n-\t  complained = emit_diagnostic (diag_kind, DECL_SOURCE_LOCATION (value),\n-\t\t\t\t\t0, \"%qD has incomplete type\", value);\n-\t  is_decl = true;\n+\t  // complained = emit_diagnostic (diag_kind, DECL_SOURCE_LOCATION\n+\t  // (value),\n+\t  //       \t\t\t0, \"%qD has incomplete type\", value);\n+\t  // is_decl = true;\n \t}\n     }\n retry:\n   /* We must print an error message.  Be clever about what it says.  */\n \n   switch (TREE_CODE (type))\n     {\n-    case RECORD_TYPE:\n-    case UNION_TYPE:\n-    case ENUMERAL_TYPE:\n-      if (!is_decl)\n-\tcomplained\n-\t  = emit_diagnostic (diag_kind, loc, 0,\n-\t\t\t     \"invalid use of incomplete type %q#T\", type);\n-      if (complained)\n-\tcxx_incomplete_type_inform (type);\n-      break;\n+      // case RECORD_TYPE:\n+      // case UNION_TYPE:\n+      // case ENUMERAL_TYPE:\n+      //   if (!is_decl)\n+      //     complained\n+      //       = emit_diagnostic (diag_kind, loc, 0,\n+      //     \t\t     \"invalid use of incomplete type %q#T\", type);\n+      //   if (complained)\n+      //     cxx_incomplete_type_inform (type);\n+      //   break;\n \n     case VOID_TYPE:\n       emit_diagnostic (diag_kind, loc, 0, \"invalid use of %qT\", type);"}]}