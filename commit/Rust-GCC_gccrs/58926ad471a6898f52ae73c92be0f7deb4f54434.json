{"sha": "58926ad471a6898f52ae73c92be0f7deb4f54434", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg5MjZhZDQ3MWE2ODk4ZjUyYWU3M2M5MmJlMGY3ZGViNGY1NDQzNA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-11-11T22:09:40Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-11-11T22:09:40Z"}, "message": "re PR target/61535 (SIGBUS in gen_group_rtx compiling 64-bit gcc.dg/vect/vect-singleton_1.c)\n\n\tPR target/61535\n\t* config/sparc/sparc.c (function_arg_vector_value): Deal with vectors\n\tsmaller than 8 bytes.\n\t(sparc_function_arg_1): Tweak.\n\t(sparc_function_value_1): Tweak.\n\nFrom-SVN: r217377", "tree": {"sha": "b2642d33400ad1a5fe67dd7c1250ba2e037099b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2642d33400ad1a5fe67dd7c1250ba2e037099b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58926ad471a6898f52ae73c92be0f7deb4f54434", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58926ad471a6898f52ae73c92be0f7deb4f54434", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58926ad471a6898f52ae73c92be0f7deb4f54434", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58926ad471a6898f52ae73c92be0f7deb4f54434/comments", "author": null, "committer": null, "parents": [{"sha": "35485da996c21efc9a574520a737e10fcbeab654", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35485da996c21efc9a574520a737e10fcbeab654", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35485da996c21efc9a574520a737e10fcbeab654"}], "stats": {"total": 42, "additions": 25, "deletions": 17}, "files": [{"sha": "8c5122916cac0ba87a8105a402de07c40bd1b269", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58926ad471a6898f52ae73c92be0f7deb4f54434/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58926ad471a6898f52ae73c92be0f7deb4f54434/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58926ad471a6898f52ae73c92be0f7deb4f54434", "patch": "@@ -1,3 +1,11 @@\n+2014-11-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/61535\n+\t* config/sparc/sparc.c (function_arg_vector_value): Deal with vectors\n+\tsmaller than 8 bytes.\n+\t(sparc_function_arg_1): Tweak.\n+\t(sparc_function_value_1): Tweak.\n+\n 2014-11-11  David Malcolm  <dmalcolm@redhat.com>\n \n \t* ChangeLog.jit: New."}, {"sha": "ea4be8adf01426b9c6310ee413273d5d7db83716", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58926ad471a6898f52ae73c92be0f7deb4f54434/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58926ad471a6898f52ae73c92be0f7deb4f54434/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=58926ad471a6898f52ae73c92be0f7deb4f54434", "patch": "@@ -6819,28 +6819,30 @@ function_arg_union_value (int size, machine_mode mode, int slotno,\n }\n \n /* Used by function_arg and sparc_function_value_1 to implement the conventions\n-   for passing and returning large (BLKmode) vectors.\n+   for passing and returning BLKmode vectors.\n    Return an expression valid as a return value for the FUNCTION_ARG\n    and TARGET_FUNCTION_VALUE.\n \n-   SIZE is the size in bytes of the vector (at least 8 bytes).\n+   SIZE is the size in bytes of the vector.\n    REGNO is the FP hard register the vector will be passed in.  */\n \n static rtx\n function_arg_vector_value (int size, int regno)\n {\n-  int i, nregs = size / 8;\n-  rtx regs;\n-\n-  regs = gen_rtx_PARALLEL (BLKmode, rtvec_alloc (nregs));\n+  const int nregs = MAX (1, size / 8);\n+  rtx regs = gen_rtx_PARALLEL (BLKmode, rtvec_alloc (nregs));\n \n-  for (i = 0; i < nregs; i++)\n-    {\n+  if (size < 8)\n+    XVECEXP (regs, 0, 0)\n+      = gen_rtx_EXPR_LIST (VOIDmode,\n+\t\t\t   gen_rtx_REG (SImode, regno),\n+\t\t\t   const0_rtx);\n+  else\n+    for (int i = 0; i < nregs; i++)\n       XVECEXP (regs, 0, i)\n \t= gen_rtx_EXPR_LIST (VOIDmode,\n \t\t\t     gen_rtx_REG (DImode, regno + 2*i),\n \t\t\t     GEN_INT (i*8));\n-    }\n \n   return regs;\n }\n@@ -6886,10 +6888,9 @@ sparc_function_arg_1 (cumulative_args_t cum_v, machine_mode mode,\n \t\t  || (TARGET_ARCH64 && size <= 16));\n \n       if (mode == BLKmode)\n-\treturn function_arg_vector_value (size,\n-\t\t\t\t\t  SPARC_FP_ARG_FIRST + 2*slotno);\n-      else\n-\tmclass = MODE_FLOAT;\n+\treturn function_arg_vector_value (size, SPARC_FP_ARG_FIRST + 2*slotno);\n+\n+      mclass = MODE_FLOAT;\n     }\n \n   if (TARGET_ARCH32)\n@@ -7333,10 +7334,9 @@ sparc_function_value_1 (const_tree type, machine_mode mode,\n \t\t  || (TARGET_ARCH64 && size <= 32));\n \n       if (mode == BLKmode)\n-\treturn function_arg_vector_value (size,\n-\t\t\t\t\t  SPARC_FP_ARG_FIRST);\n-      else\n-\tmclass = MODE_FLOAT;\n+\treturn function_arg_vector_value (size, SPARC_FP_ARG_FIRST);\n+\n+      mclass = MODE_FLOAT;\n     }\n \n   if (TARGET_ARCH64 && type)"}]}