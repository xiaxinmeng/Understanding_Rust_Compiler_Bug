{"sha": "13fb3a61e748da7fa080a8228f0228ec2528116d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNmYjNhNjFlNzQ4ZGE3ZmEwODBhODIyOGYwMjI4ZWMyNTI4MTE2ZA==", "commit": {"author": {"name": "Bob Wilson", "email": "bob.wilson@acm.org", "date": "2003-08-11T17:47:19Z"}, "committer": {"name": "Bob Wilson", "email": "bwilson@gcc.gnu.org", "date": "2003-08-11T17:47:19Z"}, "message": "lib2funcs.S: Fix whitespace.\n\n        * config/xtensa/lib2funcs.S: Fix whitespace.\n        * config/xtensa/xtensa.md (all insns and expanders): Use brace block\n        syntax where appropriate.  Remove unnecessary backslash escapes.\n        Reformat comments and fix some code formatting.\n        (extendqisi2): Rearrange conditional.\n        (*btrue, *bfalse, *ubtrue, *ubfalse, *bittrue, *bitfalse, *masktrue,\n        *maskfalse, movsicc_internal0, movsfcc_internal0): Call abort instead\n        of fatal_insn.\n\nFrom-SVN: r70331", "tree": {"sha": "e4a0c45f71ab5f9240f91c20b08748299c2f0cfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4a0c45f71ab5f9240f91c20b08748299c2f0cfa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13fb3a61e748da7fa080a8228f0228ec2528116d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13fb3a61e748da7fa080a8228f0228ec2528116d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13fb3a61e748da7fa080a8228f0228ec2528116d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13fb3a61e748da7fa080a8228f0228ec2528116d/comments", "author": null, "committer": null, "parents": [{"sha": "f1d5187ef5fa21ca10b8bd2db61e4213fd8d0f55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1d5187ef5fa21ca10b8bd2db61e4213fd8d0f55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1d5187ef5fa21ca10b8bd2db61e4213fd8d0f55"}], "stats": {"total": 1117, "additions": 448, "deletions": 669}, "files": [{"sha": "2d7dabe507e1eb67ee80481f363d42dde794fc94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13fb3a61e748da7fa080a8228f0228ec2528116d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13fb3a61e748da7fa080a8228f0228ec2528116d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13fb3a61e748da7fa080a8228f0228ec2528116d", "patch": "@@ -1,3 +1,14 @@\n+2003-08-11  Bob Wilson  <bob.wilson@acm.org>\n+\n+\t* config/xtensa/lib2funcs.S: Fix whitespace.\n+\t* config/xtensa/xtensa.md (all insns and expanders): Use brace block\n+\tsyntax where appropriate.  Remove unnecessary backslash escapes.\n+\tReformat comments and fix some code formatting.\n+\t(extendqisi2): Rearrange conditional.\n+\t(*btrue, *bfalse, *ubtrue, *ubfalse, *bittrue, *bitfalse, *masktrue,\n+\t*maskfalse, movsicc_internal0, movsfcc_internal0): Call abort instead\n+\tof fatal_insn.\n+\n 2003-08-11  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.c: Various formatting fixes."}, {"sha": "80f5f0bcb483af1dcf4fde39119c345888d9837f", "filename": "gcc/config/xtensa/lib2funcs.S", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13fb3a61e748da7fa080a8228f0228ec2528116d/gcc%2Fconfig%2Fxtensa%2Flib2funcs.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13fb3a61e748da7fa080a8228f0228ec2528116d/gcc%2Fconfig%2Fxtensa%2Flib2funcs.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Flib2funcs.S?ref=13fb3a61e748da7fa080a8228f0228ec2528116d", "patch": "@@ -150,7 +150,7 @@ __xtensa_nonlocal_goto:\n    be touched by the trampoline.  An ISYNC instruction is also needed to\n    make sure that the modified instructions are loaded into the instruction\n    fetch buffer. */\n-\t\n+\n #define TRAMPOLINE_SIZE 59\n \n \t.text"}, {"sha": "01ec40d63a78931df3ad85c10f6291c93c84940b", "filename": "gcc/config/xtensa/xtensa.md", "status": "modified", "additions": 436, "deletions": 668, "changes": 1104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13fb3a61e748da7fa080a8228f0228ec2528116d/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13fb3a61e748da7fa080a8228f0228ec2528116d/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.md?ref=13fb3a61e748da7fa080a8228f0228ec2528116d", "patch": "@@ -19,13 +19,6 @@\n ;; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n ;; 02111-1307, USA.\n \n-;;\n-;; ....................\n-;;\n-;;\tCONSTANTS\n-;;\n-;; ....................\n-;;\n \n (define_constants [\n   (A0_REG\t\t0)\n@@ -41,13 +34,8 @@\n   (UNSPECV_ENTRY\t2)\n ])\n \n-;;\n-;; ....................\n-;;\n-;;\tATTRIBUTES\n-;;\n-;; ....................\n-;;\n+\f\n+;; Attributes.\n \n (define_attr \"type\"\n   \"unknown,jump,call,load,store,move,arith,multi,nop,farith,fmadd,fdiv,fsqrt,fconv,fload,fstore,mul16,mul32,div32,mac16,rsr,wsr\"\n@@ -63,14 +51,8 @@\n (define_asm_attributes\n   [(set_attr \"type\" \"multi\")])\n \n-\n-;;\n-;; ....................\n-;;\n-;;\tFUNCTIONAL UNITS\n-;;\n-;; ....................\n-;;\n+\f\n+;; Functional units.\n \n (define_function_unit \"memory\" 1 0 (eq_attr \"type\" \"load,fload\") 2 0)\n \n@@ -84,21 +66,14 @@\n \n (define_function_unit \"fpconv\" 1 0 (eq_attr \"type\" \"fconv\") 2 0)\n \n-\n-;;\n-;;  ....................\n-;;\n-;;\tADDITION\n-;;\n-;;  ....................\n-;;\n+\f\n+;; Addition.\n \n (define_expand \"adddi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t (match_operand:DI 2 \"register_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   rtx srclo;\n   rtx dstlo = gen_lowpart (SImode, operands[0]);\n@@ -125,7 +100,7 @@\n   emit_insn (gen_addsi3 (dsthi, src1hi, src2hi));\n   emit_insn (gen_adddi_carry (dsthi, dstlo, srclo));\n   DONE;\n-}\")\n+})\n \n ;; Represent the add-carry operation as an atomic operation instead of\n ;; expanding it to a conditional branch.  Otherwise, the edge\n@@ -138,7 +113,7 @@\n \t\t\t (match_operand:SI 2 \"register_operand\" \"r\"))\n \t\t (match_dup 0)))]\n   \"\"\n-  \"bgeu\\\\t%1, %2, 0f\\;addi\\\\t%0, %0, 1\\;0:\"\n+  \"bgeu\\t%1, %2, 0f\\;addi\\t%0, %0, 1\\;0:\"\n   [(set_attr \"type\"\t\"multi\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"6\")])\n@@ -149,11 +124,11 @@\n \t\t (match_operand:SI 2 \"add_operand\" \"d,O,r,J,N\")))]\n   \"\"\n   \"@\n-   add.n\\\\t%0, %1, %2\n-   addi.n\\\\t%0, %1, %d2\n-   add\\\\t%0, %1, %2\n-   addi\\\\t%0, %1, %d2\n-   addmi\\\\t%0, %1, %x2\"\n+   add.n\\t%0, %1, %2\n+   addi.n\\t%0, %1, %d2\n+   add\\t%0, %1, %2\n+   addi\\t%0, %1, %d2\n+   addmi\\t%0, %1, %x2\"\n   [(set_attr \"type\"\t\"arith,arith,arith,arith,arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"2,2,3,3,3\")])\n@@ -164,7 +139,7 @@\n \t\t\t  (const_int 2))\n \t\t (match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"TARGET_ADDX\"\n-  \"addx2\\\\t%0, %1, %2\"\n+  \"addx2\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n@@ -175,7 +150,7 @@\n \t\t\t  (const_int 4))\n \t\t (match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"TARGET_ADDX\"\n-  \"addx4\\\\t%0, %1, %2\"\n+  \"addx4\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n@@ -186,7 +161,7 @@\n \t\t\t  (const_int 8))\n \t\t (match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"TARGET_ADDX\"\n-  \"addx8\\\\t%0, %1, %2\"\n+  \"addx8\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n@@ -196,26 +171,19 @@\n \t(plus:SF (match_operand:SF 1 \"register_operand\" \"%f\")\n \t\t (match_operand:SF 2 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT\"\n-  \"add.s\\\\t%0, %1, %2\"\n+  \"add.s\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"fmadd\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"3\")])\n \n-\n-;;\n-;;  ....................\n-;;\n-;;\tSUBTRACTION\n-;;\n-;;  ....................\n-;;\n+\f\n+;; Subtraction.\n \n (define_expand \"subdi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(minus:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t  (match_operand:DI 2 \"register_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   rtx dstlo = gen_lowpart (SImode, operands[0]);\n   rtx src1lo = gen_lowpart (SImode, operands[1]);\n@@ -229,15 +197,15 @@\n   emit_insn (gen_subdi_carry (dsthi, src1lo, src2lo));\n   emit_insn (gen_subsi3 (dstlo, src1lo, src2lo));\n   DONE;\n-}\")\n+})\n \n (define_insn \"subdi_carry\"\n   [(set (match_operand:SI 0 \"register_operand\" \"+a\")\n \t(minus:SI (match_dup 0)\n \t\t  (ltu:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t  (match_operand:SI 2 \"register_operand\" \"r\"))))]\n   \"\"\n-  \"bgeu\\\\t%1, %2, 0f\\;addi\\\\t%0, %0, -1\\;0:\"\n+  \"bgeu\\t%1, %2, 0f\\;addi\\t%0, %0, -1\\;0:\"\n   [(set_attr \"type\"\t\"multi\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"6\")])\n@@ -247,7 +215,7 @@\n         (minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t  (match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"\"\n-  \"sub\\\\t%0, %1, %2\"\n+  \"sub\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n@@ -258,7 +226,7 @@\n \t\t\t   (const_int 2))\n \t\t  (match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"TARGET_ADDX\"\n-  \"subx2\\\\t%0, %1, %2\"\n+  \"subx2\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n@@ -269,7 +237,7 @@\n \t\t\t   (const_int 4))\n \t\t  (match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"TARGET_ADDX\"\n-  \"subx4\\\\t%0, %1, %2\"\n+  \"subx4\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n@@ -280,7 +248,7 @@\n \t\t\t   (const_int 8))\n \t\t  (match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"TARGET_ADDX\"\n-  \"subx8\\\\t%0, %1, %2\"\n+  \"subx8\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n@@ -290,26 +258,20 @@\n \t(minus:SF (match_operand:SF 1 \"register_operand\" \"f\")\n \t\t  (match_operand:SF 2 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT\"\n-  \"sub.s\\\\t%0, %1, %2\"\n+  \"sub.s\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"fmadd\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"3\")])\n \n-\n-;;\n-;;  ....................\n-;;\n-;;\tMULTIPLICATION\n-;;\n-;;  ....................\n-;;\n+\f\n+;; Multiplication.\n \n (define_insn \"mulsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(mult:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n \t\t (match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"TARGET_MUL32\"\n-  \"mull\\\\t%0, %1, %2\"\n+  \"mull\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"mul32\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n@@ -322,8 +284,8 @@\n \t\t  (match_operand:HI 2 \"register_operand\" \"r,r\"))))]\n   \"TARGET_MUL16 || TARGET_MAC16\"\n   \"@\n-   mul16s\\\\t%0, %1, %2\n-   mul.aa.ll\\\\t%1, %2\"\n+   mul16s\\t%0, %1, %2\n+   mul.aa.ll\\t%1, %2\"\n   [(set_attr \"type\"\t\"mul16,mac16\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3,3\")])\n@@ -336,8 +298,8 @@\n \t\t  (match_operand:HI 2 \"register_operand\" \"r,r\"))))]\n   \"TARGET_MUL16 || TARGET_MAC16\"\n   \"@\n-   mul16u\\\\t%0, %1, %2\n-   umul.aa.ll\\\\t%1, %2\"\n+   mul16u\\t%0, %1, %2\n+   umul.aa.ll\\t%1, %2\"\n   [(set_attr \"type\"\t\"mul16,mac16\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3,3\")])\n@@ -350,7 +312,7 @@\n \t\t\t   (match_operand:HI 2 \"register_operand\" \"r\")))\n \t\t (match_operand:SI 3 \"register_operand\" \"0\")))]\n   \"TARGET_MAC16\"\n-  \"mula.aa.ll\\\\t%1, %2\"\n+  \"mula.aa.ll\\t%1, %2\"\n   [(set_attr \"type\"\t\"mac16\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n@@ -363,7 +325,7 @@\n \t\t\t   (sign_extend:SI\n \t\t\t    (match_operand:HI 3 \"register_operand\" \"r\")))))]\n   \"TARGET_MAC16\"\n-  \"muls.aa.ll\\\\t%2, %3\"\n+  \"muls.aa.ll\\t%2, %3\"\n   [(set_attr \"type\"\t\"mac16\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n@@ -373,7 +335,7 @@\n \t(mult:SF (match_operand:SF 1 \"register_operand\" \"%f\")\n \t\t (match_operand:SF 2 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT\"\n-  \"mul.s\\\\t%0, %1, %2\"\n+  \"mul.s\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"fmadd\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"3\")])\n@@ -384,7 +346,7 @@\n \t\t\t  (match_operand:SF 2 \"register_operand\" \"f\"))\n \t\t (match_operand:SF 3 \"register_operand\" \"0\")))]\n   \"TARGET_HARD_FLOAT && !TARGET_NO_FUSED_MADD\"\n-  \"madd.s\\\\t%0, %1, %2\"\n+  \"madd.s\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"fmadd\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"3\")])\n@@ -395,26 +357,20 @@\n \t\t  (mult:SF (match_operand:SF 2 \"register_operand\" \"%f\")\n \t\t\t   (match_operand:SF 3 \"register_operand\" \"f\"))))]\n   \"TARGET_HARD_FLOAT && !TARGET_NO_FUSED_MADD\"\n-  \"msub.s\\\\t%0, %2, %3\"\n+  \"msub.s\\t%0, %2, %3\"\n   [(set_attr \"type\"\t\"fmadd\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"3\")])\n \n-\n-;;\n-;;  ....................\n-;;\n-;;\tDIVISION\n-;;\n-;;  ....................\n-;;\n+\f\n+;; Division.\n \n (define_insn \"divsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(div:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t(match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"TARGET_DIV32\"\n-  \"quos\\\\t%0, %1, %2\"\n+  \"quos\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"div32\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n@@ -424,7 +380,7 @@\n \t(udiv:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t (match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"TARGET_DIV32\"\n-  \"quou\\\\t%0, %1, %2\"\n+  \"quou\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"div32\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n@@ -434,7 +390,7 @@\n \t(div:SF (match_operand:SF 1 \"register_operand\" \"f\")\n \t\t(match_operand:SF 2 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT_DIV\"\n-  \"div.s\\\\t%0, %1, %2\"\n+  \"div.s\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"fdiv\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"3\")])\n@@ -444,26 +400,20 @@\n \t(div:SF (match_operand:SF 1 \"const_float_1_operand\" \"\")\n \t\t(match_operand:SF 2 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT_RECIP && flag_unsafe_math_optimizations\"\n-  \"recip.s\\\\t%0, %2\"\n+  \"recip.s\\t%0, %2\"\n   [(set_attr \"type\"\t\"fdiv\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"3\")])\n \n-\n-;;\n-;;  ....................\n-;;\n-;;\tREMAINDER\n-;;\n-;;  ....................\n-;;\n+\f\n+;; Remainders.\n \n (define_insn \"modsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(mod:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t(match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"TARGET_DIV32\"\n-  \"rems\\\\t%0, %1, %2\"\n+  \"rems\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"div32\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n@@ -473,25 +423,19 @@\n \t(umod:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t (match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"TARGET_DIV32\"\n-  \"remu\\\\t%0, %1, %2\"\n+  \"remu\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"div32\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n \n-\n-;;\n-;;  ....................\n-;;\n-;;\tSQUARE ROOT\n-;;\n-;;  ....................\n-;;\n+\f\n+;; Square roots.\n \n (define_insn \"sqrtsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(sqrt:SF (match_operand:SF 1 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT_SQRT\"\n-  \"sqrt.s\\\\t%0, %1\"\n+  \"sqrt.s\\t%0, %1\"\n   [(set_attr \"type\"\t\"fsqrt\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"3\")])\n@@ -501,25 +445,19 @@\n \t(div:SF (match_operand:SF 1 \"const_float_1_operand\" \"\")\n \t\t(sqrt:SF (match_operand:SF 2 \"register_operand\" \"f\"))))]\n   \"TARGET_HARD_FLOAT_RSQRT && flag_unsafe_math_optimizations\"\n-  \"rsqrt.s\\\\t%0, %2\"\n+  \"rsqrt.s\\t%0, %2\"\n   [(set_attr \"type\"\t\"fsqrt\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"3\")])\n \n-\n-;;\n-;;  ....................\n-;;\n-;;\tABSOLUTE VALUE\n-;;\n-;;  ....................\n-;;\n+\f\n+;; Absolute value.\n \n (define_insn \"abssi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(abs:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"TARGET_ABS\"\n-  \"abs\\\\t%0, %1\"\n+  \"abs\\t%0, %1\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n@@ -528,26 +466,20 @@\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(abs:SF (match_operand:SF 1 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT\"\n-  \"abs.s\\\\t%0, %1\"\n+  \"abs.s\\t%0, %1\"\n   [(set_attr \"type\"\t\"farith\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"3\")])\n \n-\n-;;\n-;;  ....................\n-;;\n-;;\tMIN AND MAX INSTRUCTIONS\n-;;\n-;;  ....................\n-;;\n+\f\n+;; Min and max.\n \n (define_insn \"sminsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n         (smin:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n                  (match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"TARGET_MINMAX\"\n-  \"min\\\\t%0, %1, %2\"\n+  \"min\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n@@ -557,7 +489,7 @@\n         (umin:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n                  (match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"TARGET_MINMAX\"\n-  \"minu\\\\t%0, %1, %2\"\n+  \"minu\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n@@ -567,7 +499,7 @@\n         (smax:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n                  (match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"TARGET_MINMAX\"\n-  \"max\\\\t%0, %1, %2\"\n+  \"max\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n@@ -577,25 +509,18 @@\n         (umax:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n                  (match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"TARGET_MINMAX\"\n-  \"maxu\\\\t%0, %1, %2\"\n+  \"maxu\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n \n-\n-;;\n-;;  ....................\n-;;\n-;;\tFIND FIRST BIT INSTRUCTION\n-;;\n-;;  ....................\n-;;\n+\f\n+;; Find first bit.\n \n (define_expand \"ffssi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(ffs:SI (match_operand:SI 1 \"register_operand\" \"\")))]\n   \"TARGET_NSA\"\n-  \"\n {\n   rtx temp = gen_reg_rtx (SImode);\n   emit_insn (gen_negsi2 (temp, operands[1]));\n@@ -604,32 +529,26 @@\n   emit_insn (gen_negsi2 (temp, temp));\n   emit_insn (gen_addsi3 (operands[0], temp, GEN_INT (32)));\n   DONE;\n-}\")\n+})\n \n-;; there is no RTL operator corresponding to NSAU\n+;; There is no RTL operator corresponding to NSAU.\n (define_insn \"nsau\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")] UNSPEC_NSAU))]\n   \"TARGET_NSA\"\n-  \"nsau\\\\t%0, %1\"\n+  \"nsau\\t%0, %1\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n \n-\n-;;\n-;;  ....................\n-;;\n-;;\tNEGATION and ONE'S COMPLEMENT\n-;;\n-;;  ....................\n-;;\n+\f\n+;; Negation and one's complement.\n \n (define_insn \"negsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(neg:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"\"\n-  \"neg\\\\t%0, %1\"\n+  \"neg\\t%0, %1\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n@@ -638,40 +557,33 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(not:SI (match_operand:SI 1 \"register_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   rtx temp = gen_reg_rtx (SImode);\n   emit_insn (gen_movsi (temp, constm1_rtx));\n   emit_insn (gen_xorsi3 (operands[0], temp, operands[1]));\n   DONE;\n-}\")\n+})\n \n (define_insn \"negsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(neg:SF (match_operand:SF 1 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT\"\n-  \"neg.s\\\\t%0, %1\"\n+  \"neg.s\\t%0, %1\"\n   [(set_attr \"type\"\t\"farith\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"3\")])\n \n-\n-;;\n-;;  ....................\n-;;\n-;;\tLOGICAL\n-;;\n-;;  ....................\n-;;\n+\f\n+;; Logical instructions.\n \n (define_insn \"andsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a,a\")\n \t(and:SI (match_operand:SI 1 \"register_operand\" \"%r,r\")\n \t\t(match_operand:SI 2 \"mask_operand\" \"P,r\")))]\n   \"\"\n   \"@\n-   extui\\\\t%0, %1, 0, %K2\n-   and\\\\t%0, %1, %2\"\n+   extui\\t%0, %1, 0, %K2\n+   and\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"arith,arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3,3\")])\n@@ -681,7 +593,7 @@\n \t(ior:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n \t\t(match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"\"\n-  \"or\\\\t%0, %1, %2\"\n+  \"or\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n@@ -691,27 +603,21 @@\n \t(xor:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n \t\t(match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"\"\n-  \"xor\\\\t%0, %1, %2\"\n+  \"xor\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n \n-\n-;;\n-;;  ....................\n-;;\n-;;\tZERO EXTENSION\n-;;\n-;;  ....................\n-;;\n+\f\n+;; Zero-extend instructions.\n \n (define_insn \"zero_extendhisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a,a\")\n \t(zero_extend:SI (match_operand:HI 1 \"nonimmed_operand\" \"r,U\")))]\n   \"\"\n   \"@\n-   extui\\\\t%0, %1, 0, 16\n-   l16ui\\\\t%0, %1\"\n+   extui\\t%0, %1, 0, 16\n+   l16ui\\t%0, %1\"\n   [(set_attr \"type\"\t\"arith,load\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3,3\")])\n@@ -721,41 +627,34 @@\n \t(zero_extend:SI (match_operand:QI 1 \"nonimmed_operand\" \"r,U\")))]\n   \"\"\n   \"@\n-   extui\\\\t%0, %1, 0, 8\n-   l8ui\\\\t%0, %1\"\n+   extui\\t%0, %1, 0, 8\n+   l8ui\\t%0, %1\"\n   [(set_attr \"type\"\t\"arith,load\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3,3\")])\n \n-\n-;;\n-;;  ....................\n-;;\n-;;\tSIGN EXTENSION\n-;;\n-;;  ....................\n-;;\n+\f\n+;; Sign-extend instructions.\n \n (define_expand \"extendhisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(sign_extend:SI (match_operand:HI 1 \"register_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   if (sext_operand (operands[1], HImode))\n     emit_insn (gen_extendhisi2_internal (operands[0], operands[1]));\n   else\n     xtensa_extend_reg (operands[0], operands[1]);\n   DONE;\n-}\")\n+})\n \n (define_insn \"extendhisi2_internal\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=B,a\")\n \t(sign_extend:SI (match_operand:HI 1 \"sext_operand\" \"r,U\")))]\n   \"\"\n   \"@\n-   sext\\\\t%0, %1, 15\n-   l16si\\\\t%0, %1\"\n+   sext\\t%0, %1, 15\n+   l16si\\t%0, %1\"\n   [(set_attr \"type\"\t\"arith,load\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3,3\")])\n@@ -764,64 +663,57 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(sign_extend:SI (match_operand:QI 1 \"register_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   if (TARGET_SEXT)\n-    {\n-      emit_insn (gen_extendqisi2_internal (operands[0], operands[1]));\n-      DONE;\n-    }\n-  xtensa_extend_reg (operands[0], operands[1]);\n+    emit_insn (gen_extendqisi2_internal (operands[0], operands[1]));\n+  else\n+    xtensa_extend_reg (operands[0], operands[1]);\n   DONE;\n-}\")\n+})\n \n (define_insn \"extendqisi2_internal\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=B\")\n \t(sign_extend:SI (match_operand:QI 1 \"register_operand\" \"r\")))]\n   \"TARGET_SEXT\"\n-  \"sext\\\\t%0, %1, 7\"\n+  \"sext\\t%0, %1, 7\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n \n-\n-;;\n-;;  ....................\n-;;\n-;;\tFIELD EXTRACT\n-;;\n-;;  ....................\n-;;\n+\f\n+;; Field extract instructions.\n \n (define_expand \"extv\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(sign_extract:SI (match_operand:SI 1 \"register_operand\" \"\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"\")\n \t\t\t (match_operand:SI 3 \"const_int_operand\" \"\")))]\n   \"TARGET_SEXT\"\n-  \"\n {\n-  if (!sext_fldsz_operand (operands[2], SImode)) FAIL;\n-  /* we could expand to a right shift followed by sext but that's\n-     no better than the standard left and right shift sequence */\n-  if (!lsbitnum_operand (operands[3], SImode)) FAIL;\n+  if (!sext_fldsz_operand (operands[2], SImode))\n+    FAIL;\n+\n+  /* We could expand to a right shift followed by SEXT but that's\n+     no better than the standard left and right shift sequence.  */\n+  if (!lsbitnum_operand (operands[3], SImode))\n+    FAIL;\n+\n   emit_insn (gen_extv_internal (operands[0], operands[1],\n \t\t\t\toperands[2], operands[3]));\n   DONE;\n-}\")\n+})\n \n (define_insn \"extv_internal\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(sign_extract:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t (match_operand:SI 2 \"sext_fldsz_operand\" \"i\")\n \t\t\t (match_operand:SI 3 \"lsbitnum_operand\" \"i\")))]\n   \"TARGET_SEXT\"\n-  \"*\n {\n   int fldsz = INTVAL (operands[2]);\n   operands[2] = GEN_INT (fldsz - 1);\n-  return \\\"sext\\\\t%0, %1, %2\\\";\n-}\"\n+  return \"sext\\t%0, %1, %2\";\n+}\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n@@ -832,48 +724,41 @@\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"\")\n \t\t\t (match_operand:SI 3 \"const_int_operand\" \"\")))]\n   \"\"\n-  \"\n {\n-  if (!extui_fldsz_operand (operands[2], SImode)) FAIL;\n+  if (!extui_fldsz_operand (operands[2], SImode))\n+    FAIL;\n   emit_insn (gen_extzv_internal (operands[0], operands[1],\n \t\t\t\t operands[2], operands[3]));\n   DONE;\n-}\")\n+})\n \n (define_insn \"extzv_internal\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t (match_operand:SI 2 \"extui_fldsz_operand\" \"i\")\n \t\t\t (match_operand:SI 3 \"const_int_operand\" \"i\")))]\n   \"\"\n-  \"*\n {\n   int shift;\n   if (BITS_BIG_ENDIAN)\n     shift = (32 - (INTVAL (operands[2]) + INTVAL (operands[3]))) & 0x1f;\n   else\n     shift = INTVAL (operands[3]) & 0x1f;\n   operands[3] = GEN_INT (shift);\n-  return \\\"extui\\\\t%0, %1, %3, %2\\\";\n-}\"\n+  return \"extui\\t%0, %1, %3, %2\";\n+}\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n \n-\n-;;\n-;;  ....................\n-;;\n-;;\tCONVERSIONS\n-;;\n-;;  ....................\n-;;\n+\f\n+;; Conversions.\n \n (define_insn \"fix_truncsfsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(fix:SI (match_operand:SF 1 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT\"\n-  \"trunc.s\\\\t%0, %1, 0\"\n+  \"trunc.s\\t%0, %1, 0\"\n   [(set_attr \"type\"\t\"fconv\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"3\")])\n@@ -882,7 +767,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(unsigned_fix:SI (match_operand:SF 1 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT\"\n-  \"utrunc.s %0, %1, 0\"\n+  \"utrunc.s\\t%0, %1, 0\"\n   [(set_attr \"type\"\t\"fconv\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"3\")])\n@@ -891,7 +776,7 @@\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(float:SF (match_operand:SI 1 \"register_operand\" \"a\")))]\n   \"TARGET_HARD_FLOAT\"\n-  \"float.s\\\\t%0, %1, 0\"\n+  \"float.s\\t%0, %1, 0\"\n   [(set_attr \"type\"\t\"fconv\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"3\")])\n@@ -900,27 +785,20 @@\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(unsigned_float:SF (match_operand:SI 1 \"register_operand\" \"a\")))]\n   \"TARGET_HARD_FLOAT\"\n-  \"ufloat.s %0, %1, 0\"\n+  \"ufloat.s\\t%0, %1, 0\"\n   [(set_attr \"type\"\t\"fconv\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"3\")])\n \n-\n-;;\n-;;  ....................\n-;;\n-;;\tDATA MOVEMENT\n-;;\n-;;  ....................\n-;;\n+\f\n+;; Data movement instructions.\n \n ;; 64-bit Integer moves\n \n (define_expand \"movdi\"\n   [(set (match_operand:DI 0 \"nonimmed_operand\" \"\")\n \t(match_operand:DI 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\n {\n   if (CONSTANT_P (operands[1]) && !TARGET_CONST16)\n     operands[1] = force_const_mem (DImode, operands[1]);\n@@ -931,7 +809,7 @@\n \n   if (xtensa_copy_incoming_a7 (operands, DImode))\n     DONE;\n-}\")\n+})\n \n (define_insn_and_split \"movdi_internal\"\n   [(set (match_operand:DI 0 \"nonimmed_operand\" \"=a,W,a,a,U\")\n@@ -952,39 +830,37 @@\n     }\n })\n \n-\n ;; 32-bit Integer moves\n \n (define_expand \"movsi\"\n   [(set (match_operand:SI 0 \"nonimmed_operand\" \"\")\n \t(match_operand:SI 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\n {\n   if (xtensa_emit_move_sequence (operands, SImode))\n     DONE;\n-}\")\n+})\n \n (define_insn \"movsi_internal\"\n   [(set (match_operand:SI 0 \"nonimmed_operand\" \"=D,D,D,D,R,R,a,q,a,W,a,a,U,*a,*A\")\n \t(match_operand:SI 1 \"move_operand\" \"M,D,d,R,D,d,r,r,I,i,T,U,r,*A,*r\"))]\n   \"xtensa_valid_move (SImode, operands)\"\n   \"@\n-   movi.n\\\\t%0, %x1\n-   mov.n\\\\t%0, %1\n-   mov.n\\\\t%0, %1\n-   %v1l32i.n\\\\t%0, %1\n-   %v0s32i.n\\\\t%1, %0\n-   %v0s32i.n\\\\t%1, %0\n-   mov\\\\t%0, %1\n-   movsp\\\\t%0, %1\n-   movi\\\\t%0, %x1\n-   const16\\\\t%0, %t1\\;const16\\\\t%0, %b1\n-   %v1l32r\\\\t%0, %1\n-   %v1l32i\\\\t%0, %1\n-   %v0s32i\\\\t%1, %0\n-   rsr\\\\t%0, 16 # ACCLO\n-   wsr\\\\t%1, 16 # ACCLO\"\n+   movi.n\\t%0, %x1\n+   mov.n\\t%0, %1\n+   mov.n\\t%0, %1\n+   %v1l32i.n\\t%0, %1\n+   %v0s32i.n\\t%1, %0\n+   %v0s32i.n\\t%1, %0\n+   mov\\t%0, %1\n+   movsp\\t%0, %1\n+   movi\\t%0, %x1\n+   const16\\t%0, %t1\\;const16\\t%0, %b1\n+   %v1l32r\\t%0, %1\n+   %v1l32i\\t%0, %1\n+   %v0s32i\\t%1, %0\n+   rsr\\t%0, 16 # ACCLO\n+   wsr\\t%1, 16 # ACCLO\"\n   [(set_attr \"type\" \"move,move,move,load,store,store,move,move,move,move,load,load,store,rsr,wsr\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"2,2,2,2,2,2,3,3,3,6,3,3,3,3,3\")])\n@@ -995,25 +871,24 @@\n   [(set (match_operand:HI 0 \"nonimmed_operand\" \"\")\n \t(match_operand:HI 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\n {\n   if (xtensa_emit_move_sequence (operands, HImode))\n     DONE;\n-}\")\n+})\n \n (define_insn \"movhi_internal\"\n   [(set (match_operand:HI 0 \"nonimmed_operand\" \"=D,D,a,a,a,U,*a,*A\")\n \t(match_operand:HI 1 \"move_operand\" \"M,d,r,I,U,r,*A,*r\"))]\n   \"xtensa_valid_move (HImode, operands)\"\n   \"@\n-   movi.n\\\\t%0, %x1\n-   mov.n\\\\t%0, %1\n-   mov\\\\t%0, %1\n-   movi\\\\t%0, %x1\n-   %v1l16ui\\\\t%0, %1\n-   %v0s16i\\\\t%1, %0\n-   rsr\\\\t%0, 16 # ACCLO\n-   wsr\\\\t%1, 16 # ACCLO\"\n+   movi.n\\t%0, %x1\n+   mov.n\\t%0, %1\n+   mov\\t%0, %1\n+   movi\\t%0, %x1\n+   %v1l16ui\\t%0, %1\n+   %v0s16i\\t%1, %0\n+   rsr\\t%0, 16 # ACCLO\n+   wsr\\t%1, 16 # ACCLO\"\n   [(set_attr \"type\"\t\"move,move,move,move,load,store,rsr,wsr\")\n    (set_attr \"mode\"\t\"HI\")\n    (set_attr \"length\"\t\"2,2,3,3,3,3,3,3\")])\n@@ -1024,25 +899,24 @@\n   [(set (match_operand:QI 0 \"nonimmed_operand\" \"\")\n \t(match_operand:QI 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\n {\n   if (xtensa_emit_move_sequence (operands, QImode))\n     DONE;\n-}\")\n+})\n \n (define_insn \"movqi_internal\"\n   [(set (match_operand:QI 0 \"nonimmed_operand\" \"=D,D,a,a,a,U,*a,*A\")\n \t(match_operand:QI 1 \"move_operand\" \"M,d,r,I,U,r,*A,*r\"))]\n   \"xtensa_valid_move (QImode, operands)\"\n   \"@\n-   movi.n\\\\t%0, %x1\n-   mov.n\\\\t%0, %1\n-   mov\\\\t%0, %1\n-   movi\\\\t%0, %x1\n-   %v1l8ui\\\\t%0, %1\n-   %v0s8i\\\\t%1, %0\n-   rsr\\\\t%0, 16 # ACCLO\n-   wsr\\\\t%1, 16 # ACCLO\"\n+   movi.n\\t%0, %x1\n+   mov.n\\t%0, %1\n+   mov\\t%0, %1\n+   movi\\t%0, %x1\n+   %v1l8ui\\t%0, %1\n+   %v0s8i\\t%1, %0\n+   rsr\\t%0, 16 # ACCLO\n+   wsr\\t%1, 16 # ACCLO\"\n   [(set_attr \"type\"\t\"move,move,move,move,load,store,rsr,wsr\")\n    (set_attr \"mode\"\t\"QI\")\n    (set_attr \"length\"\t\"2,2,3,3,3,3,3,3\")])\n@@ -1053,7 +927,6 @@\n   [(set (match_operand:SF 0 \"nonimmed_operand\" \"\")\n \t(match_operand:SF 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\n {\n   if (!TARGET_CONST16 && CONSTANT_P (operands[1]))\n     operands[1] = force_const_mem (SFmode, operands[1]);\n@@ -1070,7 +943,7 @@\n       if (xtensa_copy_incoming_a7 (operands, SFmode))\n \tDONE;\n     }\n-}\")\n+})\n \n (define_insn \"movsf_internal\"\n   [(set (match_operand:SF 0 \"nonimmed_operand\" \"=f,f,U,D,D,R,a,f,a,W,a,a,U\")\n@@ -1080,19 +953,19 @@\n     && !(FP_REG_P (xt_true_regnum (operands[0]))\n          && (constantpool_mem_p (operands[1]) || CONSTANT_P (operands[1]))))\"\n   \"@\n-   mov.s\\\\t%0, %1\n-   %v1lsi\\\\t%0, %1\n-   %v0ssi\\\\t%1, %0\n-   mov.n\\\\t%0, %1\n-   %v1l32i.n\\\\t%0, %1\n-   %v0s32i.n\\\\t%1, %0\n-   mov\\\\t%0, %1\n-   wfr\\\\t%0, %1\n-   rfr\\\\t%0, %1\n-   const16\\\\t%0, %t1\\;const16\\\\t%0, %b1\n-   %v1l32r\\\\t%0, %1\n-   %v1l32i\\\\t%0, %1\n-   %v0s32i\\\\t%1, %0\"\n+   mov.s\\t%0, %1\n+   %v1lsi\\t%0, %1\n+   %v0ssi\\t%1, %0\n+   mov.n\\t%0, %1\n+   %v1l32i.n\\t%0, %1\n+   %v0s32i.n\\t%1, %0\n+   mov\\t%0, %1\n+   wfr\\t%0, %1\n+   rfr\\t%0, %1\n+   const16\\t%0, %t1\\;const16\\t%0, %b1\n+   %v1l32r\\t%0, %1\n+   %v1l32i\\t%0, %1\n+   %v0s32i\\t%1, %0\"\n   [(set_attr \"type\"\t\"farith,fload,fstore,move,load,store,move,farith,farith,move,load,load,store\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"3,3,3,2,2,2,3,3,3,6,3,3,3\")])\n@@ -1104,12 +977,11 @@\n    (set (match_dup 1)\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_HARD_FLOAT\"\n-  \"*\n {\n   if (volatile_refs_p (PATTERN (insn)))\n-    output_asm_insn (\\\"memw\\\", operands);\n-  return \\\"lsiu\\\\t%0, %1, %2\\\";\n-}\"\n+    output_asm_insn (\"memw\", operands);\n+  return \"lsiu\\t%0, %1, %2\";\n+}\n   [(set_attr \"type\"\t\"fload\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"3\")])\n@@ -1121,12 +993,11 @@\n    (set (match_dup 0)\n \t(plus:SI (match_dup 0) (match_dup 1)))]\n   \"TARGET_HARD_FLOAT\"\n-  \"*\n {\n   if (volatile_refs_p (PATTERN (insn)))\n-    output_asm_insn (\\\"memw\\\", operands);\n-  return \\\"ssiu\\\\t%2, %0, %1\\\";\n-}\"\n+    output_asm_insn (\"memw\", operands);\n+  return \"ssiu\\t%2, %0, %1\";\n+}\n   [(set_attr \"type\"\t\"fstore\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"3\")])\n@@ -1137,7 +1008,6 @@\n   [(set (match_operand:DF 0 \"nonimmed_operand\" \"\")\n \t(match_operand:DF 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"\n {\n   if (CONSTANT_P (operands[1]) && !TARGET_CONST16)\n     operands[1] = force_const_mem (DFmode, operands[1]);\n@@ -1148,7 +1018,7 @@\n \n   if (xtensa_copy_incoming_a7 (operands, DFmode))\n     DONE;\n-}\")\n+})\n \n (define_insn_and_split \"movdf_internal\"\n   [(set (match_operand:DF 0 \"nonimmed_operand\" \"=a,W,a,a,U\")\n@@ -1168,7 +1038,6 @@\n       tmp = operands[2], operands[2] = operands[3], operands[3] = tmp;\n     }\n })\n- \n \n ;; Block moves\n \n@@ -1178,11 +1047,11 @@\n \t      (use (match_operand:SI 2 \"arith_operand\" \"\"))\n \t      (use (match_operand:SI 3 \"const_int_operand\" \"\"))])]\n   \"\"\n-  \"\n {\n-  if (!xtensa_expand_block_move (operands)) FAIL;\n+  if (!xtensa_expand_block_move (operands))\n+    FAIL;\n   DONE;\n-}\")\n+})\n \n (define_insn \"movstrsi_internal\"\n   [(set (match_operand:BLK 0 \"memory_operand\" \"=U\")\n@@ -1192,35 +1061,28 @@\n    (clobber (match_scratch:SI 4 \"=&r\"))\n    (clobber (match_scratch:SI 5 \"=&r\"))]\n   \"\"\n-  \"*\n {\n   rtx tmpregs[2];\n   tmpregs[0] = operands[4];\n   tmpregs[1] = operands[5];\n   xtensa_emit_block_move (operands, tmpregs, 1);\n-  return \\\"\\\";\n-}\"\n+  return \"\";\n+}\n   [(set_attr \"type\"\t\"multi\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"300\")])\n \n-\n-;;\n-;;  ....................\n-;;\n-;;\tSHIFTS\n-;;\n-;;  ....................\n-;;\n+\f\n+;; Shift instructions.\n \n (define_insn \"ashlsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a,a\")\n \t(ashift:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n \t\t   (match_operand:SI 2 \"arith_operand\" \"J,r\")))]\n   \"\"      \n   \"@\n-   slli\\\\t%0, %1, %R2\n-   ssl\\\\t%2\\;sll\\\\t%0, %1\"\n+   slli\\t%0, %1, %R2\n+   ssl\\t%2\\;sll\\t%0, %1\"\n   [(set_attr \"type\"\t\"arith,arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3,6\")])\n@@ -1231,8 +1093,8 @@\n \t\t     (match_operand:SI 2 \"arith_operand\" \"J,r\")))]\n   \"\"\n   \"@\n-   srai\\\\t%0, %1, %R2\n-   ssr\\\\t%2\\;sra\\\\t%0, %1\"\n+   srai\\t%0, %1, %R2\n+   ssr\\t%2\\;sra\\t%0, %1\"\n   [(set_attr \"type\"\t\"arith,arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3,6\")])\n@@ -1242,17 +1104,16 @@\n \t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n \t\t     (match_operand:SI 2 \"arith_operand\" \"J,r\")))]\n   \"\"\n-  \"*\n {\n   if (which_alternative == 0)\n     {\n       if ((INTVAL (operands[2]) & 0x1f) < 16)\n-        return \\\"srli\\\\t%0, %1, %R2\\\";\n+        return \"srli\\t%0, %1, %R2\";\n       else\n-      \treturn \\\"extui\\\\t%0, %1, %R2, %L2\\\";\n+      \treturn \"extui\\t%0, %1, %R2, %L2\";\n     }\n-  return \\\"ssr\\\\t%2\\;srl\\\\t%0, %1\\\";\n-}\"\n+  return \"ssr\\t%2\\;srl\\t%0, %1\";\n+}\n   [(set_attr \"type\"\t\"arith,arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3,6\")])\n@@ -1263,8 +1124,8 @@\n \t\t     (match_operand:SI 2 \"arith_operand\" \"J,r\")))]\n   \"\"\n   \"@\n-   ssai\\\\t%L2\\;src\\\\t%0, %1, %1\n-   ssl\\\\t%2\\;src\\\\t%0, %1, %1\"\n+   ssai\\t%L2\\;src\\t%0, %1, %1\n+   ssl\\t%2\\;src\\t%0, %1, %1\"\n   [(set_attr \"type\"\t\"multi,multi\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"6,6\")])\n@@ -1275,191 +1136,165 @@\n \t\t     (match_operand:SI 2 \"arith_operand\" \"J,r\")))]\n   \"\"\n   \"@\n-   ssai\\\\t%R2\\;src\\\\t%0, %1, %1\n-   ssr\\\\t%2\\;src\\\\t%0, %1, %1\"\n+   ssai\\t%R2\\;src\\t%0, %1, %1\n+   ssr\\t%2\\;src\\t%0, %1, %1\"\n   [(set_attr \"type\"\t\"multi,multi\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"6,6\")])\n \n+\f\n+;; Comparisons.\n \n-;;\n-;;  ....................\n-;;\n-;;\tCOMPARISONS\n-;;\n-;;  ....................\n-;;\n-\n-;; Like the md files for MIPS and SPARC, we handle comparisons by stashing\n-;; away the operands and then using that information in the subsequent\n-;; conditional branch.\n+;; Handle comparisons by stashing away the operands and then using that\n+;; information in the subsequent conditional branch.\n \n (define_expand \"cmpsi\"\n   [(set (cc0)\n \t(compare:CC (match_operand:SI 0 \"register_operand\" \"\")\n \t\t    (match_operand:SI 1 \"nonmemory_operand\" \"\")))]\n   \"\"\n-  \"\n {\n   branch_cmp[0] = operands[0];\n   branch_cmp[1] = operands[1];\n   branch_type = CMP_SI;\n   DONE;\n-}\")\n+})\n \n (define_expand \"tstsi\"\n   [(set (cc0)\n \t(match_operand:SI 0 \"register_operand\" \"\"))]\n   \"\"\n-  \"\n {\n   branch_cmp[0] = operands[0];\n   branch_cmp[1] = const0_rtx;\n   branch_type = CMP_SI;\n   DONE;\n-}\")\n+})\n \n (define_expand \"cmpsf\"\n   [(set (cc0)\n \t(compare:CC (match_operand:SF 0 \"register_operand\" \"\")\n \t\t    (match_operand:SF 1 \"register_operand\" \"\")))]\n   \"TARGET_HARD_FLOAT\"\n-  \"\n {\n   branch_cmp[0] = operands[0];\n   branch_cmp[1] = operands[1];\n   branch_type = CMP_SF;\n   DONE;\n-}\")\n-\n+})\n \n-;;\n-;;  ....................\n-;;\n-;;\tCONDITIONAL BRANCHES\n-;;\n-;;  ....................\n-;;\n+\f\n+;; Conditional branches.\n \n (define_expand \"beq\"\n   [(set (pc)\n \t(if_then_else (eq (cc0) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n {\n   xtensa_expand_conditional_branch (operands, EQ);\n   DONE;\n-}\")\n+})\n \n (define_expand \"bne\"\n   [(set (pc)\n \t(if_then_else (ne (cc0) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n {\n   xtensa_expand_conditional_branch (operands, NE);\n   DONE;\n-}\")\n+})\n \n (define_expand \"bgt\"\n   [(set (pc)\n \t(if_then_else (gt (cc0) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n {\n   xtensa_expand_conditional_branch (operands, GT);\n   DONE;\n-}\")\n+})\n \n (define_expand \"bge\"\n   [(set (pc)\n \t(if_then_else (ge (cc0) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n {\n   xtensa_expand_conditional_branch (operands, GE);\n   DONE;\n-}\")\n+})\n \n (define_expand \"blt\"\n   [(set (pc)\n \t(if_then_else (lt (cc0) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n {\n   xtensa_expand_conditional_branch (operands, LT);\n   DONE;\n-}\")\n+})\n \n (define_expand \"ble\"\n   [(set (pc)\n \t(if_then_else (le (cc0) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n {\n   xtensa_expand_conditional_branch (operands, LE);\n   DONE;\n-}\")\n+})\n \n (define_expand \"bgtu\"\n   [(set (pc)\n \t(if_then_else (gtu (cc0) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n {\n   xtensa_expand_conditional_branch (operands, GTU);\n   DONE;\n-}\")\n+})\n \n (define_expand \"bgeu\"\n   [(set (pc)\n \t(if_then_else (geu (cc0) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n {\n   xtensa_expand_conditional_branch (operands, GEU);\n   DONE;\n-}\")\n+})\n \n (define_expand \"bltu\"\n   [(set (pc)\n \t(if_then_else (ltu (cc0) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n {\n   xtensa_expand_conditional_branch (operands, LTU);\n   DONE;\n-}\")\n+})\n \n (define_expand \"bleu\"\n   [(set (pc)\n \t(if_then_else (leu (cc0) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"\n {\n   xtensa_expand_conditional_branch (operands, LEU);\n   DONE;\n-}\")\n+})\n \n ;; Branch patterns for standard integer comparisons\n \n@@ -1471,16 +1306,15 @@\n \t\t      (label_ref (match_operand 2 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"*\n {\n   if (which_alternative == 1)\n     {\n       switch (GET_CODE (operands[3]))\n \t{\n-\tcase EQ:\treturn \\\"beq\\\\t%0, %1, %2\\\";\n-\tcase NE:\treturn \\\"bne\\\\t%0, %1, %2\\\";\n-\tcase LT:\treturn \\\"blt\\\\t%0, %1, %2\\\";\n-\tcase GE:\treturn \\\"bge\\\\t%0, %1, %2\\\";\n+\tcase EQ:\treturn \"beq\\t%0, %1, %2\";\n+\tcase NE:\treturn \"bne\\t%0, %1, %2\";\n+\tcase LT:\treturn \"blt\\t%0, %1, %2\";\n+\tcase GE:\treturn \"bge\\t%0, %1, %2\";\n \tdefault:\tbreak;\n \t}\n     }\n@@ -1489,30 +1323,30 @@\n       switch (GET_CODE (operands[3]))\n \t{\n \tcase EQ:\treturn (TARGET_DENSITY\n-\t\t\t\t? \\\"beqz.n\\\\t%0, %2\\\"\n-\t\t\t\t: \\\"beqz\\\\t%0, %2\\\");\n+\t\t\t\t? \"beqz.n\\t%0, %2\"\n+\t\t\t\t: \"beqz\\t%0, %2\");\n \tcase NE:\treturn (TARGET_DENSITY\n-\t\t\t\t? \\\"bnez.n\\\\t%0, %2\\\"\n-\t\t\t\t: \\\"bnez\\\\t%0, %2\\\");\n-\tcase LT:\treturn \\\"bltz\\\\t%0, %2\\\";\n-\tcase GE:\treturn \\\"bgez\\\\t%0, %2\\\";\n+\t\t\t\t? \"bnez.n\\t%0, %2\"\n+\t\t\t\t: \"bnez\\t%0, %2\");\n+\tcase LT:\treturn \"bltz\\t%0, %2\";\n+\tcase GE:\treturn \"bgez\\t%0, %2\";\n \tdefault:\tbreak;\n \t}\n     }\n   else\n     {\n       switch (GET_CODE (operands[3]))\n \t{\n-\tcase EQ:\treturn \\\"beqi\\\\t%0, %d1, %2\\\";\n-\tcase NE:\treturn \\\"bnei\\\\t%0, %d1, %2\\\";\n-\tcase LT:\treturn \\\"blti\\\\t%0, %d1, %2\\\";\n-\tcase GE:\treturn \\\"bgei\\\\t%0, %d1, %2\\\";\n+\tcase EQ:\treturn \"beqi\\t%0, %d1, %2\";\n+\tcase NE:\treturn \"bnei\\t%0, %d1, %2\";\n+\tcase LT:\treturn \"blti\\t%0, %d1, %2\";\n+\tcase GE:\treturn \"bgei\\t%0, %d1, %2\";\n \tdefault:\tbreak;\n \t}\n     }\n-  fatal_insn (\\\"unexpected branch operator\\\", operands[3]);\n-  return \\\"\\\";\n-}\"\n+  abort ();\n+  return \"\";\n+}\n   [(set_attr \"type\"\t\"jump,jump\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"3,3\")])\n@@ -1525,16 +1359,15 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 2 \"\" \"\"))))]\n   \"\"\n-  \"*\n {\n   if (which_alternative == 1)\n     {\n       switch (GET_CODE (operands[3]))\n \t{\n-\tcase EQ:\treturn \\\"bne\\\\t%0, %1, %2\\\";\n-\tcase NE:\treturn \\\"beq\\\\t%0, %1, %2\\\";\n-\tcase LT:\treturn \\\"bge\\\\t%0, %1, %2\\\";\n-\tcase GE:\treturn \\\"blt\\\\t%0, %1, %2\\\";\n+\tcase EQ:\treturn \"bne\\t%0, %1, %2\";\n+\tcase NE:\treturn \"beq\\t%0, %1, %2\";\n+\tcase LT:\treturn \"bge\\t%0, %1, %2\";\n+\tcase GE:\treturn \"blt\\t%0, %1, %2\";\n \tdefault:\tbreak;\n \t}\n     }\n@@ -1543,30 +1376,30 @@\n       switch (GET_CODE (operands[3]))\n \t{\n \tcase EQ:\treturn (TARGET_DENSITY\n-\t\t\t\t? \\\"bnez.n\\\\t%0, %2\\\"\n-\t\t\t\t: \\\"bnez\\\\t%0, %2\\\");\n+\t\t\t\t? \"bnez.n\\t%0, %2\"\n+\t\t\t\t: \"bnez\\t%0, %2\");\n \tcase NE:\treturn (TARGET_DENSITY\n-\t\t\t\t? \\\"beqz.n\\\\t%0, %2\\\"\n-\t\t\t\t: \\\"beqz\\\\t%0, %2\\\");\n-\tcase LT:\treturn \\\"bgez\\\\t%0, %2\\\";\n-\tcase GE:\treturn \\\"bltz\\\\t%0, %2\\\";\n+\t\t\t\t? \"beqz.n\\t%0, %2\"\n+\t\t\t\t: \"beqz\\t%0, %2\");\n+\tcase LT:\treturn \"bgez\\t%0, %2\";\n+\tcase GE:\treturn \"bltz\\t%0, %2\";\n \tdefault:\tbreak;\n \t}\n     }\n   else\n     {\n       switch (GET_CODE (operands[3]))\n \t{\n-\tcase EQ:\treturn \\\"bnei\\\\t%0, %d1, %2\\\";\n-\tcase NE:\treturn \\\"beqi\\\\t%0, %d1, %2\\\";\n-\tcase LT:\treturn \\\"bgei\\\\t%0, %d1, %2\\\";\n-\tcase GE:\treturn \\\"blti\\\\t%0, %d1, %2\\\";\n+\tcase EQ:\treturn \"bnei\\t%0, %d1, %2\";\n+\tcase NE:\treturn \"beqi\\t%0, %d1, %2\";\n+\tcase LT:\treturn \"bgei\\t%0, %d1, %2\";\n+\tcase GE:\treturn \"blti\\t%0, %d1, %2\";\n \tdefault:\tbreak;\n \t}\n     }\n-  fatal_insn (\\\"unexpected branch operator\\\", operands[3]);\n-  return \\\"\\\";\n-}\"\n+  abort ();\n+  return \"\";\n+}\n   [(set_attr \"type\"\t\"jump,jump\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"3,3\")])\n@@ -1579,29 +1412,28 @@\n \t\t      (label_ref (match_operand 2 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"*\n {\n   if (which_alternative == 1)\n     {\n       switch (GET_CODE (operands[3]))\n \t{\n-\tcase LTU:\treturn \\\"bltu\\\\t%0, %1, %2\\\";\n-\tcase GEU:\treturn \\\"bgeu\\\\t%0, %1, %2\\\";\n+\tcase LTU:\treturn \"bltu\\t%0, %1, %2\";\n+\tcase GEU:\treturn \"bgeu\\t%0, %1, %2\";\n \tdefault:\tbreak;\n \t}\n     }\n   else\n     {\n       switch (GET_CODE (operands[3]))\n \t{\n-\tcase LTU:\treturn \\\"bltui\\\\t%0, %d1, %2\\\";\n-\tcase GEU:\treturn \\\"bgeui\\\\t%0, %d1, %2\\\";\n+\tcase LTU:\treturn \"bltui\\t%0, %d1, %2\";\n+\tcase GEU:\treturn \"bgeui\\t%0, %d1, %2\";\n \tdefault:\tbreak;\n \t}\n     }\n-  fatal_insn (\\\"unexpected branch operator\\\", operands[3]);\n-  return \\\"\\\";\n-}\"\n+  abort ();\n+  return \"\";\n+}\n   [(set_attr \"type\"\t\"jump,jump\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"3,3\")])\n@@ -1614,29 +1446,28 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 2 \"\" \"\"))))]\n   \"\"\n-  \"*\n {\n   if (which_alternative == 1)\n     {\n       switch (GET_CODE (operands[3]))\n \t{\n-\tcase LTU:\treturn \\\"bgeu\\\\t%0, %1, %2\\\";\n-\tcase GEU:\treturn \\\"bltu\\\\t%0, %1, %2\\\";\n+\tcase LTU:\treturn \"bgeu\\t%0, %1, %2\";\n+\tcase GEU:\treturn \"bltu\\t%0, %1, %2\";\n \tdefault:\tbreak;\n \t}\n     }\n   else\n     {\n       switch (GET_CODE (operands[3]))\n \t{\n-\tcase LTU:\treturn \\\"bgeui\\\\t%0, %d1, %2\\\";\n-\tcase GEU:\treturn \\\"bltui\\\\t%0, %d1, %2\\\";\n+\tcase LTU:\treturn \"bgeui\\t%0, %d1, %2\";\n+\tcase GEU:\treturn \"bltui\\t%0, %d1, %2\";\n \tdefault:\tbreak;\n \t}\n     }\n-  fatal_insn (\\\"unexpected branch operator\\\", operands[3]);\n-  return \\\"\\\";\n-}\"\n+  abort ();\n+  return \"\";\n+}\n   [(set_attr \"type\"\t\"jump,jump\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"3,3\")])\n@@ -1654,31 +1485,30 @@\n \t\t      (label_ref (match_operand 2 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"*\n {\n   if (which_alternative == 0)\n     {\n       unsigned bitnum = INTVAL(operands[1]) & 0x1f;\n       operands[1] = GEN_INT(bitnum);\n       switch (GET_CODE (operands[3]))\n \t{\n-\tcase EQ:\treturn \\\"bbci\\\\t%0, %d1, %2\\\";\n-\tcase NE:\treturn \\\"bbsi\\\\t%0, %d1, %2\\\";\n+\tcase EQ:\treturn \"bbci\\t%0, %d1, %2\";\n+\tcase NE:\treturn \"bbsi\\t%0, %d1, %2\";\n \tdefault:\tbreak;\n \t}\n     }\n   else\n     {\n       switch (GET_CODE (operands[3]))\n \t{\n-\tcase EQ:\treturn \\\"bbc\\\\t%0, %1, %2\\\";\n-\tcase NE:\treturn \\\"bbs\\\\t%0, %1, %2\\\";\n+\tcase EQ:\treturn \"bbc\\t%0, %1, %2\";\n+\tcase NE:\treturn \"bbs\\t%0, %1, %2\";\n \tdefault:\tbreak;\n \t}\n     }\n-  fatal_insn (\\\"unexpected branch operator\\\", operands[3]);\n-  return \\\"\\\";\n-}\"\n+  abort ();\n+  return \"\";\n+}\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"3\")])\n@@ -1694,31 +1524,30 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 2 \"\" \"\"))))]\n   \"\"\n-  \"*\n {\n   if (which_alternative == 0)\n     {\n       unsigned bitnum = INTVAL (operands[1]) & 0x1f;\n       operands[1] = GEN_INT (bitnum);\n       switch (GET_CODE (operands[3]))\n \t{\n-\tcase EQ:    return \\\"bbsi\\\\t%0, %d1, %2\\\";\n-\tcase NE:    return \\\"bbci\\\\t%0, %d1, %2\\\";\n-\tdefault:    break;\n+\tcase EQ:\treturn \"bbsi\\t%0, %d1, %2\";\n+\tcase NE:\treturn \"bbci\\t%0, %d1, %2\";\n+\tdefault:\tbreak;\n \t}\n     }\n   else\n     {\n       switch (GET_CODE (operands[3]))\n \t{\n-\tcase EQ:\treturn \\\"bbs\\\\t%0, %1, %2\\\";\n-\tcase NE:\treturn \\\"bbc\\\\t%0, %1, %2\\\";\n+\tcase EQ:\treturn \"bbs\\t%0, %1, %2\";\n+\tcase NE:\treturn \"bbc\\t%0, %1, %2\";\n \tdefault:\tbreak;\n \t}\n     }\n-  fatal_insn (\\\"unexpected branch operator\\\", operands[3]);\n-  return \\\"\\\";\n-}\"\n+  abort ();\n+  return \"\";\n+}\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"3\")])\n@@ -1732,17 +1561,16 @@\n \t\t      (label_ref (match_operand 2 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"*\n {\n   switch (GET_CODE (operands[3]))\n     {\n-    case EQ:\treturn \\\"bnone\\\\t%0, %1, %2\\\";\n-    case NE:\treturn \\\"bany\\\\t%0, %1, %2\\\";\n-    default:\tbreak;\n+    case EQ:\t\treturn \"bnone\\t%0, %1, %2\";\n+    case NE:\t\treturn \"bany\\t%0, %1, %2\";\n+    default:\t\tbreak;\n     }\n-  fatal_insn (\\\"unexpected branch operator\\\", operands[3]);\n-  return \\\"\\\";\n-}\"\n+  abort ();\n+  return \"\";\n+}\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"3\")])\n@@ -1756,162 +1584,151 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 2 \"\" \"\"))))]\n   \"\"\n-  \"*\n {\n   switch (GET_CODE (operands[3]))\n     {\n-    case EQ:\treturn \\\"bany\\\\t%0, %1, %2\\\";\n-    case NE:\treturn \\\"bnone\\\\t%0, %1, %2\\\";\n-    default:\tbreak;\n+    case EQ:\t\treturn \"bany\\t%0, %1, %2\";\n+    case NE:\t\treturn \"bnone\\t%0, %1, %2\";\n+    default:\t\tbreak;\n     }\n-  fatal_insn (\\\"unexpected branch operator\\\", operands[3]);\n-  return \\\"\\\";\n-}\"\n+  abort ();\n+  return \"\";\n+}\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"3\")])\n \n \n-;; Define the loop insns that is used by bct optimization to represent the\n-;; start and end of a zero-overhead loop (in loop.c). This start template\n-;; generates the loop insn, the end template doesn't generate any instructions\n-;; since since loop end is handled in hardware.\n+;; Define the loop insns used by bct optimization to represent the\n+;; start and end of a zero-overhead loop (in loop.c).  This start\n+;; template generates the loop insn; the end template doesn't generate\n+;; any instructions since loop end is handled in hardware.\n \n (define_insn \"zero_cost_loop_start\"\n-  [(set (pc) (if_then_else (eq (match_operand:SI 0 \"register_operand\" \"a\")\n-\t\t\t       (const_int 0))\n-\t\t\t   (label_ref (match_operand 1 \"\" \"\"))\n-\t\t\t   (pc)))\n+  [(set (pc)\n+\t(if_then_else (eq (match_operand:SI 0 \"register_operand\" \"a\")\n+\t\t\t  (const_int 0))\n+\t\t      (label_ref (match_operand 1 \"\" \"\"))\n+\t\t      (pc)))\n    (set (reg:SI 19)\n \t(plus:SI (match_dup 0) (const_int -1)))]\n   \"\"\n-  \"loopnez %0, %l1\"\n+  \"loopnez\\t%0, %l1\"\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"3\")])\n \n (define_insn \"zero_cost_loop_end\"\n-  [(set (pc) (if_then_else (ne (reg:SI 19) (const_int 0))\n-\t\t\t   (label_ref (match_operand 0 \"\" \"\"))\n-\t\t\t   (pc)))\n+  [(set (pc)\n+\t(if_then_else (ne (reg:SI 19) (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))\n    (set (reg:SI 19)\n \t(plus:SI (reg:SI 19) (const_int -1)))]\n   \"\"\n-  \"*\n+{\n     xtensa_emit_loop_end (insn, operands);\n-    return \\\"\\\";\n-  \"\n+    return \"\";\n+}\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"0\")])\n \n-\n-;;\n-;;  ....................\n-;;\n-;;\tSETTING A REGISTER FROM A COMPARISON\n-;;\n-;;  ....................\n-;;\n+\f\n+;; Setting a register from a comparison.\n \n (define_expand \"seq\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(match_dup 1))]\n   \"\"\n-  \"\n {\n   operands[1] = gen_rtx (EQ, SImode, branch_cmp[0], branch_cmp[1]);\n-  if (!xtensa_expand_scc (operands)) FAIL;\n+  if (!xtensa_expand_scc (operands))\n+    FAIL;\n   DONE;\n-}\")\n+})\n \n (define_expand \"sne\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(match_dup 1))]\n   \"\"\n-  \"\n {\n   operands[1] = gen_rtx (NE, SImode, branch_cmp[0], branch_cmp[1]);\n-  if (!xtensa_expand_scc (operands)) FAIL;\n+  if (!xtensa_expand_scc (operands))\n+    FAIL;\n   DONE;\n-}\")\n+})\n \n (define_expand \"sgt\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(match_dup 1))]\n   \"\"\n-  \"\n {\n   operands[1] = gen_rtx (GT, SImode, branch_cmp[0], branch_cmp[1]);\n-  if (!xtensa_expand_scc (operands)) FAIL;\n+  if (!xtensa_expand_scc (operands))\n+    FAIL;\n   DONE;\n-}\")\n+})\n \n (define_expand \"sge\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(match_dup 1))]\n   \"\"\n-  \"\n {\n   operands[1] = gen_rtx (GE, SImode, branch_cmp[0], branch_cmp[1]);\n-  if (!xtensa_expand_scc (operands)) FAIL;\n+  if (!xtensa_expand_scc (operands))\n+    FAIL;\n   DONE;\n-}\")\n+})\n \n (define_expand \"slt\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(match_dup 1))]\n   \"\"\n-  \"\n {\n   operands[1] = gen_rtx (LT, SImode, branch_cmp[0], branch_cmp[1]);\n-  if (!xtensa_expand_scc (operands)) FAIL;\n+  if (!xtensa_expand_scc (operands))\n+    FAIL;\n   DONE;\n-}\")\n+})\n \n (define_expand \"sle\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(match_dup 1))]\n   \"\"\n-  \"\n {\n   operands[1] = gen_rtx (LE, SImode, branch_cmp[0], branch_cmp[1]);\n-  if (!xtensa_expand_scc (operands)) FAIL;\n+  if (!xtensa_expand_scc (operands))\n+    FAIL;\n   DONE;\n-}\")\n-\n+})\n \n-;;\n-;;  ....................\n-;;\n-;;\tCONDITIONAL MOVES\n-;;\n-;;  ....................\n-;;\n+\f\n+;; Conditional moves.\n \n (define_expand \"movsicc\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(if_then_else:SI (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t (match_operand:SI 2 \"register_operand\" \"\")\n \t\t\t (match_operand:SI 3 \"register_operand\" \"\")))]\n   \"\"\n-  \"\n {\n-  if (!xtensa_expand_conditional_move (operands, 0)) FAIL;\n+  if (!xtensa_expand_conditional_move (operands, 0))\n+    FAIL;\n   DONE;\n-}\")\n+})\n \n (define_expand \"movsfcc\"\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n \t(if_then_else:SF (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t (match_operand:SF 2 \"register_operand\" \"\")\n \t\t\t (match_operand:SF 3 \"register_operand\" \"\")))]\n   \"\"\n-  \"\n {\n-  if (!xtensa_expand_conditional_move (operands, 1)) FAIL;\n+  if (!xtensa_expand_conditional_move (operands, 1))\n+    FAIL;\n   DONE;\n-}\")\n+})\n \n (define_insn \"movsicc_internal0\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a,a\")\n@@ -1921,33 +1738,32 @@\n \t\t\t (match_operand:SI 2 \"register_operand\" \"r,0\")\n \t\t\t (match_operand:SI 3 \"register_operand\" \"0,r\")))]\n   \"\"\n-  \"*\n {\n   if (which_alternative == 0)\n     {\n       switch (GET_CODE (operands[4]))\n \t{\n-\tcase EQ:\treturn \\\"moveqz\\\\t%0, %2, %1\\\";\n-\tcase NE:\treturn \\\"movnez\\\\t%0, %2, %1\\\";\n-\tcase LT:\treturn \\\"movltz\\\\t%0, %2, %1\\\";\n-\tcase GE:\treturn \\\"movgez\\\\t%0, %2, %1\\\";\n+\tcase EQ:\treturn \"moveqz\\t%0, %2, %1\";\n+\tcase NE:\treturn \"movnez\\t%0, %2, %1\";\n+\tcase LT:\treturn \"movltz\\t%0, %2, %1\";\n+\tcase GE:\treturn \"movgez\\t%0, %2, %1\";\n \tdefault:\tbreak;\n \t}\n     }\n   else\n     {\n       switch (GET_CODE (operands[4]))\n \t{\n-\tcase EQ:\treturn \\\"movnez\\\\t%0, %3, %1\\\";\n-\tcase NE:\treturn \\\"moveqz\\\\t%0, %3, %1\\\";\n-\tcase LT:\treturn \\\"movgez\\\\t%0, %3, %1\\\";\n-\tcase GE:\treturn \\\"movltz\\\\t%0, %3, %1\\\";\n+\tcase EQ:\treturn \"movnez\\t%0, %3, %1\";\n+\tcase NE:\treturn \"moveqz\\t%0, %3, %1\";\n+\tcase LT:\treturn \"movgez\\t%0, %3, %1\";\n+\tcase GE:\treturn \"movltz\\t%0, %3, %1\";\n \tdefault:\tbreak;\n \t}\n     }\n-  fatal_insn (\\\"unexpected cmov operator\\\", operands[4]);\n-  return \\\"\\\";\n-}\"\n+  abort ();\n+  return \"\";\n+}\n   [(set_attr \"type\"\t\"move,move\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3,3\")])\n@@ -1960,21 +1776,20 @@\n \t\t\t (match_operand:SI 2 \"register_operand\" \"r,0\")\n \t\t\t (match_operand:SI 3 \"register_operand\" \"0,r\")))]\n   \"TARGET_BOOLEANS\"\n-  \"*\n {\n   int isEq = (GET_CODE (operands[4]) == EQ);\n   switch (which_alternative)\n     {\n     case 0:\n-      if (isEq) return \\\"movf\\\\t%0, %2, %1\\\";\n-      return \\\"movt\\\\t%0, %2, %1\\\";\n+      if (isEq) return \"movf\\t%0, %2, %1\";\n+      return \"movt\\t%0, %2, %1\";\n     case 1:\n-      if (isEq) return \\\"movt\\\\t%0, %3, %1\\\";\n-      return \\\"movf\\\\t%0, %3, %1\\\";\n+      if (isEq) return \"movt\\t%0, %3, %1\";\n+      return \"movf\\t%0, %3, %1\";\n     }\n   abort ();\n-  return \\\"\\\";\n-}\"\n+  return \"\";\n+}\n   [(set_attr \"type\"\t\"move,move\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3,3\")])\n@@ -1987,55 +1802,54 @@\n \t\t\t (match_operand:SF 2 \"register_operand\" \"r,0,f,0\")\n \t\t\t (match_operand:SF 3 \"register_operand\" \"0,r,0,f\")))]\n   \"\"\n-  \"*\n {\n   if (which_alternative == 0)\n     {\n       switch (GET_CODE (operands[4]))\n \t{\n-\tcase EQ:\treturn \\\"moveqz\\\\t%0, %2, %1\\\";\n-\tcase NE:\treturn \\\"movnez\\\\t%0, %2, %1\\\";\n-\tcase LT:\treturn \\\"movltz\\\\t%0, %2, %1\\\";\n-\tcase GE:\treturn \\\"movgez\\\\t%0, %2, %1\\\";\n+\tcase EQ:\treturn \"moveqz\\t%0, %2, %1\";\n+\tcase NE:\treturn \"movnez\\t%0, %2, %1\";\n+\tcase LT:\treturn \"movltz\\t%0, %2, %1\";\n+\tcase GE:\treturn \"movgez\\t%0, %2, %1\";\n \tdefault:\tbreak;\n \t}\n     }\n   else if (which_alternative == 1)\n     {\n       switch (GET_CODE (operands[4]))\n \t{\n-\tcase EQ:\treturn \\\"movnez\\\\t%0, %3, %1\\\";\n-\tcase NE:\treturn \\\"moveqz\\\\t%0, %3, %1\\\";\n-\tcase LT:\treturn \\\"movgez\\\\t%0, %3, %1\\\";\n-\tcase GE:\treturn \\\"movltz\\\\t%0, %3, %1\\\";\n+\tcase EQ:\treturn \"movnez\\t%0, %3, %1\";\n+\tcase NE:\treturn \"moveqz\\t%0, %3, %1\";\n+\tcase LT:\treturn \"movgez\\t%0, %3, %1\";\n+\tcase GE:\treturn \"movltz\\t%0, %3, %1\";\n \tdefault:\tbreak;\n \t}\n     }\n   else if (which_alternative == 2)\n     {\n       switch (GET_CODE (operands[4]))\n \t{\n-\tcase EQ:\treturn \\\"moveqz.s %0, %2, %1\\\";\n-\tcase NE:\treturn \\\"movnez.s %0, %2, %1\\\";\n-\tcase LT:\treturn \\\"movltz.s %0, %2, %1\\\";\n-\tcase GE:\treturn \\\"movgez.s %0, %2, %1\\\";\n+\tcase EQ:\treturn \"moveqz.s %0, %2, %1\";\n+\tcase NE:\treturn \"movnez.s %0, %2, %1\";\n+\tcase LT:\treturn \"movltz.s %0, %2, %1\";\n+\tcase GE:\treturn \"movgez.s %0, %2, %1\";\n \tdefault:\tbreak;\n \t}\n     }\n   else if (which_alternative == 3)\n     {\n       switch (GET_CODE (operands[4]))\n \t{\n-\tcase EQ:\treturn \\\"movnez.s %0, %3, %1\\\";\n-\tcase NE:\treturn \\\"moveqz.s %0, %3, %1\\\";\n-\tcase LT:\treturn \\\"movgez.s %0, %3, %1\\\";\n-\tcase GE:\treturn \\\"movltz.s %0, %3, %1\\\";\n+\tcase EQ:\treturn \"movnez.s %0, %3, %1\";\n+\tcase NE:\treturn \"moveqz.s %0, %3, %1\";\n+\tcase LT:\treturn \"movgez.s %0, %3, %1\";\n+\tcase GE:\treturn \"movltz.s %0, %3, %1\";\n \tdefault:\tbreak;\n \t}\n     }\n-  fatal_insn (\\\"unexpected cmov operator\\\", operands[4]);\n-  return \\\"\\\";\n-}\"\n+  abort ();\n+  return \"\";\n+}\n   [(set_attr \"type\"\t\"move,move,move,move\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"3,3,3,3\")])\n@@ -2048,46 +1862,39 @@\n \t\t\t (match_operand:SF 2 \"register_operand\" \"r,0,f,0\")\n \t\t\t (match_operand:SF 3 \"register_operand\" \"0,r,0,f\")))]\n   \"TARGET_BOOLEANS\"\n-  \"*\n {\n   int isEq = (GET_CODE (operands[4]) == EQ);\n   switch (which_alternative)\n     {\n     case 0:\n-      if (isEq) return \\\"movf\\\\t%0, %2, %1\\\";\n-      return \\\"movt\\\\t%0, %2, %1\\\";\n+      if (isEq) return \"movf\\t%0, %2, %1\";\n+      return \"movt\\t%0, %2, %1\";\n     case 1:\n-      if (isEq) return \\\"movt\\\\t%0, %3, %1\\\";\n-      return \\\"movf\\\\t%0, %3, %1\\\";\n+      if (isEq) return \"movt\\t%0, %3, %1\";\n+      return \"movf\\t%0, %3, %1\";\n     case 2:\n-      if (isEq) return \\\"movf.s\\\\t%0, %2, %1\\\";\n-      return \\\"movt.s\\\\t%0, %2, %1\\\";\n+      if (isEq) return \"movf.s\\t%0, %2, %1\";\n+      return \"movt.s\\t%0, %2, %1\";\n     case 3:\n-      if (isEq) return \\\"movt.s\\\\t%0, %3, %1\\\";\n-      return \\\"movf.s\\\\t%0, %3, %1\\\";\n+      if (isEq) return \"movt.s\\t%0, %3, %1\";\n+      return \"movf.s\\t%0, %3, %1\";\n     }\n   abort ();\n-  return \\\"\\\";\n-}\"\n+  return \"\";\n+}\n   [(set_attr \"type\"\t\"move,move,move,move\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"3,3,3,3\")])\n \n-\n-;;\n-;;  ....................\n-;;\n-;;\tFLOATING POINT COMPARISONS\n-;;\n-;;  ....................\n-;;\n+\f\n+;; Floating-point comparisons.\n \n (define_insn \"seq_sf\"\n   [(set (match_operand:CC 0 \"register_operand\" \"=b\")\n \t(eq:CC (match_operand:SF 1 \"register_operand\" \"f\")\n \t       (match_operand:SF 2 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT\"\n-  \"oeq.s\\\\t%0, %1, %2\"\n+  \"oeq.s\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"farith\")\n    (set_attr \"mode\"\t\"BL\")\n    (set_attr \"length\"\t\"3\")])\n@@ -2097,7 +1904,7 @@\n \t(lt:CC (match_operand:SF 1 \"register_operand\" \"f\")\n \t       (match_operand:SF 2 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT\"\n-  \"olt.s\\\\t%0, %1, %2\"\n+  \"olt.s\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"farith\")\n    (set_attr \"mode\"\t\"BL\")\n    (set_attr \"length\"\t\"3\")])\n@@ -2107,46 +1914,40 @@\n \t(le:CC (match_operand:SF 1 \"register_operand\" \"f\")\n \t       (match_operand:SF 2 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT\"\n-  \"ole.s\\\\t%0, %1, %2\"\n+  \"ole.s\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"farith\")\n    (set_attr \"mode\"\t\"BL\")\n    (set_attr \"length\"\t\"3\")])\n \n-\n-;;\n-;;  ....................\n-;;\n-;;\tUNCONDITIONAL BRANCHES\n-;;\n-;;  ....................\n-;;\n+\f\n+;; Unconditional branches.\n \n (define_insn \"jump\"\n   [(set (pc)\n \t(label_ref (match_operand 0 \"\" \"\")))]\n   \"\"\n-  \"j\\\\t%l0\"\n+  \"j\\t%l0\"\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"3\")])\n \n (define_expand \"indirect_jump\"\n-  [(set (pc) (match_operand 0 \"register_operand\" \"\"))]\n+  [(set (pc)\n+\t(match_operand 0 \"register_operand\" \"\"))]\n   \"\"\n-  \"\n {\n   rtx dest = operands[0];\n   if (GET_CODE (dest) != REG || GET_MODE (dest) != Pmode)\n     operands[0] = copy_to_mode_reg (Pmode, dest);\n \n   emit_jump_insn (gen_indirect_jump_internal (dest));\n   DONE;\n-}\")\n+})\n \n (define_insn \"indirect_jump_internal\"\n   [(set (pc) (match_operand:SI 0 \"register_operand\" \"r\"))]\n   \"\"\n-  \"jx\\\\t%0\"\n+  \"jx\\t%0\"\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"3\")])\n@@ -2156,39 +1957,32 @@\n   [(use (match_operand:SI 0 \"register_operand\" \"\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n    \"\"\n-   \"\n {\n   rtx target = operands[0];\n   if (flag_pic)\n     {\n-      /* For PIC, the table entry is relative to the start of the table. */\n+      /* For PIC, the table entry is relative to the start of the table.  */\n       rtx label = gen_reg_rtx (SImode);\n       target = gen_reg_rtx (SImode);\n       emit_move_insn (label, gen_rtx_LABEL_REF (SImode, operands[1]));\n       emit_insn (gen_addsi3 (target, operands[0], label));\n     }\n   emit_jump_insn (gen_tablejump_internal (target, operands[1]));\n   DONE;\n-}\")\n+})\n \n (define_insn \"tablejump_internal\"\n   [(set (pc)\n \t(match_operand:SI 0 \"register_operand\" \"r\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"\"\n-  \"jx\\\\t%0\"\n+  \"jx\\t%0\"\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"3\")])\n \n-\n-;;\n-;;  ....................\n-;;\n-;;\tFUNCTION CALLS\n-;;\n-;;  ....................\n-;;\n+\f\n+;; Function calls.\n \n (define_expand \"sym_PLT\"\n   [(const (unspec [(match_operand:SI 0 \"\" \"\")] UNSPEC_PLT))]\n@@ -2199,22 +1993,21 @@\n   [(call (match_operand 0 \"memory_operand\" \"\")\n \t (match_operand 1 \"\" \"\"))]\n   \"\"\n-  \"\n {\n   rtx addr = XEXP (operands[0], 0);\n   if (flag_pic && GET_CODE (addr) == SYMBOL_REF && !SYMBOL_REF_LOCAL_P (addr))\n     addr = gen_sym_PLT (addr);\n   if (!call_insn_operand (addr, VOIDmode))\n     XEXP (operands[0], 0) = copy_to_mode_reg (Pmode, addr);\n-}\")\n+})\n \n (define_insn \"call_internal\"\n   [(call (mem (match_operand:SI 0 \"call_insn_operand\" \"n,i,r\"))\n \t (match_operand 1 \"\" \"i,i,i\"))]\n   \"\"\n-  \"*\n-    return xtensa_emit_call (0, operands);\n-  \"\n+{\n+  return xtensa_emit_call (0, operands);\n+}\n   [(set_attr \"type\"\t\"call\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"3\")])\n@@ -2224,29 +2017,28 @@\n \t(call (match_operand 1 \"memory_operand\" \"\")\n \t      (match_operand 2 \"\" \"\")))]\n   \"\"\n-  \"\n {\n   rtx addr = XEXP (operands[1], 0);\n   if (flag_pic && GET_CODE (addr) == SYMBOL_REF && !SYMBOL_REF_LOCAL_P (addr))\n     addr = gen_sym_PLT (addr);\n   if (!call_insn_operand (addr, VOIDmode))\n     XEXP (operands[1], 0) = copy_to_mode_reg (Pmode, addr);\n-}\")\n+})\n \n-;; cannot combine constraints for operand 0 into \"afvb\"\n+;; Cannot combine constraints for operand 0 into \"afvb\":\n ;; reload.c:find_reloads seems to assume that grouped constraints somehow\n ;; specify related register classes, and when they don't the constraints\n-;; fail to match. By not grouping the constraints, we get the correct\n+;; fail to match.  By not grouping the constraints, we get the correct\n ;; behavior.\n (define_insn \"call_value_internal\"\n    [(set (match_operand 0 \"register_operand\" \"=af,af,af,v,v,v,b,b,b\")\n          (call (mem (match_operand:SI 1 \"call_insn_operand\"\n \t\t\t\t\t\"n,i,r,n,i,r,n,i,r\"))\n                (match_operand 2 \"\" \"i,i,i,i,i,i,i,i,i\")))]\n   \"\"\n-  \"*\n-    return xtensa_emit_call (1, operands);\n-  \"\n+{\n+  return xtensa_emit_call (1, operands);\n+}\n   [(set_attr \"type\"\t\"call\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"3\")])\n@@ -2257,14 +2049,13 @@\n \t\t\t     (match_operand:SI 1 \"const_int_operand\" \"i\")]\n \t\t\t    UNSPECV_ENTRY))]\n   \"\"\n-  \"*\n {\n   if (frame_pointer_needed)\n-    output_asm_insn (\\\".frame\\\\ta7, %0\\\", operands);\n+    output_asm_insn (\".frame\\ta7, %0\", operands);\n   else\n-    output_asm_insn (\\\".frame\\\\tsp, %0\\\", operands);\n-  return \\\"entry\\\\tsp, %1\\\";\n-}\"\n+    output_asm_insn (\".frame\\tsp, %0\", operands);\n+  return \"entry\\tsp, %1\";\n+}\n   [(set_attr \"type\"\t\"move\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n@@ -2273,48 +2064,38 @@\n   [(return)\n    (use (reg:SI A0_REG))]\n   \"reload_completed\"\n-  \"*\n {\n-  return (TARGET_DENSITY ? \\\"retw.n\\\" : \\\"retw\\\");\n-}\"\n+  return (TARGET_DENSITY ? \"retw.n\" : \"retw\");\n+}\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"2\")])\n \n-\n-;;\n-;;  ....................\n-;;\n-;;\tMISC.\n-;;\n-;;  ....................\n-;;\n+\f\n+;; Miscellaneous instructions.\n \n (define_expand \"prologue\"\n   [(const_int 0)]\n   \"\"\n-  \"\n {\n   xtensa_expand_prologue ();\n   DONE;\n-}\")\n+})\n \n (define_expand \"epilogue\"\n   [(return)]\n   \"\"\n-  \"\n {\n   emit_jump_insn (gen_return ());\n   DONE;\n-}\")\n+})\n \n (define_insn \"nop\"\n   [(const_int 0)]\n   \"\"\n-  \"*\n {\n-  return (TARGET_DENSITY ? \\\"nop.n\\\" : \\\"nop\\\");\n-}\"\n+  return (TARGET_DENSITY ? \"nop.n\" : \"nop\");\n+}\n   [(set_attr \"type\"\t\"nop\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"3\")])\n@@ -2325,36 +2106,34 @@\n    (match_operand:SI 2 \"general_operand\" \"\")\n    (match_operand:SI 3 \"\" \"\")]\n   \"\"\n-  \"\n {\n   xtensa_expand_nonlocal_goto (operands);\n   DONE;\n-}\")\n+})\n \n ;; Setting up a frame pointer is tricky for Xtensa because GCC doesn't\n ;; know if a frame pointer is required until the reload pass, and\n ;; because there may be an incoming argument value in the hard frame\n-;; pointer register (a7). If there is an incoming argument in that\n+;; pointer register (a7).  If there is an incoming argument in that\n ;; register, the \"set_frame_ptr\" insn gets inserted immediately after\n ;; the insn that copies the incoming argument to a pseudo or to the\n ;; stack.  This serves several purposes here: (1) it keeps the\n ;; optimizer from copy-propagating or scheduling the use of a7 as an\n ;; incoming argument away from the beginning of the function; (2) we\n ;; can use a post-reload splitter to expand away the insn if a frame\n ;; pointer is not required, so that the post-reload scheduler can do\n-;; the right thing; and (3) it makes it easy for xtensa_reorg() to\n-;; search for this insn to determine whether it should add a new insn\n+;; the right thing; and (3) it makes it easy for the prologue expander\n+;; to search for this insn to determine whether it should add a new insn\n ;; to set up the frame pointer.\n \n (define_insn \"set_frame_ptr\"\n   [(set (reg:SI A7_REG) (unspec_volatile:SI [(const_int 0)] UNSPECV_SET_FP))]\n   \"\"\n-  \"*\n {\n   if (frame_pointer_needed)\n-    return \\\"mov\\\\ta7, sp\\\";\n-  return \\\"\\\";\n-}\"\n+    return \"mov\\ta7, sp\";\n+  return \"\";\n+}\n   [(set_attr \"type\"\t\"move\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n@@ -2379,30 +2158,21 @@\n \n ;; The fix_return_addr pattern sets the high 2 bits of an address in a\n ;; register to match the high bits of the current PC.\n-\n (define_insn \"fix_return_addr\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")]\n \t\t   UNSPEC_RET_ADDR))\n    (clobber (match_scratch:SI 2 \"=r\"))\n    (clobber (match_scratch:SI 3 \"=r\"))]\n   \"\"\n-  \"mov\\\\t%2, a0\\;call0\\\\t0f\\;.align\\\\t4\\;0:\\;mov\\\\t%3, a0\\;mov\\\\ta0, %2\\;\\\n-srli\\\\t%3, %3, 30\\;slli\\\\t%0, %1, 2\\;ssai\\\\t2\\;src\\\\t%0, %3, %0\"\n+  \"mov\\t%2, a0\\;call0\\t0f\\;.align\\t4\\;0:\\;mov\\t%3, a0\\;mov\\ta0, %2\\;\\\n+srli\\t%3, %3, 30\\;slli\\t%0, %1, 2\\;ssai\\t2\\;src\\t%0, %3, %0\"\n   [(set_attr \"type\"\t\"multi\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"24\")])\n \n-\n-;;\n-;;  ....................\n-;;\n-;;\tBOOLEANS\n-;;\n-;;  ....................\n-;;\n-\n-;; branch patterns\n+\f\n+;; Instructions for the Xtensa \"boolean\" option.\n \n (define_insn \"*booltrue\"\n   [(set (pc)\n@@ -2412,13 +2182,12 @@ srli\\\\t%3, %3, 30\\;slli\\\\t%0, %1, 2\\;ssai\\\\t2\\;src\\\\t%0, %3, %0\"\n \t\t      (label_ref (match_operand 1 \"\" \"\"))\n \t\t      (pc)))]\n   \"TARGET_BOOLEANS\"\n-  \"*\n {\n   if (GET_CODE (operands[2]) == EQ)\n-    return \\\"bf\\\\t%0, %1\\\";\n+    return \"bf\\t%0, %1\";\n   else\n-    return \\\"bt\\\\t%0, %1\\\";\n-}\"\n+    return \"bt\\t%0, %1\";\n+}\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"3\")])\n@@ -2431,13 +2200,12 @@ srli\\\\t%3, %3, 30\\;slli\\\\t%0, %1, 2\\;ssai\\\\t2\\;src\\\\t%0, %3, %0\"\n \t\t      (pc)\n \t\t      (label_ref (match_operand 1 \"\" \"\"))))]\n   \"TARGET_BOOLEANS\"\n-  \"*\n {\n   if (GET_CODE (operands[2]) == EQ)\n-    return \\\"bt\\\\t%0, %1\\\";\n+    return \"bt\\t%0, %1\";\n   else\n-    return \\\"bf\\\\t%0, %1\\\";\n-}\"\n+    return \"bf\\t%0, %1\";\n+}\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"3\")])"}]}