{"sha": "8bb418a3d5c47572c382c7b8f195526247c02a1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJiNDE4YTNkNWM0NzU3MmMzODJjN2I4ZjE5NTUyNjI0N2MwMmExZg==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2004-02-21T09:08:37Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2004-02-21T09:08:37Z"}, "message": "darwin.h (TARGET_OPTION_TRANSLATE_TABLE): Refer to SUBTARGET_OPTION_TRANSLATE_TABLE for architecture-specific options.\n\n[gcc/ChangeLog]\n2004-02-21  Ziemowit Laski  <zlaski@apple.com>\n\n        * config/darwin.h (TARGET_OPTION_TRANSLATE_TABLE): Refer to\n        SUBTARGET_OPTION_TRANSLATE_TABLE for architecture-specific options.\n        * config/i386/darwin.h (SUBTARGET_OPTION_TRANSLATE_TABLE): Define it.\n        * config/rs6000/altivec.h: #error out if '-maltivec' not specified.\n        (vector, pixel, bool): #define to __vector, __pixel and __bool.\n        (__un_args_eq, __bin_args_eq, __tern_args_eq): Move to C-specific\n        portion of header.\n        (__altivec_link_error_invalid_argument): Remove prototype; will use\n        __builtin_altivec_compiletime_error(\"vec_*\") instead.\n        (vec_*): Fix/complete set of available operation overloads given the\n        existence of distinct 'vector bool ...' and 'vector pixel' types; tighten\n        cv-correctness of pointer arguments; in C, always check for correct\n        argument types before macro expansion.\n        * config/rs6000/darwin.h (SUBTARGET_OPTION_TRANSLATE_TABLE): New macro\n        defining Darwin/PowerPC-specific '-f[no-]altivec' and\n        '-W[no-]altivec-long-deprecated' switches.\n        * config/rs6000/rs6000-c (rs6000_cpu_cpp_builtins): Pre-define\n        '__vector', '__pixel' and '__bool' macros using\n        '__attribute__((altivec(...)))' types.\n        * config/rs6000/rs6000.c (bool_char_type_node, bool_short_type_node,\n        bool_int_type_node, pixel_type_node, bool_V16QI_type_node,\n        bool_V8HI_type_node, bool_V4SI_type_node, pixel_V8HI_type_node):\n        New type nodes.\n        (rs6000_warn_altivec_long, rs6000_warn_altivec_long_switch): New, for\n        handling '-W[no-]altivec-long-deprecated'.\n        (rs6000_override_options): Handle '-W[no-]altivec-long-deprecated'.\n        (rs6000_expand_binop_builtin, rs6000_expand_ternop_builtin,\n        altivec_expand_dst_builtin): Remove casts from integer literals.\n        (altivec_expand_builtin): Likewise; handle expansion of new\n        '__builtin_altivec_compiletime_error' function.\n        (rs6000_init_builtins): Initialize 'vector bool ...' and 'vector pixel'\n        types, and make them distinct from other vector types; register\n        '__builtin_altivec_compiletime_error' function.\n        (print_operand): For 'P', print a full target register name instead of\n        merely its number.\n        (rs6000_attribute_table): Add \"altivec\" attribute.\n        (rs6000_handle_altivec_attribute): New function.\n        * config/rs6000/rs6000.h (TARGET_OPTIONS): Describe\n        '-m[no-]-warn-altivec-long' (which '-W[no-]altivec-long-deprecated'\n        maps to).\n        (rs6000_warn_altivec_long, rs6000_warn_altivec_long_switch): Forward\n        declare.\n        (ALTIVEC_BUILTIN_COMPILETIME_ERROR): New built-in enumeration.\n\n[gcc/testsuite/ChangeLog]\n2004-02-21  Ziemowit Laski  <zlaski@apple.com>\n\n        * g++.dg/ext/altivec-1.C: Generalize target triple.\n        * g++.dg/ext/altivec-2.C: New test case.\n        * g++.dg/ext/altivec_check.h: New file.\n        * gcc.dg/altivec-1.c: Generalize target triple;\n        include altivec_check.h and call altivec_check().\n        * gcc.dg/altivec-[2-5].c: Generalize target triple.\n        * gcc.dg/altivec-6.c: New test case.\n        * gcc.dg/altivec-[7-9].c: Generalize target triple; add\n        type casts as needed.\n        * gcc.dg/altivec-10.c: Include altivec_check.h and call\n        altivec_check().\n        * gcc.dg/altivec-12.c: New test case.\n        * gcc.dg/altivec-varargs-1.c: Generalize target triple;\n        include altivec_check.h and call altivec_check().\n        * gcc.dg/altivec_check.h: New file.\n\nFrom-SVN: r78215", "tree": {"sha": "8bd6d09894d4d7c86a92f0efa79eaed29b427518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bd6d09894d4d7c86a92f0efa79eaed29b427518"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bb418a3d5c47572c382c7b8f195526247c02a1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bb418a3d5c47572c382c7b8f195526247c02a1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bb418a3d5c47572c382c7b8f195526247c02a1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bb418a3d5c47572c382c7b8f195526247c02a1f/comments", "author": null, "committer": null, "parents": [{"sha": "06a419ffdb7cc68db677bf524008038934ace4ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06a419ffdb7cc68db677bf524008038934ace4ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06a419ffdb7cc68db677bf524008038934ace4ed"}], "stats": {"total": 5734, "additions": 4350, "deletions": 1384}, "files": [{"sha": "d3fc0db66a9d295d970bdb4872ac46e0e9020d23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -1,3 +1,49 @@\n+2004-02-21  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* config/darwin.h (TARGET_OPTION_TRANSLATE_TABLE): Refer to\n+\tSUBTARGET_OPTION_TRANSLATE_TABLE for architecture-specific options.\n+\t* config/i386/darwin.h (SUBTARGET_OPTION_TRANSLATE_TABLE): Define it.\n+\t* config/rs6000/altivec.h: #error out if '-maltivec' not specified.\n+\t(vector, pixel, bool): #define to __vector, __pixel and __bool.\n+\t(__un_args_eq, __bin_args_eq, __tern_args_eq): Move to C-specific\n+\tportion of header.\n+\t(__altivec_link_error_invalid_argument): Remove prototype; will use\n+\t__builtin_altivec_compiletime_error(\"vec_*\") instead.\n+\t(vec_*): Fix/complete set of available operation overloads given the\n+\texistence of distinct 'vector bool ...' and 'vector pixel' types; tighten\n+\tcv-correctness of pointer arguments; in C, always check for correct\n+\targument types before macro expansion.\n+\t* config/rs6000/darwin.h (SUBTARGET_OPTION_TRANSLATE_TABLE): New macro\n+\tdefining Darwin/PowerPC-specific '-f[no-]altivec' and\n+\t'-W[no-]altivec-long-deprecated' switches.\n+\t* config/rs6000/rs6000-c (rs6000_cpu_cpp_builtins): Pre-define\n+\t'__vector', '__pixel' and '__bool' macros using\n+\t'__attribute__((altivec(...)))' types.\n+\t* config/rs6000/rs6000.c (bool_char_type_node, bool_short_type_node,\n+\tbool_int_type_node, pixel_type_node, bool_V16QI_type_node,\n+\tbool_V8HI_type_node, bool_V4SI_type_node, pixel_V8HI_type_node):\n+\tNew type nodes.\n+\t(rs6000_warn_altivec_long, rs6000_warn_altivec_long_switch): New, for\n+\thandling '-W[no-]altivec-long-deprecated'.\n+\t(rs6000_override_options): Handle '-W[no-]altivec-long-deprecated'.\n+\t(rs6000_expand_binop_builtin, rs6000_expand_ternop_builtin,\n+\taltivec_expand_dst_builtin): Remove casts from integer literals.\n+\t(altivec_expand_builtin): Likewise; handle expansion of new\n+\t'__builtin_altivec_compiletime_error' function.\n+\t(rs6000_init_builtins): Initialize 'vector bool ...' and 'vector pixel'\n+\ttypes, and make them distinct from other vector types; register\n+\t'__builtin_altivec_compiletime_error' function.\n+\t(print_operand): For 'P', print a full target register name instead of\n+\tmerely its number.\n+\t(rs6000_attribute_table): Add \"altivec\" attribute.\n+\t(rs6000_handle_altivec_attribute): New function.\n+\t* config/rs6000/rs6000.h (TARGET_OPTIONS): Describe \n+\t'-m[no-]-warn-altivec-long' (which '-W[no-]altivec-long-deprecated'\n+\tmaps to).\n+\t(rs6000_warn_altivec_long, rs6000_warn_altivec_long_switch): Forward\n+\tdeclare.\n+\t(ALTIVEC_BUILTIN_COMPILETIME_ERROR): New built-in enumeration.\n+\n 2004-02-20  James E Wilson  <wilson@specifixinc.com>\n \n \t* config/ia64/ia64.md (shift_mix4left+1): Delete reload_completed"}, {"sha": "f56746df3845925ef1c31f6299f54e9adb18df7c", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -97,7 +97,13 @@ Boston, MA 02111-1307, USA.  */\n    Note that an option name with a prefix that matches another option\n    name, that also takes an argument, needs to be modified so the\n    prefix is different, otherwise a '*' after the shorter option will\n-   match with the longer one.  */\n+   match with the longer one.\n+   \n+   The SUBTARGET_OPTION_TRANSLATE_TABLE macro, which _must_ be defined\n+   in gcc/config/{i386,rs6000}/darwin.h, should contain any additional\n+   command-line option translations specific to the particular target\n+   architecture.  */\n+   \n #define TARGET_OPTION_TRANSLATE_TABLE \\\n   { \"-all_load\", \"-Zall_load\" },  \\\n   { \"-allowable_client\", \"-Zallowable_client\" },  \\\n@@ -124,8 +130,9 @@ Boston, MA 02111-1307, USA.  */\n   { \"-multi_module\", \"-Zmulti_module\" },  \\\n   { \"-static\", \"-static -Wa,-static\" },  \\\n   { \"-single_module\", \"-Zsingle_module\" },  \\\n-  { \"-unexported_symbols_list\", \"-Zunexported_symbols_list\" }\n-\n+  { \"-unexported_symbols_list\", \"-Zunexported_symbols_list\" }, \\\n+  SUBTARGET_OPTION_TRANSLATE_TABLE\n+  \n /* These compiler options take n arguments.  */\n \n #undef  WORD_SWITCH_TAKES_ARG"}, {"sha": "e99a253af33ede9bbaf0c662822b4d1d61bb5411", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -51,6 +51,10 @@ Boston, MA 02111-1307, USA.  */\n #define SUBTARGET_EXTRA_SPECS\t\t\t\\\n   { \"darwin_arch\", \"i386\" },\n \n+/* Use the following macro for any Darwin/x86-specific command-line option\n+   translation.  */\n+#define SUBTARGET_OPTION_TRANSLATE_TABLE\n+\n /* The Darwin assembler mostly follows AT&T syntax.  */\n #undef ASSEMBLER_DIALECT\n #define ASSEMBLER_DIALECT ASM_ATT"}, {"sha": "42779c591fdf91f6ef792597bf8feaa3a7fc1c68", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 3772, "deletions": 1328, "changes": 5100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f"}, {"sha": "6f193f739c3c8a2af3f0fa20a82631f1713d0e56", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -111,6 +111,13 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define SUBTARGET_EXTRA_SPECS\t\t\t\\\n   { \"darwin_arch\", \"ppc\" },\n \n+/* The \"-faltivec\" option should have been called \"-maltivec\" all along.  */\n+#define SUBTARGET_OPTION_TRANSLATE_TABLE\t\t\t\t\\\n+  { \"-faltivec\", \"-maltivec -include altivec.h\" },\t\\\n+  { \"-fno-altivec\", \"-mno-altivec\" },\t\\\n+  { \"-Waltivec-long-deprecated\",\t\"-mwarn-altivec-long\" }, \\\n+  { \"-Wno-altivec-long-deprecated\", \"-mno-warn-altivec-long\" }\n+\n /* Make both r2 and r3 available for allocation.  */\n #define FIXED_R2 0\n #define FIXED_R13 0"}, {"sha": "08e34af88e6a3bffed66a02104f096d52f7c0cf7", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -92,7 +92,15 @@ rs6000_cpu_cpp_builtins (cpp_reader *pfile)\n   if (! TARGET_POWER && ! TARGET_POWER2 && ! TARGET_POWERPC)\n     builtin_define (\"_ARCH_COM\");\n   if (TARGET_ALTIVEC)\n-    builtin_define (\"__ALTIVEC__\");\n+    {\n+      builtin_define (\"__ALTIVEC__\");\n+      builtin_define (\"__VEC__=10206\");\n+\n+      /* Define the AltiVec syntactic elements.  */\n+      builtin_define (\"__vector=__attribute__((altivec(vector__)))\");\n+      builtin_define (\"__pixel=__attribute__((altivec(pixel__))) unsigned short\");\n+      builtin_define (\"__bool=__attribute__((altivec(bool__))) unsigned\");\n+    }\n   if (TARGET_SPE)\n     builtin_define (\"__SPE__\");\n   if (TARGET_SOFT_FLOAT)"}, {"sha": "df30bcb5081bccd3413febc1e6148dab3e42a3d1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 208, "deletions": 6, "changes": 214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -217,6 +217,20 @@ static GTY(()) tree opaque_V2SI_type_node;\n static GTY(()) tree opaque_V2SF_type_node;\n static GTY(()) tree opaque_p_V2SI_type_node;\n \n+/* AltiVec requires a few more basic types in addition to the vector\n+   types already defined in tree.c.  */\n+static GTY(()) tree bool_char_type_node;\t/* __bool char */\n+static GTY(()) tree bool_short_type_node;\t/* __bool short */\n+static GTY(()) tree bool_int_type_node;\t\t/* __bool int */\n+static GTY(()) tree pixel_type_node;\t\t/* __pixel */\n+static GTY(()) tree bool_V16QI_type_node;\t/* __vector __bool char */\n+static GTY(()) tree bool_V8HI_type_node;\t/* __vector __bool short */\n+static GTY(()) tree bool_V4SI_type_node;\t/* __vector __bool int */\n+static GTY(()) tree pixel_V8HI_type_node;\t/* __vector __pixel */\n+\n+int rs6000_warn_altivec_long = 1;\t\t/* On by default. */\n+const char *rs6000_warn_altivec_long_switch;\n+\n const char *rs6000_traceback_name;\n static enum {\n   traceback_default = 0,\n@@ -287,6 +301,7 @@ static void rs6000_assemble_visibility (tree, int);\n #endif\n static int rs6000_ra_ever_killed (void);\n static tree rs6000_handle_longcall_attribute (tree *, tree, tree, int, bool *);\n+static tree rs6000_handle_altivec_attribute (tree *, tree, tree, int, bool *);\n extern const struct attribute_spec rs6000_attribute_table[];\n static void rs6000_set_default_type_attributes (tree);\n static void rs6000_output_function_prologue (FILE *, HOST_WIDE_INT);\n@@ -913,6 +928,17 @@ rs6000_override_options (const char *default_cpu)\n       rs6000_default_long_calls = (base[0] != 'n');\n     }\n \n+  /* Handle -m(no-)warn-altivec-long similarly.  */\n+  if (rs6000_warn_altivec_long_switch)\n+    {\n+      const char *base = rs6000_warn_altivec_long_switch;\n+      while (base[-1] != 'm') base--;\n+\n+      if (*rs6000_warn_altivec_long_switch != '\\0')\n+\terror (\"invalid option `%s'\", base);\n+      rs6000_warn_altivec_long = (base[0] != 'n');\n+    }\n+\n   /* Handle -mprioritize-restricted-insns option.  */\n   rs6000_sched_restricted_insns_priority = DEFAULT_RESTRICTED_INSNS_PRIORITY;\n   if (rs6000_sched_restricted_insns_priority_str)\n@@ -5465,6 +5491,7 @@ rs6000_expand_binop_builtin (enum insn_code icode, tree arglist, rtx target)\n       || icode == CODE_FOR_spe_evsrwiu)\n     {\n       /* Only allow 5-bit unsigned literals.  */\n+      STRIP_NOPS (arg1);\n       if (TREE_CODE (arg1) != INTEGER_CST\n \t  || TREE_INT_CST_LOW (arg1) & ~0x1f)\n \t{\n@@ -5687,6 +5714,7 @@ rs6000_expand_ternop_builtin (enum insn_code icode, tree arglist, rtx target)\n       || icode == CODE_FOR_altivec_vsldoi_16qi)\n     {\n       /* Only allow 4-bit unsigned literals.  */\n+      STRIP_NOPS (arg2);\n       if (TREE_CODE (arg2) != INTEGER_CST\n \t  || TREE_INT_CST_LOW (arg2) & ~0xf)\n \t{\n@@ -5857,6 +5885,7 @@ altivec_expand_dst_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n \t    || arg2 == error_mark_node)\n \t  return const0_rtx;\n \n+\tSTRIP_NOPS (arg2);\n \tif (TREE_CODE (arg2) != INTEGER_CST\n \t    || TREE_INT_CST_LOW (arg2) & ~0x3)\n \t  {\n@@ -5963,6 +5992,7 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n     case ALTIVEC_BUILTIN_DSS:\n       icode = CODE_FOR_altivec_dss;\n       arg0 = TREE_VALUE (arglist);\n+      STRIP_NOPS (arg0);\n       op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n       mode0 = insn_data[icode].operand[0].mode;\n \n@@ -5982,6 +6012,15 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n \n       emit_insn (gen_altivec_dss (op0));\n       return NULL_RTX;\n+      \n+    case ALTIVEC_BUILTIN_COMPILETIME_ERROR:\n+      arg0 = TREE_VALUE (arglist);\n+      while (TREE_CODE (arg0) == NOP_EXPR || TREE_CODE (arg0) == ADDR_EXPR)\n+\targ0 = TREE_OPERAND (arg0, 0);\n+      error (\"invalid parameter combination for `%s' AltiVec intrinsic\",\n+\t     TREE_STRING_POINTER (arg0));\n+\n+      return const0_rtx;\n     }\n \n   /* Expand abs* operations.  */\n@@ -6421,6 +6460,74 @@ rs6000_init_builtins (void)\n   opaque_V2SF_type_node = copy_node (V2SF_type_node);\n   opaque_p_V2SI_type_node = build_pointer_type (opaque_V2SI_type_node);\n \n+  /* The 'vector bool ...' types must be kept distinct from 'vector unsigned ...'\n+     types, especially in C++ land.  Similarly, 'vector pixel' is distinct from\n+     'vector unsigned short'.  */\n+\n+  bool_char_type_node = copy_node (unsigned_intQI_type_node);\n+  TYPE_MAIN_VARIANT (bool_char_type_node) = bool_char_type_node;\n+  bool_short_type_node = copy_node (unsigned_intHI_type_node);\n+  TYPE_MAIN_VARIANT (bool_short_type_node) = bool_short_type_node;\n+  bool_int_type_node = copy_node (unsigned_intSI_type_node);\n+  TYPE_MAIN_VARIANT (bool_int_type_node) = bool_int_type_node;\n+  pixel_type_node = copy_node (unsigned_intHI_type_node);\n+  TYPE_MAIN_VARIANT (pixel_type_node) = pixel_type_node;\n+\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n+\t\t\t\t\t    get_identifier (\"__bool char\"),\n+\t\t\t\t\t    bool_char_type_node));\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n+\t\t\t\t\t    get_identifier (\"__bool short\"),\n+\t\t\t\t\t    bool_short_type_node));\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n+\t\t\t\t\t    get_identifier (\"__bool int\"),\n+\t\t\t\t\t    bool_int_type_node));\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n+\t\t\t\t\t    get_identifier (\"__pixel\"),\n+\t\t\t\t\t    pixel_type_node));\n+\n+  bool_V16QI_type_node = make_vector (V16QImode, bool_char_type_node, 1);\n+  bool_V8HI_type_node = make_vector (V8HImode, bool_short_type_node, 1);\n+  bool_V4SI_type_node = make_vector (V4SImode, bool_int_type_node, 1);\n+  pixel_V8HI_type_node = make_vector (V8HImode, pixel_type_node, 1);\n+\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n+\t\t\t\t\t    get_identifier (\"__vector unsigned char\"),\n+\t\t\t\t\t    unsigned_V16QI_type_node));\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n+\t\t\t\t\t    get_identifier (\"__vector signed char\"),\n+\t\t\t\t\t    V16QI_type_node));\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n+\t\t\t\t\t    get_identifier (\"__vector __bool char\"),\n+\t\t\t\t\t    bool_V16QI_type_node));\n+\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n+\t\t\t\t\t    get_identifier (\"__vector unsigned short\"),\n+\t\t\t\t\t    unsigned_V8HI_type_node));\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n+\t\t\t\t\t    get_identifier (\"__vector signed short\"),\n+\t\t\t\t\t    V8HI_type_node));\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n+\t\t\t\t\t    get_identifier (\"__vector __bool short\"),\n+\t\t\t\t\t    bool_V8HI_type_node));\n+\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n+\t\t\t\t\t    get_identifier (\"__vector unsigned int\"),\n+\t\t\t\t\t    unsigned_V4SI_type_node));\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n+\t\t\t\t\t    get_identifier (\"__vector signed int\"),\n+\t\t\t\t\t    V4SI_type_node));\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n+\t\t\t\t\t    get_identifier (\"__vector __bool int\"),\n+\t\t\t\t\t    bool_V4SI_type_node));\n+\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n+\t\t\t\t\t    get_identifier (\"__vector float\"),\n+\t\t\t\t\t    V4SF_type_node));\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n+\t\t\t\t\t    get_identifier (\"__vector __pixel\"),\n+\t\t\t\t\t    pixel_V8HI_type_node));\n+\n   if (TARGET_SPE)\n     spe_init_builtins ();\n   if (TARGET_ALTIVEC)\n@@ -6771,11 +6878,14 @@ altivec_init_builtins (void)\n     = build_function_type_list (V16QI_type_node, V16QI_type_node, NULL_TREE);\n   tree v4sf_ftype_v4sf\n     = build_function_type_list (V4SF_type_node, V4SF_type_node, NULL_TREE);\n-  tree void_ftype_pcvoid_int_char\n+  tree void_ftype_pcvoid_int_int\n     = build_function_type_list (void_type_node,\n \t\t\t\tpcvoid_type_node, integer_type_node,\n-\t\t\t\tchar_type_node, NULL_TREE);\n-  \n+\t\t\t\tinteger_type_node, NULL_TREE);\n+  tree int_ftype_pcchar\n+    = build_function_type_list (integer_type_node,\n+\t\t\t\tpcchar_type_node, NULL_TREE);\n+\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_ld_internal_4sf\", v4sf_ftype_pcfloat,\n \t       ALTIVEC_BUILTIN_LD_INTERNAL_4sf);\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_st_internal_4sf\", void_ftype_pfloat_v4sf,\n@@ -6809,10 +6919,14 @@ altivec_init_builtins (void)\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvebx\", void_ftype_v16qi_long_pvoid, ALTIVEC_BUILTIN_STVEBX);\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvehx\", void_ftype_v8hi_long_pvoid, ALTIVEC_BUILTIN_STVEHX);\n \n+  /* See altivec.h for usage of \"__builtin_altivec_compiletime_error\".  */\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_compiletime_error\", int_ftype_pcchar,\n+\t       ALTIVEC_BUILTIN_COMPILETIME_ERROR);\n+\n   /* Add the DST variants.  */\n   d = (struct builtin_description *) bdesc_dst;\n   for (i = 0; i < ARRAY_SIZE (bdesc_dst); i++, d++)\n-    def_builtin (d->mask, d->name, void_ftype_pcvoid_int_char, d->code);\n+    def_builtin (d->mask, d->name, void_ftype_pcvoid_int_int, d->code);\n \n   /* Initialize the predicates.  */\n   dp = (struct builtin_description_predicates *) bdesc_altivec_preds;\n@@ -8896,12 +9010,12 @@ print_operand (FILE *file, rtx x, int code)\n \n     case 'P':\n       /* The operand must be an indirect memory reference.  The result\n-\t is the register number.  */\n+\t is the register name.  */\n       if (GET_CODE (x) != MEM || GET_CODE (XEXP (x, 0)) != REG\n \t  || REGNO (XEXP (x, 0)) >= 32)\n \toutput_operand_lossage (\"invalid %%P value\");\n       else\n-\tfprintf (file, \"%d\", REGNO (XEXP (x, 0)));\n+\tfprintf (file, \"%s\", reg_names[REGNO (XEXP (x, 0))]);\n       return;\n \n     case 'q':\n@@ -14546,11 +14660,99 @@ rs6000_initialize_trampoline (rtx addr, rtx fnaddr, rtx cxt)\n const struct attribute_spec rs6000_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n+  { \"altivec\",   1, 1, false, true,  false, rs6000_handle_altivec_attribute },\n   { \"longcall\",  0, 0, false, true,  true,  rs6000_handle_longcall_attribute },\n   { \"shortcall\", 0, 0, false, true,  true,  rs6000_handle_longcall_attribute },\n   { NULL,        0, 0, false, false, false, NULL }\n };\n \n+/* Handle the \"altivec\" attribute.  The attribute may have\n+   arguments as follows:\n+   \n+\t__attribute__((altivec(vector__)))\n+\t__attribute__((altivec(pixel__)))\t(always followed by 'unsigned short')\n+\t__attribute__((altivec(bool__)))\t(always followed by 'unsigned')\n+\n+  and may appear more than once (e.g., 'vector bool char') in a\n+  given declaration.  */\n+\n+static tree\n+rs6000_handle_altivec_attribute (tree *node, tree name, tree args,\n+\t\t\t\t int flags ATTRIBUTE_UNUSED,\n+\t\t\t\t bool *no_add_attrs)\n+{\n+  tree type = *node, result = NULL_TREE;\n+  enum machine_mode mode;\n+  int unsigned_p;\n+  char altivec_type\n+    = ((args && TREE_CODE (args) == TREE_LIST && TREE_VALUE (args)\n+\t&& TREE_CODE (TREE_VALUE (args)) == IDENTIFIER_NODE)\n+       ? *IDENTIFIER_POINTER (TREE_VALUE (args))\n+       : '?'); \n+\n+  while (POINTER_TYPE_P (type)\n+\t || TREE_CODE (type) == FUNCTION_TYPE\n+\t || TREE_CODE (type) == METHOD_TYPE\n+\t || TREE_CODE (type) == ARRAY_TYPE)\n+    type = TREE_TYPE (type);\n+\n+  mode = TYPE_MODE (type);\n+\n+  if (rs6000_warn_altivec_long\n+      && (type == long_unsigned_type_node || type == long_integer_type_node))\n+    warning (\"use of 'long' in AltiVec types is deprecated; use 'int'\");\n+\n+  switch (altivec_type)\n+    {\n+    case 'v':\n+      unsigned_p = TREE_UNSIGNED (type);\n+      switch (mode)\n+\t{\n+\t  case SImode:\n+\t    result = (unsigned_p ? unsigned_V4SI_type_node : V4SI_type_node);\n+\t    break;\n+\t  case HImode:\n+\t    result = (unsigned_p ? unsigned_V8HI_type_node : V8HI_type_node);\n+\t    break;\n+\t  case QImode:\n+\t    result = (unsigned_p ? unsigned_V16QI_type_node : V16QI_type_node);\n+\t    break;\n+\t  case SFmode: result = V4SF_type_node; break;\n+\t    /* If the user says 'vector int bool', we may be handed the 'bool'\n+\t       attribute _before_ the 'vector' attribute, and so select the proper\n+\t       type in the 'b' case below.  */\n+\t  case V4SImode: case V8HImode: case V16QImode: result = type;\n+\t  default: break;\n+\t}\n+      break;\n+    case 'b':\n+      switch (mode)\n+\t{\n+\t  case SImode: case V4SImode: result = bool_V4SI_type_node; break;\n+\t  case HImode: case V8HImode: result = bool_V8HI_type_node; break;\n+\t  case QImode: case V16QImode: result = bool_V16QI_type_node;\n+\t  default: break;\n+\t}\n+      break;\n+    case 'p':\n+      switch (mode)\n+\t{\n+\t  case V8HImode: result = pixel_V8HI_type_node;\n+\t  default: break;\n+\t}\n+    default: break;\n+    }\n+\n+  *no_add_attrs = true;  /* No need to hang on to the attribute.  */\n+\n+  if (!result)\n+    warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+  else\n+    *node = reconstruct_complex_type (*node, result);\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"longcall\" or \"shortcall\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "ccceb176f55a583f39296927a23a7e10d2f5bac3", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -452,6 +452,9 @@ enum group_termination\n    {\"longcall\", &rs6000_longcall_switch,\t\t\t\t\\\n     N_(\"Avoid all range limits on call instructions\"), 0},\t\t\\\n    {\"no-longcall\", &rs6000_longcall_switch, \"\", 0},\t\t\t\\\n+   {\"warn-altivec-long\", &rs6000_warn_altivec_long_switch, \\\n+    N_(\"Warn about deprecated 'vector long ...' AltiVec type usage\"), 0}, \\\n+   {\"no-warn-altivec-long\", &rs6000_warn_altivec_long_switch, \"\", 0}, \\\n    {\"sched-costly-dep=\", &rs6000_sched_costly_dep_str,                  \\\n     N_(\"Determine which dependences between insns are considered costly\"), 0}, \\\n    {\"insert-sched-nops=\", &rs6000_sched_insert_nops_str,                \\\n@@ -520,6 +523,9 @@ extern enum rs6000_dependence_cost rs6000_sched_costly_dep;\n extern const char *rs6000_sched_insert_nops_str;\n extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n \n+extern int rs6000_warn_altivec_long;\n+extern const char *rs6000_warn_altivec_long_switch;\n+\n /* Alignment options for fields in structures for sub-targets following\n    AIX-like ABI.\n    ALIGN_POWER word-aligns FP doubles (default AIX ABI).\n@@ -2911,9 +2917,11 @@ enum rs6000_builtins\n   ALTIVEC_BUILTIN_ABS_V4SI,\n   ALTIVEC_BUILTIN_ABS_V4SF,\n   ALTIVEC_BUILTIN_ABS_V8HI,\n-  ALTIVEC_BUILTIN_ABS_V16QI\n+  ALTIVEC_BUILTIN_ABS_V16QI,\n+  ALTIVEC_BUILTIN_COMPILETIME_ERROR,\n+\n   /* SPE builtins.  */\n-  , SPE_BUILTIN_EVADDW,\n+  SPE_BUILTIN_EVADDW,\n   SPE_BUILTIN_EVAND,\n   SPE_BUILTIN_EVANDC,\n   SPE_BUILTIN_EVDIVWS,"}, {"sha": "a69f71ee81fb9e43a928bf3e2f22b1ee4eb47c2b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -1,3 +1,21 @@\n+2004-02-21  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* g++.dg/ext/altivec-1.C: Generalize target triple.\n+\t* g++.dg/ext/altivec-2.C: New test case.\n+\t* g++.dg/ext/altivec_check.h: New file.\n+\t* gcc.dg/altivec-1.c: Generalize target triple;\n+\tinclude altivec_check.h and call altivec_check().\n+\t* gcc.dg/altivec-[2-5].c: Generalize target triple.\n+\t* gcc.dg/altivec-6.c: New test case.\n+\t* gcc.dg/altivec-[7-9].c: Generalize target triple; add\n+\ttype casts as needed.\n+\t* gcc.dg/altivec-10.c: Include altivec_check.h and call \n+\taltivec_check().\n+\t* gcc.dg/altivec-12.c: New test case.\n+\t* gcc.dg/altivec-varargs-1.c: Generalize target triple;\n+\tinclude altivec_check.h and call altivec_check().\n+\t* gcc.dg/altivec_check.h: New file.\n+\n 2004-02-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* lib/target-supports.exp (check_alias_available): Don't mangle"}, {"sha": "09c234332970fb49b1522fdd4f3058a7a7692b12", "filename": "gcc/testsuite/g++.dg/ext/altivec-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-1.C?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target powerpc-*-* } } */\n+/* { dg-do compile { target powerpc*-*-* } } */\n /* { dg-options \"-maltivec\" } */\n \n #include <altivec.h>"}, {"sha": "4c9518a9f2da79ef283af565e5c4db5d3dd74614", "filename": "gcc/testsuite/g++.dg/ext/altivec-2.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-2.C?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-options \"-maltivec -Wall\" } */\n+\n+/* This test checks if AltiVec builtins accept const-qualified\n+   arguments.  */\n+\n+#include <altivec.h>\n+#include \"altivec_check.h\"\n+\n+int main (int argc, const char * argv[])\n+{\n+  int i;\n+  const float cf = 1.0;\n+  vector float v;\n+  const vector float cv = (vector float){1.0, 2.0, 3.0, 4.0};\n+\n+  altivec_check ();\n+\n+  vec_dst(&cv, i, 0);\n+  v = vec_ld(0, &cv);\t\n+  v = vec_lde(0, &cf);\n+  vec_lvsl(0, &cf);\n+  \n+  return 0;\n+}"}, {"sha": "4f12d850207008472be95b78515989e79d5f6d1a", "filename": "gcc/testsuite/g++.dg/ext/altivec_check.h", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec_check.h?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -0,0 +1,23 @@\n+/* A runtime check for AltiVec capability.  */\n+/* Contributed by Ziemowit Laski  <zlaski@apple.com>  */\n+\n+#include <signal.h>\n+extern void exit(int);\n+\n+void \n+sig_ill_handler (int sig)\n+{\n+    exit (0);\n+}\n+\n+void altivec_check(void) {\n+\n+  /* Exit on systems without AltiVec.  */\n+  signal (SIGILL, sig_ill_handler);\n+#ifdef __MACH__\n+  asm volatile (\"vor v0,v0,v0\");\n+#else\n+  asm volatile (\"vor 0,0,0\");\n+#endif\n+  signal (SIGILL, SIG_DFL);\n+}"}, {"sha": "59654bee2c9b9f37f02e3b53a91ca253163b7120", "filename": "gcc/testsuite/gcc.dg/altivec-1.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-1.c?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -1,9 +1,10 @@\n-/* { dg-do run { target powerpc-*-*altivec powerpc-*-*-*altivec } } */\n+/* { dg-do run { target powerpc*-*-* } } */\n /* { dg-options \"-maltivec\" } */\n \n /* Program to test PowerPC AltiVec instructions.  */\n \n #include <altivec.h>\n+#include \"altivec_check.h\"\n \n extern void abort (void);\n \n@@ -22,6 +23,8 @@ vector float f, g, h;\n \n int main ()\n {\n+  altivec_check();  /* Exits if AltiVec not supported */\n+\n   k = vec_add (a1, a2);\n   if (!vec_all_eq (addi, k))\n     abort ();"}, {"sha": "a0225a4dd783a3b514b7540dfec9286cc1136b57", "filename": "gcc/testsuite/gcc.dg/altivec-10.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-10.c?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -4,11 +4,7 @@\n #include <altivec.h>\n #include <signal.h>\n \n-void \n-sig_ill_handler (int sig)\n-{\n-    exit(0);\n-}\n+#include \"altivec_check.h\"\n \n typedef union\n {\n@@ -62,7 +58,7 @@ check_cmple()\n {\n   vector float a = {1.0, 2.0, 3.0, 4.0};\n   vector float b = {1.0, 3.0, 2.0, 5.0};\n-  vector signed int aux;\n+  vector bool int aux;\n   vector signed int le = {-1, -1, 0, -1};\n \n   aux = vec_cmple (a, b);\n@@ -75,10 +71,7 @@ check_cmple()\n int \n main()\n {\n-  /* Exit on systems without altivec.  */\n-  signal (SIGILL, sig_ill_handler);\n-  asm volatile (\"vor 0,0,0\");\n-  signal (SIGILL, SIG_DFL);\n+  altivec_check ();\n \n   check_cmple ();\n   check_vec_all_num ();"}, {"sha": "ae9cdf42c439e47e3444e8747cc62ace8bc4c176", "filename": "gcc/testsuite/gcc.dg/altivec-12.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-12.c?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-do run { target powerpc*-*-darwin* } } */\n+/* { dg-options \"-faltivec\" } */\n+\n+/* Program to test PowerPC AltiVec instructions.  */\n+\n+#include \"altivec_check.h\"\n+\n+extern void abort (void);\n+#define CHECK_IF(E) if(!(E)) abort()\n+\n+vector int a1 = (vector int){ 100, 200, 300, 400 };\n+vector int a2 = (vector int){ 500, 600, 700, 800 };\n+vector int addi = (vector int){ 600, 800, 1000, 1200 };\n+vector int avgi = (vector int){ 300, 400, 500, 600 };\n+\n+vector float f1 = (vector float){ 1.0, 2.0, 3.0, 4.0 };\n+vector float f2 = (vector float){ 5.0, 6.0, 7.0, 8.0 };\n+vector float f3;\n+vector float addf1 = (vector float){ 6.0, 8.0, 10.0, 12.0 };\n+vector float addf2 = (vector float){ 6.1, 8.1, 10.1, 12.1 };\n+vector float addf3 = (vector float){ 6.0, 8.0, 9.9, 12.1 };\n+vector int k;\n+vector float f, g, h;\n+\n+int main ()\n+{\n+\n+  altivec_check();  /* Exit if AltiVec not available.  */\n+\n+  k = vec_add (a1, a2);\n+  CHECK_IF (vec_all_eq (addi, k));\n+  CHECK_IF (vec_all_ge (addi, k));\n+  CHECK_IF (vec_all_le (addi, k));\n+  CHECK_IF (vec_any_eq (addi, k));\n+  CHECK_IF (vec_any_ge (addi, k));\n+  CHECK_IF (vec_any_le (addi, k));\n+  CHECK_IF (!vec_any_ne (addi, k));\n+  CHECK_IF (!vec_any_lt (addi, k));\n+  CHECK_IF (!vec_any_gt (addi, k));\n+  CHECK_IF (!vec_any_ne (addi, k));\n+  CHECK_IF (!vec_any_lt (addi, k));\n+  CHECK_IF (!vec_any_gt (addi, k));\n+\n+  k = vec_avg (a1, a2);\n+  CHECK_IF (vec_all_eq (k, avgi));\n+\n+  h = vec_add (f1, f2);\n+  CHECK_IF (vec_all_eq (h, addf1));\n+  CHECK_IF (vec_all_ge (h, addf1));\n+  CHECK_IF (vec_all_le (h, addf1));\n+  CHECK_IF (vec_any_eq (h, addf1));\n+  CHECK_IF (vec_any_ge (h, addf1));\n+  CHECK_IF (vec_any_le (h, addf1));\n+  CHECK_IF (!vec_any_ne (h, addf1));\n+  CHECK_IF (!vec_any_lt (h, addf1));\n+  CHECK_IF (!vec_any_gt (h, addf1));\n+  CHECK_IF (!vec_any_ne (h, addf1));\n+  CHECK_IF (!vec_any_lt (h, addf1));\n+  CHECK_IF (!vec_any_gt (h, addf1));\n+\n+  CHECK_IF (vec_all_gt (addf2, addf1));\n+  CHECK_IF (vec_any_gt (addf2, addf1));\n+  CHECK_IF (vec_all_ge (addf2, addf1));\n+  CHECK_IF (vec_any_ge (addf2, addf1));\n+  CHECK_IF (vec_all_ne (addf2, addf1));\n+  CHECK_IF (vec_any_ne (addf2, addf1));\n+  CHECK_IF (!vec_all_lt (addf2, addf1));\n+  CHECK_IF (!vec_any_lt (addf2, addf1));\n+  CHECK_IF (!vec_all_le (addf2, addf1));\n+  CHECK_IF (!vec_any_le (addf2, addf1));\n+  CHECK_IF (!vec_all_eq (addf2, addf1));\n+  CHECK_IF (!vec_any_eq (addf2, addf1));\n+\n+  CHECK_IF (vec_any_eq (addf3, addf1));\n+  CHECK_IF (vec_any_ne (addf3, addf1));\n+  CHECK_IF (vec_any_lt (addf3, addf1));\n+  CHECK_IF (vec_any_le (addf3, addf1));\n+  CHECK_IF (vec_any_gt (addf3, addf1));\n+  CHECK_IF (vec_any_ge (addf3, addf1));\n+  CHECK_IF (!vec_all_eq (addf3, addf1));\n+  CHECK_IF (!vec_all_ne (addf3, addf1));\n+  CHECK_IF (!vec_all_lt (addf3, addf1));\n+  CHECK_IF (!vec_all_le (addf3, addf1));\n+  CHECK_IF (!vec_all_gt (addf3, addf1));\n+  CHECK_IF (!vec_all_ge (addf3, addf1));\n+\n+  CHECK_IF (vec_all_numeric (addf3));\n+  CHECK_IF (vec_all_in (addf1, addf2));\n+\n+  CHECK_IF (vec_step (vector bool char) == 16);\n+  CHECK_IF (vec_step (addf3) == 4);\n+\n+  return 0;\n+}"}, {"sha": "f64081ff8134ec8d859a989dc3c69221aec917a1", "filename": "gcc/testsuite/gcc.dg/altivec-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-2.c?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target powerpc-*-* } } */\n+/* { dg-do compile { target powerpc*-*-* } } */\n /* { dg-options \"-maltivec\" } */\n \n /* Program to test the vector_size attribute.  This needs to run on a"}, {"sha": "1321a729a9a4470db2f75c29eb5b8c50972937ba", "filename": "gcc/testsuite/gcc.dg/altivec-3.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-3.c?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -1,6 +1,8 @@\n-/* { dg-do run { target powerpc-*-*altivec powerpc-*-*-*altivec } } */\n+/* { dg-do run { target powerpc*-*-* } } */\n /* { dg-options \"-maltivec\" } */\n \n+#include \"altivec_check.h\"\n+\n typedef int int4 __attribute__ ((mode(V4SI)));\n typedef float float4 __attribute__ ((mode(V4SF)));\n \n@@ -55,6 +57,8 @@ main ()\n   float4 f3 = (float4) { 6.0, 8.0, 10.0, 12.0 };\n   float4 ftmp;\n \n+  altivec_check ();\n+\n   vec_store (i3, a3);\n   itmp = vec_add_int4 (a1, a2);\n   vec_store (j3, itmp);"}, {"sha": "175663581ac31629b33925566fb310f35e1a535a", "filename": "gcc/testsuite/gcc.dg/altivec-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-4.c?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target powerpc-*-* } } */\n+/* { dg-do compile { target powerpc*-*-* } } */\n /* { dg-options \"-maltivec -O0 -Wall\" } */\n \n #define vector __attribute__((vector_size(16)))"}, {"sha": "0adfdb84d1949c23912fa0e502d211337ee20810", "filename": "gcc/testsuite/gcc.dg/altivec-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-5.c?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target powerpc-*-* } } */\n+/* { dg-do compile { target powerpc*-*-* } } */\n /* { dg-options \"-maltivec -O2\" } */\n \n #define vector __attribute__((vector_size(16)))"}, {"sha": "85e597fabe30e40b35122e91f096c392b494cc75", "filename": "gcc/testsuite/gcc.dg/altivec-6.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-6.c?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do compile { target powerpc-*-darwin* } } */\n+/* { dg-options \"-faltivec -O0 -Wall\" } */\n+\n+\n+/* These denote \"generic\" GCC vectors.  */\n+static int __attribute__((mode(V4SI))) x, y;\n+\n+static vector signed int i,j;\n+static vector signed short s,t;\n+static vector signed char c,d;\n+static vector float f,g;\n+\n+static vector unsigned char uc;\n+\n+static vector signed int *pi;\n+\n+static int int1, int2;\n+\n+void\n+b()\n+{\n+  vec_add (x, y);\n+\n+  /* Make sure the predicates accept correct argument types.  */\n+\n+  int1 = vec_all_in (f, g);\n+  int1 = vec_all_ge (f, g);\n+  int1 = vec_all_eq (c, d);\n+  int1 = vec_all_ne (s, t);\n+  int1 = vec_any_eq (i, j);\n+  int1 = vec_any_ge (f, g);\n+  int1 = vec_all_ngt (f, g);\n+  int1 = vec_any_ge (c, d);\n+  int1 = vec_any_ge (s, t);\n+  int1 = vec_any_ge (i, j);\n+  int1 = vec_any_ge (c, d);\n+  int1 = vec_any_ge (s, t);\n+  int1 = vec_any_ge (i, j);\n+\n+  vec_mtvscr (i);\n+  vec_dssall ();\n+  s = (vector signed short) vec_mfvscr ();\n+  vec_dss (3);\n+\n+  vec_dst (pi, int1 + int2, 3);\n+  vec_dstst (pi, int1 + int2, 3);\n+  vec_dststt (pi, int1 + int2, 3);\n+  vec_dstt (pi, int1 + int2, 3);\n+\n+  uc = (vector unsigned char) vec_lvsl (int1 + 69, (signed int *) pi);\n+  uc = (vector unsigned char) vec_lvsr (int1 + 69, (signed int *) pi);\n+\n+  c = vec_lde (int1, (signed char *) pi);\n+  s = vec_lde (int1, (signed short *) pi);\n+  i = vec_lde (int1, (signed int *) pi);\n+  i = vec_ldl (int1, pi);\n+  i = vec_ld (int1, pi);\n+\n+  vec_st (i, int2, pi);\n+  vec_ste (c, int2, (signed char *) pi);\n+  vec_ste (s, int2, (signed short *) pi);\n+  vec_ste (i, int2, (signed int *) pi);\n+  vec_stl (i, int2, pi);\n+}"}, {"sha": "bb04b50bdf0e2d122a74f8f82866224da8855d5a", "filename": "gcc/testsuite/gcc.dg/altivec-7.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-7.c?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -1,6 +1,6 @@\n /* Origin: Aldy Hernandez  <aldyh@redhat.com>  */\n \n-/* { dg-do compile { target powerpc-*-* } } */\n+/* { dg-do compile { target powerpc*-*-* } } */\n /* { dg-options \"-maltivec\" } */\n \n #include <altivec.h>\n@@ -10,19 +10,19 @@ int *var_int;\n unsigned long **ulongp;\n vector pixel *varpixel;\n vector signed char *vecchar;\n-vector signed long *vecint;\n+vector signed long *vecint;       /* { dg-warning \"use of .long. in AltiVec types is deprecated; use .int.\" } */\n vector signed short *vecshort;\n vector unsigned char *vecuchar;\n-vector unsigned long *vecuint;\n+vector unsigned long *vecuint;    /* { dg-warning \"use of .long. in AltiVec types is deprecated; use .int.\" } */\n vector unsigned short *vecushort;\n vector float *vecfloat;\n \n int main ()\n {\n-  *vecfloat++ = vec_andc(vecint[0], vecfloat[1]);\n-  *vecfloat++ = vec_andc(vecfloat[0], vecint[1]);\n-  *vecfloat++ = vec_vxor(vecint[0], vecfloat[1]);\n-  *vecfloat++ = vec_vxor(vecfloat[0], vecint[1]);\n+  *vecfloat++ = vec_andc((vector bool int)vecint[0], vecfloat[1]);\n+  *vecfloat++ = vec_andc(vecfloat[0], (vector bool int)vecint[1]);\n+  *vecfloat++ = vec_vxor((vector bool int)vecint[0], vecfloat[1]);\n+  *vecfloat++ = vec_vxor(vecfloat[0], (vector bool int)vecint[1]);\n   *varpixel++ = vec_packpx(vecuint[0], vecuint[1]);\n   *varpixel++ = vec_vpkpx(vecuint[0], vecuint[1]);\n   *vecshort++ = vec_vmulosb(vecchar[0], vecchar[1]);\n@@ -32,14 +32,14 @@ int main ()\n   *vecint++ = vec_lvewx(var_int[0], longp[1]);\n   *vecint++ = vec_unpackh(vecshort[0]);\n   *vecint++ = vec_unpackl(vecshort[0]);\n-  *vecushort++ = vec_andc(vecshort[0], vecushort[1]);\n-  *vecushort++ = vec_andc(vecushort[0], vecshort[1]);\n-  *vecushort++ = vec_vxor(vecshort[0], vecushort[1]);\n-  *vecushort++ = vec_vxor(vecushort[0], vecshort[1]);\n+  *vecushort++ = vec_andc((vector bool short)vecshort[0], vecushort[1]);\n+  *vecushort++ = vec_andc(vecushort[0], (vector bool short)vecshort[1]);\n+  *vecushort++ = vec_vxor((vector bool short)vecshort[0], vecushort[1]);\n+  *vecushort++ = vec_vxor(vecushort[0], (vector bool short)vecshort[1]);\n   *vecuint++ = vec_ld(var_int[0], ulongp[1]);\n   *vecuint++ = vec_lvx(var_int[0], ulongp[1]);\n   *vecuint++ = vec_vmsumubm(vecuchar[0], vecuchar[1], vecuint[2]);\n-  *vecuchar++ = vec_xor(vecuchar[0], vecchar[1]);\n+  *vecuchar++ = vec_xor(vecuchar[0], (vector unsigned char)vecchar[1]);\n \n   return 0;\n }"}, {"sha": "bbd2cf7a3253a85725890c4eb1d279fb2020724f", "filename": "gcc/testsuite/gcc.dg/altivec-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-8.c?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -1,7 +1,7 @@\n /* Origin: Aldy Hernandez  <aldyh@redhat.com>  */\n /* Test rs6000_legitimate_address.  PRE_INC should be invalid.  */\n \n-/* { dg-do compile { target powerpc-*-* } } */\n+/* { dg-do compile { target powerpc*-*-* } } */\n /* { dg-options \"-maltivec\" } */\n \n #include <altivec.h>"}, {"sha": "36c79d3453b1e8a76a0b184f0135910cb2d421ec", "filename": "gcc/testsuite/gcc.dg/altivec-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-9.c?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target powerpc-*-* } } */\n+/* { dg-do compile { target powerpc*-*-* } } */\n /* { dg-options \"-maltivec -mabi=altivec -g\" } */\n \n /* PR9564 */"}, {"sha": "14e5e6ee9768452cbc22548e8fe85e3aa2874e1e", "filename": "gcc/testsuite/gcc.dg/altivec-varargs-1.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-varargs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-varargs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-varargs-1.c?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -1,9 +1,11 @@\n-/* { dg-do run { target powerpc*-*-darwin* powerpc*-*-*altivec* powerpc*-*-linux*} } */\n+/* { dg-do run { target powerpc*-*-* } } */\n /* { dg-options \"-maltivec -mabi=altivec -fno-inline\" } */\n \n #include <stdarg.h>\n #include <signal.h>\n \n+#include \"altivec_check.h\"\n+\n #define vector __attribute__((mode(V4SI)))\n \n const vector unsigned int v1 = {10,11,12,13};\n@@ -72,19 +74,10 @@ int main1(void)\n   return 0;\n }\n \n-void \n-sig_ill_handler (int sig)\n-{\n-    exit(0);\n-}\n-\n int main (void)\n {\n-  /* Exit on systems without altivec.  */\n-  signal (SIGILL, sig_ill_handler);\n-  /* Altivec instruction, 'vor %v0,%v0,%v0'.  */\n-  asm volatile (\".long 0x10000484\");\n-  signal (SIGILL, SIG_DFL);\n+  /* Exit on systems without AltiVec.  */\n+  altivec_check ();\n \n   return main1 ();\n }"}, {"sha": "c64d918c9d5a5125a6441d8b38d362e7a3cc5afe", "filename": "gcc/testsuite/gcc.dg/altivec_check.h", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec_check.h?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -0,0 +1,23 @@\n+/* A runtime check for AltiVec capability.  */\n+/* Contributed by Ziemowit Laski  <zlaski@apple.com>  */\n+\n+#include <signal.h>\n+extern void exit (int);\n+\n+void \n+sig_ill_handler (int sig)\n+{\n+    exit (0);\n+}\n+\n+void altivec_check(void) {\n+\n+  /* Exit on systems without AltiVec.  */\n+  signal (SIGILL, sig_ill_handler);\n+#ifdef __MACH__\n+  asm volatile (\"vor v0,v0,v0\");\n+#else\n+  asm volatile (\"vor 0,0,0\");\n+#endif\n+  signal (SIGILL, SIG_DFL);\n+}"}, {"sha": "3ae78d198ad741c70c89027b06bf8fc4deb6bd54", "filename": "libf2c/libI77/config.h.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/libf2c%2FlibI77%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/libf2c%2FlibI77%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fconfig.h.in?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -1,4 +1,4 @@\n-/* config.h.in.  Generated automatically from configure.in by autoheader 2.13.  */\n+/* config.h.in.  Generated automatically from configure.in by autoheader.  */\n \n /* Define to empty if the keyword does not work.  */\n #undef const"}, {"sha": "e6d5af240a1d594dd16c7ff091507d643621eab3", "filename": "libf2c/libU77/config.hin", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb418a3d5c47572c382c7b8f195526247c02a1f/libf2c%2FlibU77%2Fconfig.hin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb418a3d5c47572c382c7b8f195526247c02a1f/libf2c%2FlibU77%2Fconfig.hin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fconfig.hin?ref=8bb418a3d5c47572c382c7b8f195526247c02a1f", "patch": "@@ -1,4 +1,4 @@\n-/* config.hin.  Generated automatically from configure.in by autoheader 2.13.  */\n+/* config.hin.  Generated automatically from configure.in by autoheader.  */\n \n /* Define to empty if the keyword does not work.  */\n #undef const"}]}