{"sha": "27086ea39f16addb987edb4719afb7cd9b01800c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcwODZlYTM5ZjE2YWRkYjk4N2VkYjQ3MTlhZmI3Y2Q5YjAxODAwYw==", "commit": {"author": {"name": "Michael Collison", "email": "michael.collison@arm.com", "date": "2018-01-11T06:04:17Z"}, "committer": {"name": "Michael Collison", "email": "collison@gcc.gnu.org", "date": "2018-01-11T06:04:17Z"}, "message": "aarch64-modes.def (V2HF): New VECTOR_MODE.\n\n2018-01-10  Michael Collison  <michael.collison@arm.com>\n\n\t* config/aarch64/aarch64-modes.def (V2HF): New VECTOR_MODE.\n\t* config/aarch64/aarch64-option-extension.def: Add\n\tAARCH64_OPT_EXTENSION of 'fp16fml'.\n\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins):\n\t(__ARM_FEATURE_FP16_FML): Define if TARGET_F16FML is true.\n\t* config/aarch64/predicates.md (aarch64_lane_imm3): New predicate.\n\t* config/aarch64/constraints.md (Ui7): New constraint.\n\t* config/aarch64/iterators.md (VFMLA_W): New mode iterator.\n\t(VFMLA_SEL_W): Ditto.\n\t(f16quad): Ditto.\n\t(f16mac1): Ditto.\n\t(VFMLA16_LOW): New int iterator.\n\t(VFMLA16_HIGH): Ditto.\n\t(UNSPEC_FMLAL): New unspec.\n\t(UNSPEC_FMLSL): Ditto.\n\t(UNSPEC_FMLAL2): Ditto.\n\t(UNSPEC_FMLSL2): Ditto.\n\t(f16mac): New code attribute.\n\t* config/aarch64/aarch64-simd-builtins.def\n\t(aarch64_fmlal_lowv2sf): Ditto.\n\t(aarch64_fmlsl_lowv2sf): Ditto.\n\t(aarch64_fmlalq_lowv4sf): Ditto.\n\t(aarch64_fmlslq_lowv4sf): Ditto.\n\t(aarch64_fmlal_highv2sf): Ditto.\n\t(aarch64_fmlsl_highv2sf): Ditto.\n\t(aarch64_fmlalq_highv4sf): Ditto.\n\t(aarch64_fmlslq_highv4sf): Ditto.\n\t(aarch64_fmlal_lane_lowv2sf): Ditto.\n\t(aarch64_fmlsl_lane_lowv2sf): Ditto.\n\t(aarch64_fmlal_laneq_lowv2sf): Ditto.\n\t(aarch64_fmlsl_laneq_lowv2sf): Ditto.\n\t(aarch64_fmlalq_lane_lowv4sf): Ditto.\n\t(aarch64_fmlsl_lane_lowv4sf): Ditto.\n\t(aarch64_fmlalq_laneq_lowv4sf): Ditto.\n\t(aarch64_fmlsl_laneq_lowv4sf): Ditto.\n\t(aarch64_fmlal_lane_highv2sf): Ditto.\n\t(aarch64_fmlsl_lane_highv2sf): Ditto.\n\t(aarch64_fmlal_laneq_highv2sf): Ditto.\n\t(aarch64_fmlsl_laneq_highv2sf): Ditto.\n\t(aarch64_fmlalq_lane_highv4sf): Ditto.\n\t(aarch64_fmlsl_lane_highv4sf): Ditto.\n\t(aarch64_fmlalq_laneq_highv4sf): Ditto.\n\t(aarch64_fmlsl_laneq_highv4sf): Ditto.\n\t* config/aarch64/aarch64-simd.md:\n\t(aarch64_fml<f16mac1>l<f16quad>_low<mode>): New pattern.\n\t(aarch64_fml<f16mac1>l<f16quad>_high<mode>): Ditto.\n\t(aarch64_simd_fml<f16mac1>l<f16quad>_low<mode>): Ditto.\n\t(aarch64_simd_fml<f16mac1>l<f16quad>_high<mode>): Ditto.\n\t(aarch64_fml<f16mac1>l_lane_lowv2sf): Ditto.\n\t(aarch64_fml<f16mac1>l_lane_highv2sf): Ditto.\n\t(aarch64_simd_fml<f16mac>l_lane_lowv2sf): Ditto.\n\t(aarch64_simd_fml<f16mac>l_lane_highv2sf): Ditto.\n\t(aarch64_fml<f16mac1>lq_laneq_lowv4sf): Ditto.\n\t(aarch64_fml<f16mac1>lq_laneq_highv4sf): Ditto.\n\t(aarch64_simd_fml<f16mac>lq_laneq_lowv4sf): Ditto.\n\t(aarch64_simd_fml<f16mac>lq_laneq_highv4sf): Ditto.\n\t(aarch64_fml<f16mac1>l_laneq_lowv2sf): Ditto.\n\t(aarch64_fml<f16mac1>l_laneq_highv2sf): Ditto.\n\t(aarch64_simd_fml<f16mac>l_laneq_lowv2sf): Ditto.\n\t(aarch64_simd_fml<f16mac>l_laneq_highv2sf): Ditto.\n\t(aarch64_fml<f16mac1>lq_lane_lowv4sf): Ditto.\n\t(aarch64_fml<f16mac1>lq_lane_highv4sf): Ditto.\n\t(aarch64_simd_fml<f16mac>lq_lane_lowv4sf): Ditto.\n\t(aarch64_simd_fml<f16mac>lq_lane_highv4sf): Ditto.\n\t* config/aarch64/arm_neon.h (vfmlal_low_u32): New intrinsic.\n\t(vfmlsl_low_u32): Ditto.\n\t(vfmlalq_low_u32): Ditto.\n\t(vfmlslq_low_u32): Ditto.\n\t(vfmlal_high_u32): Ditto.\n\t(vfmlsl_high_u32): Ditto.\n\t(vfmlalq_high_u32): Ditto.\n\t(vfmlslq_high_u32): Ditto.\n\t(vfmlal_lane_low_u32): Ditto.\n\t(vfmlsl_lane_low_u32): Ditto.\n\t(vfmlal_laneq_low_u32): Ditto.\n\t(vfmlsl_laneq_low_u32): Ditto.\n\t(vfmlalq_lane_low_u32): Ditto.\n\t(vfmlslq_lane_low_u32): Ditto.\n\t(vfmlalq_laneq_low_u32): Ditto.\n\t(vfmlslq_laneq_low_u32): Ditto.\n\t(vfmlal_lane_high_u32): Ditto.\n\t(vfmlsl_lane_high_u32): Ditto.\n\t(vfmlal_laneq_high_u32): Ditto.\n\t(vfmlsl_laneq_high_u32): Ditto.\n\t(vfmlalq_lane_high_u32): Ditto.\n\t(vfmlslq_lane_high_u32): Ditto.\n\t(vfmlalq_laneq_high_u32): Ditto.\n\t(vfmlslq_laneq_high_u32): Ditto.\n\t* config/aarch64/aarch64.h (AARCH64_FL_F16SML): New flag.\n\t(AARCH64_FL_FOR_ARCH8_4): New.\n\t(AARCH64_ISA_F16FML): New ISA flag.\n\t(TARGET_F16FML): New feature flag for fp16fml.\n\t(doc/invoke.texi): Document new fp16fml option.\n\n2018-01-10  Michael Collison  <michael.collison@arm.com>\n\n\t* config/aarch64/aarch64-builtins.c:\n\t(aarch64_types_ternopu_imm_qualifiers, TYPES_TERNOPUI): New.\n\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins):\n\t(__ARM_FEATURE_SHA3): Define if TARGET_SHA3 is true.\n\t* config/aarch64/aarch64.h (AARCH64_FL_SHA3): New flags.\n\t(AARCH64_ISA_SHA3): New ISA flag.\n\t(TARGET_SHA3): New feature flag for sha3.\n\t* config/aarch64/iterators.md (sha512_op): New int attribute.\n\t(CRYPTO_SHA512): New int iterator.\n\t(UNSPEC_SHA512H): New unspec.\n\t(UNSPEC_SHA512H2): Ditto.\n\t(UNSPEC_SHA512SU0): Ditto.\n\t(UNSPEC_SHA512SU1): Ditto.\n\t* config/aarch64/aarch64-simd-builtins.def\n\t(aarch64_crypto_sha512hqv2di): New builtin.\n\t(aarch64_crypto_sha512h2qv2di): Ditto.\n\t(aarch64_crypto_sha512su0qv2di): Ditto.\n\t(aarch64_crypto_sha512su1qv2di): Ditto.\n\t(aarch64_eor3qv8hi): Ditto.\n\t(aarch64_rax1qv2di): Ditto.\n\t(aarch64_xarqv2di): Ditto.\n\t(aarch64_bcaxqv8hi): Ditto.\n\t* config/aarch64/aarch64-simd.md:\n\t(aarch64_crypto_sha512h<sha512_op>qv2di): New pattern.\n\t(aarch64_crypto_sha512su0qv2di): Ditto.\n\t(aarch64_crypto_sha512su1qv2di): Ditto.\n\t(aarch64_eor3qv8hi): Ditto.\n\t(aarch64_rax1qv2di): Ditto.\n\t(aarch64_xarqv2di): Ditto.\n\t(aarch64_bcaxqv8hi): Ditto.\n\t* config/aarch64/arm_neon.h (vsha512hq_u64): New intrinsic.\n\t(vsha512h2q_u64): Ditto.\n\t(vsha512su0q_u64): Ditto.\n\t(vsha512su1q_u64): Ditto.\n\t(veor3q_u16): Ditto.\n\t(vrax1q_u64): Ditto.\n\t(vxarq_u64): Ditto.\n\t(vbcaxq_u16): Ditto.\n\t* config/arm/types.md (crypto_sha512): New type attribute.\n\t(crypto_sha3): Ditto.\n\t(doc/invoke.texi): Document new sha3 option.\n\n2018-01-10  Michael Collison  <michael.collison@arm.com>\n\n\t* config/aarch64/aarch64-builtins.c:\n\t(aarch64_types_quadopu_imm_qualifiers, TYPES_QUADOPUI): New.\n\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins):\n\t(__ARM_FEATURE_SM3): Define if TARGET_SM4 is true.\n\t(__ARM_FEATURE_SM4): Define if TARGET_SM4 is true.\n\t* config/aarch64/aarch64.h (AARCH64_FL_SM4): New flags.\n\t(AARCH64_ISA_SM4): New ISA flag.\n\t(TARGET_SM4): New feature flag for sm4.\n\t* config/aarch64/aarch64-simd-builtins.def\n\t(aarch64_sm3ss1qv4si): Ditto.\n\t(aarch64_sm3tt1aq4si): Ditto.\n\t(aarch64_sm3tt1bq4si): Ditto.\n\t(aarch64_sm3tt2aq4si): Ditto.\n\t(aarch64_sm3tt2bq4si): Ditto.\n\t(aarch64_sm3partw1qv4si): Ditto.\n\t(aarch64_sm3partw2qv4si): Ditto.\n\t(aarch64_sm4eqv4si): Ditto.\n\t(aarch64_sm4ekeyqv4si): Ditto.\n\t* config/aarch64/aarch64-simd.md:\n\t(aarch64_sm3ss1qv4si): Ditto.\n\t(aarch64_sm3tt<sm3tt_op>qv4si): Ditto.\n\t(aarch64_sm3partw<sm3part_op>qv4si): Ditto.\n\t(aarch64_sm4eqv4si): Ditto.\n\t(aarch64_sm4ekeyqv4si): Ditto.\n\t* config/aarch64/iterators.md (sm3tt_op): New int iterator.\n\t(sm3part_op): Ditto.\n\t(CRYPTO_SM3TT): Ditto.\n\t(CRYPTO_SM3PART): Ditto.\n\t(UNSPEC_SM3SS1): New unspec.\n\t(UNSPEC_SM3TT1A): Ditto.\n\t(UNSPEC_SM3TT1B): Ditto.\n\t(UNSPEC_SM3TT2A): Ditto.\n\t(UNSPEC_SM3TT2B): Ditto.\n\t(UNSPEC_SM3PARTW1): Ditto.\n\t(UNSPEC_SM3PARTW2): Ditto.\n\t(UNSPEC_SM4E): Ditto.\n\t(UNSPEC_SM4EKEY): Ditto.\n\t* config/aarch64/constraints.md (Ui2): New constraint.\n\t* config/aarch64/predicates.md (aarch64_imm2): New predicate.\n\t* config/arm/types.md (crypto_sm3): New type attribute.\n\t(crypto_sm4): Ditto.\n\t* config/aarch64/arm_neon.h (vsm3ss1q_u32): New intrinsic.\n\t(vsm3tt1aq_u32): Ditto.\n\t(vsm3tt1bq_u32): Ditto.\n\t(vsm3tt2aq_u32): Ditto.\n\t(vsm3tt2bq_u32): Ditto.\n\t(vsm3partw1q_u32): Ditto.\n\t(vsm3partw2q_u32): Ditto.\n\t(vsm4eq_u32): Ditto.\n\t(vsm4ekeyq_u32): Ditto.\n\t(doc/invoke.texi): Document new sm4 option.\n\n2018-01-10  Michael Collison  <michael.collison@arm.com>\n\n\t* config/aarch64/aarch64-arches.def (armv8.4-a): New architecture.\n\t* config/aarch64/aarch64.h (AARCH64_ISA_V8_4): New ISA flag.\n\t(AARCH64_FL_FOR_ARCH8_4): New.\n\t(AARCH64_FL_V8_4): New flag.\n\t(doc/invoke.texi): Document new armv8.4-a option.\n\n2018-01-10  Michael Collison  <michael.collison@arm.com>\n\n\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins):\n\t(__ARM_FEATURE_AES): Define if TARGET_AES is true.\n\t(__ARM_FEATURE_SHA2): Define if TARGET_SHA2 is true.\n\t* config/aarch64/aarch64-option-extension.def: Add\n\tAARCH64_OPT_EXTENSION of 'sha2'.\n\t(aes): Add AARCH64_OPT_EXTENSION of 'aes'.\n\t(crypto): Disable sha2 and aes if crypto disabled.\n\t(crypto): Enable aes and sha2 if enabled.\n\t(simd): Disable sha2 and aes if simd disabled.\n\t* config/aarch64/aarch64.h (AARCH64_FL_AES, AARCH64_FL_SHA2):\n\tNew flags.\n\t(AARCH64_ISA_AES, AARCH64_ISA_SHA2): New ISA flags.\n\t(TARGET_SHA2): New feature flag for sha2.\n\t(TARGET_AES): New feature flag for aes.\n\t* config/aarch64/aarch64-simd.md:\n\t(aarch64_crypto_aes<aes_op>v16qi): Make pattern\n\tconditional on TARGET_AES.\n\t(aarch64_crypto_aes<aesmc_op>v16qi): Ditto.\n\t(aarch64_crypto_sha1hsi): Make pattern conditional\n\ton TARGET_SHA2.\n\t(aarch64_crypto_sha1hv4si): Ditto.\n\t(aarch64_be_crypto_sha1hv4si): Ditto.\n\t(aarch64_crypto_sha1su1v4si): Ditto.\n\t(aarch64_crypto_sha1<sha1_op>v4si): Ditto.\n\t(aarch64_crypto_sha1su0v4si): Ditto.\n\t(aarch64_crypto_sha256h<sha256_op>v4si): Ditto.\n\t(aarch64_crypto_sha256su0v4si): Ditto.\n\t(aarch64_crypto_sha256su1v4si): Ditto.\n\t(doc/invoke.texi): Document new aes and sha2 options.\n\nFrom-SVN: r256478", "tree": {"sha": "031e83cfb17468b6933e2908d6439d510e6ac6ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/031e83cfb17468b6933e2908d6439d510e6ac6ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27086ea39f16addb987edb4719afb7cd9b01800c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27086ea39f16addb987edb4719afb7cd9b01800c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27086ea39f16addb987edb4719afb7cd9b01800c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27086ea39f16addb987edb4719afb7cd9b01800c/comments", "author": null, "committer": null, "parents": [{"sha": "1bfd6a0038c9ade9db7cbae3b550d14a62c91ebf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bfd6a0038c9ade9db7cbae3b550d14a62c91ebf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bfd6a0038c9ade9db7cbae3b550d14a62c91ebf"}], "stats": {"total": 2075, "additions": 2050, "deletions": 25}, "files": [{"sha": "7eb6c1cc47c57824c4214afc3d71b238342bab94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 234, "deletions": 0, "changes": 234, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -1,3 +1,237 @@\n+2018-01-10  Michael Collison  <michael.collison@arm.com>\n+\n+\t* config/aarch64/aarch64-modes.def (V2HF): New VECTOR_MODE.\n+\t* config/aarch64/aarch64-option-extension.def: Add\n+\tAARCH64_OPT_EXTENSION of 'fp16fml'.\n+\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins):\n+\t(__ARM_FEATURE_FP16_FML): Define if TARGET_F16FML is true.\n+\t* config/aarch64/predicates.md (aarch64_lane_imm3): New predicate.\n+\t* config/aarch64/constraints.md (Ui7): New constraint.\n+\t* config/aarch64/iterators.md (VFMLA_W): New mode iterator.\n+\t(VFMLA_SEL_W): Ditto.\n+\t(f16quad): Ditto.\n+\t(f16mac1): Ditto.\n+\t(VFMLA16_LOW): New int iterator.\n+\t(VFMLA16_HIGH): Ditto.\n+\t(UNSPEC_FMLAL): New unspec.\n+\t(UNSPEC_FMLSL): Ditto.\n+\t(UNSPEC_FMLAL2): Ditto.\n+\t(UNSPEC_FMLSL2): Ditto.\n+\t(f16mac): New code attribute.\n+\t* config/aarch64/aarch64-simd-builtins.def\n+\t(aarch64_fmlal_lowv2sf): Ditto.\n+\t(aarch64_fmlsl_lowv2sf): Ditto.\n+\t(aarch64_fmlalq_lowv4sf): Ditto.\n+\t(aarch64_fmlslq_lowv4sf): Ditto.\n+\t(aarch64_fmlal_highv2sf): Ditto.\n+\t(aarch64_fmlsl_highv2sf): Ditto.\n+\t(aarch64_fmlalq_highv4sf): Ditto.\n+\t(aarch64_fmlslq_highv4sf): Ditto.\n+\t(aarch64_fmlal_lane_lowv2sf): Ditto.\n+\t(aarch64_fmlsl_lane_lowv2sf): Ditto.\n+\t(aarch64_fmlal_laneq_lowv2sf): Ditto.\n+\t(aarch64_fmlsl_laneq_lowv2sf): Ditto.\n+\t(aarch64_fmlalq_lane_lowv4sf): Ditto.\n+\t(aarch64_fmlsl_lane_lowv4sf): Ditto.\n+\t(aarch64_fmlalq_laneq_lowv4sf): Ditto.\n+\t(aarch64_fmlsl_laneq_lowv4sf): Ditto.\n+\t(aarch64_fmlal_lane_highv2sf): Ditto.\n+\t(aarch64_fmlsl_lane_highv2sf): Ditto.\n+\t(aarch64_fmlal_laneq_highv2sf): Ditto.\n+\t(aarch64_fmlsl_laneq_highv2sf): Ditto.\n+\t(aarch64_fmlalq_lane_highv4sf): Ditto.\n+\t(aarch64_fmlsl_lane_highv4sf): Ditto.\n+\t(aarch64_fmlalq_laneq_highv4sf): Ditto.\n+\t(aarch64_fmlsl_laneq_highv4sf): Ditto.\n+\t* config/aarch64/aarch64-simd.md:\n+\t(aarch64_fml<f16mac1>l<f16quad>_low<mode>): New pattern.\n+\t(aarch64_fml<f16mac1>l<f16quad>_high<mode>): Ditto.\n+\t(aarch64_simd_fml<f16mac1>l<f16quad>_low<mode>): Ditto.\n+\t(aarch64_simd_fml<f16mac1>l<f16quad>_high<mode>): Ditto.\n+\t(aarch64_fml<f16mac1>l_lane_lowv2sf): Ditto.\n+\t(aarch64_fml<f16mac1>l_lane_highv2sf): Ditto.\n+\t(aarch64_simd_fml<f16mac>l_lane_lowv2sf): Ditto.\n+\t(aarch64_simd_fml<f16mac>l_lane_highv2sf): Ditto.\n+\t(aarch64_fml<f16mac1>lq_laneq_lowv4sf): Ditto.\n+\t(aarch64_fml<f16mac1>lq_laneq_highv4sf): Ditto.\n+\t(aarch64_simd_fml<f16mac>lq_laneq_lowv4sf): Ditto.\n+\t(aarch64_simd_fml<f16mac>lq_laneq_highv4sf): Ditto.\n+\t(aarch64_fml<f16mac1>l_laneq_lowv2sf): Ditto.\n+\t(aarch64_fml<f16mac1>l_laneq_highv2sf): Ditto.\n+\t(aarch64_simd_fml<f16mac>l_laneq_lowv2sf): Ditto.\n+\t(aarch64_simd_fml<f16mac>l_laneq_highv2sf): Ditto.\n+\t(aarch64_fml<f16mac1>lq_lane_lowv4sf): Ditto.\n+\t(aarch64_fml<f16mac1>lq_lane_highv4sf): Ditto.\n+\t(aarch64_simd_fml<f16mac>lq_lane_lowv4sf): Ditto.\n+\t(aarch64_simd_fml<f16mac>lq_lane_highv4sf): Ditto.\n+\t* config/aarch64/arm_neon.h (vfmlal_low_u32): New intrinsic.\n+\t(vfmlsl_low_u32): Ditto.\n+\t(vfmlalq_low_u32): Ditto.\n+\t(vfmlslq_low_u32): Ditto.\n+\t(vfmlal_high_u32): Ditto.\n+\t(vfmlsl_high_u32): Ditto.\n+\t(vfmlalq_high_u32): Ditto.\n+\t(vfmlslq_high_u32): Ditto.\n+\t(vfmlal_lane_low_u32): Ditto.\n+\t(vfmlsl_lane_low_u32): Ditto.\n+\t(vfmlal_laneq_low_u32): Ditto.\n+\t(vfmlsl_laneq_low_u32): Ditto.\n+\t(vfmlalq_lane_low_u32): Ditto.\n+\t(vfmlslq_lane_low_u32): Ditto.\n+\t(vfmlalq_laneq_low_u32): Ditto.\n+\t(vfmlslq_laneq_low_u32): Ditto.\n+\t(vfmlal_lane_high_u32): Ditto.\n+\t(vfmlsl_lane_high_u32): Ditto.\n+\t(vfmlal_laneq_high_u32): Ditto.\n+\t(vfmlsl_laneq_high_u32): Ditto.\n+\t(vfmlalq_lane_high_u32): Ditto.\n+\t(vfmlslq_lane_high_u32): Ditto.\n+\t(vfmlalq_laneq_high_u32): Ditto.\n+\t(vfmlslq_laneq_high_u32): Ditto.\n+\t* config/aarch64/aarch64.h (AARCH64_FL_F16SML): New flag.\n+\t(AARCH64_FL_FOR_ARCH8_4): New.\n+\t(AARCH64_ISA_F16FML): New ISA flag.\n+\t(TARGET_F16FML): New feature flag for fp16fml.\n+\t(doc/invoke.texi): Document new fp16fml option.\n+\n+2018-01-10  Michael Collison  <michael.collison@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c:\n+\t(aarch64_types_ternopu_imm_qualifiers, TYPES_TERNOPUI): New.\n+\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins):\n+\t(__ARM_FEATURE_SHA3): Define if TARGET_SHA3 is true.\n+\t* config/aarch64/aarch64.h (AARCH64_FL_SHA3): New flags.\n+\t(AARCH64_ISA_SHA3): New ISA flag.\n+\t(TARGET_SHA3): New feature flag for sha3.\n+\t* config/aarch64/iterators.md (sha512_op): New int attribute.\n+\t(CRYPTO_SHA512): New int iterator.\n+\t(UNSPEC_SHA512H): New unspec.\n+\t(UNSPEC_SHA512H2): Ditto.\n+\t(UNSPEC_SHA512SU0): Ditto.\n+\t(UNSPEC_SHA512SU1): Ditto.\n+\t* config/aarch64/aarch64-simd-builtins.def\n+\t(aarch64_crypto_sha512hqv2di): New builtin.\n+\t(aarch64_crypto_sha512h2qv2di): Ditto.\n+\t(aarch64_crypto_sha512su0qv2di): Ditto.\n+\t(aarch64_crypto_sha512su1qv2di): Ditto.\n+\t(aarch64_eor3qv8hi): Ditto.\n+\t(aarch64_rax1qv2di): Ditto.\n+\t(aarch64_xarqv2di): Ditto.\n+\t(aarch64_bcaxqv8hi): Ditto.\n+\t* config/aarch64/aarch64-simd.md:\n+\t(aarch64_crypto_sha512h<sha512_op>qv2di): New pattern.\n+\t(aarch64_crypto_sha512su0qv2di): Ditto.\n+\t(aarch64_crypto_sha512su1qv2di): Ditto.\n+\t(aarch64_eor3qv8hi): Ditto.\n+\t(aarch64_rax1qv2di): Ditto.\n+\t(aarch64_xarqv2di): Ditto.\n+\t(aarch64_bcaxqv8hi): Ditto.\n+\t* config/aarch64/arm_neon.h (vsha512hq_u64): New intrinsic.\n+\t(vsha512h2q_u64): Ditto.\n+\t(vsha512su0q_u64): Ditto.\n+\t(vsha512su1q_u64): Ditto.\n+\t(veor3q_u16): Ditto.\n+\t(vrax1q_u64): Ditto.\n+\t(vxarq_u64): Ditto.\n+\t(vbcaxq_u16): Ditto.\n+\t* config/arm/types.md (crypto_sha512): New type attribute.\n+\t(crypto_sha3): Ditto.\n+\t(doc/invoke.texi): Document new sha3 option.\n+\n+2018-01-10  Michael Collison  <michael.collison@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c:\n+\t(aarch64_types_quadopu_imm_qualifiers, TYPES_QUADOPUI): New.\n+\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins):\n+\t(__ARM_FEATURE_SM3): Define if TARGET_SM4 is true.\n+\t(__ARM_FEATURE_SM4): Define if TARGET_SM4 is true.\n+\t* config/aarch64/aarch64.h (AARCH64_FL_SM4): New flags.\n+\t(AARCH64_ISA_SM4): New ISA flag.\n+\t(TARGET_SM4): New feature flag for sm4.\n+\t* config/aarch64/aarch64-simd-builtins.def\n+\t(aarch64_sm3ss1qv4si): Ditto.\n+\t(aarch64_sm3tt1aq4si): Ditto.\n+\t(aarch64_sm3tt1bq4si): Ditto.\n+\t(aarch64_sm3tt2aq4si): Ditto.\n+\t(aarch64_sm3tt2bq4si): Ditto.\n+\t(aarch64_sm3partw1qv4si): Ditto.\n+\t(aarch64_sm3partw2qv4si): Ditto.\n+\t(aarch64_sm4eqv4si): Ditto.\n+\t(aarch64_sm4ekeyqv4si): Ditto.\n+\t* config/aarch64/aarch64-simd.md:\n+\t(aarch64_sm3ss1qv4si): Ditto.\n+\t(aarch64_sm3tt<sm3tt_op>qv4si): Ditto.\n+\t(aarch64_sm3partw<sm3part_op>qv4si): Ditto.\n+\t(aarch64_sm4eqv4si): Ditto.\n+\t(aarch64_sm4ekeyqv4si): Ditto.\n+\t* config/aarch64/iterators.md (sm3tt_op): New int iterator.\n+\t(sm3part_op): Ditto.\n+\t(CRYPTO_SM3TT): Ditto.\n+\t(CRYPTO_SM3PART): Ditto.\n+\t(UNSPEC_SM3SS1): New unspec.\n+\t(UNSPEC_SM3TT1A): Ditto.\n+\t(UNSPEC_SM3TT1B): Ditto.\n+\t(UNSPEC_SM3TT2A): Ditto.\n+\t(UNSPEC_SM3TT2B): Ditto.\n+\t(UNSPEC_SM3PARTW1): Ditto.\n+\t(UNSPEC_SM3PARTW2): Ditto.\n+\t(UNSPEC_SM4E): Ditto.\n+\t(UNSPEC_SM4EKEY): Ditto.\n+\t* config/aarch64/constraints.md (Ui2): New constraint.\n+\t* config/aarch64/predicates.md (aarch64_imm2): New predicate.\n+\t* config/arm/types.md (crypto_sm3): New type attribute.\n+\t(crypto_sm4): Ditto.\n+\t* config/aarch64/arm_neon.h (vsm3ss1q_u32): New intrinsic.\n+\t(vsm3tt1aq_u32): Ditto.\n+\t(vsm3tt1bq_u32): Ditto.\n+\t(vsm3tt2aq_u32): Ditto.\n+\t(vsm3tt2bq_u32): Ditto.\n+\t(vsm3partw1q_u32): Ditto.\n+\t(vsm3partw2q_u32): Ditto.\n+\t(vsm4eq_u32): Ditto.\n+\t(vsm4ekeyq_u32): Ditto.\n+\t(doc/invoke.texi): Document new sm4 option.\n+\n+2018-01-10  Michael Collison  <michael.collison@arm.com>\n+\n+\t* config/aarch64/aarch64-arches.def (armv8.4-a): New architecture.\n+\t* config/aarch64/aarch64.h (AARCH64_ISA_V8_4): New ISA flag.\n+\t(AARCH64_FL_FOR_ARCH8_4): New.\n+\t(AARCH64_FL_V8_4): New flag.\n+\t(doc/invoke.texi): Document new armv8.4-a option.\n+\n+2018-01-10  Michael Collison  <michael.collison@arm.com>\n+\n+\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins):\n+\t(__ARM_FEATURE_AES): Define if TARGET_AES is true.\n+\t(__ARM_FEATURE_SHA2): Define if TARGET_SHA2 is true.\n+\t* config/aarch64/aarch64-option-extension.def: Add\n+\tAARCH64_OPT_EXTENSION of 'sha2'.\n+\t(aes): Add AARCH64_OPT_EXTENSION of 'aes'.\n+\t(crypto): Disable sha2 and aes if crypto disabled.\n+\t(crypto): Enable aes and sha2 if enabled.\n+\t(simd): Disable sha2 and aes if simd disabled.\n+\t* config/aarch64/aarch64.h (AARCH64_FL_AES, AARCH64_FL_SHA2):\n+\tNew flags.\n+\t(AARCH64_ISA_AES, AARCH64_ISA_SHA2): New ISA flags.\n+\t(TARGET_SHA2): New feature flag for sha2.\n+\t(TARGET_AES): New feature flag for aes.\n+\t* config/aarch64/aarch64-simd.md:\n+\t(aarch64_crypto_aes<aes_op>v16qi): Make pattern\n+\tconditional on TARGET_AES.\n+\t(aarch64_crypto_aes<aesmc_op>v16qi): Ditto.\n+\t(aarch64_crypto_sha1hsi): Make pattern conditional\n+\ton TARGET_SHA2.\n+\t(aarch64_crypto_sha1hv4si): Ditto.\n+\t(aarch64_be_crypto_sha1hv4si): Ditto.\n+\t(aarch64_crypto_sha1su1v4si): Ditto.\n+\t(aarch64_crypto_sha1<sha1_op>v4si): Ditto.\n+\t(aarch64_crypto_sha1su0v4si): Ditto.\n+\t(aarch64_crypto_sha256h<sha256_op>v4si): Ditto.\n+\t(aarch64_crypto_sha256su0v4si): Ditto.\n+\t(aarch64_crypto_sha256su1v4si): Ditto.\n+\t(doc/invoke.texi): Document new aes and sha2 options.\n+\n 2018-01-10  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/83781"}, {"sha": "a37a5553894d6ab1d629017ea204478f69d8773d", "filename": "gcc/config/aarch64/aarch64-arches.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -34,5 +34,6 @@ AARCH64_ARCH(\"armv8-a\",\t      generic,\t     8A,\t8,  AARCH64_FL_FOR_ARCH8)\n AARCH64_ARCH(\"armv8.1-a\",     generic,\t     8_1A,\t8,  AARCH64_FL_FOR_ARCH8_1)\n AARCH64_ARCH(\"armv8.2-a\",     generic,\t     8_2A,\t8,  AARCH64_FL_FOR_ARCH8_2)\n AARCH64_ARCH(\"armv8.3-a\",     generic,\t     8_3A,\t8,  AARCH64_FL_FOR_ARCH8_3)\n+AARCH64_ARCH(\"armv8.4-a\",     generic,\t     8_4A,\t8,  AARCH64_FL_FOR_ARCH8_4)\n \n #undef AARCH64_ARCH"}, {"sha": "9775d3a59c2650d6c7617573e117c70f56459aeb", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -164,6 +164,12 @@ aarch64_types_ternopu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_unsigned, qualifier_unsigned,\n       qualifier_unsigned, qualifier_unsigned };\n #define TYPES_TERNOPU (aarch64_types_ternopu_qualifiers)\n+static enum aarch64_type_qualifiers\n+aarch64_types_ternopu_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned,\n+      qualifier_unsigned, qualifier_immediate };\n+#define TYPES_TERNOPUI (aarch64_types_ternopu_imm_qualifiers)\n+\n \n static enum aarch64_type_qualifiers\n aarch64_types_quadop_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n@@ -176,6 +182,12 @@ aarch64_types_quadopu_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n       qualifier_unsigned, qualifier_lane_index };\n #define TYPES_QUADOPU_LANE (aarch64_types_quadopu_lane_qualifiers)\n \n+static enum aarch64_type_qualifiers\n+aarch64_types_quadopu_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_unsigned,\n+      qualifier_unsigned, qualifier_immediate };\n+#define TYPES_QUADOPUI (aarch64_types_quadopu_imm_qualifiers)\n+\n static enum aarch64_type_qualifiers\n aarch64_types_binop_imm_p_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_poly, qualifier_none, qualifier_immediate };"}, {"sha": "172c30fb520c5cab282372a5102f6c86015a4259", "filename": "gcc/config/aarch64/aarch64-c.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.c?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -137,6 +137,14 @@ aarch64_update_cpp_builtins (cpp_reader *pfile)\n   aarch64_def_or_undef (TARGET_CRYPTO, \"__ARM_FEATURE_CRYPTO\", pfile);\n   aarch64_def_or_undef (TARGET_SIMD_RDMA, \"__ARM_FEATURE_QRDMX\", pfile);\n \n+  aarch64_def_or_undef (TARGET_AES, \"__ARM_FEATURE_AES\", pfile);\n+  aarch64_def_or_undef (TARGET_SHA2, \"__ARM_FEATURE_SHA2\", pfile);\n+  aarch64_def_or_undef (TARGET_SHA3, \"__ARM_FEATURE_SHA3\", pfile);\n+  aarch64_def_or_undef (TARGET_SHA3, \"__ARM_FEATURE_SHA512\", pfile);\n+  aarch64_def_or_undef (TARGET_SM4, \"__ARM_FEATURE_SM3\", pfile);\n+  aarch64_def_or_undef (TARGET_SM4, \"__ARM_FEATURE_SM4\", pfile);\n+  aarch64_def_or_undef (TARGET_F16FML, \"__ARM_FEATURE_FP16_FML\", pfile);\n+\n   /* Not for ACLE, but required to keep \"float.h\" correct if we switch\n      target between implementations that do or do not support ARMv8.2-A\n      16-bit floating-point extensions.  */"}, {"sha": "3ed11189ad4e057106679c3f6b559782a6c327ed", "filename": "gcc/config/aarch64/aarch64-modes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -35,6 +35,7 @@ VECTOR_MODES (INT, 16);       /* V16QI V8HI V4SI V2DI.  */\n VECTOR_MODES (FLOAT, 8);      /*                 V2SF.  */\n VECTOR_MODES (FLOAT, 16);     /*            V4SF V2DF.  */\n VECTOR_MODE (FLOAT, DF, 1);   /*                 V1DF.  */\n+VECTOR_MODE (FLOAT, HF, 2);   /*                 V2HF.  */\n \n /* Oct Int: 256-bit integer mode needed for 32-byte vector arguments.  */\n INT_MODE (OI, 32);"}, {"sha": "593dad9381c18400bb28d4fc321239f17720c5eb", "filename": "gcc/config/aarch64/aarch64-option-extensions.def", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -39,16 +39,22 @@\n    that are required.  Their order is not important.  */\n \n /* Enabling \"fp\" just enables \"fp\".\n-   Disabling \"fp\" also disables \"simd\", \"crypto\" and \"fp16\".  */\n-AARCH64_OPT_EXTENSION(\"fp\", AARCH64_FL_FP, 0, AARCH64_FL_SIMD | AARCH64_FL_CRYPTO | AARCH64_FL_F16, \"fp\")\n+   Disabling \"fp\" also disables \"simd\", \"crypto\", \"fp16\", \"aes\", \"sha2\", \"sha3\", and sm3/sm4.  */\n+AARCH64_OPT_EXTENSION(\"fp\", AARCH64_FL_FP, 0, AARCH64_FL_SIMD | AARCH64_FL_CRYPTO |\\\n+\t\t      AARCH64_FL_F16 | AARCH64_FL_AES | AARCH64_FL_SHA2 |\\\n+\t\t      AARCH64_FL_SHA3 | AARCH64_FL_SM4, \"fp\")\n \n /* Enabling \"simd\" also enables \"fp\".\n-   Disabling \"simd\" also disables \"crypto\" and \"dotprod\".  */\n-AARCH64_OPT_EXTENSION(\"simd\", AARCH64_FL_SIMD, AARCH64_FL_FP, AARCH64_FL_CRYPTO | AARCH64_FL_DOTPROD, \"asimd\")\n+   Disabling \"simd\" also disables \"crypto\", \"dotprod\", \"aes\", \"sha2\", \"sha3\" and \"sm3/sm4\".  */\n+AARCH64_OPT_EXTENSION(\"simd\", AARCH64_FL_SIMD, AARCH64_FL_FP, AARCH64_FL_CRYPTO |\\\n+\t\t      AARCH64_FL_DOTPROD | AARCH64_FL_AES | AARCH64_FL_SHA2 |\\\n+\t\t      AARCH64_FL_SHA3 | AARCH64_FL_SM4, \"asimd\")\n \n-/* Enabling \"crypto\" also enables \"fp\", \"simd\".\n-   Disabling \"crypto\" just disables \"crypto\".  */\n-AARCH64_OPT_EXTENSION(\"crypto\", AARCH64_FL_CRYPTO, AARCH64_FL_FP | AARCH64_FL_SIMD, 0, \"aes pmull sha1 sha2\")\n+/* Enabling \"crypto\" also enables \"fp\" and \"simd\".\n+   Disabling \"crypto\" disables \"crypto\", \"aes\", \"sha2\", \"sha3\" and \"sm3/sm4\".  */\n+AARCH64_OPT_EXTENSION(\"crypto\", AARCH64_FL_CRYPTO, AARCH64_FL_FP | AARCH64_FL_SIMD,\\\n+\t\t      AARCH64_FL_AES | AARCH64_FL_SHA2 |AARCH64_FL_SHA3 | AARCH64_FL_SM4,\\\n+\t\t      \"aes pmull sha1 sha2\")\n \n /* Enabling or disabling \"crc\" only changes \"crc\".  */\n AARCH64_OPT_EXTENSION(\"crc\", AARCH64_FL_CRC, 0, 0, \"crc32\")\n@@ -57,8 +63,8 @@ AARCH64_OPT_EXTENSION(\"crc\", AARCH64_FL_CRC, 0, 0, \"crc32\")\n AARCH64_OPT_EXTENSION(\"lse\", AARCH64_FL_LSE, 0, 0, \"atomics\")\n \n /* Enabling \"fp16\" also enables \"fp\".\n-   Disabling \"fp16\" just disables \"fp16\".  */\n-AARCH64_OPT_EXTENSION(\"fp16\", AARCH64_FL_F16, AARCH64_FL_FP, 0, \"fphp asimdhp\")\n+   Disabling \"fp16\" disables \"fp16\" and \"fp16fml\".  */\n+AARCH64_OPT_EXTENSION(\"fp16\", AARCH64_FL_F16, AARCH64_FL_FP, AARCH64_FL_F16FML, \"fphp asimdhp\")\n \n /* Enabling or disabling \"rcpc\" only changes \"rcpc\".  */\n AARCH64_OPT_EXTENSION(\"rcpc\", AARCH64_FL_RCPC, 0, 0, \"lrcpc\")\n@@ -71,4 +77,24 @@ AARCH64_OPT_EXTENSION(\"rdma\", AARCH64_FL_RDMA, AARCH64_FL_FP | AARCH64_FL_SIMD,\n    Disabling \"dotprod\" only disables \"dotprod\".  */\n AARCH64_OPT_EXTENSION(\"dotprod\", AARCH64_FL_DOTPROD, AARCH64_FL_SIMD, 0, \"asimddp\")\n \n+/* Enabling \"aes\" also enables \"simd\".\n+   Disabling \"aes\" just disables \"aes\".  */\n+AARCH64_OPT_EXTENSION(\"aes\", AARCH64_FL_AES, AARCH64_FL_SIMD, 0, \"aes\")\n+\n+/* Enabling \"sha2\" also enables \"simd\".\n+   Disabling \"sha2\" just disables \"sha2\".  */\n+AARCH64_OPT_EXTENSION(\"sha2\", AARCH64_FL_SHA2, AARCH64_FL_SIMD, 0, \"sha1 sha2\")\n+\n+/* Enabling \"sha3\" enables \"simd\" and \"sha2\".\n+   Disabling \"sha3\" just disables \"sha3\".  */\n+AARCH64_OPT_EXTENSION(\"sha3\", AARCH64_FL_SHA3, AARCH64_FL_SIMD | AARCH64_FL_SHA2, 0, \"sha3 sha512\")\n+\n+/* Enabling \"sm4\" also enables \"simd\".\n+   Disabling \"sm4\" just disables \"sm4\".  */\n+AARCH64_OPT_EXTENSION(\"sm4\", AARCH64_FL_SM4, AARCH64_FL_SIMD, 0, \"sm3 sm4\")\n+\n+/* Enabling \"fp16fml\" also enables \"fp\" and \"fp16\".\n+   Disabling \"fp16fml\" just disables \"fp16fml\".  */\n+AARCH64_OPT_EXTENSION(\"fp16fml\", AARCH64_FL_F16FML, AARCH64_FL_FP | AARCH64_FL_F16, 0, \"asimdfml\")\n+\n #undef AARCH64_OPT_EXTENSION"}, {"sha": "b383f2485e5a287c6d833122d6be0c9ff2ef72a2", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -576,3 +576,69 @@\n   BUILTIN_GPI_I16 (UNOPUS, fixuns_trunchf, 2)\n   BUILTIN_GPI (UNOPUS, fixuns_truncsf, 2)\n   BUILTIN_GPI (UNOPUS, fixuns_truncdf, 2)\n+\n+  /* Implemented by aarch64_sm3ss1qv4si.  */\n+  VAR1 (TERNOPU, sm3ss1q, 0, v4si)\n+  /* Implemented by aarch64_sm3tt<sm3tt_op>qv4si.  */\n+  VAR1 (QUADOPUI, sm3tt1aq, 0, v4si)\n+  VAR1 (QUADOPUI, sm3tt1bq, 0, v4si)\n+  VAR1 (QUADOPUI, sm3tt2aq, 0, v4si)\n+  VAR1 (QUADOPUI, sm3tt2bq, 0, v4si)\n+  /* Implemented by aarch64_sm3partw<sm3part_op>qv4si.  */\n+  VAR1 (TERNOPU, sm3partw1q, 0, v4si)\n+  VAR1 (TERNOPU, sm3partw2q, 0, v4si)\n+  /* Implemented by aarch64_sm4eqv4si.  */\n+  VAR1 (BINOPU, sm4eq, 0, v4si)\n+  /* Implemented by aarch64_sm4ekeyqv4si.  */\n+  VAR1 (BINOPU, sm4ekeyq, 0, v4si)\n+  /* Implemented by aarch64_crypto_sha512hqv2di.  */\n+  VAR1 (TERNOPU, crypto_sha512hq, 0, v2di)\n+  /* Implemented by aarch64_sha512h2qv2di.  */\n+  VAR1 (TERNOPU, crypto_sha512h2q, 0, v2di)\n+  /* Implemented by aarch64_crypto_sha512su0qv2di.  */\n+  VAR1 (BINOPU, crypto_sha512su0q, 0, v2di)\n+  /* Implemented by aarch64_crypto_sha512su1qv2di.  */\n+  VAR1 (TERNOPU, crypto_sha512su1q, 0, v2di)\n+  /* Implemented by aarch64_eor3qv8hi.  */\n+  VAR1 (TERNOPU, eor3q, 0, v8hi)\n+  /* Implemented by aarch64_rax1qv2di.  */\n+  VAR1 (BINOPU, rax1q, 0, v2di)\n+  /* Implemented by aarch64_xarqv2di.  */\n+  VAR1 (TERNOPUI, xarq, 0, v2di)\n+  /* Implemented by aarch64_bcaxqv8hi.  */\n+  VAR1 (TERNOPU, bcaxq, 0, v8hi)\n+\n+  /* Implemented by aarch64_fml<f16mac1>l<f16quad>_low<mode>.  */\n+  VAR1 (TERNOP, fmlal_low, 0, v2sf)\n+  VAR1 (TERNOP, fmlsl_low, 0, v2sf)\n+  VAR1 (TERNOP, fmlalq_low, 0, v4sf)\n+  VAR1 (TERNOP, fmlslq_low, 0, v4sf)\n+  /* Implemented by aarch64_fml<f16mac1>l<f16quad>_high<mode>.  */\n+  VAR1 (TERNOP, fmlal_high, 0, v2sf)\n+  VAR1 (TERNOP, fmlsl_high, 0, v2sf)\n+  VAR1 (TERNOP, fmlalq_high, 0, v4sf)\n+  VAR1 (TERNOP, fmlslq_high, 0, v4sf)\n+  /* Implemented by aarch64_fml<f16mac1>l_lane_lowv2sf.  */\n+  VAR1 (QUADOP_LANE, fmlal_lane_low, 0, v2sf)\n+  VAR1 (QUADOP_LANE, fmlsl_lane_low, 0, v2sf)\n+  /* Implemented by aarch64_fml<f16mac1>l_laneq_lowv2sf.  */\n+  VAR1 (QUADOP_LANE, fmlal_laneq_low, 0, v2sf)\n+  VAR1 (QUADOP_LANE, fmlsl_laneq_low, 0, v2sf)\n+  /* Implemented by aarch64_fml<f16mac1>lq_lane_lowv4sf.  */\n+  VAR1 (QUADOP_LANE, fmlalq_lane_low, 0, v4sf)\n+  VAR1 (QUADOP_LANE, fmlslq_lane_low, 0, v4sf)\n+  /* Implemented by aarch64_fml<f16mac1>lq_laneq_lowv4sf.  */\n+  VAR1 (QUADOP_LANE, fmlalq_laneq_low, 0, v4sf)\n+  VAR1 (QUADOP_LANE, fmlslq_laneq_low, 0, v4sf)\n+  /* Implemented by aarch64_fml<f16mac1>l_lane_highv2sf.  */\n+  VAR1 (QUADOP_LANE, fmlal_lane_high, 0, v2sf)\n+  VAR1 (QUADOP_LANE, fmlsl_lane_high, 0, v2sf)\n+  /* Implemented by aarch64_fml<f16mac1>l_laneq_highv2sf.  */\n+  VAR1 (QUADOP_LANE, fmlal_laneq_high, 0, v2sf)\n+  VAR1 (QUADOP_LANE, fmlsl_laneq_high, 0, v2sf)\n+  /* Implemented by aarch64_fml<f16mac1>lq_lane_highv4sf.  */\n+  VAR1 (QUADOP_LANE, fmlalq_lane_high, 0, v4sf)\n+  VAR1 (QUADOP_LANE, fmlslq_lane_high, 0, v4sf)\n+  /* Implemented by aarch64_fml<f16mac1>lq_laneq_highv4sf.  */\n+  VAR1 (QUADOP_LANE, fmlalq_laneq_high, 0, v4sf)\n+  VAR1 (QUADOP_LANE, fmlslq_laneq_high, 0, v4sf)"}, {"sha": "5b3db91051237e6b321c7eb7e1643f77d1eb60be", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 748, "deletions": 13, "changes": 761, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -5782,7 +5782,7 @@\n         (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"0\")\n \t\t       (match_operand:V16QI 2 \"register_operand\" \"w\")]\n          CRYPTO_AES))]\n-  \"TARGET_SIMD && TARGET_CRYPTO\"\n+  \"TARGET_SIMD && TARGET_AES\"\n   \"aes<aes_op>\\\\t%0.16b, %2.16b\"\n   [(set_attr \"type\" \"crypto_aese\")]\n )\n@@ -5797,7 +5797,7 @@\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=w,w\")\n \t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"0,w\")]\n \t CRYPTO_AESMC))]\n-  \"TARGET_SIMD && TARGET_CRYPTO\"\n+  \"TARGET_SIMD && TARGET_AES\"\n   \"aes<aesmc_op>\\\\t%0.16b, %1.16b\"\n   [(set_attr \"type\" \"crypto_aesmc\")\n    (set_attr_alternative \"enabled\"\n@@ -5815,7 +5815,7 @@\n         (unspec:SI [(match_operand:SI 1\n                        \"register_operand\" \"w\")]\n          UNSPEC_SHA1H))]\n-  \"TARGET_SIMD && TARGET_CRYPTO\"\n+  \"TARGET_SIMD && TARGET_SHA2\"\n   \"sha1h\\\\t%s0, %s1\"\n   [(set_attr \"type\" \"crypto_sha1_fast\")]\n )\n@@ -5825,7 +5825,7 @@\n \t(unspec:SI [(vec_select:SI (match_operand:V4SI 1 \"register_operand\" \"w\")\n \t\t     (parallel [(const_int 0)]))]\n \t UNSPEC_SHA1H))]\n-  \"TARGET_SIMD && TARGET_CRYPTO && !BYTES_BIG_ENDIAN\"\n+  \"TARGET_SIMD && TARGET_SHA2 && !BYTES_BIG_ENDIAN\"\n   \"sha1h\\\\t%s0, %s1\"\n   [(set_attr \"type\" \"crypto_sha1_fast\")]\n )\n@@ -5835,7 +5835,7 @@\n \t(unspec:SI [(vec_select:SI (match_operand:V4SI 1 \"register_operand\" \"w\")\n \t\t     (parallel [(const_int 3)]))]\n \t UNSPEC_SHA1H))]\n-  \"TARGET_SIMD && TARGET_CRYPTO && BYTES_BIG_ENDIAN\"\n+  \"TARGET_SIMD && TARGET_SHA2 && BYTES_BIG_ENDIAN\"\n   \"sha1h\\\\t%s0, %s1\"\n   [(set_attr \"type\" \"crypto_sha1_fast\")]\n )\n@@ -5845,7 +5845,7 @@\n         (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"0\")\n                       (match_operand:V4SI 2 \"register_operand\" \"w\")]\n          UNSPEC_SHA1SU1))]\n-  \"TARGET_SIMD && TARGET_CRYPTO\"\n+  \"TARGET_SIMD && TARGET_SHA2\"\n   \"sha1su1\\\\t%0.4s, %2.4s\"\n   [(set_attr \"type\" \"crypto_sha1_fast\")]\n )\n@@ -5856,7 +5856,7 @@\n                       (match_operand:SI 2 \"register_operand\" \"w\")\n                       (match_operand:V4SI 3 \"register_operand\" \"w\")]\n          CRYPTO_SHA1))]\n-  \"TARGET_SIMD && TARGET_CRYPTO\"\n+  \"TARGET_SIMD && TARGET_SHA2\"\n   \"sha1<sha1_op>\\\\t%q0, %s2, %3.4s\"\n   [(set_attr \"type\" \"crypto_sha1_slow\")]\n )\n@@ -5867,7 +5867,7 @@\n                       (match_operand:V4SI 2 \"register_operand\" \"w\")\n                       (match_operand:V4SI 3 \"register_operand\" \"w\")]\n          UNSPEC_SHA1SU0))]\n-  \"TARGET_SIMD && TARGET_CRYPTO\"\n+  \"TARGET_SIMD && TARGET_SHA2\"\n   \"sha1su0\\\\t%0.4s, %2.4s, %3.4s\"\n   [(set_attr \"type\" \"crypto_sha1_xor\")]\n )\n@@ -5880,7 +5880,7 @@\n                       (match_operand:V4SI 2 \"register_operand\" \"w\")\n                       (match_operand:V4SI 3 \"register_operand\" \"w\")]\n          CRYPTO_SHA256))]\n-  \"TARGET_SIMD && TARGET_CRYPTO\"\n+  \"TARGET_SIMD && TARGET_SHA2\"\n   \"sha256h<sha256_op>\\\\t%q0, %q2, %3.4s\"\n   [(set_attr \"type\" \"crypto_sha256_slow\")]\n )\n@@ -5890,7 +5890,7 @@\n         (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"0\")\n                       (match_operand:V4SI 2 \"register_operand\" \"w\")]\n          UNSPEC_SHA256SU0))]\n-  \"TARGET_SIMD &&TARGET_CRYPTO\"\n+  \"TARGET_SIMD && TARGET_SHA2\"\n   \"sha256su0\\\\t%0.4s, %2.4s\"\n   [(set_attr \"type\" \"crypto_sha256_fast\")]\n )\n@@ -5901,19 +5901,754 @@\n                       (match_operand:V4SI 2 \"register_operand\" \"w\")\n                       (match_operand:V4SI 3 \"register_operand\" \"w\")]\n          UNSPEC_SHA256SU1))]\n-  \"TARGET_SIMD &&TARGET_CRYPTO\"\n+  \"TARGET_SIMD && TARGET_SHA2\"\n   \"sha256su1\\\\t%0.4s, %2.4s, %3.4s\"\n   [(set_attr \"type\" \"crypto_sha256_slow\")]\n )\n \n+;; sha512\n+\n+(define_insn \"aarch64_crypto_sha512h<sha512_op>qv2di\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=w\")\n+        (unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"0\")\n+                      (match_operand:V2DI 2 \"register_operand\" \"w\")\n+                      (match_operand:V2DI 3 \"register_operand\" \"w\")]\n+         CRYPTO_SHA512))]\n+  \"TARGET_SIMD && TARGET_SHA3\"\n+  \"sha512h<sha512_op>\\\\t%q0, %q2, %3.2d\"\n+  [(set_attr \"type\" \"crypto_sha512\")]\n+)\n+\n+(define_insn \"aarch64_crypto_sha512su0qv2di\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=w\")\n+        (unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"0\")\n+                      (match_operand:V2DI 2 \"register_operand\" \"w\")]\n+         UNSPEC_SHA512SU0))]\n+  \"TARGET_SIMD && TARGET_SHA3\"\n+  \"sha512su0\\\\t%0.2d, %2.2d\"\n+  [(set_attr \"type\" \"crypto_sha512\")]\n+)\n+\n+(define_insn \"aarch64_crypto_sha512su1qv2di\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=w\")\n+        (unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"0\")\n+                      (match_operand:V2DI 2 \"register_operand\" \"w\")\n+                      (match_operand:V2DI 3 \"register_operand\" \"w\")]\n+         UNSPEC_SHA512SU1))]\n+  \"TARGET_SIMD && TARGET_SHA3\"\n+  \"sha512su1\\\\t%0.2d, %2.2d, %3.2d\"\n+  [(set_attr \"type\" \"crypto_sha512\")]\n+)\n+\n+;; sha3\n+\n+(define_insn \"aarch64_eor3qv8hi\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=w\")\n+\t(xor:V8HI\n+\t (xor:V8HI\n+\t  (match_operand:V8HI 2 \"register_operand\" \"%w\")\n+\t  (match_operand:V8HI 3 \"register_operand\" \"w\"))\n+\t (match_operand:V8HI 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SIMD && TARGET_SHA3\"\n+  \"eor3\\\\t%0.16b, %1.16b, %2.16b, %3.16b\"\n+  [(set_attr \"type\" \"crypto_sha3\")]\n+)\n+\n+(define_insn \"aarch64_rax1qv2di\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=w\")\n+\t(xor:V2DI\n+\t (rotate:V2DI\n+\t  (match_operand:V2DI 2 \"register_operand\" \"w\")\n+\t  (const_int 1))\n+\t (match_operand:V2DI 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SIMD && TARGET_SHA3\"\n+  \"rax1\\\\t%0.2d, %1.2d, %2.2d\"\n+  [(set_attr \"type\" \"crypto_sha3\")]\n+)\n+\n+(define_insn \"aarch64_xarqv2di\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=w\")\n+\t(rotatert:V2DI\n+\t (xor:V2DI\n+\t  (match_operand:V2DI 1 \"register_operand\" \"%w\")\n+\t  (match_operand:V2DI 2 \"register_operand\" \"w\"))\n+\t (match_operand:SI 3 \"aarch64_simd_shift_imm_di\" \"Usd\")))]\n+  \"TARGET_SIMD && TARGET_SHA3\"\n+  \"xar\\\\t%0.2d, %1.2d, %2.2d, %3\"\n+  [(set_attr \"type\" \"crypto_sha3\")]\n+)\n+\n+(define_insn \"aarch64_bcaxqv8hi\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=w\")\n+\t(xor:V8HI\n+\t (and:V8HI\n+\t  (not:V8HI (match_operand:V8HI 3 \"register_operand\" \"w\"))\n+\t  (match_operand:V8HI 2 \"register_operand\" \"w\"))\n+\t (match_operand:V8HI 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SIMD && TARGET_SHA3\"\n+  \"bcax\\\\t%0.16b, %1.16b, %2.16b, %3.16b\"\n+  [(set_attr \"type\" \"crypto_sha3\")]\n+)\n+\n+;; SM3\n+\n+(define_insn \"aarch64_sm3ss1qv4si\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=w\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"w\")\n+\t\t      (match_operand:V4SI 2 \"register_operand\" \"w\")\n+\t\t      (match_operand:V4SI 3 \"register_operand\" \"w\")]\n+\t UNSPEC_SM3SS1))]\n+  \"TARGET_SIMD && TARGET_SM4\"\n+  \"sm3ss1\\\\t%0.4s, %1.4s, %2.4s, %3.4s\"\n+  [(set_attr \"type\" \"crypto_sm3\")]\n+)\n+\n+\n+(define_insn \"aarch64_sm3tt<sm3tt_op>qv4si\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=w\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V4SI 2 \"register_operand\" \"w\")\n+\t\t      (match_operand:V4SI 3 \"register_operand\" \"w\")\n+\t\t      (match_operand:SI 4 \"aarch64_imm2\" \"Ui2\")]\n+\t CRYPTO_SM3TT))]\n+  \"TARGET_SIMD && TARGET_SM4\"\n+  \"sm3tt<sm3tt_op>\\\\t%0.4s, %2.4s, %3.4s[%4]\"\n+  [(set_attr \"type\" \"crypto_sm3\")]\n+)\n+\n+(define_insn \"aarch64_sm3partw<sm3part_op>qv4si\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=w\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V4SI 2 \"register_operand\" \"w\")\n+\t\t      (match_operand:V4SI 3 \"register_operand\" \"w\")]\n+\t CRYPTO_SM3PART))]\n+  \"TARGET_SIMD && TARGET_SM4\"\n+  \"sm3partw<sm3part_op>\\\\t%0.4s, %2.4s, %3.4s\"\n+  [(set_attr \"type\" \"crypto_sm3\")]\n+)\n+\n+;; SM4\n+\n+(define_insn \"aarch64_sm4eqv4si\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=w\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V4SI 2 \"register_operand\" \"w\")]\n+\t UNSPEC_SM4E))]\n+  \"TARGET_SIMD && TARGET_SM4\"\n+  \"sm4e\\\\t%0.4s, %2.4s\"\n+  [(set_attr \"type\" \"crypto_sm4\")]\n+)\n+\n+(define_insn \"aarch64_sm4ekeyqv4si\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=w\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"w\")\n+\t\t      (match_operand:V4SI 2 \"register_operand\" \"w\")]\n+\t UNSPEC_SM4EKEY))]\n+  \"TARGET_SIMD && TARGET_SM4\"\n+  \"sm4ekey\\\\t%0.4s, %1.4s, %2.4s\"\n+  [(set_attr \"type\" \"crypto_sm4\")]\n+)\n+\n+;; fp16fml\n+\n+(define_expand \"aarch64_fml<f16mac1>l<f16quad>_low<mode>\"\n+  [(set (match_operand:VDQSF 0 \"register_operand\" \"=w\")\n+\t(unspec:VDQSF\n+\t [(match_operand:VDQSF 1 \"register_operand\" \"0\")\n+\t  (match_operand:<VFMLA_W> 2 \"register_operand\" \"w\")\n+\t  (match_operand:<VFMLA_W> 3 \"register_operand\" \"w\")]\n+\t VFMLA16_LOW))]\n+  \"TARGET_F16FML\"\n+{\n+  int nunits = GET_MODE_NUNITS (<VFMLA_W>mode);\n+  rtx p1 = aarch64_simd_vect_par_cnst_half (<VFMLA_W>mode, nunits, false);\n+  rtx p2 = aarch64_simd_vect_par_cnst_half (<VFMLA_W>mode, nunits, false);\n+\n+  emit_insn (gen_aarch64_simd_fml<f16mac1>l<f16quad>_low<mode> (operands[0],\n+\t\t\t\t\t\t\t\toperands[1],\n+\t\t\t\t\t\t\t\toperands[2],\n+\t\t\t\t\t\t\t\toperands[3],\n+\t\t\t\t\t\t\t\tp1, p2));\n+  DONE;\n+\n+})\n+\n+(define_expand \"aarch64_fml<f16mac1>l<f16quad>_high<mode>\"\n+  [(set (match_operand:VDQSF 0 \"register_operand\" \"=w\")\n+\t(unspec:VDQSF\n+\t [(match_operand:VDQSF 1 \"register_operand\" \"0\")\n+\t  (match_operand:<VFMLA_W> 2 \"register_operand\" \"w\")\n+\t  (match_operand:<VFMLA_W> 3 \"register_operand\" \"w\")]\n+\t VFMLA16_HIGH))]\n+  \"TARGET_F16FML\"\n+{\n+  int nunits = GET_MODE_NUNITS (<VFMLA_W>mode);\n+  rtx p1 = aarch64_simd_vect_par_cnst_half (<VFMLA_W>mode, nunits, true);\n+  rtx p2 = aarch64_simd_vect_par_cnst_half (<VFMLA_W>mode, nunits, true);\n+\n+  emit_insn (gen_aarch64_simd_fml<f16mac1>l<f16quad>_high<mode> (operands[0],\n+\t\t\t\t\t\t\t\t operands[1],\n+\t\t\t\t\t\t\t\t operands[2],\n+\t\t\t\t\t\t\t\t operands[3],\n+\t\t\t\t\t\t\t\t p1, p2));\n+  DONE;\n+})\n+\n+(define_insn \"aarch64_simd_fmlal<f16quad>_low<mode>\"\n+  [(set (match_operand:VDQSF 0 \"register_operand\" \"=w\")\n+\t(fma:VDQSF\n+\t (float_extend:VDQSF\n+\t  (vec_select:<VFMLA_SEL_W>\n+\t   (match_operand:<VFMLA_W> 2 \"register_operand\" \"w\")\n+\t   (match_operand:<VFMLA_W> 4 \"vect_par_cnst_lo_half\" \"\")))\n+\t (float_extend:VDQSF\n+\t  (vec_select:<VFMLA_SEL_W>\n+\t   (match_operand:<VFMLA_W> 3 \"register_operand\" \"w\")\n+\t   (match_operand:<VFMLA_W> 5 \"vect_par_cnst_lo_half\" \"\")))\n+\t (match_operand:VDQSF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_F16FML\"\n+  \"fmlal\\\\t%0.<nunits>s, %2.<nunits>h, %3.<nunits>h\"\n+  [(set_attr \"type\" \"neon_fp_mul_s\")]\n+)\n+\n+(define_insn \"aarch64_simd_fmlsl<f16quad>_low<mode>\"\n+  [(set (match_operand:VDQSF 0 \"register_operand\" \"=w\")\n+\t(fma:VDQSF\n+\t (float_extend:VDQSF\n+\t  (neg:<VFMLA_SEL_W>\n+\t   (vec_select:<VFMLA_SEL_W>\n+\t    (match_operand:<VFMLA_W> 2 \"register_operand\" \"w\")\n+\t    (match_operand:<VFMLA_W> 4 \"vect_par_cnst_lo_half\" \"\"))))\n+\t (float_extend:VDQSF\n+\t  (vec_select:<VFMLA_SEL_W>\n+\t   (match_operand:<VFMLA_W> 3 \"register_operand\" \"w\")\n+\t   (match_operand:<VFMLA_W> 5 \"vect_par_cnst_lo_half\" \"\")))\n+\t (match_operand:VDQSF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_F16FML\"\n+  \"fmlsl\\\\t%0.<nunits>s, %2.<nunits>h, %3.<nunits>h\"\n+  [(set_attr \"type\" \"neon_fp_mul_s\")]\n+)\n+\n+(define_insn \"aarch64_simd_fmlal<f16quad>_high<mode>\"\n+  [(set (match_operand:VDQSF 0 \"register_operand\" \"=w\")\n+\t(fma:VDQSF\n+\t (float_extend:VDQSF\n+\t  (vec_select:<VFMLA_SEL_W>\n+\t   (match_operand:<VFMLA_W> 2 \"register_operand\" \"w\")\n+\t   (match_operand:<VFMLA_W> 4 \"vect_par_cnst_hi_half\" \"\")))\n+\t (float_extend:VDQSF\n+\t  (vec_select:<VFMLA_SEL_W>\n+\t   (match_operand:<VFMLA_W> 3 \"register_operand\" \"w\")\n+\t   (match_operand:<VFMLA_W> 5 \"vect_par_cnst_hi_half\" \"\")))\n+\t (match_operand:VDQSF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_F16FML\"\n+  \"fmlal2\\\\t%0.<nunits>s, %2.<nunits>h, %3.<nunits>h\"\n+  [(set_attr \"type\" \"neon_fp_mul_s\")]\n+)\n+\n+(define_insn \"aarch64_simd_fmlsl<f16quad>_high<mode>\"\n+  [(set (match_operand:VDQSF 0 \"register_operand\" \"=w\")\n+\t(fma:VDQSF\n+\t (float_extend:VDQSF\n+\t  (neg:<VFMLA_SEL_W>\n+\t   (vec_select:<VFMLA_SEL_W>\n+\t    (match_operand:<VFMLA_W> 2 \"register_operand\" \"w\")\n+\t    (match_operand:<VFMLA_W> 4 \"vect_par_cnst_hi_half\" \"\"))))\n+\t (float_extend:VDQSF\n+\t  (vec_select:<VFMLA_SEL_W>\n+\t   (match_operand:<VFMLA_W> 3 \"register_operand\" \"w\")\n+\t   (match_operand:<VFMLA_W> 5 \"vect_par_cnst_hi_half\" \"\")))\n+\t (match_operand:VDQSF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_F16FML\"\n+  \"fmlsl2\\\\t%0.<nunits>s, %2.<nunits>h, %3.<nunits>h\"\n+  [(set_attr \"type\" \"neon_fp_mul_s\")]\n+)\n+\n+(define_expand \"aarch64_fml<f16mac1>l_lane_lowv2sf\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"\")\n+\t\t\t   (match_operand:V4HF 2 \"register_operand\" \"\")\n+\t\t\t   (match_operand:V4HF 3 \"register_operand\" \"\")\n+\t\t\t   (match_operand:SI 4 \"aarch64_imm2\" \"\")]\n+\t VFMLA16_LOW))]\n+  \"TARGET_F16FML\"\n+{\n+    rtx p1 = aarch64_simd_vect_par_cnst_half (V4HFmode,\n+\t\t\t\t\t      GET_MODE_NUNITS (V4HFmode),\n+\t\t\t\t\t      false);\n+    rtx lane = aarch64_endian_lane_rtx (V4HFmode, INTVAL (operands[4]));\n+\n+    emit_insn (gen_aarch64_simd_fml<f16mac1>l_lane_lowv2sf (operands[0],\n+\t\t\t\t\t\t\t    operands[1],\n+\t\t\t\t\t\t\t    operands[2],\n+\t\t\t\t\t\t\t    operands[3],\n+\t\t\t\t\t\t\t    p1, lane));\n+    DONE;\n+}\n+)\n+\n+(define_expand \"aarch64_fml<f16mac1>l_lane_highv2sf\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"\")\n+\t\t\t   (match_operand:V4HF 2 \"register_operand\" \"\")\n+\t\t\t   (match_operand:V4HF 3 \"register_operand\" \"\")\n+\t\t\t   (match_operand:SI 4 \"aarch64_imm2\" \"\")]\n+\t VFMLA16_HIGH))]\n+  \"TARGET_F16FML\"\n+{\n+    rtx p1 = aarch64_simd_vect_par_cnst_half (V4HFmode,\n+\t\t\t\t\t      GET_MODE_NUNITS (V4HFmode),\n+\t\t\t\t\t      true);\n+    rtx lane = aarch64_endian_lane_rtx (V4HFmode, INTVAL (operands[4]));\n+\n+    emit_insn (gen_aarch64_simd_fml<f16mac1>l_lane_highv2sf (operands[0],\n+\t\t\t\t\t\t\t     operands[1],\n+\t\t\t\t\t\t\t     operands[2],\n+\t\t\t\t\t\t\t     operands[3],\n+\t\t\t\t\t\t\t     p1, lane));\n+    DONE;\n+})\n+\n+(define_insn \"aarch64_simd_fmlal_lane_lowv2sf\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=w\")\n+\t(fma:V2SF\n+\t (float_extend:V2SF\n+\t   (vec_select:V2HF\n+\t    (match_operand:V4HF 2 \"register_operand\" \"w\")\n+\t    (match_operand:V4HF 4 \"vect_par_cnst_lo_half\" \"\")))\n+\t (float_extend:V2SF\n+\t   (vec_duplicate:V2HF\n+\t    (vec_select:HF\n+\t     (match_operand:V4HF 3 \"register_operand\" \"x\")\n+\t     (parallel [(match_operand:SI 5 \"aarch64_imm2\" \"Ui2\")]))))\n+\t (match_operand:V2SF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_F16FML\"\n+  \"fmlal\\\\t%0.2s, %2.2h, %3.h[%5]\"\n+  [(set_attr \"type\" \"neon_fp_mul_s\")]\n+)\n+\n+(define_insn \"aarch64_simd_fmlsl_lane_lowv2sf\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=w\")\n+\t(fma:V2SF\n+\t (float_extend:V2SF\n+\t  (neg:V2HF\n+\t   (vec_select:V2HF\n+\t    (match_operand:V4HF 2 \"register_operand\" \"w\")\n+\t    (match_operand:V4HF 4 \"vect_par_cnst_lo_half\" \"\"))))\n+\t (float_extend:V2SF\n+\t  (vec_duplicate:V2HF\n+\t   (vec_select:HF\n+\t    (match_operand:V4HF 3 \"register_operand\" \"x\")\n+\t    (parallel [(match_operand:SI 5 \"aarch64_imm2\" \"Ui2\")]))))\n+\t (match_operand:V2SF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_F16FML\"\n+  \"fmlsl\\\\t%0.2s, %2.2h, %3.h[%5]\"\n+  [(set_attr \"type\" \"neon_fp_mul_s\")]\n+)\n+\n+(define_insn \"aarch64_simd_fmlal_lane_highv2sf\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=w\")\n+\t(fma:V2SF\n+\t (float_extend:V2SF\n+\t   (vec_select:V2HF\n+\t    (match_operand:V4HF 2 \"register_operand\" \"w\")\n+\t    (match_operand:V4HF 4 \"vect_par_cnst_hi_half\" \"\")))\n+\t (float_extend:V2SF\n+\t   (vec_duplicate:V2HF\n+\t    (vec_select:HF\n+\t     (match_operand:V4HF 3 \"register_operand\" \"x\")\n+\t     (parallel [(match_operand:SI 5 \"aarch64_imm2\" \"Ui2\")]))))\n+\t (match_operand:V2SF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_F16FML\"\n+  \"fmlal2\\\\t%0.2s, %2.2h, %3.h[%5]\"\n+  [(set_attr \"type\" \"neon_fp_mul_s\")]\n+)\n+\n+(define_insn \"aarch64_simd_fmlsl_lane_highv2sf\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=w\")\n+\t(fma:V2SF\n+\t (float_extend:V2SF\n+\t   (neg:V2HF\n+\t    (vec_select:V2HF\n+\t     (match_operand:V4HF 2 \"register_operand\" \"w\")\n+\t     (match_operand:V4HF 4 \"vect_par_cnst_hi_half\" \"\"))))\n+\t (float_extend:V2SF\n+\t   (vec_duplicate:V2HF\n+\t    (vec_select:HF\n+\t     (match_operand:V4HF 3 \"register_operand\" \"x\")\n+\t     (parallel [(match_operand:SI 5 \"aarch64_imm2\" \"Ui2\")]))))\n+\t (match_operand:V2SF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_F16FML\"\n+  \"fmlsl2\\\\t%0.2s, %2.2h, %3.h[%5]\"\n+  [(set_attr \"type\" \"neon_fp_mul_s\")]\n+)\n+\n+(define_expand \"aarch64_fml<f16mac1>lq_laneq_lowv4sf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"\")\n+\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"\")\n+\t\t\t   (match_operand:V8HF 2 \"register_operand\" \"\")\n+\t\t\t   (match_operand:V8HF 3 \"register_operand\" \"\")\n+\t\t\t   (match_operand:SI 4 \"aarch64_lane_imm3\" \"\")]\n+\t VFMLA16_LOW))]\n+  \"TARGET_F16FML\"\n+{\n+    rtx p1 = aarch64_simd_vect_par_cnst_half (V8HFmode,\n+\t\t\t\t\t      GET_MODE_NUNITS (V8HFmode),\n+\t\t\t\t\t      false);\n+    rtx lane = aarch64_endian_lane_rtx (V8HFmode, INTVAL (operands[4]));\n+\n+    emit_insn (gen_aarch64_simd_fml<f16mac1>lq_laneq_lowv4sf (operands[0],\n+\t\t\t\t\t\t\t      operands[1],\n+\t\t\t\t\t\t\t      operands[2],\n+\t\t\t\t\t\t\t      operands[3],\n+\t\t\t\t\t\t\t      p1, lane));\n+    DONE;\n+})\n+\n+(define_expand \"aarch64_fml<f16mac1>lq_laneq_highv4sf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"\")\n+\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"\")\n+\t\t\t   (match_operand:V8HF 2 \"register_operand\" \"\")\n+\t\t\t   (match_operand:V8HF 3 \"register_operand\" \"\")\n+\t\t\t   (match_operand:SI 4 \"aarch64_lane_imm3\" \"\")]\n+\t VFMLA16_HIGH))]\n+  \"TARGET_F16FML\"\n+{\n+    rtx p1 = aarch64_simd_vect_par_cnst_half (V8HFmode,\n+\t\t\t\t\t      GET_MODE_NUNITS (V8HFmode),\n+\t\t\t\t\t      true);\n+\n+    rtx lane = aarch64_endian_lane_rtx (V8HFmode, INTVAL (operands[4]));\n+\n+    emit_insn (gen_aarch64_simd_fml<f16mac1>lq_laneq_highv4sf (operands[0],\n+\t\t\t\t\t\t\t       operands[1],\n+\t\t\t\t\t\t\t       operands[2],\n+\t\t\t\t\t\t\t       operands[3],\n+\t\t\t\t\t\t\t       p1, lane));\n+    DONE;\n+})\n+\n+(define_insn \"aarch64_simd_fmlalq_laneq_lowv4sf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n+\t(fma:V4SF\n+\t (float_extend:V4SF\n+\t  (vec_select:V4HF\n+\t    (match_operand:V8HF 2 \"register_operand\" \"w\")\n+\t    (match_operand:V8HF 4 \"vect_par_cnst_lo_half\" \"\")))\n+\t (float_extend:V4SF\n+\t  (vec_duplicate:V4HF\n+\t   (vec_select:HF\n+\t    (match_operand:V8HF 3 \"register_operand\" \"x\")\n+\t    (parallel [(match_operand:SI 5 \"aarch64_lane_imm3\" \"Ui7\")]))))\n+\t (match_operand:V4SF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_F16FML\"\n+  \"fmlal\\\\t%0.4s, %2.4h, %3.h[%5]\"\n+  [(set_attr \"type\" \"neon_fp_mul_s\")]\n+)\n+\n+(define_insn \"aarch64_simd_fmlslq_laneq_lowv4sf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n+\t(fma:V4SF\n+\t  (float_extend:V4SF\n+\t   (neg:V4HF\n+\t    (vec_select:V4HF\n+\t     (match_operand:V8HF 2 \"register_operand\" \"w\")\n+\t     (match_operand:V8HF 4 \"vect_par_cnst_lo_half\" \"\"))))\n+\t (float_extend:V4SF\n+\t  (vec_duplicate:V4HF\n+\t   (vec_select:HF\n+\t    (match_operand:V8HF 3 \"register_operand\" \"x\")\n+\t    (parallel [(match_operand:SI 5 \"aarch64_lane_imm3\" \"Ui7\")]))))\n+\t (match_operand:V4SF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_F16FML\"\n+  \"fmlsl\\\\t%0.4s, %2.4h, %3.h[%5]\"\n+  [(set_attr \"type\" \"neon_fp_mul_s\")]\n+)\n+\n+(define_insn \"aarch64_simd_fmlalq_laneq_highv4sf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n+\t(fma:V4SF\n+\t (float_extend:V4SF\n+\t  (vec_select:V4HF\n+\t    (match_operand:V8HF 2 \"register_operand\" \"w\")\n+\t    (match_operand:V8HF 4 \"vect_par_cnst_hi_half\" \"\")))\n+\t (float_extend:V4SF\n+\t  (vec_duplicate:V4HF\n+\t   (vec_select:HF\n+\t    (match_operand:V8HF 3 \"register_operand\" \"x\")\n+\t    (parallel [(match_operand:SI 5 \"aarch64_lane_imm3\" \"Ui7\")]))))\n+\t (match_operand:V4SF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_F16FML\"\n+  \"fmlal2\\\\t%0.4s, %2.4h, %3.h[%5]\"\n+  [(set_attr \"type\" \"neon_fp_mul_s\")]\n+)\n+\n+(define_insn \"aarch64_simd_fmlslq_laneq_highv4sf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n+\t(fma:V4SF\n+\t (float_extend:V4SF\n+\t  (neg:V4HF\n+\t   (vec_select:V4HF\n+\t    (match_operand:V8HF 2 \"register_operand\" \"w\")\n+\t    (match_operand:V8HF 4 \"vect_par_cnst_hi_half\" \"\"))))\n+\t (float_extend:V4SF\n+\t  (vec_duplicate:V4HF\n+\t   (vec_select:HF\n+\t    (match_operand:V8HF 3 \"register_operand\" \"x\")\n+\t    (parallel [(match_operand:SI 5 \"aarch64_lane_imm3\" \"Ui7\")]))))\n+\t (match_operand:V4SF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_F16FML\"\n+  \"fmlsl2\\\\t%0.4s, %2.4h, %3.h[%5]\"\n+  [(set_attr \"type\" \"neon_fp_mul_s\")]\n+)\n+\n+(define_expand \"aarch64_fml<f16mac1>l_laneq_lowv2sf\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"\")\n+\t\t      (match_operand:V4HF 2 \"register_operand\" \"\")\n+\t\t      (match_operand:V8HF 3 \"register_operand\" \"\")\n+\t\t      (match_operand:SI 4 \"aarch64_lane_imm3\" \"\")]\n+\t VFMLA16_LOW))]\n+  \"TARGET_F16FML\"\n+{\n+    rtx p1 = aarch64_simd_vect_par_cnst_half (V4HFmode,\n+\t\t\t\t\t      GET_MODE_NUNITS (V4HFmode),\n+\t\t\t\t\t      false);\n+    rtx lane = aarch64_endian_lane_rtx (V8HFmode, INTVAL (operands[4]));\n+\n+    emit_insn (gen_aarch64_simd_fml<f16mac1>l_laneq_lowv2sf (operands[0],\n+\t\t\t\t\t\t\t     operands[1],\n+\t\t\t\t\t\t\t     operands[2],\n+\t\t\t\t\t\t\t     operands[3],\n+\t\t\t\t\t\t\t     p1, lane));\n+    DONE;\n+\n+})\n+\n+(define_expand \"aarch64_fml<f16mac1>l_laneq_highv2sf\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"\")\n+\t\t      (match_operand:V4HF 2 \"register_operand\" \"\")\n+\t\t      (match_operand:V8HF 3 \"register_operand\" \"\")\n+\t\t      (match_operand:SI 4 \"aarch64_lane_imm3\" \"\")]\n+\t VFMLA16_HIGH))]\n+  \"TARGET_F16FML\"\n+{\n+    rtx p1 = aarch64_simd_vect_par_cnst_half (V4HFmode,\n+\t\t\t\t\t      GET_MODE_NUNITS(V4HFmode),\n+\t\t\t\t\t      true);\n+    rtx lane = aarch64_endian_lane_rtx (V8HFmode, INTVAL (operands[4]));\n+\n+    emit_insn (gen_aarch64_simd_fml<f16mac1>l_laneq_highv2sf (operands[0],\n+\t\t\t\t\t\t\t      operands[1],\n+\t\t\t\t\t\t\t      operands[2],\n+\t\t\t\t\t\t\t      operands[3],\n+\t\t\t\t\t\t\t      p1, lane));\n+    DONE;\n+\n+})\n+\n+(define_insn \"aarch64_simd_fmlal_laneq_lowv2sf\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=w\")\n+\t(fma:V2SF\n+\t (float_extend:V2SF\n+\t   (vec_select:V2HF\n+\t    (match_operand:V4HF 2 \"register_operand\" \"w\")\n+\t    (match_operand:V4HF 4 \"vect_par_cnst_lo_half\" \"\")))\n+\t (float_extend:V2SF\n+\t  (vec_duplicate:V2HF\n+\t   (vec_select:HF\n+\t    (match_operand:V8HF 3 \"register_operand\" \"x\")\n+\t    (parallel [(match_operand:SI 5 \"aarch64_lane_imm3\" \"Ui7\")]))))\n+\t (match_operand:V2SF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_F16FML\"\n+  \"fmlal\\\\t%0.2s, %2.2h, %3.h[%5]\"\n+  [(set_attr \"type\" \"neon_fp_mul_s\")]\n+)\n+\n+(define_insn \"aarch64_simd_fmlsl_laneq_lowv2sf\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=w\")\n+\t(fma:V2SF\n+\t (float_extend:V2SF\n+\t  (neg:V2HF\n+\t   (vec_select:V2HF\n+\t    (match_operand:V4HF 2 \"register_operand\" \"w\")\n+\t    (match_operand:V4HF 4 \"vect_par_cnst_lo_half\" \"\"))))\n+\t (float_extend:V2SF\n+\t  (vec_duplicate:V2HF\n+\t   (vec_select:HF\n+\t    (match_operand:V8HF 3 \"register_operand\" \"x\")\n+\t    (parallel [(match_operand:SI 5 \"aarch64_lane_imm3\" \"Ui7\")]))))\n+\t (match_operand:V2SF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_F16FML\"\n+  \"fmlsl\\\\t%0.2s, %2.2h, %3.h[%5]\"\n+  [(set_attr \"type\" \"neon_fp_mul_s\")]\n+)\n+\n+(define_insn \"aarch64_simd_fmlal_laneq_highv2sf\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=w\")\n+\t(fma:V2SF\n+\t (float_extend:V2SF\n+\t   (vec_select:V2HF\n+\t    (match_operand:V4HF 2 \"register_operand\" \"w\")\n+\t    (match_operand:V4HF 4 \"vect_par_cnst_hi_half\" \"\")))\n+\t (float_extend:V2SF\n+\t  (vec_duplicate:V2HF\n+\t   (vec_select:HF\n+\t    (match_operand:V8HF 3 \"register_operand\" \"x\")\n+\t    (parallel [(match_operand:SI 5 \"aarch64_lane_imm3\" \"Ui7\")]))))\n+\t (match_operand:V2SF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_F16FML\"\n+  \"fmlal2\\\\t%0.2s, %2.2h, %3.h[%5]\"\n+  [(set_attr \"type\" \"neon_fp_mul_s\")]\n+)\n+\n+(define_insn \"aarch64_simd_fmlsl_laneq_highv2sf\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=w\")\n+\t(fma:V2SF\n+\t (float_extend:V2SF\n+\t  (neg:V2HF\n+\t   (vec_select:V2HF\n+\t    (match_operand:V4HF 2 \"register_operand\" \"w\")\n+\t    (match_operand:V4HF 4 \"vect_par_cnst_hi_half\" \"\"))))\n+\t (float_extend:V2SF\n+\t  (vec_duplicate:V2HF\n+\t   (vec_select:HF\n+\t    (match_operand:V8HF 3 \"register_operand\" \"x\")\n+\t    (parallel [(match_operand:SI 5 \"aarch64_lane_imm3\" \"Ui7\")]))))\n+\t (match_operand:V2SF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_F16FML\"\n+  \"fmlsl2\\\\t%0.2s, %2.2h, %3.h[%5]\"\n+  [(set_attr \"type\" \"neon_fp_mul_s\")]\n+)\n+\n+(define_expand \"aarch64_fml<f16mac1>lq_lane_lowv4sf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"\")\n+\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"\")\n+\t\t      (match_operand:V8HF 2 \"register_operand\" \"\")\n+\t\t      (match_operand:V4HF 3 \"register_operand\" \"\")\n+\t\t      (match_operand:SI 4 \"aarch64_imm2\" \"\")]\n+\t VFMLA16_LOW))]\n+  \"TARGET_F16FML\"\n+{\n+    rtx p1 = aarch64_simd_vect_par_cnst_half (V8HFmode,\n+\t\t\t\t\t      GET_MODE_NUNITS (V8HFmode),\n+\t\t\t\t\t      false);\n+\n+    rtx lane = aarch64_endian_lane_rtx (V4HFmode, INTVAL (operands[4]));\n+\n+    emit_insn (gen_aarch64_simd_fml<f16mac1>lq_lane_lowv4sf (operands[0],\n+\t\t\t\t\t\t\t     operands[1],\n+\t\t\t\t\t\t\t     operands[2],\n+\t\t\t\t\t\t\t     operands[3],\n+\t\t\t\t\t\t\t     p1, lane));\n+    DONE;\n+})\n+\n+(define_expand \"aarch64_fml<f16mac1>lq_lane_highv4sf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"\")\n+\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"\")\n+\t\t      (match_operand:V8HF 2 \"register_operand\" \"\")\n+\t\t      (match_operand:V4HF 3 \"register_operand\" \"\")\n+\t\t      (match_operand:SI 4 \"aarch64_imm2\" \"\")]\n+\t VFMLA16_HIGH))]\n+  \"TARGET_F16FML\"\n+{\n+    rtx p1 = aarch64_simd_vect_par_cnst_half (V8HFmode,\n+\t\t\t\t\t      GET_MODE_NUNITS (V8HFmode),\n+\t\t\t\t\t      true);\n+    rtx lane = aarch64_endian_lane_rtx (V4HFmode, INTVAL (operands[4]));\n+\n+    emit_insn (gen_aarch64_simd_fml<f16mac1>lq_lane_highv4sf (operands[0],\n+\t\t\t\t\t\t\t      operands[1],\n+\t\t\t\t\t\t\t      operands[2],\n+\t\t\t\t\t\t\t      operands[3],\n+\t\t\t\t\t\t\t      p1, lane));\n+    DONE;\n+})\n+\n+(define_insn \"aarch64_simd_fmlalq_lane_lowv4sf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n+\t(fma:V4SF\n+\t (float_extend:V4SF\n+\t  (vec_select:V4HF\n+\t   (match_operand:V8HF 2 \"register_operand\" \"w\")\n+\t   (match_operand:V8HF 4 \"vect_par_cnst_lo_half\" \"\")))\n+\t (float_extend:V4SF\n+\t  (vec_duplicate:V4HF\n+\t   (vec_select:HF\n+\t    (match_operand:V4HF 3 \"register_operand\" \"x\")\n+\t    (parallel [(match_operand:SI 5 \"aarch64_imm2\" \"Ui2\")]))))\n+\t (match_operand:V4SF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_F16FML\"\n+  \"fmlal\\\\t%0.4s, %2.4h, %3.h[%5]\"\n+  [(set_attr \"type\" \"neon_fp_mul_s\")]\n+)\n+\n+(define_insn \"aarch64_simd_fmlslq_lane_lowv4sf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n+\t(fma:V4SF\n+\t (float_extend:V4SF\n+\t  (neg:V4HF\n+\t   (vec_select:V4HF\n+\t    (match_operand:V8HF 2 \"register_operand\" \"w\")\n+\t    (match_operand:V8HF 4 \"vect_par_cnst_lo_half\" \"\"))))\n+\t (float_extend:V4SF\n+\t  (vec_duplicate:V4HF\n+\t   (vec_select:HF\n+\t    (match_operand:V4HF 3 \"register_operand\" \"x\")\n+\t    (parallel [(match_operand:SI 5 \"aarch64_imm2\" \"Ui2\")]))))\n+\t (match_operand:V4SF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_F16FML\"\n+  \"fmlsl\\\\t%0.4s, %2.4h, %3.h[%5]\"\n+  [(set_attr \"type\" \"neon_fp_mul_s\")]\n+)\n+\n+(define_insn \"aarch64_simd_fmlalq_lane_highv4sf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n+\t(fma:V4SF\n+\t (float_extend:V4SF\n+\t  (vec_select:V4HF\n+\t   (match_operand:V8HF 2 \"register_operand\" \"w\")\n+\t   (match_operand:V8HF 4 \"vect_par_cnst_hi_half\" \"\")))\n+\t (float_extend:V4SF\n+\t  (vec_duplicate:V4HF\n+\t   (vec_select:HF\n+\t    (match_operand:V4HF 3 \"register_operand\" \"x\")\n+\t    (parallel [(match_operand:SI 5 \"aarch64_imm2\" \"Ui2\")]))))\n+\t (match_operand:V4SF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_F16FML\"\n+  \"fmlal2\\\\t%0.4s, %2.4h, %3.h[%5]\"\n+  [(set_attr \"type\" \"neon_fp_mul_s\")]\n+)\n+\n+(define_insn \"aarch64_simd_fmlslq_lane_highv4sf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n+\t(fma:V4SF\n+\t (float_extend:V4SF\n+\t  (neg:V4HF\n+\t   (vec_select:V4HF\n+\t    (match_operand:V8HF 2 \"register_operand\" \"w\")\n+\t    (match_operand:V8HF 4 \"vect_par_cnst_hi_half\" \"\"))))\n+\t (float_extend:V4SF\n+\t  (vec_duplicate:V4HF\n+\t   (vec_select:HF\n+\t    (match_operand:V4HF 3 \"register_operand\" \"x\")\n+\t    (parallel [(match_operand:SI 5 \"aarch64_imm2\" \"Ui2\")]))))\n+\t (match_operand:V4SF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_F16FML\"\n+  \"fmlsl2\\\\t%0.4s, %2.4h, %3.h[%5]\"\n+  [(set_attr \"type\" \"neon_fp_mul_s\")]\n+)\n+\n ;; pmull\n \n (define_insn \"aarch64_crypto_pmulldi\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=w\")\n         (unspec:TI  [(match_operand:DI 1 \"register_operand\" \"w\")\n \t\t     (match_operand:DI 2 \"register_operand\" \"w\")]\n \t\t    UNSPEC_PMULL))]\n- \"TARGET_SIMD && TARGET_CRYPTO\"\n+ \"TARGET_SIMD && TARGET_AES\"\n  \"pmull\\\\t%0.1q, %1.1d, %2.1d\"\n   [(set_attr \"type\" \"crypto_pmull\")]\n )\n@@ -5923,7 +6658,7 @@\n        (unspec:TI [(match_operand:V2DI 1 \"register_operand\" \"w\")\n \t\t   (match_operand:V2DI 2 \"register_operand\" \"w\")]\n \t\t  UNSPEC_PMULL2))]\n-  \"TARGET_SIMD && TARGET_CRYPTO\"\n+  \"TARGET_SIMD && TARGET_AES\"\n   \"pmull2\\\\t%0.1q, %1.2d, %2.2d\"\n   [(set_attr \"type\" \"crypto_pmull\")]\n )"}, {"sha": "82412e8676b88c34f6b93e597ba89b5e73ab2afd", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -148,6 +148,14 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_FL_V8_3       (1 << 10)  /* Has ARMv8.3-A features.  */\n #define AARCH64_FL_RCPC       (1 << 11)  /* Has support for RCpc model.  */\n #define AARCH64_FL_DOTPROD    (1 << 12)  /* Has ARMv8.2-A Dot Product ins.  */\n+/* New flags to split crypto into aes and sha2.  */\n+#define AARCH64_FL_AES\t      (1 << 13)  /* Has Crypto AES.  */\n+#define AARCH64_FL_SHA2\t      (1 << 14)  /* Has Crypto SHA2.  */\n+/* ARMv8.4-A architecture extensions.  */\n+#define AARCH64_FL_V8_4\t      (1 << 15)  /* Has ARMv8.4-A features.  */\n+#define AARCH64_FL_SM4\t      (1 << 16)  /* Has ARMv8.4-A SM3 and SM4.  */\n+#define AARCH64_FL_SHA3\t      (1 << 17)  /* Has ARMv8.4-a SHA3 and SHA512.  */\n+#define AARCH64_FL_F16FML     (1 << 18)  /* Has ARMv8.4-a FP16 extensions.  */\n \n /* Has FP and SIMD.  */\n #define AARCH64_FL_FPSIMD     (AARCH64_FL_FP | AARCH64_FL_SIMD)\n@@ -164,6 +172,8 @@ extern unsigned aarch64_architecture_version;\n   (AARCH64_FL_FOR_ARCH8_1 | AARCH64_FL_V8_2)\n #define AARCH64_FL_FOR_ARCH8_3\t\t\t\\\n   (AARCH64_FL_FOR_ARCH8_2 | AARCH64_FL_V8_3)\n+#define AARCH64_FL_FOR_ARCH8_4\t\t\t\\\n+  (AARCH64_FL_FOR_ARCH8_3 | AARCH64_FL_V8_4 | AARCH64_FL_F16FML)\n \n /* Macros to test ISA flags.  */\n \n@@ -177,10 +187,31 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_ISA_F16\t\t   (aarch64_isa_flags & AARCH64_FL_F16)\n #define AARCH64_ISA_V8_3\t   (aarch64_isa_flags & AARCH64_FL_V8_3)\n #define AARCH64_ISA_DOTPROD\t   (aarch64_isa_flags & AARCH64_FL_DOTPROD)\n+#define AARCH64_ISA_AES\t           (aarch64_isa_flags & AARCH64_FL_AES)\n+#define AARCH64_ISA_SHA2\t   (aarch64_isa_flags & AARCH64_FL_SHA2)\n+#define AARCH64_ISA_V8_4\t   (aarch64_isa_flags & AARCH64_FL_V8_4)\n+#define AARCH64_ISA_SM4\t           (aarch64_isa_flags & AARCH64_FL_SM4)\n+#define AARCH64_ISA_SHA3\t   (aarch64_isa_flags & AARCH64_FL_SHA3)\n+#define AARCH64_ISA_F16FML\t   (aarch64_isa_flags & AARCH64_FL_F16FML)\n \n /* Crypto is an optional extension to AdvSIMD.  */\n #define TARGET_CRYPTO (TARGET_SIMD && AARCH64_ISA_CRYPTO)\n \n+/* SHA2 is an optional extension to AdvSIMD.  */\n+#define TARGET_SHA2 ((TARGET_SIMD && AARCH64_ISA_SHA2) || TARGET_CRYPTO)\n+\n+/* SHA3 is an optional extension to AdvSIMD.  */\n+#define TARGET_SHA3 (TARGET_SIMD && AARCH64_ISA_SHA3)\n+\n+/* AES is an optional extension to AdvSIMD.  */\n+#define TARGET_AES ((TARGET_SIMD && AARCH64_ISA_AES) || TARGET_CRYPTO)\n+\n+/* SM is an optional extension to AdvSIMD.  */\n+#define TARGET_SM4 (TARGET_SIMD && AARCH64_ISA_SM4)\n+\n+/* FP16FML is an optional extension to AdvSIMD.  */\n+#define TARGET_F16FML (TARGET_SIMD && AARCH64_ISA_F16FML && TARGET_FP_F16INST)\n+\n /* CRC instructions that can be enabled through +crc arch extension.  */\n #define TARGET_CRC32 (AARCH64_ISA_CRC)\n "}, {"sha": "c45c29ae815c9ff373eb2f57a77ebeda910a30cf", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 316, "deletions": 0, "changes": 316, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -31970,6 +31970,322 @@ vdotq_laneq_s32 (int32x4_t __r, int8x16_t __a, int8x16_t __b, const int __index)\n }\n #pragma GCC pop_options\n \n+#pragma GCC push_options\n+#pragma GCC target((\"arch=armv8.2-a+sm4\"))\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsm3ss1q_u32 (uint32x4_t __a, uint32x4_t __b, uint32x4_t __c)\n+{\n+  return __builtin_aarch64_sm3ss1qv4si_uuuu (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsm3tt1aq_u32 (uint32x4_t __a, uint32x4_t __b, uint32x4_t __c, const int __imm2)\n+{\n+  return __builtin_aarch64_sm3tt1aqv4si_uuuus (__a, __b, __c, __imm2);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsm3tt1bq_u32 (uint32x4_t __a, uint32x4_t __b, uint32x4_t __c, const int __imm2)\n+{\n+  return __builtin_aarch64_sm3tt1bqv4si_uuuus (__a, __b, __c, __imm2);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsm3tt2aq_u32 (uint32x4_t __a, uint32x4_t __b, uint32x4_t __c, const int __imm2)\n+{\n+  return __builtin_aarch64_sm3tt2aqv4si_uuuus (__a, __b, __c, __imm2);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsm3tt2bq_u32 (uint32x4_t __a, uint32x4_t __b, uint32x4_t __c, const int __imm2)\n+{\n+  return __builtin_aarch64_sm3tt2bqv4si_uuuus (__a, __b, __c, __imm2);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsm3partw1q_u32 (uint32x4_t __a, uint32x4_t __b, uint32x4_t __c)\n+{\n+  return __builtin_aarch64_sm3partw1qv4si_uuuu (__a, __b, __c);\n+}\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsm3partw2q_u32 (uint32x4_t __a, uint32x4_t __b, uint32x4_t __c)\n+{\n+  return __builtin_aarch64_sm3partw2qv4si_uuuu (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsm4eq_u32 (uint32x4_t __a, uint32x4_t __b)\n+{\n+  return __builtin_aarch64_sm4eqv4si_uuu (__a, __b);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsm4ekeyq_u32 (uint32x4_t __a, uint32x4_t __b)\n+{\n+  return __builtin_aarch64_sm4ekeyqv4si_uuu (__a, __b);\n+}\n+\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target((\"arch=armv8.2-a+crypto\"))\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsha512hq_u64 (uint64x2_t __a, uint64x2_t __b, uint64x2_t __c)\n+{\n+  return __builtin_aarch64_crypto_sha512hqv2di_uuuu (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsha512h2q_u64 (uint64x2_t __a, uint64x2_t __b, uint64x2_t __c)\n+{\n+  return __builtin_aarch64_crypto_sha512h2qv2di_uuuu (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsha512su0q_u64 (uint64x2_t __a, uint64x2_t __b)\n+{\n+  return __builtin_aarch64_crypto_sha512su0qv2di_uuu (__a, __b);\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsha512su1q_u64 (uint64x2_t __a, uint64x2_t __b, uint64x2_t __c)\n+{\n+  return __builtin_aarch64_crypto_sha512su1qv2di_uuuu (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+veor3q_u16 (uint16x8_t __a, uint16x8_t __b, uint16x8_t __c)\n+{\n+  return __builtin_aarch64_eor3qv8hi_uuuu (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vrax1q_u64 (uint64x2_t __a, uint64x2_t __b)\n+{\n+  return __builtin_aarch64_rax1qv2di_uuu (__a, __b);\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vxarq_u64 (uint64x2_t __a, uint64x2_t __b, const int imm6)\n+{\n+  return __builtin_aarch64_xarqv2di_uuus (__a, __b,imm6);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbcaxq_u16 (uint16x8_t __a, uint16x8_t __b, uint16x8_t __c)\n+{\n+  return __builtin_aarch64_bcaxqv8hi_uuuu (__a, __b, __c);\n+}\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target((\"arch=armv8.2-a+fp16fml\"))\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlal_low_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b)\n+{\n+  return __builtin_aarch64_fmlal_lowv2sf (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlsl_low_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b)\n+{\n+  return __builtin_aarch64_fmlsl_lowv2sf (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlalq_low_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b)\n+{\n+  return __builtin_aarch64_fmlalq_lowv4sf (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlslq_low_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b)\n+{\n+  return __builtin_aarch64_fmlslq_lowv4sf (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlal_high_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b)\n+{\n+  return __builtin_aarch64_fmlal_highv2sf (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlsl_high_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b)\n+{\n+  return __builtin_aarch64_fmlsl_highv2sf (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlalq_high_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b)\n+{\n+  return __builtin_aarch64_fmlalq_highv4sf (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlslq_high_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b)\n+{\n+  return __builtin_aarch64_fmlslq_highv4sf (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlal_lane_low_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b,\n+\t\t     const int __lane)\n+{\n+  return __builtin_aarch64_fmlal_lane_lowv2sf (__r, __a, __b, __lane);\n+}\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlsl_lane_low_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b,\n+\t\t     const int __lane)\n+{\n+  return __builtin_aarch64_fmlsl_lane_lowv2sf (__r, __a, __b, __lane);\n+}\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlal_laneq_low_u32 (float32x2_t __r, float16x4_t __a, float16x8_t __b,\n+\t\t      const int __lane)\n+{\n+  return __builtin_aarch64_fmlal_laneq_lowv2sf (__r, __a, __b, __lane);\n+}\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlsl_laneq_low_u32 (float32x2_t __r, float16x4_t __a, float16x8_t __b,\n+\t\t      const int __lane)\n+{\n+  return __builtin_aarch64_fmlsl_laneq_lowv2sf (__r, __a, __b, __lane);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlalq_lane_low_u32 (float32x4_t __r, float16x8_t __a, float16x4_t __b,\n+\t\t      const int __lane)\n+{\n+  return __builtin_aarch64_fmlalq_lane_lowv4sf (__r, __a, __b, __lane);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlslq_lane_low_u32 (float32x4_t __r, float16x8_t __a, float16x4_t __b,\n+\t\t      const int __lane)\n+{\n+  return __builtin_aarch64_fmlslq_lane_lowv4sf (__r, __a, __b, __lane);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlalq_laneq_low_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b,\n+\t\t       const int __lane)\n+{\n+  return __builtin_aarch64_fmlalq_laneq_lowv4sf (__r, __a, __b, __lane);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlslq_laneq_low_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b,\n+\t\t      const int __lane)\n+{\n+  return __builtin_aarch64_fmlslq_laneq_lowv4sf (__r, __a, __b, __lane);\n+}\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlal_lane_high_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b,\n+\t\t     const int __lane)\n+{\n+  return __builtin_aarch64_fmlal_lane_highv2sf (__r, __a, __b, __lane);\n+}\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlsl_lane_high_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b,\n+\t\t     const int __lane)\n+{\n+  return __builtin_aarch64_fmlsl_lane_highv2sf (__r, __a, __b, __lane);\n+}\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlal_laneq_high_u32 (float32x2_t __r, float16x4_t __a, float16x8_t __b,\n+\t\t      const int __lane)\n+{\n+  return __builtin_aarch64_fmlal_laneq_highv2sf (__r, __a, __b, __lane);\n+}\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlsl_laneq_high_u32 (float32x2_t __r, float16x4_t __a, float16x8_t __b,\n+\t\t      const int __lane)\n+{\n+  return __builtin_aarch64_fmlsl_laneq_highv2sf (__r, __a, __b, __lane);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlalq_lane_high_u32 (float32x4_t __r, float16x8_t __a, float16x4_t __b,\n+\t\t      const int __lane)\n+{\n+  return __builtin_aarch64_fmlalq_lane_highv4sf (__r, __a, __b, __lane);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlslq_lane_high_u32 (float32x4_t __r, float16x8_t __a, float16x4_t __b,\n+\t\t      const int __lane)\n+{\n+  return __builtin_aarch64_fmlslq_lane_highv4sf (__r, __a, __b, __lane);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlalq_laneq_high_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b,\n+\t\t       const int __lane)\n+{\n+  return __builtin_aarch64_fmlalq_laneq_highv4sf (__r, __a, __b, __lane);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlslq_laneq_high_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b,\n+\t\t      const int __lane)\n+{\n+  return __builtin_aarch64_fmlslq_laneq_highv4sf (__r, __a, __b, __lane);\n+}\n+\n+#pragma GCC pop_options\n+\n #undef __aarch64_vget_lane_any\n \n #undef __aarch64_vdup_lane_any"}, {"sha": "18adbc691ececf7fbb2c8f6d8280462f427119ca", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -139,12 +139,24 @@\n   A constraint that matches the immediate constant +1.\"\n   (match_test \"op == const1_rtx\"))\n \n+(define_constraint \"Ui2\"\n+  \"@internal\n+  A constraint that matches the integers 0...3.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"(unsigned HOST_WIDE_INT) ival <= 3\")))\n+\n (define_constraint \"Ui3\"\n   \"@internal\n   A constraint that matches the integers 0...4.\"\n   (and (match_code \"const_int\")\n        (match_test \"(unsigned HOST_WIDE_INT) ival <= 4\")))\n \n+(define_constraint \"Ui7\"\n+  \"@internal\n+  A constraint that matches the integers 0...7.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"(unsigned HOST_WIDE_INT) ival <= 7\")))\n+\n (define_constraint \"Up3\"\n   \"@internal\n   A constraint that matches the integers 2^(0...4).\""}, {"sha": "e199dfdb4ea9dfb192fcd24596b77e65c7bdd444", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -361,6 +361,23 @@\n     UNSPEC_FMINNM       ; Used in aarch64-simd.md.\n     UNSPEC_SDOT\t\t; Used in aarch64-simd.md.\n     UNSPEC_UDOT\t\t; Used in aarch64-simd.md.\n+    UNSPEC_SM3SS1\t; Used in aarch64-simd.md.\n+    UNSPEC_SM3TT1A\t; Used in aarch64-simd.md.\n+    UNSPEC_SM3TT1B\t; Used in aarch64-simd.md.\n+    UNSPEC_SM3TT2A\t; Used in aarch64-simd.md.\n+    UNSPEC_SM3TT2B\t; Used in aarch64-simd.md.\n+    UNSPEC_SM3PARTW1\t; Used in aarch64-simd.md.\n+    UNSPEC_SM3PARTW2\t; Used in aarch64-simd.md.\n+    UNSPEC_SM4E\t\t; Used in aarch64-simd.md.\n+    UNSPEC_SM4EKEY\t; Used in aarch64-simd.md.\n+    UNSPEC_SHA512H      ; Used in aarch64-simd.md.\n+    UNSPEC_SHA512H2     ; Used in aarch64-simd.md.\n+    UNSPEC_SHA512SU0    ; Used in aarch64-simd.md.\n+    UNSPEC_SHA512SU1    ; Used in aarch64-simd.md.\n+    UNSPEC_FMLAL\t; Used in aarch64-simd.md.\n+    UNSPEC_FMLSL\t; Used in aarch64-simd.md.\n+    UNSPEC_FMLAL2\t; Used in aarch64-simd.md.\n+    UNSPEC_FMLSL2\t; Used in aarch64-simd.md.\n ])\n \n ;; ------------------------------------------------------------------\n@@ -843,6 +860,15 @@\n ;; No need of iterator for -fPIC as it use got_lo12 for both modes.\n (define_mode_attr got_modifier [(SI \"gotpage_lo14\") (DI \"gotpage_lo15\")])\n \n+;; Width of 2nd and 3rd arguments to fp16 vector multiply add/sub\n+(define_mode_attr VFMLA_W [(V2SF \"V4HF\") (V4SF \"V8HF\")])\n+\n+(define_mode_attr VFMLA_SEL_W [(V2SF \"V2HF\") (V4SF \"V4HF\")])\n+\n+(define_mode_attr f16quad [(V2SF \"\") (V4SF \"q\")])\n+\n+(define_code_attr f16mac [(plus \"a\") (minus \"s\")])\n+\n ;; -------------------------------------------------------------------\n ;; Code Iterators\n ;; -------------------------------------------------------------------\n@@ -1140,6 +1166,19 @@\n \n (define_int_iterator CRYPTO_SHA256 [UNSPEC_SHA256H UNSPEC_SHA256H2])\n \n+(define_int_iterator CRYPTO_SHA512 [UNSPEC_SHA512H UNSPEC_SHA512H2])\n+\n+(define_int_iterator CRYPTO_SM3TT [UNSPEC_SM3TT1A UNSPEC_SM3TT1B\n+\t\t\t\t   UNSPEC_SM3TT2A UNSPEC_SM3TT2B])\n+\n+(define_int_iterator CRYPTO_SM3PART [UNSPEC_SM3PARTW1 UNSPEC_SM3PARTW2])\n+\n+;; Iterators for fp16 operations\n+\n+(define_int_iterator VFMLA16_LOW [UNSPEC_FMLAL UNSPEC_FMLSL])\n+\n+(define_int_iterator VFMLA16_HIGH [UNSPEC_FMLAL2 UNSPEC_FMLSL2])\n+\n ;; Iterators for atomic operations.\n \n (define_int_iterator ATOMIC_LDOP\n@@ -1312,3 +1351,13 @@\n (define_int_attr sha256_op [(UNSPEC_SHA256H \"\") (UNSPEC_SHA256H2 \"2\")])\n \n (define_int_attr rdma_as [(UNSPEC_SQRDMLAH \"a\") (UNSPEC_SQRDMLSH \"s\")])\n+\n+(define_int_attr sha512_op [(UNSPEC_SHA512H \"\") (UNSPEC_SHA512H2 \"2\")])\n+\n+(define_int_attr sm3tt_op [(UNSPEC_SM3TT1A \"1a\") (UNSPEC_SM3TT1B \"1b\")\n+\t\t\t   (UNSPEC_SM3TT2A \"2a\") (UNSPEC_SM3TT2B \"2b\")])\n+\n+(define_int_attr sm3part_op [(UNSPEC_SM3PARTW1 \"1\") (UNSPEC_SM3PARTW2 \"2\")])\n+\n+(define_int_attr f16mac1 [(UNSPEC_FMLAL \"a\") (UNSPEC_FMLSL \"s\")\n+\t\t\t  (UNSPEC_FMLAL2 \"a\") (UNSPEC_FMLSL2 \"s\")])"}, {"sha": "65b2df6ed1ab34097b27345d972e7e4ce93da889", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -160,6 +160,18 @@\n   (and (match_code \"const_int\")\n        (match_test \"(unsigned HOST_WIDE_INT) INTVAL (op) <= 4\")))\n \n+;; The imm2 field is a 2-bit field that only accepts immediates in the\n+;; range 0..3.\n+(define_predicate \"aarch64_imm2\"\n+  (and (match_code \"const_int\")\n+       (match_test \"UINTVAL (op) <= 3\")))\n+\n+;; The imm3 field is a 3-bit field that only accepts immediates in the\n+;; range 0..7.\n+(define_predicate \"aarch64_lane_imm3\"\n+  (and (match_code \"const_int\")\n+       (match_test \"UINTVAL (op) <= 7\")))\n+\n ;; An immediate that fits into 24 bits.\n (define_predicate \"aarch64_imm24\"\n   (and (match_code \"const_int\")"}, {"sha": "055cb3e7d9414b461a9cf8da2e63f22025c2c901", "filename": "gcc/config/arm/types.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Farm%2Ftypes.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fconfig%2Farm%2Ftypes.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ftypes.md?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -1084,6 +1084,10 @@\n   crypto_sha256_fast,\\\n   crypto_sha256_slow,\\\n   crypto_pmull,\\\n+  crypto_sha512,\\\n+  crypto_sha3,\\\n+  crypto_sm3,\\\n+  crypto_sm4,\\\n   coproc\"\n    (const_string \"untyped\"))\n "}, {"sha": "e4768b84b441a9afc4913fc31c2a2c3aaf7c7faf", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -14481,7 +14481,11 @@ more feature modifiers.  This option has the form\n @option{-march=@var{arch}@r{@{}+@r{[}no@r{]}@var{feature}@r{@}*}}.\n \n The permissible values for @var{arch} are @samp{armv8-a},\n-@samp{armv8.1-a}, @samp{armv8.2-a}, @samp{armv8.3-a} or @var{native}.\n+@samp{armv8.1-a}, @samp{armv8.2-a}, @samp{armv8.3-a} or @samp{armv8.4-a}\n+or @var{native}.\n+\n+The value @samp{armv8.4-a} implies @samp{armv8.3-a} and enables compiler\n+support for the ARMv8.4-A architecture extensions.\n \n The value @samp{armv8.3-a} implies @samp{armv8.2-a} and enables compiler\n support for the ARMv8.3-A architecture extensions.\n@@ -14619,18 +14623,34 @@ Enable Round Double Multiply Accumulate instructions.  This is on by default\n for @option{-march=armv8.1-a}.\n @item fp16\n Enable FP16 extension.  This also enables floating-point instructions.\n+@item fp16fml\n+Enable FP16 fmla extension.  This also enables FP16 extensions and\n+floating-point instructions. This option is enabled by default for @option{-march=armv8.4-a}. Use of this option with architectures prior to Armv8.2-A is not supported.\n+\n @item rcpc\n Enable the RcPc extension.  This does not change code generation from GCC,\n but is passed on to the assembler, enabling inline asm statements to use\n instructions from the RcPc extension.\n @item dotprod\n Enable the Dot Product extension.  This also enables Advanced SIMD instructions.\n+@item aes\n+Enable the Armv8-a aes and pmull crypto extension.  This also enables Advanced\n+SIMD instructions.\n+@item sha2\n+Enable the Armv8-a sha2 crypto extension.  This also enables Advanced SIMD instructions.\n+@item sha3\n+Enable the sha512 and sha3 crypto extension.  This also enables Advanced SIMD\n+instructions. Use of this option with architectures prior to Armv8.2-A is not supported.\n+@item sm4\n+Enable the sm3 and sm4 crypto extension.  This also enables Advanced SIMD instructions.\n+Use of this option with architectures prior to Armv8.2-A is not supported.\n \n @end table\n \n-Feature @option{crypto} implies @option{simd}, which implies @option{fp}.\n+Feature @option{crypto} implies @option{aes}, @option{sha2}, and @option{simd},\n+which implies @option{fp}.\n Conversely, @option{nofp} implies @option{nosimd}, which implies\n-@option{nocrypto}.\n+@option{nocrypto}, @option{noaes} and @option{nosha2}.\n \n @node Adapteva Epiphany Options\n @subsection Adapteva Epiphany Options"}, {"sha": "209d6d896bd8c64848b78b978f013805126b4734", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -1,3 +1,37 @@\n+2018-01-10  Michael Collison  <michael.collison@arm.com>\n+\n+\tgcc.target/aarch64/fp16_fmul_high_1.c: New testcase.\n+\tgcc.target/aarch64/fp16_fmul_high_2.c: New testcase.\n+\tgcc.target/aarch64/fp16_fmul_high_3.c: New testcase.\n+\tgcc.target/aarch64/fp16_fmul_high.h: New shared testcase.\n+\tgcc.target/aarch64/fp16_fmul_lane_high_1.c: New testcase.\n+\tgcc.target/aarch64/fp16_fmul_lane_high_1.c: New testcase.\n+\tgcc.target/aarch64/fp16_fmul_lane_high_1.c: New testcase.\n+\tgcc.target/aarch64/fp16_fmul_lane_high.h: New shared testcase.\n+\tgcc.target/aarch64/fp16_fmul_low_1.c: New testcase.\n+\tgcc.target/aarch64/fp16_fmul_low_2.c: New testcase.\n+\tgcc.target/aarch64/fp16_fmul_low_2.c: New testcase.\n+\tgcc.target/aarch64/fp16_fmul_low.h: New sharedtestcase.\n+\tgcc.target/aarch64/fp16_fmul_lane_low_1.c: New testcase.\n+\tgcc.target/aarch64/fp16_fmul_lane_low_2.c: New testcase.\n+\tgcc.target/aarch64/fp16_fmul_lane_low_3.c: New testcase.\n+\tgcc.target/aarch64/fp16_fmul_lane_low.h: New shared testcase.\n+\n+2018-01-10  Michael Collison  <michael.collison@arm.com>\n+\n+\tgcc.target/aarch64/sha2.h: New shared testcase.\n+\tgcc.target/aarch64/sha2_1.c: New testcase.\n+\tgcc.target/aarch64/sha2_2.c: New testcase.\n+\tgcc.target/aarch64/sha2_3.c: New testcase.\n+\tgcc.target/aarch64/sha3.h: New shared testcase.\n+\tgcc.target/aarch64/sha3_1.c: New testcase.\n+\tgcc.target/aarch64/sha3_2.c: New testcase.\n+\tgcc.target/aarch64/sha3_3.c: New testcase.\n+\n+2018-01-10  Michael Collison  <michael.collison@arm.com>\n+\n+\tgcc.target/aarch64/sm3_sm4.c: New testcase.\n+\n 2018-01-10  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/83781"}, {"sha": "9c86bd19153cc0888f7b28f36d141b9fe08f535e", "filename": "gcc/testsuite/gcc.target/aarch64/fp16_fmul_high.h", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_high.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_high.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_high.h?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -0,0 +1,25 @@\n+#include \"arm_neon.h\"\n+\n+float32x2_t\n+test_vfmlal_high_u32 (float32x2_t r, float16x4_t a, float16x4_t b)\n+{\n+  return vfmlal_high_u32 (r, a, b);\n+}\n+\n+float32x4_t\n+test_vfmlalq_high_u32 (float32x4_t r, float16x8_t a, float16x8_t b)\n+{\n+  return vfmlalq_high_u32 (r, a, b);\n+}\n+\n+float32x2_t\n+test_vfmlsl_high_u32 (float32x2_t r, float16x4_t a, float16x4_t b)\n+{\n+  return vfmlsl_high_u32 (r, a, b);\n+}\n+\n+float32x4_t\n+test_vfmlslq_high_u32 (float32x4_t r, float16x8_t a, float16x8_t b)\n+{\n+  return vfmlslq_high_u32 (r, a, b);\n+}"}, {"sha": "26cf219f01d1afde846a904520ba0581275ef0af", "filename": "gcc/testsuite/gcc.target/aarch64/fp16_fmul_high_1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_high_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_high_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_high_1.c?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8.2-a+fp16fml\" } */\n+\n+#include \"fp16_fmul_high.h\"\n+\n+/* { dg-final { scan-assembler-times \"fmlal2\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.2h\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlal2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.4h\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl2\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.2h\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.4h\" 1 } } */"}, {"sha": "a82938d13c0bdebaa9d4084e92246f1722b7df88", "filename": "gcc/testsuite/gcc.target/aarch64/fp16_fmul_high_2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_high_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_high_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_high_2.c?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8.3-a+fp16fml\" } */\n+\n+#include \"fp16_fmul_high.h\"\n+\n+/* { dg-final { scan-assembler-times \"fmlal2\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.2h\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlal2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.4h\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl2\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.2h\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.4h\" 1 } } */"}, {"sha": "be1d35a42167e3a0476403101ab6554038f57380", "filename": "gcc/testsuite/gcc.target/aarch64/fp16_fmul_high_3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_high_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_high_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_high_3.c?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8.4-a+fp16\" } */\n+\n+#include \"fp16_fmul_high.h\"\n+\n+/* { dg-final { scan-assembler-times \"fmlal2\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.2h\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlal2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.4h\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl2\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.2h\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.4h\" 1 } } */"}, {"sha": "1039347865e0bc79dfe351fd52f36964e7c41188", "filename": "gcc/testsuite/gcc.target/aarch64/fp16_fmul_lane_high.h", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_high.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_high.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_high.h?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -0,0 +1,49 @@\n+#include \"arm_neon.h\"\n+\n+float32x2_t\n+test_vfmlal_lane_high_u32 (float32x2_t r, float16x4_t a, float16x4_t b)\n+{\n+  return vfmlal_lane_high_u32 (r, a, b, 0);\n+}\n+\n+float32x2_t\n+tets_vfmlsl_lane_high_u32  (float32x2_t r, float16x4_t a, float16x4_t b)\n+{\n+  return vfmlsl_lane_high_u32 (r, a, b, 0);\n+}\n+\n+float32x2_t\n+test_vfmlal_laneq_high_u32 (float32x2_t r, float16x4_t a, float16x8_t b)\n+{\n+  return vfmlal_laneq_high_u32 (r, a, b, 6);\n+}\n+\n+float32x2_t\n+test_vfmlsl_laneq_high_u32 (float32x2_t r, float16x4_t a, float16x8_t b)\n+{\n+  return vfmlsl_laneq_high_u32 (r, a, b, 6);\n+}\n+\n+float32x4_t\n+test_vfmlalq_lane_high_u32 (float32x4_t r, float16x8_t a, float16x4_t b)\n+{\n+  return vfmlalq_lane_high_u32 (r, a, b, 1);\n+}\n+\n+float32x4_t\n+test_vfmlslq_lane_high_u32 (float32x4_t r, float16x8_t a, float16x4_t b)\n+{\n+  return vfmlslq_lane_high_u32 (r, a, b, 1);\n+}\n+\n+float32x4_t\n+test_vfmlalq_laneq_high_u32  (float32x4_t r, float16x8_t a, float16x8_t b)\n+{\n+  return vfmlalq_laneq_high_u32 (r, a, b, 7);\n+}\n+\n+float32x4_t\n+test_vfmlslq_laneq_high_u32 (float32x4_t r, float16x8_t a, float16x8_t b)\n+{\n+  return vfmlslq_laneq_high_u32 (r, a, b, 7);\n+}"}, {"sha": "30be8d9d560beee36ad8a7a7c19da0b426754aaf", "filename": "gcc/testsuite/gcc.target/aarch64/fp16_fmul_lane_high_1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_high_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_high_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_high_1.c?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8.2-a+fp16fml\" } */\n+\n+#include \"fp16_fmul_lane_high.h\"\n+\n+/* { dg-final { scan-assembler-times \"fmlal2\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.h\\\\\\[0\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl2\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.h\\\\\\[0\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlal2\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.h\\\\\\[6\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl2\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.h\\\\\\[6\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlal2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\\\\\\[1\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\\\\\\[1\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlal2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\\\\\\[7\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\\\\\\[7\\\\\\]\" 1 } } */\n+"}, {"sha": "b6920a8fa4dcf7076fdea9b41e5b2c053e77986a", "filename": "gcc/testsuite/gcc.target/aarch64/fp16_fmul_lane_high_2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_high_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_high_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_high_2.c?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8.3-a+fp16fml\" } */\n+\n+#include \"fp16_fmul_lane_high.h\"\n+\n+/* { dg-final { scan-assembler-times \"fmlal2\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.h\\\\\\[0\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl2\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.h\\\\\\[0\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlal2\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.h\\\\\\[6\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl2\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.h\\\\\\[6\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlal2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\\\\\\[1\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\\\\\\[1\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlal2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\\\\\\[7\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\\\\\\[7\\\\\\]\" 1 } } */"}, {"sha": "65a35e97de5273747910c2f8b95d06ace12185d5", "filename": "gcc/testsuite/gcc.target/aarch64/fp16_fmul_lane_high_3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_high_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_high_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_high_3.c?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8.4-a+fp16\" } */\n+\n+#include \"fp16_fmul_lane_high.h\"\n+\n+/* { dg-final { scan-assembler-times \"fmlal2\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.h\\\\\\[0\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl2\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.h\\\\\\[0\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlal2\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.h\\\\\\[6\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl2\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.h\\\\\\[6\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlal2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\\\\\\[1\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\\\\\\[1\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlal2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\\\\\\[7\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\\\\\\[7\\\\\\]\" 1 } } */"}, {"sha": "b689741bdb006e89f14f29b803ba6d38a62b387e", "filename": "gcc/testsuite/gcc.target/aarch64/fp16_fmul_lane_low.h", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_low.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_low.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_low.h?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -0,0 +1,49 @@\n+#include \"arm_neon.h\"\n+\n+float32x2_t\n+test_vfmlal_lane_low_u32 (float32x2_t r, float16x4_t a, float16x4_t b)\n+{\n+  return vfmlal_lane_low_u32 (r, a, b, 0);\n+}\n+\n+float32x2_t\n+test_vfmlsl_lane_low_u32 (float32x2_t r, float16x4_t a, float16x4_t b)\n+{\n+  return vfmlsl_lane_low_u32 (r, a, b, 0);\n+}\n+\n+float32x2_t\n+test_vfmlal_laneq_low_u32 (float32x2_t r, float16x4_t a, float16x8_t b)\n+{\n+  return vfmlal_laneq_low_u32 (r, a, b, 6);\n+}\n+\n+float32x2_t\n+test_vfmlsl_laneq_low_u32 (float32x2_t r, float16x4_t a, float16x8_t b)\n+{\n+  return vfmlsl_laneq_low_u32 (r, a, b, 6);\n+}\n+\n+float32x4_t\n+test_vfmlalq_lane_low_u32 (float32x4_t r, float16x8_t a, float16x4_t b)\n+{\n+  return vfmlalq_lane_low_u32 (r, a, b, 1);\n+}\n+\n+float32x4_t\n+test_vfmlslq_lane_low_u32 (float32x4_t r, float16x8_t a, float16x4_t b)\n+{\n+  return vfmlslq_lane_low_u32 (r, a, b, 1);\n+}\n+\n+float32x4_t\n+test_vfmlalq_laneq_low_u32 (float32x4_t r, float16x8_t a, float16x8_t b)\n+{\n+  return vfmlalq_laneq_low_u32 (r, a, b, 7);\n+}\n+\n+float32x4_t\n+test_vfmlslq_laneq_low_u32 (float32x4_t r, float16x8_t a, float16x8_t b)\n+{\n+  return vfmlslq_laneq_low_u32 (r, a, b, 7);\n+}"}, {"sha": "1b56845bd320b1f34e6d3b76a848a8aea1cdf17c", "filename": "gcc/testsuite/gcc.target/aarch64/fp16_fmul_lane_low_1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_low_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_low_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_low_1.c?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8.2-a+fp16fml\" } */\n+\n+#include \"fp16_fmul_lane_low.h\"\n+\n+/* { dg-final { scan-assembler-times \"fmlal\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.h\\\\\\[0\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.h\\\\\\[0\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlal\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.h\\\\\\[6\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.h\\\\\\[6\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlal\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\\\\\\[1\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\\\\\\[1\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlal\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\\\\\\[7\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\\\\\\[7\\\\\\]\" 1 } } */"}, {"sha": "d42aef2e149f42de7a16161857a75e1c9633e906", "filename": "gcc/testsuite/gcc.target/aarch64/fp16_fmul_lane_low_2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_low_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_low_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_low_2.c?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8.3-a+fp16fml\" } */\n+\n+#include \"fp16_fmul_lane_low.h\"\n+\n+/* { dg-final { scan-assembler-times \"fmlal\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.h\\\\\\[0\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.h\\\\\\[0\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlal\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.h\\\\\\[6\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.h\\\\\\[6\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlal\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\\\\\\[1\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\\\\\\[1\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlal\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\\\\\\[7\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\\\\\\[7\\\\\\]\" 1 } } */"}, {"sha": "a06c42373709d845de6dad14554b6aefbd110b03", "filename": "gcc/testsuite/gcc.target/aarch64/fp16_fmul_lane_low_3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_low_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_low_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_lane_low_3.c?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8.4-a+fp16\" } */\n+\n+#include \"fp16_fmul_lane_low.h\"\n+\n+/* { dg-final { scan-assembler-times \"fmlal\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.h\\\\\\[0\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.h\\\\\\[0\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlal\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.h\\\\\\[6\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.h\\\\\\[6\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlal\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\\\\\\[1\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\\\\\\[1\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlal\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\\\\\\[7\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\\\\\\[7\\\\\\]\" 1 } } */"}, {"sha": "778ca1c245c7343b38272e586a54927c7cd50bee", "filename": "gcc/testsuite/gcc.target/aarch64/fp16_fmul_low.h", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_low.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_low.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_low.h?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -0,0 +1,25 @@\n+#include \"arm_neon.h\"\n+\n+float32x2_t\n+test_vfmlal_low_u32 (float32x2_t r, float16x4_t a, float16x4_t b)\n+{\n+  return vfmlal_low_u32 (r, a, b);\n+}\n+\n+float32x4_t\n+test_vfmlalq_low_u32 (float32x4_t r, float16x8_t a, float16x8_t b)\n+{\n+  return vfmlalq_low_u32 (r, a, b);\n+}\n+\n+float32x2_t\n+test_vfmlsl_low_u32 (float32x2_t r, float16x4_t a, float16x4_t b)\n+{\n+  return vfmlsl_low_u32 (r, a, b);\n+}\n+\n+float32x4_t\n+test_vfmlslq_low_u32 (float32x4_t r, float16x8_t a, float16x8_t b)\n+{\n+  return vfmlslq_low_u32 (r, a, b);\n+}"}, {"sha": "90d611d6988cf3595f4da09ec2820abeb1364900", "filename": "gcc/testsuite/gcc.target/aarch64/fp16_fmul_low_1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_low_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_low_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_low_1.c?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8.2-a+fp16fml\" } */\n+\n+#include \"fp16_fmul_low.h\"\n+\n+/* { dg-final { scan-assembler-times \"fmlal\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.2h\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlal\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.4h\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.2h\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.4h\" 1 } } */"}, {"sha": "b83f4a1260617482af5197d3434bb5c39cd128b6", "filename": "gcc/testsuite/gcc.target/aarch64/fp16_fmul_low_2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_low_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_low_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_low_2.c?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8.3-a+fp16fml\" } */\n+\n+#include \"fp16_fmul_low.h\"\n+\n+/* { dg-final { scan-assembler-times \"fmlal\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.2h\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlal\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.4h\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.2h\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.4h\" 1 } } */"}, {"sha": "6b12d59b0e2ef3a5e182a8fcdc5d475617bf8a57", "filename": "gcc/testsuite/gcc.target/aarch64/fp16_fmul_low_3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_low_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_low_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16_fmul_low_3.c?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8.4-a+fp16\" } */\n+\n+#include \"fp16_fmul_low.h\"\n+\n+/* { dg-final { scan-assembler-times \"fmlal\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.2h\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlal\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.4h\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2h, v\\[0-9\\]+\\.2h\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmlsl\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.4h\" 1 } } */"}, {"sha": "d67c687a077070fae7b8b82faa1546580dceabd0", "filename": "gcc/testsuite/gcc.target/aarch64/sha2.h", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha2.h?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -0,0 +1,25 @@\n+#include \"arm_neon.h\"\n+\n+uint64x2_t\n+test_vsha512hq_u64 (uint64x2_t a, uint64x2_t b, uint64x2_t c)\n+{\n+  return vsha512hq_u64 (a, b, c);\n+}\n+\n+uint64x2_t\n+test_vsha512h2q_u64 (uint64x2_t a, uint64x2_t b, uint64x2_t c)\n+{\n+  return vsha512h2q_u64 (a, b, c);\n+}\n+\n+uint64x2_t\n+test_vsha512su0q_u64 (uint64x2_t a, uint64x2_t b)\n+{\n+  return vsha512su0q_u64 (a, b);\n+}\n+\n+uint64x2_t\n+test_vsha512su1q_u64 (uint64x2_t a, uint64x2_t b, uint64x2_t c)\n+{\n+  return vsha512su1q_u64 (a, b, c);\n+}"}, {"sha": "55a5d895ec4d49e1cf058c3af170f8ad10c4a9cd", "filename": "gcc/testsuite/gcc.target/aarch64/sha2_1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha2_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha2_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha2_1.c?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8.2-a+sha3\" } */\n+\n+#include \"sha2.h\"\n+\n+/* { dg-final { scan-assembler-times \"sha512h\\\\tq\\[0-9\\]+, q\\[0-9\\]+, v\\[0-9\\]+\\.2d\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sha512h2\\\\tq\\[0-9\\]+, q\\[0-9\\]+, v\\[0-9\\]+\\.2d\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sha512su0\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sha512su1\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" 1 } } */"}, {"sha": "5387b92a99048c4f178f19df06f6087e1ada038c", "filename": "gcc/testsuite/gcc.target/aarch64/sha2_2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha2_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha2_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha2_2.c?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8.3-a+sha3\" } */\n+\n+#include \"sha2.h\"\n+\n+/* { dg-final { scan-assembler-times \"sha512h\\\\tq\\[0-9\\]+, q\\[0-9\\]+, v\\[0-9\\]+\\.2d\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sha512h2\\\\tq\\[0-9\\]+, q\\[0-9\\]+, v\\[0-9\\]+\\.2d\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sha512su0\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sha512su1\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" 1 } } */"}, {"sha": "52374c3b257531f0543e9a517e57c620a6ab692c", "filename": "gcc/testsuite/gcc.target/aarch64/sha2_3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha2_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha2_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha2_3.c?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8.4-a+sha3\" } */\n+\n+#include \"sha2.h\"\n+\n+/* { dg-final { scan-assembler-times \"sha512h\\\\tq\\[0-9\\]+, q\\[0-9\\]+, v\\[0-9\\]+\\.2d\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sha512h2\\\\tq\\[0-9\\]+, q\\[0-9\\]+, v\\[0-9\\]+\\.2d\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sha512su0\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sha512su1\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" 1 } } */"}, {"sha": "76dd1931dffbf60c521e824a0c5d51d9aa08c9f0", "filename": "gcc/testsuite/gcc.target/aarch64/sha3.h", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha3.h?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -0,0 +1,25 @@\n+#include \"arm_neon.h\"\n+\n+uint16x8_t\n+test_veor3q_u16 (uint16x8_t a, uint16x8_t b, uint16x8_t c)\n+{\n+  return veor3q_u16 (a, b, c);\n+}\n+\n+uint64x2_t\n+test_vrax1q_u64 (uint64x2_t a, uint64x2_t b)\n+{\n+  return vrax1q_u64 (a, b);\n+}\n+\n+uint64x2_t\n+test_vxarq_u64 (uint64x2_t a, uint64x2_t b)\n+{\n+  return vxarq_u64 (a, b, 15);\n+}\n+\n+uint16x8_t\n+test_vbcaxq_u16 (uint16x8_t a, uint16x8_t b, uint16x8_t c)\n+{\n+  return vbcaxq_u16 (a, b, c);\n+}"}, {"sha": "879eadd875e899c70b32680d40bdb3de419f00a1", "filename": "gcc/testsuite/gcc.target/aarch64/sha3_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha3_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha3_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha3_1.c?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8.2-a+sha3\" } */\n+\n+#include \"sha3.h\"\n+\n+\n+/* { dg-final { scan-assembler-times \"eor3\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b\" 1 } } */\n+/* { dg-final { scan-assembler-times \"rax1\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xar\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, 15\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bcax\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b\" 1 } } */"}, {"sha": "2afe28c47445af53194427912b9d6a9de9b5ff04", "filename": "gcc/testsuite/gcc.target/aarch64/sha3_2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha3_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha3_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha3_2.c?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8.3-a+sha3\" } */\n+\n+#include \"sha3.h\"\n+\n+/* { dg-final { scan-assembler-times \"eor3\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b\" 1 } } */\n+/* { dg-final { scan-assembler-times \"rax1\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xar\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, 15\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bcax\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b\" 1 } } */"}, {"sha": "8915c805c3e55cb46691602dcf6a3627a28cb3c2", "filename": "gcc/testsuite/gcc.target/aarch64/sha3_3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha3_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha3_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha3_3.c?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8.4-a+sha3\" } */\n+\n+#include \"sha3.h\"\n+\n+/* { dg-final { scan-assembler-times \"eor3\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b\" 1 } } */\n+/* { dg-final { scan-assembler-times \"rax1\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xar\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, 15\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bcax\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b\" 1 } } */"}, {"sha": "b8981e8e767ac4f7a12ff7b758f7d227cc68e2d8", "filename": "gcc/testsuite/gcc.target/aarch64/sm3_sm4.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsm3_sm4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27086ea39f16addb987edb4719afb7cd9b01800c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsm3_sm4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsm3_sm4.c?ref=27086ea39f16addb987edb4719afb7cd9b01800c", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8.4-a+sm4\" } */\n+\n+#include \"arm_neon.h\"\n+\n+uint32x4_t\n+test_vsm3ss1q_u32 (uint32x4_t a, uint32x4_t b, uint32x4_t c)\n+{\n+  return vsm3ss1q_u32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sm3ss1\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" 1 } } */\n+\n+uint32x4_t\n+test_vsm3tt1aq_u32 (uint32x4_t a, uint32x4_t b, uint32x4_t c)\n+{\n+  return vsm3tt1aq_u32 (a, b, c, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sm3tt1a\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\\\\\\[3\\\\\\]\" 1 } } */\n+\n+uint32x4_t\n+test_vsm3tt1bq_u32 (uint32x4_t a, uint32x4_t b, uint32x4_t c)\n+{\n+  return vsm3tt1bq_u32 (a, b, c, 1);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sm3tt1b\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\\\\\\[1\\\\\\]\" 1 } } */\n+\n+uint32x4_t\n+test_vsm3tt2aq_u32 (uint32x4_t a, uint32x4_t b, uint32x4_t c)\n+{\n+  return vsm3tt2aq_u32 (a, b, c, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sm3tt2a\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\\\\\\[2\\\\\\]\" 1 } } */\n+\n+uint32x4_t\n+test_vsm3tt2bq_u32 (uint32x4_t a, uint32x4_t b, uint32x4_t c)\n+{\n+  return vsm3tt2bq_u32 (a, b, c, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sm3tt2b\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\\\\\\[3\\\\\\]\" 1 } } */\n+\n+uint32x4_t\n+test_vsm3partw1q_u32 (uint32x4_t a, uint32x4_t b, uint32x4_t c)\n+{\n+  return vsm3partw1q_u32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sm3partw1\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" 1 } } */\n+\n+uint32x4_t\n+test_vsm3partw2q_u32 (uint32x4_t a, uint32x4_t b, uint32x4_t c)\n+{\n+  return vsm3partw2q_u32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sm3partw2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" 1 } } */\n+\n+// SM4\n+\n+uint32x4_t\n+test_vsm4eq_u32 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vsm4eq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sm4e\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" 1 } } */\n+\n+uint32x4_t\n+test_vsm4ekeyq_u32 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vsm4ekeyq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sm4ekey\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" 1 } } */"}]}