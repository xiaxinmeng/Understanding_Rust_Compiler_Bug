{"sha": "1b20d55a519f0e8ad7fcdc071f453c647bfceb9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIyMGQ1NWE1MTlmMGU4YWQ3ZmNkYzA3MWY0NTNjNjQ3YmZjZWI5Yg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-22T18:12:28Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-22T18:12:28Z"}, "message": "loop-iv.c: Use rtx_insn (also touches cfgloop.h and loop-unroll.c)\n\ngcc/\n\t* cfgloop.h (iv_analyze): Strengthen param 1 \"insn\" from rtx to\n\trtx_insn *.\n\t(iv_analyze_result): Likewise.\n\t(iv_analyze_expr): Likewise.\n\t(biv_p): Likewise.\n\n\t* loop-iv.c (iv_get_reaching_def): Strengthen param \"insn\" and\n\tlocal \"def_insn\" from rtx to rtx_insn *.\n\t(get_biv_step_1): Likewise for local \"insn\".\n\t(iv_analyze_expr): Likewise for param \"insn\".\n\t(iv_analyze_def): Likewise for local \"insn\".\n\t(iv_analyze_op): Likewise for param \"insn\".\n\t(iv_analyze): Likewise.\n\t(iv_analyze_result): Likewise.\n\t(biv_p): Likewise.\n\t(suitable_set_for_replacement): Likewise.\n\t(simplify_using_initial_values): Likewise for local \"insn\".\n\t(iv_number_of_iterations): Likewise for param \"insn\".\n\t(check_simple_exit): Add checked cast to rtx_insn when invoking\n\tiv_number_of_iterations for now (until get_condition is\n\tstrengthened).\n\n\t* loop-unroll.c (analyze_iv_to_split_insn): Strengthen param\n\t\"insn\" from rtx to rtx_insn *.\n\t(analyze_insns_in_loop): Likewise for local \"insn\".\n\nFrom-SVN: r214344", "tree": {"sha": "b829f3eb94775bdb055fb9b037e1c8d49a4a4825", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b829f3eb94775bdb055fb9b037e1c8d49a4a4825"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b20d55a519f0e8ad7fcdc071f453c647bfceb9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b20d55a519f0e8ad7fcdc071f453c647bfceb9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b20d55a519f0e8ad7fcdc071f453c647bfceb9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b20d55a519f0e8ad7fcdc071f453c647bfceb9b/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "89bfd6f5c8fb65df258f063e6a81926625217c97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89bfd6f5c8fb65df258f063e6a81926625217c97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89bfd6f5c8fb65df258f063e6a81926625217c97"}], "stats": {"total": 74, "additions": 53, "deletions": 21}, "files": [{"sha": "c6b4d2905289384415ea4c88eadc6b2b236f4790", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b20d55a519f0e8ad7fcdc071f453c647bfceb9b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b20d55a519f0e8ad7fcdc071f453c647bfceb9b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b20d55a519f0e8ad7fcdc071f453c647bfceb9b", "patch": "@@ -1,3 +1,31 @@\n+2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* cfgloop.h (iv_analyze): Strengthen param 1 \"insn\" from rtx to\n+\trtx_insn *.\n+\t(iv_analyze_result): Likewise.\n+\t(iv_analyze_expr): Likewise.\n+\t(biv_p): Likewise.\n+\n+\t* loop-iv.c (iv_get_reaching_def): Strengthen param \"insn\" and\n+\tlocal \"def_insn\" from rtx to rtx_insn *.\n+\t(get_biv_step_1): Likewise for local \"insn\".\n+\t(iv_analyze_expr): Likewise for param \"insn\".\n+\t(iv_analyze_def): Likewise for local \"insn\".\n+\t(iv_analyze_op): Likewise for param \"insn\".\n+\t(iv_analyze): Likewise.\n+\t(iv_analyze_result): Likewise.\n+\t(biv_p): Likewise.\n+\t(suitable_set_for_replacement): Likewise.\n+\t(simplify_using_initial_values): Likewise for local \"insn\".\n+\t(iv_number_of_iterations): Likewise for param \"insn\".\n+\t(check_simple_exit): Add checked cast to rtx_insn when invoking\n+\tiv_number_of_iterations for now (until get_condition is\n+\tstrengthened).\n+\n+\t* loop-unroll.c (analyze_iv_to_split_insn): Strengthen param\n+\t\"insn\" from rtx to rtx_insn *.\n+\t(analyze_insns_in_loop): Likewise for local \"insn\".\n+\n 2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* loop-invariant.c (struct use): Strengthen field \"insn\" from rtx"}, {"sha": "b7f5d2a22a6c154af41a23a0f4dc42452236301b", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b20d55a519f0e8ad7fcdc071f453c647bfceb9b/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b20d55a519f0e8ad7fcdc071f453c647bfceb9b/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=1b20d55a519f0e8ad7fcdc071f453c647bfceb9b", "patch": "@@ -423,11 +423,12 @@ struct GTY(()) niter_desc\n };\n \n extern void iv_analysis_loop_init (struct loop *);\n-extern bool iv_analyze (rtx, rtx, struct rtx_iv *);\n-extern bool iv_analyze_result (rtx, rtx, struct rtx_iv *);\n-extern bool iv_analyze_expr (rtx, rtx, enum machine_mode, struct rtx_iv *);\n+extern bool iv_analyze (rtx_insn *, rtx, struct rtx_iv *);\n+extern bool iv_analyze_result (rtx_insn *, rtx, struct rtx_iv *);\n+extern bool iv_analyze_expr (rtx_insn *, rtx, enum machine_mode,\n+\t\t\t     struct rtx_iv *);\n extern rtx get_iv_value (struct rtx_iv *, rtx);\n-extern bool biv_p (rtx, rtx);\n+extern bool biv_p (rtx_insn *, rtx);\n extern void find_simple_exit (struct loop *, struct niter_desc *);\n extern void iv_analysis_done (void);\n "}, {"sha": "7ff1accccc6169cfd7b5cd9ff8658a13aff49d3f", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b20d55a519f0e8ad7fcdc071f453c647bfceb9b/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b20d55a519f0e8ad7fcdc071f453c647bfceb9b/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=1b20d55a519f0e8ad7fcdc071f453c647bfceb9b", "patch": "@@ -136,7 +136,7 @@ biv_entry_hasher::equal (const value_type *b, const compare_type *r)\n \n static hash_table<biv_entry_hasher> *bivs;\n \n-static bool iv_analyze_op (rtx, rtx, struct rtx_iv *);\n+static bool iv_analyze_op (rtx_insn *, rtx, struct rtx_iv *);\n \n /* Return the RTX code corresponding to the IV extend code EXTEND.  */\n static inline enum rtx_code\n@@ -339,11 +339,11 @@ latch_dominating_def (rtx reg, df_ref *def)\n /* Gets definition of REG reaching its use in INSN and stores it to DEF.  */\n \n static enum iv_grd_result\n-iv_get_reaching_def (rtx insn, rtx reg, df_ref *def)\n+iv_get_reaching_def (rtx_insn *insn, rtx reg, df_ref *def)\n {\n   df_ref use, adef;\n   basic_block def_bb, use_bb;\n-  rtx def_insn;\n+  rtx_insn *def_insn;\n   bool dom_p;\n \n   *def = NULL;\n@@ -650,7 +650,7 @@ get_biv_step_1 (df_ref def, rtx reg,\n   rtx set, rhs, op0 = NULL_RTX, op1 = NULL_RTX;\n   rtx next, nextr, tmp;\n   enum rtx_code code;\n-  rtx insn = DF_REF_INSN (def);\n+  rtx_insn *insn = DF_REF_INSN (def);\n   df_ref next_def;\n   enum iv_grd_result res;\n \n@@ -946,7 +946,8 @@ iv_analyze_biv (rtx def, struct rtx_iv *iv)\n    The mode of the induction variable is MODE.  */\n \n bool\n-iv_analyze_expr (rtx insn, rtx rhs, enum machine_mode mode, struct rtx_iv *iv)\n+iv_analyze_expr (rtx_insn *insn, rtx rhs, enum machine_mode mode,\n+\t\t struct rtx_iv *iv)\n {\n   rtx mby = NULL_RTX, tmp;\n   rtx op0 = NULL_RTX, op1 = NULL_RTX;\n@@ -1073,7 +1074,7 @@ iv_analyze_expr (rtx insn, rtx rhs, enum machine_mode mode, struct rtx_iv *iv)\n static bool\n iv_analyze_def (df_ref def, struct rtx_iv *iv)\n {\n-  rtx insn = DF_REF_INSN (def);\n+  rtx_insn *insn = DF_REF_INSN (def);\n   rtx reg = DF_REF_REG (def);\n   rtx set, rhs;\n \n@@ -1134,7 +1135,7 @@ iv_analyze_def (df_ref def, struct rtx_iv *iv)\n /* Analyzes operand OP of INSN and stores the result to *IV.  */\n \n static bool\n-iv_analyze_op (rtx insn, rtx op, struct rtx_iv *iv)\n+iv_analyze_op (rtx_insn *insn, rtx op, struct rtx_iv *iv)\n {\n   df_ref def = NULL;\n   enum iv_grd_result res;\n@@ -1192,7 +1193,7 @@ iv_analyze_op (rtx insn, rtx op, struct rtx_iv *iv)\n /* Analyzes value VAL at INSN and stores the result to *IV.  */\n \n bool\n-iv_analyze (rtx insn, rtx val, struct rtx_iv *iv)\n+iv_analyze (rtx_insn *insn, rtx val, struct rtx_iv *iv)\n {\n   rtx reg;\n \n@@ -1217,7 +1218,7 @@ iv_analyze (rtx insn, rtx val, struct rtx_iv *iv)\n /* Analyzes definition of DEF in INSN and stores the result to IV.  */\n \n bool\n-iv_analyze_result (rtx insn, rtx def, struct rtx_iv *iv)\n+iv_analyze_result (rtx_insn *insn, rtx def, struct rtx_iv *iv)\n {\n   df_ref adef;\n \n@@ -1233,7 +1234,7 @@ iv_analyze_result (rtx insn, rtx def, struct rtx_iv *iv)\n    iv_analysis_loop_init) for this function to produce a result.  */\n \n bool\n-biv_p (rtx insn, rtx reg)\n+biv_p (rtx_insn *insn, rtx reg)\n {\n   struct rtx_iv iv;\n   df_ref def, last_def;\n@@ -1454,7 +1455,7 @@ replace_single_def_regs (rtx *reg, void *expr1)\n    the set; return false otherwise.  */\n \n static bool\n-suitable_set_for_replacement (rtx insn, rtx *dest, rtx *src)\n+suitable_set_for_replacement (rtx_insn *insn, rtx *dest, rtx *src)\n {\n   rtx set = single_set (insn);\n   rtx lhs = NULL_RTX, rhs;\n@@ -1872,7 +1873,8 @@ static void\n simplify_using_initial_values (struct loop *loop, enum rtx_code op, rtx *expr)\n {\n   bool expression_valid;\n-  rtx head, tail, insn, cond_list, last_valid_expr;\n+  rtx head, tail, cond_list, last_valid_expr;\n+  rtx_insn *insn;\n   rtx neutral, aggr;\n   regset altered, this_altered;\n   edge e;\n@@ -2323,7 +2325,7 @@ determine_max_iter (struct loop *loop, struct niter_desc *desc, rtx old_niter)\n    (basically its rtl version), complicated by things like subregs.  */\n \n static void\n-iv_number_of_iterations (struct loop *loop, rtx insn, rtx condition,\n+iv_number_of_iterations (struct loop *loop, rtx_insn *insn, rtx condition,\n \t\t\t struct niter_desc *desc)\n {\n   rtx op0, op1, delta, step, bound, may_xform, tmp, tmp0, tmp1;\n@@ -2929,7 +2931,8 @@ check_simple_exit (struct loop *loop, edge e, struct niter_desc *desc)\n \n   /* Check that we are able to determine number of iterations and fill\n      in information about it.  */\n-  iv_number_of_iterations (loop, at, condition, desc);\n+  iv_number_of_iterations (loop, safe_as_a <rtx_insn *> (at),\n+\t\t\t   condition, desc);\n }\n \n /* Finds a simple exit of LOOP and stores its description into DESC.  */"}, {"sha": "1821ea0c44ffda2539c33dd3a3abf9e2f5833457", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b20d55a519f0e8ad7fcdc071f453c647bfceb9b/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b20d55a519f0e8ad7fcdc071f453c647bfceb9b/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=1b20d55a519f0e8ad7fcdc071f453c647bfceb9b", "patch": "@@ -189,7 +189,7 @@ static void apply_opt_in_copies (struct opt_info *, unsigned, bool, bool);\n static void free_opt_info (struct opt_info *);\n static struct var_to_expand *analyze_insn_to_expand_var (struct loop*, rtx);\n static bool referenced_in_one_insn_in_loop_p (struct loop *, rtx, int *);\n-static struct iv_to_split *analyze_iv_to_split_insn (rtx);\n+static struct iv_to_split *analyze_iv_to_split_insn (rtx_insn *);\n static void expand_var_during_unrolling (struct var_to_expand *, rtx);\n static void insert_var_expansion_initialization (struct var_to_expand *,\n \t\t\t\t\t\t basic_block);\n@@ -1893,7 +1893,7 @@ analyze_insn_to_expand_var (struct loop *loop, rtx insn)\n    pointer to it.  */\n \n static struct iv_to_split *\n-analyze_iv_to_split_insn (rtx insn)\n+analyze_iv_to_split_insn (rtx_insn *insn)\n {\n   rtx set, dest;\n   struct rtx_iv iv;\n@@ -1952,7 +1952,7 @@ analyze_insns_in_loop (struct loop *loop)\n   basic_block *body, bb;\n   unsigned i;\n   struct opt_info *opt_info = XCNEW (struct opt_info);\n-  rtx insn;\n+  rtx_insn *insn;\n   struct iv_to_split *ivts = NULL;\n   struct var_to_expand *ves = NULL;\n   iv_to_split **slot1;"}]}