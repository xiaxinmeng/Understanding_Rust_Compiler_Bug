{"sha": "fd7eb4bc94cafa745eba75c64fa483a1689a5aad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ3ZWI0YmM5NGNhZmE3NDVlYmE3NWM2NGZhNDgzYTE2ODlhNWFhZA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-02-13T00:30:23Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-05-03T12:00:05Z"}, "message": "GCC_CET_HOST_FLAGS: Check if host supports multi-byte NOPs\n\nSync with binutils for PR binutils/27397.  Check if host supports\nmulti-byte NOPs before enabling CET on host.\n\nconfig/\n\n\tPR bootstrap/99703\n\t* cet.m4 (GCC_CET_HOST_FLAGS): Check if host supports multi-byte\n\tNOPs.\n\nlibiberty/\n\n\tPR bootstrap/99703\n\t* configure: Regenerated.", "tree": {"sha": "fe9a68be3e55f37d4353b944e77a472dcbf4f5d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe9a68be3e55f37d4353b944e77a472dcbf4f5d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd7eb4bc94cafa745eba75c64fa483a1689a5aad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd7eb4bc94cafa745eba75c64fa483a1689a5aad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd7eb4bc94cafa745eba75c64fa483a1689a5aad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd7eb4bc94cafa745eba75c64fa483a1689a5aad/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f48c335d36674f90046b2823f0ac1c0545dc082", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f48c335d36674f90046b2823f0ac1c0545dc082", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f48c335d36674f90046b2823f0ac1c0545dc082"}], "stats": {"total": 48, "additions": 45, "deletions": 3}, "files": [{"sha": "7718be1afe891196b9d0547fa4c13d3dbb70b137", "filename": "config/cet.m4", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd7eb4bc94cafa745eba75c64fa483a1689a5aad/config%2Fcet.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd7eb4bc94cafa745eba75c64fa483a1689a5aad/config%2Fcet.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fcet.m4?ref=fd7eb4bc94cafa745eba75c64fa483a1689a5aad", "patch": "@@ -130,6 +130,18 @@ fi\n if test x$may_have_cet = xyes; then\n   if test x$cross_compiling = xno; then\n     AC_TRY_RUN([\n+int\n+main ()\n+{\n+  asm (\"endbr32\");\n+  return 0;\n+}\n+    ],\n+    [have_multi_byte_nop=yes],\n+    [have_multi_byte_nop=no])\n+    have_cet=no\n+    if test x$have_multi_byte_nop = xyes; then\n+      AC_TRY_RUN([\n static void\n foo (void)\n {\n@@ -155,9 +167,10 @@ main ()\n   bar ();\n   return 0;\n }\n-    ],\n-    [have_cet=no],\n-    [have_cet=yes])\n+      ],\n+      [have_cet=no],\n+      [have_cet=yes])\n+    fi\n     if test x$enable_cet = xno -a x$have_cet = xyes; then\n       AC_MSG_ERROR([Intel CET must be enabled on Intel CET enabled host])\n     fi"}, {"sha": "fc0c953dd1acecb988046bdd39daff9780e09200", "filename": "libiberty/configure", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd7eb4bc94cafa745eba75c64fa483a1689a5aad/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd7eb4bc94cafa745eba75c64fa483a1689a5aad/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=fd7eb4bc94cafa745eba75c64fa483a1689a5aad", "patch": "@@ -5396,6 +5396,34 @@ else\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n+int\n+main ()\n+{\n+  asm (\"endbr32\");\n+  return 0;\n+}\n+\n+_ACEOF\n+if ac_fn_c_try_run \"$LINENO\"; then :\n+  have_multi_byte_nop=yes\n+else\n+  have_multi_byte_nop=no\n+fi\n+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n+  conftest.$ac_objext conftest.beam conftest.$ac_ext\n+fi\n+\n+    have_cet=no\n+    if test x$have_multi_byte_nop = xyes; then\n+      if test \"$cross_compiling\" = yes; then :\n+  { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error $? \"cannot run test program while cross compiling\n+See \\`config.log' for more details\" \"$LINENO\" 5; }\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n static void\n foo (void)\n {\n@@ -5432,6 +5460,7 @@ rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n   conftest.$ac_objext conftest.beam conftest.$ac_ext\n fi\n \n+    fi\n     if test x$enable_cet = xno -a x$have_cet = xyes; then\n       as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n     fi"}]}