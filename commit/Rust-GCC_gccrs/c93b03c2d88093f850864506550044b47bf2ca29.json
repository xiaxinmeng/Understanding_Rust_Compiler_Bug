{"sha": "c93b03c2d88093f850864506550044b47bf2ca29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkzYjAzYzJkODgwOTNmODUwODY0NTA2NTUwMDQ0YjQ3YmYyY2EyOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-09-20T23:29:09Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-09-20T23:29:09Z"}, "message": "reload1.c (emit_reload_insns): Accept a new arg for the bb.\n\n        * reload1.c (emit_reload_insns): Accept a new arg for the bb.  Use\n        it to update bb boundaries.  Update caller.\n        * function.c (reposition_prologue_and_epilogue_notes): Update\n        bb boundaries wrt the moved note.\n\nFrom-SVN: r22507", "tree": {"sha": "4cedb18879450264fbf3614257344386abf12fe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cedb18879450264fbf3614257344386abf12fe5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c93b03c2d88093f850864506550044b47bf2ca29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c93b03c2d88093f850864506550044b47bf2ca29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c93b03c2d88093f850864506550044b47bf2ca29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c93b03c2d88093f850864506550044b47bf2ca29/comments", "author": null, "committer": null, "parents": [{"sha": "823642df46db733e08f43efa826d71f9281b1317", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/823642df46db733e08f43efa826d71f9281b1317", "html_url": "https://github.com/Rust-GCC/gccrs/commit/823642df46db733e08f43efa826d71f9281b1317"}], "stats": {"total": 55, "additions": 43, "deletions": 12}, "files": [{"sha": "01893e99ebf303635a023df132d67e77d888cea5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c93b03c2d88093f850864506550044b47bf2ca29/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c93b03c2d88093f850864506550044b47bf2ca29/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c93b03c2d88093f850864506550044b47bf2ca29", "patch": "@@ -1,3 +1,10 @@\n+Sun Sep 20 23:28:11 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* reload1.c (emit_reload_insns): Accept a new arg for the bb.  Use\n+\tit to update bb boundaries.  Update caller.\n+\t* function.c (reposition_prologue_and_epilogue_notes): Update\n+\tbb boundaries wrt the moved note.\n+\n Sun Sep 20 20:57:02 1998  Robert Lipe  <robertl@dgii.com>\n \t\n \t* configure.in (i*86-*-sysv5*): Use fixinc.svr4 to patch byteorder"}, {"sha": "99163e61a3cec30a52c5fc99e2608f6273f6d503", "filename": "gcc/function.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c93b03c2d88093f850864506550044b47bf2ca29/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c93b03c2d88093f850864506550044b47bf2ca29/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=c93b03c2d88093f850864506550044b47bf2ca29", "patch": "@@ -6239,12 +6239,19 @@ reposition_prologue_and_epilogue_notes (f)\n \t\t\t    && NOTE_LINE_NUMBER (note) == NOTE_INSN_PROLOGUE_END)\n \t\t\t  break;\n \t\t    }\n+\n \t\t  next = NEXT_INSN (note);\n \t\t  prev = PREV_INSN (note);\n \t\t  if (prev)\n \t\t    NEXT_INSN (prev) = next;\n \t\t  if (next)\n \t\t    PREV_INSN (next) = prev;\n+\n+\t\t  /* Whether or not we can depend on basic_block_head, \n+\t\t     attempt to keep it up-to-date.  */\n+\t\t  if (basic_block_head[0] == note)\n+\t\t    basic_block_head[0] = next;\n+\n \t\t  add_insn_after (note, insn);\n \t\t}\n \t    }\n@@ -6283,7 +6290,14 @@ reposition_prologue_and_epilogue_notes (f)\n \t\t    NEXT_INSN (prev) = next;\n \t\t  if (next)\n \t\t    PREV_INSN (next) = prev;\n-\t\t  add_insn_after (note, PREV_INSN (insn));\n+\n+\t\t  /* Whether or not we can depend on basic_block_head, \n+\t\t     attempt to keep it up-to-date.  */\n+\t\t  if (n_basic_blocks\n+\t\t      && basic_block_head[n_basic_blocks-1] == insn)\n+\t\t    basic_block_head[n_basic_blocks-1] = note;\n+\n+\t\t  add_insn_before (note, insn);\n \t\t}\n \t    }\n \t}"}, {"sha": "d8eb32633bc38532fa2efbdfa572376853ac6bad", "filename": "gcc/reload1.c", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c93b03c2d88093f850864506550044b47bf2ca29/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c93b03c2d88093f850864506550044b47bf2ca29/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=c93b03c2d88093f850864506550044b47bf2ca29", "patch": "@@ -387,7 +387,7 @@ static int reload_reg_reaches_end_p\tPROTO((int, int, enum reload_type));\n static int allocate_reload_reg\t\tPROTO((int, rtx, int, int));\n static void choose_reload_regs\t\tPROTO((rtx, rtx));\n static void merge_assigned_reloads\tPROTO((rtx));\n-static void emit_reload_insns\t\tPROTO((rtx));\n+static void emit_reload_insns\t\tPROTO((rtx, int));\n static void delete_output_reload\tPROTO((rtx, int, rtx));\n static void inc_for_reload\t\tPROTO((rtx, rtx, int));\n static int constraint_accepts_reg_p\tPROTO((char *, rtx));\n@@ -4219,7 +4219,7 @@ reload_as_needed (first, live_known)\n \n \t      /* Generate the insns to reload operands into or out of\n \t\t their reload regs.  */\n-\t      emit_reload_insns (insn);\n+\t      emit_reload_insns (insn, this_block);\n \n \t      /* Substitute the chosen reload regs from reload_reg_rtx\n \t\t into the insn's body (or perhaps into the bodies of other\n@@ -6329,8 +6329,9 @@ merge_assigned_reloads (insn)\n /* Output insns to reload values in and out of the chosen reload regs.  */\n \n static void\n-emit_reload_insns (insn)\n+emit_reload_insns (insn, bb)\n      rtx insn;\n+     int bb;\n {\n   register int j;\n   rtx input_reload_insns[MAX_RECOG_OPERANDS];\n@@ -6345,7 +6346,7 @@ emit_reload_insns (insn)\n   rtx other_operand_reload_insns = 0;\n   rtx other_output_reload_insns[MAX_RECOG_OPERANDS];\n   rtx following_insn = NEXT_INSN (insn);\n-  rtx before_insn = insn;\n+  rtx before_insn = PREV_INSN (insn);\n   int special;\n   /* Values to be put in spill_reg_store are put here first.  */\n   rtx new_spill_reg_store[FIRST_PSEUDO_REGISTER];\n@@ -7251,18 +7252,18 @@ emit_reload_insns (insn)\n      reloads for the operand.  The RELOAD_OTHER output reloads are\n      output in descending order by reload number.  */\n \n-  emit_insns_before (other_input_address_reload_insns, before_insn);\n-  emit_insns_before (other_input_reload_insns, before_insn);\n+  emit_insns_before (other_input_address_reload_insns, insn);\n+  emit_insns_before (other_input_reload_insns, insn);\n \n   for (j = 0; j < reload_n_operands; j++)\n     {\n-      emit_insns_before (inpaddr_address_reload_insns[j], before_insn);\n-      emit_insns_before (input_address_reload_insns[j], before_insn);\n-      emit_insns_before (input_reload_insns[j], before_insn);\n+      emit_insns_before (inpaddr_address_reload_insns[j], insn);\n+      emit_insns_before (input_address_reload_insns[j], insn);\n+      emit_insns_before (input_reload_insns[j], insn);\n     }\n \n-  emit_insns_before (other_operand_reload_insns, before_insn);\n-  emit_insns_before (operand_reload_insns, before_insn);\n+  emit_insns_before (other_operand_reload_insns, insn);\n+  emit_insns_before (operand_reload_insns, insn);\n \n   for (j = 0; j < reload_n_operands; j++)\n     {\n@@ -7272,6 +7273,15 @@ emit_reload_insns (insn)\n       emit_insns_before (other_output_reload_insns[j], following_insn);\n     }\n \n+  /* Keep basic block info up to date.  */\n+  if (n_basic_blocks)\n+    {\n+      if (basic_block_head[bb] == insn)\n+        basic_block_head[bb] = NEXT_INSN (before_insn);\n+      if (basic_block_end[bb] == insn)\n+        basic_block_end[bb] = PREV_INSN (following_insn);\n+    }\n+\n   /* Move death notes from INSN\n      to output-operand-address and output reload insns.  */\n #ifdef PRESERVE_DEATH_INFO_REGNO_P"}]}