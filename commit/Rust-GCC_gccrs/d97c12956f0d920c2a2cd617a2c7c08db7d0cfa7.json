{"sha": "d97c12956f0d920c2a2cd617a2c7c08db7d0cfa7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk3YzEyOTU2ZjBkOTIwYzJhMmNkNjE3YTJjN2MwOGRiN2QwY2ZhNw==", "commit": {"author": {"name": "Jan-Benedict Glaw", "email": "jbglaw@lug-owl.de", "date": "2006-03-17T01:12:33Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2006-03-17T01:12:33Z"}, "message": "rtl.h (CONST_INT_P): Define.\n\n\t* rtl.h (CONST_INT_P): Define.\n\t* config/vax/vax.c (print_operand_address): Use CONST_INT_P()\n\tinstead of GET_CODE(x) == CONST_INT.\n\t(vax_rtx_costs): Likewise.\n\t(vax_output_int_move): Likewise.\n\t(vax_output_int_add): Likewise.\n\t(legitimate_constant_address_p): Likewise.\n\t(index_term_p): Likewise.\n\t* config/vax/vax.h (PRINT_OPERAND): Likewise.\n\t* config/vax/vax.md (and<mode>3): Likewise.\n\t(ashrsi3): Likewise.\n\t(extv): Likewise.\n\t(movstricthi): Likewise.\n\t(movstrictqi): Likewise.\n\t(rotrsi3): Likewise.\n\t(five unnamed insns): Likewise.\n\nFrom-SVN: r112169", "tree": {"sha": "8948f37657bd8d3adc66d47bb80ef60b3cd32110", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8948f37657bd8d3adc66d47bb80ef60b3cd32110"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d97c12956f0d920c2a2cd617a2c7c08db7d0cfa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d97c12956f0d920c2a2cd617a2c7c08db7d0cfa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d97c12956f0d920c2a2cd617a2c7c08db7d0cfa7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d97c12956f0d920c2a2cd617a2c7c08db7d0cfa7/comments", "author": {"login": "jbglaw", "id": 7965297, "node_id": "MDQ6VXNlcjc5NjUyOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/7965297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbglaw", "html_url": "https://github.com/jbglaw", "followers_url": "https://api.github.com/users/jbglaw/followers", "following_url": "https://api.github.com/users/jbglaw/following{/other_user}", "gists_url": "https://api.github.com/users/jbglaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbglaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbglaw/subscriptions", "organizations_url": "https://api.github.com/users/jbglaw/orgs", "repos_url": "https://api.github.com/users/jbglaw/repos", "events_url": "https://api.github.com/users/jbglaw/events{/privacy}", "received_events_url": "https://api.github.com/users/jbglaw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "192d0f895b931ae17d477ea07046980f15dc0ec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/192d0f895b931ae17d477ea07046980f15dc0ec5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/192d0f895b931ae17d477ea07046980f15dc0ec5"}], "stats": {"total": 118, "additions": 72, "deletions": 46}, "files": [{"sha": "a568a022bdce85e63a123b7a5ae2c71b54a81026", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97c12956f0d920c2a2cd617a2c7c08db7d0cfa7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97c12956f0d920c2a2cd617a2c7c08db7d0cfa7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d97c12956f0d920c2a2cd617a2c7c08db7d0cfa7", "patch": "@@ -1,3 +1,22 @@\n+2006-03-16  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n+\n+\t* rtl.h (CONST_INT_P): Define.\n+\t* config/vax/vax.c (print_operand_address): Use CONST_INT_P()\n+\tinstead of GET_CODE(x) == CONST_INT.\n+\t(vax_rtx_costs): Likewise.\n+\t(vax_output_int_move): Likewise.\n+\t(vax_output_int_add): Likewise.\n+\t(legitimate_constant_address_p): Likewise.\n+\t(index_term_p): Likewise.\n+\t* config/vax/vax.h (PRINT_OPERAND): Likewise.\n+\t* config/vax/vax.md (and<mode>3): Likewise.\n+\t(ashrsi3): Likewise.\n+\t(extv): Likewise.\n+\t(movstricthi): Likewise.\n+\t(movstrictqi): Likewise.\n+\t(rotrsi3): Likewise.\n+\t(five unnamed insns): Likewise.\n+\n 2006-03-16  Geoffrey Keating  <geoffk@apple.com>\n \n \t* doc/tm.texi (SDB and DWARF): Add extra parameter to"}, {"sha": "f005a2a4c0d4d02f0f429c5b866aca949de0b9c3", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97c12956f0d920c2a2cd617a2c7c08db7d0cfa7/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97c12956f0d920c2a2cd617a2c7c08db7d0cfa7/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=d97c12956f0d920c2a2cd617a2c7c08db7d0cfa7", "patch": "@@ -288,11 +288,11 @@ print_operand_address (FILE * file, rtx addr)\n \t    {\n \t      if (offset)\n \t\t{\n-\t\t  if (GET_CODE (offset) == CONST_INT)\n+\t\t  if (CONST_INT_P (offset))\n \t\t    offset = plus_constant (XEXP (addr, 0), INTVAL (offset));\n \t\t  else\n \t\t    {\n-\t\t      gcc_assert (GET_CODE (XEXP (addr, 0)) == CONST_INT);\n+\t\t      gcc_assert (CONST_INT_P (XEXP (addr, 0)));\n \t\t      offset = plus_constant (offset, INTVAL (XEXP (addr, 0)));\n \t\t    }\n \t\t}\n@@ -317,11 +317,11 @@ print_operand_address (FILE * file, rtx addr)\n \t    {\n \t      if (offset)\n \t\t{\n-\t\t  if (GET_CODE (offset) == CONST_INT)\n+\t\t  if (CONST_INT_P (offset))\n \t\t    offset = plus_constant (XEXP (addr, 1), INTVAL (offset));\n \t\t  else\n \t\t    {\n-\t\t      gcc_assert (GET_CODE (XEXP (addr, 1)) == CONST_INT);\n+\t\t      gcc_assert (CONST_INT_P (XEXP (addr, 1)));\n \t\t      offset = plus_constant (offset, INTVAL (XEXP (addr, 1)));\n \t\t    }\n \t\t}\n@@ -669,15 +669,15 @@ vax_rtx_costs (rtx x, int code, int outer_code, int *total)\n     case ROTATE:\n     case ROTATERT:\n       *total = 6;\t\t/* 5 on VAX 2, 4 on VAX 9000 */\n-      if (GET_CODE (XEXP (x, 1)) == CONST_INT)\n+      if (CONST_INT_P (XEXP (x, 1)))\n \tfmt = \"e\"; \t\t/* all constant rotate counts are short */\n       break;\n \n     case PLUS:\n     case MINUS:\n       *total = (mode == DFmode) ? 13 : 8; /* 6/8 on VAX 9000, 16/15 on VAX 2 */\n       /* Small integer operands can use subl2 and addl2.  */\n-      if ((GET_CODE (XEXP (x, 1)) == CONST_INT)\n+      if ((CONST_INT_P (XEXP (x, 1)))\n \t  && (unsigned HOST_WIDE_INT)(INTVAL (XEXP (x, 1)) + 63) < 127)\n \tfmt = \"e\";\n       break;\n@@ -690,7 +690,7 @@ vax_rtx_costs (rtx x, int code, int outer_code, int *total)\n     case AND:\n       /* AND is special because the first operand is complemented.  */\n       *total = 3;\n-      if (GET_CODE (XEXP (x, 0)) == CONST_INT)\n+      if (CONST_INT_P (XEXP (x, 0)))\n \t{\n \t  if ((unsigned HOST_WIDE_INT)~INTVAL (XEXP (x, 0)) > 63)\n \t    *total = 4;\n@@ -917,7 +917,7 @@ vax_output_int_move (rtx insn ATTRIBUTE_UNUSED, rtx *operands,\n \t}\n       if (operands[1] == const0_rtx)\n \treturn \"clrl %0\";\n-      if (GET_CODE (operands[1]) == CONST_INT\n+      if (CONST_INT_P (operands[1])\n \t  && (unsigned) INTVAL (operands[1]) >= 64)\n \t{\n \t  int i = INTVAL (operands[1]);\n@@ -937,7 +937,7 @@ vax_output_int_move (rtx insn ATTRIBUTE_UNUSED, rtx *operands,\n       return \"movl %1,%0\";\n \n     case HImode:\n-      if (GET_CODE (operands[1]) == CONST_INT)\n+      if (CONST_INT_P (operands[1]))\n \t{\n \t  int i = INTVAL (operands[1]);\n \t  if (i == 0)\n@@ -952,7 +952,7 @@ vax_output_int_move (rtx insn ATTRIBUTE_UNUSED, rtx *operands,\n       return \"movw %1,%0\";\n \n     case QImode:\n-      if (GET_CODE (operands[1]) == CONST_INT)\n+      if (CONST_INT_P (operands[1]))\n \t{\n \t  int i = INTVAL (operands[1]);\n \t  if (i == 0)\n@@ -994,10 +994,10 @@ vax_output_int_add (rtx insn ATTRIBUTE_UNUSED, rtx *operands,\n \t    return \"incl %0\";\n \t  if (operands[2] == constm1_rtx)\n \t    return \"decl %0\";\n-\t  if (GET_CODE (operands[2]) == CONST_INT\n+\t  if (CONST_INT_P (operands[2])\n \t      && (unsigned) (- INTVAL (operands[2])) < 64)\n \t    return \"subl2 $%n2,%0\";\n-\t  if (GET_CODE (operands[2]) == CONST_INT\n+\t  if (CONST_INT_P (operands[2])\n \t      && (unsigned) INTVAL (operands[2]) >= 64\n \t      && REG_P (operands[1])\n \t      && ((INTVAL (operands[2]) < 32767 && INTVAL (operands[2]) > -32768)\n@@ -1009,18 +1009,18 @@ vax_output_int_add (rtx insn ATTRIBUTE_UNUSED, rtx *operands,\n       if (rtx_equal_p (operands[0], operands[2]))\n \treturn \"addl2 %1,%0\";\n \n-      if (GET_CODE (operands[2]) == CONST_INT\n+      if (CONST_INT_P (operands[2])\n \t  && INTVAL (operands[2]) < 32767\n \t  && INTVAL (operands[2]) > -32768\n \t  && REG_P (operands[1])\n \t  && push_operand (operands[0], SImode))\n \treturn \"pushab %c2(%1)\";\n \n-      if (GET_CODE (operands[2]) == CONST_INT\n+      if (CONST_INT_P (operands[2])\n \t  && (unsigned) (- INTVAL (operands[2])) < 64)\n \treturn \"subl3 $%n2,%1,%0\";\n \n-      if (GET_CODE (operands[2]) == CONST_INT\n+      if (CONST_INT_P (operands[2])\n \t  && (unsigned) INTVAL (operands[2]) >= 64\n \t  && REG_P (operands[1])\n \t  && ((INTVAL (operands[2]) < 32767 && INTVAL (operands[2]) > -32768)\n@@ -1040,14 +1040,14 @@ vax_output_int_add (rtx insn ATTRIBUTE_UNUSED, rtx *operands,\n \t    return \"incw %0\";\n \t  if (operands[2] == constm1_rtx)\n \t    return \"decw %0\";\n-\t  if (GET_CODE (operands[2]) == CONST_INT\n+\t  if (CONST_INT_P (operands[2])\n \t      && (unsigned) (- INTVAL (operands[2])) < 64)\n \t    return \"subw2 $%n2,%0\";\n \t  return \"addw2 %2,%0\";\n \t}\n       if (rtx_equal_p (operands[0], operands[2]))\n \treturn \"addw2 %1,%0\";\n-      if (GET_CODE (operands[2]) == CONST_INT\n+      if (CONST_INT_P (operands[2])\n \t  && (unsigned) (- INTVAL (operands[2])) < 64)\n \treturn \"subw3 $%n2,%1,%0\";\n       return \"addw3 %1,%2,%0\";\n@@ -1059,14 +1059,14 @@ vax_output_int_add (rtx insn ATTRIBUTE_UNUSED, rtx *operands,\n \t    return \"incb %0\";\n \t  if (operands[2] == constm1_rtx)\n \t    return \"decb %0\";\n-\t  if (GET_CODE (operands[2]) == CONST_INT\n+\t  if (CONST_INT_P (operands[2])\n \t      && (unsigned) (- INTVAL (operands[2])) < 64)\n \t    return \"subb2 $%n2,%0\";\n \t  return \"addb2 %2,%0\";\n \t}\n       if (rtx_equal_p (operands[0], operands[2]))\n \treturn \"addb2 %1,%0\";\n-      if (GET_CODE (operands[2]) == CONST_INT\n+      if (CONST_INT_P (operands[2])\n \t  && (unsigned) (- INTVAL (operands[2])) < 64)\n \treturn \"subb3 $%n2,%1,%0\";\n       return \"addb3 %1,%2,%0\";\n@@ -1103,7 +1103,7 @@ int\n legitimate_constant_address_p (rtx x)\n {\n   return (GET_CODE (x) == LABEL_REF || GET_CODE (x) == SYMBOL_REF\n-\t  || GET_CODE (x) == CONST_INT || GET_CODE (x) == CONST\n+\t  || CONST_INT_P (x) || GET_CODE (x) == CONST\n \t  || GET_CODE (x) == HIGH);\n }\n \n@@ -1217,12 +1217,12 @@ index_term_p (rtx prod, enum machine_mode mode, int strict)\n   xfoo0 = XEXP (prod, 0);\n   xfoo1 = XEXP (prod, 1);\n \n-  if (GET_CODE (xfoo0) == CONST_INT\n+  if (CONST_INT_P (xfoo0)\n       && INTVAL (xfoo0) == (int)GET_MODE_SIZE (mode)\n       && INDEX_REGISTER_P (xfoo1, strict))\n     return 1;\n \n-  if (GET_CODE (xfoo1) == CONST_INT\n+  if (CONST_INT_P (xfoo1)\n       && INTVAL (xfoo1) == (int)GET_MODE_SIZE (mode)\n       && INDEX_REGISTER_P (xfoo0, strict))\n     return 1;"}, {"sha": "90dd8e046bfc5647d0a3da1545c7c135aa5cedea", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97c12956f0d920c2a2cd617a2c7c08db7d0cfa7/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97c12956f0d920c2a2cd617a2c7c08db7d0cfa7/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=d97c12956f0d920c2a2cd617a2c7c08db7d0cfa7", "patch": "@@ -872,24 +872,24 @@ VAX operand formatting codes:\n     fputs (REGISTER_PREFIX, FILE);\t\t\t\t\t\\\n   else if (CODE == 'C')\t\t\t\t\t\t\t\\\n     fputs (rev_cond_name (X), FILE);\t\t\t\t\t\\\n-  else if (CODE == 'D' && GET_CODE (X) == CONST_INT && INTVAL (X) < 0)\t\\\n+  else if (CODE == 'D' && CONST_INT_P (X) && INTVAL (X) < 0)\t\t\\\n     fprintf (FILE, \"$\" NEG_HWI_PRINT_HEX16, INTVAL (X));\t\t\\\n-  else if (CODE == 'P' && GET_CODE (X) == CONST_INT)\t\t\t\\\n+  else if (CODE == 'P' && CONST_INT_P (X))\t\t\t\t\\\n     fprintf (FILE, \"$\" HOST_WIDE_INT_PRINT_DEC, INTVAL (X) + 1);\t\\\n-  else if (CODE == 'N' && GET_CODE (X) == CONST_INT)\t\t\t\\\n+  else if (CODE == 'N' && CONST_INT_P (X))\t\t\t\t\\\n     fprintf (FILE, \"$\" HOST_WIDE_INT_PRINT_DEC, ~ INTVAL (X));\t\t\\\n   /* rotl instruction cannot deal with negative arguments.  */\t\t\\\n-  else if (CODE == 'R' && GET_CODE (X) == CONST_INT)\t\t\t\\\n+  else if (CODE == 'R' && CONST_INT_P (X))\t\t\t\t\\\n     fprintf (FILE, \"$\" HOST_WIDE_INT_PRINT_DEC, 32 - INTVAL (X));\t\\\n-  else if (CODE == 'H' && GET_CODE (X) == CONST_INT)\t\t\t\\\n+  else if (CODE == 'H' && CONST_INT_P (X))\t\t\t\t\\\n     fprintf (FILE, \"$%d\", (int) (0xffff & ~ INTVAL (X)));\t\t\\\n-  else if (CODE == 'h' && GET_CODE (X) == CONST_INT)\t\t\t\\\n+  else if (CODE == 'h' && CONST_INT_P (X))\t\t\t\t\\\n     fprintf (FILE, \"$%d\", (short) - INTVAL (x));\t\t\t\\\n-  else if (CODE == 'B' && GET_CODE (X) == CONST_INT)\t\t\t\\\n+  else if (CODE == 'B' && CONST_INT_P (X))\t\t\t\t\\\n     fprintf (FILE, \"$%d\", (int) (0xff & ~ INTVAL (X)));\t\t\t\\\n-  else if (CODE == 'b' && GET_CODE (X) == CONST_INT)\t\t\t\\\n+  else if (CODE == 'b' && CONST_INT_P (X))\t\t\t\t\\\n     fprintf (FILE, \"$%d\", (int) (0xff & - INTVAL (X)));\t\t\t\\\n-  else if (CODE == 'M' && GET_CODE (X) == CONST_INT)\t\t\t\\\n+  else if (CODE == 'M' && CONST_INT_P (X))\t\t\t\t\\\n     fprintf (FILE, \"$%d\", ~((1 << INTVAL (x)) - 1));\t\t\t\\\n   else if (REG_P (X))\t\t\t\t\t\t\t\\\n     fprintf (FILE, \"%s\", reg_names[REGNO (X)]);\t\t\t\t\\"}, {"sha": "dd448007452bc4388fed81a61edd2bb539e3d2e4", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97c12956f0d920c2a2cd617a2c7c08db7d0cfa7/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97c12956f0d920c2a2cd617a2c7c08db7d0cfa7/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=d97c12956f0d920c2a2cd617a2c7c08db7d0cfa7", "patch": "@@ -152,7 +152,7 @@\n   \"\"\n   \"*\n {\n-  if (GET_CODE (operands[1]) == CONST_INT)\n+  if (CONST_INT_P (operands[1]))\n     {\n       int i = INTVAL (operands[1]);\n       if (i == 0)\n@@ -173,7 +173,7 @@\n   \"\"\n   \"*\n {\n-  if (GET_CODE (operands[1]) == CONST_INT)\n+  if (CONST_INT_P (operands[1]))\n     {\n       int i = INTVAL (operands[1]);\n       if (i == 0)\n@@ -528,14 +528,14 @@\n   rtx op1 = operands[1];\n \n   /* If there is a constant argument, complement that one.  */\n-  if (GET_CODE (operands[2]) == CONST_INT && GET_CODE (op1) != CONST_INT)\n+  if (CONST_INT_P (operands[2]) && !CONST_INT_P (op1))\n     {\n       operands[1] = operands[2];\n       operands[2] = op1;\n       op1 = operands[1];\n     }\n \n-  if (GET_CODE (op1) == CONST_INT)\n+  if (CONST_INT_P (op1))\n     operands[1] = GEN_INT (~INTVAL (op1));\n   else\n     operands[1] = expand_unop (<MODE>mode, one_cmpl_optab, op1, 0, 1);\n@@ -621,7 +621,7 @@\n   \"\"\n   \"\n {\n-  if (GET_CODE (operands[2]) != CONST_INT)\n+  if (!CONST_INT_P (operands[2]))\n     operands[2] = gen_rtx_NEG (QImode, negate_rtx (QImode, operands[2]));\n }\")\n \n@@ -649,7 +649,7 @@\n   if (operands[2] == const1_rtx && rtx_equal_p (operands[0], operands[1]))\n     return \\\"addl2 %0,%0\\\";\n   if (REG_P (operands[1])\n-      && GET_CODE (operands[2]) == CONST_INT)\n+      && CONST_INT_P (operands[2]))\n     {\n       int i = INTVAL (operands[2]);\n       if (i == 1)\n@@ -715,7 +715,7 @@\n   \"\"\n   \"\n {\n-  if (GET_CODE (operands[2]) != CONST_INT)\n+  if (!CONST_INT_P (operands[2]))\n     operands[2] = gen_rtx_NEG (QImode, negate_rtx (QImode, operands[2]));\n }\")\n \n@@ -871,7 +871,8 @@\n   \"\"\n   \"*\n {\n-  if (GET_CODE (operands[3]) != CONST_INT || GET_CODE (operands[2]) != CONST_INT\n+  if (!CONST_INT_P (operands[3])\n+      || !CONST_INT_P (operands[2])\n       || !REG_P (operands[0])\n       || (INTVAL (operands[2]) != 8 && INTVAL (operands[2]) != 16))\n     return \\\"extv %3,%2,%1,%0\\\";\n@@ -888,7 +889,8 @@\n   \"\"\n   \"*\n {\n-  if (GET_CODE (operands[3]) != CONST_INT || GET_CODE (operands[2]) != CONST_INT\n+  if (!CONST_INT_P (operands[3])\n+      || !CONST_INT_P (operands[2])\n       || !REG_P (operands[0]))\n     return \\\"extzv %3,%2,%1,%0\\\";\n   if (INTVAL (operands[2]) == 8)\n@@ -934,8 +936,9 @@\n   \"\"\n   \"*\n {\n-  if (!REG_P (operands[0]) || GET_CODE (operands[2]) != CONST_INT\n-      || GET_CODE (operands[3]) != CONST_INT\n+  if (!REG_P (operands[0])\n+      || !CONST_INT_P (operands[2])\n+      || !CONST_INT_P (operands[3])\n       || (INTVAL (operands[2]) != 8 && INTVAL (operands[2]) != 16)\n       || INTVAL (operands[2]) + INTVAL (operands[3]) > 32\n       || side_effects_p (operands[1])\n@@ -963,8 +966,9 @@\n   \"\"\n   \"*\n {\n-  if (!REG_P (operands[0]) || GET_CODE (operands[2]) != CONST_INT\n-      || GET_CODE (operands[3]) != CONST_INT\n+  if (!REG_P (operands[0])\n+      || !CONST_INT_P (operands[2])\n+      || !CONST_INT_P (operands[3])\n       || INTVAL (operands[2]) + INTVAL (operands[3]) > 32\n       || side_effects_p (operands[1])\n       || (MEM_P (operands[1])\n@@ -1151,7 +1155,7 @@\n    (set (match_dup 0)\n \t(plus:SI (match_dup 0)\n \t\t (const_int 1)))]\n-  \"!TARGET_UNIX_ASM && GET_CODE (operands[1]) == CONST_INT\"\n+  \"!TARGET_UNIX_ASM && CONST_INT_P (operands[1])\"\n   \"jaoblss %P1,%0,%l2\")\n \n (define_insn \"\"\n@@ -1178,7 +1182,7 @@\n    (set (match_dup 0)\n \t(plus:SI (match_dup 0)\n \t\t (const_int 1)))]\n-  \"!TARGET_UNIX_ASM && GET_CODE (operands[1]) == CONST_INT\"\n+  \"!TARGET_UNIX_ASM && CONST_INT_P (operands[1])\"\n   \"jaobleq %P1,%0,%l2\")\n \n ;; Something like a sob insn, but compares against -1."}, {"sha": "cad48cbc6f95202895795a93cb4a8339ecb82918", "filename": "gcc/rtl.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97c12956f0d920c2a2cd617a2c7c08db7d0cfa7/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97c12956f0d920c2a2cd617a2c7c08db7d0cfa7/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=d97c12956f0d920c2a2cd617a2c7c08db7d0cfa7", "patch": "@@ -361,6 +361,9 @@ struct rtvec_def GTY(()) {\n /* Predicate yielding nonzero iff X is an rtx for a memory location.  */\n #define MEM_P(X) (GET_CODE (X) == MEM)\n \n+/* Prediacte yielding nonzero iff X is an rtx for a constant integer.  */\n+#define CONST_INT_P(X) (GET_CODE (X) == CONST_INT)\n+\n /* Predicate yielding nonzero iff X is a label insn.  */\n #define LABEL_P(X) (GET_CODE (X) == CODE_LABEL)\n "}]}