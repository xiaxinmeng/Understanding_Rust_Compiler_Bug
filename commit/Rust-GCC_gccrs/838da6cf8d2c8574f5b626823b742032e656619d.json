{"sha": "838da6cf8d2c8574f5b626823b742032e656619d", "node_id": "C_kwDOANBUbNoAKDgzOGRhNmNmOGQyYzg1NzRmNWI2MjY4MjNiNzQyMDMyZTY1NjYxOWQ", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-07-25T06:38:37Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-07-25T17:33:16Z"}, "message": "analyzer: convert tests with dos2unix\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/analyzer/fd-2.c: Convert Windows endlines to Unix\n\tstyle.\n\t* gcc.dg/analyzer/fd-3.c: Likewise.\n\t* gcc.dg/analyzer/fd-4.c: Likewise.\n\t* gcc.dg/analyzer/fd-5.c: Likewise.\n\t* c-c++-common/attr-fd.c: Likewise.", "tree": {"sha": "fca3a94f09d168dda6686f33a5e629de465e31b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fca3a94f09d168dda6686f33a5e629de465e31b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/838da6cf8d2c8574f5b626823b742032e656619d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/838da6cf8d2c8574f5b626823b742032e656619d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/838da6cf8d2c8574f5b626823b742032e656619d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/838da6cf8d2c8574f5b626823b742032e656619d/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9365b2bf2f310780d80193b196204e0b8ce7767f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9365b2bf2f310780d80193b196204e0b8ce7767f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9365b2bf2f310780d80193b196204e0b8ce7767f"}], "stats": {"total": 546, "additions": 273, "deletions": 273}, "files": [{"sha": "9f12093c04f266dfecb717c08ef38cdf13af914d", "filename": "gcc/testsuite/c-c++-common/attr-fd.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/838da6cf8d2c8574f5b626823b742032e656619d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-fd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/838da6cf8d2c8574f5b626823b742032e656619d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-fd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-fd.c?ref=838da6cf8d2c8574f5b626823b742032e656619d", "patch": "@@ -1,18 +1,18 @@\n-\r\n-int not_a_fn __attribute__ ((fd_arg(1))); /* { dg-warning \"'fd_arg' attribute only applies to function types\" } */\r\n-\r\n-void f (char *p) __attribute__ ((fd_arg(1))); /* { dg-warning \"'fd_arg' attribute argument value '1' refers to parameter type 'char ?\\\\\\*'\" } */\r\n-\r\n-\r\n-int not_a_fn_b __attribute__ ((fd_arg_read(1))); /* { dg-warning \"'fd_arg_read' attribute only applies to function types\" } */\r\n-\r\n-void g (char *p) __attribute__ ((fd_arg_read(1))); /* { dg-warning \"'fd_arg_read' attribute argument value '1' refers to parameter type 'char ?\\\\\\*'\" } */\r\n-\r\n-\r\n-int not_a_fn_c __attribute__ ((fd_arg_write(1))); /* { dg-warning \"'fd_arg_write' attribute only applies to function types\" } */\r\n-\r\n-void f (char *p) __attribute__ ((fd_arg_write(1))); /* { dg-warning \"'fd_arg_write' attribute argument value '1' refers to parameter type 'char ?\\\\\\*'\" } */\r\n-\r\n-\r\n-void fn_a (int fd) __attribute__ ((fd_arg(0))); /* { dg-warning \"'fd_arg' attribute argument value '0' does not refer to a function parameter\" } */\r\n-void fd_a_1 (int fd) __attribute__ ((fd_arg(\"notint\"))); /* { dg-warning \"'fd_arg' attribute argument has type ('char\\\\\\[7\\\\\\]'|'const char\\\\\\*')\" } */\r\n+\n+int not_a_fn __attribute__ ((fd_arg(1))); /* { dg-warning \"'fd_arg' attribute only applies to function types\" } */\n+\n+void f (char *p) __attribute__ ((fd_arg(1))); /* { dg-warning \"'fd_arg' attribute argument value '1' refers to parameter type 'char ?\\\\\\*'\" } */\n+\n+\n+int not_a_fn_b __attribute__ ((fd_arg_read(1))); /* { dg-warning \"'fd_arg_read' attribute only applies to function types\" } */\n+\n+void g (char *p) __attribute__ ((fd_arg_read(1))); /* { dg-warning \"'fd_arg_read' attribute argument value '1' refers to parameter type 'char ?\\\\\\*'\" } */\n+\n+\n+int not_a_fn_c __attribute__ ((fd_arg_write(1))); /* { dg-warning \"'fd_arg_write' attribute only applies to function types\" } */\n+\n+void f (char *p) __attribute__ ((fd_arg_write(1))); /* { dg-warning \"'fd_arg_write' attribute argument value '1' refers to parameter type 'char ?\\\\\\*'\" } */\n+\n+\n+void fn_a (int fd) __attribute__ ((fd_arg(0))); /* { dg-warning \"'fd_arg' attribute argument value '0' does not refer to a function parameter\" } */\n+void fd_a_1 (int fd) __attribute__ ((fd_arg(\"notint\"))); /* { dg-warning \"'fd_arg' attribute argument has type ('char\\\\\\[7\\\\\\]'|'const char\\\\\\*')\" } */"}, {"sha": "d794b460a2e3667cf081dd2d64418efa7c56ef23", "filename": "gcc/testsuite/gcc.dg/analyzer/fd-2.c", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/838da6cf8d2c8574f5b626823b742032e656619d/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/838da6cf8d2c8574f5b626823b742032e656619d/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-2.c?ref=838da6cf8d2c8574f5b626823b742032e656619d", "patch": "@@ -1,49 +1,49 @@\n-int open(const char *, int mode);\r\n-void close(int fd);\r\n-#define O_RDONLY 0\r\n-#define O_WRONLY 1\r\n-#define O_RDWR 2\r\n-#define STDIN 0\r\n-\r\n-void \r\n-test_1 (const char *path)\r\n-{\r\n-    int fd = open (path, O_RDWR); /* { dg-message \"\\\\(1\\\\) opened here\" } */\r\n-    close (fd); /* { dg-message \"\\\\(2\\\\) first 'close' here\" \"event1\" } */\r\n-    close (fd); /* { dg-warning \"double 'close' of file descriptor 'fd' \\\\\\[CWE-1341\\\\\\]\" \"warning\" } */\r\n-    /* { dg-message \"\\\\(3\\\\) second 'close' here; first 'close' was at \\\\(2\\\\)\" \"event2\" { target *-*-* } .-1 } */\r\n-}\r\n-\r\n-void \r\n-test_2 (const char *path)\r\n-{\r\n-    int fd = open (path, O_RDWR); /* { dg-message \"\\\\(1\\\\) opened here\" } */\r\n-    if (fd < 0) /* { dg-message \"\\\\(2\\\\) assuming 'fd' is a valid file descriptor \\\\(>= 0\\\\)\" \"event1\" } */\r\n-    /* { dg-message \"\\\\(3\\\\) following 'false' branch \\\\(when 'fd >= 0'\\\\)...\" \"event2\" { target *-*-* } .-1 } */\r\n-        return;\r\n-    close (fd); /* { dg-message \"\\\\(4\\\\) ...to here\" \"event1\" } */\r\n-    /* { dg-message \"\\\\(5\\\\) first 'close' here\" \"event2\" { target *-*-* } .-1 } */\r\n-    close (fd); /* { dg-warning \"double 'close' of file descriptor 'fd' \\\\\\[CWE-1341\\\\\\]\" \"warning\" } */\r\n-    /* {dg-message \"\\\\(6\\\\) second 'close' here; first was at \\\\(5\\\\)\" \"\" { target *-*-* } .-1 } */\r\n-}\r\n-\r\n-void\r\n-test_3 ()\r\n-{\r\n-    /* FD 0 is stdin at the entry to \"main\" and thus read-only, but we have no\r\n-    guarantees here that it hasn't been closed and then reopened for\r\n-    writing, so we can't issue a warning */\r\n-    \r\n-    int fd = STDIN;\r\n-    close(fd); /* { dg-message \"\\\\(1\\\\) first 'close' here\" } */\r\n-    close(fd); /* { dg-warning \"double 'close' of file descriptor 'fd' \\\\\\[CWE-1341\\\\\\]\" \"warning\" } */\r\n-     /* { dg-message \"\\\\(2\\\\) second 'close' here; first 'close' was at \\\\(1\\\\)\" \"event2\" { target *-*-* } .-1 } */\r\n-}\r\n-\r\n-void\r\n-test_4 ()\r\n-{\r\n-    int fd = -1;\r\n-    close(fd);\r\n-    close(fd);\r\n+int open(const char *, int mode);\n+void close(int fd);\n+#define O_RDONLY 0\n+#define O_WRONLY 1\n+#define O_RDWR 2\n+#define STDIN 0\n+\n+void \n+test_1 (const char *path)\n+{\n+    int fd = open (path, O_RDWR); /* { dg-message \"\\\\(1\\\\) opened here\" } */\n+    close (fd); /* { dg-message \"\\\\(2\\\\) first 'close' here\" \"event1\" } */\n+    close (fd); /* { dg-warning \"double 'close' of file descriptor 'fd' \\\\\\[CWE-1341\\\\\\]\" \"warning\" } */\n+    /* { dg-message \"\\\\(3\\\\) second 'close' here; first 'close' was at \\\\(2\\\\)\" \"event2\" { target *-*-* } .-1 } */\n+}\n+\n+void \n+test_2 (const char *path)\n+{\n+    int fd = open (path, O_RDWR); /* { dg-message \"\\\\(1\\\\) opened here\" } */\n+    if (fd < 0) /* { dg-message \"\\\\(2\\\\) assuming 'fd' is a valid file descriptor \\\\(>= 0\\\\)\" \"event1\" } */\n+    /* { dg-message \"\\\\(3\\\\) following 'false' branch \\\\(when 'fd >= 0'\\\\)...\" \"event2\" { target *-*-* } .-1 } */\n+        return;\n+    close (fd); /* { dg-message \"\\\\(4\\\\) ...to here\" \"event1\" } */\n+    /* { dg-message \"\\\\(5\\\\) first 'close' here\" \"event2\" { target *-*-* } .-1 } */\n+    close (fd); /* { dg-warning \"double 'close' of file descriptor 'fd' \\\\\\[CWE-1341\\\\\\]\" \"warning\" } */\n+    /* {dg-message \"\\\\(6\\\\) second 'close' here; first was at \\\\(5\\\\)\" \"\" { target *-*-* } .-1 } */\n+}\n+\n+void\n+test_3 ()\n+{\n+    /* FD 0 is stdin at the entry to \"main\" and thus read-only, but we have no\n+    guarantees here that it hasn't been closed and then reopened for\n+    writing, so we can't issue a warning */\n+    \n+    int fd = STDIN;\n+    close(fd); /* { dg-message \"\\\\(1\\\\) first 'close' here\" } */\n+    close(fd); /* { dg-warning \"double 'close' of file descriptor 'fd' \\\\\\[CWE-1341\\\\\\]\" \"warning\" } */\n+     /* { dg-message \"\\\\(2\\\\) second 'close' here; first 'close' was at \\\\(1\\\\)\" \"event2\" { target *-*-* } .-1 } */\n+}\n+\n+void\n+test_4 ()\n+{\n+    int fd = -1;\n+    close(fd);\n+    close(fd);\n }\n\\ No newline at end of file"}, {"sha": "55e84e3634aa2033635151962989865616a8caa2", "filename": "gcc/testsuite/gcc.dg/analyzer/fd-3.c", "status": "modified", "additions": 84, "deletions": 84, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/838da6cf8d2c8574f5b626823b742032e656619d/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/838da6cf8d2c8574f5b626823b742032e656619d/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-3.c?ref=838da6cf8d2c8574f5b626823b742032e656619d", "patch": "@@ -1,85 +1,85 @@\n-int open(const char *, int mode);\r\n-void close(int fd);\r\n-int write (int fd, void *buf, int nbytes);\r\n-int read (int fd, void *buf, int nbytes);\r\n-int some_condition();\r\n-\r\n-#define O_RDONLY 0\r\n-#define O_WRONLY 1\r\n-#define O_RDWR 2\r\n-#define STDIN 0\r\n-#define O_NOATIME 262144\r\n-\r\n-void\r\n-test_1 (const char *path, void *buf)\r\n-{\r\n-    int fd = open (path, O_RDWR); /* { dg-message \"\\\\(1\\\\) opened here\" } */\r\n-    write (fd, buf, 1); /* { dg-message \"\\\\(2\\\\) 'fd' could be invalid: unchecked value from \\\\(1\\\\)\" } */\r\n-    /* { dg-warning \"'write' on possibly invalid file descriptor 'fd'\" \"warning\" { target *-*-* } .-1 } */\r\n-    close(fd);\r\n-}\r\n-\r\n-void\r\n-test_2 (const char *path, void *buf)\r\n-{\r\n-    int fd = open (path, O_RDWR); /* { dg-message \"\\\\(1\\\\) opened here\" } */\r\n-    read (fd, buf, 1); /* { dg-message \"\\\\(2\\\\) 'fd' could be invalid: unchecked value from \\\\(1\\\\)\" } */\r\n-    /* { dg-warning \"'read' on possibly invalid file descriptor 'fd'\" \"warning\" { target *-*-* } .-1 } */\r\n-    close (fd);\r\n-}\r\n-\r\n-void \r\n-test_3 (void *buf)\r\n-{\r\n-    int fd = -1;\r\n-    read (fd, buf, 1); /* { dg-warning \"'read' on possibly invalid file descriptor 'fd'\" } */\r\n-    /* { dg-message \"\\\\(1\\\\) 'fd' could be invalid\" \"\" { target *-*-* } .-1 } */\r\n-}\r\n-\r\n-void\r\n-test_4 (void *buf)\r\n-{\r\n-    int fd = STDIN;\r\n-    read (fd, buf, 1);\r\n-    close(fd);\r\n-}\r\n-\r\n-void\r\n-test_5 (char *path, void *buf)\r\n-{\r\n-    int flags = O_RDONLY;\r\n-    if (some_condition())\r\n-        flags |= O_NOATIME;\r\n-    int fd = open (path, flags);\r\n-    read (fd, buf, 1); /* { dg-warning \"'read' on possibly invalid file descriptor 'fd'\" } */\r\n-    /* { dg-message \"\\\\(1\\\\) 'fd' could be invalid\" \"\" { target *-*-* } .-1 } */\r\n-    close (fd);   \r\n-}\r\n-\r\n-\r\n-void\r\n-test_6 (char *path, void *buf)\r\n-{\r\n-    int fd = open (path, O_RDONLY);\r\n-    if (fd != -1)\r\n-    {\r\n-        read (fd, buf, 1);\r\n-    }\r\n-    close (fd);\r\n-}\r\n-\r\n-\r\n-void\r\n-test_7 (char *path, void *buf)\r\n-{\r\n-    int fd = open (path, O_RDWR); /* { dg-message \"\\\\(1\\\\) opened here\" } */\r\n-    if (fd != -1) /* { dg-message \"\\\\(2\\\\) assuming 'fd' is an invalid file descriptor \\\\(< 0\\\\)\" } */\r\n-    {\r\n-        read (fd, buf, 1);\r\n-    } else\r\n-    {\r\n-        write (fd, buf, 1); /* { dg-warning \"'write' on possibly invalid file descriptor 'fd'\" } */\r\n-        \r\n-    }\r\n-    close(fd);\r\n+int open(const char *, int mode);\n+void close(int fd);\n+int write (int fd, void *buf, int nbytes);\n+int read (int fd, void *buf, int nbytes);\n+int some_condition();\n+\n+#define O_RDONLY 0\n+#define O_WRONLY 1\n+#define O_RDWR 2\n+#define STDIN 0\n+#define O_NOATIME 262144\n+\n+void\n+test_1 (const char *path, void *buf)\n+{\n+    int fd = open (path, O_RDWR); /* { dg-message \"\\\\(1\\\\) opened here\" } */\n+    write (fd, buf, 1); /* { dg-message \"\\\\(2\\\\) 'fd' could be invalid: unchecked value from \\\\(1\\\\)\" } */\n+    /* { dg-warning \"'write' on possibly invalid file descriptor 'fd'\" \"warning\" { target *-*-* } .-1 } */\n+    close(fd);\n+}\n+\n+void\n+test_2 (const char *path, void *buf)\n+{\n+    int fd = open (path, O_RDWR); /* { dg-message \"\\\\(1\\\\) opened here\" } */\n+    read (fd, buf, 1); /* { dg-message \"\\\\(2\\\\) 'fd' could be invalid: unchecked value from \\\\(1\\\\)\" } */\n+    /* { dg-warning \"'read' on possibly invalid file descriptor 'fd'\" \"warning\" { target *-*-* } .-1 } */\n+    close (fd);\n+}\n+\n+void \n+test_3 (void *buf)\n+{\n+    int fd = -1;\n+    read (fd, buf, 1); /* { dg-warning \"'read' on possibly invalid file descriptor 'fd'\" } */\n+    /* { dg-message \"\\\\(1\\\\) 'fd' could be invalid\" \"\" { target *-*-* } .-1 } */\n+}\n+\n+void\n+test_4 (void *buf)\n+{\n+    int fd = STDIN;\n+    read (fd, buf, 1);\n+    close(fd);\n+}\n+\n+void\n+test_5 (char *path, void *buf)\n+{\n+    int flags = O_RDONLY;\n+    if (some_condition())\n+        flags |= O_NOATIME;\n+    int fd = open (path, flags);\n+    read (fd, buf, 1); /* { dg-warning \"'read' on possibly invalid file descriptor 'fd'\" } */\n+    /* { dg-message \"\\\\(1\\\\) 'fd' could be invalid\" \"\" { target *-*-* } .-1 } */\n+    close (fd);   \n+}\n+\n+\n+void\n+test_6 (char *path, void *buf)\n+{\n+    int fd = open (path, O_RDONLY);\n+    if (fd != -1)\n+    {\n+        read (fd, buf, 1);\n+    }\n+    close (fd);\n+}\n+\n+\n+void\n+test_7 (char *path, void *buf)\n+{\n+    int fd = open (path, O_RDWR); /* { dg-message \"\\\\(1\\\\) opened here\" } */\n+    if (fd != -1) /* { dg-message \"\\\\(2\\\\) assuming 'fd' is an invalid file descriptor \\\\(< 0\\\\)\" } */\n+    {\n+        read (fd, buf, 1);\n+    } else\n+    {\n+        write (fd, buf, 1); /* { dg-warning \"'write' on possibly invalid file descriptor 'fd'\" } */\n+        \n+    }\n+    close(fd);\n }\n\\ No newline at end of file"}, {"sha": "ecd787caff71143540dc54c8f8293a1455cfa8aa", "filename": "gcc/testsuite/gcc.dg/analyzer/fd-4.c", "status": "modified", "additions": 71, "deletions": 71, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/838da6cf8d2c8574f5b626823b742032e656619d/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/838da6cf8d2c8574f5b626823b742032e656619d/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-4.c?ref=838da6cf8d2c8574f5b626823b742032e656619d", "patch": "@@ -1,72 +1,72 @@\n-#include <stdio.h>\r\n-\r\n-int open(const char *, int mode);\r\n-void close(int fd);\r\n-int write (int fd, void *buf, int nbytes);\r\n-int read (int fd, void *buf, int nbytes);\r\n-\r\n-#define O_RDONLY 0\r\n-#define O_WRONLY 1\r\n-#define O_RDWR 2\r\n-\r\n-\r\n-void\r\n-test_1 (const char *path, void *buf)\r\n-{\r\n-    int fd = open (path, O_RDONLY); /* { dg-message \"opened here as read-only\" } */\r\n-    if (fd >= 0) /* { dg-message \"assuming 'fd' is a valid file descriptor \\\\(>= 0\\\\)\" \"event1\" } */\r\n-    /* { dg-message \"following 'true' branch \\\\(when 'fd >= 0'\\\\)...\" \"event2\" { target *-*-* } .-1 } */\r\n-    {\r\n-        write (fd, buf, 1); /* { dg-warning \"'write' on read-only file descriptor 'fd'\" \"warning\" } */\r\n-        /* { dg-message \"\\\\(4\\\\) ...to here\" \"event1\" { target *-*-* } .-1 } */\r\n-        /* { dg-message \"\\\\(5\\\\) 'write' on read-only file descriptor 'fd'\" \"event2\" { target *-*-* } .-2 } */\r\n-        close (fd);\r\n-    }\r\n-}\r\n-\r\n-void\r\n-test_2 (const char *path, void *buf)\r\n-{\r\n-    int fd = open (path, O_WRONLY); /* { dg-message \"opened here as write-only\" } */\r\n-    if (fd >= 0) /* { dg-message \"assuming 'fd' is a valid file descriptor \\\\(>= 0\\\\)\" \"event1\" } */\r\n-    /* { dg-message \"following 'true' branch \\\\(when 'fd >= 0'\\\\)...\" \"event2\" { target *-*-* } .-1 } */\r\n-    {\r\n-        read (fd, buf, 1); /* { dg-warning \"'read' on write-only file descriptor 'fd'\" \"warning\" } */\r\n-        /* { dg-message \"\\\\(4\\\\) ...to here\" \"event1\" { target *-*-* } .-1 } */\r\n-        /* { dg-message \"\\\\(5\\\\) 'read' on write-only file descriptor 'fd'\" \"event2\" { target *-*-* } .-2 } */\r\n-        close (fd);\r\n-    }\r\n-}\r\n-\r\n-\r\n-void \r\n-test_3 (const char *path, void *buf)\r\n-{\r\n-    int fd = open (path, O_RDWR); /* { dg-message \"\\\\(1\\\\) opened here\" } */\r\n-    if (fd >= 0)\r\n-    {\r\n-        close(fd); /* {dg-message \"\\\\(2\\\\) closed here\"} */\r\n-        read(fd, buf, 1); /* { dg-warning \"'read' on closed file descriptor 'fd'\" }  */\r\n-        /* {dg-message \"\\\\(3\\\\) 'read' on closed file descriptor 'fd'; 'close' was at \\\\(2\\\\)\" \"\" {target *-*-*} .-1 } */\r\n-    }\r\n-}\r\n-\r\n-void \r\n-test_4 (const char *path, void *buf)\r\n-{\r\n-    int fd = open (path, O_RDWR); /* { dg-message \"\\\\(1\\\\) opened here\" } */\r\n-    if (fd >= 0)\r\n-    {\r\n-        close(fd); /* {dg-message \"\\\\(2\\\\) closed here\"} */\r\n-        write(fd, buf, 1); /* { dg-warning \"'write' on closed file descriptor 'fd'\" }  */\r\n-        /* {dg-message \"\\\\(3\\\\) 'write' on closed file descriptor 'fd'; 'close' was at \\\\(2\\\\)\" \"\" {target *-*-*} .-1 } */\r\n-    }\r\n-}\r\n-\r\n-void\r\n-test_5 (const char *path)\r\n-{\r\n-    int fd = open (path, O_RDWR);\r\n-    close(fd);\r\n-    printf(\"%d\", fd); /* { dg-bogus \"'printf' on a closed file descriptor 'fd'\" } */\r\n+#include <stdio.h>\n+\n+int open(const char *, int mode);\n+void close(int fd);\n+int write (int fd, void *buf, int nbytes);\n+int read (int fd, void *buf, int nbytes);\n+\n+#define O_RDONLY 0\n+#define O_WRONLY 1\n+#define O_RDWR 2\n+\n+\n+void\n+test_1 (const char *path, void *buf)\n+{\n+    int fd = open (path, O_RDONLY); /* { dg-message \"opened here as read-only\" } */\n+    if (fd >= 0) /* { dg-message \"assuming 'fd' is a valid file descriptor \\\\(>= 0\\\\)\" \"event1\" } */\n+    /* { dg-message \"following 'true' branch \\\\(when 'fd >= 0'\\\\)...\" \"event2\" { target *-*-* } .-1 } */\n+    {\n+        write (fd, buf, 1); /* { dg-warning \"'write' on read-only file descriptor 'fd'\" \"warning\" } */\n+        /* { dg-message \"\\\\(4\\\\) ...to here\" \"event1\" { target *-*-* } .-1 } */\n+        /* { dg-message \"\\\\(5\\\\) 'write' on read-only file descriptor 'fd'\" \"event2\" { target *-*-* } .-2 } */\n+        close (fd);\n+    }\n+}\n+\n+void\n+test_2 (const char *path, void *buf)\n+{\n+    int fd = open (path, O_WRONLY); /* { dg-message \"opened here as write-only\" } */\n+    if (fd >= 0) /* { dg-message \"assuming 'fd' is a valid file descriptor \\\\(>= 0\\\\)\" \"event1\" } */\n+    /* { dg-message \"following 'true' branch \\\\(when 'fd >= 0'\\\\)...\" \"event2\" { target *-*-* } .-1 } */\n+    {\n+        read (fd, buf, 1); /* { dg-warning \"'read' on write-only file descriptor 'fd'\" \"warning\" } */\n+        /* { dg-message \"\\\\(4\\\\) ...to here\" \"event1\" { target *-*-* } .-1 } */\n+        /* { dg-message \"\\\\(5\\\\) 'read' on write-only file descriptor 'fd'\" \"event2\" { target *-*-* } .-2 } */\n+        close (fd);\n+    }\n+}\n+\n+\n+void \n+test_3 (const char *path, void *buf)\n+{\n+    int fd = open (path, O_RDWR); /* { dg-message \"\\\\(1\\\\) opened here\" } */\n+    if (fd >= 0)\n+    {\n+        close(fd); /* {dg-message \"\\\\(2\\\\) closed here\"} */\n+        read(fd, buf, 1); /* { dg-warning \"'read' on closed file descriptor 'fd'\" }  */\n+        /* {dg-message \"\\\\(3\\\\) 'read' on closed file descriptor 'fd'; 'close' was at \\\\(2\\\\)\" \"\" {target *-*-*} .-1 } */\n+    }\n+}\n+\n+void \n+test_4 (const char *path, void *buf)\n+{\n+    int fd = open (path, O_RDWR); /* { dg-message \"\\\\(1\\\\) opened here\" } */\n+    if (fd >= 0)\n+    {\n+        close(fd); /* {dg-message \"\\\\(2\\\\) closed here\"} */\n+        write(fd, buf, 1); /* { dg-warning \"'write' on closed file descriptor 'fd'\" }  */\n+        /* {dg-message \"\\\\(3\\\\) 'write' on closed file descriptor 'fd'; 'close' was at \\\\(2\\\\)\" \"\" {target *-*-*} .-1 } */\n+    }\n+}\n+\n+void\n+test_5 (const char *path)\n+{\n+    int fd = open (path, O_RDWR);\n+    close(fd);\n+    printf(\"%d\", fd); /* { dg-bogus \"'printf' on a closed file descriptor 'fd'\" } */\n }\n\\ No newline at end of file"}, {"sha": "c18b2adcbe5aff8341bd49053ebaf7d2c783adfe", "filename": "gcc/testsuite/gcc.dg/analyzer/fd-5.c", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/838da6cf8d2c8574f5b626823b742032e656619d/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/838da6cf8d2c8574f5b626823b742032e656619d/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-5.c?ref=838da6cf8d2c8574f5b626823b742032e656619d", "patch": "@@ -1,53 +1,53 @@\n-int open(const char *, int mode);\r\n-void close(int fd);\r\n-int write (int fd, void *buf, int nbytes);\r\n-int read (int fd, void *buf, int nbytes);\r\n-\r\n-#define O_RDONLY 0\r\n-#define O_WRONLY 1\r\n-#define O_RDWR 2\r\n-\r\n-void f (int fd) __attribute__((fd_arg(1))); /* { dg-message \"argument 1 of 'f' must be an open file descriptor, due to '__attribute__\\\\(\\\\(fd_arg\\\\(1\\\\)\\\\)\\\\)'\" } */\r\n-\r\n-void\r\n-test_1 (const char *path)\r\n-{\r\n-    int fd = open (path, O_RDWR);\r\n-    close(fd);\r\n-    f(fd); /* { dg-warning \"'f' on closed file descriptor 'fd'\" } */\r\n-      /* { dg-message \"\\\\(3\\\\) 'f' on closed file descriptor 'fd'; 'close' was at \\\\(2\\\\)\" \"\" { target *-*-* } .-1 } */\r\n-}\r\n-\r\n-void g (int fd) __attribute__((fd_arg_read(1))); /* { dg-message \"argument 1 of 'g' must be a readable file descriptor, due to '__attribute__\\\\(\\\\(fd_arg_read\\\\(1\\\\)\\\\)\\\\)'\" } */\r\n-\r\n-void\r\n-test_2 (const char *path)\r\n-{\r\n-  int fd = open (path, O_WRONLY);\r\n-  if (fd != -1)\r\n-  {\r\n-    g (fd); /* { dg-warning \"'g' on write-only file descriptor 'fd'\" } */\r\n-  }\r\n-  close (fd);\r\n-}\r\n-\r\n-void h (int fd) __attribute__((fd_arg_write(1))); /* { dg-message \"argument 1 of 'h' must be a writable file descriptor, due to '__attribute__\\\\(\\\\(fd_arg_write\\\\(1\\\\)\\\\)\\\\)'\" } */\r\n-void\r\n-test_3 (const char *path)\r\n-{\r\n-  int fd = open (path, O_RDONLY);\r\n-  if (fd != -1)\r\n-  {\r\n-    h (fd); /* { dg-warning \"'h' on read-only file descriptor 'fd'\" } */\r\n-  }\r\n-  close(fd);\r\n-}\r\n-\r\n-void ff (int fd) __attribute__((fd_arg(1))); /* { dg-message \"argument 1 of 'ff' must be an open file descriptor, due to '__attribute__\\\\(\\\\(fd_arg\\\\(1\\\\)\\\\)\\\\)'\" } */\r\n-\r\n-void test_4 (const char *path)\r\n-{\r\n-  int fd = open (path, O_RDWR);\r\n-  ff (fd); /* { dg-warning \"'ff' on possibly invalid file descriptor 'fd'\" } */\r\n-  close(fd);\r\n+int open(const char *, int mode);\n+void close(int fd);\n+int write (int fd, void *buf, int nbytes);\n+int read (int fd, void *buf, int nbytes);\n+\n+#define O_RDONLY 0\n+#define O_WRONLY 1\n+#define O_RDWR 2\n+\n+void f (int fd) __attribute__((fd_arg(1))); /* { dg-message \"argument 1 of 'f' must be an open file descriptor, due to '__attribute__\\\\(\\\\(fd_arg\\\\(1\\\\)\\\\)\\\\)'\" } */\n+\n+void\n+test_1 (const char *path)\n+{\n+    int fd = open (path, O_RDWR);\n+    close(fd);\n+    f(fd); /* { dg-warning \"'f' on closed file descriptor 'fd'\" } */\n+      /* { dg-message \"\\\\(3\\\\) 'f' on closed file descriptor 'fd'; 'close' was at \\\\(2\\\\)\" \"\" { target *-*-* } .-1 } */\n+}\n+\n+void g (int fd) __attribute__((fd_arg_read(1))); /* { dg-message \"argument 1 of 'g' must be a readable file descriptor, due to '__attribute__\\\\(\\\\(fd_arg_read\\\\(1\\\\)\\\\)\\\\)'\" } */\n+\n+void\n+test_2 (const char *path)\n+{\n+  int fd = open (path, O_WRONLY);\n+  if (fd != -1)\n+  {\n+    g (fd); /* { dg-warning \"'g' on write-only file descriptor 'fd'\" } */\n+  }\n+  close (fd);\n+}\n+\n+void h (int fd) __attribute__((fd_arg_write(1))); /* { dg-message \"argument 1 of 'h' must be a writable file descriptor, due to '__attribute__\\\\(\\\\(fd_arg_write\\\\(1\\\\)\\\\)\\\\)'\" } */\n+void\n+test_3 (const char *path)\n+{\n+  int fd = open (path, O_RDONLY);\n+  if (fd != -1)\n+  {\n+    h (fd); /* { dg-warning \"'h' on read-only file descriptor 'fd'\" } */\n+  }\n+  close(fd);\n+}\n+\n+void ff (int fd) __attribute__((fd_arg(1))); /* { dg-message \"argument 1 of 'ff' must be an open file descriptor, due to '__attribute__\\\\(\\\\(fd_arg\\\\(1\\\\)\\\\)\\\\)'\" } */\n+\n+void test_4 (const char *path)\n+{\n+  int fd = open (path, O_RDWR);\n+  ff (fd); /* { dg-warning \"'ff' on possibly invalid file descriptor 'fd'\" } */\n+  close(fd);\n }\n\\ No newline at end of file"}]}