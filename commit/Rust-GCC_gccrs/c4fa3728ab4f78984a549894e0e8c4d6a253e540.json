{"sha": "c4fa3728ab4f78984a549894e0e8c4d6a253e540", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRmYTM3MjhhYjRmNzg5ODRhNTQ5ODk0ZTBlOGM0ZDZhMjUzZTU0MA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "ulrich.weigand@de.ibm.com", "date": "2020-11-24T09:32:20Z"}, "committer": {"name": "Ulrich Weigand", "email": "ulrich.weigand@de.ibm.com", "date": "2020-11-24T10:50:10Z"}, "message": "Fix -ffast-math flags handling inconsistencies\n\nThis patch implements the following set of changes:\n\n1. If a component flag of -ffast-math (or -funsafe-math-optimizations)\n   is explicitly set (or reset) on the command line, this should override\n   any implicit change due to -f(no-)fast-math, no matter in which order\n   the flags come on the command line.  This change affects all flags.\n\n2. Any component flag modified from its default by -ffast-math should\n   be reset to the default by -fno-fast-math.  This was previously\n   not done for the following flags:\n      -fcx-limited-range\n      -fexcess-precision=\n\n3. Once -ffinite-math-only is true, the -f(no-)signaling-nans flag has\n   no meaning (if we have no NaNs at all, it does not matter whether\n   there is a difference between quiet and signaling NaNs).  Therefore,\n   it does not make sense for -ffast-math to imply -fno-signaling-nans.\n   (This is also a documentation change.)\n\n4. -ffast-math is documented to imply -fno-rounding-math, however the\n   latter setting is the default anyway; therefore it does not make\n   sense to try to modify it from its default setting.\n\n5. The __FAST_MATH__ preprocessor macro should be defined if and only\n   if all the component flags of -ffast-math are set to the value that\n   is documented as the effect of -ffast-math.  The following flags\n   were currently *not* so tested:\n     -fcx-limited-range\n     -fassociative-math\n     -freciprocal-math\n     -frounding-math\n   (Note that we should still *test* for -fno-rounding-math here even\n   though it is not set as to 4.  -ffast-math -frounding-math should\n   not set the __FAST_MATH__ macro.)\n   This is also a documentation change.\n\n2020-11-24  Ulrich Weigand  <uweigand@de.ibm.com>\n\ngcc/\n\n\t* doc/invoke.texi (-ffast-math): Remove mention of -fno-signaling-nans.\n\tClarify conditions when __FAST_MATH__ preprocessor macro is defined.\n\n\t* opts.c (common_handle_option): Pass OPTS_SET to set_fast_math_flags\n\tand set_unsafe_math_optimizations_flags.\n\t(set_fast_math_flags): Add OPTS_SET argument, and use it to avoid\n\tsetting flags already explicitly set on the command line.  In the !set\n\tcase, also reset x_flag_cx_limited_range and x_flag_excess_precision.\n\tNever reset x_flag_signaling_nans or x_flag_rounding_math.\n\t(set_unsafe_math_optimizations_flags): Add OPTS_SET argument, and use\n\tit to avoid setting flags already explicitly set on the command line.\n\t(fast_math_flags_set_p): Also test x_flag_cx_limited_range,\n\tx_flag_associative_math, x_flag_reciprocal_math, and\n\tx_flag_rounding_math.", "tree": {"sha": "94d3ddbc78651d5b3d7032d558bf359737c21cfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94d3ddbc78651d5b3d7032d558bf359737c21cfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4fa3728ab4f78984a549894e0e8c4d6a253e540", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4fa3728ab4f78984a549894e0e8c4d6a253e540", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4fa3728ab4f78984a549894e0e8c4d6a253e540", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4fa3728ab4f78984a549894e0e8c4d6a253e540/comments", "author": {"login": "uweigand", "id": 4154057, "node_id": "MDQ6VXNlcjQxNTQwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4154057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uweigand", "html_url": "https://github.com/uweigand", "followers_url": "https://api.github.com/users/uweigand/followers", "following_url": "https://api.github.com/users/uweigand/following{/other_user}", "gists_url": "https://api.github.com/users/uweigand/gists{/gist_id}", "starred_url": "https://api.github.com/users/uweigand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uweigand/subscriptions", "organizations_url": "https://api.github.com/users/uweigand/orgs", "repos_url": "https://api.github.com/users/uweigand/repos", "events_url": "https://api.github.com/users/uweigand/events{/privacy}", "received_events_url": "https://api.github.com/users/uweigand/received_events", "type": "User", "site_admin": false}, "committer": {"login": "uweigand", "id": 4154057, "node_id": "MDQ6VXNlcjQxNTQwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4154057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uweigand", "html_url": "https://github.com/uweigand", "followers_url": "https://api.github.com/users/uweigand/followers", "following_url": "https://api.github.com/users/uweigand/following{/other_user}", "gists_url": "https://api.github.com/users/uweigand/gists{/gist_id}", "starred_url": "https://api.github.com/users/uweigand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uweigand/subscriptions", "organizations_url": "https://api.github.com/users/uweigand/orgs", "repos_url": "https://api.github.com/users/uweigand/repos", "events_url": "https://api.github.com/users/uweigand/events{/privacy}", "received_events_url": "https://api.github.com/users/uweigand/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "607695354a57bce732b027828614bceda0e393eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/607695354a57bce732b027828614bceda0e393eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/607695354a57bce732b027828614bceda0e393eb"}], "stats": {"total": 64, "additions": 35, "deletions": 29}, "files": [{"sha": "896a3081a8b0dc47dbdf22e798a93470caf1eba2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fa3728ab4f78984a549894e0e8c4d6a253e540/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fa3728ab4f78984a549894e0e8c4d6a253e540/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c4fa3728ab4f78984a549894e0e8c4d6a253e540", "patch": "@@ -12342,10 +12342,10 @@ is unpredictable.\n @opindex ffast-math\n Sets the options @option{-fno-math-errno}, @option{-funsafe-math-optimizations},\n @option{-ffinite-math-only}, @option{-fno-rounding-math},\n-@option{-fno-signaling-nans}, @option{-fcx-limited-range} and\n-@option{-fexcess-precision=fast}.\n+@option{-fcx-limited-range} and @option{-fexcess-precision=fast}.\n \n-This option causes the preprocessor macro @code{__FAST_MATH__} to be defined.\n+Whenever all these options listed above are set to those values,\n+the preprocessor macro @code{__FAST_MATH__} will be defined.\n \n This option is not turned on by any @option{-O} option besides\n @option{-Ofast} since it can result in incorrect output for programs"}, {"sha": "1a3fb892a711efa71bf7432652ee7bd380197100", "filename": "gcc/opts.c", "status": "modified", "additions": 32, "deletions": 26, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fa3728ab4f78984a549894e0e8c4d6a253e540/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fa3728ab4f78984a549894e0e8c4d6a253e540/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=c4fa3728ab4f78984a549894e0e8c4d6a253e540", "patch": "@@ -193,10 +193,12 @@ static void set_debug_level (enum debug_info_type type, int extended,\n \t\t\t     const char *arg, struct gcc_options *opts,\n \t\t\t     struct gcc_options *opts_set,\n \t\t\t     location_t loc);\n-static void set_fast_math_flags (struct gcc_options *opts, int set);\n+static void set_fast_math_flags (struct gcc_options *opts,\n+\t\t\t\t struct gcc_options *opts_set, int set);\n static void decode_d_option (const char *arg, struct gcc_options *opts,\n \t\t\t     location_t loc, diagnostic_context *dc);\n static void set_unsafe_math_optimizations_flags (struct gcc_options *opts,\n+\t\t\t\t\t\t struct gcc_options *opts_set,\n \t\t\t\t\t\t int set);\n static void enable_warning_as_error (const char *arg, int value,\n \t\t\t\t     unsigned int lang_mask,\n@@ -2491,11 +2493,11 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_ffast_math:\n-      set_fast_math_flags (opts, value);\n+      set_fast_math_flags (opts, opts_set, value);\n       break;\n \n     case OPT_funsafe_math_optimizations:\n-      set_unsafe_math_optimizations_flags (opts, value);\n+      set_unsafe_math_optimizations_flags (opts, opts_set, value);\n       break;\n \n     case OPT_ffixed_:\n@@ -2876,55 +2878,59 @@ set_Wstrict_aliasing (struct gcc_options *opts, int onoff)\n /* The following routines are useful in setting all the flags that\n    -ffast-math and -fno-fast-math imply.  */\n static void\n-set_fast_math_flags (struct gcc_options *opts, int set)\n+set_fast_math_flags (struct gcc_options *opts,\n+\t\t     struct gcc_options *opts_set, int set)\n {\n-  if (!opts->frontend_set_flag_unsafe_math_optimizations)\n+  if (!opts->frontend_set_flag_unsafe_math_optimizations\n+      && !opts_set->x_flag_unsafe_math_optimizations)\n     {\n       opts->x_flag_unsafe_math_optimizations = set;\n-      set_unsafe_math_optimizations_flags (opts, set);\n+      set_unsafe_math_optimizations_flags (opts, opts_set, set);\n     }\n   if (!opts->frontend_set_flag_finite_math_only)\n-    opts->x_flag_finite_math_only = set;\n+    SET_OPTION_IF_UNSET (opts, opts_set, flag_finite_math_only, set);\n   if (!opts->frontend_set_flag_errno_math)\n-    opts->x_flag_errno_math = !set;\n-  if (set)\n-    {\n-      if (opts->frontend_set_flag_excess_precision == EXCESS_PRECISION_DEFAULT)\n-\topts->x_flag_excess_precision\n-\t  = set ? EXCESS_PRECISION_FAST : EXCESS_PRECISION_DEFAULT;\n-      if (!opts->frontend_set_flag_signaling_nans)\n-\topts->x_flag_signaling_nans = 0;\n-      if (!opts->frontend_set_flag_rounding_math)\n-\topts->x_flag_rounding_math = 0;\n-      if (!opts->frontend_set_flag_cx_limited_range)\n-\topts->x_flag_cx_limited_range = 1;\n-    }\n+    SET_OPTION_IF_UNSET (opts, opts_set, flag_errno_math, !set);\n+  if (!opts->frontend_set_flag_cx_limited_range)\n+    SET_OPTION_IF_UNSET (opts, opts_set, flag_cx_limited_range, set);\n+  if (!opts->frontend_set_flag_excess_precision)\n+    SET_OPTION_IF_UNSET (opts, opts_set, flag_excess_precision,\n+\t\t\t set ? EXCESS_PRECISION_FAST\n+\t\t\t     : EXCESS_PRECISION_DEFAULT);\n+\n+  // -ffast-math should also reset -frounding-math, but since this\n+  // is off by default, there's nothing to do for now.\n }\n \n /* When -funsafe-math-optimizations is set the following\n    flags are set as well.  */\n static void\n-set_unsafe_math_optimizations_flags (struct gcc_options *opts, int set)\n+set_unsafe_math_optimizations_flags (struct gcc_options *opts,\n+\t\t\t\t     struct gcc_options *opts_set, int set)\n {\n   if (!opts->frontend_set_flag_trapping_math)\n-    opts->x_flag_trapping_math = !set;\n+    SET_OPTION_IF_UNSET (opts, opts_set, flag_trapping_math, !set);\n   if (!opts->frontend_set_flag_signed_zeros)\n-    opts->x_flag_signed_zeros = !set;\n+    SET_OPTION_IF_UNSET (opts, opts_set, flag_signed_zeros, !set);\n   if (!opts->frontend_set_flag_associative_math)\n-    opts->x_flag_associative_math = set;\n+    SET_OPTION_IF_UNSET (opts, opts_set, flag_associative_math, set);\n   if (!opts->frontend_set_flag_reciprocal_math)\n-    opts->x_flag_reciprocal_math = set;\n+    SET_OPTION_IF_UNSET (opts, opts_set, flag_reciprocal_math, set);\n }\n \n /* Return true iff flags in OPTS are set as if -ffast-math.  */\n bool\n fast_math_flags_set_p (const struct gcc_options *opts)\n {\n   return (!opts->x_flag_trapping_math\n+\t  && !opts->x_flag_signed_zeros\n+\t  && opts->x_flag_associative_math\n+\t  && opts->x_flag_reciprocal_math\n \t  && opts->x_flag_unsafe_math_optimizations\n \t  && opts->x_flag_finite_math_only\n-\t  && !opts->x_flag_signed_zeros\n \t  && !opts->x_flag_errno_math\n+\t  && !opts->x_flag_rounding_math\n+\t  && opts->x_flag_cx_limited_range\n \t  && opts->x_flag_excess_precision == EXCESS_PRECISION_FAST);\n }\n "}]}