{"sha": "80be8f05f19958afec202a384c736ecd18ccf6a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBiZThmMDVmMTk5NThhZmVjMjAyYTM4NGM3MzZlY2QxOGNjZjZhOQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "1999-07-07T09:09:39Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "1999-07-07T09:09:39Z"}, "message": "i386-signal.h (MAKE_THROW_FRAME): Advance EIP by two bytes to make it point after the instruction where the trap...\n\n1999-07-07  Andrew Haley  <aph@cygnus.com>\n        * include/i386-signal.h (MAKE_THROW_FRAME): Advance EIP by two\n\tbytes to make it point after the instruction where the trap\n\toccurred.\n\t(HANDLE_DIVIDE_OVERFLOW): Ditto.\n\nFrom-SVN: r27989", "tree": {"sha": "151797b4fce0da7eb9b21f0bc6f6f6f5b596ad92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/151797b4fce0da7eb9b21f0bc6f6f6f5b596ad92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80be8f05f19958afec202a384c736ecd18ccf6a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80be8f05f19958afec202a384c736ecd18ccf6a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80be8f05f19958afec202a384c736ecd18ccf6a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80be8f05f19958afec202a384c736ecd18ccf6a9/comments", "author": null, "committer": null, "parents": [{"sha": "09522f2113addcce3dc2a59faf65be639dec6201", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09522f2113addcce3dc2a59faf65be639dec6201", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09522f2113addcce3dc2a59faf65be639dec6201"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "ddb66bea1256f3fd942380b8cea77cb667630fb8", "filename": "libjava/include/i386-signal.h", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80be8f05f19958afec202a384c736ecd18ccf6a9/libjava%2Finclude%2Fi386-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80be8f05f19958afec202a384c736ecd18ccf6a9/libjava%2Finclude%2Fi386-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fi386-signal.h?ref=80be8f05f19958afec202a384c736ecd18ccf6a9", "patch": "@@ -33,6 +33,11 @@ do\t\t\t\t\t\t\t\t\t\\\n   register unsigned long _ebp = _regs->ebp;\t\t\t\t\\\n   register unsigned char *_eip = (unsigned char *)_regs->eip;\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n+  /* Advance the program counter so that it is after the start of the\t\\\n+     instruction:  the x86 exception handler expects\t\t\t\\\n+     the PC to point to the instruction after a call. */\t\t\\\n+  _eip += 2;\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n   asm volatile (\"mov %0, (%%ebp); mov %1, 4(%%ebp)\"\t\t\t\\\n \t\t: : \"r\"(_ebp), \"r\"(_eip));\t\t\t\t\\\n }\t\t\t\t\t\t\t\t\t\\\n@@ -57,7 +62,7 @@ do\t\t\t\t\t\t\t\t\t\\\n    * As the instructions are variable length it is necessary to do a\t\\\n    * little calculation to figure out where the following instruction\t\\\n    * actually is.\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n+  \t\t\t\t\t\t\t\t\t\\\n    */\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   if (_eip[0] == 0xf7)\t\t\t\t\t\t\t\\\n@@ -99,6 +104,14 @@ do\t\t\t\t\t\t\t\t\t\\\n \t  _eip = (unsigned char *)_ebp[1];\t\t\t\t\\\n \t  _ebp = (unsigned long *)_ebp[0];\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  /* Advance the program counter so that it is after the start\t\\\n+\t     of the instruction: this is because the x86 exception\t\\\n+\t     handler expects the PC to point to the instruction after a\t\\\n+\t     call. */\t\t\t\t\t\t\t\\\n+\t  _eip += 2;\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   asm volatile (\"mov %0, (%%ebp); mov %1, 4(%%ebp)\"\t\t\t\\\n@@ -118,9 +131,9 @@ do\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\\\n while (0)  \n \n-#define INIT_FPE                                                \\\n+#define INIT_FPE\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\\\n+  { \t\t\t\t\t\t\t\t\\\n     arithexception = new java::lang::ArithmeticException \t\\\n       (JvNewStringLatin1 (\"/ by zero\"));\t\t\t\\\n     struct sigaction act;\t\t\t\t\t\\"}]}