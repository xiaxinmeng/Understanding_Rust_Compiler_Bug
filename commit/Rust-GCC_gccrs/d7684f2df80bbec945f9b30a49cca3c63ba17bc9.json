{"sha": "d7684f2df80bbec945f9b30a49cca3c63ba17bc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc2ODRmMmRmODBiYmVjOTQ1ZjliMzBhNDljY2EzYzYzYmExN2JjOQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchell@usa.net", "date": "1998-02-02T23:44:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-02-02T23:44:19Z"}, "message": "call.c (add_template_candidate_real): Pass extra parameter to fn_type_unification.\n\n\t* call.c (add_template_candidate_real): Pass extra parameter to\n\tfn_type_unification.\n\t* cp-tree.h (fn_type_unification): Add parameter.\n\t* pt.c (fn_type_unification): Add additional parameter to deal with\n\tstatic member functions.\n\t(get_bindings): Deal with static member functions.\n\nFrom-SVN: r17609", "tree": {"sha": "8fe89150ee3c7beab64f1ebf5927ec31aadea9ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fe89150ee3c7beab64f1ebf5927ec31aadea9ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7684f2df80bbec945f9b30a49cca3c63ba17bc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7684f2df80bbec945f9b30a49cca3c63ba17bc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7684f2df80bbec945f9b30a49cca3c63ba17bc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7684f2df80bbec945f9b30a49cca3c63ba17bc9/comments", "author": null, "committer": null, "parents": [{"sha": "15f05b455062073ff64d905bfbb497616db34cdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15f05b455062073ff64d905bfbb497616db34cdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15f05b455062073ff64d905bfbb497616db34cdd"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "b4a8803bc8436d95ae24e67a441cf0cf2242878d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7684f2df80bbec945f9b30a49cca3c63ba17bc9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7684f2df80bbec945f9b30a49cca3c63ba17bc9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d7684f2df80bbec945f9b30a49cca3c63ba17bc9", "patch": "@@ -1,5 +1,12 @@\n Mon Feb  2 11:24:22 1998  Mark Mitchell  <mmitchell@usa.net>\n \n+\t* call.c (add_template_candidate_real): Pass extra parameter to\n+\tfn_type_unification. \n+\t* cp-tree.h (fn_type_unification): Add parameter.\n+\t* pt.c (fn_type_unification): Add additional parameter to deal with\n+\tstatic member functions.\n+\t(get_bindings): Deal with static member functions.\n+\n \t* cp-tree.h (DECL_NONSTATIC_MEMBER_FUNCTION_P): New macro.\t\n \t(revert_static_member_fn): Declare.\n \t* decl.c (revert_static_member_fn): Remove declaration.  Change"}, {"sha": "18eeb82b754a42e8cf38e99c42918f5b067365ba", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7684f2df80bbec945f9b30a49cca3c63ba17bc9/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7684f2df80bbec945f9b30a49cca3c63ba17bc9/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=d7684f2df80bbec945f9b30a49cca3c63ba17bc9", "patch": "@@ -4176,7 +4176,7 @@ add_template_candidate_real (candidates, tmpl, explicit_targs,\n   tree fn;\n \n   i = fn_type_unification (tmpl, explicit_targs, targs, arglist,\n-\t\t\t   return_type, 0); \n+\t\t\t   return_type, 0, NULL_TREE); \n \n   if (i != 0)\n     return candidates;"}, {"sha": "6973e6642149e8e028c23ea3bae0187a720e2e79", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7684f2df80bbec945f9b30a49cca3c63ba17bc9/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7684f2df80bbec945f9b30a49cca3c63ba17bc9/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d7684f2df80bbec945f9b30a49cca3c63ba17bc9", "patch": "@@ -2353,7 +2353,7 @@ extern int uses_template_parms\t\t\tPROTO((tree));\n extern tree instantiate_class_template\t\tPROTO((tree));\n extern tree instantiate_template\t\tPROTO((tree, tree));\n extern void overload_template_name\t\tPROTO((tree));\n-extern int fn_type_unification                  PROTO((tree, tree, tree, tree, tree, int));\n+extern int fn_type_unification                  PROTO((tree, tree, tree, tree, tree, int, tree));\n extern int type_unification\t\t\tPROTO((tree, tree *, tree, tree, tree, int *, int, int));\n struct tinst_level *tinst_for_decl\t\tPROTO((void));\n extern void mark_decl_instantiated\t\tPROTO((tree, int));"}, {"sha": "780462a1297ea5994713e1c9b0d0a7134da9fb1a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7684f2df80bbec945f9b30a49cca3c63ba17bc9/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7684f2df80bbec945f9b30a49cca3c63ba17bc9/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d7684f2df80bbec945f9b30a49cca3c63ba17bc9", "patch": "@@ -4599,13 +4599,17 @@ overload_template_name (type)\n   pushdecl_class_level (decl);\n }\n \n+\n /* Like type_unification but designed specially to handle conversion\n-   operators.  */\n+   operators.  The EXTRA_FN_ARG, if any, is the type of an additional\n+   parameter to be added to the beginning of FN's parameter list.  */\n \n int\n-fn_type_unification (fn, explicit_targs, targs, args, return_type, strict)\n+fn_type_unification (fn, explicit_targs, targs, args, return_type,\n+\t\t     strict, extra_fn_arg)\n      tree fn, explicit_targs, targs, args, return_type;\n      int strict;\n+     tree extra_fn_arg;\n {\n   int i, dummy = 0;\n   tree fn_arg_types = TYPE_ARG_TYPES (TREE_TYPE (fn));\n@@ -4618,13 +4622,17 @@ fn_type_unification (fn, explicit_targs, targs, args, return_type, strict)\n       /* This is a template conversion operator.  Use the return types\n          as well as the argument types.  */\n       fn_arg_types = scratch_tree_cons (NULL_TREE, \n-\t\t\t\tTREE_TYPE (TREE_TYPE (fn)),\n-\t\t\t\tfn_arg_types);\n+\t\t\t\t\tTREE_TYPE (TREE_TYPE (fn)),\n+\t\t\t\t\tfn_arg_types);\n       decl_arg_types = scratch_tree_cons (NULL_TREE,\n-\t\t\t\t  return_type,\n-\t\t\t\t  decl_arg_types);\n+\t\t\t\t\t  return_type,\n+\t\t\t\t\t  decl_arg_types);\n     }\n \n+  if (extra_fn_arg != NULL_TREE)\n+    fn_arg_types = scratch_tree_cons (NULL_TREE, extra_fn_arg,\n+\t\t\t\t      fn_arg_types); \n+\n   i = type_unification (DECL_INNERMOST_TEMPLATE_PARMS (fn), \n \t\t\t&TREE_VEC_ELT (targs, 0), \n \t\t\tfn_arg_types,\n@@ -5261,12 +5269,35 @@ get_bindings (fn, decl, explicit_args)\n {\n   int ntparms = DECL_NTPARMS (fn);\n   tree targs = make_scratch_vec (ntparms);\n+  tree decl_arg_types = TYPE_ARG_TYPES (TREE_TYPE (decl));\n+  tree extra_fn_arg = NULL_TREE;\n   int i;\n \n+  if (DECL_STATIC_FUNCTION_P (fn) \n+      && DECL_NONSTATIC_MEMBER_FUNCTION_P (decl))\n+    {\n+      /* Sometimes we are trying to figure out what's being\n+\t specialized by a declaration that looks like a method, and it\n+\t turns out to be a static member function.  */\n+      if (CLASSTYPE_TEMPLATE_INFO (DECL_REAL_CONTEXT (fn))\n+\t  && !is_member_template (fn))\n+\t/* The natural thing to do here seems to be to remove the\n+\t   spurious `this' parameter from the DECL, but that prevents\n+\t   unification from making use of the class type.  So,\n+\t   instead, we have fn_type_unification add to the parameters\n+\t   for FN.  */\n+\textra_fn_arg = build_pointer_type (DECL_REAL_CONTEXT (fn));\n+      else\n+\t/* In this case, though, adding the extra_fn_arg can confuse\n+\t   things, so we remove from decl_arg_types instead.  */\n+\tdecl_arg_types = TREE_CHAIN (decl_arg_types);\n+    }\n+\n   i = fn_type_unification (fn, explicit_args, targs, \n-\t\t\t   TYPE_ARG_TYPES (TREE_TYPE (decl)), \n+\t\t\t   decl_arg_types,\n \t\t\t   TREE_TYPE (TREE_TYPE (decl)),\n-\t\t\t   1);\n+\t\t\t   1,\n+\t\t\t   extra_fn_arg);\n \n   if (i == 0)\n     {"}]}