{"sha": "0f6b820c5d3f39cf1ae01dfd6e523990e199d7e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY2YjgyMGM1ZDNmMzljZjFhZTAxZGZkNmU1MjM5OTBlMTk5ZDdlNQ==", "commit": {"author": {"name": "Kaushik Phatak", "email": "kaushik.phatak@kpitcummins.com", "date": "2010-04-16T22:56:21Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2010-04-16T22:56:21Z"}, "message": "h8300.c (print_operand): Modify case 'V' and case 'W' print operands for HI mode.\n\n\t* config/h8300/h8300.c (print_operand) : Modify case 'V' and\n\tcase 'W' print operands for HI mode.\n\t* config/h8300/h8300.h (Y0, Y2) : New constraints.\n\t* config/h8300/h8300.md (bclrqi_msx, bclrhi_msx): New patterns\n\t(bsetqi_msx, bsethi_msx, bnotqi_msx, bnothi_msx): Likewise.\n\t* config/h8300/predicate.md (bit_register_indirect_operand): New.\n\nFrom-SVN: r158452", "tree": {"sha": "99c86050bd12a7945e9513c74c9b4ab1ddcc83e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99c86050bd12a7945e9513c74c9b4ab1ddcc83e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f6b820c5d3f39cf1ae01dfd6e523990e199d7e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f6b820c5d3f39cf1ae01dfd6e523990e199d7e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f6b820c5d3f39cf1ae01dfd6e523990e199d7e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f6b820c5d3f39cf1ae01dfd6e523990e199d7e5/comments", "author": null, "committer": null, "parents": [{"sha": "fcd3c5a9bead3b260a5d4c0c1f69293caab8d50e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcd3c5a9bead3b260a5d4c0c1f69293caab8d50e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcd3c5a9bead3b260a5d4c0c1f69293caab8d50e"}], "stats": {"total": 137, "additions": 128, "deletions": 9}, "files": [{"sha": "36ab804982880f99d7766845d79bcad7f8b6cd1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6b820c5d3f39cf1ae01dfd6e523990e199d7e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6b820c5d3f39cf1ae01dfd6e523990e199d7e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f6b820c5d3f39cf1ae01dfd6e523990e199d7e5", "patch": "@@ -41,6 +41,13 @@\n \n 2010-04-12  Kaushik Phatak  <kaushik.phatak@kpitcummins.com>\n \n+\t* config/h8300/h8300.c (print_operand) : Modify case 'V' and\n+\tcase 'W' print operands for HI mode.\n+\t* config/h8300/h8300.h (Y0, Y2) : New constraints.\n+\t* config/h8300/h8300.md (bclrqi_msx, bclrhi_msx): New patterns\n+\t(bsetqi_msx, bsethi_msx, bnotqi_msx, bnothi_msx): Likewise.\n+\t* config/h8300/predicate.md (bit_register_indirect_operand): New.\n+\n \t* config/h8300/h8300.h (OK_FOR_U): Support 'U' constraint for H8300SX.\n \n \t* config/h8300/h8300.md (movqi_h8sx, movhi_h8sx, movsi_h8sx, "}, {"sha": "e53f3077a7e64fb715db9c30ab7c4686320c5116", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6b820c5d3f39cf1ae01dfd6e523990e199d7e5/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6b820c5d3f39cf1ae01dfd6e523990e199d7e5/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=0f6b820c5d3f39cf1ae01dfd6e523990e199d7e5", "patch": "@@ -1468,12 +1468,20 @@ print_operand (FILE *file, rtx x, int code)\n \tgoto def;\n       break;\n     case 'V':\n-      bitint = exact_log2 (INTVAL (x) & 0xff);\n+      bitint = (INTVAL (x) & 0xffff);\n+      if ((exact_log2 ((bitint >> 8) & 0xff)) == -1)\n+\tbitint = exact_log2 (bitint & 0xff);\n+      else\n+        bitint = exact_log2 ((bitint >> 8) & 0xff);\t      \n       gcc_assert (bitint >= 0);\n       fprintf (file, \"#%d\", bitint);\n       break;\n     case 'W':\n-      bitint = exact_log2 ((~INTVAL (x)) & 0xff);\n+      bitint = ((~INTVAL (x)) & 0xffff);\n+      if ((exact_log2 ((bitint >> 8) & 0xff)) == -1 )\n+\tbitint = exact_log2 (bitint & 0xff);\n+      else\n+\tbitint = (exact_log2 ((bitint >> 8) & 0xff));      \n       gcc_assert (bitint >= 0);\n       fprintf (file, \"#%d\", bitint);\n       break;"}, {"sha": "f77dfa31407c850af7ca6ca94f4a9672f17d8b07", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6b820c5d3f39cf1ae01dfd6e523990e199d7e5/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6b820c5d3f39cf1ae01dfd6e523990e199d7e5/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=0f6b820c5d3f39cf1ae01dfd6e523990e199d7e5", "patch": "@@ -819,15 +819,25 @@ struct cum_arg\n   ((STR)[1] == 'U' ? 2\t\t\t\t\t\\\n    : 0)\n \n-/* We don't have any constraint starting with Y yet, but before\n-   someone uses it for a one-letter constraint and we're left without\n-   any upper-case constraints left, we reserve it for extensions\n-   here.  */\n-#define OK_FOR_Y(OP, STR)\t\t\t\t\\\n-  (0)\n+/* Multi-letter constraints starting with Y are to be used for operands\n+   that are constant immediates and have single 1 or 0 in their binary\n+   representation.  */\n+\n+#define OK_FOR_Y2(OP)                                   \\\n+  ((GET_CODE (OP) == CONST_INT) && (exact_log2 (INTVAL (OP) & 0xff) != -1))\n+\n+#define OK_FOR_Y0(OP)                                   \\\n+  ((GET_CODE (OP) == CONST_INT) && (exact_log2 (~INTVAL (OP) & 0xff) != -1))\n+\n+#define OK_FOR_Y(OP, STR)                               \\\n+  ((STR)[1] == '2' ? OK_FOR_Y2 (OP)                     \\\n+   : (STR)[1] == '0' ? OK_FOR_Y0 (OP)\t\\\n+   : 0)\n \n #define CONSTRAINT_LEN_FOR_Y(STR)\t\t\t\\\n-  (0)\n+  ((STR)[1] == '2' ? 2                                  \\\n+   : (STR)[1] == '0' ? 2\t\t\\\n+   : 0)\n \n #define OK_FOR_Z(OP)\t\t\t\t\t\\\n   (TARGET_H8300SX\t\t\t\t\t\\"}, {"sha": "513ad4c3969a82c194d87d618e51e036064175a6", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6b820c5d3f39cf1ae01dfd6e523990e199d7e5/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6b820c5d3f39cf1ae01dfd6e523990e199d7e5/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=0f6b820c5d3f39cf1ae01dfd6e523990e199d7e5", "patch": "@@ -1762,7 +1762,34 @@\n ;; ----------------------------------------------------------------------\n ;; AND INSTRUCTIONS\n ;; ----------------------------------------------------------------------\n+(define_insn \"bclrqi_msx\"\n+  [(set (match_operand:QI 0 \"bit_register_indirect_operand\" \"=WU\")\n+\t(and:QI (match_operand:QI 1 \"bit_register_indirect_operand\" \"%0\")\n+\t\t(match_operand:QI 2 \"single_zero_operand\" \"Y0\")))]\n+  \"TARGET_H8300SX\"\n+  \"bclr\\\\t%W2,%0\"\n+  [(set_attr \"length\" \"8\")])\n+\n+(define_split\n+  [(set (match_operand:HI 0 \"bit_register_indirect_operand\" \"=U\")\n+\t(and:HI (match_operand:HI 1 \"bit_register_indirect_operand\" \"%0\")\n+\t\t(match_operand:HI 2 \"single_zero_operand\" \"Y0\")))]\n+  \"TARGET_H8300SX\"\n+  [(set (match_dup 0)\n+\t(and:QI (match_dup 1)\n+\t\t(match_dup 2)))]\n+{\n+  operands[0] = adjust_address (operands[0], QImode, 1);\n+  operands[1] = adjust_address (operands[1], QImode, 1);\n+})\n \n+(define_insn \"bclrhi_msx\"\n+  [(set (match_operand:HI 0 \"bit_register_indirect_operand\" \"=m\")\n+\t(and:HI (match_operand:HI 1 \"bit_register_indirect_operand\" \"%0\")\n+\t\t(match_operand:HI 2 \"single_zero_operand\" \"Y0\")))]\n+  \"TARGET_H8300SX\"\n+  \"bclr\\\\t%W2,%0\"\n+  [(set_attr \"length\" \"8\")])\n (define_insn \"*andqi3_2\"\n   [(set (match_operand:QI 0 \"bit_operand\" \"=rQ,r\")\n \t(and:QI (match_operand:QI 1 \"bit_operand\" \"%0,WU\")\n@@ -1866,6 +1893,34 @@\n ;; ----------------------------------------------------------------------\n ;; OR INSTRUCTIONS\n ;; ----------------------------------------------------------------------\n+(define_insn \"bsetqi_msx\"\n+  [(set (match_operand:QI 0 \"bit_register_indirect_operand\" \"=WU\")\n+\t(ior:QI (match_operand:QI 1 \"bit_register_indirect_operand\" \"%0\")\n+\t\t(match_operand:QI 2 \"single_one_operand\" \"Y2\")))]\n+  \"TARGET_H8300SX\" \n+  \"bset\\\\t%V2,%0\"\n+  [(set_attr \"length\" \"8\")])\n+\n+(define_split\n+  [(set (match_operand:HI 0 \"bit_register_indirect_operand\" \"=U\")\n+\t(ior:HI (match_operand:HI 1 \"bit_register_indirect_operand\" \"%0\")\n+\t\t(match_operand:HI 2 \"single_one_operand\" \"Y2\")))]\n+  \"TARGET_H8300SX\"\n+  [(set (match_dup 0)\n+\t(ior:QI (match_dup 1)\n+\t\t(match_dup 2)))]\n+{\n+  operands[0] = adjust_address (operands[0], QImode, 1);\n+  operands[1] = adjust_address (operands[1], QImode, 1);\n+})\n+\n+(define_insn \"bsethi_msx\"\n+  [(set (match_operand:HI 0 \"bit_register_indirect_operand\" \"=m\")\n+\t(ior:HI (match_operand:HI 1 \"bit_register_indirect_operand\" \"%0\")\n+\t\t(match_operand:HI 2 \"single_one_operand\" \"Y2\")))]\n+  \"TARGET_H8300SX\"\n+  \"bset\\\\t%V2,%0\"\n+  [(set_attr \"length\" \"8\")])\n \n (define_insn \"iorqi3_1\"\n   [(set (match_operand:QI 0 \"bit_operand\" \"=rQ,U\")\n@@ -1904,6 +1959,34 @@\n ;; ----------------------------------------------------------------------\n ;; XOR INSTRUCTIONS\n ;; ----------------------------------------------------------------------\n+(define_insn \"bnotqi_msx\"\n+  [(set (match_operand:QI 0 \"bit_register_indirect_operand\" \"=WU\")\n+\t(xor:QI (match_operand:QI 1 \"bit_register_indirect_operand\" \"%0\")\n+\t\t(match_operand:QI 2 \"single_one_operand\" \"Y2\")))]\n+  \"TARGET_H8300SX\"\n+  \"bnot\\\\t%V2,%0\"\n+  [(set_attr \"length\" \"8\")])\n+\n+(define_split\n+  [(set (match_operand:HI 0 \"bit_register_indirect_operand\" \"=U\")\n+\t(xor:HI (match_operand:HI 1 \"bit_register_indirect_operand\" \"%0\")\n+\t\t(match_operand:HI 2 \"single_one_operand\" \"Y2\")))]\n+  \"TARGET_H8300SX\"\n+  [(set (match_dup 0)\n+\t(xor:QI (match_dup 1)\n+\t\t(match_dup 2)))]\n+{\n+  operands[0] = adjust_address (operands[0], QImode, 1);\n+  operands[1] = adjust_address (operands[1], QImode, 1);\n+})\n+\n+(define_insn \"bnothi_msx\"\n+  [(set (match_operand:HI 0 \"bit_register_indirect_operand\" \"=m\")\n+\t(xor:HI (match_operand:HI 1 \"bit_register_indirect_operand\" \"%0\")\n+\t\t(match_operand:HI 2 \"single_one_operand\" \"Y2\")))]\n+  \"TARGET_H8300SX\"\n+  \"bnot\\\\t%V2,%0\"\n+  [(set_attr \"length\" \"8\")])\n \n (define_insn \"xorqi3_1\"\n   [(set (match_operand:QI 0 \"bit_operand\" \"=r,U\")"}, {"sha": "c4ea2d8cb754dd7bd4cf3b1eca5f5f9e0ea2b0cc", "filename": "gcc/config/h8300/predicates.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6b820c5d3f39cf1ae01dfd6e523990e199d7e5/gcc%2Fconfig%2Fh8300%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6b820c5d3f39cf1ae01dfd6e523990e199d7e5/gcc%2Fconfig%2Fh8300%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fpredicates.md?ref=0f6b820c5d3f39cf1ae01dfd6e523990e199d7e5", "patch": "@@ -356,6 +356,17 @@\n \t  && OK_FOR_U (op));\n })\n \n+;; Return nonzero if OP is indirect register or constant memory\n+;; suitable for bit manipulation insns.\n+\n+(define_predicate \"bit_register_indirect_operand\"\n+  (match_code \"mem\")\n+{\n+  return (GET_CODE (op) == MEM\n+          && (GET_CODE (XEXP (op, 0)) == REG\n+              || GET_CODE (XEXP (op, 0)) == CONST_INT));\n+})\n+\n ;; Return nonzero if X is a stack pointer.\n \n (define_predicate \"stack_pointer_operand\""}]}