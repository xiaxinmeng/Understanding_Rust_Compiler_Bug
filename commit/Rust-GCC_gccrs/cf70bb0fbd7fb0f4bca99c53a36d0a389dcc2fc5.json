{"sha": "cf70bb0fbd7fb0f4bca99c53a36d0a389dcc2fc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y3MGJiMGZiZDdmYjBmNGJjYTk5YzUzYTM2ZDBhMzg5ZGNjMmZjNQ==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2020-02-27T03:51:06Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2020-02-27T03:51:06Z"}, "message": "Document negative form of warning options enabled by default [PR90467].\n\n2020-02-26  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tPR c++/90467\n\n\tgcc/\n\t* doc/invoke.texi (Option Summary): Re-alphabetize warnings in\n\tC++ Language Options, Warning Options, and Static Analyzer\n\tOptions lists.  Document negative form of options enabled by\n\tdefault.  Move some things around to more accurately sort\n\twarnings by category.\n\t(C++ Dialect Options, Warning Options, Static Analyzer\n\tOptions): Document negative form of options when enabled by\n\tdefault.  Move some things around to more accurately sort\n\twarnings by category.  Add some missing index entries.\n\tLight copy-editing.", "tree": {"sha": "d06cc6eff7a37ba9f83cd36b2544421fc643bd5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d06cc6eff7a37ba9f83cd36b2544421fc643bd5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf70bb0fbd7fb0f4bca99c53a36d0a389dcc2fc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf70bb0fbd7fb0f4bca99c53a36d0a389dcc2fc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf70bb0fbd7fb0f4bca99c53a36d0a389dcc2fc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf70bb0fbd7fb0f4bca99c53a36d0a389dcc2fc5/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1231f71f96a4e461f94394b4fb8cfa25587fbd96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1231f71f96a4e461f94394b4fb8cfa25587fbd96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1231f71f96a4e461f94394b4fb8cfa25587fbd96"}], "stats": {"total": 1683, "additions": 859, "deletions": 824}, "files": [{"sha": "d489f148fc0dba7dd3ad31687fc84ff94dde23dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf70bb0fbd7fb0f4bca99c53a36d0a389dcc2fc5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf70bb0fbd7fb0f4bca99c53a36d0a389dcc2fc5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf70bb0fbd7fb0f4bca99c53a36d0a389dcc2fc5", "patch": "@@ -1,3 +1,18 @@\n+2020-02-26  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR c++/90467\n+\n+\t* doc/invoke.texi (Option Summary): Re-alphabetize warnings in\n+\tC++ Language Options, Warning Options, and Static Analyzer\n+\tOptions lists.  Document negative form of options enabled by\n+\tdefault.  Move some things around to more accurately sort\n+\twarnings by category.\n+\t(C++ Dialect Options, Warning Options, Static Analyzer\n+\tOptions): Document negative form of options when enabled by\n+\tdefault.  Move some things around to more accurately sort\n+\twarnings by category.  Add some missing index entries.\n+\tLight copy-editing.\n+\n 2020-02-26  Carl Love  <cel@us.ibm.com>\n \n \tPR target/91276"}, {"sha": "e70ece6d492f6e94a6576d97509e40ff47bc461d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 844, "deletions": 824, "changes": 1668, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf70bb0fbd7fb0f4bca99c53a36d0a389dcc2fc5/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf70bb0fbd7fb0f4bca99c53a36d0a389dcc2fc5/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=cf70bb0fbd7fb0f4bca99c53a36d0a389dcc2fc5", "patch": "@@ -231,20 +231,26 @@ in the following sections.\n -fvisibility-inlines-hidden @gol\n -fvisibility-ms-compat @gol\n -fext-numeric-literals @gol\n--Wabi=@var{n}  -Wabi-tag  -Wcomma-subscript  -Wconversion-null @gol\n--Wctor-dtor-privacy @gol\n+-Wabi-tag  -Wcatch-value  -Wcatch-value=@var{n} @gol\n+-Wno-class-conversion  -Wclass-memaccess @gol\n+-Wcomma-subscript  -Wconditionally-supported @gol\n+-Wno-conversion-null  -Wctor-dtor-privacy  -Wno-delete-incomplete @gol\n -Wdelete-non-virtual-dtor  -Wdeprecated-copy  -Wdeprecated-copy-dtor @gol\n--Wliteral-suffix -Wmismatched-tags @gol\n--Wmultiple-inheritance  -Wno-init-list-lifetime @gol\n--Wnamespaces  -Wnarrowing @gol\n--Wpessimizing-move  -Wredundant-move -Wredundant-tags @gol\n--Wnoexcept  -Wnoexcept-type  -Wclass-memaccess @gol\n--Wnon-virtual-dtor  -Wreorder  -Wregister @gol\n--Weffc++  -Wstrict-null-sentinel  -Wtemplates @gol\n+-Weffc++  -Wextra-semi  -Wno-inaccessible-base @gol\n+-Wno-inherited-variadic-ctor  -Wno-init-list-lifetime @gol\n+-Wno-invalid-offsetof  -Wno-literal-suffix  -Wmismatched-tags @gol\n+-Wmultiple-inheritance  -Wnamespaces  -Wnarrowing @gol\n+-Wnoexcept  -Wnoexcept-type  -Wnon-virtual-dtor @gol\n+-Wpessimizing-move  -Wno-placement-new  -Wplacement-new=@var{n} @gol\n+-Wredundant-move -Wredundant-tags @gol\n+-Wreorder  -Wregister @gol\n+-Wstrict-null-sentinel  -Wno-subobject-linkage  -Wtemplates @gol\n -Wno-non-template-friend  -Wold-style-cast @gol\n--Woverloaded-virtual  -Wno-pmf-conversions @gol\n--Wno-class-conversion  -Wno-terminate @gol\n--Wsign-promo  -Wvirtual-inheritance  -Wvolatile}\n+-Woverloaded-virtual  -Wno-pmf-conversions -Wsign-promo @gol\n+-Wsized-deallocation  -Wsuggest-final-methods @gol\n+-Wsuggest-final-types  -Wsuggest-override  @gol\n+-Wno-terminate  -Wuseless-cast  -Wvirtual-inheritance  @gol\n+-Wno-virtual-move-assign  -Wvolatile  -Wzero-as-null-pointer-constant}\n \n @item Objective-C and Objective-C++ Language Options\n @xref{Objective-C and Objective-C++ Dialect Options,,Options Controlling\n@@ -264,7 +270,7 @@ Objective-C and Objective-C++ Dialects}.\n -freplace-objc-classes @gol\n -fzero-link @gol\n -gen-decls @gol\n--Wassign-intercept @gol\n+-Wassign-intercept  -Wno-property-assign-default @gol\n -Wno-protocol  -Wselector @gol\n -Wstrict-selector-match @gol\n -Wundeclared-selector}\n@@ -288,131 +294,96 @@ Objective-C and Objective-C++ Dialects}.\n \n @item Warning Options\n @xref{Warning Options,,Options to Request or Suppress Warnings}.\n-@gccoptlist{-fanalyzer -fsyntax-only  -fmax-errors=@var{n}  -Wpedantic @gol\n+@gccoptlist{-fsyntax-only  -fmax-errors=@var{n}  -Wpedantic @gol\n -pedantic-errors @gol\n--w  -Wextra  -Wall  -Waddress  -Waddress-of-packed-member @gol\n--Waggregate-return  -Waligned-new @gol\n--Walloc-zero  -Walloc-size-larger-than=@var{byte-size} @gol\n+-w  -Wextra  -Wall  -Wabi=@var{n} @gol\n+-Waddress  -Wno-address-of-packed-member  -Waggregate-return @gol\n+-Walloc-size-larger-than=@var{byte-size}  -Walloc-zero @gol\n -Walloca  -Walloca-larger-than=@var{byte-size} @gol\n -Wno-aggressive-loop-optimizations @gol\n--Wno-analyzer-double-fclose @gol\n--Wno-analyzer-double-free @gol\n--Wno-analyzer-exposure-through-output-file @gol\n--Wno-analyzer-file-leak @gol\n--Wno-analyzer-free-of-non-heap @gol\n--Wno-analyzer-malloc-leak @gol\n--Wno-analyzer-possible-null-argument @gol\n--Wno-analyzer-possible-null-dereference @gol\n--Wno-analyzer-null-argument @gol\n--Wno-analyzer-null-dereference @gol\n--Wno-analyzer-stale-setjmp-buffer @gol\n--Wno-analyzer-tainted-array-index @gol\n--Wno-analyzer-unsafe-call-within-signal-handler @gol\n--Wno-analyzer-use-after-free @gol\n--Wno-analyzer-use-of-pointer-in-stale-stack-frame @gol\n--Wno-analyzer-use-of-uninitialized-value @gol\n--Wanalyzer-too-complex @gol\n -Warith-conversion @gol\n -Warray-bounds  -Warray-bounds=@var{n} @gol\n--Wno-attributes  -Wattribute-alias=@var{n}  @gol\n--Wbool-compare  -Wbool-operation @gol\n+-Wno-attributes  -Wattribute-alias=@var{n} -Wno-attribute-alias @gol\n+-Wno-attribute-warning  -Wbool-compare  -Wbool-operation @gol\n -Wno-builtin-declaration-mismatch @gol\n -Wno-builtin-macro-redefined  -Wc90-c99-compat  -Wc99-c11-compat @gol\n -Wc11-c2x-compat @gol\n -Wc++-compat  -Wc++11-compat  -Wc++14-compat  -Wc++17-compat  @gol\n -Wc++20-compat  @gol\n -Wcast-align  -Wcast-align=strict  -Wcast-function-type  -Wcast-qual  @gol\n--Wchar-subscripts  -Wcatch-value  -Wcatch-value=@var{n} @gol\n--Wclobbered  -Wcomment  -Wconditionally-supported @gol\n--Wconversion  -Wcoverage-mismatch  -Wno-cpp  -Wdangling-else  -Wdate-time @gol\n--Wdelete-incomplete @gol\n--Wno-attribute-warning @gol\n+-Wchar-subscripts @gol\n+-Wclobbered  -Wcomment @gol\n+-Wconversion  -Wno-coverage-mismatch  -Wno-cpp @gol\n+-Wdangling-else  -Wdate-time @gol\n -Wno-deprecated  -Wno-deprecated-declarations  -Wno-designated-init @gol\n -Wdisabled-optimization @gol\n--Wno-discarded-qualifiers  -Wno-discarded-array-qualifiers @gol\n+-Wno-discarded-array-qualifiers  -Wno-discarded-qualifiers @gol\n -Wno-div-by-zero  -Wdouble-promotion @gol\n -Wduplicated-branches  -Wduplicated-cond @gol\n--Wempty-body  -Wenum-compare  -Wenum-conversion @gol\n--Wno-endif-labels  -Wexpansion-to-defined @gol\n--Werror  -Werror=*  -Wextra-semi  -Wfatal-errors @gol\n--Wfloat-equal  -Wformat  -Wformat=2 @gol\n+-Wempty-body  -Wno-endif-labels  -Wenum-compare  -Wenum-conversion @gol\n+-Werror  -Werror=*  -Wexpansion-to-defined  -Wfatal-errors @gol\n+-Wfloat-conversion  -Wfloat-equal  -Wformat  -Wformat=2 @gol\n -Wno-format-contains-nul  -Wno-format-extra-args  @gol\n -Wformat-nonliteral  -Wformat-overflow=@var{n} @gol\n -Wformat-security  -Wformat-signedness  -Wformat-truncation=@var{n} @gol\n -Wformat-y2k  -Wframe-address @gol\n -Wframe-larger-than=@var{byte-size}  -Wno-free-nonheap-object @gol\n--Wjump-misses-init @gol\n--Whsa  -Wif-not-aligned @gol\n--Wignored-qualifiers  -Wignored-attributes  -Wincompatible-pointer-types @gol\n+-Wno-hsa  -Wno-if-not-aligned  -Wno-ignored-attributes @gol\n+-Wignored-qualifiers  -Wno-incompatible-pointer-types @gol\n -Wimplicit  -Wimplicit-fallthrough  -Wimplicit-fallthrough=@var{n} @gol\n--Wimplicit-function-declaration  -Wimplicit-int @gol\n--Winaccessible-base @gol\n+-Wno-implicit-function-declaration  -Wno-implicit-int @gol\n -Winit-self  -Winline  -Wno-int-conversion  -Wint-in-bool-context @gol\n--Wno-int-to-pointer-cast  -Winvalid-memory-model  -Wno-invalid-offsetof @gol\n--Wzero-length-bounds @gol\n--Winvalid-pch  -Wlarger-than=@var{byte-size} @gol\n--Wlogical-op  -Wlogical-not-parentheses  -Wlong-long @gol\n--Wmain  -Wmaybe-uninitialized  -Wmemset-elt-size  -Wmemset-transposed-args @gol\n+-Wno-int-to-pointer-cast  -Wno-invalid-memory-model @gol\n+-Winvalid-pch  -Wjump-misses-init  -Wlarger-than=@var{byte-size} @gol\n+-Wlogical-not-parentheses  -Wlogical-op  -Wlong-long @gol\n+-Wno-lto-type-mismatch -Wmain  -Wmaybe-uninitialized @gol\n+-Wmemset-elt-size  -Wmemset-transposed-args @gol\n -Wmisleading-indentation  -Wmissing-attributes  -Wmissing-braces @gol\n -Wmissing-field-initializers  -Wmissing-format-attribute @gol\n--Wmissing-include-dirs  -Wmissing-noreturn  -Wmissing-profile @gol\n+-Wmissing-include-dirs  -Wmissing-noreturn  -Wno-missing-profile @gol\n -Wno-multichar  -Wmultistatement-macros  -Wnonnull  -Wnonnull-compare @gol\n -Wnormalized=@r{[}none@r{|}id@r{|}nfc@r{|}nfkc@r{]} @gol\n--Wnull-dereference  -Wodr  -Wno-overflow  -Wopenmp-simd  @gol\n--Woverride-init-side-effects  -Woverlength-strings @gol\n--Wpacked  -Wpacked-bitfield-compat -Wpacked-not-aligned  -Wpadded @gol\n+-Wnull-dereference  -Wno-odr  -Wopenmp-simd  @gol\n+-Wno-overflow  -Woverlength-strings  -Wno-override-init-side-effects @gol\n+-Wpacked  -Wno-packed-bitfield-compat  -Wpacked-not-aligned  -Wpadded @gol\n -Wparentheses  -Wno-pedantic-ms-format @gol\n--Wplacement-new  -Wplacement-new=@var{n} @gol\n--Wpointer-arith  -Wpointer-compare  -Wno-pointer-to-int-cast @gol\n+-Wpointer-arith  -Wno-pointer-compare  -Wno-pointer-to-int-cast @gol\n -Wno-pragmas  -Wno-prio-ctor-dtor  -Wredundant-decls @gol\n--Wrestrict  -Wno-return-local-addr @gol\n--Wreturn-type  -Wsequence-point  -Wshadow  -Wno-shadow-ivar @gol\n--Wshadow=global  -Wshadow=local  -Wshadow=compatible-local @gol\n--Wshift-overflow  -Wshift-overflow=@var{n} @gol\n--Wshift-count-negative  -Wshift-count-overflow  -Wshift-negative-value @gol\n--Wsign-compare  -Wsign-conversion  -Wfloat-conversion @gol\n--Wno-scalar-storage-order  -Wsizeof-pointer-div @gol\n--Wsizeof-pointer-memaccess  -Wsizeof-array-argument @gol\n+-Wrestrict  -Wno-return-local-addr  -Wreturn-type @gol\n+-Wno-scalar-storage-order  -Wsequence-point @gol\n+-Wshadow  -Wshadow=global  -Wshadow=local  -Wshadow=compatible-local @gol\n+-Wno-shadow-ivar @gol\n+-Wno-shift-count-negative  -Wno-shift-count-overflow  -Wshift-negative-value @gol\n+-Wno-shift-overflow  -Wshift-overflow=@var{n} @gol\n+-Wsign-compare  -Wsign-conversion @gol\n+-Wno-sizeof-array-argument @gol\n+-Wsizeof-pointer-div  -Wsizeof-pointer-memaccess @gol\n -Wstack-protector  -Wstack-usage=@var{byte-size}  -Wstrict-aliasing @gol\n -Wstrict-aliasing=n  -Wstrict-overflow  -Wstrict-overflow=@var{n} @gol\n -Wstring-compare @gol\n--Wstringop-overflow=@var{n}  -Wstringop-truncation  -Wsubobject-linkage @gol\n+-Wstringop-overflow=@var{n}  -Wno-stringop-truncation @gol\n -Wsuggest-attribute=@r{[}pure@r{|}const@r{|}noreturn@r{|}format@r{|}malloc@r{]} @gol\n--Wsuggest-final-types @gol  -Wsuggest-final-methods  -Wsuggest-override @gol\n--Wswitch  -Wswitch-bool  -Wswitch-default  -Wswitch-enum @gol\n--Wswitch-unreachable  -Wsync-nand @gol\n+-Wswitch  -Wno-switch-bool  -Wswitch-default  -Wswitch-enum @gol\n+-Wno-switch-outside-range  -Wno-switch-unreachable  -Wsync-nand @gol\n -Wsystem-headers  -Wtautological-compare  -Wtrampolines  -Wtrigraphs @gol\n -Wtype-limits  -Wundef @gol\n -Wuninitialized  -Wunknown-pragmas @gol\n--Wunsuffixed-float-constants  -Wunused  -Wunused-function @gol\n--Wunused-label  -Wunused-local-typedefs  -Wunused-macros @gol\n+-Wunsuffixed-float-constants  -Wunused @gol\n+-Wunused-but-set-parameter  -Wunused-but-set-variable @gol\n+-Wunused-const-variable  -Wunused-const-variable=@var{n} @gol\n+-Wunused-function  -Wunused-label  -Wunused-local-typedefs @gol\n+-Wunused-macros @gol\n -Wunused-parameter  -Wno-unused-result @gol\n -Wunused-value  -Wunused-variable @gol\n--Wunused-const-variable  -Wunused-const-variable=@var{n} @gol\n--Wunused-but-set-parameter  -Wunused-but-set-variable @gol\n--Wuseless-cast  -Wvariadic-macros  -Wvector-operation-performance @gol\n--Wvla  -Wvla-larger-than=@var{byte-size}  -Wvolatile-register-var @gol\n--Wwrite-strings @gol\n--Wzero-as-null-pointer-constant}\n+-Wno-varargs  -Wvariadic-macros @gol\n+-Wvector-operation-performance @gol\n+-Wvla  -Wvla-larger-than=@var{byte-size}  -Wno-vla-larger-than @gol\n+-Wvolatile-register-var  -Wwrite-strings @gol\n+-Wzero-length-bounds}\n \n @item Static Analyzer Options\n-@gccoptlist{-Wanalyzer-double-fclose @gol\n--Wanalyzer-double-free @gol\n--Wanalyzer-exposure-through-output-file @gol\n--Wanalyzer-file-leak @gol\n--Wanalyzer-free-of-non-heap @gol\n--Wanalyzer-malloc-leak @gol\n--Wanalyzer-null-argument @gol\n--Wanalyzer-null-dereference @gol\n--Wanalyzer-possible-null-argument @gol\n--Wanalyzer-possible-null-dereference @gol\n--Wanalyzer-stale-setjmp-buffer @gol\n--Wanalyzer-tainted-array-index @gol\n--Wanalyzer-unsafe-call-within-signal-handler @gol\n--Wanalyzer-use-after-free @gol\n--Wanalyzer-use-of-pointer-in-stale-stack-frame @gol\n--Wanalyzer-use-of-uninitialized-value @gol\n--Wanalyzer-too-complex  @gol\n+@gccoptlist{\n+-fanalyzer @gol\n -fanalyzer-call-summaries @gol\n -fanalyzer-checker=@var{name} @gol\n -fanalyzer-fine-grained @gol\n@@ -431,6 +402,23 @@ Objective-C and Objective-C++ Dialects}.\n -fdump-analyzer-exploded-nodes-3 @gol\n -fdump-analyzer-state-purge @gol\n -fdump-analyzer-supergraph @gol\n+-Wno-analyzer-double-fclose @gol\n+-Wno-analyzer-double-free @gol\n+-Wno-analyzer-exposure-through-output-file @gol\n+-Wno-analyzer-file-leak @gol\n+-Wno-analyzer-free-of-non-heap @gol\n+-Wno-analyzer-malloc-leak @gol\n+-Wno-analyzer-null-argument @gol\n+-Wno-analyzer-null-dereference @gol\n+-Wno-analyzer-possible-null-argument @gol\n+-Wno-analyzer-possible-null-dereference @gol\n+-Wno-analyzer-stale-setjmp-buffer @gol\n+-Wno-analyzer-tainted-array-index @gol\n+-Wanalyzer-too-complex @gol\n+-Wno-analyzer-unsafe-call-within-signal-handler @gol\n+-Wno-analyzer-use-after-free @gol\n+-Wno-analyzer-use-of-pointer-in-stale-stack-frame @gol\n+-Wno-analyzer-use-of-uninitialized-value @gol\n }\n \n @item C and Objective-C-only Warning Options\n@@ -2943,143 +2931,29 @@ option exists only for testing, and should not be used by end-users;\n it results in inferior code and has no benefits.  This option may\n be removed in a future release of G++.\n \n+@item -fext-numeric-literals @r{(C++ and Objective-C++ only)}\n+@opindex fext-numeric-literals\n+@opindex fno-ext-numeric-literals\n+Accept imaginary, fixed-point, or machine-defined\n+literal number suffixes as GNU extensions.\n+When this option is turned off these suffixes are treated\n+as C++11 user-defined literal numeric suffixes.\n+This is on by default for all pre-C++11 dialects and all GNU dialects:\n+@option{-std=c++98}, @option{-std=gnu++98}, @option{-std=gnu++11},\n+@option{-std=gnu++14}.\n+This option is off by default\n+for ISO C++11 onwards (@option{-std=c++11}, ...).\n+\n @item -nostdinc++\n @opindex nostdinc++\n Do not search for header files in the standard directories specific to\n C++, but do still search the other standard directories.  (This option\n is used when building the C++ library.)\n @end table\n \n-In addition, these optimization, warning, and code generation options\n-have meanings only for C++ programs:\n+In addition, these warning options have meanings only for C++ programs:\n \n @table @gcctabopt\n-@item -Wabi @r{(C, Objective-C, C++ and Objective-C++ only)}\n-@opindex Wabi\n-@opindex Wno-abi\n-Warn when G++ it generates code that is probably not compatible with\n-the vendor-neutral C++ ABI@.  Since G++ now defaults to updating the\n-ABI with each major release, normally @option{-Wabi} will warn only if\n-there is a check added later in a release series for an ABI issue\n-discovered since the initial release.  @option{-Wabi} will warn about\n-more things if an older ABI version is selected (with\n-@option{-fabi-version=@var{n}}).\n-\n-@option{-Wabi} can also be used with an explicit version number to\n-warn about compatibility with a particular @option{-fabi-version}\n-level, e.g.@: @option{-Wabi=2} to warn about changes relative to\n-@option{-fabi-version=2}.\n-\n-If an explicit version number is provided and\n-@option{-fabi-compat-version} is not specified, the version number\n-from this option is used for compatibility aliases.  If no explicit\n-version number is provided with this option, but\n-@option{-fabi-compat-version} is specified, that version number is\n-used for ABI warnings.\n-\n-Although an effort has been made to warn about\n-all such cases, there are probably some cases that are not warned about,\n-even though G++ is generating incompatible code.  There may also be\n-cases where warnings are emitted even though the code that is generated\n-is compatible.\n-\n-You should rewrite your code to avoid these warnings if you are\n-concerned about the fact that code generated by G++ may not be binary\n-compatible with code generated by other compilers.\n-\n-Known incompatibilities in @option{-fabi-version=2} (which was the\n-default from GCC 3.4 to 4.9) include:\n-\n-@itemize @bullet\n-\n-@item\n-A template with a non-type template parameter of reference type was\n-mangled incorrectly:\n-@smallexample\n-extern int N;\n-template <int &> struct S @{@};\n-void n (S<N>) @{2@}\n-@end smallexample\n-\n-This was fixed in @option{-fabi-version=3}.\n-\n-@item\n-SIMD vector types declared using @code{__attribute ((vector_size))} were\n-mangled in a non-standard way that does not allow for overloading of\n-functions taking vectors of different sizes.\n-\n-The mangling was changed in @option{-fabi-version=4}.\n-\n-@item\n-@code{__attribute ((const))} and @code{noreturn} were mangled as type\n-qualifiers, and @code{decltype} of a plain declaration was folded away.\n-\n-These mangling issues were fixed in @option{-fabi-version=5}.\n-\n-@item\n-Scoped enumerators passed as arguments to a variadic function are\n-promoted like unscoped enumerators, causing @code{va_arg} to complain.\n-On most targets this does not actually affect the parameter passing\n-ABI, as there is no way to pass an argument smaller than @code{int}.\n-\n-Also, the ABI changed the mangling of template argument packs,\n-@code{const_cast}, @code{static_cast}, prefix increment/decrement, and\n-a class scope function used as a template argument.\n-\n-These issues were corrected in @option{-fabi-version=6}.\n-\n-@item\n-Lambdas in default argument scope were mangled incorrectly, and the\n-ABI changed the mangling of @code{nullptr_t}.\n-\n-These issues were corrected in @option{-fabi-version=7}.\n-\n-@item\n-When mangling a function type with function-cv-qualifiers, the\n-un-qualified function type was incorrectly treated as a substitution\n-candidate.\n-\n-This was fixed in @option{-fabi-version=8}, the default for GCC 5.1.\n-\n-@item\n-@code{decltype(nullptr)} incorrectly had an alignment of 1, leading to\n-unaligned accesses.  Note that this did not affect the ABI of a\n-function with a @code{nullptr_t} parameter, as parameters have a\n-minimum alignment.\n-\n-This was fixed in @option{-fabi-version=9}, the default for GCC 5.2.\n-\n-@item\n-Target-specific attributes that affect the identity of a type, such as\n-ia32 calling conventions on a function type (stdcall, regparm, etc.),\n-did not affect the mangled name, leading to name collisions when\n-function pointers were used as template arguments.\n-\n-This was fixed in @option{-fabi-version=10}, the default for GCC 6.1.\n-\n-@end itemize\n-\n-It also warns about psABI-related changes.  The known psABI changes at this\n-point include:\n-\n-@itemize @bullet\n-\n-@item\n-For SysV/x86-64, unions with @code{long double} members are \n-passed in memory as specified in psABI.  For example:\n-\n-@smallexample\n-union U @{\n-  long double ld;\n-  int i;\n-@};\n-@end smallexample\n-\n-@noindent\n-@code{union U} is always passed in memory.\n-\n-@end itemize\n-\n @item -Wabi-tag @r{(C++ and Objective-C++ only)}\n @opindex Wabi-tag\n @opindex Wabi-tag\n@@ -3178,14 +3052,14 @@ the variable declaration statement.\n \n @end itemize\n \n-@item -Wliteral-suffix @r{(C++ and Objective-C++ only)}\n+@item -Wno-literal-suffix @r{(C++ and Objective-C++ only)}\n @opindex Wliteral-suffix\n @opindex Wno-literal-suffix\n-Warn when a string or character literal is followed by a ud-suffix which does\n-not begin with an underscore.  As a conforming extension, GCC treats such\n-suffixes as separate preprocessing tokens in order to maintain backwards\n-compatibility with code that uses formatting macros from @code{<inttypes.h>}.\n-For example:\n+Do not warn when a string or character literal is followed by a\n+ud-suffix which does not begin with an underscore.  As a conforming\n+extension, GCC treats such suffixes as separate preprocessing tokens\n+in order to maintain backwards compatibility with code that uses\n+formatting macros from @code{<inttypes.h>}.  For example:\n \n @smallexample\n #define __STDC_FORMAT_MACROS\n@@ -3200,20 +3074,12 @@ int main() @{\n \n In this case, @code{PRId64} is treated as a separate preprocessing token.\n \n-Additionally, warn when a user-defined literal operator is declared with\n-a literal suffix identifier that doesn't begin with an underscore. Literal\n-suffix identifiers that don't begin with an underscore are reserved for\n-future standardization.\n-\n-This warning is enabled by default.\n-\n-@item -Wlto-type-mismatch\n-@opindex Wlto-type-mismatch\n-@opindex Wno-lto-type-mismatch\n+This option also controls warnings when a user-defined literal\n+operator is declared with a literal suffix identifier that doesn't\n+begin with an underscore. Literal suffix identifiers that don't begin\n+with an underscore are reserved for future standardization.\n \n-During the link-time optimization warn about type mismatches in\n-global declarations from different compilation units.\n-Requires @option{-flto} to be enabled.  Enabled by default.\n+These warnings are enabled by default.\n \n @item -Wno-narrowing @r{(C++ and Objective-C++ only)}\n @opindex Wnarrowing\n@@ -3396,33 +3262,37 @@ This warning is enabled by @option{-Wextra}.\n @opindex Wno-redundant-tags\n Warn about redundant class-key and enum-key in references to class types\n and enumerated types in contexts where the key can be eliminated without\n-causing an ambiguity.  For example\n+causing an ambiguity.  For example:\n \n @smallexample\n struct foo;\n-struct foo *p;   // -Wredundant-tags, keyword struct can be eliminated\n+struct foo *p;   // warn that keyword struct can be eliminated\n+@end smallexample\n \n+@noindent\n+On the other hand, in this example there is no warning:\n+\n+@smallexample\n+struct foo;\n void foo ();   // \"hides\" struct foo\n-void bar (struct foo&);   // no warning, keyword struct cannot be eliminated\n+void bar (struct foo&);  // no warning, keyword struct is necessary\n @end smallexample\n \n-@item -fext-numeric-literals @r{(C++ and Objective-C++ only)}\n-@opindex fext-numeric-literals\n-@opindex fno-ext-numeric-literals\n-Accept imaginary, fixed-point, or machine-defined\n-literal number suffixes as GNU extensions.\n-When this option is turned off these suffixes are treated\n-as C++11 user-defined literal numeric suffixes.\n-This is on by default for all pre-C++11 dialects and all GNU dialects:\n-@option{-std=c++98}, @option{-std=gnu++98}, @option{-std=gnu++11},\n-@option{-std=gnu++14}.\n-This option is off by default\n-for ISO C++11 onwards (@option{-std=c++11}, ...).\n-@end table\n-\n-The following @option{-W@dots{}} options are not affected by @option{-Wall}.\n+@item -Wno-subobject-linkage @r{(C++ and Objective-C++ only)}\n+@opindex Wsubobject-linkage\n+@opindex Wno-subobject-linkage\n+Do not warn\n+if a class type has a base or a field whose type uses the anonymous\n+namespace or depends on a type with no linkage.  If a type A depends on\n+a type B with no or internal linkage, defining it in multiple\n+translation units would be an ODR violation because the meaning of B\n+is different in each translation unit.  If A only appears in a single\n+translation unit, the best way to silence the warning is to give it\n+internal linkage by putting it in an anonymous namespace as well.  The\n+compiler doesn't give this warning for types defined in the main .C\n+file, as those are unlikely to have multiple definitions.\n+@option{-Wsubobject-linkage} is enabled by default.\n \n-@table @gcctabopt\n @item -Weffc++ @r{(C++ and Objective-C++ only)}\n @opindex Weffc++\n @opindex Wno-effc++\n@@ -3585,6 +3455,16 @@ enforce that rule.  The warning is inactive inside a system header file,\n such as the STL, so one can still use the STL.  One may also define\n classes that indirectly use virtual inheritance.\n \n+@item -Wno-virtual-move-assign\n+@opindex Wvirtual-move-assign\n+@opindex Wno-virtual-move-assign\n+Suppress warnings about inheriting from a virtual base with a\n+non-trivial C++11 move assignment operator.  This is dangerous because\n+if the virtual base is reachable along more than one path, it is\n+moved multiple times, which can mean both objects end up in the\n+moved-from state.  If the move assignment operator is written to avoid\n+moving from a moved-from object, this warning can be disabled.\n+\n @item -Wnamespaces\n @opindex Wnamespaces\n @opindex Wno-namespaces\n@@ -3602,7 +3482,7 @@ result in a call to @code{terminate}.\n @item -Wno-class-conversion @r{(C++ and Objective-C++ only)}\n @opindex Wno-class-conversion\n @opindex Wclass-conversion\n-Disable the warning about the case when a conversion function converts an\n+Do not warn when a conversion function converts an\n object to the same type, to a base class of that type, or to void; such\n a conversion function will never be called.\n \n@@ -3619,22 +3499,209 @@ non-class type, @code{volatile}-qualified function return type,\n @code{volatile}-qualified type.  This usage was deprecated in C++20.\n \n Enabled by default with @option{-std=c++2a}.\n-@end table\n \n-@node Objective-C and Objective-C++ Dialect Options\n-@section Options Controlling Objective-C and Objective-C++ Dialects\n+@item -Wzero-as-null-pointer-constant @r{(C++ and Objective-C++ only)}\n+@opindex Wzero-as-null-pointer-constant\n+@opindex Wno-zero-as-null-pointer-constant\n+Warn when a literal @samp{0} is used as null pointer constant.  This can\n+be useful to facilitate the conversion to @code{nullptr} in C++11.\n \n-@cindex compiler options, Objective-C and Objective-C++\n-@cindex Objective-C and Objective-C++ options, command-line\n-@cindex options, Objective-C and Objective-C++\n-(NOTE: This manual does not describe the Objective-C and Objective-C++\n-languages themselves.  @xref{Standards,,Language Standards\n-Supported by GCC}, for references.)\n+@item -Waligned-new\n+@opindex Waligned-new\n+@opindex Wno-aligned-new\n+Warn about a new-expression of a type that requires greater alignment\n+than the @code{alignof(std::max_align_t)} but uses an allocation\n+function without an explicit alignment parameter. This option is\n+enabled by @option{-Wall}.\n \n-This section describes the command-line options that are only meaningful\n-for Objective-C and Objective-C++ programs.  You can also use most of\n-the language-independent GNU compiler options.\n-For example, you might compile a file @file{some_class.m} like this:\n+Normally this only warns about global allocation functions, but\n+@option{-Waligned-new=all} also warns about class member allocation\n+functions.\n+\n+@item -Wno-placement-new\n+@itemx -Wplacement-new=@var{n}\n+@opindex Wplacement-new\n+@opindex Wno-placement-new\n+Warn about placement new expressions with undefined behavior, such as\n+constructing an object in a buffer that is smaller than the type of\n+the object.  For example, the placement new expression below is diagnosed\n+because it attempts to construct an array of 64 integers in a buffer only\n+64 bytes large.\n+@smallexample\n+char buf [64];\n+new (buf) int[64];\n+@end smallexample\n+This warning is enabled by default.\n+\n+@table @gcctabopt\n+@item -Wplacement-new=1\n+This is the default warning level of @option{-Wplacement-new}.  At this\n+level the warning is not issued for some strictly undefined constructs that\n+GCC allows as extensions for compatibility with legacy code.  For example,\n+the following @code{new} expression is not diagnosed at this level even\n+though it has undefined behavior according to the C++ standard because\n+it writes past the end of the one-element array.\n+@smallexample\n+struct S @{ int n, a[1]; @};\n+S *s = (S *)malloc (sizeof *s + 31 * sizeof s->a[0]);\n+new (s->a)int [32]();\n+@end smallexample\n+\n+@item -Wplacement-new=2\n+At this level, in addition to diagnosing all the same constructs as at level\n+1, a diagnostic is also issued for placement new expressions that construct\n+an object in the last member of structure whose type is an array of a single\n+element and whose size is less than the size of the object being constructed.\n+While the previous example would be diagnosed, the following construct makes\n+use of the flexible member array extension to avoid the warning at level 2.\n+@smallexample\n+struct S @{ int n, a[]; @};\n+S *s = (S *)malloc (sizeof *s + 32 * sizeof s->a[0]);\n+new (s->a)int [32]();\n+@end smallexample\n+\n+@end table\n+\n+@item -Wcatch-value\n+@itemx -Wcatch-value=@var{n} @r{(C++ and Objective-C++ only)}\n+@opindex Wcatch-value\n+@opindex Wno-catch-value\n+Warn about catch handlers that do not catch via reference.\n+With @option{-Wcatch-value=1} (or @option{-Wcatch-value} for short)\n+warn about polymorphic class types that are caught by value.\n+With @option{-Wcatch-value=2} warn about all class types that are caught\n+by value. With @option{-Wcatch-value=3} warn about all types that are\n+not caught by reference. @option{-Wcatch-value} is enabled by @option{-Wall}.\n+\n+@item -Wconditionally-supported @r{(C++ and Objective-C++ only)}\n+@opindex Wconditionally-supported\n+@opindex Wno-conditionally-supported\n+Warn for conditionally-supported (C++11 [intro.defs]) constructs.\n+\n+@item -Wno-delete-incomplete @r{(C++ and Objective-C++ only)}\n+@opindex Wdelete-incomplete\n+@opindex Wno-delete-incomplete\n+Do not warn when deleting a pointer to incomplete type, which may cause\n+undefined behavior at runtime.  This warning is enabled by default.\n+\n+@item -Wextra-semi @r{(C++, Objective-C++ only)}\n+@opindex Wextra-semi\n+@opindex Wno-extra-semi\n+Warn about redundant semicolons after in-class function definitions.\n+\n+@item -Wno-inaccessible-base @r{(C++, Objective-C++ only)}\n+@opindex Winaccessible-base\n+@opindex Wno-inaccessible-base\n+This option controls warnings\n+when a base class is inaccessible in a class derived from it due to\n+ambiguity.  The warning is enabled by default.\n+Note that the warning for ambiguous virtual\n+bases is enabled by the @option{-Wextra} option.\n+@smallexample\n+@group\n+struct A @{ int a; @};\n+\n+struct B : A @{ @};\n+\n+struct C : B, A @{ @};\n+@end group\n+@end smallexample\n+\n+@item -Wno-inherited-variadic-ctor\n+@opindex Winherited-variadic-ctor\n+@opindex Wno-inherited-variadic-ctor\n+Suppress warnings about use of C++11 inheriting constructors when the\n+base class inherited from has a C variadic constructor; the warning is\n+on by default because the ellipsis is not inherited.\n+\n+@item -Wno-invalid-offsetof @r{(C++ and Objective-C++ only)}\n+@opindex Wno-invalid-offsetof\n+@opindex Winvalid-offsetof\n+Suppress warnings from applying the @code{offsetof} macro to a non-POD\n+type.  According to the 2014 ISO C++ standard, applying @code{offsetof}\n+to a non-standard-layout type is undefined.  In existing C++ implementations,\n+however, @code{offsetof} typically gives meaningful results.\n+This flag is for users who are aware that they are\n+writing nonportable code and who have deliberately chosen to ignore the\n+warning about it.\n+\n+The restrictions on @code{offsetof} may be relaxed in a future version\n+of the C++ standard.\n+\n+@item -Wsized-deallocation @r{(C++ and Objective-C++ only)}\n+@opindex Wsized-deallocation\n+@opindex Wno-sized-deallocation\n+Warn about a definition of an unsized deallocation function\n+@smallexample\n+void operator delete (void *) noexcept;\n+void operator delete[] (void *) noexcept;\n+@end smallexample\n+without a definition of the corresponding sized deallocation function\n+@smallexample\n+void operator delete (void *, std::size_t) noexcept;\n+void operator delete[] (void *, std::size_t) noexcept;\n+@end smallexample\n+or vice versa.  Enabled by @option{-Wextra} along with\n+@option{-fsized-deallocation}.\n+\n+@item -Wsuggest-final-types\n+@opindex Wno-suggest-final-types\n+@opindex Wsuggest-final-types\n+Warn about types with virtual methods where code quality would be improved\n+if the type were declared with the C++11 @code{final} specifier,\n+or, if possible,\n+declared in an anonymous namespace. This allows GCC to more aggressively\n+devirtualize the polymorphic calls. This warning is more effective with\n+link-time optimization,\n+where the information about the class hierarchy graph is\n+more complete.\n+\n+@item -Wsuggest-final-methods\n+@opindex Wno-suggest-final-methods\n+@opindex Wsuggest-final-methods\n+Warn about virtual methods where code quality would be improved if the method\n+were declared with the C++11 @code{final} specifier,\n+or, if possible, its type were\n+declared in an anonymous namespace or with the @code{final} specifier.\n+This warning is\n+more effective with link-time optimization, where the information about the\n+class hierarchy graph is more complete. It is recommended to first consider\n+suggestions of @option{-Wsuggest-final-types} and then rebuild with new\n+annotations.\n+\n+@item -Wsuggest-override\n+@opindex Wsuggest-override\n+@opindex Wno-suggest-override\n+Warn about overriding virtual functions that are not marked with the\n+@code{override} keyword.\n+\n+@item -Wuseless-cast @r{(C++ and Objective-C++ only)}\n+@opindex Wuseless-cast\n+@opindex Wno-useless-cast\n+Warn when an expression is casted to its own type.\n+\n+@item -Wno-conversion-null @r{(C++ and Objective-C++ only)}\n+@opindex Wconversion-null\n+@opindex Wno-conversion-null\n+Do not warn for conversions between @code{NULL} and non-pointer\n+types. @option{-Wconversion-null} is enabled by default.\n+\n+@end table\n+\n+@node Objective-C and Objective-C++ Dialect Options\n+@section Options Controlling Objective-C and Objective-C++ Dialects\n+\n+@cindex compiler options, Objective-C and Objective-C++\n+@cindex Objective-C and Objective-C++ options, command-line\n+@cindex options, Objective-C and Objective-C++\n+(NOTE: This manual does not describe the Objective-C and Objective-C++\n+languages themselves.  @xref{Standards,,Language Standards\n+Supported by GCC}, for references.)\n+\n+This section describes the command-line options that are only meaningful\n+for Objective-C and Objective-C++ programs.  You can also use most of\n+the language-independent GNU compiler options.\n+For example, you might compile a file @file{some_class.m} like this:\n \n @smallexample\n gcc -g -fgnu-runtime -O -c some_class.m\n@@ -3814,6 +3881,12 @@ file named @file{@var{sourcename}.decl}.\n Warn whenever an Objective-C assignment is being intercepted by the\n garbage collector.\n \n+@item -Wno-property-assign-default @r{(Objective-C and Objective-C++ only)}\n+@opindex Wproperty-assign-default\n+@opindex Wno-property-assign-default\n+Do not warn if a property for an Objective-C object has no assign\n+semantics specified.\n+\n @item -Wno-protocol @r{(Objective-C and Objective-C++ only)}\n @opindex Wno-protocol\n @opindex Wprotocol\n@@ -4655,6 +4728,8 @@ example, @option{-Wno-implicit}.  This manual lists only one of the\n two forms, whichever is not the default.  For further\n language-specific options also refer to @ref{C++ Dialect Options} and\n @ref{Objective-C and Objective-C++ Dialect Options}.\n+Additional warnings can be produced by enabling the static analyzer;\n+@xref{Static Analyzer Options}.\n \n Some options, such as @option{-Wall} and @option{-Wextra}, turn on other\n options, such as @option{-Wunused}, which may turn on further options,\n@@ -4676,7 +4751,7 @@ warns that an unrecognized option is present.\n \n The effectiveness of some warnings depends on optimizations also being\n enabled. For example @option{-Wsuggest-final-types} is more effective\n-with link-time optimization and @option{-Wmaybe-uninitialized} will not\n+with link-time optimization and @option{-Wmaybe-uninitialized} does not\n warn at all unless optimization is enabled.\n \n @table @gcctabopt\n@@ -4865,68 +4940,200 @@ of a derived class.\n \n @end itemize\n \n-@item -Wchar-subscripts\n-@opindex Wchar-subscripts\n-@opindex Wno-char-subscripts\n-Warn if an array subscript has type @code{char}.  This is a common cause\n-of error, as programmers often forget that this type is signed on some\n-machines.\n-This warning is enabled by @option{-Wall}.\n+@item -Wabi @r{(C, Objective-C, C++ and Objective-C++ only)}\n+@opindex Wabi\n+@opindex Wno-abi\n \n-@item -Wno-coverage-mismatch\n-@opindex Wno-coverage-mismatch\n-@opindex Wcoverage-mismatch\n-Warn if feedback profiles do not match when using the\n-@option{-fprofile-use} option.\n-If a source file is changed between compiling with @option{-fprofile-generate}\n-and with @option{-fprofile-use}, the files with the profile feedback can fail\n-to match the source file and GCC cannot use the profile feedback\n-information.  By default, this warning is enabled and is treated as an\n-error.  @option{-Wno-coverage-mismatch} can be used to disable the\n-warning or @option{-Wno-error=coverage-mismatch} can be used to\n-disable the error.  Disabling the error for this warning can result in\n-poorly optimized code and is useful only in the\n-case of very minor changes such as bug fixes to an existing code-base.\n-Completely disabling the warning is not recommended.\n+Warn about code affected by ABI changes.  This includes code that may\n+not be compatible with the vendor-neutral C++ ABI as well as the psABI\n+for the particular target.\n \n-@item -Wno-cpp\n-@r{(C, Objective-C, C++, Objective-C++ and Fortran only)}\n+Since G++ now defaults to updating the ABI with each major release,\n+normally @option{-Wabi} warns only about C++ ABI compatibility\n+problems if there is a check added later in a release series for an\n+ABI issue discovered since the initial release.  @option{-Wabi} warns\n+about more things if an older ABI version is selected (with\n+@option{-fabi-version=@var{n}}).\n \n-Suppress warning messages emitted by @code{#warning} directives.\n+@option{-Wabi} can also be used with an explicit version number to\n+warn about C++ ABI compatibility with a particular @option{-fabi-version}\n+level, e.g.@: @option{-Wabi=2} to warn about changes relative to\n+@option{-fabi-version=2}.\n \n-@item -Wdouble-promotion @r{(C, C++, Objective-C and Objective-C++ only)}\n-@opindex Wdouble-promotion\n-@opindex Wno-double-promotion\n-Give a warning when a value of type @code{float} is implicitly\n-promoted to @code{double}.  CPUs with a 32-bit ``single-precision''\n-floating-point unit implement @code{float} in hardware, but emulate\n-@code{double} in software.  On such a machine, doing computations\n-using @code{double} values is much more expensive because of the\n-overhead required for software emulation.\n+If an explicit version number is provided and\n+@option{-fabi-compat-version} is not specified, the version number\n+from this option is used for compatibility aliases.  If no explicit\n+version number is provided with this option, but\n+@option{-fabi-compat-version} is specified, that version number is\n+used for C++ ABI warnings.\n \n-It is easy to accidentally do computations with @code{double} because\n-floating-point literals are implicitly of type @code{double}.  For\n-example, in:\n+Although an effort has been made to warn about\n+all such cases, there are probably some cases that are not warned about,\n+even though G++ is generating incompatible code.  There may also be\n+cases where warnings are emitted even though the code that is generated\n+is compatible.\n+\n+You should rewrite your code to avoid these warnings if you are\n+concerned about the fact that code generated by G++ may not be binary\n+compatible with code generated by other compilers.\n+\n+Known incompatibilities in @option{-fabi-version=2} (which was the\n+default from GCC 3.4 to 4.9) include:\n+\n+@itemize @bullet\n+\n+@item\n+A template with a non-type template parameter of reference type was\n+mangled incorrectly:\n @smallexample\n-@group\n-float area(float radius)\n-@{\n-   return 3.14159 * radius * radius;\n-@}\n-@end group\n+extern int N;\n+template <int &> struct S @{@};\n+void n (S<N>) @{2@}\n @end smallexample\n-the compiler performs the entire computation with @code{double}\n-because the floating-point literal is a @code{double}.\n \n-@item -Wduplicate-decl-specifier @r{(C and Objective-C only)}\n-@opindex Wduplicate-decl-specifier\n-@opindex Wno-duplicate-decl-specifier\n-Warn if a declaration has duplicate @code{const}, @code{volatile},\n-@code{restrict} or @code{_Atomic} specifier.  This warning is enabled by\n-@option{-Wall}.\n+This was fixed in @option{-fabi-version=3}.\n \n-@item -Wformat\n-@itemx -Wformat=@var{n}\n+@item\n+SIMD vector types declared using @code{__attribute ((vector_size))} were\n+mangled in a non-standard way that does not allow for overloading of\n+functions taking vectors of different sizes.\n+\n+The mangling was changed in @option{-fabi-version=4}.\n+\n+@item\n+@code{__attribute ((const))} and @code{noreturn} were mangled as type\n+qualifiers, and @code{decltype} of a plain declaration was folded away.\n+\n+These mangling issues were fixed in @option{-fabi-version=5}.\n+\n+@item\n+Scoped enumerators passed as arguments to a variadic function are\n+promoted like unscoped enumerators, causing @code{va_arg} to complain.\n+On most targets this does not actually affect the parameter passing\n+ABI, as there is no way to pass an argument smaller than @code{int}.\n+\n+Also, the ABI changed the mangling of template argument packs,\n+@code{const_cast}, @code{static_cast}, prefix increment/decrement, and\n+a class scope function used as a template argument.\n+\n+These issues were corrected in @option{-fabi-version=6}.\n+\n+@item\n+Lambdas in default argument scope were mangled incorrectly, and the\n+ABI changed the mangling of @code{nullptr_t}.\n+\n+These issues were corrected in @option{-fabi-version=7}.\n+\n+@item\n+When mangling a function type with function-cv-qualifiers, the\n+un-qualified function type was incorrectly treated as a substitution\n+candidate.\n+\n+This was fixed in @option{-fabi-version=8}, the default for GCC 5.1.\n+\n+@item\n+@code{decltype(nullptr)} incorrectly had an alignment of 1, leading to\n+unaligned accesses.  Note that this did not affect the ABI of a\n+function with a @code{nullptr_t} parameter, as parameters have a\n+minimum alignment.\n+\n+This was fixed in @option{-fabi-version=9}, the default for GCC 5.2.\n+\n+@item\n+Target-specific attributes that affect the identity of a type, such as\n+ia32 calling conventions on a function type (stdcall, regparm, etc.),\n+did not affect the mangled name, leading to name collisions when\n+function pointers were used as template arguments.\n+\n+This was fixed in @option{-fabi-version=10}, the default for GCC 6.1.\n+\n+@end itemize\n+\n+This option also enables warnings about psABI-related changes.\n+The known psABI changes at this point include:\n+\n+@itemize @bullet\n+\n+@item\n+For SysV/x86-64, unions with @code{long double} members are\n+passed in memory as specified in psABI.  Prior to GCC 4.4, this was not\n+the case.  For example:\n+\n+@smallexample\n+union U @{\n+  long double ld;\n+  int i;\n+@};\n+@end smallexample\n+\n+@noindent\n+@code{union U} is now always passed in memory.\n+\n+@end itemize\n+\n+@item -Wchar-subscripts\n+@opindex Wchar-subscripts\n+@opindex Wno-char-subscripts\n+Warn if an array subscript has type @code{char}.  This is a common cause\n+of error, as programmers often forget that this type is signed on some\n+machines.\n+This warning is enabled by @option{-Wall}.\n+\n+@item -Wno-coverage-mismatch\n+@opindex Wno-coverage-mismatch\n+@opindex Wcoverage-mismatch\n+Warn if feedback profiles do not match when using the\n+@option{-fprofile-use} option.\n+If a source file is changed between compiling with @option{-fprofile-generate}\n+and with @option{-fprofile-use}, the files with the profile feedback can fail\n+to match the source file and GCC cannot use the profile feedback\n+information.  By default, this warning is enabled and is treated as an\n+error.  @option{-Wno-coverage-mismatch} can be used to disable the\n+warning or @option{-Wno-error=coverage-mismatch} can be used to\n+disable the error.  Disabling the error for this warning can result in\n+poorly optimized code and is useful only in the\n+case of very minor changes such as bug fixes to an existing code-base.\n+Completely disabling the warning is not recommended.\n+\n+@item -Wno-cpp\n+@r{(C, Objective-C, C++, Objective-C++ and Fortran only)}\n+@opindex Wno-cpp\n+@opindex Wcpp\n+Suppress warning messages emitted by @code{#warning} directives.\n+\n+@item -Wdouble-promotion @r{(C, C++, Objective-C and Objective-C++ only)}\n+@opindex Wdouble-promotion\n+@opindex Wno-double-promotion\n+Give a warning when a value of type @code{float} is implicitly\n+promoted to @code{double}.  CPUs with a 32-bit ``single-precision''\n+floating-point unit implement @code{float} in hardware, but emulate\n+@code{double} in software.  On such a machine, doing computations\n+using @code{double} values is much more expensive because of the\n+overhead required for software emulation.\n+\n+It is easy to accidentally do computations with @code{double} because\n+floating-point literals are implicitly of type @code{double}.  For\n+example, in:\n+@smallexample\n+@group\n+float area(float radius)\n+@{\n+   return 3.14159 * radius * radius;\n+@}\n+@end group\n+@end smallexample\n+the compiler performs the entire computation with @code{double}\n+because the floating-point literal is a @code{double}.\n+\n+@item -Wduplicate-decl-specifier @r{(C and Objective-C only)}\n+@opindex Wduplicate-decl-specifier\n+@opindex Wno-duplicate-decl-specifier\n+Warn if a declaration has duplicate @code{const}, @code{volatile},\n+@code{restrict} or @code{_Atomic} specifier.  This warning is enabled by\n+@option{-Wall}.\n+\n+@item -Wformat\n+@itemx -Wformat=@var{n}\n @opindex Wformat\n @opindex Wno-format\n @opindex ffreestanding\n@@ -4969,6 +5176,13 @@ options: @option{-Wno-format-contains-nul},\n @option{-Wno-format-extra-args}, and @option{-Wno-format-zero-length}.\n @option{-Wformat} is enabled by @option{-Wall}.\n \n+@item -Wformat=2\n+@opindex Wformat=2\n+Enable @option{-Wformat} plus additional format checks.  Currently\n+equivalent to @option{-Wformat -Wformat-nonliteral -Wformat-security\n+-Wformat-y2k}.\n+@end table\n+\n @item -Wno-format-contains-nul\n @opindex Wno-format-contains-nul\n @opindex Wformat-contains-nul\n@@ -5075,13 +5289,6 @@ void f (int a, int b)\n If @option{-Wformat} is specified, do not warn about zero-length formats.\n The C standard specifies that zero-length formats are allowed.\n \n-\n-@item -Wformat=2\n-@opindex Wformat=2\n-Enable @option{-Wformat} plus additional format checks.  Currently\n-equivalent to @option{-Wformat -Wformat-nonliteral -Wformat-security\n--Wformat-y2k}.\n-\n @item -Wformat-nonliteral\n @opindex Wformat-nonliteral\n @opindex Wno-format-nonliteral\n@@ -5142,7 +5349,6 @@ sufficient length or magnitude.\n @opindex Wno-format-y2k\n If @option{-Wformat} is specified, also warn about @code{strftime}\n formats that may yield only a two-digit year.\n-@end table\n \n @item -Wnonnull\n @opindex Wnonnull\n@@ -5171,22 +5377,6 @@ is only active when @option{-fdelete-null-pointer-checks} is active,\n which is enabled by optimizations in most targets.  The precision of\n the warnings depends on the optimization options used.\n \n-@item -Winaccessible-base @r{(C++, Objective-C++ only)}\n-@opindex Winaccessible-base\n-@opindex Wno-inaccessible-base\n-Warn when a base class is inaccessible in a class derived from it due to\n-ambiguity.  The warning is enabled by default.  Note the warning for virtual\n-bases is enabled by the @option{-Wextra} option.\n-@smallexample\n-@group\n-struct A @{ int a; @};\n-\n-struct B : A @{ @};\n-\n-struct C : B, A @{ @};\n-@end group\n-@end smallexample\n-\n @item -Winit-self @r{(C, C++, Objective-C and Objective-C++ only)}\n @opindex Winit-self\n @opindex Wno-init-self\n@@ -5207,20 +5397,20 @@ int f()\n \n This warning is enabled by @option{-Wall} in C++.\n \n-@item -Wimplicit-int @r{(C and Objective-C only)}\n+@item -Wno-implicit-int @r{(C and Objective-C only)}\n @opindex Wimplicit-int\n @opindex Wno-implicit-int\n-Warn when a declaration does not specify a type.\n-This warning is enabled by @option{-Wall}.\n+This option controls warnings when a declaration does not specify a type.\n+This warning is enabled by default in C99 and later dialects of C,\n+and also by @option{-Wall}.\n \n-@item -Wimplicit-function-declaration @r{(C and Objective-C only)}\n+@item -Wno-implicit-function-declaration @r{(C and Objective-C only)}\n @opindex Wimplicit-function-declaration\n @opindex Wno-implicit-function-declaration\n-Give a warning whenever a function is used before being declared. In\n-C99 mode (@option{-std=c99} or @option{-std=gnu99}), this warning is\n-enabled by default and it is made into an error by\n-@option{-pedantic-errors}. This warning is also enabled by\n-@option{-Wall}.\n+This option controls warnings when a function is used before being declared.\n+This warning is enabled by default in C99 and later dialects of C,\n+and also by @option{-Wall}.\n+The warning is made into an error by @option{-pedantic-errors}.\n \n @item -Wimplicit @r{(C and Objective-C only)}\n @opindex Wimplicit\n@@ -5373,12 +5563,11 @@ switch (cond)\n \n The @option{-Wimplicit-fallthrough=3} warning is enabled by @option{-Wextra}.\n \n-@item -Wif-not-aligned @r{(C, C++, Objective-C and Objective-C++ only)}\n+@item -Wno-if-not-aligned @r{(C, C++, Objective-C and Objective-C++ only)}\n @opindex Wif-not-aligned\n @opindex Wno-if-not-aligned\n-Control if warning triggered by the @code{warn_if_not_aligned} attribute\n-should be issued.  This is enabled by default.\n-Use @option{-Wno-if-not-aligned} to disable it.\n+Control if warnings triggered by the @code{warn_if_not_aligned} attribute\n+should be issued.  These warnings are enabled by default.\n \n @item -Wignored-qualifiers @r{(C and C++ only)}\n @opindex Wignored-qualifiers\n@@ -5393,10 +5582,11 @@ even without this option.\n \n This warning is also enabled by @option{-Wextra}.\n \n-@item -Wignored-attributes @r{(C and C++ only)}\n+@item -Wno-ignored-attributes @r{(C and C++ only)}\n @opindex Wignored-attributes\n @opindex Wno-ignored-attributes\n-Warn when an attribute is ignored.  This is different from the\n+This option controls warnings when an attribute is ignored.\n+This is different from the\n @option{-Wattributes} option in that it warns whenever the compiler decides\n to drop an attribute, not that the attribute is either unknown, used in a\n wrong place, etc.  This warning is enabled by default.\n@@ -5502,8 +5692,7 @@ allocate<void> (size_t);\n @opindex Wno-missing-braces\n Warn if an aggregate or union initializer is not fully bracketed.  In\n the following example, the initializer for @code{a} is not fully\n-bracketed, but that for @code{b} is fully bracketed.  This warning is\n-enabled by @option{-Wall} in C.\n+bracketed, but that for @code{b} is fully bracketed.\n \n @smallexample\n int a[2][2] = @{ 0, 1, 2, 3 @};\n@@ -5517,21 +5706,23 @@ This warning is enabled by @option{-Wall}.\n @opindex Wno-missing-include-dirs\n Warn if a user-supplied include directory does not exist.\n \n-@item -Wmissing-profile\n+@item -Wno-missing-profile\n @opindex Wmissing-profile\n @opindex Wno-missing-profile\n-Warn if feedback profiles are missing when using the\n+This option controls warnings if feedback profiles are missing when using the\n @option{-fprofile-use} option.\n This option diagnoses those cases where a new function or a new file is added\n-to the user code between compiling with @option{-fprofile-generate} and with\n-@option{-fprofile-use}, without regenerating the profiles.  In these cases, the\n-profile feedback data files do not contain any profile feedback information for\n+between compiling with @option{-fprofile-generate} and with\n+@option{-fprofile-use}, without regenerating the profiles.\n+In these cases, the profile feedback data files do not contain any\n+profile feedback information for\n the newly added function or file respectively.  Also, in the case when profile\n count data (.gcda) files are removed, GCC cannot use any profile feedback\n-information.  In all these cases, warnings are issued to inform the user that a\n-profile generation step is due.  @option{-Wno-missing-profile} can be used to\n-disable the warning.  Ignoring the warning can result in poorly optimized code.\n-Completely disabling the warning is not recommended and should be done only\n+information.  In all these cases, warnings are issued to inform you that a\n+profile generation step is due.\n+Ignoring the warning can result in poorly optimized code.\n+@option{-Wno-missing-profile} can be used to\n+disable the warning, but this is not recommended and should be done only\n when non-existent profile data is justified.\n \n @item -Wmultistatement-macros\n@@ -5632,7 +5823,7 @@ this sort of problem in programs.\n The C++17 standard will define the order of evaluation of operands in\n more cases: in particular it requires that the right-hand side of an\n assignment be evaluated before the left-hand side, so the above\n-examples are no longer undefined.  But this warning will still warn\n+examples are no longer undefined.  But this option will still warn\n about them, to help people avoid writing code that is undefined in C\n and earlier revisions of C++.\n \n@@ -5673,28 +5864,29 @@ the function is not used.\n \n This warning is enabled by default in C++ and by @option{-Wall} otherwise.\n \n-@item -Wshift-count-negative\n+@item -Wno-shift-count-negative\n @opindex Wshift-count-negative\n @opindex Wno-shift-count-negative\n-Warn if shift count is negative. This warning is enabled by default.\n+Controls warnings if a shift count is negative.\n+This warning is enabled by default.\n \n-@item -Wshift-count-overflow\n+@item -Wno-shift-count-overflow\n @opindex Wshift-count-overflow\n @opindex Wno-shift-count-overflow\n-Warn if shift count >= width of type. This warning is enabled by default.\n+Controls warnings if a shift count is greater than or equal to the bit width\n+of the type.  This warning is enabled by default.\n \n @item -Wshift-negative-value\n @opindex Wshift-negative-value\n @opindex Wno-shift-negative-value\n Warn if left shifting a negative value.  This warning is enabled by\n @option{-Wextra} in C99 and C++11 modes (and newer).\n \n-@item -Wshift-overflow\n+@item -Wno-shift-overflow\n @itemx -Wshift-overflow=@var{n}\n @opindex Wshift-overflow\n @opindex Wno-shift-overflow\n-Warn about left shift overflows.  This warning is enabled by\n-default in C99 and C++11 modes (and newer).\n+These options control warnings about left shift overflows.\n \n @table @gcctabopt\n @item -Wshift-overflow=1\n@@ -5738,10 +5930,10 @@ between @option{-Wswitch} and this option is that this option gives a\n warning about an omitted enumeration code even if there is a\n @code{default} label.\n \n-@item -Wswitch-bool\n+@item -Wno-switch-bool\n @opindex Wswitch-bool\n @opindex Wno-switch-bool\n-Warn whenever a @code{switch} statement has an index of boolean type\n+Do not warn when a @code{switch} statement has an index of boolean type\n and the case values are outside the range of a boolean type.\n It is possible to suppress this warning by casting the controlling\n expression to a type other than @code{bool}.  For example:\n@@ -5755,17 +5947,18 @@ switch ((int) (a == 4))\n @end smallexample\n This warning is enabled by default for C and C++ programs.\n \n-@item -Wswitch-outside-range\n+@item -Wno-switch-outside-range\n @opindex Wswitch-outside-range\n @opindex Wno-switch-outside-range\n-Warn whenever a @code{switch} case has a value that is outside of its\n+This option controls warnings when a @code{switch} case has a value\n+that is outside of its\n respective type range.  This warning is enabled by default for\n C and C++ programs.\n \n-@item -Wswitch-unreachable\n+@item -Wno-switch-unreachable\n @opindex Wswitch-unreachable\n @opindex Wno-switch-unreachable\n-Warn whenever a @code{switch} statement contains statements between the\n+Do not warn when a @code{switch} statement contains statements between the\n controlling expression and the first case label, which will never be\n executed.  For example:\n @smallexample\n@@ -5944,10 +6137,11 @@ to compute a value that itself is never used, because such\n computations may be deleted by data flow analysis before the warnings\n are printed.\n \n-@item -Winvalid-memory-model\n+@item -Wno-invalid-memory-model\n @opindex Winvalid-memory-model\n @opindex Wno-invalid-memory-model\n-Warn for invocations of @ref{__atomic Builtins}, @ref{__sync Builtins},\n+This option controls warnings\n+for invocations of @ref{__atomic Builtins}, @ref{__sync Builtins},\n and the C11 atomic generic functions with a memory consistency argument\n that is either invalid for the operation or outside the range of values\n of the @code{memory_order} enumeration.  For example, since the\n@@ -6184,7 +6378,7 @@ a small subset of simple buffer overflows even without optimization in\n calls to the GCC built-in functions like @code{__builtin_memcpy} that\n correspond to the standard functions.  In any case, the option warns about\n just a subset of buffer overflows detected by the corresponding overflow\n-checking built-ins.  For example, the option will issue a warning for\n+checking built-ins.  For example, the option issues a warning for\n the @code{strcpy} call below because it copies at least 5 characters\n (the string @code{\"blue\"} including the terminating NUL) into the buffer\n of size 4.\n@@ -6215,7 +6409,7 @@ Option @option{-Wstringop-overflow=2} is enabled by default.\n @opindex Wno-stringop-overflow\n The @option{-Wstringop-overflow=1} option uses type-zero Object Size Checking\n to determine the sizes of destination objects.  This is the default setting\n-of the option.  At this setting the option will not warn for writes past\n+of the option.  At this setting the option does not warn for writes past\n the end of subobjects of larger objects accessed by pointers unless the\n size of the largest surrounding object is known.  When the destination may\n be one of several objects it is assumed to be the largest one of them.  On\n@@ -6226,8 +6420,8 @@ a non-zero value.\n @item -Wstringop-overflow=2\n The @option{-Wstringop-overflow=2} option uses type-one Object Size Checking\n to determine the sizes of destination objects.  At this setting the option\n-will warn about overflows when writing to members of the largest complete\n-objects whose exact size is known.  It will, however, not warn for excessive\n+warna about overflows when writing to members of the largest complete\n+objects whose exact size is known.  However, it does not warn for excessive\n writes to the same members of unknown objects referenced by pointers since\n they may point to arrays containing unknown numbers of elements.\n \n@@ -6241,16 +6435,17 @@ code.\n @item -Wstringop-overflow=4\n The @option{-Wstringop-overflow=4} option uses type-three Object Size Checking\n to determine the sizes of destination objects.  At this setting the option\n-will warn about overflowing any data members, and when the destination is\n+warns about overflowing any data members, and when the destination is\n one of several objects it uses the size of the largest of them to decide\n whether to issue a warning.  Similarly to @option{-Wstringop-overflow=3} this\n setting of the option may result in warnings for benign code.\n @end table\n \n-@item -Wstringop-truncation\n+@item -Wno-stringop-truncation\n @opindex Wstringop-truncation\n @opindex Wno-stringop-truncation\n-Warn for calls to bounded string manipulation functions such as @code{strncat},\n+Do not warn for calls to bounded string manipulation functions\n+such as @code{strncat},\n @code{strncpy}, and @code{stpncpy} that may either truncate the copied string\n or leave the destination unchanged.\n \n@@ -6369,40 +6564,11 @@ appropriate may not be detected.\n @opindex Wno-suggest-attribute=cold\n \n Warn about functions that might be candidates for @code{cold} attribute.  This\n-is based on static detection and generally will only warn about functions which\n+is based on static detection and generally only warns about functions which\n always leads to a call to another @code{cold} function such as wrappers of\n C++ @code{throw} or fatal error reporting functions leading to @code{abort}.\n @end table\n \n-@item -Wsuggest-final-types\n-@opindex Wno-suggest-final-types\n-@opindex Wsuggest-final-types\n-Warn about types with virtual methods where code quality would be improved\n-if the type were declared with the C++11 @code{final} specifier, \n-or, if possible,\n-declared in an anonymous namespace. This allows GCC to more aggressively\n-devirtualize the polymorphic calls. This warning is more effective with \n-link-time optimization, \n-where the information about the class hierarchy graph is\n-more complete.\n-\n-@item -Wsuggest-final-methods\n-@opindex Wno-suggest-final-methods\n-@opindex Wsuggest-final-methods\n-Warn about virtual methods where code quality would be improved if the method\n-were declared with the C++11 @code{final} specifier, \n-or, if possible, its type were\n-declared in an anonymous namespace or with the @code{final} specifier.\n-This warning is\n-more effective with link-time optimization, where the information about the\n-class hierarchy graph is more complete. It is recommended to first consider\n-suggestions of @option{-Wsuggest-final-types} and then rebuild with new\n-annotations.\n-\n-@item -Wsuggest-override\n-Warn about overriding virtual functions that are not marked with the override\n-keyword.\n-\n @item -Walloc-zero\n @opindex Wno-alloc-zero\n @opindex Walloc-zero\n@@ -6511,215 +6677,51 @@ See also @option{-Wvla-larger-than=}@samp{byte-size}.\n Disable @option{-Walloca-larger-than=} warnings.  The option is\n equivalent to @option{-Walloca-larger-than=}@samp{SIZE_MAX} or larger.\n \n-@item -Wno-analyzer-double-fclose\n-@opindex Wanalyzer-double-fclose\n-@opindex Wno-analyzer-double-fclose\n-This warning requires @option{-fanalyzer}, which enables it; use\n-@option{-Wno-analyzer-double-fclose} to disable it.\n+@item -Warith-conversion\n+@opindex Warith-conversion\n+@opindex Wno-arith-conversion\n+Do warn about implicit conversions from arithmetic operations even\n+when conversion of the operands to the same type cannot change their\n+values.  This affects warnings from @option{-Wconversion},\n+@option{-Wfloat-conversion}, and @option{-Wsign-conversion}.\n \n-This diagnostic warns for paths through the code in which a @code{FILE *}\n-can have @code{fclose} called on it more than once.\n+@smallexample\n+@group\n+void f (char c, int i)\n+@{\n+  c = c + i; // warns with @option{-Wconversion}\n+  c = c + 1; // only warns with @option{-Warith-conversion}\n+@}\n+@end group\n+@end smallexample\n \n-@item -Wno-analyzer-double-free\n-@opindex Wanalyzer-double-free\n-@opindex Wno-analyzer-double-free\n-This warning requires @option{-fanalyzer}, which enables it; use\n-@option{-Wno-analyzer-double-free} to disable it.\n+@item -Warray-bounds\n+@itemx -Warray-bounds=@var{n}\n+@opindex Wno-array-bounds\n+@opindex Warray-bounds\n+This option is only active when @option{-ftree-vrp} is active\n+(default for @option{-O2} and above). It warns about subscripts to arrays\n+that are always out of bounds. This warning is enabled by @option{-Wall}.\n \n-This diagnostic warns for paths through the code in which a pointer\n-can have @code{free} called on it more than once.\n+@table @gcctabopt\n+@item -Warray-bounds=1\n+This is the warning level of @option{-Warray-bounds} and is enabled\n+by @option{-Wall}; higher levels are not, and must be explicitly requested.\n \n-@item -Wno-analyzer-exposure-through-output-file\n-@opindex Wanalyzer-exposure-through-output-file\n-@opindex Wno-analyzer-exposure-through-output-file\n-This warning requires @option{-fanalyzer}, which enables it; use\n-@option{-Wno-analyzer-exposure-through-output-file}\n-to disable it.\n+@item -Warray-bounds=2\n+This warning level also warns about out of bounds access for\n+arrays at the end of a struct and for arrays accessed through\n+pointers. This warning level may give a larger number of\n+false positives and is deactivated by default.\n+@end table\n \n-This diagnostic warns for paths through the code in which a\n-security-sensitive value is written to an output file\n-(such as writing a password to a log file).\n-\n-@item -Wno-analyzer-file-leak\n-@opindex Wanalyzer-file-leak\n-@opindex Wno-analyzer-file-leak\n-This warning requires @option{-fanalyzer}, which enables it; use\n-@option{-Wno-analyzer-file-leak}\n-to disable it.\n-\n-This diagnostic warns for paths through the code in which a\n-@code{<stdio.h>} @code{FILE *} stream object is leaked.\n-\n-@item -Wno-analyzer-free-of-non-heap\n-@opindex Wanalyzer-free-of-non-heap\n-@opindex Wno-analyzer-free-of-non-heap\n-This warning requires @option{-fanalyzer}, which enables it; use\n-@option{-Wno-analyzer-free-of-non-heap}\n-to disable it.\n-\n-This diagnostic warns for paths through the code in which @code{free}\n-is called on a non-heap pointer (e.g. an on-stack buffer, or a global).\n-\n-@item -Wno-analyzer-malloc-leak\n-@opindex Wanalyzer-malloc-leak\n-@opindex Wno-analyzer-malloc-leak\n-This warning requires @option{-fanalyzer}, which enables it; use\n-@option{-Wno-analyzer-malloc-leak}\n-to disable it.\n-\n-This diagnostic warns for paths through the code in which a\n-pointer allocated via @code{malloc} is leaked.\n-\n-@item -Wno-analyzer-possible-null-argument\n-@opindex Wanalyzer-possible-null-argument\n-@opindex Wno-analyzer-possible-null-argument\n-This warning requires @option{-fanalyzer}, which enables it; use\n-@option{-Wno-analyzer-possible-null-argument} to disable it.\n-\n-This diagnostic warns for paths through the code in which a\n-possibly-NULL value is passed to a function argument marked\n-with @code{__attribute__((nonnull))} as requiring a non-NULL\n-value.\n-\n-@item -Wno-analyzer-possible-null-dereference\n-@opindex Wanalyzer-possible-null-dereference\n-@opindex Wno-analyzer-possible-null-dereference\n-This warning requires @option{-fanalyzer}, which enables it; use\n-@option{-Wno-analyzer-possible-null-dereference} to disable it.\n-\n-This diagnostic warns for paths through the code in which a\n-possibly-NULL value is dereferenced.\n-\n-@item -Wno-analyzer-null-argument\n-@opindex Wanalyzer-null-argument\n-@opindex Wno-analyzer-null-argument\n-This warning requires @option{-fanalyzer}, which enables it; use\n-@option{-Wno-analyzer-null-argument} to disable it.\n-\n-This diagnostic warns for paths through the code in which a\n-value known to be NULL is passed to a function argument marked\n-with @code{__attribute__((nonnull))} as requiring a non-NULL\n-value.\n-\n-@item -Wno-analyzer-null-dereference\n-@opindex Wanalyzer-null-dereference\n-@opindex Wno-analyzer-null-dereference\n-This warning requires @option{-fanalyzer}, which enables it; use\n-@option{-Wno-analyzer-null-dereference} to disable it.\n-\n-This diagnostic warns for paths through the code in which a\n-value known to be NULL is dereferenced.\n-\n-@item -Wno-analyzer-stale-setjmp-buffer\n-@opindex Wanalyzer-stale-setjmp-buffer\n-@opindex Wno-analyzer-stale-setjmp-buffer\n-This warning requires @option{-fanalyzer}, which enables it; use\n-@option{-Wno-analyzer-stale-setjmp-buffer} to disable it.\n-\n-This diagnostic warns for paths through the code in which\n-@code{longjmp} is called to rewind to a @code{jmp_buf} relating\n-to a @code{setjmp} call in a function that has returned.\n-\n-When @code{setjmp} is called on a @code{jmp_buf} to record a rewind\n-location, it records the stack frame.  The stack frame becomes invalid\n-when the function containing the @code{setjmp} call returns.  Attempting\n-to rewind to it via @code{longjmp} would reference a stack frame that\n-no longer exists, and likely lead to a crash (or worse).\n-\n-@item -Wno-analyzer-tainted-array-index\n-@opindex Wanalyzer-tainted-array-index\n-@opindex Wno-analyzer-tainted-array-index\n-This warning requires both @option{-fanalyzer} and\n-@option{-fanalyzer-checker=taint} to enable it;\n-use @option{-Wno-analyzer-tainted-array-index} to disable it.\n-\n-This diagnostic warns for paths through the code in which a value\n-that could be under an attacker's control is used as the index\n-of an array access without being sanitized.\n-\n-@item -Wno-analyzer-unsafe-call-within-signal-handler\n-@opindex Wanalyzer-unsafe-call-within-signal-handler\n-@opindex Wno-analyzer-unsafe-call-within-signal-handler\n-This warning requires @option{-fanalyzer}, which enables it; use\n-@option{-Wno-analyzer-unsafe-call-within-signal-handler} to disable it.\n-\n-This diagnostic warns for paths through the code in which a\n-function known to be async-signal-unsafe (such as @code{fprintf}) is\n-called from a signal handler.\n-\n-@item -Wno-analyzer-use-after-free\n-@opindex Wanalyzer-use-after-free\n-@opindex Wno-analyzer-use-after-free\n-This warning requires @option{-fanalyzer}, which enables it; use\n-@option{-Wno-analyzer-use-after-free} to disable it.\n-\n-This diagnostic warns for paths through the code in which a\n-pointer is used after @code{free} is called on it.\n-\n-@item -Wno-analyzer-use-of-pointer-in-stale-stack-frame\n-@opindex Wanalyzer-use-of-pointer-in-stale-stack-frame\n-@opindex Wno-analyzer-use-of-pointer-in-stale-stack-frame\n-This warning requires @option{-fanalyzer}, which enables it; use\n-@option{-Wno-analyzer-use-of-pointer-in-stale-stack-frame}\n-to disable it.\n-\n-This diagnostic warns for paths through the code in which a pointer\n-is dereferenced that points to a variable in a stale stack frame.\n-\n-@item -Wno-analyzer-use-of-uninitialized-value\n-@opindex Wanalyzer-use-of-uninitialized-value\n-@opindex Wno-analyzer-use-of-uninitialized-value\n-This warning requires @option{-fanalyzer}, which enables it; use\n-@option{-Wno-analyzer-use-of-uninitialized-value} to disable it.\n-\n-This diagnostic warns for paths through the code in which an uninitialized\n-value is used.\n-\n-@item -Warith-conversion\n-@opindex Warith-conversion\n-@opindex Wno-arith-conversion\n-Do warn about implicit conversions from arithmetic operations even\n-when conversion of the operands to the same type cannot change their\n-values.  This affects warnings from @option{-Wconversion},\n-@option{-Wfloat-conversion}, and @option{-Wsign-conversion}.\n-\n-@smallexample\n-@group\n-void f (char c, int i)\n-@{\n-  c = c + i; // warns with @option{-Wconversion}\n-  c = c + 1; // only warns with @option{-Warith-conversion}\n-@}\n-@end group\n-@end smallexample\n-\n-@item -Warray-bounds\n-@itemx -Warray-bounds=@var{n}\n-@opindex Wno-array-bounds\n-@opindex Warray-bounds\n-This option is only active when @option{-ftree-vrp} is active\n-(default for @option{-O2} and above). It warns about subscripts to arrays\n-that are always out of bounds. This warning is enabled by @option{-Wall}.\n-\n-@table @gcctabopt\n-@item -Warray-bounds=1\n-This is the warning level of @option{-Warray-bounds} and is enabled\n-by @option{-Wall}; higher levels are not, and must be explicitly requested.\n-\n-@item -Warray-bounds=2\n-This warning level also warns about out of bounds access for\n-arrays at the end of a struct and for arrays accessed through\n-pointers. This warning level may give a larger number of\n-false positives and is deactivated by default.\n-@end table\n-\n-@item -Wattribute-alias=@var{n}\n-@itemx -Wno-attribute-alias\n-@opindex Wattribute-alias\n-@opindex Wno-attribute-alias\n-Warn about declarations using the @code{alias} and similar attributes whose\n-target is incompatible with the type of the alias.\n-@xref{Function Attributes,,Declaring Attributes of Functions}.\n+@item -Wattribute-alias=@var{n}\n+@itemx -Wno-attribute-alias\n+@opindex Wattribute-alias\n+@opindex Wno-attribute-alias\n+Warn about declarations using the @code{alias} and similar attributes whose\n+target is incompatible with the type of the alias.\n+@xref{Function Attributes,,Declaring Attributes of Functions}.\n \n @table @gcctabopt\n @item -Wattribute-alias=1\n@@ -7201,62 +7203,6 @@ disables the warnings about non-ISO @code{printf} / @code{scanf} format\n width specifiers @code{I32}, @code{I64}, and @code{I} used on Windows targets,\n which depend on the MS runtime.\n \n-@item -Waligned-new\n-@opindex Waligned-new\n-@opindex Wno-aligned-new\n-Warn about a new-expression of a type that requires greater alignment\n-than the @code{alignof(std::max_align_t)} but uses an allocation\n-function without an explicit alignment parameter. This option is\n-enabled by @option{-Wall}.\n-\n-Normally this only warns about global allocation functions, but\n-@option{-Waligned-new=all} also warns about class member allocation\n-functions.\n-\n-@item -Wplacement-new\n-@itemx -Wplacement-new=@var{n}\n-@opindex Wplacement-new\n-@opindex Wno-placement-new\n-Warn about placement new expressions with undefined behavior, such as\n-constructing an object in a buffer that is smaller than the type of\n-the object.  For example, the placement new expression below is diagnosed\n-because it attempts to construct an array of 64 integers in a buffer only\n-64 bytes large.\n-@smallexample\n-char buf [64];\n-new (buf) int[64];\n-@end smallexample\n-This warning is enabled by default.\n-\n-@table @gcctabopt\n-@item -Wplacement-new=1\n-This is the default warning level of @option{-Wplacement-new}.  At this\n-level the warning is not issued for some strictly undefined constructs that\n-GCC allows as extensions for compatibility with legacy code.  For example,\n-the following @code{new} expression is not diagnosed at this level even\n-though it has undefined behavior according to the C++ standard because\n-it writes past the end of the one-element array.\n-@smallexample\n-struct S @{ int n, a[1]; @};\n-S *s = (S *)malloc (sizeof *s + 31 * sizeof s->a[0]);\n-new (s->a)int [32]();\n-@end smallexample\n-\n-@item -Wplacement-new=2\n-At this level, in addition to diagnosing all the same constructs as at level\n-1, a diagnostic is also issued for placement new expressions that construct\n-an object in the last member of structure whose type is an array of a single\n-element and whose size is less than the size of the object being constructed.\n-While the previous example would be diagnosed, the following construct makes\n-use of the flexible member array extension to avoid the warning at level 2.\n-@smallexample\n-struct S @{ int n, a[]; @};\n-S *s = (S *)malloc (sizeof *s + 32 * sizeof s->a[0]);\n-new (s->a)int [32]();\n-@end smallexample\n-\n-@end table\n-\n @item -Wpointer-arith\n @opindex Wpointer-arith\n @opindex Wno-pointer-arith\n@@ -7266,10 +7212,11 @@ convenience in calculations with @code{void *} pointers and pointers\n to functions.  In C++, warn also when an arithmetic operation involves\n @code{NULL}.  This warning is also enabled by @option{-Wpedantic}.\n \n-@item -Wpointer-compare\n+@item -Wno-pointer-compare\n @opindex Wpointer-compare\n @opindex Wno-pointer-compare\n-Warn if a pointer is compared with a zero character constant.  This usually\n+Do not warn if a pointer is compared with a zero character constant.\n+This usually\n means that the pointer was meant to be dereferenced.  For example:\n \n @smallexample\n@@ -7439,28 +7386,12 @@ When compiling C++, warn about the deprecated conversion from string\n literals to @code{char *}.  This warning is enabled by default for C++\n programs.\n \n-@item -Wcatch-value\n-@itemx -Wcatch-value=@var{n} @r{(C++ and Objective-C++ only)}\n-@opindex Wcatch-value\n-@opindex Wno-catch-value\n-Warn about catch handlers that do not catch via reference.\n-With @option{-Wcatch-value=1} (or @option{-Wcatch-value} for short)\n-warn about polymorphic class types that are caught by value.\n-With @option{-Wcatch-value=2} warn about all class types that are caught\n-by value. With @option{-Wcatch-value=3} warn about all types that are\n-not caught by reference. @option{-Wcatch-value} is enabled by @option{-Wall}.\n-\n @item -Wclobbered\n @opindex Wclobbered\n @opindex Wno-clobbered\n Warn for variables that might be changed by @code{longjmp} or\n @code{vfork}.  This warning is also enabled by @option{-Wextra}.\n \n-@item -Wconditionally-supported @r{(C++ and Objective-C++ only)}\n-@opindex Wconditionally-supported\n-@opindex Wno-conditionally-supported\n-Warn for conditionally-supported (C++11 [intro.defs]) constructs.\n-\n @item -Wconversion\n @opindex Wconversion\n @opindex Wno-conversion\n@@ -7484,32 +7415,6 @@ unsigned integers are disabled by default in C++ unless\n Warnings about conversion from arithmetic on a small type back to that\n type are only given with @option{-Warith-conversion}.\n \n-@item -Wno-conversion-null @r{(C++ and Objective-C++ only)}\n-@opindex Wconversion-null\n-@opindex Wno-conversion-null\n-Do not warn for conversions between @code{NULL} and non-pointer\n-types. @option{-Wconversion-null} is enabled by default.\n-\n-@item -Wzero-as-null-pointer-constant @r{(C++ and Objective-C++ only)}\n-@opindex Wzero-as-null-pointer-constant\n-@opindex Wno-zero-as-null-pointer-constant\n-Warn when a literal @samp{0} is used as null pointer constant.  This can\n-be useful to facilitate the conversion to @code{nullptr} in C++11.\n-\n-@item -Wsubobject-linkage @r{(C++ and Objective-C++ only)}\n-@opindex Wsubobject-linkage\n-@opindex Wno-subobject-linkage\n-Warn if a class type has a base or a field whose type uses the anonymous\n-namespace or depends on a type with no linkage.  If a type A depends on\n-a type B with no or internal linkage, defining it in multiple\n-translation units would be an ODR violation because the meaning of B\n-is different in each translation unit.  If A only appears in a single\n-translation unit, the best way to silence the warning is to give it\n-internal linkage by putting it in an anonymous namespace as well.  The\n-compiler doesn't give this warning for types defined in the main .C\n-file, as those are unlikely to have multiple definitions.\n-@option{-Wsubobject-linkage} is enabled by default.\n-\n @item -Wdangling-else\n @opindex Wdangling-else\n @opindex Wno-dangling-else\n@@ -7562,23 +7467,17 @@ Warn when macros @code{__TIME__}, @code{__DATE__} or @code{__TIMESTAMP__}\n are encountered as they might prevent bit-wise-identical reproducible\n compilations.\n \n-@item -Wdelete-incomplete @r{(C++ and Objective-C++ only)}\n-@opindex Wdelete-incomplete\n-@opindex Wno-delete-incomplete\n-Warn when deleting a pointer to incomplete type, which may cause\n-undefined behavior at runtime.  This warning is enabled by default.\n-\n-@item -Wuseless-cast @r{(C++ and Objective-C++ only)}\n-@opindex Wuseless-cast\n-@opindex Wno-useless-cast\n-Warn when an expression is casted to its own type.\n-\n @item -Wempty-body\n @opindex Wempty-body\n @opindex Wno-empty-body\n Warn if an empty body occurs in an @code{if}, @code{else} or @code{do\n while} statement.  This warning is also enabled by @option{-Wextra}.\n \n+@item -Wno-endif-labels\n+@opindex Wendif-labels\n+@opindex Wno-endif-labels\n+Do not warn about stray tokens after @code{#else} and @code{#endif}.\n+\n @item -Wenum-compare\n @opindex Wenum-compare\n @opindex Wno-enum-compare\n@@ -7593,11 +7492,6 @@ enabled by @option{-Wall}.\n Warn when a value of enumerated type is implicitly converted to a \n different enumerated type.  This warning is enabled by @option{-Wextra}.\n \n-@item -Wextra-semi @r{(C++, Objective-C++ only)}\n-@opindex Wextra-semi\n-@opindex Wno-extra-semi\n-Warn about redundant semicolon after in-class function definition.\n-\n @item -Wjump-misses-init @r{(C, Objective-C only)}\n @opindex Wjump-misses-init\n @opindex Wno-jump-misses-init\n@@ -7643,22 +7537,6 @@ real to lower precision real values.  This option is also enabled by\n @opindex Wscalar-storage-order\n Do not warn on suspicious constructs involving reverse scalar storage order.\n \n-@item -Wsized-deallocation @r{(C++ and Objective-C++ only)}\n-@opindex Wsized-deallocation\n-@opindex Wno-sized-deallocation\n-Warn about a definition of an unsized deallocation function\n-@smallexample\n-void operator delete (void *) noexcept;\n-void operator delete[] (void *) noexcept;\n-@end smallexample\n-without a definition of the corresponding sized deallocation function\n-@smallexample\n-void operator delete (void *, std::size_t) noexcept;\n-void operator delete[] (void *, std::size_t) noexcept;\n-@end smallexample\n-or vice versa.  Enabled by @option{-Wextra} along with\n-@option{-fsized-deallocation}.\n-\n @item -Wsizeof-pointer-div\n @opindex Wsizeof-pointer-div\n @opindex Wno-sizeof-pointer-div\n@@ -7693,10 +7571,10 @@ void make_file (const char *name)\n \n The @option{-Wsizeof-pointer-memaccess} option is enabled by @option{-Wall}.\n \n-@item -Wsizeof-array-argument\n+@item -Wno-sizeof-array-argument\n @opindex Wsizeof-array-argument\n @opindex Wno-sizeof-array-argument\n-Warn when the @code{sizeof} operator is applied to a parameter that is\n+Do not warn when the @code{sizeof} operator is applied to a parameter that is\n declared as an array in a function definition.  This warning is enabled by\n default for C and C++ programs.\n \n@@ -7737,10 +7615,10 @@ behavior and are not portable in C, so they usually indicate that the\n programmer intended to use @code{strcmp}.  This warning is enabled by\n @option{-Wall}.\n \n-@item -Waddress-of-packed-member\n+@item -Wno-address-of-packed-member\n @opindex Waddress-of-packed-member\n @opindex Wno-address-of-packed-member\n-Warn when the address of packed member of struct or union is taken,\n+Do not warn when the address of packed member of struct or union is taken,\n which usually results in an unaligned pointer value.  This is\n enabled by default.\n \n@@ -8040,10 +7918,10 @@ This warning is included in @option{-Wextra}.  To get other\n @option{-Wextra} warnings without this one, use @option{-Wextra\n -Wno-override-init}.\n \n-@item -Woverride-init-side-effects @r{(C and Objective-C only)}\n+@item -Wno-override-init-side-effects @r{(C and Objective-C only)}\n @opindex Woverride-init-side-effects\n @opindex Wno-override-init-side-effects\n-Warn if an initialized field with side effects is overridden when\n+Do not warn if an initialized field with side effects is overridden when\n using designated initializers (@pxref{Designated Inits, , Designated\n Initializers}).  This warning is enabled by default.\n \n@@ -8070,11 +7948,11 @@ struct bar @{\n @end group\n @end smallexample\n \n-@item -Wpacked-bitfield-compat\n+@item -Wnopacked-bitfield-compat\n @opindex Wpacked-bitfield-compat\n @opindex Wno-packed-bitfield-compat\n The 4.1, 4.2 and 4.3 series of GCC ignore the @code{packed} attribute\n-on bit-fields of type @code{char}.  This has been fixed in GCC 4.4 but\n+on bit-fields of type @code{char}.  This was fixed in GCC 4.4 but\n the change can lead to differences in the structure layout.  GCC\n informs you when the offset of such a field has changed in GCC 4.4.\n For example there is no longer a 4-bit padding between field @code{a}\n@@ -8152,13 +8030,6 @@ is included in @option{-Wall}.\n @opindex Wno-nested-externs\n Warn if an @code{extern} declaration is encountered within a function.\n \n-@item -Wno-inherited-variadic-ctor\n-@opindex Winherited-variadic-ctor\n-@opindex Wno-inherited-variadic-ctor\n-Suppress warnings about use of C++11 inheriting constructors when the\n-base class inherited from has a C variadic constructor; the warning is\n-on by default because the ellipsis is not inherited.\n-\n @item -Winline\n @opindex Winline\n @opindex Wno-inline\n@@ -8173,20 +8044,6 @@ that has already been done in the current function.  Therefore,\n seemingly insignificant changes in the source program can cause the\n warnings produced by @option{-Winline} to appear or disappear.\n \n-@item -Wno-invalid-offsetof @r{(C++ and Objective-C++ only)}\n-@opindex Wno-invalid-offsetof\n-@opindex Winvalid-offsetof\n-Suppress warnings from applying the @code{offsetof} macro to a non-POD\n-type.  According to the 2014 ISO C++ standard, applying @code{offsetof}\n-to a non-standard-layout type is undefined.  In existing C++ implementations,\n-however, @code{offsetof} typically gives meaningful results.\n-This flag is for users who are aware that they are\n-writing nonportable code and who have deliberately chosen to ignore the\n-warning about it.\n-\n-The restrictions on @code{offsetof} may be relaxed in a future version\n-of the C++ standard.\n-\n @item -Wint-in-bool-context\n @opindex Wint-in-bool-context\n @opindex Wno-int-in-bool-context\n@@ -8232,12 +8089,11 @@ alternate syntax is used in ISO C99 mode.  This is enabled by either\n @option{-Wpedantic} or @option{-Wtraditional}.  To inhibit the warning\n messages, use @option{-Wno-variadic-macros}.\n \n-@item -Wvarargs\n+@item -Wno-varargs\n @opindex Wvarargs\n @opindex Wno-varargs\n-Warn upon questionable usage of the macros used to handle variable\n-arguments like @code{va_start}.  This is default.  To inhibit the\n-warning messages, use @option{-Wno-varargs}.\n+Do not warn upon questionable usage of the macros used to handle variable\n+arguments like @code{va_start}.  These warnings are enabled by default.\n \n @item -Wvector-operation-performance\n @opindex Wvector-operation-performance\n@@ -8251,16 +8107,6 @@ using scalars of wider type, which normally is more performance efficient;\n and @code{as a single scalar}, which means that vector fits into a\n scalar type.\n \n-@item -Wno-virtual-move-assign\n-@opindex Wvirtual-move-assign\n-@opindex Wno-virtual-move-assign\n-Suppress warnings about inheriting from a virtual base with a\n-non-trivial C++11 move assignment operator.  This is dangerous because\n-if the virtual base is reachable along more than one path, it is\n-moved multiple times, which can mean both objects end up in the\n-moved-from state.  If the move assignment operator is written to avoid\n-moving from a moved-from object, this warning can be disabled.\n-\n @item -Wvla\n @opindex Wvla\n @opindex Wno-vla\n@@ -8271,7 +8117,7 @@ the variable-length array.\n @item -Wvla-larger-than=@var{byte-size}\n @opindex Wvla-larger-than=\n @opindex Wno-vla-larger-than\n-If this option is used, the compiler will warn for declarations of\n+If this option is used, the compiler warns for declarations of\n variable-length arrays whose size is either unbounded, or bounded\n by an argument that allows the array size to exceed @var{byte-size}\n bytes.  This is similar to how @option{-Walloca-larger-than=}@var{byte-size}\n@@ -8351,14 +8197,26 @@ warns about such constants in system header files.  This can be useful\n when preparing code to use with the @code{FLOAT_CONST_DECIMAL64} pragma\n from the decimal floating-point extension to C99.\n \n+@item -Wno-lto-type-mismatch\n+@opindex Wlto-type-mismatch\n+@opindex Wno-lto-type-mismatch\n+\n+During the link-time optimization, do not warn about type mismatches in\n+global declarations from different compilation units.\n+Requires @option{-flto} to be enabled.  Enabled by default.\n+\n @item -Wno-designated-init @r{(C and Objective-C only)}\n+@opindex Wdesignated-init\n+@opindex Wno-designated-init\n Suppress warnings when a positional initializer is used to initialize\n a structure that has been marked with the @code{designated_init}\n attribute.\n \n-@item -Whsa\n-Issue a warning when HSAIL cannot be emitted for the compiled function or\n-OpenMP construct.\n+@item -Wno-hsa\n+@opindex Whsa\n+@opindex Wno-hsa\n+Do not warn when HSAIL cannot be emitted for the compiled function or\n+OpenMP construct.  These warnings are enabled by default.\n \n @end table\n \n@@ -8406,11 +8264,173 @@ If @option{-fanalyzer} is enabled, the analyzer uses various heuristics\n to attempt to explore the control flow and data flow in the program,\n but these can be defeated by sufficiently complicated code.\n \n-By default, the analysis will silently stop if the code is too\n+By default, the analysis silently stops if the code is too\n complicated for the analyzer to fully explore and it reaches an internal\n-limit.\n+limit.  The @option{-Wanalyzer-too-complex} option warns if this occurs.\n+\n+@item -Wno-analyzer-double-fclose\n+@opindex Wanalyzer-double-fclose\n+@opindex Wno-analyzer-double-fclose\n+This warning requires @option{-fanalyzer}, which enables it; use\n+@option{-Wno-analyzer-double-fclose} to disable it.\n+\n+This diagnostic warns for paths through the code in which a @code{FILE *}\n+can have @code{fclose} called on it more than once.\n+\n+@item -Wno-analyzer-double-free\n+@opindex Wanalyzer-double-free\n+@opindex Wno-analyzer-double-free\n+This warning requires @option{-fanalyzer}, which enables it; use\n+@option{-Wno-analyzer-double-free} to disable it.\n+\n+This diagnostic warns for paths through the code in which a pointer\n+can have @code{free} called on it more than once.\n+\n+@item -Wno-analyzer-exposure-through-output-file\n+@opindex Wanalyzer-exposure-through-output-file\n+@opindex Wno-analyzer-exposure-through-output-file\n+This warning requires @option{-fanalyzer}, which enables it; use\n+@option{-Wno-analyzer-exposure-through-output-file}\n+to disable it.\n+\n+This diagnostic warns for paths through the code in which a\n+security-sensitive value is written to an output file\n+(such as writing a password to a log file).\n+\n+@item -Wno-analyzer-file-leak\n+@opindex Wanalyzer-file-leak\n+@opindex Wno-analyzer-file-leak\n+This warning requires @option{-fanalyzer}, which enables it; use\n+@option{-Wno-analyzer-file-leak}\n+to disable it.\n+\n+This diagnostic warns for paths through the code in which a\n+@code{<stdio.h>} @code{FILE *} stream object is leaked.\n+\n+@item -Wno-analyzer-free-of-non-heap\n+@opindex Wanalyzer-free-of-non-heap\n+@opindex Wno-analyzer-free-of-non-heap\n+This warning requires @option{-fanalyzer}, which enables it; use\n+@option{-Wno-analyzer-free-of-non-heap}\n+to disable it.\n+\n+This diagnostic warns for paths through the code in which @code{free}\n+is called on a non-heap pointer (e.g. an on-stack buffer, or a global).\n+\n+@item -Wno-analyzer-malloc-leak\n+@opindex Wanalyzer-malloc-leak\n+@opindex Wno-analyzer-malloc-leak\n+This warning requires @option{-fanalyzer}, which enables it; use\n+@option{-Wno-analyzer-malloc-leak}\n+to disable it.\n+\n+This diagnostic warns for paths through the code in which a\n+pointer allocated via @code{malloc} is leaked.\n+\n+@item -Wno-analyzer-possible-null-argument\n+@opindex Wanalyzer-possible-null-argument\n+@opindex Wno-analyzer-possible-null-argument\n+This warning requires @option{-fanalyzer}, which enables it; use\n+@option{-Wno-analyzer-possible-null-argument} to disable it.\n+\n+This diagnostic warns for paths through the code in which a\n+possibly-NULL value is passed to a function argument marked\n+with @code{__attribute__((nonnull))} as requiring a non-NULL\n+value.\n \n-The @option{-Wanalyzer-too-complex} option will warn if this occurs.\n+@item -Wno-analyzer-possible-null-dereference\n+@opindex Wanalyzer-possible-null-dereference\n+@opindex Wno-analyzer-possible-null-dereference\n+This warning requires @option{-fanalyzer}, which enables it; use\n+@option{-Wno-analyzer-possible-null-dereference} to disable it.\n+\n+This diagnostic warns for paths through the code in which a\n+possibly-NULL value is dereferenced.\n+\n+@item -Wno-analyzer-null-argument\n+@opindex Wanalyzer-null-argument\n+@opindex Wno-analyzer-null-argument\n+This warning requires @option{-fanalyzer}, which enables it; use\n+@option{-Wno-analyzer-null-argument} to disable it.\n+\n+This diagnostic warns for paths through the code in which a\n+value known to be NULL is passed to a function argument marked\n+with @code{__attribute__((nonnull))} as requiring a non-NULL\n+value.\n+\n+@item -Wno-analyzer-null-dereference\n+@opindex Wanalyzer-null-dereference\n+@opindex Wno-analyzer-null-dereference\n+This warning requires @option{-fanalyzer}, which enables it; use\n+@option{-Wno-analyzer-null-dereference} to disable it.\n+\n+This diagnostic warns for paths through the code in which a\n+value known to be NULL is dereferenced.\n+\n+@item -Wno-analyzer-stale-setjmp-buffer\n+@opindex Wanalyzer-stale-setjmp-buffer\n+@opindex Wno-analyzer-stale-setjmp-buffer\n+This warning requires @option{-fanalyzer}, which enables it; use\n+@option{-Wno-analyzer-stale-setjmp-buffer} to disable it.\n+\n+This diagnostic warns for paths through the code in which\n+@code{longjmp} is called to rewind to a @code{jmp_buf} relating\n+to a @code{setjmp} call in a function that has returned.\n+\n+When @code{setjmp} is called on a @code{jmp_buf} to record a rewind\n+location, it records the stack frame.  The stack frame becomes invalid\n+when the function containing the @code{setjmp} call returns.  Attempting\n+to rewind to it via @code{longjmp} would reference a stack frame that\n+no longer exists, and likely lead to a crash (or worse).\n+\n+@item -Wno-analyzer-tainted-array-index\n+@opindex Wanalyzer-tainted-array-index\n+@opindex Wno-analyzer-tainted-array-index\n+This warning requires both @option{-fanalyzer} and\n+@option{-fanalyzer-checker=taint} to enable it;\n+use @option{-Wno-analyzer-tainted-array-index} to disable it.\n+\n+This diagnostic warns for paths through the code in which a value\n+that could be under an attacker's control is used as the index\n+of an array access without being sanitized.\n+\n+@item -Wno-analyzer-unsafe-call-within-signal-handler\n+@opindex Wanalyzer-unsafe-call-within-signal-handler\n+@opindex Wno-analyzer-unsafe-call-within-signal-handler\n+This warning requires @option{-fanalyzer}, which enables it; use\n+@option{-Wno-analyzer-unsafe-call-within-signal-handler} to disable it.\n+\n+This diagnostic warns for paths through the code in which a\n+function known to be async-signal-unsafe (such as @code{fprintf}) is\n+called from a signal handler.\n+\n+@item -Wno-analyzer-use-after-free\n+@opindex Wanalyzer-use-after-free\n+@opindex Wno-analyzer-use-after-free\n+This warning requires @option{-fanalyzer}, which enables it; use\n+@option{-Wno-analyzer-use-after-free} to disable it.\n+\n+This diagnostic warns for paths through the code in which a\n+pointer is used after @code{free} is called on it.\n+\n+@item -Wno-analyzer-use-of-pointer-in-stale-stack-frame\n+@opindex Wanalyzer-use-of-pointer-in-stale-stack-frame\n+@opindex Wno-analyzer-use-of-pointer-in-stale-stack-frame\n+This warning requires @option{-fanalyzer}, which enables it; use\n+@option{-Wno-analyzer-use-of-pointer-in-stale-stack-frame}\n+to disable it.\n+\n+This diagnostic warns for paths through the code in which a pointer\n+is dereferenced that points to a variable in a stale stack frame.\n+\n+@item -Wno-analyzer-use-of-uninitialized-value\n+@opindex Wanalyzer-use-of-uninitialized-value\n+@opindex Wno-analyzer-use-of-uninitialized-value\n+This warning requires @option{-fanalyzer}, which enables it; use\n+@option{-Wno-analyzer-use-of-uninitialized-value} to disable it.\n+\n+This diagnostic warns for paths through the code in which an uninitialized\n+value is used.\n \n @end table\n \n@@ -8461,7 +8481,7 @@ of multiple statements within a basic block.  With\n @opindex fno-analyzer-state-merge\n This option is intended for analyzer developers.\n \n-By default the analyzer will attempt to simplify analysis by merging\n+By default the analyzer attempts to simplify analysis by merging\n sufficiently similar states at each program point as it builds its\n ``exploded graph''.  With @option{-fno-analyzer-state-merge} this\n merging can be suppressed, for debugging state-handling issues.\n@@ -8471,7 +8491,7 @@ merging can be suppressed, for debugging state-handling issues.\n @opindex fno-analyzer-state-purge\n This option is intended for analyzer developers.\n \n-By default the analyzer will attempt to simplify analysis by purging\n+By default the analyzer attempts to simplify analysis by purging\n aspects of state at a program point that appear to no longer be relevant\n e.g. the values of locals that aren't accessed later in the function\n and which aren't relevant to leak analysis."}]}