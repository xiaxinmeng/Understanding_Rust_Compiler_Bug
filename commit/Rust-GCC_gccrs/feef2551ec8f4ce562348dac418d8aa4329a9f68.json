{"sha": "feef2551ec8f4ce562348dac418d8aa4329a9f68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVlZjI1NTFlYzhmNGNlNTYyMzQ4ZGFjNDE4ZDhhYTQzMjlhOWY2OA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-05-20T07:49:26Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-05-20T07:49:26Z"}, "message": "options.c (gfc_init_options,gfc_post_options): Enable flag_associative_math by default.\n\n2010-05-20  Tobias Burnus  <burnus@net-b.de>\n\n        * options.c (gfc_init_options,gfc_post_options): Enable\n        flag_associative_math by default.\n\nFrom-SVN: r159620", "tree": {"sha": "cd7a498f826c9bf0945eb06cd14fee797a843d47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd7a498f826c9bf0945eb06cd14fee797a843d47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/feef2551ec8f4ce562348dac418d8aa4329a9f68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feef2551ec8f4ce562348dac418d8aa4329a9f68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feef2551ec8f4ce562348dac418d8aa4329a9f68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feef2551ec8f4ce562348dac418d8aa4329a9f68/comments", "author": null, "committer": null, "parents": [{"sha": "9af157ac129e480fa652936b43509ff0faef9dff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9af157ac129e480fa652936b43509ff0faef9dff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9af157ac129e480fa652936b43509ff0faef9dff"}], "stats": {"total": 187, "additions": 99, "deletions": 88}, "files": [{"sha": "18f52859a05c746300017eb4fa5a3dfcd464483d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 93, "deletions": 88, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feef2551ec8f4ce562348dac418d8aa4329a9f68/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feef2551ec8f4ce562348dac418d8aa4329a9f68/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=feef2551ec8f4ce562348dac418d8aa4329a9f68", "patch": "@@ -1,3 +1,8 @@\n+2010-05-20  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* options.c (gfc_init_options,gfc_post_options): Enable\n+\tflag_associative_math by default.\n+\n 2010-05-19 Jerry DeLisle <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/43851\n@@ -126,7 +131,7 @@\n \n 2010-05-16  Daniel Franke  <franke.daniel@gmail.com>\n \n-        PR fortran/35779\n+\tPR fortran/35779\n \t* array.c (match_array_list): Revert change from 2010-05-13.\n \n 2010-05-16  Richard Guenther  <rguenther@suse.de>\n@@ -179,12 +184,12 @@\n \n 2010-05-13  Daniel Franke  <franke.daniel@gmail.com>\n \n-        PR fortran/35779\n-        * intrinsic.c (gfc_init_expr): Renamed to gfc_init_expr_flag.\n-        Updated all usages.\n-        * expr.c (init_flag): Removed; use gfc_init_expr_flag everywhere.\n-        * array.c (match_array_list): Pass on gfc_init_expr_flag when matching\n-        iterators.\n+\tPR fortran/35779\n+\t* intrinsic.c (gfc_init_expr): Renamed to gfc_init_expr_flag.\n+\tUpdated all usages.\n+\t* expr.c (init_flag): Removed; use gfc_init_expr_flag everywhere.\n+\t* array.c (match_array_list): Pass on gfc_init_expr_flag when matching\n+\titerators.\n \n 2010-05-13  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -198,17 +203,17 @@\n \n 2010-05-11  Daniel Franke  <franke.daniel@gmail.com>\n \n-        PR fortran/43711\n-        * openmp.c (gfc_match_omp_taskwait): Report unexpected characters\n-        after OMP statement.\n-        (gfc_match_omp_critical): Likewise.\n-        (gfc_match_omp_flush): Likewise.\n-        (gfc_match_omp_workshare): Likewise.\n-        (gfc_match_omp_master): Likewise.\n-        (gfc_match_omp_ordered): Likewise.\n-        (gfc_match_omp_atomic): Likewise.\n-        (gfc_match_omp_barrier): Likewise.\n-        (gfc_match_omp_end_nowait): Likewise.\n+\tPR fortran/43711\n+\t* openmp.c (gfc_match_omp_taskwait): Report unexpected characters\n+\tafter OMP statement.\n+\t(gfc_match_omp_critical): Likewise.\n+\t(gfc_match_omp_flush): Likewise.\n+\t(gfc_match_omp_workshare): Likewise.\n+\t(gfc_match_omp_master): Likewise.\n+\t(gfc_match_omp_ordered): Likewise.\n+\t(gfc_match_omp_atomic): Likewise.\n+\t(gfc_match_omp_barrier): Likewise.\n+\t(gfc_match_omp_end_nowait): Likewise.\n \n 2010-05-11  Daniel Franke  <franke.daniel@gmail.com>\n \n@@ -247,7 +252,7 @@\n \n \tPR fortran/40728\n \t* intrinc.c (gfc_is_intrinsic): Do not prematurely mark symbol\n-        as external\n+\tas external.\n \n 2010-05-07  Jason Merrill  <jason@redhat.com>\n \n@@ -735,64 +740,64 @@\n \n 2010-04-12  Daniel Franke  <franke.daniel@gmail.com>\n \n-        * gfortran.h (gfc_get_null_expr): New prototype.\n-        (gfc_get_operator_expr): New prototype.\n-        (gfc_get_character_expr): New prototype.\n-        (gfc_get_iokind_expr): New prototype.\n-        * expr.c (gfc_get_null_expr): New.\n-        (gfc_get_character_expr): New.\n-        (gfc_get_iokind_expr): New.\n-        (gfc_get_operator_expr): Moved here from matchexp.c (build_node).\n-        * matchexp.c (build_node): Renamed and moved to\n-        expr.c (gfc_get_operator_expr). Reordered arguments to match \n-        other functions. Fixed all callers.\n-        (gfc_get_parentheses): Use specific function to build expr.\n-        * array.c (gfc_match_array_constructor): Likewise.\n-        * arith.c (eval_intrinsic): Likewise.\n-        (gfc_hollerith2int): Likewise.\n-        (gfc_hollerith2real): Likewise.\n-        (gfc_hollerith2complex): Likewise.\n-        (gfc_hollerith2logical): Likewise.\n-        * data.c (create_character_intializer): Likewise.\n-        * decl.c (gfc_match_null): Likewise.\n-        (enum_initializer): Likewise.\n-        * io.c (gfc_match_format): Likewise.\n-        (match_io): Likewise.\n-        * match.c (gfc_match_nullify): Likewise.\n-        * primary.c (match_string_constant): Likewise.\n-        (match_logical_constant): Likewise.\n-        (build_actual_constructor): Likewise.\n-        * resolve.c (build_default_init_expr): Likewise.\n-        * symbol.c (generate_isocbinding_symbol): Likewise.\n-        (gfc_build_class_symbol): Likewise.\n-        (gfc_find_derived_vtab): Likewise.\n-        * simplify.c (simplify_achar_char): Likewise.\n-        (gfc_simplify_adjustl): Likewise.\n-        (gfc_simplify_adjustr): Likewise.\n-        (gfc_simplify_and): Likewise.\n-        (gfc_simplify_bit_size): Likewise.\n-        (gfc_simplify_is_iostat_end): Likewise.\n-        (gfc_simplify_is_iostat_eor): Likewise.\n-        (gfc_simplify_isnan): Likewise.\n-        (simplify_bound): Likewise.\n-        (gfc_simplify_leadz): Likewise.\n-        (gfc_simplify_len_trim): Likewise.\n-        (gfc_simplify_logical): Likewise.\n-        (gfc_simplify_maxexponent): Likewise.\n-        (gfc_simplify_minexponent): Likewise.\n-        (gfc_simplify_new_line): Likewise.\n-        (gfc_simplify_null): Likewise.\n-        (gfc_simplify_or): Likewise.\n-        (gfc_simplify_precision): Likewise.\n-        (gfc_simplify_repeat): Likewise.\n-        (gfc_simplify_scan): Likewise.\n-        (gfc_simplify_size): Likewise.\n-        (gfc_simplify_trailz): Likewise.\n-        (gfc_simplify_trim): Likewise.\n-        (gfc_simplify_verify): Likewise.\n-        (gfc_simplify_xor): Likewise.\n-        * trans-io.c (build_dt): Likewise.\n-        (gfc_new_nml_name_expr): Removed.\n+\t* gfortran.h (gfc_get_null_expr): New prototype.\n+\t(gfc_get_operator_expr): New prototype.\n+\t(gfc_get_character_expr): New prototype.\n+\t(gfc_get_iokind_expr): New prototype.\n+\t* expr.c (gfc_get_null_expr): New.\n+\t(gfc_get_character_expr): New.\n+\t(gfc_get_iokind_expr): New.\n+\t(gfc_get_operator_expr): Moved here from matchexp.c (build_node).\n+\t* matchexp.c (build_node): Renamed and moved to\n+\texpr.c (gfc_get_operator_expr). Reordered arguments to match \n+\tother functions. Fixed all callers.\n+\t(gfc_get_parentheses): Use specific function to build expr.\n+\t* array.c (gfc_match_array_constructor): Likewise.\n+\t* arith.c (eval_intrinsic): Likewise.\n+\t(gfc_hollerith2int): Likewise.\n+\t(gfc_hollerith2real): Likewise.\n+\t(gfc_hollerith2complex): Likewise.\n+\t(gfc_hollerith2logical): Likewise.\n+\t* data.c (create_character_intializer): Likewise.\n+\t* decl.c (gfc_match_null): Likewise.\n+\t(enum_initializer): Likewise.\n+\t* io.c (gfc_match_format): Likewise.\n+\t(match_io): Likewise.\n+\t* match.c (gfc_match_nullify): Likewise.\n+\t* primary.c (match_string_constant): Likewise.\n+\t(match_logical_constant): Likewise.\n+\t(build_actual_constructor): Likewise.\n+\t* resolve.c (build_default_init_expr): Likewise.\n+\t* symbol.c (generate_isocbinding_symbol): Likewise.\n+\t(gfc_build_class_symbol): Likewise.\n+\t(gfc_find_derived_vtab): Likewise.\n+\t* simplify.c (simplify_achar_char): Likewise.\n+\t(gfc_simplify_adjustl): Likewise.\n+\t(gfc_simplify_adjustr): Likewise.\n+\t(gfc_simplify_and): Likewise.\n+\t(gfc_simplify_bit_size): Likewise.\n+\t(gfc_simplify_is_iostat_end): Likewise.\n+\t(gfc_simplify_is_iostat_eor): Likewise.\n+\t(gfc_simplify_isnan): Likewise.\n+\t(simplify_bound): Likewise.\n+\t(gfc_simplify_leadz): Likewise.\n+\t(gfc_simplify_len_trim): Likewise.\n+\t(gfc_simplify_logical): Likewise.\n+\t(gfc_simplify_maxexponent): Likewise.\n+\t(gfc_simplify_minexponent): Likewise.\n+\t(gfc_simplify_new_line): Likewise.\n+\t(gfc_simplify_null): Likewise.\n+\t(gfc_simplify_or): Likewise.\n+\t(gfc_simplify_precision): Likewise.\n+\t(gfc_simplify_repeat): Likewise.\n+\t(gfc_simplify_scan): Likewise.\n+\t(gfc_simplify_size): Likewise.\n+\t(gfc_simplify_trailz): Likewise.\n+\t(gfc_simplify_trim): Likewise.\n+\t(gfc_simplify_verify): Likewise.\n+\t(gfc_simplify_xor): Likewise.\n+\t* trans-io.c (build_dt): Likewise.\n+\t(gfc_new_nml_name_expr): Removed.\n \n 2010-04-12  Daniel Franke  <franke.daniel@gmail.com>\n \n@@ -1186,16 +1191,16 @@\n \n 2010-03-18  Paul Thomas  <pault@gcc.gnu.org>\n \n-        PR fortran/43039\n-        * trans-expr.c (conv_parent_component_references): Ensure that\n+\tPR fortran/43039\n+\t* trans-expr.c (conv_parent_component_references): Ensure that\n \t'dt' has a backend_decl.\n \n-        PR fortran/43043\n-        * trans-expr.c (gfc_conv_structure): Ensure that the derived\n+\tPR fortran/43043\n+\t* trans-expr.c (gfc_conv_structure): Ensure that the derived\n \ttype has a backend_decl.\n \n-        PR fortran/43044\n-        * resolve.c (resolve_global_procedure): Check that the 'cl'\n+\tPR fortran/43044\n+\t* resolve.c (resolve_global_procedure): Check that the 'cl'\n \tstructure is not NULL.\n \n 2010-03-18  Shujing Zhao  <pearly.zhao@oracle.com>\n@@ -1315,11 +1320,11 @@\n \tand DECL_SIZE when encountering a larger common block and call\n \tlayout_decl.\n \n-2010-02-24  Tobias Burnus  <burnus@net-b.de>              \n+2010-02-24  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/43042\n \t* trans-expr.c (gfc_conv_initializer): Call directly\n-\tgfc_conv_constant for C_NULL_(FUN)PTR.              \n+\tgfc_conv_constant for C_NULL_(FUN)PTR.\n \n 2010-02-22  Paul Thomas  <pault@gcc.gnu.org>\n \n@@ -1607,8 +1612,8 @@\n \n 2010-01-14  Paul Thomas  <pault@gcc.gnu.org>\n \n-        PR fortran/41478\n-        * trans-array.c (duplicate_allocatable):  Static version of\n+\tPR fortran/41478\n+\t* trans-array.c (duplicate_allocatable):  Static version of\n \tgfc_duplicate_allocatable with provision to handle scalar\n \tcomponents. New boolean argument to switch off call to malloc\n \tif true.\n@@ -1637,7 +1642,7 @@\n \tuse associated but not generic is given an interface that\n \tincludes itself, then make it generic.\n \n-2010-01-11  Joseph Myers  <joseph@codesourcery.com>  \n+2010-01-11  Joseph Myers  <joseph@codesourcery.com>\n \t    Shujing Zhao  <pearly.zhao@oracle.com>\n \n \tPR translation/42469"}, {"sha": "365b326702eef151406f3e02a44a569f38d91017", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feef2551ec8f4ce562348dac418d8aa4329a9f68/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feef2551ec8f4ce562348dac418d8aa4329a9f68/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=feef2551ec8f4ce562348dac418d8aa4329a9f68", "patch": "@@ -134,6 +134,7 @@ gfc_init_options (unsigned int argc, const char **argv)\n   gfc_option.coarray = GFC_FCOARRAY_NONE;\n \n   flag_errno_math = 0;\n+  flag_associative_math = -1;\n \n   set_default_std_flags ();\n \n@@ -247,6 +248,11 @@ gfc_post_options (const char **pfilename)\n   if (flag_lto || flag_whopr)\n     gfc_option.flag_whole_file = 1;\n \n+  /* Fortran allows associative math - but we cannot reassociate if\n+     we want traps or signed zeros. Cf. also flag_protect_parens.  */\n+  if (flag_associative_math == -1)\n+    flag_associative_math = (!flag_trapping_math && !flag_signed_zeros);\n+\n   /* -fbounds-check is equivalent to -fcheck=bounds */\n   if (flag_bounds_check)\n     gfc_option.rtcheck |= GFC_RTCHECK_BOUNDS;"}]}