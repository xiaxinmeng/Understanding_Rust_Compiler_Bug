{"sha": "e663b41c30cda677ebce3b18f124d7a65c34d75f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY2M2I0MWMzMGNkYTY3N2ViY2UzYjE4ZjEyNGQ3YTY1YzM0ZDc1Zg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1996-01-19T20:21:04Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1996-01-19T20:21:04Z"}, "message": "Avoid minimal C++ debugging in a couple of cases where it doesn't work\n\nFrom-SVN: r11072", "tree": {"sha": "47f08730c004972703c07b4ea00261e94ec31bf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47f08730c004972703c07b4ea00261e94ec31bf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e663b41c30cda677ebce3b18f124d7a65c34d75f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e663b41c30cda677ebce3b18f124d7a65c34d75f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e663b41c30cda677ebce3b18f124d7a65c34d75f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e663b41c30cda677ebce3b18f124d7a65c34d75f/comments", "author": null, "committer": null, "parents": [{"sha": "6547b720784d62666b52373750b13ebd62296163", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6547b720784d62666b52373750b13ebd62296163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6547b720784d62666b52373750b13ebd62296163"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "4dea256ac8954e74a4fb1c11bc8309e462098307", "filename": "gcc/dbxout.c", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e663b41c30cda677ebce3b18f124d7a65c34d75f/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e663b41c30cda677ebce3b18f124d7a65c34d75f/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=e663b41c30cda677ebce3b18f124d7a65c34d75f", "patch": "@@ -1,5 +1,5 @@\n /* Output dbx-format symbol table information from GNU compiler.\n-   Copyright (C) 1987, 88, 92, 93, 94, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -127,9 +127,20 @@ extern int errno;\n #endif\n \n /* Nonzero means if the type has methods, only output debugging\n-   information if methods are actually written to the asm file.  */\n+   information if methods are actually written to the asm file.  This\n+   optimization only works if the debugger can detect the special C++\n+   marker.  */\n \n-static int flag_minimal_debug = 1;\n+#define MINIMAL_DEBUG 1\n+\n+#ifdef NO_DOLLAR_IN_LABEL\n+#ifdef NO_DOT_IN_LABEL\n+#undef MINIMAL_DEBUG\n+#define MINIMAL_DEBUG 0\n+#endif\n+#endif\n+\n+static int flag_minimal_debug = MINIMAL_DEBUG;\n \n /* Nonzero if we have actually used any of the GDB extensions\n    to the debugging format.  The idea is that we use them for the\n@@ -898,7 +909,7 @@ dbxout_type_methods (type)\n \t  /* This is the \"mangled\" name of the method.\n \t     It encodes the argument types.  */\n \t  char *debug_name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (fndecl));\n-\t  int destructor = 0;\n+\t  int show_arg_types = 0;\n \n \t  CONTIN;\n \n@@ -909,10 +920,22 @@ dbxout_type_methods (type)\n \n \t  if (flag_minimal_debug)\n \t    {\n+\t      /* We can't optimize a method which uses an anonymous\n+                 class, because the debugger will not be able to\n+                 associate the arbitrary class name with the actual\n+                 class.  */\n+\t      if (strchr (debug_name,\n+#ifndef NO_DOLLAR_IN_LABEL\n+\t\t\t  '$'\n+#else\n+\t\t\t  '.'\n+#endif\n+\t\t\t  ) != NULL)\n+\t\tshow_arg_types = 1;\n \t      /* Detect ordinary methods because their mangled names\n \t\t start with the operation name.  */\n-\t      if (!strncmp (IDENTIFIER_POINTER (name), debug_name,\n-\t\t\t    IDENTIFIER_LENGTH (name)))\n+\t      else if (!strncmp (IDENTIFIER_POINTER (name), debug_name,\n+\t\t\t\t IDENTIFIER_LENGTH (name)))\n \t\t{\n \t\t  debug_name += IDENTIFIER_LENGTH (name);\n \t\t  if (debug_name[0] == '_' && debug_name[1] == '_')\n@@ -948,7 +971,7 @@ dbxout_type_methods (type)\n \t\t}\n \t      /* The other alternative is a destructor.  */\n \t      else\n-\t\tdestructor = 1;\n+\t\tshow_arg_types = 1;\n \n \t      /* Output the operation name just once, for the first method\n \t\t that we output.  */\n@@ -960,7 +983,7 @@ dbxout_type_methods (type)\n \t\t}\n \t    }\n \n-\t  dbxout_type (TREE_TYPE (fndecl), 0, destructor);\n+\t  dbxout_type (TREE_TYPE (fndecl), 0, show_arg_types);\n \n \t  dbxout_type_method_1 (fndecl, debug_name);\n \t}"}]}