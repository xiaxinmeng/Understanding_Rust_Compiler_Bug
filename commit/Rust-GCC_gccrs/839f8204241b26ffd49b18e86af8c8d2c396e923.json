{"sha": "839f8204241b26ffd49b18e86af8c8d2c396e923", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM5ZjgyMDQyNDFiMjZmZmQ0OWIxOGU4NmFmOGM4ZDJjMzk2ZTkyMw==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@waitaki.otago.ac.nz", "date": "2001-10-26T01:51:04Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-10-26T01:51:04Z"}, "message": "VMClassLoader.java (getPrimitiveClass): Now native.\n\n\t* java/lang/VMClassLoader.java (getPrimitiveClass): Now native. Now\n\ttakes a jchar type-code argument, not a string.\n\t* java/lang/natClassLoader.cc (VMClassLoader::getPrimitiveClass):\n\tNew method. Just call _Jv_FindClassFromSignature.\n\t* java/lang/Boolean.java (TYPE): Initialize from\n\tVMClassLoader.getPrimitiveClass using type-code.\n\t* java/lang/Character.java (TYPE): Likewise.\n\t* java/lang/Double.java (TYPE): Likewise.\n\t* java/lang/Float.java (TYPE): Likewise.\n\t* java/lang/Integer.java (TYPE): Likewise.\n\t* java/lang/Long.java (TYPE): Likewise.\n\t* java/lang/Short.java (TYPE): Likewise.\n\t* java/lang/Void.java (TYPE): Likewise.\n\nFrom-SVN: r46521", "tree": {"sha": "94ed85f9ed6bd7ce5e6cf7e146b287ac826987e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94ed85f9ed6bd7ce5e6cf7e146b287ac826987e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/839f8204241b26ffd49b18e86af8c8d2c396e923", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/839f8204241b26ffd49b18e86af8c8d2c396e923", "html_url": "https://github.com/Rust-GCC/gccrs/commit/839f8204241b26ffd49b18e86af8c8d2c396e923", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/839f8204241b26ffd49b18e86af8c8d2c396e923/comments", "author": null, "committer": null, "parents": [{"sha": "f3a8e4f58d1107f0e84b865d5dd0e92ea56d8e6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3a8e4f58d1107f0e84b865d5dd0e92ea56d8e6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3a8e4f58d1107f0e84b865d5dd0e92ea56d8e6e"}], "stats": {"total": 73, "additions": 37, "deletions": 36}, "files": [{"sha": "f7badb7e3efdd5e5b0d64b0ddf92053dd5c2c629", "filename": "libjava/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839f8204241b26ffd49b18e86af8c8d2c396e923/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839f8204241b26ffd49b18e86af8c8d2c396e923/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=839f8204241b26ffd49b18e86af8c8d2c396e923", "patch": "@@ -1,3 +1,19 @@\n+2001-10-25  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n+\n+\t* java/lang/VMClassLoader.java (getPrimitiveClass): Now native. Now \n+\ttakes a jchar type-code argument, not a string. \n+\t* java/lang/natClassLoader.cc (VMClassLoader::getPrimitiveClass):\n+\tNew method. Just call _Jv_FindClassFromSignature.\n+\t* java/lang/Boolean.java (TYPE): Initialize from \n+\tVMClassLoader.getPrimitiveClass using type-code.\n+\t* java/lang/Character.java (TYPE): Likewise.\n+\t* java/lang/Double.java (TYPE): Likewise.\n+\t* java/lang/Float.java (TYPE): Likewise.\n+\t* java/lang/Integer.java (TYPE): Likewise.\n+\t* java/lang/Long.java (TYPE): Likewise.\n+\t* java/lang/Short.java (TYPE): Likewise.\n+\t* java/lang/Void.java (TYPE): Likewise.\n+\n 2001-10-25  Hans Boehm <Hans_Boehm@hp.com>\n \n \t* include/boehm-gc.h: Call thread local allocation functions"}, {"sha": "cb7e1415985f030b9cd33ffb678476482a0819d3", "filename": "libjava/java/lang/Boolean.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839f8204241b26ffd49b18e86af8c8d2c396e923/libjava%2Fjava%2Flang%2FBoolean.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839f8204241b26ffd49b18e86af8c8d2c396e923/libjava%2Fjava%2Flang%2FBoolean.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FBoolean.java?ref=839f8204241b26ffd49b18e86af8c8d2c396e923", "patch": "@@ -60,7 +60,7 @@ public final class Boolean implements Serializable\n      * The primitive type <code>boolean</code> is represented by this \n      * <code>Class</code> object.\n      */\n-    public static final Class TYPE = VMClassLoader.getPrimitiveClass(\"boolean\");\n+    public static final Class TYPE = VMClassLoader.getPrimitiveClass('Z');\n     \n     /**\n      * The immutable value of this Boolean."}, {"sha": "87682b2b764f8fdaa4680d392029b4f5888ed718", "filename": "libjava/java/lang/Character.java", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839f8204241b26ffd49b18e86af8c8d2c396e923/libjava%2Fjava%2Flang%2FCharacter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839f8204241b26ffd49b18e86af8c8d2c396e923/libjava%2Fjava%2Flang%2FCharacter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FCharacter.java?ref=839f8204241b26ffd49b18e86af8c8d2c396e923", "patch": "@@ -33,9 +33,7 @@ public final class Character implements Serializable, Comparable\n   public static final int MIN_RADIX = 2;\n   public static final int MAX_RADIX = 36;\n \n-  // This initialization is seemingly circular, but it is accepted\n-  // by javac, and is handled specially by gcc.\n-  public static final Class TYPE = char.class;\n+  public static final Class TYPE = VMClassLoader.getPrimitiveClass('C');\n \n   // Space.\n   public static final byte SPACE_SEPARATOR     = 12;"}, {"sha": "cf139a8d51e3434fa1f881b3f0d530d1adb1d1d7", "filename": "libjava/java/lang/Double.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839f8204241b26ffd49b18e86af8c8d2c396e923/libjava%2Fjava%2Flang%2FDouble.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839f8204241b26ffd49b18e86af8c8d2c396e923/libjava%2Fjava%2Flang%2FDouble.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FDouble.java?ref=839f8204241b26ffd49b18e86af8c8d2c396e923", "patch": "@@ -80,7 +80,7 @@ public final class Double extends Number implements Comparable\n    * The primitive type <code>double</code> is represented by this\n    * <code>Class</code> object.\n    */\n-  public static final Class TYPE = VMClassLoader.getPrimitiveClass (\"double\");\n+  public static final Class TYPE = VMClassLoader.getPrimitiveClass('D');\n \n   /**\n    * The immutable value of this Double."}, {"sha": "e44503fbcd4a257bad1bea50ac8092fc4a332b49", "filename": "libjava/java/lang/Float.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839f8204241b26ffd49b18e86af8c8d2c396e923/libjava%2Fjava%2Flang%2FFloat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839f8204241b26ffd49b18e86af8c8d2c396e923/libjava%2Fjava%2Flang%2FFloat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FFloat.java?ref=839f8204241b26ffd49b18e86af8c8d2c396e923", "patch": "@@ -79,7 +79,7 @@ public final class Float extends Number implements Comparable\n    * The primitive type <code>float</code> is represented by this \n    * <code>Class</code> object.\n    */\n-  public static final Class TYPE = VMClassLoader.getPrimitiveClass (\"float\");\n+  public static final Class TYPE = VMClassLoader.getPrimitiveClass('F');\n \n   /**\n    * The immutable value of this Float."}, {"sha": "afa42a439f6f466ea72305e626cc5750e07453fe", "filename": "libjava/java/lang/Integer.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839f8204241b26ffd49b18e86af8c8d2c396e923/libjava%2Fjava%2Flang%2FInteger.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839f8204241b26ffd49b18e86af8c8d2c396e923/libjava%2Fjava%2Flang%2FInteger.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FInteger.java?ref=839f8204241b26ffd49b18e86af8c8d2c396e923", "patch": "@@ -58,7 +58,7 @@ public final class Integer extends Number implements Comparable\n    * The primitive type <code>int</code> is represented by this \n    * <code>Class</code> object.\n    */\n-  public static final Class TYPE = VMClassLoader.getPrimitiveClass (\"int\");\n+  public static final Class TYPE = VMClassLoader.getPrimitiveClass ('I');\n \n   /**\n    * The immutable value of this Integer."}, {"sha": "948f7b907b62a4fd21beabe5e00829175694bd3e", "filename": "libjava/java/lang/Long.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839f8204241b26ffd49b18e86af8c8d2c396e923/libjava%2Fjava%2Flang%2FLong.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839f8204241b26ffd49b18e86af8c8d2c396e923/libjava%2Fjava%2Flang%2FLong.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FLong.java?ref=839f8204241b26ffd49b18e86af8c8d2c396e923", "patch": "@@ -60,7 +60,7 @@ public final class Long extends Number implements Comparable\n    * The primitive type <code>long</code> is represented by this \n    * <code>Class</code> object.\n    */\n-  public static final Class TYPE = VMClassLoader.getPrimitiveClass (\"long\");\n+  public static final Class TYPE = VMClassLoader.getPrimitiveClass ('J');\n \n   /**\n    * The immutable value of this Long."}, {"sha": "a0ba024c990eeb3c4a6c6842c85b067e14e8250e", "filename": "libjava/java/lang/Short.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839f8204241b26ffd49b18e86af8c8d2c396e923/libjava%2Fjava%2Flang%2FShort.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839f8204241b26ffd49b18e86af8c8d2c396e923/libjava%2Fjava%2Flang%2FShort.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FShort.java?ref=839f8204241b26ffd49b18e86af8c8d2c396e923", "patch": "@@ -56,7 +56,7 @@ public final class Short extends Number implements Comparable\n    * The primitive type <code>short</code> is represented by this \n    * <code>Class</code> object.\n    */\n-  public static final Class TYPE = VMClassLoader.getPrimitiveClass(\"short\");\n+  public static final Class TYPE = VMClassLoader.getPrimitiveClass('S');\n \n   /**\n    * The immutable value of this Short."}, {"sha": "5ff7ae86b211904fe61f9d15dc225d19cbd1f0fa", "filename": "libjava/java/lang/VMClassLoader.java", "status": "modified", "additions": 3, "deletions": 26, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839f8204241b26ffd49b18e86af8c8d2c396e923/libjava%2Fjava%2Flang%2FVMClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839f8204241b26ffd49b18e86af8c8d2c396e923/libjava%2Fjava%2Flang%2FVMClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FVMClassLoader.java?ref=839f8204241b26ffd49b18e86af8c8d2c396e923", "patch": "@@ -54,32 +54,9 @@ class VMClassLoader {\n \n     /** \n      * Helper for java.lang.Integer, Byte, etc. to get the TYPE class\n-     * at initialization time.  If there are multiple classloaders, this\n-     * method may be called once per ClassLoader per type.\n+     * at initialization time. \n      *\n-     * @param type name of the primitive type; i.e. \"int\", \"byte\", etc.\n-     * @return a \"bogus\" class representing the primitive type.\n+     * @param type code for the primitive type.\n      */\n-  static final Class getPrimitiveClass(String type)\n-  {\n-    if (\"int\".equals (type))\n-      return int.class;\n-    else if (\"long\".equals (type))\n-      return long.class;\n-    else if (\"boolean\".equals (type))\n-      return boolean.class;\n-    else if (\"short\".equals (type))\n-      return short.class;\n-    else if (\"char\".equals (type))\n-      return char.class;\n-    else if (\"byte\".equals (type))\n-      return byte.class;\n-    else if (\"float\".equals (type))\n-      return float.class;\n-    else if (\"double\".equals (type))\n-      return double.class;\n-    else if (\"void\".equals (type))\n-      return void.class;\n-    return null;\n-  }\n+  static native Class getPrimitiveClass(char type);\n }"}, {"sha": "820a1bbfab436aa18bb3eb877315a37b99aa0e50", "filename": "libjava/java/lang/Void.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839f8204241b26ffd49b18e86af8c8d2c396e923/libjava%2Fjava%2Flang%2FVoid.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839f8204241b26ffd49b18e86af8c8d2c396e923/libjava%2Fjava%2Flang%2FVoid.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FVoid.java?ref=839f8204241b26ffd49b18e86af8c8d2c396e923", "patch": "@@ -47,7 +47,7 @@\n    * The return type <code>void</code> is represented by this \n    * <code>Class</code> object.\n    */\n-  public static final Class TYPE = VMClassLoader.getPrimitiveClass(\"void\");\n+  public static final Class TYPE = VMClassLoader.getPrimitiveClass('V');\n \n   /**\n    * Don't allow Void objects to be made."}, {"sha": "7d366078dc2c188688939720c588e13c868bd32a", "filename": "libjava/java/lang/natClassLoader.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839f8204241b26ffd49b18e86af8c8d2c396e923/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839f8204241b26ffd49b18e86af8c8d2c396e923/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClassLoader.cc?ref=839f8204241b26ffd49b18e86af8c8d2c396e923", "patch": "@@ -35,6 +35,7 @@ details.  */\n #include <java/lang/ClassCircularityError.h>\n #include <java/lang/IncompatibleClassChangeError.h>\n #include <java/lang/VirtualMachineError.h>\n+#include <java/lang/VMClassLoader.h>\n #include <java/lang/reflect/Modifier.h>\n #include <java/lang/Runtime.h>\n #include <java/lang/StringBuffer.h>\n@@ -176,6 +177,15 @@ java::lang::ClassLoader::markClassErrorState0 (java::lang::Class *klass)\n   klass->notifyAll ();\n }\n \n+jclass\n+java::lang::VMClassLoader::getPrimitiveClass (jchar type)\n+{\n+  char sig[2];\n+  sig[0] = (char) type;\n+  sig[1] = '\\0';\n+  return _Jv_FindClassFromSignature (sig, NULL);\n+}\n+\n // This is the findClass() implementation for the System classloader. It is \n // the only native method in VMClassLoader, so we define it here.\n jclass"}]}