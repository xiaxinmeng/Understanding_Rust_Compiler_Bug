{"sha": "38e186196316a1ddea765d5a1bff2815999597b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhlMTg2MTk2MzE2YTFkZGVhNzY1ZDVhMWJmZjI4MTU5OTk1OTdiOA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2002-06-10T22:23:03Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2002-06-10T22:23:03Z"}, "message": "mmix.h: Improve comments.\n\n\t* config/mmix/mmix.h: Improve comments.\n\t(CPP_SPEC, CPP_PREDEFINES): Don't define.\n\t(TARGET_CPU_CPP_BUILTINS): Define.\n\t(CANONICALIZE_COMPARISON): Don't define, replace with comment.\n\t(PREDICATE_CODES) <\"mmix_reg_or_8bit_or_256_operand\">: Remove\n\tunused predicate.\n\t* config/mmix/mmix.c (MMIX_OUTPUT_REGNO): Add cast to avoid\n\tcompiler warning.\n\t(mmix_constant_address_p): Remove another\n\tredundant test before case.\n\t(mmix_canonicalize_comparison): Remove unused function.\n\t(mmix_print_operand_address): Don't test and adjust for operand in\n\tnon-canonical format.\n\t(mmix_reg_or_8bit_or_256_operand): Remove unused predicate.\n\t(mmix_gen_compare_reg): Don't use CANONICALIZE_COMPARISON.\n\nFrom-SVN: r54474", "tree": {"sha": "7028ed87fdb81aa2436b5b29cb90257b79094c0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7028ed87fdb81aa2436b5b29cb90257b79094c0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38e186196316a1ddea765d5a1bff2815999597b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e186196316a1ddea765d5a1bff2815999597b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38e186196316a1ddea765d5a1bff2815999597b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e186196316a1ddea765d5a1bff2815999597b8/comments", "author": null, "committer": null, "parents": [{"sha": "ac17cd8f7d5ec49b47ed17ffdf5ad1aeb8024cdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac17cd8f7d5ec49b47ed17ffdf5ad1aeb8024cdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac17cd8f7d5ec49b47ed17ffdf5ad1aeb8024cdb"}], "stats": {"total": 121, "additions": 44, "deletions": 77}, "files": [{"sha": "1bfeb34b021f112bdb504075cddc6ca53cf62e5d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e186196316a1ddea765d5a1bff2815999597b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e186196316a1ddea765d5a1bff2815999597b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38e186196316a1ddea765d5a1bff2815999597b8", "patch": "@@ -1,3 +1,21 @@\n+2002-06-10  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* config/mmix/mmix.h: Improve comments.\n+\t(CPP_SPEC, CPP_PREDEFINES): Don't define.\n+\t(TARGET_CPU_CPP_BUILTINS): Define.\n+\t(CANONICALIZE_COMPARISON): Don't define, replace with comment.\n+\t(PREDICATE_CODES) <\"mmix_reg_or_8bit_or_256_operand\">: Remove\n+\tunused predicate.\n+\t* config/mmix/mmix.c (MMIX_OUTPUT_REGNO): Add cast to avoid\n+\tcompiler warning.\n+\t(mmix_constant_address_p): Remove another\n+\tredundant test before case.\n+\t(mmix_canonicalize_comparison): Remove unused function.\n+\t(mmix_print_operand_address): Don't test and adjust for operand in\n+\tnon-canonical format.\n+\t(mmix_reg_or_8bit_or_256_operand): Remove unused predicate.\n+\t(mmix_gen_compare_reg): Don't use CANONICALIZE_COMPARISON.\n+\n 2002-06-10  Zack Weinberg  <zack@codesourcery.com>\n \n \t* config/m32r/m32r.h: Don't define SELECT_CC_MODE."}, {"sha": "038a67a2fcd74230767e40d0d0211d286fad712a", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 2, "deletions": 61, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e186196316a1ddea765d5a1bff2815999597b8/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e186196316a1ddea765d5a1bff2815999597b8/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=38e186196316a1ddea765d5a1bff2815999597b8", "patch": "@@ -71,8 +71,8 @@ Boston, MA 02111-1307, USA.  */\n    increasing rL and clearing unused (unset) registers with lower numbers.  */\n #define MMIX_OUTPUT_REGNO(N)\t\t\t\t\t\\\n  (TARGET_ABI_GNU \t\t\t\t\t\t\\\n-  || (N) < MMIX_RETURN_VALUE_REGNUM\t\t\t\t\\\n-  || (N) > MMIX_LAST_STACK_REGISTER_REGNUM\t\t\t\\\n+  || (int) (N) < MMIX_RETURN_VALUE_REGNUM\t\t\t\t\\\n+  || (int) (N) > MMIX_LAST_STACK_REGISTER_REGNUM\t\t\t\\\n   ? (N) : ((N) - MMIX_RETURN_VALUE_REGNUM\t\t\t\\\n \t   + cfun->machine->highest_saved_stack_register + 1))\n \n@@ -1454,10 +1454,6 @@ mmix_constant_address_p (x)\n   /* When using \"base addresses\", anything constant goes.  */\n   int constant_ok = TARGET_BASE_ADDRESSES != 0;\n \n-  if (code == CONSTANT_P_RTX || code == HIGH)\n-    /* FIXME: Don't know how to dissect these.  Avoid them for now.  */\n-    return constant_ok;\n-\n   switch (code)\n     {\n     case LABEL_REF:\n@@ -1620,37 +1616,6 @@ mmix_select_cc_mode (op, x, y)\n   return CCmode;\n }\n \n-/* CANONICALIZE_COMPARISON.\n-   FIXME: Check if the number adjustments trig.  */\n-\n-void\n-mmix_canonicalize_comparison (codep, op0p, op1p)\n-     RTX_CODE * codep;\n-     rtx * op0p ATTRIBUTE_UNUSED;\n-     rtx * op1p;\n-{\n-  /* Change -1 to zero, if possible.  */\n-  if ((*codep == LE || *codep == GT)\n-      && GET_CODE (*op1p) == CONST_INT\n-      && *op1p == constm1_rtx)\n-    {\n-      *codep = *codep == LE ? LT : GE;\n-      *op1p = const0_rtx;\n-    }\n-\n-  /* Fix up 256 to 255, if possible.  */\n-  if ((*codep == LT || *codep == LTU || *codep == GE || *codep == GEU)\n-      && GET_CODE (*op1p) == CONST_INT\n-      && INTVAL (*op1p) == 256)\n-    {\n-      /* FIXME: Remove when I know this trigs.  */\n-      fatal_insn (\"oops, not debugged; fixing up value:\", *op1p);\n-      *codep = *codep == LT ? LE : *codep == LTU ? LEU : *codep\n-\t== GE ? GT : GTU;\n-      *op1p = GEN_INT (255);\n-    }\n-}\n-\n /* REVERSIBLE_CC_MODE.  */\n \n int\n@@ -2360,14 +2325,6 @@ mmix_print_operand_address (stream, x)\n       rtx x1 = XEXP (x, 0);\n       rtx x2 = XEXP (x, 1);\n \n-      /* Try swap the order.  FIXME: Do we need this?  */\n-      if (! REG_P (x1))\n-\t{\n-\t  rtx tem = x1;\n-\t  x1 = x2;\n-\t  x2 = tem;\n-\t}\n-\n       if (REG_P (x1))\n \t{\n \t  fprintf (stream, \"%s,\", reg_names[MMIX_OUTPUT_REGNO (REGNO (x1))]);\n@@ -2787,20 +2744,6 @@ mmix_reg_or_8bit_operand (op, mode)\n \t&& CONST_OK_FOR_LETTER_P (INTVAL (op), 'I'));\n }\n \n-/* True if this is a register or an int 0..256.  We include 256,\n-   because it can be canonicalized into 255 for comparisons, which is\n-   currently the only use of this predicate.\n-   FIXME:  Check that this happens and does TRT.  */\n-\n-int\n-mmix_reg_or_8bit_or_256_operand (op, mode)\n-     rtx op;\n-     enum machine_mode mode;\n-{\n-  return mmix_reg_or_8bit_operand (op, mode)\n-    || (GET_CODE (op) == CONST_INT && INTVAL (op) == 256);\n-}\n-\n /* Returns zero if code and mode is not a valid condition from a\n    compare-type insn.  Nonzero if it is.  The parameter op, if non-NULL,\n    is the comparison of mode is CC-somethingmode.  */\n@@ -2860,8 +2803,6 @@ mmix_gen_compare_reg (code, x, y)\n   if (! REG_P (x) && ! REG_P (y))\n     x = force_reg (mode, x);\n \n-  CANONICALIZE_COMPARISON (code, x, y);\n-\n   /* If it's not quite right yet, put y in a register.  */\n   if (! REG_P (y)\n       && (GET_CODE (y) != CONST_INT"}, {"sha": "4ac2c2fa3a400492cda09f188ac36a76eb93b20a", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e186196316a1ddea765d5a1bff2815999597b8/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e186196316a1ddea765d5a1bff2815999597b8/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=38e186196316a1ddea765d5a1bff2815999597b8", "patch": "@@ -105,14 +105,6 @@ struct machine_function GTY(())\n \n /* Node: Driver */\n \n-/* When both ABI:s work, this is how we tell them apart in code.  The\n-   GNU abi is implied the default.  Also implied in TARGET_DEFAULT.  */\n-#define CPP_SPEC \\\n- \"%{mabi=gnu:-D__MMIX_ABI_GNU__\\\n-    %{mabi=mmixware:\\\n-      %eoptions -mabi=mmixware and -mabi=gnu are mutually exclusive}}\\\n-  %{!mabi=gnu:-D__MMIX_ABI_MMIXWARE__}\"\n-\n /* User symbols are in the same name-space as built-in symbols, but we\n    don't need the built-in symbols, so remove those and instead apply\n    stricter operand checking.  Don't warn when expanding insns.  */\n@@ -148,7 +140,18 @@ extern const char *mmix_cc1_ignored_option;\n /* Node: Run-time Target */\n \n /* Define __LONG_MAX__, since we're advised not to change glimits.h.  */\n-#define CPP_PREDEFINES \"-D__mmix__ -D__MMIX__ -D__LONG_MAX__=9223372036854775807L\"\n+#define TARGET_CPU_CPP_BUILTINS()\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      builtin_define (\"__mmix__\");\t\t\t\t\\\n+      builtin_define (\"__MMIX__\");\t\t\t\t\\\n+      builtin_define (\"__LONG_MAX__=9223372036854775807L\");\t\\\n+      if (TARGET_ABI_GNU)\t\t\t\t\t\\\n+\tbuiltin_define (\"__MMIX_ABI_GNU__\");\t\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__MMIX_ABI_MMIXWARE__\");\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n \n extern int target_flags;\n \n@@ -167,7 +170,9 @@ extern int target_flags;\n    a constant pool in global registers, code offseting from those\n    registers (automatically causing a request for a suitable constant base\n    address register) without having to know the specific register or the\n-   specific offset.  */\n+   specific offset.  The setback is that there's a limited number of\n+   registers, and you'll not find out until link time whether you\n+   should've compiled with -mno-base-addresses.  */\n #define TARGET_MASK_BASE_ADDRESSES 128\n \n /* FIXME: Get rid of this one.  */\n@@ -855,8 +860,13 @@ typedef struct { int regs; int lib; int now_varargs; } CUMULATIVE_ARGS;\n #define SELECT_CC_MODE(OP, X, Y)\t\t\\\n  mmix_select_cc_mode (OP, X, Y)\n \n-#define CANONICALIZE_COMPARISON(CODE, OP0, OP1)\t\t\\\n- mmix_canonicalize_comparison (&(CODE), &(OP0), &(OP1));\n+/* A definition of CANONICALIZE_COMPARISON that changed LE and GT\n+   comparisons with -1 to LT and GE respectively, and LT, LTU, GE or GEU\n+   comparisons with 256 to 255 and LE, LEU, GT and GTU has been\n+   ineffective; the code path for performing the changes did not trig for\n+   neither the GCC test-suite nor ghostscript-6.52 nor Knuth's mmix.tar.gz\n+   itself (core GCC functionality supposedly handling it) with sources\n+   from 2002-06-06.  */\n \n #define REVERSIBLE_CC_MODE(MODE)\t\t\\\n  mmix_reversible_cc_mode (MODE)\n@@ -999,8 +1009,8 @@ typedef struct { int regs; int lib; int now_varargs; } CUMULATIVE_ARGS;\n \n \n /* Node: Macros for Initialization */\n-/* We're compiling to ELF and linking to MMO; all ELF features that GCC\n-   care for are there.  FIXME: Are they?  */\n+/* We're compiling to ELF and linking to MMO; fundamental ELF features\n+   that GCC depend on are there.  */\n \n /* These must be constant strings, since they're used in crtstuff.c.  */\n #define INIT_SECTION_ASM_OP \"\\t.section .init,\\\"ax\\\" ! mmixal-incompatible\"\n@@ -1127,8 +1137,6 @@ typedef struct { int regs; int lib; int now_varargs; } CUMULATIVE_ARGS;\n    SUBREG, REG, PLUS}},\t\t\t\t\\\n  {\"mmix_reg_or_constant_operand\",\t\t\\\n   {CONST_INT, CONST_DOUBLE, SUBREG, REG}},\t\\\n- {\"mmix_reg_or_8bit_or_256_operand\",\t\t\\\n-  {CONST_INT, CONST_DOUBLE, SUBREG, REG}},\t\\\n  {\"mmix_reg_or_8bit_operand\",\t\t\t\\\n   {CONST_INT, CONST_DOUBLE, SUBREG, REG}},\t\\\n  {\"mmix_reg_or_0_operand\",\t\t\t\\"}]}