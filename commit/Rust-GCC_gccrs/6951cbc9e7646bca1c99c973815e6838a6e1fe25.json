{"sha": "6951cbc9e7646bca1c99c973815e6838a6e1fe25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk1MWNiYzllNzY0NmJjYTFjOTljOTczODE1ZTY4MzhhNmUxZmUyNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-09-18T08:33:12Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-09-18T08:33:12Z"}, "message": "[Ada] Fix sharing of expression in array aggregate with others choice\n\nThis change fixes a long-standing issue in the compiler that is\ngenerally silent but may lead to wrong code generation in specific\ncircumstances.  When an others choice in an array aggregate spans\nmultiple ranges, the compiler may generate multiple (groups of)\nassignments for the ranges.\n\nThe problem is that it internally reuses the original expression for all\nthe ranges, which is problematic if this expression gets rewritten\nduring the processing of one of the ranges and typically causes a new\ntemporary to be shared between different ranges.\n\nThe solution is to duplicate the original expression for each range.\n\n2019-09-18  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_aggr.adb (Build_Array_Aggr_Code): In STEP 1 (c), duplicate\n\tthe expression and reset the Loop_Actions for each loop\n\tgenerated for an others choice.\n\ngcc/testsuite/\n\n\t* gnat.dg/aggr28.adb: New testcase.\n\nFrom-SVN: r275859", "tree": {"sha": "8dfe7973960559f51dccdec8f4e2cb72721875f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dfe7973960559f51dccdec8f4e2cb72721875f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6951cbc9e7646bca1c99c973815e6838a6e1fe25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6951cbc9e7646bca1c99c973815e6838a6e1fe25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6951cbc9e7646bca1c99c973815e6838a6e1fe25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6951cbc9e7646bca1c99c973815e6838a6e1fe25/comments", "author": null, "committer": null, "parents": [{"sha": "43b264110f5581af0cc93308f9433fe8053f01cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b264110f5581af0cc93308f9433fe8053f01cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43b264110f5581af0cc93308f9433fe8053f01cc"}], "stats": {"total": 57, "additions": 53, "deletions": 4}, "files": [{"sha": "5c17f81e7c031fe920020d33087841b9b66b0465", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6951cbc9e7646bca1c99c973815e6838a6e1fe25/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6951cbc9e7646bca1c99c973815e6838a6e1fe25/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6951cbc9e7646bca1c99c973815e6838a6e1fe25", "patch": "@@ -1,3 +1,9 @@\n+2019-09-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_aggr.adb (Build_Array_Aggr_Code): In STEP 1 (c), duplicate\n+\tthe expression and reset the Loop_Actions for each loop\n+\tgenerated for an others choice.\n+\n 2019-09-18  Justin Squirek  <squirek@adacore.com>\n \n \t* einfo.adb, einfo.ads (Minimum_Accessibility): Added new field."}, {"sha": "5b2e0a554c00e0e7b46dfb86747b19ac76e3dc94", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6951cbc9e7646bca1c99c973815e6838a6e1fe25/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6951cbc9e7646bca1c99c973815e6838a6e1fe25/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=6951cbc9e7646bca1c99c973815e6838a6e1fe25", "patch": "@@ -2075,7 +2075,6 @@ package body Exp_Aggr is\n             Choice := First (Choice_List (Assoc));\n             while Present (Choice) loop\n                if Nkind (Choice) = N_Others_Choice then\n-                  Set_Loop_Actions (Assoc, New_List);\n                   Others_Assoc := Assoc;\n                   exit;\n                end if;\n@@ -2122,7 +2121,8 @@ package body Exp_Aggr is\n \n          if Present (Others_Assoc) then\n             declare\n-               First : Boolean := True;\n+               First    : Boolean := True;\n+               Dup_Expr : Node_Id;\n \n             begin\n                for J in 0 .. Nb_Choices loop\n@@ -2160,9 +2160,19 @@ package body Exp_Aggr is\n                     or else not Empty_Range (Low, High)\n                   then\n                      First := False;\n+\n+                     --  Duplicate the expression in case we will be generating\n+                     --  several loops. As a result the expression is no longer\n+                     --  shared between the loops and is reevaluated for each\n+                     --  such loop.\n+\n+                     Expr := Get_Assoc_Expr (Others_Assoc);\n+                     Dup_Expr := New_Copy_Tree (Expr);\n+                     Set_Parent (Dup_Expr, Parent (Expr));\n+\n+                     Set_Loop_Actions (Others_Assoc, New_List);\n                      Append_List\n-                       (Gen_Loop (Low, High,\n-                          Get_Assoc_Expr (Others_Assoc)), To => New_Code);\n+                       (Gen_Loop (Low, High, Dup_Expr), To => New_Code);\n                   end if;\n                end loop;\n             end;"}, {"sha": "32297d12789c705428184540e8b6221fccc6947e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6951cbc9e7646bca1c99c973815e6838a6e1fe25/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6951cbc9e7646bca1c99c973815e6838a6e1fe25/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6951cbc9e7646bca1c99c973815e6838a6e1fe25", "patch": "@@ -1,3 +1,7 @@\n+2019-09-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/aggr28.adb: New testcase.\n+\n 2019-09-18  Steve Baird  <baird@adacore.com>\n \n \t* gnat.dg/ai12_0086_example.adb: New testcase."}, {"sha": "3375b71346f12912fa275d4e7857bf103d2e0dc4", "filename": "gcc/testsuite/gnat.dg/aggr28.adb", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6951cbc9e7646bca1c99c973815e6838a6e1fe25/gcc%2Ftestsuite%2Fgnat.dg%2Faggr28.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6951cbc9e7646bca1c99c973815e6838a6e1fe25/gcc%2Ftestsuite%2Fgnat.dg%2Faggr28.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faggr28.adb?ref=6951cbc9e7646bca1c99c973815e6838a6e1fe25", "patch": "@@ -0,0 +1,29 @@\n+--  { dg-do run }\n+\n+procedure Aggr28 is\n+\n+  Count : Natural := 0;\n+\n+  function Get (S: String) return String is\n+  begin\n+    Count := Count + 1;\n+    return S;\n+  end;\n+\n+  Max_Error_Length : constant := 8;\n+  subtype Error_Type is String (1 .. Max_Error_Length);\n+\n+  type Rec is record\n+    Text : Error_Type;\n+  end record;\n+\n+  type Arr is array (1 .. 16) of Rec;\n+\n+  Table : constant Arr :=\n+    (3 => (Text => Get (\"INVALID \")), others => (Text => Get (\"OTHERS  \")));\n+\n+begin\n+  if Count /= Table'Length then\n+    raise Program_Error;\n+  end if;\n+end;\n\\ No newline at end of file"}]}