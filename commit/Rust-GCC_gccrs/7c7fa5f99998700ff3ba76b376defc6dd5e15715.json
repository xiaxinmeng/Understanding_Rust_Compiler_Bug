{"sha": "7c7fa5f99998700ff3ba76b376defc6dd5e15715", "node_id": "C_kwDOANBUbNoAKDdjN2ZhNWY5OTk5ODcwMGZmM2JhNzZiMzc2ZGVmYzZkZDVlMTU3MTU", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-04-20T17:31:30Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-05-03T09:58:59Z"}, "message": "Fix out of bounds indexing while expanding macros with repetition\n\ngcc/rust/ChangeLog:\n\n\t* expand/rust-macro-substitute-ctx.cc\n\t(SubstituteCtx::substitute_repetition): Fix out-of-bounds.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/macro52.rs: New test.\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "81cd09204661f776703c7b3a62fad307c00929d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81cd09204661f776703c7b3a62fad307c00929d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c7fa5f99998700ff3ba76b376defc6dd5e15715", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c7fa5f99998700ff3ba76b376defc6dd5e15715", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c7fa5f99998700ff3ba76b376defc6dd5e15715", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c7fa5f99998700ff3ba76b376defc6dd5e15715/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6266d344d39ad4cb94dfe191c69efbaf91f69ca7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6266d344d39ad4cb94dfe191c69efbaf91f69ca7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6266d344d39ad4cb94dfe191c69efbaf91f69ca7"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "eb0f149b10ad498439598b8293b4a6e76ee30cf7", "filename": "gcc/rust/expand/rust-macro-substitute-ctx.cc", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c7fa5f99998700ff3ba76b376defc6dd5e15715/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c7fa5f99998700ff3ba76b376defc6dd5e15715/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc?ref=7c7fa5f99998700ff3ba76b376defc6dd5e15715", "patch": "@@ -147,15 +147,27 @@ SubstituteCtx::substitute_repetition (\n \t{\n \t  MatchedFragment sub_fragment;\n \n+\t  // Hack: A repeating meta variable might not be present in the new\n+\t  // macro. Don't include this match if the fragment doesn't have enough\n+\t  // items, as check_repetition_amount should prevent repetition amount\n+\t  // mismatches anyway.\n+\t  bool is_used = true;\n+\n \t  // FIXME: Hack: If a fragment is not repeated, how does it fit in the\n \t  // submap? Do we really want to expand it? Is this normal behavior?\n \t  if (kv_match.second.is_single_fragment ())\n \t    sub_fragment = kv_match.second.get_single_fragment ();\n \t  else\n-\t    sub_fragment = kv_match.second.get_fragments ()[i];\n+\t    {\n+\t      if (kv_match.second.get_fragments ().size () > i)\n+\t\tsub_fragment = kv_match.second.get_fragments ().at (i);\n+\t      else\n+\t\tis_used = false;\n+\t    }\n \n-\t  sub_map.insert (\n-\t    {kv_match.first, MatchedFragmentContainer::metavar (sub_fragment)});\n+\t  if (is_used)\n+\t    sub_map.insert ({kv_match.first,\n+\t\t\t     MatchedFragmentContainer::metavar (sub_fragment)});\n \t}\n \n       auto substitute_context = SubstituteCtx (input, new_macro, sub_map);"}, {"sha": "31002eb8e15cde70768532fb864e3eba329811cd", "filename": "gcc/testsuite/rust/compile/macro52.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c7fa5f99998700ff3ba76b376defc6dd5e15715/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro52.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c7fa5f99998700ff3ba76b376defc6dd5e15715/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro52.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro52.rs?ref=7c7fa5f99998700ff3ba76b376defc6dd5e15715", "patch": "@@ -0,0 +1,11 @@\n+macro_rules! multi {\n+    ($( $a:ident )? $( + $b:ident )?) => {\n+        {\n+            $( let $a: u32 )?;\n+        }\n+    }\n+}\n+\n+pub fn foo() {\n+    multi!(_a);\n+}"}]}