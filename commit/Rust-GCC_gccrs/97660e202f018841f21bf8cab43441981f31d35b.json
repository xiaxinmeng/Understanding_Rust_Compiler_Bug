{"sha": "97660e202f018841f21bf8cab43441981f31d35b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc2NjBlMjAyZjAxODg0MWYyMWJmOGNhYjQzNDQxOTgxZjMxZDM1Yg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-07-23T04:46:53Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-07-23T04:46:53Z"}, "message": "m68k.c (const_uint32_operand): Abort if mode is <= 32 bits.\n\n        * m68k.c (const_uint32_operand): Abort if mode is <= 32 bits.\n        (const_sint32_operand): Likewise.\n        * m68k.md (anon mulsi pattern): Use const_int_operand not\n        const_sint32_operand.\n        (umulsi3_highpart): Zero extend a constant input.\n        (smulsi3_highpart): Don't bother checking SImode constant.\n        (const_umulsi3_highpart): Give op3 DImode.\n        (const_smulsi3_highpart): Likewise.\n\nFrom-SVN: r44252", "tree": {"sha": "d26ff5cfb80e67b8d2d101225ad19768d231b741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d26ff5cfb80e67b8d2d101225ad19768d231b741"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97660e202f018841f21bf8cab43441981f31d35b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97660e202f018841f21bf8cab43441981f31d35b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97660e202f018841f21bf8cab43441981f31d35b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97660e202f018841f21bf8cab43441981f31d35b/comments", "author": null, "committer": null, "parents": [{"sha": "092a1f5ab3fa380240b5452d20ab83d150ee70c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/092a1f5ab3fa380240b5452d20ab83d150ee70c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/092a1f5ab3fa380240b5452d20ab83d150ee70c4"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "e066b60b9bf2fa5eeb84353ac70b24dd90281cdf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97660e202f018841f21bf8cab43441981f31d35b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97660e202f018841f21bf8cab43441981f31d35b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97660e202f018841f21bf8cab43441981f31d35b", "patch": "@@ -1,3 +1,14 @@\n+2001-07-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* m68k.c (const_uint32_operand): Abort if mode is <= 32 bits.\n+\t(const_sint32_operand): Likewise.\n+\t* m68k.md (anon mulsi pattern): Use const_int_operand not\n+\tconst_sint32_operand.\n+\t(umulsi3_highpart): Zero extend a constant input.\n+\t(smulsi3_highpart): Don't bother checking SImode constant.\n+\t(const_umulsi3_highpart): Give op3 DImode.\n+\t(const_smulsi3_highpart): Likewise.\n+\n 2001-07-22  Richard Henderson  <rth@redhat.com>\n \n \t* flow.c (split_block): Make sure bb_note is included in the\n@@ -208,8 +219,8 @@ Fri Jul 20 21:59:42 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n 2001-07-20  Catherine Moore  <clm@redhat.com>\n \n-        * config/v850/v850.md (casesi): Generate LABEL_REF\n-        with Pmode.\n+\t* config/v850/v850.md (casesi): Generate LABEL_REF\n+\twith Pmode.\n \n Fri Jul 20 14:12:57 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n@@ -231,7 +242,7 @@ Fri Jul 20 13:24:16 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n 2001-07-20  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/mips/mips.h (ISA_HAS_NMADD_NMSUB): New macro.\n+\t* config/mips/mips.h (ISA_HAS_NMADD_NMSUB): New macro.\n \n \t* config/mips/mips.md (nmadd/nmsub): Use macro.\n \n@@ -320,7 +331,7 @@ Fri Jul 20 13:24:16 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n 2001-07-19  Catherine Moore  <clm@cygnus.com>\n \n-        * config/v850/v850.h (ASM_OUTPUT_LABELREF): Restore. \n+\t* config/v850/v850.h (ASM_OUTPUT_LABELREF): Restore. \n \n 2001-07-19  Geoffrey Keating  <geoffk@redhat.com>\n "}, {"sha": "493e770768bf740567454c71691499435cd157e4", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97660e202f018841f21bf8cab43441981f31d35b/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97660e202f018841f21bf8cab43441981f31d35b/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=97660e202f018841f21bf8cab43441981f31d35b", "patch": "@@ -3937,8 +3937,13 @@ strict_low_part_peephole_ok (mode, first_insn, target)\n int\n const_uint32_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+     enum machine_mode mode;\n {\n+  /* It doesn't make sense to ask this question with a mode that is\n+     not larger than 32 bits.  */\n+  if (GET_MODE_BITSIZE (mode) <= 32)\n+    abort ();\n+\n #if HOST_BITS_PER_WIDE_INT > 32\n   /* All allowed constants will fit a CONST_INT.  */\n   return (GET_CODE (op) == CONST_INT\n@@ -3956,8 +3961,13 @@ const_uint32_operand (op, mode)\n int\n const_sint32_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+     enum machine_mode mode;\n {\n+  /* It doesn't make sense to ask this question with a mode that is\n+     not larger than 32 bits.  */\n+  if (GET_MODE_BITSIZE (mode) <= 32)\n+    abort ();\n+\n   /* All allowed constants will fit a CONST_INT.  */\n   return (GET_CODE (op) == CONST_INT\n \t  && (INTVAL (op) >= (-0x7fffffff - 1) && INTVAL (op) <= 0x7fffffff));"}, {"sha": "f56e3546374ec95f4e75dd4939202280327df6eb", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97660e202f018841f21bf8cab43441981f31d35b/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97660e202f018841f21bf8cab43441981f31d35b/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=97660e202f018841f21bf8cab43441981f31d35b", "patch": "@@ -3146,7 +3146,7 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(mult:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n-\t\t (match_operand:SI 2 \"const_sint32_operand\" \"\")))\n+\t\t (match_operand:SI 2 \"const_int_operand\" \"n\")))\n    (set (match_operand:SI 3 \"register_operand\" \"=d\")\n \t(truncate:SI (lshiftrt:DI (mult:DI (sign_extend:DI (match_dup 1))\n \t\t\t\t\t   (match_dup 2))\n@@ -3167,11 +3167,12 @@\n   \"\n {\n   operands[3] = gen_reg_rtx (SImode);\n-  if (GET_CODE (operands[2]) == CONST_INT\n-      || GET_CODE (operands[2]) == CONST_DOUBLE)\n+\n+  if (GET_CODE (operands[2]) == CONST_INT)\n     {\n-      if (! const_uint32_operand (operands[2], VOIDmode))\n-\tabort ();\n+      operands[2] = immed_double_const (INTVAL (operands[2]) & 0xffffffff,\n+\t\t\t\t\t0, DImode);\n+\n       /* We have to adjust the operand order for the matching constraints.  */\n       emit_insn (gen_const_umulsi3_highpart (operands[0], operands[3],\n \t\t\t\t\t     operands[1], operands[2]));\n@@ -3195,7 +3196,7 @@\n \t(truncate:SI\n \t (lshiftrt:DI\n \t  (mult:DI (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"1\"))\n-\t\t   (match_operand 3 \"const_uint32_operand\" \"\"))\n+\t\t   (match_operand:DI 3 \"const_uint32_operand\" \"n\"))\n \t  (const_int 32))))\n    (clobber (match_operand:SI 1 \"register_operand\" \"=d\"))]\n   \"TARGET_68020 && !TARGET_68060 && !TARGET_5200\"\n@@ -3214,11 +3215,8 @@\n   \"\n {\n   operands[3] = gen_reg_rtx (SImode);\n-  if (GET_CODE (operands[2]) == CONST_INT\n-      || GET_CODE (operands[2]) == CONST_DOUBLE)\n+  if (GET_CODE (operands[2]) == CONST_INT)\n     {\n-      if (! const_sint32_operand (operands[2], VOIDmode))\n-\tabort ();\n       /* We have to adjust the operand order for the matching constraints.  */\n       emit_insn (gen_const_smulsi3_highpart (operands[0], operands[3],\n \t\t\t\t\t     operands[1], operands[2]));\n@@ -3242,7 +3240,7 @@\n \t(truncate:SI\n \t (lshiftrt:DI\n \t  (mult:DI (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"1\"))\n-\t\t   (match_operand 3 \"const_sint32_operand\" \"\"))\n+\t\t   (match_operand:DI 3 \"const_sint32_operand\" \"n\"))\n \t  (const_int 32))))\n    (clobber (match_operand:SI 1 \"register_operand\" \"=d\"))]\n   \"TARGET_68020 && !TARGET_68060 && !TARGET_5200\""}]}