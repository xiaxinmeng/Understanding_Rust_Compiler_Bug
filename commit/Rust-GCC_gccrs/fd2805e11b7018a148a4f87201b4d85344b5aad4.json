{"sha": "fd2805e11b7018a148a4f87201b4d85344b5aad4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQyODA1ZTExYjcwMThhMTQ4YTRmODcyMDFiNGQ4NTM0NGI1YWFkNA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-09-15T15:42:01Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-09-15T15:42:01Z"}, "message": "match.c (lock_unlock_statement, [...]): Fix potential double freeing.\n\n2012-09-15  Tobias Burnus  <burnus@net-b.de>\n\n        * match.c (lock_unlock_statement, sync_statement): Fix potential\n        double freeing.\n        (sync_statement): Remove unreachable code.\n        * simplify.c (gfc_simplify_bessel_n2): Avoid double freeing.\n        (gfc_simplify_repeat): Remove bogus code.\n        * target-memory.h (gfc_target_encode_expr): Update prototype.\n        * target-memory.c (gfc_target_encode_expr, encode_array,\n        encode_derived): Return unsigned HOST_WIDE_INT.\n        (gfc_target_interpret_expr): Add assert.\n        (gfc_merge_initializers): Fix \"== 0\" check for mpz_t.\n        * symbol.c (gfc_get_typebound_proc): Add assert.\n        (gfc_merge_initializers): Remove unreachable check.\n\nFrom-SVN: r191343", "tree": {"sha": "05e97776b1fe54ef1d015ca3c6f07b279078ff83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05e97776b1fe54ef1d015ca3c6f07b279078ff83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd2805e11b7018a148a4f87201b4d85344b5aad4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd2805e11b7018a148a4f87201b4d85344b5aad4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd2805e11b7018a148a4f87201b4d85344b5aad4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd2805e11b7018a148a4f87201b4d85344b5aad4/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8385420c4f45090a3393557783d8c7c73ef9a9b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8385420c4f45090a3393557783d8c7c73ef9a9b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8385420c4f45090a3393557783d8c7c73ef9a9b7"}], "stats": {"total": 76, "additions": 52, "deletions": 24}, "files": [{"sha": "a1a2cd2dd533e280168bb7eea2e0ec9a3ca955b4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2805e11b7018a148a4f87201b4d85344b5aad4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2805e11b7018a148a4f87201b4d85344b5aad4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fd2805e11b7018a148a4f87201b4d85344b5aad4", "patch": "@@ -1,3 +1,18 @@\n+2012-09-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* match.c (lock_unlock_statement, sync_statement): Fix potential\n+\tdouble freeing.\n+\t(sync_statement): Remove unreachable code.\n+\t* simplify.c (gfc_simplify_bessel_n2): Avoid double freeing.\n+\t(gfc_simplify_repeat): Remove bogus code.\n+\t* target-memory.h (gfc_target_encode_expr): Update prototype.\n+\t* target-memory.c (gfc_target_encode_expr, encode_array,\n+\tencode_derived): Return unsigned HOST_WIDE_INT.\n+\t(gfc_target_interpret_expr): Add assert.\n+\t(gfc_merge_initializers): Fix \"== 0\" check for mpz_t.\n+\t* symbol.c (gfc_get_typebound_proc): Add assert.\n+\t(gfc_merge_initializers): Remove unreachable check.\n+\n 2012-09-13  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/54556"}, {"sha": "d46a495ae01cd20eaa72fc037ce91d65d8942e13", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2805e11b7018a148a4f87201b4d85344b5aad4/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2805e11b7018a148a4f87201b4d85344b5aad4/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=fd2805e11b7018a148a4f87201b4d85344b5aad4", "patch": "@@ -2964,11 +2964,15 @@ lock_unlock_statement (gfc_statement st)\n   gfc_syntax_error (st);\n \n cleanup:\n+  if (acq_lock != tmp)\n+    gfc_free_expr (acq_lock);\n+  if (errmsg != tmp)\n+    gfc_free_expr (errmsg);\n+  if (stat != tmp)\n+    gfc_free_expr (stat);\n+\n   gfc_free_expr (tmp);\n   gfc_free_expr (lockvar);\n-  gfc_free_expr (acq_lock);\n-  gfc_free_expr (stat);\n-  gfc_free_expr (errmsg);\n \n   return MATCH_ERROR;\n }\n@@ -3121,9 +3125,6 @@ sync_statement (gfc_statement st)\n \tbreak;\n     }\n \n-  if (m == MATCH_ERROR)\n-    goto syntax;\n-\n   if (gfc_match (\" )%t\") != MATCH_YES)\n     goto syntax;\n \n@@ -3153,10 +3154,13 @@ sync_statement (gfc_statement st)\n   gfc_syntax_error (st);\n \n cleanup:\n+  if (stat != tmp)\n+    gfc_free_expr (stat);\n+  if (errmsg != tmp)\n+    gfc_free_expr (errmsg);\n+\n   gfc_free_expr (tmp);\n   gfc_free_expr (imageset);\n-  gfc_free_expr (stat);\n-  gfc_free_expr (errmsg);\n \n   return MATCH_ERROR;\n }"}, {"sha": "5aa27044d08c57d2b8d9eec14a9e2a680af6abc7", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2805e11b7018a148a4f87201b4d85344b5aad4/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2805e11b7018a148a4f87201b4d85344b5aad4/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=fd2805e11b7018a148a4f87201b4d85344b5aad4", "patch": "@@ -1370,7 +1370,11 @@ gfc_simplify_bessel_n2 (gfc_expr *order1, gfc_expr *order2, gfc_expr *x,\n       mpfr_sub (e->value.real, e->value.real, last1, GFC_RND_MODE);\n \n       if (range_check (e, jn ? \"BESSEL_JN\" : \"BESSEL_YN\") == &gfc_bad_expr)\n-\tgoto error;\n+\t{\n+\t  /* Range_check frees \"e\" in that case.  */\n+\t  e = NULL;\n+\t  goto error;\n+\t}\n \n       if (jn)\n \tgfc_constructor_insert_expr (&result->value.constructor, e, &x->where,\n@@ -4930,11 +4934,6 @@ gfc_simplify_repeat (gfc_expr *e, gfc_expr *n)\n   else\n     ncop = 0;\n \n-  len = e->value.character.length;\n-  nlen = ncop * len;\n-\n-  result = gfc_get_constant_expr (BT_CHARACTER, e->ts.kind, &e->where);\n-\n   if (ncop == 0)\n     return gfc_get_character_expr (e->ts.kind, &e->where, NULL, 0);\n "}, {"sha": "d68208d3010e9ec2ff7cedf91f585f1d7cf04a28", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2805e11b7018a148a4f87201b4d85344b5aad4/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2805e11b7018a148a4f87201b4d85344b5aad4/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=fd2805e11b7018a148a4f87201b4d85344b5aad4", "patch": "@@ -4846,7 +4846,9 @@ gfc_get_typebound_proc (gfc_typebound_proc *tb0)\n gfc_symbol*\n gfc_get_derived_super_type (gfc_symbol* derived)\n {\n-  if (derived && derived->attr.generic)\n+  gcc_assert (derived);\n+\n+  if (derived->attr.generic)\n     derived = gfc_find_dt_in_generic (derived);\n \n   if (!derived->attr.extension)\n@@ -4968,7 +4970,7 @@ gfc_find_dt_in_generic (gfc_symbol *sym)\n     return sym;\n \n   if (sym->attr.generic)\n-    for (intr = (sym ? sym->generic : NULL); intr; intr = intr->next)\n+    for (intr = sym->generic; intr; intr = intr->next)\n       if (intr->sym->attr.flavor == FL_DERIVED)\n         break;\n   return intr ? intr->sym : NULL;"}, {"sha": "bedc668d52fc65451173017c6884fceb369ab3e5", "filename": "gcc/fortran/target-memory.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2805e11b7018a148a4f87201b4d85344b5aad4/gcc%2Ffortran%2Ftarget-memory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2805e11b7018a148a4f87201b4d85344b5aad4/gcc%2Ffortran%2Ftarget-memory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftarget-memory.c?ref=fd2805e11b7018a148a4f87201b4d85344b5aad4", "patch": "@@ -140,7 +140,7 @@ gfc_target_expr_size (gfc_expr *e)\n    return the number of bytes of the buffer that have been\n    used.  */\n \n-static int\n+static unsigned HOST_WIDE_INT\n encode_array (gfc_expr *expr, unsigned char *buffer, size_t buffer_size)\n {\n   mpz_t array_size;\n@@ -217,13 +217,14 @@ gfc_encode_character (int kind, int length, const gfc_char_t *string,\n }\n \n \n-static int\n+static unsigned HOST_WIDE_INT\n encode_derived (gfc_expr *source, unsigned char *buffer, size_t buffer_size)\n {\n   gfc_constructor *c;\n   gfc_component *cmp;\n   int ptr;\n   tree type;\n+  HOST_WIDE_INT size;\n \n   type = gfc_typenode_for_spec (&source->ts);\n \n@@ -239,19 +240,24 @@ encode_derived (gfc_expr *source, unsigned char *buffer, size_t buffer_size)\n \t    + TREE_INT_CST_LOW(DECL_FIELD_BIT_OFFSET(cmp->backend_decl))/8;\n \n       if (c->expr->expr_type == EXPR_NULL)\n- \tmemset (&buffer[ptr], 0,\n-\t\tint_size_in_bytes (TREE_TYPE (cmp->backend_decl)));\n+\t{\n+\t  size = int_size_in_bytes (TREE_TYPE (cmp->backend_decl));\n+\t  gcc_assert (size >= 0);\n+\t  memset (&buffer[ptr], 0, size);\n+\t}\n       else\n \tgfc_target_encode_expr (c->expr, &buffer[ptr],\n \t\t\t\tbuffer_size - ptr);\n     }\n \n-  return int_size_in_bytes (type);\n+  size = int_size_in_bytes (type);\n+  gcc_assert (size >= 0);\n+  return size;\n }\n \n \n /* Write a constant expression in binary form to a buffer.  */\n-int\n+unsigned HOST_WIDE_INT\n gfc_target_encode_expr (gfc_expr *source, unsigned char *buffer,\n \t\t\tsize_t buffer_size)\n {\n@@ -567,6 +573,7 @@ gfc_target_interpret_expr (unsigned char *buffer, size_t buffer_size,\n     case BT_DERIVED:\n       result->representation.length = \n         gfc_interpret_derived (buffer, buffer_size, result);\n+      gcc_assert (result->representation.length >= 0);\n       break;\n \n     default:\n@@ -678,7 +685,7 @@ gfc_merge_initializers (gfc_typespec ts, gfc_expr *e, unsigned char *data,\n \t{\n \t  size_t elt_size = gfc_target_expr_size (c->expr);\n \n-\t  if (c->offset)\n+\t  if (mpz_cmp_si (c->offset, 0) != 0)\n \t    len = elt_size * (size_t)mpz_get_si (c->offset);\n \n \t  len = len + gfc_merge_initializers (ts, c->expr, &data[len],"}, {"sha": "cba2ea2d34844373cd525bf45db7c344dd01708c", "filename": "gcc/fortran/target-memory.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2805e11b7018a148a4f87201b4d85344b5aad4/gcc%2Ffortran%2Ftarget-memory.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2805e11b7018a148a4f87201b4d85344b5aad4/gcc%2Ffortran%2Ftarget-memory.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftarget-memory.h?ref=fd2805e11b7018a148a4f87201b4d85344b5aad4", "patch": "@@ -31,7 +31,8 @@ size_t gfc_target_expr_size (gfc_expr *);\n /* Write a constant expression in binary form to a target buffer.  */\n int gfc_encode_character (int, int, const gfc_char_t *, unsigned char *,\n \t\t\t  size_t);\n-int gfc_target_encode_expr (gfc_expr *, unsigned char *, size_t);\n+unsigned HOST_WIDE_INT gfc_target_encode_expr (gfc_expr *, unsigned char *,\n+\t\t\t\t\t       size_t);\n \n /* Read a target buffer into a constant expression.  */\n "}]}