{"sha": "e214cab68cb34e77622b91113f7698cf137bbdd6", "node_id": "C_kwDOANBUbNoAKGUyMTRjYWI2OGNiMzRlNzc2MjJiOTExMTNmNzY5OGNmMTM3YmJkZDY", "commit": {"author": {"name": "Jeff Law", "email": "jlaw@ventanamicro.com", "date": "2022-11-17T01:47:59Z"}, "committer": {"name": "Jeff Law", "email": "jlaw@ventanamicro.com", "date": "2022-11-17T01:47:59Z"}, "message": "Fix multiple recent sh3/sh3eb regressions\n\nSo my tester started showing even more regressions on the sh3/sh4 runs\nrecently (beyond the one recently reported in BZ triggered by some DCE\nrelated changes).  Bisection kept showing inconsistent results.  I was\nstarting to think memory management error, but valgrind didn't flag anything.\n\nAfter a bit of head-banging I was able to track it down to predicate\ntests called from the SH specific combiner passes.  And once I started\ngetting inside the actual code for the predicate function it became\npretty obvious.  The predicate routines are supposed to return a bool,\nfine and they dutifully set the low bit in %eax properly.\n\nThe *caller* was looking at the full register.  Uh-oh.  Naturally we\nbecame dependent on what happened to be in the upper 31 bits of a register.\nThat's why the bug would come and go so willy-nilly.  This was ultimately\nchased down to an incorrect prototype in sh_treg_combine.cc for predicate\nfunctions defined via define_predicate.\n\nRemoving the bogus prototypes and instead including the generated\ntm-preds.h fixes this problem.  I also checked the other ports for\nsimilar problems (specifically looking for a extern int.*_operand, then\nfor each of the hits looking to see if the predicate was defined via\ndefine_predicate).  No other ports had similar braindamage.\n\nThis fixes the most recent regressions in my tester for sh3/sh3eb\nand I strongly suspect sh4.  It does not fix 107704, but I think\nRichi and I both agree that's a visitation order issue and we were\njust getting lucky before.\n\ngcc/\n\n\t* config/sh/sh_treg_combine.cc: Include tm-preds.h.\n\t(t_reg_operand): Remove bogus prototype.\n\t(negt_reg_operand): Likewise.", "tree": {"sha": "4ec713f43436ea47beb20fb2df10140edeb9050d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ec713f43436ea47beb20fb2df10140edeb9050d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e214cab68cb34e77622b91113f7698cf137bbdd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e214cab68cb34e77622b91113f7698cf137bbdd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e214cab68cb34e77622b91113f7698cf137bbdd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e214cab68cb34e77622b91113f7698cf137bbdd6/comments", "author": null, "committer": null, "parents": [{"sha": "f69a8299c1d95548e1539227fb7b8f5581aeb29b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f69a8299c1d95548e1539227fb7b8f5581aeb29b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f69a8299c1d95548e1539227fb7b8f5581aeb29b"}], "stats": {"total": 5, "additions": 1, "deletions": 4}, "files": [{"sha": "ab7dc5d49855ba41f7a19bff7768375263eba9c6", "filename": "gcc/config/sh/sh_treg_combine.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e214cab68cb34e77622b91113f7698cf137bbdd6/gcc%2Fconfig%2Fsh%2Fsh_treg_combine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e214cab68cb34e77622b91113f7698cf137bbdd6/gcc%2Fconfig%2Fsh%2Fsh_treg_combine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh_treg_combine.cc?ref=e214cab68cb34e77622b91113f7698cf137bbdd6", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgrtl.h\"\n #include \"tree-pass.h\"\n #include \"expr.h\"\n+#include \"tm-preds.h\"\n \n /*\n This pass tries to optimize for example this:\n@@ -426,10 +427,6 @@ is_conditional_insn (rtx_insn* i)\n   return GET_CODE (p) == SET && GET_CODE (XEXP (p, 1)) == IF_THEN_ELSE;\n }\n \n-// FIXME: Remove dependency on SH predicate function somehow.\n-extern int t_reg_operand (rtx, machine_mode);\n-extern int negt_reg_operand (rtx, machine_mode);\n-\n // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n // RTL pass class\n "}]}