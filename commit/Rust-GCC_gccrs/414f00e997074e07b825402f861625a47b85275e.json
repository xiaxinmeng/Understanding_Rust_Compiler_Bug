{"sha": "414f00e997074e07b825402f861625a47b85275e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE0ZjAwZTk5NzA3NGUwN2I4MjU0MDJmODYxNjI1YTQ3Yjg1Mjc1ZQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2008-10-02T18:51:12Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2008-10-02T18:51:12Z"}, "message": "re PR fortran/37635 (Fortran 2008: Support LEADZ / TRAILZ)\n\ntestsuite\n\t* gfortran.fortran-torture/execute/intrinsic_leadz.f90: New test.\n\t* gfortran.fortran-torture/execute/intrinsic_trailz.f90: New test.\n\nfortran/\n\tPR fortran/37635\n\t* intrinsic.c (add_functions): Add LEADZ and TRAILZ as generics.\n\t* intrinsic.h (gfc_simplify_leadz, gfc_simplify_trailz): New protos.\n\t* gfortran.h <enum gfc_isym_id>: (GFC_ISYM_LEADZ, GFC_ISYM_TRAILZ): New.\n\t* f95-lang (gfc_init_builtin_functions): Add BUILT_IN_CLZ,\n\tBUILT_IN_CLZL, BUILT_IN_CLZLL, BUILT_IN_CTZ, BUILT_IN_CTZL, and\n\tBUILT_IN_CTZLL.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_leadz,\n\tgfc_conv_intrinsic_trails): New code-generation functions for LEADZ\n\tand TRAILZ intrinsics.\n\t(gfc_conv_intrinsic_function): Use them\n\t* intrinsic.texi: Add documentation for LEADZ and TRAILZ.\n\t* simplify.c (gfc_simplify_leadz, gfc_simplify_trailz): New functions.\n\nFrom-SVN: r140837", "tree": {"sha": "8f0b9dec6eaf805add54b5ffc7ad619e59181785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f0b9dec6eaf805add54b5ffc7ad619e59181785"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/414f00e997074e07b825402f861625a47b85275e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/414f00e997074e07b825402f861625a47b85275e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/414f00e997074e07b825402f861625a47b85275e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/414f00e997074e07b825402f861625a47b85275e/comments", "author": null, "committer": null, "parents": [{"sha": "3057d7cfab71a7ab3828fe093b847ec0f198c986", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3057d7cfab71a7ab3828fe093b847ec0f198c986", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3057d7cfab71a7ab3828fe093b847ec0f198c986"}], "stats": {"total": 433, "additions": 433, "deletions": 0}, "files": [{"sha": "869cd897b27053f7ab7fa9beb1f2646fe1227dbf", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414f00e997074e07b825402f861625a47b85275e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414f00e997074e07b825402f861625a47b85275e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=414f00e997074e07b825402f861625a47b85275e", "patch": "@@ -1,3 +1,19 @@\n+2008-10-02  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\tPR fortran/37635\n+\t* intrinsic.c (add_functions): Add LEADZ and TRAILZ as generics.\n+\t* intrinsic.h (gfc_simplify_leadz, gfc_simplify_trailz): New protos.\n+\t* gfortran.h <enum gfc_isym_id>: (GFC_ISYM_LEADZ, GFC_ISYM_TRAILZ): New.\n+\t* f95-lang (gfc_init_builtin_functions): Add BUILT_IN_CLZ,\n+\tBUILT_IN_CLZL, BUILT_IN_CLZLL, BUILT_IN_CTZ, BUILT_IN_CTZL, and\n+\tBUILT_IN_CTZLL.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_leadz,\n+\tgfc_conv_intrinsic_trails): New code-generation functions for LEADZ\n+\tand TRAILZ intrinsics.\n+\t(gfc_conv_intrinsic_function): Use them\n+\t* intrinsic.texi: Add documentation for LEADZ and TRAILZ.\n+\t* simplify.c (gfc_simplify_leadz, gfc_simplify_trailz): New functions.\n+\n 2008-09-30  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/36592"}, {"sha": "cf0dc2d48b78bdecd0a439d98a49b02039946c4c", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414f00e997074e07b825402f861625a47b85275e/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414f00e997074e07b825402f861625a47b85275e/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=414f00e997074e07b825402f861625a47b85275e", "patch": "@@ -1003,6 +1003,37 @@ gfc_init_builtin_functions (void)\n \t\t          BUILT_IN_SINCOSF, \"sincosf\", false);\n     }\n \n+  /* For LEADZ / TRAILZ.  */\n+  tmp = tree_cons (NULL_TREE, unsigned_type_node, void_list_node);\n+  ftype = build_function_type (integer_type_node, tmp);\n+  gfc_define_builtin (\"__builtin_clz\", ftype, BUILT_IN_CLZ,\n+\t\t      \"__builtin_clz\", true);\n+\n+  tmp = tree_cons (NULL_TREE, long_unsigned_type_node, void_list_node);\n+  ftype = build_function_type (integer_type_node, tmp);\n+  gfc_define_builtin (\"__builtin_clzl\", ftype, BUILT_IN_CLZL,\n+\t\t      \"__builtin_clzl\", true);\n+\n+  tmp = tree_cons (NULL_TREE, long_long_unsigned_type_node, void_list_node);\n+  ftype = build_function_type (integer_type_node, tmp);\n+  gfc_define_builtin (\"__builtin_clzll\", ftype, BUILT_IN_CLZLL,\n+\t\t      \"__builtin_clzll\", true);\n+\n+  tmp = tree_cons (NULL_TREE, unsigned_type_node, void_list_node);\n+  ftype = build_function_type (integer_type_node, tmp);\n+  gfc_define_builtin (\"__builtin_ctz\", ftype, BUILT_IN_CTZ,\n+\t\t      \"__builtin_ctz\", true);\n+\n+  tmp = tree_cons (NULL_TREE, long_unsigned_type_node, void_list_node);\n+  ftype = build_function_type (integer_type_node, tmp);\n+  gfc_define_builtin (\"__builtin_ctzl\", ftype, BUILT_IN_CTZL,\n+\t\t      \"__builtin_ctzl\", true);\n+\n+  tmp = tree_cons (NULL_TREE, long_long_unsigned_type_node, void_list_node);\n+  ftype = build_function_type (integer_type_node, tmp);\n+  gfc_define_builtin (\"__builtin_ctzll\", ftype, BUILT_IN_CTZLL,\n+\t\t      \"__builtin_ctzll\", true);\n+\n   /* Other builtin functions we use.  */\n \n   tmp = tree_cons (NULL_TREE, long_integer_type_node, void_list_node);"}, {"sha": "60d9baccf9b543d723ec1d0fbca7de384c05763f", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414f00e997074e07b825402f861625a47b85275e/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414f00e997074e07b825402f861625a47b85275e/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=414f00e997074e07b825402f861625a47b85275e", "patch": "@@ -417,6 +417,7 @@ enum gfc_isym_id\n   GFC_ISYM_KILL,\n   GFC_ISYM_KIND,\n   GFC_ISYM_LBOUND,\n+  GFC_ISYM_LEADZ,\n   GFC_ISYM_LEN,\n   GFC_ISYM_LEN_TRIM,\n   GFC_ISYM_LGAMMA,\n@@ -503,6 +504,7 @@ enum gfc_isym_id\n   GFC_ISYM_TIME,\n   GFC_ISYM_TIME8,\n   GFC_ISYM_TINY,\n+  GFC_ISYM_TRAILZ,\n   GFC_ISYM_TRANSFER,\n   GFC_ISYM_TRANSPOSE,\n   GFC_ISYM_TRIM,"}, {"sha": "035aef70d6595fe962c41d4ee8619d7db12cd50a", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414f00e997074e07b825402f861625a47b85275e/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414f00e997074e07b825402f861625a47b85275e/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=414f00e997074e07b825402f861625a47b85275e", "patch": "@@ -1781,6 +1781,13 @@ add_functions (void)\n \n   make_generic (\"lbound\", GFC_ISYM_LBOUND, GFC_STD_F95);\n \n+  add_sym_1 (\"leadz\", GFC_ISYM_LEADZ, CLASS_ELEMENTAL, ACTUAL_NO,\n+\t     BT_INTEGER, di, GFC_STD_F2008,\n+\t     gfc_check_i, gfc_simplify_leadz, NULL,\n+\t     i, BT_INTEGER, di, REQUIRED);\n+\n+  make_generic (\"leadz\", GFC_ISYM_LEADZ, GFC_STD_F2008);\n+\n   add_sym_2 (\"len\", GFC_ISYM_LEN, CLASS_INQUIRY, ACTUAL_YES,\n \t     BT_INTEGER, di, GFC_STD_F77,\n \t     gfc_check_len_lentrim, gfc_simplify_len, gfc_resolve_len,\n@@ -2388,6 +2395,13 @@ add_functions (void)\n \n   make_generic (\"tiny\", GFC_ISYM_TINY, GFC_STD_F95);\n \n+  add_sym_1 (\"trailz\", GFC_ISYM_TRAILZ, CLASS_ELEMENTAL, ACTUAL_NO,\n+\t     BT_INTEGER, di, GFC_STD_F2008,\n+\t     gfc_check_i, gfc_simplify_trailz, NULL,\n+\t     i, BT_INTEGER, di, REQUIRED);\n+\n+  make_generic (\"trailz\", GFC_ISYM_TRAILZ, GFC_STD_F2008);\n+\n   add_sym_3 (\"transfer\", GFC_ISYM_TRANSFER, CLASS_TRANSFORMATIONAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_transfer, gfc_simplify_transfer, gfc_resolve_transfer,\n \t     src, BT_REAL, dr, REQUIRED, mo, BT_REAL, dr, REQUIRED,"}, {"sha": "02eff464d0a64a26159a3962ed330f00a0addc68", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414f00e997074e07b825402f861625a47b85275e/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414f00e997074e07b825402f861625a47b85275e/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=414f00e997074e07b825402f861625a47b85275e", "patch": "@@ -259,6 +259,7 @@ gfc_expr *gfc_simplify_ishft (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_ishftc (gfc_expr *, gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_kind (gfc_expr *);\n gfc_expr *gfc_simplify_lbound (gfc_expr *, gfc_expr *, gfc_expr *);\n+gfc_expr *gfc_simplify_leadz (gfc_expr *);\n gfc_expr *gfc_simplify_len (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_len_trim (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_lgamma (gfc_expr *);\n@@ -310,6 +311,7 @@ gfc_expr *gfc_simplify_sqrt (gfc_expr *);\n gfc_expr *gfc_simplify_tan (gfc_expr *);\n gfc_expr *gfc_simplify_tanh (gfc_expr *);\n gfc_expr *gfc_simplify_tiny (gfc_expr *);\n+gfc_expr *gfc_simplify_trailz (gfc_expr *);\n gfc_expr *gfc_simplify_transfer (gfc_expr *, gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_trim (gfc_expr *);\n gfc_expr *gfc_simplify_ubound (gfc_expr *, gfc_expr *, gfc_expr *);"}, {"sha": "3418d05bdf3b35efbc86040fca024b3940c30380", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414f00e997074e07b825402f861625a47b85275e/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414f00e997074e07b825402f861625a47b85275e/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=414f00e997074e07b825402f861625a47b85275e", "patch": "@@ -164,6 +164,7 @@ Some basic guidelines for editing this document:\n * @code{KILL}:          KILL,      Send a signal to a process\n * @code{KIND}:          KIND,      Kind of an entity\n * @code{LBOUND}:        LBOUND,    Lower dimension bounds of an array\n+* @code{LEADZ}:         LEADZ,     Number of leading zero bits of an integer\n * @code{LEN}:           LEN,       Length of a character entity\n * @code{LEN_TRIM}:      LEN_TRIM,  Length of a character entity without trailing blank characters\n * @code{LOG_GAMMA}:     LOG_GAMMA, Logarithm of the Gamma function\n@@ -252,6 +253,7 @@ Some basic guidelines for editing this document:\n * @code{TIME}:          TIME,      Time function\n * @code{TIME8}:         TIME8,     Time function (64-bit)\n * @code{TINY}:          TINY,      Smallest positive number of a real kind\n+* @code{TRAILZ}:        TRAILZ,    Number of trailing zero bits of an integer\n * @code{TRANSFER}:      TRANSFER,  Transfer bit patterns\n * @code{TRANSPOSE}:     TRANSPOSE, Transpose an array of rank two\n * @code{TRIM}:          TRIM,      Remove trailing blank characters of a string\n@@ -6504,6 +6506,46 @@ dimension, the lower bound is taken to be 1.\n \n \n \n+@node LEADZ\n+@section @code{LEADZ} --- Number of leading zero bits of an integer\n+@fnindex LEADZ\n+@cindex zero bits\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{LEADZ} returns the number of leading zero bits of an integer.\n+\n+@item @emph{Standard}:\n+Fortran 2008 and later\n+\n+@item @emph{Class}:\n+Elemental function\n+\n+@item @emph{Syntax}:\n+@code{RESULT = LEADZ(I)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{I} @tab Shall be of type @code{INTEGER}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The type of the return value is the default @code{INTEGER}.\n+If all the bits of @code{I} are zero, the result value is @code{BIT_SIZE(I)}.\n+\n+@item @emph{Example}:\n+@smallexample\n+PROGRAM test_leadz\n+  WRITE (*,*) LEADZ(1)  ! prints 8 if BITSIZE(I) has the value 32\n+END PROGRAM\n+@end smallexample\n+\n+@item @emph{See also}:\n+@ref{BIT_SIZE}, @ref{TRAILZ}\n+@end table\n+\n+\n+\n @node LEN\n @section @code{LEN} --- Length of a character entity\n @fnindex LEN\n@@ -10642,6 +10684,46 @@ See @code{HUGE} for an example.\n \n \n \n+@node TRAILZ\n+@section @code{TRAILZ} --- Number of trailing zero bits of an integer\n+@fnindex TRAILZ\n+@cindex zero bits\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{TRAILZ} returns the number of trailing zero bits of an integer.\n+\n+@item @emph{Standard}:\n+Fortran 2008 and later\n+\n+@item @emph{Class}:\n+Elemental function\n+\n+@item @emph{Syntax}:\n+@code{RESULT = TRAILZ(I)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{I} @tab Shall be of type @code{INTEGER}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The type of the return value is the default @code{INTEGER}.\n+If all the bits of @code{I} are zero, the result value is @code{BIT_SIZE(I)}.\n+\n+@item @emph{Example}:\n+@smallexample\n+PROGRAM test_trailz\n+  WRITE (*,*) TRAILZ(8)  ! prints 3\n+END PROGRAM\n+@end smallexample\n+\n+@item @emph{See also}:\n+@ref{BIT_SIZE}, @ref{LEADZ}\n+@end table\n+\n+\n+\n @node TRANSFER\n @section @code{TRANSFER} --- Transfer bit patterns\n @fnindex TRANSFER"}, {"sha": "429c5151d2e8be2db35afad04db6b1cea11ef159", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414f00e997074e07b825402f861625a47b85275e/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414f00e997074e07b825402f861625a47b85275e/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=414f00e997074e07b825402f861625a47b85275e", "patch": "@@ -2399,6 +2399,30 @@ gfc_simplify_lbound (gfc_expr *array, gfc_expr *dim, gfc_expr *kind)\n }\n \n \n+gfc_expr *\n+gfc_simplify_leadz (gfc_expr *e)\n+{\n+  gfc_expr *result;\n+  unsigned long lz, bs;\n+  int i;\n+\n+  if (e->expr_type != EXPR_CONSTANT)\n+    return NULL;\n+\n+  i = gfc_validate_kind (e->ts.type, e->ts.kind, false);\n+  bs = gfc_integer_kinds[i].bit_size;\n+  if (mpz_cmp_si (e->value.integer, 0) == 0)\n+    lz = bs;\n+  else\n+    lz = bs - mpz_sizeinbase (e->value.integer, 2);\n+\n+  result = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind, &e->where);\n+  mpz_set_ui (result->value.integer, lz);\n+\n+  return result;\n+}\n+\n+\n gfc_expr *\n gfc_simplify_len (gfc_expr *e, gfc_expr *kind)\n {\n@@ -4337,6 +4361,27 @@ gfc_simplify_tiny (gfc_expr *e)\n }\n \n \n+gfc_expr *\n+gfc_simplify_trailz (gfc_expr *e)\n+{\n+  gfc_expr *result;\n+  unsigned long tz, bs;\n+  int i;\n+\n+  if (e->expr_type != EXPR_CONSTANT)\n+    return NULL;\n+\n+  i = gfc_validate_kind (e->ts.type, e->ts.kind, false);\n+  bs = gfc_integer_kinds[i].bit_size;\n+  tz = mpz_scan1 (e->value.integer, 0);\n+\n+  result = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind, &e->where);\n+  mpz_set_ui (result->value.integer, MIN (tz, bs));\n+\n+  return result;\n+}\n+\n+\n gfc_expr *\n gfc_simplify_transfer (gfc_expr *source, gfc_expr *mold, gfc_expr *size)\n {"}, {"sha": "ffe1e5b913e451019a41afe858808c4506dc6e76", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414f00e997074e07b825402f861625a47b85275e/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414f00e997074e07b825402f861625a47b85275e/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=414f00e997074e07b825402f861625a47b85275e", "patch": "@@ -2653,6 +2653,141 @@ gfc_conv_intrinsic_ishftc (gfc_se * se, gfc_expr * expr)\n   se->expr = fold_build3 (COND_EXPR, type, tmp, args[0], rrot);\n }\n \n+/* LEADZ (i) = (i == 0) ? BIT_SIZE (i)\n+\t\t\t: __builtin_clz(i) - (BIT_SIZE('int') - BIT_SIZE(i))\n+\n+   The conditional expression is necessary because the result of LEADZ(0)\n+   is defined, but the result of __builtin_clz(0) is undefined for most\n+   targets.\n+\n+   For INTEGER kinds smaller than the C 'int' type, we have to subtract the\n+   difference in bit size between the argument of LEADZ and the C int.  */\n+ \n+static void\n+gfc_conv_intrinsic_leadz (gfc_se * se, gfc_expr * expr)\n+{\n+  tree arg;\n+  tree arg_type;\n+  tree cond;\n+  tree result_type;\n+  tree leadz;\n+  tree bit_size;\n+  tree tmp;\n+  int arg_kind;\n+  int i, n, s;\n+\n+  gfc_conv_intrinsic_function_args (se, expr, &arg, 1);\n+\n+  /* Which variant of __builtin_clz* should we call?  */\n+  arg_kind = expr->value.function.actual->expr->ts.kind;\n+  i = gfc_validate_kind (BT_INTEGER, arg_kind, false);\n+  switch (arg_kind)\n+    {\n+      case 1:\n+      case 2:\n+      case 4:\n+        arg_type = unsigned_type_node;\n+\tn = BUILT_IN_CLZ;\n+\tbreak;\n+\n+      case 8:\n+        arg_type = long_unsigned_type_node;\n+\tn = BUILT_IN_CLZL;\n+\tbreak;\n+\n+      case 16:\n+        arg_type = long_long_unsigned_type_node;\n+\tn = BUILT_IN_CLZLL;\n+\tbreak;\n+\n+      default:\n+        gcc_unreachable ();\n+    }\n+\n+  /* Convert the actual argument to the proper argument type for the built-in\n+     function.  But the return type is of the default INTEGER kind.  */\n+  arg = fold_convert (arg_type, arg);\n+  result_type = gfc_get_int_type (gfc_default_integer_kind);\n+\n+  /* Compute LEADZ for the case i .ne. 0.  */\n+  s = TYPE_PRECISION (arg_type) - gfc_integer_kinds[i].bit_size;\n+  tmp = fold_convert (result_type, build_call_expr (built_in_decls[n], 1, arg));\n+  leadz = fold_build2 (MINUS_EXPR, result_type,\n+\t\t       tmp, build_int_cst (result_type, s));\n+\n+  /* Build BIT_SIZE.  */\n+  bit_size = build_int_cst (result_type, gfc_integer_kinds[i].bit_size);\n+\n+  /* ??? For some combinations of targets and integer kinds, the condition\n+\t can be avoided if CLZ_DEFINED_VALUE_AT_ZERO is used.  Later.  */\n+  cond = fold_build2 (EQ_EXPR, boolean_type_node,\n+\t\t      arg, build_int_cst (arg_type, 0));\n+  se->expr = fold_build3 (COND_EXPR, result_type, cond, bit_size, leadz);\n+}\n+\n+/* TRAILZ(i) = (i == 0) ? BIT_SIZE (i) : __builtin_ctz(i)\n+\n+   The conditional expression is necessary because the result of TRAILZ(0)\n+   is defined, but the result of __builtin_ctz(0) is undefined for most\n+   targets.  */\n+ \n+static void\n+gfc_conv_intrinsic_trailz (gfc_se * se, gfc_expr *expr)\n+{\n+  tree arg;\n+  tree arg_type;\n+  tree cond;\n+  tree result_type;\n+  tree trailz;\n+  tree bit_size;\n+  int arg_kind;\n+  int i, n;\n+\n+  gfc_conv_intrinsic_function_args (se, expr, &arg, 1);\n+\n+  /* Which variant of __builtin_clz* should we call?  */\n+  arg_kind = expr->value.function.actual->expr->ts.kind;\n+  i = gfc_validate_kind (BT_INTEGER, arg_kind, false);\n+  switch (expr->ts.kind)\n+    {\n+      case 1:\n+      case 2:\n+      case 4:\n+        arg_type = unsigned_type_node;\n+\tn = BUILT_IN_CTZ;\n+\tbreak;\n+\n+      case 8:\n+        arg_type = long_unsigned_type_node;\n+\tn = BUILT_IN_CTZL;\n+\tbreak;\n+\n+      case 16:\n+        arg_type = long_long_unsigned_type_node;\n+\tn = BUILT_IN_CTZLL;\n+\tbreak;\n+\n+      default:\n+        gcc_unreachable ();\n+    }\n+\n+  /* Convert the actual argument to the proper argument type for the built-in\n+     function.  But the return type is of the default INTEGER kind.  */\n+  arg = fold_convert (arg_type, arg);\n+  result_type = gfc_get_int_type (gfc_default_integer_kind);\n+\n+  /* Compute TRAILZ for the case i .ne. 0.  */\n+  trailz = fold_convert (result_type, build_call_expr (built_in_decls[n], 1, arg));\n+\n+  /* Build BIT_SIZE.  */\n+  bit_size = build_int_cst (result_type, gfc_integer_kinds[i].bit_size);\n+\n+  /* ??? For some combinations of targets and integer kinds, the condition\n+\t can be avoided if CTZ_DEFINED_VALUE_AT_ZERO is used.  Later.  */\n+  cond = fold_build2 (EQ_EXPR, boolean_type_node,\n+\t\t      arg, build_int_cst (arg_type, 0));\n+  se->expr = fold_build3 (COND_EXPR, result_type, cond, bit_size, trailz);\n+}\n \n /* Process an intrinsic with unspecified argument-types that has an optional\n    argument (which could be of type character), e.g. EOSHIFT.  For those, we\n@@ -4482,6 +4617,14 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       gfc_conv_intrinsic_ishftc (se, expr);\n       break;\n \n+    case GFC_ISYM_LEADZ:\n+      gfc_conv_intrinsic_leadz (se, expr);\n+      break;\n+\n+    case GFC_ISYM_TRAILZ:\n+      gfc_conv_intrinsic_trailz (se, expr);\n+      break;\n+\n     case GFC_ISYM_LBOUND:\n       gfc_conv_intrinsic_bound (se, expr, 0);\n       break;"}, {"sha": "7894386318cb8080021ce5da2cd89d97d7568919", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414f00e997074e07b825402f861625a47b85275e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414f00e997074e07b825402f861625a47b85275e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=414f00e997074e07b825402f861625a47b85275e", "patch": "@@ -1,3 +1,9 @@\n+2008-10-02  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\tPR fortran/37635\n+\t* gfortran.fortran-torture/execute/intrinsic_leadz.f90: New test.\n+\t* gfortran.fortran-torture/execute/intrinsic_trailz.f90: New test.\n+\n 2008-10-02  Janis Johnson  <janis187@us.ibm.com>\n \n \t* gcc.dg/torture/pr36891.c: Ignore an irrelevant warning."}, {"sha": "80b61c83d29bd6567b45cf2d9e8f7cf49fe01c24", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/intrinsic_leadz.f90", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414f00e997074e07b825402f861625a47b85275e/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_leadz.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414f00e997074e07b825402f861625a47b85275e/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_leadz.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_leadz.f90?ref=414f00e997074e07b825402f861625a47b85275e", "patch": "@@ -0,0 +1,46 @@\n+program test_intrinsic_leadz\n+   implicit none\n+\n+   call test_leadz(0_1,0_2,0_4,0_8,1_1,1_2,1_4,1_8,8_1,8_2,8_4,8_8)\n+   stop\n+\n+   contains\n+\n+        subroutine test_leadz(z1,z2,z4,z8,i1,i2,i4,i8,e1,e2,e4,e8)\n+           integer(kind=1) :: z1, i1, e1\n+           integer(kind=2) :: z2, i2, e2\n+           integer(kind=4) :: z4, i4, e4\n+           integer(kind=8) :: z8, i8, e8\n+\n+           if (leadz(0_1) /=  8) call abort()\n+           if (leadz(0_2) /= 16) call abort()\n+           if (leadz(0_4) /= 32) call abort()\n+           if (leadz(0_8) /= 64) call abort()\n+\n+           if (leadz(1_1) /=  7) call abort()\n+           if (leadz(1_2) /= 15) call abort()\n+           if (leadz(1_4) /= 31) call abort()\n+           if (leadz(1_8) /= 63) call abort()\n+\n+           if (leadz(8_1) /=  4) call abort()\n+           if (leadz(8_2) /= 12) call abort()\n+           if (leadz(8_4) /= 28) call abort()\n+           if (leadz(8_8) /= 60) call abort()\n+\n+           if (leadz(z1) /=  8) call abort()\n+           if (leadz(z2) /= 16) call abort()\n+           if (leadz(z4) /= 32) call abort()\n+           if (leadz(z8) /= 64) call abort()\n+\n+           if (leadz(i1) /=  7) call abort()\n+           if (leadz(i2) /= 15) call abort()\n+           if (leadz(i4) /= 31) call abort()\n+           if (leadz(i8) /= 63) call abort()\n+\n+           if (leadz(e1) /=  4) call abort()\n+           if (leadz(e2) /= 12) call abort()\n+           if (leadz(e4) /= 28) call abort()\n+           if (leadz(e8) /= 60) call abort()\n+        end subroutine test_leadz\n+\n+end program"}, {"sha": "948c806b4acba88d203a239d7305f3627984da83", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/intrinsic_trailz.f90", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414f00e997074e07b825402f861625a47b85275e/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_trailz.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414f00e997074e07b825402f861625a47b85275e/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_trailz.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_trailz.f90?ref=414f00e997074e07b825402f861625a47b85275e", "patch": "@@ -0,0 +1,46 @@\n+program test_intrinsic_trailz\n+   implicit none\n+\n+   call test_trailz(0_1,0_2,0_4,0_8,1_1,1_2,1_4,1_8,8_1,8_2,8_4,8_8)\n+   stop\n+\n+   contains\n+\n+        subroutine test_trailz(z1,z2,z4,z8,i1,i2,i4,i8,e1,e2,e4,e8)\n+           integer(kind=1) :: z1, i1, e1\n+           integer(kind=2) :: z2, i2, e2\n+           integer(kind=4) :: z4, i4, e4\n+           integer(kind=8) :: z8, i8, e8\n+\n+           if (trailz(0_1) /=  8) call abort()\n+           if (trailz(0_2) /= 16) call abort()\n+           if (trailz(0_4) /= 32) call abort()\n+           if (trailz(0_8) /= 64) call abort()\n+\n+           if (trailz(1_1) /=  0) call abort()\n+           if (trailz(1_2) /=  0) call abort()\n+           if (trailz(1_4) /=  0) call abort()\n+           if (trailz(1_8) /=  0) call abort()\n+\n+           if (trailz(8_1) /=  3) call abort()\n+           if (trailz(8_2) /=  3) call abort()\n+           if (trailz(8_4) /=  3) call abort()\n+           if (trailz(8_8) /=  3) call abort()\n+\n+           if (trailz(z1) /=  8) call abort()\n+           if (trailz(z2) /= 16) call abort()\n+           if (trailz(z4) /= 32) call abort()\n+           if (trailz(z8) /= 64) call abort()\n+\n+           if (trailz(i1) /=  0) call abort()\n+           if (trailz(i2) /=  0) call abort()\n+           if (trailz(i4) /=  0) call abort()\n+           if (trailz(i8) /=  0) call abort()\n+\n+           if (trailz(e1) /=  3) call abort()\n+           if (trailz(e2) /=  3) call abort()\n+           if (trailz(e4) /=  3) call abort()\n+           if (trailz(e8) /=  3) call abort()\n+        end subroutine test_trailz\n+\n+end program"}]}