{"sha": "d6106132907f6bd01109f2616d20a87edecc6fc6", "node_id": "C_kwDOANBUbNoAKGQ2MTA2MTMyOTA3ZjZiZDAxMTA5ZjI2MTZkMjBhODdlZGVjYzZmYzY", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-09-07T09:52:04Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-09-07T09:52:04Z"}, "message": "aarch64: Fix +nosimd handling of FPR moves\n\n8-bit and 16-bit FPR moves would ICE for +nosimd+fp, and some other\nmoves would handle FPR<-zero inefficiently.  This is very much a\nniche case at the moment, but something like it becomes more\nimportant with SME streaming mode.\n\nThe si, di and vector tests already passed, they're just included for\ncompleteness.\n\nWe're a bit inconsistent about whether alternatives involving FPRs\nare marked with arch==fp or arch=* (i.e. default).  E.g. FPR loads\nand stores are sometimes * and sometimes fp.\n\nIMO * makes more sense.  FPRs should not be used at all without\nTARGET_FLOAT, so TARGET_FLOAT represents the base architecture\nwhen FPRs are enabled.  I think it's more useful if non-default\narches represent a genuine restriction.\n\ngcc/\n\t* config/aarch64/aarch64.md (*mov<SHORT:mode>_aarch64): Extend\n\tw<-w, r<-w and w<-r alternatives to !simd, using 32-bit moves\n\tin that case.  Extend w<-r to w<-Z.\n\t(*mov<HFBF:mode>_aarch64): Likewise, but with Y instead of Z.\n\t(*movti_aarch64): Use an FMOV from XZR for w<-Z if MOVI is not\n\tavailable.\n\t(define_split): Do not apply the floating-point immediate-to-register\n\tsplit to zeros, even if MOVI is not available.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/movqi_1.c: New test.\n\t* gcc.target/aarch64/movhi_1.c: Likewise.\n\t* gcc.target/aarch64/movsi_1.c: Likewise.\n\t* gcc.target/aarch64/movdi_2.c: Likewise.\n\t* gcc.target/aarch64/movti_2.c: Likewise.\n\t* gcc.target/aarch64/movhf_1.c: Likewise.\n\t* gcc.target/aarch64/movsf_1.c: Likewise.\n\t* gcc.target/aarch64/movdf_1.c: Likewise.\n\t* gcc.target/aarch64/movtf_2.c: Likewise.\n\t* gcc.target/aarch64/movv8qi_1.c: Likewise.\n\t* gcc.target/aarch64/movv16qi_1.c: Likewise.", "tree": {"sha": "34120047fb682bda5375cbaeff2f2e2ee6b8c1a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34120047fb682bda5375cbaeff2f2e2ee6b8c1a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6106132907f6bd01109f2616d20a87edecc6fc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6106132907f6bd01109f2616d20a87edecc6fc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6106132907f6bd01109f2616d20a87edecc6fc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6106132907f6bd01109f2616d20a87edecc6fc6/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f58d5545d6b39cb6534dae105931e92ea9389d1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f58d5545d6b39cb6534dae105931e92ea9389d1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f58d5545d6b39cb6534dae105931e92ea9389d1f"}], "stats": {"total": 745, "additions": 729, "deletions": 16}, "files": [{"sha": "efcbecbf67a5e5b48429f83199a11b8c092956cf", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6106132907f6bd01109f2616d20a87edecc6fc6/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6106132907f6bd01109f2616d20a87edecc6fc6/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=d6106132907f6bd01109f2616d20a87edecc6fc6", "patch": "@@ -1195,7 +1195,7 @@\n \n (define_insn \"*mov<mode>_aarch64\"\n   [(set (match_operand:SHORT 0 \"nonimmediate_operand\" \"=r,r,    w,r  ,r,w, m,m,r,w,w\")\n-\t(match_operand:SHORT 1 \"aarch64_mov_operand\"  \" r,M,D<hq>,Usv,m,m,rZ,w,w,r,w\"))]\n+\t(match_operand:SHORT 1 \"aarch64_mov_operand\"  \" r,M,D<hq>,Usv,m,m,rZ,w,w,rZ,w\"))]\n   \"(register_operand (operands[0], <MODE>mode)\n     || aarch64_reg_or_zero (operands[1], <MODE>mode))\"\n {\n@@ -1219,19 +1219,19 @@\n      case 7:\n        return \"str\\t%<size>1, %0\";\n      case 8:\n-       return \"umov\\t%w0, %1.<v>[0]\";\n+       return TARGET_SIMD ? \"umov\\t%w0, %1.<v>[0]\" : \"fmov\\t%w0, %s1\";\n      case 9:\n-       return \"dup\\t%0.<Vallxd>, %w1\";\n+       return TARGET_SIMD ? \"dup\\t%0.<Vallxd>, %w1\" : \"fmov\\t%s0, %w1\";\n      case 10:\n-       return \"dup\\t%<Vetype>0, %1.<v>[0]\";\n+       return TARGET_SIMD ? \"dup\\t%<Vetype>0, %1.<v>[0]\" : \"fmov\\t%s0, %s1\";\n      default:\n        gcc_unreachable ();\n      }\n }\n   ;; The \"mov_imm\" type for CNT is just a placeholder.\n   [(set_attr \"type\" \"mov_reg,mov_imm,neon_move,mov_imm,load_4,load_4,store_4,\n \t\t     store_4,neon_to_gp<q>,neon_from_gp<q>,neon_dup\")\n-   (set_attr \"arch\" \"*,*,simd,sve,*,*,*,*,simd,simd,simd\")]\n+   (set_attr \"arch\" \"*,*,simd,sve,*,*,*,*,*,*,*\")]\n )\n \n (define_expand \"mov<mode>\"\n@@ -1393,14 +1393,15 @@\n \n (define_insn \"*movti_aarch64\"\n   [(set (match_operand:TI 0\n-\t \"nonimmediate_operand\"  \"=   r,w,w, r,w,r,m,m,w,m\")\n+\t \"nonimmediate_operand\"  \"=   r,w,w,w, r,w,r,m,m,w,m\")\n \t(match_operand:TI 1\n-\t \"aarch64_movti_operand\" \" rUti,Z,r, w,w,m,r,Z,m,w\"))]\n+\t \"aarch64_movti_operand\" \" rUti,Z,Z,r, w,w,m,r,Z,m,w\"))]\n   \"(register_operand (operands[0], TImode)\n     || aarch64_reg_or_zero (operands[1], TImode))\"\n   \"@\n    #\n    movi\\\\t%0.2d, #0\n+   fmov\\t%d0, xzr\n    #\n    #\n    mov\\\\t%0.16b, %1.16b\n@@ -1409,11 +1410,11 @@\n    stp\\\\txzr, xzr, %0\n    ldr\\\\t%q0, %1\n    str\\\\t%q1, %0\"\n-  [(set_attr \"type\" \"multiple,neon_move,f_mcr,f_mrc,neon_logic_q, \\\n+  [(set_attr \"type\" \"multiple,neon_move,f_mcr,f_mcr,f_mrc,neon_logic_q, \\\n \t\t             load_16,store_16,store_16,\\\n                              load_16,store_16\")\n-   (set_attr \"length\" \"8,4,8,8,4,4,4,4,4,4\")\n-   (set_attr \"arch\" \"*,simd,*,*,simd,*,*,*,fp,fp\")]\n+   (set_attr \"length\" \"8,4,4,8,8,4,4,4,4,4,4\")\n+   (set_attr \"arch\" \"*,simd,*,*,*,simd,*,*,*,fp,fp\")]\n )\n \n ;; Split a TImode register-register or register-immediate move into\n@@ -1452,26 +1453,30 @@\n )\n \n (define_insn \"*mov<mode>_aarch64\"\n-  [(set (match_operand:HFBF 0 \"nonimmediate_operand\" \"=w,w  , w,?r,w,w  ,w  ,w,m,r,m ,r\")\n-\t(match_operand:HFBF 1 \"general_operand\"      \"Y ,?rY,?r, w,w,Ufc,Uvi,m,w,m,rY,r\"))]\n+  [(set (match_operand:HFBF 0 \"nonimmediate_operand\" \"=w,w  ,w ,w  ,?r,?r,w,w,w  ,w  ,w,m,r,m ,r\")\n+\t(match_operand:HFBF 1 \"general_operand\"      \"Y ,?rY,?r,?rY, w, w,w,w,Ufc,Uvi,m,w,m,rY,r\"))]\n   \"TARGET_FLOAT && (register_operand (operands[0], <MODE>mode)\n     || aarch64_reg_or_fp_zero (operands[1], <MODE>mode))\"\n   \"@\n    movi\\\\t%0.4h, #0\n    fmov\\\\t%h0, %w1\n    dup\\\\t%w0.4h, %w1\n+   fmov\\\\t%s0, %w1\n    umov\\\\t%w0, %1.h[0]\n+   fmov\\\\t%w0, %s1\n    mov\\\\t%0.h[0], %1.h[0]\n+   fmov\\\\t%s0, %s1\n    fmov\\\\t%h0, %1\n    * return aarch64_output_scalar_simd_mov_immediate (operands[1], HImode);\n    ldr\\\\t%h0, %1\n    str\\\\t%h1, %0\n    ldrh\\\\t%w0, %1\n    strh\\\\t%w1, %0\n    mov\\\\t%w0, %w1\"\n-  [(set_attr \"type\" \"neon_move,f_mcr,neon_move,neon_to_gp, neon_move,fconsts, \\\n-\t\t     neon_move,f_loads,f_stores,load_4,store_4,mov_reg\")\n-   (set_attr \"arch\" \"simd,fp16,simd,simd,simd,fp16,simd,*,*,*,*,*\")]\n+  [(set_attr \"type\" \"neon_move,f_mcr,neon_move,f_mcr,neon_to_gp,f_mrc,\n+\t\t     neon_move,fmov,fconsts,neon_move,f_loads,f_stores,\n+\t\t     load_4,store_4,mov_reg\")\n+   (set_attr \"arch\" \"simd,fp16,simd,*,simd,*,simd,*,fp16,simd,*,*,*,*,*\")]\n )\n \n (define_insn \"*mov<mode>_aarch64\"\n@@ -1524,10 +1529,11 @@\n \n (define_split\n   [(set (match_operand:GPF_HF 0 \"nonimmediate_operand\")\n-\t(match_operand:GPF_HF 1 \"general_operand\"))]\n+\t(match_operand:GPF_HF 1 \"const_double_operand\"))]\n   \"can_create_pseudo_p ()\n    && !aarch64_can_const_movi_rtx_p (operands[1], <MODE>mode)\n    && !aarch64_float_const_representable_p (operands[1])\n+   && !aarch64_float_const_zero_rtx_p (operands[1])\n    &&  aarch64_float_const_rtx_p (operands[1])\"\n   [(const_int 0)]\n   {"}, {"sha": "a51ded1d6bac77d7925d45299477154bffa93866", "filename": "gcc/testsuite/gcc.target/aarch64/movdf_1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6106132907f6bd01109f2616d20a87edecc6fc6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovdf_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6106132907f6bd01109f2616d20a87edecc6fc6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovdf_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovdf_1.c?ref=d6106132907f6bd01109f2616d20a87edecc6fc6", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+#pragma GCC target \"+nothing+nosimd+fp\"\n+\n+/*\n+** fpr_to_fpr:\n+**\tfmov\td0, d1\n+**\tret\n+*/\n+double\n+fpr_to_fpr (double q0, double q1)\n+{\n+  return q1;\n+}\n+\n+/*\n+** gpr_to_fpr:\n+**\tfmov\td0, x0\n+**\tret\n+*/\n+double\n+gpr_to_fpr ()\n+{\n+  register double x0 asm (\"x0\");\n+  asm volatile (\"\" : \"=r\" (x0));\n+  return x0;\n+}\n+\n+/*\n+** zero_to_fpr:\n+**\tfmov\td0, xzr\n+**\tret\n+*/\n+double\n+zero_to_fpr ()\n+{\n+  return 0;\n+}\n+\n+/*\n+** fpr_to_gpr:\n+**\tfmov\tx0, d0\n+**\tret\n+*/\n+void\n+fpr_to_gpr (double q0)\n+{\n+  register double x0 asm (\"x0\");\n+  x0 = q0;\n+  asm volatile (\"\" :: \"r\" (x0));\n+}"}, {"sha": "dd3fc3e8a2e2915645288527a1bc01039a90075c", "filename": "gcc/testsuite/gcc.target/aarch64/movdi_2.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6106132907f6bd01109f2616d20a87edecc6fc6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovdi_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6106132907f6bd01109f2616d20a87edecc6fc6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovdi_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovdi_2.c?ref=d6106132907f6bd01109f2616d20a87edecc6fc6", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+#pragma GCC target \"+nothing+nosimd+fp\"\n+\n+#include <stdint.h>\n+\n+/*\n+** fpr_to_fpr:\n+**\tfmov\td0, d1\n+**\tret\n+*/\n+void\n+fpr_to_fpr (void)\n+{\n+  register uint64_t q0 asm (\"q0\");\n+  register uint64_t q1 asm (\"q1\");\n+  asm volatile (\"\" : \"=w\" (q1));\n+  q0 = q1;\n+  asm volatile (\"\" :: \"w\" (q0));\n+}\n+\n+/*\n+** gpr_to_fpr:\n+**\tfmov\td0, x0\n+**\tret\n+*/\n+void\n+gpr_to_fpr (uint64_t x0)\n+{\n+  register uint64_t q0 asm (\"q0\");\n+  q0 = x0;\n+  asm volatile (\"\" :: \"w\" (q0));\n+}\n+\n+/*\n+** zero_to_fpr:\n+**\tfmov\td0, xzr\n+**\tret\n+*/\n+void\n+zero_to_fpr ()\n+{\n+  register uint64_t q0 asm (\"q0\");\n+  q0 = 0;\n+  asm volatile (\"\" :: \"w\" (q0));\n+}\n+\n+/*\n+** fpr_to_gpr:\n+**\tfmov\tx0, d0\n+**\tret\n+*/\n+uint64_t\n+fpr_to_gpr ()\n+{\n+  register uint64_t q0 asm (\"q0\");\n+  asm volatile (\"\" : \"=w\" (q0));\n+  return q0;\n+}"}, {"sha": "cae25d4e51f0d57bbf32ad3c8da82b5ea799539f", "filename": "gcc/testsuite/gcc.target/aarch64/movhf_1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6106132907f6bd01109f2616d20a87edecc6fc6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovhf_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6106132907f6bd01109f2616d20a87edecc6fc6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovhf_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovhf_1.c?ref=d6106132907f6bd01109f2616d20a87edecc6fc6", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+#pragma GCC target \"+nothing+nosimd+fp\"\n+\n+/*\n+** fpr_to_fpr:\n+**\tfmov\ts0, s1\n+**\tret\n+*/\n+_Float16\n+fpr_to_fpr (_Float16 q0, _Float16 q1)\n+{\n+  return q1;\n+}\n+\n+/*\n+** gpr_to_fpr:\n+**\tfmov\ts0, w0\n+**\tret\n+*/\n+_Float16\n+gpr_to_fpr ()\n+{\n+  register _Float16 w0 asm (\"w0\");\n+  asm volatile (\"\" : \"=r\" (w0));\n+  return w0;\n+}\n+\n+/*\n+** zero_to_fpr:\n+**\tfmov\ts0, wzr\n+**\tret\n+*/\n+_Float16\n+zero_to_fpr ()\n+{\n+  return 0;\n+}\n+\n+/*\n+** fpr_to_gpr:\n+**\tfmov\tw0, s0\n+**\tret\n+*/\n+void\n+fpr_to_gpr (_Float16 q0)\n+{\n+  register _Float16 w0 asm (\"w0\");\n+  w0 = q0;\n+  asm volatile (\"\" :: \"r\" (w0));\n+}"}, {"sha": "8017abc5f19a470072a3ef09f9af81ce335c9c0e", "filename": "gcc/testsuite/gcc.target/aarch64/movhi_1.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6106132907f6bd01109f2616d20a87edecc6fc6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovhi_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6106132907f6bd01109f2616d20a87edecc6fc6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovhi_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovhi_1.c?ref=d6106132907f6bd01109f2616d20a87edecc6fc6", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+#pragma GCC target \"+nothing+nosimd+fp\"\n+\n+#include <stdint.h>\n+\n+/*\n+** fpr_to_fpr:\n+**\tfmov\ts0, s1\n+**\tret\n+*/\n+void\n+fpr_to_fpr (void)\n+{\n+  register uint16_t q0 asm (\"q0\");\n+  register uint16_t q1 asm (\"q1\");\n+  asm volatile (\"\" : \"=w\" (q1));\n+  q0 = q1;\n+  asm volatile (\"\" :: \"w\" (q0));\n+}\n+\n+/*\n+** gpr_to_fpr:\n+**\tfmov\ts0, w0\n+**\tret\n+*/\n+void\n+gpr_to_fpr (uint16_t w0)\n+{\n+  register uint16_t q0 asm (\"q0\");\n+  q0 = w0;\n+  asm volatile (\"\" :: \"w\" (q0));\n+}\n+\n+/*\n+** zero_to_fpr:\n+**\tfmov\ts0, wzr\n+**\tret\n+*/\n+void\n+zero_to_fpr ()\n+{\n+  register uint16_t q0 asm (\"q0\");\n+  q0 = 0;\n+  asm volatile (\"\" :: \"w\" (q0));\n+}\n+\n+/*\n+** fpr_to_gpr:\n+**\tfmov\tw0, s0\n+**\tret\n+*/\n+uint16_t\n+fpr_to_gpr ()\n+{\n+  register uint16_t q0 asm (\"q0\");\n+  asm volatile (\"\" : \"=w\" (q0));\n+  return q0;\n+}"}, {"sha": "401a79630f497fc99560a829b3a87957a9c51c23", "filename": "gcc/testsuite/gcc.target/aarch64/movqi_1.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6106132907f6bd01109f2616d20a87edecc6fc6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovqi_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6106132907f6bd01109f2616d20a87edecc6fc6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovqi_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovqi_1.c?ref=d6106132907f6bd01109f2616d20a87edecc6fc6", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+#pragma GCC target \"+nothing+nosimd+fp\"\n+\n+#include <stdint.h>\n+\n+/*\n+** fpr_to_fpr:\n+**\tfmov\ts0, s1\n+**\tret\n+*/\n+void\n+fpr_to_fpr (void)\n+{\n+  register uint8_t q0 asm (\"q0\");\n+  register uint8_t q1 asm (\"q1\");\n+  asm volatile (\"\" : \"=w\" (q1));\n+  q0 = q1;\n+  asm volatile (\"\" :: \"w\" (q0));\n+}\n+\n+/*\n+** gpr_to_fpr:\n+**\tfmov\ts0, w0\n+**\tret\n+*/\n+void\n+gpr_to_fpr (uint8_t w0)\n+{\n+  register uint8_t q0 asm (\"q0\");\n+  q0 = w0;\n+  asm volatile (\"\" :: \"w\" (q0));\n+}\n+\n+/*\n+** zero_to_fpr:\n+**\tfmov\ts0, wzr\n+**\tret\n+*/\n+void\n+zero_to_fpr ()\n+{\n+  register uint8_t q0 asm (\"q0\");\n+  q0 = 0;\n+  asm volatile (\"\" :: \"w\" (q0));\n+}\n+\n+/*\n+** fpr_to_gpr:\n+**\tfmov\tw0, s0\n+**\tret\n+*/\n+uint8_t\n+fpr_to_gpr ()\n+{\n+  register uint8_t q0 asm (\"q0\");\n+  asm volatile (\"\" : \"=w\" (q0));\n+  return q0;\n+}"}, {"sha": "09715aa4fb17eed2f9e5091360dca42b1db63477", "filename": "gcc/testsuite/gcc.target/aarch64/movsf_1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6106132907f6bd01109f2616d20a87edecc6fc6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovsf_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6106132907f6bd01109f2616d20a87edecc6fc6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovsf_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovsf_1.c?ref=d6106132907f6bd01109f2616d20a87edecc6fc6", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+#pragma GCC target \"+nothing+nosimd+fp\"\n+\n+/*\n+** fpr_to_fpr:\n+**\tfmov\ts0, s1\n+**\tret\n+*/\n+float\n+fpr_to_fpr (float q0, float q1)\n+{\n+  return q1;\n+}\n+\n+/*\n+** gpr_to_fpr:\n+**\tfmov\ts0, w0\n+**\tret\n+*/\n+float\n+gpr_to_fpr ()\n+{\n+  register float w0 asm (\"w0\");\n+  asm volatile (\"\" : \"=r\" (w0));\n+  return w0;\n+}\n+\n+/*\n+** zero_to_fpr:\n+**\tfmov\ts0, wzr\n+**\tret\n+*/\n+float\n+zero_to_fpr ()\n+{\n+  return 0;\n+}\n+\n+/*\n+** fpr_to_gpr:\n+**\tfmov\tw0, s0\n+**\tret\n+*/\n+void\n+fpr_to_gpr (float q0)\n+{\n+  register float w0 asm (\"w0\");\n+  w0 = q0;\n+  asm volatile (\"\" :: \"r\" (w0));\n+}"}, {"sha": "5314139aa8b3df82ea23ce5863c3554203444faa", "filename": "gcc/testsuite/gcc.target/aarch64/movsi_1.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6106132907f6bd01109f2616d20a87edecc6fc6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovsi_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6106132907f6bd01109f2616d20a87edecc6fc6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovsi_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovsi_1.c?ref=d6106132907f6bd01109f2616d20a87edecc6fc6", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+#pragma GCC target \"+nothing+nosimd+fp\"\n+\n+#include <stdint.h>\n+\n+/*\n+** fpr_to_fpr:\n+**\tfmov\ts0, s1\n+**\tret\n+*/\n+void\n+fpr_to_fpr (void)\n+{\n+  register uint32_t q0 asm (\"q0\");\n+  register uint32_t q1 asm (\"q1\");\n+  asm volatile (\"\" : \"=w\" (q1));\n+  q0 = q1;\n+  asm volatile (\"\" :: \"w\" (q0));\n+}\n+\n+/*\n+** gpr_to_fpr:\n+**\tfmov\ts0, w0\n+**\tret\n+*/\n+void\n+gpr_to_fpr (uint32_t w0)\n+{\n+  register uint32_t q0 asm (\"q0\");\n+  q0 = w0;\n+  asm volatile (\"\" :: \"w\" (q0));\n+}\n+\n+/*\n+** zero_to_fpr:\n+**\tfmov\ts0, wzr\n+**\tret\n+*/\n+void\n+zero_to_fpr ()\n+{\n+  register uint32_t q0 asm (\"q0\");\n+  q0 = 0;\n+  asm volatile (\"\" :: \"w\" (q0));\n+}\n+\n+/*\n+** fpr_to_gpr:\n+**\tfmov\tw0, s0\n+**\tret\n+*/\n+uint32_t\n+fpr_to_gpr ()\n+{\n+  register uint32_t q0 asm (\"q0\");\n+  asm volatile (\"\" : \"=w\" (q0));\n+  return q0;\n+}"}, {"sha": "38b16358d7212222d7ab83473d743a100c0d7f02", "filename": "gcc/testsuite/gcc.target/aarch64/movtf_2.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6106132907f6bd01109f2616d20a87edecc6fc6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovtf_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6106132907f6bd01109f2616d20a87edecc6fc6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovtf_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovtf_2.c?ref=d6106132907f6bd01109f2616d20a87edecc6fc6", "patch": "@@ -0,0 +1,81 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target large_long_double } */\n+/* { dg-options \"-O -mtune=neoverse-v1 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+#pragma GCC target \"+nothing+nosimd+fp\"\n+\n+/*\n+** fpr_to_fpr:\n+**\tsub\tsp, sp, #16\n+**\tstr\tq1, \\[sp\\]\n+**\tldr\tq0, \\[sp\\]\n+**\tadd\tsp, sp, #?16\n+**\tret\n+*/\n+long double\n+fpr_to_fpr (long double q0, long double q1)\n+{\n+  return q1;\n+}\n+\n+/*\n+** gpr_to_fpr:\t{ target aarch64_little_endian }\n+**\tfmov\td0, x0\n+**\tfmov\tv0.d\\[1\\], x1\n+**\tret\n+*/\n+/*\n+** gpr_to_fpr:\t{ target aarch64_big_endian }\n+**\tfmov\td0, x1\n+**\tfmov\tv0.d\\[1\\], x0\n+**\tret\n+*/\n+long double\n+gpr_to_fpr ()\n+{\n+  register long double x0 asm (\"x0\");\n+  asm volatile (\"\" : \"=r\" (x0));\n+  return x0;\n+}\n+\n+/*\n+** zero_to_fpr:\n+**\tfmov\ts0, wzr\n+**\tret\n+*/\n+long double\n+zero_to_fpr ()\n+{\n+  return 0;\n+}\n+\n+/*\n+** fpr_to_gpr:\t{ target aarch64_little_endian }\n+** (\n+**\tfmov\tx0, d0\n+**\tfmov\tx1, v0.d\\[1\\]\n+** |\n+**\tfmov\tx1, v0.d\\[1\\]\n+**\tfmov\tx0, d0\n+** )\n+**\tret\n+*/\n+/*\n+** fpr_to_gpr:\t{ target aarch64_big_endian }\n+** (\n+**\tfmov\tx1, d0\n+**\tfmov\tx0, v0.d\\[1\\]\n+** |\n+**\tfmov\tx0, v0.d\\[1\\]\n+**\tfmov\tx1, d0\n+** )\n+**\tret\n+*/\n+void\n+fpr_to_gpr (long double q0)\n+{\n+  register long double x0 asm (\"x0\");\n+  x0 = q0;\n+  asm volatile (\"\" :: \"r\" (x0));\n+}"}, {"sha": "c393b1220999db0d1f679ad0c0c22f5d1f32e0f1", "filename": "gcc/testsuite/gcc.target/aarch64/movti_2.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6106132907f6bd01109f2616d20a87edecc6fc6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovti_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6106132907f6bd01109f2616d20a87edecc6fc6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovti_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovti_2.c?ref=d6106132907f6bd01109f2616d20a87edecc6fc6", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O -mtune=neoverse-v1 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+#pragma GCC target \"+nothing+nosimd+fp\"\n+\n+/*\n+** fpr_to_fpr:\n+**\tsub\tsp, sp, #16\n+**\tstr\tq1, \\[sp\\]\n+**\tldr\tq0, \\[sp\\]\n+**\tadd\tsp, sp, #?16\n+**\tret\n+*/\n+void\n+fpr_to_fpr (void)\n+{\n+  register __int128_t q0 asm (\"q0\");\n+  register __int128_t q1 asm (\"q1\");\n+  asm volatile (\"\" : \"=w\" (q1));\n+  q0 = q1;\n+  asm volatile (\"\" :: \"w\" (q0));\n+}\n+\n+/*\n+** gpr_to_fpr:\t{ target aarch64_little_endian }\n+**\tfmov\td0, x0\n+**\tfmov\tv0.d\\[1\\], x1\n+**\tret\n+*/\n+/*\n+** gpr_to_fpr:\t{ target aarch64_big_endian }\n+**\tfmov\td0, x1\n+**\tfmov\tv0.d\\[1\\], x0\n+**\tret\n+*/\n+void\n+gpr_to_fpr (__int128_t x0)\n+{\n+  register __int128_t q0 asm (\"q0\");\n+  q0 = x0;\n+  asm volatile (\"\" :: \"w\" (q0));\n+}\n+\n+/*\n+** zero_to_fpr:\n+**\tfmov\td0, xzr\n+**\tret\n+*/\n+void\n+zero_to_fpr ()\n+{\n+  register __int128_t q0 asm (\"q0\");\n+  q0 = 0;\n+  asm volatile (\"\" :: \"w\" (q0));\n+}\n+\n+/*\n+** fpr_to_gpr:\t{ target aarch64_little_endian }\n+** (\n+**\tfmov\tx0, d0\n+**\tfmov\tx1, v0.d\\[1\\]\n+** |\n+**\tfmov\tx1, v0.d\\[1\\]\n+**\tfmov\tx0, d0\n+** )\n+**\tret\n+*/\n+/*\n+** fpr_to_gpr:\t{ target aarch64_big_endian }\n+** (\n+**\tfmov\tx1, d0\n+**\tfmov\tx0, v0.d\\[1\\]\n+** |\n+**\tfmov\tx0, v0.d\\[1\\]\n+**\tfmov\tx1, d0\n+** )\n+**\tret\n+*/\n+__int128_t\n+fpr_to_gpr ()\n+{\n+  register __int128_t q0 asm (\"q0\");\n+  asm volatile (\"\" : \"=w\" (q0));\n+  return q0;\n+}"}, {"sha": "8a6afb13bf169bfbc622e2a9bf446d67fc51502a", "filename": "gcc/testsuite/gcc.target/aarch64/movv16qi_1.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6106132907f6bd01109f2616d20a87edecc6fc6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovv16qi_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6106132907f6bd01109f2616d20a87edecc6fc6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovv16qi_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovv16qi_1.c?ref=d6106132907f6bd01109f2616d20a87edecc6fc6", "patch": "@@ -0,0 +1,82 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O -mtune=neoverse-v1 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+#pragma GCC target \"+nothing+nosimd+fp\"\n+\n+typedef unsigned char v16qi __attribute__((vector_size(16)));\n+\n+/*\n+** fpr_to_fpr:\n+**\tsub\tsp, sp, #16\n+**\tstr\tq1, \\[sp\\]\n+**\tldr\tq0, \\[sp\\]\n+**\tadd\tsp, sp, #?16\n+**\tret\n+*/\n+v16qi\n+fpr_to_fpr (v16qi q0, v16qi q1)\n+{\n+  return q1;\n+}\n+\n+/*\n+** gpr_to_fpr:\t{ target aarch64_little_endian }\n+**\tfmov\td0, x0\n+**\tfmov\tv0.d\\[1\\], x1\n+**\tret\n+*/\n+/*\n+** gpr_to_fpr:\t{ target aarch64_big_endian }\n+**\tfmov\td0, x1\n+**\tfmov\tv0.d\\[1\\], x0\n+**\tret\n+*/\n+v16qi\n+gpr_to_fpr ()\n+{\n+  register v16qi x0 asm (\"x0\");\n+  asm volatile (\"\" : \"=r\" (x0));\n+  return x0;\n+}\n+\n+/*\n+** zero_to_fpr:\n+**\tfmov\td0, xzr\n+**\tret\n+*/\n+v16qi\n+zero_to_fpr ()\n+{\n+  return (v16qi) {};\n+}\n+\n+/*\n+** fpr_to_gpr:\t{ target aarch64_little_endian }\n+** (\n+**\tfmov\tx0, d0\n+**\tfmov\tx1, v0.d\\[1\\]\n+** |\n+**\tfmov\tx1, v0.d\\[1\\]\n+**\tfmov\tx0, d0\n+** )\n+**\tret\n+*/\n+/*\n+** fpr_to_gpr:\t{ target aarch64_big_endian }\n+** (\n+**\tfmov\tx1, d0\n+**\tfmov\tx0, v0.d\\[1\\]\n+** |\n+**\tfmov\tx0, v0.d\\[1\\]\n+**\tfmov\tx1, d0\n+** )\n+**\tret\n+*/\n+void\n+fpr_to_gpr (v16qi q0)\n+{\n+  register v16qi x0 asm (\"x0\");\n+  x0 = q0;\n+  asm volatile (\"\" :: \"r\" (x0));\n+}"}, {"sha": "4c97e6fbc37998933e34983f037ba04448f0745c", "filename": "gcc/testsuite/gcc.target/aarch64/movv8qi_1.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6106132907f6bd01109f2616d20a87edecc6fc6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovv8qi_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6106132907f6bd01109f2616d20a87edecc6fc6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovv8qi_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovv8qi_1.c?ref=d6106132907f6bd01109f2616d20a87edecc6fc6", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O -mtune=neoverse-v1 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+#pragma GCC target \"+nothing+nosimd+fp\"\n+\n+typedef unsigned char v8qi __attribute__((vector_size(8)));\n+\n+/*\n+** fpr_to_fpr:\n+**\tfmov\td0, d1\n+**\tret\n+*/\n+v8qi\n+fpr_to_fpr (v8qi q0, v8qi q1)\n+{\n+  return q1;\n+}\n+\n+/*\n+** gpr_to_fpr:\n+**\tfmov\td0, x0\n+**\tret\n+*/\n+v8qi\n+gpr_to_fpr ()\n+{\n+  register v8qi x0 asm (\"x0\");\n+  asm volatile (\"\" : \"=r\" (x0));\n+  return x0;\n+}\n+\n+/*\n+** zero_to_fpr:\n+**\tfmov\td0, xzr\n+**\tret\n+*/\n+v8qi\n+zero_to_fpr ()\n+{\n+  return (v8qi) {};\n+}\n+\n+/*\n+** fpr_to_gpr:\n+**\tfmov\tx0, d0\n+**\tret\n+*/\n+void\n+fpr_to_gpr (v8qi q0)\n+{\n+  register v8qi x0 asm (\"x0\");\n+  x0 = q0;\n+  asm volatile (\"\" :: \"r\" (x0));\n+}"}]}