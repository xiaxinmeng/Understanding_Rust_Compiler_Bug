{"sha": "4b2a62db33607b4e900ff793150ee996e9281420", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIyYTYyZGIzMzYwN2I0ZTkwMGZmNzkzMTUwZWU5OTZlOTI4MTQyMA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-03-23T21:32:10Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-03-23T21:32:10Z"}, "message": "builtins.c (expand_builtin): Handle bcmp.\n\n\t* builtins.c (expand_builtin): Handle bcmp.\n\n\t* builtins.def: Add BUILT_IN_BCMP.\n\n\t* c-common.c (c_common_nodes_and_builtins): Provide builtin\n\tprototype & function for bcmp.\n\nFrom-SVN: r32715", "tree": {"sha": "d736f0d5e31243208284ce7ccec1ead4a2c7611d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d736f0d5e31243208284ce7ccec1ead4a2c7611d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b2a62db33607b4e900ff793150ee996e9281420", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b2a62db33607b4e900ff793150ee996e9281420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b2a62db33607b4e900ff793150ee996e9281420", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b2a62db33607b4e900ff793150ee996e9281420/comments", "author": null, "committer": null, "parents": [{"sha": "d4daa0b423f3015ef2df16016db7cbb8e0cf3fe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4daa0b423f3015ef2df16016db7cbb8e0cf3fe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4daa0b423f3015ef2df16016db7cbb8e0cf3fe2"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "baf3ad69b648da48eb764fed9ca9ae68c2fd99db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b2a62db33607b4e900ff793150ee996e9281420/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b2a62db33607b4e900ff793150ee996e9281420/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b2a62db33607b4e900ff793150ee996e9281420", "patch": "@@ -1,3 +1,12 @@\n+2000-03-23  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (expand_builtin): Handle bcmp.\n+\n+\t* builtins.def: Add BUILT_IN_BCMP.\n+\n+\t* c-common.c (c_common_nodes_and_builtins): Provide builtin\n+\tprototype & function for bcmp.\n+\n Thu Mar 23 11:34:39 2000  Jim Wilson  <wilson@cygnus.com>\n \n \t* config/ia64/ia64.c (rtx_needs_barrier, case UNSPEC): Move case 6..."}, {"sha": "5486552fddd436b7f7a8413216ee35bb644510ee", "filename": "gcc/builtins.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b2a62db33607b4e900ff793150ee996e9281420/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b2a62db33607b4e900ff793150ee996e9281420/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=4b2a62db33607b4e900ff793150ee996e9281420", "patch": "@@ -2313,6 +2313,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n       && (fcode == BUILT_IN_SIN || fcode == BUILT_IN_COS\n \t  || fcode == BUILT_IN_FSQRT || fcode == BUILT_IN_MEMSET\n \t  || fcode == BUILT_IN_MEMCPY || fcode == BUILT_IN_MEMCMP\n+\t  || fcode == BUILT_IN_BCMP\n \t  || fcode == BUILT_IN_STRLEN || fcode == BUILT_IN_STRCPY\n \t  || fcode == BUILT_IN_STRCMP || fcode == BUILT_IN_FFS))\n     return expand_call (exp, target, ignore);\n@@ -2460,13 +2461,15 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \treturn target;\n       break;\n \n+    case BUILT_IN_BCMP:\n     case BUILT_IN_MEMCMP:\n       target = expand_builtin_memcmp (exp, arglist, target);\n       if (target)\n \treturn target;\n       break;\n #else\n     case BUILT_IN_STRCMP:\n+    case BUILT_IN_BCMP:\n     case BUILT_IN_MEMCMP:\n       break;\n #endif"}, {"sha": "9156bba46426a8965dabc33ed9c53edb375a099e", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b2a62db33607b4e900ff793150ee996e9281420/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b2a62db33607b4e900ff793150ee996e9281420/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=4b2a62db33607b4e900ff793150ee996e9281420", "patch": "@@ -33,6 +33,7 @@ DEF_BUILTIN(BUILT_IN_FREM)\n DEF_BUILTIN(BUILT_IN_MEMCPY)\n DEF_BUILTIN(BUILT_IN_MEMCMP)\n DEF_BUILTIN(BUILT_IN_MEMSET)\n+DEF_BUILTIN(BUILT_IN_BCMP)\n DEF_BUILTIN(BUILT_IN_STRCPY)\n DEF_BUILTIN(BUILT_IN_STRCMP)\n DEF_BUILTIN(BUILT_IN_STRLEN)"}, {"sha": "ddab25e791c8d4dcc2e78488a322f61c7d48a582", "filename": "gcc/c-common.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b2a62db33607b4e900ff793150ee996e9281420/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b2a62db33607b4e900ff793150ee996e9281420/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=4b2a62db33607b4e900ff793150ee996e9281420", "patch": "@@ -3462,17 +3462,22 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n {\n   tree temp;\n   tree memcpy_ftype, memset_ftype, strlen_ftype;\n+  tree bcmp_ftype;\n   tree endlink, int_endlink, double_endlink, unsigned_endlink;\n   tree sizetype_endlink;\n   tree ptr_ftype, ptr_ftype_unsigned;\n-  tree void_ftype_any, void_ftype_int;\n+  tree void_ftype_any, void_ftype_int, int_ftype_any;\n   tree double_ftype_double, double_ftype_double_double;\n   tree float_ftype_float, ldouble_ftype_ldouble;\n   tree int_ftype_cptr_cptr_sizet;\n   tree int_ftype_string_string, string_ftype_ptr_ptr;\n   tree long_ftype_long;\n   /* Either char* or void*.  */\n   tree traditional_ptr_type_node;\n+  /* Either const char* or const void*.  */\n+  tree traditional_cptr_type_node;\n+  tree traditional_len_type_node;\n+  tree traditional_len_endlink;\n   tree va_list_ptr_type_node;\n   tree va_list_arg_type_node;\n \n@@ -3503,6 +3508,7 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n   /* We realloc here because sizetype could be int or unsigned.  S'ok.  */\n   ptr_ftype_sizetype = build_function_type (ptr_type_node, sizetype_endlink);\n \n+  int_ftype_any = build_function_type (integer_type_node, NULL_TREE);\n   void_ftype_any = build_function_type (void_type_node, NULL_TREE);\n   void_ftype = build_function_type (void_type_node, endlink);\n   void_ftype_int = build_function_type (void_type_node, int_endlink);\n@@ -3551,6 +3557,11 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n \t\t\t\t\t\t const_string_type_node,\n \t\t\t\t\t\t endlink)));\n \n+  traditional_len_type_node = (flag_traditional && ! cplus_mode\n+\t\t\t       ? integer_type_node : sizetype);\n+  traditional_len_endlink = tree_cons (NULL_TREE, traditional_len_type_node,\n+\t\t\t\t       endlink);\n+\n   /* Prototype for strcmp.  */\n   int_ftype_string_string\n     = build_function_type (integer_type_node,\n@@ -3561,13 +3572,14 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n \n   /* Prototype for strlen.  */\n   strlen_ftype\n-    = build_function_type ((flag_traditional && ! cplus_mode\n-\t\t\t    ? integer_type_node : sizetype),\n+    = build_function_type (traditional_len_type_node,\n \t\t\t   tree_cons (NULL_TREE, const_string_type_node,\n \t\t\t\t      endlink));\n \n   traditional_ptr_type_node = (flag_traditional && ! cplus_mode\n \t\t\t       ? string_type_node : ptr_type_node);\n+  traditional_cptr_type_node = (flag_traditional && ! cplus_mode\n+\t\t\t       ? const_string_type_node : const_ptr_type_node);\n \n   /* Prototype for memcpy.  */\n   memcpy_ftype\n@@ -3585,6 +3597,14 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n \t\t\t\t\t\t\t    sizetype,\n \t\t\t\t\t\t\t    endlink))));\n \n+  /* Prototype for bcmp.  */\n+  bcmp_ftype\n+    = build_function_type (integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, traditional_cptr_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE,\n+\t\t\t\t\t\t traditional_cptr_type_node,\n+\t\t\t\t\t\t traditional_len_endlink)));\n+\n   builtin_function (\"__builtin_constant_p\", default_function_type,\n \t\t    BUILT_IN_CONSTANT_P, BUILT_IN_NORMAL, NULL_PTR);\n \n@@ -3618,6 +3638,11 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n       TREE_SIDE_EFFECTS (temp) = 1;\n       /* Suppress error if redefined as a non-function.  */\n       DECL_BUILT_IN_NONANSI (temp) = 1;\n+\n+      temp = builtin_function (\"bcmp\",\n+\t\t\t       cplus_mode ? bcmp_ftype : int_ftype_any,\n+\t\t\t       BUILT_IN_BCMP, BUILT_IN_NORMAL, NULL_PTR);\n+      DECL_BUILT_IN_NONANSI (temp) = 1;\n     }\n \n   builtin_function (\"__builtin_abs\", int_ftype_int, BUILT_IN_ABS,\n@@ -3723,6 +3748,8 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n \t\t    BUILT_IN_MEMCMP, BUILT_IN_NORMAL, \"memcmp\");\n   builtin_function (\"__builtin_memset\", memset_ftype, BUILT_IN_MEMSET,\n \t\t    BUILT_IN_NORMAL, \"memset\");\n+  builtin_function (\"__builtin_bcmp\", bcmp_ftype,\n+\t\t    BUILT_IN_BCMP, BUILT_IN_NORMAL, \"bcmp\");\n   builtin_function (\"__builtin_strcmp\", int_ftype_string_string,\n \t\t    BUILT_IN_STRCMP, BUILT_IN_NORMAL, \"strcmp\");\n   builtin_function (\"__builtin_strcpy\", string_ftype_ptr_ptr,"}]}