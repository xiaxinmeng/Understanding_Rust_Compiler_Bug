{"sha": "44a06a709565805d68994b65d871565a07ebf73e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRhMDZhNzA5NTY1ODA1ZDY4OTk0YjY1ZDg3MTU2NWEwN2ViZjczZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-09-07T09:52:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-09-07T09:52:01Z"}, "message": "re PR tree-optimization/91665 (ICE in build_vector_from_val, at tree.c:1904)\n\n\tPR tree-optimization/91665\n\t* tree-vect-loop.c (vectorizable_reduction): Punt if base has type\n\tincompatible with the type of PHI result.\n\n\t* gcc.dg/vect/pr91665.c: New test.\n\nFrom-SVN: r275486", "tree": {"sha": "0403de63771e03f52c106164c651f886815adc0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0403de63771e03f52c106164c651f886815adc0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44a06a709565805d68994b65d871565a07ebf73e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44a06a709565805d68994b65d871565a07ebf73e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44a06a709565805d68994b65d871565a07ebf73e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44a06a709565805d68994b65d871565a07ebf73e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8b2d8beb9fcbd9196b562b17a21c892ff062aba8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b2d8beb9fcbd9196b562b17a21c892ff062aba8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b2d8beb9fcbd9196b562b17a21c892ff062aba8"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "83581ac41bfc3e1abf9ea2c8caeaa657e125de33", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a06a709565805d68994b65d871565a07ebf73e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a06a709565805d68994b65d871565a07ebf73e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44a06a709565805d68994b65d871565a07ebf73e", "patch": "@@ -1,3 +1,9 @@\n+2019-09-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/91665\n+\t* tree-vect-loop.c (vectorizable_reduction): Punt if base has type\n+\tincompatible with the type of PHI result.\n+\n 2019-09-07  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR target/91684"}, {"sha": "a53887acef9ad4bb9d6d5312c9e3407c8fc0d52a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a06a709565805d68994b65d871565a07ebf73e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a06a709565805d68994b65d871565a07ebf73e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=44a06a709565805d68994b65d871565a07ebf73e", "patch": "@@ -1,3 +1,8 @@\n+2019-09-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/91665\n+\t* gcc.dg/vect/pr91665.c: New test.\n+\n 2019-09-07  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR target/91684"}, {"sha": "6b69ea030b1c86e8fbd7f55b201bc41f1e76d3aa", "filename": "gcc/testsuite/gcc.dg/vect/pr91665.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a06a709565805d68994b65d871565a07ebf73e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr91665.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a06a709565805d68994b65d871565a07ebf73e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr91665.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr91665.c?ref=44a06a709565805d68994b65d871565a07ebf73e", "patch": "@@ -0,0 +1,15 @@\n+/* PR tree-optimization/91665 */\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Ofast\" } */\n+\n+short int v;\n+\n+void\n+foo (short int x, short int y)\n+{\n+  short int *p = &v;\n+\n+  x = 1;\n+  while (x != 0)\n+    x += ++y || (*p = x);\n+}"}, {"sha": "8324492c7943e76a487255657b1c214e93bfe656", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a06a709565805d68994b65d871565a07ebf73e/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a06a709565805d68994b65d871565a07ebf73e/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=44a06a709565805d68994b65d871565a07ebf73e", "patch": "@@ -6656,10 +6656,13 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t  gcc_assert (TREE_CODE (base) == INTEGER_CST\n \t\t      && TREE_CODE (step) == INTEGER_CST);\n \t  cond_reduc_val = NULL_TREE;\n+\t  tree res = PHI_RESULT (STMT_VINFO_STMT (cond_stmt_vinfo));\n+\t  if (!types_compatible_p (TREE_TYPE (res), TREE_TYPE (base)))\n+\t    ;\n \t  /* Find a suitable value, for MAX_EXPR below base, for MIN_EXPR\n \t     above base; punt if base is the minimum value of the type for\n \t     MAX_EXPR or maximum value of the type for MIN_EXPR for now.  */\n-\t  if (tree_int_cst_sgn (step) == -1)\n+\t  else if (tree_int_cst_sgn (step) == -1)\n \t    {\n \t      cond_reduc_op_code = MIN_EXPR;\n \t      if (tree_int_cst_sgn (base) == -1)"}]}