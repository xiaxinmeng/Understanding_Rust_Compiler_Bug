{"sha": "c2a4bf2d6edde8b148421668a4c07c844b994271", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJhNGJmMmQ2ZWRkZThiMTQ4NDIxNjY4YTRjMDdjODQ0Yjk5NDI3MQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2020-02-08T15:57:54Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2020-02-08T23:48:06Z"}, "message": "aarch64: fix strict alignment for vector load/stores (PR 91927)\n\nHi,\n  The problem here is that the vector mode version of movmisalign<mode>\nwas only conditionalized on if SIMD was enabled instead of being\nalso conditionalized on STRICT_ALIGNMENT too.\n\nApplied as pre-approved in the bug report by Richard Sandiford\nafter a bootstrap/test on aarch64-linux-gnu.\n\nThanks,\nAndrew Pinski\n\nChangeLog:\nPR target/91927\n* config/aarch64/aarch64-simd.md (movmisalign<mode>): Check\nSTRICT_ALIGNMENT also.\n\ntestsuite/ChangeLog:\nPR target/91927\n* gcc.target/aarch64/pr91927.c: New testcase.", "tree": {"sha": "6b67937e3ef6af840977f62d1005ed88b53bd37e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b67937e3ef6af840977f62d1005ed88b53bd37e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2a4bf2d6edde8b148421668a4c07c844b994271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a4bf2d6edde8b148421668a4c07c844b994271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2a4bf2d6edde8b148421668a4c07c844b994271", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a4bf2d6edde8b148421668a4c07c844b994271/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b39d801b2698d0f756231f6f8fa0be5a36f0c05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b39d801b2698d0f756231f6f8fa0be5a36f0c05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b39d801b2698d0f756231f6f8fa0be5a36f0c05"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "b46ea4fe14905dd4282875e8e883f39460a8343e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a4bf2d6edde8b148421668a4c07c844b994271/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a4bf2d6edde8b148421668a4c07c844b994271/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2a4bf2d6edde8b148421668a4c07c844b994271", "patch": "@@ -1,3 +1,9 @@\n+2020-02-08  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/91927\n+\t* config/aarch64/aarch64-simd.md (movmisalign<mode>): Check\n+\tSTRICT_ALIGNMENT also.\n+\n 2020-02-08  Jim Wilson  <jimw@sifive.com>\n \n \tPR target/93532"}, {"sha": "4c651f45d0c116207634770b551ddaa718f3eda7", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a4bf2d6edde8b148421668a4c07c844b994271/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a4bf2d6edde8b148421668a4c07c844b994271/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=c2a4bf2d6edde8b148421668a4c07c844b994271", "patch": "@@ -41,7 +41,7 @@\n (define_expand \"movmisalign<mode>\"\n   [(set (match_operand:VALL 0 \"nonimmediate_operand\")\n         (match_operand:VALL 1 \"general_operand\"))]\n-  \"TARGET_SIMD\"\n+  \"TARGET_SIMD && !STRICT_ALIGNMENT\"\n {\n   /* This pattern is not permitted to fail during expansion: if both arguments\n      are non-registers (e.g. memory := constant, which can be created by the"}, {"sha": "c47f3fb98dd80e29fd88a48609dfd2b1a0a4f52e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a4bf2d6edde8b148421668a4c07c844b994271/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a4bf2d6edde8b148421668a4c07c844b994271/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c2a4bf2d6edde8b148421668a4c07c844b994271", "patch": "@@ -1,3 +1,8 @@\n+2020-02-08  Andrew Pinski  <apinski@marvel.com>\n+\n+\tPR target/91927\n+\t* gcc.target/aarch64/pr91927.c: New testcase.\n+\n 2020-02-08  Peter Bergner <bergner@linux.ibm.com>\n \n \tPR target/93136"}, {"sha": "f5cde1a533693112e9e5c13e6d1b2e364f5fe184", "filename": "gcc/testsuite/gcc.target/aarch64/pr91927.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a4bf2d6edde8b148421668a4c07c844b994271/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr91927.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a4bf2d6edde8b148421668a4c07c844b994271/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr91927.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr91927.c?ref=c2a4bf2d6edde8b148421668a4c07c844b994271", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mstrict-align -O3\" } */\n+\n+#define NULL 0\n+\n+typedef unsigned uint32_t;\n+typedef struct __attribute__((__packed__))\n+{\n+\tuint32_t nTagID;\n+\tuint32_t nValueBufferSize;\n+\tuint32_t nValueLength;\n+\t\n+}\tPropertyTags_t;\n+\n+typedef struct\n+{\n+\tchar *szName;\n+\tuint32_t nBufferSize;\n+\tuint32_t nLength;\n+\t\n+}\tSomething_t;\n+\n+void SetTag(PropertyTags_t *pTag, uint32_t nBufferSize, uint32_t nLength);\n+\n+void TestCase(Something_t *pSome, uint32_t nBufferSize, uint32_t nLength)\n+{\n+\tif (pSome != NULL)\n+\t{\n+\t\tPropertyTags_t sTag = { 0 };\n+\t\t\n+\t\tSetTag(&sTag, nBufferSize, nLength);\n+\t\t\n+\t\tpSome->nBufferSize = sTag.nValueBufferSize;\n+\t\tpSome->nLength = sTag.nValueLength;\n+\t}\n+}\n+\n+/* { dg-final { scan-assembler-not \"ldr\\td\" } } */"}]}