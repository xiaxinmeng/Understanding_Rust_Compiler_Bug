{"sha": "8a3cabe30f9d82daf46a500e339afc5172267d25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGEzY2FiZTMwZjlkODJkYWY0NmE1MDBlMzM5YWZjNTE3MjI2N2QyNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-05-03T22:25:24Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-05-03T22:25:24Z"}, "message": "re PR libstdc++/48848 ([C++0x] std::valarray<T> functions missing)\n\n2011-05-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/48848\n\t* include/std/valarray (valarray<>::valarray(valarray&&),\n\tvalarray<>::operator=(valarray&&), valarray<>::swap): Add.\n\t* doc/xml/manual/status_cxx200x.xml: Update.\n\t* testsuite/26_numerics/valarray/moveable.cc: New.\n\t* testsuite/26_numerics/valarray/swap.cc: Likewise.\n\nFrom-SVN: r173344", "tree": {"sha": "3bb0198188655dd59d038438d2366160a202c274", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bb0198188655dd59d038438d2366160a202c274"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a3cabe30f9d82daf46a500e339afc5172267d25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a3cabe30f9d82daf46a500e339afc5172267d25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a3cabe30f9d82daf46a500e339afc5172267d25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a3cabe30f9d82daf46a500e339afc5172267d25/comments", "author": null, "committer": null, "parents": [{"sha": "f437d56e2f3cb3a1b75db01d743bca72701eecfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f437d56e2f3cb3a1b75db01d743bca72701eecfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f437d56e2f3cb3a1b75db01d743bca72701eecfe"}], "stats": {"total": 156, "additions": 149, "deletions": 7}, "files": [{"sha": "416b656bc20a7710d0f1cfe79bc29cfcf0a1af58", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a3cabe30f9d82daf46a500e339afc5172267d25/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a3cabe30f9d82daf46a500e339afc5172267d25/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8a3cabe30f9d82daf46a500e339afc5172267d25", "patch": "@@ -1,3 +1,12 @@\n+2011-05-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/48848\n+\t* include/std/valarray (valarray<>::valarray(valarray&&),\n+\tvalarray<>::operator=(valarray&&), valarray<>::swap): Add.\n+\t* doc/xml/manual/status_cxx200x.xml: Update.\n+\t* testsuite/26_numerics/valarray/moveable.cc: New.\n+\t* testsuite/26_numerics/valarray/swap.cc: Likewise.\n+\n 2011-05-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/48750"}, {"sha": "d0add6c2e8be67abe99c4fcf53c3c3f3a2c20d52", "filename": "libstdc++-v3/doc/xml/manual/status_cxx200x.xml", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a3cabe30f9d82daf46a500e339afc5172267d25/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx200x.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a3cabe30f9d82daf46a500e339afc5172267d25/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx200x.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx200x.xml?ref=8a3cabe30f9d82daf46a500e339afc5172267d25", "patch": "@@ -1960,11 +1960,10 @@ particular release.\n       <entry/>\n     </row>\n     <row>\n-      <?dbhtml bgcolor=\"#B0B0B0\" ?>\n       <entry>26.6.2</entry>\n       <entry>Class template <code>valarray</code></entry>\n-      <entry>Partial</entry>\n-      <entry>Missing move and swap operations</entry>\n+      <entry>Y</entry>\n+      <entry/>\n     </row>\n     <row>\n       <entry>26.6.3</entry>"}, {"sha": "de6886858c00f9d489360da538c855f72a8dfc60", "filename": "libstdc++-v3/include/std/valarray", "status": "modified", "additions": 61, "deletions": 4, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a3cabe30f9d82daf46a500e339afc5172267d25/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a3cabe30f9d82daf46a500e339afc5172267d25/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray?ref=8a3cabe30f9d82daf46a500e339afc5172267d25", "patch": "@@ -1,7 +1,7 @@\n // The template and inlines for the -*- C++ -*- valarray class.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009, 2010\n+// 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -140,6 +140,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       ///  Copy constructor.\n       valarray(const valarray&);\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      ///  Move constructor.\n+      valarray(valarray&&) noexcept;\n+#endif\n+\n       ///  Construct an array with the same size and values in @a sa.\n       valarray(const slice_array<_Tp>&);\n \n@@ -166,13 +171,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /**\n        *  @brief  Assign elements to an array.\n        *\n-       *  Assign elements of array to values in @a v.  Results are undefined\n-       *  if @a v does not have the same size as this array.\n+       *  Assign elements of array to values in @a v.\n        *\n        *  @param  v  Valarray to get values from.\n        */\n       valarray<_Tp>& operator=(const valarray<_Tp>&);\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Move assign elements to an array.\n+       *\n+       *  Move assign elements of array to values in @a v.\n+       *\n+       *  @param  v  Valarray to get values from.\n+       */\n+      valarray<_Tp>& operator=(valarray<_Tp>&&) noexcept;\n+#endif\n+\n       /**\n        *  @brief  Assign elements to a value.\n        *\n@@ -450,6 +465,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvalarray<_Tp>& operator>>=(const _Expr<_Dom, _Tp>&);\n \n       // _lib.valarray.members_ member functions:\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      ///  Swap.\n+      void swap(valarray<_Tp>& __v) noexcept;\n+#endif\n+\n       ///  Return the number of elements in array.\n       size_t size() const;\n \n@@ -612,6 +632,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { std::__valarray_copy_construct(__v._M_data, __v._M_data + _M_size,\n \t\t\t\t     _M_data); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp>\n+    inline\n+    valarray<_Tp>::valarray(valarray<_Tp>&& __v) noexcept\n+    : _M_size(__v._M_size), _M_data(__v._M_data)\n+    {\n+      __v._M_size = 0;\n+      __v._M_data = 0;\n+    }\n+#endif\n+\n   template<typename _Tp>\n     inline\n     valarray<_Tp>::valarray(const slice_array<_Tp>& __sa)\n@@ -655,7 +686,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline\n     valarray<_Tp>::valarray(initializer_list<_Tp> __l)\n     : _M_size(__l.size()), _M_data(__valarray_get_storage<_Tp>(__l.size()))\n-    { std::__valarray_copy_construct (__l.begin(), __l.end(), _M_data); }\n+    { std::__valarray_copy_construct(__l.begin(), __l.end(), _M_data); }\n #endif\n \n   template<typename _Tp> template<class _Dom>\n@@ -696,6 +727,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp>\n+    inline valarray<_Tp>&\n+    valarray<_Tp>::operator=(valarray<_Tp>&& __v) noexcept\n+    {\n+      if (_M_data)\n+\t{\n+\t  std::__valarray_destroy_elements(_M_data, _M_data + _M_size);\n+\t  std::__valarray_release_memory(_M_data);\n+\t}\n+      _M_size = __v._M_size;\n+      _M_data = __v._M_data;\n+      __v._M_size = 0;\n+      __v._M_data = 0;\n+      return *this;\n+    }\n+\n   template<typename _Tp>\n     inline valarray<_Tp>&\n     valarray<_Tp>::operator=(initializer_list<_Tp> __l)\n@@ -846,6 +893,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t _Array<size_t>(__i));\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<class _Tp>\n+    inline void\n+    valarray<_Tp>::swap(valarray<_Tp>& __v) noexcept\n+    {\n+      std::swap(_M_size, __v._M_size);\n+      std::swap(_M_data, __v._M_data);\n+    }\n+#endif\n+\n   template<class _Tp>\n     inline size_t \n     valarray<_Tp>::size() const"}, {"sha": "4f145dba206d7b28b7075319ca3dc97e4994916d", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/moveable.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a3cabe30f9d82daf46a500e339afc5172267d25/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a3cabe30f9d82daf46a500e339afc5172267d25/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fmoveable.cc?ref=8a3cabe30f9d82daf46a500e339afc5172267d25", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <valarray>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::valarray<int> a(1, 1), b(-1, 2);\n+  b = std::move(a);\n+  VERIFY( b.size() == 1 && b[0] == 1 && a.size() == 0 );\n+\n+  std::valarray<int> c(std::move(b));\n+  VERIFY( c.size() == 1 && c[0] == 1 );\n+  VERIFY( b.size() == 0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "03f6f01ab672aceb4398467acac6f51ef9bdd8b3", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/swap.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a3cabe30f9d82daf46a500e339afc5172267d25/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a3cabe30f9d82daf46a500e339afc5172267d25/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fswap.cc?ref=8a3cabe30f9d82daf46a500e339afc5172267d25", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <valarray>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::valarray<int> a(1, 1), b(-1, 2);\n+  b.swap(a);\n+  VERIFY( b.size() == 1 && b[0] == 1\n+\t  && a.size() == 2 && a[0] == -1 && a[1] == -1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}