{"sha": "d906fd7fec3b6fcdea45922c4475b1b6bcd5b34c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkwNmZkN2ZlYzNiNmZjZGVhNDU5MjJjNDQ3NWIxYjZiY2Q1YjM0Yw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-07-19T13:28:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-07-19T13:28:15Z"}, "message": "re PR middle-end/18908 (Missed folding opportunities with bools)\n\n2011-07-19  Richard Guenther  <rguenther@suse.de>\n\n\t* expr.c (expand_expr_real_2): Remove TRUTH_*_EXPR handling.\n\t(expand_expr_real_1): Remove TRUTH_*IF_EXPR and STATEMENT_LIST\n\thandling.\n\n\tPR middle-end/18908\n\t* expr.c (expand_expr_real_2): Do not unnecessarily truncate the\n\tresult of BIT_*_EXPR to bitfield precision.\n\nFrom-SVN: r176460", "tree": {"sha": "d6fa623f7f1b41202ae3ba9147e8ed8746741ec3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6fa623f7f1b41202ae3ba9147e8ed8746741ec3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d906fd7fec3b6fcdea45922c4475b1b6bcd5b34c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d906fd7fec3b6fcdea45922c4475b1b6bcd5b34c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d906fd7fec3b6fcdea45922c4475b1b6bcd5b34c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d906fd7fec3b6fcdea45922c4475b1b6bcd5b34c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b21a544bb1a94f29adc4fc812cda0766b9a048e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b21a544bb1a94f29adc4fc812cda0766b9a048e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b21a544bb1a94f29adc4fc812cda0766b9a048e9"}], "stats": {"total": 93, "additions": 22, "deletions": 71}, "files": [{"sha": "3b4ef1d8232eafde8ecf5850326555827eaafbd2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d906fd7fec3b6fcdea45922c4475b1b6bcd5b34c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d906fd7fec3b6fcdea45922c4475b1b6bcd5b34c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d906fd7fec3b6fcdea45922c4475b1b6bcd5b34c", "patch": "@@ -1,9 +1,25 @@\n+2011-07-19  Richard Guenther  <rguenther@suse.de>\n+\n+\t* expr.c (expand_expr_real_2): Remove TRUTH_*_EXPR handling.\n+\t(expand_expr_real_1): Remove TRUTH_*IF_EXPR and STATEMENT_LIST\n+\thandling.\n+\n+\tPR middle-end/18908\n+\t* expr.c (expand_expr_real_2): Do not unnecessarily truncate the\n+\tresult of BIT_*_EXPR to bitfield precision.\n+\n 2011-07-19  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR tree-optimization/49742\n \t* tree-data-ref.c (get_references_in_stmt): Treat the lhs of a call\n \tas a potential write.\n \n+2011-07-19  Richard Guenther  <rguenther@suse.de>\n+\n+\t* Makefile.in (tree-ssa-forwprop.o): Depend on gimple-pretty-print.h.\n+\t* tree-ssa-forwprop.c: Include gimple-pretty-print.h.\n+\t(forward_propagate_comparison): Simplify, remove obsolete code.\n+\n 2011-07-19  Richard Guenther  <rguenther@suse.de>\n \n \t* gimplify.c (gimplify_expr): Gimplify TRUTH_NOT_EXPR as"}, {"sha": "27d77bc2490eb7c7877951c61d412a8d942ca5a6", "filename": "gcc/expr.c", "status": "modified", "additions": 6, "deletions": 71, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d906fd7fec3b6fcdea45922c4475b1b6bcd5b34c/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d906fd7fec3b6fcdea45922c4475b1b6bcd5b34c/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d906fd7fec3b6fcdea45922c4475b1b6bcd5b34c", "patch": "@@ -8054,26 +8054,8 @@ expand_expr_real_2 (sepops ops, rtx target, enum machine_mode tmode,\n \t and (a bitwise1 b) bitwise2 b (etc)\n \t but that is probably not worth while.  */\n \n-      /* BIT_AND_EXPR is for bitwise anding.  TRUTH_AND_EXPR is for anding two\n-\t boolean values when we want in all cases to compute both of them.  In\n-\t general it is fastest to do TRUTH_AND_EXPR by computing both operands\n-\t as actual zero-or-1 values and then bitwise anding.  In cases where\n-\t there cannot be any side effects, better code would be made by\n-\t treating TRUTH_AND_EXPR like TRUTH_ANDIF_EXPR; but the question is\n-\t how to recognize those cases.  */\n-\n-    case TRUTH_AND_EXPR:\n-      code = BIT_AND_EXPR;\n     case BIT_AND_EXPR:\n-      goto binop;\n-\n-    case TRUTH_OR_EXPR:\n-      code = BIT_IOR_EXPR;\n     case BIT_IOR_EXPR:\n-      goto binop;\n-\n-    case TRUTH_XOR_EXPR:\n-      code = BIT_XOR_EXPR;\n     case BIT_XOR_EXPR:\n       goto binop;\n \n@@ -8152,18 +8134,6 @@ expand_expr_real_2 (sepops ops, rtx target, enum machine_mode tmode,\n       emit_label (op1);\n       return target;\n \n-    case TRUTH_NOT_EXPR:\n-      if (modifier == EXPAND_STACK_PARM)\n-\ttarget = 0;\n-      op0 = expand_expr (treeop0, target,\n-\t\t\t VOIDmode, EXPAND_NORMAL);\n-      /* The parser is careful to generate TRUTH_NOT_EXPR\n-\t only with operands that are always zero or one.  */\n-      temp = expand_binop (mode, xor_optab, op0, const1_rtx,\n-\t\t\t   target, 1, OPTAB_LIB_WIDEN);\n-      gcc_assert (temp);\n-      return temp;\n-\n     case COMPLEX_EXPR:\n       /* Get the rtx code of the operands.  */\n       op0 = expand_normal (treeop0);\n@@ -8319,6 +8289,12 @@ expand_expr_real_2 (sepops ops, rtx target, enum machine_mode tmode,\n   temp = expand_binop (mode, this_optab, op0, op1, target,\n \t\t       unsignedp, OPTAB_LIB_WIDEN);\n   gcc_assert (temp);\n+  /* Bitwise operations do not need bitfield reduction as we expect their\n+     operands being properly truncated.  */\n+  if (code == BIT_XOR_EXPR\n+      || code == BIT_AND_EXPR\n+      || code == BIT_IOR_EXPR)\n+    return temp;\n   return REDUCE_BIT_FIELD (temp);\n }\n #undef REDUCE_BIT_FIELD\n@@ -9541,47 +9517,6 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \n       return op0;\n \n-      /* Use a compare and a jump for BLKmode comparisons, or for function\n-\t type comparisons is HAVE_canonicalize_funcptr_for_compare.  */\n-\n-      /* Although TRUTH_{AND,OR}IF_EXPR aren't present in GIMPLE, they\n-\t are occassionally created by folding during expansion.  */\n-    case TRUTH_ANDIF_EXPR:\n-    case TRUTH_ORIF_EXPR:\n-      if (! ignore\n-\t  && (target == 0\n-\t      || modifier == EXPAND_STACK_PARM\n-\t      || ! safe_from_p (target, treeop0, 1)\n-\t      || ! safe_from_p (target, treeop1, 1)\n-\t      /* Make sure we don't have a hard reg (such as function's return\n-\t\t value) live across basic blocks, if not optimizing.  */\n-\t      || (!optimize && REG_P (target)\n-\t\t  && REGNO (target) < FIRST_PSEUDO_REGISTER)))\n-\ttarget = gen_reg_rtx (tmode != VOIDmode ? tmode : mode);\n-\n-      if (target)\n-\temit_move_insn (target, const0_rtx);\n-\n-      op1 = gen_label_rtx ();\n-      jumpifnot_1 (code, treeop0, treeop1, op1, -1);\n-\n-      if (target)\n-\temit_move_insn (target, const1_rtx);\n-\n-      emit_label (op1);\n-      return ignore ? const0_rtx : target;\n-\n-    case STATEMENT_LIST:\n-      {\n-\ttree_stmt_iterator iter;\n-\n-\tgcc_assert (ignore);\n-\n-\tfor (iter = tsi_start (exp); !tsi_end_p (iter); tsi_next (&iter))\n-\t  expand_expr (tsi_stmt (iter), const0_rtx, VOIDmode, modifier);\n-      }\n-      return const0_rtx;\n-\n     case COND_EXPR:\n       /* A COND_EXPR with its type being VOID_TYPE represents a\n \t conditional jump and is handled in"}]}