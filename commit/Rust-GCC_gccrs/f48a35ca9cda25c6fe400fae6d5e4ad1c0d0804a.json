{"sha": "f48a35ca9cda25c6fe400fae6d5e4ad1c0d0804a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ4YTM1Y2E5Y2RhMjVjNmZlNDAwZmFlNmQ1ZTRhZDFjMGQwODA0YQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2019-12-12T10:01:51Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-12-12T10:01:51Z"}, "message": "[Ada] Remove references to VMS\n\n2019-12-12  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* raise-gcc.c: Remove references to VMS\n\nFrom-SVN: r279279", "tree": {"sha": "df3f946cd92ca6da5baa580d917e1216876db494", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df3f946cd92ca6da5baa580d917e1216876db494"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f48a35ca9cda25c6fe400fae6d5e4ad1c0d0804a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f48a35ca9cda25c6fe400fae6d5e4ad1c0d0804a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f48a35ca9cda25c6fe400fae6d5e4ad1c0d0804a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f48a35ca9cda25c6fe400fae6d5e4ad1c0d0804a/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c7732bbe382b982e60eb9d606752d012159d1a18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7732bbe382b982e60eb9d606752d012159d1a18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7732bbe382b982e60eb9d606752d012159d1a18"}], "stats": {"total": 79, "additions": 7, "deletions": 72}, "files": [{"sha": "c57674e367b7c15d2d74fd6d8929c1c235809a20", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f48a35ca9cda25c6fe400fae6d5e4ad1c0d0804a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f48a35ca9cda25c6fe400fae6d5e4ad1c0d0804a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f48a35ca9cda25c6fe400fae6d5e4ad1c0d0804a", "patch": "@@ -1,3 +1,7 @@\n+2019-12-12  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* raise-gcc.c: Remove references to VMS\n+\n 2019-12-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* atree.ads, comperr.ads, debug.ads, einfo.ads, elists.ads,"}, {"sha": "a77b7311c7bbc8728ca9fcd0ed7d60af58f6028b", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 3, "deletions": 72, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f48a35ca9cda25c6fe400fae6d5e4ad1c0d0804a/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f48a35ca9cda25c6fe400fae6d5e4ad1c0d0804a/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=f48a35ca9cda25c6fe400fae6d5e4ad1c0d0804a", "patch": "@@ -889,7 +889,7 @@ get_call_site_action_for (_Unwind_Ptr ip,\n    argument, and PROPAGATED_EXCEPTION a pointer to the currently propagated\n    occurrence, return true if the latter matches the former, that is, if\n    PROPAGATED_EXCEPTION is caught by the handling code controlled by CHOICE.\n-   This takes care of the special Non_Ada_Error case on VMS.  */\n+*/\n \n #define Is_Handled_By_Others  __gnat_is_handled_by_others\n #define Language_For          __gnat_language_for\n@@ -906,11 +906,6 @@ extern Exception_Id EID_For (_GNAT_Exception * e);\n #define Foreign_Exception system__exceptions__foreign_exception\n extern struct Exception_Data Foreign_Exception;\n \n-#ifdef VMS\n-#define Non_Ada_Error system__aux_dec__non_ada_error\n-extern struct Exception_Data Non_Ada_Error;\n-#endif\n-\n /* Return true iff the exception class of EXCEPT is EC.  */\n \n static int\n@@ -951,23 +946,6 @@ is_handled_by (_Unwind_Ptr choice, _GNAT_Exception *propagated_exception)\n       if (choice == E || (choice == GNAT_OTHERS && Is_Handled_By_Others (E)))\n \treturn handler;\n \n-#ifdef VMS\n-      /* In addition, on OpenVMS, Non_Ada_Error matches VMS exceptions, and we\n-         may have different exception data pointers that should match for the\n-         same condition code, if both an export and an import have been\n-         registered.  The import code for both the choice and the propagated\n-         occurrence are expected to have been masked off regarding severity\n-         bits already (at registration time for the former and from within the\n-         low level exception vector for the latter).  */\n-      if ((Language_For (E) == 'V'\n-\t   && choice != GNAT_OTHERS\n-\t   && ((Language_For (choice) == 'V'\n-\t\t&& Foreign_Data_For (choice) != 0\n-\t\t&& Foreign_Data_For (choice) == Foreign_Data_For (E))\n-\t       || choice == (_Unwind_Ptr)&Non_Ada_Error)))\n-\treturn handler;\n-#endif\n-\n       /* Otherwise, it doesn't match an Ada choice.  */\n       return nothing;\n     }\n@@ -1271,36 +1249,8 @@ personality_body (_Unwind_Action uw_phases,\n }\n \n #ifndef __ARM_EABI_UNWINDER__\n-/* Major tweak for ia64-vms : the CHF propagation phase calls this personality\n-   routine with sigargs/mechargs arguments and has very specific expectations\n-   on possible return values.\n-\n-   We handle this with a number of specific tricks:\n-\n-   1. We tweak the personality routine prototype to have the \"version\" and\n-      \"phases\" two first arguments be void * instead of int and _Unwind_Action\n-      as nominally expected in the GCC context.\n-\n-      This allows us to access the full range of bits passed in every case and\n-      has no impact on the callers side since each argument remains assigned\n-      the same single 64bit slot.\n-\n-   2. We retrieve the corresponding int and _Unwind_Action values within the\n-      routine for regular use with truncating conversions. This is a noop when\n-      called from the libgcc unwinder.\n-\n-   3. We assume we're called by the VMS CHF when unexpected bits are set in\n-      both those values. The incoming arguments are then real sigargs and\n-      mechargs pointers, which we then redirect to __gnat_handle_vms_condition\n-      for proper processing.\n-*/\n-#if defined (VMS) && defined (__IA64)\n-typedef void * version_arg_t;\n-typedef void * phases_arg_t;\n-#else\n typedef int version_arg_t;\n typedef _Unwind_Action phases_arg_t;\n-#endif\n \n PERSONALITY_STORAGE _Unwind_Reason_Code\n PERSONALITY_FUNCTION (version_arg_t, phases_arg_t,\n@@ -1321,28 +1271,9 @@ PERSONALITY_FUNCTION (version_arg_t version_arg,\n   int uw_version = (int) version_arg;\n   _Unwind_Action uw_phases = (_Unwind_Action) phases_arg;\n \n-  /* Check that we're called from the ABI context we expect, with a major\n-     possible variation on VMS for IA64.  */\n+  /* Check that we're called from the ABI context we expect.  */\n   if (uw_version != 1)\n-    {\n-#if defined (VMS) && defined (__IA64)\n-\n-      /* Assume we're called with sigargs/mechargs arguments if really\n-\t unexpected bits are set in our first two formals.  Redirect to the\n-\t GNAT condition handling code in this case.  */\n-\n-      extern long __gnat_handle_vms_condition (void *, void *);\n-\n-      unsigned int version_unexpected_bits_mask = 0xffffff00U;\n-      unsigned int phases_unexpected_bits_mask  = 0xffffff00U;\n-\n-      if ((unsigned int)uw_version & version_unexpected_bits_mask\n-\t  && (unsigned int)uw_phases & phases_unexpected_bits_mask)\n-\treturn __gnat_handle_vms_condition (version_arg, phases_arg);\n-#endif\n-\n-      return _URC_FATAL_PHASE1_ERROR;\n-    }\n+    return _URC_FATAL_PHASE1_ERROR;\n \n   return personality_body (uw_phases, uw_exception, uw_context);\n }"}]}