{"sha": "e3e868f62e9cf60f5f92fe2282745028805b5950", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNlODY4ZjYyZTljZjYwZjVmOTJmZTIyODI3NDUwMjg4MDViNTk1MA==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2006-02-27T17:38:14Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2006-02-27T17:38:14Z"}, "message": "lambda-code.c (can_convert_to_perfect_nest): Allow any type of\n\n2006-02-27  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* lambda-code.c (can_convert_to_perfect_nest): Allow any type of\n\nFrom-SVN: r111489", "tree": {"sha": "234caed911ea9e869997ebb34ddb4feca7f4b2fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/234caed911ea9e869997ebb34ddb4feca7f4b2fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3e868f62e9cf60f5f92fe2282745028805b5950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3e868f62e9cf60f5f92fe2282745028805b5950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3e868f62e9cf60f5f92fe2282745028805b5950", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3e868f62e9cf60f5f92fe2282745028805b5950/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "754e45a8679ad25d2f622919749497c16dc2ea4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/754e45a8679ad25d2f622919749497c16dc2ea4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/754e45a8679ad25d2f622919749497c16dc2ea4c"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "eadb2fe1b48f9977e463aa76759a421a3b20bb52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3e868f62e9cf60f5f92fe2282745028805b5950/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3e868f62e9cf60f5f92fe2282745028805b5950/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3e868f62e9cf60f5f92fe2282745028805b5950", "patch": "@@ -1,3 +1,8 @@\n+2006-02-27  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* lambda-code.c (can_convert_to_perfect_nest): Allow any type of\n+\tscalar operation to be put back into the loop.\n+\n 2006-02-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR other/26208"}, {"sha": "a47f5801baef8eef7974066767f8a46cd5a43206", "filename": "gcc/lambda-code.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3e868f62e9cf60f5f92fe2282745028805b5950/gcc%2Flambda-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3e868f62e9cf60f5f92fe2282745028805b5950/gcc%2Flambda-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-code.c?ref=e3e868f62e9cf60f5f92fe2282745028805b5950", "patch": "@@ -2257,18 +2257,15 @@ can_convert_to_perfect_nest (struct loop *loop,\n \t\tif (stmt_uses_op (stmt, iv))\n \t\t  goto fail;\n \t      \n-\t      /* If this is a simple operation like a cast that is\n-\t\t invariant in the inner loop, or after the inner loop,\n-\t\t then see if we can place it back where it came from.\n-\t\t This means that we will propagate casts and other\n-\t\t cheap invariant operations *back* into or after\n-\t\t the inner loop if we can interchange the loop, on the\n-\t\t theory that we are going to gain a lot more by\n-\t\t interchanging the loop than we are by leaving some\n-\t\t invariant code there for some other pass to clean\n-\t\t up.  */\n+\t      /* If this is a scalar operation that can be put back\n+\t         into the inner loop, or after the inner loop, through\n+\t\t copying, then do so. This works on the theory that\n+\t\t any amount of scalar code we have to reduplicate\n+\t\t into or after the loops is less expensive that the\n+\t\t win we get from rearranging the memory walk\n+\t\t the loop is doing so that it has better\n+\t\t cache behavior.  */\n \t      if (TREE_CODE (stmt) == MODIFY_EXPR\n-\t\t  && is_gimple_cast (TREE_OPERAND (stmt, 1))\n \t\t  && (can_put_in_inner_loop (loop->inner, stmt)\n \t\t      || can_put_after_inner_loop (loop, stmt)))\n \t\tcontinue;"}]}