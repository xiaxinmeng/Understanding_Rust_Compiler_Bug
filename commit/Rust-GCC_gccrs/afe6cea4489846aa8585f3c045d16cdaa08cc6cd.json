{"sha": "afe6cea4489846aa8585f3c045d16cdaa08cc6cd", "node_id": "C_kwDOANBUbNoAKGFmZTZjZWE0NDg5ODQ2YWE4NTg1ZjNjMDQ1ZDE2Y2RhYTA4Y2M2Y2Q", "commit": {"author": {"name": "Qing Zhao", "email": "qing.zhao@oracle.com", "date": "2023-02-28T17:11:05Z"}, "committer": {"name": "Qing Zhao", "email": "qing.zhao@oracle.com", "date": "2023-02-28T17:11:05Z"}, "message": "Fixing PR107411\n\nThis is a bug in tree-ssa-uninit.cc.\nWhen doing the following:\n\n  /* Ignore the call to .DEFERRED_INIT that define the original\n     var itself as the following case:\n       temp = .DEFERRED_INIT (4, 2, \u201calt_reloc\");\n       alt_reloc = temp;\n     In order to avoid generating warning for the fake usage\n     at alt_reloc = temp.\n  */\n\nWe need to compare the var name inside the .DEFERRED_INIT call\n(the 3rd argument) and the name for the LHS variable. if they are the same,\nwe will NOT report the warning.\n\nThere is one issue when we get the name for the LHS variable. when the\nvariable doesn't have a DECL_NAME (it's not a user declared variable,\nwhich is the case for this bug):\n\n  _1 = .DEFERRED_INIT (4, 2, &\"D.2389\"[0]);\n  D.2389 = _1;\n\nThe current checking just ignores this case, and still report the warning.\n\nThe fix is very simple, when getting the name for the LHS variable, we should\nconsider this case and come up with the name the same way as we construct the\n3rd argument for the call to .DEFERRED_INIT (please refer to the routine\n\"gimple_add_init_for_auto_var\")\n\n\tPR middle-end/107411\n\ngcc/ChangeLog:\n\n\tPR middle-end/107411\n\t* gimplify.cc (gimple_add_init_for_auto_var): Use sprintf to replace\n\txasprintf.\n\t* tree-ssa-uninit.cc (warn_uninit): Handle the case when the\n\tLHS varaible of a .DEFERRED_INIT call doesn't have a DECL_NAME.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/107411\n\t* g++.dg/pr107411.C: New test.", "tree": {"sha": "cab3f29c0fd562f30d4adcc05e7a685ca604f5ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cab3f29c0fd562f30d4adcc05e7a685ca604f5ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afe6cea4489846aa8585f3c045d16cdaa08cc6cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afe6cea4489846aa8585f3c045d16cdaa08cc6cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afe6cea4489846aa8585f3c045d16cdaa08cc6cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afe6cea4489846aa8585f3c045d16cdaa08cc6cd/comments", "author": {"login": "qingzhao69", "id": 89154636, "node_id": "MDQ6VXNlcjg5MTU0NjM2", "avatar_url": "https://avatars.githubusercontent.com/u/89154636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qingzhao69", "html_url": "https://github.com/qingzhao69", "followers_url": "https://api.github.com/users/qingzhao69/followers", "following_url": "https://api.github.com/users/qingzhao69/following{/other_user}", "gists_url": "https://api.github.com/users/qingzhao69/gists{/gist_id}", "starred_url": "https://api.github.com/users/qingzhao69/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qingzhao69/subscriptions", "organizations_url": "https://api.github.com/users/qingzhao69/orgs", "repos_url": "https://api.github.com/users/qingzhao69/repos", "events_url": "https://api.github.com/users/qingzhao69/events{/privacy}", "received_events_url": "https://api.github.com/users/qingzhao69/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qingzhao69", "id": 89154636, "node_id": "MDQ6VXNlcjg5MTU0NjM2", "avatar_url": "https://avatars.githubusercontent.com/u/89154636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qingzhao69", "html_url": "https://github.com/qingzhao69", "followers_url": "https://api.github.com/users/qingzhao69/followers", "following_url": "https://api.github.com/users/qingzhao69/following{/other_user}", "gists_url": "https://api.github.com/users/qingzhao69/gists{/gist_id}", "starred_url": "https://api.github.com/users/qingzhao69/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qingzhao69/subscriptions", "organizations_url": "https://api.github.com/users/qingzhao69/orgs", "repos_url": "https://api.github.com/users/qingzhao69/repos", "events_url": "https://api.github.com/users/qingzhao69/events{/privacy}", "received_events_url": "https://api.github.com/users/qingzhao69/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62ed1066196c81ab1fad13b2cc5ebbfe887138f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62ed1066196c81ab1fad13b2cc5ebbfe887138f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62ed1066196c81ab1fad13b2cc5ebbfe887138f9"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "35d1ea226233c2c6b4c550256fc1bcb78bae3cf9", "filename": "gcc/gimplify.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6cea4489846aa8585f3c045d16cdaa08cc6cd/gcc%2Fgimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6cea4489846aa8585f3c045d16cdaa08cc6cd/gcc%2Fgimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.cc?ref=afe6cea4489846aa8585f3c045d16cdaa08cc6cd", "patch": "@@ -1775,9 +1775,9 @@ gimple_add_init_for_auto_var (tree decl,\n \n   else\n     {\n-      char *decl_name_anonymous = xasprintf (\"D.%u\", DECL_UID (decl));\n+      char decl_name_anonymous[3 + (HOST_BITS_PER_INT + 2) / 3];\n+      sprintf (decl_name_anonymous, \"D.%u\", DECL_UID (decl));\n       decl_name = build_string_literal (decl_name_anonymous);\n-      free (decl_name_anonymous);\n     }\n \n   tree call = build_call_expr_internal_loc (loc, IFN_DEFERRED_INIT,"}, {"sha": "7eefecae4f3a05c2f6985c895bc38a0591cc0823", "filename": "gcc/testsuite/g++.dg/pr107411.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6cea4489846aa8585f3c045d16cdaa08cc6cd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr107411.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6cea4489846aa8585f3c045d16cdaa08cc6cd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr107411.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr107411.C?ref=afe6cea4489846aa8585f3c045d16cdaa08cc6cd", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Werror=uninitialized -ftrivial-auto-var-init=zero\"  } */\n+int t();\n+void f(int);\n+\n+void j()\n+{\n+  const int& e = t();\n+  f(e);\n+}"}, {"sha": "9f720ae1f4fa35271ebe4773bd33440b3ee27d07", "filename": "gcc/tree-ssa-uninit.cc", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6cea4489846aa8585f3c045d16cdaa08cc6cd/gcc%2Ftree-ssa-uninit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6cea4489846aa8585f3c045d16cdaa08cc6cd/gcc%2Ftree-ssa-uninit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.cc?ref=afe6cea4489846aa8585f3c045d16cdaa08cc6cd", "patch": "@@ -224,8 +224,6 @@ warn_uninit (opt_code opt, tree t, tree var, gimple *context,\n \t     at alt_reloc = temp.\n \t  */\n \t  tree lhs_var = NULL_TREE;\n-\t  tree lhs_var_name = NULL_TREE;\n-\t  const char *lhs_var_name_str = NULL;\n \n \t  /* Get the variable name from the 3rd argument of call.  */\n \t  tree var_name = gimple_call_arg (var_def_stmt, 2);\n@@ -239,11 +237,22 @@ warn_uninit (opt_code opt, tree t, tree var, gimple *context,\n \t      else if (TREE_CODE (gimple_assign_lhs (context)) == SSA_NAME)\n \t\tlhs_var = SSA_NAME_VAR (gimple_assign_lhs (context));\n \t    }\n-\t  if (lhs_var\n-\t      && (lhs_var_name = DECL_NAME (lhs_var))\n-\t      && (lhs_var_name_str = IDENTIFIER_POINTER (lhs_var_name))\n-\t      && (strcmp (lhs_var_name_str, var_name_str) == 0))\n-\t    return;\n+\t  if (lhs_var)\n+\t    {\n+\t      /* Get the name string for the LHS_VAR.\n+\t\t Refer to routine gimple_add_init_for_auto_var.  */\n+\t      if (DECL_NAME (lhs_var)\n+\t\t  && (strcmp (IDENTIFIER_POINTER (DECL_NAME (lhs_var)),\n+\t\t      var_name_str) == 0))\n+\t\treturn;\n+\t      else if (!DECL_NAME (lhs_var))\n+\t\t{\n+\t\t  char lhs_var_name_str_buf[3 + (HOST_BITS_PER_INT + 2) / 3];\n+\t\t  sprintf (lhs_var_name_str_buf, \"D.%u\", DECL_UID (lhs_var));\n+\t\t  if (strcmp (lhs_var_name_str_buf, var_name_str) == 0)\n+\t\t    return;\n+\t\t}\n+\t    }\n \t  gcc_assert (var_name_str && var_def_stmt);\n \t}\n     }"}]}